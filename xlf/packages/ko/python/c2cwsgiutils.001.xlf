<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/c2cwsgiutils/">
    <body>
      <group id="c2cwsgiutils">
        <trans-unit id="2bfd6a34d6c4ab81741d1fb5ffb5dd9a75a36b95" translate="yes" xml:space="preserve">
          <source>&amp;gt;=2: Use those at your convenience. Pingdom and CO are usually setup at max_level=100. So stay below.</source>
          <target state="translated">&amp;gt; = 2 : 편의에 따라 사용하십시오. Pingdom 및 CO는 일반적으로 max_level = 100으로 설정됩니다. 그러니 아래에 있으십시오.</target>
        </trans-unit>
        <trans-unit id="22a9564671d232956d2228c4db0aab2bc79146e1" translate="yes" xml:space="preserve">
          <source>0: Don't add checks at this level. This max_level is used for doing a simple ping.</source>
          <target state="translated">0 :이 수준에서 검사를 추가하지 않습니다. 이 max_level은 간단한 핑을 수행하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ab89f87c53a61b03676e3e7cc524e63c92ea1f7e" translate="yes" xml:space="preserve">
          <source>1: Checks for anything vital for the usefulness of the service (DB, redis, ...). This is the max_level set
by default and used by load balancers to determine if the service is alive.</source>
          <target state="translated">1 : 서비스 (DB, redis, ...)의 유용성에 중요한 모든 것을 확인합니다. 이는 기본적으로 설정된 max_level이며로드 밸런서에서 서비스가 활성 상태인지 확인하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="70695327732a7078a725de3b5912fe35e6d4f111" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C2C_BROADCAST_PREFIX&lt;/code&gt; (&lt;code&gt;c2c.broadcast_prefix&lt;/code&gt;): The prefix to add to the channels being used (must be
different for 2 different services)</source>
          <target state="translated">&lt;code&gt;C2C_BROADCAST_PREFIX&lt;/code&gt; ( &lt;code&gt;c2c.broadcast_prefix&lt;/code&gt; ) : 사용중인 채널에 추가 할 접두사 (2 개의 다른 서비스에 대해 달라야 함)</target>
        </trans-unit>
        <trans-unit id="4603ac292f4f08b823894c2b5d9ac9dfd55bbd3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C2C_REDIS_URL&lt;/code&gt; (&lt;code&gt;c2c.redis_url&lt;/code&gt;): The URL to the Redis instance to use</source>
          <target state="translated">&lt;code&gt;C2C_REDIS_URL&lt;/code&gt; ( &lt;code&gt;c2c.redis_url&lt;/code&gt; ) : 사용할 Redis 인스턴스에 대한 URL</target>
        </trans-unit>
        <trans-unit id="3ab8e052462b33793cad9f2a0383594f6bbfaabb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GIT_HASH&lt;/code&gt; (&lt;code&gt;c2c.git_hash&lt;/code&gt;): will be used for the release</source>
          <target state="translated">&lt;code&gt;GIT_HASH&lt;/code&gt; ( &lt;code&gt;c2c.git_hash&lt;/code&gt; ) : 릴리스에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3b8bfecd024f465143fee92af08b886fb6643547" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_CLIENT_ENVIRONMENT&lt;/code&gt;: the environment (dev, int, prod, ...)</source>
          <target state="translated">&lt;code&gt;SENTRY_CLIENT_ENVIRONMENT&lt;/code&gt; : 환경 (dev, int, prod, ...)</target>
        </trans-unit>
        <trans-unit id="615b3e3a04ddcbb5e80805b572d2049352afc24d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_CLIENT_IGNORE_EXCEPTIONS&lt;/code&gt;: list (coma separated) of exceptions to ignore (defaults to SystemExit)</source>
          <target state="translated">&lt;code&gt;SENTRY_CLIENT_IGNORE_EXCEPTIONS&lt;/code&gt; : 무시할 예외 목록 ( 쉼표로 구분) (기본값은 SystemExit)</target>
        </trans-unit>
        <trans-unit id="4fa1fbb6e8e1090129ced48030a3d6dee921fafe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_CLIENT_RELEASE&lt;/code&gt;: If not equal to &quot;latest&quot;, will be taken for the release instead of the GIT_HASH</source>
          <target state="translated">&lt;code&gt;SENTRY_CLIENT_RELEASE&lt;/code&gt; : &quot;최신&quot;과 같지 않으면 GIT_HASH 대신 릴리스에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="6938b224a04129de478961d224ce193b75760347" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_EXCLUDES&lt;/code&gt; (&lt;code&gt;c2c.sentry.excludes&lt;/code&gt;): list of loggers (colon separated, without spaces) to exclude for sentry</source>
          <target state="translated">&lt;code&gt;SENTRY_EXCLUDES&lt;/code&gt; ( &lt;code&gt;c2c.sentry.excludes&lt;/code&gt; ) : 센트리 용으로 제외 할 로거 목록 (공백없이 콜론으로 구분)</target>
        </trans-unit>
        <trans-unit id="84d5757c5c20b4ebb5834d9a140b28cf68e26375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_LEVEL&lt;/code&gt;: starting from what logging level to send events to Sentry (defaults to ERROR)</source>
          <target state="translated">&lt;code&gt;SENTRY_LEVEL&lt;/code&gt; : Sentry에 이벤트를 보낼 로깅 수준부터 시작 (기본값 : ERROR)</target>
        </trans-unit>
        <trans-unit id="f8f09001df29074a1c50b390fdd9e4101046aeae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_TAG_...&lt;/code&gt;: to add other custom tags</source>
          <target state="translated">&lt;code&gt;SENTRY_TAG_...&lt;/code&gt; : 다른 사용자 정의 태그 추가</target>
        </trans-unit>
        <trans-unit id="90a781d8c222a21aae6776cd6235886db85a6cb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c2cwsgiutils.pyramid_logging.JsonLogHandler&lt;/code&gt;: to output (on stdout or stderr) JSON formatted logs.</source>
          <target state="translated">&lt;code&gt;c2cwsgiutils.pyramid_logging.JsonLogHandler&lt;/code&gt; : JSON 형식의 로그를 출력합니다 (stdout 또는 stderr에서).</target>
        </trans-unit>
        <trans-unit id="f41c0c258ca96ac2b0a377389553a607c047b6b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c2cwsgiutils.pyramid_logging.PyramidCeeSysLogHandler&lt;/code&gt;: to send @cee formatted logs to syslog through UDP.</source>
          <target state="translated">&lt;code&gt;c2cwsgiutils.pyramid_logging.PyramidCeeSysLogHandler&lt;/code&gt; : UDP를 통해 @cee 형식의 로그를 syslog로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="598d42ec29dd2d95d93a4d79e75e6c6d345d4e20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fast_json&lt;/code&gt;: a faster JSON renderer
is tuned differently.</source>
          <target state="translated">&lt;code&gt;fast_json&lt;/code&gt; : 더 빠른 JSON 렌더러가 다르게 조정됩니다.</target>
        </trans-unit>
        <trans-unit id="00fe2a962203c78948c0b191c6541aefac28190b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;json&lt;/code&gt;: the normal JSON renderer (default)</source>
          <target state="translated">&lt;code&gt;json&lt;/code&gt; : 일반 JSON 렌더러 (기본값)</target>
        </trans-unit>
        <trans-unit id="52ff803386697a8fe6f20e10d7750b11beedec02" translate="yes" xml:space="preserve">
          <source>A class that can be used from a py.test fixture to control a composition</source>
          <target state="translated">구성을 제어하기 위해 py.test 픽스처에서 사용할 수있는 클래스</target>
        </trans-unit>
        <trans-unit id="40b2e3061dffd63c16b43f38987da6cab7e7125c" translate="yes" xml:space="preserve">
          <source>A class that can be used from a py.text fixture to test a REST API</source>
          <target state="translated">REST API를 테스트하기 위해 py.text 픽스처에서 사용할 수있는 클래스</target>
        </trans-unit>
        <trans-unit id="197461a66399edc773ba123e91f293c8d2e1b1fe" translate="yes" xml:space="preserve">
          <source>A command is provided that can generate Doxygen graphs of an SQLAlchemy ORM model.
See &lt;a href=&quot;acceptance_tests/app/models_graph.py&quot;&gt;acceptance_tests/app/models_graph.py&lt;/a&gt; how it's used.</source>
          <target state="translated">SQLAlchemy ORM 모델의 Doxygen 그래프를 생성 할 수있는 명령이 제공됩니다. 사용 방법은 &lt;a href=&quot;acceptance_tests/app/models_graph.py&quot;&gt;accept_tests / app / models_graph.py를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bb9c786e0af9d6f8307ce53330e6db5280d8c3ad" translate="yes" xml:space="preserve">
          <source>A command line (&lt;code&gt;c2cwsgiutils-run&lt;/code&gt;) is provided to start an HTTP server (gunicorn) with a WSGI application.
By default, it will load the application configured in &lt;code&gt;/app/production.ini&lt;/code&gt;, but you can change that with
the &lt;code&gt;C2CWSGIUTILS_CONFIG&lt;/code&gt; environment variable. All the environment variables are usable in the configuration
file using stuff like &lt;code&gt;%(ENV_NAME)s&lt;/code&gt;.</source>
          <target state="translated">WSGI 애플리케이션으로 HTTP 서버 (gunicorn)를 시작하기 위한 명령 줄 ( &lt;code&gt;c2cwsgiutils-run&lt;/code&gt; )이 제공됩니다. 기본적으로 &lt;code&gt;/app/production.ini&lt;/code&gt; 에 구성된 애플리케이션을로드 하지만 &lt;code&gt;C2CWSGIUTILS_CONFIG&lt;/code&gt; 환경 변수 를 사용하여 변경할 수 있습니다 . 모든 환경 변수는 &lt;code&gt;%(ENV_NAME)s&lt;/code&gt; 같은 것을 사용하여 구성 파일에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a56c4b5ebb03d20f437918f26cc37c49b01270b" translate="yes" xml:space="preserve">
          <source>A cornice service drop in replacement for setting up CORS</source>
          <target state="translated">CORS 설정을위한 처마 장식 서비스 드롭</target>
        </trans-unit>
        <trans-unit id="620b607b0927e86dc82cd6c23e3de2b1245b1a2c" translate="yes" xml:space="preserve">
          <source>A custom loader is provided to run pyramid scripts against configuration files containing environment variables:</source>
          <target state="translated">환경 변수가 포함 된 구성 파일에 대해 피라미드 스크립트를 실행하기 위해 사용자 정의 로더가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="c97337a18b165d30ea289d76e5aca51dad107a25" translate="yes" xml:space="preserve">
          <source>A few REST APIs are added and can be seen with this URL:
&lt;code&gt;{C2C_BASE_PATH}&lt;/code&gt;.</source>
          <target state="translated">몇 가지 REST API가 추가되었으며 다음 URL로 볼 수 있습니다. &lt;code&gt;{C2C_BASE_PATH}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="846ea003a96f78f751cc565f5d58fad8d9a50e9f" translate="yes" xml:space="preserve">
          <source>A few other environment variables can be used to tune the info sent with each report:</source>
          <target state="translated">몇 가지 다른 환경 변수를 사용하여 각 보고서와 함께 전송되는 정보를 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0ab89bc52ce841594c8177ee5c7ead458ec074c" translate="yes" xml:space="preserve">
          <source>A filter is automatically installed to handle the HTTP headers set by common proxies and have correct values
in the request object (&lt;code&gt;request.client_addr&lt;/code&gt;, for example). This filter is equivalent to what the
&lt;code&gt;PasteDeploy#prefix&lt;/code&gt; (minus the prefix part) does, but supports newer headers as well (&lt;code&gt;Forwarded&lt;/code&gt;).
If you need to prefix your routes, you can use the &lt;code&gt;route_prefix&lt;/code&gt; parameter of the &lt;code&gt;Configurator&lt;/code&gt; constructor.</source>
          <target state="translated">공통 프록시에 의해 설정된 HTTP 헤더를 처리하고 요청 객체 ( 예 : &lt;code&gt;request.client_addr&lt;/code&gt; )에 올바른 값을 갖도록 필터가 자동으로 설치됩니다 . 이 필터는 &lt;code&gt;PasteDeploy#prefix&lt;/code&gt; (접두사 부분 제외)가 수행하는 작업과 동일하지만 최신 헤더도 지원합니다 ( &lt;code&gt;Forwarded&lt;/code&gt; ). 경로 접두사가 필요한 경우 &lt;code&gt;Configurator&lt;/code&gt; 생성자 의 &lt;code&gt;route_prefix&lt;/code&gt; 매개 변수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7770f590d0aa544dd8644c54d752b7c3750b120c" translate="yes" xml:space="preserve">
          <source>A framework for implementing a health_check service</source>
          <target state="translated">health_check 서비스를 구현하기위한 프레임 워크</target>
        </trans-unit>
        <trans-unit id="c08259a8395554d5eb8d6bc5c48cd7e7aa91dcb9" translate="yes" xml:space="preserve">
          <source>A view to get the version information about the application and the installed packages</source>
          <target state="translated">애플리케이션 및 설치된 패키지에 대한 버전 정보를 가져 오는보기</target>
        </trans-unit>
        <trans-unit id="b152faa17a593ac4e700c8adb9985ae7ccfcfaa5" translate="yes" xml:space="preserve">
          <source>Allow to use a master/slave PostgresQL configuration</source>
          <target state="translated">마스터 / 슬레이브 PostgresQL 구성 사용 허용</target>
        </trans-unit>
        <trans-unit id="eebf7a46853a4dda287d12a347297e08596c8eff" translate="yes" xml:space="preserve">
          <source>Also provide tools for writing acceptance tests:</source>
          <target state="translated">승인 테스트 작성을위한 도구도 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fa5436372695949c495e22f062c7464aa12591f8" translate="yes" xml:space="preserve">
          <source>An optional view to change runtime the log levels</source>
          <target state="translated">런타임 로그 수준을 변경하는 선택적보기</target>
        </trans-unit>
        <trans-unit id="9f68b18ed5d3984501874bfee865da603b6cd71f" translate="yes" xml:space="preserve">
          <source>And your code that initializes the DB connection must look like that:</source>
          <target state="translated">그리고 DB 연결을 초기화하는 코드는 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="3f746eff4bf45fb46ca8106fa74f17cab4a83472" translate="yes" xml:space="preserve">
          <source>As an example on how to use it in an application provided by a Docker image, you can look at the
test application in &lt;a href=&quot;acceptance_tests/app&quot;&gt;acceptance_tests/app&lt;/a&gt;.
To see how to test such an application, look at &lt;a href=&quot;acceptance_tests/tests&quot;&gt;acceptance_tests/tests&lt;/a&gt;.</source>
          <target state="translated">Docker 이미지에서 제공하는 애플리케이션에서이를 사용하는 방법에 대한 예로 accept_tests &lt;a href=&quot;acceptance_tests/app&quot;&gt;/ app&lt;/a&gt; 에서 테스트 애플리케이션을 볼 수 있습니다 . 이러한 애플리케이션을 테스트하는 방법을 보려면 &lt;a href=&quot;acceptance_tests/tests&quot;&gt;accept_tests / tests&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd75ac9a8c8b8a4f270d2f2951f62d12404d620d" translate="yes" xml:space="preserve">
          <source>Both pretty prints the rendered JSON. While this adds significant amount of whitespace, the difference in
bytes transmitted on the network is negligible thanks to gzip compression.</source>
          <target state="translated">둘 다 렌더링 된 JSON을 꽤 인쇄합니다. 이것은 상당한 양의 공백을 추가하지만 gzip 압축 덕분에 네트워크에서 전송되는 바이트의 차이는 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="77ca3fc6500edac54d325df1bbb7ac8e363c54b5" translate="yes" xml:space="preserve">
          <source>Broadcast</source>
          <target state="translated">방송</target>
        </trans-unit>
        <trans-unit id="42fca7b430348fd046110efbac447cefb6a2227d" translate="yes" xml:space="preserve">
          <source>By default, c2cwsgiutils will install exception handling views that will catch any exception raised by the
application views and will transform it into a JSON response with a HTTP status corresponding to the error.</source>
          <target state="translated">기본적으로 c2cwsgiutils는 애플리케이션보기에서 발생한 모든 예외를 포착하고 오류에 해당하는 HTTP 상태가있는 JSON 응답으로 변환하는 예외 처리보기를 설치합니다.</target>
        </trans-unit>
        <trans-unit id="13844228ea43240b1c7b889f66ff60a2fb8a60a6" translate="yes" xml:space="preserve">
          <source>CI</source>
          <target state="translated">CI</target>
        </trans-unit>
        <trans-unit id="2139aadec237bbecb581e62932f94bc3bce7a704" translate="yes" xml:space="preserve">
          <source>CORS</source>
          <target state="translated">CORS</target>
        </trans-unit>
        <trans-unit id="6729a2af207e43ec56be1fca70893807a90ee4d4" translate="yes" xml:space="preserve">
          <source>Camptocamp WSGI utilities</source>
          <target state="translated">Camptocamp WSGI 유틸리티</target>
        </trans-unit>
        <trans-unit id="d789aaabcec2545ddf292bb0ece53e72f8216ae3" translate="yes" xml:space="preserve">
          <source>Change the the version in &lt;a href=&quot;setup.py&quot;&gt;setup.py&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;setup.py&quot;&gt;setup.py&lt;/a&gt; 에서 버전을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="433800a74d5dc73933baa5f13bde9cf33c496bbf" translate="yes" xml:space="preserve">
          <source>Commit and push to master.</source>
          <target state="translated">커밋하고 마스터하기.</target>
        </trans-unit>
        <trans-unit id="2a22b6cd9e671e381ace59d487045e9f3dd47d80" translate="yes" xml:space="preserve">
          <source>Common utilities for Camptocamp WSGI applications</source>
          <target state="translated">Camptocamp WSGI 애플리케이션을위한 공통 유틸리티</target>
        </trans-unit>
        <trans-unit id="7b0efd0bac556e0dd198633ea4e41ec600ebfe0a" translate="yes" xml:space="preserve">
          <source>DB sessions</source>
          <target state="translated">DB 세션</target>
        </trans-unit>
        <trans-unit id="d34b7229a44fbca0da7bd1880fbd09932d5852e9" translate="yes" xml:space="preserve">
          <source>Database maintenance</source>
          <target state="translated">데이터베이스 유지 관리</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">디버깅</target>
        </trans-unit>
        <trans-unit id="d649ef3c18fa22fc0db437db95416a9b8867e88d" translate="yes" xml:space="preserve">
          <source>Developer info</source>
          <target state="translated">개발자 정보</target>
        </trans-unit>
        <trans-unit id="83e67c1928bed48517a685043c5d1984b7f3de20" translate="yes" xml:space="preserve">
          <source>Don't enable that on a busy production system. It will kill your performances.</source>
          <target state="translated">바쁜 프로덕션 시스템에서는 활성화하지 마십시오. 그것은 당신의 공연을 죽일 것입니다.</target>
        </trans-unit>
        <trans-unit id="e05ef188ab4f04c18dcc38bf6b36ed3a3ffdf8a0" translate="yes" xml:space="preserve">
          <source>Error catching views will be put in place to return errors as JSON.</source>
          <target state="translated">오류 포착 뷰는 JSON으로 오류를 반환하기 위해 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="f0dcdbcc9fc280f0d6cf93e04a4eae2ab7c09b59" translate="yes" xml:space="preserve">
          <source>Error handlers to send JSON messages to the client in case of error</source>
          <target state="translated">오류 발생시 클라이언트에 JSON 메시지를 보내는 오류 처리기</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>
        </trans-unit>
        <trans-unit id="b4b0dfe7027c1d349ba13a7e79558e44ec341bd8" translate="yes" xml:space="preserve">
          <source>Exception handling</source>
          <target state="translated">예외 처리</target>
        </trans-unit>
        <trans-unit id="c4f95e97feb4a2f525792302a602d03578975556" translate="yes" xml:space="preserve">
          <source>General config</source>
          <target state="translated">일반 구성</target>
        </trans-unit>
        <trans-unit id="87398e24ea58e8cafa77352da02409bcf395978d" translate="yes" xml:space="preserve">
          <source>Health checks</source>
          <target state="translated">건강 검진</target>
        </trans-unit>
        <trans-unit id="126b8cc22aca54456669d889a838cf54c9674afb" translate="yes" xml:space="preserve">
          <source>If enabled, for each &lt;code&gt;SELECT&lt;/code&gt; query sent by SQLAlchemy, another query it done with &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;
prepended to it. The results are sent to the &lt;code&gt;c2cwsgiutils.sql_profiler&lt;/code&gt; logger.</source>
          <target state="translated">활성화 된 경우 SQLAlchemy에서 보낸 각 &lt;code&gt;SELECT&lt;/code&gt; 쿼리 에 대해 &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; 가 추가 된 다른 쿼리가 수행됩니다 . 결과는 &lt;code&gt;c2cwsgiutils.sql_profiler&lt;/code&gt; 로거 로 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="479b6d4353a51a5518041307b8fb7bef197e8d3f" translate="yes" xml:space="preserve">
          <source>If enabled, some metrics are automatically generated:</source>
          <target state="translated">활성화 된 경우 일부 메트릭이 자동으로 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="4987a434fb17ece7de226809fb6acb4aab39df2b" translate="yes" xml:space="preserve">
          <source>If not configured, only the process receiving the request is impacted.</source>
          <target state="translated">구성되지 않은 경우 요청을 수신하는 프로세스 만 영향을받습니다.</target>
        </trans-unit>
        <trans-unit id="a8d85c4b59a46f35ef7f9dd40c4ddcc8aecfb341" translate="yes" xml:space="preserve">
          <source>If redis is configured and the version information is available, check that the version matches
accross all instances.</source>
          <target state="translated">redis가 구성되어 있고 버전 정보를 사용할 수있는 경우 버전이 모든 인스턴스에서 일치하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f429fdaddd35b76e9593e63ec9827b451d05e959" translate="yes" xml:space="preserve">
          <source>If redis is configured, check that redis is reachable.</source>
          <target state="translated">redis가 구성된 경우 redis에 연결할 수 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b0a271b5f5192ec2a4fcdaebab181c38b2581c5e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/app/versions.json&lt;/code&gt; exists, a view is added (&lt;code&gt;{C2C_BASE_PATH}/versions.json&lt;/code&gt;) to query the current
version of a app. This file is generated by calling the &lt;code&gt;c2cwsgiutils-genversion [$GIT_TAG] $GIT_HASH&lt;/code&gt;
command line. Usually done in the &lt;a href=&quot;acceptance_tests/app/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt; of the WSGI application.</source>
          <target state="translated">는 IF &lt;code&gt;/app/versions.json&lt;/code&gt; 이 존재하는 뷰 (추가 &lt;code&gt;{C2C_BASE_PATH}/versions.json&lt;/code&gt; 을 A 앱의 현재 버전을 조회 할). 이 파일은 &lt;code&gt;c2cwsgiutils-genversion [$GIT_TAG] $GIT_HASH&lt;/code&gt; 명령 줄 을 호출하여 생성됩니다 . 일반적으로 WSGI 애플리케이션 의 &lt;a href=&quot;acceptance_tests/app/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt; 에서 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="38567db599e961b8b12abef3906b3a3ec0f78a17" translate="yes" xml:space="preserve">
          <source>If you need an image with a smaller foot print, use the tags prefixed with &lt;code&gt;-light&lt;/code&gt;. Those are without
gdal and without the build tools.</source>
          <target state="translated">더 작은 크기의 이미지가 필요한 경우 &lt;code&gt;-light&lt;/code&gt; 접두사가 붙은 태그를 사용하십시오 . 그것들은 gdal과 빌드 도구가 없습니다.</target>
        </trans-unit>
        <trans-unit id="335059e338a0543b0cb73b46d5fc442a92e309a7" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;C2C_PROFILER_PATH&lt;/code&gt; environment variable, you'll enable a profiler that will be available at
the given path. Due to limitations in the library used, the path must be at the root of the application (it
cannot contain slashes). You can also define the &lt;code&gt;C2C_PROFILER_MODULES&lt;/code&gt;, a space separated list of Python
packages to have a pie chart of how much time is spent in the given packages.</source>
          <target state="translated">&lt;code&gt;C2C_PROFILER_PATH&lt;/code&gt; 환경 변수 를 설정 하면 주어진 경로에서 사용할 수있는 프로파일 러를 활성화합니다. 사용되는 라이브러리의 제한으로 인해 경로는 애플리케이션의 루트에 있어야합니다 (슬래시를 포함 할 수 없음). &lt;code&gt;C2C_PROFILER_MODULES&lt;/code&gt; , 공백으로 구분 된 Python 패키지 목록을 정의 하여 주어진 패키지에서 얼마나 많은 시간이 소요되는지에 대한 원형 차트를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7aae6512bb658a18649e2a92a834d3a4781d624a" translate="yes" xml:space="preserve">
          <source>If you want to use pyramid_debugtoolbar, you need to disable exception handling and configure it like that:</source>
          <target state="translated">pyramid_debugtoolbar를 사용하려면 예외 처리를 비활성화하고 다음과 같이 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="d6089230edd4805d7667d73252e39029d8e0864a" translate="yes" xml:space="preserve">
          <source>If you want to use this feature, you must have the &lt;code&gt;linesman&lt;/code&gt; package installed.</source>
          <target state="translated">이 기능을 사용하려면 &lt;code&gt;linesman&lt;/code&gt; 패키지가 설치되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="1b446a3ff5dd4ef04ce63cb4eab5de7233cf2870" translate="yes" xml:space="preserve">
          <source>In JSON logging formats, a &lt;code&gt;request_id&lt;/code&gt; field is automatically added.</source>
          <target state="translated">JSON 로깅 형식에서는 &lt;code&gt;request_id&lt;/code&gt; 필드가 자동으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="62dadeb38d32abb213b6a24899ee01dbb6eb858a" translate="yes" xml:space="preserve">
          <source>In development mode (&lt;code&gt;DEVELOPMENT=1&lt;/code&gt;), all the details (SQL statement, stacktrace, ...) are sent to the
client. In production mode, you can still get them by sending the secret defined in &lt;code&gt;C2C_SECRET&lt;/code&gt; in the query.</source>
          <target state="translated">개발 모드 ( &lt;code&gt;DEVELOPMENT=1&lt;/code&gt; )에서는 모든 세부 정보 (SQL 문, 스택 추적, ...)가 클라이언트로 전송됩니다. 프로덕션 모드에서는 쿼리 에서 &lt;code&gt;C2C_SECRET&lt;/code&gt; 에 정의 된 비밀을 전송하여 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e70c8e38b119b00f0a802459292f9132df19443" translate="yes" xml:space="preserve">
          <source>In general, configuration can be done both with environment variables (taken first) or with entries in the
&lt;code&gt;production.ini&lt;/code&gt; file.</source>
          <target state="translated">일반적으로 환경 변수 (먼저 가져옴) 또는 &lt;code&gt;production.ini&lt;/code&gt; 파일의 항목을 사용하여 구성을 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="54b61179e1209b3665d92aa93f77d558e58d544e" translate="yes" xml:space="preserve">
          <source>In order to follow the logs generated by a request across all the services (think separate processes),
c2cwsgiutils tries to flag averything with a request ID. This field can come from the input as request headers
(&lt;code&gt;X-Request-ID&lt;/code&gt;, &lt;code&gt;X-Correlation-ID&lt;/code&gt;, &lt;code&gt;Request-ID&lt;/code&gt; or &lt;code&gt;X-Varnish&lt;/code&gt;) or will default to a UUID. You can add an
additional request header as source for that by defining the &lt;code&gt;C2C_REQUEST_ID_HEADER&lt;/code&gt; environment variable
(&lt;code&gt;c2c.request_id_header&lt;/code&gt;).</source>
          <target state="translated">모든 서비스에서 요청에 의해 생성 된 로그를 추적하기 위해 (별도의 프로세스를 생각해보십시오) c2cwsgiutils는 요청 ID로 모든 것에 플래그를 지정하려고합니다. 이 필드는 요청 헤더 ( &lt;code&gt;X-Request-ID&lt;/code&gt; , &lt;code&gt;X-Correlation-ID&lt;/code&gt; , &lt;code&gt;Request-ID&lt;/code&gt; 또는 &lt;code&gt;X-Varnish&lt;/code&gt; )로 입력에서 가져 오거나 기본적으로 UUID로 설정됩니다. &lt;code&gt;C2C_REQUEST_ID_HEADER&lt;/code&gt; 환경 변수 ( &lt;code&gt;c2c.request_id_header&lt;/code&gt; ) 를 정의하여 추가 요청 헤더를 소스로 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="a3b355284f30f05d37e5865916f80d8f31361148" translate="yes" xml:space="preserve">
          <source>It is possible to automatically reload gunicorn as soon as you change your local python code. For this you need
to have a specially tweaked &lt;code&gt;docker-compose.yml&lt;/code&gt;:</source>
          <target state="translated">로컬 Python 코드를 변경하자마자 gunicorn을 자동으로 다시로드 할 수 있습니다. 이를 위해 특별히 조정 된 &lt;code&gt;docker-compose.yml&lt;/code&gt; 이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="cb152d65202ce93c22270d18254d8f8b20e43228" translate="yes" xml:space="preserve">
          <source>It will only add a timer event in case of success. If you want to measure both success and failures, do that:</source>
          <target state="translated">성공한 경우에만 타이머 이벤트를 추가합니다. 성공과 실패를 모두 측정하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="c2d45b6d22c769d2d0d201002cdeb96e9e90c4c6" translate="yes" xml:space="preserve">
          <source>JSON pretty print</source>
          <target state="translated">JSON 프리티 프린트</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">벌채 반출</target>
        </trans-unit>
        <trans-unit id="8837132b70012545bc333fce0fc89b1128773667" translate="yes" xml:space="preserve">
          <source>Logging handler for CEE/UDP logs</source>
          <target state="translated">CEE / UDP 로그에 대한 로깅 핸들러</target>
        </trans-unit>
        <trans-unit id="53665c23afb88afba6fff264d74bfdf211812578" translate="yes" xml:space="preserve">
          <source>Look at the &lt;code&gt;c2cwsgiutils-stats-db&lt;/code&gt; utility if you want to generate statistics (gauges) about the
row counts.</source>
          <target state="translated">행 수에 대한 통계 (게이지)를 생성 하려면 &lt;code&gt;c2cwsgiutils-stats-db&lt;/code&gt; 유틸리티를 살펴보십시오 .</target>
        </trans-unit>
        <trans-unit id="0606daeb324a2528fa87bdde24102b383e2cdd2d" translate="yes" xml:space="preserve">
          <source>Look at the documentation of the &lt;code&gt;c2cwsgiutils.health_check.HealthCheck&lt;/code&gt; class for more information.</source>
          <target state="translated">자세한 내용 은 &lt;code&gt;c2cwsgiutils.health_check.HealthCheck&lt;/code&gt; 클래스 의 설명서 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="72cb6dc45fb7b74ae0117845ee1faf84a1b9a851" translate="yes" xml:space="preserve">
          <source>Look at the logging configuration part of
&lt;a href=&quot;acceptance_tests/app/production.ini&quot;&gt;acceptance_tests/app/production.ini&lt;/a&gt; for a usage example.</source>
          <target state="translated">사용 예 는 &lt;a href=&quot;acceptance_tests/app/production.ini&quot;&gt;accept_tests / app / production.ini&lt;/a&gt; 의 로깅 구성 부분을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6bc8cda985b21ddefd413e5875925ec9adb272f1" translate="yes" xml:space="preserve">
          <source>Make sure you are strict with the version numbers:</source>
          <target state="translated">버전 번호가 엄격한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="ddf6a1f0ce8cfffc5cd8f14230ab1fecd0f34953" translate="yes" xml:space="preserve">
          <source>Metrics</source>
          <target state="translated">지표</target>
        </trans-unit>
        <trans-unit id="9e9388a7cdc5485881892a00b41fabbf152e9856" translate="yes" xml:space="preserve">
          <source>Or (preferred) as a base Docker image:
&lt;a href=&quot;https://hub.docker.com/r/camptocamp/c2cwsgiutils/&quot;&gt;camptocamp/c2cwsgiutils:3&lt;/a&gt;</source>
          <target state="translated">또는 (선호) 기본 Docker 이미지로 : &lt;a href=&quot;https://hub.docker.com/r/camptocamp/c2cwsgiutils/&quot;&gt;camptocamp / c2cwsgiutils : 3&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="30113c735f4885a8953390cde7b7bebdc6ddfca4" translate="yes" xml:space="preserve">
          <source>Other functions exists to generate metrics. Look at the &lt;code&gt;c2cwsgiutils.stats&lt;/code&gt; module.</source>
          <target state="translated">메트릭을 생성하는 다른 기능이 있습니다. &lt;code&gt;c2cwsgiutils.stats&lt;/code&gt; 모듈을 살펴보십시오 .</target>
        </trans-unit>
        <trans-unit id="31da1961bbfc7c4ddeb384d30515cc288fec6568" translate="yes" xml:space="preserve">
          <source>Profiler</source>
          <target state="translated">프로파일 러</target>
        </trans-unit>
        <trans-unit id="f02e559d3a1a7a22c409770a05c6c9d8c45be003" translate="yes" xml:space="preserve">
          <source>Provide a small framework for gathering performance statistics about
a web application (statsd protocol)</source>
          <target state="translated">웹 애플리케이션에 대한 성능 통계를 수집하기위한 작은 프레임 워크 제공 (statsd 프로토콜)</target>
        </trans-unit>
        <trans-unit id="38d1f195f5e8773874200e74a28ab6c7fd257580" translate="yes" xml:space="preserve">
          <source>Pyramid</source>
          <target state="translated">피라미드</target>
        </trans-unit>
        <trans-unit id="b9e45c1e8693e236d04c53afd127fae97dbdbfff" translate="yes" xml:space="preserve">
          <source>Rebase the &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; branch to this commit and push the &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; and
the tag to github. Make sure to do that at the same time so that Jenkins can see the tag when it builds
the branch.</source>
          <target state="translated">리베이스 &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; 이 커밋에 지점을하고 밀어 &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; 와 GitHub의에 태그를. Jenkins가 브랜치를 빌드 할 때 태그를 볼 수 있도록 동시에 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="2141618e5f3d96bdd146ac9a61743035fc4c6e44" translate="yes" xml:space="preserve">
          <source>Request tracking</source>
          <target state="translated">추적 요청</target>
        </trans-unit>
        <trans-unit id="d0de7b0ef479625f70c5a5afc65a5d6e1fd8eaf9" translate="yes" xml:space="preserve">
          <source>SQL profiler</source>
          <target state="translated">SQL 프로파일 러</target>
        </trans-unit>
        <trans-unit id="e2f81fce9de7b0f1523799d79f3671ee6bc8db05" translate="yes" xml:space="preserve">
          <source>SQL profiler to debug DB performance problems, disabled by default. Warning, it will slow down everything.</source>
          <target state="translated">DB 성능 문제를 디버깅하는 SQL 프로파일 러 (기본적으로 비활성화 됨) 경고, 그것은 모든 것을 느리게 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="ba50ebd9f7dd0c73f24f5c75dd2f7fb86f0a724e" translate="yes" xml:space="preserve">
          <source>SQLAlchemy models graph</source>
          <target state="translated">SQLAlchemy 모델 그래프</target>
        </trans-unit>
        <trans-unit id="f3994f84eae2b797308c63d8a508944f6b95b8bc" translate="yes" xml:space="preserve">
          <source>STATSD_ADDRESS (c2c.statsd_address): if defined, send stats to the given statsd server</source>
          <target state="translated">STATSD_ADDRESS (c2c.statsd_address) : 정의 된 경우 주어진 statsd 서버에 통계를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="baed1c0295f09a37d29df42570f8954930570b2f" translate="yes" xml:space="preserve">
          <source>STATSD_PREFIX (c2c.statsd_prefix): prefix to add to every metric names</source>
          <target state="translated">STATSD_PREFIX (c2c.statsd_prefix) : 모든 메트릭 이름에 추가 할 접두사</target>
        </trans-unit>
        <trans-unit id="1f58161857618a7b760b35a6179c7a12f2c56dcd" translate="yes" xml:space="preserve">
          <source>STATSD_TAG_{tag_name}: To set a global tag for the service</source>
          <target state="translated">STATSD_TAG_ {tag_name} : 서비스에 대한 전역 태그를 설정하려면</target>
        </trans-unit>
        <trans-unit id="f6d133dff2b3a54097578455df21d497cd7c91a0" translate="yes" xml:space="preserve">
          <source>STATSD_USE_TAGS: If true, automatic metrics will use tags</source>
          <target state="translated">STATSD_USE_TAGS : true 인 경우 자동 측정 항목이 태그를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c2ac9656148c30b660487d8f6dbce7c388b05a92" translate="yes" xml:space="preserve">
          <source>STATS_VIEW (c2c.stats_view): if defined, will enable the stats view &lt;code&gt;{C2C_BASE_PATH}/stats.json&lt;/code&gt;</source>
          <target state="translated">STATS_VIEW (c2c.stats_view) : 정의 된 경우 통계보기 &lt;code&gt;{C2C_BASE_PATH}/stats.json&lt;/code&gt; 을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="84daf5be04f0f5aae7fe85868958d1c6bf7471c0" translate="yes" xml:space="preserve">
          <source>Sentry integration</source>
          <target state="translated">Sentry 통합</target>
        </trans-unit>
        <trans-unit id="5dadd887dcb50021624e67465012803ceecfa338" translate="yes" xml:space="preserve">
          <source>Some APIs are protected by a secret. This secret is specified in the &lt;code&gt;C2C_SECRET&lt;/code&gt; variable or &lt;code&gt;c2c.secret&lt;/code&gt;
property. It is either passed as the &lt;code&gt;secret&lt;/code&gt; query parameter or the &lt;code&gt;X-API-Key&lt;/code&gt; header. Once
accessed with a good secret, a cookie is stored and the secret can be omitted.</source>
          <target state="translated">일부 API는 비밀로 보호됩니다. 이 비밀은 &lt;code&gt;C2C_SECRET&lt;/code&gt; 변수 또는 &lt;code&gt;c2c.secret&lt;/code&gt; 속성에 지정됩니다 . 그것은 중 하나로 전달되는 &lt;code&gt;secret&lt;/code&gt; 쿼리 매개 변수 또는 &lt;code&gt;X-API-Key&lt;/code&gt; 헤더입니다. 좋은 비밀로 액세스하면 쿠키가 저장되고 비밀을 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9c766c0e71b5f8d43a594b57efeb10742727dd9" translate="yes" xml:space="preserve">
          <source>Some c2cwsgiutils APIs effect or query the state of the WSGI server. Since only one process out of the 5
(by default) time the number of servers gets a query, only this one will be affected. To avoid that, you
can configure c2cwsgiutils to use Redis pub/sub to broadcast those requests and collect the answers.</source>
          <target state="translated">일부 c2cwsgiutils API는 WSGI 서버의 상태에 영향을 미치거나 쿼리합니다. 5 (기본) 시간 중 하나의 프로세스 만 서버 수에 쿼리를 가져 오므로이 프로세스 만 영향을받습니다. 이를 방지하기 위해 Redis pub / sub를 사용하여 해당 요청을 브로드 캐스트하고 응답을 수집하도록 c2cwsgiutils를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88122aa8f93aa8160e94d38904c5a9ccbf54a9fb" translate="yes" xml:space="preserve">
          <source>Tag the GIT commit.</source>
          <target state="translated">GIT 커밋에 태그를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="748933df4ef4e024c438d4496748e9b73ad6f898" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;c2cwsgiutils.db.setup_session&lt;/code&gt; allows you to setup a DB session that has two engines for accessing a
master/slave PostgresQL setup. The slave engine (read only) will be used automatically for &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt;
requests and the master engine (read write) will be used for the other queries.</source>
          <target state="translated">&lt;code&gt;c2cwsgiutils.db.setup_session&lt;/code&gt; 는 설정에 마스터 / 슬레이브 PostgreSQL의 설정에 액세스하기위한 두 개의 엔진을 가진 DB 세션을 수행 할 수 있습니다. 슬레이브 엔진 (읽기 전용)은 &lt;code&gt;GET&lt;/code&gt; 및 &lt;code&gt;OPTIONS&lt;/code&gt; 요청에 자동으로 사용 되며 마스터 엔진 (읽기 쓰기)은 다른 쿼리에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7ea882394efe9889032811641e47cbe6cbfdfdcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fast_json&lt;/code&gt; renderer is using ujson which is faster, but doesn't offer the ability to change the rendering
of some types (the &lt;code&gt;default&lt;/code&gt; parameter of json.dumps). This will interact badly with &lt;code&gt;papyrus&lt;/code&gt; and such.</source>
          <target state="translated">&lt;code&gt;fast_json&lt;/code&gt; 의 렌더러는 빠른 ujson을 사용하고 있지만, 일부 유형의 렌더링 (변경 할 수있는 기능을 제공하지 않는 &lt;code&gt;default&lt;/code&gt; json.dumps의 매개 변수). 이것은 &lt;code&gt;papyrus&lt;/code&gt; 등과 나쁘게 상호 작용할 것 입니다.</target>
        </trans-unit>
        <trans-unit id="5ca4ed5dfe6fe41e992bf78fce0fbd324028969f" translate="yes" xml:space="preserve">
          <source>The GUNICORN_PARAMS has the &lt;code&gt;--reload&lt;/code&gt; parameter and your local python code is
mounted (read only) into the container.</source>
          <target state="translated">GUNICORN_PARAMS에는 &lt;code&gt;--reload&lt;/code&gt; 매개 변수가 있으며 로컬 Python 코드가 컨테이너에 마운트 (읽기 전용)됩니다.</target>
        </trans-unit>
        <trans-unit id="7652d707f204edab6ed61614e83c42b5bdb39cf2" translate="yes" xml:space="preserve">
          <source>The SQL profiler must be configured with the &lt;code&gt;C2C_SQL_PROFILER_ENABLED&lt;/code&gt; environment variable. That enables a view
to query the status of the profiler (&lt;code&gt;{C2C_BASE_PATH}/sql_profiler?secret={C2C_SECRET}&lt;/code&gt;) or to
enable/disable it (&lt;code&gt;{C2C_BASE_PATH}/sql_profiler?secret={C2C_SECRET}&amp;amp;enable={1|0}&lt;/code&gt;).</source>
          <target state="translated">SQL 프로파일 러는 &lt;code&gt;C2C_SQL_PROFILER_ENABLED&lt;/code&gt; 환경 변수 로 구성되어야합니다 . 그러면 뷰가 프로파일 러의 상태 ( &lt;code&gt;{C2C_BASE_PATH}/sql_profiler?secret={C2C_SECRET}&lt;/code&gt; )를 쿼리 하거나 활성화 / 비활성화 ( &lt;code&gt;{C2C_BASE_PATH}/sql_profiler?secret={C2C_SECRET}&amp;amp;enable={1|0}&lt;/code&gt; ) 할 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="b324b58ebe72ff42727dee98895a7f1201c90ae2" translate="yes" xml:space="preserve">
          <source>The URL &lt;code&gt;{C2C_BASE_PATH}/health_check?checks=&amp;lt;check_name&amp;gt;&lt;/code&gt; can be used to run the health checks on some
checks, coma separated list.</source>
          <target state="translated">URL &lt;code&gt;{C2C_BASE_PATH}/health_check?checks=&amp;lt;check_name&amp;gt;&lt;/code&gt; 은 일부 검사 (쉼표로 구분 된 목록)에서 상태 검사를 실행하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b92e078e85de51fee599b5bc4f52c3a2af526158" translate="yes" xml:space="preserve">
          <source>The configuration parameters are:</source>
          <target state="translated">구성 매개 변수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1a29ce4e251db053cd33b3e4a07b1c1d684b24ac" translate="yes" xml:space="preserve">
          <source>The impacted APIs are:</source>
          <target state="translated">영향을받는 API는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f49a45ed80f1bde4a3ab062cd9cd67bfbbc57523" translate="yes" xml:space="preserve">
          <source>The levels are:</source>
          <target state="translated">레벨은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2d1a38e889537ad2241e80e30f229a4361e97b61" translate="yes" xml:space="preserve">
          <source>The library is available in PYPI:
&lt;a href=&quot;https://pypi.python.org/pypi/c2cwsgiutils&quot;&gt;https://pypi.python.org/pypi/c2cwsgiutils&lt;/a&gt;</source>
          <target state="translated">라이브러리는 PYPI에서 사용할 수 있습니다. &lt;a href=&quot;https://pypi.python.org/pypi/c2cwsgiutils&quot;&gt;https://pypi.python.org/pypi/c2cwsgiutils&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9f6309f9594085646006791c5005121c58bfc411" translate="yes" xml:space="preserve">
          <source>The path &lt;code&gt;/metrics&lt;/code&gt; provide some metrics for Prometheus.
By default we have the &lt;code&gt;smap&lt;/code&gt;&lt;code&gt;pss&lt;/code&gt;, but we can easly add the &lt;code&gt;rss&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt; or your custom settings:</source>
          <target state="translated">&lt;code&gt;/metrics&lt;/code&gt; 경로 는 Prometheus에 대한 몇 가지 메트릭을 제공합니다. 기본적으로 &lt;code&gt;smap&lt;/code&gt; &lt;code&gt;pss&lt;/code&gt; 가 있지만 &lt;code&gt;rss&lt;/code&gt; , &lt;code&gt;size&lt;/code&gt; 또는 사용자 정의 설정을 쉽게 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="58d7a5046171de6759599d1de3ddf106166632ec" translate="yes" xml:space="preserve">
          <source>The profiler, even if configured, is actually disabled when the application starts. To enable it you must
visit its page.</source>
          <target state="translated">프로파일 러는 구성되어 있어도 응용 프로그램이 시작될 때 실제로 비활성화됩니다. 활성화하려면 해당 페이지를 방문해야합니다.</target>
        </trans-unit>
        <trans-unit id="e2d67889f7bdffebcb806ded4f8f2f7ac955dbad" translate="yes" xml:space="preserve">
          <source>The requests module is also patched to monitor requests done without timeout. In that case, you can
configure a default timeout with the &lt;code&gt;C2C_REQUESTS_DEFAULT_TIMEOUT&lt;/code&gt; environment variable
(&lt;code&gt;c2c.requests_default_timeout&lt;/code&gt;). If no timeout and no default is specified, a warning is issued.</source>
          <target state="translated">요청 모듈은 시간 초과없이 수행 된 요청을 모니터링하기 위해 패치됩니다. 이 경우 &lt;code&gt;C2C_REQUESTS_DEFAULT_TIMEOUT&lt;/code&gt; 환경 변수 ( &lt;code&gt;c2c.requests_default_timeout&lt;/code&gt; )를 사용하여 기본 시간 제한을 구성 할 수 있습니다 . 제한 시간이없고 기본값이 지정되지 않은 경우 경고가 발행됩니다.</target>
        </trans-unit>
        <trans-unit id="fd4f376275e7ced52435d7b2c2f86e939ac2df19" translate="yes" xml:space="preserve">
          <source>The stacktraces can be sent to a sentry.io service for collection. To enable it, you must set the &lt;code&gt;SENTRY_URL&lt;/code&gt;
(&lt;code&gt;c2c.sentry_url&lt;/code&gt;) to point the the project's public DSN.</source>
          <target state="translated">스택 추적은 수집을 위해 sentry.io 서비스로 보낼 수 있습니다. 이를 활성화하려면 프로젝트의 공용 DSN을 가리 &lt;code&gt;c2c.sentry_url&lt;/code&gt; 도록 &lt;code&gt;SENTRY_URL&lt;/code&gt; ( c2c.sentry_url )을 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="822a87d4c0f932993a42a66721c7c600ae60a908" translate="yes" xml:space="preserve">
          <source>Then, in your application, it is recommended to transmit the request ID to the external REST APIs. Use
the &lt;code&gt;X-Request-ID&lt;/code&gt; HTTP header, for example. The value of the request ID is accessible through an added
&lt;code&gt;c2c_request_id&lt;/code&gt; attribute on the Pyramid Request objects. The &lt;code&gt;requests&lt;/code&gt; module is patched to automatically
add this header.</source>
          <target state="translated">그런 다음 애플리케이션에서 요청 ID를 외부 REST API로 전송하는 것이 좋습니다. 예를 들어 &lt;code&gt;X-Request-ID&lt;/code&gt; HTTP 헤더를 사용하십시오 . 요청 ID의 값은 피라미드 요청 객체에 추가 된 &lt;code&gt;c2c_request_id&lt;/code&gt; 속성을 통해 액세스 할 수 있습니다. &lt;code&gt;requests&lt;/code&gt; 모듈은 자동으로이 헤더를 추가하는 패치.</target>
        </trans-unit>
        <trans-unit id="2990fb4dd03f60487e35c35a0dd762ec0c1e678b" translate="yes" xml:space="preserve">
          <source>Then, the URL &lt;code&gt;{C2C_BASE_PATH}/health_check?max_level=3&lt;/code&gt; can be used to run the health checks and get a report
looking like that (in case of error):</source>
          <target state="translated">그런 다음 URL &lt;code&gt;{C2C_BASE_PATH}/health_check?max_level=3&lt;/code&gt; 을 사용하여 상태 확인을 실행하고 다음과 같은 보고서를 얻을 수 있습니다 (오류 발생시).</target>
        </trans-unit>
        <trans-unit id="b0bdfc6bd56e4e4fb17b304024809eac3282715f" translate="yes" xml:space="preserve">
          <source>This is a Python 3 library (&amp;gt;=3.5) providing common tools for Camptocamp WSGI
applications:</source>
          <target state="translated">Camptocamp WSGI 애플리케이션을위한 공통 도구를 제공하는 Python 3 라이브러리 (&amp;gt; = 3.5)입니다.</target>
        </trans-unit>
        <trans-unit id="8ef7e73fa15b2812167b37420cf2880ea6ca8795" translate="yes" xml:space="preserve">
          <source>To enable and configure the metrics framework, you can use:</source>
          <target state="translated">메트릭 프레임 워크를 활성화하고 구성하려면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b868433795e5cc675f5ec8e62cd68efea1183f1b" translate="yes" xml:space="preserve">
          <source>To enable health checks, you must add some setup in your WSGI main (usually after the DB connections are
setup). For example:</source>
          <target state="translated">상태 확인을 활성화하려면 WSGI 메인에 일부 설정을 추가해야합니다 (보통 DB 연결이 설정된 후). 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="7cc76441a23295db2476e924dab9dcb8f820e8d4" translate="yes" xml:space="preserve">
          <source>To enable most of the features of c2cwsgiutils, you need to add this line to your WSGI main:</source>
          <target state="translated">c2cwsgiutils의 대부분의 기능을 활성화하려면 WSGI 메인에 다음 줄을 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="98ece86fe234f0b9e143569e66c58c2210b6d5e1" translate="yes" xml:space="preserve">
          <source>To enable the debugging interface, you must set the &lt;code&gt;C2C_DEBUG_VIEW_ENABLED&lt;/code&gt; environment variable. Then you can
have dumps of a few things:</source>
          <target state="translated">디버깅 인터페이스를 활성화하려면 &lt;code&gt;C2C_DEBUG_VIEW_ENABLED&lt;/code&gt; 환경 변수를 설정해야합니다 . 그런 다음 몇 가지 사항을 덤프 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9840aa471523c0a1f63895425e782de46f244bd" translate="yes" xml:space="preserve">
          <source>To have CORS compliant views, define your views like that:</source>
          <target state="translated">CORS 호환보기를 가지려면 다음과 같이보기를 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="24fcdcaf28c5364ba5464193672d744f7443be41" translate="yes" xml:space="preserve">
          <source>To lint and test everything, run the following command:</source>
          <target state="translated">모든 것을 Lint하고 테스트하려면 다음 명령어를 실행하세요.</target>
        </trans-unit>
        <trans-unit id="3928f386be9c9a5ac26638c5d1618bb7b2d3c0e1" translate="yes" xml:space="preserve">
          <source>To make a release:</source>
          <target state="translated">릴리스하려면 :</target>
        </trans-unit>
        <trans-unit id="2ceb08f0cb1216668d60e2fb31994c5ff05d821e" translate="yes" xml:space="preserve">
          <source>To use that, your production.ini must look like that:</source>
          <target state="translated">이를 사용하려면 production.ini가 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="f1324ff49b4ebaa7ed3a7a1c3c49a65c85efdb7b" translate="yes" xml:space="preserve">
          <source>Two JSON renderers are available:</source>
          <target state="translated">두 가지 JSON 렌더러를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0dbd6958b52adbebe7bce447637e9da93129804" translate="yes" xml:space="preserve">
          <source>Two new logging backends are provided:</source>
          <target state="translated">두 개의 새로운 로깅 백엔드가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="fd9a98ae4d82da022b7fe61c7d85a671a5fc75ed" translate="yes" xml:space="preserve">
          <source>Version information</source>
          <target state="translated">버전 정보</target>
        </trans-unit>
        <trans-unit id="525e1736cf03dcb4f095790ba67091e9c2230fc9" translate="yes" xml:space="preserve">
          <source>We need the &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; branch, so that Jenkins can build a new docker image for the major
versions every nights.</source>
          <target state="translated">Jenkins가 매일 밤 주요 버전에 대한 새로운 도커 이미지를 빌드 할 수 있도록 &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; 분기 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="3b85b73212608ea335d3cb8ba4b6c8563e6cdccc" translate="yes" xml:space="preserve">
          <source>When you instanciate the &lt;code&gt;HealthCheck&lt;/code&gt; class, two checks may be automatically enabled:</source>
          <target state="translated">&lt;code&gt;HealthCheck&lt;/code&gt; 클래스 를 인스턴스화하면 두 가지 검사가 자동으로 활성화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ec683ab42fd9c493f9bf935cd077f7b62319da1" translate="yes" xml:space="preserve">
          <source>With pip:</source>
          <target state="translated">pip 사용 :</target>
        </trans-unit>
        <trans-unit id="85f7f3e7d905903c0e9b34eab2e6260e72b9d1d2" translate="yes" xml:space="preserve">
          <source>You can configure the base URL for accessing the views provided by c2cwsgiutils with an environment variable
named &lt;code&gt;C2C_BASE_PATH&lt;/code&gt; or in the &lt;code&gt;production.ini&lt;/code&gt; file with a property named &lt;code&gt;c2c.base_path&lt;/code&gt;.</source>
          <target state="translated">당신은 환경 변수의 이름과 c2cwsgiutils에서 제공하는 뷰에 액세스하기위한 기본 URL을 구성 할 수 있습니다 &lt;code&gt;C2C_BASE_PATH&lt;/code&gt; 또는에서 &lt;code&gt;production.ini&lt;/code&gt; 라는 속성을 가진 파일 &lt;code&gt;c2c.base_path&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="e8f4cf4cd69248f76cd0e50a700abd41a092f1c2" translate="yes" xml:space="preserve">
          <source>You can enable (disabled by default since it can have a cost) the flagging of the SQL requests as well by
setting the C2C_SQL_REQUEST_ID environment variable (or c2c.sql_request_id in the .ini file). This will use
the application name to pass along the request id. If you do that, you must include the application name in
the PostgreSQL logs by setting &lt;code&gt;log_line_prefix&lt;/code&gt; to something like &lt;code&gt;&quot;%a &quot;&lt;/code&gt; (don't forget the space).</source>
          <target state="translated">C2C_SQL_REQUEST_ID 환경 변수 (또는 .ini 파일의 c2c.sql_request_id)를 설정하여 SQL 요청의 플래그를 활성화 (비용이있을 수 있으므로 기본적으로 비활성화 됨) 할 수 있습니다. 애플리케이션 이름을 사용하여 요청 ID를 전달합니다. 그렇게하려면 &lt;code&gt;log_line_prefix&lt;/code&gt; 를 &lt;code&gt;&quot;%a &quot;&lt;/code&gt; 와 같은 것으로 설정하여 PostgreSQL 로그에 애플리케이션 이름을 포함해야합니다 (공백을 잊지 마십시오).</target>
        </trans-unit>
        <trans-unit id="a40311cf7f52456676d795326ada7390df495c2d" translate="yes" xml:space="preserve">
          <source>You can enable a view to configure the logging level on a live system using the &lt;code&gt;C2C_LOG_VIEW_ENABLED&lt;/code&gt; environment
variable. Then, the current status of a logger can be queried with a GET on
&lt;code&gt;{C2C_BASE_PATH}/logging/level?secret={C2C_SECRET}&amp;amp;name={logger_name}&lt;/code&gt; and can be changed with
&lt;code&gt;{C2C_BASE_PATH}/logging/level?secret={C2C_SECRET}&amp;amp;name={logger_name}&amp;amp;level={level}&lt;/code&gt;. Overrides are stored in
Redis, if &lt;code&gt;C2C_REDIS_URL&lt;/code&gt; (&lt;code&gt;c2c.redis_url&lt;/code&gt;) is configured.</source>
          <target state="translated">&lt;code&gt;C2C_LOG_VIEW_ENABLED&lt;/code&gt; 환경 변수를 사용하여 라이브 시스템에서 로깅 수준을 구성하도록보기를 활성화 할 수 있습니다 . 그런 다음, 로거의 현재 상태에 GET으로 조회 할 수 있습니다 &lt;code&gt;{C2C_BASE_PATH}/logging/level?secret={C2C_SECRET}&amp;amp;name={logger_name}&lt;/code&gt; 과는 변경할 수 있습니다 &lt;code&gt;{C2C_BASE_PATH}/logging/level?secret={C2C_SECRET}&amp;amp;name={logger_name}&amp;amp;level={level}&lt;/code&gt; . &lt;code&gt;C2C_REDIS_URL&lt;/code&gt; ( &lt;code&gt;c2c.redis_url&lt;/code&gt; )이 구성된 경우 재정의는 Redis에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="cd058e6e6d9fee3a04adf41089bc5ddcf2f09a89" translate="yes" xml:space="preserve">
          <source>You can enable a view to force usage of the slave engine using the &lt;code&gt;C2C_DB_MAINTENANCE_VIEW_ENABLED&lt;/code&gt; environment
variable. Then, the database can be made &quot;readonly&quot; with
&lt;code&gt;{C2C_BASE_PATH}/db/maintenance?secret={C2C_SECRET}&amp;amp;readonly=true&lt;/code&gt;.
The current state is stored in Redis, if &lt;code&gt;C2C_REDIS_URL&lt;/code&gt; (&lt;code&gt;c2c.redis_url&lt;/code&gt;) is configured.</source>
          <target state="translated">&lt;code&gt;C2C_DB_MAINTENANCE_VIEW_ENABLED&lt;/code&gt; 환경 변수를 사용하여 슬레이브 엔진을 강제로 사용하도록 뷰를 활성화 할 수 있습니다 . 그런 다음 &lt;code&gt;{C2C_BASE_PATH}/db/maintenance?secret={C2C_SECRET}&amp;amp;readonly=true&lt;/code&gt; 로 데이터베이스를 &quot;읽기 전용&quot;으로 만들 수 있습니다 . &lt;code&gt;C2C_REDIS_URL&lt;/code&gt; ( &lt;code&gt;c2c.redis_url&lt;/code&gt; )이 구성된 경우 현재 상태는 Redis에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="6c73372b3129674f73b59f0f0d7824665fbf050b" translate="yes" xml:space="preserve">
          <source>You can enable this by setting &lt;code&gt;C2C_ENABLE_EXCEPTION_HANDLING&lt;/code&gt; (&lt;code&gt;c2c.enable_exception_handling&lt;/code&gt;) to &quot;1&quot;.</source>
          <target state="translated">&lt;code&gt;C2C_ENABLE_EXCEPTION_HANDLING&lt;/code&gt; ( &lt;code&gt;c2c.enable_exception_handling&lt;/code&gt; )을 &quot;1&quot; 로 설정하여이를 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b936e0244cb24b96ed54ee3b941cc04f826adb66" translate="yes" xml:space="preserve">
          <source>You can manually measure the time spent on something like that:</source>
          <target state="translated">다음과 같은 작업에 소요 된 시간을 수동으로 측정 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1768ab0fe267940f5a53690d6a5d9158dd4180fb" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;force_slave&lt;/code&gt; and &lt;code&gt;force_master&lt;/code&gt; parameters to override the defaults and force a route to use
the master or the slave engine.</source>
          <target state="translated">당신은 사용할 수 있습니다 &lt;code&gt;force_slave&lt;/code&gt; 및 &lt;code&gt;force_master&lt;/code&gt; 기본값을 대체 할 매개 변수를 마스터 또는 슬레이브 엔진을 사용하는 경로를 강제로.</target>
        </trans-unit>
        <trans-unit id="48d3a5cbe6cb50b3a394f3ecb8005ceb7a707099" translate="yes" xml:space="preserve">
          <source>You will need &lt;code&gt;docker&lt;/code&gt; (&amp;gt;=1.12.0), &lt;code&gt;docker-compose&lt;/code&gt; (&amp;gt;=1.10.0) and
&lt;code&gt;make&lt;/code&gt; installed on the machine to play with this project.
Check available versions of &lt;code&gt;docker-engine&lt;/code&gt; with
&lt;code&gt;apt-get policy docker-engine&lt;/code&gt; and eventually force install the
up-to-date version using a command similar to
&lt;code&gt;apt-get install docker-engine=1.12.3-0~xenial&lt;/code&gt;.</source>
          <target state="translated">당신이 필요합니다 &lt;code&gt;docker&lt;/code&gt; (&amp;gt; = 1.12.0), &lt;code&gt;docker-compose&lt;/code&gt; (&amp;gt; = 1.10.0)를하고 &lt;code&gt;make&lt;/code&gt; 이 프로젝트를 재생하려면 컴퓨터에 설치되어 있어야합니다. 의 사용 가능한 버전 확인 &lt;code&gt;docker-engine&lt;/code&gt; 과 &lt;code&gt;apt-get policy docker-engine&lt;/code&gt; 유사한 명령을 사용하여 최신 버전을 설치 강제 결국 및 &lt;code&gt;apt-get install docker-engine=1.12.3-0~xenial&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="10d735e581f1e2505cd69675691925490e447c44" translate="yes" xml:space="preserve">
          <source>branch</source>
          <target state="translated">분기</target>
        </trans-unit>
        <trans-unit id="5ede1f1016b0b7528e6e9a1c96027d45ff8ca975" translate="yes" xml:space="preserve">
          <source>bug fix version change: Nothing added, removed or changed in the API and only bug fix
version number changes in the dependencies</source>
          <target state="translated">버그 수정 버전 변경 : API에서 추가, 제거 또는 변경된 사항이 없으며 종속성의 버그 수정 버전 번호 만 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="00f6bc2c92ed1d1fad733e1ffa42e17e28fafd41" translate="yes" xml:space="preserve">
          <source>every threads' stacktrace: &lt;code&gt;{C2C_BASE_PATH}/debug/stacks?secret={C2C_SECRET}&lt;/code&gt;</source>
          <target state="translated">모든 스레드의 스택 &lt;code&gt;{C2C_BASE_PATH}/debug/stacks?secret={C2C_SECRET}&lt;/code&gt; : {C2C_BASE_PATH} / debug / stacks? secret = {C2C_SECRET}</target>
        </trans-unit>
        <trans-unit id="b847d2aae885eefef6a9e415e09d11f84c5343d3" translate="yes" xml:space="preserve">
          <source>major version change: The API and the dependencies are not backward compatible</source>
          <target state="translated">주요 버전 변경 : API 및 종속성이 이전 버전과 호환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4f26aeafdb2367620a393c973eddbe8f8b846ebd" translate="yes" xml:space="preserve">
          <source>master</source>
          <target state="translated">석사</target>
        </trans-unit>
        <trans-unit id="c5344846e725e6b1a4a0a529fb43305b3d745531" translate="yes" xml:space="preserve">
          <source>memory increase when calling another API: &lt;code&gt;{C2C_BASE_PATH}/debug/memory_diff?path={path_info}&amp;amp;secret={C2C_SECRET}&amp;amp;limit=30&amp;amp;no_warmup&lt;/code&gt;</source>
          <target state="translated">다른 API를 호출 할 때 메모리 증가 : &lt;code&gt;{C2C_BASE_PATH}/debug/memory_diff?path={path_info}&amp;amp;secret={C2C_SECRET}&amp;amp;limit=30&amp;amp;no_warmup&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8d1403db875405fa7443dcbea77f317e72f160b" translate="yes" xml:space="preserve">
          <source>memory usage: &lt;code&gt;{C2C_BASE_PATH}/debug/memory?secret={C2C_SECRET}&amp;amp;limit=30&amp;amp;analyze_type=builtins.dict&amp;amp;python_internals_map=false&lt;/code&gt;</source>
          <target state="translated">메모리 사용량 : &lt;code&gt;{C2C_BASE_PATH}/debug/memory?secret={C2C_SECRET}&amp;amp;limit=30&amp;amp;analyze_type=builtins.dict&amp;amp;python_internals_map=false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4f431310d82091fcca80094e43726d79ae4d21c" translate="yes" xml:space="preserve">
          <source>minor version change: The API must remain backward compatible and only minor version
number changes in the dependencies</source>
          <target state="translated">부 버전 변경 : API는 이전 버전과 호환되어야하며 종속성에서 부 버전 번호 만 변경되어야합니다.</target>
        </trans-unit>
        <trans-unit id="3561f8708ad2aebd0c76610bfb9efd2f835d9223" translate="yes" xml:space="preserve">
          <source>object ref: &lt;code&gt;{C2C_BASE_PATH}/debug/show_refs.dot?secret={C2C_SECRET}&amp;amp;analyze_type=gunicorn.app.wsgiapp.WSGIApplication&amp;amp;analyze_id=12345&amp;amp;max_depth=3&amp;amp;too_many=10&amp;amp;filter=1024&amp;amp;no_extra_info&amp;amp;backrefs&lt;/code&gt;&lt;code&gt;analyze_type&lt;/code&gt; and &lt;code&gt;analyze_id&lt;/code&gt; should not ve used toogether, you can use it like:</source>
          <target state="translated">개체 심판 : &lt;code&gt;{C2C_BASE_PATH}/debug/show_refs.dot?secret={C2C_SECRET}&amp;amp;analyze_type=gunicorn.app.wsgiapp.WSGIApplication&amp;amp;analyze_id=12345&amp;amp;max_depth=3&amp;amp;too_many=10&amp;amp;filter=1024&amp;amp;no_extra_info&amp;amp;backrefs&lt;/code&gt; &lt;code&gt;analyze_type&lt;/code&gt; 및 &lt;code&gt;analyze_id&lt;/code&gt; 가 사용 toogether을했습니다 안, 당신처럼 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="db6a59f848642e3bb40dd3107dcf535c39884bf6" translate="yes" xml:space="preserve">
          <source>release_3 (deprecated)</source>
          <target state="translated">release_3 (사용되지 않음)</target>
        </trans-unit>
        <trans-unit id="3211256418820fccbb071691c0f8ebe701527527" translate="yes" xml:space="preserve">
          <source>release_4</source>
          <target state="translated">release_4</target>
        </trans-unit>
        <trans-unit id="3935e8cda096e150d403211c66b64a19e972bcde" translate="yes" xml:space="preserve">
          <source>return an HTTP error: &lt;code&gt;{C2C_BASE_PATH}/debug/error?secret={C2C_SECRET}&amp;amp;status=500&lt;/code&gt;</source>
          <target state="translated">HTTP 오류 반환 : &lt;code&gt;{C2C_BASE_PATH}/debug/error?secret={C2C_SECRET}&amp;amp;status=500&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3396b557b51a19e01b6ea846d810419a5c712b2d" translate="yes" xml:space="preserve">
          <source>see the HTTP headers received by WSGI: &lt;code&gt;{C2C_BASE_PATH}/debug/headers?secret={C2C_SECRET}&amp;amp;status=500&lt;/code&gt;</source>
          <target state="translated">WSGI에서 수신 한 HTTP 헤더보기 : &lt;code&gt;{C2C_BASE_PATH}/debug/headers?secret={C2C_SECRET}&amp;amp;status=500&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a443de8d592c65ef9553695bec13db42e14b812" translate="yes" xml:space="preserve">
          <source>sleep the given number of seconds (to test load balancer timeouts): &lt;code&gt;{C2C_BASE_PATH}/debug/sleep?secret={C2C_SECRET}&amp;amp;time=60.2&lt;/code&gt;</source>
          <target state="translated">주어진 시간 (초) 동안 절전 모드 (로드 밸런서 시간 초과 테스트) : &lt;code&gt;{C2C_BASE_PATH}/debug/sleep?secret={C2C_SECRET}&amp;amp;time=60.2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46c4866df30fbd15b96ad6fb92eabb31ca3d039b" translate="yes" xml:space="preserve">
          <source>static analysis</source>
          <target state="translated">정적 분석</target>
        </trans-unit>
        <trans-unit id="efaef6abe5446976712dae8f67d9ea9d99bde822" translate="yes" xml:space="preserve">
          <source>{STATSD_PREFIX}.redis.{command}: The time to execute the given Redis command</source>
          <target state="translated">{STATSD_PREFIX} .redis. {command} : 주어진 Redis 명령을 실행할 시간</target>
        </trans-unit>
        <trans-unit id="14ce88b238148c04ee28a053055a969632099ffb" translate="yes" xml:space="preserve">
          <source>{STATSD_PREFIX}.render.{verb}.{route_name}.{status}: The time to render a query</source>
          <target state="translated">{STATSD_PREFIX} .render. {verb}. {route_name}. {status} : 쿼리 렌더링 시간</target>
        </trans-unit>
        <trans-unit id="cde374f654ddaeb9396a70468cc9e42a4f834444" translate="yes" xml:space="preserve">
          <source>{STATSD_PREFIX}.requests.{scheme}.{hostname}.{port}.{verb}.{status}: The time to execute HTTP requests to
outside services (only the time between the start of sending of the request and when the header is
back with a chunk of the body)</source>
          <target state="translated">{STATSD_PREFIX} .requests. {scheme}. {hostname}. {port}. {verb}. {status} : 외부 서비스에 대한 HTTP 요청을 실행하는 시간 (요청 전송 시작과 헤더는 본문의 덩어리로 돌아 왔습니다)</target>
        </trans-unit>
        <trans-unit id="727739638af226b3c990a25964f50f0bcc642f66" translate="yes" xml:space="preserve">
          <source>{STATSD_PREFIX}.route.{verb}.{route_name}.{status}: The time to process a query (includes rendering)</source>
          <target state="translated">{STATSD_PREFIX} .route. {verb}. {route_name}. {status} : 쿼리 처리 시간 (렌더링 포함)</target>
        </trans-unit>
        <trans-unit id="15d07a228cd6d69d3e8ef25b7d3db2dc4e365998" translate="yes" xml:space="preserve">
          <source>{STATSD_PREFIX}.sql.{query}: The time to execute the given SQL query (simplified and normalized)</source>
          <target state="translated">{STATSD_PREFIX} .sql. {query} : 주어진 SQL 쿼리를 실행하는 데 걸리는 시간 (단순화 및 정규화)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
