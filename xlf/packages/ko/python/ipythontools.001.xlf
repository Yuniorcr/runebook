<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/ipythontools/">
    <body>
      <group id="ipythontools">
        <trans-unit id="7867d3fd53be0dc7eca20917d239cbfb7c62a7b9" translate="yes" xml:space="preserve">
          <source>&amp;gt; fig.savefig(&amp;lsquo;/path/to/my/article/XXX.eps&amp;rsquo;)</source>
          <target state="translated">&amp;gt; fig.savefig ( '/ path / to / my / article / XXX.eps')</target>
        </trans-unit>
        <trans-unit id="dadf221e2b29630f8f97a7151151f1cad05f402f" translate="yes" xml:space="preserve">
          <source>) as opposed to real markdown that resembles
English much better I define a custom filter function that
makes sure that strings which look like LaTeX commands will not be spell checked
(since very few LaTeX command are valid English words so that would give a lot of
apparent typos).
More complicated filters that avoid spell checking within equations or
commands like</source>
          <target state="translated">) 영어와 훨씬 더 유사한 실제 마크 다운과는 달리 LaTeX 명령처럼 보이는 문자열이 맞춤법 검사를받지 않도록하는 사용자 정의 필터 함수를 정의합니다 (LateX 명령이 유효한 영어 단어이므로 많은 명확한 오타). 방정식 또는 명령 내에서 맞춤법 검사를 피하는 더 복잡한 필터</target>
        </trans-unit>
        <trans-unit id="96be7d667b95a8cabd202ecf5703e0ece29f80f1" translate="yes" xml:space="preserve">
          <source>). Check the &lt;a href=&quot;https://github.com/hamogu/ipythontools&quot;&gt;github repository&lt;/a&gt;
for this code if you want to see if I have an improved version.</source>
          <target state="translated">). 개선 된 버전이 있는지 확인하려면 이 코드에 대한 &lt;a href=&quot;https://github.com/hamogu/ipythontools&quot;&gt;github 저장소&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="cc9c165d061c0cd51e388cd5a0445e26184e0ca7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;As a Python module&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Python 모듈로&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="06f316d860d3d49ac19a87af2e5590c668831891" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;As a script&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;스크립트로&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3115d1ebf2eefd3ec16172afc65b35b8221a39cc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;How to use this script&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;이 스크립트를 사용하는 방법&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="8ac7fc4a738213b4ceb8225268ac922724b3a577" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Design&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;디자인&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5f3278aa7e29a17ce9f2584f24d0b1a47ce961a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How to use it&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이것을 어떻게 사용 하는가&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="785fe4fefdab8199a472f341a617e7362ff57a5b" translate="yes" xml:space="preserve">
          <source>As much as I love the IPython notebook, there is one big drawback (at least in
my installation). When I type into a cell in the browser (I use firefox) there
is no automatic spell checking of the input. Sure, the notebook has syntax
highlighting for code cells in python, but I want to do my entire paper
writing in the notebook and for me that means that a spell checker for cells
with markdown, headings or raw text is absolutely essential.
On the other hand, I cannot just run e.g.</source>
          <target state="translated">내가 IPython 노트북을 좋아하는만큼 큰 단점이 하나 있습니다 (적어도 설치 과정에서). 브라우저의 셀에 입력 할 때 (Firefox를 사용합니다) 입력에 대한 자동 맞춤법 ​​검사가 없습니다. 물론 노트북에는 파이썬 코드 셀에 대한 구문 강조 기능이 있지만 노트북에서 전체 문서를 작성하고 싶습니다. 즉, 마크 다운, 머리글 또는 원시 텍스트가있는 셀의 맞춤법 검사기가 절대적으로 필요하다는 것을 의미합니다. 반면에 나는 예를 들어 실행할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e0d2763db5293e3bbef1e8ffe6e5892df0cb91a2" translate="yes" xml:space="preserve">
          <source>Be able to ignore certain parts of the notebook (e.g. introductory comments
in the first few cells).</source>
          <target state="translated">노트북의 특정 부분을 무시할 수 있어야합니다 (예 : 처음 몇 셀의 소개 주석).</target>
        </trans-unit>
        <trans-unit id="f1c19d2a2ee9313b484d11307196670bfd490fcb" translate="yes" xml:space="preserve">
          <source>Close down the notebook you want to spell check in IPython, then simply type on
the command line:</source>
          <target state="translated">IPython에서 철자를 검사하려는 노트북을 닫은 다음 명령 줄에 입력하면됩니다.</target>
        </trans-unit>
        <trans-unit id="996122812a4499d2e98c63c2097cf853c4aa0b71" translate="yes" xml:space="preserve">
          <source>Convert headings to section / subsection etc.
I generally level 2 such as &amp;ldquo;## Heading&amp;rdquo; for section, &amp;ldquo;### Heading&amp;rdquo; for subsections etc.</source>
          <target state="translated">제목을 섹션 / 하위 섹션 등으로 변환합니다. 저는 일반적으로 섹션의 경우 &quot;## 제목&quot;, 하위 섹션의 경우 &quot;### 제목&quot;과 같이 레벨 2입니다.</target>
        </trans-unit>
        <trans-unit id="a0a16ec70ec256609b5cabdb79290f5c6addc3f7" translate="yes" xml:space="preserve">
          <source>Copy text in &amp;ldquo;markdown&amp;rdquo; and &amp;ldquo;raw text&amp;rdquo; cells. To simplify, I just write
real LaTeX code in those cells. All equations will be rendered correctly
in the notebook file for me and my co-authors to see.
When I want to highlight something I type LaTeX &amp;ldquo;emph{}&amp;rdquo; or &amp;ldquo;textbf{}&amp;rdquo;,
not the markdown equivalents. That looks not as nice in the notebook, but
makes live so much easier.
Also, markdown does not recognize &amp;ldquo;cite&amp;rdquo;, &amp;ldquo;ref&amp;rdquo; and &amp;ldquo;label&amp;rdquo;. Again, it
looks not as nice in markdown, but
(1) I only need to know LaTeX and (2) it works flawlessly when converted.</source>
          <target state="translated">&quot;마크 다운&quot;및 &quot;원시 텍스트&quot;셀의 텍스트를 복사합니다. 단순화하기 위해 해당 셀에 실제 LaTeX 코드를 작성합니다. 나와 공동 저자가 볼 수 있도록 모든 방정식이 노트북 파일에 올바르게 렌더링됩니다. 무언가를 강조하고 싶을 때 마크 다운이 아닌 LaTeX&amp;ldquo;emph {}&amp;rdquo;또는&amp;ldquo;textbf {}&amp;rdquo;를 입력합니다. 노트북에서보기에는 좋지 않지만 훨씬 더 쉽게 살 수 있습니다. 또한 markdown은 &quot;cite&quot;, &quot;ref&quot;및 &quot;label&quot;을 인식하지 않습니다. 다시 말하지만, 마크 다운에서는 좋지 않지만 (1) LaTeX 만 알면되고 (2) 변환 할 때 완벽하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="d7de9f59c8e0e1ec511693cd90ca8354c3c2ebb8" translate="yes" xml:space="preserve">
          <source>Finally, call:</source>
          <target state="translated">마지막으로 다음을 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="9d9befd865685e9e95d33be98682e396dce57dc6" translate="yes" xml:space="preserve">
          <source>Import into python and make a</source>
          <target state="translated">파이썬으로 가져 와서</target>
        </trans-unit>
        <trans-unit id="1160f28fb9bc2da5ebf8283b07c493f0463f2c5e" translate="yes" xml:space="preserve">
          <source>In this case it&amp;rsquo;s run with my set of design choices (see below).</source>
          <target state="translated">이 경우에는 내 디자인 선택 세트로 실행됩니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="0d334f4021259c6fdf3d2da6814a39acf2c925e0" translate="yes" xml:space="preserve">
          <source>Installing this module places a script in your path, so you can do:</source>
          <target state="translated">이 모듈을 설치하면 경로에 스크립트가 배치되므로 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7546602cf40b4d2b031f722cdb27793c0481ca90" translate="yes" xml:space="preserve">
          <source>Jupyter/IPython notebook to latex converter and spell checker</source>
          <target state="translated">Jupyter / IPython 노트북에서 라텍스 변환기 및 맞춤법 검사기로</target>
        </trans-unit>
        <trans-unit id="d6875ea847a285b0f3fea4c40460d035f67fdc12" translate="yes" xml:space="preserve">
          <source>Just type figure captions into markdown cells.</source>
          <target state="translated">마크 다운 셀에 그림 캡션을 입력하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="4963541f8b271af92276d1437767aff6268feb12" translate="yes" xml:space="preserve">
          <source>LatexHeadingConverter</source>
          <target state="translated">LatexHeadingConverter</target>
        </trans-unit>
        <trans-unit id="e86cb4e0b6564c9e713d39dc9797777891ba34e8" translate="yes" xml:space="preserve">
          <source>LiteralSourceConverter</source>
          <target state="translated">LiteralSourceConverter</target>
        </trans-unit>
        <trans-unit id="5ce8c534c7950cd7b5e42fe74be74b167a43fc06" translate="yes" xml:space="preserve">
          <source>MarkedCodeOutputConverter</source>
          <target state="translated">MarkedCodeOutputConverter</target>
        </trans-unit>
        <trans-unit id="d3d82c5630254d2e7ee3f20683d7662d78166a38" translate="yes" xml:space="preserve">
          <source>No conversion of code cells. Who wants code in an ApJ paper?</source>
          <target state="translated">코드 셀의 변환이 없습니다. 누가 ApJ 논문의 코드를 원합니까?</target>
        </trans-unit>
        <trans-unit id="a0ea28392b12edb9b0bb76d671d7c54b0847cf8a" translate="yes" xml:space="preserve">
          <source>No figure conversion. Instead, in the notebook itself I issue:</source>
          <target state="translated">그림 변환이 없습니다. 대신 노트북 자체에서 다음을 발행합니다.</target>
        </trans-unit>
        <trans-unit id="d9c93a447b06ee883a9a40e9cf21bb79a519a0f4" translate="yes" xml:space="preserve">
          <source>Note that scipts and procedures have been renamed to &amp;ldquo;jupyter&amp;rdquo;, but the name of the package
and its directory structure still reflect that fact that Jupyter notebooks started out as part of the &lt;a href=&quot;http://ipython.org&quot;&gt;IPython&lt;/a&gt; project.</source>
          <target state="translated">scipts 및 프로시 저는 &quot;jupyter&quot;로 이름이 변경되었지만 패키지 이름과 디렉토리 구조는 여전히 Jupyter 노트북이 &lt;a href=&quot;http://ipython.org&quot;&gt;IPython&lt;/a&gt; 프로젝트의 일부로 시작되었다는 사실을 반영합니다 .</target>
        </trans-unit>
        <trans-unit id="ba5aad5cc9fdd94c71a3990de2df0f303556d62d" translate="yes" xml:space="preserve">
          <source>NotebookConverter</source>
          <target state="translated">NotebookConverter</target>
        </trans-unit>
        <trans-unit id="ef481c6be928206bddfac40ea95dba82bc2ebd4a" translate="yes" xml:space="preserve">
          <source>Now all papers I work on a are written in an IPython notebook. So, the final
step to do is to convert the notebook to the LaTeX file I can submit to a
journal. That&amp;rsquo;s what this simple converter code does.</source>
          <target state="translated">이제 내가 작업하는 모든 논문은 IPython 노트북으로 작성되었습니다. 따라서 마지막 단계는 노트북을 저널에 제출할 수있는 LaTeX 파일로 변환하는 것입니다. 이것이 바로이 간단한 변환기 코드가하는 일입니다.</target>
        </trans-unit>
        <trans-unit id="b31553839c43a486203d587b96dc51bd94505c76" translate="yes" xml:space="preserve">
          <source>Occasionally, I want to have the output of a computation (e.g. a table
written with astropy in LaTeX format) in the article. Keep it simple.
Output of all code cells that have a certain comment string (I use
&amp;ldquo;# output-&amp;gt;LaTeX&amp;rdquo;) is copied verbatim to the LaTeX file.</source>
          <target state="translated">때때로 나는 기사에서 계산의 결과물 (예 : LaTeX 형식의 astropy로 작성된 테이블)을 원합니다. 단순하게 유지하십시오. 특정 주석 문자열 ( &quot;# output-&amp;gt; LaTeX&quot;사용)이있는 모든 코드 셀의 출력은 그대로 LaTeX 파일에 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="f53a479e72af885654b465b2289725076471c943" translate="yes" xml:space="preserve">
          <source>Oh, one more thing: Because I type a lot of raw LaTeX in my notebooks (see my
other post on</source>
          <target state="translated">아, 한 가지 더 : 내 노트북에 원시 LaTeX를 많이 입력했기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="db5e602ea3758bc969be7f6f82109e2dca89d280" translate="yes" xml:space="preserve">
          <source>Open the new file in IPython, run all cells again and keep working.</source>
          <target state="translated">IPython에서 새 파일을 열고 모든 셀을 다시 실행하고 계속 작업하십시오.</target>
        </trans-unit>
        <trans-unit id="69dec19e2ce348a6b020bdd1bb2291da5bc2c527" translate="yes" xml:space="preserve">
          <source>Spell check the markdown text in IPython notebooks</source>
          <target state="translated">IPython 노트북의 마크 다운 텍스트 맞춤법 검사</target>
        </trans-unit>
        <trans-unit id="55b16bba4db3dc88083cb0d4bcd080deb43bf600" translate="yes" xml:space="preserve">
          <source>The code is written around these design ideas:</source>
          <target state="translated">코드는 다음 디자인 아이디어를 중심으로 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="9c063267cede9ac731c05e8aee66329f1183f81e" translate="yes" xml:space="preserve">
          <source>The converter</source>
          <target state="translated">변환기</target>
        </trans-unit>
        <trans-unit id="c3d1d1122a9b0cdc614468b496550c5eec457705" translate="yes" xml:space="preserve">
          <source>The spellchecker</source>
          <target state="translated">맞춤법 검사기</target>
        </trans-unit>
        <trans-unit id="8bced610e3d0cfb3867bace09c956272e0734c9b" translate="yes" xml:space="preserve">
          <source>Then, customize how each type of cell is converted by changing the converter:</source>
          <target state="translated">그런 다음 변환기를 변경하여 각 유형의 셀이 변환되는 방식을 사용자 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="4e913128f80861691ab5f4fbdf2cfc2e0f8f9961" translate="yes" xml:space="preserve">
          <source>This converter is not intended to replace the nbconvert from the IPython
project. Instead, it serves one very specific purpose:
Turn a notebook into a LaTeX file that I can submit to the journal.</source>
          <target state="translated">이 변환기는 IPython 프로젝트의 nbconvert를 대체하기위한 것이 아닙니다. 대신, 그것은 하나의 매우 구체적인 목적을 제공합니다. 노트북을 LaTeX 파일로 만들어 저널에 제출할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="848bc60a2dac408fdb7f552d03b5259b7156d402" translate="yes" xml:space="preserve">
          <source>This method allows you to use only part of a notebook file (ignore to first n
cells or ignore everything until a cell has a specific string value, e.g.
&amp;ldquo;The paper starts here&amp;rdquo;). Also, it allows you to provide a text file that will be
pasted before or after the converted notebook (you can put the &amp;lsquo;usepackage&amp;rsquo; and
similar stuff in those files so they don&amp;rsquo;t clutter your notebook).
However, I do not use this option any longer, because that means I would have
multiple input files. If I put all those LaTeX headers into the notebook as
well, I only have a single file.</source>
          <target state="translated">이 방법을 사용하면 노트북 파일의 일부만 사용할 수 있습니다 (처음 n 개의 셀은 무시하거나 셀에 특정 문자열 값 (예 : &quot;The paper starts here&quot;)이있을 때까지 모두 무시). 또한 변환 된 노트북 앞뒤에 붙여 넣을 텍스트 파일을 제공 할 수 있습니다 ( 'usepackage'및 유사한 내용을 해당 파일에 넣어 노트북을 어지럽히 지 않도록 할 수 있습니다). 그러나이 옵션은 더 이상 사용하지 않습니다. 입력 파일이 여러 개 있다는 것을 의미하기 때문입니다. 모든 LaTeX 헤더를 노트북에도 넣으면 파일이 하나뿐입니다.</target>
        </trans-unit>
        <trans-unit id="1fec3f5db3c9fd65b860d4e6a9b0a693810d50cd" translate="yes" xml:space="preserve">
          <source>This module installs two command line scripts:</source>
          <target state="translated">이 모듈은 두 개의 명령 줄 스크립트를 설치합니다.</target>
        </trans-unit>
        <trans-unit id="7f2f0a960e33f9e2cf4f775bb9ca0ab72b891f68" translate="yes" xml:space="preserve">
          <source>To implement this I wrote a converter for each cell type.</source>
          <target state="translated">이를 구현하기 위해 각 셀 유형에 대한 변환기를 작성했습니다.</target>
        </trans-unit>
        <trans-unit id="d6f1eb8eb72b1108f6f2bfa3ff38785751430f78" translate="yes" xml:space="preserve">
          <source>When I first encountered the IPython notebook, I thought this was a solution
looking for a problem. However, I have since been converted!
The tipping point for me was this: I want to version control my papers and
I always had multiple directories for analysis code, plotting code, LaTeX files,
plot scripts and figures and tables. That&amp;rsquo;s just so unwieldy.
Also, I found it cumbersome to email figures to individual collaborators all
the time.
The Notebook can hold all this information in one place and I can just provide
my co-authors with a link to the github repository once and they have access
to the latest version all the time. Even if they do not use python, they can
still see the all the current figures using nbviewer.ipython.org</source>
          <target state="translated">IPython 노트북을 처음 접했을 때 이것이 문제를 찾는 해결책이라고 생각했습니다. 그러나 나는 그 이후로 회심했습니다! 제게 티핑 포인트는 이것이었습니다. 저는 제 논문의 버전을 관리하고 싶고 분석 코드, 플로팅 코드, LaTeX 파일, 플롯 스크립트, 그림 및 테이블을위한 여러 디렉토리를 항상 가지고있었습니다. 그것은 너무 다루기 어렵습니다. 또한 항상 개별 공동 작업자에게 수치를 이메일로 보내는 것이 번거 롭다는 것을 알았습니다. 노트북은이 모든 정보를 한 곳에 보관할 수 있으며 공동 작성자에게 github 저장소에 대한 링크를 한 번만 제공하면 항상 최신 버전에 액세스 할 수 있습니다. 파이썬을 사용하지 않더라도 nbviewer.ipython.org를 사용하여 현재 모든 수치를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="875cbcc95d99e4a4dd0d3e17db205085301357cd" translate="yes" xml:space="preserve">
          <source>Work with the python standard library only. No external dependencies.</source>
          <target state="translated">Python 표준 라이브러리로만 작업하십시오. 외부 종속성이 없습니다.</target>
        </trans-unit>
        <trans-unit id="49b84fdb779c24c1b3f5568727374457092f0309" translate="yes" xml:space="preserve">
          <source>\cite{}</source>
          <target state="translated">\인용하다{}</target>
        </trans-unit>
        <trans-unit id="6e5dfe09ab74d80bcb54e57395fd2bb52c2055c3" translate="yes" xml:space="preserve">
          <source>\label{XXX}</source>
          <target state="translated">\ label {XXX}</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">과</target>
        </trans-unit>
        <trans-unit id="406752e03d293ca5a420e14227bdf63680343906" translate="yes" xml:space="preserve">
          <source>are possible (they would be called
a</source>
          <target state="translated">가능합니다 (그들은</target>
        </trans-unit>
        <trans-unit id="01113a113efa76bd4bb0e3fd9f0ee8ce322c2fc4" translate="yes" xml:space="preserve">
          <source>because ApJ requires me to submit figures as separate files anyway.</source>
          <target state="translated">ApJ는 어쨌든 그림을 별도의 파일로 제출하도록 요구하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="d6595f0cf3fe24d2b70103bcf8a5458ff4741217" translate="yes" xml:space="preserve">
          <source>can be the same filename (in this case the old file will get
overwritten with the spelling corrected version), but I recommend to keep a copy
just in case something gets screwed up.</source>
          <target state="translated">동일한 파일 이름 일 수 있지만 (이 경우 이전 파일은 맞춤법 수정 버전으로 덮어 쓰게됩니다.) 문제가 발생할 경우를 대비하여 사본을 보관하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="35c5900c12f56b6e838bd659034d6f287f48e122" translate="yes" xml:space="preserve">
          <source>checks if a code cell has a specific string in
it and if so, it copies the output of this cell, and</source>
          <target state="translated">코드 셀에 특정 문자열이 있는지 확인하고있는 경우이 셀의 출력을 복사합니다.</target>
        </trans-unit>
        <trans-unit id="a7507f1795b973d9534c465c5afe646d7b983a13" translate="yes" xml:space="preserve">
          <source>chunker</source>
          <target state="translated">청커</target>
        </trans-unit>
        <trans-unit id="1c4b9e2170dd1cdc45dd53edc855cd112d29246e" translate="yes" xml:space="preserve">
          <source>converter.cellconverters[&amp;lsquo;code&amp;rsquo;] = NotebookConverter.IgnoreConverter()</source>
          <target state="translated">converter.cellconverters [ 'code'] = NotebookConverter.IgnoreConverter ()</target>
        </trans-unit>
        <trans-unit id="7cff5b5b7799f826e4ccf4118ff39f0bd5a71995" translate="yes" xml:space="preserve">
          <source>converter.convert(infile, outfile, &amp;hellip;)</source>
          <target state="translated">converter.convert (infile, outfile,&amp;hellip;)</target>
        </trans-unit>
        <trans-unit id="117bad3bab9782ca784fc6c013803e2db4200328" translate="yes" xml:space="preserve">
          <source>extracts some content (raw cells, markdown cells, code output) from a
Jupyter/IPython notebook and pastes it into a new file. It also converst markdown headings
to proper LaTeX chapter, section, subsetion etc. and inserts appropriate labels.
This converter is not intended to replace the nbconvert from the IPython
project. Instead, it serves one very specific purpose:
Turn a notebook into a LaTeX file that I can submit to the journal.</source>
          <target state="translated">Jupyter / IPython 노트북에서 일부 콘텐츠 (원시 셀, 마크 다운 셀, 코드 출력)를 추출하여 새 파일에 붙여 넣습니다. 또한 마크 다운 제목을 적절한 LaTeX 장, 섹션, 하위 집합 등으로 변환하고 적절한 레이블을 삽입합니다. 이 변환기는 IPython 프로젝트의 nbconvert를 대체하기위한 것이 아닙니다. 대신, 그것은 하나의 매우 구체적인 목적을 제공합니다. 노트북을 LaTeX 파일로 만들어 저널에 제출할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="853f6d7c1d08cc6b26e5574a008dd81318c45acb" translate="yes" xml:space="preserve">
          <source>filein</source>
          <target state="translated">파일 인</target>
        </trans-unit>
        <trans-unit id="294f0add48f73ecc0d984886c8b10c0a9ed0f315" translate="yes" xml:space="preserve">
          <source>fileout</source>
          <target state="translated">파일 아웃</target>
        </trans-unit>
        <trans-unit id="68145c9316e801087b7108a5cc3d3b3f855b2647" translate="yes" xml:space="preserve">
          <source>from ipynb2article import NotebookConverter
converter = NotebookConverter</source>
          <target state="translated">ipynb2article에서 가져 오기 NotebookConverter 변환기 = NotebookConverter</target>
        </trans-unit>
        <trans-unit id="af10ef20dd9060bbeead0afbc55381a66af442ef" translate="yes" xml:space="preserve">
          <source>in</source>
          <target state="translated">에</target>
        </trans-unit>
        <trans-unit id="45f3e2e7a61691e19164608a0c9c4959ada7625a" translate="yes" xml:space="preserve">
          <source>ipynb2article.py</source>
          <target state="translated">ipynb2article.py</target>
        </trans-unit>
        <trans-unit id="039969f05dc4707c725c2de5b903086fbfe71107" translate="yes" xml:space="preserve">
          <source>ispell</source>
          <target state="translated">Ispell</target>
        </trans-unit>
        <trans-unit id="f1dd56b156609a34f786d18c1bd98609b6d88f91" translate="yes" xml:space="preserve">
          <source>jupyter2article</source>
          <target state="translated">jupyter2article</target>
        </trans-unit>
        <trans-unit id="2d6cc5f6a92a6677e7136cfa35be836bb093bc5e" translate="yes" xml:space="preserve">
          <source>jupyter2article myanalysis.ipynb myanalysis.tex</source>
          <target state="translated">jupyter2article myanalysis.ipynb myanalysis.tex</target>
        </trans-unit>
        <trans-unit id="3f9ee6a0f3c4984f03f16adab8dd3174c8066ac4" translate="yes" xml:space="preserve">
          <source>jupyterspellcheck</source>
          <target state="translated">jupyterspellcheck</target>
        </trans-unit>
        <trans-unit id="10dc687a8a6d398a0253047d33cbf04dc71c93e7" translate="yes" xml:space="preserve">
          <source>jupyterspellcheck filein.ipynb fileout.ipynb</source>
          <target state="translated">jupyterspellcheck filein.ipynb fileout.ipynb</target>
        </trans-unit>
        <trans-unit id="13e53880be1515e812985845eb3181eeaf84666b" translate="yes" xml:space="preserve">
          <source>just takes the literal string value (it also adds
a line break at the end of the  cell) and puts it into the LaTeX file
(use for markdown and raw text cells),</source>
          <target state="translated">리터럴 문자열 값 (셀 끝에 줄 바꿈 추가)을 가져와 LaTeX 파일에 넣습니다 (마크 다운 및 원시 텍스트 셀에 사용).</target>
        </trans-unit>
        <trans-unit id="87dc27214c1944c8d235d751c0ac66a8811edb7b" translate="yes" xml:space="preserve">
          <source>looks for the level of the heading and turns that into LaTeX (it also adds
as label like &amp;ldquo;label{sect:title}&amp;rdquo;).</source>
          <target state="translated">제목의 수준을 찾아 LaTeX로 바꿉니다 ( &quot;label {sect : title}&quot;과 같은 레이블로 추가됨).</target>
        </trans-unit>
        <trans-unit id="0426c65f9613a523407c71497c3795ae931bf5cc" translate="yes" xml:space="preserve">
          <source>object:</source>
          <target state="translated">목적:</target>
        </trans-unit>
        <trans-unit id="f57a44af2cd8513541016b8bd43532f5deb4b97c" translate="yes" xml:space="preserve">
          <source>on the ipynb file, since
most of its contents is actually code and not plain English.
So, I wanted to write a spell checker, that parses the ipynb file and spell checks
only the markdown, heading and raw text input cells.</source>
          <target state="translated">대부분의 내용이 실제로는 일반 영어가 아닌 코드이기 때문에 ipynb 파일에 있습니다. 그래서 ipynb 파일을 구문 분석하고 마크 다운, 제목 및 원시 텍스트 입력 셀만 맞춤법 검사하는 맞춤법 검사기를 작성하고 싶었습니다.</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">또는</target>
        </trans-unit>
        <trans-unit id="09c20497814ab5a11888e90c4aa824df1fa2c5d2" translate="yes" xml:space="preserve">
          <source>pyenchant</source>
          <target state="translated">Pyenchant</target>
        </trans-unit>
        <trans-unit id="00dbf49b7c82ff3159975aacc11cb205814756ef" translate="yes" xml:space="preserve">
          <source>spell checks markdown and raw cells in a notebook.</source>
          <target state="translated">맞춤법 검사 마크 다운 및 노트북의 원시 셀.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
