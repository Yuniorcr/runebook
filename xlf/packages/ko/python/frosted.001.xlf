<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/frosted/">
    <body>
      <group id="frosted">
        <trans-unit id="4ef6fe32aaec0d511495a02d3af35e782f2e2043" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;which is equivalent to&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이는&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bdb654ce3ed9d4f1148d7fb3a2c220ae6715fb68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;E100 Series&lt;/strong&gt; - &lt;em&gt;Import Errors&lt;/em&gt; - &lt;strong&gt;E101&lt;/strong&gt;: UnusedImport - Note that
it is common practice to import something and not use it for the purpose
of exposing it as an API, or using it in an exec statment below. Frosted
tries to circumvent most of this by ignoring this error by default in
&lt;strong&gt;init&lt;/strong&gt;.py - &lt;strong&gt;E102&lt;/strong&gt;: ImportShadowedByLoopVar - &lt;strong&gt;E103&lt;/strong&gt;:
ImportStarUsed</source>
          <target state="translated">&lt;strong&gt;E100 시리즈&lt;/strong&gt; - &lt;em&gt;가져 오기 오류&lt;/em&gt; - &lt;strong&gt;E101&lt;/strong&gt; : UnusedImport - 그것은 수입 뭔가 일반적인 관행이며 API로 노출, 또는 아래의 간부 한 Statment에서 사용을 목적으로 사용하지 않습니다. Frosted는 &lt;strong&gt;init&lt;/strong&gt; .py- &lt;strong&gt;E102&lt;/strong&gt; : ImportShadowedByLoopVar- &lt;strong&gt;E103&lt;/strong&gt; : ImportStarUsed 에서 기본적으로이 오류를 무시하여이 오류의 대부분을 우회하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="51f136c56cdf0ff5a61f33270d77ab61d8f8393a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;E200 Series&lt;/strong&gt; - &lt;em&gt;Function / Method Definition and Calling Errors&lt;/em&gt; -
&lt;strong&gt;E201&lt;/strong&gt;: MultipleValuesForArgument - &lt;strong&gt;E202&lt;/strong&gt;: TooFewArguments -
&lt;strong&gt;E203&lt;/strong&gt;: TooManyArguments - &lt;strong&gt;E204&lt;/strong&gt;: UnexpectedArgument - &lt;strong&gt;E205&lt;/strong&gt;:
NeedKwOnlyArgument - &lt;strong&gt;E206&lt;/strong&gt;: DuplicateArgument - &lt;strong&gt;E207&lt;/strong&gt;:
LateFutureImport - &lt;strong&gt;E208&lt;/strong&gt;: ReturnWithArgsInsideGenerator</source>
          <target state="translated">&lt;strong&gt;E200 시리즈&lt;/strong&gt; - &lt;em&gt;기능 / 방법 정의 및 호출 오류&lt;/em&gt; - &lt;strong&gt;E201&lt;/strong&gt; : MultipleValuesForArgument - &lt;strong&gt;E202&lt;/strong&gt; : TooFewArguments - &lt;strong&gt;E203&lt;/strong&gt; : TooManyArguments - &lt;strong&gt;E204&lt;/strong&gt; : UnexpectedArgument - &lt;strong&gt;E205&lt;/strong&gt; : NeedKwOnlyArgument - &lt;strong&gt;E206&lt;/strong&gt; : DuplicateArgument - &lt;strong&gt;E207&lt;/strong&gt; : LateFutureImport - &lt;strong&gt;E208&lt;/strong&gt; : ReturnWithArgsInsideGenerator</target>
        </trans-unit>
        <trans-unit id="91123619c78fbf803b13437f853785d7cff2e310" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;E300 Series&lt;/strong&gt; - &lt;em&gt;Variable / Definition Usage Errors&lt;/em&gt; - &lt;strong&gt;E301&lt;/strong&gt;:
RedefinedWhileUnused - &lt;strong&gt;E302&lt;/strong&gt;: RedefinedInListComp - &lt;strong&gt;E303&lt;/strong&gt;:
UndefinedName - &lt;strong&gt;E304&lt;/strong&gt;: UndefinedExport - &lt;strong&gt;E305&lt;/strong&gt;: UndefinedLocal -
&lt;strong&gt;E306&lt;/strong&gt;: Redefined - &lt;strong&gt;E307&lt;/strong&gt;: UnusedVariable</source>
          <target state="translated">&lt;strong&gt;E300 시리즈&lt;/strong&gt; - &lt;em&gt;변수 / 정의 사용 오류&lt;/em&gt; - &lt;strong&gt;E301&lt;/strong&gt; : RedefinedWhileUnused - &lt;strong&gt;E302&lt;/strong&gt; : RedefinedInListComp - &lt;strong&gt;E303&lt;/strong&gt; : UndefinedName - &lt;strong&gt;E304&lt;/strong&gt; : UndefinedExport - &lt;strong&gt;E305&lt;/strong&gt; : UndefinedLocal - &lt;strong&gt;E306&lt;/strong&gt; : 재정의 - &lt;strong&gt;E307&lt;/strong&gt; : UnusedVariable</target>
        </trans-unit>
        <trans-unit id="c6f4c1846bde7a0430ed90e58a65694c74768f5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;E400 Series&lt;/strong&gt; - &lt;em&gt;Syntax Errors&lt;/em&gt; - &lt;strong&gt;E401&lt;/strong&gt;: DoctestSyntaxError -
&lt;strong&gt;E402&lt;/strong&gt;: PythonSyntaxError</source>
          <target state="translated">&lt;strong&gt;E400 시리즈&lt;/strong&gt; - &lt;em&gt;구문 오류&lt;/em&gt; - &lt;strong&gt;E401&lt;/strong&gt; : DoctestSyntaxError - &lt;strong&gt;E402&lt;/strong&gt; : PythonSyntaxError</target>
        </trans-unit>
        <trans-unit id="db8cd0e349c3f336246fe9337de505b1aaf9117f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I100 Series&lt;/strong&gt; - &lt;em&gt;General Information&lt;/em&gt; - &lt;strong&gt;I101&lt;/strong&gt;: Generic</source>
          <target state="translated">&lt;strong&gt;I100 시리즈&lt;/strong&gt; - &lt;em&gt;일반 정보&lt;/em&gt; - &lt;strong&gt;I101&lt;/strong&gt; : 일반</target>
        </trans-unit>
        <trans-unit id="eaaaf6b77343fe218c2c41af91c5c04dba8197d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;W100 Series&lt;/strong&gt; - &lt;em&gt;Exception Warning&lt;/em&gt; - &lt;strong&gt;W101&lt;/strong&gt;: BareExcept - Note that
one common case where a bare except is okay, and should be ignored is
when handling the rollback of database transactions. In this or simular
cases the warning can safely be ignored.</source>
          <target state="translated">&lt;strong&gt;W100 시리즈&lt;/strong&gt; - &lt;em&gt;예외 경고&lt;/em&gt; - &lt;strong&gt;W101&lt;/strong&gt; : BareExcept - 데이터베이스 트랜잭션의 롤백을 처리 할 때 주를 제외하고 벌거 벗은 괜찮습니다, 무시해야 하나 일반적인 경우입니다. 이 경우 또는 유사한 경우 경고는 무시해도됩니다.</target>
        </trans-unit>
        <trans-unit id="b1a7339bfb02c5019d4881061f2b14ed9db57ad6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;W200 Series&lt;/strong&gt; - &lt;em&gt;Handling Warning&lt;/em&gt; - &lt;strong&gt;W201&lt;/strong&gt;: FileSkipped</source>
          <target state="translated">&lt;strong&gt;W200 시리즈&lt;/strong&gt; - &lt;em&gt;취급주의&lt;/em&gt; - &lt;strong&gt;W201&lt;/strong&gt; : FileSkipped</target>
        </trans-unit>
        <trans-unit id="0c789b95bd67d4681b6f6fc42d66f9b7eeaaa0ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;from the command line:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;명령 줄에서 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a1e3067383abe8cc23ac42b2ec1f38efc501a388" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;from within Python:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Python 내에서 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7edb2d56703edb34a11abe229a955dde7b122524" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ignore_frosted_errors&lt;/strong&gt; - A comma delimited list of Frosted error
codes to ignore. You can see a definition of all error codes in the
next section.</source>
          <target state="translated">&lt;strong&gt;ignore_frosted_errors-&lt;/strong&gt; 무시할 Frosted 오류 코드의 쉼표로 구분 된 목록입니다. 다음 섹션에서 모든 오류 코드의 정의를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65edc1f20fbac00d358bb5b9974f09625072bbc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;skip&lt;/strong&gt; - A comma delimited list of file or directory names to skip.
The name must exactly match the entire path, the name of the file, or
one of it&amp;rsquo;s parent directories for it to be skipped.</source>
          <target state="translated">&lt;strong&gt;skip-건너 뛸&lt;/strong&gt; 파일 또는 디렉토리 이름의 쉼표로 구분 된 목록입니다. 이름은 건너 뛰려면 전체 경로, 파일 이름 또는 상위 디렉토리 중 하나와 정확히 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="3dc6e413f248eaefbb85a6c2e579c8fabf8ab258" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;vim&lt;/strong&gt; - Support has been added via syntastic:
&lt;a href=&quot;https://github.com/scrooloose/syntastic&quot;&gt;https://github.com/scrooloose/syntastic&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;vim&lt;/strong&gt; -syntastic을 통해 지원이 추가되었습니다 : &lt;a href=&quot;https://github.com/scrooloose/syntastic&quot;&gt;https://github.com/scrooloose/syntastic&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dacdfbfa3643508b59baffabbd74fbf1141686eb" translate="yes" xml:space="preserve">
          <source>A passive Python syntax checker</source>
          <target state="translated">수동 파이썬 구문 검사기</target>
        </trans-unit>
        <trans-unit id="f05ae1deac2b012b134c2438f967166a8b1b1d24" translate="yes" xml:space="preserve">
          <source>Additionally, you can specify project level configuration simply by
placing a .frosted.cfg file at the root of your project. frosted will
look up to 25 directories up, from the one it is ran, to find a project
specific configuration.</source>
          <target state="translated">또한 프로젝트 루트에 .frosted.cfg 파일을 배치하기 만하면 프로젝트 수준 구성을 지정할 수 있습니다. Frosted는 실행 된 디렉토리에서 최대 25 개의 디렉토리를 조회하여 프로젝트 별 구성을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="25fb9a5ee54e078defdfc3d21d2727ebfb399a84" translate="yes" xml:space="preserve">
          <source>Additionally, you can use the command line tool in an API fashion, by
passing &amp;lsquo;-&amp;lsquo; in as the filename and then sending file content to stdin.</source>
          <target state="translated">또한 파일 이름으로 '-'를 전달한 다음 파일 내용을 stdin으로 전송하여 API 방식으로 명령 줄 도구를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0be4d64c6938fbed9c075c62ab23a164eb04a4f5" translate="yes" xml:space="preserve">
          <source>And it will only get better from here on out!</source>
          <target state="translated">그리고 그것은 여기서부터 나아질 것입니다!</target>
        </trans-unit>
        <trans-unit id="42057ef00c7f8e30e615d0c4c23712232dae2e88" translate="yes" xml:space="preserve">
          <source>Beyond that, frosted supports setup.cfg based configuration. All you
need to do is add a [frosted] section to your project&amp;rsquo;s setup.cfg file
with any desired settings.</source>
          <target state="translated">그 외에도 Frosted는 setup.cfg 기반 구성을 지원합니다. 원하는 설정으로 프로젝트의 setup.cfg 파일에 [frosted] 섹션을 추가하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="ba257e0b625043dfaf7bb73a01cb3b3c43946471" translate="yes" xml:space="preserve">
          <source>Configuring Frosted</source>
          <target state="translated">Frosted 구성</target>
        </trans-unit>
        <trans-unit id="f97271c50277c011620671297853d05ec2b92ba8" translate="yes" xml:space="preserve">
          <source>Contributing to Frosted</source>
          <target state="translated">Frosted에 기여</target>
        </trans-unit>
        <trans-unit id="ccbeec3ffde90804ad8da15fd7c2dccaad076ad5" translate="yes" xml:space="preserve">
          <source>Current list of known supported text-editors:</source>
          <target state="translated">현재 알려진 지원되는 텍스트 편집기 목록 :</target>
        </trans-unit>
        <trans-unit id="b00d695c23ca3cd4ef5491a11b4cbbedfd3c7edc" translate="yes" xml:space="preserve">
          <source>Discussing improvements and getting help</source>
          <target state="translated">개선 사항에 대해 논의하고 도움 받기</target>
        </trans-unit>
        <trans-unit id="b14b9dde9eb1f18474cec6f80fc3521f63dc0986" translate="yes" xml:space="preserve">
          <source>Finally, frosted supports editorconfig files using the standard syntax
defined here: &lt;a href=&quot;http://editorconfig.org/&quot;&gt;http://editorconfig.org/&lt;/a&gt;</source>
          <target state="translated">마지막으로, Frosted는 여기에 정의 된 표준 구문을 사용하여 editorconfig 파일을 지원합니다 : &lt;a href=&quot;http://editorconfig.org/&quot;&gt;http://editorconfig.org/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="61db38ce2e7159f09438baf2f2fc621a288c791f" translate="yes" xml:space="preserve">
          <source>Frosted Code API</source>
          <target state="translated">Frosted Code API</target>
        </trans-unit>
        <trans-unit id="4ad78a547c6f9453b8bba535da660af67656d92e" translate="yes" xml:space="preserve">
          <source>Frosted Error Codes</source>
          <target state="translated">프로스트 오류 코드</target>
        </trans-unit>
        <trans-unit id="56c180a5bfc734d79e4bf6e3c8f16a833730f8ce" translate="yes" xml:space="preserve">
          <source>Frosted adds the ability to configure which files you want to check,
and which errors you don&amp;rsquo;t care about. Which, in my opinion, is a
must have feature.</source>
          <target state="translated">Frosted는 확인하려는 파일과 신경 쓰지 않는 오류를 구성하는 기능을 추가합니다. 제 생각에는 필수 기능입니다.</target>
        </trans-unit>
        <trans-unit id="b9766ba1da2f88e79530d257757c284f9855a063" translate="yes" xml:space="preserve">
          <source>Frosted exposes a simple API for checking Python code from withing other
Python applications or plugins.</source>
          <target state="translated">Frosted는 다른 Python 애플리케이션 또는 플러그인에서 Python 코드를 확인하기위한 간단한 API를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="95d53df06ba80b80ca37e1fd70694a6271da3261" translate="yes" xml:space="preserve">
          <source>Frosted implements the .editorconfig standard for configuration. This
means you only need one configuration file for isort, frosted, and
all the code editors anybody working with your project may be using.</source>
          <target state="translated">Frosted는 구성을 위해 .editorconfig 표준을 구현합니다. 즉, isort, frosted에 대한 구성 파일이 하나만 필요하며 프로젝트 작업을하는 모든 사람이 사용할 수있는 모든 코드 편집기가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="a960390525e2dd7954f62abff39832964a25705a" translate="yes" xml:space="preserve">
          <source>Frosted is a fork of pyflakes (originally created by Phil Frost) that
aims at more open contribution from the outside public, a smaller more
maintainable code base, and a better Python checker for all. It
currently cleanly supports Python 2.6 - 3.4 using pies
(&lt;a href=&quot;https://github.com/timothycrosley/pies&quot;&gt;https://github.com/timothycrosley/pies&lt;/a&gt;) to achieve this without ugly
hacks and/or py2to3.</source>
          <target state="translated">Frosted는 외부 대중의 더 많은 공개적 기여, 더 작고 유지하기 쉬운 코드베이스, 모두를위한 더 나은 Python 검사기를 목표로하는 pyflakes (원래 Phil Frost가 만든) 포크입니다. 현재 파이 ( &lt;a href=&quot;https://github.com/timothycrosley/pies&quot;&gt;https://github.com/timothycrosley/pies&lt;/a&gt; )를 사용하여 Python 2.6-3.4를 깔끔하게 지원하여 추악한 해킹 및 / 또는 py2to3없이이를 달성합니다.</target>
        </trans-unit>
        <trans-unit id="df792e13e3ff18557c8717c83b64eb5fda85e2f6" translate="yes" xml:space="preserve">
          <source>Frosted is a homage to the original pyflakes creator Phil Frost.</source>
          <target state="translated">Frosted는 원래 pyflakes 제작자 인 Phil Frost에게 경의를 표합니다.</target>
        </trans-unit>
        <trans-unit id="c04aaf6c7a69fabff26c9a7425b4b8dcc508c0ce" translate="yes" xml:space="preserve">
          <source>Frosted recognizes the following errors when present within your code.
You can use the &amp;lsquo;ignore_frosted_errors&amp;rsquo; setting to specify any errors
you want Frosted to ignore. If you specify the series error code (ex:
E100) all errors in that series will be ignored.</source>
          <target state="translated">Frosted는 코드 내에 다음과 같은 오류가있을 때 인식합니다. 'ignore_frosted_errors'설정을 사용하여 Frosted에서 무시할 오류를 지정할 수 있습니다. 시리즈 오류 코드 (예 : E100)를 지정하면 해당 시리즈의 모든 오류가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="58297a26dee9e4f8f6bfe4da51f4bd7647fb1958" translate="yes" xml:space="preserve">
          <source>Frosted switched from Java style unittests to the more Pythonic
py.test (I admit this is highly subjective).</source>
          <target state="translated">Frosted는 Java 스타일 unittest에서 더 Pythonic py.test로 전환되었습니다 (나는 이것이 매우 주관적임을 인정합니다).</target>
        </trans-unit>
        <trans-unit id="44d4e83b4f62fe96cc99a893a1dbbe7b8932716a" translate="yes" xml:space="preserve">
          <source>Frosted uses a more logical, self-documenting, and standard terminal
interface. With pyflakes the default action without any arguments is
to do nothing (waiting for stdin) with Frosted you get an error and
help.</source>
          <target state="translated">Frosted는보다 논리적이고 자체 문서화되며 표준 터미널 인터페이스를 사용합니다. pyflakes를 사용하면 인수가없는 기본 동작은 Frosted에서 아무것도하지 않는 것입니다 (stdin을 기다리는 것). 오류와 도움을받습니다.</target>
        </trans-unit>
        <trans-unit id="8e0f66da9f99f9219ba7e467869e4d2e1e146b96" translate="yes" xml:space="preserve">
          <source>Frosting. Duh.</source>
          <target state="translated">프로스팅. 이런.</target>
        </trans-unit>
        <trans-unit id="442be9cc1d61d9626c696712b7cc41f75da56b09" translate="yes" xml:space="preserve">
          <source>If you find the default frosted settings do not work well for your
project, frosted provides several ways to adjust the behavior.</source>
          <target state="translated">기본 프로스트 설정이 프로젝트에서 제대로 작동하지 않는 경우, 프로스트는 동작을 조정하는 여러 가지 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a62a2ef0c1df7e9819efd1195443f6d7a429318c" translate="yes" xml:space="preserve">
          <source>Installing Frosted</source>
          <target state="translated">Frosted 설치</target>
        </trans-unit>
        <trans-unit id="7735fad0dea1d9c448fc4c2dacc2ec5c7405b926" translate="yes" xml:space="preserve">
          <source>Installing Frosted is as simple as:</source>
          <target state="translated">Frosted 설치는 다음과 같이 간단합니다.</target>
        </trans-unit>
        <trans-unit id="52aada0da1b8f599889022da9afcd8a15ec38dbb" translate="yes" xml:space="preserve">
          <source>Integration with text editors and tools is a priority for the project.
As such, any pull request that adds integration support or links to a
third-party project that does will be enthusiastically accepted.</source>
          <target state="translated">텍스트 편집기 및 도구와의 통합은 프로젝트의 우선 순위입니다. 따라서 통합 지원 또는 타사 프로젝트에 대한 링크를 추가하는 모든 풀 요청은 열정적으로 수락됩니다.</target>
        </trans-unit>
        <trans-unit id="7aef83f9ffbe19fb0df18d22856cfeffa700c459" translate="yes" xml:space="preserve">
          <source>Lots of code has been re-factored and simplified, Frosted aims to be
faster and leaner then pyflakes ever was.</source>
          <target state="translated">많은 코드가 리팩터링되고 단순화되었으며 Frosted는 파이 플레이크보다 더 빠르고 더 간결한 것을 목표로합니다.</target>
        </trans-unit>
        <trans-unit id="dd6b01a0755a85a531161cb098cb3fcef3c48366" translate="yes" xml:space="preserve">
          <source>Meaning You can place any standard frosted configuration parameters
within a .editorconfig file under the *.py section and they will be
honored.</source>
          <target state="translated">의미 * .py 섹션 아래의 .editorconfig 파일에 표준 프로스트 구성 매개 변수를 배치 할 수 있으며 이러한 매개 변수가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="f7c0f45570df07053b118b0a8641e63ccdcc2948" translate="yes" xml:space="preserve">
          <source>Note: the maintainer of pyflakes has been added as a contributer to
frosted.</source>
          <target state="translated">참고 : 파이 플레이크의 관리자가 프로스트에 기여자로 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="71b3e24ee36bda7f224f6899b05934f03f66f002" translate="yes" xml:space="preserve">
          <source>Our preferred contributions come in the form of pull requests and issue
reports. That said, we will not deny monetary contributions. If you
desire to do this using flattr etc, please make sure you flattr @bitglue
as he is the original creator of pyflakes and without his contribution
Frosted would not be possible.</source>
          <target state="translated">우리가 선호하는 기여는 풀 리퀘스트와 이슈 리포트의 형태로 제공됩니다. 즉, 우리는 금전적 기부를 거부하지 않을 것입니다. flattr 등을 사용하여이 작업을 수행하려면 flattr @bitglue가 pyflakes의 원래 제작자이고 그의 기여 없이는 Frosted가 불가능하므로 flattr을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="f99a61e8fa41c9ee09ff2481203c0b4281e8b68d" translate="yes" xml:space="preserve">
          <source>Pyflakes was a great project, and introduced a great approach for
quickly checking for Python coding errors. I am very grateful to the
original creators. However, I feel over the last year it has become
stagnant, without a clear vision and someone willing to take true
ownership of the project. While I know it is in no way intentional,
critical failures have stayed open, despite perfectly complete and valid
pull-requests open, without so much as an acknowledgement from the
maintainer. As I genuinely believe open source projects need constant
improvement (releasing early and often), I decided to start this project
and look for as much input as possible from the Python community. I&amp;rsquo;m
hoping together we can build an even more awesome code checker!</source>
          <target state="translated">Pyflakes는 훌륭한 프로젝트였으며 Python 코딩 오류를 빠르게 확인할 수있는 훌륭한 접근 방식을 도입했습니다. 원래 창작자들에게 매우 감사합니다. 하지만 작년 한 해 동안 명확한 비전과 프로젝트의 진정한 소유권을 갖고 자하는 누군가없이 정체되었다고 느낍니다. 의도적이지 않다는 것을 알고 있지만, 완벽하고 유효한 풀 리퀘스트가 열려 있음에도 불구하고 유지 관리자의 승인없이 심각한 실패가 계속 열려 있습니다. 오픈 소스 프로젝트는 지속적인 개선이 필요하다고 진정으로 믿기 때문에 (조기 및 자주 릴리스)이 프로젝트를 시작하고 Python 커뮤니티에서 최대한 많은 정보를 얻기로 결정했습니다. 우리가 함께 더 멋진 코드 검사기를 만들 수 있기를 바랍니다!</target>
        </trans-unit>
        <trans-unit id="7871de9760f9cc256bf52c8dd2e5247928cd5b2f" translate="yes" xml:space="preserve">
          <source>Several improvements and fixes that have stayed open (and ignored) on
mainline pyflakes have been integrated.</source>
          <target state="translated">메인 라인 pyflakes에 열려있는 (그리고 무시 된) 몇 가지 개선 사항과 수정 사항이 통합되었습니다.</target>
        </trans-unit>
        <trans-unit id="6cd8a7665afbfd4a51ee84a543b36235cb98b330" translate="yes" xml:space="preserve">
          <source>Text Editor Integration</source>
          <target state="translated">텍스트 편집기 통합</target>
        </trans-unit>
        <trans-unit id="1c2cc8019942f0a801a3aecd17dbec36a9692828" translate="yes" xml:space="preserve">
          <source>Thanks and I hope you enjoy the new Frosted pyflakes!</source>
          <target state="translated">감사합니다. 새로운 Frosted pyflakes를 즐기시기 바랍니다!</target>
        </trans-unit>
        <trans-unit id="69ce9a8ded42bb83e37788c82c62c192ad8dd573" translate="yes" xml:space="preserve">
          <source>The following improvements have already been implemented into Frosted</source>
          <target state="translated">다음 개선 사항은 이미 Frosted에 구현되었습니다.</target>
        </trans-unit>
        <trans-unit id="1dd2abb00d02271a9efed958ff2abf70147010c4" translate="yes" xml:space="preserve">
          <source>The number one reason frosted is better is because of you! Or rather,
the Python community at large. I will quickly respond to any pull
requests, recommendations, or bug reports that come my way.</source>
          <target state="translated">프로스트가 더 좋은 가장 큰 이유는 당신 때문입니다! 또는 전체적으로 Python 커뮤니티입니다. 제 방식대로 오는 풀 요청, 권장 사항 또는 버그 보고서에 신속하게 응답하겠습니다.</target>
        </trans-unit>
        <trans-unit id="03ad734259090ea075f97a150fd191d04cd88c7c" translate="yes" xml:space="preserve">
          <source>To configure frosted for a single user create a ~/.frosted.cfg file:</source>
          <target state="translated">단일 사용자에 대해 Frosted를 구성하려면 ~ / .frosted.cfg 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="35faccbdee310d487bbb92db1e21b210ef40a12e" translate="yes" xml:space="preserve">
          <source>Using Frosted</source>
          <target state="translated">프로스트 사용</target>
        </trans-unit>
        <trans-unit id="8ab460afa876c7800484ae1f7a2f035342dcfab8" translate="yes" xml:space="preserve">
          <source>Using any of the following methods will result in a quick resolution to
any issue you may have with Frosted or a quick response to any
implementation detail you wish to discuss. - &lt;a href=&quot;https://mail.python.org/mailman/listinfo/code-quality&quot;&gt;Mailing
List&lt;/a&gt; - best
place to discuss large architectural changes or changes that effect that
may effect Python code-quality projects beyond Frosted. - &lt;a href=&quot;https://github.com/timothycrosley/frosted/issues&quot;&gt;Github
issues&lt;/a&gt; - best
place to report bugs, ask for concretely defined features, and even ask
for general help. - &lt;a href=&quot;mailto:timothy.crosley%40gmail.com&quot;&gt;timothy.crosley@gmail.com&lt;/a&gt; - feel free to email me
any questions or concerns you have that you don&amp;rsquo;t think would benefit
from community wide involvement.</source>
          <target state="translated">다음 방법 중 하나를 사용하면 Frosted에서 발생할 수있는 모든 문제에 대한 빠른 해결 또는 논의하려는 구현 세부 사항에 대한 빠른 응답을 얻을 수 있습니다. - &lt;a href=&quot;https://mail.python.org/mailman/listinfo/code-quality&quot;&gt;메일 링리스트&lt;/a&gt; -Frosted 이외의 Python 코드 품질 프로젝트에 영향을 미칠 수있는 대규모 아키텍처 변경 또는 변경 사항을 논의하기에 가장 좋은 장소입니다. - &lt;a href=&quot;https://github.com/timothycrosley/frosted/issues&quot;&gt;Github의 문제&lt;/a&gt; - 보고서 버그에 가장 좋은 장소는 구체적으로 정의 된 기능을 요구, 심지어 일반 도움을 요청. - &lt;a href=&quot;mailto:timothy.crosley%40gmail.com&quot;&gt;timothy.crosley@gmail.com은&lt;/a&gt; - 나에게 당신은 당신이 사회 전체의 참여 혜택을 누릴 것이라고 생각하지 않는 것이이 질문이나 문제를 이메일을 보내 주시기 바랍니다.</target>
        </trans-unit>
        <trans-unit id="93b5f1a1069707c0cfcee851709848835f3dd9d6" translate="yes" xml:space="preserve">
          <source>What makes Frosted better then pyflakes?</source>
          <target state="translated">Frosted가 pyflakes보다 나은 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="9959ec834a06f58f7bda85c4e9fa2eb8cef94237" translate="yes" xml:space="preserve">
          <source>When deciding whether or not to include an error for reporting, Frosted
uses the 99% approach as a yard stick. If it is agreed that 99% of the
time (or more) that a pattern occurs it&amp;rsquo;s an error, Frosted will report
on it, if not it will not be added to the Frosted project.</source>
          <target state="translated">보고에 오류를 포함할지 여부를 결정할 때 Frosted는 99 % 접근 방식을 야드 스틱으로 사용합니다. 패턴이 발생하는 시간 (또는 그 이상)의 99 %가 오류라고 동의하면 Frosted는 이에 대해보고합니다. 그렇지 않으면 Frosted 프로젝트에 추가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d163ecc86cfb758cd918d7e03b63e837ea246dc2" translate="yes" xml:space="preserve">
          <source>Why Frosted?</source>
          <target state="translated">왜 프로스트?</target>
        </trans-unit>
        <trans-unit id="57f9cd1ec02701e6c717ae710d5420274b9246fa" translate="yes" xml:space="preserve">
          <source>Why did you fork pyflakes?</source>
          <target state="translated">왜 파이 플레이크를 포크 했습니까?</target>
        </trans-unit>
        <trans-unit id="1e5777c1f772ca4a9395adb82783d45b66c0d347" translate="yes" xml:space="preserve">
          <source>You can then override any of these settings by using command line
arguments, or by passing in kwargs into any of the exposed api checking
methods.</source>
          <target state="translated">그런 다음 명령 줄 인수를 사용하거나 노출 된 API 검사 메서드에 kwargs를 전달하여 이러한 설정을 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ad1deba2a1dc4a411f0947b0e5bd8e53294903f" translate="yes" xml:space="preserve">
          <source>frosted.api.check (codeString, filename,
reporter=modReporter.Default, **setting_overrides) Check the
Python source given by codeString for unfrosted flakes.</source>
          <target state="translated">frosted.api.check (codeString, filename, reporter = modReporter.Default, ** setting_overrides) 비프로스트 플레이크에 대해 codeString에서 제공 한 Python 소스를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="79e26c76b28774ceb8cc812b39122a3498a71cb8" translate="yes" xml:space="preserve">
          <source>frosted.api.check_path (filename, reporter=modReporter.Default,
**setting_overrides) Check the given path, printing out any
warnings detected.</source>
          <target state="translated">frosted.api.check_path (filename, reporter = modReporter.Default, ** setting_overrides) 지정된 경로를 확인하고 감지 된 모든 경고를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="7452c3c63a0c2ac81d303847cd98a5047814f7b3" translate="yes" xml:space="preserve">
          <source>frosted.check_recursive (paths, reporter=modReporter.Default,
**setting_overrides) Recursively check all source files defined in
paths.</source>
          <target state="translated">frosted.check_recursive (paths, reporter = modReporter.Default, ** setting_overrides) 경로에 정의 된 모든 소스 파일을 재귀 적으로 확인합니다.</target>
        </trans-unit>
        <trans-unit id="a9434633783ba16c64795b23695088c204f843c3" translate="yes" xml:space="preserve">
          <source>or if you prefer</source>
          <target state="translated">또는 원하는 경우</target>
        </trans-unit>
        <trans-unit id="9d2a7ad1f99954b15879f901181030bb7bf56f67" translate="yes" xml:space="preserve">
          <source>or recursively:</source>
          <target state="translated">또는 재귀 적으로 :</target>
        </trans-unit>
        <trans-unit id="53716df0bbab970da7618ef94f33c3dab3b9a3c9" translate="yes" xml:space="preserve">
          <source>or to read from stdin:</source>
          <target state="translated">또는 stdin에서 읽으려면 :</target>
        </trans-unit>
        <trans-unit id="6415c2d844d4e6ce1c534ee71f1d8a7e411903ea" translate="yes" xml:space="preserve">
          <source>~Timothy Crosley</source>
          <target state="translated">~ 티모시 크로 슬리</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
