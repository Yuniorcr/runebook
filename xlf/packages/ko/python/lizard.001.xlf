<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/lizard/">
    <body>
      <group id="lizard">
        <trans-unit id="f9321cb54e2c9ff0a971dda406afd95711e00920" translate="yes" xml:space="preserve">
          <source>-C10</source>
          <target state="translated">-C10</target>
        </trans-unit>
        <trans-unit id="258824eb3becda0089745366018765b7ecf2134f" translate="yes" xml:space="preserve">
          <source>-L10</source>
          <target state="translated">-L10</target>
        </trans-unit>
        <trans-unit id="2cb74b8a7d38c4011a7f9a557907c868bcdb7d3d" translate="yes" xml:space="preserve">
          <source>-Tcyclomatic_complexity=10</source>
          <target state="translated">-Tcyclomatic_complexity = 10</target>
        </trans-unit>
        <trans-unit id="72d8e8a852f8184cc6911dd6669503ac61a326db" translate="yes" xml:space="preserve">
          <source>-Tlength=10</source>
          <target state="translated">-Tlength = 10</target>
        </trans-unit>
        <trans-unit id="bede6624c813bdf41ebc6173ef9ad2c13fcb17d9" translate="yes" xml:space="preserve">
          <source>-Tnloc=10</source>
          <target state="translated">-Tnloc = 10</target>
        </trans-unit>
        <trans-unit id="e2beb907fe91e6ef68c21d074083a7c85cfd45eb" translate="yes" xml:space="preserve">
          <source>-Tparameter_count=10</source>
          <target state="translated">-Tparameter_count = 10</target>
        </trans-unit>
        <trans-unit id="3ebcc976c2dd759fcc3d310a5b0d941d1658a6c4" translate="yes" xml:space="preserve">
          <source>-a10</source>
          <target state="translated">-a10</target>
        </trans-unit>
        <trans-unit id="03593f2d1e24ead3f85c5377f4b77b360396c139" translate="yes" xml:space="preserve">
          <source>.
The option</source>
          <target state="translated">. 옵션</target>
        </trans-unit>
        <trans-unit id="e07e1dbdc416ef697dadf3ce7fdb3f85b42815fa" translate="yes" xml:space="preserve">
          <source>A code analyzer without caring the C/C++ header files. It works with Java, C/C++, JavaScript, Python, Ruby, Swift, Objective C. Metrics includes cyclomatic complexity number etc.</source>
          <target state="translated">C / C ++ 헤더 파일을 관리하지 않는 코드 분석기. Java, C / C ++, JavaScript, Python, Ruby, Swift, Objective C에서 작동합니다. Metrics에는 순환 복잡도 번호 등이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="d9e9f235261e1a7230a8c93c93e0c332adbd80b3" translate="yes" xml:space="preserve">
          <source>A list of supported languages:</source>
          <target state="translated">지원되는 언어 목록 :</target>
        </trans-unit>
        <trans-unit id="e40d447e08990d74eae8cd3ddd81a8849e285293" translate="yes" xml:space="preserve">
          <source>Analyze a folder recursively: lizard mahjong_game/src</source>
          <target state="translated">재귀 적으로 폴더 분석 : lizard mahjong_game / src</target>
        </trans-unit>
        <trans-unit id="40d6f10f3765aa78647963b0566b3b7b88c0b439" translate="yes" xml:space="preserve">
          <source>By default lizard will search for any source code that it knows and mix
all the results together. This might not be what you want. You can use
the &amp;ldquo;-l&amp;rdquo; option to select language(s).</source>
          <target state="translated">기본적으로 lizard는 알고있는 모든 소스 코드를 검색하고 모든 결과를 함께 혼합합니다. 이것은 당신이 원하는 것이 아닐 수도 있습니다. &quot;-l&quot;옵션을 사용하여 언어를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdd9f6f4ddb4f227c3c467e72333ae4b2df17140" translate="yes" xml:space="preserve">
          <source>C# (C Sharp)</source>
          <target state="translated">C # (C Sharp)</target>
        </trans-unit>
        <trans-unit id="b5a4ad577851c1a6b0d795dd6dd6df987b0aec97" translate="yes" xml:space="preserve">
          <source>C/C++ (works with C++14)</source>
          <target state="translated">C / C ++ (C ++ 14에서 작동)</target>
        </trans-unit>
        <trans-unit id="88a7b0f5a508888922c3e98ceaba377130a95d08" translate="yes" xml:space="preserve">
          <source>C/C++ digraphs and trigraphs are not recognized.</source>
          <target state="translated">C / C ++ digraphs 및 trigraphs는 인식되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="57ae41e7d8dfd70ec4e252da63836bf7e6ae9eeb" translate="yes" xml:space="preserve">
          <source>C/C++ preprocessing or macro expansion is not performed.
For example, using macro instead of parentheses (or partial statements in macros)
can confuse Lizard&amp;rsquo;s bracket stacks.</source>
          <target state="translated">C / C ++ 전처리 또는 매크로 확장이 수행되지 않습니다. 예를 들어 괄호 (또는 매크로의 부분 문) 대신 매크로를 사용하면 Lizard의 브래킷 스택이 혼동 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4f5f2d7cddef0e3ac846cc48280b54dc659561e" translate="yes" xml:space="preserve">
          <source>CCN (cyclomatic complexity number),</source>
          <target state="translated">CCN (순환 복잡도 번호),</target>
        </trans-unit>
        <trans-unit id="32893b27b7c12b31474f093e2f7ae9ce4a8b626d" translate="yes" xml:space="preserve">
          <source>Code Duplicate Detector</source>
          <target state="translated">코드 중복 탐지기</target>
        </trans-unit>
        <trans-unit id="f512304d03f852e06827dbb0cbc041e34ca895b2" translate="yes" xml:space="preserve">
          <source>Example use</source>
          <target state="translated">사용 예</target>
        </trans-unit>
        <trans-unit id="09013b516144cde37e2db5e9d19b0c84415b898d" translate="yes" xml:space="preserve">
          <source>Exclude anything in the tests folder:</source>
          <target state="translated">테스트 폴더의 모든 항목을 제외합니다.</target>
        </trans-unit>
        <trans-unit id="7b1d31545d25a8ff0739fcb82ed07fc8217010e2" translate="yes" xml:space="preserve">
          <source>GDScript</source>
          <target state="translated">GDScript</target>
        </trans-unit>
        <trans-unit id="bc90a8d69a5eb29c60c360936f02d6e079c75ea9" translate="yes" xml:space="preserve">
          <source>Generate A Tag Cloud For Your Code</source>
          <target state="translated">코드에 대한 태그 클라우드 생성</target>
        </trans-unit>
        <trans-unit id="f44271afeb31f1a23929417cd0baede5654047bc" translate="yes" xml:space="preserve">
          <source>Generated code</source>
          <target state="translated">생성 된 코드</target>
        </trans-unit>
        <trans-unit id="92f4645da18d229c1e99797e4ee0203092e4c3ed" translate="yes" xml:space="preserve">
          <source>Golang</source>
          <target state="translated">골랑</target>
        </trans-unit>
        <trans-unit id="54522674580f2442376555fe16e90983bf48c69d" translate="yes" xml:space="preserve">
          <source>If for some reason you would like to ignore the warnings, you can use
the whitelist. Add &amp;lsquo;whitelizard.txt&amp;rsquo; to the current folder (or use -W to point to the whitelist file), then the
functions defined in the file will be ignored. Please notice that if you assign the file pathname, it needs to
be exactly the same relative path as Lizard to find the file. An easy way to get the file pathname is to copy it from
the Lizard warning output.
This is an example whitelist:</source>
          <target state="translated">어떤 이유로 경고를 무시하고 싶다면 화이트리스트를 사용할 수 있습니다. 현재 폴더에 'whitelizard.txt'를 추가하거나 -W를 사용하여 화이트리스트 파일을 가리키면 파일에 정의 된 기능이 무시됩니다. 파일 경로 이름을 지정하는 경우 파일을 찾으려면 Lizard와 정확히 동일한 상대 경로 여야합니다. 파일 경로 이름을 얻는 쉬운 방법은 Lizard 경고 출력에서 ​​복사하는 것입니다. 다음은 허용 목록의 예입니다.</target>
        </trans-unit>
        <trans-unit id="02d3e88b0d3817983233fc047cd979ee47c36c58" translate="yes" xml:space="preserve">
          <source>If you want a proper install:</source>
          <target state="translated">적절한 설치를 원하는 경우 :</target>
        </trans-unit>
        <trans-unit id="62af59146478e88bdd3e80610da3eccae935bcdd" translate="yes" xml:space="preserve">
          <source>In addition to asserting the correct code,
Lizard may choose not to deal with some advanced or complicated language features:</source>
          <target state="translated">올바른 코드를 주장하는 것 외에도 Lizard는 일부 고급 또는 복잡한 언어 기능을 처리하지 않기로 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="c5a3f877dd969ee461f2139db720f853d8044b93" translate="yes" xml:space="preserve">
          <source>It counts</source>
          <target state="translated">그것은 중요합니다</target>
        </trans-unit>
        <trans-unit id="ab215c3828ac7b54bfef79da0460d772ff78b43f" translate="yes" xml:space="preserve">
          <source>It requires python2.7 or above (early versions are not verified).</source>
          <target state="translated">python2.7 이상이 필요합니다 (이전 버전은 확인되지 않음).</target>
        </trans-unit>
        <trans-unit id="e027e57610f85225767aafbbf23fed7457e55828" translate="yes" xml:space="preserve">
          <source>Java</source>
          <target state="translated">자바</target>
        </trans-unit>
        <trans-unit id="47e03525c9e85607423e9fd8db32266824bc1d3d" translate="yes" xml:space="preserve">
          <source>JavaScript (With ES6 and JSX)</source>
          <target state="translated">JavaScript (ES6 및 JSX 사용)</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">한계</target>
        </trans-unit>
        <trans-unit id="9b5e7e84d2ab1c8d949c5b0be56776ef3dca72fb" translate="yes" xml:space="preserve">
          <source>Literatures Referring to Lizard</source>
          <target state="translated">도마뱀에 관한 문헌</target>
        </trans-unit>
        <trans-unit id="bcb2ff65ba49568fd9ea9fb5c2c50d41b3d181a3" translate="yes" xml:space="preserve">
          <source>Lizard guarantees to terminate eventually (i.e., no forever loops, hangs)
without hard failures (e.g., exit, crash, exceptions).</source>
          <target state="translated">Lizard는 하드 실패 (예 : 종료, 충돌, 예외)없이 결국 종료 (즉, 영구 루프, 중단 없음)를 보장합니다.</target>
        </trans-unit>
        <trans-unit id="1c7a77155264c4da8d933c76d382399454a4a2d3" translate="yes" xml:space="preserve">
          <source>Lizard has a simple solution with generated code. Any code in a source file that is following
a comment containing &amp;ldquo;GENERATED CODE&amp;rdquo; will be ignored completely. The ignored code will not
generate any data, except the file counting.</source>
          <target state="translated">Lizard에는 생성 된 코드가있는 간단한 솔루션이 있습니다. &quot;GENERATED CODE&quot;가 포함 된 주석 뒤에 오는 소스 파일의 모든 코드는 완전히 무시됩니다. 무시 된 코드는 파일 계산을 제외하고 데이터를 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3a7ff4a6637140c4c5f0c9265d18edb9c6796968" translate="yes" xml:space="preserve">
          <source>Lizard is also used as a plugin for fastlane to help check code complexity and submit xml report to sonar.</source>
          <target state="translated">Lizard는 코드 복잡성을 확인하고 XML 보고서를 소나에 제출하는 데 도움이되는 fastlane 용 플러그인으로도 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a9889069de5b33ce1949d38f7939a1daa737cbe9" translate="yes" xml:space="preserve">
          <source>Lizard is an extensible Cyclomatic Complexity Analyzer for many programming languages
including C/C++ (doesn&amp;rsquo;t require all the header files or Java imports). It also does
copy-paste detection (code clone detection/code duplicate detection) and many other forms of static
code analysis.</source>
          <target state="translated">Lizard는 C / C ++를 포함한 많은 프로그래밍 언어를위한 확장 가능한 Cyclomatic Complexity Analyzer입니다 (모든 헤더 파일 또는 Java 가져 오기가 필요하지 않음). 또한 복사-붙여 넣기 감지 (코드 복제 감지 / 코드 중복 감지) 및 기타 여러 형태의 정적 코드 분석을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="cd7398c3de321ef9ef69d7e72f0d8c3061e4ebb0" translate="yes" xml:space="preserve">
          <source>Lizard is often used in software related researches. If you used it to support your work, you may contact the lizard author to add your work in the following list.</source>
          <target state="translated">Lizard는 소프트웨어 관련 연구에 자주 사용됩니다. 작업을 지원하기 위해 사용한 경우 도마뱀 작성자에게 연락하여 다음 목록에 작업을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="26db039a5d52adc6061fc4a35d58d8c16eece7cf" translate="yes" xml:space="preserve">
          <source>Lizard requires syntactically correct code.
Upon processing input with incorrect or unknown syntax:</source>
          <target state="translated">Lizard에는 구문 상 올바른 코드가 필요합니다. 올바르지 않거나 알 수없는 구문으로 입력을 처리 할 때 :</target>
        </trans-unit>
        <trans-unit id="b0832074630eb731d7fbe8074de48a90cd9bb220" translate="yes" xml:space="preserve">
          <source>Lua</source>
          <target state="translated">루아</target>
        </trans-unit>
        <trans-unit id="9cf4af30df052d80876381f9ec0e05811ecd3d08" translate="yes" xml:space="preserve">
          <source>Objective-C</source>
          <target state="translated">목표 -C</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">옵션</target>
        </trans-unit>
        <trans-unit id="04298e88259772f6ef3523e4df26c77589975627" translate="yes" xml:space="preserve">
          <source>Options in Comments</source>
          <target state="translated">주석 옵션</target>
        </trans-unit>
        <trans-unit id="7396e9740257da2a574bab976a945d545790bcfa" translate="yes" xml:space="preserve">
          <source>Or if you&amp;rsquo;ve got the source:</source>
          <target state="translated">또는 출처가있는 경우 :</target>
        </trans-unit>
        <trans-unit id="7daf403c7589f4927632ed3b6af762a992f09b78" translate="yes" xml:space="preserve">
          <source>PHP</source>
          <target state="translated">PHP</target>
        </trans-unit>
        <trans-unit id="6e3604888c4b4ec08e2837913d012fe2834ffa83" translate="yes" xml:space="preserve">
          <source>Python</source>
          <target state="translated">파이썬</target>
        </trans-unit>
        <trans-unit id="b217e98c3bf70f3cf4633a5447d6587eea974ba1" translate="yes" xml:space="preserve">
          <source>Ruby</source>
          <target state="translated">루비</target>
        </trans-unit>
        <trans-unit id="86c040b1e97657b2d3964167ab34f981802a0be5" translate="yes" xml:space="preserve">
          <source>Run for the code under current folder (recursively):</source>
          <target state="translated">현재 폴더 아래의 코드에 대해 실행 (재귀 적으로) :</target>
        </trans-unit>
        <trans-unit id="e2ae20d9ae7fcacb605c03c198e0a1c51d446f50" translate="yes" xml:space="preserve">
          <source>Rust</source>
          <target state="translated">녹</target>
        </trans-unit>
        <trans-unit id="45c7613636e05b259be1f22ccf0dd23216b205b7" translate="yes" xml:space="preserve">
          <source>S Martin-Haugh et al 2017 J. Phys.: Conf. Ser. 898 072011</source>
          <target state="translated">S Martin-Haugh 외 2017 J. Phys .: Conf. Ser. 898 072011</target>
        </trans-unit>
        <trans-unit id="7b7e70bcf209a5323526033a9cbf768a3ae70c2c" translate="yes" xml:space="preserve">
          <source>Scala</source>
          <target state="translated">스칼라</target>
        </trans-unit>
        <trans-unit id="b21ecc0ae732fd9bd16d29a7b6c64cb80d845324" translate="yes" xml:space="preserve">
          <source>Set warning threshold for any field:lizard -T nloc=25</source>
          <target state="translated">모든 필드에 대한 경고 임계 값 설정 : lizard -T nloc = 25</target>
        </trans-unit>
        <trans-unit id="86d872481c91595b93c36cffca8d2e52cc3efaef" translate="yes" xml:space="preserve">
          <source>Software Quality in the ATLAS experiment at CERN, which refers to Lizard as one of the tools, has been published in the Journal of Physics: &lt;a href=&quot;http://iopscience.iop.org/article/10.1088/1742-6596/898/7/072011&quot;&gt;http://iopscience.iop.org/article/10.1088/1742-6596/898/7/072011&lt;/a&gt;</source>
          <target state="translated">Lizard를 도구 중 하나로 지칭하는 CERN의 ATLAS 실험에서 소프트웨어 품질은 Journal of Physics : &lt;a href=&quot;http://iopscience.iop.org/article/10.1088/1742-6596/898/7/072011&quot;&gt;http://iopscience.iop.org/article/10.1088/1742-6596/898/7/에&lt;/a&gt; 게시되었습니다. 072011</target>
        </trans-unit>
        <trans-unit id="28a17ad37e71f81e9c0d5427abc0df86df8c085a" translate="yes" xml:space="preserve">
          <source>Some C++ complicated templates may cause confusion with matching angle brackets
and processing less-than</source>
          <target state="translated">일부 C ++ 복잡한 템플릿은 꺾쇠 괄호 일치 및 처리 속도가</target>
        </trans-unit>
        <trans-unit id="112ab020698e5fc0f4baecd7821a512d8c419a69" translate="yes" xml:space="preserve">
          <source>Swift</source>
          <target state="translated">빠른</target>
        </trans-unit>
        <trans-unit id="bde060882217fa0e83f37c32f97f1a211d55c994" translate="yes" xml:space="preserve">
          <source>TTCN-3</source>
          <target state="translated">TTCN-3</target>
        </trans-unit>
        <trans-unit id="8d9594a87362ce1971b7a9efe4bfc116ba95e426" translate="yes" xml:space="preserve">
          <source>The option</source>
          <target state="translated">옵션</target>
        </trans-unit>
        <trans-unit id="64abd3b6390856b7d22bfc87511d76239240b912" translate="yes" xml:space="preserve">
          <source>There is a chance of a combination of the following soft failures:</source>
          <target state="translated">다음과 같은 소프트 실패가 조합 될 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="35be59e2cbeb3ee6d6b278b4d4492105893fa6f5" translate="yes" xml:space="preserve">
          <source>This approach makes the Lizard implementation
simpler and more focused with partial parsers for various languages.
Developers of Lizard attempt to minimize the possibility of soft failures.
Hard failures are bugs in Lizard code,
while soft failures are trade-offs or potential bugs.</source>
          <target state="translated">이 접근 방식은 다양한 언어에 대한 부분 파서로 Lizard 구현을 더 간단하고 집중적으로 만듭니다. Lizard 개발자는 소프트 실패 가능성을 최소화하려고합니다. 하드 실패는 Lizard 코드의 버그이고 소프트 실패는 트레이드 오프 또는 잠재적 버그입니다.</target>
        </trans-unit>
        <trans-unit id="8c6aa4373adbf8bb2d71b73205e8e23d92994d34" translate="yes" xml:space="preserve">
          <source>This tool actually calculates how complex the code &amp;lsquo;looks&amp;rsquo; rather than
how complex the code really &amp;lsquo;is&amp;rsquo;. People will need this tool because it&amp;rsquo;s
often very hard to get all the included folders and files right when
they are complicated. But we don&amp;rsquo;t really need that kind of accuracy for
cyclomatic complexity.</source>
          <target state="translated">이 도구는 실제로 코드가 실제로 얼마나 복잡한지가 아니라 코드가 얼마나 복잡한 지 실제로 계산합니다. 포함 된 모든 폴더와 파일이 복잡 할 때 바로 가져 오기가 매우 어렵 기 때문에 사람들은이 도구가 필요합니다. 그러나 우리는 순환 복잡성에 대해 그런 종류의 정확성이 실제로 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="e1954e5a6810fffdfe2f4a4a2e217be50df15ee1" translate="yes" xml:space="preserve">
          <source>Using lizard as Python module</source>
          <target state="translated">도마뱀을 파이썬 모듈로 사용하기</target>
        </trans-unit>
        <trans-unit id="1d7c30a21399a364397fa7985421ca30e8154905" translate="yes" xml:space="preserve">
          <source>Warnings only (in clang/gcc formation):lizard -w mahjong_game</source>
          <target state="translated">경고 만 (clang / gcc 형성) : lizard -w mahjong_game</target>
        </trans-unit>
        <trans-unit id="53c2ad308e416567345ed5fac7c4f48b8609157c" translate="yes" xml:space="preserve">
          <source>Whitelist</source>
          <target state="translated">화이트리스트</target>
        </trans-unit>
        <trans-unit id="fe319fa0895a7f47e55075d55fc2289e3b3f2bea" translate="yes" xml:space="preserve">
          <source>You can also do</source>
          <target state="translated">당신은 또한 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="bb0f5d983c9e19bc254a483cb8df48293893cb30" translate="yes" xml:space="preserve">
          <source>You can also use lizard as a Python module in your code:</source>
          <target state="translated">코드에서 lizard를 Python 모듈로 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="df5cbe243a1ca73de122ac671f8ad550d8a10176" translate="yes" xml:space="preserve">
          <source>You can also use source code string instead of file. But you need to
provide a file name (to identify the language).</source>
          <target state="translated">파일 대신 소스 코드 문자열을 사용할 수도 있습니다. 그러나 파일 이름을 제공해야합니다 (언어를 식별하기 위해).</target>
        </trans-unit>
        <trans-unit id="9968bd0e3032aa2f78e02320c117ac09d256ce47" translate="yes" xml:space="preserve">
          <source>You can generate a &amp;ldquo;Tag cloud&amp;rdquo; of your code by the following command. It counts the identifiers in your code (ignoring the comments).</source>
          <target state="translated">다음 명령으로 코드의 &quot;태그 클라우드&quot;를 생성 할 수 있습니다. 코드의 식별자를 계산합니다 (코멘트 무시).</target>
        </trans-unit>
        <trans-unit id="a8231394358a7d905280f809bf35ea57b0d6c685" translate="yes" xml:space="preserve">
          <source>You can set limitation for CCN (-C), the number of parameters (-a).
Functions that exceed these limitations will generate warnings. The exit
code of lizard will be none-Zero if there are warnings.</source>
          <target state="translated">CCN (-C), 매개 변수 수 (-a)에 대한 제한을 설정할 수 있습니다. 이러한 제한을 초과하는 기능은 경고를 생성합니다. 도마뱀의 종료 코드는 경고가있는 경우 0이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="1d07f3fe906fe382d9f570cce1c9831990175053" translate="yes" xml:space="preserve">
          <source>You can use options in the comments of the source code to change the
behavior of lizard. By putting &amp;ldquo;#lizard forgives&amp;rdquo; inside a function or
before a function it will suppress the warning for that function.</source>
          <target state="translated">소스 코드의 주석에서 옵션을 사용하여 도마뱀의 동작을 변경할 수 있습니다. &quot;#lizard forgives&quot;를 함수 내부 또는 함수 앞에 넣으면 해당 함수에 대한 경고가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="62a951a21fcb352a7c4d589f31e9ea3c64dc21ca" translate="yes" xml:space="preserve">
          <source>fastlane-plugin-lizard</source>
          <target state="translated">fastlane 플러그인 도마뱀</target>
        </trans-unit>
        <trans-unit id="1623ff3fb2530c0649945a76f60c3e59d33d1f08" translate="yes" xml:space="preserve">
          <source>improper analysis / tally</source>
          <target state="translated">부적절한 분석 / 집계</target>
        </trans-unit>
        <trans-unit id="704e8cab853b9cfebb9ca9f45aa72aeb8aea3a2d" translate="yes" xml:space="preserve">
          <source>is equal to</source>
          <target state="translated">동일하다</target>
        </trans-unit>
        <trans-unit id="f4609e4fc56c8df5513a65b313b91cfe77f76d4b" translate="yes" xml:space="preserve">
          <source>lizard.py can be used as a stand alone Python script, most
functionalities are there. You can always use it without any
installation. To acquire all the functionalities of lizard, you will
need a proper install.</source>
          <target state="translated">lizard.py는 독립형 Python 스크립트로 사용할 수 있으며 대부분의 기능이 있습니다. 설치없이 언제든지 사용할 수 있습니다. 도마뱀의 모든 기능을 얻으려면 적절한 설치가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="70afe4df7ddf6590effac2e0c782192233188368" translate="yes" xml:space="preserve">
          <source>misinterpretation</source>
          <target state="translated">오해</target>
        </trans-unit>
        <trans-unit id="ed4cca949ebe06eec6edf03c2973b1b47d0ecefc" translate="yes" xml:space="preserve">
          <source>omission</source>
          <target state="translated">생략</target>
        </trans-unit>
        <trans-unit id="4fb57b05012ece7691c9751caecc5d50a72db02a" translate="yes" xml:space="preserve">
          <source>operators
inside of template arguments.</source>
          <target state="translated">템플릿 인수 내부의 연산자.</target>
        </trans-unit>
        <trans-unit id="d93e68c234320b3f9c0a2e8b593a4926750ab240" translate="yes" xml:space="preserve">
          <source>or more-than</source>
          <target state="translated">이상</target>
        </trans-unit>
        <trans-unit id="d5609a1b8c8727c27185779d95b6c119f9f77ced" translate="yes" xml:space="preserve">
          <source>parameter count of functions.</source>
          <target state="translated">함수의 매개 변수 수.</target>
        </trans-unit>
        <trans-unit id="345e9ea7c857e75dedd9edb24c232e1cab297c19" translate="yes" xml:space="preserve">
          <source>sonar</source>
          <target state="translated">소나</target>
        </trans-unit>
        <trans-unit id="da901d78a1a0e839058600ebff1da48414fe0b0b" translate="yes" xml:space="preserve">
          <source>success (the code under consideration is not relevant, e.g., global macros in C)</source>
          <target state="translated">성공 (고려중인 코드는 관련이 없습니다 (예 : C의 글로벌 매크로))</target>
        </trans-unit>
        <trans-unit id="9f93689222a8f9de7484ab15fb1be8a92b2cf878" translate="yes" xml:space="preserve">
          <source>the nloc (lines of code without comments),</source>
          <target state="translated">nloc (코멘트가없는 코드 라인),</target>
        </trans-unit>
        <trans-unit id="3f1f1a432c305a51b144e4fad7af4efab87b4a8e" translate="yes" xml:space="preserve">
          <source>to set the limit of the NLOC. Any function that
has NLOC greater than 10 will generate a warning.</source>
          <target state="translated">NLOC의 한계를 설정합니다. NLOC가 10보다 큰 함수는 경고를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="1d8e61b907e133c3825d97606a570dacee8c2fc5" translate="yes" xml:space="preserve">
          <source>token count of functions.</source>
          <target state="translated">함수의 토큰 수.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
