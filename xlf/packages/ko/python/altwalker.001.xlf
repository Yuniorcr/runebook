<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/altwalker/">
    <body>
      <group id="altwalker">
        <trans-unit id="0a9bc275becb35a8148001fbc5413496b8e2d72c" translate="yes" xml:space="preserve">
          <source>.NET Executor</source>
          <target state="translated">.NET 실행기</target>
        </trans-unit>
        <trans-unit id="a8f3f33bea9a1312e44f453fceb3de3125fc3748" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;Optional&quot;&gt;.NET Core&lt;/a&gt; (Optional)</source>
          <target state="translated">&lt;a href=&quot;Optional&quot;&gt;.NET Core&lt;/a&gt; (선택 사항)</target>
        </trans-unit>
        <trans-unit id="eaedd2973d888e4a0a51520667e98062d11ae570" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Model-based_testing&quot;&gt;Model-Based Testing&lt;/a&gt; is a testing
technique which offers a way of generating test cases based on models that describe the behaviour
(functionality) of the system under test.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Model-based_testing&quot;&gt;모델 기반 테스트&lt;/a&gt; 는 테스트중인 시스템의 동작 (기능)을 설명하는 모델을 기반으로 테스트 케이스를 생성하는 방법을 제공하는 테스트 기술입니다.</target>
        </trans-unit>
        <trans-unit id="aa88f98f43a897fa1949ad0222952e34a512dcac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; (Optional)</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; (선택 사항)</target>
        </trans-unit>
        <trans-unit id="96f3cef29424ed6ec8e63b2bca74836cdaa70def" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.python.org/&quot;&gt;Python3&lt;/a&gt; (with pip3)</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/&quot;&gt;Python3&lt;/a&gt; (pip3 포함)</target>
        </trans-unit>
        <trans-unit id="d35ecc95355536e657d65b2771c24d2644c4b985" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Executor&lt;/strong&gt;: for each step in the plan it looks up and calls the named method
from the &lt;em&gt;test code&lt;/em&gt;. In addition to the step methods, it also calls
fixture methods if present (e.g. &lt;code&gt;setUpModel&lt;/code&gt;, &lt;code&gt;tearDownModel&lt;/code&gt; ...).</source>
          <target state="translated">&lt;strong&gt;실행자&lt;/strong&gt; : 계획의 각 단계에 대해 &lt;em&gt;테스트 코드&lt;/em&gt; 에서 명명 된 메서드를 조회하고 호출합니다 . 단계 메소드에 추가하여, 존재하는 경우 고 &lt;code&gt;setUpModel&lt;/code&gt; 메소드도 호출합니다 (예 : setUpModel , &lt;code&gt;tearDownModel&lt;/code&gt; ...).</target>
        </trans-unit>
        <trans-unit id="7a383a564a9684274f5176cf1f019668bf384686" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Further Reading/Useful Links&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;추가 읽기 / 유용한 링크&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="cd3d5fe207e8107e557140311dbbdbd5f30477fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Generator&lt;/strong&gt; and &lt;strong&gt;Stop Condition&lt;/strong&gt;: used to specify how to generate a
path and to decide when a path is complete.</source>
          <target state="translated">&lt;strong&gt;생성기&lt;/strong&gt; 및 &lt;strong&gt;중지 조건&lt;/strong&gt; : 경로 생성 방법을 지정하고 경로 완료시기를 결정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5a486d3641d0cfd49e45908b66fefe3aeb18b556" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model&lt;/strong&gt;: a directed graph, supplied by the user as a json or graphml file.
A graph is composed from a list of vertices and a list of edges.</source>
          <target state="translated">&lt;strong&gt;모델&lt;/strong&gt; : 사용자가 json 또는 graphml 파일로 제공하는 유 방향 그래프입니다. 그래프는 꼭지점 목록과 가장자리 목록으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="3855b39860193266867bf717e23102431748cc28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Offline Mode&lt;/strong&gt; (using the Offline Planner): Run a path from a sequence of steps.
Usually the path is generated using the &lt;code&gt;offline&lt;/code&gt; command.</source>
          <target state="translated">&lt;strong&gt;오프라인 모드&lt;/strong&gt; (오프라인 플래너 사용) : 일련의 단계에서 경로를 실행합니다. 일반적으로 경로는 &lt;code&gt;offline&lt;/code&gt; 명령을 사용하여 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="a866ca88f0d9918e4443319463ff9841c9333053" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Online Mode&lt;/strong&gt; (using the Online Planner): Generate one step and then execute
the step, until the path is complete.</source>
          <target state="translated">&lt;strong&gt;온라인 모드&lt;/strong&gt; (온라인 플래너 사용) : 한 단계를 생성 한 다음 경로가 완료 될 때까지 단계를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="a55fa8c0af1611553471c9e7dc4fdee9be61681b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Planner&lt;/strong&gt;: uses the &lt;em&gt;model(s)&lt;/em&gt; and a pair of &lt;em&gt;generator&lt;/em&gt; and &lt;em&gt;stop condition&lt;/em&gt;
to provide a path (a sequence of steps) through the model(s).</source>
          <target state="translated">&lt;strong&gt;플래너&lt;/strong&gt; : &lt;em&gt;모델&lt;/em&gt; 과 &lt;em&gt;생성기&lt;/em&gt; 및 &lt;em&gt;정지 조건&lt;/em&gt; 쌍을 사용하여 &lt;em&gt;모델을&lt;/em&gt; 통과하는 경로 (단계 시퀀스)를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="63913d5edbdc636242b635aa03d7043f273af01a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reporter&lt;/strong&gt;: reports the output of the tests, the reporter is called on
each event (e.g. &lt;code&gt;step_start&lt;/code&gt;, &lt;code&gt;step_end&lt;/code&gt;, ...).</source>
          <target state="translated">&lt;strong&gt;Reporter&lt;/strong&gt; : 테스트의 출력을보고합니다. 각 이벤트에 대해 리포터가 호출됩니다 (예 : &lt;code&gt;step_start&lt;/code&gt; , &lt;code&gt;step_end&lt;/code&gt; , ...).</target>
        </trans-unit>
        <trans-unit id="a7b8e54247ea11d74d1d1b895fcdf6a1a6af40d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Test Code&lt;/strong&gt;: the implementation of the model(s) as code. Each model is mapped to a
class and each vertex and edge is mapped to a method.</source>
          <target state="translated">&lt;strong&gt;테스트 코드&lt;/strong&gt; : 모델을 코드로 구현합니다. 각 모델은 클래스에 매핑되고 각 꼭지점과 가장자리는 메서드에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="504ccc52545c0ef1857f7523f8645c6abb068c35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Walker&lt;/strong&gt;: the test runner. Coordinates the execution of a test asking the &lt;code&gt;Planner&lt;/code&gt;
for the next step, executing the step using the &lt;code&gt;Executor&lt;/code&gt; and reporting the progress
using the &lt;code&gt;Reporter&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Walker&lt;/strong&gt; : 테스트 러너. &lt;code&gt;Planner&lt;/code&gt; 에게 다음 단계를 요청 하고 &lt;code&gt;Executor&lt;/code&gt; 를 사용하여 단계를 실행 하고 &lt;code&gt;Reporter&lt;/code&gt; 를 사용하여 진행 상황을보고 하는 테스트 실행을 조정합니다 .</target>
        </trans-unit>
        <trans-unit id="ddaf00c3604299ce2c304f87568eff85b781b8c3" translate="yes" xml:space="preserve">
          <source>After running the command check that you correctly installed GraphWalker by running:</source>
          <target state="translated">명령을 실행 한 후 다음을 실행하여 GraphWalker를 올바르게 설치했는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="df10665200f2bbbe8d091162ade5e00d629b237d" translate="yes" xml:space="preserve">
          <source>After you install the python dependencies to generate the documentation run:</source>
          <target state="translated">설명서를 생성하기 위해 Python 종속성을 설치 한 후 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="7be3c4b7e8cceecfb68bbaaf56e96f94afe41f26" translate="yes" xml:space="preserve">
          <source>After you install the python dependencies to setup AltWalker CLI locally from code run:</source>
          <target state="translated">Python 종속성을 설치하여 코드 실행에서 로컬로 AltWalker CLI를 설정 한 후 :</target>
        </trans-unit>
        <trans-unit id="ad80b7fb6a3312a42c37521d089765c451396896" translate="yes" xml:space="preserve">
          <source>AltWalker</source>
          <target state="translated">AltWalker</target>
        </trans-unit>
        <trans-unit id="d615c51a5816d97ef7af375b66fe4410f200e64f" translate="yes" xml:space="preserve">
          <source>AltWalker Components</source>
          <target state="translated">AltWalker 구성 요소</target>
        </trans-unit>
        <trans-unit id="1aa17571f7a57558734626e73a5ea816620529c3" translate="yes" xml:space="preserve">
          <source>AltWalker also borrows the concept of test fixture from unit tests, and implements the following fixtures:
&lt;code&gt;setUpRun&lt;/code&gt;, &lt;code&gt;tearDownRun&lt;/code&gt;, &lt;code&gt;setUpModel&lt;/code&gt; and &lt;code&gt;tearDownModel&lt;/code&gt;.</source>
          <target state="translated">AltWalker는 또한 단위 테스트에서 테스트 픽스처의 개념을 차용하고 &lt;code&gt;setUpRun&lt;/code&gt; , &lt;code&gt;tearDownRun&lt;/code&gt; , &lt;code&gt;setUpModel&lt;/code&gt; 및 &lt;code&gt;tearDownModel&lt;/code&gt; 을 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="a2416f42376a908c547b2ff8018b3e446fa54de3" translate="yes" xml:space="preserve">
          <source>AltWalker has the following components:</source>
          <target state="translated">AltWalker에는 다음 구성 요소가 있습니다.</target>
        </trans-unit>
        <trans-unit id="32bbb872a206e206d85c79a1fac9e531e5433574" translate="yes" xml:space="preserve">
          <source>AltWalker is a test execution tool, which  aims to make it easy to write and run your model-based tests. AltWalker uses GraphWalker to generate a path through the models.</source>
          <target state="translated">AltWalker는 모델 기반 테스트를 쉽게 작성하고 실행할 수 있도록하는 테스트 실행 도구입니다. AltWalker는 GraphWalker를 사용하여 모델을 통과하는 경로를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="37df9fef33bce5f9f289d85623bc9a446b04f25f" translate="yes" xml:space="preserve">
          <source>AltWalker is an open source, Model-Based Testing framework. Write your tests in Python or C# and use GraphWalker to generate a path through your model.</source>
          <target state="translated">AltWalker는 오픈 소스 모델 기반 테스트 프레임 워크입니다. Python 또는 C #으로 테스트를 작성하고 GraphWalker를 사용하여 모델을 통해 경로를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="f7f256f13cdbdaa60902a03f707f87e61fe6e6c6" translate="yes" xml:space="preserve">
          <source>AltWalker is an open source, Model-Based testing framework for automating your test execution. You
design your tests as a directed graph and AltWalker executes them. It relies on
&lt;a href=&quot;http://graphwalker.github.io/&quot;&gt;GraphWalker&lt;/a&gt; to generate paths through your graph.</source>
          <target state="translated">AltWalker는 테스트 실행을 자동화하기위한 오픈 소스 모델 기반 테스트 프레임 워크입니다. 테스트를 방향성 그래프로 설계하면 AltWalker가 테스트를 실행합니다. &lt;a href=&quot;http://graphwalker.github.io/&quot;&gt;GraphWalker&lt;/a&gt; 에 의존 하여 그래프를 통해 경로를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="a41ea63fa4319baabce1ce4582a61b55581bf527" translate="yes" xml:space="preserve">
          <source>AltWalker is licensed under the GNU General Public License v3.0.</source>
          <target state="translated">AltWalker는 GNU General Public License v3.0에 따라 사용이 허가되었습니다.</target>
        </trans-unit>
        <trans-unit id="0020dcfd3005761f38569bc481d9eeed05e45fdc" translate="yes" xml:space="preserve">
          <source>AltWalker is now installed. Check that you correctly installed AltWalker by running:</source>
          <target state="translated">이제 AltWalker가 설치되었습니다. 다음을 실행하여 AltWalker를 올바르게 설치했는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="d3eb0b578e3a5a4bcc0b554a36144d27d016d6e2" translate="yes" xml:space="preserve">
          <source>Altwalker is an open source, Model-Based Testing framework. Write your tests in Python or C# and use GraphWalker to generate a path through your model.</source>
          <target state="translated">Altwalker는 오픈 소스 모델 기반 테스트 프레임 워크입니다. Python 또는 C #으로 테스트를 작성하고 GraphWalker를 사용하여 모델을 통한 경로를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="34954fcb4910538734e628d36f95db11f40ba4e6" translate="yes" xml:space="preserve">
          <source>And an &lt;strong&gt;Http Executor&lt;/strong&gt; that allows you to hook up your own executor via HTTP. You can read
more about the Http Executor on the &lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker/how-tos/custom-executor.html&quot;&gt;How to: Write your own executor&lt;/a&gt;
page.</source>
          <target state="translated">그리고 HTTP를 통해 자신의 실행기를 연결할 수 있는 &lt;strong&gt;Http Executor&lt;/strong&gt; . &lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker/how-tos/custom-executor.html&quot;&gt;방법 : 고유 한 실행 프로그램 작성&lt;/a&gt; 페이지 에서 Http 실행기에 대한 자세한 내용을 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="700b401ca52b1bd3071dc838bf11be9cdb19fc5f" translate="yes" xml:space="preserve">
          <source>CLI</source>
          <target state="translated">CLI</target>
        </trans-unit>
        <trans-unit id="0e7014134042a56f1f9c92294190363fc721cbea" translate="yes" xml:space="preserve">
          <source>Clone the repository:</source>
          <target state="translated">저장소를 복제하십시오.</target>
        </trans-unit>
        <trans-unit id="7efb19a30b32f92bbbc48973aae20b3b11becdd7" translate="yes" xml:space="preserve">
          <source>Currently AltWalker provides three executors:</source>
          <target state="translated">현재 AltWalker는 세 가지 실행기를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="15335476013023af5c0e73e556221dfeb5eb3d3e" translate="yes" xml:space="preserve">
          <source>Currently AltWalker provides two planners:</source>
          <target state="translated">현재 AltWalker는 두 가지 플래너를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">선적 서류 비치</target>
        </trans-unit>
        <trans-unit id="be37e18f09d3079dd6c4358117744bf89d5f7062" translate="yes" xml:space="preserve">
          <source>For a more detailed tutorial read the &lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker/installation.html&quot;&gt;Installation&lt;/a&gt; section from the documentation.</source>
          <target state="translated">더 자세한 자습서를 보려면 설명서에서 &lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker/installation.html&quot;&gt;설치&lt;/a&gt; 섹션을 읽어보십시오 .</target>
        </trans-unit>
        <trans-unit id="3d43662365b8632f674f128cad2ea7aad412e0ab" translate="yes" xml:space="preserve">
          <source>For the test structure it uses an Object-Oriented approach inspired by python's &lt;code&gt;unittest&lt;/code&gt; module. Every model is mapped to a class with the same name and each vertex and edge from the model is mapped to a method inside the class.</source>
          <target state="translated">테스트 구조의 경우 파이썬의 &lt;code&gt;unittest&lt;/code&gt; 모듈 에서 영감을 얻은 객체 지향 접근 방식을 사용합니다 . 모든 모델은 동일한 이름을 가진 클래스에 매핑되고 모델의 각 꼭지점과 가장자리는 클래스 내부의 메서드에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="77874bd80f0bab910bbb5f6945df8f56312b10cf" translate="yes" xml:space="preserve">
          <source>Google Style Docstring Example</source>
          <target state="translated">Google 스타일 독 스트링 예</target>
        </trans-unit>
        <trans-unit id="bb8188fdd97de3b6571d511b82dfd622f3998f96" translate="yes" xml:space="preserve">
          <source>Google Style Guide</source>
          <target state="translated">Google 스타일 가이드</target>
        </trans-unit>
        <trans-unit id="16d450e6776272899190621eab911b05a46591fa" translate="yes" xml:space="preserve">
          <source>GraphWalker CLI</source>
          <target state="translated">GraphWalker CLI</target>
        </trans-unit>
        <trans-unit id="85e1d41f96d17b0f0f36339f3dacb93cb06c65c6" translate="yes" xml:space="preserve">
          <source>If you want to work with the latest code before it&amp;rsquo;s released, install or update the code from the &lt;code&gt;develop&lt;/code&gt; branch:</source>
          <target state="translated">출시되기 전에 최신 코드로 작업하려면 &lt;code&gt;develop&lt;/code&gt; 브랜치 에서 코드를 설치하거나 업데이트하세요 .</target>
        </trans-unit>
        <trans-unit id="50079265ddc3b26b4b3dcce9410b3abcb0dec316" translate="yes" xml:space="preserve">
          <source>Install AltWalker</source>
          <target state="translated">AltWalker 설치</target>
        </trans-unit>
        <trans-unit id="3735e432380231f4af2220906f2c0622a77ea8f1" translate="yes" xml:space="preserve">
          <source>Install GraphWalker</source>
          <target state="translated">GraphWalker 설치</target>
        </trans-unit>
        <trans-unit id="25b0c3833fdb4dafff4809da702a4ebb1def5484" translate="yes" xml:space="preserve">
          <source>Install python dependencies:</source>
          <target state="translated">Python 종속성을 설치합니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="c287a1bbff0a047aa1cc86cd23da90c9abec2a7c" translate="yes" xml:space="preserve">
          <source>Java 8</source>
          <target state="translated">자바 8</target>
        </trans-unit>
        <trans-unit id="dc58f04116c6ece56d94454441370b248cc77180" translate="yes" xml:space="preserve">
          <source>Join our Gitter chat room &lt;a href=&quot;https://gitter.im/altwalker/community&quot;&gt;here&lt;/a&gt; to chat with us or with other members of the community.</source>
          <target state="translated">&lt;a href=&quot;https://gitter.im/altwalker/community&quot;&gt;여기&lt;/a&gt; Gitter 채팅룸에 가입 하여 당사 또는 커뮤니티의 다른 구성원과 채팅 하십시오 .</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="57c42222720e5f496a8df0809680b4294f03d281" translate="yes" xml:space="preserve">
          <source>Living on the edge</source>
          <target state="translated">가장자리에 살기</target>
        </trans-unit>
        <trans-unit id="b74b1c54641834f0492df83a2306a12c077a2e42" translate="yes" xml:space="preserve">
          <source>MacOS/Linux:</source>
          <target state="translated">MacOS / Linux :</target>
        </trans-unit>
        <trans-unit id="3193001c0f0d1acda4df4c521ce9f808567c048f" translate="yes" xml:space="preserve">
          <source>Make a sample project and run the tests.</source>
          <target state="translated">샘플 프로젝트를 만들고 테스트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="c7ba6bef733ed12cc3f77b8a28247ad7e65f01e5" translate="yes" xml:space="preserve">
          <source>Model-Based Testing</source>
          <target state="translated">모델 기반 테스트</target>
        </trans-unit>
        <trans-unit id="973223ffeaf0067f2183549980459ce47cb4f279" translate="yes" xml:space="preserve">
          <source>Now it supports running tests written in .NET/C# and Python3.</source>
          <target state="translated">이제 .NET / C # 및 Python3으로 작성된 테스트 실행을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="7696dbfdc5a07f91fc9b0252e53e8b7fc1068092" translate="yes" xml:space="preserve">
          <source>Offline Planner</source>
          <target state="translated">오프라인 플래너</target>
        </trans-unit>
        <trans-unit id="335266c541a9d99ce2224f1361287daf9ffa9f68" translate="yes" xml:space="preserve">
          <source>Online Planner</source>
          <target state="translated">온라인 플래너</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">개요</target>
        </trans-unit>
        <trans-unit id="f2a646f662464e161695ae3f9d8ea6ca3732ad91" translate="yes" xml:space="preserve">
          <source>Prerequisites:</source>
          <target state="translated">전제 조건 :</target>
        </trans-unit>
        <trans-unit id="fc37513e2861642bc88186db662f5cfefd3f3921" translate="yes" xml:space="preserve">
          <source>Python Executor</source>
          <target state="translated">Python 실행자</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">빠른 시작</target>
        </trans-unit>
        <trans-unit id="c322f197fb9f57f7f37b035e1d98e32c0a13f566" translate="yes" xml:space="preserve">
          <source>Read the documentation on &lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker&quot;&gt;https://altom.gitlab.io/altwalker/altwalker&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker&quot;&gt;https://altom.gitlab.io/altwalker/altwalker&lt;/a&gt; 에서 문서를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="7ec9eede60ad8e8637510a86e616531533ada02f" translate="yes" xml:space="preserve">
          <source>Running Tests</source>
          <target state="translated">테스트 실행</target>
        </trans-unit>
        <trans-unit id="d5013672dcda9176a75bf59239db1b0e7c7eeb8c" translate="yes" xml:space="preserve">
          <source>Running tests with tox inside docker</source>
          <target state="translated">Docker 내부의 tox로 테스트 실행</target>
        </trans-unit>
        <trans-unit id="e881014f5d1027fc5aeff87e5f8e28519914a9e1" translate="yes" xml:space="preserve">
          <source>Setting Up a Development Environment</source>
          <target state="translated">개발 환경 설정</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">지원하다</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">목차</target>
        </trans-unit>
        <trans-unit id="1ccfdf41146d2a54089b6b6822dc8a2cb3fd15f6" translate="yes" xml:space="preserve">
          <source>The goal when designing models is to represent the part of the system under test, usually
by one model for each functionality of your system.</source>
          <target state="translated">모델을 설계 할 때의 목표는 일반적으로 시스템의 각 기능에 대해 하나의 모델로 테스트중인 시스템의 일부를 나타내는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8bd93c1878b69a73b6386cd9d18f551661a8c3fd" translate="yes" xml:space="preserve">
          <source>Then from any command line you can access:</source>
          <target state="translated">그런 다음 모든 명령 줄에서 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af53abd46f11dcdb2c869d57c7365695ddba7c8e" translate="yes" xml:space="preserve">
          <source>There are two ways to run your tests:</source>
          <target state="translated">테스트를 실행하는 방법에는 두 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdd105cf385f4c1d385e41406571344443badc92" translate="yes" xml:space="preserve">
          <source>To see the documentation run:</source>
          <target state="translated">문서 실행을 보려면 :</target>
        </trans-unit>
        <trans-unit id="2a12a451b955c1c04d7447615e789bb90474a125" translate="yes" xml:space="preserve">
          <source>Use the following command to install AltWalker:</source>
          <target state="translated">다음 명령을 사용하여 AltWalker를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="efa4d7b0974d436ba82706d9c81864b43e82d602" translate="yes" xml:space="preserve">
          <source>Why use Model-Based Testing:</source>
          <target state="translated">모델 기반 테스트를 사용하는 이유 :</target>
        </trans-unit>
        <trans-unit id="d0a162f24e233795006248e6eceb7d0912e33599" translate="yes" xml:space="preserve">
          <source>Windows:</source>
          <target state="translated">Windows :</target>
        </trans-unit>
        <trans-unit id="e6891ae3069ea787707fdd333202f358b3f68dad" translate="yes" xml:space="preserve">
          <source>With the help of graph theory we can dynamically generate multiple test scripts. A test script is a path passing through the model from a starting point till
a condition is met.</source>
          <target state="translated">그래프 이론의 도움으로 여러 테스트 스크립트를 동적으로 생성 할 수 있습니다. 테스트 스크립트는 조건이 충족 될 때까지 시작점에서 모델을 통과하는 경로입니다.</target>
        </trans-unit>
        <trans-unit id="d996feaa5f46c0715004c58e42b1af6ca5b546c2" translate="yes" xml:space="preserve">
          <source>allows for a large number of tests to be created which results in a larger part of the system under test to be covered.</source>
          <target state="translated">많은 수의 테스트를 생성 할 수 있으므로 테스트 대상 시스템의 더 많은 부분을 다룰 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e6e30c166e6191ad073f6e275714d5b42c2ba79" translate="yes" xml:space="preserve">
          <source>dynamically generates multiple test scripts based on different conditions (like coverage or length)</source>
          <target state="translated">다양한 조건 (예 : 범위 또는 길이)에 따라 여러 테스트 스크립트를 동적으로 생성</target>
        </trans-unit>
        <trans-unit id="e1ec99496c42989cfce6d75cf8e1e1c05c19621d" translate="yes" xml:space="preserve">
          <source>the abstraction layer added by the model gives your tests a better structure</source>
          <target state="translated">모델에 의해 추가 된 추상화 계층은 테스트에 더 나은 구조를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="105643e8bc6c891dffa4c49c2a5cea052792de81" translate="yes" xml:space="preserve">
          <source>the model can be updated to reflect the requirements changes making the tests easy to maintain</source>
          <target state="translated">요구 사항 변경 사항을 반영하도록 모델을 업데이트하여 테스트를 쉽게 유지 관리 할 수 ​​있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
