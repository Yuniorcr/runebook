<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/av/">
    <body>
      <group id="av">
        <trans-unit id="a904d18b8392ae7217a99dd80d10544884f8b9a2" translate="yes" xml:space="preserve">
          <source>Alternative installation methods</source>
          <target state="translated">대체 설치 방법</target>
        </trans-unit>
        <trans-unit id="6b2125538cd18817a07a94d43ee7b8adfec664a8" translate="yes" xml:space="preserve">
          <source>And if you want to build from the absolute source (for development or testing):</source>
          <target state="translated">절대 소스에서 빌드하려는 경우 (개발 또는 테스트 용) :</target>
        </trans-unit>
        <trans-unit id="1396fba7cf549cf833a11e054ef5b370181152ec" translate="yes" xml:space="preserve">
          <source>Another way of installing PyAV is via &lt;a href=&quot;https://conda-forge.github.io/&quot;&gt;conda-forge&lt;/a&gt;:</source>
          <target state="translated">PyAV를 설치하는 또 다른 방법은 &lt;a href=&quot;https://conda-forge.github.io/&quot;&gt;conda-forge를 사용하는 것입니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="19174812bc39647b418f1d6b59a95ff577fad29b" translate="yes" xml:space="preserve">
          <source>But where you can't work without it, PyAV is a critical tool.</source>
          <target state="translated">그러나 그것 없이는 작업 할 수없는 곳에서 PyAV는 중요한 도구입니다.</target>
        </trans-unit>
        <trans-unit id="7d4502c56320dc8ff6b7d59b90a76f7478a2da82" translate="yes" xml:space="preserve">
          <source>Due to the complexity of the dependencies, PyAV is not always the easiest Python package to install from source. Since release 8.0.0 binary wheels are provided on &lt;a href=&quot;https://pypi.org/project/av&quot;&gt;PyPI&lt;/a&gt; for Linux, Mac and Windows linked against a modern FFmpeg. You can install these wheels by running:</source>
          <target state="translated">종속성의 복잡성으로 인해 PyAV가 항상 소스에서 설치하기 가장 쉬운 Python 패키지는 아닙니다. 릴리스 8.0.0부터 최신 FFmpeg에 연결된 Linux, Mac 및 Windows 용 &lt;a href=&quot;https://pypi.org/project/av&quot;&gt;PyPI&lt;/a&gt; 에서 바이너리 휠이 제공됩니다 . 다음을 실행하여 이러한 휠을 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e28fdbdb978978c7753e85a08cf8c78c4d508985" translate="yes" xml:space="preserve">
          <source>Have fun, &lt;a href=&quot;http://pyav.org/docs&quot;&gt;read the docs&lt;/a&gt;, &lt;a href=&quot;https://gitter.im/PyAV-Org&quot;&gt;come chat with us&lt;/a&gt;, and good luck!</source>
          <target state="translated">재미있게 &lt;a href=&quot;http://pyav.org/docs&quot;&gt;보내시고&lt;/a&gt; , 문서를 읽고, &lt;a href=&quot;https://gitter.im/PyAV-Org&quot;&gt;저희와 채팅을하세요&lt;/a&gt; . 행운을 빕니다!</target>
        </trans-unit>
        <trans-unit id="fc1576159d3dc6c02ccd3f079a479c98ddcbdb01" translate="yes" xml:space="preserve">
          <source>If you want to use your existing FFmpeg/Libav, the C-source version of PyAV is on &lt;a href=&quot;https://pypi.org/project/av&quot;&gt;PyPI&lt;/a&gt; too:</source>
          <target state="translated">기존 FFmpeg / Libav를 사용하려면 PyAV의 C 소스 버전 도 &lt;a href=&quot;https://pypi.org/project/av&quot;&gt;PyPI에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="4eb1348c0e2c582cd5b7f9ab64d73581507ad610" translate="yes" xml:space="preserve">
          <source>PyAV</source>
          <target state="translated">PyAV</target>
        </trans-unit>
        <trans-unit id="3d049f032f581f7cc4bda1185838f6521e01baf4" translate="yes" xml:space="preserve">
          <source>PyAV is a Pythonic binding for the &lt;a href=&quot;http://ffmpeg.org/&quot;&gt;FFmpeg&lt;/a&gt; libraries. We aim to provide all of the power and control of the underlying library, but manage the gritty details as much as possible.</source>
          <target state="translated">PyAV는 &lt;a href=&quot;http://ffmpeg.org/&quot;&gt;FFmpeg&lt;/a&gt; 라이브러리에 대한 Pythonic 바인딩입니다 . 우리는 기본 라이브러리의 모든 권한과 제어 기능을 제공하는 것을 목표로하지만 가능한 한 세부 사항을 관리합니다.</target>
        </trans-unit>
        <trans-unit id="45bc0b249b25b9cc0a8ec7a8e8f7a35ce0366de9" translate="yes" xml:space="preserve">
          <source>PyAV is for direct and precise access to your media via containers, streams, packets, codecs, and frames. It exposes a few transformations of that data, and helps you get your data to/from other packages (e.g. Numpy and Pillow).</source>
          <target state="translated">PyAV는 컨테이너, 스트림, 패킷, 코덱 및 프레임을 통해 미디어에 직접적이고 정확하게 액세스하기위한 것입니다. 해당 데이터의 몇 가지 변환을 노출하고 다른 패키지 (예 : Numpy 및 Pillow)로 /에서 데이터를 가져 오는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="44240bfca9a282efe180a6bb4d1ea5924cb394bf" translate="yes" xml:space="preserve">
          <source>Pythonic bindings for FFmpeg's libraries.</source>
          <target state="translated">FFmpeg의 라이브러리에 대한 Pythonic 바인딩.</target>
        </trans-unit>
        <trans-unit id="f60d4ee6164ccea2e3ab458d0390f3745c934ce8" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://conda.io/docs/install/quick.html&quot;&gt;Conda quick install&lt;/a&gt; docs to get started with (mini)Conda.</source>
          <target state="translated">(mini) Conda를 시작 &lt;a href=&quot;https://conda.io/docs/install/quick.html&quot;&gt;하려면 Conda 빠른 설치&lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f7f1b8fbb95c4c0aa365556081dc681517c77ff5" translate="yes" xml:space="preserve">
          <source>This power does come with some responsibility as working with media is horrendously complicated and PyAV can't abstract it away or make all the best decisions for you. If the &lt;code&gt;ffmpeg&lt;/code&gt; command does the job without you bending over backwards, PyAV is likely going to be more of a hindrance than a help.</source>
          <target state="translated">미디어 작업이 끔찍하게 복잡하고 PyAV가이를 추상화하거나 최선의 결정을 내릴 수 없기 때문에이 힘에는 약간의 책임이 따릅니다. &lt;code&gt;ffmpeg&lt;/code&gt; 명령이 뒤로 구부리지 않고 작업을 수행하는 경우 PyAV는 도움이되기보다는 방해가 될 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
