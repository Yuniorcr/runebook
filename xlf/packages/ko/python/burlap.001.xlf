<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/burlap/">
    <body>
      <group id="burlap">
        <trans-unit id="071df622a0393b479e4649f2fb3b5d1e8947fcf0" translate="yes" xml:space="preserve">
          <source>A role is a special type of task that defines the servers that the following tasks should apply to.</source>
          <target state="translated">역할은 다음 작업이 적용되어야하는 서버를 정의하는 특별한 유형의 작업입니다.</target>
        </trans-unit>
        <trans-unit id="4aa210a22ab10034165d3b8f94cdc675a1aec013" translate="yes" xml:space="preserve">
          <source>A role is defined in a top-level directory called 'roles', where every sub-directory represents the name of a role.</source>
          <target state="translated">역할은 'roles'라는 최상위 디렉토리에 정의되며, 여기서 모든 하위 디렉토리는 역할의 이름을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c039fa1f69342f73b48935b06b02d1b070e30544" translate="yes" xml:space="preserve">
          <source>A task is a Fabric command which can perform an arbitrary operation.</source>
          <target state="translated">태스크는 임의의 작업을 수행 할 수있는 Fabric 명령입니다.</target>
        </trans-unit>
        <trans-unit id="571d0b0ca0d7cd1329b14ab2678dcb8e0bf8e280" translate="yes" xml:space="preserve">
          <source>Basic call format:</source>
          <target state="translated">기본 통화 형식 :</target>
        </trans-unit>
        <trans-unit id="f08087513cd1ad2007a32f6fd55550f1645fbf7d" translate="yes" xml:space="preserve">
          <source>Burlap - configuration management designed for simplicity and speed</source>
          <target state="translated">Burlap-단순성과 속도를 위해 설계된 구성 관리</target>
        </trans-unit>
        <trans-unit id="e29946f8d3f9d6632469882a5796f555a032fe10" translate="yes" xml:space="preserve">
          <source>Burlap is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_open-source_configuration_management_software&quot;&gt;configuration management&lt;/a&gt;
tool and framework for deploying software to servers.</source>
          <target state="translated">Burlap은 서버에 소프트웨어를 배포하기위한 &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_open-source_configuration_management_software&quot;&gt;구성 관리&lt;/a&gt; 도구 및 프레임 워크입니다.</target>
        </trans-unit>
        <trans-unit id="0f13fa4eb511f56b13bb8d0ae5deb5dd6ddb3dd3" translate="yes" xml:space="preserve">
          <source>Burlap retrieves this manifest for each satchel before and after the deployment, and calculates the difference to determine which satchels have outstanding changes with need to be deployed.</source>
          <target state="translated">Burlap은 배포 전후의 각 가방에 대해이 매니페스트를 검색하고 차이를 계산하여 배포해야하는 눈에 띄는 변경 사항이있는 가방을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="806d60f179cf196709d4181e58bf0be75c7f9371" translate="yes" xml:space="preserve">
          <source>Each satchel defines how its changes are tracked, which are reported in the form of a manifest.</source>
          <target state="translated">각 가방은 매니페스트 형식으로보고되는 변경 사항을 추적하는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="97558c3f3248bde9c63b2de8baa17d5aa7513939" translate="yes" xml:space="preserve">
          <source>Fabric commands for simplifying server deployments</source>
          <target state="translated">서버 배포를 단순화하기위한 패브릭 명령</target>
        </trans-unit>
        <trans-unit id="66fd20477dc2967704d6439dbad68b3c046ea839" translate="yes" xml:space="preserve">
          <source>For example, a Django project hosted on Apache would require the Apache configuration to be deployed before any Django project code.</source>
          <target state="translated">예를 들어 Apache에서 호스팅되는 Django 프로젝트의 경우 Django 프로젝트 코드보다 먼저 Apache 구성을 배포해야합니다.</target>
        </trans-unit>
        <trans-unit id="d93aeb167f73ebf19ed49a7fdd24cc089f01bcbd" translate="yes" xml:space="preserve">
          <source>For example, all the tasks relating to Apache are in the Apache satchel, so to stop, deploy your Apache configuration, and then restart the staging server, you would do:</source>
          <target state="translated">예를 들어 Apache와 관련된 모든 작업은 Apache satchel에 있으므로 중지하고 Apache 구성을 배포 한 다음 스테이징 서버를 다시 시작하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="e1861d973612355a905c7684c2ecdec64ba6884f" translate="yes" xml:space="preserve">
          <source>However, it gets even simpler than this. If you add &lt;code&gt;apache&lt;/code&gt; to the &lt;code&gt;services&lt;/code&gt; list inside &lt;code&gt;roles/staging/settings.yaml&lt;/code&gt;, then Burlap will track changes and automatically deploy them when you run:</source>
          <target state="translated">그러나 이것보다 훨씬 간단 해집니다. &lt;code&gt;roles/staging/settings.yaml&lt;/code&gt; 내부 의 &lt;code&gt;services&lt;/code&gt; 목록 에 &lt;code&gt;apache&lt;/code&gt; 를 추가하면 Burlap은 변경 사항을 추적하고 실행할 때 자동으로 배포합니다.</target>
        </trans-unit>
        <trans-unit id="f8b101e7e742c02259b38744f2d9ce33ea4162e2" translate="yes" xml:space="preserve">
          <source>However, this auto-deployer can't foresee all use cases, and should exceptions arise, you can reset Burlap's last manifest, implicitly telling it that, &quot;Everything that needs to be deployed has been deployed&quot;, but running:</source>
          <target state="translated">그러나이 자동 배포자는 모든 사용 사례를 예측할 수 없으며 예외가 발생하는 경우 Burlap의 마지막 매니페스트를 재설정하여 암시 적으로 &quot;배포해야하는 모든 항목이 배포되었습니다.&quot;라고 말하지만 다음을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ffbf5dfe694703a825bf061d37452c242da06484" translate="yes" xml:space="preserve">
          <source>Install the package via pip with:</source>
          <target state="translated">다음을 사용하여 pip를 통해 패키지를 설치합니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="06a245119083633b111504481495ae78d34016b5" translate="yes" xml:space="preserve">
          <source>It's written in Python and is built ontop of &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Fabric&lt;/a&gt; to run commands remotely over SSH.</source>
          <target state="translated">Python으로 작성되었으며 &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Fabric&lt;/a&gt; 위에 구축되어 SSH를 통해 원격으로 명령을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="921c77dab2feda762eb51675087c94c04f8a3aa0" translate="yes" xml:space="preserve">
          <source>Most Burlap tasks also support a &lt;code&gt;verbose&lt;/code&gt; parameter, which will activate additional debugging info as defined by each satchel. It's activated like:</source>
          <target state="translated">대부분의 Burlap 작업은 각 가방에 정의 된 추가 디버깅 정보를 활성화 하는 &lt;code&gt;verbose&lt;/code&gt; 매개 변수 도 지원합니다 . 다음과 같이 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="02f242b41b6b6bdb5ac091ad5be43c499c8fd034" translate="yes" xml:space="preserve">
          <source>Much of the code is also heavily influenced by &lt;a href=&quot;https://github.com/fabtools/fabtools&quot;&gt;Fabtools&lt;/a&gt;, another Fabric-based toolkit.</source>
          <target state="translated">대부분의 코드는 또 다른 Fabric 기반 툴킷 인 &lt;a href=&quot;https://github.com/fabtools/fabtools&quot;&gt;Fabtools의&lt;/a&gt; 영향을 많이받습니다 .</target>
        </trans-unit>
        <trans-unit id="1afa8ef3b3920208787c163481a39f125ffcff26" translate="yes" xml:space="preserve">
          <source>Nearly all of Burlap's built-in tasks run Bash commands behind the scenes. Therefore, by activating dryrun mode and hiding all superfluous output except the generated Bash commands,
it's possible to convert a Burlap call to a Bash script. To do this, set the environment variable &lt;code&gt;BURLAP_COMMAND_PREFIX=0&lt;/code&gt;, activate dryrun, and capture the output to a file. e.g.</source>
          <target state="translated">거의 모든 Burlap의 내장 작업은 배후에서 Bash 명령을 실행합니다. 따라서 드라 이런 모드를 활성화하고 생성 된 Bash 명령을 제외한 모든 불필요한 출력을 숨기면 Burlap 호출을 Bash 스크립트로 변환 할 수 있습니다. 이렇게하려면 환경 변수 &lt;code&gt;BURLAP_COMMAND_PREFIX=0&lt;/code&gt; 을 설정하고 드라 이런을 활성화 한 다음 출력을 파일에 캡처합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">개요</target>
        </trans-unit>
        <trans-unit id="144bd1d7c92fa3b9b71e5552a4182432fe066281" translate="yes" xml:space="preserve">
          <source>Python 2.7 is supported through version 0.9.54.</source>
          <target state="translated">Python 2.7은 버전 0.9.54를 통해 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="5768eb7852de3a712830ec6f18b8a013f921df9c" translate="yes" xml:space="preserve">
          <source>Quickstart &amp;amp; Usage</source>
          <target state="translated">빠른 시작 및 사용</target>
        </trans-unit>
        <trans-unit id="888862c499bb90c328ba2c5102e90182d554c0bc" translate="yes" xml:space="preserve">
          <source>Satchels can define dependencies, telling Burlap to run certain tasks in a specific order.</source>
          <target state="translated">Satchel은 종속성을 정의하여 Burlap에 특정 작업을 특정 순서로 실행하도록 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc282dfb13bcb4eed49a5edac8f0d95fbf33c600" translate="yes" xml:space="preserve">
          <source>Tasks are organized in classes called Satchels. This allows them to share state and have a more organized naming scheme.</source>
          <target state="translated">작업은 Satchels라는 클래스로 구성됩니다. 이를 통해 상태를 공유하고보다 체계적인 명명 체계를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b6e783b37f58c0a39616a1f31d33e15b40f3bff" translate="yes" xml:space="preserve">
          <source>The file &lt;code&gt;settings.yaml&lt;/code&gt; inside this directory defines all the settings for this role.</source>
          <target state="translated">이 디렉터리 내의 &lt;code&gt;settings.yaml&lt;/code&gt; 파일 은이 역할에 대한 모든 설정을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="d2e2aa40819cef96aa239a7f87257dc5eae3b3e1" translate="yes" xml:space="preserve">
          <source>There can be an arbitrary number of tasks called:</source>
          <target state="translated">다음과 같은 임의의 수의 작업이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ee3cb819ec00c5ecbd621b6e2a7f68854485fda" translate="yes" xml:space="preserve">
          <source>This allows a role to contain an arbitrary number of satchels, whose deployment can be calculated automatically.</source>
          <target state="translated">이렇게하면 배포가 자동으로 계산 될 수있는 임의의 수의 가방을 역할에 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e36bf58f80ef0a65ccf6ce325c372c3590ff725" translate="yes" xml:space="preserve">
          <source>To create a base Burlap skeleton project with sample roles, run &lt;code&gt;burlap-admin.py skel myproject&lt;/code&gt;.</source>
          <target state="translated">샘플 역할로 기본 Burlap 스켈레톤 프로젝트를 생성하려면 &lt;code&gt;burlap-admin.py skel myproject&lt;/code&gt; 를 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="7984718e550ed5ab4ef4c2b917c53d2ff15d2f5e" translate="yes" xml:space="preserve">
          <source>To run a specific test in a specific environment:</source>
          <target state="translated">특정 환경에서 특정 테스트를 실행하려면 :</target>
        </trans-unit>
        <trans-unit id="95b531edf9cc7709cdf7d6bd106c182ff4f16c4a" translate="yes" xml:space="preserve">
          <source>To run all tests on a specific environment:</source>
          <target state="translated">특정 환경에서 모든 테스트를 실행하려면 :</target>
        </trans-unit>
        <trans-unit id="635c713dc6b2693215e58c68dd512e5b68221612" translate="yes" xml:space="preserve">
          <source>To run all tests:</source>
          <target state="translated">모든 테스트를 실행하려면 :</target>
        </trans-unit>
        <trans-unit id="276ca3b25a410058e97fe177bbba7e6c3d27610d" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;boto&lt;/code&gt; package for AWS support, install with &lt;code&gt;pip install burlap[aws]&lt;/code&gt;.</source>
          <target state="translated">AWS 지원에 &lt;code&gt;boto&lt;/code&gt; 패키지 를 사용하려면 &lt;code&gt;pip install burlap[aws]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6390870b029b919640387a72d83cdc2f3d32703a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;https://www.chef.io/&quot;&gt;Chef&lt;/a&gt; or &lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; that target large &quot;web-scale&quot; platforms at the expense of great complexity, Burlap targets small- to medium-scale platforms and keeps its configuration simple.</source>
          <target state="translated">복잡성을 크게 희생하면서 대규모 &quot;웹 규모&quot;플랫폼을 대상으로하는 &lt;a href=&quot;https://www.chef.io/&quot;&gt;Chef&lt;/a&gt; 또는 &lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; 과 달리 Burlap은 중소 규모 플랫폼을 대상으로하며 구성을 단순하게 유지합니다.</target>
        </trans-unit>
        <trans-unit id="c3eb31346b9b5770228bda28fa1c1291a12b5f2d" translate="yes" xml:space="preserve">
          <source>Virtually all Burlap tasks support a &lt;code&gt;dryrun&lt;/code&gt; parameter, which, when set, will only output the command without applying any substantial changes to the server. It's activated like:</source>
          <target state="translated">사실상 모든 Burlap 작업 은 설정시 서버에 실질적인 변경 사항을 적용하지 않고 명령 만 출력 하는 &lt;code&gt;dryrun&lt;/code&gt; 매개 변수를 지원 합니다. 다음과 같이 활성화됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
