<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/ctypesgen/">
    <body>
      <group id="ctypesgen">
        <trans-unit id="502f708941eaafa7a9f3d5709939f68a6c323d23" translate="yes" xml:space="preserve">
          <source>Python wrapper generator for ctypes</source>
          <target state="translated">ctypes 용 Python 래퍼 생성기</target>
        </trans-unit>
        <trans-unit id="a97fc50961982b66f2ceba6ebf02055171e28534" translate="yes" xml:space="preserve">
          <source>ctypesgen can also output JSON, which can be used with Mork, which generates bindings for Lua, using the alien module (which binds libffi to Lua).</source>
          <target state="translated">ctypesgen은 (libffi를 Lua에 바인딩하는) alien 모듈을 사용하여 Lua에 대한 바인딩을 생성하는 Mork와 함께 사용할 수있는 JSON을 출력 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef210a44a4fd297c37d5928755338f6c0e35831d" translate="yes" xml:space="preserve">
          <source>ctypesgen reads parses c header files and creates a wrapper for libraries based on what it finds.  Preprocessor macros are handled in a manner consistent with typical c code.  Preprocessor macro functions are translated into Python functions that are then made available to the user of the newly-generated Python wrapper library.</source>
          <target state="translated">ctypesgen은 c 헤더 파일을 구문 분석하고 찾은 내용에 따라 라이브러리에 대한 래퍼를 만듭니다. 전 처리기 매크로는 일반적인 c 코드와 일치하는 방식으로 처리됩니다. 전 처리기 매크로 함수는 새로 생성 된 Python 래퍼 라이브러리의 사용자가 사용할 수있는 Python 함수로 변환됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
