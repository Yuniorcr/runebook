<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/gmic/">
    <body>
      <group id="gmic">
        <trans-unit id="dddc12d296d8c08585fb2901dfbb06af6762ff5f" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;0&lt;/sup&gt; ie. &lt;code&gt;gmic.GmicImage(bytes, w, h, d, s)&lt;/code&gt;,  &lt;code&gt;gmic.run(..., &quot;commands&quot;)&lt;/code&gt;</source>
          <target state="translated">&lt;sup&gt;0&lt;/sup&gt; 즉. &lt;code&gt;gmic.GmicImage(bytes, w, h, d, s)&lt;/code&gt; , &lt;code&gt;gmic.run(..., &quot;commands&quot;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6a169c3eed142b33ea86caf82bcd4b4ca83236ba" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1&lt;/sup&gt; ie. from this project's tarball or using &lt;code&gt;pip install gmic&lt;/code&gt; with the (possibly default) &quot;from source&quot; option. Hack the setup.py if needed, should work well with just &lt;code&gt;libz&lt;/code&gt; installed, preferably with &lt;code&gt;libfftw3&lt;/code&gt; too to support all sizes of images. Compiling with &lt;code&gt;gcc&lt;/code&gt; or &lt;code&gt;clang&lt;/code&gt; should work well.</source>
          <target state="translated">&lt;sup&gt;1&lt;/sup&gt; ie. 이 프로젝트의 tarball에서 또는 &quot;from source&quot;옵션과 함께 &lt;code&gt;pip install gmic&lt;/code&gt; 을 사용합니다. 필요한 경우 setup.py를 해킹하면 &lt;code&gt;libz&lt;/code&gt; 가 설치된 상태에서 잘 작동합니다 . 모든 크기의 이미지를 지원하려면 &lt;code&gt;libfftw3&lt;/code&gt; 도 좋습니다 . &lt;code&gt;gcc&lt;/code&gt; 또는 &lt;code&gt;clang&lt;/code&gt; 으로 컴파일하면 잘 작동합니다.</target>
        </trans-unit>
        <trans-unit id="5d53426e049c648fc314a99b76367c1575be3bb5" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt; enabled if related library is found at compile time, using found &lt;code&gt;pkg-config&lt;/code&gt; executable.</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt; 는 발견 된 &lt;code&gt;pkg-config&lt;/code&gt; 실행 파일을 사용하여 컴파일 시간에 관련 라이브러리를 찾은 경우 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="76c23c088c13d775842d65bbb6ee5a2265912607" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;3&lt;/sup&gt; useful for samples retrieval and getting the latest filters collection updated; libcurl is embedded in the wheel package. If failing, any runtime-findable &lt;code&gt;curl&lt;/code&gt; executable will be used, see &lt;a href=&quot;https://github.com/myselfhimself/gmic-py/issues/9&quot;&gt;this issue&lt;/a&gt;; at anytime, use the &lt;code&gt;network 0&lt;/code&gt; G'MIC command to disable internet access</source>
          <target state="translated">&lt;sup&gt;3&lt;/sup&gt; 샘플 검색 및 최신 필터 컬렉션 업데이트에 유용합니다. libcurl은 wheel 패키지에 포함되어 있습니다. 실패하면 런타임에서 찾을 수있는 모든 &lt;code&gt;curl&lt;/code&gt; 실행 파일이 사용됩니다 . &lt;a href=&quot;https://github.com/myselfhimself/gmic-py/issues/9&quot;&gt;이 문제를&lt;/a&gt; 참조하십시오 . 언제든지 &lt;code&gt;network 0&lt;/code&gt; G'MIC 명령을 사용하여 인터넷 액세스를 비활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="af7d4584e00133d121ec3c56fe524537fb59fbe0" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;m&lt;/sup&gt; those are actually manylinux2010 and manylinux2014 targets. Manylinux1 has been dropped</source>
          <target state="translated">&lt;sup&gt;m&lt;/sup&gt; 그것들은 실제로 manylinux2010 및 manylinux2014 대상입니다. Manylinux1이 삭제되었습니다.</target>
        </trans-unit>
        <trans-unit id="5ab531187f73217f3bd71f77e2cf567280e7c744" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;w&lt;/sup&gt; Until it is ready, you can try building you own gmic-py builds on Windows using &lt;a href=&quot;https://www.msys2.org/&quot;&gt;MSYS2&lt;/a&gt;</source>
          <target state="translated">&lt;sup&gt;w&lt;/sup&gt; 준비가 될 때까지 MSYS2를 사용하여 Windows에서 gmic-py 빌드를 직접 빌드 해 &lt;a href=&quot;https://www.msys2.org/&quot;&gt;볼 수 있습니다.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="51eef8c276a4c3836ed24fae4bedd4c21bcbf3da" translate="yes" xml:space="preserve">
          <source>Add Windows support</source>
          <target state="translated">Windows 지원 추가</target>
        </trans-unit>
        <trans-unit id="61c0d1a1dd98648560c619c50fcc8d117a168047" translate="yes" xml:space="preserve">
          <source>Add numpy nparray I/O support with automatic values (de-)interlacing</source>
          <target state="translated">자동 값 (디) 인터 레이싱으로 numpy nparray I / O 지원 추가</target>
        </trans-unit>
        <trans-unit id="d770315f45b72faa5b8cad64e24b1d0144763293" translate="yes" xml:space="preserve">
          <source>Basic gmic-py&lt;sup&gt;0&lt;/sup&gt;</source>
          <target state="translated">기본 gmic-py &lt;sup&gt;0&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="dc16be62fee4a94e702a3e95b7c3c08aa65d9621" translate="yes" xml:space="preserve">
          <source>Binary Python3 bindings for the G'MIC C++ image processing library</source>
          <target state="translated">G'MIC C ++ 이미지 처리 라이브러리에 대한 바이너리 Python3 바인딩</target>
        </trans-unit>
        <trans-unit id="53909916abe8e36b12067bc9f8bd30a01c991206" translate="yes" xml:space="preserve">
          <source>Build from source&lt;sup&gt;1&lt;/sup&gt;</source>
          <target state="translated">소스 &lt;sup&gt;1&lt;/sup&gt; 에서 빌드&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="55d71d005605b731983e1212cab3067f5e36bf4a" translate="yes" xml:space="preserve">
          <source>Build target</source>
          <target state="translated">빌드 대상</target>
        </trans-unit>
        <trans-unit id="dc200f04e61b9633a6f612178668e0a69ee8fcf9" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;pip install -e GITHUB_URL&lt;/code&gt; installable Python package for GMIC, with an API very similar to the C++ library: &lt;code&gt;gmic_instance.run(...)&lt;/code&gt;, &lt;code&gt;gmic(...)&lt;/code&gt; and matching exception types. Binary dependencies &lt;a href=&quot;https://python-packaging-tutorial.readthedocs.io/en/latest/binaries_dependencies.html&quot;&gt;should be bundled as in this tutorial&lt;/a&gt;.</source>
          <target state="translated">C ++ 라이브러리와 매우 유사한 API &lt;code&gt;gmic_instance.run(...)&lt;/code&gt; , &lt;code&gt;gmic(...)&lt;/code&gt; 및 일치하는 예외 유형 )를 사용하여 GMIC 용 &lt;code&gt;pip install -e GITHUB_URL&lt;/code&gt; 설치 가능 Python 패키지를 만듭니다 . 바이너리 종속성 &lt;a href=&quot;https://python-packaging-tutorial.readthedocs.io/en/latest/binaries_dependencies.html&quot;&gt;은이 튜토리얼에서와 같이 번들로 제공되어야합니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="16daaf45dbccb76f84ff3417cda19735ad9a82f4" translate="yes" xml:space="preserve">
          <source>Create documented examples for various application domains. WIP</source>
          <target state="translated">다양한 애플리케이션 도메인에 대한 문서화 된 예제를 만듭니다. WIP</target>
        </trans-unit>
        <trans-unit id="22e088c94c6ffcaeddd2f4f7896715f92c9b7854" translate="yes" xml:space="preserve">
          <source>Example script</source>
          <target state="translated">예제 스크립트</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">예</target>
        </trans-unit>
        <trans-unit id="48788035ab03d889e1c66d834c67b8483e99dcd9" translate="yes" xml:space="preserve">
          <source>Github CI Ubuntu Linux 32&amp;amp;64bit &lt;sup&gt;1&lt;/sup&gt;</source>
          <target state="translated">Github CI Ubuntu Linux 32 및 64 비트 &lt;sup&gt;1&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="057684fa8d59b9176dd83ad4eb44c9a7e77c19aa" translate="yes" xml:space="preserve">
          <source>If your machine has &lt;code&gt;libopencv&lt;/code&gt; installed and your gmic-py was compiled from source (ie. &lt;code&gt;python setup.py build&lt;/code&gt;), it will be dynamically linked.</source>
          <target state="translated">시스템에 &lt;code&gt;libopencv&lt;/code&gt; 가 설치되어 있고 gmic-py가 소스 (예 : &lt;code&gt;python setup.py build&lt;/code&gt; ) 에서 컴파일 된 경우 동적으로 연결됩니다.</target>
        </trans-unit>
        <trans-unit id="051fb486c677c1880739b8de8dc75e8707b467de" translate="yes" xml:space="preserve">
          <source>In a separate repository, create a Blender Plugin, leveraging the Python library and exposing:</source>
          <target state="translated">별도의 저장소에서 Python 라이브러리를 활용하고 노출하는 Blender 플러그인을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="6aab6d7cc3549cd6df747125b47500bf16490831" translate="yes" xml:space="preserve">
          <source>Move the package to official Python package repositories. DONE</source>
          <target state="translated">패키지를 공식 Python 패키지 저장소로 이동합니다. 끝난</target>
        </trans-unit>
        <trans-unit id="f6c6ec2efc1d3d336a84876b188204568fcaf266" translate="yes" xml:space="preserve">
          <source>Official platform support</source>
          <target state="translated">공식 플랫폼 지원</target>
        </trans-unit>
        <trans-unit id="27ceb60ff69ef41a393942a25dcdea0ce5b6c844" translate="yes" xml:space="preserve">
          <source>OpenCV</source>
          <target state="translated">OpenCV</target>
        </trans-unit>
        <trans-unit id="43a1f1cb5c6733a846b09b4e509e070c6be48693" translate="yes" xml:space="preserve">
          <source>OpenMP</source>
          <target state="translated">OpenMP</target>
        </trans-unit>
        <trans-unit id="e33d9b1bece2aae284ed4b5e218b7cf1a9deb396" translate="yes" xml:space="preserve">
          <source>Pre-compiled Linux i686 &amp;amp; x86_64 py3.5-3.8 (gcc)&lt;sup&gt;m&lt;/sup&gt;</source>
          <target state="translated">사전 컴파일 된 Linux i686 및 x86_64 py3.5-3.8 (gcc) &lt;sup&gt;m&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="d4cbf4eb9ce3ac189abbd6f76321544a51fbf5c0" translate="yes" xml:space="preserve">
          <source>Pre-compiled MacOS 64 py3.5-3.8 (clang)</source>
          <target state="translated">사전 컴파일 된 MacOS 64 py3.5-3.8 (clang)</target>
        </trans-unit>
        <trans-unit id="b69fc2160d067b8a1ba97bc6b19ec7d8dd9fdeef" translate="yes" xml:space="preserve">
          <source>Python binding for G'MIC - A Full-Featured Open-Source Framework for Image Processing</source>
          <target state="translated">G'MIC 용 Python 바인딩-이미지 처리를위한 완전한 기능의 오픈 소스 프레임 워크</target>
        </trans-unit>
        <trans-unit id="b03d9c757b183e9b8e8bb7321e5b020ee306ad7e" translate="yes" xml:space="preserve">
          <source>Q1-Q3 2020</source>
          <target state="translated">2020 년 1 분기 ~ 3 분기</target>
        </trans-unit>
        <trans-unit id="44102760384cb5c7edb6e9b877fd9bb0d933131f" translate="yes" xml:space="preserve">
          <source>Q2-Q3 2020</source>
          <target state="translated">2020 년 2 분기</target>
        </trans-unit>
        <trans-unit id="a35763a8813107397d06d0375706968f431cdb62" translate="yes" xml:space="preserve">
          <source>Q4 2019</source>
          <target state="translated">2019 년 4 분기</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">빠른 시작</target>
        </trans-unit>
        <trans-unit id="8119e7f319c9927b2cee6e398f0a78babf7eebdc" translate="yes" xml:space="preserve">
          <source>Roadmap</source>
          <target state="translated">로드맵</target>
        </trans-unit>
        <trans-unit id="0b1e3c92bb31471f40293792bee55d277de108e5" translate="yes" xml:space="preserve">
          <source>The aim of this project is to provide an official Python 3 package of the G'MIC image processing library, with its platform-specific binaries bundled or auto-compiled.
When this matures, running &lt;code&gt;pip install gmic-py&lt;/code&gt; should be all you need to get ready and use G'MIC within data-science, games, video editing, texture editing etc.. Python scripts.</source>
          <target state="translated">이 프로젝트의 목표는 G'MIC 이미지 처리 라이브러리의 공식 Python 3 패키지를 제공하는 것이며, 플랫폼 별 바이너리가 번들로 제공되거나 자동 컴파일됩니다. 이것이 성숙 &lt;code&gt;pip install gmic-py&lt;/code&gt; 실행 하는 것만으로도 데이터 과학, 게임, 비디오 편집, 텍스처 편집 등에서 G'MIC를 준비하고 사용할 수 있습니다. Python 스크립트.</target>
        </trans-unit>
        <trans-unit id="1b4b2833aa4dc24a2635f4eead73660cc15b9d1a" translate="yes" xml:space="preserve">
          <source>This project is a work in progress and lives under the CeCILL license (similar to GNU Public License).</source>
          <target state="translated">이 프로젝트는 진행중인 작업이며 CeCILL 라이선스 (GNU Public License와 유사)하에 있습니다.</target>
        </trans-unit>
        <trans-unit id="367e740d92a6cd57e61969fd91e64c26c012e134" translate="yes" xml:space="preserve">
          <source>Through &lt;code&gt;Ctypes&lt;/code&gt; dynamic binding on an Ubuntu docker image using Python 2-3. DONE in &lt;a href=&quot;https://github.com/dtschump/gmic-py/tree/ctypes_archive&quot;&gt;ctypes_archive branch&lt;/a&gt;.</source>
          <target state="translated">Python 2-3을 사용하여 Ubuntu &lt;code&gt;Ctypes&lt;/code&gt; 이미지에서 Ctypes 동적 바인딩을 통해 . &lt;a href=&quot;https://github.com/dtschump/gmic-py/tree/ctypes_archive&quot;&gt;ctypes_archive 브랜치&lt;/a&gt; 에서 완료되었습니다 .</target>
        </trans-unit>
        <trans-unit id="94873099288b85395ad17af987aeb330c97e9fde" translate="yes" xml:space="preserve">
          <source>Through custom Python/C++ binding (see &lt;code&gt;gmicpy.cpp&lt;/code&gt; and &lt;code&gt;setup.py&lt;/code&gt;) DONE</source>
          <target state="translated">커스텀 Python / C ++ 바인딩을 통해 ( &lt;code&gt;gmicpy.cpp&lt;/code&gt; 및 &lt;code&gt;setup.py&lt;/code&gt; 참조 ) 완료</target>
        </trans-unit>
        <trans-unit id="697547c508418381fb87b1a3a61ff44c9f7e5dbd" translate="yes" xml:space="preserve">
          <source>Using your camera with G'MIC's optional OpenCV linking</source>
          <target state="translated">G'MIC의 선택적 OpenCV 연결과 함께 카메라 사용</target>
        </trans-unit>
        <trans-unit id="d4144c9f1c595a9a0520976324b7d2f9f74e7620" translate="yes" xml:space="preserve">
          <source>Windows (planned)&lt;sup&gt;w&lt;/sup&gt;</source>
          <target state="translated">Windows (예정) &lt;sup&gt;w&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="b450cc7e995dffb659e9de0ff2bd358a97075c10" translate="yes" xml:space="preserve">
          <source>You can build your own Gmic python binding on possibly any platform with a C/C++ compiler.
Here is what we have managed to build and ship to &lt;a href=&quot;https://pypi.org/project/gmic/&quot;&gt;Gmic PyPI page&lt;/a&gt;, allowing you to &lt;code&gt;pip install gmic&lt;/code&gt; and use pre-built binaries or build &lt;code&gt;gmic-py&lt;/code&gt; on the fly.
Note that &lt;code&gt;gmic-py&lt;/code&gt;'s package installer links to your machine's existing &lt;code&gt;libpng&lt;/code&gt;, &lt;code&gt;OpenMP&lt;/code&gt; and &lt;code&gt;libcURL&lt;/code&gt; if found.</source>
          <target state="translated">C / C ++ 컴파일러를 사용하여 가능한 모든 플랫폼에서 고유 한 Gmic Python 바인딩을 빌드 할 수 있습니다. 다음은 &lt;a href=&quot;https://pypi.org/project/gmic/&quot;&gt;Gmic PyPI 페이지&lt;/a&gt; 를 빌드하고 제공하여 gmic &lt;code&gt;pip install gmic&lt;/code&gt; 를 pip 하고 사전 빌드 된 바이너리를 사용하거나 즉시 &lt;code&gt;gmic-py&lt;/code&gt; 를 빌드 할 수 있도록 관리 한 것 입니다. 참고 &lt;code&gt;gmic-py&lt;/code&gt; 컴퓨터의 기존에 '의 패키지 설치 링크 &lt;code&gt;libpng&lt;/code&gt; , &lt;code&gt;OpenMP&lt;/code&gt; 를 하고 &lt;code&gt;libcURL&lt;/code&gt; 발견합니다.</target>
        </trans-unit>
        <trans-unit id="7bb0b4784a477cfc39ab45356f1e2746e8c63fe9" translate="yes" xml:space="preserve">
          <source>You need Python 3.x and &lt;code&gt;pip&lt;/code&gt; installed.
Things work best with the last development version for now :)</source>
          <target state="translated">Python 3.x 및 &lt;code&gt;pip&lt;/code&gt; 가 설치되어 있어야합니다. 지금은 마지막 개발 버전에서 가장 잘 작동합니다. :)</target>
        </trans-unit>
        <trans-unit id="fa68972a081ba19ac49c44a75a6594291372ce9f" translate="yes" xml:space="preserve">
          <source>a single Blender GMIC 2D node with a text field or linkable script to add a GMIC expression</source>
          <target state="translated">GMIC 표현식을 추가하기위한 텍스트 필드 또는 링크 가능한 스크립트가있는 단일 Blender GMIC 2D 노드</target>
        </trans-unit>
        <trans-unit id="e85c5a4eef2d3610a6528cb4f0573072b7829845" translate="yes" xml:space="preserve">
          <source>as many 2D nodes as there are types of GMIC filters and commands (500+)</source>
          <target state="translated">GMIC 필터 및 명령 유형이있는만큼 2D 노드 수 (500 개 이상)</target>
        </trans-unit>
        <trans-unit id="a33142954ab58b6a9073c9f015c6ccefe0cac4a9" translate="yes" xml:space="preserve">
          <source>gmic-py</source>
          <target state="translated">gmic-py</target>
        </trans-unit>
        <trans-unit id="9533c5df9b708e63166206237f0a46a0db0efe70" translate="yes" xml:space="preserve">
          <source>libcURL</source>
          <target state="translated">libcURL</target>
        </trans-unit>
        <trans-unit id="67d85049d5ad551413a0df2a7b5737719e1722f9" translate="yes" xml:space="preserve">
          <source>libpng I/O</source>
          <target state="translated">libpng I / O</target>
        </trans-unit>
        <trans-unit id="27747a3c06e86818ef3490108e1ade5acff168b7" translate="yes" xml:space="preserve">
          <source>ppm/bmp I/O</source>
          <target state="translated">ppm / bmp I / O</target>
        </trans-unit>
        <trans-unit id="698a879938bf4d71b92190d2b8f19c0e1d4abeef" translate="yes" xml:space="preserve">
          <source>✓</source>
          <target state="translated">✓</target>
        </trans-unit>
        <trans-unit id="2fc426ef3fe4220f98153a0964bebede236a1c19" translate="yes" xml:space="preserve">
          <source>✓ &lt;sup&gt;2&lt;/sup&gt;</source>
          <target state="translated">✓ &lt;sup&gt;2&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="0299adaba4eb0e8faca842f0597c11f5d3b26127" translate="yes" xml:space="preserve">
          <source>✓ &lt;sup&gt;3&lt;/sup&gt;</source>
          <target state="translated">✓ &lt;sup&gt;3&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="c5c4ba1aceeba330dd52fd15ab331e3c19b6910f" translate="yes" xml:space="preserve">
          <source>✗</source>
          <target state="translated">✗</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
