<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/cexprtk/">
    <body>
      <group id="cexprtk">
        <trans-unit id="faa1f2fba98b7126fa603844aad2f4c22421dba0" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Symbol_Table&lt;/em&gt;) &lt;code&gt;Symbol_Table&lt;/code&gt; associated with this &lt;code&gt;Expression&lt;/code&gt;.</source>
          <target state="translated">( &lt;em&gt;Symbol_Table&lt;/em&gt; ) 이 &lt;code&gt;Expression&lt;/code&gt; 과 관련된 &lt;code&gt;Symbol_Table&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ee0ce97f8007779087e71db478e952c8e84f136" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;float&lt;/em&gt;) Value resulting from evaluation of expression.</source>
          <target state="translated">( &lt;em&gt;float&lt;/em&gt; ) 표현식 평가 결과 값입니다.</target>
        </trans-unit>
        <trans-unit id="060c312531020e268dc7d85734b678d52feca219" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;float&lt;/em&gt;): Evaluated expression</source>
          <target state="translated">( &lt;em&gt;float&lt;/em&gt; ) : 평가 된 표현식</target>
        </trans-unit>
        <trans-unit id="fc5e2771691397865fad07aceb10cc02406e8437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERROR_STRING&lt;/code&gt; when &lt;code&gt;HANDLED_FLAG&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; this can be used to describe error condition.</source>
          <target state="translated">&lt;code&gt;ERROR_STRING&lt;/code&gt; 때 &lt;code&gt;HANDLED_FLAG&lt;/code&gt; 이 있다 &lt;code&gt;False&lt;/code&gt; 이 오류 상황을 설명하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e8ef6025c0b3fafb43c3f43f1f3c384e8a70aa9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;False&lt;/code&gt;, flags and error condition, the reason why the unknown symbol could not be resolved by the callback is described by &lt;code&gt;ERROR_STRING&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; , 플래그 및 오류 조건, 알 수없는 기호를 콜백으로 해결할 수없는 이유는 &lt;code&gt;ERROR_STRING&lt;/code&gt; 에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="24263d0b1b18a527588d649761c18689ed57a5b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HANDLED_FLAG&lt;/code&gt; is a boolean:</source>
          <target state="translated">&lt;code&gt;HANDLED_FLAG&lt;/code&gt; 는 부울입니다.</target>
        </trans-unit>
        <trans-unit id="0caffabede73914e05f9f4b874d9f8292164d12d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ParseException&lt;/code&gt;: If expression is invalid.</source>
          <target state="translated">&lt;code&gt;ParseException&lt;/code&gt; :식이 유효하지 않은 경우.</target>
        </trans-unit>
        <trans-unit id="feda492da67c8336e47f6c362ca5845ea7002bcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ParseException&lt;/code&gt;: if &lt;em&gt;expression&lt;/em&gt; is invalid.</source>
          <target state="translated">&lt;code&gt;ParseException&lt;/code&gt; : &lt;em&gt;표현식&lt;/em&gt; 이 유효하지 않은 경우.</target>
        </trans-unit>
        <trans-unit id="2c5756622f1acb8e43a87efa0ac784d6aa35bfcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SYMBOL_VALUE&lt;/code&gt;, floating point value that should be used when resolving missing symbol.</source>
          <target state="translated">&lt;code&gt;SYMBOL_VALUE&lt;/code&gt; , 누락 된 기호를 해결할 때 사용해야하는 부동 소수점 값.</target>
        </trans-unit>
        <trans-unit id="f514bdea2f3e53ed2004a30658aabf30cc32c9d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; indicates that callback was able handle the error condition and that &lt;code&gt;SYMBOL_VALUE&lt;/code&gt; should be used for the missing symbol.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 는 콜백이 오류 조건을 처리 할 수 ​​있었고 누락 된 기호에 &lt;code&gt;SYMBOL_VALUE&lt;/code&gt; 를 사용해야 함을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="0149c39095598977ba38d55e774b5da7f68fd800" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;USR_SYMBOL_TYPE&lt;/code&gt; gives type of symbol (constant or variable) that should be added to the &lt;code&gt;symbol_table&lt;/code&gt; when unkown symbol is resolved. Value should be one of those given in &lt;code&gt;cexprtk.USRSymbolType&lt;/code&gt;. e.g.</source>
          <target state="translated">&lt;code&gt;USR_SYMBOL_TYPE&lt;/code&gt; 은 알 수 없는 기호가 해결 될 때 &lt;code&gt;symbol_table&lt;/code&gt; 에 추가되어야하는 기호 유형 (상수 또는 변수)을 제공합니다 . 값은 &lt;code&gt;cexprtk.USRSymbolType&lt;/code&gt; 에 제공된 값 중 하나 여야합니다 . 예 :</target>
        </trans-unit>
        <trans-unit id="9b9cca042b73235b2c34f13ea0b3d227fd19ff4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VARIABLENAME&lt;/code&gt; should be used to look up the desired value in a dictionary.</source>
          <target state="translated">&lt;code&gt;VARIABLENAME&lt;/code&gt; 사전에서 원하는 값을 찾으려면 VARIABLENAME을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="264ee0ab13c055d3acb93a66b00c63dd6c5a45c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cexprtk&lt;/code&gt; is a cython wrapper around the &quot;&lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;ExprTK: C++ Mathematical Expression  Toolkit Library &lt;/a&gt;&quot;  by Arash Partow. Using &lt;code&gt;cexprtk&lt;/code&gt; a powerful mathematical expression engine can be incorporated into your python project.</source>
          <target state="translated">&lt;code&gt;cexprtk&lt;/code&gt; 는 Arash Partow 의 &quot; &lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;ExprTK : C ++ Mathematical Expression Toolkit Library&lt;/a&gt; &quot;를 둘러싼 cython 래퍼입니다. &lt;code&gt;cexprtk&lt;/code&gt; 를 사용 하면 강력한 수학적 표현 엔진을 파이썬 프로젝트에 통합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="762762e6b72d7e46ec64ce75963b98a34e90b89b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cexprtk&lt;/code&gt; is released under the same terms as the [ExprTK][] library the &lt;a href=&quot;http://opensource.org/licenses/cpl1.0.php&quot;&gt;Common Public License Version 1.0&lt;/a&gt; (CPL).</source>
          <target state="translated">&lt;code&gt;cexprtk&lt;/code&gt; 는 [ExprTK] [] 라이브러리 CPL ( &lt;a href=&quot;http://opensource.org/licenses/cpl1.0.php&quot;&gt;Common Public License Version 1.0&lt;/a&gt; ) 과 동일한 조건으로 릴리스됩니다 .</target>
        </trans-unit>
        <trans-unit id="87b94d1fff43e6e1c69689c535c12dd699a4b933" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f_&lt;/code&gt; variables should be multiplied by 1.1.</source>
          <target state="translated">&lt;code&gt;f_&lt;/code&gt; 변수에는 1.1을 곱해야합니다.</target>
        </trans-unit>
        <trans-unit id="3bbd24309c8196df277063ce2c4c4e1671812ef1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m_&lt;/code&gt; or &lt;code&gt;f_&lt;/code&gt; prefix the  actual variable name (perhaps indicating gender).</source>
          <target state="translated">&lt;code&gt;m_&lt;/code&gt; 또는 &lt;code&gt;f_&lt;/code&gt; 는 실제 변수 이름 앞에 붙습니다 (성별 표시).</target>
        </trans-unit>
        <trans-unit id="87364b854a30250989e5b5cf586344f0c813f49b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m_&lt;/code&gt; variables should be multiplied by 0.8.</source>
          <target state="translated">&lt;code&gt;m_&lt;/code&gt; 변수에는 0.8을 곱해야합니다.</target>
        </trans-unit>
        <trans-unit id="cc1d7715637acb90668719fc93775cef09e9993f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;expression&lt;/em&gt; (&lt;em&gt;str&lt;/em&gt;) Formula to be evaluated</source>
          <target state="translated">&lt;em&gt;expression&lt;/em&gt; ( &lt;em&gt;str&lt;/em&gt; ) 평가할 공식</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eaf5a16b42e8b109efb2abba5661696aaa783641" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Installation requires a compatible C++ compiler to be installed (unless installing from a binary wheel).</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 설치하려면 호환되는 C ++ 컴파일러를 설치해야합니다 (바이너리 휠에서 설치하지 않는 경우).</target>
        </trans-unit>
        <trans-unit id="8cf6a6684f50f3ea7a170aa3398f4403873e6036" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameters:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;매개 변수 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c947f4da9fa7638d21a4a158190b3a6fe6e48a3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Raises:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;인상 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5e584ca6914ce5e035ff932a639c1bba063960a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Returns:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;보고:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ffe9527b47b5aadf88274c1ea62f497ece58d7c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Problem:&lt;/strong&gt; The following example shows a potential use for the symbol resolver:</source>
          <target state="translated">&lt;strong&gt;문제점 :&lt;/strong&gt; 다음 예제는 기호 해석기의 잠재적 인 사용을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3dd514fff89b3bc71a0a2a48f2e39e39f3d69f0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Solution:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;해결책:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba0b3baef4b4a7d8215c2361603b3bf5309bc7c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;add_constants&lt;/strong&gt; (&lt;em&gt;bool&lt;/em&gt;) If &lt;code&gt;True&lt;/code&gt;, add the standard constants &lt;code&gt;pi&lt;/code&gt;, &lt;code&gt;inf&lt;/code&gt;, &lt;code&gt;epsilon&lt;/code&gt; to the 'constants' dictionary before populating the &lt;code&gt;Symbol_Table&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;add_constants&lt;/strong&gt; ( &lt;em&gt;bool&lt;/em&gt; ) &lt;code&gt;True&lt;/code&gt; 이면 &lt;code&gt;Symbol_Table&lt;/code&gt; 을 채우기 전에 표준 상수 &lt;code&gt;pi&lt;/code&gt; , &lt;code&gt;inf&lt;/code&gt; , &lt;code&gt;epsilon&lt;/code&gt; 을 'constants'사전에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="e3abeed0be789a1c717f2b7201fefd5f4ecd2069" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;constants&lt;/strong&gt; (&lt;em&gt;dict&lt;/em&gt;) Dictionary containing values that should be added to &lt;code&gt;Symbol_Table&lt;/code&gt; as constants. These can be used a variables within expressions but their values cannot be updated following &lt;code&gt;Symbol_Table&lt;/code&gt; instantiation.</source>
          <target state="translated">&lt;strong&gt;상수&lt;/strong&gt; ( &lt;em&gt;dict&lt;/em&gt; ) &lt;code&gt;Symbol_Table&lt;/code&gt; 에 상수 로 추가되어야하는 값을 포함하는 사전 입니다. 식 내에서 변수로 사용할 수 있지만 해당 값은 &lt;code&gt;Symbol_Table&lt;/code&gt; 인스턴스화 후에 업데이트 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="4c367d28f4c874179051dfa8e18c311267e5c64b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expression&lt;/strong&gt; (&lt;em&gt;str&lt;/em&gt;) Expression to be evaluated.</source>
          <target state="translated">&lt;strong&gt;expression&lt;/strong&gt; ( &lt;em&gt;str&lt;/em&gt; ) 평가할 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="3a6f7dd1a08db834cd3e2eb69564871822010d9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expression&lt;/strong&gt; (&lt;em&gt;str&lt;/em&gt;) String giving expression to be calculated.</source>
          <target state="translated">&lt;strong&gt;expression&lt;/strong&gt; ( &lt;em&gt;str&lt;/em&gt; ) 계산할 표현식을 제공하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="5ab56d155d457c2e4449d984749cea53be7f3248" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;functions&lt;/strong&gt; (&lt;em&gt;dict&lt;/em&gt;) Dictionary containing custom functions to be made available to expressions. Dictionary keys specify function names and values should be functions.</source>
          <target state="translated">&lt;strong&gt;functions&lt;/strong&gt; ( &lt;em&gt;dict&lt;/em&gt; ) 표현식에 사용할 수있는 사용자 정의 함수가 포함 된 사전입니다. 사전 키는 함수 이름을 지정하고 값은 함수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="88cd664a01de6f852fd90344abff4d61e55c4f86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;symbol_table&lt;/strong&gt; (&lt;em&gt;Symbol_Table&lt;/em&gt;) Object defining variables and constants.</source>
          <target state="translated">&lt;strong&gt;symbol_table&lt;/strong&gt; ( &lt;em&gt;Symbol_Table&lt;/em&gt; ) 변수와 상수를 정의하는 객체.</target>
        </trans-unit>
        <trans-unit id="104ffb159674493086ce38158c907e7264b5a334" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;unknown_symbol_resolver_callback&lt;/strong&gt; (&lt;em&gt;callable&lt;/em&gt;)  See description above.</source>
          <target state="translated">&lt;strong&gt;unknown_symbol_resolver_callback&lt;/strong&gt; ( &lt;em&gt;callable&lt;/em&gt; ) 위의 설명을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f723fc68c18689b0e93f9971b2ee5f38d916c940" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;variables&lt;/strong&gt; (&lt;em&gt;dict&lt;/em&gt;) Dictionary containing variable name, variable value pairs to be used in expression.</source>
          <target state="translated">&lt;strong&gt;변수&lt;/strong&gt; ( &lt;em&gt;dict&lt;/em&gt; ) 표현식에 사용할 변수 이름, 변수 값 쌍을 포함하는 사전입니다.</target>
        </trans-unit>
        <trans-unit id="3a4354266b7b341ed57e737cc58c9d6899effd41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;variables&lt;/strong&gt; (&lt;em&gt;dict&lt;/em&gt;) Mapping between variable name and initial variable value.</source>
          <target state="translated">&lt;strong&gt;변수&lt;/strong&gt; ( &lt;em&gt;dict&lt;/em&gt; ) 변수 이름과 초기 변수 값 간의 매핑.</target>
        </trans-unit>
        <trans-unit id="fee8c05def1e111e796208bd0fda24ff61d0979b" translate="yes" xml:space="preserve">
          <source>A callback can be passed to the &lt;code&gt;Expression&lt;/code&gt; constructor through the &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; parameter. This callback is invoked during expression parsing when a variable or constant is encountered that isn't in the &lt;code&gt;Symbol_Table&lt;/code&gt; associated with the &lt;code&gt;Expression&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 매개 변수를 통해 &lt;code&gt;Expression&lt;/code&gt; 생성자에 콜백을 전달할 수 있습니다 . 이 콜백은 &lt;code&gt;Expression&lt;/code&gt; 과 연관된 &lt;code&gt;Symbol_Table&lt;/code&gt; 에 없는 변수 또는 상수가 발견 될 때 표현식 구문 분석 중에 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="b1f1d3614d5269c38771c64bddc3e00e0aa67f4c" translate="yes" xml:space="preserve">
          <source>A suitable function exists in the &lt;code&gt;random&lt;/code&gt; module, namely &lt;code&gt;random.uniform&lt;/code&gt;. As this is an instance method it needs to be wrapped in function:</source>
          <target state="translated">&lt;code&gt;random&lt;/code&gt; 모듈 에 적합한 함수 , 즉 &lt;code&gt;random.uniform&lt;/code&gt; 이 있습니다. 이것은 인스턴스 메서드이므로 함수로 래핑해야합니다.</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API 참조</target>
        </trans-unit>
        <trans-unit id="f22aee4047706265d2c4aa8df189e1ab80ceb5da" translate="yes" xml:space="preserve">
          <source>All that remains is to register the callback with an instance of &lt;code&gt;Expression&lt;/code&gt; and to evaluate an expression. The expression to be evaluated is:</source>
          <target state="translated">남은 것은 &lt;code&gt;Expression&lt;/code&gt; 의 인스턴스에 콜백을 등록하고 표현식 을 평가하는 것입니다. 평가할 표현식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="60676e43c115f1e7c44ed4bb34d016393c828c69" translate="yes" xml:space="preserve">
          <source>An expression contains variables of the form &lt;code&gt;m_VARIABLENAME&lt;/code&gt; and &lt;code&gt;f_VARIABLENAME&lt;/code&gt;.</source>
          <target state="translated">표현식에는 &lt;code&gt;m_VARIABLENAME&lt;/code&gt; 및 &lt;code&gt;f_VARIABLENAME&lt;/code&gt; 형식의 변수가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="ce1b0bf3d36e9821cee08cb2e1dc4ca750c65510" translate="yes" xml:space="preserve">
          <source>An expression will be defined to calculate the circumference of circle, this will then be re-used to calculate the value for several different radii.</source>
          <target state="translated">원의 둘레를 계산하기위한 표현식이 정의되고,이 값은 여러 다른 반지름 값을 계산하는 데 재사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d2a52548bd0852b99153ddd79a1f550f70674c7d" translate="yes" xml:space="preserve">
          <source>Authors</source>
          <target state="translated">저자</target>
        </trans-unit>
        <trans-unit id="04f7a401af0af2cc5c6bf955d1407d15f1874fc1" translate="yes" xml:space="preserve">
          <source>CONSTANT</source>
          <target state="translated">일정한</target>
        </trans-unit>
        <trans-unit id="ac74af1d715bbf38c95640717fa5f2a93319ba8c" translate="yes" xml:space="preserve">
          <source>Check that expression can be parsed. If successful do nothing, if unsuccessful raise &lt;code&gt;ParseException&lt;/code&gt;.</source>
          <target state="translated">표현식을 구문 분석 할 수 있는지 확인하십시오. 성공하면 아무것도하지 않고, 성공하지 못하면 &lt;code&gt;ParseException&lt;/code&gt; 을 발생 시킵니다.</target>
        </trans-unit>
        <trans-unit id="b9382448b2c3687cbaf87fa5d8e26483be9bea08" translate="yes" xml:space="preserve">
          <source>Class Reference</source>
          <target state="translated">클래스 레퍼런스</target>
        </trans-unit>
        <trans-unit id="ecb43daaab93553aeeedb56fffc606528209e260" translate="yes" xml:space="preserve">
          <source>Class for providing variable and constant values to &lt;code&gt;Expression&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;Expression&lt;/code&gt; 인스턴스에 변수 및 상수 값을 제공하기위한 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="859caffa8d0a0e4911ccf106833a523e8228b761" translate="yes" xml:space="preserve">
          <source>Class representing mathematical expression.</source>
          <target state="translated">수학적 표현을 나타내는 클래스.</target>
        </trans-unit>
        <trans-unit id="8a4f3e57af370ff327a5eeda6df1f9789671c329" translate="yes" xml:space="preserve">
          <source>Cython wrapper by Michael Rushton (&lt;a href=&quot;mailto:m.j.d.rushton@gmail.com&quot;&gt;m.j.d.rushton@gmail.com&lt;/a&gt;), although most credit should go to Arash Partow for creating the underlying &lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;ExprTK&lt;/a&gt; library.</source>
          <target state="translated">Michael Rushton ( &lt;a href=&quot;mailto:m.j.d.rushton@gmail.com&quot;&gt;mjdrushton@gmail.com&lt;/a&gt; )의 Cython 래퍼 이지만 대부분의 크레딧은 기본 &lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;ExprTK&lt;/a&gt; 라이브러리 를 만들기 위해 Arash Partow로 이동해야 합니다.</target>
        </trans-unit>
        <trans-unit id="ef508744ebc192e88f31b180a2418131be70c484" translate="yes" xml:space="preserve">
          <source>Defines constant values used to determine symbol type returned by &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; (see &lt;code&gt;Expression&lt;/code&gt; constructor documentation for more).</source>
          <target state="translated">&lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 에서 반환 된 기호 유형을 결정하는 데 사용되는 상수 값을 정의합니다 (자세한 내용은 &lt;code&gt;Expression&lt;/code&gt; 생성자 설명서 참조).</target>
        </trans-unit>
        <trans-unit id="2fbf56cb00436cdde9993ed391b56784ca50c293" translate="yes" xml:space="preserve">
          <source>Defining unknown symbol-resolver:</source>
          <target state="translated">알 수없는 기호 해결 프로그램 정의 :</target>
        </trans-unit>
        <trans-unit id="c2f61c7d48e94ecfd0b73583aa680a2bb77e955d" translate="yes" xml:space="preserve">
          <source>Dictionary like giving function stored in this &lt;code&gt;Symbol_Table&lt;/code&gt;. Keys are function names (as used in &lt;code&gt;Expression&lt;/code&gt;) and these map to python callable objects including functions, functors, and &lt;code&gt;functools.partial&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Symbol_Table&lt;/code&gt; 에 저장된 함수를 제공하는 것과 같은 사전 . 키는 함수 이름 ( &lt;code&gt;Expression&lt;/code&gt; 에서 사용됨 )이며, 함수, functor 및 &lt;code&gt;functools.partial&lt;/code&gt; 을 포함한 파이썬 호출 가능 객체에 매핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="321fc6b599cb093206564a99dea07ab9048ee7ec" translate="yes" xml:space="preserve">
          <source>Dictionary like giving variables stored in this &lt;code&gt;Symbol_Table&lt;/code&gt;. Keys are variables names and these map to variable values.</source>
          <target state="translated">이 &lt;code&gt;Symbol_Table&lt;/code&gt; 에 저장된 변수를 제공하는 것과 같은 사전 . 키는 변수 이름이며 변수 값에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="83137b095f2e35e48bf6f2f05df8d0f58ea05cd5" translate="yes" xml:space="preserve">
          <source>Equivalent to calling &lt;code&gt;value()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;value()&lt;/code&gt; 메서드 를 호출하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="82f848ee84d0d9f8d370da94bde1355f6515f368" translate="yes" xml:space="preserve">
          <source>Evaluate a mathematical formula using the exprtk library and return result.</source>
          <target state="translated">exprtk 라이브러리를 사용하여 수학 공식을 평가하고 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="56f7bdc946917219ef0d5e163c291f3ccceff92e" translate="yes" xml:space="preserve">
          <source>Evaluate expression using variable values currently set within associated &lt;code&gt;Symbol_Table&lt;/code&gt;</source>
          <target state="translated">연관된 &lt;code&gt;Symbol_Table&lt;/code&gt; 내에 현재 설정된 변수 값을 사용하여 표현식을 평가합니다.</target>
        </trans-unit>
        <trans-unit id="cc3e53a68a42db96f7414d8a73eba8908f6b1073" translate="yes" xml:space="preserve">
          <source>Example: Defining an unknown symbol resolver</source>
          <target state="translated">예 : 알 수없는 기호 해석기 정의</target>
        </trans-unit>
        <trans-unit id="2cf763560fc9ec7fd44b4b0a17b8cd9a43ecf64c" translate="yes" xml:space="preserve">
          <source>Example: Defining custom functions</source>
          <target state="translated">예 : 사용자 정의 함수 정의</target>
        </trans-unit>
        <trans-unit id="3f7fffba7503af04ee38af3badd4b45f5563e629" translate="yes" xml:space="preserve">
          <source>Example: Evaluate a simple equation</source>
          <target state="translated">예 : 간단한 방정식 평가</target>
        </trans-unit>
        <trans-unit id="d6248355916ac3e8f1df4d9a16a774d3be8f6a38" translate="yes" xml:space="preserve">
          <source>Example: Re-using expressions</source>
          <target state="translated">예 : 식 재사용</target>
        </trans-unit>
        <trans-unit id="d3f2c8813cf117674c2af4e5abcc3c50a9be99c8" translate="yes" xml:space="preserve">
          <source>Example: Using Variables</source>
          <target state="translated">예 : 변수 사용</target>
        </trans-unit>
        <trans-unit id="8634f427ba210d34fb3366f9df8e78b11037dbae" translate="yes" xml:space="preserve">
          <source>First a &lt;code&gt;Symbol_Table&lt;/code&gt; is created containing a variable &lt;code&gt;r&lt;/code&gt; (for radius), it is also populated with some useful constants such as &amp;pi;.</source>
          <target state="translated">먼저 변수 &lt;code&gt;r&lt;/code&gt; (반경)을 포함 하는 &lt;code&gt;Symbol_Table&lt;/code&gt; 이 생성 되고 &amp;pi;와 같은 유용한 상수로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="990de414c75ca00914d93228629a8a05c7a14f8c" translate="yes" xml:space="preserve">
          <source>First the &lt;code&gt;VARIABLENAME&lt;/code&gt; dictionary is defined:</source>
          <target state="translated">먼저 &lt;code&gt;VARIABLENAME&lt;/code&gt; 사전이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="bab5ff91e28f59413e2565d9874b6b1f7dfb71bc" translate="yes" xml:space="preserve">
          <source>Following instantiation, the expression is evaluated calling the expression or invoking its &lt;code&gt;value()&lt;/code&gt; method.</source>
          <target state="translated">인스턴스화 후에 표현식은 표현식을 호출하거나 &lt;code&gt;value()&lt;/code&gt; 메서드 를 호출하여 평가 됩니다.</target>
        </trans-unit>
        <trans-unit id="9e0f16ce0361e0e03beeb215729bfd1aba357ff3" translate="yes" xml:space="preserve">
          <source>For information about expressions supported by &lt;code&gt;cexprtk&lt;/code&gt; please refer to the original C++ [ExprTK][] documentation:</source>
          <target state="translated">&lt;code&gt;cexprtk&lt;/code&gt; 에서 지원하는 표현식에 대한 정보 는 원본 C ++ [ExprTK] [] 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6beaad2db3cb298c0cb3ec43368a06d639fb2920" translate="yes" xml:space="preserve">
          <source>For more information about supported functions and syntax see the
&lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;exprtk C++ library website&lt;/a&gt;.</source>
          <target state="translated">지원되는 함수 및 구문에 대한 자세한 내용은 &lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;exprtk C ++ 라이브러리 웹 사이트를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="226ea5d89972fde4694f100a4ce5ec2ca676fe30" translate="yes" xml:space="preserve">
          <source>Instantiate &lt;code&gt;Expression&lt;/code&gt; from a text string giving formula and &lt;code&gt;Symbol_Table&lt;/code&gt;
instance encapsulating variables and constants used by the expression.</source>
          <target state="translated">&lt;code&gt;Expression&lt;/code&gt; 사용되는 변수와 상수를 캡슐화 하는 수식 및 &lt;code&gt;Symbol_Table&lt;/code&gt; 인스턴스를 제공하는 텍스트 문자열에서 식 을 인스턴스화 합니다.</target>
        </trans-unit>
        <trans-unit id="e137e6354673fa6383ebbe8c63676af062678404" translate="yes" xml:space="preserve">
          <source>Instantiate &lt;code&gt;Symbol_Table&lt;/code&gt; defining variables and constants for use with &lt;code&gt;Expression&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;Expression&lt;/code&gt; 클래스 와 함께 사용할 변수와 상수를 정의하는 &lt;code&gt;Symbol_Table&lt;/code&gt; 을 인스턴스화 합니다.</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="e327ca93ec46c6ee901ab683fbceccdbe0205d49" translate="yes" xml:space="preserve">
          <source>Mathematical expression parser: cython wrapper around the 'C++ Mathematical Expression Toolkit Library'</source>
          <target state="translated">수학적 표현 파서 : 'C ++ Mathematical Expression Toolkit Library'주변의 cython 래퍼</target>
        </trans-unit>
        <trans-unit id="701f93f9254956dd7e0b2eaaea69954f223bcba2" translate="yes" xml:space="preserve">
          <source>Now an instance of &lt;code&gt;Expression&lt;/code&gt; is created, defining our function:</source>
          <target state="translated">이제 &lt;code&gt;Expression&lt;/code&gt; 의 인스턴스 가 생성되어 함수를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="9c47e9f0eca733caf24267fc3c24e0eac290d681" translate="yes" xml:space="preserve">
          <source>Now the callback is defined. This takes a single argument, &lt;em&gt;symbol&lt;/em&gt;, which gives the name of the missing variable found in the expression:</source>
          <target state="translated">이제 콜백이 정의되었습니다. 이는 표현식에서 발견 된 누락 된 변수의 이름을 제공 하는 단일 인수 &lt;em&gt;symbol&lt;/em&gt; 을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6ef5b7cab692d3952ac0b30576e84c79568ade10" translate="yes" xml:space="preserve">
          <source>Now update the radius to a value of 3.0 using the dictionary like object returned by the &lt;code&gt;Symbol_Table&lt;/code&gt;'s &lt;code&gt;.variables&lt;/code&gt; property:</source>
          <target state="translated">이제 &lt;code&gt;Symbol_Table&lt;/code&gt; 의 &lt;code&gt;.variables&lt;/code&gt; 속성에 의해 반환 된 객체와 같은 사전을 사용하여 반경을 3.0 값으로 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="c8ecbd5cbf31074819dbccd172962688f8d6918e" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;rnd&lt;/code&gt; function now needs to be registered with a &lt;code&gt;Symbol_Table&lt;/code&gt;:</source>
          <target state="translated">우리의 &lt;code&gt;rnd&lt;/code&gt; 기능은 지금에 등록 할 필요가 &lt;code&gt;Symbol_Table&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b7e9f6b2379e2455d98d9946be25019b23b0576f" translate="yes" xml:space="preserve">
          <source>Property giving constants stored in this &lt;code&gt;Symbol_Table&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Symbol_Table&lt;/code&gt; 에 저장된 상수를 제공하는 속성 입니다.</target>
        </trans-unit>
        <trans-unit id="76367fa8cea82ae1d8d92dfba880230b1087c672" translate="yes" xml:space="preserve">
          <source>Python functions can be registered with a &lt;code&gt;Symbol_Table&lt;/code&gt; then used in an &lt;code&gt;Expression&lt;/code&gt;. In this example a custom function will be defined which produces a random number within a given range.</source>
          <target state="translated">Python 함수는 &lt;code&gt;Symbol_Table&lt;/code&gt; 에 등록한 다음 &lt;code&gt;Expression&lt;/code&gt; 에서 사용할 수 있습니다 . 이 예에서는 주어진 범위 내에서 임의의 숫자를 생성하는 사용자 정의 함수가 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="8886e22c39f8000e78c4601c8cfba518d9af8d23" translate="yes" xml:space="preserve">
          <source>Read only property that returns &lt;code&gt;Symbol_Table&lt;/code&gt; instance associated with this expression.</source>
          <target state="translated">이 식과 연결된 &lt;code&gt;Symbol_Table&lt;/code&gt; 인스턴스 를 반환하는 읽기 전용 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="aadec5e3c548a737f3450a15497da45e6009caab" translate="yes" xml:space="preserve">
          <source>Read-only dictionary like object mapping constant names stored in &lt;code&gt;Symbol_Table&lt;/code&gt; to their values.</source>
          <target state="translated">&lt;code&gt;Symbol_Table&lt;/code&gt; 에 저장된 상수 이름 을 해당 값 에 매핑하는 개체와 같은 읽기 전용 사전 .</target>
        </trans-unit>
        <trans-unit id="2ce7f5ce5f0e60bd549cbba6436bde72e63d32cc" translate="yes" xml:space="preserve">
          <source>Returns dictionary like object containing custom python functions to use in expressions.</source>
          <target state="translated">표현식에서 사용할 사용자 정의 Python 함수가 포함 된 사전과 같은 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8f8c6dedd55d7e05261e23b73295f3ccb871b4ae" translate="yes" xml:space="preserve">
          <source>Returns dictionary like object containing variable values. &lt;code&gt;Symbol_Table&lt;/code&gt; values can be updated through this object.</source>
          <target state="translated">변수 값을 포함하는 객체와 같은 사전을 반환합니다. &lt;code&gt;Symbol_Table&lt;/code&gt; 값은이 개체를 통해 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">목차</target>
        </trans-unit>
        <trans-unit id="c28d59a9d4b0247e9e3da20629ceb57e643a375f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol_Table&lt;/code&gt; was initialised with &lt;code&gt;r=1&lt;/code&gt;, the expression can be evaluated for this radius simply by calling it:</source>
          <target state="translated">&lt;code&gt;Symbol_Table&lt;/code&gt; 는 함께 초기화 된 &lt;code&gt;r=1&lt;/code&gt; 단순히 호출하여 발현이 반지름에 대해 평가 될 수있다 :</target>
        </trans-unit>
        <trans-unit id="56bb7d1bb7b285d7d8ef2db34649f9053d602daf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;functions&lt;/code&gt; property of the &lt;code&gt;Symbol_Table&lt;/code&gt; is accessed like a dictionary. In the preceding code snippet, a symbol table is created and then the &lt;code&gt;rnd&lt;/code&gt; function is assigned to the &lt;code&gt;rand&lt;/code&gt; key. This key is used as the function's name in a &lt;code&gt;cexprtk&lt;/code&gt; expression. The key cannot be the same as an existing variable, constant or reserved function name.</source>
          <target state="translated">&lt;code&gt;Symbol_Table&lt;/code&gt; 의 &lt;code&gt;functions&lt;/code&gt; 속성은 사전처럼 액세스됩니다. 앞의 코드 조각에서 기호 테이블이 생성 된 다음 &lt;code&gt;rnd&lt;/code&gt; 함수가 &lt;code&gt;rand&lt;/code&gt; 키에 할당됩니다 . 이 키는 &lt;code&gt;cexprtk&lt;/code&gt; 표현식 에서 함수의 이름으로 사용됩니다 . 키는 기존 변수, 상수 또는 예약 된 함수 이름과 같을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6c2007ad75cfdfd9c2116c2cc450710e02f191c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rand&lt;/code&gt; function will now be used in an expression. This expression chooses a random number between 5 and 8 and then multiplies it by 10. The followin snippet shows the instantiation of the &lt;code&gt;Expression&lt;/code&gt; which is then evaluated a few times. You will probably get different numbers out of your expression than shown, this is because your random number generator will have been initialised with a different seed than used in the example.</source>
          <target state="translated">이제 &lt;code&gt;rand&lt;/code&gt; 함수가 표현식에서 사용됩니다. 이 표현식은 5와 8 사이의 임의의 숫자를 선택한 다음 10을 곱합니다. 다음 스 니펫은 몇 번 평가되는 &lt;code&gt;Expression&lt;/code&gt; 의 인스턴스화를 보여줍니다 . 난수 생성기가 예제에서 사용 된 것과 다른 시드로 초기화 되었기 때문에 식에서 표시된 것과 다른 숫자를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35d6d8c0f67d686c61d2d786e7d29c03fda773f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; argument  to the &lt;code&gt;Expression&lt;/code&gt;
constructor accepts a callable which is invoked  whenever a symbol (i.e. a
variable or a constant), is not found in the &lt;code&gt;Symbol_Table&lt;/code&gt; given by the
&lt;code&gt;symbol_table&lt;/code&gt; argument. The &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; can be
used to provide a value for the missing value or to set an error condition.</source>
          <target state="translated">&lt;code&gt;Expression&lt;/code&gt; 생성자에 대한 &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 인수 는 &lt;code&gt;symbol_table&lt;/code&gt; 인수에 의해 제공된 &lt;code&gt;Symbol_Table&lt;/code&gt; 에서 기호 (즉, 변수 또는 상수)를 찾을 수 없을 때마다 호출되는 콜 러블을 받습니다 . &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 은 누락 값에 대한 값을 제공하거나 오류 상태를 설정하는데 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="b9099a9dd131d0ad46ccafeb9e14ceba01a2f14f" translate="yes" xml:space="preserve">
          <source>The callable should have following signature:</source>
          <target state="translated">콜 러블에는 다음과 같은 서명이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="fb0fad98c4930b3dd007b57aa61713289cf955a2" translate="yes" xml:space="preserve">
          <source>The callable should return a tuple of the form:</source>
          <target state="translated">콜 러블은 다음 형식의 튜플을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="f15452f8af98b5c4ed431a9573fbf951e18702eb" translate="yes" xml:space="preserve">
          <source>The callback can be used to provide some logic that leads to a new symbol being registered or for an error condition to be flagged.</source>
          <target state="translated">콜백을 사용하여 새 기호를 등록하거나 오류 조건에 플래그를 지정하는 로직을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6fdb0024909057b0489298d4422efee1d746992" translate="yes" xml:space="preserve">
          <source>The dictionary value of &lt;code&gt;VARIABLENAME&lt;/code&gt; should then be weighted according to its prefix:</source>
          <target state="translated">&lt;code&gt;VARIABLENAME&lt;/code&gt; 의 사전 값은 접두사에 따라 가중치를 부여해야합니다.</target>
        </trans-unit>
        <trans-unit id="754d099be65ba03ae895d981645baac769104f44" translate="yes" xml:space="preserve">
          <source>The following code would be used:</source>
          <target state="translated">다음 코드가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="81d6b5f8dc6501a7f8b74774e9376b5ea791864b" translate="yes" xml:space="preserve">
          <source>The following examples show the major features of &lt;code&gt;cexprtk&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 &lt;code&gt;cexprtk&lt;/code&gt; 의 주요 기능을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="c965204ad0224f33e50424441e53ec97eb8866a0" translate="yes" xml:space="preserve">
          <source>The following shows how the arithmetic expression &lt;code&gt;(5+5) * 23&lt;/code&gt; can be evaluated:</source>
          <target state="translated">다음은 산술 식 &lt;code&gt;(5+5) * 23&lt;/code&gt; 계산하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="8eff634efd6ced9470dfe5e44c3060492c70e21f" translate="yes" xml:space="preserve">
          <source>The latest version of &lt;code&gt;cexprtk&lt;/code&gt; can be installed using &lt;a href=&quot;http://www.pip-installer.org/en/latest/index.html&quot;&gt;pip&lt;/a&gt; :</source>
          <target state="translated">최신 버전의 &lt;code&gt;cexprtk&lt;/code&gt; 는 &lt;a href=&quot;http://www.pip-installer.org/en/latest/index.html&quot;&gt;pip를&lt;/a&gt; 사용하여 설치할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e06cd27df47e07a46b83684a7668c57566ed6af5" translate="yes" xml:space="preserve">
          <source>The variable values used by the Expression can be modified through the &lt;code&gt;variables&lt;/code&gt; property of the &lt;code&gt;Symbol_Table&lt;/code&gt; instance associated with the expression. The &lt;code&gt;Symbol_Table&lt;/code&gt; can be accessed using the &lt;code&gt;Expression.symbol_table&lt;/code&gt; property.</source>
          <target state="translated">Expression에서 사용하는 변수 값은 해당 표현식 과 관련된 &lt;code&gt;Symbol_Table&lt;/code&gt; 인스턴스 의 &lt;code&gt;variables&lt;/code&gt; 속성을 통해 수정할 수 있습니다 . &lt;code&gt;Symbol_Table&lt;/code&gt; 는 사용하여 액세스 할 수 있습니다 &lt;code&gt;Expression.symbol_table&lt;/code&gt; 속성을.</target>
        </trans-unit>
        <trans-unit id="a587ad68c586cf0341f243680f35243fffe7c027" translate="yes" xml:space="preserve">
          <source>This should give a value of &lt;code&gt;(0.8*82) - (1.1*76) = -18&lt;/code&gt;</source>
          <target state="translated">이것은 &lt;code&gt;(0.8*82) - (1.1*76) = -18&lt;/code&gt; 의 값을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="80a301589c8f919b292270ad98c09beb32fc18df" translate="yes" xml:space="preserve">
          <source>To instantiate a &lt;code&gt;Symbol_Table&lt;/code&gt; with:</source>
          <target state="translated">인스턴스화하는 &lt;code&gt;Symbol_Table&lt;/code&gt; 과를 :</target>
        </trans-unit>
        <trans-unit id="773f6ff3cdef6ef6e792726c788e19f9169103d9" translate="yes" xml:space="preserve">
          <source>Update the value of &lt;code&gt;x&lt;/code&gt; in the symbol table and re-evaluate the expression:</source>
          <target state="translated">기호 테이블에서 &lt;code&gt;x&lt;/code&gt; 값을 업데이트하고 표현식을 다시 평가합니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="8bf056ede57539fe7ab422f88b516c58223a0adf" translate="yes" xml:space="preserve">
          <source>Utility Functions</source>
          <target state="translated">유틸리티 기능</target>
        </trans-unit>
        <trans-unit id="b58c19038082c2364b9c1548d2e1a4ec413831d4" translate="yes" xml:space="preserve">
          <source>VARIABLE</source>
          <target state="translated">변하기 쉬운</target>
        </trans-unit>
        <trans-unit id="162cca68b743ad213088460d60bb46c2b0f0fe17" translate="yes" xml:space="preserve">
          <source>Value that should be returned by an &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; to define a constant.</source>
          <target state="translated">상수를 정의하기 위해 &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 에서 반환해야하는 값입니다 .</target>
        </trans-unit>
        <trans-unit id="5e26db07bd7b6c2ed9a936047791a9dd266719a3" translate="yes" xml:space="preserve">
          <source>Value that should be returned by an &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; to define a variable.</source>
          <target state="translated">변수를 정의하기 위해 &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 에서 반환해야하는 값입니다 .</target>
        </trans-unit>
        <trans-unit id="a74ad009f177e10e62b0a58bbacbeba1c77a0920" translate="yes" xml:space="preserve">
          <source>Variables can be used within expressions by passing a dictionary to the &lt;code&gt;evaluate_expression&lt;/code&gt; function. This maps variable names to their values. The expression from the previous example can be re-calculated using variable values:</source>
          <target state="translated">&lt;code&gt;evaluate_expression&lt;/code&gt; 함수에 사전을 전달하여 식 내에서 변수를 사용할 수 있습니다 . 그러면 변수 이름이 해당 값에 매핑됩니다. 이전 예의 표현식은 변수 값을 사용하여 다시 계산할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="161f93b7f39df5db7e15bd2f4f8a3fb7443abc60" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;evaluate_expression()&lt;/code&gt; function, the mathematical expression is parsed, evaluated and then immediately thrown away. This example shows how to re-use an &lt;code&gt;Expression&lt;/code&gt; for multiple evaluations.</source>
          <target state="translated">사용시 &lt;code&gt;evaluate_expression()&lt;/code&gt; 함수를 수식은 분석을 평가하고 즉시 폐기된다. 이 예에서는 여러 평가에 &lt;code&gt;Expression&lt;/code&gt; 을 다시 사용하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="0bf4a50120c6e995fa74f37f5b5dcaf4090e4c2a" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;symbol_name&lt;/code&gt; is a string identifying the missing symbol.</source>
          <target state="translated">여기서 &lt;code&gt;symbol_name&lt;/code&gt; 은 누락 된 기호를 식별하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">어디:</target>
        </trans-unit>
        <trans-unit id="d82616d864a123021b62bd770b7d5f69c5d7205e" translate="yes" xml:space="preserve">
          <source>cexprtk: Mathematical Expression Parsing and Evaluation in Python</source>
          <target state="translated">cexprtk : 파이썬에서 수학 표현식 구문 분석 및 평가</target>
        </trans-unit>
        <trans-unit id="bb1e3fdb2f426b9ccbd814dd33abc5780a9388b1" translate="yes" xml:space="preserve">
          <source>class Expression:</source>
          <target state="translated">클래스 표현식 :</target>
        </trans-unit>
        <trans-unit id="ff3ee5ed18dce0d440cab3b92b33e10cf9581054" translate="yes" xml:space="preserve">
          <source>class Symbol_Table:</source>
          <target state="translated">Symbol_Table 클래스 :</target>
        </trans-unit>
        <trans-unit id="5921b716da16ec490c50abea1fef9eb6568a8020" translate="yes" xml:space="preserve">
          <source>class USRSymbolType:</source>
          <target state="translated">USRSymbolType 클래스 :</target>
        </trans-unit>
        <trans-unit id="a35e8df8e67845a52974a31c97d74ab8a195e3da" translate="yes" xml:space="preserve">
          <source>constants</source>
          <target state="translated">상수</target>
        </trans-unit>
        <trans-unit id="d6350a477d4a2dcb68cdb7b58ab0ff6ff0573b99" translate="yes" xml:space="preserve">
          <source>def &lt;strong&gt;call&lt;/strong&gt;(self):</source>
          <target state="translated">def &lt;strong&gt;호출&lt;/strong&gt; (자기) :</target>
        </trans-unit>
        <trans-unit id="31c1f46ceab294568908012235e1a6cf3a07e5b8" translate="yes" xml:space="preserve">
          <source>def &lt;strong&gt;init&lt;/strong&gt;(self, &lt;em&gt;expression&lt;/em&gt;, &lt;em&gt;symbol_table&lt;/em&gt;, &lt;em&gt;unknown_symbol_resolver_callback&lt;/em&gt; = None):</source>
          <target state="translated">def &lt;strong&gt;init&lt;/strong&gt; (self, &lt;em&gt;expression&lt;/em&gt; , &lt;em&gt;symbol_table&lt;/em&gt; , &lt;em&gt;unknown_symbol_resolver_callback&lt;/em&gt; = None) :</target>
        </trans-unit>
        <trans-unit id="0aa5e582b2420cbb8cf7e56f87c61a6ee3121948" translate="yes" xml:space="preserve">
          <source>def &lt;strong&gt;init&lt;/strong&gt;(self, &lt;em&gt;variables&lt;/em&gt;, &lt;em&gt;constants&lt;/em&gt; = {}, &lt;em&gt;add_constants&lt;/em&gt; = False, functions = {}):</source>
          <target state="translated">def &lt;strong&gt;init&lt;/strong&gt; (자기, &lt;em&gt;변수&lt;/em&gt; , &lt;em&gt;상수&lt;/em&gt; = {}, &lt;em&gt;add_constants&lt;/em&gt; = False, 함수 = {}) :</target>
        </trans-unit>
        <trans-unit id="f589c51c25ce78175feb76e9874ed17cccab6df1" translate="yes" xml:space="preserve">
          <source>def check_expression (&lt;em&gt;expression&lt;/em&gt;)</source>
          <target state="translated">def check_expression ( &lt;em&gt;표현식&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="4d19995f47176af729694f365be5f0aecb053009" translate="yes" xml:space="preserve">
          <source>def evaluate_expression (&lt;em&gt;expression&lt;/em&gt;, &lt;em&gt;variables&lt;/em&gt;)</source>
          <target state="translated">def 평가 &lt;em&gt;식&lt;/em&gt; ( &lt;em&gt;식&lt;/em&gt; , &lt;em&gt;변수&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="9faa101b109bbcb0a3d1a221c31501bd38bf41d8" translate="yes" xml:space="preserve">
          <source>def value(self):</source>
          <target state="translated">정의 값 (자체) :</target>
        </trans-unit>
        <trans-unit id="b1fb536ba968b73697eee7fba807fcc0afea8d01" translate="yes" xml:space="preserve">
          <source>define a constant &lt;code&gt;k = 1.3806488e-23&lt;/code&gt;</source>
          <target state="translated">상수 &lt;code&gt;k = 1.3806488e-23&lt;/code&gt; 정의</target>
        </trans-unit>
        <trans-unit id="2f887def33825e52ffbcca83446cfd6a6f676ff7" translate="yes" xml:space="preserve">
          <source>functions</source>
          <target state="translated">기능</target>
        </trans-unit>
        <trans-unit id="5dd96caa812ac72ca264221d288d3f75df69d7e6" translate="yes" xml:space="preserve">
          <source>symbol_table</source>
          <target state="translated">symbol_table</target>
        </trans-unit>
        <trans-unit id="bc5af2310c7f15770a4ed0028648ce367e3e2ec0" translate="yes" xml:space="preserve">
          <source>variables</source>
          <target state="translated">변수</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
