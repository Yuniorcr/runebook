<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/betacode/">
    <body>
      <group id="betacode">
        <trans-unit id="b3cd195562e841820415716910df47b2007b260d" translate="yes" xml:space="preserve">
          <source>Betacode to Unicode converter.</source>
          <target state="translated">유니 코드 변환기에 대한 베타 코드.</target>
        </trans-unit>
        <trans-unit id="edb1a6ec033b43b4f12fa32ef48e7f7bdc25b2bd" translate="yes" xml:space="preserve">
          <source>Betacode to unicode</source>
          <target state="translated">유니 코드에 대한 베타 코드</target>
        </trans-unit>
        <trans-unit id="d3e35f5e5ada536b2f1e73f7253568fbe387ecbf" translate="yes" xml:space="preserve">
          <source>Conversion can also be made more strict by using the</source>
          <target state="translated">변환은 또한 다음을 사용하여 더 엄격하게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1cf79be5352210b263ba6b50eb109f80d1fa447b" translate="yes" xml:space="preserve">
          <source>Convert betacode to unicode and vice-versa easily. Tested on python 3.4,
3.5, and 3.6. The definition used is based off what is found at the &lt;a href=&quot;http://www.tlg.uci.edu/encoding/BCM.pdf&quot;&gt;TLG
Beta Code Manual&lt;/a&gt;. Only the
Greek sections were paid attention to.</source>
          <target state="translated">베타 코드를 유니 코드로 또는 그 반대로 쉽게 변환하십시오. Python 3.4, 3.5 및 3.6에서 테스트되었습니다. 사용 된 정의는 &lt;a href=&quot;http://www.tlg.uci.edu/encoding/BCM.pdf&quot;&gt;TLG 베타 코드 매뉴얼&lt;/a&gt; 에있는 내용을 기반으로합니다 . 그리스어 섹션에만주의를 기울였습니다.</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">개발</target>
        </trans-unit>
        <trans-unit id="4f9d1ffdef409da197526ac8e0a70ed4114b38c3" translate="yes" xml:space="preserve">
          <source>I am no classicist, and this was done in my free time. It is very
possible that there are some letters missing that are not accounted for,
or some punctuation that is not properly handled. If that is the case,
please tell me as it is easy to fix, or please open a PR for your own
branch. Write tests if you do add a feature.</source>
          <target state="translated">나는 고전주의자가 아니며 이것은 자유 시간에 이루어졌습니다. 설명되지 않은 일부 문자가 누락되었거나 제대로 처리되지 않은 구두점이있을 수 있습니다. 이 경우 수정하기 쉽기 때문에 알려주거나 자신의 지점에 대한 PR을 열어주세요. 기능을 추가하는 경우 테스트를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="ee8b9d84394671720e5520119b9003f25d6b2e61" translate="yes" xml:space="preserve">
          <source>I was working a classics research project and had to use the Perseus
catalog to extract some Greek work. Much to my surprise however, the
only download I could find was a betacode version. An encoding that is
over 30 years old, rather than modern, fancy, clean unicode. There was
no nice pip package that I could easily go to for this simple task, so I
decided to roll my own.</source>
          <target state="translated">저는 고전 연구 프로젝트를 진행 중이었고 그리스 작품을 추출하기 위해 Perseus 카탈로그를 사용해야했습니다. 그러나 놀랍게도 내가 찾은 유일한 다운로드는 베타 코드 버전이었습니다. 현대적이고 화려하고 깨끗한 유니 코드가 아닌 30 년이 넘은 인코딩입니다. 이 간단한 작업을 위해 쉽게 갈 수있는 멋진 pip 패키지가 없었기 때문에 직접 롤링하기로 결정했습니다.</target>
        </trans-unit>
        <trans-unit id="f9e472db28ec4512052e2be84d83ba7247a0d307" translate="yes" xml:space="preserve">
          <source>If set, only the cannonical order of diacritics is accepted in betacode.
If it is not set, then any order is allowed as long as capital letters
begin with a</source>
          <target state="translated">설정된 경우 베타 코드에서는 정식 분음 부호 순서 만 허용됩니다. 설정되지 않은 경우 대문자가 a로 시작하는 한 모든 주문이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="bc10c1ba9c65203d7efd65666e78a5bc0108d0ff" translate="yes" xml:space="preserve">
          <source>Installation is easy. Use</source>
          <target state="translated">설치가 쉽습니다. 사용하다</target>
        </trans-unit>
        <trans-unit id="7dde410acbf56b51ab56a3843576b376cac25eb3" translate="yes" xml:space="preserve">
          <source>Modified Betacode</source>
          <target state="translated">수정 된 베타 코드</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">자극</target>
        </trans-unit>
        <trans-unit id="0f593d9187fbb07ef3caf4a052f9be2176f390e1" translate="yes" xml:space="preserve">
          <source>Note that in all examples, strings are unicode encoded. Input can be in
upper or lower case. The official definition from TLG uses only
uppercase, but many resources, such as the Perseus catalog, are encoded
in lowercase, so this package accepts both. This package also can
disregard the unnecessary cannonical order of Greek diacritics from the
official definition. The only thing that matters in order for the
betacode to be unambiguous is that each unit must either begin with a</source>
          <target state="translated">모든 예에서 문자열은 유니 코드로 인코딩됩니다. 입력은 대문자 또는 소문자 일 수 있습니다. TLG의 공식 정의는 대문자 만 사용하지만 Perseus 카탈로그와 같은 많은 리소스는 소문자로 인코딩되어 있으므로이 패키지는 둘 다 허용합니다. 이 패키지는 또한 공식 정의에서 그리스 분음 부호의 불필요한 대포 순서를 무시할 수 있습니다. 베타 코드를 명확하게하기 위해 중요한 것은 각 유닛이</target>
        </trans-unit>
        <trans-unit id="67d62af798a1335a54b51ef43d2356592fb7e949" translate="yes" xml:space="preserve">
          <source>Note that polytonic accent marks will be used, and not monotonic accent
marks. Both are de jure equivalent in Greece, but betacode was initially
developed to encode classic works so the polytonic diacritics are more
fitting. In other words, the oxe&amp;icirc;a will be used rather than t&amp;oacute;nos. The
oxe&amp;icirc;a form can be converted to the modern accent form easily either
through search and replace, or unicode normalization since oxe&amp;icirc;a has
canonical decomposition into t&amp;oacute;nos.</source>
          <target state="translated">단조 악센트 표시가 아닌 다조 악센트 표시가 사용됩니다. 둘 다 그리스에서 법적으로 동등하지만 베타 코드는 처음에 고전 작품을 인코딩하기 위해 개발되었으므로 다조 분음 부호가 더 적합합니다. 즉, t&amp;oacute;nos가 아닌 oxe&amp;icirc;a가 사용됩니다. oxe&amp;icirc;a 형식은 검색 및 바꾸기 또는 유니 코드 정규화를 통해 쉽게 현대적인 악센트 형식으로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d2cb022bc3d26bd1407c4aa787d5e46e1ad4c3b" translate="yes" xml:space="preserve">
          <source>Speed</source>
          <target state="translated">속도</target>
        </trans-unit>
        <trans-unit id="52625f21204b45641f1dede98d37a7a2c6f80aed" translate="yes" xml:space="preserve">
          <source>The original implementation used a custom made trie. This maybe was not
the fastest (I wasn&amp;rsquo;t sure). So, I compared against a third party trie
implementation, pygtrie. The pygtrie had nicer prefix methods which
allowed for much faster processing of large texts. This changed
converting all of Strabo or Herodotus in the Perseus catalog from a many
minute operation to a ~3-4 second operation. I have seen implementations
that use regular expressions which I suspsect might be faster since the
underlying implementation is in C. However, this package is much smaller
and simpler if betacode conversion is all that is needed than CLTK, for
example.</source>
          <target state="translated">원래 구현은 맞춤형 트라이를 사용했습니다. 이것은 아마도 가장 빠르지 않았을 것입니다 (확실하지 않았습니다). 그래서 저는 타사 트라이 구현 인 pygtrie와 비교했습니다. pygtrie는 큰 텍스트를 훨씬 빠르게 처리 할 수있는 더 좋은 접두사 메서드를 가지고있었습니다. 이것은 Perseus 카탈로그의 모든 Strabo 또는 Herodotus를 수 분 작업에서 ~ 3-4 초 작업으로 변환하는 변경 사항입니다. 기본 구현이 C에 있기 때문에 더 빠를 수 있다고 생각하는 정규 표현식을 사용하는 구현을 보았습니다. 그러나 예를 들어 베타 코드 변환이 CLTK보다 필요한 모든 것이면이 패키지는 훨씬 작고 간단합니다.</target>
        </trans-unit>
        <trans-unit id="e8d98e50a75680c2e1adf0e170c3b5e5fcf8fee1" translate="yes" xml:space="preserve">
          <source>The unicode text can use polytonic (oxe&amp;icirc;a) accent marks or monotonic
(t&amp;oacute;nos) accent marks can be used.</source>
          <target state="translated">유니 코드 텍스트는 다조 (oxe&amp;icirc;a) 악센트 표시를 사용하거나 단조 (t&amp;oacute;nos) 악센트 표시를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b5a218d6b551b88be739168aea5a263dc3fbe58" translate="yes" xml:space="preserve">
          <source>There is talk of a modified betacode that I have seen around on the
internet. I have never been able to find a definitive definition of this
so I have not implemented it. Among some differences is word final sigma
usage,</source>
          <target state="translated">내가 인터넷에서 본 수정 된 베타 코드에 대한 이야기가 있습니다. 나는 이것에 대한 명확한 정의를 찾을 수 없었기 때문에 구현하지 않았습니다. 몇 가지 차이점은 단어 최종 시그마 사용입니다.</target>
        </trans-unit>
        <trans-unit id="07aaf7420220a5eba14fd597cf4cea0bd5420e99" translate="yes" xml:space="preserve">
          <source>Unicode to betacode</source>
          <target state="translated">유니 코드를 베타 코드로</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="ae29b0081f3239bf52354c8f8b1fcf561680179e" translate="yes" xml:space="preserve">
          <source>and lowercase letters begin with the letter and not a
diacritic.</source>
          <target state="translated">소문자는 분음 부호가 아닌 문자로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="6f5f934cc78e6e5896946aeb30957705e6f177be" translate="yes" xml:space="preserve">
          <source>as macron, and uppercase and lowercase roman letters
instead of using</source>
          <target state="translated">대문자 및 소문자 로마 문자를 사용하는 대신</target>
        </trans-unit>
        <trans-unit id="a3e0b42d1b53e2bf0933e6f8de49d79f46e44cf6" translate="yes" xml:space="preserve">
          <source>betacode</source>
          <target state="translated">베타 코드</target>
        </trans-unit>
        <trans-unit id="964992a57d111bb0865d708e942f8599f79c480d" translate="yes" xml:space="preserve">
          <source>flag.</source>
          <target state="translated">깃발.</target>
        </trans-unit>
        <trans-unit id="dbc2295bf00cdf626f678a9ac7252675cfacfb76" translate="yes" xml:space="preserve">
          <source>or a letter. As long as these constraints are followed, breathing
marks, accents, and such can go in any order. However, the cannonical
order will be returned when going from unicode to betacode. Also note
that currently, only individual, non-combining characters are handled.
This means that you cannot do all combinations of letters and
diacritics. Only those defined as composite characters in the Greek and
Extended Greek sections of unicode.</source>
          <target state="translated">또는 편지. 이러한 제약을 따르는 한 숨쉬는 자국, 악센트 등은 어떤 순서로든 갈 수 있습니다. 그러나 유니 코드에서 베타 코드로 이동할 때 표준 순서가 반환됩니다. 또한 현재는 결합되지 않은 개별 문자 만 처리됩니다. 이것은 문자와 분음 부호의 모든 조합을 수행 할 수 없음을 의미합니다. 유니 코드의 그리스어 및 확장 그리스어 섹션에서 복합 문자로 정의 된 것만.</target>
        </trans-unit>
        <trans-unit id="2efa14a5fe81ce30b9830d1f03de2c01ee1b8319" translate="yes" xml:space="preserve">
          <source>or your preferred method to download
from PyPI.</source>
          <target state="translated">또는 PyPI에서 다운로드하기 위해 선호하는 방법.</target>
        </trans-unit>
        <trans-unit id="e1f1eb75c7bbf4dc71204486628790128a241e4f" translate="yes" xml:space="preserve">
          <source>pip</source>
          <target state="translated">씨</target>
        </trans-unit>
        <trans-unit id="41eaab877ca3a0e3aa14f5a4b7981f590e3c2bd6" translate="yes" xml:space="preserve">
          <source>strict</source>
          <target state="translated">엄격한</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
