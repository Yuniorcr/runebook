<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/marshmallow-dataclass/">
    <body>
      <group id="marshmallow-dataclass">
        <trans-unit id="e859ec6d61c1082228e673bdd76e448055bcb800" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://marshmallow.readthedocs.io/en/stable/api_reference.html#marshmallow.Schema.Meta&quot;&gt;&lt;code&gt;Meta&lt;/code&gt; options&lt;/a&gt; are set the same way as a marshmallow &lt;code&gt;Schema&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://marshmallow.readthedocs.io/en/stable/api_reference.html#marshmallow.Schema.Meta&quot;&gt; &lt;code&gt;Meta&lt;/code&gt; 옵션&lt;/a&gt; 은 마시멜로 &lt;code&gt;Schema&lt;/code&gt; 와 동일한 방식으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="8d6276e59cd7dee0598448be374f28420c2252c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@dataclass&lt;/code&gt; shortcut</source>
          <target state="translated">&lt;code&gt;@dataclass&lt;/code&gt; 바로 가기</target>
        </trans-unit>
        <trans-unit id="b51a248c23224bdb2f919f41517f79735a192f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Meta&lt;/code&gt; options</source>
          <target state="translated">&lt;code&gt;Meta&lt;/code&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="71d5fc5b8215eaacde845ccea924113778d92f24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enum&lt;/code&gt; : for translating python enums to &lt;a href=&quot;https://github.com/justanr/marshmallow_enum&quot;&gt;marshmallow-enum&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enum&lt;/code&gt; : 파이썬 열거 형을 &lt;a href=&quot;https://github.com/justanr/marshmallow_enum&quot;&gt;marshmallow-enum으로&lt;/a&gt; 번역 합니다.</target>
        </trans-unit>
        <trans-unit id="f2458713fa13184e11e4eb87a3b23af37b0cc3ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;marshmallow-dataclass&lt;/code&gt; no longer supports marshmallow 2.
Install &lt;code&gt;marshmallow_dataclass&amp;lt;6.0&lt;/code&gt; if you need marshmallow 2 compatibility.</source>
          <target state="translated">&lt;code&gt;marshmallow-dataclass&lt;/code&gt; 는 더 이상 marshmallow 2를 지원하지 않습니다 . marshmallow 2 호환성이 필요한 경우 &lt;code&gt;marshmallow_dataclass&amp;lt;6.0&lt;/code&gt; 설치하십시오 .</target>
        </trans-unit>
        <trans-unit id="049e81ba58a945239a6a0c5aa861398c9a2f0562" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;marshmallow_dataclass&lt;/code&gt; provides a &lt;code&gt;@dataclass&lt;/code&gt; decorator that behaves like the standard library's
&lt;code&gt;@dataclasses.dataclass&lt;/code&gt; and adds a &lt;code&gt;Schema&lt;/code&gt; attribute with the generated marshmallow
&lt;a href=&quot;https://marshmallow.readthedocs.io/en/2.x-line/api_reference.html#marshmallow.Schema&quot;&gt;Schema&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;marshmallow_dataclass&lt;/code&gt; 는 표준 라이브러리의 &lt;code&gt;@dataclasses.dataclass&lt;/code&gt; 처럼 동작 하는 &lt;code&gt;@dataclass&lt;/code&gt; 데코레이터를 제공 하고 생성 된 marshmallow &lt;a href=&quot;https://marshmallow.readthedocs.io/en/2.x-line/api_reference.html#marshmallow.Schema&quot;&gt;Schema&lt;/a&gt; 와 함께 &lt;code&gt;Schema&lt;/code&gt; 속성을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="d72942fb8e42b324ae2cf4a8f49cf6c30e680d37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;union&lt;/code&gt; : for translating python &lt;a href=&quot;https://docs.python.org/3/library/typing.html#typing.Union&quot;&gt;&lt;code&gt;Union&lt;/code&gt; types&lt;/a&gt; to union fields.</source>
          <target state="translated">&lt;code&gt;union&lt;/code&gt; : 파이썬 &lt;a href=&quot;https://docs.python.org/3/library/typing.html#typing.Union&quot;&gt; &lt;code&gt;Union&lt;/code&gt; 유형&lt;/a&gt; 을 유니온 필드 로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="6cdb83c458f0d3b43d78def9d6b5665b1a1dc390" translate="yes" xml:space="preserve">
          <source>Automatic generation of &lt;a href=&quot;https://marshmallow.readthedocs.io/&quot;&gt;marshmallow&lt;/a&gt; schemas from dataclasses.</source>
          <target state="translated">데이터 클래스에서 &lt;a href=&quot;https://marshmallow.readthedocs.io/&quot;&gt;마시멜로&lt;/a&gt; 스키마 자동 생성 .</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">기여</target>
        </trans-unit>
        <trans-unit id="91c1db622dce21d6c161ffa4e2be4c13115d0f9a" translate="yes" xml:space="preserve">
          <source>Custom NewType declarations</source>
          <target state="translated">사용자 정의 NewType 선언</target>
        </trans-unit>
        <trans-unit id="ebec891da2671ead2d01a96b5cc6defdea98d99f" translate="yes" xml:space="preserve">
          <source>Custom mapping between classes and fields</source>
          <target state="translated">클래스와 필드 간의 사용자 지정 매핑</target>
        </trans-unit>
        <trans-unit id="579d2bc7d8bf489ae7d43529865646d08014e128" translate="yes" xml:space="preserve">
          <source>Customizing generated fields</source>
          <target state="translated">생성 된 필드 사용자 정의</target>
        </trans-unit>
        <trans-unit id="60db41edfe68e314f4a708b8ec45d3b9a166eee7" translate="yes" xml:space="preserve">
          <source>Customizing the base Schema</source>
          <target state="translated">기본 스키마 사용자 지정</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">선적 서류 비치</target>
        </trans-unit>
        <trans-unit id="6dba29060447a1be696d1a1e4ef68ca1c8143969" translate="yes" xml:space="preserve">
          <source>Every commit is checked with pre-commit hooks for :</source>
          <target state="translated">모든 커밋은 다음에 대한 사전 커밋 후크로 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="60fb3466b944f3edd9f647937117eb4f95cca200" translate="yes" xml:space="preserve">
          <source>It is also possible to derive all schemas from your own
base Schema class
(see &lt;a href=&quot;https://marshmallow.readthedocs.io/en/stable/extending.html&quot;&gt;marshmallow's documentation about extending &lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt;).
This allows you to implement custom (de)serialization
behavior, for instance specifying a custom mapping between your classes and marshmallow fields,
or renaming fields on serialization.</source>
          <target state="translated">자체 기본 Schema 클래스에서 모든 스키마를 파생 할 수도 있습니다 ( &lt;a href=&quot;https://marshmallow.readthedocs.io/en/stable/extending.html&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt; 확장에 대한 marshmallow의 문서 참조 ). 이를 통해 사용자 정의 (비) 직렬화 동작을 구현할 수 있습니다. 예를 들어 클래스와 마시멜로 필드간에 사용자 정의 매핑을 지정하거나 직렬화에서 필드 이름을 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="543e5d76b49f5d1ba453600324179c44a96d8e3c" translate="yes" xml:space="preserve">
          <source>Keyword arguments to &lt;code&gt;NewType&lt;/code&gt; are passed to the marshmallow field constructor.</source>
          <target state="translated">&lt;code&gt;NewType&lt;/code&gt; 에 대한 키워드 인수 는 marshmallow 필드 생성자에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="1e2e290443fe30ada4f3aaa6c5102be96e0517dd" translate="yes" xml:space="preserve">
          <source>Note: Since the &lt;code&gt;.Schema&lt;/code&gt; property is added dynamically, it can confuse type checkers.
To avoid that, you can declare &lt;code&gt;Schema&lt;/code&gt; as a &lt;a href=&quot;https://docs.python.org/3/library/typing.html#typing.ClassVar&quot;&gt;&lt;code&gt;ClassVar&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">참고 : &lt;code&gt;.Schema&lt;/code&gt; 속성이 동적으로 추가 되므로 유형 검사기를 혼동 할 수 있습니다. 이를 방지하기 위해 &lt;code&gt;Schema&lt;/code&gt; 를 &lt;a href=&quot;https://docs.python.org/3/library/typing.html#typing.ClassVar&quot;&gt; &lt;code&gt;ClassVar&lt;/code&gt; &lt;/a&gt; 로 선언 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bc204f43a106087371d7ed60699c22e5e561f21a" translate="yes" xml:space="preserve">
          <source>Note: if you are using &lt;code&gt;mypy&lt;/code&gt;, you will notice that &lt;code&gt;mypy&lt;/code&gt; throws an error if a variable defined with
&lt;code&gt;NewType&lt;/code&gt; is used in a type annotation. To resolve this, add the &lt;code&gt;marshmallow_dataclass.mypy&lt;/code&gt; plugin
to your &lt;code&gt;mypy&lt;/code&gt; configuration, e.g.:</source>
          <target state="translated">참고 : &lt;code&gt;mypy&lt;/code&gt; 를 사용 하는 경우 &lt;code&gt;NewType&lt;/code&gt; 으로 정의 된 변수 가 유형 주석에 사용 되면 &lt;code&gt;mypy&lt;/code&gt; 에서 오류가 발생 함을 알 수 있습니다. 이 문제를 해결하려면 &lt;code&gt;mypy&lt;/code&gt; 구성에 &lt;code&gt;marshmallow_dataclass.mypy&lt;/code&gt; 플러그인을 추가하십시오 . 예 :</target>
        </trans-unit>
        <trans-unit id="2bca6f0f0d026313cc3c788b7be9bac76b5aea86" translate="yes" xml:space="preserve">
          <source>Python library to convert dataclasses into marshmallow schemas.</source>
          <target state="translated">데이터 클래스를 마시멜로 스키마로 변환하는 Python 라이브러리.</target>
        </trans-unit>
        <trans-unit id="c9e28bad31a09130cbe5bb2ab86104c52ebb1db5" translate="yes" xml:space="preserve">
          <source>Renaming fields on serialization</source>
          <target state="translated">직렬화에서 필드 이름 바꾸기</target>
        </trans-unit>
        <trans-unit id="6e9e73ee41b2b6117ff4030bd81268267185721f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://marshmallow.readthedocs.io/en/stable/extending.html&quot;&gt;marshmallow's documentation about extending &lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://marshmallow.readthedocs.io/en/stable/extending.html&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt; 확장에 대한 marshmallow의 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e05a526cb6c593b4870ccc5d350eb02936f70f77" translate="yes" xml:space="preserve">
          <source>The project documentation is hosted on GitHub Pages: &lt;a href=&quot;https://lovasoa.github.io/marshmallow_dataclass/&quot;&gt;https://lovasoa.github.io/marshmallow_dataclass/&lt;/a&gt;</source>
          <target state="translated">프로젝트 문서는 GitHub 페이지에서 호스팅됩니다 : &lt;a href=&quot;https://lovasoa.github.io/marshmallow_dataclass/&quot;&gt;https://lovasoa.github.io/marshmallow_dataclass/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="47b946c799a82416622fea8675af75cb1ce49186" translate="yes" xml:space="preserve">
          <source>Therefore, you can document your APIs in a way that allows you to statically check that the code matches the documentation.</source>
          <target state="translated">따라서 코드가 문서와 일치하는지 정적으로 확인할 수있는 방식으로 API를 문서화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="babc2d95edc4c437382558946bfa61f32ce46f85" translate="yes" xml:space="preserve">
          <source>This library depends on python's standard &lt;a href=&quot;https://docs.python.org/3/library/typing.html&quot;&gt;typing&lt;/a&gt; library, which is &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-provisional-api&quot;&gt;provisional&lt;/a&gt;.</source>
          <target state="translated">이 라이브러리는 파이썬의 표준에 따라 &lt;a href=&quot;https://docs.python.org/3/library/typing.html&quot;&gt;타이핑&lt;/a&gt; 이다 도서관, &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-provisional-api&quot;&gt;임시&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5d277564658fb478c370f1faa77ae692fe4dfaee" translate="yes" xml:space="preserve">
          <source>This library exports a &lt;code&gt;NewType&lt;/code&gt; function to create types that generate &lt;a href=&quot;https://marshmallow.readthedocs.io/en/stable/custom_fields.html#creating-a-field-class&quot;&gt;customized marshmallow fields&lt;/a&gt;.</source>
          <target state="translated">이 라이브러리 는 &lt;a href=&quot;https://marshmallow.readthedocs.io/en/stable/custom_fields.html#creating-a-field-class&quot;&gt;사용자 정의 된 마시멜로 필드&lt;/a&gt; 를 생성하는 유형을 생성하기 위해 &lt;code&gt;NewType&lt;/code&gt; 함수를 내 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="7729288104e6e54dddd9b31e49e82dd1ebdffcbe" translate="yes" xml:space="preserve">
          <source>This package &lt;a href=&quot;https://pypi.org/project/marshmallow-dataclass/&quot;&gt;is hosted on PyPI&lt;/a&gt;.</source>
          <target state="translated">이 패키지 &lt;a href=&quot;https://pypi.org/project/marshmallow-dataclass/&quot;&gt;는 PyPI에서 호스팅됩니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a92e1376c99ed9a8541895334efbe1414a92d554" translate="yes" xml:space="preserve">
          <source>To pass arguments to the generated marshmallow fields (e.g., &lt;code&gt;validate&lt;/code&gt;, &lt;code&gt;load_only&lt;/code&gt;, &lt;code&gt;dump_only&lt;/code&gt;, etc.),
pass them to the &lt;code&gt;metadata&lt;/code&gt; argument of the
&lt;a href=&quot;https://docs.python.org/3/library/dataclasses.html#dataclasses.field&quot;&gt;&lt;code&gt;field&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">생성 된 마시멜로 필드 (예 : &lt;code&gt;validate&lt;/code&gt; , &lt;code&gt;load_only&lt;/code&gt; , &lt;code&gt;dump_only&lt;/code&gt; 등)에 인수를 전달하려면 &lt;a href=&quot;https://docs.python.org/3/library/dataclasses.html#dataclasses.field&quot;&gt; &lt;code&gt;field&lt;/code&gt; &lt;/a&gt; 함수 의 &lt;code&gt;metadata&lt;/code&gt; 인수에 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="bff6a85a6b2d388d7c8680e7806e05b8d3c3676b" translate="yes" xml:space="preserve">
          <source>Usage warning</source>
          <target state="translated">사용 경고</target>
        </trans-unit>
        <trans-unit id="391291d79d5a2bc8077d6ee935ccefc7c0186cea" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://lovasoa.github.io/marshmallow_dataclass/html/marshmallow_dataclass.html#marshmallow_dataclass.class_schema&quot;&gt;&lt;code&gt;class_schema&lt;/code&gt;&lt;/a&gt;
function to generate a marshmallow &lt;a href=&quot;https://marshmallow.readthedocs.io/en/latest/api_reference.html#marshmallow.Schema&quot;&gt;Schema&lt;/a&gt;
class from a &lt;a href=&quot;https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용 &lt;a href=&quot;https://lovasoa.github.io/marshmallow_dataclass/html/marshmallow_dataclass.html#marshmallow_dataclass.class_schema&quot;&gt; &lt;code&gt;class_schema&lt;/code&gt; 의&lt;/a&gt; 멜로 생성하는 기능을 &lt;a href=&quot;https://marshmallow.readthedocs.io/en/latest/api_reference.html#marshmallow.Schema&quot;&gt;스키마&lt;/a&gt; A로부터 클래스 &lt;a href=&quot;https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass&quot;&gt; &lt;code&gt;dataclass&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b67ff79aede207af8da03fd4305241e7ef28939d" translate="yes" xml:space="preserve">
          <source>Using schemas in Python often means having both a class to represent your data and a class to represent its schema, which results in duplicated code that could fall out of sync.
As of Python 3.6, types can be defined for class members, which allows libraries to generate schemas automatically.</source>
          <target state="translated">Python에서 스키마를 사용한다는 것은 데이터를 나타내는 클래스와 스키마를 나타내는 클래스를 모두 갖는 것을 의미합니다. 따라서 중복 된 코드가 동기화되지 않을 수 있습니다. Python 3.6부터 클래스 멤버에 대해 유형을 정의 할 수 있으므로 라이브러리가 스키마를 자동으로 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="21e2caea4476d26af34541ca7c909c7ff2fa4a7f" translate="yes" xml:space="preserve">
          <source>Why</source>
          <target state="translated">왜</target>
        </trans-unit>
        <trans-unit id="6868aca8cf53d04cc3c66b05f0bf58ba3463f5db" translate="yes" xml:space="preserve">
          <source>You can also pass &lt;code&gt;base_schema&lt;/code&gt; to &lt;code&gt;marshmallow_dataclass.dataclass&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;base_schema&lt;/code&gt; 를 &lt;code&gt;marshmallow_dataclass.dataclass&lt;/code&gt; 에 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b67176e73eb0a77b0d3f1d283159444da1997fcb" translate="yes" xml:space="preserve">
          <source>You can also pass a marshmallow field to &lt;code&gt;NewType&lt;/code&gt;.</source>
          <target state="translated">마시멜로 필드를 &lt;code&gt;NewType&lt;/code&gt; 에 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="955656321237de887cc65300ac7f715af231dce5" translate="yes" xml:space="preserve">
          <source>You may optionally install the following extras:</source>
          <target state="translated">선택적으로 다음 추가 항목을 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74de300dc3f48db3f4dabec6b98a790ec4440b8f" translate="yes" xml:space="preserve">
          <source>marshmallow 2 support</source>
          <target state="translated">마시멜로 2 지원</target>
        </trans-unit>
        <trans-unit id="bb0f6b99f80acd71f1c0f283ff9e8c81d2621cef" translate="yes" xml:space="preserve">
          <source>marshmallow-dataclass</source>
          <target state="translated">마시멜로 데이터 클래스</target>
        </trans-unit>
        <trans-unit id="55475e6bea3c3fb0dc90a6c7cc846bab6061cb09" translate="yes" xml:space="preserve">
          <source>style consistency with &lt;a href=&quot;https://flake8.pycqa.org/en/latest/manpage.html&quot;&gt;flake8&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://flake8.pycqa.org/en/latest/manpage.html&quot;&gt;flake8&lt;/a&gt; 과 스타일 일관성</target>
        </trans-unit>
        <trans-unit id="34c92bfafdbe209902f3bf05ad5a8e7e130c1162" translate="yes" xml:space="preserve">
          <source>test conformance by running &lt;a href=&quot;./tests&quot;&gt;tests&lt;/a&gt; with &lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;pytest로 &lt;/a&gt;&lt;a href=&quot;./tests&quot;&gt;테스트&lt;/a&gt; 를 실행 하여 적합성 테스트</target>
        </trans-unit>
        <trans-unit id="a3b921da6e576d7920bae2bcac36694b155159f4" translate="yes" xml:space="preserve">
          <source>type safety with &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy로&lt;/a&gt; 유형 안전성</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
