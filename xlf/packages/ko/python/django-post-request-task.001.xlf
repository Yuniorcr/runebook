<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/django-post-request-task/">
    <body>
      <group id="django-post-request-task">
        <trans-unit id="9c6a262e123f8cec5208a5e1ce3b503879875167" translate="yes" xml:space="preserve">
          <source>@atomic</source>
          <target state="translated">@atomic</target>
        </trans-unit>
        <trans-unit id="3a282220304a1ac2f5056bbf0b729c4e6019b781" translate="yes" xml:space="preserve">
          <source>A celery 3.x task class whose execution is delayed until after the request
finishes, using</source>
          <target state="translated">요청이 완료 될 때까지 실행이 지연되는 celery 3.x 작업 클래스</target>
        </trans-unit>
        <trans-unit id="9b53bdae5c9adad66e8048cc6988e4b7af27ab3d" translate="yes" xml:space="preserve">
          <source>A celery task class whose execution is delayed until after the request finishes</source>
          <target state="translated">요청이 완료 될 때까지 실행이 지연되는 셀러리 태스크 클래스</target>
        </trans-unit>
        <trans-unit id="a7fa8efb5fd2089844f8ee2c0842bd372a21b5e9" translate="yes" xml:space="preserve">
          <source>ATOMIC_REQUESTS</source>
          <target state="translated">ATOMIC_REQUESTS</target>
        </trans-unit>
        <trans-unit id="808e9d4c7515cbc677e6dbe63d1e593abe8dd26f" translate="yes" xml:space="preserve">
          <source>As a bonus feature, if the same task is called with the same argument several
times during a request-response cycle, it will only be queued up once.</source>
          <target state="translated">보너스 기능으로 요청-응답주기 동안 동일한 인수로 동일한 작업이 여러 번 호출되면 한 번만 대기열에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="0215ec6c36578b6ee32c720b3e3e56f4d8ae21b4" translate="yes" xml:space="preserve">
          <source>By default, tests are run with whatever django version is installed. If you want to run tests for other versions
use tox:</source>
          <target state="translated">기본적으로 테스트는 설치된 django 버전에 관계없이 실행됩니다. 다른 버전에 대한 테스트를 실행하려면 tox를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e8d21aae998f108f27cc676cfc04709ebbc6bf82" translate="yes" xml:space="preserve">
          <source>By listening to the</source>
          <target state="translated">듣고</target>
        </trans-unit>
        <trans-unit id="48cab693eb729d55251cc97a744543bb36e4c1fe" translate="yes" xml:space="preserve">
          <source>Or, if you are using the task decorator directly:</source>
          <target state="translated">또는 작업 데코레이터를 직접 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="be64280ade23e74f60a4ce8d57444019c4382156" translate="yes" xml:space="preserve">
          <source>Running tests</source>
          <target state="translated">테스트 실행</target>
        </trans-unit>
        <trans-unit id="d364fe82578a64da294328080ac6f8cbc2da2ce4" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it. If the task is called from outside the django request-response
cycle, then it will be triggered normally.</source>
          <target state="translated">그게 다야. 작업이 django 요청-응답주기 외부에서 호출되면 정상적으로 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="f68aef7ca54e3aa4454b14f4b3f778baf9b05eff" translate="yes" xml:space="preserve">
          <source>This is useful if your views are wrapped in transactions (as they should if
you&amp;rsquo;re making database modifications in them), as you can end up triggering a
celery task too soon before the transaction has been committed (or even trigger
a task when the corresponding transaction has been rolled back).</source>
          <target state="translated">이는 뷰가 트랜잭션으로 래핑 된 경우에 유용합니다 (데이터베이스 수정을 수행하는 경우 그래야 함). 트랜잭션이 커밋되기 전에 너무 빨리 셀러리 작업을 트리거하거나 해당 트랜잭션이 롤백되었습니다).</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">과</target>
        </trans-unit>
        <trans-unit id="a4746a7771db14dacb5a8b872972117e030be30a" translate="yes" xml:space="preserve">
          <source>django signals, we
can safely trigger a task after all transactions created from</source>
          <target state="translated">django 신호, 모든 트랜잭션이 생성 된 후 안전하게 작업을 트리거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="158ed7c023ecfd114c86a7b33565c5de6e04f266" translate="yes" xml:space="preserve">
          <source>have been committed.</source>
          <target state="translated">약속되었습니다.</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">또는</target>
        </trans-unit>
        <trans-unit id="1f5de95823f94b880c38a080d68de9aecdac36be" translate="yes" xml:space="preserve">
          <source>request_finished</source>
          <target state="translated">request_finished</target>
        </trans-unit>
        <trans-unit id="5979286ffbded94e077edc3e8d4a391fc1d68823" translate="yes" xml:space="preserve">
          <source>request_started</source>
          <target state="translated">request_started</target>
        </trans-unit>
        <trans-unit id="469dd20c0176df356dbf53964eb0ad37a3499e2c" translate="yes" xml:space="preserve">
          <source>signals from django
and thread locals.</source>
          <target state="translated">장고 및 스레드 지역의 신호.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
