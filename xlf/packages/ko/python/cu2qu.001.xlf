<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/cu2qu/">
    <body>
      <group id="cu2qu">
        <trans-unit id="7739136dc697141cd8d76585cab6736b910f012b" translate="yes" xml:space="preserve">
          <source>(or</source>
          <target state="translated">(또는</target>
        </trans-unit>
        <trans-unit id="35ff59f1757a1944b8ce4cfe244ed15660054f77" translate="yes" xml:space="preserve">
          <source>) mode:</source>
          <target state="translated">) 모드 :</target>
        </trans-unit>
        <trans-unit id="4126eaa1ad9d4d3f568a3aa60bc75e582b5dc6a4" translate="yes" xml:space="preserve">
          <source>), and then use the global option</source>
          <target state="translated">) 다음 전역 옵션을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3515cb6d2089484641f48d16f9ad5eaf9e75541b" translate="yes" xml:space="preserve">
          <source>--editable</source>
          <target state="translated">-편집 가능</target>
        </trans-unit>
        <trans-unit id="51a11bde9f418c43a742d4872926f70fac030487" translate="yes" xml:space="preserve">
          <source>--global-option</source>
          <target state="translated">-글로벌 옵션</target>
        </trans-unit>
        <trans-unit id="9a8265a5ba2c33881e2717e7581df323a5188174" translate="yes" xml:space="preserve">
          <source>--help</source>
          <target state="translated">--도움</target>
        </trans-unit>
        <trans-unit id="2409dbb844cb1f81941d2ceb0136d6ea85918bbe" translate="yes" xml:space="preserve">
          <source>--with-cython</source>
          <target state="translated">--cython 포함</target>
        </trans-unit>
        <trans-unit id="2360917b9377a0f8f526499aa422e769e1252d5b" translate="yes" xml:space="preserve">
          <source>-e</source>
          <target state="translated">-이자형</target>
        </trans-unit>
        <trans-unit id="4bf031a80e9f0db8a2a223e30a4d10780ec25e1a" translate="yes" xml:space="preserve">
          <source>.
Check its</source>
          <target state="translated">. 확인</target>
        </trans-unit>
        <trans-unit id="31c9f7538d545b4835f11242466a14d794bd775b" translate="yes" xml:space="preserve">
          <source>CU2QU_WITH_CYTHON=1</source>
          <target state="translated">CU2QU_WITH_CYTHON = 1</target>
        </trans-unit>
        <trans-unit id="de13b5293805e71af7639a8555435df96ec4ae95" translate="yes" xml:space="preserve">
          <source>Cubic-to-quadratic bezier curve conversion</source>
          <target state="translated">3 차에서 2 차 베 지어 곡선으로 변환</target>
        </trans-unit>
        <trans-unit id="a7ccc4ada9faaae2f3382702ec4d86a2e99e5eb1" translate="yes" xml:space="preserve">
          <source>For example, to build the cu2qu extension module in-place (i.e. in the same
source directory):</source>
          <target state="translated">예를 들어, cu2qu 확장 모듈을 제자리에 (즉, 동일한 소스 디렉토리에) 빌드하려면 :</target>
        </trans-unit>
        <trans-unit id="8fb253255ce8087c9fa3e039e73ea6c27f3cea3d" translate="yes" xml:space="preserve">
          <source>If you have cloned the git repository, the C source files are not present and
need to be regenerated. To do that, you need to install the latest Cython
(as usual,</source>
          <target state="translated">git 저장소를 복제 한 경우 C 소스 파일이 존재하지 않으므로 다시 생성해야합니다. 이를 위해서는 최신 Cython을 설치해야합니다 (평소처럼</target>
        </trans-unit>
        <trans-unit id="74cc0eeab3c6ec1e8f2c83f5e0207b34d48f0b25" translate="yes" xml:space="preserve">
          <source>If you wish to modify the sources in-place, you can clone the git repository
from Github and install in</source>
          <target state="translated">소스를 제자리에서 수정하려면 Github에서 git 저장소를 복제하고 다음 위치에 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="3035caa6305226b744b1ea162fc3020baa859bce" translate="yes" xml:space="preserve">
          <source>Interpolation compatibility is guaranteed during conversion. If it&amp;rsquo;s not
needed, converting one font at a time may yield more optimized results:</source>
          <target state="translated">변환 중에 보간 호환성이 보장됩니다. 필요하지 않은 경우 한 번에 하나의 글꼴을 변환하면 더 최적화 된 결과를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="813f7c2f7f4633a852ca19870655e4e1b8cdbe2c" translate="yes" xml:space="preserve">
          <source>Optionally, you can build an optimized version of cu2qu which uses &lt;a href=&quot;https://github.com/cython/cython&quot;&gt;Cython&lt;/a&gt;
to compile Python to C. The extension module thus created is &lt;em&gt;more than
twice as fast&lt;/em&gt; than its pure-Python equivalent.</source>
          <target state="translated">선택적으로 &lt;a href=&quot;https://github.com/cython/cython&quot;&gt;Cython&lt;/a&gt; 을 사용 하여 Python을 C로 컴파일 하는 cu2qu의 최적화 된 버전을 빌드 할 수 있습니다 . 이렇게 생성 된 확장 모듈 은 순수 Python에 해당하는 것 &lt;em&gt;보다 두 배&lt;/em&gt; 이상 &lt;em&gt;빠릅니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="39dbdecb441816090957cb06b246a7e4a0301376" translate="yes" xml:space="preserve">
          <source>Some fonts may need a different error threshold than the default (0.001
em). This can also be provided by the caller:</source>
          <target state="translated">일부 글꼴에는 기본값 (0.001 em)과 다른 오류 임계 값이 필요할 수 있습니다. 호출자가 제공 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f13c9450644dabff84b22eadf04a26c76e842f97" translate="yes" xml:space="preserve">
          <source>The library also provides a command-line script also named</source>
          <target state="translated">라이브러리는 또한 다음과 같은 명령 줄 스크립트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="7a8f075aeba8e47113dd0b389ca3feb24cd785ff" translate="yes" xml:space="preserve">
          <source>This library provides functions which take in UFO objects (Defcon Fonts
or Robofab RFonts) and converts any cubic curves to quadratic. The most
useful function is probably</source>
          <target state="translated">이 라이브러리는 UFO 개체 (Defcon Fonts 또는 Robofab RFonts)를 가져와 모든 입방 곡선을 2 차로 변환하는 함수를 제공합니다. 가장 유용한 기능은 아마도</target>
        </trans-unit>
        <trans-unit id="8a3d34371c839fd3fa3d0a04f9db2900c1fb3692" translate="yes" xml:space="preserve">
          <source>This will download the latest stable version available from the Python
Package Index (PyPI).</source>
          <target state="translated">이렇게하면 PyPI (Python Package Index)에서 사용할 수있는 최신 안정 버전이 다운로드됩니다.</target>
        </trans-unit>
        <trans-unit id="46e66f6f6ae97d47d9101da9ee872b4841ea9662" translate="yes" xml:space="preserve">
          <source>When installing cu2qu from PyPI using pip, as long as you have a C compiler
available, the cu2qu setup script will automatically attempt to build a
C/Python extension module. If the compilation fails for any reasons, an error
is printed and cu2qu will be installed as pure-Python, without the optimized
extension.</source>
          <target state="translated">pip를 사용하여 PyPI에서 cu2qu를 설치할 때 C 컴파일러를 사용할 수있는 한 cu2qu 설정 스크립트는 자동으로 C / Python 확장 모듈 빌드를 시도합니다. 어떤 이유로 든 컴파일이 실패하면 오류가 인쇄되고 cu2qu는 최적화 된 확장없이 pure-Python으로 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="23a3e9a65c7eed785bc48509feae93af3929bfc5" translate="yes" xml:space="preserve">
          <source>You can also pass</source>
          <target state="translated">통과 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0f5d1433107dd661ca2741e23bc4a0ff5e92bed" translate="yes" xml:space="preserve">
          <source>You can install/upgrade cu2qu using pip, like any other Python package.</source>
          <target state="translated">다른 Python 패키지와 마찬가지로 pip를 사용하여 cu2qu를 설치 / 업그레이드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="62ede488616689051aa1bada35cc3eda7e5d143a" translate="yes" xml:space="preserve">
          <source>can print a string reporting the number of curves
of each length. For example</source>
          <target state="translated">각 길이의 곡선 수를보고하는 문자열을 인쇄 할 수 있습니다. 예를 들면</target>
        </trans-unit>
        <trans-unit id="f81019bd418ef37925ba4c15e706700adb830534" translate="yes" xml:space="preserve">
          <source>cu2qu</source>
          <target state="translated">cu2qu</target>
        </trans-unit>
        <trans-unit id="673e91f8fdab380718b1c007f83e1dd19dd7f158" translate="yes" xml:space="preserve">
          <source>environment variable if you prefer.</source>
          <target state="translated">원하는 경우 환경 변수.</target>
        </trans-unit>
        <trans-unit id="89a84eb90fe8d75d3c2f2d4161c173cefad26ef2" translate="yes" xml:space="preserve">
          <source>fonts_to_quadratic</source>
          <target state="translated">fonts_to_quadratic</target>
        </trans-unit>
        <trans-unit id="9aebafa2e1cf5e690fac575d914a7a225b46769e" translate="yes" xml:space="preserve">
          <source>fonts_to_quadratic([font], dump_stats=True)</source>
          <target state="translated">fonts_to_quadratic ([글꼴], dump_stats = True)</target>
        </trans-unit>
        <trans-unit id="6988a338d03964fcb6f3634588014e8f6b60b13c" translate="yes" xml:space="preserve">
          <source>may print something
like:</source>
          <target state="translated">다음과 같이 인쇄 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f92a02fc2a4d584b81b3165e470f9a088c9475eb" translate="yes" xml:space="preserve">
          <source>meaning that the font now contains 1000 curves with three points, 2000
with four points, and 100 with five. Given multiple fonts, the function
will report the total counts across all fonts. You can also accumulate
statistics between calls by providing your own report dictionary:</source>
          <target state="translated">즉, 글꼴에는 이제 3 개 점이있는 1000 개의 곡선, 4 개 점이있는 2000 개, 5 개가있는 100 개가 있습니다. 여러 글꼴이 주어지면이 함수는 모든 글꼴의 총 개수를보고합니다. 자체 보고서 사전을 제공하여 호출간에 통계를 누적 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a400afd3bdbcbbe443ba8312904b0c0c9dcff16" translate="yes" xml:space="preserve">
          <source>pip install -U cython</source>
          <target state="translated">pip 설치 -U cython</target>
        </trans-unit>
        <trans-unit id="372b42996e793b1cb3419275c40075f2d527575f" translate="yes" xml:space="preserve">
          <source>script. You can also export
a</source>
          <target state="translated">스크립트. 또한 내보낼 수 있습니다</target>
        </trans-unit>
        <trans-unit id="8e2edce0d507e1297474f25c00cae94258db38d8" translate="yes" xml:space="preserve">
          <source>setup.py</source>
          <target state="translated">setup.py</target>
        </trans-unit>
        <trans-unit id="04f390e6147cb095d3e061ef92c62fb6a514da8b" translate="yes" xml:space="preserve">
          <source>to see all the options.</source>
          <target state="translated">모든 옵션을 보려면.</target>
        </trans-unit>
        <trans-unit id="7d7c8de9493fc2d4f706302317e23c526893ffaa" translate="yes" xml:space="preserve">
          <source>when installing with pip from a local
source checkout, like so:</source>
          <target state="translated">다음과 같이 로컬 소스 체크 아웃에서 pip로 설치할 때 :</target>
        </trans-unit>
        <trans-unit id="bc3dee14fec66ef0ed25d9c4a4e7e7d1a7763166" translate="yes" xml:space="preserve">
          <source>when invoking the</source>
          <target state="translated">호출 할 때</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
