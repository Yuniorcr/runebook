<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/pydatalog/">
    <body>
      <group id="pydatalog">
        <trans-unit id="30ee3e160c87f4cb08e4464e6c9ce673e7576c41" translate="yes" xml:space="preserve">
          <source>#### Datalog = SQL + recursivity
Datalog is a truly declarative language derived from Prolog, with strong academic foundations.  It complements Python very well for:</source>
          <target state="translated">#### Datalog = SQL + recursivity Datalog는 강력한 학문적 기반을 갖춘 Prolog에서 파생 된 진정한 선언적 언어입니다. 다음과 같은 경우 Python을 매우 잘 보완합니다.</target>
        </trans-unit>
        <trans-unit id="5ce278aef6a44b4a6d85c267016a3cc878e8b48f" translate="yes" xml:space="preserve">
          <source>#### Simple as Excel
Datalog excels at accelerated development : Datalog programs are often shorter than their Python equivalent,
and Datalog statements can be specified in any order, as simply as formula in a spreadsheet.</source>
          <target state="translated">#### Excel Datalog는 개발 가속화에 탁월하므로 간단합니다. Datalog 프로그램은 종종 Python에 해당하는 것보다 짧으며 Datalog 문은 스프레드 시트의 공식처럼 간단하게 어떤 순서로든 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1cc21bb1c9ffc625faccd2bf8037b2e805394a6c" translate="yes" xml:space="preserve">
          <source>###1.1 pyDatalog</source>
          <target state="translated">### 1.1 pyDatalog</target>
        </trans-unit>
        <trans-unit id="6092b1cb915e381d977776c4e9963ee6c352d447" translate="yes" xml:space="preserve">
          <source>###1.2 Datalog</source>
          <target state="translated">### 1.2 데이터 로그</target>
        </trans-unit>
        <trans-unit id="3dd7a992f7d04e210019cc150205ddcb8259fa06" translate="yes" xml:space="preserve">
          <source>##1. Description
The main goal of pyDatalog is to introduce Datalog as a Domain Specific Language (DSL) inside Python syntax and programs.</source>
          <target state="translated">##1. 설명 pyDatalog의 주요 목표는 Python 구문 및 프로그램 내에서 Datalog를 DSL (Domain Specific Language)로 도입하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="3bc1e3fd28a367b2b2d2ccf225e2c6b701b70e26" translate="yes" xml:space="preserve">
          <source>A pure-python implementation of Datalog, a truly declarative language derived from Prolog.</source>
          <target state="translated">Prolog에서 파생 된 진정한 선언적 언어 인 Datalog의 순수 Python 구현입니다.</target>
        </trans-unit>
        <trans-unit id="6c721ad53a91094717081d14a3a9d33e9dfe0444" translate="yes" xml:space="preserve">
          <source>it can perform multi-database queries (from memory datastore, 11 relational databases, and noSQL database with appropriate connectors)</source>
          <target state="translated">다중 데이터베이스 쿼리 (메모리 데이터 저장소, 11 개의 관계형 데이터베이스 및 적절한 커넥터가있는 noSQL 데이터베이스에서)를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6966b54b4aa3de34ac5a5c25caacfd47c1347ede" translate="yes" xml:space="preserve">
          <source>it facilitates re-use of SQL code snippet (e.g. for frequent joins or formula);</source>
          <target state="translated">SQL 코드 스 니펫의 재사용을 용이하게합니다 (예 : 빈번한 조인 또는 공식).</target>
        </trans-unit>
        <trans-unit id="08fee37b868dff3ee91fefc7da2165e4fb3fe72f" translate="yes" xml:space="preserve">
          <source>it is more expressive than SQL, with a cleaner syntax;</source>
          <target state="translated">더 깔끔한 구문으로 SQL보다 표현력이 뛰어납니다.</target>
        </trans-unit>
        <trans-unit id="001ccd2545a9f6a94d661aff17c000a5c13d47f2" translate="yes" xml:space="preserve">
          <source>managing complex sets of related information (e.g. in data integration or the semantic web).</source>
          <target state="translated">복잡한 관련 정보 집합 관리 (예 : 데이터 통합 ​​또는 시맨틱 웹)</target>
        </trans-unit>
        <trans-unit id="985cf3bcf22fd53cc11acdeccce166358d086573" translate="yes" xml:space="preserve">
          <source>performing recursive algorithms (e.g. in network protocol, code and graph analysis, parsing)</source>
          <target state="translated">재귀 알고리즘 수행 (예 : 네트워크 프로토콜, 코드 및 그래프 분석, 구문 분석)</target>
        </trans-unit>
        <trans-unit id="66c26ef355255508dbbc81f0da48ab27d7a10e2f" translate="yes" xml:space="preserve">
          <source>pyDatalog adds the logic programming paradigm to Python&amp;rsquo;s toolbox, in a pythonic way.
You can now run logic queries on databases or Python objects, and use logic clauses to define python classes.
In particular, pyDatalog can be used as a query language:</source>
          <target state="translated">pyDatalog는 파이썬 도구 상자에 논리 프로그래밍 패러다임을 파이썬 방식으로 추가합니다. 이제 데이터베이스 또는 Python 개체에서 논리 쿼리를 실행하고 논리 절을 사용하여 Python 클래스를 정의 할 수 있습니다. 특히 pyDatalog는 쿼리 언어로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30995bb5e233e47e6bb257a64794e11305c0b156" translate="yes" xml:space="preserve">
          <source>requirements, bugs&amp;hellip;</source>
          <target state="translated">요구 사항, 버그&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="49f78e96336d68f2c9e30f93b50c766c08b0ad06" translate="yes" xml:space="preserve">
          <source>simulating intelligent behavior (e.g. in games),</source>
          <target state="translated">지능적인 행동 시뮬레이션 (예 : 게임),</target>
        </trans-unit>
        <trans-unit id="6000cbc8da1255f5d1752f8e983c87d722723e7a" translate="yes" xml:space="preserve">
          <source>solving discrete constraint problems.</source>
          <target state="translated">이산 제약 문제를 해결합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
