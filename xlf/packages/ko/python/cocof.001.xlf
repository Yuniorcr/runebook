<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/cocof/">
    <body>
      <group id="cocof">
        <trans-unit id="4a27e4c94b82d64030b2d8ec9a2187c91b94da6e" translate="yes" xml:space="preserve">
          <source>Cocof</source>
          <target state="translated">코 코프</target>
        </trans-unit>
        <trans-unit id="a6aa1fe8caf29aaa4cefe729b7c72821caeba703" translate="yes" xml:space="preserve">
          <source>Cocof takes a file path and a &lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot;&gt;JSON patch&lt;/a&gt; string as arguments.
It then modifies the datastructure given by the file's content accordingly and
writies it back to the same file (in-place editing).
You can also tell &lt;code&gt;cocof&lt;/code&gt; to read from &lt;code&gt;stdin&lt;/code&gt;, in which case it will output
it's result to &lt;code&gt;stdout&lt;/code&gt;. TOML, YAML and JSON expect their content to be &lt;code&gt;utf-8&lt;/code&gt;
encoded. PLIST expects either an &lt;code&gt;utf-8&lt;/code&gt; encoded xml content or binary content.</source>
          <target state="translated">Cocof는 파일 경로와 &lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot;&gt;JSON 패치&lt;/a&gt; 문자열을 인수로받습니다. 그런 다음 그에 따라 파일의 내용에 의해 제공된 데이터 구조를 수정하고 동일한 파일로 다시 작성합니다 (내부 편집). &lt;code&gt;cocof&lt;/code&gt; 에게 &lt;code&gt;stdin&lt;/code&gt; 에서 읽 도록 지시 할 수도 있습니다 .이 경우 결과는 &lt;code&gt;stdout&lt;/code&gt; 에 출력됩니다 . TOML, YAML 및 JSON은 콘텐츠가 &lt;code&gt;utf-8&lt;/code&gt; 로 인코딩 될 것으로 예상합니다 . PLIST는 &lt;code&gt;utf-8&lt;/code&gt; 로 인코딩 된 xml 콘텐츠 또는 바이너리 콘텐츠를 예상합니다 .</target>
        </trans-unit>
        <trans-unit id="58dbe199d1ee6ef35c67d7a91d444d44548cf5f0" translate="yes" xml:space="preserve">
          <source>Cocof, short for consistent config file, is a python module that allows the
modification of different key-value config files on the comand line.</source>
          <target state="translated">일관된 구성 파일의 줄임말 인 Cocof는 명령 줄에서 다른 키-값 구성 파일을 수정할 수있는 파이썬 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="8d7b415a1f845fedaaf7defc4460713e13b5daa8" translate="yes" xml:space="preserve">
          <source>Consistent CLI config file modifier</source>
          <target state="translated">일관된 CLI 구성 파일 수정 자</target>
        </trans-unit>
        <trans-unit id="3e56ee1a6a4ddf28f08d8b5de8f8afeef647c8b6" translate="yes" xml:space="preserve">
          <source>Currently supported formats are TOML, YAML, JSON and PLIST.</source>
          <target state="translated">현재 지원되는 형식은 TOML, YAML, JSON 및 PLIST입니다.</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">예</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="ccd96bd3a6233dfd63f0af7485dc82c7fc3f216b" translate="yes" xml:space="preserve">
          <source>Most importantly: For YAML and TOML it &lt;em&gt;It will keep line breaks and comments
the same.&lt;/em&gt; So the file will look more or less like the original (depending on
the operations on it of course).</source>
          <target state="translated">가장 중요한 것은 : YAML 및 TOML의 경우 &lt;em&gt;줄 바꿈과 주석을 동일하게 유지합니다. &lt;/em&gt;따라서 파일은 원본과 다소 비슷하게 보일 것입니다 (물론 작업에 따라 다름).</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="d0f188e0e9a6e67c81ec2e8655fb68ba5f82ab75" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;{&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/subtitle&quot;, &quot;value&quot;: &quot;Sub&quot;}&lt;/code&gt; as modification
yields:</source>
          <target state="translated">사용 &lt;code&gt;{&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/subtitle&quot;, &quot;value&quot;: &quot;Sub&quot;}&lt;/code&gt; 변형 수율로 :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
