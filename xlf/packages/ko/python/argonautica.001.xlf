<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/argonautica/">
    <body>
      <group id="argonautica">
        <trans-unit id="195662646c06edbd6b499b5b7b8dd96bb3dfe173" translate="yes" xml:space="preserve">
          <source>* Indeed, argonautica has a feature that even the cannonical C implementation
lacks, i.e. hashing passwords with secret keys (the C implementation implements this, but
does not expose it publicly)</source>
          <target state="translated">* 실제로, argonautica에는 캐논 C 구현에도 부족한 기능이 있습니다. 즉, 비밀 키로 암호를 해싱합니다 (C 구현에서는이를 구현하지만 공개적으로 노출하지는 않습니다).</target>
        </trans-unit>
        <trans-unit id="ede0f3c56202fdbf000f4bdbd27f888e075eb202" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;The Apache License, Version 2.0&lt;/a&gt;, or</source>
          <target state="translated">&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache 라이센스, 버전 2.0&lt;/a&gt; 또는</target>
        </trans-unit>
        <trans-unit id="51febab75ee75e8c4c4b7d70353a430c81211aa2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt; version 3.9 or higher</source>
          <target state="translated">&lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt; 버전 3.9 이상</target>
        </trans-unit>
        <trans-unit id="a3837bf6aae91373ad5275ed79cabc9b6852605c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; version 3.4 or higher (or &lt;a href=&quot;http://pypy.org/&quot;&gt;PyPy&lt;/a&gt; version 3.5 or higher)</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; 버전 3.4 이상 (또는 &lt;a href=&quot;http://pypy.org/&quot;&gt;PyPy&lt;/a&gt; 버전 3.5 이상)</target>
        </trans-unit>
        <trans-unit id="9cc7a2c6d141926a46b35ada4d5874007d72f4ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; version 1.26 or higher</source>
          <target state="translated">&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; 버전 1.26 이상</target>
        </trans-unit>
        <trans-unit id="a4f4b2ffcba94341fefc5dee4994e344deb70827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Argon2&lt;/code&gt; is a convenience class that holds both a &lt;code&gt;Hasher&lt;/code&gt; and a &lt;code&gt;Verifier&lt;/code&gt;. If you'd like to use just one class that knows how both to hash and to verify, instantiate an &lt;code&gt;Argon2&lt;/code&gt;. It works essentially the same way as &lt;code&gt;Hasher&lt;/code&gt; and &lt;code&gt;Verifier&lt;/code&gt; do.</source>
          <target state="translated">&lt;code&gt;Argon2&lt;/code&gt; 는 둘 다를 보유하고 편리한 클래스이다 &lt;code&gt;Hasher&lt;/code&gt; 과 &lt;code&gt;Verifier&lt;/code&gt; . 해시하고 확인하는 방법을 모두 알고있는 하나의 클래스 만 사용하려면 &lt;code&gt;Argon2&lt;/code&gt; 를 인스턴스화 하십시오 . 본질적으로 &lt;code&gt;Hasher&lt;/code&gt; 및 &lt;code&gt;Verifier&lt;/code&gt; 와 동일한 방식으로 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="42e43c02d5cc6dcf4f01ccf572544c66fe605969" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RandomSalt&lt;/code&gt; is a special kind of salt that will create new random salt bytes before each hash. A RandomSalt knows its length (in number of bytes). The default &lt;code&gt;Hasher&lt;/code&gt; uses a &lt;code&gt;RandomSalt&lt;/code&gt; with length of 32 bytes, but you can use your own &lt;code&gt;RandomSalt&lt;/code&gt; of custom length. When you instantiate a &lt;code&gt;RandomSalt&lt;/code&gt;, the constructor takes a length, e.g. &lt;code&gt;my_random_salt = RandomSalt(16)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;RandomSalt&lt;/code&gt; 는 각 해시 전에 새로운 임의의 솔트 바이트를 생성하는 특별한 종류의 솔트입니다. RandomSalt는 길이 (바이트 수)를 알고 있습니다. 기본 &lt;code&gt;Hasher&lt;/code&gt; 사용 &lt;code&gt;RandomSalt&lt;/code&gt; 32 바이트의 길이를,하지만 당신은 당신의 자신의 사용할 수 있습니다 &lt;code&gt;RandomSalt&lt;/code&gt; 사용자 정의 길이를. &lt;code&gt;RandomSalt&lt;/code&gt; 를 인스턴스화 할 때 생성자는 길이를 사용합니다. 예 : &lt;code&gt;my_random_salt = RandomSalt(16)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7e9ef3323d845d8b7fe28b3a6c8ed8bac3d3d9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pip install --upgrade pip&lt;/code&gt; or &lt;code&gt;pip install setuptools-rust&lt;/code&gt;. Note: setuptool-rust is not required if you have pip version 10.0 or above</source>
          <target state="translated">&lt;code&gt;pip install --upgrade pip&lt;/code&gt; 또는 &lt;code&gt;pip install setuptools-rust&lt;/code&gt; . 참고 : pip 버전 10.0 이상이있는 경우 setuptool-rust가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9f9e21cec5bff7c00c47588c720b10c717c6cfc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pip install argonautica&lt;/code&gt;. Unfortunately, this step may take several minutes, as argonautica needs to compile it's Rust code for your specific CPU (due to its use of SIMD instructions). The upside, however, is that once compiled, argonautica should run blazingly fast</source>
          <target state="translated">&lt;code&gt;pip install argonautica&lt;/code&gt; . 안타깝게도 argonautica는 특정 CPU에 대한 Rust 코드를 컴파일해야하므로이 단계는 몇 분 정도 걸릴 수 있습니다 (SIMD 명령 사용으로 인해). 그러나 장점은 일단 컴파일되면 argonautica가 엄청나게 빠르게 실행된다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e1c91e3f30599a290b2b01dca0cda3b6be9dbdf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Argon2&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;아르곤 2&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ec16863d4de7e250b1bc9ea235ef9d47e56dc61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HashRaw&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HashRaw&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ddc9a492e751ec0ba5fa5059b73ea7d1f52a1435" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;LLVM:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;LLVM :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb72c98066c0b5500b75fff01572f0dabe63aab4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RandomSalt&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;RandomSalt&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db8ffdf33529bce1203d1e34714e61c69da4dc95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Rust:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;녹:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76771f82d99201c55f403bd9428ec0aed8e29448" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;argonautica :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d367fa420fee75b359d8b4b19d890e4bd1373c59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is a Python package for hashing passwords that uses the cryptographically-secure &lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;argon2&lt;/a&gt; hashing algorithm.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; 는 암호 적으로 안전한 &lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;argon2&lt;/a&gt; 해싱 알고리즘 을 사용하는 암호 해싱 용 Python 패키지입니다 .</target>
        </trans-unit>
        <trans-unit id="ceaca1a9a949ee490386b46d45ac5b124ea2344e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is licensed under either of:</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; 는 다음 중 하나에 따라 라이센스가 부여됩니다.</target>
        </trans-unit>
        <trans-unit id="86332913a7df9ce53012c8a6c20d92e902eca568" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 to use &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; instructions to peform it's hashing algorithm, which means it can be quite fast. The downside is that you have to compile it for your specific machine (this is why the &lt;code&gt;pip install argonautica&lt;/code&gt; process takes time). That said, on the developer's early 2014 Macbook Air, which has &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; instruction through &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&quot;&gt;AVX2&lt;/a&gt;, argonautica runs ~30% faster than passlib on default settings.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; 는 &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; 명령어를 사용하여 해싱 알고리즘을 수행하는 argon2의 유일한 Python 구현입니다 . 이는 매우 빠를 수 있음을 의미합니다. 단점은 특정 머신에 맞게 컴파일해야한다는 것입니다 (이것이 &lt;code&gt;pip install argonautica&lt;/code&gt; 프로세스에 시간이 걸리는 이유입니다 ). 즉, &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&quot;&gt;AVX2를&lt;/a&gt; 통한 &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; 명령 이있는 개발자의 2014 년 초 Macbook Air 에서 argonautica는 기본 설정에서 passlib보다 ~ 30 % 더 빠르게 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="6226e5be9a3b94dfed0589fbae7543c84509985d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; supports the latest argon2 variant: argon2id, which, unless you have a reason not to, you should be using. A number of Python implementations do not yet support this variant.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; 는 최신 argon2 변형 인 argon2id를 지원하며, 이유가없는 한 사용해야합니다. 많은 Python 구현이 아직이 변형을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dd95e0f87d8aebc153c0145c144355188efd7f28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; uses &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt; type annotations everywhere in the code, which, in the author's humble opinion, is a very useful form of documentation; so if you're ever confused about what types to use for arguments, just pop open the code and take a look at the function signatures.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; 는 코드의 모든 곳에서 &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt; 유형 어노테이션을 사용 합니다. 저자의 겸손한 의견으로는 매우 유용한 문서 형식입니다. 따라서 인수에 사용할 유형에 대해 혼란스러워하는 경우 코드를 열고 함수 서명을 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="7f09aa620c3a56871f93c5817cb52cab65fbb571" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; was built with a simple use-case in mind: hashing passwords for storage in a
website's database. That said, it's also &quot;feature-complete&quot;, meaning anything you can do with
the cannonical &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;C implementation&lt;/a&gt; of argon2
you can do with argonautica*.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; 는 간단한 사용 사례를 염두에두고 구축되었습니다. 웹 사이트 데이터베이스에 저장하기 위해 암호를 해싱하는 것입니다. 즉, Argonautica *로 할 수있는 argon2 의 캐논 &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;C 구현&lt;/a&gt; 으로 할 수있는 모든 것을 의미하는 &quot;기능 완성&quot; 이기도합니다.</target>
        </trans-unit>
        <trans-unit id="ca7d4b6bcd0af299645a83a7d4aea595025a5c74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mypy&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;mypy&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5669ec44ecef2ed5804540a396dd292f49b16257" translate="yes" xml:space="preserve">
          <source>AFAIK, &lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 that supports hashing with secret keys. Not even the &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;cannonical C implementation&lt;/a&gt; of argon2 exposes this feature publicly (it's in the code, but unfortunately not accessable via the public API).</source>
          <target state="translated">AFAIK, &lt;strong&gt;argonautica&lt;/strong&gt; 는 비밀 키로 해싱을 지원하는 argon2의 유일한 Python 구현입니다. &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;argon2&lt;/a&gt; 의 캐논 C 구현 조차도이 기능을 공개적으로 노출하지 않습니다 (코드에 있지만 안타깝게도 공개 API를 통해 액세스 할 수 없습니다).</target>
        </trans-unit>
        <trans-unit id="3a4be7155bcffba0850c80a370bc5c6b34c37e74" translate="yes" xml:space="preserve">
          <source>Alternatives</source>
          <target state="translated">대안</target>
        </trans-unit>
        <trans-unit id="9ae5e35b46adfc77d4a514a98bde3b1fa47cc9aa" translate="yes" xml:space="preserve">
          <source>Arch linux: &lt;code&gt;pacman -S clang&lt;/code&gt;</source>
          <target state="translated">아치 리눅스 : &lt;code&gt;pacman -S clang&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8eabad1d4bfdf2c84b2250a383bd249e22dcad89" translate="yes" xml:space="preserve">
          <source>Argon2 won the &lt;a href=&quot;https://password-hashing.net/&quot;&gt;Password Hashing Competition&lt;/a&gt; in 2015, a several year project to identify a successor to &lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Scrypt&quot;&gt;scrypt&lt;/a&gt;, and other common hashing algorithms.</source>
          <target state="translated">Argon2는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt; , &lt;a href=&quot;https://en.wikipedia.org/wiki/Scrypt&quot;&gt;scrypt&lt;/a&gt; 및 기타 일반적인 해싱 알고리즘 의 후속 작업을 식별하기위한 몇 년간의 프로젝트 인 2015 년 &lt;a href=&quot;https://password-hashing.net/&quot;&gt;암호 해싱 대회&lt;/a&gt; 에서 우승했습니다 .</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">구성</target>
        </trans-unit>
        <trans-unit id="45529ed06c625b76e4c4357555c4b0244426e657" translate="yes" xml:space="preserve">
          <source>Debian-based linux: &lt;code&gt;apt-get install llvm-dev libclang-dev clang&lt;/code&gt;</source>
          <target state="translated">Debian 기반 Linux : &lt;code&gt;apt-get install llvm-dev libclang-dev clang&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b2776064a97e290ac856229ddad7ef1f00f1357" translate="yes" xml:space="preserve">
          <source>Finally, &lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 written in &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; (as opposed to C or C++). &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; is a &quot;systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.&quot;</source>
          <target state="translated">마지막으로, &lt;strong&gt;argonautica&lt;/strong&gt; 는 &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust로&lt;/a&gt; 작성된 argon2의 유일한 Python 구현입니다 (C 또는 C ++와 반대). &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; 는 &quot;매우 빠르게 실행되고 세그 폴트를 방지하며 스레드 안전성을 보장하는 시스템 프로그래밍 언어&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="6360e261bdf44c4f899f7ef00378583f501b8d5e" translate="yes" xml:space="preserve">
          <source>Follow the instructions &lt;a href=&quot;https://www.rust-lang.org/en-US/install.html&quot;&gt;here&lt;/a&gt;, which will just tell you to run the following command in your terminal and follow the on-screen instructions: &lt;code&gt;curl https://sh.rustup.rs -sSf \| sh&lt;/code&gt;</source>
          <target state="translated">의 지시에 따라 &lt;a href=&quot;https://www.rust-lang.org/en-US/install.html&quot;&gt;여기에&lt;/a&gt; 당신의 터미널에서 다음 명령을 실행하고 화면의 지시에 따라 당신을 말할 것이다 : &lt;code&gt;curl https://sh.rustup.rs -sSf \| sh&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53e49a69fb315c4f51afc9825055d4858a064cdc" translate="yes" xml:space="preserve">
          <source>Hashing</source>
          <target state="translated">해싱</target>
        </trans-unit>
        <trans-unit id="e95fb4d89f702858269571680eb4384b6e1d7b29" translate="yes" xml:space="preserve">
          <source>Hashing with &lt;strong&gt;argonautica&lt;/strong&gt; produces a string-encoded hash, but sometimes you might want the &quot;raw material&quot; behind this hash, i.e. the raw hash bytes, the raw salt bytes, or raw parameters, which are the three component parts of a string-encoded hash. To obtain these raw parts...</source>
          <target state="translated">&lt;strong&gt;argonautica로&lt;/strong&gt; 해싱 하면 문자열로 인코딩 된 해시가 생성되지만 때때로이 해시 뒤에 &quot;원재료&quot;(예 : 원시 해시 바이트, 원시 솔트 ​​바이트 또는 문자열 인코딩의 세 구성 요소 인 원시 매개 변수)가 필요할 수 있습니다. 해시시. 이 원시 부품을 얻으려면 ...</target>
        </trans-unit>
        <trans-unit id="b53a956811aafe360ad463c2664de99be4dd6654" translate="yes" xml:space="preserve">
          <source>Idiomatic Argon2 password hashing for Python</source>
          <target state="translated">Python을위한 관용적 Argon2 암호 해싱</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">여러 가지 잡다한</target>
        </trans-unit>
        <trans-unit id="95d388e8fafd9bc83d5b80bb3527b53a99d59f87" translate="yes" xml:space="preserve">
          <source>Other linux: Use your distribution's package manager</source>
          <target state="translated">기타 Linux : 배포판의 패키지 관리자 사용</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">개요</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">요구 사항</target>
        </trans-unit>
        <trans-unit id="17e159a0b832fb918538fa8e1dc1427f74ab81de" translate="yes" xml:space="preserve">
          <source>The MIT license</source>
          <target state="translated">MIT 라이선스</target>
        </trans-unit>
        <trans-unit id="ce584f3715e750d6e40ca52529e7e6017d7221ff" translate="yes" xml:space="preserve">
          <source>There are several Python packages that implement argon2, including the excellent &lt;a href=&quot;http://passlib.readthedocs.io/en/stable/&quot;&gt;passlib&lt;/a&gt;, which uses &lt;a href=&quot;https://github.com/hynek/argon2_cffi&quot;&gt;argon2_cffi&lt;/a&gt;, but...</source>
          <target state="translated">이 우수한 포함 argon2을 구현하는 여러 파이썬 패키지이다 &lt;a href=&quot;http://passlib.readthedocs.io/en/stable/&quot;&gt;passlib&lt;/a&gt; 사용 &lt;a href=&quot;https://github.com/hynek/argon2_cffi&quot;&gt;argon2_cffi는&lt;/a&gt; ,하지만 ...</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="536244f4cc64c32141c5753233b90a09618435ae" translate="yes" xml:space="preserve">
          <source>Verifying</source>
          <target state="translated">확인 중</target>
        </trans-unit>
        <trans-unit id="a61dc7cfe81decf95f172527fe51435f115b2cce" translate="yes" xml:space="preserve">
          <source>Windows: Download a pre-built binary &lt;a href=&quot;http://releases.llvm.org/download.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">Windows : &lt;a href=&quot;http://releases.llvm.org/download.html&quot;&gt;여기&lt;/a&gt; 에서 미리 빌드 된 바이너리 다운로드</target>
        </trans-unit>
        <trans-unit id="f2c07cb057a688edc054b308f1255acb4ededede" translate="yes" xml:space="preserve">
          <source>argonautica-py</source>
          <target state="translated">Argonautica-py</target>
        </trans-unit>
        <trans-unit id="f9bc3be46ae328e0c638fc70e35e07ff6d55dfab" translate="yes" xml:space="preserve">
          <source>at your option.</source>
          <target state="translated">귀하의 선택에.</target>
        </trans-unit>
        <trans-unit id="32e74c13596c69be07e436be4b969f69cc195576" translate="yes" xml:space="preserve">
          <source>macOS: &lt;code&gt;brew install llvm&lt;/code&gt;, which requires &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;</source>
          <target state="translated">macOS : &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; 가 필요한 &lt;code&gt;brew install llvm&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
