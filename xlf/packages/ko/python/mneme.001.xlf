<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/mneme/">
    <body>
      <group id="mneme">
        <trans-unit id="09e84feb433d3a14815a54dd74108f110ab75cb6" translate="yes" xml:space="preserve">
          <source>![Mneme demo](https://raw.githubusercontent.com/Risto-Stevcev/flask-mneme/master/mneme/demo.gif)</source>
          <target state="translated">! [Mneme 데모] (https://raw.githubusercontent.com/Risto-Stevcev/flask-mneme/master/mneme/demo.gif)</target>
        </trans-unit>
        <trans-unit id="88dd41a15ecc553f3a30ffe00fbc529f8acbe1fd" translate="yes" xml:space="preserve">
          <source># Mneme</source>
          <target state="translated"># Mneme</target>
        </trans-unit>
        <trans-unit id="e3ae97f26c58c2efb405f97615be7a226ebde0d7" translate="yes" xml:space="preserve">
          <source>## Heroku</source>
          <target state="translated">## Heroku</target>
        </trans-unit>
        <trans-unit id="ce0ac5372b84e816959d2c6fbb5a716c6e783cd5" translate="yes" xml:space="preserve">
          <source>## Instructions</source>
          <target state="translated">## 지침</target>
        </trans-unit>
        <trans-unit id="86610a7b8d514ac31c557e3a8034f78154689ed7" translate="yes" xml:space="preserve">
          <source>### Exporting</source>
          <target state="translated">### 내보내기</target>
        </trans-unit>
        <trans-unit id="970226ac58eb902347c2e43b1b0394c5687abeb8" translate="yes" xml:space="preserve">
          <source>### Shortcuts</source>
          <target state="translated">### 바로 가기</target>
        </trans-unit>
        <trans-unit id="43cb330d83386f66833a58341b6605b244098194" translate="yes" xml:space="preserve">
          <source>* *Ctrl-Alt-PgDown* when viewing a particular mneme file will go into *Edit mode*.</source>
          <target state="translated">* 특정 mneme 파일을 볼 때 * Ctrl-Alt-PgDown *은 * 편집 모드 *로 전환됩니다.</target>
        </trans-unit>
        <trans-unit id="4fbfba747725b652c9abf193370e537913331e47" translate="yes" xml:space="preserve">
          <source>* *Ctrl-Alt-PgUp* when viewing a particular mneme file will go into *View mode*.</source>
          <target state="translated">* 특정 mneme 파일을 볼 때 * Ctrl-Alt-PgUp *은 *보기 모드 *로 전환됩니다.</target>
        </trans-unit>
        <trans-unit id="a5e1c3db6aeead093db7707ba01af7e3d876f319" translate="yes" xml:space="preserve">
          <source>* *Shift-tab* in the editing window will un-indent the selected text by 4 spaces (*for multi-line code*).</source>
          <target state="translated">* 편집 창에서 * Shift-tab *은 선택한 텍스트를 4 칸 들여 쓰기합니다 (* 여러 줄 코드의 경우 *).</target>
        </trans-unit>
        <trans-unit id="a64e5c400b6753626b8c305ddb447a2ac5fbfd72" translate="yes" xml:space="preserve">
          <source>* *Tab* in the editing window will indent the selected text by 4 spaces (*for multi-line code*).</source>
          <target state="translated">* 편집 창의 * Tab *은 선택한 텍스트를 4 칸 들여 쓰기합니다 (* 여러 줄 코드의 경우 *).</target>
        </trans-unit>
        <trans-unit id="417f1db98e967aa15d5a12ece6213ead93f3b15f" translate="yes" xml:space="preserve">
          <source>** Note: ** *Using the Heroku/MongoDB/Flask web stack is optional for using the mneme file format. The file format is just a representation structure that can be used by anything that can handle JSON and markdown formats.*</source>
          <target state="translated">** 참고 : ** * Heroku / MongoDB / Flask 웹 스택 사용은 mneme 파일 형식 사용을위한 선택 사항입니다. 파일 형식은 JSON 및 마크 다운 형식을 처리 할 수있는 모든 항목에서 사용할 수있는 표현 구조 일뿐입니다. *</target>
        </trans-unit>
        <trans-unit id="6f5adaa50256255ba07a230a0207cdc0f874538d" translate="yes" xml:space="preserve">
          <source>**Mneme** is a new and elegant note-taking format with a web editor/viewer. The web app edits and views a new type of notes format called a *mneme* file.</source>
          <target state="translated">** Mneme **은 웹 편집기 / 뷰어가있는 새롭고 우아한 메모 작성 형식입니다. 웹 앱은 * mneme * 파일이라는 새로운 유형의 노트 형식을 편집하고 봅니다.</target>
        </trans-unit>
        <trans-unit id="907c95ca766448723a1bfbaa3f25ce242882df13" translate="yes" xml:space="preserve">
          <source>1. Create a **Heroku** account.</source>
          <target state="translated">1. ** Heroku ** 계정을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="7b466bd7217fc789ad26bdaf85fd10008b851bc2" translate="yes" xml:space="preserve">
          <source>1. Create a new **MongoHQ** database using the free *512MB sandbox* version (or paid if you want/need it).</source>
          <target state="translated">1. 무료 * 512MB 샌드 박스 * 버전을 사용하여 새 ** MongoHQ ** 데이터베이스를 만듭니다 (또는 원하거나 필요한 경우 유료).</target>
        </trans-unit>
        <trans-unit id="019c55620a18cfe173919090cb8ea82e51a57624" translate="yes" xml:space="preserve">
          <source>1. Create a new Heroku app by running the command:</source>
          <target state="translated">1. 다음 명령을 실행하여 새 Heroku 앱을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="557b17778f21904202574a2ae2354dfcb5cb30cd" translate="yes" xml:space="preserve">
          <source>1. Go to Databases-&amp;gt;(*your new mneme database*)-&amp;gt;Admin-&amp;gt;Overview at the MongoHQ website dashboard and grab the line of code that says ``Mongo Console``.</source>
          <target state="translated">1. MongoHQ 웹 사이트 대시 보드에서 Databases-&amp;gt; (* your new mneme database *)-&amp;gt; Admin-&amp;gt; Overview로 이동하여``Mongo Console ''이라는 코드 줄을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="eb22fa5c88e8bc51d896c83e61f4989be165bfe2" translate="yes" xml:space="preserve">
          <source>1. Install **Mneme**.</source>
          <target state="translated">1. ** Mneme **을 설치합니다.</target>
        </trans-unit>
        <trans-unit id="008669acde6faab8e838925d202aee437b161da6" translate="yes" xml:space="preserve">
          <source>1. Locate the **Mongo URI** in Databases-&amp;gt;(*your new mneme database*)-&amp;gt;Admin-&amp;gt;Overview and identify the host, port and database.</source>
          <target state="translated">1. 데이터베이스-&amp;gt; (* 새 mneme 데이터베이스 *)-&amp;gt; 관리자-&amp;gt; 개요에서 ** Mongo URI **를 찾아 호스트, 포트 및 데이터베이스를 식별합니다.</target>
        </trans-unit>
        <trans-unit id="af9c9210c9a54da18806c2660743d1097a030ea7" translate="yes" xml:space="preserve">
          <source>1. Start the environment with this command:</source>
          <target state="translated">1. 다음 명령으로 환경을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="c068f465d660d4cd63c4f6a4196dd6b9b8b5a5b2" translate="yes" xml:space="preserve">
          <source>2. Create a new user to access the database.</source>
          <target state="translated">2. 데이터베이스에 액세스 할 새 사용자를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="b1a1e0664741889e818c2c9170534cc3ec1e59bd" translate="yes" xml:space="preserve">
          <source>2. Install all of the missing dependencies listed in the ``dependencies.txt`` file in the cloned mneme folder.</source>
          <target state="translated">2. 복제 된 mneme 폴더의``dependencies.txt ''파일에 나열된 모든 누락 된 종속성을 설치합니다.</target>
        </trans-unit>
        <trans-unit id="6c744da9f3db4e6dca9ec8a748328219789193c9" translate="yes" xml:space="preserve">
          <source>2. Login to Heroku.</source>
          <target state="translated">2. Heroku에 로그인합니다.</target>
        </trans-unit>
        <trans-unit id="82d60f8e6822e75a6d73cffdd1426a23c392d2d6" translate="yes" xml:space="preserve">
          <source>2. Replace ``&amp;lt;user&amp;gt;`` and ``&amp;lt;password&amp;gt;`` with the username and password you created for your database earlier, and run it in the command line. You should now be connected to your new database!</source>
          <target state="translated">2.``&amp;lt;user&amp;gt;``및``&amp;lt;password&amp;gt;``를 이전에 데이터베이스 용으로 생성 한 사용자 이름 및 암호로 바꾸고 명령 줄에서 실행합니다. 이제 새 데이터베이스에 연결되어야합니다!</target>
        </trans-unit>
        <trans-unit id="61944f367479db0604e6e4ff021c6992f7be109a" translate="yes" xml:space="preserve">
          <source>2. Run the *mneme* ``register`` command.</source>
          <target state="translated">2. * mneme *``register ''명령을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="5ecd818703de9c943bf5487e46f08292c3173a9a" translate="yes" xml:space="preserve">
          <source>2. Test your installation.</source>
          <target state="translated">2. 설치를 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="83f61257764d44098c430534af809a43e08a89dd" translate="yes" xml:space="preserve">
          <source>2. Upload your public key to Heroku if you haven't already:</source>
          <target state="translated">2. 아직하지 않은 경우 공개 키를 Heroku에 업로드합니다.</target>
        </trans-unit>
        <trans-unit id="1674fc0d8b9924aa4e8e3beff2ccb511183f9b23" translate="yes" xml:space="preserve">
          <source>3. Clone the **Mneme** source code.</source>
          <target state="translated">3. ** Mneme ** 소스 코드를 복제합니다.</target>
        </trans-unit>
        <trans-unit id="5f857831a36cdfe801ec25a131c2ce4f6dbcb9c9" translate="yes" xml:space="preserve">
          <source>3. Create a **MongoHQ** account.</source>
          <target state="translated">3. ** MongoHQ ** 계정을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="78eaa1e9c16c39023b9603e910b006d078155c3e" translate="yes" xml:space="preserve">
          <source>3. Push the files upstream to Heroku:</source>
          <target state="translated">3. 파일을 Heroku로 업스트림으로 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="f6d83ccb37a0dce8714351ff8a0f3f09389581b2" translate="yes" xml:space="preserve">
          <source>3. Test your MongoHQ database.</source>
          <target state="translated">3. MongoHQ 데이터베이스를 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="fbf08592ce507a34e49f3e9f16e0ef3a0711d89c" translate="yes" xml:space="preserve">
          <source>4. Add a new **MongoHQ** database for *mneme*.</source>
          <target state="translated">4. * mneme *에 대한 새 ** MongoHQ ** 데이터베이스를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="6d68cfa458c3583d040d4ad6dbd373c081495983" translate="yes" xml:space="preserve">
          <source>4. Create a *virtualenv* environment.</source>
          <target state="translated">4. * virtualenv * 환경을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="21cf561b32b8f626ceb69e8528b43b5f309e5970" translate="yes" xml:space="preserve">
          <source>5. Register your **MongoHQ** database with *mneme*.</source>
          <target state="translated">5. * mneme *에 ** MongoHQ ** 데이터베이스를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="cdf62ad05bfe8fd3e5952f8537cafd2677bb5e1a" translate="yes" xml:space="preserve">
          <source>5. Start the *virtualenv* environment and install the python dependencies.</source>
          <target state="translated">5. * virtualenv * 환경을 시작하고 python 종속성을 설치합니다.</target>
        </trans-unit>
        <trans-unit id="e315726c4f3a4a33a0c30ee7f26f59214e30348f" translate="yes" xml:space="preserve">
          <source>6. Add or modify an *authorized user*.</source>
          <target state="translated">6. * 권한이있는 사용자 *를 추가하거나 수정합니다.</target>
        </trans-unit>
        <trans-unit id="bfe953b32fd925b46ecc1aed8e06d1767a9a5e17" translate="yes" xml:space="preserve">
          <source>6. Test that the ``Procfile`` works.</source>
          <target state="translated">6.``Procfile ''이 작동하는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="3d42a67e94099097afd242908dfead652a0c5ee1" translate="yes" xml:space="preserve">
          <source>7. Deploy the application to Heroku.</source>
          <target state="translated">7. 애플리케이션을 Heroku에 배포합니다.</target>
        </trans-unit>
        <trans-unit id="7c7cd389ebdac94fea5385eb9db65bc84e295a3a" translate="yes" xml:space="preserve">
          <source>7. Test out **Mneme**!</source>
          <target state="translated">7. ** Mneme **을 테스트 해보세요!</target>
        </trans-unit>
        <trans-unit id="02b7d4e0f84dad92e7be0c948e5dd8c8b3672c23" translate="yes" xml:space="preserve">
          <source>8. Test your Heroku app by going to the link generated by Heroku for your app. See Heroku's [getting started with python](https://devcenter.heroku.com/articles/getting-started-with-python) for reference and further reading.</source>
          <target state="translated">8. 앱에 대해 Heroku에서 생성 한 링크로 이동하여 Heroku 앱을 테스트합니다. 참조 및 추가 정보는 Heroku의 [python 시작하기] (https://devcenter.heroku.com/articles/getting-started-with-python)를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="10286f3b9354359589309eefa29cd0c013ef926f" translate="yes" xml:space="preserve">
          <source>A *mneme* file is a combination file format. The file format's basic structure comprises of a **JSON** *object*. Each **key** in the key/value pair refers to a *topic* name, and the **value** is either a new set of key/value pairs (indicating a *subnode*), or a *string* that's formatted in **markdown** syntax.</source>
          <target state="translated">* mneme * 파일은 조합 파일 형식입니다. 파일 형식의 기본 구조는 ** JSON ** * 객체 *로 구성됩니다. 키 / 값 쌍의 각 ** 키 **는 * 주제 * 이름을 참조하고 ** 값 **은 새로운 키 / 값 쌍 집합 (* 하위 노드 *를 나타냄) 또는 * 문자열 *입니다. ** markdown ** 구문으로 형식이 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="0a138a7c40ba83102abf437376359450ab57fcd8" translate="yes" xml:space="preserve">
          <source>A powerful note-taking format with a web viewer/editor.</source>
          <target state="translated">웹 뷰어 / 편집기를 사용한 강력한 메모 작성 형식입니다.</target>
        </trans-unit>
        <trans-unit id="5f3c53767334c26320a37ac0e75611f8264697c3" translate="yes" xml:space="preserve">
          <source>After you've written a bunch of notes using *mneme*, you might want to keep the files locally in their native JSON file format for reference or as a backup. MongoDB preserves the *mneme* files in their native JSON format automatically. Here's how to do a simple export using the same credentials you used in the steps to get it set up:</source>
          <target state="translated">* mneme *을 사용하여 많은 메모를 작성한 후 참조 또는 백업을 위해 파일을 기본 JSON 파일 형식으로 로컬에 보관할 수 있습니다. MongoDB는 * mneme * 파일을 기본 JSON 형식으로 자동으로 보존합니다. 설정 단계에서 사용한 것과 동일한 자격 증명을 사용하여 간단한 내보내기를 수행하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e9f3ac864d54c46496c7f33074583fdf9dabb40b" translate="yes" xml:space="preserve">
          <source>Ex: ``mneme register --db mneme --username myusername --password mypassword --host oceanic.mongohq.com --port 10052``</source>
          <target state="translated">예 :``mneme register --db mneme --username myusername --password mypassword --host oceanic.mongohq.com --port 10052 ''</target>
        </trans-unit>
        <trans-unit id="4e3a8d4daaef0bcf513beadc82bed12720cf9698" translate="yes" xml:space="preserve">
          <source>Ex: ``mongodb://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@oceanic.mongohq.com:10052/mneme``, *oceanic.mongohq.com* is the hostname, *10052* is the port, *mneme* is the database.</source>
          <target state="translated">예 :``mongodb : // &amp;lt;user&amp;gt; : &amp;lt;password&amp;gt; @ oceanic.mongohq.com : 10052 / mneme``, * oceanic.mongohq.com *은 호스트 이름, * 10052 *는 포트, * mneme *은 데이터베이스.</target>
        </trans-unit>
        <trans-unit id="875cd14e0aa6042b48ec7dc0c37b43685b28e623" translate="yes" xml:space="preserve">
          <source>Ex: ``pip install Flask gunicorn`` as a bare minimum. You'll also need the rest, such as mongodb's dependencies.</source>
          <target state="translated">예 : 최소한``pip install Flask gunicorn``. mongodb의 종속성과 같은 나머지도 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>
        </trans-unit>
        <trans-unit id="da89e69f517aea8cc54e21b83adb5db256cb9e5d" translate="yes" xml:space="preserve">
          <source>Fill in the options with the database username/password you created earlier at MongoHQ, and the parameters you identified from the Mongo URI.</source>
          <target state="translated">MongoHQ에서 이전에 생성 한 데이터베이스 사용자 이름 / 암호와 Mongo URI에서 식별 한 매개 변수로 옵션을 입력합니다.</target>
        </trans-unit>
        <trans-unit id="8b976aada7a6746ab7efbc31cb100a779554fa53" translate="yes" xml:space="preserve">
          <source>Go to Databases-&amp;gt;(*your new mneme database*)-&amp;gt;Admin-&amp;gt;Users at the MongoHQ website dashboard, and click the ``Add User`` button to add a new user.</source>
          <target state="translated">MongoHQ 웹 사이트 대시 보드에서 Databases-&amp;gt; (* your new mneme database *)-&amp;gt; Admin-&amp;gt; Users로 이동하고`ʻAdd User ''버튼을 클릭하여 새 사용자를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="4aa90fd55ec995fd82e25a6ed7cc964e699f2bfd" translate="yes" xml:space="preserve">
          <source>Go to [http://www.mongohq.com/](http://www.mongohq.com/), click ``Sign Up`` and follow the steps to register.</source>
          <target state="translated">[http://www.mongohq.com/](http://www.mongohq.com/)으로 이동하여``가입 ''을 클릭하고 등록 절차를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="00c4ecac3dc857a76de4bb150881246b8a085f68" translate="yes" xml:space="preserve">
          <source>Here is an animated demo of how the web app looks:</source>
          <target state="translated">다음은 웹 앱이 어떻게 보이는지에 대한 애니메이션 데모입니다.</target>
        </trans-unit>
        <trans-unit id="bad811ffc1488652cb21c854f382992ef826e95c" translate="yes" xml:space="preserve">
          <source>If you don't have a public key (``ls ~/.ssh/id_rsa.pub`` returns nothing), Heroku will prompt you to add one automatically. You can use:</source>
          <target state="translated">공개 키가없는 경우 (``ls ~ / .ssh / id_rsa.pub``은 아무것도 반환하지 않음) Heroku는 자동으로 추가하라는 메시지를 표시합니다. 당신이 사용할 수있는:</target>
        </trans-unit>
        <trans-unit id="14f3394e43b403b16aec5e79f51bd1adadec5c83" translate="yes" xml:space="preserve">
          <source>In the clone directory, you should see several python files such as ``manage.py``, and folders like ``templates`` and ``logs``. Create a *virtualenv* environment in this directory and name it ``venv``. Type:</source>
          <target state="translated">복제 디렉토리에서``manage.py``와 같은 여러 python 파일과``templates ''및``logs``와 같은 폴더를 볼 수 있습니다. 이 디렉토리에 * virtualenv * 환경을 만들고 이름을``venv``로 지정합니다. 유형:</target>
        </trans-unit>
        <trans-unit id="407a8903e98e215669f695151429bc917e58626e" translate="yes" xml:space="preserve">
          <source>Mneme is named after **Mneme**, the Muse of Memory. The tree-like structure of the file format makes it easy to divide up concepts into subconcepts as small as is necessary. The markdown format of the text makes it easy to quickly add formatting like bold, italics, code, or lists. The powerful combination of a JSON tree with markdown text makes it easy to maintain, organize and manipulate all of your notes!</source>
          <target state="translated">Mneme은 기억의 뮤즈 인 ** Mneme **의 이름을 따서 명명되었습니다. 파일 형식의 트리와 같은 구조를 통해 개념을 필요한만큼 작은 하위 개념으로 쉽게 분할 할 수 있습니다. 텍스트의 마크 다운 형식을 사용하면 굵게, 기울임 꼴, 코드 또는 목록과 같은 서식을 빠르게 추가 할 수 있습니다. 마크 다운 텍스트와 JSON 트리의 강력한 조합을 통해 모든 노트를 쉽게 유지, 구성 및 조작 할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="1045e4a5fc10c8078d94072e50bd46bbee7a49f1" translate="yes" xml:space="preserve">
          <source>Run ``foreman start`` in the directory that ``Procfile`` lives in. You might need to install foreman if you haven't already for this step.</source>
          <target state="translated">``Procfile ''이있는 디렉토리에서``foreman start ''를 실행합니다. 아직이 단계를 수행하지 않았다면 foreman을 설치해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="086fcb4800a3da34cf44eef9a14d42e7d5156056" translate="yes" xml:space="preserve">
          <source>Run ``git clone https://github.com/Risto-Stevcev/flask-mneme.git`` in the terminal and the directory you want it to install into.</source>
          <target state="translated">터미널과 설치하려는 디렉토리에서``git clone https : // github.com / Risto-Stevcev / flask-mneme.git``을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="228b316dc783a72639d58714e3050a3e606135a9" translate="yes" xml:space="preserve">
          <source>Run ``heroku login`` in the terminal and type in your account credentials.</source>
          <target state="translated">터미널에서``heroku 로그인 ''을 실행하고 계정 자격 증명을 입력합니다.</target>
        </trans-unit>
        <trans-unit id="dc338e6d4825c8d8e70e40bb80b8dd4f0af4c658" translate="yes" xml:space="preserve">
          <source>Run ``mneme runserver`` again and go to ``localhost:5000``. Then log in with your *authorized user* credentials and start playing around with mneme.</source>
          <target state="translated">``mneme runserver``를 다시 실행하고``localhost : 5000``으로 이동합니다. 그런 다음 * 인증 된 사용자 * 자격 증명으로 로그인하고 mneme을 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="7de2b670f431ecdda0fb88dffaf00c8dc1a63d0b" translate="yes" xml:space="preserve">
          <source>Run something like ``mneme authorize --user hello --password world``, which in this case would authorize user ``hello`` with the password ``world`` to use the *mneme* web app.</source>
          <target state="translated">``mneme authorize --user hello --password world ''와 같은 것을 실행하십시오.이 경우 * mneme * 웹 앱을 사용할 수 있도록 암호``world ''로 사용자``hello ''를 인증합니다.</target>
        </trans-unit>
        <trans-unit id="05900126009a29532f9f7408bd54a0e57c51bd12" translate="yes" xml:space="preserve">
          <source>Start the server by typing ``mneme runserver`` and go to ``localhost:5000`` in your browser. It should return a ``404 error`` because you haven't registered a *mongodb database* yet.</source>
          <target state="translated">``mneme runserver``를 입력하여 서버를 시작하고 브라우저에서``localhost : 5000``으로 이동합니다. * mongodb 데이터베이스 *를 아직 등록하지 않았기 때문에``404 오류 ''를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="e278f6461902662939a6ac617e933404af24ed2a" translate="yes" xml:space="preserve">
          <source>That's it! I hope this was easy to set up, and I hope you enjoy using **Mneme**! If you have any feature requests, please submit an issue on the project GitHub page with the label ``enhancement``, or ``bug`` if you happen to find bugs. Or submit a pull request if you're interested in contributing.</source>
          <target state="translated">그게 다야! 설정이 쉬웠기를 바라며 ** Mneme **을 즐겁게 사용하시기 바랍니다. 기능 요청이있는 경우 프로젝트 GitHub 페이지에 'enhancement'라벨이있는 문제를 제출하거나 버그를 발견하면 'bug'를 제출하세요. 또는 기여에 관심이있는 경우 풀 요청을 제출하십시오.</target>
        </trans-unit>
        <trans-unit id="076f3d989d0438e50ab7fdbe704cf668d4bd1a5c" translate="yes" xml:space="preserve">
          <source>The command should have added a remote repository called ``heroku``. Check by typing ``git remote -v``.</source>
          <target state="translated">이 명령은``heroku ''라는 원격 저장소를 추가해야합니다. ``git remote -v``를 입력하여 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="dd00477f2d0ff4d2961059e5056a36adc9c235d7" translate="yes" xml:space="preserve">
          <source>The interface is self-explanatory. You can use ``CTRL-S`` when viewing/editing a particular *mneme* file to quickly save client-side. The file isn't saved on the server-side until you click ``Save Mneme``, which will redirect you to the main page with all of the *mnemes* listed.</source>
          <target state="translated">인터페이스는 자명합니다. 특정 * mneme * 파일을 보거나 편집 할 때``CTRL-S ''를 사용하여 클라이언트 측을 빠르게 저장할 수 있습니다. 파일은``Mneme 저장 ''을 클릭 할 때까지 서버 측에 저장되지 않습니다. 그러면 모든 * mneme *이 나열된 메인 페이지로 리디렉션됩니다.</target>
        </trans-unit>
        <trans-unit id="1e1497beafb64991d8ce9c58f811fa46386619e2" translate="yes" xml:space="preserve">
          <source>The viewer creates a tree of *topics* from the *mneme* file, and the bottom-most nodes are always *strings* in **markdown** format containing more detailed information about the topic/subtopic. The editor/viewer makes it easy to edit and view the *mneme* file.</source>
          <target state="translated">뷰어는 * mneme * 파일에서 * topics * 트리를 생성하고 맨 아래 노드는 항상 주제 / 하위 주제에 대한 자세한 정보를 포함하는 ** markdown ** 형식의 * strings *입니다. 편집기 / 뷰어를 사용하면 * mneme * 파일을 쉽게 편집하고 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36521bac9969ac2309459682098aa4a20346dd9e" translate="yes" xml:space="preserve">
          <source>View on PyPI: https://pypi.python.org/pypi/mneme/</source>
          <target state="translated">PyPI에서보기 : https://pypi.python.org/pypi/mneme/</target>
        </trans-unit>
        <trans-unit id="3dec39cd17fa589f43a9d4f2b6947214db12b1a6" translate="yes" xml:space="preserve">
          <source>You probably want to be able to use *mneme* as a web app so you can edit notes on your mobile phone or tablet wherever you are. It also opens the door to modify the web app in the ways you want it to work. Here are the steps to get *mneme* up and running with Heroku.</source>
          <target state="translated">* mneme *을 웹 앱으로 사용하여 어디에서나 휴대폰이나 태블릿에서 메모를 편집 할 수 있기를 원할 것입니다. 또한 웹 앱을 원하는 방식으로 수정할 수있는 문을 엽니 다. 다음은 Heroku에서 * mneme *을 시작하고 실행하는 단계입니다.</target>
        </trans-unit>
        <trans-unit id="2ed84bce267553840aa381a88cffce696e7ff747" translate="yes" xml:space="preserve">
          <source>You should see ``(venv)`` next to your shell prompt indicating that it's active.</source>
          <target state="translated">쉘 프롬프트 옆에``(venv)``가 활성화되어 있음을 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="82a1c3817ad633969f9126904503737d0b83929f" translate="yes" xml:space="preserve">
          <source>``git push heroku master``</source>
          <target state="translated">``git push heroku master ''</target>
        </trans-unit>
        <trans-unit id="62396acd29eef697b1bf6e5162ce621c28bc2a7b" translate="yes" xml:space="preserve">
          <source>``heroku create``</source>
          <target state="translated">``영웅 만들기 ''</target>
        </trans-unit>
        <trans-unit id="b81f5bb752b8b9d5e42f2ad5eee45e5ec570a83b" translate="yes" xml:space="preserve">
          <source>``heroku keys:add ~/.ssh/id_rsa.pub``</source>
          <target state="translated">``heroku 키 : add ~ / .ssh / id_rsa.pub ''</target>
        </trans-unit>
        <trans-unit id="bfda26aa90ad2d8c74d2a505c6606a663844e275" translate="yes" xml:space="preserve">
          <source>``heroku keys:add``</source>
          <target state="translated">``heroku 키 : 추가``</target>
        </trans-unit>
        <trans-unit id="4e5d5adc7dd4c25f4e4532ff113cdda83f402d64" translate="yes" xml:space="preserve">
          <source>``pip install --user mneme``</source>
          <target state="translated">``pip install --user mneme``</target>
        </trans-unit>
        <trans-unit id="54ae104bee5c885d943f6d59bd8eff2eb3843c68" translate="yes" xml:space="preserve">
          <source>``source venv/bin/activate``</source>
          <target state="translated">``소스 venv / bin / activate``</target>
        </trans-unit>
        <trans-unit id="67632471e912aea8eeadac6a904db46ff45a1bf5" translate="yes" xml:space="preserve">
          <source>``virtualenv venv``</source>
          <target state="translated">``virtualenv venv ''</target>
        </trans-unit>
        <trans-unit id="994156025903cb09997fd6227070e223132af780" translate="yes" xml:space="preserve">
          <source>mongoexport --host (hostname:port) -u &amp;lt;user&amp;gt; -p&amp;lt;pass&amp;gt; --db &amp;lt;db&amp;gt; --collection &amp;lt;collection&amp;gt; --out &amp;lt;json output file&amp;gt;</source>
          <target state="translated">mongoexport --host (호스트 이름 : 포트) -u &amp;lt;user&amp;gt; -p &amp;lt;pass&amp;gt; --db &amp;lt;db&amp;gt; --collection &amp;lt;collection&amp;gt; --out &amp;lt;json 출력 파일&amp;gt;</target>
        </trans-unit>
        <trans-unit id="78853c3f6bde84fa45d65f00c7254d9d7586e0ea" translate="yes" xml:space="preserve">
          <source>mongoexport --host oceanic.mongohq.com:10052 -u mnememaster -ppasswd --db mnemedb --collection mneme --out mnemes.json</source>
          <target state="translated">mongoexport --host oceanic.mongohq.com:10052 -u mnememaster -ppasswd --db mnemedb --collection mneme --out mnemes.json</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
