<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/draftjs-exporter/">
    <body>
      <group id="draftjs-exporter">
        <trans-unit id="89a7d77dcda0679d44b6467a214922d53c4bc928" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://draftjs.org/&quot;&gt;Draft.js&lt;/a&gt; is a rich text editor framework for &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;. Its approach is different from most rich text editors because it does not store data as HTML, but rather in its own representation called ContentState. This exporter is useful when the ContentState to HTML conversion has to be done in a Python ecosystem.</source>
          <target state="translated">&lt;a href=&quot;https://draftjs.org/&quot;&gt;Draft.js&lt;/a&gt; 는 &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; 용 서식있는 텍스트 편집기 프레임 워크입니다 . 이 방법은 데이터를 HTML로 저장하지 않고 ContentState라는 자체 표현으로 저장하기 때문에 대부분의 서식있는 텍스트 편집기와 다릅니다. 이 내보내기는 ContentState에서 HTML 로의 변환이 Python 생태계에서 수행되어야 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="05c5ca178aed5dd7a5d9f3e1d915dbde9140a00a" translate="yes" xml:space="preserve">
          <source>Add the following to the exporter config,</source>
          <target state="translated">내보내기 구성에 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="5126940d744a6dff391a643edf858b06f00785ed" translate="yes" xml:space="preserve">
          <source>Advanced usage</source>
          <target state="translated">고급 사용법</target>
        </trans-unit>
        <trans-unit id="e34c67a413cc13bff1bc120db1eff1424946ce93" translate="yes" xml:space="preserve">
          <source>Alternative backing engines</source>
          <target state="translated">대체 백업 엔진</target>
        </trans-unit>
        <trans-unit id="eed87c23b43026871c8ab6c71ec1c981e97ce04e" translate="yes" xml:space="preserve">
          <source>Apart from &lt;code&gt;create_element&lt;/code&gt;, a &lt;code&gt;parse_html&lt;/code&gt; method is also available. Use it to interface with other HTML generators, like template engines.</source>
          <target state="translated">그렇다에서 &lt;code&gt;create_element&lt;/code&gt; 하는 &lt;code&gt;parse_html&lt;/code&gt; 방법도 사용할 수 있습니다. 템플릿 엔진과 같은 다른 HTML 생성기와 인터페이스하는 데 사용합니다.</target>
        </trans-unit>
        <trans-unit id="23936ce755dd1fe091ab90a6314553128ac91956" translate="yes" xml:space="preserve">
          <source>Automatic conversion of entity data to HTML attributes (int &amp;amp; boolean to string, style object to style string).</source>
          <target state="translated">엔티티 데이터를 HTML 속성으로 자동 변환 (int &amp;amp; boolean을 문자열로, 스타일 객체를 스타일 문자열로).</target>
        </trans-unit>
        <trans-unit id="b45d3746128e467f7961f387dfd30507a14e8fb6" translate="yes" xml:space="preserve">
          <source>By default, the exporter uses a dependency-free engine called &lt;code&gt;string&lt;/code&gt; to build the DOM tree. There are two alternative backing engines: &lt;code&gt;html5lib&lt;/code&gt; (via BeautifulSoup) and &lt;code&gt;lxml&lt;/code&gt;.</source>
          <target state="translated">기본적으로 내보내기는 &lt;code&gt;string&lt;/code&gt; 이라는 종속성이없는 엔진 을 사용하여 DOM 트리를 빌드합니다. 두 개의 대체 백업 엔진이 있습니다 : &lt;code&gt;html5lib&lt;/code&gt; (BeautifulSoup을 통해) 및 &lt;code&gt;lxml&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">구성</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">기여</target>
        </trans-unit>
        <trans-unit id="a0059a104cab5b52db320a50024325d57d9d5b41" translate="yes" xml:space="preserve">
          <source>Convert line breaks to &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">줄 바꿈을 &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 요소로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="bfac50d6424b5166c3ee2808c85ae7c139b5182f" translate="yes" xml:space="preserve">
          <source>Credits</source>
          <target state="translated">크레딧</target>
        </trans-unit>
        <trans-unit id="7f87cef1328db5f76b4a3b465748829b2ad4e37e" translate="yes" xml:space="preserve">
          <source>Custom backing engines</source>
          <target state="translated">맞춤형 백업 엔진</target>
        </trans-unit>
        <trans-unit id="d47791d6d5efdc5ba7a9604f430d5b0a4824883f" translate="yes" xml:space="preserve">
          <source>Custom components</source>
          <target state="translated">맞춤형 구성 요소</target>
        </trans-unit>
        <trans-unit id="1613092717ed25ebbf74b9eb37330065f2ccbbb8" translate="yes" xml:space="preserve">
          <source>Default, extensible block &amp;amp; inline style maps for common HTML elements.</source>
          <target state="translated">일반적인 HTML 요소에 대한 기본 확장 가능한 블록 및 인라인 스타일 맵.</target>
        </trans-unit>
        <trans-unit id="138972dce3c10c9054f9319cfea2b277053f676f" translate="yes" xml:space="preserve">
          <source>Define any attribute in the block map &amp;ndash; custom class names for elements.</source>
          <target state="translated">블록 맵에서 속성을 정의합니다. 요소에 대한 사용자 정의 클래스 이름입니다.</target>
        </trans-unit>
        <trans-unit id="3b230184677b394f28380b69742259082517aeb9" translate="yes" xml:space="preserve">
          <source>Draft.js exporter</source>
          <target state="translated">Draft.js 내보내기</target>
        </trans-unit>
        <trans-unit id="a1e0e94d24568d9ad9d3e3e750a3e358fce19109" translate="yes" xml:space="preserve">
          <source>Draft.js stores data in a JSON representation based on blocks, representing lines of content in the editor, annotated with entities and styles to represent rich text. For more information, &lt;a href=&quot;https://medium.com/@rajaraodv/how-draft-js-represents-rich-text-data-eeabb5f25cf2&quot;&gt;this article&lt;/a&gt; covers the concepts further.</source>
          <target state="translated">Draft.js는 블록을 기반으로하는 JSON 표현으로 데이터를 저장하고, 편집기에서 콘텐츠 줄을 나타내고, 서식있는 텍스트를 나타내는 엔터티와 스타일로 주석을 달았습니다. 자세한 내용은 &lt;a href=&quot;https://medium.com/@rajaraodv/how-draft-js-represents-rich-text-data-eeabb5f25cf2&quot;&gt;이 문서&lt;/a&gt; 에서 개념에 대해 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="f87adc97bc867db111b5ecc593cbc185b5d73608" translate="yes" xml:space="preserve">
          <source>Extensive configuration of the generated HTML.</source>
          <target state="translated">생성 된 HTML의 광범위한 구성.</target>
        </trans-unit>
        <trans-unit id="9569b61bb8c7d39f232c2190f89e63b08ef14cbc" translate="yes" xml:space="preserve">
          <source>Fallback components</source>
          <target state="translated">대체 구성 요소</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">풍모</target>
        </trans-unit>
        <trans-unit id="366df0afdce10822973f04858c3997d19fa5838c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;html5lib&lt;/code&gt;, do &lt;code&gt;pip install draftjs_exporter[html5lib]&lt;/code&gt;.</source>
          <target state="translated">들어 &lt;code&gt;html5lib&lt;/code&gt; 수행 &lt;code&gt;pip install draftjs_exporter[html5lib]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02d697e666cdfdfad29896088986c67d483bdafc" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;lxml&lt;/code&gt;, do &lt;code&gt;pip install draftjs_exporter[lxml]&lt;/code&gt;. It also requires &lt;code&gt;libxml2&lt;/code&gt; and &lt;code&gt;libxslt&lt;/code&gt; to be available on your system.</source>
          <target state="translated">들어 &lt;code&gt;lxml&lt;/code&gt; 이 수행 &lt;code&gt;pip install draftjs_exporter[lxml]&lt;/code&gt; . 또한 시스템에서 &lt;code&gt;libxml2&lt;/code&gt; 및 &lt;code&gt;libxslt&lt;/code&gt; 를 사용할 수 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="0146b1998d9c21dcad837a3041918ac2bbbbd7b4" translate="yes" xml:space="preserve">
          <source>Here is an example implementation:</source>
          <target state="translated">다음은 구현의 예입니다.</target>
        </trans-unit>
        <trans-unit id="84b25dbbab0326264e48f81207c8107d5d4ddac7" translate="yes" xml:space="preserve">
          <source>If you just want to set up the project on your own computer, the contribution guidelines also contain all of the setup commands.</source>
          <target state="translated">자신의 컴퓨터에서 프로젝트를 설정하려는 경우 기여 지침에도 모든 설정 명령이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8115dee2d09b458eefa214ea8fb390c538ccc822" translate="yes" xml:space="preserve">
          <source>In your code, create an exporter and use the &lt;code&gt;render&lt;/code&gt; method to create HTML:</source>
          <target state="translated">코드에서 내보내기 를 만들고 &lt;code&gt;render&lt;/code&gt; 메서드를 사용하여 HTML을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="2fa1427428a8ffd3f332b187e2845a2cfa63a7d7" translate="yes" xml:space="preserve">
          <source>It is developed alongside the &lt;a href=&quot;https://www.draftail.org/&quot;&gt;Draftail&lt;/a&gt; rich text editor, for &lt;a href=&quot;https://github.com/wagtail/wagtail&quot;&gt;Wagtail&lt;/a&gt;. Check out the &lt;a href=&quot;http://playground.draftail.org/&quot;&gt;online demo&lt;/a&gt;, and our &lt;a href=&quot;https://www.draftail.org/blog/2018/03/13/rethinking-rich-text-pipelines-with-draft-js&quot;&gt;introductory blog post&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/wagtail/wagtail&quot;&gt;Wagtail&lt;/a&gt; 용 &lt;a href=&quot;https://www.draftail.org/&quot;&gt;Draftail&lt;/a&gt; 서식있는 텍스트 편집기 와 함께 개발되었습니다 . 밖으로 체크 &lt;a href=&quot;http://playground.draftail.org/&quot;&gt;온라인 데모&lt;/a&gt; , 그리고 우리의 &lt;a href=&quot;https://www.draftail.org/blog/2018/03/13/rethinking-rich-text-pipelines-with-draft-js&quot;&gt;소개 블로그 게시물을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="be3aee2b8e06230d8040ba6d278239204a311722" translate="yes" xml:space="preserve">
          <source>Library to convert rich text from Draft.js raw ContentState to HTML</source>
          <target state="translated">Draft.js 원시 ContentState에서 HTML로 서식있는 텍스트를 변환하는 라이브러리</target>
        </trans-unit>
        <trans-unit id="e873658e5f0c19da47f55c011ffbbd18c4eb5d20" translate="yes" xml:space="preserve">
          <source>Library to convert rich text from Draft.js raw ContentState to HTML.</source>
          <target state="translated">Draft.js 원시 ContentState에서 HTML로 서식있는 텍스트를 변환하는 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="5b13fec6e9cea54c79c5356366d7b55079a8d5ee" translate="yes" xml:space="preserve">
          <source>Nested lists (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements go inside &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;, with multiple levels).</source>
          <target state="translated">중첩 된 목록 ( &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 요소 는 여러 수준으로 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; 내부에 있음).</target>
        </trans-unit>
        <trans-unit id="26973964d473f363cf6b3cb58a4856dd150bc285" translate="yes" xml:space="preserve">
          <source>Output inline styles as inline elements (&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;, pick and choose, with any attribute).</source>
          <target state="translated">인라인 스타일을 인라인 요소로 출력합니다 ( &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; , 모든 속성과 함께 선택 및 선택).</target>
        </trans-unit>
        <trans-unit id="2690b01f8e1a51798c69ef8b4d3187b150b3a371" translate="yes" xml:space="preserve">
          <source>Overlapping inline style and entity ranges.</source>
          <target state="translated">인라인 스타일과 항목 범위가 겹칩니다.</target>
        </trans-unit>
        <trans-unit id="63e2c791a91e6a1dc538d6d2c1d4651b708e0f0e" translate="yes" xml:space="preserve">
          <source>Python 3.6+ type annotations.</source>
          <target state="translated">Python 3.6+ 유형 주석.</target>
        </trans-unit>
        <trans-unit id="89bfc1b2c5f330360922a11d59527779b265e93c" translate="yes" xml:space="preserve">
          <source>React-like API to create custom components.</source>
          <target state="translated">맞춤형 구성 요소를 생성하는 React와 유사한 API.</target>
        </trans-unit>
        <trans-unit id="e7ffc95076489a08bf4c953f0385eb76f0b9c40f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;example.py&quot;&gt;examples.py&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;example.py&quot;&gt;examples.py&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1b135f1026e31ef84e9526343e061c27354b26c0" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;examples.py&lt;/code&gt; in the repository for more details.</source>
          <target state="translated">자세한 내용 은 저장소의 &lt;code&gt;examples.py&lt;/code&gt; 를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="d4c5fc5e40da96827ca1e31814ae47db5f75fe12" translate="yes" xml:space="preserve">
          <source>See anything you like in here? Anything missing? We welcome all support, whether on bug reports, feature requests, code, design, reviews, tests, documentation, and more. Please have a look at our &lt;a href=&quot;docs/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt;.</source>
          <target state="translated">여기에서 좋아하는 것이 보이십니까? 누락 된 것이 있습니까? 버그 보고서, 기능 요청, 코드, 디자인, 리뷰, 테스트, 문서 등에 대한 모든 지원을 환영합니다. 우리의 &lt;a href=&quot;docs/CONTRIBUTING.md&quot;&gt;기여 가이드 라인을&lt;/a&gt; 보세요 .</target>
        </trans-unit>
        <trans-unit id="542e39ab85fa9280fa866f682a9eb117162ca28a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string&lt;/code&gt; engine is the fastest, and does not have any dependencies. Its only drawback is that the &lt;code&gt;parse_html&lt;/code&gt; method does not escape/sanitise HTML like that of other engines.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; 엔진은 빠른이며, 종속성이 없습니다. 유일한 단점은 &lt;code&gt;parse_html&lt;/code&gt; 메소드가 다른 엔진과 같이 HTML을 이스케이프 / 정화하지 않는다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1befcd0f7f47a13dc8049fb4b573f1d73a2bb541" translate="yes" xml:space="preserve">
          <source>The exporter output is extensively configurable to cater for varied rich text requirements.</source>
          <target state="translated">내보내기 출력은 다양한 서식있는 텍스트 요구 사항을 충족하도록 광범위하게 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42ad4a38ec45fbcdca465aba8f7764c29a85ada4" translate="yes" xml:space="preserve">
          <source>The exporter supports using custom engines to generate its output via the &lt;code&gt;DOM&lt;/code&gt; API. This can be useful to implement custom export formats, e.g. &lt;a href=&quot;https://github.com/thibaudcolas/draftjs_exporter_markdown&quot;&gt;to Markdown (experimental)&lt;/a&gt;.</source>
          <target state="translated">내보내기는 사용자 정의 엔진을 사용하여 &lt;code&gt;DOM&lt;/code&gt; API 를 통해 출력을 생성하는 것을 지원합니다 . 이것은 사용자 정의 내보내기 형식을 구현하는 데 유용 할 수 있습니다 &lt;a href=&quot;https://github.com/thibaudcolas/draftjs_exporter_markdown&quot;&gt;(&lt;/a&gt; 예 : Markdown (실험적)) .</target>
        </trans-unit>
        <trans-unit id="2093690a5b3c5b4cf51261feb5e3099767b27b9c" translate="yes" xml:space="preserve">
          <source>The exporter&amp;rsquo;s codebase is typed with annotations from the Python 3.6+ standard library, checked with mypy. Reusable types are made available:</source>
          <target state="translated">내보내기의 코드베이스는 mypy로 확인 된 Python 3.6+ 표준 라이브러리의 주석으로 입력됩니다. 재사용 가능한 유형을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a7fc17d24bf9ba459616ca4a1f5b2ce888c1fce" translate="yes" xml:space="preserve">
          <source>The initial use case was to gain more control over the content managed by rich text editors in a Wagtail/Django site. If you want to read the full story, have a look at our blog post: &lt;a href=&quot;https://www.draftail.org/blog/2018/03/13/rethinking-rich-text-pipelines-with-draft-js&quot;&gt;Rethinking rich text pipelines with Draft.js&lt;/a&gt;.</source>
          <target state="translated">초기 사용 사례는 Wagtail / Django 사이트에서 서식있는 텍스트 편집기가 관리하는 콘텐츠를 더 많이 제어하는 ​​것이 었습니다. 전체 기사를 읽으려면 &lt;a href=&quot;https://www.draftail.org/blog/2018/03/13/rethinking-rich-text-pipelines-with-draft-js&quot;&gt;Draft.js로 리치 텍스트 파이프 라인 재검토&lt;/a&gt; 블로그 게시물 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="01258a11c84ee0c86392bfe1cecb3160754f8f71" translate="yes" xml:space="preserve">
          <source>Then, use the &lt;code&gt;engine&lt;/code&gt; attribute of the exporter config:</source>
          <target state="translated">그런 다음 내보내기 구성 의 &lt;code&gt;engine&lt;/code&gt; 속성을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="d08ec679e497243aaa8a676827ae47fe9bd702a9" translate="yes" xml:space="preserve">
          <source>This exporter takes the Draft.js ContentState data as input, and outputs HTML based on its configuration. To get started, install the package:</source>
          <target state="translated">이 내보내기는 Draft.js ContentState 데이터를 입력으로 사용하고 구성에 따라 HTML을 출력합니다. 시작하려면 패키지를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="440a8811815779de6e5c663faa2f0b1ff2c6fc35" translate="yes" xml:space="preserve">
          <source>This fallback component can now control the exporter behavior when normal components are not found. Here is an example:</source>
          <target state="translated">이 대체 구성 요소는 이제 일반 구성 요소를 찾을 수 없을 때 내보내기 동작을 제어 할 수 있습니다. 다음은 예입니다.</target>
        </trans-unit>
        <trans-unit id="c79109d7cce0de25a887741031ccbc36fc50dffa" translate="yes" xml:space="preserve">
          <source>This project adheres to &lt;a href=&quot;http://semver.org/spec/v2.0.0.html&quot;&gt;Semantic Versioning&lt;/a&gt;, and &lt;a href=&quot;https://thib.me/python-memory-profiling-for-the-draft-js-exporter&quot;&gt;measures performance&lt;/a&gt; and &lt;a href=&quot;https://coveralls.io/github/springload/draftjs_exporter&quot;&gt;code coverage&lt;/a&gt;. Code is checked with &lt;a href=&quot;https://mypy.readthedocs.io/en/latest/index.html&quot;&gt;mypy&lt;/a&gt;.</source>
          <target state="translated">이 프로젝트는 준수 &lt;a href=&quot;http://semver.org/spec/v2.0.0.html&quot;&gt;시맨틱 버전&lt;/a&gt; 및 &lt;a href=&quot;https://thib.me/python-memory-profiling-for-the-draft-js-exporter&quot;&gt;성능 측정&lt;/a&gt; 및 &lt;a href=&quot;https://coveralls.io/github/springload/draftjs_exporter&quot;&gt;코드 커버리지를&lt;/a&gt; . 코드는 &lt;a href=&quot;https://mypy.readthedocs.io/en/latest/index.html&quot;&gt;mypy&lt;/a&gt; 로 확인됩니다 .</target>
        </trans-unit>
        <trans-unit id="66e5e2a2528a4675a0eb1d62c4147298c7c68bad" translate="yes" xml:space="preserve">
          <source>This project is made possible by the work of &lt;a href=&quot;https://github.com/springload&quot;&gt;Springload&lt;/a&gt;, a New Zealand digital agency. The &lt;em&gt;beautiful&lt;/em&gt; demo site is the work of &lt;a href=&quot;https://github.com/thibaudcolas&quot;&gt;@thibaudcolas&lt;/a&gt;.</source>
          <target state="translated">이 프로젝트는 뉴질랜드의 디지털 에이전시 인 &lt;a href=&quot;https://github.com/springload&quot;&gt;Springload&lt;/a&gt; 의 작업으로 가능해졌습니다 . &lt;em&gt;아름다운&lt;/em&gt; 데모 사이트의 작품입니다 &lt;a href=&quot;https://github.com/thibaudcolas&quot;&gt;@thibaudcolas&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="60d3b3cec85b2e8a6c2ca0a70edccd768e932f6d" translate="yes" xml:space="preserve">
          <source>To generate arbitrary markup with dynamic data, the exporter comes with an API to create rendering components. This API mirrors React&amp;rsquo;s &lt;a href=&quot;https://facebook.github.io/react/docs/top-level-api.html#react.createelement&quot;&gt;createElement&lt;/a&gt; API (what JSX compiles to).</source>
          <target state="translated">동적 데이터로 임의의 마크 업을 생성하기 위해 내보내기는 렌더링 구성 요소를 생성하는 API와 함께 제공됩니다. 이 API는 React의 &lt;a href=&quot;https://facebook.github.io/react/docs/top-level-api.html#react.createelement&quot;&gt;createElement&lt;/a&gt; API (JSX가 컴파일하는 것)를 반영합니다.</target>
        </trans-unit>
        <trans-unit id="ee5f3de7938afc6193f57957cf627bbf0b440e19" translate="yes" xml:space="preserve">
          <source>Type annotations</source>
          <target state="translated">타입 주석</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="e3a322c037cb083b908858e3a7f73e3960b5564e" translate="yes" xml:space="preserve">
          <source>View the full list of &lt;a href=&quot;https://github.com/springload/draftjs_exporter/graphs/contributors&quot;&gt;contributors&lt;/a&gt;. &lt;a href=&quot;LICENSE&quot;&gt;MIT licensed&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/springload/draftjs_exporter/graphs/contributors&quot;&gt;기여자&lt;/a&gt; 의 전체 목록을 봅니다. &lt;a href=&quot;LICENSE&quot;&gt;MIT 라이센스&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0dddfe422b9e0076cc9e2e14243bdcfb70dccdc4" translate="yes" xml:space="preserve">
          <source>We support the following Python versions: 3.6, 3.7, 3.8. For Python 2.7 and 3.4 support, please use &lt;a href=&quot;https://github.com/springload/draftjs_exporter/tree/v2.1.7&quot;&gt;v2.1.7&lt;/a&gt; of the exporter. For Python 3.5, use &lt;a href=&quot;https://github.com/springload/draftjs_exporter/tree/v3.0.1&quot;&gt;v3.0.1&lt;/a&gt;.</source>
          <target state="translated">지원되는 Python 버전은 3.6, 3.7, 3.8입니다. Python 2.7 및 3.4 지원 의 경우 내보내기 &lt;a href=&quot;https://github.com/springload/draftjs_exporter/tree/v2.1.7&quot;&gt;v2.1.7&lt;/a&gt; 을 사용하세요 . Python 3.5의 경우 &lt;a href=&quot;https://github.com/springload/draftjs_exporter/tree/v3.0.1&quot;&gt;v3.0.1을&lt;/a&gt; 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="1f345c5915212fcd9dcefa383e28d0756c53cbcd" translate="yes" xml:space="preserve">
          <source>When dealing with changes in the content schema, as part of ongoing development or migrations, some content can go stale.
To solve this, the exporter allows the definition of fallback components for blocks, styles, and entities.
This feature is only used for development at the moment, if you have a use case for this in production we would love to hear from you.
Please get in touch!</source>
          <target state="translated">지속적인 개발 또는 마이그레이션의 일부로 콘텐츠 스키마의 변경 사항을 처리 할 때 일부 콘텐츠가 오래 될 수 있습니다. 이를 해결하기 위해 내보내기는 블록, 스타일 및 엔티티에 대한 대체 구성 요소의 정의를 허용합니다. 이 기능은 현재 개발 용으로 만 사용됩니다. 프로덕션 환경에서 사용 사례가 있다면 여러분의 의견을 듣고 싶습니다. 연락주세요!</target>
        </trans-unit>
        <trans-unit id="21e2caea4476d26af34541ca7c909c7ff2fa4a7f" translate="yes" xml:space="preserve">
          <source>Why</source>
          <target state="translated">왜</target>
        </trans-unit>
        <trans-unit id="7b49e2225355c3757580e86b24df95951ac7b1bb" translate="yes" xml:space="preserve">
          <source>You can also run an example by downloading this repository and then using &lt;code&gt;python example.py&lt;/code&gt;, or by using our &lt;a href=&quot;http://playground.draftail.org/&quot;&gt;online Draft.js demo&lt;/a&gt;.</source>
          <target state="translated">이 저장소를 다운로드 한 다음 &lt;code&gt;python example.py&lt;/code&gt; 를 사용 하거나 &lt;a href=&quot;http://playground.draftail.org/&quot;&gt;온라인 Draft.js 데모&lt;/a&gt; 를 사용하여 예제를 실행할 수도 있습니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
