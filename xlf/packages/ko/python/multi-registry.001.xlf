<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/multi-registry/">
    <body>
      <group id="multi-registry">
        <trans-unit id="719ae988f7aa1b855033df6ed335c38abf591269" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt;&amp;gt;r = MultiRegistry()</source>
          <target state="translated">&amp;gt;&amp;gt;&amp;gt; r = MultiRegistry ()</target>
        </trans-unit>
        <trans-unit id="677598520fbe1496d80691d0dce525b8222ce8d1" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt;&amp;gt;r = MultiRegistry(A, B, 'some.registry.C')</source>
          <target state="translated">&amp;gt;&amp;gt;&amp;gt; r = MultiRegistry (A, B, 'some.registry.C')</target>
        </trans-unit>
        <trans-unit id="cfb75262382d2b1f94d25a7a0a3e0a715fb59cc9" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt;&amp;gt;r.append(A)</source>
          <target state="translated">&amp;gt;&amp;gt;&amp;gt; r.append (A)</target>
        </trans-unit>
        <trans-unit id="7173517702ed62a5bd7f6d01c38ca90849c4c666" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt;&amp;gt;r.append(B)</source>
          <target state="translated">&amp;gt;&amp;gt;&amp;gt; r.append (B)</target>
        </trans-unit>
        <trans-unit id="55440ff0babf76397cbb2d847f3793c244a0c73e" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt;&amp;gt;r.insert(2, 'some.registry.C')</source>
          <target state="translated">&amp;gt;&amp;gt;&amp;gt; r.insert (2, 'some.registry.C')</target>
        </trans-unit>
        <trans-unit id="534263b055901edb4717e6d30836b4048c9a824f" translate="yes" xml:space="preserve">
          <source>* order of ``append()`` calls.</source>
          <target state="translated">*``append ()``호출 순서.</target>
        </trans-unit>
        <trans-unit id="acd3f9857b53b6f787fc39b06c6a5ff9fa06e6d7" translate="yes" xml:space="preserve">
          <source>* order the registries were provided at the object initialization</source>
          <target state="translated">* 객체 초기화시 레지스트리가 제공된 순서</target>
        </trans-unit>
        <trans-unit id="1991543999798d865b1b018d89fcc07168e92043" translate="yes" xml:space="preserve">
          <source>* taking into account indices provided with ``insert()`` call</source>
          <target state="translated">*``insert ()``호출과 함께 제공되는 인덱스 고려</target>
        </trans-unit>
        <trans-unit id="1dff53afa2a7b7a3f94dcd2842f3dfe0d65a5128" translate="yes" xml:space="preserve">
          <source>.. note::</source>
          <target state="translated">.. 노트::</target>
        </trans-unit>
        <trans-unit id="f401a3ff303f2801cfdf87f2b59288c241bd6ad4" translate="yes" xml:space="preserve">
          <source>A module that aggregates key-value attributes from multiple sources</source>
          <target state="translated">여러 소스에서 키-값 속성을 집계하는 모듈</target>
        </trans-unit>
        <trans-unit id="1af72887a096114e484cd78a9cb1a94838c45598" translate="yes" xml:space="preserve">
          <source>Allows to aggregate key-value data from many sources.</source>
          <target state="translated">여러 소스에서 키-값 데이터를 집계 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7299ed38e4218a1bdb2603f98aa3e65d8430b7e1" translate="yes" xml:space="preserve">
          <source>Can be used, for example, as a proxy to settings object in Django framework.</source>
          <target state="translated">예를 들어 Django 프레임 워크의 설정 개체에 대한 프록시로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5846852fb185992b105cf5ea00dbb901127f99f" translate="yes" xml:space="preserve">
          <source>For example, if we have two settings like objects:</source>
          <target state="translated">예를 들어 객체와 같은 두 가지 설정이있는 경우 :</target>
        </trans-unit>
        <trans-unit id="330c5f67e32dbcdbbf08c7190eda8255ede7f97f" translate="yes" xml:space="preserve">
          <source>If the attribute is not found, attribute error will be</source>
          <target state="translated">속성이 없으면 속성 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="418ab01a05e05f5e1be2594abe5836ec257d227a" translate="yes" xml:space="preserve">
          <source>If there is an attribute present in more than one appended object,</source>
          <target state="translated">둘 이상의 추가 된 객체에 속성이있는 경우</target>
        </trans-unit>
        <trans-unit id="360ba8c15a8223a576246892d638cf3e1d05a785" translate="yes" xml:space="preserve">
          <source>The registries can be provided as python objects or</source>
          <target state="translated">레지스트리는 파이썬 객체로 제공되거나</target>
        </trans-unit>
        <trans-unit id="fc86211a1d0abd09a625bcfe1a5da460f528d7ca" translate="yes" xml:space="preserve">
          <source>The sources of key-value data are appended to :class:`MultiRegistry`</source>
          <target state="translated">키-값 데이터의 소스는 : class :`MultiRegistry`에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="c5b05202105d22280e18cada8f7f37ac1fade741" translate="yes" xml:space="preserve">
          <source>Upon access, attributes will be looked up in the parent objects</source>
          <target state="translated">액세스시 속성은 상위 개체에서 조회됩니다.</target>
        </trans-unit>
        <trans-unit id="1502b3370b27ea91e078983ba91aee9d649aa9cc" translate="yes" xml:space="preserve">
          <source>``A`` with attribute ``a``</source>
          <target state="translated">속성이``a ''인``A ''</target>
        </trans-unit>
        <trans-unit id="eeeb5e115c6ff6a6e9f0606d018b4e9595c8d1eb" translate="yes" xml:space="preserve">
          <source>and ``B`` with attribute ``b``</source>
          <target state="translated">및``B ''속성``b ''</target>
        </trans-unit>
        <trans-unit id="d2fd0cbc491c80084500e9233bab85441c052afa" translate="yes" xml:space="preserve">
          <source>and a third one, found in module importable from ``'some.registry.C'``,</source>
          <target state="translated">그리고 세 번째는`` 'some.registry.C'``에서 가져올 수있는 모듈에 있습니다.</target>
        </trans-unit>
        <trans-unit id="df0a06b3a0f58af6d65c0bc3e9e2cb555e514462" translate="yes" xml:space="preserve">
          <source>be raised if module at the path does not exist</source>
          <target state="translated">경로에 모듈이 존재하지 않으면 발생</target>
        </trans-unit>
        <trans-unit id="94971d32425e02e6154c63a4a4d3c2e40f5b531e" translate="yes" xml:space="preserve">
          <source>dotted notation, as explained in more detail below.</source>
          <target state="translated">아래에 자세히 설명 된대로 점 표기법입니다.</target>
        </trans-unit>
        <trans-unit id="3f12d38957261e8d95b9f91465adc70543616394" translate="yes" xml:space="preserve">
          <source>dotted python paths. In the latter case an import error will</source>
          <target state="translated">점선 파이썬 경로. 후자의 경우 가져 오기 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="512f7f0c07df580134f76435ed1f857abe4f9bc6" translate="yes" xml:space="preserve">
          <source>in the order the latter were appended.</source>
          <target state="translated">순서대로 후자가 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="9612c50b47a481c53a39b65625075fa440ca332e" translate="yes" xml:space="preserve">
          <source>it will be found.</source>
          <target state="translated">발견 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="c6b08100abcdab1cf09ffff8a534795c812a26e7" translate="yes" xml:space="preserve">
          <source>or alternatively:</source>
          <target state="translated">또는 대안으로 :</target>
        </trans-unit>
        <trans-unit id="c20b0b65439f562fb67544e396af99806341f8d3" translate="yes" xml:space="preserve">
          <source>r.b - attrubute b will be first looked</source>
          <target state="translated">rb-attrubute b가 먼저 보입니다.</target>
        </trans-unit>
        <trans-unit id="c5d7563c36c87c47613a165bd59f6753a48550de" translate="yes" xml:space="preserve">
          <source>raised.</source>
          <target state="translated">높인.</target>
        </trans-unit>
        <trans-unit id="c9394ed7c47826281f1a98d025c6742eb7b5f933" translate="yes" xml:space="preserve">
          <source>registries are stored internally, which takes into account:</source>
          <target state="translated">레지스트리는 내부적으로 저장되며 다음 사항을 고려합니다.</target>
        </trans-unit>
        <trans-unit id="d35b46a753cf7292214c0a1cc5d77e8c4d423fc5" translate="yes" xml:space="preserve">
          <source>the first one will be returned - in the same order the</source>
          <target state="translated">첫 번째 항목이 반환됩니다. 동일한 순서로</target>
        </trans-unit>
        <trans-unit id="5d94299f8576ec5ee49eb8e7775a8b891c7f0cab" translate="yes" xml:space="preserve">
          <source>then access the registry as:</source>
          <target state="translated">그런 다음 다음과 같이 레지스트리에 액세스하십시오.</target>
        </trans-unit>
        <trans-unit id="999f43a53e7fbbec92a3b62e760cfd030b63fd38" translate="yes" xml:space="preserve">
          <source>up in the object A, then in the object B, where</source>
          <target state="translated">객체 A, 다음 객체 B, 여기서</target>
        </trans-unit>
        <trans-unit id="878b93bc71647f53572380b8fa9840aedb62764a" translate="yes" xml:space="preserve">
          <source>vi ``append()`` method, then looked up via standard Python</source>
          <target state="translated">vi``append ()``메소드, 그런 다음 표준 Python을 통해 조회</target>
        </trans-unit>
        <trans-unit id="b7d38a5f587e50e0769d562c1c23867ca5dd37f5" translate="yes" xml:space="preserve">
          <source>we can construct the registry as:</source>
          <target state="translated">레지스트리를 다음과 같이 구성 할 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
