<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/prometheus-flask-exporter/">
    <body>
      <group id="prometheus-flask-exporter">
        <trans-unit id="0f04757155b76500ec20369eab4299a5d9517f3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flask_exporter_info&lt;/code&gt; (Gauge)
Information about the Prometheus Flask exporter itself (e.g. &lt;code&gt;version&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;flask_exporter_info&lt;/code&gt; (Gauge) Information about the Prometheus Flask exporter itself (e.g. &lt;code&gt;version&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c311c60ec1f0910d3347437a3614faab20e70dc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flask_http_request_duration_seconds&lt;/code&gt; (Histogram)
Labels: &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt;.
Flask HTTP request duration in seconds for all Flask requests.</source>
          <target state="translated">&lt;code&gt;flask_http_request_duration_seconds&lt;/code&gt; (Histogram) Labels: &lt;code&gt;method&lt;/code&gt; , &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt; . Flask HTTP request duration in seconds for all Flask requests.</target>
        </trans-unit>
        <trans-unit id="e2995a090d6d41a34364af3d41581b8c6eae2155" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flask_http_request_exceptions_total&lt;/code&gt; (Counter)
Labels: &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt;.
Total number of uncaught exceptions when serving Flask requests.</source>
          <target state="translated">&lt;code&gt;flask_http_request_exceptions_total&lt;/code&gt; (Counter) Labels: &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt; . Total number of uncaught exceptions when serving Flask requests.</target>
        </trans-unit>
        <trans-unit id="5dab30a38e7229bad118438c56d5612bf51ccd08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flask_http_request_total&lt;/code&gt; (Counter)
Labels: &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt;.
Total number of HTTP requests for all Flask requests.</source>
          <target state="translated">&lt;code&gt;flask_http_request_total&lt;/code&gt; (Counter) Labels: &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt; . Total number of HTTP requests for all Flask requests.</target>
        </trans-unit>
        <trans-unit id="7dc316a4d7519cc019da28c8eb73ecc5994fc27e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt; register your default metrics after all routes have been set up.
Also note, that Gauge metrics registered as default will track the
&lt;code&gt;/metrics&lt;/code&gt; endpoint, and this can't be disabled at the moment.</source>
          <target state="translated">&lt;em&gt;Note:&lt;/em&gt; register your default metrics after all routes have been set up. Also note, that Gauge metrics registered as default will track the &lt;code&gt;/metrics&lt;/code&gt; endpoint, and this can't be disabled at the moment.</target>
        </trans-unit>
        <trans-unit id="1b4d3502e45b510c5328414af64ebfe3430385df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this needs the &lt;code&gt;prometheus_multiproc_dir&lt;/code&gt; environment variable
to point to a valid, writable directory.</source>
          <target state="translated">&lt;strong&gt;Note:&lt;/strong&gt; this needs the &lt;code&gt;prometheus_multiproc_dir&lt;/code&gt; environment variable to point to a valid, writable directory.</target>
        </trans-unit>
        <trans-unit id="197ed0d80f7436fa93cfceacd8730ad7ecbf0f8e" translate="yes" xml:space="preserve">
          <source>A final caveat is that the metrics HTTP server will listen on &lt;strong&gt;any&lt;/strong&gt; paths
on the given HTTP port, not only on &lt;code&gt;/metrics&lt;/code&gt;, and it is not implemented
at the moment to be able to change this.</source>
          <target state="translated">A final caveat is that the metrics HTTP server will listen on &lt;strong&gt;any&lt;/strong&gt; paths on the given HTTP port, not only on &lt;code&gt;/metrics&lt;/code&gt; , and it is not implemented at the moment to be able to change this.</target>
        </trans-unit>
        <trans-unit id="ae6fd7ed84437bd3bb34e191d6d97b8d150cb1e1" translate="yes" xml:space="preserve">
          <source>A no-argument callable</source>
          <target state="translated">A no-argument callable</target>
        </trans-unit>
        <trans-unit id="c4d6d651106b53ed9561f28ad003357cfbdedf35" translate="yes" xml:space="preserve">
          <source>A simple static value</source>
          <target state="translated">A simple static value</target>
        </trans-unit>
        <trans-unit id="2636e2699250c01c090626b6937094fc68e2f5dd" translate="yes" xml:space="preserve">
          <source>A single argument callable that will receive the Flask response
as the argument</source>
          <target state="translated">A single argument callable that will receive the Flask response as the argument</target>
        </trans-unit>
        <trans-unit id="48bc6c82b0c44e10a5e5f64206b6ad8ac7af8367" translate="yes" xml:space="preserve">
          <source>Also see the &lt;code&gt;GunicornInternalPrometheusMetrics&lt;/code&gt; class if you want to have
the metrics HTTP endpoint exposed internally, on the same Flask application.</source>
          <target state="translated">Also see the &lt;code&gt;GunicornInternalPrometheusMetrics&lt;/code&gt; class if you want to have the metrics HTTP endpoint exposed internally, on the same Flask application.</target>
        </trans-unit>
        <trans-unit id="bff6cecd7f6f0b81b66d5141ff63bc3cc2d03faf" translate="yes" xml:space="preserve">
          <source>Alternatively - since version &lt;code&gt;0.5.1&lt;/code&gt; - if you set the &lt;code&gt;DEBUG_METRICS&lt;/code&gt;
environment variable, you will get metrics for the latest reloaded code.
These will be exported on the main Flask app.
Serving the metrics on a different port is not going to work
most probably - e.g. &lt;code&gt;PrometheusMetrics.start_http_server(..)&lt;/code&gt; is not
expected to work.</source>
          <target state="translated">Alternatively - since version &lt;code&gt;0.5.1&lt;/code&gt; - if you set the &lt;code&gt;DEBUG_METRICS&lt;/code&gt; environment variable, you will get metrics for the latest reloaded code. These will be exported on the main Flask app. Serving the metrics on a different port is not going to work most probably - e.g. &lt;code&gt;PrometheusMetrics.start_http_server(..)&lt;/code&gt; is not expected to work.</target>
        </trans-unit>
        <trans-unit id="d76207a9e5a83d248f97e1b00d89ec84eda1f58f" translate="yes" xml:space="preserve">
          <source>App Factory Pattern</source>
          <target state="translated">App Factory Pattern</target>
        </trans-unit>
        <trans-unit id="426dbea45a229f065ec559a807b4d40cc63dd23d" translate="yes" xml:space="preserve">
          <source>Application information</source>
          <target state="translated">Application information</target>
        </trans-unit>
        <trans-unit id="df3bd86fcfe8f01489f43d852bd926efd2403ee8" translate="yes" xml:space="preserve">
          <source>By default, the metrics are exposed on the same Flask application on the
&lt;code&gt;/metrics&lt;/code&gt; endpoint and using the core Prometheus registry.
If this doesn't suit your needs, set the &lt;code&gt;path&lt;/code&gt; argument to &lt;code&gt;None&lt;/code&gt; and/or
the &lt;code&gt;export_defaults&lt;/code&gt; argument to &lt;code&gt;False&lt;/code&gt; plus change the &lt;code&gt;registry&lt;/code&gt;
argument if needed.</source>
          <target state="translated">By default, the metrics are exposed on the same Flask application on the &lt;code&gt;/metrics&lt;/code&gt; endpoint and using the core Prometheus registry. If this doesn't suit your needs, set the &lt;code&gt;path&lt;/code&gt; argument to &lt;code&gt;None&lt;/code&gt; and/or the &lt;code&gt;export_defaults&lt;/code&gt; argument to &lt;code&gt;False&lt;/code&gt; plus change the &lt;code&gt;registry&lt;/code&gt; argument if needed.</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">구성</target>
        </trans-unit>
        <trans-unit id="c5769ce70b0b89a0e6e5c67ce47b34cb10860dcb" translate="yes" xml:space="preserve">
          <source>Connexion integration</source>
          <target state="translated">Connexion integration</target>
        </trans-unit>
        <trans-unit id="db0dd3026eeabb25699ceaf9ec4e63d90a734d0a" translate="yes" xml:space="preserve">
          <source>Debug mode</source>
          <target state="translated">디버그 모드</target>
        </trans-unit>
        <trans-unit id="38a87b0f68967f69d0c47aa3f6fb2d4b56a82ce7" translate="yes" xml:space="preserve">
          <source>Default metrics</source>
          <target state="translated">Default metrics</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">예</target>
        </trans-unit>
        <trans-unit id="69b1ca199066b1ed3ff883c0e060216e33dd07ed" translate="yes" xml:space="preserve">
          <source>Flask-RESTful integration</source>
          <target state="translated">Flask-RESTful integration</target>
        </trans-unit>
        <trans-unit id="48b794d78d00bef5a42e1a289ff2c7af4c2c2ea8" translate="yes" xml:space="preserve">
          <source>For multiprocess applications (WSGI or otherwise), you can find some
helper classes in the &lt;code&gt;prometheus_flask_exporter.multiprocess&lt;/code&gt; module.
These provide convenience wrappers for exposing metrics in an
environment where multiple copies of the application will run on a single host.</source>
          <target state="translated">For multiprocess applications (WSGI or otherwise), you can find some helper classes in the &lt;code&gt;prometheus_flask_exporter.multiprocess&lt;/code&gt; module. These provide convenience wrappers for exposing metrics in an environment where multiple copies of the application will run on a single host.</target>
        </trans-unit>
        <trans-unit id="1680bf2bfeda4035f419acb5dfc4264a0738bca6" translate="yes" xml:space="preserve">
          <source>Getting accurate metrics for WSGI apps might require a bit more setup.
See a working sample app in the &lt;code&gt;examples&lt;/code&gt; folder, and also the
&lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/5&quot;&gt;prometheus_flask_exporter#5&lt;/a&gt; issue.</source>
          <target state="translated">Getting accurate metrics for WSGI apps might require a bit more setup. See a working sample app in the &lt;code&gt;examples&lt;/code&gt; folder, and also the &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/5&quot;&gt;prometheus_flask_exporter#5&lt;/a&gt; issue.</target>
        </trans-unit>
        <trans-unit id="e74234a13f2a7cd8d086ddd58c0dfbfbec88c9c4" translate="yes" xml:space="preserve">
          <source>If you use another framework over Flask (perhaps
&lt;a href=&quot;https://connexion.readthedocs.io/&quot;&gt;Connexion&lt;/a&gt;) then you might return
responses from your endpoints that Flask can't deal with by default.
If that is the case, you might need to pass in a &lt;code&gt;response_converter&lt;/code&gt;
that takes the returned object and should convert that to a Flask
friendly response.
See &lt;code&gt;ConnexionPrometheusMetrics&lt;/code&gt; for an example.</source>
          <target state="translated">If you use another framework over Flask (perhaps &lt;a href=&quot;https://connexion.readthedocs.io/&quot;&gt;Connexion&lt;/a&gt;) then you might return responses from your endpoints that Flask can't deal with by default. If that is the case, you might need to pass in a &lt;code&gt;response_converter&lt;/code&gt; that takes the returned object and should convert that to a Flask friendly response. See &lt;code&gt;ConnexionPrometheusMetrics&lt;/code&gt; for an example.</target>
        </trans-unit>
        <trans-unit id="c9db855ab1a81befc03d48f47ea9015254ce5ffc" translate="yes" xml:space="preserve">
          <source>If you want to apply the same metric to multiple (but not all) endpoints,
create its wrapper first, then add to each function.</source>
          <target state="translated">If you want to apply the same metric to multiple (but not all) endpoints, create its wrapper first, then add to each function.</target>
        </trans-unit>
        <trans-unit id="526f0c6c1c8bfe03daa0827c17d44eb78b0fb9c9" translate="yes" xml:space="preserve">
          <source>Label values are evaluated within the request context.</source>
          <target state="translated">Label values are evaluated within the request context.</target>
        </trans-unit>
        <trans-unit id="2228985493d9e43e461c7be5525529248735ad9c" translate="yes" xml:space="preserve">
          <source>Labels</source>
          <target state="translated">Labels</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">MIT</target>
        </trans-unit>
        <trans-unit id="083107400025841551eccbaf6b492fcbce2b07d2" translate="yes" xml:space="preserve">
          <source>Multiprocess applications</source>
          <target state="translated">Multiprocess applications</target>
        </trans-unit>
        <trans-unit id="586efcac8b711e286e0c556d11d934fb62372af7" translate="yes" xml:space="preserve">
          <source>Please also note, that the Prometheus client library does not collect process level
metrics, like memory, CPU and Python GC stats when multiprocessing is enabled.
See the &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/18&quot;&gt;prometheus_flask_exporter#18&lt;/a&gt;
issue for some more context and details.</source>
          <target state="translated">Please also note, that the Prometheus client library does not collect process level metrics, like memory, CPU and Python GC stats when multiprocessing is enabled. See the &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/18&quot;&gt;prometheus_flask_exporter#18&lt;/a&gt; issue for some more context and details.</target>
        </trans-unit>
        <trans-unit id="81cf3e16421ed876acaf0108ae4eb9b52885f020" translate="yes" xml:space="preserve">
          <source>Please note, that changes being live-reloaded, when running the Flask
app with &lt;code&gt;debug=True&lt;/code&gt;, are not going to be reflected in the metrics.
See &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/4&quot;&gt;https://github.com/rycus86/prometheus_flask_exporter/issues/4&lt;/a&gt;
for more details.</source>
          <target state="translated">Please note, that changes being live-reloaded, when running the Flask app with &lt;code&gt;debug=True&lt;/code&gt; , are not going to be reflected in the metrics. See &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/4&quot;&gt;https://github.com/rycus86/prometheus_flask_exporter/issues/4&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="4d98e0e973768614c55b964bd0291716e568763d" translate="yes" xml:space="preserve">
          <source>Prometheus Flask exporter</source>
          <target state="translated">Prometheus Flask exporter</target>
        </trans-unit>
        <trans-unit id="0cc7706a8a24235609545ebbb358d8dac489e7d3" translate="yes" xml:space="preserve">
          <source>Prometheus metrics exporter for Flask</source>
          <target state="translated">Prometheus metrics exporter for Flask</target>
        </trans-unit>
        <trans-unit id="abcb10c0043166626f010c5c18b101cc894dbbe9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/31&quot;&gt;#31&lt;/a&gt;
for context, and please let me know if you know a better way!</source>
          <target state="translated">See &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/31&quot;&gt;#31&lt;/a&gt; for context, and please let me know if you know a better way!</target>
        </trans-unit>
        <trans-unit id="5ca1504fe00f72f710e9c7f1fcb92c24aa800f1a" translate="yes" xml:space="preserve">
          <source>See a working sample app in the &lt;code&gt;examples&lt;/code&gt; folder, and also the
&lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/61&quot;&gt;prometheus_flask_exporter#61&lt;/a&gt; issue.</source>
          <target state="translated">See a working sample app in the &lt;code&gt;examples&lt;/code&gt; folder, and also the &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/61&quot;&gt;prometheus_flask_exporter#61&lt;/a&gt; issue.</target>
        </trans-unit>
        <trans-unit id="db40ba28a0bcdee4ee932e5bae661f6e232befaf" translate="yes" xml:space="preserve">
          <source>See a working sample app in the &lt;code&gt;examples&lt;/code&gt; folder, and also the
&lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/62&quot;&gt;prometheus_flask_exporter#62&lt;/a&gt; issue.</source>
          <target state="translated">See a working sample app in the &lt;code&gt;examples&lt;/code&gt; folder, and also the &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/62&quot;&gt;prometheus_flask_exporter#62&lt;/a&gt; issue.</target>
        </trans-unit>
        <trans-unit id="6bf560639ffaca007e9030a3b690a74e22f3a99f" translate="yes" xml:space="preserve">
          <source>See some simple examples visualized on a Grafana dashboard by running
the demo in the &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/tree/master/examples/sample-signals&quot;&gt;examples/sample-signals&lt;/a&gt; folder.</source>
          <target state="translated">See some simple examples visualized on a Grafana dashboard by running the demo in the &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/tree/master/examples/sample-signals&quot;&gt;examples/sample-signals&lt;/a&gt; folder.</target>
        </trans-unit>
        <trans-unit id="dd76e4a1fc8ce36c02e846d878a1aa1f379a894e" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/64&quot;&gt;prometheus_flask_exporter#64&lt;/a&gt; issue for more details.</source>
          <target state="translated">See the &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/issues/64&quot;&gt;prometheus_flask_exporter#64&lt;/a&gt; issue for more details.</target>
        </trans-unit>
        <trans-unit id="5c9321a809890b224ce4c2a4683b47cb02078387" translate="yes" xml:space="preserve">
          <source>Similarly, the &lt;code&gt;start_http_server&lt;/code&gt; allows exposing the endpoint on an
independent Flask application on a selected HTTP port.
It also supports overriding the endpoint's path and the HTTP listen address.</source>
          <target state="translated">Similarly, the &lt;code&gt;start_http_server&lt;/code&gt; allows exposing the endpoint on an independent Flask application on a selected HTTP port. It also supports overriding the endpoint's path and the HTTP listen address.</target>
        </trans-unit>
        <trans-unit id="ed12be334a4c1a1d28fd9b74aef4dab8abaeecee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://connexion.readthedocs.io/&quot;&gt;Connexion&lt;/a&gt; library has some
support to automatically deal with certain response types, for example
dataclasses, which a plain Flask application would not accept.
To ease the integration, you can use &lt;code&gt;ConnexionPrometheusMetrics&lt;/code&gt; in
place of &lt;code&gt;PrometheusMetrics&lt;/code&gt; that has the &lt;code&gt;response_converter&lt;/code&gt; set
appropriately to be able to deal with whatever Connexion supports for
Flask integrations.</source>
          <target state="translated">The &lt;a href=&quot;https://connexion.readthedocs.io/&quot;&gt;Connexion&lt;/a&gt; library has some support to automatically deal with certain response types, for example dataclasses, which a plain Flask application would not accept. To ease the integration, you can use &lt;code&gt;ConnexionPrometheusMetrics&lt;/code&gt; in place of &lt;code&gt;PrometheusMetrics&lt;/code&gt; that has the &lt;code&gt;response_converter&lt;/code&gt; set appropriately to be able to deal with whatever Connexion supports for Flask integrations.</target>
        </trans-unit>
        <trans-unit id="fbc5c3e67c5f088ee96bb54b5441763375cee673" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://flask-restful.readthedocs.io/&quot;&gt;Flask-RESTful library&lt;/a&gt; has
some custom response handling logic, which can be helpful in some cases.
For example, returning &lt;code&gt;None&lt;/code&gt; would fail on plain Flask, but it
works on Flask-RESTful.
To ease the integration, you can use &lt;code&gt;RESTfulPrometheusMetrics&lt;/code&gt; in
place of &lt;code&gt;PrometheusMetrics&lt;/code&gt; that sets the &lt;code&gt;response_converter&lt;/code&gt; to use
the Flask-RESTful &lt;code&gt;API&lt;/code&gt; response utilities.</source>
          <target state="translated">The &lt;a href=&quot;https://flask-restful.readthedocs.io/&quot;&gt;Flask-RESTful library&lt;/a&gt; has some custom response handling logic, which can be helpful in some cases. For example, returning &lt;code&gt;None&lt;/code&gt; would fail on plain Flask, but it works on Flask-RESTful. To ease the integration, you can use &lt;code&gt;RESTfulPrometheusMetrics&lt;/code&gt; in place of &lt;code&gt;PrometheusMetrics&lt;/code&gt; that sets the &lt;code&gt;response_converter&lt;/code&gt; to use the Flask-RESTful &lt;code&gt;API&lt;/code&gt; response utilities.</target>
        </trans-unit>
        <trans-unit id="7a6990ae242faa5e5db20cd63676b7f7c7699e1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrometheusMetrics.info(..)&lt;/code&gt; method provides a way to expose
information as a &lt;code&gt;Gauge&lt;/code&gt; metric, the application version for example.</source>
          <target state="translated">The &lt;code&gt;PrometheusMetrics.info(..)&lt;/code&gt; method provides a way to expose information as a &lt;code&gt;Gauge&lt;/code&gt; metric, the application version for example.</target>
        </trans-unit>
        <trans-unit id="b6decb59bef7a890ffa18ee42865d212510f19a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;group_by&lt;/code&gt; constructor argument controls what
the default request duration metric is tracked by: endpoint (function)
instead of URI path (the default). This parameter also accepts a function
to extract the value from the request, or a name of a property of the request object.
Examples:</source>
          <target state="translated">The &lt;code&gt;group_by&lt;/code&gt; constructor argument controls what the default request duration metric is tracked by: endpoint (function) instead of URI path (the default). This parameter also accepts a function to extract the value from the request, or a name of a property of the request object. Examples:</target>
        </trans-unit>
        <trans-unit id="a81b403ece8380c8eabe8266f87de7568c19b34e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;group_by_endpoint&lt;/code&gt; argument is deprecated since 0.4.0,
please use the new &lt;code&gt;group_by&lt;/code&gt; argument.</source>
          <target state="translated">The &lt;code&gt;group_by_endpoint&lt;/code&gt; argument is deprecated since 0.4.0, please use the new &lt;code&gt;group_by&lt;/code&gt; argument.</target>
        </trans-unit>
        <trans-unit id="8b8b7774d0f7d4813ecdaa71f9b17b09b31ab6dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;register_endpoint&lt;/code&gt; allows exposing the metrics endpoint on a specific path.
It also allows passing in a Flask application to register it on but defaults
to the main one if not defined.</source>
          <target state="translated">The &lt;code&gt;register_endpoint&lt;/code&gt; allows exposing the metrics endpoint on a specific path. It also allows passing in a Flask application to register it on but defaults to the main one if not defined.</target>
        </trans-unit>
        <trans-unit id="dcd0241d726dc8777b6b0f88712894d7be386641" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;static_labels&lt;/code&gt; argument is deprecated since 0.15.0,
please use the new &lt;code&gt;default_labels&lt;/code&gt; argument.</source>
          <target state="translated">The &lt;code&gt;static_labels&lt;/code&gt; argument is deprecated since 0.15.0, please use the new &lt;code&gt;default_labels&lt;/code&gt; argument.</target>
        </trans-unit>
        <trans-unit id="cd2e599f60feb5cdb82d7ba63e1013226cd7822b" translate="yes" xml:space="preserve">
          <source>The following metrics are exported by default
(unless the &lt;code&gt;export_defaults&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">The following metrics are exported by default (unless the &lt;code&gt;export_defaults&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9bbbeef8b2dd7ee300a209b60872e63b604087a7" translate="yes" xml:space="preserve">
          <source>The metric is returned from the method to allow changing its value
from the default &lt;code&gt;1&lt;/code&gt;:</source>
          <target state="translated">The metric is returned from the method to allow changing its value from the default &lt;code&gt;1&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1dc9878fea63abbd62f3852c05243e2f40de4fe4" translate="yes" xml:space="preserve">
          <source>The prefix for the default metrics can be controlled by the &lt;code&gt;defaults_prefix&lt;/code&gt; parameter.
If you don't want to use any prefix, pass the &lt;code&gt;prometheus_flask_exporter.NO_PREFIX&lt;/code&gt; value in.
The buckets on the default request latency histogram can be changed by the &lt;code&gt;buckets&lt;/code&gt; parameter, and if using a summary for them is more appropriate for your use case, then use the &lt;code&gt;default_latency_as_histogram=False&lt;/code&gt; parameter.</source>
          <target state="translated">The prefix for the default metrics can be controlled by the &lt;code&gt;defaults_prefix&lt;/code&gt; parameter. If you don't want to use any prefix, pass the &lt;code&gt;prometheus_flask_exporter.NO_PREFIX&lt;/code&gt; value in. The buckets on the default request latency histogram can be changed by the &lt;code&gt;buckets&lt;/code&gt; parameter, and if using a summary for them is more appropriate for your use case, then use the &lt;code&gt;default_latency_as_histogram=False&lt;/code&gt; parameter.</target>
        </trans-unit>
        <trans-unit id="a0384294bbb3c22ab98054bb5c1b61f9b2c29832" translate="yes" xml:space="preserve">
          <source>There's a caveat about this integration, where any endpoints that
do not return JSON responses need to be decorated with
&lt;code&gt;@metrics.content_type('...')&lt;/code&gt; as this integration would force them
to be &lt;code&gt;application/json&lt;/code&gt; otherwise.</source>
          <target state="translated">There's a caveat about this integration, where any endpoints that do not return JSON responses need to be decorated with &lt;code&gt;@metrics.content_type('...')&lt;/code&gt; as this integration would force them to be &lt;code&gt;application/json&lt;/code&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="2bf3e90702bf5370ec18d8f5091bc590a87d7810" translate="yes" xml:space="preserve">
          <source>There's a small wrapper available for &lt;a href=&quot;https://gunicorn.org/&quot;&gt;Gunicorn&lt;/a&gt; and
&lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/index.html&quot;&gt;uWSGI&lt;/a&gt;, for everything
else you can extend the &lt;code&gt;prometheus_flask_exporter.multiprocess.MultiprocessPrometheusMetrics&lt;/code&gt; class
and implement the &lt;code&gt;should_start_http_server&lt;/code&gt; method at least.</source>
          <target state="translated">There's a small wrapper available for &lt;a href=&quot;https://gunicorn.org/&quot;&gt;Gunicorn&lt;/a&gt; and &lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/index.html&quot;&gt;uWSGI&lt;/a&gt;, for everything else you can extend the &lt;code&gt;prometheus_flask_exporter.multiprocess.MultiprocessPrometheusMetrics&lt;/code&gt; class and implement the &lt;code&gt;should_start_http_server&lt;/code&gt; method at least.</target>
        </trans-unit>
        <trans-unit id="f6ec4e8c5a919cd2d06d38a16745c7497d32963f" translate="yes" xml:space="preserve">
          <source>This library also supports the Flask &lt;a href=&quot;http://flask.pocoo.org/docs/1.0/patterns/appfactories/&quot;&gt;app factory pattern&lt;/a&gt;. Use the &lt;code&gt;init_app&lt;/code&gt; method to attach the library to one or more application objects. Note, that to use this mode, you'll need to use the &lt;code&gt;for_app_factory()&lt;/code&gt; class method to create the &lt;code&gt;metrics&lt;/code&gt; instance, or pass in &lt;code&gt;None&lt;/code&gt; for the &lt;code&gt;app&lt;/code&gt; in the constructor.</source>
          <target state="translated">This library also supports the Flask &lt;a href=&quot;http://flask.pocoo.org/docs/1.0/patterns/appfactories/&quot;&gt;app factory pattern&lt;/a&gt;. Use the &lt;code&gt;init_app&lt;/code&gt; method to attach the library to one or more application objects. Note, that to use this mode, you'll need to use the &lt;code&gt;for_app_factory()&lt;/code&gt; class method to create the &lt;code&gt;metrics&lt;/code&gt; instance, or pass in &lt;code&gt;None&lt;/code&gt; for the &lt;code&gt;app&lt;/code&gt; in the constructor.</target>
        </trans-unit>
        <trans-unit id="11f4b8649ce881bb859a687f3a390d33524d1d5e" translate="yes" xml:space="preserve">
          <source>This library provides HTTP request metrics to export into
&lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;.
It can also track method invocations using convenient functions.</source>
          <target state="translated">This library provides HTTP request metrics to export into &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;. It can also track method invocations using convenient functions.</target>
        </trans-unit>
        <trans-unit id="2487e5ec04ece4da3df60545585f2e0ebb9ef257" translate="yes" xml:space="preserve">
          <source>This should return &lt;code&gt;True&lt;/code&gt; on one process only, and the underlying
&lt;a href=&quot;https://github.com/prometheus/client_python&quot;&gt;Prometheus client library&lt;/a&gt;
will collect the metrics for all the forked children or siblings.</source>
          <target state="translated">This should return &lt;code&gt;True&lt;/code&gt; on one process only, and the underlying &lt;a href=&quot;https://github.com/prometheus/client_python&quot;&gt;Prometheus client library&lt;/a&gt; will collect the metrics for all the forked children or siblings.</target>
        </trans-unit>
        <trans-unit id="5d77771b85d7237115c265d686e2523ee84f9b66" translate="yes" xml:space="preserve">
          <source>To register your own &lt;em&gt;default&lt;/em&gt; metrics that will track all registered
Flask view functions, use the &lt;code&gt;register_default&lt;/code&gt; function.</source>
          <target state="translated">To register your own &lt;em&gt;default&lt;/em&gt; metrics that will track all registered Flask view functions, use the &lt;code&gt;register_default&lt;/code&gt; function.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="46a599e0d1a0ca93f48789a181c11f4e26c1373d" translate="yes" xml:space="preserve">
          <source>WSGI</source>
          <target state="translated">WSGI</target>
        </trans-unit>
        <trans-unit id="1b0beb561938daee9fcfa797ad73e054a75019db" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/&quot;&gt;uWSGI&lt;/a&gt; is configured
to run with &lt;a href=&quot;%5Blazy-apps%5D(https://uwsgi-docs.readthedocs.io/en/latest/articles/TheArtOfGracefulReloading.html#preforking-vs-lazy-apps-vs-lazy)&quot;&gt;lazy-apps&lt;/a&gt;,
exposing the metrics endpoint on a separate HTTP server (and port) is not functioning yet.
A workaround is to register the endpoint on the main Flask application.</source>
          <target state="translated">When &lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/&quot;&gt;uWSGI&lt;/a&gt; is configured to run with &lt;a href=&quot;%5Blazy-apps%5D(https://uwsgi-docs.readthedocs.io/en/latest/articles/TheArtOfGracefulReloading.html#preforking-vs-lazy-apps-vs-lazy)&quot;&gt;lazy-apps&lt;/a&gt;, exposing the metrics endpoint on a separate HTTP server (and port) is not functioning yet. A workaround is to register the endpoint on the main Flask application.</target>
        </trans-unit>
        <trans-unit id="aacd20f239574d31b361d79c356982a5b42b6503" translate="yes" xml:space="preserve">
          <source>When defining labels for metrics on functions,
the following values are supported in the dictionary:</source>
          <target state="translated">When defining labels for metrics on functions, the following values are supported in the dictionary:</target>
        </trans-unit>
        <trans-unit id="9b53dc731bc020e148b323b6bc298b7f033c0c58" translate="yes" xml:space="preserve">
          <source>You can also set default labels to add to every request managed by
a &lt;code&gt;PrometheusMetrics&lt;/code&gt; instance, using the &lt;code&gt;default_labels&lt;/code&gt; argument.
This needs to be a dictionary, where each key will become a metric
label name, and the values the label values.
These can be constant values, or dynamic functions, see below in the
&lt;a href=&quot;#Labels&quot;&gt;Labels&lt;/a&gt; section.</source>
          <target state="translated">You can also set default labels to add to every request managed by a &lt;code&gt;PrometheusMetrics&lt;/code&gt; instance, using the &lt;code&gt;default_labels&lt;/code&gt; argument. This needs to be a dictionary, where each key will become a metric label name, and the values the label values. These can be constant values, or dynamic functions, see below in the &lt;a href=&quot;#Labels&quot;&gt;Labels&lt;/a&gt; section.</target>
        </trans-unit>
        <trans-unit id="4c4db6b747ee988095ac031a99758550277216b5" translate="yes" xml:space="preserve">
          <source>You can avoid recording metrics on individual endpoints
by decorating them with &lt;code&gt;@metrics.do_not_track()&lt;/code&gt;, or use the
&lt;code&gt;excluded_paths&lt;/code&gt; argument when creating the &lt;code&gt;PrometheusMetrics&lt;/code&gt; instance
that takes a regular expression (either a single string, or a list) and
matching paths will be excluded. If you have functions that are inherited
or otherwise get metrics collected that you don't want, you can use
&lt;code&gt;@metrics.exclude_all_metrics()&lt;/code&gt; to exclude both default and non-default
metrics being collected from it.</source>
          <target state="translated">You can avoid recording metrics on individual endpoints by decorating them with &lt;code&gt;@metrics.do_not_track()&lt;/code&gt; , or use the &lt;code&gt;excluded_paths&lt;/code&gt; argument when creating the &lt;code&gt;PrometheusMetrics&lt;/code&gt; instance that takes a regular expression (either a single string, or a list) and matching paths will be excluded. If you have functions that are inherited or otherwise get metrics collected that you don't want, you can use &lt;code&gt;@metrics.exclude_all_metrics()&lt;/code&gt; to exclude both default and non-default metrics being collected from it.</target>
        </trans-unit>
        <trans-unit id="16b9c1ffd0855b190aa5c46ed17307bf5f9ee5ba" translate="yes" xml:space="preserve">
          <source>You'll also have to call the &lt;code&gt;metrics.start_http_server()&lt;/code&gt; function
explicitly somewhere, and the &lt;code&gt;should_start_http_server&lt;/code&gt; takes care of
only starting it once.
The &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/tree/master/examples&quot;&gt;examples&lt;/a&gt; folder
has some working examples on this.</source>
          <target state="translated">You'll also have to call the &lt;code&gt;metrics.start_http_server()&lt;/code&gt; function explicitly somewhere, and the &lt;code&gt;should_start_http_server&lt;/code&gt; takes care of only starting it once. The &lt;a href=&quot;https://github.com/rycus86/prometheus_flask_exporter/tree/master/examples&quot;&gt;examples&lt;/a&gt; folder has some working examples on this.</target>
        </trans-unit>
        <trans-unit id="a0c9adfd54ed3868f9d5bfef95c26063ba3214b9" translate="yes" xml:space="preserve">
          <source>uWSGI lazy-apps</source>
          <target state="translated">uWSGI lazy-apps</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
