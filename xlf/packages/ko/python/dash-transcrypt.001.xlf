<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/dash-transcrypt/">
    <body>
      <group id="dash-transcrypt">
        <trans-unit id="31b15c84364e50d75c6c03c1a5a41cb4022fba93" translate="yes" xml:space="preserve">
          <source>Before the &lt;code&gt;add&lt;/code&gt; function can be used as a clientside callback, the &lt;code&gt;logic&lt;/code&gt; module must be passed through the &lt;code&gt;to_clientside_functions&lt;/code&gt; function. In addition to transpiling the module into JavaScript, it replaces the functional attributes of the module with appropriate &lt;code&gt;ClientsideFunction&lt;/code&gt; objects so that they can be used in clientside callbacks,</source>
          <target state="translated">Before the &lt;code&gt;add&lt;/code&gt; function can be used as a clientside callback, the &lt;code&gt;logic&lt;/code&gt; module must be passed through the &lt;code&gt;to_clientside_functions&lt;/code&gt; function. In addition to transpiling the module into JavaScript, it replaces the functional attributes of the module with appropriate &lt;code&gt;ClientsideFunction&lt;/code&gt; objects so that they can be used in clientside callbacks,</target>
        </trans-unit>
        <trans-unit id="e827dfff325c911d8b0660df3658706ae75c74c8" translate="yes" xml:space="preserve">
          <source>Clientside callbacks</source>
          <target state="translated">Clientside callbacks</target>
        </trans-unit>
        <trans-unit id="824bb99e75c50733169f69c45696072dc5081461" translate="yes" xml:space="preserve">
          <source>Dash transcrypt translates Python code into JavaScript using the &lt;a href=&quot;https://www.transcrypt.org/&quot;&gt;transcrypt&lt;/a&gt; library.</source>
          <target state="translated">Dash transcrypt translates Python code into JavaScript using the &lt;a href=&quot;https://www.transcrypt.org/&quot;&gt;transcrypt&lt;/a&gt; library.</target>
        </trans-unit>
        <trans-unit id="c03e7fec247792ccd038e4225ec64cc91a2c1b3e" translate="yes" xml:space="preserve">
          <source>For completeness, here is the full example app (tested with dash-leaflet==0.0.23),</source>
          <target state="translated">For completeness, here is the full example app (tested with dash-leaflet==0.0.23),</target>
        </trans-unit>
        <trans-unit id="f60f0b5afbd18b5e83a49146dd6c0a88a05ddd55" translate="yes" xml:space="preserve">
          <source>Functional properties</source>
          <target state="translated">Functional properties</target>
        </trans-unit>
        <trans-unit id="e46481cc356bc484946d70297504823fcd18c7fe" translate="yes" xml:space="preserve">
          <source>NB: Java must be install for this library to work (it's required in the transcypt minification process).</source>
          <target state="translated">NB: Java must be install for this library to work (it's required in the transcypt minification process).</target>
        </trans-unit>
        <trans-unit id="65fb8f53436697699c2ebda40dc61a1718572d34" translate="yes" xml:space="preserve">
          <source>One of the main use cases for transpiling is clientside callbacks (which are usually written in JavaScript). The functions to be transpiled must be placed in a separate module (file), say &lt;code&gt;logic.py&lt;/code&gt;. In this example, we will consider a simple &lt;code&gt;add&lt;/code&gt; function,</source>
          <target state="translated">One of the main use cases for transpiling is clientside callbacks (which are usually written in JavaScript). The functions to be transpiled must be placed in a separate module (file), say &lt;code&gt;logic.py&lt;/code&gt; . In this example, we will consider a simple &lt;code&gt;add&lt;/code&gt; function,</target>
        </trans-unit>
        <trans-unit id="2102cf77f85e67fb4b002672e74fcab69781c7b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;to_clientside_functions&lt;/code&gt; returns the path to a JavaScript index file, which must be made available by the app (that's what &lt;code&gt;inject_js&lt;/code&gt; does). For completeness, here is the full example app,</source>
          <target state="translated">The &lt;code&gt;to_clientside_functions&lt;/code&gt; returns the path to a JavaScript index file, which must be made available by the app (that's what &lt;code&gt;inject_js&lt;/code&gt; does). For completeness, here is the full example app,</target>
        </trans-unit>
        <trans-unit id="1be714a9caf41fdc9037dbc48de1a2471058ef42" translate="yes" xml:space="preserve">
          <source>The other main use case for the &lt;code&gt;transpile&lt;/code&gt; module is for passing function handles as Dash properties. Again, the functions to be transpiled must be placed in a separate module (file), say &lt;code&gt;styles.py&lt;/code&gt;,</source>
          <target state="translated">The other main use case for the &lt;code&gt;transpile&lt;/code&gt; module is for passing function handles as Dash properties. Again, the functions to be transpiled must be placed in a separate module (file), say &lt;code&gt;styles.py&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="677860bbc848527e75be15d2107642aa765f837b" translate="yes" xml:space="preserve">
          <source>The style function above was designed to match the signature of the &lt;code&gt;style&lt;/code&gt; option of the &lt;a href=&quot;https://leafletjs.com/reference-0.7.7.html#geojson-style&quot;&gt;Leaflet GeoJSON object&lt;/a&gt;. Before the functions can be used as properties, the module must be passed through the &lt;code&gt;to_js_functions&lt;/code&gt; function. In addition to transpiling the module into JavaScript, it replaces the functional attributes of the module with strings that are translated into functions in the JavaScript layer,</source>
          <target state="translated">The style function above was designed to match the signature of the &lt;code&gt;style&lt;/code&gt; option of the &lt;a href=&quot;https://leafletjs.com/reference-0.7.7.html#geojson-style&quot;&gt;Leaflet GeoJSON object&lt;/a&gt;. Before the functions can be used as properties, the module must be passed through the &lt;code&gt;to_js_functions&lt;/code&gt; function. In addition to transpiling the module into JavaScript, it replaces the functional attributes of the module with strings that are translated into functions in the JavaScript layer,</target>
        </trans-unit>
        <trans-unit id="4b87e3c64907d2d0412b736b05f8189d5c6214bb" translate="yes" xml:space="preserve">
          <source>Transcrypt bindings for Plotly Dash.</source>
          <target state="translated">Transcrypt bindings for Plotly Dash.</target>
        </trans-unit>
        <trans-unit id="42dabd35374dac12c99001c3208bfc421f0fdb95" translate="yes" xml:space="preserve">
          <source>dash-transcrypt</source>
          <target state="translated">dash-transcrypt</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
