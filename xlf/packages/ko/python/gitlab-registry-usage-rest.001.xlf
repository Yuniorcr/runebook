<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/gitlab-registry-usage-rest/">
    <body>
      <group id="gitlab-registry-usage-rest">
        <trans-unit id="9c0db57d0d956bdcc02b1fe7ef658e3fa36508aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/auth_token&lt;/code&gt;: Accepts a request with basic auth (and valid LDAP credentials) and returns an auth token for further
api usage. All other endpoints only accept requests with a valid &lt;code&gt;Bearer&lt;/code&gt; authorization header:</source>
          <target state="translated">&lt;code&gt;/auth_token&lt;/code&gt; : 기본 인증 (및 유효한 LDAP 자격 증명)이있는 요청을 수락하고 추가 API 사용을 위해 인증 토큰을 반환합니다. 다른 모든 엔드 포인트는 유효한 &lt;code&gt;Bearer&lt;/code&gt; 인증 헤더 가있는 요청 만 수락합니다 .</target>
        </trans-unit>
        <trans-unit id="f84630428651e3a993a75bff6674586b69aec97b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/repositories/&amp;lt;repository_name&amp;gt;/tags/&amp;lt;tag_name&amp;gt;&lt;/code&gt;: Lists attributes of a tagged image stored in a repository:</source>
          <target state="translated">&lt;code&gt;/repositories/&amp;lt;repository_name&amp;gt;/tags/&amp;lt;tag_name&amp;gt;&lt;/code&gt; : 저장소에 저장된 태그가 지정된 이미지의 속성을 나열합니다.</target>
        </trans-unit>
        <trans-unit id="a07d6bfb8f39aa72829dce2897ef859f28f7eb8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/repositories/&amp;lt;repository_name&amp;gt;/tags&lt;/code&gt;: Endpoint for the collection of repository tags, currently without any content.</source>
          <target state="translated">&lt;code&gt;/repositories/&amp;lt;repository_name&amp;gt;/tags&lt;/code&gt; : 현재 콘텐츠가없는 저장소 태그 모음의 끝점입니다.</target>
        </trans-unit>
        <trans-unit id="bb09cd105b4e442a6a2be3c387dcadec6db7957c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/repositories/&amp;lt;repository_name&amp;gt;&lt;/code&gt;: Queries attributes of a specific repository:</source>
          <target state="translated">&lt;code&gt;/repositories/&amp;lt;repository_name&amp;gt;&lt;/code&gt; : 특정 저장소의 속성을 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="67ab8ed484c159129bf42107191105286d599c0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/repositories&lt;/code&gt;: Lists attributes of the &lt;em&gt;repositories&lt;/em&gt; collection. Currently, only the timestamp of the last data
refresh is contained:</source>
          <target state="translated">&lt;code&gt;/repositories&lt;/code&gt; : &lt;em&gt;저장소&lt;/em&gt; 컬렉션의 특성을 나열합니다 . 현재는 마지막 데이터 새로 고침의 타임 스탬프 만 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="14426e199bff668bab87b13094b11566129058a5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;GitLab-Registry-Usage-REST&lt;/em&gt; is a package that periodically collects repository information (names, tags, sizes) of a
GitLab registry server and offers the data via a secured &lt;a href=&quot;http://stateless.co/hal_specification.html&quot;&gt;RESTful HAL&lt;/a&gt; api.
For the initial authentication a LDAP server is needed. Subsequent queries are secured by &lt;em&gt;JSON Web Tokens&lt;/em&gt; (JWT).</source>
          <target state="translated">&lt;em&gt;GitLab-Registry-Usage-REST&lt;/em&gt; 는 GitLab 레지스트리 서버의 저장소 정보 (이름, 태그, 크기)를 주기적으로 수집하고 보안 &lt;a href=&quot;http://stateless.co/hal_specification.html&quot;&gt;RESTful HAL&lt;/a&gt; API 를 통해 데이터를 제공하는 패키지입니다 . 초기 인증을 위해서는 LDAP 서버가 필요합니다. 후속 쿼리는 JWT ( &lt;em&gt;JSON Web Tokens)&lt;/em&gt; 로 보호됩니다 .</target>
        </trans-unit>
        <trans-unit id="adc9b09adc8e5b512b3b867d1f4e22814a56efa9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Gitlab-Registry-Usage-REST&lt;/em&gt; needs a configuration file in order to run. The default path is
&lt;code&gt;/etc/gitlab_registry_usage_rest.conf&lt;/code&gt; but can be altered with the &lt;code&gt;-c&lt;/code&gt; command line switch. To get started, you can run</source>
          <target state="translated">&lt;em&gt;Gitlab-Registry-Usage-REST&lt;/em&gt; 를 실행하려면 구성 파일이 필요합니다. 기본 경로는 &lt;code&gt;/etc/gitlab_registry_usage_rest.conf&lt;/code&gt; 이지만 &lt;code&gt;-c&lt;/code&gt; 명령 줄 스위치 로 변경할 수 있습니다 . 시작하려면 다음을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2099682d1e184a685bf975db793960d401826322" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Docker expects an absolute path for the local configuration file.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : Docker는 로컬 구성 파일의 절대 경로를 예상합니다.</target>
        </trans-unit>
        <trans-unit id="5ed9eb2ed2ebcd9b8e7b285af12682f4b3198a6e" translate="yes" xml:space="preserve">
          <source>A restful web service for querying the repository sizes of a GitLab registry.</source>
          <target state="translated">GitLab 레지스트리의 저장소 크기를 쿼리하기위한 편안한 웹 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="0a45d6431d7979337a760f88643febb729ca4c03" translate="yes" xml:space="preserve">
          <source>Additionally, all api endpoints (except &lt;code&gt;/auth_token&lt;/code&gt;) offer an &lt;code&gt;_embedded&lt;/code&gt; and a &lt;code&gt;_links&lt;/code&gt; attribute if requested with
the query string:</source>
          <target state="translated">또한 모든 api 엔드 포인트 ( &lt;code&gt;/auth_token&lt;/code&gt; 제외 )는 쿼리 문자열과 함께 요청 된 경우 &lt;code&gt;_embedded&lt;/code&gt; 및 &lt;code&gt;_links&lt;/code&gt; 속성을 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="f66ae0e5f7322d12846026d41ff12577c2dd15f7" translate="yes" xml:space="preserve">
          <source>GitLab-Registry-Usage-REST</source>
          <target state="translated">GitLab-Registry-Usage-REST</target>
        </trans-unit>
        <trans-unit id="6771d38f699b09eb64789c1469a6c36f9f805e30" translate="yes" xml:space="preserve">
          <source>If you would like to use the docker repository, you can bind mount a local configuration file with the &lt;code&gt;-v&lt;/code&gt; switch:</source>
          <target state="translated">docker 저장소를 사용하려면 &lt;code&gt;-v&lt;/code&gt; 스위치를 사용하여 로컬 구성 파일 마운트를 바인드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="41035b8e2632595f949e197a34390b37c55c82d2" translate="yes" xml:space="preserve">
          <source>Instead of a boolean value, the embed key can also take an integer number to only request a specific level of embedded
resources.</source>
          <target state="translated">부울 값 대신 포함 키는 특정 수준의 포함 된 리소스 만 요청하기 위해 정수 숫자를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">소개</target>
        </trans-unit>
        <trans-unit id="fe00fd376110c63afb9aeb7d980eba78e7f18e9a" translate="yes" xml:space="preserve">
          <source>Links can be used to easily navigate between related resources. Embedded resources are convenient to query a complete
hierarchy of resources with one GET request. Accordingly, the request</source>
          <target state="translated">링크를 사용하여 관련 리소스를 쉽게 탐색 할 수 있습니다. 임베디드 리소스는 하나의 GET 요청으로 리소스의 전체 계층 구조를 쿼리하는 데 편리합니다. 따라서 요청</target>
        </trans-unit>
        <trans-unit id="5ca8f7a7d3fa6cae51685ac17ab66f887b887dd7" translate="yes" xml:space="preserve">
          <source>The latest version can be obtained from PyPI:</source>
          <target state="translated">최신 버전은 PyPI에서 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d46367a2d94b9adf64babffe324d49e6cab050d3" translate="yes" xml:space="preserve">
          <source>The server offers these api endpoints:</source>
          <target state="translated">서버는 다음과 같은 api 엔드 포인트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="7d90f9b9a0f1c10c3bbca6b3cc885c3e188ecf93" translate="yes" xml:space="preserve">
          <source>and edit this default configuration to fit your environment.</source>
          <target state="translated">환경에 맞게이 기본 구성을 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="8237c923f610d40198be9873d3434403cf2a4d03" translate="yes" xml:space="preserve">
          <source>or from DockerHub:</source>
          <target state="translated">또는 DockerHub에서 :</target>
        </trans-unit>
        <trans-unit id="8722ff23e0b82cf56fb2253b1f3736f5ed035f9d" translate="yes" xml:space="preserve">
          <source>or from the AUR for Arch Linux based systems:</source>
          <target state="translated">또는 Arch Linux 기반 시스템 용 AUR에서 :</target>
        </trans-unit>
        <trans-unit id="fb809b777f30537de6e41bb9c98dce03706ff1d4" translate="yes" xml:space="preserve">
          <source>returns all resources at once.</source>
          <target state="translated">한 번에 모든 리소스를 반환합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
