<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/icemu/">
    <body>
      <group id="icemu">
        <trans-unit id="bb789c908e8ff52c228126328afe2f8d12904c3a" translate="yes" xml:space="preserve">
          <source># ICemu - Emulate Integrated Circuits</source>
          <target state="translated"># ICemu-집적 회로 에뮬레이트</target>
        </trans-unit>
        <trans-unit id="90b886b604980f63d11651624ad73a206fe9d679" translate="yes" xml:space="preserve">
          <source>## Examples</source>
          <target state="translated">## 예</target>
        </trans-unit>
        <trans-unit id="128c685b6fabee0e34413514a9f785fd0b5aa3ee" translate="yes" xml:space="preserve">
          <source>## How to use</source>
          <target state="translated">## 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="cebb97c7e4befadc0157a40740b2eae737a6d591" translate="yes" xml:space="preserve">
          <source>## License</source>
          <target state="translated">## 라이선스</target>
        </trans-unit>
        <trans-unit id="824f839e8b54010f0280b27586f05dfc947491c5" translate="yes" xml:space="preserve">
          <source>## See it in action</source>
          <target state="translated">## 실제보기</target>
        </trans-unit>
        <trans-unit id="241d0e923d39efe6c2ebab10b75fdf6fb5b7b266" translate="yes" xml:space="preserve">
          <source>## What is it for</source>
          <target state="translated">## 용도</target>
        </trans-unit>
        <trans-unit id="ce0e4f4da4729931c5a14c12a6a696c03e244815" translate="yes" xml:space="preserve">
          <source>## Why Python</source>
          <target state="translated">## 왜 파이썬인가</target>
        </trans-unit>
        <trans-unit id="dd8261b2b40d345fa5408477f13d1432b253856f" translate="yes" xml:space="preserve">
          <source>### Comparison with Verilog/VHDL</source>
          <target state="translated">### Verilog / VHDL과의 비교</target>
        </trans-unit>
        <trans-unit id="f86dd3a3421676f104330d6c9f26e9c2dbbfbbe1" translate="yes" xml:space="preserve">
          <source>### Killer feature: direct integration with your code</source>
          <target state="translated">### Killer 기능 : 코드와 직접 통합</target>
        </trans-unit>
        <trans-unit id="90dd38b6f4951b16dcb2a8b274bd3895932ea798" translate="yes" xml:space="preserve">
          <source>$ pip install --user icemu</source>
          <target state="translated">$ pip install --user icemu</target>
        </trans-unit>
        <trans-unit id="e8eeda63d3f012dd72cd21e27acf01b754ce6dd7" translate="yes" xml:space="preserve">
          <source>**circuits**.</source>
          <target state="translated">** 회로 **.</target>
        </trans-unit>
        <trans-unit id="43288063da8afb5a2d74f8003d20c70a424cf25d" translate="yes" xml:space="preserve">
          <source>A&amp;gt;|-   +|&amp;gt;Y7</source>
          <target state="translated">A&amp;gt; |-+ |&amp;gt; Y7</target>
        </trans-unit>
        <trans-unit id="83476a2a56bb5773eb32ed23f06432d0a78951ca" translate="yes" xml:space="preserve">
          <source>B&amp;gt;|-   +|&amp;gt;Y6</source>
          <target state="translated">B&amp;gt; |-+ |&amp;gt; Y6</target>
        </trans-unit>
        <trans-unit id="3151702e2225dec1d9254ecf55a90b16627bc241" translate="yes" xml:space="preserve">
          <source>Because it's used for debugging purposes, speed is not essential. Also, Python is easy to glue</source>
          <target state="translated">디버깅 목적으로 사용되기 때문에 속도는 필수가 아닙니다. 또한 Python은 접착하기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="b0ea7f0254b8fbde3353b37e36fa5765c14898ac" translate="yes" xml:space="preserve">
          <source>Being new to the world of electronics, I don't know much about full blown simulation solutions.</source>
          <target state="translated">전자 분야에 익숙하지 않은 저는 완전한 시뮬레이션 솔루션에 대해 잘 모릅니다.</target>
        </trans-unit>
        <trans-unit id="b512968b8f318e11cf4aa9dd1062d23d7c78a798" translate="yes" xml:space="preserve">
          <source>C&amp;gt;|-   +|&amp;gt;Y5</source>
          <target state="translated">C&amp;gt; |-+ |&amp;gt; Y5</target>
        </trans-unit>
        <trans-unit id="9ade95a965611f9e966281047c891540ddd699f2" translate="yes" xml:space="preserve">
          <source>Emulate Integrated Circuits</source>
          <target state="translated">집적 회로 에뮬레이트</target>
        </trans-unit>
        <trans-unit id="c76107dec6bee3eeaa928fdec05efde892860ba5" translate="yes" xml:space="preserve">
          <source>G1&amp;gt;|+   +|&amp;gt;Y2</source>
          <target state="translated">G1&amp;gt; | + + |&amp;gt; Y2</target>
        </trans-unit>
        <trans-unit id="af932a6c4bff97f05d6701ef1a530b85ce386aad" translate="yes" xml:space="preserve">
          <source>G2A&amp;gt;|-   +|&amp;gt;Y4</source>
          <target state="translated">G2A&amp;gt; |-+ |&amp;gt; Y4</target>
        </trans-unit>
        <trans-unit id="6619a6e04319fa2c451347e228ac117724a616a5" translate="yes" xml:space="preserve">
          <source>G2B&amp;gt;|-   +|&amp;gt;Y3</source>
          <target state="translated">G2B&amp;gt; |-+ |&amp;gt; Y3</target>
        </trans-unit>
        <trans-unit id="7724833263533c4681ae6a71d41096a4f66030c8" translate="yes" xml:space="preserve">
          <source>Here's a little video of the simulated `seg7` example (see `examples` folder):</source>
          <target state="translated">다음은 시뮬레이션 된`seg7` 예제의 작은 비디오입니다 (ʻexamples` 폴더 참조).</target>
        </trans-unit>
        <trans-unit id="f220d1a34eb392df3e5bb6c4797107251a24ecdf" translate="yes" xml:space="preserve">
          <source>However, from what I read about Verilog and VHDL, these tools seem to be about helping to design</source>
          <target state="translated">그러나 Verilog 및 VHDL에 대해 읽은 내용에서 이러한 도구는</target>
        </trans-unit>
        <trans-unit id="7970df9882a1a4c5cca382d5baec335bf21822f2" translate="yes" xml:space="preserve">
          <source>I've tried writing quick `icemu` prototype in C and Rust, but they were needlessly complicated.</source>
          <target state="translated">C와 Rust로 빠른 'icemu'프로토 타입을 작성해 보았지만 불필요하게 복잡했습니다.</target>
        </trans-unit>
        <trans-unit id="48842d5547c45b6a86c28cbe767317bd25e86ee3" translate="yes" xml:space="preserve">
          <source>ICemu's goal is not that! Its goal is to help you debug the software you're going to flash on your</source>
          <target state="translated">ICemu의 목표는 그게 아닙니다! 그 목표는 플래시 할 소프트웨어를 디버깅하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4942794f29d87170445e0d2a224fdd3c72e82ce2" translate="yes" xml:space="preserve">
          <source>If you have a circuit with a microcontroller in it, you can simulate the circuit by **directly</source>
          <target state="translated">마이크로 컨트롤러가있는 회로가있는 경우 ** 직접적으로 회로를 시뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58ff3deb4eadef5cc3f966788b8a6391e7b86f75" translate="yes" xml:space="preserve">
          <source>LGPLv3, Copyright 2017 Virgil Dupras</source>
          <target state="translated">LGPLv3, 저작권 2017 Virgil Dupras</target>
        </trans-unit>
        <trans-unit id="f726b2901eab99b551e70dacee4cd315aa8a6280" translate="yes" xml:space="preserve">
          <source>MCU. Python being easily hooked to C, you can, with a little abstraction layer, directly run your</source>
          <target state="translated">MCU. Python은 C에 쉽게 연결되므로 약간의 추상화 계층을 사용하여 직접 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bd07b6614b87c12016c6c0aabadddf237dd6f02" translate="yes" xml:space="preserve">
          <source>Python program like a regular C application would do, make your `ifdef`ed functions call helper</source>
          <target state="translated">일반 C 응용 프로그램과 같은 Python 프로그램은 'ifdef'ed 함수가 도우미를 호출하도록합니다.</target>
        </trans-unit>
        <trans-unit id="979162c824032d25eb4b63213d993c981cb7e8ab" translate="yes" xml:space="preserve">
          <source>The goal of this library is to facilitate the testing and debugging of embedded software. When we</source>
          <target state="translated">이 라이브러리의 목표는 임베디드 소프트웨어의 테스트 및 디버깅을 용이하게하는 것입니다. 언제 우리가</target>
        </trans-unit>
        <trans-unit id="d1337d1952a4fb646c4d89744334af8f94918846" translate="yes" xml:space="preserve">
          <source>Then, write yourself a small Hardware Abstraction Layer at the pin/register level, embed your</source>
          <target state="translated">그런 다음 핀 / 레지스터 수준에서 작은 하드웨어 추상화 계층을 작성하고</target>
        </trans-unit>
        <trans-unit id="73f56c18152316717d055aebb1247577a63a76ff" translate="yes" xml:space="preserve">
          <source>Then, you need to recreate your prototype's logic in a small Python program that uses `icemu` and</source>
          <target state="translated">그런 다음 ʻicemu`를 사용하는 작은 Python 프로그램에서 프로토 타입의 로직을 다시 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="bc6e92fe41673ce34f4da179fc9ae736cb08b552" translate="yes" xml:space="preserve">
          <source>There are examples in the `examples` folder. Follow instructions in the README file of each example.</source>
          <target state="translated">ʻexamples` 폴더에 예제가 있습니다. 각 예제의 README 파일에있는 지침을 따르십시오.</target>
        </trans-unit>
        <trans-unit id="27a57c68d539d549760c4e708622ea8704b63074" translate="yes" xml:space="preserve">
          <source>There's a possibility that my newbie-ness made me create a tool that already exists, however, and</source>
          <target state="translated">그러나 내 초보자가 이미 존재하는 도구를 만들게 만들 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef5242bf0339b05e02298a03798b2e49224be031" translate="yes" xml:space="preserve">
          <source>What I've read about simulations on Verilog/VHDL simulators is that you supply it with a series of</source>
          <target state="translated">Verilog / VHDL 시뮬레이터의 시뮬레이션에 대해 읽은 것은 일련의</target>
        </trans-unit>
        <trans-unit id="ee58a4357763351644da9dbc2d1ef5b63a628455" translate="yes" xml:space="preserve">
          <source>With Python, it's easy to write the software and add new chips. Because there's gonna be a *lot*</source>
          <target state="translated">Python을 사용하면 소프트웨어를 작성하고 새로운 칩을 쉽게 추가 할 수 있습니다. * 많이 *있을테니까</target>
        </trans-unit>
        <trans-unit id="9558eea48bb35057a0e6286b6d030b59213a7cfd" translate="yes" xml:space="preserve">
          <source>With emulation, we have a quick setup time, introspection capabilities, all this stuff. We can then</source>
          <target state="translated">에뮬레이션을 사용하면 빠른 설정 시간, 인트로 스펙 션 기능,이 모든 것이 있습니다. 그러면 우리는</target>
        </trans-unit>
        <trans-unit id="42f3b09a580b6c5ad2c72b012125dc24ad388acb" translate="yes" xml:space="preserve">
          <source>Y0&amp;lt;|-___+|&amp;gt;Y1</source>
          <target state="translated">Y0 &amp;lt;| -___ + |&amp;gt; Y1</target>
        </trans-unit>
        <trans-unit id="24ecb8020648c677e6e2ceb557b8f68c15ab3075" translate="yes" xml:space="preserve">
          <source>You can install `icemu` with pip on python **3.4+**:</source>
          <target state="translated">python ** 3.4 + **에 pip를 사용하여 ʻicemu`를 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c11d5d43ea26c37588b9405d914d2297964ebe98" translate="yes" xml:space="preserve">
          <source>You could then play with pins at your heart contents and have them &quot;propagate&quot; through wires and IC</source>
          <target state="translated">그런 다음 심장의 내용물에 핀을 사용하여 와이어와 IC를 통해 &quot;전파&quot;되도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1da9f1b446d0a659fd1f27cce6342e43c0a1527d" translate="yes" xml:space="preserve">
          <source>[![asciinema](https://asciinema.org/a/LCF3EGRiJFK1LzXwn2R6XUgGb.png)](https://asciinema.org/a/LCF3EGRiJFK1LzXwn2R6XUgGb)</source>
          <target state="translated">[! [asciinema] (https://asciinema.org/a/LCF3EGRiJFK1LzXwn2R6XUgGb.png)] (https://asciinema.org/a/LCF3EGRiJFK1LzXwn2R6XUgGb)</target>
        </trans-unit>
        <trans-unit id="805297365334d118b69f25694b7dfccb35d40773" translate="yes" xml:space="preserve">
          <source>[![vimeo](https://i.vimeocdn.com/video/662736875_677x.jpg)](https://vimeo.com/239693641)</source>
          <target state="translated">[! [vimeo] (https://i.vimeocdn.com/video/662736875_677x.jpg)] (https://vimeo.com/239693641)</target>
        </trans-unit>
        <trans-unit id="cf19ffdf271b7fa135880d0e9264198edc348cb3" translate="yes" xml:space="preserve">
          <source>_______</source>
          <target state="translated">_______</target>
        </trans-unit>
        <trans-unit id="1352f73f402d32fa6ae8eb14352fe0249cdd73e1" translate="yes" xml:space="preserve">
          <source>`icemu` is a Python library that emulates integrated circuits at the logic level. For example,</source>
          <target state="translated">ʻicemu`는 로직 레벨에서 집적 회로를 에뮬레이트하는 Python 라이브러리입니다. 예를 들면</target>
        </trans-unit>
        <trans-unit id="f65f84346735c20601b3277417c5a91ccc9e598b" translate="yes" xml:space="preserve">
          <source>and here is the video of the **exact same code** running in real life!</source>
          <target state="translated">그리고 여기 실생활에서 실행되는 ** 정확히 동일한 코드 **의 비디오가 있습니다!</target>
        </trans-unit>
        <trans-unit id="ec9ab86d549f4023c80cce36ddf059c431110abe" translate="yes" xml:space="preserve">
          <source>change from the MCU and apply the logic change into your circuit. Make that program print relevant</source>
          <target state="translated">MCU에서 변경하고 로직 변경을 회로에 적용하십시오. 해당 프로그램을 관련성있게 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="08f9d7936f9eb4f7e10c88e3a694e58d83e4fbbd" translate="yes" xml:space="preserve">
          <source>code on the simulator and debug it there.</source>
          <target state="translated">시뮬레이터에서 코드를 작성하고 거기에서 디버그하십시오.</target>
        </trans-unit>
        <trans-unit id="ae6e5911c9382480ab6eae5eeaa2c6160880561a" translate="yes" xml:space="preserve">
          <source>complex software and have **it** supply the inputs and react to the outputs of my simulated circuit.</source>
          <target state="translated">복잡한 소프트웨어를 사용하고 ** it **이 입력을 공급하고 시뮬레이션 된 회로의 출력에 반응하도록합니다.</target>
        </trans-unit>
        <trans-unit id="1a42826c76de56963340d27658c589d3201f8c74" translate="yes" xml:space="preserve">
          <source>confirm the soundness of our logic before sending it to our prototype.</source>
          <target state="translated">프로토 타입으로 보내기 전에 로직의 건전성을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="10e47431fa95f12d62b3a7c14da811eecb612962" translate="yes" xml:space="preserve">
          <source>dec = SN74HC138()</source>
          <target state="translated">12 월 = SN74HC138 ()</target>
        </trans-unit>
        <trans-unit id="ead694f7dcdf2b9ca0be527622878eb146b5417c" translate="yes" xml:space="preserve">
          <source>functions you've written in your Python program, compile and run!</source>
          <target state="translated">파이썬 프로그램에서 작성한 함수를 컴파일하고 실행하십시오!</target>
        </trans-unit>
        <trans-unit id="13863f8147dc91d1f0e1b4d51097290ce1c84bd5" translate="yes" xml:space="preserve">
          <source>if that happened, please tell me so I can stop working on useless tools.</source>
          <target state="translated">그럴 경우 쓸모없는 도구 작업을 중단 할 수 있도록 알려주세요.</target>
        </trans-unit>
        <trans-unit id="54ee306db375e864117f8d046822ae2eb3b32478" translate="yes" xml:space="preserve">
          <source>if you want to simulate a circuit with a decoder driving the clock pin of two shift registers,</source>
          <target state="translated">두 개의 시프트 레지스터의 클록 핀을 구동하는 디코더로 회로를 시뮬레이션하려면</target>
        </trans-unit>
        <trans-unit id="c6ccf06290869329eb979508003d83e536e80c99" translate="yes" xml:space="preserve">
          <source>information so that you can assert your logic's soundness.</source>
          <target state="translated">논리의 건전성을 주장 할 수 있도록 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ae07ab1d60c0694ec0b5c635602b7db37961ed5f" translate="yes" xml:space="preserve">
          <source>inputs you want to send to your circuits. That's insufficient! What I want to do is run my whole,</source>
          <target state="translated">회로로 보내려는 입력. 충분하지 않습니다! 내가 원하는 것은 내 전체를 운영하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="eed3983318e462d182119564a356bb2ff60b4727" translate="yes" xml:space="preserve">
          <source>it would look like this:</source>
          <target state="translated">다음과 같이 보일 것입니다.</target>
        </trans-unit>
        <trans-unit id="d8869e43dff57f2bcfa743db840d0f841dc4ae5f" translate="yes" xml:space="preserve">
          <source>know if the problem comes from hardware (wiring, it's always the wiring!) or software. Moreover,</source>
          <target state="translated">하드웨어 (배선, 항상 배선!) 또는 소프트웨어에서 문제가 발생하는지 확인합니다. 게다가,</target>
        </trans-unit>
        <trans-unit id="0843b7fa13d4073d99a00f58de32f6a5b96d6f57" translate="yes" xml:space="preserve">
          <source>logic automatically.</source>
          <target state="translated">자동으로 논리.</target>
        </trans-unit>
        <trans-unit id="a18daafbe02186d251e14b3d76b2cdf46daea707" translate="yes" xml:space="preserve">
          <source>mcu_pin = OutputPin('PB4')</source>
          <target state="translated">mcu_pin = OutputPin ( 'PB4')</target>
        </trans-unit>
        <trans-unit id="fbde53ae38b757f4dbe0fc4647f4e4c179f89d56" translate="yes" xml:space="preserve">
          <source>of these chips to add, we might as well make this process as fast as possible.</source>
          <target state="translated">추가 할이 칩 중 가능한 한 빨리이 프로세스를 만드는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="155df2e253e9c17a5f7aa5e8456b1618d54f4c69" translate="yes" xml:space="preserve">
          <source>plugging the code you're putting on the MCU** in it. See examples.</source>
          <target state="translated">MCU **에 입력하는 코드를 삽입합니다. 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="beac14524ddad9f47301f2011dc3fb3b3f0d710d" translate="yes" xml:space="preserve">
          <source>print(dec.asciiart())</source>
          <target state="translated">print (dec.asciiart ())</target>
        </trans-unit>
        <trans-unit id="d07dfc01616838daed82fc00164ad78e75007589" translate="yes" xml:space="preserve">
          <source>run software on an embedded prototype, it's often hard to debug failures because we don't even</source>
          <target state="translated">임베디드 프로토 타입에서 소프트웨어를 실행하면 오류를 디버깅하기가 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="f55ed684d782fe1620b7a444103e411db9aa3c37" translate="yes" xml:space="preserve">
          <source>sr1 = CD74AC164()</source>
          <target state="translated">sr1 = CD74AC164 ()</target>
        </trans-unit>
        <trans-unit id="a3b7db60542ae4c74debf539f6721f4eca9536e7" translate="yes" xml:space="preserve">
          <source>sr1.pin_CP.wire_to(dec.pin_Y0)</source>
          <target state="translated">sr1.pin_CP.wire_to (dec.pin_Y0)</target>
        </trans-unit>
        <trans-unit id="c4f5f48a5b29edb04ba9fd2c89192637bcf9c611" translate="yes" xml:space="preserve">
          <source>sr1.pin_DS1.wire_to(mcu_pin)</source>
          <target state="translated">sr1.pin_DS1.wire_to (mcu_pin)</target>
        </trans-unit>
        <trans-unit id="e92154b0972682081cd31eb8d19c6670237293de" translate="yes" xml:space="preserve">
          <source>sr2 = CD74AC164()</source>
          <target state="translated">sr2 = CD74AC164 ()</target>
        </trans-unit>
        <trans-unit id="2d4a5fb0b39cfd9dcc3624f01c0f95b2e86688bd" translate="yes" xml:space="preserve">
          <source>sr2.pin_CP.wire_to(dec.pin_Y1)</source>
          <target state="translated">sr2.pin_CP.wire_to (dec.pin_Y1)</target>
        </trans-unit>
        <trans-unit id="43b49d3757a4d8fb35bd760af2956f33a0fc02f2" translate="yes" xml:space="preserve">
          <source>sr2.pin_DS1.wire_to(mcu_pin)</source>
          <target state="translated">sr2.pin_DS1.wire_to (mcu_pin)</target>
        </trans-unit>
        <trans-unit id="6d38d0ecf35cb00da071afc1920b6cc1be442e83" translate="yes" xml:space="preserve">
          <source>testing directly on a prototype often involves significant setup time.</source>
          <target state="translated">프로토 타입에서 직접 테스트하려면 종종 상당한 설정 시간이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="552ef0339b649adc3038afca455f6f2eb8fb8b47" translate="yes" xml:space="preserve">
          <source>with C.</source>
          <target state="translated">C.</target>
        </trans-unit>
        <trans-unit id="2bbb7f3bba28d0067d870f008fe91adc4368384a" translate="yes" xml:space="preserve">
          <source>wrap that into easy to use functions. Those functions should be designed to receive pin state</source>
          <target state="translated">사용하기 쉬운 기능으로 포장하십시오. 이러한 기능은 핀 상태를 수신하도록 설계되어야합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
