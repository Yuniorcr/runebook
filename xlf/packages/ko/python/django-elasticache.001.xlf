<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/django-elasticache/">
    <body>
      <group id="django-elasticache">
        <trans-unit id="8278d2adba7612cf98a492d21a4ac4c78acb1202" translate="yes" xml:space="preserve">
          <source>, and</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="e2bc2a15ce8dae5e5969eee6d10ba152147f9f02" translate="yes" xml:space="preserve">
          <source>. When set to</source>
          <target state="translated">. 설정시</target>
        </trans-unit>
        <trans-unit id="1b954e259d9778652df4bfdda7fd01994b4e0d7e" translate="yes" xml:space="preserve">
          <source>1. Memcached configured with location = Configuration Endpoint</source>
          <target state="translated">1. 위치 = 구성 엔드 포인트로 구성된 Memcached</target>
        </trans-unit>
        <trans-unit id="95c4d4c63d90a3652d39048059c7ebb378cd0da5" translate="yes" xml:space="preserve">
          <source>2. Memcached configured with all nodes</source>
          <target state="translated">2. 모든 노드로 구성된 Memcached</target>
        </trans-unit>
        <trans-unit id="6ce167003d7bcb23a9e9502ba565e65ed6026279" translate="yes" xml:space="preserve">
          <source>3. Use django-elasticache</source>
          <target state="translated">3. django-elasticache 사용</target>
        </trans-unit>
        <trans-unit id="01e743d1b711e4b8118553cc539fbd031722014c" translate="yes" xml:space="preserve">
          <source>Another solutions</source>
          <target state="translated">다른 솔루션</target>
        </trans-unit>
        <trans-unit id="591ab42e357bf25adf4fe44eea1f8dcaeb6bdf99" translate="yes" xml:space="preserve">
          <source>By the first call to cache it connects to cluster (using</source>
          <target state="translated">캐시에 대한 첫 번째 호출로 클러스터에 연결합니다 (사용</target>
        </trans-unit>
        <trans-unit id="f6774cf92d1ff654549a8873c1dab250e9d33208" translate="yes" xml:space="preserve">
          <source>Difference between setup with nodes list (django-elasticache) and
connection to only one configuration Endpoint (using dns routing) you can see on
this graph:</source>
          <target state="translated">이 그래프에서 볼 수있는 노드 목록 (django-elasticache)을 사용한 설정과 하나의 구성 끝점에 대한 연결 (DNS 라우팅 사용)의 차이점은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4ba8b7a054fd0a477ce11807754bf638dbd8875c" translate="yes" xml:space="preserve">
          <source>Django 1.5+.</source>
          <target state="translated">Django 1.5 이상.</target>
        </trans-unit>
        <trans-unit id="96d0c7c9954c664505b3f313afa9536f20c485f6" translate="yes" xml:space="preserve">
          <source>Django cache backend for Amazon ElastiCache (memcached)</source>
          <target state="translated">Amazon ElastiCache (memcached) 용 Django 캐시 백엔드</target>
        </trans-unit>
        <trans-unit id="c0f5ce01034acc77e1f3c7080b2120b344d72c5d" translate="yes" xml:space="preserve">
          <source>Django-elasticache changes default pylibmc params to increase performance.</source>
          <target state="translated">Django-elasticache는 성능을 높이기 위해 기본 pylibmc 매개 변수를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="ef5d1b9f5ee502ffbf45d1e356093bd2bb470c2d" translate="yes" xml:space="preserve">
          <source>ElastiCache provides memcached interface so there are three solution of using it:</source>
          <target state="translated">ElastiCache는 memcached 인터페이스를 제공하므로이를 사용하는 세 가지 솔루션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf7a0f0eb10723db2bd2e06594f233a150cf376b" translate="yes" xml:space="preserve">
          <source>Get it from &lt;a href=&quot;http://pypi.python.org/pypi/django-elasticache&quot;&gt;pypi&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://pypi.python.org/pypi/django-elasticache&quot;&gt;pypi&lt;/a&gt; 에서 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="cf2eabc3e15e04556cf331bdf1da268312a370a5" translate="yes" xml:space="preserve">
          <source>IGNORE_CLUSTER_ERRORS</source>
          <target state="translated">IGNORE_CLUSTER_ERRORS</target>
        </trans-unit>
        <trans-unit id="d07ff1939b5a825de60f525b17298f83d1af8026" translate="yes" xml:space="preserve">
          <source>In this case your application
will randomly connect to nodes in cluster and cache will be used with not optimal
way. At some moment you will be connected to first node and set item. Minute later
you will be connected to another node and will not able to get this item.</source>
          <target state="translated">이 경우 응용 프로그램이 클러스터의 노드에 무작위로 연결되고 캐시가 최적이 아닌 방식으로 사용됩니다. 언젠가 당신은 첫 번째 노드와 설정 항목에 연결됩니다. 몇 분 후에 다른 노드에 연결되어이 항목을 얻을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="d97a56b58699a167763def3745442dbea8b7d317" translate="yes" xml:space="preserve">
          <source>It was written and tested on Python 2.7 and 3.4.</source>
          <target state="translated">Python 2.7 및 3.4에서 작성 및 테스트되었습니다.</target>
        </trans-unit>
        <trans-unit id="56a2e96ce679c7def9a8b2ddc1689061789ef197" translate="yes" xml:space="preserve">
          <source>It will connect to cluster and retrieve ip addresses
of all nodes and configure memcached to use all nodes.</source>
          <target state="translated">클러스터에 연결하고 모든 노드의 IP 주소를 검색하고 모든 노드를 사용하도록 memcached를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="4cbb610d07abd4de00a916dea1c26c7f96b96395" translate="yes" xml:space="preserve">
          <source>It will work fine, memcache client will
separate items between all nodes and will balance loading on client side. You will
have problems only after adding new nodes or delete old nodes. In this case you should
add new nodes manually and don&amp;rsquo;t forget update your app after all changes on AWS.</source>
          <target state="translated">잘 작동하고 memcache 클라이언트는 모든 노드간에 항목을 분리하고 클라이언트 측에서로드 균형을 맞 춥니 다. 새 노드를 추가하거나 이전 노드를 삭제 한 후에 만 ​​문제가 발생합니다. 이 경우 새 노드를 수동으로 추가해야하며 AWS에서 모든 변경 후 앱을 업데이트하는 것을 잊지 마십시오.</target>
        </trans-unit>
        <trans-unit id="40c3322b3b3d0d946724fe784d34663629e1932a" translate="yes" xml:space="preserve">
          <source>LOCATION</source>
          <target state="translated">위치</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">요구 사항</target>
        </trans-unit>
        <trans-unit id="751eb68ffdb680fc5c3057f81248e031baa7b6db" translate="yes" xml:space="preserve">
          <source>Run the tests like this:</source>
          <target state="translated">다음과 같이 테스트를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="5b62f292a927f052cce0ebfd49375e069c454722" translate="yes" xml:space="preserve">
          <source>Simple Django cache backend for Amazon ElastiCache (memcached based). It uses
&lt;a href=&quot;http://github.com/lericson/pylibmc&quot;&gt;pylibmc&lt;/a&gt; and sets up a connection to each
node in the cluster using
&lt;a href=&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/AutoDiscovery.html&quot;&gt;auto discovery&lt;/a&gt;.</source>
          <target state="translated">Amazon ElastiCache 용 간단한 Django 캐시 백엔드 (memcached 기반). 그것은 사용 &lt;a href=&quot;http://github.com/lericson/pylibmc&quot;&gt;pylibmc&lt;/a&gt; 사용하여 클러스터의 각 노드에 접속 연결 및 설정을 &lt;a href=&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/AutoDiscovery.html&quot;&gt;자동 검색을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">테스팅</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">그만큼</target>
        </trans-unit>
        <trans-unit id="88b33e4e12f75ac8bf792aebde41f1a090f3a612" translate="yes" xml:space="preserve">
          <source>True</source>
          <target state="translated">진실</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="7ddadb61200c5d2fbe72688cdd9ba64db7f35fdd" translate="yes" xml:space="preserve">
          <source>Your cache backend should look something like this:</source>
          <target state="translated">캐시 백엔드는 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="6066a2c377d1f3245d673c2ff2e078e25081e3bc" translate="yes" xml:space="preserve">
          <source>config get cluster</source>
          <target state="translated">구성 가져 오기 클러스터</target>
        </trans-unit>
        <trans-unit id="1e2159e398ac0b72f64428a363b82c6b9946c829" translate="yes" xml:space="preserve">
          <source>doesn&amp;rsquo;t have support
for</source>
          <target state="translated">에 대한 지원이 없습니다</target>
        </trans-unit>
        <trans-unit id="371cc7343d473e2d73d8393f22a039ae352fc95b" translate="yes" xml:space="preserve">
          <source>fails,
it returns a list of a single node with the same endpoint supplied to</source>
          <target state="translated">실패하면 동일한 엔드 포인트가 제공된 단일 노드 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="38827606a0945559ffc7c96d3d53ab40c63bbaa0" translate="yes" xml:space="preserve">
          <source>option is useful when</source>
          <target state="translated">옵션은 다음과 같은 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="feffea0d5bc93465efdccc93f9adef30c886bc13" translate="yes" xml:space="preserve">
          <source>or &lt;a href=&quot;http://github.com/gusdan/django-elasticache&quot;&gt;github&lt;/a&gt;:</source>
          <target state="translated">또는 &lt;a href=&quot;http://github.com/gusdan/django-elasticache&quot;&gt;github&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="14b109f1263bfc21f7ba0577cf57779716596583" translate="yes" xml:space="preserve">
          <source>param),
gets list of all nodes and setup pylibmc client using full
list of nodes. As result your cache will work with all nodes in cluster and
automatically detect new nodes in cluster. List of nodes are stored in class-level
cached, so any changes in cluster take affect only after restart of working process.
But if you&amp;rsquo;re using gunicorn or mod_wsgi you usually have max_request settings which
restart process after some count of processed requests, so auto discovery will work
fine.</source>
          <target state="translated">param), 모든 노드 목록을 가져오고 전체 노드 목록을 사용하여 pylibmc 클라이언트를 설정합니다. 결과적으로 캐시는 클러스터의 모든 노드에서 작동하고 클러스터의 새 노드를 자동으로 감지합니다. 노드 목록은 캐시 된 클래스 수준에 저장되므로 클러스터의 변경 사항은 작업 프로세스를 다시 시작한 후에 만 ​​적용됩니다. 그러나 gunicorn 또는 mod_wsgi를 사용하는 경우 일반적으로 처리 된 요청의 수 후에 프로세스를 다시 시작하는 max_request 설정이 있으므로 자동 검색이 제대로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="57748d5675ff25b5a147e34fa985986bcddb1a56" translate="yes" xml:space="preserve">
          <source>pylibmc</source>
          <target state="translated">pylibmc</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
