<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/finac/">
    <body>
      <group id="finac">
        <trans-unit id="e0bc517f0382d1efa183357805c58a52da93c168" translate="yes" xml:space="preserve">
          <source>1 000,00 = 1000.0</source>
          <target state="translated">1,000,00 = 1000.0</target>
        </trans-unit>
        <trans-unit id="1f9249ef94b109311950d364cb0a2e72fb5721b3" translate="yes" xml:space="preserve">
          <source>1,000.00 = 1000.0</source>
          <target state="translated">1,000.00 = 1000.0</target>
        </trans-unit>
        <trans-unit id="5169a545a687004c5e394a108684ed16f6be68e1" translate="yes" xml:space="preserve">
          <source>1.000,00 = 1000.0</source>
          <target state="translated">1.000,00 = 1000.0</target>
        </trans-unit>
        <trans-unit id="e89b9db8f721acfe4688b4092470e3133c82d784" translate="yes" xml:space="preserve">
          <source>10,0 = 10.0</source>
          <target state="translated">10,0 = 10.0</target>
        </trans-unit>
        <trans-unit id="7c24cfa5d29ac382a304fdcc5bd5e624a2610327" translate="yes" xml:space="preserve">
          <source>10.0 = 10.0</source>
          <target state="translated">10.0 = 10.0</target>
        </trans-unit>
        <trans-unit id="961a249e293835cec043533b0a2e79600ff29397" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;account&lt;/strong&gt; bank account, counterparty account, tax account, special account
etc. Everything is accounts :)</source>
          <target state="translated">&lt;strong&gt;계좌&lt;/strong&gt; 통장, 거래 상대방, 세무 계좌, 특별 계좌 등 모든 것이 계좌입니다. :)</target>
        </trans-unit>
        <trans-unit id="bfdabb02b078586fc26e7e10af181d8303920292" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;asset&lt;/strong&gt; currency, ISIN, stock code etc., currencies &quot;USD&quot; and &quot;EUR&quot; are
created automatically. Finac doesn't divide assets into currencies, property
and other. This allows creating applications for the various areas using the
single library.</source>
          <target state="translated">&lt;strong&gt;자산&lt;/strong&gt; 통화, ISIN, 주식 코드 등, 통화 &quot;USD&quot;및 &quot;EUR&quot;이 자동으로 생성됩니다. Finac은 자산을 통화, 자산 및 기타로 나누지 않습니다. 이를 통해 단일 라이브러리를 사용하여 다양한 영역의 애플리케이션을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b4ca40aa4370cbfb8dd10113ddc306c82428eb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;transaction&lt;/strong&gt; movements from (credit) / to (debit) and between accounts</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;(신용) /에서 (차변) 및 계정 간 &lt;strong&gt;거래&lt;/strong&gt; 이동</target>
        </trans-unit>
        <trans-unit id="231f1b12f7eab989171425d19c7d79cf952bac15" translate="yes" xml:space="preserve">
          <source>Accounts of types &quot;tax&quot;, &quot;supplier&quot; and &quot;finagent&quot; are passive by default.</source>
          <target state="translated">&quot;tax&quot;, &quot;supplier&quot;및 &quot;finagent&quot;유형의 계정은 기본적으로 수동적입니다.</target>
        </trans-unit>
        <trans-unit id="7d9c653f4e5248ba952e2f8ba1f0ba49196f0e1e" translate="yes" xml:space="preserve">
          <source>Actually, transaction templates are useful for any repeating operations. You
may specify all same arguments, as for the core functions.</source>
          <target state="translated">실제로 트랜잭션 템플릿은 반복 작업에 유용합니다. 핵심 함수에 대해 동일한 인수를 모두 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e47a34b2ca5976eb9101b04ab875b9df6180439" translate="yes" xml:space="preserve">
          <source>After the previous operation, we have &lt;em&gt;4,890.00&lt;/em&gt; USD on &quot;acc1&quot; and want to move
all except $1000 to &quot;acc2&quot;. Let's do it:</source>
          <target state="translated">이전 작업 후 &quot;acc1&quot;에 &lt;em&gt;4,890.00&lt;/em&gt; USD 가 &lt;em&gt;있고&lt;/em&gt; $ 1000를 제외한 모든 항목을 &quot;acc2&quot;로 옮기려고합니다. 해보자 :</target>
        </trans-unit>
        <trans-unit id="ab81efb949e5a152ae566045ff2ea716fe3433af" translate="yes" xml:space="preserve">
          <source>As you see, there's no counterparty account in lazy exchange. This feature is
useful for personal accounting and special applications, but for the
professional accounting, you should create counterparty exchange account and
perform buy-sell transactions with it.</source>
          <target state="translated">보시다시피 게으른 교환에는 거래 상대방 계정이 없습니다. 이 기능은 개인 회계 및 특수 응용 프로그램에 유용하지만 전문 회계의 경우 거래 상대방 거래소 계정을 생성하고이 계정으로 구매 판매 거래를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="843f302dcb0938f7b0a5147d458e936f2b7d8874" translate="yes" xml:space="preserve">
          <source>Assets have &lt;strong&gt;rates&lt;/strong&gt; - value of one asset, relative to other.</source>
          <target state="translated">자산이 &lt;strong&gt;요금&lt;/strong&gt; 한 자산의 가치, 다른 상대를 -.</target>
        </trans-unit>
        <trans-unit id="ccf83992f2fcc156d5bdcfb04a7f02d0a4676284" translate="yes" xml:space="preserve">
          <source>But the problem is there's a lot of transactions you should sum up. Or
calculate the difference between bank balance and accounting. Pretty common,
eh? Don't do this, we have targets.</source>
          <target state="translated">그러나 문제는 요약해야 할 거래가 많다는 것입니다. 또는 은행 잔고와 회계의 차이를 계산하십시오. 꽤 흔한가요? 이러지 마, 우리는 목표를 가지고있다.</target>
        </trans-unit>
        <trans-unit id="b5115124cf1d108916d1916201db31d5e536206c" translate="yes" xml:space="preserve">
          <source>Client-server mode and HTTP API</source>
          <target state="translated">클라이언트-서버 모드 및 HTTP API</target>
        </trans-unit>
        <trans-unit id="10788e048525f3fc5205d6c0e7e36e5eb1a0a8e7" translate="yes" xml:space="preserve">
          <source>Data multiplier</source>
          <target state="translated">데이터 승수</target>
        </trans-unit>
        <trans-unit id="f38c7f187adb1398d48e3bc72bd0062ecc005154" translate="yes" xml:space="preserve">
          <source>Depending on data, it may be useful to store numeric values in database as
integers instead of floats. Finac library has built-in data multiplier feature,
to enable it, set &lt;em&gt;multiplier=N&lt;/em&gt; in &lt;em&gt;finac.init()&lt;/em&gt; method, e.g.
&lt;em&gt;multiplier=1000&lt;/em&gt; if you want to store integers in tables and have data with
max precision 3 digits after comma.</source>
          <target state="translated">데이터에 따라 숫자 값을 부동 소수점 대신 정수로 데이터베이스에 저장하는 것이 유용 할 수 있습니다. Finac 라이브러리에는 내장 데이터 승수 기능이 있습니다.이를 활성화하려면 &lt;em&gt;finac.init ()&lt;/em&gt; 메서드 에서 &lt;em&gt;multiplier = N&lt;/em&gt; 을 설정합니다 . 예를 들어 테이블에 정수를 저장하고 쉼표 뒤에 최대 정밀도가 3 자리 인 데이터가있는 경우 &lt;em&gt;multiplier = 1000을&lt;/em&gt; 설정합니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8a127e64a9ead93f82c7317d4e36a9d1ed934818" translate="yes" xml:space="preserve">
          <source>Depending to your database type, it's REQUIRED to convert these columns to
either DATETIME (SQLite, for MySQL DATETIME(6) recommended) or TIMESTAMPTZ
(PostgreSQL, with timezone).</source>
          <target state="translated">데이터베이스 유형에 따라 이러한 열을 DATETIME (SQLite, MySQL DATETIME (6) 권장) 또는 TIMESTAMPTZ (PostgreSQL, 시간대 포함)로 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="0355bead37046ef9ccf42665436f3429df923847" translate="yes" xml:space="preserve">
          <source>Documentation: &lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;https://finac.readthedocs.io/&lt;/a&gt;</source>
          <target state="translated">문서 : &lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;https://finac.readthedocs.io/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="21f6c7d432e5c7bcf8faad8a58ecba05dd344f3e" translate="yes" xml:space="preserve">
          <source>Enterprise server and support</source>
          <target state="translated">엔터프라이즈 서버 및 지원</target>
        </trans-unit>
        <trans-unit id="87ecef59c5c568d2a2d70b0af30a1d0fe1a4d195" translate="yes" xml:space="preserve">
          <source>Example: you have a repeating payment orders in your bank, which pay office
utility bills every 5th day of month, plus automatically moves $100 to saving
account. To fill this into accounting, just create YAML transaction template:</source>
          <target state="translated">예 : 은행에 반복적 인 지불 주문이 있는데, 매월 5 일마다 사무실 공과금을 지불하고 자동으로 $ 100를 저축 계좌로 이동합니다. 이를 회계에 입력하려면 YAML 트랜잭션 템플릿을 생성하면됩니다.</target>
        </trans-unit>
        <trans-unit id="5e22b52adcdd3450d4860a16253732a7a0352c95" translate="yes" xml:space="preserve">
          <source>Finac - financial accounting for humans</source>
          <target state="translated">Finac-인간을위한 재무 회계</target>
        </trans-unit>
        <trans-unit id="065cd4576e7fc6135d6a8cc143984e4edd47f3f0" translate="yes" xml:space="preserve">
          <source>Finac can automatically move assets between accounts with different currencies,
if exchange rate is set or specified in transaction details:</source>
          <target state="translated">Finac은 환율이 설정되거나 거래 세부 사항에 지정된 경우 다른 통화를 사용하는 계정간에 자산을 자동으로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="787e87b8248c9634a4639ada317dd0de56596846" translate="yes" xml:space="preserve">
          <source>Finac database contain 3 entity types:</source>
          <target state="translated">Finac 데이터베이스에는 3 가지 엔티티 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5da82b531dff48cd3d8eea4baae1e7e94fa20385" translate="yes" xml:space="preserve">
          <source>Finac doesn't use system locale. If you input amounts and targets as strings,
you may input them in any format and Finac will try converting it to the float
numeric automatically. The following values for amounts and targets are valid
and will be automatically parsed:</source>
          <target state="translated">Finac은 시스템 로케일을 사용하지 않습니다. 금액과 목표를 문자열로 입력하면 어떤 형식 으로든 입력 할 수 있으며 Finac은이를 자동으로 부동 숫자로 변환하려고 시도합니다. 금액 및 목표에 대한 다음 값이 유효하며 자동으로 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="eb7dce8af31488284cd96b43c0097782eeb46899" translate="yes" xml:space="preserve">
          <source>Finac is a library and function set for Jupyter/ipython, which provides a
double-entry bookkeeping database.</source>
          <target state="translated">Finac은 이중 입력 부기 데이터베이스를 제공하는 Jupyter / ipython 용 라이브러리 및 함수 세트입니다.</target>
        </trans-unit>
        <trans-unit id="f6db852251168f06c237606c8464d69a7b2bb1f8" translate="yes" xml:space="preserve">
          <source>Finac is simple, open and free. It can work with SQLite or any database
supported by SQLAlchemy (tested: SQLite, MySQL, PostgreSQL).</source>
          <target state="translated">Finac은 간단하고 개방적이며 무료입니다. SQLite 또는 SQLAlchemy에서 지원하는 모든 데이터베이스 (테스트 : SQLite, MySQL, PostgreSQL)에서 작동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb66a6b7997424bbc275985008d4d8ebfc48e01a" translate="yes" xml:space="preserve">
          <source>Finac supports multiple currencies, simple transactions, double-entry
bookkeeping transactions, watches overdrafts, balance limits and has many
useful features, which make accounting simple and fun.</source>
          <target state="translated">Finac은 여러 통화, 단순 거래, 이중 입력 부기 거래, 초과 인출 감시, 잔고 한도를 지원하며 회계를 간단하고 재미있게 만드는 많은 유용한 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6797637815a072ceed2c538f5dc5827eb884c7c0" translate="yes" xml:space="preserve">
          <source>Financial accounting library</source>
          <target state="translated">재무 회계 라이브러리</target>
        </trans-unit>
        <trans-unit id="6207cf5beafb0add58ff6b030351511f75ce03a7" translate="yes" xml:space="preserve">
          <source>For the simple transactions (&lt;em&gt;f.tr(...))&lt;/em&gt;), use &lt;em&gt;target=&lt;/em&gt;.</source>
          <target state="translated">단순 트랜잭션 ( &lt;em&gt;f.tr (...))&lt;/em&gt; )의 경우 &lt;em&gt;target =을&lt;/em&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8e0a112192126b3a522a88b2c524fb4479a126c8" translate="yes" xml:space="preserve">
          <source>Full list of tables and fields is available in dict
&lt;em&gt;finac.core.multiply_fields&lt;/em&gt;.</source>
          <target state="translated">테이블 및 필드의 전체 목록은 dict &lt;em&gt;finac.core.multiply_fields에&lt;/em&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9564149c757f2b2cd165ab9969aed8288a9d43d" translate="yes" xml:space="preserve">
          <source>How to embed Finac library into own project</source>
          <target state="translated">Finac 라이브러리를 자체 프로젝트에 포함하는 방법</target>
        </trans-unit>
        <trans-unit id="4003f48231860e273ee7655256b4352a94f5daed" translate="yes" xml:space="preserve">
          <source>How to use in interactive mode</source>
          <target state="translated">대화 형 모드에서 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="0b44d2ce5a2d2c398754110453bf2a61dd5b404b" translate="yes" xml:space="preserve">
          <source>If account is passive, its assets are decremented from totals. To create
passive account, use &lt;em&gt;passive&lt;/em&gt; argument:</source>
          <target state="translated">계정이 수동이면 해당 자산이 합계에서 감소합니다. 수동 계정을 만들려면 사용하는 &lt;em&gt;수동&lt;/em&gt; 인수를 :</target>
        </trans-unit>
        <trans-unit id="22de1db043b79d5789ef7e3924b1debf6bfa7840" translate="yes" xml:space="preserve">
          <source>If you want to specify a debit account balance target instead, use &lt;em&gt;target_dt&lt;/em&gt;
function argument. Note: calculated transaction amount should be always greater
than zero (if you try specifying credit account target higher than its current
balance, you get &lt;em&gt;ValueError&lt;/em&gt; exception)</source>
          <target state="translated">대신 차변 계정 잔액 목표를 지정하려면 &lt;em&gt;target_dt&lt;/em&gt; 함수 인수를 사용하십시오. 참고 : 계산 된 거래 금액은 항상 0보다 커야합니다 (현재 잔액보다 높은 신용 계정 목표를 지정하려고하면 &lt;em&gt;ValueError&lt;/em&gt; 예외가 발생 함).</target>
        </trans-unit>
        <trans-unit id="715135eccd2a1be75031415df8bfccfe7c6296ef" translate="yes" xml:space="preserve">
          <source>Inside database, Finac uses numeric IDs to connect objects, so all their codes
can be changed without any problems.</source>
          <target state="translated">Finac은 데이터베이스 내에서 숫자 ID를 사용하여 개체를 연결하므로 모든 코드를 문제없이 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="7bc74cfef23e3fe136eaa61920dbbd9e6566a5dc" translate="yes" xml:space="preserve">
          <source>Lazy exchange</source>
          <target state="translated">게으른 교환</target>
        </trans-unit>
        <trans-unit id="53e528ec0890a39483f9d31bb36e56cc71409b6e" translate="yes" xml:space="preserve">
          <source>Note: multiplier can be used only with integer and numeric(X) field types, as
core conversion functions always return rounded value.</source>
          <target state="translated">참고 : 핵심 변환 함수는 항상 반올림 된 값을 반환하므로 multiplier는 정수 및 숫자 (X) 필드 유형에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8766d2e63c6824e94635bf01f22382c0a755a14d" translate="yes" xml:space="preserve">
          <source>Note: when addressing currencies and accounts both in interactive and API mode,
you should use account and asset codes as object identifiers. &lt;strong&gt;All codes
are case-insensitive&lt;/strong&gt;.</source>
          <target state="translated">참고 : 대화 형 및 API 모드 모두에서 통화 및 계정을 처리 할 때 계정 및 자산 코드를 개체 식별자로 사용해야합니다. &lt;strong&gt;모든 코드는 대소 문자를 구분하지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a7417f328934dab7503609c163ec3236cfcb65c1" translate="yes" xml:space="preserve">
          <source>Note: you must manually convert table fields to numeric/integer types, and
multiply them if performing data multiplier implementation on living database.</source>
          <target state="translated">참고 : 테이블 필드를 숫자 / 정수 유형으로 수동으로 변환하고 살아있는 데이터베이스에서 데이터 승수 구현을 수행하는 경우이를 곱해야합니다.</target>
        </trans-unit>
        <trans-unit id="2918c4d5af1ec648f31fc83cb72666722f8d463c" translate="yes" xml:space="preserve">
          <source>Number formatting</source>
          <target state="translated">숫자 서식</target>
        </trans-unit>
        <trans-unit id="28ac803e1696169a0797715a8cce52d973db3786" translate="yes" xml:space="preserve">
          <source>Passive accounts</source>
          <target state="translated">수동 계정</target>
        </trans-unit>
        <trans-unit id="eff03ccbb28c77c758eeffd73614fb81f4e092ca" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;Finac documentation&lt;/a&gt; for core function API
details.</source>
          <target state="translated">핵심 기능 API 세부 사항 은 &lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;Finac 문서&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="be1cf028afae737ac346bf53d0eee6fc5cc5e045" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;Finac documentation&lt;/a&gt; for server mode and
HTTP API details.</source>
          <target state="translated">서버 모드 및 HTTP API 세부 사항 은 &lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;Finac 문서&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="45f2ea3bbe779b3b012fdd33c247f82a910fc12d" translate="yes" xml:space="preserve">
          <source>Sources: &lt;a href=&quot;https://github.com/alttch/finac&quot;&gt;https://github.com/alttch/finac&lt;/a&gt;</source>
          <target state="translated">출처 : &lt;a href=&quot;https://github.com/alttch/finac&quot;&gt;https://github.com/alttch/finac&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2e51c9be1bab0010b7ca23dacefc249b0aae2c03" translate="yes" xml:space="preserve">
          <source>Special features</source>
          <target state="translated">특별한 기능</target>
        </trans-unit>
        <trans-unit id="04cd7e5008cd273d52b314962fc93af90962443e" translate="yes" xml:space="preserve">
          <source>Specifying targets instead of amount tells Finac to calculate transaction
amount by itself.</source>
          <target state="translated">금액 대신 목표를 지정하면 Finac이 자체적으로 거래 금액을 계산하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="12d6431bb48e25868633cc1c0a8ca7d97585fb58" translate="yes" xml:space="preserve">
          <source>Starting from 0.4, Finac uses DateTime columns for:</source>
          <target state="translated">0.4부터 Finac은 다음에 대해 DateTime 열을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d35260a00f655f27edcc35a7eb16da44a4f671a6" translate="yes" xml:space="preserve">
          <source>Targets</source>
          <target state="translated">목표</target>
        </trans-unit>
        <trans-unit id="09f8f33671784d283159bc6680ac0c0a20be1475" translate="yes" xml:space="preserve">
          <source>Targets is a feature I wrote Finac for. You have account balances in bank and
in accounting. They differ by some amount and you are going to record this with
a single transaction.</source>
          <target state="translated">Targets는 내가 Finac을 위해 작성한 기능입니다. 은행과 회계에 계정 잔액이 있습니다. 금액이 조금씩 다르며 한 번의 거래로 이것을 기록 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="6cea15b0a09fb20c7ed3e8a007b34dabb9042d7f" translate="yes" xml:space="preserve">
          <source>The transaction amount is automatically calculated. Lazy people are happy :)</source>
          <target state="translated">거래 금액은 자동으로 계산됩니다. 게으른 사람들은 행복합니다 :)</target>
        </trans-unit>
        <trans-unit id="06b3f2ab488c785b43619aa68ab4f08a26739472" translate="yes" xml:space="preserve">
          <source>Transaction templates</source>
          <target state="translated">거래 템플릿</target>
        </trans-unit>
        <trans-unit id="09a741a781a67c9bc811c4a9c246128e2cc471d8" translate="yes" xml:space="preserve">
          <source>Transactions can be simple (no counterparty) or classic double-entry
bookkeeping (between debit and credit account)</source>
          <target state="translated">거래는 단순 (상대방 없음) 또는 고전적인 이중 입력 부기 (직불 및 신용 계정 간) 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec6952e09b9cc6aee90f3110c55ff105e4facbf9" translate="yes" xml:space="preserve">
          <source>Updating</source>
          <target state="translated">업데이트 중</target>
        </trans-unit>
        <trans-unit id="39a2132a809569ad32e1370c0c12059d1c3be9d7" translate="yes" xml:space="preserve">
          <source>Want to integrate Finac into your enterprise app or service? Need a support?
Check &lt;a href=&quot;https://www.altertech.com/products/fes/&quot;&gt;Finac Enterprise Server&lt;/a&gt;.</source>
          <target state="translated">Finac을 엔터프라이즈 앱 또는 서비스에 통합하고 싶으십니까? 지원이 필요하십니까? &lt;a href=&quot;https://www.altertech.com/products/fes/&quot;&gt;Finac Enterprise Server를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="bc5235deeb21f5bfd3df4fbffab30cec89215127" translate="yes" xml:space="preserve">
          <source>You can use Finac either in interactive mode with
&lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt;, &lt;a href=&quot;https://www.spyder-ide.org/&quot;&gt;Spyder-IDE&lt;/a&gt;,
ipython or other similar environment or embed Finac library into own projects.
The library may be used in accounting applications as well it's useful for the
fin-tech services.</source>
          <target state="translated">&lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt; , &lt;a href=&quot;https://www.spyder-ide.org/&quot;&gt;Spyder-IDE&lt;/a&gt; , ipython 또는 기타 유사한 환경 에서 대화 형 모드로 Finac을 사용 하거나 Finac 라이브러리를 자체 프로젝트에 포함 할 수 있습니다. 라이브러리는 회계 응용 프로그램에서도 사용될 수 있으며 핀 테크 서비스에도 유용합니다.</target>
        </trans-unit>
        <trans-unit id="183e231219675ca0833418d845d44aaf7d82a5ff" translate="yes" xml:space="preserve">
          <source>asset_rate.d</source>
          <target state="translated">asset_rate.d</target>
        </trans-unit>
        <trans-unit id="ab47d67959a33e65c2c9721ae431e02d706920a2" translate="yes" xml:space="preserve">
          <source>from 0.3.x</source>
          <target state="translated">0.3.x에서</target>
        </trans-unit>
        <trans-unit id="ca91f16ab04848742fde8a9e99e88af81c07411d" translate="yes" xml:space="preserve">
          <source>from 0.4.10</source>
          <target state="translated">0.4.10에서</target>
        </trans-unit>
        <trans-unit id="5d0b916b9c153bf0cad0e3641584fadef39fed58" translate="yes" xml:space="preserve">
          <source>hoorah, account acc5 got 100 EUR! And exchange rate was 1.1. Let's check:</source>
          <target state="translated">만세, acc5 계정이 100 유로를 받았습니다! 그리고 환율은 1.1이었습니다. 점검 해보자:</target>
        </trans-unit>
        <trans-unit id="ff00a244382306ab8f9421298471f21b135269ef" translate="yes" xml:space="preserve">
          <source>then create a cron job which calls &lt;em&gt;f.transaction_apply(&quot;/path/to/file.yml&quot;)&lt;/em&gt;
and that's it.</source>
          <target state="translated">그런 다음 &lt;em&gt;f.transaction_apply ( &quot;/ path / to / file.yml&quot;)&lt;/em&gt; 을 호출하는 크론 작업을 생성하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="1e1875984cbf3816ef60f114e69b41b65d6e0b15" translate="yes" xml:space="preserve">
          <source>transact.d</source>
          <target state="translated">transact.d</target>
        </trans-unit>
        <trans-unit id="417fc82b269ac2c57985772cd332e9cac7030fd8" translate="yes" xml:space="preserve">
          <source>transact.d_created</source>
          <target state="translated">transact.d_created</target>
        </trans-unit>
        <trans-unit id="e75f77cc451ea89cd6128ef6d42c84fe3d169423" translate="yes" xml:space="preserve">
          <source>transact.deleted</source>
          <target state="translated">transact.deleted</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
