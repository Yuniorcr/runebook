<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/asfv1/">
    <body>
      <group id="asfv1">
        <trans-unit id="60281fbb5ad23867ac591018d37ebe8cc2664a33" translate="yes" xml:space="preserve">
          <source>15 bit delay addresses in ADDR_PTR are left shifted 8 bits,
so they can be accessed using the real S_23 value 0-&amp;gt;0.9999 or
directly by multiplying the desired integer delay address by 256.</source>
          <target state="translated">ADDR_PTR의 15 비트 지연 주소는 8 비트 왼쪽으로 시프트되므로 실제 S_23 값 0-&amp;gt; 0.9999를 사용하거나 원하는 정수 지연 주소에 256을 곱하여 직접 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7dbf053a57ce1bf174c6373e44e58dd742ec121" translate="yes" xml:space="preserve">
          <source>2**(ACC), multiply and offset</source>
          <target state="translated">2 ** (ACC), 곱하기 및 오프셋</target>
        </trans-unit>
        <trans-unit id="5e04fd9892761996272755e87a3cf2e13a147e3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!&lt;/code&gt; is an alias for &lt;code&gt;~&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; &lt;code&gt;~&lt;/code&gt; 의 별칭입니다.</target>
        </trans-unit>
        <trans-unit id="100b014714f25c038538b5b535b2263c4c719933" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-b&lt;/code&gt;, &lt;code&gt;--binary&lt;/code&gt; : Force output in binary format, even if &lt;code&gt;outfile&lt;/code&gt;
ends with 'hex'.</source>
          <target state="translated">&lt;code&gt;-b&lt;/code&gt; , &lt;code&gt;--binary&lt;/code&gt; : &lt;code&gt;outfile&lt;/code&gt; 이 'hex'로 끝나 더라도 바이너리 형식으로 강제 출력 합니다.</target>
        </trans-unit>
        <trans-unit id="6f35f8027432ec40fe85b249bbdeb492e31919a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c&lt;/code&gt;, &lt;code&gt;--clamp&lt;/code&gt; : Clamp out of range instruction operand values without error.
A warning message is printed for each clamped operand.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; , &lt;code&gt;--clamp&lt;/code&gt; : 범위를 벗어난 명령어 피연산자 값을 오류없이 클램프합니다. 클램프 된 각 피연산자에 대해 경고 메시지가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="6d475cf7ee5a9a6e57bbc789a5280fe98710ba2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt; : Show a help message and exit</source>
          <target state="translated">&lt;code&gt;-h&lt;/code&gt; , &lt;code&gt;--help&lt;/code&gt; : 도움말 메시지를 표시하고 종료합니다.</target>
        </trans-unit>
        <trans-unit id="cf947f3a1d001fd14d46902cc900507741853528" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p {0,1,2,3,4,5,6,7}&lt;/code&gt; : Nominate one of the eight available program
slots on an FV-1 eeprom as the target. When this option is used with
binary output, machine code is offset appropriately in the target
file, allowing for assembly into an existing binary bank file. When
Intel HEX output is requested, the output file will include a single
program and relevant offset information for the target program.</source>
          <target state="translated">&lt;code&gt;-p {0,1,2,3,4,5,6,7}&lt;/code&gt; : FV-1 eeprom에서 사용 가능한 8 개 프로그램 슬롯 중 하나를 대상으로 지정합니다. 이 옵션을 이진 출력과 함께 사용하면 기계어 코드가 대상 파일에서 적절하게 오프셋되어 기존 이진 뱅크 파일로 어셈블리 할 수 ​​있습니다. Intel HEX 출력이 요청되면 출력 파일에는 대상 프로그램에 대한 단일 프로그램 및 관련 오프셋 정보가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a861937df4f8525608ed2627f6e3cd09f4f2f9ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-q&lt;/code&gt;, &lt;code&gt;--quiet&lt;/code&gt; : Suppress warning messages</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; , &lt;code&gt;--quiet&lt;/code&gt; : 경고 메시지 표시 안 함</target>
        </trans-unit>
        <trans-unit id="b3edfa744830fdafcf29ff12ec36ffc97fa08147" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;--spinreals&lt;/code&gt; : Interpret integer literals &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; as 1.0 and 2.0
respectively. This option should be used with SpinASM assembly.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; , &lt;code&gt;--spinreals&lt;/code&gt; : 정수 리터럴 &lt;code&gt;1&lt;/code&gt; 과 &lt;code&gt;2&lt;/code&gt; 를 각각 1.0과 2.0으로 해석합니다 . 이 옵션은 SpinASM 어셈블리와 함께 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="0dc820dc2e46c32adac5bbbd86f655fc14a1590c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;--version&lt;/code&gt; : Print program version and exit</source>
          <target state="translated">&lt;code&gt;-v&lt;/code&gt; , &lt;code&gt;--version&lt;/code&gt; : 프로그램 버전 출력 후 종료</target>
        </trans-unit>
        <trans-unit id="7b2e8e07b44249be87437f5b197bb80d9989923a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;//&lt;/code&gt; forces integer divide</source>
          <target state="translated">&lt;code&gt;//&lt;/code&gt; 정수 나누기를 강제합니다.</target>
        </trans-unit>
        <trans-unit id="148aea1f8906272ea8d81fbf11e80831789d29f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0x20&lt;/code&gt; - &lt;code&gt;0x3f&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;0x20&lt;/code&gt; - &lt;code&gt;0x3f&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c6c43ac5925cb822b44d6676354982bfb1856bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REG0&lt;/code&gt; - &lt;code&gt;REG31&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;REG0&lt;/code&gt; - &lt;code&gt;REG31&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="377409ac3942d616fcf2e855d64636fb3a927370" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;infile&lt;/code&gt; : Filename for an ASCII, utf-8 or utf-16 encoded text file
containing FV-1 assembly (see &lt;a href=&quot;#assembly-program-syntax&quot;&gt;Assembly Program Syntax&lt;/a&gt; below)</source>
          <target state="translated">&lt;code&gt;infile&lt;/code&gt; : FV-1 어셈블리를 포함하는 ASCII, utf-8 또는 utf-16 인코딩 텍스트 파일의 파일 이름 (아래 &lt;a href=&quot;#assembly-program-syntax&quot;&gt;어셈블리 프로그램 구문&lt;/a&gt; 참조)</target>
        </trans-unit>
        <trans-unit id="fa29b12189003bf5db1bdfbb4d42755d3ac21cc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;outfile&lt;/code&gt; : Filename for assembled output. If filename ends with 'hex',
an Intel hex file is written.</source>
          <target state="translated">&lt;code&gt;outfile&lt;/code&gt; : 조합 된 출력의 파일 이름입니다. 파일 이름이 'hex'로 끝나면 Intel hex 파일이 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="3dceed437c947ae2eba8dfcfa42c1c69587d0b16" translate="yes" xml:space="preserve">
          <source>A semicolon character ';' starts comment text. The assembler will
ignore all text including the ';' up to the end of a line.
Examples:</source>
          <target state="translated">세미콜론 문자 ';' 주석 텍스트를 시작합니다. 어셈블러는 ';'를 포함한 모든 텍스트를 무시합니다. 줄 끝까지. 예 :</target>
        </trans-unit>
        <trans-unit id="9f480457e68dc6be2cdff0505e61348f98f1f5ff" translate="yes" xml:space="preserve">
          <source>ADDRESS,MULTIPLIER</source>
          <target state="translated">주소, 배수</target>
        </trans-unit>
        <trans-unit id="3b7843d739decf6ac3b16f23ca7917915d86681a" translate="yes" xml:space="preserve">
          <source>AMPLITUDE coefficient specifies the peak-to-peak amplitude
of the LFO in delay samples, and may be entered using a real
value. Negative amplitudes work as with SINx_RANGE register.</source>
          <target state="translated">AMPLITUDE 계수는 지연 샘플에서 LFO의 피크 대 피크 진폭을 지정하며 실제 값을 사용하여 입력 할 수 있습니다. 음의 진폭은 SINx_RANGE 레지스터와 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="893e23437ff458b7077ac3b61aa7dad90e4097e3" translate="yes" xml:space="preserve">
          <source>AMPLITUDE may also be set by entering one of the specific
integer values: 4096, 2048, 1024 or 512.</source>
          <target state="translated">AMPLITUDE는 특정 정수 값 (4096, 2048, 1024 또는 512) 중 하나를 입력하여 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="20e2af2f9198790a475043ca23a9d8236348621b" translate="yes" xml:space="preserve">
          <source>AN0001: &lt;a href=&quot;http://spinsemi.com/Products/appnotes/spn1001/AN-0001.pdf&quot;&gt;http://spinsemi.com/Products/appnotes/spn1001/AN-0001.pdf&lt;/a&gt;</source>
          <target state="translated">AN0001 : &lt;a href=&quot;http://spinsemi.com/Products/appnotes/spn1001/AN-0001.pdf&quot;&gt;http://spinsemi.com/Products/appnotes/spn1001/AN-0001.pdf&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="caeff589a1c6fc95913e5405c22941bd5f9db2f6" translate="yes" xml:space="preserve">
          <source>Action:</source>
          <target state="translated">동작:</target>
        </trans-unit>
        <trans-unit id="802ff9a03f98df1e840875805105d868a2524771" translate="yes" xml:space="preserve">
          <source>Addresses in the FV-1's 32768 sample circular buffer can be assigned
by the assembler using the 'MEM' directive. MEM reserves a portion
of memory that represents a delay of 'EXPRESSION' samples between
the start point and end point, and assigns three labels:</source>
          <target state="translated">FV-1의 32768 샘플 순환 버퍼에있는 주소는 'MEM'지시문을 사용하여 어셈블러에서 할당 할 수 있습니다. MEM은 시작점과 끝점 사이의 'EXPRESSION'샘플 지연을 나타내는 메모리 부분을 예약하고 세 개의 레이블을 할당합니다.</target>
        </trans-unit>
        <trans-unit id="f546e691614a16fe0b4526d63153b6285fa175f9" translate="yes" xml:space="preserve">
          <source>Adjust RMP LFO with coefficients FREQUENCY and AMPLITUDE.</source>
          <target state="translated">계수 FREQUENCY 및 AMPLITUDE로 RMP LFO를 조정합니다.</target>
        </trans-unit>
        <trans-unit id="432994d4b0579b52b0d3a1e14532bc2aafed0bda" translate="yes" xml:space="preserve">
          <source>Adjust SIN LFO with coefficients FREQUENCY and AMPLITUDE.</source>
          <target state="translated">계수 FREQUENCY 및 AMPLITUDE로 SIN LFO를 조정합니다.</target>
        </trans-unit>
        <trans-unit id="7ecd5c7dba2a82519d0c7d31c984a0f82c58f72d" translate="yes" xml:space="preserve">
          <source>Alternate Assembler for Spin Semi FV-1</source>
          <target state="translated">Spin Semi FV-1 용 대체 어셈블러</target>
        </trans-unit>
        <trans-unit id="dc41b3dc8d1be5cc633a9a4cebc58defdb50253d" translate="yes" xml:space="preserve">
          <source>Alternate FV-1 Assembler</source>
          <target state="translated">대체 FV-1 어셈블러</target>
        </trans-unit>
        <trans-unit id="1d08b4165f959392518f2b8bb8cdbbb961f73a13" translate="yes" xml:space="preserve">
          <source>Alternatively, the main source file can be run directly with a python
interpreter without the need to install any files:</source>
          <target state="translated">또는 파일을 설치할 필요없이 기본 소스 파일을 Python 인터프리터로 직접 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3dd886af790680ae404643f0814d281914e0af11" translate="yes" xml:space="preserve">
          <source>An FV-1 assembly program recognised by asfv1 closely resembles
the &lt;a href=&quot;http://spinsemi.com/products.html&quot;&gt;SpinIDE&lt;/a&gt; (.spn) format.
Input is an ASCII, utf-8 or utf-16 encoded
text file containing zero to 128 FV-1
&lt;a href=&quot;#instructions&quot;&gt;instructions&lt;/a&gt; with optional
&lt;a href=&quot;#jump-targets&quot;&gt;targets&lt;/a&gt;, &lt;a href=&quot;#label-assignment&quot;&gt;labels&lt;/a&gt;,
&lt;a href=&quot;#comments&quot;&gt;comments&lt;/a&gt; and &lt;a href=&quot;#memory-allocation&quot;&gt;assembly directives&lt;/a&gt;.
All text is matched case-insensitively and runs of whitespace characters
(newline, tab, space) are condensed.
Each of the input instructions is assembled into a single 32 bit
machine code. If less than 128 assembly instructions are input,
the unallocated program space is padded with 'NOP' instructions
(0x00000011).</source>
          <target state="translated">asfv1에서 인식하는 FV-1 어셈블리 프로그램은 &lt;a href=&quot;http://spinsemi.com/products.html&quot;&gt;SpinIDE&lt;/a&gt; (.spn) 형식 과 매우 유사 합니다. 입력은 ASCII, utf-8 또는 utf-16 인코딩 텍스트 파일로 , 선택적 &lt;a href=&quot;#jump-targets&quot;&gt;대상&lt;/a&gt; , &lt;a href=&quot;#label-assignment&quot;&gt;레이블&lt;/a&gt; , &lt;a href=&quot;#comments&quot;&gt;주석&lt;/a&gt; 및 &lt;a href=&quot;#memory-allocation&quot;&gt;어셈블리 지시문이&lt;/a&gt; 있는 0 ~ 128 개의 FV-1 &lt;a href=&quot;#instructions&quot;&gt;명령어&lt;/a&gt; 를 포함 합니다 . 모든 텍스트는 대소 문자를 구분하지 않고 일치하며 공백 문자 (줄 바꿈, 탭, 공백)는 압축됩니다. 각 입력 명령어는 단일 32 비트 기계어 코드로 어셈블됩니다. 128 개 미만의 어셈블리 명령어를 입력하면 할당되지 않은 프로그램 공간이 'NOP'명령어 (0x00000011)로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="fed40bc113d156795b1bc0378896aeb16869a05c" translate="yes" xml:space="preserve">
          <source>An alternate assembler for the Spin Semiconductor FV-1 DSP. This
assembler aims to replicate some of the behaviour of the Spin FV-1
assembler in standard Python, for developers who are unable or
unwilling to use the Spin provided IDE.</source>
          <target state="translated">Spin Semiconductor FV-1 DSP의 대체 어셈블러입니다. 이 어셈블러는 Spin 제공 IDE를 사용할 수 없거나 사용하지 않으려는 개발자를 위해 표준 Python에서 Spin FV-1 어셈블러의 일부 동작을 복제하는 것을 목표로합니다.</target>
        </trans-unit>
        <trans-unit id="98e959f745a7a2afa5c06991a7c174022e3087ce" translate="yes" xml:space="preserve">
          <source>An instruction is represented by a mnemonic text followed by zero
or more &lt;a href=&quot;#operand-expressions&quot;&gt;operand expressions&lt;/a&gt; separated by commas:</source>
          <target state="translated">명령어는 니모닉 텍스트와 쉼표로 구분 된 0 개 이상의 &lt;a href=&quot;#operand-expressions&quot;&gt;피연산자 표현식&lt;/a&gt; 으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0a89342e9fcb31a038f4068e38847b411ea691af" translate="yes" xml:space="preserve">
          <source>Arch Linux</source>
          <target state="translated">아치 리눅스</target>
        </trans-unit>
        <trans-unit id="7dbdb145b3eb6aa10d3e3ca1275ab3f6d00d3bfa" translate="yes" xml:space="preserve">
          <source>Assembly Program Syntax</source>
          <target state="translated">어셈블리 프로그램 구문</target>
        </trans-unit>
        <trans-unit id="528a653c1337877f018509c599539f6092a1c73c" translate="yes" xml:space="preserve">
          <source>Binary integer</source>
          <target state="translated">이진 정수</target>
        </trans-unit>
        <trans-unit id="227138f611218a0e4fff7d38d43821e37c4fa355" translate="yes" xml:space="preserve">
          <source>Binary integer ('_' is ignored)</source>
          <target state="translated">2 진 정수 ( '_'는 무시 됨)</target>
        </trans-unit>
        <trans-unit id="f0504b6ec1e3187827d93f28bf65a74f11d83012" translate="yes" xml:space="preserve">
          <source>Binds right: &lt;code&gt;-10**-2&lt;/code&gt; = &lt;code&gt;-0.01&lt;/code&gt;</source>
          <target state="translated">오른쪽 바인딩 : &lt;code&gt;-10**-2&lt;/code&gt; = &lt;code&gt;-0.01&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="705611c9cd71bfe9c335feb228b98c98033cb62a" translate="yes" xml:space="preserve">
          <source>CHO flag</source>
          <target state="translated">CHO 플래그</target>
        </trans-unit>
        <trans-unit id="d3bd0e1753b4dd764ff160afc7c1e42977318386" translate="yes" xml:space="preserve">
          <source>CHO type selector</source>
          <target state="translated">CHO 유형 선택기</target>
        </trans-unit>
        <trans-unit id="5a7758367f67de6b1ac2cb06cc3cd5c35c6414ad" translate="yes" xml:space="preserve">
          <source>CONDITIONS,OFFSET</source>
          <target state="translated">조건, 오프셋</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">코멘트</target>
        </trans-unit>
        <trans-unit id="3486bccb08617a2299b811508934e9edb68e7e4f" translate="yes" xml:space="preserve">
          <source>Compute the base 2 log of the absolute value of ACC,
multiply and then add offset. Input ACC is S_23,
result ACC is S4_19.</source>
          <target state="translated">ACC 절대 값의 밑이 2 인 로그를 계산하고 곱한 다음 오프셋을 더합니다. 입력 ACC는 S_23이고 결과 ACC는 S4_19입니다.</target>
        </trans-unit>
        <trans-unit id="f55c5311ce50e8e1b3ef0d905b8f378cc62a3106" translate="yes" xml:space="preserve">
          <source>Condition Flags:</source>
          <target state="translated">조건 플래그 :</target>
        </trans-unit>
        <trans-unit id="cf3c63f57400ef518c9e72b698931a73a608e9a2" translate="yes" xml:space="preserve">
          <source>Copy ACC to REGISTER, and multiply ACC.</source>
          <target state="translated">ACC를 REGISTER에 복사하고 ACC를 곱합니다.</target>
        </trans-unit>
        <trans-unit id="3d5289a4e5cc08705d9aaf7376b91780ee3cef4f" translate="yes" xml:space="preserve">
          <source>Copy ACC to REGISTER, multiply ACC and add to PACC.</source>
          <target state="translated">ACC를 REGISTER에 복사하고 ACC를 곱한 다음 PACC에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="231703824f54724750bc7199264d38736b703286" translate="yes" xml:space="preserve">
          <source>Copy ACC to REGISTER, subtract ACC from PACC, multiply and add to PACC.</source>
          <target state="translated">ACC를 REGISTER에 복사하고 PACC에서 ACC를 빼고 곱한 다음 PACC에 더합니다.</target>
        </trans-unit>
        <trans-unit id="6df43a582d14fbbff16e0f87ed385b5ea93da73f" translate="yes" xml:space="preserve">
          <source>Copy register content to ACC. Assembles to rdax with a multiplier
of 0.0.</source>
          <target state="translated">등록 내용을 ACC에 복사합니다. 0.0의 승수로 rdax로 어셈블됩니다.</target>
        </trans-unit>
        <trans-unit id="706cf5a968a50f20f8f7ada398cfdbd3dae04fff" translate="yes" xml:space="preserve">
          <source>Copy the absolute value of ACC back into ACC. Assembles to maxx
with null register and zero multiplier.</source>
          <target state="translated">ACC의 절대 값을 다시 ACC로 복사합니다. 널 레지스터와 제로 승수를 사용하여 maxx로 어셈블됩니다.</target>
        </trans-unit>
        <trans-unit id="511f6fe5c6d404409905b620f7d602a45fe3a7d7" translate="yes" xml:space="preserve">
          <source>Copy the maximum of the absolute value of ACC and the
absolute value of REGISTER content times MULTIPLIER into ACC.</source>
          <target state="translated">ACC의 절대 값과 REGISTER 콘텐츠의 절대 값 x MULTIPLIER의 최대 값을 ACC에 복사합니다.</target>
        </trans-unit>
        <trans-unit id="1c2748df0d48ab7235af3b9a1f3309a25f11fbaf" translate="yes" xml:space="preserve">
          <source>Copy the unsigned 32 bit value in U32 directly to the output program.</source>
          <target state="translated">U32의 부호없는 32 비트 값을 출력 프로그램에 직접 복사합니다.</target>
        </trans-unit>
        <trans-unit id="915f082b1987e41a7c432bf223d29fa6813f028f" translate="yes" xml:space="preserve">
          <source>Copyright (C) 2017-2019 Nathan Fraser</source>
          <target state="translated">저작권 (C) 2017-2019 Nathan Fraser</target>
        </trans-unit>
        <trans-unit id="d42cf817354f67ba1faef232e9dedc9e2d2671f9" translate="yes" xml:space="preserve">
          <source>Datasheet: &lt;a href=&quot;http://spinsemi.com/Products/datasheets/spn1001/FV-1.pdf&quot;&gt;http://spinsemi.com/Products/datasheets/spn1001/FV-1.pdf&lt;/a&gt;</source>
          <target state="translated">데이터 시트 : &lt;a href=&quot;http://spinsemi.com/Products/datasheets/spn1001/FV-1.pdf&quot;&gt;http://spinsemi.com/Products/datasheets/spn1001/FV-1.pdf&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ab5dfb740f9cf7f9df79ba16d24345758db1c965" translate="yes" xml:space="preserve">
          <source>Decimal integer</source>
          <target state="translated">십진 정수</target>
        </trans-unit>
        <trans-unit id="0ab5e86537a2d6929d271068588d7b3bf00e4b3f" translate="yes" xml:space="preserve">
          <source>Delay address pointer</source>
          <target state="translated">지연 주소 포인터</target>
        </trans-unit>
        <trans-unit id="de04713ddf6ea199725f2b618928a8519c34c86f" translate="yes" xml:space="preserve">
          <source>Dervish eurorack FV-1 module: &lt;a href=&quot;http://gbiswell.myzen.co.uk/dervish/Readme_First.html&quot;&gt;http://gbiswell.myzen.co.uk/dervish/Readme_First.html&lt;/a&gt;</source>
          <target state="translated">Dervish eurorack FV-1 모듈 : &lt;a href=&quot;http://gbiswell.myzen.co.uk/dervish/Readme_First.html&quot;&gt;http://gbiswell.myzen.co.uk/dervish/Readme_First.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">기술</target>
        </trans-unit>
        <trans-unit id="dbea41b7c43466c55dd2b996566fee674e7b5333" translate="yes" xml:space="preserve">
          <source>Directive 'EQU' assigns the constant value resulting from the
evaluation of 'EXPRESSION' (see
&lt;a href=&quot;#operand-expressions&quot;&gt;Operand Expressions&lt;/a&gt;
below) to the text label 'LABEL'.
LABEL must begin with one alphabetic character in the set [A-Z,a-z]
followed by any number of alphanumeric characters or underscores:
[A-Z,a-z,0-9,_].
EXPRESSION can contain any previously assigned labels, including
those pre-defined by the assembler (see
&lt;a href=&quot;#pre-defined-labels&quot;&gt;Pre-defined Labels&lt;/a&gt; below). For
compatibility with SpinASM, the order of 'EQU' and 'LABEL'
may be swapped. Examples:</source>
          <target state="translated">지시문 'EQU'는 'EXPRESSION'(아래 &lt;a href=&quot;#operand-expressions&quot;&gt;피연산자 표현식&lt;/a&gt; 참조) 평가 결과 상수 값 을 텍스트 레이블 'LABEL'에 할당합니다 . LABEL은 [AZ, az] 집합에서 하나의 알파벳 문자로 시작하고 그 뒤에 임의의 수의 영숫자 또는 밑줄이 와야합니다 : [AZ, az, 0-9, _]. EXPRESSION은 어셈블러에 의해 미리 정의 된 레이블을 포함하여 이전에 할당 된 레이블을 포함 할 수 있습니다 (아래의 &lt;a href=&quot;#pre-defined-labels&quot;&gt;미리 정의 된 레이블&lt;/a&gt; 참조). SpinASM과의 호환성을 위해 'EQU'와 'LABEL'의 순서를 바꿀 수 있습니다. 예 :</target>
        </trans-unit>
        <trans-unit id="41721b46c935a846931350e7352b7710e862c354" translate="yes" xml:space="preserve">
          <source>Download a copy of the &quot;Latest Python 3 Release&quot;
for Mac OS from
&lt;a href=&quot;https://www.python.org/downloads/mac-osx/&quot;&gt;python.org&lt;/a&gt;.
Install the package, then open a terminal and run:</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/downloads/mac-osx/&quot;&gt;python.org&lt;/a&gt; 에서 Mac OS 용 &quot;최신 Python 3 릴리스&quot;사본을 다운로드합니다 . 패키지를 설치 한 다음 터미널을 열고 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="49f271aec9724a50f0454fc472b14cdb5e292a3f" translate="yes" xml:space="preserve">
          <source>Download a copy of the &quot;Latest Python 3 Release&quot;
for Windows from
&lt;a href=&quot;https://www.python.org/downloads/windows/&quot;&gt;python.org&lt;/a&gt;.
Install the package, then open a command prompt and run:</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/downloads/windows/&quot;&gt;python.org&lt;/a&gt; 에서 Windows 용 &quot;최신 Python 3 릴리스&quot;사본을 다운로드합니다 . 패키지를 설치 한 다음 명령 프롬프트를 열고 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="de4220fdb0182aa7da594a113644b09248d85d1a" translate="yes" xml:space="preserve">
          <source>EQU does not generate any code in the program, it merely reserves
the name for subsequent use. The parser evaluates all expressions
in-place so a label must be declared before it is used:</source>
          <target state="translated">EQU는 프로그램에서 코드를 생성하지 않고 나중에 사용하기 위해 이름을 예약 할뿐입니다. 파서는 모든 식을 제자리에서 평가하므로 레이블을 사용하기 전에 선언해야합니다.</target>
        </trans-unit>
        <trans-unit id="851b62a4a956f8e504bc0306ed9e9c79f1daf953" translate="yes" xml:space="preserve">
          <source>EXPRESSION must define an integer number of samples
or a parse error will be generated:</source>
          <target state="translated">EXPRESSION은 정수 수의 샘플을 정의해야합니다. 그렇지 않으면 구문 분석 오류가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="19771a5dba11cfc6e77ac3cf69851d498b639708" translate="yes" xml:space="preserve">
          <source>Each operand must evaluate to a single constant numeric
value. The sizes and types are specific to each instruction
(see &lt;a href=&quot;#instruction-reference&quot;&gt;Instruction Reference&lt;/a&gt; below).</source>
          <target state="translated">각 피연산자는 단일 상수 숫자 값으로 평가되어야합니다. 크기와 유형은 각 명령어에 따라 다릅니다 (아래 &lt;a href=&quot;#instruction-reference&quot;&gt;명령어 참조&lt;/a&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>
        </trans-unit>
        <trans-unit id="cc7fcc876f9917fb41fc13cdb64f30e7231d1654" translate="yes" xml:space="preserve">
          <source>FREQUENCY coefficient is related to LFO rate (f) in Hz
by the following:</source>
          <target state="translated">FREQUENCY 계수는 다음과 같이 Hz 단위의 LFO 속도 (f)와 관련됩니다.</target>
        </trans-unit>
        <trans-unit id="68445055cbf04b6836db4d53f076f683e30ffea2" translate="yes" xml:space="preserve">
          <source>FREQUENCY may be entered using a real value, which has the same
interpretation as the RMPx_RATE register.</source>
          <target state="translated">FREQUENCY는 RMPx_RATE 레지스터와 동일한 해석을 갖는 실제 값을 사용하여 입력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f711ba9b88ed8962c0249aad0208dd695a73e28" translate="yes" xml:space="preserve">
          <source>FV-1 disassembler: &lt;a href=&quot;https://github.com/ndf-zz/disfv1&quot;&gt;https://github.com/ndf-zz/disfv1&lt;/a&gt;</source>
          <target state="translated">FV-1 디스어셈블러 : &lt;a href=&quot;https://github.com/ndf-zz/disfv1&quot;&gt;https://github.com/ndf-zz/disfv1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8bffe2ff2667bd0db4e4763321b669440e2c9701" translate="yes" xml:space="preserve">
          <source>FV-1 test suite: &lt;a href=&quot;https://github.com/ndf-zz/fv1testing&quot;&gt;https://github.com/ndf-zz/fv1testing&lt;/a&gt;</source>
          <target state="translated">FV-1 테스트 스위트 : &lt;a href=&quot;https://github.com/ndf-zz/fv1testing&quot;&gt;https://github.com/ndf-zz/fv1testing&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e7efbe8f7d662f532cf238be6dc5c87df40b8a65" translate="yes" xml:space="preserve">
          <source>Fixed Point Conversion</source>
          <target state="translated">고정 소수점 변환</target>
        </trans-unit>
        <trans-unit id="2a476f86875fb2b5839b81f4968c0e87deb18e61" translate="yes" xml:space="preserve">
          <source>Flags:</source>
          <target state="translated">플래그 :</target>
        </trans-unit>
        <trans-unit id="557f497162c70673d26739ff8fe39805eb743dce" translate="yes" xml:space="preserve">
          <source>Floating point number</source>
          <target state="translated">부동 소수점 수</target>
        </trans-unit>
        <trans-unit id="dd3385a9c9b9ce6961f9f69465dacb88871dab7b" translate="yes" xml:space="preserve">
          <source>Floating point number with exponent</source>
          <target state="translated">지수가있는 부동 소수점 숫자</target>
        </trans-unit>
        <trans-unit id="bd742b31828c5b9349d3bd8ec133683ca6fa2cfc" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;example.asm&quot;&gt;example&lt;/a&gt;:</source>
          <target state="translated">에 대한 &lt;a href=&quot;example.asm&quot;&gt;예&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="d0be35d63325643411b7a10e82df7c7dff8db12a" translate="yes" xml:space="preserve">
          <source>For example, the following entries all generate the same
code:</source>
          <target state="translated">예를 들어 다음 항목은 모두 동일한 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3437cc61ced1acbbcc0c2b0430071be9d90be791" translate="yes" xml:space="preserve">
          <source>For instructions that require fixed-point real values as
input, asfv1 automatically converts real expression results
from an intermediate floating-point value to the nearest
equivalent signed fixed-point integer. This value is then
masked to the correct number of bits and placed in machine
code. The conversion is performed for all types by computing
the multiplication:</source>
          <target state="translated">입력으로 고정 소수점 실수 값이 필요한 명령어의 경우 asfv1은 중간 부동 소수점 값의 실수 식 결과를 가장 가까운 해당 부호있는 고정 소수점 정수로 자동 변환합니다. 이 값은 올바른 비트 수로 마스킹되고 기계어 코드에 배치됩니다. 변환은 곱셈을 계산하여 모든 유형에 대해 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="6a1240e6923ed2530432c2977852fb6b64193497" translate="yes" xml:space="preserve">
          <source>For more detailed information, please refer to the
&lt;a href=&quot;https://packaging.python.org/tutorials/installing-packages/&quot;&gt;Python package installation documentation&lt;/a&gt;
and
&lt;a href=&quot;https://packaging.python.org/guides/installing-using-linux-tools/#installing-pip-setuptools-wheel-with-linux-package-managers&quot;&gt;installing pip with packaging managers&lt;/a&gt;
at
&lt;a href=&quot;https://packaging.python.org/&quot;&gt;packaging.python.org&lt;/a&gt;.</source>
          <target state="translated">더 자세한 내용을 참조하시기 바랍니다 &lt;a href=&quot;https://packaging.python.org/tutorials/installing-packages/&quot;&gt;파이썬 패키지 설치 설명서&lt;/a&gt; 및 &lt;a href=&quot;https://packaging.python.org/guides/installing-using-linux-tools/#installing-pip-setuptools-wheel-with-linux-package-managers&quot;&gt;관리자를 포장에 설치 핍&lt;/a&gt; 에서 &lt;a href=&quot;https://packaging.python.org/&quot;&gt;packaging.python.org&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="de6f2d7c6da3bb62d0803b152f7a6295a2b62e50" translate="yes" xml:space="preserve">
          <source>For system-specific installation instructions see
&lt;a href=&quot;#system-specific-installation&quot;&gt;System Specific Installation&lt;/a&gt;
below.</source>
          <target state="translated">시스템 별 설치 지침은 아래의 &lt;a href=&quot;#system-specific-installation&quot;&gt;시스템 별 설치를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">함수</target>
        </trans-unit>
        <trans-unit id="aad1d85277d1cea3d7a00b4d96bebd4c9fdcf277" translate="yes" xml:space="preserve">
          <source>General purpose registers</source>
          <target state="translated">범용 레지스터</target>
        </trans-unit>
        <trans-unit id="a327830b751daa8cc04e259e9a1cb1d71dad481d" translate="yes" xml:space="preserve">
          <source>Hexadecimal integer</source>
          <target state="translated">16 진 정수</target>
        </trans-unit>
        <trans-unit id="c33e96efbc2cde0c32bef65a21e18d8a26b1d527" translate="yes" xml:space="preserve">
          <source>If the result of the expression is a complex number, or if the
expression cannot be evaluated, a parse error is generated:</source>
          <target state="translated">표현식의 결과가 복소수이거나 표현식을 평가할 수없는 경우 구문 분석 오류가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="96d2d5ee34cac26491ea09c3b01a3d19b6168866" translate="yes" xml:space="preserve">
          <source>If you would prefer to not use pip, or if your system is provided with
and older version of Python (eg MacOS), asfv1 can be installed using
the included setup.py script. Fetch a copy of the latest source package,
unpack it and then run the installer as root:</source>
          <target state="translated">pip를 사용하지 않으려는 경우 또는 시스템에 이전 버전의 Python (예 : MacOS)이 제공되는 경우 포함 된 setup.py 스크립트를 사용하여 asfv1을 설치할 수 있습니다. 최신 소스 패키지의 복사본을 가져 와서 압축을 푼 다음 설치 프로그램을 루트로 실행합니다.</target>
        </trans-unit>
        <trans-unit id="54c8f9c48d0793e4a6b0d32753b2b9fab9eec38d" translate="yes" xml:space="preserve">
          <source>Install from Source</source>
          <target state="translated">소스에서 설치</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="b644099295fe9f1ccc8a999cd5f987dea8465380" translate="yes" xml:space="preserve">
          <source>Instruction Reference</source>
          <target state="translated">명령어 참조</target>
        </trans-unit>
        <trans-unit id="ed58f29743f8e14b9c8e13d41e070a1cc1d1c9f5" translate="yes" xml:space="preserve">
          <source>Instructions</source>
          <target state="translated">명령</target>
        </trans-unit>
        <trans-unit id="fbf136f4d51c9df2e36e22ae74ed2280a3a8f46b" translate="yes" xml:space="preserve">
          <source>Jump Targets</source>
          <target state="translated">점프 타겟</target>
        </trans-unit>
        <trans-unit id="a5ef26cbbdcaab34f6fd6d43420129684c6f5814" translate="yes" xml:space="preserve">
          <source>Jump targets label a particular address in the program output
and can be placed between instructions anywhere in a source file.
A jump target is a text label followed by a colon ':' character:</source>
          <target state="translated">점프 대상은 프로그램 출력의 특정 주소에 레이블을 지정하고 소스 파일의 어느 위치에서나 명령어 사이에 배치 할 수 있습니다. 점프 대상은 콜론 ':'문자가 뒤에 오는 텍스트 레이블입니다.</target>
        </trans-unit>
        <trans-unit id="18aa07671b23d17332a4998f5375d1947d255042" translate="yes" xml:space="preserve">
          <source>LABEL has the same requirements as for &lt;a href=&quot;#label-assignment&quot;&gt;EQU&lt;/a&gt;, and
the assigned labels can be used in any expression. Eg:</source>
          <target state="translated">LABEL에는 &lt;a href=&quot;#label-assignment&quot;&gt;EQU&lt;/a&gt; 와 동일한 요구 사항이 있으며 지정된 레이블은 모든 표현식에서 사용할 수 있습니다. 예 :</target>
        </trans-unit>
        <trans-unit id="cccf447123b9ec5d934f9616f6500cf48d4bac96" translate="yes" xml:space="preserve">
          <source>LFO</source>
          <target state="translated">LFO</target>
        </trans-unit>
        <trans-unit id="c99e9301f7e72355f4e2c08806ea1e8b9be914e1" translate="yes" xml:space="preserve">
          <source>LFO may also be set using pre-defined labels RMP0 and RMP1.</source>
          <target state="translated">LFO는 미리 정의 된 레이블 RMP0 및 RMP1을 사용하여 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="5897977bbd01337ac54af715ba158ecdb0ac1402" translate="yes" xml:space="preserve">
          <source>LFO,FREQUENCY,AMPLITUDE</source>
          <target state="translated">LFO, FREQUENCY, AMPLITUDE</target>
        </trans-unit>
        <trans-unit id="74341e3c271df3c784e595b804b1f90be0f80429" translate="yes" xml:space="preserve">
          <source>Label</source>
          <target state="translated">상표</target>
        </trans-unit>
        <trans-unit id="02f0324a1893d0867639930ee9f0ad67d2324878" translate="yes" xml:space="preserve">
          <source>Label Assignment</source>
          <target state="translated">라벨 할당</target>
        </trans-unit>
        <trans-unit id="fbdd3ef53399ae2a93b8c6cafecc0db71920909c" translate="yes" xml:space="preserve">
          <source>Labels, mnemonics and operators are matched case insensitively:</source>
          <target state="translated">레이블, 니모닉 및 연산자는 대소 문자를 구분하지 않고 일치합니다.</target>
        </trans-unit>
        <trans-unit id="28bd1eaba6f16b71c89d310f8615da7eb82c697a" translate="yes" xml:space="preserve">
          <source>Left AD input register</source>
          <target state="translated">왼쪽 AD 입력 레지스터</target>
        </trans-unit>
        <trans-unit id="6fe18cd5610528e90adc2703c2fec78f34ea374e" translate="yes" xml:space="preserve">
          <source>Left DA output register</source>
          <target state="translated">왼쪽 DA 출력 레지스터</target>
        </trans-unit>
        <trans-unit id="014bcd654c60d5250fad2123b073b9c0ac3340f6" translate="yes" xml:space="preserve">
          <source>Links</source>
          <target state="translated">연결</target>
        </trans-unit>
        <trans-unit id="92a57df7b1a07b22a5ad127e89e826242496ced6" translate="yes" xml:space="preserve">
          <source>Linux with apt (Debian, Ubuntu)</source>
          <target state="translated">apt가있는 Linux (Debian, Ubuntu)</target>
        </trans-unit>
        <trans-unit id="56b4b97132c40150ac7f62aced728116b27e3ff2" translate="yes" xml:space="preserve">
          <source>Linux with dnf (Fedora 22)</source>
          <target state="translated">dnf가있는 Linux (Fedora 22)</target>
        </trans-unit>
        <trans-unit id="c01908087a35cbb8e2160d5fa1b2c088766a1ae0" translate="yes" xml:space="preserve">
          <source>Linux with yum (Fedora 21)</source>
          <target state="translated">yum이있는 Linux (Fedora 21)</target>
        </trans-unit>
        <trans-unit id="92e97e035f44f8980e413b0d3167603ea36902ee" translate="yes" xml:space="preserve">
          <source>Literal</source>
          <target state="translated">오자</target>
        </trans-unit>
        <trans-unit id="5531491f5b8e6bc173a46c70ff2ed5e7b51b469f" translate="yes" xml:space="preserve">
          <source>MULTIPLER</source>
          <target state="translated">멀티 플러</target>
        </trans-unit>
        <trans-unit id="0097a3d31422ab11eaae8c087d1f093c3396543a" translate="yes" xml:space="preserve">
          <source>MULTIPLIER,OFFSET</source>
          <target state="translated">배수, 오프셋</target>
        </trans-unit>
        <trans-unit id="49cf4e4ec38d75934b482917e0a5eca13051425d" translate="yes" xml:space="preserve">
          <source>MacOS</source>
          <target state="translated">맥 OS</target>
        </trans-unit>
        <trans-unit id="01d08489f5668b1b6413b9e3b0de0aa343db69ce" translate="yes" xml:space="preserve">
          <source>Make sure your system has a python interpreter
(preferably python3), then install from the
&lt;a href=&quot;https://pypi.org/&quot;&gt;Python Package Index&lt;/a&gt;
using the
&lt;a href=&quot;https://pip.pypa.io/en/stable/&quot;&gt;pip&lt;/a&gt;
command:</source>
          <target state="translated">시스템에 python 인터프리터 (가급적이면 python3)가 있는지 확인한 다음 &lt;a href=&quot;https://pip.pypa.io/en/stable/&quot;&gt;pip&lt;/a&gt; 명령을 사용하여 &lt;a href=&quot;https://pypi.org/&quot;&gt;Python 패키지 색인&lt;/a&gt; 에서 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="38b88ba291aedc801f0cf1ace141ae388b9947cc" translate="yes" xml:space="preserve">
          <source>Memory Allocation</source>
          <target state="translated">메모리 할당</target>
        </trans-unit>
        <trans-unit id="b71ea4271623571d93012b79a6fecee594749af0" translate="yes" xml:space="preserve">
          <source>Mnemonic</source>
          <target state="translated">니모닉</target>
        </trans-unit>
        <trans-unit id="89dad2c8d0d652778713676e7869a4ddc0798df0" translate="yes" xml:space="preserve">
          <source>More formally, a valid operand expression matches the
following grammar:</source>
          <target state="translated">보다 공식적으로 유효한 피연산자 표현식은 다음 문법과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="920542d2b67389079a0e37931f7f5272756c2837" translate="yes" xml:space="preserve">
          <source>Multiply ACC by coeff (LFO), and add OFFSET.</source>
          <target state="translated">ACC에 coeff (LFO)를 곱하고 오프셋을 더합니다.</target>
        </trans-unit>
        <trans-unit id="b0f328dbd70bf63836366e7aeba9ed73efe9a48c" translate="yes" xml:space="preserve">
          <source>Multiply ACC by the content of REGISTER.</source>
          <target state="translated">ACC에 REGISTER의 내용을 곱하십시오.</target>
        </trans-unit>
        <trans-unit id="fe611126d130355f26eeef6908decc71df64a260" translate="yes" xml:space="preserve">
          <source>Multiply and accumulate a sample from delay memory.</source>
          <target state="translated">지연 메모리에서 샘플을 곱하고 누적합니다.</target>
        </trans-unit>
        <trans-unit id="29f484c3bb1b1cd8655a0b99ca8128ddbf786944" translate="yes" xml:space="preserve">
          <source>Multiply and accumulate a sample from the delay memory, using
the contents of ADDR_PTR as the delay address.</source>
          <target state="translated">ADDR_PTR의 내용을 지연 주소로 사용하여 지연 메모리에서 샘플을 곱하고 누적합니다.</target>
        </trans-unit>
        <trans-unit id="e4792987523bf78a0f3f69d9f470f880bf3260e8" translate="yes" xml:space="preserve">
          <source>Multiply and accumulate contents of register.</source>
          <target state="translated">레지스터의 내용을 곱하고 누적합니다.</target>
        </trans-unit>
        <trans-unit id="295fc9620aa67e6f4e02bb20e17e496035fcddb4" translate="yes" xml:space="preserve">
          <source>No operation, equivalent to skp 0,0. Use for padding, or blocking.</source>
          <target state="translated">작업 없음, skp 0,0과 동일합니다. 패딩 또는 차단에 사용합니다.</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">노트</target>
        </trans-unit>
        <trans-unit id="83423c198b6099edba08f185f940042d5dba3b79" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">노트 :</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">노트:</target>
        </trans-unit>
        <trans-unit id="acd2081fe0965992b6934d49ae30eed38ac749e0" translate="yes" xml:space="preserve">
          <source>OFFSET</source>
          <target state="translated">오프셋</target>
        </trans-unit>
        <trans-unit id="0225aeb035096bc825abcb8cdd15fc68374fbaf6" translate="yes" xml:space="preserve">
          <source>OFFSET is input as a real S_10 value, however it represents
an S4_6 offset of the accumulator, which is in S4_19 after the log.</source>
          <target state="translated">OFFSET은 실제 S_10 값으로 입력되지만 누적 기의 S4_6 오프셋을 나타내며 로그 이후 S4_19에 있습니다.</target>
        </trans-unit>
        <trans-unit id="fcf1dd01a14b693cab600488814107bf41ed0150" translate="yes" xml:space="preserve">
          <source>Only COS flag has any affect on the instruction, and only when used with
SIN LFO.</source>
          <target state="translated">COS 플래그 만 명령어에 영향을 미치며 SIN LFO와 함께 사용될 때만 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="9ec80808498b31eca05bbb567ad0d6128ac3a1da" translate="yes" xml:space="preserve">
          <source>Operand Expressions</source>
          <target state="translated">피연산자 식</target>
        </trans-unit>
        <trans-unit id="c649050e02a0cf309f41ddab4b607b1b288ddf06" translate="yes" xml:space="preserve">
          <source>Operand expressions are any valid combination
of labels, numbers, parentheses and the following
operators, listed from highest to lowest precedence. Operators
on the same line have the same precedence, and are evaluated
left to right - except for '**' (power) which works
&lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#the-power-operator&quot;&gt;as in the python intepreter&lt;/a&gt;.</source>
          <target state="translated">피연산자 식은 가장 높은 우선 순위에서 가장 낮은 우선 순위로 나열된 레이블, 숫자, 괄호 및 다음 연산자의 유효한 조합입니다. 같은 줄의 연산자는 동일한 우선 순위를 가지며 &lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#the-power-operator&quot;&gt;python intepreter 에서처럼&lt;/a&gt; 작동하는 '**'(power)를 제외하고 왼쪽에서 오른쪽으로 평가 됩니다.</target>
        </trans-unit>
        <trans-unit id="a2b8c4621b34e3c27498c6c8832719e530f09634" translate="yes" xml:space="preserve">
          <source>Operands</source>
          <target state="translated">피연산자</target>
        </trans-unit>
        <trans-unit id="d0e687b079fb70f2208d1f8d2c75d64d74925496" translate="yes" xml:space="preserve">
          <source>Operator</source>
          <target state="translated">운영자</target>
        </trans-unit>
        <trans-unit id="457cd8af7fb8c0d4f1f7ae48dae40d5174e811c2" translate="yes" xml:space="preserve">
          <source>POT0 input register</source>
          <target state="translated">POT0 입력 레지스터</target>
        </trans-unit>
        <trans-unit id="bfef288a843f02b5f7f4adc3a699e3994e4233b9" translate="yes" xml:space="preserve">
          <source>POT1 input register</source>
          <target state="translated">POT1 입력 레지스터</target>
        </trans-unit>
        <trans-unit id="60f499c26a9303ab82eb0a27c6c421feba694e3f" translate="yes" xml:space="preserve">
          <source>POT2 input register</source>
          <target state="translated">POT2 입력 레지스터</target>
        </trans-unit>
        <trans-unit id="9d1798eaf24d187d499a6af69e92bda2edc1bbe2" translate="yes" xml:space="preserve">
          <source>Perform a bitwise AND of ACC and VALUE</source>
          <target state="translated">ACC 및 VALUE의 비트 AND 수행</target>
        </trans-unit>
        <trans-unit id="f1b1c5ad7bf949b118d164bd5146f11dee90eb5a" translate="yes" xml:space="preserve">
          <source>Perform a bitwise AND of ACC with zero - clearing ACC</source>
          <target state="translated">0으로 ACC의 비트 AND 수행-ACC 지우기</target>
        </trans-unit>
        <trans-unit id="9868d821833b910beedb91041d3e61ea37f2579c" translate="yes" xml:space="preserve">
          <source>Perform a bitwise OR of ACC and VALUE</source>
          <target state="translated">ACC 및 VALUE의 비트 단위 OR 수행</target>
        </trans-unit>
        <trans-unit id="194393976bb707e9a77c683c56e237790f8b4e7e" translate="yes" xml:space="preserve">
          <source>Perform a bitwise XOR of ACC and VALUE</source>
          <target state="translated">ACC 및 VALUE의 비트 단위 XOR 수행</target>
        </trans-unit>
        <trans-unit id="71538e0fa7d7d5be888955ed1b87304de0e49531" translate="yes" xml:space="preserve">
          <source>Perform a bitwise negation of ACC by XOR with 0xffffff.</source>
          <target state="translated">0xffffff를 사용하여 XOR에 의해 ACC의 비트 부정을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="ee3f49a8c4831ffb66a3b1a7a47181aa90dd3a3b" translate="yes" xml:space="preserve">
          <source>Perform an unconditional skip over OFFSET instructions.</source>
          <target state="translated">OFFSET 명령을 무조건 건너 뛰십시오.</target>
        </trans-unit>
        <trans-unit id="61de963235da34773132a1269f8b3ce92e3eb820" translate="yes" xml:space="preserve">
          <source>Pre-defined Labels</source>
          <target state="translated">사전 정의 된 레이블</target>
        </trans-unit>
        <trans-unit id="39a4ee10bd42c302625e3992c2d16f8dafac71fe" translate="yes" xml:space="preserve">
          <source>Pre-defined labels may be re-defined within a source file,
however, the re-defined value only applies to label references
&lt;em&gt;following&lt;/em&gt; the assignment. Any re-definition will issue a
warning message:</source>
          <target state="translated">미리 정의 된 레이블은 소스 파일 내에서 다시 정의 할 수 있지만 다시 정의 된 값 은 할당 &lt;em&gt;이후&lt;/em&gt; 의 레이블 참조에만 적용됩니다 . 다시 정의하면 경고 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="1e8ad03ca0dc47294fb559fe77125bf34ab86a44" translate="yes" xml:space="preserve">
          <source>Python &amp;gt;= 2.6</source>
          <target state="translated">파이썬&amp;gt; = 2.6</target>
        </trans-unit>
        <trans-unit id="213c13e6b5a4931545743927d872efac404caae5" translate="yes" xml:space="preserve">
          <source>REG flag must be set in order to get a meaningful value in ACC
value (this is the default if FLAGS are omitted)</source>
          <target state="translated">ACC 값에서 의미있는 값을 얻으려면 REG 플래그를 설정해야합니다 (FLAGS가 생략 된 경우 기본값).</target>
        </trans-unit>
        <trans-unit id="0391d22030d151810e0289d21e824870455953f6" translate="yes" xml:space="preserve">
          <source>REGISTER</source>
          <target state="translated">레지스터</target>
        </trans-unit>
        <trans-unit id="970a5b131c691b66b50009f442203c8518086048" translate="yes" xml:space="preserve">
          <source>REGISTER,MULTIPLIER</source>
          <target state="translated">등록, 배수</target>
        </trans-unit>
        <trans-unit id="7d5402987914000eaf2c3aa4224692fff8083667" translate="yes" xml:space="preserve">
          <source>RMP0 LFO selector</source>
          <target state="translated">RMP0 LFO 선택기</target>
        </trans-unit>
        <trans-unit id="7175bb2e696accc41275b65304d8f89f69cf225a" translate="yes" xml:space="preserve">
          <source>RMP0 range control register</source>
          <target state="translated">RMP0 범위 제어 레지스터</target>
        </trans-unit>
        <trans-unit id="53688e3819c96eab74ed7691da65e485c5c7b452" translate="yes" xml:space="preserve">
          <source>RMP0 rate control register</source>
          <target state="translated">RMP0 속도 제어 레지스터</target>
        </trans-unit>
        <trans-unit id="c157fe25d25f6c5c84925330b84239bbf4df3782" translate="yes" xml:space="preserve">
          <source>RMP1 LFO selector</source>
          <target state="translated">RMP1 LFO 선택기</target>
        </trans-unit>
        <trans-unit id="6f05a394ac3d3651e15528fab722b2e678549a6f" translate="yes" xml:space="preserve">
          <source>RMP1 range control register</source>
          <target state="translated">RMP1 범위 제어 레지스터</target>
        </trans-unit>
        <trans-unit id="c3b5e4d717fdc0d49f87149ce23067201f2e4596" translate="yes" xml:space="preserve">
          <source>RMP1 rate control register</source>
          <target state="translated">RMP1 속도 제어 레지스터</target>
        </trans-unit>
        <trans-unit id="fe8e14cb1d88eb0df5a9287005a97f36fa06de4e" translate="yes" xml:space="preserve">
          <source>Raise 2 to the power of ACC, multiply and add OFFSET.
Input ACC is S4_16, result ACC is S_23.</source>
          <target state="translated">2를 ACC의 거듭 제곱으로 올리고 곱하고 오프셋을 더합니다. 입력 ACC는 S4_16이고 결과 ACC는 S_23입니다.</target>
        </trans-unit>
        <trans-unit id="e00e92ac6a7b65d3cef8a91c6bcf4165af24669f" translate="yes" xml:space="preserve">
          <source>Re-defining an already assigned label is allowed, but will generate
a warning message:</source>
          <target state="translated">이미 할당 된 레이블을 다시 정의 할 수 있지만 다음과 같은 경고 메시지가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="08061e80fa0d7da0ac709514363efcf6f27cc2c7" translate="yes" xml:space="preserve">
          <source>Read from delay memory at ADDRESS + offset (LFO) according to
FLAGS, multiply the result by coeff (LFO) and accumulate.</source>
          <target state="translated">FLAGS에 따라 ADDRESS + 오프셋 (LFO)에서 지연 메모리에서 읽고 결과에 coeff (LFO)를 곱한 다음 누적합니다.</target>
        </trans-unit>
        <trans-unit id="346089a801dafe8912d13cbec4ff8d12c3f16849" translate="yes" xml:space="preserve">
          <source>Read the specified LFO address offset value into ACC
according to optional FLAGS. If FLAGS are omitted, a default
value of REG (0x2) is assembled.</source>
          <target state="translated">선택적 FLAGS에 따라 지정된 LFO 주소 오프셋 값을 ACC로 읽어옵니다. FLAGS가 생략되면 기본값 REG (0x2)가 조합됩니다.</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">요구 사항</target>
        </trans-unit>
        <trans-unit id="afc35311c30745428892af41e83c4fef205edaa8" translate="yes" xml:space="preserve">
          <source>Reset specified ramp LFO to start.</source>
          <target state="translated">시작하려면 지정된 램프 LFO를 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="e87606a109516b699a410a9cf16cc41e511d4d05" translate="yes" xml:space="preserve">
          <source>Right AD input register</source>
          <target state="translated">오른쪽 AD 입력 레지스터</target>
        </trans-unit>
        <trans-unit id="8a8c9d0c8faf0ae77ba59e9c85a092b79fbcc134" translate="yes" xml:space="preserve">
          <source>Right DA output register</source>
          <target state="translated">오른쪽 DA 출력 레지스터</target>
        </trans-unit>
        <trans-unit id="5ce16a22a906415917dafb79244fa5bab3d07bc4" translate="yes" xml:space="preserve">
          <source>SIN0 LFO selector</source>
          <target state="translated">SIN0 LFO 선택기</target>
        </trans-unit>
        <trans-unit id="f8cf78e9a503712ccf6f4260c4c337a7b34c9be9" translate="yes" xml:space="preserve">
          <source>SIN0 range control register</source>
          <target state="translated">SIN0 범위 제어 레지스터</target>
        </trans-unit>
        <trans-unit id="6286fd8286e21410ce45fad31c645c42478678a1" translate="yes" xml:space="preserve">
          <source>SIN0 rate control register</source>
          <target state="translated">SIN0 속도 제어 레지스터</target>
        </trans-unit>
        <trans-unit id="9e3b0a4a77164535fea22ae28352adacc10a0f45" translate="yes" xml:space="preserve">
          <source>SIN1 LFO selector</source>
          <target state="translated">SIN1 LFO 선택기</target>
        </trans-unit>
        <trans-unit id="4422e4e27a118c64be5976dc5c10c464f54ad8fe" translate="yes" xml:space="preserve">
          <source>SIN1 range control register</source>
          <target state="translated">SIN1 범위 제어 레지스터</target>
        </trans-unit>
        <trans-unit id="f83975b48c63ce444bda694d3187078bc17d17ea" translate="yes" xml:space="preserve">
          <source>SIN1 rate control register</source>
          <target state="translated">SIN1 속도 제어 레지스터</target>
        </trans-unit>
        <trans-unit id="6b811b2b3bba1b8d8c921965d28ee424e5acd38a" translate="yes" xml:space="preserve">
          <source>SKP condition flag</source>
          <target state="translated">SKP 조건 플래그</target>
        </trans-unit>
        <trans-unit id="38737adebb51a23528edc9199d3be3a51d8c4553" translate="yes" xml:space="preserve">
          <source>Scale ACC and then add an offset.</source>
          <target state="translated">ACC를 스케일링 한 다음 오프셋을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="27647cb355df6d657afa9b9da136599d007bcac6" translate="yes" xml:space="preserve">
          <source>Skip over OFFSET instructions if all flagged CONDITIONS are met.</source>
          <target state="translated">플래그가 지정된 모든 CONDITIONS가 충족되면 OFFSET 명령을 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="bce3505acb407f23528d66359275a791e9fab669" translate="yes" xml:space="preserve">
          <source>Spin FV-1 website: &lt;a href=&quot;http://spinsemi.com/products.html&quot;&gt;http://spinsemi.com/products.html&lt;/a&gt;</source>
          <target state="translated">Spin FV-1 웹 사이트 : &lt;a href=&quot;http://spinsemi.com/products.html&quot;&gt;http://spinsemi.com/products.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9287e3139d179d9e7d433797a74d7282a99afa27" translate="yes" xml:space="preserve">
          <source>Subtract register content from ACC, multiply and add to register content.</source>
          <target state="translated">ACC에서 등록 내용을 빼고 곱하여 등록 내용에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="137236bc41131a66d6fc31906bafe729512f4c7c" translate="yes" xml:space="preserve">
          <source>System Specific Installation</source>
          <target state="translated">시스템 별 설치</target>
        </trans-unit>
        <trans-unit id="8b95338880f7b6882fc754b8e114b1d04d13131d" translate="yes" xml:space="preserve">
          <source>TYPE,LFO,FLAGS,ADDRESS</source>
          <target state="translated">유형, LFO, 플래그, 주소</target>
        </trans-unit>
        <trans-unit id="92ac3a653c830fba57d32e89b16fb996c43af56f" translate="yes" xml:space="preserve">
          <source>Target labels are not assigned values until parsing is complete
and they can only be used as a destination for a
&lt;a href=&quot;#skp-conditions-offset&quot;&gt;skip instruction&lt;/a&gt;. For example,
the following attempt to offset from a target generates a
parse error:</source>
          <target state="translated">대상 레이블에는 구문 분석이 완료 될 때까지 값이 할당되지 않으며 &lt;a href=&quot;#skp-conditions-offset&quot;&gt;건너 뛰기 명령&lt;/a&gt; 의 대상으로 만 사용할 수 있습니다 . 예를 들어 다음과 같은 대상에서 오프셋을 시도하면 구문 분석 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="db7cba0761083263b77646b3cd08ee6a5256964d" translate="yes" xml:space="preserve">
          <source>The assembler keeps track of allocated memory, placing each new
segment immediately after those previously defined. Each segment
with a delay of LENGTH, will consume LENGTH+1 samples of memory.
An attempt to use more than the available space will trigger
a parse error:</source>
          <target state="translated">어셈블러는 할당 된 메모리를 추적하여 각 새 세그먼트를 이전에 정의 된 세그먼트 바로 뒤에 배치합니다. LENGTH 지연이있는 각 세그먼트는 LENGTH + 1 메모리 샘플을 소비합니다. 사용 가능한 공간보다 더 많이 사용하려고하면 구문 분석 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6cb1d83c18ec1d92201488bd5cf986c257947fd0" translate="yes" xml:space="preserve">
          <source>The caret character '^' is also used in expressions as
the bitwise XOR operator, so expressions which reference
a delay may need to be explicitly parenthesised if used with '^':</source>
          <target state="translated">캐럿 문자 '^'는 비트 별 XOR 연산자로도 표현식에서 사용되므로 지연을 참조하는 표현식은 '^'와 함께 사용하는 경우 명시 적으로 괄호로 묶어야 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a46cbf585e2f657ef02d9fdc97682dd0d73629b2" translate="yes" xml:space="preserve">
          <source>The final value of an expression will be either an
integer, which is used for the instruction operand
unchanged or a floating point value which is later converted
to the closest fixed-point integer of the required size
(see &lt;a href=&quot;#fixed-point-conversion&quot;&gt;Fixed Point Conversion&lt;/a&gt; below).
The unary &lt;code&gt;int&lt;/code&gt; operator will force a floating-point value
to be rounded and converted to the nearest integer:</source>
          <target state="translated">표현식의 최종 값은 변경되지 않은 명령어 피연산자에 사용되는 정수이거나 나중에 필요한 크기의 가장 가까운 고정 소수점 정수로 변환되는 부동 소수점 값입니다 (아래 &lt;a href=&quot;#fixed-point-conversion&quot;&gt;고정 소수점 변환&lt;/a&gt; 참조). 단항 &lt;code&gt;int&lt;/code&gt; 연산자는 부동 소수점 값을 반올림하고 가장 가까운 정수로 변환하도록 강제합니다.</target>
        </trans-unit>
        <trans-unit id="aa9c86a283d08a5408dd24e7ad93d5c61e8b87f5" translate="yes" xml:space="preserve">
          <source>The following numeric entry formats are recognised:</source>
          <target state="translated">다음 숫자 입력 형식이 인식됩니다.</target>
        </trans-unit>
        <trans-unit id="7173b0dff4d9f85f0bd770775179b6a9fb1be120" translate="yes" xml:space="preserve">
          <source>The following text labels are pre-defined by asfv1.
Refer to the FV-1 datasheet for information on the
function of registers.</source>
          <target state="translated">다음 텍스트 레이블은 asfv1에 의해 미리 정의됩니다. 레지스터 기능에 대한 정보는 FV-1 데이터 시트를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2ffd2cffed726b970fda36e853e1fde3b5f6584f" translate="yes" xml:space="preserve">
          <source>The frequency and amplitude of RMP LFOs can also be set
by writing to registers: RMP0_RATE, RMP0_RANGE, RMP1_RATE,
and RMP1_RANGE.</source>
          <target state="translated">RMP LFO의 주파수와 진폭은 RMP0_RATE, RMP0_RANGE, RMP1_RATE 및 RMP1_RANGE 레지스터에 기록하여 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0586703d36ae69f441cfaa6b602afdc7ebd32c7d" translate="yes" xml:space="preserve">
          <source>The frequency and amplitude of SIN LFOs can also be set
by writing to registers: SIN0_RATE, SIN0_RANGE, SIN1_RATE,
and SIN1_RANGE.</source>
          <target state="translated">SIN LFO의 주파수 및 진폭은 SIN0_RATE, SIN0_RANGE, SIN1_RATE 및 SIN1_RANGE 레지스터에 기록하여 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6aebe54abadfd9132e08c8698f462611905beae2" translate="yes" xml:space="preserve">
          <source>The preferred method for installation is to use your system's
packaged pip3 command to fetch and install asfv1 from
&lt;a href=&quot;https://pypi.org/&quot;&gt;PyPi&lt;/a&gt; and set it up to work with a python3
interpreter.</source>
          <target state="translated">선호하는 설치 방법은 시스템의 패키지 pip3 명령을 사용하여 PyPi에서 &lt;a href=&quot;https://pypi.org/&quot;&gt;asfv1&lt;/a&gt; 을 가져와 설치 하고 python3 인터프리터와 함께 작동하도록 설정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e6fbb690789d2b48598b8a8c103bba860cc7e675" translate="yes" xml:space="preserve">
          <source>To achieve the desired if/else behaviour, use a second target:</source>
          <target state="translated">원하는 if / else 동작을 얻으려면 두 번째 대상을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e2bfa5f0f11a600c3ad6b7ecadef9c5c3799798c" translate="yes" xml:space="preserve">
          <source>To force computation of an offset, wrap an expression in parentheses:</source>
          <target state="translated">오프셋 계산을 강제하려면 표현식을 괄호로 묶습니다.</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">유형</target>
        </trans-unit>
        <trans-unit id="1fb0ae8ab6393d4be53bb10279b28ace4e4feef7" translate="yes" xml:space="preserve">
          <source>U32</source>
          <target state="translated">U32</target>
        </trans-unit>
        <trans-unit id="38dc5661c6b817289e67d0c0a55b832581e612db" translate="yes" xml:space="preserve">
          <source>Use of an already defined label for a target will result in a parse error:</source>
          <target state="translated">대상에 대해 이미 정의 된 레이블을 사용하면 구문 분석 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7dc10180b878fd7bd185c2d6a23c0519a292a3a0" translate="yes" xml:space="preserve">
          <source>VALUE</source>
          <target state="translated">값</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">값</target>
        </trans-unit>
        <trans-unit id="926689f748cab1fa5d8f8ad932632e3bb0c6298a" translate="yes" xml:space="preserve">
          <source>When assembled with asfv1, the resulting machine code contains
9 instructions and padding with NOP instructions:</source>
          <target state="translated">asfv1로 어셈블하면 결과 기계어 코드에는 9 개의 명령어와 NOP 명령어가있는 패딩이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="d43146aec0cde90ea991a49cc79e12decbd4f8d6" translate="yes" xml:space="preserve">
          <source>Where Fs is the sample rate. For a 32768Hz crystal, the SIN
LFO ranges from 0Hz up to about 20Hz.</source>
          <target state="translated">여기서 Fs는 샘플 속도입니다. 32768Hz 크리스탈의 경우 SIN LFO의 범위는 0Hz에서 최대 약 20Hz입니다.</target>
        </trans-unit>
        <trans-unit id="c3613360018cf5bb015f16ab47cde06b77db68c0" translate="yes" xml:space="preserve">
          <source>Where REFERENCE is the equivalent integer value of +1.0 in the
desired number format and floating is the saturated intermediate
floating-point value. The following table lists the sizes and range
of each of the FV-1 number formats.</source>
          <target state="translated">REFERENCE는 원하는 숫자 형식에서 +1.0의 동등한 정수 값이고 floating은 포화 된 중간 부동 소수점 값입니다. 다음 표에는 각 FV-1 숫자 형식의 크기와 범위가 나열되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="895877b1d1d57546d782d28581bda58674cb92c2" translate="yes" xml:space="preserve">
          <source>Where label is a text label, and literal is a number. Expressions
are parsed and evaluated in-place by asfv1. All labels must be defined
before they are referenced in an expression.</source>
          <target state="translated">여기서 label은 텍스트 레이블이고 literal은 숫자입니다. 식은 asfv1에 의해 제자리에서 구문 분석되고 평가됩니다. 모든 레이블은 표현식에서 참조되기 전에 정의되어야합니다.</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">윈도우</target>
        </trans-unit>
        <trans-unit id="1b5a2b1a10636232a8f12160dbc581f5666964a8" translate="yes" xml:space="preserve">
          <source>Write ACC to delay memory and scale by multiplier.</source>
          <target state="translated">ACC를 작성하여 메모리를 지연시키고 승수로 확장합니다.</target>
        </trans-unit>
        <trans-unit id="7745e76a26f0f582c686c2b437b79bc46e16567e" translate="yes" xml:space="preserve">
          <source>Write ACC to delay memory, multiply ACC, add to LR and save to ACC.</source>
          <target state="translated">ACC를 작성하여 메모리를 지연하고, ACC를 곱하고, LR에 추가하고 ACC에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="83f21a26aeecfa65a27fabb01ee0f76221922422" translate="yes" xml:space="preserve">
          <source>absa</source>
          <target state="translated">absa</target>
        </trans-unit>
        <trans-unit id="0ebb5dc583904054689e1e97ae7910c394b6f728" translate="yes" xml:space="preserve">
          <source>add, subtract</source>
          <target state="translated">더하기, 빼기</target>
        </trans-unit>
        <trans-unit id="c615632d3b49a5689b87d2b697c5b49d6cd3aac4" translate="yes" xml:space="preserve">
          <source>adjust RMP LFO</source>
          <target state="translated">RMP LFO 조정</target>
        </trans-unit>
        <trans-unit id="8f7c85bddf09df518a1442e350320f5de9aa553a" translate="yes" xml:space="preserve">
          <source>ajdust SIN LFO</source>
          <target state="translated">ajdust SIN LFO</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">과</target>
        </trans-unit>
        <trans-unit id="dfab0a4596429199759464e00ec033cc64c0f207" translate="yes" xml:space="preserve">
          <source>and VALUE</source>
          <target state="translated">및 VALUE</target>
        </trans-unit>
        <trans-unit id="98377f32035cbd9b0b9615763f2dcb2e2b2c7fb6" translate="yes" xml:space="preserve">
          <source>asfv1</source>
          <target state="translated">asfv1</target>
        </trans-unit>
        <trans-unit id="4945c4adda759fe0b697ba8b79a8e8ef1bdb4d52" translate="yes" xml:space="preserve">
          <source>asfv1 reads a single FV-1 DSP program then parses and assembles it.
If no errors are encountered, machine code is written to an output
file. If the output filename ends with 'hex', an Intel hex
encoded output is produced, otherwise raw binary data is written.</source>
          <target state="translated">asfv1은 단일 FV-1 DSP 프로그램을 읽은 다음이를 구문 분석하고 어셈블합니다. 오류가 발생하지 않으면 기계 코드가 출력 파일에 기록됩니다. 출력 파일 이름이 'hex'로 끝나면 Intel 16 진수로 인코딩 된 출력이 생성되고 그렇지 않으면 원시 바이너리 데이터가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="4ba5b46e332d373dfdfa248036598eb70f831d32" translate="yes" xml:space="preserve">
          <source>bitwise AND</source>
          <target state="translated">비트 AND</target>
        </trans-unit>
        <trans-unit id="7d5bb4d1e43ddd2b7554d5d7d0b44fa8e15c9b68" translate="yes" xml:space="preserve">
          <source>bitwise OR</source>
          <target state="translated">비트 OR</target>
        </trans-unit>
        <trans-unit id="8f0757e0ba4c22c9e209a79597f6b1dc188081e0" translate="yes" xml:space="preserve">
          <source>bitwise XOR</source>
          <target state="translated">비트 XOR</target>
        </trans-unit>
        <trans-unit id="58fa9fa3278b2361be05277d5e9dd98593c3df2b" translate="yes" xml:space="preserve">
          <source>bitwise and</source>
          <target state="translated">비트와</target>
        </trans-unit>
        <trans-unit id="54f081f21259306944e162381a84d0a6f88843f2" translate="yes" xml:space="preserve">
          <source>bitwise negation</source>
          <target state="translated">비트 부정</target>
        </trans-unit>
        <trans-unit id="f0faffaa3b66bcdae910f95bcb520a7ec69bc284" translate="yes" xml:space="preserve">
          <source>bitwise or</source>
          <target state="translated">비트 또는</target>
        </trans-unit>
        <trans-unit id="430f75a4a995f280ecd1ccb3750d2dc39f262168" translate="yes" xml:space="preserve">
          <source>bitwise xor</source>
          <target state="translated">비트 xor</target>
        </trans-unit>
        <trans-unit id="5a6e35513b298a4bdbb35e96a6004049179a0d1c" translate="yes" xml:space="preserve">
          <source>cho</source>
          <target state="translated">초</target>
        </trans-unit>
        <trans-unit id="3e8e9b7600789a586f81220b4c4ab1d90f4733e8" translate="yes" xml:space="preserve">
          <source>cho rda, LFO, FLAGS, ADDRESS</source>
          <target state="translated">cho rda, LFO, 플래그, 주소</target>
        </trans-unit>
        <trans-unit id="d6565b6e673a64ce57c7be6b1a5a817db0503acc" translate="yes" xml:space="preserve">
          <source>cho rdal, LFO [, FLAGS]</source>
          <target state="translated">cho rdal, LFO [, FLAGS]</target>
        </trans-unit>
        <trans-unit id="e53f4c1285972bab9766a194a348a07dfb949c13" translate="yes" xml:space="preserve">
          <source>cho sof, LFO, FLAGS, OFFSET</source>
          <target state="translated">초 sof, LFO, 플래그, 오프셋</target>
        </trans-unit>
        <trans-unit id="f339198ab6682d008199b083b86aa501b16faf63" translate="yes" xml:space="preserve">
          <source>clear ACC</source>
          <target state="translated">클리어 ACC</target>
        </trans-unit>
        <trans-unit id="01448dce316546e14132fcf8b9b84764eabe0194" translate="yes" xml:space="preserve">
          <source>clr</source>
          <target state="translated">clr</target>
        </trans-unit>
        <trans-unit id="32d4313c6ec5f14b1049b6521472865ec7722f49" translate="yes" xml:space="preserve">
          <source>coeff (LFO) is an interpolation coefficient, based on flag settings
and the LFO fine position between whole samples</source>
          <target state="translated">coeff (LFO)는 플래그 설정과 전체 샘플 간의 LFO 미세 위치를 기반으로하는 보간 계수입니다.</target>
        </trans-unit>
        <trans-unit id="86b77de2442fe05048f19c766138a551aa2543be" translate="yes" xml:space="preserve">
          <source>exp</source>
          <target state="translated">특급</target>
        </trans-unit>
        <trans-unit id="327643ed4241f14a652ada477aad01b2394c64e5" translate="yes" xml:space="preserve">
          <source>exp MULTIPLIER, OFFSET</source>
          <target state="translated">exp 배수, 오프셋</target>
        </trans-unit>
        <trans-unit id="fed1bfa4c671ae98df3118382a5b62f380b5070e" translate="yes" xml:space="preserve">
          <source>flags that are not relevant for the chosen LFO or cho mode are ignored</source>
          <target state="translated">선택한 LFO 또는 cho 모드와 관련이없는 플래그는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="e96e2736de2e41829054c75ab54c92c1c616b00f" translate="yes" xml:space="preserve">
          <source>if OFFSET starts with a label, it is assumed to be a jump target,
which should be present later in the program. An attempt to skip
backward will raise an error:</source>
          <target state="translated">OFFSET이 레이블로 시작하면 점프 대상으로 간주되며 나중에 프로그램에 있어야합니다. 뒤로 건너 뛰려고하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="906c7e6df9992b4ac1927236c514c7139b247e0e" translate="yes" xml:space="preserve">
          <source>if mutually exclusive conditions are specified, the skip is
assembled but never performed, turning the instruction into NOP:</source>
          <target state="translated">상호 배타적 인 조건이 지정되면 건너 뛰기가 어셈블되지만 수행되지 않고 명령이 NOP로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="3bb07c99cbf7e803e06f34808ac5c86fb82fe0c1" translate="yes" xml:space="preserve">
          <source>if no condition flags are set, the skip is always performed.</source>
          <target state="translated">조건 플래그가 설정되지 않은 경우 항상 건너 뛰기가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="3bc47effbf7c8ed326cd895e773a01ee43e893a8" translate="yes" xml:space="preserve">
          <source>insert U32 opcode</source>
          <target state="translated">U32 opcode 삽입</target>
        </trans-unit>
        <trans-unit id="cfc1fcd638ef9cb99ac4add6a35eb6d3fcad4e22" translate="yes" xml:space="preserve">
          <source>interpolated memory access</source>
          <target state="translated">보간 된 메모리 액세스</target>
        </trans-unit>
        <trans-unit id="da3dd5c2657fecad769c041097dbd8ecd725687d" translate="yes" xml:space="preserve">
          <source>jam</source>
          <target state="translated">잼</target>
        </trans-unit>
        <trans-unit id="01f68a702d720ee13ffb2e5108f6cd0bec001ee9" translate="yes" xml:space="preserve">
          <source>jam LFO</source>
          <target state="translated">잼 LFO</target>
        </trans-unit>
        <trans-unit id="98d863a1af321279a71c64d885297ebde7961059" translate="yes" xml:space="preserve">
          <source>jmp</source>
          <target state="translated">jmp</target>
        </trans-unit>
        <trans-unit id="95d7bbfb99a3493e669a42ddf90fe916bd09fafd" translate="yes" xml:space="preserve">
          <source>jmp OFFSET</source>
          <target state="translated">jmp 오프셋</target>
        </trans-unit>
        <trans-unit id="9ad28503abea22a3eedd41e6ee5a729019b8799c" translate="yes" xml:space="preserve">
          <source>jmp is assembled as skp 0,OFFSET. See skp above for details on
specifying jmp targets.</source>
          <target state="translated">jmp는 skp 0, OFFSET로 어셈블됩니다. jmp 대상 지정에 대한 자세한 내용은 위의 skp를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2354accd18c597cb458c19e72f6b353340afcd40" translate="yes" xml:space="preserve">
          <source>jump offset instructions</source>
          <target state="translated">점프 오프셋 지침</target>
        </trans-unit>
        <trans-unit id="5ebb005d3e799bba10d8e8d630e8865a5c1f6aaa" translate="yes" xml:space="preserve">
          <source>ldax</source>
          <target state="translated">ldax</target>
        </trans-unit>
        <trans-unit id="9a523b788305339910a5bdaa74a14c4d5b0254b1" translate="yes" xml:space="preserve">
          <source>ldax REGISTER</source>
          <target state="translated">ldax 등록</target>
        </trans-unit>
        <trans-unit id="494234b922468e03bff6d7982ba251fb0a3ebd08" translate="yes" xml:space="preserve">
          <source>load (*REGISTER)</source>
          <target state="translated">로드 (* REGISTER)</target>
        </trans-unit>
        <trans-unit id="9d3345bc855b8828b5565c9d0fdddc9c754fa512" translate="yes" xml:space="preserve">
          <source>load absolute value of ACC</source>
          <target state="translated">ACC의 절대 값로드</target>
        </trans-unit>
        <trans-unit id="c80e9fb0b4c7c9ebd1838ac8c281a2a80deec961" translate="yes" xml:space="preserve">
          <source>load maximum of absolute values</source>
          <target state="translated">최대 절대 값로드</target>
        </trans-unit>
        <trans-unit id="7babc233de26ab19ead1b9c278128d5c434910ee" translate="yes" xml:space="preserve">
          <source>log</source>
          <target state="translated">로그</target>
        </trans-unit>
        <trans-unit id="38bb2ea00989e66ba82099a1977b13355eb640c2" translate="yes" xml:space="preserve">
          <source>log MULTIPLIER, OFFSET</source>
          <target state="translated">로그 배수, 오프셋</target>
        </trans-unit>
        <trans-unit id="3016d9b68ab0a6c4d6c5828370ffdfeaaa62ee8d" translate="yes" xml:space="preserve">
          <source>log2(ACC), multiply and offset</source>
          <target state="translated">log2 (ACC), 곱하기 및 오프셋</target>
        </trans-unit>
        <trans-unit id="121e052239ebfff0d4d02ba17fd1eee2796794d3" translate="yes" xml:space="preserve">
          <source>maxx</source>
          <target state="translated">maxx</target>
        </trans-unit>
        <trans-unit id="a3de1a46a8feefcf93c0bdef7205bf690a2b139d" translate="yes" xml:space="preserve">
          <source>maxx REGISTER, MULTIPLIER</source>
          <target state="translated">maxx 레지스터, 배수</target>
        </trans-unit>
        <trans-unit id="69af606107c6e92f53a2963a8ede739dee38c93f" translate="yes" xml:space="preserve">
          <source>multiply (*REGISTER) and accumulate</source>
          <target state="translated">곱하기 (* REGISTER) 및 누적</target>
        </trans-unit>
        <trans-unit id="f4fe3f1f74d3bb07ddf787fb569fec71a4057a05" translate="yes" xml:space="preserve">
          <source>multiply and offset</source>
          <target state="translated">곱하기 및 오프셋</target>
        </trans-unit>
        <trans-unit id="de6bafd4a13bfc8fb3745f885b1f6b7beb72353f" translate="yes" xml:space="preserve">
          <source>multiply by (*REGISTER)</source>
          <target state="translated">(* REGISTER) 곱하기</target>
        </trans-unit>
        <trans-unit id="d77fa584ae164f1d644c5ce4c41d2a2d9f033ef4" translate="yes" xml:space="preserve">
          <source>multiply delay[(*ADDR_PTR)] and accumulate</source>
          <target state="translated">지연 [(* ADDR_PTR)] 곱하기 및 누적</target>
        </trans-unit>
        <trans-unit id="9e8d46843842f6d464ad3425f4c2b9553ccb1aa0" translate="yes" xml:space="preserve">
          <source>multiply delay[ADDRESS] and accumulate</source>
          <target state="translated">지연 [ADDRESS]을 곱하고 누적</target>
        </trans-unit>
        <trans-unit id="2ce4955f03d8a487f196b15c297df9d3076fd647" translate="yes" xml:space="preserve">
          <source>multiply, divide</source>
          <target state="translated">곱하기, 나누기</target>
        </trans-unit>
        <trans-unit id="5a289a1deb7d7f2dff7fac4d633cbbb259224d63" translate="yes" xml:space="preserve">
          <source>mulx</source>
          <target state="translated">mulx</target>
        </trans-unit>
        <trans-unit id="5f127fcb8770d64bbd107bbdd731d6966fa72fb6" translate="yes" xml:space="preserve">
          <source>mulx REGISTER</source>
          <target state="translated">mulx 등록</target>
        </trans-unit>
        <trans-unit id="d7d59fc38b8f5389bf8b2a255db92e025085cc9e" translate="yes" xml:space="preserve">
          <source>no operation</source>
          <target state="translated">작동하지 않음</target>
        </trans-unit>
        <trans-unit id="e3272363f7e59ddee3c6be2811f61d4e8fb3f002" translate="yes" xml:space="preserve">
          <source>nop</source>
          <target state="translated">아니</target>
        </trans-unit>
        <trans-unit id="557f255516719ea16f8f4a0aae1166054e2c9b43" translate="yes" xml:space="preserve">
          <source>not</source>
          <target state="translated">아니</target>
        </trans-unit>
        <trans-unit id="d3eb36598dd22c5a2dc7f56aabb3d75c15177b94" translate="yes" xml:space="preserve">
          <source>offset (LFO) is the coarse LFO delay offset, based on flag settings
to a whole sample</source>
          <target state="translated">오프셋 (LFO)은 전체 샘플에 대한 플래그 설정을 기반으로하는 대략적인 LFO 지연 오프셋입니다.</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">또는</target>
        </trans-unit>
        <trans-unit id="ceaa5d9f4f27bc4176783f22420ceff79db95759" translate="yes" xml:space="preserve">
          <source>or VALUE</source>
          <target state="translated">또는 VALUE</target>
        </trans-unit>
        <trans-unit id="b573f24e55d6b7547cb53bd67b8f50a5256006ff" translate="yes" xml:space="preserve">
          <source>power</source>
          <target state="translated">힘</target>
        </trans-unit>
        <trans-unit id="ce15802a8c5e8e9db0ffaf10130ef265296e9ea4" translate="yes" xml:space="preserve">
          <source>raw</source>
          <target state="translated">노골적인</target>
        </trans-unit>
        <trans-unit id="2e37dbddda79dec30d7de56b5fdac1f189ca2495" translate="yes" xml:space="preserve">
          <source>raw U32</source>
          <target state="translated">원시 U32</target>
        </trans-unit>
        <trans-unit id="a050a31ff21b2016683b1fc8420afd353550b596" translate="yes" xml:space="preserve">
          <source>rda</source>
          <target state="translated">rda</target>
        </trans-unit>
        <trans-unit id="cb3143ff20c209c7cbc29ecb03df65ea59e478e6" translate="yes" xml:space="preserve">
          <source>rda ADDRESS, MULTIPLIER</source>
          <target state="translated">rda 주소, 배수</target>
        </trans-unit>
        <trans-unit id="7fcfb1e9aaa3b3b1d81352a23dc1209728e4b09a" translate="yes" xml:space="preserve">
          <source>rdax</source>
          <target state="translated">rdax</target>
        </trans-unit>
        <trans-unit id="4aa1fdd2dcdbeb4358ee46f3f8d2644ea4812675" translate="yes" xml:space="preserve">
          <source>rdax REGISTER, MULTIPLIER</source>
          <target state="translated">rdax 레지스터, 배수</target>
        </trans-unit>
        <trans-unit id="fc8b0445926ddd7c025770a4ef9bfd3487b8ed20" translate="yes" xml:space="preserve">
          <source>rdfx</source>
          <target state="translated">rdfx</target>
        </trans-unit>
        <trans-unit id="ab53e71dcffe7ccb20fa6c6a1546e81a1ece4cb3" translate="yes" xml:space="preserve">
          <source>rdfx REGISTER, MULTIPLIER</source>
          <target state="translated">rdfx 레지스터, 배수</target>
        </trans-unit>
        <trans-unit id="75e7bb2b2b687f6f97a6b0702fa2ba9eb2cfc854" translate="yes" xml:space="preserve">
          <source>reset LFO</source>
          <target state="translated">LFO 재설정</target>
        </trans-unit>
        <trans-unit id="ddc262f87c24a79beaa7b307da340c49ef2638dd" translate="yes" xml:space="preserve">
          <source>rmpa</source>
          <target state="translated">rmpa</target>
        </trans-unit>
        <trans-unit id="6af3115239e235c39ee55339d93fa283dee550fe" translate="yes" xml:space="preserve">
          <source>rmpa MULTIPLIER</source>
          <target state="translated">rmpa 배수</target>
        </trans-unit>
        <trans-unit id="141819045e4a71a8f7d2d18328d715703379d4ef" translate="yes" xml:space="preserve">
          <source>shift left, shift right</source>
          <target state="translated">왼쪽으로 이동, 오른쪽으로 이동</target>
        </trans-unit>
        <trans-unit id="37620c452d89ea26da9339c95f48586c445e0a92" translate="yes" xml:space="preserve">
          <source>skip offset instructions if all conditions met</source>
          <target state="translated">모든 조건이 충족되면 오프셋 명령을 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="08dd079c87e4b4697a3afe1e33023e87089a2b08" translate="yes" xml:space="preserve">
          <source>skp</source>
          <target state="translated">skp</target>
        </trans-unit>
        <trans-unit id="65caf6282820e1f5ce8024c2bbe2b1402d992093" translate="yes" xml:space="preserve">
          <source>skp CONDITIONS, OFFSET</source>
          <target state="translated">skp 조건, 오프셋</target>
        </trans-unit>
        <trans-unit id="ad3eaee2599a0ec424cc183bcb1f71c92e4cc8c8" translate="yes" xml:space="preserve">
          <source>sof</source>
          <target state="translated">sof</target>
        </trans-unit>
        <trans-unit id="0b6da161e05ac29b8e0585cbe476e1a1f1bc24e9" translate="yes" xml:space="preserve">
          <source>sof MULTIPLIER, OFFSET</source>
          <target state="translated">sof 배수, 오프셋</target>
        </trans-unit>
        <trans-unit id="e87e480643ec044be7bdec072524827cf1d7b4ab" translate="yes" xml:space="preserve">
          <source>subtract (*REGISTER), multiply and add (*REGISTER)</source>
          <target state="translated">빼기 (* REGISTER), 곱하기 및 더하기 (* REGISTER)</target>
        </trans-unit>
        <trans-unit id="507d08d7bc66bf5aff585e8e0a0a9c843c8ce413" translate="yes" xml:space="preserve">
          <source>the first use of cho in a program with any LFO must include the
REG flag in order to 'register' the LFO state and get valid data</source>
          <target state="translated">LFO가있는 프로그램에서 cho를 처음 사용하는 경우 LFO 상태를 '등록'하고 유효한 데이터를 얻으려면 REG 플래그를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="fd523cf4e4401ca8a2c023a260487ae2c56f010c" translate="yes" xml:space="preserve">
          <source>the maximum possible skip offset is 63, an error will be generated if
the named target is out of range:</source>
          <target state="translated">가능한 최대 건너 뛰기 오프셋은 63이며 명명 된 대상이 범위를 벗어나면 오류가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="8945955db880bdcef9252e92088adfeb8d55b411" translate="yes" xml:space="preserve">
          <source>unary plus, minus, invert bits, integer cast</source>
          <target state="translated">단항 더하기, 빼기, 비트 반전, 정수 캐스트</target>
        </trans-unit>
        <trans-unit id="73c1346ee52bf935e3f1154715537ecd5c68f5f0" translate="yes" xml:space="preserve">
          <source>valid for integers only</source>
          <target state="translated">정수에만 유효</target>
        </trans-unit>
        <trans-unit id="c288cb86b3c006206748b9358111942b800f776e" translate="yes" xml:space="preserve">
          <source>wldr</source>
          <target state="translated">wldr</target>
        </trans-unit>
        <trans-unit id="4d632bc1344897603a5472128f34c3e4a3ff982c" translate="yes" xml:space="preserve">
          <source>wldr LFO, FREQUENCY, AMPLITUDE</source>
          <target state="translated">wldr LFO, FREQUENCY, AMPLITUDE</target>
        </trans-unit>
        <trans-unit id="ce6da89a460002fc82002af45e1cc8d6635ef20b" translate="yes" xml:space="preserve">
          <source>wlds</source>
          <target state="translated">wlds</target>
        </trans-unit>
        <trans-unit id="f89693989e54ac729aa742559c1336ecceee22ae" translate="yes" xml:space="preserve">
          <source>wlds LFO, FREQUENCY, AMPLITUDE</source>
          <target state="translated">wlds LFO, FREQUENCY, AMPLITUDE</target>
        </trans-unit>
        <trans-unit id="34c87847be71fc9d9e10c66a1059bcf74fbc2512" translate="yes" xml:space="preserve">
          <source>wra</source>
          <target state="translated">wra</target>
        </trans-unit>
        <trans-unit id="4951f0b8e0a0636d8ee2f0a2e63aa5d14b7a7f77" translate="yes" xml:space="preserve">
          <source>wra ADDRESS, MULTIPLIER</source>
          <target state="translated">wra ADDRESS, MULTIPLIER</target>
        </trans-unit>
        <trans-unit id="f0cad97953dfb126d32dc160dbb2bbc326d2ec8d" translate="yes" xml:space="preserve">
          <source>wrap</source>
          <target state="translated">싸다</target>
        </trans-unit>
        <trans-unit id="0aade3ae861a6bfc0c8c1c3e935e99af36c66341" translate="yes" xml:space="preserve">
          <source>wrap ADDRESS, MULTIPLIER</source>
          <target state="translated">wrap ADDRESS, MULTIPLIER</target>
        </trans-unit>
        <trans-unit id="24ce59f90867b49902af2459b67d15854d80fa80" translate="yes" xml:space="preserve">
          <source>wrax</source>
          <target state="translated">Wrax</target>
        </trans-unit>
        <trans-unit id="5bc4fdec42942b7590f56900495743e01410c753" translate="yes" xml:space="preserve">
          <source>wrax REGISTER, MULTIPLIER</source>
          <target state="translated">wrax 레지스터, 배수</target>
        </trans-unit>
        <trans-unit id="5e7af6399e36ec9fbd4bd133b2f401a2a0f7b9b7" translate="yes" xml:space="preserve">
          <source>wrhx</source>
          <target state="translated">wrhx</target>
        </trans-unit>
        <trans-unit id="9e865335e72d3925cd6ac5d19bd58d148b3e2e15" translate="yes" xml:space="preserve">
          <source>wrhx REGISTER, MULTIPLIER</source>
          <target state="translated">wrhx 레지스터, 배수</target>
        </trans-unit>
        <trans-unit id="7834681dad4806f8ffa0662b0e7a74b190f138d7" translate="yes" xml:space="preserve">
          <source>write (*REGISTER) and highpass shelf</source>
          <target state="translated">쓰기 (* REGISTER) 및 고역 선반</target>
        </trans-unit>
        <trans-unit id="ac39db4c02a23046b2d18c012a6da201209ccea5" translate="yes" xml:space="preserve">
          <source>write (*REGISTER) and lowpass shelf</source>
          <target state="translated">쓰기 (* REGISTER) 및 저역 통과 선반</target>
        </trans-unit>
        <trans-unit id="c0b8dd6cfaf5d92a907b39f14b8e4bbc78965a7c" translate="yes" xml:space="preserve">
          <source>write (*REGISTER) and multiply</source>
          <target state="translated">쓰기 (* REGISTER) 및 곱하기</target>
        </trans-unit>
        <trans-unit id="99074607058176925afb0baf50f643139761e36c" translate="yes" xml:space="preserve">
          <source>write delay[ADDRESS] and multiply</source>
          <target state="translated">쓰기 지연 [ADDRESS] 및 곱하기</target>
        </trans-unit>
        <trans-unit id="ffb7fd1e9e17b1ef88a01c4b9923c326cae0de9d" translate="yes" xml:space="preserve">
          <source>write delay[ADDRESS], multiply and add LR</source>
          <target state="translated">쓰기 지연 [ADDRESS], 곱하기 및 LR 추가</target>
        </trans-unit>
        <trans-unit id="adb0c5da6379bb456a8ea5715ee6b6cce4f647c6" translate="yes" xml:space="preserve">
          <source>wrlx</source>
          <target state="translated">wrlx</target>
        </trans-unit>
        <trans-unit id="c9460c315574c630f3ece003840901e9a2c8a34f" translate="yes" xml:space="preserve">
          <source>wrlx REGISTER, MULTIPLIER</source>
          <target state="translated">wrlx 레지스터, 배수</target>
        </trans-unit>
        <trans-unit id="f1922a234bb92764a276a8524d28cdb446d3c7da" translate="yes" xml:space="preserve">
          <source>xor</source>
          <target state="translated">xor</target>
        </trans-unit>
        <trans-unit id="b0469f9f21426fd80eab3aa7ce94b113e4d34cc8" translate="yes" xml:space="preserve">
          <source>xor VALUE</source>
          <target state="translated">xor 값</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
