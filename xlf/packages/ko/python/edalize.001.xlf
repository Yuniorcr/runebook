<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/edalize/">
    <body>
      <group id="edalize">
        <trans-unit id="460a25395cb88a0253f6d94a6f6583cae534a278" translate="yes" xml:space="preserve">
          <source>, and then run it with a parameter to control simulated clock frequency.</source>
          <target state="translated">을 클릭 한 다음 시뮬레이션 된 클록 주파수를 제어하는 ​​매개 변수와 함께 실행합니다.</target>
        </trans-unit>
        <trans-unit id="7ebba9ffffc46e236ade83e935eeeffecf379455" translate="yes" xml:space="preserve">
          <source>.
Then there&amp;rsquo;s also a testbench called</source>
          <target state="translated">. 그런 다음이라는 테스트 벤치도 있습니다.</target>
        </trans-unit>
        <trans-unit id="711ee7f5712d24652b92979ccd38f348dc292e8f" translate="yes" xml:space="preserve">
          <source>.
You can get those files from &lt;a href=&quot;https://github.com/fusesoc/blinky&quot;&gt;blinky&lt;/a&gt; and for</source>
          <target state="translated">. 당신은에서 해당 파일을 얻을 수 있습니다 &lt;a href=&quot;https://github.com/fusesoc/blinky&quot;&gt;블링키&lt;/a&gt; 및 대한</target>
        </trans-unit>
        <trans-unit id="fce0ab600d2933e71f37fbd7146f9f6276bf9fb7" translate="yes" xml:space="preserve">
          <source>. Or we could skip it altogether, and the default value from the configure stage would be used. Let&amp;rsquo;s run with VCD logging enabled:</source>
          <target state="translated">. 또는 모두 건너 뛸 수 있으며 구성 단계의 기본값이 사용됩니다. VCD 로깅을 활성화하여 실행 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="b46348b8f3042b1dc57a3747afed967a17d80670" translate="yes" xml:space="preserve">
          <source>. The testbench also
has an option to enable waveform dumping by setting a plusarg called</source>
          <target state="translated">. 테스트 벤치는 또한 다음과 같은 plusarg를 설정하여 파형 덤프를 활성화하는 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a924ab25b49cb0b1c9aef2dcf934d461f944d61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edalize it, don&amp;rsquo;t criticize it!&lt;/strong&gt;&lt;strong&gt;Edalize it, and I will advertise it!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;그것을 Edalize, 그것을 비판하지 마십시오! &lt;/strong&gt;&lt;strong&gt;그것을 Edalize, 그리고 나는 그것을 광고 할 것이다!&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17ebf5e9417d20ad0829bbb4e65b8995ebad1a0c" translate="yes" xml:space="preserve">
          <source>All EDA tools such as Icarus, Yosys, ModelSim, Vivado, Verilator, GHDL, Quartus etc get input HDL files (Verilog and VHDL) and some tool-specific files (constraint files, memory initialization files, IP description files etc). Together with the files, perhaps a couple of Verilog `defines, some top-level parameters/generics or some tool-specific options are set. Once the configuration is done, a simulation model, netlist or FPGA image is built, and in the case of simulations, the model is also executed, maybe with some extra run-time parameters.</source>
          <target state="translated">Icarus, Yosys, ModelSim, Vivado, Verilator, GHDL, Quartus 등과 같은 모든 EDA 도구는 입력 HDL 파일 (Verilog 및 VHDL)과 일부 도구 별 파일 (제한 파일, 메모리 초기화 파일, IP 설명 파일 등)을 가져옵니다. 파일과 함께 Verilog`정의 몇 개, 최상위 매개 변수 / 제네릭 또는 도구 별 옵션이 설정됩니다. 구성이 완료되면 시뮬레이션 모델, 넷리스트 또는 FPGA 이미지가 빌드되고 시뮬레이션의 경우 모델도 실행됩니다. 추가 런타임 매개 변수가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f04346c9b14aa1e2dc53081a2b3b56dbf8aeac27" translate="yes" xml:space="preserve">
          <source>And finally run it, with our arguments. Some types of parameters (e.g. plusargs) are defined aat runtime, and at this point we can change their value by passing the name and new value to</source>
          <target state="translated">그리고 마지막으로 우리의 주장으로 그것을 실행하십시오. 일부 유형의 매개 변수 (예 : plusargs)는 런타임에 정의되며이 시점에서 이름과 새 값을 다음으로 전달하여 값을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67492b9b30fbd61b1d14fc098d280246e3a07208" translate="yes" xml:space="preserve">
          <source>And put it all into a single data structure together with some info about the toplevel and name for the project:</source>
          <target state="translated">그리고 프로젝트의 최상위 및 이름에 대한 정보와 함께 모든 것을 단일 데이터 구조에 넣습니다.</target>
        </trans-unit>
        <trans-unit id="f1e0d4f63ebd29901652b379795e0eb1dfcbd982" translate="yes" xml:space="preserve">
          <source>As you have seen, Edalize is an award-winning tool for interfacing EDA tools, so</source>
          <target state="translated">보시다시피 Edalize는 EDA 도구 인터페이스를위한 수상 경력에 빛나는 도구입니다.</target>
        </trans-unit>
        <trans-unit id="2d46c258895968d92747aca439c679856375f5a7" translate="yes" xml:space="preserve">
          <source>Assume we have a project that consists of a Verilog source file called</source>
          <target state="translated">Verilog 소스 파일로 구성된 프로젝트가 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="94d873bc74c843f84372114e02f7e3007c8e0f93" translate="yes" xml:space="preserve">
          <source>At this point, we still haven&amp;rsquo;t run the actual EDA tool and the files in the</source>
          <target state="translated">이 시점에서 우리는 여전히 실제 EDA 도구와 파일을 실행하지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="15355334677940ca226d6420d966d84c54348f3c" translate="yes" xml:space="preserve">
          <source>Build the simulation model:</source>
          <target state="translated">시뮬레이션 모델 구축 :</target>
        </trans-unit>
        <trans-unit id="b644287a00ccafd0b3c0c207a253072a29c74554" translate="yes" xml:space="preserve">
          <source>Create the directory and the project files:</source>
          <target state="translated">디렉토리와 프로젝트 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9dfe4884d89d809060eca3e9407cb552c62ceac9" translate="yes" xml:space="preserve">
          <source>Dread not! Edalize takes care of this for you. By telling Edalize what files you have, together with some info, what parametrization to use at compile- and run-time (e.g. plusargs, defines, generics, parameters), VPI library sources (when applicable) and any other tool-specific options not already mentioned, it will create the necessary project files and offer to build and run it for you.</source>
          <target state="translated">두려워 말라! Edalize가이 문제를 해결해드립니다. Edalize에 어떤 파일과 일부 정보, 컴파일 및 런타임에 사용할 매개 변수화 (예 : plusargs, 정의, 제네릭, 매개 변수), VPI 라이브러리 소스 (해당되는 경우) 및 기타 도구 별 옵션을 알려줍니다. 이미 언급했듯이 필요한 프로젝트 파일을 생성하고 빌드 및 실행을 제안합니다.</target>
        </trans-unit>
        <trans-unit id="3b38658d027fbfc3d86f3535f8eb739a9e46cb21" translate="yes" xml:space="preserve">
          <source>Edalize is a Python Library for interacting with EDA tools. It can create project files for supported tools and run them in batch or GUI mode (where supported).</source>
          <target state="translated">Edalize는 EDA 도구와 상호 작용하기위한 Python 라이브러리입니다. 지원되는 도구에 대한 프로젝트 파일을 만들고 배치 또는 GUI 모드 (지원되는 경우)에서 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ac5488e478b00139f53c29df69a5d1edac38a30" translate="yes" xml:space="preserve">
          <source>Edalize is a Python module. Then once downloaded we can install it with
following Python command:</source>
          <target state="translated">Edalize는 Python 모듈입니다. 그런 다음 다운로드가 완료되면 다음 Python 명령으로 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9717ffd1fd53971ac86bfb2c9c8e6183ee0164d4" translate="yes" xml:space="preserve">
          <source>Edalize is a Python tool, then we can run it inside a Python script file or
directly in the Python console.</source>
          <target state="translated">Edalize는 Python 도구이므로 Python 스크립트 파일 내에서 또는 Python 콘솔에서 직접 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b33fc087e3c60205a7d6b6e4d717734ee3ef727f" translate="yes" xml:space="preserve">
          <source>Edalize is a library for interfacing EDA tools, primarily for FPGA development</source>
          <target state="translated">Edalize는 주로 FPGA 개발을위한 EDA 도구 인터페이스 용 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="f5c724862c13cb0f32787f22eb025739a67f24e9" translate="yes" xml:space="preserve">
          <source>First we have to import Edalize objects:</source>
          <target state="translated">먼저 Edalize 개체를 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="0312f8c6ecf65ccaefe478d32a396d7fe11129b2" translate="yes" xml:space="preserve">
          <source>For a simulation, we want to use the two Verilog files, build it in a subdirectory called</source>
          <target state="translated">시뮬레이션을 위해 두 개의 Verilog 파일을 사용하고 다음과 같은 하위 디렉토리에 빌드합니다.</target>
        </trans-unit>
        <trans-unit id="5a3af79b01e7f107ad0671c6788a469b93f8e1ad" translate="yes" xml:space="preserve">
          <source>How to use it?</source>
          <target state="translated">사용 방법?</target>
        </trans-unit>
        <trans-unit id="5d28aa5c3f5f864624758280797d60a6e8cc60fb" translate="yes" xml:space="preserve">
          <source>Install it</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="2043ab103db471787545635670b5d2fe2a717c7d" translate="yes" xml:space="preserve">
          <source>It allows you to quickly switch tools, at least when it comes to simulators. This is highly useful to shake out tool-specific bugs, or just to let you work with your weapon of choice.</source>
          <target state="translated">최소한 시뮬레이터와 관련하여 도구를 빠르게 전환 할 수 있습니다. 이는 도구 별 버그를 제거하거나 선택한 무기로 작업 할 수 있도록하는 데 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="93fdcf91f5d1658bdfb8b7d5cec5025b2e8f589c" translate="yes" xml:space="preserve">
          <source>It can also be used to just get a quick template that you can open up in the tool&amp;rsquo;s GUI if there is such, and continue working from there.</source>
          <target state="translated">또한 도구의 GUI에서 열 수있는 빠른 템플릿을 얻고 거기에서 계속 작업하는 데 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c21332b6aa36f052e268b5595517058d4803f61f" translate="yes" xml:space="preserve">
          <source>It can be directly integrated as a library for your existing Python-powered HDL project, or can be used stand-alone (soon anyway) to feed Edalize from projects written in other languages.</source>
          <target state="translated">기존 Python 기반 HDL 프로젝트를위한 라이브러리로 직접 통합하거나, 다른 언어로 작성된 프로젝트에서 Edalize를 공급하기 위해 (곧) 독립형으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7eddbb861b4b6fcf0c38b112825f6b8e70df5ed7" translate="yes" xml:space="preserve">
          <source>Let Edalize know we intend to use Icarus Verilog for our simulation:</source>
          <target state="translated">시뮬레이션에 Icarus Verilog를 사용할 것임을 Edalize에 알립니다.</target>
        </trans-unit>
        <trans-unit id="2763a18ffbef7cdf00c67e62201bcd1b0a20ec23" translate="yes" xml:space="preserve">
          <source>Now it&amp;rsquo;s time to create an FPGA image instead</source>
          <target state="translated">이제 대신 FPGA 이미지를 생성 할 차례입니다.</target>
        </trans-unit>
        <trans-unit id="11deed86fd2ca82b1cc491dd4dd6d9896257c822" translate="yes" xml:space="preserve">
          <source>Now we need to get ourselves a backend object from Edalize:</source>
          <target state="translated">이제 Edalize에서 백엔드 객체를 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="c5569ecaac0adae33393fb4c716fbb49cd78e3cf" translate="yes" xml:space="preserve">
          <source>Ok, this sounds great. Now, how do I get started?</source>
          <target state="translated">좋습니다. 좋습니다. 이제 어떻게 시작합니까?</target>
        </trans-unit>
        <trans-unit id="81f306fa9f2104ad0970b13508e0d8ec5d3ba86b" translate="yes" xml:space="preserve">
          <source>See source code for further details.</source>
          <target state="translated">자세한 내용은 소스 코드를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ed8364e54c55a479b8e6f39bbb85b0323457d9d2" translate="yes" xml:space="preserve">
          <source>Tada! We have simulated. As an exercise, try to just change the tool variable to e.g. modelsim, xsim or any of the other simulators supported by Edalize and see if it works without any changes.</source>
          <target state="translated">타다! 우리는 시뮬레이션했습니다. 연습으로 도구 변수를 modelsim, xsim 또는 Edalize에서 지원하는 다른 시뮬레이터로 변경하고 변경없이 작동하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="2c673fad51e8998785267683a52f59a2fdc567f3" translate="yes" xml:space="preserve">
          <source>The design has a toplevel Verilog parameter with the name</source>
          <target state="translated">디자인에는 이름이있는 최상위 Verilog 매개 변수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a5f04cfa2646a6411b9bbce19d94ce63814c3f5" translate="yes" xml:space="preserve">
          <source>The os module is also required for this tutorial:</source>
          <target state="translated">이 자습서에는 os 모듈도 필요합니다.</target>
        </trans-unit>
        <trans-unit id="67a71057959242412a00f73a70c76871cc8fed7d" translate="yes" xml:space="preserve">
          <source>The thing is, all these tools are doing this in completely different ways and there&amp;rsquo;s generally no way to import configurations from one simulator to another.</source>
          <target state="translated">문제는 이러한 모든 도구가 완전히 다른 방식으로이를 수행하며 일반적으로 한 시뮬레이터에서 다른 시뮬레이터로 구성을 가져올 수있는 방법이 없다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="078e4dfbd491fda0f4db5a99e75dc67320474513" translate="yes" xml:space="preserve">
          <source>Then register the files to use:</source>
          <target state="translated">그런 다음 사용할 파일을 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="e4698f00fd38de3c922bfd483e8a1384f3d6f913" translate="yes" xml:space="preserve">
          <source>This will save you from having to deal with the boring stuff of interfacing the EDA tools yourself, while still have pretty much full power to set up the project the way you want.</source>
          <target state="translated">이렇게하면 EDA 도구를 인터페이스하는 지루한 작업을 직접 처리 할 필요가 없으며 원하는 방식으로 프로젝트를 설정할 수있는 거의 모든 권한을 확보 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd6cb77a0659a3d52a82d922b5fe57156ac08fa7" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s this?</source>
          <target state="translated">이게 뭐야?</target>
        </trans-unit>
        <trans-unit id="f464238dd5a91479083d9fcb05cf40b38119c8db" translate="yes" xml:space="preserve">
          <source>and a constraints file for synthesis called</source>
          <target state="translated">그리고 합성을위한 제약 파일은</target>
        </trans-unit>
        <trans-unit id="608cd7846c435ee24ae5d4b2f88f10126174e7ba" translate="yes" xml:space="preserve">
          <source>blinky.v</source>
          <target state="translated">blinky.v</target>
        </trans-unit>
        <trans-unit id="005630791c057cd51eb0c23ba1006266a3ae03a5" translate="yes" xml:space="preserve">
          <source>blinky_tb.v</source>
          <target state="translated">blinky_tb.v</target>
        </trans-unit>
        <trans-unit id="80754af91bfb6d1073585b046fe0a474ce868509" translate="yes" xml:space="preserve">
          <source>build</source>
          <target state="translated">짓다</target>
        </trans-unit>
        <trans-unit id="c7824641df903748e69482c26b0c53d7a0a633c7" translate="yes" xml:space="preserve">
          <source>clk_freq_hz</source>
          <target state="translated">clk_freq_hz</target>
        </trans-unit>
        <trans-unit id="e2e36f5eeec1dbfe424f52bd33380ad0559a3fa3" translate="yes" xml:space="preserve">
          <source>constraints.sdc</source>
          <target state="translated">constraints.sdc</target>
        </trans-unit>
        <trans-unit id="74bb2d76efbddcf927bd6676400e84db657b4f94" translate="yes" xml:space="preserve">
          <source>directory can be used without Edalize if that is preferred. But let&amp;rsquo;s continue the example with Edalize.</source>
          <target state="translated">선호하는 경우 Edalize없이 디렉토리를 사용할 수 있습니다. 그러나 Edalize로 예제를 계속합시다.</target>
        </trans-unit>
        <trans-unit id="00f90da41c1d2f1c4be8e728b74a058d3376c7de" translate="yes" xml:space="preserve">
          <source>in &lt;a href=&quot;https://github.com/fusesoc/vlog_tb_utils/blob/master/vlog_tb_utils.v&quot;&gt;orpsoc-cores&lt;/a&gt;.</source>
          <target state="translated">에서 &lt;a href=&quot;https://github.com/fusesoc/vlog_tb_utils/blob/master/vlog_tb_utils.v&quot;&gt;orpsoc 코어&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f805aaf52532959faf0be97c80abde3c8ae5e849" translate="yes" xml:space="preserve">
          <source>run()</source>
          <target state="translated">run()</target>
        </trans-unit>
        <trans-unit id="73b04c4cec8b01e3b9b12628278aefec0240da8c" translate="yes" xml:space="preserve">
          <source>that accepts integers. We set its default value to</source>
          <target state="translated">정수를 허용합니다. 기본값을</target>
        </trans-unit>
        <trans-unit id="d7176438bb72b4ae6b7444ccfa29af622f3c03c7" translate="yes" xml:space="preserve">
          <source>vcd</source>
          <target state="translated">vcd</target>
        </trans-unit>
        <trans-unit id="64ba003b5e80d6f16edae9f35c0c00aa7bc8c2c4" translate="yes" xml:space="preserve">
          <source>vlog_tb_utils.v</source>
          <target state="translated">vlog_tb_utils.v</target>
        </trans-unit>
        <trans-unit id="e4a8408776e5338937b198443915b8b72ba74261" translate="yes" xml:space="preserve">
          <source>work_root</source>
          <target state="translated">work_root</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
