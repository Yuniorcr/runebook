<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/dxpy/">
    <body>
      <group id="dxpy">
        <trans-unit id="b0596762c145e066c6b51d6b767aa76380933b34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dxpy.compat&lt;/code&gt; has some simple shims that mirror Python 3 builtins and redirect them to Python 2.7 equivalents when on 2.7. Most critically, &lt;code&gt;from dxpy.compat import str&lt;/code&gt; will import the &lt;code&gt;unicode&lt;/code&gt; builtin on 2.7 and the &lt;code&gt;str&lt;/code&gt; builtin on python 3. Use &lt;code&gt;str&lt;/code&gt; wherever you would have used &lt;code&gt;unicode&lt;/code&gt;. To convert unicode strings to bytes, use &lt;code&gt;.encode('utf-8')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dxpy.compat&lt;/code&gt; 에는 Python 3 내장 기능을 미러링하고 2.7에서 Python 2.7에 해당하는 것으로 리디렉션하는 몇 가지 간단한 shim이 있습니다. 비판적으로 대부분의 &lt;code&gt;from dxpy.compat import str&lt;/code&gt; 가져옵니다 &lt;code&gt;unicode&lt;/code&gt; 2.7에 내장하고, &lt;code&gt;str&lt;/code&gt; 파이썬 3. 사용에 내장 &lt;code&gt;str&lt;/code&gt; 을 당신이 사용했을 때마다 &lt;code&gt;unicode&lt;/code&gt; . 유니 코드 문자열을 바이트로 변환하려면 &lt;code&gt;.encode('utf-8')&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="674463a63b833f2ee17f1bbb198b28a2cbb90be6" translate="yes" xml:space="preserve">
          <source>API Documentation</source>
          <target state="translated">API 설명서</target>
        </trans-unit>
        <trans-unit id="9d914bfcf1c5bc9e6b83d3232349cae23d392f30" translate="yes" xml:space="preserve">
          <source>Building</source>
          <target state="translated">건물</target>
        </trans-unit>
        <trans-unit id="b6114911729017efbd5b9af9dce07a4c23db36c9" translate="yes" xml:space="preserve">
          <source>Code going into the Python codebase should be written in Python 3.5 style, and should be compatible with Python 2.7.  Python 2.7 support will end on March 1, 2021.</source>
          <target state="translated">Python 코드베이스에 들어가는 코드는 Python 3.5 스타일로 작성되어야하며 Python 2.7과 호환되어야합니다. Python 2.7 지원은 2021 년 3 월 1 일에 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="ca133fd5c5e719911f84f8857fafa733baf2d362" translate="yes" xml:space="preserve">
          <source>Conform to &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0008/&quot;&gt;PEP-8&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0008/&quot;&gt;PEP-8을&lt;/a&gt; 준수하십시오 .</target>
        </trans-unit>
        <trans-unit id="b48db00dda4f9932d6db2c22f755daa52ca0f246" translate="yes" xml:space="preserve">
          <source>Convention for Python scripts that are also modules</source>
          <target state="translated">모듈이기도 한 Python 스크립트에 대한 규칙</target>
        </trans-unit>
        <trans-unit id="ec1fb0e8927ceeec4b0942eccd8a0408b783ccb8" translate="yes" xml:space="preserve">
          <source>DNAnexus Platform API bindings for Python</source>
          <target state="translated">Python 용 DNAnexus 플랫폼 API 바인딩</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">디버깅</target>
        </trans-unit>
        <trans-unit id="cd8da1618ca623fabd2ab45706d2e10471d5cf77" translate="yes" xml:space="preserve">
          <source>Do not add module-level attributes into the API unless you are absolutely certain they will remain constants. For
example, do not declare an attribute &lt;code&gt;dxpy.foo&lt;/code&gt; (&lt;code&gt;dxpy._foo&lt;/code&gt; is OK), or any other non-private variable in the
global scope of any module. This is because unless the value is a constant, it may need to be updated by an
initialization method, which may need to run lazily to avoid side effects at module load time. Instead, use
accessor methods that can perform the updates at call time:</source>
          <target state="translated">모듈 수준 속성이 상수로 유지 될 것이라는 확신이 없으면 API에 모듈 수준 속성을 추가하지 마십시오. 예를 들어, &lt;code&gt;dxpy.foo&lt;/code&gt; 속성 ( &lt;code&gt;dxpy._foo&lt;/code&gt; 는 괜찮음 ) 또는 모듈의 전역 범위에서 다른 비 개인 변수를 선언하지 마십시오 . 이는 값이 상수가 아닌 경우 초기화 메서드로 업데이트해야 할 수 있으며, 모듈로드시 부작용을 방지하기 위해 느리게 실행되어야 할 수 있기 때문입니다. 대신 호출시 업데이트를 수행 할 수있는 접근 자 메서드를 사용하세요.</target>
        </trans-unit>
        <trans-unit id="48bad454c6ffe47f4ecda7d71d7322e78baada18" translate="yes" xml:space="preserve">
          <source>Do not introduce module import-time side effects.</source>
          <target state="translated">모듈 가져 오기 시간 부작용을 도입하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="8a47ccc86c9ce396d0477a87c93be5004af8c01a" translate="yes" xml:space="preserve">
          <source>Document your code in a format usable by &lt;a href=&quot;http://sphinx-doc.org/ext/autodoc.html&quot;&gt;Sphinx Autodoc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://sphinx-doc.org/ext/autodoc.html&quot;&gt;Sphinx Autodoc에서&lt;/a&gt; 사용할 수있는 형식으로 코드를 문서화합니다 .</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>
        </trans-unit>
        <trans-unit id="9574bdf222d001a672bb0cb713075c8aa7e9abe4" translate="yes" xml:space="preserve">
          <source>From the dx-toolkit root directory:</source>
          <target state="translated">dx-toolkit 루트 디렉토리에서 :</target>
        </trans-unit>
        <trans-unit id="df6dc1c127d48e12ba33f963b4a97a4123c19c67" translate="yes" xml:space="preserve">
          <source>Google Python style guide</source>
          <target state="translated">Google Python 스타일 가이드</target>
        </trans-unit>
        <trans-unit id="676aae763b35679dafb83babeb3b0af1ee3d90cf" translate="yes" xml:space="preserve">
          <source>Include in the script a top-level function called &lt;code&gt;main()&lt;/code&gt;, which should be the entry point processor, and
conclude the script with the following stanza:</source>
          <target state="translated">스크립트에 진입 점 프로세서 여야하는 &lt;code&gt;main()&lt;/code&gt; 이라는 최상위 함수 를 포함하고 다음 스탠자로 스크립트를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="9bbb422884602fb824c52d35b9991df366deb185" translate="yes" xml:space="preserve">
          <source>Install the script into &lt;code&gt;src/python/dxpy/scripts&lt;/code&gt; with a name like &lt;code&gt;dx_useful_script.py&lt;/code&gt;. This will allow
importing with &lt;code&gt;import dxpy.scripts.dx_useful_script&lt;/code&gt;.</source>
          <target state="translated">에 스크립트 설치 &lt;code&gt;src/python/dxpy/scripts&lt;/code&gt; 같은 이름으로 &lt;code&gt;dx_useful_script.py&lt;/code&gt; . 이렇게하면 &lt;code&gt;import dxpy.scripts.dx_useful_script&lt;/code&gt; 로 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6847eb5db3cd65637963e6462ef62d5860408a52" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;&amp;lt;iterator&amp;gt;.next()&lt;/code&gt;, use &lt;code&gt;next(&amp;lt;iterator&amp;gt;)&lt;/code&gt;.</source>
          <target state="translated">대신 &lt;code&gt;&amp;lt;iterator&amp;gt;.next()&lt;/code&gt; 사용 &lt;code&gt;next(&amp;lt;iterator&amp;gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d87395bd24dfae71341bb161aec261e609af2716" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;.iteritems()&lt;/code&gt;, use &lt;code&gt;.items()&lt;/code&gt;. If this is a performance concern on 2.7, introduce a shim in compat.py.</source>
          <target state="translated">&lt;code&gt;.iteritems()&lt;/code&gt; 대신 .items () 를 사용 &lt;code&gt;.items()&lt;/code&gt; . 이것이 2.7의 성능 문제라면 compat.py에 shim을 도입하십시오.</target>
        </trans-unit>
        <trans-unit id="d950a426d096d142582ebde191536d4f546f0d1e" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;StringIO.StringIO&lt;/code&gt;, use &lt;code&gt;from dxpy.compat import BytesIO&lt;/code&gt; (which is StringIO on 2.7).</source>
          <target state="translated">대신 &lt;code&gt;StringIO.StringIO&lt;/code&gt; 사용 &lt;code&gt;from dxpy.compat import BytesIO&lt;/code&gt; (2.7 StringIO입니다).</target>
        </trans-unit>
        <trans-unit id="63058301542c8898593ba52b2666bebe53887e8d" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;raw_input&lt;/code&gt;, use &lt;code&gt;from dxpy.compat import input&lt;/code&gt;.</source>
          <target state="translated">대신에 &lt;code&gt;raw_input&lt;/code&gt; 을 사용 &lt;code&gt;from dxpy.compat import input&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9767db1af382aebf46c922fd27a62bd8e9cd4af8" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;sort(x, cmp=lambda x, y: ...)&lt;/code&gt;, use &lt;code&gt;x=sorted(x, key=lambda x: ...)&lt;/code&gt;.</source>
          <target state="translated">대신 &lt;code&gt;sort(x, cmp=lambda x, y: ...)&lt;/code&gt; , 사용 &lt;code&gt;x=sorted(x, key=lambda x: ...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f6fd14051b354da983ecb8ff41200315d2637cb8" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;x.has_key(y)&lt;/code&gt;, use &lt;code&gt;y in x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x.has_key(y)&lt;/code&gt; 대신 &lt;code&gt;y in x&lt;/code&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4da9a8dd0a964c7b4b5b9579db1799552bca9008" translate="yes" xml:space="preserve">
          <source>Note: the install script will replace underscores in the name of your module with dashes in the name of the launcher
script.</source>
          <target state="translated">참고 : 설치 스크립트는 모듈 이름의 밑줄을 실행기 스크립트 이름의 대시로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="bfead3e178179210460f8bdeacc582f0d7e87b2c" translate="yes" xml:space="preserve">
          <source>Other useful resources:</source>
          <target state="translated">다른 유용한 자료들 :</target>
        </trans-unit>
        <trans-unit id="3f9c4cc3416e160b70e278e7d65e895425e00b6c" translate="yes" xml:space="preserve">
          <source>Python coding style</source>
          <target state="translated">파이썬 코딩 스타일</target>
        </trans-unit>
        <trans-unit id="a4a85c998ce2cd9c480982b861989d3ec8a40877" translate="yes" xml:space="preserve">
          <source>Python version compatibility</source>
          <target state="translated">Python 버전 호환성</target>
        </trans-unit>
        <trans-unit id="cb308f901972e30a32b76dd5739b0133d3919e62" translate="yes" xml:space="preserve">
          <source>Relax other PEP-8 requirements at your discretion if it simplifies code or is needed to follow conventions
established elsewhere at DNAnexus.</source>
          <target state="translated">코드를 단순화하거나 DNAnexus의 다른 곳에서 확립 된 규칙을 따르는 데 필요한 경우 재량에 따라 다른 PEP-8 요구 사항을 완화하십시오.</target>
        </trans-unit>
        <trans-unit id="50f12db3431b57bc4f594a7b08e6b221d7b2c023" translate="yes" xml:space="preserve">
          <source>Relax the line length requirement to 120 characters per line, where you judge readability not to be compromised.</source>
          <target state="translated">줄 길이 요구 사항을 줄당 120 자로 완화하여 가독성이 손상되지 않는다고 판단합니다.</target>
        </trans-unit>
        <trans-unit id="61d2d0023852329564fec4660e5224aaefa2cb92" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;pylint -E&lt;/code&gt; on your code before checking it in.</source>
          <target state="translated">체크인하기 전에 코드에서 &lt;code&gt;pylint -E&lt;/code&gt; 를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="b5fa648e852202d309e677a3f706c74539cac098" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;_DX_DEBUG&lt;/code&gt; environment variable to a positive integer before
running a dxpy-based program (such as &lt;code&gt;dx&lt;/code&gt;) to display the input and
output of each API call. Supported values are 1, 2, and 3 with
increasing numbers producing successively more verbose output.</source>
          <target state="translated">dxpy 기반 프로그램 (예 : &lt;code&gt;dx&lt;/code&gt; )을 실행하기 전에 &lt;code&gt;_DX_DEBUG&lt;/code&gt; 환경 변수를 양의 정수로 설정하여 각 API 호출의 입력 및 출력을 표시하십시오. 지원되는 값은 1, 2 및 3이며 숫자가 증가하면 연속적으로 더 자세한 출력이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="cf1a3d86a66060256044dfc0553a7c95fe6f6ce1" translate="yes" xml:space="preserve">
          <source>Some scripts, such as format converters, are useful both as standalone executables and as importable modules.</source>
          <target state="translated">형식 변환기와 같은 일부 스크립트는 독립 실행 형 실행 파일과 가져 오기 가능한 모듈로 모두 유용합니다.</target>
        </trans-unit>
        <trans-unit id="85268049c2c2bd779bf476064b4b122d429d0005" translate="yes" xml:space="preserve">
          <source>The Hitchhiker's Guide to Python</source>
          <target state="translated">히치하이커를위한 Python 가이드</target>
        </trans-unit>
        <trans-unit id="c8dad01ae3da8eb6b8cba8a0c7cdaea7d5491bcc" translate="yes" xml:space="preserve">
          <source>The dxpy installation process (invoked through &lt;code&gt;setup.py&lt;/code&gt; or with &lt;code&gt;make -C src python&lt;/code&gt; at the top level)
will find the script and install a launcher for it into the executable path automatically. This is done using the
&lt;code&gt;entry_points&lt;/code&gt; facility of setuptools/distribute.</source>
          <target state="translated">dxpy 설치 프로세스 ( &lt;code&gt;setup.py&lt;/code&gt; 를 통해 또는 최상위 수준에서 &lt;code&gt;make -C src python&lt;/code&gt; 을 사용하여 호출 됨 )는 스크립트를 찾고 실행 경로에 자동으로 실행기를 설치합니다. 이것은 setuptools / distribute 의 &lt;code&gt;entry_points&lt;/code&gt; 기능을 사용하여 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="8c7b6149c9a44f75ed34f4d873e4b308b7564f19" translate="yes" xml:space="preserve">
          <source>The next most troublesome gotcha after the bytes/unicode conversions is that many iterables operators return generators in Python 3. For example, &lt;code&gt;map()&lt;/code&gt; returns a generator. This breaks places that expect a list, and requires either explicit casting with &lt;code&gt;list()&lt;/code&gt;, or the use of list comprehensions (usually preferred).</source>
          <target state="translated">바이트 / 유니 코드 변환 후 다음으로 가장 문제가되는 문제는 많은 iterable 연산자가 Python 3 에서 생성자를 반환한다는 것입니다. 예를 들어, &lt;code&gt;map()&lt;/code&gt; 은 생성기를 반환합니다. 이것은 목록이 필요한 장소를 깨뜨리고 &lt;code&gt;list()&lt;/code&gt; 사용한 명시 적 캐스팅 또는 목록 이해 (일반적으로 선호 됨)를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c084f14040f09a58bb728f0ddff6fb5a4cb9a240" translate="yes" xml:space="preserve">
          <source>To facilitate Python 2 compatibility, we have the compat module in &lt;a href=&quot;https://github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.py&quot;&gt;https://github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.py&lt;/a&gt;. Also, the following boilerplate should be
inserted into all Python source files:</source>
          <target state="translated">Python 2 호환성을 용이하게하기 위해 &lt;a href=&quot;https://github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.py&quot;&gt;https://github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.py에&lt;/a&gt; compat 모듈이 있습니다 . 또한 모든 Python 소스 파일에 다음과 같은 상용구를 삽입해야합니다.</target>
        </trans-unit>
        <trans-unit id="8e99b2bf51505aca7fa345b17356e08b0244cbf9" translate="yes" xml:space="preserve">
          <source>Typically, when called on the command line, &lt;em&gt;main()&lt;/em&gt; will first parse the command line arguments (sys.argv). However,
when imported as a module, the arguments need to instead be passed as inputs to a function. The following is a
suggestion for how to accommodate both styles simultaneously with just one entry point (&lt;code&gt;main&lt;/code&gt;):</source>
          <target state="translated">일반적으로 명령 줄에서 호출 될 때 &lt;em&gt;main ()&lt;/em&gt; 은 먼저 명령 줄 인수 (sys.argv)를 구문 분석합니다. 그러나 모듈로 가져올 때 인수는 대신 함수에 대한 입력으로 전달되어야합니다. 다음은 하나의 진입 점 ( &lt;code&gt;main&lt;/code&gt; )으로 두 스타일을 동시에 수용하는 방법에 대한 제안입니다 .</target>
        </trans-unit>
        <trans-unit id="f8834549fa3b512635a4cdefe9a5f0cd97e47e4b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;from __future__ import print_function&lt;/code&gt; and use print as a function. Instead of &lt;code&gt;print &amp;gt;&amp;gt;sys.stderr&lt;/code&gt;, write &lt;code&gt;print(..., file=sys.stderr)&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;from __future__ import print_function&lt;/code&gt; 함수로 사용 인쇄. 대신 &lt;code&gt;print &amp;gt;&amp;gt;sys.stderr&lt;/code&gt; , 쓰기 &lt;code&gt;print(..., file=sys.stderr)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="adea88259ff3223db98b0ce99c873651a8268bc9" translate="yes" xml:space="preserve">
          <source>We have the following convention for these scripts:</source>
          <target state="translated">이 스크립트에는 다음과 같은 규칙이 있습니다.</target>
        </trans-unit>
        <trans-unit id="83da9c16c6603cb8d4311298056ffabe5920de38" translate="yes" xml:space="preserve">
          <source>dxpy is supported on Python 2 (2.7+) and Python 3 (3.5+)</source>
          <target state="translated">dxpy는 Python 2 (2.7+) 및 Python 3 (3.5+)에서 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="086e971b7ec428ac6a5dad1a0b475da4d8fe6c69" translate="yes" xml:space="preserve">
          <source>dxpy: DNAnexus Python API</source>
          <target state="translated">dxpy : DNAnexus Python API</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
