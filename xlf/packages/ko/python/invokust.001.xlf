<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/invokust/">
    <body>
      <group id="invokust">
        <trans-unit id="99026e238d9cb15da89e8d1fe20507ac6bf55538" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://aws.amazon.com/cli/&quot;&gt;AWS CLI&lt;/a&gt; example with Locust settings in a payload:</source>
          <target state="translated">&lt;a href=&quot;https://aws.amazon.com/cli/&quot;&gt;&lt;/a&gt;페이로드에 Locust 설정이있는 AWS CLI 예제 :</target>
        </trans-unit>
        <trans-unit id="3875d45c2ea23a9747846ba81fe693b3eb7c0b2e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; is a great tool for load testing as it is very cheap (or free) and highly scalable.</source>
          <target state="translated">&lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; 는 매우 저렴하고 (또는 무료) 확장 성이 뛰어나므로로드 테스트를위한 훌륭한 도구입니다.</target>
        </trans-unit>
        <trans-unit id="1dbeba13368159461e16ac9e1ee0c56e496b7e6e" translate="yes" xml:space="preserve">
          <source>A small wrapper for locust to allow running load tests from within Python or on AWS Lambda</source>
          <target state="translated">Python 또는 AWS Lambda에서로드 테스트를 실행할 수있는 locust 용 작은 래퍼</target>
        </trans-unit>
        <trans-unit id="91762ad205ed3cf3884a4d83396e8951f340b669" translate="yes" xml:space="preserve">
          <source>A tool for running &lt;a href=&quot;http://locust.io/&quot;&gt;Locust&lt;/a&gt; load tests from within Python without the need to use the locust command line. This gives more flexibility for automation such as QA/CI/CD tests and also makes it possible to run locust on &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; for ultimate scalability.</source>
          <target state="translated">locust 명령 줄을 사용할 필요없이 Python 내에서 &lt;a href=&quot;http://locust.io/&quot;&gt;Locust&lt;/a&gt; 부하 테스트 를 실행하는 도구입니다 . 이를 통해 QA / CI / CD 테스트와 같은 자동화에 더 많은 유연성을 제공 하고 궁극의 확장 성을 위해 &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; 에서 locust를 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ecbcc5295394de6bbd81823bf6446364b2869150" translate="yes" xml:space="preserve">
          <source>Create the zip file:</source>
          <target state="translated">zip 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="65c1bb25c78ad6503b01e8c580bd52286790566f" translate="yes" xml:space="preserve">
          <source>Creating a Lambda function</source>
          <target state="translated">Lambda 함수 생성</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">예</target>
        </trans-unit>
        <trans-unit id="b664641f17b88b1247479e87d3ea1711be1839bf" translate="yes" xml:space="preserve">
          <source>Included is an example function for running Locust on AWS Lambda, &lt;code&gt;lambda_locust.py&lt;/code&gt;.</source>
          <target state="translated">AWS Lambda, &lt;code&gt;lambda_locust.py&lt;/code&gt; 에서 Locust를 실행하기위한 예제 함수가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="97bc97b4c588174b68291c4cfaf5841eb7b2fb93" translate="yes" xml:space="preserve">
          <source>Install invokust (and its dependencies) python packages locally:</source>
          <target state="translated">invokust (및 해당 종속성) Python 패키지를 로컬에 설치합니다.</target>
        </trans-unit>
        <trans-unit id="8508fb7542a0482cbeaef8f25b82877c776c82ef" translate="yes" xml:space="preserve">
          <source>Install via pip:</source>
          <target state="translated">pip를 통해 설치 :</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="936f4e729ae144a6d66d7c4ff9e96d98bb57911f" translate="yes" xml:space="preserve">
          <source>Invoking the function</source>
          <target state="translated">함수 호출</target>
        </trans-unit>
        <trans-unit id="693bef86d21ba6db8a0847fc8fa811c86e5ec346" translate="yes" xml:space="preserve">
          <source>LOCUST_CLASSES: Names of locust classes to use for the load test (instead of a locustfile). If more than one, separate with comma.</source>
          <target state="translated">LOCUST_CLASSES :로드 테스트에 사용할 로커스트 클래스 이름 (locustfile 대신). 둘 이상인 경우 쉼표로 구분하십시오.</target>
        </trans-unit>
        <trans-unit id="86d70e19ef14f84129a48d440b8ec7f9e3af5d4c" translate="yes" xml:space="preserve">
          <source>LOCUST_HATCH_RATE: Number of clients per second to start</source>
          <target state="translated">LOCUST_HATCH_RATE : 시작할 초당 클라이언트 수</target>
        </trans-unit>
        <trans-unit id="585fb3734ac2ba9206888d5d3681663333a2feb2" translate="yes" xml:space="preserve">
          <source>LOCUST_HOST: The host to run the load test against</source>
          <target state="translated">LOCUST_HOST : 부하 테스트를 실행할 호스트</target>
        </trans-unit>
        <trans-unit id="f93c062390cd723f6179d539dcd63c6c17eeab77" translate="yes" xml:space="preserve">
          <source>LOCUST_LOCUSTFILE: Locust file to use for the load test</source>
          <target state="translated">LOCUST_LOCUSTFILE : 부하 테스트에 사용할 Locust 파일</target>
        </trans-unit>
        <trans-unit id="74fcb84f23ad7d75995f1c3a057a0227146023ce" translate="yes" xml:space="preserve">
          <source>LOCUST_LOGLEVEL: Level of logging</source>
          <target state="translated">LOCUST_LOGLEVEL : 로깅 수준</target>
        </trans-unit>
        <trans-unit id="c043181c583d164d372abddd4dcc1ab9ccd22ae9" translate="yes" xml:space="preserve">
          <source>LOCUST_NUM_CLIENTS: Number of clients to simulate</source>
          <target state="translated">LOCUST_NUM_CLIENTS : 시뮬레이션 할 클라이언트 수</target>
        </trans-unit>
        <trans-unit id="b91d7f616815d186477f06c5e40dd7c46106d5b9" translate="yes" xml:space="preserve">
          <source>LOCUST_RUN_TIME: The time the test should run for</source>
          <target state="translated">LOCUST_RUN_TIME : 테스트를 실행해야하는 시간</target>
        </trans-unit>
        <trans-unit id="636a036b3b41d6a6391624f0ce57941bac2d1a5e" translate="yes" xml:space="preserve">
          <source>Lambda function execution time is limited to a maximum of 5 minutes. To run a real load test the function will need to be invoked repeatedly and likely in parallel to generate enough load. To manage this there is a class called &lt;code&gt;LambdaLoadTest&lt;/code&gt; that can manage invoking the function in parallel loops and collecting the statistics.</source>
          <target state="translated">Lambda 함수 실행 시간은 최대 5 분으로 제한됩니다. 실제 부하 테스트를 실행하려면 함수를 반복적으로 호출하고 충분한 부하를 생성하기 위해 병렬로 호출해야합니다. 이를 관리하기 위해 병렬 루프에서 함수 호출 및 통계 수집을 관리 할 수있는 &lt;code&gt;LambdaLoadTest&lt;/code&gt; 라는 클래스 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="543f7014273b5fbff35337512617de7c7b32af45" translate="yes" xml:space="preserve">
          <source>Or &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; and the example &lt;a href=&quot;main.tf&quot;&gt;main.tf&lt;/a&gt; file:</source>
          <target state="translated">또는 &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; 및 예제 &lt;a href=&quot;main.tf&quot;&gt;main.tf&lt;/a&gt; 파일 :</target>
        </trans-unit>
        <trans-unit id="8522a2a01fbf0602b172e3d272125b70455b6d68" translate="yes" xml:space="preserve">
          <source>Or if running on a Mac (python packages need to be compiled for 64 bit Linux) you can use docker:</source>
          <target state="translated">또는 Mac에서 실행하는 경우 (python 패키지는 64 비트 Linux 용으로 컴파일해야 함) docker를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7c76e34cf83c3e804e72506ab8c04cd1709adb6" translate="yes" xml:space="preserve">
          <source>Python boto3 example:</source>
          <target state="translated">Python boto3 예제 :</target>
        </trans-unit>
        <trans-unit id="c6948758cb3a258906cad92354bea39aa90f72b3" translate="yes" xml:space="preserve">
          <source>Running Locust on AWS Lambda</source>
          <target state="translated">AWS Lambda에서 Locust 실행</target>
        </trans-unit>
        <trans-unit id="5934356a56330e18830d9cd4f60a0ff67179728d" translate="yes" xml:space="preserve">
          <source>Running a load test using a locust file:</source>
          <target state="translated">로커스트 파일을 사용하여 부하 테스트 실행 :</target>
        </trans-unit>
        <trans-unit id="ea1ba193e3abb7800583eec5cfd2ecf8972e3bd4" translate="yes" xml:space="preserve">
          <source>Running a load test without locust file:</source>
          <target state="translated">로커스트 파일없이 부하 테스트 실행 :</target>
        </trans-unit>
        <trans-unit id="dfe73dbe2f8c8735d7eae7509f1393e66dfa16ac" translate="yes" xml:space="preserve">
          <source>Running a real load test</source>
          <target state="translated">실제 부하 테스트 실행</target>
        </trans-unit>
        <trans-unit id="1e6129e904abf2eddd3e2a9a2b6f305c7c4f376e" translate="yes" xml:space="preserve">
          <source>The Locust settings can be passed to the Lambda function or can be set from environment variables. The environment variables are:</source>
          <target state="translated">Locust 설정은 Lambda 함수에 전달하거나 환경 변수에서 설정할 수 있습니다. 환경 변수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="df416751e8a2d229d8b98d6297b404967b69b568" translate="yes" xml:space="preserve">
          <source>The output:</source>
          <target state="translated">출력 :</target>
        </trans-unit>
        <trans-unit id="95a2199145ed06c019e27d083bf66cc513a61b93" translate="yes" xml:space="preserve">
          <source>The process for running a locust test on Lambda involves &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html&quot;&gt;creating a zip file&lt;/a&gt; of the locust load test, creating a Lambda function and then triggering the function.</source>
          <target state="translated">Lambda에서 locust 테스트를 실행하는 프로세스 에는 locust로드 테스트 &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html&quot;&gt;의 zip 파일&lt;/a&gt; 생성, Lambda 함수 생성 및 함수 트리거가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ee87065eac10dc7e3d85257132ff6ed1e7de3222" translate="yes" xml:space="preserve">
          <source>Then create the Lambda function using using the AWS CLI:</source>
          <target state="translated">그런 다음 AWS CLI를 사용하여 Lambda 함수를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="5bae57fcc799af0e9c2db4e4546264dbf8372363" translate="yes" xml:space="preserve">
          <source>There are many load testing tools such as &lt;a href=&quot;https://httpd.apache.org/docs/2.4/programs/ab.html&quot;&gt;ab&lt;/a&gt; and &lt;a href=&quot;https://github.com/wg/wrk&quot;&gt;wrk&lt;/a&gt;. Then there are other cloud based load testing options such as &lt;a href=&quot;https://www.blazemeter.com/&quot;&gt;BlazeMeter&lt;/a&gt; or &lt;a href=&quot;https://loader.io/&quot;&gt;Loader&lt;/a&gt; and some more DIY solutions that use AWS Lambda too such as &lt;a href=&quot;https://goad.io/&quot;&gt;Goad&lt;/a&gt; or &lt;a href=&quot;https://github.com/Nordstrom/serverless-artillery&quot;&gt;serverless-artillery&lt;/a&gt;. But these all have the same drawback: They are too simplistic. They can perform simple GET or POST requests but can't accurately emulate more complex behaviour. e.g. browsing a website, selecting random items, filling a shopping cart and checking out. But with &lt;a href=&quot;http://locust.io/&quot;&gt;Locust&lt;/a&gt; this is possible.</source>
          <target state="translated">&lt;a href=&quot;https://httpd.apache.org/docs/2.4/programs/ab.html&quot;&gt;ab&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/wg/wrk&quot;&gt;wrk&lt;/a&gt; 와 같은 많은 부하 테스트 도구가 있습니다 . 그런 다음 &lt;a href=&quot;https://www.blazemeter.com/&quot;&gt;BlazeMeter&lt;/a&gt; 또는 &lt;a href=&quot;https://loader.io/&quot;&gt;Loader&lt;/a&gt; 와 같은 다른 클라우드 기반 부하 테스트 옵션과 &lt;a href=&quot;https://goad.io/&quot;&gt;Goad&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/Nordstrom/serverless-artillery&quot;&gt;serverless-artillery&lt;/a&gt; 와 같은 AWS Lambda도 사용하는 DIY 솔루션이 있습니다 . 그러나 이것들은 모두 같은 결점을 가지고 있습니다 : 그것들은 너무 단순합니다. 간단한 GET 또는 POST 요청을 수행 할 수 있지만 더 복잡한 동작을 정확하게 에뮬레이트 할 수는 없습니다. 예 : 웹 사이트 탐색, 임의의 항목 선택, 장바구니 채우기 및 체크 아웃. 그러나 &lt;a href=&quot;http://locust.io/&quot;&gt;Locust를 사용&lt;/a&gt; 하면 가능합니다.</target>
        </trans-unit>
        <trans-unit id="81ba89577d04db0ba874660f123406b0b5587d3a" translate="yes" xml:space="preserve">
          <source>There is also an example CLI tool for running a load test, &lt;code&gt;invokr.py&lt;/code&gt;:</source>
          <target state="translated">부하 테스트를 실행하기위한 CLI 도구 인 &lt;code&gt;invokr.py&lt;/code&gt; 도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fc50554e65353e553894f9ab3e15a2d18f1f1c8a" translate="yes" xml:space="preserve">
          <source>invokust</source>
          <target state="translated">호출</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
