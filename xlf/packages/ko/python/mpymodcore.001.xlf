<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/mpymodcore/">
    <body>
      <group id="mpymodcore">
        <trans-unit id="bcc701defc5990ee9a32dbc04b9bf07a5b7cb2bf" translate="yes" xml:space="preserve">
          <source>:heart: Credits</source>
          <target state="translated">: heart : 크레딧</target>
        </trans-unit>
        <trans-unit id="169c1d1d2c88e5e12bc0660d2a87626a2de4888d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mpy-modcore&lt;/code&gt; is published as &lt;a href=&quot;https://github.com/kr-g/mpymodcore/blob/master/LICENSE&quot;&gt;&lt;code&gt;dual licensed&lt;/code&gt;&lt;/a&gt;.
read properly.</source>
          <target state="translated">&lt;code&gt;mpy-modcore&lt;/code&gt; 는 &lt;a href=&quot;https://github.com/kr-g/mpymodcore/blob/master/LICENSE&quot;&gt; &lt;code&gt;dual licensed&lt;/code&gt; &lt;/a&gt; 로 게시됩니다 . 제대로 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="dfbb5324d5adae3dc607fd4fc30fb71741e0c652" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mpy-modcore&lt;/code&gt; is the successor of &lt;a href=&quot;https://github.com/kr-g/mpyconfigbase&quot;&gt;mpyconfigbase&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;mpy-modcore&lt;/code&gt; 는 mpyconfigbase 의 후속 제품입니다 &lt;a href=&quot;https://github.com/kr-g/mpyconfigbase&quot;&gt;.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cd889328faea76e2689403bb04250b39e30ac42c" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;mpy-modcore&lt;/code&gt; folders to your &lt;code&gt;.gitignore&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mpy-modcore&lt;/code&gt; 폴더를 &lt;code&gt;.gitignore&lt;/code&gt; 에 추가 하십시오 .</target>
        </trans-unit>
        <trans-unit id="3044a9124373f92e9df3549083893461266fe109" translate="yes" xml:space="preserve">
          <source>Alpha state.
The API or logical call flow might change without prior notice.</source>
          <target state="translated">알파 상태. API 또는 논리적 호출 흐름은 사전 고지없이 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="622862439a7f58a045eb4cbb404a48bc5cc6f4ad" translate="yes" xml:space="preserve">
          <source>An approach to modularize MicroPython projects.</source>
          <target state="translated">MicroPython 프로젝트를 모듈화하는 접근 방식입니다.</target>
        </trans-unit>
        <trans-unit id="81bf9d8943fdf862899772c30e9398cc4f71fe15" translate="yes" xml:space="preserve">
          <source>Check
&lt;a href=&quot;https://github.com/kr-g/mpymodcore/blob/master/CHANGELOG.md&quot;&gt;&lt;code&gt;CHANGELOG&lt;/code&gt;&lt;/a&gt;
for latest ongoing, or upcoming news</source>
          <target state="translated">&lt;a href=&quot;https://github.com/kr-g/mpymodcore/blob/master/CHANGELOG.md&quot;&gt; &lt;code&gt;CHANGELOG&lt;/code&gt; &lt;/a&gt; 에서 최신 또는 향후 뉴스를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="9cb080654d59b15e305b52a6fd54b623beeb3806" translate="yes" xml:space="preserve">
          <source>Developed with &lt;a href=&quot;https://github.com/thonny/thonny&quot;&gt;&lt;code&gt;Thonny&lt;/code&gt;&lt;/a&gt; :+1:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/thonny/thonny&quot;&gt; &lt;code&gt;Thonny&lt;/code&gt; &lt;/a&gt; 와 함께 개발 : +1 :</target>
        </trans-unit>
        <trans-unit id="62808f6757172716cabaac5204f08f9615aade3e" translate="yes" xml:space="preserve">
          <source>Development status</source>
          <target state="translated">개발 현황</target>
        </trans-unit>
        <trans-unit id="eb9e6c644865049bbc1016ecb9918ca145978ec4" translate="yes" xml:space="preserve">
          <source>Do i need to fiber my code ?</source>
          <target state="translated">내 코드를 파이버 링해야합니까?</target>
        </trans-unit>
        <trans-unit id="4fdca80bb8097cd246dc9c3cdcb354ff407b47d1" translate="yes" xml:space="preserve">
          <source>For configuration of automatic startup of WLAN, SoftAP, and WebRepl refer to the
source/ sample code also there</source>
          <target state="translated">WLAN, SoftAP 및 WebRepl의 자동 시작 구성에 대해서는 소스 / 샘플 코드도 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8659cf600f8c001881814e64b5d56b793f840eda" translate="yes" xml:space="preserve">
          <source>In case your code breaks between two versions check
&lt;a href=&quot;https://github.com/kr-g/mpymodcore/blob/master/CHANGELOG.md&quot;&gt;&lt;code&gt;CHANGELOG&lt;/code&gt;&lt;/a&gt;
information first before creating a ticket / issue on github. thanks.</source>
          <target state="translated">두 버전 사이에서 코드가 깨지는 경우 github에서 티켓 / 문제를 만들기 전에 먼저 &lt;a href=&quot;https://github.com/kr-g/mpymodcore/blob/master/CHANGELOG.md&quot;&gt; &lt;code&gt;CHANGELOG&lt;/code&gt; &lt;/a&gt; 정보를 확인하십시오 . 감사.</target>
        </trans-unit>
        <trans-unit id="5a5fb83f628f723e7006a8c6beb0cdc83967f557" translate="yes" xml:space="preserve">
          <source>In oder to run the unsuported modules from the &lt;code&gt;mod3rd&lt;/code&gt; folder download
this folder from github to the local project folder.</source>
          <target state="translated">&lt;code&gt;mod3rd&lt;/code&gt; 폴더 에서 지원되지 않는 모듈을 실행하려면 이 폴더를 github에서 로컬 프로젝트 폴더로 다운로드하십시오.</target>
        </trans-unit>
        <trans-unit id="dfce66f4316fc0ad49b48fd9e8283165ab439e5e" translate="yes" xml:space="preserve">
          <source>In order to run the samples sync the folder &lt;code&gt;www&lt;/code&gt; and &lt;code&gt;etc&lt;/code&gt; from github to the local
project folder from where running the samples.
If running together with &lt;code&gt;boot.py&lt;/code&gt; check for &lt;code&gt;run_not_in_sample_mode&lt;/code&gt; and
set to &lt;code&gt;False&lt;/code&gt; to prevent autostarting WindUp and blocking the socket,
or provide your own &lt;code&gt;boot.py&lt;/code&gt;.</source>
          <target state="translated">실행하려면 샘플은 폴더 동기화 &lt;code&gt;www&lt;/code&gt; 및 &lt;code&gt;etc&lt;/code&gt; 샘플을 실행하는 곳에서 로컬 프로젝트 폴더에 GitHub의에서합니다. &lt;code&gt;run_not_in_sample_mode&lt;/code&gt; 와 함께 실행하는 경우 &lt;code&gt;boot.py&lt;/code&gt; 확인 하고 &lt;code&gt;False&lt;/code&gt; 로 설정하여 WindUp 자동 시작 및 소켓 차단을 방지하거나 자체 &lt;code&gt;boot.py&lt;/code&gt; 를 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="f1ba30f86e0b97280f52707161e3286b007297d3" translate="yes" xml:space="preserve">
          <source>In package &lt;code&gt;modext.http&lt;/code&gt; there are basic HTTP request handling functions.</source>
          <target state="translated">&lt;code&gt;modext.http&lt;/code&gt; 패키지 에는 기본 HTTP 요청 처리 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a96c103b0450abadb0ee575dde71d0c55f0e20e7" translate="yes" xml:space="preserve">
          <source>In package &lt;code&gt;modext.windup&lt;/code&gt; is WindUp as included web server.</source>
          <target state="translated">패키지 &lt;code&gt;modext.windup&lt;/code&gt; 은 포함 된 웹 서버로 WindUp 입니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="d38433d52583ad243cd41ae50c5e793a5b878ad5" translate="yes" xml:space="preserve">
          <source>Introduce a defined lifecycle and eventing model
for modules / devices for convenient handling
of loose coupled modules/ device</source>
          <target state="translated">느슨하게 결합 된 모듈 / 장치를 편리하게 처리 할 수 ​​있도록 모듈 / 장치에 대해 정의 된 수명주기 및 이벤트 모델을 소개합니다.</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="467cc45933855528ec26f736df500f33baf77de2" translate="yes" xml:space="preserve">
          <source>Like an async coroutine is a fiber an approach of cooperative multitasking.
Whereas objectives are the same.</source>
          <target state="translated">비동기 코 루틴과 마찬가지로 파이버는 협력 적 멀티 태스킹의 접근 방식입니다. 목표는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">한계</target>
        </trans-unit>
        <trans-unit id="aa25355c53743b2955d682f3170668d8f0b48ff5" translate="yes" xml:space="preserve">
          <source>Multi-tasking processing support of HTTP requests based on fiber
(&lt;a href=&quot;https://github.com/kr-g/mpymodcore/blob/master/modext/fiber/core.py&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/a&gt;).
The standard processor for the request handling is blocking mode.
Fiber processor (experimental) is not activated by default.</source>
          <target state="translated">파이버 ( &lt;a href=&quot;https://github.com/kr-g/mpymodcore/blob/master/modext/fiber/core.py&quot;&gt; &lt;code&gt;source&lt;/code&gt; &lt;/a&gt; )를 기반으로 한 HTTP 요청의 멀티 태스킹 처리 지원 . 요청 처리를위한 표준 프로세서는 차단 모드입니다. 파이버 프로세서 (시험용)는 기본적으로 활성화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="54a0a54aa4af72b4243627649b4ef26c8fd094b8" translate="yes" xml:space="preserve">
          <source>New to fiber ?</source>
          <target state="translated">Fiber를 처음 사용하십니까?</target>
        </trans-unit>
        <trans-unit id="2601a2773f008a400aa3da387731d003f2c681f7" translate="yes" xml:space="preserve">
          <source>No. Serve traditional as you go, or fiber the code.</source>
          <target state="translated">아니요. 전통적인 방식으로 제공하거나 코드를 섬유로 만드십시오.</target>
        </trans-unit>
        <trans-unit id="123a7f2fcc9ae7cbbbd7c7627a483853a9708dab" translate="yes" xml:space="preserve">
          <source>Platform</source>
          <target state="translated">플랫폼</target>
        </trans-unit>
        <trans-unit id="6728c28c0c16cc1ee984db78a9fc4fd1babd8f71" translate="yes" xml:space="preserve">
          <source>Pros and Cons?
Read more on wikipedia about
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fiber_(computer_science)&quot;&gt;&lt;code&gt;fiber&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">장점과 단점? &lt;a href=&quot;https://en.wikipedia.org/wiki/Fiber_(computer_science)&quot;&gt; &lt;code&gt;fiber&lt;/code&gt; &lt;/a&gt; 에 대한 위키 백과에서 더 읽어보기</target>
        </trans-unit>
        <trans-unit id="515581afd0616faf415b76ca3ac4c6199fa7ca0d" translate="yes" xml:space="preserve">
          <source>Related project</source>
          <target state="translated">관련 프로젝트</target>
        </trans-unit>
        <trans-unit id="8403041e7b814759c1e9f2375cc7c0c3b1823cb4" translate="yes" xml:space="preserve">
          <source>Running on &lt;a href=&quot;http://micropython.org/&quot;&gt;&lt;code&gt;MicroPython&lt;/code&gt;&lt;/a&gt;, more about the MicroPython project on
&lt;a href=&quot;https://github.com/micropython/micropython&quot;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt; :+1:</source>
          <target state="translated">&lt;a href=&quot;http://micropython.org/&quot;&gt; &lt;code&gt;MicroPython&lt;/code&gt; &lt;/a&gt; 에서 실행 , &lt;a href=&quot;https://github.com/micropython/micropython&quot;&gt; &lt;code&gt;github&lt;/code&gt; &lt;/a&gt; 의 MicroPython 프로젝트에 대해 자세히 알아보기 : +1 :</target>
        </trans-unit>
        <trans-unit id="db412b35391491a23074f474e3dd7ab6ca4b7fa3" translate="yes" xml:space="preserve">
          <source>Sample Code</source>
          <target state="translated">샘플 코드</target>
        </trans-unit>
        <trans-unit id="3f0756851da909f11490756b691e65d4aaa25115" translate="yes" xml:space="preserve">
          <source>Secure Role based Access to URL Routes</source>
          <target state="translated">URL 경로에 대한 보안 역할 기반 액세스</target>
        </trans-unit>
        <trans-unit id="ce1f4f36f28695513fd6f51b67c6c032559ab375" translate="yes" xml:space="preserve">
          <source>Some sample code can be found in
&lt;a href=&quot;https://github.com/kr-g/mpymodcore/blob/master/boot.py&quot;&gt;&lt;code&gt;boot.py&lt;/code&gt;&lt;/a&gt;
and under &lt;a href=&quot;https://github.com/kr-g/mpymodcore/tree/master/samples&quot;&gt;&lt;code&gt;samples&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">일부 샘플 코드는 &lt;a href=&quot;https://github.com/kr-g/mpymodcore/blob/master/boot.py&quot;&gt; &lt;code&gt;boot.py&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://github.com/kr-g/mpymodcore/tree/master/samples&quot;&gt; &lt;code&gt;samples&lt;/code&gt; &lt;/a&gt; 아래에 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d7af52d736e6edf2aae0c7aa5717bf3949671b5" translate="yes" xml:space="preserve">
          <source>Tested on ESP32 with PSRam and ESP8266 (for latter, see limitations below)</source>
          <target state="translated">PSRam 및 ESP8266이있는 ESP32에서 테스트되었습니다 (후자의 경우 아래 제한 사항 참조).</target>
        </trans-unit>
        <trans-unit id="881f5833b0d730ec467a44297f3364e3daa103d5" translate="yes" xml:space="preserve">
          <source>The WindUp web server is like
&lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_HTTP_Server&quot;&gt;Apache&lt;/a&gt;
based on the concept of
&lt;a href=&quot;https://httpd.apache.org/docs/2.4/filter.html&quot;&gt;&lt;code&gt;Filter and Content Generator&lt;/code&gt;&lt;/a&gt;.
What makes WindUp easy extensible; and flexible how requests are processed.</source>
          <target state="translated">WindUp 웹 서버는 &lt;a href=&quot;https://httpd.apache.org/docs/2.4/filter.html&quot;&gt; &lt;code&gt;Filter and Content Generator&lt;/code&gt; &lt;/a&gt; 의 개념을 기반으로하는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_HTTP_Server&quot;&gt;Apache&lt;/a&gt; 와 같습니다 . WindUp을 쉽게 확장 할 수있는 이유 요청이 처리되는 방식이 유연합니다.</target>
        </trans-unit>
        <trans-unit id="e955fd72cb9ce8b7c3ffb81e2a9fb937bdcb35ce" translate="yes" xml:space="preserve">
          <source>There are hints how to use or test with &lt;code&gt;curl&lt;/code&gt;,
all using URL &lt;code&gt;http://your-ip/...&lt;/code&gt;.
Add the following to &lt;code&gt;/etc/hosts&lt;/code&gt; to use them more easily.
e.g. when your device has the following IP address:</source>
          <target state="translated">URL &lt;code&gt;http://your-ip/...&lt;/code&gt; 를 사용하여 &lt;code&gt;curl&lt;/code&gt; 사용하거나 테스트하는 방법에 대한 힌트가 있습니다 . 더 쉽게 사용 하려면 &lt;code&gt;/etc/hosts&lt;/code&gt; 에 다음을 추가하십시오 . 예 : 장치에 다음 IP 주소가있는 경우 :</target>
        </trans-unit>
        <trans-unit id="10c99ab4cebd6cc3af6e8c3eb8d812dadb8928a3" translate="yes" xml:space="preserve">
          <source>Web Server included</source>
          <target state="translated">웹 서버 포함</target>
        </trans-unit>
        <trans-unit id="5bc7ef3c77bc5761ebf9838db7e1b4a1f3103b82" translate="yes" xml:space="preserve">
          <source>What's new ?</source>
          <target state="translated">새로운 것은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="42f4399dacae6745a11dec06f313c92f8bc885cc" translate="yes" xml:space="preserve">
          <source>WindUp comes already with a bunch of Filters, e.g. HTML Form data parser,
JSON processing, Query parameter extraction, Cookies,
Session handling (in-memory), REST stlye URL parameter parser, and extraction, etc.</source>
          <target state="translated">WindUp에는 HTML 양식 데이터 파서, JSON 처리, 쿼리 매개 변수 추출, 쿠키, 세션 처리 (인 메모리), REST stlye URL 매개 변수 구문 분석기, 추출 등과 같은 필터가 이미 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="122121c8f8ce7aaa55b978df6c8801b4f4e54366" translate="yes" xml:space="preserve">
          <source>WindUp is in Alpha state and not performance optimized.
Anyway response times under 1 secs are already possible.</source>
          <target state="translated">WindUp은 알파 상태이며 성능이 최적화되지 않았습니다. 어쨌든 1 초 미만의 응답 시간은 이미 가능합니다.</target>
        </trans-unit>
        <trans-unit id="9da8558e3fe92872a09b0dfb842a682b9061f76f" translate="yes" xml:space="preserve">
          <source>WindUp supports you to write Role based applications, with a minimal side effort.
Refer to the additional &lt;code&gt;Login/Logout&lt;/code&gt; module under &lt;code&gt;mod3rd&lt;/code&gt; on how to use this.</source>
          <target state="translated">WindUp은 최소한의 노력으로 역할 기반 응용 프로그램을 작성할 수 있도록 지원합니다. 사용 방법 은 &lt;code&gt;mod3rd&lt;/code&gt; 아래 의 추가 &lt;code&gt;Login/Logout&lt;/code&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2932b66041296021c5077a5911d27f4c4b2c8684" translate="yes" xml:space="preserve">
          <source>mpy-modcore - a micro framework for MicroPython</source>
          <target state="translated">mpy-modcore-MicroPython 용 마이크로 프레임 워크</target>
        </trans-unit>
        <trans-unit id="22976f528b5b756093c340ac4a3f9ec0bb4ce276" translate="yes" xml:space="preserve">
          <source>mpymodcore</source>
          <target state="translated">mpymodcore</target>
        </trans-unit>
        <trans-unit id="d8bb901cf34342b077cb74c48ad5a26a524cbf10" translate="yes" xml:space="preserve">
          <source>no asyncio integration as of now</source>
          <target state="translated">현재로서는 asyncio 통합이 없습니다.</target>
        </trans-unit>
        <trans-unit id="c144adaa75c005280a409b239d53f084c110b89d" translate="yes" xml:space="preserve">
          <source>with all mod's enabled as shown here in the sample
it will not run on ESP8266 due to memory limit.
but wlan, softap, and ntp should work</source>
          <target state="translated">샘플에 표시된대로 모든 모드가 활성화되면 메모리 제한으로 인해 ESP8266에서 실행되지 않습니다. 하지만 wlan, softap 및 ntp는 작동합니다.</target>
        </trans-unit>
        <trans-unit id="7b4e6b49ce2e5b728450c0815a418d470fc7fbc7" translate="yes" xml:space="preserve">
          <source>with pip (recommended)</source>
          <target state="translated">pip 포함 (권장)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
