<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/floraconcierge-client/">
    <body>
      <group id="floraconcierge-client">
        <trans-unit id="9e5809d74e50c1a36c02f6e86167a4d14c24e662" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_API_ID` Required. Your application ID.</source>
          <target state="translated">*`FLORACONCIERGE_API_ID` 필수. 애플리케이션 ID.</target>
        </trans-unit>
        <trans-unit id="7c4c1cfdcce56720a052a3f528d93d15ba869bfd" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_API_INIT_CLIENT` Optional. Custom api client initiation function. By default middleware initiate</source>
          <target state="translated">*`FLORACONCIERGE_API_INIT_CLIENT` 선택 사항. 사용자 지정 API 클라이언트 시작 기능. 기본적으로 미들웨어 시작</target>
        </trans-unit>
        <trans-unit id="e0013a6babd9e8081219bc701075ff74eced73bf" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_API_INIT_ENV` Optional. You can setup custom init function for env setup. Function takes params</source>
          <target state="translated">*`FLORACONCIERGE_API_INIT_ENV` 선택 사항. 환경 설정을위한 사용자 정의 초기화 기능을 설정할 수 있습니다. 함수는 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="30f260257dec70272c8c693b5ec13765e60b4355" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_API_SECRET` Required. Your application secret.</source>
          <target state="translated">*`FLORACONCIERGE_API_SECRET` 필수. 애플리케이션 비밀.</target>
        </trans-unit>
        <trans-unit id="7dbfaf9c936b642b9df619507e4c5ba7ffaf0a35" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_CHAT_SECRET` Optional. Secret key for chat.</source>
          <target state="translated">*`FLORACONCIERGE_CHAT_SECRET` 선택 사항. 채팅 용 비밀 키입니다.</target>
        </trans-unit>
        <trans-unit id="78a6be4bf0b208c8897ec7a0aa7e98e2451c38b1" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_PRODUCT_IMAGES` Optional. Can be used to customize product images urls by this dict. Generated urls added automatically to</source>
          <target state="translated">*`FLORACONCIERGE_PRODUCT_IMAGES` 선택 사항. 이 dict에 의해 제품 이미지 URL을 사용자 정의하는 데 사용할 수 있습니다. 에 자동으로 추가 된 생성 된 URL</target>
        </trans-unit>
        <trans-unit id="82ea1180dbf1f96e408930e3d9e95c59a82b4ba5" translate="yes" xml:space="preserve">
          <source>After application installation to your apps, you must add `floraconcierge.apiauth.backends.FloraConciergeBackend` to</source>
          <target state="translated">앱에 애플리케이션을 설치 한 후 'floraconcierge.apiauth.backends.FloraConciergeBackend'를</target>
        </trans-unit>
        <trans-unit id="89870ca2cdc28e9710565809cfd4d89b3b824eea" translate="yes" xml:space="preserve">
          <source>After this users will can login on your site throught floraconcierge api by standart django authentication framework.</source>
          <target state="translated">이 후 사용자는 표준 django 인증 프레임 워크에 의해 floraconcierge api를 통해 귀하의 사이트에 로그인 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2f8a69d4e6d2332d2d636f728228e6c0a46671e" translate="yes" xml:space="preserve">
          <source>All information at http://www.floraexpress.ru/</source>
          <target state="translated">http://www.floraexpress.ru/의 모든 정보</target>
        </trans-unit>
        <trans-unit id="21c27a506f8fe2f0cd31b59f94b8c1bf3e4a9b1d" translate="yes" xml:space="preserve">
          <source>All settings used in middleware only, if you want manual initiation of api client object, you can do it yourself.</source>
          <target state="translated">미들웨어에서만 사용되는 모든 설정은 API 클라이언트 개체를 수동으로 시작하려는 경우 직접 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="999136d582f003a9742f3e0abf11bf4b30780124" translate="yes" xml:space="preserve">
          <source>Also available debug panel for django.</source>
          <target state="translated">django 용 디버그 패널도 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="8d8410397a205b13699dbabba44a7261a90d99a5" translate="yes" xml:space="preserve">
          <source>Also you can add `floraconcierge.middleware.ApiObjectNotFound404` to your middlewares for automatic 404 pages when</source>
          <target state="translated">또한 자동 404 페이지를 위해 미들웨어에`floraconcierge.middleware.ApiObjectNotFound404`를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5b62e9fadd00e70f530a824cc50a1161be51834" translate="yes" xml:space="preserve">
          <source>And you must add `floraconcierge` to your `INSTALLED_APPS`.</source>
          <target state="translated">그리고 ʻINSTALLED_APPS`에`floraconcierge`를 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="4e14af933a0e8370ca9b0d4237c4b647888bce09" translate="yes" xml:space="preserve">
          <source>ApiAuth authentication backend</source>
          <target state="translated">ApiAuth 인증 백엔드</target>
        </trans-unit>
        <trans-unit id="277a0831ffa6dd7df99804a3bbb855b456ec1f81" translate="yes" xml:space="preserve">
          <source>Available settings</source>
          <target state="translated">사용 가능한 설정</target>
        </trans-unit>
        <trans-unit id="55ef292b5de2a84a8f61f3720e7422ffe9843f33" translate="yes" xml:space="preserve">
          <source>Collection methods</source>
          <target state="translated">수집 방법</target>
        </trans-unit>
        <trans-unit id="3e00341654277d7decc886df1e41eee6c8669e6a" translate="yes" xml:space="preserve">
          <source>Django debug toolbar panel</source>
          <target state="translated">Django 디버그 툴바 패널</target>
        </trans-unit>
        <trans-unit id="6078f328df57afb18cc95b8947ae2873c540a834" translate="yes" xml:space="preserve">
          <source>FloraConcierge api provides simple request lifetime cache object for caching offen queried data on page. This cache</source>
          <target state="translated">FloraConcierge API는 페이지에서 자주 쿼리 된 데이터를 캐싱하기위한 간단한 요청 수명 캐시 개체를 제공합니다. 이 캐시</target>
        </trans-unit>
        <trans-unit id="231f567238f896c431d3a76575409cfdcf9202aa" translate="yes" xml:space="preserve">
          <source>FloraConcierge is worldwide flowers delivery service. We provide api services for</source>
          <target state="translated">FloraConcierge는 세계적인 꽃 배달 서비스입니다. 우리는 API 서비스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c10c93350b9ab2af776c9f3578a32686d5ed3255" translate="yes" xml:space="preserve">
          <source>FloraExpress API python client library. www.floraexpress.ru</source>
          <target state="translated">FloraExpress API Python 클라이언트 라이브러리. www.floraexpress.ru</target>
        </trans-unit>
        <trans-unit id="5df5ba4880462b2427cfbce690398bc2a17ef4ee" translate="yes" xml:space="preserve">
          <source>Now you can search throught your result collections with find/findall methods.</source>
          <target state="translated">이제 find / findall 메서드를 사용하여 결과 컬렉션을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c69b298ea6ed4be4aae2303aa007ea35469dd25d" translate="yes" xml:space="preserve">
          <source>Request cache middleware</source>
          <target state="translated">캐시 미들웨어 요청</target>
        </trans-unit>
        <trans-unit id="95e4dd9d6dcf3a9442ceda4d885c51788418d862" translate="yes" xml:space="preserve">
          <source>Version 0.7.52</source>
          <target state="translated">버전 0.7.52</target>
        </trans-unit>
        <trans-unit id="ce7d7687eb3af6a421f5e95ac3d88e4e8abf7988" translate="yes" xml:space="preserve">
          <source>You can add `floraconcierge.middleware.RequestCacheMiddleware` to your `MIDDLEWARE_CLASSES` and get request cache</source>
          <target state="translated">`floraconcierge.middleware.RequestCacheMiddleware`를`MIDDLEWARE_CLASSES`에 추가하고 요청 캐시를 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58a7dc6f2433fc501a0979dacbf050a24264f9f4" translate="yes" xml:space="preserve">
          <source>You can add `floraconcierge.panels.FloraConciergeRequests` to django debug panels settings `DEBUG_TOOLBAR_PANELS`.</source>
          <target state="translated">django 디버그 패널 설정`DEBUG_TOOLBAR_PANELS`에`floraconcierge.panels.FloraConciergeRequests`를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35b9ea9a31aed5a051da7ad426c39030ea2bb2d9" translate="yes" xml:space="preserve">
          <source>You can add support for logging in users on your site with api by adding `floraconcierge.apiauth` to your `INSTALLED_APPS`.</source>
          <target state="translated">ʻINSTALLED_APPS`에`floraconcierge.apiauth`를 추가하여 api를 사용하여 사이트의 사용자 로그인 지원을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b480a6d677e513fb34c02be3b0692f735cd89f2" translate="yes" xml:space="preserve">
          <source>You can simple install floraconcierge api client into your django environment by adding middleware</source>
          <target state="translated">미들웨어를 추가하여 floraconcierge API 클라이언트를 django 환경에 간단하게 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65c1a4ce23248d829300703e06d7ddb1c82de3a8" translate="yes" xml:space="preserve">
          <source>You must inherit your cache object from `floraconcierge.cache.RequestCache` and setup it via `FLORACONCIERGE_CACHE_CLASS`.</source>
          <target state="translated">`floraconcierge.cache.RequestCache`에서 캐시 객체를 상속하고`FLORACONCIERGE_CACHE_CLASS`를 통해 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="de31c7a46a967d0fd879bdb4283fbe5534da8403" translate="yes" xml:space="preserve">
          <source>`client, request, restored` where client is ApiClient instance, request is django request object and restored is flag</source>
          <target state="translated">'client, request, restore'여기서 client는 ApiClient 인스턴스, 요청은 django 요청 객체, restore는 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="12c32971519b71317865e4d4305b8d0263a60992" translate="yes" xml:space="preserve">
          <source>`floraconcierge.middleware.ApiClientMiddleware` to your `MIDDLEWARE_CLASSES`.</source>
          <target state="translated">`floraconcierge.middleware.ApiClientMiddleware`를`MIDDLEWARE_CLASSES`에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="1f03fde2da1017ae0c46c3740e6cf73e91d84a32" translate="yes" xml:space="preserve">
          <source>`{{ product.urls.thumb }}`. Available default sizes: default, small, middle, big, thumb_100, thumb_250, thumb_500.</source>
          <target state="translated">`{{product.urls.thumb}}`. 사용 가능한 기본 크기 : default, small, middle, big, thumb_100, thumb_250, thumb_500.</target>
        </trans-unit>
        <trans-unit id="1731b5a863c78122fbd72d8b81272934e5e88bb4" translate="yes" xml:space="preserve">
          <source>api result raises ResultObjectNotFoundError.</source>
          <target state="translated">api 결과는 ResultObjectNotFoundError를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="6d2d2e03448c49b65436dfac6aa543c814d73ff4" translate="yes" xml:space="preserve">
          <source>building your own flowers delivery e-commerce and submit users orders into our system.</source>
          <target state="translated">자신의 꽃 배달 전자 상거래를 구축하고 사용자 주문을 우리 시스템에 제출하십시오.</target>
        </trans-unit>
        <trans-unit id="6fd9e78aebd682e8acc006f20149cc7d75f0fb67" translate="yes" xml:space="preserve">
          <source>cleares automatically every next request.</source>
          <target state="translated">다음 요청마다 자동으로 지워집니다.</target>
        </trans-unit>
        <trans-unit id="a6713cfc9aeea3c7f9f01026ce34efb19688aadb" translate="yes" xml:space="preserve">
          <source>client with function `floraconcierge.middleware.initialize_apiclient`. You can se your own function. Function take</source>
          <target state="translated">`floraconcierge.middleware.initialize_apiclient` 기능이있는 클라이언트. 자신의 기능을 선택할 수 있습니다. 기능 걸릴</target>
        </trans-unit>
        <trans-unit id="a76db04d3532f1dd0ef95fb09e94824c95a25f64" translate="yes" xml:space="preserve">
          <source>instance with function `floraconcierge.cache.get_request_cache()`.</source>
          <target state="translated">`floraconcierge.cache.get_request_cache ()`함수가있는 인스턴스.</target>
        </trans-unit>
        <trans-unit id="ad826fcc3dc50e42d26f9ed676af9a273139e204" translate="yes" xml:space="preserve">
          <source>only one param `request`.</source>
          <target state="translated">단 하나의 매개 변수 '요청'.</target>
        </trans-unit>
        <trans-unit id="0dcf7470569e9b278cc8248c99a07b25fd50b4c6" translate="yes" xml:space="preserve">
          <source>product `urls` field. You can get product image url with `product.urls['thumb']` or in Django Template by calling</source>
          <target state="translated">제품 'URL'입력란. `product.urls [ 'thumb']`또는 Django 템플릿에서 다음을 호출하여 제품 이미지 URL을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed96bbd7ce05dca41e30cb65bf52c59e0997af05" translate="yes" xml:space="preserve">
          <source>variable indicating client env was restored from request session.</source>
          <target state="translated">클라이언트 환경이 요청 세션에서 복원되었음을 나타내는 변수입니다.</target>
        </trans-unit>
        <trans-unit id="2c15a6124162abe90825137bfc6e8e80cd3b497b" translate="yes" xml:space="preserve">
          <source>your `AUTHENTICATION_BACKENDS`.</source>
          <target state="translated">ʻAUTHENTICATION_BACKENDS`.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
