<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/pretty-errors/">
    <body>
      <group id="pretty-errors">
        <trans-unit id="465b40f8ab4ba512e6c4710864de1f8637d889d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arrow_head_character&lt;/code&gt;, &lt;code&gt;arrow_tail_character&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;arrow_head_character&lt;/code&gt; , &lt;code&gt;arrow_tail_character&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bda202df470fa552db52cb3308857858b05d7c17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arrow_head_color&lt;/code&gt;, &lt;code&gt;arrow_tail_color&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;arrow_head_color&lt;/code&gt; , &lt;code&gt;arrow_tail_color&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8440a3b4cbdbf0265d8bc11b8efd8742b5dcc2b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lines_after&lt;/code&gt;, &lt;code&gt;lines_before&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;lines_after&lt;/code&gt; , &lt;code&gt;lines_before&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ca24305c061459c57d41e15d015b091d946d37a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pretty_errors&lt;/code&gt; has some built in escape sequence constants you can use when setting these colors:</source>
          <target state="translated">&lt;code&gt;pretty_errors&lt;/code&gt; has some built in escape sequence constants you can use when setting these colors:</target>
        </trans-unit>
        <trans-unit id="fa999ed6fea56c70aae999f8eb53024ff1a8ec3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace_lines_after&lt;/code&gt;, &lt;code&gt;trace_lines_before&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;trace_lines_after&lt;/code&gt; , &lt;code&gt;trace_lines_before&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5266fe8c5439965efa1aa3534a29397da430c60b" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;pretty_errors.activate()&lt;/code&gt; will override this.</source>
          <target state="translated">Calling &lt;code&gt;pretty_errors.activate()&lt;/code&gt; will override this.</target>
        </trans-unit>
        <trans-unit id="c2ff3d31018e4a2b88a9dd0b66bf2f787787c0f8" translate="yes" xml:space="preserve">
          <source>Character used to create the header line.  Hyphen is used by default.  If set to &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;''&lt;/code&gt; then header will be disabled.</source>
          <target state="translated">Character used to create the header line. Hyphen is used by default. If set to &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;''&lt;/code&gt; then header will be disabled.</target>
        </trans-unit>
        <trans-unit id="3ca6b396f983947cc6a26bf43fb4e0ddcf11d78e" translate="yes" xml:space="preserve">
          <source>Characters used to draw the arrow which points at syntax errors.</source>
          <target state="translated">Characters used to draw the arrow which points at syntax errors.</target>
        </trans-unit>
        <trans-unit id="73674c5c76baf5aff6459fdd6ffc96e6a71d5beb" translate="yes" xml:space="preserve">
          <source>Configuration settings are stored in &lt;code&gt;pretty_errors.config&lt;/code&gt;, though should be set using &lt;code&gt;pretty_errors.configure()&lt;/code&gt;.  A reference for the default config is stored in &lt;code&gt;pretty_errors.default_config&lt;/code&gt;.</source>
          <target state="translated">Configuration settings are stored in &lt;code&gt;pretty_errors.config&lt;/code&gt; , though should be set using &lt;code&gt;pretty_errors.configure()&lt;/code&gt; . A reference for the default config is stored in &lt;code&gt;pretty_errors.default_config&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ee43023fcc55f9d982b9b0868412e338a24ad25" translate="yes" xml:space="preserve">
          <source>Configuration settings:</source>
          <target state="translated">Configuration settings:</target>
        </trans-unit>
        <trans-unit id="053b345ced8d0d0d2f47ff1f40adb4ba542758e3" translate="yes" xml:space="preserve">
          <source>Default is &lt;code&gt;False&lt;/code&gt;.  When set to &lt;code&gt;True&lt;/code&gt; a header will be written before the &lt;code&gt;inner_exception_message&lt;/code&gt;.</source>
          <target state="translated">Default is &lt;code&gt;False&lt;/code&gt; . When set to &lt;code&gt;True&lt;/code&gt; a header will be written before the &lt;code&gt;inner_exception_message&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="384a6e9623ee89d57bf379a1678db79477e198f0" translate="yes" xml:space="preserve">
          <source>Environment Variable</source>
          <target state="translated">환경 변수</target>
        </trans-unit>
        <trans-unit id="07902e60b5d88dda6517ab05a3ccd7ab757e115d" translate="yes" xml:space="preserve">
          <source>Escape sequence to set color of filenames in exceptions (for example, in a FileNotFoundError).</source>
          <target state="translated">Escape sequence to set color of filenames in exceptions (for example, in a FileNotFoundError).</target>
        </trans-unit>
        <trans-unit id="74b74842021ca136381351229cb2d4b164502d2d" translate="yes" xml:space="preserve">
          <source>Escape sequence to set exception arguments color.</source>
          <target state="translated">Escape sequence to set exception arguments color.</target>
        </trans-unit>
        <trans-unit id="f32eba02e39bfb87724e7b5a98cdd35428878225" translate="yes" xml:space="preserve">
          <source>Escape sequence to set exception color.</source>
          <target state="translated">Escape sequence to set exception color.</target>
        </trans-unit>
        <trans-unit id="ec3f9274955365f28cd6ba39d0275b81f0e9e707" translate="yes" xml:space="preserve">
          <source>Escape sequence to set filename color.</source>
          <target state="translated">Escape sequence to set filename color.</target>
        </trans-unit>
        <trans-unit id="0c85b4b0962c5f07238bd3f6e53ba43c242d7222" translate="yes" xml:space="preserve">
          <source>Escape sequence to set function color.</source>
          <target state="translated">Escape sequence to set function color.</target>
        </trans-unit>
        <trans-unit id="49bd6d9ed1c1a0e47c733a6ee13caacc59970a02" translate="yes" xml:space="preserve">
          <source>Escape sequence to set header color.</source>
          <target state="translated">Escape sequence to set header color.</target>
        </trans-unit>
        <trans-unit id="1b19bae89789a589fe57a6286ce212348d00966a" translate="yes" xml:space="preserve">
          <source>Escape sequence to set line number color.</source>
          <target state="translated">Escape sequence to set line number color.</target>
        </trans-unit>
        <trans-unit id="d991c9a919ccaa4cdaf350aec91c5ebefbf89ea8" translate="yes" xml:space="preserve">
          <source>Escape sequence to set link color.</source>
          <target state="translated">Escape sequence to set link color.</target>
        </trans-unit>
        <trans-unit id="4623ce3fdafcff1d14aedebf2a45842286a5d8c2" translate="yes" xml:space="preserve">
          <source>Escape sequence to set the color of local value length when local is truncated.</source>
          <target state="translated">Escape sequence to set the color of local value length when local is truncated.</target>
        </trans-unit>
        <trans-unit id="06f163ce635d997ecd0261c5327d163b5f7ff0e4" translate="yes" xml:space="preserve">
          <source>Escape sequence to set the color of local variable names.</source>
          <target state="translated">Escape sequence to set the color of local variable names.</target>
        </trans-unit>
        <trans-unit id="b174bf77d7321fe0432fd9fa9cda93e167f1c7f5" translate="yes" xml:space="preserve">
          <source>Escape sequence to set the color of local variable values.</source>
          <target state="translated">Escape sequence to set the color of local variable values.</target>
        </trans-unit>
        <trans-unit id="57bae8730475dec84b14227bc9d23f08b46d1667" translate="yes" xml:space="preserve">
          <source>Escape sequence to set the color of other displayed lines of code.</source>
          <target state="translated">Escape sequence to set the color of other displayed lines of code.</target>
        </trans-unit>
        <trans-unit id="46fafdb1ef47407c6a816e26719e7716ce4851d4" translate="yes" xml:space="preserve">
          <source>Escape sequence to set the color of the arrow which points at syntax errors.</source>
          <target state="translated">Escape sequence to set the color of the arrow which points at syntax errors.</target>
        </trans-unit>
        <trans-unit id="7c08eef68073bbd6c181ba5f02c9c613a690e103" translate="yes" xml:space="preserve">
          <source>Escape sequence to set the color of the line of code which caused the exception.</source>
          <target state="translated">Escape sequence to set the color of the line of code which caused the exception.</target>
        </trans-unit>
        <trans-unit id="ad95fc415823f838eb5279ed3f342874610a6280" translate="yes" xml:space="preserve">
          <source>Escape sequence to set the color of the syntax error token.</source>
          <target state="translated">Escape sequence to set the color of the syntax error token.</target>
        </trans-unit>
        <trans-unit id="65dd40afd9648f925820971764eb968bab924a33" translate="yes" xml:space="preserve">
          <source>Escape sequence to set timestamp color.</source>
          <target state="translated">Escape sequence to set timestamp color.</target>
        </trans-unit>
        <trans-unit id="cac00fb84b97182fbbba6eb91ea496dff59cd2c9" translate="yes" xml:space="preserve">
          <source>For each color there is a matching &lt;code&gt;BRIGHT_&lt;/code&gt; variant (i.e. &lt;code&gt;pretty_errors.BRIGHT_RED&lt;/code&gt;), as well as a &lt;code&gt;_BACKGROUND&lt;/code&gt; variant to set the background color (i.e. &lt;code&gt;pretty_errors.RED_BACKGROUND&lt;/code&gt;).</source>
          <target state="translated">For each color there is a matching &lt;code&gt;BRIGHT_&lt;/code&gt; variant (i.e. &lt;code&gt;pretty_errors.BRIGHT_RED&lt;/code&gt; ), as well as a &lt;code&gt;_BACKGROUND&lt;/code&gt; variant to set the background color (i.e. &lt;code&gt;pretty_errors.RED_BACKGROUND&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f45d5ebb54e6e26f5525fc9955ca64efa01efe1d" translate="yes" xml:space="preserve">
          <source>For the most extensive customization (short of forking the package) you may override the default &lt;code&gt;ExceptionWriter&lt;/code&gt; class, allowing you to tailor the output however you wish.  Typically you will only need to override the &lt;code&gt;write_&lt;/code&gt; methods.</source>
          <target state="translated">For the most extensive customization (short of forking the package) you may override the default &lt;code&gt;ExceptionWriter&lt;/code&gt; class, allowing you to tailor the output however you wish. Typically you will only need to override the &lt;code&gt;write_&lt;/code&gt; methods.</target>
        </trans-unit>
        <trans-unit id="75bcea5dcbe28fd2e110c69133dba539a822ee96" translate="yes" xml:space="preserve">
          <source>Function called to generate timestamp.  Default is &lt;code&gt;time.perf_counter&lt;/code&gt;.</source>
          <target state="translated">Function called to generate timestamp. Default is &lt;code&gt;time.perf_counter&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d1540a59de4e97bee463ad0bcbe7f3426d0647c8" translate="yes" xml:space="preserve">
          <source>Further customization</source>
          <target state="translated">추가 사용자 정의</target>
        </trans-unit>
        <trans-unit id="dccdf1763eff6f5e335fc31bf57ec745dc006fb2" translate="yes" xml:space="preserve">
          <source>How many lines of code to display for each other frame in the stack trace, before and after the line the exception occurred on.</source>
          <target state="translated">How many lines of code to display for each other frame in the stack trace, before and after the line the exception occurred on.</target>
        </trans-unit>
        <trans-unit id="1948a0dfdbf334e50d6a1b3d46fa6db9da66dfc2" translate="yes" xml:space="preserve">
          <source>How many lines of code to display for the top frame, before and after the line the exception occurred on.</source>
          <target state="translated">How many lines of code to display for the top frame, before and after the line the exception occurred on.</target>
        </trans-unit>
        <trans-unit id="e33ae24d36a6a85c51c9f98272ebe2ffc225d618" translate="yes" xml:space="preserve">
          <source>How the filename is displayed: may be &lt;code&gt;pretty_errors.FILENAME_COMPACT&lt;/code&gt;, &lt;code&gt;pretty_errors.FILENAME_EXTENDED&lt;/code&gt;, or &lt;code&gt;pretty_errors.FILENAME_FULL&lt;/code&gt;</source>
          <target state="translated">How the filename is displayed: may be &lt;code&gt;pretty_errors.FILENAME_COMPACT&lt;/code&gt; , &lt;code&gt;pretty_errors.FILENAME_EXTENDED&lt;/code&gt; , or &lt;code&gt;pretty_errors.FILENAME_FULL&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="effe5cc582ab7145f50dfc9922b728a0a364e649" translate="yes" xml:space="preserve">
          <source>If you have not installed it universally you can use it in your project simply by importing it:</source>
          <target state="translated">If you have not installed it universally you can use it in your project simply by importing it:</target>
        </trans-unit>
        <trans-unit id="1731a230e19b1ce97b68deae30452b791dabba2f" translate="yes" xml:space="preserve">
          <source>If you want &lt;code&gt;pretty_errors&lt;/code&gt; to be used whenever you run a python script you must add it to your python startup procedure.  You can do so easily by running:</source>
          <target state="translated">If you want &lt;code&gt;pretty_errors&lt;/code&gt; to be used whenever you run a python script you must add it to your python startup procedure. You can do so easily by running:</target>
        </trans-unit>
        <trans-unit id="77a925c5434e58925cceecfa96b39345a8fe6736" translate="yes" xml:space="preserve">
          <source>If you want to configure the output then use &lt;code&gt;pretty_errors.configure()&lt;/code&gt;, &lt;code&gt;pretty_errors.whitelist()&lt;/code&gt;, &lt;code&gt;pretty_errors.blacklist()&lt;/code&gt;, &lt;code&gt;pretty_errors.pathed_config()&lt;/code&gt;.  For example:</source>
          <target state="translated">If you want to configure the output then use &lt;code&gt;pretty_errors.configure()&lt;/code&gt; , &lt;code&gt;pretty_errors.whitelist()&lt;/code&gt; , &lt;code&gt;pretty_errors.blacklist()&lt;/code&gt; , &lt;code&gt;pretty_errors.pathed_config()&lt;/code&gt; . For example:</target>
        </trans-unit>
        <trans-unit id="b51ace19485e69486bfd4391a46216c9757eaf5b" translate="yes" xml:space="preserve">
          <source>Insert a hard newline even if the line is full.  If &lt;code&gt;line_length&lt;/code&gt; is the same as your console width and this is enabled then you will see double newlines when the line is exactly full, so usually you would only set this if they are different.</source>
          <target state="translated">Insert a hard newline even if the line is full. If &lt;code&gt;line_length&lt;/code&gt; is the same as your console width and this is enabled then you will see double newlines when the line is exactly full, so usually you would only set this if they are different.</target>
        </trans-unit>
        <trans-unit id="64045d287539d6fcea67c5d2eb0b8aacb59015be" translate="yes" xml:space="preserve">
          <source>Message displayed when one exception occurs inside another, between the two exceptions.  Default is &lt;code&gt;None&lt;/code&gt;, which will simply display the exceptions separated by the header.  If you want to emulate the default non-pretty behaviour, use this:</source>
          <target state="translated">Message displayed when one exception occurs inside another, between the two exceptions. Default is &lt;code&gt;None&lt;/code&gt; , which will simply display the exceptions separated by the header. If you want to emulate the default non-pretty behaviour, use this:</target>
        </trans-unit>
        <trans-unit id="c85e2ce05656ef99669b818f80d04b93f29619b7" translate="yes" xml:space="preserve">
          <source>Note that if you use &lt;code&gt;top_first&lt;/code&gt; then the order will be reversed, so you should use a message like this instead:</source>
          <target state="translated">Note that if you use &lt;code&gt;top_first&lt;/code&gt; then the order will be reversed, so you should use a message like this instead:</target>
        </trans-unit>
        <trans-unit id="891a2d5f7eea6a0d79b3fb13af3e18665f3fae4c" translate="yes" xml:space="preserve">
          <source>Note that this will lose some functionality, since &lt;code&gt;pretty_errors&lt;/code&gt; will only have access to what is being output on screen, rather then the entire stack trace.</source>
          <target state="translated">Note that this will lose some functionality, since &lt;code&gt;pretty_errors&lt;/code&gt; will only have access to what is being output on screen, rather then the entire stack trace.</target>
        </trans-unit>
        <trans-unit id="1d5d09e34b5a9e366ba5b4cd1575f748ae131f8f" translate="yes" xml:space="preserve">
          <source>Note you need to be running in a terminal capable of colour output in order to get colour output: in Windows this means powershell, cmder, etc.  If you must use a monochrome terminal then you can call the helper function &lt;code&gt;pretty_errors.mono()&lt;/code&gt;, which will set some config options in a way that is useful for monochrome output.</source>
          <target state="translated">Note you need to be running in a terminal capable of colour output in order to get colour output: in Windows this means powershell, cmder, etc. If you must use a monochrome terminal then you can call the helper function &lt;code&gt;pretty_errors.mono()&lt;/code&gt; , which will set some config options in a way that is useful for monochrome output.</target>
        </trans-unit>
        <trans-unit id="c9c3d4a12a5e31f101216b06ee83ec3d3a66da2f" translate="yes" xml:space="preserve">
          <source>Output will be wrapped at this point.  If set to &lt;code&gt;0&lt;/code&gt; (which is the default) it will automatically match your console width.</source>
          <target state="translated">Output will be wrapped at this point. If set to &lt;code&gt;0&lt;/code&gt; (which is the default) it will automatically match your console width.</target>
        </trans-unit>
        <trans-unit id="6eaa231b0ba7c145731599bafd00ac06bcb2a4c6" translate="yes" xml:space="preserve">
          <source>Pathed Configurations</source>
          <target state="translated">Pathed Configurations</target>
        </trans-unit>
        <trans-unit id="65e1f5970e60ce9a8d7388840be1ba582aae99e4" translate="yes" xml:space="preserve">
          <source>Prettifies Python exception output to make it legible.</source>
          <target state="translated">Prettifies Python exception output to make it legible.</target>
        </trans-unit>
        <trans-unit id="19ca1266390d197a7e8d03d0ff518a0b35c17934" translate="yes" xml:space="preserve">
          <source>Prettifies Python exception output to make it legible. Install it with</source>
          <target state="translated">Prettifies Python exception output to make it legible. Install it with</target>
        </trans-unit>
        <trans-unit id="bb6526001fef0a404a4e764a9add4a40d2b745cc" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;help(pretty_errors.ExceptionWriter)&lt;/code&gt; in the python interpreter for more details.</source>
          <target state="translated">Run &lt;code&gt;help(pretty_errors.ExceptionWriter)&lt;/code&gt; in the python interpreter for more details.</target>
        </trans-unit>
        <trans-unit id="0aa09af6fc1599cd351344ceae1650f4a4b32472" translate="yes" xml:space="preserve">
          <source>Scraping STDERR</source>
          <target state="translated">Scraping STDERR</target>
        </trans-unit>
        <trans-unit id="7cadd2232fd80eaa622ccc3eb9e559ba49278296" translate="yes" xml:space="preserve">
          <source>Sometimes it will be impossible for &lt;code&gt;pretty_errors&lt;/code&gt; to utilize &lt;code&gt;sys.excepthook&lt;/code&gt;: for instance, if you are using a framework which installs its own logging (such as &lt;code&gt;uvicorn&lt;/code&gt;).  In such cases, you can make &lt;code&gt;pretty_errors&lt;/code&gt; scrape the output to &lt;code&gt;stderr&lt;/code&gt; instead, replacing it with its own.  To do so simple call:</source>
          <target state="translated">Sometimes it will be impossible for &lt;code&gt;pretty_errors&lt;/code&gt; to utilize &lt;code&gt;sys.excepthook&lt;/code&gt; : for instance, if you are using a framework which installs its own logging (such as &lt;code&gt;uvicorn&lt;/code&gt; ). In such cases, you can make &lt;code&gt;pretty_errors&lt;/code&gt; scrape the output to &lt;code&gt;stderr&lt;/code&gt; instead, replacing it with its own. To do so simple call:</target>
        </trans-unit>
        <trans-unit id="ecd665863b6fbc7e36a69d562a28ccb64e2f5b26" translate="yes" xml:space="preserve">
          <source>Text string which is displayed at the bottom of the exception report.</source>
          <target state="translated">Text string which is displayed at the bottom of the exception report.</target>
        </trans-unit>
        <trans-unit id="569751eaf567ead4669c204f3594ed029b2bef04" translate="yes" xml:space="preserve">
          <source>Text string which is displayed at the top of the report, just below the header.</source>
          <target state="translated">Text string which is displayed at the top of the report, just below the header.</target>
        </trans-unit>
        <trans-unit id="5c21120b0f69e0630e5e892547e5fb1c4b4084ea" translate="yes" xml:space="preserve">
          <source>Text string which is displayed between each frame of the stack.</source>
          <target state="translated">Text string which is displayed between each frame of the stack.</target>
        </trans-unit>
        <trans-unit id="43694dee7cb325ade6b5a62970532966f6c2b696" translate="yes" xml:space="preserve">
          <source>The maximum number of entries from the stack trace to display.  When &lt;code&gt;0&lt;/code&gt; will display the entire stack, which is the default.</source>
          <target state="translated">The maximum number of entries from the stack trace to display. When &lt;code&gt;0&lt;/code&gt; will display the entire stack, which is the default.</target>
        </trans-unit>
        <trans-unit id="eee55e44aa2627a92e9cd8fc81faf894ded6eae1" translate="yes" xml:space="preserve">
          <source>These color strings will be output before the relevant part of the exception message.  You may include non-escape sequence strings if you wish; if you do not have a terminal which supports color output, or simply want to include extra demarcation.</source>
          <target state="translated">These color strings will be output before the relevant part of the exception message. You may include non-escape sequence strings if you wish; if you do not have a terminal which supports color output, or simply want to include extra demarcation.</target>
        </trans-unit>
        <trans-unit id="327adc418349804a446d4502fd93e01f6df3d616" translate="yes" xml:space="preserve">
          <source>This is the recommended way to use &lt;code&gt;pretty_errors&lt;/code&gt;; apart from being simpler and universal, using it will mean &lt;code&gt;SyntaxError&lt;/code&gt; exceptions also get formatted prettily (which doesn't work if you are manually importing &lt;code&gt;pretty_errors&lt;/code&gt;).</source>
          <target state="translated">This is the recommended way to use &lt;code&gt;pretty_errors&lt;/code&gt; ; apart from being simpler and universal, using it will mean &lt;code&gt;SyntaxError&lt;/code&gt; exceptions also get formatted prettily (which doesn't work if you are manually importing &lt;code&gt;pretty_errors&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="7197ad8a6008af8b256adf2342ec5f64188e78b1" translate="yes" xml:space="preserve">
          <source>When enabled (which is the default) the bottom frame of the stack trace will always be displayed.</source>
          <target state="translated">When enabled (which is the default) the bottom frame of the stack trace will always be displayed.</target>
        </trans-unit>
        <trans-unit id="e93419a0c2bd1d31065a1af90a4d563435ada60b" translate="yes" xml:space="preserve">
          <source>When enabled a link is written below the error location, which VSCode will allow you to click on.</source>
          <target state="translated">When enabled a link is written below the error location, which VSCode will allow you to click on.</target>
        </trans-unit>
        <trans-unit id="d1923053f6620a77c5240f786b9514f47c6f9c07" translate="yes" xml:space="preserve">
          <source>When enabled a timestamp is written in the traceback header.</source>
          <target state="translated">When enabled a timestamp is written in the traceback header.</target>
        </trans-unit>
        <trans-unit id="d03b0ae2c2a945ff1a5cf70791dfa07f5785c84e" translate="yes" xml:space="preserve">
          <source>When enabled all suppressed exceptions in the stack trace will be shown (typically they are suppressed because an exception above them has replaced them).  The normal python behaviour is to hide them.</source>
          <target state="translated">When enabled all suppressed exceptions in the stack trace will be shown (typically they are suppressed because an exception above them has replaced them). The normal python behaviour is to hide them.</target>
        </trans-unit>
        <trans-unit id="2ddf58d51e093b5b0f1271ec13b2de93019cbd5b" translate="yes" xml:space="preserve">
          <source>When enabled an arrow will be displayed for syntax errors, pointing at the offending token.</source>
          <target state="translated">When enabled an arrow will be displayed for syntax errors, pointing at the offending token.</target>
        </trans-unit>
        <trans-unit id="5d9737019bb7914445647ed8e475b72a5dc96368" translate="yes" xml:space="preserve">
          <source>When enabled each line of code will be truncated to fit the line length.</source>
          <target state="translated">When enabled each line of code will be truncated to fit the line length.</target>
        </trans-unit>
        <trans-unit id="738861760cf2835c6475e1b1f3f2c81484883576" translate="yes" xml:space="preserve">
          <source>When enabled the exception is displayed above the stack trace.</source>
          <target state="translated">When enabled the exception is displayed above the stack trace.</target>
        </trans-unit>
        <trans-unit id="538463c861e844ebc8e1e606f171337fb025be1e" translate="yes" xml:space="preserve">
          <source>When enabled the exception is displayed below the stack trace.</source>
          <target state="translated">When enabled the exception is displayed below the stack trace.</target>
        </trans-unit>
        <trans-unit id="febdd93ed7ff2e7cbd9afed4146c9f8ea94bc07f" translate="yes" xml:space="preserve">
          <source>When enabled the line number will be displayed first, rather than the filename.</source>
          <target state="translated">When enabled the line number will be displayed first, rather than the filename.</target>
        </trans-unit>
        <trans-unit id="fc34494df7c23e8c504a5a11272ebf711dad37df" translate="yes" xml:space="preserve">
          <source>When enabled the reset escape sequence will be written to stdout as well as stderr; turn this on if your console is being left with the wrong color.</source>
          <target state="translated">When enabled the reset escape sequence will be written to stdout as well as stderr; turn this on if your console is being left with the wrong color.</target>
        </trans-unit>
        <trans-unit id="3cd20861330a9ad8848f574234efd9d11a9d7f87" translate="yes" xml:space="preserve">
          <source>When enabled the stack trace will be reversed, displaying the top of the stack first.</source>
          <target state="translated">When enabled the stack trace will be reversed, displaying the top of the stack first.</target>
        </trans-unit>
        <trans-unit id="078fdf0ff029a7ffba1b61e5fa10f99b75b8bccd" translate="yes" xml:space="preserve">
          <source>When enabled the values of displayed local variables will be truncated to fit the line length.</source>
          <target state="translated">When enabled the values of displayed local variables will be truncated to fit the line length.</target>
        </trans-unit>
        <trans-unit id="0500c6393ef1121c554c3e123b07c39f8510ab08" translate="yes" xml:space="preserve">
          <source>When enabled, local variables appearing in other stack frame code will be displayed with their values.</source>
          <target state="translated">When enabled, local variables appearing in other stack frame code will be displayed with their values.</target>
        </trans-unit>
        <trans-unit id="7567de1ae682706f003ddae7e34ceb8b6552c5fc" translate="yes" xml:space="preserve">
          <source>When enabled, local variables appearing in the top stack frame code will be displayed with their values.</source>
          <target state="translated">When enabled, local variables appearing in the top stack frame code will be displayed with their values.</target>
        </trans-unit>
        <trans-unit id="28de675c80489af5ada97b55da668eba01f193f2" translate="yes" xml:space="preserve">
          <source>Whitelist / Blacklist:</source>
          <target state="translated">Whitelist / Blacklist:</target>
        </trans-unit>
        <trans-unit id="324c0c9dddd7a873a61ce9aa3dd8091eef0fb7b3" translate="yes" xml:space="preserve">
          <source>You may set up alternate configurations, which are triggered by the path to the code file of the frame.  For example, if you were not interested in the system frames (those under 'c:/python') but did not want to hide them completely by using the &lt;code&gt;blacklist&lt;/code&gt; you could do this:</source>
          <target state="translated">You may set up alternate configurations, which are triggered by the path to the code file of the frame. For example, if you were not interested in the system frames (those under 'c:/python') but did not want to hide them completely by using the &lt;code&gt;blacklist&lt;/code&gt; you could do this:</target>
        </trans-unit>
        <trans-unit id="dee0d4d54be1995c1d482bfb942830105112b549" translate="yes" xml:space="preserve">
          <source>You may temporarily disable &lt;code&gt;pretty_errors&lt;/code&gt; by setting the environment variable &lt;code&gt;PYTHON_PRETTY_ERRORS&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.  i.e. at a command prompt:</source>
          <target state="translated">You may temporarily disable &lt;code&gt;pretty_errors&lt;/code&gt; by setting the environment variable &lt;code&gt;PYTHON_PRETTY_ERRORS&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; . i.e. at a command prompt:</target>
        </trans-unit>
        <trans-unit id="71a19142c3b1062b4f07b50ae3aa7c41bb2b02ce" translate="yes" xml:space="preserve">
          <source>You may use the functions &lt;code&gt;whitelist(path)&lt;/code&gt; and &lt;code&gt;blacklist(path)&lt;/code&gt; to add paths which will be necessary (&lt;code&gt;whitelist&lt;/code&gt;) or excluded (&lt;code&gt;blacklist&lt;/code&gt;).  The top frame of the stack is never excluded.</source>
          <target state="translated">You may use the functions &lt;code&gt;whitelist(path)&lt;/code&gt; and &lt;code&gt;blacklist(path)&lt;/code&gt; to add paths which will be necessary ( &lt;code&gt;whitelist&lt;/code&gt; ) or excluded ( &lt;code&gt;blacklist&lt;/code&gt; ). The top frame of the stack is never excluded.</target>
        </trans-unit>
        <trans-unit id="9308739d6cf529f87a3216458fb0b4d42ed114a9" translate="yes" xml:space="preserve">
          <source>pretty-errors</source>
          <target state="translated">pretty-errors</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
