<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/adafruit-blinka/">
    <body>
      <group id="adafruit-blinka">
        <trans-unit id="7fe096fdbb0c5f131aa2e255f53dc284ae5b4368" translate="yes" xml:space="preserve">
          <source>. Open the index.html in your browser to
view them. It will also (due to -W) error out on any warning like Travis will. This is a good way to
locally verify it will pass.</source>
          <target state="translated">. 이를 보려면 브라우저에서 index.html을여십시오. 또한 Travis와 같은 경고에서 (-W로 인해) 오류가 발생합니다. 이것은 통과 할 것인지 로컬에서 확인하는 좋은 방법입니다.</target>
        </trans-unit>
        <trans-unit id="33344901740620a71025dc80505c59c7b6bfa894" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;analogio&lt;/strong&gt; - analog input/output pins, using pin identities from board+microcontroller packages</source>
          <target state="translated">&lt;strong&gt;analogio-&lt;/strong&gt; 보드 + 마이크로 컨트롤러 패키지의 핀 ID를 사용하는 아날로그 입력 / 출력 핀</target>
        </trans-unit>
        <trans-unit id="715e0968514a5ceb268c09813f20aa29520194d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bitbangio&lt;/strong&gt; - software-driven interfaces for I2C, SPI</source>
          <target state="translated">&lt;strong&gt;bitbangio&lt;/strong&gt; -I2C, SPI를위한 소프트웨어 기반 인터페이스</target>
        </trans-unit>
        <trans-unit id="0372eb4a27ec9f5d176c1b38834c622dc11b5c96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;board&lt;/strong&gt; - breakout-specific pin identities</source>
          <target state="translated">&lt;strong&gt;보드&lt;/strong&gt; -브레이크 아웃 별 핀 ID</target>
        </trans-unit>
        <trans-unit id="a1ea219213044b92c3451b17e53699d6cf545ae0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;busio&lt;/strong&gt; - hardware-driven interfaces for I2C, SPI, UART</source>
          <target state="translated">&lt;strong&gt;busio&lt;/strong&gt; -I2C, SPI, UART를위한 하드웨어 기반 인터페이스</target>
        </trans-unit>
        <trans-unit id="cefdf4d2cbd2c4ac7a0e779108fb38ab9fb70eeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;digitalio&lt;/strong&gt; - digital input/output pins, using pin identities from board+microcontroller packages</source>
          <target state="translated">&lt;strong&gt;digitalio-&lt;/strong&gt; 보드 + 마이크로 컨트롤러 패키지의 핀 ID를 사용하는 디지털 입력 / 출력 핀</target>
        </trans-unit>
        <trans-unit id="6bb0ba190d3b87c796e8108631548ef9cc146f56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;microcontroller&lt;/strong&gt; - chip-specific pin identities</source>
          <target state="translated">&lt;strong&gt;마이크로 컨트롤러&lt;/strong&gt; -칩별 핀 ID</target>
        </trans-unit>
        <trans-unit id="7a70bca1d4caef86ae690ca1f7f1bc9052e4b4db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;time&lt;/strong&gt; * - substitute functions monkey-patched to time module</source>
          <target state="translated">&lt;strong&gt;time&lt;/strong&gt; *-시간 모듈에 원숭이 패치 된 대체 함수</target>
        </trans-unit>
        <trans-unit id="a3d5329836aaf4177c98af048f53ef8e67274571" translate="yes" xml:space="preserve">
          <source>An example log from running the suites is &lt;a href=&quot;https://github.com/cefn/Adafruit_Micropython_Blinka/issues/2#issuecomment-366713394&quot;&gt;here&lt;/a&gt; .</source>
          <target state="translated">스위트 실행의 예제 로그는 &lt;a href=&quot;https://github.com/cefn/Adafruit_Micropython_Blinka/issues/2#issuecomment-366713394&quot;&gt;여기에 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e26fea122a58c840dcfae6e063bef9434cf1bac1" translate="yes" xml:space="preserve">
          <source>At the time of writing (&lt;a href=&quot;https://github.com/cefn/Adafruit_Micropython_Blinka/tree/7fc1f8ab477124628a5afebbf6826005955805f9&quot;&gt;git:7fc1f8ab&lt;/a&gt;),
the following sequence runs through some basic testing of the digitalio compatibility layer&amp;hellip;</source>
          <target state="translated">작성 시점 ( &lt;a href=&quot;https://github.com/cefn/Adafruit_Micropython_Blinka/tree/7fc1f8ab477124628a5afebbf6826005955805f9&quot;&gt;git : 7fc1f8ab&lt;/a&gt; )에서 다음 시퀀스는 digitalio 호환성 계층의 몇 가지 기본 테스트를 통해 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="99b633b8b55f4a4a0e4b874bf81f4324ac607609" translate="yes" xml:space="preserve">
          <source>Building locally</source>
          <target state="translated">로컬로 구축</target>
        </trans-unit>
        <trans-unit id="cb69dd8799c3abdb809d444b44a231f674fa024f" translate="yes" xml:space="preserve">
          <source>CircuitPython APIs for non-CircuitPython versions of Python such as CPython on Linux and MicroPython.</source>
          <target state="translated">Linux 및 MicroPython의 CPython과 같은 Python의 비 CircuitPython 버전을위한 CircuitPython API.</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">기여</target>
        </trans-unit>
        <trans-unit id="d56545e75d95b2435cc9c62cc398e3172c149ff4" translate="yes" xml:space="preserve">
          <source>Contributions are welcome! Please read our &lt;a href=&quot;https://github.com/adafruit/Adafruit_Blinka/blob/master/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;
before contributing to help this project stay welcoming.</source>
          <target state="translated">기부를 환영합니다! 이 프로젝트가 계속 환영받을 수 있도록 기여하기 전에 &lt;a href=&quot;https://github.com/adafruit/Adafruit_Blinka/blob/master/CODE_OF_CONDUCT.md&quot;&gt;행동 강령을&lt;/a&gt; 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">의존성</target>
        </trans-unit>
        <trans-unit id="b18e57b632a145ef125d8087b991254aaba98bc7" translate="yes" xml:space="preserve">
          <source>Installing from PyPI</source>
          <target state="translated">PyPI에서 설치</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">소개</target>
        </trans-unit>
        <trans-unit id="d86e86d26d7ed5831dd833e50db15beabe3b427a" translate="yes" xml:space="preserve">
          <source>Now, once you have the virtual environment activated:</source>
          <target state="translated">이제 가상 환경이 활성화되면 :</target>
        </trans-unit>
        <trans-unit id="6a19b9a532649d90147e5a88a947e03c26bb8062" translate="yes" xml:space="preserve">
          <source>On supported GNU/Linux systems like the Raspberry Pi, you can install the driver locally &lt;a href=&quot;https://pypi.org/project/Adafruit-Blinka/&quot;&gt;from
PyPI&lt;/a&gt;. To install for current user:</source>
          <target state="translated">Raspberry Pi와 같이 지원되는 GNU / Linux 시스템에서는 &lt;a href=&quot;https://pypi.org/project/Adafruit-Blinka/&quot;&gt;PyPI에서&lt;/a&gt; 로컬로 드라이버를 설치할 수 있습니다 . 현재 사용자 용으로 설치하려면 :</target>
        </trans-unit>
        <trans-unit id="3e5c433f7d8cae971116b806e0ec8bd42c01c056" translate="yes" xml:space="preserve">
          <source>Sphinx documentation</source>
          <target state="translated">스핑크스 문서</target>
        </trans-unit>
        <trans-unit id="3adf46447ec01b8679115961376c4e99e2c224f1" translate="yes" xml:space="preserve">
          <source>Sphinx is used to build the documentation based on rST files and comments in the code. First,
install dependencies (feel free to reuse the virtual environment from above):</source>
          <target state="translated">Sphinx는 rST 파일과 코드의 주석을 기반으로 문서를 작성하는 데 사용됩니다. 먼저 종속성을 설치하십시오 (위의 가상 환경을 자유롭게 재사용 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="e77156778fbb21961728cc3fa1aae851da6b2f08" translate="yes" xml:space="preserve">
          <source>The Micropython compatibility layers described above are intended to provide a CircuitPython-like API for devices which
are running CPython or Micropython. Since corresponding packages should be built-in to any standard
CircuitPython image, they have no value on a device already running CircuitPython and would likely conflict in unhappy ways.</source>
          <target state="translated">위에서 설명한 Micropython 호환성 계층은 CPython 또는 Micropython을 실행하는 장치에 CircuitPython과 유사한 API를 제공하기위한 것입니다. 해당 패키지는 표준 CircuitPython 이미지에 내장되어야하기 때문에 이미 CircuitPython을 실행중인 장치에는 가치가 없으며 불행한 방식으로 충돌 할 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f19ffd32ecda6eff8a86c43a9d74b52ce7b09b7" translate="yes" xml:space="preserve">
          <source>The test suites in the test/src folder under &lt;strong&gt;testing.universal&lt;/strong&gt; are by design
intended to run on &lt;em&gt;either&lt;/em&gt; CircuitPython &lt;em&gt;or&lt;/em&gt; Micropython+compatibility layer to prove conformance.</source>
          <target state="translated">아래 테스트 / src에 폴더에있는 테스트 스위트 &lt;strong&gt;testing.universal는&lt;/strong&gt; 디자인에서 실행하도록 구성으로되어 &lt;em&gt;하나&lt;/em&gt; CircuitPython &lt;em&gt;또는&lt;/em&gt; 적합성을 증명하기 위해 Micropython + 호환성 계층.</target>
        </trans-unit>
        <trans-unit id="5268ee3ffd38731aedcd480c195ec7624dcb46e8" translate="yes" xml:space="preserve">
          <source>This repository contains a selection of packages mirroring the CircuitPython API
on hosts running micropython. Working code exists to emulate the CircuitPython packages;</source>
          <target state="translated">이 저장소에는 micropython을 실행하는 호스트에서 CircuitPython API를 미러링하는 다양한 패키지가 포함되어 있습니다. CircuitPython 패키지를 에뮬레이트하기위한 작업 코드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="53def67f6cbb39bce727a19f3a4558b94445af77" translate="yes" xml:space="preserve">
          <source>This will output the documentation to</source>
          <target state="translated">이것은 문서를 다음으로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="20630bf0bbe606a8cc817859bc925353782b3826" translate="yes" xml:space="preserve">
          <source>To install in a virtual environment in your current project:</source>
          <target state="translated">현재 프로젝트의 가상 환경에 설치하려면 :</target>
        </trans-unit>
        <trans-unit id="31c2d531b91fc97976f1c8ace6110a618ddf43c7" translate="yes" xml:space="preserve">
          <source>To install system-wide (this may be required in some cases):</source>
          <target state="translated">시스템 전체에 설치하려면 (경우에 따라 필요할 수 있음) :</target>
        </trans-unit>
        <trans-unit id="342c659777997bec12f413246e5e24d6a8317e2a" translate="yes" xml:space="preserve">
          <source>Usage Example</source>
          <target state="translated">사용 예</target>
        </trans-unit>
        <trans-unit id="39c20b829084d89585fba49031f96b4b0c49208a" translate="yes" xml:space="preserve">
          <source>docs/_build/html</source>
          <target state="translated">docs / _build / html</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
