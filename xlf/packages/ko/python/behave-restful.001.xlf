<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/behave-restful/">
    <body>
      <group id="behave-restful">
        <trans-unit id="f17c935d78d8025c4ff04d002202621472fb1374" translate="yes" xml:space="preserve">
          <source>.feature</source>
          <target state="translated">.특색</target>
        </trans-unit>
        <trans-unit id="8ea74df87fad70ead7ffb3650322e7497b4ec273" translate="yes" xml:space="preserve">
          <source>Although, Behave Restful is implemented in &lt;a href=&quot;http://www.python.org&quot;&gt;python&lt;/a&gt; and
uses &lt;a href=&quot;https://pythonhosted.org/behave/&quot;&gt;behave&lt;/a&gt; as underlying framework, it can
test services implemented in any language as easy as:</source>
          <target state="translated">행동하라 평안한가 구현되어 있지만 &lt;a href=&quot;http://www.python.org&quot;&gt;파이썬&lt;/a&gt; 및 사용이 &lt;a href=&quot;https://pythonhosted.org/behave/&quot;&gt;행동&lt;/a&gt; 프레임 워크를 기본으로, 그것은 쉬운만큼 어떤 언어로 구현 서비스를 테스트 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="351e4daed345f2c8b5fe908c179ee921947fde29" translate="yes" xml:space="preserve">
          <source>And under</source>
          <target state="translated">그리고 아래</target>
        </trans-unit>
        <trans-unit id="b8094bbf8aa262c6c50d4310241e1ccb735deced" translate="yes" xml:space="preserve">
          <source>As you can see in the example, we send a POST request to the specified url with
a JSON payload, and we can validate the result very easy. First, we verify that
the status of the response is CREATED (it succeeds). Then we validate the
response JSON body using the expected &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON Schema&lt;/a&gt;.
Finally, we validate specific values in the response using
&lt;a href=&quot;http://goessner.net/articles/JsonPath/&quot;&gt;JSONPath&lt;/a&gt;</source>
          <target state="translated">예에서 볼 수 있듯이 JSON 페이로드를 사용하여 지정된 URL에 POST 요청을 보내고 결과를 매우 쉽게 확인할 수 있습니다. 먼저 응답 상태가 CREATED (성공)인지 확인합니다. 그런 다음 예상 &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON 스키마를&lt;/a&gt; 사용하여 응답 JSON 본문의 유효성을 검사합니다 . 마지막으로 &lt;a href=&quot;http://goessner.net/articles/JsonPath/&quot;&gt;JSONPath를&lt;/a&gt; 사용하여 응답의 특정 값을 검증합니다.</target>
        </trans-unit>
        <trans-unit id="110b6add49421587b83cabd70cca640075714133" translate="yes" xml:space="preserve">
          <source>Behave Restful is a Behavior Driven Development (BDD) framework based on
&lt;a href=&quot;https://pythonhosted.org/behave/&quot;&gt;behave&lt;/a&gt;, that implements a language suitable
to test and validate REST APIs and Services. It leverages the power of the
&lt;a href=&quot;https://github.com/cucumber/cucumber/wiki/Gherkin&quot;&gt;gherkin&lt;/a&gt; language to write
business readable tests that validate the behavior of REST APIs.</source>
          <target state="translated">Behave Restful은 &lt;a href=&quot;https://pythonhosted.org/behave/&quot;&gt;behave를&lt;/a&gt; 기반으로 하는 BDD (Behavior Driven Development) 프레임 워크로 , REST API 및 서비스를 테스트하고 검증하는 데 적합한 언어를 구현합니다. &lt;a href=&quot;https://github.com/cucumber/cucumber/wiki/Gherkin&quot;&gt;Gherkin&lt;/a&gt; 언어 의 힘을 활용하여 REST API의 동작을 검증하는 비즈니스 판독 가능 테스트를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="c2dbbf414f2c22d8504a7476c8d7bbbce85dbd40" translate="yes" xml:space="preserve">
          <source>Implements Gherking language for REST services.</source>
          <target state="translated">REST 서비스를위한 Gherking 언어를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="1409eb5d5ef9262a28bad7592a0fb7271260da02" translate="yes" xml:space="preserve">
          <source>In the root of your</source>
          <target state="translated">당신의 뿌리에</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">설정</target>
        </trans-unit>
        <trans-unit id="c364d94cb5cbcc27f829b4029ae0cf60ec6e8e7c" translate="yes" xml:space="preserve">
          <source>To add support for</source>
          <target state="translated">지원을 추가하려면</target>
        </trans-unit>
        <trans-unit id="3872b089ae064a49ce5a8d6971b62e528d745510" translate="yes" xml:space="preserve">
          <source>Use pip to install behave-restful in your project</source>
          <target state="translated">pip를 사용하여 프로젝트에 안정된 동작 설치</target>
        </trans-unit>
        <trans-unit id="f6a2dab741ac7f9f7391535bb934e2a1bbc018f5" translate="yes" xml:space="preserve">
          <source>You can do this simply by adding two boilerplate files to your project:</source>
          <target state="translated">프로젝트에 두 개의 상용구 파일을 추가하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="60ad4f3d2e9b04a9b0a0bb97ab6a8a4c018b785e" translate="yes" xml:space="preserve">
          <source>__init__.py</source>
          <target state="translated">__init__.py</target>
        </trans-unit>
        <trans-unit id="c7d4c1b0859e93a58aa2045c97c6d54040328c27" translate="yes" xml:space="preserve">
          <source>add this</source>
          <target state="translated">이거 추가 해봐</target>
        </trans-unit>
        <trans-unit id="6cd2b41d441174b0570e9d508b53d1c08393037d" translate="yes" xml:space="preserve">
          <source>behave-restful</source>
          <target state="translated">평안한</target>
        </trans-unit>
        <trans-unit id="3156c72b3e61651ad6b0afdfddd2254e01e92052" translate="yes" xml:space="preserve">
          <source>directory, add this</source>
          <target state="translated">디렉토리, 이것을 추가하십시오</target>
        </trans-unit>
        <trans-unit id="ef7d19d085c41481345d5aa44b1f37d6d542bee5" translate="yes" xml:space="preserve">
          <source>environment.py</source>
          <target state="translated">environment.py</target>
        </trans-unit>
        <trans-unit id="4f944542e06cd6f28fa72685120ec1c9e2b84a27" translate="yes" xml:space="preserve">
          <source>features</source>
          <target state="translated">풍모</target>
        </trans-unit>
        <trans-unit id="0c18ce6aaf6d3425612ad3fc2207c928a213d6c4" translate="yes" xml:space="preserve">
          <source>features/steps</source>
          <target state="translated">기능 / 단계</target>
        </trans-unit>
        <trans-unit id="d0998110d4f271571ea799f05b153504a56056c0" translate="yes" xml:space="preserve">
          <source>file:</source>
          <target state="translated">파일:</target>
        </trans-unit>
        <trans-unit id="90681506e2986a95d0223eb53d496a9fad16069e" translate="yes" xml:space="preserve">
          <source>files, you need to include behave-restful&amp;rsquo;s environment and step definitions.</source>
          <target state="translated">파일의 경우 behave-restful의 환경 및 단계 정의를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="c5eb2f9701545cd965cdffe5d8e13aa07314e343" translate="yes" xml:space="preserve">
          <source>steps in your</source>
          <target state="translated">당신의 단계</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
