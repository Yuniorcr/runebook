<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/klang/">
    <body>
      <group id="klang">
        <trans-unit id="816806c208b593a0d734ecaeccac60407494d013" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arpeggiator_demo.py&lt;/code&gt;: Two synthesizer patch with an arpeggiator and some sound effects</source>
          <target state="translated">&lt;code&gt;arpeggiator_demo.py&lt;/code&gt; : 아르페지 에이터와 일부 음향 효과가있는 두 개의 신디사이저 패치</target>
        </trans-unit>
        <trans-unit id="3701138196ccc780a6be54908ac9897313498358" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;audio_file_demo.py&lt;/code&gt;: Looped audio file playback (&lt;code&gt;gong.wav&lt;/code&gt; sample) with audio effects</source>
          <target state="translated">&lt;code&gt;audio_file_demo.py&lt;/code&gt; : 오디오 효과가있는 반복 오디오 파일 재생 ( &lt;code&gt;gong.wav&lt;/code&gt; 샘플)</target>
        </trans-unit>
        <trans-unit id="e90384b946042ef6c00878b81f9f27ac421f731b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hello_world.py&lt;/code&gt;: 440 Hz sine wave generator</source>
          <target state="translated">&lt;code&gt;hello_world.py&lt;/code&gt; : 440Hz 사인파 발생기</target>
        </trans-unit>
        <trans-unit id="0283dfe30f97ecac46429bccb5fdc5882a4c5dd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;micro_rhythm_demo.py&lt;/code&gt;: Kick and Hi-Hat pattern where the latter is phrased with a micro rhythm</source>
          <target state="translated">&lt;code&gt;micro_rhythm_demo.py&lt;/code&gt; : 후자를 마이크로 리듬으로 표현하는 Kick and Hi-Hat 패턴</target>
        </trans-unit>
        <trans-unit id="c7931d00d9e91fa30842fe330e67666fe9555334" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sequencer_demo.py&lt;/code&gt;: Techno patch with sequencer</source>
          <target state="translated">&lt;code&gt;sequencer_demo.py&lt;/code&gt; : 시퀀서가있는 테크노 패치</target>
        </trans-unit>
        <trans-unit id="6edfecd7cdb7325911fb76dbe60311c57a5655c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synthesizer_demo.py&lt;/code&gt;: This has to be started as root. Computer keyboard playable monophonic synthesizer</source>
          <target state="translated">&lt;code&gt;synthesizer_demo.py&lt;/code&gt; : 루트로 시작해야합니다. 컴퓨터 키보드 연주 가능 모노 신디사이저</target>
        </trans-unit>
        <trans-unit id="5a7ae80fd2b3e033d84af64e9e56e08a32819160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tempo_aware_effects.py&lt;/code&gt;: Modulated noise with time synced effects</source>
          <target state="translated">&lt;code&gt;tempo_aware_effects.py&lt;/code&gt; : 시간 동기화 효과가있는 변조 된 노이즈</target>
        </trans-unit>
        <trans-unit id="6a9bc4c6882b5e849fa83144c9f59e6e47d1b566" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Message&lt;/em&gt; (&lt;code&gt;MessageInput&lt;/code&gt; and &lt;code&gt;MessageOutput&lt;/code&gt; classes)</source>
          <target state="translated">&lt;em&gt;Message&lt;/em&gt; ( &lt;code&gt;MessageInput&lt;/code&gt; 및 &lt;code&gt;MessageOutput&lt;/code&gt; 클래스)</target>
        </trans-unit>
        <trans-unit id="3a7f1be1a8849b278219604a04d39cb7ce75691c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Value&lt;/em&gt; (&lt;code&gt;Input&lt;/code&gt; and &lt;code&gt;Output&lt;/code&gt; classes)</source>
          <target state="translated">&lt;em&gt;값&lt;/em&gt; ( &lt;code&gt;Input&lt;/code&gt; 및 &lt;code&gt;Output&lt;/code&gt; 클래스)</target>
        </trans-unit>
        <trans-unit id="2f69170b107beda81e7db13c762077152dded274" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alexander Theler&lt;/strong&gt; - &lt;a href=&quot;https://github.com/atheler&quot;&gt;GitHub&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Alexander Theler&lt;/strong&gt; - &lt;a href=&quot;https://github.com/atheler&quot;&gt;GitHub&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d9540ff93a75d47409d6a0aa37491da117ecdf8" translate="yes" xml:space="preserve">
          <source>Acknowledgments</source>
          <target state="translated">감사의 말</target>
        </trans-unit>
        <trans-unit id="17ebfd61dbc846af4e8ab83c293ea391ffcbe866" translate="yes" xml:space="preserve">
          <source>Andreas Steiner &lt;a href=&quot;http://smokeandmirrors.ch&quot;&gt;Smoke And Mirrors&lt;/a&gt;</source>
          <target state="translated">Andreas Steiner &lt;a href=&quot;http://smokeandmirrors.ch&quot;&gt;연기와 거울&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2430c899faf14e96459e3b7eeb50032f26f81f74" translate="yes" xml:space="preserve">
          <source>As always when programming with sound: Unplug your headphones or be very sure of what you are doing! Also with low headphone volume bugs in the code can result in very unpleasant loud noises which could probably impair your hearing. Be careful!</source>
          <target state="translated">사운드로 프로그래밍 할 때 항상 그렇듯이 헤드폰을 분리하거나 무엇을하고 있는지 확인하십시오! 또한 헤드폰 볼륨이 낮은 코드의 버그로 인해 청각을 손상시킬 수있는 매우 불쾌한 시끄러운 소음이 발생할 수 있습니다. 조심해!</target>
        </trans-unit>
        <trans-unit id="74b459ca20995f1d4b9e9c9bef74f853f91fc71a" translate="yes" xml:space="preserve">
          <source>Audio can be written to disk as a WAV file with the &lt;code&gt;filepath&lt;/code&gt; argument.</source>
          <target state="translated">오디오는 &lt;code&gt;filepath&lt;/code&gt; 인수를 사용하여 WAV 파일로 디스크에 기록 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5fda23d62015b99fb2a9f86b38bcdf2bdf7609c8" translate="yes" xml:space="preserve">
          <source>Author</source>
          <target state="translated">저자</target>
        </trans-unit>
        <trans-unit id="54f4d37df10cb844507ee3226891ad42c5fcf2ea" translate="yes" xml:space="preserve">
          <source>Block based synthesis and music library</source>
          <target state="translated">블록 기반 합성 및 음악 라이브러리</target>
        </trans-unit>
        <trans-unit id="c1390b1492af1787012815a0da16bd2f045db787" translate="yes" xml:space="preserve">
          <source>Block based synthesis and music library for Python. &lt;em&gt;Klang&lt;/em&gt; is German for sound.</source>
          <target state="translated">Python 용 블록 기반 합성 및 음악 라이브러리. &lt;em&gt;Klang&lt;/em&gt; 은 독일어로 소리를냅니다.</target>
        </trans-unit>
        <trans-unit id="d47cf0f37c9b3b717ad801771de4c81a8f106260" translate="yes" xml:space="preserve">
          <source>Coding Style</source>
          <target state="translated">코딩 스타일</target>
        </trans-unit>
        <trans-unit id="8f3509b64e0ea82c53329cb49a7756bd1ced3566" translate="yes" xml:space="preserve">
          <source>Connections</source>
          <target state="translated">사이</target>
        </trans-unit>
        <trans-unit id="b59f395125d5c98d1c8ec9dd2acb1b95bb38c7fe" translate="yes" xml:space="preserve">
          <source>Defining The Network</source>
          <target state="translated">네트워크 정의</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">예</target>
        </trans-unit>
        <trans-unit id="53da8f452091b7957a85d7c9e3f95c5fbd375889" translate="yes" xml:space="preserve">
          <source>For developing you can link your working copy with</source>
          <target state="translated">개발을 위해 작업 사본을</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="9d6cd3eb8258869b1e470d6d71d4709f02b7760e" translate="yes" xml:space="preserve">
          <source>In the following script we create a 440 Hz sine oscillator which output gets send to the sound card.</source>
          <target state="translated">다음 스크립트에서는 출력이 사운드 카드로 전송되는 440Hz 사인 오실레이터를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e38432618ce4d39079fc324e614d4d92a2815160" translate="yes" xml:space="preserve">
          <source>Installing</source>
          <target state="translated">설치 중</target>
        </trans-unit>
        <trans-unit id="2c9982247f7b982c8622076d2c62a9502df46d5f" translate="yes" xml:space="preserve">
          <source>Klang</source>
          <target state="translated">클랑</target>
        </trans-unit>
        <trans-unit id="64853241b14df743e0222ef2f4d10f4da30e5c76" translate="yes" xml:space="preserve">
          <source>Klang Primer</source>
          <target state="translated">클랑 프라이머</target>
        </trans-unit>
        <trans-unit id="f0b0424ef4a91ee4328d7b71aca91846cca268ac" translate="yes" xml:space="preserve">
          <source>Klang can be installed via PyPi / pip or directly via setup.py. Note that there is a C extension which needs to be compiled (&lt;code&gt;klang/audio/_envelope.c&lt;/code&gt;). C extensions can be compiled in place with:</source>
          <target state="translated">Klang은 PyPi / pip를 통해 또는 setup.py를 통해 직접 설치할 수 있습니다. 컴파일해야하는 C 확장이 있습니다 ( &lt;code&gt;klang/audio/_envelope.c&lt;/code&gt; ). C 확장은 다음을 사용하여 컴파일 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb5f730495b25f833174ca19e1dafecaae254f52" translate="yes" xml:space="preserve">
          <source>Klang provides various audio related blocks. Every block can have multiple in- and outputs and by connecting them with each other we can define our network. Once we are finished with patching we can run our network with by calling &lt;code&gt;run_klang(*blocks)&lt;/code&gt;. This function only needs some blocks which belong to the network. It will then automatically discovers the other blocks of the network and deduce an appropriate block execution order.</source>
          <target state="translated">Klang은 다양한 오디오 관련 블록을 제공합니다. 모든 블록은 여러 개의 입력 및 출력을 가질 수 있으며 서로 연결하여 네트워크를 정의 할 수 있습니다. 패치 작업이 끝나면 &lt;code&gt;run_klang(*blocks)&lt;/code&gt; 호출하여 네트워크를 실행할 수 있습니다 . 이 기능은 네트워크에 속한 일부 블록 만 필요합니다. 그런 다음 네트워크의 다른 블록을 자동으로 발견하고 적절한 블록 실행 순서를 추론합니다.</target>
        </trans-unit>
        <trans-unit id="255d905a98267124b10c472a46ae093d858374cf" translate="yes" xml:space="preserve">
          <source>Lawrence Markwalder &lt;a href=&quot;https://github.com/lmarkwalder&quot;&gt;GitHub&lt;/a&gt;</source>
          <target state="translated">로렌스 마크 월더 &lt;a href=&quot;https://github.com/lmarkwalder&quot;&gt;GitHub&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d8cdc699ea5f458fc90701476c983e18e7647fe" translate="yes" xml:space="preserve">
          <source>Mix operator &lt;code&gt;+&lt;/code&gt;: Mix multiple value outputs together.</source>
          <target state="translated">혼합 연산자 &lt;code&gt;+&lt;/code&gt; : 여러 값 출력을 함께 혼합합니다.</target>
        </trans-unit>
        <trans-unit id="8ffbc72881c754687b47f1fe2e0742d66d2ebeee" translate="yes" xml:space="preserve">
          <source>Nico Neureiter &lt;a href=&quot;https://github.com/NicoNeureiter&quot;&gt;GitHub&lt;/a&gt;</source>
          <target state="translated">Nico Neureiter &lt;a href=&quot;https://github.com/NicoNeureiter&quot;&gt;GitHub&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="426d89482d8be386273f5602c3f7ac8f8088099f" translate="yes" xml:space="preserve">
          <source>PEP8 / Google flavored. With the one exception for variable and argument names (&lt;code&gt;camelCase&lt;/code&gt;). Function and in methods are &lt;code&gt;snake_case()&lt;/code&gt;.</source>
          <target state="translated">PEP8 / Google 맛. 변수 및 인수 이름 ( &lt;code&gt;camelCase&lt;/code&gt; )에 대한 한 가지 예외가 있습니다. 함수와 메서드는 &lt;code&gt;snake_case()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="50a9800ec419565cdbdae700963cde92d76fdd1e" translate="yes" xml:space="preserve">
          <source>Pipe operator &lt;code&gt;|&lt;/code&gt;: Connect multiple blocks in series.</source>
          <target state="translated">파이프 연산자 &lt;code&gt;|&lt;/code&gt; : 여러 블록을 직렬로 연결합니다.</target>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">전제 조건</target>
        </trans-unit>
        <trans-unit id="1e0883db26345cee9aa196cedada38c2dbef49be" translate="yes" xml:space="preserve">
          <source>Running the tests</source>
          <target state="translated">테스트 실행</target>
        </trans-unit>
        <trans-unit id="e69f7c4a1397fa5d70f6b764dd3a77e42f035f19" translate="yes" xml:space="preserve">
          <source>Safety First</source>
          <target state="translated">안전 제일</target>
        </trans-unit>
        <trans-unit id="51bf7bee4001cb1b1c4aec55cdb2836604ed74c7" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;examples/&lt;/code&gt; directory with a couple example script which illustrate the core functionality of Klang. Currently there are:</source>
          <target state="translated">Klang의 핵심 기능을 보여주는 몇 가지 예제 스크립트가 있는 &lt;code&gt;examples/&lt;/code&gt; 디렉토리를 참조하십시오 . 현재 다음이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d65d5786172f5ed0f4039fc10298275d8ef1e945" translate="yes" xml:space="preserve">
          <source>Tests can be run via with</source>
          <target state="translated">테스트는 다음을 통해 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aae2489ac9bea83bfd4744e4b4f32ca4f4a1c386" translate="yes" xml:space="preserve">
          <source>Thanks for the support and inputs!</source>
          <target state="translated">지원과 의견에 감사드립니다!</target>
        </trans-unit>
        <trans-unit id="5c88585d7969d9b2603f9c9589d3e134b28aacdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;connect&lt;/code&gt; method can be used to connect inputs and outputs with each other. Note that it is always possible to connect one output to multiple inputs but not the other way round. As a shorthand there are two overloaded operators:</source>
          <target state="translated">&lt;code&gt;connect&lt;/code&gt; 방법은 서로 연결 입력 및 출력하는데 사용될 수있다. 항상 하나의 출력을 여러 입력에 연결할 수 있지만 그 반대는 연결할 수 없습니다. 속기로서 두 개의 오버로드 된 연산자가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d6fae80cd30f36714aeb0273f4198e8d29e2238" translate="yes" xml:space="preserve">
          <source>There are two different connection types in Klang:</source>
          <target state="translated">Klang에는 두 가지 연결 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4dbe12c60f29bc9fb71f5a1bd759abdf1e300210" translate="yes" xml:space="preserve">
          <source>Value based connections can hold any kind of Python object as value. Message connections have an internal queue.
The former is mostly used to propagate audio samples and modulation signals through the network (Numpy arrays as values). The latter is used for discrete messages like note messages.
There are also corresponding &lt;em&gt;Relay&lt;/em&gt; connections (&lt;code&gt;Relay&lt;/code&gt; and &lt;code&gt;MessageRelay&lt;/code&gt; classes). These are used to build composite blocks (blocks which contain there own network of child blocks). Relays can be used to interface between the inside and outside of an composite block.</source>
          <target state="translated">값 기반 연결은 모든 종류의 Python 객체를 값으로 보유 할 수 있습니다. 메시지 연결에는 내부 큐가 있습니다. 전자는 주로 네트워크를 통해 오디오 샘플 및 변조 신호를 전파하는 데 사용됩니다 (Numpy 배열을 값으로). 후자는 메모 메시지와 같은 개별 메시지에 사용됩니다. 해당 &lt;em&gt;릴레이&lt;/em&gt; 연결도 있습니다 ( &lt;code&gt;Relay&lt;/code&gt; 및 &lt;code&gt;MessageRelay&lt;/code&gt; 클래스). 이들은 복합 블록 (자식 블록의 자체 네트워크를 포함하는 블록)을 구축하는 데 사용됩니다. 릴레이는 복합 블록의 내부와 외부를 연결하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6b44e6079b52b65c0ba10d6ea4cb40b4652a5ab" translate="yes" xml:space="preserve">
          <source>We use Python bindings for &lt;a href=&quot;http://www.portaudio.com&quot;&gt;PortAudio&lt;/a&gt; and &lt;a href=&quot;https://www.music.mcgill.ca/%7Egary/rtmidi/&quot;&gt;RtMidi&lt;/a&gt;. On Mac they can be installed via &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.portaudio.com&quot;&gt;PortAudio&lt;/a&gt; 및 &lt;a href=&quot;https://www.music.mcgill.ca/%7Egary/rtmidi/&quot;&gt;RtMidi에&lt;/a&gt; Python 바인딩을 사용 합니다. Mac에서는 &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt; 를 통해 설치할 수 있습니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
