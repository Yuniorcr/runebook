<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/flake8-mypy/">
    <body>
      <group id="flake8-mypy">
        <trans-unit id="60488cac36c3dc3751c1291910e0d7cab19677b7" translate="yes" xml:space="preserve">
          <source>&amp;macr;\_(ツ)_/&amp;macr;</source>
          <target state="translated">&amp;macr; \ _ (ツ) _ / &amp;macr;</target>
        </trans-unit>
        <trans-unit id="c5de8b04dcdf529c65c8be3014afcd34cc5b662b" translate="yes" xml:space="preserve">
          <source>). The value of that option should be a path to a
mypy.ini or setup.cfg compatible file. For full configuration syntax,
follow &lt;a href=&quot;http://mypy.readthedocs.io/en/latest/config_file.html&quot;&gt;mypy
documentation&lt;/a&gt;.</source>
          <target state="translated">). 해당 옵션의 값은 mypy.ini 또는 setup.cfg 호환 파일의 경로 여야합니다. 전체 구성 구문은 &lt;a href=&quot;http://mypy.readthedocs.io/en/latest/config_file.html&quot;&gt;mypy 문서를&lt;/a&gt; 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="3589ac6e3e8d464a43586be5e04841eee061246a" translate="yes" xml:space="preserve">
          <source>--disallow-untyped-calls</source>
          <target state="translated">-유형이 지정되지 않은 호출 금지</target>
        </trans-unit>
        <trans-unit id="54038f5a1c66a56b596028b7372d7545f52cfc96" translate="yes" xml:space="preserve">
          <source>--follow-imports</source>
          <target state="translated">-수입 팔로우</target>
        </trans-unit>
        <trans-unit id="46120ae092895e4fcab91fc5e752ef8f6497eedf" translate="yes" xml:space="preserve">
          <source>--mypy-config=</source>
          <target state="translated">--mypy-config =</target>
        </trans-unit>
        <trans-unit id="3ca0d8063e6fb00a77a7818fd98c45eae7922ab4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Flake8&lt;/em&gt; operates on unrelated files, it doesn&amp;rsquo;t perform full program
analysis. In other words, it doesn&amp;rsquo;t follow imports. This is a curse and
a blessing. We cannot find complex problems and the number of warnings
we can safely show without risking false positives is lower. In return,
we can provide useful warnings with great performance, usable for
realtime editor integration.</source>
          <target state="translated">&lt;em&gt;Flake8&lt;/em&gt; 은 관련없는 파일에서 작동하지만 전체 프로그램 분석을 수행하지는 않습니다. 즉, 수입을 따르지 않습니다. 이것은 저주이자 축복입니다. 복잡한 문제를 찾을 수 없으며 오탐의 위험없이 안전하게 표시 할 수있는 경고의 수가 적습니다. 그 대가로 실시간 편집기 통합에 사용할 수있는 뛰어난 성능으로 유용한 경고를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e6a33b799d99a72b912f28a90ea025eb3386657" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;flake8-mypy&lt;/em&gt; reserves &lt;strong&gt;T4&lt;/strong&gt; for all current and future codes, T being
the natural letter for typing-related errors. There are other plugins
greedily reserving the entire letter &lt;strong&gt;T&lt;/strong&gt;. To this I say:</source>
          <target state="translated">&lt;em&gt;flake8-mypy는&lt;/em&gt; 현재 및 미래의 모든 코드에 대해 &lt;strong&gt;T4&lt;/strong&gt; 를 예약합니다 . T는 입력 관련 오류에 대한 자연 문자입니다. 전체 문자 &lt;strong&gt;T를&lt;/strong&gt; 탐욕스럽게 예약하는 다른 플러그인이 있습니다 . 이것에 대해 나는 말한다 :</target>
        </trans-unit>
        <trans-unit id="bd5c4dcdf2ee1ea515601f8540c77dc661d32621" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;mypy&lt;/em&gt; shines when given a full program to analyze. You can then use
options like</source>
          <target state="translated">&lt;em&gt;mypy&lt;/em&gt; 는 분석 할 전체 프로그램이 주어 &lt;em&gt;지면&lt;/em&gt; 빛납니다. 그런 다음 다음과 같은 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="974887dfa46a311b9f39c0942ae5d39115b9222a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;T400&lt;/strong&gt;: any typing note.</source>
          <target state="translated">&lt;strong&gt;T400&lt;/strong&gt; : 모든 타이핑 노트.</target>
        </trans-unit>
        <trans-unit id="14da6db46ca06b5d99b2d6cda83558a26e6c9c79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;T484&lt;/strong&gt;: any typing error (after PEP 484, geddit?).</source>
          <target state="translated">&lt;strong&gt;T484&lt;/strong&gt; : 입력 오류 (PEP 484 이후, geddit?).</target>
        </trans-unit>
        <trans-unit id="631a7e672461b4c5f9af05f3b2e2c193caf44968" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;T498&lt;/strong&gt;: internal &lt;em&gt;mypy&lt;/em&gt; error.</source>
          <target state="translated">&lt;strong&gt;T498&lt;/strong&gt; : 내부 &lt;em&gt;mypy&lt;/em&gt; 오류입니다.</target>
        </trans-unit>
        <trans-unit id="a0dacfe6bcd97c970d9f2b206d84f6c13c70b89c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;T499&lt;/strong&gt;: internal &lt;em&gt;mypy&lt;/em&gt; traceback, stderr output, or an unmatched
line.</source>
          <target state="translated">&lt;strong&gt;T499&lt;/strong&gt; : 내부 &lt;em&gt;mypy&lt;/em&gt; 트레이스 백, stderr 출력 또는 일치하지 않는 라인.</target>
        </trans-unit>
        <trans-unit id="f04261d13987fe5171a6036526d16e31e8e44548" translate="yes" xml:space="preserve">
          <source>A plugin for &lt;a href=&quot;http://flake8.pycqa.org/&quot;&gt;Flake8&lt;/a&gt; integrating
&lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt;. The idea is to enable limited type
checking as a linter inside editors and other tools that already support
&lt;em&gt;Flake8&lt;/em&gt; warning syntax and config.</source>
          <target state="translated">&lt;a href=&quot;http://flake8.pycqa.org/&quot;&gt;mypy를&lt;/a&gt; 통합하는 &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;Flake8&lt;/a&gt; 용 플러그인 . 아이디어는 이미 &lt;em&gt;Flake8&lt;/em&gt; 경고 구문 및 구성을 지원하는 편집기 및 기타 도구 내에서 제한된 유형 검사를 linter로 활성화하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="818767d0f3f0d4c305cb2870d32965cfd535224d" translate="yes" xml:space="preserve">
          <source>A plugin for flake8 integrating mypy.</source>
          <target state="translated">mypy를 통합하는 flake8 용 플러그인.</target>
        </trans-unit>
        <trans-unit id="bf04a90969ef3054c9ddc9e9938177793e24f289" translate="yes" xml:space="preserve">
          <source>As it turns out, in this mode of operation, &lt;em&gt;mypy&lt;/em&gt; is still able to
provide useful information on the annotations within and at least usage
of stubbed standard library and third party libraries. However, for best
effects, you will want to use separate configuration for &lt;em&gt;mypy&lt;/em&gt;&amp;rsquo;s
standalone mode and for usage as a &lt;em&gt;Flake8&lt;/em&gt; plugin.</source>
          <target state="translated">이 작동 모드에서 &lt;em&gt;mypy&lt;/em&gt; 는 여전히 스텁 표준 라이브러리 및 타사 라이브러리 내에서 주석에 대한 유용한 정보를 제공 할 수 있습니다. 그러나 최상의 효과를 &lt;em&gt;얻으려면 mypy&lt;/em&gt; 의 독립형 모드와 &lt;em&gt;Flake8&lt;/em&gt; 플러그인 으로 사용하기 위해 별도의 구성 을 사용하는 것이 &lt;em&gt;좋습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="d2a52548bd0852b99153ddd79a1f550f70674c7d" translate="yes" xml:space="preserve">
          <source>Authors</source>
          <target state="translated">저자</target>
        </trans-unit>
        <trans-unit id="cf81e7d259138135771f83dad79d7314a0e2ed14" translate="yes" xml:space="preserve">
          <source>By making the code exclusively Python 3.5+, I&amp;rsquo;m able to focus on the
quality of the checks and re-use all the nice features of the new
releases (check out
&lt;a href=&quot;docs.python.org/3/library/pathlib.html&quot;&gt;pathlib&lt;/a&gt;) instead of wasting
cycles on Unicode compatibility, etc.</source>
          <target state="translated">코드를 Python 3.5 이상으로 만 &lt;a href=&quot;docs.python.org/3/library/pathlib.html&quot;&gt;만들면&lt;/a&gt; 유니 코드 호환성 등에 대한주기를 낭비하는 대신 검사의 품질에 집중하고 새 릴리스의 모든 멋진 기능 ( pathlib 확인)을 재사용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9c74fb571984d7f3e781ea8b013e5f74bcd16389" translate="yes" xml:space="preserve">
          <source>Change Log</source>
          <target state="translated">변경 로그</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">구성</target>
        </trans-unit>
        <trans-unit id="8b2f5cc82eb598461d90350ee365e079b3eda5cf" translate="yes" xml:space="preserve">
          <source>Due to the reasoning above, by default &lt;em&gt;flake8-mypy&lt;/em&gt; will operate with
options equivalent to the following:</source>
          <target state="translated">위의 이유 때문에 기본적으로 &lt;em&gt;flake8-mypy&lt;/em&gt; 는 다음과 같은 옵션으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="9b3adb8e7e52e763c4d388ea00c733415b004ab6" translate="yes" xml:space="preserve">
          <source>For the sake of simplicity and readability, the config you provide will
fully replace the one listed above. Values left out will be using
&lt;em&gt;mypy&lt;/em&gt;&amp;rsquo;s own defaults.</source>
          <target state="translated">단순성과 가독성을 위해 제공 한 구성은 위에 나열된 구성을 완전히 대체합니다. 생략 된 값은 &lt;em&gt;mypy&lt;/em&gt; 자체 기본값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6079753cffde07ec1b9796ca4dbc24a645992d45" translate="yes" xml:space="preserve">
          <source>Glued together by &lt;a href=&quot;mailto:lukasz%40langa.pl&quot;&gt;Łukasz Langa&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;mailto:lukasz%40langa.pl&quot;&gt;Łukasz Langa에&lt;/a&gt; 의해 함께 접착됩니다 .</target>
        </trans-unit>
        <trans-unit id="0475411b3386d0057115cf895be7d1a1cd488f8f" translate="yes" xml:space="preserve">
          <source>I plan to support more fine-grained error codes for specific &lt;em&gt;mypy&lt;/em&gt;
errors in the future.</source>
          <target state="translated">앞으로 특정 &lt;em&gt;mypy&lt;/em&gt; 오류에 대해 더 세분화 된 오류 코드를 지원할 계획 입니다.</target>
        </trans-unit>
        <trans-unit id="59670c588f206d175b558ff346b27889051cdd0d" translate="yes" xml:space="preserve">
          <source>If you disagree with the defaults above, you can specify your own &lt;em&gt;mypy&lt;/em&gt;
configuration by providing the</source>
          <target state="translated">위의 기본값에 동의하지 않는 경우 다음 을 제공 하여 고유 한 &lt;em&gt;mypy&lt;/em&gt; 구성을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="accadaa2de1d9b54d08912507fc259d22f1d0931" translate="yes" xml:space="preserve">
          <source>Just run:</source>
          <target state="translated">그냥 실행 :</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="5516fee04290d8fb240eb1035f9649b7af9c46bc" translate="yes" xml:space="preserve">
          <source>List of warnings</source>
          <target state="translated">경고 목록</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">MIT</target>
        </trans-unit>
        <trans-unit id="e5235c3d74608e18ac9a99adeba9dde4044408a5" translate="yes" xml:space="preserve">
          <source>NOTE: This plugin requires &lt;em&gt;mypy&lt;/em&gt; &amp;gt;=0.500, as of Mar 1st no released
version satisfies this yet. You can use master in the mean time.</source>
          <target state="translated">참고 :이 플러그인은 &lt;em&gt;mypy&lt;/em&gt; &amp;gt; = 0.500 이 필요 하며, 3 월 1 일 현재 출시 된 버전이 아직이를 충족하지 않습니다. 그동안 마스터를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12e19660be012b4eba852959c0cfdb85d3bd927b" translate="yes" xml:space="preserve">
          <source>Note: chaing the</source>
          <target state="translated">참고 : chaing the</target>
        </trans-unit>
        <trans-unit id="e36741c0ba08cc37f8bfbe95a6affd2ddc5b5471" translate="yes" xml:space="preserve">
          <source>OMG, this is Python 3 only!</source>
          <target state="translated">OMG, 이것은 Python 3 전용입니다!</target>
        </trans-unit>
        <trans-unit id="38479adfbc61c2036e2fc6b0467c2047db17d640" translate="yes" xml:space="preserve">
          <source>Remember that for the best user experience, your linter integration mode
shouldn&amp;rsquo;t generally display errors that a full run of &lt;em&gt;mypy&lt;/em&gt; wouldn&amp;rsquo;t.
This would be confusing.</source>
          <target state="translated">최상의 사용자 경험을 위해 린터 통합 모드는 일반적으로 &lt;em&gt;mypy&lt;/em&gt; 의 전체 실행이 표시하지 않는 오류를 표시해서는 안됩니다. 이것은 혼란 스러울 것입니다.</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">테스트</target>
        </trans-unit>
        <trans-unit id="6ca0550bdbe31ceea7515b9973420cf532d0e801" translate="yes" xml:space="preserve">
          <source>Two levels of type checking</source>
          <target state="translated">두 가지 수준의 유형 검사</target>
        </trans-unit>
        <trans-unit id="b5b99244a9d16756d53a44f391e4137f95f047dc" translate="yes" xml:space="preserve">
          <source>Yes, so is &lt;em&gt;mypy&lt;/em&gt;. Relax, you can run &lt;em&gt;Flake8&lt;/em&gt; with all popular plugins
&lt;strong&gt;as a tool&lt;/strong&gt; perfectly fine under Python 3.5+ even if you want to
analyze Python&amp;nbsp;2 code. This way you&amp;rsquo;ll be able to parse all of the new
syntax supported on Python 3 but also &lt;em&gt;effectively all&lt;/em&gt; the Python 2
syntax at the same time.</source>
          <target state="translated">예, &lt;em&gt;mypy도 그렇습니다&lt;/em&gt; . &lt;em&gt;안심하십시오&lt;/em&gt; . Python 2 코드를 분석하려는 경우에도 Python 3.5 이상에서 모든 인기있는 플러그인 &lt;strong&gt;을 사용하여 &lt;/strong&gt;&lt;em&gt;Flake8&lt;/em&gt; 을 완벽한 &lt;strong&gt;도구로&lt;/strong&gt; 실행할 수 있습니다 . 이렇게하면 Python 3에서 지원되는 모든 새 구문을 구문 분석 할 수있을뿐만 아니라 &lt;em&gt;효과적으로&lt;/em&gt; Python 2 구문을 .</target>
        </trans-unit>
        <trans-unit id="54caab93217af0f5a295a3ceb50447edb5f3b7cb" translate="yes" xml:space="preserve">
          <source>always run type checks from a temporary directory to avoid clashing
with unrelated files in the same directory</source>
          <target state="translated">동일한 디렉토리에있는 관련없는 파일과 충돌하지 않도록 항상 임시 디렉토리에서 유형 검사를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="fd9fd63588735ed2f20df436b4ef13a1224493ce" translate="yes" xml:space="preserve">
          <source>avoid raising errors in the default config which don&amp;rsquo;t happen during
a full run (disable warn_unused_ignores and warn_redundant_casts)</source>
          <target state="translated">전체 실행 중에 발생하지 않는 기본 구성에서 오류 발생 방지 (warn_unused_ignores 및 warn_redundant_casts 비활성화)</target>
        </trans-unit>
        <trans-unit id="954af3ede91f571ff68eee59cce29ee578445fac" translate="yes" xml:space="preserve">
          <source>bugfix: don&amp;rsquo;t crash on relative imports in the form</source>
          <target state="translated">버그 픽스 : 폼의 상대 임포트시 크래시 안 함</target>
        </trans-unit>
        <trans-unit id="3da0e2535ecbeec5d12440c6e632abec61c8ae54" translate="yes" xml:space="preserve">
          <source>bugfix: using &lt;em&gt;Flake8&lt;/em&gt; with absolute paths now correctly matches
&lt;em&gt;mypy&lt;/em&gt; messages</source>
          <target state="translated">버그 &lt;em&gt;픽스&lt;/em&gt; : 절대 경로로 &lt;em&gt;Flake8&lt;/em&gt; 을 사용 &lt;em&gt;하면&lt;/em&gt; 이제 &lt;em&gt;mypy&lt;/em&gt; 메시지 와 올바르게 일치 합니다.</target>
        </trans-unit>
        <trans-unit id="cfe4311042959f04387387a2bc4b7ffa4d5f07eb" translate="yes" xml:space="preserve">
          <source>bugfix: when running over an entire directory, T484 is now correctly
used instead of T499</source>
          <target state="translated">버그 픽스 : 전체 디렉토리에서 실행할 때 T499 대신 T484가 올바르게 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="74bc72bc5e3b152dc1e0945e5c2f4f54eae624d5" translate="yes" xml:space="preserve">
          <source>command-line option to
&lt;em&gt;Flake8&lt;/em&gt; (with the .flake8/setup.cfg equivalent being called</source>
          <target state="translated">&lt;em&gt;Flake8에 대한&lt;/em&gt; 명령 줄 옵션 (.flake8 / setup.cfg가 호출 됨)</target>
        </trans-unit>
        <trans-unit id="f90e09f0523a6748b6e6749a04730a63f6c8b4f0" translate="yes" xml:space="preserve">
          <source>date-versioned</source>
          <target state="translated">날짜 버전</target>
        </trans-unit>
        <trans-unit id="c6fcbab7e6b771c2287910acf25eb269ee96b2fb" translate="yes" xml:space="preserve">
          <source>first published version</source>
          <target state="translated">처음 게시 된 버전</target>
        </trans-unit>
        <trans-unit id="cebf7969bb81174d32a8d8bebcb633487a68a468" translate="yes" xml:space="preserve">
          <source>follow_imports</source>
          <target state="translated">팔로우 _ 수입</target>
        </trans-unit>
        <trans-unit id="72da8abfddfca33cea60457e4b28e80601bdb63f" translate="yes" xml:space="preserve">
          <source>from &amp;ldquo;silent&amp;rdquo; to &amp;ldquo;skip&amp;rdquo; to avoid name
clashing files being used to follow imports within
&lt;a href=&quot;https://github.com/python/typeshed/&quot;&gt;typeshed&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/python/typeshed/&quot;&gt;typeshed&lt;/a&gt; 내에서 가져 오기를 따르는 데 사용되는 이름 충돌 파일을 피하기 위해 &quot;자동&quot;에서 &quot;건너 뛰기&quot;로</target>
        </trans-unit>
        <trans-unit id="39198568ff36b27b1332a183f68a81d4b18d870b" translate="yes" xml:space="preserve">
          <source>from . import X</source>
          <target state="translated">에서. X 가져 오기</target>
        </trans-unit>
        <trans-unit id="6fdbd71a54a14094c9a27a4b8ea68ff2fd32fc5a" translate="yes" xml:space="preserve">
          <source>mypy_config</source>
          <target state="translated">mypy_config</target>
        </trans-unit>
        <trans-unit id="842cb3868b389b38969f4028bde3dc6bfa6aa100" translate="yes" xml:space="preserve">
          <source>option might have surprising
effects. If the file you&amp;rsquo;re linting with Flake8 has other files around
it, then in &amp;ldquo;silent&amp;rdquo; or &amp;ldquo;normal&amp;rdquo; mode those files will be used to follow
imports. This includes imports from
&lt;a href=&quot;https://github.com/python/typeshed/&quot;&gt;typeshed&lt;/a&gt;.</source>
          <target state="translated">옵션은 놀라운 효과가있을 수 있습니다. Flake8로 Linting하는 파일에 다른 파일이있는 경우 &quot;무음&quot;또는 &quot;일반&quot;모드에서 해당 파일은 가져 오기를 따르는 데 사용됩니다. 여기에는 &lt;a href=&quot;https://github.com/python/typeshed/&quot;&gt;typeshed&lt;/a&gt; 에서 가져 오기가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">또는</target>
        </trans-unit>
        <trans-unit id="e52f654b92917aea6efd4174a78067ef96fa58af" translate="yes" xml:space="preserve">
          <source>performance optimization: skip running &lt;em&gt;mypy&lt;/em&gt; over files that contain
no annotations or imports from</source>
          <target state="translated">성능 최적화 : 주석 또는 가져 오기가없는 파일에 대해 &lt;em&gt;mypy&lt;/em&gt; 실행을 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="70e95468414ffb8125815974910831c61f7f1dd9" translate="yes" xml:space="preserve">
          <source>set MYPYPATH by default to give stubs from typeshed higher priority
than local sources</source>
          <target state="translated">기본적으로 MYPYPATH를 설정하여 로컬 소스보다 typeshed에서 더 높은 우선 순위를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1b2a57913ec4c00a6268bfd7ad8fe8e5fb8a9543" translate="yes" xml:space="preserve">
          <source>suppress &lt;em&gt;mypy&lt;/em&gt; messages about relative imports</source>
          <target state="translated">상대적 가져 오기에 대한 &lt;em&gt;mypy&lt;/em&gt; 메시지 억제</target>
        </trans-unit>
        <trans-unit id="01ba7992f85de477e8e630428eb5ed14769f9155" translate="yes" xml:space="preserve">
          <source>switch</source>
          <target state="translated">스위치</target>
        </trans-unit>
        <trans-unit id="e63b0644ff79a6fc86c737b67aca9392a7eca9a0" translate="yes" xml:space="preserve">
          <source>to
exercise the full transitive closure of your modules, catching errors
stemming from bad API usage or incompatible types. That being said,
those checks take time, and require access to the entire codebase. For
some tools, like an editor with an open file, or a code review tool,
achieving this is not trivial. This is where a more limited approach
inside a linter comes in.</source>
          <target state="translated">모듈의 전체 전 이적 폐쇄를 실행하여 잘못된 API 사용 또는 호환되지 않는 유형으로 인한 오류를 포착합니다. 즉, 이러한 검사에는 시간이 걸리고 전체 코드베이스에 대한 액세스가 필요합니다. 열린 파일이있는 편집기 나 코드 검토 도구와 같은 일부 도구의 경우이를 달성하는 것은 쉬운 일이 아닙니다. 이것은 린터 내부에서 더 제한된 접근 방식이 들어오는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="02d7d3475883e6dccc76a4a332e908c39c996571" translate="yes" xml:space="preserve">
          <source>typing</source>
          <target state="translated">타자</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
