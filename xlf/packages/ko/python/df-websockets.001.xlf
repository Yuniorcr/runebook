<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/df-websockets/">
    <body>
      <group id="df-websockets">
        <trans-unit id="29b638ca66240e06788ccc2a73b2d87bd7411027" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;df_websockets.tasks.BROADCAST&lt;/code&gt;: all windows currently active.</source>
          <target state="translated">&lt;code&gt;df_websockets.tasks.BROADCAST&lt;/code&gt; : 현재 활성화 된 모든 창.</target>
        </trans-unit>
        <trans-unit id="ee7644ac5a79f8af58395f707a0e1c14cd7f8e69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;df_websockets.tasks.USER&lt;/code&gt;: all windows currently displayed by the connected user,</source>
          <target state="translated">&lt;code&gt;df_websockets.tasks.USER&lt;/code&gt; : 연결된 사용자가 현재 표시하는 모든 창,</target>
        </trans-unit>
        <trans-unit id="a8904288ff044015ce4ce96dbcc5d8fd9ee5edd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;df_websockets.tasks.WINDOW&lt;/code&gt;: the original browser window,</source>
          <target state="translated">&lt;code&gt;df_websockets.tasks.WINDOW&lt;/code&gt; : 원래 브라우저 창,</target>
        </trans-unit>
        <trans-unit id="c10d148d126909cb2fe6dc3a97617f7a4abb6c03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;df_websockets.testing.SignalQueue.ws_signals&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;df_websockets.testing.SignalQueue.ws_signals&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="7134ec8c244e7d36548f7358a79daf1bf5bb73a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from_client&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; if this signal has been emitted by a web browser,</source>
          <target state="translated">&lt;code&gt;from_client&lt;/code&gt; 이 신호가 웹 브라우저에서 방출 된 경우 from_client 는 &lt;code&gt;True&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="f7448d126edc58d11d1b34f70a59ecb6004db0ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kwargs&lt;/code&gt; is a dict representing the signal arguments,</source>
          <target state="translated">&lt;code&gt;kwargs&lt;/code&gt; 는 신호 인수를 나타내는 사전입니다.</target>
        </trans-unit>
        <trans-unit id="ab0f58f1de9c3b7921172cca8abaf9651d889bee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;obj1&lt;/code&gt;, &lt;code&gt;obj2&lt;/code&gt;, &lt;code&gt;obj3&lt;/code&gt; must be Python objects that are handled by the &lt;code&gt;WEBSOCKET_TOPIC_SERIALIZER&lt;/code&gt; function. By default, any string and Django model are valid.
Each window also has a unique identifier that is automatically added to this list, as well as the connected user id and the &lt;code&gt;BROADCAST&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;obj1&lt;/code&gt; , &lt;code&gt;obj2&lt;/code&gt; , &lt;code&gt;obj3&lt;/code&gt; 은 &lt;code&gt;WEBSOCKET_TOPIC_SERIALIZER&lt;/code&gt; 함수에 의해 처리되는 Python 객체 여야 합니다. 기본적으로 모든 문자열과 Django 모델이 유효합니다. 또한 각 창에는이 목록에 자동으로 추가되는 고유 식별자와 연결된 사용자 ID 및 &lt;code&gt;BROADCAST&lt;/code&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b81cb3ec2026f7f123357e074465ebdaddb82688" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queue&lt;/code&gt; is the name of the selected Celery queue.</source>
          <target state="translated">&lt;code&gt;queue&lt;/code&gt; 은 선택한 셀러리 대기열의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="2042265027c8da9528e335772f9b04f17f8f7a6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serialized_client_topics&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt; if this signal must be re-emitted to some client topics,</source>
          <target state="translated">&lt;code&gt;serialized_client_topics&lt;/code&gt; 는 이 신호가 일부 클라이언트 토픽에 다시 전송되어야하는 경우 &lt;code&gt;None&lt;/code&gt; 이 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="604e912f7cbb775a5ae637c2fdc490701bc6e49e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signal_name&lt;/code&gt; is &amp;hellip; the name of the signal</source>
          <target state="translated">&lt;code&gt;signal_name&lt;/code&gt; 은&amp;hellip; 신호의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="de1635073502755e995bb3e8107a243e69a59e73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_server&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; if this signal must be processed server-side,</source>
          <target state="translated">&lt;code&gt;to_server&lt;/code&gt; 이 신호가 서버 측에서 처리되어야하는 경우 to_server 는 &lt;code&gt;True&lt;/code&gt; 이고,</target>
        </trans-unit>
        <trans-unit id="ac60394ada33089c3377acbdf3ec03e526329373" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;window_info_dict&lt;/code&gt; is a WindowInfo serialized as a dict,</source>
          <target state="translated">&lt;code&gt;window_info_dict&lt;/code&gt; 는 dict로 직렬화 된 WindowInfo입니다.</target>
        </trans-unit>
        <trans-unit id="ad887583f554bc311c6e0ea26f61f17d8a5b390c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;signals&lt;/em&gt;, that are functions triggered both on the server or the browser  window by either the server or the client,</source>
          <target state="translated">&lt;em&gt;신호&lt;/em&gt; , 즉 서버 또는 클라이언트에 의해 서버 또는 브라우저 창에서 트리거되는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="defda1b2805354fb32fbc63aeab5d1226cd364dc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;topics&lt;/em&gt; to allow the server to send signals to any group of browser windows.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;서버가 모든 브라우저 창 그룹에 신호를 보낼 수 있도록하는 &lt;em&gt;주제&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="357c0ce0be6226e3046b2c82f9e520b221c237d8" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;signal&lt;/em&gt; is a string attached to Python or Javascript functions. When this signal is triggered, all these functions are called.
Of course, you can target the platforms on which the functions will be executed: the server (for Python code) or any set of browser windows.</source>
          <target state="translated">&lt;em&gt;신호는&lt;/em&gt; 파이썬이나 자바 스크립트 기능에 부착 된 문자열입니다. 이 신호가 트리거되면 이러한 모든 기능이 호출됩니다. 물론, 함수가 실행될 플랫폼을 대상으로 할 수 있습니다 : 서버 (Python 코드 용) 또는 브라우저 창 세트.</target>
        </trans-unit>
        <trans-unit id="87947ca6dc3f056e3e40aa7e0cff263837195265" translate="yes" xml:space="preserve">
          <source>A Django view using this signal system must call &lt;code&gt;set_websocket_topics&lt;/code&gt; to add some &amp;rdquo;topics&amp;rdquo; to this view.
&lt;code&gt;js/df_websockets.min.js&lt;/code&gt; must also be added to the resulting HTML.</source>
          <target state="translated">이 시그널 시스템을 사용하는 Django 뷰는 &lt;code&gt;set_websocket_topics&lt;/code&gt; 를 호출 하여이 뷰에 &quot;주제&quot;를 추가 해야합니다 . &lt;code&gt;js/df_websockets.min.js&lt;/code&gt; 도 결과 HTML에 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="f79a4947fccde7a2a54a764c4b74631c96a4bc8b" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;https://channels.readthedocs.io&quot;&gt;django-channels&lt;/a&gt; and &lt;a href=&quot;https://docs.celeryproject.org/en/stable/&quot;&gt;celery&lt;/a&gt;, df_websockets simplifies communication between
clients and servers and processing tasks in background processes.</source>
          <target state="translated">&lt;a href=&quot;https://channels.readthedocs.io&quot;&gt;django-channels&lt;/a&gt; 및 &lt;a href=&quot;https://docs.celeryproject.org/en/stable/&quot;&gt;celery를&lt;/a&gt; 기반으로하는 df_websockets는 클라이언트와 서버 간의 통신과 백그라운드 프로세스의 처리 작업을 단순화합니다.</target>
        </trans-unit>
        <trans-unit id="ddcc7abf32335f462643cee1fe6e6c0bdcd6a5d2" translate="yes" xml:space="preserve">
          <source>First, we connect our code to the signal &lt;code&gt;&quot;myproject.first_signal&quot;&lt;/code&gt;.</source>
          <target state="translated">먼저 코드를 &lt;code&gt;&quot;myproject.first_signal&quot;&lt;/code&gt; 신호에 연결합니다 .</target>
        </trans-unit>
        <trans-unit id="dedbcc2a697fb40d1ea071011ae6a43f04d7f7b9" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;df_config&lt;/code&gt; and you use a local Redis, you have nothing to do: settings are automatically set and everything is working as soon as a Redis is running on your machine.</source>
          <target state="translated">&lt;code&gt;df_config&lt;/code&gt; 를 사용하고 로컬 Redis를 사용하는 경우 수행 할 작업이 없습니다. 설정이 자동으로 설정되고 Redis가 머신에서 실행되는 즉시 모든 것이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="d4b682e046029274a61c404dc9d97194fbbcead7" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;to&lt;/code&gt; parameter targets both the server and the window.</source>
          <target state="translated">이 경우 &lt;code&gt;to&lt;/code&gt; 매개 변수는 서버와 창을 모두 대상으로합니다.</target>
        </trans-unit>
        <trans-unit id="19519d28610778512ee803b5aacbdf9ea9c9b705" translate="yes" xml:space="preserve">
          <source>In your settings, if you do not use &lt;code&gt;df_config&lt;/code&gt;, you must add the following values:</source>
          <target state="translated">설정에서 &lt;code&gt;df_config&lt;/code&gt; 를 사용하지 않는 경우 다음 값을 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="6066ba76be77de5886f49ee77bd454bc82a6c6c2" translate="yes" xml:space="preserve">
          <source>Now, we can trigger this signal to call this functions.
In both cases, both functions will be called on the server and in the browser window.</source>
          <target state="translated">이제이 신호를 트리거하여이 함수를 호출 할 수 있습니다. 두 경우 모두 서버와 브라우저 창에서 두 함수가 모두 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4da69a9f03a14a40dfa982d276c070878d7dc2df" translate="yes" xml:space="preserve">
          <source>Python 3.6+,</source>
          <target state="translated">Python 3.6 이상,</target>
        </trans-unit>
        <trans-unit id="3d25952f3a7efeb5ac37e62297af0a98030e969a" translate="yes" xml:space="preserve">
          <source>Requirements and installation</source>
          <target state="translated">요구 사항 및 설치</target>
        </trans-unit>
        <trans-unit id="4d4aeca88b68600e69b5df33c202fa870d204f4f" translate="yes" xml:space="preserve">
          <source>Signals are exchanged between the browser window and the server using a single websockets. Signals triggered by the browser on the server are processed as Celery tasks (so the websocket endpoint does almost nothing).
Signals triggered by the server can be processed as other Celery tasks and as Javascript functions on the browser.</source>
          <target state="translated">단일 웹 소켓을 사용하여 브라우저 창과 서버간에 신호가 교환됩니다. 서버의 브라우저에 의해 트리거 된 신호는 Celery 작업으로 처리됩니다 (따라서 websocket 엔드 포인트는 거의 아무것도 수행하지 않음). 서버에 의해 트리거 된 신호는 다른 Celery 작업 및 브라우저에서 Javascript 기능으로 처리 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68b042e0af18e42f9f5a4eeb858ea28283869274" translate="yes" xml:space="preserve">
          <source>Smart default settings for Django websites</source>
          <target state="translated">Django 웹 사이트를위한 스마트 기본 설정</target>
        </trans-unit>
        <trans-unit id="bc21971715800b1b673aa7dfa50bda52a360daf0" translate="yes" xml:space="preserve">
          <source>Some information about the original window (like its unique identifier or the connected user) must be provided to the triggered Python code, allowing it to trigger JS events on any selected window.</source>
          <target state="translated">원래 창에 대한 일부 정보 (예 : 고유 식별자 또는 연결된 사용자)를 트리거 된 Python 코드에 제공해야 선택한 창에서 JS 이벤트를 트리거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58c7caf7c3222d5d12cbcf038c5bd6abb4e71e69" translate="yes" xml:space="preserve">
          <source>Testing signals</source>
          <target state="translated">신호 테스트</target>
        </trans-unit>
        <trans-unit id="1ab6f399ea453d7917ce083383a57e8ac5a0453b" translate="yes" xml:space="preserve">
          <source>The following code will call the JS function on every browser window having the &lt;code&gt;obj&lt;/code&gt; topic and to the displayed window.</source>
          <target state="translated">다음 코드는 &lt;code&gt;obj&lt;/code&gt; 토픽 이있는 모든 브라우저 창과 표시된 창 에서 JS 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="bab201b192e9a415a6a91796921c919055a6e718" translate="yes" xml:space="preserve">
          <source>The signal framework requires a working Redis and a worker process. However, if you only want to check if a signal
has been called in unitary tests, you can use :class:&lt;code&gt;df_websockets.utils.SignalQueue&lt;/code&gt;.
Both server-side and client-side signals are kept into memory:</source>
          <target state="translated">신호 프레임 워크에는 작동하는 Redis와 작업자 프로세스가 필요합니다. 그러나 단일 테스트에서 신호가 호출되었는지 만 확인하려면 : class : &lt;code&gt;df_websockets.utils.SignalQueue&lt;/code&gt; 를 사용할 수 있습니다 . 서버 측 및 클라이언트 측 신호는 모두 메모리에 보관됩니다.</target>
        </trans-unit>
        <trans-unit id="56962a4ac81621817920d5441d8717237822608a" translate="yes" xml:space="preserve">
          <source>There are three special values:</source>
          <target state="translated">세 가지 특수 값이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4239491f24f2dd15ab5f0631af716ad65b4d05b5" translate="yes" xml:space="preserve">
          <source>These data are stored in the &lt;code&gt;WindowInfo&lt;/code&gt; object, automatically built from the HTTP request by the trigger function and provided as first argument to the triggered code.
The &lt;code&gt;trigger&lt;/code&gt; function accepts &lt;code&gt;WindowInfo&lt;/code&gt; or &lt;code&gt;HTTPRequest&lt;/code&gt; objects as first argument.</source>
          <target state="translated">이러한 데이터는 &lt;code&gt;WindowInfo&lt;/code&gt; 개체에 저장되며 트리거 함수에 의해 HTTP 요청에서 자동으로 빌드되고 트리거 된 코드에 대한 첫 번째 인수로 제공됩니다. &lt;code&gt;trigger&lt;/code&gt; 기능은 수락 &lt;code&gt;WindowInfo&lt;/code&gt; 또는 &lt;code&gt;HTTPRequest&lt;/code&gt; 첫 번째 인수로서 개체.</target>
        </trans-unit>
        <trans-unit id="3a7c0ee7a6985d05ea5442957ef1023acbcfa81b" translate="yes" xml:space="preserve">
          <source>When the server triggers a signal, it can select if the signal is called on the server or on some browser windows.</source>
          <target state="translated">서버가 신호를 트리거 할 때 신호가 서버 또는 일부 브라우저 창에서 호출되는지 여부를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d93630f694aa599d8f38d72dcafb4676698bd382" translate="yes" xml:space="preserve">
          <source>You also need a working &lt;a href=&quot;https://redis.io&quot;&gt;redis server&lt;/a&gt; and &lt;a href=&quot;https://docs.celeryproject.org/en/stable/django/first-steps-with-django.html&quot;&gt;Celery setup&lt;/a&gt;.</source>
          <target state="translated">또한 작동하는 &lt;a href=&quot;https://redis.io&quot;&gt;redis 서버&lt;/a&gt; 와 &lt;a href=&quot;https://docs.celeryproject.org/en/stable/django/first-steps-with-django.html&quot;&gt;Celery 설정이&lt;/a&gt; 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="3e9c784f9bbfa47fcf1b3fa698a0865e59602c31" translate="yes" xml:space="preserve">
          <source>You can start a Celery worker and the development server:</source>
          <target state="translated">Celery 작업자와 개발 서버를 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="56921755b2d41035416e0e1898cf149fe4a44f56" translate="yes" xml:space="preserve">
          <source>basic usage</source>
          <target state="translated">기본 사용법</target>
        </trans-unit>
        <trans-unit id="21ce190e6db3033d733bc2a70abab4e93f70eb96" translate="yes" xml:space="preserve">
          <source>celery 4.0+,</source>
          <target state="translated">셀러리 4.0 이상,</target>
        </trans-unit>
        <trans-unit id="ce1d11fcfe733115860c14a9d029c7591aee7b05" translate="yes" xml:space="preserve">
          <source>channels_redis.</source>
          <target state="translated">channels_redis.</target>
        </trans-unit>
        <trans-unit id="cad10b861647a08cb5b33d76e72f498b0b5f4b25" translate="yes" xml:space="preserve">
          <source>df_config works with:</source>
          <target state="translated">df_config는 다음과 함께 작동합니다.</target>
        </trans-unit>
        <trans-unit id="bf5850dac51a307a9bdca2fed55112eab14c0456" translate="yes" xml:space="preserve">
          <source>df_websockets</source>
          <target state="translated">df_websockets</target>
        </trans-unit>
        <trans-unit id="890b5305db21c1b6bb17e0f79ff219e135a441e9" translate="yes" xml:space="preserve">
          <source>df_websockets is based on two main ideas:</source>
          <target state="translated">df_websockets는 두 가지 주요 아이디어를 기반으로합니다.</target>
        </trans-unit>
        <trans-unit id="64d3636b98cb209ae53a20642131c645a5309935" translate="yes" xml:space="preserve">
          <source>django 2.0+,</source>
          <target state="translated">장고 2.0 이상,</target>
        </trans-unit>
        <trans-unit id="89b6414e0e775b7a4993296bf4a2a2994e3e22c3" translate="yes" xml:space="preserve">
          <source>django-channels 2.0+,</source>
          <target state="translated">장고 채널 2.0 이상,</target>
        </trans-unit>
        <trans-unit id="3f5ed773f55c045857c1708187efcba6da6f1a37" translate="yes" xml:space="preserve">
          <source>keys are the name of the queue</source>
          <target state="translated">키는 대기열의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="d9af4ae71186758c55f6f5cb9c6baa121105d899" translate="yes" xml:space="preserve">
          <source>keys are the serialized topics</source>
          <target state="translated">키는 직렬화 된 주제입니다.</target>
        </trans-unit>
        <trans-unit id="8547a5d17b9c3fbde37528ab4ae2d0a70536b089" translate="yes" xml:space="preserve">
          <source>redis,</source>
          <target state="translated">레디 스,</target>
        </trans-unit>
        <trans-unit id="b729ffe0261cc358c3942df5b6a06cab8f1b9dc6" translate="yes" xml:space="preserve">
          <source>topics</source>
          <target state="translated">주제</target>
        </trans-unit>
        <trans-unit id="890ba780da56a443bcc297d29deb0d7f49a40995" translate="yes" xml:space="preserve">
          <source>values are lists of &lt;code&gt;(signal_name, window_info_dict, kwargs=None, from_client=False, serialized_client_topics=None, to_server=False, queue=None)&lt;/code&gt;</source>
          <target state="translated">값은 &lt;code&gt;(signal_name, window_info_dict, kwargs=None, from_client=False, serialized_client_topics=None, to_server=False, queue=None)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d31fd8da189faf58e2b50301933dc3a0a863279" translate="yes" xml:space="preserve">
          <source>values are lists of tuples &lt;code&gt;(signal name, arguments as dict)&lt;/code&gt;</source>
          <target state="translated">값은 튜플 목록 &lt;code&gt;(signal name, arguments as dict)&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
