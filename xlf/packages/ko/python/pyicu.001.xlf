<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/pyicu/">
    <body>
      <group id="pyicu">
        <trans-unit id="8c478b8cf5fb33d3bd824859bd8c0e93a90ed35b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UnicodeString&lt;/code&gt; object was allocated and converted to a Python
&lt;code&gt;unicode&lt;/code&gt; object.</source>
          <target state="translated">A &lt;code&gt;UnicodeString&lt;/code&gt; object was allocated and converted to a Python &lt;code&gt;unicode&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="9967e6db91c10cf199bd9b06fd9341286bba963c" translate="yes" xml:space="preserve">
          <source>A UnicodeString can be coerced to a Python unicode string with Python's
&lt;code&gt;unicode()&lt;/code&gt; constructor. The usual &lt;code&gt;len()&lt;/code&gt;, &lt;code&gt;str()&lt;/code&gt;, comparison,
&lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;[:]&lt;/code&gt; operators are all available, with the additional
twists that slicing is not read-only and that &lt;code&gt;+=&lt;/code&gt; is also available
since a UnicodeString is mutable. For example:</source>
          <target state="translated">A UnicodeString can be coerced to a Python unicode string with Python's &lt;code&gt;unicode()&lt;/code&gt; constructor. The usual &lt;code&gt;len()&lt;/code&gt; , &lt;code&gt;str()&lt;/code&gt; , comparison, &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;[:]&lt;/code&gt; operators are all available, with the additional twists that slicing is not read-only and that &lt;code&gt;+=&lt;/code&gt; is also available since a UnicodeString is mutable. For example:</target>
        </trans-unit>
        <trans-unit id="674463a63b833f2ee17f1bbb198b28a2cbb90be6" translate="yes" xml:space="preserve">
          <source>API Documentation</source>
          <target state="translated">API 설명서</target>
        </trans-unit>
        <trans-unit id="fd4b1f900d86e477f21295c9fe11b7307f32ec24" translate="yes" xml:space="preserve">
          <source>An ICU &lt;code&gt;StringEnumeration&lt;/code&gt; has three &lt;code&gt;next&lt;/code&gt; methods: &lt;code&gt;next()&lt;/code&gt; which
returns a &lt;code&gt;str&lt;/code&gt; objects, &lt;code&gt;unext()&lt;/code&gt; which returns &lt;code&gt;unicode&lt;/code&gt; objects
and &lt;code&gt;snext()&lt;/code&gt; which returns &lt;code&gt;UnicodeString&lt;/code&gt; objects.
Any of these methods can be used as an iterator, using the Python
built-in &lt;code&gt;iter&lt;/code&gt; function.</source>
          <target state="translated">An ICU &lt;code&gt;StringEnumeration&lt;/code&gt; has three &lt;code&gt;next&lt;/code&gt; methods: &lt;code&gt;next()&lt;/code&gt; which returns a &lt;code&gt;str&lt;/code&gt; objects, &lt;code&gt;unext()&lt;/code&gt; which returns &lt;code&gt;unicode&lt;/code&gt; objects and &lt;code&gt;snext()&lt;/code&gt; which returns &lt;code&gt;UnicodeString&lt;/code&gt; objects. Any of these methods can be used as an iterator, using the Python built-in &lt;code&gt;iter&lt;/code&gt; function.</target>
        </trans-unit>
        <trans-unit id="1975156b42eec5baa84361a59f47d7808da99f0d" translate="yes" xml:space="preserve">
          <source>Because of these differences, &lt;code&gt;UnicodeString&lt;/code&gt; and Python's &lt;code&gt;unicode&lt;/code&gt;
type are not merged into the same type when crossing the C++ boundary.
ICU APIs taking &lt;code&gt;UnicodeString&lt;/code&gt; arguments have been overloaded to also
accept Python str or unicode type arguments. In the case of &lt;code&gt;str&lt;/code&gt;
objects, the &lt;code&gt;utf-8&lt;/code&gt; encoding is assumed when converting them to
&lt;code&gt;UnicodeString&lt;/code&gt; objects.</source>
          <target state="translated">Because of these differences, &lt;code&gt;UnicodeString&lt;/code&gt; and Python's &lt;code&gt;unicode&lt;/code&gt; type are not merged into the same type when crossing the C++ boundary. ICU APIs taking &lt;code&gt;UnicodeString&lt;/code&gt; arguments have been overloaded to also accept Python str or unicode type arguments. In the case of &lt;code&gt;str&lt;/code&gt; objects, the &lt;code&gt;utf-8&lt;/code&gt; encoding is assumed when converting them to &lt;code&gt;UnicodeString&lt;/code&gt; objects.</target>
        </trans-unit>
        <trans-unit id="eb8866a56956bb83ce76a10571435493da872803" translate="yes" xml:space="preserve">
          <source>Before building PyICU the ICU libraries must be built and installed. Refer
to each system's instructions for more information.</source>
          <target state="translated">Before building PyICU the ICU libraries must be built and installed. Refer to each system's instructions for more information.</target>
        </trans-unit>
        <trans-unit id="561fbe2e200da39001b86092ba55a60f1d3025c5" translate="yes" xml:space="preserve">
          <source>Building PyICU</source>
          <target state="translated">Building PyICU</target>
        </trans-unit>
        <trans-unit id="98f0be996b2927ce0cdcb40227797a8a5fd86972" translate="yes" xml:space="preserve">
          <source>For example, let &lt;code&gt;e&lt;/code&gt; be a &lt;code&gt;StringEnumeration&lt;/code&gt; instance::</source>
          <target state="translated">For example, let &lt;code&gt;e&lt;/code&gt; be a &lt;code&gt;StringEnumeration&lt;/code&gt; instance::</target>
        </trans-unit>
        <trans-unit id="d3349a97da416885898c8a733a28381cae146590" translate="yes" xml:space="preserve">
          <source>For example, the
&lt;code&gt;'UnicodeString &amp;amp;Locale::getDisplayName(UnicodeString &amp;amp;)'&lt;/code&gt; API,
documented at
&lt;a href=&quot;http://icu-project.org/apiref/icu4c/classLocale.html&quot;&gt;http://icu-project.org/apiref/icu4c/classLocale.html&lt;/a&gt;
can be invoked from Python in several ways:</source>
          <target state="translated">For example, the &lt;code&gt;'UnicodeString &amp;amp;Locale::getDisplayName(UnicodeString &amp;amp;)'&lt;/code&gt; API, documented at &lt;a href=&quot;http://icu-project.org/apiref/icu4c/classLocale.html&quot;&gt;http://icu-project.org/apiref/icu4c/classLocale.html&lt;/a&gt; can be invoked from Python in several ways:</target>
        </trans-unit>
        <trans-unit id="14019fffc68d0c49d0730d72ff7bd9580001562e" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;'UnicodeString &amp;amp;DateFormat::format(const Formattable &amp;amp;, UnicodeString &amp;amp;, UErrorCode &amp;amp;)'&lt;/code&gt; API, documented at
&lt;a href=&quot;http://icu-project.org/apiref/icu4c/classDateFormat.html&quot;&gt;http://icu-project.org/apiref/icu4c/classDateFormat.html&lt;/a&gt;
is invoked from Python with:</source>
          <target state="translated">For example, the &lt;code&gt;'UnicodeString &amp;amp;DateFormat::format(const Formattable &amp;amp;, UnicodeString &amp;amp;, UErrorCode &amp;amp;)'&lt;/code&gt; API, documented at &lt;a href=&quot;http://icu-project.org/apiref/icu4c/classDateFormat.html&quot;&gt;http://icu-project.org/apiref/icu4c/classDateFormat.html&lt;/a&gt; is invoked from Python with:</target>
        </trans-unit>
        <trans-unit id="aefc17571ccc853e1875a3c6c8bd80ce22bf7de5" translate="yes" xml:space="preserve">
          <source>ICU stands for &quot;International Components for Unicode&quot;.
These are the i18n libraries of the Unicode Consortium.
They implement much of the Unicode Standard,
many of its companion Unicode Technical Standards,
and much of Unicode CLDR.</source>
          <target state="translated">ICU stands for &quot;International Components for Unicode&quot;. These are the i18n libraries of the Unicode Consortium. They implement much of the Unicode Standard, many of its companion Unicode Technical Standards, and much of Unicode CLDR.</target>
        </trans-unit>
        <trans-unit id="0357646450736bb3deffef358e1bfabfee7ab04a" translate="yes" xml:space="preserve">
          <source>ICU uses a double floating point type called &lt;code&gt;UDate&lt;/code&gt; that represents the
number of milliseconds elapsed since 1970-jan-01 UTC for dates.</source>
          <target state="translated">ICU uses a double floating point type called &lt;code&gt;UDate&lt;/code&gt; that represents the number of milliseconds elapsed since 1970-jan-01 UTC for dates.</target>
        </trans-unit>
        <trans-unit id="8fe09ebb8290458b82166eabbffb7aba6caee41c" translate="yes" xml:space="preserve">
          <source>ICU's C++ APIs accept and return &lt;code&gt;UnicodeString&lt;/code&gt; arguments in several
ways: by value, by pointer or by reference.
When an ICU C++ API is documented to accept a &lt;code&gt;UnicodeString&lt;/code&gt; reference
parameter, it is safe to assume that there are several corresponding
PyICU python APIs making it accessible in simpler ways:</source>
          <target state="translated">ICU's C++ APIs accept and return &lt;code&gt;UnicodeString&lt;/code&gt; arguments in several ways: by value, by pointer or by reference. When an ICU C++ API is documented to accept a &lt;code&gt;UnicodeString&lt;/code&gt; reference parameter, it is safe to assume that there are several corresponding PyICU python APIs making it accessible in simpler ways:</target>
        </trans-unit>
        <trans-unit id="1c4adf9bc9fa62e06a71abc0fc95f6c0728da634" translate="yes" xml:space="preserve">
          <source>In Python, the value returned by the &lt;code&gt;time&lt;/code&gt; module's &lt;code&gt;time()&lt;/code&gt;
function is the number of seconds since 1970-jan-01 UTC. Because of this
difference, floating point values are multiplied by 1000 when passed to
APIs taking &lt;code&gt;UDate&lt;/code&gt; and divided by 1000 when returned as &lt;code&gt;UDate&lt;/code&gt;.</source>
          <target state="translated">In Python, the value returned by the &lt;code&gt;time&lt;/code&gt; module's &lt;code&gt;time()&lt;/code&gt; function is the number of seconds since 1970-jan-01 UTC. Because of this difference, floating point values are multiplied by 1000 when passed to APIs taking &lt;code&gt;UDate&lt;/code&gt; and divided by 1000 when returned as &lt;code&gt;UDate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="41d8d691751799f2e43aa74b8f80a3b9e079f39b" translate="yes" xml:space="preserve">
          <source>Linux &amp;amp; Solaris
Make sure that &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; contains paths to the directory(ies)
containing the ICU libs or that you added the corresponding &lt;code&gt;-rpath&lt;/code&gt;
argument to &lt;code&gt;LFLAGS&lt;/code&gt;.</source>
          <target state="translated">Linux &amp;amp; Solaris Make sure that &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; contains paths to the directory(ies) containing the ICU libs or that you added the corresponding &lt;code&gt;-rpath&lt;/code&gt; argument to &lt;code&gt;LFLAGS&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ca0b41acec2d37d074e566fd8ad2b11b61ee23c" translate="yes" xml:space="preserve">
          <source>Mac OS X
Make sure that &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; contains paths to the directory(ies)
containing the ICU libs.</source>
          <target state="translated">Mac OS X Make sure that &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; contains paths to the directory(ies) containing the ICU libs.</target>
        </trans-unit>
        <trans-unit id="99664d948a295e9480d8b60a16a16d29127027da" translate="yes" xml:space="preserve">
          <source>Many ICU API take array arguments. A list of elements of the array
element types is to be passed from Python.</source>
          <target state="translated">Many ICU API take array arguments. A list of elements of the array element types is to be passed from Python.</target>
        </trans-unit>
        <trans-unit id="95c06347f696181be67e9c7123a2d364c69951b5" translate="yes" xml:space="preserve">
          <source>Of course, the simpler &lt;code&gt;'UnicodeString &amp;amp;DateFormat::format(UDate, UnicodeString &amp;amp;)'&lt;/code&gt; documented here:
&lt;a href=&quot;http://icu-project.org/apiref/icu4c/classDateFormat.html&quot;&gt;http://icu-project.org/apiref/icu4c/classDateFormat.html&lt;/a&gt;
can be used too:</source>
          <target state="translated">Of course, the simpler &lt;code&gt;'UnicodeString &amp;amp;DateFormat::format(UDate, UnicodeString &amp;amp;)'&lt;/code&gt; documented here: &lt;a href=&quot;http://icu-project.org/apiref/icu4c/classDateFormat.html&quot;&gt;http://icu-project.org/apiref/icu4c/classDateFormat.html&lt;/a&gt; can be used too:</target>
        </trans-unit>
        <trans-unit id="34d96e47c25b6cc23bc257c1b970b2ab54620dfb" translate="yes" xml:space="preserve">
          <source>PyICU is built with distutils or setuptools:</source>
          <target state="translated">PyICU is built with distutils or setuptools:</target>
        </trans-unit>
        <trans-unit id="277b3eb686f321d3d9f8fe7ff9505f8cf656f024" translate="yes" xml:space="preserve">
          <source>Python extension wrapping the ICU C++ API</source>
          <target state="translated">Python extension wrapping the ICU C++ API</target>
        </trans-unit>
        <trans-unit id="a632ff4f4db018dbd3cfb1ce5d0c6715aa6025f2" translate="yes" xml:space="preserve">
          <source>Python's &lt;code&gt;datetime&lt;/code&gt; objects, with or without timezone information, can
also be used with APIs taking &lt;code&gt;UDate&lt;/code&gt; arguments. The &lt;code&gt;datetime&lt;/code&gt;
objects get converted to &lt;code&gt;UDate&lt;/code&gt; when crossing into the C++ layer.</source>
          <target state="translated">Python's &lt;code&gt;datetime&lt;/code&gt; objects, with or without timezone information, can also be used with APIs taking &lt;code&gt;UDate&lt;/code&gt; arguments. The &lt;code&gt;datetime&lt;/code&gt; objects get converted to &lt;code&gt;UDate&lt;/code&gt; when crossing into the C++ layer.</target>
        </trans-unit>
        <trans-unit id="dbdfddbca26016b75222b47fd3b705cd3e64c72c" translate="yes" xml:space="preserve">
          <source>README file for PyICU</source>
          <target state="translated">README file for PyICU</target>
        </trans-unit>
        <trans-unit id="6b10b4bd3415cd680fd378a75345b9ce91aa9548" translate="yes" xml:space="preserve">
          <source>Running PyICU</source>
          <target state="translated">Running PyICU</target>
        </trans-unit>
        <trans-unit id="e0d40d8ae3d6c0a40fed9c1347167c6497ba96eb" translate="yes" xml:space="preserve">
          <source>See also the CLDR homepage at &lt;a href=&quot;http://cldr.unicode.org/&quot;&gt;http://cldr.unicode.org/&lt;/a&gt;</source>
          <target state="translated">See also the CLDR homepage at &lt;a href=&quot;http://cldr.unicode.org/&quot;&gt;http://cldr.unicode.org/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e643cc6d2e455d907a182ef4f7bfd8f82648e8c2" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;CHANGES&lt;/code&gt; file for an up to date log of changes and additions.</source>
          <target state="translated">See the &lt;code&gt;CHANGES&lt;/code&gt; file for an up to date log of changes and additions.</target>
        </trans-unit>
        <trans-unit id="78969f1c4afac5996d6fafaf7c2cab81016225ed" translate="yes" xml:space="preserve">
          <source>StringEnumeration</source>
          <target state="translated">StringEnumeration</target>
        </trans-unit>
        <trans-unit id="fcf57b7d3ce4dff7f0ebbc5724acd408f72f9d57" translate="yes" xml:space="preserve">
          <source>The C++ ICU library does not use C++ exceptions to report errors. ICU
C++ APIs return errors via a &lt;code&gt;UErrorCode&lt;/code&gt; reference argument. All such
APIs are wrapped by Python APIs that omit this argument and throw an
&lt;code&gt;ICUError&lt;/code&gt; Python exception instead. The same is true for ICU APIs
taking both a &lt;code&gt;ParseError&lt;/code&gt; and a &lt;code&gt;UErrorCode&lt;/code&gt;, they are both to be
omitted.</source>
          <target state="translated">The C++ ICU library does not use C++ exceptions to report errors. ICU C++ APIs return errors via a &lt;code&gt;UErrorCode&lt;/code&gt; reference argument. All such APIs are wrapped by Python APIs that omit this argument and throw an &lt;code&gt;ICUError&lt;/code&gt; Python exception instead. The same is true for ICU APIs taking both a &lt;code&gt;ParseError&lt;/code&gt; and a &lt;code&gt;UErrorCode&lt;/code&gt; , they are both to be omitted.</target>
        </trans-unit>
        <trans-unit id="f51d888b3fc338764271fafa8369aa175f2b51f2" translate="yes" xml:space="preserve">
          <source>The ICU &lt;code&gt;TimeZone&lt;/code&gt; type may be wrapped with an &lt;code&gt;ICUtzinfo&lt;/code&gt; type for
usage with Python's &lt;code&gt;datetime&lt;/code&gt; type. For example::</source>
          <target state="translated">The ICU &lt;code&gt;TimeZone&lt;/code&gt; type may be wrapped with an &lt;code&gt;ICUtzinfo&lt;/code&gt; type for usage with Python's &lt;code&gt;datetime&lt;/code&gt; type. For example::</target>
        </trans-unit>
        <trans-unit id="2d8d5dff8978c627e4ea3e9b18debdb013865163" translate="yes" xml:space="preserve">
          <source>The ICU homepage is &lt;a href=&quot;http://site.icu-project.org/&quot;&gt;http://site.icu-project.org/&lt;/a&gt;</source>
          <target state="translated">The ICU homepage is &lt;a href=&quot;http://site.icu-project.org/&quot;&gt;http://site.icu-project.org/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="890a2f85c8aac1c2e43a49c2074e6c37811f5828" translate="yes" xml:space="preserve">
          <source>The ICU string type, &lt;code&gt;UnicodeString&lt;/code&gt;, is a type pointing at a mutable
array of &lt;code&gt;UChar&lt;/code&gt; Unicode 16-bit wide characters. The Python unicode type
is an immutable string of 16-bit or 32-bit wide Unicode characters.</source>
          <target state="translated">The ICU string type, &lt;code&gt;UnicodeString&lt;/code&gt; , is a type pointing at a mutable array of &lt;code&gt;UChar&lt;/code&gt; Unicode 16-bit wide characters. The Python unicode type is an immutable string of 16-bit or 32-bit wide Unicode characters.</target>
        </trans-unit>
        <trans-unit id="a1cfaa5aa662b14ab2f53d8b9a269960f0c24a37" translate="yes" xml:space="preserve">
          <source>The ICU way</source>
          <target state="translated">The ICU way</target>
        </trans-unit>
        <trans-unit id="96aa010d7a3c10aad0e081c40b0c7ffc157cfacf" translate="yes" xml:space="preserve">
          <source>The PyICU source code is hosted on GitHub at &lt;a href=&quot;https://github.com/ovalhub/pyicu&quot;&gt;https://github.com/ovalhub/pyicu&lt;/a&gt;.</source>
          <target state="translated">The PyICU source code is hosted on GitHub at &lt;a href=&quot;https://github.com/ovalhub/pyicu&quot;&gt;https://github.com/ovalhub/pyicu&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5657f6bed8713fbc25b85229e4d30b8481aaaffd" translate="yes" xml:space="preserve">
          <source>The Python way</source>
          <target state="translated">The Python way</target>
        </trans-unit>
        <trans-unit id="9b9b22e09900f2f4c3b545f0e1d073cbe63914d7" translate="yes" xml:space="preserve">
          <source>There is no API documentation for PyICU. The API for ICU is documented at
&lt;a href=&quot;http://icu-project.org/apiref/icu4c/&quot;&gt;http://icu-project.org/apiref/icu4c/&lt;/a&gt; and the following patterns can be
used to translate from the C++ APIs to the corresponding Python APIs.</source>
          <target state="translated">There is no API documentation for PyICU. The API for ICU is documented at &lt;a href=&quot;http://icu-project.org/apiref/icu4c/&quot;&gt;http://icu-project.org/apiref/icu4c/&lt;/a&gt; and the following patterns can be used to translate from the C++ APIs to the corresponding Python APIs.</target>
        </trans-unit>
        <trans-unit id="41a73409309be6b9058e9f2759f1b64d95b7f5d7" translate="yes" xml:space="preserve">
          <source>To convert a Python &lt;code&gt;str&lt;/code&gt; encoded in an encoding other than &lt;code&gt;utf-8&lt;/code&gt; to
an ICU &lt;code&gt;UnicodeString&lt;/code&gt; use the &lt;code&gt;UnicodeString(str, encodingName)&lt;/code&gt;
constructor.</source>
          <target state="translated">To convert a Python &lt;code&gt;str&lt;/code&gt; encoded in an encoding other than &lt;code&gt;utf-8&lt;/code&gt; to an ICU &lt;code&gt;UnicodeString&lt;/code&gt; use the &lt;code&gt;UnicodeString(str, encodingName)&lt;/code&gt; constructor.</target>
        </trans-unit>
        <trans-unit id="e07e746bd25bbcf4a78ccd2f395b13fd6ad4cb85" translate="yes" xml:space="preserve">
          <source>To get the default time zone use::</source>
          <target state="translated">To get the default time zone use::</target>
        </trans-unit>
        <trans-unit id="964041de95396beda4b7445896411c942d01a247" translate="yes" xml:space="preserve">
          <source>To get the time zone's id, use the &lt;code&gt;tzid&lt;/code&gt; attribute or coerce the time
zone to a string::</source>
          <target state="translated">To get the time zone's id, use the &lt;code&gt;tzid&lt;/code&gt; attribute or coerce the time zone to a string::</target>
        </trans-unit>
        <trans-unit id="ca4f9dcf204e2037bfe5884867bead98bd9cbaf8" translate="yes" xml:space="preserve">
          <source>Welcome</source>
          <target state="translated">어서 오십시오</target>
        </trans-unit>
        <trans-unit id="a77c1b0bbfef4ee16b22d8aa9c1fce066cde0feb" translate="yes" xml:space="preserve">
          <source>Welcome to PyICU, a Python extension wrapping the ICU C++ libraries.</source>
          <target state="translated">Welcome to PyICU, a Python extension wrapping the ICU C++ libraries.</target>
        </trans-unit>
        <trans-unit id="7d53c9afe48df013f35ee990e69603b220c15393" translate="yes" xml:space="preserve">
          <source>What's available</source>
          <target state="translated">What's available</target>
        </trans-unit>
        <trans-unit id="4976ef77dcd73ca07e21b0ca4a8db2e7103565d9" translate="yes" xml:space="preserve">
          <source>Windows
Make sure that &lt;code&gt;PATH&lt;/code&gt; contains paths to the directory(ies)
containing the ICU DLLs.</source>
          <target state="translated">Windows Make sure that &lt;code&gt;PATH&lt;/code&gt; contains paths to the directory(ies) containing the ICU DLLs.</target>
        </trans-unit>
        <trans-unit id="fcc9016d1aa6a646348df69e14d31e955d51da60" translate="yes" xml:space="preserve">
          <source>arrays</source>
          <target state="translated">arrays</target>
        </trans-unit>
        <trans-unit id="c09a2565eb3e551d0b33b3f5111b7fd0b90263f4" translate="yes" xml:space="preserve">
          <source>dates</source>
          <target state="translated">dates</target>
        </trans-unit>
        <trans-unit id="49517e211f1c3e817cc3109855e126ffea920968" translate="yes" xml:space="preserve">
          <source>error reporting</source>
          <target state="translated">error reporting</target>
        </trans-unit>
        <trans-unit id="5434da743bfd27c574886d5883fab289d561d7bf" translate="yes" xml:space="preserve">
          <source>or, even simpler::</source>
          <target state="translated">or, even simpler::</target>
        </trans-unit>
        <trans-unit id="1877f3cb6e58176272997a08bddfe4f401299ac3" translate="yes" xml:space="preserve">
          <source>strings</source>
          <target state="translated">strings</target>
        </trans-unit>
        <trans-unit id="2c8f273fd55d11d69d1f69b5843eaaa1420b70b4" translate="yes" xml:space="preserve">
          <source>timezones</source>
          <target state="translated">timezones</target>
        </trans-unit>
        <trans-unit id="b5b78229ca28c734b63eb6dadefcc2fc1c0f993b" translate="yes" xml:space="preserve">
          <source>verify that the icu-config program is available or that the &lt;code&gt;INCLUDES&lt;/code&gt;,
&lt;code&gt;LFLAGS&lt;/code&gt;, &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LIBRARIES&lt;/code&gt; dictionaries in &lt;code&gt;setup.py&lt;/code&gt;
contain correct values for your platform. Starting with ICU 60, -std=c++11
must appear in your CFLAGS.</source>
          <target state="translated">verify that the icu-config program is available or that the &lt;code&gt;INCLUDES&lt;/code&gt; , &lt;code&gt;LFLAGS&lt;/code&gt; , &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LIBRARIES&lt;/code&gt; dictionaries in &lt;code&gt;setup.py&lt;/code&gt; contain correct values for your platform. Starting with ICU 60, -std=c++11 must appear in your CFLAGS.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
