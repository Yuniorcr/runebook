<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/py3nvml/">
    <body>
      <group id="py3nvml">
        <trans-unit id="704431f167e4c89d2c536290e8106e4498938413" translate="yes" xml:space="preserve">
          <source>(Added by me - not ported from NVIDIA library)</source>
          <target state="translated">(내가 추가 함-NVIDIA 라이브러리에서 이식되지 않음)</target>
        </trans-unit>
        <trans-unit id="227bc31d7b36b370ad9fb845a11f08a6ab053529" translate="yes" xml:space="preserve">
          <source>(below here is everything ported from pynvml)</source>
          <target state="translated">(아래는 pynvml에서 포팅 된 모든 것입니다)</target>
        </trans-unit>
        <trans-unit id="60bbdaa80921b503f91ea89f2c2ae243d07ab490" translate="yes" xml:space="preserve">
          <source>(this shows a slightly modified process info pane below).</source>
          <target state="translated">(아래에 약간 수정 된 프로세스 정보 창이 표시됩니다).</target>
        </trans-unit>
        <trans-unit id="7cc55a87b4033159e9476add24ac25052695ef54" translate="yes" xml:space="preserve">
          <source>, which checks the memory usage of a gpu, this
function checks if a process is running on a gpu. For a system with N gpus, returns a list of N booleans, where the nth
value is True if no process was found running on gpu n. An example use is:</source>
          <target state="translated">, GPU의 메모리 사용량을 확인하는이 함수는 프로세스가 GPU에서 실행 중인지 확인합니다. N gpus가있는 시스템의 경우 N 부울 목록을 반환합니다. 여기서 gpu n에서 실행중인 프로세스를 찾을 수없는 경우 n 번째 값은 True입니다. 사용 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="91934a72bc889f2943dc05bf3a9f58516be89cb3" translate="yes" xml:space="preserve">
          <source>. It simply returns a list of integers
with the number of processes running on each gpu. E.g. if you had 1 process
running on gpu 5 in an 8 gpu system, you would expect to get the following:</source>
          <target state="translated">. 단순히 각 GPU에서 실행되는 프로세스 수와 함께 정수 목록을 반환합니다. 예를 들어 8 GPU 시스템의 GPU 5에서 1 개의 프로세스를 실행했다면 다음과 같은 결과를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12e74228fcf492e4b44240660f7f6beb1d738614" translate="yes" xml:space="preserve">
          <source>. The print code is horribly messy but the query code is very
simple and should be understandable.</source>
          <target state="translated">. 인쇄 코드는 끔찍하게 지저분하지만 쿼리 코드는 매우 간단하고 이해할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="d8c214ff645bee46d196d7d7c1547798fbe8173f" translate="yes" xml:space="preserve">
          <source>. This does the equivalent of the</source>
          <target state="translated">. 이것은</target>
        </trans-unit>
        <trans-unit id="266251eb2c07262b529acf428a1f2f1cdecf8269" translate="yes" xml:space="preserve">
          <source>5.  All meaningful NVML constants and enums are exposed in Python. E.g. the constant</source>
          <target state="translated">5. 모든 의미있는 NVML 상수와 열거 형이 Python에 노출됩니다. 예 : 상수</target>
        </trans-unit>
        <trans-unit id="8d7dab62e143b4a72dde1445dc8401030a6ea3c5" translate="yes" xml:space="preserve">
          <source>A function to &amp;lsquo;restrict&amp;rsquo; the available GPUs by setting the</source>
          <target state="translated">다음을 설정하여 사용 가능한 GPU를 '제한'하는 기능</target>
        </trans-unit>
        <trans-unit id="c6dd990fb0db5865282a050b1b283b6b2d1bebc4" translate="yes" xml:space="preserve">
          <source>A script for displaying a differently formatted nvidia-smi.</source>
          <target state="translated">다른 형식의 nvidia-smi를 표시하기위한 스크립트입니다.</target>
        </trans-unit>
        <trans-unit id="dbe0cd1883bf0d42b17bf7de137c669d242ad502" translate="yes" xml:space="preserve">
          <source>Added new functions for NVML 2.285.  See NVML documentation for more information.</source>
          <target state="translated">NVML 2.285에 대한 새로운 기능이 추가되었습니다. 자세한 정보는 NVML 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1deb5bbae008eade6b5dcb0a625acd0591daffc7" translate="yes" xml:space="preserve">
          <source>Added new functions for NVML 3.295.  See NVML documentation for more information.</source>
          <target state="translated">NVML 3.295에 대한 새로운 기능이 추가되었습니다. 자세한 정보는 NVML 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="735911b677104cb5028b4da58fa91df8314e35dd" translate="yes" xml:space="preserve">
          <source>Added new functions for NVML 4.304.  See NVML documentation for more information.</source>
          <target state="translated">NVML 4.304에 대한 새로운 기능이 추가되었습니다. 자세한 정보는 NVML 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6501db0477ac065c7bad35525b338a45afdb5859" translate="yes" xml:space="preserve">
          <source>Added new functions for NVML 5.319.  See NVML documentation for more information.</source>
          <target state="translated">NVML 5.319에 대한 새로운 기능이 추가되었습니다. 자세한 정보는 NVML 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="74439b8de6b2a44d5e98c7f96c25e00709b55e38" translate="yes" xml:space="preserve">
          <source>Added new functions for NVML 6.340.  See NVML documentation for more information.</source>
          <target state="translated">NVML 6.340에 대한 새로운 기능이 추가되었습니다. 자세한 정보는 NVML 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c89632354ca3ef49116e2c099c4e475c87703661" translate="yes" xml:space="preserve">
          <source>Added new functions for NVML 7.346.  See NVML documentation for more information.</source>
          <target state="translated">NVML 7.346에 대한 새로운 기능이 추가되었습니다. 자세한 정보는 NVML 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6ff149aaa39cc78e346b524c63db3dcadd42a317" translate="yes" xml:space="preserve">
          <source>Added new functions for NVML 7.352.  See NVML documentation for more information.</source>
          <target state="translated">NVML 7.352에 대한 새로운 기능이 추가되었습니다. 자세한 정보는 NVML 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="af4032642a16e6ce6dc653303563c5d13ec729f2" translate="yes" xml:space="preserve">
          <source>Added nvidia_smi.py tool as a sample app.</source>
          <target state="translated">샘플 앱으로 nvidia_smi.py 도구를 추가했습니다.</target>
        </trans-unit>
        <trans-unit id="f5ae27e7f9268d20255645cd8d9bcf218a6cada9" translate="yes" xml:space="preserve">
          <source>Additionally, see</source>
          <target state="translated">또한</target>
        </trans-unit>
        <trans-unit id="369e445c7fba3d6563f78e32c1bc7f70d5b3daa0" translate="yes" xml:space="preserve">
          <source>Becomes</source>
          <target state="translated">된다</target>
        </trans-unit>
        <trans-unit id="e949293bb3141d39921183faafd54e8bcb4089c2" translate="yes" xml:space="preserve">
          <source>Becomes:</source>
          <target state="translated">된다 :</target>
        </trans-unit>
        <trans-unit id="60bb376ae1ce78b17c061cdfd24472de92207578" translate="yes" xml:space="preserve">
          <source>C function output parameters are returned from the corresponding Python function as tuples, rather than requiring pointers. Eg the C function:</source>
          <target state="translated">C 함수 출력 매개 변수는 포인터를 요구하지 않고 해당 Python 함수에서 튜플로 반환됩니다. 예 : C 기능 :</target>
        </trans-unit>
        <trans-unit id="2905dac8b61f5bcd1de6af089bac4b6b474145b2" translate="yes" xml:space="preserve">
          <source>C structs are converted into Python classes. E.g. the C struct:</source>
          <target state="translated">C 구조체는 Python 클래스로 변환됩니다. 예 : C 구조체 :</target>
        </trans-unit>
        <trans-unit id="e352fc138c5e488dc34254c3ee2e99e3e9aaf288" translate="yes" xml:space="preserve">
          <source>COPYRIGHT</source>
          <target state="translated">저작권</target>
        </trans-unit>
        <trans-unit id="8ca62237c945f3edd9281cf14c1e3443a046dbf9" translate="yes" xml:space="preserve">
          <source>CUDA_VISIBLE_DEVICES</source>
          <target state="translated">CUDA_VISIBLE_DEVICES</target>
        </trans-unit>
        <trans-unit id="2f6ba8758de1d885a0d3872a275066ca478ea17d" translate="yes" xml:space="preserve">
          <source>Can be called like so:</source>
          <target state="translated">다음과 같이 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="069e13cf3af30589ad6833df9acef9dabc3e551c" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2011-2015, NVIDIA Corporation.  All rights reserved.</source>
          <target state="translated">Copyright (c) 2011-2015, NVIDIA Corporation. All rights reserved.</target>
        </trans-unit>
        <trans-unit id="50c48d0dfd1dbe71efefaa1cb3393583fb4e3777" translate="yes" xml:space="preserve">
          <source>Differences from NVML</source>
          <target state="translated">NVML과의 차이점</target>
        </trans-unit>
        <trans-unit id="db5fa106a436feaf5d006bd04120ced20aa11ad8" translate="yes" xml:space="preserve">
          <source>Documentation also available at &lt;a href=&quot;https://py3nvml.readthedocs.io/en/latest/&quot;&gt;readthedocs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://py3nvml.readthedocs.io/en/latest/&quot;&gt;readthedocs&lt;/a&gt; 에서도 문서를 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fa4a7a170f7075560c98a976572cae386b13a240" translate="yes" xml:space="preserve">
          <source>E.g.</source>
          <target state="translated">예</target>
        </trans-unit>
        <trans-unit id="501651209e2106677cbbfb39831edf741cac6663" translate="yes" xml:space="preserve">
          <source>Finally, I will remove the</source>
          <target state="translated">마지막으로</target>
        </trans-unit>
        <trans-unit id="4e28dfa89940cdd68d9f582a02149b891b0b37ab" translate="yes" xml:space="preserve">
          <source>Fixing nvmlUnitGetDeviceCount bug</source>
          <target state="translated">nvmlUnitGetDeviceCount 버그 수정</target>
        </trans-unit>
        <trans-unit id="92521aadb5ff34be1fd8e987c4188b17dd0475b0" translate="yes" xml:space="preserve">
          <source>For py3smi, you can specify an update period so it will refresh the feed every
few seconds. I.e., similar to &lt;code&gt;watch -n5 nvidia-smi&lt;/code&gt;, you can run
&lt;code&gt;py3smi -l 5&lt;/code&gt;.</source>
          <target state="translated">py3smi의 경우 몇 초마다 피드를 새로 고치도록 업데이트 기간을 지정할 수 있습니다. 즉, &lt;code&gt;watch -n5 nvidia-smi&lt;/code&gt; 와 유사하게 &lt;code&gt;py3smi -l 5&lt;/code&gt; 를 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3ac4ec4b658f9b82462d6e40fbef20ad8cbd67ef" translate="yes" xml:space="preserve">
          <source>From GitHub:</source>
          <target state="translated">GitHub에서 :</target>
        </trans-unit>
        <trans-unit id="6c3465d12c7b6b8435a8a4dc1983188ec6d223d7" translate="yes" xml:space="preserve">
          <source>From PyPi:</source>
          <target state="translated">PyPi에서 :</target>
        </trans-unit>
        <trans-unit id="e5f2e481faf49aa3c50477d5e6f9cb346286dd61" translate="yes" xml:space="preserve">
          <source>I found the default</source>
          <target state="translated">기본값을 찾았습니다.</target>
        </trans-unit>
        <trans-unit id="992afe3b01a5d9b3e27fb777f83eb43df7a1a30b" translate="yes" xml:space="preserve">
          <source>I have copied in the
C docstring. While this will result in some strange looking docstrings which
will be slightly incorrect, they should give good guidance on the scope of the
function, something which was ill-defined before.</source>
          <target state="translated">C 독 스트링에 복사했습니다. 이로 인해 약간 부정확 할 수있는 이상하게 보이는 독 스트링이 생성되지만 이전에는 잘못 정의 된 함수 범위에 대한 좋은 지침을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="d00a94812cca7916994a62a20718f506645fa915" translate="yes" xml:space="preserve">
          <source>I have found this useful as I have a shared gpu server and like to use tensorflow which is very greedy and calls to
&lt;code&gt;tf.Session()&lt;/code&gt; grabs all available gpus.</source>
          <target state="translated">공유 GPU 서버가 있고 매우 탐욕스럽고 &lt;code&gt;tf.Session()&lt;/code&gt; 호출이 사용 가능한 모든 GPU 를 가져 오는 tensorflow를 사용하기를 좋아하기 때문에 이것이 유용하다는 것을 알았 습니다.</target>
        </trans-unit>
        <trans-unit id="0d1240aac65831337cd9bdde0d32f51e7a1c9cc3" translate="yes" xml:space="preserve">
          <source>If it could connect to the GPUs but not enough were available (i.e. more than
1 was requested), it will take everything it can and raise a RuntimeWarning.</source>
          <target state="translated">GPU에 연결할 수 있지만 사용할 수있는 것이 충분하지 않은 경우 (즉, 1 개 이상 요청 됨) 가능한 모든 것을 가져와 RuntimeWarning을 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="ed2b8f17a7d2b4a8db4d540ccab284b39ca4423a" translate="yes" xml:space="preserve">
          <source>If it could connect to the GPUs, but there were none available, it will
raise a ValueError.</source>
          <target state="translated">GPU에 연결할 수 있지만 사용 가능한 것이 없으면 ValueError가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b252c185783690b130c12fce2ddd8c35acfef584" translate="yes" xml:space="preserve">
          <source>If the method could not connect to any NVIDIA gpus, it will raise
a RuntimeWarning.</source>
          <target state="translated">메소드가 NVIDIA GPU에 연결할 수없는 경우 RuntimeWarning이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e097708d277a2d697174749e649d6518f6b0c686" translate="yes" xml:space="preserve">
          <source>In addition to these NVIDIA functions to query the state of the GPU, I have written
a couple functions/tools to help in using gpus (particularly for a shared
gpu server). These are:</source>
          <target state="translated">GPU의 상태를 쿼리하는 이러한 NVIDIA 함수 외에도 gpus (특히 공유 GPU 서버의 경우)를 사용하는 데 도움이되는 몇 가지 함수 / 도구를 작성했습니다. 이것들은:</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="a3e131a915414ce8cf4a7270e2e3c671ccb2a4f3" translate="yes" xml:space="preserve">
          <source>Instead of returning error codes, failing error codes are raised as Python exceptions. I.e. They should be wrapped with exception handlers.</source>
          <target state="translated">오류 코드를 반환하는 대신 실패 오류 코드가 Python 예외로 발생합니다. 즉, 예외 처리기로 래핑되어야합니다.</target>
        </trans-unit>
        <trans-unit id="0398ccd0f49298b10a3d76a47800d2ebecd49859" translate="yes" xml:space="preserve">
          <source>LICENSE</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="fc21b17e3c047c9d7adcd7f277f0e530933bf10f" translate="yes" xml:space="preserve">
          <source>NVML_TEMPERATURE_GPU</source>
          <target state="translated">NVML_TEMPERATURE_GPU</target>
        </trans-unit>
        <trans-unit id="744d639566dcd19c2a130dd3663ffcc7893f8621" translate="yes" xml:space="preserve">
          <source>NVML_VALUE_NOT_AVAILABLE</source>
          <target state="translated">NVML_VALUE_NOT_AVAILABLE</target>
        </trans-unit>
        <trans-unit id="ddce60bdbe867b91685dbf9d22230e58dc0d0d74" translate="yes" xml:space="preserve">
          <source>Neither the name of the NVIDIA Corporation nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.</source>
          <target state="translated">특정 사전 서면 허가 없이는 NVIDIA Corporation의 이름이나 기여자의 이름을이 소프트웨어에서 파생 된 제품을 보증하거나 홍보하는 데 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3ddb6f391c98ce1acabaa86671720fb684ebe4d5" translate="yes" xml:space="preserve">
          <source>Or the following will grab 2 gpus from the first 4 (and leave any higher gpus untouched)</source>
          <target state="translated">또는 다음은 처음 4 개에서 2 개의 gpus를 잡을 것입니다 (그리고 더 높은 gpus는 그대로 둡니다)</target>
        </trans-unit>
        <trans-unit id="d43f8378b439b7e6707baa3a72eb26a84c780d3b" translate="yes" xml:space="preserve">
          <source>Or, download and pip install:</source>
          <target state="translated">또는 다운로드 및 pip 설치 :</target>
        </trans-unit>
        <trans-unit id="832dc285ce4f7c5de8a16a81acaa9528741d8199" translate="yes" xml:space="preserve">
          <source>Ported to support Python 3.0 and Python 2.0 syntax.</source>
          <target state="translated">Python 3.0 및 Python 2.0 구문을 지원하도록 이식되었습니다.</target>
        </trans-unit>
        <trans-unit id="498066086bbf68c8bb559d197592643e0ac0dd69" translate="yes" xml:space="preserve">
          <source>Python 3 Bindings for the NVIDIA Management Library</source>
          <target state="translated">NVIDIA 관리 라이브러리 용 Python 3 바인딩</target>
        </trans-unit>
        <trans-unit id="348bb74784a431e09fc89ea2883c70553eec3de9" translate="yes" xml:space="preserve">
          <source>Python 3 compatible bindings to the NVIDIA Management Library. Can be used to
query the state of the GPUs on your system. This was ported from the NVIDIA
provided python bindings &lt;a href=&quot;https://pypi.python.org/pypi/nvidia-ml-py/7.352.0&quot;&gt;nvidia-ml-py&lt;/a&gt;, which only
supported python 2. I have forked from version 7.352.0. The old library was
itself a wrapper around the &lt;a href=&quot;http://developer.nvidia.com/nvidia-management-library-nvml&quot;&gt;NVIDIA Management Library&lt;/a&gt;.</source>
          <target state="translated">NVIDIA 관리 라이브러리에 대한 Python 3 호환 바인딩. 시스템의 GPU 상태를 쿼리하는 데 사용할 수 있습니다. 이것은 NVIDIA가 제공 한 python 바인딩 &lt;a href=&quot;https://pypi.python.org/pypi/nvidia-ml-py/7.352.0&quot;&gt;nvidia-ml-py&lt;/a&gt; 에서 포팅되었으며, python 2 만 지원했습니다. 버전 7.352.0에서 분기했습니다. 오래된 라이브러리는 그 자체로 &lt;a href=&quot;http://developer.nvidia.com/nvidia-management-library-nvml&quot;&gt;NVIDIA Management Library를&lt;/a&gt; 둘러싼 래퍼였습니다 .</target>
        </trans-unit>
        <trans-unit id="7eb9a0922eac8ead10ca27b9a58e8e9aa959cda6" translate="yes" xml:space="preserve">
          <source>Python 3.5+.</source>
          <target state="translated">Python 3.5 이상.</target>
        </trans-unit>
        <trans-unit id="7a9e7bd80962382a9a912d3b964d77cd22f8401a" translate="yes" xml:space="preserve">
          <source>Python handles string buffer creation.  E.g. the C function:</source>
          <target state="translated">파이썬은 문자열 버퍼 생성을 처리합니다. 예 : C 기능 :</target>
        </trans-unit>
        <trans-unit id="c20bb0f7c4d78b01fa838319a2981e9b417f1f05" translate="yes" xml:space="preserve">
          <source>Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:</source>
          <target state="translated">다음 조건이 충족되는 경우 수정하거나 수정하지 않고 소스 및 이진 형식으로 재배포 및 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57ec4bae787e02e75ae9439f5fbfc851c887f70f" translate="yes" xml:space="preserve">
          <source>Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.</source>
          <target state="translated">이진 형식으로 재배포 할 경우 위의 저작권 표시,이 조건 목록 및 배포와 함께 제공된 설명서 및 / 또는 기타 자료의 다음 면책 사항을 재현해야합니다.</target>
        </trans-unit>
        <trans-unit id="b7338b5245c44e48d0d288fd4ec6f22445873f8e" translate="yes" xml:space="preserve">
          <source>Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.</source>
          <target state="translated">소스 코드의 재배포에는 위의 저작권 표시,이 조건 목록 및 다음 면책 사항이 유지되어야합니다.</target>
        </trans-unit>
        <trans-unit id="13691cf14b512760be4b1cedef755eeca1ba33bc" translate="yes" xml:space="preserve">
          <source>Regular Usage</source>
          <target state="translated">정기적 인 사용</target>
        </trans-unit>
        <trans-unit id="5826bb879e5266b9bd371e5afef847dd5dab8c61" translate="yes" xml:space="preserve">
          <source>Release Notes (for pynvml)</source>
          <target state="translated">출시 정보 (pynvml 용)</target>
        </trans-unit>
        <trans-unit id="63c2178c36666b52b538ae4daf84c57f71791918" translate="yes" xml:space="preserve">
          <source>Requires</source>
          <target state="translated">필요</target>
        </trans-unit>
        <trans-unit id="734bd5b4462fb02a485b86fa225dc775792b4bc5" translate="yes" xml:space="preserve">
          <source>Running pip install will now put this script in your python&amp;rsquo;s
bin, and you&amp;rsquo;ll be able to run it from the command line. Here is a comparison of
the two outputs:</source>
          <target state="translated">이제 pip install을 실행하면이 스크립트가 Python의 저장소에 저장되고 명령 줄에서 실행할 수 있습니다. 다음은 두 출력을 비교 한 것입니다.</target>
        </trans-unit>
        <trans-unit id="3c4a8ed56694d0489d0758c2bf05c7d1bf41c87a" translate="yes" xml:space="preserve">
          <source>See the Utils section below for more info.</source>
          <target state="translated">자세한 정보는 아래의 유틸리티 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="492a841972bf67520a805dd7c1a900fe70ae424f" translate="yes" xml:space="preserve">
          <source>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &amp;ldquo;AS IS&amp;rdquo; AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</source>
          <target state="translated">이 소프트웨어는 저작권 보유자 및 기여자가 &quot;있는 그대로&quot;제공하며 상품성 및 특정 목적에의 적합성에 대한 묵시적 보증을 포함하되 이에 국한되지 않는 모든 명시 적 또는 묵시적 보증을 부인합니다. 어떠한 경우에도 저작권 보유자 또는 기여자는 직접적, 간접적, 부수적, 특수, 예시 적 또는 결과적 손해 (대체 제품 또는 서비스의 조달, 사용, 데이터 또는 이익 손실을 포함하되 이에 국한되지 않음)에 대해 책임을지지 않습니다. 또는 비즈니스 중단) 계약, 엄격한 책임 또는 불법 행위 (과실 또는 기타 방식 포함)에 관계없이 어떠한 방식 으로든이 소프트웨어의 사용으로 인해 발생하는 모든 책임 이론은 그러한 손해의 가능성을 사전에 알고있는 경우에도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">그만큼</target>
        </trans-unit>
        <trans-unit id="a17ccb0e786e5be596b23b255eb985c316e59dcb" translate="yes" xml:space="preserve">
          <source>The py3nvml library consists of python methods which wrap
several NVML functions, implemented in a C shared library.
Each function&amp;rsquo;s use is the same with the following exceptions:</source>
          <target state="translated">py3nvml 라이브러리는 C 공유 라이브러리에 구현 된 여러 NVML 함수를 래핑하는 python 메서드로 구성됩니다. 각 기능의 사용은 다음을 제외하고 동일합니다.</target>
        </trans-unit>
        <trans-unit id="73af3e91bd8b4138712c534603967a8ee83e9444" translate="yes" xml:space="preserve">
          <source>This function has no return codes but may raise some warnings/exceptions:</source>
          <target state="translated">이 함수에는 반환 코드가 없지만 몇 가지 경고 / 예외가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bcb8937b8ed2af638d4ade82de7ff9aca38d5dc4" translate="yes" xml:space="preserve">
          <source>This function is called by</source>
          <target state="translated">이 함수는</target>
        </trans-unit>
        <trans-unit id="eb17757444438b386d2785d0368cdd190a0ce018" translate="yes" xml:space="preserve">
          <source>This tool can query the gpu status. Unlike the default for</source>
          <target state="translated">이 도구는 GPU 상태를 쿼리 할 수 ​​있습니다. 기본값과 달리</target>
        </trans-unit>
        <trans-unit id="2577f1f58f982d2c3230e6125914a7c51ee5ed2d" translate="yes" xml:space="preserve">
          <source>This will look for 3 available gpus in the range of gpus from 0 to 3. The range option is not necessary, and it only
serves to restrict the search space for the grab_gpus.</source>
          <target state="translated">이것은 0에서 3까지의 gpus 범위에서 3 개의 사용 가능한 gpus를 찾습니다. 범위 옵션은 필요하지 않으며 grab_gpus에 대한 검색 공간을 제한하는 역할 만합니다.</target>
        </trans-unit>
        <trans-unit id="22b6e3589839140fd4ba1930ad60f08e94a96176" translate="yes" xml:space="preserve">
          <source>To try and keep py3nvml somewhat up-to-date with the constantly evolving nvidia
drivers, I have done some work to the</source>
          <target state="translated">끊임없이 진화하는 nvidia 드라이버로 py3nvml을 최신 상태로 유지하기 위해 몇 가지 작업을 수행했습니다.</target>
        </trans-unit>
        <trans-unit id="a63973d287af6801bc621e6561a3547ef84c0931" translate="yes" xml:space="preserve">
          <source>Updated nvidia_smi.py tool</source>
          <target state="translated">nvidia_smi.py 도구 업데이트</target>
        </trans-unit>
        <trans-unit id="342416bab2fc7ca2c2db14c0b87567aecd55c1bf" translate="yes" xml:space="preserve">
          <source>Updated nvidia_smi.py tool
- Includes additional error handling</source>
          <target state="translated">nvidia_smi.py 도구 업데이트-추가 오류 처리 포함</target>
        </trans-unit>
        <trans-unit id="06b1bdb677a0f744d39a83c7a275b004dd2bdae4" translate="yes" xml:space="preserve">
          <source>Updates in Version 0.2.3</source>
          <target state="translated">버전 0.2.3의 업데이트</target>
        </trans-unit>
        <trans-unit id="24a271451e65e20717de9aee72e172c4a79d419b" translate="yes" xml:space="preserve">
          <source>Utils</source>
          <target state="translated">유틸리티</target>
        </trans-unit>
        <trans-unit id="a84e24132b15412a19df8221013949e101c55fb7" translate="yes" xml:space="preserve">
          <source>Version 2.285.0</source>
          <target state="translated">Version 2.285.0</target>
        </trans-unit>
        <trans-unit id="424d515f57cd4be403371b578ceaefb9a1694096" translate="yes" xml:space="preserve">
          <source>Version 3.295.0</source>
          <target state="translated">Version 3.295.0</target>
        </trans-unit>
        <trans-unit id="60410531de5de932f3c14bb2321f2fb3c899e48e" translate="yes" xml:space="preserve">
          <source>Version 4.304.0</source>
          <target state="translated">Version 4.304.0</target>
        </trans-unit>
        <trans-unit id="b57420d369fa4b5619d1fe9c0b91ac44b2dd133c" translate="yes" xml:space="preserve">
          <source>Version 4.304.3</source>
          <target state="translated">Version 4.304.3</target>
        </trans-unit>
        <trans-unit id="5a0bfa91792b8a2728cf758c0073ca9f5d26f164" translate="yes" xml:space="preserve">
          <source>Version 5.319.0</source>
          <target state="translated">Version 5.319.0</target>
        </trans-unit>
        <trans-unit id="629a16124706073cc4659c90813d6c86299cb3c7" translate="yes" xml:space="preserve">
          <source>Version 6.340.0</source>
          <target state="translated">Version 6.340.0</target>
        </trans-unit>
        <trans-unit id="a55154b62aad0f22608266e16b1b447b86e480fd" translate="yes" xml:space="preserve">
          <source>Version 7.346.0</source>
          <target state="translated">Version 7.346.0</target>
        </trans-unit>
        <trans-unit id="1de9161c410a4e4844ea46feb191534e8fb68885" translate="yes" xml:space="preserve">
          <source>Version 7.352.0</source>
          <target state="translated">Version 7.352.0</target>
        </trans-unit>
        <trans-unit id="fcbaf9283f183bb6c0c9f79efe2224c06f1bacc8" translate="yes" xml:space="preserve">
          <source>Visit &lt;a href=&quot;https://docs.nvidia.com/deploy/nvml-api/index.html&quot;&gt;NVML reference&lt;/a&gt; for a list of the
functions available and their help. Also the script py3smi is a bit hacky but
shows examples of me querying the GPUs for info.</source>
          <target state="translated">사용 가능한 기능 목록과 도움말을 보려면 &lt;a href=&quot;https://docs.nvidia.com/deploy/nvml-api/index.html&quot;&gt;NVML 참조&lt;/a&gt; 를 방문하십시오 . 또한 스크립트 py3smi는 약간 해키이지만 정보를 위해 GPU를 쿼리하는 예제를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="564f8c6e76fbd512be2e38dabdfdd61550d0c3cc" translate="yes" xml:space="preserve">
          <source>With</source>
          <target state="translated">와</target>
        </trans-unit>
        <trans-unit id="0bc0d53928cebde48aae4cbefff387a8439e7549" translate="yes" xml:space="preserve">
          <source>You can adjust the memory threshold for determining if a GPU is free/used with the &lt;code&gt;gpu_fraction&lt;/code&gt; parameter
(default is 1):</source>
          <target state="translated">&lt;code&gt;gpu_fraction&lt;/code&gt; 매개 변수 (기본값은 1)를 사용하여 GPU가 사용 가능한지 / 사용되는지 확인하기 위해 메모리 임계 값을 조정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6f035e1d457790c8603eb1d7dcbb39015737c414" translate="yes" xml:space="preserve">
          <source>You can also get the full output (very similar to nvidia-smi) by running</source>
          <target state="translated">다음을 실행하여 전체 출력 (nvidia-smi와 매우 유사)을 얻을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="728e2975282484231f7526dea55261c96f75e65d" translate="yes" xml:space="preserve">
          <source>You can call the &lt;code&gt;grab_gpus(num_gpus, gpu_select, gpu_fraction=.95)&lt;/code&gt; function to check the available gpus and set
the</source>
          <target state="translated">당신은 호출 할 수 있습니다 &lt;code&gt;grab_gpus(num_gpus, gpu_select, gpu_fraction=.95)&lt;/code&gt; 기능은 사용 가능한 GPU가를 확인하고 설정하기</target>
        </trans-unit>
        <trans-unit id="b56345d25d16b8f7ab95f7f01a6382017a2cc434" translate="yes" xml:space="preserve">
          <source>command:</source>
          <target state="translated">명령:</target>
        </trans-unit>
        <trans-unit id="8c4d6478bbb2f8c7126fd20d5bb2b5a62a7a53f5" translate="yes" xml:space="preserve">
          <source>constant is not used.  Instead None is mapped to the field.</source>
          <target state="translated">상수는 사용되지 않습니다. 대신 없음이 필드에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="8d0b60bc01a5c7654c3fb5ff8e2c46005bcd60f7" translate="yes" xml:space="preserve">
          <source>environment variable as need be. It determines if a GPU is available by checking if the
amount of free memory is below memory-usage is above/equal to the gpu_fraction value. The default of .95 allows for some
small amount of memory to be taken before it deems the gpu as being &amp;lsquo;used&amp;rsquo;.</source>
          <target state="translated">필요에 따라 환경 변수. 사용 가능한 메모리 양이 메모리 사용량 미만인지 gpu_fraction 값보다 크거나 같은지 확인하여 GPU를 사용할 수 있는지 확인합니다. 기본값 인 .95는 GPU를 '사용'으로 간주하기 전에 약간의 메모리를 사용할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="fed8dddda7bd1744a6df8c63fb5e5702f3cd9fa2" translate="yes" xml:space="preserve">
          <source>environment variable.</source>
          <target state="translated">환경 변수.</target>
        </trans-unit>
        <trans-unit id="5ac8c16f64282ce55550b3ffdc9c54ef8f71d410" translate="yes" xml:space="preserve">
          <source>from python with subprocess.</source>
          <target state="translated">파이썬에서 하위 프로세스로.</target>
        </trans-unit>
        <trans-unit id="ecc1b7adbf1516af0cf74bb546f4f7d2ec5b60b0" translate="yes" xml:space="preserve">
          <source>get_free_gpus</source>
          <target state="translated">get_free_gpus</target>
        </trans-unit>
        <trans-unit id="88d37485b4f6c6a7f751728dbab10a85a9e55c30" translate="yes" xml:space="preserve">
          <source>get_num_procs</source>
          <target state="translated">get_num_procs</target>
        </trans-unit>
        <trans-unit id="ee06ae481ff22e1fb93ff6f1bf8a47c71c2376cc" translate="yes" xml:space="preserve">
          <source>grab_gpus</source>
          <target state="translated">grab_gpus</target>
        </trans-unit>
        <trans-unit id="7bd8e063d0b2bd77153a4cbb4935df900737bde8" translate="yes" xml:space="preserve">
          <source>is available under</source>
          <target state="translated">아래에서 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="20ed587270a1ca91b4a908b6b7651f51cc18aaff" translate="yes" xml:space="preserve">
          <source>module in a future version, as
I believe it was only ever meant as an example of how to use the nvml functions
to query the gpus, and is now quite out of date. To get the same functionality,
you can call</source>
          <target state="translated">nvml 함수를 사용하여 gpus를 쿼리하는 방법의 예일 뿐이라고 생각하는 모듈로, 지금은 상당히 구식입니다. 동일한 기능을 얻으려면 다음을 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c41c35762d4e943916d5591e0e99735a35d67a15" translate="yes" xml:space="preserve">
          <source>module to query the device and get info on the
GPUs, and then defined my own printout. I have included this as a script in</source>
          <target state="translated">모듈을 사용하여 장치를 쿼리하고 GPU에 대한 정보를 얻은 다음 자체 출력물을 정의했습니다. 나는 이것을 스크립트로 포함했습니다.</target>
        </trans-unit>
        <trans-unit id="a36d0effc6d7cb4853b469cf9d391c6275850548" translate="yes" xml:space="preserve">
          <source>module. In particular,
I have updated all the constants that were missing in py3nvml and existing in the
&lt;a href=&quot;https://github.com/NVIDIA/nvidia-settings/blob/master/src/nvml.h&quot;&gt;NVIDIA source&lt;/a&gt; as of version 418.43. In addition, I have wrapped all of these
constants in Enums so it is easier to see what constants go together. Finally,
for all the functions in</source>
          <target state="translated">기준 치수. 특히 py3nvml에서 누락되고 &lt;a href=&quot;https://github.com/NVIDIA/nvidia-settings/blob/master/src/nvml.h&quot;&gt;NVIDIA 소스에&lt;/a&gt; 존재하는 모든 상수를 버전 418.43에서 업데이트했습니다. 또한 이러한 모든 상수를 Enum으로 래핑하여 어떤 상수가 함께 연결되는지 더 쉽게 확인할 수 있습니다. 마지막으로 모든 기능에 대해</target>
        </trans-unit>
        <trans-unit id="0104cbd0e9876f60416d064b5a9418133bd0a6f7" translate="yes" xml:space="preserve">
          <source>nvidia-smi</source>
          <target state="translated">nvidia-smi</target>
        </trans-unit>
        <trans-unit id="0bf0ac838e2fa2261506d4caf6d11b23eb733494" translate="yes" xml:space="preserve">
          <source>nvidia-smi -q -x</source>
          <target state="translated">nvidia-smi -q -x</target>
        </trans-unit>
        <trans-unit id="f94f7ee06d2ff87ad29641d8717dbb9e5f512857" translate="yes" xml:space="preserve">
          <source>output was missing some useful info, so made use of the</source>
          <target state="translated">출력에 유용한 정보가 누락되었으므로</target>
        </trans-unit>
        <trans-unit id="90baa8c11990535925900fd8352fbcb5a49880fc" translate="yes" xml:space="preserve">
          <source>py3nvml.NVML_TEMPERATURE_GPU</source>
          <target state="translated">py3nvml.NVML_TEMPERATURE_GPU</target>
        </trans-unit>
        <trans-unit id="17766ab629b8fa1378bdda7e35f528492e22c899" translate="yes" xml:space="preserve">
          <source>py3nvml.nvidia_smi</source>
          <target state="translated">py3nvml.nvidia_smi</target>
        </trans-unit>
        <trans-unit id="55247edf0607be94a824068a02eb08b5f91121a4" translate="yes" xml:space="preserve">
          <source>py3nvml.nvidia_smi.py</source>
          <target state="translated">py3nvml.nvidia_smi.py</target>
        </trans-unit>
        <trans-unit id="3fda2dd8065434de0a3b195f66f4857fe29aee96" translate="yes" xml:space="preserve">
          <source>py3nvml.py3nvml</source>
          <target state="translated">py3nvml.py3nvml</target>
        </trans-unit>
        <trans-unit id="06362e0d46ddaf9fcf67aaeeab5b12b22136fb21" translate="yes" xml:space="preserve">
          <source>py3nvml/nvidia_smi.py</source>
          <target state="translated">py3nvml / nvidia_smi.py</target>
        </trans-unit>
        <trans-unit id="5349a6cb60b3a4ab7dec4a29e5967ff599559f32" translate="yes" xml:space="preserve">
          <source>py3smi</source>
          <target state="translated">py3smi</target>
        </trans-unit>
        <trans-unit id="8ea102dc84c7a0a65e9a4894f774b5c0f2f38b2a" translate="yes" xml:space="preserve">
          <source>py3smi
-f</source>
          <target state="translated">py3smi -f</target>
        </trans-unit>
        <trans-unit id="96c7d8616bbccc116d7cf0e4ac7cb16e2752fc28" translate="yes" xml:space="preserve">
          <source>scripts/py3smi</source>
          <target state="translated">scripts / py3smi</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
