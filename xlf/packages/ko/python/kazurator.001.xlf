<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/kazurator/">
    <body>
      <group id="kazurator">
        <trans-unit id="97b43cf57a938b03bc2a7474cfc2db2c693b1ed0" translate="yes" xml:space="preserve">
          <source>(default is</source>
          <target state="translated">(기본값은</target>
        </trans-unit>
        <trans-unit id="bc52f59e07b308041a47839463735af34159ffaf" translate="yes" xml:space="preserve">
          <source>), at which point a</source>
          <target state="translated">), 이때 a</target>
        </trans-unit>
        <trans-unit id="0d3af63f25971b9e0cddc6955d09130fd2b8bace" translate="yes" xml:space="preserve">
          <source>1s</source>
          <target state="translated">1 초</target>
        </trans-unit>
        <trans-unit id="e9b1d88a461081c882b13e092d2ea12808b086f5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;kwarg&lt;/em&gt; to a higher number. For example:</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;더 높은 수로 &lt;em&gt;kwarg&lt;/em&gt; . 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="1db0459a722454039a43cf677315793acce1fc91" translate="yes" xml:space="preserve">
          <source>A python port of the &lt;a href=&quot;http://curator.apache.org/curator-recipes/shared-reentrant-read-write-lock.html&quot;&gt;Shared Reentrant Read Write Lock&lt;/a&gt; recipe from &lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;curator&lt;/a&gt;. This package dependends on &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt; for
handling the zookeeper bits.</source>
          <target state="translated">&lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;큐레이터&lt;/a&gt; 의 &lt;a href=&quot;http://curator.apache.org/curator-recipes/shared-reentrant-read-write-lock.html&quot;&gt;공유 재진입 읽기 쓰기 잠금&lt;/a&gt; 레시피 의 파이썬 포트입니다 . 이 패키지 는 사육사 비트를 처리하기 위해 &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt; 에 의존합니다 .</target>
        </trans-unit>
        <trans-unit id="5221385fde95fc2b503d319054e9323a69ffa891" translate="yes" xml:space="preserve">
          <source>Also, if you&amp;rsquo;d rather not use the content management protocol, you can
call</source>
          <target state="translated">또한 콘텐츠 관리 프로토콜을 사용하지 않으려면 다음을 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c7d756afd219442f9c20b36f6e433007c8ddfe4" translate="yes" xml:space="preserve">
          <source>At this point, you&amp;rsquo;re probably wondering why I didn&amp;rsquo;t just use the existing locks recipe from &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt;. The original
goal was to make &lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;curator&lt;/a&gt; and &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt; respect each other&amp;rsquo;s locks such that:</source>
          <target state="translated">이 시점에서 내가 왜 &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt; 의 기존 잠금 레시피를 사용하지 않았는지 궁금 할 것입니다 . 원래 목표는 &lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;큐레이터&lt;/a&gt; 와 &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo가&lt;/a&gt; 서로의 자물쇠를 존중 하도록 만드는 것이 었습니다 .</target>
        </trans-unit>
        <trans-unit id="cd229e246a6d3ee867a0192f0d0cc374a330727b" translate="yes" xml:space="preserve">
          <source>Clone this repo and</source>
          <target state="translated">이 저장소를 복제하고</target>
        </trans-unit>
        <trans-unit id="8eef3eb1036b99b663f3242b7d15644d9edff863" translate="yes" xml:space="preserve">
          <source>Consumers will block until the lock is available, or timeout after the
specified</source>
          <target state="translated">소비자는 잠금을 사용할 수있을 때까지 또는 지정된 시간 이후에 차단됩니다.</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">개발</target>
        </trans-unit>
        <trans-unit id="20bd9db7cdc731f38af4a3cf913c127322514c76" translate="yes" xml:space="preserve">
          <source>Either could acquire a read lock, so long as neither held a write
lock</source>
          <target state="translated">둘 다 쓰기 잠금을 보유하지 않는 한 읽기 잠금을 획득 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2dc29acc7f069c5cfa34f8c0a28a24b6288039a1" translate="yes" xml:space="preserve">
          <source>Either could acquire a write lock, and block either from acquiring
either read/write locks</source>
          <target state="translated">쓰기 잠금을 획득하고 읽기 / 쓰기 잠금을 획득하지 못하도록 차단할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c2692703fbd0ce921552836973c379006240cb8" translate="yes" xml:space="preserve">
          <source>Example of Interop with Curator</source>
          <target state="translated">큐레이터와의 상호 운용 사례</target>
        </trans-unit>
        <trans-unit id="a558352b8558114b6b351402b317ee674519f9af" translate="yes" xml:space="preserve">
          <source>I first attempted to patch the locks recipe in &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt;, but the internals are a bit different. (&lt;strong&gt;READ&lt;/strong&gt;: &lt;em&gt;I wasn&amp;rsquo;t
able to make it work right&lt;/em&gt;).</source>
          <target state="translated">먼저 &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt; 에서 잠금 레시피를 패치하려고 시도 했지만 내부가 약간 다릅니다. ( &lt;strong&gt;읽기&lt;/strong&gt; : &lt;em&gt;제대로 작동하도록 만들 수 없었습니다&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="c81a523f185fa80bc33528d019fc29f8a2fa248c" translate="yes" xml:space="preserve">
          <source>In some cases, you&amp;rsquo;ll need to support an unlimited number of read locks,
but only a single write lock. For example, suppose you were processing
some HDFS paths by altering the format and replacing the data (totally
hypothetical of course :smile:).</source>
          <target state="translated">어떤 경우에는 무제한의 읽기 잠금을 지원해야하지만 단일 쓰기 잠금 만 지원해야합니다. 예를 들어 형식을 변경하고 데이터를 대체하여 일부 HDFS 경로를 처리한다고 가정합니다 (물론 완전히 가설 적입니다 : smile :).</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="f6a746eca25318fd2b27f17fb5eb3db67d653aee" translate="yes" xml:space="preserve">
          <source>Inter Process Mutex</source>
          <target state="translated">프로세스 간 뮤텍스</target>
        </trans-unit>
        <trans-unit id="d272c3b19bf0448bff28f204a895699bbb11e582" translate="yes" xml:space="preserve">
          <source>Inter Process Read Write Lock</source>
          <target state="translated">프로세스 간 읽기 쓰기 잠금</target>
        </trans-unit>
        <trans-unit id="eba05f20566186a3f5928715b9c944cb1a345b12" translate="yes" xml:space="preserve">
          <source>Inter process lock recipes that play nice with curator</source>
          <target state="translated">큐레이터와 잘 어울리는 프로세스 간 잠금 레시피</target>
        </trans-unit>
        <trans-unit id="fcab481b05d6a1db01c2b0869ada3103ff798e52" translate="yes" xml:space="preserve">
          <source>Run tests</source>
          <target state="translated">테스트 실행</target>
        </trans-unit>
        <trans-unit id="7f65857ebdeee3a7b83ccbdd3a2b083962cd0133" translate="yes" xml:space="preserve">
          <source>Running the tests will spawn a docker container to run zookeeper in. It
will be shutdown automatically at the end of the run</source>
          <target state="translated">테스트를 실행하면 zookeeper를 실행할 도커 컨테이너가 생성됩니다. 실행이 끝나면 자동으로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="98f4de881ea486bd6b14a7a887b38ac8b1a90c61" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/pseudomuto/kazurator/tree/master/example/&quot;&gt;example&lt;/a&gt; directory.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pseudomuto/kazurator/tree/master/example/&quot;&gt;예제&lt;/a&gt; 디렉토리를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5dc54bd7df9085373f1481f147d91a5baa0c0a64" translate="yes" xml:space="preserve">
          <source>The reason this is necessary (at least for me), is that some code was running Scala and using &lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;curator&lt;/a&gt;, and other code
was running Python using &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt;.</source>
          <target state="translated">이것이 필요한 이유는 (적어도 나에게는) 일부 코드가 Scala를 실행하고 &lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;큐레이터&lt;/a&gt; 를 사용하고 있었고 다른 코드는 &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo를&lt;/a&gt; 사용하여 Python을 실행 했기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="0c94fe5468df592d13f6f1b932b2dce82a6a492f" translate="yes" xml:space="preserve">
          <source>There are two main use cases for this package. Both of them relate to
creating an inter-process critical region.</source>
          <target state="translated">이 패키지에는 두 가지 주요 사용 사례가 있습니다. 둘 다 프로세스 간 중요 영역을 만드는 것과 관련이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c6d9cdcdca998a2ccbad6e6b6ab95ef53e10216" translate="yes" xml:space="preserve">
          <source>This example assumes you want a single thread to be in the critical
region. In order to support simultaneous multi-threaded access, you can
set the</source>
          <target state="translated">이 예에서는 단일 스레드가 임계 영역에 있어야한다고 가정합니다. 동시 다중 스레드 액세스를 지원하기 위해 다음을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b846d677fd93ce2f8bfbc977f9b50bbf62090abc" translate="yes" xml:space="preserve">
          <source>To start, let&amp;rsquo;s take a look at how we could implement a simple shared
(across process) mutex:</source>
          <target state="translated">시작하려면 간단한 공유 (프로세스 간) 뮤텍스를 구현하는 방법을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="cfa161709373c0965606d71e17a7f4490ac5d614" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;d want any consumers of the data to acquire a read lock. This would
prevent the altering process from acquiring a write lock until the
consumer(s) are finished. Similarly, the consumers wouldn&amp;rsquo;t be able to
acquire read locks until the altering process removes the write lock.</source>
          <target state="translated">데이터 소비자가 읽기 잠금을 획득하기를 원합니다. 이렇게하면 소비자가 완료 될 때까지 변경 프로세스가 쓰기 잠금을 획득하지 못합니다. 마찬가지로 소비자는 변경 프로세스가 쓰기 잠금을 제거 할 때까지 읽기 잠금을 획득 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="657d3c7714fb8d9f2df8c78e78ad719e4d4dbe43" translate="yes" xml:space="preserve">
          <source>acquire</source>
          <target state="translated">얻다</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">과</target>
        </trans-unit>
        <trans-unit id="72a595a1cf5c40c1b816d87b7205413f620301fe" translate="yes" xml:space="preserve">
          <source>directly.</source>
          <target state="translated">직접.</target>
        </trans-unit>
        <trans-unit id="0a0c08c986366bffac791a879e9a390c5e762fc3" translate="yes" xml:space="preserve">
          <source>is raised.</source>
          <target state="translated">제기됩니다.</target>
        </trans-unit>
        <trans-unit id="afcc60b4529d4cb124375f93fea855c6ef20aefb" translate="yes" xml:space="preserve">
          <source>kazoo.LockTimeout</source>
          <target state="translated">kazoo.LockTimeout</target>
        </trans-unit>
        <trans-unit id="6bdc02b22852e0293eff50625dfe834b0a588aed" translate="yes" xml:space="preserve">
          <source>max_leases</source>
          <target state="translated">max_leases</target>
        </trans-unit>
        <trans-unit id="7b1855527317d0124ebeb726defa838d54e9b663" translate="yes" xml:space="preserve">
          <source>pip install -r requirements.txt</source>
          <target state="translated">pip install -r requirements.txt</target>
        </trans-unit>
        <trans-unit id="01f561ac4ab15d6a23a57976bba4dbcc423b9cbb" translate="yes" xml:space="preserve">
          <source>release</source>
          <target state="translated">해제</target>
        </trans-unit>
        <trans-unit id="e8993c260135f06b99572740519d740a1e9d1a8b" translate="yes" xml:space="preserve">
          <source>script/test nosetests</source>
          <target state="translated">스크립트 / 테스트 코 테스트</target>
        </trans-unit>
        <trans-unit id="56d3c9490be2608ac36f5a4805bfec2f21f7f982" translate="yes" xml:space="preserve">
          <source>timeout</source>
          <target state="translated">타임 아웃</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
