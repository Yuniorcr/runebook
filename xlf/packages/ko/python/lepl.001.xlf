<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/lepl/">
    <body>
      <group id="lepl">
        <trans-unit id="8b59407e91b9c85eb8f4e2a0b521af6ddb48b525" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.acooke.org/lepl/lepl5.0.html&quot;&gt;Release 5&lt;/a&gt; has simpler stream
(input) handling.  Memoisation, line-aware lexing and memory use have also
been revised.  These changes make future extension easier, fix several bugs,
and improve performance.</source>
          <target state="translated">&lt;a href=&quot;http://www.acooke.org/lepl/lepl5.0.html&quot;&gt;릴리스 5&lt;/a&gt; 는 스트림 (입력) 처리가 더 간단합니다. 메모 화, 라인 인식 어휘 및 메모리 사용도 수정되었습니다. 이러한 변경 사항은 향후 확장을 더 쉽게 만들고 여러 버그를 수정하며 성능을 향상시킵니다.</target>
        </trans-unit>
        <trans-unit id="dcf165b1bcb3bc7266d233ae8c0600620cd5ffcb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Friendly syntax&lt;/strong&gt; using Python&amp;rsquo;s operators allows grammars
to be defined in a declarative style close to BNF.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;Python의 연산자를 사용하는 &lt;strong&gt;친숙한 구문을&lt;/strong&gt; 사용하면 BNF에 가까운 선언적 스타일로 문법을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f561d5b518b9ae830b160401fe1b343aa7f6858" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parser rewriting&lt;/strong&gt;.  The parser can itself be manipulated by
Python code.  This gives unlimited opportunities for future
expansion and optimisation.</source>
          <target state="translated">&lt;strong&gt;파서 재 작성&lt;/strong&gt; . 파서 자체는 Python 코드로 조작 할 수 있습니다. 이는 향후 확장 및 최적화를위한 무한한 기회를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a2c4bd62c1da5a5c40ec6071f7b022fbb19c9a46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parsers are Python code&lt;/strong&gt;, defined in Python itself.  No separate
grammar is necessary.</source>
          <target state="translated">&lt;strong&gt;파서는 Python&lt;/strong&gt; 자체에 정의 된 &lt;strong&gt;Python 코드&lt;/strong&gt; 입니다. 별도의 문법이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="70866221745a1418bcde933992974989853c3d68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unlimited recursion depth&lt;/strong&gt;.  The underlying algorithm is
recursive descent, which can exhaust the stack for complex grammars
and large data sets.  LEPL avoids this problem by using Python
generators as coroutines (aka &amp;ldquo;trampolining&amp;rdquo;).</source>
          <target state="translated">&lt;strong&gt;무제한 재귀 깊이&lt;/strong&gt; . 기본 알고리즘은 재귀 하강으로 복잡한 문법과 대규모 데이터 세트를 위해 스택을 소모 할 수 있습니다. LEPL은 파이썬 제너레이터를 코 루틴 ( &quot;trampolining&quot;이라고도 함)으로 사용하여이 문제를 방지합니다.</target>
        </trans-unit>
        <trans-unit id="a80415d1bd11d5892d74470e04084671a57b27f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Well documented&lt;/strong&gt; and easy to extend.</source>
          <target state="translated">&lt;strong&gt;잘 문서화&lt;/strong&gt; 되고 확장하기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="be91da727724f10f3030b406d10219e18f542889" translate="yes" xml:space="preserve">
          <source>A Parser Library for Python 2.6+/3+: Recursive Descent; Full Backtracking</source>
          <target state="translated">Python 2.6 + / 3 + 용 파서 라이브러리 : 재귀 하강; 전체 역 추적</target>
        </trans-unit>
        <trans-unit id="998c9a2df4c33a3d27fc2c07fd63e7d7f0d6824e" translate="yes" xml:space="preserve">
          <source>Built-in &lt;strong&gt;AST support&lt;/strong&gt; with support for iteration, traversal and
re&amp;ndash;writing.</source>
          <target state="translated">반복, 순회 및 재 작성을 &lt;strong&gt;지원&lt;/strong&gt; 하는 내장 &lt;strong&gt;AST 지원&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">풍모</target>
        </trans-unit>
        <trans-unit id="237fff0d6c895b48b76fc1ec355575e22b0a8e79" translate="yes" xml:space="preserve">
          <source>For example, it is not limited by the Python stack, because it uses
trampolining and co-routines.  Multiple parses can be found for ambiguous
grammars and it can also handle left-recursive grammars.</source>
          <target state="translated">예를 들어, 그것은 trampolining과 co-routine을 사용하기 때문에 Python 스택에 의해 제한되지 않습니다. 모호한 문법에 대해 여러 구문 분석을 찾을 수 있으며 왼쪽 재귀 문법도 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="d13272dbf605470d5987c679f283ee03b00763be" translate="yes" xml:space="preserve">
          <source>Generic, pure-Python approach supports parsing a wide variety of data
including &lt;strong&gt;bytes&lt;/strong&gt; (Python 3+ only).</source>
          <target state="translated">일반적인 순수 Python 접근 방식은 &lt;strong&gt;바이트를&lt;/strong&gt; 포함한 다양한 데이터의 구문 분석을 지원 &lt;strong&gt;합니다&lt;/strong&gt; (Python 3 이상 만 해당).</target>
        </trans-unit>
        <trans-unit id="459d802d603b95d370570c642b66ae187be7049a" translate="yes" xml:space="preserve">
          <source>Integrated, optional &lt;strong&gt;lexer&lt;/strong&gt; simplifies handling whitespace.</source>
          <target state="translated">통합 된 선택적 &lt;strong&gt;렉서&lt;/strong&gt; 는 공백 처리를 단순화합니다.</target>
        </trans-unit>
        <trans-unit id="87c5743b91bd75d449b16a0775316c59cb902e5f" translate="yes" xml:space="preserve">
          <source>LEPL is a recursive descent parser, written in Python, which has a a friendly,
easy-to-use syntax.  The underlying implementation includes
several features that make it more powerful than might be expected.</source>
          <target state="translated">LEPL은 친숙하고 사용하기 쉬운 구문을 가진 Python으로 작성된 재귀 하강 파서입니다. 기본 구현에는 예상보다 더 강력하게 만드는 여러 기능이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2dbf7f56a1596a6bcdb2143e0781af0c1e8d4ab" translate="yes" xml:space="preserve">
          <source>Memoisation can detect and control &lt;strong&gt;left-recursive grammars&lt;/strong&gt;.  Together
with LEPL&amp;rsquo;s support for ambiguity this means that &amp;ldquo;any&amp;rdquo; grammar can be
supported.</source>
          <target state="translated">메모 화는 &lt;strong&gt;왼쪽 재귀 문법을&lt;/strong&gt; 감지하고 제어 할 수 있습니다 . LEPL의 모호성 지원과 함께 이것은 &quot;모든&quot;문법이 지원 될 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="281b5d7ac1d5c25a7d09c76eb3499a76a5c7ab37" translate="yes" xml:space="preserve">
          <source>Parsers can be made more &lt;strong&gt;efficient&lt;/strong&gt; with automatic memoisation (&amp;ldquo;packrat
parsing&amp;rdquo;).</source>
          <target state="translated">자동 메모 화 ( &quot;packrat parsing&quot;)로 구문 분석기를보다 &lt;strong&gt;효율적&lt;/strong&gt; 으로 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="53327c1a25884cb1a1ab37d7f8fb1c782c7e6790" translate="yes" xml:space="preserve">
          <source>Support for ambiguous grammars (&lt;strong&gt;complete backtracking&lt;/strong&gt;).  A
parser can return more than one result (aka &lt;strong&gt;&amp;ldquo;parse forests&amp;rdquo;&lt;/strong&gt;).</source>
          <target state="translated">모호한 문법 지원 ( &lt;strong&gt;전체 역 추적&lt;/strong&gt; ) 파서는 둘 이상의 결과를 반환 할 수 있습니다 (일명 &lt;strong&gt;&quot;포레스트 구문 분석&quot;&lt;/strong&gt; ).</target>
        </trans-unit>
        <trans-unit id="b2ec67336431bf0605e40b3af09d6159014d9539" translate="yes" xml:space="preserve">
          <source>THIS PROJECT IS NO LONGER DEVELOPED.  PLEASE SEE THE
&lt;a href=&quot;http://www.acooke.org/lepl&quot;&gt;SITE&lt;/a&gt; FOR MORE INFORMATION.</source>
          <target state="translated">이 프로젝트는 더 이상 개발되지 않았습니다. 자세한 정보는 &lt;a href=&quot;http://www.acooke.org/lepl&quot;&gt;사이트를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="297d78ea5281169c97f03d729e46f1b5909094b5" translate="yes" xml:space="preserve">
          <source>The aim is a powerful, extensible parser that will also give solid, reliable
results to first-time users.</source>
          <target state="translated">목표는 처음 사용하는 사용자에게 견고하고 신뢰할 수있는 결과를 제공하는 강력하고 확장 가능한 파서입니다.</target>
        </trans-unit>
        <trans-unit id="053e63df8ec1d4bc209f44100344c3bced429ec2" translate="yes" xml:space="preserve">
          <source>Trace and resource management, including &lt;strong&gt;&amp;ldquo;deepest match&amp;rdquo; diagnostics&lt;/strong&gt;
and the ability to limit backtracking.</source>
          <target state="translated">&lt;strong&gt;&quot;최종 일치&quot;진단&lt;/strong&gt; 및 역 추적 제한 기능을 포함한 추적 및 리소스 관리 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
