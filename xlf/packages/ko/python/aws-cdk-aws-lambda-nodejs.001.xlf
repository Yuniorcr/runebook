<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/aws-cdk-aws-lambda-nodejs/">
    <body>
      <group id="aws-cdk-aws-lambda-nodejs">
        <trans-unit id="58b63e273b964039d6ef432a415df3f177c818e5" translate="yes" xml:space="preserve">
          <source>---</source>
          <target state="translated">---</target>
        </trans-unit>
        <trans-unit id="5795655f7099122749abab518defa40e8f577550" translate="yes" xml:space="preserve">
          <source>All other properties of &lt;code&gt;lambda.Function&lt;/code&gt; are supported, see also the &lt;a href=&quot;https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-lambda&quot;&gt;AWS Lambda construct library&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;lambda.Function&lt;/code&gt; 의 다른 모든 속성 이 지원됩니다 . &lt;a href=&quot;https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-lambda&quot;&gt;AWS Lambda 구성 라이브러리를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9276dcebe68a8a88eb119fcf4b29ee42dbb75afc" translate="yes" xml:space="preserve">
          <source>Alternatively, an entry file and handler can be specified:</source>
          <target state="translated">또는 항목 파일 및 핸들러를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe411f3505b8a51d0edd0cfeae8bbddc8954aeef" translate="yes" xml:space="preserve">
          <source>Amazon Lambda Node.js Library</source>
          <target state="translated">Amazon Lambda Node.js 라이브러리</target>
        </trans-unit>
        <trans-unit id="24dcdfe14d89a9025c5f1251a50a23a33d095702" translate="yes" xml:space="preserve">
          <source>By default, all node modules are bundled except for &lt;code&gt;aws-sdk&lt;/code&gt;. This can be configured by specifying
the &lt;code&gt;externalModules&lt;/code&gt; prop.</source>
          <target state="translated">기본적으로 &lt;code&gt;aws-sdk&lt;/code&gt; 를 제외한 모든 노드 모듈은 번들로 제공됩니다 . &lt;code&gt;externalModules&lt;/code&gt; prop 을 지정하여 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2c64c152d95e133825bc36ebdd93dcd5bd9d7260" translate="yes" xml:space="preserve">
          <source>By default, all node modules referenced in your Lambda code will be bundled by Parcel.
Use the &lt;code&gt;nodeModules&lt;/code&gt; prop to specify a list of modules that should not be bundled
but instead included in the &lt;code&gt;node_modules&lt;/code&gt; folder of the Lambda package. This is useful
when working with native dependencies or when Parcel fails to bundle a module.</source>
          <target state="translated">기본적으로 Lambda 코드에서 참조되는 모든 노드 모듈은 Parcel에서 번들로 제공됩니다. 사용 &lt;code&gt;nodeModules&lt;/code&gt; 가 번들로 제공하지만, 대신에 포함되어서는 안 모듈의 목록 지정 소품 &lt;code&gt;node_modules&lt;/code&gt; 는 람다 패키지의 폴더를. 이는 기본 종속성으로 작업하거나 Parcel이 모듈을 번들링하지 못할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="16be50ff4682c025e368afca8af7638ef4a4387d" translate="yes" xml:space="preserve">
          <source>By default, the construct will use the name of the defining file and the construct's id to look
up the entry file:</source>
          <target state="translated">기본적으로 구성은 정의 파일의 이름과 구성의 ID를 사용하여 항목 파일을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="bf1ce9d0ae9f2be9d1ced2d965ea8c704ae8c699" translate="yes" xml:space="preserve">
          <source>CDK Constructs for AWS Lambda in Node.js</source>
          <target state="translated">Node.js의 AWS Lambda 용 CDK 구성</target>
        </trans-unit>
        <trans-unit id="3675011cec878c3740e77f768578f298e39a2567" translate="yes" xml:space="preserve">
          <source>Configuring Babel with Parcel is possible via a &lt;code&gt;.babelrc&lt;/code&gt; or a &lt;code&gt;babel&lt;/code&gt; config in &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.babelrc&lt;/code&gt; 또는 &lt;code&gt;package.json&lt;/code&gt; 의 &lt;code&gt;babel&lt;/code&gt; 구성을 통해 Parcel로 Babel을 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8cb175f39c41dfa100b9298d0997644a86e80d58" translate="yes" xml:space="preserve">
          <source>Configuring Parcel</source>
          <target state="translated">구획 구성</target>
        </trans-unit>
        <trans-unit id="a53a6d0015c9fb70a39b58589ef90c8790ad40cc" translate="yes" xml:space="preserve">
          <source>Define a &lt;code&gt;NodejsFunction&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;NodejsFunction&lt;/code&gt; 정의 :</target>
        </trans-unit>
        <trans-unit id="548bcef531f24042c1657c9c7bd347a1802c9d7a" translate="yes" xml:space="preserve">
          <source>Externals</source>
          <target state="translated">외관</target>
        </trans-unit>
        <trans-unit id="7529436495f41b82b037ccc5c12868c690fa34aa" translate="yes" xml:space="preserve">
          <source>For macOS the recommendend approach is to install Parcel as Docker volume performance is really poor.</source>
          <target state="translated">macOS의 경우 권장되는 접근 방식은 Docker 볼륨 성능이 정말 좋지 않으므로 Parcel을 설치하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="76c66b321778edb94d8b3338a340a8561aeac7c2" translate="yes" xml:space="preserve">
          <source>If Parcel v2 is available it will be used to bundle your code in your environment. Otherwise,
bundling will happen in a &lt;a href=&quot;https://hub.docker.com/r/amazon/aws-sam-cli-build-image-nodejs12.x&quot;&gt;Lambda compatible Docker container&lt;/a&gt;.</source>
          <target state="translated">Parcel v2를 사용할 수있는 경우 사용자 환경에서 코드를 번들링하는 데 사용됩니다. 그렇지 않으면 &lt;a href=&quot;https://hub.docker.com/r/amazon/aws-sam-cli-build-image-nodejs12.x&quot;&gt;Lambda 호환 Docker 컨테이너&lt;/a&gt; 에서 번들링이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="b5bd306138d7db02dd179a58e4120116e262529c" translate="yes" xml:space="preserve">
          <source>Install modules</source>
          <target state="translated">모듈 설치</target>
        </trans-unit>
        <trans-unit id="a93a8fad5e2475a93a5b27709ab8b83ee5850cf5" translate="yes" xml:space="preserve">
          <source>Local bundling</source>
          <target state="translated">로컬 번들링</target>
        </trans-unit>
        <trans-unit id="2b8afe313b4f360463019224d5515d7614fc64ce" translate="yes" xml:space="preserve">
          <source>Node.js Function</source>
          <target state="translated">Node.js 함수</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">또는</target>
        </trans-unit>
        <trans-unit id="9a0012f840b496b36e9af0df9accd8112622aa8e" translate="yes" xml:space="preserve">
          <source>Parcel transpiles your code (every internal module) with &lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot;&gt;@babel/preset-env&lt;/a&gt; and uses the
runtime version of your Lambda function as target.</source>
          <target state="translated">Parcel은 &lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot;&gt;@ babel / preset-env&lt;/a&gt; 를 사용 하여 코드 (모든 내부 모듈)를 트랜스 파일 하고 Lambda 함수의 런타임 버전을 대상으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6075431affacbe07ce9149b8f60d62d9fc494fb0" translate="yes" xml:space="preserve">
          <source>Parcel v2 can be installed with:</source>
          <target state="translated">Parcel v2는 다음과 함께 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="32929d4172783d036384d81f3979c9b3eb8af2b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodejsFunction&lt;/code&gt; construct automatically &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html&quot;&gt;reuses existing connections&lt;/a&gt;
when working with the AWS SDK for JavaScript. Set the &lt;code&gt;awsSdkConnectionReuse&lt;/code&gt; prop to &lt;code&gt;false&lt;/code&gt; to disable it.</source>
          <target state="translated">&lt;code&gt;NodejsFunction&lt;/code&gt; 의 구조가 자동으로 &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html&quot;&gt;기존 연결을 재사용&lt;/a&gt; 자바 스크립트에 대한 AWS SDK로 작업 할 때. 설정 &lt;code&gt;awsSdkConnectionReuse&lt;/code&gt; 의 에 소품을 &lt;code&gt;false&lt;/code&gt; 으로 비활성화.</target>
        </trans-unit>
        <trans-unit id="2384a3d1b2191d72845aeaec8eda0416912060d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodejsFunction&lt;/code&gt; construct exposes some &lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel&lt;/a&gt; options via properties: &lt;code&gt;minify&lt;/code&gt;, &lt;code&gt;sourceMaps&lt;/code&gt; and &lt;code&gt;cacheDir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NodejsFunction&lt;/code&gt; 의 구조가 일부 노출 &lt;a href=&quot;https://parceljs.org/&quot;&gt;소포&lt;/a&gt; : 속성을 통해 옵션 &lt;code&gt;minify&lt;/code&gt; , &lt;code&gt;sourceMaps&lt;/code&gt; 및 &lt;code&gt;cacheDir&lt;/code&gt; 가를 .</target>
        </trans-unit>
        <trans-unit id="3dbcc18ab4e657e549e75fa1c70952b084642819" translate="yes" xml:space="preserve">
          <source>The APIs of higher level constructs in this module are experimental and under active development. They are subject to non-backward compatible changes or removal in any future version. These are not subject to the &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt; model and breaking changes will be announced in the release notes. This means that while you may use them, you may need to update your source code when upgrading to a newer version of this package.</source>
          <target state="translated">이 모듈의 상위 수준 구조의 API는 실험적이며 활발하게 개발 중입니다. 이후 버전에서는 이전 버전과 호환되지 않는 변경 또는 제거가 적용됩니다. 이는 &lt;a href=&quot;https://semver.org/&quot;&gt;시맨틱 버전 관리&lt;/a&gt; 모델의 적용을받지 않으며 주요 변경 사항은 릴리스 노트에서 발표됩니다. 즉,이 패키지를 사용할 수 있지만이 패키지의 최신 버전으로 업그레이드 할 때 소스 코드를 업데이트해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c7b606236a07ec9fdfb8c85e13cade1fe722e93" translate="yes" xml:space="preserve">
          <source>The modules listed in &lt;code&gt;nodeModules&lt;/code&gt; must be present in the &lt;code&gt;package.json&lt;/code&gt;'s dependencies. The
same version will be used for installation. If a lock file is detected (&lt;code&gt;package-lock.json&lt;/code&gt; or
&lt;code&gt;yarn.lock&lt;/code&gt;) it will be used along with the right installer (&lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;nodeModules&lt;/code&gt; 에 나열된 모듈 은 &lt;code&gt;package.json&lt;/code&gt; 의 종속성 에 있어야합니다 . 동일한 버전이 설치에 사용됩니다. 잠금 파일이 감지되면 ( &lt;code&gt;package-lock.json&lt;/code&gt; 또는 &lt;code&gt;yarn.lock&lt;/code&gt; ) 올바른 설치 프로그램 ( &lt;code&gt;npm&lt;/code&gt; 또는 &lt;code&gt;yarn&lt;/code&gt; ) 과 함께 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="d1cfee13775a080a95a55f2e8d7f2f0ec9f8991c" translate="yes" xml:space="preserve">
          <source>This file is used as &quot;entry&quot; for &lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel&lt;/a&gt;. This means that your code is
automatically transpiled and bundled whether it's written in JavaScript or TypeScript.</source>
          <target state="translated">이 파일은 &lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel의&lt;/a&gt; &quot;항목&quot;으로 사용됩니다 . 즉, JavaScript 또는 TypeScript로 작성되었는지 여부에 관계없이 코드가 자동으로 트랜스 파일되고 번들로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="3478f408f645be3df5912e1f38688ce394448d20" translate="yes" xml:space="preserve">
          <source>This library provides constructs for Node.js Lambda functions.</source>
          <target state="translated">이 라이브러리는 Node.js Lambda 함수에 대한 구성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f96123128e1a1023019977f9f0fb79219187a257" translate="yes" xml:space="preserve">
          <source>To force bundling in a Docker container, set the &lt;code&gt;forceDockerBundling&lt;/code&gt; prop to &lt;code&gt;true&lt;/code&gt;. This
is useful if your function relies on node modules that should be installed (&lt;code&gt;nodeModules&lt;/code&gt; prop, see &lt;a href=&quot;#install-modules&quot;&gt;above&lt;/a&gt;) in a Lambda compatible environment. This is usually the
case with modules using native dependencies.</source>
          <target state="translated">Docker 컨테이너에서 번들링을 강제하려면 &lt;code&gt;forceDockerBundling&lt;/code&gt; prop을 &lt;code&gt;true&lt;/code&gt; 로 설정하십시오 . 함수 가 Lambda 호환 환경에 설치되어야하는 노드 모듈 ( &lt;code&gt;nodeModules&lt;/code&gt; prop, &lt;a href=&quot;#install-modules&quot;&gt;위&lt;/a&gt; 참조 )에 의존하는 경우 유용 합니다. 이것은 일반적으로 네이티브 종속성을 사용하는 모듈의 경우입니다.</target>
        </trans-unit>
        <trans-unit id="cba9ffdd1f430eaff38909df65fd3f73edb05620" translate="yes" xml:space="preserve">
          <source>To use this module, you will need to have Docker installed.</source>
          <target state="translated">이 모듈을 사용하려면 Docker가 설치되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="fcee0bf341086e2cd8b948161e27973343c45662" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;buildArgs&lt;/code&gt; prop to pass build arguments when building the bundling image:</source>
          <target state="translated">번들링 이미지를 빌드 할 때 &lt;code&gt;buildArgs&lt;/code&gt; 소품을 사용하여 빌드 인수를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="d0d1b18f10106351ffc86685b850ccc783891846" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;containerEnvironment&lt;/code&gt; prop to pass environments variables to the Docker container
running Parcel:</source>
          <target state="translated">&lt;code&gt;containerEnvironment&lt;/code&gt; prop을 사용하여 Parcel을 실행하는 Docker 컨테이너에 환경 변수를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="521bac9f90defc7164b2074837c8624e98766b62" translate="yes" xml:space="preserve">
          <source>Working with modules</source>
          <target state="translated">모듈 작업</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
