<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/d3dshot/">
    <body>
      <group id="d3dshot">
        <trans-unit id="17e3a0177df78bce9cc37dbd78e1bc32105896e7" translate="yes" xml:space="preserve">
          <source>1080x1920 (vertical) on &lt;em&gt;Intel UHD Graphics 630&lt;/em&gt;</source>
          <target state="translated">1080x1920 (vertical) on &lt;em&gt;Intel UHD Graphics 630&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f7b0452485889e885746e27035e25fe44664c45" translate="yes" xml:space="preserve">
          <source>18.767 FPS</source>
          <target state="translated">18.767 FPS</target>
        </trans-unit>
        <trans-unit id="d9aaf7702fd15745bbdf6cb09feb29c976dc33b8" translate="yes" xml:space="preserve">
          <source>18.783 FPS</source>
          <target state="translated">18.783 FPS</target>
        </trans-unit>
        <trans-unit id="aea4f3ae59562028d2beea8ea63cb25122b674a2" translate="yes" xml:space="preserve">
          <source>1920x1080 on &lt;em&gt;Intel UHD Graphics 630&lt;/em&gt;</source>
          <target state="translated">1920x1080 on &lt;em&gt;Intel UHD Graphics 630&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0ea4a6b2ffa53488640ddb36fca5296d25c20db9" translate="yes" xml:space="preserve">
          <source>2560x1440 on &lt;em&gt;NVIDIA GTX 1080 Ti&lt;/em&gt;</source>
          <target state="translated">2560x1440 on &lt;em&gt;NVIDIA GTX 1080 Ti&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="817dd955f54193ef322672707021c9c06d748e2b" translate="yes" xml:space="preserve">
          <source>27.017 FPS</source>
          <target state="translated">27.017 FPS</target>
        </trans-unit>
        <trans-unit id="b18a5e5bbf7bdc203abde65217ad8eaf00d1449a" translate="yes" xml:space="preserve">
          <source>27.267 FPS</source>
          <target state="translated">27.267 FPS</target>
        </trans-unit>
        <trans-unit id="500a73719af0d8ddeb665b18218839cf88452b6f" translate="yes" xml:space="preserve">
          <source>27.333 FPS</source>
          <target state="translated">27.333 FPS</target>
        </trans-unit>
        <trans-unit id="a9de09f68617d89b210a4a02fa682f4022c5c7c9" translate="yes" xml:space="preserve">
          <source>27.517 FPS</source>
          <target state="translated">27.517 FPS</target>
        </trans-unit>
        <trans-unit id="e7e904b9100767597c71154f56e832833a5a1aef" translate="yes" xml:space="preserve">
          <source>28.367 FPS</source>
          <target state="translated">28.367 FPS</target>
        </trans-unit>
        <trans-unit id="dad21eb5e1ff1bafa96263ce57dd292b98b18735" translate="yes" xml:space="preserve">
          <source>29.05 FPS</source>
          <target state="translated">29.05 FPS</target>
        </trans-unit>
        <trans-unit id="a4ab489c3cd7594e4575dd7d0a598cde5805d854" translate="yes" xml:space="preserve">
          <source>29.717 FPS</source>
          <target state="translated">29.717 FPS</target>
        </trans-unit>
        <trans-unit id="03df0f1f6d59bfdfae6c9b6e0818f20f73b6f66b" translate="yes" xml:space="preserve">
          <source>34.8 FPS</source>
          <target state="translated">34.8 FPS</target>
        </trans-unit>
        <trans-unit id="9963afdc77e56558b6303184e94b50eeea927c54" translate="yes" xml:space="preserve">
          <source>34.817 FPS</source>
          <target state="translated">34.817 FPS</target>
        </trans-unit>
        <trans-unit id="eb3b15142a4377c85e489b75def1182930a94bdf" translate="yes" xml:space="preserve">
          <source>35.033 FPS</source>
          <target state="translated">35.033 FPS</target>
        </trans-unit>
        <trans-unit id="f6c8f66b676939192e6a541d49a00b30b38594bb" translate="yes" xml:space="preserve">
          <source>35.767 FPS</source>
          <target state="translated">35.767 FPS</target>
        </trans-unit>
        <trans-unit id="479a602fdb842070c59af64bd30aeb3bdaf39e99" translate="yes" xml:space="preserve">
          <source>35.95 FPS</source>
          <target state="translated">35.95 FPS</target>
        </trans-unit>
        <trans-unit id="8f23984208b76d762d7b9aeac7bce07d85f98c2e" translate="yes" xml:space="preserve">
          <source>37.383 FPS</source>
          <target state="translated">37.383 FPS</target>
        </trans-unit>
        <trans-unit id="982f27146bda9189d5e39dffcfd8621279729d6a" translate="yes" xml:space="preserve">
          <source>47.75 FPS</source>
          <target state="translated">47.75 FPS</target>
        </trans-unit>
        <trans-unit id="0ebacdd45c406ec9a8eb19c0f9b98853b9242a20" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/enthought/comtypes&quot;&gt;&lt;em&gt;comtypes&lt;/em&gt;&lt;/a&gt;: Internal use. To preserve developer sanity while working with COM interfaces.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/enthought/comtypes&quot;&gt;&lt;em&gt;comtypes&lt;/em&gt;&lt;/a&gt;: Internal use. To preserve developer sanity while working with COM interfaces.</target>
        </trans-unit>
        <trans-unit id="02c79350d3333b0688173420e6ddd3aa9537e2bf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/python-pillow/Pillow&quot;&gt;&lt;em&gt;Pillow&lt;/em&gt;&lt;/a&gt;: Default Capture Output. Also used to save to disk as PNG and JPG.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/python-pillow/Pillow&quot;&gt;&lt;em&gt;Pillow&lt;/em&gt;&lt;/a&gt;: Default Capture Output. Also used to save to disk as PNG and JPG.</target>
        </trans-unit>
        <trans-unit id="37000fa88ce9ff91b40aa7266f2d06f635d5e499" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://twitter.com/Serpent_AI&quot;&gt;Twitter&lt;/a&gt; - &lt;a href=&quot;https://www.twitch.tv/serpent_ai&quot;&gt;Twitch&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://twitter.com/Serpent_AI&quot;&gt;Twitter&lt;/a&gt; - &lt;a href=&quot;https://www.twitch.tv/serpent_ai&quot;&gt;Twitch&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5ccc7c7490c226c4ef09419c9d6f9ccb193755c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;capture&lt;/code&gt; accepts 2 optional kwargs:</source>
          <target state="translated">&lt;code&gt;capture&lt;/code&gt; accepts 2 optional kwargs:</target>
        </trans-unit>
        <trans-unit id="7d0d50778cdc5ac3989393cc9db29f12e96f9eef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;capture_output&lt;/code&gt;: Which capture output to use. See the &lt;em&gt;Capture Outputs&lt;/em&gt; section under &lt;em&gt;Concepts&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;capture_output&lt;/code&gt; : Which capture output to use. See the &lt;em&gt;Capture Outputs&lt;/em&gt; section under &lt;em&gt;Concepts&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="adb8fcde3f0774b82519fc07d26ee5fc83f51bb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&lt;/code&gt; accepts 2 optional kwargs:</source>
          <target state="translated">&lt;code&gt;create&lt;/code&gt; accepts 2 optional kwargs:</target>
        </trans-unit>
        <trans-unit id="1cb8db98800e9f4190bbd42c439a5ac6245edcb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;: The path / directory where to write the file. If omitted, the working directory of the program will be used</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; : The path / directory where to write the file. If omitted, the working directory of the program will be used</target>
        </trans-unit>
        <trans-unit id="9df84ff84573f8c17ebb4a4b65a69ce40bd46499" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;: The path / directory where to write the files. If omitted, the working directory of the program will be used</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; : The path / directory where to write the files. If omitted, the working directory of the program will be used</target>
        </trans-unit>
        <trans-unit id="5fd5286fe9ba08aecac78415ce3a3e310bb7ebca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file_name&lt;/code&gt;: The file name to use. Permitted extensions are: &lt;em&gt;.png&lt;/em&gt;, &lt;em&gt;.jpg&lt;/em&gt;. If omitted, the file name will be &lt;code&gt;&amp;lt;time.time()&amp;gt;.png&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;file_name&lt;/code&gt; : The file name to use. Permitted extensions are: &lt;em&gt;.png&lt;/em&gt;, &lt;em&gt;.jpg&lt;/em&gt;. If omitted, the file name will be &lt;code&gt;&amp;lt;time.time()&amp;gt;.png&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e3c849a3e4b0bc6ec334939cd841cbdd6289d6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;frame_buffer_size&lt;/code&gt;: The maximum size the frame buffer can grow to. See the &lt;em&gt;Frame Buffer&lt;/em&gt; section under &lt;em&gt;Concepts&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;frame_buffer_size&lt;/code&gt; : The maximum size the frame buffer can grow to. See the &lt;em&gt;Frame Buffer&lt;/em&gt; section under &lt;em&gt;Concepts&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1cfd930b05b16a70ed537926d2c16a11ce150cec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;frame_buffer_to_disk&lt;/code&gt; accepts 1 optional kwarg:</source>
          <target state="translated">&lt;code&gt;frame_buffer_to_disk&lt;/code&gt; accepts 1 optional kwarg:</target>
        </trans-unit>
        <trans-unit id="466dcc2ba20f2e01c6ae9736bc1817d3bfee0363" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_frame_stack&lt;/code&gt; accepts 1 optional kwarg:</source>
          <target state="translated">&lt;code&gt;get_frame_stack&lt;/code&gt; accepts 1 optional kwarg:</target>
        </trans-unit>
        <trans-unit id="d93e721361783827c926a5283735c3c1a78ce3d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;region&lt;/code&gt;: A region tuple. See the &lt;em&gt;Regions&lt;/em&gt; section under &lt;em&gt;Concepts&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;region&lt;/code&gt; : A region tuple. See the &lt;em&gt;Regions&lt;/em&gt; section under &lt;em&gt;Concepts&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d5b67e5452134e62bebccf835132eb42f926534b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;screenshot&lt;/code&gt; accepts 1 optional kwarg:</source>
          <target state="translated">&lt;code&gt;screenshot&lt;/code&gt; accepts 1 optional kwarg:</target>
        </trans-unit>
        <trans-unit id="997b86dd413beadb61d224c75ccdab40a9462073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;screenshot_every&lt;/code&gt; accepts 1 optional kwarg:</source>
          <target state="translated">&lt;code&gt;screenshot_every&lt;/code&gt; accepts 1 optional kwarg:</target>
        </trans-unit>
        <trans-unit id="6f13f4fae1e535b7a02360186ef8d3975c78e048" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;screenshot_to_disk&lt;/code&gt; accepts 3 optional kwargs:</source>
          <target state="translated">&lt;code&gt;screenshot_to_disk&lt;/code&gt; accepts 3 optional kwargs:</target>
        </trans-unit>
        <trans-unit id="f0f1f4aa019f8d08303d8d42a4ce0f579def0af8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;screenshot_to_disk_every&lt;/code&gt; accepts 2 optional kwargs:</source>
          <target state="translated">&lt;code&gt;screenshot_to_disk_every&lt;/code&gt; accepts 2 optional kwargs:</target>
        </trans-unit>
        <trans-unit id="b235c323a6e92a0e7ddaa0348cc6cca07316daed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stack_dimension&lt;/code&gt;: One of &lt;em&gt;first&lt;/em&gt;, &lt;em&gt;last&lt;/em&gt;. Which axis / dimension to perform the stack on</source>
          <target state="translated">&lt;code&gt;stack_dimension&lt;/code&gt; : One of &lt;em&gt;first&lt;/em&gt;, &lt;em&gt;last&lt;/em&gt;. Which axis / dimension to perform the stack on</target>
        </trans-unit>
        <trans-unit id="401229407a5308c32afa020a2638895f285ce103" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target_fps&lt;/code&gt;: How many captures per second to aim for. The effective capture rate will go under if the system can't keep up but it will never go over this target. It is recommended to set this to a reasonable value for your use case in order not to waste system resources. Default is set to 60.</source>
          <target state="translated">&lt;code&gt;target_fps&lt;/code&gt; : How many captures per second to aim for. The effective capture rate will go under if the system can't keep up but it will never go over this target. It is recommended to set this to a reasonable value for your use case in order not to waste system resources. Default is set to 60.</target>
        </trans-unit>
        <trans-unit id="206961b6db2b3c5ca5694dcac936468fe61ece5e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Crafted with ❤ by Serpent.AI 🐍&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Crafted with ❤ by Serpent.AI 🐍&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="94d528850ef30b7d052f6781233e537399de06fb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;D3DShot&lt;/em&gt; is a pure Python implementation of the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/direct3ddxgi/desktop-dup-api&quot;&gt;Windows Desktop Duplication API&lt;/a&gt;. It leverages DXGI and Direct3D system libraries to enable extremely fast and robust screen capture functionality for your Python scripts and applications on Windows.</source>
          <target state="translated">&lt;em&gt;D3DShot&lt;/em&gt; is a pure Python implementation of the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/direct3ddxgi/desktop-dup-api&quot;&gt;Windows Desktop Duplication API&lt;/a&gt;. It leverages DXGI and Direct3D system libraries to enable extremely fast and robust screen capture functionality for your Python scripts and applications on Windows.</target>
        </trans-unit>
        <trans-unit id="01072bca86f03b0166823461e8d009f75269f9f5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;D3DShot&lt;/em&gt; is however quite flexible! As your environment meets certain optional sets of requirements, more options become available.</source>
          <target state="translated">&lt;em&gt;D3DShot&lt;/em&gt; is however quite flexible! As your environment meets certain optional sets of requirements, more options become available.</target>
        </trans-unit>
        <trans-unit id="51e52b6b0663632afca5449e6c0acf30507927f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;D3DShot&lt;/em&gt; leverages DLLs that are already available on your system so the dependencies are very light. Namely:</source>
          <target state="translated">&lt;em&gt;D3DShot&lt;/em&gt; leverages DLLs that are already available on your system so the dependencies are very light. Namely:</target>
        </trans-unit>
        <trans-unit id="fa1a04a4e502a286c7c21aa1a53c55e25d6f42e1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Returns&lt;/em&gt;: A boolean indicating whether or not the capture thread was started</source>
          <target state="translated">&lt;em&gt;Returns&lt;/em&gt;: A boolean indicating whether or not the capture thread was started</target>
        </trans-unit>
        <trans-unit id="c87a1f57fd29fd89e1b6bffadf3460fac8e9d045" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Returns&lt;/em&gt;: A frame with a format that matches the capture output you selected when creating your &lt;em&gt;D3DShot&lt;/em&gt; object</source>
          <target state="translated">&lt;em&gt;Returns&lt;/em&gt;: A frame with a format that matches the capture output you selected when creating your &lt;em&gt;D3DShot&lt;/em&gt; object</target>
        </trans-unit>
        <trans-unit id="32d4e4af224f4fed8e5eec4b50e35b44b14854cc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Returns&lt;/em&gt;: A list of frames with a format that matches the capture output you selected when creating your &lt;em&gt;D3DShot&lt;/em&gt; object</source>
          <target state="translated">&lt;em&gt;Returns&lt;/em&gt;: A list of frames with a format that matches the capture output you selected when creating your &lt;em&gt;D3DShot&lt;/em&gt; object</target>
        </trans-unit>
        <trans-unit id="db00616fe5b202efda0d4495572a9435e711e1a4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Returns&lt;/em&gt;: A screenshot with a format that matches the capture output you selected when creating your &lt;em&gt;D3DShot&lt;/em&gt; object</source>
          <target state="translated">&lt;em&gt;Returns&lt;/em&gt;: A screenshot with a format that matches the capture output you selected when creating your &lt;em&gt;D3DShot&lt;/em&gt; object</target>
        </trans-unit>
        <trans-unit id="a482197b655ec984ca8559ba69a4124b62d56518" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Returns&lt;/em&gt;: A single array stacked on the specified dimension with a format that matches the capture output you selected when creating your &lt;em&gt;D3DShot&lt;/em&gt; object. If the capture output is not stackable, returns a list of frames.</source>
          <target state="translated">&lt;em&gt;Returns&lt;/em&gt;: A single array stacked on the specified dimension with a format that matches the capture output you selected when creating your &lt;em&gt;D3DShot&lt;/em&gt; object. If the capture output is not stackable, returns a list of frames.</target>
        </trans-unit>
        <trans-unit id="a0ded47cc83ba3a1c50d89d83da217dcecddb521" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Returns&lt;/em&gt;: A string representing the full path to the saved image file</source>
          <target state="translated">&lt;em&gt;Returns&lt;/em&gt;: A string representing the full path to the saved image file</target>
        </trans-unit>
        <trans-unit id="5aab36196e39285fa8c6036f5bb73ab12fa526d6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Returns&lt;/em&gt;: None</source>
          <target state="translated">&lt;em&gt;Returns&lt;/em&gt;: None</target>
        </trans-unit>
        <trans-unit id="e08d8429454d6bb926a41d383fc7211682281ca1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;numpy&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&quot;numpy&quot;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36de7618c4d1938b49fc8d8db63a8672a7eaa5d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;numpy_float&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&quot;numpy_float&quot;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="01697e9d4aea8e6d6051efea6a521a1d238d98f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;pil&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&quot;pil&quot;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="599c5be96c408eaa51be75323b7558a1a3c19dfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;pytorch&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&quot;pytorch&quot;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db98729f245363c872af8f1689fc3518eb9629c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;pytorch_float&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&quot;pytorch_float&quot;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28f33aec924572ad028cf1d65da1de9c2c6ee218" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;pytorch_float_gpu&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&quot;pytorch_float_gpu&quot;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9d6f41dbfa8ae2a75f723e3ca163c576fecbb73a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;pytorch_gpu&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&quot;pytorch_gpu&quot;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8981b59de0ae91a721887d09eb4b086728478d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;57.667 FPS&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;57.667 FPS&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a697c3182d73814c5f43a4a28036ce82ac137ffe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;57.867 FPS&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;57.867 FPS&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86d31a39bffeaeeeb77e871aeec4c31418451cfc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;58.033 FPS&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;58.033 FPS&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="10bd4b0e31332f224b6b1fce6ea0c50e66a341e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;58.1 FPS&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;58.1 FPS&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="47c45b72ee23209d3cbcd2aa51a90f1281e65cb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create a D3DShot instance&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Create a D3DShot instance&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c1598ebbe5a703303ffcbc362b2d9cffe100bd3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;D3DShot:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;D3DShot:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1247e2eed08db59030d7d83ead8508afca103ccb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dump the frame buffer to disk&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Dump the frame buffer to disk&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5e1779df0ba47a1c7d8f1951b6bf1e081ea4ec45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grab a specific frame from the buffer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Grab a specific frame from the buffer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1dadad42a1d519a411abb563e1eec77df0255227" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grab specific frames from the buffer as a stack&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Grab specific frames from the buffer as a stack&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0217b101d26df91d7e998c5e282d65872e35069" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grab specific frames from the buffer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Grab specific frames from the buffer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="79cc798b5f36bf2bfd91b7b89975f520915a7aea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grab the latest frame from the buffer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Grab the latest frame from the buffer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c22ec4fd8078c1d33506174d6127cb9da59652c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If &lt;em&gt;NumPy&lt;/em&gt; and &lt;em&gt;PyTorch&lt;/em&gt; are available + &lt;em&gt;CUDA&lt;/em&gt; is installed and &lt;em&gt;torch.cuda.is_available()&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;If &lt;em&gt;NumPy&lt;/em&gt; and &lt;em&gt;PyTorch&lt;/em&gt; are available + &lt;em&gt;CUDA&lt;/em&gt; is installed and &lt;em&gt;torch.cuda.is_available()&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="84653b02f1644b2c7db91f3636669e22bcd0b06e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If &lt;em&gt;NumPy&lt;/em&gt; and &lt;em&gt;PyTorch&lt;/em&gt; are available&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;If &lt;em&gt;NumPy&lt;/em&gt; and &lt;em&gt;PyTorch&lt;/em&gt; are available&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e852a5c132d2867c5ba384f6559b0831447b9771" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If &lt;em&gt;NumPy&lt;/em&gt; is available&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;If &lt;em&gt;NumPy&lt;/em&gt; is available&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c705dc1f3b49c2877b4227345945b4dae1d7d60d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;List the detected displays&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;List the detected displays&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d14b52923b5230772c69e31b3f792f7f18380a45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Screen Capture for 5 Seconds and Grab the Latest Frame&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Screen Capture for 5 Seconds and Grab the Latest Frame&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="489a4da4f80027354ff7340de081c98f07d9c658" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Screen Capture the Second Monitor as NumPy Arrays for 3 Seconds and Grab the 4 Latest Frames as a Stack&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Screen Capture the Second Monitor as NumPy Arrays for 3 Seconds and Grab the 4 Latest Frames as a Stack&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5eed0d976ed87dfb9c01fb516160c5ad64233ba4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Screenshot to Disk&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Screenshot to Disk&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee26c58b0660788da23204e011107c1d4ddbf915" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Screenshot to Memory&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Screenshot to Memory&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bb5734d93b31e4344d36ad2920172c44aadda6a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Select a display for capture&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Select a display for capture&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="304a3b8a5a5fc8d5956139502ae389910f6c0851" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Start a high-speed screen capture&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Start a high-speed screen capture&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="701031f6e0788a29aa527b39b7ea97c8cfd48726" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Take a screenshot and save it to disk&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Take a screenshot and save it to disk&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3aaffd3e9ebc1a865f4f2e62ed4dbe9b2674f728" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Take a screenshot every X seconds and save it to disk&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Take a screenshot every X seconds and save it to disk&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81f0e42b1e14d9d047b4baf89742e13c07bf4899" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Take a screenshot every X seconds&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Take a screenshot every X seconds&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bb5e7d6fbaffd148ab8e491f14a7cbac29e16b34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Take a screenshot&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Take a screenshot&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="87bca382d4b3e41da5eb0751068a5f8d3c80bfe4" translate="yes" xml:space="preserve">
          <source>All capture methods (screenshots included) accept an optional &lt;code&gt;region&lt;/code&gt; kwarg. The expected value is a 4-length tuple of integers that is to be structured like this:</source>
          <target state="translated">All capture methods (screenshots included) accept an optional &lt;code&gt;region&lt;/code&gt; kwarg. The expected value is a 4-length tuple of integers that is to be structured like this:</target>
        </trans-unit>
        <trans-unit id="a6a2c02472063f5d1259a145b71bf6558d0e4d6d" translate="yes" xml:space="preserve">
          <source>As always, remember that benchmarks are inherently flawed and highly depend on your individual hardware configuration and other circumstances. Use the numbers below as a relative indication of what to expect from &lt;em&gt;D3DShot&lt;/em&gt;, not as some sort of absolute truth.</source>
          <target state="translated">As always, remember that benchmarks are inherently flawed and highly depend on your individual hardware configuration and other circumstances. Use the numbers below as a relative indication of what to expect from &lt;em&gt;D3DShot&lt;/em&gt;, not as some sort of absolute truth.</target>
        </trans-unit>
        <trans-unit id="d2727259ea08f796cdcff1ac26d9e4d71087e1b0" translate="yes" xml:space="preserve">
          <source>Be mindful of RAM usage with larger values; You will be dealing with uncompressed images which use up to 100 MB each depending on the resolution.</source>
          <target state="translated">Be mindful of RAM usage with larger values; You will be dealing with uncompressed images which use up to 100 MB each depending on the resolution.</target>
        </trans-unit>
        <trans-unit id="588fa13517e21e786eecf64a9589273ca8c9793f" translate="yes" xml:space="preserve">
          <source>By default, the size of the frame buffer is set to 60. You can customize it when creating your &lt;em&gt;D3DShot&lt;/em&gt; object.</source>
          <target state="translated">By default, the size of the frame buffer is set to 60. You can customize it when creating your &lt;em&gt;D3DShot&lt;/em&gt; object.</target>
        </trans-unit>
        <trans-unit id="abe03619bbc52ac9943a07a464a362426cd90547" translate="yes" xml:space="preserve">
          <source>By default, your primary display will be selected. At all times you can verify which display is set to be used for capture.</source>
          <target state="translated">By default, your primary display will be selected. At all times you can verify which display is set to be used for capture.</target>
        </trans-unit>
        <trans-unit id="60e71b29c93363c7b2c7db4cc5588b5097d55dd7" translate="yes" xml:space="preserve">
          <source>Capture Outputs</source>
          <target state="translated">Capture Outputs</target>
        </trans-unit>
        <trans-unit id="19ae757bca4946233a1699b0aba4d40b9b74c9a0" translate="yes" xml:space="preserve">
          <source>Captures on rotated displays will always be in the correct orientation (i.e. matching what you see on your physical displays)</source>
          <target state="translated">Captures on rotated displays will always be in the correct orientation (i.e. matching what you see on your physical displays)</target>
        </trans-unit>
        <trans-unit id="d6a20b9a9e14c4ca4614655646e9dbde2b88951f" translate="yes" xml:space="preserve">
          <source>Captures on scaled displays will always be in full, non-scaled resolution (e.g. 1280x720 at 200% scaling will yield 2560x1440 captures)</source>
          <target state="translated">Captures on scaled displays will always be in full, non-scaled resolution (e.g. 1280x720 at 200% scaling will yield 2560x1440 captures)</target>
        </trans-unit>
        <trans-unit id="9abb4fe03cbfc6eb565a37980a6c29f0b1f039f2" translate="yes" xml:space="preserve">
          <source>Captures to PIL Images out of the box. Gracefully adds output options if NumPy or PyTorch can be found.</source>
          <target state="translated">Captures to PIL Images out of the box. Gracefully adds output options if NumPy or PyTorch can be found.</target>
        </trans-unit>
        <trans-unit id="6f58d263f33944384921df8405fd4a36e06175e2" translate="yes" xml:space="preserve">
          <source>Concepts</source>
          <target state="translated">Concepts</target>
        </trans-unit>
        <trans-unit id="c2197e10f2e93640b0136f397c762b907926aa7c" translate="yes" xml:space="preserve">
          <source>Covers all common scenarios and use cases:</source>
          <target state="translated">Covers all common scenarios and use cases:</target>
        </trans-unit>
        <trans-unit id="97bebf9b672890060204cc6bc31c449faab00c5f" translate="yes" xml:space="preserve">
          <source>D3DShot</source>
          <target state="translated">D3DShot</target>
        </trans-unit>
        <trans-unit id="26f6ff9f47bc2ced66934f00b49c7e9c0730cf53" translate="yes" xml:space="preserve">
          <source>Detects displays in just about any configuration: Single monitor, multiple monitors on one adapter, multiple monitors on multiple adapters.</source>
          <target state="translated">Detects displays in just about any configuration: Single monitor, multiple monitors on one adapter, multiple monitors on multiple adapters.</target>
        </trans-unit>
        <trans-unit id="c34808c000b34ab490a5f67abbd8bd9bf2495931" translate="yes" xml:space="preserve">
          <source>Display rotation and scaling is detected and handled for you by &lt;em&gt;D3DShot&lt;/em&gt;:</source>
          <target state="translated">Display rotation and scaling is detected and handled for you by &lt;em&gt;D3DShot&lt;/em&gt;:</target>
        </trans-unit>
        <trans-unit id="98d15207871175e87be0df39ac430bc2af5f6a8c" translate="yes" xml:space="preserve">
          <source>Displays</source>
          <target state="translated">Displays</target>
        </trans-unit>
        <trans-unit id="9c5f2d82c068c7548e78da11289a9b4293237f0c" translate="yes" xml:space="preserve">
          <source>Do NOT import the &lt;em&gt;D3DShot&lt;/em&gt; class directly and attempt to initialize it yourself! The &lt;code&gt;create&lt;/code&gt; helper function initializes and validates a bunch of things for you behind the scenes.</source>
          <target state="translated">Do NOT import the &lt;em&gt;D3DShot&lt;/em&gt; class directly and attempt to initialize it yourself! The &lt;code&gt;create&lt;/code&gt; helper function initializes and validates a bunch of things for you behind the scenes.</target>
        </trans-unit>
        <trans-unit id="2c06edfccf45aa6d282064c1abb04c0fa9c1777d" translate="yes" xml:space="preserve">
          <source>Don't tell anyone but the reason it can compete with NumPy in the first place is only because... &lt;em&gt;it is&lt;/em&gt; generated from a NumPy array built from the method above! If you sniff around the code, you will indeed find &lt;code&gt;torch.from_numpy()&lt;/code&gt; scattered around. This pretty much matches the speed of the &quot;numpy&quot; capture output 1:1, except when dealing with a rotated display. Display rotation is handled by &lt;code&gt;np.rot90()&lt;/code&gt; calls which yields negative strides on that array. Negative strides are understood and perform well under NumPy but are still unsupported in PyTorch at the time of writing. To address this, an additional copy operation is needed to bring it back to a contiguous array which imposes a performance penalty.</source>
          <target state="translated">Don't tell anyone but the reason it can compete with NumPy in the first place is only because... &lt;em&gt;it is&lt;/em&gt; generated from a NumPy array built from the method above! If you sniff around the code, you will indeed find &lt;code&gt;torch.from_numpy()&lt;/code&gt; scattered around. This pretty much matches the speed of the &quot;numpy&quot; capture output 1:1, except when dealing with a rotated display. Display rotation is handled by &lt;code&gt;np.rot90()&lt;/code&gt; calls which yields negative strides on that array. Negative strides are understood and perform well under NumPy but are still unsupported in PyTorch at the time of writing. To address this, an additional copy operation is needed to bring it back to a contiguous array which imposes a performance penalty.</target>
        </trans-unit>
        <trans-unit id="759117217d59f23cb4cff0fa613ec3179c2b9f71" translate="yes" xml:space="preserve">
          <source>Extra Step: Laptop Users</source>
          <target state="translated">Extra Step: Laptop Users</target>
        </trans-unit>
        <trans-unit id="84a14eb82eee3b3083f702a6450dec642a65c8e7" translate="yes" xml:space="preserve">
          <source>Extremely Fast and Robust Screen Capture on Windows with the Desktop Duplication API</source>
          <target state="translated">Extremely Fast and Robust Screen Capture on Windows with the Desktop Duplication API</target>
        </trans-unit>
        <trans-unit id="78085cedc9bc89fc75d6d1e65acf12f254c903ca" translate="yes" xml:space="preserve">
          <source>For example, if you want to only capture a 200px by 200px region offset by 100px from both the left and top, you would do:</source>
          <target state="translated">For example, if you want to only capture a 200px by 200px region offset by 100px from both the left and top, you would do:</target>
        </trans-unit>
        <trans-unit id="e34671d5b8905e7f92796d2c821c53439a12dabb" translate="yes" xml:space="preserve">
          <source>Frame Buffer</source>
          <target state="translated">Frame Buffer</target>
        </trans-unit>
        <trans-unit id="fad5f34ebbae588973e844bb13b3acf1c50ea5ef" translate="yes" xml:space="preserve">
          <source>Handles display rotation and scaling for you</source>
          <target state="translated">Handles display rotation and scaling for you</target>
        </trans-unit>
        <trans-unit id="6c3e451080e39f09c718084833e46a647dad409d" translate="yes" xml:space="preserve">
          <source>High-speed capture to memory buffer (threaded; non-blocking)</source>
          <target state="translated">High-speed capture to memory buffer (threaded; non-blocking)</target>
        </trans-unit>
        <trans-unit id="d504225fc98bf338c432ae8f2dfc0f0f4e07d467" translate="yes" xml:space="preserve">
          <source>How is the &quot;numpy&quot; capture output performance &lt;em&gt;that&lt;/em&gt; good?</source>
          <target state="translated">How is the &quot;numpy&quot; capture output performance &lt;em&gt;that&lt;/em&gt; good?</target>
        </trans-unit>
        <trans-unit id="dd4ca0387649840578b59231d7e209f789c679d2" translate="yes" xml:space="preserve">
          <source>If you are capturing a scaled display, the region will be computed against the full, non-scaled resolution.</source>
          <target state="translated">If you are capturing a scaled display, the region will be computed against the full, non-scaled resolution.</target>
        </trans-unit>
        <trans-unit id="fdf4c64ef2de8d1d780a2c19389e2ba1e4783933" translate="yes" xml:space="preserve">
          <source>If you go through the source code, you will notice that the region cropping happens after a full display capture. That might seem sub-optimal but testing has revealed that copying a region of the GPU &lt;em&gt;D3D11Texture2D&lt;/em&gt; to the destination CPU &lt;em&gt;D3D11Texture2D&lt;/em&gt; using &lt;em&gt;CopySubresourceRegion&lt;/em&gt; is only faster when the region is very small. In fact, it doesn't take long for larger regions to actually start becoming slower than the full display capture using this method. To make things worse, it adds a lot of complexity by having the surface pitch not match the buffer size and treating rotated displays differently. It was therefore decided that it made more sense to stick to &lt;em&gt;CopyResource&lt;/em&gt; in all cases and crop after the fact.</source>
          <target state="translated">If you go through the source code, you will notice that the region cropping happens after a full display capture. That might seem sub-optimal but testing has revealed that copying a region of the GPU &lt;em&gt;D3D11Texture2D&lt;/em&gt; to the destination CPU &lt;em&gt;D3D11Texture2D&lt;/em&gt; using &lt;em&gt;CopySubresourceRegion&lt;/em&gt; is only faster when the region is very small. In fact, it doesn't take long for larger regions to actually start becoming slower than the full display capture using this method. To make things worse, it adds a lot of complexity by having the surface pitch not match the buffer size and treating rotated displays differently. It was therefore decided that it made more sense to stick to &lt;em&gt;CopyResource&lt;/em&gt; in all cases and crop after the fact.</target>
        </trans-unit>
        <trans-unit id="54dcf94c16c77800c0c9024828a21aa69b4ff431" translate="yes" xml:space="preserve">
          <source>In practice it ends up looking like this:</source>
          <target state="translated">In practice it ends up looking like this:</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="db6daa83b9a7c97801c4daa2de54f4ddd152bb33" translate="yes" xml:space="preserve">
          <source>Is by far the fastest way to capture the screen with Python on Windows 8.1+</source>
          <target state="translated">Is by far the fastest way to capture the screen with Python on Windows 8.1+</target>
        </trans-unit>
        <trans-unit id="98b7f0dd4b03abfca3d2f0a3db48ea75b4f31caa" translate="yes" xml:space="preserve">
          <source>Is even able to capture DirectX 11 / 12 exclusive fullscreen applications and games!</source>
          <target state="translated">Is even able to capture DirectX 11 / 12 exclusive fullscreen applications and games!</target>
        </trans-unit>
        <trans-unit id="014371c1afb49532addf1c285ade8afb96e2dba3" translate="yes" xml:space="preserve">
          <source>Is robust and very stable. You can run it for hours / days without performance degradation</source>
          <target state="translated">Is robust and very stable. You can run it for hours / days without performance degradation</target>
        </trans-unit>
        <trans-unit id="84058cbb673868ac7289a9ac8f1bc5700cf578ad" translate="yes" xml:space="preserve">
          <source>Is very easy to use. If you can remember 10-ish methods, you know the entire thing.</source>
          <target state="translated">Is very easy to use. If you can remember 10-ish methods, you know the entire thing.</target>
        </trans-unit>
        <trans-unit id="d165d4ad2fbb6e33d80a96124b156ee7f8bc115d" translate="yes" xml:space="preserve">
          <source>It is always automatically cleared before starting one of these operations.</source>
          <target state="translated">It is always automatically cleared before starting one of these operations.</target>
        </trans-unit>
        <trans-unit id="1dfe220d3d0e6e54ef54fa86ae81acbbcffc3750" translate="yes" xml:space="preserve">
          <source>It remains the default capture output because:</source>
          <target state="translated">It remains the default capture output because:</target>
        </trans-unit>
        <trans-unit id="51479a3fb86e5506f15a91a2f63370dc4b5fadea" translate="yes" xml:space="preserve">
          <source>It's a way lighter / simpler dependency for a library compared to NumPy or PyTorch</source>
          <target state="translated">It's a way lighter / simpler dependency for a library compared to NumPy or PyTorch</target>
        </trans-unit>
        <trans-unit id="2a091503453a0cc89b961c103fb20f6ac8d6cd17" translate="yes" xml:space="preserve">
          <source>Measuring the exact performance of the Windows Desktop Duplication API proves to be a little complicated because it will only return new texture data if the contents of the screen has changed. This is optimal for performance but it makes it difficult to express in terms of frames per second, the measurement people tend to expect for benchmarks. Ultimately the solution ended up being to run a high FPS video game on the display to capture to make sure the screen contents is different at all times while benchmarking.</source>
          <target state="translated">Measuring the exact performance of the Windows Desktop Duplication API proves to be a little complicated because it will only return new texture data if the contents of the screen has changed. This is optimal for performance but it makes it difficult to express in terms of frames per second, the measurement people tend to expect for benchmarks. Ultimately the solution ended up being to run a high FPS video game on the display to capture to make sure the screen contents is different at all times while benchmarking.</target>
        </trans-unit>
        <trans-unit id="03e60252a2ee169c69916ceb940e23e3a3026edc" translate="yes" xml:space="preserve">
          <source>NumPy arrays have a ctypes interface that can give you their raw memory address (&lt;code&gt;X.ctypes.data&lt;/code&gt;). If you have the memory address and size of another byte buffer, which is what we end up with by processing what returns from the Desktop Duplication API, you can use &lt;code&gt;ctypes.memmove&lt;/code&gt; to copy that byte buffer directly to the NumPy structure, effectively bypassing as much Python as possible.</source>
          <target state="translated">NumPy arrays have a ctypes interface that can give you their raw memory address ( &lt;code&gt;X.ctypes.data&lt;/code&gt; ). If you have the memory address and size of another byte buffer, which is what we end up with by processing what returns from the Desktop Duplication API, you can use &lt;code&gt;ctypes.memmove&lt;/code&gt; to copy that byte buffer directly to the NumPy structure, effectively bypassing as much Python as possible.</target>
        </trans-unit>
        <trans-unit id="44311163be3dcfba746e5ec054a5a5d34baedadf" translate="yes" xml:space="preserve">
          <source>Once you have a &lt;em&gt;D3DShot&lt;/em&gt; instance in scope, we can start doing stuff with it!</source>
          <target state="translated">Once you have a &lt;em&gt;D3DShot&lt;/em&gt; instance in scope, we can start doing stuff with it!</target>
        </trans-unit>
        <trans-unit id="69665f793931b03621d68b867e7b8090c2a0906e" translate="yes" xml:space="preserve">
          <source>Only has an effect on NumPy and PyTorch capture outputs.</source>
          <target state="translated">Only has an effect on NumPy and PyTorch capture outputs.</target>
        </trans-unit>
        <trans-unit id="113a0686502a2605037422a674a3d94adbc965c7" translate="yes" xml:space="preserve">
          <source>PIL Image objects tend to be familiar to Python users</source>
          <target state="translated">PIL Image objects tend to be familiar to Python users</target>
        </trans-unit>
        <trans-unit id="404810db61a56f58a5af1eea76880edfb16204d1" translate="yes" xml:space="preserve">
          <source>PIL has no ctypes interface like NumPy so a bytearray needs to be read into Python first and then fed to &lt;code&gt;PIL.Image.frombytes()&lt;/code&gt;. This is still fast in Python terms, but it just cannot match the speed of the low-level NumPy method.</source>
          <target state="translated">PIL has no ctypes interface like NumPy so a bytearray needs to be read into Python first and then fed to &lt;code&gt;PIL.Image.frombytes()&lt;/code&gt; . This is still fast in Python terms, but it just cannot match the speed of the low-level NumPy method.</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">공연</target>
        </trans-unit>
        <trans-unit id="bbc0223ac1ebd135b5b8a9dec559f35dcc15038e" translate="yes" xml:space="preserve">
          <source>Python 3.6+ (64-bit)</source>
          <target state="translated">Python 3.6+ (64-bit)</target>
        </trans-unit>
        <trans-unit id="039711232507cd9753ddba093da2350b27e67dca" translate="yes" xml:space="preserve">
          <source>Regions</source>
          <target state="translated">Regions</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">요구 사항</target>
        </trans-unit>
        <trans-unit id="60ad8a9af168c0f3fd2d5e8f1d4ad0613bbaf94b" translate="yes" xml:space="preserve">
          <source>Screenshot to disk</source>
          <target state="translated">Screenshot to disk</target>
        </trans-unit>
        <trans-unit id="f95ccb2cd17393c174d3b19ad873e340ae704b87" translate="yes" xml:space="preserve">
          <source>Screenshot to disk every X seconds (threaded; non-blocking)</source>
          <target state="translated">Screenshot to disk every X seconds (threaded; non-blocking)</target>
        </trans-unit>
        <trans-unit id="f1cce8a95a193d1cadb74ef77bcdc62a793d9335" translate="yes" xml:space="preserve">
          <source>Screenshot to memory</source>
          <target state="translated">Screenshot to memory</target>
        </trans-unit>
        <trans-unit id="0f5cdbf44644b3c603a2e498cde408576906118b" translate="yes" xml:space="preserve">
          <source>Screenshot to memory buffer every X seconds (threaded; non-blocking)</source>
          <target state="translated">Screenshot to memory buffer every X seconds (threaded; non-blocking)</target>
        </trans-unit>
        <trans-unit id="ef91f970eeaffdca7539aa916f5e7450fa1459ac" translate="yes" xml:space="preserve">
          <source>Selecting another display for capture is as simple as setting &lt;code&gt;d.display&lt;/code&gt; to another value from &lt;code&gt;d.displays&lt;/code&gt;</source>
          <target state="translated">Selecting another display for capture is as simple as setting &lt;code&gt;d.display&lt;/code&gt; to another value from &lt;code&gt;d.displays&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39892ce8d343b16aa782fc0cc427d7c5ce4bcd1d" translate="yes" xml:space="preserve">
          <source>Singleton</source>
          <target state="translated">하나씩 일어나는 것</target>
        </trans-unit>
        <trans-unit id="9bf39a803c52ddf8456924dbd6053e75d3e14f0c" translate="yes" xml:space="preserve">
          <source>Supports capturing specific regions of the screen</source>
          <target state="translated">Supports capturing specific regions of the screen</target>
        </trans-unit>
        <trans-unit id="db57d3b7517168999db2f5ad2a1022c9d6720447" translate="yes" xml:space="preserve">
          <source>TL;DR Quick Code Samples</source>
          <target state="translated">TL;DR Quick Code Samples</target>
        </trans-unit>
        <trans-unit id="0638a25fc9c965689f30402ef4a1b62da5c68df5" translate="yes" xml:space="preserve">
          <source>The absolute fastest capture outputs appear to be &lt;em&gt;&quot;numpy&quot;&lt;/em&gt; and unrotated &lt;em&gt;&quot;pytorch&quot;&lt;/em&gt;; all averaging around 58 FPS. In Python land, this is FAST!</source>
          <target state="translated">The absolute fastest capture outputs appear to be &lt;em&gt;&quot;numpy&quot;&lt;/em&gt; and unrotated &lt;em&gt;&quot;pytorch&quot;&lt;/em&gt;; all averaging around 58 FPS. In Python land, this is FAST!</target>
        </trans-unit>
        <trans-unit id="443ad41263f174d6995e45e6c4e90adf6f8b934a" translate="yes" xml:space="preserve">
          <source>The buffer is used by the following methods:</source>
          <target state="translated">The buffer is used by the following methods:</target>
        </trans-unit>
        <trans-unit id="e5839a42b49bab0d67460be506e07b81d5567d9f" translate="yes" xml:space="preserve">
          <source>The data of the Direct3D textures made accessible by the Desktop Duplication API is formatted as bytes. To represent this data as normalized floats instead, a type cast and element-wise division needs to be performed on the array holding those bytes. This imposes a major performance penalty. Interestingly, you can see this performance penalty mitigated on GPU PyTorch tensors since the element-wise division can be massively parallelized on the device.</source>
          <target state="translated">The data of the Direct3D textures made accessible by the Desktop Duplication API is formatted as bytes. To represent this data as normalized floats instead, a type cast and element-wise division needs to be performed on the array holding those bytes. This imposes a major performance penalty. Interestingly, you can see this performance penalty mitigated on GPU PyTorch tensors since the element-wise division can be massively parallelized on the device.</target>
        </trans-unit>
        <trans-unit id="4b40ea012227f2d30462b584b435fe523d624a94" translate="yes" xml:space="preserve">
          <source>The desired &lt;em&gt;Capture Output&lt;/em&gt; is defined when creating a &lt;em&gt;D3DShot&lt;/em&gt; instance. It defines the type of all captured images. By default, all captures will return PIL.Image objects. This is a good option if you mostly intend to take screenshots.</source>
          <target state="translated">The desired &lt;em&gt;Capture Output&lt;/em&gt; is defined when creating a &lt;em&gt;D3DShot&lt;/em&gt; instance. It defines the type of all captured images. By default, all captures will return PIL.Image objects. This is a good option if you mostly intend to take screenshots.</target>
        </trans-unit>
        <trans-unit id="f02eca2bea2f7ae96a3aa2907a3dff9f059b8cd1" translate="yes" xml:space="preserve">
          <source>The files will be named according to this convention: &lt;code&gt;&amp;lt;frame buffer index&amp;gt;.png&lt;/code&gt;</source>
          <target state="translated">The files will be named according to this convention: &lt;code&gt;&amp;lt;frame buffer index&amp;gt;.png&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="553d194770c2dbbc9c70e0062bd0aa0a569462ef" translate="yes" xml:space="preserve">
          <source>The frame buffer can be accessed directly with &lt;code&gt;d.frame_buffer&lt;/code&gt; but the usage of the utility methods instead is recommended.</source>
          <target state="translated">The frame buffer can be accessed directly with &lt;code&gt;d.frame_buffer&lt;/code&gt; but the usage of the utility methods instead is recommended.</target>
        </trans-unit>
        <trans-unit id="3bdd416860cc347530e1d98f4f548ac98fc07306" translate="yes" xml:space="preserve">
          <source>These dependencies will automatically be installed alongside &lt;em&gt;D3DShot&lt;/em&gt;; No need to worry about them!</source>
          <target state="translated">These dependencies will automatically be installed alongside &lt;em&gt;D3DShot&lt;/em&gt;; No need to worry about them!</target>
        </trans-unit>
        <trans-unit id="0a793a06b0d353f0ac1f4328cadc2ce4bb51e49a" translate="yes" xml:space="preserve">
          <source>This is barely scratching the surface... Keep reading!</source>
          <target state="translated">This is barely scratching the surface... Keep reading!</target>
        </trans-unit>
        <trans-unit id="7dd8f6f5a9b7f215103ef6aada82a1a55e740206" translate="yes" xml:space="preserve">
          <source>This low-level operation is extremely fast, leaving everything else that would normally compete with NumPy in the dust.</source>
          <target state="translated">This low-level operation is extremely fast, leaving everything else that would normally compete with NumPy in the dust.</target>
        </trans-unit>
        <trans-unit id="2aa1559cab8d095a354648fd61a67dac5c233748" translate="yes" xml:space="preserve">
          <source>This operation is threaded and non-blocking. It will keep running until &lt;code&gt;d.stop()&lt;/code&gt; is called.</source>
          <target state="translated">This operation is threaded and non-blocking. It will keep running until &lt;code&gt;d.stop()&lt;/code&gt; is called.</target>
        </trans-unit>
        <trans-unit id="d6fa83dad4a5534b22eb0ca43a3f53c0f29dacd1" translate="yes" xml:space="preserve">
          <source>This operation is threaded and non-blocking. It will keep running until &lt;code&gt;d.stop()&lt;/code&gt; is called. Captures are pushed to the frame buffer.</source>
          <target state="translated">This operation is threaded and non-blocking. It will keep running until &lt;code&gt;d.stop()&lt;/code&gt; is called. Captures are pushed to the frame buffer.</target>
        </trans-unit>
        <trans-unit id="6660b6d5061911589d58be052d4de19c98d323dd" translate="yes" xml:space="preserve">
          <source>Trying to use a Capture Output for which your environment does not meet the requirements will result in an error.</source>
          <target state="translated">Trying to use a Capture Output for which your environment does not meet the requirements will result in an error.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="a3a5db772382a04f2af70067285321b78a1ea5ea" translate="yes" xml:space="preserve">
          <source>When you create a &lt;em&gt;D3DShot&lt;/em&gt; instance, a frame buffer is also initialized. It is meant as a thread-safe, first-in, first-out way to hold a certain quantity of captures and is implemented as a &lt;code&gt;collections.deque&lt;/code&gt;.</source>
          <target state="translated">When you create a &lt;em&gt;D3DShot&lt;/em&gt; instance, a frame buffer is also initialized. It is meant as a thread-safe, first-in, first-out way to hold a certain quantity of captures and is implemented as a &lt;code&gt;collections.deque&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ea82f63ca1d09c83226c7d4c1dcde1123f7fa44c" translate="yes" xml:space="preserve">
          <source>When you create a &lt;em&gt;D3DShot&lt;/em&gt; instance, your available displays will automatically be detected along with all their relevant properties.</source>
          <target state="translated">When you create a &lt;em&gt;D3DShot&lt;/em&gt; instance, your available displays will automatically be detected along with all their relevant properties.</target>
        </trans-unit>
        <trans-unit id="dab3eb42f48a4c96bf5b29ebfa08fc13e70e3664" translate="yes" xml:space="preserve">
          <source>Why are the float versions of capture outputs slower?</source>
          <target state="translated">Why are the float versions of capture outputs slower?</target>
        </trans-unit>
        <trans-unit id="5d1adb5d9b2f237cd6c8c337348742e9e4e0d4a5" translate="yes" xml:space="preserve">
          <source>Why is the &quot;pil&quot; capture output, being the default, not the fastest?</source>
          <target state="translated">Why is the &quot;pil&quot; capture output, being the default, not the fastest?</target>
        </trans-unit>
        <trans-unit id="ebb7914a03cff0575e3e7e7564059fa1eb358dd8" translate="yes" xml:space="preserve">
          <source>Why is the &quot;pytorch&quot; capture output slower on rotated displays?</source>
          <target state="translated">Why is the &quot;pytorch&quot; capture output slower on rotated displays?</target>
        </trans-unit>
        <trans-unit id="4d9a17877d71310786f477a8050b896ef3852a03" translate="yes" xml:space="preserve">
          <source>Windows 8.1+ (64-bit)</source>
          <target state="translated">Windows 8.1+ (64-bit)</target>
        </trans-unit>
        <trans-unit id="396d0eaddae72e3929cff6d2c04826e7bc866fde" translate="yes" xml:space="preserve">
          <source>Windows has a quirk when using Desktop Duplication on hybrid-GPU systems. Please see the &lt;a href=&quot;https://github.com/SerpentAI/D3DShot/wiki/Installation-Note:-Laptops&quot;&gt;wiki article&lt;/a&gt; before attempting to use &lt;em&gt;D3DShot&lt;/em&gt; on your system.</source>
          <target state="translated">Windows has a quirk when using Desktop Duplication on hybrid-GPU systems. Please see the &lt;a href=&quot;https://github.com/SerpentAI/D3DShot/wiki/Installation-Note:-Laptops&quot;&gt;wiki article&lt;/a&gt; before attempting to use &lt;em&gt;D3DShot&lt;/em&gt; on your system.</target>
        </trans-unit>
        <trans-unit id="59b0fe6922f44a48adfa62dcfd265cacd4f5437c" translate="yes" xml:space="preserve">
          <source>Windows only allows 1 instance of Desktop Duplication per process. To make sure we fall in line with that limitation to avoid issues, the &lt;em&gt;D3DShot&lt;/em&gt; class acts as a singleton. Any subsequent calls to &lt;code&gt;d3dshot.create()&lt;/code&gt; will always return the existing instance.</source>
          <target state="translated">Windows only allows 1 instance of Desktop Duplication per process. To make sure we fall in line with that limitation to avoid issues, the &lt;em&gt;D3DShot&lt;/em&gt; class acts as a singleton. Any subsequent calls to &lt;code&gt;d3dshot.create()&lt;/code&gt; will always return the existing instance.</target>
        </trans-unit>
        <trans-unit id="88d0fb368bb763a83002407a7eb7445ccd2d693f" translate="yes" xml:space="preserve">
          <source>Your primary display is selected by default but if you have a multi-monitor setup, you can select another entry in &lt;code&gt;d.displays&lt;/code&gt;</source>
          <target state="translated">Your primary display is selected by default but if you have a multi-monitor setup, you can select another entry in &lt;code&gt;d.displays&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
