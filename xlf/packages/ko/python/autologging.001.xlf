<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/autologging/">
    <body>
      <group id="autologging">
        <trans-unit id="273f19086473dfb34281e511b7a251090e111921" translate="yes" xml:space="preserve">
          <source>(Use &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt; or
&lt;a href=&quot;https://pypi.python.org/pypi/wheel&quot;&gt;wheel&lt;/a&gt; to install the .whl.)</source>
          <target state="translated">( .whl을 설치 하려면 &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt; 또는 &lt;a href=&quot;https://pypi.python.org/pypi/wheel&quot;&gt;wheel&lt;/a&gt; 을 사용하십시오.)</target>
        </trans-unit>
        <trans-unit id="af8648017801cf2c2d1588dc9f88cd6ffbcad947" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in version 1.2.0:&lt;/em&gt; automatic yield/stop tracing of Python
&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-generator-iterator&quot;&gt;generator iterators&lt;/a&gt;
(if the &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;
function is traced).</source>
          <target state="translated">&lt;em&gt;버전 1.2.0의 새로운 기능 :&lt;/em&gt; Python &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-generator-iterator&quot;&gt;생성기 반복기&lt;/a&gt; 의 자동 양보 / 중지 추적 ( &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-generator&quot;&gt;생성기&lt;/a&gt; 함수가 추적 된 경우).</target>
        </trans-unit>
        <trans-unit id="aa9eebe373ff3165f3b24bbf212c3eaefd59434e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;TRACE&lt;/code&gt;&lt;/strong&gt;
The &lt;code&gt;autologging.TRACE&lt;/code&gt; (level 1) log level is registered with the
Python &lt;code&gt;logging&lt;/code&gt; module when Autologging is imported so that tracing
can be configured and controlled independently of application logging.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;TRACE&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;autologging.TRACE&lt;/code&gt; (레벨 1) 로그 레벨 파이썬 등록되어 &lt;code&gt;logging&lt;/code&gt; 이 추적 구성 독립적 애플리케이션 로깅을 제어 할 수 있도록 Autologging 가져 모듈.</target>
        </trans-unit>
        <trans-unit id="be803a9bf04d5a6543f462585ecb3908c98d114b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;logged&lt;/code&gt;&lt;/strong&gt;
Decorate a class to create a &lt;code&gt;__log&lt;/code&gt; member. The logger is named by
default to match the dotted-name of the containing class. A function
may also be decorated, creating a &lt;code&gt;_log&lt;/code&gt; attribute on the function
object whose default name matches the containing module.
A specifically-named logger may also be passed to the decorator (i.e.
&lt;code&gt;logged(my_logger)&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;logged&lt;/code&gt; &lt;/strong&gt; 장식에게 만들 수있는 클래스 &lt;code&gt;__log&lt;/code&gt; 의 멤버. 로거는 포함하는 클래스의 점으로 구분 된 이름과 일치하도록 기본적으로 이름이 지정됩니다. 함수를 데코 레이팅하여 기본 이름이 포함하는 모듈과 일치하는 함수 객체에 &lt;code&gt;_log&lt;/code&gt; 속성을생성 할 수도 있습니다. 특별히 이름이 지정된 로거가 데코레이터에게 전달 될 수도 있습니다 (예 : &lt;code&gt;logged(my_logger)&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5409e98fa3c0ddb9b1b8c5ec789d3f7d99b901ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;traced&lt;/code&gt;&lt;/strong&gt;
Decorate a class to provide &lt;strong&gt;automatic&lt;/strong&gt; method call/return tracing. By
default, all class, static, and instance methods are traced (excluding
&quot;&lt;strong&gt;special&lt;/strong&gt;&quot; methods, with the exception of &lt;code&gt;__init__&lt;/code&gt; and &lt;code&gt;__call__&lt;/code&gt;).
As with the &lt;code&gt;logged&lt;/code&gt; decorator, the default name of the tracing logger
matches the dotted-name of the containing class and may be overridden by
passing a specifically-named logger to the decorator.
Additionally, this decorator accepts multiple string arguments that
explicitly name the methods to be traced (and may even name
&quot;&lt;strong&gt;special&lt;/strong&gt;&quot; methods).</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;traced&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; 자동&lt;/strong&gt; 메서드 호출 / 반환 추적 을 제공하도록 클래스를 장식합니다. 기본적으로 모든 클래스, 정적 및 인스턴스 메서드가 추적됩니다 ( &lt;code&gt;__init__&lt;/code&gt; 및 &lt;code&gt;__call__&lt;/code&gt; 을 제외하고 &quot;&lt;strong&gt; 특수&lt;/strong&gt; &quot;메서드제외). &lt;code&gt;logged&lt;/code&gt; 데코레이터와 마찬가지로추적 로거의 기본 이름은 포함하는 클래스의 점으로 구분 된 이름과 일치하며 특별히 명명 된 로거를 데코레이터에 전달하여 재정의 할 수 있습니다. 또한이 데코레이터는 추적 할 메서드의 이름을 명시 적으로 지정하는 여러 문자열 인수를 허용합니다 (그리고 &quot;&lt;strong&gt; 특수&lt;/strong&gt; &quot;메서드의이름도 지정할 수 있음).&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d119f8ecbc83194d883921f782583301b260b77f" translate="yes" xml:space="preserve">
          <source>A brief example</source>
          <target state="translated">간단한 예</target>
        </trans-unit>
        <trans-unit id="f98879524e741ebc955a3cad24a2daaa858b3a88" translate="yes" xml:space="preserve">
          <source>A simple logged and traced class:</source>
          <target state="translated">간단한 로그 및 추적 클래스 :</target>
        </trans-unit>
        <trans-unit id="6e6fb2f6a2bafc04b078d9b9dc79392f1d37bc27" translate="yes" xml:space="preserve">
          <source>Alternatively, download and extract a source .zip or .tar.gz archive
from &lt;a href=&quot;https://github.com/mzipay/Autologging/releases&quot;&gt;https://github.com/mzipay/Autologging/releases&lt;/a&gt;,
&lt;a href=&quot;https://pypi.python.org/pypi/Autologging&quot;&gt;https://pypi.python.org/pypi/Autologging&lt;/a&gt; or
&lt;a href=&quot;https://sourceforge.net/projects/autologging/files/&quot;&gt;https://sourceforge.net/projects/autologging/files/&lt;/a&gt;.</source>
          <target state="translated">또는 &lt;a href=&quot;https://github.com/mzipay/Autologging/releases&quot;&gt;https://github.com/mzipay/Autologging/releases&lt;/a&gt; , &lt;a href=&quot;https://pypi.python.org/pypi/Autologging&quot;&gt;https://pypi.python.org/pypi/Autologging&lt;/a&gt; 또는 &lt;a href=&quot;https://sourceforge.net/projects/autologging/files/&quot;&gt;https : // sourceforge&lt;/a&gt; 에서 소스 .zip 또는 .tar.gz 아카이브를 다운로드하고 추출합니다 . net / projects / autologging / files / .</target>
        </trans-unit>
        <trans-unit id="741f0dbd2f4233c97931fad6b316ddf0c7714a89" translate="yes" xml:space="preserve">
          <source>Autologging - easier logging and tracing for Python classes</source>
          <target state="translated">자동 로깅-Python 클래스에 대한 더 쉬운 로깅 및 추적</target>
        </trans-unit>
        <trans-unit id="dd58c22dc26a5e2161bb32f11f91728ca7d90867" translate="yes" xml:space="preserve">
          <source>Autologging allows for tracing to be configured (and controlled)
independently from application logging. Toggle tracing on/off, write
trace log records to a separate log, and use different formatting for
trace log entries - all via standard Python logging facilities, and
without affecting your application logging.</source>
          <target state="translated">자동 로깅을 사용하면 애플리케이션 로깅과 독립적으로 추적을 구성 (및 제어) 할 수 있습니다. 추적 켜기 / 끄기를 전환하고, 추적 로그 레코드를 별도의 로그에 쓰고, 추적 로그 항목에 대해 다른 형식을 사용합니다. 모두 표준 Python 로깅 기능을 통해 애플리케이션 로깅에 영향을주지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7fe294bd70d8cb7b652755df3a929dab38709c2" translate="yes" xml:space="preserve">
          <source>Autologging eliminates boilerplate logging setup code and tracing code,
and provides a means to separate application logging from program flow
and data tracing.</source>
          <target state="translated">자동 로깅은 상용구 로깅 설정 코드 및 추적 코드를 제거하고 프로그램 흐름 및 데이터 추적에서 애플리케이션 로깅을 분리하는 수단을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="63c21aabf3c1c523959923aa673f25505c6caf50" translate="yes" xml:space="preserve">
          <source>Autologging exposes two decorators and a custom log level:</source>
          <target state="translated">자동 로깅은 두 개의 데코레이터와 사용자 지정 로그 수준을 노출합니다.</target>
        </trans-unit>
        <trans-unit id="6f65bdf829cc20ac73ec0dc0bad007df088f933d" translate="yes" xml:space="preserve">
          <source>Autologging makes logging and tracing Python classes easy.</source>
          <target state="translated">자동 로깅을 사용하면 Python 클래스를 쉽게 로깅하고 추적 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78260b935740f97b3ad2042d507d31c128aebb80" translate="yes" xml:space="preserve">
          <source>Binary installation</source>
          <target state="translated">바이너리 설치</target>
        </trans-unit>
        <trans-unit id="d60ab76116a1beab390764e1e653979deaf56335" translate="yes" xml:space="preserve">
          <source>Clone or fork the repository:</source>
          <target state="translated">저장소를 복제하거나 분기합니다.</target>
        </trans-unit>
        <trans-unit id="7ffd0b9dd1a4c4732932377cdfa0c240be9e13aa" translate="yes" xml:space="preserve">
          <source>Download the Python wheel (.whl) or a Windows installer from
&lt;a href=&quot;https://pypi.python.org/pypi/Autologging&quot;&gt;https://pypi.python.org/pypi/Autologging&lt;/a&gt; or
&lt;a href=&quot;https://sourceforge.net/projects/autologging/files/&quot;&gt;https://sourceforge.net/projects/autologging/files/&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://pypi.python.org/pypi/Autologging&quot;&gt;https://pypi.python.org/pypi/Autologging&lt;/a&gt; 또는 &lt;a href=&quot;https://sourceforge.net/projects/autologging/files/&quot;&gt;https://sourceforge.net/projects/autologging/files/&lt;/a&gt; 에서 Python 휠 (.whl) 또는 Windows 설치 프로그램을 다운로드합니다 .</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">소개</target>
        </trans-unit>
        <trans-unit id="86b07b23c0065c3bc9303920d223921da4750654" translate="yes" xml:space="preserve">
          <source>Logging and tracing output:</source>
          <target state="translated">로깅 및 추적 출력 :</target>
        </trans-unit>
        <trans-unit id="00e191c31700f3bf1c093fd102f688b4a25c5913" translate="yes" xml:space="preserve">
          <source>Module-level functions may also be traced using this decorator.</source>
          <target state="translated">이 데코레이터를 사용하여 모듈 수준 함수를 추적 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4d8420fc64e6556b9a9e153ff6123d849cb6db0" translate="yes" xml:space="preserve">
          <source>Python modules that make use of Autologging are cleaner, leaner, and
more resilient to changes that would otherwise require updating tracing
statements.</source>
          <target state="translated">Autologging을 사용하는 Python 모듈은 추적 문을 업데이트해야하는 변경 사항에 대해 더 깨끗하고 간결하며 탄력적입니다.</target>
        </trans-unit>
        <trans-unit id="aa21b6f6cb1c196fdd1a5802e24e9df1dc31d4b7" translate="yes" xml:space="preserve">
          <source>Run the test suite and install the &lt;code&gt;autologging&lt;/code&gt; module: (make sure you
have &lt;a href=&quot;https://pypi.python.org/pypi/setuptools&quot;&gt;setuptools&lt;/a&gt; installed!)</source>
          <target state="translated">테스트 스위트를 실행하고 &lt;code&gt;autologging&lt;/code&gt; 모듈을 설치하십시오 : ( 설치 &lt;a href=&quot;https://pypi.python.org/pypi/setuptools&quot;&gt;도구가&lt;/a&gt; 설치되어 있는지 확인하십시오 !)</target>
        </trans-unit>
        <trans-unit id="d39ef77de83053b1f8c24fdc0211054e4953703c" translate="yes" xml:space="preserve">
          <source>Source installation</source>
          <target state="translated">소스 설치</target>
        </trans-unit>
        <trans-unit id="a53007c7885214cc793414c4b9e60c144773d021" translate="yes" xml:space="preserve">
          <source>The easiest way to install Autologging is to use
&lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;:</source>
          <target state="translated">Autologging을 설치하는 가장 쉬운 방법은 &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt; 를 사용하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="dbe90631c99d9e4e74f61518dabb9bb383408413" translate="yes" xml:space="preserve">
          <source>Tracing may be disabled entirely by setting the
&lt;code&gt;AUTOLOGGING_TRACED_NOOP&lt;/code&gt; environment variable or by calling the
&lt;code&gt;autologging.install_traced_noop()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;AUTOLOGGING_TRACED_NOOP&lt;/code&gt; 환경 변수 를 설정 하거나 &lt;code&gt;autologging.install_traced_noop()&lt;/code&gt; 함수를 호출하여 추적을 완전히 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ed38704948bd01cf801923ea8f4725184bc8f85a" translate="yes" xml:space="preserve">
          <source>What's in the &lt;code&gt;autologging&lt;/code&gt; namespace?</source>
          <target state="translated">&lt;code&gt;autologging&lt;/code&gt; 네임 스페이스 에는 무엇이 있습니까?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
