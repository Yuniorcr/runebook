<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/bw2calc/">
    <body>
      <group id="bw2calc">
        <trans-unit id="da39a3ee5e6b4b0d3255bfef95601890afd80709" translate="yes" xml:space="preserve">
          <source/>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17606854f8ce660a9f509844c5e509fece88dd97" translate="yes" xml:space="preserve">
          <source>The Monte Carlo LCA class can do about 30 iterations a second (on a 2011 MacBook Pro). Instead of doing LU factorization, it uses an initial guess and the conjugant gradient squared algorithm.</source>
          <target state="translated">Monte Carlo LCA 클래스는 초당 약 30 회 반복을 수행 할 수 있습니다 (2011 MacBook Pro에서). LU 분해를 수행하는 대신 초기 추측과 공액 기울기 제곱 알고리즘을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9410b1ac58a0f5e490df4f25684985c7393b5724" translate="yes" xml:space="preserve">
          <source>The emphasis here has been on speed of solving the linear systems, for normal LCA calculations, graph traversal, or Monte Carlo uncertainty analysis.</source>
          <target state="translated">여기서 강조된 부분은 일반 LCA 계산, 그래프 순회 또는 몬테카를로 불확실성 분석을위한 선형 시스템 해결 속도입니다.</target>
        </trans-unit>
        <trans-unit id="332470e3d7c0885ab730cc99c4edcf51a6098458" translate="yes" xml:space="preserve">
          <source>The multiprocessing Monte Carlo class (ParallelMonteCarlo) can do about 100 iterations a second, using 7 virtual cores. The MultiMonteCarlo class, which does Monte Carlo for many processes (and hence can re-use the factorized technosphere matrix), can do about 500 iterations a second, using 7 virtual cores. Both these algorithms perform best when the initial setup for each worker job is minimized, e.g. by dispatching big chunks.</source>
          <target state="translated">다중 처리 Monte Carlo 클래스 (ParallelMonteCarlo)는 7 개의 가상 코어를 사용하여 초당 약 100 회 반복을 수행 할 수 있습니다. 여러 프로세스에 대해 Monte Carlo를 수행하는 MultiMonteCarlo 클래스는 7 개의 가상 코어를 사용하여 초당 약 500 회 반복을 수행 할 수 있습니다. 이 두 알고리즘 모두 각 작업자 작업에 대한 초기 설정이 최소화 될 때 가장 잘 수행됩니다 (예 : 큰 청크 디스패치).</target>
        </trans-unit>
        <trans-unit id="e8fa0c2541b4ff41005026981fb88a842d263ff3" translate="yes" xml:space="preserve">
          <source>This package provides the calculation engine for the &lt;a href=&quot;https://brightwaylca.org&quot;&gt;Brightway2 life cycle assessment framework&lt;/a&gt;. &lt;a href=&quot;https://docs.brightwaylca.org/&quot;&gt;Online documentation&lt;/a&gt; is available, and the source code is hosted on &lt;a href=&quot;https://bitbucket.org/cmutel/brightway2-calc&quot;&gt;Bitucket&lt;/a&gt;.</source>
          <target state="translated">이 패키지는 &lt;a href=&quot;https://brightwaylca.org&quot;&gt;Brightway2 수명주기 평가 프레임 워크를&lt;/a&gt; 위한 계산 엔진을 제공합니다 . &lt;a href=&quot;https://docs.brightwaylca.org/&quot;&gt;온라인 문서&lt;/a&gt; 를 사용할 수 있으며 소스 코드는 &lt;a href=&quot;https://bitbucket.org/cmutel/brightway2-calc&quot;&gt;Bitucket에서&lt;/a&gt; 호스팅됩니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
