<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/autocontainer/">
    <body>
      <group id="autocontainer">
        <trans-unit id="4c98d4e98a86e991d8022304eb25e6a25c578c2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get(service: Union[Type, str])&lt;/code&gt;
Retreives a service</source>
          <target state="translated">&lt;code&gt;get(service: Union[Type, str])&lt;/code&gt; 서비스를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="19574b02d697202320c2a60810f5cacad3f3ba50" translate="yes" xml:space="preserve">
          <source>A modern typing based service container and dependency injector.</source>
          <target state="translated">현대적인 타이핑 기반 서비스 컨테이너 및 종속성 주입기.</target>
        </trans-unit>
        <trans-unit id="100390f241bf02a46cd8fe06ea6e800d7565b1b9" translate="yes" xml:space="preserve">
          <source>Adds a service as a factory into container.
(Returns a fresh object on every &lt;code&gt;get&lt;/code&gt;)</source>
          <target state="translated">컨테이너에 공장으로 서비스를 추가합니다. ( &lt;code&gt;get&lt;/code&gt; 때마다 새로운 개체를 반환합니다 )</target>
        </trans-unit>
        <trans-unit id="aa8ca693344748fd45c4fd295aec26ecb312d078" translate="yes" xml:space="preserve">
          <source>Adds a service as a singleton into container.
(Returns the same object on every &lt;code&gt;get&lt;/code&gt;)</source>
          <target state="translated">컨테이너에 서비스를 싱글 톤으로 추가합니다. (모든 &lt;code&gt;get&lt;/code&gt; 에서 동일한 객체를 반환합니다 )</target>
        </trans-unit>
        <trans-unit id="83b1f3271fc288cf67b2a2381c6aec2464b5583f" translate="yes" xml:space="preserve">
          <source>Adds a service as an instance into container.
(Returns the same object on every &lt;code&gt;get&lt;/code&gt;, but does not try to instantiate)</source>
          <target state="translated">컨테이너에 서비스를 인스턴스로 추가합니다. (모든 &lt;code&gt;get&lt;/code&gt; 에서 동일한 객체를 반환 하지만 인스턴스화를 시도하지는 않습니다.)</target>
        </trans-unit>
        <trans-unit id="9f7a1567f69d4bcb8dc6f8dfcf488d4e69212435" translate="yes" xml:space="preserve">
          <source>Adds a service such that on every get, the container returns a &lt;em&gt;bound&lt;/em&gt; callable
that produces a fresh object everytime.</source>
          <target state="translated">모든 get에서 컨테이너가 매번 새로운 객체를 생성하는 &lt;em&gt;바인딩 된&lt;/em&gt; 콜 러블을 반환하도록 서비스를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="a68e86efcf91af5f0201435629f9c11f93316de3" translate="yes" xml:space="preserve">
          <source>Assembler</source>
          <target state="translated">어셈블러</target>
        </trans-unit>
        <trans-unit id="d9d0ec02ca4a63d7d272ffe6f48792edaaf70451" translate="yes" xml:space="preserve">
          <source>AutoContainer</source>
          <target state="translated">AutoContainer</target>
        </trans-unit>
        <trans-unit id="ce46a70ccafcb1a42a5cc7b7e4e2fec95b437985" translate="yes" xml:space="preserve">
          <source>Automatic Injection</source>
          <target state="translated">자동 주입</target>
        </trans-unit>
        <trans-unit id="1bfa1a6b8147fd64b8502ed64be5e62871a13357" translate="yes" xml:space="preserve">
          <source>Available Methods</source>
          <target state="translated">사용 가능한 방법</target>
        </trans-unit>
        <trans-unit id="7f0043e684cc2e548822e45bee14ea4c4673e262" translate="yes" xml:space="preserve">
          <source>Binding</source>
          <target state="translated">제본</target>
        </trans-unit>
        <trans-unit id="59650644c0f20b4e67492c7142029fd1cb3885b8" translate="yes" xml:space="preserve">
          <source>Builder Functions</source>
          <target state="translated">빌더 기능</target>
        </trans-unit>
        <trans-unit id="2503047ff44b078c720abc04af967a97a871d00a" translate="yes" xml:space="preserve">
          <source>Classes &amp;amp; Injection</source>
          <target state="translated">수업 및 주입</target>
        </trans-unit>
        <trans-unit id="8962663fef4e072a9b376c9c62bab6ec109c7513" translate="yes" xml:space="preserve">
          <source>Container Bound Functions</source>
          <target state="translated">컨테이너 바운드 함수</target>
        </trans-unit>
        <trans-unit id="3e87fc989e1193a3d6ca244b02919b6518cbc627" translate="yes" xml:space="preserve">
          <source>Dependency Graph</source>
          <target state="translated">의존성 그래프</target>
        </trans-unit>
        <trans-unit id="9b3dd67444009142fb95623dd9463420612151b1" translate="yes" xml:space="preserve">
          <source>Direct class as service</source>
          <target state="translated">서비스로서의 직접적인 클래스</target>
        </trans-unit>
        <trans-unit id="9255e319c0b5bf1a0f5f33be196061e08a6a3e00" translate="yes" xml:space="preserve">
          <source>Factories can also take builder function as well as classes.
The container returns a new instance every time.</source>
          <target state="translated">공장은 또한 빌더 기능과 클래스를 취할 수 있습니다. 컨테이너는 매번 새 인스턴스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e47b9b1021034a56b7d5f70d92d0481524e78f69" translate="yes" xml:space="preserve">
          <source>Factory</source>
          <target state="translated">공장</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">풍모</target>
        </trans-unit>
        <trans-unit id="7f50e5a520e9fea7407ff38823f1e869af3dff9b" translate="yes" xml:space="preserve">
          <source>Hinting by Name</source>
          <target state="translated">이름으로 힌트</target>
        </trans-unit>
        <trans-unit id="4c8e799472d12dd383a2305aa967b89538a106ab" translate="yes" xml:space="preserve">
          <source>Inject typehint by name</source>
          <target state="translated">이름으로 typehint 삽입</target>
        </trans-unit>
        <trans-unit id="502b19758fdffbe23438a8b5f7927c37aedab82e" translate="yes" xml:space="preserve">
          <source>Injecting</source>
          <target state="translated">주입</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="5f97f8775628e86310829ab9e8c465258ab92a5e" translate="yes" xml:space="preserve">
          <source>Instance</source>
          <target state="translated">예</target>
        </trans-unit>
        <trans-unit id="9f23f7845e513b55774eeec14f78b62de60cc52f" translate="yes" xml:space="preserve">
          <source>It's all about types and hints, but first create the container</source>
          <target state="translated">유형과 힌트에 관한 것이지만 먼저 컨테이너를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="16c2963da26b412e73fa5dfa643351739a2a5586" translate="yes" xml:space="preserve">
          <source>MIT. Go crazy.</source>
          <target state="translated">MIT. 미치다.</target>
        </trans-unit>
        <trans-unit id="0db7bc88f4910ed9a81a95cb74e497a491f35e73" translate="yes" xml:space="preserve">
          <source>Naming Services</source>
          <target state="translated">이름 지정 서비스</target>
        </trans-unit>
        <trans-unit id="bee8bb0db76fd4c4a0db02c96f6e20d159941179" translate="yes" xml:space="preserve">
          <source>Other ways to &lt;code&gt;get&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 다른 방법</target>
        </trans-unit>
        <trans-unit id="cdcc09ac2104754c1cda7d86f3d6e6c5fd9b375f" translate="yes" xml:space="preserve">
          <source>Primitive types by name</source>
          <target state="translated">이름 별 기본 유형</target>
        </trans-unit>
        <trans-unit id="e4b9eac34cf85f155cf34748d6e80531d30ee3d4" translate="yes" xml:space="preserve">
          <source>Python &amp;gt;= 3.5</source>
          <target state="translated">Python&amp;gt; = 3.5</target>
        </trans-unit>
        <trans-unit id="bef739a23c16e66aadd77f17bf301ea2b3bc5b0e" translate="yes" xml:space="preserve">
          <source>Python really needed a modern reflection based dependency injection container
that &quot;just works&quot;. Alas, welcome to &lt;strong&gt;AutoContainer&lt;/strong&gt; for python. The dependency injection service contaienr that just works.</source>
          <target state="translated">파이썬은 정말로 &quot;그냥 작동하는&quot;현대적인 리플렉션 기반 의존성 주입 컨테이너가 필요했습니다. 아아, Python 용 &lt;strong&gt;AutoContainer&lt;/strong&gt; 에 오신 것을 환영합니다 . 그냥 작동하는 의존성 주입 서비스 contaienr.</target>
        </trans-unit>
        <trans-unit id="475ffa14014bb463965306813410e4afd01a7039" translate="yes" xml:space="preserve">
          <source>Requirements:</source>
          <target state="translated">요구 사항 :</target>
        </trans-unit>
        <trans-unit id="eaba6e5fbbe8335c9c86d11b808ca387fdca97be" translate="yes" xml:space="preserve">
          <source>Returns a new callable but in which the arguments recognized by the container
are automatically pushed when calling. (see examples below)</source>
          <target state="translated">새 콜 러블을 반환하지만 컨테이너가 인식 한 인수는 호출시 자동으로 푸시됩니다. (아래 예 참조)</target>
        </trans-unit>
        <trans-unit id="c9aa321c2939e2d2c77570e48bf36f89820fb587" translate="yes" xml:space="preserve">
          <source>Returns if a service exists</source>
          <target state="translated">서비스가있는 경우 반환</target>
        </trans-unit>
        <trans-unit id="7ec9eede60ad8e8637510a86e616531533ada02f" translate="yes" xml:space="preserve">
          <source>Running Tests</source>
          <target state="translated">테스트 실행</target>
        </trans-unit>
        <trans-unit id="cc255c518c4e87fcc94c9f0beaae9001eee9b85f" translate="yes" xml:space="preserve">
          <source>Same as binding but for simpler times.</source>
          <target state="translated">바인딩과 동일하지만 더 간단합니다.</target>
        </trans-unit>
        <trans-unit id="8d69a8f65e2f4282daff8ab22169283de3d06646" translate="yes" xml:space="preserve">
          <source>Separate provider functions</source>
          <target state="translated">별도의 공급자 기능</target>
        </trans-unit>
        <trans-unit id="77f93147a8c31f95469a3d9d42193df31dcbfb3f" translate="yes" xml:space="preserve">
          <source>Service Behaviors:</source>
          <target state="translated">서비스 행동 :</target>
        </trans-unit>
        <trans-unit id="2317a12e7ff451b4efb42190472c14319c7f382f" translate="yes" xml:space="preserve">
          <source>Service registration checking</source>
          <target state="translated">서비스 등록 확인</target>
        </trans-unit>
        <trans-unit id="39892ce8d343b16aa782fc0cc427d7c5ce4bcd1d" translate="yes" xml:space="preserve">
          <source>Singleton</source>
          <target state="translated">하나씩 일어나는 것</target>
        </trans-unit>
        <trans-unit id="2b0ce4cec651a5ef5f0560d36f0e86c2e999cdd2" translate="yes" xml:space="preserve">
          <source>Specificity Injector</source>
          <target state="translated">특이성 주입기</target>
        </trans-unit>
        <trans-unit id="784eed6f8a30eaf3ac67025952934b7d43a5739a" translate="yes" xml:space="preserve">
          <source>Takes a callable and calls it by injecting all the services it requires
and then returns the return value.</source>
          <target state="translated">콜 러블을 취하고 필요한 모든 서비스를 주입하여 호출 한 다음 반환 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="473371afc97dcca4a9f312ff413cf23538ea9878" translate="yes" xml:space="preserve">
          <source>The container maintains an internal graph of dependencies that allows
it to efficiently push instances of ancestor classes.</source>
          <target state="translated">컨테이너는 상위 클래스의 인스턴스를 효율적으로 푸시 할 수 있도록 내부 종속성 그래프를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="a73ae1f9de2c4426e0493d08f34bd492ee68f9fe" translate="yes" xml:space="preserve">
          <source>This is completely valid with the container</source>
          <target state="translated">이것은 컨테이너에서 완전히 유효합니다.</target>
        </trans-unit>
        <trans-unit id="7dc67de8c2837ec1b53727500273585952bf6e50" translate="yes" xml:space="preserve">
          <source>This is the coolest feature, trust me. Imagine you have a function
that needs both classes out of a container and vanilla arguments
like int and str, this would be a pain to do manually. Unless...</source>
          <target state="translated">이것이 가장 멋진 기능입니다. 저를 믿으세요. 컨테이너에서 클래스와 int 및 str과 같은 바닐라 인수를 모두 필요로하는 함수가 있다고 가정 해보십시오. 이것은 수동으로 수행하는 것이 어려울 것입니다. 그렇지 않으면 ...</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="13ae40652381b8d9bbb58288e9ea5b4dcc99d29b" translate="yes" xml:space="preserve">
          <source>We'll use singleton as an example.</source>
          <target state="translated">싱글 톤을 예로 사용하겠습니다.</target>
        </trans-unit>
        <trans-unit id="7d4b6a71a926f8043e3749a59cbf4866dd0b5a76" translate="yes" xml:space="preserve">
          <source>You won't always put raw classes into the service container
sometimes, it's necessary to write a function that custom
initializes a class or object.</source>
          <target state="translated">때때로 원시 클래스를 서비스 컨테이너에 넣지 않을 수도 있습니다. 클래스 또는 객체를 사용자 정의하는 함수를 작성해야합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
