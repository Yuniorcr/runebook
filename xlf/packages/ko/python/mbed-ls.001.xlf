<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/mbed-ls/">
    <body>
      <group id="mbed-ls">
        <trans-unit id="27069c4e704d4c4ceb6ebeac64720d6d6112e85d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FSInteraction.BeforeFilter&lt;/code&gt; - This accesses the file system before doing any filtering. It is the most accurate option and is recommended for most uses. This is the default behavior of the command-line tool and the API.</source>
          <target state="translated">&lt;code&gt;FSInteraction.BeforeFilter&lt;/code&gt; - 필터링을 수행하기 전에 파일 시스템에 액세스합니다. 가장 정확한 옵션이며 대부분의 용도에 권장됩니다. 이것은 명령 줄 도구 및 API의 기본 동작입니다.</target>
        </trans-unit>
        <trans-unit id="444e7b8fe6ec41eb1dbb9b4fbf899037cdacf6b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FSInteraction.NEVER&lt;/code&gt; - This is the fastest option but also potentially the least accurate. It never touches the file system of the devices. It uses only the information available through the USB descriptors. This is appropriate for use in a highly controlled environment (such as an automated Continuous Integration setup). &lt;strong&gt;This has the potential to provide incorrect names and data. It may also lead to devices not being detected at all.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;FSInteraction.NEVER&lt;/code&gt; - 가장 빠른 옵션이지만 잠재적으로 정확도가 가장 낮습니다 . 장치의 파일 시스템에는 영향을주지 않습니다. USB 디스크립터를 통해 사용 가능한 정보 만 사용합니다. 이는 고도로 통제 된 환경 (예 : 자동화 된 지속적 통합 설정)에서 사용하기에 적합합니다. &lt;strong&gt;이것은 잘못된 이름과 데이터를 제공 할 가능성이 있습니다. 또한 장치가 전혀 감지되지 않을 수도 있습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9acc57a9aa98aacb8a3d0754e9ce20ea97ba658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FSInterfaction.AfterFilter&lt;/code&gt; - This accesses the file system but only after application of the &lt;code&gt;filter_function&lt;/code&gt;. This can lead to speed increases but at the risk of filtering on inaccurate information.</source>
          <target state="translated">&lt;code&gt;FSInterfaction.AfterFilter&lt;/code&gt; - 파일 시스템에 액세스하지만 &lt;code&gt;filter_function&lt;/code&gt; 을 적용한 후에 만 가능합니다 . 이로 인해 속도가 빨라질 수 있지만 부정확 한 정보를 필터링 할 위험이 있습니다.</target>
        </trans-unit>
        <trans-unit id="da8679b923167eb816a849dda787dd29c1cfa5a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default:&lt;/strong&gt;&lt;code&gt;'+'&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;기본값 : &lt;/strong&gt; &lt;code&gt;'+'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64cad439d8fc41ba703f369df90f4dc2a73b92da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default:&lt;/strong&gt;&lt;code&gt;'daplink'&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;기본값 : &lt;/strong&gt; &lt;code&gt;'daplink'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a081a9ca83b30fd62287bf46536a662e6b830d68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default:&lt;/strong&gt;&lt;code&gt;FSInteraction.BeforeFilter&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;기본값 : &lt;/strong&gt; &lt;code&gt;FSInteraction.BeforeFilter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c89ef4e3ddfa81047ca81999094467a19a3a48b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default:&lt;/strong&gt;&lt;code&gt;False&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;기본값 : &lt;/strong&gt; &lt;code&gt;False&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1af24f2c81df6856d9fa1eb5559a82f98a9df0b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default:&lt;/strong&gt;&lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;기본값 : &lt;/strong&gt; &lt;code&gt;False&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ed55f4be49dfe64c5ede41c611d0a82a13aad4b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default:&lt;/strong&gt;&lt;code&gt;None&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;기본값 : &lt;/strong&gt; &lt;code&gt;None&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8ae5dad53f0a152b6a932beeb51c97886190a507" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; Due to a quirk in the parameter formatting, the command-line can interpret &lt;code&gt;-*&lt;/code&gt; as another parameter instead of a value. It is necessary to use the complete &lt;code&gt;--mock=&quot;-*&quot;&lt;/code&gt; syntax, so the command-line interprets each part of the command correctly.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 매개 변수 형식의 특성 때문에 명령 줄은 &lt;code&gt;-*&lt;/code&gt; 를 값 대신 다른 매개 변수로 해석 할 수 있습니다 . 완전한 &lt;code&gt;--mock=&quot;-*&quot;&lt;/code&gt; 구문 을 사용해야 하므로 명령 줄이 명령의 각 부분을 올바르게 해석합니다.</target>
        </trans-unit>
        <trans-unit id="941ebbbfd0e1b6910a3291098be93386444118d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If your OS is Windows, please follow the installation instructions &lt;a href=&quot;https://os.mbed.com/docs/latest/tutorials/windows-serial-driver.html&quot;&gt;for the serial port driver&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; OS가 Windows 인 &lt;a href=&quot;https://os.mbed.com/docs/latest/tutorials/windows-serial-driver.html&quot;&gt;경우 직렬 포트 드라이버&lt;/a&gt; 의 설치 지침 을 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="4f0d9ba7746d1c70a55dbd3921863feb059dc741" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;https://github.com/armmbed/mbed-cli&quot;&gt;Mbed CLI&lt;/a&gt; has a similarly-named command &lt;code&gt;mbed ls&lt;/code&gt;; however, the commands are different. Be sure to omit the space when using the Mbed LS command-line tool.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;a href=&quot;https://github.com/armmbed/mbed-cli&quot;&gt;Mbed CLI&lt;/a&gt; 에는 비슷한 이름의 &lt;code&gt;mbed ls&lt;/code&gt; 명령이 있습니다 . 그러나 명령은 다릅니다. Mbed LS 명령 줄 도구를 사용할 때는 공백을 생략해야합니다.</target>
        </trans-unit>
        <trans-unit id="b511e0ce6ffd2d321b491362f76847958e4e2c24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prerequisites:&lt;/strong&gt; You need to have &lt;a href=&quot;https://www.python.org/download/releases/2.7/&quot;&gt;Python 2.7.x&lt;/a&gt; or &lt;a href=&quot;https://www.python.org/downloads/release/python-362/&quot;&gt;Python 3.6.x&lt;/a&gt; installed on your system.</source>
          <target state="translated">&lt;strong&gt;전제 조건 :&lt;/strong&gt; 당신이 필요 &lt;a href=&quot;https://www.python.org/download/releases/2.7/&quot;&gt;파이썬 2.7.x&lt;/a&gt; 또는 &lt;a href=&quot;https://www.python.org/downloads/release/python-362/&quot;&gt;파이썬 3.6.x를이&lt;/a&gt; 시스템에 설치되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="e3ed2432385bb9a98a9273181e00a11af363e8ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Required&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;필수&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c2fdad86254cfddc9b35e908ef4a64b758483f0" translate="yes" xml:space="preserve">
          <source>A link to the J-Link firmware binary if possible</source>
          <target state="translated">가능한 경우 J-Link 펌웨어 바이너리에 대한 링크</target>
        </trans-unit>
        <trans-unit id="aab00ca8d0c26dd7535a9026f8513a0e77d843c1" translate="yes" xml:space="preserve">
          <source>Add an entry to the &lt;code&gt;daplink&lt;/code&gt; section of the &lt;a href=&quot;../../src/mbed_os_tools/detect/platform_database.py&quot;&gt;&lt;code&gt;DEFAULT_PLATFORM_DB&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../src/mbed_os_tools/detect/platform_database.py&quot;&gt; &lt;code&gt;DEFAULT_PLATFORM_DB&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;daplink&lt;/code&gt; 섹션에 항목을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed6c75c3a55a6dafe9ebe34e7678f37141a965b3" translate="yes" xml:space="preserve">
          <source>Adding a new platform with a supported debugger</source>
          <target state="translated">지원되는 디버거로 새 플랫폼 추가</target>
        </trans-unit>
        <trans-unit id="9d7df9739bfb3d55bc0ebcfd56102b0c11b34c05" translate="yes" xml:space="preserve">
          <source>Adding a new type of debugger</source>
          <target state="translated">새로운 유형의 디버거 추가</target>
        </trans-unit>
        <trans-unit id="ba4df3d379fbf1a210503ae0c74ea45965c23c40" translate="yes" xml:space="preserve">
          <source>Adding platform support</source>
          <target state="translated">플랫폼 지원 추가</target>
        </trans-unit>
        <trans-unit id="384e57a72eddded96d201977f863c09c8dee4e21" translate="yes" xml:space="preserve">
          <source>Adding support for DAPLink-compatible platforms (DAPLink, ST-LINK, and CMSIS-DAP)</source>
          <target state="translated">DAPLink 호환 플랫폼 (DAPLink, ST-LINK 및 CMSIS-DAP)에 대한 지원 추가</target>
        </trans-unit>
        <trans-unit id="cf6398cb90d6ed5f321099c5fc109a060e7b7e26" translate="yes" xml:space="preserve">
          <source>Adding support for J-Link platforms</source>
          <target state="translated">J-Link 플랫폼에 대한 지원 추가</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">인수</target>
        </trans-unit>
        <trans-unit id="7505721212c47b50446c6adefda7e0c45840626e" translate="yes" xml:space="preserve">
          <source>As a lambda function:</source>
          <target state="translated">람다 함수 :</target>
        </trans-unit>
        <trans-unit id="d3860a6a335daabd593293e6f04310b5340c11a0" translate="yes" xml:space="preserve">
          <source>As a normal function definition:</source>
          <target state="translated">일반적인 기능 정의 :</target>
        </trans-unit>
        <trans-unit id="ed61cd463f1c3c6f7ce5e0ecdec6720fb01e1e21" translate="yes" xml:space="preserve">
          <source>As well as the related but legacy &lt;a href=&quot;https://github.com/mbedmicro/CMSIS-DAP&quot;&gt;CMSIS-DAP&lt;/a&gt; firmware</source>
          <target state="translated">관련이 있지만 레거시 &lt;a href=&quot;https://github.com/mbedmicro/CMSIS-DAP&quot;&gt;CMSIS-DAP&lt;/a&gt; 펌웨어</target>
        </trans-unit>
        <trans-unit id="3ae03f42cf8b6df3c634810cda895f3bede0fd1a" translate="yes" xml:space="preserve">
          <source>Chooses which device type entries are retrieved from the platform database.</source>
          <target state="translated">플랫폼 데이터베이스에서 검색되는 장치 유형 항목을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="b574f2e6be67e57c80811b8a2d243201fea30187" translate="yes" xml:space="preserve">
          <source>Code coverage</source>
          <target state="translated">코드 커버리지</target>
        </trans-unit>
        <trans-unit id="48808a0068ecad9365b667728617fc992cbdc5ea" translate="yes" xml:space="preserve">
          <source>Command-line</source>
          <target state="translated">명령 줄</target>
        </trans-unit>
        <trans-unit id="ffd7c5b20d9366e0a2a2cdb3f0847ed14585052e" translate="yes" xml:space="preserve">
          <source>DAPLink</source>
          <target state="translated">DAPLink</target>
        </trans-unit>
        <trans-unit id="a8c5a3b94826af621da5a375d345ece1f610fcc9" translate="yes" xml:space="preserve">
          <source>Development moved</source>
          <target state="translated">개발 이동</target>
        </trans-unit>
        <trans-unit id="c222a7bb9ac91eb0efc6dfad1873ac9f664d98a6" translate="yes" xml:space="preserve">
          <source>Device unique identifier</source>
          <target state="translated">장치 고유 식별자</target>
        </trans-unit>
        <trans-unit id="065c4a219ca6bba31819c269b0328aed07cf9abd" translate="yes" xml:space="preserve">
          <source>Each device must have a unique identifier. This identifier has two parts: a &lt;strong&gt;platform ID&lt;/strong&gt; and a &lt;strong&gt;platform unique string&lt;/strong&gt;.</source>
          <target state="translated">각 장치에는 고유 한 식별자가 있어야합니다. 이 식별자는 &lt;strong&gt;플랫폼 ID&lt;/strong&gt; 와 &lt;strong&gt;플랫폼 고유 문자열의&lt;/strong&gt; 두 부분으로 구성 됩니다.</target>
        </trans-unit>
        <trans-unit id="3489538eb14b2a12d05635ddbb70d67e376e53e6" translate="yes" xml:space="preserve">
          <source>For example, to change the &lt;code&gt;serial_port&lt;/code&gt; of the K64F with a &lt;code&gt;target_id&lt;/code&gt; of &lt;code&gt;0240000032044e4500257009997b00386781000097969900&lt;/code&gt;, the &lt;code&gt;mbedls.json&lt;/code&gt; file contains the following:</source>
          <target state="translated">예를 들어 &lt;code&gt;target_id&lt;/code&gt; 가 &lt;code&gt;0240000032044e4500257009997b00386781000097969900&lt;/code&gt; 인 K64F 의 &lt;code&gt;serial_port&lt;/code&gt; 를 변경 하려면 &lt;code&gt;mbedls.json&lt;/code&gt; 파일에 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="78ce0e22bc4db13d8d2ed3f085f34853e27277c5" translate="yes" xml:space="preserve">
          <source>If a new type of debugger is being introduced to Mbed LS with the platform, you will need to add the Vendor ID to the &lt;a href=&quot;../../src/mbed_os_tools/detect/lstools_base.py&quot;&gt;identification map&lt;/a&gt;. You will also need to assign the correct &quot;update from the filesystem&quot; logic &lt;a href=&quot;../../src/mbed_os_tools/detect/lstools_base.py&quot;&gt;here&lt;/a&gt;. If the debugger is compatible with the files presented by DAPLink, you may reuse that implementation when updating the device information from the filesystem. If it is not, you may need to write your own update logic. If you need guidance on this, please ask for it when you submit an issue or a pull request.</source>
          <target state="translated">새로운 유형의 디버거가 플랫폼과 함께 Mbed LS에 도입되는 경우 공급 업체 ID를 &lt;a href=&quot;../../src/mbed_os_tools/detect/lstools_base.py&quot;&gt;식별 맵&lt;/a&gt; 에 추가해야합니다 . 또한 &lt;a href=&quot;../../src/mbed_os_tools/detect/lstools_base.py&quot;&gt;여기&lt;/a&gt; 에서 올바른 &quot;파일 시스템에서 업데이트&quot;논리를 할당해야합니다 . 디버거가 DAPLink에서 제공하는 파일과 호환되는 경우 파일 시스템에서 장치 정보를 업데이트 할 때 해당 구현을 재사용 할 수 있습니다. 그렇지 않은 경우 자체 업데이트 논리를 작성해야 할 수 있습니다. 이에 대한 지침이 필요하면 문제 또는 풀 요청을 제출할 때 요청하십시오.</target>
        </trans-unit>
        <trans-unit id="27c4db5d8360922366195f06f5df940ed4caf304" translate="yes" xml:space="preserve">
          <source>If a platform meets the Mbed Enabled technical requirements (stated above), it can be added to Mbed LS.</source>
          <target state="translated">플랫폼이 Mbed 지원 기술 요구 사항 (위에 언급)을 충족하는 경우 Mbed LS에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d92870fb590e5ccc29d8f9b455ec25715e0f433" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;'+'&lt;/code&gt;, the mocked platform is enabled. If &lt;code&gt;'-'&lt;/code&gt;, the mocked platform is disabled.</source>
          <target state="translated">&lt;code&gt;'+'&lt;/code&gt; 로 설정 하면 모의 플랫폼이 활성화됩니다. 경우 &lt;code&gt;'-'&lt;/code&gt; 는 조롱 플랫폼을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d966fec8b00dd3e6a4cdff1402946b6cbda4f643" translate="yes" xml:space="preserve">
          <source>If your J-Link platform does not follow this convention, please raise an issue with the following information:</source>
          <target state="translated">J-Link 플랫폼이이 규칙을 따르지 않는 경우 다음 정보로 문제를 제기하십시오.</target>
        </trans-unit>
        <trans-unit id="7fecaf93c27ea93376ca21270e2f3bd5338c93cf" translate="yes" xml:space="preserve">
          <source>If your platform's name is &lt;code&gt;NEW_PLATFORM&lt;/code&gt; and it has platform ID of &lt;code&gt;9999&lt;/code&gt;, the new entry should be:</source>
          <target state="translated">플랫폼 이름이 &lt;code&gt;NEW_PLATFORM&lt;/code&gt; 이고 플랫폼 ID가 &lt;code&gt;9999&lt;/code&gt; 인 경우 새 항목은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="bc92c249533ddcfe955be7b16aa51ec2df784791" translate="yes" xml:space="preserve">
          <source>Install Mbed LS from sources with the following commands:</source>
          <target state="translated">다음 명령을 사용하여 소스에서 Mbed LS를 설치합니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="96d0cf4660194fdfbac644302310f6124c5e1dc2" translate="yes" xml:space="preserve">
          <source>Installation from PyPI (Python Package Index)</source>
          <target state="translated">PyPI (Python 패키지 색인)에서 설치</target>
        </trans-unit>
        <trans-unit id="9747b78a5614166db6f72d19c44d36053023a65b" translate="yes" xml:space="preserve">
          <source>Installation from Python sources</source>
          <target state="translated">Python 소스에서 설치</target>
        </trans-unit>
        <trans-unit id="0b930968a527590e6defa86b90fec0dcafac10a4" translate="yes" xml:space="preserve">
          <source>Instead of a platform ID, there is a target-unique string (&lt;code&gt;X729475D28G&lt;/code&gt; in this case). This should correspond with the unique part of the link present in the &lt;code&gt;Board.html&lt;/code&gt; or &lt;code&gt;User Guide.html&lt;/code&gt;. This seems to vary among the platforms. In general, try following the links in each file. You want to use the url that links to a product page that references the platform. The J-Link logic in Mbed LS assumes that the url has the target-unique string on the end (after the last &lt;code&gt;/&lt;/code&gt; character). In the above example, the expected url structure would be &lt;code&gt;http://www.nordicsemi.com/X729475D28G&lt;/code&gt;.</source>
          <target state="translated">플랫폼 ID 대신 대상 고유 문자열 ( 이 경우 &lt;code&gt;X729475D28G&lt;/code&gt; )이 있습니다. 이것은 &lt;code&gt;Board.html&lt;/code&gt; 또는 &lt;code&gt;User Guide.html&lt;/code&gt; 에있는 링크의 고유 한 부분과 일치해야합니다 . 이것은 플랫폼마다 다른 것처럼 보입니다. 일반적으로 각 파일의 링크를 따라가보십시오. 플랫폼을 참조하는 제품 페이지로 연결되는 URL을 사용하려고합니다. Mbed LS의 J-Link 로직은 URL의 끝에 (마지막 &lt;code&gt;/&lt;/code&gt; 문자 뒤) 타겟 고유 문자열이 있다고 가정합니다 . 위의 예에서 예상되는 URL 구조는 &lt;code&gt;http://www.nordicsemi.com/X729475D28G&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f6f3b5c60023b4a1db5ce9388c1152a21c9485bf" translate="yes" xml:space="preserve">
          <source>It is possible to change the returned results for certain platforms depending on the current directory. This is especially useful when developing new platforms.</source>
          <target state="translated">현재 디렉토리에 따라 특정 플랫폼에 대해 반환 된 결과를 변경할 수 있습니다. 이것은 새로운 플랫폼을 개발할 때 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="39a11a364b10f19422233335ca59c833b1ecadec" translate="yes" xml:space="preserve">
          <source>It provides the following information for all connected boards in a console (terminal) output:</source>
          <target state="translated">콘솔 (터미널) 출력에 연결된 모든 보드에 대해 다음 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e1eca7b7865658734ad00ffbac2c02a03e29b290" translate="yes" xml:space="preserve">
          <source>J-Link</source>
          <target state="translated">J- 링크</target>
        </trans-unit>
        <trans-unit id="4c402e234d6a0468078fbd3d220c71f65bf8ea29" translate="yes" xml:space="preserve">
          <source>J-Link detection works differently due to the information present on the platform's filesystem. All new entries should be added to the &lt;code&gt;jlink&lt;/code&gt; section of the &lt;a href=&quot;../../src/mbed_os_tools/detect/platform_database.py&quot;&gt;&lt;code&gt;DEFAULT_PLATFORM_DB&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">J-Link 감지는 플랫폼의 파일 시스템에있는 정보로 인해 다르게 작동합니다. 모든 새 항목은 &lt;a href=&quot;../../src/mbed_os_tools/detect/platform_database.py&quot;&gt; &lt;code&gt;DEFAULT_PLATFORM_DB&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;jlink&lt;/code&gt; 섹션에 추가되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="83ad8510bbd3f22363d068e1c96f82fd0fcccd31" translate="yes" xml:space="preserve">
          <source>Linux</source>
          <target state="translated">리눅스</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">벌채 반출</target>
        </trans-unit>
        <trans-unit id="79a7aea8af1e177c03709e6e26d0881fc1d858f1" translate="yes" xml:space="preserve">
          <source>Mbed Enabled technical requirements overview</source>
          <target state="translated">Mbed 지원 기술 요구 사항 개요</target>
        </trans-unit>
        <trans-unit id="97bdccbfa44092b96f922a85c040daf6702c58f3" translate="yes" xml:space="preserve">
          <source>Mbed LS</source>
          <target state="translated">Mbed LS</target>
        </trans-unit>
        <trans-unit id="4c320a7161be83e7ba2ff5533e7b7f8786c9fa27" translate="yes" xml:space="preserve">
          <source>Mbed LS assigns a unique name to each platform when this is set to &lt;code&gt;True&lt;/code&gt;. The unique name takes the form of &lt;code&gt;K64F[0]&lt;/code&gt;, where the number between the brackets is an incrementing value. This name is accessible through the dictionary member &lt;code&gt;platform_unique_name&lt;/code&gt; in the returned platform data.</source>
          <target state="translated">Mbed LS는 이것이 &lt;code&gt;True&lt;/code&gt; 로 설정되면 각 플랫폼에 고유 한 이름을 할당합니다 . 고유 한 이름은 &lt;code&gt;K64F[0]&lt;/code&gt; 형식을 취합니다 . 여기서 대괄호 사이의 숫자는 증가하는 값입니다. 이 이름은 리턴 된 플랫폼 데이터 의 사전 멤버 &lt;code&gt;platform_unique_name&lt;/code&gt; 을 통해 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5b203fc6a3997fff6f733afa4e94c35f715f75de" translate="yes" xml:space="preserve">
          <source>Mbed LS currently supports the following types of debuggers:</source>
          <target state="translated">Mbed LS는 현재 다음 유형의 디버거를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="8379de91a7d39891bd787716503a054d122d0f3f" translate="yes" xml:space="preserve">
          <source>Mbed LS is a Python (2 and 3) module that detects and lists Mbed Enabled devices connected to the host computer. The Mbed OS team publishes Mbed LS on PyPI. It works on all major operating systems (Windows, Linux and Mac OS X).</source>
          <target state="translated">Mbed LS는 호스트 컴퓨터에 연결된 Mbed 지원 장치를 감지하고 나열하는 Python (2 및 3) 모듈입니다. Mbed OS 팀은 PyPI에 Mbed LS를 게시합니다. 모든 주요 운영 체제 (Windows, Linux 및 Mac OS X)에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="41f79d20c54e774b80047654ef5c408442ece22b" translate="yes" xml:space="preserve">
          <source>Mbed LS reads more data from the file system on each device when this is set to &lt;code&gt;True&lt;/code&gt;. It can provide useful management data but also takes more time to execute.</source>
          <target state="translated">Mbed LS는 이것이 &lt;code&gt;True&lt;/code&gt; 로 설정되면 각 장치의 파일 시스템에서 더 많은 데이터를 읽습니다 . 유용한 관리 데이터를 제공 할 수 있지만 실행하는 데 더 많은 시간이 걸립니다.</target>
        </trans-unit>
        <trans-unit id="079d098ed6b868f06d0aa6a4673cc5b9e49f56a7" translate="yes" xml:space="preserve">
          <source>Mbed LS requires you to mount a platform before it shows up in the results. Many Linux systems do not automatically mount USB devices. We recommend you use an automounter to manage this for you.</source>
          <target state="translated">Mbed LS는 결과에 표시되기 전에 플랫폼을 마운트해야합니다. 많은 Linux 시스템은 USB 장치를 자동으로 마운트하지 않습니다. 자동 마운터를 사용하여이를 관리하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c27ed87aca5b063909135a22ac91b3bae0145721" translate="yes" xml:space="preserve">
          <source>Mbed LS uses the Python &lt;code&gt;logging&lt;/code&gt; module for all of its logging needs. Mbed LS uses the logger &lt;code&gt;&quot;mbedls&quot;&lt;/code&gt; as its root, and all other loggers start with &lt;code&gt;&quot;mbedls.&quot;&lt;/code&gt;. Configuring the Python root logger automatically redirects all of the Mbed LS logs to the configured endpoint. When using the Python API, configure logging, such as by calling &lt;code&gt;logging.basicConfig()&lt;/code&gt;.</source>
          <target state="translated">Mbed LS는 모든 로깅 요구 사항에 Python &lt;code&gt;logging&lt;/code&gt; 모듈을 사용 합니다. Mbed LS는 로거 &lt;code&gt;&quot;mbedls&quot;&lt;/code&gt; 를 루트로 사용하고 다른 모든 로거는 &quot;mbedls&quot; 로 시작 &lt;code&gt;&quot;mbedls.&quot;&lt;/code&gt; . Python 루트 로거를 구성하면 모든 Mbed LS 로그가 구성된 엔드 포인트로 자동 리디렉션됩니다. Python API를 사용하는 경우 &lt;code&gt;logging.basicConfig()&lt;/code&gt; 호출과 같이 로깅을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="be1b963ff7bc34323e988a022f055a24a329431f" translate="yes" xml:space="preserve">
          <source>Mbed OS platform name.</source>
          <target state="translated">Mbed OS 플랫폼 이름.</target>
        </trans-unit>
        <trans-unit id="c953a4cf5a580bbcfdfe4e28d784b940635670d6" translate="yes" xml:space="preserve">
          <source>Mocking (renaming) platforms</source>
          <target state="translated">플랫폼 조롱 (이름 변경)</target>
        </trans-unit>
        <trans-unit id="86340f4d997452ca0fd4d12af094a3159500e6e9" translate="yes" xml:space="preserve">
          <source>Mount point (MSD or disk).</source>
          <target state="translated">마운트 지점 (MSD 또는 디스크).</target>
        </trans-unit>
        <trans-unit id="ae86a65fcc8c3f61599a72cdc047a393506271b9" translate="yes" xml:space="preserve">
          <source>Note how both platforms share the same platform ID (&lt;code&gt;0240&lt;/code&gt;) but have a unique ending string.</source>
          <target state="translated">두 플랫폼이 동일한 플랫폼 ID ( &lt;code&gt;0240&lt;/code&gt; )를 공유 하지만 고유 한 종료 문자열을 갖는 방법에 유의하십시오 .</target>
        </trans-unit>
        <trans-unit id="bf7c1a82ea41a07e72348345441b0eb47414b50e" translate="yes" xml:space="preserve">
          <source>Note how the &lt;code&gt;serial_port&lt;/code&gt; value changed from &lt;code&gt;COM18&lt;/code&gt; to &lt;code&gt;COM99&lt;/code&gt;. Deleting the &lt;code&gt;mbedls.json&lt;/code&gt; or using the &lt;code&gt;--skip-retarget&lt;/code&gt; parameter removes these changes.</source>
          <target state="translated">&lt;code&gt;serial_port&lt;/code&gt; 값이 &lt;code&gt;COM18&lt;/code&gt; 에서 COM99 로 어떻게 변경 &lt;code&gt;COM99&lt;/code&gt; . &lt;code&gt;mbedls.json&lt;/code&gt; 을 삭제 하거나 &lt;code&gt;--skip-retarget&lt;/code&gt; 매개 변수를 사용하면 이러한 변경 사항이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="b4bb449d1f8629a27f6c14231d568113507bbfab" translate="yes" xml:space="preserve">
          <source>OS-specific behavior</source>
          <target state="translated">OS 별 동작</target>
        </trans-unit>
        <trans-unit id="6ff6a92d3d70f0cd836357bfb5bf3c3cccefbb1a" translate="yes" xml:space="preserve">
          <source>Override a platform's name using the &lt;code&gt;--mock&lt;/code&gt; parameter:</source>
          <target state="translated">&lt;code&gt;--mock&lt;/code&gt; 매개 변수를 사용하여 플랫폼 이름을 재정의합니다 .</target>
        </trans-unit>
        <trans-unit id="2e208f937e2de99c03cc02590c564dd8637f71de" translate="yes" xml:space="preserve">
          <source>Overrides the &lt;code&gt;platform_name&lt;/code&gt; for any platform with a &lt;code&gt;target_id&lt;/code&gt; that starts with &lt;code&gt;mid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mid&lt;/code&gt; 로 시작 하는 &lt;code&gt;target_id&lt;/code&gt; 로 모든 플랫폼 의 &lt;code&gt;platform_name&lt;/code&gt; 을 재정의합니다 .</target>
        </trans-unit>
        <trans-unit id="3ff7601f9ac32f6fa79aa6488bc72cfe9bb3f830" translate="yes" xml:space="preserve">
          <source>Please order the entries by the platform ID when adding new platforms.</source>
          <target state="translated">새 플랫폼을 추가 할 때 플랫폼 ID로 항목을 주문하십시오.</target>
        </trans-unit>
        <trans-unit id="0711b02500c16372db7e037b0db241051fe28013" translate="yes" xml:space="preserve">
          <source>Python API</source>
          <target state="translated">파이썬 API</target>
        </trans-unit>
        <trans-unit id="c72d26b6da860988583472365adff7ded0de3426" translate="yes" xml:space="preserve">
          <source>Result formats</source>
          <target state="translated">결과 형식</target>
        </trans-unit>
        <trans-unit id="1a4dc4f6d88706f6a8e12bd1988584a776d0671f" translate="yes" xml:space="preserve">
          <source>Retargeting platforms</source>
          <target state="translated">리 타게팅 플랫폼</target>
        </trans-unit>
        <trans-unit id="cb9874e294257c0603a7adc3aee1addb709433bf" translate="yes" xml:space="preserve">
          <source>ST-LINK</source>
          <target state="translated">ST- 링크</target>
        </trans-unit>
        <trans-unit id="8bac297d094eb652dad70929648f5aa575b2a6d1" translate="yes" xml:space="preserve">
          <source>Serial port.</source>
          <target state="translated">직렬 포트.</target>
        </trans-unit>
        <trans-unit id="c65bccc3cb6c00c92bed4233093072804a495336" translate="yes" xml:space="preserve">
          <source>Simple (no table formatting)</source>
          <target state="translated">단순 (표 서식 없음)</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">테스팅</target>
        </trans-unit>
        <trans-unit id="b4c998d6856f9776936e78445f071ceacd8defaa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--mock&lt;/code&gt; parameter accepts a platform ID and a platform name, separated by the &lt;code&gt;:&lt;/code&gt; character. The platform ID is the first 4 characters of the &lt;code&gt;target_id&lt;/code&gt;. The platform name is the name you are temporarily assigning to this platform.</source>
          <target state="translated">&lt;code&gt;--mock&lt;/code&gt; 매개 변수에 의해 분리 된 플랫폼 ID 및 플랫폼 이름 수락 &lt;code&gt;:&lt;/code&gt; 캐릭터. 플랫폼 ID는 &lt;code&gt;target_id&lt;/code&gt; 의 처음 4 자입니다 . 플랫폼 이름은이 플랫폼에 임시로 할당하는 이름입니다.</target>
        </trans-unit>
        <trans-unit id="9c4e328bbd6eacf665f9285ec8c6ddc1f48f5ada" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/test&lt;/code&gt; directory contains all tests. You can run the tests with the following command:</source>
          <target state="translated">&lt;code&gt;/test&lt;/code&gt; 디렉토리는 모든 테스트가 포함되어 있습니다. 다음 명령으로 테스트를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12bb9c80c87f6d5ee75935c0c51bf42abc08e5d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;coverage&lt;/code&gt; Python package measures code coverage. You can install it with following command:</source>
          <target state="translated">&lt;code&gt;coverage&lt;/code&gt; 파이썬 패키지 대책 코드 커버리지. 다음 명령으로 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b10dbe87adc3585561214801bc55f5caf680b7f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;platform ID&lt;/strong&gt; contains four ASCII characters containing only hexadecimal values (A-F and 0-9). This platform ID is the same for all platforms of the same type. For example, all &lt;code&gt;K64F&lt;/code&gt; platforms have a platform ID of &lt;code&gt;0240&lt;/code&gt;. &lt;code&gt;mbedls&lt;/code&gt; uses this to identify the platform.</source>
          <target state="translated">&lt;strong&gt;플랫폼 ID는&lt;/strong&gt; 단지 진수 값 (AF 및 0-9)를 포함하는 4 개 개의 ASCII 문자가 포함되어 있습니다. 이 플랫폼 ID는 동일한 유형의 모든 플랫폼에서 동일합니다. 예를 들어 모든 &lt;code&gt;K64F&lt;/code&gt; 플랫폼의 플랫폼 ID는 &lt;code&gt;0240&lt;/code&gt; 입니다. &lt;code&gt;mbedls&lt;/code&gt; 는이를 사용하여 플랫폼을 식별합니다.</target>
        </trans-unit>
        <trans-unit id="566d41300dc4280182af0f6623be1a66e8f5256e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;platform unique string&lt;/strong&gt; can be any length of characters (a-z, A-Z and 0-9) that you can use to uniquely identify platforms of the same type on the same machine. For example, two FRDM-K64F platforms attached to the same machine could have the following attributes:</source>
          <target state="translated">&lt;strong&gt;플랫폼 고유의 문자열은&lt;/strong&gt; 고유하게 동일한 시스템에서 동일한 유형의 플랫폼을 식별하는 데 사용할 수있는 모든 문자의 길이 (az, AZ 및 0-9)이 될 수 있습니다. 예를 들어, 동일한 시스템에 연결된 두 개의 FRDM-K64F 플랫폼은 다음 속성을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9248dc38683cb1d2cfe9462379c515ff9b302cb9" translate="yes" xml:space="preserve">
          <source>The Mbed LS command-line accepts a few arguments to change the format of the results. The default format is a table. You may pass &lt;code&gt;--simple&lt;/code&gt; to simplify this table format, and &lt;code&gt;--json&lt;/code&gt; to print the table as a json list of the rows.</source>
          <target state="translated">Mbed LS 명령 줄은 결과 형식을 변경하기 위해 몇 가지 인수를 허용합니다. 기본 형식은 테이블입니다. 당신은 통과 할 수 &lt;code&gt;--simple&lt;/code&gt; 이 테이블 형식을 단순화하고, &lt;code&gt;--json&lt;/code&gt; 은 행의 JSON 목록으로 표를 인쇄 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bb72899ca6b75d677eae2430cfb0d90e3908156" translate="yes" xml:space="preserve">
          <source>The Mbed serial port works by default on Mac and Linux, but Windows needs a driver. Check &lt;a href=&quot;https://os.mbed.com/docs/latest/tutorials/windows-serial-driver.html&quot;&gt;here&lt;/a&gt; for more details.</source>
          <target state="translated">Mbed 직렬 포트는 기본적으로 Mac 및 Linux에서 작동하지만 Windows에는 드라이버가 필요합니다. 자세한 내용은 &lt;a href=&quot;https://os.mbed.com/docs/latest/tutorials/windows-serial-driver.html&quot;&gt;여기&lt;/a&gt; 를 확인 하세요 .</target>
        </trans-unit>
        <trans-unit id="a6d1a26c7503b4b8881a89e5e0fc4fbd048ae9cb" translate="yes" xml:space="preserve">
          <source>The Python API is available through the &lt;code&gt;mbed_lstools&lt;/code&gt; module.</source>
          <target state="translated">Python API는 &lt;code&gt;mbed_lstools&lt;/code&gt; 모듈을 통해 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="58c258a7ec2561eedf2383e413a10a18b75b91cd" translate="yes" xml:space="preserve">
          <source>The command-line tool and Python API check the current directory for a file named &lt;code&gt;mbedls.json&lt;/code&gt;. When it is present, it overrides the returned values. The format of the &lt;code&gt;mbedls.json&lt;/code&gt; file is:</source>
          <target state="translated">명령 줄 도구와 Python API는 현재 디렉터리에서 &lt;code&gt;mbedls.json&lt;/code&gt; 이라는 파일을 확인합니다 . 존재하는 경우 반환 된 값을 재정의합니다. &lt;code&gt;mbedls.json&lt;/code&gt; 파일 의 형식 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="531606ff885001fa10465f778a6fb49d37af86f9" translate="yes" xml:space="preserve">
          <source>The command-line tool is available with the command &lt;code&gt;mbedls&lt;/code&gt;.</source>
          <target state="translated">명령 줄 도구는 &lt;code&gt;mbedls&lt;/code&gt; 명령과 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="27db96a890b1a8edd8a722b79481b5a83745d0a4" translate="yes" xml:space="preserve">
          <source>The development of Mbed LS has been moved into the &lt;a href=&quot;../../src/mbed_os_tools&quot;&gt;mbed-os-tools&lt;/a&gt; package. You can continue to use this module for legacy reasons, however all further development should be continued in the new package.</source>
          <target state="translated">Mbed LS의 개발은 mbed &lt;a href=&quot;../../src/mbed_os_tools&quot;&gt;-os-tools&lt;/a&gt; 패키지 로 이동되었습니다 . 레거시 이유로이 모듈을 계속 사용할 수 있지만 모든 추가 개발은 새 패키지에서 계속되어야합니다.</target>
        </trans-unit>
        <trans-unit id="4e5421e8ecf6b21b7824db41af9f84f9da4a0bae" translate="yes" xml:space="preserve">
          <source>The file &lt;strong&gt;names and contents&lt;/strong&gt; present on the platform's filesystem</source>
          <target state="translated">플랫폼의 파일 시스템에있는 파일 &lt;strong&gt;이름과 내용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d49177a8e49d3f7df5dd7525d48edb64416d137" translate="yes" xml:space="preserve">
          <source>The first four characters of the &lt;code&gt;target_id&lt;/code&gt; that you want to mock.</source>
          <target state="translated">모의하려는 &lt;code&gt;target_id&lt;/code&gt; 의 처음 4 자입니다 .</target>
        </trans-unit>
        <trans-unit id="b328e0217f6fe3da6a6bd33be1a9de749b5ca25c" translate="yes" xml:space="preserve">
          <source>The following is an example &lt;code&gt;jlink&lt;/code&gt; platform entry:</source>
          <target state="translated">다음은 &lt;code&gt;jlink&lt;/code&gt; 플랫폼 항목 의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="df1ccb6914d6625c344bdfe72475d2baa2e2e5d6" translate="yes" xml:space="preserve">
          <source>The name of the platform</source>
          <target state="translated">플랫폼의 이름</target>
        </trans-unit>
        <trans-unit id="60ed4791411b63e3f43db2f08dce575b64172af8" translate="yes" xml:space="preserve">
          <source>The type of debugger present on the platform affects how it is detected. The USB Vendor ID is used to detect which type of debugger is present on the platform.</source>
          <target state="translated">플랫폼에있는 디버거 유형은 감지 방법에 영향을줍니다. USB 공급 업체 ID는 플랫폼에있는 디버거 유형을 감지하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6289959a10bfef52952cf1f15bc73820766311f0" translate="yes" xml:space="preserve">
          <source>There are many automounters available, and it is ultimately up to you to determine which is the best one for your use case. However, the &lt;code&gt;usbmount&lt;/code&gt; package on Ubuntu makes it easy to start. If you need more control over your automounter, you can build and run an open source project called &lt;a href=&quot;https://github.com/LemonBoy/ldm&quot;&gt;ldm&lt;/a&gt;.</source>
          <target state="translated">많은 자동 마운터를 사용할 수 있으며, 사용 사례에 가장 적합한 자동 마운터를 결정하는 것은 궁극적으로 사용자의 몫입니다. 그러나 Ubuntu 의 &lt;code&gt;usbmount&lt;/code&gt; 패키지를 사용하면 쉽게 시작할 수 있습니다. 자동 마운터에 대한 추가 제어가 필요한 경우 &lt;a href=&quot;https://github.com/LemonBoy/ldm&quot;&gt;ldm&lt;/a&gt; 이라는 오픈 소스 프로젝트를 빌드하고 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="95f80aa1ea6b75add11cc99024768dc27e5c5089" translate="yes" xml:space="preserve">
          <source>This argument controls the accuracy and speed of this function. There are three choices (in ascending order of accuracy and decreasing order of speed):</source>
          <target state="translated">이 인수는이 함수의 정확도와 속도를 제어합니다. 세 가지 선택 (정확도 오름차순 및 속도 감소 순서)이 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc1a9a33ee43f838188c32b218a70eb7ece0d4fa" translate="yes" xml:space="preserve">
          <source>This function allows you to filter results based on platform data. This can hasten the execution of the &lt;code&gt;list_mbeds&lt;/code&gt; function.</source>
          <target state="translated">이 기능을 사용하면 플랫폼 데이터를 기반으로 결과를 필터링 할 수 있습니다. 이로 인해 &lt;code&gt;list_mbeds&lt;/code&gt; 함수 의 실행이 빨라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2616a7fb825b0d78910a933f6e64a48ed97638fc" translate="yes" xml:space="preserve">
          <source>This results in the following output from the command-line tool:</source>
          <target state="translated">그 결과 명령 줄 도구에서 다음과 같은 출력이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="718b41fe0e6d59fb7aefd593a4beb15871ef8155" translate="yes" xml:space="preserve">
          <source>This returns an instance that provides access to the rest of the API.</source>
          <target state="translated">그러면 나머지 API에 대한 액세스를 제공하는 인스턴스가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="5f0bd6b95ba6b0d1aa4804d3b1c2d843052d543f" translate="yes" xml:space="preserve">
          <source>This tool relies on board interfaces conforming to certain standards, so it can detect platforms properly. The &lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/&quot;&gt;Mbed Enabled&lt;/a&gt; program sets these standards. Please see the &lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/mbed-enabled-program-requirements/&quot;&gt;Technical Requirements&lt;/a&gt; for more information.</source>
          <target state="translated">이 도구는 특정 표준을 준수하는 보드 인터페이스에 의존하므로 플랫폼을 올바르게 감지 할 수 있습니다. &lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/&quot;&gt;Mbed 사용&lt;/a&gt; 프로그램은 이러한 표준을 설정합니다. 자세한 내용은 &lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/mbed-enabled-program-requirements/&quot;&gt;기술 요구 사항&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ac491a738fa8d9a39630b689c1ab8d30e9fa8f43" translate="yes" xml:space="preserve">
          <source>To install Mbed LS from &lt;a href=&quot;https://pypi.python.org/pypi/mbed-ls&quot;&gt;PyPI&lt;/a&gt;, run the following command:</source>
          <target state="translated">&lt;a href=&quot;https://pypi.python.org/pypi/mbed-ls&quot;&gt;PyPI&lt;/a&gt; 에서 Mbed LS를 설치하려면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="aa90b441cbc22332ee18c74acf6a4dcb743bdc9d" translate="yes" xml:space="preserve">
          <source>To remove a mocked platform, use the &lt;code&gt;--mock&lt;/code&gt; parameter again. Continuing from the previous example, use &lt;code&gt;-&amp;lt;platform id&amp;gt;&lt;/code&gt; as the value:</source>
          <target state="translated">&lt;code&gt;--mock&lt;/code&gt; 플랫폼을 제거하려면 --mock 매개 변수를 다시 사용 하십시오. 이전 예에서 계속해서 &lt;code&gt;-&amp;lt;platform id&amp;gt;&lt;/code&gt; 를 값으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9403b0ec7a7cb4ea552d292ac82b3987260b4644" translate="yes" xml:space="preserve">
          <source>To run the tests while measuring code coverage, use the following command:</source>
          <target state="translated">코드 검사를 측정하는 동안 테스트를 실행하려면 다음 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="9331b4db422359a901cde6ec4d52d6baab1f617a" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;True&lt;/code&gt;, this includes unmounted platforms in the results. This enables the same behavior as the &lt;code&gt;-u&lt;/code&gt; command-line flag.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 로 설정 하면 결과에 마운트되지 않은 플랫폼이 포함됩니다. 이것은 &lt;code&gt;-u&lt;/code&gt; 명령 행 플래그 와 동일한 동작을 가능하게합니다 .</target>
        </trans-unit>
        <trans-unit id="a38bda969277c0a30151ab8dbdcd3e714d30808b" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;True&lt;/code&gt;, this skips the retargetting step, and the results are unmodified. This enables the same behavior as the &lt;code&gt;--skip-retarget&lt;/code&gt; command-line flag.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 로 설정 하면 대상 변경 단계를 건너 뛰고 결과가 수정되지 않습니다. 이렇게하면 &lt;code&gt;--skip-retarget&lt;/code&gt; 명령 줄 플래그 와 동일한 동작이 활성화 됩니다.</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">윈도우</target>
        </trans-unit>
        <trans-unit id="9e7e495e29027bd2f702596510aeedd3c804c67d" translate="yes" xml:space="preserve">
          <source>You can also remove all mocked platforms by supplying &lt;code&gt;*&lt;/code&gt; as the &lt;code&gt;target_id&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 를 &lt;code&gt;target_id&lt;/code&gt; 로 제공하여 모의 플랫폼을 모두 제거 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="208159282a8d50da07a95b879e7a063f68aea27d" translate="yes" xml:space="preserve">
          <source>You can then generate a report:</source>
          <target state="translated">그런 다음 보고서를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc183b059a454b327ed04b841628aff0e3c10d2a" translate="yes" xml:space="preserve">
          <source>mbed-ls is a Python module that detects and lists mbed-enabled devices connected to the host computer</source>
          <target state="translated">mbed-ls는 호스트 컴퓨터에 연결된 mbed 지원 장치를 감지하고 나열하는 Python 모듈입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
