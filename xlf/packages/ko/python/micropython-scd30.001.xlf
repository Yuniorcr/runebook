<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/micropython-scd30/">
    <body>
      <group id="micropython-scd30">
        <trans-unit id="98faa1cf3198dbed1339510338803c0545b31adb" translate="yes" xml:space="preserve">
          <source>Also note that the temperature sensor suffers from heating effects on the PCB.
When the sensor operates in 2 second interval the heating is about 3&amp;deg;C. I
usually run the sensor at 30 seconds interval and observed a heating of 2&amp;deg;C. The
offset is subtracted from the measured temperature! To set a new offset, take
the old offset into account!</source>
          <target state="translated">또한 온도 센서는 PCB에 열 효과가 있습니다. 센서가 2 초 간격으로 작동 할 때 가열은 약 3 &amp;deg; C입니다. 저는 보통 30 초 간격으로 센서를 작동시키고 2 &amp;deg; C의 가열을 관찰했습니다. 오프셋은 측정 된 온도에서 뺍니다! 새 오프셋을 설정하려면 이전 오프셋을 고려하십시오!</target>
        </trans-unit>
        <trans-unit id="a183439781f3b522cbde4ca65e96a302be70a254" translate="yes" xml:space="preserve">
          <source>Built With</source>
          <target state="translated">함께 구축</target>
        </trans-unit>
        <trans-unit id="f5ed075f00edd0132316935e88c331ca039fab0d" translate="yes" xml:space="preserve">
          <source>Calibration</source>
          <target state="translated">구경 측정</target>
        </trans-unit>
        <trans-unit id="93f537a4c1c7d2e52ea7711261e2e7100b5bf5d5" translate="yes" xml:space="preserve">
          <source>Essentially the sensor is already calibrated at factory. However, when setting a
new measurement interval recalibration might be necessary. The process is to
bring the sensor into a controlled environment (e.g. outside) and set the known
value at that environment (e.g. 400ppm). From what I understand ASC does
essentially the same, just assumes that the lowest values over a certain periode
are &quot;outside values&quot;...</source>
          <target state="translated">기본적으로 센서는 공장에서 이미 보정되어 있습니다. 그러나 새로운 측정 간격을 설정할 때 재 교정이 필요할 수 있습니다. 프로세스는 센서를 제어 된 환경 (예 : 외부)으로 가져와 해당 환경 (예 : 400ppm)에서 알려진 값을 설정하는 것입니다. 내가 이해하는 바에 따르면 ASC는 본질적으로 동일하며 특정 기간 동안 가장 낮은 값이 &quot;외부 값&quot;이라고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="904e2710786395c68f3992cd52a092b41e4beb2a" translate="yes" xml:space="preserve">
          <source>GND</source>
          <target state="translated">GND</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="7b57451164261961339b8d9d24527df5945824ae" translate="yes" xml:space="preserve">
          <source>MicroPython</source>
          <target state="translated">MicroPython</target>
        </trans-unit>
        <trans-unit id="82fb3b5755d03b44e66ce1cf821ec38e5865c866" translate="yes" xml:space="preserve">
          <source>MicroPython I2C driver for SCD30 CO2 sensor module</source>
          <target state="translated">SCD30 CO2 센서 모듈 용 MicroPython I2C 드라이버</target>
        </trans-unit>
        <trans-unit id="fc48591db573e367641af672a914c39d84711b99" translate="yes" xml:space="preserve">
          <source>MicroPython board with I2C interface</source>
          <target state="translated">I2C 인터페이스가있는 MicroPython 보드</target>
        </trans-unit>
        <trans-unit id="e24b05d68ee4bf769f748a97e424e9173025614f" translate="yes" xml:space="preserve">
          <source>Note that the CO&amp;sup2; sensor needs some time to stabilize. Therefor the sensor
should be kept powered to achieve a reasonable measurement interval (e.g. &amp;lt;5
minutes). To save power the sensors measurement inverval can be tweaked. See
also the &lt;a href=&quot;https://docs-emea.rs-online.com/webdocs/16c9/0900766b816c9dc7.pdf&quot;&gt;Low Power Mode for SCD30&lt;/a&gt;
application note.</source>
          <target state="translated">CO&amp;sup2; 센서는 안정화하는 데 약간의 시간이 필요합니다. 따라서 적절한 측정 간격 (예 : 5 분 미만)을 달성하려면 센서에 전원을 공급해야합니다. 전력을 절약하기 위해 센서 측정 간격을 조정할 수 있습니다. &lt;a href=&quot;https://docs-emea.rs-online.com/webdocs/16c9/0900766b816c9dc7.pdf&quot;&gt;SCD30&lt;/a&gt; 애플리케이션 노트를 위한 저전력 모드 도 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">전제 조건</target>
        </trans-unit>
        <trans-unit id="8ac157c1b82fee16db2fd79513339f9149c1fd45" translate="yes" xml:space="preserve">
          <source>Pyboard</source>
          <target state="translated">Pyboard</target>
        </trans-unit>
        <trans-unit id="2459694b714f7d492ab559e9640be0bb446aa18d" translate="yes" xml:space="preserve">
          <source>RX/SDA</source>
          <target state="translated">RX / SDA</target>
        </trans-unit>
        <trans-unit id="3f4d838170e5ee28a463e5c1fd28d5cb199ddb12" translate="yes" xml:space="preserve">
          <source>SCD30</source>
          <target state="translated">SCD30</target>
        </trans-unit>
        <trans-unit id="c3a9625cbae3475efc2982ed53e5b795380a8985" translate="yes" xml:space="preserve">
          <source>SCD30 Sensor Module</source>
          <target state="translated">SCD30 센서 모듈</target>
        </trans-unit>
        <trans-unit id="788207117deb97b4d13168f32271d489f49921c7" translate="yes" xml:space="preserve">
          <source>Sensirion SCD30 CO&amp;sup2; Sensor I2C driver for MicroPython</source>
          <target state="translated">MicroPython 용 Sensirion SCD30 CO&amp;sup2; 센서 I2C 드라이버</target>
        </trans-unit>
        <trans-unit id="304cbf8767a1e657842130dce4247910f413b35a" translate="yes" xml:space="preserve">
          <source>Sensirion SCD30 Sensor Module</source>
          <target state="translated">Sensirion SCD30 센서 모듈</target>
        </trans-unit>
        <trans-unit id="17b7538bffde09dbdf0b22dda8f958f4b6f5447b" translate="yes" xml:space="preserve">
          <source>Sensirion SCD30 is a CO&amp;sup2;, Humidity and Temperature sensor on a module. This is
a I2C driver written in Python 3 for MicroPython.</source>
          <target state="translated">Sensirion SCD30은 모듈의 CO&amp;sup2;, 습도 및 온도 센서입니다. 이것은 MicroPython 용 Python 3으로 작성된 I2C 드라이버입니다.</target>
        </trans-unit>
        <trans-unit id="a89bc3a71042cdd90102d3425820f270f1b55a6d" translate="yes" xml:space="preserve">
          <source>TX/SCL</source>
          <target state="translated">TX / SCL</target>
        </trans-unit>
        <trans-unit id="71952f963b5dffc14c81705ee8f1633e3f0bf05b" translate="yes" xml:space="preserve">
          <source>The CO&amp;sup2; sensor has two modes of calibration: FRC (Forced Recalibration) or ASC
(Automatic Self-Calibration). This only describes the former.</source>
          <target state="translated">CO&amp;sup2; 센서에는 FRC (강제 재 보정) 또는 ASC (자동자가 보정)의 두 가지 보정 모드가 있습니다. 이것은 전자만을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="3d05bdb6bcafc9e8ba1371a479de4dda152295ab" translate="yes" xml:space="preserve">
          <source>This example reads the measurements in a continous loop:</source>
          <target state="translated">이 예는 연속 루프에서 측정 값을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="ec0433242de9976d56d8b1f1291b633a2b83a1ce" translate="yes" xml:space="preserve">
          <source>This project is licensed under the MIT License - see the
&lt;a href=&quot;LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for details</source>
          <target state="translated">이 프로젝트는 MIT 라이선스에 따라 사용이 허가되었습니다. 자세한 내용 은 &lt;a href=&quot;LICENSE&quot;&gt;LICENSE&lt;/a&gt; 파일을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="2ab088ed29c7f19dc9dc2852c5a412c5a18d07b0" translate="yes" xml:space="preserve">
          <source>VDD</source>
          <target state="translated">VDD</target>
        </trans-unit>
        <trans-unit id="7c04d8268a536d80b28d58579243e72e880ab612" translate="yes" xml:space="preserve">
          <source>Wire the I2C bus to the I2C bus on your MicroPython board. This is an example
using the Pyboard D:</source>
          <target state="translated">I2C 버스를 MicroPython 보드의 I2C 버스에 연결합니다. 다음은 Pyboard D를 사용한 예입니다.</target>
        </trans-unit>
        <trans-unit id="233c1d63c1ce9e1a18b603079c2037d78618f827" translate="yes" xml:space="preserve">
          <source>Wiring</source>
          <target state="translated">배선</target>
        </trans-unit>
        <trans-unit id="4edb0e68551d1980872960bb3cc7527fc2a630ae" translate="yes" xml:space="preserve">
          <source>X10</source>
          <target state="translated">X10</target>
        </trans-unit>
        <trans-unit id="eb858fa8c9014020c9fb99e315ffa37e4d1bfcab" translate="yes" xml:space="preserve">
          <source>X14 (GND)</source>
          <target state="translated">X14 (GND)</target>
        </trans-unit>
        <trans-unit id="63f251ffac6cc0ebf7bd47abf4efc18c76478333" translate="yes" xml:space="preserve">
          <source>X15 (3V3)</source>
          <target state="translated">X15 (3V3)</target>
        </trans-unit>
        <trans-unit id="79b357821e99b4fe5b8f3080bbccbe68d53ba1a9" translate="yes" xml:space="preserve">
          <source>X9</source>
          <target state="translated">X9</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
