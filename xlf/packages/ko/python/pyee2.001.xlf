<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/pyee2/">
    <body>
      <group id="pyee2">
        <trans-unit id="045f283df1eb603ba43e674ba72095f5426b6c9c" translate="yes" xml:space="preserve">
          <source>A port of node.js's primus/eventemitter3 to python. Based on jfhbrook/pyee.</source>
          <target state="translated">node.js의 primus / eventemitter3을 파이썬으로 포트. jfhbrook / pyee를 기반으로합니다.</target>
        </trans-unit>
        <trans-unit id="e0dbeabba6f94d35e48e59056c741de234b1affa" translate="yes" xml:space="preserve">
          <source>Does not not emit an event when a new listener is added or removed.</source>
          <target state="translated">새 리스너가 추가되거나 제거 될 때 이벤트를 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ae70121e28e603d720350dadd59362f47afe7a30" translate="yes" xml:space="preserve">
          <source>Does not raise or emit an error event when your listener raises an error and no one is listening for the &quot;error&quot; event.
That is to say pyee2 catches all errors raised by event listeners and only emits an error if there are listeners for the &quot;error&quot; event.</source>
          <target state="translated">리스너가 오류를 발생시키고 아무도 &quot;오류&quot;이벤트를 수신하지 않는 경우 오류 이벤트를 발생 시키거나 내 보내지 않습니다. 즉, pyee2는 이벤트 리스너에 의해 발생한 모든 오류를 포착하고 &quot;error&quot;이벤트에 대한 리스너가있는 경우에만 오류를 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="77ebb299bb93d324ec969a223b79b760a3dd8d1a" translate="yes" xml:space="preserve">
          <source>Only supports function or functions that return awaitables (coroutine, future, task) as event listeners.
The test for awaitableness is done via &quot;inspect.isawaitable&quot;</source>
          <target state="translated">이벤트 리스너로 대기 가능 항목 (코 루틴, 미래, 작업)을 반환하는 함수 만 지원합니다. 대기 가능성 테스트는 &quot;inspect.isawaitable&quot;을 통해 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="860460c64463c546e952c0b21ec2926c956c899b" translate="yes" xml:space="preserve">
          <source>The only time an exception is raised from an &quot;emit&quot; function is if &lt;code&gt;EventEmitter.raising_emit&lt;/code&gt; is used to emit the event.</source>
          <target state="translated">&quot;emit&quot;함수에서 예외가 발생하는 유일한 경우는 &lt;code&gt;EventEmitter.raising_emit&lt;/code&gt; 을 사용하여 이벤트를 발생시키는 경우입니다.</target>
        </trans-unit>
        <trans-unit id="db61a790aaf3baef3633d9331f469ac29e52665a" translate="yes" xml:space="preserve">
          <source>pyee2</source>
          <target state="translated">pyee2</target>
        </trans-unit>
        <trans-unit id="2881475c820181250df60864903f2f0d1cbd2744" translate="yes" xml:space="preserve">
          <source>pyee2 is the &lt;a href=&quot;https://github.com/primus/eventemitter3&quot;&gt;primus/eventemitter3&lt;/a&gt; EventEmitter implementation ported to python with inspiration from &lt;a href=&quot;https://github.com/jfhbrook/pyee&quot;&gt;jfhbrook/pyee&lt;/a&gt;.</source>
          <target state="translated">pyee2는 &lt;a href=&quot;https://github.com/jfhbrook/pyee&quot;&gt;jfhbrook / pyee&lt;/a&gt; 에서 영감을 받아 파이썬으로 포팅 된 &lt;a href=&quot;https://github.com/primus/eventemitter3&quot;&gt;primus / eventemitter3&lt;/a&gt; EventEmitter 구현 입니다.</target>
        </trans-unit>
        <trans-unit id="50c5e1ad4be3fb2eb1ff5b7d3c0da536ce879729" translate="yes" xml:space="preserve">
          <source>pyee2:</source>
          <target state="translated">pyee2 :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
