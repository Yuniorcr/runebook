<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/mesa-geo/">
    <body>
      <group id="mesa-geo">
        <trans-unit id="95ea506b38ee872d08a6f93af7a8a63e2d23f851" translate="yes" xml:space="preserve">
          <source>Agent-based modeling (ABM) in Python 3+</source>
          <target state="translated">Python 3+의 에이전트 기반 모델링 (ABM)</target>
        </trans-unit>
        <trans-unit id="27ef550fa9b5065df5c5c330c3012dd94e01e0ec" translate="yes" xml:space="preserve">
          <source>By default the AgentCreator also sets further agent attributes from the Feature properties.</source>
          <target state="translated">기본적으로 AgentCreator는 기능 속성에서 추가 에이전트 속성도 설정합니다.</target>
        </trans-unit>
        <trans-unit id="4dbcbf31807f0ba1714d98b2f359d5f72a4c8387" translate="yes" xml:space="preserve">
          <source>First we create a &lt;code&gt;State&lt;/code&gt; Agent and a &lt;code&gt;GeoModel&lt;/code&gt;. Both should look familiar if you have worked with mesa before.</source>
          <target state="translated">먼저 &lt;code&gt;State&lt;/code&gt; Agent와 &lt;code&gt;GeoModel&lt;/code&gt; 을 생성합니다 . 이전에 메사로 작업 한 적이 있다면 둘 다 익숙해 보일 것입니다.</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="48136dddf5fa2de69f33868667ee8e35c7a68815" translate="yes" xml:space="preserve">
          <source>Going further</source>
          <target state="translated">더 나아 가기</target>
        </trans-unit>
        <trans-unit id="0c0a3cb4b1caa9609ee3219bd71d0ad954902aa5" translate="yes" xml:space="preserve">
          <source>If you work in the Jupyter Notebook your output should give you the name of the state and a visual representation of the shape.</source>
          <target state="translated">Jupyter 노트북에서 작업하는 경우 출력은 상태 이름과 모양의 시각적 표현을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="39ce44f05ac3bcf094db91edb4c611eefe5d172f" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;GeoModel&lt;/code&gt; we first create an instance of AgentCreator, where we provide the Agent class (State) and its required arguments, except shape and unique_id. We then use the &lt;code&gt;.from_GeoJSON&lt;/code&gt; function to create our agents from the shapes in the GeoJSON file. We provide the feature &quot;name&quot; as the key from which the agents get their unique_ids.
Finally, we add the agents to the GeoSpace</source>
          <target state="translated">에서 &lt;code&gt;GeoModel&lt;/code&gt; 우리는 먼저 우리가 모양과 UNIQUE_ID를 제외하고 에이전트 클래스 (주)와 필요한 인수를 제공 AgentCreator의 인스턴스를 만듭니다. 그런 다음 &lt;code&gt;.from_GeoJSON&lt;/code&gt; 함수를 사용하여 GeoJSON 파일의 모양에서 에이전트를 만듭니다. 에이전트가 고유 ID를 가져 오는 키로 기능 &quot;이름&quot;을 제공합니다. 마지막으로 에이전트를 GeoSpace에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="c326931d0629d1b21f18e19d7bef228eed4e1ed5" translate="yes" xml:space="preserve">
          <source>Let's instantiate our model and look at one of the agents:</source>
          <target state="translated">모델을 인스턴스화하고 에이전트 중 하나를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="aa016c7332ec11889efc160882b15bdc111aff4c" translate="yes" xml:space="preserve">
          <source>Let's start to do some spatial analysis. We can use usual Mesa function names to get neighboring states</source>
          <target state="translated">공간 분석을 시작하겠습니다. 일반적인 Mesa 함수 이름을 사용하여 인접 상태를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b32547c7b34de4be961a53e906749e7a157e04ba" translate="yes" xml:space="preserve">
          <source>On windows you should first use Anaconda to install some of the requirements with</source>
          <target state="translated">Windows에서는 먼저 Anaconda를 사용하여 몇 가지 요구 사항을 설치해야합니다.</target>
        </trans-unit>
        <trans-unit id="4f8f99ecb227045017ba85aaec8e2a8e28bb221a" translate="yes" xml:space="preserve">
          <source>Since mesa-geo is in early development you could also install the latest version directly from Github via</source>
          <target state="translated">mesa-geo는 초기 개발 단계이므로 Github에서 직접 최신 버전을 설치할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d46afd664f6f81e6062be02b45b89ae156c88d4" translate="yes" xml:space="preserve">
          <source>So let's get started with some shapes! We will work with &lt;a href=&quot;http://eric.clst.org/Stuff/USGeoJSON&quot;&gt;records of US states&lt;/a&gt;. We use the &lt;code&gt;requests&lt;/code&gt; library to retrieve the data, but of course you can work with local data.</source>
          <target state="translated">이제 몇 가지 모양으로 시작하겠습니다! 우리는 &lt;a href=&quot;http://eric.clst.org/Stuff/USGeoJSON&quot;&gt;미국주의 기록으로&lt;/a&gt; 작업 할 것입니다 . &lt;code&gt;requests&lt;/code&gt; 라이브러리를 사용하여 데이터를 검색하지만 물론 로컬 데이터로 작업 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4600cfe004ab3590da41e92d18f8d4b4c94f633" translate="yes" xml:space="preserve">
          <source>The unit for the distance depends on the coordinate reference system (CRS) of the GeoSpace. Since we did not specify the CRS, mesa-geo defaults to the 'Web Mercator' projection (in meters). If you want to do some serious measurements you should always set an appropriate CRS, since the accuracy of Web Mercator declines with distance from the equator.  We can achieve this by initializing the AgentCreator and the GeoSpace with the &lt;code&gt;crs&lt;/code&gt; keyword  &lt;code&gt;crs=&quot;epsg:2163&quot;&lt;/code&gt;. Mesa-geo then transforms all coordinates from the GeoJSON geographic coordinates into the set crs.</source>
          <target state="translated">거리 단위는 GeoSpace의 좌표 참조 시스템 (CRS)에 따라 다릅니다. CRS를 지정하지 않았으므로 mesa-geo는 기본적으로 'Web Mercator'투영 (미터 단위)을 사용합니다. 진지한 측정을하려면 적도에서 멀어 질수록 Web Mercator의 정확도가 떨어지기 때문에 항상 적절한 CRS를 설정해야합니다. &lt;code&gt;crs&lt;/code&gt; 키워드 &lt;code&gt;crs=&quot;epsg:2163&quot;&lt;/code&gt; 으로 AgentCreator 및 GeoSpace를 초기화하여이를 달성 할 수 있습니다 . 그런 다음 Mesa-geo는 GeoJSON 지리적 좌표의 모든 좌표를 설정된 crs로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="54e5dad8c3855cf07e1b0e1e39b24b7a2c690358" translate="yes" xml:space="preserve">
          <source>This is the first release of mesa-geo. No functionality guaranteed, bugs included.</source>
          <target state="translated">메사 지오의 첫 번째 릴리스입니다. 보장 된 기능이 없으며 버그가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a78599f9a3e0eb90b0e60667f88406b1457d05e" translate="yes" xml:space="preserve">
          <source>To add further functionality, I need feedback on which functionality is desired by users. Please post a message &lt;a href=&quot;https://groups.google.com/forum/#!topic/projectmesa-dev/qEf2XBFZYnI&quot;&gt;here&lt;/a&gt; or open an issue if you have any ideas or recommendations.</source>
          <target state="translated">더 많은 기능을 추가하려면 사용자가 원하는 기능에 대한 피드백이 필요합니다. &lt;a href=&quot;https://groups.google.com/forum/#!topic/projectmesa-dev/qEf2XBFZYnI&quot;&gt;여기&lt;/a&gt; 에 메시지를 게시 하거나 아이디어 나 권장 사항이 있으면 문제를여십시오.</target>
        </trans-unit>
        <trans-unit id="81c47b762f17ded645b7e732f66c1e741999626d" translate="yes" xml:space="preserve">
          <source>To get a deeper understanding of mesa-geo you should checkout the GeoSchelling example. It implements a Leaflet visualization which is similar to use as the CanvasGridVisualization of Mesa.</source>
          <target state="translated">mesa-geo에 대해 더 깊이 이해하려면 GeoSchelling 예제를 확인해야합니다. Mesa의 CanvasGridVisualization으로 사용하는 것과 유사한 Leaflet 시각화를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="99ff25b7020d090cd9cdb188ea60cacfd11c21b4" translate="yes" xml:space="preserve">
          <source>To get a list of all states within a certain distance you can use the following</source>
          <target state="translated">특정 거리 내의 모든 상태 목록을 얻으려면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f956276c6b976e9e091af7d42b963012d3a4d6d7" translate="yes" xml:space="preserve">
          <source>To install mesa-geo on linux or macOS run</source>
          <target state="translated">Linux 또는 macOS에 mesa-geo를 설치하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="fefab4115e562a86c0c58de9ea47e9b7935010be" translate="yes" xml:space="preserve">
          <source>You should be familiar with how &lt;a href=&quot;https://github.com/projectmesa/mesa&quot;&gt;mesa&lt;/a&gt; works.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/projectmesa/mesa&quot;&gt;메사&lt;/a&gt; 가 어떻게 작동 하는지 잘 알고 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="cb0ae5ae56a9d417cb1a9d18e8cfdbc4ea5481d3" translate="yes" xml:space="preserve">
          <source>mesa-geo - a GIS extension to Mesa Agent-Based Modeling</source>
          <target state="translated">mesa-geo-Mesa 에이전트 기반 모델링에 대한 GIS 확장</target>
        </trans-unit>
        <trans-unit id="a87505c161b91f2824718829afc67cee52c36469" translate="yes" xml:space="preserve">
          <source>mesa-geo implements a &lt;code&gt;GeoSpace&lt;/code&gt; that can host GIS-based &lt;code&gt;GeoAgents&lt;/code&gt;, which are like normal Agents, except they have a &lt;code&gt;shape&lt;/code&gt; attribute that is a &lt;a href=&quot;https://shapely.readthedocs.io/en/latest/manual.html&quot;&gt;Shapely object&lt;/a&gt;. You can use &lt;code&gt;Shapely&lt;/code&gt; directly to create arbitrary shapes, but in most cases you will want to import your shapes from a file. Mesa-geo allows you to create GeoAgents from any vector data file (e.g. shapefiles), valid GeoJSON objects or a GeoPandas GeoDataFrame.</source>
          <target state="translated">mesa-geo 는 &lt;a href=&quot;https://shapely.readthedocs.io/en/latest/manual.html&quot;&gt;Shapely 객체 인 &lt;/a&gt; &lt;code&gt;shape&lt;/code&gt; 속성이 있다는 점을 제외하고 일반 에이전트와 유사한 GIS 기반 &lt;code&gt;GeoAgents&lt;/code&gt; 호스팅 할 수 있는 &lt;code&gt;GeoSpace&lt;/code&gt; 를 구현 합니다 . &lt;code&gt;Shapely&lt;/code&gt; 를 직접 사용 하여 임의의 모양을 만들 수 있지만 대부분의 경우 파일에서 모양을 가져 오려고 할 것입니다. Mesa-geo를 사용하면 벡터 데이터 파일 (예 : shapefile), 유효한 GeoJSON 개체 또는 GeoPandas GeoDataFrame에서 GeoAgent를 만들 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
