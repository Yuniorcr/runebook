<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/multilevel-mesa/">
    <body>
      <group id="multilevel-mesa">
        <trans-unit id="c9a3ef5798f6fbb18f2688c2f8e055ace57d20e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;그림 1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3266723dce3df48a82cff590c881e33eeced350f" translate="yes" xml:space="preserve">
          <source>As Multi-level Mesa replaces the normal schedule function of Mesa, it must also have the basic scheduling functions. These are the add and remove functions, which remain at the individual agent level but have a higher degree of complexity as agents must be kept in multiple managers to ensure agents are being properly 'stepped' in the schedule or removed if the agent 'dies'. Multi-level Mesa also replaces Mesa's step function. Its primary schedule is random activation, but this can be turned off for an ordered activation and a staged activation can be executed through the agent_type manager. A future extension of MultiLevel_Mesa would be to store different schedules based on different network configurations. This would save computation time so specific agent schedules would be created less often. For example, if one was recreating daily life of a population and the night and morning hours used one configuration, while the daytime hours would use a different configuration, each calling different behavior routines for the agents.</source>
          <target state="translated">Multi-level Mesa는 Mesa의 일반적인 일정 기능을 대체하므로 기본적인 일정 기능도 갖추어야합니다. 이러한 추가 및 제거 기능은 개별 에이전트 수준으로 유지되지만 에이전트가 일정에서 적절하게 '단계적'되도록하거나 에이전트가 '죽는'경우 제거되도록 에이전트를 여러 관리자에 유지해야하므로 복잡성이 더 높습니다. . 다단계 Mesa는 또한 Mesa의 단계 기능을 대체합니다. 기본 일정은 임의 활성화이지만 순서가 지정된 활성화를 위해이 기능을 끌 수 있으며 agent_type 관리자를 통해 단계별 활성화를 실행할 수 있습니다. MultiLevel_Mesa의 향후 확장은 다른 네트워크 구성에 따라 다른 일정을 저장하는 것입니다. 이렇게하면 계산 시간이 절약되므로 특정 에이전트 일정이 덜 자주 생성됩니다. 예를 들면인구의 일상 생활을 재현하고 밤과 아침 시간이 하나의 구성을 사용하는 반면 낮 시간은 다른 구성을 사용하여 에이전트에 대해 각각 다른 동작 루틴을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="435c5fe50be2432abc7056a8f0280112c7eab7a6" translate="yes" xml:space="preserve">
          <source>As shown in figure 1, Multi-level Mesa has two primary approaches for facilitating a multi-level ABM, an explicit approach and a network approach. Within these two approaches, Multi-level Mesa turns the desired agents into a bilateral link list which form the groups. Each input of agents is transformed into a network edge which forms the groups or adds agents to an existing group. The use of links is also used to disband groups or remove agents from the group. These functions then create a more dynamic schedule with modules of agent within hierarchies.</source>
          <target state="translated">그림 1에서 볼 수 있듯이 Multi-level Mesa에는 다중 레벨 ABM을 용이하게하기위한 두 가지 기본 접근 방식, 명시 적 접근 방식 및 네트워크 접근 방식이 있습니다. 이 두 가지 접근 방식 내에서 Multi-level Mesa는 원하는 에이전트를 그룹을 형성하는 양방향 링크 목록으로 전환합니다. 에이전트의 각 입력은 그룹을 형성하거나 기존 그룹에 에이전트를 추가하는 네트워크 에지로 변환됩니다. 링크를 사용하여 그룹을 해체하거나 그룹에서 에이전트를 제거 할 수도 있습니다. 그런 다음 이러한 기능은 계층 내 에이전트 모듈을 사용하여보다 동적 인 일정을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="c43b278aa5d16fe58da0b687c4717aa69e488770" translate="yes" xml:space="preserve">
          <source>Attribute:</source>
          <target state="translated">속성:</target>
        </trans-unit>
        <trans-unit id="b8087185e5ee37cef4c337de5697d35d75d909fd" translate="yes" xml:space="preserve">
          <source>Attributes:</source>
          <target state="translated">속성 :</target>
        </trans-unit>
        <trans-unit id="47794dc9c0ee0cf4bdc68fe1ca73422a643bf6dd" translate="yes" xml:space="preserve">
          <source>Creating an Multi-level Mesa Instance and the Multi-level Mesa Managers</source>
          <target state="translated">다중 레벨 Mesa 인스턴스 및 다중 레벨 Mesa 관리자 생성</target>
        </trans-unit>
        <trans-unit id="035b08f4549a3d2315c654e9b218fcedcabb2cd5" translate="yes" xml:space="preserve">
          <source>Creating an instance of Multi-level Mesa requires no parameters, and initiates one attribute and six managers.</source>
          <target state="translated">Multi-level Mesa의 인스턴스를 만들려면 매개 변수가 필요하지 않으며 하나의 속성과 6 개의 관리자를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="21d5889502bfd325a4000763fbf071309d470790" translate="yes" xml:space="preserve">
          <source>Example Instance and Use</source>
          <target state="translated">예제 인스턴스 및 사용</target>
        </trans-unit>
        <trans-unit id="7c8d8b87efb5b6548c0f1eecae857eb585305992" translate="yes" xml:space="preserve">
          <source>Examples of Multi-Level Mesa</source>
          <target state="translated">다단계 메사의 예</target>
        </trans-unit>
        <trans-unit id="eb5f3aaed755a6adbc164e2ec1136429ba6818f5" translate="yes" xml:space="preserve">
          <source>Examples of multilevel_mesa are available at [Sugarscape Models]:&lt;a href=&quot;https://github.com/tpike3/SugarScape&quot;&gt;https://github.com/tpike3/SugarScape&lt;/a&gt;</source>
          <target state="translated">multilevel_mesa의 예는 [Sugarscape 모델] : &lt;a href=&quot;https://github.com/tpike3/SugarScape&quot;&gt;https://github.com/tpike3/SugarScape&lt;/a&gt; 에서 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="566fecd1ecc51ba47d2e6d3b8ea1b31b4356c09c" translate="yes" xml:space="preserve">
          <source>Forming and Dissolving Meta-Agents</source>
          <target state="translated">메타 에이전트 형성 및 용해</target>
        </trans-unit>
        <trans-unit id="dc243838c0b1944f7a3a1538281e4a0b41f5c92c" translate="yes" xml:space="preserve">
          <source>Group.active = status of Group</source>
          <target state="translated">Group.active = 그룹 상태</target>
        </trans-unit>
        <trans-unit id="6a9c44634869fc5cf1a1860aa102d7a176dd6ebd" translate="yes" xml:space="preserve">
          <source>Group.agents_by_type = dictionary</source>
          <target state="translated">Group.agents_by_type = 사전</target>
        </trans-unit>
        <trans-unit id="842bfc15872021302f23c6c934ed6ac6cb340750" translate="yes" xml:space="preserve">
          <source>Group.meta_step() = policies to dictate sub_agent behavior</source>
          <target state="translated">Group.meta_step () = sub_agent 동작을 지시하는 정책</target>
        </trans-unit>
        <trans-unit id="a146c717a542871b8c5e5d388ca77dc90f6899e8" translate="yes" xml:space="preserve">
          <source>Group.net = NetworkX graph</source>
          <target state="translated">Group.net = NetworkX 그래프</target>
        </trans-unit>
        <trans-unit id="c0ccf89b834f406ca2fec502077ac30f5565a4ba" translate="yes" xml:space="preserve">
          <source>Group.policy = object of group policies</source>
          <target state="translated">Group.policy = 그룹 정책의 대상</target>
        </trans-unit>
        <trans-unit id="efce0356075f72250f5b43c5db802bca2a7d8146" translate="yes" xml:space="preserve">
          <source>Group.step() = sub_agent behaviors</source>
          <target state="translated">Group.step () = sub_agent 동작</target>
        </trans-unit>
        <trans-unit id="55fc06e84f4805b742bda2032265fe0a415c6969" translate="yes" xml:space="preserve">
          <source>Group.sub_agents = dictionary</source>
          <target state="translated">Group.sub_agents = 사전</target>
        </trans-unit>
        <trans-unit id="9d1822c1ae5af2003b1434efdb49c9c6a13c1c1a" translate="yes" xml:space="preserve">
          <source>Happy Modeling!</source>
          <target state="translated">행복한 모델링!</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="7ff11086b20a443877fdff663fd8b36dda49ec5b" translate="yes" xml:space="preserve">
          <source>Keyword parameters:</source>
          <target state="translated">키워드 매개 변수 :</target>
        </trans-unit>
        <trans-unit id="398b3a5600f4f0c2445df305f4e7c034bfc164f4" translate="yes" xml:space="preserve">
          <source>Main Functions:</source>
          <target state="translated">주요 기능 :</target>
        </trans-unit>
        <trans-unit id="0915b5eda410b7fd81a958b942357c3e44c16831" translate="yes" xml:space="preserve">
          <source>Multi-Level Mesa</source>
          <target state="translated">다단계 메사</target>
        </trans-unit>
        <trans-unit id="759380268ae70321d8b068a6285b8cb076a34faf" translate="yes" xml:space="preserve">
          <source>Multi-level Mesa has three main components. First, a collection of managers which tracks the agents, the modules of agents (groups), the network of agents, and agents who belong to an existing group, and the schedule. Second, a series of functions which provides the user different options to form groups or dissolve them. Third, a group class which allows for the inclusion of different policies, manages the behavior and status of the group, and implicitly produces hierarchies within the complex system. (Figure 1)</source>
          <target state="translated">다단계 메사에는 세 가지 주요 구성 요소가 있습니다. 첫째, 에이전트, 에이전트 모듈 (그룹), 에이전트 네트워크, 기존 그룹에 속한 에이전트 및 일정을 추적하는 관리자 모음입니다. 둘째, 사용자에게 그룹을 형성하거나 분해 할 수있는 다양한 옵션을 제공하는 일련의 기능입니다. 셋째, 서로 다른 정책을 포함 할 수 있고 그룹의 동작과 상태를 관리하며 복잡한 시스템 내에서 계층을 암시 적으로 생성하는 그룹 클래스입니다. (그림 1)</target>
        </trans-unit>
        <trans-unit id="612cdf1dcaad735e8e0faf18fdc420f5c85a7b0c" translate="yes" xml:space="preserve">
          <source>Multi-level Mesa is a library which supports Python's Agent Based Modeling Library Mesa. Multi-level Mesa's views complex systems as adaptive networks and uses a network graph structure to allow dynamic management of agent modules (groups) and model schedules.</source>
          <target state="translated">Multi-level Mesa는 Python의 에이전트 기반 모델링 라이브러리 Mesa를 지원하는 라이브러리입니다. 다단계 Mesa는 복잡한 시스템을 적응 형 네트워크로보고 네트워크 그래프 구조를 사용하여 에이전트 모듈 (그룹) 및 모델 일정을 동적으로 관리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="a3b8a3df7a895fa349a319a01d693dbf13d21fa8" translate="yes" xml:space="preserve">
          <source>Multi-level Mesa requires</source>
          <target state="translated">다단계 Mesa는</target>
        </trans-unit>
        <trans-unit id="d852f990ae118bf9d73b83b33c6ebe19dce0deb2" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa._agents which is an ordered dictionary (a hash-table consisting of a key:value pair) that holds every agent added to the instance</source>
          <target state="translated">인스턴스에 추가 된 모든 에이전트를 보유하는 정렬 된 사전 (키 : 값 쌍으로 구성된 해시 테이블) 인 MultiLevel_Mesa._agents</target>
        </trans-unit>
        <trans-unit id="1a3a782c952762649ccf732af8d2eb2cdec32141" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.agents_by_type uses a dictionary of dictionaries to track agents by type. This feature allows for faster reference of specific types of agents when manipulating groups or schedules.</source>
          <target state="translated">MultiLevel_Mesa.agents_by_type은 사전 사전을 사용하여 유형별로 에이전트를 추적합니다. 이 기능을 사용하면 그룹 또는 일정을 조작 할 때 특정 유형의 에이전트를 더 빠르게 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82a39e8becc21a50fdc3da1656d877c66c59e5b0" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.group_net takes a Boolean and is defaulted to False. This parameter tells the instance whether or not a group agent can form a larger group agent with other group agents.</source>
          <target state="translated">MultiLevel_Mesa.group_net은 부울을 사용하며 기본값은 False입니다. 이 매개 변수는 그룹 에이전트가 다른 그룹 에이전트와 함께 더 큰 그룹 에이전트를 구성 할 수 있는지 여부를 인스턴스에 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="500a2958bb0dc817cb193a0c12914f3485536b30" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.groups is an ordered dictionary and tracks the groups within the model performing the same function of tracking groups as the agents ordered dictionary.</source>
          <target state="translated">MultiLevel_Mesa.groups는 정렬 된 사전이며 에이전트 정렬 된 사전과 동일한 추적 그룹 기능을 수행하는 모델 내 그룹을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="bbf83e090b2d38e45bf1f744b29e4e21b577fcde" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.id_counter, provides a unique_id for each group</source>
          <target state="translated">MultiLevel_Mesa.id_counter는 각 그룹에 대해 unique_id를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ab5904bab85a853408025c1ce315be6bd49d7429" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.min_for_group tells the instance the minimum number of agents which must be in a group. The min_for_group parameter has a default setting of 2.</source>
          <target state="translated">MultiLevel_Mesa.min_for_group은 그룹에 있어야하는 최소 에이전트 수를 인스턴스에 알려줍니다. min_for_group 매개 변수의 기본 설정은 2입니다.</target>
        </trans-unit>
        <trans-unit id="4c026a85c445ae21b2abb4c28d4a04aad09ca117" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.net is an instance of a NewtorkX graph. This feature provides the critical structure for tracking and managing agents and groups.</source>
          <target state="translated">MultiLevel_Mesa.net은 NewtorkX 그래프의 인스턴스입니다. 이 기능은 에이전트 및 그룹을 추적하고 관리하기위한 중요한 구조를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b6981411887768aa23d0805f1ce7fff1301a8d69" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.reverse_groups is a dictionary of dictionaries of sets. The first dictionary key is the agent id, while the second is group types (link and link values) and the set is the group ids to which the agent belongs in those group types.</source>
          <target state="translated">MultiLevel_Mesa.reverse_groups는 집합 사전의 사전입니다. 첫 번째 사전 키는 에이전트 ID이고 두 번째 사전 키는 그룹 유형 (링크 및 링크 값)이고 집합은 에이전트가 해당 그룹 유형에 속하는 그룹 ID입니다.</target>
        </trans-unit>
        <trans-unit id="cf3d87d029822593e1ab5bc21bf9729f7536fd4d" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.schedule replaces the Mesa schedule and is an ordered dictionary which manages the agents and when they execute a step function.</source>
          <target state="translated">MultiLevel_Mesa.schedule은 Mesa 일정을 대체하며 에이전트를 관리하고 단계 기능을 실행하는시기를 관리하는 정렬 된 사전입니다.</target>
        </trans-unit>
        <trans-unit id="ca7f2075793db109cb2317a4a97ca56aebe3ffdd" translate="yes" xml:space="preserve">
          <source>Network Defined Dissolution: Multi-level_Mesa.reassess_net_group</source>
          <target state="translated">네트워크 정의 해체 : Multi-level_Mesa.reassess_net_group</target>
        </trans-unit>
        <trans-unit id="d1363385e386dee5f55a93094c972a74d2d48c97" translate="yes" xml:space="preserve">
          <source>Network Defined Formation: Multi-level_Mesa.net_group</source>
          <target state="translated">네트워크 정의 형성 : Multi-level_Mesa.net_group</target>
        </trans-unit>
        <trans-unit id="20a6d7f2088fc95d97daf986670199e6be687acb" translate="yes" xml:space="preserve">
          <source>Network Dissolution Function</source>
          <target state="translated">네트워크 해산 기능</target>
        </trans-unit>
        <trans-unit id="bdd82605e3dc3d698d45840be249fed36a34b7cc" translate="yes" xml:space="preserve">
          <source>Network Formation Function</source>
          <target state="translated">네트워크 형성 기능</target>
        </trans-unit>
        <trans-unit id="55fe774102e304e0470a2916dc3e124f51c6f147" translate="yes" xml:space="preserve">
          <source>Provides Extension module to Mesa to allow for Hierarchies and Modules of Agents</source>
          <target state="translated">에이전트의 계층 및 모듈을 허용하기 위해 Mesa에 확장 모듈을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">요구 사항</target>
        </trans-unit>
        <trans-unit id="edb3cec927126c2f59aeacf3d2229a5df427c1f2" translate="yes" xml:space="preserve">
          <source>Schedule Functions</source>
          <target state="translated">일정 기능</target>
        </trans-unit>
        <trans-unit id="36b7c31c4e10000ebf134e745b744840499d5c25" translate="yes" xml:space="preserve">
          <source>Similar to Mesa, the MultiLevel_Mesa.add function requires an agent object. It also has two keyword parameters which take Boolean parameters each with a default value of True. Keyword parameter schedule adds the agent to the schedule. This is an option in case the user begins with a complex network and the agent is already part of a group. The net parameter similarly adds the agent to the NetworkX object. This is done in case the user has an agent he or she does not want to be part of the network. The Multi-level.Mesa.remove function requires an agent object. If invoked this will remove the agent from all managers as applicable. The Multi-level_Mesa.step function works in a similar way to the Mesa step function, where it iterates through each agent in schedule and executes their step function. Random activation is the default as identified by the keyword parameter shuffled. If shuffled is False it will follow the order in the ordered dictionary (the order the agents were added). The keyword parameter by_type is set to False but can take a list of agent types to simulate staged activation. Constant update provides the ability to have specific agent types activated after the more dynamic schedule. For example, an environmental variable which changes at a steady rate for each time step.</source>
          <target state="translated">Mesa와 마찬가지로 MultiLevel_Mesa.add 함수에는 에이전트 개체가 필요합니다. 또한 각각 기본값이 True 인 부울 매개 변수를 사용하는 두 개의 키워드 매개 변수가 있습니다. 키워드 매개 변수 schedule은 에이전트를 일정에 추가합니다. 사용자가 복잡한 네트워크로 시작하고 에이전트가 이미 그룹의 일부인 경우 옵션입니다. net 매개 변수도 마찬가지로 NetworkX 개체에 에이전트를 추가합니다. 이는 사용자가 네트워크의 일부가되기를 원하지 않는 에이전트가있는 경우에 수행됩니다. Multi-level.Mesa.remove 함수에는 에이전트 개체가 필요합니다. 호출되면 해당되는 모든 관리자에서 에이전트가 제거됩니다. Multi-level_Mesa.step 함수는 Mesa 단계 함수와 유사한 방식으로 작동하며, 여기에서 일정의 각 에이전트를 반복하고 해당 단계 함수를 실행합니다.무작위 활성화는 shuffled 키워드 매개 변수로 식별되는 기본값입니다. shuffled가 False이면 정렬 된 사전의 순서 (에이전트가 추가 된 순서)를 따릅니다. 키워드 매개 변수 by_type은 False로 설정되지만 에이전트 유형 목록을 가져 와서 단계적 활성화를 시뮬레이션 할 수 있습니다. 지속적인 업데이트는보다 동적 인 일정 이후 특정 에이전트 유형을 활성화하는 기능을 제공합니다. 예를 들어, 각 시간 단계에 대해 일정한 속도로 변하는 환경 변수입니다.예를 들어, 각 시간 단계에 대해 일정한 속도로 변하는 환경 변수입니다.예를 들어, 각 시간 단계에 대해 일정한 속도로 변하는 환경 변수입니다.</target>
        </trans-unit>
        <trans-unit id="428c367fb7ad0a7d3a822102fd7437d4785f9888" translate="yes" xml:space="preserve">
          <source>Six Managers:</source>
          <target state="translated">6 명의 관리자 :</target>
        </trans-unit>
        <trans-unit id="d875696ff97cd2193fbcb1e6a086b94c9c5ce3db" translate="yes" xml:space="preserve">
          <source>The Group class introduces hierarchy into the ABM. The Group class performs similar functions to Multi-level Mesa or Mesa's time module. The Group class has three managers, which includes a dictionary of the agents which belong to the Group, a dictionary of dictionaries with the agents in the Group by type and a NetworkX graph object of the sub_agents. The Group then has three attributes to make it easier for users to employ the Group. The first attribute is Group.active which is a Boolean value to help users activate and deactivate Groups as necessary. The next two attributes are Group.type and Group.&lt;strong&gt;str&lt;/strong&gt; which both equal &quot;group&quot; and allow the user greater ease in identifying and performing functions on the groups. The final attribute of the Group is its policy object, this object is passed in by the user and provides the Group behavior. The behavior of the Groups and its internal agents is done with two step functions the Group.group_step which calls the policy function and the individual agent step functions, again using a random order, but with the same options of the MultiLevel_Mesa.step function to dictate schedule ordering processes.</source>
          <target state="translated">Group 클래스는 ABM에 계층 구조를 도입합니다. Group 클래스는 Multi-level Mesa 또는 Mesa의 시간 모듈과 유사한 기능을 수행합니다. Group 클래스에는 Group에 속하는 에이전트의 사전, Group by type의 에이전트가있는 사전 사전 및 sub_agents의 NetworkX 그래프 개체가 포함 된 세 개의 관리자가 있습니다. 그런 다음 그룹에는 사용자가 그룹을 쉽게 사용할 수 있도록 세 가지 속성이 있습니다. 첫 번째 속성은 사용자가 필요에 따라 그룹을 활성화 및 비활성화하는 데 도움이되는 부울 값인 Group.active입니다. 다음 두 속성은 Group.type 및 Group입니다. &lt;strong&gt;str&lt;/strong&gt;둘 다 &quot;그룹&quot;과 같고 사용자가 그룹에 대한 기능을 식별하고 수행하는 데 더 쉽게 사용할 수 있습니다. 그룹의 마지막 속성은 정책 개체이며이 개체는 사용자가 전달하고 그룹 동작을 제공합니다. 그룹 및 내부 에이전트의 동작은 정책 기능과 개별 에이전트 단계 기능을 호출하는 Group.group_step의 두 단계 기능으로 수행되며 다시 임의의 순서를 사용하지만 MultiLevel_Mesa.step 기능의 동일한 옵션을 사용하여 지시합니다. 주문 프로세스를 예약합니다.</target>
        </trans-unit>
        <trans-unit id="aa491434aef2bbc20d2898cad8850c5dae27294f" translate="yes" xml:space="preserve">
          <source>The MetaAgent Class</source>
          <target state="translated">MetaAgent 클래스</target>
        </trans-unit>
        <trans-unit id="9b88c454df4f4c918cebd63180fd3e7ae8c741a2" translate="yes" xml:space="preserve">
          <source>The Multi-level Mesa Functions</source>
          <target state="translated">다단계 메사 기능</target>
        </trans-unit>
        <trans-unit id="14ff72121885339c6959e12490a5baff998d005b" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.form_group function requires one parameter which is the user specified process which determines whether or not an agent should be in a group with other agents. The *args and **kwargs allows the user to pass in the parameters for this process. The determine_id parameters ensures each group gets a unique id. If default it will simply append a number based on the id_counter attribute to the string 'group'. For the user to pass in an id he or she must yield the id as the first element of a tuple generated from the yield operator from the user defined process. Users must choose this id carefully as the id is used in the set operations to merge groups. The double parameter takes a Boolean value and is defaulted to False. If True the agent will remain in the schedule as an independent entity and be added as part of the group, while if False the agent is removed. This feature is to provide users maximum flexibility for agent scheduling and group processes. The policy parameter passes in the step processes for the group, which can consist of only internal processes or can consist of group processes and then execute the individual agent processes.  The group_type parameter takes a string and allows the user to specify different types of groups so an agent can belong to different types of group such as &amp;acirc;&amp;euro;&amp;tilde;family&amp;acirc;&amp;euro;&amp;trade; and &amp;acirc;&amp;euro;&amp;tilde;firm&amp;acirc;&amp;euro;&amp;trade;.</source>
          <target state="translated">MultiLevel_Mesa.form_group 함수에는 에이전트가 다른 에이전트와 그룹에 있어야하는지 여부를 결정하는 사용자 지정 프로세스 인 하나의 매개 변수가 필요합니다. * args 및 ** kwargs를 사용하면 사용자가이 프로세스에 대한 매개 변수를 전달할 수 있습니다. determine_id 매개 변수는 각 그룹이 고유 한 ID를 갖도록합니다. 기본값 인 경우 단순히 id_counter 속성에 따라 숫자를 문자열 'group'에 추가합니다. 사용자가 id를 전달하려면 사용자 정의 프로세스의 yield 연산자에서 생성 된 튜플의 첫 번째 요소로 id를 산출해야합니다. 사용자는 그룹을 병합하기 위해 설정된 작업에 사용되므로이 ID를 신중하게 선택해야합니다. double 매개 변수는 부울 값을 취하며 기본값은 False입니다. True 인 경우 상담원은 일정에 독립적 인 개체로 유지되고 그룹의 일부로 추가됩니다.False이면 에이전트가 제거됩니다. 이 기능은 사용자에게 에이전트 예약 및 그룹 프로세스에 대한 최대 유연성을 제공하기위한 것입니다. 정책 매개 변수는 내부 프로세스로만 구성되거나 그룹 프로세스로 구성 될 수있는 그룹의 단계 프로세스에서 전달 된 다음 개별 에이전트 프로세스를 실행합니다. group_type 매개 변수는 문자열을 가져 와서 사용자가 다른 유형의 그룹을 지정할 수 있도록하여 에이전트가 '가족'및 '회사'와 같은 다른 유형의 그룹에 속할 수 있습니다.group_type 매개 변수는 문자열을 가져 와서 사용자가 다른 유형의 그룹을 지정할 수 있도록하여 에이전트가 '가족'및 '회사'와 같은 다른 유형의 그룹에 속할 수 있습니다.group_type 매개 변수는 문자열을 가져 와서 사용자가 다른 유형의 그룹을 지정할 수 있도록하여 에이전트가 '가족'및 '회사'와 같은 다른 유형의 그룹에 속할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="836e6112c0bc763389cef144472c76ebb4c1bc50" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.net_group function requires no parameters and will default to whether or not a link exists or not between agents. As the net_group function has no process passed in there is no way to specify a group id, the function uses the default &quot;group&quot; if groups are forming based on the presence of a link, the link_type is not the default None or the link_type_link_value, plus a number from the Multi-level_Mesa.id_counter attribute. If users decided they would like to pass in processes to provide a unique id for groups this could be added in future versions, but was not included in this version as it did not add anything substantive to the Multi-level Mesa dynamics. The link_type function allows the user to pass in what link key value should link agents together. The link_type can then be further specified with the link_value criteria. These values are also used as the dictionary keys in the Multi-level_Mesa.reverse_groups manager. The link_value can either be a string to further classify the type of link, for example family: friendly or family: angry_teenager or it can be a value such as trades: 10 (number of trades between agents), which in this case tracks a type of interaction between agents. As net_group is an additive process the value is assumed to be a threshold of greater than or equal to a value. The network can then be updated and evaluated through the other processes in the ABM using NetworkX object manipulation functions. For convenience, Multi-level_Mesa also has Multi-level_Mesa.add_links and Multi-level_Mesa.remove_links functions. These functions take a list of agents, combines them in to a list of fully connected tuples and then adds or removes the links.</source>
          <target state="translated">MultiLevel_Mesa.net_group 함수에는 매개 변수가 필요하지 않으며 기본적으로 에이전트간에 링크가 있는지 여부가 지정됩니다. net_group 함수에는 프로세스가 전달되지 않았으므로 그룹 ID를 지정할 수있는 방법이 없습니다. 링크의 존재를 기반으로 그룹이 형성되고 링크 유형이 기본값 인 None 또는 link_type_link_value가 아닌 경우 함수는 기본 &quot;그룹&quot;을 사용합니다. Multi-level_Mesa.id_counter 속성의 숫자를 더합니다. 사용자가 그룹에 고유 한 ID를 제공하기 위해 프로세스를 전달하기로 결정한 경우 이는 향후 버전에 추가 될 수 있지만이 버전에는 다단계 메사 역학에 실질적인 내용을 추가하지 않았기 때문에 포함되지 않았습니다. link_type 함수를 사용하면 사용자가 에이전트를 함께 연결해야하는 링크 키 값을 전달할 수 있습니다.link_type은 link_value 기준을 사용하여 추가로 지정할 수 있습니다. 이러한 값은 Multi-level_Mesa.reverse_groups 관리자에서 사전 키로도 사용됩니다. link_value는 링크 유형을 추가로 분류하기위한 문자열 (예 : family : friendly 또는 family : angry_teenager)이거나 trades : 10 (에이전트 간의 거래 수)과 같은 값일 수 있으며이 경우에는 유형을 추적합니다. 에이전트 간의 상호 작용. net_group은 추가 프로세스이므로 값은 값보다 크거나 같은 임계 값으로 간주됩니다. 그런 다음 NetworkX 개체 조작 기능을 사용하여 ABM의 다른 프로세스를 통해 네트워크를 업데이트하고 평가할 수 있습니다. 편의를 위해 Multi-level_Mesa에는 Multi-level_Mesa.add_links 및 Multi-level_Mesa.remove_links 기능도 있습니다. 이 기능은 에이전트 목록을 가져옵니다.완전히 연결된 튜플 목록에 결합한 다음 링크를 추가하거나 제거합니다.</target>
        </trans-unit>
        <trans-unit id="fb920b58e145b1e086e21b323ffd229317ebd07d" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.reassess_meta function requires one parameter, which is the process defined by the user for assessing whether or not the agent should remain within the group. The function also has a reintroduce parameter which takes a Boolean value and is defaulted to True. This parameter tells the function whether or not to reintroduce the removed agents back into the schedule.</source>
          <target state="translated">MultiLevel_Mesa.reassess_meta 함수에는 하나의 매개 변수가 필요합니다. 이는 에이전트가 그룹 내에 남아 있어야하는지 여부를 평가하기 위해 사용자가 정의한 프로세스입니다. 이 함수에는 부울 값을 취하고 기본값이 True 인 reintroduce 매개 변수도 있습니다. 이 매개 변수는 제거 된 에이전트를 스케줄에 다시 도입할지 여부를 기능에 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="3200bef127d2edad72f3d71838e216c1fbaab255" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.reassess_net_group (Box 3-5) uses the same taxonomy of options as Multi-level_Mesa.net_group. First, an agent can be removed based on the presence of a link, the presence of a specific link type and finally the presence of a specific link value. The function will also check to ensure the meta-agent still has the minimum number of agents to remain a group which is defaulted to two with the Multi-level_Mesa.min_for_group attribute.</source>
          <target state="translated">MultiLevel_Mesa.reassess_net_group (Box 3-5)은 Multi-level_Mesa.net_group과 동일한 옵션 분류를 사용합니다. 첫째, 링크의 존재 여부, 특정 링크 유형의 존재, 마지막으로 특정 링크 값의 존재 여부에 따라 에이전트를 제거 할 수 있습니다. 이 기능은 또한 메타 에이전트가 Multi-level_Mesa.min_for_group 속성을 사용하여 기본값이 2 인 그룹을 유지하기위한 최소 에이전트 수가 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="7aeffe395f9e52f877e34e274fedb6fa230532d4" translate="yes" xml:space="preserve">
          <source>The dissolution function for the explicit approach (although it can be used interchangeably with the network approach) is Multi-level_Mesa.reassess_group. This function iterates through each group and then uses the user defined process to assess whether or not an agent should still belong to the group. Similar to the Multi-level_Mesa.form_group this function requires a yield to provide the list of agents which should be removed and then proceeds to remove those agents while updating the appropriate managers. This function also ensures if the group fails to have a certain number of agents within the group that the group will be removed. This minimum number of agents is the min_for_group attribute of the Multi-level Mesa instance and has a default setting of two</source>
          <target state="translated">명시 적 접근 방식에 대한 해산 함수 (네트워크 접근 방식과 혼용 할 수 있음)는 Multi-level_Mesa.reassess_group입니다. 이 함수는 각 그룹을 반복 한 다음 사용자 정의 프로세스를 사용하여 에이전트가 여전히 그룹에 속해야하는지 여부를 평가합니다. Multi-level_Mesa.form_group과 유사하게이 기능은 제거해야하는 에이전트 목록을 제공하기위한 양보가 필요하며 적절한 관리자를 업데이트하는 동안 해당 에이전트를 제거합니다. 이 기능은 또한 그룹이 그룹이 제거 될 특정 수의 에이전트를 그룹에 포함하지 못하는 경우에도 보장합니다. 이 최소 에이전트 수는 다중 레벨 Mesa 인스턴스의 min_for_group 속성이며 기본 설정은 2입니다.</target>
        </trans-unit>
        <trans-unit id="37c886402f15b31f8b53b45efd57e0dc1c8f3811" translate="yes" xml:space="preserve">
          <source>The dissolution function similar to the formation function requires no parameters and will default to determining if there is a link or not. The user can also specify link types which cause agents to be removed or link values, which can again be either strings or numbers. However, as this function is not additive, if the value is a number it must be less than or equal to the given value.</source>
          <target state="translated">형성 기능과 유사한 용해 기능은 매개 변수가 필요하지 않으며 링크가 있는지 여부를 결정하는 기본 설정입니다. 사용자는 에이전트를 제거하는 링크 유형이나 링크 값 (다시 문자열 또는 숫자 일 수 있음)을 지정할 수도 있습니다. 그러나이 함수는 가산 적이 지 않으므로 값이 숫자 인 경우 주어진 값보다 작거나 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="e846e9a75ba79c176424d40e346b809843120f9f" translate="yes" xml:space="preserve">
          <source>The formation function of the explicit approach is MultiLevel_Mesa.form_group and takes a user defined process which must generate a list of bilaterally connected agents (Box 3-2). This approach can be computationally expensive, but is necessary to allow for the accurate recreation of the network. As dictionaries (e.g. the schedule) cannot be manipulated during iteration users must use a yield versus the more common return operator to pass the list of agents to the MultiLevel_Mesa.form_group function.</source>
          <target state="translated">명시 적 접근 방식의 형성 기능은 MultiLevel_Mesa.form_group이며 양방향으로 연결된 에이전트 목록을 생성해야하는 사용자 정의 프로세스를 사용합니다 (Box 3-2). 이 접근 방식은 계산 비용이 많이들 수 있지만 네트워크를 정확하게 재현하는 데 필요합니다. 반복 중에 사전 (예 : 일정)을 조작 할 수 없으므로 사용자는 더 일반적인 반환 연산자 대신 yield를 사용하여 에이전트 목록을 MultiLevel_Mesa.form_group 함수에 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="51cf4d36ed362c2184a4b84f3e43995a5f93dfa7" translate="yes" xml:space="preserve">
          <source>The formation function of the network approach is Multi-level_Mesa.net_group and uses an undirected NetworkX graph object to assess what agents should form groups. With an undirected graph and as indicated in the above figure, there are three possibilities for assessing whether or not linked agents should be in the same group. First, by whether or not a link exists between the agents. Second, if a specific type of link exists (e.g. friend, enemy). Third, if a link exists which has reached a certain value.</source>
          <target state="translated">네트워크 접근 방식의 형성 기능은 Multi-level_Mesa.net_group이며, 어떤 에이전트가 그룹을 형성해야하는지 평가하기 위해 방향이 지정되지 않은 NetworkX 그래프 개체를 사용합니다. 무 방향 그래프와 위의 그림에 표시된 것처럼 연결된 에이전트가 동일한 그룹에 있어야하는지 여부를 평가할 수있는 세 가지 가능성이 있습니다. 첫째, 에이전트간에 링크가 있는지 여부입니다. 둘째, 특정 유형의 링크가 존재하는 경우 (예 : 친구, 적). 셋째, 특정 값에 도달 한 링크가 존재하는 경우.</target>
        </trans-unit>
        <trans-unit id="24aae1fc396217c59c234f4357d4f58fe00d390b" translate="yes" xml:space="preserve">
          <source>The interaction of the schedule, formation and dissolution of modules of agents, and the ability for hierarchies to exist allows for the easier introduction of these key features of complex systems. The functions can be employed as part of the normal step function, at specific events or at specific intervals. By using a network data structure as the main management structure, Multi-level Mesa is able to integrate the interdependencies and changing dynamics of those interdependencies into ABM management structure providing a new dynamic which goes beyond the current multi-level approaches.</source>
          <target state="translated">일정의 상호 작용, 에이전트 모듈의 형성 및 해체, 계층 구조가 존재하는 기능을 통해 복잡한 시스템의 이러한 주요 기능을 쉽게 도입 할 수 있습니다. 이 기능은 특정 이벤트 또는 특정 간격에서 일반 단계 기능의 일부로 사용할 수 있습니다. 네트워크 데이터 구조를 주요 관리 구조로 사용함으로써 Multi-level Mesa는 상호 종속성과 이러한 상호 종속성의 변화하는 역학을 ABM 관리 구조로 통합하여 현재의 다중 수준 접근 방식을 뛰어 넘는 새로운 역학을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e081bb2d0131bb0e9db8758d2500154e9cced20" translate="yes" xml:space="preserve">
          <source>These examples are various instantiations of the Sugar and Spice trading model described in Chapter 4 of &lt;em&gt;Growing Artificial Societies&lt;/em&gt; by ROb Axtell and Joshua Epstein.</source>
          <target state="translated">이러한 예는 ROb Axtell 및 Joshua Epstein 의 &lt;em&gt;성장 인공 사회&lt;/em&gt; 4 장에 설명 된 설탕 및 향신료 거래 모델의 다양한 인스턴스화입니다 .</target>
        </trans-unit>
        <trans-unit id="20cf766f97f692e7ce72ffbeaa78febb6e20c005" translate="yes" xml:space="preserve">
          <source>User Defined Dissolution Process: Multi-level_Mesa.reassess_group</source>
          <target state="translated">사용자 정의 용해 프로세스 : Multi-level_Mesa.reassess_group</target>
        </trans-unit>
        <trans-unit id="565a6b0e22fd4f040c42d8f315e07e8e275d81fa" translate="yes" xml:space="preserve">
          <source>User Defined Formation Process Multi-level_Mesa.form_meta</source>
          <target state="translated">사용자 정의 형성 프로세스 Multi-level_Mesa.form_meta</target>
        </trans-unit>
        <trans-unit id="62dae151ed9c54ab314b0aff7b97a541dac292c0" translate="yes" xml:space="preserve">
          <source>User-Defined Dissolution Function</source>
          <target state="translated">사용자 정의 용해 기능</target>
        </trans-unit>
        <trans-unit id="f13ba7910ad4cf65afc10e456e2277cec9e73d6f" translate="yes" xml:space="preserve">
          <source>User-Defined Formation Function: Multi-level_Mesa.form_group</source>
          <target state="translated">사용자 정의 형성 기능 : Multi-level_Mesa.form_group</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
