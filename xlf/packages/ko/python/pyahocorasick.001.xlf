<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/pyahocorasick/">
    <body>
      <group id="pyahocorasick">
        <trans-unit id="ed97aac606c284f00a8e98f0ae07140929fbe028" translate="yes" xml:space="preserve">
          <source>(and its</source>
          <target state="translated">(그리고</target>
        </trans-unit>
        <trans-unit id="e3067ae56410f9464bfc62ad525719ec2237bbc0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/JDonner/NoAho&quot;&gt;noaho&lt;/a&gt; by Jeff Donner</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JDonner/NoAho&quot;&gt;&lt;/a&gt;제프 도너의 노아 호</target>
        </trans-unit>
        <trans-unit id="2898914d91ade6aa4b5fab75831b531b3d2f6679" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/JanFan/py-aho-corasick&quot;&gt;py_aho_corasick&lt;/a&gt; by Jan</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JanFan/py-aho-corasick&quot;&gt;py_aho_corasick&lt;/a&gt; by Jan</target>
        </trans-unit>
        <trans-unit id="81c37789d6d7ff8f548453721778100bd5d331dc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/abusix/ahocorapy&quot;&gt;ahocorapy&lt;/a&gt; by abusix</source>
          <target state="translated">&lt;a href=&quot;https://github.com/abusix/ahocorapy&quot;&gt;abusix의&lt;/a&gt; ahocorapy</target>
        </trans-unit>
        <trans-unit id="c7d44400b2f57def86baddf19afbfc3e699abdc2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/scoder/acora&quot;&gt;acora&lt;/a&gt; by Stefan Behnel</source>
          <target state="translated">&lt;a href=&quot;https://github.com/scoder/acora&quot;&gt;&lt;/a&gt;스테판 베넬의 acora</target>
        </trans-unit>
        <trans-unit id="6d9a570276800e272f34696ea2ab7536f7a8bede" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://hkn.eecs.berkeley.edu/~dyoo/python/ahocorasick/&quot;&gt;ahocorasick&lt;/a&gt; by Danny Yoo</source>
          <target state="translated">&lt;a href=&quot;https://hkn.eecs.berkeley.edu/~dyoo/python/ahocorasick/&quot;&gt;&lt;/a&gt;Danny Yoo의 ahocorasick</target>
        </trans-unit>
        <trans-unit id="9770c1cb2742574796021ba58990f9e621272f27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aho-Corasick automatons&lt;/strong&gt; are commonly used for fast multi-pattern matching
in intrusion detection systems (such as snort), anti-viruses and many other
applications that need fast matching against a pre-defined set of string keys.</source>
          <target state="translated">&lt;strong&gt;Aho-Corasick 자동 장치&lt;/strong&gt; 는 일반적으로 침입 감지 시스템 (예 : snort), 안티 바이러스 및 사전 정의 된 문자열 키 세트에 대한 빠른 일치가 필요한 기타 여러 애플리케이션에서 빠른 다중 패턴 일치에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7dd3bf2e6f48a980abeaa7119e3942eda3c11cae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Andrew Grigorev&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;앤드류 그리고 레프&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2fb40f4f613f9ac3cfec16945940e4349611a293" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bogdan&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;보그 단&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6393c48fba67057a6497248e9d6b30140999726f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;David Woakes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;데이비드 웨이크 스&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="162d0e50b0670b0376cbdbf7b1e65d64fc0a1f4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edward Betts&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;에드워드 베츠&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83bfe3f4ab47a409cb2bd40897690783ae572c53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Frankie Robertson&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;프랭키 로버트슨&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3af194910234db2a514c52b9a661270037c96342" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Frederik Petersen&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;프레데릭 피터슨&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5e49fa0cad50da1418d242834a238904c03fdd42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;INADA Naoki&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이나 다 나오키&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="874d19396e59a53cbdcade123bc4349d5fd7cf57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Jan Fan&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;얀 팬&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc7d3706eaf36f8967cc0d24859e944da30d97d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pastafarianist&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Pastafarianist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ea279129e79d202bf58037ef3a7cd73546b43af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Philippe Ombredanne&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;필립 옴 브레 단&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="90b2d0fa470009d75d07f9589be39b9f90813cd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Renat Nasyrov&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;레나 트 나시 로프&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b95a3ee36aea47516df64cdf62619b4ef0f8fe0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sylvain Zimmer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;실뱅 짐머&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="949463ea7fe3fff2c8592527d998390dde1c321c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Xiaopeng Xu&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Xiaopeng Xu&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8185da43a01dd59da25c68eb057e9018a63e6d53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gladtosee&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;만나서 반가워&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9aec24ead2e378aa1de01e390b2d48c5093417c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pyahocorasick&lt;/strong&gt; is a fast and memory efficient library for exact or approximate
multi-pattern string search meaning that you can find multiple key strings
occurrences at once in some input text.  The library provides an</source>
          <target state="translated">&lt;strong&gt;pyahocorasick&lt;/strong&gt; 은 정확하거나 대략적인 다중 패턴 문자열 검색을위한 빠르고 메모리 효율적인 라이브러리입니다. 즉, 일부 입력 텍스트에서 한 번에 여러 키 문자열 항목을 찾을 수 있습니다. 도서관은</target>
        </trans-unit>
        <trans-unit id="b094c013fc7959b0e49319f3c239cd5595cb2e1c" translate="yes" xml:space="preserve">
          <source>A drawback is that it needs to be constructed and &amp;ldquo;finalized&amp;rdquo; ahead of time
before you can search strings. In several applications where you search for several
pre-defined &amp;ldquo;needles&amp;rdquo; in a variable &amp;ldquo;haystacks&amp;rdquo; this is actually an advantage.</source>
          <target state="translated">단점은 문자열을 검색하기 전에 미리 구성하고 &quot;완료&quot;해야한다는 것입니다. 변수 &quot;haystacks&quot;에서 미리 정의 된 여러 &quot;바늘&quot;을 검색하는 여러 응용 프로그램에서 이것은 실제로 이점입니다.</target>
        </trans-unit>
        <trans-unit id="04782ec4eca1f6097648d60e92dc2368306610c7" translate="yes" xml:space="preserve">
          <source>AHOCORASICK_UNICODE</source>
          <target state="translated">AHOCORASICK_UNICODE</target>
        </trans-unit>
        <trans-unit id="d8c1fb100909b2de5e3e6846b03cdf758e3a1ef9" translate="yes" xml:space="preserve">
          <source>Alphabetic list of authors:</source>
          <target state="translated">저자 목록 :</target>
        </trans-unit>
        <trans-unit id="7b2c0e3b7a55c97534608d2d71b37edc8610942d" translate="yes" xml:space="preserve">
          <source>And play with the</source>
          <target state="translated">그리고</target>
        </trans-unit>
        <trans-unit id="d2a52548bd0852b99153ddd79a1f550f70674c7d" translate="yes" xml:space="preserve">
          <source>Authors</source>
          <target state="translated">저자</target>
        </trans-unit>
        <trans-unit id="44ba7c9100516298055fc980c38686ce14b07df5" translate="yes" xml:space="preserve">
          <source>Automaton</source>
          <target state="translated">오토 마톤</target>
        </trans-unit>
        <trans-unit id="f405bb9bd02d587cdb693f843b6d07868d7a8784" translate="yes" xml:space="preserve">
          <source>Automaton.iter()</source>
          <target state="translated">Automaton.iter ()</target>
        </trans-unit>
        <trans-unit id="25719a5cf1783036cea960576445312036b584ec" translate="yes" xml:space="preserve">
          <source>Automaton.unicode</source>
          <target state="translated">Automaton.unicode</target>
        </trans-unit>
        <trans-unit id="3ea9b7958e6e0f63f2ef85fa952a4e7d3b2a34a4" translate="yes" xml:space="preserve">
          <source>Behind the scenes the &lt;strong&gt;pyahocorasick&lt;/strong&gt; Python library implements these two data
structures:  a &lt;a href=&quot;http://en.wikipedia.org/wiki/trie&quot;&gt;Trie&lt;/a&gt; and an Aho-Corasick string
matching automaton. Both are exposed through the</source>
          <target state="translated">이면에서 &lt;strong&gt;pyahocorasick&lt;/strong&gt; Python 라이브러리는 &lt;a href=&quot;http://en.wikipedia.org/wiki/trie&quot;&gt;Trie&lt;/a&gt; 와 Aho-Corasick 문자열 일치 자동화 라는 두 가지 데이터 구조를 구현합니다 . 둘 다</target>
        </trans-unit>
        <trans-unit id="7abedb1575fd6bac486d83daa0fae3666fcd6d40" translate="yes" xml:space="preserve">
          <source>Better performance than py-aho-corasick.</source>
          <target state="translated">py-aho-corasick보다 더 나은 성능.</target>
        </trans-unit>
        <trans-unit id="02afad2d07ff35fa2d38c3f1aa70f1ad2bf9a908" translate="yes" xml:space="preserve">
          <source>Build and install from PyPi</source>
          <target state="translated">PyPi에서 빌드 및 설치</target>
        </trans-unit>
        <trans-unit id="e50315914efb0d909a65ca1269c98237e027ab40" translate="yes" xml:space="preserve">
          <source>Conda-Forge &lt;a href=&quot;https://github.com/conda-forge/pyahocorasick-feedstock/&quot;&gt;https://github.com/conda-forge/pyahocorasick-feedstock/&lt;/a&gt;</source>
          <target state="translated">Conda-Forge &lt;a href=&quot;https://github.com/conda-forge/pyahocorasick-feedstock/&quot;&gt;https://github.com/conda-forge/pyahocorasick-feedstock/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">기여</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">선적 서류 비치</target>
        </trans-unit>
        <trans-unit id="55ab40731d2b483f40f5c367bf45cf082a424256" translate="yes" xml:space="preserve">
          <source>Does not compile on Windows (July 2016).</source>
          <target state="translated">Windows (2016 년 7 월)에서 컴파일되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9cf270b0ed04e38ca1168cadd64d0b400c9268cd" translate="yes" xml:space="preserve">
          <source>Download and source code</source>
          <target state="translated">다운로드 및 소스 코드</target>
        </trans-unit>
        <trans-unit id="658c081ddc6d9c0cb44f7db7896b386bf67ec1fc" translate="yes" xml:space="preserve">
          <source>FAQ and Who is using pyahocorasick? &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&quot;&gt;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&lt;/a&gt;</source>
          <target state="translated">FAQ 및 누가 pyahocorasick을 사용하고 있습니까? &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&quot;&gt;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f1e450a10c75a74703dde77de000687ff20958d0" translate="yes" xml:space="preserve">
          <source>Full text of license is available in LICENSE file.</source>
          <target state="translated">라이센스의 전체 텍스트는 LICENSE 파일에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cab4b9f03f6a3ca40df9255c188756480ea392ef" translate="yes" xml:space="preserve">
          <source>GPL-licensed.</source>
          <target state="translated">GPL 라이센스.</target>
        </trans-unit>
        <trans-unit id="272e4f2c171f5d31922d67de7378f7e262a5bc76" translate="yes" xml:space="preserve">
          <source>GitHub &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/&quot;&gt;https://github.com/WojciechMula/pyahocorasick/&lt;/a&gt;</source>
          <target state="translated">GitHub &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/&quot;&gt;https://github.com/WojciechMula/pyahocorasick/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad05633a3a72b5a69f26140c6b056ca6ac3cc746" translate="yes" xml:space="preserve">
          <source>Here we print the results and just check that they are correct. The</source>
          <target state="translated">여기에서 결과를 인쇄하고 정확한지 확인합니다. 그만큼</target>
        </trans-unit>
        <trans-unit id="17312d12e6bb98023633465fda0a407c342321e8" translate="yes" xml:space="preserve">
          <source>If compilation succeeds, the module is ready to use.</source>
          <target state="translated">컴파일이 성공하면 모듈을 사용할 준비가 된 것입니다.</target>
        </trans-unit>
        <trans-unit id="bd491784e8bd16d60a13acab42b345ed6027c091" translate="yes" xml:space="preserve">
          <source>In addition to Trie-like and Aho-Corasick methods and data structures,
&lt;strong&gt;pyahocorasick&lt;/strong&gt; also implements dict-like methods: The pyahocorasick
&lt;strong&gt;Automaton&lt;/strong&gt; is a &lt;strong&gt;Trie&lt;/strong&gt; a dict-like structure indexed by string keys each
associated with a value object. You can use this to retrieve an associated value
in a time proportional to a string key length.</source>
          <target state="translated">트리는 형상과 아호-Corasick 방법 및 데이터 구조에 더하여, &lt;strong&gt;pyahocorasick&lt;/strong&gt; 또한 구현은 딕셔너리와 같은 방법 : pyahocorasick &lt;strong&gt;오토 마톤은&lt;/strong&gt; A는 &lt;strong&gt;트리는&lt;/strong&gt; 사전인가 같은 문자열 키 값 객체와 연관된 각 의해 인덱스 구조. 이를 사용하여 문자열 키 길이에 비례하는 시간에 연관된 값을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="734f73caf4ba4b4af7ad7e2ac00e7ad457c2946d" translate="yes" xml:space="preserve">
          <source>Includes visualization tool for resulting automaton (using pygraphviz).</source>
          <target state="translated">결과 자동화를위한 시각화 도구를 포함합니다 (pygraphviz 사용).</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="bb182491194b4d0793fa0b2ebfb14180cb314c9d" translate="yes" xml:space="preserve">
          <source>Internally an Aho-Corasick automaton is typically based on a Trie with extra
data for failure links and an implementation of the Aho-Corasick search
procedure.</source>
          <target state="translated">내부적으로 Aho-Corasick 자동 장치는 일반적으로 실패 링크에 대한 추가 데이터와 Aho-Corasick 검색 절차의 구현이 포함 된 Trie를 기반으로합니다.</target>
        </trans-unit>
        <trans-unit id="fe01490a6d0f624547f199e72bd239c228a8fa3e" translate="yes" xml:space="preserve">
          <source>It is implemented in C and tested on Python 2.7 and 3.4+. It works on Linux, Mac and
Windows.</source>
          <target state="translated">C로 구현되고 Python 2.7 및 3.4 이상에서 테스트되었습니다. Linux, Mac 및 Windows에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="0b87609b15fd736afe5e6b3e9f08be5444d9d946" translate="yes" xml:space="preserve">
          <source>Large automaton may take a long time to build (July 2016)</source>
          <target state="translated">대형 오토 마톤을 만드는 데 시간이 오래 걸릴 수 있음 (2016 년 7 월)</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="122441255d963912bba0b6bd7da9b922f9c619b6" translate="yes" xml:space="preserve">
          <source>MIT-licensed, 100% test coverage, tested on all major python versions (+ pypy)</source>
          <target state="translated">MIT 라이선스, 100 % 테스트 범위, 모든 주요 Python 버전 (+ pypy)에서 테스트 됨</target>
        </trans-unit>
        <trans-unit id="ce7628c9a6e0f7b0383b4db2f57e0a8e41f2d4fd" translate="yes" xml:space="preserve">
          <source>No support for a dict-like protocol to associate a value to a string key.</source>
          <target state="translated">값을 문자열 키에 연결하기위한 dict-like 프로토콜을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="10e2c2319f5e18601635b0d8ffdf8a79b616342e" translate="yes" xml:space="preserve">
          <source>No support for the pickle protocol.</source>
          <target state="translated">피클 프로토콜을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="199d8cc3d06f55aa835b5938ee867f1fcd4256a9" translate="yes" xml:space="preserve">
          <source>Now convert the trie to an Aho-Corasick automaton to enable Aho-Corasick search:</source>
          <target state="translated">이제 트라이를 Aho-Corasick 오토 마톤으로 변환하여 Aho-Corasick 검색을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="574fb291c52b991631be9dcc16b47856c8ba7921" translate="yes" xml:space="preserve">
          <source>On Windows and Python 2.7 you need the &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=44266&quot;&gt;Microsoft Visual C++ Compiler for Python 2.7&lt;/a&gt; (aka. Visual
Studio 2008). There have been reports that</source>
          <target state="translated">Windows 및 Python 2.7 &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=44266&quot;&gt;에서는 Python 2.7 용 Microsoft Visual C ++ 컴파일러&lt;/a&gt; (일명 Visual Studio 2008)가 필요합니다. 보고가 있습니다</target>
        </trans-unit>
        <trans-unit id="8a664c4f166a6502ac9a27fe58c9b46cbef6d96e" translate="yes" xml:space="preserve">
          <source>One of the advantages of an Aho-Corasick automaton is that the typical worst-case
and best-case &lt;strong&gt;runtimes&lt;/strong&gt; are about the same and depends primarily on the size
of the input string and secondarily on the number of matches returned.  While
this may not be the fastest string search algorithm in all cases, it can search
for multiple strings at once and its runtime guarantees make it rather unique.
Because pyahocorasick is based on a Trie, it stores redundant keys prefixes only
once using memory efficiently.</source>
          <target state="translated">Aho-Corasick 오토 마톤의 장점 중 하나는 일반적인 최악의 경우와 최상의 경우 &lt;strong&gt;런타임&lt;/strong&gt; 이 거의 동일하고 주로 입력 문자열의 크기에 따라 달라지며 2 차적으로 반환되는 일치 수에 따라 달라진다는 것입니다. 이것이 모든 경우에 가장 빠른 문자열 검색 알고리즘은 아니지만 한 번에 여러 문자열을 검색 할 수 있으며 런타임 보장으로 인해 고유하게 만듭니다. pyahocorasick은 Trie를 기반으로하기 때문에 메모리를 효율적으로 사용하여 중복 키 접두사를 한 번만 저장합니다.</target>
        </trans-unit>
        <trans-unit id="e246417542e9b47eb9f386debf9a6c56e0bfe0d8" translate="yes" xml:space="preserve">
          <source>Other Aho-Corasick implementations for Python you can consider</source>
          <target state="translated">고려할 수있는 Python 용 기타 Aho-Corasick 구현</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">개요</target>
        </trans-unit>
        <trans-unit id="db0f74a1197d6b2e8f18cf9a0e372b427a8942e7" translate="yes" xml:space="preserve">
          <source>Performs additional suffix shortcutting (more setup overhead, less search overhead for suffix lookups).</source>
          <target state="translated">추가 접미사 바로 가기를 수행합니다 (더 많은 설정 오버 헤드, 접미사 조회를위한 검색 오버 헤드 감소).</target>
        </trans-unit>
        <trans-unit id="74e4fe431448e00688da3c8643c56bc538eb9444" translate="yes" xml:space="preserve">
          <source>Poor performance.</source>
          <target state="translated">성능이 저하됩니다.</target>
        </trans-unit>
        <trans-unit id="fe28615cf8cffc3bbeb6a7d015900e3338401a59" translate="yes" xml:space="preserve">
          <source>Pypi &lt;a href=&quot;https://pypi.python.org/pypi/pyahocorasick/&quot;&gt;https://pypi.python.org/pypi/pyahocorasick/&lt;/a&gt;</source>
          <target state="translated">Pypi &lt;a href=&quot;https://pypi.python.org/pypi/pyahocorasick/&quot;&gt;https://pypi.python.org/pypi/pyahocorasick/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="45c1df25b203a7ba230eed956c1777a7aa677903" translate="yes" xml:space="preserve">
          <source>Python
module that you can use as a plain dict-like Trie or convert a Trie to an automaton
for efficient Aho-Corasick search.</source>
          <target state="translated">딕셔너리와 유사한 Trie로 사용하거나 효율적인 Aho-Corasick 검색을 위해 Trie를 자동 장치로 변환 할 수있는 Python 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="b342f020314b26a7fba16949f44e287503b5ee8f" translate="yes" xml:space="preserve">
          <source>Quick start</source>
          <target state="translated">빠른 시작</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">또한보십시오:</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">지원하다</target>
        </trans-unit>
        <trans-unit id="3e13dec66bbc8d1730f2c6132002840bd1f7157a" translate="yes" xml:space="preserve">
          <source>Support is available through the &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub issue tracker&lt;/a&gt; to report bugs or ask
questions.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub 문제 추적기&lt;/a&gt; 를 통해 버그를보고하거나 질문 할 수있는 지원이 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="174534c6b3882921f07bb41f7a29c9824d9b171b" translate="yes" xml:space="preserve">
          <source>Thank you.</source>
          <target state="translated">감사합니다.</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">그만큼</target>
        </trans-unit>
        <trans-unit id="1d05cabd76099f37019d2974b963cca4a1200f90" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#license&quot;&gt;license&lt;/a&gt; is BSD-3-clause. Some utilities, such as tests and the pure Python
automaton are dedicated to the Public Domain.</source>
          <target state="translated">&lt;a href=&quot;#license&quot;&gt;라이센스는&lt;/a&gt; BSD-3 절입니다. 테스트 및 순수 Python 자동 장치와 같은 일부 유틸리티는 공용 도메인 전용입니다.</target>
        </trans-unit>
        <trans-unit id="7d65dbc73543968a8479240a96a7efc6150edcf9" translate="yes" xml:space="preserve">
          <source>The full documentation including the API overview and reference is published on
&lt;a href=&quot;http://pyahocorasick.readthedocs.io/&quot;&gt;readthedocs&lt;/a&gt;.</source>
          <target state="translated">API 개요 및 참조를 포함한 전체 문서는 &lt;a href=&quot;http://pyahocorasick.readthedocs.io/&quot;&gt;readthedocs에&lt;/a&gt; 게시됩니다 .</target>
        </trans-unit>
        <trans-unit id="afed17b15d79d7910cc59b01b6cb7ac878d8f5fa" translate="yes" xml:space="preserve">
          <source>The initial author and maintainer is Wojciech Muła. &lt;a href=&quot;https://github.com/pombredanne&quot;&gt;Philippe Ombredanne&lt;/a&gt;, the current co-owner, rewrote
documentation, setup CI servers and did a whole lot of work to make this module
better accessible to end users.</source>
          <target state="translated">최초의 저자이자 관리자는 Wojciech Muła입니다. 현재 공동 소유자 인 &lt;a href=&quot;https://github.com/pombredanne&quot;&gt;Philippe Ombredanne&lt;/a&gt; 은 문서를 다시 작성하고 CI 서버를 설정했으며 최종 사용자가이 모듈에 더 쉽게 액세스 할 수 있도록 많은 작업을 수행했습니다.</target>
        </trans-unit>
        <trans-unit id="4b5ac9c74ef0cc47e587063fd4e4d4c3a5c9a569" translate="yes" xml:space="preserve">
          <source>The type of strings accepted and returned by</source>
          <target state="translated">허용 및 반환되는 문자열 유형</target>
        </trans-unit>
        <trans-unit id="9534657f069153e8db5ee1126e3cc2e1a451ece9" translate="yes" xml:space="preserve">
          <source>Then check if some string exists in the trie:</source>
          <target state="translated">그런 다음 트라이에 문자열이 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="959dc99901355a8612b602dbe13380c89fb12c42" translate="yes" xml:space="preserve">
          <source>Then create an Automaton:</source>
          <target state="translated">그런 다음 Automaton을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="d2c6d3f04bf71d2bfa75772861724b90c6e11939" translate="yes" xml:space="preserve">
          <source>Then search all occurrences of the keys (the needles) in an input string (our haystack).</source>
          <target state="translated">그런 다음 입력 문자열 (건초 더미)에서 모든 키 (바늘)를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="26eae255de3160d089849367227c318e420bae93" translate="yes" xml:space="preserve">
          <source>This library is licensed under very liberal
&lt;a href=&quot;http://spdx.org/licenses/BSD-3-Clause.html&quot;&gt;BSD-3-Clause&lt;/a&gt; license. Some portions of
the code are dedicated to the public domain such as the pure Python automaton and test
code.</source>
          <target state="translated">이 라이브러리는 매우 자유로운 &lt;a href=&quot;http://spdx.org/licenses/BSD-3-Clause.html&quot;&gt;BSD-3-Clause&lt;/a&gt; 라이선스에 따라 사용이 허가되었습니다 . 코드의 일부는 순수 Python 자동화 및 테스트 코드와 같은 공개 도메인 전용입니다.</target>
        </trans-unit>
        <trans-unit id="a76d0f88d6303cbc70bca3eaafc6057174b0e969" translate="yes" xml:space="preserve">
          <source>This library would not be possible without help of many people, who contributed in
various ways.
They created &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;pull requests&lt;/a&gt;,
reported bugs as &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub issues&lt;/a&gt;
or via direct messages, proposed fixes, or spent their valuable time on testing.</source>
          <target state="translated">이 도서관은 다양한 방식으로 기여 해주신 많은 분들의 도움 없이는 불가능했을 것입니다. 그들은 &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;풀 요청을&lt;/a&gt; 생성하고 버그를 &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub 문제&lt;/a&gt; 로보고 하거나 직접 메시지, 제안 된 수정 사항을 통해 보고 하거나 귀중한 시간을 테스트에 보냈습니다.</target>
        </trans-unit>
        <trans-unit id="65802d1bebf9a241c61798462c97bce6dfbfc8f7" translate="yes" xml:space="preserve">
          <source>This module is written in C. You need a C compiler installed to compile native
CPython extensions. To install:</source>
          <target state="translated">이 모듈은 C로 작성되었습니다. 네이티브 CPython 확장을 컴파일하려면 C 컴파일러가 설치되어 있어야합니다. 설치하기 위해서:</target>
        </trans-unit>
        <trans-unit id="e800b963297cdb42008d55c6934e3c969110967f" translate="yes" xml:space="preserve">
          <source>To build from sources you need to have a C compiler installed and configured which
should be standard on Linux and easy to get on MacOSX.</source>
          <target state="translated">소스에서 빌드하려면 Linux에서 표준이고 MacOSX에서 쉽게 얻을 수있는 C 컴파일러를 설치하고 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="2303b77104c204d0cf392f7c5542a4497f1ecdf6" translate="yes" xml:space="preserve">
          <source>To build from sources, clone the git repository or download and extract the source
archive.</source>
          <target state="translated">소스에서 빌드하려면 git 저장소를 복제하거나 소스 아카이브를 다운로드하고 추출하십시오.</target>
        </trans-unit>
        <trans-unit id="75a85f5e73844aa9ce0678ff10641a6c17579101" translate="yes" xml:space="preserve">
          <source>To install for common operating systems, use pip. Pre-built wheels should be
available on Pypi at some point in the future:</source>
          <target state="translated">일반 운영 체제 용으로 설치하려면 pip를 사용하십시오. 사전 제작 된 바퀴는 향후 언젠가 Pypi에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e777a781dedce1b28e01826c3c139d313404f24" translate="yes" xml:space="preserve">
          <source>Unicode and bytes</source>
          <target state="translated">유니 코드 및 바이트</target>
        </trans-unit>
        <trans-unit id="7206176896659795f74afea7cc4e7d29256396ff" translate="yes" xml:space="preserve">
          <source>Unicode is &lt;strong&gt;NOT supported&lt;/strong&gt; on Python 2 for now.</source>
          <target state="translated">현재 Python 2에서는 유니 코드가 &lt;strong&gt;지원되지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="20a865e70cb26947232ecd90e8b1136329511b67" translate="yes" xml:space="preserve">
          <source>Using pypy, ahocorapy&amp;rsquo;s search performance is only slightly worse than pyahocorasick&amp;rsquo;s.</source>
          <target state="translated">pypy를 사용하면 ahocorapy의 검색 성능이 pyahocorasick의 검색 성능보다 약간 더 나쁩니다.</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">경고</target>
        </trans-unit>
        <trans-unit id="20325b1033d8381cc0e0e9f5cdf4baa1aeecfa32" translate="yes" xml:space="preserve">
          <source>When the library is built with unicode support on Python 3, an Automaton will
store 2 or 4 bytes per letter, depending on your Python installation. When built
for bytes, only one byte per letter is needed.</source>
          <target state="translated">라이브러리가 Python 3에서 유니 코드 지원으로 빌드되면 Automaton은 Python 설치에 따라 문자 당 2 바이트 또는 4 바이트를 저장합니다. 바이트 용으로 빌드 된 경우 문자 당 1 바이트 만 필요합니다.</target>
        </trans-unit>
        <trans-unit id="cc578d41959c5c83a536719803a2120cb3a926c9" translate="yes" xml:space="preserve">
          <source>While &lt;strong&gt;pyahocorasick&lt;/strong&gt; tries to be the finest and fastest Aho Corasick library
for Python you may consider these other libraries:</source>
          <target state="translated">&lt;strong&gt;pyahocorasick&lt;/strong&gt; 은 가장 훌륭하고 빠른 Python 용 Aho Corasick 라이브러리가 &lt;strong&gt;되려고&lt;/strong&gt; 노력 하지만 다음과 같은 다른 라이브러리를 고려할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="189369cb661a954a8ee2e23f3f4d59cb8ab47209" translate="yes" xml:space="preserve">
          <source>With an &lt;a href=&quot;http://en.wikipedia.org/wiki/Aho-Corasick%20algorithm&quot;&gt;Aho-Corasick automaton&lt;/a&gt;
you can efficiently search all occurrences of multiple strings (the needles) in an
input string (the haystack) making a single pass over the input string. With
pyahocorasick you can eventually build large automatons and pickle them to reuse
them over and over as an indexed structure for fast multi pattern string matching.</source>
          <target state="translated">으로 &lt;a href=&quot;http://en.wikipedia.org/wiki/Aho-Corasick%20algorithm&quot;&gt;아호-Corasick 자동 기계&lt;/a&gt; 는 효율적으로 입력 문자열을 통해 단일 패스를 만들어 입력 문자열 (모래 사장)에 여러 문자열 (바늘)의 모든 항목을 검색 할 수 있습니다. pyahocorasick을 사용하면 궁극적으로 대형 자동 장치를 구축하고이를 피클하여 빠른 다중 패턴 문자열 일치를위한 인덱스 구조로 반복해서 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ddd8dcd46e0738b341d3e1e285d6a263179698ec" translate="yes" xml:space="preserve">
          <source>Written in C.</source>
          <target state="translated">C로 작성.</target>
        </trans-unit>
        <trans-unit id="d42f9e878192a8bb5e32f72fea1ce7300932b374" translate="yes" xml:space="preserve">
          <source>Written in C. Does not return overlapping matches.</source>
          <target state="translated">C로 작성 됨. 겹치는 일치 항목을 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4ad9e66c3d7119769fc23a32bf9ea46fc37a0022" translate="yes" xml:space="preserve">
          <source>Written in Cython.</source>
          <target state="translated">Cython에서 작성.</target>
        </trans-unit>
        <trans-unit id="f648ca758eb1cfa4b53138bdd824268576d35265" translate="yes" xml:space="preserve">
          <source>Written in pure Python.</source>
          <target state="translated">순수 Python으로 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="21610d0af0f56ee1ffce9457679ca588e96303ed" translate="yes" xml:space="preserve">
          <source>You can also create an eventually large automaton ahead of time and</source>
          <target state="translated">또한 최종적으로 큰 자동화 장치를 미리 만들어서</target>
        </trans-unit>
        <trans-unit id="f90f51c59d0a07bb77939cc1d895db9ff88903bd" translate="yes" xml:space="preserve">
          <source>You can fetch &lt;strong&gt;pyahocorasick&lt;/strong&gt; from:</source>
          <target state="translated">&lt;strong&gt;다음&lt;/strong&gt; 에서 &lt;strong&gt;pyahocorasick&lt;/strong&gt; 을 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a34cb424be5c612007112dca2745443175309ac" translate="yes" xml:space="preserve">
          <source>You can submit contributions through &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;GitHub pull requests&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;GitHub 풀 요청을&lt;/a&gt; 통해 기여를 제출할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4059645e8bead06953ce87b04c2044bb82ea4469" translate="yes" xml:space="preserve">
          <source>You can use the Automaton class as a trie. Add some string keys and their associated
value to this trie. Here we associate a tuple of (insertion index, original string)
as a value to each key string we add to the trie:</source>
          <target state="translated">Automaton 클래스를 트라이로 사용할 수 있습니다. 이 트라이에 일부 문자열 키와 관련 값을 추가합니다. 여기에서 (삽입 인덱스, 원래 문자열)의 튜플을 trie에 추가하는 각 키 문자열에 값으로 연결합니다.</target>
        </trans-unit>
        <trans-unit id="cad0f60d92a12c5e6f6120b7baa3005fd81bd2d4" translate="yes" xml:space="preserve">
          <source>a CPython &lt;strong&gt;C-based extension&lt;/strong&gt;, compatible with Python 2 and 3.</source>
          <target state="translated">Python 2 및 3과 호환 되는 CPython &lt;strong&gt;C 기반 확장&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c8f2d0f5b3922e28e1d46e2a166716a566fb7927" translate="yes" xml:space="preserve">
          <source>a simpler pure Python module, compatible with Python 2 and 3. This is only
available in the source repository (not on Pypi) under the py/ directory and
has a slightly different API.</source>
          <target state="translated">Python 2 및 3과 호환되는 더 간단한 순수 Python 모듈입니다. 이것은 py / 디렉토리 아래의 소스 저장소 (Pypi가 아님)에서만 사용할 수 있으며 API가 약간 다릅니다.</target>
        </trans-unit>
        <trans-unit id="85c447a62211d435f16120c5801a6a4d6e1f2695" translate="yes" xml:space="preserve">
          <source>ahocorasick</source>
          <target state="translated">아호 코 라식</target>
        </trans-unit>
        <trans-unit id="07c33f4c5b41e7883028c6861ece1bf8a0b7044f" translate="yes" xml:space="preserve">
          <source>as set in</source>
          <target state="translated">설정대로</target>
        </trans-unit>
        <trans-unit id="c3ce14415b37306cdba0e601673a7e7701e60f4f" translate="yes" xml:space="preserve">
          <source>attributes can tell you how the library was built.
On Python 3, unicode is the default. On Python 2, bytes is the default and only value.</source>
          <target state="translated">속성은 라이브러리가 어떻게 구축되었는지 알려줍니다. Python 3에서는 유니 코드가 기본값입니다. Python 2에서는 바이트가 기본값이며 유일한 값입니다.</target>
        </trans-unit>
        <trans-unit id="db5f6869b5f0574b5bb750d7a83d523f28ed9c61" translate="yes" xml:space="preserve">
          <source>class.</source>
          <target state="translated">수업.</target>
        </trans-unit>
        <trans-unit id="6c8d48ef3f05b27405f0b115449226fa1295dca3" translate="yes" xml:space="preserve">
          <source>companion) and then run (in a</source>
          <target state="translated">동반자) 다음 실행 (</target>
        </trans-unit>
        <trans-unit id="eafac96f6304711036f6df796ae70e90f66d43fb" translate="yes" xml:space="preserve">
          <source>dict-like method:</source>
          <target state="translated">dict-like 방법 :</target>
        </trans-unit>
        <trans-unit id="1e137456ce41b147b97c4a3b82b9d921053a7b85" translate="yes" xml:space="preserve">
          <source>does not build yet with
MinGW. It may build with cygwin but this has not been tested. If you get this working
with these platforms, please report in a ticket!</source>
          <target state="translated">아직 MinGW로 빌드하지 않습니다. cygwin으로 빌드 할 수 있지만 테스트되지 않았습니다. 이러한 플랫폼에서이 작업을 수행하는 경우 티켓으로보고하십시오!</target>
        </trans-unit>
        <trans-unit id="c0105fb2a16ab02277e579cd37d38307d734cc35" translate="yes" xml:space="preserve">
          <source>end index</source>
          <target state="translated">끝 색인</target>
        </trans-unit>
        <trans-unit id="24d7cde2f7b74a74ae24dd233457289a2e70ea1f" translate="yes" xml:space="preserve">
          <source>for this key. Here
we had stored as values a tuple with the original string and its trie insertion
order:</source>
          <target state="translated">이 키. 여기에 원래 문자열과 트라이 삽입 순서가있는 튜플을 값으로 저장했습니다.</target>
        </trans-unit>
        <trans-unit id="4a79533a2233d37071096ed5d29c1e9ac6cf66e6" translate="yes" xml:space="preserve">
          <source>get()</source>
          <target state="translated">get()</target>
        </trans-unit>
        <trans-unit id="57b3198ec561cc8ba7f8f3463ae5ce122251a891" translate="yes" xml:space="preserve">
          <source>it to
re-load later. Here we just pickle to a string. You would typically pickle to a
file instead:</source>
          <target state="translated">나중에 다시로드합니다. 여기서 우리는 문자열로 피클합니다. 일반적으로 대신 파일로 피클합니다.</target>
        </trans-unit>
        <trans-unit id="dd3297182bd934e5b975d272e648bb0bba704c84" translate="yes" xml:space="preserve">
          <source>method return the results as two-tuples of the</source>
          <target state="translated">메서드는 결과를 두 개의 튜플로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="10503efecca5b35f7093f4d661d94c7e8a3631cd" translate="yes" xml:space="preserve">
          <source>methods are either
&lt;strong&gt;unicode&lt;/strong&gt; or &lt;strong&gt;bytes&lt;/strong&gt;, depending on a compile time settings (preprocessor
definition of</source>
          <target state="translated">메소드는 컴파일 시간 설정 (전 처리기 정의)에 따라 &lt;strong&gt;unicode&lt;/strong&gt; 또는 &lt;strong&gt;bytes&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e7e07db96173fcd579f4a7910b826b93a8cd1d37" translate="yes" xml:space="preserve">
          <source>of
course!):</source>
          <target state="translated">물론이야!):</target>
        </trans-unit>
        <trans-unit id="a4561d3eb3b70a05c27c8ecfe455b03bd467781c" translate="yes" xml:space="preserve">
          <source>pickle</source>
          <target state="translated">간물</target>
        </trans-unit>
        <trans-unit id="e1f1eb75c7bbf4dc71204486628790128a241e4f" translate="yes" xml:space="preserve">
          <source>pip</source>
          <target state="translated">씨</target>
        </trans-unit>
        <trans-unit id="6be2e6bc394bd46ea0d122608c74793b53c4b08a" translate="yes" xml:space="preserve">
          <source>pyahocorasick</source>
          <target state="translated">Pyahocorasick</target>
        </trans-unit>
        <trans-unit id="6cd73e638cb43aad4182b170751dce7d061b2c67" translate="yes" xml:space="preserve">
          <source>pyahocorasick is a fast and memory efficient library for exact or approximate multi-pattern string search.  With the ahocorasick.Automaton class, you can find multiple key strings occurrences at once in some input text.  You can use it as a plain dict-like Trie or convert a Trie to an automaton for efficient Aho-Corasick search.  Implemented in C and tested on Python 2.7 and 3.4+.  Works on Linux, Mac and Windows. BSD-3-clause license.</source>
          <target state="translated">pyahocorasick은 정확하거나 대략적인 다중 패턴 문자열 검색을위한 빠르고 메모리 효율적인 라이브러리입니다. ahocorasick.Automaton 클래스를 사용하면 일부 입력 텍스트에서 한 번에 여러 키 문자열 발생을 찾을 수 있습니다. 이를 평범한 사전과 유사한 Trie로 사용하거나 효율적인 Aho-Corasick 검색을 위해 Trie를 자동 장치로 변환 할 수 있습니다. C로 구현되고 Python 2.7 및 3.4 이상에서 테스트되었습니다. Linux, Mac 및 Windows에서 작동합니다. BSD-3-clause 라이센스.</target>
        </trans-unit>
        <trans-unit id="a5a2857f47a66a88e4fd3cde78c61c3de269fda8" translate="yes" xml:space="preserve">
          <source>pyahocorasick is available in two flavors:</source>
          <target state="translated">pyahocorasick은 두 가지 맛으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="4bf1502884f37a3b69d66f4b8d71dc7fe92c730b" translate="yes" xml:space="preserve">
          <source>seems unmaintained (last update in 2005).</source>
          <target state="translated">유지되지 않는 것 같습니다 (2005 년 마지막 업데이트).</target>
        </trans-unit>
        <trans-unit id="8e2edce0d507e1297474f25c00cae94258db38d8" translate="yes" xml:space="preserve">
          <source>setup.py</source>
          <target state="translated">setup.py</target>
        </trans-unit>
        <trans-unit id="bff5288d43b5b0b423a623fd27ab60ad387791d3" translate="yes" xml:space="preserve">
          <source>setuptools</source>
          <target state="translated">설정 도구</target>
        </trans-unit>
        <trans-unit id="f32b67c7e26342af42efabc674d441dca0a281c5" translate="yes" xml:space="preserve">
          <source>value</source>
          <target state="translated">값</target>
        </trans-unit>
        <trans-unit id="fd3e2ebf7bd54402b7055af9ea9a035226639dee" translate="yes" xml:space="preserve">
          <source>virtualenv</source>
          <target state="translated">virtualenv</target>
        </trans-unit>
        <trans-unit id="c5d8a7bf63d5bed0ba64a18928de900d025670bd" translate="yes" xml:space="preserve">
          <source>where a
trie key was found in the input string and the associated</source>
          <target state="translated">입력 문자열에서 트라이 키가 발견되고 연관된</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
