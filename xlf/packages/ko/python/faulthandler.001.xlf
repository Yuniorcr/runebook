<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/faulthandler/">
    <body>
      <group id="faulthandler">
        <trans-unit id="8b32f169fb309037a80f683a4b6d37e7cba4bdc1" translate="yes" xml:space="preserve">
          <source>Alternatively you can set the PYTHONFAULTHANDLER environment variable to a
non-empty value.</source>
          <target state="translated">또는 PYTHONFAULTHANDLER 환경 변수를 비어 있지 않은 값으로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b05598106e76da0d607a6a81c201935a1dbfee9a" translate="yes" xml:space="preserve">
          <source>By default, the Python traceback is written to the standard error stream. Start
your graphical applications in a terminal and run your server in foreground to
see the traceback, or pass a file to faulthandler.enable().</source>
          <target state="translated">기본적으로 Python 트레이스 백은 표준 오류 스트림에 기록됩니다. 터미널에서 그래픽 애플리케이션을 시작하고 서버를 포 그라운드에서 실행하여 트레이스 백을 확인하거나 파일을 faulthandler.enable ()에 전달합니다.</target>
        </trans-unit>
        <trans-unit id="fa7641d6cb8d0ba8e60b2b86f9a48291331443a8" translate="yes" xml:space="preserve">
          <source>Display the Python traceback on a crash</source>
          <target state="translated">충돌시 Python 트레이스 백 표시</target>
        </trans-unit>
        <trans-unit id="148333c18dd79509f9564b86c3add191d327ffcc" translate="yes" xml:space="preserve">
          <source>Fault handler for SIGSEGV, SIGFPE, SIGABRT, SIGBUS and SIGILL signals: display
the Python traceback and restore the previous handler. Allocate an alternate
stack for this handler, if sigaltstack() is available, to be able to allocate
memory on the stack, even on stack overflow (not available on Windows).</source>
          <target state="translated">SIGSEGV, SIGFPE, SIGABRT, SIGBUS 및 SIGILL 신호에 대한 결함 처리기 : Python 트레이스 백을 표시하고 이전 처리기를 복원합니다. sigaltstack ()을 사용할 수있는 경우 스택 오버플로 (Windows에서는 사용할 수 없음)에서도 스택에 메모리를 할당 할 수 있도록이 핸들러에 대한 대체 스택을 할당합니다.</target>
        </trans-unit>
        <trans-unit id="81e0ceb7fc7b0120d9efeaffe709c095b3d029da" translate="yes" xml:space="preserve">
          <source>Import the module and call faulthandler.enable() to enable the fault handler.</source>
          <target state="translated">모듈을 가져오고 faulthandler.enable ()을 호출하여 오류 처리기를 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="45e8e62be32ad547820a512d950cbe7aeb111584" translate="yes" xml:space="preserve">
          <source>The fault handler is called on catastrophic cases and so it can only use
signal-safe functions (eg. it doesn&amp;rsquo;t allocate memory on the heap). That&amp;rsquo;s why
the traceback is limited: it only supports ASCII encoding (use the
backslashreplace error handler for non-ASCII characters) and limits each string
to 100 characters, doesn&amp;rsquo;t print the source code in the traceback (only the
filename, the function name and the line number), is limited to 100 frames and
100 threads.</source>
          <target state="translated">오류 처리기는 치명적인 경우에 호출되므로 신호 안전 기능 만 사용할 수 있습니다 (예 : 힙에 메모리를 할당하지 않음). 그렇기 때문에 트레이스 백이 제한됩니다. ASCII 인코딩 만 지원하고 (비 ASCII 문자에 대해 백 슬래시 대체 오류 처리기를 사용) 각 문자열을 100 자로 제한하고 트레이스 백에 소스 코드를 인쇄하지 않습니다 (파일 이름, 함수 이름 만 행 번호)는 프레임 100 개와 스레드 100 개로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="3b7e79012975d3e861952d69da3944f99e276605" translate="yes" xml:space="preserve">
          <source>This module is the backport for CPython 2.7. faulthandler is part of CPython
standard library since CPython 3.3: &lt;a href=&quot;http://docs.python.org/dev/library/faulthandler.html&quot;&gt;faulthandler&lt;/a&gt;. For PyPy,
faulthandler is builtin since PyPy 5.5: use</source>
          <target state="translated">이 모듈은 CPython 2.7의 백 포트입니다. faulthandler는 CPython 3.3 : &lt;a href=&quot;http://docs.python.org/dev/library/faulthandler.html&quot;&gt;faulthandler&lt;/a&gt; 이후 CPython 표준 라이브러리의 일부입니다 . PyPy의 경우 PyPy 5.5부터 결함 처리기가 내장되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5774e0c7dcae0498837702f72af167be1db50158" translate="yes" xml:space="preserve">
          <source>Website:
&lt;a href=&quot;https://faulthandler.readthedocs.io/&quot;&gt;https://faulthandler.readthedocs.io/&lt;/a&gt;</source>
          <target state="translated">웹 사이트 : &lt;a href=&quot;https://faulthandler.readthedocs.io/&quot;&gt;https://faulthandler.readthedocs.io/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1cb1003c13997882c35b2965310815154c6cbb5e" translate="yes" xml:space="preserve">
          <source>faulthandler 3.2 is the last version released by Victor Stinner. I maintained
it for 10 years in my free time for the great pleasure of Python 2 users, but
Python 2 is no longer supported upstream since 2020-01-01. Each faulthandler
release requires me to start my Windows VM, install Python 2.7 in 32-bit and
64-bit, install an old C compiler just for Python 2.7, and type manually some
commands to upload Windows binaries. Moreover, I have to fix some issues on
Travis CI and many small boring tasks. The maintenance is far from being free.
In 10 years, I got zero &amp;ldquo;thank you&amp;rdquo; (and 0&amp;euro;), only bug reports :-)</source>
          <target state="translated">faulthandler 3.2는 Victor Stinner가 출시 한 마지막 버전입니다. Python 2 사용자의 큰 즐거움을 위해 여가 시간에 10 년 동안 유지했지만 Python 2는 2020-01-01 이후로 더 이상 업스트림에서 지원되지 않습니다. 각 결함 처리기 릴리스를 사용하려면 Windows VM을 시작하고, Python 2.7을 32 비트 및 64 비트에 설치하고, Python 2.7 전용 이전 C 컴파일러를 설치하고, 일부 명령을 수동으로 입력하여 Windows 바이너리를 업로드해야합니다. 또한 Travis CI에 대한 몇 가지 문제와 많은 작은 지루한 작업을 수정해야합니다. 유지 보수는 무료가 아닙니다. 10 년 만에&amp;ldquo;감사합니다&amp;rdquo;(그리고 0 &amp;euro;)를 얻지 못했습니다. 버그 보고서 만 있습니다. :-)</target>
        </trans-unit>
        <trans-unit id="e8c4d13fd2fd99b029d92a36fad256f8f653a5a1" translate="yes" xml:space="preserve">
          <source>faulthandler is implemented in C using signal handlers to be able to dump a
traceback on a crash or when Python is blocked (eg. deadlock).</source>
          <target state="translated">오류 처리기는 충돌 또는 Python이 차단 될 때 (예 : 교착 상태) 추적을 덤프 할 수 있도록 신호 처리기를 사용하여 C에서 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="2caee2bbfef6db853f54ebef721cc989c0da49f3" translate="yes" xml:space="preserve">
          <source>pypy -X faulthandler</source>
          <target state="translated">pypy -X 결함 처리기</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
