<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/hypothesmith/">
    <body>
      <group id="hypothesmith">
        <trans-unit id="927273558156f85acbe1ffe5668260c75dca2f23" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://bugs.python.org/issue38953&quot;&gt;BPO-38953&lt;/a&gt;&lt;code&gt;tokenize&lt;/code&gt; -&amp;gt; &lt;code&gt;untokenize&lt;/code&gt; roundtrip bugs.</source>
          <target state="translated">&lt;a href=&quot;https://bugs.python.org/issue38953&quot;&gt;BPO-38953 &lt;/a&gt; &lt;code&gt;tokenize&lt;/code&gt; -&amp;gt; &lt;code&gt;untokenize&lt;/code&gt; 왕복 버그.</target>
        </trans-unit>
        <trans-unit id="1a576cbcbce9c243a6927d6d8263dbf180f781e1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://bugs.python.org/issue40661&quot;&gt;BPO-40661, a segfault in the new parser&lt;/a&gt;,
was given maximum priority and blocked the planned release of CPython 3.9 beta1.</source>
          <target state="translated">&lt;a href=&quot;https://bugs.python.org/issue40661&quot;&gt;새로운 파서의 segfault 인 BPO-40661&lt;/a&gt; 은 최대 우선 순위를 부여 받았으며 계획된 CPython 3.9 beta1 릴리스를 차단했습니다.</target>
        </trans-unit>
        <trans-unit id="fc009e3a7380e39bce6c81037d2446c6038dfb22" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/Instagram/LibCST#acknowledgements&quot;&gt;At least three round-trip bugs in LibCST&lt;/a&gt;
(search commits for &quot;hypothesis&quot;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/Instagram/LibCST#acknowledgements&quot;&gt;LibCST에서 최소 3 개의 왕복 버그&lt;/a&gt; ( &quot;가설&quot;에 대한 검색 커밋)</target>
        </trans-unit>
        <trans-unit id="fda59d462dd19922285148c2c06a752b261640fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lib2to3&lt;/code&gt; errors on \r in comment</source>
          <target state="translated">&lt;code&gt;lib2to3&lt;/code&gt; 주석의 \ r에 대한 lib2to3 오류</target>
        </trans-unit>
        <trans-unit id="c4e7036cd5c27e90252cafc58447d9d0b1c3c7eb" translate="yes" xml:space="preserve">
          <source>Black fails on files ending in a backslash</source>
          <target state="translated">백 슬래시로 끝나는 파일에서 검정 실패</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">변경 로그</target>
        </trans-unit>
        <trans-unit id="6d43a7f8f403b449af1d3036104c1802f5ab93d7" translate="yes" xml:space="preserve">
          <source>DO NOT EXECUTE CODE GENERATED BY THESE STRATEGIES.</source>
          <target state="translated">이러한 전략에 의해 생성 된 코드를 실행하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="5c99d85166a887efaaf7945a1f54ebee99e8cfd8" translate="yes" xml:space="preserve">
          <source>Generates syntactically-valid Python source code based on the grammar.</source>
          <target state="translated">문법을 기반으로 구문 상 유효한 Python 소스 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="094c511cb0b0bd224adf4a8f63f51125ceb84511" translate="yes" xml:space="preserve">
          <source>Generates syntactically-valid Python source code based on the node types
defined by the &lt;a href=&quot;https://libcst.readthedocs.io/en/latest/&quot;&gt;&lt;code&gt;LibCST&lt;/code&gt;&lt;/a&gt; project.</source>
          <target state="translated">&lt;a href=&quot;https://libcst.readthedocs.io/en/latest/&quot;&gt; &lt;code&gt;LibCST&lt;/code&gt; &lt;/a&gt; 프로젝트에서 정의한 노드 유형을 기반으로 구문 상 유효한 Python 소스 코드를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="10af5fb547fb532fd0234ef379c381c82cb2b3a4" translate="yes" xml:space="preserve">
          <source>Get it today with &lt;a href=&quot;https://pypi.org/project/hypothesmith/&quot;&gt;&lt;code&gt;pip install hypothesmith&lt;/code&gt;&lt;/a&gt;,
or by cloning &lt;a href=&quot;https://github.com/Zac-HD/hypothesmith&quot;&gt;the GitHub repo&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://pypi.org/project/hypothesmith/&quot;&gt; &lt;code&gt;pip install hypothesmith&lt;/code&gt; &lt;/a&gt; 를 사용하거나 &lt;a href=&quot;https://github.com/Zac-HD/hypothesmith&quot;&gt;GitHub 저장소&lt;/a&gt; 를 복제 하여 지금 얻으십시오 .</target>
        </trans-unit>
        <trans-unit id="5a7042e637728dc9ee9ec3d5e692337ee83071b8" translate="yes" xml:space="preserve">
          <source>Hypothesis strategies for generating Python programs, something like CSmith</source>
          <target state="translated">CSmith와 같은 Python 프로그램 생성을위한 가설 전략</target>
        </trans-unit>
        <trans-unit id="04ee5852f45f4e6d2eb07e036770872c09597475" translate="yes" xml:space="preserve">
          <source>Hypothesis strategies for generating Python programs, something like CSmith.</source>
          <target state="translated">CSmith와 같은 Python 프로그램을 생성하기위한 가설 전략.</target>
        </trans-unit>
        <trans-unit id="88dda500472bd784f8514a004f781ae9ea74a4a5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_target&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, this strategy uses &lt;code&gt;hypothesis.target()&lt;/code&gt;
internally to drive towards larger and more complex examples.  We recommend
leaving this enabled, as the grammar is quite complex and only simple examples
tend to be generated otherwise.</source>
          <target state="translated">경우 &lt;code&gt;auto_target&lt;/code&gt; 가 있다 &lt;code&gt;True&lt;/code&gt; ,이 전략이 사용 &lt;code&gt;hypothesis.target()&lt;/code&gt; 내부적으로 더 크고 더 복잡한 예제으로 구동한다. 문법이 매우 복잡하고 단순한 예제 만 생성되는 경향이 있으므로이 옵션을 활성화 된 상태로 두는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="2cb93c8a4298f8c411d4a889b55d7f84dbd198de" translate="yes" xml:space="preserve">
          <source>Invalid code generated by LibCST</source>
          <target state="translated">LibCST에서 생성 된 잘못된 코드</target>
        </trans-unit>
        <trans-unit id="d2637742eb27c63dbc9b26ffd6ba6ab8b9a3cf17" translate="yes" xml:space="preserve">
          <source>It could do literally anything that running Python code is able to do,
including changing, deleting, or uploading important data.  Arbitrary
code can be useful, but &quot;arbitrary code execution&quot; can be very, very bad.</source>
          <target state="translated">중요한 데이터를 변경, 삭제 또는 업로드하는 것을 포함하여 Python 코드를 실행하여 할 수있는 모든 작업을 말 그대로 수행 할 수 있습니다. 임의 코드가 유용 할 수 있지만 &quot;임의 코드 실행&quot;은 매우 나쁠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fcf20a9f2e82aca9608a9e741216b1fe6d73bf64" translate="yes" xml:space="preserve">
          <source>Notable bugs found with Hypothesmith</source>
          <target state="translated">Hypothesmith에서 발견 된 주목할만한 버그</target>
        </trans-unit>
        <trans-unit id="06024caeb87e4e463985ede2fb5afaf917b46e84" translate="yes" xml:space="preserve">
          <source>Patch notes &lt;a href=&quot;https://github.com/Zac-HD/hypothesmith/blob/master/CHANGELOG.md&quot;&gt;can be found in &lt;code&gt;CHANGELOG.md&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">패치 노트 &lt;a href=&quot;https://github.com/Zac-HD/hypothesmith/blob/master/CHANGELOG.md&quot;&gt;는 &lt;code&gt;CHANGELOG.md&lt;/code&gt; &lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b395c7305ac134f04b992faf02cbaf6cd3aff4b1" translate="yes" xml:space="preserve">
          <source>The generated code will always be syntatically valid, and is useful for testing
parsers, linters, auto-formatters, and other tools that operate on source code.</source>
          <target state="translated">생성 된 코드는 항상 구문 적으로 유효하며 파서, 린터, 자동 포맷터 및 소스 코드에서 작동하는 기타 도구를 테스트하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="40b2b8e9afc7410e9c31d67c9aeaa3467791d617" translate="yes" xml:space="preserve">
          <source>This is definitely pre-alpha, but if you want to play with it feel free!
You can even keep the shiny pieces when - not if - it breaks.</source>
          <target state="translated">이것은 확실히 사전 알파이지만, 그것을 가지고 놀고 싶다면 자유롭게! 부서지는 경우가 아니라도 반짝이는 조각을 유지할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8be67aaeb24b005e833b66dfed2921db5f146730" translate="yes" xml:space="preserve">
          <source>This package provides two Hypothesis strategies for generating Python source code.</source>
          <target state="translated">이 패키지는 Python 소스 코드를 생성하기위한 두 가지 가설 전략을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="ea1e6a392b004d05c4e49f2169f52a82b8656785" translate="yes" xml:space="preserve">
          <source>Valid values for &lt;code&gt;start&lt;/code&gt; are &lt;code&gt;&quot;single_input&quot;&lt;/code&gt;, &lt;code&gt;&quot;file_input&quot;&lt;/code&gt;, or
&lt;code&gt;&quot;eval_input&quot;&lt;/code&gt;; respectively a single interactive statement, a module or
sequence of commands read from a file, and input for the eval() function.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 유효한 값 은 &lt;code&gt;&quot;single_input&quot;&lt;/code&gt; , &lt;code&gt;&quot;file_input&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;eval_input&quot;&lt;/code&gt; 입니다 . 각각 단일 대화식 문, 파일에서 읽은 모듈 또는 명령 시퀀스, eval () 함수에 대한 입력.</target>
        </trans-unit>
        <trans-unit id="ec91c103499ca11901a8c45610643c97bf3cd671" translate="yes" xml:space="preserve">
          <source>You can pass any subtype of &lt;code&gt;libcst.CSTNode&lt;/code&gt;.  Alternatively, you can use
Hypothesis' built-in &lt;code&gt;from_type(node_type).map(lambda n: libcst.Module([n]).code&lt;/code&gt;,
after Hypothesmith has registered the required strategies.  However, this does
not include automatic targeting and limitations of LibCST may lead to invalid
code being generated.</source>
          <target state="translated">&lt;code&gt;libcst.CSTNode&lt;/code&gt; 의 모든 하위 유형을 전달할 수 있습니다 . 또는 Hypothesmith가 필수 전략을 등록한 후 Hypothesis의 내장 &lt;code&gt;from_type(node_type).map(lambda n: libcst.Module([n]).code&lt;/code&gt; 있습니다. 그러나 여기에는 자동 타겟팅 및 제한이 포함되지 않습니다. LibCST로 인해 잘못된 코드가 생성 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23ed7279d1e4cd1c1ed3ab2cb38aef204109cb8a" translate="yes" xml:space="preserve">
          <source>You can run the tests, such as they are, with &lt;code&gt;tox&lt;/code&gt; on Python 3.6 or later.
Use &lt;code&gt;tox -va&lt;/code&gt; to see what environments are available.</source>
          <target state="translated">Python 3.6 이상에서 &lt;code&gt;tox&lt;/code&gt; 로 테스트를 그대로 실행할 수 있습니다 . &lt;code&gt;tox -va&lt;/code&gt; 를 사용 하여 사용 가능한 환경을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="d94b26236f4fc6d56869562ae5e61b0393c88b76" translate="yes" xml:space="preserve">
          <source>hypothesmith</source>
          <target state="translated">가설 제작자</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
