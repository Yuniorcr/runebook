<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/advent-of-code-data/">
    <body>
      <group id="advent-of-code-data">
        <trans-unit id="1b2e9e17feec6b6c93a4fa1130f257bdd2213d33" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;entry-points&amp;rdquo;. My entry-point name is &amp;ldquo;wim&amp;rdquo; so an example for running &lt;a href=&quot;https://github.com/wimglenn/advent-of-code-wim/blob/master/setup.py#L30&quot;&gt;my code&lt;/a&gt; (after</source>
          <target state="translated">&amp;ldquo;진입 점&amp;rdquo;. 내 진입 점 이름은 실행 예를 들어, 그래서 &quot;WIM을&quot;입니다 &lt;a href=&quot;https://github.com/wimglenn/advent-of-code-wim/blob/master/setup.py#L30&quot;&gt;내 코드를&lt;/a&gt; 후 (</target>
        </trans-unit>
        <trans-unit id="d8fdd9d293c9f6bcb0db2d99e41af186443fcdb7" translate="yes" xml:space="preserve">
          <source>) would be:</source>
          <target state="translated">)는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a4ec5bf3b1cf651414f64c5e2105a4f3fdb657a7" translate="yes" xml:space="preserve">
          <source>--timeout=120</source>
          <target state="translated">--timeout = 120</target>
        </trans-unit>
        <trans-unit id="9a318765459dffc2bf0a10290db5d22be5a86579" translate="yes" xml:space="preserve">
          <source>. To remove any
caches, you may simply delete whatever files you want under that directory tree.
If you&amp;rsquo;d prefer to use a different path, then export an</source>
          <target state="translated">. 캐시를 제거하려면 해당 디렉토리 트리에서 원하는 파일을 삭제하면됩니다. 다른 경로를 사용하려면</target>
        </trans-unit>
        <trans-unit id="225fcf6baa361d67a2aeb4fbcece415e453538d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in version 0.4.0.&lt;/em&gt; Basic use:</source>
          <target state="translated">&lt;em&gt;버전 0.4.0의 새로운 기능. &lt;/em&gt;기본 사용 :</target>
        </trans-unit>
        <trans-unit id="ef100592788fef309840b1bcd0d4e5f466c04399" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in version 0.8.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;버전 0.8.0의 새로운 기능.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5155bfbb7b89cdc5612b464af7a32c49afb2d758" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt; If you don&amp;rsquo;t like the env var, you could also put into a text file
in your home directory (use the filename</source>
          <target state="translated">&lt;em&gt;참고 :&lt;/em&gt; env var가 마음에 들지 않으면 홈 디렉토리의 텍스트 파일에 넣을 수도 있습니다 (파일 이름 사용</target>
        </trans-unit>
        <trans-unit id="e05f2a02b3a3184f93fc5496cca40290861397e8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;every problem has a solution that completes in at most 15 seconds on ten-year-old hardware&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;모든 문제에는 10 년 된 하드웨어에서 최대 15 초 이내에 완료되는 솔루션이 있습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="36b220dcc983e82368cdf7331080aba85fa9ade8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:  Please use version 0.3+ of this library.&lt;/strong&gt;  It memoizes successful
requests client side and rate-limits the get_data function, as
&lt;a href=&quot;https://www.reddit.com/r/adventofcode/comments/3v64sb/aoc_is_fragile_please_be_gentle/&quot;&gt;requested by the AoC author&lt;/a&gt;.
Thanks!</source>
          <target state="translated">&lt;strong&gt;참고 :이 라이브러리의 버전 0.3 이상을 사용하십시오. &lt;/strong&gt;&lt;a href=&quot;https://www.reddit.com/r/adventofcode/comments/3v64sb/aoc_is_fragile_please_be_gentle/&quot;&gt;AoC 작성자가 요청한대로&lt;/a&gt; 클라이언트 측에서 성공한 요청을 메모하고 get_data 함수의 속도를 제한합니다 . 감사!</target>
        </trans-unit>
        <trans-unit id="2fbb2b999fdb6dd71977a1889b25886835375669" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Puzzle inputs differ by user.&lt;/strong&gt;   So export your session ID, for example:</source>
          <target state="translated">&lt;strong&gt;퍼즐 입력은 사용자마다 다릅니다. &lt;/strong&gt; 따라서 세션 ID를 내보내십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a3d0a97a9b904df6770cfb7ecba2a7cae76040ae" translate="yes" xml:space="preserve">
          <source>A filename like</source>
          <target state="translated">다음과 같은 파일 이름</target>
        </trans-unit>
        <trans-unit id="d250512ad0908b0d3841c37a98c260126298254d" translate="yes" xml:space="preserve">
          <source>AOCD_DIR</source>
          <target state="translated">AOCD_DIR</target>
        </trans-unit>
        <trans-unit id="1974aa2fc5c5c34b8aeb417f79433857e33b4a04" translate="yes" xml:space="preserve">
          <source>As you can see above, I actually had incorrect code for &lt;a href=&quot;https://adventofcode.com/2017/day/20&quot;&gt;2017 Day 20: Particle Swarm&lt;/a&gt;, but that &lt;a href=&quot;https://github.com/wimglenn/advent-of-code-wim/commit/31e454270001c6d06b46014fe5dafd03e29507b8&quot;&gt;bug&lt;/a&gt; only showed up for the google token&amp;rsquo;s dataset. Whoops. Also, it looks like my algorithm for &lt;a href=&quot;https://adventofcode.com/2017/day/13&quot;&gt;2017 Day 13: Packet Scanners&lt;/a&gt; was kinda garbage. Too slow. According to &lt;a href=&quot;https://adventofcode.com/about&quot;&gt;AoC FAQ&lt;/a&gt;:</source>
          <target state="translated">위에서 볼 수 있듯이 실제로 &lt;a href=&quot;https://adventofcode.com/2017/day/20&quot;&gt;2017 Day 20 : Particle Swarm에&lt;/a&gt; 대한 잘못된 코드가 있었지만 해당 &lt;a href=&quot;https://github.com/wimglenn/advent-of-code-wim/commit/31e454270001c6d06b46014fe5dafd03e29507b8&quot;&gt;버그&lt;/a&gt; 는 Google 토큰의 데이터 세트에만 나타났습니다. 이런. 또한 &lt;a href=&quot;https://adventofcode.com/2017/day/13&quot;&gt;2017 Day 13 : Packet Scanners&lt;/a&gt; 에 대한 알고리즘 이 다소 쓰레기 인 것 같습니다. 너무 느린. &lt;a href=&quot;https://adventofcode.com/about&quot;&gt;AoC FAQ&lt;/a&gt; 에 따르면 :</target>
        </trans-unit>
        <trans-unit id="db272f7c87edbde6cc2f248058913a294a2468b5" translate="yes" xml:space="preserve">
          <source>Automated submission</source>
          <target state="translated">자동 제출</target>
        </trans-unit>
        <trans-unit id="d6ade166fe0e611ebbb19da532f22644c0ad36e0" translate="yes" xml:space="preserve">
          <source>By the way, the</source>
          <target state="translated">그건 그렇고,</target>
        </trans-unit>
        <trans-unit id="7839d2cb0f40ad3ec7e268709443f9e7d0de0890" translate="yes" xml:space="preserve">
          <source>Cache invalidation?</source>
          <target state="translated">캐시 무효화?</target>
        </trans-unit>
        <trans-unit id="0f2b1654adc0aaa4bde0e26ace5dd519073fc5fb" translate="yes" xml:space="preserve">
          <source>Ever tried running your code against other people&amp;rsquo;s inputs? AoC is full of tricky edge cases. You may find that sometimes you&amp;rsquo;re only getting the right answer by luck, and your code will fail on some other dataset. Using aocd, you can collect a few different auth tokens for each of your accounts (github/google/reddit/twitter) and verify your answers across multiple datasets.</source>
          <target state="translated">다른 사람의 입력에 대해 코드를 실행 해 본 적이 있습니까? AoC는 까다로운 경우로 가득 차 있습니다. 운이 좋을 때만 올바른 답을 얻고 다른 데이터 세트에서 코드가 실패하는 경우가 있습니다. aocd를 사용하면 각 계정 (github / google / reddit / twitter)에 대해 몇 가지 다른 인증 토큰을 수집하고 여러 데이터 세트에서 답변을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25cf984134c76f36011f4e8caf33c135ae402d12" translate="yes" xml:space="preserve">
          <source>Get your puzzle data with a single import</source>
          <target state="translated">한 번의 가져 오기로 퍼즐 데이터 가져 오기</target>
        </trans-unit>
        <trans-unit id="0587351e2a97fb4879b4ba306965618c0b6d2069" translate="yes" xml:space="preserve">
          <source>Get your puzzle data with a single import statement:</source>
          <target state="translated">단일 import 문으로 퍼즐 데이터를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="df8b8387fbd3cba196358c3a1355b46b0b5b12a8" translate="yes" xml:space="preserve">
          <source>How does this library work?</source>
          <target state="translated">이 라이브러리는 어떻게 작동합니까?</target>
        </trans-unit>
        <trans-unit id="d7cf73d518daaad4f01a2ee97065f13f4ef611bf" translate="yes" xml:space="preserve">
          <source>Input data is via regular attribute access. Example usage:</source>
          <target state="translated">입력 데이터는 일반 속성 액세스를 통해 이루어집니다. 사용 예 :</target>
        </trans-unit>
        <trans-unit id="cdb527421c9c06ec85d558465c535244b7d3f645" translate="yes" xml:space="preserve">
          <source>Install with pip</source>
          <target state="translated">pip로 설치</target>
        </trans-unit>
        <trans-unit id="46f509ef372988eff1d4c7c989eadb78d59c046c" translate="yes" xml:space="preserve">
          <source>It will automatically get today&amp;rsquo;s data at import time, if used within the
interactive interpreter.  Otherwise, the date is found by introspection of the
path and file name from which</source>
          <target state="translated">대화 형 인터프리터 내에서 사용하는 경우 가져올 때 오늘의 데이터를 자동으로 가져옵니다. 그렇지 않으면 날짜는 경로 및 파일 이름을 검사하여 찾습니다.</target>
        </trans-unit>
        <trans-unit id="28525f7708649489e52e7a247e826db23f0b0c85" translate="yes" xml:space="preserve">
          <source>Might be useful for lazy Pythonistas and speedhackers.</source>
          <target state="translated">게으른 Pythonistas 및 스피드 해커에게 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="612eecb9314a4b1cb2288e1c7b1f85d28e6af9a4" translate="yes" xml:space="preserve">
          <source>Note that the same filename introspection of year/day also works for automated
submission. There&amp;rsquo;s also introspection of the &amp;ldquo;level&amp;rdquo;, i.e. part a or part b,
aocd can automatically determine if you have already completed part a or not
and submit your answer for the correct part accordingly. In this case, just use:</source>
          <target state="translated">동일한 파일 이름 인트로 스펙 션 (연 / 일)도 자동 제출에 대해 작동합니다. 또한 &quot;레벨&quot;에 대한 내성이 있습니다. 즉, 파트 a 또는 파트 b, aocd는 자동으로 파트 a를 완료했는지 여부를 결정하고 그에 따라 올바른 파트에 대한 답변을 제출할 수 있습니다. 이 경우 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="528a1b37f5723c9b679e7c37e9f60ae9dee0104c" translate="yes" xml:space="preserve">
          <source>OOP-style interfaces</source>
          <target state="translated">OOP 스타일 인터페이스</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">빠른 시작</target>
        </trans-unit>
        <trans-unit id="8e6764df4041d2c9aea627de23941fd71b1edd7a" translate="yes" xml:space="preserve">
          <source>Solutions can be executed using &lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins&quot;&gt;setuptools style plugins&lt;/a&gt; for your code, i.e. the</source>
          <target state="translated">코드에 대한 &lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins&quot;&gt;setuptools 스타일 플러그인&lt;/a&gt; 을 사용하여 솔루션을 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9218f9b92da5694d9a6faa484618216027baf3af" translate="yes" xml:space="preserve">
          <source>Submitting answers is also by regular attribute access. Any incorrect answers you submitted are remembered, and aocd will prevent you from attempting to submit the same incorrect value twice:</source>
          <target state="translated">답변 제출은 일반 속성 액세스로도 이루어집니다. 제출 한 모든 오답은 기억되며 aocd는 동일한 잘못된 값을 두 번 제출하는 것을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="7d394ae7b0313fdc168ce960bc0b8cb1f11d1c40" translate="yes" xml:space="preserve">
          <source>The response message from AoC will be printed in the terminal. If you gave
the right answer, then the puzzle will be refreshed in your web browser
(so you can read the instructions for the next part, for example).
&lt;strong&gt;Proceed with caution!&lt;/strong&gt; If you submit wrong guesses, your user &lt;strong&gt;WILL&lt;/strong&gt;
get rate-limited by Eric, so don&amp;rsquo;t call submit until you&amp;rsquo;re fairly confident
you have a correct answer!</source>
          <target state="translated">AoC의 응답 메시지가 터미널에 인쇄됩니다. 정답을 제시하면 웹 브라우저에서 퍼즐이 새로 고쳐집니다 (예를 들어 다음 부분의 지침을 읽을 수 있음). &lt;strong&gt;조심해서 진행해라! &lt;/strong&gt;잘못된 추측을 제출하면 사용자 &lt;strong&gt;가&lt;/strong&gt; Eric에 의해 요금 제한을 받게되므로 정답이 확실 할 때까지 submit을 호출하지 마십시오!</target>
        </trans-unit>
        <trans-unit id="824fff4f7103f9014fa581a196185b55db11db35" translate="yes" xml:space="preserve">
          <source>This is a cookie which is set when you login to AoC.  You can find it with
your browser inspector.  If you&amp;rsquo;re hacking on AoC at all you probably already
know these kind of tricks, but if you need help with that part then you can
&lt;a href=&quot;https://github.com/wimglenn/advent-of-code/issues/1&quot;&gt;look here&lt;/a&gt;.</source>
          <target state="translated">AoC에 로그인 할 때 설정되는 쿠키입니다. 브라우저 검사기로 찾을 수 있습니다. AoC를 해킹하는 경우 이러한 종류의 트릭을 이미 알고있을 것입니다.하지만 해당 부분에 대한 도움이 필요하면 &lt;a href=&quot;https://github.com/wimglenn/advent-of-code/issues/1&quot;&gt;여기를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="775949f19085bf88678d7ee5fc7179e45803737b" translate="yes" xml:space="preserve">
          <source>This means your filenames should be something sensible. The examples below
should all parse correctly, because they have digits in the path that are
unambiguously recognisable as AoC years (2015+) or days (1-25).</source>
          <target state="translated">이것은 파일 이름이 합리적인 것이어야 함을 의미합니다. 아래의 예는 경로에 AoC 연도 (2015+) 또는 일 (1-25)로 명확하게 인식 할 수있는 숫자가 있으므로 모두 올바르게 구문 분석되어야합니다.</target>
        </trans-unit>
        <trans-unit id="67b23c30ea0f0aa806f36de17699b8e950396d29" translate="yes" xml:space="preserve">
          <source>To see an example of how to setup the entry-point for your code, look at &lt;a href=&quot;https://github.com/wimglenn/advent-of-code-sample&quot;&gt;advent-of-code-sample&lt;/a&gt; for some inspiration. After dumping a bunch of session tokens into</source>
          <target state="translated">코드의 진입 점을 설정하는 방법의 예를 보려면 &lt;a href=&quot;https://github.com/wimglenn/advent-of-code-sample&quot;&gt;코드 샘플 출현&lt;/a&gt; 에서 영감을 얻으십시오. 많은 세션 토큰을 덤핑 한 후</target>
        </trans-unit>
        <trans-unit id="77b872c43b6a974ae65c90fdf0501b3580f30d8a" translate="yes" xml:space="preserve">
          <source>Verify your code against multiple different inputs</source>
          <target state="translated">여러 다른 입력에 대해 코드 확인</target>
        </trans-unit>
        <trans-unit id="ec801f28f8053d098edbbf492efa62800c748382" translate="yes" xml:space="preserve">
          <source>aoc</source>
          <target state="translated">AOC</target>
        </trans-unit>
        <trans-unit id="8f784f7d3dcb7ef84fefb5b477c2179f480b3486" translate="yes" xml:space="preserve">
          <source>aocd</source>
          <target state="translated">aocd</target>
        </trans-unit>
        <trans-unit id="68175c7c1f5063a4a4525895cf8a3a6402462970" translate="yes" xml:space="preserve">
          <source>aocd.get_data()</source>
          <target state="translated">aocd.get_data ()</target>
        </trans-unit>
        <trans-unit id="4636a20401bba819d6bbde7a25493e482d2dfa4b" translate="yes" xml:space="preserve">
          <source>console script:</source>
          <target state="translated">콘솔 스크립트 :</target>
        </trans-unit>
        <trans-unit id="e8b70ff60cdffd656d93028218065671f39e131c" translate="yes" xml:space="preserve">
          <source>environment
variable with the desired location.</source>
          <target state="translated">원하는 위치가있는 환경 변수.</target>
        </trans-unit>
        <trans-unit id="d9d7dfd7b48c9ea92ca6b64d16c353f0dfe33606" translate="yes" xml:space="preserve">
          <source>function
instead and have a nice day!</source>
          <target state="translated">대신 기능하고 좋은 하루 되세요!</target>
        </trans-unit>
        <trans-unit id="5b6491462ec4fa1e8f3abe89ea556e6aabd610f1" translate="yes" xml:space="preserve">
          <source>module was imported.</source>
          <target state="translated">모듈을 가져 왔습니다.</target>
        </trans-unit>
        <trans-unit id="b5335edcecc401d1dda3c9d9fd1e901d60b0c742" translate="yes" xml:space="preserve">
          <source>pip install advent-of-code-wim</source>
          <target state="translated">pip install advent-of-code-wim</target>
        </trans-unit>
        <trans-unit id="4dee32b918a39a51856fcda6beecfa1d512a63c1" translate="yes" xml:space="preserve">
          <source>pkg_resources</source>
          <target state="translated">pkg_resources</target>
        </trans-unit>
        <trans-unit id="b49ab0b753786ae2ed4ea7fa9bca6b235b0902bf" translate="yes" xml:space="preserve">
          <source>problem_one.py</source>
          <target state="translated">problem_one.py</target>
        </trans-unit>
        <trans-unit id="ce3cf783516d45ba23bcb0d2c7abffc4e196f1e6" translate="yes" xml:space="preserve">
          <source>runner will kill your code if it takes more than 60 seconds, you can increase/decrease this by passing a command-line option, e.g.</source>
          <target state="translated">60 초 이상 걸리면 runner에서 코드를 종료합니다. 예를 들어 명령 줄 옵션을 전달하여이를 늘리거나 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4c30e6b0c1d4ae031c38bf56b0213f760f89ca3" translate="yes" xml:space="preserve">
          <source>saves puzzle inputs, answers, names, and your bad guesses to avoid hitting
the AoC servers any more often than strictly necessary (this also speeds things up).
All data is persisted in plain text files under</source>
          <target state="translated">는 퍼즐 입력, 답변, 이름 및 잘못된 추측을 저장하여 AoC 서버에 꼭 필요한 것보다 더 자주 발생하지 않도록합니다 (이는 또한 속도를 높입니다). 모든 데이터는 아래의 일반 텍스트 파일로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="1a25a44a4eef5700554e711d2742dd538985ee78" translate="yes" xml:space="preserve">
          <source>will not work, so don&amp;rsquo;t do that.  If
you don&amp;rsquo;t like weird frame hacks, just use the</source>
          <target state="translated">작동하지 않으므로 그렇게하지 마십시오. 이상한 프레임 해킹이 마음에 들지 않으면</target>
        </trans-unit>
        <trans-unit id="140c6c5361f76963bfcf7b9eebb0b1f32d1c9ce0" translate="yes" xml:space="preserve">
          <source>you could do something like this by running the</source>
          <target state="translated">다음을 실행하여 이와 같은 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c76313496eb19c8df7b0e3a65d156c64459b345" translate="yes" xml:space="preserve">
          <source>~/.config/aocd</source>
          <target state="translated">~ / .config / aocd</target>
        </trans-unit>
        <trans-unit id="71fe30b39f5e7bffad492e4b2c5f0342e12387c3" translate="yes" xml:space="preserve">
          <source>~/.config/aocd/token</source>
          <target state="translated">~ / .config / aocd / token</target>
        </trans-unit>
        <trans-unit id="3f8f384180c34215ff4d24469fe7e751d30a1376" translate="yes" xml:space="preserve">
          <source>~/.config/aocd/tokens.json</source>
          <target state="translated">~ / .config / aocd / tokens.json</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
