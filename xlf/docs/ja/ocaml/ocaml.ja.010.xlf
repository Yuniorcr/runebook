<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="ocaml">
    <body>
      <group id="ocaml">
        <trans-unit id="13f248c7dff46b33a22350ddd81e8c58ed82286f" translate="yes" xml:space="preserve">
          <source>Return an integer identifying this object, unique for the current execution of the program. The generic comparison and hashing functions are based on this integer. When an object is obtained by unmarshaling, the id is refreshed, and thus different from the original object. As a consequence, the internal invariants of data structures such as hash table or sets containing objects are broken after unmarshaling the data structures.</source>
          <target state="translated">このオブジェクトを識別する整数を返します。一般的な比較およびハッシュ関数は、この整数に基づいています。アンマーシャリングによってオブジェクトが得られると、id はリフレッシュされ、その結果、元のオブジェクトとは異なります。その結果、ハッシュテーブルやオブジェクトを含むセットのようなデータ構造の内部不変性は、データ構造をアンマーシャリングした後に壊れてしまいます。</target>
        </trans-unit>
        <trans-unit id="804397fe4360a7b93b1321b1e8d68c91a432d7e1" translate="yes" xml:space="preserve">
          <source>Return one binding of the given map, or &lt;code&gt;None&lt;/code&gt; if the map is empty.</source>
          <target state="translated">指定されたマップのバインディングを1つ返すか、マップが空の場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bc7bb0cd7be56d08766ada3849b3bc9cf97fa116" translate="yes" xml:space="preserve">
          <source>Return one binding of the given map, or &lt;code&gt;None&lt;/code&gt; if the map is empty. Which binding is chosen is unspecified, but equal bindings will be chosen for equal maps.</source>
          <target state="translated">指定されたマップのバインディングを1つ返すか、マップが空の場合は &lt;code&gt;None&lt;/code&gt; を返します。どのバインディングが選択されるかは指定されていませんが、等しいマップに対して等しいバインディングが選択されます。</target>
        </trans-unit>
        <trans-unit id="230572b81a15aeef6cca691ef685c7861b2c3403" translate="yes" xml:space="preserve">
          <source>Return one binding of the given map, or raise &lt;code&gt;Not_found&lt;/code&gt; if the map is empty.</source>
          <target state="translated">指定されたマップのバインディングを1つ返すか、マップが空の場合は &lt;code&gt;Not_found&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="124a277abe9168405efebc5229d58eb1ce179fff" translate="yes" xml:space="preserve">
          <source>Return one binding of the given map, or raise &lt;code&gt;Not_found&lt;/code&gt; if the map is empty. Which binding is chosen is unspecified, but equal bindings will be chosen for equal maps.</source>
          <target state="translated">指定されたマップのバインディングを1つ返すか、マップが空の場合は &lt;code&gt;Not_found&lt;/code&gt; を発生させます。どのバインディングが選択されるかは指定されていませんが、等しいマップに対して等しいバインディングが選択されます。</target>
        </trans-unit>
        <trans-unit id="1ebf20277e5047adf3133b397b741b144bdd0bde" translate="yes" xml:space="preserve">
          <source>Return one element of the given set, or &lt;code&gt;None&lt;/code&gt; if the set is empty.</source>
          <target state="translated">指定されたセットの1つの要素を返すか、セットが空の場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7c4448d26f33d8f4ec291a782cfccb39dca2a6be" translate="yes" xml:space="preserve">
          <source>Return one element of the given set, or &lt;code&gt;None&lt;/code&gt; if the set is empty. Which element is chosen is unspecified, but equal elements will be chosen for equal sets.</source>
          <target state="translated">指定されたセットの1つの要素を返すか、セットが空の場合は &lt;code&gt;None&lt;/code&gt; を返します。どの要素が選択されるかは指定されていませんが、等しいセットに対して等しい要素が選択されます。</target>
        </trans-unit>
        <trans-unit id="e50b9d9e24aa0f6fb2f8db6ce9e9c79af9f3eba9" translate="yes" xml:space="preserve">
          <source>Return one element of the given set, or raise &lt;code&gt;Not_found&lt;/code&gt; if the set is empty.</source>
          <target state="translated">指定されたセットの1つの要素を返すか、セットが空の場合は &lt;code&gt;Not_found&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="b24191c024f2ae60011ab6b0eaa33a89e12e8bc5" translate="yes" xml:space="preserve">
          <source>Return one element of the given set, or raise &lt;code&gt;Not_found&lt;/code&gt; if the set is empty. Which element is chosen is unspecified, but equal elements will be chosen for equal sets.</source>
          <target state="translated">指定されたセットの1つの要素を返すか、セットが空の場合は &lt;code&gt;Not_found&lt;/code&gt; を発生させます。どの要素が選択されるかは指定されていませんが、等しいセットに対して等しい要素が選択されます。</target>
        </trans-unit>
        <trans-unit id="a2668767821e82c723e2b93b0851a6112d9b6d7c" translate="yes" xml:space="preserve">
          <source>Return statistics on the table.</source>
          <target state="translated">テーブルの統計情報を返します。</target>
        </trans-unit>
        <trans-unit id="39c19f3fe502749c27276fc6e62020dc173d3ed4" translate="yes" xml:space="preserve">
          <source>Return statistics on the table. The numbers are, in order: table length, number of entries, sum of bucket lengths, smallest bucket length, median bucket length, biggest bucket length.</source>
          <target state="translated">テーブルの統計情報を返します。数値は、テーブルの長さ、エントリ数、バケット長の合計、バケット長の最小値、バケット長の中央値、バケット長の最大値の順になります。</target>
        </trans-unit>
        <trans-unit id="3b14bc9c2b106d546f0f2fd2df64962aa24dc4cb" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;n&lt;/code&gt;-th element of the given list.</source>
          <target state="translated">指定されたリストの &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。</target>
        </trans-unit>
        <trans-unit id="26efcbf81d6b8b4c2e871a9a53668bd5e1a815fe" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;n&lt;/code&gt;-th element of the given list. The first element (head of the list) is at position 0.</source>
          <target state="translated">指定されたリストの &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。最初の要素（リストの先頭）は位置0にあります。</target>
        </trans-unit>
        <trans-unit id="439f68fc82739159c89fa8bd3a099b303fff11d0" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;n&lt;/code&gt;-th element of the given list. The first element (head of the list) is at position 0. Return &lt;code&gt;None&lt;/code&gt; if the list is too short.</source>
          <target state="translated">指定されたリストの &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。最初の要素（リストの先頭）は位置0にあります。リストが短すぎる場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="880749007a41766d110001af9265fa1871ef60e1" translate="yes" xml:space="preserve">
          <source>Return the ASCII code of the argument.</source>
          <target state="translated">引数のASCIIコードを返します。</target>
        </trans-unit>
        <trans-unit id="62309110a8b557ea8cae3a1d13024ea105ebe175" translate="yes" xml:space="preserve">
          <source>Return the absolute position in the input text of the beginning of the matched string (i.e. the offset of the first character of the matched string). The first character read from the input text has offset 0.</source>
          <target state="translated">一致した文字列の先頭の入力テキスト内の絶対位置(すなわち、一致した文字列の最初の文字のオフセット)を返します。入力テキストから読み込まれた最初の文字のオフセットは 0 です。</target>
        </trans-unit>
        <trans-unit id="a38456990b8f53a5e41580437c2b772f29fbbcd5" translate="yes" xml:space="preserve">
          <source>Return the absolute position in the input text of the end of the matched string (i.e. the offset of the first character after the matched string). The first character read from the input text has offset 0.</source>
          <target state="translated">一致した文字列の末尾の入力テキスト内の絶対位置(すなわち、一致した文字列の後の最初の文字のオフセット)を返します。入力テキストから読み込まれた最初の文字のオフセットは 0 です。</target>
        </trans-unit>
        <trans-unit id="3d6cef13623598e5301ce130fae4c314144a19cd" translate="yes" xml:space="preserve">
          <source>Return the absolute value of its argument.</source>
          <target state="translated">引数の絶対値を返します。</target>
        </trans-unit>
        <trans-unit id="0f4af466676d95e077ec7d0c0eb365f94b3b64d5" translate="yes" xml:space="preserve">
          <source>Return the absolute value of the argument.</source>
          <target state="translated">引数の絶対値を返します。</target>
        </trans-unit>
        <trans-unit id="17ea151ac7470057db09f6562f8d1f70a4d6035e" translate="yes" xml:space="preserve">
          <source>Return the absolute value of the argument. Note that this may be negative if the argument is &lt;code&gt;min_int&lt;/code&gt;.</source>
          <target state="translated">引数の絶対値を返します。引数が &lt;code&gt;min_int&lt;/code&gt; の場合、これは負になる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d9a4944787a25989444442aa9e3a355615036d44" translate="yes" xml:space="preserve">
          <source>Return the address of the given socket.</source>
          <target state="translated">指定したソケットのアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="1d88b6381fa842d1f4f6342c5da6ca29e60697e5" translate="yes" xml:space="preserve">
          <source>Return the address of the host connected to the given socket.</source>
          <target state="translated">指定したソケットに接続されているホストのアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="b23d1b53534dc72170ae7e7df22ce7e3b6e63a0b" translate="yes" xml:space="preserve">
          <source>Return the binding with the smallest key in a given map (with respect to the &lt;code&gt;Ord.compare&lt;/code&gt; ordering), or raise &lt;code&gt;Not_found&lt;/code&gt; if the map is empty.</source>
          <target state="translated">指定されたマップ（ &lt;code&gt;Ord.compare&lt;/code&gt; の順序に関して）で最小のキーを持つバインディングを返すか、マップが空の場合は &lt;code&gt;Not_found&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="70bcb73b7fd699f6c85a0c103b4b8b010b19a5fd" translate="yes" xml:space="preserve">
          <source>Return the binding with the smallest key in the given map (with respect to the &lt;code&gt;Ord.compare&lt;/code&gt; ordering), or &lt;code&gt;None&lt;/code&gt; if the map is empty.</source>
          <target state="translated">指定されたマップ内で最小のキーを持つバインディングを返します（ &lt;code&gt;Ord.compare&lt;/code&gt; の順序に関して）。マップが空の場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a6becf53316957bcff27455506fc07eb7ab5f5b3" translate="yes" xml:space="preserve">
          <source>Return the character with the given ASCII code.</source>
          <target state="translated">与えられたASCIIコードを持つ文字を返します。</target>
        </trans-unit>
        <trans-unit id="4730bd2de886423d30f0d19b51f0a1b9479a1640" translate="yes" xml:space="preserve">
          <source>Return the class of the given floating-point number: normal, subnormal, zero, infinite, or not a number.</source>
          <target state="translated">与えられた浮動小数点数のクラスを返します。</target>
        </trans-unit>
        <trans-unit id="297faae34a2f7b1feb5518dd123e21cb6367aaf9" translate="yes" xml:space="preserve">
          <source>Return the current count of the stream elements, i.e.</source>
          <target state="translated">ストリーム要素の現在のカウントを返します。</target>
        </trans-unit>
        <trans-unit id="f1000e714fb7aea64ea12d37a444505d73c718ac" translate="yes" xml:space="preserve">
          <source>Return the current count of the stream elements, i.e. the number of the stream elements discarded.</source>
          <target state="translated">ストリーム要素の現在の数、つまり破棄されたストリーム要素の数を返します。</target>
        </trans-unit>
        <trans-unit id="cf89807c32bb79e188d60fe9f5c2ecba00abf545" translate="yes" xml:space="preserve">
          <source>Return the current geometry of the formatter</source>
          <target state="translated">フォーマッタの現在のジオメトリを返します。</target>
        </trans-unit>
        <trans-unit id="9ca644d1cd0b6c0e16996557a51ed8ab650ed7de" translate="yes" xml:space="preserve">
          <source>Return the current output functions of the pretty-printer, including line splitting and indentation functions.</source>
          <target state="translated">行分割やインデント機能を含む、現在のプリティプリンタの出力機能を返します。</target>
        </trans-unit>
        <trans-unit id="14b2c9e70475a936059f7c3930230d44b092c2c3" translate="yes" xml:space="preserve">
          <source>Return the current output functions of the pretty-printer, including line splitting and indentation functions. Useful to record the current setting and restore it afterwards.</source>
          <target state="translated">行分割やインデント機能など、現在のプリティプリンタの出力機能を返します。現在の設定を記録しておき、後から復元するのに便利です。</target>
        </trans-unit>
        <trans-unit id="b794103dee584cdb1d544ad3755a731469d7fb13" translate="yes" xml:space="preserve">
          <source>Return the current output functions of the standard pretty-printer.</source>
          <target state="translated">標準プリティプリンタの現在の出力関数を返します。</target>
        </trans-unit>
        <trans-unit id="eff9b824a0e019fcb1034af9bd056ef1df654d9b" translate="yes" xml:space="preserve">
          <source>Return the current reading position for the given channel.</source>
          <target state="translated">指定されたチャンネルの現在の読み取り位置を返します。</target>
        </trans-unit>
        <trans-unit id="afe223ce43f4b699ad9d10edf014aa134257db24" translate="yes" xml:space="preserve">
          <source>Return the current semantic tag operation functions of the standard pretty-printer.</source>
          <target state="translated">標準プリティプリンタの現在の意味タグ操作関数を返します。</target>
        </trans-unit>
        <trans-unit id="5bd7128a788ba19d6246c464eeb82cab7819d195" translate="yes" xml:space="preserve">
          <source>Return the current size of the free space inside the minor heap.</source>
          <target state="translated">マイナーヒープ内の空き領域の現在のサイズを返します。</target>
        </trans-unit>
        <trans-unit id="1c243dd17b2c9d8d725b1a348f37d36f5f593f9a" translate="yes" xml:space="preserve">
          <source>Return the current state of the generator used by the basic functions.</source>
          <target state="translated">基本関数で使用するジェネレータの現在の状態を返します。</target>
        </trans-unit>
        <trans-unit id="943c6a72d4cef970955cf8a0baf23383f000fbb7" translate="yes" xml:space="preserve">
          <source>Return the current status of a boolean-valued option in the given socket.</source>
          <target state="translated">指定されたソケットのブール値オプションの現在の状態を返します。</target>
        </trans-unit>
        <trans-unit id="88480a696e89616baae30b34bdb2d51b04386c45" translate="yes" xml:space="preserve">
          <source>Return the current status of tag-marking operations.</source>
          <target state="translated">タグマーク操作の現在の状態を返します。</target>
        </trans-unit>
        <trans-unit id="3cb446fa637b6b8d3341bc3ef1f6743acef08ad0" translate="yes" xml:space="preserve">
          <source>Return the current status of tag-printing operations.</source>
          <target state="translated">タグ印刷操作の現在の状態を返します。</target>
        </trans-unit>
        <trans-unit id="69bd3c1db63c0329eef857a80c044eca2802fdb7" translate="yes" xml:space="preserve">
          <source>Return the current status of the given interval timer.</source>
          <target state="translated">指定されたインターバルタイマーの現在の状態を返します。</target>
        </trans-unit>
        <trans-unit id="98e82fae89baddf835782503fb6225d243eabc1f" translate="yes" xml:space="preserve">
          <source>Return the current time since 00:00:00 GMT, Jan.</source>
          <target state="translated">00:00:00:00 GMT,Jan.からの現在時刻を返します。</target>
        </trans-unit>
        <trans-unit id="0a38919a96af9027370dc236253891b359d8cae5" translate="yes" xml:space="preserve">
          <source>Return the current time since 00:00:00 GMT, Jan. 1, 1970, in seconds.</source>
          <target state="translated">1970年1月1日 00:00:00:00 GMTからの現在時刻を秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="f6196ac3aa3eec6746fc840473651108f002d8ef" translate="yes" xml:space="preserve">
          <source>Return the current values of the GC parameters in a &lt;code&gt;control&lt;/code&gt; record.</source>
          <target state="translated">&lt;code&gt;control&lt;/code&gt; レコードのGCパラメータの現在の値を返します。</target>
        </trans-unit>
        <trans-unit id="44719d7e8bb31855760dce4861d3c60c50d390cf" translate="yes" xml:space="preserve">
          <source>Return the current values of the memory management counters in a &lt;code&gt;stat&lt;/code&gt; record.</source>
          <target state="translated">&lt;code&gt;stat&lt;/code&gt; レコードのメモリ管理カウンタの現在の値を返します。</target>
        </trans-unit>
        <trans-unit id="2b116d8325e3d4fc3b7bbb805c51a92a5e4ca950" translate="yes" xml:space="preserve">
          <source>Return the current values of the memory management counters in a &lt;code&gt;stat&lt;/code&gt; record. This function examines every heap block to get the statistics.</source>
          <target state="translated">&lt;code&gt;stat&lt;/code&gt; レコードのメモリ管理カウンタの現在の値を返します。この関数は、すべてのヒープブロックを調べて統計を取得します。</target>
        </trans-unit>
        <trans-unit id="b51f594db2ca91923182a8a03e87942bbdf3dd65" translate="yes" xml:space="preserve">
          <source>Return the current working directory of the process.</source>
          <target state="translated">プロセスの現在の作業ディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="b9fdf5ba7864c712d65c10e01b2df194f8c4798a" translate="yes" xml:space="preserve">
          <source>Return the current writing position for the given channel.</source>
          <target state="translated">指定されたチャンネルの現在の書き込み位置を返します。</target>
        </trans-unit>
        <trans-unit id="b8a1bd4616f338e6148dd3304b4f698e1f7dfc7e" translate="yes" xml:space="preserve">
          <source>Return the current writing position for the given channel. Does not work on channels opened with the &lt;code&gt;Open_append&lt;/code&gt; flag (returns unspecified results).</source>
          <target state="translated">指定されたチャネルの現在の書き込み位置を返します。 &lt;code&gt;Open_append&lt;/code&gt; フラグで開かれたチャネルでは機能しません（不特定の結果を返します）。</target>
        </trans-unit>
        <trans-unit id="2343a41b996d55a8d25ecddc78423dc6b799a99f" translate="yes" xml:space="preserve">
          <source>Return the descriptor corresponding to an input channel.</source>
          <target state="translated">入力チャンネルに対応するディスクリプタを返します。</target>
        </trans-unit>
        <trans-unit id="8911533c9b1c801a828b9754a01fdb4faa39a9bf" translate="yes" xml:space="preserve">
          <source>Return the descriptor corresponding to an output channel.</source>
          <target state="translated">出力チャネルに対応するディスクリプタを返します。</target>
        </trans-unit>
        <trans-unit id="9e02fc3737cd0829b6678335c27fbe932f631180" translate="yes" xml:space="preserve">
          <source>Return the digest of the file whose name is given.</source>
          <target state="translated">名前が指定されたファイルのダイジェストを返します。</target>
        </trans-unit>
        <trans-unit id="b515b9e20b23a0a3279dcddb264ee7e4e625794c" translate="yes" xml:space="preserve">
          <source>Return the digest of the given byte sequence.</source>
          <target state="translated">与えられたバイト列のダイジェストを返します。</target>
        </trans-unit>
        <trans-unit id="fb9443c254d54b0479884ecc92745eee7fbc192c" translate="yes" xml:space="preserve">
          <source>Return the digest of the given string.</source>
          <target state="translated">与えられた文字列のダイジェストを返します。</target>
        </trans-unit>
        <trans-unit id="f91e50e6edb1482d99464ee157aeb985e2039702" translate="yes" xml:space="preserve">
          <source>Return the effective group id under which the process runs.</source>
          <target state="translated">プロセスが実行されている有効なグループIDを返します。</target>
        </trans-unit>
        <trans-unit id="119bac2074c3825d2b1c5479ab32d82aea1ad7a6" translate="yes" xml:space="preserve">
          <source>Return the effective group id under which the process runs. On Windows, always return &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">プロセスが実行される有効なグループIDを返します。Windowsでは、常に &lt;code&gt;1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fbe498ef01b9bf595af9e3d24374ea71398f98f1" translate="yes" xml:space="preserve">
          <source>Return the effective user id under which the process runs.</source>
          <target state="translated">プロセスが実行されている有効なユーザIDを返します。</target>
        </trans-unit>
        <trans-unit id="0f897629460b4a3a8c93f1dc57b0ec69c8498278" translate="yes" xml:space="preserve">
          <source>Return the effective user id under which the process runs. On Windows, always return &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">プロセスが実行される有効なユーザーIDを返します。Windowsでは、常に &lt;code&gt;1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="68010ab93fd161a3fbf3c3cb740b170262747251" translate="yes" xml:space="preserve">
          <source>Return the error condition associated with the given socket, and clear it.</source>
          <target state="translated">与えられたソケットに関連付けられたエラー条件を返し、それをクリアします。</target>
        </trans-unit>
        <trans-unit id="e4e4079fcd2deec8751ab333613cb019236f602f" translate="yes" xml:space="preserve">
          <source>Return the execution times of the process.</source>
          <target state="translated">プロセスの実行時間を返します。</target>
        </trans-unit>
        <trans-unit id="361c27e98de822a527a95a05249324e1c20ba145" translate="yes" xml:space="preserve">
          <source>Return the execution times of the process. On Windows, it is partially implemented, will not report timings for child processes.</source>
          <target state="translated">プロセスの実行時間を返します。Windowsでは部分的に実装されており、子プロセスのタイミングは報告されません。</target>
        </trans-unit>
        <trans-unit id="e8f74d0d37d740c194c05fdbe3ea6ce00b232066" translate="yes" xml:space="preserve">
          <source>Return the first component of a pair.</source>
          <target state="translated">ペアの最初のコンポーネントを返します。</target>
        </trans-unit>
        <trans-unit id="5c835e8304c5686221cc688117adb8f1cb010c68" translate="yes" xml:space="preserve">
          <source>Return the first dimension of the given three-dimensional Bigarray.</source>
          <target state="translated">与えられた3次元Bigarrayの1次元目を返します。</target>
        </trans-unit>
        <trans-unit id="061442e7ed48f7ee1e9d425b6ff921b12a846bca" translate="yes" xml:space="preserve">
          <source>Return the first dimension of the given two-dimensional Bigarray.</source>
          <target state="translated">与えられた2次元Bigarrayの1次元目を返します。</target>
        </trans-unit>
        <trans-unit id="536a414181a39a9345425eff5341faaa394d3b1b" translate="yes" xml:space="preserve">
          <source>Return the first element of the given list.</source>
          <target state="translated">与えられたリストの最初の要素を返します。</target>
        </trans-unit>
        <trans-unit id="3d8fffadcb1b4ea149990ff4a30172b6ca997a6a" translate="yes" xml:space="preserve">
          <source>Return the first element of the stream and remove it from the stream.</source>
          <target state="translated">ストリームの最初の要素を返し、ストリームから削除します。</target>
        </trans-unit>
        <trans-unit id="56ffa9e9d4748719dcf1e8a5b7e7590761c6fbf4" translate="yes" xml:space="preserve">
          <source>Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'double format' bit layout, is the given &lt;code&gt;int64&lt;/code&gt;.</source>
          <target state="translated">IEEE754浮動小数点の「 &lt;code&gt;int64&lt;/code&gt; 」ビットレイアウトに従って、内部表現が指定されたint64である浮動小数点数を返します。</target>
        </trans-unit>
        <trans-unit id="0255e8862323a496e08690b4bf401e80e550ddc1" translate="yes" xml:space="preserve">
          <source>Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'single format' bit layout, is the given &lt;code&gt;int32&lt;/code&gt;.</source>
          <target state="translated">IEEE754浮動小数点の「単一フォーマット」ビットレイアウトによる内部表現が指定された &lt;code&gt;int32&lt;/code&gt; である浮動小数点数を返します。</target>
        </trans-unit>
        <trans-unit id="e9c4c901a6eb1a0977dadc6e69d61a34194fc8ba" translate="yes" xml:space="preserve">
          <source>Return the generic Bigarray corresponding to the given one-dimensional Bigarray.</source>
          <target state="translated">与えられた一次元Bigarrayに対応する汎用Bigarrayを返します。</target>
        </trans-unit>
        <trans-unit id="280989a968e0d4678c5045e97ddbadc039ff9b3c" translate="yes" xml:space="preserve">
          <source>Return the generic Bigarray corresponding to the given three-dimensional Bigarray.</source>
          <target state="translated">与えられた三次元Bigarrayに対応する汎用Bigarrayを返します。</target>
        </trans-unit>
        <trans-unit id="f88ffd32401e861a73d7457bdcce4cdadb2fb158" translate="yes" xml:space="preserve">
          <source>Return the generic Bigarray corresponding to the given two-dimensional Bigarray.</source>
          <target state="translated">与えられた二次元Bigarrayに対応する汎用Bigarrayを返します。</target>
        </trans-unit>
        <trans-unit id="c478846fce1e2099ff024506834a919a61d55151" translate="yes" xml:space="preserve">
          <source>Return the generic Bigarray corresponding to the given zero-dimensional Bigarray.</source>
          <target state="translated">与えられた0次元Bigarrayに対応する汎用Bigarrayを返します。</target>
        </trans-unit>
        <trans-unit id="dc9490bf41cb044a767d8ecda3e6d8e764af360c" translate="yes" xml:space="preserve">
          <source>Return the given file name without its extension, as defined in &lt;a href=&quot;filename#VALextension&quot;&gt;&lt;code&gt;Filename.extension&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;filename#VALextension&quot;&gt; &lt;code&gt;Filename.extension&lt;/code&gt; で&lt;/a&gt;定義されているように、拡張子なしで指定されたファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="cbeb5a95f618b68d571b483955e1a67b0f5d9cd7" translate="yes" xml:space="preserve">
          <source>Return the given file name without its extension, as defined in &lt;a href=&quot;filename#VALextension&quot;&gt;&lt;code&gt;Filename.extension&lt;/code&gt;&lt;/a&gt;. If the extension is empty, the function returns the given file name.</source>
          <target state="translated">&lt;a href=&quot;filename#VALextension&quot;&gt; &lt;code&gt;Filename.extension&lt;/code&gt; で&lt;/a&gt;定義されているように、拡張子なしで指定されたファイル名を返します。拡張子が空の場合、関数は指定されたファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="57c4fc04ba0210ef8155903de749f6f7f8e5fdc1" translate="yes" xml:space="preserve">
          <source>Return the given list without its first element.</source>
          <target state="translated">与えられたリストの最初の要素を除いたものを返します。</target>
        </trans-unit>
        <trans-unit id="6b8379eddac2088338789ec888081d219b0da1fe" translate="yes" xml:space="preserve">
          <source>Return the greater of the two arguments.</source>
          <target state="translated">2つの引数のうち大きい方を返します。</target>
        </trans-unit>
        <trans-unit id="0f018fb98f8c4b680128d0c14134a0a9a3aaac43" translate="yes" xml:space="preserve">
          <source>Return the greater of the two arguments. The result is unspecified if one of the arguments contains the float value &lt;code&gt;nan&lt;/code&gt;.</source>
          <target state="translated">2つの引数のうち大きい方を返します。引数の1つに浮動小数点値 &lt;code&gt;nan&lt;/code&gt; が含まれている場合、結果は指定されません。</target>
        </trans-unit>
        <trans-unit id="a9ec2343573237cf912dc10bb02e5eb00f995cca" translate="yes" xml:space="preserve">
          <source>Return the group id of the user executing the process.</source>
          <target state="translated">プロセスを実行しているユーザのグループIDを返します。</target>
        </trans-unit>
        <trans-unit id="88ec1b3e6c12c625146f2658f42ac0c2f03a9ea6" translate="yes" xml:space="preserve">
          <source>Return the group id of the user executing the process. On Windows, always return &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">プロセスを実行しているユーザーのグループIDを返します。Windowsでは、常に &lt;code&gt;1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a5d4df811b30db7cbb3591895b60fd73a1f6e9be" translate="yes" xml:space="preserve">
          <source>Return the identifier of the given thread.</source>
          <target state="translated">指定したスレッドの識別子を返します。</target>
        </trans-unit>
        <trans-unit id="8437064a240279d144b769a630d31ad04d45b176" translate="yes" xml:space="preserve">
          <source>Return the identifier of the given thread. A thread identifier is an integer that identifies uniquely the thread. It can be used to build data structures indexed by threads.</source>
          <target state="translated">指定したスレッドの識別子を返します。スレッド識別子は、スレッドを一意に識別する整数です。これは、スレッドによってインデックス化されたデータ構造を構築するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="53986db338c1e46f958b3889beea87e4b36619a7" translate="yes" xml:space="preserve">
          <source>Return the information for the file associated with the given descriptor.</source>
          <target state="translated">指定された記述子に関連付けられたファイルの情報を返します。</target>
        </trans-unit>
        <trans-unit id="a89a7e4971dc8dcc70684378487c7e7b89e6ad2b" translate="yes" xml:space="preserve">
          <source>Return the information for the named file.</source>
          <target state="translated">指定されたファイルの情報を返します。</target>
        </trans-unit>
        <trans-unit id="4475177546721efc569c34552e395c02ed640a3a" translate="yes" xml:space="preserve">
          <source>Return the internal representation of the given float according to the IEEE 754 floating-point 'double format' bit layout.</source>
          <target state="translated">IEEE 754 の浮動小数点 'double format' ビットレイアウトに従って、与えられた float の内部表現を返します。</target>
        </trans-unit>
        <trans-unit id="93502737e716d9f9757a61699777755986f72a0e" translate="yes" xml:space="preserve">
          <source>Return the internal representation of the given float according to the IEEE 754 floating-point 'double format' bit layout. Bit 63 of the result represents the sign of the float; bits 62 to 52 represent the (biased) exponent; bits 51 to 0 represent the mantissa.</source>
          <target state="translated">指定された float の内部表現を IEEE 754 の浮動小数点 'double format' ビットレイアウトに従って返します。結果のビット 63 は float の符号を表し、ビット 62 から 52 は (バイアスされた)指数を表し、ビット 51 から 0 は半値を表します。</target>
        </trans-unit>
        <trans-unit id="bacbef4f17d22fba8858dbc5349f881670a4c0ab" translate="yes" xml:space="preserve">
          <source>Return the internal representation of the given float according to the IEEE 754 floating-point 'single format' bit layout.</source>
          <target state="translated">IEEE 754 の浮動小数点「単一フォーマット」ビットレイアウトに従って、与えられた float の内部表現を返します。</target>
        </trans-unit>
        <trans-unit id="7fa42e30351ddbdb81bb4073e644aadc8ef7a5bb" translate="yes" xml:space="preserve">
          <source>Return the internal representation of the given float according to the IEEE 754 floating-point 'single format' bit layout. Bit 31 of the result represents the sign of the float; bits 30 to 23 represent the (biased) exponent; bits 22 to 0 represent the mantissa.</source>
          <target state="translated">IEEE 754 の浮動小数点「単一フォーマット」ビ ッ ト レ イ ア ウ ト に従っ た、 指定 さ れた float の内部表現を返し ます。結果のビット 31 は float の符号を表し、ビット 30 から 23 は (バイアスされた)指数を表し、ビット 22 から 0 は半値を表します。</target>
        </trans-unit>
        <trans-unit id="7f2dc311581df1a1868e9b032519df8c89f6f55c" translate="yes" xml:space="preserve">
          <source>Return the kind of the given Bigarray.</source>
          <target state="translated">与えられたBigarrayの種類を返します。</target>
        </trans-unit>
        <trans-unit id="b55b427355dfe2cbb97cc49a217e5f7072008653" translate="yes" xml:space="preserve">
          <source>Return the layout of the given Bigarray.</source>
          <target state="translated">与えられたBigarrayのレイアウトを返します。</target>
        </trans-unit>
        <trans-unit id="0349c494e937b3174164e1099b097cf8bd380e34" translate="yes" xml:space="preserve">
          <source>Return the length (number of bytes) of the argument.</source>
          <target state="translated">引数の長さ(バイト数)を返します。</target>
        </trans-unit>
        <trans-unit id="01e555b83a9a4fca65f457cd4b9ea918071e72f4" translate="yes" xml:space="preserve">
          <source>Return the length (number of characters) of the given string.</source>
          <target state="translated">与えられた文字列の長さ(文字数)を返します。</target>
        </trans-unit>
        <trans-unit id="dca8f2d37620459f1a9a11d79e584a46d5e19f17" translate="yes" xml:space="preserve">
          <source>Return the length (number of elements) of the given array.</source>
          <target state="translated">指定した配列の長さ(要素数)を返します。</target>
        </trans-unit>
        <trans-unit id="b89723d06bf13b4a9eed201fbc2ea988b3af71eb" translate="yes" xml:space="preserve">
          <source>Return the length (number of elements) of the given floatarray.</source>
          <target state="translated">指定した floatatarray の長さ(要素数)を返します。</target>
        </trans-unit>
        <trans-unit id="7dec03523e932f78284e510187eaa01cf693885e" translate="yes" xml:space="preserve">
          <source>Return the length (number of elements) of the given list.</source>
          <target state="translated">与えられたリストの長さ(要素数)を返します。</target>
        </trans-unit>
        <trans-unit id="48676ed71ee6c65819552a6e630eea359c21817a" translate="yes" xml:space="preserve">
          <source>Return the list of all bindings of the given map.</source>
          <target state="translated">指定したマップのすべてのバインディングのリストを返します。</target>
        </trans-unit>
        <trans-unit id="059abc0a91c72aae1c317f8f630ca2bc69a23869" translate="yes" xml:space="preserve">
          <source>Return the list of all bindings of the given map. The returned list is sorted in increasing order of keys with respect to the ordering &lt;code&gt;Ord.compare&lt;/code&gt;, where &lt;code&gt;Ord&lt;/code&gt; is the argument given to &lt;a href=&quot;map.make&quot;&gt;&lt;code&gt;Map.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたマップのすべてのバインディングのリストを返します。返されるリストは、 &lt;code&gt;Ord.compare&lt;/code&gt; の順序に関して、キーの昇順で並べ替えられます。ここで、 &lt;code&gt;Ord&lt;/code&gt; は&lt;a href=&quot;map.make&quot;&gt; &lt;code&gt;Map.Make&lt;/code&gt; に&lt;/a&gt;指定された引数です。</target>
        </trans-unit>
        <trans-unit id="d4c129d57ead162de7fc3aadfccf44081331889f" translate="yes" xml:space="preserve">
          <source>Return the list of all elements of the given set.</source>
          <target state="translated">与えられた集合のすべての要素のリストを返します。</target>
        </trans-unit>
        <trans-unit id="532b8441cf3070f6987728e45ca3989a31cae74b" translate="yes" xml:space="preserve">
          <source>Return the list of all elements of the given set. The returned list is sorted in increasing order with respect to the ordering &lt;code&gt;Ord.compare&lt;/code&gt;, where &lt;code&gt;Ord&lt;/code&gt; is the argument given to &lt;a href=&quot;set.make&quot;&gt;&lt;code&gt;Set.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたセットのすべての要素のリストを返します。返されるリストは、 &lt;code&gt;Ord.compare&lt;/code&gt; の順序に関して昇順で並べ替えられます。ここで、 &lt;code&gt;Ord&lt;/code&gt; は&lt;a href=&quot;set.make&quot;&gt; &lt;code&gt;Set.Make&lt;/code&gt; に&lt;/a&gt;指定された引数です。</target>
        </trans-unit>
        <trans-unit id="c7165c129eabb85b52248e1854cabbc7dc158870" translate="yes" xml:space="preserve">
          <source>Return the list of compilation units that form the main program (i.e.</source>
          <target state="translated">メインプログラムを構成するコンパイルユニットのリストを返します。</target>
        </trans-unit>
        <trans-unit id="d3ac56bfe9bb0dd951530aefcb02722ef531c1e1" translate="yes" xml:space="preserve">
          <source>Return the list of compilation units that form the main program (i.e. are not dynamically linked).</source>
          <target state="translated">メインプログラムを構成する(すなわち、動的にリンクされていない)コンパイルユニットのリストを返します。</target>
        </trans-unit>
        <trans-unit id="0c5c84e5aab94485a3b9e83f3977f1e9404351c9" translate="yes" xml:space="preserve">
          <source>Return the list of compilation units that form the main program together with those that have been dynamically loaded via &lt;code&gt;loadfile&lt;/code&gt; (and not via &lt;code&gt;loadfile_private&lt;/code&gt;).</source>
          <target state="translated">メインプログラムを形成するコンパイルユニットのリストを、 &lt;code&gt;loadfile&lt;/code&gt; を介して（ &lt;code&gt;loadfile_private&lt;/code&gt; を介してではなく）動的にロードされたものと一緒に返します。</target>
        </trans-unit>
        <trans-unit id="147b9884b8f49168a597ea2ac2e755dd8393f845" translate="yes" xml:space="preserve">
          <source>Return the list of compilation units that have been dynamically loaded via &lt;code&gt;loadfile&lt;/code&gt; (and not via &lt;code&gt;loadfile_private&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;loadfile&lt;/code&gt; を介して（ &lt;code&gt;loadfile_private&lt;/code&gt; を介してではなく）動的にロードされたコンパイル単位のリストを返します。</target>
        </trans-unit>
        <trans-unit id="14b5e5afca199c0c51e4aadc57d91a2bb554477f" translate="yes" xml:space="preserve">
          <source>Return the list of compilation units that have been dynamically loaded via &lt;code&gt;loadfile&lt;/code&gt; (and not via &lt;code&gt;loadfile_private&lt;/code&gt;). Note that compilation units loaded dynamically cannot be unloaded.</source>
          <target state="translated">&lt;code&gt;loadfile&lt;/code&gt; を介して（ &lt;code&gt;loadfile_private&lt;/code&gt; を介してではなく）動的にロードされたコンパイル単位のリストを返します。動的にロードされたコンパイルユニットはアンロードできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a791391dcfd868f76e569d8bb9810a70ac2dd6fb" translate="yes" xml:space="preserve">
          <source>Return the list of groups to which the user executing the process belongs.</source>
          <target state="translated">プロセスを実行しているユーザが所属するグループのリストを返します。</target>
        </trans-unit>
        <trans-unit id="fd25d8674e41c2053e759649badd76e8f1c2b56a" translate="yes" xml:space="preserve">
          <source>Return the list of groups to which the user executing the process belongs. On Windows, always return &lt;code&gt;[|1|]&lt;/code&gt;.</source>
          <target state="translated">プロセスを実行しているユーザーが属するグループのリストを返します。Windowsでは、常に &lt;code&gt;[|1|]&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="432b0e6150bdec0e0f47512d9349f84a5540dcb4" translate="yes" xml:space="preserve">
          <source>Return the login name of the user executing the process.</source>
          <target state="translated">プロセスを実行しているユーザのログイン名を返します。</target>
        </trans-unit>
        <trans-unit id="c523ab0b7ce7c47b28f213568fdcbceb94fe2f9d" translate="yes" xml:space="preserve">
          <source>Return the matched string.</source>
          <target state="translated">一致した文字列を返します。</target>
        </trans-unit>
        <trans-unit id="3209accfd9532d56fc6c3df89e2932af224337e1" translate="yes" xml:space="preserve">
          <source>Return the maximum indentation limit (in characters).</source>
          <target state="translated">インデントの上限(文字数)を返します。</target>
        </trans-unit>
        <trans-unit id="d36d286f55e4acb1d562548251be082a2f530a40" translate="yes" xml:space="preserve">
          <source>Return the n&lt;sup&gt;th&lt;/sup&gt; character in the matched string. The first character corresponds to n = 0.</source>
          <target state="translated">一致した文字列のn&lt;sup&gt;番目の&lt;/sup&gt;文字を返します。最初の文字はn = 0に対応します。</target>
        </trans-unit>
        <trans-unit id="d060a450eacfd8908f0d0e1ea8bdaf949864d47e" translate="yes" xml:space="preserve">
          <source>Return the name of the current working directory.</source>
          <target state="translated">現在の作業ディレクトリの名前を返します。</target>
        </trans-unit>
        <trans-unit id="8a3c277db7014cd8ef6cc35588b182fc8b12e5a8" translate="yes" xml:space="preserve">
          <source>Return the name of the local host.</source>
          <target state="translated">ローカルホストの名前を返します。</target>
        </trans-unit>
        <trans-unit id="2a57bbe820f575de0130805b1e3013f7326c56f0" translate="yes" xml:space="preserve">
          <source>Return the name of the runtime variant the program is running on.</source>
          <target state="translated">プログラムが実行されているランタイムバリアントの名前を返します。</target>
        </trans-unit>
        <trans-unit id="3b2452bf5ae2acb0f47220b39949c4f5c1dc7be9" translate="yes" xml:space="preserve">
          <source>Return the name of the runtime variant the program is running on. This is normally the argument given to &lt;code&gt;-runtime-variant&lt;/code&gt; at compile time, but for byte-code it can be changed after compilation.</source>
          <target state="translated">プログラムが実行されているランタイムバリアントの名前を返します。これは通常、コンパイル時に &lt;code&gt;-runtime-variant&lt;/code&gt; に与えられる引数ですが、バイトコードの場合はコンパイル後に変更できます。</target>
        </trans-unit>
        <trans-unit id="f847d1780107205b367596c4ccb4550703388531" translate="yes" xml:space="preserve">
          <source>Return the names of all files present in the given directory.</source>
          <target state="translated">指定したディレクトリに存在するすべてのファイルの名前を返します。</target>
        </trans-unit>
        <trans-unit id="4f0d068f9a289d9154e8c9134aeea8bb89c3307d" translate="yes" xml:space="preserve">
          <source>Return the names of all files present in the given directory. Names denoting the current directory and the parent directory (&lt;code&gt;&quot;.&quot;&lt;/code&gt; and &lt;code&gt;&quot;..&quot;&lt;/code&gt; in Unix) are not returned. Each string in the result is a file name rather than a complete path. There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order.</source>
          <target state="translated">指定されたディレクトリに存在するすべてのファイルの名前を返します。現在のディレクトリと親ディレクトリを示す名前（Unix &lt;code&gt;&quot;..&quot;&lt;/code&gt; &lt;code&gt;&quot;.&quot;&lt;/code&gt; と「..」）は返されません。結果の各文字列は、完全なパスではなくファイル名です。結果の配列の名前文字列が特定の順序で表示されるという保証はありません。特に、アルファベット順に表示される保証はありません。</target>
        </trans-unit>
        <trans-unit id="3312ceffd4d08b82e00804a61715b59bdfe025ba" translate="yes" xml:space="preserve">
          <source>Return the next entry in a directory.</source>
          <target state="translated">ディレクトリの次のエントリを返します。</target>
        </trans-unit>
        <trans-unit id="ed62118703f31eabe09b7dcc079392d9d8d8d55a" translate="yes" xml:space="preserve">
          <source>Return the number of bindings of a map.</source>
          <target state="translated">マップのバインディングの数を返します。</target>
        </trans-unit>
        <trans-unit id="17ac0ea6114557ed8db7487d9cd7054d24bd7426" translate="yes" xml:space="preserve">
          <source>Return the number of characters currently contained in the buffer.</source>
          <target state="translated">現在バッファに含まれている文字数を返します。</target>
        </trans-unit>
        <trans-unit id="639f930e9c3e7929b330d084069f913aab704216" translate="yes" xml:space="preserve">
          <source>Return the number of dimensions of the given Bigarray.</source>
          <target state="translated">与えられたビグレイの寸法の数を返します。</target>
        </trans-unit>
        <trans-unit id="0f26ed6dbbeca49055e192d75d80831d107ea2ad" translate="yes" xml:space="preserve">
          <source>Return the number of elements in a queue.</source>
          <target state="translated">キュー内の要素数を返します。</target>
        </trans-unit>
        <trans-unit id="594a0db2d4c39d5eb0f40f63644d0784043c13b2" translate="yes" xml:space="preserve">
          <source>Return the number of elements in a stack.</source>
          <target state="translated">スタックの要素数を返します。</target>
        </trans-unit>
        <trans-unit id="6b8a90637291878f581313af8ced21884e6238a9" translate="yes" xml:space="preserve">
          <source>Return the number of elements in a stack. Time complexity O(1)</source>
          <target state="translated">スタックの要素数を返します。時間的な複雑さ O(1)</target>
        </trans-unit>
        <trans-unit id="b060333d4e41f0edefda15da4347ecf299979957" translate="yes" xml:space="preserve">
          <source>Return the number of elements of a set.</source>
          <target state="translated">集合の要素数を返します。</target>
        </trans-unit>
        <trans-unit id="f6f97404a7718cfbd5bf704eec36cf800dd5480d" translate="yes" xml:space="preserve">
          <source>Return the number of times we tried to map huge pages and had to fall back to small pages.</source>
          <target state="translated">巨大なページをマップしようとした回数を返して、小さなページに後退しなければなりませんでした。</target>
        </trans-unit>
        <trans-unit id="a4890281d997ebb5b7c0eade0ae65a3c189fb318" translate="yes" xml:space="preserve">
          <source>Return the number of times we tried to map huge pages and had to fall back to small pages. This is always 0 if &lt;code&gt;OCAMLRUNPARAM&lt;/code&gt; contains &lt;code&gt;H=1&lt;/code&gt;.</source>
          <target state="translated">大きなページをマップしようとして、小さなページにフォールバックしなければならなかった回数を返します。 &lt;code&gt;OCAMLRUNPARAM&lt;/code&gt; に &lt;code&gt;H=1&lt;/code&gt; が含まれている場合、これは常に0です。</target>
        </trans-unit>
        <trans-unit id="8d5b2c94610054b78ee29a7cd3806b95350ccd75" translate="yes" xml:space="preserve">
          <source>Return the one-dimensional Bigarray corresponding to the given generic Bigarray.</source>
          <target state="translated">与えられた汎用Bigarrayに対応する一次元Bigarrayを返します。</target>
        </trans-unit>
        <trans-unit id="9bb97945a3219f3314034bc592a66c7579d2c816" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unix#VALopen_process&quot;&gt;&lt;code&gt;Unix.open_process&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unix#VALopen_process_args&quot;&gt;&lt;code&gt;Unix.open_process_args&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process&quot;&gt; &lt;code&gt;Unix.open_process&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;unix#VALopen_process_args&quot;&gt; &lt;code&gt;Unix.open_process_args&lt;/code&gt; を&lt;/a&gt;介して開かれたプロセスのpidを返します。</target>
        </trans-unit>
        <trans-unit id="2d5205e52283f91c20c83e59223daba0e11d4478" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unix#VALopen_process_full&quot;&gt;&lt;code&gt;Unix.open_process_full&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unix#VALopen_process_args_full&quot;&gt;&lt;code&gt;Unix.open_process_args_full&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_full&quot;&gt; &lt;code&gt;Unix.open_process_full&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;unix#VALopen_process_args_full&quot;&gt; &lt;code&gt;Unix.open_process_args_full&lt;/code&gt; を&lt;/a&gt;介して開かれたプロセスのpidを返します。</target>
        </trans-unit>
        <trans-unit id="7ac5c9764c3e03d14bf34e52a526c179d070e483" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unix#VALopen_process_in&quot;&gt;&lt;code&gt;Unix.open_process_in&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unix#VALopen_process_args_in&quot;&gt;&lt;code&gt;Unix.open_process_args_in&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_in&quot;&gt; &lt;code&gt;Unix.open_process_in&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;unix#VALopen_process_args_in&quot;&gt; &lt;code&gt;Unix.open_process_args_in&lt;/code&gt; を&lt;/a&gt;介して開かれたプロセスのpidを返します。</target>
        </trans-unit>
        <trans-unit id="787ebf8ffca7b6ff030134e3fe40bcc62566b004" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unix#VALopen_process_out&quot;&gt;&lt;code&gt;Unix.open_process_out&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt;&lt;code&gt;Unix.open_process_args_out&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_out&quot;&gt; &lt;code&gt;Unix.open_process_out&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt; &lt;code&gt;Unix.open_process_args_out&lt;/code&gt; を&lt;/a&gt;介して開かれたプロセスのpidを返します。</target>
        </trans-unit>
        <trans-unit id="066d5df069b8686294fade3cbf497b782421071e" translate="yes" xml:space="preserve">
          <source>Return the pid of the parent process.</source>
          <target state="translated">親プロセスの pid を返します。</target>
        </trans-unit>
        <trans-unit id="bede9cb911c8dfcb4a6e2ecbcb8ce5e755123f26" translate="yes" xml:space="preserve">
          <source>Return the pid of the parent process. On Windows: not implemented (because it is meaningless).</source>
          <target state="translated">親プロセスの pid を返します。Windows では:実装されていません (無意味なので)。</target>
        </trans-unit>
        <trans-unit id="95add63bcee088049f2068e23dac1999a30e09b8" translate="yes" xml:space="preserve">
          <source>Return the pid of the process.</source>
          <target state="translated">プロセスの pid を返します。</target>
        </trans-unit>
        <trans-unit id="5d8b1b7080f9a9afc56d8385fe26c87879c9a10f" translate="yes" xml:space="preserve">
          <source>Return the printable hexadecimal representation of the given digest.</source>
          <target state="translated">指定されたダイジェストの印刷可能な16進数表現を返します。</target>
        </trans-unit>
        <trans-unit id="ca3b93e99f769c3e84bd27ac8a6981dd6d6dc951" translate="yes" xml:space="preserve">
          <source>Return the printable representation of the given Internet address.</source>
          <target state="translated">指定したインターネットアドレスの印刷可能な表現を返します。</target>
        </trans-unit>
        <trans-unit id="667620674c47d750eff43fe29b99fe07851842bc" translate="yes" xml:space="preserve">
          <source>Return the printable representation of the given Internet address. See &lt;a href=&quot;unix#VALinet_addr_of_string&quot;&gt;&lt;code&gt;Unix.inet_addr_of_string&lt;/code&gt;&lt;/a&gt; for a description of the printable representation.</source>
          <target state="translated">指定されたインターネットアドレスの印刷可能な表現を返します。印刷可能な表現の説明については、&lt;a href=&quot;unix#VALinet_addr_of_string&quot;&gt; &lt;code&gt;Unix.inet_addr_of_string&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="83e8c2e9bdb415dc67f1776111054bc46b48b196" translate="yes" xml:space="preserve">
          <source>Return the process environment, as an array of strings with the format ``variable=value''.</source>
          <target state="translated">プロセス環境を ``variable=value'' という形式の文字列の配列として返します。</target>
        </trans-unit>
        <trans-unit id="bb812b6a69643735c6f91806d12aa7f6598130de" translate="yes" xml:space="preserve">
          <source>Return the process environment, as an array of strings with the format ``variable=value''. The returned array is empty if the process has special privileges.</source>
          <target state="translated">プロセスの環境を ``variable=value'' という形式の文字列の配列として返します。プロセスが特別な権限を持っている場合、返される配列は空です。</target>
        </trans-unit>
        <trans-unit id="92dc2a363c825786f643ce61f53ad0bd7a2b71eb" translate="yes" xml:space="preserve">
          <source>Return the process environment, as an array of strings with the format ``variable=value''. Unlike &lt;a href=&quot;unix#VALenvironment&quot;&gt;&lt;code&gt;Unix.environment&lt;/code&gt;&lt;/a&gt;, this function returns a populated array even if the process has special privileges. See the documentation for &lt;a href=&quot;unix#VALunsafe_getenv&quot;&gt;&lt;code&gt;Unix.unsafe_getenv&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">「variable = value」の形式の文字列の配列としてプロセス環境を返します。&lt;a href=&quot;unix#VALenvironment&quot;&gt; &lt;code&gt;Unix.environment&lt;/code&gt; &lt;/a&gt;とは異なり、この関数は、プロセスに特別な特権がある場合でも、入力された配列を返します。詳細については、&lt;a href=&quot;unix#VALunsafe_getenv&quot;&gt; &lt;code&gt;Unix.unsafe_getenv&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bc4ff511c6533314bfb899ed62cdf5d01d0264f9" translate="yes" xml:space="preserve">
          <source>Return the processor time, in seconds, used by the program since the beginning of execution.</source>
          <target state="translated">実行開始からプログラムが使用したプロセッサ時間を秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="3fe6f782cc73d7991c0b16d399258b87ea7d7955" translate="yes" xml:space="preserve">
          <source>Return the second component of a pair.</source>
          <target state="translated">ペアの2番目の成分を返します。</target>
        </trans-unit>
        <trans-unit id="a33e3510a3756dde4637fb6206310d406ce2cfc7" translate="yes" xml:space="preserve">
          <source>Return the second dimension of the given three-dimensional Bigarray.</source>
          <target state="translated">与えられた3次元のBIGARRAYの2次元目を返します。</target>
        </trans-unit>
        <trans-unit id="d7386d51069db87a0d398116b234ebf88cb0b9f8" translate="yes" xml:space="preserve">
          <source>Return the second dimension of the given two-dimensional Bigarray.</source>
          <target state="translated">与えられた2次元Bigarrayの2次元目を返します。</target>
        </trans-unit>
        <trans-unit id="01a8ffb964a264b8ead464a4a5f3e109f45cf335" translate="yes" xml:space="preserve">
          <source>Return the set of blocked signals that are currently pending.</source>
          <target state="translated">現在保留中のブロックされたシグナルのセットを返します。</target>
        </trans-unit>
        <trans-unit id="446e78f1f8342de1d12c809b390dda818f81383e" translate="yes" xml:space="preserve">
          <source>Return the size (dimension) of the given one-dimensional Bigarray.</source>
          <target state="translated">与えられた一次元のBigarrayのサイズ(次元)を返します。</target>
        </trans-unit>
        <trans-unit id="152f80d1b4cac00a75ef58117b5c1fc5fb5de070" translate="yes" xml:space="preserve">
          <source>Return the size (number of characters) of the regular file on which the given channel is opened.</source>
          <target state="translated">指定したチャンネルが開かれている正規ファイルのサイズ(文字数)を返します。</target>
        </trans-unit>
        <trans-unit id="934f0833c834fdbff755694a296f32142833ff9f" translate="yes" xml:space="preserve">
          <source>Return the size (number of characters) of the regular file on which the given channel is opened. If the channel is opened on a file that is not a regular file, the result is meaningless.</source>
          <target state="translated">指定したチャンネルが開かれた正規ファイルのサイズ (文字数)を返します。正規ファイルではないファイルでチャンネルが開かれた場合、結果は無意味です。</target>
        </trans-unit>
        <trans-unit id="f2d3e2ad1363d51312c94d1ab2c440f4434cdb5a" translate="yes" xml:space="preserve">
          <source>Return the size (number of characters) of the regular file on which the given channel is opened. If the channel is opened on a file that is not a regular file, the result is meaningless. The returned size does not take into account the end-of-line translations that can be performed when reading from a channel opened in text mode.</source>
          <target state="translated">指定したチャンネルが開かれた正規ファイルのサイズ (文字数)を返します。正規ファイルではないファイルでチャンネルが開かれた場合、結果は無意味です。返されるサイズは、テキストモードで開かれたチャンネルからの読み込み時に実行される行末変換を考慮していません。</target>
        </trans-unit>
        <trans-unit id="efc1426e6a49e14a68f242752b5549ab528f4a47" translate="yes" xml:space="preserve">
          <source>Return the smaller of the two arguments.</source>
          <target state="translated">2つの引数のうち小さい方を返します。</target>
        </trans-unit>
        <trans-unit id="25854eb1dc4fc26311440442b6bf7d8025a9e571" translate="yes" xml:space="preserve">
          <source>Return the smaller of the two arguments. The result is unspecified if one of the arguments contains the float value &lt;code&gt;nan&lt;/code&gt;.</source>
          <target state="translated">2つの引数のうち小さい方を返します。引数の1つに浮動小数点値 &lt;code&gt;nan&lt;/code&gt; が含まれている場合、結果は指定されません。</target>
        </trans-unit>
        <trans-unit id="b03d77470c1acc851a09cd269fa127fba2de50aa" translate="yes" xml:space="preserve">
          <source>Return the smallest element of the given set (with respect to the &lt;code&gt;Ord.compare&lt;/code&gt; ordering), or &lt;code&gt;None&lt;/code&gt; if the set is empty.</source>
          <target state="translated">指定されたセットの最小要素（ &lt;code&gt;Ord.compare&lt;/code&gt; の順序に関して）を返すか、セットが空の場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="017dac5bead542d5017ba0e9fa30c30a01c06cbe" translate="yes" xml:space="preserve">
          <source>Return the smallest element of the given set (with respect to the &lt;code&gt;Ord.compare&lt;/code&gt; ordering), or raise &lt;code&gt;Not_found&lt;/code&gt; if the set is empty.</source>
          <target state="translated">指定されたセットの最小要素を返すか（ &lt;code&gt;Ord.compare&lt;/code&gt; の順序に関して）、セットが空の場合は &lt;code&gt;Not_found&lt;/code&gt; を上げます。</target>
        </trans-unit>
        <trans-unit id="9537b164e407090d6db868adb40dbd03a0792a42" translate="yes" xml:space="preserve">
          <source>Return the socket domain adequate for the given socket address.</source>
          <target state="translated">与えられたソケットアドレスに適したソケットドメインを返す。</target>
        </trans-unit>
        <trans-unit id="6b7a8bb7b9eeb7b6627344301bf648aa4daaa779" translate="yes" xml:space="preserve">
          <source>Return the status of the terminal referred to by the given file descriptor.</source>
          <target state="translated">与えられたファイル記述子が参照している端末の状態を返します。</target>
        </trans-unit>
        <trans-unit id="5626ec7d4ca2da5a8d3bb9ed2c527c644e4678e9" translate="yes" xml:space="preserve">
          <source>Return the status of the terminal referred to by the given file descriptor. On Windows, not implemented.</source>
          <target state="translated">与えられたファイル記述子が参照する端末の状態を返します。Windows では、実装されていません。</target>
        </trans-unit>
        <trans-unit id="7c9cdfde85589c923cd4ca02542d13d0cca96b93" translate="yes" xml:space="preserve">
          <source>Return the stream holding the elements of the list in the same order.</source>
          <target state="translated">リストの要素を同じ順番で保持するストリームを返します。</target>
        </trans-unit>
        <trans-unit id="a05fa5b07eb6ebbdf933bdfc2d40f15060722ade" translate="yes" xml:space="preserve">
          <source>Return the stream of the characters of the bytes parameter.</source>
          <target state="translated">bytesパラメータの文字のストリームを返します。</target>
        </trans-unit>
        <trans-unit id="caf78826f68b6e198d276cec474aaeeb8f27d184" translate="yes" xml:space="preserve">
          <source>Return the stream of the characters of the string parameter.</source>
          <target state="translated">文字列パラメータの文字のストリームを返します。</target>
        </trans-unit>
        <trans-unit id="2468af7842aa35af943ca1d47042c1d86e8d6c47" translate="yes" xml:space="preserve">
          <source>Return the stream of the characters read from the input channel.</source>
          <target state="translated">入力チャンネルから読み込んだ文字のストリームを返します。</target>
        </trans-unit>
        <trans-unit id="dd1b7572b59c2595ba97bfeecd0a7e61e9a67f8b" translate="yes" xml:space="preserve">
          <source>Return the string representation of a boolean.</source>
          <target state="translated">ブール値の文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="15835b97f4ff7af238cdc0ad3af680b29be0eed3" translate="yes" xml:space="preserve">
          <source>Return the string representation of a boolean. As the returned values may be shared, the user should not modify them directly.</source>
          <target state="translated">ブール値の文字列表現を返します。返された値は共有される可能性があるので、ユーザは直接変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="aa0425121ad48174987f6ebd15d09075898ff670" translate="yes" xml:space="preserve">
          <source>Return the string representation of a floating-point number.</source>
          <target state="translated">浮動小数点数の文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="48fdc654647800e5ec41090dcf080e361a49adc8" translate="yes" xml:space="preserve">
          <source>Return the string representation of an integer, in decimal.</source>
          <target state="translated">整数の文字列表現を10進数で返します。</target>
        </trans-unit>
        <trans-unit id="4b9638e46d453c3b7eed3f92aba7fd9fb4a69f06" translate="yes" xml:space="preserve">
          <source>Return the string representation of its argument, in decimal.</source>
          <target state="translated">引数の文字列表現を10進数で返します。</target>
        </trans-unit>
        <trans-unit id="5993a8566afc49eebb9d190077edf1da30dc40c4" translate="yes" xml:space="preserve">
          <source>Return the string representation of its argument, in signed decimal.</source>
          <target state="translated">引数の文字列表現を符号付き10進数で返します。</target>
        </trans-unit>
        <trans-unit id="cee061fa1ce7e36f10472aaebc71d041f385f79a" translate="yes" xml:space="preserve">
          <source>Return the text of the ellipsis.</source>
          <target state="translated">省略記号のテキストを返します。</target>
        </trans-unit>
        <trans-unit id="9f1687fb65b0b5dee545f3581d2861e0adb08cf5" translate="yes" xml:space="preserve">
          <source>Return the third dimension of the given three-dimensional Bigarray.</source>
          <target state="translated">与えられた三次元のビグザの三次元を返します。</target>
        </trans-unit>
        <trans-unit id="fded3ea1551782765551c15274e9f9e22ce90b1c" translate="yes" xml:space="preserve">
          <source>Return the thread currently executing.</source>
          <target state="translated">現在実行中のスレッドを返します。</target>
        </trans-unit>
        <trans-unit id="7f82693ea095e57e92edc69fb4af99e6e665c6b3" translate="yes" xml:space="preserve">
          <source>Return the three-dimensional Bigarray corresponding to the given generic Bigarray.</source>
          <target state="translated">与えられたジェネリックBigarrayに対応する三次元Bigarrayを返します。</target>
        </trans-unit>
        <trans-unit id="eaba934f777d3a28c03ff2df1af97dba235b90b0" translate="yes" xml:space="preserve">
          <source>Return the total number of bytes allocated since the program was started.</source>
          <target state="translated">プログラムが開始されてから割り当てられた総バイト数を返します。</target>
        </trans-unit>
        <trans-unit id="6a6b924475ae21a46972a34b8a9f1d42c3ca1337" translate="yes" xml:space="preserve">
          <source>Return the total number of bytes allocated since the program was started. It is returned as a &lt;code&gt;float&lt;/code&gt; to avoid overflow problems with &lt;code&gt;int&lt;/code&gt; on 32-bit machines.</source>
          <target state="translated">プログラムの開始以降に割り当てられた合計バイト数を返します。32ビットマシンでの &lt;code&gt;int&lt;/code&gt; のオーバーフローの問題を回避するために、 &lt;code&gt;float&lt;/code&gt; として返されます。</target>
        </trans-unit>
        <trans-unit id="f40589a863b0d64e0c0727552da1b9334eb57468" translate="yes" xml:space="preserve">
          <source>Return the two-dimensional Bigarray corresponding to the given generic Bigarray.</source>
          <target state="translated">与えられたジェネリックBigarrayに対応する2次元Bigarrayを返します。</target>
        </trans-unit>
        <trans-unit id="49064cf0b703a2346a564495d95c297ee09b80dc" translate="yes" xml:space="preserve">
          <source>Return the user id of the user executing the process.</source>
          <target state="translated">プロセスを実行しているユーザのユーザIDを返します。</target>
        </trans-unit>
        <trans-unit id="16fc68a13982d232eda790fc2a50a0dcaffa9cf0" translate="yes" xml:space="preserve">
          <source>Return the user id of the user executing the process. On Windows, always return &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">プロセスを実行しているユーザーのユーザーIDを返します。Windowsでは、常に &lt;code&gt;1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c7c49ef3e833d46240486c64f87be23c5629ea57" translate="yes" xml:space="preserve">
          <source>Return the value associated to a variable in the process environment or &lt;code&gt;None&lt;/code&gt; if the variable is unbound.</source>
          <target state="translated">プロセス環境の変数に関連付けられている値を返します。変数がバインドされていない場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="85057500b567df16b19c1cf118645b5d304c6b1b" translate="yes" xml:space="preserve">
          <source>Return the value associated to a variable in the process environment, unless the process has special privileges.</source>
          <target state="translated">プロセスが特別な権限を持っていない限り、プロセス環境の変数に関連付けられた値を返します。</target>
        </trans-unit>
        <trans-unit id="f395b0f40289db78c2fd037a9a9f2b7eab458192" translate="yes" xml:space="preserve">
          <source>Return the value associated to a variable in the process environment.</source>
          <target state="translated">プロセス環境の変数に関連付けられた値を返します。</target>
        </trans-unit>
        <trans-unit id="d7eeaed60e457f15050fb8745c16d9d0615537f1" translate="yes" xml:space="preserve">
          <source>Return the value associated to a variable in the process environment. Raise &lt;code&gt;Not_found&lt;/code&gt; if the variable is unbound. (This function is identical to &lt;code&gt;Sys.getenv&lt;/code&gt;.)</source>
          <target state="translated">プロセス環境の変数に関連付けられた値を返します。レイズ &lt;code&gt;Not_found&lt;/code&gt; 変数にバインドされていない場合。（この関数は &lt;code&gt;Sys.getenv&lt;/code&gt; と同じです。）</target>
        </trans-unit>
        <trans-unit id="654f9530e978b351bceb2513786137bd29a6568c" translate="yes" xml:space="preserve">
          <source>Return the value of the runtime parameters, in the same format as the contents of the &lt;code&gt;OCAMLRUNPARAM&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;OCAMLRUNPARAM&lt;/code&gt; 環境変数の内容と同じ形式で、ランタイムパラメータの値を返します。</target>
        </trans-unit>
        <trans-unit id="81893980ccabfca942d3ed99ddbb558ef05ef17b" translate="yes" xml:space="preserve">
          <source>Return the zero-dimensional Bigarray corresponding to the given generic Bigarray.</source>
          <target state="translated">与えられた汎用Bigarrayに対応する0次元Bigarrayを返します。</target>
        </trans-unit>
        <trans-unit id="85a34743b7fda569f680af55a3f32d4e6549551c" translate="yes" xml:space="preserve">
          <source>Return whether runtime warnings are currently enabled.</source>
          <target state="translated">ランタイム警告が現在有効になっているかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="translated">Returns</target>
        </trans-unit>
        <trans-unit id="07671ae050d7c23c0f7e43b9f1b20ad161743db2" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the given name refers to a directory, &lt;code&gt;false&lt;/code&gt; if it refers to another kind of file.</source>
          <target state="translated">指定された名前がディレクトリを参照している場合は &lt;code&gt;true&lt;/code&gt; を返し、別の種類のファイルを参照している場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="34f876cd5c30fd695157f74860c4acccf9ffdf71" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the user is able to create symbolic links.</source>
          <target state="translated">ユーザーがシンボリックリンクを作成できる場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0c642c27c99cf713605f23dbe275499f37af0259" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the user is able to create symbolic links. On Windows, this indicates that the user not only has the SeCreateSymbolicLinkPrivilege but is also running elevated, if necessary. On other platforms, this is simply indicates that the symlink system call is available.</source>
          <target state="translated">ユーザーがシンボリックリンクを作成できる場合は &lt;code&gt;true&lt;/code&gt; を返します。Windowsでは、これは、ユーザーがSeCreateSymbolicLinkPrivilegeを持っているだけでなく、必要に応じて昇格して実行していることを示します。他のプラットフォームでは、これは単にシンボリックリンクシステムコールが利用可能であることを示しています。</target>
        </trans-unit>
        <trans-unit id="c425a222194f2017b152701d584dd760b71e0ec4" translate="yes" xml:space="preserve">
          <source>Returns the material printed with &lt;code&gt;str_formatter&lt;/code&gt;, flushes the formatter and resets the corresponding buffer.</source>
          <target state="translated">&lt;code&gt;str_formatter&lt;/code&gt; で印刷された素材を返し、フォーマッターをフラッシュし、対応するバッファーをリセットします。</target>
        </trans-unit>
        <trans-unit id="56b58b0830c1aefdead60d25be62cc605ba270db" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of pretty-printing boxes allowed before ellipsis.</source>
          <target state="translated">省略記号の前に許可されているプリティプリントボックスの最大数を返します。</target>
        </trans-unit>
        <trans-unit id="fae6bb2e3dfb5a16b6f5f0913a95eab503656ba7" translate="yes" xml:space="preserve">
          <source>Returns the message that would have been printed by &lt;a href=&quot;arg#VALusage&quot;&gt;&lt;code&gt;Arg.usage&lt;/code&gt;&lt;/a&gt;, if provided with the same parameters.</source>
          <target state="translated">同じパラメーターが指定されている場合、&lt;a href=&quot;arg#VALusage&quot;&gt; &lt;code&gt;Arg.usage&lt;/code&gt; &lt;/a&gt;によって出力されるメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="0f47eb1d3f9355ea817a9a85f7df9a2a66db5b79" translate="yes" xml:space="preserve">
          <source>Returns the position of the right margin.</source>
          <target state="translated">右マージンの位置を返します。</target>
        </trans-unit>
        <trans-unit id="c24b11724f17e6b30a567867f73a1d47f577b8b9" translate="yes" xml:space="preserve">
          <source>Returns the slots of a raw backtrace, or &lt;code&gt;None&lt;/code&gt; if none of them contain useful information.</source>
          <target state="translated">生のバックトレースのスロットを返します。有用な情報が含まれていない場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2d63c3284627826c87cf50ba1ac7bc94e7935ec0" translate="yes" xml:space="preserve">
          <source>Reverse the precedence of implementations and interfaces when merging. All elements in implementation files are kept, and the -m option indicates which parts of the comments in interface files are merged with the comments in implementation files.</source>
          <target state="translated">マージする際に、実装とインタフェースの優先順位を逆にします。実装ファイルの要素はすべて保持され、-mオプションはインターフェースファイルのコメントのどの部分が実装ファイルのコメントとマージされるかを示します。</target>
        </trans-unit>
        <trans-unit id="4862f22e5984f9029900ba9255ea8df3a380fd39" translate="yes" xml:space="preserve">
          <source>Reverse-application operator: &lt;code&gt;x&amp;nbsp;|&amp;gt;&amp;nbsp;f&amp;nbsp;|&amp;gt;&amp;nbsp;g&lt;/code&gt; is exactly equivalent to &lt;code&gt;g&amp;nbsp;(f&amp;nbsp;(x))&lt;/code&gt;.</source>
          <target state="translated">逆アプリケーション演算子： &lt;code&gt;x&amp;nbsp;|&amp;gt;&amp;nbsp;f&amp;nbsp;|&amp;gt;&amp;nbsp;g&lt;/code&gt; は &lt;code&gt;g&amp;nbsp;(f&amp;nbsp;(x))&lt;/code&gt; とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="26319486b216ea03bb91a3ce9cccb058c2d9c39f" translate="yes" xml:space="preserve">
          <source>Reverse-application operator: &lt;code&gt;x&amp;nbsp;|&amp;gt;&amp;nbsp;f&amp;nbsp;|&amp;gt;&amp;nbsp;g&lt;/code&gt; is exactly equivalent to &lt;code&gt;g&amp;nbsp;(f&amp;nbsp;(x))&lt;/code&gt;. Left-associative operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">逆アプリケーション演算子： &lt;code&gt;x&amp;nbsp;|&amp;gt;&amp;nbsp;f&amp;nbsp;|&amp;gt;&amp;nbsp;g&lt;/code&gt; は &lt;code&gt;g&amp;nbsp;(f&amp;nbsp;(x))&lt;/code&gt; とまったく同じです。左結合演算子。詳細については、&lt;a href=&quot;ocaml_operators&quot;&gt; &lt;code&gt;Ocaml_operators&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7419326f5a02dc9021eb6c48a2476ea7739f629e" translate="yes" xml:space="preserve">
          <source>Roughly speaking, tag-marking is commonly used to get a better rendering of texts in the rendering device, while tag-printing allows fine tuning of printing routines to print the same entity differently according to the semantic tags (i.e. print additional material or even omit parts of the output).</source>
          <target state="translated">大まかに言えば、タグマーキングは、レンダリングデバイスでのテキストのより良いレンダリングを得るために一般的に使用され、タグ印刷は、同じエンティティをセマンティックタグに応じて異なる方法で印刷するための印刷ルーチンの微調整を可能にします(すなわち、追加の材料を印刷したり、出力の一部を省略したりすることもできます)。</target>
        </trans-unit>
        <trans-unit id="c25f7e55ae525e900e70fdb2687e2204e7652e5b" translate="yes" xml:space="preserve">
          <source>Round above to an integer value.</source>
          <target state="translated">上記を整数値に丸めます。</target>
        </trans-unit>
        <trans-unit id="9fb35ef8469a6766094f0b5b1f62d7fce93f0c4c" translate="yes" xml:space="preserve">
          <source>Round above to an integer value. &lt;code&gt;ceil&amp;nbsp;f&lt;/code&gt; returns the least integer value greater than or equal to &lt;code&gt;f&lt;/code&gt;. The result is returned as a float.</source>
          <target state="translated">上記を整数値に丸めます。 &lt;code&gt;ceil&amp;nbsp;f&lt;/code&gt; 戻り以上の整数値よりも大きいかまたは等しい &lt;code&gt;f&lt;/code&gt; 。結果はfloatとして返されます。</target>
        </trans-unit>
        <trans-unit id="95f6d1f314177a003e8063dc1372e721bbd39e9b" translate="yes" xml:space="preserve">
          <source>Round below to an integer value.</source>
          <target state="translated">以下を整数値に丸めます。</target>
        </trans-unit>
        <trans-unit id="9a0377b4336ea34b53e0e7d18d7b1fd4710116ee" translate="yes" xml:space="preserve">
          <source>Round below to an integer value. &lt;code&gt;floor&amp;nbsp;f&lt;/code&gt; returns the greatest integer value less than or equal to &lt;code&gt;f&lt;/code&gt;. The result is returned as a float.</source>
          <target state="translated">以下を整数値に丸めます。 &lt;code&gt;floor&amp;nbsp;f&lt;/code&gt; 最大整数値未満又は等しい戻り &lt;code&gt;f&lt;/code&gt; 。結果はfloatとして返されます。</target>
        </trans-unit>
        <trans-unit id="ef9abff6d1f85e9545c3432b7c0c7e71077e6b73" translate="yes" xml:space="preserve">
          <source>Rule 1&lt;em&gt; A function that has parameters or local variables of type value must begin with a call to one of the CAMLparam macros and return with CAMLreturn, CAMLreturn0, or CAMLreturnT. In particular, CAMLlocal and CAMLxparam can only be called &lt;/em&gt;after &lt;em&gt;CAMLparam. &lt;/em&gt;</source>
          <target state="translated">ルール1&lt;em&gt;値型のパラメーターまたはローカル変数を持つ関数は、CAMLparamマクロのいずれかへの呼び出しで始まり、CAMLreturn、CAMLreturn0、またはCAMLreturnTで戻る必要があります。特に、CAMLlocalおよびCAMLxparamは、CAMLparamの&lt;/em&gt;後に&lt;em&gt;のみ呼び出すことができ&lt;/em&gt;&lt;em&gt;ます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f21947935e72c0abfbdf1506eabae74ecf389254" translate="yes" xml:space="preserve">
          <source>Rule 2&lt;em&gt; Local variables of type value must be declared with one of the CAMLlocal macros. Arrays of values are declared with CAMLlocalN. These macros must be used at the beginning of the function, not in a nested block. &lt;/em&gt;</source>
          <target state="translated">ルール2&lt;em&gt;タイプvalueのローカル変数は、CAMLlocalマクロの1つで宣言する必要があります。値の配列はCAMLlocalNで宣言されます。これらのマクロは、ネストされたブロックではなく、関数の先頭で使用する必要があります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="76cbf47c8b79ed4302114b968f1a67cd223a2fcb" translate="yes" xml:space="preserve">
          <source>Rule 3&lt;em&gt; Assignments to the fields of structured blocks must be done with the Store_field macro (for normal blocks) or Store_double_field macro (for arrays and records of floating-point numbers). Other assignments must not use Store_field nor Store_double_field. &lt;/em&gt;</source>
          <target state="translated">規則3&lt;em&gt;構造化ブロックのフィールドへの割り当ては、Store_fieldマクロ（通常のブロックの場合）またはStore_double_fieldマクロ（浮動小数点数の配列およびレコードの場合）を使用して行う必要があります。他の割り当てでは、Store_fieldまたはStore_double_fieldを使用しないでください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f845dabc56cc41449c2f14e79e50b3ff0cb4238" translate="yes" xml:space="preserve">
          <source>Rule 4&lt;em&gt; Global variables containing values must be registered with the garbage collector using the caml_register_global_root function, save that global variables and locations that will only ever contain OCaml integers (and never pointers) do not have to be registered.&lt;/em&gt;</source>
          <target state="translated">ルール4&lt;em&gt;値を含むグローバル変数は、caml_register_global_root関数を使用してガベージコレクターに登録する必要があります。ただし、OCaml整数のみを含む（ポインターを含まない）グローバル変数と場所を登録する必要はありません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="194be911fcb6f65c97a5b034bbe99f8ab89e30d8" translate="yes" xml:space="preserve">
          <source>Rule 5&lt;em&gt; After a structured block (a block with tag less than No_scan_tag) is allocated with the low-level functions, all fields of this block must be filled with well-formed values before the next allocation operation. If the block has been allocated with caml_alloc_small, filling is performed by direct assignment to the fields of the block: &lt;/em&gt;</source>
          <target state="translated">規則5&lt;em&gt;構造化ブロック（タグがNo_scan_tag未満のブロック）が低レベル関数で割り当てられた後、次の割り当て操作の前に、このブロックのすべてのフィールドに整形式の値を入力する必要があります。ブロックがcaml_alloc_smallで割り当てられている場合、塗りつぶしはブロックのフィールドへの直接割り当てによって実行されます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2b47bc84b25954ee1bf67cab8c46516531760e13" translate="yes" xml:space="preserve">
          <source>Rule 6&lt;em&gt; Direct assignment to a field of a block, as in &lt;/em&gt;</source>
          <target state="translated">ルール6のよう&lt;em&gt;に、ブロックのフィールドに直接割り当てる&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e18f6921eef2446f5828775de5f17f14a495f57f" translate="yes" xml:space="preserve">
          <source>Rule of thumb for casual users of this library:</source>
          <target state="translated">この図書館を気軽に利用する人のための経験則。</target>
        </trans-unit>
        <trans-unit id="f08ad5ff7b0faaf640cdcfb91593e99a8405a091" translate="yes" xml:space="preserve">
          <source>Rules can also contain the &lt;code&gt;%prec &lt;/code&gt;symbol directive in the right-hand side part, to override the default precedence and associativity of the rule with the precedence and associativity of the given symbol.</source>
          <target state="translated">ルールの右側に &lt;code&gt;%prec &lt;/code&gt; シンボルディレクティブを含めて、ルールのデフォルトの優先順位と結合性を、指定されたシンボルの優先順位と結合性でオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="ee103b7d23d4ebd84acdfdab56301124f798767f" translate="yes" xml:space="preserve">
          <source>Run the debugger program from the working directory dir, instead of the current directory. (See also the cd command.)</source>
          <target state="translated">デバッガプログラムをカレントディレクトリではなく、作業ディレクトリから実行します。(cd コマンドも参照してください)。</target>
        </trans-unit>
        <trans-unit id="e33d046f2f0d6b65906192102d14ad40ae93db06" translate="yes" xml:space="preserve">
          <source>Run the program and stop at the next event, skipping over function calls. With an argument, do it count times.</source>
          <target state="translated">プログラムを実行し、関数呼び出しをスキップして次のイベントで停止します。引数を指定して、回数をカウントします。</target>
        </trans-unit>
        <trans-unit id="baa6e0df32a74c39740ce1a2b36cd7a7922138e2" translate="yes" xml:space="preserve">
          <source>Run the program and stop at the next event. With an argument, do it count times. If count is 0, run until the program terminates or a breakpoint is hit.</source>
          <target state="translated">プログラムを実行し、次のイベントで停止します。引数を指定して、回数をカウントします。カウントが0の場合は、プログラムが終了するか、ブレークポイントがヒットするまで実行します。</target>
        </trans-unit>
        <trans-unit id="b0d820af83a79aac98fd79a203da3f7b31ae9108" translate="yes" xml:space="preserve">
          <source>Run the program backward and stop at the first event before the current function invocation.</source>
          <target state="translated">プログラムを後方に実行し、現在の関数呼び出しの前の最初のイベントで停止します。</target>
        </trans-unit>
        <trans-unit id="3574794cee2b6fb669e40f9d67c17ce96c3066dc" translate="yes" xml:space="preserve">
          <source>Run the program backward and stop at the previous event, skipping over function calls. With an argument, do it count times.</source>
          <target state="translated">プログラムを逆方向に実行し、関数呼び出しをスキップして前のイベントで停止します。引数を指定して、回数をカウントします。</target>
        </trans-unit>
        <trans-unit id="1e6a7ba4e2430e332885d3303baa5a56f52adbb0" translate="yes" xml:space="preserve">
          <source>Run the program backward and stop at the previous event. With an argument, do it count times.</source>
          <target state="translated">プログラムを後ろ向きに実行して、前のイベントで停止します。引数を指定して回数をカウントします。</target>
        </trans-unit>
        <trans-unit id="9fdbe39fb34c974e9361059c25a583544867c5da" translate="yes" xml:space="preserve">
          <source>Run the program until a breakpoint is hit, or the program terminates.</source>
          <target state="translated">ブレークポイントがヒットするか、プログラムが終了するまでプログラムを実行します。</target>
        </trans-unit>
        <trans-unit id="dfa7f2c2df34a908be406227638b3c40e639a4fe" translate="yes" xml:space="preserve">
          <source>Run the program until the current function returns.</source>
          <target state="translated">現在の関数が戻るまでプログラムを実行します。</target>
        </trans-unit>
        <trans-unit id="ccb5264557e071871ebff30ddc1c06100adcbe29" translate="yes" xml:space="preserve">
          <source>Run-time support for lazy values.</source>
          <target state="translated">遅延値のランタイムサポート。</target>
        </trans-unit>
        <trans-unit id="e5cb34a03309c89d171d482ce75481aa7e18e73f" translate="yes" xml:space="preserve">
          <source>Run-time support for lazy values. All functions in this module are for system use only, not for the casual user.</source>
          <target state="translated">遅延値のランタイムサポート。このモジュールのすべての関数は、システムでの使用のみを目的としたものであり、カジュアルなユーザ向けではありません。</target>
        </trans-unit>
        <trans-unit id="6fa46548db63e22eae023361f073ead35c19731b" translate="yes" xml:space="preserve">
          <source>Run-time support for objects and classes.</source>
          <target state="translated">オブジェクトとクラスのランタイムサポート。</target>
        </trans-unit>
        <trans-unit id="edc459881e396679e8f3b89e53ed6d439ad46f0e" translate="yes" xml:space="preserve">
          <source>Run-time support for objects and classes. All functions in this module are for system use only, not for the casual user.</source>
          <target state="translated">オブジェクトとクラスのランタイムサポート。このモジュールのすべての関数は、システムでの使用のみを目的としたものであり、カジュアルなユーザ向けではありません。</target>
        </trans-unit>
        <trans-unit id="53e81fa9c83d38e3ac1edd3552a0eb335aae424d" translate="yes" xml:space="preserve">
          <source>Run-time support for recursive modules.</source>
          <target state="translated">再帰的モジュールのランタイムサポート</target>
        </trans-unit>
        <trans-unit id="a6822b33e0e8a0dd70c1220928d28080e57dc226" translate="yes" xml:space="preserve">
          <source>Run-time support for recursive modules. All functions in this module are for system use only, not for the casual user.</source>
          <target state="translated">再帰モジュールのランタイムサポート。このモジュールのすべての関数は、システムでの使用のみを目的としたものであり、カジュアルなユーザのためのものではありません。</target>
        </trans-unit>
        <trans-unit id="2b8e0528452ff03ac8c5f5bd6d0cbc5d3759ad9b" translate="yes" xml:space="preserve">
          <source>Running an executable that has been compiled with ocamlcp or ocamloptp records the execution counts for the specified parts of the program and saves them in a file called ocamlprof.dump in the current directory.</source>
          <target state="translated">ocamlcp または ocamloptp でコンパイルされた実行ファイルを実行すると、プログラムの指定された部分の実行回数を記録し、カレントディレクトリの ocamlprof.dump というファイルに保存します。</target>
        </trans-unit>
        <trans-unit id="b10f6c4c510f606cd3d403871fcca1878d1a0557" translate="yes" xml:space="preserve">
          <source>Running the functions that were registered with Stdlib.at_exit.</source>
          <target state="translated">Stdlib.at_exitで登録した関数を実行する。</target>
        </trans-unit>
        <trans-unit id="5b12e58b1b71d75c02b19aa32a3b1b980fda40c2" translate="yes" xml:space="preserve">
          <source>Running the program provided earlier with OCAML_EVENTLOG_ENABLED=p will for example yield the following result.</source>
          <target state="translated">OCAML_EVENTLOG_ENABLED=pで先に提供されたプログラムを実行すると、例えば次のような結果が得られます。</target>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="efc4d12ca6df051f4b726e278e83476d7e281d35" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse&quot;&gt;&lt;code&gt;Arg.parse&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;Expand&lt;/code&gt; arguments are allowed and the &lt;a href=&quot;arg#VALcurrent&quot;&gt;&lt;code&gt;Arg.current&lt;/code&gt;&lt;/a&gt; reference is not updated.</source>
          <target state="translated">&lt;code&gt;Expand&lt;/code&gt; 引数が許可され、&lt;a href=&quot;arg#VALcurrent&quot;&gt; &lt;code&gt;Arg.current&lt;/code&gt; &lt;/a&gt;参照が更新されないことを除いて、&lt;a href=&quot;arg#VALparse&quot;&gt; &lt;code&gt;Arg.parse&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="c759642e5b9ae84c517018cf93477f18794403c8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse&quot;&gt;&lt;code&gt;Arg.parse&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;speclist&lt;/code&gt; argument is a reference and may be updated during the parsing.</source>
          <target state="translated">同じ&lt;a href=&quot;arg#VALparse&quot;&gt; &lt;code&gt;Arg.parse&lt;/code&gt; &lt;/a&gt;、ことを除いて &lt;code&gt;speclist&lt;/code&gt; の引数は参照であり、構文解析中に更新することができます。</target>
        </trans-unit>
        <trans-unit id="4a5d41ff5725e6195edce3879692f86e84de9daf" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse&quot;&gt;&lt;code&gt;Arg.parse&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;speclist&lt;/code&gt; argument is a reference and may be updated during the parsing. A typical use for this feature is to parse command lines of the form:</source>
          <target state="translated">同じ&lt;a href=&quot;arg#VALparse&quot;&gt; &lt;code&gt;Arg.parse&lt;/code&gt; &lt;/a&gt;、ことを除いて &lt;code&gt;speclist&lt;/code&gt; の引数は参照であり、構文解析中に更新することができます。この機能の一般的な使用法は、次の形式のコマンドラインを解析することです。</target>
        </trans-unit>
        <trans-unit id="0ce272610bebb178f81b99ce34d02c3bea9037e7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse_argv&quot;&gt;&lt;code&gt;Arg.parse_argv&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;speclist&lt;/code&gt; argument is a reference and may be updated during the parsing.</source>
          <target state="translated">同じ&lt;a href=&quot;arg#VALparse_argv&quot;&gt; &lt;code&gt;Arg.parse_argv&lt;/code&gt; &lt;/a&gt;、ことを除いて &lt;code&gt;speclist&lt;/code&gt; の引数は参照であり、構文解析中に更新することができます。</target>
        </trans-unit>
        <trans-unit id="bfb57f9a251755a25bd673901e8c89fce7f7e000" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse_argv&quot;&gt;&lt;code&gt;Arg.parse_argv&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;speclist&lt;/code&gt; argument is a reference and may be updated during the parsing. See &lt;a href=&quot;arg#VALparse_dynamic&quot;&gt;&lt;code&gt;Arg.parse_dynamic&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同じ&lt;a href=&quot;arg#VALparse_argv&quot;&gt; &lt;code&gt;Arg.parse_argv&lt;/code&gt; &lt;/a&gt;、ことを除いて &lt;code&gt;speclist&lt;/code&gt; の引数は参照であり、構文解析中に更新することができます。&lt;a href=&quot;arg#VALparse_dynamic&quot;&gt; &lt;code&gt;Arg.parse_dynamic&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d06f407f48f537e3bf9f0aab3c0fd9ae569fd10f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse_argv_dynamic&quot;&gt;&lt;code&gt;Arg.parse_argv_dynamic&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;argv&lt;/code&gt; argument is a reference and may be updated during the parsing of &lt;code&gt;Expand&lt;/code&gt; arguments.</source>
          <target state="translated">&lt;code&gt;argv&lt;/code&gt; 引数が参照であり、 &lt;code&gt;Expand&lt;/code&gt; 引数の解析中に更新される可能性があることを除いて、&lt;a href=&quot;arg#VALparse_argv_dynamic&quot;&gt; &lt;code&gt;Arg.parse_argv_dynamic&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="d30daa2e8eb7a5fafb2e2f378489fb8c36d77c2f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse_argv_dynamic&quot;&gt;&lt;code&gt;Arg.parse_argv_dynamic&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;argv&lt;/code&gt; argument is a reference and may be updated during the parsing of &lt;code&gt;Expand&lt;/code&gt; arguments. See &lt;a href=&quot;arg#VALparse_argv_dynamic&quot;&gt;&lt;code&gt;Arg.parse_argv_dynamic&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;argv&lt;/code&gt; 引数が参照であり、 &lt;code&gt;Expand&lt;/code&gt; 引数の解析中に更新される可能性があることを除いて、&lt;a href=&quot;arg#VALparse_argv_dynamic&quot;&gt; &lt;code&gt;Arg.parse_argv_dynamic&lt;/code&gt; &lt;/a&gt;と同じです。&lt;a href=&quot;arg#VALparse_argv_dynamic&quot;&gt; &lt;code&gt;Arg.parse_argv_dynamic&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="919867a5682adf2b806f5aafe9260ca926982189" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALappend&quot;&gt;&lt;code&gt;Array.append&lt;/code&gt;&lt;/a&gt;, but concatenates a list of arrays.</source>
          <target state="translated">&lt;a href=&quot;array#VALappend&quot;&gt; &lt;code&gt;Array.append&lt;/code&gt; &lt;/a&gt;と同じですが、配列のリストを連結します。</target>
        </trans-unit>
        <trans-unit id="1d2f1fe85367029b3e28f1054ca7d3c59e03c6d7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALexists&quot;&gt;&lt;code&gt;Array.exists&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="translated">&lt;a href=&quot;array#VALexists&quot;&gt; &lt;code&gt;Array.exists&lt;/code&gt; &lt;/a&gt;と同じですが、2つの引数の述語用です。</target>
        </trans-unit>
        <trans-unit id="b242815a316810b7ec12598a3e1e5ec439a88f1c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALfor_all&quot;&gt;&lt;code&gt;Array.for_all&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="translated">&lt;a href=&quot;array#VALfor_all&quot;&gt; &lt;code&gt;Array.for_all&lt;/code&gt; &lt;/a&gt;と同じですが、2つの引数の述語用です。</target>
        </trans-unit>
        <trans-unit id="0dcf223688ef7e3edd57527f52f13eb8a194f9d1" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALiter&quot;&gt;&lt;code&gt;Array.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied with the index of the element as first argument, and the element itself as second argument.</source>
          <target state="translated">&lt;a href=&quot;array#VALiter&quot;&gt; &lt;code&gt;Array.iter&lt;/code&gt; &lt;/a&gt;と同じですが、関数は最初の引数として要素のインデックスを使用し、2番目の引数として要素自体を使用して適用されます。</target>
        </trans-unit>
        <trans-unit id="7f0d694b677271f60d7455685d0d21ae0dcfd8c2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALmap&quot;&gt;&lt;code&gt;Array.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument, and the element itself as second argument.</source>
          <target state="translated">&lt;a href=&quot;array#VALmap&quot;&gt; &lt;code&gt;Array.map&lt;/code&gt; &lt;/a&gt;と同じですが、関数は最初の引数として要素のインデックスに適用され、2番目の引数として要素自体に適用されます。</target>
        </trans-unit>
        <trans-unit id="27264073342409963f6b45f54dae3a7263c03cf1" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALmem&quot;&gt;&lt;code&gt;Array.mem&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare elements.</source>
          <target state="translated">&lt;a href=&quot;array#VALmem&quot;&gt; &lt;code&gt;Array.mem&lt;/code&gt; &lt;/a&gt;と同じですが、要素を比較するために構造的同等性の代わりに物理的同等性を使用します。</target>
        </trans-unit>
        <trans-unit id="fc576d9ed15b363a6f59f930c00c545f126a56e7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALsort&quot;&gt;&lt;code&gt;Array.sort&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;array#VALstable_sort&quot;&gt;&lt;code&gt;Array.stable_sort&lt;/code&gt;&lt;/a&gt;, whichever is faster on typical input.</source>
          <target state="translated">&lt;a href=&quot;array#VALsort&quot;&gt; &lt;code&gt;Array.sort&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;array#VALstable_sort&quot;&gt; &lt;code&gt;Array.stable_sort&lt;/code&gt; &lt;/a&gt;と同じで、通常の入力でどちらか速い方です。</target>
        </trans-unit>
        <trans-unit id="6244692cedb700735cc510ac2331f20dd448794a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALsort&quot;&gt;&lt;code&gt;Array.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e.</source>
          <target state="translated">&lt;a href=&quot;array#VALsort&quot;&gt; &lt;code&gt;Array.sort&lt;/code&gt; &lt;/a&gt;と同じですが、並べ替えアルゴリズムは安定しています（つまり、</target>
        </trans-unit>
        <trans-unit id="97405025fa431a41a3706696600e09871c75f655" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALsort&quot;&gt;&lt;code&gt;Array.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e. elements that compare equal are kept in their original order) and not guaranteed to run in constant heap space.</source>
          <target state="translated">&lt;a href=&quot;array#VALsort&quot;&gt; &lt;code&gt;Array.sort&lt;/code&gt; &lt;/a&gt;と同じですが、並べ替えアルゴリズムは安定しており（つまり、等しいと比較される要素は元の順序で保持されます）、一定のヒープスペースで実行されるとは限りません。</target>
        </trans-unit>
        <trans-unit id="b86be45b6d8f2d1d0b25368390b70d922ded97a7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALappend&quot;&gt;&lt;code&gt;ArrayLabels.append&lt;/code&gt;&lt;/a&gt;, but concatenates a list of arrays.</source>
          <target state="translated">&lt;a href=&quot;arraylabels#VALappend&quot;&gt; &lt;code&gt;ArrayLabels.append&lt;/code&gt; &lt;/a&gt;と同じですが、配列のリストを連結します。</target>
        </trans-unit>
        <trans-unit id="9fb78a6f8069873a797a227f4767a378fba78ed5" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALexists&quot;&gt;&lt;code&gt;ArrayLabels.exists&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="translated">&lt;a href=&quot;arraylabels#VALexists&quot;&gt; &lt;code&gt;ArrayLabels.exists&lt;/code&gt; &lt;/a&gt;と同じですが、2つの引数の述語用です。</target>
        </trans-unit>
        <trans-unit id="3b6f80792c25a21550e4d43edda9eaa91e95d6ad" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALfor_all&quot;&gt;&lt;code&gt;ArrayLabels.for_all&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="translated">&lt;a href=&quot;arraylabels#VALfor_all&quot;&gt; &lt;code&gt;ArrayLabels.for_all&lt;/code&gt; &lt;/a&gt;と同じですが、2つの引数の述語用です。</target>
        </trans-unit>
        <trans-unit id="2e5323fc47789f794fe72351563f0e1fa65f473f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALiter&quot;&gt;&lt;code&gt;ArrayLabels.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument, and the element itself as second argument.</source>
          <target state="translated">&lt;a href=&quot;arraylabels#VALiter&quot;&gt; &lt;code&gt;ArrayLabels.iter&lt;/code&gt; &lt;/a&gt;と同じですが、関数は最初の引数として要素のインデックスに適用され、2番目の引数として要素自体に適用されます。</target>
        </trans-unit>
        <trans-unit id="5393f82003c7eb52395c936d7585a0e877ed2b95" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALmap&quot;&gt;&lt;code&gt;ArrayLabels.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument, and the element itself as second argument.</source>
          <target state="translated">&lt;a href=&quot;arraylabels#VALmap&quot;&gt; &lt;code&gt;ArrayLabels.map&lt;/code&gt; &lt;/a&gt;と同じですが、関数は最初の引数として要素のインデックスに適用され、2番目の引数として要素自体に適用されます。</target>
        </trans-unit>
        <trans-unit id="ebb3b59a0eaa483463885c9027782941f2d161cb" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALmem&quot;&gt;&lt;code&gt;ArrayLabels.mem&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare list elements.</source>
          <target state="translated">&lt;a href=&quot;arraylabels#VALmem&quot;&gt; &lt;code&gt;ArrayLabels.mem&lt;/code&gt; &lt;/a&gt;と同じですが、リスト要素を比較するために構造的同等性の代わりに物理的同等性を使用します。</target>
        </trans-unit>
        <trans-unit id="8be4945b92031a35d5f612f1af651ac5977e8264" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALsort&quot;&gt;&lt;code&gt;ArrayLabels.sort&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;arraylabels#VALstable_sort&quot;&gt;&lt;code&gt;ArrayLabels.stable_sort&lt;/code&gt;&lt;/a&gt;, whichever is faster on typical input.</source>
          <target state="translated">&lt;a href=&quot;arraylabels#VALsort&quot;&gt; &lt;code&gt;ArrayLabels.sort&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;arraylabels#VALstable_sort&quot;&gt; &lt;code&gt;ArrayLabels.stable_sort&lt;/code&gt; &lt;/a&gt;と同じで、通常の入力でどちらか速い方です。</target>
        </trans-unit>
        <trans-unit id="dbfe25a44867f93bc1075f276a30db7fc5848089" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALsort&quot;&gt;&lt;code&gt;ArrayLabels.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e.</source>
          <target state="translated">&lt;a href=&quot;arraylabels#VALsort&quot;&gt; &lt;code&gt;ArrayLabels.sort&lt;/code&gt; &lt;/a&gt;と同じですが、並べ替えアルゴリズムは安定しています（つまり、</target>
        </trans-unit>
        <trans-unit id="d0cd5d947233a03e68947c4e597c0ed72f23130f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALsort&quot;&gt;&lt;code&gt;ArrayLabels.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e. elements that compare equal are kept in their original order) and not guaranteed to run in constant heap space.</source>
          <target state="translated">&lt;a href=&quot;arraylabels#VALsort&quot;&gt; &lt;code&gt;ArrayLabels.sort&lt;/code&gt; &lt;/a&gt;と同じですが、並べ替えアルゴリズムは安定しており（つまり、等しいと比較される要素は元の順序で保持されます）、一定のヒープスペースで実行されるとは限りません。</target>
        </trans-unit>
        <trans-unit id="45265fb607f4846e899fbf60e6e85fa49d1982dc" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;bytes#VALblit_string&quot;&gt;&lt;code&gt;Bytes.blit_string&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;bytes#VALblit_string&quot;&gt; &lt;code&gt;Bytes.blit_string&lt;/code&gt; と&lt;/a&gt;同じです。</target>
        </trans-unit>
        <trans-unit id="d98a5b698c78e1cbbe8ea64b1623654ceb4caee8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;bytes#VALiter&quot;&gt;&lt;code&gt;Bytes.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the byte as first argument and the byte itself as second argument.</source>
          <target state="translated">&lt;a href=&quot;bytes#VALiter&quot;&gt; &lt;code&gt;Bytes.iter&lt;/code&gt; &lt;/a&gt;と同じですが、関数は最初の引数としてバイトのインデックスに適用され、2番目の引数としてバイト自体に適用されます。</target>
        </trans-unit>
        <trans-unit id="b76ea0dfff831d30c32dc2ea7243f0184a031e06" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALblit_data&quot;&gt;&lt;code&gt;Ephemeron.K1.blit_data&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALblit_data&quot;&gt; &lt;code&gt;Ephemeron.K1.blit_data&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="12d4c6a33a99707fe445670f42fa9cb9e5b60c0e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALblit_key&quot;&gt;&lt;code&gt;Ephemeron.K1.blit_key&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALblit_key&quot;&gt; &lt;code&gt;Ephemeron.K1.blit_key&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="db3cb019318b41aa1ccd210ba658180378e9a151" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALcheck_data&quot;&gt;&lt;code&gt;Ephemeron.K1.check_data&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALcheck_data&quot;&gt; &lt;code&gt;Ephemeron.K1.check_data&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="adbd2ee1680f6517ff228f585758f02f4374dd14" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALcheck_key&quot;&gt;&lt;code&gt;Ephemeron.K1.check_key&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALcheck_key&quot;&gt; &lt;code&gt;Ephemeron.K1.check_key&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="d2042d70e36b40ca89faeb0b202f4b5ab4fff165" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALcreate&quot;&gt;&lt;code&gt;Ephemeron.K1.create&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALcreate&quot;&gt; &lt;code&gt;Ephemeron.K1.create&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="e209f2bfc77ca97fd02c7ce069d28edc6165de7e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALget_data&quot;&gt;&lt;code&gt;Ephemeron.K1.get_data&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALget_data&quot;&gt; &lt;code&gt;Ephemeron.K1.get_data&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="568c761efffb54b66e93649175fc779f688d1b3d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALget_data_copy&quot;&gt;&lt;code&gt;Ephemeron.K1.get_data_copy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALget_data_copy&quot;&gt; &lt;code&gt;Ephemeron.K1.get_data_copy&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="0c2ab2cc6cc01aa7278b7d4280b1f56854a8b988" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALget_key&quot;&gt;&lt;code&gt;Ephemeron.K1.get_key&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALget_key&quot;&gt; &lt;code&gt;Ephemeron.K1.get_key&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="2b72029dfa1493b874920908ebbd9e791e5c4d0c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALget_key_copy&quot;&gt;&lt;code&gt;Ephemeron.K1.get_key_copy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALget_key_copy&quot;&gt; &lt;code&gt;Ephemeron.K1.get_key_copy&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="7f84cc672a834fb988ea1c9c659545484fa7398e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALset_data&quot;&gt;&lt;code&gt;Ephemeron.K1.set_data&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALset_data&quot;&gt; &lt;code&gt;Ephemeron.K1.set_data&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="d9b9609b57f58f8d58ea6c8c2a0440f09557a2f6" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALset_key&quot;&gt;&lt;code&gt;Ephemeron.K1.set_key&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALset_key&quot;&gt; &lt;code&gt;Ephemeron.K1.set_key&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="c96eb276bc3d191c4e9ab0cea3c2305d4a1ea719" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALunset_data&quot;&gt;&lt;code&gt;Ephemeron.K1.unset_data&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALunset_data&quot;&gt; &lt;code&gt;Ephemeron.K1.unset_data&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="ceeb86f3b4637cf4b5ba1a3b6ffc60b8913fc62e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALunset_key&quot;&gt;&lt;code&gt;Ephemeron.K1.unset_key&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ephemeron.k1#VALunset_key&quot;&gt; &lt;code&gt;Ephemeron.K1.unset_key&lt;/code&gt; と&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="b786bfda5e45a89cfc3b00c5b661d97ebd87018b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;filename#VALremove_extension&quot;&gt;&lt;code&gt;Filename.remove_extension&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Invalid_argument&lt;/code&gt; if the given name has an empty extension.</source>
          <target state="translated">&lt;a href=&quot;filename#VALremove_extension&quot;&gt; &lt;code&gt;Filename.remove_extension&lt;/code&gt; &lt;/a&gt;と同じですが、指定された名前の拡張子が空の場合は、 &lt;code&gt;Invalid_argument&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="20ed289cc37a407068da0e36ad9ed957eca24a83" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;filename#VALtemp_file&quot;&gt;&lt;code&gt;Filename.temp_file&lt;/code&gt;&lt;/a&gt;, but returns both the name of a fresh temporary file, and an output channel opened (atomically) on this file.</source>
          <target state="translated">&lt;a href=&quot;filename#VALtemp_file&quot;&gt; &lt;code&gt;Filename.temp_file&lt;/code&gt; &lt;/a&gt;と同じですが、新しい一時ファイルの名前と、このファイルで（原子的に）開かれた出力チャネルの両方を返します。</target>
        </trans-unit>
        <trans-unit id="2e82ce81e07c7c9bac6ea7fcdb7f2faea5c40461" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;filename#VALtemp_file&quot;&gt;&lt;code&gt;Filename.temp_file&lt;/code&gt;&lt;/a&gt;, but returns both the name of a fresh temporary file, and an output channel opened (atomically) on this file. This function is more secure than &lt;code&gt;temp_file&lt;/code&gt;: there is no risk that the temporary file will be modified (e.g. replaced by a symbolic link) before the program opens it. The optional argument &lt;code&gt;mode&lt;/code&gt; is a list of additional flags to control the opening of the file. It can contain one or several of &lt;code&gt;Open_append&lt;/code&gt;, &lt;code&gt;Open_binary&lt;/code&gt;, and &lt;code&gt;Open_text&lt;/code&gt;. The default is &lt;code&gt;[Open_text]&lt;/code&gt; (open in text mode). The file is created with permissions &lt;code&gt;perms&lt;/code&gt; (defaults to readable and writable only by the file owner, &lt;code&gt;0o600&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;filename#VALtemp_file&quot;&gt; &lt;code&gt;Filename.temp_file&lt;/code&gt; &lt;/a&gt;と同じですが、新しい一時ファイルの名前と、このファイルで（原子的に）開かれた出力チャネルの両方を返します。この関数は &lt;code&gt;temp_file&lt;/code&gt; よりも安全です。プログラムが一時ファイルを開く前に一時ファイルが変更される（たとえば、シンボリックリンクに置き換えられる）リスクはありません。オプションの引数 &lt;code&gt;mode&lt;/code&gt; は、ファイルのオープンを制御するための追加のフラグのリストです。これには、 &lt;code&gt;Open_append&lt;/code&gt; 、 &lt;code&gt;Open_binary&lt;/code&gt; 、および &lt;code&gt;Open_text&lt;/code&gt; の1つまたは複数を含めることができます。デフォルトは &lt;code&gt;[Open_text]&lt;/code&gt; （テキストモードで開く）です。ファイルはパーミッション &lt;code&gt;perms&lt;/code&gt; 作成されます（デフォルトでは、ファイル所有者 &lt;code&gt;0o600&lt;/code&gt; のみが読み取りおよび書き込み可能です））。</target>
        </trans-unit>
        <trans-unit id="0b303c6d712e6976b4e45797412d70eb55774196" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALappend&quot;&gt;&lt;code&gt;Float.Array.append&lt;/code&gt;&lt;/a&gt;, but concatenates a list of floatarrays.</source>
          <target state="translated">&lt;a href=&quot;float.array#VALappend&quot;&gt; &lt;code&gt;Float.Array.append&lt;/code&gt; &lt;/a&gt;と同じですが、floatarrayのリストを連結します。</target>
        </trans-unit>
        <trans-unit id="41416d7a8b7b0adf79c3afce58707991794941ab" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALiter&quot;&gt;&lt;code&gt;Float.Array.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied with the index of the element as first argument, and the element itself as second argument.</source>
          <target state="translated">&lt;a href=&quot;float.array#VALiter&quot;&gt; &lt;code&gt;Float.Array.iter&lt;/code&gt; &lt;/a&gt;と同じですが、関数は最初の引数として要素のインデックスを使用し、2番目の引数として要素自体を使用して適用されます。</target>
        </trans-unit>
        <trans-unit id="c22ed5bf79a3a77efc5132d1cbf4fd101f23251e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALmap&quot;&gt;&lt;code&gt;Float.Array.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument, and the element itself as second argument.</source>
          <target state="translated">&lt;a href=&quot;float.array#VALmap&quot;&gt; &lt;code&gt;Float.Array.map&lt;/code&gt; &lt;/a&gt;と同じですが、関数は最初の引数として要素のインデックスに適用され、2番目の引数として要素自体に適用されます。</target>
        </trans-unit>
        <trans-unit id="91c1f693de3156b9c1f1b88f26bf9a4022236c7c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALmem&quot;&gt;&lt;code&gt;Float.Array.mem&lt;/code&gt;&lt;/a&gt;, but uses IEEE equality instead of structural equality.</source>
          <target state="translated">&lt;a href=&quot;float.array#VALmem&quot;&gt; &lt;code&gt;Float.Array.mem&lt;/code&gt; &lt;/a&gt;と同じですが、構造的同等性の代わりにIEEE同等性を使用します。</target>
        </trans-unit>
        <trans-unit id="014312ce8b144c294f55b09e82f32dec292be133" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALsort&quot;&gt;&lt;code&gt;Float.Array.sort&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;float.array#VALstable_sort&quot;&gt;&lt;code&gt;Float.Array.stable_sort&lt;/code&gt;&lt;/a&gt;, whichever is faster on typical input.</source>
          <target state="translated">&lt;a href=&quot;float.array#VALsort&quot;&gt; &lt;code&gt;Float.Array.sort&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;float.array#VALstable_sort&quot;&gt; &lt;code&gt;Float.Array.stable_sort&lt;/code&gt; &lt;/a&gt;と同じで、通常の入力でどちらか速い方です。</target>
        </trans-unit>
        <trans-unit id="a11082ec4b9195ccb2340ff67467acf4a9e5f254" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALsort&quot;&gt;&lt;code&gt;Float.Array.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e.</source>
          <target state="translated">&lt;a href=&quot;float.array#VALsort&quot;&gt; &lt;code&gt;Float.Array.sort&lt;/code&gt; &lt;/a&gt;と同じですが、並べ替えアルゴリズムは安定しています（つまり、</target>
        </trans-unit>
        <trans-unit id="731672c2481f05624bc863ac9f33958c6862957f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALsort&quot;&gt;&lt;code&gt;Float.Array.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e. elements that compare equal are kept in their original order) and not guaranteed to run in constant heap space.</source>
          <target state="translated">&lt;a href=&quot;float.array#VALsort&quot;&gt; &lt;code&gt;Float.Array.sort&lt;/code&gt; &lt;/a&gt;と同じですが、並べ替えアルゴリズムは安定しており（つまり、等しいと比較される要素は元の順序で保持されます）、一定のヒープスペースで実行されるとは限りません。</target>
        </trans-unit>
        <trans-unit id="3076ad9c1b68cc0dc33d09e4995af18afdaec8ff" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;format#VALdprintf&quot;&gt;&lt;code&gt;Format.dprintf&lt;/code&gt;&lt;/a&gt; above, but instead of returning immediately, passes the suspended printer to its first argument at the end of printing.</source>
          <target state="translated">上記の&lt;a href=&quot;format#VALdprintf&quot;&gt; &lt;code&gt;Format.dprintf&lt;/code&gt; と&lt;/a&gt;同じですが、すぐに戻る代わりに、中断されたプリンターを印刷の最後に最初の引数に渡します。</target>
        </trans-unit>
        <trans-unit id="94faa50d6e3570c70190979e67a4200ea73ab2f8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;format#VALfprintf&quot;&gt;&lt;code&gt;Format.fprintf&lt;/code&gt;&lt;/a&gt;, except the formatter is the last argument.</source>
          <target state="translated">&lt;a href=&quot;format#VALfprintf&quot;&gt; &lt;code&gt;Format.fprintf&lt;/code&gt; &lt;/a&gt;が最後の引数であることを除いて、Format.fprintfと同じです。</target>
        </trans-unit>
        <trans-unit id="36d45c0db0bff5a17e8e45a96a8c25c3c5132671" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;format#VALfprintf&quot;&gt;&lt;code&gt;Format.fprintf&lt;/code&gt;&lt;/a&gt;, except the formatter is the last argument. &lt;code&gt;dprintf&amp;nbsp;&quot;...&quot;&amp;nbsp;a&amp;nbsp;b&amp;nbsp;c&lt;/code&gt; is a function of type &lt;code&gt;formatter&amp;nbsp;-&amp;gt;&amp;nbsp;unit&lt;/code&gt; which can be given to a format specifier &lt;code&gt;%t&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;format#VALfprintf&quot;&gt; &lt;code&gt;Format.fprintf&lt;/code&gt; &lt;/a&gt;が最後の引数であることを除いて、Format.fprintfと同じです。 &lt;code&gt;dprintf&amp;nbsp;&quot;...&quot;&amp;nbsp;a&amp;nbsp;b&amp;nbsp;c&lt;/code&gt; は、フォーマット指定子 &lt;code&gt;%t&lt;/code&gt; に指定できる &lt;code&gt;formatter&amp;nbsp;-&amp;gt;&amp;nbsp;unit&lt;/code&gt; 型-&amp;gt;単位の関数です。</target>
        </trans-unit>
        <trans-unit id="5f274669a2e20f92f9badea13b7f97452af6fa67" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int32#VALcompare&quot;&gt;&lt;code&gt;Int32.compare&lt;/code&gt;&lt;/a&gt;, except that arguments are interpreted as &lt;em&gt;unsigned&lt;/em&gt; 32-bit integers.</source>
          <target state="translated">引数が&lt;em&gt;符号なし&lt;/em&gt;32ビット整数として解釈されることを除いて、&lt;a href=&quot;int32#VALcompare&quot;&gt; &lt;code&gt;Int32.compare&lt;/code&gt; &lt;/a&gt;と同じです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fff9bfcc5a9e17755dfb27df27fbc91a079014e6" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int32#VALdiv&quot;&gt;&lt;code&gt;Int32.div&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; 32-bit integers.</source>
          <target state="translated">引数と結果が&lt;em&gt;符号なし&lt;/em&gt;32ビット整数として解釈されることを除いて、&lt;a href=&quot;int32#VALdiv&quot;&gt; &lt;code&gt;Int32.div&lt;/code&gt; &lt;/a&gt;と同じです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d84d92bbd30a74d2b88c12316cd188e476d6d8bc" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int32#VALrem&quot;&gt;&lt;code&gt;Int32.rem&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; 32-bit integers.</source>
          <target state="translated">引数と結果が&lt;em&gt;符号なし&lt;/em&gt;32ビット整数として解釈されることを除いて、&lt;a href=&quot;int32#VALrem&quot;&gt; &lt;code&gt;Int32.rem&lt;/code&gt; &lt;/a&gt;と同じです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0ea26c69ce64b1fa8ceb8dd688190e7834b14e26" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int32#VALto_int&quot;&gt;&lt;code&gt;Int32.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer.</source>
          <target state="translated">&lt;a href=&quot;int32#VALto_int&quot;&gt; &lt;code&gt;Int32.to_int&lt;/code&gt; &lt;/a&gt;と同じですが、引数を&lt;em&gt;符号なし&lt;/em&gt;整数として解釈します。</target>
        </trans-unit>
        <trans-unit id="9995f0b680b006745f18fbeb910b9c619f12ee1d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int32#VALto_int&quot;&gt;&lt;code&gt;Int32.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer. Returns &lt;code&gt;None&lt;/code&gt; if the unsigned value of the argument cannot fit into an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;int32#VALto_int&quot;&gt; &lt;code&gt;Int32.to_int&lt;/code&gt; &lt;/a&gt;と同じですが、引数を&lt;em&gt;符号なし&lt;/em&gt;整数として解釈します。引数の符号なしの値が &lt;code&gt;int&lt;/code&gt; に収まらない場合は、 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fcdb7e538aa6eb0d824f0648197ea429fdf7b20b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int64#VALcompare&quot;&gt;&lt;code&gt;Int64.compare&lt;/code&gt;&lt;/a&gt;, except that arguments are interpreted as &lt;em&gt;unsigned&lt;/em&gt; 64-bit integers.</source>
          <target state="translated">引数が&lt;em&gt;符号なし&lt;/em&gt;64ビット整数として解釈されることを除いて、&lt;a href=&quot;int64#VALcompare&quot;&gt; &lt;code&gt;Int64.compare&lt;/code&gt; &lt;/a&gt;と同じです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a769851b36b207e29beabede1916d10e5c4663ee" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int64#VALdiv&quot;&gt;&lt;code&gt;Int64.div&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; 64-bit integers.</source>
          <target state="translated">引数と結果が&lt;em&gt;符号なし&lt;/em&gt;64ビット整数として解釈されることを除いて、&lt;a href=&quot;int64#VALdiv&quot;&gt; &lt;code&gt;Int64.div&lt;/code&gt; &lt;/a&gt;と同じです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9bf11ed7dcb0af4f5f3813d836d90f0a4c77a9d9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int64#VALrem&quot;&gt;&lt;code&gt;Int64.rem&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; 64-bit integers.</source>
          <target state="translated">引数と結果が&lt;em&gt;符号なし&lt;/em&gt;64ビット整数として解釈されることを除いて、&lt;a href=&quot;int64#VALrem&quot;&gt; &lt;code&gt;Int64.rem&lt;/code&gt; &lt;/a&gt;と同じです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e4cde4a302ee1c248d1a0b7fed8e51d321db14da" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int64#VALto_int&quot;&gt;&lt;code&gt;Int64.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer.</source>
          <target state="translated">&lt;a href=&quot;int64#VALto_int&quot;&gt; &lt;code&gt;Int64.to_int&lt;/code&gt; &lt;/a&gt;と同じですが、引数を&lt;em&gt;符号なし&lt;/em&gt;整数として解釈します。</target>
        </trans-unit>
        <trans-unit id="7c3d3062b85da8155cb99e06e6571f9a806ca7f9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int64#VALto_int&quot;&gt;&lt;code&gt;Int64.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer. Returns &lt;code&gt;None&lt;/code&gt; if the unsigned value of the argument cannot fit into an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;int64#VALto_int&quot;&gt; &lt;code&gt;Int64.to_int&lt;/code&gt; &lt;/a&gt;と同じですが、引数を&lt;em&gt;符号なし&lt;/em&gt;整数として解釈します。引数の符号なしの値が &lt;code&gt;int&lt;/code&gt; に収まらない場合は、 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ca7fd8d6590c8efe475a70a0aedf69e8db28e06a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALassoc&quot;&gt;&lt;code&gt;List.assoc&lt;/code&gt;&lt;/a&gt;, but simply return true if a binding exists, and false if no bindings exist for the given key.</source>
          <target state="translated">&lt;a href=&quot;list#VALassoc&quot;&gt; &lt;code&gt;List.assoc&lt;/code&gt; &lt;/a&gt;と同じですが、バインディングが存在する場合はtrueを返し、指定されたキーのバインディングが存在しない場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="abb04a099455e95ba278f304b686fa96ad60f397" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALassoc&quot;&gt;&lt;code&gt;List.assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="translated">&lt;a href=&quot;list#VALassoc&quot;&gt; &lt;code&gt;List.assoc&lt;/code&gt; &lt;/a&gt;と同じですが、キーを比較するために構造的同等性の代わりに物理的同等性を使用します。</target>
        </trans-unit>
        <trans-unit id="5274f117aa288d7ee172f3d75b9197ab989714b8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALassoc_opt&quot;&gt;&lt;code&gt;List.assoc_opt&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="translated">&lt;a href=&quot;list#VALassoc_opt&quot;&gt; &lt;code&gt;List.assoc_opt&lt;/code&gt; &lt;/a&gt;と同じですが、キーを比較するために構造的同等性の代わりに物理的同等性を使用します。</target>
        </trans-unit>
        <trans-unit id="fff8e1dee5a0d14caeb4eba5ade8bf2472f7f586" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALexists&quot;&gt;&lt;code&gt;List.exists&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="translated">&lt;a href=&quot;list#VALexists&quot;&gt; &lt;code&gt;List.exists&lt;/code&gt; &lt;/a&gt;と同じですが、2つの引数の述語用です。</target>
        </trans-unit>
        <trans-unit id="92dfeb9bef3c640ac9c0a770511436bfd14bde4f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALfilter&quot;&gt;&lt;code&gt;List.filter&lt;/code&gt;&lt;/a&gt;, but the predicate is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</source>
          <target state="translated">&lt;a href=&quot;list#VALfilter&quot;&gt; &lt;code&gt;List.filter&lt;/code&gt; &lt;/a&gt;と同じですが、述語は最初の引数（0から数えて）として要素のインデックスに適用され、要素自体は2番目の引数として適用されます。</target>
        </trans-unit>
        <trans-unit id="e20aa8c2058bf36d3e8b459ad3395b6b300c531e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALfor_all&quot;&gt;&lt;code&gt;List.for_all&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="translated">&lt;a href=&quot;list#VALfor_all&quot;&gt; &lt;code&gt;List.for_all&lt;/code&gt; &lt;/a&gt;と同じですが、2つの引数の述語用です。</target>
        </trans-unit>
        <trans-unit id="b29d1bfe23107ab0449213a9cd11570013035e69" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALiter&quot;&gt;&lt;code&gt;List.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</source>
          <target state="translated">&lt;a href=&quot;list#VALiter&quot;&gt; &lt;code&gt;List.iter&lt;/code&gt; &lt;/a&gt;と同じですが、関数は最初の引数（0から数えて）として要素のインデックスに適用され、2番目の引数として要素自体に適用されます。</target>
        </trans-unit>
        <trans-unit id="dc684def61a91898b8e700c661c25c45499194c9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALmap&quot;&gt;&lt;code&gt;List.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</source>
          <target state="translated">&lt;a href=&quot;list#VALmap&quot;&gt; &lt;code&gt;List.map&lt;/code&gt; &lt;/a&gt;と同じですが、関数は最初の引数（0から数えて）として要素のインデックスに適用され、2番目の引数として要素自体に適用されます。</target>
        </trans-unit>
        <trans-unit id="07e5da54b3e58cffce5dcf975ee537ee0049f347" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALmap&quot;&gt;&lt;code&gt;List.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. Not tail-recursive.</source>
          <target state="translated">&lt;a href=&quot;list#VALmap&quot;&gt; &lt;code&gt;List.map&lt;/code&gt; &lt;/a&gt;と同じですが、関数は最初の引数（0から数えて）として要素のインデックスに適用され、2番目の引数として要素自体に適用されます。末尾再帰ではありません。</target>
        </trans-unit>
        <trans-unit id="f278f01b75f84339a95f02cf174f13fe98b87140" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALmem&quot;&gt;&lt;code&gt;List.mem&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare list elements.</source>
          <target state="translated">&lt;a href=&quot;list#VALmem&quot;&gt; &lt;code&gt;List.mem&lt;/code&gt; &lt;/a&gt;と同じですが、リスト要素を比較するために構造的同等性の代わりに物理的同等性を使用します。</target>
        </trans-unit>
        <trans-unit id="cc597dd383c32c2fe212eea61ec88c51a1c705b7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALmem_assoc&quot;&gt;&lt;code&gt;List.mem_assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="translated">&lt;a href=&quot;list#VALmem_assoc&quot;&gt; &lt;code&gt;List.mem_assoc&lt;/code&gt; &lt;/a&gt;と同じですが、キーを比較するために構造的同等性の代わりに物理的同等性を使用します。</target>
        </trans-unit>
        <trans-unit id="c5648092d04fe28c8f412cb5f697baca8b54584a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALremove_assoc&quot;&gt;&lt;code&gt;List.remove_assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="translated">&lt;a href=&quot;list#VALremove_assoc&quot;&gt; &lt;code&gt;List.remove_assoc&lt;/code&gt; &lt;/a&gt;と同じですが、キーを比較するために構造的同等性の代わりに物理的同等性を使用します。</target>
        </trans-unit>
        <trans-unit id="cb15cbdfe0a952963566629782ecdca0c3663773" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALremove_assoc&quot;&gt;&lt;code&gt;List.remove_assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys. Not tail-recursive.</source>
          <target state="translated">&lt;a href=&quot;list#VALremove_assoc&quot;&gt; &lt;code&gt;List.remove_assoc&lt;/code&gt; &lt;/a&gt;と同じですが、キーを比較するために構造的同等性の代わりに物理的同等性を使用します。末尾再帰ではありません。</target>
        </trans-unit>
        <trans-unit id="0c2bcc43ad0b1cf93273485e22b4686193cf40bf" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALsort&quot;&gt;&lt;code&gt;List.sort&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;list#VALstable_sort&quot;&gt;&lt;code&gt;List.stable_sort&lt;/code&gt;&lt;/a&gt;, whichever is faster on typical input.</source>
          <target state="translated">&lt;a href=&quot;list#VALsort&quot;&gt; &lt;code&gt;List.sort&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;list#VALstable_sort&quot;&gt; &lt;code&gt;List.stable_sort&lt;/code&gt; &lt;/a&gt;と同じで、通常の入力でどちらか速い方です。</target>
        </trans-unit>
        <trans-unit id="f01e9ec044e06917acbacbf12f225663c50f555b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALsort&quot;&gt;&lt;code&gt;List.sort&lt;/code&gt;&lt;/a&gt;, but also remove duplicates.</source>
          <target state="translated">&lt;a href=&quot;list#VALsort&quot;&gt; &lt;code&gt;List.sort&lt;/code&gt; &lt;/a&gt;と同じですが、重複も削除します。</target>
        </trans-unit>
        <trans-unit id="9ccf422348eea44e7c9498d76b6ec57751e6a10f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALsort&quot;&gt;&lt;code&gt;List.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is guaranteed to be stable (i.e.</source>
          <target state="translated">&lt;a href=&quot;list#VALsort&quot;&gt; &lt;code&gt;List.sort&lt;/code&gt; &lt;/a&gt;と同じですが、並べ替えアルゴリズムが安定していることが保証されています（つまり、</target>
        </trans-unit>
        <trans-unit id="7a12065f1cedfb3082a4e7c5cd09a36bb8788703" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALsort&quot;&gt;&lt;code&gt;List.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is guaranteed to be stable (i.e. elements that compare equal are kept in their original order) .</source>
          <target state="translated">&lt;a href=&quot;list#VALsort&quot;&gt; &lt;code&gt;List.sort&lt;/code&gt; &lt;/a&gt;と同じですが、並べ替えアルゴリズムは安定していることが保証されています（つまり、等しいと比較される要素は元の順序で保持されます）。</target>
        </trans-unit>
        <trans-unit id="5e41d8e08e07b0a5dc42e6f1c646ca9a18b1229d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;map.s#VALmap&quot;&gt;&lt;code&gt;Map.S.map&lt;/code&gt;&lt;/a&gt;, but the function receives as arguments both the key and the associated value for each binding of the map.</source>
          <target state="translated">&lt;a href=&quot;map.s#VALmap&quot;&gt; &lt;code&gt;Map.S.map&lt;/code&gt; &lt;/a&gt;と同じですが、関数は、マップの各バインディングのキーと関連する値の両方を引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="84610c6c6e340ae9eca648775ba33b1d58392e90" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;map.s#VALmin_binding&quot;&gt;&lt;code&gt;Map.S.min_binding&lt;/code&gt;&lt;/a&gt;, but returns the binding with the largest key in the given map.</source>
          <target state="translated">&lt;a href=&quot;map.s#VALmin_binding&quot;&gt; &lt;code&gt;Map.S.min_binding&lt;/code&gt; &lt;/a&gt;と同じですが、指定されたマップで最大のキーを持つバインディングを返します。</target>
        </trans-unit>
        <trans-unit id="b5b97dc9f28ec2f18b7151b69bf9322fca370e94" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;map.s#VALmin_binding_opt&quot;&gt;&lt;code&gt;Map.S.min_binding_opt&lt;/code&gt;&lt;/a&gt;, but returns the binding with the largest key in the given map.</source>
          <target state="translated">&lt;a href=&quot;map.s#VALmin_binding_opt&quot;&gt; &lt;code&gt;Map.S.min_binding_opt&lt;/code&gt; &lt;/a&gt;と同じですが、指定されたマップで最大のキーを持つバインディングを返します。</target>
        </trans-unit>
        <trans-unit id="33c2489468e9f3f979019c6d86283fa45eaaad05" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;mutex#VALlock&quot;&gt;&lt;code&gt;Mutex.lock&lt;/code&gt;&lt;/a&gt;, but does not suspend the calling thread if the mutex is already locked: just return &lt;code&gt;false&lt;/code&gt; immediately in that case.</source>
          <target state="translated">&lt;a href=&quot;mutex#VALlock&quot;&gt; &lt;code&gt;Mutex.lock&lt;/code&gt; &lt;/a&gt;と同じですが、ミューテックスがすでにロックされている場合は呼び出しスレッドを一時停止しません。その場合はすぐに &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7bf9f1cc52702f4bf949ebd2de44c29ddce8d82d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;mutex#VALlock&quot;&gt;&lt;code&gt;Mutex.lock&lt;/code&gt;&lt;/a&gt;, but does not suspend the calling thread if the mutex is already locked: just return &lt;code&gt;false&lt;/code&gt; immediately in that case. If the mutex is unlocked, lock it and return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;mutex#VALlock&quot;&gt; &lt;code&gt;Mutex.lock&lt;/code&gt; &lt;/a&gt;と同じですが、ミューテックスがすでにロックされている場合は呼び出しスレッドを一時停止しません。その場合はすぐに &lt;code&gt;false&lt;/code&gt; を返します。ミューテックスのロックが解除されている場合は、ロックして &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="29bb30b08c76e9218330938ed5acf4b7bd43235f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;nativeint#VALcompare&quot;&gt;&lt;code&gt;Nativeint.compare&lt;/code&gt;&lt;/a&gt;, except that arguments are interpreted as &lt;em&gt;unsigned&lt;/em&gt; native integers.</source>
          <target state="translated">&lt;a href=&quot;nativeint#VALcompare&quot;&gt; &lt;code&gt;Nativeint.compare&lt;/code&gt; &lt;/a&gt;と同じですが、引数が&lt;em&gt;符号なしの&lt;/em&gt;ネイティブ整数として解釈される点が異なります。</target>
        </trans-unit>
        <trans-unit id="6ac5f2fa99301d1533783bef4faf9022ba510be2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;nativeint#VALdiv&quot;&gt;&lt;code&gt;Nativeint.div&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; native integers.</source>
          <target state="translated">&lt;a href=&quot;nativeint#VALdiv&quot;&gt; &lt;code&gt;Nativeint.div&lt;/code&gt; &lt;/a&gt;と同じですが、引数と結果が&lt;em&gt;符号なしの&lt;/em&gt;ネイティブ整数として解釈される点が異なります。</target>
        </trans-unit>
        <trans-unit id="48ed9d59b23177b4aeda7c57295a325c64d73dfb" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;nativeint#VALrem&quot;&gt;&lt;code&gt;Nativeint.rem&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; native integers.</source>
          <target state="translated">&lt;a href=&quot;nativeint#VALrem&quot;&gt; &lt;code&gt;Nativeint.rem&lt;/code&gt; &lt;/a&gt;と同じですが、引数と結果が&lt;em&gt;符号なしの&lt;/em&gt;ネイティブ整数として解釈される点が異なります。</target>
        </trans-unit>
        <trans-unit id="6979a20df1226ab09dd0bba9c80d7b3a5fd8d882" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;nativeint#VALto_int&quot;&gt;&lt;code&gt;Nativeint.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer.</source>
          <target state="translated">&lt;a href=&quot;nativeint#VALto_int&quot;&gt; &lt;code&gt;Nativeint.to_int&lt;/code&gt; &lt;/a&gt;と同じですが、引数を&lt;em&gt;符号なし&lt;/em&gt;整数として解釈します。</target>
        </trans-unit>
        <trans-unit id="1ee21bd32ca71f640d563ef90f2b892055a57a73" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;nativeint#VALto_int&quot;&gt;&lt;code&gt;Nativeint.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer. Returns &lt;code&gt;None&lt;/code&gt; if the unsigned value of the argument cannot fit into an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;nativeint#VALto_int&quot;&gt; &lt;code&gt;Nativeint.to_int&lt;/code&gt; &lt;/a&gt;と同じですが、引数を&lt;em&gt;符号なし&lt;/em&gt;整数として解釈します。引数の符号なしの値が &lt;code&gt;int&lt;/code&gt; に収まらない場合は、 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f93f6e6d4ceb9e25ff2460d13da6de6e961e6619" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;parsing#VALsymbol_start&quot;&gt;&lt;code&gt;Parsing.symbol_start&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;parsing#VALsymbol_end&quot;&gt;&lt;code&gt;Parsing.symbol_end&lt;/code&gt;&lt;/a&gt;, but return the offset of the string matching the &lt;code&gt;n&lt;/code&gt;th item on the right-hand side of the rule, where &lt;code&gt;n&lt;/code&gt; is the integer parameter to &lt;code&gt;rhs_start&lt;/code&gt; and &lt;code&gt;rhs_end&lt;/code&gt;.</source>
          <target state="translated">同様&lt;a href=&quot;parsing#VALsymbol_start&quot;&gt; &lt;code&gt;Parsing.symbol_start&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;parsing#VALsymbol_end&quot;&gt; &lt;code&gt;Parsing.symbol_end&lt;/code&gt; &lt;/a&gt;が、マッチする文字列のオフセットを返す &lt;code&gt;n&lt;/code&gt; 規則の右側に番目の項目、 &lt;code&gt;n&lt;/code&gt; は整数パラメータで &lt;code&gt;rhs_start&lt;/code&gt; と &lt;code&gt;rhs_end&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="5e44ea14896b49d8694c81026509f0a4272d72a4" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;parsing#VALsymbol_start&quot;&gt;&lt;code&gt;Parsing.symbol_start&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;parsing#VALsymbol_end&quot;&gt;&lt;code&gt;Parsing.symbol_end&lt;/code&gt;&lt;/a&gt;, but return the offset of the string matching the &lt;code&gt;n&lt;/code&gt;th item on the right-hand side of the rule, where &lt;code&gt;n&lt;/code&gt; is the integer parameter to &lt;code&gt;rhs_start&lt;/code&gt; and &lt;code&gt;rhs_end&lt;/code&gt;. &lt;code&gt;n&lt;/code&gt; is 1 for the leftmost item.</source>
          <target state="translated">同様&lt;a href=&quot;parsing#VALsymbol_start&quot;&gt; &lt;code&gt;Parsing.symbol_start&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;parsing#VALsymbol_end&quot;&gt; &lt;code&gt;Parsing.symbol_end&lt;/code&gt; &lt;/a&gt;が、マッチする文字列のオフセットを返す &lt;code&gt;n&lt;/code&gt; 規則の右側に番目の項目、 &lt;code&gt;n&lt;/code&gt; は整数パラメータで &lt;code&gt;rhs_start&lt;/code&gt; と &lt;code&gt;rhs_end&lt;/code&gt; を。左端の項目の &lt;code&gt;n&lt;/code&gt; は1です。</target>
        </trans-unit>
        <trans-unit id="6cb7ceb07c3d1a6b6d400da25ad838125aa3c850" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALbprintf&quot;&gt;&lt;code&gt;Printf.bprintf&lt;/code&gt;&lt;/a&gt;, but does not print anything.</source>
          <target state="translated">&lt;a href=&quot;printf#VALbprintf&quot;&gt; &lt;code&gt;Printf.bprintf&lt;/code&gt; &lt;/a&gt;と同じですが、何も出力しません。</target>
        </trans-unit>
        <trans-unit id="597d77ddd034f823f008ceac00b46c902306198d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALbprintf&quot;&gt;&lt;code&gt;Printf.bprintf&lt;/code&gt;&lt;/a&gt;, but does not print anything. Useful to ignore some material when conditionally printing.</source>
          <target state="translated">&lt;a href=&quot;printf#VALbprintf&quot;&gt; &lt;code&gt;Printf.bprintf&lt;/code&gt; &lt;/a&gt;と同じですが、何も出力しません。条件付きで印刷するときに一部の素材を無視すると便利です。</target>
        </trans-unit>
        <trans-unit id="05a2091c4119f6172112c2ac5717acc5da8f9018" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but does not print anything.</source>
          <target state="translated">&lt;a href=&quot;printf#VALfprintf&quot;&gt; &lt;code&gt;Printf.fprintf&lt;/code&gt; &lt;/a&gt;と同じですが、何も出力しません。</target>
        </trans-unit>
        <trans-unit id="116d3974ff88722606a899c2f2d0e80529debebf" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but does not print anything. Useful to ignore some material when conditionally printing.</source>
          <target state="translated">&lt;a href=&quot;printf#VALfprintf&quot;&gt; &lt;code&gt;Printf.fprintf&lt;/code&gt; &lt;/a&gt;と同じですが、何も出力しません。条件付きで印刷するときに一部の素材を無視すると便利です。</target>
        </trans-unit>
        <trans-unit id="98bf747b8baf691783a29088f7de04889b8227d7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but instead of printing on an output channel, append the formatted arguments to the given extensible buffer (see module &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;printf#VALfprintf&quot;&gt; &lt;code&gt;Printf.fprintf&lt;/code&gt; &lt;/a&gt;と同じですが、出力チャネルに出力する代わりに、フォーマットされた引数を指定された拡張可能なバッファーに追加します（モジュール&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2dbd5088eeeb6897ec892724ea0d0eb339118411" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but instead of printing on an output channel, return a string containing the result of formatting the arguments.</source>
          <target state="translated">&lt;a href=&quot;printf#VALfprintf&quot;&gt; &lt;code&gt;Printf.fprintf&lt;/code&gt; &lt;/a&gt;と同じですが、出力チャネルに出力する代わりに、引数のフォーマット結果を含む文字列を返します。</target>
        </trans-unit>
        <trans-unit id="903835fc5ab41ecba837a51ccab77d4ddaf2f12f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but output on &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;printf#VALfprintf&quot;&gt; &lt;code&gt;Printf.fprintf&lt;/code&gt; &lt;/a&gt;と同じですが、 &lt;code&gt;stderr&lt;/code&gt; に出力されます。</target>
        </trans-unit>
        <trans-unit id="0627b2dfc136353cfa912810f662e028607e49e1" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but output on &lt;code&gt;stdout&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;printf#VALfprintf&quot;&gt; &lt;code&gt;Printf.fprintf&lt;/code&gt; &lt;/a&gt;と同じですが、 &lt;code&gt;stdout&lt;/code&gt; に出力されます。</target>
        </trans-unit>
        <trans-unit id="605fd49a2fc5b49e6640ac52ec79127278757dd6" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;random#VALinit&quot;&gt;&lt;code&gt;Random.init&lt;/code&gt;&lt;/a&gt; but takes more data as seed.</source>
          <target state="translated">&lt;a href=&quot;random#VALinit&quot;&gt; &lt;code&gt;Random.init&lt;/code&gt; と&lt;/a&gt;同じですが、シードとしてより多くのデータを取ります。</target>
        </trans-unit>
        <trans-unit id="38c97b0749b6e2e68c84c9c4c1d523339f996017" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;scanf#VALbscanf&quot;&gt;&lt;code&gt;Scanf.bscanf&lt;/code&gt;&lt;/a&gt;, but reads from the given string.</source>
          <target state="translated">&lt;a href=&quot;scanf#VALbscanf&quot;&gt; &lt;code&gt;Scanf.bscanf&lt;/code&gt; &lt;/a&gt;と同じですが、指定された文字列から読み取ります。</target>
        </trans-unit>
        <trans-unit id="b7a9aa3ce5444c788f6bafbb53a27b4625a5fdac" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;scanf#VALbscanf&quot;&gt;&lt;code&gt;Scanf.bscanf&lt;/code&gt;&lt;/a&gt;, but reads from the predefined formatted input channel &lt;a href=&quot;scanf.scanning#VALstdin&quot;&gt;&lt;code&gt;Scanf.Scanning.stdin&lt;/code&gt;&lt;/a&gt; that is connected to &lt;a href=&quot;stdlib#VALstdin&quot;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;scanf#VALbscanf&quot;&gt; &lt;code&gt;Scanf.bscanf&lt;/code&gt; &lt;/a&gt;と同じですが、&lt;a href=&quot;stdlib#VALstdin&quot;&gt; &lt;code&gt;stdin&lt;/code&gt; に&lt;/a&gt;接続されている事前定義されたフォーマット済み入力チャネル&lt;a href=&quot;scanf.scanning#VALstdin&quot;&gt; &lt;code&gt;Scanf.Scanning.stdin&lt;/code&gt; &lt;/a&gt;から読み取ります。</target>
        </trans-unit>
        <trans-unit id="7e275ae24fb70616c1c93959eab119121e5bc039" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;scanf#VALbscanf&quot;&gt;&lt;code&gt;Scanf.bscanf&lt;/code&gt;&lt;/a&gt;, but takes an additional function argument &lt;code&gt;ef&lt;/code&gt; that is called in case of error: if the scanning process or some conversion fails, the scanning function aborts and calls the error handling function &lt;code&gt;ef&lt;/code&gt; with the formatted input channel and the exception that aborted the scanning process as arguments.</source>
          <target state="translated">&lt;a href=&quot;scanf#VALbscanf&quot;&gt; &lt;code&gt;Scanf.bscanf&lt;/code&gt; &lt;/a&gt;と同じですが、エラーの場合に呼び出される追加の関数引数 &lt;code&gt;ef&lt;/code&gt; を取ります。スキャンプロセスまたは何らかの変換が失敗すると、スキャン関数は中止され、フォーマットされた入力チャネルと例外を使用してエラー処理関数 &lt;code&gt;ef&lt;/code&gt; を呼び出します。引数としてスキャンプロセスを中止しました。</target>
        </trans-unit>
        <trans-unit id="07f65fb6c848e411824e9128a096ea90d81db9af" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;scanf#VALbscanf_format&quot;&gt;&lt;code&gt;Scanf.bscanf_format&lt;/code&gt;&lt;/a&gt;, but reads from the given string.</source>
          <target state="translated">&lt;a href=&quot;scanf#VALbscanf_format&quot;&gt; &lt;code&gt;Scanf.bscanf_format&lt;/code&gt; &lt;/a&gt;と同じですが、指定された文字列から読み取ります。</target>
        </trans-unit>
        <trans-unit id="5309bcd41583f28972ebfef8e49e8bce448e4527" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;scanf#VALkscanf&quot;&gt;&lt;code&gt;Scanf.kscanf&lt;/code&gt;&lt;/a&gt; but reads from the given string.</source>
          <target state="translated">&lt;a href=&quot;scanf#VALkscanf&quot;&gt; &lt;code&gt;Scanf.kscanf&lt;/code&gt; と&lt;/a&gt;同じですが、指定された文字列から読み取ります。</target>
        </trans-unit>
        <trans-unit id="323e86ec70bd89677346a6583a829ebbe2ae7330" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;set.s#VALmin_elt&quot;&gt;&lt;code&gt;Set.S.min_elt&lt;/code&gt;&lt;/a&gt;, but returns the largest element of the given set.</source>
          <target state="translated">&lt;a href=&quot;set.s#VALmin_elt&quot;&gt; &lt;code&gt;Set.S.min_elt&lt;/code&gt; &lt;/a&gt;と同じですが、指定されたセットの最大の要素を返します。</target>
        </trans-unit>
        <trans-unit id="4d87d14d0afc47f407599cb66efa429712c223dc" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;set.s#VALmin_elt_opt&quot;&gt;&lt;code&gt;Set.S.min_elt_opt&lt;/code&gt;&lt;/a&gt;, but returns the largest element of the given set.</source>
          <target state="translated">&lt;a href=&quot;set.s#VALmin_elt_opt&quot;&gt; &lt;code&gt;Set.S.min_elt_opt&lt;/code&gt; &lt;/a&gt;と同じですが、指定されたセットの最大の要素を返します。</target>
        </trans-unit>
        <trans-unit id="2f9f5003c9600b6a1f306994666e30bcb5ce7c91" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALbool_of_string_opt&quot;&gt;&lt;code&gt;bool_of_string_opt&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Invalid_argument&amp;nbsp;&quot;bool_of_string&quot;&lt;/code&gt; instead of returning &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALbool_of_string_opt&quot;&gt; &lt;code&gt;bool_of_string_opt&lt;/code&gt; &lt;/a&gt;と同じですが、 &lt;code&gt;None&lt;/code&gt; を返す代わりに &lt;code&gt;Invalid_argument&amp;nbsp;&quot;bool_of_string&quot;&lt;/code&gt; せます。</target>
        </trans-unit>
        <trans-unit id="411b9f76037f4296364868efdfde037a2156c23a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALfloat_of_int&quot;&gt;&lt;code&gt;float_of_int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALfloat_of_int&quot;&gt; &lt;code&gt;float_of_int&lt;/code&gt; と&lt;/a&gt;同じです。</target>
        </trans-unit>
        <trans-unit id="6ce8917bfbdaf74dd0dc77a9bc97edf18aa8cf85" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALfloat_of_string_opt&quot;&gt;&lt;code&gt;float_of_string_opt&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Failure&amp;nbsp;&quot;float_of_string&quot;&lt;/code&gt; instead of returning &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALfloat_of_string_opt&quot;&gt; &lt;code&gt;float_of_string_opt&lt;/code&gt; &lt;/a&gt;と同じですが、 &lt;code&gt;None&lt;/code&gt; を返す代わりに &lt;code&gt;Failure&amp;nbsp;&quot;float_of_string&quot;&lt;/code&gt; せます。</target>
        </trans-unit>
        <trans-unit id="7fe6d67d833098b31b91689dfff0d8e1d7c7eef0" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALinput_char&quot;&gt;&lt;code&gt;input_char&lt;/code&gt;&lt;/a&gt;, but return the 8-bit integer representing the character.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALinput_char&quot;&gt; &lt;code&gt;input_char&lt;/code&gt; &lt;/a&gt;と同じですが、文字を表す8ビット整数を返します。</target>
        </trans-unit>
        <trans-unit id="9247863ad3361094f638c21625cd94974860a2e1" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALint_of_float&quot;&gt;&lt;code&gt;int_of_float&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALint_of_float&quot;&gt; &lt;code&gt;int_of_float&lt;/code&gt; と&lt;/a&gt;同じです。</target>
        </trans-unit>
        <trans-unit id="f05f7c8c1bc41d854474c20c8ad2e9d8bb05f930" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALint_of_string_opt&quot;&gt;&lt;code&gt;int_of_string_opt&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Failure&amp;nbsp;&quot;int_of_string&quot;&lt;/code&gt; instead of returning &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALint_of_string_opt&quot;&gt; &lt;code&gt;int_of_string_opt&lt;/code&gt; &lt;/a&gt;と同じですが、 &lt;code&gt;None&lt;/code&gt; を返す代わりに &lt;code&gt;Failure&amp;nbsp;&quot;int_of_string&quot;&lt;/code&gt; せます。</target>
        </trans-unit>
        <trans-unit id="3c53cd139a31694470cf050f422d3a0265b9112a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALopen_in&quot;&gt;&lt;code&gt;open_in&lt;/code&gt;&lt;/a&gt;, but the file is opened in binary mode, so that no translation takes place during reads.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALopen_in&quot;&gt; &lt;code&gt;open_in&lt;/code&gt; &lt;/a&gt;と同じですが、ファイルはバイナリモードで開かれるため、読み取り中に変換は行われません。</target>
        </trans-unit>
        <trans-unit id="55ecc123ad0cb37869733b8983aa4916c8f93d14" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALopen_in&quot;&gt;&lt;code&gt;open_in&lt;/code&gt;&lt;/a&gt;, but the file is opened in binary mode, so that no translation takes place during reads. On operating systems that do not distinguish between text mode and binary mode, this function behaves like &lt;a href=&quot;stdlib#VALopen_in&quot;&gt;&lt;code&gt;open_in&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALopen_in&quot;&gt; &lt;code&gt;open_in&lt;/code&gt; &lt;/a&gt;と同じですが、ファイルはバイナリモードで開かれるため、読み取り中に変換は行われません。テキストモードとバイナリモードを区別しないオペレーティングシステムでは、この関数は&lt;a href=&quot;stdlib#VALopen_in&quot;&gt; &lt;code&gt;open_in&lt;/code&gt; の&lt;/a&gt;ように動作します。</target>
        </trans-unit>
        <trans-unit id="323f16be34977b08ef0742f0a4d6244d3ca7c57e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALopen_out&quot;&gt;&lt;code&gt;open_out&lt;/code&gt;&lt;/a&gt;, but the file is opened in binary mode, so that no translation takes place during writes.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALopen_out&quot;&gt; &lt;code&gt;open_out&lt;/code&gt; &lt;/a&gt;と同じですが、ファイルはバイナリモードで開かれるため、書き込み中に変換は行われません。</target>
        </trans-unit>
        <trans-unit id="d93234224074545ee7a9e2b9a86554a2981b69e2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALopen_out&quot;&gt;&lt;code&gt;open_out&lt;/code&gt;&lt;/a&gt;, but the file is opened in binary mode, so that no translation takes place during writes. On operating systems that do not distinguish between text mode and binary mode, this function behaves like &lt;a href=&quot;stdlib#VALopen_out&quot;&gt;&lt;code&gt;open_out&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALopen_out&quot;&gt; &lt;code&gt;open_out&lt;/code&gt; &lt;/a&gt;と同じですが、ファイルはバイナリモードで開かれるため、書き込み中に変換は行われません。テキストモードとバイナリモードを区別しないオペレーティングシステムでは、この関数は&lt;a href=&quot;stdlib#VALopen_out&quot;&gt; &lt;code&gt;open_out&lt;/code&gt; の&lt;/a&gt;ように動作します。</target>
        </trans-unit>
        <trans-unit id="24481b089af2657000809001c238b6f9b0f4e0af" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALread_float_opt&quot;&gt;&lt;code&gt;read_float_opt&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Failure&amp;nbsp;&quot;float_of_string&quot;&lt;/code&gt; instead of returning &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALread_float_opt&quot;&gt; &lt;code&gt;read_float_opt&lt;/code&gt; &lt;/a&gt;と同じですが、 &lt;code&gt;None&lt;/code&gt; を返す代わりに &lt;code&gt;Failure&amp;nbsp;&quot;float_of_string&quot;&lt;/code&gt; せます。</target>
        </trans-unit>
        <trans-unit id="48c74b7de295eba63ba5f3a919e8f2c6adbd8a33" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALread_int_opt&quot;&gt;&lt;code&gt;read_int_opt&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Failure&amp;nbsp;&quot;int_of_string&quot;&lt;/code&gt; instead of returning &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALread_int_opt&quot;&gt; &lt;code&gt;read_int_opt&lt;/code&gt; &lt;/a&gt;と同じですが、 &lt;code&gt;None&lt;/code&gt; を返す代わりに &lt;code&gt;Failure&amp;nbsp;&quot;int_of_string&quot;&lt;/code&gt; せます。</target>
        </trans-unit>
        <trans-unit id="8ddba8b73df312e3bb8a4a4dd00d3f77a1490c51" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALbounded_split&quot;&gt;&lt;code&gt;Str.bounded_split&lt;/code&gt;&lt;/a&gt;, but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result.</source>
          <target state="translated">&lt;a href=&quot;str#VALbounded_split&quot;&gt; &lt;code&gt;Str.bounded_split&lt;/code&gt; &lt;/a&gt;と同じですが、文字列の最初と最後にある区切り文字が認識され、結果として空の文字列として返されます。</target>
        </trans-unit>
        <trans-unit id="6982fa0eb06337a7c3dae1ced9283df7661e381e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALbounded_split_delim&quot;&gt;&lt;code&gt;Str.bounded_split_delim&lt;/code&gt;&lt;/a&gt;, but returns the delimiters as well as the substrings contained between delimiters.</source>
          <target state="translated">&lt;a href=&quot;str#VALbounded_split_delim&quot;&gt; &lt;code&gt;Str.bounded_split_delim&lt;/code&gt; &lt;/a&gt;と同じですが、区切り文字と、区切り文字の間に含まれる部分文字列を返します。</target>
        </trans-unit>
        <trans-unit id="e64952e02cabe857b0729cf1e9340753ed51e7ff" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALbounded_split_delim&quot;&gt;&lt;code&gt;Str.bounded_split_delim&lt;/code&gt;&lt;/a&gt;, but returns the delimiters as well as the substrings contained between delimiters. The former are tagged &lt;code&gt;Delim&lt;/code&gt; in the result list; the latter are tagged &lt;code&gt;Text&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;str#VALbounded_split_delim&quot;&gt; &lt;code&gt;Str.bounded_split_delim&lt;/code&gt; &lt;/a&gt;と同じですが、区切り文字と、区切り文字の間に含まれる部分文字列を返します。前者は、結果リストで &lt;code&gt;Delim&lt;/code&gt; のタグが付けられています。後者は &lt;code&gt;Text&lt;/code&gt; タグが付けられています。</target>
        </trans-unit>
        <trans-unit id="e1609c94404d88fc9d53b1da97ce9d20515d7246" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALglobal_replace&quot;&gt;&lt;code&gt;Str.global_replace&lt;/code&gt;&lt;/a&gt;, except that only the first substring matching the regular expression is replaced.</source>
          <target state="translated">&lt;a href=&quot;str#VALglobal_replace&quot;&gt; &lt;code&gt;Str.global_replace&lt;/code&gt; &lt;/a&gt;と同じですが、正規表現に一致する最初の部分文字列のみが置き換えられる点が異なります。</target>
        </trans-unit>
        <trans-unit id="fd9b2a60d8afcf0ca57919fb33a2a161d8146a3c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALglobal_substitute&quot;&gt;&lt;code&gt;Str.global_substitute&lt;/code&gt;&lt;/a&gt;, except that only the first substring matching the regular expression is replaced.</source>
          <target state="translated">&lt;a href=&quot;str#VALglobal_substitute&quot;&gt; &lt;code&gt;Str.global_substitute&lt;/code&gt; &lt;/a&gt;と同じですが、正規表現に一致する最初の部分文字列のみが置き換えられる点が異なります。</target>
        </trans-unit>
        <trans-unit id="645dbfce7f97a3c08c8bb5134f87363d3ea98801" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALsplit&quot;&gt;&lt;code&gt;Str.split&lt;/code&gt;&lt;/a&gt; but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result.</source>
          <target state="translated">&lt;a href=&quot;str#VALsplit&quot;&gt; &lt;code&gt;Str.split&lt;/code&gt; と&lt;/a&gt;同じですが、文字列の最初と最後にある区切り文字が認識され、結果として空の文字列として返されます。</target>
        </trans-unit>
        <trans-unit id="69b2ab41a3851df0e07eb8f0456bd4d76cffc716" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALsplit&quot;&gt;&lt;code&gt;Str.split&lt;/code&gt;&lt;/a&gt; but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result. For instance, &lt;code&gt;split_delim&amp;nbsp;(regexp&amp;nbsp;&quot;&amp;nbsp;&quot;)&amp;nbsp;&quot;&amp;nbsp;abc&amp;nbsp;&quot;&lt;/code&gt; returns &lt;code&gt;[&quot;&quot;;&amp;nbsp;&quot;abc&quot;;&amp;nbsp;&quot;&quot;]&lt;/code&gt;, while &lt;code&gt;split&lt;/code&gt; with the same arguments returns &lt;code&gt;[&quot;abc&quot;]&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;str#VALsplit&quot;&gt; &lt;code&gt;Str.split&lt;/code&gt; と&lt;/a&gt;同じですが、文字列の最初と最後にある区切り文字が認識され、結果として空の文字列として返されます。たとえば、 &lt;code&gt;split_delim&amp;nbsp;(regexp&amp;nbsp;&quot;&amp;nbsp;&quot;)&amp;nbsp;&quot;&amp;nbsp;abc&amp;nbsp;&quot;&lt;/code&gt; は &lt;code&gt;[&quot;&quot;;&amp;nbsp;&quot;abc&quot;;&amp;nbsp;&quot;&quot;]&lt;/code&gt; 返します。&quot;abc&quot;; &quot;&quot;]、同じ引数で &lt;code&gt;split&lt;/code&gt; と &lt;code&gt;[&quot;abc&quot;]&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="8b0b8ef7d1667633a23a5a4ee7b93a1e32d8b88d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALsplit&quot;&gt;&lt;code&gt;Str.split&lt;/code&gt;&lt;/a&gt;, but splits into at most &lt;code&gt;n&lt;/code&gt; substrings, where &lt;code&gt;n&lt;/code&gt; is the extra integer parameter.</source>
          <target state="translated">&lt;a href=&quot;str#VALsplit&quot;&gt; &lt;code&gt;Str.split&lt;/code&gt; &lt;/a&gt;と同じですが、最大 &lt;code&gt;n&lt;/code&gt; 個の部分文字列に分割されます。ここで、 &lt;code&gt;n&lt;/code&gt; は追加の整数パラメーターです。</target>
        </trans-unit>
        <trans-unit id="2b72a1f0b7788615dc64f6f1c8fbca31f272f622" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALsplit_delim&quot;&gt;&lt;code&gt;Str.split_delim&lt;/code&gt;&lt;/a&gt;, but returns the delimiters as well as the substrings contained between delimiters.</source>
          <target state="translated">&lt;a href=&quot;str#VALsplit_delim&quot;&gt; &lt;code&gt;Str.split_delim&lt;/code&gt; &lt;/a&gt;と同じですが、区切り文字と、区切り文字の間に含まれる部分文字列を返します。</target>
        </trans-unit>
        <trans-unit id="15f877265312f461d1096d92069bf7f458372831" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALsplit_delim&quot;&gt;&lt;code&gt;Str.split_delim&lt;/code&gt;&lt;/a&gt;, but returns the delimiters as well as the substrings contained between delimiters. The former are tagged &lt;code&gt;Delim&lt;/code&gt; in the result list; the latter are tagged &lt;code&gt;Text&lt;/code&gt;. For instance, &lt;code&gt;full_split&amp;nbsp;(regexp&amp;nbsp;&quot;[{}]&quot;)&amp;nbsp;&quot;{ab}&quot;&lt;/code&gt; returns &lt;code&gt;[Delim&amp;nbsp;&quot;{&quot;;&amp;nbsp;Text&amp;nbsp;&quot;ab&quot;;&amp;nbsp;Delim&amp;nbsp;&quot;}&quot;]&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;str#VALsplit_delim&quot;&gt; &lt;code&gt;Str.split_delim&lt;/code&gt; &lt;/a&gt;と同じですが、区切り文字と、区切り文字の間に含まれる部分文字列を返します。前者は、結果リストで &lt;code&gt;Delim&lt;/code&gt; のタグが付けられています。後者は &lt;code&gt;Text&lt;/code&gt; タグが付けられています。たとえば、 &lt;code&gt;full_split&amp;nbsp;(regexp&amp;nbsp;&quot;[{}]&quot;)&amp;nbsp;&quot;{ab}&quot;&lt;/code&gt; は &lt;code&gt;[Delim&amp;nbsp;&quot;{&quot;;&amp;nbsp;Text&amp;nbsp;&quot;ab&quot;;&amp;nbsp;Delim&amp;nbsp;&quot;}&quot;]&lt;/code&gt; 返します。テキスト &quot;ab&quot;; Delim &quot;}&quot;]。</target>
        </trans-unit>
        <trans-unit id="d0692f3a3cee00e3b8603778a4c7712906ec4621" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;string#VALiter&quot;&gt;&lt;code&gt;String.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument.</source>
          <target state="translated">&lt;a href=&quot;string#VALiter&quot;&gt; &lt;code&gt;String.iter&lt;/code&gt; &lt;/a&gt;と同じですが、関数は最初の引数（0から数えて）として要素のインデックスに適用され、2番目の引数として文字自体が適用されます。</target>
        </trans-unit>
        <trans-unit id="d7968ed5b081149c89f1e0fa86bf0d5f30d7c69e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;sys#VALsignal&quot;&gt;&lt;code&gt;Sys.signal&lt;/code&gt;&lt;/a&gt; but return value is ignored.</source>
          <target state="translated">&lt;a href=&quot;sys#VALsignal&quot;&gt; &lt;code&gt;Sys.signal&lt;/code&gt; と&lt;/a&gt;同じですが、戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="5daa4aa669d6140b1f11939508bb7452da79a67c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALexecv&quot;&gt;&lt;code&gt;Unix.execv&lt;/code&gt;&lt;/a&gt;, except that the program is searched in the path.</source>
          <target state="translated">プログラムがパスで検索されることを除いて、&lt;a href=&quot;unix#VALexecv&quot;&gt; &lt;code&gt;Unix.execv&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="2a708d9cd30d9bcb873a2bbdec55ad092a2283c6" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALexecv&quot;&gt;&lt;code&gt;Unix.execv&lt;/code&gt;&lt;/a&gt;, except that the third argument provides the environment to the program executed.</source>
          <target state="translated">3番目の引数が実行されるプログラムに環境を提供することを除いて、&lt;a href=&quot;unix#VALexecv&quot;&gt; &lt;code&gt;Unix.execv&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="b893cf728ed7c290ea4d8de6a765228904e7e9cd" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALexecve&quot;&gt;&lt;code&gt;Unix.execve&lt;/code&gt;&lt;/a&gt;, except that the program is searched in the path.</source>
          <target state="translated">プログラムがパスで検索されることを除いて、&lt;a href=&quot;unix#VALexecve&quot;&gt; &lt;code&gt;Unix.execve&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="d6c6b3275127e4a2b0e15806210c78557a90a641" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALgetsockopt&quot;&gt;&lt;code&gt;Unix.getsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is a floating-point number.</source>
          <target state="translated">値が浮動小数点数であるソケットオプションの&lt;a href=&quot;unix#VALgetsockopt&quot;&gt; &lt;code&gt;Unix.getsockopt&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="e0552634335a6244379f872d5afcf9b8ff17abac" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALgetsockopt&quot;&gt;&lt;code&gt;Unix.getsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is an &lt;code&gt;int&amp;nbsp;option&lt;/code&gt;.</source>
          <target state="translated">値が &lt;code&gt;int&amp;nbsp;option&lt;/code&gt; であるソケットオプションの&lt;a href=&quot;unix#VALgetsockopt&quot;&gt; &lt;code&gt;Unix.getsockopt&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="6ccd2775d37b244d589570b5a83bf1fff470f930" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALgetsockopt&quot;&gt;&lt;code&gt;Unix.getsockopt&lt;/code&gt;&lt;/a&gt; for an integer-valued socket option.</source>
          <target state="translated">整数値ソケットオプションの&lt;a href=&quot;unix#VALgetsockopt&quot;&gt; &lt;code&gt;Unix.getsockopt&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="d0de5100000461ea91875aa316785dbb2c728a71" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_args_in&quot;&gt;&lt;code&gt;Unix.open_process_args_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_args_in&quot;&gt; &lt;code&gt;Unix.open_process_args_in&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力をパイプにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="04a6dbb90158d0d77adf57f026936d0c57220866" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_args_in&quot;&gt;&lt;code&gt;Unix.open_process_args_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call &lt;a href=&quot;stdlib#VALflush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; at the right times to ensure correct synchronization.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_args_in&quot;&gt; &lt;code&gt;Unix.open_process_args_in&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力をパイプにリダイレクトします。返された出力チャネルに書き込まれたデータは、コマンドの標準入力に送信されます。警告：出力チャネルへの書き込みはバッファリングされるため、正しい同期を確保するために、適切なタイミングで&lt;a href=&quot;stdlib#VALflush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt;を呼び出すように注意してください。</target>
        </trans-unit>
        <trans-unit id="1ca74917dcbeb57f2b329b75e10bb25b503b0a8f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt;&lt;code&gt;Unix.open_process_args_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt; &lt;code&gt;Unix.open_process_args_out&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力と標準出力の両方を、返された2つのチャネルに接続されたパイプにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="6730908a84b3cb3f1a13eccdf0036a5d8fb4fe3f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt;&lt;code&gt;Unix.open_process_args_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt; &lt;code&gt;Unix.open_process_args_out&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力と標準出力の両方を、返された2つのチャネルに接続されたパイプにリダイレクトします。入力チャネルはコマンドの出力に接続され、出力チャネルはコマンドの入力に接続されます。</target>
        </trans-unit>
        <trans-unit id="fd4f33fc262e197a9c5c5faa35e1af02e51522fb" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_in&quot;&gt;&lt;code&gt;Unix.open_process_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_in&quot;&gt; &lt;code&gt;Unix.open_process_in&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力をパイプにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="4432b186980b65050b14ebe524d6ccb0effe1cbe" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_in&quot;&gt;&lt;code&gt;Unix.open_process_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call &lt;a href=&quot;stdlib#VALflush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; at the right times to ensure correct synchronization. If the command does not need to be run through the shell, &lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt;&lt;code&gt;Unix.open_process_args_out&lt;/code&gt;&lt;/a&gt; can be used instead of &lt;a href=&quot;unix#VALopen_process_out&quot;&gt;&lt;code&gt;Unix.open_process_out&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_in&quot;&gt; &lt;code&gt;Unix.open_process_in&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力をパイプにリダイレクトします。返された出力チャネルに書き込まれたデータは、コマンドの標準入力に送信されます。警告：出力チャネルへの書き込みはバッファリングされるため、正しい同期を確保するために、適切なタイミングで&lt;a href=&quot;stdlib#VALflush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt;を呼び出すように注意してください。コマンドをシェルで実行する必要がない場合は、&lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt; &lt;code&gt;Unix.open_process_args_out&lt;/code&gt; &lt;/a&gt;代わりに&lt;a href=&quot;unix#VALopen_process_out&quot;&gt; &lt;code&gt;Unix.open_process_out&lt;/code&gt; &lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="400f201b658e10b1fb5d5ee1a5edd0d521281cc3" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_out&quot;&gt;&lt;code&gt;Unix.open_process_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_out&quot;&gt; &lt;code&gt;Unix.open_process_out&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力と標準出力の両方を、返された2つのチャネルに接続されたパイプにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="9bd93e8c46769e4a63980a0df1c06c4705ad215f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_out&quot;&gt;&lt;code&gt;Unix.open_process_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command. If the command does not need to be run through the shell, &lt;a href=&quot;unix#VALopen_process_args&quot;&gt;&lt;code&gt;Unix.open_process_args&lt;/code&gt;&lt;/a&gt; can be used instead of &lt;a href=&quot;unix#VALopen_process&quot;&gt;&lt;code&gt;Unix.open_process&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_out&quot;&gt; &lt;code&gt;Unix.open_process_out&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力と標準出力の両方を、返された2つのチャネルに接続されたパイプにリダイレクトします。入力チャネルはコマンドの出力に接続され、出力チャネルはコマンドの入力に接続されます。コマンドをシェルで実行する必要がない場合は、&lt;a href=&quot;unix#VALopen_process_args&quot;&gt; &lt;code&gt;Unix.open_process_args&lt;/code&gt; &lt;/a&gt;代わりに&lt;a href=&quot;unix#VALopen_process&quot;&gt; &lt;code&gt;Unix.open_process&lt;/code&gt; _argsを&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="b6543a4be336cd7a10bc2562d9d658e2168377e8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALsetsockopt&quot;&gt;&lt;code&gt;Unix.setsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is a floating-point number.</source>
          <target state="translated">値が浮動小数点数であるソケットオプションの&lt;a href=&quot;unix#VALsetsockopt&quot;&gt; &lt;code&gt;Unix.setsockopt&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="6c5b76333b4e99e6a9ab705b4249e48d9dd668ad" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALsetsockopt&quot;&gt;&lt;code&gt;Unix.setsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is an &lt;code&gt;int&amp;nbsp;option&lt;/code&gt;.</source>
          <target state="translated">値が &lt;code&gt;int&amp;nbsp;option&lt;/code&gt; であるソケットオプションの&lt;a href=&quot;unix#VALsetsockopt&quot;&gt; &lt;code&gt;Unix.setsockopt&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="fed90d80a7d1a730063ec7a3b8b32ff6edc3351e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALsetsockopt&quot;&gt;&lt;code&gt;Unix.setsockopt&lt;/code&gt;&lt;/a&gt; for an integer-valued socket option.</source>
          <target state="translated">整数値のソケットオプションの&lt;a href=&quot;unix#VALsetsockopt&quot;&gt; &lt;code&gt;Unix.setsockopt&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="3c98f0bea8300ac91fb9f63d0fd4a61c14dd081b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALstat&quot;&gt;&lt;code&gt;Unix.stat&lt;/code&gt;&lt;/a&gt;, but in case the file is a symbolic link, return the information for the link itself.</source>
          <target state="translated">&lt;a href=&quot;unix#VALstat&quot;&gt; &lt;code&gt;Unix.stat&lt;/code&gt; &lt;/a&gt;と同じですが、ファイルがシンボリックリンクの場合は、リンク自体の情報を返します。</target>
        </trans-unit>
        <trans-unit id="d0f0bbf3af3fd498bd73c1b249f8494b3b0d662b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALtime&quot;&gt;&lt;code&gt;Unix.time&lt;/code&gt;&lt;/a&gt;, but with resolution better than 1 second.</source>
          <target state="translated">&lt;a href=&quot;unix#VALtime&quot;&gt; &lt;code&gt;Unix.time&lt;/code&gt; &lt;/a&gt;と同じですが、解像度が1秒より優れています。</target>
        </trans-unit>
        <trans-unit id="a21154fa6f6e436f37ee974e7f6836eda29d4db4" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALwait&quot;&gt;&lt;code&gt;Unix.wait&lt;/code&gt;&lt;/a&gt;, but waits for the child process whose pid is given.</source>
          <target state="translated">&lt;a href=&quot;unix#VALwait&quot;&gt; &lt;code&gt;Unix.wait&lt;/code&gt; &lt;/a&gt;と同じですが、pidが指定された子プロセスを待機します。</target>
        </trans-unit>
        <trans-unit id="608298b1f57c96bf9fc4424262d4f324a7df0264" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALwait&quot;&gt;&lt;code&gt;Unix.wait&lt;/code&gt;&lt;/a&gt;, but waits for the child process whose pid is given. A pid of &lt;code&gt;-1&lt;/code&gt; means wait for any child. A pid of &lt;code&gt;0&lt;/code&gt; means wait for any child in the same process group as the current process. Negative pid arguments represent process groups. The list of options indicates whether &lt;code&gt;waitpid&lt;/code&gt; should return immediately without waiting, and whether it should report stopped children.</source>
          <target state="translated">&lt;a href=&quot;unix#VALwait&quot;&gt; &lt;code&gt;Unix.wait&lt;/code&gt; &lt;/a&gt;と同じですが、pidが指定された子プロセスを待機します。 &lt;code&gt;-1&lt;/code&gt; のpidは、子を待つことを意味します。pidが &lt;code&gt;0&lt;/code&gt; の場合は、現在のプロセスと同じプロセスグループ内の子を待機することを意味します。負のpid引数は、プロセスグループを表します。オプションのリストは、 &lt;code&gt;waitpid&lt;/code&gt; が待機せずにすぐに戻るかどうか、および停止した子を報告するかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="caf47a2e07a1307ccaa0e16933dbac1c3da8ff4a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALexecv&quot;&gt;&lt;code&gt;UnixLabels.execv&lt;/code&gt;&lt;/a&gt;, except that the program is searched in the path.</source>
          <target state="translated">プログラムがパスで検索されることを除いて、&lt;a href=&quot;unixlabels#VALexecv&quot;&gt; &lt;code&gt;UnixLabels.execv&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="17608b7ce230e91245ac7189baaf4b5d7c629aae" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALexecv&quot;&gt;&lt;code&gt;UnixLabels.execv&lt;/code&gt;&lt;/a&gt;, except that the third argument provides the environment to the program executed.</source>
          <target state="translated">3番目の引数が実行されるプログラムに環境を提供することを除いて、&lt;a href=&quot;unixlabels#VALexecv&quot;&gt; &lt;code&gt;UnixLabels.execv&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="ab31c3ea08cf5e6e296addd6e070d481600d65ca" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALexecve&quot;&gt;&lt;code&gt;UnixLabels.execve&lt;/code&gt;&lt;/a&gt;, except that the program is searched in the path.</source>
          <target state="translated">プログラムがパスで検索されることを除いて、&lt;a href=&quot;unixlabels#VALexecve&quot;&gt; &lt;code&gt;UnixLabels.execve&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="a98a38c1ab8a2c589f6d8614fd139b40081fdbef" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_in&quot;&gt;&lt;code&gt;UnixLabels.open_process_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe.</source>
          <target state="translated">&lt;a href=&quot;unixlabels#VALopen_process_in&quot;&gt; &lt;code&gt;UnixLabels.open_process_in&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力をパイプにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="56dd9b0f8e60849f5e1ccd200832c2368f0a5c6d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_in&quot;&gt;&lt;code&gt;UnixLabels.open_process_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call &lt;a href=&quot;stdlib#VALflush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; at the right times to ensure correct synchronization.</source>
          <target state="translated">&lt;a href=&quot;unixlabels#VALopen_process_in&quot;&gt; &lt;code&gt;UnixLabels.open_process_in&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力をパイプにリダイレクトします。返された出力チャネルに書き込まれたデータは、コマンドの標準入力に送信されます。警告：出力チャネルへの書き込みはバッファリングされるため、正しい同期を確保するために、適切なタイミングで&lt;a href=&quot;stdlib#VALflush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt;を呼び出すように注意してください。</target>
        </trans-unit>
        <trans-unit id="c53f3ebb5a3a3ec8212e53346d9dfbc917d46153" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_out&quot;&gt;&lt;code&gt;UnixLabels.open_process_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels.</source>
          <target state="translated">&lt;a href=&quot;unixlabels#VALopen_process_out&quot;&gt; &lt;code&gt;UnixLabels.open_process_out&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力と標準出力の両方を、返された2つのチャネルに接続されたパイプにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="9ff2be04cc4a4f2bd8a41d7809f3c42b1b3fd623" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_out&quot;&gt;&lt;code&gt;UnixLabels.open_process_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command.</source>
          <target state="translated">&lt;a href=&quot;unixlabels#VALopen_process_out&quot;&gt; &lt;code&gt;UnixLabels.open_process_out&lt;/code&gt; &lt;/a&gt;と同じですが、コマンドの標準入力と標準出力の両方を、返された2つのチャネルに接続されたパイプにリダイレクトします。入力チャネルはコマンドの出力に接続され、出力チャネルはコマンドの入力に接続されます。</target>
        </trans-unit>
        <trans-unit id="303c640a353eb6c65832957f63f4a41545d98822" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALstat&quot;&gt;&lt;code&gt;UnixLabels.stat&lt;/code&gt;&lt;/a&gt;, but in case the file is a symbolic link, return the information for the link itself.</source>
          <target state="translated">&lt;a href=&quot;unixlabels#VALstat&quot;&gt; &lt;code&gt;UnixLabels.stat&lt;/code&gt; &lt;/a&gt;と同じですが、ファイルがシンボリックリンクの場合は、リンク自体の情報を返します。</target>
        </trans-unit>
        <trans-unit id="0b718023cdbaf7a0d1781215e8a8748920d9f2df" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALtime&quot;&gt;&lt;code&gt;UnixLabels.time&lt;/code&gt;&lt;/a&gt;, but with resolution better than 1 second.</source>
          <target state="translated">&lt;a href=&quot;unixlabels#VALtime&quot;&gt; &lt;code&gt;UnixLabels.time&lt;/code&gt; &lt;/a&gt;と同じですが、解像度が1秒より優れています。</target>
        </trans-unit>
        <trans-unit id="407561584b38a5960b1bf7c185b210603368a748" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALwait&quot;&gt;&lt;code&gt;UnixLabels.wait&lt;/code&gt;&lt;/a&gt;, but waits for the child process whose pid is given.</source>
          <target state="translated">&lt;a href=&quot;unixlabels#VALwait&quot;&gt; &lt;code&gt;UnixLabels.wait&lt;/code&gt; &lt;/a&gt;と同じですが、pidが指定された子プロセスを待機します。</target>
        </trans-unit>
        <trans-unit id="fb6c5594c06859b6b1695bad3261a2a664f2a4fb" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALwait&quot;&gt;&lt;code&gt;UnixLabels.wait&lt;/code&gt;&lt;/a&gt;, but waits for the child process whose pid is given. A pid of &lt;code&gt;-1&lt;/code&gt; means wait for any child. A pid of &lt;code&gt;0&lt;/code&gt; means wait for any child in the same process group as the current process. Negative pid arguments represent process groups. The list of options indicates whether &lt;code&gt;waitpid&lt;/code&gt; should return immediately without waiting, or also report stopped children.</source>
          <target state="translated">&lt;a href=&quot;unixlabels#VALwait&quot;&gt; &lt;code&gt;UnixLabels.wait&lt;/code&gt; &lt;/a&gt;と同じですが、pidが指定された子プロセスを待機します。 &lt;code&gt;-1&lt;/code&gt; のpidは、子を待つことを意味します。pidが &lt;code&gt;0&lt;/code&gt; の場合は、現在のプロセスと同じプロセスグループ内の子を待機することを意味します。負のpid引数は、プロセスグループを表します。オプションのリストは、 &lt;code&gt;waitpid&lt;/code&gt; が待機せずにすぐに戻るか、停止した子を報告するかを示します。</target>
        </trans-unit>
        <trans-unit id="5a8bd99c7460ce991b1f76d7dcf77ff141574343" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;Seq.map&amp;nbsp;fst&amp;nbsp;(to_seq&amp;nbsp;m)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Seq.map&amp;nbsp;fst&amp;nbsp;(to_seq&amp;nbsp;m)&lt;/code&gt; 同じ</target>
        </trans-unit>
        <trans-unit id="7ef87ad5fdb766aea3427cbbe06977d8fb00c341" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;Seq.map&amp;nbsp;snd&amp;nbsp;(to_seq&amp;nbsp;m)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Seq.map&amp;nbsp;snd&amp;nbsp;(to_seq&amp;nbsp;m)&lt;/code&gt; 同じ</target>
        </trans-unit>
        <trans-unit id="e7756dac8c5684d7502c839de58fd561337b099e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;asprintf&lt;/code&gt; above, but instead of returning the string, passes it to the first argument.</source>
          <target state="translated">上記の &lt;code&gt;asprintf&lt;/code&gt; と同じですが、文字列を返す代わりに、最初の引数に渡します。</target>
        </trans-unit>
        <trans-unit id="2de1149116241df59ce72d742b17cc08c1f28ba3" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;bprintf&lt;/code&gt;, but instead of returning immediately, passes the buffer to its first argument at the end of printing.</source>
          <target state="translated">&lt;code&gt;bprintf&lt;/code&gt; と同じですが、すぐに戻る代わりに、印刷の最後にバッファを最初の引数に渡します。</target>
        </trans-unit>
        <trans-unit id="61229c95603a206567541d2bae31c03be44a6ab5" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;close_in&lt;/code&gt;, but ignore all errors.</source>
          <target state="translated">&lt;code&gt;close_in&lt;/code&gt; と同じですが、すべてのエラーを無視します。</target>
        </trans-unit>
        <trans-unit id="5d80a1452822a59937e135872716a381c7e03182" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;close_out&lt;/code&gt;, but ignore all errors.</source>
          <target state="translated">&lt;code&gt;close_out&lt;/code&gt; と同じですが、すべてのエラーを無視します。</target>
        </trans-unit>
        <trans-unit id="2d6ca41e5568da892b2762ee089046bff8ba2459" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;concat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;concat&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="d8fa7f17194e3019021ddf61c6f46e34ecaa33b8" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;concat&lt;/code&gt;. Not tail-recursive (length of the argument + length of the longest sub-list).</source>
          <target state="translated">&lt;code&gt;concat&lt;/code&gt; と同じです。末尾再帰ではありません（引数の長さ+最長のサブリストの長さ）。</target>
        </trans-unit>
        <trans-unit id="dd4c33c9d65f70c9d7ee1af0731dc7e8afd8c5c1" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt; above, but does not print anything.</source>
          <target state="translated">上記の &lt;code&gt;fprintf&lt;/code&gt; と同じですが、何も出力しません。</target>
        </trans-unit>
        <trans-unit id="165e8a97fa41eb82e0c8c1d8cfb0b30aab69602d" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt; above, but does not print anything. Useful to ignore some material when conditionally printing.</source>
          <target state="translated">上記の &lt;code&gt;fprintf&lt;/code&gt; と同じですが、何も出力しません。条件付きで印刷するときに一部の素材を無視すると便利です。</target>
        </trans-unit>
        <trans-unit id="09958f5b48b2b309b5ea3a63488376b83e2afe60" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt; above, but instead of returning immediately, passes the formatter to its first argument at the end of printing.</source>
          <target state="translated">上記の &lt;code&gt;fprintf&lt;/code&gt; と同じですが、すぐに戻る代わりに、印刷の最後にフォーマッタを最初の引数に渡します。</target>
        </trans-unit>
        <trans-unit id="d32e61b52c71a7c9fd70e10a78dcb52a61a03a27" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt; above, but output on &lt;code&gt;err_formatter&lt;/code&gt;.</source>
          <target state="translated">上記の &lt;code&gt;fprintf&lt;/code&gt; と同じですが、 &lt;code&gt;err_formatter&lt;/code&gt; に出力されます。</target>
        </trans-unit>
        <trans-unit id="28b5d440509fc53579868ce26db55574dadde8f3" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt; above, but output on &lt;code&gt;std_formatter&lt;/code&gt;.</source>
          <target state="translated">上記の &lt;code&gt;fprintf&lt;/code&gt; と同じですが、 &lt;code&gt;std_formatter&lt;/code&gt; に出力されます。</target>
        </trans-unit>
        <trans-unit id="fca0121f9ecc3f9eea36751ece9717cff6b5ca08" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt;, but instead of returning immediately, passes the out channel to its first argument at the end of printing.</source>
          <target state="translated">&lt;code&gt;fprintf&lt;/code&gt; と同じですが、すぐに戻る代わりに、出力チャネルを印刷の最後に最初の引数に渡します。</target>
        </trans-unit>
        <trans-unit id="85477ad9607910645a4cae463af0194fcbcbbd82" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;from_bytes&lt;/code&gt; but take a string as argument instead of a byte sequence.</source>
          <target state="translated">&lt;code&gt;from_bytes&lt;/code&gt; と同じですが、バイトシーケンスの代わりに文字列を引数として取ります。</target>
        </trans-unit>
        <trans-unit id="f902a890b4677fdb53fb593b92d348fd89e4ecad" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;kbprintf&lt;/code&gt; above, but does not print anything.</source>
          <target state="translated">上記の &lt;code&gt;kbprintf&lt;/code&gt; と同じですが、何も出力しません。</target>
        </trans-unit>
        <trans-unit id="323e7c74b03ec833b5f658d968f462e2f00a6fde" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;kbprintf&lt;/code&gt; above, but does not print anything. Useful to ignore some material when conditionally printing.</source>
          <target state="translated">上記の &lt;code&gt;kbprintf&lt;/code&gt; と同じですが、何も出力しません。条件付きで印刷するときに一部の素材を無視すると便利です。</target>
        </trans-unit>
        <trans-unit id="e6b9b887c852a909f173f4fe9d2c194966481272" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;kfprintf&lt;/code&gt; above, but does not print anything.</source>
          <target state="translated">上記の &lt;code&gt;kfprintf&lt;/code&gt; と同じですが、何も出力しません。</target>
        </trans-unit>
        <trans-unit id="d9a0812a679830e5f1a73eded5030020c526bfe4" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;kfprintf&lt;/code&gt; above, but does not print anything. Useful to ignore some material when conditionally printing.</source>
          <target state="translated">上記の &lt;code&gt;kfprintf&lt;/code&gt; と同じですが、何も出力しません。条件付きで印刷するときに一部の素材を無視すると便利です。</target>
        </trans-unit>
        <trans-unit id="eee6fff015990c50ecc5fe249480a12a9634bf27" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;loadfile&lt;/code&gt;, except that the compilation units just loaded are hidden (cannot be referenced) from other modules dynamically loaded afterwards.</source>
          <target state="translated">&lt;code&gt;loadfile&lt;/code&gt; と同じですが、ロードされたばかりのコンパイルユニットが、後で動的にロードされる他のモジュールから隠されている（参照できない）点が異なります。</target>
        </trans-unit>
        <trans-unit id="48345963e7cc4adb3c40b2554f5eb535743ade0b" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;of_string&lt;/code&gt;, but return &lt;code&gt;None&lt;/code&gt; instead of raising.</source>
          <target state="translated">&lt;code&gt;of_string&lt;/code&gt; と同じですが、上げる代わりに &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c361c25057b9bffccefbf7a19e0a3b5f29828cbb" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;of_string&lt;/code&gt;, but returns &lt;code&gt;None&lt;/code&gt; instead of raising.</source>
          <target state="translated">&lt;code&gt;of_string&lt;/code&gt; と同じですが、上げる代わりに &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="86057e6fc58542ce6470d1356aa453ddd23f0003" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;output&lt;/code&gt; but take a string as argument instead of a byte sequence.</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; 同じですが、バイトシーケンスの代わりに文字列を引数として取ります。</target>
        </trans-unit>
        <trans-unit id="a365765c385649c35170a1d62d4e139abc842c29" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;printf&lt;/code&gt; above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments.</source>
          <target state="translated">上記の &lt;code&gt;printf&lt;/code&gt; と同じですが、フォーマッタで出力する代わりに、引数のフォーマット結果を含む文字列を返します。</target>
        </trans-unit>
        <trans-unit id="8b219cd221033e5561185d56137b7eea562e4b09" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;printf&lt;/code&gt; above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. Note that the pretty-printer queue is flushed at the end of &lt;em&gt;each call&lt;/em&gt; to &lt;code&gt;sprintf&lt;/code&gt;.</source>
          <target state="translated">上記の &lt;code&gt;printf&lt;/code&gt; と同じですが、フォーマッタで出力する代わりに、引数のフォーマット結果を含む文字列を返します。プリティプリンターキューは、 &lt;code&gt;sprintf&lt;/code&gt; への&lt;em&gt;各呼び出し&lt;/em&gt;の最後にフラッシュされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e81d9086ebf44148891816f93a6e76c592f3978e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;printf&lt;/code&gt; above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. The type of &lt;code&gt;asprintf&lt;/code&gt; is general enough to interact nicely with &lt;code&gt;%a&lt;/code&gt; conversions.</source>
          <target state="translated">上記の &lt;code&gt;printf&lt;/code&gt; と同じですが、フォーマッタで出力する代わりに、引数のフォーマット結果を含む文字列を返します。 &lt;code&gt;asprintf&lt;/code&gt; のタイプは、 &lt;code&gt;%a&lt;/code&gt; 変換とうまく相互作用するのに十分一般的です。</target>
        </trans-unit>
        <trans-unit id="fd7b48bd5c2197002483acb223b697bff0e3eba4" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;regexp&lt;/code&gt;, but the compiled expression will match text in a case-insensitive way: uppercase and lowercase letters will be considered equivalent.</source>
          <target state="translated">&lt;code&gt;regexp&lt;/code&gt; と同じですが、コンパイルされた式は大文字と小文字を区別せずにテキストと一致します。大文字と小文字は同等と見なされます。</target>
        </trans-unit>
        <trans-unit id="457184985758494e7a293224dbb7a5261a63aa7d" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;rhs_end&lt;/code&gt;, but return a &lt;code&gt;position&lt;/code&gt; instead of an offset.</source>
          <target state="translated">&lt;code&gt;rhs_end&lt;/code&gt; と同じですが、オフセットの代わりに &lt;code&gt;position&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a72b7e9c224a9ccb1f2f53e778523b27aac6ffab" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;rhs_start&lt;/code&gt;, but return a &lt;code&gt;position&lt;/code&gt; instead of an offset.</source>
          <target state="translated">&lt;code&gt;rhs_start&lt;/code&gt; と同じですが、オフセットの代わりに &lt;code&gt;position&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7b335828744b489e53f0f480711956e971ada67e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;send&lt;/code&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="translated">&lt;code&gt;send&lt;/code&gt; と同じですが、バイトシーケンスではなく文字列からデータを取得します。</target>
        </trans-unit>
        <trans-unit id="7eb3a73795775f6f04310a222acafcac613122f8" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;sendto&lt;/code&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="translated">&lt;code&gt;sendto&lt;/code&gt; と同じですが、バイトシーケンスではなく文字列からデータを取得します。</target>
        </trans-unit>
        <trans-unit id="f54b43ff13273c160359917038aac331c82c04f9" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;single_write&lt;/code&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="translated">&lt;code&gt;single_write&lt;/code&gt; と同じですが、バイトシーケンスではなく文字列からデータを取得します。</target>
        </trans-unit>
        <trans-unit id="e509318a36aae9745538e3cff924b7f09940dcbc" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;sprintf&lt;/code&gt; above, but instead of returning the string, passes it to the first argument.</source>
          <target state="translated">上記の &lt;code&gt;sprintf&lt;/code&gt; と同じですが、文字列を返す代わりに、最初の引数に渡します。</target>
        </trans-unit>
        <trans-unit id="32c369585a4d9e703310e60740d96bc801e60e3b" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;stat&lt;/code&gt; except that &lt;code&gt;live_words&lt;/code&gt;, &lt;code&gt;live_blocks&lt;/code&gt;, &lt;code&gt;free_words&lt;/code&gt;, &lt;code&gt;free_blocks&lt;/code&gt;, &lt;code&gt;largest_free&lt;/code&gt;, and &lt;code&gt;fragments&lt;/code&gt; are set to 0.</source>
          <target state="translated">&lt;code&gt;live_words&lt;/code&gt; 、 &lt;code&gt;live_blocks&lt;/code&gt; 、 &lt;code&gt;free_words&lt;/code&gt; 、 &lt;code&gt;free_blocks&lt;/code&gt; 、 &lt;code&gt;largest_free&lt;/code&gt; 、および &lt;code&gt;fragments&lt;/code&gt; が0に設定されていることを除いて、 &lt;code&gt;stat&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="c121c44f363a196365879e856b71cfa44216b1ff" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;stat&lt;/code&gt; except that &lt;code&gt;live_words&lt;/code&gt;, &lt;code&gt;live_blocks&lt;/code&gt;, &lt;code&gt;free_words&lt;/code&gt;, &lt;code&gt;free_blocks&lt;/code&gt;, &lt;code&gt;largest_free&lt;/code&gt;, and &lt;code&gt;fragments&lt;/code&gt; are set to 0. This function is much faster than &lt;code&gt;stat&lt;/code&gt; because it does not need to go through the heap.</source>
          <target state="translated">&lt;code&gt;live_words&lt;/code&gt; 、 &lt;code&gt;live_blocks&lt;/code&gt; 、 &lt;code&gt;free_words&lt;/code&gt; 、 &lt;code&gt;free_blocks&lt;/code&gt; 、 &lt;code&gt;largest_free&lt;/code&gt; 、および &lt;code&gt;fragments&lt;/code&gt; が0に設定されていることを除いて、 &lt;code&gt;stat&lt;/code&gt; と同じです。この関数は、ヒープを通過する必要がないため、 &lt;code&gt;stat&lt;/code&gt; よりもはるかに高速です。</target>
        </trans-unit>
        <trans-unit id="f6ea64a04e25d166c8d8eaf4749b7ca5ff5d5f50" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;sub&lt;/code&gt; but return a string instead of a byte sequence.</source>
          <target state="translated">&lt;code&gt;sub&lt;/code&gt; と同じですが、バイトシーケンスの代わりに文字列を返します。</target>
        </trans-unit>
        <trans-unit id="c09ed6459a018a79cfc1bc66f1086cb01ca523d5" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;symbol_end&lt;/code&gt;, but return a &lt;code&gt;position&lt;/code&gt; instead of an offset.</source>
          <target state="translated">&lt;code&gt;symbol_end&lt;/code&gt; と同じですが、オフセットの代わりに &lt;code&gt;position&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e6fccc465944f04367da0ead152881f9e04a7e81" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;symbol_start&lt;/code&gt;, but return a &lt;code&gt;position&lt;/code&gt; instead of an offset.</source>
          <target state="translated">&lt;code&gt;symbol_start&lt;/code&gt; と同じですが、オフセットの代わりに &lt;code&gt;position&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="af62a4434a21011f6e9180e3a60ca8d8125a6b26" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;to_bytes&lt;/code&gt; but return the result as a string instead of a byte sequence.</source>
          <target state="translated">&lt;code&gt;to_bytes&lt;/code&gt; と同じですが、結果をバイトシーケンスではなく文字列として返します。</target>
        </trans-unit>
        <trans-unit id="e369a07c4ea8f7e07ae61d5585560d651b9a9707" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;write&lt;/code&gt;, but attempts to write only once.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; と同じですが、1回だけ書き込もうとします。</target>
        </trans-unit>
        <trans-unit id="b0ab15da80e429ebe8aeea44dd2d827709e48e38" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;write&lt;/code&gt;, but attempts to write only once. Thus, if an error occurs, &lt;code&gt;single_write&lt;/code&gt; guarantees that no data has been written.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; と同じですが、1回だけ書き込もうとします。したがって、エラーが発生した場合、 &lt;code&gt;single_write&lt;/code&gt; はデータが書き込まれていないことを保証します。</target>
        </trans-unit>
        <trans-unit id="3594c2736ae1bcbba2b97c88636073c3f47a55c4" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;write&lt;/code&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; と同じですが、バイトシーケンスではなく文字列からデータを取得します。</target>
        </trans-unit>
        <trans-unit id="8481cdaf533433ae0c1f1fd3a549797cd49b6c98" translate="yes" xml:space="preserve">
          <source>Same as caml_ba_alloc, but the sizes of the array in each dimension are listed as extra arguments in the function call, rather than being passed as an array.</source>
          <target state="translated">caml_ba_alloc と同じですが、各次元の配列のサイズは、配列として渡されるのではなく、関数呼び出しの追加引数としてリストアップされます。</target>
        </trans-unit>
        <trans-unit id="4326414e7d274f430f0f5afb1025c66fad82b993" translate="yes" xml:space="preserve">
          <source>Same as default</source>
          <target state="translated">デフォルトと同じ</target>
        </trans-unit>
        <trans-unit id="81635e2b4b2d81e962ad3462eb815e2981abd3a4" translate="yes" xml:space="preserve">
          <source>Same as directorydirectorynames, but the given directories will be searched only when looking for the source file of a module that has been packed into modulename.</source>
          <target state="translated">directorydorirectorynames と同じですが、与えられたディレクトリは modulename にパックされたモジュールのソースファイルを探すときにのみ検索されます。</target>
        </trans-unit>
        <trans-unit id="3e403a04412363e40f5f3e5fb7a9e63d1be63e7e" translate="yes" xml:space="preserve">
          <source>Same as print, but limit the depth of printing to 1. Useful to browse large data structures without printing them in full. display can be abbreviated as d.</source>
          <target state="translated">printと同じですが、印刷の深さを1に制限します。大きなデータ構造を完全に印刷せずにブラウズするのに便利。</target>
        </trans-unit>
        <trans-unit id="9a664314bf8d6048fecd76f5fdce508da73f1f80" translate="yes" xml:space="preserve">
          <source>Same usage as in ocamlrun (see section &lt;a href=&quot;runtime#s%3Aocamlrun-options&quot;&gt;11.2&lt;/a&gt;), except that option l is ignored (the operating system&amp;rsquo;s stack size limit is used instead).</source>
          <target state="translated">オプションlが無視される（代わりにオペレーティングシステムのスタックサイズ制限が使用される）ことを除いて、ocamlrun（セクション&lt;a href=&quot;runtime#s%3Aocamlrun-options&quot;&gt;11.2を&lt;/a&gt;参照）と同じ使用法。</target>
        </trans-unit>
        <trans-unit id="dbe8cbf2f2b94ce111ab0ab7f35a6d6e6c42c8e6" translate="yes" xml:space="preserve">
          <source>Sample code to iterate over all frames (inlined and non-inlined):</source>
          <target state="translated">すべてのフレーム(インラインおよび非インライン)を反復処理するサンプルコード。</target>
        </trans-unit>
        <trans-unit id="bd442e4ab9396a11176172c091d7cee7add08639" translate="yes" xml:space="preserve">
          <source>Sampling is temporarily disabled when calling a callback for the current thread. So they do not need to be reentrant if the program is single-threaded. However, if threads are used, it is possible that a context switch occurs during a callback, in this case the callback functions must be reentrant.</source>
          <target state="translated">サンプリングは、現在のスレッドのコールバックを呼び出す際に一時的に無効化されます。そのため、プログラムがシングルスレッドの場合はリエントラントする必要はありません。しかし、スレッドが使用されている場合、コールバック中にコンテキストスイッチが発生する可能性があり、この場合、コールバック関数はリエントラントでなければなりません。</target>
        </trans-unit>
        <trans-unit id="27f0ff259c8112bb799c30c20ec70580cdb5253a" translate="yes" xml:space="preserve">
          <source>Scaling factor for benefit calculation when using -unbox-closures. See section &lt;a href=&quot;#ss%3Aflambda-unbox-closures&quot;&gt;21.9.3&lt;/a&gt;.</source>
          <target state="translated">-unbox-closuresを使用する場合の利益計算の倍率。セクション&lt;a href=&quot;#ss%3Aflambda-unbox-closures&quot;&gt;21.9.3を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="28cb15f1110ec48e7f98551a0ec23abfd0c1e5f1" translate="yes" xml:space="preserve">
          <source>Scanf</source>
          <target state="translated">Scanf</target>
        </trans-unit>
        <trans-unit id="6d3fbf50e39a89b9875d7e6bb1a322a49865ba47" translate="yes" xml:space="preserve">
          <source>Scanners may raise the following exceptions when the input cannot be read according to the format string:</source>
          <target state="translated">スキャナは、入力がフォーマット文字列に従って読み込めない場合、以下のような例外を発生させることがあります。</target>
        </trans-unit>
        <trans-unit id="8a70efc0f7828c46836202c2d47457d38736373e" translate="yes" xml:space="preserve">
          <source>Scanning indications appear just after the string conversions &lt;code&gt;%s&lt;/code&gt; and &lt;code&gt;%[&amp;nbsp;range&amp;nbsp;]&lt;/code&gt; to delimit the end of the token. A scanning indication is introduced by a &lt;code&gt;@&lt;/code&gt; character, followed by some plain character &lt;code&gt;c&lt;/code&gt;. It means that the string token should end just before the next matching &lt;code&gt;c&lt;/code&gt; (which is skipped). If no &lt;code&gt;c&lt;/code&gt; character is encountered, the string token spreads as much as possible. For instance, &lt;code&gt;&quot;%s@\t&quot;&lt;/code&gt; reads a string up to the next tab character or to the end of input. If a &lt;code&gt;@&lt;/code&gt; character appears anywhere else in the format string, it is treated as a plain character.</source>
          <target state="translated">文字列変換 &lt;code&gt;%s&lt;/code&gt; および &lt;code&gt;%[&amp;nbsp;range&amp;nbsp;]&lt;/code&gt; の直後にスキャン表示が表示され、トークンの終わりが区切られます。スキャン表示は、 &lt;code&gt;@&lt;/code&gt; 文字で始まり、その後にいくつかのプレーン文字 &lt;code&gt;c&lt;/code&gt; が続きます。これは、文字列トークンが次の一致する &lt;code&gt;c&lt;/code&gt; （スキップされる）の直前で終了する必要があることを意味します。 &lt;code&gt;c&lt;/code&gt; 文字が検出されない場合、文字列トークンは可能な限り拡散します。たとえば、 &lt;code&gt;&quot;%s@\t&quot;&lt;/code&gt; は、次のタブ文字または入力の最後までの文字列を読み取ります。 &lt;code&gt;@&lt;/code&gt; 文字がフォーマット文字列の他の場所にある場合、それはプレーン文字として扱われます。</target>
        </trans-unit>
        <trans-unit id="95ed0e6d3bf4c13f8f5fbff20a20ce2709295670" translate="yes" xml:space="preserve">
          <source>Scanning indications in format strings</source>
          <target state="translated">フォーマット文字列のスキャニング表示</target>
        </trans-unit>
        <trans-unit id="20e2d37f170896ea7062b0ad6f0fcdfff1d85f14" translate="yes" xml:space="preserve">
          <source>Schedule a &lt;code&gt;SIGALRM&lt;/code&gt; signal after the given number of seconds.</source>
          <target state="translated">指定された秒数の後に &lt;code&gt;SIGALRM&lt;/code&gt; シグナルをスケジュールします。</target>
        </trans-unit>
        <trans-unit id="f2e7e26f280f080d905292f0c4d79db8e6aa9dd3" translate="yes" xml:space="preserve">
          <source>Search the directory dir for dynamically-loaded libraries, in addition to the standard search path (see section &lt;a href=&quot;#s%3Aocamlrun-dllpath&quot;&gt;11.3&lt;/a&gt;).</source>
          <target state="translated">標準の検索パスに加えて、動的にロードされたライブラリのディレクトリディレクトリを検索します（セクション&lt;a href=&quot;#s%3Aocamlrun-dllpath&quot;&gt;11.3を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="fc6f32a5a536661bf7b4474da8fc1cec8ffabad4" translate="yes" xml:space="preserve">
          <source>Second, it also notifies the type checker that the type of the function should be polymorphic. Indeed, without explicit polymorphic type annotation, the following type annotation is perfectly valid</source>
          <target state="translated">第二に、関数の型が多相でなければならないことを型チェッカーに通知します。実際、明示的な多相型アノテーションがなくても、次のような型アノテーションは完全に有効です。</target>
        </trans-unit>
        <trans-unit id="0d57ad8155ed417cf280a7c6ed005bbd68271208" translate="yes" xml:space="preserve">
          <source>Secondly, for records, OCaml can also deduce the right record type by looking at the whole set of fields used in a expression or pattern:</source>
          <target state="translated">第二に、レコードについては、OCamlはまた、式またはパターンで使用されるフィールドのセット全体を見ることによって、正しいレコードタイプを推論することができます。</target>
        </trans-unit>
        <trans-unit id="c8e7f0bb110fb501e896f97abb678f94792aa78c" translate="yes" xml:space="preserve">
          <source>Seconds 0..60</source>
          <target state="translated">秒 0...60</target>
        </trans-unit>
        <trans-unit id="ac86401d783cffa201b981e085f799bf8498d263" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;bigarray#VALchar&quot;&gt;&lt;code&gt;Bigarray.char&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;bigarray#VALchar&quot;&gt; &lt;code&gt;Bigarray.char&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4da4f758e9da516c2485f9f68d993993d7fc8cc5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;bigarray#VALfortran_layout&quot;&gt;&lt;code&gt;Bigarray.fortran_layout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;bigarray#VALfortran_layout&quot;&gt; &lt;code&gt;Bigarray.fortran_layout&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c41ef46129783d44de423e15dd183806b44f6399" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;filename#VALbasename&quot;&gt;&lt;code&gt;Filename.basename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;filename#VALbasename&quot;&gt; &lt;code&gt;Filename.basename&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="71122fe0c946308ef4312bedb5d901dde6d2e503" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;filename#VALbasename&quot;&gt;&lt;code&gt;Filename.basename&lt;/code&gt;&lt;/a&gt;. This function conforms to the specification of POSIX.1-2008 for the &lt;code&gt;dirname&lt;/code&gt; utility.</source>
          <target state="translated">&lt;a href=&quot;filename#VALbasename&quot;&gt; &lt;code&gt;Filename.basename&lt;/code&gt; を&lt;/a&gt;参照してください。この関数は、 &lt;code&gt;dirname&lt;/code&gt; ユーティリティのPOSIX.1-2008の仕様に準拠しています。</target>
        </trans-unit>
        <trans-unit id="2191c81cd8e40179143cee672778664dc62022d6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;marshal#VALheader_size&quot;&gt;&lt;code&gt;Marshal.header_size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;marshal#VALheader_size&quot;&gt; &lt;code&gt;Marshal.header_size&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f3a0e158d5b4d4995559ddcada00f718a47ed6ab" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;parsing#VALrhs_start&quot;&gt;&lt;code&gt;Parsing.rhs_start&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;parsing#VALrhs_start&quot;&gt; &lt;code&gt;Parsing.rhs_start&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1fd68a9cd836e826e538692b0f518ceb6d95b1f3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;parsing#VALsymbol_start&quot;&gt;&lt;code&gt;Parsing.symbol_start&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;parsing#VALsymbol_start&quot;&gt; &lt;code&gt;Parsing.symbol_start&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7473460fb55093a88c939ddf07bf5b97080d85d7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;thread#VALwait_timed_write&quot;&gt;&lt;code&gt;Thread.wait_timed_write&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;thread#VALwait_timed_write&quot;&gt; &lt;code&gt;Thread.wait_timed_write&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a9d4bf83db9715a2cdd0b54cccc0eccada72d457" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;thread#VALwait_write&quot;&gt;&lt;code&gt;Thread.wait_write&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;thread#VALwait_write&quot;&gt; &lt;code&gt;Thread.wait_write&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="117ae8697e149c8b10ba9fb72213dc70d8413f0c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;threadunix#VALtimed_write&quot;&gt;&lt;code&gt;ThreadUnix.timed_write&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;threadunix#VALtimed_write&quot;&gt; &lt;code&gt;ThreadUnix.timed_write&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="062b9eb85ac4f6537585317c419c75e1ead04a8b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;unix#VALftruncate&quot;&gt;&lt;code&gt;Unix.ftruncate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unix#VALftruncate&quot;&gt; &lt;code&gt;Unix.ftruncate&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="267f5d6d48db716a4209f785b2802c68df998040" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;unix#VALlseek&quot;&gt;&lt;code&gt;Unix.lseek&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unix#VALlseek&quot;&gt; &lt;code&gt;Unix.lseek&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7983bce1c7f5e7fb1e1f7b1727f347d34f1b4769" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;unix#VALtruncate&quot;&gt;&lt;code&gt;Unix.truncate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unix#VALtruncate&quot;&gt; &lt;code&gt;Unix.truncate&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="934e88396276c0c2240b775ffe7d702c1fad214e" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;(&amp;gt;=)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;(&amp;gt;=)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="afbdc53c2a856487304d86079f81868501dce464" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;(&amp;gt;=)&lt;/code&gt;. Left-associative operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;(&amp;gt;=)&lt;/code&gt; を参照してください。左結合演算子。詳細については、&lt;a href=&quot;ocaml_operators&quot;&gt; &lt;code&gt;Ocaml_operators&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cf550f11a6d457559150bea06847214db84bceb9" translate="yes" xml:space="preserve">
          <source>See &lt;em&gt;direct call site&lt;/em&gt; and &lt;em&gt;indirect call site&lt;/em&gt; below.</source>
          <target state="translated">参照してください。&lt;em&gt;直接呼び出しサイト&lt;/em&gt;および&lt;em&gt;間接的な呼び出しサイト&lt;/em&gt;以下を。</target>
        </trans-unit>
        <trans-unit id="42b4ebf3df5f1933706bd49f1f810739f86769b9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;format#VALpp_set_geometry&quot;&gt;&lt;code&gt;Format.pp_set_geometry&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;format#VALpp_set_geometry&quot;&gt; &lt;code&gt;Format.pp_set_geometry&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="bada19b24002891e2127f82d655fb232612c4165" translate="yes" xml:space="preserve">
          <source>See also the following language extension: &lt;a href=&quot;extensionsyntax#ss%3Aextension-literals&quot;&gt;extension literals&lt;/a&gt;.</source>
          <target state="translated">次の言語拡張も参照してください：&lt;a href=&quot;extensionsyntax#ss%3Aextension-literals&quot;&gt;拡張リテラル&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e2ee9c6eaaebba14087cba6c7dccbeafb26f9f20" translate="yes" xml:space="preserve">
          <source>See also the following language extension: &lt;a href=&quot;indexops#s%3Aindex-operators&quot;&gt;extended indexing operators&lt;/a&gt;.</source>
          <target state="translated">次の言語拡張も参照してください：&lt;a href=&quot;indexops#s%3Aindex-operators&quot;&gt;拡張インデックス演算子&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f7bc7936690111208cf1b4540a43bfc4e86d021b" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt; and &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt;.</source>
          <target state="translated">次の言語拡張も参照してください：&lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;属性&lt;/a&gt;と&lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;拡張ノード&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae0da72a16b2577a45cfe9897b6e643bb9e2ca8f" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;extensionsyntax#s%3Aext-ops&quot;&gt;extension operators&lt;/a&gt;, &lt;a href=&quot;indexops#s%3Aindex-operators&quot;&gt;extended indexing operators&lt;/a&gt;, and &lt;a href=&quot;bindingops#s%3Abinding-operators&quot;&gt;binding operators&lt;/a&gt;.</source>
          <target state="translated">次の言語拡張も参照してください：&lt;a href=&quot;extensionsyntax#s%3Aext-ops&quot;&gt;拡張演算子&lt;/a&gt;、&lt;a href=&quot;indexops#s%3Aindex-operators&quot;&gt;拡張インデックス演算子&lt;/a&gt;、および&lt;a href=&quot;bindingops#s%3Abinding-operators&quot;&gt;バインディング演算子&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="34c73179224e83424f2b6565f0815572a59180a7" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;firstclassmodules#s%3Afirst-class-modules&quot;&gt;first-class modules&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt; and &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt;.</source>
          <target state="translated">次の言語拡張も参照してください：&lt;a href=&quot;firstclassmodules#s%3Afirst-class-modules&quot;&gt;ファーストクラスのモジュール&lt;/a&gt;、&lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;属性&lt;/a&gt;、および&lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;拡張ノード&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="10f6e72f671a03b0649dd1686771098f16fd87b2" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;firstclassmodules#s%3Afirst-class-modules&quot;&gt;first-class modules&lt;/a&gt;, &lt;a href=&quot;overridingopen#s%3Aexplicit-overriding-open&quot;&gt;overriding in open statements&lt;/a&gt;, &lt;a href=&quot;bigarray#s%3Abigarray-access&quot;&gt;syntax for Bigarray access&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt;, &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt; and &lt;a href=&quot;indexops#s%3Aindex-operators&quot;&gt;extended indexing operators&lt;/a&gt;.</source>
          <target state="translated">次の言語拡張も参照してください：&lt;a href=&quot;firstclassmodules#s%3Afirst-class-modules&quot;&gt;ファーストクラスモジュール&lt;/a&gt;、&lt;a href=&quot;overridingopen#s%3Aexplicit-overriding-open&quot;&gt;openステートメント&lt;/a&gt;でのオーバーライド、&lt;a href=&quot;bigarray#s%3Abigarray-access&quot;&gt;Bigarrayアクセスの構文&lt;/a&gt;、&lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;属性&lt;/a&gt;、&lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;拡張ノード&lt;/a&gt;、および&lt;a href=&quot;indexops#s%3Aindex-operators&quot;&gt;拡張インデックス演算子&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="51afb98b828bb552a973a63ab8dfb1e7968deae7" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;locallyabstract#s%3Alocally-abstract&quot;&gt;locally abstract types&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt; and &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt;.</source>
          <target state="translated">次の言語拡張も参照してください：&lt;a href=&quot;locallyabstract#s%3Alocally-abstract&quot;&gt;ローカルで抽象型&lt;/a&gt;、&lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;属性&lt;/a&gt;、&lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;拡張ノード&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d964850f6cd04102cc69cbd15792541865759d3e" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;manual024#s%3Arecursive-modules&quot;&gt;recursive modules&lt;/a&gt;, &lt;a href=&quot;firstclassmodules#s%3Afirst-class-modules&quot;&gt;first-class modules&lt;/a&gt;, &lt;a href=&quot;overridingopen#s%3Aexplicit-overriding-open&quot;&gt;overriding in open statements&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt;, &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt; and &lt;a href=&quot;generativefunctors#s%3Agenerative-functors&quot;&gt;generative functors&lt;/a&gt;.</source>
          <target state="translated">次の言語拡張も参照してください：&lt;a href=&quot;manual024#s%3Arecursive-modules&quot;&gt;再帰モジュール&lt;/a&gt;、&lt;a href=&quot;firstclassmodules#s%3Afirst-class-modules&quot;&gt;ファーストクラスモジュール&lt;/a&gt;、&lt;a href=&quot;overridingopen#s%3Aexplicit-overriding-open&quot;&gt;openステートメント&lt;/a&gt;でのオーバーライド、&lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;属性&lt;/a&gt;、&lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;拡張ノード&lt;/a&gt;、&lt;a href=&quot;generativefunctors#s%3Agenerative-functors&quot;&gt;生成ファンクター&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a720c82ecb5b1fb607f1b4d9f4172063164c829c" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;moduletypeof#s%3Amodule-type-of&quot;&gt;recovering the type of a module&lt;/a&gt;, &lt;a href=&quot;signaturesubstitution#s%3Asignature-substitution&quot;&gt;substitution inside a signature&lt;/a&gt;, &lt;a href=&quot;modulealias#s%3Amodule-alias&quot;&gt;type-level module aliases&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt;, &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt; and &lt;a href=&quot;generativefunctors#s%3Agenerative-functors&quot;&gt;generative functors&lt;/a&gt;.</source>
          <target state="translated">また、以下の言語拡張を参照してください&lt;a href=&quot;moduletypeof#s%3Amodule-type-of&quot;&gt;モジュールの種類回復&lt;/a&gt;、&lt;a href=&quot;signaturesubstitution#s%3Asignature-substitution&quot;&gt;署名内部置換&lt;/a&gt;、&lt;a href=&quot;modulealias#s%3Amodule-alias&quot;&gt;タイプレベルのモジュール別名&lt;/a&gt;、&lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;属性&lt;/a&gt;、&lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;拡張ノード&lt;/a&gt;と&lt;a href=&quot;generativefunctors#s%3Agenerative-functors&quot;&gt;生成的ファンクタを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e29a84ccf334151d915afcb3f2e6e7537d68cd15" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;privatetypes#s%3Aprivate-types&quot;&gt;private types&lt;/a&gt;, &lt;a href=&quot;gadts#s%3Agadts&quot;&gt;generalized algebraic datatypes&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt;, &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt;, &lt;a href=&quot;extensiblevariants#s%3Aextensible-variants&quot;&gt;extensible variant types&lt;/a&gt; and &lt;a href=&quot;inlinerecords#s%3Ainline-records&quot;&gt;inline records&lt;/a&gt;.</source>
          <target state="translated">次の言語拡張機能も参照してください：&lt;a href=&quot;privatetypes#s%3Aprivate-types&quot;&gt;プライベート型&lt;/a&gt;、&lt;a href=&quot;gadts#s%3Agadts&quot;&gt;一般化代数的データ型&lt;/a&gt;、&lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;属性&lt;/a&gt;、&lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;拡張ノード&lt;/a&gt;、&lt;a href=&quot;extensiblevariants#s%3Aextensible-variants&quot;&gt;拡張可能なバリアント型&lt;/a&gt;、&lt;a href=&quot;inlinerecords#s%3Ainline-records&quot;&gt;インラインレコード&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e968b9a4f8cf9c493b7f7b75dc2169f869275ef3" translate="yes" xml:space="preserve">
          <source>See chapter &lt;a href=&quot;comp#c%3Acamlc&quot;&gt;9&lt;/a&gt; and chapter &lt;a href=&quot;runtime#c%3Aruntime&quot;&gt;11&lt;/a&gt; for more information about ocamlc and ocamlrun.</source>
          <target state="translated">ocamlcおよびocamlrunの詳細については、第&lt;a href=&quot;comp#c%3Acamlc&quot;&gt;9&lt;/a&gt;章および第&lt;a href=&quot;runtime#c%3Aruntime&quot;&gt;11&lt;/a&gt;章を参照してください。</target>
        </trans-unit>
        <trans-unit id="dfcccc261b9612e2f14b7e419031fa265dba4cb6" translate="yes" xml:space="preserve">
          <source>See definition of type &lt;a href=&quot;format#TYPEformatter_out_functions&quot;&gt;&lt;code&gt;Format.formatter_out_functions&lt;/code&gt;&lt;/a&gt; for the meaning of argument &lt;code&gt;out_funs&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;out_funs&lt;/code&gt; の意味については、&lt;a href=&quot;format#TYPEformatter_out_functions&quot;&gt; &lt;code&gt;Format.formatter_out_functions&lt;/code&gt; &lt;/a&gt;型の定義を参照してください。</target>
        </trans-unit>
        <trans-unit id="c5d3c6c1254d43caf08c4fc9fb0f0446b516d896" translate="yes" xml:space="preserve">
          <source>See section &lt;a href=&quot;comp#s%3Acomp-errors&quot;&gt;9.4&lt;/a&gt;.</source>
          <target state="translated">セクション&lt;a href=&quot;comp#s%3Acomp-errors&quot;&gt;9.4を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0f192eddf70c2ef4aad319edd7fbd3100374bc82" translate="yes" xml:space="preserve">
          <source>See the documentation of type &lt;code&gt;lexbuf&lt;/code&gt; for information about how the lexing engine will manage positions.</source>
          <target state="translated">&lt;code&gt;lexbuf&lt;/code&gt; エンジンが位置を管理する方法については、lexbufタイプのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="078de8e8cb0a0be314bfef55ec6a63ca5273d8c4" translate="yes" xml:space="preserve">
          <source>Seeking and truncating</source>
          <target state="translated">シークと切り捨て</target>
        </trans-unit>
        <trans-unit id="d0d35cbfc8ed9fd20bcc34424eb4686772749654" translate="yes" xml:space="preserve">
          <source>Select a stack frame by number and describe it. The frame currently executing when the program stopped has number 0; its caller has number 1; and so on up the call stack.</source>
          <target state="translated">スタックフレームを番号で選択して記述します。プログラムが停止したときに現在実行中のフレームには 0 番、その呼び出し元には 1 番、呼び出しスタックには 1 番、というように番号がついています。</target>
        </trans-unit>
        <trans-unit id="8d8452dd0699a1a23b96c5aa8df33d39a7e9dbaf" translate="yes" xml:space="preserve">
          <source>Select and display the stack frame just &amp;ldquo;above&amp;rdquo; the selected frame, that is, the frame that called the selected frame. An argument says how many frames to go up.</source>
          <target state="translated">選択したフレームのすぐ上にあるスタックフレーム、つまり選択したフレームを呼び出したフレームを選択して表示します。引数は、いくつのフレームを上げるかを示します。</target>
        </trans-unit>
        <trans-unit id="f04958a6b748a73393b1c5f640955358c4f8954c" translate="yes" xml:space="preserve">
          <source>Select and display the stack frame just &amp;ldquo;below&amp;rdquo; the selected frame, that is, the frame that was called by the selected frame. An argument says how many frames to go down.</source>
          <target state="translated">選択したフレームのすぐ下にあるスタックフレーム、つまり、選択したフレームによって呼び出されたフレームを選択して表示します。引数は、いくつのフレームを下げるかを示します。</target>
        </trans-unit>
        <trans-unit id="8141835065ce052c6a2b2ffe055e3f74e2c9cb62" translate="yes" xml:space="preserve">
          <source>Select whether the debugger makes checkpoints or not.</source>
          <target state="translated">デバッガーがチェックポイントを作成するかどうかを選択します。</target>
        </trans-unit>
        <trans-unit id="4ee6fc3a6c80dc0fdd9a0fa5a8d6a3e707e73481" translate="yes" xml:space="preserve">
          <source>Select whether to follow the child or the parent in case of a call to fork.</source>
          <target state="translated">フォークを呼び出す場合に、子に従うか親に従うかを選択します。</target>
        </trans-unit>
        <trans-unit id="9951163a39424a7abbbc84b6339ca822c1c0c3ff" translate="yes" xml:space="preserve">
          <source>Select whether to stop after loading new code.</source>
          <target state="translated">新しいコードをロードした後に停止するかどうかを選択します。</target>
        </trans-unit>
        <trans-unit id="18235832d8dac1ddcfbe78e75d7c4f1ed339c2fa" translate="yes" xml:space="preserve">
          <source>Self type cannot be a closed object type, so that the class remains extensible.</source>
          <target state="translated">自己型は閉じたオブジェクト型にはできないので、クラスは拡張可能なままです。</target>
        </trans-unit>
        <trans-unit id="5113dee834dec087ca084bd3afde0c50a62cefa1" translate="yes" xml:space="preserve">
          <source>Semantic actions are arbitrary OCaml expressions, that are evaluated to produce the semantic attribute attached to the defined nonterminal. The semantic actions can access the semantic attributes of the symbols in the right-hand side of the rule with the &lt;code&gt;$&lt;/code&gt; notation: &lt;code&gt;$1&lt;/code&gt; is the attribute for the first (leftmost) symbol, &lt;code&gt;$2&lt;/code&gt; is the attribute for the second symbol, etc.</source>
          <target state="translated">セマンティックアクションは任意のOCaml式であり、定義された非終端記号に付加されたセマンティック属性を生成するために評価されます。セマンティックアクションは、ルールの右側にあるシンボルのセマンティック属性に &lt;code&gt;$&lt;/code&gt; 表記でアクセスできます。 &lt;code&gt;$1&lt;/code&gt; は最初の（左端の）シンボルの属性、 &lt;code&gt;$2&lt;/code&gt; は2番目のシンボルの属性などです。</target>
        </trans-unit>
        <trans-unit id="8a1392c344896296c101306a21e132080b369fb8" translate="yes" xml:space="preserve">
          <source>Semantic tag operations may be set on or off with &lt;a href=&quot;format#VALset_tags&quot;&gt;&lt;code&gt;Format.set_tags&lt;/code&gt;&lt;/a&gt;. Tag-marking operations may be set on or off with &lt;a href=&quot;format#VALset_mark_tags&quot;&gt;&lt;code&gt;Format.set_mark_tags&lt;/code&gt;&lt;/a&gt;. Tag-printing operations may be set on or off with &lt;a href=&quot;format#VALset_print_tags&quot;&gt;&lt;code&gt;Format.set_print_tags&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">セマンティックタグ操作は、&lt;a href=&quot;format#VALset_tags&quot;&gt; &lt;code&gt;Format.set_tags&lt;/code&gt; &lt;/a&gt;を使用してオンまたはオフに設定できます。タグマーキング操作は、&lt;a href=&quot;format#VALset_mark_tags&quot;&gt; &lt;code&gt;Format.set_mark_tags&lt;/code&gt; で&lt;/a&gt;オンまたはオフに設定できます。タグの印刷操作は、&lt;a href=&quot;format#VALset_print_tags&quot;&gt; &lt;code&gt;Format.set_print_tags&lt;/code&gt; で&lt;/a&gt;オンまたはオフに設定できます。</target>
        </trans-unit>
        <trans-unit id="e1190d7996932cb0ed68afaf24a43b49448d1e5f" translate="yes" xml:space="preserve">
          <source>Semantic tags</source>
          <target state="translated">意味タグ</target>
        </trans-unit>
        <trans-unit id="794f749100510e2d53794fd5fc728f8ca18cb7c3" translate="yes" xml:space="preserve">
          <source>Send a break condition on the given file descriptor.</source>
          <target state="translated">与えられたファイルディスクリプタに対してブレーク条件を送信します。</target>
        </trans-unit>
        <trans-unit id="63d09c8723edfdef0a4a50d0f35d4d918ef4e469" translate="yes" xml:space="preserve">
          <source>Send a break condition on the given file descriptor. The second argument is the duration of the break, in 0.1s units; 0 means standard duration (0.25s).</source>
          <target state="translated">与えられたファイル記述子にブレーク条件を送信します。2番目の引数は、0.1秒単位でのブレークの継続時間です。</target>
        </trans-unit>
        <trans-unit id="7c756d9c6312c8e89151799f61dfa59089e8683c" translate="yes" xml:space="preserve">
          <source>Send data over a connected socket.</source>
          <target state="translated">接続されたソケットを介してデータを送信します。</target>
        </trans-unit>
        <trans-unit id="9e1fd933b74ca801a025dc26097da110a2f1aad5" translate="yes" xml:space="preserve">
          <source>Send data over an unconnected socket.</source>
          <target state="translated">接続されていないソケットを介してデータを送信します。</target>
        </trans-unit>
        <trans-unit id="0d4346390f1e8fcea53c881ce751b35f83eab1e2" translate="yes" xml:space="preserve">
          <source>Send function closures</source>
          <target state="translated">ファンクションクロージャーの送信</target>
        </trans-unit>
        <trans-unit id="fa328f49b32e6dbe61c90ab9a659303e1d388d15" translate="yes" xml:space="preserve">
          <source>Seq</source>
          <target state="translated">Seq</target>
        </trans-unit>
        <trans-unit id="5c8f4e0e1a2281faf562976c2410f76c3d8fbc95" translate="yes" xml:space="preserve">
          <source>Sequence</source>
          <target state="translated">Sequence</target>
        </trans-unit>
        <trans-unit id="df4c406a13049baa1ab0e76a8f8df17494a4f5fc" translate="yes" xml:space="preserve">
          <source>Sequenced packets socket</source>
          <target state="translated">シーケンスパケットソケット</target>
        </trans-unit>
        <trans-unit id="6bbd522eaa45c773d474dd7812f92e43182cca64" translate="yes" xml:space="preserve">
          <source>Sequences of &amp;ldquo;operator characters&amp;rdquo;, such as &amp;lt;=&amp;gt; or !!, are read as a single token from the &lt;a href=&quot;#infix-symbol&quot;&gt;infix-symbol&lt;/a&gt; or &lt;a href=&quot;#prefix-symbol&quot;&gt;prefix-symbol&lt;/a&gt; class. These symbols are parsed as prefix and infix operators inside expressions, but otherwise behave like normal identifiers.</source>
          <target state="translated">&amp;lt;=&amp;gt;や!!などの「演算子文字」のシーケンスは、&lt;a href=&quot;#infix-symbol&quot;&gt;infix &lt;/a&gt;&lt;a href=&quot;#prefix-symbol&quot;&gt;-symbol&lt;/a&gt;クラスまたはprefix-symbolクラスから単一のトークンとして読み取られます。これらの記号は、式内で接頭辞および中置演算子として解析されますが、それ以外は通常の識別子のように動作します。</target>
        </trans-unit>
        <trans-unit id="b199937d4e88abb4b12f2d98e271f5e0b4e49d03" translate="yes" xml:space="preserve">
          <source>Serialization functions are attached to the custom blocks to which they apply. Obviously, deserialization functions cannot be attached this way, since the custom block does not exist yet when deserialization begins! Thus, the struct custom_operations that contain deserialization functions must be registered with the deserializer in advance, using the register_custom_operations function declared in &amp;lt;caml/custom.h&amp;gt;. Deserialization proceeds by reading the identifier off the input stream, allocating a custom block of the size specified in the input stream, searching the registered struct custom_operation blocks for one with the same identifier, and calling its deserialize function to fill the data part of the custom block.</source>
          <target state="translated">シリアル化関数は、それらが適用されるカスタムブロックにアタッチされます。明らかに、逆シリアル化の開始時にカスタムブロックがまだ存在しないため、逆シリアル化関数をこの方法でアタッチすることはできません。したがって、逆シリアル化関数を含むstruct custom_operationsは、&amp;lt;caml / custom.h&amp;gt;で宣言されているregister_custom_operations関数を使用して、事前にデシリアライザーに登録する必要があります。デシリアライズは、入力ストリームから識別子を読み取り、入力ストリームで指定されたサイズのカスタムブロックを割り当て、登録されたstruct custom_operationブロックで同じ識別子を持つものを検索し、そのデシリアライズ関数を呼び出してカスタムのデータ部分を埋めることによって続行されますブロック。</target>
        </trans-unit>
        <trans-unit id="448ab73ba1c21e671e218fb91f2644c834f0c16f" translate="yes" xml:space="preserve">
          <source>Set</source>
          <target state="translated">Set</target>
        </trans-unit>
        <trans-unit id="5f794630188a70bb0410585f48c66ba173e50bf0" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at code address frag:pc. The integer frag is the identifier of a code fragment, a set of modules that have been loaded at once, either initially or with the Dynlink module. The integer pc is the instruction counter within this code fragment. If frag is omitted, it defaults to 0, which is the code fragment of the program loaded initially.</source>
          <target state="translated">コードアドレス frag:pc にブレークポイントを設定します。整数の frag はコードフラグメントの識別子であり、初期状態でも Dynlink モジュールでも一度にロードされたモジュールの集合です。整数の pc は、このコードフラグメント内の命令カウンタです。frag を省略すると、デフォルトは 0 で、最初にロードされたプログラムのコードフラグメントになります。</target>
        </trans-unit>
        <trans-unit id="f67fd0c07eb651e26b3507b50bb26fc61d911351" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the beginning of function. This works only when the functional value of the identifier function has been computed and assigned to the identifier. Hence this command cannot be used at the very beginning of the program execution, when all identifiers are still undefined; use gototime to advance execution until the functional value is available.</source>
          <target state="translated">関数の開始時にブレークポイントを設定します。これは、識別子関数の機能値が計算され、識別子に代入された場合にのみ機能します。したがって、すべての識別子がまだ定義されていないプログラムの実行の最初にこのコマンドを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="dcc5e402aac9a8ffa33b3c043b2fbbddc6771b37" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the current position in the program execution. The current position must be on an event (i.e., neither at the beginning, nor at the end of the program).</source>
          <target state="translated">プログラム実行中の現在位置にブレークポイントを設定します。現在の位置はイベント上でなければなりません(つまり、プログラムの開始時でも終了時でもありません)。</target>
        </trans-unit>
        <trans-unit id="2e4aa9eedb69d42da9d6668e8997f4aad5c09196" translate="yes" xml:space="preserve">
          <source>Set a breakpoint in module module (or in the current module if module is not given), at the event closest to line line, column column.</source>
          <target state="translated">モジュールモジュール内(モジュールが指定されていない場合は現在のモジュール内)で、行、列、列に最も近いイベントにブレークポイントを設定します。</target>
        </trans-unit>
        <trans-unit id="4310fb9d3477018a1c35b651ff34434bb6935cce" translate="yes" xml:space="preserve">
          <source>Set a breakpoint in module module (or in the current module if module is not given), at the first event of line line.</source>
          <target state="translated">行目の最初のイベントで、モジュールモジュール(モジュールが指定されていない場合は現在のモジュール)にブレークポイントを設定します。</target>
        </trans-unit>
        <trans-unit id="e277ccf247de560e48662efb52ccdfd1595175a9" translate="yes" xml:space="preserve">
          <source>Set a breakpoint in module module at the event closest to character number character.</source>
          <target state="translated">文字数文字に最も近いイベントでモジュールモジュールのブレークポイントを設定します。</target>
        </trans-unit>
        <trans-unit id="41542810756d3748a80cb8b0e04eaa0f786f07fc" translate="yes" xml:space="preserve">
          <source>Set address to ``any'' address for use with &lt;a href=&quot;unix#VALbind&quot;&gt;&lt;code&gt;Unix.bind&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;unix#VALbind&quot;&gt; &lt;code&gt;Unix.bind&lt;/code&gt; &lt;/a&gt;で使用するアドレスを「任意の」アドレスに設定します</target>
        </trans-unit>
        <trans-unit id="d4768fb4642e9409d9ee6be09ebc15a97d8bef70" translate="yes" xml:space="preserve">
          <source>Set aggressiveness of inlining to n, where n is a positive integer. Specifying -inline 0 prevents all functions from being inlined, except those whose body is smaller than the call site. Thus, inlining causes no expansion in code size. The default aggressiveness, -inline 1, allows slightly larger functions to be inlined, resulting in a slight expansion in code size. Higher values for the -inline option cause larger and larger functions to become candidate for inlining, but can result in a serious increase in code size.</source>
          <target state="translated">インライン化を積極的に行うかどうかを n に設定します。inline 0を指定すると、本体がコールサイトよりも小さい関数を除いて、すべての関数がインライン化されなくなります。このため、インライン化してもコードサイズの拡大は発生しません。既定の積極性の -inline 1 を指定すると、少し大きめの関数をインライン化することができ、結果としてコード・サイズが若干拡大します。inlineオプションの値を高くすると、より大きな、より大きな関数がインライン化の候補になりますが、結果としてコードサイズが深刻に増大する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d700f315433099cdc0af2bac288d1f008cfe4955" translate="yes" xml:space="preserve">
          <source>Set all elements of a Bigarray to a given value.</source>
          <target state="translated">Bigarrayのすべての要素を所定の値に設定します。</target>
        </trans-unit>
        <trans-unit id="29c906b1b0c5c8936b5e14c8bc5cc977d6cb17aa" translate="yes" xml:space="preserve">
          <source>Set all elements of a Bigarray to a given value. &lt;code&gt;Genarray.fill&amp;nbsp;a&amp;nbsp;v&lt;/code&gt; stores the value &lt;code&gt;v&lt;/code&gt; in all elements of the Bigarray &lt;code&gt;a&lt;/code&gt;. Setting only some elements of &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;v&lt;/code&gt; can be achieved by applying &lt;code&gt;Genarray.fill&lt;/code&gt; to a sub-array or a slice of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">Bigarrayのすべての要素を指定された値に設定します。 &lt;code&gt;Genarray.fill&amp;nbsp;a&amp;nbsp;v&lt;/code&gt; 店に値 &lt;code&gt;v&lt;/code&gt; Bigarrayのすべての要素に。唯一のいくつかの要素の設定に &lt;code&gt;v&lt;/code&gt; 印加することによって達成することができる &lt;code&gt;Genarray.fill&lt;/code&gt; をサブアレイまたはスライスに。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d867b8f186c18471e57de3ac1801d69260d1c58e" translate="yes" xml:space="preserve">
          <source>Set difference: &lt;code&gt;diff&amp;nbsp;s1&amp;nbsp;s2&lt;/code&gt; contains the elements of &lt;code&gt;s1&lt;/code&gt; that are not in &lt;code&gt;s2&lt;/code&gt;.</source>
          <target state="translated">セットの違い： &lt;code&gt;diff&amp;nbsp;s1&amp;nbsp;s2&lt;/code&gt; の要素が含まれ &lt;code&gt;s1&lt;/code&gt; にはない &lt;code&gt;s2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39d01c4f837c63566e016e072eadb650b0fec4af" translate="yes" xml:space="preserve">
          <source>Set filename in the initial tracked position to &lt;code&gt;file&lt;/code&gt; in &lt;code&gt;lexbuf&lt;/code&gt;.</source>
          <target state="translated">最初の追跡位置の &lt;code&gt;file&lt;/code&gt; を &lt;code&gt;lexbuf&lt;/code&gt; のファイルに設定します。</target>
        </trans-unit>
        <trans-unit id="fa5595845e5f6e6fe2aeae20fa1474b57ec66014" translate="yes" xml:space="preserve">
          <source>Set intersection.</source>
          <target state="translated">交差点を設定します。</target>
        </trans-unit>
        <trans-unit id="a0b352005cac28824fa150d78f1cbfd0124f0743" translate="yes" xml:space="preserve">
          <source>Set or clear a boolean-valued option in the given socket.</source>
          <target state="translated">指定されたソケットにブール値のオプションを設定またはクリアします。</target>
        </trans-unit>
        <trans-unit id="559666fe411d68ab6d59bfe3e574adcc245f6007" translate="yes" xml:space="preserve">
          <source>Set the ``close-on-exec'' flag on the given descriptor.</source>
          <target state="translated">与えられたディスクリプタに「close-on-exec」フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="2c6db1debac2e11f674310c3d33dc2aa64f573ad" translate="yes" xml:space="preserve">
          <source>Set the ``close-on-exec'' flag on the given descriptor. A descriptor with the close-on-exec flag is automatically closed when the current process starts another program with one of the &lt;code&gt;exec&lt;/code&gt; functions.</source>
          <target state="translated">指定された記述子に「close-on-exec」フラグを設定します。close-on-execフラグの付いた記述子は、現在のプロセスが &lt;code&gt;exec&lt;/code&gt; 関数の1つを使用して別のプログラムを開始すると、自動的に閉じられます。</target>
        </trans-unit>
        <trans-unit id="3be7a3e35944da3c67cba65625d93fe03af274e4" translate="yes" xml:space="preserve">
          <source>Set the ``close-on-exec'' flag on the given descriptor. A descriptor with the close-on-exec flag is automatically closed when the current process starts another program with one of the &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;create_process&lt;/code&gt; and &lt;code&gt;open_process&lt;/code&gt; functions.</source>
          <target state="translated">指定された記述子に「close-on-exec」フラグを設定します。close-on-execフラグの付いた記述子は、現在のプロセスが &lt;code&gt;exec&lt;/code&gt; 、 &lt;code&gt;create_process&lt;/code&gt; 、および &lt;code&gt;open_process&lt;/code&gt; 関数のいずれかを使用して別のプログラムを開始すると自動的に閉じられます。</target>
        </trans-unit>
        <trans-unit id="7ffc9d4f7d54313e28aea022cdafcbd43fe7d38b" translate="yes" xml:space="preserve">
          <source>Set the ``non-blocking'' flag on the given descriptor.</source>
          <target state="translated">与えられたディスクリプタに ``non-blocking'' フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="6a81fdf519c1d5d613550e22c6593e795e28ca60" translate="yes" xml:space="preserve">
          <source>Set the ``non-blocking'' flag on the given descriptor. When the non-blocking flag is set, reading on a descriptor on which there is temporarily no data available raises the &lt;code&gt;EAGAIN&lt;/code&gt; or &lt;code&gt;EWOULDBLOCK&lt;/code&gt; error instead of blocking; writing on a descriptor on which there is temporarily no room for writing also raises &lt;code&gt;EAGAIN&lt;/code&gt; or &lt;code&gt;EWOULDBLOCK&lt;/code&gt;.</source>
          <target state="translated">指定された記述子に「非ブロッキング」フラグを設定します。非ブロッキングフラグが設定されている場合、一時的に使用可能なデータがない記述子を読み取ると、ブロッキングではなく &lt;code&gt;EAGAIN&lt;/code&gt; または &lt;code&gt;EWOULDBLOCK&lt;/code&gt; エラーが発生します。一時的に書き込む余地がない記述子に書き込むと、 &lt;code&gt;EAGAIN&lt;/code&gt; または &lt;code&gt;EWOULDBLOCK&lt;/code&gt; も発生します。</target>
        </trans-unit>
        <trans-unit id="0a189281e8ddbee43149f8636d4156e072b23d1e" translate="yes" xml:space="preserve">
          <source>Set the behavior of the system on receipt of a given signal.</source>
          <target state="translated">与えられた信号を受信したときのシステムの動作を設定します。</target>
        </trans-unit>
        <trans-unit id="7401aa97a51a58a6184a906cd8b63d767fe0cfb2" translate="yes" xml:space="preserve">
          <source>Set the behavior of the system on receipt of a given signal. The first argument is the signal number. Return the behavior previously associated with the signal. If the signal number is invalid (or not available on your system), an &lt;code&gt;Invalid_argument&lt;/code&gt; exception is raised.</source>
          <target state="translated">特定の信号を受信したときのシステムの動作を設定します。最初の引数は信号番号です。以前にシグナルに関連付けられていた動作を返します。シグナル番号が無効な場合（またはシステムで使用できない場合）、 &lt;code&gt;Invalid_argument&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="d28cff793cc4c826a5938c2cae37dba2b6187746" translate="yes" xml:space="preserve">
          <source>Set the close-on-exec flag on the descriptor returned by &lt;a href=&quot;unix#VALopenfile&quot;&gt;&lt;code&gt;Unix.openfile&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;unix#VALset_close_on_exec&quot;&gt;&lt;code&gt;Unix.set_close_on_exec&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopenfile&quot;&gt; &lt;code&gt;Unix.openfile&lt;/code&gt; &lt;/a&gt;によって返される記述子にclose-on-execフラグを設定します。詳細については、&lt;a href=&quot;unix#VALset_close_on_exec&quot;&gt; &lt;code&gt;Unix.set_close_on_exec&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="923fd2bd40692f311e28beeef94b004d48a2ef9a" translate="yes" xml:space="preserve">
          <source>Set the close-on-exec flag on the descriptor returned by &lt;a href=&quot;unixlabels#VALopenfile&quot;&gt;&lt;code&gt;UnixLabels.openfile&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;unixlabels#VALopenfile&quot;&gt; &lt;code&gt;UnixLabels.openfile&lt;/code&gt; &lt;/a&gt;によって返される記述子にclose-on-execフラグを設定します</target>
        </trans-unit>
        <trans-unit id="577e0abb1a0491dac220bc63e2e1bf990b7b538e" translate="yes" xml:space="preserve">
          <source>Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file).</source>
          <target state="translated">ファイルディスクリプタの現在位置を設定し、その結果のオフセット(ファイルの先頭から)を返します。</target>
        </trans-unit>
        <trans-unit id="2b69e933a718d8f6ef580a6e4c89ad941663652b" translate="yes" xml:space="preserve">
          <source>Set the debugger variable variable to the value value.</source>
          <target state="translated">デバッガ変数に値の値を設定します。</target>
        </trans-unit>
        <trans-unit id="c8dfbcd023f476a67f43c27904c2b7ceb6809b74" translate="yes" xml:space="preserve">
          <source>Set the initial tracked input position for &lt;code&gt;lexbuf&lt;/code&gt; to a custom value.</source>
          <target state="translated">&lt;code&gt;lexbuf&lt;/code&gt; の追跡された初期入力位置をカスタム値に設定します。</target>
        </trans-unit>
        <trans-unit id="cd6edebbdfc394070896b55f61daf11e0964398b" translate="yes" xml:space="preserve">
          <source>Set the initial tracked input position for &lt;code&gt;lexbuf&lt;/code&gt; to a custom value. Ignores &lt;code&gt;pos_fname&lt;/code&gt;. See &lt;a href=&quot;lexing#VALset_filename&quot;&gt;&lt;code&gt;Lexing.set_filename&lt;/code&gt;&lt;/a&gt; for changing this field.</source>
          <target state="translated">&lt;code&gt;lexbuf&lt;/code&gt; の追跡された初期入力位置をカスタム値に設定します。 &lt;code&gt;pos_fname&lt;/code&gt; を無視します。このフィールドの変更については、&lt;a href=&quot;lexing#VALset_filename&quot;&gt; &lt;code&gt;Lexing.set_filename&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="66e946e49b39fb11e9ad3eafab1ed3bf7031c2fc" translate="yes" xml:space="preserve">
          <source>Set the last access time (second arg) and last modification time (third arg) for a file.</source>
          <target state="translated">ファイルの最終アクセス時間(第2引数)と最終修正時間(第3引数)を設定します。</target>
        </trans-unit>
        <trans-unit id="0801471051311b2e948d922eed12bfac0800e655" translate="yes" xml:space="preserve">
          <source>Set the last access time (second arg) and last modification time (third arg) for a file. Times are expressed in seconds from 00:00:00 GMT, Jan. 1, 1970. A time of &lt;code&gt;0.0&lt;/code&gt; is interpreted as the current time.</source>
          <target state="translated">ファイルの最終アクセス時間（2番目の引数）と最終変更時間（3番目の引数）を設定します。時間は00:00:00 GMT、1月1日からの秒で表される、1970年のA時間 &lt;code&gt;0.0&lt;/code&gt; は、現在の時刻と解釈されます。</target>
        </trans-unit>
        <trans-unit id="4a91c50ce8269242fb58be1767c73a683dd0d047" translate="yes" xml:space="preserve">
          <source>Set the last access time (second arg) and last modification time (third arg) for a file. Times are expressed in seconds from 00:00:00 GMT, Jan. 1, 1970. If both times are &lt;code&gt;0.0&lt;/code&gt;, the access and last modification times are both set to the current time.</source>
          <target state="translated">ファイルの最終アクセス時間（2番目の引数）と最終変更時間（3番目の引数）を設定します。時間は、1970年1月1日グリニッジ標準時00:00:00からの秒数で表されます。両方の時間が &lt;code&gt;0.0&lt;/code&gt; の場合、アクセス時間と最終変更時間は両方とも現在の時間に設定されます。</target>
        </trans-unit>
        <trans-unit id="185eb91284ecd22b41ba674e1219388c6b167ef9" translate="yes" xml:space="preserve">
          <source>Set the list of compilation units that may be referenced from units that are dynamically loaded in the future to be exactly the given value.</source>
          <target state="translated">将来的に動的にロードされるユニットから参照される可能性のあるコンパイルユニットのリストを、指定された値と正確に一致するように設定します。</target>
        </trans-unit>
        <trans-unit id="9c4b8d871e2b2886d073bd654f1c86fb95bdb9d2" translate="yes" xml:space="preserve">
          <source>Set the maximum number of checkpoints to count. More checkpoints facilitate going far back in time, but use more memory and create more Unix processes.</source>
          <target state="translated">チェックポイントの最大カウント数を設定します。チェックポイントの数を増やすと、時間を遡るのが容易になりますが、より多くのメモリを使用し、より多くの Unix プロセスを作成することになります。</target>
        </trans-unit>
        <trans-unit id="d2f77a1c0b85caa6a763950d3c33aa375b7e0fdc" translate="yes" xml:space="preserve">
          <source>Set the maximum number of simultaneously live checkpoints to count.</source>
          <target state="translated">同時ライブチェックポイントの最大カウント数を設定します。</target>
        </trans-unit>
        <trans-unit id="09edd36e6c8e0e32ae3c9fce19236b50da00ff16" translate="yes" xml:space="preserve">
          <source>Set the name of the generated C library. ocamlmklib will generate liboutputc.so (if shared libraries are supported) and liboutputc.a. If not specified, defaults to the output name given with -o.</source>
          <target state="translated">ocamlmklib は liboutputc.so (共有ライブラリがサポートされている場合)と liboutputc.a を生成します。</target>
        </trans-unit>
        <trans-unit id="1d7c54f201f52beadb4a8e3dc1e5a3b45dafc3f9" translate="yes" xml:space="preserve">
          <source>Set the name of the generated OCaml library. ocamlmklib will generate output.cma and/or output.cmxa. If not specified, defaults to a.</source>
          <target state="translated">生成されるOCamlライブラリの名前を設定します。 ocamlmklibはoutput.cmaとoutput.cmxaを生成します。指定されていない場合、デフォルトはaです。</target>
        </trans-unit>
        <trans-unit id="cfd5bc4c54a4ee7b1ef577814ca237667f216b5c" translate="yes" xml:space="preserve">
          <source>Set the number of events between two checkpoints for long displacements.</source>
          <target state="translated">長く変位した場合の2つのチェックポイント間のイベント数を設定します。</target>
        </trans-unit>
        <trans-unit id="2e3c679e454f616c096ddd2e445f6a7e9b0614f8" translate="yes" xml:space="preserve">
          <source>Set the number of events between two checkpoints for small displacements.</source>
          <target state="translated">2つのチェックポイント間のイベント数を、小さな変位の場合に設定します。</target>
        </trans-unit>
        <trans-unit id="4312ad660e95018ad6202f57a1580edad689397c" translate="yes" xml:space="preserve">
          <source>Set the number of rows of context used for optimization during pattern matching compilation. The default value is 32. Lower values cause faster compilation, but less optimized code. This advanced option is meant for use in the event that a pattern-match-heavy program leads to significant increases in compilation time.</source>
          <target state="translated">パターン マッチングのコンパイル時に最適化に使用するコンテキストの行数を設定します。デフォルト値は32です。値を低くすると、コンパイルは速くなりますが、最適化されたコードは少なくなります。この高度なオプションは、パターンマッチが重いプログラムでコンパイル時間が大幅に増加する場合に使用することを意図しています。</target>
        </trans-unit>
        <trans-unit id="5dd4f19f7ee20639e18918f2bb65174f4e6a5c29" translate="yes" xml:space="preserve">
          <source>Set the process's file mode creation mask, and return the previous mask.</source>
          <target state="translated">プロセスのファイルモード作成マスクを設定し、前のマスクを戻します。</target>
        </trans-unit>
        <trans-unit id="04957e74200149a3abc2c9909388498556010333" translate="yes" xml:space="preserve">
          <source>Set the process's file mode creation mask, and return the previous mask. On Windows: not implemented.</source>
          <target state="translated">プロセスのファイルモード作成マスクを設定し、前のマスクを戻します。Windowsでは:実装されていません。</target>
        </trans-unit>
        <trans-unit id="3890f58a5c4bd5d20e9bc02f64aca7a889291317" translate="yes" xml:space="preserve">
          <source>Set the program name to file.</source>
          <target state="translated">プログラム名をファイルに設定します。</target>
        </trans-unit>
        <trans-unit id="1cdb3db725a2dc949ffdc1b6bda172d217346214" translate="yes" xml:space="preserve">
          <source>Set the real group id and effective group id for the process.</source>
          <target state="translated">プロセスの実グループIDと有効グループIDを設定します。</target>
        </trans-unit>
        <trans-unit id="625d0b4d8c96326f0e509da591b26c3ed252acb9" translate="yes" xml:space="preserve">
          <source>Set the real group id and effective group id for the process. On Windows: not implemented.</source>
          <target state="translated">プロセスの実グループIDと有効グループIDを設定します。Windowsの場合:実装されていません。</target>
        </trans-unit>
        <trans-unit id="29eb017dd2fc17259e2110f32f4e6e52fa4c3a21" translate="yes" xml:space="preserve">
          <source>Set the real user id and effective user id for the process.</source>
          <target state="translated">プロセスの実ユーザIDと有効ユーザIDを設定します。</target>
        </trans-unit>
        <trans-unit id="3f429b536c18c7b528cbf990829dea199587106c" translate="yes" xml:space="preserve">
          <source>Set the real user id and effective user id for the process. On Windows: not implemented.</source>
          <target state="translated">プロセスの実ユーザIDと有効ユーザIDを設定します。Windowsの場合:実装されていません。</target>
        </trans-unit>
        <trans-unit id="68d67a2d91d8163aa7eb4ac3fe77fae83d83888a" translate="yes" xml:space="preserve">
          <source>Set the reference to false</source>
          <target state="translated">参照を false に設定します。</target>
        </trans-unit>
        <trans-unit id="a999238e1f043ca2e3b51b9e405f032f3de38d77" translate="yes" xml:space="preserve">
          <source>Set the reference to the float argument</source>
          <target state="translated">float 引数への参照を設定します。</target>
        </trans-unit>
        <trans-unit id="cba5bb4a58f5debb26e8458f918a62172e0560b8" translate="yes" xml:space="preserve">
          <source>Set the reference to the int argument</source>
          <target state="translated">int 引数への参照を設定します。</target>
        </trans-unit>
        <trans-unit id="2a2fa91e83dd3e8725c6474fe2f0be917da3ce21" translate="yes" xml:space="preserve">
          <source>Set the reference to the string argument</source>
          <target state="translated">文字列引数への参照を設定します。</target>
        </trans-unit>
        <trans-unit id="f9462a23157a2b8632f223d537a23034f8765868" translate="yes" xml:space="preserve">
          <source>Set the reference to true</source>
          <target state="translated">参照をtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="17571cb3b69669ab030fc74c006854d56dbb61ea" translate="yes" xml:space="preserve">
          <source>Set the runtime system options and garbage collection parameters. (If OCAMLRUNPARAM is not set, CAMLRUNPARAM will be used instead.) This variable must be a sequence of parameter specifications separated by commas. A parameter specification is an option letter followed by an = sign, a decimal number (or an hexadecimal number prefixed by 0x), and an optional multiplier. The options are documented below; the last six correspond to the fields of the control record documented in &lt;a href=&quot;libref/gc&quot;&gt;Module Gc&lt;/a&gt;.</source>
          <target state="translated">ランタイムシステムオプションとガベージコレクションパラメータを設定します。（OCAMLRUNPARAMが設定されていない場合は、代わりにCAMLRUNPARAMが使用されます。）この変数は、コンマで区切られたパラメーター指定のシーケンスである必要があります。パラメータ指定は、オプション文字の後に=記号、10進数（または0xで始まる16進数）、およびオプションの乗数が続きます。オプションは以下に記載されています。最後の6つは、&lt;a href=&quot;libref/gc&quot;&gt;モジュールGcに&lt;/a&gt;記載されている制御レコードのフィールドに対応しています。</target>
        </trans-unit>
        <trans-unit id="2e70a362a30dc32ec5295b3216ee79d934141efa" translate="yes" xml:space="preserve">
          <source>Set the section number used for generated man filenames. Default is &amp;rsquo;3&amp;rsquo;.</source>
          <target state="translated">生成されたmanファイル名に使用されるセクション番号を設定します。デフォルトは「3」です。</target>
        </trans-unit>
        <trans-unit id="60c0bbe1c7f126d62252bc8aeeea0afb769c2016" translate="yes" xml:space="preserve">
          <source>Set the size of the execution history.</source>
          <target state="translated">実行履歴のサイズを設定します。</target>
        </trans-unit>
        <trans-unit id="3a7116e6d97ed745df00bb2d437dbdaa0874a881" translate="yes" xml:space="preserve">
          <source>Set the state of the generator used by the basic functions.</source>
          <target state="translated">基本機能で使用するジェネレータの状態を設定します。</target>
        </trans-unit>
        <trans-unit id="f9735d601f636e8000a577f96f90a54dec7a9320" translate="yes" xml:space="preserve">
          <source>Set the status of the terminal referred to by the given file descriptor.</source>
          <target state="translated">与えられたファイルディスクリプタが参照する端末の状態を設定します。</target>
        </trans-unit>
        <trans-unit id="0ef0ceaca247026faede9fe880785cde60d386d3" translate="yes" xml:space="preserve">
          <source>Set the status of the terminal referred to by the given file descriptor. The second argument indicates when the status change takes place: immediately (&lt;code&gt;TCSANOW&lt;/code&gt;), when all pending output has been transmitted (&lt;code&gt;TCSADRAIN&lt;/code&gt;), or after flushing all input that has been received but not read (&lt;code&gt;TCSAFLUSH&lt;/code&gt;). &lt;code&gt;TCSADRAIN&lt;/code&gt; is recommended when changing the output parameters; &lt;code&gt;TCSAFLUSH&lt;/code&gt;, when changing the input parameters.</source>
          <target state="translated">指定されたファイル記述子によって参照される端末のステータスを設定します。2番目の引数は、ステータス変更がいつ発生するかを示します。すぐに（ &lt;code&gt;TCSANOW&lt;/code&gt; ）、保留中のすべての出力が送信されたとき（ &lt;code&gt;TCSADRAIN&lt;/code&gt; ）、または受信したが読み取られなかったすべての入力をフラッシュした後（ &lt;code&gt;TCSAFLUSH&lt;/code&gt; ）。出力パラメーターを変更する場合は、 &lt;code&gt;TCSADRAIN&lt;/code&gt; をお勧めします。 &lt;code&gt;TCSAFLUSH&lt;/code&gt; 、入力パラメーターを変更する場合。</target>
        </trans-unit>
        <trans-unit id="4f19583658e227b08c0063b0ee48f99dc946e688" translate="yes" xml:space="preserve">
          <source>Set the suffix used for generated man filenames. Default is &amp;rsquo;3o&amp;rsquo;, as in List.3o.</source>
          <target state="translated">生成されたmanファイル名に使用されるサフィックスを設定します。List.3oのように、デフォルトは「3o」です。</target>
        </trans-unit>
        <trans-unit id="ce3de3c8737b8c685ff7d7d5183a0ae5a23b5a07" translate="yes" xml:space="preserve">
          <source>Set the text of the ellipsis printed when too many pretty-printing boxes are open (a single dot, &lt;code&gt;.&lt;/code&gt;, by default).</source>
          <target state="translated">開いているプリティプリントボックスが多すぎる場合に印刷される省略記号のテキストを設定します（デフォルトでは、単一のドット、 &lt;code&gt;.&lt;/code&gt; 、）。</target>
        </trans-unit>
        <trans-unit id="31f21a3553861b0bc4c154c47440c25cf06db10d" translate="yes" xml:space="preserve">
          <source>Set the working directory for ocamldebug to directory.</source>
          <target state="translated">ocamldebugの作業ディレクトリをディレクトリに設定します。</target>
        </trans-unit>
        <trans-unit id="8640d7d98c95569c8a27941f1cceb667e63daf27" translate="yes" xml:space="preserve">
          <source>Set union.</source>
          <target state="translated">ユニオンを設定します。</target>
        </trans-unit>
        <trans-unit id="015294ab9557093ab8ef3f4758adf636f86f2699" translate="yes" xml:space="preserve">
          <source>Set up a socket for receiving connection requests.</source>
          <target state="translated">接続要求を受信するソケットを設定します。</target>
        </trans-unit>
        <trans-unit id="126c2a22413412e2612fe5d80353e96755c171d4" translate="yes" xml:space="preserve">
          <source>Set up a socket for receiving connection requests. The integer argument is the maximal number of pending requests.</source>
          <target state="translated">接続要求を受信するソケットを設定します。整数の引数には、最大の保留数を指定します。</target>
        </trans-unit>
        <trans-unit id="d0e061c96cfcc2740e44edf97c61308d74477a19" translate="yes" xml:space="preserve">
          <source>Sets a tabulation marker at current insertion point.</source>
          <target state="translated">現在の挿入ポイントに集計マーカーを設定します。</target>
        </trans-unit>
        <trans-unit id="5ba802095863c730620b6e522ab417b749d4c61a" translate="yes" xml:space="preserve">
          <source>Sets over ordered types.</source>
          <target state="translated">オーダーされたタイプを設定します。</target>
        </trans-unit>
        <trans-unit id="fb449f71834cd30ec14d00c9d50ba85c232186d3" translate="yes" xml:space="preserve">
          <source>Setting</source>
          <target state="translated">Setting</target>
        </trans-unit>
        <trans-unit id="b8f0cdd8935e519ffb7f3404fbd0cd7cd5f6ab79" translate="yes" xml:space="preserve">
          <source>Setting the OCAML_SPACETIME_INTERVAL environment variable to an integer representing a number of milliseconds before running a program built with Spacetime will cause memory profiling to be in operation when the program is started. The contents of the OCaml heap will be sampled each time the number of milliseconds that the program has spent executing since the last sample exceeds the given number. (Note that the time base is combined user plus system time&amp;mdash;&lt;em&gt;not&lt;/em&gt; wall clock time. This peculiarity may be changed in future.)</source>
          <target state="translated">Spacetimeでビルドされたプログラムを実行する前に、OCAML_SPACETIME_INTERVAL環境変数をミリ秒数を表す整数に設定すると、プログラムの開始時にメモリプロファイリングが動作します。 OCamlヒープの内容は、最後のサンプルが指定された数を超えてからプログラムが実行に費やしたミリ秒数ごとにサンプリングされます。 （タイムベースは、実時間では&lt;em&gt;なく、&lt;/em&gt;ユーザーとシステムの時間を組み合わせたものであることに注意してください。この特性は、将来変更される可能性があります。）</target>
        </trans-unit>
        <trans-unit id="3d67b0d686985163b75cc6f60585023872675c7a" translate="yes" xml:space="preserve">
          <source>Several variables enables to fine-tune the debugger. Reasonable defaults are provided, and you should normally not have to change them.</source>
          <target state="translated">いくつかの変数でデバッガを微調整することができます。適度なデフォルト値が用意されており、通常は変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="d7da9bae4232e30381e9ccc7d82a3d3dff0749c5" translate="yes" xml:space="preserve">
          <source>Shared ownership: the data has several owners, that may only access it, not mutate it.</source>
          <target state="translated">共有所有権:データには複数の所有者がいて、その所有者はそれにアクセスするだけで、それを変異させることはできません。</target>
        </trans-unit>
        <trans-unit id="8fc300b3858ae9ce2ba85a4fe2dd0789623bd15b" translate="yes" xml:space="preserve">
          <source>Should the inliner prove recalcitrant and refuse to inline a particular function, or if the observed inlining decisions are not to the programmer&amp;rsquo;s satisfaction for some other reason, inlining behaviour can be dictated by the programmer directly in the source code. One example where this might be appropriate is when the programmer, but not the compiler, knows that a particular function call is on a cold code path. It might be desirable to prevent inlining of the function so that the code size along the hot path is kept smaller, so as to increase locality.</source>
          <target state="translated">インライン化が扱いにくく、特定の関数のインライン化を拒否した場合、または観察されたインライン化の決定が他の理由でプログラマーの満足に合わない場合、インライン化の動作はプログラマーがソースコードで直接指示できます。これが適切である可能性がある1つの例は、コンパイラではなくプログラマが、特定の関数呼び出しがコールドコードパス上にあることを知っている場合です。局所性を高めるために、ホットパスに沿ったコードサイズが小さく保たれるように、関数のインライン化を防ぐことが望ましい場合があります。</target>
        </trans-unit>
        <trans-unit id="51d5c1d2533d4a222462ad94a689b7cce34101e0" translate="yes" xml:space="preserve">
          <source>Show absolute filenames in error messages.</source>
          <target state="translated">エラーメッセージに絶対ファイル名を表示する</target>
        </trans-unit>
        <trans-unit id="fb7362c779f885975ff09e3a25bc5897262fab3f" translate="yes" xml:space="preserve">
          <source>Show the description of all available warning numbers.</source>
          <target state="translated">利用可能なすべての警告番号の説明を表示します。</target>
        </trans-unit>
        <trans-unit id="f4ca6694d54dd6489a83d8b39f9d9cd98963cbec" translate="yes" xml:space="preserve">
          <source>Shutdown a socket connection.</source>
          <target state="translated">ソケット接続をシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="9c8a4815f67ac9a7d69bff16d4ed5655a6b6b3be" translate="yes" xml:space="preserve">
          <source>Shutdown a socket connection. &lt;code&gt;SHUTDOWN_SEND&lt;/code&gt; as second argument causes reads on the other end of the connection to return an end-of-file condition. &lt;code&gt;SHUTDOWN_RECEIVE&lt;/code&gt; causes writes on the other end of the connection to return a closed pipe condition (&lt;code&gt;SIGPIPE&lt;/code&gt; signal).</source>
          <target state="translated">ソケット接続をシャットダウンします。2番目の引数としての &lt;code&gt;SHUTDOWN_SEND&lt;/code&gt; により、接続のもう一方の端での読み取りにより、ファイルの終わりの状態が返されます。 &lt;code&gt;SHUTDOWN_RECEIVE&lt;/code&gt; を使用すると、接続のもう一方の端で書き込みが閉じたパイプ状態（ &lt;code&gt;SIGPIPE&lt;/code&gt; 信号）を返します。</target>
        </trans-unit>
        <trans-unit id="43d6f2a50d9070ba8af0bf2249d46f60014587a0" translate="yes" xml:space="preserve">
          <source>Signal an error during deserialization; input_value or Marshal.from_... raise a Failure exception after cleaning up their internal data structures</source>
          <target state="translated">デシリアライズ中にエラーを通知する。 input_value や Marshal.from_...は内部データ構造をクリーンアップした後に失敗例外を発生させる。</target>
        </trans-unit>
        <trans-unit id="dda1c34f3e7ae5e716370d772211709548003ec4" translate="yes" xml:space="preserve">
          <source>Signal handling</source>
          <target state="translated">信号処理</target>
        </trans-unit>
        <trans-unit id="9e415b59d5f90a505f7744e1ba6f59f0f4039873" translate="yes" xml:space="preserve">
          <source>Signal handling follows the POSIX thread model: signals generated by a thread are delivered to that thread; signals generated externally are delivered to one of the threads that does not block it. Each thread possesses a set of blocked signals, which can be modified using &lt;a href=&quot;thread#VALsigmask&quot;&gt;&lt;code&gt;Thread.sigmask&lt;/code&gt;&lt;/a&gt;. This set is inherited at thread creation time. Per-thread signal masks are supported only by the system thread library under Unix, but not under Win32, nor by the VM thread library.</source>
          <target state="translated">シグナル処理はPOSIXスレッドモデルに従います。スレッドによって生成されたシグナルはそのスレッドに配信されます。外部で生成された信号は、それをブロックしないスレッドの1つに配信されます。各スレッドはブロックされたシグナルのセットを持っており、&lt;a href=&quot;thread#VALsigmask&quot;&gt; &lt;code&gt;Thread.sigmask&lt;/code&gt; &lt;/a&gt;を使用して変更できます。このセットは、スレッドの作成時に継承されます。スレッドごとのシグナルマスクは、Unixではシステムスレッドライブラリでのみサポートされていますが、Win32ではサポートされていません。VMスレッドライブラリでもサポートされていません。</target>
        </trans-unit>
        <trans-unit id="c9311ddf008a50fe257c90a1196997c277af9ab4" translate="yes" xml:space="preserve">
          <source>Signal interrupt on break condition.</source>
          <target state="translated">ブレーク状態での信号割り込み</target>
        </trans-unit>
        <trans-unit id="78f0164440d5b6c728963e4c5496d15ee0199c98" translate="yes" xml:space="preserve">
          <source>Signal numbers for the standard POSIX signals.</source>
          <target state="translated">標準 POSIX 信号の信号番号です。</target>
        </trans-unit>
        <trans-unit id="2346a18ea3002ff04eca3a130c7f40e65c56f0c9" translate="yes" xml:space="preserve">
          <source>Signals</source>
          <target state="translated">Signals</target>
        </trans-unit>
        <trans-unit id="11de8e6e96acdf7704df5910480a4dcc8fe36151" translate="yes" xml:space="preserve">
          <source>Signals are detected only when the program performs an allocation in the heap. That is, if a signal is delivered while in a piece of code that does not allocate, its handler will not be called until the next heap allocation.</source>
          <target state="translated">シグナルが検出されるのは、プログラムがヒープ内でアロケーションを実行したときだけです。つまり、割り当てを行わないコードの中でシグナルが配信された場合、そのハンドラは次のヒープ割り当てが行われるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="4d7b79c51a7108560360ba735396db85158b3113" translate="yes" xml:space="preserve">
          <source>Signatures are interfaces for structures. A signature specifies which components of a structure are accessible from the outside, and with which type. It can be used to hide some components of a structure (e.g. local function definitions) or export some components with a restricted type. For instance, the signature below specifies the three priority queue operations empty, insert and extract, but not the auxiliary function remove_top. Similarly, it makes the queue type abstract (by not providing its actual representation as a concrete type).</source>
          <target state="translated">シグネチャは構造体のインターフェースです。シグネチャは、構造体のどのコンポーネントが外部からアクセス可能で、どの型であるかを指定します。これは、構造体のいくつかのコンポーネント(例えば、ローカル関数の定義)を非表示にしたり、制限された型でいくつかのコンポーネントをエクスポートしたりするために使うことができます。例えば、以下のシグネチャでは、3つの優先度の高いキュー操作である empty、insert、extract を指定していますが、補助関数 remove_top は指定していません。同様に、このシグネチャはキューの型を抽象化しています(具体的な型としての実際の表現を提供しないことで)。</target>
        </trans-unit>
        <trans-unit id="0799b1c5b5c705ede3db466efc79912f2251c444" translate="yes" xml:space="preserve">
          <source>Signatures are type specifications for structures. Signatures sig &amp;hellip; end are collections of type specifications for value names, type names, exceptions, module names and module type names. A structure will match a signature if the structure provides definitions (implementations) for all the names specified in the signature (and possibly more), and these definitions meet the type requirements given in the signature.</source>
          <target state="translated">シグニチャは、構造体のタイプ仕様です。シグニチャsig&amp;hellip;endは、値名、型名、例外、モジュール名、およびモジュール型名の型仕様のコレクションです。構造体が署名で指定されたすべての名前（および場合によってはそれ以上）の定義（実装）を提供し、これらの定義が署名で指定されたタイプ要件を満たしている場合、構造体は署名と一致します。</target>
        </trans-unit>
        <trans-unit id="c0fcf14805d5bb21d1394f6f62f3947836ae1ca6" translate="yes" xml:space="preserve">
          <source>Similar to #use but also wrap the code into a top-level module of the same name as capitalized file name without extensions, following semantics of the compiler.</source>
          <target state="translated">使用方法は #use と似ていますが、拡張子のない大文字のファイル名と同じ名前のトップレベルモジュールにコードをラップし、コンパイラのセマンティクスに従っています。</target>
        </trans-unit>
        <trans-unit id="c76cbdc21e4b3567672c60ec1215127342f83044" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;str#VALstring_match&quot;&gt;&lt;code&gt;Str.string_match&lt;/code&gt;&lt;/a&gt;, but also returns true if the argument string is a prefix of a string that matches.</source>
          <target state="translated">&lt;a href=&quot;str#VALstring_match&quot;&gt; &lt;code&gt;Str.string_match&lt;/code&gt; &lt;/a&gt;に似ていますが、引数stringが一致する文字列のプレフィックスである場合にもtrueを返します。</target>
        </trans-unit>
        <trans-unit id="06853b76b05e43df457ddfb2bcae3f857c0d6a4e" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;str#VALstring_match&quot;&gt;&lt;code&gt;Str.string_match&lt;/code&gt;&lt;/a&gt;, but also returns true if the argument string is a prefix of a string that matches. This includes the case of a true complete match.</source>
          <target state="translated">&lt;a href=&quot;str#VALstring_match&quot;&gt; &lt;code&gt;Str.string_match&lt;/code&gt; &lt;/a&gt;に似ていますが、引数stringが一致する文字列のプレフィックスである場合にもtrueを返します。これには、真の完全一致の場合も含まれます。</target>
        </trans-unit>
        <trans-unit id="45f29146c0b592c6ffbd18d22abb6283b786360f" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unix#VALopen_process&quot;&gt;&lt;code&gt;Unix.open_process&lt;/code&gt;&lt;/a&gt;, but the second argument specifies the environment passed to the command.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process&quot;&gt; &lt;code&gt;Unix.open_process&lt;/code&gt; &lt;/a&gt;に似ていますが、2番目の引数はコマンドに渡される環境を指定します。</target>
        </trans-unit>
        <trans-unit id="5e0e701577791f5cf187fc0edb8e1fe8be2ec0ba" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unix#VALopen_process&quot;&gt;&lt;code&gt;Unix.open_process&lt;/code&gt;&lt;/a&gt;, but the second argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command. If the command does not need to be run through the shell, &lt;a href=&quot;unix#VALopen_process_args_full&quot;&gt;&lt;code&gt;Unix.open_process_args_full&lt;/code&gt;&lt;/a&gt; can be used instead of &lt;a href=&quot;unix#VALopen_process_full&quot;&gt;&lt;code&gt;Unix.open_process_full&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process&quot;&gt; &lt;code&gt;Unix.open_process&lt;/code&gt; &lt;/a&gt;に似ていますが、2番目の引数はコマンドに渡される環境を指定します。その結果、コマンドの標準出力、標準入力、および標準エラーにそれぞれ接続された3つのチャネルが生成されます。コマンドをシェルで実行する必要がない場合は、&lt;a href=&quot;unix#VALopen_process_args_full&quot;&gt; &lt;code&gt;Unix.open_process_args_full&lt;/code&gt; &lt;/a&gt;代わりに&lt;a href=&quot;unix#VALopen_process_full&quot;&gt; &lt;code&gt;Unix.open_process_full&lt;/code&gt; &lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="8c0b98907bce96d78dfe42a3e18fe2e7ca3ebcb5" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unix#VALopen_process_args&quot;&gt;&lt;code&gt;Unix.open_process_args&lt;/code&gt;&lt;/a&gt;, but the third argument specifies the environment passed to the command.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_args&quot;&gt; &lt;code&gt;Unix.open_process_args&lt;/code&gt; &lt;/a&gt;に似ていますが、3番目の引数はコマンドに渡される環境を指定します。</target>
        </trans-unit>
        <trans-unit id="677334462e1ae82342d0dcb52850960bd974932a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unix#VALopen_process_args&quot;&gt;&lt;code&gt;Unix.open_process_args&lt;/code&gt;&lt;/a&gt;, but the third argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command.</source>
          <target state="translated">&lt;a href=&quot;unix#VALopen_process_args&quot;&gt; &lt;code&gt;Unix.open_process_args&lt;/code&gt; &lt;/a&gt;に似ていますが、3番目の引数はコマンドに渡される環境を指定します。その結果、コマンドの標準出力、標準入力、および標準エラーにそれぞれ接続された3つのチャネルが生成されます。</target>
        </trans-unit>
        <trans-unit id="a1514fb8d353a5c12e6c485587d3a8cc11982c9e" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unixlabels#VALopen_process&quot;&gt;&lt;code&gt;UnixLabels.open_process&lt;/code&gt;&lt;/a&gt;, but the second argument specifies the environment passed to the command.</source>
          <target state="translated">&lt;a href=&quot;unixlabels#VALopen_process&quot;&gt; &lt;code&gt;UnixLabels.open_process&lt;/code&gt; &lt;/a&gt;に似ていますが、2番目の引数はコマンドに渡される環境を指定します。</target>
        </trans-unit>
        <trans-unit id="41eff9ce6b4d4a58a474810a3cf22b40cb6b7bde" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unixlabels#VALopen_process&quot;&gt;&lt;code&gt;UnixLabels.open_process&lt;/code&gt;&lt;/a&gt;, but the second argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command.</source>
          <target state="translated">&lt;a href=&quot;unixlabels#VALopen_process&quot;&gt; &lt;code&gt;UnixLabels.open_process&lt;/code&gt; &lt;/a&gt;に似ていますが、2番目の引数はコマンドに渡される環境を指定します。その結果、コマンドの標準出力、標準入力、および標準エラーにそれぞれ接続された3つのチャネルが生成されます。</target>
        </trans-unit>
        <trans-unit id="d313b8e52b393d5cf6147ba4249f7eca53294df8" translate="yes" xml:space="preserve">
          <source>Similarly to abstract types, the variance of type parameters is not inferred, and must be given explicitly.</source>
          <target state="translated">抽象型と同様に、型パラメータの分散は推論されず、明示的に与えなければなりません。</target>
        </trans-unit>
        <trans-unit id="e9ce25462976ce5eb1ef837e2ed0739d90ee5d4e" translate="yes" xml:space="preserve">
          <source>Similarly, if we have a value of type x list, we can convert it to a value of type xy list, since we could convert each element one by one:</source>
          <target state="translated">同様に、x型リストの値があれば、要素を1つずつ変換すればいいので、xy型リストの値に変換することができます。</target>
        </trans-unit>
        <trans-unit id="d313ab9b0494c745db6b22c28b2cff11a10b496d" translate="yes" xml:space="preserve">
          <source>Similarly, it is possible to pass untagged OCaml integers between OCaml and C. This is done by annotating the arguments and/or result with [@untagged]:</source>
          <target state="translated">同様に、タグ付けされていない OCaml の整数を OCaml と C の間で渡すことも可能です。これは、引数や結果に [@untagged]というアノテーションを付けることで行われます。</target>
        </trans-unit>
        <trans-unit id="f92741dcb5f21be8a2e70d1205e848fdf0320b01" translate="yes" xml:space="preserve">
          <source>Similarly, it may be necessary to use more than one explicitly polymorphic type variables, like for computing the nested list of list lengths of the nested list:</source>
          <target state="translated">同様に、ネストされたリストのリスト長の計算のように、明示的に複数の多相型変数を使用する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="6f2c5d03b5b9c8dd6ba0678a65d5351c8cd98413" translate="yes" xml:space="preserve">
          <source>Similarly, the type money2 below is not a subtype of type money.</source>
          <target state="translated">同様に、下記のタイプマネー2は、タイプマネーのサブタイプではありません。</target>
        </trans-unit>
        <trans-unit id="c869e53520a631cc815df7228f90ac1d103f73c0" translate="yes" xml:space="preserve">
          <source>Simple break hints are:</source>
          <target state="translated">シンプルなブレイクのヒントは</target>
        </trans-unit>
        <trans-unit id="0cbdf297ad58c249eb6a884743adad5ebf58ec52" translate="yes" xml:space="preserve">
          <source>Simplification, which is run in conjunction with inlining, propagates information (known as &lt;em&gt;approximations&lt;/em&gt;) about which variables hold what values at runtime. Certain relationships between variables and symbols are also tracked: for example, some variable may be known to always hold the same value as some other variable; or perhaps some variable may be known to always hold the value pointed to by some symbol.</source>
          <target state="translated">インライン化と組み合わせて実行される単純化は、実行時にどの変数がどの値を保持するかについての情報（&lt;em&gt;近似と&lt;/em&gt;呼ばれる）を伝播します。変数とシンボルの間の特定の関係も追跡されます。たとえば、ある変数は他の変数と常に同じ値を保持することがわかっている場合があります。あるいは、ある変数が、ある記号が指す値を常に保持していることがわかっている場合もあります。</target>
        </trans-unit>
        <trans-unit id="55ea8cc7a44b0c2bd5856cb347cbbb1643e7f85f" translate="yes" xml:space="preserve">
          <source>Since 4.03 it raises the more helpful message</source>
          <target state="translated">4.03以降は、より便利なメッセージが表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="73ade97bea138f3fb9efb25ef0d7f126ecd46f02" translate="yes" xml:space="preserve">
          <source>Since 4.05, caml_shutdown function can be used to shut the runtime down gracefully, which equals the following:</source>
          <target state="translated">4.05 からは caml_shutdown 関数を使ってランタイムを優雅にシャットダウンできるようになりましたが、これは以下のように等しくなります。</target>
        </trans-unit>
        <trans-unit id="81ba141f2bfeface334c39bbfdb23f3bb8205301" translate="yes" xml:space="preserve">
          <source>Since 4.10, allocation functions are guaranteed not to call any OCaml callbacks from C, including finalisers and signal handlers, and delay their execution instead.</source>
          <target state="translated">4.10以降、アロケーション関数は、ファイナライザやシグナルハンドラを含むCからのOCamlコールバックを一切呼び出さないことが保証されており、その代わりに実行を遅らせるようになっています。</target>
        </trans-unit>
        <trans-unit id="b82b13aad43c297f1863ddbcfef759a67cc30d99" translate="yes" xml:space="preserve">
          <source>Since OCaml 4.01, it is an error if the same method or instance variable name is defined several times in the same class body.</source>
          <target state="translated">OCaml 4.01以降、同じクラスボディ内で同じメソッドやインスタンス変数名が複数回定義されているとエラーになる。</target>
        </trans-unit>
        <trans-unit id="be0f0ea20cac38b243eaa241996cd121a3a25b22" translate="yes" xml:space="preserve">
          <source>Since OCaml 4.01, open statements shadowing an existing identifier (which is later used) trigger the warning 44. Adding a ! character after the open keyword indicates that such a shadowing is intentional and should not trigger the warning.</source>
          <target state="translated">OCaml 4.01以降、既存の識別子(後に使用される)をシャドウイングするオープン文は警告44をトリガします。open キーワードの後に ! 文字を追加すると、そのようなシャドウイングは意図的なものであり、警告を発生させるべきではないことを示します。</target>
        </trans-unit>
        <trans-unit id="4c19851dc798d0e9efd68333f02e9775f883e6a8" translate="yes" xml:space="preserve">
          <source>Since OCaml 4.02, it is possible to specify a refill-handler, a function that will be called when refill happens. It is passed the continuation of the lexing, on which it has total control. The OCaml expression used as refill action should have a type that is an instance of</source>
          <target state="translated">OCaml 4.02以降、詰め替えが発生したときに呼び出される関数である詰め替えハンドラを指定することができます。それは、それが完全に制御しているレキシングの継続を渡されます。refillアクションとして使用されるOCaml式は</target>
        </trans-unit>
        <trans-unit id="703a6e0ead56321fd4ccc207048572bfb9890b37" translate="yes" xml:space="preserve">
          <source>Since OCaml 4.04, it is possible to get access to every part of the internal runtime API by defining the CAML_INTERNALS macro before loading caml header files. If this macro is not defined, parts of the internal runtime API are hidden.</source>
          <target state="translated">OCaml 4.04 以降、caml ヘッダファイルを読み込む前に CAML_INTERNALS マクロを定義することで、内部ランタイム API のすべての部分にアクセスできるようになりました。このマクロが定義されていない場合、内部ランタイムAPIの一部は隠されます。</target>
        </trans-unit>
        <trans-unit id="5ef10155ca428da06ee8b6867d58296ace73ef7f" translate="yes" xml:space="preserve">
          <source>Since OCaml 4.08, it is possible to mark components (such as value or type declarations) in signatures with &amp;ldquo;alerts&amp;rdquo; that will be reported when those components are referenced. This generalizes the notion of &amp;ldquo;deprecated&amp;rdquo; components which were previously reported as warning 3. Those alerts can be used for instance to report usage of unsafe features, or of features which are only available on some platforms, etc.</source>
          <target state="translated">OCaml 4.08以降、シグニチャ内のコンポーネント（値や型の宣言など）を、それらのコンポーネントが参照されたときに報告される「アラート」でマークすることが可能です。これは、以前に警告3として報告された「非推奨」コンポーネントの概念を一般化します。これらのアラートは、たとえば、安全でない機能の使用状況や、一部のプラットフォームでのみ使用可能な機能の使用状況などを報告するために使用できます。</target>
        </trans-unit>
        <trans-unit id="7fb784bd027538e4265b84b801b820609e843b9e" translate="yes" xml:space="preserve">
          <source>Since OCaml 4.09, the graphics library is distributed as an external package. Its new home is:</source>
          <target state="translated">OCaml 4.09以降、グラフィックライブラリは外部パッケージとして配布されています。その新しいホームは</target>
        </trans-unit>
        <trans-unit id="47910afc78d4869690c0ed5c357621b1abf65b2a" translate="yes" xml:space="preserve">
          <source>Since OCaml version 4.02, the OCamlBrowser tool and the Labltk library are distributed separately from the OCaml compiler. The project is now hosted at &lt;a href=&quot;https://forge.ocamlcore.org/projects/labltk/&quot;&gt;https://forge.ocamlcore.org/projects/labltk/&lt;/a&gt;.</source>
          <target state="translated">OCamlバージョン4.02以降、OCamlBrowserツールとLabltkライブラリはOCamlコンパイラとは別に配布されています。プロジェクトは現在、&lt;a href=&quot;https://forge.ocamlcore.org/projects/labltk/&quot;&gt;https：//forge.ocamlcore.org/projects/labltk/で&lt;/a&gt;ホストされています。</target>
        </trans-unit>
        <trans-unit id="85aeea25da4f851d04af97132f25d53038ece0d4" translate="yes" xml:space="preserve">
          <source>Since OCaml version 4.03, the ocamlbuild compilation manager is distributed separately from the OCaml compiler. The project is now hosted at &lt;a href=&quot;https://github.com/ocaml/ocamlbuild/&quot;&gt;https://github.com/ocaml/ocamlbuild/&lt;/a&gt;.</source>
          <target state="translated">OCamlバージョン4.03以降、ocamlbuildコンパイルマネージャはOCamlコンパイラとは別に配布されています。プロジェクトは現在&lt;a href=&quot;https://github.com/ocaml/ocamlbuild/&quot;&gt;https://github.com/ocaml/ocamlbuild/で&lt;/a&gt;ホストされています。</target>
        </trans-unit>
        <trans-unit id="f3c42e6e2c2dc841c6813ede2648ca45d6e38f24" translate="yes" xml:space="preserve">
          <source>Since Ocaml 3.12, the keywords inherit!, val! and method! have the same semantics as inherit, val and method, but they additionally require the definition they introduce to be overriding. Namely, method! requires &lt;a href=&quot;names#method-name&quot;&gt;method-name&lt;/a&gt; to be already defined in this class, val! requires &lt;a href=&quot;names#inst-var-name&quot;&gt;inst-var-name&lt;/a&gt; to be already defined in this class, and inherit! requires &lt;a href=&quot;#class-expr&quot;&gt;class-expr&lt;/a&gt; to override some definitions. If no such overriding occurs, an error is signaled.</source>
          <target state="translated">Ocaml 3.12以降、キーワードは！、val！を継承します。と方法！継承、val、およびメソッドと同じセマンティクスを持ちますが、それらが導入する定義をオーバーライドする必要があります。つまり、方法！このクラスvalで&lt;a href=&quot;names#method-name&quot;&gt;method-name&lt;/a&gt;がすでに定義されている必要があります。&lt;a href=&quot;names#inst-var-name&quot;&gt;inst-var-name&lt;/a&gt;がこのクラスですでに定義されている必要があり、継承します！一部の定義をオーバーライドするには、&lt;a href=&quot;#class-expr&quot;&gt;class-expr&lt;/a&gt;が必要です。そのようなオーバーライドが発生しない場合、エラーが通知されます。</target>
        </trans-unit>
        <trans-unit id="b41b06211bb56a2cb0a28226137e946166598852" translate="yes" xml:space="preserve">
          <source>Since blocks are composed of several words, a block can potentially be sampled several times. If a block is sampled several times, then each of the callback is called once for each event of this block: the multiplicity is given in the &lt;code&gt;n_samples&lt;/code&gt; field of the &lt;code&gt;allocation&lt;/code&gt; structure.</source>
          <target state="translated">ブロックは複数の単語で構成されているため、ブロックは複数回サンプリングされる可能性があります。ブロックが複数回サンプリングされる場合、このブロックのイベントごとに各コールバックが1回呼び出されます。多重度は &lt;code&gt;allocation&lt;/code&gt; 構造の &lt;code&gt;n_samples&lt;/code&gt; フィールドで指定されます。</target>
        </trans-unit>
        <trans-unit id="879e48e0d81c1920490f9453989dbafc873931d1" translate="yes" xml:space="preserve">
          <source>Since the fields x and y can only appear simultaneously in the first record type, OCaml infers that the type of project_and_rotate is first_record -&amp;gt; first_record.</source>
          <target state="translated">フィールドxとyは最初のレコードタイプにのみ同時に表示できるため、OCamlはproject_and_rotateのタイプがfirst_record-&amp;gt; first_recordであると推測します。</target>
        </trans-unit>
        <trans-unit id="11b5947847de732bcf3a69fffb2afbb29de82849" translate="yes" xml:space="preserve">
          <source>Since the functions have sufficiently few arguments, more specialised arguments will be added. After some simplification one obtains:</source>
          <target state="translated">関数は十分に少ない引数を持っているので、より専門的な引数が追加されます。いくつかの単純化の後、次のようになります。</target>
        </trans-unit>
        <trans-unit id="607a6de4f0d6d6061a214efa4d56f36e0fd649f8" translate="yes" xml:space="preserve">
          <source>Since the type of None is 'a option and the function ref has type 'b -&amp;gt; 'b ref, a natural deduction for the type of store would be 'a option ref. However, the inferred type, '_weak1 option ref, is different. Type variables whose name starts with a _weak prefix like '_weak1 are weakly polymorphic type variables, sometimes shortened as weak type variables. A weak type variable is a placeholder for a single type that is currently unknown. Once the specific type t behind the placeholder type '_weak1 is known, all occurrences of '_weak1 will be replaced by t. For instance, we can define another option reference and store an int inside:</source>
          <target state="translated">Noneのタイプはオプションであり、関数refのタイプは 'b-&amp;gt;' b refであるため、ストアのタイプの自然演繹は 'オプションrefになります。ただし、推測されるタイプ '_weak1 optionrefは異なります。名前が '_weak1のような_weakプレフィックスで始まる型変数は、弱ポリモーフィック型変数であり、弱型変数として短縮されることもあります。弱い型変数は、現在不明な単一の型のプレースホルダーです。プレースホルダータイプ '_weak1の背後にある特定のタイプtがわかると、' _ weak1のすべての出現箇所がtに置き換えられます。たとえば、別のオプション参照を定義して、内部にintを格納できます。</target>
        </trans-unit>
        <trans-unit id="f454df85c0505167cc193264f5f21518fa34f8d9" translate="yes" xml:space="preserve">
          <source>Since the use of a return type often eliminates the need to name type parameters in the left-hand side of a type definition, one can replace them with anonymous types _ in that case.</source>
          <target state="translated">リターン型を使用すると、型定義の左側に型パラメータの名前を付ける必要がなくなることが多いので、その場合は匿名型_に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="9ecba5078a243b75e15bfb04595710b711f37d53" translate="yes" xml:space="preserve">
          <source>Since there is only one case in this pattern matching, it is safe to expand directly the argument r in a record pattern:</source>
          <target state="translated">このパターンマッチングでは1つのケースしかないので、レコードパターンの引数rを直接展開しても問題ありません。</target>
        </trans-unit>
        <trans-unit id="6388c54547c979489e38f3575180f088b92eef41" translate="yes" xml:space="preserve">
          <source>Since version 3.10, redefinitions of a visible instance variable with the same name do not create a new variable, but are merged, using the last value for initialization. They must have identical types and mutability. However, if an instance variable is hidden by omitting it from an interface, it will be kept distinct from other instance variables with the same name.</source>
          <target state="translated">バージョン 3.10 以降、同じ名前の可視インスタンス変数の再定義は新しい変数を作成せず、初期化のために最後の値を使用してマージされます。これらの変数は同じ型と変異性を持っていなければなりません。しかし、あるインスタンス変数がインターフェイスから省略されて隠されている場合、同じ名前の他のインスタンス変数とは区別されます。</target>
        </trans-unit>
        <trans-unit id="cc7b7e27599e0ea9a03712ac291946d71c69a826" translate="yes" xml:space="preserve">
          <source>Sine.</source>
          <target state="translated">Sine.</target>
        </trans-unit>
        <trans-unit id="49bb3c5b34d4f790f63a5f9bea42c5d394baa7d3" translate="yes" xml:space="preserve">
          <source>Sine. Argument is in radians.</source>
          <target state="translated">サイン 引数の単位はラジアンです。</target>
        </trans-unit>
        <trans-unit id="850e57a1ee5fae18b0892f2cbd53b13443f4e553" translate="yes" xml:space="preserve">
          <source>Size (in words) of the largest block in the free list.</source>
          <target state="translated">フリーリストの中で最大のブロックのサイズ(単語で)。</target>
        </trans-unit>
        <trans-unit id="23aa6e811d60088ebfe23efb308861aa99dcc44c" translate="yes" xml:space="preserve">
          <source>Size in bytes</source>
          <target state="translated">サイズ(バイト数</target>
        </trans-unit>
        <trans-unit id="45cf1f454a042183408948a20c84cf3be2a96f7b" translate="yes" xml:space="preserve">
          <source>Size of &lt;code&gt;int&lt;/code&gt;, in bits.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; のサイズ（ビット単位）。</target>
        </trans-unit>
        <trans-unit id="8d1eb5965b0e8500bb02fadfe8d12ee828f16ead" translate="yes" xml:space="preserve">
          <source>Size of &lt;code&gt;int&lt;/code&gt;, in bits. It is 31 (resp. 63) when using OCaml on a 32-bit (resp. 64-bit) platform. It may differ for other implementations, e.g. it can be 32 bits when compiling to JavaScript.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; のサイズ（ビット単位）。32ビット（または64ビット）プラットフォームでOCamlを使用する場合は31（または63）です。他の実装では異なる場合があります。たとえば、JavaScriptにコンパイルする場合は32ビットになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="811814293c14ee9d45359fd381dbd3619cdced86" translate="yes" xml:space="preserve">
          <source>Size of one word on the machine currently executing the OCaml program, in bits: 32 or 64.</source>
          <target state="translated">現在OCamlプログラムを実行しているマシン上の1ワードのサイズ(ビット単位)。32または64。</target>
        </trans-unit>
        <trans-unit id="8f670099c33bb6a9695a8b24391cc3ee7a94ec07" translate="yes" xml:space="preserve">
          <source>Size of received buffer</source>
          <target state="translated">受信バッファのサイズ</target>
        </trans-unit>
        <trans-unit id="3a091b3f09d5cc7e72f0c3a89f2986c55176bed8" translate="yes" xml:space="preserve">
          <source>Size of send buffer</source>
          <target state="translated">送信バッファのサイズ</target>
        </trans-unit>
        <trans-unit id="a5ba5bd7b7fe69d79153223545822822aa2cdcaf" translate="yes" xml:space="preserve">
          <source>So far, we have described how to call C functions from OCaml. In this section, we show how C functions can call OCaml functions, either as callbacks (OCaml calls C which calls OCaml), or with the main program written in C.</source>
          <target state="translated">ここまでは、OCamlからCの関数を呼び出す方法を説明してきました。ここでは、Cの関数がOCamlの関数をコールバック(OCamlがOCamlを呼び出すCを呼び出す)として呼び出す方法と、Cで書かれたメインプログラムを使ってOCamlの関数を呼び出す方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="93c6a1f183694628e37ced41591147bfc0da1908" translate="yes" xml:space="preserve">
          <source>Socket</source>
          <target state="translated">Socket</target>
        </trans-unit>
        <trans-unit id="2cfd29f9858165eacbb559bf3f07fe2ff6c6692a" translate="yes" xml:space="preserve">
          <source>Socket domain</source>
          <target state="translated">ソケットドメイン</target>
        </trans-unit>
        <trans-unit id="2e98a4ed23c4c749f9fc8167cd3bde6181cd3ddb" translate="yes" xml:space="preserve">
          <source>Socket is already connected</source>
          <target state="translated">ソケットが接続済み</target>
        </trans-unit>
        <trans-unit id="ff89f748bc36cfa9b24752455509275ea67d6018" translate="yes" xml:space="preserve">
          <source>Socket is not connected</source>
          <target state="translated">ソケットが接続されていない</target>
        </trans-unit>
        <trans-unit id="ba3a2f86cdfbc4d51c8dd0104aa25dd69c9ae5eb" translate="yes" xml:space="preserve">
          <source>Socket operation on non-socket</source>
          <target state="translated">非ソケットでのソケット操作</target>
        </trans-unit>
        <trans-unit id="3348447c0d2adbd99decc7a8738b6dea888ab6ca" translate="yes" xml:space="preserve">
          <source>Socket options</source>
          <target state="translated">ソケットオプション</target>
        </trans-unit>
        <trans-unit id="c9ad407a2d95af30c4033ba9ae9c8dae9a728edf" translate="yes" xml:space="preserve">
          <source>Socket protocol number</source>
          <target state="translated">ソケットプロトコル番号</target>
        </trans-unit>
        <trans-unit id="44977f379f1c02803857933034b64abf658f4fbb" translate="yes" xml:space="preserve">
          <source>Socket type</source>
          <target state="translated">ソケットタイプ</target>
        </trans-unit>
        <trans-unit id="1d0a063107fb2a5027e2f89664a6337ddcb70691" translate="yes" xml:space="preserve">
          <source>Socket type not supported</source>
          <target state="translated">ソケットタイプはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="508c36b3241ae34627fb1cadebb1f27b16e0f61a" translate="yes" xml:space="preserve">
          <source>Sockets</source>
          <target state="translated">Sockets</target>
        </trans-unit>
        <trans-unit id="da7e8a5db4d27cd8e808680b636e1905c8ab337a" translate="yes" xml:space="preserve">
          <source>Software caused connection abort</source>
          <target state="translated">ソフトウェアが原因で接続が中断した</target>
        </trans-unit>
        <trans-unit id="ac38d3ac2b8f5582491bf72aa187e55579c2e9be" translate="yes" xml:space="preserve">
          <source>Some attributes are understood by the type-checker:</source>
          <target state="translated">いくつかの属性は、タイプチェッカーによって理解されています。</target>
        </trans-unit>
        <trans-unit id="8cfecef4a7de8587a8731429a921ca7d4dfb4fd2" translate="yes" xml:space="preserve">
          <source>Some constructors, such as the exception constructors Failure and Invalid_argument, take as parameter a string value holding a text message intended for the user.</source>
          <target state="translated">例外コンストラクタ Failure や Invalid_argument など、いくつかのコンストラクタは、ユーザに向けたテキストメッ セージを保持する文字列値をパラメータとして受け取る。</target>
        </trans-unit>
        <trans-unit id="65db1c59080316bcf74caa7e0683333457ad28c6" translate="yes" xml:space="preserve">
          <source>Some elements support only a subset of all @-tags. Tags that are not relevant to the documented element are simply ignored. For instance, all tags are ignored when documenting type constructors, record fields, and class inheritance clauses. Similarly, a @param tag on a class instance variable is ignored.</source>
          <target state="translated">いくつかの要素は、すべての@タグのサブセットのみをサポートしています。文書化された要素に関係のないタグは単に無視されます。例えば、型コンストラクタ、レコードフィールド、クラス継承句を文書化する際には、全てのタグは無視されます。同様に、クラスのインスタンス変数の @param タグは無視されます。</target>
        </trans-unit>
        <trans-unit id="f3e4e360257048c8ac9623c4484c27cbb25c848b" translate="yes" xml:space="preserve">
          <source>Some entity (typically an expression) the value of which is known by the compiler at compile time. Constantness may be explicit from the source code or inferred by the Flambda optimisers.</source>
          <target state="translated">コンパイラがコンパイル時に知っている値を持つエンティティ(通常は式)。不変性はソースコードで明示的に指定されている場合と、Flambdaオプティマイザによって推測されている場合があります。</target>
        </trans-unit>
        <trans-unit id="c4108bc1b80291fcd27aa85d3bc69508cd42011b" translate="yes" xml:space="preserve">
          <source>Some extension nodes are understood by the compiler itself:</source>
          <target state="translated">拡張ノードの中には、コンパイラ自身が理解できるものもあります。</target>
        </trans-unit>
        <trans-unit id="ac91f25bdfaca0fd0f24bc1c048bd2a822908634" translate="yes" xml:space="preserve">
          <source>Some functions are flagged as not tail-recursive. A tail-recursive function uses constant stack space, while a non-tail-recursive function uses stack space proportional to the length of its list argument, which can be a problem with very long lists. When the function takes several list arguments, an approximate formula giving stack usage (in some unspecified constant unit) is shown in parentheses.</source>
          <target state="translated">いくつかの関数は、末尾再帰的ではないとフラグが立てられています。一方、非尾部再帰関数はリスト引数の長さに比例したスタック空間を使用しますが、これは非常に長いリストで問題となります。関数が複数のリスト引数を取る場合、スタック使用量(不特定の定数単位)を示す近似式が括弧内に示されています。</target>
        </trans-unit>
        <trans-unit id="415760abd20f9a3ddcb87f0308d37d8d1a8acca5" translate="yes" xml:space="preserve">
          <source>Some of the Flambda flags may be subject to change in future releases.</source>
          <target state="translated">Flambda フラグの一部は将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="a8faaa28b910e81e493d1ec8c3ff366be796ccb5" translate="yes" xml:space="preserve">
          <source>Some possible reasons for failing to return a location are as follow:</source>
          <target state="translated">ロケーションの返却に失敗する理由としては、以下のようなものが考えられます。</target>
        </trans-unit>
        <trans-unit id="352a26fd5c9966e34dc532660aeee492db89a4c8" translate="yes" xml:space="preserve">
          <source>Some possible reasons for returning &lt;code&gt;None&lt;/code&gt; are as follow:</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; を返す理由として考えられるものは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a491a5b9ff21fc1c712012884a3f6d5255eb641d" translate="yes" xml:space="preserve">
          <source>Some special expressions are available in method bodies for manipulating instance variables and duplicating self:</source>
          <target state="translated">インスタンス変数を操作したり、selfを複製したりするための特別な式がメソッドボディに用意されています。</target>
        </trans-unit>
        <trans-unit id="4dd7671731908ef2e0dae4c0fec50f5db2c9e9ac" translate="yes" xml:space="preserve">
          <source>Some syntactic constructions are accepted during parsing and rejected during type checking. These syntactic constructions can therefore not be used directly in vanilla OCaml. However, -ppx rewriters and other external tools can exploit this parser leniency to extend the language with these new syntactic constructions by rewriting them to vanilla constructions.</source>
          <target state="translated">いくつかの構文構文は、構文解析中に受け入れられ、型チェック中に拒否されます。そのため、これらの構文はバニラのOCamlで直接使用することはできません。しかし、-ppxリライタや他の外部ツールは、これらの新しい構文をバニラの構文に書き換えることで、パーサの寛大さを利用して言語を拡張することができます。</target>
        </trans-unit>
        <trans-unit id="fc75d8733433957f6ed3394f8f48aaaa13a230d6" translate="yes" xml:space="preserve">
          <source>Sort a floatarray in increasing order according to a comparison function.</source>
          <target state="translated">比較関数にしたがって、フローター配列を昇順に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="12b9742f0225797751f8d045f36f092bce5f2a25" translate="yes" xml:space="preserve">
          <source>Sort a floatarray in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see below for a complete specification). For example, &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt; is a suitable comparison function. After calling &lt;code&gt;sort&lt;/code&gt;, the array is sorted in place in increasing order. &lt;code&gt;sort&lt;/code&gt; is guaranteed to run in constant heap space and (at most) logarithmic stack space.</source>
          <target state="translated">比較関数に従って、floatarrayを昇順でソートします。比較関数は、引数が等しい場合は0を返し、最初の値が大きい場合は正の整数を返し、最初の値が小さい場合は負の整数を返す必要があります（完全な仕様については以下を参照してください）。たとえば、&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;は適切な比較関数です。 &lt;code&gt;sort&lt;/code&gt; を呼び出した後、配列は昇順でその場でソートされます。 &lt;code&gt;sort&lt;/code&gt; は、一定のヒープスペースと（最大で）対数スタックスペースで実行されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="646c2222ce8e2809d04501367fe92adb8b901099" translate="yes" xml:space="preserve">
          <source>Sort a list in increasing order according to a comparison function.</source>
          <target state="translated">比較機能により、リストを昇順に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="03d3137b9feb06bf6e9a2e8f8dca4845b6ea1be1" translate="yes" xml:space="preserve">
          <source>Sort a list in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see Array.sort for a complete specification). For example, &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt; is a suitable comparison function. The resulting list is sorted in increasing order. &lt;code&gt;List.sort&lt;/code&gt; is guaranteed to run in constant heap space (in addition to the size of the result list) and logarithmic stack space.</source>
          <target state="translated">比較関数に従って、リストを昇順で並べ替えます。比較関数は、引数が等しい場合は0を返し、最初の値が大きい場合は正の整数を返し、最初の値が小さい場合は負の整数を返す必要があります（完全な仕様についてはArray.sortを参照してください）。たとえば、&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;は適切な比較関数です。結果のリストは昇順でソートされます。 &lt;code&gt;List.sort&lt;/code&gt; は、（結果リストのサイズに加えて）一定のヒープスペースと対数スタックスペースで実行されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="58d97caa0b4ab44fd3739d173807df802d224d9e" translate="yes" xml:space="preserve">
          <source>Sort an array in increasing order according to a comparison function.</source>
          <target state="translated">比較関数に従って配列を昇順に並べ替えます.</target>
        </trans-unit>
        <trans-unit id="f4bce5c3631201bcc5ecaef3a611067df24b6202" translate="yes" xml:space="preserve">
          <source>Sort an array in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see below for a complete specification). For example, &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt; is a suitable comparison function, provided there are no floating-point NaN values in the data. After calling &lt;code&gt;sort&lt;/code&gt;, the array is sorted in place in increasing order. &lt;code&gt;sort&lt;/code&gt; is guaranteed to run in constant heap space and (at most) logarithmic stack space.</source>
          <target state="translated">比較関数に従って、配列を昇順で並べ替えます。比較関数は、引数が等しい場合は0を返し、最初の値が大きい場合は正の整数を返し、最初の値が小さい場合は負の整数を返す必要があります（完全な仕様については以下を参照してください）。たとえば、データに浮動小数点NaN値がない場合、&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;は適切な比較関数です。 &lt;code&gt;sort&lt;/code&gt; を呼び出した後、配列は昇順でその場でソートされます。 &lt;code&gt;sort&lt;/code&gt; は、一定のヒープスペースと（最大で）対数スタックスペースで実行されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="b83d35f48bff1338b8ffef8c14c816e297c383b8" translate="yes" xml:space="preserve">
          <source>Sort an array in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see below for a complete specification). For example, &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt; is a suitable comparison function. After calling &lt;code&gt;Array.sort&lt;/code&gt;, the array is sorted in place in increasing order. &lt;code&gt;Array.sort&lt;/code&gt; is guaranteed to run in constant heap space and (at most) logarithmic stack space.</source>
          <target state="translated">比較関数に従って、配列を昇順で並べ替えます。比較関数は、引数が等しい場合は0を返し、最初の値が大きい場合は正の整数を返し、最初の値が小さい場合は負の整数を返す必要があります（完全な仕様については以下を参照してください）。たとえば、&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;は適切な比較関数です。 &lt;code&gt;Array.sort&lt;/code&gt; を呼び出した後、配列は昇順でその場でソートされます。 &lt;code&gt;Array.sort&lt;/code&gt; は、一定のヒープスペースと（最大で）対数スタックスペースで実行されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="01152a07b57f8764c6289151ce131fa414021b94" translate="yes" xml:space="preserve">
          <source>Sort files according to their dependencies.</source>
          <target state="translated">依存関係に従ってファイルを並べ替えます。</target>
        </trans-unit>
        <trans-unit id="0a0c9ee78d00c49fdb36745d008f1df78dd6c77a" translate="yes" xml:space="preserve">
          <source>Sort the list of top-level modules before generating the documentation.</source>
          <target state="translated">ドキュメントを生成する前に、トップレベルのモジュールのリストをソートします。</target>
        </trans-unit>
        <trans-unit id="378e9e163b7eecefadb4415cae533096e336c4ab" translate="yes" xml:space="preserve">
          <source>Sorting</source>
          <target state="translated">Sorting</target>
        </trans-unit>
        <trans-unit id="ae89003b504fabd08ec3be7403f79794ab72855c" translate="yes" xml:space="preserve">
          <source>Spacetime</source>
          <target state="translated">Spacetime</target>
        </trans-unit>
        <trans-unit id="1f8cf16b7ea8f93bf5c99c3fb2607d56d944da70" translate="yes" xml:space="preserve">
          <source>Spacetime is currently only available for x86-64 targets and has only been tested on Linux systems (although it is expected to work on most modern Unix-like systems and provision has been made for running under Windows). It is expected that the set of supported platforms will be extended in the future.</source>
          <target state="translated">Spacetime は現在 x86-64 ターゲットでのみ利用可能で、Linux システムでのみテストされています (最新の Unix ライクなシステムのほとんどで動作することが期待されており、Windows での動作にも対応しています)。サポートされているプラットフォームは将来的に拡張される予定です。</target>
        </trans-unit>
        <trans-unit id="ac584b81666b3bc3363ef560830c1cfe8b0e82d8" translate="yes" xml:space="preserve">
          <source>Spacetime is the name given to functionality within the OCaml compiler that provides for accurate profiling of the memory behaviour of a program. Using Spacetime it is possible to determine the source of memory leaks and excess memory allocation quickly and easily. Excess allocation slows programs down both by imposing a higher load on the garbage collector and reducing the cache locality of the program&amp;rsquo;s code. Spacetime provides full backtraces for every allocation that occurred on the OCaml heap during the lifetime of the program including those in C stubs.</source>
          <target state="translated">時空は、プログラムのメモリ動作の正確なプロファイリングを提供するOCamlコンパイラ内の機能に付けられた名前です。 Spacetimeを使用すると、メモリリークと過剰なメモリ割り当ての原因をすばやく簡単に特定できます。過剰な割り当ては、ガベージコレクタに高い負荷をかけることと、プログラムのコードのキャッシュの局所性を減らすことの両方によって、プログラムの速度を低下させます。 Spacetimeは、Cスタブ内のものを含め、プログラムの存続期間中にOCamlヒープで発生したすべての割り当てに対して完全なバックトレースを提供します。</target>
        </trans-unit>
        <trans-unit id="48a679b4fef93210c99c2867dca8b855aae9f079" translate="yes" xml:space="preserve">
          <source>Spacetime only analyses the memory behaviour of a program with respect to the OCaml heap allocators and garbage collector. It does not analyse allocation on the C heap. Spacetime does not affect the memory behaviour of a program being profiled with the exception of any change caused by the overhead of profiling (see section &lt;a href=&quot;#s%3Aspacetime-runtimeoverhead&quot;&gt;22.3&lt;/a&gt;)&amp;mdash;for example the program running slower might cause it to allocate less memory in total.</source>
          <target state="translated">Spacetimeは、OCamlヒープアロケータとガベージコレクタに関してプログラムのメモリ動作のみを分析します。Cヒープの割り当ては分析されません。時空は、プロファイリングのオーバーヘッドによって引き起こされる変更を除いて、プロファイリングされるプログラムのメモリ動作に影響を与えません（セクション&lt;a href=&quot;#s%3Aspacetime-runtimeoverhead&quot;&gt;22.3を&lt;/a&gt;参照）。たとえば、プログラムの実行速度が遅いと、割り当てられるメモリの合計が少なくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="1bfc66fca52f849b22836f519ac13502d262a97d" translate="yes" xml:space="preserve">
          <source>Spacetime-configured compilers run slower and occupy more memory than their counterparts. It is hoped this will be fixed in the future as part of improved cross compilation support.</source>
          <target state="translated">時空間設定されたコンパイラの動作が遅く、より多くのメモリを占有します。これは、クロスコンパイルサポートの改善の一環として、将来的に修正されることが期待されています。</target>
        </trans-unit>
        <trans-unit id="0f3d7da024c878836fb44bec74f82a857945e099" translate="yes" xml:space="preserve">
          <source>Specialised argument</source>
          <target state="translated">専門的な議論</target>
        </trans-unit>
        <trans-unit id="36d1cca4de316b0f3ff4a4a7aea712ca5d0b8416" translate="yes" xml:space="preserve">
          <source>Specialised formatted input functions</source>
          <target state="translated">専門的な書式設定された入力機能</target>
        </trans-unit>
        <trans-unit id="c7ee5cdce5b5adc99a16107f8a0cbad11ccbdc8e" translate="yes" xml:space="preserve">
          <source>Specialized version of &lt;a href=&quot;bigarray#VALreshape&quot;&gt;&lt;code&gt;Bigarray.reshape&lt;/code&gt;&lt;/a&gt; for reshaping to one-dimensional arrays.</source>
          <target state="translated">1次元配列に再形成するための&lt;a href=&quot;bigarray#VALreshape&quot;&gt; &lt;code&gt;Bigarray.reshape&lt;/code&gt; の&lt;/a&gt;特殊バージョン。</target>
        </trans-unit>
        <trans-unit id="9c8e450d4639c979ec29c285647dd2fe5e10040b" translate="yes" xml:space="preserve">
          <source>Specialized version of &lt;a href=&quot;bigarray#VALreshape&quot;&gt;&lt;code&gt;Bigarray.reshape&lt;/code&gt;&lt;/a&gt; for reshaping to three-dimensional arrays.</source>
          <target state="translated">3次元配列に再形成するための&lt;a href=&quot;bigarray#VALreshape&quot;&gt; &lt;code&gt;Bigarray.reshape&lt;/code&gt; の&lt;/a&gt;特殊バージョン。</target>
        </trans-unit>
        <trans-unit id="7be8395c98cd0223aab91f0599a991b4dc5afc58" translate="yes" xml:space="preserve">
          <source>Specialized version of &lt;a href=&quot;bigarray#VALreshape&quot;&gt;&lt;code&gt;Bigarray.reshape&lt;/code&gt;&lt;/a&gt; for reshaping to two-dimensional arrays.</source>
          <target state="translated">2次元配列に再形成するための&lt;a href=&quot;bigarray#VALreshape&quot;&gt; &lt;code&gt;Bigarray.reshape&lt;/code&gt; の&lt;/a&gt;特殊バージョン。</target>
        </trans-unit>
        <trans-unit id="43c35773327940730b665961e4752362a3b5e73d" translate="yes" xml:space="preserve">
          <source>Specialized version of &lt;a href=&quot;bigarray#VALreshape&quot;&gt;&lt;code&gt;Bigarray.reshape&lt;/code&gt;&lt;/a&gt; for reshaping to zero-dimensional arrays.</source>
          <target state="translated">ゼロ次元配列に再形成するための&lt;a href=&quot;bigarray#VALreshape&quot;&gt; &lt;code&gt;Bigarray.reshape&lt;/code&gt; の&lt;/a&gt;特殊バージョン。</target>
        </trans-unit>
        <trans-unit id="78b2052c026f21ce8899e084abfbef4c7c52450f" translate="yes" xml:space="preserve">
          <source>Specific annotations may be added in the format strings to give pretty-printing commands to the pretty-printing engine.</source>
          <target state="translated">特定のアノテーションをフォーマット文字列に追加して、 プリティプリンティングエンジンにプリティプリンティングコマンドを与えることができます。</target>
        </trans-unit>
        <trans-unit id="f2c3dd0891ac4b24b95fb75f329dbcf06edc414d" translate="yes" xml:space="preserve">
          <source>Specification of the comparison function: Let &lt;code&gt;a&lt;/code&gt; be the array and &lt;code&gt;cmp&lt;/code&gt; the comparison function. The following must be true for all &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt; :</source>
          <target state="translated">比較関数の仕様： &lt;code&gt;a&lt;/code&gt; を配列、 &lt;code&gt;cmp&lt;/code&gt; を比較関数とします。以下は &lt;code&gt;a&lt;/code&gt; ：内のすべての &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、 &lt;code&gt;z&lt;/code&gt; に当てはまる必要があります。</target>
        </trans-unit>
        <trans-unit id="264268d95295992703c12c188ef6048251a383d4" translate="yes" xml:space="preserve">
          <source>Specification of the comparison function: Let &lt;code&gt;a&lt;/code&gt; be the array and &lt;code&gt;cmp&lt;/code&gt; the comparison function. The following must be true for all x, y, z in a :</source>
          <target state="translated">比較関数の仕様： &lt;code&gt;a&lt;/code&gt; を配列、 &lt;code&gt;cmp&lt;/code&gt; を比較関数とします。以下は、：内のすべてのx、y、zに当てはまる必要があります。</target>
        </trans-unit>
        <trans-unit id="4c87398d6e8515ee08416522a6df16c4bee30fa5" translate="yes" xml:space="preserve">
          <source>Specification of the comparison function: Let &lt;code&gt;a&lt;/code&gt; be the floatarray and &lt;code&gt;cmp&lt;/code&gt; the comparison function. The following must be true for all &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt; :</source>
          <target state="translated">比較関数の仕様： &lt;code&gt;a&lt;/code&gt; をfloatarrayとし、 &lt;code&gt;cmp&lt;/code&gt; を比較関数とします。以下は &lt;code&gt;a&lt;/code&gt; ：内のすべての &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、 &lt;code&gt;z&lt;/code&gt; に当てはまる必要があります。</target>
        </trans-unit>
        <trans-unit id="d11d12414ac6591fc5217e352ba4806e18c81fbd" translate="yes" xml:space="preserve">
          <source>Specifies an additional string to be output with profiling information. By default, ocamlprof will annotate programs with comments of the form (* n *) where n is the counter value for a profiling point. With option -F s, the annotation will be (* sn *).</source>
          <target state="translated">プロファイリング情報を出力する追加の文字列を指定します。デフォルトでは、ocamlprofはプログラムに(*n *)という形式のコメントを付けます。オプション -F s を指定すると、アノテーションは (*sn *)となります。</target>
        </trans-unit>
        <trans-unit id="b2ecbd64b6f63c8a41ad755311ef578f6fdd8a7a" translate="yes" xml:space="preserve">
          <source>Specifies an alternate dump file of profiling information to be read.</source>
          <target state="translated">読み取るプロファイリング情報の代替ダンプファイルを指定します。</target>
        </trans-unit>
        <trans-unit id="78189676774d8a03ffec36cdd021f56d4ff85ad2" translate="yes" xml:space="preserve">
          <source>Specify Info directory entry.</source>
          <target state="translated">Infoディレクトリのエントリを指定します。</target>
        </trans-unit>
        <trans-unit id="764c1c2ac8fdb8df6ca241276b753400dbadf23e" translate="yes" xml:space="preserve">
          <source>Specify merge options between interfaces and implementations. (see section &lt;a href=&quot;#ss%3Aocamldoc-merge&quot;&gt;16.1.2&lt;/a&gt; for details). flags can be one or several of the following characters:</source>
          <target state="translated">インターフェイスと実装の間のマージオプションを指定します。（詳細については、セクション&lt;a href=&quot;#ss%3Aocamldoc-merge&quot;&gt;16.1.2&lt;/a&gt;を参照してください）。フラグには、次の1つまたは複数の文字を使用できます。</target>
        </trans-unit>
        <trans-unit id="d9b2722d55e0ed667661be2e505491b3e2508aee" translate="yes" xml:space="preserve">
          <source>Specify odd parity instead of even.</source>
          <target state="translated">偶数ではなく奇数パリティを指定します。</target>
        </trans-unit>
        <trans-unit id="b9eb61307c6397dc068c4836d5615b32db4f1bce" translate="yes" xml:space="preserve">
          <source>Specify section of Info directory.</source>
          <target state="translated">情報ディレクトリのセクションを指定します。</target>
        </trans-unit>
        <trans-unit id="3cf69310aaf4ba0ff88c8c11acbb5d9e874ea7a9" translate="yes" xml:space="preserve">
          <source>Specify the colors to use in the generated dot code. When generating module dependencies, ocamldoc uses different colors for modules, depending on the directories in which they reside. When generating types dependencies, ocamldoc uses different colors for types, depending on the modules in which they are defined. colors is a list of color names separated by &amp;rsquo;,&amp;rsquo;, as in Red,Blue,Green. The available colors are the ones supported by the dot tool.</source>
          <target state="translated">生成されたドットコードで使用する色を指定します。モジュールの依存関係を生成するとき、ocamldocは、モジュールが存在するディレクトリに応じて、モジュールに異なる色を使用します。タイプの依存関係を生成するとき、ocamldocは、タイプが定義されているモジュールに応じて、タイプに異なる色を使用します。色は、赤、青、緑のように、「、」で区切られた色名のリストです。使用可能な色は、ドットツールでサポートされている色です。</target>
        </trans-unit>
        <trans-unit id="d1a04c4094800d4a25e3996a323a80970407a756" translate="yes" xml:space="preserve">
          <source>Specify the name of the output file produced by ocamllex. The default is the input file name with its extension replaced by .ml.</source>
          <target state="translated">ocamllexが生成する出力ファイルの名前を指定します。デフォルトは入力ファイル名で、拡張子は.mlに置き換えられています。</target>
        </trans-unit>
        <trans-unit id="5bf2268a91aceafedecc7a037c499f825f2acf2f" translate="yes" xml:space="preserve">
          <source>Specify the name of the output file produced by the compiler. The default output name is a.out under Unix and camlprog.exe under Windows. If the -a option is given, specify the name of the library produced. If the -pack option is given, specify the name of the packed object file produced. If the -output-obj option is given, specify the name of the output file produced. If the -c option is given, specify the name of the object file produced for the &lt;em&gt;next&lt;/em&gt; source file that appears on the command line.</source>
          <target state="translated">コンパイラーによって生成された出力ファイルの名前を指定します。デフォルトの出力名は、Unixではa.out、Windowsではcamlprog.exeです。 -aオプションを指定する場合は、作成するライブラリーの名前を指定してください。 -packオプションを指定する場合は、生成されるパックオブジェクトファイルの名前を指定します。 -output-objオプションを指定する場合は、生成される出力ファイルの名前を指定します。 -cオプションを指定する場合は、コマンドラインに表示される&lt;em&gt;次の&lt;/em&gt;ソースファイル用に作成されたオブジェクトファイルの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="d328a3d88738a8d3eadb3b8aefcee241c2d7a300" translate="yes" xml:space="preserve">
          <source>Specify the name of the output file produced by the linker. The default output name is a.out under Unix and camlprog.exe under Windows. If the -a option is given, specify the name of the library produced. If the -pack option is given, specify the name of the packed object file produced. If the -output-obj option is given, specify the name of the output file produced. If the -shared option is given, specify the name of plugin file produced.</source>
          <target state="translated">リンカが生成する出力ファイルの名前を指定します。デフォルトの出力名は、Unix では a.out、Windows では camlprog.exe です。a オプションを指定すると、生成されるライブラリの名前を指定します。pack オプションが指定された場合は、生成されたパックされたオブジェクトファイルの名前を指定します。output-obj オプションを指定すると、生成される出力ファイルの名前を指定します。shared オプションを指定すると、生成されるプラグインファイルの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="eac56ecb3edcec97524e457cb8e36bfda3addec2" translate="yes" xml:space="preserve">
          <source>Specify the name of the toplevel file produced by the linker. The default is a.out.</source>
          <target state="translated">リンカが生成するトップレベルファイルの名前を指定します。デフォルトは a.out です。</target>
        </trans-unit>
        <trans-unit id="49fbb0a75dfa6081ddf8737f80eeb75c46445512" translate="yes" xml:space="preserve">
          <source>Specify the type of the semantic attributes for the given symbols. This is mandatory for start symbols only. Other nonterminal symbols need not be given types by hand: these types will be inferred when running the output files through the OCaml compiler (unless the &lt;code&gt;-s&lt;/code&gt; option is in effect). The &lt;a href=&quot;types#typexpr&quot;&gt;typexpr&lt;/a&gt; part is an arbitrary OCaml type expression, except that all type constructor names must be fully qualified, as explained above for %token.</source>
          <target state="translated">指定されたシンボルのセマンティック属性のタイプを指定します。これは、開始シンボルにのみ必須です。他の非終端記号に手動でタイプを指定する必要はありません。これらのタイプは、OCamlコンパイラで出力ファイルを実行するときに推測されます（ &lt;code&gt;-s&lt;/code&gt; オプションが有効になっていない場合）。&lt;a href=&quot;types#typexpr&quot;&gt;typexprの&lt;/a&gt;部分は、％トークンについて上記で説明したように、すべての種類のコンストラクタの名前は、完全修飾されなければならないことを除いて、任意のOCamlの型の式です。</target>
        </trans-unit>
        <trans-unit id="dc0c554e640ae69ee83bf329f25eaa01f80aabef" translate="yes" xml:space="preserve">
          <source>Split a file name into directory name / base file name.</source>
          <target state="translated">ファイル名をディレクトリ名/ベースファイル名に分割します。</target>
        </trans-unit>
        <trans-unit id="0ef2916d6063e59b7dc104bdabcd5daed75d687b" translate="yes" xml:space="preserve">
          <source>Split a file name into directory name / base file name. If &lt;code&gt;name&lt;/code&gt; is a valid file name, then &lt;code&gt;concat&amp;nbsp;(dirname&amp;nbsp;name)&amp;nbsp;(basename&amp;nbsp;name)&lt;/code&gt; returns a file name which is equivalent to &lt;code&gt;name&lt;/code&gt;. Moreover, after setting the current directory to &lt;code&gt;dirname&amp;nbsp;name&lt;/code&gt; (with &lt;a href=&quot;sys#VALchdir&quot;&gt;&lt;code&gt;Sys.chdir&lt;/code&gt;&lt;/a&gt;), references to &lt;code&gt;basename&amp;nbsp;name&lt;/code&gt; (which is a relative file name) designate the same file as &lt;code&gt;name&lt;/code&gt; before the call to &lt;a href=&quot;sys#VALchdir&quot;&gt;&lt;code&gt;Sys.chdir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイル名をディレクトリ名/ベースファイル名に分割します。場合は &lt;code&gt;name&lt;/code&gt; 有効なファイル名で、その後、 &lt;code&gt;concat&amp;nbsp;(dirname&amp;nbsp;name)&amp;nbsp;(basename&amp;nbsp;name)&lt;/code&gt; に相当し、ファイル名を返し &lt;code&gt;name&lt;/code&gt; 。さらに、現在のディレクトリを &lt;code&gt;dirname&amp;nbsp;name&lt;/code&gt; （&lt;a href=&quot;sys#VALchdir&quot;&gt; &lt;code&gt;Sys.chdir&lt;/code&gt; を使用&lt;/a&gt;）に設定した後、 &lt;code&gt;basename&amp;nbsp;name&lt;/code&gt; （相対ファイル名）への参照は、&lt;a href=&quot;sys#VALchdir&quot;&gt; &lt;code&gt;Sys.chdir&lt;/code&gt; を&lt;/a&gt;呼び出す前の &lt;code&gt;name&lt;/code&gt; と同じファイルを指定します。</target>
        </trans-unit>
        <trans-unit id="18a9705b01dc9c170d51771a987c403f46a25076" translate="yes" xml:space="preserve">
          <source>Splitting</source>
          <target state="translated">Splitting</target>
        </trans-unit>
        <trans-unit id="16df53085eea45d012180a01d9c65e4d69715793" translate="yes" xml:space="preserve">
          <source>Square root.</source>
          <target state="translated">平方根。</target>
        </trans-unit>
        <trans-unit id="0d3138eae7ebb469e62a43de3996f397bab11b30" translate="yes" xml:space="preserve">
          <source>Square root. The result &lt;code&gt;x&amp;nbsp;+&amp;nbsp;i.y&lt;/code&gt; is such that &lt;code&gt;x&amp;nbsp;&amp;gt;&amp;nbsp;0&lt;/code&gt; or &lt;code&gt;x&amp;nbsp;=&amp;nbsp;0&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;&amp;gt;=&amp;nbsp;0&lt;/code&gt;. This function has a discontinuity along the negative real axis.</source>
          <target state="translated">平方根。結果 &lt;code&gt;x&amp;nbsp;+&amp;nbsp;i.y&lt;/code&gt; は、 &lt;code&gt;x&amp;nbsp;&amp;gt;&amp;nbsp;0&lt;/code&gt; または &lt;code&gt;x&amp;nbsp;=&amp;nbsp;0&lt;/code&gt; かつ &lt;code&gt;y&amp;nbsp;&amp;gt;=&amp;nbsp;0&lt;/code&gt; ます。この関数には、負の実軸に沿って不連続性があります。</target>
        </trans-unit>
        <trans-unit id="83e5a0d3d2ef19df258412a4d3ef3f9533b0c0c1" translate="yes" xml:space="preserve">
          <source>Stack</source>
          <target state="translated">Stack</target>
        </trans-unit>
        <trans-unit id="119f5ab8a4f65aecd72a4d4c15e7238c1dd30516" translate="yes" xml:space="preserve">
          <source>Standard labeled libraries.</source>
          <target state="translated">標準的なラベル付きライブラリ。</target>
        </trans-unit>
        <trans-unit id="508cfdd242a4dbc44b800a23c67d10428e2c6d2c" translate="yes" xml:space="preserve">
          <source>Standard library modules</source>
          <target state="translated">標準ライブラリモジュール</target>
        </trans-unit>
        <trans-unit id="e4da9a8e1b11d834d3eab1b30b53670f8388f8aa" translate="yes" xml:space="preserve">
          <source>Start character (usually ctrl-Q).</source>
          <target state="translated">開始文字(通常は ctrl-Q)。</target>
        </trans-unit>
        <trans-unit id="277ac8ecc15e2c9171fab8c17452880f42607be5" translate="yes" xml:space="preserve">
          <source>Start of major GC cycle.</source>
          <target state="translated">主要なGCサイクルの開始</target>
        </trans-unit>
        <trans-unit id="90e0161012dde2267255594a35194c6fbd832e5d" translate="yes" xml:space="preserve">
          <source>Start the sampling with the given parameters.</source>
          <target state="translated">与えられたパラメータでサンプリングを開始します。</target>
        </trans-unit>
        <trans-unit id="19cc28c4f6b24df76b4178e0a8799f0454427c48" translate="yes" xml:space="preserve">
          <source>Start the sampling with the given parameters. Fails if sampling is already active.</source>
          <target state="translated">与えられたパラメータでサンプリングを開始します。サンプリングが既にアクティブな場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="f830a13dce8adcb0cabc74755c312cfc51e5017b" translate="yes" xml:space="preserve">
          <source>Starting with Objective Caml 3.00, it is possible to record the -custom option as well as the names of C libraries in an OCaml library file .cma or .cmxa. For instance, consider an OCaml library mylib.cma, built from the OCaml object files a.cmo and b.cmo, which reference C code in libmylib.a. If the library is built as follows:</source>
          <target state="translated">Objective Caml 3.00 以降、-custom オプションと C ライブラリの名前を OCaml ライブラリファイル .cma または .cmxa に記録することができます。例えば、libmylib.aのCコードを参照するOCamlオブジェクトファイルa.cmoとb.cmoからビルドされたOCamlライブラリmylib.cmaを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b91eda3d5a614d7d82dcfba7938bafd9738269ae" translate="yes" xml:space="preserve">
          <source>Starting with Objective Caml 3.03, an alternative to static linking of C code using the -custom code is provided. In this mode, the OCaml linker generates a pure bytecode executable (no embedded custom runtime system) that simply records the names of dynamically-loaded libraries containing the C code. The standard OCaml runtime system ocamlrun then loads dynamically these libraries, and resolves references to the required primitives, before executing the bytecode.</source>
          <target state="translated">Objective Caml 3.03以降、-custom codeを使用したCコードのスタティックリンクに代わるものが提供されています。このモードでは、OCamlリンカは純粋なバイトコード実行ファイルを生成します(カスタムランタイムシステムは組み込まれていません)。標準の OCaml ランタイムシステム ocamlrun は、バイトコードを実行する前に、これらのライブラリを動的にロードし、必要なプリミティブへの参照を解決します。</target>
        </trans-unit>
        <trans-unit id="1f59cc0afb2e7a12e0dd36361604146e391913c8" translate="yes" xml:space="preserve">
          <source>Startup messages (loading the bytecode executable file, resolving shared libraries).</source>
          <target state="translated">起動メッセージ(バイトコード実行ファイルの読み込み、共有ライブラリの解決)。</target>
        </trans-unit>
        <trans-unit id="2086b21f8f49274138c38d476bee317a84a8aecc" translate="yes" xml:space="preserve">
          <source>Statistics</source>
          <target state="translated">Statistics</target>
        </trans-unit>
        <trans-unit id="29757350cc40a874924e4f8603f0be72611f1555" translate="yes" xml:space="preserve">
          <source>StdLabels</source>
          <target state="translated">StdLabels</target>
        </trans-unit>
        <trans-unit id="e4480faf0e810a556a7a3d6b1944ea9990b30303" translate="yes" xml:space="preserve">
          <source>Stdlib</source>
          <target state="translated">Stdlib</target>
        </trans-unit>
        <trans-unit id="9e253470c876ee6d5c720eb777aeb82d4c26e28f" translate="yes" xml:space="preserve">
          <source>Stop</source>
          <target state="translated">Stop</target>
        </trans-unit>
        <trans-unit id="cac94c65840b164f967c185720ce5d2d22fcd8fc" translate="yes" xml:space="preserve">
          <source>Stop character (usually ctrl-S).</source>
          <target state="translated">停止文字(通常は ctrl-S)。</target>
        </trans-unit>
        <trans-unit id="dd2d0badca0107bfe00c8bf707f6cbbc66e875ef" translate="yes" xml:space="preserve">
          <source>Stop compilation after the given compilation pass. The currently supported passes are: parsing, typing.</source>
          <target state="translated">指定されたコンパイルパスの後にコンパイルを停止します。現在サポートされているパスは、解析、型付けです。</target>
        </trans-unit>
        <trans-unit id="acb0dcfd6906c0d9e5e828dfe6db5b7a0e08dae4" translate="yes" xml:space="preserve">
          <source>Stop execution for the given number of seconds.</source>
          <target state="translated">指定された秒数だけ実行を停止します。</target>
        </trans-unit>
        <trans-unit id="ba8848ffcb6b76a0d727951fcafac4b2adee910f" translate="yes" xml:space="preserve">
          <source>Stop execution for the given number of seconds. Like &lt;code&gt;sleep&lt;/code&gt;, but fractions of seconds are supported.</source>
          <target state="translated">指定された秒数の間実行を停止します。 &lt;code&gt;sleep&lt;/code&gt; と同様ですが、数分の1秒がサポートされています。</target>
        </trans-unit>
        <trans-unit id="9f39332271b648b33b9216188c148ca185ccff4c" translate="yes" xml:space="preserve">
          <source>Stop interpreting keywords and call the function with each remaining argument</source>
          <target state="translated">キーワードの解釈をやめて、残りの各引数で関数を呼び出す</target>
        </trans-unit>
        <trans-unit id="54caba6c5e005665e19c471a9869196aa5fe758e" translate="yes" xml:space="preserve">
          <source>Stop the sampling.</source>
          <target state="translated">サンプリングを止めて</target>
        </trans-unit>
        <trans-unit id="aa8698fd09970a6af5ef2746988e8701f18facae" translate="yes" xml:space="preserve">
          <source>Stop the sampling. Fails if sampling is not active.</source>
          <target state="translated">サンプリングを停止します。サンプリングがアクティブでない場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="31ef85d3886324ac0daa432598f7f28c17c3ca8f" translate="yes" xml:space="preserve">
          <source>Stop tracing all functions traced so far.</source>
          <target state="translated">これまでにトレースされたすべての機能のトレースを停止します。</target>
        </trans-unit>
        <trans-unit id="2cef2a78b119882569894c0a7f505f95f3af25ea" translate="yes" xml:space="preserve">
          <source>Stop tracing the given function.</source>
          <target state="translated">与えられた関数のトレースを停止します。</target>
        </trans-unit>
        <trans-unit id="159480ac5536641c98c16dc1a2fc1666f43ed18c" translate="yes" xml:space="preserve">
          <source>Store_double_field(v, n, d) stores the double precision floating-point number d in the n&lt;sup&gt;th&lt;/sup&gt; element of the array of floating-point numbers v.</source>
          <target state="translated">Store_double_field（v、n、d）は、倍精度浮動小数点数dを浮動小数点数vの配列のn&lt;sup&gt;番目の&lt;/sup&gt;要素に格納します。</target>
        </trans-unit>
        <trans-unit id="ba2305bf40cfd2ed7e52c98519e2076d13f1f2a8" translate="yes" xml:space="preserve">
          <source>Store_field (b, n, v) stores the value v in the field number n of value b, which must be a block (i.e. Is_block(b) must be true).</source>
          <target state="translated">Store_field (b,n,v)は、ブロックでなければならない値 b のフィールド番号 n に値 v を格納します (すなわち、Is_block(b)が真でなければなりません)。</target>
        </trans-unit>
        <trans-unit id="382e914de22199d46f8d0ef5c5b6a457fd5f5f88" translate="yes" xml:space="preserve">
          <source>Store_field(b, n, v) stores the value v in the field number n of value b, which must be a structured block.</source>
          <target state="translated">Store_field(b,n,v)は、構造化ブロックでなければならない値 b のフィールド番号 n に値 v を格納します。</target>
        </trans-unit>
        <trans-unit id="5dfe08d5f0fd501cb4cb5c9b5ab1306e28c9aaa5" translate="yes" xml:space="preserve">
          <source>Str</source>
          <target state="translated">Str</target>
        </trans-unit>
        <trans-unit id="df063869e11d7a9aa132cd4a984f7b5eb870d656" translate="yes" xml:space="preserve">
          <source>Stream</source>
          <target state="translated">Stream</target>
        </trans-unit>
        <trans-unit id="b48e1a50e3eb18053b14d5bfc02d99c1f824c681" translate="yes" xml:space="preserve">
          <source>Stream builders</source>
          <target state="translated">ストリームビルダー</target>
        </trans-unit>
        <trans-unit id="9712546075280428be043f28e86353de8b8e9c67" translate="yes" xml:space="preserve">
          <source>Stream iterator</source>
          <target state="translated">ストリームイテレータ</target>
        </trans-unit>
        <trans-unit id="c1df93dbb42814b12d5b273e5758a6fac66a2de5" translate="yes" xml:space="preserve">
          <source>Stream socket</source>
          <target state="translated">ストリームソケット</target>
        </trans-unit>
        <trans-unit id="fb2e7e5cdfa180129198e529d8ea2621c317804f" translate="yes" xml:space="preserve">
          <source>Streams and parsers.</source>
          <target state="translated">ストリームとパーサー。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="bb36019440cc173d127c3aae1c10a96090c6c585" translate="yes" xml:space="preserve">
          <source>String concatenation.</source>
          <target state="translated">文字列の連結。</target>
        </trans-unit>
        <trans-unit id="0d310b2b99cc668b17af0b02d5702685919572c5" translate="yes" xml:space="preserve">
          <source>String concatenation. Right-associative operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">文字列の連結。右結合演算子。詳細については、&lt;a href=&quot;ocaml_operators&quot;&gt; &lt;code&gt;Ocaml_operators&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0c14d9fcd0e402fa5d59a8deada34328c2183ab1" translate="yes" xml:space="preserve">
          <source>String conversion functions</source>
          <target state="translated">文字列変換関数</target>
        </trans-unit>
        <trans-unit id="e8c67bee324dda8862ee44968e54400194cc2d63" translate="yes" xml:space="preserve">
          <source>String literals are delimited by &quot; (double quote) characters. The two double quotes enclose a sequence of either characters different from &quot; and \, or escape sequences from the table given above for character literals, or a Unicode character escape sequence.</source>
          <target state="translated">文字列リテラルは &quot; (二重引用符)キ ャ ラ ク タ で区切られています。二つの二重引用符は、&quot;と &quot;とは異なる文字、または文字リテラルのために上で与えられた表のエスケープシーケンス、またはUnicode文字エスケープシーケンスのいずれかのシーケンスを囲んでいます。</target>
        </trans-unit>
        <trans-unit id="8c7906868ba95400fc8a6d36abebe6392b45e269" translate="yes" xml:space="preserve">
          <source>String matching and searching</source>
          <target state="translated">文字列のマッチングと検索</target>
        </trans-unit>
        <trans-unit id="766f45c1227c8c7d13e31b3c8218c7c441dc99b1" translate="yes" xml:space="preserve">
          <source>String operations</source>
          <target state="translated">文字列操作</target>
        </trans-unit>
        <trans-unit id="8d5d12fe85ff3629c70f06fe2ccba98f2ef750ad" translate="yes" xml:space="preserve">
          <source>String operations.</source>
          <target state="translated">文字列操作。</target>
        </trans-unit>
        <trans-unit id="6e7ccab3bf9ed59fa3897eaea798c56c7684cd59" translate="yes" xml:space="preserve">
          <source>String operations. This module is intended to be used through &lt;a href=&quot;stdlabels&quot;&gt;&lt;code&gt;StdLabels&lt;/code&gt;&lt;/a&gt; which replaces &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;bytes&quot;&gt;&lt;code&gt;Bytes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; with their labeled counterparts</source>
          <target state="translated">文字列操作。このモジュールは、&lt;a href=&quot;array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;bytes&quot;&gt; &lt;code&gt;Bytes&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;list&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;をそれらのラベル付きの対応物に置き換える&lt;a href=&quot;stdlabels&quot;&gt; &lt;code&gt;StdLabels&lt;/code&gt; &lt;/a&gt;を介して使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="0dd53d6d05f395fe64d03b9c25a5955171c3d33f" translate="yes" xml:space="preserve">
          <source>String tags</source>
          <target state="translated">文字列タグ</target>
        </trans-unit>
        <trans-unit id="398d9ddb73ee4947a6d92a53a3b99ed8de605451" translate="yes" xml:space="preserve">
          <source>String values are finite sequences of characters. The current implementation supports strings containing up to 2&lt;sup&gt;24&lt;/sup&gt; &amp;minus; 5 characters (16777211 characters); on 64-bit platforms, the limit is 2&lt;sup&gt;57&lt;/sup&gt; &amp;minus; 9.</source>
          <target state="translated">文字列値は、文字の有限シーケンスです。現在の実装では、最大2 &lt;sup&gt;24&lt;/sup&gt; &amp;minus; 5文字（16777211文字）を含む文字列がサポートされています。64ビットプラットフォームでは、制限は2 &lt;sup&gt;57&lt;/sup&gt; &amp;minus;9です。</target>
        </trans-unit>
        <trans-unit id="34a998adbb8ec8935e29af4fede0169191c33176" translate="yes" xml:space="preserve">
          <source>StringLabels</source>
          <target state="translated">StringLabels</target>
        </trans-unit>
        <trans-unit id="f9ce9e410646789b1991a03fbd23ed1074dfa4df" translate="yes" xml:space="preserve">
          <source>String_tag</source>
          <target state="translated">String_tag</target>
        </trans-unit>
        <trans-unit id="2d498b782702d956bea922cd280afa2515d69410" translate="yes" xml:space="preserve">
          <source>String_val(v) returns a pointer to the first byte of the string v, with type char * or, when OCaml is configured with -force-safe-string, with type const char *. This pointer is a valid C string: there is a null byte after the last byte in the string. However, OCaml strings can contain embedded null bytes, which will confuse the usual C functions over strings.</source>
          <target state="translated">String_val(v)は、文字列vの最初のバイトへのポインタをchar *型で、OCamlが-force-safe-stringで設定されている場合はconst char *型で返します。このポインタは有効なC言語の文字列で、文字列の最後のバイトの後にはNULLバイトがあります。しかし、OCamlの文字列にはヌルバイトが埋め込まれていることがあり、通常のC関数が文字列の上で混乱することになります。</target>
        </trans-unit>
        <trans-unit id="060ca5b23f65b0299c216dd4e8511069f47054f4" translate="yes" xml:space="preserve">
          <source>Strip 8th bit on input characters.</source>
          <target state="translated">入力文字の8ビット目を取り除く。</target>
        </trans-unit>
        <trans-unit id="7c0e13fdadda30bb92194b7ff31353209f1c6453" translate="yes" xml:space="preserve">
          <source>Structural equality test.</source>
          <target state="translated">構造的平等性テスト。</target>
        </trans-unit>
        <trans-unit id="1420a8bfe553843800a5e0eeda6eeea10bcce063" translate="yes" xml:space="preserve">
          <source>Structural inequality test.</source>
          <target state="translated">構造的不等式試験。</target>
        </trans-unit>
        <trans-unit id="964f4aa676065898b1577b34f94afc2774c1ff8d" translate="yes" xml:space="preserve">
          <source>Structural ordering functions.</source>
          <target state="translated">構造的な順序付け機能。</target>
        </trans-unit>
        <trans-unit id="ba988a59552bfb50a703210d543593242c424d01" translate="yes" xml:space="preserve">
          <source>Structural ordering functions. These functions coincide with the usual orderings over integers, characters, strings, byte sequences and floating-point numbers, and extend them to a total ordering over all types. The ordering is compatible with &lt;code&gt;(&amp;nbsp;=&amp;nbsp;)&lt;/code&gt;. As in the case of &lt;code&gt;(&amp;nbsp;=&amp;nbsp;)&lt;/code&gt;, mutable structures are compared by contents. Comparison between functional values raises &lt;code&gt;Invalid_argument&lt;/code&gt;. Comparison between cyclic structures may not terminate. Left-associative operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">構造順序関数。これらの関数は、整数、文字、文字列、バイトシーケンス、および浮動小数点数の通常の順序と一致し、すべてのタイプの全順序に拡張されます。順序は &lt;code&gt;(&amp;nbsp;=&amp;nbsp;)&lt;/code&gt; と互換性があります。 &lt;code&gt;(&amp;nbsp;=&amp;nbsp;)&lt;/code&gt; 場合と同様に、可変構造は内容によって比較されます。関数値を比較すると、 &lt;code&gt;Invalid_argument&lt;/code&gt; が発生します。環状構造間の比較は終了しない場合があります。左結合演算子。詳細については、&lt;a href=&quot;ocaml_operators&quot;&gt; &lt;code&gt;Ocaml_operators&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fa1a6ce691e6d5ffdcd5ca0d0bf720c77435180e" translate="yes" xml:space="preserve">
          <source>Structure of entries in the &lt;code&gt;groups&lt;/code&gt; database.</source>
          <target state="translated">&lt;code&gt;groups&lt;/code&gt; データベースのエントリの構造。</target>
        </trans-unit>
        <trans-unit id="598293f4d4d38fb64e25a27801c5bb777aed096f" translate="yes" xml:space="preserve">
          <source>Structure of entries in the &lt;code&gt;hosts&lt;/code&gt; database.</source>
          <target state="translated">&lt;code&gt;hosts&lt;/code&gt; データベースのエントリの構造。</target>
        </trans-unit>
        <trans-unit id="d7118c10fc2f1d94d9826bee980fe8f7908c0e0c" translate="yes" xml:space="preserve">
          <source>Structure of entries in the &lt;code&gt;passwd&lt;/code&gt; database.</source>
          <target state="translated">&lt;code&gt;passwd&lt;/code&gt; データベースのエントリの構造。</target>
        </trans-unit>
        <trans-unit id="abf82e0dcc97048077ad807e874664a09c91e309" translate="yes" xml:space="preserve">
          <source>Structure of entries in the &lt;code&gt;protocols&lt;/code&gt; database.</source>
          <target state="translated">&lt;code&gt;protocols&lt;/code&gt; データベースのエントリの構造。</target>
        </trans-unit>
        <trans-unit id="a6c3d4928c346aafd5529fad82c13ccca99e8e53" translate="yes" xml:space="preserve">
          <source>Structure of entries in the &lt;code&gt;services&lt;/code&gt; database.</source>
          <target state="translated">&lt;code&gt;services&lt;/code&gt; データベースのエントリの構造。</target>
        </trans-unit>
        <trans-unit id="d2e5835f238715991fb675b2b1d62d25b388199e" translate="yes" xml:space="preserve">
          <source>Structures struct &amp;hellip; end are collections of definitions for value names, type names, exceptions, module names and module type names. The definitions are evaluated in the order in which they appear in the structure. The scopes of the bindings performed by the definitions extend to the end of the structure. As a consequence, a definition may refer to names bound by earlier definitions in the same structure.</source>
          <target state="translated">構造体struct&amp;hellip;endは、値名、型名、例外、モジュール名、およびモジュール型名の定義のコレクションです。定義は、構造に表示される順序で評価されます。定義によって実行されるバインディングのスコープは、構造の最後まで拡張されます。結果として、定義は、同じ構造内の以前の定義によってバインドされた名前を参照する場合があります。</target>
        </trans-unit>
        <trans-unit id="a5b58ce4dec6fe8562096a10da3109ac06c55815" translate="yes" xml:space="preserve">
          <source>Subtraction</source>
          <target state="translated">Subtraction</target>
        </trans-unit>
        <trans-unit id="85e16c85547da9b7ef56410541850d43ba4b72ba" translate="yes" xml:space="preserve">
          <source>Subtraction.</source>
          <target state="translated">Subtraction.</target>
        </trans-unit>
        <trans-unit id="f23d83765c27480ace90dc29b354fcb3af5074ca" translate="yes" xml:space="preserve">
          <source>Subtyping is never implicit. There are, however, two ways to perform subtyping. The most general construction is fully explicit: both the domain and the codomain of the type coercion must be given.</source>
          <target state="translated">サブタイプ付けは決して暗黙のうちに行われるものではありません。しかし、サブタイプ化を行うには2つの方法があります。最も一般的な構文は完全に明示的です:型強制のドメインとコドメインの両方が与えられなければなりません。</target>
        </trans-unit>
        <trans-unit id="267236f12d087c344c732b17967129639c89c2dd" translate="yes" xml:space="preserve">
          <source>Successor.</source>
          <target state="translated">Successor.</target>
        </trans-unit>
        <trans-unit id="695eff1526e154751f93eceb9ecae7ae62843717" translate="yes" xml:space="preserve">
          <source>Successor. &lt;code&gt;Int32.succ&amp;nbsp;x&lt;/code&gt; is &lt;code&gt;Int32.add&amp;nbsp;x&amp;nbsp;Int32.one&lt;/code&gt;.</source>
          <target state="translated">後継。 &lt;code&gt;Int32.succ&amp;nbsp;x&lt;/code&gt; は &lt;code&gt;Int32.add&amp;nbsp;x&amp;nbsp;Int32.one&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a88899200e53819e4fca75e68b1f2d7ef4f59f99" translate="yes" xml:space="preserve">
          <source>Successor. &lt;code&gt;Int64.succ&amp;nbsp;x&lt;/code&gt; is &lt;code&gt;Int64.add&amp;nbsp;x&amp;nbsp;Int64.one&lt;/code&gt;.</source>
          <target state="translated">後継。 &lt;code&gt;Int64.succ&amp;nbsp;x&lt;/code&gt; は &lt;code&gt;Int64.add&amp;nbsp;x&amp;nbsp;Int64.one&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a33602394a98e9f181e6510ea20dbadc6f37f28" translate="yes" xml:space="preserve">
          <source>Successor. &lt;code&gt;Nativeint.succ&amp;nbsp;x&lt;/code&gt; is &lt;code&gt;Nativeint.add&amp;nbsp;x&amp;nbsp;Nativeint.one&lt;/code&gt;.</source>
          <target state="translated">後継。 &lt;code&gt;Nativeint.succ&amp;nbsp;x&lt;/code&gt; は &lt;code&gt;Nativeint.add&amp;nbsp;x&amp;nbsp;Nativeint.one&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b03e8df028a515393350967ae4387f5ffddb3921" translate="yes" xml:space="preserve">
          <source>Such abbreviations may be used alone,</source>
          <target state="translated">このような略語は単独で使用してもよい。</target>
        </trans-unit>
        <trans-unit id="a9a9a4018c6e87434fce0fcbcb6811297262044d" translate="yes" xml:space="preserve">
          <source>Such annotations of the form name: are called &lt;em&gt;labels&lt;/em&gt;. They are meant to document the code, allow more checking, and give more flexibility to function application. You can give such names to arguments in your programs, by prefixing them with a tilde ~.</source>
          <target state="translated">フォーム名のこのような注釈は、&lt;em&gt;ラベル&lt;/em&gt;と呼ばれます。これらは、コードを文書化し、より多くのチェックを可能にし、機能適用により多くの柔軟性を与えることを目的としています。プログラムの引数にチルダ〜を付けることで、そのような名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="afe84014593353fc3502a2dfb59069e9aa563fb9" translate="yes" xml:space="preserve">
          <source>Such comments can take three forms: &lt;em&gt;floating comments&lt;/em&gt;, &lt;em&gt;item comments&lt;/em&gt; and &lt;em&gt;label comments&lt;/em&gt;. Any comment starting with ** which does not match one of these forms will cause the compiler to emit warning 50.</source>
          <target state="translated">このようなコメントは、&lt;em&gt;フローティングコメント&lt;/em&gt;、&lt;em&gt;アイテムコメント&lt;/em&gt;、&lt;em&gt;ラベルコメントの&lt;/em&gt;3つの形式をとることができ&lt;em&gt;ます&lt;/em&gt;。**で始まるコメントがこれらの形式のいずれにも一致しない場合、コンパイラーは警告50を発行します。</target>
        </trans-unit>
        <trans-unit id="25da4ed1a780e343dd3f4f8e9110f06bf0afad4e" translate="yes" xml:space="preserve">
          <source>Such conjunctive constraints may be unsatisfiable. In such a case the corresponding tag may not be used in a value of this type. This does not mean that the whole type is not valid: one can still use other available tags. Conjunctive constraints are mainly intended as output from the type checker. When they are used in source programs, unsolvable constraints may cause early failures.</source>
          <target state="translated">そのような接続制約は、満たされない場合があります。そのような場合、対応するタグは、この型の値では使用できません。これは、型全体が有効でないことを意味するものではなく、他の利用可能なタグを使用することができます。接続制約は、主に型チェッカからの出力として意図されています。これらがソース・プログラムで使用されている場合、解けない制約は、早期の失敗の原因となることがあります。</target>
        </trans-unit>
        <trans-unit id="608e778255c58bb721e1518cfabc05ef86956e7e" translate="yes" xml:space="preserve">
          <source>Such specifications are also inferred. Namely, when P is a path satisfying the above constraints,</source>
          <target state="translated">このような仕様も推測される。すなわち、Pが上記の制約を満たすパスである場合である。</target>
        </trans-unit>
        <trans-unit id="20dbe04d5924d91567646631274eb2f545fc830d" translate="yes" xml:space="preserve">
          <source>Support libraries for the C part (-llib).</source>
          <target state="translated">C 部分のサポートライブラリ (-llib)。</target>
        </trans-unit>
        <trans-unit id="345aca003e713e405c83d4690e078d5d7eeef4ce" translate="yes" xml:space="preserve">
          <source>Supported layouts</source>
          <target state="translated">サポートされているレイアウト</target>
        </trans-unit>
        <trans-unit id="e58a2db5e9aa8c332609520b8b74074728fd429c" translate="yes" xml:space="preserve">
          <source>Suppress header in generated documentation.</source>
          <target state="translated">生成されたドキュメントのヘッダを抑制します。</target>
        </trans-unit>
        <trans-unit id="de50b1b14218cb87a2945d6e8e68eda23b7643ee" translate="yes" xml:space="preserve">
          <source>Suppress trailer in generated documentation.</source>
          <target state="translated">生成されたドキュメントのトレーラを抑制します。</target>
        </trans-unit>
        <trans-unit id="7b699c4e85571d84428b248779bbe8ae1bbcbfbf" translate="yes" xml:space="preserve">
          <source>Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: &lt;code&gt;TCOOFF&lt;/code&gt; suspends output, &lt;code&gt;TCOON&lt;/code&gt; restarts output, &lt;code&gt;TCIOFF&lt;/code&gt; transmits a STOP character to suspend input, and &lt;code&gt;TCION&lt;/code&gt; transmits a START character to restart input.</source>
          <target state="translated">2番目の引数に応じて、指定されたファイル記述子のデータの受信または送信を一時停止または再開します &lt;code&gt;TCOOFF&lt;/code&gt; は出力を一時停止し、 &lt;code&gt;TCOON&lt;/code&gt; は出力を再開し、 &lt;code&gt;TCIOFF&lt;/code&gt; は入力を一時停止するためにSTOP文字を送信し、 &lt;code&gt;TCION&lt;/code&gt; は入力を再開するためにSTART文字を送信します。</target>
        </trans-unit>
        <trans-unit id="4f79bf2cca20cb87f53d54a2eae520b086d8ef01" translate="yes" xml:space="preserve">
          <source>Suspend the execution of the calling thread until at least one character or EOF is available for reading (&lt;code&gt;wait_read&lt;/code&gt;) or one character can be written without blocking (&lt;code&gt;wait_write&lt;/code&gt;) on the given Unix file descriptor.</source>
          <target state="translated">少なくとも一つの文字まで呼び出しスレッドの実行を中断またはEOFは（読んで利用可能です &lt;code&gt;wait_read&lt;/code&gt; （ブロックせずに書き込むことができます）、または1つの文字を &lt;code&gt;wait_write&lt;/code&gt; を与えられたUnixファイルディスクリプタ上）。</target>
        </trans-unit>
        <trans-unit id="b9e7e7483847182bf81440a5b48041aad821bf57" translate="yes" xml:space="preserve">
          <source>Suspend the execution of the calling thread until at least one character or EOF is available for reading (&lt;code&gt;wait_read&lt;/code&gt;) or one character can be written without blocking (&lt;code&gt;wait_write&lt;/code&gt;) on the given Unix file descriptor. Wait for at most the amount of time given as second argument (in seconds). Return &lt;code&gt;true&lt;/code&gt; if the file descriptor is ready for input/output and &lt;code&gt;false&lt;/code&gt; if the timeout expired.</source>
          <target state="translated">少なくとも一つの文字まで呼び出しスレッドの実行を中断またはEOFは（読んで利用可能です &lt;code&gt;wait_read&lt;/code&gt; （ブロックせずに書き込むことができます）、または1つの文字を &lt;code&gt;wait_write&lt;/code&gt; を与えられたUnixファイルディスクリプタ上）。最大で2番目の引数として指定された時間（秒単位）を待ちます。ファイル記述子が入出力の準備ができている場合は &lt;code&gt;true&lt;/code&gt; を返し、タイムアウトが経過した場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dd698dfe06d0932557c1eb650583aff1c0a8f274" translate="yes" xml:space="preserve">
          <source>Suspend the execution of the calling thread until input/output becomes possible on the given Unix file descriptors.</source>
          <target state="translated">与えられたUnixファイルディスクリプタ上で入出力が可能になるまで、呼び出したスレッドの実行を一時停止します。</target>
        </trans-unit>
        <trans-unit id="89b43cd2f521875a54a83bde786aa4892b785359" translate="yes" xml:space="preserve">
          <source>Suspend the execution of the calling thread until input/output becomes possible on the given Unix file descriptors. The arguments and results have the same meaning as for &lt;code&gt;Unix.select&lt;/code&gt;. This function is not implemented yet under Win32.</source>
          <target state="translated">指定されたUnixファイル記述子で入出力が可能になるまで、呼び出しスレッドの実行を一時停止します。引数と結果は、 &lt;code&gt;Unix.select&lt;/code&gt; の場合と同じ意味です。この関数は、Win32ではまだ実装されていません。</target>
        </trans-unit>
        <trans-unit id="c5ee688ede72fd80011cbf7bc6580d8f7239f6ae" translate="yes" xml:space="preserve">
          <source>Suspending threads</source>
          <target state="translated">糸のサスペンド</target>
        </trans-unit>
        <trans-unit id="6174b4bb3312bb6b8d643916247f5c5c92a0cf44" translate="yes" xml:space="preserve">
          <source>Suspicious unused variable: unused variable that is bound with let or as, and doesn&amp;rsquo;t start with an underscore (_) character.</source>
          <target state="translated">疑わしい未使用の変数：letまたはasでバインドされ、アンダースコア（_）文字で始まらない未使用の変数。</target>
        </trans-unit>
        <trans-unit id="11e58b2b3353eee96248693f8d563d3b5cd65b17" translate="yes" xml:space="preserve">
          <source>Suspicious-looking end-of-comment mark.</source>
          <target state="translated">怪しげな感じのエンドオブコメントマーク。</target>
        </trans-unit>
        <trans-unit id="ddf970710a96e309a4df7c47f666103b40de5ebd" translate="yes" xml:space="preserve">
          <source>Suspicious-looking start-of-comment mark.</source>
          <target state="translated">怪しげなスタートオブコメントマーク</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="cb92d9d71dc582fcaac304377564d4e993a5d6c9" translate="yes" xml:space="preserve">
          <source>Symbol binding</source>
          <target state="translated">シンボルバインディング</target>
        </trans-unit>
        <trans-unit id="8f08528b34287dbeb205e28df6f893eefe4bb6b5" translate="yes" xml:space="preserve">
          <source>Symbolic link</source>
          <target state="translated">シンボリックリンク</target>
        </trans-unit>
        <trans-unit id="1af7d6c34ea3d7825f1508a7baf71357f217a173" translate="yes" xml:space="preserve">
          <source>Symbolic links</source>
          <target state="translated">シンボリックリンク</target>
        </trans-unit>
        <trans-unit id="4bf49d12b0b857b45245352554b4248820e1c127" translate="yes" xml:space="preserve">
          <source>Symbolic pretty-printing</source>
          <target state="translated">シンボリック・プリティープリント</target>
        </trans-unit>
        <trans-unit id="0fcc57bd9e40ddf977219a1819544a0cbcd1da68" translate="yes" xml:space="preserve">
          <source>Symbolic pretty-printing is pretty-printing using a symbolic formatter, i.e. a formatter that outputs symbolic pretty-printing items.</source>
          <target state="translated">シンボリック・プリティプリンティングとは、シンボリック・フォーマッタ、すなわちシンボリック・プリティプリンティングの項目を出力するフォーマッタを使用してプリティプリンティングを行うことです。</target>
        </trans-unit>
        <trans-unit id="c30177fee17f9de0bfd94e899114fd091110383c" translate="yes" xml:space="preserve">
          <source>Symbols from the class &lt;a href=&quot;lex#infix-symbol&quot;&gt;infix-symbol&lt;/a&gt;, as well as the keywords *, +, -, -., =, !=, &amp;lt;, &amp;gt;, or, ||, &amp;amp;, &amp;amp;&amp;amp;, :=, mod, land, lor, lxor, lsl, lsr, and asr can appear in infix position (between two expressions). Symbols from the class &lt;a href=&quot;lex#prefix-symbol&quot;&gt;prefix-symbol&lt;/a&gt;, as well as the keywords - and -. can appear in prefix position (in front of an expression).</source>
          <target state="translated">クラス&lt;a href=&quot;lex#infix-symbol&quot;&gt;infix-symbolの記号&lt;/a&gt;、およびキーワード*、+、-、-。、=、！=、&amp;lt;、&amp;gt;、または、||、＆、&amp;amp;&amp;amp;、：=、mod、land、lor、lxor 、lsl、lsr、およびasrは、中置位置（2つの式の間）に表示できます。クラス&lt;a href=&quot;lex#prefix-symbol&quot;&gt;prefix-symbolの記号&lt;/a&gt;、およびキーワード-と-。プレフィックス位置（式の前）に表示できます。</target>
        </trans-unit>
        <trans-unit id="4b8e8468d047790eb587f1fdac4b8b2c2a97f950" translate="yes" xml:space="preserve">
          <source>Syntactically, building or matching constructors with such an inline record argument is similar to working with a unary constructor whose unique argument is a declared record type. A pattern can bind the inline record as a pseudo-value, but the record cannot escape the scope of the binding and can only be used with the dot-notation to extract or modify fields or to build new constructor values.</source>
          <target state="translated">構文的には、このようなインラインレコードの引数を持つコンストラクタを構築またはマッチングすることは、一意の引数が宣言されたレコード型である単項コンストラクタを使用するのと似ています。パターンはインラインレコードを擬似値としてバインドすることができますが、そのレコードはバインドの範囲から逃れることはできず、フィールドの抽出や変更、または新しいコンストラクタの値を構築するためにドット記法でのみ使用することができます。</target>
        </trans-unit>
        <trans-unit id="92a7a4f198e3ad53204452742e2bcd85c8b76c8e" translate="yes" xml:space="preserve">
          <source>Syntax of command lines: A keyword is a character string starting with a &lt;code&gt;-&lt;/code&gt;. An option is a keyword alone or followed by an argument. The types of keywords are: &lt;code&gt;Unit&lt;/code&gt;, &lt;code&gt;Bool&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, &lt;code&gt;Clear&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Set_string&lt;/code&gt;, &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Set_int&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Set_float&lt;/code&gt;, &lt;code&gt;Tuple&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;, and &lt;code&gt;Rest&lt;/code&gt;. &lt;code&gt;Unit&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Clear&lt;/code&gt; keywords take no argument. A &lt;code&gt;Rest&lt;/code&gt; keyword takes the remaining of the command line as arguments. Every other keyword takes the following word on the command line as argument. For compatibility with GNU getopt_long, &lt;code&gt;keyword=arg&lt;/code&gt; is also allowed. Arguments not preceded by a keyword are called anonymous arguments.</source>
          <target state="translated">コマンドラインの構文：キーワードは、 &lt;code&gt;-&lt;/code&gt; で始まる文字列です。オプションは、キーワードのみ、またはその後に引数が続きます。キーワードの種類は次のとおりです。 &lt;code&gt;Unit&lt;/code&gt; 、 &lt;code&gt;Bool&lt;/code&gt; 、 &lt;code&gt;Set&lt;/code&gt; 、 &lt;code&gt;Clear&lt;/code&gt; 、 &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Set_string&lt;/code&gt; 、 &lt;code&gt;Int&lt;/code&gt; 、 &lt;code&gt;Set_int&lt;/code&gt; 、 &lt;code&gt;Float&lt;/code&gt; 、 &lt;code&gt;Set_float&lt;/code&gt; 、 &lt;code&gt;Tuple&lt;/code&gt; 、 &lt;code&gt;Symbol&lt;/code&gt; 、および &lt;code&gt;Rest&lt;/code&gt; 。 &lt;code&gt;Unit&lt;/code&gt; 、 &lt;code&gt;Set&lt;/code&gt; 、および &lt;code&gt;Clear&lt;/code&gt; キーワードは引数を取りません。 A &lt;code&gt;Rest&lt;/code&gt; キーワードは、コマンドラインの残りの部分を引数として取ります。他のすべてのキーワードは、コマンドラインで次の単語を引数として取ります。GNU getopt_longとの互換性のために、 &lt;code&gt;keyword=arg&lt;/code&gt; も許可されています。キーワードが前に付いていない引数は、匿名引数と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="eea5f6535cf1464538bf913c29432e06b44c8a00" translate="yes" xml:space="preserve">
          <source>Sys</source>
          <target state="translated">Sys</target>
        </trans-unit>
        <trans-unit id="8f7a8d4494a0d458d18524d29c3ede9485be05c9" translate="yes" xml:space="preserve">
          <source>Sys.argv is an array of strings containing the command-line parameters. Sys.argv.(1) is thus the first command-line parameter. The program above is compiled and executed with the following shell commands:</source>
          <target state="translated">Sys.argv はコマンドラインパラメータを含む文字列の配列です。したがって、Sys.argv.(1)は最初のコマンドラインパラメータとなります。上記のプログラムをコンパイルし、以下のシェルコマンドで実行します。</target>
        </trans-unit>
        <trans-unit id="77b1ff317375845ec33475f1b5fb67e6cbb973f9" translate="yes" xml:space="preserve">
          <source>System interface.</source>
          <target state="translated">システムインターフェース。</target>
        </trans-unit>
        <trans-unit id="475b7fafddd719ea508a449badf45b0789ac88b8" translate="yes" xml:space="preserve">
          <source>System threads. This implementation builds on the OS-provided threads facilities: POSIX 1003.1c threads for Unix, and Win32 threads for Windows. When available, system threads support both bytecode and native-code programs.</source>
          <target state="translated">システムスレッド。この実装は OS が提供するスレッド機能をベースにしています。Unix では POSIX 1003.1c スレッド、Windows では Win32 スレッドです。利用可能な場合、システムスレッドはバイトコードとネイティブコードの両方のプログラムをサポートします。</target>
        </trans-unit>
        <trans-unit id="99901e02a798f32cd5219f56e51ca3215b2961b1" translate="yes" xml:space="preserve">
          <source>System time for the children processes</source>
          <target state="translated">子プロセスのシステム時間</target>
        </trans-unit>
        <trans-unit id="34a877dc56d7b6f22f1f4507a6f98d13c327981d" translate="yes" xml:space="preserve">
          <source>System time for the process</source>
          <target state="translated">プロセスのシステムタイム</target>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="translated">T</target>
        </trans-unit>
        <trans-unit id="b3db3af9a0e0243f28ed20fcc3b1d5d1faaafbb6" translate="yes" xml:space="preserve">
          <source>TERM</source>
          <target state="translated">TERM</target>
        </trans-unit>
        <trans-unit id="c068ca8b042bac0232c1a1485f2405cfa98b7a00" translate="yes" xml:space="preserve">
          <source>Table cache</source>
          <target state="translated">隠しテーブル</target>
        </trans-unit>
        <trans-unit id="88d5168e6958719b1f51075705e987c63433b18e" translate="yes" xml:space="preserve">
          <source>Tabulation boxes</source>
          <target state="translated">集計ボックス</target>
        </trans-unit>
        <trans-unit id="982963c1c41cbed8cab073724749592fe35c532b" translate="yes" xml:space="preserve">
          <source>Tag</source>
          <target state="translated">Tag</target>
        </trans-unit>
        <trans-unit id="70ebce0319098abe29a21e0fc7bf392fb3792b10" translate="yes" xml:space="preserve">
          <source>Tag specific operations occur any time a tag is opened or closed, At each occurrence, two kinds of operations are performed &lt;em&gt;tag-marking&lt;/em&gt; and &lt;em&gt;tag-printing&lt;/em&gt;:</source>
          <target state="translated">タグ固有の操作は、タグが開いたり閉じたりするたびに発生します。発生するたびに、タグ&lt;em&gt;マーキング&lt;/em&gt;と&lt;em&gt;タグ印刷の&lt;/em&gt;2種類の操作が実行され&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="21049d0d0e09867c94c7bfdcd7af965832440243" translate="yes" xml:space="preserve">
          <source>Tag-marking a semantic tag means calling the formatter specific function &lt;code&gt;mark_open_stag&lt;/code&gt; (resp. &lt;code&gt;mark_close_stag&lt;/code&gt;) with the name of the tag as argument: that tag-marking function can then return the 'tag-opening marker' (resp. `tag-closing marker') for direct output into the output device of the formatter.</source>
          <target state="translated">セマンティックタグのタグマーキングとは、タグの名前を引数としてフォーマッター固有の関数 &lt;code&gt;mark_open_stag&lt;/code&gt; （ &lt;code&gt;mark_close_stag&lt;/code&gt; ）を呼び出すことを意味します。そのタグマーキング関数は、「タグ開始マーカー」（または「タグ終了マーカー」）を返すことができます。 '）フォーマッタの出力デバイスに直接出力する場合。</target>
        </trans-unit>
        <trans-unit id="d0850e7bae659968c87fcd011c8098d48caf5ca1" translate="yes" xml:space="preserve">
          <source>Tag-marking and tag-printing functions are user definable and can be set by calling &lt;a href=&quot;format#VALset_formatter_stag_functions&quot;&gt;&lt;code&gt;Format.set_formatter_stag_functions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">タグマーキングおよびタグ印刷関数はユーザー定義可能であり、&lt;a href=&quot;format#VALset_formatter_stag_functions&quot;&gt; &lt;code&gt;Format.set_formatter_stag_functions&lt;/code&gt; &lt;/a&gt;を呼び出すことで設定できます。</target>
        </trans-unit>
        <trans-unit id="f087082b531d3d70af061b2f9983efc04fdab93a" translate="yes" xml:space="preserve">
          <source>Tag-printing a semantic tag means calling the formatter specific function &lt;code&gt;print_open_stag&lt;/code&gt; (resp. &lt;code&gt;print_close_stag&lt;/code&gt;) with the name of the tag as argument: that tag-printing function can then print any regular material to the formatter (so that this material is enqueued as usual in the formatter queue for further line splitting computation).</source>
          <target state="translated">セマンティックタグのタグ印刷とは、タグの名前を引数としてフォーマッター固有の関数 &lt;code&gt;print_open_stag&lt;/code&gt; （ &lt;code&gt;print_close_stag&lt;/code&gt; ）を呼び出すことを意味します。このタグ印刷関数は、通常の資料をフォーマッターに印刷できます（この資料は通常どおりキューに入れられます）。さらに行分割計算のためにフォーマッタキューに入れます）。</target>
        </trans-unit>
        <trans-unit id="3d968d48d29a395bb82a38da27ee9373279edc48" translate="yes" xml:space="preserve">
          <source>Tag_val(v) returns the tag of the block v.</source>
          <target state="translated">Tag_val(v)は、ブロック v のタグを返します。</target>
        </trans-unit>
        <trans-unit id="69680e9274247feaf41570c80b33d43c4f2d8bcd" translate="yes" xml:space="preserve">
          <source>Take one of the symbols as argument and call the function with the symbol</source>
          <target state="translated">いずれかのシンボルを引数にとり、シンボルを指定して関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="9d6b053ba3ae57bbab0f9ae23dd3906806ecb54b" translate="yes" xml:space="preserve">
          <source>Take several arguments according to the spec list</source>
          <target state="translated">スペックリストにしたがって、いくつかの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="10762317d708b72b78e81e7071b82e94c42de1fc" translate="yes" xml:space="preserve">
          <source>Tangent.</source>
          <target state="translated">Tangent.</target>
        </trans-unit>
        <trans-unit id="780ae66c320e72eed30e1ed6d7739b9ecffb29da" translate="yes" xml:space="preserve">
          <source>Tangent. Argument is in radians.</source>
          <target state="translated">タンジェント。引数はラジアン単位。</target>
        </trans-unit>
        <trans-unit id="8038dd5c0175f8f3d04e597ad2fbb9eac4f72a1c" translate="yes" xml:space="preserve">
          <source>Target ratio of floating garbage to major heap size for out-of-heap memory held by custom values located in the major heap. The GC speed is adjusted to try to use this much memory for dead values that are not yet collected. Expressed as a percentage of major heap size. The default value keeps the out-of-heap floating garbage about the same size as the in-heap overhead. Note: this only applies to values allocated with &lt;code&gt;caml_alloc_custom_mem&lt;/code&gt; (e.g. bigarrays). Default: 44.</source>
          <target state="translated">メジャーヒープにあるカスタム値によって保持されているヒープ外メモリの、フローティングガベージとメジャーヒープサイズの目標比率。GC速度は、まだ収集されていないデッド値に対してこれだけのメモリを使用しようとするように調整されます。メジャーヒープサイズのパーセンテージとして表されます。デフォルト値は、ヒープ外のフローティングガベージをヒープ内のオーバーヘッドとほぼ同じサイズに保ちます。注：これは、 &lt;code&gt;caml_alloc_custom_mem&lt;/code&gt; で割り当てられた値（bigarrayなど）にのみ適用されます。デフォルト：44。</target>
        </trans-unit>
        <trans-unit id="2fe258cc46692204a632aee373f4075f030d57a7" translate="yes" xml:space="preserve">
          <source>Tell the debugger it is executed under Emacs. (See section &lt;a href=&quot;#s%3Ainf-debugger&quot;&gt;17.10&lt;/a&gt; for information on how to run the debugger under Emacs.)</source>
          <target state="translated">Emacsで実行されることをデバッガーに伝えます。（Emacsでデバッガーを実行する方法については、セクション&lt;a href=&quot;#s%3Ainf-debugger&quot;&gt;17.10&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="19b9145b33f4838c5f3973e7a6ea5d0f05c03b03" translate="yes" xml:space="preserve">
          <source>Tell whether the lexer buffer keeps track of position fields &lt;code&gt;lex_curr_p&lt;/code&gt; / &lt;code&gt;lex_start_p&lt;/code&gt;, as determined by the corresponding optional argument for functions that create lexer buffers (whose default value is &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">レクサーバッファーを作成する関数（デフォルト値が &lt;code&gt;true&lt;/code&gt; ）の対応するオプションの引数によって決定されるように、レクサーバッファーが位置フィールド &lt;code&gt;lex_curr_p&lt;/code&gt; / &lt;code&gt;lex_start_p&lt;/code&gt; を追跡するかどうかを通知します。</target>
        </trans-unit>
        <trans-unit id="d7cd37004c27ae67bd613fe7aaf8dda4c2d384cf" translate="yes" xml:space="preserve">
          <source>Terminal interface</source>
          <target state="translated">ターミナルインタフェース</target>
        </trans-unit>
        <trans-unit id="df7e4a1d29e38609effa51863fd181383dbf7780" translate="yes" xml:space="preserve">
          <source>Terminal read from background process</source>
          <target state="translated">バックグラウンドプロセスから端末を読み取る</target>
        </trans-unit>
        <trans-unit id="69f382ea876bbdcbdd4d90e629da7780e4617313" translate="yes" xml:space="preserve">
          <source>Terminal write from background process</source>
          <target state="translated">バックグラウンドプロセスからの端末書き込み</target>
        </trans-unit>
        <trans-unit id="4813943164d0564fe70ad323f19653347b352115" translate="yes" xml:space="preserve">
          <source>Terminate prematurely the currently executing thread.</source>
          <target state="translated">現在実行中のスレッドを早期に終了させます。</target>
        </trans-unit>
        <trans-unit id="56b1260afe50cb577a901efc314311be666089c4" translate="yes" xml:space="preserve">
          <source>Terminate prematurely the thread whose handle is given.</source>
          <target state="translated">ハンドルが与えられたスレッドを早々に終了させます。</target>
        </trans-unit>
        <trans-unit id="26070bd7d4995159490297bd3d133957b3f011a9" translate="yes" xml:space="preserve">
          <source>Terminate the process, returning the given status code to the operating system: usually 0 to indicate no errors, and a small positive integer to indicate failure.</source>
          <target state="translated">プロセスを終了し、与えられたステータスコードをオペレーティングシステムに返します:通常、エラーがないことを示すために0を、失敗を示すために小さな正の整数を返します。</target>
        </trans-unit>
        <trans-unit id="0574c95a3a93d600e83a6f17eb926a568c0f9796" translate="yes" xml:space="preserve">
          <source>Terminate the process, returning the given status code to the operating system: usually 0 to indicate no errors, and a small positive integer to indicate failure. All open output channels are flushed with &lt;code&gt;flush_all&lt;/code&gt;. An implicit &lt;code&gt;exit&amp;nbsp;0&lt;/code&gt; is performed each time a program terminates normally. An implicit &lt;code&gt;exit&amp;nbsp;2&lt;/code&gt; is performed if the program terminates early because of an uncaught exception.</source>
          <target state="translated">プロセスを終了し、指定されたステータスコードをオペレーティングシステムに返します。通常は0はエラーがないことを示し、小さな正の整数は失敗を示します。開いているすべての出力チャネルは、 &lt;code&gt;flush_all&lt;/code&gt; でフラッシュされます。プログラムが正常に終了するたびに、暗黙の &lt;code&gt;exit&amp;nbsp;0&lt;/code&gt; が実行されます。キャッチされない例外が原因でプログラムが早期に終了した場合、暗黙の &lt;code&gt;exit&amp;nbsp;2&lt;/code&gt; が実行されます。</target>
        </trans-unit>
        <trans-unit id="2ee85218866a19e0d9f6c52c176e4eaf9d0877b2" translate="yes" xml:space="preserve">
          <source>Termination</source>
          <target state="translated">Termination</target>
        </trans-unit>
        <trans-unit id="158a94f8a2ff46fde496827d38e93851db51f5cc" translate="yes" xml:space="preserve">
          <source>Termination (cannot be ignored)</source>
          <target state="translated">終了(無視できない</target>
        </trans-unit>
        <trans-unit id="bb7a1f1e99b2c211113bd77cc5e7ef277a13ed74" translate="yes" xml:space="preserve">
          <source>Test &amp;ldquo;greater than or equal&amp;rdquo;.</source>
          <target state="translated">「以上」をテストします。</target>
        </trans-unit>
        <trans-unit id="cf55a085e33342b3081a9dd990d9070f808b5872" translate="yes" xml:space="preserve">
          <source>Test &amp;ldquo;greater than&amp;rdquo;.</source>
          <target state="translated">「より大きい」をテストします。</target>
        </trans-unit>
        <trans-unit id="8c0f5c5dfaba7d5a348d0be90ebda99ec96925bd" translate="yes" xml:space="preserve">
          <source>Test &amp;ldquo;less than or equal&amp;rdquo;.</source>
          <target state="translated">「以下」をテストします。</target>
        </trans-unit>
        <trans-unit id="9023e669869c2a8e4df262bd37b076a1baa1f732" translate="yes" xml:space="preserve">
          <source>Test &amp;ldquo;less than&amp;rdquo;.</source>
          <target state="translated">「未満」をテストします。</target>
        </trans-unit>
        <trans-unit id="4da88b01def945bdf24685deea788a8bc6d1da26" translate="yes" xml:space="preserve">
          <source>Test a region for other process locks</source>
          <target state="translated">他のプロセスロックがないかリージョンをテストする</target>
        </trans-unit>
        <trans-unit id="1787fedd7d2ced2ae48a3c3ae605449bb9a29103" translate="yes" xml:space="preserve">
          <source>Test if a file with the given name exists.</source>
          <target state="translated">指定した名前のファイルが存在するかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="b5d1af12b9f30270fd2ed2ad3dee29830b903b74" translate="yes" xml:space="preserve">
          <source>Test if two sets are disjoint.</source>
          <target state="translated">2つの集合が不連続であるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="e1ac6c65bc9783f51306843b3f179afc02bc939b" translate="yes" xml:space="preserve">
          <source>Test whether a map is empty or not.</source>
          <target state="translated">マップが空かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="9521be20f61e3370ee61a403fa6f607a9a6420ea" translate="yes" xml:space="preserve">
          <source>Test whether a set is empty or not.</source>
          <target state="translated">セットが空かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="862bb20b2924b0e1bad9177d10a2c297215a311c" translate="yes" xml:space="preserve">
          <source>Tests if the maximum number of pretty-printing boxes allowed have already been opened.</source>
          <target state="translated">許可されている最大数のきれいな印刷ボックスがすでに開かれているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="d4721ae7197912536ec105c3ffe10fe5fe1d70fa" translate="yes" xml:space="preserve">
          <source>That is, the fun expression above evaluates to a curried function with n arguments: after applying this function n times to the values v&lt;sub&gt;1&lt;/sub&gt; &amp;hellip; v&lt;sub&gt;n&lt;/sub&gt;, the values will be matched in parallel against the patterns &lt;a href=&quot;patterns#pattern&quot;&gt;pattern&lt;/a&gt;&lt;sub&gt;1&lt;/sub&gt; &amp;hellip; &lt;a href=&quot;patterns#pattern&quot;&gt;pattern&lt;/a&gt;&lt;sub&gt;n&lt;/sub&gt;. If the matching succeeds, the function returns the value of &lt;a href=&quot;#expr&quot;&gt;expr&lt;/a&gt; in an environment enriched by the bindings performed during the matchings. If the matching fails, the exception Match_failure is raised.</source>
          <target state="translated">すなわち、n個の引数を持つカリー化関数に評価上記楽しい式は：値にこの関数をn回適用した後は、V &lt;sub&gt;1&lt;/sub&gt; ... V &lt;sub&gt;nは&lt;/sub&gt;、値がパターンに対して平行にマッチする&lt;a href=&quot;patterns#pattern&quot;&gt;パターン&lt;/a&gt;&lt;sub&gt;1&lt;/sub&gt; ...&lt;a href=&quot;patterns#pattern&quot;&gt;パターン&lt;/a&gt;&lt;sub&gt;N&lt;/sub&gt;。マッチングが成功した場合、関数は、マッチング中に実行されたバインディングによって強化された環境で&lt;a href=&quot;#expr&quot;&gt;expr&lt;/a&gt;の値を返します。マッチングが失敗した場合、例外Match_failureが発生します。</target>
        </trans-unit>
        <trans-unit id="bb5dc7fe2f26372eda5226bac4a48e313d4e2b62" translate="yes" xml:space="preserve">
          <source>That is, to define a new generator, one must implement a module with the expected signature, and with the given generator class, providing the generate method as entry point to make the generator generates documentation for a given list of modules :</source>
          <target state="translated">つまり、新しいジェネレータを定義するために、1つは、期待されるシグネチャを持つモジュールを実装する必要があり、与えられたジェネレータクラスで、ジェネレータは、モジュールの与えられたリストのドキュメントを生成するためのエントリポイントとしてgenerateメソッドを提供しています .</target>
        </trans-unit>
        <trans-unit id="7ed38f27c94cab8c8d12304ae06126526d04b8bb" translate="yes" xml:space="preserve">
          <source>The (type&lt;a href=&quot;names#typeconstr-name&quot;&gt;typeconstr-name&lt;/a&gt;) syntax construction by itself does not make polymorphic the type variable it introduces, but it can be combined with explicit polymorphic annotations where needed. The above rule is provided as syntactic sugar to make this easier:</source>
          <target state="translated">（type &lt;a href=&quot;names#typeconstr-name&quot;&gt;typeconstr-name&lt;/a&gt;）構文の構築自体は、ポリモーフィックを導入するタイプ変数にしませんが、必要に応じて明示的なポリモーフィックアノテーションと組み合わせることができます。上記のルールは、これを簡単にするための構文糖衣として提供されています。</target>
        </trans-unit>
        <trans-unit id="c4991a041e774dadbe4b581939be63f5a7cbe4ea" translate="yes" xml:space="preserve">
          <source>The -no-stop option to ocamldoc causes the Stop special comments to be ignored.</source>
          <target state="translated">ocamldocに-no-stopオプションを付けると、Stop特殊コメントが無視されます。</target>
        </trans-unit>
        <trans-unit id="3147fca5c37d9a1563cc013c628673b530b03e57" translate="yes" xml:space="preserve">
          <source>The -opaque option, available since 4.04, disables cross-module optimization information for the currently compiled unit. When compiling .mli interface, using -opaque marks the compiled .cmi interface so that subsequent compilations of modules that depend on it will not rely on the corresponding .cmx file, nor warn if it is absent. When the native compiler compiles a .ml implementation, using -opaque generates a .cmx that does not contain any cross-module optimization information.</source>
          <target state="translated">4.04 以降で利用可能な -opaque オプションは、現在コンパイルされているユニットのクロスモジュール最適化情報を無効にします。.mli インターフェースをコンパイルする際に -opaque を使用すると、コンパイルされた .cmi インターフェースをマークします。これにより、それに依存するモジュールの後続のコンパイルが、対応する .cmx ファイルに依存しないようにしたり、それがない場合に警告を表示したりします。ネイティブコンパイラが .ml の実装をコンパイルする場合、-opaque を使用すると、モジュール間の最適化情報を含まない .cmx が生成されます。</target>
        </trans-unit>
        <trans-unit id="564904d19df6fc8011ad3d2bee2ea1a4e77ad2e7" translate="yes" xml:space="preserve">
          <source>The -output-obj option can also be used to obtain the C source file. More interestingly, the same option can also produce directly a shared library (.so file, .dll under Windows) that contains the OCaml code, the OCaml runtime system and any other static C code given to ocamlc (.o, .a, respectively, .obj, .lib). This use of -output-obj is very similar to a normal linking step, but instead of producing a main program that automatically runs the OCaml code, it produces a shared library that can run the OCaml code on demand. The three possible behaviors of -output-obj are selected according to the extension of the resulting file (given with -o).</source>
          <target state="translated">output-objオプションはCのソースファイルを取得するためにも使用できます。さらに興味深いことに、同じオプションは、OCamlコード、OCamlランタイムシステム、およびOCamlcに与えられたその他の静的なCコードを含む共有ライブラリ(.soファイル、Windowsでは.dll)を直接生成することもできます(.o、.a、それぞれ.obj、.lib)。この-output-objの使用は、通常のリンクステップに非常に似ていますが、OCamlコードを自動的に実行するメインプログラムを生成する代わりに、要求に応じてOCamlコードを実行できる共有ライブラリを生成します。output-objの3つの可能な動作は、結果として得られるファイルの拡張子(-oで与えられる)に応じて選択されます。</target>
        </trans-unit>
        <trans-unit id="3b36f21e3b344b1468a19dcfe1a7ba5421f00dae" translate="yes" xml:space="preserve">
          <source>The -unbox-closures-factor command line flag, which takes an integer, may be used to adjust the point at which a function is deemed large enough to be ineligible for duplication. The benefit of duplication is scaled by the integer before being evaluated against the size.</source>
          <target state="translated">unbox-closures-factorコマンドラインフラグは整数を受け取り、関数が複製に不適格なほど大きいとみなされるポイントを調整するために使用することができます。複製の利点は、サイズに対して評価される前に整数でスケーリングされます。</target>
        </trans-unit>
        <trans-unit id="a2209f3894b8163766592d29f0ebe68de13e2bfb" translate="yes" xml:space="preserve">
          <source>The .cmi and .cmo files produced by the compiler have the same base name as the source file. Hence, the compiled files always have their base name equal (modulo capitalization of the first letter) to the name of the module they describe (for .cmi files) or implement (for .cmo files).</source>
          <target state="translated">コンパイラによって生成される .cmi および .cmo ファイルは、ソースファイルと同じベース名を持ちます。そのため、コンパイルされたファイルのベース名は常に(最初の文字を大文字にして)記述されたモジュールの名前(.cmi ファイルの場合)または実装されたモジュールの名前(.cmo ファイルの場合)と同じです。</target>
        </trans-unit>
        <trans-unit id="b721260b32a59d156249128e83aba8efd5e1aba3" translate="yes" xml:space="preserve">
          <source>The .cmx object files being combined must have been compiled with the appropriate -for-pack option. In the example above, A.cmx, B.cmx and C.cmx must have been compiled with ocamlopt -for-pack P.</source>
          <target state="translated">結合される .cmx オブジェクトファイルは、適切な -for-pack オプションでコンパイルされていなければなりません。上の例では、A.cmx、B.cmx、C.cmx は ocamlopt -for-pack P でコンパイルされていなければなりません。</target>
        </trans-unit>
        <trans-unit id="19cf8b2f632836f4f34c4d1b723f6f2c4408241e" translate="yes" xml:space="preserve">
          <source>The 32-bit integer -1.</source>
          <target state="translated">32ビットの整数-1。</target>
        </trans-unit>
        <trans-unit id="25bfbe3425f7612c84c4a60433757b0cd2caa725" translate="yes" xml:space="preserve">
          <source>The 32-bit integer 0.</source>
          <target state="translated">32ビット整数の0。</target>
        </trans-unit>
        <trans-unit id="adf5ef41fc3f6cfaf4d8f1db7abf1ec88c03da49" translate="yes" xml:space="preserve">
          <source>The 32-bit integer 1.</source>
          <target state="translated">32ビットの整数1。</target>
        </trans-unit>
        <trans-unit id="006eed8987b86bde9c7f054166d4c4843fab6c03" translate="yes" xml:space="preserve">
          <source>The 64-bit integer -1.</source>
          <target state="translated">64ビットの整数-1。</target>
        </trans-unit>
        <trans-unit id="157479d5f01ffa68d3fe29e3a78c6d437b79bcf0" translate="yes" xml:space="preserve">
          <source>The 64-bit integer 0.</source>
          <target state="translated">64ビットの整数0。</target>
        </trans-unit>
        <trans-unit id="629c9977446445c9cf7c1aa59f2924bbe702fd82" translate="yes" xml:space="preserve">
          <source>The 64-bit integer 1.</source>
          <target state="translated">64ビットの整数1。</target>
        </trans-unit>
        <trans-unit id="6b95251b3f2b1a3e28a4b746eb2d6fd549aedfc0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#package-type&quot;&gt;package-type&lt;/a&gt; syntactic class appearing in the (module&lt;a href=&quot;#package-type&quot;&gt;package-type&lt;/a&gt;) type expression and in the annotated forms represents a subset of module types. This subset consists of named module types with optional constraints of a limited form: only non-parametrized types can be specified.</source>
          <target state="translated">&lt;a href=&quot;#package-type&quot;&gt;パッケージ型&lt;/a&gt;（モジュールに現れる構文クラス&lt;a href=&quot;#package-type&quot;&gt;パッケージ型&lt;/a&gt;）型の発現と注釈付きの形態では、モジュールタイプのサブセットを表します。このサブセットは、制限された形式のオプションの制約を持つ名前付きモジュールタイプで構成されます。パラメータ化されていないタイプのみを指定できます。</target>
        </trans-unit>
        <trans-unit id="6682753740053ec4013bd76f06934bf2221ce480" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#text&quot;&gt;text&lt;/a&gt; should describe when the element was deprecated, what to use as a replacement, and possibly the reason for deprecation.</source>
          <target state="translated">&lt;a href=&quot;#text&quot;&gt;テキストは、&lt;/a&gt;要素は廃止されたときの交換、そしておそらく廃止の理由として使用するものを、記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="cde17ed2d9a66d67e67d6fe2b53d455fb37fc839" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;set.make&quot;&gt;&lt;code&gt;Set.Make&lt;/code&gt;&lt;/a&gt; functor constructs implementations for any type, given a &lt;code&gt;compare&lt;/code&gt; function. For instance:</source>
          <target state="translated">&lt;a href=&quot;set.make&quot;&gt; &lt;code&gt;Set.Make&lt;/code&gt; の&lt;/a&gt;ファンクタは、与えられた、任意のタイプの実装を構築する &lt;code&gt;compare&lt;/code&gt; 機能。例えば：</target>
        </trans-unit>
        <trans-unit id="a4ed2561f30b1f4e9552cc537f7755aeeba34c0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;0u&lt;/code&gt; prefix reads the input as an unsigned integer in the range &lt;code&gt;[0,&amp;nbsp;2*Int32.max_int+1]&lt;/code&gt;. If the input exceeds &lt;a href=&quot;int32#VALmax_int&quot;&gt;&lt;code&gt;Int32.max_int&lt;/code&gt;&lt;/a&gt; it is converted to the signed integer &lt;code&gt;Int32.min_int&amp;nbsp;+&amp;nbsp;input&amp;nbsp;-&amp;nbsp;Int32.max_int&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0u&lt;/code&gt; プレフィックスが範囲の符号なし整数として入力を読み取り &lt;code&gt;[0,&amp;nbsp;2*Int32.max_int+1]&lt;/code&gt; 。入力が&lt;a href=&quot;int32#VALmax_int&quot;&gt; &lt;code&gt;Int32.max_int&lt;/code&gt; &lt;/a&gt;を超えると、符号付き整数 &lt;code&gt;Int32.min_int&amp;nbsp;+&amp;nbsp;input&amp;nbsp;-&amp;nbsp;Int32.max_int&amp;nbsp;-&amp;nbsp;1&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="23dffe6eb51ba2abaa4cfa566ea1b02078814e57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;0u&lt;/code&gt; prefix reads the input as an unsigned integer in the range &lt;code&gt;[0,&amp;nbsp;2*Int64.max_int+1]&lt;/code&gt;. If the input exceeds &lt;a href=&quot;int64#VALmax_int&quot;&gt;&lt;code&gt;Int64.max_int&lt;/code&gt;&lt;/a&gt; it is converted to the signed integer &lt;code&gt;Int64.min_int&amp;nbsp;+&amp;nbsp;input&amp;nbsp;-&amp;nbsp;Int64.max_int&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0u&lt;/code&gt; プレフィックスが範囲の符号なし整数として入力を読み取り &lt;code&gt;[0,&amp;nbsp;2*Int64.max_int+1]&lt;/code&gt; 。入力が&lt;a href=&quot;int64#VALmax_int&quot;&gt; &lt;code&gt;Int64.max_int&lt;/code&gt; &lt;/a&gt;を超えると、符号付き整数 &lt;code&gt;Int64.min_int&amp;nbsp;+&amp;nbsp;input&amp;nbsp;-&amp;nbsp;Int64.max_int&amp;nbsp;-&amp;nbsp;1&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="2bdf559646ed66e4c76c9311859fb36ebd722036" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;0u&lt;/code&gt; prefix reads the input as an unsigned integer in the range &lt;code&gt;[0,&amp;nbsp;2*Nativeint.max_int+1]&lt;/code&gt;. If the input exceeds &lt;a href=&quot;nativeint#VALmax_int&quot;&gt;&lt;code&gt;Nativeint.max_int&lt;/code&gt;&lt;/a&gt; it is converted to the signed integer &lt;code&gt;Int64.min_int&amp;nbsp;+&amp;nbsp;input&amp;nbsp;-&amp;nbsp;Nativeint.max_int&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0u&lt;/code&gt; プレフィックスが範囲の符号なし整数として入力を読み取り &lt;code&gt;[0,&amp;nbsp;2*Nativeint.max_int+1]&lt;/code&gt; 。入力が&lt;a href=&quot;nativeint#VALmax_int&quot;&gt; &lt;code&gt;Nativeint.max_int&lt;/code&gt; &lt;/a&gt;を超える場合、符号付き整数 &lt;code&gt;Int64.min_int&amp;nbsp;+&amp;nbsp;input&amp;nbsp;-&amp;nbsp;Nativeint.max_int&amp;nbsp;-&amp;nbsp;1&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="3d37cd54b36382c9e5496e2092f5aaa8dc45ad01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;0u&lt;/code&gt; prefix reads the input as an unsigned integer in the range &lt;code&gt;[0,&amp;nbsp;2*max_int+1]&lt;/code&gt;. If the input exceeds &lt;a href=&quot;stdlib#VALmax_int&quot;&gt;&lt;code&gt;max_int&lt;/code&gt;&lt;/a&gt; it is converted to the signed integer &lt;code&gt;min_int&amp;nbsp;+&amp;nbsp;input&amp;nbsp;-&amp;nbsp;max_int&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0u&lt;/code&gt; プレフィックスが範囲の符号なし整数として入力を読み取り &lt;code&gt;[0,&amp;nbsp;2*max_int+1]&lt;/code&gt; 。入力が&lt;a href=&quot;stdlib#VALmax_int&quot;&gt; &lt;code&gt;max_int&lt;/code&gt; &lt;/a&gt;を超えると、符号付き整数 &lt;code&gt;min_int&amp;nbsp;+&amp;nbsp;input&amp;nbsp;-&amp;nbsp;max_int&amp;nbsp;-&amp;nbsp;1&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="61b166f6086faf0c742754df16fab62941896c59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Exit&lt;/code&gt; exception is not raised by any library function.</source>
          <target state="translated">&lt;code&gt;Exit&lt;/code&gt; 例外は任意のライブラリ関数によって提起されていません。</target>
        </trans-unit>
        <trans-unit id="618dcafc239b4a1cd930e5a52c4ba8ab644cc7e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Exit&lt;/code&gt; exception is not raised by any library function. It is provided for use in your programs.</source>
          <target state="translated">&lt;code&gt;Exit&lt;/code&gt; 例外は任意のライブラリ関数によって提起されていません。プログラムで使用するために提供されています。</target>
        </trans-unit>
        <trans-unit id="54bcc8ec2f507902da16600415bbcb8e20ed4f95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;F_LOCK&lt;/code&gt; and &lt;code&gt;F_TLOCK&lt;/code&gt; commands attempts to put a write lock on the specified region. The &lt;code&gt;F_RLOCK&lt;/code&gt; and &lt;code&gt;F_TRLOCK&lt;/code&gt; commands attempts to put a read lock on the specified region. If one or several locks put by another process prevent the current process from acquiring the lock, &lt;code&gt;F_LOCK&lt;/code&gt; and &lt;code&gt;F_RLOCK&lt;/code&gt; block until these locks are removed, while &lt;code&gt;F_TLOCK&lt;/code&gt; and &lt;code&gt;F_TRLOCK&lt;/code&gt; fail immediately with an exception. The &lt;code&gt;F_ULOCK&lt;/code&gt; removes whatever locks the current process has on the specified region. Finally, the &lt;code&gt;F_TEST&lt;/code&gt; command tests whether a write lock can be acquired on the specified region, without actually putting a lock. It returns immediately if successful, or fails otherwise.</source>
          <target state="translated">&lt;code&gt;F_LOCK&lt;/code&gt; と &lt;code&gt;F_TLOCK&lt;/code&gt; コマンドの試みは、指定された領域に書き込みロックを配置します。 &lt;code&gt;F_RLOCK&lt;/code&gt; と &lt;code&gt;F_TRLOCK&lt;/code&gt; は、指定された領域の上に読み取りロックを配置する試みを指令します。別のプロセスによって設定された1つまたは複数のロックにより、現在のプロセスがロックを取得できない場合、 &lt;code&gt;F_LOCK&lt;/code&gt; および &lt;code&gt;F_RLOCK&lt;/code&gt; はこれらのロックが解除されるまでブロックされますが、 &lt;code&gt;F_TLOCK&lt;/code&gt; および &lt;code&gt;F_TRLOCK&lt;/code&gt; は例外を除いてすぐに失敗します。 &lt;code&gt;F_ULOCK&lt;/code&gt; の現在のプロセスが指定した領域の上に持ってロック何でも削除します。最後に、 &lt;code&gt;F_TEST&lt;/code&gt; コマンドは、実際にロックをかけることなく、指定された領域で書き込みロックを取得できるかどうかをテストします。成功した場合はすぐに戻り、そうでない場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="38136ee726cf908eb5522e7345bd976551936ebd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Format&lt;/code&gt; module is versatile enough to let you completely redefine the meaning of pretty-printing output: you may provide your own functions to define how to handle indentation, line splitting, and even printing of all the characters that have to be printed!</source>
          <target state="translated">&lt;code&gt;Format&lt;/code&gt; モジュールは、あなたが完全にきれい-印刷出力の意味を再定義できるように汎用性は十分です：あなたは、インデント、行分割、さらには印刷する必要があるすべての文字の印刷を処理する方法を定義するために、独自の機能を提供することができます！</target>
        </trans-unit>
        <trans-unit id="68315cad3ec5fa750806e2fcfa1b99271143dfe3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_&lt;/code&gt; (underscore) character can appear anywhere in the string and is ignored.</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt; （アンダースコア）文字はどこにでも文字列で表示されたり、無視されます。</target>
        </trans-unit>
        <trans-unit id="0dcf95ffbbacb39e9db9049899df2d9baf6d087f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cloexec&lt;/code&gt; optional arguments and the &lt;code&gt;O_KEEPEXEC&lt;/code&gt; flag were introduced in OCaml 4.05. Earlier, the common practice was to create file descriptors in the default, ``keep-on-exec'' mode, then call &lt;code&gt;set_close_on_exec&lt;/code&gt; on those freshly-created file descriptors. This is not as safe as creating the file descriptor in ``close-on-exec'' mode because, in multithreaded programs, a window of vulnerability exists between the time when the file descriptor is created and the time &lt;code&gt;set_close_on_exec&lt;/code&gt; completes. If another thread spawns another program during this window, the descriptor will leak, as it is still in the ``keep-on-exec'' mode.</source>
          <target state="translated">&lt;code&gt;cloexec&lt;/code&gt; オプションの引数と &lt;code&gt;O_KEEPEXEC&lt;/code&gt; フラグはOCamlの4.05で導入されました。以前の一般的な方法は、デフォルトの「keep-on-exec」モードでファイル記述子を作成してから、新しく作成したファイル記述子に対して &lt;code&gt;set_close_on_exec&lt;/code&gt; を呼び出すことでした。マルチスレッドプログラムでは、ファイル記述子が作成されてから &lt;code&gt;set_close_on_exec&lt;/code&gt; が完了するまでの間に脆弱性のウィンドウが存在するため、これは「close-on-exec」モードでファイル記述子を作成するほど安全ではありません。このウィンドウ中に別のスレッドが別のプログラムを生成すると、記述子はまだ「keep-on-exec」モードであるため、リークします。</target>
        </trans-unit>
        <trans-unit id="1eb7c114770073f6910d08925899aa9381142883" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compare&lt;/code&gt; function can be used as the comparison function required by the &lt;a href=&quot;set.make&quot;&gt;&lt;code&gt;Set.Make&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;map.make&quot;&gt;&lt;code&gt;Map.Make&lt;/code&gt;&lt;/a&gt; functors, as well as the &lt;a href=&quot;list#VALsort&quot;&gt;&lt;code&gt;List.sort&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;array#VALsort&quot;&gt;&lt;code&gt;Array.sort&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">&lt;code&gt;compare&lt;/code&gt; 関数は、によって必要とされる比較関数として使用することができる&lt;a href=&quot;set.make&quot;&gt; &lt;code&gt;Set.Make&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;map.make&quot;&gt; &lt;code&gt;Map.Make&lt;/code&gt; &lt;/a&gt;ファンクタ、ならびに&lt;a href=&quot;list#VALsort&quot;&gt; &lt;code&gt;List.sort&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;array#VALsort&quot;&gt; &lt;code&gt;Array.sort&lt;/code&gt; &lt;/a&gt;機能します。</target>
        </trans-unit>
        <trans-unit id="9e2d6e8ecc1f534250d3b0fe9ad0f7fcb8f3fbb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equal&lt;/code&gt; relation must be able to work on a shallow copy of the values and give the same result as with the values themselves.</source>
          <target state="translated">&lt;code&gt;equal&lt;/code&gt; 関係は、値の浅いコピーで作業し、値そのものと同じ結果を与えることができなければなりません。</target>
        </trans-unit>
        <trans-unit id="42475c29a84bb6547470710fd8e643615f2c721d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;f&lt;/code&gt; function can use all features of OCaml, including assignments that make the value reachable again. It can also loop forever (in this case, the other finalisation functions will not be called during the execution of f, unless it calls &lt;code&gt;finalise_release&lt;/code&gt;). It can call &lt;code&gt;finalise&lt;/code&gt; on &lt;code&gt;v&lt;/code&gt; or other values to register other functions or even itself. It can raise an exception; in this case the exception will interrupt whatever the program was doing when the function was called.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 機能は再び値到達を作る割り当てを含む、OCamlでのすべての機能を使用することができます。また、永久ループすることもあります（この場合、 &lt;code&gt;finalise_release&lt;/code&gt; を呼び出さない限り、fの実行中に他のファイナライズ関数は呼び出されません）。それは、 &lt;code&gt;v&lt;/code&gt; または他の値で &lt;code&gt;finalise&lt;/code&gt; を呼び出して、他の関数またはそれ自体を登録することができます。例外が発生する可能性があります。この場合、例外は、関数が呼び出されたときにプログラムが実行していたことをすべて中断します。</target>
        </trans-unit>
        <trans-unit id="b556f0336e223bedcd6066a8e647fbdbfaf3934e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; function is called whenever the pretty-printer is flushed (via conversion &lt;code&gt;%!&lt;/code&gt;, or pretty-printing indications &lt;code&gt;@?&lt;/code&gt; or &lt;code&gt;@.&lt;/code&gt;, or using low level functions &lt;code&gt;print_flush&lt;/code&gt; or &lt;code&gt;print_newline&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; プリティプリンタは、（変換を経由してフラッシュされたときに関数が呼び出されます &lt;code&gt;%!&lt;/code&gt; 、またはプリティプリントする兆候 &lt;code&gt;@?&lt;/code&gt; または &lt;code&gt;@.&lt;/code&gt; 、または低レベルの機能を使用して &lt;code&gt;print_flush&lt;/code&gt; または &lt;code&gt;print_newline&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="27ca5eda4c43f08d46a2c695faa646d521db2882" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;out&lt;/code&gt; function performs all the pretty-printer string output. It is called with a string &lt;code&gt;s&lt;/code&gt;, a start position &lt;code&gt;p&lt;/code&gt;, and a number of characters &lt;code&gt;n&lt;/code&gt;; it is supposed to output characters &lt;code&gt;p&lt;/code&gt; to &lt;code&gt;p&amp;nbsp;+&amp;nbsp;n&amp;nbsp;-&amp;nbsp;1&lt;/code&gt; of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; 機能を実行するすべてのプリティプリンタの文字列を出力します。これは、文字列 &lt;code&gt;s&lt;/code&gt; 、開始位置 &lt;code&gt;p&lt;/code&gt; 、および文字数 &lt;code&gt;n&lt;/code&gt; で呼び出されます。それは、出力文字になっている &lt;code&gt;p&lt;/code&gt; の &lt;code&gt;p&amp;nbsp;+&amp;nbsp;n&amp;nbsp;-&amp;nbsp;1&lt;/code&gt; の &lt;code&gt;s&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75d43060306ebfa6fa32ab493326575601269afa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;print_&lt;/code&gt; field of the record contains the tag-printing functions that are called at tag opening and tag closing time, to output regular material in the pretty-printer queue.</source>
          <target state="translated">レコードの &lt;code&gt;print_&lt;/code&gt; フィールドには、タグの開始時と終了時に呼び出されるタグ印刷関数が含まれており、通常の資料をプリティプリンターキューに出力します。</target>
        </trans-unit>
        <trans-unit id="056af88ed3bcf5589ed5c7b7003c98a7067f4a6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;print_open_stag&lt;/code&gt; tag-printing function of the formatter is called with &lt;code&gt;t&lt;/code&gt; as argument; then the opening tag marker for &lt;code&gt;t&lt;/code&gt;, as given by &lt;code&gt;mark_open_stag&amp;nbsp;t&lt;/code&gt;, is written into the output device of the formatter.</source>
          <target state="translated">&lt;code&gt;print_open_stag&lt;/code&gt; フォーマッタのタグ印刷機能を使用して呼び出され &lt;code&gt;t&lt;/code&gt; 引数として。次に、 &lt;code&gt;mark_open_stag&amp;nbsp;t&lt;/code&gt; で指定された &lt;code&gt;t&lt;/code&gt; の開始タグマーカーが、フォーマッタの出力デバイスに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="e08dda4298e3191068d142ddd263ae997f8088ec" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;eventlog_metadata&lt;/em&gt; file can be found at this path and copied in the same directory as the generated trace file. However, &lt;em&gt;babeltrace&lt;/em&gt; expects the file to be named metadata in order to process the trace. Thus, it will need to be renamed when copied to the trace&amp;rsquo;s directory.</source>
          <target state="translated">&lt;em&gt;eventlog_metadataの&lt;/em&gt;ファイルは、このパスで発見され、生成されたトレースファイルと同じディレクトリにコピーすることができます。ただし、&lt;em&gt;babeltrace&lt;/em&gt;は、トレースを処理するために、ファイルにメタデータという名前が付けられていることを想定しています。したがって、トレースのディレクトリにコピーするときに名前を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="f53775be5e375c4dc7ef58b639a6d408285df99f" translate="yes" xml:space="preserve">
          <source>The AMD64 code generator (64-bit versions of Intel Pentium and AMD Athlon) supports the following additional options:</source>
          <target state="translated">AMD64コードジェネレーター(Intel PentiumとAMD Athlonの64ビット版)は、以下の追加オプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="fb87a73c92ae01d9c7c4db3849eb48ff0818dc23" translate="yes" xml:space="preserve">
          <source>The C code can then invoke OCaml functions using the callback mechanism (see section &lt;a href=&quot;#ss%3Ac-callbacks&quot;&gt;20.7.1&lt;/a&gt;).</source>
          <target state="translated">その後、Cコードはコールバックメカニズムを使用してOCaml関数を呼び出すことができます（セクション&lt;a href=&quot;#ss%3Ac-callbacks&quot;&gt;20.7.1を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8e464c9797631ebce99ef6cccb7cb68c06035632" translate="yes" xml:space="preserve">
          <source>The C code can then recover the exception identifier using caml_named_value and pass it as first argument to the functions raise_constant, raise_with_arg, and raise_with_string (described in section &lt;a href=&quot;#ss%3Ac-exceptions&quot;&gt;20.4.5&lt;/a&gt;) to actually raise the exception. For example, here is a C function that raises the Error exception with the given argument:</source>
          <target state="translated">次に、Cコードはcaml_named_valueを使用して例外識別子を回復し、それを最初の引数として関数raise_constant、raise_with_arg、およびraise_with_string（セクション&lt;a href=&quot;#ss%3Ac-exceptions&quot;&gt;20.4.5で&lt;/a&gt;説明）に渡して、実際に例外を発生させることができます。たとえば、次のC関数は、指定された引数でエラー例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="aa93c2abc45968f3784b93eb9dcd8bd6529c1ecd" translate="yes" xml:space="preserve">
          <source>The C part of the program must provide a main function, which will override the default main function provided by the OCaml runtime system. Execution will start in the user-defined main function just like for a regular C program.</source>
          <target state="translated">プログラムのC部分は、OCamlランタイムシステムによって提供されるデフォルトのメイン関数を上書きするメイン関数を提供しなければなりません。実行は、通常のCプログラムの場合と同様に、ユーザー定義のメイン関数で開始されます。</target>
        </trans-unit>
        <trans-unit id="50e4f4eda019d6551e91347a8e71357c4a87e23b" translate="yes" xml:space="preserve">
          <source>The CAML macros use identifiers (local variables, type identifiers, structure tags) that start with caml__. Do not use any identifier starting with caml__ in your programs.</source>
          <target state="translated">CAML マクロでは、 caml__で始まる識別子(ローカル変数、型識別子、構造体タグ)を使用します。プログラムの中で caml__で始まる識別子を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="947f7ca3d56e80606a767e9b12f1a9e600046008" translate="yes" xml:space="preserve">
          <source>The Flambda inlining heuristics, used whenever the compiler is configured for Flambda and -Oclassic was not specified, make inlining decisions at call sites. This helps in situations where the context is important. For example:</source>
          <target state="translated">コンパイラが Flambda 用に設定されていて -Oclassic が指定されていない場合に使用される Flambda のインライン化ヒューリスティックは、コールサイトでインライン化の決定を行います。これは、コンテキストが重要な場合に役立ちます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3d5b0d2b11b3ee57c6f9a2ae20c6f1a2b2492c1f" translate="yes" xml:space="preserve">
          <source>The Flambda mode is described in the next section.</source>
          <target state="translated">Flambdaモードについては、次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="1a8cbe3e5a223fda241e040fe66da36a6dedfca0" translate="yes" xml:space="preserve">
          <source>The Flambda optimisers classify expressions in order to determine whether an expression:</source>
          <target state="translated">Flambdaオプティマイザは式を分類して、式があるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="4a55df8086c936ee6955c4d5f1e4e9c60c3a3b17" translate="yes" xml:space="preserve">
          <source>The Flambda optimisers provide a variety of command-line flags that may be used to control their behaviour. Detailed descriptions of each flag are given in the referenced sections. Those sections also describe any arguments which the particular flags take.</source>
          <target state="translated">Flambda オプティマイザは、その動作を制御するために使用できる様々なコマンドラインフラグを提供しています。各フラグの詳細な説明は参照されているセクションにあります。これらのセクションでは、特定のフラグが取る引数についても説明しています。</target>
        </trans-unit>
        <trans-unit id="1f41ece3d458792a5a112edf6fe3a0fc355449cf" translate="yes" xml:space="preserve">
          <source>The GADT type &lt;code&gt;'a&amp;nbsp;layout&lt;/code&gt; represents one of the two supported memory layouts: C-style or Fortran-style. Its constructors are re-exported as values below for backward-compatibility reasons.</source>
          <target state="translated">GADTタイプ &lt;code&gt;'a&amp;nbsp;layout&lt;/code&gt; は、サポートされている2つのメモリレイアウト（CスタイルまたはFortranスタイル）のいずれかを表します。そのコンストラクターは、下位​​互換性の理由から、以下の値として再エクスポートされます。</target>
        </trans-unit>
        <trans-unit id="9592e7237389ee2174122cfd60652798cead6941" translate="yes" xml:space="preserve">
          <source>The GADT type &lt;code&gt;('a,&amp;nbsp;'b)&amp;nbsp;kind&lt;/code&gt; captures this association of an OCaml type &lt;code&gt;'a&lt;/code&gt; for values read or written in the Bigarray, and of an element kind &lt;code&gt;'b&lt;/code&gt; which represents the actual contents of the Bigarray. Its constructors list all possible associations of OCaml types with element kinds, and are re-exported below for backward-compatibility reasons.</source>
          <target state="translated">GADTタイプ &lt;code&gt;('a,&amp;nbsp;'b)&amp;nbsp;kind&lt;/code&gt; キャプチャOCamlのタイプのこの会合 &lt;code&gt;'a&lt;/code&gt; 値に対して読み取りまたはBigarrayで記述され、要素の種類の &lt;code&gt;'b&lt;/code&gt; Bigarrayの実際の内容を表します。そのコンストラクターは、OCamlタイプと要素の種類との可能なすべての関連付けをリストし、下位互換性の理由から以下に再エクスポートされます。</target>
        </trans-unit>
        <trans-unit id="dd7b721d0850765e0f33c133f4e389240cfc627b" translate="yes" xml:space="preserve">
          <source>The GC parameters are given as a &lt;code&gt;control&lt;/code&gt; record.</source>
          <target state="translated">GCパラメータは &lt;code&gt;control&lt;/code&gt; レコードとして提供されます。</target>
        </trans-unit>
        <trans-unit id="95efad48009e26c2e773fa9f3a23237febe8ef7a" translate="yes" xml:space="preserve">
          <source>The GC parameters are given as a &lt;code&gt;control&lt;/code&gt; record. Note that these parameters can also be initialised by setting the OCAMLRUNPARAM environment variable. See the documentation of &lt;code&gt;ocamlrun&lt;/code&gt;.</source>
          <target state="translated">GCパラメータは &lt;code&gt;control&lt;/code&gt; レコードとして提供されます。これらのパラメーターは、OCAMLRUNPARAM環境変数を設定することによっても初期化できることに注意してください。 &lt;code&gt;ocamlrun&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c85d7c1fb9f174f09ac7febf2cc5071806120427" translate="yes" xml:space="preserve">
          <source>The GC will call the finalisation functions in the order of deallocation. When several values become unreachable at the same time (i.e. during the same GC cycle), the finalisation functions will be called in the reverse order of the corresponding calls to &lt;code&gt;finalise&lt;/code&gt;. If &lt;code&gt;finalise&lt;/code&gt; is called in the same order as the values are allocated, that means each value is finalised before the values it depends upon. Of course, this becomes false if additional dependencies are introduced by assignments.</source>
          <target state="translated">GCは、割り当て解除の順序でファイナライズ関数を呼び出します。いくつかの値（すなわち、同一GCサイクル中）に同時に到達不能になった場合、ファイナライズ機能は、に対応する呼び出しの逆の順序で呼び出される &lt;code&gt;finalise&lt;/code&gt; 。値が割り当てられるのと同じ順序で &lt;code&gt;finalise&lt;/code&gt; が呼び出された場合、それは、各値が依存する値の前にファイナライズされることを意味します。もちろん、割り当てによって追加の依存関係が導入された場合、これはfalseになります。</target>
        </trans-unit>
        <trans-unit id="7795741ff8b943ea1be2628f77110237f9e449f7" translate="yes" xml:space="preserve">
          <source>The HTML tags &amp;lt;b&amp;gt;..&amp;lt;/b&amp;gt;, &amp;lt;code&amp;gt;..&amp;lt;/code&amp;gt;, &amp;lt;i&amp;gt;..&amp;lt;/i&amp;gt;, &amp;lt;ul&amp;gt;..&amp;lt;/ul&amp;gt;, &amp;lt;ol&amp;gt;..&amp;lt;/ol&amp;gt;, &amp;lt;li&amp;gt;..&amp;lt;/li&amp;gt;, &amp;lt;center&amp;gt;..&amp;lt;/center&amp;gt; and &amp;lt;h[0-9]&amp;gt;..&amp;lt;/h[0-9]&amp;gt; can be used instead of, respectively, {b ..} , [..] , {i ..} , {ul ..} , {ol ..} , {li ..} , {C ..} and {[0-9] ..}.</source>
          <target state="translated">HTMLタグ&amp;lt;b&amp;gt; .. &amp;lt;/ b&amp;gt;、&amp;lt;code&amp;gt; .. &amp;lt;/ code&amp;gt;、&amp;lt;i&amp;gt; .. &amp;lt;/ i&amp;gt;、&amp;lt;ul&amp;gt; .. &amp;lt;/ ul&amp;gt;、&amp;lt;ol&amp;gt; .. &amp;lt;/ ol&amp;gt;、&amp;lt;li&amp;gt; .. &amp;lt;/ li&amp;gt;、&amp;lt;center&amp;gt; .. &amp;lt;/ center&amp;gt;、&amp;lt;h [0-9]&amp;gt; .. &amp;lt;/ h [0-9]&amp;gt;をそれぞれ代わりに使用できます。 {b ..}、[..]、{i ..}、{ul ..}、{ol ..}、{li ..}、{C ..}および{[0-9] ..} 。</target>
        </trans-unit>
        <trans-unit id="e0385ec9d501a25d53c3aad498dad447e84092fe" translate="yes" xml:space="preserve">
          <source>The IA32 code generator (Intel Pentium, AMD Athlon) supports the following additional option:</source>
          <target state="translated">IA32コードジェネレータ(Intel Pentium、AMD Athlon)は、以下の追加オプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="f406da7037c42f4a4f464bf9db0658f383ecf08c" translate="yes" xml:space="preserve">
          <source>The OCaml Standard library.</source>
          <target state="translated">OCaml標準ライブラリ。</target>
        </trans-unit>
        <trans-unit id="3cd9888d4cc0302f8bc1d09fa4ef39df6a3ff2b8" translate="yes" xml:space="preserve">
          <source>The OCaml debugger has a simple on-line help system, which gives a brief description of each command and variable.</source>
          <target state="translated">OCamlデバッガにはシンプルなオンラインヘルプシステムがあり、各コマンドと変数の簡単な説明を提供しています。</target>
        </trans-unit>
        <trans-unit id="75b7f273467919c29f03470504af44cab3766154" translate="yes" xml:space="preserve">
          <source>The OCaml debugger is invoked by running the program ocamldebug with the name of the bytecode executable file as first argument:</source>
          <target state="translated">OCaml デバッガは、バイトコード実行ファイルの名前を第一引数として ocamldebug プログラムを実行することで起動されます。</target>
        </trans-unit>
        <trans-unit id="13488dcd67078760c0511e807304bd3a788513ec" translate="yes" xml:space="preserve">
          <source>The OCaml debugger is started under Emacs by the command M-x camldebug, with argument the name of the executable file progname to debug. Communication with the debugger takes place in an Emacs buffer named *camldebug-progname*. The editing and history facilities of Shell mode are available for interacting with the debugger.</source>
          <target state="translated">OCaml デバッガは Emacs で M-x camldebug コマンドで起動されます。デバッガとの通信は、*camldebug-progname*という名前の Emacs バッファで行われます。シェルモードの編集および履歴機能は、デバッガとの対話に利用できます。</target>
        </trans-unit>
        <trans-unit id="0701bb96dd9335c1a8b9cd5991613a9554bc96eb" translate="yes" xml:space="preserve">
          <source>The OCaml documentation and user&amp;rsquo;s manual is copyright &amp;copy; 2020 Institut National de Recherche en Informatique et en Automatique (INRIA).</source>
          <target state="translated">OCamlのドキュメントとユーザーズマニュアルの著作権は&amp;copy;2020Institut National de Recherche en Informatique et en Automatique（INRIA）にあります。</target>
        </trans-unit>
        <trans-unit id="1af4680eb3a182fd7749d661362740023609c59f" translate="yes" xml:space="preserve">
          <source>The OCaml documentation and user's manual is licensed under a &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.</source>
          <target state="translated">OCamlのドキュメントとユーザーズマニュアルは、&lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;Creative Commons Attribution-ShareAlike 4.0 InternationalLicenseの&lt;/a&gt;下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="5a12bf6d10452a673a4059a176328235b4073891" translate="yes" xml:space="preserve">
          <source>The OCaml notation for the type of a function with multiple arguments is</source>
          <target state="translated">複数の引数を持つ関数の型のOCaml記法は</target>
        </trans-unit>
        <trans-unit id="3b300bbe66442808bbe9b55b3a38db2ca2b4dfb4" translate="yes" xml:space="preserve">
          <source>The OCaml run-time system is not reentrant: at any time, at most one thread can be executing OCaml code or C code that uses the OCaml run-time system. Technically, this is enforced by a &amp;ldquo;master lock&amp;rdquo; that any thread must hold while executing such code.</source>
          <target state="translated">OCamlランタイムシステムは再入可能ではありません。いつでも、最大で1つのスレッドがOCamlコードまたはOCamlランタイムシステムを使用するCコードを実行できます。技術的には、これは、そのようなコードの実行中にスレッドが保持しなければならない「マスターロック」によって強制されます。</target>
        </trans-unit>
        <trans-unit id="e888d1165d4d21dea5f4e7b7872ca6fbab7bdab8" translate="yes" xml:space="preserve">
          <source>The OCaml runtime system comprises three main parts: the bytecode interpreter, the memory manager, and a set of C functions that implement the primitive operations. Some bytecode instructions are provided to call these C functions, designated by their offset in a table of functions (the table of primitives).</source>
          <target state="translated">OCamlのランタイムシステムは、3つの主要な部分から構成されています:バイトコードインタプリタ、メモリマネージャ、プリミティブ操作を実装するC関数のセットです。これらの C 関数を呼び出すためのバイトコード命令がいくつか提供されており、関数の表(プリミティブの表)のオフセットで指定されています。</target>
        </trans-unit>
        <trans-unit id="0a9ec24fe8572105b571386cc4dee94c3a1b7683" translate="yes" xml:space="preserve">
          <source>The OCaml scanning facility is reminiscent of the corresponding C feature. However, it is also largely different, simpler, and yet more powerful: the formatted input functions are higher-order functionals and the parameter passing mechanism is just the regular function application not the variable assignment based mechanism which is typical for formatted input in imperative languages; the OCaml format strings also feature useful additions to easily define complex tokens; as expected within a functional programming language, the formatted input functions also support polymorphism, in particular arbitrary interaction with polymorphic user-defined scanners. Furthermore, the OCaml formatted input facility is fully type-checked at compile time.</source>
          <target state="translated">OCamlのスキャニング機能は、対応するCの機能を連想させます。OCamlのフォーマット文字列は、複雑なトークンを簡単に定義するための便利な追加機能も備えています。関数型プログラミング言語で期待されるように、フォーマットされた入力関数は多相性、特に多相性を持つユーザ定義スキャナとの任意のインタラクションをサポートしています。さらに、OCamlフォーマットされた入力機能は、コンパイル時に完全にタイプチェックされます。</target>
        </trans-unit>
        <trans-unit id="abc31968fdf618dcf3aa38d81db7bcb91f6bbaf6" translate="yes" xml:space="preserve">
          <source>The OCaml system</source>
          <target state="translated">OCamlシステム</target>
        </trans-unit>
        <trans-unit id="c00ea3211d757c3befa9662576a06b2a3d185969" translate="yes" xml:space="preserve">
          <source>The OCaml system computes both the value and the type for each phrase. Even function parameters need no explicit type declaration: the system infers their types from their usage in the function. Notice also that integers and floating-point numbers are distinct types, with distinct operators: + and * operate on integers, but +. and *. operate on floats.</source>
          <target state="translated">OCamlシステムは、各フレーズの値と型の両方を計算します。関数パラメータであっても、明示的な型宣言は必要ありません。整数と浮動小数点数は別個の演算子を持つ別個の型であることにも注意してください。+と*は整数に対して動作しますが、+.と *.は浮動小数点数に対して動作します。</target>
        </trans-unit>
        <trans-unit id="108a7dca000ccd9968ece57a159ab22379aec497" translate="yes" xml:space="preserve">
          <source>The OCaml system is copyright &amp;copy; 1996&amp;ndash;2020 Institut National de Recherche en Informatique et en Automatique (INRIA). INRIA holds all ownership rights to the OCaml system.</source>
          <target state="translated">OCamlシステムの著作権は&amp;copy;1996&amp;ndash;2020 Institut National de Recherche en Informatique et en Automatique（INRIA）にあります。INRIAはOCamlシステムのすべての所有権を保持しています。</target>
        </trans-unit>
        <trans-unit id="1e41ebd883056d903f296e46ca32d4e99959d066" translate="yes" xml:space="preserve">
          <source>The OCaml system is open source and can be freely redistributed. See the file LICENSE in the distribution for licensing information.</source>
          <target state="translated">OCamlシステムはオープンソースであり、自由に再配布することができます。ライセンス情報については、配布物のLICENSEファイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="6a6d62f8ada2e0a3471af00a4f2d72e08bf53548" translate="yes" xml:space="preserve">
          <source>The OCaml system under Windows can be configured at build time in one of two modes:</source>
          <target state="translated">Windows上のOCamlシステムは、ビルド時に2つのモードのいずれかで設定することができます。</target>
        </trans-unit>
        <trans-unit id="46e485e11802130ef8432b55f6c33406ef03529e" translate="yes" xml:space="preserve">
          <source>The OCaml type system checks that the type of the arguments and the specifiers are compatible. If you pass it an argument of a type that does not correspond to the format specifier, the compiler will display an error message:</source>
          <target state="translated">OCamlの型システムは、引数と指定子の型が互換性があるかどうかをチェックします。フォーマット指定子に対応しない型の引数を渡すと、コンパイラはエラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="b075ff3a2ce27b8853b8203828c331ee0dc266ff" translate="yes" xml:space="preserve">
          <source>The PowerPC code generator supports the following additional options:</source>
          <target state="translated">PowerPC コードジェネレータは、以下の追加オプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="595a52e6177f37e25c12ad26af16912ffc174450" translate="yes" xml:space="preserve">
          <source>The Windows API uses the UTF-16 encoding to support Unicode. The runtime system performs the necessary conversions so that the OCaml programmer only needs to deal with the OCaml encoding. C stubs that call Windows Unicode APIs need to use specific runtime functions to perform the necessary conversions in a compatible way.</source>
          <target state="translated">Windows APIはUTF-16エンコーディングを使用してUnicodeをサポートしています。ランタイムシステムが必要な変換を実行するので、OCamlプログラマはOCamlエンコーディングだけを扱う必要があります。Windows Unicode APIを呼び出すCスタブは、互換性のある方法で必要な変換を実行するために、特定のランタイム関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5e58e4ef240f0b79192b60989a00c3560ae96550" translate="yes" xml:space="preserve">
          <source>The above class money reveals a problem that often occurs with binary methods. In order to interact with other objects of the same class, the representation of money objects must be revealed, using a method such as value. If we remove all binary methods (here plus and leq), the representation can easily be hidden inside objects by removing the method value as well. However, this is not possible as soon as some binary method requires access to the representation of objects of the same class (other than self).</source>
          <target state="translated">上記のクラス money は、バイナリメソッドでよく発生する問題を明らかにします。同じクラスの他のオブジェクトと相互作用するためには、value のようなメソッドを使って、money オブジェクトの表現を明らかにしなければなりません。すべてのバイナリメソッド(ここでは plus と leq)を削除すれば、メソッド value も削除することで、表現をオブジェクトの内部に簡単に隠すことができます。しかし、いくつかのバイナリメソッドが同じクラス(自己以外)のオブジェクトの表現へのアクセスを必要とするようになると、すぐにはできなくなります。</target>
        </trans-unit>
        <trans-unit id="0c2b2bc28098b3a5ed96c8509e9d54181688aacc" translate="yes" xml:space="preserve">
          <source>The above considerations can usually be ignored if your lists are not longer than about 10000 elements.</source>
          <target state="translated">あなたのリストが約10000要素より長くない場合は、上記の考慮事項は通常無視できます。</target>
        </trans-unit>
        <trans-unit id="1275e5b0fd632a0adb161ae45fd343dd0a7ed674" translate="yes" xml:space="preserve">
          <source>The above definition of functional_point is not equivalent to the following:</source>
          <target state="translated">上記のfunctional_pointの定義は、以下のように等価ではありません。</target>
        </trans-unit>
        <trans-unit id="ca1370db07df54b9210798f4a752f3703b356815" translate="yes" xml:space="preserve">
          <source>The above definition will only backup one level. The backup facility can be added to any class by using multiple inheritance.</source>
          <target state="translated">上記の定義では、1つのレベルのみをバックアップします。バックアップ機能は、複数の継承を利用して任意のクラスに追加することができます。</target>
        </trans-unit>
        <trans-unit id="044810ffbb768ce3b2056b4a6f6c69fc26ffde37" translate="yes" xml:space="preserve">
          <source>The above specification, inside a signature, only matches a module definition equal to &lt;a href=&quot;names#module-path&quot;&gt;module-path&lt;/a&gt;. Conversely, a type-level module alias can be matched by itself, or by any supertype of the type of the module it references.</source>
          <target state="translated">上記の仕様は、署名内で、&lt;a href=&quot;names#module-path&quot;&gt;module-pathに&lt;/a&gt;等しいモジュール定義にのみ一致します。逆に、タイプレベルのモジュールエイリアスは、それ自体で、またはそれが参照するモジュールのタイプの任意のスーパータイプと一致させることができます。</target>
        </trans-unit>
        <trans-unit id="6a4efe688ae0c8753fcbb050f0706980508ba0af" translate="yes" xml:space="preserve">
          <source>The above variant types were polymorphic, allowing further refinement. When writing type annotations, one will most often describe fixed variant types, that is types that cannot be refined. This is also the case for type abbreviations. Such types do not contain &amp;lt; or &amp;gt;, but just an enumeration of the tags and their associated types, just like in a normal datatype definition.</source>
          <target state="translated">上記のバリアント型は多形であり、さらに改良することができました。型の注釈を書くとき、ほとんどの場合、固定されたバリアント型、つまり洗練できない型を記述します。これは、活字の略語にも当てはまります。このような型には&amp;lt;または&amp;gt;は含まれませんが、通常のデータ型定義と同様に、タグとそれに関連する型の列挙のみが含まれます。</target>
        </trans-unit>
        <trans-unit id="4ef217485c89f7960da6716b91dd0fabc645656e" translate="yes" xml:space="preserve">
          <source>The abstract type &lt;code&gt;backtrace_slot&lt;/code&gt; represents a single slot of a backtrace.</source>
          <target state="translated">抽象型 &lt;code&gt;backtrace_slot&lt;/code&gt; は、バックトレースの単一のスロットを表します。</target>
        </trans-unit>
        <trans-unit id="739286bc505e97139a598fe8147fb7a3765c2deb" translate="yes" xml:space="preserve">
          <source>The abstract type &lt;code&gt;raw_backtrace&lt;/code&gt; stores a backtrace in a low-level format, instead of directly exposing them as string as the &lt;code&gt;get_backtrace()&lt;/code&gt; function does.</source>
          <target state="translated">抽象型 &lt;code&gt;raw_backtrace&lt;/code&gt; は、 &lt;code&gt;get_backtrace()&lt;/code&gt; 関数のようにバックトレースを文字列として直接公開するのではなく、低レベルの形式でバックトレースを格納します。</target>
        </trans-unit>
        <trans-unit id="af764d88af01f9903675386eab28fc1408ce8155" translate="yes" xml:space="preserve">
          <source>The abstract type of Internet addresses.</source>
          <target state="translated">インターネットアドレスの抽象型。</target>
        </trans-unit>
        <trans-unit id="481d24b8ea9ec5881b68246c8998a8f47be76742" translate="yes" xml:space="preserve">
          <source>The abstract type of buffers.</source>
          <target state="translated">バッファの抽象型です。</target>
        </trans-unit>
        <trans-unit id="4026004092ed45c6dd9c41b6b253ecdb6f12e44c" translate="yes" xml:space="preserve">
          <source>The abstract type of file descriptors.</source>
          <target state="translated">ファイルディスクリプタの抽象型。</target>
        </trans-unit>
        <trans-unit id="012fb3dc8bc487525d0af4de37a9ed3cffd39a71" translate="yes" xml:space="preserve">
          <source>The actions are arbitrary OCaml expressions. They are evaluated in a context where the identifiers defined by using the as construct are bound to subparts of the matched string. Additionally, lexbuf is bound to the current lexer buffer. Some typical uses for lexbuf, in conjunction with the operations on lexer buffers provided by the Lexing standard library module, are listed below.</source>
          <target state="translated">アクションは任意のOCaml式です。これらのアクションは、as構文を使用して定義された識別子がマッチした文字列の部分にバインドされているコンテキストで評価されます。さらに、lexbuf は現在のレキサーバッファにバインドされます。lexbuf の典型的な使用法を、Lexing 標準ライブラリモジュールが提供するレキサーバッファの操作と合わせて以下に示します。</target>
        </trans-unit>
        <trans-unit id="f24608a60c588712f36527d1438e6185c4caa81b" translate="yes" xml:space="preserve">
          <source>The advantage of those printers based on the %a specifier is that they can be composed together to create more complex printers step by step. We can define a combinator that can turn a printer for 'a type into a printer for 'a optional:</source>
          <target state="translated">a 指定子に基づくこれらのプリンタの利点は、それらを一緒に構成して、より複雑なプリンタを段階的に作成できることです。a 型用のプリンタを 'a オプション用のプリンタに変えることができる組み合わせを定義できます。</target>
        </trans-unit>
        <trans-unit id="08b7a0d96acbf6b2533907cd2c43896611cce1c8" translate="yes" xml:space="preserve">
          <source>The aims of inlining are:</source>
          <target state="translated">インライニングの目的は</target>
        </trans-unit>
        <trans-unit id="4e4b4f885867a255a22ab6931eddd051e8225ed9" translate="yes" xml:space="preserve">
          <source>The all-time favorite: a desk calculator. This program reads arithmetic expressions on standard input, one per line, and prints their values. Here is the grammar definition:</source>
          <target state="translated">いつものお気に入り:机上電卓。このプログラムは、標準入力の算術式を1行に1つずつ読み込み、その値を印刷します。ここに文法の定義があります。</target>
        </trans-unit>
        <trans-unit id="ac2c39dacdc6a9be5743e68f1dd99fbde2e43c29" translate="yes" xml:space="preserve">
          <source>The allocation of the pair has been eliminated.</source>
          <target state="translated">ペアの配分がなくなった。</target>
        </trans-unit>
        <trans-unit id="3bdf6e627c88ed40af03f752c75a521013dd60d7" translate="yes" xml:space="preserve">
          <source>The allocation of the pair within f has been removed. (Since the two closures for loop&amp;rsquo; and loop2&amp;rsquo; are constant they will also be lifted to toplevel with no runtime allocation penalty. This would also happen without having run the transformation to unbox specialise arguments.)</source>
          <target state="translated">f内のペアの割り当ては削除されました。（loop 'とloop2'の2つのクロージャは一定であるため、ランタイム割り当てのペナルティなしでトップレベルに引き上げられます。これは、特殊な引数をボックス化解除する変換を実行しなくても発生します。）</target>
        </trans-unit>
        <trans-unit id="f2de0b011f578d5d6e9c61968919404fdcc2ece6" translate="yes" xml:space="preserve">
          <source>The alternative is of course to build the library without extra options:</source>
          <target state="translated">選択肢はもちろん、余分なオプションなしでライブラリを構築することです。</target>
        </trans-unit>
        <trans-unit id="0e2dd4f451a8dcf054a1812b560aca93e651aa0b" translate="yes" xml:space="preserve">
          <source>The amount of profiling information can be controlled through the -P option to ocamlcp or ocamloptp, followed by one or several letters indicating which parts of the program should be profiled:</source>
          <target state="translated">プロファイリング情報の量は、 ocamlcp または ocamloptp の -P オプションで制御することができ、その後にプログラムのどの部分をプロファイリングするかを示す 1 つまたは複数の文字が続きます。</target>
        </trans-unit>
        <trans-unit id="8ab3f2331e8b1749d459c0080607551039b5ae36" translate="yes" xml:space="preserve">
          <source>The annotation virtual here is only used to mention a method without providing its definition. Since we didn&amp;rsquo;t add the private annotation, this makes the method public, keeping the original definition.</source>
          <target state="translated">ここで仮想アノテーションは、メソッドの定義を提供せずにメソッドに言及するためにのみ使用されます。プライベートアノテーションを追加しなかったため、これによりメソッドがパブリックになり、元の定義が保持されます。</target>
        </trans-unit>
        <trans-unit id="f58bb108f6951aa34759425d8ee753adc0f3924e" translate="yes" xml:space="preserve">
          <source>The answer is that when confronted with multiple options, OCaml tries to use locally available information to disambiguate between the various fields and constructors. First, if the type of the record or variant is known, OCaml can pick unambiguously the corresponding field or constructor. For instance:</source>
          <target state="translated">答えは、複数のオプションに直面したとき、OCamlはローカルで利用可能な情報を使用して、さまざまなフィールドとコンストラクタの間で曖昧さを解消しようとするということです。まず、レコードやバリアントの型がわかっている場合、OCamlは対応するフィールドやコンストラクタを曖昧さなく選ぶことができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="611a6a75c3c1ff11eb7d3c599a9f649411be363a" translate="yes" xml:space="preserve">
          <source>The answer is twofold. One first aspect is that while being pretty efficient, the lack of static type information allows for less optimizations, and makes polymorphic variants slightly heavier than core language ones. However noticeable differences would only appear on huge data structures.</source>
          <target state="translated">答えは二つあります。第一の側面は、非常に効率的である一方で、静的な型情報がないために最適化が少なく、多相バリアントがコア言語のものよりもわずかに重くなってしまうことです。しかし、顕著な違いは巨大なデータ構造にしか現れません。</target>
        </trans-unit>
        <trans-unit id="2e0ae228161936f806d34344dc59d7232112d71f" translate="yes" xml:space="preserve">
          <source>The argument f to iter is invariant so the function may be specialised:</source>
          <target state="translated">iterへの引数fは不変なので、関数は特殊なものになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f3e5632dfa7a2b83bf829cdc816e3c1a87c98674" translate="yes" xml:space="preserve">
          <source>The argument of &lt;a href=&quot;sys#VALcommand&quot;&gt;&lt;code&gt;Sys.command&lt;/code&gt;&lt;/a&gt; is generally the name of a command followed by zero, one or several arguments, separated by whitespace. The given argument is interpreted by a shell: either the Windows shell &lt;code&gt;cmd.exe&lt;/code&gt; for the Win32 ports of OCaml, or the POSIX shell &lt;code&gt;sh&lt;/code&gt; for other ports. It can contain shell builtin commands such as &lt;code&gt;echo&lt;/code&gt;, and also special characters such as file redirections &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt;, which will be honored by the shell.</source>
          <target state="translated">&lt;a href=&quot;sys#VALcommand&quot;&gt; &lt;code&gt;Sys.command&lt;/code&gt; &lt;/a&gt;の引数は、通常、コマンドの名前の後にゼロ、1つ、または複数の引数が続き、空白で区切られます。指定された引数はシェルによって解釈されます &lt;code&gt;cmd.exe&lt;/code&gt; のWin32ポートの場合はWindowsシェルcmd.exe、その他のポートの場合はPOSIXシェル &lt;code&gt;sh&lt;/code&gt; です。これには、 &lt;code&gt;echo&lt;/code&gt; などのシェル組み込みコマンドや、ファイルリダイレクト &lt;code&gt;&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;&lt;/code&gt; などの特殊な文字を含めることができます。これらはシェルによって尊重されます。</target>
        </trans-unit>
        <trans-unit id="7c32b048d109d34646b19b7212d9e49b0e7c2fe1" translate="yes" xml:space="preserve">
          <source>The arguments following program are optional, and are passed as command-line arguments to the program being debugged. (See also the set arguments command.)</source>
          <target state="translated">プログラムに続く引数はオプションで、デバッグされるプログラムのコマンドライン引数として渡されます。(set arguments コマンドも参照してください)。</target>
        </trans-unit>
        <trans-unit id="adbf5b37a6462b0983b5bf9cd33bf85f4db819aa" translate="yes" xml:space="preserve">
          <source>The arguments of sum-type constructors can now be defined using the same syntax as records. Mutable and polymorphic fields are allowed. GADT syntax is supported. Attributes can be specified on individual fields.</source>
          <target state="translated">sum型コンストラクタの引数は、レコードと同じ構文で定義できるようになりました。可変フィールドと多相フィールドが許可されています。GADT構文がサポートされています。属性を個々のフィールドで指定できるようになりました。</target>
        </trans-unit>
        <trans-unit id="82ce2f746abf0188689410ed58dc502e67dced4e" translate="yes" xml:space="preserve">
          <source>The arity (number of arguments) of a primitive is automatically determined from its OCaml type in the external declaration, by counting the number of function arrows in the type. For instance, input above has arity 4, and the input C function is called with four arguments. Similarly,</source>
          <target state="translated">プリミティブのアリティ(引数の数)は、外部宣言のOCaml型から、その型に含まれる関数の矢印の数をカウントすることで自動的に決定されます。例えば、上のinputはアリティ4で、入力Cの関数は4つの引数で呼び出されます。同様に。</target>
        </trans-unit>
        <trans-unit id="2ab01eca841b7f4d65b6116a30c2bd33e79dbb17" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;a&lt;/code&gt; must have exactly &lt;code&gt;N&lt;/code&gt; dimensions, and all coordinates must lie inside the array bounds, as described for &lt;code&gt;Genarray.get&lt;/code&gt;; otherwise, &lt;code&gt;Invalid_argument&lt;/code&gt; is raised.</source>
          <target state="translated">&lt;code&gt;Genarray.get&lt;/code&gt; で説明されているように、配列 &lt;code&gt;a&lt;/code&gt; は正確に &lt;code&gt;N&lt;/code&gt; 次元である必要があり、すべての座標は配列の境界内にある必要があります。それ以外の場合、 &lt;code&gt;Invalid_argument&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="868ea2ab054abe050c8bc298a300a68a34cb7e0b" translate="yes" xml:space="preserve">
          <source>The as construct is similar to &amp;ldquo;&lt;em&gt;groups&lt;/em&gt;&amp;rdquo; as provided by numerous regular expression packages. The type of these variables can be string, char, string option or char option.</source>
          <target state="translated">as構文は、多数の正規表現パッケージによって提供される「&lt;em&gt;グループ&lt;/em&gt;」に似ています。これらの変数のタイプは、string、char、stringオプション、またはcharオプションです。</target>
        </trans-unit>
        <trans-unit id="73177bb5797d8e28b73870b15973e78612bd93d2" translate="yes" xml:space="preserve">
          <source>The associated parser would be a function from &lt;code&gt;token&amp;nbsp;stream&lt;/code&gt; to, for instance, &lt;code&gt;int&lt;/code&gt;, and would have rules such as:</source>
          <target state="translated">関連するパーサーは、 &lt;code&gt;token&amp;nbsp;stream&lt;/code&gt; からたとえば &lt;code&gt;int&lt;/code&gt; までの関数であり、次のようなルールがあります。</target>
        </trans-unit>
        <trans-unit id="2420f95fc8ad57ab7c1da6f7e6377e30752e6e0e" translate="yes" xml:space="preserve">
          <source>The author of the element. One author per @author tag. There may be several @author tags for the same element.</source>
          <target state="translated">要素の著者。1つの@authorタグにつき、1つの著者。同じ要素に複数の@authorタグがある場合もあります。</target>
        </trans-unit>
        <trans-unit id="7c7873377d2e12a00df000be90fb6b4a6087455b" translate="yes" xml:space="preserve">
          <source>The basic form for defining a module component is module&lt;a href=&quot;names#module-name&quot;&gt;module-name&lt;/a&gt;=&lt;a href=&quot;#module-expr&quot;&gt;module-expr&lt;/a&gt;, which evaluates &lt;a href=&quot;#module-expr&quot;&gt;module-expr&lt;/a&gt; and binds the result to the name &lt;a href=&quot;names#module-name&quot;&gt;module-name&lt;/a&gt;.</source>
          <target state="translated">モジュールコンポーネントを定義するための基本的な形式は、module &lt;a href=&quot;names#module-name&quot;&gt;module-name&lt;/a&gt; = &lt;a href=&quot;#module-expr&quot;&gt;module-exprです&lt;/a&gt;。これは、&lt;a href=&quot;#module-expr&quot;&gt;module-expr&lt;/a&gt;を評価し、結果を名前&lt;a href=&quot;names#module-name&quot;&gt;module-nameに&lt;/a&gt;バインドします。</target>
        </trans-unit>
        <trans-unit id="842164f73b83f27f15ffe93e1ec98838de6e836b" translate="yes" xml:space="preserve">
          <source>The behavior is not defined if the hash table is modified by &lt;code&gt;f&lt;/code&gt; during the iteration.</source>
          <target state="translated">反復中にハッシュテーブルが &lt;code&gt;f&lt;/code&gt; によって変更された場合、動作は定義されません。</target>
        </trans-unit>
        <trans-unit id="c7911b90c87825476ae85d935bdfc9f902a9f2ea" translate="yes" xml:space="preserve">
          <source>The behavior is not defined if the hash table is modified during the iteration.</source>
          <target state="translated">反復中にハッシュテーブルが変更された場合の動作は定義されていません。</target>
        </trans-unit>
        <trans-unit id="0d6058839cd5d6f864ed769e103e1c4571b14c4b" translate="yes" xml:space="preserve">
          <source>The behavior of other forms of letrec definitions is implementation-dependent. The current implementation also supports a certain class of recursive definitions of non-functional values, as explained in section &lt;a href=&quot;letrecvalues#s%3Aletrecvalues&quot;&gt;8.1&lt;/a&gt;.</source>
          <target state="translated">他の形式のletrec定義の動作は、実装に依存します。現在の実装では、セクション&lt;a href=&quot;letrecvalues#s%3Aletrecvalues&quot;&gt;8.1で&lt;/a&gt;説明されているように、非機能値の特定のクラスの再帰的定義もサポートしています。</target>
        </trans-unit>
        <trans-unit id="1ff67900c42b4aee958325c5f4f3657cfb01e905" translate="yes" xml:space="preserve">
          <source>The behavior of pretty-printing commands is unspecified if there is no open pretty-printing box. Each box opened by one of the &lt;code&gt;open_&lt;/code&gt; functions below must be closed using &lt;code&gt;close_box&lt;/code&gt; for proper formatting. Otherwise, some of the material printed in the boxes may not be output, or may be formatted incorrectly.</source>
          <target state="translated">開いているプリティプリントボックスがない場合、プリティプリントコマンドの動作は指定されていません。以下の &lt;code&gt;open_&lt;/code&gt; 関数のいずれかによって開かれた各ボックスは、適切なフォーマットのために &lt;code&gt;close_box&lt;/code&gt; を使用して閉じる必要があります。そうしないと、ボックスに印刷されている資料の一部が出力されなかったり、フォーマットが正しくなかったりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="294b4ce3a6ec7d9526f89437cbfa0a62dbc20037" translate="yes" xml:space="preserve">
          <source>The behaviour depends on whether -Oclassic is used.</source>
          <target state="translated">この動作は -Oclassic が使用されているかどうかに依存します。</target>
        </trans-unit>
        <trans-unit id="37716c4181d6f75c920bfc58fd4811b40988028e" translate="yes" xml:space="preserve">
          <source>The behaviour of the Flambda simplification pass means that certain unsafe operations, which may without Flambda or when using previous versions of the compiler be safe, must not be used. This specifically refers to functions found in the Obj module.</source>
          <target state="translated">Flambdaの単純化パスの動作は、Flambdaがなくても、以前のバージョンのコンパイラを使用していても安全であるかもしれない、ある種の安全でない操作を使用してはならないことを意味します。これは特にObjモジュールにある関数を指します。</target>
        </trans-unit>
        <trans-unit id="eee0f3f481dbee307882214b9d43efeec2d8af62" translate="yes" xml:space="preserve">
          <source>The benefit of specialisation is assessed in a similar way as for inlining. Specialised argument information may mean that the body of the function being specialised can be simplified: the removed operations are accumulated into a benefit. This, together with the size of the duplicated (specialised) function declaration, is then assessed against the size of the call to the original function.</source>
          <target state="translated">特殊化の利点は、インライン化と同様の方法で評価されます。特殊化された引数情報は、特殊化された関数の本体を簡素化することを意味する場合があります。これは、複製された(専門化された)関数宣言のサイズと合わせて、元の関数の呼び出しのサイズと比較して評価されます。</target>
        </trans-unit>
        <trans-unit id="0b2c4a9ea1966c2159ce87a9dbf7fed0e3ab528e" translate="yes" xml:space="preserve">
          <source>The best way to set a file descriptor ``close-on-exec'' is to create it in this state. To this end, the &lt;code&gt;openfile&lt;/code&gt; function has &lt;code&gt;O_CLOEXEC&lt;/code&gt; and &lt;code&gt;O_KEEPEXEC&lt;/code&gt; flags to enforce ``close-on-exec'' mode or ``keep-on-exec'' mode, respectively. All other operations in the Unix module that create file descriptors have an optional argument &lt;code&gt;?cloexec:bool&lt;/code&gt; to indicate whether the file descriptor should be created in ``close-on-exec'' mode (by writing &lt;code&gt;~cloexec:true&lt;/code&gt;) or in ``keep-on-exec'' mode (by writing &lt;code&gt;~cloexec:false&lt;/code&gt;). For historical reasons, the default file descriptor creation mode is ``keep-on-exec'', if no &lt;code&gt;cloexec&lt;/code&gt; optional argument is given. This is not a safe default, hence it is highly recommended to pass explicit &lt;code&gt;cloexec&lt;/code&gt; arguments to operations that create file descriptors.</source>
          <target state="translated">ファイル記述子「close-on-exec」を設定する最良の方法は、この状態で作成することです。この目的のために、 &lt;code&gt;openfile&lt;/code&gt; 関数には &lt;code&gt;O_CLOEXEC&lt;/code&gt; フラグと &lt;code&gt;O_KEEPEXEC&lt;/code&gt; フラグがあり、それぞれ「close-on-exec」モードまたは「keep-on-exec」モードを適用します。ファイル記述子を作成するUnixモジュールの他のすべての操作には、オプションの引数 &lt;code&gt;?cloexec:bool&lt;/code&gt; があり、ファイル記述子を「close-on-exec」モード（ &lt;code&gt;~cloexec:true&lt;/code&gt; ）で作成するか、「 `keep-on-exec ''モード（ &lt;code&gt;~cloexec:false&lt;/code&gt; 書くことによる）。歴史的な理由から、 &lt;code&gt;cloexec&lt;/code&gt; がない場合、デフォルトのファイル記述子作成モードは「keep-on-exec」です。オプションの引数が与えられます。これは安全なデフォルトではないため、ファイル記述子を作成する操作に明示的な &lt;code&gt;cloexec&lt;/code&gt; 引数を渡すことを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="86498a92f17f772fbb61c7717d965395dedb151e" translate="yes" xml:space="preserve">
          <source>The bigarray functionality may now be found in the standard library &lt;a href=&quot;libref/bigarray&quot;&gt;Bigarray module&lt;/a&gt;, except for the map_file function which is now part of the &lt;a href=&quot;libunix#c%3Aunix&quot;&gt;Unix library&lt;/a&gt;. The documentation has been integrated into the documentation for the standard library.</source>
          <target state="translated">bigarray機能は、&lt;a href=&quot;libunix#c%3Aunix&quot;&gt;Unixライブラリの&lt;/a&gt;一部となった&lt;a href=&quot;libref/bigarray&quot;&gt;map_file&lt;/a&gt;関数を除いて、標準ライブラリBigarrayモジュールに含まれるようになりました。ドキュメントは、標準ライブラリのドキュメントに統合されています。</target>
        </trans-unit>
        <trans-unit id="c17f0e116811b46fb1a7e57d12263409833bc755" translate="yes" xml:space="preserve">
          <source>The bigarray library has now been integrated into OCaml&amp;rsquo;s standard library.</source>
          <target state="translated">bigarrayライブラリはOCamlの標準ライブラリに統合されました。</target>
        </trans-unit>
        <trans-unit id="f6a6099570dff5141c480a3752e67d9450054231" translate="yes" xml:space="preserve">
          <source>The boolean 'and'.</source>
          <target state="translated">真偽値 'and' です。</target>
        </trans-unit>
        <trans-unit id="353c4c988751affe11b91a3216ece019b7e4c283" translate="yes" xml:space="preserve">
          <source>The boolean 'and'. Evaluation is sequential, left-to-right: in &lt;code&gt;e1&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;e2&lt;/code&gt;, &lt;code&gt;e1&lt;/code&gt; is evaluated first, and if it returns &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;e2&lt;/code&gt; is not evaluated at all. Right-associative operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">ブール値の 'と'。評価は左から右に順次行われます &lt;code&gt;e1&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;e2&lt;/code&gt; 、 &lt;code&gt;e1&lt;/code&gt; が最初に評価され、 &lt;code&gt;false&lt;/code&gt; が返された場合、 &lt;code&gt;e2&lt;/code&gt; はまったく評価されません。右結合演算子。詳細については、&lt;a href=&quot;ocaml_operators&quot;&gt; &lt;code&gt;Ocaml_operators&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3c5b81b1af0be4a909b4ff180ecd97e7f3ba74ce" translate="yes" xml:space="preserve">
          <source>The boolean 'or'.</source>
          <target state="translated">ブール値 'or'。</target>
        </trans-unit>
        <trans-unit id="a7978a7e64fa2a3b90ad7ad3cd09291d62fe4c55" translate="yes" xml:space="preserve">
          <source>The boolean 'or'. Evaluation is sequential, left-to-right: in &lt;code&gt;e1&amp;nbsp;||&amp;nbsp;e2&lt;/code&gt;, &lt;code&gt;e1&lt;/code&gt; is evaluated first, and if it returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;e2&lt;/code&gt; is not evaluated at all. Right-associative operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">ブール値 'または'。評価は、左から右に順番に行われます：in &lt;code&gt;e1&amp;nbsp;||&amp;nbsp;e2&lt;/code&gt; 、 &lt;code&gt;e1&lt;/code&gt; が最初に評価され、 &lt;code&gt;true&lt;/code&gt; が返された場合、 &lt;code&gt;e2&lt;/code&gt; はまったく評価されません。右結合演算子。詳細については、&lt;a href=&quot;ocaml_operators&quot;&gt; &lt;code&gt;Ocaml_operators&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="57f592a468f9e49822816c7b0706ff6890f3319b" translate="yes" xml:space="preserve">
          <source>The boolean negation.</source>
          <target state="translated">真偽の否定です。</target>
        </trans-unit>
        <trans-unit id="e3356fbfc82845f932c40854238e79297422bf18" translate="yes" xml:space="preserve">
          <source>The boolean operators &amp;amp; and or are deprecated synonyms for (respectively) &amp;amp;&amp;amp; and ||.</source>
          <target state="translated">ブール演算子＆およびorは、（それぞれ）&amp;amp;&amp;amp;および||の非推奨の同義語です。</target>
        </trans-unit>
        <trans-unit id="4b049f36521b991b87ac5a40eab10383da5bcce8" translate="yes" xml:space="preserve">
          <source>The bytecode compiler in custom runtime mode (ocamlc -custom) normally appends the bytecode to the executable file containing the custom runtime. This has two consequences. First, the final linking step must be performed by ocamlc. Second, the OCaml runtime library must be able to find the name of the executable file from the command-line arguments. When using caml_main(argv) as in section &lt;a href=&quot;#ss%3Amain-c&quot;&gt;20.7.4&lt;/a&gt;, this means that argv[0] or argv[1] must contain the executable file name.</source>
          <target state="translated">カスタムランタイムモードのバイトコードコンパイラ（ocamlc -custom）は通常、カスタムランタイムを含む実行可能ファイルにバイトコードを追加します。これには2つの結果があります。まず、最後のリンク手順をocamlcで実行する必要があります。次に、OCamlランタイムライブラリは、コマンドライン引数から実行可能ファイルの名前を見つけることができなければなりません。セクション&lt;a href=&quot;#ss%3Amain-c&quot;&gt;20.7.4の&lt;/a&gt;ようにcaml_main（argv）を使用する場合、これはargv [0]またはargv [1]に実行可能ファイル名が含まれている必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="ae71aa32bd811f5994a5593dcd1cb87c5ea5d8e1" translate="yes" xml:space="preserve">
          <source>The bytecode executable myprog can then be launched as usual: myprogargs or /home/me/ocamlunixrun myprogargs.</source>
          <target state="translated">バイトコード実行可能な myprog は、通常通り myprogargs または /home/me/ocamlunixrun myprogargs として起動することができます。</target>
        </trans-unit>
        <trans-unit id="31c8711898f71d43a2b4ca33e6558e5b43e7cda7" translate="yes" xml:space="preserve">
          <source>The bytes representing a marshaled value are composed of a fixed-size header and a variable-sized data part, whose size can be determined from the header.</source>
          <target state="translated">マーシャライズされた値を表すバイトは、固定サイズのヘッダと可変サイズのデータ部で構成されており、そのサイズはヘッダから決定されます。</target>
        </trans-unit>
        <trans-unit id="d6cf8ac9f4453cd731df08caa3e42856639d786a" translate="yes" xml:space="preserve">
          <source>The bytes representing a marshaled value are composed of a fixed-size header and a variable-sized data part, whose size can be determined from the header. &lt;a href=&quot;marshal#VALheader_size&quot;&gt;&lt;code&gt;Marshal.header_size&lt;/code&gt;&lt;/a&gt; is the size, in bytes, of the header. &lt;a href=&quot;marshal#VALdata_size&quot;&gt;&lt;code&gt;Marshal.data_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;buff&amp;nbsp;ofs&lt;/code&gt; is the size, in bytes, of the data part, assuming a valid header is stored in &lt;code&gt;buff&lt;/code&gt; starting at position &lt;code&gt;ofs&lt;/code&gt;. Finally, &lt;a href=&quot;marshal#VALtotal_size&quot;&gt;&lt;code&gt;Marshal.total_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;buff&amp;nbsp;ofs&lt;/code&gt; is the total size, in bytes, of the marshaled value. Both &lt;a href=&quot;marshal#VALdata_size&quot;&gt;&lt;code&gt;Marshal.data_size&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;marshal#VALtotal_size&quot;&gt;&lt;code&gt;Marshal.total_size&lt;/code&gt;&lt;/a&gt; raise &lt;code&gt;Failure&lt;/code&gt; if &lt;code&gt;buff&lt;/code&gt;, &lt;code&gt;ofs&lt;/code&gt; does not contain a valid header.</source>
          <target state="translated">マーシャリングされた値を表すバイトは、固定サイズのヘッダーと可変サイズのデータ​​部分で構成され、そのサイズはヘッダーから決定できます。&lt;a href=&quot;marshal#VALheader_size&quot;&gt; &lt;code&gt;Marshal.header_size&lt;/code&gt; &lt;/a&gt;は、ヘッダーのサイズ（バイト単位）です。&lt;a href=&quot;marshal#VALdata_size&quot;&gt; &lt;code&gt;Marshal.data_size&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;nbsp;buff&amp;nbsp;ofs&lt;/code&gt; は、有効なヘッダーが &lt;code&gt;ofs&lt;/code&gt; 位置から始まる &lt;code&gt;buff&lt;/code&gt; に格納されていると仮定した場合の、データ部分のサイズ（バイト単位）です。最後に、&lt;a href=&quot;marshal#VALtotal_size&quot;&gt; &lt;code&gt;Marshal.total_size&lt;/code&gt; &lt;/a&gt; &lt;code&gt;buff&amp;nbsp;ofs&lt;/code&gt; は、マーシャリングされた値の合計サイズ（バイト単位）です。どちらも&lt;a href=&quot;marshal#VALdata_size&quot;&gt; &lt;code&gt;Marshal.data_size&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;marshal#VALtotal_size&quot;&gt; &lt;code&gt;Marshal.total_size&lt;/code&gt; &lt;/a&gt;レイズ &lt;code&gt;Failure&lt;/code&gt; ならば &lt;code&gt;buff&lt;/code&gt; 、 &lt;code&gt;ofs&lt;/code&gt; が有効なヘッダーが含まれていません。</target>
        </trans-unit>
        <trans-unit id="1d1103a29f51d40271f1f9e57f4afef462874497" translate="yes" xml:space="preserve">
          <source>The call to caml_main initializes the OCaml runtime system, loads the bytecode (in the case of the bytecode compiler), and executes the initialization code of the OCaml program. Typically, this initialization code registers callback functions using Callback.register. Once the OCaml initialization code is complete, control returns to the C code that called caml_main.</source>
          <target state="translated">caml_main の呼び出しは、OCaml ランタイムシステムを初期化し、バイトコード (バイトコードコンパイラの場合)をロードし、OCaml プログラムの初期化コードを実行します。通常、この初期化コードは、Callback.registerを使用してコールバック関数を登録します。OCaml の初期化コードが完了すると、制御は caml_main を呼び出した C コードに戻ります。</target>
        </trans-unit>
        <trans-unit id="9a133408bb95ba502b3a3f1d4a608ee2cbee5abd" translate="yes" xml:space="preserve">
          <source>The call to print_int can indeed be inlined:</source>
          <target state="translated">print_intの呼び出しは確かにインライン化できます。</target>
        </trans-unit>
        <trans-unit id="94ba4fe5d5732c256fe3a8bfe75e3f359200cfb9" translate="yes" xml:space="preserve">
          <source>The caller may not mutate &lt;code&gt;s&lt;/code&gt; while the string is borrowed (it has temporarily given up ownership). This affects concurrent programs, but also higher-order functions: if &lt;a href=&quot;string#VALlength&quot;&gt;&lt;code&gt;String.length&lt;/code&gt;&lt;/a&gt; returned a closure to be called later, &lt;code&gt;s&lt;/code&gt; should not be mutated until this closure is fully applied and returns ownership.</source>
          <target state="translated">文字列が借用されている間、呼び出し元は &lt;code&gt;s&lt;/code&gt; を変更できません（一時的に所有権を放棄しています）。これは並行プログラムに影響しますが、高階関数にも影響します&lt;a href=&quot;string#VALlength&quot;&gt; &lt;code&gt;String.length&lt;/code&gt; &lt;/a&gt;が後で呼び出されるクロージャを返した場合、このクロージャが完全に適用されて所有権を返すまで、 &lt;code&gt;s&lt;/code&gt; を変更しないでください。</target>
        </trans-unit>
        <trans-unit id="a0f9579a2db02b7e2d6ea5033fac1d3e370d16d1" translate="yes" xml:space="preserve">
          <source>The callstack for the allocation.</source>
          <target state="translated">割り当てのためのコールスタック。</target>
        </trans-unit>
        <trans-unit id="622bd19b67cd4c019f61e03bb878afac5759460b" translate="yes" xml:space="preserve">
          <source>The caml_startup function calls the uncaught exception handler (or enters the debugger, if running under ocamldebug) if an exception escapes from a top-level module initialiser. Such exceptions may be caught in the C code by instead using the caml_startup_exn function and testing the result using Is_exception_result (followed by Extract_exception if appropriate).</source>
          <target state="translated">caml_startup 関数は、トップレベルモジュールのイニシャライザから例外が発生した場合、捕捉されない例外ハンドラを呼び出します (または ocamldebug で実行している場合はデバッガに入ります)。そのような例外は、代わりに caml_startup_exn 関数を使用して Is_exception_result を使用して結果をテストすることで、C コードで捕捉することができます (その後、必要に応じて Extract_exception を実行します)。</target>
        </trans-unit>
        <trans-unit id="264cb221ad2c5021cb06f4e90ab892974f6027b4" translate="yes" xml:space="preserve">
          <source>The caml_startup function must be called from the main C program in order to initialize the OCaml runtime and execute the OCaml initialization code. Just like caml_main, it takes one argv parameter containing the command-line parameters. Unlike caml_main, this argv parameter is used only to initialize Sys.argv, but not for finding the name of the executable file.</source>
          <target state="translated">caml_startup 関数は、OCaml ランタイムを初期化し、OCaml の初期化コードを実行するために、メインの C プログラムから呼び出されなければなりません。caml_mainと同様に、コマンドラインパラメータを含むargvパラメータを1つ取ります。caml_main とは異なり、この argv パラメータは Sys.argv の初期化にのみ使用され、実行ファイルの名前を見つけるためには使用されません。</target>
        </trans-unit>
        <trans-unit id="2affb46e2f6bba633bb7602b97c665a41396ccad" translate="yes" xml:space="preserve">
          <source>The cases of a pattern matching (in the function, match and try constructs) can include guard expressions, which are arbitrary boolean expressions that must evaluate to true for the match case to be selected. Guards occur just before the -&amp;gt; token and are introduced by the when keyword:</source>
          <target state="translated">パターンマッチングのケース（関数、match、tryコンストラクト）には、ガード式を含めることができます。ガード式は、マッチケースを選択するためにtrueと評価する必要がある任意のブール式です。ガードは-&amp;gt;トークンの直前に発生し、whenキーワードによって導入されます。</target>
        </trans-unit>
        <trans-unit id="c57a5996cc3de19dcd4e1eed39d89bc12a76cdf5" translate="yes" xml:space="preserve">
          <source>The change in code size is also estimated: morally speaking it should be the change in machine code size, but since that is not available to the inliner, an approximation is used.</source>
          <target state="translated">コードサイズの変化も推定されます:道徳的にはマシンのコードサイズの変化であるべきですが、それはインライナーでは利用できないので、近似値が使用されます。</target>
        </trans-unit>
        <trans-unit id="ca1b550469abfe316a8551222d7494a0d41f29ab" translate="yes" xml:space="preserve">
          <source>The class Odoc_html.Generator.html inherits from the class Odoc_html.info, containing a field tag_functions which is a list pairs composed of a custom tag (e.g. &quot;foo&quot;) and a function taking a text and returning HTML code (of type string). To handle a new tag bar, extend the current HTML generator and complete the tag_functions field:</source>
          <target state="translated">Odoc_html.Generator.html クラスは Odoc_html.info クラスを継承しており、フィールド tag_functions を含んでいます。これは、カスタムタグ (例えば &quot;foo&quot;)と、テキストを取得して HTML コード (文字列型)を返す関数からなるリストペアです。新しいタグバーを扱うには、現在のHTMLジェネレーターを拡張し、tag_functionsフィールドを完成させます。</target>
        </trans-unit>
        <trans-unit id="926c19980b2db5430ad107b75fe1458a4f3fbdcc" translate="yes" xml:space="preserve">
          <source>The class bank is the &lt;em&gt;real&lt;/em&gt; implementation of the bank account (it could have been inlined). This is the one that will be used for further extensions, refinements, etc. Conversely, the client will only be given the client view.</source>
          <target state="translated">クラス銀行は、銀行口座の&lt;em&gt;実際の&lt;/em&gt;実装です（インライン化されている可能性があります）。これは、さらなる拡張や改良などに使用されるものです。逆に、クライアントにはクライアントビューのみが与えられます。</target>
        </trans-unit>
        <trans-unit id="e75252ec56a2bb1491e257e9361045a0dd0b5821" translate="yes" xml:space="preserve">
          <source>The class colored_circle is a specialized version of class circle that requires the type of the center to unify with #colored_point, and adds a method color. Note that when specializing a parameterized class, the instance of type parameter must always be explicitly given. It is again written between [ and ].</source>
          <target state="translated">colored_circle クラスは、中心の型を #colored_point で統一する必要があり、メソッドの色を追加するクラス circle の特化版です。パラメタ化されたクラスを特殊化する際には、必ず明示的にtype parameterのインスタンスを与えなければならないことに注意してください。これも[]と[]の間に書きます。</target>
        </trans-unit>
        <trans-unit id="79b45dbbed1c7c5a93e33df7a349eb52d30c016c" translate="yes" xml:space="preserve">
          <source>The class money could naturally carry another binary method. Here is a direct definition:</source>
          <target state="translated">クラスのお金は、当然のことながら、別のバイナリメソッドを運ぶことができました。ここに直接の定義があります。</target>
        </trans-unit>
        <trans-unit id="8da53bfa481f42c4800f57d82c95a21c851133c0" translate="yes" xml:space="preserve">
          <source>The class observer has a distinguished method notify that requires two arguments, a subject and an event to execute an action.</source>
          <target state="translated">クラス・オブザーバには、アクションを実行するためにサブジェクトとイベントの2つの引数を必要とするnotifyメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="df3bd4e2828bcd091f80465c81ab6f432a8b0a11" translate="yes" xml:space="preserve">
          <source>The class point below defines one instance variable x and two methods get_x and move. The initial value of the instance variable is 0. The variable x is declared mutable, so the method move can change its value.</source>
          <target state="translated">以下のクラスポイントでは、1つのインスタンス変数xと2つのメソッドget_xとmoveを定義しています。インスタンス変数の初期値は0で、変数xはmutableと宣言されているので、moveメソッドはその値を変更することができます。</target>
        </trans-unit>
        <trans-unit id="4593d18e4f9e303d386e01a8341f25ec6716bf22" translate="yes" xml:space="preserve">
          <source>The class point can also be abstracted over the initial values of the x coordinate.</source>
          <target state="translated">また、クラス点は、x座標の初期値にわたって抽象化することもできます。</target>
        </trans-unit>
        <trans-unit id="d631271177c3626e572631b72bb8a711d8d83fe5" translate="yes" xml:space="preserve">
          <source>The class subject remembers a list of observers in an instance variable, and has a distinguished method notify_observers to broadcast the message notify to all observers with a particular event e.</source>
          <target state="translated">クラスのサブジェクトは、インスタンス変数にオブザーバーのリストを記憶し、特定のイベントeを持つすべてのオブザーバーにメッセージ通知をブロードキャストするために区別されたメソッドnotify_observersを持っています。</target>
        </trans-unit>
        <trans-unit id="4100d907acfdcabf2433a494dd1a3e4d594e0d96" translate="yes" xml:space="preserve">
          <source>The class type expression &lt;a href=&quot;types#typexpr&quot;&gt;typexpr&lt;/a&gt;-&amp;gt;&lt;a href=&quot;#class-type&quot;&gt;class-type&lt;/a&gt; is the type of class functions (functions from values to classes) that take as argument a value of type &lt;a href=&quot;types#typexpr&quot;&gt;typexpr&lt;/a&gt; and return as result a class of type &lt;a href=&quot;#class-type&quot;&gt;class-type&lt;/a&gt;.</source>
          <target state="translated">クラス型式&lt;a href=&quot;types#typexpr&quot;&gt;typexpr-&lt;/a&gt; &amp;gt; &lt;a href=&quot;#class-type&quot;&gt;class-type&lt;/a&gt;は、&lt;a href=&quot;types#typexpr&quot;&gt;typexpr&lt;/a&gt;型の値を引数として取り、結果として&lt;a href=&quot;#class-type&quot;&gt;class-type&lt;/a&gt;型のクラスを返すクラス関数（値からクラスへの関数）の型です。</target>
        </trans-unit>
        <trans-unit id="ccb1b7cb0b9bf09c44c246b3d8b635b8df171c1b" translate="yes" xml:space="preserve">
          <source>The class type expression object [(&lt;a href=&quot;types#typexpr&quot;&gt;typexpr&lt;/a&gt;)] {&lt;a href=&quot;#class-field-spec&quot;&gt;class-field-spec&lt;/a&gt;} end is the type of a class body. It specifies its instance variables and methods. In this type, &lt;a href=&quot;types#typexpr&quot;&gt;typexpr&lt;/a&gt; is matched against the self type, therefore providing a name for the self type.</source>
          <target state="translated">クラス型式オブジェクト[（&lt;a href=&quot;types#typexpr&quot;&gt;typexpr&lt;/a&gt;）] { &lt;a href=&quot;#class-field-spec&quot;&gt;class-field-spec&lt;/a&gt; } endは、クラス本体の型です。インスタンス変数とメソッドを指定します。このタイプでは、&lt;a href=&quot;types#typexpr&quot;&gt;typexpr&lt;/a&gt;はselfタイプと照合されるため、selfタイプの名前が提供されます。</target>
        </trans-unit>
        <trans-unit id="54e83d883d9c89940ee922a012fe9586b0e83667" translate="yes" xml:space="preserve">
          <source>The class type parameters correspond to the ones of the class type and of the two type abbreviations defined by the class binding. They must be bound to actual types in the class definition using type constraints. So that the abbreviations are well-formed, type variables of the inferred type of the class must either be type parameters or be bound in the constraint clause.</source>
          <target state="translated">クラス型パラメータは,クラス型と,クラスバインディングで定義された2つの型の省略形に対応しています。これらは,型制約を用いて,クラス定義の実際の型にバインドされなければなりません.省略形が適切に形成されるように,クラスの推論型の型変数は,型パラメータであるか,制約節でバインドされていなければなりません.</target>
        </trans-unit>
        <trans-unit id="a5fa7a046792c2877d81d775912d2e5ba688e9f6" translate="yes" xml:space="preserve">
          <source>The closing tag marker, as given by &lt;code&gt;mark_close_stag&amp;nbsp;t&lt;/code&gt;, is written into the output device of the formatter; then the &lt;code&gt;print_close_stag&lt;/code&gt; tag-printing function of the formatter is called with &lt;code&gt;t&lt;/code&gt; as argument.</source>
          <target state="translated">&lt;code&gt;mark_close_stag&amp;nbsp;t&lt;/code&gt; で指定された終了タグマーカーは、フォーマッタの出力デバイスに書き込まれます。次に、 &lt;code&gt;print_close_stag&lt;/code&gt; タグ印刷関数が、 &lt;code&gt;t&lt;/code&gt; を引数として呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4f5a0cc5c3693ff9428c3a313f5f025808cf9ecb" translate="yes" xml:space="preserve">
          <source>The code resulting from applying -O3 -unbox-closures to this code passes the free variables via function arguments in order to eliminate all closure allocation in this example (aside from any that might be performed inside printf).</source>
          <target state="translated">このコードに -O3 -unbox-closures を適用した結果のコードは、この例のクロージャの割り当てをすべて排除するために、関数の引数を介して自由な変数を渡しています (printf の中で実行されるかもしれないものは別として)。</target>
        </trans-unit>
        <trans-unit id="a56e3d3e4c999f25e3f562df13ab73e9511528d5" translate="yes" xml:space="preserve">
          <source>The command line analysis is performed after loading the module containing the documentation generator, thus allowing command line options to be added to the list of existing ones. Adding an option can be done with the function</source>
          <target state="translated">コマンドライン解析は、ドキュメント生成器を含むモジュールをロードした後に実行され、既存のもののリストにコマンドラインオプションを追加することができます。オプションを追加するには</target>
        </trans-unit>
        <trans-unit id="713e03c7df6783cbf595d790dada27c89d701a1d" translate="yes" xml:space="preserve">
          <source>The command line arguments given to the process.</source>
          <target state="translated">プロセスに与えられるコマンドライン引数。</target>
        </trans-unit>
        <trans-unit id="7aeece9eee37cad413bcf22ebfdfa0c87857f155" translate="yes" xml:space="preserve">
          <source>The command line arguments given to the process. The first element is the command name used to invoke the program. The following elements are the command-line arguments given to the program.</source>
          <target state="translated">プロセスに与えられるコマンドライン引数。最初の要素は、プログラムを呼び出すために使用されるコマンド名です。次の要素は、プログラムに与えられるコマンドライン引数です。</target>
        </trans-unit>
        <trans-unit id="351afc02e66d69b38e7fb7bbf282c52d820d0b73" translate="yes" xml:space="preserve">
          <source>The command quit exits the debugger. You can also exit the debugger by typing an end-of-file character (usually ctrl-D).</source>
          <target state="translated">コマンド quit はデバッガを終了します。また、ファイル終端文字 (通常は ctrl-D)を入力してデバッガを終了することもできます。</target>
        </trans-unit>
        <trans-unit id="e23e32f6685f8bb7b921c0aa6a10415254fe4726" translate="yes" xml:space="preserve">
          <source>The compare field can be set to custom_compare_default; this default comparison function simply raises Failure.</source>
          <target state="translated">比較フィールドを custom_compare_default に設定することができます。このデフォルトの比較関数は単に失敗を発生させます。</target>
        </trans-unit>
        <trans-unit id="400936dd851589bd58319e0915e19ac225ad000b" translate="yes" xml:space="preserve">
          <source>The compare field contains a pointer to a C function that is called whenever two custom blocks are compared using OCaml&amp;rsquo;s generic comparison operators (=, &amp;lt;&amp;gt;, &amp;lt;=, &amp;gt;=, &amp;lt;, &amp;gt; and compare). The C function should return 0 if the data contained in the two blocks are structurally equal, a negative integer if the data from the first block is less than the data from the second block, and a positive integer if the data from the first block is greater than the data from the second block.</source>
          <target state="translated">比較フィールドには、OCamlの汎用比較演算子（=、&amp;lt;&amp;gt;、&amp;lt;=、&amp;gt; =、&amp;lt;、&amp;gt;およびcompare）を使用して2つのカスタムブロックが比較されるたびに呼び出されるC関数へのポインターが含まれています。C関数は、2つのブロックに含まれるデータが構造的に等しい場合は0を返し、最初のブロックのデータが2番目のブロックのデータよりも小さい場合は負の整数を返し、最初のブロックのデータが2番目のブロックのデータよりも大きい。</target>
        </trans-unit>
        <trans-unit id="fc7b967b6bfa6059a95a5177a3d4d949e36cefb7" translate="yes" xml:space="preserve">
          <source>The compare_ext field can be set to custom_compare_ext_default; this default comparison function simply raises Failure.</source>
          <target state="translated">compare_ext フィールドを custom_compare_ext_default に設定することができます。</target>
        </trans-unit>
        <trans-unit id="2e507c128d533ecafbf0707e3311fd3954593733" translate="yes" xml:space="preserve">
          <source>The comparison function for 16-character digest, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt; and the implementation shared with &lt;a href=&quot;string#VALcompare&quot;&gt;&lt;code&gt;String.compare&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様の16文字ダイジェストの比較関数と&lt;a href=&quot;string#VALcompare&quot;&gt; &lt;code&gt;String.compare&lt;/code&gt; と&lt;/a&gt;共有される実装。</target>
        </trans-unit>
        <trans-unit id="2d93ed75e8c4197749446b6127b8c28c77f22cc5" translate="yes" xml:space="preserve">
          <source>The comparison function for 16-character digest, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt; and the implementation shared with &lt;a href=&quot;string#VALcompare&quot;&gt;&lt;code&gt;String.compare&lt;/code&gt;&lt;/a&gt;. Along with the type &lt;code&gt;t&lt;/code&gt;, this function &lt;code&gt;compare&lt;/code&gt; allows the module &lt;code&gt;Digest&lt;/code&gt; to be passed as argument to the functors &lt;a href=&quot;set.make&quot;&gt;&lt;code&gt;Set.Make&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;map.make&quot;&gt;&lt;code&gt;Map.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様の16文字ダイジェストの比較関数と&lt;a href=&quot;string#VALcompare&quot;&gt; &lt;code&gt;String.compare&lt;/code&gt; と&lt;/a&gt;共有される実装。タイプ &lt;code&gt;t&lt;/code&gt; とともに、この関数 &lt;code&gt;compare&lt;/code&gt; を使用すると、モジュール &lt;code&gt;Digest&lt;/code&gt; をファンクター&lt;a href=&quot;set.make&quot;&gt; &lt;code&gt;Set.Make&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;map.make&quot;&gt; &lt;code&gt;Map.Make&lt;/code&gt; に&lt;/a&gt;引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="e9f9a53259e71203663f8e69d67e5c99f6aeaf69" translate="yes" xml:space="preserve">
          <source>The comparison function for 32-bit integers, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様の32ビット整数の比較関数。</target>
        </trans-unit>
        <trans-unit id="52c057344f74f3ec299881602b4bac70c2781e4d" translate="yes" xml:space="preserve">
          <source>The comparison function for 32-bit integers, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;. Along with the type &lt;code&gt;t&lt;/code&gt;, this function &lt;code&gt;compare&lt;/code&gt; allows the module &lt;code&gt;Int32&lt;/code&gt; to be passed as argument to the functors &lt;a href=&quot;set.make&quot;&gt;&lt;code&gt;Set.Make&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;map.make&quot;&gt;&lt;code&gt;Map.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様の32ビット整数の比較関数。タイプ &lt;code&gt;t&lt;/code&gt; とともに、この関数 &lt;code&gt;compare&lt;/code&gt; を使用すると、モジュール &lt;code&gt;Int32&lt;/code&gt; をファンクター&lt;a href=&quot;set.make&quot;&gt; &lt;code&gt;Set.Make&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;map.make&quot;&gt; &lt;code&gt;Map.Make&lt;/code&gt; に&lt;/a&gt;引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="32ed748cfcec44e96e26180791258594924fa2f5" translate="yes" xml:space="preserve">
          <source>The comparison function for 64-bit integers, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様の64ビット整数の比較関数。</target>
        </trans-unit>
        <trans-unit id="5d3cd3ac1cd893b13ee278ef969766aaeeb6d9d9" translate="yes" xml:space="preserve">
          <source>The comparison function for 64-bit integers, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;. Along with the type &lt;code&gt;t&lt;/code&gt;, this function &lt;code&gt;compare&lt;/code&gt; allows the module &lt;code&gt;Int64&lt;/code&gt; to be passed as argument to the functors &lt;a href=&quot;set.make&quot;&gt;&lt;code&gt;Set.Make&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;map.make&quot;&gt;&lt;code&gt;Map.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様の64ビット整数の比較関数。タイプ &lt;code&gt;t&lt;/code&gt; とともに、この関数 &lt;code&gt;compare&lt;/code&gt; を使用すると、モジュール &lt;code&gt;Int64&lt;/code&gt; をファンクター&lt;a href=&quot;set.make&quot;&gt; &lt;code&gt;Set.Make&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;map.make&quot;&gt; &lt;code&gt;Map.Make&lt;/code&gt; に&lt;/a&gt;引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="bea1fb4f967f6e930a0a3f1b6dd8b3d9440baccf" translate="yes" xml:space="preserve">
          <source>The comparison function for byte sequences, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様のバイトシーケンスの比較関数。</target>
        </trans-unit>
        <trans-unit id="c0c8f9bc7e72b4041efc638ebe36bb3de869d339" translate="yes" xml:space="preserve">
          <source>The comparison function for byte sequences, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;. Along with the type &lt;code&gt;t&lt;/code&gt;, this function &lt;code&gt;compare&lt;/code&gt; allows the module &lt;code&gt;Bytes&lt;/code&gt; to be passed as argument to the functors &lt;a href=&quot;set.make&quot;&gt;&lt;code&gt;Set.Make&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;map.make&quot;&gt;&lt;code&gt;Map.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様のバイトシーケンスの比較関数。タイプ &lt;code&gt;t&lt;/code&gt; とともに、この関数 &lt;code&gt;compare&lt;/code&gt; を使用すると、モジュール &lt;code&gt;Bytes&lt;/code&gt; を引数としてファンクター&lt;a href=&quot;set.make&quot;&gt; &lt;code&gt;Set.Make&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;map.make&quot;&gt; &lt;code&gt;Map.Make&lt;/code&gt; に渡すことができ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4248cb5972f6600877776ee5b7caa863058e709e" translate="yes" xml:space="preserve">
          <source>The comparison function for characters, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様の文字の比較関数。</target>
        </trans-unit>
        <trans-unit id="7f1c4568057988fd6052ab54ff61953ad29435a0" translate="yes" xml:space="preserve">
          <source>The comparison function for characters, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;. Along with the type &lt;code&gt;t&lt;/code&gt;, this function &lt;code&gt;compare&lt;/code&gt; allows the module &lt;code&gt;Char&lt;/code&gt; to be passed as argument to the functors &lt;a href=&quot;set.make&quot;&gt;&lt;code&gt;Set.Make&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;map.make&quot;&gt;&lt;code&gt;Map.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様の文字の比較関数。この関数 &lt;code&gt;compare&lt;/code&gt; を使用すると、タイプ &lt;code&gt;t&lt;/code&gt; とともに、モジュール &lt;code&gt;Char&lt;/code&gt; をファンクター&lt;a href=&quot;set.make&quot;&gt; &lt;code&gt;Set.Make&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;map.make&quot;&gt; &lt;code&gt;Map.Make&lt;/code&gt; に&lt;/a&gt;引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="4c2863b10b77fa26a22a5fb611bbcda7b42b0bce" translate="yes" xml:space="preserve">
          <source>The comparison function for native integers, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様のネイティブ整数の比較関数。</target>
        </trans-unit>
        <trans-unit id="13b4368747939c68aea788a4bc151e1321dcb60a" translate="yes" xml:space="preserve">
          <source>The comparison function for native integers, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;. Along with the type &lt;code&gt;t&lt;/code&gt;, this function &lt;code&gt;compare&lt;/code&gt; allows the module &lt;code&gt;Nativeint&lt;/code&gt; to be passed as argument to the functors &lt;a href=&quot;set.make&quot;&gt;&lt;code&gt;Set.Make&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;map.make&quot;&gt;&lt;code&gt;Map.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様のネイティブ整数の比較関数。この関数 &lt;code&gt;compare&lt;/code&gt; を使用すると、タイプ &lt;code&gt;t&lt;/code&gt; とともに、モジュール &lt;code&gt;Nativeint&lt;/code&gt; をファンクター&lt;a href=&quot;set.make&quot;&gt; &lt;code&gt;Set.Make&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;map.make&quot;&gt; &lt;code&gt;Map.Make&lt;/code&gt; に&lt;/a&gt;引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="b6d081b56d1fdbb9331b6bc0b8263048c0154295" translate="yes" xml:space="preserve">
          <source>The comparison function for strings, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様の文字列の比較関数。</target>
        </trans-unit>
        <trans-unit id="73fb41656984243b49dbd382d60fab144a75f5a1" translate="yes" xml:space="preserve">
          <source>The comparison function for strings, with the same specification as &lt;a href=&quot;stdlib#VALcompare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt;. Along with the type &lt;code&gt;t&lt;/code&gt;, this function &lt;code&gt;compare&lt;/code&gt; allows the module &lt;code&gt;String&lt;/code&gt; to be passed as argument to the functors &lt;a href=&quot;set.make&quot;&gt;&lt;code&gt;Set.Make&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;map.make&quot;&gt;&lt;code&gt;Map.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdlib#VALcompare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;と同じ仕様の文字列の比較関数。この関数 &lt;code&gt;compare&lt;/code&gt; を使用すると、タイプ &lt;code&gt;t&lt;/code&gt; とともに、モジュール &lt;code&gt;String&lt;/code&gt; をファンクター&lt;a href=&quot;set.make&quot;&gt; &lt;code&gt;Set.Make&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;map.make&quot;&gt; &lt;code&gt;Map.Make&lt;/code&gt; に&lt;/a&gt;引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="bf96782a960b80262c43276b69181745eee6a160" translate="yes" xml:space="preserve">
          <source>The compilation units loaded by this function are added to the &quot;allowed units&quot; list (see &lt;a href=&quot;dynlink#VALset_allowed_units&quot;&gt;&lt;code&gt;Dynlink.set_allowed_units&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">この関数によってロードされたコンパイル単位は、「許可された単位」リストに追加されます（&lt;a href=&quot;dynlink#VALset_allowed_units&quot;&gt; &lt;code&gt;Dynlink.set_allowed_units&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2f8562bc429c53a9ee1fb8567862cc87267a563b" translate="yes" xml:space="preserve">
          <source>The compilation units loaded by this function are not added to the &quot;allowed units&quot; list (see &lt;a href=&quot;dynlink#VALset_allowed_units&quot;&gt;&lt;code&gt;Dynlink.set_allowed_units&lt;/code&gt;&lt;/a&gt;) since they cannot be referenced from other compilation units.</source>
          <target state="translated">この関数によってロードされたコンパイルユニットは、他のコンパイルユニットから参照できないため、「許可されたユニット」リストに追加されません（&lt;a href=&quot;dynlink#VALset_allowed_units&quot;&gt; &lt;code&gt;Dynlink.set_allowed_units&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="707933d508f6c3a7f70392088950a49fbd52b59f" translate="yes" xml:space="preserve">
          <source>The compiler aims to share constants lifted to toplevel such that there are no duplicate definitions. However if .cmx files are hidden from the compiler then maximal sharing may not be possible.</source>
          <target state="translated">コンパイラは、トップレベルに持ち上げられた定数を、定義が重複しないように共有することを目的としています。しかし、.cmxファイルがコンパイラから隠されている場合は、最大の共有ができない場合があります。</target>
        </trans-unit>
        <trans-unit id="c5839a1745e82e6942b420724963de7198ab2be1" translate="yes" xml:space="preserve">
          <source>The compiler always derives the module name by taking the capitalized base name of the source file (.ml or .mli file). That is, it strips the leading directory name, if any, as well as the .ml or .mli suffix; then, it set the first letter to uppercase, in order to comply with the requirement that module names must be capitalized. For instance, compiling the file mylib/misc.ml provides an implementation for the module named Misc. Other compilation units may refer to components defined in mylib/misc.ml under the names Misc.name; they can also do open Misc, then use unqualified names name.</source>
          <target state="translated">コンパイラは常に、ソース・ファイル (.ml または .mli ファイル)の大文字表記のベース名を使用してモジュール名を導出します。つまり、モジュール名は大文字でなければならないという要件を満たすために、先頭のディレクトリ名と.mlまたは.mliの接尾辞があればそれを削除します。例えば、mylib/misc.mlというファイルをコンパイルすると、Misc.mlというモジュールの実装が提供されます。他のコンパイルユニットは、mylib/misc.mlで定義されたコンポーネントをMisc.nameという名前で参照することができます。</target>
        </trans-unit>
        <trans-unit id="12a0d3bf4431d29fd5d6cebb56459fe2a6246977" translate="yes" xml:space="preserve">
          <source>The compiler can prove invariance of function arguments across multiple functions within a recursive group (although this has some limitations, as shown by the example below).</source>
          <target state="translated">コンパイラは、再帰的なグループ内の複数の関数間の関数引数の不変性を証明することができます(これにはいくつかの制限がありますが、以下の例で示されているように)。</target>
        </trans-unit>
        <trans-unit id="c3a13caf32a0850458a50504a9f9b67fbe141403" translate="yes" xml:space="preserve">
          <source>The compiler cannot currently detect invariance in cases such as the following.</source>
          <target state="translated">コンパイラは現在のところ、以下のような場合に不変性を検出できません。</target>
        </trans-unit>
        <trans-unit id="6c5469d71b4fc3737466081b4134fc0bcc32f1c5" translate="yes" xml:space="preserve">
          <source>The compiler command line can be modified &amp;ldquo;from the outside&amp;rdquo; with the following mechanisms. These are experimental and subject to change. They should be used only for experimental and development work, not in released packages.</source>
          <target state="translated">コンパイラのコマンドラインは、次のメカニズムで「外部から」変更できます。これらは実験的なものであり、変更される可能性があります。これらは、リリースされたパッケージではなく、実験および開発作業にのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="9b6fd616c3d14b8722315aee0f9e2a79310b0ab4" translate="yes" xml:space="preserve">
          <source>The compiler distribution does not itself provide the facility for analysing Spacetime output files; this is left to external tools. The first such tool will appear in OPAM as a package called prof_spacetime. That tool will provide interactive graphical and terminal-based visualisation of the results of profiling.</source>
          <target state="translated">コンパイラ・ディストリビューションは時空間出力ファイルを解析する機能を提供していません。そのようなツールの最初のものが、 prof_spacetimeというパッケージとしてOPAMに登場します。このツールは、プロファイリングの結果を対話的にグラフィカルに表示したり、ターミナルベースで表示したりすることができます。</target>
        </trans-unit>
        <trans-unit id="431b5a10ae44ff4efacaa2847555e5ec57afda8d" translate="yes" xml:space="preserve">
          <source>The compiler distribution provides an &amp;ldquo;otherlibs&amp;rdquo; library called raw_spacetime_lib for decoding Spacetime files. This library provides facilities to read not only memory profiling information but also the full dynamic call graph of the profiled program which is written into Spacetime output files.</source>
          <target state="translated">コンパイラディストリビューションは、時空間ファイルをデコードするためのraw_spacetime_libと呼ばれる「otherlibs」ライブラリを提供します。このライブラリは、メモリプロファイリング情報だけでなく、時空間出力ファイルに書き込まれるプロファイルプログラムの完全な動的コールグラフを読み取る機能を提供します。</target>
        </trans-unit>
        <trans-unit id="36caea4a11df67f29a0533e03c9c03a280e97c4b" translate="yes" xml:space="preserve">
          <source>The compiler does not include the runtime system (nor a reference to it) in the generated program; it must be supplied separately.</source>
          <target state="translated">コンパイラは、生成されたプログラムにランタイムシステム(およびその参照)を含まないので、別途提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="9fb9134b61ba76fc9c4316c0291fbc13063e70af" translate="yes" xml:space="preserve">
          <source>The compiler is able to emit some information on its internal stages. It can output .cmt files for the implementation of the compilation unit and .cmti for signatures if the option -bin-annot is passed to it (see the description of -bin-annot below). Each such file contains a typed abstract syntax tree (AST), that is produced during the type checking procedure. This tree contains all available information about the location and the specific type of each term in the source file. The AST is partial if type checking was unsuccessful.</source>
          <target state="translated">コンパイラは内部ステージに関する情報を出力することができます。コンパイラはコンパイルユニットの実装のための.cmtファイルと署名のための.cmtiファイルを出力することができます(下記の-bin-annotの説明を参照してください)。このようなファイルにはそれぞれ型付き抽象構文ツリー(AST)が含まれており、型検査の際に生成されます。このツリーには、ソースファイル内の各項の位置と特定の型に関する利用可能なすべての情報が含まれています。型検査が失敗した場合、ASTは部分的なものになります。</target>
        </trans-unit>
        <trans-unit id="48ebb88864057cd3c0c7e6531c5d37c29d605813" translate="yes" xml:space="preserve">
          <source>The compiler notes down that for the function iter&amp;rsquo;, the argument f is specialised to the constant closure print_int. This means that the body of iter&amp;rsquo; may be simplified:</source>
          <target state="translated">コンパイラーは、関数iter 'の場合、引数fは定数クロージャーprint_intに特化していることに注意してください。これは、iterの本体が単純化される可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="65c5761f18846d3de8e8d4bc7344497dc351852c" translate="yes" xml:space="preserve">
          <source>The compiler produces this error when it tries to read a compiled interface file (.cmi file) that has the wrong structure. This means something went wrong when this .cmi file was written: the disk was full, the compiler was interrupted in the middle of the file creation, and so on. This error can also appear if a .cmi file is modified after its creation by the compiler. Fix: remove the corrupted .cmi file, and rebuild it.</source>
          <target state="translated">間違った構造を持つコンパイルされたインターフェイス・ファイル(.cmi ファイル)を読み込もうとすると、コンパイラがこのエラーを出します。これは、この .cmi ファイルが書き込まれたときに何かが間違っていたことを意味します:ディスクがいっぱいになった、ファイル作成の途中でコンパイラが中断された、など。このエラーは、.cmiファイルが作成された後にコンパイラによって変更された場合にも発生します。対処法:破損した .cmi ファイルを削除し、再構築してください。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
