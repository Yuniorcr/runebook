<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="837e53257b3eec566bea2e67012cd4dadfb5bb32" translate="yes" xml:space="preserve">
          <source>Targets and output kinds</source>
          <target state="translated">ターゲットと出力の種類</target>
        </trans-unit>
        <trans-unit id="816c9fefceb8b2eba75d842698c8c325c361d2dc" translate="yes" xml:space="preserve">
          <source>Targets can be specified by setting a corresponding component property:</source>
          <target state="translated">対応するコンポーネントのプロパティを設定することで、ターゲットを指定することができます。</target>
        </trans-unit>
        <trans-unit id="ccd64eb3b2ae68576bc374a9f76f6dafc19a16b7" translate="yes" xml:space="preserve">
          <source>Teaching Kotlin with EduTools plugin</source>
          <target state="translated">EduToolsプラグインでKotlinを教える</target>
        </trans-unit>
        <trans-unit id="107721a9ab514d4563cc6535734a7356bb7e6b23" translate="yes" xml:space="preserve">
          <source>Technically, there is no difference between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;union&lt;/code&gt; types on the Kotlin side. We should note, that &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; properties of &lt;code&gt;MyUnion&lt;/code&gt; class in Kotlin use the same memory location to read/write their value just like &lt;code&gt;union&lt;/code&gt; does in C language.</source>
          <target state="translated">技術的には、Kotlin側の &lt;code&gt;struct&lt;/code&gt; 体型と &lt;code&gt;union&lt;/code&gt; 体型に違いはありません。私たちはそれを、注意してください、 &lt;code&gt;b&lt;/code&gt; 、及び &lt;code&gt;c&lt;/code&gt; 特性 &lt;code&gt;MyUnion&lt;/code&gt; の Kotlinでクラスが同じようにその値を読み出し/書き込みするために同じメモリ位置を使用する &lt;code&gt;union&lt;/code&gt; C言語で行います。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d53818b29193f314641d3739f638d9be2e9e5f4" translate="yes" xml:space="preserve">
          <source>Templates are supported both inside raw strings and inside escaped strings. If you need to represent a literal &lt;code&gt;$&lt;/code&gt; character in a raw string (which doesn't support backslash escaping), you can use the following syntax:</source>
          <target state="translated">テンプレートは、未加工文字列とエスケープ文字列の両方でサポートされています。生の文字列（バックスラッシュエスケープをサポートしない）でリテラル &lt;code&gt;$&lt;/code&gt; 文字を表す必要がある場合は、次の構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="7ba8959df1020b7c25355f02aa80fc7a01cc8776" translate="yes" xml:space="preserve">
          <source>Terminal flow operators</source>
          <target state="translated">ターミナルフローオペレータ</target>
        </trans-unit>
        <trans-unit id="8bc67143f47634cca6b14c4c30313696a3edee94" translate="yes" xml:space="preserve">
          <source>Terminal operators on flows are &lt;em&gt;suspending functions&lt;/em&gt; that start a collection of the flow. The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html&quot;&gt;collect&lt;/a&gt; operator is the most basic one, but there are other terminal operators, which can make it easier:</source>
          <target state="translated">フローのターミナルオペレーターは、フローの収集を開始&lt;em&gt;する機能&lt;/em&gt;を&lt;em&gt;一時停止しています&lt;/em&gt;。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html&quot;&gt;コレクト&lt;/a&gt;オペレータは、最も基本的なものですが、それは簡単に作ることができ、他のターミナルオペレーターは、あります。</target>
        </trans-unit>
        <trans-unit id="8761082f68b3e6705f4c38bb348056fcdd9cb6dd" translate="yes" xml:space="preserve">
          <source>Terminate the evaluation of the function.</source>
          <target state="translated">関数の評価を終了します。</target>
        </trans-unit>
        <trans-unit id="bd3961165a74d22116abf8cd7dfd89e1e128faab" translate="yes" xml:space="preserve">
          <source>Terminates the currently running process.</source>
          <target state="translated">現在実行中のプロセスを終了させます。</target>
        </trans-unit>
        <trans-unit id="4640b3677ae305cdd783f2fb2cb28eef6cd34e00" translate="yes" xml:space="preserve">
          <source>Ternary-operator &lt;code&gt;a ? b : c&lt;/code&gt;</source>
          <target state="translated">三項演算子 &lt;code&gt;a ? b : c&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c22a134e1f02cad64a3d132ad7049819fd878ba" translate="yes" xml:space="preserve">
          <source>Test code and resources shared between all platforms. Available in all multiplatform projects. Used in all test compilations of a project.</source>
          <target state="translated">テスト コードとリソースをすべてのプラットフォームで共有。すべてのマルチプラットフォーム プロジェクトで利用可能。プロジェクトのすべてのテスト コンパイルで使用されます。</target>
        </trans-unit>
        <trans-unit id="6f766a74653830a12657ec6c72f3933d6f2e1972" translate="yes" xml:space="preserve">
          <source>Test configuration</source>
          <target state="translated">テスト構成</target>
        </trans-unit>
        <trans-unit id="372bbf00df55ec21b53da581f9b6998ed6e0bdac" translate="yes" xml:space="preserve">
          <source>Test executable</source>
          <target state="translated">テスト実行ファイル</target>
        </trans-unit>
        <trans-unit id="23b06cefd18a3e9e852e245b75fa172dce42b67c" translate="yes" xml:space="preserve">
          <source>Test executable.</source>
          <target state="translated">実行可能ファイルをテストします。</target>
        </trans-unit>
        <trans-unit id="402aba565d558dcbcb7c225b6e1f4e58dbc667da" translate="yes" xml:space="preserve">
          <source>Test reports generation</source>
          <target state="translated">テストレポートの生成</target>
        </trans-unit>
        <trans-unit id="da5b6a7b5703c1c1698be24a1fa79fd7890fb1c1" translate="yes" xml:space="preserve">
          <source>Test run results in the console</source>
          <target state="translated">コンソールでのテスト実行結果</target>
        </trans-unit>
        <trans-unit id="1c718df4c6a07f654ca88944cfa217c182c74b06" translate="yes" xml:space="preserve">
          <source>TestClock</source>
          <target state="translated">TestClock</target>
        </trans-unit>
        <trans-unit id="fa1d9bd08b7bbcce4cacba29ac0abb1d8ea26e62" translate="yes" xml:space="preserve">
          <source>TestTimeSource</source>
          <target state="translated">TestTimeSource</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="d3b8064c2d7f14d3be517a2dd8d759b095d75329" translate="yes" xml:space="preserve">
          <source>Testing predicates</source>
          <target state="translated">述語のテスト</target>
        </trans-unit>
        <trans-unit id="c7dd4726947e8a4e69327ac444e2102f6d4c85c3" translate="yes" xml:space="preserve">
          <source>Tests are a safe place to add Kotlin to the codebase because they are not bundled with your application during packaging.</source>
          <target state="translated">パッケージング時にアプリケーションにバンドルされていないので、テストはコードベースにKotlinを追加するための安全な場所です。</target>
        </trans-unit>
        <trans-unit id="082fdf5c87614574580fe601c26048e8b6285351" translate="yes" xml:space="preserve">
          <source>TexImageSource</source>
          <target state="translated">TexImageSource</target>
        </trans-unit>
        <trans-unit id="06d4a26dfeb6fe515c1bd30f6921c66e729ad5b4" translate="yes" xml:space="preserve">
          <source>TextMetrics</source>
          <target state="translated">TextMetrics</target>
        </trans-unit>
        <trans-unit id="0c0a3e3c79ed645faf27df5d40c7372e38f10e27" translate="yes" xml:space="preserve">
          <source>TextTrackCueList</source>
          <target state="translated">TextTrackCueList</target>
        </trans-unit>
        <trans-unit id="86fb1c4a335a80c40bdf3e5b1a2aadd5059a2ca7" translate="yes" xml:space="preserve">
          <source>TextTrackKind</source>
          <target state="translated">TextTrackKind</target>
        </trans-unit>
        <trans-unit id="12de6f114f3e1a86a095e86dfa5c8b68ba37ba4b" translate="yes" xml:space="preserve">
          <source>TextTrackMode</source>
          <target state="translated">TextTrackMode</target>
        </trans-unit>
        <trans-unit id="53e95fc8d87c0686b0db942c629a742b7440e7d3" translate="yes" xml:space="preserve">
          <source>Thanks to the hierarchical project structure, libraries can also provide common APIs for a subset of targets. Learn more about &lt;a href=&quot;mpp-share-on-platforms#share-code-in-libraries&quot;&gt;sharing code in libraries&lt;/a&gt;.</source>
          <target state="translated">階層的なプロジェクト構造のおかげで、ライブラリはターゲットのサブセットに共通のAPIを提供することもできます。&lt;a href=&quot;mpp-share-on-platforms#share-code-in-libraries&quot;&gt;ライブラリでコードを共有する方法の&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="4455a59aa23e731930f0ed9b61b713623ec3ff4f" translate="yes" xml:space="preserve">
          <source>Thanks to the hierarchical project structure, libraries can also provide common APIs for a subset of targets. When a &lt;a href=&quot;mpp-publish-lib&quot;&gt;library is published&lt;/a&gt;, the API of its intermediate source sets is embedded into the library artifacts along with information about the project structure. When you use this library, the intermediate source sets of your project access only those APIs of the library which are available to the targets of each source set.</source>
          <target state="translated">階層的なプロジェクト構造のおかげで、ライブラリはターゲットのサブセットに共通のAPIを提供することもできます。場合は&lt;a href=&quot;mpp-publish-lib&quot;&gt;、ライブラリが公開され&lt;/a&gt;、その中間のソースセットのAPIは、プロジェクト構造に関する情報とともにライブラリーの成果物に埋め込まれています。このライブラリを使用する場合、プロジェクトの中間ソースセットは、各ソースセットのターゲットで使用できるライブラリのAPIにのみアクセスします。</target>
        </trans-unit>
        <trans-unit id="7878af5e1d970e3132e8a0a88487c501b01c97e2" translate="yes" xml:space="preserve">
          <source>That gives you a way to express queries via C#-like LINQ syntax, use lambdas to write much simpler code for asynchronous computations, and more. Read all the details &lt;a href=&quot;https://agrosner.gitbooks.io/dbflow/content/KotlinSupport.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">これにより、C＃のようなLINQ構文でクエリを表現したり、ラムダを使用して非同期計算用のはるかに単純なコードを記述したりできます。詳細は&lt;a href=&quot;https://agrosner.gitbooks.io/dbflow/content/KotlinSupport.html&quot;&gt;こちらを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="0edd9421fb5e5aa8cfee7f829a8302f1e02b82ec" translate="yes" xml:space="preserve">
          <source>That is because &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt; is a special &lt;em&gt;suspending function&lt;/em&gt; that does not block a thread, but &lt;em&gt;suspends&lt;/em&gt; coroutine and it can be only used from a coroutine.</source>
          <target state="translated">これは、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;遅延&lt;/a&gt;はスレッドをブロックせず、コルーチンを&lt;em&gt;一時停止&lt;/em&gt;する特別な&lt;em&gt;一時停止機能&lt;/em&gt;であり、コルーチンからのみ使用できるためです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="710fe831c742e4f0eb7d410a5e7f34322dc9bdb8" translate="yes" xml:space="preserve">
          <source>That is because &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt; is a special &lt;em&gt;suspending function&lt;/em&gt; that does not block a thread, but &lt;em&gt;suspends&lt;/em&gt; the coroutine, and it can be only used from a coroutine.</source>
          <target state="translated">これは、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;遅延&lt;/a&gt;はスレッドをブロックせずにコルーチンを&lt;em&gt;一時停止&lt;/em&gt;する特別な&lt;em&gt;一時停止関数&lt;/em&gt;であり、コルーチンからのみ使用できるためです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f1552ede00e5eac7ce32f87adbb1ebbd118c506" translate="yes" xml:space="preserve">
          <source>That is the common part. The code to generate the final message. It &lt;code&gt;expect&lt;/code&gt;s the platform to provide the platform name from the &lt;code&gt;expect fun platformName(): String&lt;/code&gt; function. We will use the &lt;code&gt;createApplicationScreenMessage&lt;/code&gt; from both Android and iOS applications.</source>
          <target state="translated">それが共通部分です。最終メッセージを生成するコード。プラットフォームは、 &lt;code&gt;expect fun platformName(): String&lt;/code&gt; 関数からプラットフォーム名を提供することを &lt;code&gt;expect&lt;/code&gt; ます。AndroidアプリケーションとiOSアプリケーションの両方から &lt;code&gt;createApplicationScreenMessage&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="2bc4829125d0242560af4ed1db4d6bbd3c58404a" translate="yes" xml:space="preserve">
          <source>That was easy, but maybe we'd want to do lazy-loading so that we won't spend time on extracting the fields that won't be used (especially if some of them contain a lot of data in a format that it is time-consuming to parse), and maybe we'd like support for default values. While we could implement that logic in a &lt;code&gt;get()&lt;/code&gt; block, it would need to be duplicated in every property. Alternatively, we could implement the logic in a separate &lt;code&gt;StringProperty&lt;/code&gt; class (note that this simple example is not thread-safe):</source>
          <target state="translated">それは簡単でしたが、使用されないフィールドを抽出するのに時間を費やさないように、レイジーロードを実行したい場合があります（特に、一部のフィールドに、解析に時間がかかります）、デフォルト値のサポートが必要な場合があります。このロジックを &lt;code&gt;get()&lt;/code&gt; ブロックで実装することもできますが、すべてのプロパティで複製する必要があります。または、別の &lt;code&gt;StringProperty&lt;/code&gt; クラスにロジックを実装することもできます（この単純な例はスレッドセーフではないことに注意してください）。</target>
        </trans-unit>
        <trans-unit id="7c754aa21a3405ebaf37834b83155abdf27ac763" translate="yes" xml:space="preserve">
          <source>That will force the Objc header to mark &lt;code&gt;myVal&lt;/code&gt; as non-null.</source>
          <target state="translated">これにより、Objcヘッダーが &lt;code&gt;myVal&lt;/code&gt; をnull以外としてマークします。</target>
        </trans-unit>
        <trans-unit id="ec91ab1097ba6574aef9c9b3b66e7a3cac24bd22" translate="yes" xml:space="preserve">
          <source>That will force the Objective-C header to mark &lt;code&gt;myVal&lt;/code&gt; as non-null.</source>
          <target state="translated">これにより、Objective-Cヘッダーが &lt;code&gt;myVal&lt;/code&gt; をnull以外としてマークするように強制されます。</target>
        </trans-unit>
        <trans-unit id="679e649b9b5fbcdbe531734cbf672d185a685015" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why if you wanted to use &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; inside &lt;code&gt;when&lt;/code&gt; expressions in loops, you had to &lt;a href=&quot;returns#break-and-continue-labels&quot;&gt;label&lt;/a&gt; them, which became rather cumbersome.</source>
          <target state="translated">そのため、ループ内の式の &lt;code&gt;when&lt;/code&gt; &lt;code&gt;break&lt;/code&gt; を使用し &lt;code&gt;continue&lt;/code&gt; 内部を続行する場合は、それらに&lt;a href=&quot;returns#break-and-continue-labels&quot;&gt;ラベル&lt;/a&gt;を付ける必要があり、かなり面倒になりました。</target>
        </trans-unit>
        <trans-unit id="0f4622a697b62b60beae07bb6cb2be3136a91e3c" translate="yes" xml:space="preserve">
          <source>That's all! Note that &lt;code&gt;kapt&lt;/code&gt; takes care of your Java files as well, so you don't need to keep the &lt;code&gt;annotationProcessor&lt;/code&gt; dependency.</source>
          <target state="translated">それで全部です！注意 &lt;code&gt;kapt&lt;/code&gt; は、あなたが維持する必要がないので、同様にあなたのJavaファイルの世話を &lt;code&gt;annotationProcessor&lt;/code&gt; の依存関係を。</target>
        </trans-unit>
        <trans-unit id="24349cf6cc7cf7f9b384531cea8b8f5b11489c77" translate="yes" xml:space="preserve">
          <source>That's how you add the plugin in Gradle:</source>
          <target state="translated">それがGradleでプラグインを追加する方法です。</target>
        </trans-unit>
        <trans-unit id="a1ab5b0ae87620b6ed26788a9947060cc8e1a1d4" translate="yes" xml:space="preserve">
          <source>That's it, our library is now successfully published and any Kotlin project can depend on it, whether it is another common library, JVM, JS, or Native application.</source>
          <target state="translated">これで、私たちのライブラリは無事に公開され、他の一般的なライブラリ、JVM、JS、ネイティブアプリケーションなど、どのようなKotlinプロジェクトでも依存することができるようになりました。</target>
        </trans-unit>
        <trans-unit id="736d96c876d3629aa01920322b964b507fdb9a3c" translate="yes" xml:space="preserve">
          <source>That's it, we are good to go and write code under &lt;code&gt;src/main/kotlin&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;src/main/kotlin&lt;/code&gt; の下にコードを記述できます。</target>
        </trans-unit>
        <trans-unit id="b79f3592a2bc46aa2f1d8a2fe0f2f1a3ad0a665d" translate="yes" xml:space="preserve">
          <source>That's why the actual signature of &lt;code&gt;addAll()&lt;/code&gt; is the following:</source>
          <target state="translated">そのため、 &lt;code&gt;addAll()&lt;/code&gt; の実際のシグネチャは次のようになります。</target>
        </trans-unit>
        <trans-unit id="5cebaf2e4c811fba9f733598c7e0ab2cbbdabb01" translate="yes" xml:space="preserve">
          <source>That's why we have the following migration plan instead:</source>
          <target state="translated">そのため、代わりに次のような移住計画があります。</target>
        </trans-unit>
        <trans-unit id="ed972239c05a1ce2160c2bcfca2e4a8ef0e2db12" translate="yes" xml:space="preserve">
          <source>The &quot;ping&quot; coroutine is started first, so it is the first one to receive the ball. Even though &quot;ping&quot; coroutine immediately starts receiving the ball again after sending it back to the table, the ball gets received by the &quot;pong&quot; coroutine, because it was already waiting for it:</source>
          <target state="translated">ping」コルーチンは最初に開始されるので、最初にボールを受け取るのは「ping」コルーチンである。ボールをテーブルに戻した後、すぐに「ping」コルーチンが再びボールの受信を開始しても、ボールは「pong」コルーチンが待っていたので、「pong」コルーチンに受信されてしまいます。</target>
        </trans-unit>
        <trans-unit id="c7440a8c30ab97822c9d77fe495203fe0ef8e721" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;manual&amp;rdquo; workaround is to store the values of sub-expressions with control flow in variables, instead of evaluating them directly inside the call arguments. It&amp;rsquo;s similar to &lt;code&gt;-Xnormalize-constructor-calls=enable&lt;/code&gt;.</source>
          <target state="translated">「手動の」回避策は、制御引数を含む部分式の値を、呼び出し引数の中で直接評価するのではなく、変数に格納することです。これは &lt;code&gt;-Xnormalize-constructor-calls=enable&lt;/code&gt; に似ています。</target>
        </trans-unit>
        <trans-unit id="b2dac38fb13b33ed15d5a221ea9b31acee5a3f83" translate="yes" xml:space="preserve">
          <source>The (complete) C data type.</source>
          <target state="translated">(完全な)Cデータ型。</target>
        </trans-unit>
        <trans-unit id="d40e2aa06e1f3081a9ba55e866548f768b24f0de" translate="yes" xml:space="preserve">
          <source>The (possibly empty) sequence of immutable C values. It is self-contained and doesn't depend on native memory.</source>
          <target state="translated">不変のC値の(空の可能性のある)シーケンス。自己完結型で、ネイティブメモリには依存しません。</target>
        </trans-unit>
        <trans-unit id="7b6a69c655f68801070a7ea7a1009ee4bf0a261f" translate="yes" xml:space="preserve">
          <source>The 64-bit Android Native target require a Linux or macOS host. The 32-bit Android Native target can be built on any supported host.</source>
          <target state="translated">64ビットAndroid Nativeターゲットは、LinuxまたはmacOSホストが必要です。32ビットAndroid Nativeターゲットは、サポートされているホスト上であればどのようなホストでもビルドできます。</target>
        </trans-unit>
        <trans-unit id="d0dc19249da02268a7197420a7bf7e4b0dc580f6" translate="yes" xml:space="preserve">
          <source>The 64-bit target requires a Linux or macOS host.</source>
          <target state="translated">64ビットターゲットでは、LinuxまたはmacOSホストが必要です。</target>
        </trans-unit>
        <trans-unit id="025e0471d3315a226930949e631a17bb911bf9c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#configuring-source-sets&quot;&gt;source sets&lt;/a&gt; and their &lt;a href=&quot;#adding-dependencies&quot;&gt;dependencies&lt;/a&gt; are then configured as follows:</source>
          <target state="translated">次に、&lt;a href=&quot;#configuring-source-sets&quot;&gt;ソースセット&lt;/a&gt;とその&lt;a href=&quot;#adding-dependencies&quot;&gt;依存関係&lt;/a&gt;を次のように構成します。</target>
        </trans-unit>
        <trans-unit id="587688423378c35c59750f8053e3e7120acd7a77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;-c-pointed/index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">特定の解釈なしの&lt;a href=&quot;-c-pointed/index&quot;&gt;CPointed&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d6d7555b1e73df12c61cc2d2ea015a73f43aed2f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../-c-pointed/index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">特定の解釈なしの&lt;a href=&quot;../-c-pointed/index&quot;&gt;CPointed&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e54545b48334a1124feb75af3b7057b37b313a69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt;&lt;code&gt;minusAssign&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;-=&lt;/code&gt;) operator is also available for mutable maps.</source>
          <target state="translated">&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt; &lt;code&gt;minusAssign&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;-=&lt;/code&gt; ）演算子は、また、変更可能なマップのために利用可能です。</target>
        </trans-unit>
        <trans-unit id="4ff365b4410b0b6619038682a29eefb850097313" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-dsl-marker/index&quot;&gt;&lt;code&gt;@DslMarker&lt;/code&gt;&lt;/a&gt; annotation allows to restrict the use of receivers from outer scopes in a DSL context. Consider the canonical &lt;a href=&quot;type-safe-builders&quot;&gt;HTML builder example&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-dsl-marker/index&quot;&gt; &lt;code&gt;@DslMarker&lt;/code&gt; の&lt;/a&gt;アノテーションは、DSLの文脈において、外側のスコープから受信機の使用を制限することを可能にします。正規の&lt;a href=&quot;type-safe-builders&quot;&gt;HTMLビルダーの例を&lt;/a&gt;考えてみます。</target>
        </trans-unit>
        <trans-unit id="0ed846a235f919618387ac6874100bd335e7cf20" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop.</source>
          <target state="translated">&lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C相互運用機能のドキュメントの&lt;/a&gt;ドキュメントには、相互運用機能のより高度なシナリオをカバーしています。</target>
        </trans-unit>
        <trans-unit id="1b6d8c3337d9451276257f3dd3c6b569bd207944" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../tutorials/httpservlets&quot;&gt;Creating Web Applications with Http Servlets&lt;/a&gt; and &lt;a href=&quot;../tutorials/spring-boot-restful&quot;&gt;Creating a RESTful Web Service with Spring Boot&lt;/a&gt; tutorials show you how you can build and run very small Web applications in Kotlin.</source>
          <target state="translated">&lt;a href=&quot;../tutorials/httpservlets&quot;&gt;HTTPサーブレット&lt;/a&gt;を使用したWebアプリケーションの作成および&lt;a href=&quot;../tutorials/spring-boot-restful&quot;&gt;Spring Bootを使用したRESTful Webサービスの作成の&lt;/a&gt;チュートリアルでは、Kotlinで非常に小さなWebアプリケーションを構築して実行する方法を示します。</target>
        </trans-unit>
        <trans-unit id="370b9ddcfe0daa7a4e64218bc3548eec2e892b70" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;building-mpp-with-gradle#adding-dependencies&quot;&gt;dependencies configuration&lt;/a&gt; has been changed; dependencies are now specified separately for each source root.</source>
          <target state="translated">&lt;a href=&quot;building-mpp-with-gradle#adding-dependencies&quot;&gt;依存関係の設定が&lt;/a&gt;変更されました。依存関係は現在、ソースルートごとに個別に指定されています。</target>
        </trans-unit>
        <trans-unit id="674f31521000a6f54abe7364383ba3624d590692" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;prefix&lt;/a&gt; argument, if specified, must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as &quot;job&quot; or &quot;mail&quot;.</source>
          <target state="translated">&lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;接頭&lt;/a&gt;引数は、指定された場合、少なくとも3つの文字でなければなりません。プレフィックスは、「job」や「mail」などの短く意味のある文字列にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="232e0eee7b10204645b3dd32191de6618efcf17f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;prefix&lt;/a&gt; argument, if specified, must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as &quot;job&quot; or &quot;mail&quot;.</source>
          <target state="translated">&lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;接頭&lt;/a&gt;引数は、指定された場合、少なくとも3つの文字でなければなりません。プレフィックスは、「job」や「mail」などの短く意味のある文字列にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="269230aa3731ce52c181b4cdd4ea09cfe0397b67" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;to&lt;/a&gt; value should be less than or equal to &lt;code&gt;this&lt;/code&gt; value. If the &lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;to&lt;/a&gt; value is greater than &lt;code&gt;this&lt;/code&gt; value the returned progression is empty.</source>
          <target state="translated">値未満であるか等しい必要があり &lt;code&gt;this&lt;/code&gt; 値。場合&lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;に&lt;/a&gt;値がより大きい場合 &lt;code&gt;this&lt;/code&gt; 値が返さ進行は空です。&lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cedb826c5703fb7b6739f64d401e4c303edac3fd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;to&lt;/a&gt; value should be less than or equal to &lt;code&gt;this&lt;/code&gt; value. If the &lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;to&lt;/a&gt; value is greater than &lt;code&gt;this&lt;/code&gt; value the returned progression is empty.</source>
          <target state="translated">値未満であるか等しい必要があり &lt;code&gt;this&lt;/code&gt; 値。場合&lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;に&lt;/a&gt;値がより大きい場合 &lt;code&gt;this&lt;/code&gt; 値が返さ進行は空です。&lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="742e049bae3776c4fe6fe85ca2d3d815ec2c3864" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;先の&lt;/a&gt;マップ。</target>
        </trans-unit>
        <trans-unit id="c384276c1494f8a4d389142695a22613ee5962a0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;先の&lt;/a&gt;マップ。</target>
        </trans-unit>
        <trans-unit id="5d95b84298d2eab336155e81f552bfaa2e8cad8d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)))/destination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)))/destination&quot;&gt;先の&lt;/a&gt;マップ。</target>
        </trans-unit>
        <trans-unit id="30431003356faec04f84a3163d4307b1d6bea476" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)),%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.V)))/destination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)),%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.V)))/destination&quot;&gt;先の&lt;/a&gt;マップ。</target>
        </trans-unit>
        <trans-unit id="b8579547a2da389c681d511e85d24ffda687a3b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html library&lt;/a&gt; provides the ability to generate DOM elements using statically typed HTML builders (and besides JavaScript, it is even available on the JVM target!) To use the library, we need to include the corresponding repository and dependency to our &lt;code&gt;build.gradle.kts&lt;/code&gt; file:</source>
          <target state="translated">&lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.htmlライブラリは&lt;/a&gt;静的に型付けされたHTMLビルダーを使用してDOM要素を生成する機能を提供（およびJavaScriptのほかに、それはJVMターゲット上でも利用可能です！）ライブラリを使用するには、我々は我々に対応するリポジトリとの依存関係を含める必要が &lt;code&gt;build.gradle.kts&lt;/code&gt; ファイル：</target>
        </trans-unit>
        <trans-unit id="c60c5bfb4e99d5eeb15d99db1ac41367610d72e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html library&lt;/a&gt; provides the ability to generate DOM using statically typed HTML builders. The library is available when targeting the JVM as well as JavaScript. To use the library we need to include the corresponding dependency. In the case of Gradle this would be</source>
          <target state="translated">&lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.htmlライブラリは&lt;/a&gt;静的に型付けHTMLビルダーを使用してDOMを生成する機能を提供します。ライブラリは、JVMおよびJavaScriptを対象とする場合に使用できます。ライブラリを使用するには、対応する依存関係を含める必要があります。Gradleの場合、これは</target>
        </trans-unit>
        <trans-unit id="11ff0e8cd4fdb0fd27629f6a7e687a0b18080e1a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt;&lt;code&gt;@Nonnull&lt;/code&gt;&lt;/a&gt; annotation defined in &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR-305&lt;/a&gt; is supported for denoting nullability of Java types.</source>
          <target state="translated">&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR-305で&lt;/a&gt;定義された&lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt; &lt;code&gt;@Nonnull&lt;/code&gt; &lt;/a&gt;アノテーションは、Java型のnull可能性を示すためにサポートされています。</target>
        </trans-unit>
        <trans-unit id="a931a42af218b74ddfa5646228c068094e9e0035" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.android.com/topic/libraries/data-binding/index.html&quot;&gt;Data Binding Library&lt;/a&gt; allows you to bind your application data to the layouts in a concise way.</source>
          <target state="translated">&lt;a href=&quot;https://developer.android.com/topic/libraries/data-binding/index.html&quot;&gt;データバインディングライブラリを&lt;/a&gt;使用すると、簡潔な方法でレイアウトにアプリケーションデータをバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="a2b7c849d9b50965b814a88b2bb1cbbfb44ead82" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Delegation_pattern&quot;&gt;Delegation pattern&lt;/a&gt; has proven to be a good alternative to implementation inheritance, and Kotlin supports it natively requiring zero boilerplate code. A class &lt;code&gt;Derived&lt;/code&gt; can implement an interface &lt;code&gt;Base&lt;/code&gt; by delegating all of its public members to a specified object:</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Delegation_pattern&quot;&gt;委任パターンを&lt;/a&gt;実装継承に良い代替であることが判明している、とKotlinネイティブゼロ定型コードを必要とそれをサポートします。 &lt;code&gt;Derived&lt;/code&gt; クラスは、すべてのパブリックメンバーを指定されたオブジェクトに委任することにより、インターフェイス &lt;code&gt;Base&lt;/code&gt; を実装できます。</target>
        </trans-unit>
        <trans-unit id="89d682e482c895868a37ff624bc3eb18d04bf269" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C相互運用機能のドキュメントの&lt;/a&gt;ドキュメントには、相互運用機能のより高度なシナリオをカバー</target>
        </trans-unit>
        <trans-unit id="1238852d879c2d710110f6784edd1cb93433787e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C相互運用機能のドキュメントの&lt;/a&gt;ドキュメントには、相互運用機能のより高度なシナリオをカバーしています。</target>
        </trans-unit>
        <trans-unit id="ad07c99f0aec0609e4c5ce0e6d68e85b21cca8ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/ilmat192/kotlin-native-serialization-sample&quot;&gt;example project&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/ilmat192/kotlin-native-serialization-sample&quot;&gt;サンプルプロジェクト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ed3b8b8f640f1bc7c5c2be4b375d8acbd62a9be8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive.html&quot;&gt;onReceive&lt;/a&gt; clause in &lt;code&gt;select&lt;/code&gt; fails when the channel is closed causing the corresponding &lt;code&gt;select&lt;/code&gt; to throw an exception. We can use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt; clause to perform a specific action when the channel is closed. The following example also shows that &lt;code&gt;select&lt;/code&gt; is an expression that returns the result of its selected clause:</source>
          <target state="translated">チャネルが閉じていると、 &lt;code&gt;select&lt;/code&gt; の&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive.html&quot;&gt;onReceive&lt;/a&gt;句が失敗し、対応する &lt;code&gt;select&lt;/code&gt; が例外をスローします。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt;句を使用して、チャネルが閉じているときに特定のアクションを実行できます。次の例は、 &lt;code&gt;select&lt;/code&gt; が、選択された句の結果を返す式であることも示しています。</target>
        </trans-unit>
        <trans-unit id="e1ea544c54d470acdd2e4b26e7994a2782ee6c91" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt; intermediate operator, honoring exception transparency, catches only upstream exceptions (that is an exception from all the operators above &lt;code&gt;catch&lt;/code&gt;, but not below it). If the block in &lt;code&gt;collect { ... }&lt;/code&gt; (placed below &lt;code&gt;catch&lt;/code&gt;) throws an exception then it escapes:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;キャッチ&lt;/a&gt;中間体オペレータは、例外の透明性を尊重、（上記のすべての演算子からの例外であるだけ上流の例外をキャッチ &lt;code&gt;catch&lt;/code&gt; ではなく、それ以下）。 &lt;code&gt;collect { ... }&lt;/code&gt; （ &lt;code&gt;catch&lt;/code&gt; の下に配置）のブロックが例外をスローすると、エスケープします。</target>
        </trans-unit>
        <trans-unit id="04a54154f282527f51deac9433d1d87ac3f8758a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/launch-in.html&quot;&gt;launchIn&lt;/a&gt; terminal operator comes in handy here. By replacing &lt;code&gt;collect&lt;/code&gt; with &lt;code&gt;launchIn&lt;/code&gt; we can launch a collection of the flow in a separate coroutine, so that execution of further code immediately continues:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/launch-in.html&quot;&gt;launchIn&lt;/a&gt;ターミナルオペレーターは、ここでは便利です。 &lt;code&gt;collect&lt;/code&gt; を &lt;code&gt;launchIn&lt;/code&gt; に置き換えることで、フローのコレクションを別のコルーチンで起動できるため、次のコードの実行がすぐに続行されます。</target>
        </trans-unit>
        <trans-unit id="07edc2d6744fd7b7c26ec24ddbddd2605821ced8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt; operator, unlike &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt;, does not handle the exception. As we can see from the above example code, the exception still flows downstream. It will be delivered to further &lt;code&gt;onCompletion&lt;/code&gt; operators and can be handled with a &lt;code&gt;catch&lt;/code&gt; operator.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletionの&lt;/a&gt;オペレータとは異なり&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;キャッチは&lt;/a&gt;、例外を処理しません。上記のサンプルコードからわかるように、例外は引き続きダウンストリームに流れます。これは、さらに &lt;code&gt;onCompletion&lt;/code&gt; オペレーターに配信され、 &lt;code&gt;catch&lt;/code&gt; オペレーターで処理できます。</target>
        </trans-unit>
        <trans-unit id="7b2b6bd69393d0995b1d531e59de6e1690650085" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt; coroutine dispatcher starts a coroutine in the caller thread, but only until the first suspension point. After suspension it resumes the coroutine in the thread that is fully determined by the suspending function that was invoked. The unconfined dispatcher is appropriate for coroutines which neither consume CPU time nor update any shared data (like UI) confined to a specific thread.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt;コルーチンディスパッチャは、呼び出し側スレッドにコルーチンを開始するが、唯一の第1吊り点まで。一時停止後、呼び出された一時停止関数によって完全に決定されるスレッド内のコルーチンを再開します。制限のないディスパッチャーは、CPU時間を消費せず、特定のスレッドに制限された共有データ（UIなど）を更新しないコルーチンに適しています。</target>
        </trans-unit>
        <trans-unit id="567140fae1a9d885e6f93737a3b69b522b5149e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt; coroutine dispatcher starts coroutine in the caller thread, but only until the first suspension point. After suspension it resumes in the thread that is fully determined by the suspending function that was invoked. Unconfined dispatcher is appropriate when coroutine does not consume CPU time nor updates any shared data (like UI) that is confined to a specific thread.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt;コルーチンディスパッチャは、呼び出し側スレッドにコルーチンを開始するが、唯一の第1吊り点まで。一時停止後、呼び出された一時停止機能によって完全に決定されるスレッドで再開されます。非制限ディスパッチャーは、コルーチンがCPU時間を消費せず、特定のスレッドに限定されている共有データ（UIなど）を更新しない場合に適しています。</target>
        </trans-unit>
        <trans-unit id="2c62562cc26b6319588208cc31aa39bb7081cc62" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&quot;&gt;SupervisorJob&lt;/a&gt; can be used for these purposes. It is similar to a regular &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html&quot;&gt;Job&lt;/a&gt; with the only exception that cancellation is propagated only downwards. This can easily be demonstrated using the following example:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&quot;&gt;SupervisorJobは、&lt;/a&gt;これらの目的のために使用することができます。これは通常の&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html&quot;&gt;ジョブ&lt;/a&gt;と似ていますが、キャンセルが下向きにのみ伝播される点が異なります。これは、次の例を使用して簡単に示すことができます。</target>
        </trans-unit>
        <trans-unit id="2fa4aa3d9338fab053ab6c6470a7bf2907d31359" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is available for multiplatform tests. When you &lt;a href=&quot;mpp-create-lib&quot;&gt;create a multiplatform project&lt;/a&gt;, the Project Wizard automatically adds test dependencies to common and platform-specific source sets.</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; APIは、&lt;/a&gt;マルチプラットフォームのテストのために利用可能です。&lt;a href=&quot;mpp-create-lib&quot;&gt;マルチプラットフォームプロジェクト&lt;/a&gt;を作成すると、プロジェクトウィザードは、共通およびプラットフォーム固有のソースセットにテストの依存関係を自動的に追加します。</target>
        </trans-unit>
        <trans-unit id="63c0508b2176acb0adebd9fcfe4c34e271e74623" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is available for multiplatform tests. When you &lt;a href=&quot;mpp-create-lib&quot;&gt;create a multiplatform project&lt;/a&gt;, the Project Wizard automatically adds test dependencies to common and platform-specific source sets. If you didn&amp;rsquo;t use the Project Wizard to create your project, you can &lt;a href=&quot;using-gradle#set-dependencies-on-test-libraries&quot;&gt;add the dependencies manually&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; APIは、&lt;/a&gt;マルチプラットフォームのテストのために利用可能です。&lt;a href=&quot;mpp-create-lib&quot;&gt;マルチプラットフォームプロジェクト&lt;/a&gt;を作成すると、プロジェクトウィザードは、共通およびプラットフォーム固有のソースセットにテストの依存関係を自動的に追加します。プロジェクトウィザードを使用してプロジェクトを作成しなかった場合は&lt;a href=&quot;using-gradle#set-dependencies-on-test-libraries&quot;&gt;、依存関係を手動で追加&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="fa80881a041c6af7b81990bc6442fd43157648c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is available for testing different Kotlin projects.</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; APIは&lt;/a&gt;異なるKotlinプロジェクトをテストするために利用可能です。</target>
        </trans-unit>
        <trans-unit id="97cb445124dce985503ca787c74149658f56ba41" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is availble for multiplatform tests. Add the &lt;code&gt;kotlin-test-common&lt;/code&gt; and &lt;code&gt;kotlin-test-annotations-common&lt;/code&gt; dependencies to &lt;code&gt;commonTest&lt;/code&gt; to use the assertion functions like &lt;code&gt;kotlin.test.assertTrue(...)&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; APIは、&lt;/a&gt;マルチプラットフォームのテストのためのavailbleです。 &lt;code&gt;kotlin.test.assertTrue(...)&lt;/code&gt; などのアサーション関数を使用するには、 &lt;code&gt;kotlin-test-common&lt;/code&gt; および &lt;code&gt;kotlin-test-annotations-common&lt;/code&gt; 依存関係を &lt;code&gt;commonTest&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="bf9a347ca7004344d61319e9e4d5bb8c2e75274c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://ktor.io/&quot;&gt;Ktor framework&lt;/a&gt; is suitable for building asynchronous servers and clients in connected systems.</source>
          <target state="translated">&lt;a href=&quot;https://ktor.io/&quot;&gt;Ktorフレームワークは、&lt;/a&gt;接続されたシステムでは、非同期サーバーとクライアントを構築するために適しています。</target>
        </trans-unit>
        <trans-unit id="0194a3aa4b12c9468ece4f08b6ba21815b0e08f0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">特定の解釈なしの&lt;a href=&quot;index&quot;&gt;CPointed&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5516127ff85b6c7f18df858d84a44a3f3a5c0417" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; takes one parameter of type &lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt; and returns a result of type &lt;a href=&quot;index#R&quot;&gt;R&lt;/a&gt;. The block of code defines the body of a recursive function. In this block &lt;a href=&quot;../-deep-recursive-scope/call-recursive&quot;&gt;callRecursive&lt;/a&gt; function can be used to make a recursive call to the declared function. Other instances of &lt;a href=&quot;index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; can be called in this scope with &lt;code&gt;callRecursive&lt;/code&gt; extension, too.</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;DeepRecursiveFunctionは&lt;/a&gt;タイプの一つのパラメータ取り&lt;a href=&quot;index#T&quot;&gt;Tを&lt;/a&gt;、タイプの結果を返し&lt;a href=&quot;index#R&quot;&gt;Rを&lt;/a&gt;。コードのブロックは、再帰関数の本体を定義します。このブロックでは、&lt;a href=&quot;../-deep-recursive-scope/call-recursive&quot;&gt;callRecursive&lt;/a&gt;関数を使用して、宣言された関数を再帰的に呼び出すことができます。&lt;a href=&quot;index&quot;&gt;DeepRecursiveFunctionの&lt;/a&gt;他のインスタンスも、 &lt;code&gt;callRecursive&lt;/code&gt; 拡張機能を使用してこのスコープで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ba1a7f3bddcefc94310813b31ca6383df0bda5ae" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;js-ir-compiler&quot;&gt;IR backend for Kotlin/JS&lt;/a&gt;, which currently has &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt; stability, provides some new functionality specific to the Kotlin/JS target which is focused around the generated code size through dead code elimination, and improved interoperation with JavaScript and TypeScript, among others.</source>
          <target state="translated">現在&lt;a href=&quot;evolution/components-stability&quot;&gt;Alphaで&lt;/a&gt;安定している&lt;a href=&quot;js-ir-compiler&quot;&gt;Kotlin / JS&lt;/a&gt;のIRバックエンドは、デッドコードの除去による生成されたコードサイズに焦点を当てたKotlin / JSターゲットに固有のいくつかの新機能を提供し、JavaScriptやTypeScriptなどとの相互運用を改善します。</target>
        </trans-unit>
        <trans-unit id="e2ef6f826701c72898d6d25192a84da10d181630" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;js-ir-compiler&quot;&gt;new Kotlin/JS IR compiler&lt;/a&gt; (currently with &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt; stability) comes with a number of improvements over the current default compiler. For example, it improves the size of generated executables via dead code elimination and makes it smoother to interoperate with the JavaScript ecosystem and its tooling. By generating TypeScript declaration files (d.ts) from Kotlin code, the new compiler makes it easier to create &amp;ldquo;hybrid&amp;rdquo; applications that mix TypeScript and Kotlin code, and leverage code-sharing functionality using Kotlin Multiplatform.</source>
          <target state="translated">&lt;a href=&quot;js-ir-compiler&quot;&gt;新しいKotlin / JS IRコンパイラ&lt;/a&gt;（現在と&lt;a href=&quot;evolution/components-stability&quot;&gt;アルファ&lt;/a&gt;安定性）は、現在のデフォルトコンパイラを超える多くの改良が付属しています。たとえば、デッドコードの排除によって生成された実行可能ファイルのサイズを改善し、JavaScriptエコシステムとそのツールとの相互運用をよりスムーズにします。新しいコンパイラは、KotlinコードからTypeScript宣言ファイル（d.ts）を生成することで、TypeScriptとKotlinコードを組み合わせた「ハイブリッド」アプリケーションを簡単に作成し、KotlinMultiplatformを使用してコード共有機能を活用できるようにします。</target>
        </trans-unit>
        <trans-unit id="f1f6321a990fb305c59adcbabf8e3830cf1b87ed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.Any%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Flock&quot;&gt;lock&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.Any%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Flock&quot;&gt;ロック&lt;/a&gt;パラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="ad29d28adce666b3b0aa95e3d086ef2150c731fc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.LazyThreadSafetyMode%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Fmode&quot;&gt;mode&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.LazyThreadSafetyMode%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Fmode&quot;&gt;モード&lt;/a&gt;パラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="65e44082e85c986aa2e19f4034c1939c25816182" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy(kotlin.Any?,%20kotlin.Function0((kotlin.lazy.T)))/lock&quot;&gt;lock&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy(kotlin.Any?,%20kotlin.Function0((kotlin.lazy.T)))/lock&quot;&gt;ロック&lt;/a&gt;パラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="acac99fbefec8adf034ebe09ae88ed968b1bfb59" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy(kotlin.LazyThreadSafetyMode,%20kotlin.Function0((kotlin.lazy.T)))/mode&quot;&gt;mode&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy(kotlin.LazyThreadSafetyMode,%20kotlin.Function0((kotlin.lazy.T)))/mode&quot;&gt;モード&lt;/a&gt;パラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="65f4a08157a599a0434e41b121c5f82c757d8345" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列は、操作を高速化するために&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt;に変換される場合があります。そのため、要素には、連続した呼び出し間で変化しない &lt;code&gt;hashCode()&lt;/code&gt; の正確で安定した実装が必要です。</target>
        </trans-unit>
        <trans-unit id="e24be1e2b6e9366f0d91d73c1522fb4cc61453ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="88eac69a24417f0a5acd408bdb0ac168d5ab84f8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="4fdc1e3b9cc58343e5c4eb08ebf24ea334f18ce1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列は、操作を高速化するために&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt;に変換される場合があります。そのため、要素には、連続した呼び出し間で変化しない &lt;code&gt;hashCode()&lt;/code&gt; の正確で安定した実装が必要です。</target>
        </trans-unit>
        <trans-unit id="00e3673225dc7616b276e346639c286afc0812ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="9bfb6c345d49b612f19ff9859dc63476feb3110d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="eef0f46e8880f391ca0f135eafed80d7953873e2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;素子&lt;/a&gt;アレイは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="a9357b4fe4ae7edffd3a4348a18308c871d282bd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="2ef34bb84f8efe0f11198308dcadc0a798d086c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="dfb66f4d60f9919dee9be2f66e79310c49bfdeea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;素子&lt;/a&gt;アレイは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="c2358033aedf09646b3978114c88919df8cce73a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="422371d5491a08f23ef3ac6338e4abe49c999f7b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="150ad09de77efcf5d7cfbcf006b9f6b89c68e678" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.Array%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.Array%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列は、操作を高速化するために&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt;に変換される場合があります。そのため、要素には、連続した呼び出し間で変化しない &lt;code&gt;hashCode()&lt;/code&gt; の正確で安定した実装が必要です。</target>
        </trans-unit>
        <trans-unit id="16822a8d7e6589a06d4a74f594278b5199a4c0ac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="7730285cb3f44afdb3b127e9800e2d48488fce25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="62d283a260d21c033d8ae6f886e9418e4ce557c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.Array((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.Array((kotlin.sequences.minus.T)))/elements&quot;&gt;素子&lt;/a&gt;アレイは、に変換することができる&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="c922bbe4f99fe85f64acb6a4c239e5a6014544af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.collections.Iterable((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.collections.Iterable((kotlin.sequences.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="0fac9986e030aa348ad259c660503117d0363441" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="da75dd93220ce18b06da9e4f3b66704a6a1b2c1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;mpp-dsl-reference#language-settings&quot;&gt;language settings&lt;/a&gt; of &lt;code&gt;jvmMain&lt;/code&gt; and &lt;code&gt;commonMain&lt;/code&gt; should be consistent.</source>
          <target state="translated">&lt;code&gt;jvmMain&lt;/code&gt; と &lt;code&gt;commonMain&lt;/code&gt; の&lt;a href=&quot;mpp-dsl-reference#language-settings&quot;&gt;言語設定&lt;/a&gt;は一貫している必要があります。</target>
        </trans-unit>
        <trans-unit id="6783ca375fba676e08fc3ee05e0ed3a5ef692c42" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;range#kotlin.text.MatchGroup%24range&quot;&gt;range&lt;/a&gt; property is available on JVM only.</source>
          <target state="translated">&lt;a href=&quot;range#kotlin.text.MatchGroup%24range&quot;&gt;範囲の&lt;/a&gt;プロパティは、JVM上で使用可能です。</target>
        </trans-unit>
        <trans-unit id="42745a5a4bae1983528b804b1ebebed6b02c4c55" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;replace#kotlin.text%24replace%28kotlin.CharSequence%2C+kotlin.text.Regex%2C+kotlin.String%29%2Freplacement&quot;&gt;replacement&lt;/a&gt; can consist of any combination of literal text and $-substitutions. To treat the replacement string literally escape it with the &lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement%28kotlin.String%29&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;replace#kotlin.text%24replace%28kotlin.CharSequence%2C+kotlin.text.Regex%2C+kotlin.String%29%2Freplacement&quot;&gt;交換は&lt;/a&gt;リテラルテキストおよび$ -substitutionsの任意の組み合わせで構成されます。置換文字列を処理するには、&lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement%28kotlin.String%29&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt;メソッドで文字列を文字どおりエスケープします。</target>
        </trans-unit>
        <trans-unit id="72a4e8e47da1c3186370a03fc43faed555a6af40" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;replace#kotlin.text%24replace(kotlin.CharSequence,%20kotlin.text.Regex,%20kotlin.String)/replacement&quot;&gt;replacement&lt;/a&gt; can consist of any combination of literal text and $-substitutions. To treat the replacement string literally escape it with the &lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement(kotlin.String)&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;replace#kotlin.text%24replace(kotlin.CharSequence,%20kotlin.text.Regex,%20kotlin.String)/replacement&quot;&gt;交換は&lt;/a&gt;リテラルテキストおよび$ -substitutionsの任意の組み合わせで構成されます。置換文字列を処理するには、&lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement(kotlin.String)&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt;メソッドを使用して文字通りエスケープします。</target>
        </trans-unit>
        <trans-unit id="95e9b2afeb8d6a526b5a01ab6cb37a3b2fbd3c86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!!&lt;/code&gt; Operator</source>
          <target state="translated">&lt;code&gt;!!&lt;/code&gt; オペレーター</target>
        </trans-unit>
        <trans-unit id="16f554cb9d6cac56c27af60060382d64762de72d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-d&lt;/code&gt; option indicates the output path for generated class files, which may be either a directory or a &lt;em&gt;.jar&lt;/em&gt; file. The &lt;code&gt;-include-runtime&lt;/code&gt; option makes the resulting &lt;em&gt;.jar&lt;/em&gt; file self-contained and runnable by including the Kotlin runtime library in it. If you want to see all available options run</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; オプションは、ディレクトリまたはいずれであってもよく生成されたクラスファイルの出力パス、を示す&lt;em&gt;の.jar&lt;/em&gt;ファイルを。 &lt;code&gt;-include-runtime&lt;/code&gt; オプションは、結果になり&lt;em&gt;の.jar&lt;/em&gt;ファイル自己完結型とその中にKotlinのランタイムライブラリを含めることによって実行可能に。利用可能なすべてのオプションの実行を確認したい場合</target>
        </trans-unit>
        <trans-unit id="22f7ccf0243674cea2ac7171ac3600509d7e8e7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-d&lt;/code&gt; option indicates what we want the output of the compiler to be called and may be either a directory name for class files or a &lt;em&gt;.jar&lt;/em&gt; file name. The &lt;code&gt;-include-runtime&lt;/code&gt; option makes the resulting &lt;em&gt;.jar&lt;/em&gt; file self-contained and runnable by including the Kotlin runtime library in it. If you want to see all available options run</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; オプションでは、我々は、コンパイラの出力が呼び出されると、クラスファイルのディレクトリ名またはのいずれであってもよい欲しいものを示している&lt;em&gt;の.jar&lt;/em&gt;ファイル名。 &lt;code&gt;-include-runtime&lt;/code&gt; オプションは、結果になり&lt;em&gt;の.jar&lt;/em&gt;ファイル自己完結型とその中にKotlinのランタイムライブラリを含めることによって実行可能に。利用可能なすべてのオプションを表示したい場合は、実行します</target>
        </trans-unit>
        <trans-unit id="c711aceaf8b8e464d66e1fd318914f03bac4786f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-meta-info&lt;/code&gt; option indicates that an additional JS file with binary meta-information about compiled kotlin code will be created.</source>
          <target state="translated">&lt;code&gt;-meta-info&lt;/code&gt; オプションは、コンパイルkotlinコードについてのバイナリメタ情報と追加のJSファイルが作成されることを示しています。</target>
        </trans-unit>
        <trans-unit id="dc6b8236cb90f6f8fe4324f1a0dc0ef9b906294c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.def&lt;/code&gt; file supports several options for adjusting the generated bindings.</source>
          <target state="translated">&lt;code&gt;.def&lt;/code&gt; ファイルが生成されたバインディングを調整するためのいくつかのオプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="73f8a4adb6a430053e582f21a1ecd992b4948729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.pointed&lt;/code&gt; property for &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; returns the lvalue of type &lt;code&gt;T&lt;/code&gt;, pointed by this pointer. The reverse operation is &lt;code&gt;.ptr&lt;/code&gt;: it takes the lvalue and returns the pointer to it.</source>
          <target state="translated">&lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; の &lt;code&gt;.pointed&lt;/code&gt; プロパティは、このポインターが指す &lt;code&gt;T&lt;/code&gt; 型の左辺値を返します。逆の操作は &lt;code&gt;.ptr&lt;/code&gt; です。左辺値を受け取り、そのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="6d8b85d101ff4f2f1b24686adcfb710c9930ca1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; operation is special: it is translated to a complex expression that screens for &lt;code&gt;null&lt;/code&gt;'s. &lt;code&gt;null == null&lt;/code&gt; is always true, and &lt;code&gt;x == null&lt;/code&gt; for a non-null &lt;code&gt;x&lt;/code&gt; is always false and won't invoke &lt;code&gt;x.equals()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 操作が特別である：それがためにスクリーンという複雑な式に変換され &lt;code&gt;null&lt;/code&gt; 「S。 &lt;code&gt;null == null&lt;/code&gt; 常に真であり、 &lt;code&gt;x == null&lt;/code&gt; null以外のための &lt;code&gt;x&lt;/code&gt; は常に偽であるとしません呼び出し &lt;code&gt;x.equals()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6bbc4d74ec596791bf71057157cc072f9f40333d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@BindView&lt;/code&gt; annotation is defined to be applied to the fields only, but the Kotlin compiler understands that and annotates the corresponding field under the hood when you apply the annotation to the whole property.</source>
          <target state="translated">&lt;code&gt;@BindView&lt;/code&gt; の注釈は、フィールドのみに適用されるように定義されていますが、Kotlinコンパイラはそれを理解し、あなたが全体のプロパティに注釈を適用するときにボンネットの下に、対応するフィールドに注釈を付けています。</target>
        </trans-unit>
        <trans-unit id="570e8cdd4880694f653c6df8b5e52b836ca08b91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JsExport&lt;/code&gt; annotation is available in the current default compiler backend and the new &lt;a href=&quot;js-ir-compiler&quot;&gt;IR compiler backend&lt;/a&gt;. If you are targeting the IR compiler backend, you &lt;strong&gt;must&lt;/strong&gt; use the &lt;code&gt;@JsExport&lt;/code&gt; annotation to make your functions visible from Kotlin in the first place.</source>
          <target state="translated">&lt;code&gt;@JsExport&lt;/code&gt; の注釈は、現在のデフォルトのコンパイラのバックエンドと新規に利用可能である&lt;a href=&quot;js-ir-compiler&quot;&gt;IRコンパイラのバックエンド&lt;/a&gt;。IRコンパイラバックエンドをターゲットにしている場合は、 &lt;code&gt;@JsExport&lt;/code&gt; アノテーションを使用して、Kotlinから関数を表示する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="027e903c95ee8bc2148123b05adc1c6430180f44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JsExport&lt;/code&gt; annotation is currently marked as experimental. Its design may change in future versions.</source>
          <target state="translated">&lt;code&gt;@JsExport&lt;/code&gt; の注釈は、現在実験としてマークされています。そのデザインは将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="1df3c0a179e9e6af77acfff08df64cc5248d7f9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JvmDefault&lt;/code&gt; annotation is experimental in Kotlin 1.3. Its name and behavior may change, leading to future incompatibility.</source>
          <target state="translated">&lt;code&gt;@JvmDefault&lt;/code&gt; の注釈はKotlin 1.3の実験です。その名前と動作は変更される可能性があり、将来の非互換性につながります。</target>
        </trans-unit>
        <trans-unit id="23f0d6b7e361daa5f829cff80c17a1080ce0221f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@UnderMigration&lt;/code&gt; annotation (provided in a separate artifact &lt;code&gt;kotlin-annotations-jvm&lt;/code&gt;) can be used by library maintainers to define the migration status for the nullability type qualifiers.</source>
          <target state="translated">&lt;code&gt;@UnderMigration&lt;/code&gt; の（別個のアーティファクトに設けられた注釈 &lt;code&gt;kotlin-annotations-jvm&lt;/code&gt; ）NULL可能タイプ修飾子の移行状態を定義するために、ライブラリ保守で使用することができます。</target>
        </trans-unit>
        <trans-unit id="08a8188662741e6b74d3c3abb87899999effc8e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayDeque&lt;/code&gt; implementation uses a resizable array underneath: it stores the contents in a circular buffer, an &lt;code&gt;Array&lt;/code&gt;, and resizes this &lt;code&gt;Array&lt;/code&gt; only when it becomes full.</source>
          <target state="translated">&lt;code&gt;ArrayDeque&lt;/code&gt; の、それが円形のバッファの内容を格納する：実装では、サイズ変更可能なアレイの下を使用する &lt;code&gt;Array&lt;/code&gt; 、このサイズ変更 &lt;code&gt;Array&lt;/code&gt; 、それが一杯になった場合にのみ。</target>
        </trans-unit>
        <trans-unit id="bb1328f13d2922d7a316403f81e7c018a9247b4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt; representation of pointer parameters is designed to support C array literals without explicit native memory allocation. To construct the immutable self-contained sequence of C values, the following methods are provided:</source>
          <target state="translated">ポインターパラメーターの &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt; 表現は、明示的なネイティブメモリの割り当てなしでC配列リテラルをサポートするように設計されています。C値の不変の自己完結型シーケンスを構築するために、次のメソッドが提供されています。</target>
        </trans-unit>
        <trans-unit id="a1a03d0c25bc5cefc6e2a073c0dfa2fd3a424a42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Closeable.use&lt;/code&gt; function calls &lt;code&gt;Throwable.addSuppressed&lt;/code&gt; when an exception is thrown during closing the resource after some other exception.</source>
          <target state="translated">&lt;code&gt;Closeable.use&lt;/code&gt; の関数呼び出しは &lt;code&gt;Throwable.addSuppressed&lt;/code&gt; 例外が他のいくつかの例外の後のリソースをクローズ中にスローされたとき。</target>
        </trans-unit>
        <trans-unit id="0485fe2409cde90ad04805af82cb812c3dd3149b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INSTANCE&lt;/code&gt; field of a companion object more visible than the companion object class itself</source>
          <target state="translated">コンパニオンオブジェクトクラス自体よりも表示されるコンパニオンオブジェクトの &lt;code&gt;INSTANCE&lt;/code&gt; フィールド</target>
        </trans-unit>
        <trans-unit id="a0327626fcb95882f9434dd6a1485603acf809a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyStruct&lt;/code&gt; and &lt;code&gt;MyUnion&lt;/code&gt; classes have the pointer to the native memory underneath. The memory will be released when a &lt;code&gt;memScoped&lt;/code&gt; function ends, which is equal to the end of its &lt;code&gt;block&lt;/code&gt;. Be careful to make sure that a pointer is not used outside of the &lt;code&gt;memScoped&lt;/code&gt; call. We may use &lt;code&gt;Arena()&lt;/code&gt; or &lt;code&gt;nativeHeap&lt;/code&gt; for pointers that should be available longer, or are cached inside a C library.</source>
          <target state="translated">&lt;code&gt;MyStruct&lt;/code&gt; と &lt;code&gt;MyUnion&lt;/code&gt; クラスは、ネイティブメモリの下へのポインタを持っています。メモリは、 &lt;code&gt;memScoped&lt;/code&gt; 関数が終了すると解放されます。これは、その &lt;code&gt;block&lt;/code&gt; 終了と同じです。ポインターが &lt;code&gt;memScoped&lt;/code&gt; 呼び出し以外で使用されないように注意してください。我々は使用することができます &lt;code&gt;Arena()&lt;/code&gt; または &lt;code&gt;nativeHeap&lt;/code&gt; を長く利用可能であるべきポインタのために、またはCライブラリの内部でキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="e163aa024140dbb6042ebda1a8af8dcaad09140b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Podspec&lt;/code&gt; file includes a path to an output framework and script phases that automate building this framework during the build process of an Xcode project.</source>
          <target state="translated">&lt;code&gt;Podspec&lt;/code&gt; のファイルは、自動化がXcodeプロジェクトのビルドプロセス中にこのフレームワークを構築し、出力フレームワークとスクリプトのフェーズへのパスが含まれています。</target>
        </trans-unit>
        <trans-unit id="e1e663158ad35ab7b0074a2786efe149637f58ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode/build.gradle&lt;/code&gt; file uses the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin to implement what we need. In the file, we define several targets &lt;code&gt;common&lt;/code&gt;, &lt;code&gt;android&lt;/code&gt;, and &lt;code&gt;iOS&lt;/code&gt;. Each target has its own platform. The &lt;code&gt;common&lt;/code&gt; target contains the Kotlin common code which is included into every platform compilation. It is allowed to have &lt;code&gt;expect&lt;/code&gt; declarations. Other targets provide &lt;code&gt;actual&lt;/code&gt; implementations for all &lt;code&gt;expect&lt;/code&gt;-actions from the &lt;code&gt;common&lt;/code&gt; target. The more detailed explanation of the multiplatform projects can be found on the &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;Multiplatform Projects&lt;/a&gt; documentation page.</source>
          <target state="translated">&lt;code&gt;SharedCode/build.gradle&lt;/code&gt; のファイルが使用しています &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 私たちが必要なものを実装するためのプラグインを。このファイルでは、 &lt;code&gt;common&lt;/code&gt; 、 &lt;code&gt;android&lt;/code&gt; 、および &lt;code&gt;iOS&lt;/code&gt; のいくつかのターゲットを定義しています。各ターゲットには独自のプラットフォームがあります。 &lt;code&gt;common&lt;/code&gt; の目標は、すべてのプラットフォームのコンパイルに含まれているKotlin共通のコードが含まれています。宣言を &lt;code&gt;expect&lt;/code&gt; ことが許可されています。他のターゲットは、 &lt;code&gt;common&lt;/code&gt; ターゲットからのすべての &lt;code&gt;expect&lt;/code&gt; アクションの &lt;code&gt;actual&lt;/code&gt; 実装を提供します。マルチプラットフォームプロジェクトの詳細については、マルチ&lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;プラットフォームプロジェクトの&lt;/a&gt;ドキュメントページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ef805264d2ba0e69f1525612b2097c56c9b79a21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode&lt;/code&gt; build generates iOS frameworks for use with the Xcode project. All frameworks are in the &lt;code&gt;SharedCode/build/bin&lt;/code&gt; folder. It creates a &lt;em&gt;debug&lt;/em&gt; and &lt;em&gt;release&lt;/em&gt; version for every framework target. The frameworks are in the following paths:</source>
          <target state="translated">&lt;code&gt;SharedCode&lt;/code&gt; のビルドには、Xcodeプロジェクトで使用するためのiOSフレームワークを生成します。すべてのフレームワークは &lt;code&gt;SharedCode/build/bin&lt;/code&gt; フォルダーにあります。すべてのフレームワークターゲットの&lt;em&gt;デバッグ&lt;/em&gt;バージョンと&lt;em&gt;リリース&lt;/em&gt;バージョンを作成します。フレームワークは次のパスにあります。</target>
        </trans-unit>
        <trans-unit id="49918eac55ef5c9d9df4be1f8508374502fa5919" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode&lt;/code&gt; sub-project should generate several artifacts for us:</source>
          <target state="translated">&lt;code&gt;SharedCode&lt;/code&gt; のサブプロジェクトでは、私たちのために、いくつかの成果物を生成する必要があります：</target>
        </trans-unit>
        <trans-unit id="738861947c8af30bd4668ff2083f0544a8963e87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings. All string literals in Kotlin programs, such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, are implemented as instances of this class.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; クラスは文字列を表します。 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; などのKotlinプログラムのすべての文字列リテラルは、このクラスのインスタンスとして実装されます。</target>
        </trans-unit>
        <trans-unit id="1109231b443cf6e05eb0d002d1e6b58cba8574e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeoutCancellationException&lt;/code&gt; that is thrown by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt; is a subclass of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt;. We have not seen its stack trace printed on the console before. That is because inside a cancelled coroutine &lt;code&gt;CancellationException&lt;/code&gt; is considered to be a normal reason for coroutine completion. However, in this example we have used &lt;code&gt;withTimeout&lt;/code&gt; right inside the &lt;code&gt;main&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;TimeoutCancellationException&lt;/code&gt; によってスローされ&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeoutは&lt;/a&gt;のサブクラスです&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt;。これまでにコンソールにスタックトレースが出力されたことはありません。これは、キャンセルされたコルーチンの内側で、 &lt;code&gt;CancellationException&lt;/code&gt; がコルーチンの完了の通常の理由と見なされるためです。ただし、この例では、 &lt;code&gt;main&lt;/code&gt; 関数内で &lt;code&gt;withTimeout&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="678b280d532baa9bcd8fba06428fcb263e6a4bcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Unit&lt;/code&gt; return type declaration is also optional. The above code is equivalent to:</source>
          <target state="translated">&lt;code&gt;Unit&lt;/code&gt; 戻り型の宣言も任意です。上記のコードは次と同等です。</target>
        </trans-unit>
        <trans-unit id="34816ddf73a36acb83a22b27a235dceb2d40d5b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;android&lt;/code&gt; configuration inside &lt;code&gt;kotlin&lt;/code&gt; doesn&amp;rsquo;t replace the build configuration of any Android project. Learn more about writing build scripts for Android projects in &lt;a href=&quot;https://developer.android.com/studio/build&quot;&gt;Android developer documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;android&lt;/code&gt; 内の構成 &lt;code&gt;kotlin&lt;/code&gt; は、任意のAndroidのプロジェクトのビルド構成に代わるものではありません。Androidプロジェクトのビルドスクリプトの記述について詳しくは、&lt;a href=&quot;https://developer.android.com/studio/build&quot;&gt;Androidデベロッパードキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="bb48ced54ff1266406f8ddf62204246a87b046d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;array.copyInto(targetArray, targetOffset, startIndex, endIndex)&lt;/code&gt; functions for the existing array types, including the unsigned arrays, make it easier to implement array-based containers in pure Kotlin.</source>
          <target state="translated">符号なし配列を含む既存の配列型の &lt;code&gt;array.copyInto(targetArray, targetOffset, startIndex, endIndex)&lt;/code&gt; 関数は、純粋なKotlinで配列ベースのコンテナーを実装することを容易にします。</target>
        </trans-unit>
        <trans-unit id="dbbd4d6ccddd01ebd0440c3324ef34e660a0c4b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;build.gradle.kts&lt;/code&gt; file contains the project settings. Read more about these settings in the &lt;a href=&quot;../../reference/mpp-dsl-reference&quot;&gt;Kotlin Multiplatform Gradle DSL reference&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;build.gradle.kts&lt;/code&gt; のファイルは、プロジェクトの設定が含まれています。これらの設定の詳細については、&lt;a href=&quot;../../reference/mpp-dsl-reference&quot;&gt;Kotlin Multiplatform GradleDSLリファレンス&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="a6d3c63b724a00a7b22c190a90ba3fb846402424" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; blocks are tried in order until an exception type is found that matches the thrown exception (it doesn't need to be an exact match; the thrown exception's class can be a subclass of the declared one), and at most one &lt;code&gt;catch&lt;/code&gt; block will be executed. If no match is found, the exception bubbles out of the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 例外タイプがスローされた例外にマッチするまでブロックは（それが完全に一致する必要はありません。スローされた例外のクラスが1宣言のサブクラスすることができます）順序で試行され、そして多くても1つの &lt;code&gt;catch&lt;/code&gt; ブロック実行されます。一致が見つからない場合、例外は &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; からバブリングします。</target>
        </trans-unit>
        <trans-unit id="e92d0fff45fa528ec76156e8cf1a8aac33dfa367" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cocoapods&lt;/code&gt; block can include dependencies to Pods stored locally and Pods from the CocoaPods repository at the same time.</source>
          <target state="translated">&lt;code&gt;cocoapods&lt;/code&gt; のCocoaPodsからローカルに格納されたポッドポッドへの依存関係を含むことができ、ブロックは、同時にリポジトリ。</target>
        </trans-unit>
        <trans-unit id="c0fef9a879817509a3ced8499c0b86da8348957d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;component1()&lt;/code&gt; and &lt;code&gt;component2()&lt;/code&gt; functions are another example of the &lt;em&gt;principle of conventions&lt;/em&gt; widely used in Kotlin (see operators like &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;, &lt;em&gt;for&lt;/em&gt;-loops etc.). Anything can be on the right-hand side of a destructuring declaration, as long as the required number of component functions can be called on it. And, of course, there can be &lt;code&gt;component3()&lt;/code&gt; and &lt;code&gt;component4()&lt;/code&gt; and so on.</source>
          <target state="translated">&lt;code&gt;component1()&lt;/code&gt; 及び &lt;code&gt;component2()&lt;/code&gt; 関数は、別の例である&lt;em&gt;規則の原理&lt;/em&gt;広くKotlinで使用される（等オペレータ参照 &lt;code&gt;+&lt;/code&gt; 及び &lt;code&gt;*&lt;/code&gt; を、&lt;em&gt;ため&lt;/em&gt; -loops等）。必要な数のコンポーネント関数を呼び出すことができる限り、構造化宣言の右側に何でも置くことができます。そしてもちろん、 &lt;code&gt;component3()&lt;/code&gt; や &lt;code&gt;component4()&lt;/code&gt; などもあります。</target>
        </trans-unit>
        <trans-unit id="c908c6361f3f878795986cf1aacec3df19a47af2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;componentN()&lt;/code&gt; operator functions are not called for the components that are skipped in this way.</source>
          <target state="translated">&lt;code&gt;componentN()&lt;/code&gt; 演算子関数は、このようにスキップされるコンポーネントに呼び出されていません。</target>
        </trans-unit>
        <trans-unit id="f1d847ef34570c9d2cfc5768433edcc66d201826" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concurrent&lt;/code&gt; source set declares the function runBlocking and is compiled for the JVM and the native targets. Once the &lt;code&gt;kotlinx.coroutines&lt;/code&gt; library is updated and published with the hierarchical project structure, you can depend on it and call &lt;code&gt;runBlocking&lt;/code&gt; from a source set that is shared between the JVM and native targets since it matches the &amp;ldquo;targets signature&amp;rdquo; of the library&amp;rsquo;s &lt;code&gt;concurrent&lt;/code&gt; source set.</source>
          <target state="translated">&lt;code&gt;concurrent&lt;/code&gt; ソースセットはrunBlocking関数を宣言し、JVMとネイティブターゲット用にコンパイルされます。いったん &lt;code&gt;kotlinx.coroutines&lt;/code&gt; のライブラリが更新され、階層的なプロジェクト構造で公開されている、あなたはそれに依存して呼び出すことができ &lt;code&gt;runBlocking&lt;/code&gt; それはライブラリのの「目標署名」と一致するので、JVMとネイティブターゲットの間で共有されているソース・セットから &lt;code&gt;concurrent&lt;/code&gt; ソースをセットする。</target>
        </trans-unit>
        <trans-unit id="a190a683fc1154d7857777d7aa926a36cf88408d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dependencies&lt;/code&gt; block of the source set declaration contains the dependencies of this source set.</source>
          <target state="translated">ソースセット宣言の &lt;code&gt;dependencies&lt;/code&gt; ブロックには、このソースセットの依存関係が含まれています。</target>
        </trans-unit>
        <trans-unit id="e19e10048f6cfec5120bb685db8cc57ca3bf8154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;document&lt;/code&gt; object also provides us a way to retrieve a specific element by ID, name, class name, tag name and so on. All returned elements are of type &lt;code&gt;Element?&lt;/code&gt;. To access their properties, we need to cast them to their appropriate type. For example, say we have an HTML page with an email &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field:</source>
          <target state="translated">&lt;code&gt;document&lt;/code&gt; オブジェクトは、私たちのようにID、名前、クラス名、タグ名とすることにより、特定の要素を取得するための方法を提供します。返されるすべての要素はタイプ &lt;code&gt;Element?&lt;/code&gt; 。それらのプロパティにアクセスするには、それらを適切なタイプにキャストする必要があります。たとえば、電子メールの &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; フィールドを持つHTMLページがあるとします。</target>
        </trans-unit>
        <trans-unit id="7d4ca598e9322020fabb7ed0f0cf080beed5a640" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dynamic&lt;/code&gt; type basically turns off Kotlin's type checker:</source>
          <target state="translated">&lt;code&gt;dynamic&lt;/code&gt; タイプは、基本的には、Kotlinの型チェッカーオフにします。</target>
        </trans-unit>
        <trans-unit id="5ff5cd6bac575bb9563d72ab56d5d639d97b4c6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expect&lt;/code&gt;/&lt;code&gt;actual&lt;/code&gt; feature is currently in &lt;a href=&quot;evolution/components-stability&quot;&gt;Beta&lt;/a&gt;. All of the language and tooling features described in this document are subject to change in future Kotlin versions.</source>
          <target state="translated">&lt;code&gt;expect&lt;/code&gt; / &lt;code&gt;actual&lt;/code&gt; 機能は、現在ある&lt;a href=&quot;evolution/components-stability&quot;&gt;ベータ版&lt;/a&gt;。このドキュメントで説明されているすべての言語およびツール機能は、将来のKotlinバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="51e19e38be808ad0fddd91d78f8820fc196fada7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;external&lt;/code&gt; modifier</source>
          <target state="translated">&lt;code&gt;external&lt;/code&gt; 修飾子</target>
        </trans-unit>
        <trans-unit id="6672d0616428f2de367eecabae3ac9b311e7f971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;external&lt;/code&gt; modifier is only allowed on package-level declarations. You can't declare an &lt;code&gt;external&lt;/code&gt; member of a non-&lt;code&gt;external&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;external&lt;/code&gt; 改質剤のみのパッケージレベルの宣言では許可されています。 &lt;code&gt;external&lt;/code&gt; クラスの &lt;code&gt;external&lt;/code&gt; メンバーを宣言することはできません。</target>
        </trans-unit>
        <trans-unit id="3b6dae5981e61870a0a711096ca1cc69db0e7e4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;field&lt;/code&gt; identifier can only be used in the accessors of the property.</source>
          <target state="translated">&lt;code&gt;field&lt;/code&gt; 識別子は、専用のプロパティのアクセサに使用することができます。</target>
        </trans-unit>
        <trans-unit id="a8755ff22ac11729e9e1bb025cf0c2f08d13b24b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally&lt;/code&gt; block (if any) is executed at the end, no matter what the outcome is: either after the try block completes successfully, or after a catch block is executed (even if another exception is thrown by the catch block), or if no matching catch is found.</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 成功したtryブロックが完了した後、またはcatchブロックが（別の例外がcatchブロックによってスローされた場合でも）実行された後、または場合は、次のいずれか（もしあれば）、最後に結果が何であるかに関係なく実行されるブロック一致するキャッチは見つかりません。</target>
        </trans-unit>
        <trans-unit id="3a829cd24a40c00449e6558dda8fc041beb9c10a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flow { ... }&lt;/code&gt; builder from the previous examples is the most basic one. There are other builders for easier declaration of flows:</source>
          <target state="translated">前の例の &lt;code&gt;flow { ... }&lt;/code&gt; ビルダーが最も基本的なものです。フローの宣言を簡単にする他のビルダーがあります。</target>
        </trans-unit>
        <trans-unit id="6e147b02bdfa0081a311ca1a27d8c44534b54856" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; functions in the &lt;code&gt;HTML&lt;/code&gt; class are defined similarly to &lt;code&gt;html&lt;/code&gt;. The only difference is that they add the built instances to the &lt;code&gt;children&lt;/code&gt; collection of the enclosing &lt;code&gt;HTML&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;HTML&lt;/code&gt; クラスの &lt;code&gt;head&lt;/code&gt; 関数と &lt;code&gt;body&lt;/code&gt; 関数は、 &lt;code&gt;html&lt;/code&gt; と同様に定義されています。唯一の違いは、それらが、囲まれた &lt;code&gt;HTML&lt;/code&gt; インスタンスの &lt;code&gt;children&lt;/code&gt; コレクションに構築されたインスタンスを追加することです。</target>
        </trans-unit>
        <trans-unit id="770f5ab17d8a9531f1b79df0e83aa540310bf343" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; keyword is not restricted to importing classes; you can also use it to import other declarations:</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; キーワードは、クラスをインポートするに限定されません。これを使用して他の宣言をインポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="41a9e375e0ec0d5188379910e6d4cc759d4c0ed4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inc()&lt;/code&gt; and &lt;code&gt;dec()&lt;/code&gt; functions must return a value, which will be assigned to the variable on which the &lt;code&gt;++&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt; operation was used. They shouldn't mutate the object on which the &lt;code&gt;inc&lt;/code&gt; or &lt;code&gt;dec&lt;/code&gt; was invoked.</source>
          <target state="translated">&lt;code&gt;inc()&lt;/code&gt; と &lt;code&gt;dec()&lt;/code&gt; 関数は、どの変数に割り当てられる値は、返さなければならない &lt;code&gt;++&lt;/code&gt; または &lt;code&gt;--&lt;/code&gt; 操作を使用したが。それらは、 &lt;code&gt;inc&lt;/code&gt; または &lt;code&gt;dec&lt;/code&gt; が呼び出されたオブジェクトを変更してはなりません。</target>
        </trans-unit>
        <trans-unit id="2a8bc7470da685195a735f122f1c7a64a5a63c8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; modifier affects both the function itself and the lambdas passed to it: all of those will be inlined into the call site.</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 修飾子は、関数自体と、それに渡されたラムダの両方に影響します。これらのすべては、呼び出しサイトにインライン化されます。</target>
        </trans-unit>
        <trans-unit id="4c1794e25137b28059a2347a21857b9a05912426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; modifier can be used on accessors of properties that don't have a backing field. You can annotate individual property accessors:</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 修飾子は、バッキングフィールドを持たないプロパティのアクセサに使用することができます。個々のプロパティアクセサーに注釈を付けることができます。</target>
        </trans-unit>
        <trans-unit id="2e8761b1965ac33697b654aacb6b2483099da851" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;internal&lt;/code&gt; visibility modifier means that the member is visible within the same module. More specifically, a module is a set of Kotlin files compiled together:</source>
          <target state="translated">&lt;code&gt;internal&lt;/code&gt; 部材は、同じモジュール内に表示されていることを視認性改質手段。より具体的には、モジュールは一緒にコンパイルされたKotlinファイルのセットです。</target>
        </trans-unit>
        <trans-unit id="5524830c2792b87628c40ec57ff6cb705892ec15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interop.def&lt;/code&gt; file is enough to compile and run the application or open it in an IDE. Now it is time to create project files, open the project in &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; and run it.</source>
          <target state="translated">&lt;code&gt;interop.def&lt;/code&gt; ファイルには、アプリケーションをコンパイルして実行するか、またはIDEで開くのに十分です。プロジェクトファイルを作成し、&lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEAで&lt;/a&gt;プロジェクトを開いて実行します。</target>
        </trans-unit>
        <trans-unit id="3d41e98e653300197d70c898b77f6a833b780263" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;js&lt;/code&gt; block describes the configuration of JavaScript targets. It can contain one of two blocks depending on the target execution environment:</source>
          <target state="translated">&lt;code&gt;js&lt;/code&gt; ブロックは、JavaScriptの目標の設定について説明します。ターゲットの実行環境に応じて、次の2つのブロックのいずれかを含めることができます。</target>
        </trans-unit>
        <trans-unit id="44ba6fd4ed404417523557c04ecd859c9b045fe5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin also uses configurations under the hood but it also provides a &lt;code&gt;dependencies&lt;/code&gt; block for each source set allowing configuring dependencies of this sources set:</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインはまた、フードの下で設定を使用し、それはまた、提供する &lt;code&gt;dependencies&lt;/code&gt; 設定され、このソースの構成の依存関係を可能にする各ソース・セットのブロック：</target>
        </trans-unit>
        <trans-unit id="a0c4005a1e5ac20d1958b1949f93981adc09fc37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin configures the project for creating an application or library to work on multiple platforms and prepares it for building on these platforms.</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインは、複数のプラットフォーム上で動作するようにアプリケーションまたはライブラリを作成するためのプロジェクトを構成し、これらのプラットフォーム上で構築するためにそれを準備します。</target>
        </trans-unit>
        <trans-unit id="d8e3eb99d26045b1aa72e09adfd01fc61c4fddee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin doesn't create any production binaries by default. The only binary available by default is a debug test executable that lets you run unit tests from the &lt;code&gt;test&lt;/code&gt; compilation.</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインは、デフォルトではすべての生産のバイナリを作成しません。デフォルトで使用可能な唯一のバイナリは、 &lt;code&gt;test&lt;/code&gt; コンパイルから単体テストを実行できるデバッグテスト実行可能ファイルです。</target>
        </trans-unit>
        <trans-unit id="b5c0011d2bfc5ebbff41042a726587af8e0320f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin provides target shortcuts for creating structures for common combinations of targets.</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインは、ターゲットの一般的な組み合わせのための構造体を作成するためのターゲットのショートカットを提供します。</target>
        </trans-unit>
        <trans-unit id="2df8274be5a77a61c0bfa9793c6436553cef29b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin works with Gradle 6.0 or later.</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインはGradleの6.0以降で動作します。</target>
        </trans-unit>
        <trans-unit id="54c093aab8a4fd74ccc1151086a966b2ec216f25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; API was deprecated in favor of kotlin.coroutines in 1.3.0. In 1.4.0, we&amp;rsquo;re completing the deprecation cycle for &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; by removing it from the standard library. For those who still use it on the JVM, we've provided a compatibility artifact &lt;code&gt;kotlin-coroutines-experimental-compat.jar&lt;/code&gt; with all the experimental coroutines APIs. We've published it to Maven, and we include it in the Kotlin distribution alongside the standard library.</source>
          <target state="translated">&lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; APIは1.3.0でkotlin.coroutinesの賛成で廃止されました。1.4.0では、 &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; を標準ライブラリから削除することで、非推奨サイクルを完了しています。まだJVMで使用している人のために、すべての実験的なコルーチンAPIとの互換性アーティファクト &lt;code&gt;kotlin-coroutines-experimental-compat.jar&lt;/code&gt; を提供しています。これをMavenに公開し、標準ライブラリと一緒にKotlinディストリビューションに含めています。</target>
        </trans-unit>
        <trans-unit id="fe74c7aeeab59f2c4b92f1e28239a8ff11eacd81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.js.experimental.generateKotlinExternals&lt;/code&gt; flag has been renamed to &lt;code&gt;kotlin.js.generate.externals&lt;/code&gt;. It controls the default behavior of Dukat for all specified npm dependencies.</source>
          <target state="translated">&lt;code&gt;kotlin.js.experimental.generateKotlinExternals&lt;/code&gt; のフラグがに変更されました &lt;code&gt;kotlin.js.generate.externals&lt;/code&gt; 。これは、指定されたすべてのnpm依存関係に対するDukatのデフォルトの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="c6dd2f719618738640e63840c7a2f909ec5d0617" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.js&lt;/code&gt; Gradle plugin comes with an adjusted Gradle DSL, which provides a number of new configuration options and is more closely aligned to the DSL used by the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin. Some of the most impactful changes include:</source>
          <target state="translated">&lt;code&gt;kotlin.js&lt;/code&gt; のGradleプラグインは、新しい構成オプションの数を提供し、より密接で使用DSLに整列される調整のGradle DSL、付属してい &lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグイン。最も影響力のある変更には、次のものがあります。</target>
        </trans-unit>
        <trans-unit id="adb02342d7ce602f18e1bc8edea76f179234a358" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.js&lt;/code&gt; file should be referenced first as it is used by our application</source>
          <target state="translated">&lt;code&gt;kotlin.js&lt;/code&gt; それは我々のアプリケーションで使用されるファイルが最初に参照する必要があります</target>
        </trans-unit>
        <trans-unit id="7fc3f10d75e3b45c926e4a682a79762335610161" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.test&lt;/code&gt; library &amp;ndash; you should still use &lt;code&gt;test-common&lt;/code&gt; and &lt;code&gt;test-annotations-common&lt;/code&gt;. These dependencies will be addressed later.</source>
          <target state="translated">&lt;code&gt;kotlin.test&lt;/code&gt; ライブラリ-あなたはまだ使用すべき &lt;code&gt;test-common&lt;/code&gt; および &lt;code&gt;test-annotations-common&lt;/code&gt; 。これらの依存関係については、後で説明します。</target>
        </trans-unit>
        <trans-unit id="d33f6d3213f1661b13836e07ebfe17d21d08c317" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.text.Regex&lt;/code&gt; class has become &lt;code&gt;Serializable&lt;/code&gt; and can now be used in serializable hierarchies.</source>
          <target state="translated">&lt;code&gt;kotlin.text.Regex&lt;/code&gt; のクラスでは、となっています &lt;code&gt;Serializable&lt;/code&gt; を、今、シリアライズ階層で使用することができます。</target>
        </trans-unit>
        <trans-unit id="1ffc69ed46730f5c0cf459a733202302794ba475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;languageSettings&lt;/code&gt; block of a source set defines certain aspects of project analysis and build. The following language settings are available:</source>
          <target state="translated">ソースセットの &lt;code&gt;languageSettings&lt;/code&gt; ブロックは、プロジェクトの分析とビルドの特定の側面を定義します。次の言語設定を使用できます。</target>
        </trans-unit>
        <trans-unit id="4ac18e700523e48dabd941ad751d3aef964b3a3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;last&lt;/code&gt; element of the progression is calculated this way:</source>
          <target state="translated">進行の &lt;code&gt;last&lt;/code&gt; 要素は次のように計算されます。</target>
        </trans-unit>
        <trans-unit id="3bdd0dba3711de41e882257acdc9d6c6d0be76b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lateinit&lt;/code&gt; modifier can now be used on top-level properties and local variables. The latter can be used, for example, when a lambda passed as a constructor argument to one object refers to another object which has to be defined later:</source>
          <target state="translated">&lt;code&gt;lateinit&lt;/code&gt; 修飾子は現在トップレベルのプロパティおよびローカル変数に使用することができます。後者は、たとえば、コンストラクターの引数として1つのオブジェクトに渡されたラムダが、後で定義する必要がある別のオブジェクトを参照する場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="43331c82f7829c2da5f8833182cec47167e9b99d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;libnative&lt;/code&gt; is used as the library name, the generated header file name prefix. It is also prefixes all declarations in the header file.</source>
          <target state="translated">&lt;code&gt;libnative&lt;/code&gt; はライブラリ名、生成されたヘッダファイル名の接頭辞として使用されます。また、ヘッダーファイル内のすべての宣言の前に置かれます。</target>
        </trans-unit>
        <trans-unit id="bbfbe4356895f41e445e2fe6cf1eee9c6b52bcaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; structure contains several helper functions:</source>
          <target state="translated">&lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; の構造は、いくつかのヘルパー関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="31fcc81919bad97de24dff6463d9620cad90a047" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log&lt;/code&gt; function prints the name of the thread in square brackets and you can see, that it is the &lt;code&gt;main&lt;/code&gt; thread, but the identifier of the currently executing coroutine is appended to it. This identifier is consecutively assigned to all created coroutines when debugging mode is turned on.</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 機能は、角括弧内のスレッドの名前を印刷し、あなたが見ることができ、それがあることを &lt;code&gt;main&lt;/code&gt; スレッドが、現在実行中のコルーチンの識別子が、それに付加されます。この識別子は、デバッグモードがオンの場合、作成されたすべてのコルーチンに連続して割り当てられます。</target>
        </trans-unit>
        <trans-unit id="d6f1794c043d2601c1f38c209a2b74f37608e11a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log&lt;/code&gt; function prints the name of the thread in square brackets, and you can see that it is the &lt;code&gt;main&lt;/code&gt; thread with the identifier of the currently executing coroutine appended to it. This identifier is consecutively assigned to all created coroutines when the debugging mode is on.</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 機能は、角括弧内のスレッドの名前を印刷し、そしてあなたはそれがあることを確認することができ &lt;code&gt;main&lt;/code&gt; 、それに追加現在実行中のコルーチンの識別子を持つ糸。この識別子は、デバッグモードがオンのときに、作成されたすべてのコルーチンに連続して割り当てられます。</target>
        </trans-unit>
        <trans-unit id="efd29f0f3ce9a41a1abae4f8ce3153ceef6821bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxOf()&lt;/code&gt; and &lt;code&gt;minOf()&lt;/code&gt; top-level functions can accept a variable number of arguments (&lt;code&gt;vararg&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;maxOf()&lt;/code&gt; と &lt;code&gt;minOf()&lt;/code&gt; トップレベルの関数は、引数の可変数（受け入れることができる &lt;code&gt;vararg&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3230b15e19fadbbe8582fc37fac536f21d903134" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;memoizedFoo&lt;/code&gt; variable will be computed on the first access only. If &lt;code&gt;someCondition&lt;/code&gt; fails, the variable won't be computed at all.</source>
          <target state="translated">&lt;code&gt;memoizedFoo&lt;/code&gt; の変数は、最初のアクセスで計算されます。場合 &lt;code&gt;someCondition&lt;/code&gt; が失敗し、変数はすべてで計算されることはありません。</target>
        </trans-unit>
        <trans-unit id="33d6683731510016eab36ef3fe8c81b5c054cb1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;metaInfo&lt;/code&gt; option is useful, if you want to distribute the result of translation as a Kotlin/JavaScript library. If &lt;code&gt;metaInfo&lt;/code&gt; was set to &lt;code&gt;true&lt;/code&gt;, then during compilation additional JS file with binary metadata will be created. This file should be distributed together with the result of translation:</source>
          <target state="translated">&lt;code&gt;metaInfo&lt;/code&gt; あなたはKotlin / JavaScriptライブラリとして翻訳の結果を配布する場合のオプションは、便利です。場合は &lt;code&gt;metaInfo&lt;/code&gt; に設定した &lt;code&gt;true&lt;/code&gt; 、バイナリメタデータを編集、追加のJSファイル中に作成されます。このファイルは、翻訳結果とともに配布する必要があります。</target>
        </trans-unit>
        <trans-unit id="0fa2960d546bdd59d27062cf01e83ddeac5f62dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;metadataJar&lt;/code&gt; task has been renamed to &lt;code&gt;allMetadataJar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;metadataJar&lt;/code&gt; のタスクが名前に変更されました &lt;code&gt;allMetadataJar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4390f99faa98784caca7663e0e8bb44da962235e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;min()&lt;/code&gt; and &lt;code&gt;max()&lt;/code&gt; functions have been renamed to &lt;code&gt;minOrNull()&lt;/code&gt; and &lt;code&gt;maxOrNull()&lt;/code&gt; to comply with the naming convention used across the Kotlin collections API. An &lt;code&gt;*OrNull&lt;/code&gt; suffix in the function name means that it returns &lt;code&gt;null&lt;/code&gt; if the receiver collection is empty. The same applies to &lt;code&gt;minBy()&lt;/code&gt;, &lt;code&gt;maxBy()&lt;/code&gt;, &lt;code&gt;minWith()&lt;/code&gt;, &lt;code&gt;maxWith()&lt;/code&gt; &amp;ndash; in 1.4, they have &lt;code&gt;*OrNull()&lt;/code&gt; synonyms.</source>
          <target state="translated">&lt;code&gt;min()&lt;/code&gt; および &lt;code&gt;max()&lt;/code&gt; 関数は、名前に変更されました &lt;code&gt;minOrNull()&lt;/code&gt; と &lt;code&gt;maxOrNull()&lt;/code&gt; KotlinのコレクションAPI全体で使用される命名規則を遵守します。関数名の &lt;code&gt;*OrNull&lt;/code&gt; サフィックスは、レシーバーコレクションが空の場合に &lt;code&gt;null&lt;/code&gt; を返すことを意味します。同じことが &lt;code&gt;minBy()&lt;/code&gt; 、maxBy（）、 &lt;code&gt;maxBy()&lt;/code&gt; 、 &lt;code&gt;minWith()&lt;/code&gt; にも &lt;code&gt;maxWith()&lt;/code&gt; &amp;ndash; 1.4では、 &lt;code&gt;*OrNull()&lt;/code&gt; の同義語があります。</target>
        </trans-unit>
        <trans-unit id="ef6518091f136fea33cc33006301200c71352567" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mod&lt;/code&gt; operator is now deprecated, and &lt;code&gt;rem&lt;/code&gt; is used instead. See &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-14650&quot;&gt;this issue&lt;/a&gt; for motivation.</source>
          <target state="translated">&lt;code&gt;mod&lt;/code&gt; 演算子は廃止され、そして &lt;code&gt;rem&lt;/code&gt; 代わりに使用されます。動機については、&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-14650&quot;&gt;この問題&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="395f8c5b0caa144ef95155d2b0990a640eff00ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npm&lt;/code&gt; dependency function now takes a third parameter after the package name and version: &lt;code&gt;generateExternals&lt;/code&gt;. This allows you to individually control whether Dukat should generate declarations for a specific dependency, and it overrides the &lt;code&gt;generateKotlinExternals&lt;/code&gt; setting.</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; ：依存関係の機能は現在、パッケージ名とバージョンの後に三番目のパラメータを取ります &lt;code&gt;generateExternals&lt;/code&gt; 。これにより、Dukatが特定の依存関係の宣言を生成するかどうかを個別に制御でき、 &lt;code&gt;generateKotlinExternals&lt;/code&gt; 設定をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="a1311bbf1ab6f6fcda3f918295937e4c380353f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npm&lt;/code&gt; dependency function takes a third parameter after the package name and version: &lt;code&gt;generateExternals&lt;/code&gt;. This allows you to control whether Dukat should generate declarations for a specific dependency:</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; ：依存関係の機能は、パッケージ名とバージョンの後に三番目のパラメータを取ります &lt;code&gt;generateExternals&lt;/code&gt; 。これにより、Dukatが特定の依存関係の宣言を生成するかどうかを制御できます。</target>
        </trans-unit>
        <trans-unit id="8110b7b8d3687de9aeddaa2e0ee4cc0fcd8589ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provideDelegate&lt;/code&gt; method is called for each property during the creation of the &lt;code&gt;MyUI&lt;/code&gt; instance, and it performs the necessary validation right away.</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; の方法は、作成時に各プロパティに対して呼び出される &lt;code&gt;MyUI&lt;/code&gt; の場合、それはすぐに必要な検証を行います。</target>
        </trans-unit>
        <trans-unit id="553371a8f2ee3223a5555190c34ffafc9965ea1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provideDelegate&lt;/code&gt; method will be called for each property during the creation of a &lt;code&gt;MyUI&lt;/code&gt; instance, and it can perform the necessary validation right away.</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; の方法は、作成時に各プロパティの呼び出されます &lt;code&gt;MyUI&lt;/code&gt; のインスタンス、およびそれがすぐに必要な検証を行うことができます。</target>
        </trans-unit>
        <trans-unit id="8a67f1be603f5ede1bf9ae3c6e4bafaa7fb65414" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;simple&lt;/code&gt; function is no longer marked with &lt;code&gt;suspend&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;simple&lt;/code&gt; 機能はもはやでマークされていない &lt;code&gt;suspend&lt;/code&gt; 修飾子。</target>
        </trans-unit>
        <trans-unit id="055a24c1add39a3120b70a8885c98dfa3f6a9dc9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceSets&lt;/code&gt; block describes source sets of the project. A source set contains Kotlin source files that participate in compilations together, along with their resources, dependencies, and language settings.</source>
          <target state="translated">&lt;code&gt;sourceSets&lt;/code&gt; のブロックは、プロジェクトのソース・セットについて説明します。ソースセットには、リソース、依存関係、言語設定とともに、コンパイルに一緒に参加するKotlinソースファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="960e2214fe82d62eff0ebca52da442acae526b2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; directory contains Kotlin source files and resources. The &lt;code&gt;main.kt&lt;/code&gt; file contains sample code that will print &lt;code&gt;Hello World!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; ディレクトリには、Kotlinのソースファイルおよびリソースが含まれています。 &lt;code&gt;main.kt&lt;/code&gt; ファイルが印刷されたサンプルコード含まれている &lt;code&gt;Hello World!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="294599e3b76ed6d0958bb5ab779fa8816270584c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; directory contains Kotlin source files and resources. The file &lt;code&gt;welcome.kt&lt;/code&gt; includes sample code that renders the web page you've just seen.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; ディレクトリには、Kotlinのソースファイルおよびリソースが含まれています。ファイル &lt;code&gt;welcome.kt&lt;/code&gt; には、今見たWebページをレンダリングするサンプルコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="1d129385cfbc790b4712464852ea4141749a2d3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; directory contains the Kotlin source files and resources. The file &lt;code&gt;main.kt&lt;/code&gt; includes sample code that prints &quot;Hello, Kotlin/Native!&quot; using the &lt;a href=&quot;../../../api/latest/jvm/stdlib/stdlib/kotlin.io/println&quot;&gt;&lt;code&gt;println()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; ディレクトリには、Kotlinのソースファイルおよびリソースが含まれています。 &lt;code&gt;main.kt&lt;/code&gt; ファイルには、「Hello、Kotlin / Native！」を出力するサンプルコードが含まれています。&lt;a href=&quot;../../../api/latest/jvm/stdlib/stdlib/kotlin.io/println&quot;&gt; &lt;code&gt;println()&lt;/code&gt; &lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="0175059e36e70f08c4728ad40eca881f9d258af1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdlib&lt;/code&gt; library &amp;ndash; starting from Kotlin 1.4.0, &lt;a href=&quot;#dependency-on-the-standard-library-added-by-default&quot;&gt;the &lt;code&gt;stdlib&lt;/code&gt; dependency is added automatically&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;stdlib&lt;/code&gt; ライブラリ- Kotlin 1.4.0から始まるが、&lt;a href=&quot;#dependency-on-the-standard-library-added-by-default&quot;&gt; &lt;code&gt;stdlib&lt;/code&gt; &lt;/a&gt;依存関係が自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="3ced8435cd27ad8472273c2b70edbb4e6fae0033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strict&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; values have the same meaning as those of &lt;code&gt;MigrationStatus&lt;/code&gt;, and only the &lt;code&gt;strict&lt;/code&gt; mode affects the types in the annotated declarations as they are seen in Kotlin.</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; 、 &lt;code&gt;warn&lt;/code&gt; および &lt;code&gt;ignore&lt;/code&gt; 値がのと同じ意味を有する &lt;code&gt;MigrationStatus&lt;/code&gt; を、そして唯一の &lt;code&gt;strict&lt;/code&gt; モードは、彼らがKotlinに見られるとして注釈宣言内の型に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="b73370969f5202ffabe72c59e5b9b17674a895a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toast&lt;/code&gt; function is defined in the &lt;a href=&quot;https://github.com/Kotlin/anko&quot;&gt;Anko&lt;/a&gt; library.</source>
          <target state="translated">&lt;code&gt;toast&lt;/code&gt; 機能は、で定義されている&lt;a href=&quot;https://github.com/Kotlin/anko&quot;&gt;アンコの&lt;/a&gt;ライブラリ。</target>
        </trans-unit>
        <trans-unit id="28d1165f482266ce4727ebc682f071fdd99069b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typedef struct { .. } TYPE_NAME&lt;/code&gt; syntax is used in C language to declare a structure. &lt;a href=&quot;https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions&quot;&gt;The thread&lt;/a&gt; provides more explanations of that pattern.</source>
          <target state="translated">&lt;code&gt;typedef struct { .. } TYPE_NAME&lt;/code&gt; 構文は、構造を宣言するためにC言語で使用されています。&lt;a href=&quot;https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions&quot;&gt;スレッド&lt;/a&gt;は、そのパターンの詳細な説明を提供します。</target>
        </trans-unit>
        <trans-unit id="98db59501bac8408cab0fac3a9f3341579e6d212" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the specified name does not match any of the enum constants defined in the class.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; メソッドは、スロー &lt;code&gt;IllegalArgumentException&lt;/code&gt; 指定された名前はクラスで定義された列挙定数のいずれかと一致しない場合。</target>
        </trans-unit>
        <trans-unit id="3e338c07817ae57fb7dbab7add74e2021cf2d7f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;version&lt;/code&gt; should be literal in this block, and it cannot be applied from another build script.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; このブロック内のリテラルであるべきであり、それは別のビルドスクリプトから適用することはできません。</target>
        </trans-unit>
        <trans-unit id="271e23dc79ae024533b3813b505d0f8c07b0807d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; loop is similar to Python (but keep in mind that the condition must be an actual boolean expression, as there's no concept of truthy or falsy values).</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; ループは（truthyまたはfalsy値の概念がないとしてではなく、条件が実際のブール式でなければならないことに注意してください）Pythonのに似ています。</target>
        </trans-unit>
        <trans-unit id="223ff8adc648a88f8fddcdbfcf941801bfcdb1cf" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;New Project&lt;/em&gt; wizard in IntelliJ IDEA can be used to start a new Kotlin/Native project with just one click. Check out the &lt;em&gt;Kotlin&lt;/em&gt; section and select the &lt;em&gt;Native | Gradle&lt;/em&gt; option to generate the project. For a better understanding and to explain what's happening, in this tutorial we'll create the project manually.</source>
          <target state="translated">IntelliJ IDEA の&lt;em&gt;新規プロジェクト&lt;/em&gt;ウィザードを使用すると、ワンクリックで新しいKotlin /ネイティブプロジェクトを開始できます。&lt;em&gt;Kotlin&lt;/em&gt;セクションをチェックして、&lt;em&gt;ネイティブ&lt;/em&gt;を選択してください&lt;em&gt;。&lt;/em&gt;プロジェクトを生成する&lt;em&gt;Gradle&lt;/em&gt;オプション。理解を深め、何が起こっているのかを説明するために、このチュートリアルではプロジェクトを手動で作成します。</target>
        </trans-unit>
        <trans-unit id="7d53f956418818285247311dbf9f12e622bd802b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;by&lt;/em&gt;-clause in the supertype list for &lt;code&gt;Derived&lt;/code&gt; indicates that &lt;code&gt;b&lt;/code&gt; will be stored internally in objects of &lt;code&gt;Derived&lt;/code&gt; and the compiler will generate all the methods of &lt;code&gt;Base&lt;/code&gt; that forward to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">ためのスーパータイプのリストで-clause &lt;code&gt;Derived&lt;/code&gt; ことを示す &lt;code&gt;b&lt;/code&gt; 対象の内部に格納される &lt;code&gt;Derived&lt;/code&gt; の全てと、コンパイラが生成するメソッド &lt;code&gt;Base&lt;/code&gt; フォワードと &lt;code&gt;b&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="213b555bea1db5677fa1e760ddedf7cc9bc757bb" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;else&lt;/em&gt; branch is evaluated if none of the other branch conditions are satisfied. If &lt;em&gt;when&lt;/em&gt; is used as an expression, the &lt;em&gt;else&lt;/em&gt; branch is mandatory, unless the compiler can prove that all possible cases are covered with branch conditions (as, for example, with &lt;a href=&quot;enum-classes&quot;&gt;&lt;em&gt;enum&lt;/em&gt; class&lt;/a&gt; entries and &lt;a href=&quot;sealed-classes&quot;&gt;&lt;em&gt;sealed&lt;/em&gt; class&lt;/a&gt; subtypes).</source>
          <target state="translated">&lt;em&gt;それ以外の&lt;/em&gt;他の分岐条件のどれもが満たされていない場合は、分岐が評価されます。&lt;em&gt;when&lt;/em&gt;が式として使用される場合&lt;em&gt;、&lt;/em&gt;可能なすべてのケースが分岐条件（たとえば、&lt;a href=&quot;enum-classes&quot;&gt;&lt;em&gt;列挙型&lt;/em&gt;&lt;/a&gt;クラスエントリや&lt;a href=&quot;sealed-classes&quot;&gt;&lt;em&gt;封印された&lt;/em&gt;&lt;/a&gt;クラスサブタイプなど）でカバーされていることをコンパイラーが証明できない限り、&lt;em&gt;else&lt;/em&gt;分岐は必須です。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="61bf16ef28ea6d5682c3a6e4f7b1d1fca409774d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;is&lt;/em&gt; operator checks if an expression is an instance of a type. If an immutable local variable or property is checked for a specific type, there's no need to cast it explicitly:</source>
          <target state="translated">&lt;em&gt;ある&lt;/em&gt;式が型のインスタンスである場合にオペレータをチェックします。不変のローカル変数またはプロパティが特定の型についてチェックされている場合、明示的にキャストする必要はありません。</target>
        </trans-unit>
        <trans-unit id="f6350fa23a8337c14451639e9dda41ba02fbc154" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;kotlin-maven-plugin&lt;/em&gt; compiles Kotlin sources and modules. Currently only Maven v3 is supported.</source>
          <target state="translated">&lt;em&gt;kotlin-のmaven-pluginの&lt;/em&gt;コンパイルKotlin源とモジュール。現在、Maven v3のみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="ac3430431502d340786bc5ac5f5a79619bd1b1b8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;mapping&lt;/em&gt; transformation creates a collection from the results of a function on the elements of another collection. The basic mapping function is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt;. It applies the given lambda function to each subsequent element and returns the list of the lambda results. The order of results is the same as the original order of elements. To apply a transformation that additionally uses the element index as an argument, use &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-indexed&quot;&gt;&lt;code&gt;mapIndexed()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;マッピングの&lt;/em&gt;変換は、別のコレクションの要素に対する関数の結果からコレクションを作成します。基本的なマッピング関数は&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt;です。指定されたラムダ関数を後続の各要素に適用し、ラムダ結果のリストを返します。結果の順序は、元の要素の順序と同じです。要素インデックスを引数としてさらに使用する変換を適用するには、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-indexed&quot;&gt; &lt;code&gt;mapIndexed()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="7f10d769163cad6919d11542a05d27b21373fb57" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;no-arg&lt;/em&gt; compiler plugin generates an additional zero-argument constructor for classes with a specific annotation.</source>
          <target state="translated">&lt;em&gt;引数なしの&lt;/em&gt;コンパイラプラグインは、特定の注釈付きクラスのための追加の引数なしのコンストラクタを生成します。</target>
        </trans-unit>
        <trans-unit id="5691855d07c59433c1b89721a503fe2ada65d67c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;override&lt;/em&gt; modifier is required for &lt;code&gt;Circle.draw()&lt;/code&gt;. If it were missing, the compiler would complain. If there is no &lt;em&gt;open&lt;/em&gt; modifier on a function, like &lt;code&gt;Shape.fill()&lt;/code&gt;, declaring a method with the same signature in a subclass is illegal, either with &lt;em&gt;override&lt;/em&gt; or without it. The &lt;em&gt;open&lt;/em&gt; modifier has no effect when added on members of a final class (i.e.. a class with no &lt;em&gt;open&lt;/em&gt; modifier).</source>
          <target state="translated">&lt;em&gt;オーバーライド&lt;/em&gt;修飾子が要求される &lt;code&gt;Circle.draw()&lt;/code&gt; 。それが欠落している場合、コンパイラは文句を言います。 &lt;code&gt;Shape.fill()&lt;/code&gt; のように、関数に&lt;em&gt;open&lt;/em&gt;修飾子がない場合、サブクラスで同じシグネチャを持つメソッドを宣言することは、&lt;em&gt;オーバーライドの&lt;/em&gt;有無にかかわらず、違法です。&lt;em&gt;オープン&lt;/em&gt;finalクラス（すなわちなしでクラスのメンバーに追加したとき修飾子は効果がありません&lt;em&gt;オープン&lt;/em&gt;修飾子）。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c23eadbd5827ce2bda3043305cafb8fee54b97d1" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;override&lt;/em&gt; modifier is required for &lt;code&gt;Derived.v()&lt;/code&gt;. If it were missing, the compiler would complain. If there is no &lt;em&gt;open&lt;/em&gt; modifier on a function, like &lt;code&gt;Base.nv()&lt;/code&gt;, declaring a method with the same signature in a subclass is illegal, either with &lt;em&gt;override&lt;/em&gt; or without it. The &lt;em&gt;open&lt;/em&gt; modifier has no effect when added on members of a final class (i.e.. a class with no &lt;em&gt;open&lt;/em&gt; modifier).</source>
          <target state="translated">&lt;em&gt;オーバーライド&lt;/em&gt;修飾子が要求される &lt;code&gt;Derived.v()&lt;/code&gt; 。それが欠けていると、コンパイラーは文句を言うでしょう。 &lt;code&gt;Base.nv()&lt;/code&gt; などの関数に&lt;em&gt;オープン&lt;/em&gt;修飾子がない場合、サブクラスで同じシグネチャを持つメソッドを宣言することは、&lt;em&gt;オーバーライドの&lt;/em&gt;有無にかかわらず、不正です。&lt;em&gt;オープン&lt;/em&gt; finalクラス（すなわちなしでクラスのメンバーに追加したとき修飾子は効果がありません&lt;em&gt;オープン&lt;/em&gt;修飾子）。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7a6efa4e40ec720cdbba584f5f17332e3c02e6f0" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;primitive data types&lt;/em&gt; are the most fundamental types in Kotlin; all other types are built up of these types and arrays thereof. Their representation is very efficient (both in terms of memory and CPU time), as they map to small byte groups that are directly manipulatable by the CPU.</source>
          <target state="translated">&lt;em&gt;プリミティブデータ型は、&lt;/em&gt; Kotlinの中で最も基本的なタイプです。他のすべてのタイプは、これらのタイプとその配列で構成されます。それらは、CPUによって直接操作可能な小さなバイトグループにマッピングされるため、（メモリとCPU時間の両方に関して）非常に効率的です。</target>
        </trans-unit>
        <trans-unit id="487cd135e968638b95e9f2832e5094575fc75a4e" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;return&lt;/em&gt;-expression returns from the nearest enclosing function, i.e. &lt;code&gt;foo&lt;/code&gt;. (Note that such non-local returns are supported only for lambda expressions passed to &lt;a href=&quot;inline-functions&quot;&gt;inline functions&lt;/a&gt;.) If we need to return from a lambda expression, we have to label it and qualify the &lt;em&gt;return&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;リターン&lt;/em&gt;最も内側の関数から-expression戻り、すなわち &lt;code&gt;foo&lt;/code&gt; という。（このような非局所的なリターンのみに渡されたラムダ式のためにサポートされていることを注意&lt;a href=&quot;inline-functions&quot;&gt;インライン関数&lt;/a&gt;。）私たちはラムダ式から復帰する必要がある場合は、我々はそれにラベルを付け、修飾する必要が&lt;em&gt;リターンを&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="cafe8afb40f89fdcda59dc51de02a6061deac76b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;sam-with-receiver&lt;/em&gt; compiler plugin makes the first parameter of the annotated Java &quot;single abstract method&quot; (SAM) interface method a receiver in Kotlin. This conversion only works when the SAM interface is passed as a Kotlin lambda, both for SAM adapters and SAM constructors (see the &lt;a href=&quot;java-interop#sam-conversions&quot;&gt;documentation&lt;/a&gt; for more details).</source>
          <target state="translated">&lt;em&gt;SAM-とレシーバ&lt;/em&gt;コンパイラプラグインは、注釈付きのJava「単一抽象メソッド」（SAM）インターフェースメソッドの最初のパラメータKotlinで受信を行います。この変換は、SAMアダプターとSAMコンストラクターの両方について、SAMインターフェースがKotlinラムダとして渡される場合にのみ機能します（詳細については、&lt;a href=&quot;java-interop#sam-conversions&quot;&gt;ドキュメント&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="2b5aab8f26eb6a59834e5185db5f935d540467ca" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;this&lt;/em&gt; keyword inside an extension function corresponds to the receiver object (the one that is passed before the dot). Now, we can call such a function on any &lt;code&gt;MutableList&amp;lt;Int&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">拡張関数内の&lt;em&gt;this&lt;/em&gt;キーワードは、レシーバーオブジェクト（ドットの前に渡されるオブジェクト）に対応します。これで、このような関数を任意の &lt;code&gt;MutableList&amp;lt;Int&amp;gt;&lt;/code&gt; 呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="610610ce4b9c2a06c0d2c740b86b1595d612ed87" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;when&lt;/em&gt; expression replaces the switch statement in C-like languages. In the simplest form it looks like this</source>
          <target state="translated">&lt;em&gt;とき&lt;/em&gt;式はCに似た言語でswitch文を置き換えます。最も単純な形式では、次のようになります</target>
        </trans-unit>
        <trans-unit id="e4593e8bf83aea9987066006e1b0abd71f9ad1e3" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Coroutines&lt;/strong&gt; tab contains information on running or suspended coroutines.</source>
          <target state="translated">[&lt;strong&gt;コルーチン&lt;/strong&gt;]タブには、実行中または一時停止中のコルーチンに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="fc25df34385ceb3cf4562e5af15fbfdf26d8c120" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Coroutines&lt;/strong&gt; tab contains information on running or suspended coroutines. It shows that there are three coroutines. The first one has the &lt;strong&gt;RUNNING&lt;/strong&gt; status, and the other two have the &lt;strong&gt;CREATED&lt;/strong&gt; status.</source>
          <target state="translated">[&lt;strong&gt;コルーチン&lt;/strong&gt;]タブには、実行中または一時停止中のコルーチンに関する情報が含まれています。これは、3つのコルーチンがあることを示しています。最初の1つは&lt;strong&gt;RUNNING&lt;/strong&gt;ステータスで、他の2つは&lt;strong&gt;CREATED&lt;/strong&gt;ステータスです。</target>
        </trans-unit>
        <trans-unit id="788f812830f8a46ef15a78708bb404f883cce900" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug Tool Window&lt;/strong&gt; now contains a new &lt;strong&gt;Coroutines&lt;/strong&gt; tab. In this tab, you can find information about both currently running and suspended coroutines. The coroutines are grouped by the dispatcher they are running on.</source>
          <target state="translated">&lt;strong&gt;デバッグツールウィンドウは&lt;/strong&gt;、新しい含ま&lt;strong&gt;コルーチン&lt;/strong&gt;タブを。このタブでは、現在実行中のコルーチンと一時停止中のコルーチンの両方に関する情報を見つけることができます。コルーチンは、実行しているディスパッチャによってグループ化されます。</target>
        </trans-unit>
        <trans-unit id="5b6868e043da075558049d4d1c51d3e16f9899e6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug&lt;/strong&gt; tool window appears.</source>
          <target state="translated">&lt;strong&gt;デバッグ&lt;/strong&gt;ツールウィンドウが表示されます。</target>
        </trans-unit>
        <trans-unit id="48f0ab099248e8d585f6091eee52384ecaffb465" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug&lt;/strong&gt; tool window appears:</source>
          <target state="translated">&lt;strong&gt;デバッグ&lt;/strong&gt;ツールウィンドウが表示されます。</target>
        </trans-unit>
        <trans-unit id="4474dcb438fb0b1d5730dee1b01c00e81230dea0" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug&lt;/strong&gt; tool window contains the &lt;strong&gt;Coroutines&lt;/strong&gt; tab. In this tab, you can find information about both currently running and suspended coroutines. The coroutines are grouped by the dispatcher they are running on.</source>
          <target state="translated">&lt;strong&gt;デバッグ&lt;/strong&gt;ツールウィンドウが含まれている&lt;strong&gt;コルーチン&lt;/strong&gt;タブを。このタブでは、現在実行中のコルーチンと一時停止中のコルーチンの両方に関する情報を見つけることができます。コルーチンは、実行しているディスパッチャによってグループ化されます。</target>
        </trans-unit>
        <trans-unit id="0944c672efb8d3cb2c26dddcbfd14a013cec2059" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Frames&lt;/strong&gt; tab contains the call stack.</source>
          <target state="translated">[&lt;strong&gt;フレーム&lt;/strong&gt;]タブには、呼び出しスタックが含まれています。</target>
        </trans-unit>
        <trans-unit id="7bf4380b0d9c396f248496156eecf62a4cafb8d3" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Variables&lt;/strong&gt; tab contains variables in the current context.</source>
          <target state="translated">[&lt;strong&gt;変数&lt;/strong&gt;]タブには、現在のコンテキストの変数が含まれています。</target>
        </trans-unit>
        <trans-unit id="c4f79bc1fa7ad1d6857747747252bb7bc3cfc87c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Variables&lt;/strong&gt; tab contains variables in the current context. It tells us that the flow is emitting the first value.</source>
          <target state="translated">[&lt;strong&gt;変数&lt;/strong&gt;]タブには、現在のコンテキストの変数が含まれています。これは、フローが最初の値を放出していることを示しています。</target>
        </trans-unit>
        <trans-unit id="64ff96f8d5986618b0177325f56f06db0b6ef27e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;cinterop&lt;/strong&gt; tool produces &lt;code&gt;.klib&lt;/code&gt; wrappers for native libraries as its main output. For example, using the simple &lt;code&gt;libgit2.def&lt;/code&gt; native library definition file provided in your Kotlin/Native distribution</source>
          <target state="translated">&lt;strong&gt;cinteropの&lt;/strong&gt;ツールが生成 &lt;code&gt;.klib&lt;/code&gt; そのメイン出力などのネイティブライブラリのラッパーを。たとえば、Kotlin /ネイティブディストリビューションで提供されているシンプルな &lt;code&gt;libgit2.def&lt;/code&gt; ネイティブライブラリ定義ファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="3afe66cbf747b6ceb2175d27e523f7de3f8680c5" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;klib&lt;/strong&gt; library management utility allows you to inspect and install the libraries.</source>
          <target state="translated">&lt;strong&gt;klib&lt;/strong&gt;ライブラリ管理ユーティリティを使用すると、ライブラリを検査し、インストールすることができます。</target>
        </trans-unit>
        <trans-unit id="4754f312fedbc815f86ed89afbc9edf502f5ba2a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;out&lt;/strong&gt; modifier is called a &lt;strong&gt;variance annotation&lt;/strong&gt;, and since it is provided at the type parameter declaration site, we talk about &lt;strong&gt;declaration-site variance&lt;/strong&gt;. This is in contrast with Java's &lt;strong&gt;use-site variance&lt;/strong&gt; where wildcards in the type usages make the types covariant.</source>
          <target state="translated">&lt;strong&gt;アウト&lt;/strong&gt;修飾子が呼び出され&lt;strong&gt;、分散注釈&lt;/strong&gt;、それは型パラメータ宣言のサイトで提供されているので、我々はについて話&lt;strong&gt;宣言サイトの分散&lt;/strong&gt;。これは、型の使用法でワイルドカードを使用して型を共変にするJavaの&lt;strong&gt;使用サイトの差異&lt;/strong&gt;とは対照的です。</target>
        </trans-unit>
        <trans-unit id="e4cdeee14d0ede31e2c00aaa982268d6ad103b09" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;wildcard type argument&lt;/strong&gt;&lt;code&gt;? extends E&lt;/code&gt; indicates that this method accepts a collection of objects of &lt;code&gt;E&lt;/code&gt;&lt;em&gt;or some subtype of&lt;/em&gt;&lt;code&gt;E&lt;/code&gt;, not just &lt;code&gt;E&lt;/code&gt; itself. This means that we can safely &lt;strong&gt;read&lt;/strong&gt;&lt;code&gt;E&lt;/code&gt;'s from items (elements of this collection are instances of a subclass of E), but &lt;strong&gt;cannot write&lt;/strong&gt; to it since we do not know what objects comply to that unknown subtype of &lt;code&gt;E&lt;/code&gt;. In return for this limitation, we have the desired behaviour: &lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; a subtype of &lt;code&gt;Collection&amp;lt;? extends Object&amp;gt;&lt;/code&gt;. In &quot;clever words&quot;, the wildcard with an &lt;strong&gt;extends&lt;/strong&gt;-bound (&lt;strong&gt;upper&lt;/strong&gt; bound) makes the type &lt;strong&gt;covariant&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;ワイルドカード型引数&lt;/strong&gt; &lt;code&gt;? extends E&lt;/code&gt; は、このメソッドが &lt;code&gt;E&lt;/code&gt; 自体だけでなく、 &lt;code&gt;E&lt;/code&gt; &lt;em&gt;または&lt;/em&gt; &lt;code&gt;E&lt;/code&gt; の&lt;em&gt;サブタイプの&lt;/em&gt;オブジェクトのコレクションを受け入れることを示します。つまり、アイテムから &lt;code&gt;E&lt;/code&gt; を安全に&lt;strong&gt;読み取る&lt;/strong&gt;ことができます（このコレクションの要素はEのサブクラスのインスタンスです）が、その未知のサブタイプである &lt;code&gt;E&lt;/code&gt; に準拠するオブジェクトがわからないため、&lt;strong&gt;書き込むこと&lt;/strong&gt;が&lt;strong&gt;できません&lt;/strong&gt;。この制限の見返りとして、望ましい動作があります &lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt; &lt;em&gt;は&lt;/em&gt; &lt;code&gt;Collection&amp;lt;? extends Object&amp;gt;&lt;/code&gt; サブタイプです。 Object&amp;gt;を拡張します。 「賢い言葉」では、ワイルドカードに&lt;strong&gt;extends&lt;/strong&gt; -bound（&lt;strong&gt;upper&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;bound）型を&lt;strong&gt;共変にし&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1a90eeb87b3e982cfd1ef4a4b65cfd6c27586462" translate="yes" xml:space="preserve">
          <source>The Android world has many popular frameworks simplifying development. You can use the same frameworks if you develop in Kotlin, often as easily as you'd do that in Java. This tutorial provides examples and highlights the differences in settings.</source>
          <target state="translated">Androidの世界には、開発を簡単にする人気のフレームワークがたくさんあります。Kotlinで開発する場合も同じフレームワークを使うことができ、Javaで開発するのと同じように簡単にできることが多いです。このチュートリアルでは、例を示し、設定の違いを強調しています。</target>
        </trans-unit>
        <trans-unit id="3430e3a872bb2996105b11f8b1c91c259c56b1b4" translate="yes" xml:space="preserve">
          <source>The Bintray plugin doesn&amp;rsquo;t support publishing Gradle module metadata, but there are a couple of ways to get around this issue:</source>
          <target state="translated">Bintrayプラグインは、Gradleモジュールのメタデータの公開をサポートしていませんが、この問題を回避する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="d41ba3261445c389f8874772f5879ab48af811af" translate="yes" xml:space="preserve">
          <source>The C data variable containing the pointer to &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; へのポインターを含むCデータ変数。</target>
        </trans-unit>
        <trans-unit id="05360f394dd3e60e07e614be2588088eb89e3b72" translate="yes" xml:space="preserve">
          <source>The C data variable located in memory.</source>
          <target state="translated">メモリ上にあるCデータ変数です。</target>
        </trans-unit>
        <trans-unit id="cf919179eecf4647d490ce563cdd6bff132af96d" translate="yes" xml:space="preserve">
          <source>The C function.</source>
          <target state="translated">C関数です。</target>
        </trans-unit>
        <trans-unit id="d36502dcbc1bebedd6773776218e3117a26820bc" translate="yes" xml:space="preserve">
          <source>The C primitive-typed variable located in memory.</source>
          <target state="translated">メモリ内にある C のプリミティブ型変数。</target>
        </trans-unit>
        <trans-unit id="639b72b8a51545cc688d8100df8871c5e14d7a1a" translate="yes" xml:space="preserve">
          <source>The C struct-typed variable located in memory.</source>
          <target state="translated">メモリ上にあるCの構造体型変数。</target>
        </trans-unit>
        <trans-unit id="c4b0fbfe88d7c41e706fcbcc447e39c33c492192" translate="yes" xml:space="preserve">
          <source>The CocoaPods plugin also allows using CocoaPods libraries without manual configuring cinterop parameters (see the &lt;a href=&quot;../building-mpp-with-gradle#cinterop-support&quot;&gt;corresponding section&lt;/a&gt; of the multiplatform plugin documentation). The &lt;code&gt;cocoapods { ... }&lt;/code&gt; code block allows you to add dependencies on CocoaPods libraries.</source>
          <target state="translated">CocoaPodsプラグインでは、cinteropパラメータを手動で構成せずにCocoaPodsライブラリを使用することもできます（マルチプラットフォームプラグインのドキュメントの&lt;a href=&quot;../building-mpp-with-gradle#cinterop-support&quot;&gt;対応するセクション&lt;/a&gt;を参照してください）。 &lt;code&gt;cocoapods { ... }&lt;/code&gt; コードブロックは、あなたがCocoaPodsライブラリの依存関係を追加することができます。</target>
        </trans-unit>
        <trans-unit id="8779fd3a2cac48558378b86549bbda66333c4276" translate="yes" xml:space="preserve">
          <source>The CocoaPods support is implemented in a separate Gradle plugin: &lt;code&gt;org.jetbrains.kotlin.native.cocoapods&lt;/code&gt;.</source>
          <target state="translated">：CocoaPodsサポートは、別のGradleプラグインで実装されて &lt;code&gt;org.jetbrains.kotlin.native.cocoapods&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bd3aa1e3e57f3eb3ef63cd39980df09053647402" translate="yes" xml:space="preserve">
          <source>The Coroutine Debugger of the Kotlin plugin simplifies debugging coroutines in IntelliJ IDEA.</source>
          <target state="translated">KotlinプラグインのCoroutineデバッガは、IntelliJ IDEAでのコルーチンのデバッグを簡素化します。</target>
        </trans-unit>
        <trans-unit id="24a56079ca4afabfa7a909e10193add3dd7a492a" translate="yes" xml:space="preserve">
          <source>The DOM also provides us a way to retrieve a specific element by ID, name, class name, tag name and so on. All returned elements are of type &lt;code&gt;NodeList&lt;/code&gt;, and to access members we need to cast them to the specific type of element. The code below shows how we could access an input element on the page:</source>
          <target state="translated">DOMは、ID、名前、クラス名、タグ名などによって特定の要素を取得する方法も提供します。返される要素はすべて &lt;code&gt;NodeList&lt;/code&gt; タイプであり、メンバーにアクセスするには、それらを特定のタイプの要素にキャストする必要があります。以下のコードは、ページの入力要素にアクセスする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="5e5d725eeffdb400057e1d8991c3e79a23a2a6af" translate="yes" xml:space="preserve">
          <source>The Dukat integration for Gradle has received minor naming and functionality changes with Kotlin 1.4.0.</source>
          <target state="translated">Gradle の Dukat 統合は Kotlin 1.4.0 でマイナーなネーミングと機能の変更を受けました。</target>
        </trans-unit>
        <trans-unit id="325910eae4ee7077ed16505d94cb7161a53ff4ff" translate="yes" xml:space="preserve">
          <source>The Entry Point</source>
          <target state="translated">エントリーポイント</target>
        </trans-unit>
        <trans-unit id="c1f2de3caa83760aa037581086bf37c054caebbb" translate="yes" xml:space="preserve">
          <source>The Gradle file is pretty much standard for Spring Boot. The only differences are the structure layout for source folders for Kotlin, the required Kotlin dependencies and the &lt;a href=&quot;../reference/compiler-plugins#kotlin-spring-compiler-plugi&quot;&gt;&lt;em&gt;kotlin-spring&lt;/em&gt;&lt;/a&gt; Gradle plugin (CGLIB proxies used for example for &lt;code&gt;@Configuration&lt;/code&gt; and &lt;code&gt;@Bean&lt;/code&gt; processing require &lt;code&gt;open&lt;/code&gt; classes).</source>
          <target state="translated">Gradleファイルは、Spring Bootのほとんどの標準です。唯一の違いは、Kotlinのソースフォルダーの構造レイアウト、必要なKotlinの依存関係、およびKotlin &lt;a href=&quot;../reference/compiler-plugins#kotlin-spring-compiler-plugi&quot;&gt;&lt;em&gt;-spring&lt;/em&gt;&lt;/a&gt; Gradleプラグインです（たとえば、 &lt;code&gt;@Configuration&lt;/code&gt; および &lt;code&gt;@Bean&lt;/code&gt; の処理に使用されるCGLIBプロキシには &lt;code&gt;open&lt;/code&gt; クラスが必要です）。</target>
        </trans-unit>
        <trans-unit id="af4ea41e06d67df72de18198c84923c5e721e071" translate="yes" xml:space="preserve">
          <source>The Gradle plugin provides a separate task that creates a universal framework for iOS targets from several regular ones. The example below shows how to use this task. Note that the fat framework must have the same base name as the initial frameworks.</source>
          <target state="translated">Gradleプラグインは、いくつかの通常のものからiOSターゲット用のユニバーサルフレームワークを作成する別のタスクを提供しています。以下の例は、このタスクの使い方を示しています。fatフレームワークは初期のフレームワークと同じベース名を持つ必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9f74ca6bef3427e6249723da9d4ccaf98eb70bf4" translate="yes" xml:space="preserve">
          <source>The Groovy language is the first supported scripting language for Gradle, it leverages the power of dynamic typing and runtime features of the language. It is also possible to use Kotlin in Gradle scripts. Being a statically-typed language, it plays better with IDEs when it comes to compilation and error detection.</source>
          <target state="translated">Groovy言語はGradleで最初にサポートされたスクリプト言語で、動的型付けのパワーと言語のランタイム機能を活用しています。GradleスクリプトでKotlinを使用することも可能です。静的型付けされた言語であるため、コンパイルやエラー検出に関してはIDEとの相性が良いです。</target>
        </trans-unit>
        <trans-unit id="efa31b56beb50cb747605ae05725fa853a4a4ec2" translate="yes" xml:space="preserve">
          <source>The IR backend &lt;strong&gt;does not make Kotlin declarations available to JavaScript&lt;/strong&gt; by default at all. To make Kotlin declarations visible to JavaScript, they &lt;strong&gt;must be&lt;/strong&gt; annotated with &lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt;&lt;code&gt;@JsExport&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">IRバックエンド&lt;strong&gt;は&lt;/strong&gt;、デフォルトでは&lt;strong&gt;Kotlin宣言をJavaScriptで使用できるようにしません&lt;/strong&gt;。Kotlin宣言をJavaScriptで表示するには、&lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt; &lt;code&gt;@JsExport&lt;/code&gt; &lt;/a&gt;アノテーションを付ける&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="755fcf74e20f2d2ddd913b11ca69555b3cbd9313" translate="yes" xml:space="preserve">
          <source>The IR compiler backend also has some discrepancies in comparison to the default backend. When trying out the new backend, it's good to be mindful of these possible pitfalls.</source>
          <target state="translated">IR コンパイラのバックエンドには、デフォルトのバックエンドと比較していくつかの相違点があります。新しいバックエンドを試す際には、これらの落とし穴に注意すると良いでしょう。</target>
        </trans-unit>
        <trans-unit id="4151edd0fc4780c88357f0d2094d84de6aa64553" translate="yes" xml:space="preserve">
          <source>The IR compiler backend is available starting with Kotlin 1.4.0 through the Kotlin/JS Gradle plugin. To enable it in your project, pass a compiler type to the &lt;code&gt;js&lt;/code&gt; function in your Gradle build script:</source>
          <target state="translated">IRコンパイラバックエンドは、Kotlin1.4.0以降からKotlin / JSGradleプラグインを介して利用できます。プロジェクトで有効にするには、Gradleビルドスクリプトの &lt;code&gt;js&lt;/code&gt; 関数にコンパイラタイプを渡します。</target>
        </trans-unit>
        <trans-unit id="c9686505fe7f54579b832493ec5b1983b12000c6" translate="yes" xml:space="preserve">
          <source>The JS typed arrays support that translates Kotlin primitive arrays, such as &lt;code&gt;IntArray&lt;/code&gt;, &lt;code&gt;DoubleArray&lt;/code&gt;, into &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;JavaScript typed arrays&lt;/a&gt;, that was previously an opt-in feature, has been enabled by default.</source>
          <target state="translated">&lt;code&gt;IntArray&lt;/code&gt; や &lt;code&gt;DoubleArray&lt;/code&gt; などのKotlinプリミティブ配列を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;JavaScriptの型付き配列&lt;/a&gt;に変換するJS型付き配列サポートは、以前はオプトイン機能でしたが、デフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="37ed5aeb9956cf68199e058567f26ab71cd7268f" translate="yes" xml:space="preserve">
          <source>The JSR-305 checks can be configured by adding the &lt;code&gt;-Xjsr305&lt;/code&gt; compiler flag with the following options (and their combination):</source>
          <target state="translated">JSR-305チェックは、 &lt;code&gt;-Xjsr305&lt;/code&gt; コンパイラフラグに次のオプション（およびそれらの組み合わせ）を追加することで構成できます。</target>
        </trans-unit>
        <trans-unit id="c894b80f33c243fce1a6e9a404bf349725ee326a" translate="yes" xml:space="preserve">
          <source>The Java source files are placed in the child directories of the Kotlin source roots. For example, the paths are:</source>
          <target state="translated">Javaのソースファイルは、Kotlinのソースルートの子ディレクトリに配置されます。例えば、パスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="51612587c1c419278f755138c2099bb90c306242" translate="yes" xml:space="preserve">
          <source>The Jupyter Notebook is an open-source web application that allows you to create and share documents (aka &quot;notebooks&quot;) that can contain code, visualizations, and markdown text. &lt;a href=&quot;https://github.com/Kotlin/kotlin-jupyter&quot;&gt;Kotlin-jupyter&lt;/a&gt; is an open source project that brings Kotlin support to Jupyter Notebook.</source>
          <target state="translated">Jupyter Notebookは、コード、ビジュアライゼーション、およびマークダウンテキストを含むことができるドキュメント（別名「ノートブック」）を作成および共有できるようにするオープンソースのWebアプリケーションです。&lt;a href=&quot;https://github.com/Kotlin/kotlin-jupyter&quot;&gt;Kotlin-jupyter&lt;/a&gt;は、KotlinサポートをJupyterNotebookにもたらすオープンソースプロジェクトです。</target>
        </trans-unit>
        <trans-unit id="8614662835decc941fb88cef784012c8f902a438" translate="yes" xml:space="preserve">
          <source>The Kotlin Android Extensions plugin allows us to obtain the same experience we have with some of these libraries, without having to add any extra code.</source>
          <target state="translated">Kotlin Android Extensions プラグインを使うと、余分なコードを追加することなく、これらのライブラリを使っているのと同じ経験を得ることができます。</target>
        </trans-unit>
        <trans-unit id="3fa035c9f4f03b0b989b6313990e3a366a7fc07b" translate="yes" xml:space="preserve">
          <source>The Kotlin Gradle plugin 1.4.10 works with Gradle 5.4 and later. The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin requires Gradle 6.0 or later.</source>
          <target state="translated">Kotlin Gradleプラグイン1.4.10は、Gradle5.4以降で動作します。 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインには、Gradle6.0以降が必要です。</target>
        </trans-unit>
        <trans-unit id="b801cd7f041e6d90c21e7238c859980046339a8a" translate="yes" xml:space="preserve">
          <source>The Kotlin Gradle plugin supports incremental compilation. Incremental compilation tracks changes of source files between builds so only files affected by these changes would be compiled.</source>
          <target state="translated">Kotlin Gradle プラグインはインクリメンタルコンパイルをサポートしています。インクリメンタルコンパイルはビルド間のソースファイルの変更を追跡するので、変更の影響を受けるファイルのみがコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="11818c172874b525f41c4774ffd3a8d06183ee2a" translate="yes" xml:space="preserve">
          <source>The Kotlin Maven Plugin needs to be referenced to compile the sources:</source>
          <target state="translated">ソースをコンパイルするためにKotlin Mavenプラグインを参照する必要があります。</target>
        </trans-unit>
        <trans-unit id="07861e97fff4148e0e2dc19059a6eb8ea6818607" translate="yes" xml:space="preserve">
          <source>The Kotlin Multiplatform Gradle plugin is a tool for creating &lt;a href=&quot;multiplatform&quot;&gt;Kotlin multiplatform&lt;/a&gt; projects. Here we provide a reference of its contents; use it as a reminder when writing Gradle build scripts for Kotlin multiplatform projects. Learn the &lt;a href=&quot;mpp-intro&quot;&gt;concepts of Kotlin multiplatform projects, how to create and configure them&lt;/a&gt;.</source>
          <target state="translated">Kotlin Multiplatform Gradleプラグインは、&lt;a href=&quot;multiplatform&quot;&gt;Kotlinマルチプラットフォーム&lt;/a&gt;プロジェクトを作成するためのツールです。ここでは、その内容のリファレンスを提供します。Kotlinマルチプラットフォームプロジェクト用のGradleビルドスクリプトを作成する際のリマインダーとして使用してください。&lt;a href=&quot;mpp-intro&quot;&gt;Kotlinマルチプラットフォームプロジェクトの概念、それらを作成および構成する方法を&lt;/a&gt;学びます。</target>
        </trans-unit>
        <trans-unit id="d8c1bd6ec83b1ddaba95f254c85ffd64b43ba2c8" translate="yes" xml:space="preserve">
          <source>The Kotlin Project Wizard will only show the build systems supported on the selected project template.</source>
          <target state="translated">Kotlin プロジェクトウィザードは、選択したプロジェクトテンプレートでサポートされているビルドシステムのみを表示します。</target>
        </trans-unit>
        <trans-unit id="37663063036a12a6822fa57324a6d2a0ee490515" translate="yes" xml:space="preserve">
          <source>The Kotlin Scripting API now provides the ability to implement a compiled scripts cache, significantly speeding up subsequent executions of unchanged scripts. Our default advanced script implementation &lt;code&gt;kotlin-main-kts&lt;/code&gt; already has its own cache.</source>
          <target state="translated">Kotlin Scripting APIは、コンパイルされたスクリプトキャッシュを実装する機能を提供し、変更されていないスクリプトの後続の実行を大幅に高速化します。デフォルトの高度なスクリプト実装 &lt;code&gt;kotlin-main-kts&lt;/code&gt; には、すでに独自のキャッシュがあります。</target>
        </trans-unit>
        <trans-unit id="e701f1b663fc8e1d541e7d7bed4b022ef1cd48e3" translate="yes" xml:space="preserve">
          <source>The Kotlin Standard Library provides a comprehensive set of tools for managing &lt;em&gt;collections&lt;/em&gt; &amp;ndash; groups of a variable number of items (possibly zero) that share significance to the problem being solved and are operated upon commonly.</source>
          <target state="translated">Kotlin標準ライブラリは、&lt;em&gt;コレクション&lt;/em&gt;を管理するための包括的なツールセットを提供します。これは、解決される問題の重要性を共有し、一般的に操作される、変数の数（おそらく0）のグループです。</target>
        </trans-unit>
        <trans-unit id="8a031299bd7c193b637e92a822d8538f69af9b3a" translate="yes" xml:space="preserve">
          <source>The Kotlin Standard Library provides implementations for basic collection types: sets, lists, and maps. A pair of interfaces represent each collection type:</source>
          <target state="translated">Kotlin標準ライブラリは,基本的なコレクションタイプであるセット,リスト,マップの実装を提供します.一対のインターフェースがそれぞれのコレクションタイプを表します。</target>
        </trans-unit>
        <trans-unit id="3f614163c9f0e1a9b558eccd140b5d89bbaff4cb" translate="yes" xml:space="preserve">
          <source>The Kotlin Standard Library provides living essentials for everyday work with Kotlin. These include:</source>
          <target state="translated">Kotlin Standard Libraryは、Kotlinで毎日の仕事に必要な生活必需品を提供しています。これらには以下のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="33a29a3734d935aaab60c852c81fd82eccf705fa" translate="yes" xml:space="preserve">
          <source>The Kotlin code is turned into very similar looking code in Swift. There are some small differences, though. In Kotlin any &lt;code&gt;object&lt;/code&gt; has only one instance. Kotlin &lt;code&gt;object Object&lt;/code&gt; now has a constructor in Swift, and we use the &lt;code&gt;Object()&lt;/code&gt; syntax to access the only instance of it. The instance is always the same in Swift, so that &lt;code&gt;Object() === Object()&lt;/code&gt; is true. Methods and property names are translated as-is. Kotlin &lt;code&gt;String&lt;/code&gt; is turned into Swift &lt;code&gt;String&lt;/code&gt; too. Swift hides &lt;code&gt;NSNumber*&lt;/code&gt; boxing from us too. We pass Swift closure to Kotlin and call a Kotlin lambda function from Swift too.</source>
          <target state="translated">Kotlinコードは、Swiftで非常によく似たコードに変わります。ただし、小さな違いがいくつかあります。 Kotlinでは、どの &lt;code&gt;object&lt;/code&gt; もインスタンスは1つしかありません。 Kotlin &lt;code&gt;object Object&lt;/code&gt; はSwiftにコンストラクターを持ち、 &lt;code&gt;Object()&lt;/code&gt; 構文を使用してその唯一のインスタンスにアクセスします。インスタンスはSwiftでも常に同じなので、 &lt;code&gt;Object() === Object()&lt;/code&gt; はtrueです。メソッドとプロパティ名はそのまま変換されます。 Kotlin &lt;code&gt;String&lt;/code&gt; もSwift &lt;code&gt;String&lt;/code&gt; に変わりました。 Swiftは &lt;code&gt;NSNumber*&lt;/code&gt; ボクシングも私たちから隠しています。 SwiftクロージャーをKotlinに渡し、SwiftからKotlinラムダ関数も呼び出します。</target>
        </trans-unit>
        <trans-unit id="a82d7ab28c8dc762af0699f165239106b9d7ca89" translate="yes" xml:space="preserve">
          <source>The Kotlin collections package contains extension functions for popular operations on sets: finding intersections, merging, or subtracting collections from each other.</source>
          <target state="translated">Kotlin コレクションパッケージには、集合に対する一般的な操作である、交差を見つけたり、結合したり、コレクションを互いに引き算したりするための拡張関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="5352e834912895fb7e864dc749c6a67a63a5c1bd" translate="yes" xml:space="preserve">
          <source>The Kotlin collections package provides functions for sorting collections in natural, custom, and even random orders. On this page, we'll describe sorting functions that apply to &lt;a href=&quot;collections-overview#collection-types&quot;&gt;read-only&lt;/a&gt; collections. These functions return their result as a new collection containing the elements of the original collection in the requested order. To learn about functions for sorting &lt;a href=&quot;collections-overview#collection-types&quot;&gt;mutable&lt;/a&gt; collections in place, see the &lt;a href=&quot;list-operations#sorting&quot;&gt;List Specific Operations&lt;/a&gt;.</source>
          <target state="translated">Kotlinコレクションパッケージは、自然、カスタム、さらにはランダムな順序でコレクションを並べ替える関数を提供します。このページでは、&lt;a href=&quot;collections-overview#collection-types&quot;&gt;読み取り専用の&lt;/a&gt;コレクションに適用される並べ替え関数について説明します。これらの関数は、要求された順序で元のコレクションの要素を含む新しいコレクションとして結果を返します。&lt;a href=&quot;collections-overview#collection-types&quot;&gt;変更可能な&lt;/a&gt;コレクションを適切に並べ替える関数については、「&lt;a href=&quot;list-operations#sorting&quot;&gt;リスト固有の操作&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="606ec4093466ccf8ac7dfb28ac45fda128eb6073" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler can now use information from type casts in type inference. If you&amp;rsquo;re calling a generic method that returns a type parameter &lt;code&gt;T&lt;/code&gt; and casting the return value to a specific type &lt;code&gt;Foo&lt;/code&gt;, the compiler now understands that &lt;code&gt;T&lt;/code&gt; for this call needs to be bound to the type &lt;code&gt;Foo&lt;/code&gt;.</source>
          <target state="translated">Kotlinコンパイラーは、型推論で型キャストからの情報を使用できるようになりました。型パラメーター &lt;code&gt;T&lt;/code&gt; を返すジェネリックメソッドを呼び出し、戻り値を特定の型 &lt;code&gt;Foo&lt;/code&gt; にキャストする場合、コンパイラーは、この呼び出しの &lt;code&gt;T&lt;/code&gt; を型 &lt;code&gt;Foo&lt;/code&gt; にバインドする必要があることを理解しました。</target>
        </trans-unit>
        <trans-unit id="3ccc8c3cdb40fba2c36169a3fed32ce41fa13cee" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler does extensive static analysis to provide warnings and reduce boilerplate. One of the most notable features is smartcasts &amp;mdash; with the ability to perform a cast automatically based on the performed type checks:</source>
          <target state="translated">Kotlinコンパイラーは、広範な静的分析を行って警告を出し、定型文を減らします。最も注目すべき機能の1つはスマートキャストです。実行された型チェックに基づいて自動的にキャストを実行する機能があります。</target>
        </trans-unit>
        <trans-unit id="f6f1144b886b2db71119224ec2036f74f6631c9a" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler for JS compiles Kotlin source files into JavaScript code. The command-line tool for Kotlin to JS compilation is &lt;code&gt;kotlinc-js&lt;/code&gt;.</source>
          <target state="translated">JS用のKotlinコンパイラは、KotlinソースファイルをJavaScriptコードにコンパイルします。KotlinからJSへのコンパイル用のコマンドラインツールは &lt;code&gt;kotlinc-js&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6565c92ec29ec823a2bafa138ea555e7d88f3c13" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler for JVM compiles Kotlin source files into Java class files. The command-line tools for Kotlin to JVM compilation are &lt;code&gt;kotlinc&lt;/code&gt; and &lt;code&gt;kotlinc-jvm&lt;/code&gt;. You can also use them for executing Kotlin script files.</source>
          <target state="translated">JVM用のKotlinコンパイラは、KotlinソースファイルをJavaクラスファイルにコンパイルします。KotlinからJVMへのコンパイル用のコマンドラインツールは、 &lt;code&gt;kotlinc&lt;/code&gt; と &lt;code&gt;kotlinc-jvm&lt;/code&gt; です。Kotlinスクリプトファイルの実行にも使用できます。</target>
        </trans-unit>
        <trans-unit id="9b9028d4b3725e4248715dfa8cff6060191e14fa" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler provides all the necessary information about &lt;code&gt;prop&lt;/code&gt; in the arguments: the first argument &lt;code&gt;this&lt;/code&gt; refers to an instance of the outer class &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;this::prop&lt;/code&gt; is a reflection object of the &lt;code&gt;KProperty&lt;/code&gt; type describing &lt;code&gt;prop&lt;/code&gt; itself.</source>
          <target state="translated">Kotlinコンパイラは、約すべての必要な情報を提供 &lt;code&gt;prop&lt;/code&gt; 引数に：最初の引数 &lt;code&gt;this&lt;/code&gt; 外側のクラスのインスタンスを指し &lt;code&gt;C&lt;/code&gt; 及び &lt;code&gt;this::prop&lt;/code&gt; の反射対象である &lt;code&gt;KProperty&lt;/code&gt; の記述タイプ &lt;code&gt;prop&lt;/code&gt; 自体。</target>
        </trans-unit>
        <trans-unit id="d8f9b6bf737be7b0aa49748489bb11aedc0ed8e0" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler tries to comply with the following goals:</source>
          <target state="translated">Kotlinコンパイラは、以下の目標を守ろうとしています。</target>
        </trans-unit>
        <trans-unit id="84694c64245d13b803ebc2f9a85d6bc26cef8561" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler will prefer using underlying types instead of wrappers to produce the most performant and optimized code. However, sometimes it is necessary to keep wrappers around. As a rule of thumb, inline classes are boxed whenever they are used as another type.</source>
          <target state="translated">Kotlin コンパイラは、最もパフォーマンスが高く最適化されたコードを生成するために、ラッパーではなく基本的な型を使用することを好むでしょう。しかし、時にはラッパーを使い続ける必要があることもあります。経験則として、インラインクラスが他の型として使われるときは必ず箱詰めされます。</target>
        </trans-unit>
        <trans-unit id="b1defae0fa9dbdfd545ce26ab8cc2b793d3d11fe" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler will use this restriction to aggressively optimize runtime representation of inline classes and substitute their instances with the value of the underlying property where possible removing constructor calls, GC pressure, and enabling other optimizations:</source>
          <target state="translated">Kotlinコンパイラはこの制限を利用してインラインクラスのランタイム表現を積極的に最適化し、可能であればそのインスタンスを基礎となるプロパティの値で置き換え、コンストラクタの呼び出しやGCの圧力を取り除き、他の最適化を可能にします。</target>
        </trans-unit>
        <trans-unit id="d850079f06081665ec514cb65c4f969e8d679814" translate="yes" xml:space="preserve">
          <source>The Kotlin language and toolset are divided into many components such as the compilers for the JVM, JS and Native targets, the Standard Library, various accompanying tools and so on. Many of these components were officially released as &lt;strong&gt;Stable&lt;/strong&gt; which means that they are evolved in the backward-compatible way following the &lt;a href=&quot;kotlin-evolution&quot;&gt;principles&lt;/a&gt; of &lt;em&gt;Comfortable Updates&lt;/em&gt; and &lt;em&gt;Keeping the Language Modern&lt;/em&gt;. Among such stable components are, for example, the Kotlin compiler for the JVM, the Standard Library, and Coroutines.</source>
          <target state="translated">Kotlinの言語とツールセットは、JVM、JS、ネイティブターゲットのコンパイラ、標準ライブラリ、さまざまな付属ツールなど、多くのコンポーネントに分かれています。これらのコンポーネントの多くは&lt;strong&gt;Stable&lt;/strong&gt;として正式にリリースされまし&lt;strong&gt;た&lt;/strong&gt;。つまり、&lt;em&gt;快適な更新&lt;/em&gt;と&lt;em&gt;言語の最新性の維持の&lt;/em&gt;&lt;a href=&quot;kotlin-evolution&quot;&gt;原則&lt;/a&gt;に従って、下位互換性のある方法で進化しています。このような安定したコンポーネントには、たとえば、JVM用のKotlinコンパイラ、標準ライブラリ、コルーチンなどがあります。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d4746f44c44c946d854825f5266310fd75bb7373" translate="yes" xml:space="preserve">
          <source>The Kotlin multiplatform plugin contains two specific functions for android targets. Two functions help you configure &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;build variants&lt;/a&gt;:</source>
          <target state="translated">Kotlinマルチプラットフォームプラグインには、Androidターゲット用の2つの特定の関数が含まれています。2つの関数は、&lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;ビルドバリアントの&lt;/a&gt;構成に役立ちます。</target>
        </trans-unit>
        <trans-unit id="421148b46361ca016988f110ea6a768864eebc2b" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin also bundles a Java to Kotlin converter (&lt;em&gt;J2K&lt;/em&gt;) that automatically converts Java files to Kotlin. To use J2K on a file, click &lt;strong&gt;Convert Java File to Kotlin File&lt;/strong&gt; in its context menu or in the &lt;strong&gt;Code&lt;/strong&gt; menu of IntelliJ IDEA.</source>
          <target state="translated">Kotlinプラグインには、JavaファイルをKotlinに自動的に変換するJava to Kotlinコンバーター（&lt;em&gt;J2K&lt;/em&gt;）もバンドルされています。ファイルでJ2Kを使用するには、コンテキストメニューまたはIntelliJ IDEAの[ &lt;strong&gt;コード&lt;/strong&gt; ]メニューで[ &lt;strong&gt;JavaファイルをKotlinファイル&lt;/strong&gt;に&lt;strong&gt;変換&lt;/strong&gt; ]をクリックします。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2e3c8e9ac9f87a3c6a3c66f4442bdb2dd4de716" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin for IntelliJ IDEA supports &lt;a href=&quot;https://www.jetbrains.com/help/idea/scratches.html&quot;&gt;&lt;em&gt;scratches&lt;/em&gt;&lt;/a&gt; and &lt;em&gt;worksheets.&lt;/em&gt;</source>
          <target state="translated">IntelliJ IDEA用のKotlinプラグインは、&lt;a href=&quot;https://www.jetbrains.com/help/idea/scratches.html&quot;&gt;&lt;em&gt;スクラッチ&lt;/em&gt;&lt;/a&gt;と&lt;em&gt;ワークシートを&lt;/em&gt;サポートしてい&lt;em&gt;ます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8d656f515ef009525fec5de5fd6f927dce6dbed0" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin supports &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle Build Cache&lt;/a&gt; (Gradle version 4.3 and above is required; caching is disabled with lower versions).</source>
          <target state="translated">Kotlinプラグインは&lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradleビルドキャッシュを&lt;/a&gt;サポートします（Gradleバージョン4.3以降が必要です。それより低いバージョンではキャッシングが無効になります）。</target>
        </trans-unit>
        <trans-unit id="bb12e098841b4fa9ff61972654d2907071becf6c" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin supports &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle Build Cache&lt;/a&gt;.</source>
          <target state="translated">Kotlinプラグインは&lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;GradleBuildCacheを&lt;/a&gt;サポートしています。</target>
        </trans-unit>
        <trans-unit id="b34d5a1ffedf4d7025d37a83472c11c87599aa21" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin&amp;rsquo;s migration tools help you migrate your projects from earlier versions of Kotlin to 1.4.0.</source>
          <target state="translated">Kotlinプラグインの移行ツールは、プロジェクトを以前のバージョンのKotlinから1.4.0に移行するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="4e886321a88f27f1211fc7e6327218f1b649f0a9" translate="yes" xml:space="preserve">
          <source>The Kotlin sources are arranged into &lt;a href=&quot;#configuring-source-sets&quot;&gt;source sets&lt;/a&gt;. In addition to Kotlin source files and resources, each source set may have its own dependencies. Source sets form a hierarchy that is built with the &lt;em&gt;&quot;depends on&quot;&lt;/em&gt; relation. A source set by itself is platform agnostic, but it may contain platform-specific code and dependencies if it's only compiled for a single platform.</source>
          <target state="translated">Kotlinソースは&lt;a href=&quot;#configuring-source-sets&quot;&gt;ソースセットに&lt;/a&gt;配置されます。Kotlinソースファイルとリソースに加えて、各ソースセットには独自の依存関係がある場合があります。ソースセットは、&lt;em&gt;「依存」&lt;/em&gt;関係で構築された階層を形成します。単独で設定されたソースはプラットフォームに依存しませんが、単一のプラットフォーム用にのみコンパイルされている場合は、プラットフォーム固有のコードと依存関係が含まれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="16279f302f8a88f25bf841c70c273ae22857462c" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library &lt;code&gt;kotlin-stdlib&lt;/code&gt; targets Java 6 and above. There are extended versions of the standard library that add support for some of the features of JDK 7 and JDK 8. To use these versions, add one of the following dependencies instead of &lt;code&gt;kotlin-stdlib&lt;/code&gt;:</source>
          <target state="translated">Kotlin標準ライブラリ &lt;code&gt;kotlin-stdlib&lt;/code&gt; は、Java 6以降を対象としています。JDK 7とJDK 8の一部の機能のサポートを追加する標準ライブラリの拡張バージョンがあります。これらのバージョンを使用するには、 &lt;code&gt;kotlin-stdlib&lt;/code&gt; の代わりに次の依存関係のいずれかを追加します。</target>
        </trans-unit>
        <trans-unit id="e19faba3d18413b5a548d796d002602d1f6b7b0d" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library contains extension functions for retrieving parts of a collection. These functions provide a variety of ways to select elements for the result collection: listing their positions explicitly, specifying the result size, and others.</source>
          <target state="translated">Kotlin標準ライブラリには、コレクションの一部を取得するための拡張関数が含まれています。これらの関数は、結果コレクションの要素を選択するための様々な方法を提供しています:位置を明示的にリストアップしたり、結果のサイズを指定したり、その他。</target>
        </trans-unit>
        <trans-unit id="aee8a9e1bcfd6364e58b2c53a697014bcd222ec2" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library contains several functions whose sole purpose is to execute a block of code within the context of an object. When you call such a function on an object with a &lt;a href=&quot;lambdas&quot;&gt;lambda expression&lt;/a&gt; provided, it forms a temporary scope. In this scope, you can access the object without its name. Such functions are called &lt;em&gt;scope functions&lt;/em&gt;. There are five of them: &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, and &lt;code&gt;also&lt;/code&gt;.</source>
          <target state="translated">Kotlin標準ライブラリには、オブジェクトのコンテキスト内でコードのブロックを実行することを唯一の目的とするいくつかの関数が含まれています。&lt;a href=&quot;lambdas&quot;&gt;ラムダ式が指定&lt;/a&gt;されたオブジェクトでこのような関数を呼び出すと、一時的なスコープが形成されます。このスコープでは、名前なしでオブジェクトにアクセスできます。このような関数は、&lt;em&gt;スコープ関数&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。それらの5つがあります &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;run&lt;/code&gt; 、 &lt;code&gt;with&lt;/code&gt; 、 &lt;code&gt;apply&lt;/code&gt; 、および &lt;code&gt;also&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41ab82952f2d2fb6d715a1d54dee47f369b23a5d" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library is available on &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and we can simply include it in our &lt;code&gt;package.json&lt;/code&gt; as a dependency.</source>
          <target state="translated">Kotlin標準ライブラリは&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;で使用でき、 &lt;code&gt;package.json&lt;/code&gt; に依存関係として単に含めることができます。</target>
        </trans-unit>
        <trans-unit id="aa008c18e28c0e852d10e5f6a39e59c2d9ab879a" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library is now fully compatible with the Java 9 module system, which forbids split packages (multiple jar files declaring classes in the same package). In order to support that, new artifacts &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; and &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt; are introduced, which replace the old &lt;code&gt;kotlin-stdlib-jre7&lt;/code&gt; and &lt;code&gt;kotlin-stdlib-jre8&lt;/code&gt;.</source>
          <target state="translated">Kotlin標準ライブラリは、Java 9モジュールシステムと完全に互換性があるようになりました。これにより、パッケージの分割（同じパッケージでクラスを宣言する複数のjarファイル）が禁止されます。これをサポートするために、 &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; アーティファクトkotlin-stdlib-jdk7および &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt; が導入されました。これらは、古い &lt;code&gt;kotlin-stdlib-jre7&lt;/code&gt; および &lt;code&gt;kotlin-stdlib-jre8&lt;/code&gt; に置き換わるものです。</target>
        </trans-unit>
        <trans-unit id="870dd777a08235fb630e1002ab11ba8d4d93e900" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library offers a broad variety of functions for performing operations on collections. This includes simple operations, such as getting or adding elements, as well as more complex ones including search, sorting, filtering, transformations, and so on.</source>
          <target state="translated">Kotlin標準ライブラリには、コレクションに対する操作を行うための様々な関数が用意されています。これには、要素の取得や追加などの単純な操作から、検索、ソート、フィルタリング、変換などのより複雑な操作までが含まれます。</target>
        </trans-unit>
        <trans-unit id="c6f95e4bf784ef0f9127ccc1a33b6b0fef24a280" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides a mechanism for requiring and giving explicit consent for using certain elements of APIs. This mechanism lets library developers inform users of their APIs about specific conditions that require opt-in, for example, if an API is in the experimental state and is likely to change in the future.</source>
          <target state="translated">Kotlin標準ライブラリは、APIの特定の要素を利用する際に明示的な同意を要求したり、与えたりするための仕組みを提供しています。このメカニズムを利用することで、ライブラリ開発者は、例えば、APIが実験段階にあり、将来的に変更される可能性がある場合など、オプトインを必要とする特定の条件をAPIの利用者に通知することができます。</target>
        </trans-unit>
        <trans-unit id="7504a2da20208970eadd23d20d879fda0292513a" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides a series of wrappers around the JavaScript API for interacting with documents. The main component we'd usually access is the variable &lt;code&gt;document&lt;/code&gt;. Given we have access to this, we can simply read and write to the corresponding properties. For instance, to set the background of the page we can do</source>
          <target state="translated">Kotlin標準ライブラリは、ドキュメントと対話するためのJavaScript APIの一連のラッパーを提供します。通常アクセスする主なコンポーネントは可変 &lt;code&gt;document&lt;/code&gt; です。これにアクセスできれば、対応するプロパティの読み取りと書き込みを行うだけです。たとえば、ページの背景を設定するには、</target>
        </trans-unit>
        <trans-unit id="d4672fe3591cd8e490f322d7264f5d7b48dbb930" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides a set of extension functions for collection &lt;em&gt;transformations&lt;/em&gt;. These functions build new collections from existing ones based on the transformation rules provided. In this page, we'll give an overview of the available collection transformation functions.</source>
          <target state="translated">Kotlin標準ライブラリは、コレクション&lt;em&gt;変換の&lt;/em&gt;ための一連の拡張関数を提供します。これらの関数は、提供された変換ルールに基づいて、既存のコレクションから新しいコレクションを構築します。このページでは、利用可能なコレクション変換関数の概要を説明します。</target>
        </trans-unit>
        <trans-unit id="0d403b1b6b6cec3fc85d2c8444ad4595fd15211b" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides developers with a mechanism for creating and using &lt;em&gt;experimental&lt;/em&gt; APIs. This mechanism lets library authors inform users that certain components of their API, such as classes or functions, are unstable and are likely to change in the future. Such changes may require rewriting and recompiling the client code. To prevent potential compatibility issues, the compiler warns users of the experimental status of such APIs and may require them to give their explicit consent to use the API.</source>
          <target state="translated">Kotlin標準ライブラリは、&lt;em&gt;実験的な&lt;/em&gt; API を作成および使用するためのメカニズムを開発者に提供します。このメカニズムにより、ライブラリの作成者は、クラスや関数など、APIの特定のコンポーネントが不安定であり、将来変更される可能性があることをユーザーに通知できます。このような変更には、クライアントコードの書き換えと再コンパイルが必要な場合があります。潜在的な互換性の問題を防ぐために、コンパイラーはそのようなAPIの試験的なステータスをユーザーに警告し、APIを使用することについて明示的な同意をユーザーに要求する場合があります。</target>
        </trans-unit>
        <trans-unit id="25b12f54730219e6bd01543d34c7f6d86941696e" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides extension functions for grouping collection elements. The basic function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/group-by&quot;&gt;&lt;code&gt;groupBy()&lt;/code&gt;&lt;/a&gt; takes a lambda function and returns a &lt;code&gt;Map&lt;/code&gt;. In this map, each key is the lambda result and the corresponding value is the &lt;code&gt;List&lt;/code&gt; of elements on which this result is returned. This function can be used, for example, to group a list of &lt;code&gt;String&lt;/code&gt;s by their first letter.</source>
          <target state="translated">Kotlin標準ライブラリは、コレクション要素をグループ化するための拡張関数を提供します。基本的な関数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/group-by&quot;&gt; &lt;code&gt;groupBy()&lt;/code&gt; &lt;/a&gt;はラムダ関数を取り、 &lt;code&gt;Map&lt;/code&gt; を返します。このマップでは、各キーはラムダ結果であり、対応する値はこの結果が返される要素の &lt;code&gt;List&lt;/code&gt; です。この関数は、たとえば &lt;code&gt;String&lt;/code&gt; のリストを最初の文字でグループ化するために使用できます。</target>
        </trans-unit>
        <trans-unit id="d49763e3623bb841ba6b661af00bff69df48a815" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides factory methods for several useful kinds of delegates.</source>
          <target state="translated">Kotlin標準ライブラリは、いくつかの有用なデリゲートのファクトリメソッドを提供しています。</target>
        </trans-unit>
        <trans-unit id="d4752902cbbab973b31545d271408bf4e6b55c29" translate="yes" xml:space="preserve">
          <source>The Kotlin team offers a set of tools for Android development that goes beyond the standard language features:</source>
          <target state="translated">Kotlinチームは、標準的な言語機能を超えたAndroid開発のためのツールセットを提供しています。</target>
        </trans-unit>
        <trans-unit id="3835dcf5cfa983896474e2202e8aad1e87118beb" translate="yes" xml:space="preserve">
          <source>The Kotlin visibilities are mapped to Java in the following way:</source>
          <target state="translated">Kotlinの可視性は、以下のようにJavaにマッピングされています。</target>
        </trans-unit>
        <trans-unit id="ed293f7536e6525a4d07d9691dc5108b394e4a3c" translate="yes" xml:space="preserve">
          <source>The Kotlin visibility modifiers map to Java in the following way:</source>
          <target state="translated">Kotlin の可視性修飾子は、以下のように Java にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="faf7b14d1149068ab693cf1111e636b037d94b9d" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin allows us to run tests through a variety of test runners that can be specified via the Gradle configuration. In order to make test annotations and functionality available for the JavaScript target, let's add the correct platform artifact for &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt;&lt;/a&gt; in our &lt;code&gt;build.gradle.kts&lt;/code&gt;:</source>
          <target state="translated">Kotlin / JS Gradleプラグインを使用すると、Gradle構成で指定できるさまざまなテストランナーを介してテストを実行できます。JavaScriptターゲットでテストアノテーションと機能を利用できるようにするために、 &lt;code&gt;build.gradle.kts&lt;/code&gt; に&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; の&lt;/a&gt;正しいプラットフォームアーティファクトを追加しましょう。</target>
        </trans-unit>
        <trans-unit id="304763e06ef2ec917369271eeef52f0b832e41b7" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin also provides support for webpack's &lt;a href=&quot;https://webpack.js.org/loaders/css-loader/&quot;&gt;CSS&lt;/a&gt; and &lt;a href=&quot;https://webpack.js.org/loaders/style-loader/&quot;&gt;style&lt;/a&gt; loaders. While all options can be changed by directly modifying the &lt;a href=&quot;#configuring-webpack-bundling&quot;&gt;webpack configuration files&lt;/a&gt; that are used to build your project, the most commonly used settings are available directly from the &lt;code&gt;build.gradle(.kts)&lt;/code&gt; file.</source>
          <target state="translated">Kotlin / JS Gradleプラグインは、webpackの&lt;a href=&quot;https://webpack.js.org/loaders/css-loader/&quot;&gt;CSS&lt;/a&gt;および&lt;a href=&quot;https://webpack.js.org/loaders/style-loader/&quot;&gt;スタイル&lt;/a&gt;ローダーのサポートも提供します。プロジェクトのビルドに使用される&lt;a href=&quot;#configuring-webpack-bundling&quot;&gt;webpack構成ファイル&lt;/a&gt;を直接変更することですべてのオプションを変更できますが、最も一般的に使用される設定は &lt;code&gt;build.gradle(.kts)&lt;/code&gt; ファイルから直接利用できます。</target>
        </trans-unit>
        <trans-unit id="62014bfef74b6ee8391b097fe12cd8b778b7ef02" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin also supports dependency declarations for particular source sets in the &lt;code&gt;kotlin&lt;/code&gt; section of the build script.</source>
          <target state="translated">Kotlin / JS Gradleプラグインは、ビルドスクリプトの &lt;code&gt;kotlin&lt;/code&gt; セクションで特定のソースセットの依存関係宣言もサポートします。</target>
        </trans-unit>
        <trans-unit id="5668a0d5f0441481437bde850441d3299be017d6" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin automatically generates a Karma configuration file at build time which includes your settings from the &lt;a href=&quot;#configuring-test-task&quot;&gt;&lt;code&gt;kotlin.js.browser.testTask.useKarma&lt;/code&gt; block&lt;/a&gt; in your &lt;code&gt;build.gradle(.kts)&lt;/code&gt;. You can find the file at &lt;code&gt;build/js/packages/projectName-test/karma.conf.js&lt;/code&gt;. To make adjustments to the configuration used by Karma, place your additional configuration files inside a directory called &lt;code&gt;karma.config.d&lt;/code&gt; in the root of your project. All &lt;code&gt;.js&lt;/code&gt; configuration files in this directory will be picked up and are automatically merged into the generated &lt;code&gt;karma.conf.js&lt;/code&gt; at build time.</source>
          <target state="translated">Kotlin / JS Gradleプラグインは、ビルド時に、 &lt;code&gt;build.gradle(.kts)&lt;/code&gt; の&lt;a href=&quot;#configuring-test-task&quot;&gt; &lt;code&gt;kotlin.js.browser.testTask.useKarma&lt;/code&gt; ブロック&lt;/a&gt;からの設定を含むKarma構成ファイルを自動的に生成します。このファイルは &lt;code&gt;build/js/packages/projectName-test/karma.conf.js&lt;/code&gt; ます。 Karmaが使用する構成を調整するには、プロジェクトのルートにある &lt;code&gt;karma.config.d&lt;/code&gt; というディレクトリ内に追加の構成ファイルを配置します。このディレクトリ内のすべての &lt;code&gt;.js&lt;/code&gt; 構成ファイルが取得され、ビルド時に生成された &lt;code&gt;karma.conf.js&lt;/code&gt; に自動的にマージされます。</target>
        </trans-unit>
        <trans-unit id="b957eb65bb0cdee2cba530f32fe6ce613bbf8935" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin automatically generates a standard webpack configuration file at build time which you can find the at &lt;code&gt;build/js/packages/projectName/webpack.config.js&lt;/code&gt;.</source>
          <target state="translated">Kotlin / JS Gradleプラグインは、ビルド時に標準のwebpack構成ファイルを自動的に生成します。このファイルは &lt;code&gt;build/js/packages/projectName/webpack.config.js&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="8f0e2d824767a90a80e919658aeb5cfe950e8eb7" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin automatically sets up a test infrastructure for projects. For browser projects, it downloads and installs the &lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt; test runner with other required dependencies; for Node.js projects, the &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; test framework is used.</source>
          <target state="translated">Kotlin / JS Gradleプラグインは、プロジェクトのテストインフラストラクチャを自動的にセットアップします。ブラウザプロジェクトの場合、&lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt;テストランナーを他の必要な依存関係とともにダウンロードしてインストールします。Node.jsプロジェクトの場合、&lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;テストフレームワークが使用されます。</target>
        </trans-unit>
        <trans-unit id="f818f7eac72c440d892f7b7bd134c99b2cf031b4" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin handles DCE automatically when you build a &lt;strong&gt;production bundle&lt;/strong&gt;, for example by using the &lt;code&gt;browserProductionWebpack&lt;/code&gt; task. &lt;strong&gt;Development bundling&lt;/strong&gt; tasks (like &lt;code&gt;browserDevelopmentWebpack&lt;/code&gt;) don't include DCE.</source>
          <target state="translated">Kotlin / JS Gradleプラグインは、たとえば &lt;code&gt;browserProductionWebpack&lt;/code&gt; タスクを使用して、&lt;strong&gt;プロダクションバンドル&lt;/strong&gt;をビルドするときに、DCEを自動的に処理します。&lt;strong&gt;開発バンドル&lt;/strong&gt;タスク（ &lt;code&gt;browserDevelopmentWebpack&lt;/code&gt; など）にはDCEは含まれていません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9e48978274145dccf82bae99c2dc2a30b0c91f68" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin includes a &lt;a href=&quot;https://wikipedia.org/wiki/Dead_code_elimination&quot;&gt;&lt;em&gt;dead code elimination&lt;/em&gt;&lt;/a&gt; (&lt;em&gt;DCE&lt;/em&gt;) tool. Dead code elimination is often also called &lt;em&gt;tree shaking&lt;/em&gt;. It reduces the size or the resulting JavaScript code by removing unused properties, functions, and classes.</source>
          <target state="translated">Kotlin / JS Gradleプラグインには、&lt;a href=&quot;https://wikipedia.org/wiki/Dead_code_elimination&quot;&gt;&lt;em&gt;デッドコード除去&lt;/em&gt;&lt;/a&gt;（&lt;em&gt;DCE&lt;/em&gt;）ツールが含まれています。デッドコードの除去は、&lt;em&gt;ツリーシェイク&lt;/em&gt;とも呼ばれ&lt;em&gt;ます&lt;/em&gt;。未使用のプロパティ、関数、およびクラスを削除することにより、サイズまたは結果のJavaScriptコードを削減します。</target>
        </trans-unit>
        <trans-unit id="1e4e6f626348a11780378865bb1882ff761b2f81" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin lets you declare npm dependencies in the Gradle build script, analogous to how you would declare any other dependencies.</source>
          <target state="translated">Kotlin/JS Gradle プラグインを使うと、Gradle のビルドスクリプトで npm の依存関係を宣言することができます。</target>
        </trans-unit>
        <trans-unit id="508d01630451556b268bd8387a2eb4afdba86b73" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin lets you manage aspects of your project in the &lt;code&gt;kotlin&lt;/code&gt; section of the build script.</source>
          <target state="translated">Kotlin / JS Gradleプラグインを使用すると、ビルドスクリプトの &lt;code&gt;kotlin&lt;/code&gt; セクションでプロジェクトの側面を管理できます。</target>
        </trans-unit>
        <trans-unit id="920d568a492c6da10f65d95dc53b1b5f7eeec1d4" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin provides an integration with Dukat. When enabled, type-safe Kotlin external declarations are automatically generated for npm dependencies that provide TypeScript definitions. You have two different ways of selecting if and when Dukat should generate declarations: at build time, and manually via a Gradle task.</source>
          <target state="translated">Kotlin/JS Gradle プラグインは Dukat との統合を提供します。このプラグインを有効にすると、TypeScript定義を提供するnpm依存関係では、タイプセーフなKotlin外部宣言が自動的に生成されます。Dukatが宣言を生成するかどうかは、ビルド時に選択する方法と、Gradleタスクを使って手動で選択する方法があります。</target>
        </trans-unit>
        <trans-unit id="2298bfb804f83ca6b163e47c1953371bd8caee55" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS IR compiler backend is the main focus of innovation around Kotlin/JS, and paves the way forward for the technology.</source>
          <target state="translated">Kotlin/JSのIRコンパイラバックエンドは、Kotlin/JSを中心としたイノベーションの中心であり、技術の前進の道を切り開いています。</target>
        </trans-unit>
        <trans-unit id="1cec2fbea4632d742da31ed6da87c6196fa5c821" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS IR compiler is capable of generating TypeScript definitions from your Kotlin code. These definitions can be used by JavaScript tools and IDEs when working on hybrid apps to provide autocompletion, support static analyzers, and make it easier to include Kotlin code in JavaScript and TypeScript projects. Top-level declarations marked with &lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt;&lt;code&gt;@JsExport&lt;/code&gt;&lt;/a&gt; in a project that produces executable files (&lt;code&gt;binaries.executable()&lt;/code&gt;) will get a &lt;code&gt;.d.ts&lt;/code&gt; file generated, which contains the TypeScript definitions for the exported Kotlin declarations. In Kotlin 1.4, these declarations can be found in &lt;code&gt;build/js/packages/&amp;lt;package_name&amp;gt;/kotlin&lt;/code&gt; alongside the corresponding, un-webpacked JavaScript code.</source>
          <target state="translated">Kotlin / JS IRコンパイラは、KotlinコードからTypeScript定義を生成できます。これらの定義は、ハイブリッドアプリで作業するときに、JavaScriptツールとIDEで使用して、オートコンプリートを提供し、静的アナライザーをサポートし、JavaScriptおよびTypeScriptプロジェクトにKotlinコードを簡単に含めることができます。実行可能ファイル（ &lt;code&gt;binaries.executable()&lt;/code&gt; ）を生成するプロジェクトで&lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt; &lt;code&gt;@JsExport&lt;/code&gt; &lt;/a&gt;でマークされたトップレベルの宣言は、エクスポートされたKotlin宣言のTypeScript定義を含む &lt;code&gt;.d.ts&lt;/code&gt; ファイルを生成します。 Kotlin 1.4では、これらの宣言は、対応するWebパックされていないJavaScriptコードと一緒に &lt;code&gt;build/js/packages/&amp;lt;package_name&amp;gt;/kotlin&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="20de849afa381da2738f09b8692ae208333cafb4" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS plugin automatically configures its tasks for working with the selected environment. This includes downloading and installing the required environment and dependencies for running and testing the application. This allows developers to build, run and test simple projects without additional configuration.</source>
          <target state="translated">Kotlin/JS プラグインは、選択した環境で動作するためのタスクを自動的に設定します。これには、アプリケーションの実行とテストに必要な環境と依存関係のダウンロードとインストールが含まれます。これにより、開発者は追加の設定をすることなく、シンプルなプロジェクトを構築、実行、テストすることができます。</target>
        </trans-unit>
        <trans-unit id="04a4825cc5cdc3fbcb7e1b3e4f6683662ea06196" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS plugin provides a &lt;code&gt;run&lt;/code&gt; task that lets you run pure Kotlin/JS projects without additional configuration.</source>
          <target state="translated">Kotlin / JSプラグインは、追加の構成なしで純粋なKotlin / JSプロジェクトを実行できる &lt;code&gt;run&lt;/code&gt; タスクを提供します。</target>
        </trans-unit>
        <trans-unit id="0c77da593f6fd563bf3d0e80c805c85eaf245285" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS standard library allows us to access browser-specific functionality using the &lt;code&gt;kotlinx.browser&lt;/code&gt; package, which includes typical top-level objects such as &lt;code&gt;document&lt;/code&gt; and &lt;code&gt;window&lt;/code&gt;. The standard library provides typesafe wrappers for the functionality exposed by these objects wherever possible. As a fallback, the &lt;code&gt;dynamic&lt;/code&gt; type is used to provide interaction with functions that do not map well into the Kotlin type system.</source>
          <target state="translated">Kotlin / JS標準ライブラリを使用すると、 &lt;code&gt;kotlinx.browser&lt;/code&gt; パッケージを使用してブラウザ固有の機能にアクセスできます。このパッケージには、 &lt;code&gt;document&lt;/code&gt; や &lt;code&gt;window&lt;/code&gt; などの一般的なトップレベルオブジェクトが含まれています。標準ライブラリは、可能な限り、これらのオブジェクトによって公開される機能のタイプセーフラッパーを提供します。フォールバックとして、 &lt;code&gt;dynamic&lt;/code&gt; 型は、Kotlin型システムにうまくマッピングされない関数との相互作用を提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a6a4cdbdda50f56547bba9ba19fc399a6de3ee54" translate="yes" xml:space="preserve">
          <source>The Kotlin/Native compiler is available for macOS, Linux, and Windows. It is available as a command line tool and ships as part of the standard Kotlin distribution and can be downloaded from &lt;a href=&quot;https://github.com/JetBrains/kotlin/releases/tag/v1.4.10&quot;&gt;GitHub Releases&lt;/a&gt;. It supports different targets including iOS (arm32, arm64, simulator x86_64), Windows (mingw32 and x86_64), Linux (x86_64, arm64, MIPS), macOS (x86_64), Raspberry PI, STM32, WASM. For the full list of targets please see the &lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin/Native overview&lt;/a&gt;.</source>
          <target state="translated">Kotlin / Nativeコンパイラは、macOS、Linux、およびWindowsで使用できます。これはコマンドラインツールとして利用でき、標準のKotlinディストリビューションの一部として出荷され、&lt;a href=&quot;https://github.com/JetBrains/kotlin/releases/tag/v1.4.10&quot;&gt;GitHubリリース&lt;/a&gt;からダウンロードできます。iOS（arm32、arm64、シミュレーターx86_64）、Windows（mingw32およびx86_64）、Linux（x86_64、arm64、MIPS）、macOS（x86_64）、Raspberry PI、STM32、WASMなどのさまざまなターゲットをサポートします。ターゲットの完全なリストについては、&lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin / Nativeの概要&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6d899757cb2398280c10acb19695bbcab979ce63" translate="yes" xml:space="preserve">
          <source>The Kotlin/Native compiler is available for macOS, Linux, and Windows. It supports different targets including iOS (arm32, arm64, simulator x86_64), Windows (mingw32 and x86_64), Linux (x86_64, arm64, MIPS), macOS (x86_64), Raspberry PI, SMT32, WASM. For the full list of targets we can refer to the &lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin/Native overview&lt;/a&gt;. While cross-platform compilation is possible (i.e., using one platform to compile for another), in this first tutorial we are only compiling for the operating system we're running on.</source>
          <target state="translated">Kotlin / Nativeコンパイラーは、macOS、Linux、およびWindowsで使用できます。iOS（arm32、arm64、シミュレータx86_64）、Windows（mingw32およびx86_64）、Linux（x86_64、arm64、MIPS）、macOS（x86_64）、Raspberry PI、SMT32、WASMなどのさまざまなターゲットをサポートしています。ターゲットの完全なリストについては、&lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin /ネイティブの概要を&lt;/a&gt;参照できます。クロスプラットフォームコンパイルは可能です（つまり、あるプラットフォームを使用して別のプラットフォームをコンパイルする）が、この最初のチュートリアルでは、実行中のオペレーティングシステム用にのみコンパイルします。</target>
        </trans-unit>
        <trans-unit id="81130cfc1e83adbcab9e6da86955c53516b100d6" translate="yes" xml:space="preserve">
          <source>The Language Committee makes final decisions on what incompatible changes will be made and what exact measures should be taken to make user updates comfortable. In doing so, it relies on a set of guidelines available &lt;a href=&quot;https://kotlinlang.org/foundation/language-committee-guidelines.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">言語委員会は、互換性のない変更を行うか、ユーザーの更新を快適にするためにどのような正確な措置をとるべきかについて最終決定を下します。その際、&lt;a href=&quot;https://kotlinlang.org/foundation/language-committee-guidelines.html&quot;&gt;ここで&lt;/a&gt;利用可能な一連のガイドラインに依存します。</target>
        </trans-unit>
        <trans-unit id="ef80e6d685a55893a99e950f4ed7fce2a86a1387" translate="yes" xml:space="preserve">
          <source>The Maven coordinates can be altered and additional artifact files may be added to the publications within the &lt;code&gt;targets { ... }&lt;/code&gt; block or the &lt;code&gt;publishing { ... }&lt;/code&gt; DSL:</source>
          <target state="translated">Maven座標は変更可能であり、 &lt;code&gt;targets { ... }&lt;/code&gt; ブロックまたは &lt;code&gt;publishing { ... }&lt;/code&gt; DSL 内のパブリケーションに追加のアーティファクトファイルを追加できます。</target>
        </trans-unit>
        <trans-unit id="88e2042b128835939040b35b47b76d2e41113fdc" translate="yes" xml:space="preserve">
          <source>The Node.js target provided by Kotlin/JS enables you to create applications that &lt;strong&gt;run on a server&lt;/strong&gt; or get &lt;strong&gt;executed on serverless infrastructure&lt;/strong&gt;. You benefit from the same advantages as other applications executing in a JavaScript runtime, such as &lt;strong&gt;faster startup speed&lt;/strong&gt; and a &lt;strong&gt;reduced memory footprint&lt;/strong&gt;. With &lt;a href=&quot;https://github.com/Kotlin/kotlinx-nodejs&quot;&gt;&lt;code&gt;kotlinx-nodejs&lt;/code&gt;&lt;/a&gt;, you have typesafe access to the &lt;a href=&quot;https://nodejs.org/docs/latest/api/&quot;&gt;Node.js API&lt;/a&gt; directly from your Kotlin code.</source>
          <target state="translated">Kotlin / JSが提供するNode.jsターゲットを使用&lt;strong&gt;すると、サーバー上&lt;/strong&gt;で&lt;strong&gt;実行したり、サーバー&lt;/strong&gt;&lt;strong&gt;レスインフラストラクチャで実行し&lt;/strong&gt;たりするアプリケーションを作成できます。&lt;strong&gt;起動速度の高速化&lt;/strong&gt;や&lt;strong&gt;メモリフットプリントの削減&lt;/strong&gt;など、JavaScriptランタイムで実行される他のアプリケーションと同じ利点があります。&lt;a href=&quot;https://github.com/Kotlin/kotlinx-nodejs&quot;&gt; &lt;code&gt;kotlinx-nodejs&lt;/code&gt; &lt;/a&gt;、あなたはへのタイプセーフアクセスしてい&lt;a href=&quot;https://nodejs.org/docs/latest/api/&quot;&gt;Node.jsのAPI&lt;/a&gt;あなたKotlinコードから直接に。</target>
        </trans-unit>
        <trans-unit id="cc27fb0be25fb775df8eea4ef2ba6465502161d0" translate="yes" xml:space="preserve">
          <source>The Nothing type</source>
          <target state="translated">何もないタイプ</target>
        </trans-unit>
        <trans-unit id="8cc0334fa925283a3687c8c8309944d9801a3bf7" translate="yes" xml:space="preserve">
          <source>The REPL command line interface opens. You can enter any valid Kotlin code and see the result. Results are printed as variables with auto-generated names like &lt;code&gt;res*&lt;/code&gt;. You can later use such variables in the code you run in REPL.</source>
          <target state="translated">REPLコマンドラインインターフェイスが開きます。有効なKotlinコードを入力して、結果を確認できます。結果は &lt;code&gt;res*&lt;/code&gt; ような自動生成された名前を持つ変数として出力されます。後で、REPLで実行するコードでそのような変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="8fd3a2d7df046fd886264d64f792856593ec9b52" translate="yes" xml:space="preserve">
          <source>The REPL command line interface will open. You can enter any valid Kotlin code and see the result. The results are printed as variables with auto-generated names like &lt;code&gt;res*&lt;/code&gt;. You can later use such variables in the code you run in REPL.</source>
          <target state="translated">REPLコマンドラインインターフェイスが開きます。有効なKotlinコードを入力して、結果を確認できます。結果は、 &lt;code&gt;res*&lt;/code&gt; ような自動生成された名前の変数として出力されます。後で、REPLで実行するコードでそのような変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="2b7ee6e00ac4369b5da7230befe3c113bdc4222a" translate="yes" xml:space="preserve">
          <source>The above code compiles. However, it will produce a runtime error if the object is not properly initialised before use or if &lt;code&gt;callAnything()&lt;/code&gt; is not defined at runtime.</source>
          <target state="translated">上記のコードはコンパイルされます。ただし、オブジェクトが使用前に適切に初期化されていない場合、または &lt;code&gt;callAnything()&lt;/code&gt; が実行時に定義されていない場合は、実行時エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="f67cd69d25bde43de96336b3847aa293b8518b9e" translate="yes" xml:space="preserve">
          <source>The above code indicates that the function is defined externally. The &lt;code&gt;@JsName(&quot;$&quot;)&lt;/code&gt; annotation allows us to map the name at runtime to &lt;code&gt;$&lt;/code&gt;. For more details on external declarations, please refer to the &lt;a href=&quot;../../reference/js-interop#external-modifier&quot;&gt;JavaScript interop documentation&lt;/a&gt;.</source>
          <target state="translated">上記のコードは、関数が外部で定義されていることを示しています。 &lt;code&gt;@JsName(&quot;$&quot;)&lt;/code&gt; 注釈は、私たちは実行時に名前をマッピングすることができます &lt;code&gt;$&lt;/code&gt; 。外部宣言の詳細については、&lt;a href=&quot;../../reference/js-interop#external-modifier&quot;&gt;JavaScriptの相互運用ドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="5749a0f0fe8aac855f406af86fe841d365cd7cde" translate="yes" xml:space="preserve">
          <source>The above could also be a oneliner - and note that the compiler knows that because the &lt;code&gt;throw&lt;/code&gt; will prevent &lt;code&gt;y&lt;/code&gt; from coming into existence if &lt;code&gt;x&lt;/code&gt; is null, &lt;code&gt;y&lt;/code&gt; must be non-null if we reach the line below. Contrast this with &lt;code&gt;x?.importantFunction()&lt;/code&gt;, which is a no-op if &lt;code&gt;x&lt;/code&gt; is null.</source>
          <target state="translated">上記はonelinerである可能性もあります。また、コンパイラーは、 &lt;code&gt;x&lt;/code&gt; がnullの場合、 &lt;code&gt;throw&lt;/code&gt; によって &lt;code&gt;y&lt;/code&gt; が存在しないようにするため、以下の行に到達した場合、 &lt;code&gt;y&lt;/code&gt; はnull 以外でなければならないことを知っています。これを &lt;code&gt;x?.importantFunction()&lt;/code&gt; と比較してください。これは、 &lt;code&gt;x&lt;/code&gt; がnullの場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="a87217033eafba44229106ab25d3816102c24f78" translate="yes" xml:space="preserve">
          <source>The above is preferable to:</source>
          <target state="translated">以上であることが好ましい。</target>
        </trans-unit>
        <trans-unit id="83d32caa4c432fbb23e6f884577d8ac97faf56a2" translate="yes" xml:space="preserve">
          <source>The affected type parameter or type is &lt;em&gt;contravariant&lt;/em&gt;. Denoted by the &lt;code&gt;in&lt;/code&gt; modifier in the source code.</source>
          <target state="translated">影響を受ける型パラメーターまたは型は&lt;em&gt;反変&lt;/em&gt;です。ソースコードの &lt;code&gt;in&lt;/code&gt; 修飾子で示されます。</target>
        </trans-unit>
        <trans-unit id="c340d256f4b2e039e4cb98547a639c6b4f11b7ba" translate="yes" xml:space="preserve">
          <source>The affected type parameter or type is &lt;em&gt;covariant&lt;/em&gt;. Denoted by the &lt;code&gt;out&lt;/code&gt; modifier in the source code.</source>
          <target state="translated">影響を受ける型パラメーターまたは型は&lt;em&gt;共変&lt;/em&gt;です。ソースコードの &lt;code&gt;out&lt;/code&gt; 修飾子で示されます。</target>
        </trans-unit>
        <trans-unit id="dff58c2fdf74d3cdbb35c54ab0e0155e83797493" translate="yes" xml:space="preserve">
          <source>The affected type parameter or type is &lt;em&gt;invariant&lt;/em&gt;, which means it has no variance applied to it.</source>
          <target state="translated">影響を受ける型パラメーターまたは型は&lt;em&gt;不変&lt;/em&gt;です。つまり、分散が適用されていません。</target>
        </trans-unit>
        <trans-unit id="e638916d7acda84432e87e4a36d2e48c0c286bc5" translate="yes" xml:space="preserve">
          <source>The annotation also works for constructors, static methods, and so on. It can't be used on abstract methods, including methods defined in interfaces.</source>
          <target state="translated">このアノテーションは、コンストラクタや静的メソッドなどでも動作します。インターフェースで定義されているメソッドなど、抽象的なメソッドには使用できません。</target>
        </trans-unit>
        <trans-unit id="d402ed87eb5a9bdd2e6bcdd0889af9af5444c36e" translate="yes" xml:space="preserve">
          <source>The annotation being applied to one of overloads allows to resolve this ambiguity by analyzing what value is returned from the lambda function.</source>
          <target state="translated">オーバーロードの1つに適用されているアノテーションは、ラムダ関数からどのような値が返されるかを分析することで、この曖昧さを解決することができます。</target>
        </trans-unit>
        <trans-unit id="718f26b180ad67d2a1e20d6b7d4406049d2961a3" translate="yes" xml:space="preserve">
          <source>The annotation can be used on top-level external declarations (classes, properties, functions) and files. In case of file (which can't be &lt;code&gt;external&lt;/code&gt;) the following rule applies: all the declarations in the file must be &lt;code&gt;external&lt;/code&gt;. By applying &lt;code&gt;@JsModule(...)&lt;/code&gt; on a file you tell the compiler to import a JavaScript object that contain all the declarations from the file.</source>
          <target state="translated">アノテーションは、トップレベルの外部宣言（クラス、プロパティ、関数）およびファイルで使用できます。ファイル（ &lt;code&gt;external&lt;/code&gt; することはできません）の場合、次の規則が適用されます。ファイル内のすべての宣言は &lt;code&gt;external&lt;/code&gt; なければなりません。 &lt;code&gt;@JsModule(...)&lt;/code&gt; をファイルに適用することにより、ファイルからのすべての宣言を含むJavaScriptオブジェクトをインポートするようコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="ac7d8e089591134bac44995dadba571525f38003" translate="yes" xml:space="preserve">
          <source>The annotation has effect only in Kotlin/Native platform.</source>
          <target state="translated">アノテーションはKotlin/Nativeプラットフォームでのみ有効です。</target>
        </trans-unit>
        <trans-unit id="993a0bc9861bdf8ea351a5eb1dd7c588f24a97de" translate="yes" xml:space="preserve">
          <source>The annotations for marking and using experimental APIs (&lt;code&gt;@Experimental&lt;/code&gt; and &lt;code&gt;@UseExperimental&lt;/code&gt;) are &lt;em&gt;experimental&lt;/em&gt; in Kotlin 1.3. See details &lt;a href=&quot;#experimental-status-of-experimental-api-markers&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">実験的なAPI（ &lt;code&gt;@Experimental&lt;/code&gt; および &lt;code&gt;@UseExperimental&lt;/code&gt; ）をマークおよび使用するためのアノテーションは、Kotlin 1.3では&lt;em&gt;実験的なもの&lt;/em&gt;です。詳細は&lt;a href=&quot;#experimental-status-of-experimental-api-markers&quot;&gt;以下を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ecb7079c4ed4f36ab04fb8b963913758bd291799" translate="yes" xml:space="preserve">
          <source>The anonymous function syntax allows you to specify the receiver type of a function literal directly. This can be useful if you need to declare a variable of a function type with receiver, and to use it later.</source>
          <target state="translated">匿名関数構文では、関数リテラルのレシーバ型を直接指定することができます。これは、関数型の変数をレシーバで宣言して、後でそれを使用する必要がある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="e99a96b83211ab5edf0514b0e8d206e232457fc5" translate="yes" xml:space="preserve">
          <source>The application we're going to create will simply show &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; on Android and &lt;code&gt;Kotlin Rocks on iOS &amp;lt;version&amp;gt;&lt;/code&gt; on iOS. The idea is to share the code that generates this message.</source>
          <target state="translated">これから作成するアプリケーションでは &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; ではAndroidに &lt;code&gt;Kotlin Rocks on iOS &amp;lt;version&amp;gt;&lt;/code&gt; にKotlin Rocksを表示します。アイデアは、このメッセージを生成するコードを共有することです。</target>
        </trans-unit>
        <trans-unit id="6689bd2ccf2821c30727df021f990e93b549d058" translate="yes" xml:space="preserve">
          <source>The application will print &quot;Hello Kotlin/Native&quot; on the standard output. In a working directory of choice, create a file named &lt;code&gt;hello.kt&lt;/code&gt; and enter the following contents:</source>
          <target state="translated">アプリケーションは、標準出力に「HelloKotlin / Native」を出力します。選択した作業ディレクトリに、 &lt;code&gt;hello.kt&lt;/code&gt; という名前のファイルを作成し、次の内容を入力します。</target>
        </trans-unit>
        <trans-unit id="c116b8d3b85f1f036748497d93f617762a69f1eb" translate="yes" xml:space="preserve">
          <source>The array literal syntax is constrained to annotation arguments.</source>
          <target state="translated">配列リテラル構文は、アノテーション引数に制約されます。</target>
        </trans-unit>
        <trans-unit id="e6585b22e37432101f079b3e68122b140a6c8d0b" translate="yes" xml:space="preserve">
          <source>The arrow notation is right-associative, &lt;code&gt;(Int) -&amp;gt; (Int) -&amp;gt; Unit&lt;/code&gt; is equivalent to the previous example, but not to &lt;code&gt;((Int) -&amp;gt; (Int)) -&amp;gt; Unit&lt;/code&gt;.</source>
          <target state="translated">矢印表記は右結合です。 &lt;code&gt;(Int) -&amp;gt; (Int) -&amp;gt; Unit&lt;/code&gt; は前の例と同じですが、 &lt;code&gt;((Int) -&amp;gt; (Int)) -&amp;gt; Unit&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="eff75fbb6c3dbfe907753b9474216f02d469cd66" translate="yes" xml:space="preserve">
          <source>The author strongly recommends that you use an IDE with Kotlin support, as the static typing allows an IDE to do reliable navigation and code completion. I recommend &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;, which is built by the same company that created Kotlin. The Community Edition is free; see &lt;a href=&quot;../getting-started&quot;&gt;instructions for getting started&lt;/a&gt; (it comes bundled with Kotlin, and you can run your program from the IDE).</source>
          <target state="translated">静的型付けによりIDEは信頼性の高いナビゲーションとコード補完を実行できるため、作成者はKotlinをサポートするIDEを使用することを強くお勧めします。Kotlinを作成したのと同じ会社が開発した&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;をお勧めします。Community Editionは無料です。&lt;a href=&quot;../getting-started&quot;&gt;開始の手順を&lt;/a&gt;参照してください（Kotlinにバンドルされており、IDEからプログラムを実行できます）。</target>
        </trans-unit>
        <trans-unit id="b22a383945309e76147365f532a907cec46e842a" translate="yes" xml:space="preserve">
          <source>The automatically added standard library will be the same version of the Kotlin Gradle plugin, since they have the same versioning.</source>
          <target state="translated">自動的に追加される標準ライブラリは、Kotlin Gradle プラグインのバージョンが同じなので、同じバージョンになります。</target>
        </trans-unit>
        <trans-unit id="031b37e00f6cc7d0005e366d6305ce9ae5158eb7" translate="yes" xml:space="preserve">
          <source>The available options for persistence include direct JDBC access, JPA, as well as using NoSQL databases through their Java drivers. For JPA, the &lt;a href=&quot;compiler-plugins#jpa-support&quot;&gt;kotlin-jpa compiler plugin&lt;/a&gt; adapts Kotlin-compiled classes to the requirements of the framework.</source>
          <target state="translated">永続化に使用できるオプションには、直接JDBCアクセス、JPA、およびJavaドライバーを介したNoSQLデータベースの使用が含まれます。JPAの場合、&lt;a href=&quot;compiler-plugins#jpa-support&quot;&gt;kotlin-jpaコンパイラプラグイン&lt;/a&gt;は、Kotlinでコンパイルされたクラスをフレームワークの要件に適合させます。</target>
        </trans-unit>
        <trans-unit id="f64d03b5ac4e40dff196fed46f6ad483b559e0ca" translate="yes" xml:space="preserve">
          <source>The base class for all errors and exceptions. Only instances of this class can be thrown or caught.</source>
          <target state="translated">すべてのエラーと例外の基底クラス。このクラスのインスタンスのみがスローされたりキャッチされたりします。</target>
        </trans-unit>
        <trans-unit id="9567e5bd74f98cde043ce2604d36c00a7448fbca" translate="yes" xml:space="preserve">
          <source>The base exception class is &lt;code&gt;Throwable&lt;/code&gt; (but it is more common to extend its subclass &lt;code&gt;Exception&lt;/code&gt;), and there are a ton of built-in exception classes. If you don't find one that match your needs, you can create your own by inheriting from an existing exception class.</source>
          <target state="translated">基本例外クラスは &lt;code&gt;Throwable&lt;/code&gt; ですが（そのサブクラス &lt;code&gt;Exception&lt;/code&gt; を拡張する方が一般的です）、大量の組み込み例外クラスがあります。ニーズに一致するものが見つからない場合は、既存の例外クラスから継承することにより、独自のクラスを作成できます。</target>
        </trans-unit>
        <trans-unit id="d9ecc0f2cf4982d26aff3dd399995b9e266ca38f" translate="yes" xml:space="preserve">
          <source>The basic association function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/associate-with&quot;&gt;&lt;code&gt;associateWith()&lt;/code&gt;&lt;/a&gt; creates a &lt;code&gt;Map&lt;/code&gt; in which the elements of the original collection are keys, and values are produced from them by the given transformation function. If two elements are equal, only the last one remains in the map.</source>
          <target state="translated">基本的な関連付け関数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/associate-with&quot;&gt; &lt;code&gt;associateWith()&lt;/code&gt; &lt;/a&gt;は、元のコレクションの要素がキーである &lt;code&gt;Map&lt;/code&gt; を作成し、指定された変換関数によってそれらから値が生成されます。2つの要素が等しい場合、最後の要素のみがマップに残ります。</target>
        </trans-unit>
        <trans-unit id="8747487378c0fd48a48984cf8a26dd2308ffac09" translate="yes" xml:space="preserve">
          <source>The basic filtering function is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;. When called with a predicate, &lt;code&gt;filter()&lt;/code&gt; returns the collection elements that match it. For both &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt;, the resulting collection is a &lt;code&gt;List&lt;/code&gt;, for &lt;code&gt;Map&lt;/code&gt; it's a &lt;code&gt;Map&lt;/code&gt; as well.</source>
          <target state="translated">基本的なフィルタリング関数は&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;です。述語で呼び出されると、 &lt;code&gt;filter()&lt;/code&gt; はそれに一致するコレクション要素を返します。 &lt;code&gt;List&lt;/code&gt; と &lt;code&gt;Set&lt;/code&gt; の両方で、結果のコレクションは &lt;code&gt;List&lt;/code&gt; です &lt;code&gt;Map&lt;/code&gt; 場合も同様に &lt;code&gt;Map&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="699437afba4c1eb6f2aa1a305318c9d9571a4fe8" translate="yes" xml:space="preserve">
          <source>The basic functions &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted-descending&quot;&gt;&lt;code&gt;sortedDescending()&lt;/code&gt;&lt;/a&gt; return elements of a collection sorted into ascending and descending sequence according to their natural order. These functions apply to collections of &lt;code&gt;Comparable&lt;/code&gt; elements.</source>
          <target state="translated">基本的な関数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted&quot;&gt; &lt;code&gt;sorted()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted-descending&quot;&gt; &lt;code&gt;sortedDescending()&lt;/code&gt; &lt;/a&gt;は、自然な順序に従って昇順と降順にソートされたコレクションの要素を返します。これらの関数は、 &lt;code&gt;Comparable&lt;/code&gt; 要素のコレクションに適用されます。</target>
        </trans-unit>
        <trans-unit id="70e38425dddb8d588d69bf3481934278ea9001d3" translate="yes" xml:space="preserve">
          <source>The basic operators have familiar names like &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;map&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html&quot;&gt;filter&lt;/a&gt;. The important difference to sequences is that blocks of code inside these operators can call suspending functions.</source>
          <target state="translated">基本的な演算子には、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;map&lt;/a&gt;や&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html&quot;&gt;filter&lt;/a&gt;などのよく知られた名前があります。シーケンスとの重要な違いは、これらの演算子内のコードのブロックがサスペンド関数を呼び出すことができることです。</target>
        </trans-unit>
        <trans-unit id="176655605bee6eae4892bd4ec703e94408b0c3f3" translate="yes" xml:space="preserve">
          <source>The best place to start is &lt;a href=&quot;https://kotlinlang.org&quot;&gt;this website&lt;/a&gt;. From there you can download the compiler, &lt;a href=&quot;https://play.kotlinlang.org&quot;&gt;try it online&lt;/a&gt; as well as get access to resources, &lt;a href=&quot;index&quot;&gt;reference documentation&lt;/a&gt; and &lt;a href=&quot;../tutorials/index&quot;&gt;tutorials&lt;/a&gt;.</source>
          <target state="translated">開始するのに最適な場所は、&lt;a href=&quot;https://kotlinlang.org&quot;&gt;このWebサイト&lt;/a&gt;です。そこからコンパイラをダウンロードし、&lt;a href=&quot;https://play.kotlinlang.org&quot;&gt;オンライン&lt;/a&gt;で試すことができます。また、リソース、&lt;a href=&quot;index&quot;&gt;リファレンスドキュメント&lt;/a&gt;、&lt;a href=&quot;../tutorials/index&quot;&gt;チュートリアルに&lt;/a&gt;アクセスできます。</target>
        </trans-unit>
        <trans-unit id="a00b10508469a6652d6e476b8749625b68deb8ad" translate="yes" xml:space="preserve">
          <source>The best way to see what C data types are visible in Kotlin is to try it</source>
          <target state="translated">KotlinでどのようなC言語のデータ型が表示されているかを確認するための最良の方法は、次のようにしてみることです。</target>
        </trans-unit>
        <trans-unit id="8cccc62dffea928c706df5dfd73f9995b0b8212a" translate="yes" xml:space="preserve">
          <source>The best way to understand the mapping between C and Kotlin languages is to try it out on a small example. We will create a small library headers for that. First, we need to create a &lt;code&gt;lib.h&lt;/code&gt; file with the following declaration of functions that deal with the C strings:</source>
          <target state="translated">C言語とKotlin言語の間のマッピングを理解する最良の方法は、小さな例で試してみることです。そのための小さなライブラリヘッダーを作成します。まず、C文字列を処理する次の関数宣言を含む &lt;code&gt;lib.h&lt;/code&gt; ファイルを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="ffd6c6681f86404c6d10fd90b4e30255a8c338ed" translate="yes" xml:space="preserve">
          <source>The best way to understand the mapping between Kotlin and C is to try a tiny example. We declare a function that accepts a function pointer as a parameter and another function that returns a function pointer.</source>
          <target state="translated">KotlinとC言語の間のマッピングを理解する最良の方法は、小さな例を試してみることです。関数ポインタをパラメータとして受け取る関数と、関数ポインタを返す別の関数を宣言します。</target>
        </trans-unit>
        <trans-unit id="6537550691113ba29bcd420ea4633f14458a70b1" translate="yes" xml:space="preserve">
          <source>The best way to understand the mapping between Kotlin and C is to try a tiny example. We will declare a struct and a union in the C language, to see how they are mapped into Kotlin.</source>
          <target state="translated">Kotlin と C の間のマッピングを理解する最良の方法は、小さな例を試してみることです。構造体と組合をC言語で宣言して、それらがKotlinにどのようにマッピングされているかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="4232ac266b4561b99b9bc10fa2be9171a24a3226" translate="yes" xml:space="preserve">
          <source>The best way to understand these techniques is to try them out. Let's create a first tiny Kotlin library and use it from a C program.</source>
          <target state="translated">これらのテクニックを理解するには、実際に試してみるのが一番です。最初の小さなKotlinライブラリを作って、Cプログラムから使ってみましょう。</target>
        </trans-unit>
        <trans-unit id="eaa47ef7640a883ac2445b67958ca2668d316a2e" translate="yes" xml:space="preserve">
          <source>The best way to use the Kotlin/Native compiler is with a build system. It helps by downloading and caching the Kotlin/Native compiler binaries and libraries with transitive dependencies, and running the compiler and tests. It caches the compilation results too. A build system can also be used by an IDE to understand the project layout.</source>
          <target state="translated">Kotlin/Native コンパイラを使うための最良の方法はビルドシステムを使うことです。Kotlin/Native コンパイラのバイナリとライブラリをダウンロードしてキャッシュし、コンパイラとテストを実行することで助けてくれます。また、コンパイル結果もキャッシュされます。ビルドシステムはプロジェクトのレイアウトを理解するために IDE で使用することもできます。</target>
        </trans-unit>
        <trans-unit id="9af9e08ad353ac6ed57e0041c23dca829fbff7c4" translate="yes" xml:space="preserve">
          <source>The binaries DSL allows not only creating binaries but also accessing already created ones to configure them or get their properties (e.g. path to an output file). The &lt;code&gt;binaries&lt;/code&gt; collection implements the &lt;a href=&quot;https://docs.gradle.org/current/javadoc/org/gradle/api/DomainObjectSet.html&quot;&gt;&lt;code&gt;DomainObjectSet&lt;/code&gt;&lt;/a&gt; interface and provides methods like &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;matching&lt;/code&gt; allowing configuring groups of elements.</source>
          <target state="translated">バイナリDSLを使用すると、バイナリを作成できるだけでなく、すでに作成されたバイナリにアクセスしてそれらを構成したり、プロパティ（出力ファイルへのパスなど）を取得したりすることもできます。 &lt;code&gt;binaries&lt;/code&gt; コレクションを実装&lt;a href=&quot;https://docs.gradle.org/current/javadoc/org/gradle/api/DomainObjectSet.html&quot;&gt; &lt;code&gt;DomainObjectSet&lt;/code&gt; の&lt;/a&gt;インタフェースを等方法を提供 &lt;code&gt;all&lt;/code&gt; 又は &lt;code&gt;matching&lt;/code&gt; 要素のグループを設定可能にします。</target>
        </trans-unit>
        <trans-unit id="bc8bcc38381183bfcc94707aa9b37df0e52f23b1" translate="yes" xml:space="preserve">
          <source>The binary files are created in the &lt;code&gt;build/bin/native/debugExecutable&lt;/code&gt; or &lt;code&gt;build/bin/native/releaseExecutable&lt;/code&gt; folders respectively. The file has a &lt;code&gt;.kexe&lt;/code&gt; extension on Linux and macOS and an &lt;code&gt;.exe&lt;/code&gt; extension on Windows. Use the following command to instruct the build to produce binaries:</source>
          <target state="translated">バイナリファイルは、それぞれ &lt;code&gt;build/bin/native/debugExecutable&lt;/code&gt; または &lt;code&gt;build/bin/native/releaseExecutable&lt;/code&gt; フォルダーに作成されます。このファイルには、LinuxおよびmacOSでは &lt;code&gt;.kexe&lt;/code&gt; 拡張子、Windowsでは &lt;code&gt;.exe&lt;/code&gt; 拡張子が付いています。次のコマンドを使用して、バイナリに生成するようビルドに指示します。</target>
        </trans-unit>
        <trans-unit id="54650137fcf92a797ec9822a89e0e51a3d74473c" translate="yes" xml:space="preserve">
          <source>The block after &lt;code&gt;tree(&quot;root&quot;)&lt;/code&gt; is the first function literal with receiver, which will be passed to &lt;code&gt;tree()&lt;/code&gt; as the &lt;code&gt;initialize&lt;/code&gt; parameter. According to the parameter list of &lt;code&gt;tree()&lt;/code&gt;, the receiver is of type &lt;code&gt;TreeNode&lt;/code&gt;, and therefore, &lt;code&gt;tree()&lt;/code&gt; can call &lt;code&gt;initialize()&lt;/code&gt; on &lt;code&gt;root&lt;/code&gt;. &lt;code&gt;root&lt;/code&gt; then becomes &lt;code&gt;this&lt;/code&gt; inside the scope of that lambda expression, so when we call &lt;code&gt;node(&quot;math&quot;)&lt;/code&gt;, it implicitly says &lt;code&gt;this.node(&quot;math&quot;)&lt;/code&gt;, where &lt;code&gt;this&lt;/code&gt; refers to the same &lt;code&gt;TreeNode&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt;. The next block is passed to &lt;code&gt;TreeNode.node()&lt;/code&gt;, and is invoked on the first child of the &lt;code&gt;root&lt;/code&gt; node, namely &lt;code&gt;math&lt;/code&gt;, and inside it, &lt;code&gt;this&lt;/code&gt; will refer to &lt;code&gt;math&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tree(&quot;root&quot;)&lt;/code&gt; の後のブロックは、レシーバーを備えた最初の関数リテラルであり、 &lt;code&gt;initialize&lt;/code&gt; パラメーターとして &lt;code&gt;tree()&lt;/code&gt; に渡されます。 &lt;code&gt;tree()&lt;/code&gt; のパラメーターリストによると、レシーバーは &lt;code&gt;TreeNode&lt;/code&gt; タイプであるため、 &lt;code&gt;tree()&lt;/code&gt; は &lt;code&gt;root&lt;/code&gt; で &lt;code&gt;initialize()&lt;/code&gt; を呼び出すことができます。 &lt;code&gt;root&lt;/code&gt; はそのラムダ式のスコープ内で &lt;code&gt;this&lt;/code&gt; になるため、 &lt;code&gt;node(&quot;math&quot;)&lt;/code&gt; を呼び出すと、暗黙的に &lt;code&gt;this.node(&quot;math&quot;)&lt;/code&gt; と表示されます。 &lt;code&gt;this&lt;/code&gt; は &lt;code&gt;root&lt;/code&gt; と同じ &lt;code&gt;TreeNode&lt;/code&gt; を参照します。次のブロックは &lt;code&gt;TreeNode.node()&lt;/code&gt; に渡され、 &lt;code&gt;root&lt;/code&gt; ノードの最初の子、つまり &lt;code&gt;math&lt;/code&gt; で呼び出されます。その内部では、 &lt;code&gt;this&lt;/code&gt; は &lt;code&gt;math&lt;/code&gt; を参照します。</target>
        </trans-unit>
        <trans-unit id="299004dba6c7ef441e08541633a7bed7d65922cd" translate="yes" xml:space="preserve">
          <source>The body can be a block.</source>
          <target state="translated">体がブロックになることもあります。</target>
        </trans-unit>
        <trans-unit id="d17dad4981064bd9e13820de989411c6afec8c62" translate="yes" xml:space="preserve">
          <source>The body of an object expression may access, and possibly modify, the local variables of the containing scope.</source>
          <target state="translated">オブジェクト式の本体は、スコープを含むスコープのローカル変数にアクセスしたり、変更したりすることがあります。</target>
        </trans-unit>
        <trans-unit id="6eb082a62156761cbe45120602d0be4ff5a5d1b2" translate="yes" xml:space="preserve">
          <source>The box classes used for capturing mutable closure variables in lambdas no longer have volatile fields. This change improves performance, but can lead to new race conditions in some rare usage scenarios. If you're affected by this, you need to provide your own synchronization for accessing the variables.</source>
          <target state="translated">ラムダでの変異可能なクロージャ変数のキャプチャに使用されるボックスクラスは、揮発性のフィールドを持たなくなりました。この変更によりパフォーマンスは向上しますが、一部のまれな使用シナリオでは新たな競合状態になる可能性があります。この影響を受ける場合は、変数にアクセスするための独自の同期を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="0bb1979f4fa500a54eb079957dc97f38da2dd0fd" translate="yes" xml:space="preserve">
          <source>The build generates the following files under the &lt;code&gt;build/bin/native/debugShared&lt;/code&gt; folder, depending on the host OS:</source>
          <target state="translated">ビルドは、ホストOSに応じて、 &lt;code&gt;build/bin/native/debugShared&lt;/code&gt; フォルダーの下に次のファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="8d7f1cfca83f4be43b98d7bc6f3dc13e77358eda" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;C().foo(1)&lt;/code&gt; will print &quot;extension&quot;.</source>
          <target state="translated">&lt;code&gt;C().foo(1)&lt;/code&gt; を呼び出すと、「拡張子」が出力されます。</target>
        </trans-unit>
        <trans-unit id="5986952e4227de9affa4abe69a35c446c0bfc14d" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;execute&lt;/code&gt; uses a function passed as its second parameter to produce an object subgraph (i.e. set of mutually referring objects) which is then passed as a whole to that worker, it is then no longer available to the thread that initiated the request. This property is checked if the first parameter is &lt;code&gt;TransferMode.SAFE&lt;/code&gt; by graph traversal and is just assumed to be true, if it is &lt;code&gt;TransferMode.UNSAFE&lt;/code&gt;. The last parameter to &lt;code&gt;execute&lt;/code&gt; is a special Kotlin lambda, which is not allowed to capture any state, and is actually invoked in the target worker's context. Once processed, the result is transferred to whatever consumes it in the future, and it is attached to the object graph of that worker/thread.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; の呼び出しは、2番目のパラメーターとして渡された関数を使用してオブジェクトサブグラフ（つまり、相互参照オブジェクトのセット）を生成し、全体としてそのワーカーに渡されると、要求を開始したスレッドで使用できなくなります。このプロパティは、最初のパラメーターがグラフトラバーサルによって &lt;code&gt;TransferMode.SAFE&lt;/code&gt; である場合にチェックされ、それが &lt;code&gt;TransferMode.UNSAFE&lt;/code&gt; である場合にのみtrueであると見なされます。 &lt;code&gt;execute&lt;/code&gt; 最後のパラメーターは特別なKotlinラムダであり、状態をキャプチャすることはできず、実際にはターゲットワーカーのコンテキストで呼び出されます。処理されると、結果は将来それを消費するものに転送され、そのワーカー/スレッドのオブジェクトグラフにアタッチされます。</target>
        </trans-unit>
        <trans-unit id="cf4d64ccc981a36348dc5e3486734b7a527c1cd6" translate="yes" xml:space="preserve">
          <source>The callback which is called after the change of the property is made. The value of the property has already been changed when this callback is invoked.</source>
          <target state="translated">プロパティの変更が行われた後に呼び出されるコールバックです。このコールバックが呼び出されたとき、プロパティの値はすでに変更されています。</target>
        </trans-unit>
        <trans-unit id="f46a88a879fdbb85f0bd5182483f8be3f20e50d2" translate="yes" xml:space="preserve">
          <source>The callback which is called before a change to the property value is attempted. The value of the property hasn't been changed yet, when this callback is invoked. If the callback returns &lt;code&gt;true&lt;/code&gt; the value of the property is being set to the new value, and if the callback returns &lt;code&gt;false&lt;/code&gt; the new value is discarded and the property remains its old value.</source>
          <target state="translated">プロパティ値の変更が試行される前に呼び出されるコールバック。このコールバックが呼び出されたとき、プロパティの値はまだ変更されていません。コールバックが &lt;code&gt;true&lt;/code&gt; を返す場合、プロパティの値は新しい値に設定され、コールバックが &lt;code&gt;false&lt;/code&gt; を返す場合、新しい値は破棄され、プロパティは古い値のままになります。</target>
        </trans-unit>
        <trans-unit id="e3032cd7941afef1fb6a2120a573d1232d288d72" translate="yes" xml:space="preserve">
          <source>The calls that affect inference are either members of the receiver type of an annotated function parameter or extensions for that type. The extensions must be themselves annotated with &lt;code&gt;@BuilderInference&lt;/code&gt;.</source>
          <target state="translated">推論に影響を与える呼び出しは、注釈付き関数パラメーターのレシーバータイプのメンバーか、そのタイプの拡張です。拡張自体は &lt;code&gt;@BuilderInference&lt;/code&gt; で注釈を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="30fa4bb2f1f32f71119d427e541174a3d60dd7ed" translate="yes" xml:space="preserve">
          <source>The capacity is the maximum length this string builder can have before an allocation occurs.</source>
          <target state="translated">容量は、この文字列ビルダがアロケーションが発生する前に持つことができる最大の長さです。</target>
        </trans-unit>
        <trans-unit id="5833c1f716afd68e76f6ee63506f61a1ac4d8150" translate="yes" xml:space="preserve">
          <source>The changes in dependencies are &lt;a href=&quot;https://en.wikipedia.org/wiki/Application_binary_interface&quot;&gt;ABI&lt;/a&gt; compatible. For example, the only changes are in method bodies.</source>
          <target state="translated">依存関係の変更は&lt;a href=&quot;https://en.wikipedia.org/wiki/Application_binary_interface&quot;&gt;ABI&lt;/a&gt;互換です。たとえば、唯一の変更はメソッド本体です。</target>
        </trans-unit>
        <trans-unit id="ca6d3d47c03bc25dbb852207c0d849513ed5fbaf" translate="yes" xml:space="preserve">
          <source>The channels shown so far had no buffer. Unbuffered channels transfer elements when sender and receiver meet each other (aka rendezvous). If send is invoked first, then it is suspended until receive is invoked, if receive is invoked first, it is suspended until send is invoked.</source>
          <target state="translated">これまで表示されていたチャンネルにはバッファがありませんでした。バッファなしのチャンネルは、送信者と受信者が出会ったときに要素を転送します (ランデブーとも呼ばれます)。send が先に起動された場合は、receive が起動されるまで中断され、receive が先に起動された場合は、send が起動されるまで中断されます。</target>
        </trans-unit>
        <trans-unit id="fa768c5c4432c77d50de790cda1c8c687dccf1cc" translate="yes" xml:space="preserve">
          <source>The character &quot; &amp;ndash; quotation mark</source>
          <target state="translated">文字 &quot;&amp;ndash;引用符</target>
        </trans-unit>
        <trans-unit id="10c860623b3bfd4256ce034a4fa10ecca2e8d17c" translate="yes" xml:space="preserve">
          <source>The character $ &amp;ndash; dollar sign</source>
          <target state="translated">文字$ &amp;ndash;ドル記号</target>
        </trans-unit>
        <trans-unit id="bb0b9f77aa3a2b1b235948227a9bb6e95724f73c" translate="yes" xml:space="preserve">
          <source>The character &amp;Dagger;</source>
          <target state="translated">キャラクター &amp;Dagger;</target>
        </trans-unit>
        <trans-unit id="97d065e0957f914068e24066c8bc53313cb9196a" translate="yes" xml:space="preserve">
          <source>The character &amp;Prime;</source>
          <target state="translated">キャラクター &quot;</target>
        </trans-unit>
        <trans-unit id="697b0963155a10d5f080f157c0e1d9c9aacc9b21" translate="yes" xml:space="preserve">
          <source>The character &amp;amp; &amp;ndash; ampersand</source>
          <target state="translated">文字＆&amp;ndash;アンパサンド</target>
        </trans-unit>
        <trans-unit id="094872d2798a25e27adaff380803676c236be373" translate="yes" xml:space="preserve">
          <source>The character &amp;asymp;</source>
          <target state="translated">キャラクター&amp;asymp;</target>
        </trans-unit>
        <trans-unit id="41d60c0526caa8463741bd966759bf19026cb739" translate="yes" xml:space="preserve">
          <source>The character &amp;bdquo;</source>
          <target state="translated">キャラクター &quot;</target>
        </trans-unit>
        <trans-unit id="fff1f1e9d607e97e90b4bc028bb0cc7f10c48e01" translate="yes" xml:space="preserve">
          <source>The character &amp;bull;</source>
          <target state="translated">キャラクター &amp;bull;</target>
        </trans-unit>
        <trans-unit id="143c3fcec665ebddc83c2753db67d88e2fbaf38a" translate="yes" xml:space="preserve">
          <source>The character &amp;cent;</source>
          <target state="translated">キャラクター&amp;cent;</target>
        </trans-unit>
        <trans-unit id="ee171eaf967121aa215c85e62d2ec509ebb04257" translate="yes" xml:space="preserve">
          <source>The character &amp;copy;</source>
          <target state="translated">キャラクター&amp;copy;</target>
        </trans-unit>
        <trans-unit id="314c38bf0716b200771c1a885fab69a9b65b99c6" translate="yes" xml:space="preserve">
          <source>The character &amp;dagger;</source>
          <target state="translated">キャラクター &amp;dagger;</target>
        </trans-unit>
        <trans-unit id="6f9bd3084db43833f63880cca5d946309a97ca39" translate="yes" xml:space="preserve">
          <source>The character &amp;deg;</source>
          <target state="translated">文字&amp;deg;</target>
        </trans-unit>
        <trans-unit id="0e423b28ce34d3cf18fda3a07cf0dfa515d8890e" translate="yes" xml:space="preserve">
          <source>The character &amp;euro;</source>
          <target state="translated">キャラクター&amp;euro;</target>
        </trans-unit>
        <trans-unit id="b1449855c21d4fd06c0d5e74b5a2a7a14edf968a" translate="yes" xml:space="preserve">
          <source>The character &amp;frac12;</source>
          <target state="translated">キャラクター&amp;frac12;</target>
        </trans-unit>
        <trans-unit id="1fa4a09afc8d4c4f53c306db471f300c4497957c" translate="yes" xml:space="preserve">
          <source>The character &amp;ge;</source>
          <target state="translated">文字&amp;ge;</target>
        </trans-unit>
        <trans-unit id="3dfbeeaef1c98d8a22709ebef333428072939a42" translate="yes" xml:space="preserve">
          <source>The character &amp;gt; &amp;ndash; greater-than sign</source>
          <target state="translated">文字&amp;gt; &amp;ndash;大なり記号</target>
        </trans-unit>
        <trans-unit id="6eb5e1e14a002081da7d716b380be22cde00b939" translate="yes" xml:space="preserve">
          <source>The character &amp;hellip;</source>
          <target state="translated">キャラクター &amp;hellip;</target>
        </trans-unit>
        <trans-unit id="a01873a887462b6593c2f5f42a550b38052e578a" translate="yes" xml:space="preserve">
          <source>The character &amp;laquo;</source>
          <target state="translated">キャラクター &quot;</target>
        </trans-unit>
        <trans-unit id="e667dca130564a78a41110f6cbd1264a713d8dd2" translate="yes" xml:space="preserve">
          <source>The character &amp;ldquo;</source>
          <target state="translated">キャラクター &quot;</target>
        </trans-unit>
        <trans-unit id="950de0de2afce4fa96ad4f62ca4dab286d3d82a8" translate="yes" xml:space="preserve">
          <source>The character &amp;le;</source>
          <target state="translated">文字&amp;le;</target>
        </trans-unit>
        <trans-unit id="9023ce61724bbabe84554211f1682a5b7d26a59b" translate="yes" xml:space="preserve">
          <source>The character &amp;lsquo;</source>
          <target state="translated">キャラクター '</target>
        </trans-unit>
        <trans-unit id="e9f2776cd83195ab61d81c705eb53d1d3649fd0e" translate="yes" xml:space="preserve">
          <source>The character &amp;lt; &amp;ndash; less-than sign</source>
          <target state="translated">文字&amp;lt;&amp;ndash;小なり記号</target>
        </trans-unit>
        <trans-unit id="7e613a75a280526a06a5c3a8cccd7722979dfc79" translate="yes" xml:space="preserve">
          <source>The character &amp;mdash;</source>
          <target state="translated">キャラクター -</target>
        </trans-unit>
        <trans-unit id="257dd2718c3d554488c288a2e9f88456100a73ef" translate="yes" xml:space="preserve">
          <source>The character &amp;middot;</source>
          <target state="translated">キャラクター ・</target>
        </trans-unit>
        <trans-unit id="b00154ce5f2758f6abb5e4356e419ba3e2aed105" translate="yes" xml:space="preserve">
          <source>The character &amp;ndash;</source>
          <target state="translated">キャラクター -</target>
        </trans-unit>
        <trans-unit id="aad571a2b53620d99840a4d55bce3f5907371d75" translate="yes" xml:space="preserve">
          <source>The character &amp;ne;</source>
          <target state="translated">キャラクター&amp;ne;</target>
        </trans-unit>
        <trans-unit id="a360453c2e244288bd242eeb7641ad601e593f75" translate="yes" xml:space="preserve">
          <source>The character &amp;para;</source>
          <target state="translated">キャラクター &amp;para;</target>
        </trans-unit>
        <trans-unit id="1c97c4311adda721fa170a84ab8496cb5535afa3" translate="yes" xml:space="preserve">
          <source>The character &amp;plusmn;</source>
          <target state="translated">文字&amp;plusmn;</target>
        </trans-unit>
        <trans-unit id="55144636deb97ada56b2d29a7bb655a9f22ea932" translate="yes" xml:space="preserve">
          <source>The character &amp;pound;</source>
          <target state="translated">キャラクター&amp;pound;</target>
        </trans-unit>
        <trans-unit id="09c581b6f45120a7ecac89f6de96696cea52b01c" translate="yes" xml:space="preserve">
          <source>The character &amp;prime;</source>
          <target state="translated">キャラクター '</target>
        </trans-unit>
        <trans-unit id="c49eacef46814486b9678b461b5fad7053d65453" translate="yes" xml:space="preserve">
          <source>The character &amp;raquo;</source>
          <target state="translated">キャラクター &quot;</target>
        </trans-unit>
        <trans-unit id="b94a5614ad8379d659840f63e74a095d51d6a7c0" translate="yes" xml:space="preserve">
          <source>The character &amp;rdquo;</source>
          <target state="translated">キャラクター &quot;</target>
        </trans-unit>
        <trans-unit id="be87e8e3080722678155d4e087ea1bf466788605" translate="yes" xml:space="preserve">
          <source>The character &amp;reg;</source>
          <target state="translated">キャラクター&amp;reg;</target>
        </trans-unit>
        <trans-unit id="e6daa833ce04c765a61d1650a1e4e3d75924ca44" translate="yes" xml:space="preserve">
          <source>The character &amp;rsquo;</source>
          <target state="translated">キャラクター '</target>
        </trans-unit>
        <trans-unit id="43ad6d82b90d71d375e73e1b9402ca5934e45166" translate="yes" xml:space="preserve">
          <source>The character &amp;sbquo;</source>
          <target state="translated">キャラクター 、</target>
        </trans-unit>
        <trans-unit id="4139cb770ca9a15c26a42368989f1dc39e1910da" translate="yes" xml:space="preserve">
          <source>The character &amp;sect;</source>
          <target state="translated">キャラクター &amp;sect;</target>
        </trans-unit>
        <trans-unit id="98e7fc24f032b2c1437d0f55811d67ee1de7b88e" translate="yes" xml:space="preserve">
          <source>The character &amp;times;</source>
          <target state="translated">キャラクター&amp;times;</target>
        </trans-unit>
        <trans-unit id="f6467d07a9719c1073ddb29614f3d2a5ac72dfb3" translate="yes" xml:space="preserve">
          <source>The character &amp;trade;</source>
          <target state="translated">キャラクター&amp;trade;</target>
        </trans-unit>
        <trans-unit id="113ea2720e8bacc629e001c13c4a2b8a86d11787" translate="yes" xml:space="preserve">
          <source>The choice between the &lt;code&gt;IR&lt;/code&gt; and &lt;code&gt;LEGACY&lt;/code&gt; compilers was not yet available in Kotlin 1.3.xx. Because of this, you may encounter a Gradle error &lt;code&gt;Cannot choose between the following variants...&lt;/code&gt; if one of your dependencies (or any transitive dependency) was built using Kotlin 1.4+ but your project uses Kotlin 1.3.xx. A workaround is provided &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-40226&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Kotlin 1.3.xxでは、 &lt;code&gt;IR&lt;/code&gt; コンパイラと &lt;code&gt;LEGACY&lt;/code&gt; コンパイラのどちらを選択するかはまだ利用できませんでした。このため、Gradleエラーが発生する可能性があります。依存関係の1つ（または推移的な依存関係）がKotlin 1.4+を使用して構築されているが、プロジェクトがKotlin 1.3.xxを使用している場合 &lt;code&gt;Cannot choose between the following variants...&lt;/code&gt; 回避策は&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-40226&quot;&gt;ここにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1789ee1227acc918fbc63737b2058bf75be81287" translate="yes" xml:space="preserve">
          <source>The class can also declare &lt;strong&gt;secondary constructors&lt;/strong&gt;, which are prefixed with &lt;em&gt;constructor&lt;/em&gt;:</source>
          <target state="translated">このクラスは、&lt;em&gt;コンストラクタ&lt;/em&gt;が前に付けられた&lt;strong&gt;2次コンストラクタ&lt;/strong&gt;も宣言できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bc78b13ff48b9fc50475495610ff41f558bf6256" translate="yes" xml:space="preserve">
          <source>The class declaration consists of the class name, the class header (specifying its type parameters, the primary constructor etc.) and the class body, surrounded by curly braces. Both the header and the body are optional; if the class has no body, curly braces can be omitted.</source>
          <target state="translated">クラス宣言は、クラス名、クラス・ヘッダ (型パラメータ、プライマリ・コンストラクタなどを指定します)、および中括弧で囲まれたクラス・ボディから構成されます。ヘッダとボディはどちらもオプションで、ボディを持たないクラスの場合は中括弧を省略できます。</target>
        </trans-unit>
        <trans-unit id="20fb66c6dd38ed7ad8f3ab7df8f07a3ccc7c3a1d" translate="yes" xml:space="preserve">
          <source>The class file with a kind not listed here is treated as a non-Kotlin file.</source>
          <target state="translated">ここに記載されていない種類のクラスファイルは、非Kotlinファイルとして扱われます。</target>
        </trans-unit>
        <trans-unit id="8d923d6e9fe47217a8cbe28cd4bc0054618db9f2" translate="yes" xml:space="preserve">
          <source>The code above uses a &lt;a href=&quot;reflection#bound-class-references-since-11&quot;&gt;bound class reference&lt;/a&gt;, which is supported since Kotlin 1.1. You can also use the &lt;code&gt;javaClass&lt;/code&gt; extension property:</source>
          <target state="translated">上記のコードは、Kotlin 1.1以降でサポート&lt;a href=&quot;reflection#bound-class-references-since-11&quot;&gt;され&lt;/a&gt;ているバインドクラス参照を使用しています。 &lt;code&gt;javaClass&lt;/code&gt; 拡張プロパティを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="732a1f0dd7bc7add2cc125d4681e9dd3eef05206" translate="yes" xml:space="preserve">
          <source>The code in object expressions can access variables from the enclosing scope.</source>
          <target state="translated">オブジェクト式のコードは、囲んだスコープから変数にアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="2a037143482eba48d7a06126430f1e3e039ee172" translate="yes" xml:space="preserve">
          <source>The code in question is from the &lt;a href=&quot;https://curl.haxx.se/libcurl/c/simple.html&quot;&gt;simple&lt;/a&gt; example (comments removed for brevity)</source>
          <target state="translated">問題のコードは&lt;a href=&quot;https://curl.haxx.se/libcurl/c/simple.html&quot;&gt;単純な&lt;/a&gt;例からのものです（簡潔にするためにコメントは削除されています）</target>
        </trans-unit>
        <trans-unit id="02b7f3091db5cc1f6df8785c890e5a0df1e43276" translate="yes" xml:space="preserve">
          <source>The code in the &lt;code&gt;hello.kt&lt;/code&gt; file may look like this:</source>
          <target state="translated">&lt;code&gt;hello.kt&lt;/code&gt; ファイルのコードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="8051836ca1f9bfcf8f55044dce46370d2274f4e3" translate="yes" xml:space="preserve">
          <source>The code in the final &lt;code&gt;hello.kt&lt;/code&gt; file may look like this:</source>
          <target state="translated">最終的な &lt;code&gt;hello.kt&lt;/code&gt; ファイルのコードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="53a9cf6b4f40ef47e2031c236bc499f1385bb27e" translate="yes" xml:space="preserve">
          <source>The code is full of Objective-C attributes, which are intended to help the use of the framework from both Objective-C and Swift languages. &lt;code&gt;DemoClazz&lt;/code&gt;, &lt;code&gt;DemoInterface&lt;/code&gt;, and &lt;code&gt;DemoObject&lt;/code&gt; are created for &lt;code&gt;Clazz&lt;/code&gt;, &lt;code&gt;Interface&lt;/code&gt;, and &lt;code&gt;Object&lt;/code&gt; respectively. The &lt;code&gt;Interface&lt;/code&gt; is turned into &lt;code&gt;@protocol&lt;/code&gt;, both a &lt;code&gt;class&lt;/code&gt; and an &lt;code&gt;object&lt;/code&gt; are represented as &lt;code&gt;@interface&lt;/code&gt;. The &lt;code&gt;Demo&lt;/code&gt; prefix comes from the &lt;code&gt;-output&lt;/code&gt; parameter of the &lt;code&gt;kotlinc-native&lt;/code&gt; compiler and the framework name. We see here that the nullable return type &lt;code&gt;ULong?&lt;/code&gt; is turned into &lt;code&gt;DemoLong*&lt;/code&gt; in Objective-C.</source>
          <target state="translated">コードはObjective-C属性で一杯です。これは、Objective-C言語とSwift言語の両方からのフレームワークの使用を支援することを目的としています。 &lt;code&gt;DemoClazz&lt;/code&gt; 、 &lt;code&gt;DemoInterface&lt;/code&gt; 、そして &lt;code&gt;DemoObject&lt;/code&gt; がために作成され &lt;code&gt;Clazz&lt;/code&gt; 、 &lt;code&gt;Interface&lt;/code&gt; 、および &lt;code&gt;Object&lt;/code&gt; それぞれ。 &lt;code&gt;Interface&lt;/code&gt; になっている &lt;code&gt;@protocol&lt;/code&gt; 両方、 &lt;code&gt;class&lt;/code&gt; および &lt;code&gt;object&lt;/code&gt; として表され &lt;code&gt;@interface&lt;/code&gt; 。 &lt;code&gt;Demo&lt;/code&gt; プレフィックスはから来て &lt;code&gt;-output&lt;/code&gt; のパラメータ &lt;code&gt;kotlinc-native&lt;/code&gt; コンパイラとフレームワーク名。ここでは、null許容の戻り型が &lt;code&gt;ULong?&lt;/code&gt; Objective-C &lt;code&gt;DemoLong*&lt;/code&gt; に変換されます。</target>
        </trans-unit>
        <trans-unit id="bb3f232ccbe55c8a64749007e2a52df82753b753" translate="yes" xml:space="preserve">
          <source>The code is still written as if we were writing synchronous code, top-down, without the need of any special syntax, beyond the use of a function called &lt;code&gt;launch&lt;/code&gt; which essentially kicks-off the coroutine (covered in other tutorials).</source>
          <target state="translated">コードは依然として、トップダウンで同期コードを記述しているかのように、本質的にコルーチン（他のチュートリアルで説明）を &lt;code&gt;launch&lt;/code&gt; と呼ばれる関数の使用を超えて、特別な構文を必要とせずに記述されます。</target>
        </trans-unit>
        <trans-unit id="a467b8b9b7ee4d493e257af4cbf437bbbbde6f1c" translate="yes" xml:space="preserve">
          <source>The code or data pointed by the value of this variable.</source>
          <target state="translated">この変数の値が指すコードまたはデータ。</target>
        </trans-unit>
        <trans-unit id="02020b547b7971154705decbe3b4487f3a320a20" translate="yes" xml:space="preserve">
          <source>The code reads as follows. We have the &lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; structure, which defines all the functions that Kotlin/Native and our library provides us. It uses nested anonymous structures heavily to mimic packages. The &lt;code&gt;libnative_&lt;/code&gt; prefix comes from the library name.</source>
          <target state="translated">コードは次のようになります。我々は持っている &lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; の Kotlin /ネイティブと私たちの図書館が私たちを提供するすべての機能を定義する構造体を、。ネストされた匿名構造を多用してパッケージを模倣します。 &lt;code&gt;libnative_&lt;/code&gt; プレフィックスは、ライブラリの名前から来ています。</target>
        </trans-unit>
        <trans-unit id="38d106af82f35f678ad2690b0baa41429ea7b73f" translate="yes" xml:space="preserve">
          <source>The code uses anonymous structure declarations. The code &lt;code&gt;struct { .. } foo&lt;/code&gt; declares a field in the outer struct of that anonymous structure type, the type with no name.</source>
          <target state="translated">コードは匿名の構造宣言を使用します。コード &lt;code&gt;struct { .. } foo&lt;/code&gt; は、名前のない型の匿名構造型の外部構造体のフィールドを宣言します。</target>
        </trans-unit>
        <trans-unit id="5a75d5c9d164b0af6fa981261ed056bb33166b99" translate="yes" xml:space="preserve">
          <source>The collection interfaces and related functions are located in the kotlin.collections package. Let's get an overview of its contents.</source>
          <target state="translated">コレクションのインターフェイスと関連する関数は、kotlin.collections パッケージにあります。その内容の概要を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="a43a0f5851d135e378a655043e2edbc27114369a" translate="yes" xml:space="preserve">
          <source>The collection provide methods for convenient access to the both ends. It also implements &lt;a href=&quot;../-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; interface and supports efficient get/set operations by index.</source>
          <target state="translated">コレクションは、両端に便利にアクセスするためのメソッドを提供します。また、&lt;a href=&quot;../-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt;インターフェイスを実装し、インデックスによる効率的な取得/設定操作をサポートします。</target>
        </trans-unit>
        <trans-unit id="8eb00e1a99072f02da7c9734f0160d0f6d88090d" translate="yes" xml:space="preserve">
          <source>The command produces the &lt;code&gt;main.exe&lt;/code&gt; file, which we can run.</source>
          <target state="translated">このコマンドにより、実行可能な &lt;code&gt;main.exe&lt;/code&gt; ファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="c3c76c63d39731dfbcdc20b108a998ffa2cab356" translate="yes" xml:space="preserve">
          <source>The common base class of all enum classes. See the &lt;a href=&quot;../../../../../../docs/reference/enum-classes&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on enum classes.</source>
          <target state="translated">すべての列挙型クラスの共通基本クラス。列挙型クラスの詳細については、&lt;a href=&quot;../../../../../../docs/reference/enum-classes&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="b0aedfb3fef921fc9d29c01593b4d03896cda204" translate="yes" xml:space="preserve">
          <source>The common base class of all enum classes. See the &lt;a href=&quot;../../../../../docs/reference/enum-classes&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on enum classes.</source>
          <target state="translated">すべての列挙型クラスの共通基本クラス。列挙型クラスの詳細については、&lt;a href=&quot;../../../../../docs/reference/enum-classes&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="81167d80c8bd1494ae8b5c6e43cfe5f3d98e0f63" translate="yes" xml:space="preserve">
          <source>The common code is &lt;code&gt;&quot;Kotlin Rocks on ${platformName()}&quot;&lt;/code&gt;, where &lt;code&gt;platformName()&lt;/code&gt; is a function that is declared using the &lt;code&gt;expect&lt;/code&gt; keyword. The &lt;code&gt;actual&lt;/code&gt; implementation will be specific to the platform.</source>
          <target state="translated">一般的なコードは &lt;code&gt;&quot;Kotlin Rocks on ${platformName()}&quot;&lt;/code&gt; 。ここで、 &lt;code&gt;platformName()&lt;/code&gt; は &lt;code&gt;expect&lt;/code&gt; キーワードを使用して宣言された関数です。 &lt;code&gt;actual&lt;/code&gt; 実装はプラットフォームに固有になります。</target>
        </trans-unit>
        <trans-unit id="26e2504fa6bfc493ea02066bb2b03d45d4bc4811" translate="yes" xml:space="preserve">
          <source>The common source sets cannot include Java sources.</source>
          <target state="translated">共通のソース・セットには、Javaソースを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="95ec79a350a2b7276da32a4ea5b29db260f72d85" translate="yes" xml:space="preserve">
          <source>The common supertype for all callable references is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-callable/index&quot;&gt;&lt;code&gt;KCallable&amp;lt;out R&amp;gt;&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;R&lt;/code&gt; is the return value type, which is the property type for properties, and the constructed type for constructors.</source>
          <target state="translated">すべての呼び出し可能な参照に共通のスーパータイプは&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-callable/index&quot;&gt; &lt;code&gt;KCallable&amp;lt;out R&amp;gt;&lt;/code&gt; &lt;/a&gt;。ここで、 &lt;code&gt;R&lt;/code&gt; はプロパティのプロパティタイプである戻り値のタイプであり、コンストラクターの構築タイプです。</target>
        </trans-unit>
        <trans-unit id="b490df5b9d3260a0f0b5037a5c6848fe5e1088c0" translate="yes" xml:space="preserve">
          <source>The companion object &lt;a href=&quot;-default/index&quot;&gt;Random.Default&lt;/a&gt; is the default instance of &lt;a href=&quot;index&quot;&gt;Random&lt;/a&gt;.</source>
          <target state="translated">コンパニオンオブジェクト&lt;a href=&quot;-default/index&quot;&gt;Random.Default&lt;/a&gt;は&lt;a href=&quot;index&quot;&gt;Random&lt;/a&gt;のデフォルトのインスタンスです。</target>
        </trans-unit>
        <trans-unit id="d53a914136005ae6f435321f1dcd61b723a192c1" translate="yes" xml:space="preserve">
          <source>The companion object is a singleton, and its members can be accessed directly via the name of the containing class (although you can also insert the name of the companion object if you want to be explicit about accessing the companion object):</source>
          <target state="translated">コンパニオンオブジェクトはシングルトンであり、そのメンバには含まれるクラスの名前を使って直接アクセスすることができます (コンパニオンオブジェクトへのアクセスを明示したい場合はコンパニオンオブジェクトの名前を挿入することもできますが)。</target>
        </trans-unit>
        <trans-unit id="4ea9b65371d26b1c5d91b2e2140d9de16a9201af" translate="yes" xml:space="preserve">
          <source>The compilation from which the binary is built. By default, &lt;code&gt;test&lt;/code&gt; binaries are based on the &lt;code&gt;test&lt;/code&gt; compilation while other binaries - on the &lt;code&gt;main&lt;/code&gt; compilation.</source>
          <target state="translated">バイナリが構築されるコンパイル。デフォルトでは、 &lt;code&gt;test&lt;/code&gt; バイナリは &lt;code&gt;test&lt;/code&gt; コンパイルに基づいていますが、他のバイナリは &lt;code&gt;main&lt;/code&gt; コンパイルに基づいています。</target>
        </trans-unit>
        <trans-unit id="23856358de98bbdac052e0c621f22a36b386526e" translate="yes" xml:space="preserve">
          <source>The compilation output.</source>
          <target state="translated">コンパイル出力です。</target>
        </trans-unit>
        <trans-unit id="b4197acd5de5439005535dfcd5acd86104f3b404" translate="yes" xml:space="preserve">
          <source>The compilation&amp;rsquo;s default source set.</source>
          <target state="translated">コンパイルのデフォルトのソースセット。</target>
        </trans-unit>
        <trans-unit id="b0ac582b63206214b2f5383cb2acb40941a9f13a" translate="yes" xml:space="preserve">
          <source>The compilations created for an Android target by default are tied to &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android build variants&lt;/a&gt;: for each build variant, a Kotlin compilation is created under the same name.</source>
          <target state="translated">デフォルトでAndroidターゲット用に作成されたコンパイルは、Android&lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;ビルドバリアントに&lt;/a&gt;関連付けられています。ビルドバリアントごとに、Kotlinコンパイルが同じ名前で作成されます。</target>
        </trans-unit>
        <trans-unit id="1e2216eb9ae725f1d6c56e917607f0c9488b74a1" translate="yes" xml:space="preserve">
          <source>The compiler automatically derives the following members from all properties declared in the primary constructor:</source>
          <target state="translated">コンパイラは、プライマリ・コンストラクタで宣言されたすべてのプロパティから以下のメンバを自動的に導出します。</target>
        </trans-unit>
        <trans-unit id="6577ea37c1117c7a1d89eaf0755007d75c98ca87" translate="yes" xml:space="preserve">
          <source>The compiler can infer the function types for variables if there is enough information:</source>
          <target state="translated">コンパイラは十分な情報があれば、変数の関数型を推論することができます。</target>
        </trans-unit>
        <trans-unit id="6c9d4888e9777e469bf8f8415875e00d70265bbb" translate="yes" xml:space="preserve">
          <source>The compiler ensures that every expected declaration has actual declarations in all platform modules that implement the corresponding common module, and reports an error if any actual declarations are missing. The IDE provides tools that help you create the missing actual declarations.</source>
          <target state="translated">コンパイラは、すべての期待される宣言が、対応する共通モジュールを実装するすべてのプラットフォーム モジュールで実際の宣言を持つことを保証し、実際の宣言がない場合はエラーを報告します。IDE には、不足している実際の宣言を作成するのに役立つツールが用意されています。</target>
        </trans-unit>
        <trans-unit id="1bc9fa0ea96f6adbeae3b32244221538e36f7db6" translate="yes" xml:space="preserve">
          <source>The compiler generates an executable called &lt;code&gt;a.out&lt;/code&gt;. We need to run it to see in action the Kotlin code being executed from C library. On Linux, we'll need to include &lt;code&gt;.&lt;/code&gt; into the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to let the application know to load the &lt;code&gt;libnative.so&lt;/code&gt; library from the current folder.</source>
          <target state="translated">コンパイラーは &lt;code&gt;a.out&lt;/code&gt; と呼ばれる実行可能ファイルを生成します。実際に実行して、Cライブラリから実行されているKotlinコードを確認する必要があります。Linuxでは、を含める必要があります &lt;code&gt;.&lt;/code&gt; &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; ロードするためにアプリケーションが知っているようにする &lt;code&gt;libnative.so&lt;/code&gt; 現在のフォルダからライブラリを。</target>
        </trans-unit>
        <trans-unit id="9c32f1ebf038bdf8cbaba8702b89e98ca18e811a" translate="yes" xml:space="preserve">
          <source>The compiler is smart enough to know a cast to be safe if a negative check leads to a return:</source>
          <target state="translated">コンパイラは、ネガティブチェックがリターンにつながる場合に安全なキャストを知っているほど賢いです。</target>
        </trans-unit>
        <trans-unit id="6c760f17f753a0cd7195aa08e67eb2dc50e9752a" translate="yes" xml:space="preserve">
          <source>The compiler now inlines values of &lt;code&gt;const val&lt;/code&gt; properties into the locations where they are used.</source>
          <target state="translated">コンパイラーは &lt;code&gt;const val&lt;/code&gt; プロパティーの値を、それらが使用される場所にインライン化するようになりました。</target>
        </trans-unit>
        <trans-unit id="4ba2b709c858d08263f181dafb3aabf655fd192d" translate="yes" xml:space="preserve">
          <source>The compiler now provides an option to treat all warnings as errors. Use &lt;code&gt;-Werror&lt;/code&gt; on the command line, or the following Gradle snippet:</source>
          <target state="translated">コンパイラーは、すべての警告をエラーとして扱うオプションを提供するようになりました。コマンドラインで &lt;code&gt;-Werror&lt;/code&gt; を使用するか、次のGradleスニペットを使用します。</target>
        </trans-unit>
        <trans-unit id="71411ab1eb04e1e2a8b1556ddf262cc1922d7424" translate="yes" xml:space="preserve">
          <source>The compiler performs the following steps for resolution of an operator in the &lt;em&gt;postfix&lt;/em&gt; form, e.g. &lt;code&gt;a++&lt;/code&gt;:</source>
          <target state="translated">コンパイラーは、&lt;em&gt;後置形&lt;/em&gt;式のオペレーター（例えば &lt;code&gt;a++&lt;/code&gt; 解決のために、以下のステップを実行します。</target>
        </trans-unit>
        <trans-unit id="ade270e63280116ba329a9222cd68e987a0137a2" translate="yes" xml:space="preserve">
          <source>The compiler produces a warning for the cast in the last line. The cast cannot be fully checked at runtime and provides no guarantee that the values in the map are &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">コンパイラーは、キャストの最終行に警告を生成します。キャストは実行時に完全にチェックすることはできず、マップの値が &lt;code&gt;Int&lt;/code&gt; であるという保証はありません。</target>
        </trans-unit>
        <trans-unit id="c187f47b8c07f5d91c0556c45f360de519c42c3f" translate="yes" xml:space="preserve">
          <source>The compiler produces the code relevant for the target module system, for example, in case of CommonJS, it will import the declaration via the &lt;code&gt;require(...)&lt;/code&gt; function.</source>
          <target state="translated">コンパイラは、ターゲットモジュールシステムに関連するコードを生成します。たとえば、CommonJSの場合、 &lt;code&gt;require(...)&lt;/code&gt; 関数を介して宣言をインポートします。</target>
        </trans-unit>
        <trans-unit id="8552578d258f1326cbba27a9248961d718afcda8" translate="yes" xml:space="preserve">
          <source>The compiler tracks the information about the check you performed, and allows the call to &lt;code&gt;length&lt;/code&gt; inside the &lt;em&gt;if&lt;/em&gt;. More complex conditions are supported as well:</source>
          <target state="translated">コンパイラーは実行したチェックに関する情報を追跡し、&lt;em&gt;if&lt;/em&gt;内で &lt;code&gt;length&lt;/code&gt; への呼び出しを許可します。より複雑な条件もサポートされています。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6dbebb0d588955ecc95db38394b6245335aeaf4f" translate="yes" xml:space="preserve">
          <source>The compiler type can also be set in the &lt;code&gt;gradle.properties&lt;/code&gt; file, with the key &lt;code&gt;kotlin.js.compiler=ir&lt;/code&gt;. (This behaviour is overwritten by any settings in the &lt;code&gt;build.gradle(.kts)&lt;/code&gt;, however).</source>
          <target state="translated">コンパイラの種類は、キー &lt;code&gt;kotlin.js.compiler=ir&lt;/code&gt; を使用して &lt;code&gt;gradle.properties&lt;/code&gt; ファイルで設定することもできます。（ただし、この動作は &lt;code&gt;build.gradle(.kts)&lt;/code&gt; の設定によって上書きされます）。</target>
        </trans-unit>
        <trans-unit id="9778744271ecf22c5df54071242110d274ebb382" translate="yes" xml:space="preserve">
          <source>The compiler will allow this function to be called as e.g. &lt;code&gt;test(&quot;a&quot;, &quot;b&quot;)&lt;/code&gt; or &lt;code&gt;test(&quot;a&quot;, null)&lt;/code&gt;, but not as &lt;code&gt;test(null, &quot;b&quot;)&lt;/code&gt; or &lt;code&gt;test(null, null)&lt;/code&gt;. Calling &lt;code&gt;test(a, b)&lt;/code&gt; is only allowed if the compiler can prove that &lt;code&gt;a&lt;/code&gt; cannot possibly be null. Inside of &lt;code&gt;test&lt;/code&gt;, the compiler will not allow you to do anything with &lt;code&gt;b&lt;/code&gt; that would result in an exception if &lt;code&gt;b&lt;/code&gt; should happen to be null - so you can do &lt;code&gt;a.length&lt;/code&gt;, but not &lt;code&gt;b.length&lt;/code&gt;. However, once you're inside a conditional where you have checked that &lt;code&gt;b&lt;/code&gt; is not null, you can do it:</source>
          <target state="translated">コンパイラーは、この関数を &lt;code&gt;test(&quot;a&quot;, &quot;b&quot;)&lt;/code&gt; または &lt;code&gt;test(&quot;a&quot;, null)&lt;/code&gt; として呼び出すことを許可し &lt;code&gt;test(null, &quot;b&quot;)&lt;/code&gt; または &lt;code&gt;test(null, null)&lt;/code&gt; としては許可しません。 &lt;code&gt;test(a, b)&lt;/code&gt; 呼び出しは、コンパイラが &lt;code&gt;a&lt;/code&gt; をnullにできないことを証明できる場合にのみ許可されます。内部の &lt;code&gt;test&lt;/code&gt; 、コンパイラはあなたと何も行うことができません &lt;code&gt;b&lt;/code&gt; 場合は例外につながる &lt;code&gt;b&lt;/code&gt; はあなたが行うことができるように- nullであることが起こるはずです &lt;code&gt;a.length&lt;/code&gt; を、ではなく &lt;code&gt;b.length&lt;/code&gt; 。ただし、 &lt;code&gt;b&lt;/code&gt; がnullでないことを確認した条件内に​​入ると、次のように実行できます。</target>
        </trans-unit>
        <trans-unit id="d2b29d9a02116dffd597657f45323e8d260b605c" translate="yes" xml:space="preserve">
          <source>The compiler will generate something like this (except that &lt;code&gt;start&lt;/code&gt; won't collide with any other identifiers with the same name):</source>
          <target state="translated">コンパイラーは次のようなものを生成します（ただし、 &lt;code&gt;start&lt;/code&gt; が同じ名前の他の識別子と衝突しない場合を除きます）。</target>
        </trans-unit>
        <trans-unit id="93c0badc9698bd83e21fa61741e490ba8801596d" translate="yes" xml:space="preserve">
          <source>The compiler will not let you perform checks that can't possibly succeed because the declared type of the variable is a class that is on an unrelated branch of the class hierarchy from the class you're checking against - if the declared type of &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;MotorVehicle&lt;/code&gt;, you can't check if &lt;code&gt;x&lt;/code&gt; is a &lt;code&gt;Person&lt;/code&gt;. If the right-hand side of &lt;code&gt;is&lt;/code&gt; is an interface, Kotlin will allow the type of the left-hand side to be any interface or open class, because it could be that some subclass thereof implements the interface.</source>
          <target state="translated">変数の宣言された型が、チェック対象のクラスからのクラス階層の無関係なブランチにあるクラスであるため、コンパイラーは成功しない可能性のあるチェックを実行できません-宣言された &lt;code&gt;x&lt;/code&gt; の型が &lt;code&gt;MotorVehicle&lt;/code&gt; の場合、 &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;Person&lt;/code&gt; であるかどうかは確認できません。右側場合 &lt;code&gt;is&lt;/code&gt; インターフェースである、それはいくつかのサブクラスがそのインターフェースを実装することである可能性があるため、Kotlinは、左側のタイプは、任意のインタフェースまたはオープンクラスであることを可能にします。</target>
        </trans-unit>
        <trans-unit id="945c10a176528faf419fb001b8765fc6d7f48809" translate="yes" xml:space="preserve">
          <source>The complete list of options for the Gradle tasks is the following:</source>
          <target state="translated">Gradleタスクのオプションの完全なリストは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6faca9aef8f0af27489fabb11e18668f0d73d512" translate="yes" xml:space="preserve">
          <source>The components used to setup Gradle publications.</source>
          <target state="translated">Gradle出版物のセットアップに使用されるコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="3c10c9a78955f70ea89c2ed5382b97613f6fd27c" translate="yes" xml:space="preserve">
          <source>The concurrent nature of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-merge.html&quot;&gt;flatMapMerge&lt;/a&gt; is obvious:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-merge.html&quot;&gt;flatMapMerge&lt;/a&gt;の並行性は明らかです。</target>
        </trans-unit>
        <trans-unit id="4b9af24e6804c15099a6e15d86ca2e171e7f1be2" translate="yes" xml:space="preserve">
          <source>The consumer has to add the attribute to a single target where the ambiguity arises.</source>
          <target state="translated">消費者は、曖昧さが生じる単一の対象に属性を追加しなければならない。</target>
        </trans-unit>
        <trans-unit id="cbc4e4912fffd8b8c15a7f1685ee311f7de94af5" translate="yes" xml:space="preserve">
          <source>The consumer may only need to add the attribute to a single target where the ambiguity arises.</source>
          <target state="translated">消費者は、曖昧さが生じている単一のターゲットに属性を追加するだけで済むかもしれません。</target>
        </trans-unit>
        <trans-unit id="2fa143f534ac2f4a54ee1e8593acf92219a64686" translate="yes" xml:space="preserve">
          <source>The contents of our &lt;code&gt;main.js&lt;/code&gt; would be:</source>
          <target state="translated">&lt;code&gt;main.js&lt;/code&gt; の内容は次のようになります。</target>
        </trans-unit>
        <trans-unit id="ccc1b0f9d51d769d3aac8a2e95f9b22ce641f370" translate="yes" xml:space="preserve">
          <source>The context of the coroutine that corresponds to this continuation.</source>
          <target state="translated">この続きに対応するコルーチンのコンテキスト。</target>
        </trans-unit>
        <trans-unit id="347bd2f03e4af765cba7e04d72d0cecc9c6bb8cc" translate="yes" xml:space="preserve">
          <source>The contract description must be at the beginning of a function and have at least one effect.</source>
          <target state="translated">契約書の記載は、機能の先頭にあり、少なくとも1つの効果があることが必要です。</target>
        </trans-unit>
        <trans-unit id="4954ad3fce80d9310d9ce43541aaf17e0123a4ea" translate="yes" xml:space="preserve">
          <source>The contravariant type parameter of a parameter of a function-typed return type (the user will call the returned function with something that can consume any &lt;code&gt;Fruit&lt;/code&gt;, so it's okay to return a function that expects to receive something that can handle &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">関数型の戻り値型のパラメーターの反変型パラメーター（ユーザーは、戻り値の関数を、任意の &lt;code&gt;Fruit&lt;/code&gt; を消費できるもので呼び出すため、 &lt;code&gt;Apple&lt;/code&gt; を処理できるものを受け取ることを期待する関数を返しても問題ありません）</target>
        </trans-unit>
        <trans-unit id="fc9281a07f7c7bacfae7f8c712a66286fa4aa11c" translate="yes" xml:space="preserve">
          <source>The contravariant type parameter of a parameter type (the user is passing a consumer that can handle any &lt;code&gt;Fruit&lt;/code&gt;, and it will be given an &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">パラメーター型の反変型パラメーター（ユーザーは、任意の &lt;code&gt;Fruit&lt;/code&gt; を処理できるコンシューマーを渡しており、 &lt;code&gt;Apple&lt;/code&gt; が提供されます）</target>
        </trans-unit>
        <trans-unit id="3b2df0437d1139299375d04a6b3d749596fe34b3" translate="yes" xml:space="preserve">
          <source>The contravariant type parameter of the return type of a function-typed parameter (the user is passing a function that will return a consumer of any &lt;code&gt;Fruit&lt;/code&gt;, and the returned consumer will be given &lt;code&gt;Apple&lt;/code&gt; instances)</source>
          <target state="translated">関数型パラメーターの戻り値の型の反変型パラメーター（ユーザーは任意の &lt;code&gt;Fruit&lt;/code&gt; のコンシューマーを返す関数を渡し、返されたコンシューマーには &lt;code&gt;Apple&lt;/code&gt; インスタンスが与えられます）</target>
        </trans-unit>
        <trans-unit id="3ed87fa7f81c4d406e21bd5206fb7068af42bc61" translate="yes" xml:space="preserve">
          <source>The convention that is followed is that each library gets its own definition file, usually named the same as the library. For more information on all the options available to &lt;code&gt;cinterop&lt;/code&gt;, see &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;the Interop documentation&lt;/a&gt;</source>
          <target state="translated">従う規則は、各ライブラリが通常はライブラリと同じ名前の独自の定義ファイルを取得することです。 &lt;code&gt;cinterop&lt;/code&gt; で使用できるすべてのオプションの詳細について&lt;a href=&quot;../../reference/native/c_interop&quot;&gt;は、Interopのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c72d89d38289079cb805c34b2308d4dfa8c2fd72" translate="yes" xml:space="preserve">
          <source>The coroutine context includes a &lt;em&gt;coroutine dispatcher&lt;/em&gt; (see &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html&quot;&gt;CoroutineDispatcher&lt;/a&gt;) that determines what thread or threads the corresponding coroutine uses for its execution. The coroutine dispatcher can confine coroutine execution to a specific thread, dispatch it to a thread pool, or let it run unconfined.</source>
          <target state="translated">コルーチンコンテキストには、対応するコルーチンが実行に使用する1つまたは複数のスレッドを決定する&lt;em&gt;コルーチンディスパッチャー&lt;/em&gt;（&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html&quot;&gt;CoroutineDispatcherを&lt;/a&gt;参照）が含まれます。コルーチンディスパッチャは、コルーチンの実行を特定のスレッドに制限したり、スレッドプールにディスパッチしたり、制限なしで実行したりできます。</target>
        </trans-unit>
        <trans-unit id="d4ce8b1f45a5d6806ad09e59cc85adf7dc80106f" translate="yes" xml:space="preserve">
          <source>The coroutine context is a set of various elements. The main elements are the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; of the coroutine, which we've seen before, and its dispatcher, which is covered in this section.</source>
          <target state="translated">コルーチンコンテキストは、さまざまな要素のセットです。主な要素は、以前に見たコルーチンの&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;ジョブ&lt;/a&gt;と、このセクションで説明するそのディスパッチャーです。</target>
        </trans-unit>
        <trans-unit id="09d67675b7aec2c1bf9665203e1b50714b4ffefe" translate="yes" xml:space="preserve">
          <source>The coroutine is started directly in the invoker's thread without going through the &lt;a href=&quot;../kotlin.coroutines/-continuation-interceptor/index&quot;&gt;ContinuationInterceptor&lt;/a&gt; that might be present in the completion's &lt;a href=&quot;../kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt;. It is the invoker's responsibility to ensure that a proper invocation context is established.</source>
          <target state="translated">コルーチンは、補完の&lt;a href=&quot;../kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContextに&lt;/a&gt;存在する可能性のある&lt;a href=&quot;../kotlin.coroutines/-continuation-interceptor/index&quot;&gt;ContinuationInterceptor&lt;/a&gt;を経由せずに、呼び出し元のスレッドで直接開始されます。適切な呼び出しコンテキストが確立されるようにするのは、呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="5075509aaa121a034050446e85498c3f79064890" translate="yes" xml:space="preserve">
          <source>The coroutine's &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; is part of its context, and can be retrieved from it using the &lt;code&gt;coroutineContext[Job]&lt;/code&gt; expression:</source>
          <target state="translated">コルーチンの&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;ジョブ&lt;/a&gt;はそのコンテキストの一部であり、 &lt;code&gt;coroutineContext[Job]&lt;/code&gt; 式を使用してコルーチンから取得できます。</target>
        </trans-unit>
        <trans-unit id="3db3fa62931fade33326b38aff7867fe578bfdd9" translate="yes" xml:space="preserve">
          <source>The coroutine's &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; is part of its context. The coroutine can retrieve it from its own context using &lt;code&gt;coroutineContext[Job]&lt;/code&gt; expression:</source>
          <target state="translated">コルーチンの&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;ジョブ&lt;/a&gt;は、そのコンテキストの一部です。コルーチンは、 &lt;code&gt;coroutineContext[Job]&lt;/code&gt; 式を使用して、独自のコンテキストから取得できます。</target>
        </trans-unit>
        <trans-unit id="5769f42ad3e1d523865b402b5e67bd28e7b20bad" translate="yes" xml:space="preserve">
          <source>The corresponding &lt;code&gt;sourceSets&lt;/code&gt; property should be updated if not using the default convention:</source>
          <target state="translated">デフォルトの規則を使用しない場合は、対応する &lt;code&gt;sourceSets&lt;/code&gt; プロパティを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="e1d461218111d234968b7db694b9b764401c60b6" translate="yes" xml:space="preserve">
          <source>The corresponding &lt;em&gt;sourceSets&lt;/em&gt; property should be updated if not using the default convention:</source>
          <target state="translated">デフォルトの規則を使用しない場合は、対応する&lt;em&gt;sourceSets&lt;/em&gt;プロパティを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d0089507419945c1de1f77807f154c6b9f1b477" translate="yes" xml:space="preserve">
          <source>The corresponding part in the Gradle build file looks as follows:</source>
          <target state="translated">Gradleのビルドファイルで対応する部分は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="16c7a1a50f1d32fc204564f81e6d0304f7356ed7" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of a read-only property type (the user is expecting a producer of &lt;code&gt;Fruit&lt;/code&gt;, and gets a producer of &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">読み取り専用プロパティタイプの共変タイプのパラメーター（ユーザーは &lt;code&gt;Fruit&lt;/code&gt; のプロデューサーを想定しており、 &lt;code&gt;Apple&lt;/code&gt; のプロデューサーを取得します）</target>
        </trans-unit>
        <trans-unit id="7d1a94c8808bc3894d49e0ec4259312cbb359362" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of a return type (the user is expecting that the returned value will produce a &lt;code&gt;Fruit&lt;/code&gt;, so it's okay if it really produces an &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">戻り値型の共変型パラメーター（ユーザーは戻り値が &lt;code&gt;Fruit&lt;/code&gt; を生成することを期待しているため、実際に &lt;code&gt;Apple&lt;/code&gt; を生成しても問題ありません）</target>
        </trans-unit>
        <trans-unit id="ec6f1c24b0cd8b11d61e4f25576ab198b6bece55" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of the parameter type of a function-typed parameter (the user is passing a function that can handle any &lt;code&gt;Fruit&lt;/code&gt; producer, and it will be given an &lt;code&gt;Apple&lt;/code&gt; producer)</source>
          <target state="translated">関数型パラメーターのパラメーター型の共変型パラメーター（ユーザーは任意の &lt;code&gt;Fruit&lt;/code&gt; プロデューサーを処理できる関数を渡しており、 &lt;code&gt;Apple&lt;/code&gt; プロデューサーが与えられます）</target>
        </trans-unit>
        <trans-unit id="bc2c5c3395341afe0bbd48554537d9a1ac25a9db" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of the return type of a function-typed return type (the user expects the returned function to return something that produces &lt;code&gt;Fruit&lt;/code&gt;, so it's okay if it really produces &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">関数型の戻り値型の戻り値型の共変型パラメーター（ユーザーは、戻り値の関数が &lt;code&gt;Fruit&lt;/code&gt; を生成するものを返すことを期待しているので、本当に &lt;code&gt;Apple&lt;/code&gt; を生成しても問題ありません）</target>
        </trans-unit>
        <trans-unit id="a39f5e4ad2c9626d5a5f458b4068b5771d3c11f9" translate="yes" xml:space="preserve">
          <source>The created &lt;code&gt;StableRef&lt;/code&gt; should eventually be manually disposed using the &lt;code&gt;.dispose()&lt;/code&gt; method to prevent memory leaks:</source>
          <target state="translated">作成された &lt;code&gt;StableRef&lt;/code&gt; は、メモリリークを防ぐために、最終的に &lt;code&gt;.dispose()&lt;/code&gt; メソッドを使用して手動で破棄する必要があります。</target>
        </trans-unit>
        <trans-unit id="7dc376ddde1c64329f76a2fdf0f77fd2f42853b6" translate="yes" xml:space="preserve">
          <source>The created iOS application is ready to run on the iOS emulator or on the iOS device. The device run may require an Apple developer account and to issue a developer certificate. Xcode does its best to guide us through the process.</source>
          <target state="translated">作成されたiOSアプリケーションは、iOSエミュレータまたはiOSデバイス上で実行する準備ができています。デバイスでの実行には、Appleの開発者アカウントが必要な場合と、開発者証明書の発行が必要な場合があります。Xcodeは、このプロセスを通して私たちを導くために最善を尽くします。</target>
        </trans-unit>
        <trans-unit id="e20d095cd0f1efef77b1627ffafe7b1dfa3d28bf" translate="yes" xml:space="preserve">
          <source>The curly braces around a body can be omitted if the body is a oneliner. This is discouraged unless the body goes on the same line as the condition, because it makes it easy to make this mistake, especially when one is used to Python:</source>
          <target state="translated">ボディの周りの中括弧は、ボディがオネリの場合は省略することができます。特に Python に慣れている場合には、この間違いを犯しやすいので、ボディが条件と同じライン上にある場合を除き、これはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="594d3acd0f3d50fec031602ce3f69e2de7031169" translate="yes" xml:space="preserve">
          <source>The current reading value can be advanced by the specified duration amount with the operator &lt;a href=&quot;plus-assign&quot;&gt;plusAssign&lt;/a&gt;:</source>
          <target state="translated">現在の読み取り値は、演算子&lt;a href=&quot;plus-assign&quot;&gt;plusAssign&lt;/a&gt;：を使用して、指定された期間だけ進めることができます。</target>
        </trans-unit>
        <trans-unit id="dcfce21884a60ba71ce3d59d9e2af53e74e2e10c" translate="yes" xml:space="preserve">
          <source>The currently released version is 1.3.41, published on July 4, 2019.</source>
          <target state="translated">現在リリースされているバージョンは1.3.41で、2019年7月4日に公開されました。</target>
        </trans-unit>
        <trans-unit id="b5744a90420458acc57f96347ae2c3cc6f2d50b3" translate="yes" xml:space="preserve">
          <source>The currently released version is 1.4.10, published on September 10, 2020.</source>
          <target state="translated">現在リリースされているバージョンは1.4.10で、2020年9月10日に公開されています。</target>
        </trans-unit>
        <trans-unit id="99a5ae4aba1310a5ec2c1c1ea8e6bbd89807b2b1" translate="yes" xml:space="preserve">
          <source>The declaration of the classifier used in this type. For example, in the type &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; the classifier would be the &lt;a href=&quot;../-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; instance for &lt;a href=&quot;../../kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;.</source>
          <target state="translated">このタイプで使用される分類子の宣言。たとえば、タイプ &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; では、&lt;a href=&quot;../-k-class/index#kotlin.reflect.KClass&quot;&gt;分類子&lt;/a&gt;は&lt;a href=&quot;../../kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;Listの&lt;/a&gt;KClassインスタンスになります。</target>
        </trans-unit>
        <trans-unit id="e4cb77989b70ae7af02cc584cc3eb602ad306980" translate="yes" xml:space="preserve">
          <source>The declarations in the new artifacts are visible under the same package names from the Kotlin point of view, but have different package names for Java. Therefore, switching to the new artifacts will not require any changes to your source code.</source>
          <target state="translated">新しいアーティファクトの宣言は、Kotlinの観点からは同じパッケージ名で表示されますが、Javaの場合は異なるパッケージ名になっています。したがって、新しいアーティファクトに切り替えても、ソースコードに変更を加える必要はありません。</target>
        </trans-unit>
        <trans-unit id="38a82a6bd4d8bda70773fac15ae91a2110030d1c" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;encoding&lt;/a&gt; is UTF-8, but you can specify it if you need something else:</source>
          <target state="translated">デフォルトの&lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;エンコーディング&lt;/a&gt;はUTF-8ですが、他に必要な場合は指定できます。</target>
        </trans-unit>
        <trans-unit id="7643db7f540eca7261e951018ad1bc000680e9fc" translate="yes" xml:space="preserve">
          <source>The default artifact IDs follow the pattern &lt;code&gt;&amp;lt;projectName&amp;gt;-&amp;lt;targetNameToLowerCase&amp;gt;&lt;/code&gt;, for example &lt;code&gt;sample-lib-nodejs&lt;/code&gt; for a target named &lt;code&gt;nodeJs&lt;/code&gt; in a project &lt;code&gt;sample-lib&lt;/code&gt;.</source>
          <target state="translated">デフォルトのアーティファクトIDは、パターン &lt;code&gt;&amp;lt;projectName&amp;gt;-&amp;lt;targetNameToLowerCase&amp;gt;&lt;/code&gt; に従います。たとえば、プロジェクト &lt;code&gt;sample-lib&lt;/code&gt; 内の &lt;code&gt;nodeJs&lt;/code&gt; という名前のターゲットの &lt;code&gt;sample-lib-nodejs&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="960beb3d459f57914f0b08a89c8e7a0ae2d213a2" translate="yes" xml:space="preserve">
          <source>The default dispatcher that is used when coroutines are launched in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; is represented by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt; and uses a shared background pool of threads, so &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; uses the same dispatcher as &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt;.</source>
          <target state="translated">コルーチンがで起動される場合に使用されるデフォルトのディスパッチャ&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScopeが&lt;/a&gt;表される&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt;ので、スレッドの共有背景プールを使用 &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; と同じディスパッチャを使用 &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b76c41789282ed3ab00f219e4dbda9192589571a" translate="yes" xml:space="preserve">
          <source>The default dispatcher, that is used when coroutines are launched in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt;, is represented by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt; and uses shared background pool of threads, so &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; uses the same dispatcher as &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt;でコルーチンが起動されるときに使用されるデフォルトのディスパッチャーは&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt;で表され、スレッドの共有バックグラウンドプールを使用するため、 &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; は &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt; と同じディスパッチャーを使用します。 ..}。</target>
        </trans-unit>
        <trans-unit id="034812e12bafb58c2506d45936895dac0de7b559" translate="yes" xml:space="preserve">
          <source>The default implementation is available for Java classes implementing the interface.</source>
          <target state="translated">インターフェースを実装しているJavaクラスでは、デフォルトの実装が利用可能です。</target>
        </trans-unit>
        <trans-unit id="eae7fdc4a8ba33e2f9213a2722bb2903c080bbc0" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;code&gt;Map&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-map/index&quot;&gt;&lt;code&gt;LinkedHashMap&lt;/code&gt;&lt;/a&gt; &amp;ndash; preserves the order of elements insertion when iterating the map. In turn, an alternative implementation &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-hash-map/index&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; &amp;ndash; says nothing about the elements order.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; のデフォルト実装&amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-map/index&quot;&gt; &lt;code&gt;LinkedHashMap&lt;/code&gt; &lt;/a&gt; &amp;ndash;マップを反復するときに要素の挿入順序を保持します。次に、代替の実装&amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-hash-map/index&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt; &amp;ndash;は要素の順序について何も述べていません。</target>
        </trans-unit>
        <trans-unit id="1d4f4ecafdd233f07d5e3f6afd06222be0312077" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;code&gt;Set&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-set/index&quot;&gt;&lt;code&gt;LinkedHashSet&lt;/code&gt;&lt;/a&gt; &amp;ndash; preserves the order of elements insertion. Hence, the functions that rely on the order, such as &lt;code&gt;first()&lt;/code&gt; or &lt;code&gt;last()&lt;/code&gt;, return predictable results on such sets.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-set/index&quot;&gt; &lt;code&gt;LinkedHashSet&lt;/code&gt; &lt;/a&gt; &amp;ndash; のデフォルトの実装では、要素の挿入順序が保持されます。したがって、 &lt;code&gt;first()&lt;/code&gt; や &lt;code&gt;last()&lt;/code&gt; などの順序に依存する関数は、そのようなセットに対して予測可能な結果を​​返します。</target>
        </trans-unit>
        <trans-unit id="bed0e18ec00404266f1579a08902984894034905" translate="yes" xml:space="preserve">
          <source>The default nullability is used when a type itself is not annotated by a nullability annotation, and the default is determined by the innermost enclosing element annotated with a type qualifier default annotation with the &lt;code&gt;ElementType&lt;/code&gt; matching the type usage.</source>
          <target state="translated">デフォルトのnull可能性は、タイプ自体にnull可能性アノテーションが付いていない場合に使用され、デフォルトは、タイプの使用法に一致する &lt;code&gt;ElementType&lt;/code&gt; を持つタイプ修飾子のデフォルトアノテーションが付いた最も内側の囲み要素によって決定されます。</target>
        </trans-unit>
        <trans-unit id="9d69906046e2ddf59f421f52ac090513e9b9f2a3" translate="yes" xml:space="preserve">
          <source>The default random number generator.</source>
          <target state="translated">デフォルトの乱数発生器。</target>
        </trans-unit>
        <trans-unit id="f6a4b71f5aa6c02b362c62576dcc053e9373e5c3" translate="yes" xml:space="preserve">
          <source>The default source set &lt;code&gt;commonMain&lt;/code&gt; is added to each production (application or library) variant's compilation. The &lt;code&gt;commonTest&lt;/code&gt; source set is similarly added to the compilations of unit test and instrumented test variants.</source>
          <target state="translated">デフォルトのソースセット &lt;code&gt;commonMain&lt;/code&gt; は、各プロダクション（アプリケーションまたはライブラリ）バリアントのコンパイルに追加されます。 &lt;code&gt;commonTest&lt;/code&gt; ソースセットは、同様に、ユニットテストとインストルメント試験変異体のコンパイルに追加されます。</target>
        </trans-unit>
        <trans-unit id="f9ef35e4ea1c850fbe5f46bb280445cc0cd754fc" translate="yes" xml:space="preserve">
          <source>The default source set &lt;code&gt;commonMain&lt;/code&gt; is added to each production (application or library) variant's compilation. The &lt;code&gt;commonTest&lt;/code&gt; source set is, similarly, added to the compilations of unit test and instrumented test variants.</source>
          <target state="translated">デフォルトのソースセット &lt;code&gt;commonMain&lt;/code&gt; は、各プロダクション（アプリケーションまたはライブラリ）バリアントのコンパイルに追加されます。 &lt;code&gt;commonTest&lt;/code&gt; ソースセットは、同様に、ユニットテストとインストルメント試験変異体のコンパイルに追加されます。</target>
        </trans-unit>
        <trans-unit id="c561b55e89597682ebf08bcc014c20773fedb83e" translate="yes" xml:space="preserve">
          <source>The default upper bound (if none specified) is &lt;code&gt;Any?&lt;/code&gt;. Only one upper bound can be specified inside the angle brackets. If the same type parameter needs more than one upper bound, we need a separate &lt;strong&gt;where&lt;/strong&gt;-clause:</source>
          <target state="translated">デフォルトの上限（指定されていない場合）は &lt;code&gt;Any?&lt;/code&gt; です。。山かっこ内で指定できる上限は1つだけです。同じ型パラメーターに複数の上限が必要な場合は、別の&lt;strong&gt;where&lt;/strong&gt; -clause が必要です。</target>
        </trans-unit>
        <trans-unit id="7b5f3fac0dd293e61c74032e957e6e608fec3b05" translate="yes" xml:space="preserve">
          <source>The default value is provided at the declaration of this parameter.</source>
          <target state="translated">デフォルト値は、このパラメータの宣言時に提供されます。</target>
        </trans-unit>
        <trans-unit id="44653ab72c57ae2dec40031a1386b4afc98b3166" translate="yes" xml:space="preserve">
          <source>The definitions part shows how Kotlin primitive types map into C primitive types. We discussed reverse mapping in the &lt;a href=&quot;mapping-primitive-data-types-from-c&quot;&gt;Mapping Primitive Data Types from C&lt;/a&gt; tutorial.</source>
          <target state="translated">定義部分は、Kotlinプリミティブ型がCプリミティブ型にどのようにマッピングされるかを示しています。&lt;a href=&quot;mapping-primitive-data-types-from-c&quot;&gt;C&lt;/a&gt;チュートリアルのプリミティブデータ型のマッピングでリバースマッピングについて説明しました。</target>
        </trans-unit>
        <trans-unit id="7879370b21d5da1f44f128551f264e026a0fb9ed" translate="yes" xml:space="preserve">
          <source>The delegate class may implement one of the interfaces &lt;code&gt;ReadOnlyProperty&lt;/code&gt; and &lt;code&gt;ReadWriteProperty&lt;/code&gt; containing the required &lt;code&gt;operator&lt;/code&gt; methods. These interfaces are declared in the Kotlin standard library:</source>
          <target state="translated">デリゲートクラスは、必要な &lt;code&gt;operator&lt;/code&gt; メソッドを含むインターフェイス &lt;code&gt;ReadOnlyProperty&lt;/code&gt; および &lt;code&gt;ReadWriteProperty&lt;/code&gt; の 1つを実装できます。これらのインターフェースはKotlin標準ライブラリで宣言されています。</target>
        </trans-unit>
        <trans-unit id="42bebb3adac2ab3e00fbad0af368d0931c57bd77" translate="yes" xml:space="preserve">
          <source>The delegated property can be used like this to declare a property in &lt;code&gt;Person&lt;/code&gt; - note the use of &lt;code&gt;by&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt;:</source>
          <target state="translated">委任されたプロパティをこのように使用して、 &lt;code&gt;Person&lt;/code&gt; でプロパティを宣言できます。 &lt;code&gt;=&lt;/code&gt; の代わりに &lt;code&gt;by&lt;/code&gt; を使用していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="898cc738a761dcd3be73120e07ea5697ac2725df" translate="yes" xml:space="preserve">
          <source>The dependencies configuration has been changed; dependencies are now specified separately for each source root.</source>
          <target state="translated">依存関係の設定が変更されました。</target>
        </trans-unit>
        <trans-unit id="973f16e5337bff9eb9481252b3daeac2f25a5f4f" translate="yes" xml:space="preserve">
          <source>The dependencies declared in this way are added in the podspec file and downloaded during the execution of &lt;code&gt;pod install&lt;/code&gt;.</source>
          <target state="translated">この方法で宣言された依存関係は、podspecファイルに追加され、 &lt;code&gt;pod install&lt;/code&gt; の実行中にダウンロードされます。</target>
        </trans-unit>
        <trans-unit id="f8d4becb658791b12877a35c88070d8b306eefc4" translate="yes" xml:space="preserve">
          <source>The dependency on the Kotlin/JS &lt;a href=&quot;../../index&quot;&gt;standard library&lt;/a&gt; is mandatory for all Kotlin/JS projects, and as such is implicit &amp;ndash; no artifacts need to be added. If your project contains tests written in Kotlin, you should add a dependency on the &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;kotlin.test&lt;/a&gt; library:</source>
          <target state="translated">Kotlin / JS&lt;a href=&quot;../../index&quot;&gt;標準ライブラリ&lt;/a&gt;への依存は、すべてのKotlin / JSプロジェクトに必須であり、暗黙的であるため、アーティファクトを追加する必要はありません。プロジェクトにKotlinで記述されたテストが含まれている場合は、&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;kotlin.test&lt;/a&gt;ライブラリへの依存関係を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="8e289438644482986fe5eb08aaf9b0616f49cac1" translate="yes" xml:space="preserve">
          <source>The described mechanism for marking and using experimental APIs is itself experimental in Kotlin 1.3. This means that in future releases it may be changed in ways that make it incompatible. To make the users of annotations &lt;code&gt;@Experimental&lt;/code&gt; and &lt;code&gt;UseExperimental&lt;/code&gt; aware of their experimental status, the compiler raises warnings when compiling the code with these annotations:</source>
          <target state="translated">実験的なAPIをマークして使用するための説明されたメカニズム自体は、Kotlin 1.3では実験的なものです。つまり、将来のリリースでは、互換性がなくなるように変更される可能性があります。アノテーション &lt;code&gt;@Experimental&lt;/code&gt; および &lt;code&gt;UseExperimental&lt;/code&gt; のユーザーに実験的なステータスを知らせるために、コンパイラーはこれらのアノテーションを使用してコードをコンパイルするときに警告を出します。</target>
        </trans-unit>
        <trans-unit id="cf37d613f63880e424569836a2ab82c0f6bbbfbf" translate="yes" xml:space="preserve">
          <source>The design of inline classes is experimental, meaning that this feature is &lt;em&gt;moving fast&lt;/em&gt; and no compatibility guarantees are given. When using inline classes in Kotlin 1.3+, a warning will be reported, indicating that this feature is experimental.</source>
          <target state="translated">インラインクラスの設計は実験的です。つまり、この機能は&lt;em&gt;高速で動作して&lt;/em&gt;おり、互換性の保証はありません。Kotlin 1.3以降でインラインクラスを使用すると、この機能が実験的であることを示す警告が報告されます。</target>
        </trans-unit>
        <trans-unit id="530e7472ee58bdd7a4958120705547c1d20c1ddf" translate="yes" xml:space="preserve">
          <source>The design of inline classes is in &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt;, meaning that no compatibility guarantees are given for future versions. When using inline classes in Kotlin 1.3+, a warning will be reported, indicating that this feature has not been released as stable.</source>
          <target state="translated">インラインクラスの設計は&lt;a href=&quot;evolution/components-stability&quot;&gt;アルファ&lt;/a&gt;版です。つまり、将来のバージョンでは互換性の保証はありません。Kotlin 1.3以降でインラインクラスを使用すると、この機能が安定版としてリリースされていないことを示す警告が報告されます。</target>
        </trans-unit>
        <trans-unit id="b65859994bf9d4a7fb5d934baaf88e39c3f04558" translate="yes" xml:space="preserve">
          <source>The design of unsigned types is experimental, meaning that this feature is moving fast and no compatibility guarantees are given. When using unsigned arithmetics in Kotlin 1.3+, warning will be reported, indicating that this feature is experimental. To remove warning, you have to opt-in for experimental usage of unsigned types.</source>
          <target state="translated">符号なし型の設計は実験的なものであり、この機能は高速に動いており、互換性は保証されていません。Kotlin 1.3+で符号なし演算器を使うと、この機能が実験的なものであることを示す警告が報告されます。警告を解除するには、実験的な利用を許可する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2b28866ac37f05ef8569c7d67a02f97e240cc06" translate="yes" xml:space="preserve">
          <source>The design of unsigned types is in &lt;a href=&quot;evolution/components-stability&quot;&gt;Beta&lt;/a&gt;, meaning that its compatibility is best-effort only and not guaranteed. When using unsigned arithmetics in Kotlin 1.3+, a warning will be reported, indicating that this feature has not been released as stable. To remove the warning, you have to opt in for usage of unsigned types.</source>
          <target state="translated">符号なしタイプの設計は&lt;a href=&quot;evolution/components-stability&quot;&gt;ベータ版です&lt;/a&gt;。つまり、互換性はベストエフォートのみであり、保証されていません。Kotlin 1.3以降で符号なし演算を使用すると、この機能が安定版としてリリースされていないことを示す警告が報告されます。警告を削除するには、符号なしタイプの使用をオプトインする必要があります。</target>
        </trans-unit>
        <trans-unit id="d36ceebc2800fee53f2de43e79177a2ecfc6f529" translate="yes" xml:space="preserve">
          <source>The detailed description includes:</source>
          <target state="translated">詳細な説明には、以下のような内容が含まれています。</target>
        </trans-unit>
        <trans-unit id="a0d2b5a6b59247ce3c2ac4eba75f43c56acf4c3d" translate="yes" xml:space="preserve">
          <source>The difference between the two functions is that &lt;code&gt;fold()&lt;/code&gt; takes an initial value and uses it as the accumulated value on the first step, whereas the first step of &lt;code&gt;reduce()&lt;/code&gt; uses the first and the second elements as operation arguments on the first step.</source>
          <target state="translated">2つの関数の違いは、 &lt;code&gt;fold()&lt;/code&gt; は初期値を取り、それを最初のステップの累積値として使用するのに対し、 &lt;code&gt;reduce()&lt;/code&gt; の最初のステップは、最初のステップの操作引数として最初と2番目の要素を使用することです。</target>
        </trans-unit>
        <trans-unit id="16d1b90dc650643e776a4004ab589d677449c331" translate="yes" xml:space="preserve">
          <source>The directories containing the source files to compile</source>
          <target state="translated">コンパイルするソースファイルを含むディレクトリ</target>
        </trans-unit>
        <trans-unit id="bc1f5875183536752507e833a15dca77307fd640" translate="yes" xml:space="preserve">
          <source>The duration equal to exactly 0 seconds.</source>
          <target state="translated">正確には0秒に等しい持続時間。</target>
        </trans-unit>
        <trans-unit id="be55f901bba5940c95d9f3540300cd294e976f5e" translate="yes" xml:space="preserve">
          <source>The duration whose value is positive infinity. It is useful for representing timeouts that should never expire.</source>
          <target state="translated">値が正の無限大である持続時間。期限切れにならないタイムアウトを表現するのに便利です。</target>
        </trans-unit>
        <trans-unit id="f28bb53a04db0fb8fa17ba4aa3c143de9bce62e3" translate="yes" xml:space="preserve">
          <source>The dynamic type is not supported in code targeting the JVM</source>
          <target state="translated">動的型は、JVMをターゲットとするコードではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="52d4bb2170c55ab0a1a89bfce15477357b84c2db" translate="yes" xml:space="preserve">
          <source>The dynamic type is not supported in code targeting the JVM.</source>
          <target state="translated">動的型は、JVMをターゲットとするコードではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="c1e94b86df57391ab40db234f4362544f610c993" translate="yes" xml:space="preserve">
          <source>The easiest way to create a new application targeting JavaScript with Maven is to allow IntelliJ IDEA to configure the Maven project for us. Simply create a new Maven project in IntelliJ IDEA and once the project is created, add a new folder to host the Kotlin source code, removing the default Java one. The project should end up with the following structure</source>
          <target state="translated">MavenでJavaScriptをターゲットにした新しいアプリケーションを作成する最も簡単な方法は、IntelliJ IDEAでMavenプロジェクトを設定できるようにすることです。IntelliJ IDEAで新しいMavenプロジェクトを作成し、プロジェクトが作成されたら、Kotlinのソースコードをホストする新しいフォルダを追加し、デフォルトのJavaを削除します。プロジェクトは次のような構造になっているはずです。</target>
        </trans-unit>
        <trans-unit id="2264c37021c9f341a22eceb595f57ba842a08e4c" translate="yes" xml:space="preserve">
          <source>The ecosystem of libraries for data-related tasks created by the Kotlin community is rapidly expanding. Here are some libraries that you may find useful:</source>
          <target state="translated">Kotlinコミュニティが作成したデータ関連のタスクのためのライブラリのエコシステムは急速に拡大しています。ここでは、便利なライブラリをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="171e3cf4fb89f709d12d970ce788f0d3a1e1b68e" translate="yes" xml:space="preserve">
          <source>The effect of computing the expression is:</source>
          <target state="translated">式を計算する効果があります。</target>
        </trans-unit>
        <trans-unit id="f34518faf7eb53cd2d65e3f4a6ad482c7e319fc7" translate="yes" xml:space="preserve">
          <source>The elapsed time is measured with &lt;a href=&quot;-time-source/-monotonic/index&quot;&gt;TimeSource.Monotonic&lt;/a&gt;.</source>
          <target state="translated">経過時間は&lt;a href=&quot;-time-source/-monotonic/index&quot;&gt;TimeSource.Monotonic&lt;/a&gt;で測定されます。</target>
        </trans-unit>
        <trans-unit id="79352142c1434a6d005be885bafaf8c579f79bc5" translate="yes" xml:space="preserve">
          <source>The elapsed time is measured with the specified &lt;code&gt;this&lt;/code&gt;&lt;a href=&quot;-time-source/index&quot;&gt;TimeSource&lt;/a&gt; instance.</source>
          <target state="translated">経過時間は、指定された &lt;code&gt;this&lt;/code&gt; &lt;a href=&quot;-time-source/index&quot;&gt;TimeSource&lt;/a&gt;インスタンスで測定されます。</target>
        </trans-unit>
        <trans-unit id="ff0a9ac30d7664a4e4282016eea87cab13969066" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;append-element#kotlin.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">要素は、指定された&lt;a href=&quot;append-element#kotlin.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt;関数で初期化されます。</target>
        </trans-unit>
        <trans-unit id="ce1f29bcecbea56cfc0df73010eb4304c4fe5856" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;append-element#kotlinx.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">要素は、指定された&lt;a href=&quot;append-element#kotlinx.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt;関数で初期化されます。</target>
        </trans-unit>
        <trans-unit id="d9a189a8bbd800a60d20579c11365537800d1c5b" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;create-element#kotlin.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">要素は、指定された&lt;a href=&quot;create-element#kotlin.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt;関数で初期化されます。</target>
        </trans-unit>
        <trans-unit id="e69844e5d432f0eaa41b42186566f5a77daafdeb" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;create-element#kotlinx.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">要素は、指定された&lt;a href=&quot;create-element#kotlinx.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt;関数で初期化されます。</target>
        </trans-unit>
        <trans-unit id="0a6537bfaccb8cddd8c481ef1fab76499f34a316" translate="yes" xml:space="preserve">
          <source>The element is initialized with the speicifed &lt;a href=&quot;append-element#kotlin.dom%24appendElement%28org.w3c.dom.Element%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">要素は特定の&lt;a href=&quot;append-element#kotlin.dom%24appendElement%28org.w3c.dom.Element%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;init&lt;/a&gt;関数で初期化されます。</target>
        </trans-unit>
        <trans-unit id="3c970d5af5c7c3d91e3eb72687259d2ce93c168c" translate="yes" xml:space="preserve">
          <source>The element is initialized with the speicifed &lt;a href=&quot;create-element#kotlin.dom%24createElement%28org.w3c.dom.Document%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">要素は特定の&lt;a href=&quot;create-element#kotlin.dom%24createElement%28org.w3c.dom.Document%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;init&lt;/a&gt;関数で初期化されます。</target>
        </trans-unit>
        <trans-unit id="4479436b9b0ce8aa0beac7c43130aa60627f658c" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">要素は、&lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;コレクションに表示される順序で追加されます。</target>
        </trans-unit>
        <trans-unit id="544e4fbca97528fef2325c3afe55cace763538a4" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">要素は、&lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;要素&lt;/a&gt;コレクションに表示される順序で追加されます。</target>
        </trans-unit>
        <trans-unit id="23022bf4214f0845c5b1a370815de8e19dc6515a" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">要素は、&lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;コレクションに表示される順序で追加されます。</target>
        </trans-unit>
        <trans-unit id="82095a92897d87f6ce531db50ce0bc12db68723f" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">要素は、&lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;要素&lt;/a&gt;コレクションに表示される順序で追加されます。</target>
        </trans-unit>
        <trans-unit id="daa9aa5d9ebd8b42b1bcdf3100554fd92ca03d09" translate="yes" xml:space="preserve">
          <source>The elements are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">要素は、&lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt;関数を使用して等しいかどうか比較されます。浮動小数点数の場合、 &lt;code&gt;NaN&lt;/code&gt; はそれ自体と等しく、 &lt;code&gt;-0.0&lt;/code&gt; は &lt;code&gt;0.0&lt;/code&gt; と等しくありません。</target>
        </trans-unit>
        <trans-unit id="aad20466e5a76028e3397e50e8845f24663b34cf" translate="yes" xml:space="preserve">
          <source>The elements are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">要素は、&lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt;関数と等しいかどうか比較されます。浮動小数点数の場合、 &lt;code&gt;NaN&lt;/code&gt; はそれ自体に等しく、 &lt;code&gt;-0.0&lt;/code&gt; は &lt;code&gt;0.0&lt;/code&gt; に等しくないことを意味します。</target>
        </trans-unit>
        <trans-unit id="f7d4f10d9d6ff53cf3cb02a56dcf3900dc9233c7" translate="yes" xml:space="preserve">
          <source>The elements in the resulting list are in the same order as they were in the source array.</source>
          <target state="translated">結果として得られるリストの要素は、元の配列に含まれていたものと同じ順番になります。</target>
        </trans-unit>
        <trans-unit id="4758b35da216c6ed38b8e3b01e9232e835ffdf62" translate="yes" xml:space="preserve">
          <source>The elements in the resulting list are in the same order as they were in the source collection.</source>
          <target state="translated">結果として得られるリストの要素は、ソース・コレクションにあったものと同じ順番で表示されます。</target>
        </trans-unit>
        <trans-unit id="925245d7080579f68b367dc0eefbb0c6350a2c59" translate="yes" xml:space="preserve">
          <source>The elements in the resulting sequence are in the same order as they were in the source sequence.</source>
          <target state="translated">結果として得られるシーケンスの要素は、元のシーケンスにあったものと同じ順番である。</target>
        </trans-unit>
        <trans-unit id="62f13d9c86bbfcad668fdecca43def6919a28064" translate="yes" xml:space="preserve">
          <source>The elements of other types are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">他のタイプの要素は、&lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt;関数を使用して等しいかどうか比較されます。浮動小数点数の場合、 &lt;code&gt;NaN&lt;/code&gt; はそれ自体と等しく、 &lt;code&gt;-0.0&lt;/code&gt; は &lt;code&gt;0.0&lt;/code&gt; と等しくありません。</target>
        </trans-unit>
        <trans-unit id="410a7c8a1416b4dffdf86f7b2fb29d1be03e7884" translate="yes" xml:space="preserve">
          <source>The elements of other types are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">他のタイプの要素は、&lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt;関数と等しいかどうか比較されます。浮動小数点数の場合、 &lt;code&gt;NaN&lt;/code&gt; はそれ自体に等しく、 &lt;code&gt;-0.0&lt;/code&gt; は &lt;code&gt;0.0&lt;/code&gt; に等しくないことを意味します。</target>
        </trans-unit>
        <trans-unit id="d2a1ff86475df89c5d0b4d977b7fdad8159958a2" translate="yes" xml:space="preserve">
          <source>The emitter can use a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt; operator that preserves this exception transparency and allows encapsulation of its exception handling. The body of the &lt;code&gt;catch&lt;/code&gt; operator can analyze an exception and react to it in different ways depending on which exception was caught:</source>
          <target state="translated">エミッターは、この例外の透過性を維持し、例外処理のカプセル化を可能にする&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt;演算子を使用できます。 &lt;code&gt;catch&lt;/code&gt; オペレーターの本体は、例外を分析し、キャッチされた例外に応じてさまざまな方法でそれに反応することができます。</target>
        </trans-unit>
        <trans-unit id="bb685b2c6e5acf402eac7fe67da99cd138309729" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">&lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;範囲&lt;/a&gt;の終了インデックスは、削除された部分に含まれます。</target>
        </trans-unit>
        <trans-unit id="11df9d3925f0418a6e38aed874d509daf4025048" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.String%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">&lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.String%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;範囲&lt;/a&gt;の終了インデックスは、削除された部分に含まれます。</target>
        </trans-unit>
        <trans-unit id="67fcbb6ac3e2a5c62cd2e430c9777a067763d923" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.CharSequence,%20kotlin.ranges.IntRange)/range&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">&lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.CharSequence,%20kotlin.ranges.IntRange)/range&quot;&gt;範囲&lt;/a&gt;の終了インデックスは、削除された部分に含まれています。</target>
        </trans-unit>
        <trans-unit id="7aa81f1705dd0f516aa78c926061ad0c0bdec167" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.String,%20kotlin.ranges.IntRange)/range&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">&lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.String,%20kotlin.ranges.IntRange)/range&quot;&gt;範囲&lt;/a&gt;の終了インデックスは、削除された部分に含まれています。</target>
        </trans-unit>
        <trans-unit id="88ef0ef1c8adfc13f79b17d279153b4deca66c2a" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;範囲&lt;/a&gt;の終了インデックスは、置き換えられるパーツに含まれます。</target>
        </trans-unit>
        <trans-unit id="110043ac6542bd5ea84cfa58a2ba979b14417af8" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.String%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.String%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;範囲&lt;/a&gt;の終了インデックスは、置き換えられるパーツに含まれます。</target>
        </trans-unit>
        <trans-unit id="265808d7f064c65b3e4484a504c21278573abe5f" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.CharSequence,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.CharSequence,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;範囲&lt;/a&gt;の終了インデックスは、交換されるパーツに含まれています。</target>
        </trans-unit>
        <trans-unit id="2757b02f416ac5f1c57fe37f28ebb5f19a2beb88" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.String,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.String,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;範囲&lt;/a&gt;の終了インデックスは、交換されるパーツに含まれています。</target>
        </trans-unit>
        <trans-unit id="d2bb3fe28b22f0be53eb5ccfae4478026ce71334" translate="yes" xml:space="preserve">
          <source>The entity which has an associated native pointer. Subtypes are supposed to represent interpretations of the pointed data or code.</source>
          <target state="translated">関連するネイティブポインタを持つ実体。サブタイプは、ポイントされたデータやコードの解釈を表すことになっています。</target>
        </trans-unit>
        <trans-unit id="3e04fcff376865a32dde7dae672ab9789090a9b8" translate="yes" xml:space="preserve">
          <source>The entry point function for executable binaries. By default, it's &lt;code&gt;main()&lt;/code&gt; in the root package.</source>
          <target state="translated">実行可能バイナリのエントリポイント関数。デフォルトでは、ルートパッケージの &lt;code&gt;main()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2c6bd81b6f529ef522b5222f238d9ced96f1bfdb" translate="yes" xml:space="preserve">
          <source>The enum constants also implement the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-comparable/index&quot;&gt;Comparable&lt;/a&gt; interface, with the natural order being the order in which they are defined in the enum class.</source>
          <target state="translated">enum定数は&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-comparable/index&quot;&gt;Comparable&lt;/a&gt;インターフェースも実装し、自然順序はenumクラスで定義された順序です。</target>
        </trans-unit>
        <trans-unit id="1f86188b4a8b45564220a022aed934fe72f40d6e" translate="yes" xml:space="preserve">
          <source>The example above shows the difference: &lt;code&gt;fold()&lt;/code&gt; is used for calculating the sum of doubled elements. If you pass the same function to &lt;code&gt;reduce()&lt;/code&gt;, it will return another result because it uses the list's first and second elements as arguments on the first step, so the first element won't be doubled.</source>
          <target state="translated">上記の例は違いを示しています &lt;code&gt;fold()&lt;/code&gt; は、2倍の要素の合計を計算するために使用されます。同じ関数を &lt;code&gt;reduce()&lt;/code&gt; に渡すと、リストの最初と2番目の要素を最初のステップの引数として使用するため、別の結果が返され、最初の要素は2倍になりません。</target>
        </trans-unit>
        <trans-unit id="b596f3f6b2203ee7818d443ce1a3eb3a2049daee" translate="yes" xml:space="preserve">
          <source>The example above will work for Android libraries with no product flavors. For a library with product flavors, the variant names also contain the flavors, like &lt;code&gt;fooBarDebug&lt;/code&gt; or &lt;code&gt;fooBazRelease&lt;/code&gt;.</source>
          <target state="translated">上記の例は、製品フレーバーのないAndroidライブラリで機能します。製品フレーバーを持つライブラリーの場合、バリアント名には &lt;code&gt;fooBarDebug&lt;/code&gt; や &lt;code&gt;fooBazRelease&lt;/code&gt; などのフレーバーも含まれます。</target>
        </trans-unit>
        <trans-unit id="2034baca1648e38acba659c7ed9ab52779def3a9" translate="yes" xml:space="preserve">
          <source>The example of using &lt;code&gt;convert&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;convert&lt;/code&gt; の使用例：</target>
        </trans-unit>
        <trans-unit id="e3355465d3cb3b6a452d6af446afe351cd4d8a18" translate="yes" xml:space="preserve">
          <source>The example works for Android libraries without &lt;a href=&quot;https://developer.android.com/studio/build/build-variants#product-flavors&quot;&gt;product flavors&lt;/a&gt;. For a library with product flavors, the variant names also contain the flavors, like &lt;code&gt;fooBarDebug&lt;/code&gt; or &lt;code&gt;fooBazRelease&lt;/code&gt;.</source>
          <target state="translated">この例は、&lt;a href=&quot;https://developer.android.com/studio/build/build-variants#product-flavors&quot;&gt;製品フレーバーの&lt;/a&gt;ないAndroidライブラリで機能します。製品フレーバーのあるライブラリの場合、バリアント名には &lt;code&gt;fooBarDebug&lt;/code&gt; や &lt;code&gt;fooBazRelease&lt;/code&gt; などのフレーバーも含まれます。</target>
        </trans-unit>
        <trans-unit id="de730ff080513a1697957b51012ee307f16f42d8" translate="yes" xml:space="preserve">
          <source>The exception refers to the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-on.html&quot;&gt;flowOn&lt;/a&gt; function that shall be used to change the context of the flow emission. The correct way to change the context of a flow is shown in the example below, which also prints the names of the corresponding threads to show how it all works:</source>
          <target state="translated">例外は、フローエミッションのコンテキストを変更するために使用される&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-on.html&quot;&gt;flowOn&lt;/a&gt;関数を指します。フローのコンテキストを変更する正しい方法を以下の例に示します。この例では、対応するスレッドの名前も出力して、すべてがどのように機能するかを示しています。</target>
        </trans-unit>
        <trans-unit id="18829b154c907ba2a13646994ee9e04f0d08452d" translate="yes" xml:space="preserve">
          <source>The exception thrown when a character encoding or decoding error occurs.</source>
          <target state="translated">文字エンコーディングまたはデコーディングエラーが発生した場合にスローされる例外。</target>
        </trans-unit>
        <trans-unit id="15573b104c4da364167fd1f5ed5ef94aba8df42c" translate="yes" xml:space="preserve">
          <source>The experimental marker for associated objects API.</source>
          <target state="translated">関連オブジェクトAPIの実験的マーカー。</target>
        </trans-unit>
        <trans-unit id="6d95121d07b3626cf990aefa17a36910bfcf4f29" translate="yes" xml:space="preserve">
          <source>The experimental marker for type inference augmenting annotations.</source>
          <target state="translated">アノテーションを補強する型推論のための実験的マーカー。</target>
        </trans-unit>
        <trans-unit id="deb8aac7cf53fe1202db4a3293685d56f19ee1b3" translate="yes" xml:space="preserve">
          <source>The experimental multiplatform support API marker.</source>
          <target state="translated">実験的なマルチプラットフォーム対応APIマーカー。</target>
        </trans-unit>
        <trans-unit id="0428313ba384ac9c0b8833c120ad8f95ce4ede3d" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;::x&lt;/code&gt; evaluates to a property object of type &lt;code&gt;KProperty&amp;lt;Int&amp;gt;&lt;/code&gt;, which allows us to read its value using &lt;code&gt;get()&lt;/code&gt; or retrieve the property name using the &lt;code&gt;name&lt;/code&gt; property. For more information, please refer to the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-property/index&quot;&gt;docs on the &lt;code&gt;KProperty&lt;/code&gt; class&lt;/a&gt;.</source>
          <target state="translated">式 &lt;code&gt;::x&lt;/code&gt; は、タイプ &lt;code&gt;KProperty&amp;lt;Int&amp;gt;&lt;/code&gt; プロパティオブジェクトに評価されます。これにより、 &lt;code&gt;get()&lt;/code&gt; を使用してその値を読み取るか、 &lt;code&gt;name&lt;/code&gt; プロパティを使用してプロパティ名を取得できます。詳細について&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-property/index&quot;&gt;は、 &lt;code&gt;KProperty&lt;/code&gt; クラスのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9763a942f3f5fe1ee65c354fc7379c3f68a833e5" translate="yes" xml:space="preserve">
          <source>The fall-through behavior inside &lt;code&gt;when&lt;/code&gt; is subject to further design.</source>
          <target state="translated">フォールスルー行動内部の &lt;code&gt;when&lt;/code&gt; さらに、設計の対象となります。</target>
        </trans-unit>
        <trans-unit id="993743ac3189d9caa30dab313cb6712bc1755441" translate="yes" xml:space="preserve">
          <source>The fat framework must have the same base name as the initial frameworks.</source>
          <target state="translated">fatフレームワークは、初期フレームワークと同じベース名を持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="788ff064b8ecef1f248204a84772fdfe4508eee7" translate="yes" xml:space="preserve">
          <source>The file is missing the &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; block, which is not needed for our example, but may be necessary if we use C++ and overloaded functions. The &lt;a href=&quot;https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c&quot;&gt;C++ compatibility&lt;/a&gt; thread contains more details on this.</source>
          <target state="translated">このファイルには &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; ブロックがありません。この例では必要ありませんが、C ++とオーバーロードされた関数を使用する場合は必要になることがあります。&lt;a href=&quot;https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c&quot;&gt;C ++の互換性の&lt;/a&gt;スレッドがこのについての詳細が含まれています。</target>
        </trans-unit>
        <trans-unit id="2828031dfb85b70cc7191c0b9ade03e3586cc60a" translate="yes" xml:space="preserve">
          <source>The file system locations for the Java sources are different from the &lt;code&gt;java&lt;/code&gt; plugin's defaults. The Java source files need to be placed in the sibling directories of the Kotlin source roots. For example, if the JVM target has the default name &lt;code&gt;jvm&lt;/code&gt;, the paths are:</source>
          <target state="translated">Javaソースのファイルシステムの場所が異なっている &lt;code&gt;java&lt;/code&gt; プラグインのデフォルト設定。Javaソースファイルは、Kotlinソースルートの兄弟ディレクトリに配置する必要があります。たとえば、JVMターゲットのデフォルト名が &lt;code&gt;jvm&lt;/code&gt; の場合、パスは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a63cb5acdae60d6976d603a52addbcfa0b41167c" translate="yes" xml:space="preserve">
          <source>The file we're mostly interested in is &lt;code&gt;ConsoleOutput.js&lt;/code&gt;</source>
          <target state="translated">私たちが最も関心のあるファイルは &lt;code&gt;ConsoleOutput.js&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="b2c228ca59fbecd7257e251a141cb2c1718c2ba0" translate="yes" xml:space="preserve">
          <source>The final code in the &lt;code&gt;hello.kt&lt;/code&gt; file may look like that:</source>
          <target state="translated">&lt;code&gt;hello.kt&lt;/code&gt; ファイルの最終的なコードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="994c32d45d717275b8093d1a6c05a756a3faeb93" translate="yes" xml:space="preserve">
          <source>The final code in the &lt;code&gt;hello.kt&lt;/code&gt; file may look like this:</source>
          <target state="translated">&lt;code&gt;hello.kt&lt;/code&gt; ファイルの最終的なコードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="845eeef01520a4662cdfbe660097ba30ecf3f4fb" translate="yes" xml:space="preserve">
          <source>The final step is to define the actual compilation of the project, which uses the standard IntelliJ IDEA Runner Type</source>
          <target state="translated">最後のステップは、プロジェクトの実際のコンパイルを定義することで、標準のIntelliJ IDEAランナータイプを使用します。</target>
        </trans-unit>
        <trans-unit id="64ebebb6a3a3dfec1d013df86e5fccb457a8633c" translate="yes" xml:space="preserve">
          <source>The final step is to make Xcode call our Gradle build to prepare the &lt;code&gt;SharedCode&lt;/code&gt; framework before each run. We open the &lt;em&gt;Build Phases&lt;/em&gt; tab and click &lt;code&gt;+&lt;/code&gt; to add the &lt;em&gt;New Run Script Phase&lt;/em&gt; and add the following code into it:</source>
          <target state="translated">最後のステップは、XcodeがGradleビルドを呼び出して、実行する前に &lt;code&gt;SharedCode&lt;/code&gt; フレームワークを準備することです。[ &lt;em&gt;ビルドフェーズ&lt;/em&gt; ]タブを開き、[ &lt;code&gt;+&lt;/code&gt; ]をクリックして&lt;em&gt;新しい実行スクリプトフェーズ&lt;/em&gt;を追加し、それに次のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="18cac2860812daece2680c18729b8285d0c95c2d" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;this&lt;/code&gt; refers to &lt;code&gt;maybeNull&lt;/code&gt;, the second one refers to the result of &lt;code&gt;firstFunction()&lt;/code&gt;, and &lt;code&gt;result&lt;/code&gt; will be the result of &lt;code&gt;secondFunction()&lt;/code&gt; (or null if &lt;code&gt;maybeNull&lt;/code&gt; or any of the intermediate results were null).</source>
          <target state="translated">最初 &lt;code&gt;this&lt;/code&gt; を意味 &lt;code&gt;maybeNull&lt;/code&gt; 、もう一つは結果を参照 &lt;code&gt;firstFunction()&lt;/code&gt; 、及び &lt;code&gt;result&lt;/code&gt; 結果になり &lt;code&gt;secondFunction()&lt;/code&gt; (場合はnull &lt;code&gt;maybeNull&lt;/code&gt; 又は中間結果のいずれかがNULLでした）。</target>
        </trans-unit>
        <trans-unit id="4fdd8b62987d88f8c4db3a2a41e10fc4d1887b5c" translate="yes" xml:space="preserve">
          <source>The first argument in this example allows one to set a name prefix for the created binaries which is used to access them in the buildscript (see the &lt;a href=&quot;#accessing-binaries&quot;&gt;&quot;Accessing binaries&quot;&lt;/a&gt; section). Also this prefix is used as a default name for the binary file. For example on Windows the sample above produces files &lt;code&gt;foo.exe&lt;/code&gt; and &lt;code&gt;bar.exe&lt;/code&gt;.</source>
          <target state="translated">この例の最初の引数を使用すると、作成されたバイナリの名前プレフィックスを設定できます。これは、ビルドスクリプトでそれらにアクセスするために使用されます（&lt;a href=&quot;#accessing-binaries&quot;&gt;「バイナリへのアクセス」&lt;/a&gt;セクションを参照）。また、この接頭辞はバイナリファイルのデフォルト名として使用されます。たとえばWindowsでは、上記のサンプルはファイル &lt;code&gt;foo.exe&lt;/code&gt; および &lt;code&gt;bar.exe&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="ab7ad2adf8e4b67a975c2aa2a67b21c251d16be6" translate="yes" xml:space="preserve">
          <source>The first argument sets a name prefix, which is the default name for the binary file. For example, for Windows the code produces the files &lt;code&gt;foo.exe&lt;/code&gt; and &lt;code&gt;bar.exe&lt;/code&gt;. You can also use the name prefix to &lt;a href=&quot;#access-binaries&quot;&gt;access the binary in the build script&lt;/a&gt;.</source>
          <target state="translated">最初の引数は、バイナリファイルのデフォルト名である名前プレフィックスを設定します。たとえば、Windowsの場合、コードは &lt;code&gt;foo.exe&lt;/code&gt; ファイルと &lt;code&gt;bar.exe&lt;/code&gt; ファイルを生成します。名前プレフィックスを使用&lt;a href=&quot;#access-binaries&quot;&gt;して、ビルドスクリプトのバイナリにアクセス&lt;/a&gt;することもできます。</target>
        </trans-unit>
        <trans-unit id="2fc302c51d198c918ae55a3c30c065988889b3c8" translate="yes" xml:space="preserve">
          <source>The first call in the chain usually should have a line break before it, but it's OK to omit it if the code makes more sense that way.</source>
          <target state="translated">チェーンの最初の呼び出しは通常、その前に改行を入れるべきですが、その方がコードに意味があるのであれば、それを省略しても構いません。</target>
        </trans-unit>
        <trans-unit id="7d42226ff723442296e308591a35f8828357046e" translate="yes" xml:space="preserve">
          <source>The first coroutine has the &lt;strong&gt;SUSPENDED&lt;/strong&gt; status &amp;ndash; it is waiting for the values so it can multiply them.</source>
          <target state="translated">最初のコルーチンのステータスは&lt;strong&gt;SUSPENDED&lt;/strong&gt;です。値を乗算できるように、値を待機しています。</target>
        </trans-unit>
        <trans-unit id="b4e33fae8e821602ad4182a2f8cd98570f5752fb" translate="yes" xml:space="preserve">
          <source>The first element in the progression.</source>
          <target state="translated">進行の最初の要素。</target>
        </trans-unit>
        <trans-unit id="f74c962485a9f3f35870c553a197b5ef319d5a35" translate="yes" xml:space="preserve">
          <source>The first example mixes &lt;em&gt;non-blocking&lt;/em&gt;&lt;code&gt;delay(...)&lt;/code&gt; and &lt;em&gt;blocking&lt;/em&gt;&lt;code&gt;Thread.sleep(...)&lt;/code&gt; in the same code. It is easy to lose track of which one is blocking and which one is not. Let's be explicit about blocking using &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine builder:</source>
          <target state="translated">最初の例では、同じコードで&lt;em&gt;非ブロッキング&lt;/em&gt; &lt;code&gt;delay(...)&lt;/code&gt; と&lt;em&gt;ブロッキング&lt;/em&gt; &lt;code&gt;Thread.sleep(...)&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;組み合わせています。どちらがブロックしているか、どちらがブロックしていないかを見失うのは簡単です。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;コルーチンビルダーを使用したブロッキングについて明示的にしましょう。</target>
        </trans-unit>
        <trans-unit id="1aa4bbc7c819801ad00e125d4e56e82f4c2f67c5" translate="yes" xml:space="preserve">
          <source>The first example mixes &lt;em&gt;non-blocking&lt;/em&gt;&lt;code&gt;delay(...)&lt;/code&gt; and &lt;em&gt;blocking&lt;/em&gt;&lt;code&gt;Thread.sleep(...)&lt;/code&gt; in the same code. It is easy to lose track of which one is blocking and which one is not. Let's be explicit about blocking using the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine builder:</source>
          <target state="translated">最初の例では、&lt;em&gt;非ブロッキング&lt;/em&gt; &lt;code&gt;delay(...)&lt;/code&gt; と&lt;em&gt;ブロッキング&lt;/em&gt; &lt;code&gt;Thread.sleep(...)&lt;/code&gt; を同じコードに混在させています。どちらがブロックしていて、どれがブロックしていないかを見失うことは簡単です。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;コルーチンビルダーを使用したブロッキングについて明示的にしましょう。</target>
        </trans-unit>
        <trans-unit id="b2d66cf460f6f78061ad6d5f7262d3436e850f41" translate="yes" xml:space="preserve">
          <source>The first extension takes a &lt;code&gt;char *&lt;/code&gt; as a UTF-8 string and turns it into a String. The second function does the same but for wide UTF-16 strings.</source>
          <target state="translated">最初の拡張は &lt;code&gt;char *&lt;/code&gt; をUTF-8文字列として取り、それを文字列に変換します。2番目の関数は同じことを行いますが、ワイドUTF-16文字列に対してです。</target>
        </trans-unit>
        <trans-unit id="60455f009d759b3a711a0c86694ca0f8e3417539" translate="yes" xml:space="preserve">
          <source>The first four elements are added to the buffer and the sender suspends when trying to send the fifth one.</source>
          <target state="translated">最初の4つの要素がバッファに追加され、5つ目の要素を送ろうとすると送信者がサスペンドします。</target>
        </trans-unit>
        <trans-unit id="ab32e32b6495f8ef1ecac2deb728551ecd768355" translate="yes" xml:space="preserve">
          <source>The first function is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/flatten&quot;&gt;&lt;code&gt;flatten()&lt;/code&gt;&lt;/a&gt;. You can call it on a collection of collections, for example, a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Set&lt;/code&gt;s. The function returns a single &lt;code&gt;List&lt;/code&gt; of all the elements of the nested collections.</source>
          <target state="translated">最初の関数は&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/flatten&quot;&gt; &lt;code&gt;flatten()&lt;/code&gt; &lt;/a&gt;です。コレクションのコレクション、たとえば &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Set&lt;/code&gt; で呼び出すことができます。この関数は、ネストされたコレクションのすべての要素の単一の &lt;code&gt;List&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bb9b81609c647210d6aacd108c4c1230b4870b5f" translate="yes" xml:space="preserve">
          <source>The first line of the input contains two integers &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;</source>
          <target state="translated">入力の最初の行には2つの整数 &lt;code&gt;n&lt;/code&gt; と &lt;code&gt;k&lt;/code&gt; が含まれています</target>
        </trans-unit>
        <trans-unit id="a973365d252e2f2156e9bff5ffce49da12fd36a5" translate="yes" xml:space="preserve">
          <source>The first list contains the first elements of each &lt;code&gt;Pair&lt;/code&gt; in the original list.</source>
          <target state="translated">最初のリストには、元のリストの各 &lt;code&gt;Pair&lt;/code&gt; 最初の要素が含まれています。</target>
        </trans-unit>
        <trans-unit id="79bda60284dc4aa80a7917505f3968fd9009f668" translate="yes" xml:space="preserve">
          <source>The first step of using an actor is to define a class of messages that an actor is going to process. Kotlin's &lt;a href=&quot;../sealed-classes&quot;&gt;sealed classes&lt;/a&gt; are well suited for that purpose. We define &lt;code&gt;CounterMsg&lt;/code&gt; sealed class with &lt;code&gt;IncCounter&lt;/code&gt; message to increment a counter and &lt;code&gt;GetCounter&lt;/code&gt; message to get its value. The later needs to send a response. A &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/index.html&quot;&gt;CompletableDeferred&lt;/a&gt; communication primitive, that represents a single value that will be known (communicated) in the future, is used here for that purpose.</source>
          <target state="translated">アクターを使用する最初のステップは、アクターが処理するメッセージのクラスを定義することです。Kotlinの&lt;a href=&quot;../sealed-classes&quot;&gt;シールドクラス&lt;/a&gt;は、その目的に適しています。カウンターをインクリメントするための &lt;code&gt;IncCounter&lt;/code&gt; メッセージとその値を取得するための &lt;code&gt;GetCounter&lt;/code&gt; メッセージを使用して、 &lt;code&gt;CounterMsg&lt;/code&gt; 密封クラスを定義します。後者は応答を送信する必要があります。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/index.html&quot;&gt;CompletableDeferredの&lt;/a&gt;将来において知られている（連通）される単一の値を表すプリミティブの通信は、その目的のためにここで使用されます。</target>
        </trans-unit>
        <trans-unit id="38481ec6d5c41bf35d07d09bc7535247f80dee43" translate="yes" xml:space="preserve">
          <source>The first thing we'll need is a Kotlin file called &lt;code&gt;src/nativeMain/kotlin/hello.kt&lt;/code&gt; with the &lt;code&gt;main&lt;/code&gt; function defined in it and then proceed to translate each line</source>
          <target state="translated">最初に必要なのは、 &lt;code&gt;main&lt;/code&gt; 関数が定義された &lt;code&gt;src/nativeMain/kotlin/hello.kt&lt;/code&gt; というKotlinファイルで、各行の翻訳に進みます。</target>
        </trans-unit>
        <trans-unit id="804c8326e52e09959a1fbeb61a10298b8d1c200d" translate="yes" xml:space="preserve">
          <source>The following API elements have been moved to the common library:</source>
          <target state="translated">以下のAPI要素は共通ライブラリに移動しました。</target>
        </trans-unit>
        <trans-unit id="6f6aa8f820f0284bd28697b0207de3b2578af79f" translate="yes" xml:space="preserve">
          <source>The following attributes are supported:</source>
          <target state="translated">以下の属性がサポートされています。</target>
        </trans-unit>
        <trans-unit id="d555f20ea9bbf2028964527e2711757cec45ebd4" translate="yes" xml:space="preserve">
          <source>The following code launches a long-running coroutine in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; that prints &quot;I'm sleeping&quot; twice a second and then returns from the main function after some delay:</source>
          <target state="translated">次のコードは、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt;で実行時間の長いコルーチンを起動し、「I'm Sleeping」を1秒に2回出力し、しばらくしてからメイン関数から戻ります。</target>
        </trans-unit>
        <trans-unit id="ead88ea1dd6b3e545d54d2d74bc4d103e0cfff51" translate="yes" xml:space="preserve">
          <source>The following commands are available.</source>
          <target state="translated">以下のコマンドが利用できます。</target>
        </trans-unit>
        <trans-unit id="55be4cb42f91b956f18957a0a075265fb24672f6" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this concept:</source>
          <target state="translated">次の例は、この概念を示しています。</target>
        </trans-unit>
        <trans-unit id="40d8cb89ac87b573a486f4f8fe49663dde1297b2" translate="yes" xml:space="preserve">
          <source>The following example prints the first ten prime numbers, running the whole pipeline in the context of the main thread. Since all the coroutines are launched in the scope of the main &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine we don't have to keep an explicit list of all the coroutines we have started. We use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/kotlin.coroutines.-coroutine-context/cancel-children.html&quot;&gt;cancelChildren&lt;/a&gt; extension function to cancel all the children coroutines after we have printed the first ten prime numbers.</source>
          <target state="translated">次の例では、メインスレッドのコンテキストでパイプライン全体を実行して、最初の10個の素数を出力します。すべてのコルーチンはメインの&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;コルーチンのスコープ内で起動されるため、開始したすべてのコルーチンの明示的なリストを保持する必要はありません。最初の10個の素数を出力した後、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/kotlin.coroutines.-coroutine-context/cancel-children.html&quot;&gt;cancelChildren&lt;/a&gt;拡張関数を使用してすべての子コルーチンをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="9f818012b8152abe166a094d93ab2ca0ec79eab1" translate="yes" xml:space="preserve">
          <source>The following example shows how to use these settings.</source>
          <target state="translated">以下の例では、これらの設定を使用する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="29c80399d536894a6ec94c527a731166260c49c2" translate="yes" xml:space="preserve">
          <source>The following example shows their use outside of coroutine:</source>
          <target state="translated">以下の例では、コルーチン以外での使用例を示しています。</target>
        </trans-unit>
        <trans-unit id="b39c4c0b095563ff59ef483ec27836f8b662f2fa" translate="yes" xml:space="preserve">
          <source>The following examples show different possibilities of configuring the Gradle plugin:</source>
          <target state="translated">以下の例では、Gradle プラグインを設定するためのさまざまな可能性を示しています。</target>
        </trans-unit>
        <trans-unit id="e712d7790d39e907b7ee7e8cb60e61e0c86b31e2" translate="yes" xml:space="preserve">
          <source>The following identifiers are defined by the compiler in specific contexts and can be used as regular identifiers in other contexts:</source>
          <target state="translated">以下の識別子は、特定のコンテキストでコンパイラによって定義され、他のコンテキストでは通常の識別子として使用することができます。</target>
        </trans-unit>
        <trans-unit id="bf95dedf99c3841e1d5196a0ba2d969912347f7d" translate="yes" xml:space="preserve">
          <source>The following is an example interface of the JDK implemented by &lt;code&gt;StringBuilder&lt;/code&gt; class:</source>
          <target state="translated">以下は、 &lt;code&gt;StringBuilder&lt;/code&gt; クラスによって実装されるJDKのインターフェースの例です。</target>
        </trans-unit>
        <trans-unit id="3270b513d23150d33c43f1294cdabc39fc329d50" translate="yes" xml:space="preserve">
          <source>The following options are common for all Kotlin compilers.</source>
          <target state="translated">以下のオプションはすべてのKotlinコンパイラに共通です。</target>
        </trans-unit>
        <trans-unit id="8e29598dc88ea6b0ec70ab50aa2a4cfa741c6e7f" translate="yes" xml:space="preserve">
          <source>The following pipeline stage filters an incoming stream of numbers, removing all the numbers that are divisible by the given prime number:</source>
          <target state="translated">次のパイプラインステージは、入力された数のストリームをフィルタリングし、与えられた素数で割り切れるすべての数を削除します。</target>
        </trans-unit>
        <trans-unit id="29b7ef083a5e449cb9ecea68dfa0ae64024fefca" translate="yes" xml:space="preserve">
          <source>The following podspec fields are required by CocoaPods:</source>
          <target state="translated">CocoaPodsでは、以下のpodspecフィールドが必須となります。</target>
        </trans-unit>
        <trans-unit id="21b0584d86535ffda98821a37bb76687f7207959" translate="yes" xml:space="preserve">
          <source>The following sections explain in more detail the concepts mentioned so far.</source>
          <target state="translated">以下では、これまでに述べた概念をより詳細に説明する。</target>
        </trans-unit>
        <trans-unit id="74efddf743e09c3574933d597d99624d7eb3e501" translate="yes" xml:space="preserve">
          <source>The following snippet creates two executable binaries: debug and release.</source>
          <target state="translated">以下のスニペットは、デバッグとリリースの2つの実行バイナリを作成します。</target>
        </trans-unit>
        <trans-unit id="5472a88e6462dc9e30567cf6b7a816998c79c200" translate="yes" xml:space="preserve">
          <source>The following tokens act as keywords in modifier lists of declarations and can be used as identifiers in other contexts:</source>
          <target state="translated">以下のトークンは、宣言の修飾子リストのキーワードとして機能し、他のコンテキストで識別子として使用することができます。</target>
        </trans-unit>
        <trans-unit id="c62886b027ba800287b4be18a333a156fdeb309b" translate="yes" xml:space="preserve">
          <source>The following tokens act as keywords in the context when they are applicable and can be used as identifiers in other contexts:</source>
          <target state="translated">以下のトークンは、該当する場合にはコンテキスト内のキーワードとして動作し、他のコンテキストでは識別子として使用することができます。</target>
        </trans-unit>
        <trans-unit id="71c4c5ec356525034ad2f877a92ba2dfdfffc609" translate="yes" xml:space="preserve">
          <source>The following tokens are always interpreted as keywords and cannot be used as identifiers:</source>
          <target state="translated">以下のトークンは常にキーワードとして解釈され、識別子として使用することはできません。</target>
        </trans-unit>
        <trans-unit id="0493d41eaaff9f9930d4990e582a0014dff8b09e" translate="yes" xml:space="preserve">
          <source>The following workflow is expected when interacting with the native library.</source>
          <target state="translated">ネイティブライブラリとの対話では、以下のようなワークフローが想定されます。</target>
        </trans-unit>
        <trans-unit id="41bde8cb095fdaa39e87c44d34bec8992402e368" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分がある場合は、ゼロに向かって切り捨てられます。この &lt;code&gt;Double&lt;/code&gt; 値が &lt;code&gt;NaN&lt;/code&gt; の場合はゼロを返し、&lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUEより小さい&lt;/a&gt;場合は &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; 、&lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt;より大きい場合は &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b7dbd577dd676bd08f82b2f5d51d9ac8e4bfc959" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分がある場合は、ゼロに向かって切り捨てられます。この &lt;code&gt;Double&lt;/code&gt; 値が &lt;code&gt;NaN&lt;/code&gt; の場合はゼロを返し、&lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt;より小さい場合は &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; 、&lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt;より大きい場合は &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7c24376936f310cfc6a2b02ee789c1ab9c4a079c" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分がある場合は、ゼロに向かって切り捨てられます。この場合はゼロを返します &lt;code&gt;Double&lt;/code&gt; 値が負または &lt;code&gt;NaN&lt;/code&gt; で、&lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt;それはよりも大きいかどう &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19ac86b4bcb26b195d587cd10aa019f5e68922bb" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分がある場合は、ゼロに向かって切り捨てられます。この場合はゼロを返します &lt;code&gt;Double&lt;/code&gt; 値が負または &lt;code&gt;NaN&lt;/code&gt; で、&lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt;それはよりも大きいかどう &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a03b953ac3fd08a46517db9b02880729ef0942e5" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分がある場合は、ゼロに向かって切り捨てられます。この &lt;code&gt;Float&lt;/code&gt; 値が &lt;code&gt;NaN&lt;/code&gt; の場合はゼロを返し、&lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUEより小さい&lt;/a&gt;場合は &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; 、&lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt;より大きい場合は &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f8f1f7669eb111859c7b969d69798041d2a9b37e" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分がある場合は、ゼロに向かって切り捨てられます。この &lt;code&gt;Float&lt;/code&gt; 値が &lt;code&gt;NaN&lt;/code&gt; の場合はゼロを返し、&lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt;より小さい場合は &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; 、&lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt;より大きい場合は &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="43741e55696c4613d380e3f315ef0bfbfc2d96be" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分がある場合は、ゼロに向かって切り捨てられます。この場合の戻り値はゼロ &lt;code&gt;Float&lt;/code&gt; 値が負かで &lt;code&gt;NaN&lt;/code&gt; 、&lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt;それはよりも大きいかどう &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3fd2c9a0fe0f333063fc214dadef0239e9bff9de" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分がある場合は、ゼロに向かって切り捨てられます。この場合の戻り値はゼロ &lt;code&gt;Float&lt;/code&gt; 値が負かで &lt;code&gt;NaN&lt;/code&gt; 、&lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt;それはよりも大きいかどう &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46d230bab2ec3e41d052e1e397afc7cc1e96642c" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部がある場合は、切り捨てられます。この &lt;code&gt;Double&lt;/code&gt; 値が &lt;code&gt;NaN&lt;/code&gt; の場合はゼロを返し、&lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUEより小さい&lt;/a&gt;場合は &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; を返し、&lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt;より大きい場合は &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c7c04cb487d62c119eaf78735ad59d58fbbea7f7" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部がある場合は、切り捨てられます。この &lt;code&gt;Double&lt;/code&gt; 値が &lt;code&gt;NaN&lt;/code&gt; の場合はゼロを返し、&lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt;より小さい場合は &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; を返し、&lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt;より大きい場合は &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="986d603361e48796a38eb31b882249f0e0fb1907" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部がある場合は、切り捨てられます。この &lt;code&gt;Double&lt;/code&gt; 値が負の場合はゼロを返し、それが &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; より大きい場合は &lt;code&gt;NaN&lt;/code&gt; 、&lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUEを&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="db89446a546caa08c045751959e85b9b42af6661" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部がある場合は、切り捨てられます。この場合はゼロを返します &lt;code&gt;Double&lt;/code&gt; 値が負または &lt;code&gt;NaN&lt;/code&gt; で、&lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt;それはよりも大きいかどう &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c0d7df43097a38a432b999c674eaa178ec96a50" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部がある場合は、切り捨てられます。この &lt;code&gt;Float&lt;/code&gt; 値が &lt;code&gt;NaN&lt;/code&gt; の場合はゼロを返し、&lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUEより小さい&lt;/a&gt;場合は &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; を返し、&lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt;より大きい場合は &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="234cddb40ea7edc20ba16f302fd45e435a6a6dbf" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部がある場合は、切り捨てられます。この &lt;code&gt;Float&lt;/code&gt; 値が &lt;code&gt;NaN&lt;/code&gt; の場合はゼロを返し、&lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt;より小さい場合は &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; 、&lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt;より大きい場合は &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0a1bb43be34e6fb6de623932b67b670ae0006852" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部がある場合は、切り捨てられます。この場合の戻り値はゼロ &lt;code&gt;Float&lt;/code&gt; 値が負かで &lt;code&gt;NaN&lt;/code&gt; 、&lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt;それはよりも大きいかどう &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1fdd0d739f0100ce802b95ab4a4c9b2532feeff0" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部がある場合は、切り捨てられます。この場合の戻り値はゼロ &lt;code&gt;Float&lt;/code&gt; 値が負かで &lt;code&gt;NaN&lt;/code&gt; 、&lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt;それはよりも大きいかどう &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea6eb6722ce134e1e96c66df47559354876af311" translate="yes" xml:space="preserve">
          <source>The framework that we compiled with Kotlin/Native has helper attributes to make it easier to use with Swift. Let's convert the previous Objective-C example into Swift. As a result, we'll have the following code in &lt;code&gt;main.swift&lt;/code&gt;:</source>
          <target state="translated">Kotlin / Nativeでコンパイルしたフレームワークには、Swiftでの使用を容易にするヘルパー属性があります。前のObjective-Cの例をSwiftに変換してみましょう。その結果、 &lt;code&gt;main.swift&lt;/code&gt; に次のコードが含まれます。</target>
        </trans-unit>
        <trans-unit id="229775820ba0ca0053d7b140e68dd9b3ed428ae4" translate="yes" xml:space="preserve">
          <source>The full build script for the sample project can be found &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/kotlin-dagger/build.gradle&quot;&gt;here&lt;/a&gt;. You can also look at the converted code for &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-dagger&quot;&gt;the Android sample&lt;/a&gt;.</source>
          <target state="translated">サンプルプロジェクトの完全なビルドスクリプトは、&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/kotlin-dagger/build.gradle&quot;&gt;こちらにあります&lt;/a&gt;。&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-dagger&quot;&gt;Androidサンプル&lt;/a&gt;用に変換されたコードも確認できます。</target>
        </trans-unit>
        <trans-unit id="e62bc4cb51ca1d1cddfe4e1d3d510caa93dee388" translate="yes" xml:space="preserve">
          <source>The full list of arguments that can be used is shown when you run &lt;code&gt;kotlinc -help&lt;/code&gt;.</source>
          <target state="translated">使用可能な引数の完全なリストは、 &lt;code&gt;kotlinc -help&lt;/code&gt; を実行すると表示されます。</target>
        </trans-unit>
        <trans-unit id="02b69f589be9184eaa6e08d9fb77b12e7b2d6da2" translate="yes" xml:space="preserve">
          <source>The full list of supported use-site targets is:</source>
          <target state="translated">サポートされているユースサイトのターゲットの完全なリストです。</target>
        </trans-unit>
        <trans-unit id="58018a7c2f7cccce2f2841705c78d55576a7e56f" translate="yes" xml:space="preserve">
          <source>The full syntactic form of lambda expressions is as follows:</source>
          <target state="translated">ラムダ式の完全な構文形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="1347221f9ac10fa3f9465e07c5ca87cc27e8a8e6" translate="yes" xml:space="preserve">
          <source>The full syntax for declaring a property is</source>
          <target state="translated">プロパティを宣言するための完全な構文は</target>
        </trans-unit>
        <trans-unit id="905c760b34a0beb7b5d4d319c2f007dd8ebd0fd3" translate="yes" xml:space="preserve">
          <source>The full syntax of a read-only property declaration differs from a mutable one in two ways: it starts with &lt;code&gt;val&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt; and does not allow a setter:</source>
          <target state="translated">2つの方法で変更可能なものから、読み取り専用のプロパティ宣言が異なるの完全な構文：それはで始まる &lt;code&gt;val&lt;/code&gt; の代わりに &lt;code&gt;var&lt;/code&gt; とセッターを許可していません。</target>
        </trans-unit>
        <trans-unit id="776f7d695f882be224aebfaccabd52b1c0591bc5" translate="yes" xml:space="preserve">
          <source>The fully qualified dot-separated name of the class, or &lt;code&gt;null&lt;/code&gt; if the class is local or a class of an anonymous object.</source>
          <target state="translated">クラスの完全修飾ドット区切り名。クラスがローカルまたは匿名オブジェクトのクラスの場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ee52f844a0963f3db9f0478ccd20b13916c48b9" translate="yes" xml:space="preserve">
          <source>The fully qualified dot-separated name of the class, or &lt;code&gt;null&lt;/code&gt; if the class is local or it is an anonymous object literal.</source>
          <target state="translated">ドットで区切られたクラスの完全修飾名。クラスがローカルの場合、または匿名オブジェクトリテラルの場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a3f03ea2de9956cfc95db69b9cc7f09e01c1b79" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the Kotlin Multiplatform Gradle plugin is &lt;code&gt;org.jetbrains.kotlin.multiplatform&lt;/code&gt;. If you use the Kotlin Gradle DSL, you can apply the plugin with &lt;code&gt;kotlin(&amp;ldquo;multiplatform&amp;rdquo;)&lt;/code&gt;. The plugin versions match the Kotlin release versions. The most recent version is 1.4.10.</source>
          <target state="translated">Kotlin MultiplatformGradleプラグインの完全修飾名は &lt;code&gt;org.jetbrains.kotlin.multiplatform&lt;/code&gt; です。Kotlin Gradle DSLを使用している場合は、 &lt;code&gt;kotlin(&amp;ldquo;multiplatform&amp;rdquo;)&lt;/code&gt; を使用してプラグインを適用できます。プラグインのバージョンは、Kotlinのリリースバージョンと一致します。最新バージョンは1.4.10です。</target>
        </trans-unit>
        <trans-unit id="f6c5b38e497b6843a07b1a8945d528e3c7606264" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-list#kotlin.collections%24List(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.List.T)))/init&quot;&gt;init&lt;/a&gt; is called for each list element sequentially starting from the first one. It should return the value for a list element given its index.</source>
          <target state="translated">関数&lt;a href=&quot;-list#kotlin.collections%24List(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.List.T)))/init&quot;&gt;init&lt;/a&gt;は、リスト要素ごとに最初の要素から順番に呼び出されます。インデックスが指定されたリスト要素の値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="7696926a08823163fe79a297a106aabaf3f3d399" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-mutable-list#kotlin.collections%24MutableList(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.MutableList.T)))/init&quot;&gt;init&lt;/a&gt; is called for each list element sequentially starting from the first one. It should return the value for a list element given its index.</source>
          <target state="translated">関数&lt;a href=&quot;-mutable-list#kotlin.collections%24MutableList(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.MutableList.T)))/init&quot;&gt;init&lt;/a&gt;は、リスト要素ごとに最初の要素から順番に呼び出されます。インデックスが指定されたリスト要素の値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="ed3c35965fc33462a41df8d6c5d69d9f13434071" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-byte-array#kotlin%24UByteArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UByte)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">関数&lt;a href=&quot;-u-byte-array#kotlin%24UByteArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UByte)))/init&quot;&gt;init&lt;/a&gt;は、最初の配列要素から順番に配列要素ごとに呼び出されます。インデックスが指定された配列要素の値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="acfbb507b912e298abe7a785c884c806da178f93" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-int-array#kotlin%24UIntArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UInt)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">関数&lt;a href=&quot;-u-int-array#kotlin%24UIntArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UInt)))/init&quot;&gt;init&lt;/a&gt;は、最初の配列要素から順番に配列要素ごとに呼び出されます。インデックスが指定された配列要素の値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="804f600305f25777086b4066f40ae2670855676b" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-long-array#kotlin%24ULongArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.ULong)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">関数&lt;a href=&quot;-u-long-array#kotlin%24ULongArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.ULong)))/init&quot;&gt;init&lt;/a&gt;は、最初の配列要素から順番に配列要素ごとに呼び出されます。インデックスが指定された配列要素の値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="98c90b068891a2e0a90f241b535756a6f3e22982" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-short-array#kotlin%24UShortArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UShort)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">関数&lt;a href=&quot;-u-short-array#kotlin%24UShortArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UShort)))/init&quot;&gt;init&lt;/a&gt;は、最初の配列要素から順番に配列要素ごとに呼び出されます。インデックスが指定された配列要素の値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="39a40c87789f813fc496dc5468cc91805583814e" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;libnative_symbols&lt;/code&gt; allows us to open the way from the native code to the Kotlin/Native library. This is the entry point we use. The library name is used as a prefix for the function name.</source>
          <target state="translated">関数 &lt;code&gt;libnative_symbols&lt;/code&gt; を使用すると、ネイティブコードからKotlin / Nativeライブラリへの道を開くことができます。これは、私たちが使用するエントリポイントです。ライブラリ名は、関数名の接頭辞として使用されます。</target>
        </trans-unit>
        <trans-unit id="ecf68a80d3d421d1a3dac0bf6a7b99795040c5e0" translate="yes" xml:space="preserve">
          <source>The function body is delimited by curly braces - indentation is generally not significant in Kotlin, but you should of course indent your code properly for the benefit of human readers.</source>
          <target state="translated">関数本体は中括弧で区切られています。Kotlinではインデントは一般的に重要ではありませんが、人間の読者のためにコードを適切にインデントする必要があります。</target>
        </trans-unit>
        <trans-unit id="892b57cbc7486be03e2291de2837204f537e592b" translate="yes" xml:space="preserve">
          <source>The function does upgrade from read to write lock if needed, but this upgrade is not atomic as such upgrade is not supported by &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLock&lt;/a&gt;. In order to do such upgrade this function first releases all read locks held by this thread, then acquires write lock, and after releasing it acquires read locks back again.</source>
          <target state="translated">この関数は、必要に応じて読み取りから書き込みロックにアップグレードしますが、このアップグレードは&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLockで&lt;/a&gt;サポートされていないため、アトミックではありません。このようなアップグレードを行うために、この関数は最初にこのスレッドによって保持されているすべての読み取りロックを解放し、次に書き込みロックを取得します。解放後、読み取りロックを再度取得します。</target>
        </trans-unit>
        <trans-unit id="41eab38f14ba2d1160f8a85b6cc897eb549e21ad" translate="yes" xml:space="preserve">
          <source>The function does upgrade from read to write lock if needed, but this upgrade is not atomic as such upgrade is not supported by &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLock&lt;/a&gt;. In order to do such upgrade this function first releases all read locks held by this thread, then acquires write lock, and after releasing it acquires read locks back again.</source>
          <target state="translated">この関数は、必要に応じて読み取りロックから書き込みロックにアップグレードしますが、このようなアップグレードは&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLockで&lt;/a&gt;サポートされていないため、このアップグレードはアトミックではありません。このようなアップグレードを行うために、この関数は最初にこのスレッドによって保持されているすべての読み取りロックを解放し、次に書き込みロックを取得し、解放した後、再び読み取りロックを取得します。</target>
        </trans-unit>
        <trans-unit id="11c5bbd79a2512e469db0fde4da38bfd3abb594c" translate="yes" xml:space="preserve">
          <source>The function init is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">関数 init は,最初の配列要素から順に各配列要素に対して呼び出されます.この関数はインデックスが与えられた配列要素の値を返します。</target>
        </trans-unit>
        <trans-unit id="47e9d14611b3a1f9114880a2ff853190d9e97c10" translate="yes" xml:space="preserve">
          <source>The function signature remains exactly the same. The only difference is &lt;code&gt;suspend&lt;/code&gt; being added to it. The return type however is the type we want to be returned.</source>
          <target state="translated">関数のシグネチャはまったく同じです。唯一の違いは、 &lt;code&gt;suspend&lt;/code&gt; が追加されることです。ただし、戻り値の型は、返される型です。</target>
        </trans-unit>
        <trans-unit id="f6772ad37911fb29515e5ecad2f466bed6bdb7cd" translate="yes" xml:space="preserve">
          <source>The function type notation can optionally include names for the function parameters: &lt;code&gt;(x: Int, y: Int) -&amp;gt; Point&lt;/code&gt;. These names can be used for documenting the meaning of the parameters.</source>
          <target state="translated">関数タイプ表記には、オプションで関数パラメーターの名前を含めることができます： &lt;code&gt;(x: Int, y: Int) -&amp;gt; Point&lt;/code&gt; 。これらの名前は、パラメーターの意味を文書化するために使用できます。</target>
        </trans-unit>
        <trans-unit id="5f62a960bb01edb991f086fcecfa3233b3994fce" translate="yes" xml:space="preserve">
          <source>The functions include trigonometric, hyperbolic, exponentiation and power, logarithmic, rounding, sign and absolute value.</source>
          <target state="translated">関数は三角関数、双曲線関数、指数と乗数、対数、丸め、符号、絶対値などがあります。</target>
        </trans-unit>
        <trans-unit id="332c4fb906dbcda140f018d0de201e8c1ce3d30d" translate="yes" xml:space="preserve">
          <source>The general rule is: when a type parameter &lt;code&gt;T&lt;/code&gt; of a class &lt;code&gt;C&lt;/code&gt; is declared &lt;strong&gt;out&lt;/strong&gt;, it may occur only in &lt;strong&gt;out&lt;/strong&gt;-position in the members of &lt;code&gt;C&lt;/code&gt;, but in return &lt;code&gt;C&amp;lt;Base&amp;gt;&lt;/code&gt; can safely be a supertype of &lt;code&gt;C&amp;lt;Derived&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">一般的な規則は次のとおりです。クラス &lt;code&gt;C&lt;/code&gt; の型パラメーター &lt;code&gt;T&lt;/code&gt; が&lt;strong&gt;out&lt;/strong&gt;として宣言さ&lt;strong&gt;れて&lt;/strong&gt;いる場合、それは &lt;code&gt;C&lt;/code&gt; のメンバーの&lt;strong&gt;out&lt;/strong&gt;位置でのみ発生する可能性がありますが、代わりに &lt;code&gt;C&amp;lt;Base&amp;gt;&lt;/code&gt; は &lt;code&gt;C&amp;lt;Derived&amp;gt;&lt;/code&gt; スーパータイプにすることができます。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="47a803852f9a44b2a9ede00ebab7d2f5f19ab5c5" translate="yes" xml:space="preserve">
          <source>The general rule:</source>
          <target state="translated">一般的なルールです。</target>
        </trans-unit>
        <trans-unit id="39d2229c00faf1c133ef862b873c7364c63bd099" translate="yes" xml:space="preserve">
          <source>The general solution that works both for threads and for coroutines is to use a thread-safe (aka synchronized, linearizable, or atomic) data structure that provides all the necessarily synchronization for the corresponding operations that needs to be performed on a shared state. In the case of a simple counter we can use &lt;code&gt;AtomicInteger&lt;/code&gt; class which has atomic &lt;code&gt;incrementAndGet&lt;/code&gt; operations:</source>
          <target state="translated">スレッドとコルーチンの両方で機能する一般的な解決策は、共有状態で実行する必要がある対応する操作に必要なすべての同期を提供するスレッドセーフ（同期、線形化、またはアトミック）データ構造を使用することです。単純なカウンターの場合、アトミックな &lt;code&gt;incrementAndGet&lt;/code&gt; 操作を持つ &lt;code&gt;AtomicInteger&lt;/code&gt; クラスを使用できます。</target>
        </trans-unit>
        <trans-unit id="4e700b89372f9cc694759aa68e2252618aa967c7" translate="yes" xml:space="preserve">
          <source>The general solution that works both for threads and for coroutines is to use a thread-safe (aka synchronized, linearizable, or atomic) data structure that provides all the necessary synchronization for the corresponding operations that needs to be performed on a shared state. In the case of a simple counter we can use &lt;code&gt;AtomicInteger&lt;/code&gt; class which has atomic &lt;code&gt;incrementAndGet&lt;/code&gt; operations:</source>
          <target state="translated">スレッドとコルーチンの両方で機能する一般的なソリューションは、共有状態で実行する必要のある対応する操作に必要なすべての同期を提供するスレッドセーフ（同期、線形化可能、またはアトミック）データ構造を使用することです。単純なカウンターの場合、アトミック &lt;code&gt;incrementAndGet&lt;/code&gt; 操作を持つ &lt;code&gt;AtomicInteger&lt;/code&gt; クラスを使用できます。</target>
        </trans-unit>
        <trans-unit id="fe194a34c4e181902ef2477861ca1a56a0c14e72" translate="yes" xml:space="preserve">
          <source>The generated constructor is synthetic so it can&amp;rsquo;t be directly called from Java or Kotlin, but it can be called using reflection.</source>
          <target state="translated">生成されたコンストラクターは合成であるため、JavaまたはKotlinから直接呼び出すことはできませんが、リフレクションを使用して呼び出すことはできます。</target>
        </trans-unit>
        <trans-unit id="f1c090136ed2d646f1aaf5e8051668e02cbe39d2" translate="yes" xml:space="preserve">
          <source>The generation of TypeScript declaration files is a feature exclusive to the IR compiler, and is in active development. If you run into any problems, please submit them to the Kotlin &lt;a href=&quot;https://youtrack.jetbrains.com/issues?q=%23%7BKJS:%20d.ts%20generation%7D&quot;&gt;issue tracker&lt;/a&gt; or vote for submitted issues that impact you.</source>
          <target state="translated">TypeScript宣言ファイルの生成は、IRコンパイラ専用の機能であり、現在活発に開発されています。問題が発生した場合は、Kotlin Issue &lt;a href=&quot;https://youtrack.jetbrains.com/issues?q=%23%7BKJS:%20d.ts%20generation%7D&quot;&gt;Trackerに&lt;/a&gt;送信するか、送信された問題に投票してください。</target>
        </trans-unit>
        <trans-unit id="c09ea74ea1b03fd685bbe5f94354a8374db022b3" translate="yes" xml:space="preserve">
          <source>The getter of this property, used to obtain the value of the property.</source>
          <target state="translated">このプロパティの値を取得するために使用される、このプロパティのゲッター。</target>
        </trans-unit>
        <trans-unit id="5599725590a9016e21ca4310f17eb7b2b01a0483" translate="yes" xml:space="preserve">
          <source>The globs are applied to the header paths relative to the appropriate include path elements, e.g. &lt;code&gt;time.h&lt;/code&gt; or &lt;code&gt;curl/curl.h&lt;/code&gt;. So if the library is usually included with &lt;code&gt;#include &amp;lt;SomeLbrary/Header.h&amp;gt;&lt;/code&gt;, then it would probably be correct to filter headers with</source>
          <target state="translated">グロブは、適切なインクルードパス要素（たとえば、 &lt;code&gt;time.h&lt;/code&gt; または &lt;code&gt;curl/curl.h&lt;/code&gt; )に関連するヘッダーパスに適用されます。そのため、ライブラリが通常 &lt;code&gt;#include &amp;lt;SomeLbrary/Header.h&amp;gt;&lt;/code&gt; に含まれている場合は、ヘッダーをフィルターするのがおそらく正しいでしょう。</target>
        </trans-unit>
        <trans-unit id="a57ffec5971f7b3f89d004ca095f66feb86eb296" translate="yes" xml:space="preserve">
          <source>The goal of the tutorial is to demonstrate Kotlin code re-use between Android and iOS. Let's start by manually creating the &lt;code&gt;SharedCode&lt;/code&gt; sub-project in our Gradle project. The source code from the &lt;code&gt;SharedCode&lt;/code&gt; project will be shared between platforms. We will create several new files in our project to implement that.</source>
          <target state="translated">このチュートリアルの目的は、AndroidとiOS間でのKotlinコードの再利用を示すことです。まず、Gradleプロジェクトで &lt;code&gt;SharedCode&lt;/code&gt; サブプロジェクトを手動で作成してみましょう。 &lt;code&gt;SharedCode&lt;/code&gt; プロジェクトのソースコードは、プラットフォーム間で共有されます。プロジェクトにいくつかの新しいファイルを作成して、それを実装します。</target>
        </trans-unit>
        <trans-unit id="bae5238fdeabbfa885f39de71e3a42ab3917db13" translate="yes" xml:space="preserve">
          <source>The good thing about common code is that it can be covered with common tests, which later are compiled and executed on &lt;em&gt;every&lt;/em&gt; platform.</source>
          <target state="translated">一般的なコードの良いところは、後で&lt;em&gt;すべての&lt;/em&gt;プラットフォームでコンパイルおよび実行される一般的なテストでカバーできることです。</target>
        </trans-unit>
        <trans-unit id="068a964193217c327091688b8b7de38e4eb4f3e1" translate="yes" xml:space="preserve">
          <source>The header files merely contain function declarations for functionality that is defined at runtime. For instance, we could define a &lt;code&gt;jQuery&lt;/code&gt; function like so</source>
          <target state="translated">ヘッダーファイルには、実行時に定義される機能の関数宣言のみが含まれています。たとえば、次のように &lt;code&gt;jQuery&lt;/code&gt; 関数を定義できます。</target>
        </trans-unit>
        <trans-unit id="6ce2e166fe215303244aa3044be29e2844cbf2bc" translate="yes" xml:space="preserve">
          <source>The iOS simulator requires a framework compiled for the &lt;code&gt;ios_x64&lt;/code&gt; target, the &lt;code&gt;iOS_sim&lt;/code&gt; folder in our case.</source>
          <target state="translated">iOSシミュレーターには、 &lt;code&gt;ios_x64&lt;/code&gt; ターゲット用にコンパイルされたフレームワーク（この場合は &lt;code&gt;iOS_sim&lt;/code&gt; フォルダー）が必要です。</target>
        </trans-unit>
        <trans-unit id="31859b6cbcfb9892316b62d967e1f5ae2235d5ef" translate="yes" xml:space="preserve">
          <source>The idea behind Rx is to move towards what's called &lt;code&gt;observable streams&lt;/code&gt; where by we now think of data as streams (infinite amounts of data) and these streams can be observed. In practical terms, Rx is simply the &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer Pattern&lt;/a&gt; with a series of extensions which allow us to operate on the data.</source>
          <target state="translated">Rxの背後にある考え方は、監視 &lt;code&gt;observable streams&lt;/code&gt; と呼ばれるものに移動することです。これにより、データをストリーム（無限量のデータ）と見なし、これらのストリームを監視できるようになります。実際には、Rxは単にデータを操作できるようにする一連の拡張機能を備えた&lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;オブザーバーパターン&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="a752acd40500d4af1aa6897c4527c1276e603455" translate="yes" xml:space="preserve">
          <source>The idea behind futures or promises (there are also other terms these can be referred to depending on language/platform), is that when we make a call, we're promised that at some point it will return with an object called a Promise, which can then be operated on.</source>
          <target state="translated">futures や promises (言語やプラットフォームによっては他の用語もあります)の背後にある考え方は、呼び出しをするときに、ある時点で Promise と呼ばれるオブジェクトが戻ってくることを約束しているというもので、それを操作することができます。</target>
        </trans-unit>
        <trans-unit id="0ec5a5ec78c5bbba1d9a9593b45aa36ac04ad75c" translate="yes" xml:space="preserve">
          <source>The idea is to make every platform show similar text: &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; and &lt;code&gt;Kotlin Rocks on iOS&lt;/code&gt;, depending on the platform. We will reuse the way we generate the message. Let's create the file (and missing directories) &lt;code&gt;SharedCode/src/commonMain/kotlin/common.kt&lt;/code&gt; with the following contents under the project root directory</source>
          <target state="translated">アイデアは、すべてのプラットフォームを作ることであるようなテキストを示しています。 &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; と &lt;code&gt;Kotlin Rocks on iOS&lt;/code&gt; プラットフォームに応じて、。メッセージの生成方法を再利用します。プロジェクトのルートディレクトリの下に次の内容でファイル（および欠落しているディレクトリ） &lt;code&gt;SharedCode/src/commonMain/kotlin/common.kt&lt;/code&gt; を作成してみましょう</target>
        </trans-unit>
        <trans-unit id="82fd6cd237e491604315526b684dbfedf391a053" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;インスタンスに支えられた&lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;インターフェースの実装。</target>
        </trans-unit>
        <trans-unit id="6ba732549bab36d600a33b057cb1445e14d3cdfc" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;インスタンスによってサポートされる&lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;インターフェースの実装。</target>
        </trans-unit>
        <trans-unit id="e80ec37934bbec50821c43bd38cce1238a634038" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;インスタンスに支えられた&lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;インターフェースの実装。</target>
        </trans-unit>
        <trans-unit id="9ab2ec2a4f2966a3555f9fce9c9ee7c196c5adc8" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;インスタンスによってサポートされる&lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;インターフェースの実装。</target>
        </trans-unit>
        <trans-unit id="41ae2cd6b24e4bafa0efb17c582aa2f3dbd61174" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../../kotlin.collections/-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;インスタンスに支えられた&lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;インターフェースの実装。</target>
        </trans-unit>
        <trans-unit id="b29deea1bb921913df3a5fadba5cd74a8f4acd5e" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../../kotlin.collections/-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;インスタンスによってサポートされる&lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;インターフェースの実装。</target>
        </trans-unit>
        <trans-unit id="a6579034caa6bf530c44ba48e1557ccf3e4b94a3" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;インスタンスに支えられた&lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;インターフェースの実装。</target>
        </trans-unit>
        <trans-unit id="a009a3a444f03e70f059b3c04a3a49cc825d720d" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;インスタンスによってサポートされる&lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;インターフェースの実装。</target>
        </trans-unit>
        <trans-unit id="fa50aaadf0215e23e542746cdfa2658460833341" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;entries&lt;/a&gt; property, which should return read-only set of map entries.</source>
          <target state="translated">実装者は&lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;エントリ&lt;/a&gt;プロパティを実装する必要があります。これは、マップエントリの読み取り専用のセットを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="0d9844010488cdb05175b5fbda28866913c16552" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">実装者は、マップエントリの変更可能なセットを返し、関数を&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;置く&lt;/a&gt;、&lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;entries&lt;/a&gt;プロパティを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="4c2bcd3066d4911e1651a3eb4e73833cb38dc376" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">実装者は、マップエントリの可変セットを返す&lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;entries&lt;/a&gt;プロパティを実装し、関数を&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;配置する必要があり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b072b8461d749216f126589f253d2136dcee5a49" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">実装者は、マップエントリの変更可能なセットを返し、関数を&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;置く&lt;/a&gt;、&lt;a href=&quot;entries&quot;&gt;entries&lt;/a&gt;プロパティを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="de6f180abcaad3c2e2c4cd19c5f847e641f85c21" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">実装者は、マップエントリの可変セットを返す&lt;a href=&quot;entries&quot;&gt;entries&lt;/a&gt;プロパティを実装し、関数を&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;配置する必要があり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b4d84ada0a069eb9728359000c31d5443cb7fe8c" translate="yes" xml:space="preserve">
          <source>The in-place sorting functions have similar names to the functions that apply to read-only lists, but without the &lt;code&gt;ed/d&lt;/code&gt; suffix:</source>
          <target state="translated">インプレースソート関数の名前は、読み取り専用リストに適用される関数と似ていますが、 &lt;code&gt;ed/d&lt;/code&gt; サフィックスはありません。</target>
        </trans-unit>
        <trans-unit id="ad88781015ab91e944a6d24ed6740d21e1a613c0" translate="yes" xml:space="preserve">
          <source>The indentation in front of the accessors is due to convention; like elsewhere in Kotlin, it has no syntactic significance. The compiler can tell which accessors belong to which properties because the only legal place for an accessor is immediately after the property declaration (and there can be at most one getter and one setter) - so you can't split the property declaration and the accessor declarations. However, the order of the accessors doesn't matter.</source>
          <target state="translated">アクセサの前のインデントは慣習によるもので、Kotlinの他の場所と同様、構文的には意味がありません。コンパイラはどのアクセサがどのプロパティに属しているかを知ることができます。なぜなら、アクセサが適法に配置されるのはプロパティ宣言の直後だけだからです(そして、ゲッターとセッターは最大でも1つしかありません)。しかし、アクセサの順番は問題ではありません。</target>
        </trans-unit>
        <trans-unit id="a438c4c204700f052b62784ad094f3d42692c3e5" translate="yes" xml:space="preserve">
          <source>The inheritors are used in &lt;a href=&quot;-contract-builder/index&quot;&gt;ContractBuilder&lt;/a&gt; to describe the contract of a function.</source>
          <target state="translated">継承者は、関数の&lt;a href=&quot;-contract-builder/index&quot;&gt;コントラクト&lt;/a&gt;を記述するためにContractBuilderで使用されます。</target>
        </trans-unit>
        <trans-unit id="927c0a69730a98787dc84c53359365aef174d24b" translate="yes" xml:space="preserve">
          <source>The initializer, getter and setter are optional. Property type is optional if it can be inferred from the initializer (or from the getter return type, as shown below).</source>
          <target state="translated">イニシャライザ、ゲッター、セッターはオプションです。プロパティの型は、イニシャライザ(または以下のようにゲッターの戻り値の型)から推測できる場合はオプションです。</target>
        </trans-unit>
        <trans-unit id="df4b9318a341c1f296940189b67832418073c297" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/value&quot;&gt;value&lt;/a&gt; character array, starting at &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">挿入された文字は、&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/index&quot;&gt;インデックス&lt;/a&gt;から始まる&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/value&quot;&gt;値の&lt;/a&gt;文字配列と同じ順序になります。</target>
        </trans-unit>
        <trans-unit id="86553ac24df6523f576ebfc95d6b9462d047690c" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; array, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">挿入された文字は、&lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;インデックス&lt;/a&gt;から始まり、&lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;値の&lt;/a&gt;配列と同じ順序になります。</target>
        </trans-unit>
        <trans-unit id="b4ed7f7987791deb8f62b6e71d102280a076828a" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; array, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">挿入された文字は、&lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;インデックス&lt;/a&gt;から始まり、&lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;値の&lt;/a&gt;配列と同じ順序になります。</target>
        </trans-unit>
        <trans-unit id="9543c40c6bce9ac3cd3001f546e3c43cece51c22" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; array, starting at &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">挿入された文字は、&lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;インデックス&lt;/a&gt;から始まり、&lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;値の&lt;/a&gt;配列と同じ順序になります。</target>
        </trans-unit>
        <trans-unit id="e0709a2469b79f1b5658bea591319990543a447b" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/csq&quot;&gt;csq&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">挿入された文字は、&lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;インデックス&lt;/a&gt;から始まる&lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/csq&quot;&gt;csq&lt;/a&gt;文字シーケンスと同じ順序になります。</target>
        </trans-unit>
        <trans-unit id="1d6b868449af039ece3f79e19a7f1bdef4bb1a01" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">挿入された文字は、&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/index&quot;&gt;インデックス&lt;/a&gt;から始まる&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/value&quot;&gt;値の&lt;/a&gt;文字シーケンスと同じ順序になります。</target>
        </trans-unit>
        <trans-unit id="3500adb125fdc73a499caef4e20aeda3f4dc5da2" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">挿入された文字は、&lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;インデックス&lt;/a&gt;から始まる&lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;値の&lt;/a&gt;文字シーケンスと同じ順序になります。</target>
        </trans-unit>
        <trans-unit id="ad31007689802215e06527f3c3a293fa179e4c9d" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">挿入された文字は、&lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;インデックス&lt;/a&gt;から始まる&lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;値の&lt;/a&gt;文字シーケンスと同じ順序になります。</target>
        </trans-unit>
        <trans-unit id="c2d836a76478983c6ee8310fe8b3dad06eee5f72" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">挿入された文字は、&lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;インデックス&lt;/a&gt;から始まる&lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;値の&lt;/a&gt;文字シーケンスと同じ順序になります。</target>
        </trans-unit>
        <trans-unit id="73ab217fa7b8d452fbb508f24860b5983aed819b" translate="yes" xml:space="preserve">
          <source>The insertion order is preserved by maintaining a doubly-linked list of all of its entries.</source>
          <target state="translated">挿入順は、すべてのエントリの二重リンクされたリストを維持することで保持されます。</target>
        </trans-unit>
        <trans-unit id="d2ac540734122ad9d9f148278a049a69e4049649" translate="yes" xml:space="preserve">
          <source>The instance of the object declaration, or &lt;code&gt;null&lt;/code&gt; if this class is not an object declaration.</source>
          <target state="translated">オブジェクト宣言のインスタンス。このクラスがオブジェクト宣言でない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc732f6df37635d53aa48535fdea446c3301e524" translate="yes" xml:space="preserve">
          <source>The instruction &lt;code&gt;binaries.executable()&lt;/code&gt; explicitly instructs the Kotlin compiler to emit executable &lt;code&gt;.js&lt;/code&gt; files. This is the default behavior when using the current Kotlin/JS compiler, but the instruction is explicitly required if you are working with the &lt;a href=&quot;js-ir-compiler&quot;&gt;Kotlin/JS IR compiler&lt;/a&gt;, or have set &lt;code&gt;kotlin.js.generate.executable.default=false&lt;/code&gt; in your &lt;code&gt;gradle.properties&lt;/code&gt;. In those cases, omitting &lt;code&gt;binaries.executable()&lt;/code&gt; will cause the compiler to only generate Kotlin-internal library files, which can be used from other projects, but not run on their own. (This is typically faster than creating executable files, and can be a possible optimization when dealing with non-leaf modules of your project.)</source>
          <target state="translated">命令 &lt;code&gt;binaries.executable()&lt;/code&gt; は、実行可能な &lt;code&gt;.js&lt;/code&gt; ファイルを発行するようにKotlinコンパイラに明示的に指示します。これは、現在のKotlin / JSコンパイラを使用して、デフォルトの動作ですが、命令は、明示的に、使用している場合に必要な&lt;a href=&quot;js-ir-compiler&quot;&gt;Kotlin / JS IRコンパイラ&lt;/a&gt;、または設定した &lt;code&gt;kotlin.js.generate.executable.default=false&lt;/code&gt; をあなたの中 &lt;code&gt;gradle.properties&lt;/code&gt; 。そのような場合、 &lt;code&gt;binaries.executable()&lt;/code&gt; を省略すると、コンパイラーはKotlin内部ライブラリファイルのみを生成します。このファイルは他のプロジェクトから使用できますが、単独では実行できません。 （これは通常、実行可能ファイルを作成するよりも高速であり、プロジェクトの非リーフモジュールを処理するときに最適化できる可能性があります。）</target>
        </trans-unit>
        <trans-unit id="4e1a88c47519272f4d061661530035978afeff04" translate="yes" xml:space="preserve">
          <source>The interoperability tool analyses C headers and produces a &quot;natural&quot; mapping of the types, functions, and constants into the Kotlin world. The generated stubs can be imported into an IDE for the purpose of code completion and navigation.</source>
          <target state="translated">この相互運用性ツールは、Cヘッダを解析し、型、関数、定数のKotlinワールドへの「自然な」マッピングを生成します。生成されたスタブは、コード補完やナビゲーションのために IDE にインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="3122fc76a98056291b979307819d62c01b024074" translate="yes" xml:space="preserve">
          <source>The introduction of the hierarchical project structure in multiplatform projects resulted in a couple of changes to the names of some Gradle tasks:</source>
          <target state="translated">マルチプラットフォームプロジェクトに階層型プロジェクト構造が導入されたことで、いくつかの Gradle タスクの名前が変更されました。</target>
        </trans-unit>
        <trans-unit id="78163206f8e53ce50e1eec86f00b2814cc4b80d9" translate="yes" xml:space="preserve">
          <source>The kapt annotation processing tasks are &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;cached in Gradle&lt;/a&gt; by default. However, annotation processors run arbitrary code that may not necessarily transform the task inputs into the outputs, might access and modify the files that are not tracked by Gradle etc. If the annotation processors used in the build cannot be properly cached, it is possible to disable caching for kapt entirely by adding the following lines to the build script, in order to avoid false-positive cache hits for the kapt tasks:</source>
          <target state="translated">kaptアノテーション処理タスクは、デフォルト&lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;でGradleにキャッシュさ&lt;/a&gt;れます。ただし、アノテーションプロセッサは、タスク入力を出力に変換するとは限らない任意のコードを実行し、Gradleなどによって追跡されないファイルにアクセスして変更する可能性があります。ビルドで使用されるアノテーションプロセッサを適切にキャッシュできない場合は、次のことが可能です。 kaptタスクの誤検知キャッシュヒットを回避するために、ビルドスクリプトに次の行を追加して、kaptのキャッシュを完全に無効にします。</target>
        </trans-unit>
        <trans-unit id="0c34ac28f0b47dc2a95569e5a72bbe09867d14d5" translate="yes" xml:space="preserve">
          <source>The kapt annotation processing tasks are not &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;cached in Gradle&lt;/a&gt; by default. Annotation processors run arbitrary code that may not necessarily transform the task inputs into the outputs, might access and modify the files that are not tracked by Gradle etc. To enable caching for kapt anyway, add the following lines to the build script:</source>
          <target state="translated">kaptアノテーション処理タスクは、デフォルト&lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;ではGradleにキャッシュされ&lt;/a&gt;ません。注釈プロセッサは任意のコードを実行しますが、必ずしもタスクの入力を出力に変換する必要はなく、Gradleなどによって追跡されないファイルにアクセスして変更する可能性があります。kaptのキャッシュを有効にするには、ビルドスクリプトに次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="519a57223d8acbf5b242fd0d7e39dc2141cafbbd" translate="yes" xml:space="preserve">
          <source>The key advantage of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt; is a nullable &lt;code&gt;Throwable&lt;/code&gt; parameter of the lambda that can be used to determine whether the flow collection was completed normally or exceptionally. In the following example the &lt;code&gt;simple&lt;/code&gt; flow throws an exception after emitting the number 1:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt;の主な利点は、ラムダのnull許容の &lt;code&gt;Throwable&lt;/code&gt; パラメーターであり、フロー収集が正常に完了したか例外的に完了したかを判別するために使用できます。次の例では、 &lt;code&gt;simple&lt;/code&gt; フローは、数値1を発行した後に例外をスローします。</target>
        </trans-unit>
        <trans-unit id="0d265db62daefe24281a53daa642fa0260c64977" translate="yes" xml:space="preserve">
          <source>The key benefit of using sealed classes comes into play when you use them in a &lt;a href=&quot;control-flow#when-expression&quot;&gt;&lt;code&gt;when&lt;/code&gt; expression&lt;/a&gt;. If it's possible to verify that the statement covers all cases, you don't need to add an &lt;code&gt;else&lt;/code&gt; clause to the statement. However, this works only if you use &lt;code&gt;when&lt;/code&gt; as an expression (using the result) and not as a statement.</source>
          <target state="translated">&lt;a href=&quot;control-flow#when-expression&quot;&gt; &lt;code&gt;when&lt;/code&gt; 式&lt;/a&gt;で使用する場合、シールクラスを使用する主な利点が発揮されます。ステートメントがすべてのケースをカバーしていることを確認できる場合は、ステートメントに &lt;code&gt;else&lt;/code&gt; 句を追加する必要はありません。ただし、これは、ステートメントとしてではなく、式として（結果を使用して）を使用する &lt;code&gt;when&lt;/code&gt; のみ機能します。</target>
        </trans-unit>
        <trans-unit id="60878e19d1626a7113513294279d9306ebdfd3af" translate="yes" xml:space="preserve">
          <source>The key differences to the old model are:</source>
          <target state="translated">旧モデルとの主な違いは</target>
        </trans-unit>
        <trans-unit id="ba83743a7b4886ce5d922ef71ed4bc654a53eba4" translate="yes" xml:space="preserve">
          <source>The key for each element is provided by the &lt;a href=&quot;-grouping/key-of&quot;&gt;Grouping.keyOf&lt;/a&gt; function.</source>
          <target state="translated">各要素のキーは、&lt;a href=&quot;-grouping/key-of&quot;&gt;Grouping.keyOf&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="c7780b4923a988af8ea0601856ae08a944187203" translate="yes" xml:space="preserve">
          <source>The key new feature in Kotlin 1.1 is &lt;em&gt;coroutines&lt;/em&gt;, bringing the support of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, &lt;code&gt;yield&lt;/code&gt; and similar programming patterns. The key feature of Kotlin's design is that the implementation of coroutine execution is part of the libraries, not the language, so you aren't bound to any specific programming paradigm or concurrency library.</source>
          <target state="translated">Kotlin 1.1の主要な新機能は&lt;em&gt;コルーチン&lt;/em&gt;です。これにより、 &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; 、 &lt;code&gt;yield&lt;/code&gt; 、および同様のプログラミングパターンがサポートされます。Kotlinの設計の重要な特徴は、コルーチン実行の実装が言語ではなくライブラリの一部であるため、特定のプログラミングパラダイムや同時実行ライブラリに縛られることはありません。</target>
        </trans-unit>
        <trans-unit id="255ddce16ff2d3386fde18744e92b0919a0c3dcd" translate="yes" xml:space="preserve">
          <source>The key that defines &lt;em&gt;the&lt;/em&gt; context interceptor.</source>
          <target state="translated">コンテキストインターセプターを定義&lt;em&gt;する&lt;/em&gt;キー。</target>
        </trans-unit>
        <trans-unit id="f78236335bddfda90f254cf18135e3e283c652aa" translate="yes" xml:space="preserve">
          <source>The key to understanding why this trick works is rather simple: if you can only &lt;strong&gt;take&lt;/strong&gt; items from a collection, then using a collection of &lt;code&gt;String&lt;/code&gt;s and reading &lt;code&gt;Object&lt;/code&gt;s from it is fine. Conversely, if you can only &lt;em&gt;put&lt;/em&gt; items into the collection, it's OK to take a collection of &lt;code&gt;Object&lt;/code&gt;s and put &lt;code&gt;String&lt;/code&gt;s into it: in Java we have &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; a &lt;strong&gt;supertype&lt;/strong&gt; of &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">このトリックが機能する理由を理解するための鍵はかなり単純です。コレクションからのみアイテムを&lt;strong&gt;取得&lt;/strong&gt;できる場合は、 &lt;code&gt;String&lt;/code&gt; のコレクションを使用し、そこから &lt;code&gt;Object&lt;/code&gt; を読み取るのが適切です。逆に、アイテムをコレクションに&lt;em&gt;入れる&lt;/em&gt;ことしかできない場合は、 &lt;code&gt;Object&lt;/code&gt; のコレクションを取り、それに &lt;code&gt;String&lt;/code&gt; を入れることは問題あり &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; 。JavaではList &amp;lt;？スーパー文字列&amp;gt; &lt;strong&gt;スーパータイプ&lt;/strong&gt;の &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e72d25f147746520f953f90cd2e72b99d7c03c99" translate="yes" xml:space="preserve">
          <source>The kind of JS module generated by the compiler</source>
          <target state="translated">コンパイラが生成するJSモジュールの種類</target>
        </trans-unit>
        <trans-unit id="61cddbaa600cb4e80791b04fea34cfac2b911d59" translate="yes" xml:space="preserve">
          <source>The kind of JS module generated by the compiler:</source>
          <target state="translated">コンパイラが生成したJSモジュールの種類。</target>
        </trans-unit>
        <trans-unit id="d05fefa144a9bfaff0069cb495aef5fbbe9dc415" translate="yes" xml:space="preserve">
          <source>The language settings are checked for consistency between source sets depending on each other. Namely, if &lt;code&gt;foo&lt;/code&gt; depends on &lt;code&gt;bar&lt;/code&gt;:</source>
          <target state="translated">言語設定は、相互に依存するソースセット間の整合性がチェックされます。つまり、 &lt;code&gt;foo&lt;/code&gt; が &lt;code&gt;bar&lt;/code&gt; に依存している場合：</target>
        </trans-unit>
        <trans-unit id="7ae80735e57bee13b52032eac31a1a1787272a8f" translate="yes" xml:space="preserve">
          <source>The language settings for a source set can be specified as follows:</source>
          <target state="translated">ソースセットの言語設定は、以下のように指定することができます。</target>
        </trans-unit>
        <trans-unit id="fbaea25f697b924abdcdee8361823761cf7fe6eb" translate="yes" xml:space="preserve">
          <source>The language used to document Kotlin code (the equivalent of Java's JavaDoc) is called &lt;strong&gt;KDoc&lt;/strong&gt;. In its essence, KDoc combines JavaDoc's syntax for block tags (extended to support Kotlin's specific constructs) and Markdown for inline markup.</source>
          <target state="translated">Kotlinコードの文書化に使用される言語（JavaのJavaDocに相当）は&lt;strong&gt;KDoc&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。基本的に、KDocはブロックタグ用のJavaDocの構文（Kotlinの特定の構成をサポートするように拡張されています）とインラインマークアップ用のMarkdownを組み合わせています。</target>
        </trans-unit>
        <trans-unit id="6bd524ff724eae23548f42d94d576b7a82d79f24" translate="yes" xml:space="preserve">
          <source>The last element in the progression.</source>
          <target state="translated">進行の最後の要素。</target>
        </trans-unit>
        <trans-unit id="5ac343906b9635efc6bc3ea707e0886b7e34f40a" translate="yes" xml:space="preserve">
          <source>The last element of the progression is calculated to find the maximum value not greater than the end value for a positive step or the minimum value not less than the end value for a negative step such that &lt;code&gt;(last - first) % step == 0&lt;/code&gt;.</source>
          <target state="translated">進行の最後の要素が計算されて、正のステップの終了値以下の最大値、または負のステップの終了値以上の最小値が &lt;code&gt;(last - first) % step == 0&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="01b3b5a6efe68e4716a891433d6bbbed0351ca8d" translate="yes" xml:space="preserve">
          <source>The last line is invoking the function itself and passing as argument &lt;code&gt;kotlin&lt;/code&gt;, which refers to the standard library. This can be obtained in one of two ways:</source>
          <target state="translated">最後の行は関数自体を呼び出し、標準ライブラリを参照する引数 &lt;code&gt;kotlin&lt;/code&gt; として渡します。これは、次の2つの方法のいずれかで取得できます。</target>
        </trans-unit>
        <trans-unit id="538d53f2bc70104b650857f7bb5ca32765c9300b" translate="yes" xml:space="preserve">
          <source>The last list in the resulting list may have less elements than the given &lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">結果のリストの最後のリストは、指定&lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも要素が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="ff4c16017113383cfa2553bc4b666ff8af31f35a" translate="yes" xml:space="preserve">
          <source>The last list in the resulting list may have less elements than the given &lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">結果のリストの最後のリストには、指定&lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズよりも少ない要素が含まれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="df81eba7c4b794145b48baa6539e2f2979a8d58f" translate="yes" xml:space="preserve">
          <source>The last list in the resulting sequence may have less elements than the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">結果のシーケンスの最後のリストには、指定&lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも要素が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="e4ef2ba5891ebf7ffa1b88944ac0282efb5fecf2" translate="yes" xml:space="preserve">
          <source>The last list in the resulting sequence may have less elements than the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">結果のシーケンスの最後のリストには、指定&lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズよりも少ない要素が含まれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="19dcc0ec6fdfe1941cf804b7c1eaf5c5297a4c82" translate="yes" xml:space="preserve">
          <source>The last string in the resulting list may have less characters than the given &lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">結果のリストの最後の文字列は、指定&lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも文字数が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="01c80e09f206886b89d00be2fa9ab43305c32874" translate="yes" xml:space="preserve">
          <source>The last string in the resulting list may have less characters than the given &lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">結果のリストの最後の文字列は、指定&lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズよりも少ない文字である可能性があります。</target>
        </trans-unit>
        <trans-unit id="5264566740d059c5fcc7247f9b4782bf04dc775d" translate="yes" xml:space="preserve">
          <source>The last string in the resulting sequence may have less characters than the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">結果のシーケンスの最後の文字列は、指定&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも文字数が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="7ebb5e898a1a9ea0d92ef57e7df9d364782eae89" translate="yes" xml:space="preserve">
          <source>The last string in the resulting sequence may have less characters than the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">結果のシーケンスの最後の文字列は、指定&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズよりも少ない文字である可能性があります。</target>
        </trans-unit>
        <trans-unit id="34c76d76568703e916e3116e8326427af7debc51" translate="yes" xml:space="preserve">
          <source>The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.</source>
          <target state="translated">lastIndexは、次のマッチを開始するインデックスを指定する正規表現の読み書き可能な整数プロパティです。</target>
        </trans-unit>
        <trans-unit id="9d0eba273c11a973f53f6330c745e78d9f5b9345" translate="yes" xml:space="preserve">
          <source>The latter is called &lt;strong&gt;contravariance&lt;/strong&gt;, and you can only call methods that take String as an argument on &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; (e.g., you can call &lt;code&gt;add(String)&lt;/code&gt; or &lt;code&gt;set(int, String)&lt;/code&gt;), while if you call something that returns &lt;code&gt;T&lt;/code&gt; in &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;, you don't get a &lt;code&gt;String&lt;/code&gt;, but an &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">後者は&lt;strong&gt;contravariance&lt;/strong&gt;と呼ばれ、 &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; 引数としてStringを取るメソッドのみを呼び出すことができます。スーパー文字列&amp;gt;（例えば、あなたが呼び出すことができます &lt;code&gt;add(String)&lt;/code&gt; または &lt;code&gt;set(int, String)&lt;/code&gt; ）、あなたが戻ってその何かを呼び出す場合ながら &lt;code&gt;T&lt;/code&gt; で &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; 、あなたが取得しない &lt;code&gt;String&lt;/code&gt; が、 &lt;code&gt;Object&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86eeb4f1664e3df8b781582839802549edf89327" translate="yes" xml:space="preserve">
          <source>The layout of a Kotlin multiplatform project is constructed out of the following building blocks:</source>
          <target state="translated">Kotlinのマルチプラットフォームプロジェクトのレイアウトは、以下のビルディングブロックで構成されています。</target>
        </trans-unit>
        <trans-unit id="8ea7c30b630fce2ba1b463bc4ce8b2e978cfb463" translate="yes" xml:space="preserve">
          <source>The layout of kotlinx libraries has changed and now corresponds to the default layout, which we recommend using: The '&amp;ldquo;root&amp;rdquo; or &amp;ldquo;umbrella&amp;rdquo; library module now has a name without a suffix (for example,&lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; instead of &lt;code&gt;kotlinx-coroutines-core-native&lt;/code&gt;). Publishing libraries with &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;maven-publish Gradle plugin&lt;/a&gt; follows this layout by default.</source>
          <target state="translated">kotlinxライブラリのレイアウトが変更され、デフォルトのレイアウトに対応するようになりました。これを使用することをお勧めします。 '「root」または「umbrella」ライブラリモジュールの名前にサフィックスが付いていない（たとえば、 &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; ではなくkotlinx-coroutines- &lt;code&gt;kotlinx-coroutines-core-native&lt;/code&gt; ）。&lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;maven-publish Gradleプラグインを使用した&lt;/a&gt;ライブラリの公開は、デフォルトでこのレイアウトに従います。</target>
        </trans-unit>
        <trans-unit id="dc4b69a6e38939f4509626db77c33dd8c679086f" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 16 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;Int&lt;/code&gt; 値の最下位16ビットはこの &lt;code&gt;Short&lt;/code&gt; 値のビットと同じですが、最上位16ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="4f0f34d38c4a4771a59f6d35fcaf5f32f9d5a113" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 16 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;Int&lt;/code&gt; 値の最下位16ビットはこの &lt;code&gt;UShort&lt;/code&gt; 値のビットと同じですが、最上位16ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="db7d64a40964cbcc91041fe9c6abd3a6f883ba7c" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 48 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;Long&lt;/code&gt; 値の最下位16ビットはこの &lt;code&gt;Short&lt;/code&gt; 値のビットと同じですが、最上位48ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="96755580626f22c0780c08fafc24e52c9efd9ea9" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 48 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;Long&lt;/code&gt; 値の最下位16ビットはこの &lt;code&gt;UShort&lt;/code&gt; 値のビットと同じですが、最上位の48ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="805e1d578ae5895787cd7c80c9a6f84d9875cbdf" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 16 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;UInt&lt;/code&gt; 値の最下位16ビットはこの &lt;code&gt;Short&lt;/code&gt; 値のビットと同じですが、最上位16ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="e2d7f90749fa8a275417e31e2a951b621f7bdd7e" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 16 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;UInt&lt;/code&gt; 値の最下位16ビットはこの &lt;code&gt;UShort&lt;/code&gt; 値のビットと同じですが、最上位16ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="382a5532019e821cafc1c9ca21454b43f1f91a60" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 48 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;ULong&lt;/code&gt; 値の最下位16ビットはこの &lt;code&gt;Short&lt;/code&gt; 値のビットと同じですが、最上位48ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="98d7b8a419dc2e1a1e55aeb89fee5123de4a6b5e" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 48 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;ULong&lt;/code&gt; 値の最下位16ビットはこの &lt;code&gt;UShort&lt;/code&gt; 値のビットと同じですが、最上位48ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="b511f5bcb1b166f6a21672ecd3a364142d43ef6e" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Int&lt;/code&gt; value, whereas the most significant 32 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;Long&lt;/code&gt; 値の最下位32ビットはこの &lt;code&gt;Int&lt;/code&gt; 値のビットと同じですが、最上位32ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="8552752324805690a09e930c3347d0b3b76fb45a" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UInt&lt;/code&gt; value, whereas the most significant 32 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;Long&lt;/code&gt; 値の最下位32ビットはこの &lt;code&gt;UInt&lt;/code&gt; 値のビットと同じですが、最上位32ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="13513c5d8d4b778bf7d2d02871ec67b342f92eb3" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Int&lt;/code&gt; value, whereas the most significant 32 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;ULong&lt;/code&gt; 値の最下位32ビットはこの &lt;code&gt;Int&lt;/code&gt; 値のビットと同じですが、最上位32ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="098196788f072e1b90241673f7cd1c8d4ddc487e" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UInt&lt;/code&gt; value, whereas the most significant 32 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;ULong&lt;/code&gt; 値の最下位32ビットはこの &lt;code&gt;UInt&lt;/code&gt; 値のビットと同じですが、最上位32ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="1e95934eab4e475329950f2eb8e7a3a03516b89c" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Char&lt;/code&gt; code are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 8 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;Char&lt;/code&gt; コードの最下位8ビットはこの &lt;code&gt;Byte&lt;/code&gt; 値のビットと同じですが、最上位8ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="1ccfa3d5b3f0d4c2cadb8ddee394a5e74b7f3fb0" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 24 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;Int&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;Byte&lt;/code&gt; 値のビットと同じですが、最上位24ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="682e9bb2df532a75f2a73fb4a8682c3fe53c3f6f" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 24 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;Int&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;UByte&lt;/code&gt; 値のビットと同じですが、最上位24ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="740b8988c3d828c3ba10680439510f32d7f08bd4" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 56 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;Long&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;Byte&lt;/code&gt; 値のビットと同じですが、最上位56ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="f2986e4bdb9623eb7b0be806904f6c45008e66a1" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 56 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;Long&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;UByte&lt;/code&gt; 値のビットと同じですが、最上位56ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="da411f42fa8b3bbe7fd6d9ed1a7edbedcead90c8" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Short&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 8 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;Short&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;Byte&lt;/code&gt; 値のビットと同じですが、最上位8ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="dbca88370b969aea0b645fa67d458151bf144ef3" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Short&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 8 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;Short&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;UByte&lt;/code&gt; 値のビットと同じですが、最上位8ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="0705f7403c9d4340ca48e777c703d467c71d6c8f" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 24 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;UInt&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;Byte&lt;/code&gt; 値のビットと同じですが、最上位24ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="e35a3b71a791931b3596ab2bd1edb46d9365dda1" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 24 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;UInt&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;UByte&lt;/code&gt; 値のビットと同じですが、最上位24ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="fbe359060636f5088c741be0b327d7d46254bbcd" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 56 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;ULong&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;Byte&lt;/code&gt; 値のビットと同じですが、最上位56ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="9d9c37d2ab226e9ed58e44937eac9a5c2afe8841" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 56 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;ULong&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;UByte&lt;/code&gt; 値のビットと同じですが、最上位56ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="573a497b93bab09d8947aa89f58fd5f36237628f" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UShort&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 8 bits are filled with the sign bit of this value.</source>
          <target state="translated">結果の &lt;code&gt;UShort&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;Byte&lt;/code&gt; 値のビットと同じですが、最上位8ビットはこの値の符号ビットで埋められます。</target>
        </trans-unit>
        <trans-unit id="d49f6edce25857427bee05e2a6463c8f203f6aab" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UShort&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 8 bits are filled with zeros.</source>
          <target state="translated">結果の &lt;code&gt;UShort&lt;/code&gt; 値の最下位8ビットはこの &lt;code&gt;UByte&lt;/code&gt; 値のビットと同じですが、最上位8ビットはゼロで埋められます。</target>
        </trans-unit>
        <trans-unit id="1511f8695777128c7450dc6f9cc52fbdbfc512c7" translate="yes" xml:space="preserve">
          <source>The less obvious cases that belong to the &quot;grey area&quot; include handling corner cases differently, throwing an exception of a different type than before, changing behavior observable only through reflection, changes in undocumented/undefined behavior, renaming binary artifacts, etc. Sometimes such changes are very important and affect migration experience dramatically, sometimes they are insignificant.</source>
          <target state="translated">グレーゾーン」に属するあまり目立たないケースとしては、コーナーケースを別の方法で扱う、以前とは異なるタイプの例外を投げる、反射によってのみ観察可能な動作を変更する、文書化されていない/定義されていない動作を変更する、バイナリのアーティファクトの名前を変更する、などがあります。このような変更は非常に重要であり、マイグレーションの経験に劇的な影響を与えることもあれば、取るに足らない変更であることもあります。</target>
        </trans-unit>
        <trans-unit id="dd894256ff253457e13d98fae75ab576481e876c" translate="yes" xml:space="preserve">
          <source>The library format</source>
          <target state="translated">図書館のフォーマット</target>
        </trans-unit>
        <trans-unit id="c48fdef888f67d5a66f513cae58be8d045c058e0" translate="yes" xml:space="preserve">
          <source>The library has been created in the current directory:</source>
          <target state="translated">カレントディレクトリにライブラリが作成されました。</target>
        </trans-unit>
        <trans-unit id="cff219119dad603b83453d082db1d0aa5cce3800" translate="yes" xml:space="preserve">
          <source>The lines returned do not include terminating line separators.</source>
          <target state="translated">返された行には、終端行の区切り文字が含まれていません。</target>
        </trans-unit>
        <trans-unit id="c55560496e55797a8f7e15a83a7eef3064d61d19" translate="yes" xml:space="preserve">
          <source>The list can be empty:</source>
          <target state="translated">リストは空にすることができます。</target>
        </trans-unit>
        <trans-unit id="0ec3834f8762f850d976d74a3444d0d24d17d417" translate="yes" xml:space="preserve">
          <source>The list is expected to be sorted so that the signs of the &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearch.T,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function's return values ascend on the list elements, i.e. negative values come before zero and zeroes come before positive values. Otherwise, the result is undefined.</source>
          <target state="translated">リストは、&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearch.T,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数の戻り値の符号がリスト要素で昇るように並べ替えられることが期待されます。つまり、負の値はゼロの前にあり、ゼロは正の値の前にあります。それ以外の場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="ecc031fda17a51efc3a0c6e7f3483a236bf69e52" translate="yes" xml:space="preserve">
          <source>The list of immediate supertypes of this class, in the order they are listed in the source code.</source>
          <target state="translated">このクラスの即時スーパータイプのリスト。</target>
        </trans-unit>
        <trans-unit id="37daaa29c5ab04c74e60f96a3c80a72671943c78" translate="yes" xml:space="preserve">
          <source>The list of possible time measurement units, in which a duration can be expressed.</source>
          <target state="translated">持続時間を表すことができる時間測定単位のリスト。</target>
        </trans-unit>
        <trans-unit id="e7cfcc4e5ebb2fa63d0c44bdcf02351c03c9e8d4" translate="yes" xml:space="preserve">
          <source>The list of the immediate subclasses if this class is a sealed class, or an empty list otherwise.</source>
          <target state="translated">このクラスが封印されたクラスである場合はその直後のサブクラスのリスト、そうでない場合は空のリスト。</target>
        </trans-unit>
        <trans-unit id="af028a3423820dfb61266857373312e6321072a9" translate="yes" xml:space="preserve">
          <source>The list of type parameters of this callable.</source>
          <target state="translated">このコールアブルの型パラメータのリスト。</target>
        </trans-unit>
        <trans-unit id="3983145b3c17efebd4ca1c3dd6839e784929aaa8" translate="yes" xml:space="preserve">
          <source>The list of type parameters of this class. This list does &lt;em&gt;not&lt;/em&gt; include type parameters of outer classes.</source>
          <target state="translated">このクラスの型パラメーターのリスト。このリストには、外部クラスの型パラメーターは含まれていませ&lt;em&gt;ん&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5e5604d93ac6b4b21b3fc3fde66a87e1782f115e" translate="yes" xml:space="preserve">
          <source>The list passed as a receiver to the &lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">レシーバーとして&lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderActionに&lt;/a&gt;渡されるリストは、その関数内でのみ有効です。関数の外で使用すると、不特定の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="58bea952dbde503be437ceaa0dd1f57601cd3546" translate="yes" xml:space="preserve">
          <source>The list passed as a receiver to the &lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">レシーバーとして&lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderActionに&lt;/a&gt;渡されるリストは、その関数内でのみ有効です。関数の外で使用すると、不特定の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="7dd6f3d5d8e8c83c9d11a7ed45e7362cc872b1a5" translate="yes" xml:space="preserve">
          <source>The locking in this example is fine-grained, so it pays the price. However, it is a good choice for some situations where you absolutely must modify some shared state periodically, but there is no natural thread that this state is confined to.</source>
          <target state="translated">この例のロックは細かいので、その代償を払っています。しかし、共有された状態を定期的に絶対に変更しなければならないが、この状態が制限されている自然なスレッドが存在しないというような状況には良い選択です。</target>
        </trans-unit>
        <trans-unit id="993a245cc6dcc5a6d2356a7f7d1259d26b6ea137" translate="yes" xml:space="preserve">
          <source>The loop variable(s), if any, must be declared outside of the &lt;code&gt;while&lt;/code&gt; loop, and are therefore available for inspection afterwards, at which point they will contain the value(s) that made the loop condition false.</source>
          <target state="translated">ループ変数がある場合は、 &lt;code&gt;while&lt;/code&gt; ループの外で宣言する必要があるため、後で検査できるようになり、その時点でループ条件がfalseになった値が含まれます。</target>
        </trans-unit>
        <trans-unit id="f10abe77e5b16e3b7aa73cabd19e9ac919e5868d" translate="yes" xml:space="preserve">
          <source>The main code is straightforward:</source>
          <target state="translated">メインのコードは簡単です。</target>
        </trans-unit>
        <trans-unit id="21b17843ae6bab256e1f2d7c26e40966048480db" translate="yes" xml:space="preserve">
          <source>The main code starts and connects the whole pipeline:</source>
          <target state="translated">メインコードが起動し、パイプライン全体を接続します。</target>
        </trans-unit>
        <trans-unit id="1415e580114f63d99c0e8622a1104c3c733c68ba" translate="yes" xml:space="preserve">
          <source>The main disadvantage of changing the code style in an existing project is that the blame/annotate VCS feature will point to irrelevant commits more often. While each VCS has some kind of way to deal with this problem (&lt;a href=&quot;https://www.jetbrains.com/help/idea/investigate-changes.html&quot;&gt;&quot;Annotate Previous Revision&quot;&lt;/a&gt; can be used in IntelliJ IDEA), it's important to decide if a new style is worth all the effort. The practice of separating reformatting commits from meaningful changes can help a lot with later investigations.</source>
          <target state="translated">既存のプロジェクトでコードスタイルを変更することの主な欠点は、VCMの注釈/注釈機能が、無関係なコミットをより頻繁に指すようになることです。各VCSにはこの問題に対処するための何らかの方法がありますが（&lt;a href=&quot;https://www.jetbrains.com/help/idea/investigate-changes.html&quot;&gt;「以前のリビジョンの注釈」&lt;/a&gt;はIntelliJ IDEAで使用できます）、新しいスタイルがすべての努力に値するかどうかを判断することが重要です。再フォーマットのコミットと意味のある変更を分離することは、後の調査で非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="f0255c27371bb337a0275ae99c66e66aefbb2cf2" translate="yes" xml:space="preserve">
          <source>The main function just launches a coroutine to print results of &lt;code&gt;switchMapDeferreds&lt;/code&gt; and sends some test data to it:</source>
          <target state="translated">メイン関数はコルーチンを起動して、 &lt;code&gt;switchMapDeferreds&lt;/code&gt; の結果を出力し、テストデータを送信します。</target>
        </trans-unit>
        <trans-unit id="3fc6ee8401f75644154b5d3dd20d9f0be0f58394" translate="yes" xml:space="preserve">
          <source>The main rules regarding expected and actual declarations are:</source>
          <target state="translated">予想される宣言と実際の宣言に関する主なルールは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c0a11bc5688f898de97456dfcb543cf05d79b8a1" translate="yes" xml:space="preserve">
          <source>The main thread (that runs the &lt;code&gt;main()&lt;/code&gt; function) must wait until our coroutine completes, otherwise the program ends before &lt;code&gt;Hello&lt;/code&gt; is printed.</source>
          <target state="translated">（ &lt;code&gt;main()&lt;/code&gt; 関数を実行する）メインスレッドは、コルーチンが完了するまで待機する必要があります。そうでない場合、プログラムは &lt;code&gt;Hello&lt;/code&gt; が出力される前に終了します。</target>
        </trans-unit>
        <trans-unit id="42842e42bea5093cdb441dde49057dadae37db65" translate="yes" xml:space="preserve">
          <source>The map passed as a receiver to the &lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">レシーバーとして&lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderActionに&lt;/a&gt;渡されるマップは、その関数内でのみ有効です。関数の外で使用すると、不特定の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="a53f2c2933b5a52627852e1c168f9c0fc9ce94e1" translate="yes" xml:space="preserve">
          <source>The map passed as a receiver to the &lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">レシーバーとして&lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderActionに&lt;/a&gt;渡されるマップは、その関数内でのみ有効です。関数の外で使用すると、不特定の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="2c831066dd6087f2516b15d01bfb68e39b9bcf05" translate="yes" xml:space="preserve">
          <source>The maximum number of substrings to return. Zero by default means no limit is set.</source>
          <target state="translated">返す部分文字列の最大数。デフォルトでは0は制限が設定されていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="4e76f165176d7e28c6b59c285a7ee8af5a71fc72" translate="yes" xml:space="preserve">
          <source>The maximum radix available for conversion to and from strings.</source>
          <target state="translated">文字列への変換と文字列からの変換で利用可能な最大基数。</target>
        </trans-unit>
        <trans-unit id="38f9246447f2685e9dd36b4c8d7e0bf7ff2fb023" translate="yes" xml:space="preserve">
          <source>The maximum value in the range (inclusive).</source>
          <target state="translated">範囲内の最大値(含む)。</target>
        </trans-unit>
        <trans-unit id="cc9397547e8b9fc8e2131246f8cce9b80a975147" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode code point. Kotlin/Native specific.</source>
          <target state="translated">Unicodeコードポイントの最大値。Kotlin/ネイティブ固有。</target>
        </trans-unit>
        <trans-unit id="af496c450bf387c2b7d7ee0dc32c766b9f1b66c1" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode high-surrogate code unit.</source>
          <target state="translated">Unicode ハイサロゲートコード単位の最大値。</target>
        </trans-unit>
        <trans-unit id="68f9d655dde4db0c3b71fc09c97d0f87e103d52b" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode low-surrogate code unit.</source>
          <target state="translated">Unicode ローサロゲートコード単位の最大値。</target>
        </trans-unit>
        <trans-unit id="0cb5887284a08dd04202e0863d133d8ed431392d" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode surrogate code unit.</source>
          <target state="translated">Unicodeサロゲートコード単位の最大値。</target>
        </trans-unit>
        <trans-unit id="ea009c16dc0030623058aff99eec7f7c7973366c" translate="yes" xml:space="preserve">
          <source>The maximum value of a character code unit.</source>
          <target state="translated">文字コード単位の最大値。</target>
        </trans-unit>
        <trans-unit id="dce9edb79f3aca5450e6dfb555e231182e2c5340" translate="yes" xml:space="preserve">
          <source>The meaning of a visibility modifier depends on whether it's applied to a top-level declaration or to a declaration inside a class. For top-level declarations:</source>
          <target state="translated">visibility修飾子の意味は、それがトップレベル宣言に適用されるか、クラス内の宣言に適用されるかによって異なります。トップレベル宣言の場合。</target>
        </trans-unit>
        <trans-unit id="2f5715d8d7aab68289e0b8a47e46f1764f30f76e" translate="yes" xml:space="preserve">
          <source>The message explaining the deprecation and recommending an alternative API to use.</source>
          <target state="translated">非推奨を説明するメッセージと、使用する代替APIを推奨するメッセージです。</target>
        </trans-unit>
        <trans-unit id="1d7af1b2ed876762350f57904a38e801662ebbf4" translate="yes" xml:space="preserve">
          <source>The meta-runner for Kotlin is available on &lt;a href=&quot;https://github.com/jonnyzzz/Kotlin.TeamCity&quot;&gt;GitHub&lt;/a&gt;. If using TeamCity 9 or above, we can now simply import that meta-runner from the TeamCity user interface</source>
          <target state="translated">Kotlinのメタランナーは&lt;a href=&quot;https://github.com/jonnyzzz/Kotlin.TeamCity&quot;&gt;GitHub&lt;/a&gt;で入手できます。TeamCity 9以上を使用している場合、TeamCityユーザーインターフェイスからメタランナーをインポートするだけで済みます</target>
        </trans-unit>
        <trans-unit id="cbb5d37dc4d790a9dba2a103cd7fc2ea1af9db2f" translate="yes" xml:space="preserve">
          <source>The minimum radix available for conversion to and from strings.</source>
          <target state="translated">文字列への変換と文字列からの変換で利用可能な最小基数。</target>
        </trans-unit>
        <trans-unit id="3eb6b21e0f2a2eb117e5ca90292e6def24614862" translate="yes" xml:space="preserve">
          <source>The minimum value in the range.</source>
          <target state="translated">範囲内の最小値。</target>
        </trans-unit>
        <trans-unit id="480df25e783a3ddb0c5eabcc07d40b9a21fd328e" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode code point. Kotlin/Native specific.</source>
          <target state="translated">Unicode コードポイントの最小値。Kotlin/ネイティブ固有。</target>
        </trans-unit>
        <trans-unit id="c11b4b4a4cfd50662da801109ced72e7ef8083ad" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode high-surrogate code unit.</source>
          <target state="translated">Unicode ハイサロゲートコード単位の最小値。</target>
        </trans-unit>
        <trans-unit id="7a57e546e08f3cd66a3ed8cebd57f37a4137a78d" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode low-surrogate code unit.</source>
          <target state="translated">Unicode ローサロゲートコード単位の最小値。</target>
        </trans-unit>
        <trans-unit id="47b523f1a39e9c9f7bda17fc85b300ab3e0da311" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode surrogate code unit.</source>
          <target state="translated">Unicodeサロゲートコード単位の最小値。</target>
        </trans-unit>
        <trans-unit id="e3fc4d1ab4988e695801daf57bd33d3f470c3668" translate="yes" xml:space="preserve">
          <source>The minimum value of a character code unit.</source>
          <target state="translated">文字コード単位の最小値。</target>
        </trans-unit>
        <trans-unit id="d80a9d6c0ddeb1216ece2df4cc2d7d63382408e4" translate="yes" xml:space="preserve">
          <source>The minimum value of a supplementary code point, &lt;code&gt;\u0x10000&lt;/code&gt;. Kotlin/Native specific.</source>
          <target state="translated">補助コードポイントの最小値 &lt;code&gt;\u0x10000&lt;/code&gt; 。Kotlin /ネイティブ固有。</target>
        </trans-unit>
        <trans-unit id="39042f06ab046e1bfc15de4ecf52d5a28eec3294" translate="yes" xml:space="preserve">
          <source>The modifier can be used on &lt;code&gt;var&lt;/code&gt; properties declared inside the body of a class (not in the primary constructor, and only when the property does not have a custom getter or setter) and, since Kotlin 1.2, for top-level properties and local variables. The type of the property or variable must be non-null, and it must not be a primitive type.</source>
          <target state="translated">修飾子は、クラスの本体内で宣言された &lt;code&gt;var&lt;/code&gt; プロパティ（プライマリコンストラクターではなく、プロパティにカスタムゲッターまたはセッターがない場合のみ）で使用できます。Kotlin1.2以降、トップレベルのプロパティとローカル変数に使用できます。 。プロパティまたは変数の型はnull以外である必要があり、プリミティブ型であってはなりません。</target>
        </trans-unit>
        <trans-unit id="bb919d11f95900a1425b0a32e4257389d1fc669f" translate="yes" xml:space="preserve">
          <source>The most &quot;natural&quot; placement is in the object &lt;code&gt;nativeHeap&lt;/code&gt;. It corresponds to allocating native memory with &lt;code&gt;malloc&lt;/code&gt; and provides an additional &lt;code&gt;.free()&lt;/code&gt; operation to free allocated memory:</source>
          <target state="translated">最も「自然な」配置は、オブジェクト &lt;code&gt;nativeHeap&lt;/code&gt; 内にあります。これは、 &lt;code&gt;malloc&lt;/code&gt; によるネイティブメモリの割り当てに対応し、割り当てられたメモリを解放するための追加の &lt;code&gt;.free()&lt;/code&gt; 操作を提供します。</target>
        </trans-unit>
        <trans-unit id="0d14eba091c54d0c22e0562741651e98077e032c" translate="yes" xml:space="preserve">
          <source>The most basic reflection feature is getting the runtime reference to a Kotlin class. To obtain the reference to a statically known Kotlin class, you can use the &lt;em&gt;class literal&lt;/em&gt; syntax:</source>
          <target state="translated">最も基本的なリフレクション機能は、Kotlinクラスへのランタイム参照を取得することです。静的に既知のKotlinクラスへの参照を取得するには、&lt;em&gt;クラスリテラル&lt;/em&gt;構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="ae0dbb4ff6b4fc6cc9b694111494978916ff6daf" translate="yes" xml:space="preserve">
          <source>The most basic usage of enum classes is implementing type-safe enums:</source>
          <target state="translated">enumクラスの最も基本的な使い方は、型安全なenumを実装することです。</target>
        </trans-unit>
        <trans-unit id="564a165b2993e039b868e117559d08b7cdc98e88" translate="yes" xml:space="preserve">
          <source>The most common kind of properties simply reads from (and maybe writes to) a backing field. On the other hand, with custom getters and setters one can implement any behaviour of a property. Somewhere in between, there are certain common patterns of how a property may work. A few examples: lazy values, reading from a map by a given key, accessing a database, notifying listener on access, etc.</source>
          <target state="translated">最も一般的なプロパティの種類は、単にバッキングフィールドから読み出す(そして多分書き込む)だけです。一方、カスタムゲッターやセッターを使えば、プロパティのあらゆる動作を実装することができます。その中間のどこかに、プロパティがどのように動作するかについて、ある種の一般的なパターンがあります。いくつかの例としては、遅延値、与えられたキーによるマップからの読み込み、データベースへのアクセス、アクセス時のリスナーへの通知などがあります。</target>
        </trans-unit>
        <trans-unit id="d5cbdfb8e81de653dd867a75b87523ff1d242141" translate="yes" xml:space="preserve">
          <source>The most common type of constraint is an &lt;strong&gt;upper bound&lt;/strong&gt; that corresponds to Java's &lt;em&gt;extends&lt;/em&gt; keyword:</source>
          <target state="translated">最も一般的なタイプの制約は、Javaの&lt;em&gt;extends&lt;/em&gt;キーワードに対応する&lt;strong&gt;上限&lt;/strong&gt;です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="368d747cfcb5fb4e353c85a7469dfacbb5453495" translate="yes" xml:space="preserve">
          <source>The most common way to create a collection is with the standard library functions &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/list-of&quot;&gt;&lt;code&gt;listOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/set-of&quot;&gt;&lt;code&gt;setOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-list-of&quot;&gt;&lt;code&gt;mutableListOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-set-of&quot;&gt;&lt;code&gt;mutableSetOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;. If you provide a comma-separated list of collection elements as arguments, the compiler detects the element type automatically. When creating empty collections, specify the type explicitly.</source>
          <target state="translated">コレクションを作成する最も一般的な方法は、標準ライブラリ関数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/list-of&quot;&gt; &lt;code&gt;listOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/set-of&quot;&gt; &lt;code&gt;setOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-list-of&quot;&gt; &lt;code&gt;mutableListOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-set-of&quot;&gt; &lt;code&gt;mutableSetOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt;です。コレクション要素のコンマ区切りのリストを引数として指定すると、コンパイラーは要素タイプを自動的に検出します。空のコレクションを作成する場合は、タイプを明示的に指定してください。</target>
        </trans-unit>
        <trans-unit id="8af07c08b76ea4e058b575d399481b358534d1dd" translate="yes" xml:space="preserve">
          <source>The most common webpack adjustments can be made directly via the &lt;code&gt;kotlin.js.browser.webpackTask&lt;/code&gt; configuration block in the Gradle build file.</source>
          <target state="translated">最も一般的なWebpackの調整は、Gradleビルドファイルの &lt;code&gt;kotlin.js.browser.webpackTask&lt;/code&gt; 構成ブロックを介して直接行うことができます。</target>
        </trans-unit>
        <trans-unit id="b853cf446ccffab0ecfd031a6ec9cd9f7555703c" translate="yes" xml:space="preserve">
          <source>The most notable change is in the continuation indentation policy. There's a nice idea to use the double indent for showing that a multi-line expression hasn't ended on the previous line. This is a very simple and general rule, but several Kotlin constructions look a bit awkward when they are formatted this way. In Kotlin Coding Conventions it's recommended to use a single indent in cases where the long continuation indent has been forced before</source>
          <target state="translated">最も注目すべき変更点は、継続インデントのポリシーです。複数行の式が前の行で終わっていないことを示すためにダブルインデントを使うという良いアイデアがあります。これは非常にシンプルで一般的なルールですが、いくつかの Kotlin の構文がこのようにフォーマットされていると、少し不恰好に見えてしまいます。Kotlin のコーディング規約では、長い連続インデントが前の行で強制的に使われている場合はシングルインデントを使うことが推奨されています。</target>
        </trans-unit>
        <trans-unit id="e8c58687aab400a3400843ec6513c56c72bdb694" translate="yes" xml:space="preserve">
          <source>The most obvious practical reason to cancel execution of a coroutine is because its execution time has exceeded some timeout. While you can manually track the reference to the corresponding &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; and launch a separate coroutine to cancel the tracked one after delay, there is a ready to use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt; function that does it. Look at the following example:</source>
          <target state="translated">コルーチンの実行をキャンセルする最も明白な実用的な理由は、その実行時間がタイムアウトを超えたためです。対応する&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;ジョブ&lt;/a&gt;への参照を手動で追跡し、別のコルーチンを起動して追跡後に追跡をキャンセルできますが、それを実行する&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt;関数を使用する準備ができています。次の例を見てください。</target>
        </trans-unit>
        <trans-unit id="d08f23af81c5dad7c4dca8d8027b602b0ab864b4" translate="yes" xml:space="preserve">
          <source>The most peculiar feature of &lt;code&gt;dynamic&lt;/code&gt; is that we are allowed to call &lt;strong&gt;any&lt;/strong&gt; property or function with any parameters on a &lt;code&gt;dynamic&lt;/code&gt; variable:</source>
          <target state="translated">&lt;code&gt;dynamic&lt;/code&gt; の最も独特な機能は、 &lt;code&gt;dynamic&lt;/code&gt; 変数の任意のパラメーターで&lt;strong&gt;任意の&lt;/strong&gt;プロパティまたは関数を呼び出すことができることです。</target>
        </trans-unit>
        <trans-unit id="6d6182bd9b2931240a569f7b50076d9f1ba63de8" translate="yes" xml:space="preserve">
          <source>The most precise time source available in the platform.</source>
          <target state="translated">プラットフォームで利用可能な最も正確な時間ソース。</target>
        </trans-unit>
        <trans-unit id="3c05df95cb8e9db1a4f2601246ac944d5c8bd276" translate="yes" xml:space="preserve">
          <source>The multiplatform projects and multiplatform libraries are discussed in the &lt;a href=&quot;../../reference/multiplatform&quot;&gt;documentation&lt;/a&gt; too.</source>
          <target state="translated">マルチプラットフォームプロジェクトとマルチプラットフォームライブラリは、&lt;a href=&quot;../../reference/multiplatform&quot;&gt;ドキュメントで&lt;/a&gt;も説明されています。</target>
        </trans-unit>
        <trans-unit id="6595e5fe1547363b463835d421622aad398ae9cc" translate="yes" xml:space="preserve">
          <source>The name contains the following parts (some of them may be empty):</source>
          <target state="translated">名前には以下の部分が含まれています(一部空の場合があります)。</target>
        </trans-unit>
        <trans-unit id="be2bbb4b7f64e74c76f66a7956619caeb8e3f0ff" translate="yes" xml:space="preserve">
          <source>The name deque is short for &quot;double ended queue&quot; and is usually pronounced &quot;deck&quot;.</source>
          <target state="translated">デケという名前は「ダブル・エンド・キュー」の略で、通常は「デッキ」と発音します。</target>
        </trans-unit>
        <trans-unit id="705b141c8de1d697224950845ea5a1b7afb58d54" translate="yes" xml:space="preserve">
          <source>The name of a class is usually a noun or a noun phrase explaining what the class &lt;em&gt;is&lt;/em&gt;: &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;PersonReader&lt;/code&gt;.</source>
          <target state="translated">クラスの名前は通常、クラス&lt;em&gt;が&lt;/em&gt;何であるかを説明する名詞または名詞句&lt;em&gt;です&lt;/em&gt;： &lt;code&gt;List&lt;/code&gt; 、 &lt;code&gt;PersonReader&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2218455df585d83e3681475aae4631f54b57ae59" translate="yes" xml:space="preserve">
          <source>The name of a class used by itself (not as a qualifier to another name) acts as a reference to the companion object of the class (whether named or not):</source>
          <target state="translated">(別の名前の修飾子としてではなく)それ自身で使用されるクラスの名前は、そのクラスのコンパニオン・オブジェクトへの参照として機能します (名前が付いているかどうかに関わらず)。</target>
        </trans-unit>
        <trans-unit id="07fe46086dbe239fd375c49037bb37bff00ee0c4" translate="yes" xml:space="preserve">
          <source>The name of a method is usually a verb or a verb phrase saying what the method &lt;em&gt;does&lt;/em&gt;: &lt;code&gt;close&lt;/code&gt;, &lt;code&gt;readPersons&lt;/code&gt;. The name should also suggest if the method is mutating the object or returning a new one. For instance &lt;code&gt;sort&lt;/code&gt; is sorting a collection in place, while &lt;code&gt;sorted&lt;/code&gt; is returning a sorted copy of the collection.</source>
          <target state="translated">メソッドの名前は、通常、動詞またはメソッドが何を言っ動詞句で&lt;em&gt;行い&lt;/em&gt;： &lt;code&gt;close&lt;/code&gt; 、 &lt;code&gt;readPersons&lt;/code&gt; 。この名前は、メソッドがオブジェクトを変更しているか、新しいオブジェクトを返しているかも示します。たとえば、 &lt;code&gt;sort&lt;/code&gt; はコレクションを &lt;code&gt;sorted&lt;/code&gt; 、sortedはコレクションの並べ替えられたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="07c434a5d635392f2cc52f562338d62b0cd9ae9a" translate="yes" xml:space="preserve">
          <source>The name of the companion object can be omitted, in which case the name &lt;code&gt;Companion&lt;/code&gt; will be used:</source>
          <target state="translated">コンパニオンオブジェクトの名前は省略できます。その場合、 &lt;code&gt;Companion&lt;/code&gt; という名前が使用されます。</target>
        </trans-unit>
        <trans-unit id="ba35193d0490ae1490a81583acf93693abaa382e" translate="yes" xml:space="preserve">
          <source>The name of the file should describe what the code in the file does. Therefore, you should avoid using meaningless words such as &quot;Util&quot; in file names.</source>
          <target state="translated">ファイル名は、そのファイルのコードが何をするかを記述しなければなりません。そのため、ファイル名に「Util」のような意味のない言葉を使うのは避けるべきです。</target>
        </trans-unit>
        <trans-unit id="3aecf5d5ce4130f99667312567cec868e0f727ee" translate="yes" xml:space="preserve">
          <source>The name of the generated Java class can be changed using the &lt;code&gt;@JvmName&lt;/code&gt; annotation:</source>
          <target state="translated">生成されたJavaクラスの名前は、 &lt;code&gt;@JvmName&lt;/code&gt; アノテーションを使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="c5f1bfd2676f7023c48bd8f681608f158236c940" translate="yes" xml:space="preserve">
          <source>The name of the target (if specified) or the project</source>
          <target state="translated">ターゲットの名前(指定されている場合)またはプロジェクトの名前</target>
        </trans-unit>
        <trans-unit id="7eeccd568a57bbe2529083f026a7111bc3da5193" translate="yes" xml:space="preserve">
          <source>The name of the task that builds the resulting artifacts of this target.</source>
          <target state="translated">このターゲットの成果物を構築するタスクの名前。</target>
        </trans-unit>
        <trans-unit id="cbba3c187c456ab45b79f8154b1183097b8b2546" translate="yes" xml:space="preserve">
          <source>The name of this callable as it was declared in the source code. If the callable has no name, a special invented name is created. Nameless callables include:</source>
          <target state="translated">ソースコードで宣言されているこの呼び出し可能ファイルの名前。コールアブルに名前がない場合は、特別に考案された名前が作成されます。名前のない callable には、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="688bb052b4a717479ab8663cafb721fc37d4378a" translate="yes" xml:space="preserve">
          <source>The name of this type parameter as it was declared in the source code.</source>
          <target state="translated">ソース・コードで宣言されているこの型パラメータの名前。</target>
        </trans-unit>
        <trans-unit id="25f073ea1bd96da303a6eb4e8f3418d2fb774887" translate="yes" xml:space="preserve">
          <source>The names of Kotlin classes and interfaces are prefixed when imported to Objective-C. The prefix is derived from the framework name.</source>
          <target state="translated">Kotlinのクラスやインターフェースの名前は、Objective-Cにインポートする際に接頭辞が付けられます。プレフィックスはフレームワーク名に由来します。</target>
        </trans-unit>
        <trans-unit id="69675486a4053839ac9b38d8b7b0c3ec7c01c08b" translate="yes" xml:space="preserve">
          <source>The names of the tasks in Android Projects contain the &lt;a href=&quot;https://developer.android.com/studio/build/build-variants.html&quot;&gt;build variant&lt;/a&gt; names and follow the pattern &lt;code&gt;compile&amp;lt;BuildVariant&amp;gt;Kotlin&lt;/code&gt;, for example, &lt;code&gt;compileDebugKotlin&lt;/code&gt;, &lt;code&gt;compileReleaseUnitTestKotlin&lt;/code&gt;.</source>
          <target state="translated">Androidプロジェクトのタスクの名前には、&lt;a href=&quot;https://developer.android.com/studio/build/build-variants.html&quot;&gt;ビルドバリアント&lt;/a&gt;名が含まれ、 &lt;code&gt;compile&amp;lt;BuildVariant&amp;gt;Kotlin&lt;/code&gt; パターンに従います（例えば、 &lt;code&gt;compileDebugKotlin&lt;/code&gt; 、 &lt;code&gt;compileReleaseUnitTestKotlin&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="b01e22b1729a53f5c38e9b03b567bbe208d510c5" translate="yes" xml:space="preserve">
          <source>The names of these tasks were created from the formula: &lt;code&gt;run[Debug|Release]Executable&amp;lt;target name&amp;gt;&lt;/code&gt;, where &lt;code&gt;target name&lt;/code&gt; is the capitalized target name that we specified in the &lt;code&gt;build.gradle.kts&lt;/code&gt;&lt;code&gt;build.gradle&lt;/code&gt; file out of our build, &lt;code&gt;&quot;native&quot;&lt;/code&gt; in our case. Let's run the task in the IDE. For that, let's open the Gradle Tool Window and find the task in the list:</source>
          <target state="translated">これらのタスクの名前は、式 &lt;code&gt;run[Debug|Release]Executable&amp;lt;target name&amp;gt;&lt;/code&gt; から作成されました。ここで、 &lt;code&gt;target name&lt;/code&gt; は、ビルドの &lt;code&gt;build.gradle.kts&lt;/code&gt; &lt;code&gt;build.gradle&lt;/code&gt; ファイルで指定した大文字のターゲット名です。私たちの場合は &lt;code&gt;&quot;native&quot;&lt;/code&gt; 。IDEでタスクを実行してみましょう。そのために、Gradle Toolウィンドウを開いて、リストからタスクを見つけましょう。</target>
        </trans-unit>
        <trans-unit id="f0aa5ea5557fedda4c5d2598dc5dd22d0363ac01" translate="yes" xml:space="preserve">
          <source>The names should make it clear what the purpose of the entity is, so it's best to avoid using meaningless words (&lt;code&gt;Manager&lt;/code&gt;, &lt;code&gt;Wrapper&lt;/code&gt; etc.) in names.</source>
          <target state="translated">名前はエンティティの目的を明確にする必要があるため、名前に意味のない単語（ &lt;code&gt;Manager&lt;/code&gt; 、 &lt;code&gt;Wrapper&lt;/code&gt; など）を使用しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="73a31785499746e1755c5fd02e03d5e8b58c34d0" translate="yes" xml:space="preserve">
          <source>The native memory can be allocated using the &lt;code&gt;NativePlacement&lt;/code&gt; interface, e.g.</source>
          <target state="translated">ネイティブメモリは、 &lt;code&gt;NativePlacement&lt;/code&gt; インターフェイスを使用して割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="6a4f133dcc400189b06f4d2207b53017de6347ac" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;minOf()&lt;/code&gt; and &lt;code&gt;maxOf()&lt;/code&gt; extension functions return the minimum and the maximum value of the given selector function on the collection items.</source>
          <target state="translated">新しい &lt;code&gt;minOf()&lt;/code&gt; および &lt;code&gt;maxOf()&lt;/code&gt; 拡張関数は、コレクション項目で指定されたセレクター関数の最小値と最大値を返します。</target>
        </trans-unit>
        <trans-unit id="6cfd2a99b5ee1770b48531a2d8ca774ab1bcb143" translate="yes" xml:space="preserve">
          <source>The new Kotlin Project Wizard is both simple and flexible:</source>
          <target state="translated">新しいKotlinプロジェクトウィザードはシンプルで柔軟性に富んでいます。</target>
        </trans-unit>
        <trans-unit id="ac86d0e3a5fa4aec1c8749b2e4a7eed7297032b2" translate="yes" xml:space="preserve">
          <source>The new Kotlin compiler is going to be really fast; it will unify all the supported platforms and provide an API for compiler extensions. It's a long-term project, and we've already completed several steps in Kotlin 1.4.0:</source>
          <target state="translated">新しいKotlinコンパイラは本当に速くなるでしょう。サポートされているすべてのプラットフォームを統一し、コンパイラ拡張のためのAPIを提供します。これは長期的なプロジェクトで、Kotlin 1.4.0ではすでにいくつかのステップを完了しています。</target>
        </trans-unit>
        <trans-unit id="77d2be187e310c20f8b1c1ee15e1c6d7e97f9c01" translate="yes" xml:space="preserve">
          <source>The new algorithm fixes this issue, and you can pass a lambda instead of a SAM interface in any case, which is the way you&amp;rsquo;d naturally expect it to work.</source>
          <target state="translated">新しいアルゴリズムはこの問題を修正し、どのような場合でもSAMインターフェースの代わりにラムダを渡すことができます。これは当然のことながら機能すると予想される方法です。</target>
        </trans-unit>
        <trans-unit id="52a6cfa7e4d5ffdd8d860b7ad7120de82ac44b6c" translate="yes" xml:space="preserve">
          <source>The new experimental REPL API is now a part of the Kotlin Scripting API. There are also several implementations of it in the published artifacts, and some have advanced functionality, such as code completion. We use this API in the &lt;a href=&quot;https://blog.jetbrains.com/kotlin/2020/05/kotlin-kernel-for-jupyter-notebook-v0-8/&quot;&gt;Kotlin Jupyter kernel&lt;/a&gt; and now you can try it in your own custom shells and REPLs.</source>
          <target state="translated">新しい実験的なREPLAPIは、Kotlin ScriptingAPIの一部になりました。公開されたアーティファクトにもいくつかの実装があり、コード補完などの高度な機能を備えたものもあります。このAPIは&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2020/05/kotlin-kernel-for-jupyter-notebook-v0-8/&quot;&gt;KotlinJupyterカーネルで&lt;/a&gt;使用されており、独自のカスタムシェルとREPLで試すことができます。</target>
        </trans-unit>
        <trans-unit id="5055c5b1026a40b7ffc10fd81a86667db3798a42" translate="yes" xml:space="preserve">
          <source>The new inference algorithm infers types for many cases where the old algorithm required you to specify them explicitly. For instance, in the following example the type of the lambda parameter &lt;code&gt;it&lt;/code&gt; is correctly inferred to &lt;code&gt;String?&lt;/code&gt;:</source>
          <target state="translated">新しい推論アルゴリズムは、古いアルゴリズムで明示的に指定する必要がある多くの場合にタイプを推論します。たとえば、次の例では、ラムダパラメータの種類は、 &lt;code&gt;it&lt;/code&gt; 正しくに推察される &lt;code&gt;String?&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="672732f66c4b7f92d3ecbdaaf0ac7fbe6cc851d3" translate="yes" xml:space="preserve">
          <source>The new project opens. &lt;a href=&quot;mpp-discover-project&quot;&gt;Discover what it includes&lt;/a&gt;.</source>
          <target state="translated">新しいプロジェクトが開きます。&lt;a href=&quot;mpp-discover-project&quot;&gt;それが何を含んで&lt;/a&gt;いるかを発見してください。</target>
        </trans-unit>
        <trans-unit id="183994f4ebd6d698ee09d0ba15ca6b6ca68c9e19" translate="yes" xml:space="preserve">
          <source>The next lines are about providing linker and compiler options, which can vary depending on different target platforms. In our case, we are defining it for macOS (the &lt;code&gt;.osx&lt;/code&gt; suffix) and Linux (the &lt;code&gt;.linux&lt;/code&gt; suffix). Parameters without a suffix is also possible (e.g. &lt;code&gt;linkerOpts=&lt;/code&gt;) and will be applied to all platforms.</source>
          <target state="translated">次の行は、リンカーとコンパイラのオプションを提供することです。これらのオプションは、ターゲットプラットフォームによって異なる場合があります。私たちのケースでは、MacOSのためにそれを定義している（ &lt;code&gt;.osx&lt;/code&gt; 接尾辞）とLinux（ &lt;code&gt;.linux&lt;/code&gt; 接尾辞）。接尾辞のないパラメータも可能で（ &lt;code&gt;linkerOpts=&lt;/code&gt; ）、すべてのプラットフォームに適用されます。</target>
        </trans-unit>
        <trans-unit id="5a6c6de321d2f0ef15a3d35472d5a5225a93083f" translate="yes" xml:space="preserve">
          <source>The next part of the &lt;code&gt;&amp;lt;Framework&amp;gt;/Headers/Demo.h&lt;/code&gt; contains number type mappings between Kotlin/Native and &lt;code&gt;NSNumber&lt;/code&gt;. We have the base class called &lt;code&gt;DemoNumber&lt;/code&gt; in Objective-C and &lt;code&gt;KotlinNumber&lt;/code&gt; in Swift. It extends &lt;code&gt;NSNumber&lt;/code&gt;. There are also child classes per Kotlin number type:</source>
          <target state="translated">&lt;code&gt;&amp;lt;Framework&amp;gt;/Headers/Demo.h&lt;/code&gt; の次の部分には、Kotlin / Nativeと &lt;code&gt;NSNumber&lt;/code&gt; の間の数値型マッピングが含まれています。Objective-C &lt;code&gt;DemoNumber&lt;/code&gt; という基本クラスがあり、Swift &lt;code&gt;KotlinNumber&lt;/code&gt; があります。 &lt;code&gt;NSNumber&lt;/code&gt; を拡張します。Kotlin数値タイプごとに子クラスもあります。</target>
        </trans-unit>
        <trans-unit id="cfe4a47831305057cc6388a57b9e77a3a7e3a7a8" translate="yes" xml:space="preserve">
          <source>The next part of the &lt;code&gt;libnative_api.h&lt;/code&gt; file contains definitions of the types that are used in the library:</source>
          <target state="translated">&lt;code&gt;libnative_api.h&lt;/code&gt; ファイルの次の部分には、ライブラリで使用されるタイプの定義が含まれています。</target>
        </trans-unit>
        <trans-unit id="dc72aec2231c401cec520bbf86ad2595019584f0" translate="yes" xml:space="preserve">
          <source>The next step is going to prompt us on the Kotlin runtime library. By default the plugin selects the one that is associated to the currently installed version. Unless we want to create a different one, we can click Finish at this point after entering the project name and location.</source>
          <target state="translated">次のステップではKotlinのランタイムライブラリを確認します。デフォルトでは、プラグインは現在インストールされているバージョンに関連付けられているものを選択します。別のライブラリを作成したい場合を除いて、プロジェクト名と場所を入力した後、この時点で終了をクリックしてください。</target>
        </trans-unit>
        <trans-unit id="93716c2cabdff509bf9835ed635452819990ca4f" translate="yes" xml:space="preserve">
          <source>The next step is to call a C function pointer from a C pointer that we have from the &lt;code&gt;supply_fun()&lt;/code&gt; call:</source>
          <target state="translated">次のステップは、 &lt;code&gt;supply_fun()&lt;/code&gt; 呼び出しから取得したCポインターからC関数ポインターを呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="4c075c67c98b72698b50bde83417679cfcaad540" translate="yes" xml:space="preserve">
          <source>The next step is to compile our application. We already covered the basics of compiling a Kotlin/Native application from the command line in the &lt;a href=&quot;basic-kotlin-native-app&quot;&gt;A Basic Kotlin/Native application&lt;/a&gt; tutorial. The only difference in this case is that the &lt;code&gt;cinterop&lt;/code&gt; generated part is implicitly included into the build: Let's call the following command:</source>
          <target state="translated">次のステップは、アプリケーションをコンパイルすることです。コマンドラインからのKotlin / Nativeアプリケーションのコンパイルの基本については、&lt;a href=&quot;basic-kotlin-native-app&quot;&gt;A基本的なKotlin / Nativeアプリケーションの&lt;/a&gt;チュートリアルですでに説明しました。この場合の唯一の違いは、 &lt;code&gt;cinterop&lt;/code&gt; で生成された部分が暗黙的にビルドに含まれることです。次のコマンドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="29eb1a88978e11cb19e6153185329a8fdd184b9c" translate="yes" xml:space="preserve">
          <source>The next step is to create Greeting Data class that has two properties: &lt;em&gt;id&lt;/em&gt; and a &lt;em&gt;content&lt;/em&gt;</source>
          <target state="translated">次のステップでは、&lt;em&gt;id&lt;/em&gt;と&lt;em&gt;content&lt;/em&gt;という2つのプロパティを持つGreeting Dataクラスを作成します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f2ba2b214cfaccb2ec50010bfe1a0d121ee2cd4b" translate="yes" xml:space="preserve">
          <source>The next step is to create a Run Configuration in IntelliJ IDEA under Tomcat / Local which deploys the WAR and starts up Tomcat.</source>
          <target state="translated">次のステップでは、Tomcat/Localの下にIntelliJ IDEAでRun Configurationを作成し、WARをデプロイしてTomcatを起動します。</target>
        </trans-unit>
        <trans-unit id="27ce517e143c3dea9eb55849f860e4c5596ec3f9" translate="yes" xml:space="preserve">
          <source>The next step is to decide which modules to configure (if the project has more than one module) and whether you want to add the runtime library to the project or use those provided by the current Kotlin plugin.</source>
          <target state="translated">次のステップでは、どのモジュールを設定するか(プロジェクトに複数のモジュールがある場合)、ランタイムライブラリをプロジェクトに追加するか、現在のKotlinプラグインで提供されているものを使用するかを決定します。</target>
        </trans-unit>
        <trans-unit id="22779d3ccc120e4892af96a829245aa095780550" translate="yes" xml:space="preserve">
          <source>The non-abstract subclasses should represent the (complete) C data type and thus specify size and alignment. Each such subclass must have a companion object which is a &lt;a href=&quot;-type/index&quot;&gt;Type&lt;/a&gt;.</source>
          <target state="translated">非抽象サブクラスは、（完全な）Cデータ型を表し、サイズと配置を指定する必要があります。そのような各サブクラスには、&lt;a href=&quot;-type/index&quot;&gt;Type&lt;/a&gt;であるコンパニオンオブジェクトが必要です。</target>
        </trans-unit>
        <trans-unit id="fc28129df689ae65c9fd83a31b9aa03dac9e8ced" translate="yes" xml:space="preserve">
          <source>The non-breaking space character</source>
          <target state="translated">壊れない空間キャラ</target>
        </trans-unit>
        <trans-unit id="e8f00eeeaaa301ab094d387f05d45fa33541dead" translate="yes" xml:space="preserve">
          <source>The nullable version &lt;code&gt;Nothing?&lt;/code&gt; will be used by the compiler when something is initialized with null and there is no other type information. In &lt;code&gt;val x = null&lt;/code&gt;, the type of &lt;code&gt;x&lt;/code&gt; will be &lt;code&gt;Nothing?&lt;/code&gt;. This type does not have the &quot;never returns normally&quot; semantics; instead, the compiler knows that the value will always be null.</source>
          <target state="translated">null許容バージョン &lt;code&gt;Nothing?&lt;/code&gt; 何かがnullで初期化され、他の型情報がない場合、コンパイラによって使用されます。では &lt;code&gt;val x = null&lt;/code&gt; 、のタイプ &lt;code&gt;x&lt;/code&gt; はなり &lt;code&gt;Nothing?&lt;/code&gt; 。このタイプには、「通常は戻らない」というセマンティクスはありません。代わりに、コンパイラは値が常にnullであることを認識しています。</target>
        </trans-unit>
        <trans-unit id="77363aca1573dd5dba20e28ad666c9c7fd83436a" translate="yes" xml:space="preserve">
          <source>The number is converted to a string and then the string is converted to a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimal&lt;/a&gt;.</source>
          <target state="translated">数値は文字列に変換され、次に文字列は&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimalに&lt;/a&gt;変換されます。</target>
        </trans-unit>
        <trans-unit id="bbb7b619e5deab250c82714dad5c6223da422d99" translate="yes" xml:space="preserve">
          <source>The number is converted to a string and then the string is converted to a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimal&lt;/a&gt;.</source>
          <target state="translated">数値は文字列に変換されてから、文字列は&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimalに&lt;/a&gt;変換されます。</target>
        </trans-unit>
        <trans-unit id="bc9979a04405cfcd09395aa075f56f352dfb5b1c" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent a Char in a binary form.</source>
          <target state="translated">Charを2進数で表現するために使用されるビット数です。</target>
        </trans-unit>
        <trans-unit id="a5aabbd23fb87b74097e1ccd4055f0b183ecbf87" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Byte in a binary form.</source>
          <target state="translated">Byteのインスタンスをバイナリ形式で表現するために使用されるビット数。</target>
        </trans-unit>
        <trans-unit id="fc5f8fcea457f48ba61aea0a6c6364e750d35bba" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Double in a binary form.</source>
          <target state="translated">Doubleのインスタンスをバイナリ形式で表現するために使用されるビット数。</target>
        </trans-unit>
        <trans-unit id="3ac96a9235bc1077029c5934186d743a5b00c197" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Float in a binary form.</source>
          <target state="translated">Float のインスタンスをバイナリ形式で表現するために使用されるビット数。</target>
        </trans-unit>
        <trans-unit id="0f9c3201d4f3bb80740106fd705fe9901bfc9490" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Int in a binary form.</source>
          <target state="translated">Int のインスタンスをバイナリ形式で表現するために使用されるビット数。</target>
        </trans-unit>
        <trans-unit id="881c588a79332a9f90d40c26e737596c51909376" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Long in a binary form.</source>
          <target state="translated">Longのインスタンスをバイナリ形式で表現するために使用されるビット数。</target>
        </trans-unit>
        <trans-unit id="3a2fa986a400a5de2289aa09e08c447c811e1ab0" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Short in a binary form.</source>
          <target state="translated">Short のインスタンスをバイナリ形式で表現するために使用されるビット数。</target>
        </trans-unit>
        <trans-unit id="b557b6ad22e0d4a32e6ecf5e7c42a83086397f62" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of UByte in a binary form.</source>
          <target state="translated">UByte のインスタンスをバイナリ形式で表現するために使用されるビット数。</target>
        </trans-unit>
        <trans-unit id="04a46c8fcf471f6f7a2489fd5541b67d79b2dbba" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of UInt in a binary form.</source>
          <target state="translated">UInt のインスタンスをバイナリ形式で表現するために使用されるビット数。</target>
        </trans-unit>
        <trans-unit id="970f51f6cf41ca82dcda9c5384dd1584581a3241" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of ULong in a binary form.</source>
          <target state="translated">ULongのインスタンスをバイナリ形式で表現するために使用されるビット数。</target>
        </trans-unit>
        <trans-unit id="f405dad940dd8a9ba9986616021e6669d81ef332" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of UShort in a binary form.</source>
          <target state="translated">UShort のインスタンスをバイナリ形式で表現するために使用されるビット数。</target>
        </trans-unit>
        <trans-unit id="7fca3ee96d6d11e61b4e40ce8aef39bbd3166f00" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent a Char in a binary form.</source>
          <target state="translated">Charをバイナリ形式で表現するために使用されるバイト数です。</target>
        </trans-unit>
        <trans-unit id="d455af0205d71a29c80b7797e96f36f72c818b20" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Byte in a binary form.</source>
          <target state="translated">Byte のインスタンスをバイナリ形式で表現するために使用されるバイト数。</target>
        </trans-unit>
        <trans-unit id="cfb84d55b9d6ee08abf33db55d2a61462dded701" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Double in a binary form.</source>
          <target state="translated">Double のインスタンスをバイナリ形式で表現するために使用されるバイト数。</target>
        </trans-unit>
        <trans-unit id="080e5eee27bb967010b8c2b300a0c20e8300d7a1" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Float in a binary form.</source>
          <target state="translated">Float のインスタンスをバイナリ形式で表現するために使用されるバイト数。</target>
        </trans-unit>
        <trans-unit id="012737f61c97912b11277e0542ab793fcecbd8f6" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Int in a binary form.</source>
          <target state="translated">Int のインスタンスをバイナリ形式で表現するために使用されるバイト数。</target>
        </trans-unit>
        <trans-unit id="ac50dee558bf2179b63147e5d4abcf881946deb1" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Long in a binary form.</source>
          <target state="translated">Long のインスタンスをバイナリ形式で表現するために使用されるバイト数。</target>
        </trans-unit>
        <trans-unit id="d47711ab000d6ab309cdde940a4d6cc83958bbb7" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Short in a binary form.</source>
          <target state="translated">Short のインスタンスをバイナリ形式で表現するために使用されるバイト数。</target>
        </trans-unit>
        <trans-unit id="5da103d9bfe814cb16e570a63e8fffdec6abede9" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of UByte in a binary form.</source>
          <target state="translated">UByte のインスタンスをバイナリ形式で表現するために使用されるバイト数。</target>
        </trans-unit>
        <trans-unit id="7aa018571731f4dfc20dc2f2b40bc661649fe4df" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of UInt in a binary form.</source>
          <target state="translated">UInt のインスタンスをバイナリ形式で表現するために使用されるバイト数。</target>
        </trans-unit>
        <trans-unit id="c4d88684784d0b5692fee9bc8fbbdcbfde1bb159" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of ULong in a binary form.</source>
          <target state="translated">バイナリ形式でULongのインスタンスを表現するために使用されるバイト数。</target>
        </trans-unit>
        <trans-unit id="de97fd8a16a598b6d753acf6fc495d892600d39e" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of UShort in a binary form.</source>
          <target state="translated">UShort のインスタンスをバイナリ形式で表現するために使用されるバイト数。</target>
        </trans-unit>
        <trans-unit id="802421b7bac6f95ce971296bce66f238a1ca7ee6" translate="yes" xml:space="preserve">
          <source>The official docs also have a very cool example with a &lt;a href=&quot;../../reference/type-safe-builders&quot;&gt; DSL for constructing HTML documents&lt;/a&gt;.</source>
          <target state="translated">公式ドキュメントには、&lt;a href=&quot;../../reference/type-safe-builders&quot;&gt;HTMLドキュメントを構築&lt;/a&gt;するためのDSLを使用した非常に優れた例もあります。</target>
        </trans-unit>
        <trans-unit id="3c525abb133dd243eb90f32e82df7ad93d5c1dde" translate="yes" xml:space="preserve">
          <source>The only operation provided by the time source is &lt;a href=&quot;mark-now&quot;&gt;markNow&lt;/a&gt;. It returns a &lt;a href=&quot;../-time-mark/index&quot;&gt;TimeMark&lt;/a&gt;, which can be used to query the elapsed time later.</source>
          <target state="translated">タイムソースによって提供される唯一の操作は&lt;a href=&quot;mark-now&quot;&gt;markNow&lt;/a&gt;です。&lt;a href=&quot;../-time-mark/index&quot;&gt;TimeMarkを&lt;/a&gt;返します。これは、後で経過時間を照会するために使用できます。</target>
        </trans-unit>
        <trans-unit id="9824ffa4fbac1aa2ba4df2857cc7d27ae42fbdf3" translate="yes" xml:space="preserve">
          <source>The only target for which it is not available is &lt;a href=&quot;https://en.wikipedia.org/wiki/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt;.</source>
          <target state="translated">利用できない唯一のターゲットは&lt;a href=&quot;https://en.wikipedia.org/wiki/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="20601b96604d0e7211b7510d021f94ac0577f4a7" translate="yes" xml:space="preserve">
          <source>The only thing left to do is compile our application (Build|Build Project), and once the JavaScript files have been generated, we can open the &lt;code&gt;index.html&lt;/code&gt; file in the browser and see the result in the console debug window.</source>
          <target state="translated">あとは、アプリケーションをコンパイルして（Build | Build Project）、JavaScriptファイルが生成されたら、ブラウザーで &lt;code&gt;index.html&lt;/code&gt; ファイルを開いて、コンソールのデバッグウィンドウで結果を確認できます。</target>
        </trans-unit>
        <trans-unit id="940b1bdb9d47159d1535cf808141916fc2b5f10e" translate="yes" xml:space="preserve">
          <source>The operation doesn't preserve copied file attributes such as creation/modification date, permissions, etc.</source>
          <target state="translated">この操作では、コピーされたファイルの作成/変更日やパーミッションなどの属性は保存されません。</target>
        </trans-unit>
        <trans-unit id="b9a452f893e9486c5fbe89e3c1a52b0da8c35684" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; and &lt;em&gt;stateful&lt;/em&gt;.</source>
          <target state="translated">操作は&lt;em&gt;中間的&lt;/em&gt;で&lt;em&gt;ステートフル&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="64f2d6f436a63697c12d9826dd0b449a2c8ece4d" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; and &lt;em&gt;stateless&lt;/em&gt;.</source>
          <target state="translated">操作は&lt;em&gt;中間&lt;/em&gt;で&lt;em&gt;ステートレス&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="2f74c9f051d5d0a5178895ef9787aac4f50f4820" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; for this sequence and &lt;em&gt;terminal&lt;/em&gt; and &lt;em&gt;stateful&lt;/em&gt; for the &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence.</source>
          <target state="translated">動作は、&lt;em&gt;中間&lt;/em&gt;この配列および&lt;em&gt;端末&lt;/em&gt;と&lt;em&gt;ステートフル&lt;/em&gt;ための&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;配列。</target>
        </trans-unit>
        <trans-unit id="790886232e90f42fd32ca4859b4baabd53b9cbd8" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; for this sequence and &lt;em&gt;terminal&lt;/em&gt; and &lt;em&gt;stateful&lt;/em&gt; for the &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence.</source>
          <target state="translated">動作は、&lt;em&gt;中間&lt;/em&gt;この配列および&lt;em&gt;端末&lt;/em&gt;と&lt;em&gt;ステートフル&lt;/em&gt;ための&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;要素&lt;/a&gt;配列。</target>
        </trans-unit>
        <trans-unit id="f90173c5f7dc2e732f31878b5387f1009c2ad309" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;terminal&lt;/em&gt;.</source>
          <target state="translated">操作は&lt;em&gt;ターミナル&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="24cec715dc71cea63c8c77aa342afd935860c2d6" translate="yes" xml:space="preserve">
          <source>The operations on floating point numbers discussed in this section are:</source>
          <target state="translated">このセクションで議論されている浮動小数点数に対する操作は、以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c81054e9fa59c990a7f0009d1471af7d0d80d085" translate="yes" xml:space="preserve">
          <source>The operator &lt;code&gt;plus&lt;/code&gt; provides a way to add key-value pair(s) to a read-only map producing a new map, however there was not a simple way to do the opposite: to remove a key from the map you have to resort to less straightforward ways to like &lt;code&gt;Map.filter()&lt;/code&gt; or &lt;code&gt;Map.filterKeys()&lt;/code&gt;. Now the operator &lt;code&gt;minus&lt;/code&gt; fills this gap. There are 4 overloads available: for removing a single key, a collection of keys, a sequence of keys and an array of keys.</source>
          <target state="translated">演算子 &lt;code&gt;plus&lt;/code&gt; は、キーと値のペアを読み取り専用のマップに追加して新しいマップを生成する方法を提供しますが、その逆の簡単な方法はありませんでした：頼らなければならないマップからキーを削除する &lt;code&gt;Map.filter()&lt;/code&gt; や &lt;code&gt;Map.filterKeys()&lt;/code&gt; のように簡単な方法ではありません。これで、オペレーターの &lt;code&gt;minus&lt;/code&gt; がこのギャップを埋めます。使用可能なオーバーロードは4つあります。単一のキー、キーのコレクション、キーのシーケンス、およびキーの配列を削除するためです。</target>
        </trans-unit>
        <trans-unit id="589b061bf341b244f13012e5b84b32bc9b5435d4" translate="yes" xml:space="preserve">
          <source>The opt-in requirement annotations &lt;code&gt;@RequiresOptIn&lt;/code&gt; and &lt;code&gt;@OptIn&lt;/code&gt; are &lt;a href=&quot;evolution/components-stability&quot;&gt;experimental&lt;/a&gt;. See the usage details &lt;a href=&quot;#experimental-status-of-the-opt-in-requirements&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">オプトイン要件のアノテーション &lt;code&gt;@RequiresOptIn&lt;/code&gt; と &lt;code&gt;@OptIn&lt;/code&gt; は&lt;a href=&quot;evolution/components-stability&quot;&gt;実験的なもの&lt;/a&gt;です。&lt;a href=&quot;#experimental-status-of-the-opt-in-requirements&quot;&gt;以下&lt;/a&gt;の使用法の詳細を参照してください。</target>
        </trans-unit>
        <trans-unit id="4a0d74a1654f94e426a64debf510f893991553be" translate="yes" xml:space="preserve">
          <source>The opt-in requirement mechanism is &lt;a href=&quot;evolution/components-stability&quot;&gt;experimental&lt;/a&gt; in Kotlin 1.3. This means that in future releases it may be changed in ways that make it incompatible.</source>
          <target state="translated">オプトイン要件メカニズムは、Kotlin1.3で&lt;a href=&quot;evolution/components-stability&quot;&gt;実験的なもの&lt;/a&gt;です。これは、将来のリリースで互換性がなくなるように変更される可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="a3dfe13bda3af06c0e25457985a11e6db0a3ea90" translate="yes" xml:space="preserve">
          <source>The order of elements is an important aspect of certain collection types. For example, two lists of the same elements are not equal if their elements are ordered differently.</source>
          <target state="translated">要素の順序は、ある種のコレクションタイプの重要な側面です。例えば、同じ要素を持つ2つのリストは、要素の順序が異なる場合には等しくありません。</target>
        </trans-unit>
        <trans-unit id="97cb339b9434116a61ea466562966c5cfa7e6e7a" translate="yes" xml:space="preserve">
          <source>The order of operations execution is different as well: &lt;code&gt;Sequence&lt;/code&gt; performs all the processing steps one-by-one for every single element. In turn, &lt;code&gt;Iterable&lt;/code&gt; completes each step for the whole collection and then proceeds to the next step.</source>
          <target state="translated">操作の実行順序も異なります &lt;code&gt;Sequence&lt;/code&gt; は、すべての要素に対して1つずつすべての処理ステップを実行します。次に、 &lt;code&gt;Iterable&lt;/code&gt; はコレクション全体の各ステップを完了してから、次のステップに進みます。</target>
        </trans-unit>
        <trans-unit id="812e3a1f04f0d82a55115416fefd4d8f871219e6" translate="yes" xml:space="preserve">
          <source>The original exception is handled by the parent only when all its children terminate, which is demonstrated by the following example.</source>
          <target state="translated">元の例外は、すべての子が終了した場合にのみ親によって処理されます。</target>
        </trans-unit>
        <trans-unit id="6bf2e73336e2395ab6cd6eb4e4d1c0edd8855b4e" translate="yes" xml:space="preserve">
          <source>The output here in this example is a good demonstration of how &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html&quot;&gt;flatMapLatest&lt;/a&gt; works:</source>
          <target state="translated">この例のここでの出力は、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html&quot;&gt;flatMapLatest&lt;/a&gt;がどのように機能するかを示す良いデモンストレーションです。</target>
        </trans-unit>
        <trans-unit id="b74ff8ee45b0b8f3cea227a5cb8b0ca2512e0fa1" translate="yes" xml:space="preserve">
          <source>The output is:</source>
          <target state="translated">出力されます。</target>
        </trans-unit>
        <trans-unit id="21b2e4b0974b9e68e9c52fc5e687c75f3f109501" translate="yes" xml:space="preserve">
          <source>The output it produces with &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM option is similar to:</source>
          <target state="translated">&lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVMオプションで生成される出力は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="335f16bba6cd2578184d6190d9013ac4ec39e185" translate="yes" xml:space="preserve">
          <source>The output of a config script with &lt;code&gt;--libs&lt;/code&gt; will be passed as a &lt;code&gt;-linkedArgs&lt;/code&gt;&lt;code&gt;kotlinc&lt;/code&gt; flag value (quoted) when compiling.</source>
          <target state="translated">&lt;code&gt;--libs&lt;/code&gt; を使用した構成スクリプトの出力は、コンパイル時に &lt;code&gt;-linkedArgs&lt;/code&gt; &lt;code&gt;kotlinc&lt;/code&gt; フラグ値（引用）として渡されます。</target>
        </trans-unit>
        <trans-unit id="3fc8d11bf9067241fdb9ed7a73ee99be1f2779ef" translate="yes" xml:space="preserve">
          <source>The output of the example is the same, even though we do not have &lt;code&gt;try/catch&lt;/code&gt; around the code anymore.</source>
          <target state="translated">コードの周りに &lt;code&gt;try/catch&lt;/code&gt; がなくなったとしても、例の出力は同じです。</target>
        </trans-unit>
        <trans-unit id="0febc2ff48de2800dd49e2c0e7bf4ea28482b37f" translate="yes" xml:space="preserve">
          <source>The output of this code clearly shows that the execution of the &lt;code&gt;flow { ... }&lt;/code&gt; body in the &lt;code&gt;numbers()&lt;/code&gt; function stopped after emitting the second number:</source>
          <target state="translated">このコードの出力は、 &lt;code&gt;numbers()&lt;/code&gt; 関数の &lt;code&gt;flow { ... }&lt;/code&gt; 本体の実行が、2番目の数値を発行した後に停止したことを明確に示しています。</target>
        </trans-unit>
        <trans-unit id="a335f7db5ad6c9bad17c284454dcaeefbd6be278" translate="yes" xml:space="preserve">
          <source>The output of this code is (with &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/coroutine-context-and-dispatchers.md#debugging-coroutines-and-threads&quot;&gt;debug&lt;/a&gt;):</source>
          <target state="translated">このコードの出力は次のとおりです（&lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/coroutine-context-and-dispatchers.md#debugging-coroutines-and-threads&quot;&gt;debugを使用&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="d91d0dd8fa3a619861392f5c074fea2d8db4eaf2" translate="yes" xml:space="preserve">
          <source>The output of this code is:</source>
          <target state="translated">このコードの出力は</target>
        </trans-unit>
        <trans-unit id="647a971dfd3700d13cfdc057be9aa0bc71494501" translate="yes" xml:space="preserve">
          <source>The output of this code shows that the &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; functions are called only when building the result list. So, you first see the line of text &lt;code&gt;&amp;ldquo;Lengths of..&amp;rdquo;&lt;/code&gt; and then the sequence processing starts. Note that for elements left after filtering, the map executes before filtering the next element. When the result size reaches 4, the processing stops because it's the largest possible size that &lt;code&gt;take(4)&lt;/code&gt; can return.</source>
          <target state="translated">このコードの出力は、 &lt;code&gt;filter()&lt;/code&gt; および &lt;code&gt;map()&lt;/code&gt; 関数が結果リストを作成するときにのみ呼び出されることを示しています。したがって、最初に &lt;code&gt;&amp;ldquo;Lengths of..&amp;rdquo;&lt;/code&gt; テキスト行が表示され、次にシーケンス処理が開始されます。フィルタリング後に残った要素については、次の要素をフィルタリングする前にマップが実行されることに注意してください。結果のサイズが4に達すると、 &lt;code&gt;take(4)&lt;/code&gt; が返すことができる最大サイズであるため、処理が停止します。</target>
        </trans-unit>
        <trans-unit id="4914ca42a65eab132541007ef394cf246de086f7" translate="yes" xml:space="preserve">
          <source>The output of this code with &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM option is:</source>
          <target state="translated">&lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVMオプションを使用したこのコードの出力は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ef205ce911c3cb52ce12493307210d6d78d5dcb8" translate="yes" xml:space="preserve">
          <source>The output of this code with the &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM option is:</source>
          <target state="translated">&lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVMオプションを使用したこのコードの出力は、次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fdcf4102afb246d995583e41d5abf443dc9b24d6" translate="yes" xml:space="preserve">
          <source>The output of this example is:</source>
          <target state="translated">この例の出力は</target>
        </trans-unit>
        <trans-unit id="d7f56deac4aeaab1be47a9075fd39d0cd515a13f" translate="yes" xml:space="preserve">
          <source>The output of this is a blank page that prints &lt;code&gt;Hello JavaScript!&lt;/code&gt; to the console.</source>
          <target state="translated">この出力は、 &lt;code&gt;Hello JavaScript!&lt;/code&gt; を出力する空白のページです。コンソールに。</target>
        </trans-unit>
        <trans-unit id="c7adcbeb9a00e6f9f8d55d348527ceb949cebeb0" translate="yes" xml:space="preserve">
          <source>The output should be:</source>
          <target state="translated">出力されるはずです。</target>
        </trans-unit>
        <trans-unit id="0b8e02788f842ec131e59334f158260f8f72ffc7" translate="yes" xml:space="preserve">
          <source>The output will be similar to the the following one, albeit the processor ids that receive each specific integer may be different:</source>
          <target state="translated">出力は、各特定の整数を受信するプロセッサIDが異なる場合がありますが、以下のものに似ています。</target>
        </trans-unit>
        <trans-unit id="dacb06aada01cf9353bf2a419b476781dd3c13a9" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was appended to this string builder.</source>
          <target state="translated">全体的な効果は、 &lt;code&gt;value.toString()&lt;/code&gt; メソッドによって&lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Any?)/value&quot;&gt;値&lt;/a&gt;が文字列に変換され、その文字列がこの文字列ビルダーに追加された場合とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="2fa46c20aa677e08c4fbabd2c01f13037e7e1a67" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Boolean)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was appended to this string builder.</source>
          <target state="translated">全体的な効果は、 &lt;code&gt;value.toString()&lt;/code&gt; メソッドによって&lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Boolean)/value&quot;&gt;値&lt;/a&gt;が文字列に変換され、その文字列がこの文字列ビルダーに追加された場合とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="3d95d1d469be2176ebbc72a21468acef591255ad" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was inserted into this string builder at the specified &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">全体的な効果は、 &lt;code&gt;value.toString()&lt;/code&gt; メソッドによって&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/value&quot;&gt;値&lt;/a&gt;が文字列に変換され、その文字列が指定された&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/index&quot;&gt;インデックス&lt;/a&gt;でこの文字列ビルダーに挿入された場合とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="76acc76cfe7700de42074cf269fd6d05489f7e96" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was inserted into this string builder at the specified &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">全体的な効果は、 &lt;code&gt;value.toString()&lt;/code&gt; メソッドによって&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/value&quot;&gt;値&lt;/a&gt;が文字列に変換され、その文字列が指定された&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/index&quot;&gt;インデックス&lt;/a&gt;でこの文字列ビルダーに挿入された場合とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="b56500d82b30990e46ae5220b62e1c3f4e225003" translate="yes" xml:space="preserve">
          <source>The overriding constructor must have the same parameter names and types as the overridden one.</source>
          <target state="translated">オーバーライドするコンストラクタは、オーバーライドするものと同じパラメータ名と型を持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="d0fd3de86e4826ba8c7cde26e87523bae54839bc" translate="yes" xml:space="preserve">
          <source>The packages from platform libraries are available by default. No special link flags need to be specified to use them. &lt;code&gt;Kotlin/Native&lt;/code&gt; compiler automatically detects which of the platform libraries have been accessed and automatically links the needed libraries.</source>
          <target state="translated">プラットフォームライブラリのパッケージは、デフォルトで使用できます。それらを使用するために特別なリンクフラグを指定する必要はありません。 &lt;code&gt;Kotlin/Native&lt;/code&gt; コンパイラは、アクセスされたプラットフォームライブラリを自動的に検出し、必要なライブラリを自動的にリンクします。</target>
        </trans-unit>
        <trans-unit id="f9eac82235030e7e86a0bff236552f847d9867dd" translate="yes" xml:space="preserve">
          <source>The parameter is declared in a member function and one of the corresponding parameters in the super functions is optional.</source>
          <target state="translated">パラメータはメンバ関数内で宣言され、スーパー関数内の対応するパラメータのうちの1つはオプションです。</target>
        </trans-unit>
        <trans-unit id="1a311c087dc5f415abb270981ad04ec98ba47164" translate="yes" xml:space="preserve">
          <source>The parameter must not &lt;a href=&quot;#variable-number-of-arguments-varargs&quot;&gt;accept variable number of arguments&lt;/a&gt; and must have no &lt;a href=&quot;#default-arguments&quot;&gt;default value&lt;/a&gt;.</source>
          <target state="translated">パラメータは&lt;a href=&quot;#variable-number-of-arguments-varargs&quot;&gt;可変数の引数&lt;/a&gt;を受け入れてはならず、&lt;a href=&quot;#default-arguments&quot;&gt;デフォルト値を&lt;/a&gt;持たない必要があります。</target>
        </trans-unit>
        <trans-unit id="85604054f8838d2bde0848abdc31a44140b69283" translate="yes" xml:space="preserve">
          <source>The parameter of &lt;code&gt;@JsName&lt;/code&gt; is required to be a constant string literal which is a valid identifier. The compiler will report an error on any attempt to pass non-identifier string to &lt;code&gt;@JsName&lt;/code&gt;. The following example produces a compile-time error:</source>
          <target state="translated">&lt;code&gt;@JsName&lt;/code&gt; のパラメーターは、有効な識別子である定数文字列リテラルである必要があります。コンパイラは、識別子以外の文字列を &lt;code&gt;@JsName&lt;/code&gt; に渡そうとすると、エラーを報告します。次の例では、コンパイル時エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="d09d94c8171c7316821713755fce66dc3c85e74a" translate="yes" xml:space="preserve">
          <source>The parameter of &lt;code&gt;js&lt;/code&gt; is required to be a string constant. So, the following code is incorrect:</source>
          <target state="translated">&lt;code&gt;js&lt;/code&gt; のパラメータは文字列定数である必要があります。したがって、次のコードは正しくありません。</target>
        </trans-unit>
        <trans-unit id="64419b25b7715086a3a5cdbe138547b81a0a98a1" translate="yes" xml:space="preserve">
          <source>The parameter type of a function-typed parameter (the user is passing a function that can handle any &lt;code&gt;Fruit&lt;/code&gt;, and it will be given an &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">関数型パラメーターのパラメーター型（ユーザーは、任意の &lt;code&gt;Fruit&lt;/code&gt; を処理できる関数を渡しており、 &lt;code&gt;Apple&lt;/code&gt; が提供されます）</target>
        </trans-unit>
        <trans-unit id="6ef05f581070101fa2afecc255e98671537cdea0" translate="yes" xml:space="preserve">
          <source>The parameters and the return type are specified in the same way as for regular functions, except that the parameter types can be omitted if they can be inferred from context:</source>
          <target state="translated">パラメータと戻り値の型は、コンテキストから推測できる場合にはパラメータの型を省略できることを除いては、正規の関数と同じように指定します。</target>
        </trans-unit>
        <trans-unit id="d2818a5f4b17e0f3d50df0846a19518863e09067" translate="yes" xml:space="preserve">
          <source>The parameters of &lt;code&gt;provideDelegate&lt;/code&gt; are the same as for &lt;code&gt;getValue&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; のパラメーターは &lt;code&gt;getValue&lt;/code&gt; の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="87e2c98795ae2a97eb179a3bb9ccc1f2e2c982d8" translate="yes" xml:space="preserve">
          <source>The passed type must satisfy all conditions of the &lt;code&gt;where&lt;/code&gt; clause simultaneously. In the above example, the &lt;code&gt;T&lt;/code&gt; type must implement &lt;em&gt;both&lt;/em&gt;&lt;code&gt;CharSequence&lt;/code&gt; and &lt;code&gt;Comparable&lt;/code&gt;.</source>
          <target state="translated">渡された型は、 &lt;code&gt;where&lt;/code&gt; 句のすべての条件を同時に満たす必要があります。上記の例では、 &lt;code&gt;T&lt;/code&gt; 型は &lt;code&gt;CharSequence&lt;/code&gt; と &lt;code&gt;Comparable&lt;/code&gt; の&lt;em&gt;両方を&lt;/em&gt;実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="0f70942d020a14104380fd6e7920e316921b42c6" translate="yes" xml:space="preserve">
          <source>The path refers to the default output location that IntelliJ IDEA uses when we compile the application. Below we'll see how to change this.</source>
          <target state="translated">パスはIntelliJ IDEAがアプリケーションをコンパイルする際に使用するデフォルトの出力先を参照します。以下では、これを変更する方法を見ていきます。</target>
        </trans-unit>
        <trans-unit id="38dc6771af81ffcbac99f06b8c7fb1ebccf80f9d" translate="yes" xml:space="preserve">
          <source>The pattern string of this regular expression.</source>
          <target state="translated">この正規表現のパターン文字列。</target>
        </trans-unit>
        <trans-unit id="1144f4eed1bc15fed420102b18cb1c4e49c25335" translate="yes" xml:space="preserve">
          <source>The pattern where a coroutine is producing a sequence of elements is quite common. This is a part of &lt;em&gt;producer-consumer&lt;/em&gt; pattern that is often found in concurrent code. You could abstract such a producer into a function that takes channel as its parameter, but this goes contrary to common sense that results must be returned from functions.</source>
          <target state="translated">コルーチンが要素のシーケンスを生成するパターンは非常に一般的です。これは、並行コードでよく見られる&lt;em&gt;プロデューサー/コンシューマー&lt;/em&gt;パターンの一部です。そのようなプロデューサーを、channelをパラメーターとして取る関数に抽象化することもできますが、これは関数から結果を返さなければならないという常識に反しています。</target>
        </trans-unit>
        <trans-unit id="0452bcbdd609690466ea082ea5af90749aa8dcc5" translate="yes" xml:space="preserve">
          <source>The placeholder &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; should be replaced with one of the plugin names that can be found in further sections.</source>
          <target state="translated">プレースホルダー &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; は、以降のセクションで見つけることができるプラグイン名の1つに置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="02d885dcfef73f7197c98c6f94fc980ae42855f5" translate="yes" xml:space="preserve">
          <source>The plugin allows you to customize the pom generated for the publication with the &lt;code&gt;pom&lt;/code&gt; code block available for every component:</source>
          <target state="translated">プラグインを使用すると、すべてのコンポーネントで使用可能な &lt;code&gt;pom&lt;/code&gt; コードブロックを使用して、パブリケーション用に生成されたpomをカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="73896d94724b0c15c533e7832f50fc2c5d439771" translate="yes" xml:space="preserve">
          <source>The plugin allows you to declare dependencies on files and other projects using traditional Gradle's mechanism of configurations. The plugin supports Kotlin multiplatform projects allowing you to declare the &lt;code&gt;expectedBy&lt;/code&gt; dependencies</source>
          <target state="translated">プラグインを使用すると、従来のGradleの構成メカニズムを使用して、ファイルや他のプロジェクトへの依存関係を宣言できます。このプラグインはKotlinマルチプラットフォームプロジェクトをサポートし、 &lt;code&gt;expectedBy&lt;/code&gt; 依存関係を宣言できます</target>
        </trans-unit>
        <trans-unit id="244b72be53e91483eb1922508647ced0bb4a9e3c" translate="yes" xml:space="preserve">
          <source>The plugin also provides useful testing features, for example:</source>
          <target state="translated">プラグインには、例えば、便利なテスト機能も用意されています。</target>
        </trans-unit>
        <trans-unit id="e2b8c11954d8c4f9f34c307b3e3ea0e12583e5af" translate="yes" xml:space="preserve">
          <source>The plugin builds a test executable for all the targets specified for the &lt;code&gt;test&lt;/code&gt; component. If the current host platform is included in this list the test running tasks are also created. To run tests, execute the standard lifecycle &lt;code&gt;check&lt;/code&gt; task:</source>
          <target state="translated">プラグインは、 &lt;code&gt;test&lt;/code&gt; コンポーネントに指定されたすべてのターゲットのテスト実行可能ファイルをビルドします。現在のホストプラットフォームがこのリストに含まれている場合、テスト実行タスクも作成されます。テストを実行するには、標準のライフサイクル &lt;code&gt;check&lt;/code&gt; タスクを実行します。</target>
        </trans-unit>
        <trans-unit id="cbd612ac393a456f8773735c05ddbd5f91419396" translate="yes" xml:space="preserve">
          <source>The plugin creates a compilation task for each combination of the target, output kind, and build type. The tasks have the following naming convention:</source>
          <target state="translated">このプラグインは、ターゲット、出力の種類、ビルドタイプの組み合わせごとにコンパイルタスクを作成します。タスクの命名規則は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b7797d4ea1281347f08b98f3d1593b5740b623cc" translate="yes" xml:space="preserve">
          <source>The plugin is shipped with a customized version of the &lt;code&gt;kotlinx.serialization&lt;/code&gt; plugin. To use it you don't have to add new buildscript dependencies, just apply the plugins and add a dependency on the serialization library:</source>
          <target state="translated">プラグインは、 &lt;code&gt;kotlinx.serialization&lt;/code&gt; プラグインのカスタマイズバージョンに同梱されています。これを使用するには、新しいbuildscript依存関係を追加する必要はありません。プラグインを適用して、シリアル化ライブラリに依存関係を追加するだけです。</target>
        </trans-unit>
        <trans-unit id="a5b5cad9084adc7ffa681b4e8b7b6b009920bbab" translate="yes" xml:space="preserve">
          <source>The plugin option format is: &lt;code&gt;-P plugin:&amp;lt;plugin id&amp;gt;:&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;. Options can be repeated.</source>
          <target state="translated">プラグインオプションの形式は次のとおりです。- &lt;code&gt;-P plugin:&amp;lt;plugin id&amp;gt;:&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; 。オプションは繰り返すことができます。</target>
        </trans-unit>
        <trans-unit id="4b96dd9cca135b083ee411ceef82d46edf74c104" translate="yes" xml:space="preserve">
          <source>The plugin specifies the following annotations: &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html&quot;&gt;&lt;code&gt;@Async&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html&quot;&gt;&lt;code&gt;@Transactional&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html&quot;&gt;&lt;code&gt;@Cacheable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html&quot;&gt;&lt;code&gt;@SpringBootTest&lt;/code&gt;&lt;/a&gt;. Thanks to meta-annotations support classes annotated with &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&quot;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html&quot;&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&quot;&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt;&lt;code&gt;@Service&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt;&lt;code&gt;@Repository&lt;/code&gt;&lt;/a&gt; are automatically opened since these annotations are meta-annotated with &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">：プラグインは、以下のアノテーションを指定&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html&quot;&gt; &lt;code&gt;@Async&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html&quot;&gt; &lt;code&gt;@Transactional&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html&quot;&gt; &lt;code&gt;@Cacheable&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html&quot;&gt; &lt;code&gt;@SpringBootTest&lt;/code&gt; を&lt;/a&gt;。メタ注釈のおかげでで注釈を付けたクラスをサポート&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&quot;&gt; &lt;code&gt;@Configuration&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html&quot;&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&quot;&gt; &lt;code&gt;@RestController&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;/a&gt;これらの注釈がメタ注釈付きであるため、自動的に開かれますが&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="422a0ed13a769b30fb09b25e92467921db8dd51b" translate="yes" xml:space="preserve">
          <source>The plugin uses the same notation as the compiler. By default, test component uses the same targets as specified for the main one.</source>
          <target state="translated">プラグインはコンパイラと同じ表記法を使用します。デフォルトでは、テストコンポーネントはメインコンポーネントに指定されたものと同じターゲットを使用します。</target>
        </trans-unit>
        <trans-unit id="1f3c2f2fca540697d8f63e00a5a21435f0484957" translate="yes" xml:space="preserve">
          <source>The podspec generated includes a path to an output framework and script phases which automate building this framework during a build process of an Xcode project. Some fields of the podspec file can be configured using the &lt;code&gt;kotlin.cocoapods { ... }&lt;/code&gt; code block.</source>
          <target state="translated">生成されたpodspecには、出力フレームワークへのパスと、Xcodeプロジェクトのビルドプロセス中にこのフレームワークのビルドを自動化するスクリプトフェーズが含まれています。podspecファイルの一部のフィールドは、kotlin.cocoapods &lt;code&gt;kotlin.cocoapods { ... }&lt;/code&gt; コードブロックを使用して構成できます。</target>
        </trans-unit>
        <trans-unit id="4f2f6c39a4cfc0d578583a59ccc054d34affa473" translate="yes" xml:space="preserve">
          <source>The pointer with an opaque type.</source>
          <target state="translated">不透明なタイプのポインタ。</target>
        </trans-unit>
        <trans-unit id="cac38148225622f1c3ccca3dceed3d6a499e0217" translate="yes" xml:space="preserve">
          <source>The possible values of &lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns%28kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; are limited to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns%28kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt;の可能な値は、 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; 、または &lt;code&gt;null&lt;/code&gt; に制限されています。</target>
        </trans-unit>
        <trans-unit id="ff2c8804ee232db23ae3d579f25ad98024549ce9" translate="yes" xml:space="preserve">
          <source>The possible values of &lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns(kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; are limited to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">可能な値の&lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns(kotlin.Any?)/value&quot;&gt;値&lt;/a&gt;は、 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; 、または &lt;code&gt;null&lt;/code&gt; に制限されています。</target>
        </trans-unit>
        <trans-unit id="db453765e0a754bcf108983d99d14a9cceb4e257" translate="yes" xml:space="preserve">
          <source>The predicates in &lt;code&gt;filter()&lt;/code&gt; can only check the values of the elements. If you want to use element positions in the filter, use &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter-indexed&quot;&gt;&lt;code&gt;filterIndexed()&lt;/code&gt;&lt;/a&gt;. It takes a predicate with two arguments: the index and the value of an element.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; の述語は、要素の値のみをチェックできます。フィルターで要素の位置を使用する場合は、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter-indexed&quot;&gt; &lt;code&gt;filterIndexed()&lt;/code&gt; を&lt;/a&gt;使用します。これは、要素のインデックスと値の2つの引数を持つ述語を取ります。</target>
        </trans-unit>
        <trans-unit id="273bc9daf88463decafd479d30c651cc98374847" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be directly downloaded from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">準備されたプロジェクトソースは、&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos.zip&quot;&gt;GitHub&lt;/a&gt;から直接ダウンロードできます。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows.zip&quot;&gt;GitHubの&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1cda211d823296d73d5059839d0f82ff49bb5da0" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be directly downloaded from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-groovy-macos-mac.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-kotlin-macos-mac.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">準備されたプロジェクトソースは、&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-groovy-macos-mac.zip&quot;&gt;GitHub&lt;/a&gt;から直接ダウンロードできます。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-kotlin-macos-mac.zip&quot;&gt;GitHubの&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83fad008770a134699f224ecf517dfb249b17b87" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be directly downloaded from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-windows.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-windows.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">準備されたプロジェクトソースは、&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-linux.zip&quot;&gt;GitHub&lt;/a&gt;から直接ダウンロードできます。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-macos.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-windows.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-linux.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-macos.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-windows.zip&quot;&gt;GitHubの&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47fbf2be0cf9555e26f724c9cc904699b4e6d2c6" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be downloaded directly from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows-c.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">準備されたプロジェクトソースは、&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos-c.zip&quot;&gt;GitHub&lt;/a&gt;から直接ダウンロードできます。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux-c.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows-c.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos-c.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux-c.zip&quot;&gt;GitHubの&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows-c.zip&quot;&gt;GitHubの&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0b884226386a575e859d8ba59646588a18cff524" translate="yes" xml:space="preserve">
          <source>The preset functions return an existing target if there is one. This can be used to configure an existing target:</source>
          <target state="translated">プリセット機能は、既存のターゲットが存在する場合、そのターゲットを返します。これを利用して、既存のターゲットを設定することができます。</target>
        </trans-unit>
        <trans-unit id="f937582ad7c69cc78cc53932b083402871787e1f" translate="yes" xml:space="preserve">
          <source>The preset that the target has been created from, if any.</source>
          <target state="translated">ターゲットが作成されたプリセットがある場合は、そのプリセットを使用します。</target>
        </trans-unit>
        <trans-unit id="6f567afc7fd70eca03211b1e8f8d586dfbb85441" translate="yes" xml:space="preserve">
          <source>The previous example actually catches any exception happening in the emitter or in any intermediate or terminal operators. For example, let's change the code so that emitted values are &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;mapped&lt;/a&gt; to strings, but the corresponding code produces an exception:</source>
          <target state="translated">前の例では、実際には、エミッターまたは中間オペレーターまたはターミナルオペレーターで発生する例外をキャッチします。たとえば、出力された値が文字列に&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;マップさ&lt;/a&gt;れるようにコードを変更しましょう。ただし、対応するコードは例外を生成します。</target>
        </trans-unit>
        <trans-unit id="6ce6cb1616a5b69df481f1e26b0c9482dd84113e" translate="yes" xml:space="preserve">
          <source>The previous example can be rewritten using an &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt; operator and produces the same output:</source>
          <target state="translated">前の例は、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt;演算子を使用して書き直すことができ、同じ出力を生成します。</target>
        </trans-unit>
        <trans-unit id="94b4a93f08efae43f49ccc9068c6ccc45a749339" translate="yes" xml:space="preserve">
          <source>The primary constructor cannot contain any code. Initialization code can be placed in &lt;strong&gt;initializer blocks&lt;/strong&gt;, which are prefixed with the &lt;em&gt;init&lt;/em&gt; keyword.</source>
          <target state="translated">プライマリコンストラクターにコードを含めることはできません。初期化コードは、&lt;em&gt;init&lt;/em&gt;キーワードが前に付けられた&lt;strong&gt;初期化ブロック&lt;/strong&gt;に配置できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9fdf36149a4f79a1bb95fdb86a615c52def92e79" translate="yes" xml:space="preserve">
          <source>The primary constructor needs to have at least one parameter;</source>
          <target state="translated">一次コンストラクタは、少なくとも 1 つのパラメータを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="da3ee8bb58d5e5b4db4f578cf06329f7adf39108" translate="yes" xml:space="preserve">
          <source>The principles of Keeping the Language Modern and Comfortable Updates suggest that incompatible changes are sometimes necessary, but they should be introduced carefully. Our goal is to make the users aware of upcoming changes well in advance to let them migrate their code comfortably.</source>
          <target state="translated">Keeping the Language Modern and Comfortable Updatesの原則は、互換性のない変更が必要な場合もあることを示唆していますが、それらは慎重に導入されるべきです。私たちの目標は、ユーザーがコードを快適に移行できるように、今後の変更点を事前に十分に認識できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="8a9400005c3bca2486ac5d4f71c851ac612c4135" translate="yes" xml:space="preserve">
          <source>The problem</source>
          <target state="translated">問題点</target>
        </trans-unit>
        <trans-unit id="9c66b2fe04efcfddbeb39708f916ac0b213e981b" translate="yes" xml:space="preserve">
          <source>The problem is that in Kotlin we can say &lt;code&gt;unboxBase(boxDerived(&quot;s&quot;))&lt;/code&gt;, but in Java that would be impossible, because in Java the class &lt;code&gt;Box&lt;/code&gt; is &lt;em&gt;invariant&lt;/em&gt; in its parameter &lt;code&gt;T&lt;/code&gt;, and thus &lt;code&gt;Box&amp;lt;Derived&amp;gt;&lt;/code&gt; is not a subtype of &lt;code&gt;Box&amp;lt;Base&amp;gt;&lt;/code&gt;. To make it work in Java we'd have to define &lt;code&gt;unboxBase&lt;/code&gt; as follows:</source>
          <target state="translated">問題は、Kotlinでは &lt;code&gt;unboxBase(boxDerived(&quot;s&quot;))&lt;/code&gt; と言えますが、Javaでは不可能です。これは、Javaではクラス &lt;code&gt;Box&lt;/code&gt; がパラメーター &lt;code&gt;T&lt;/code&gt; で&lt;em&gt;不変&lt;/em&gt;であり、したがって &lt;code&gt;Box&amp;lt;Derived&amp;gt;&lt;/code&gt; がサブタイプではないためです。 &lt;code&gt;Box&amp;lt;Base&amp;gt;&lt;/code&gt; 。Javaで機能させるには、次のように &lt;code&gt;unboxBase&lt;/code&gt; を定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="d0d37636a32f4cdf2f104260760bfa7761da1ecf" translate="yes" xml:space="preserve">
          <source>The process of building and running the Kotlin application in Android Studio is exactly the same as with Java.</source>
          <target state="translated">Android StudioでKotlinアプリケーションをビルドして実行するプロセスは、Javaと全く同じです。</target>
        </trans-unit>
        <trans-unit id="5333ca5a84bee1fa54c6c2c65a4ed24b1d5a7d39" translate="yes" xml:space="preserve">
          <source>The programming model and APIs remain the same. We can continue to use loops, exception handling, etc. and there's no need to learn a complete set of new APIs</source>
          <target state="translated">プログラミングモデルとAPIは変わりません。ループや例外処理などを使い続けることができ、新しいAPIの完全なセットを学ぶ必要はありません。</target>
        </trans-unit>
        <trans-unit id="cbc23b45ec695a38d5e9af2e658da812853cfa4f" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">進行は&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt;値から始まり、指定された&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;で、それを除外せずに&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt;値に向かって進みます。後退するには、&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;は負でなければなりません。</target>
        </trans-unit>
        <trans-unit id="3cfecf27df2864c65a3a1ce3c515f4f228c95a52" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">進行は、&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt;値から始まり、指定された&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;ステップ&lt;/a&gt;で、それを除外せずに&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt;値に向かって進みます。逆方向に進むには、&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;ステップ&lt;/a&gt;が負である必要があります。</target>
        </trans-unit>
        <trans-unit id="8d272fe15b8cfff505d8d535e47fe9213e3e4bb4" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">進行は&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt;値から始まり、指定された&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;で、それを除外せずに&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt;値に向かって進みます。後退するには、&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;は負でなければなりません。</target>
        </trans-unit>
        <trans-unit id="2c4a6206c951ddbe8fde808b1243da3bfe938dbc" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">進行は、&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt;値から始まり、指定された&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;ステップ&lt;/a&gt;で、それを除外せずに&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt;値に向かって進みます。逆方向に進むには、&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;ステップ&lt;/a&gt;が負である必要があります。</target>
        </trans-unit>
        <trans-unit id="84ee7e5946067792bd4d0c03b228099a9bd9d9cd" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">進行は&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt;値から始まり、指定された&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt;で、それを除外せずに&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt;値に向かって進みます。後退するには、&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;は負でなければなりません。</target>
        </trans-unit>
        <trans-unit id="d9d863d5adbc27747b9056e74161d14934d72f8c" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">進行は、&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt;値から始まり、指定された&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;ステップ&lt;/a&gt;で、それを除外せずに&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt;値に向かって進みます。逆方向に進むには、&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;ステップ&lt;/a&gt;が負である必要があります。</target>
        </trans-unit>
        <trans-unit id="8d8b7627f24846e9a31abff3ae25964002a498bf" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">進行は&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt;値から始まり、指定された&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;で、それを除外せずに&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt;値に向かって進みます。後退するには、&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;は負でなければなりません。</target>
        </trans-unit>
        <trans-unit id="890067d4bb4a41e1198a024fd7c7c538b8728df3" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">進行は、&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt;値から始まり、指定された&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;ステップ&lt;/a&gt;で、それを除外せずに&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt;値に向かって進みます。逆方向に進むには、&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;ステップ&lt;/a&gt;が負である必要があります。</target>
        </trans-unit>
        <trans-unit id="bc7d38b12995812c4efea617bb206ec4460e9ccc" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">進行は&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt;値から始まり、指定された&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt;で、それを除外せずに&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt;値に向かって進みます。後退するには、&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;は負でなければなりません。</target>
        </trans-unit>
        <trans-unit id="cfd566a721eacfbba5c78dd8988340e1f6d111e0" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">進行は、&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt;値から始まり、指定された&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;ステップ&lt;/a&gt;で、それを除外せずに&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt;値に向かって進みます。逆方向に進むには、&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;ステップ&lt;/a&gt;が負である必要があります。</target>
        </trans-unit>
        <trans-unit id="f35887cf67bb91d63b75657011139a4b8f31176b" translate="yes" xml:space="preserve">
          <source>The project file configures the C interop as an additional step of the build. Let's move the &lt;code&gt;interop.def&lt;/code&gt; file to the &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; directory. Gradle recommends using conventions instead of configurations, for example, the source files are expected to be in the &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; folder. By default, all the symbols from C are imported to the &lt;code&gt;interop&lt;/code&gt; package, we may want to import the whole package in our &lt;code&gt;.kt&lt;/code&gt; files. Check out the &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin documentation to learn about all the different ways you could configure it.</source>
          <target state="translated">プロジェクトファイルは、ビルドの追加ステップとしてC相互運用機能を構成します。 &lt;code&gt;interop.def&lt;/code&gt; ファイルを &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; ディレクトリに移動しましょう。 Gradleは、構成の代わりに規則を使用することを推奨しています。たとえば、ソースファイルは &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; フォルダーにあると想定されています。デフォルトでは、Cからのすべてのシンボルが &lt;code&gt;interop&lt;/code&gt; パッケージにインポートされます。パッケージ全体を &lt;code&gt;.kt&lt;/code&gt; ファイルにインポートすることもできます。&lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt;プラグインのドキュメントをチェックして、プラグインを構成するさまざまな方法について学習してください。</target>
        </trans-unit>
        <trans-unit id="c7f7aa55f08a335c3d3db3f646f14c719c538320" translate="yes" xml:space="preserve">
          <source>The project file configures the C interop as an additional step of the build. Let's move the &lt;code&gt;interop.def&lt;/code&gt; file to the &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; directory. Gradle recommends using conventions instead of configurations, for example, the source files are expected to be in the &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; folder. By default, all the symbols from C are imported to the &lt;code&gt;interop&lt;/code&gt; package, we may want to import the whole package in our &lt;code&gt;.kt&lt;/code&gt; files. Check out the &lt;a href=&quot;../../reference/mpp-discover-project#multiplatform-plugin&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin documentation to learn about all the different ways you could configure it.</source>
          <target state="translated">プロジェクトファイルは、ビルドの追加ステップとしてC相互運用機能を構成します。 &lt;code&gt;interop.def&lt;/code&gt; ファイルを &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; ディレクトリに移動してみましょう。 Gradleは、構成の代わりに規則を使用することをお勧めします。たとえば、ソースファイルは &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; フォルダーにあると予想されます。デフォルトでは、Cからのすべてのシンボルが &lt;code&gt;interop&lt;/code&gt; パッケージにインポートされます。パッケージ全体を &lt;code&gt;.kt&lt;/code&gt; ファイルにインポートしたい場合があります。&lt;a href=&quot;../../reference/mpp-discover-project#multiplatform-plugin&quot;&gt;kotlin-multiplatform&lt;/a&gt;プラグインのドキュメントを確認して、構成できるさまざまな方法をすべて確認してください。</target>
        </trans-unit>
        <trans-unit id="f6e9497c74b4e34e5f47b553a66d8ecc4543bedd" translate="yes" xml:space="preserve">
          <source>The project includes the directory &lt;code&gt;src&lt;/code&gt; with Kotlin source sets, which are collections of Kotlin code files, along with their resources, dependencies, and language settings. A source set can be used in Kotlin compilations for one or more target platforms.</source>
          <target state="translated">プロジェクトには、KotlinコードファイルのコレクションであるKotlinソースセットを含むディレクトリ &lt;code&gt;src&lt;/code&gt; と、それらのリソース、依存関係、および言語設定が含まれています。ソースセットは、1つ以上のターゲットプラットフォームのKotlinコンパイルで使用できます。</target>
        </trans-unit>
        <trans-unit id="04a29f21fc01df00a35820fecf66f137da298242" translate="yes" xml:space="preserve">
          <source>The project is ready. The next step is to open it in IntelliJ IDEA. For advanced build scenarios, it is recommended to refer to the &lt;a href=&quot;../../reference/building-mpp-with-gradle#setting-up-a-multiplatform-project&quot;&gt;more detailed&lt;/a&gt; documentation.</source>
          <target state="translated">プロジェクトの準備が整いました。次のステップは、IntelliJ IDEAで開くことです。高度なビルドシナリオについては、&lt;a href=&quot;../../reference/building-mpp-with-gradle#setting-up-a-multiplatform-project&quot;&gt;より詳細な&lt;/a&gt;ドキュメントを参照することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b358195ade68af7da060ed2c5bd98eb5f625c0a9" translate="yes" xml:space="preserve">
          <source>The project source roots</source>
          <target state="translated">プロジェクトソースのルーツ</target>
        </trans-unit>
        <trans-unit id="6b692a2a5504099d52b9ee1d8cd9e82682b0438b" translate="yes" xml:space="preserve">
          <source>The project structure looks like this:</source>
          <target state="translated">プロジェクトの構造はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="85001da371d8ff3d4160eee8edd3719f9a8a82c8" translate="yes" xml:space="preserve">
          <source>The project's source files are unchanged.</source>
          <target state="translated">プロジェクトのソースファイルは変更されていません。</target>
        </trans-unit>
        <trans-unit id="fe6d1020447b5badd7227ed9268d67a33471daca" translate="yes" xml:space="preserve">
          <source>The property that can be used as a placeholder for statements and values that are defined in JavaScript.</source>
          <target state="translated">JavaScriptで定義されているステートメントや値のプレースホルダとして使用できるプロパティです。</target>
        </trans-unit>
        <trans-unit id="fe5ea5ce74d05b50ab08ac3eaf5980cd10f01114" translate="yes" xml:space="preserve">
          <source>The property which this accessor is originated from.</source>
          <target state="translated">このアクセサの由来となっているプロパティ。</target>
        </trans-unit>
        <trans-unit id="f478ed7d5b12b6f5e34c37814b287211378258c6" translate="yes" xml:space="preserve">
          <source>The provisions of the &lt;a href=&quot;kotlin-evolution&quot;&gt;Kotlin evolution policy&lt;/a&gt; fully apply only to components that have reached Full Stability (FS). From that point on incompatible changes have to be approved by the Language Committee.</source>
          <target state="translated">&lt;a href=&quot;kotlin-evolution&quot;&gt;Kotlin進化ポリシー&lt;/a&gt;の規定は、完全安定性（FS）に達したコンポーネントにのみ完全に適用されます。その時点から、互換性のない変更は言語委員会によって承認される必要があります。</target>
        </trans-unit>
        <trans-unit id="10a03850a04015022f37051ccca3f8cdb619035d" translate="yes" xml:space="preserve">
          <source>The publication of this target is handled by the Kotlin plugin and doesn't require steps that are specific for the Java plugin.</source>
          <target state="translated">このターゲットの公開はKotlinプラグインで処理され、Javaプラグイン特有のステップは必要ありません。</target>
        </trans-unit>
        <trans-unit id="4e0268d689de7d5f78e70c6cb1e82a66dc683856" translate="yes" xml:space="preserve">
          <source>The publication of this target is handled by the Kotlin plugin and doesn't require the steps that are specific to the Java plugin, such as manually creating a publication and configuring it as &lt;code&gt;from(components.java)&lt;/code&gt;.</source>
          <target state="translated">このターゲットのパブリケーションはKotlinプラグインによって処理され、パブリケーションを手動で作成して &lt;code&gt;from(components.java)&lt;/code&gt; として構成するなど、Javaプラグインに固有の手順を必要としません。</target>
        </trans-unit>
        <trans-unit id="38341133c8abc06ea8b313769f8407419006fee4" translate="yes" xml:space="preserve">
          <source>The purpose of this code is to write out some text in the console. In order to use this from the browser, load it, preferably from inside an HTML page:</source>
          <target state="translated">このコードの目的は、コンソールにテキストを書き出すことです。ブラウザから使用するためには、できればHTMLページの中から読み込んでください。</target>
        </trans-unit>
        <trans-unit id="dc84bc4a3671f7fd39fcbdb5d811a4f7dfb04fdc" translate="yes" xml:space="preserve">
          <source>The quickest way to try out C API mapping is to have all C declarations in the &lt;code&gt;interop.def&lt;/code&gt; file, without creating any &lt;code&gt;.h&lt;/code&gt; of &lt;code&gt;.c&lt;/code&gt; files at all. Then place the C declarations in a &lt;code&gt;.def&lt;/code&gt; file after the special &lt;code&gt;---&lt;/code&gt; separator line:</source>
          <target state="translated">C APIマッピングを試す最も簡単な方法は、 &lt;code&gt;.c&lt;/code&gt; ファイルの &lt;code&gt;.h&lt;/code&gt; をまったく作成せずに、すべてのC宣言を &lt;code&gt;interop.def&lt;/code&gt; ファイルに含めることです。次に、C宣言を &lt;code&gt;.def&lt;/code&gt; ファイルの特別な &lt;code&gt;---&lt;/code&gt; セパレータ行の後に配置します。</target>
        </trans-unit>
        <trans-unit id="8b65082730419e0089fe0272610ec1d026b13069" translate="yes" xml:space="preserve">
          <source>The range of durations that can be expressed as a &lt;code&gt;Long&lt;/code&gt; number of milliseconds is approximately &amp;plusmn;292 million years.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; ミリ秒数として表現できる期間の範囲は、約&amp;plusmn;2億9,200万年です。</target>
        </trans-unit>
        <trans-unit id="a3be989e45ad02ac9e3f6bde822e680ef8bccdc5" translate="yes" xml:space="preserve">
          <source>The range of durations that can be expressed as a &lt;code&gt;Long&lt;/code&gt; number of nanoseconds is approximately &amp;plusmn;292 years.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; ナノ秒数として表現できる期間の範囲は、約&amp;plusmn;292年です。</target>
        </trans-unit>
        <trans-unit id="086ba4582c0f9ff5d704a53067f7ea26f2bef36a" translate="yes" xml:space="preserve">
          <source>The range of indices in the input string where group was captured.</source>
          <target state="translated">グループが捕捉された入力文字列のインデックスの範囲。</target>
        </trans-unit>
        <trans-unit id="d16563c64c4aedfc780b010fa9c5624f673175d2" translate="yes" xml:space="preserve">
          <source>The range of indices in the original string where match was captured.</source>
          <target state="translated">マッチがキャプチャされた元の文字列のインデックスの範囲。</target>
        </trans-unit>
        <trans-unit id="199d1e88f27ba9b05b8adc73d8d822df0cadd36a" translate="yes" xml:space="preserve">
          <source>The read-only collection types are &lt;a href=&quot;generics#variance&quot;&gt;covariant&lt;/a&gt;. This means that, if a &lt;code&gt;Rectangle&lt;/code&gt; class inherits from &lt;code&gt;Shape&lt;/code&gt;, you can use a &lt;code&gt;List&amp;lt;Rectangle&amp;gt;&lt;/code&gt; anywhere the &lt;code&gt;List&amp;lt;Shape&amp;gt;&lt;/code&gt; is required. In other words, the collection types have the same subtyping relationship as the element types. Maps are covariant on the value type, but not on the key type.</source>
          <target state="translated">読み取り専用のコレクション型は&lt;a href=&quot;generics#variance&quot;&gt;共変&lt;/a&gt;です。つまり、 &lt;code&gt;Rectangle&lt;/code&gt; クラスが &lt;code&gt;Shape&lt;/code&gt; を継承する場合、 &lt;code&gt;List&amp;lt;Shape&amp;gt;&lt;/code&gt; が必要な場所であればどこでも &lt;code&gt;List&amp;lt;Rectangle&amp;gt;&lt;/code&gt; 使用できます。つまり、コレクション型は、要素型と同じサブタイプ関係を持っています。マップは、値タイプでは共変ですが、キータイプでは共変ではありません。</target>
        </trans-unit>
        <trans-unit id="2ddb83b3e5eaf3228b8ed04e27d5be844d1ede7b" translate="yes" xml:space="preserve">
          <source>The reason we're seeing the actual output is because the call &lt;code&gt;curl_easy_perform&lt;/code&gt; prints the result to the standard output. We could hide this using &lt;code&gt;curl_easy_setopt&lt;/code&gt;.</source>
          <target state="translated">実際の出力が表示されるのは、 &lt;code&gt;curl_easy_perform&lt;/code&gt; を呼び出すと結果が標準出力に出力されるためです。 &lt;code&gt;curl_easy_setopt&lt;/code&gt; を使用してこれを非表示にすることができます。</target>
        </trans-unit>
        <trans-unit id="4670c1839cea0120059e336f30de1dda186179ab" translate="yes" xml:space="preserve">
          <source>The recommended way to use Kotlin/JS is via the &lt;code&gt;kotlin.js&lt;/code&gt; and &lt;code&gt;kotlin.multiplatform&lt;/code&gt; Gradle plugins. They provide a central and convenient way to set up and control Kotlin projects targeting JavaScript. This includes essential functionality such as controlling the bundling of your application, adding JavaScript dependencies directly from npm, and more. To get an overview of the available options, check out the &lt;a href=&quot;js-project-setup&quot;&gt;Kotlin/JS project setup&lt;/a&gt; documentation.</source>
          <target state="translated">Kotlin / JSを使用するための推奨される方法は、 &lt;code&gt;kotlin.js&lt;/code&gt; および &lt;code&gt;kotlin.multiplatform&lt;/code&gt; Gradleプラグインを使用することです。これらは、JavaScriptを対象とするKotlinプロジェクトをセットアップおよび制御するための中心的で便利な方法を提供します。これには、アプリケーションのバンドルの制御、npmからのJavaScript依存関係の直接追加などの重要な機能が含まれます。利用可能なオプションの概要については、&lt;a href=&quot;js-project-setup&quot;&gt;Kotlin / JSプロジェクトのセットアップ&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="58ca5ea2bf2b7e6112a4ed6c521b74a4fb8e1b96" translate="yes" xml:space="preserve">
          <source>The reference is a value of type &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt;.</source>
          <target state="translated">参照は&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt;型の値です。</target>
        </trans-unit>
        <trans-unit id="cef50f619cc0308e3db26c3e7a3c98fcbdab204e" translate="yes" xml:space="preserve">
          <source>The referenced value or null if referred object is not frozen and current worker is different from the one created this.</source>
          <target state="translated">参照されたオブジェクトがフリーズしておらず、現在のワーカーがこれを作成したものと異なる場合は、参照された値、またはnullとなります。</target>
        </trans-unit>
        <trans-unit id="6e2258bc637d2fb4dedf8b2c195ace128e99affc" translate="yes" xml:space="preserve">
          <source>The referenced value.</source>
          <target state="translated">参照されている値。</target>
        </trans-unit>
        <trans-unit id="225d32a1d2d879830740b8e0770ecbbb02de2cc7" translate="yes" xml:space="preserve">
          <source>The referenced value. Gets the value or sets the new value. If new value is not null, and &lt;code&gt;this&lt;/code&gt; is frozen - it must be frozen or permanent object.</source>
          <target state="translated">参照される値。値を取得するか、新しい値を設定します。新しい値がnullではなく、 &lt;code&gt;this&lt;/code&gt; が凍結されている場合-凍結されているか、永続的なオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="9e1c9e946585f6c5b784f91adc26c58c91e5a3c2" translate="yes" xml:space="preserve">
          <source>The referenced value. Gets the value or sets the new value. If new value is not null, it must be frozen or permanent object.</source>
          <target state="translated">参照されている値。値を取得するか、新しい値を設定します。新しい値がnullでない場合は、フリーズしているか恒久的なオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="04f24df5fbabe6af37ab1161e95151a96c9196e9" translate="yes" xml:space="preserve">
          <source>The repositories where the library will be published are added via the &lt;code&gt;repositories&lt;/code&gt; block in the &lt;code&gt;publishing { ... }&lt;/code&gt; DSL, as explained in &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories&quot;&gt;Maven Publish Plugin. Repositories&lt;/a&gt;.</source>
          <target state="translated">ライブラリが公開される &lt;code&gt;repositories&lt;/code&gt; は、&lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories&quot;&gt;Maven Publish Pluginで&lt;/a&gt;説明されているように、 &lt;code&gt;publishing { ... }&lt;/code&gt; DSL のリポジトリブロックを介して追加されます。リポジトリ。</target>
        </trans-unit>
        <trans-unit id="7134518e595d73dac15fa3b58f87beedd8efb821" translate="yes" xml:space="preserve">
          <source>The required parameter to &lt;code&gt;launchIn&lt;/code&gt; must specify a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; in which the coroutine to collect the flow is launched. In the above example this scope comes from the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine builder, so while the flow is running, this &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; scope waits for completion of its child coroutine and keeps the main function from returning and terminating this example.</source>
          <target state="translated">&lt;code&gt;launchIn&lt;/code&gt; に必要なパラメーターは、フローを収集するコルーチンが起動される&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;を指定する必要があります。上記の例では、このスコープは&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;コルーチンビルダーからのものであるため、フローの実行中、この&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;スコープは子コルーチンの完了を待機し、メイン関数がこの例を返したり終了したりしないようにします。</target>
        </trans-unit>
        <trans-unit id="1dc4ec6519f1080b744ec876f36d60cd34eec96a" translate="yes" xml:space="preserve">
          <source>The resources are processed by the equivalent tasks of the compilations instead of &lt;code&gt;*ProcessResources&lt;/code&gt; tasks.</source>
          <target state="translated">リソースは、 &lt;code&gt;*ProcessResources&lt;/code&gt; タスクではなく、コンパイルと同等のタスクによって処理されます。</target>
        </trans-unit>
        <trans-unit id="8655c9517fe5cb69af37ea62bb4854e761f59a65" translate="yes" xml:space="preserve">
          <source>The resources of &lt;code&gt;commonMain&lt;/code&gt; are always processed and copied along with the resources of &lt;code&gt;jvmMain&lt;/code&gt;.</source>
          <target state="translated">リソース &lt;code&gt;commonMain&lt;/code&gt; は常に処理とのリソースと一緒にコピーされます &lt;code&gt;jvmMain&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ffbb195d8e128e52d788e2edb39be54dd761c55" translate="yes" xml:space="preserve">
          <source>The rest of the procedure works in exactly the same way as in Java.</source>
          <target state="translated">プロシージャの残りの部分は、Javaと全く同じように動作します。</target>
        </trans-unit>
        <trans-unit id="81a9c69ffb22a2342532cf8251cc7d0415b9dbb2" translate="yes" xml:space="preserve">
          <source>The result is an object which represents a reference to the property (the &quot;Platonic ideal&quot; property, not a property on a particular instance). There's a type hierarchy for property objects: the base interface is &lt;code&gt;KProperty&lt;/code&gt;, which lets you get metadata about the property, such as its name and type. If you want to use the property object to read or modify the property's value in an object, you need to use a subinterface that specifies what kind of property it is. Immutable properties typically are &lt;code&gt;KProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt;, and mutable properties typically are &lt;code&gt;KMutableProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt;. Both of these are generic interfaces, with &lt;code&gt;R&lt;/code&gt; being the receiver type (the type on which the property is declared, in this case &lt;code&gt;Person&lt;/code&gt;) and &lt;code&gt;V&lt;/code&gt; being the type of the property's value.</source>
          <target state="translated">結果は、プロパティへの参照を表すオブジェクトです（特定のインスタンスのプロパティではなく、「プラトニックイデアル」プロパティ）。プロパティオブジェクトにはタイプ階層があります。基本インターフェイスは &lt;code&gt;KProperty&lt;/code&gt; で、名前やタイプなど、プロパティに関するメタデータを取得できます。プロパティオブジェクトを使用してオブジェクトのプロパティの値を読み取りまたは変更する場合は、プロパティの種類を指定するサブインターフェイスを使用する必要があります。不変のプロパティは通常 &lt;code&gt;KProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt; であり、変更可能なプロパティは通常 &lt;code&gt;KMutableProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt; です。これらはどちらも汎用インターフェースであり、 &lt;code&gt;R&lt;/code&gt; はレシーバータイプ（プロパティが宣言されているタイプ、この場合は &lt;code&gt;Person&lt;/code&gt; )です。）、 &lt;code&gt;V&lt;/code&gt; はプロパティの値のタイプです。</target>
        </trans-unit>
        <trans-unit id="1a8aae926c8fa4cd902ab72788ba84f110e52d36" translate="yes" xml:space="preserve">
          <source>The result is computed as &lt;code&gt;r = this - (q * divisor)&lt;/code&gt; where &lt;code&gt;q&lt;/code&gt; is the quotient of division rounded to the nearest integer, &lt;code&gt;q = round(this / other)&lt;/code&gt;.</source>
          <target state="translated">結果は、 &lt;code&gt;r = this - (q * divisor)&lt;/code&gt; として計算されます。ここで、 &lt;code&gt;q&lt;/code&gt; は、最も近い整数に丸められた除算の商、 &lt;code&gt;q = round(this / other)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8346187656aa601c46c1b882160101b5d70d1783" translate="yes" xml:space="preserve">
          <source>The result is going to be:</source>
          <target state="translated">結果が出てきます。</target>
        </trans-unit>
        <trans-unit id="f757614cb2200a5a31db5b9a50190e9f1a783287" translate="yes" xml:space="preserve">
          <source>The result is the same, but this code uses only non-blocking &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt;. The main thread invoking &lt;code&gt;runBlocking&lt;/code&gt;&lt;em&gt;blocks&lt;/em&gt; until the coroutine inside &lt;code&gt;runBlocking&lt;/code&gt; completes.</source>
          <target state="translated">結果は同じですが、このコードは非ブロッキング&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;遅延&lt;/a&gt;のみを使用します。呼び出しメインスレッド &lt;code&gt;runBlocking&lt;/code&gt; &lt;em&gt;ブロックを&lt;/em&gt;内部コルーチンまで &lt;code&gt;runBlocking&lt;/code&gt; を完了します。</target>
        </trans-unit>
        <trans-unit id="80513416e38e21b1cd6b19983bdbc1cd0f8dbc1d" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;minus&lt;/code&gt; contains the elements of the original collection &lt;em&gt;except&lt;/em&gt; the elements from the second operand. If it's an element, &lt;code&gt;minus&lt;/code&gt; removes its &lt;em&gt;first&lt;/em&gt; occurrence; if it's a collection, &lt;em&gt;all&lt;/em&gt; occurrences of its elements are removed.</source>
          <target state="translated">&lt;code&gt;minus&lt;/code&gt; の結果には、第2オペランドの要素を&lt;em&gt;除く&lt;/em&gt;元のコレクションの要素が含まれます。要素の場合、 &lt;code&gt;minus&lt;/code&gt; は&lt;em&gt;最初の&lt;/em&gt;出現を削除します。コレクションの場合、その要素の&lt;em&gt;すべての&lt;/em&gt;出現が削除されます。</target>
        </trans-unit>
        <trans-unit id="9f4386a5cc0897ae566404e34449e10c9271784f" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;plus&lt;/code&gt; contains the elements from the original collection &lt;em&gt;and&lt;/em&gt; from the second operand.</source>
          <target state="translated">&lt;code&gt;plus&lt;/code&gt; の結果には、元のコレクション&lt;em&gt;と&lt;/em&gt;第2オペランドの要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="ff8add7f5e14fd024c26ef191ab483a18b621fed" translate="yes" xml:space="preserve">
          <source>The result of the future computation. Blocks execution until the future is ready. Second attempt to get will result in an error.</source>
          <target state="translated">未来の計算結果。未来が準備できるまで実行をブロックします。2回目の取得はエラーになります。</target>
        </trans-unit>
        <trans-unit id="b0a33939298c1573b79334a09954b9afb450d438" translate="yes" xml:space="preserve">
          <source>The result of this code is quite interesting, so we'll analyze it in mode detail:</source>
          <target state="translated">このコードの結果がかなり面白いので、モードで詳しく分析してみます。</target>
        </trans-unit>
        <trans-unit id="4a889b01b76fad01cdae52fa6c7d371792173b90" translate="yes" xml:space="preserve">
          <source>The result of this code is quite interesting, so we'll analyze it in more detail:</source>
          <target state="translated">このコードの結果はかなり面白いので、もう少し詳しく分析してみます。</target>
        </trans-unit>
        <trans-unit id="a92982b6e3242403fa82d0db42fdb4534028b312" translate="yes" xml:space="preserve">
          <source>The result of this code is:</source>
          <target state="translated">このコードの結果は</target>
        </trans-unit>
        <trans-unit id="ee6868c39ff4d2539255b06db5a2381813300a75" translate="yes" xml:space="preserve">
          <source>The result of this code:</source>
          <target state="translated">このコードの結果です。</target>
        </trans-unit>
        <trans-unit id="4844d20ae5c2024023a55c2b6b3214cb6ce72593" translate="yes" xml:space="preserve">
          <source>The resulting &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt; determines the equality and order of keys according to their natural sorting order.</source>
          <target state="translated">結果の&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt;は、自然なソート順に従ってキーの等価性と順序を決定します。</target>
        </trans-unit>
        <trans-unit id="e25355ad3b686053cc1bc487b49186167f01eccb" translate="yes" xml:space="preserve">
          <source>The resulting &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt; determines the equality and order of keys according to the sorting order provided by the given &lt;a href=&quot;sorted-map-of#kotlin.collections%24sortedMapOf(java.util.Comparator((kotlin.collections.sortedMapOf.K)),%20kotlin.Array((kotlin.Pair((kotlin.collections.sortedMapOf.K,%20kotlin.collections.sortedMapOf.V)))))/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">結果の&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt;は、指定された&lt;a href=&quot;sorted-map-of#kotlin.collections%24sortedMapOf(java.util.Comparator((kotlin.collections.sortedMapOf.K)),%20kotlin.Array((kotlin.Pair((kotlin.collections.sortedMapOf.K,%20kotlin.collections.sortedMapOf.V)))))/comparator&quot;&gt;コンパレータ&lt;/a&gt;によって提供されるソート順に従って、キーの同等性と順序を決定します。</target>
        </trans-unit>
        <trans-unit id="634514a1676e5366bef12944cb3543ffee02d086" translate="yes" xml:space="preserve">
          <source>The resulting &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt; determines the equality and order of keys according to their natural sorting order.</source>
          <target state="translated">結果の&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt;は、自然な並べ替え順序に従ってキーの同等性と順序を決定します。</target>
        </trans-unit>
        <trans-unit id="8f890bef6e41ea49023cd4e145c9ac8e02777347" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value has the same binary representation as this &lt;code&gt;UByte&lt;/code&gt; value.</source>
          <target state="translated">結果の &lt;code&gt;Byte&lt;/code&gt; 値は、この &lt;code&gt;UByte&lt;/code&gt; 値と同じバイナリ表現を持っています。</target>
        </trans-unit>
        <trans-unit id="bcc21fce83c8a76fb70c4188dec066655dc99e5f" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is equal to &lt;code&gt;this.toInt().toByte()&lt;/code&gt;.</source>
          <target state="translated">結果の &lt;code&gt;Byte&lt;/code&gt; 値は &lt;code&gt;this.toInt().toByte()&lt;/code&gt; と等しくなります。</target>
        </trans-unit>
        <trans-unit id="500fd389152dfac3d3a3bdf516db69049b6112d1" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;Int&lt;/code&gt; value.</source>
          <target state="translated">結果の &lt;code&gt;Byte&lt;/code&gt; 値は、この &lt;code&gt;Int&lt;/code&gt; 値の最下位8ビットで表されます。</target>
        </trans-unit>
        <trans-unit id="f5d708d0dd756dc92bd87189470b9a3b0f187bad" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;Long&lt;/code&gt; value.</source>
          <target state="translated">結果の &lt;code&gt;Byte&lt;/code&gt; 値は、この &lt;code&gt;Long&lt;/code&gt; 値の最下位8ビットで表されます。</target>
        </trans-unit>
        <trans-unit id="f1c617d1ad1ce5e0250376516d3fc7acee8c76a7" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;Short&lt;/code&gt; value.</source>
          <target state="translated">結果の &lt;code&gt;Byte&lt;/code&gt; 値は、この &lt;code&gt;Short&lt;/code&gt; 値の最下位8ビットで表されます。</target>
        </trans-unit>
        <trans-unit id="3c0aa6565c5cc7948d96b6aa45e671f5d970085c" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;UInt&lt;/code&gt; value. Note that the resulting &lt;code&gt;Byte&lt;/code&gt; value may be negative.</source>
          <target state="translated">結果の &lt;code&gt;Byte&lt;/code&gt; 値は、この &lt;code&gt;UInt&lt;/code&gt; 値の最下位8ビットで表されます。結果の &lt;code&gt;Byte&lt;/code&gt; 値が負になる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dd46bb58530a520cf29001659a58a32130329b50" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;ULong&lt;/code&gt; value. Note that the resulting &lt;code&gt;Byte&lt;/code&gt; value may be negative.</source>
          <target state="translated">結果の &lt;code&gt;Byte&lt;/code&gt; 値は、この &lt;code&gt;ULong&lt;/code&gt; 値の最下位8ビットで表されます。結果の &lt;code&gt;Byte&lt;/code&gt; 値が負になる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f0796ad9fb92ce12d111b3b2e535fa3a4138ff67" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;UShort&lt;/code&gt; value. Note that the resulting &lt;code&gt;Byte&lt;/code&gt; value may be negative.</source>
          <target state="translated">結果の &lt;code&gt;Byte&lt;/code&gt; 値は、この &lt;code&gt;UShort&lt;/code&gt; 値の最下位8ビットで表されます。結果の &lt;code&gt;Byte&lt;/code&gt; 値が負になる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1dcececb10dcdcffc92e35f3fc84338088990b5d" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Char&lt;/code&gt; code is equal to this value reinterpreted as an unsigned number, i.e. it has the same binary representation as this &lt;code&gt;Short&lt;/code&gt;.</source>
          <target state="translated">結果の &lt;code&gt;Char&lt;/code&gt; コードは、符号なしの数値として再解釈されたこの値に等しくなります。つまり、この &lt;code&gt;Short&lt;/code&gt; と同じバイナリ表現になります。</target>
        </trans-unit>
        <trans-unit id="7d3990133293f18f718906ea26c50d316e7978f0" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Char&lt;/code&gt; code is represented by the least significant 16 bits of this &lt;code&gt;Int&lt;/code&gt; value.</source>
          <target state="translated">結果の &lt;code&gt;Char&lt;/code&gt; コードは、この &lt;code&gt;Int&lt;/code&gt; 値の最下位16ビットで表されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
