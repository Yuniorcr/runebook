<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="32436b6e0db9570146d7ba448ba30967830f5018" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.ByteArray%2C+kotlin.Byte%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.ByteArray%2C+kotlin.Byte%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="35dba338afbb495b0a3fee48205b47c02d6cd17d" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.CharArray%2C+kotlin.Char%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.CharArray%2C+kotlin.Char%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="6a989bccedd50f460fec83c984ea086b5374cda2" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.DoubleArray%2C+kotlin.Double%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.DoubleArray%2C+kotlin.Double%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="4c8fe4f5da17ffe178b1da2e583954ae4db2fe02" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.FloatArray%2C+kotlin.Float%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.FloatArray%2C+kotlin.Float%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="da92a01c9fda1cc311a2b96f412edafd73b5d9ce" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.IntArray%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.IntArray%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="9b2d8c7078982603d4849627b2da7584b90f4aef" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.LongArray%2C+kotlin.Long%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.LongArray%2C+kotlin.Long%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="8233d1849f894965e253132c3f22ce05a679e787" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.ShortArray%2C+kotlin.Short%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.ShortArray%2C+kotlin.Short%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="98a42356a2fc1524a68749359c93c7974bced06d" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.UByteArray%2C+kotlin.UByte%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.UByteArray%2C+kotlin.UByte%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="b15b28923f6f04089e5f10f0f8358034bc1a1a4b" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.UIntArray%2C+kotlin.UInt%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.UIntArray%2C+kotlin.UInt%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="38ce4f5ae8801b01f36ab3663b86bb3e75d6d968" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.ULongArray%2C+kotlin.ULong%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.ULongArray%2C+kotlin.ULong%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="a34eb7ed0c21feb27df0998cef9c890f0f9c50df" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.UShortArray%2C+kotlin.UShort%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch%28kotlin.UShortArray%2C+kotlin.UShort%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="8b65b9654b757dfe7b562973acd383e219516b05" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20java.util.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted according to the specified &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20java.util.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;comparator&lt;/a&gt;, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20java.util.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列は、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20java.util.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;コンパレータ&lt;/a&gt;に従ってソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="172c1b2c3c91b08b1b92612a3a176f1e654bb599" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="208229a273e1f273a9b7a3dec32269ba6d7fbb8f" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.ByteArray,%20kotlin.Byte,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.ByteArray,%20kotlin.Byte,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="a1685fc27c49c67545d45d08837650f24ed74452" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.CharArray,%20kotlin.Char,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.CharArray,%20kotlin.Char,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="81722343aea65bbcada90dead76c02f5382fe1eb" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.DoubleArray,%20kotlin.Double,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.DoubleArray,%20kotlin.Double,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="5601b1518202867a8151751863fe6059f2dc4a18" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.FloatArray,%20kotlin.Float,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.FloatArray,%20kotlin.Float,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="711dbbdbe887baf9223b40bd00153d873e0e47c5" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.IntArray,%20kotlin.Int,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.IntArray,%20kotlin.Int,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="3c4da0a6500b232b3691bc97479a9a498a8e6cf0" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.LongArray,%20kotlin.Long,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.LongArray,%20kotlin.Long,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="b5df879c89f080b0dd7812f7399e0a06b542ac5c" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.ShortArray,%20kotlin.Short,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.ShortArray,%20kotlin.Short,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="0c2e52144683b6a08199e94c5fca2df35e2039d7" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.UByteArray,%20kotlin.UByte,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.UByteArray,%20kotlin.UByte,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="b231d4078642d7ddd64b1795cfb07cf71f737bfb" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.UIntArray,%20kotlin.UInt,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.UIntArray,%20kotlin.UInt,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="766e5e1d02d3fb8be9c197d17f0951b8dc0ce6fa" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.ULongArray,%20kotlin.ULong,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.ULongArray,%20kotlin.ULong,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="5da56c90ddf0e73a477026f3b3fb477285c71edf" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.UShortArray,%20kotlin.UShort,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../../kotlin.collections/binary-search#kotlin.collections%24binarySearch(kotlin.UShortArray,%20kotlin.UShort,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="21a995506be2a3f4f68fb294fc4196dcd093a45b" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+java.util.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted according to the specified &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+java.util.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+java.util.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列は、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+java.util.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;コンパレータ&lt;/a&gt;に従ってソートされることが期待されます。それ以外の場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="afd7b9faa0ee57152595e952895219afe610e6b6" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="138a21c025d824bdcc6e5ebffea2a8c48d7c1cf2" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20java.util.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted according to the specified &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20java.util.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;comparator&lt;/a&gt;, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20java.util.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列は、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20java.util.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;コンパレータ&lt;/a&gt;に従ってソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="0d8418eac91c114d8822322a651bd6c3cebfbbe0" translate="yes" xml:space="preserve">
          <source>Searches the array or the range of the array for the provided &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.Array((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;の配列または配列の範囲を検索します。配列はソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="ac08cbdac0791fdddb3eff14b0ee78f0339f0b9d" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for an element for which &lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearch.T%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function returns zero using the binary search algorithm. The list is expected to be sorted into ascending order according to the provided &lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearch.T%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt;, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、このリストまたはその範囲から、&lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearch.T%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数がゼロを返す要素を検索します。リストは、提供された&lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearch.T%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;に従って昇順でソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="a12b773301b3c59bfccfe4d40f79324c71d5747a" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for an element for which &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearch.T%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function returns zero using the binary search algorithm. The list is expected to be sorted into ascending order according to the provided &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearch.T%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt;, otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、このリストまたはその範囲から、&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearch.T%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数がゼロを返す要素を検索します。リストは、提供された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearch.T%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;に従って昇順でソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="b4d8e8c3188c0cfbbe28544ddcf06c5d4196b4d9" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for an element for which the given &lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearch.T,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function returns zero using the binary search algorithm.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、このリストまたはその範囲で、指定された&lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearch.T,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数がゼロを返す要素を検索します。</target>
        </trans-unit>
        <trans-unit id="e7521243bd3483add004abe43f92d3e161af732b" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for an element for which the given &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearch.T,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function returns zero using the binary search algorithm.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、このリストまたはその範囲で、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearch.T,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数がゼロを返す要素を検索します。</target>
        </trans-unit>
        <trans-unit id="aa99a3299c671573dd13fd8f2f8528c837ca1867" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for an element having the key returned by the specified &lt;a href=&quot;../binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function equal to the provided &lt;a href=&quot;../binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fkey&quot;&gt;key&lt;/a&gt; value using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements. otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;../binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数によって返されたキーが、指定された&lt;a href=&quot;../binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fkey&quot;&gt;キー&lt;/a&gt;値と等しい要素をこのリストまたはその範囲で検索します。リストは、その要素のキーの比較可能な自然順序付けに従って昇順でソートされることが期待されています。それ以外の場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="0f9ce46a44ee7bef83394d3c8cd839487191ee59" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for an element having the key returned by the specified &lt;a href=&quot;../binary-search-by#kotlin.collections%24binarySearchBy(kotlin.collections.List((kotlin.collections.binarySearchBy.T)),%20kotlin.collections.binarySearchBy.K?,%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearchBy.T,%20kotlin.collections.binarySearchBy.K?)))/selector&quot;&gt;selector&lt;/a&gt; function equal to the provided &lt;a href=&quot;../binary-search-by#kotlin.collections%24binarySearchBy(kotlin.collections.List((kotlin.collections.binarySearchBy.T)),%20kotlin.collections.binarySearchBy.K?,%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearchBy.T,%20kotlin.collections.binarySearchBy.K?)))/key&quot;&gt;key&lt;/a&gt; value using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements. otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;../binary-search-by#kotlin.collections%24binarySearchBy(kotlin.collections.List((kotlin.collections.binarySearchBy.T)),%20kotlin.collections.binarySearchBy.K?,%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearchBy.T,%20kotlin.collections.binarySearchBy.K?)))/selector&quot;&gt;セレクター&lt;/a&gt;関数によって返されるキーが指定された&lt;a href=&quot;../binary-search-by#kotlin.collections%24binarySearchBy(kotlin.collections.List((kotlin.collections.binarySearchBy.T)),%20kotlin.collections.binarySearchBy.K?,%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearchBy.T,%20kotlin.collections.binarySearchBy.K?)))/key&quot;&gt;キー&lt;/a&gt;値と等しい要素をこのリストまたはその範囲で検索します。リストは、その要素のキーの比較可能な自然順序に従って昇順でソートされることが期待されます。それ以外の場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="ff73b47d31632246c6429f92dc75d01803e096bf" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for an element having the key returned by the specified &lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function equal to the provided &lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fkey&quot;&gt;key&lt;/a&gt; value using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements. otherwise the result is undefined.</source>
          <target state="translated">バイナリサーチアルゴリズムを使用して、指定された&lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数によって返されたキーが、指定された&lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fkey&quot;&gt;キー&lt;/a&gt;値と等しい要素をこのリストまたはその範囲で検索します。リストは、その要素のキーの比較可能な自然順序付けに従って昇順でソートされることが期待されています。それ以外の場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="f97f502c4471174a07a09380a5303b6fdff50a94" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for an element having the key returned by the specified &lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy(kotlin.collections.List((kotlin.collections.binarySearchBy.T)),%20kotlin.collections.binarySearchBy.K?,%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearchBy.T,%20kotlin.collections.binarySearchBy.K?)))/selector&quot;&gt;selector&lt;/a&gt; function equal to the provided &lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy(kotlin.collections.List((kotlin.collections.binarySearchBy.T)),%20kotlin.collections.binarySearchBy.K?,%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearchBy.T,%20kotlin.collections.binarySearchBy.K?)))/key&quot;&gt;key&lt;/a&gt; value using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements. otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、指定された&lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy(kotlin.collections.List((kotlin.collections.binarySearchBy.T)),%20kotlin.collections.binarySearchBy.K?,%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearchBy.T,%20kotlin.collections.binarySearchBy.K?)))/selector&quot;&gt;セレクター&lt;/a&gt;関数によって返されるキーが指定された&lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy(kotlin.collections.List((kotlin.collections.binarySearchBy.T)),%20kotlin.collections.binarySearchBy.K?,%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearchBy.T,%20kotlin.collections.binarySearchBy.K?)))/key&quot;&gt;キー&lt;/a&gt;値と等しい要素をこのリストまたはその範囲で検索します。リストは、その要素のキーの比較可能な自然順序に従って昇順でソートされることが期待されます。それ以外の場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="b8c90155d71b1d5e676d2bf69cb0ebe47fe33198" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for the provided &lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The list is expected to be sorted into ascending order according to the specified &lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、このリストまたはその範囲で、指定された&lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;を検索します。リストは、指定された&lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;コンパレータ&lt;/a&gt;に従って昇順でソートされると予想されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="4828bed591fb431643e0a003aeb6081854e0de78" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for the provided &lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、このリストまたはその範囲で、指定された&lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;を検索します。リストは、その要素の比較可能な自然順序付けに従って昇順でソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="94a25e243789c157aae91bf65fbab646f46083df" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for the provided &lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The list is expected to be sorted into ascending order according to the specified &lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;comparator&lt;/a&gt;, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、このリストまたはその範囲で提供された&lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;を検索します。リストは、指定された&lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;コンパレータ&lt;/a&gt;に従って昇順でソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="e11720fc6bfa5af236f5b984ea8be1135cb12ab6" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for the provided &lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T?)),%20kotlin.collections.binarySearch.T?,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、このリストまたはその範囲で提供された&lt;a href=&quot;../binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T?)),%20kotlin.collections.binarySearch.T?,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;を検索します。リストは、その要素の比較可能な自然順序に従って昇順でソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="f5eaf2f3013486a1bf776e47151f79e9ff0bdc24" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for the provided &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The list is expected to be sorted into ascending order according to the specified &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、このリストまたはその範囲で、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;を検索します。リストは、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;コンパレータ&lt;/a&gt;に従って昇順でソートされると予想されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="58beecb82fb00ba9003803dd474114c838b212a6" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for the provided &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、このリストまたはその範囲で、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;を検索します。リストは、その要素の比較可能な自然順序付けに従って昇順でソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="3ad10097b382c0b5ae463dfe7f3937285f41b299" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for the provided &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The list is expected to be sorted into ascending order according to the specified &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;comparator&lt;/a&gt;, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、このリストまたはその範囲で提供された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;を検索します。リストは、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.collections.binarySearch.T,%20kotlin.Comparator((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;コンパレータ&lt;/a&gt;に従って昇順でソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="e050ba4b8a15e2ce6ed2db4aef72faf98aee8f1b" translate="yes" xml:space="preserve">
          <source>Searches this list or its range for the provided &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T?)),%20kotlin.collections.binarySearch.T?,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;element&lt;/a&gt; using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements, otherwise the result is undefined.</source>
          <target state="translated">バイナリ検索アルゴリズムを使用して、このリストまたはその範囲で提供された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T?)),%20kotlin.collections.binarySearch.T?,%20kotlin.Int,%20kotlin.Int)/element&quot;&gt;要素&lt;/a&gt;を検索します。リストは、その要素の比較可能な自然順序に従って昇順でソートされることが期待されます。そうでない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="d95aec9d6ab7d91b52bb78f16150beb3b6b1073e" translate="yes" xml:space="preserve">
          <source>Second value.</source>
          <target state="translated">2番目の値。</target>
        </trans-unit>
        <trans-unit id="29f551e9571570ec897249c876759cd9ed415d56" translate="yes" xml:space="preserve">
          <source>Secondary Constructors</source>
          <target state="translated">二次構成要素</target>
        </trans-unit>
        <trans-unit id="d4a404bdc75bfb5e190100e5dc35001e7e33fa7a" translate="yes" xml:space="preserve">
          <source>Secondary constructors</source>
          <target state="translated">セカンダリコンストラクタ</target>
        </trans-unit>
        <trans-unit id="132cf7b279a03fe265ff92246a6376b881bf28a0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../-contract-builder/calls-in-place&quot;&gt;ContractBuilder.callsInPlace&lt;/a&gt; for the details of the call-in-place function contract.</source>
          <target state="translated">&lt;a href=&quot;../-contract-builder/calls-in-place&quot;&gt;直接&lt;/a&gt;呼び出し機能コントラクトの詳細については、ContractBuilder.callsInPlaceを参照してください。</target>
        </trans-unit>
        <trans-unit id="fa59c08b1cd4ad0c7fe4dab4d9693e8d90f1b7c9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;basic-types#string-templates&quot;&gt;String templates&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;basic-types#string-templates&quot;&gt;文字列テンプレート&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7f8c0b5b1f472754e2583d323d7fb292fb40553d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;basic-types#string-templates&quot;&gt;String templates&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;basic-types#string-templates&quot;&gt;文字列テンプレートを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8f8176ea3dfc7a2d7972fa8cbcaf12cbeec6b548" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;basic-types#unsigned-integers&quot;&gt;reference&lt;/a&gt; for details.</source>
          <target state="translated">詳細は&lt;a href=&quot;basic-types#unsigned-integers&quot;&gt;リファレンス&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="661cf18a1268814cbcef108aaf358e72333b0829" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;c_interop&quot;&gt;INTEROP.md&lt;/a&gt; for an example case where the library uses some plain C features (e.g. unsafe pointers, structs etc.).</source>
          <target state="translated">ライブラリがプレーンなC機能（安全でないポインタ、構造体など）を使用する場合の例については、&lt;a href=&quot;c_interop&quot;&gt;INTEROP.md&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="356b070138822abfa47db60df37ecf9cf278f031" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;classes&quot;&gt;Classes&lt;/a&gt; and &lt;a href=&quot;typecasts&quot;&gt;Type casts&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;classes&quot;&gt;クラス&lt;/a&gt;と&lt;a href=&quot;typecasts&quot;&gt;型キャストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="43368afc9c7d6c814b72a88bff8a1f083cbd8aab" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;classes&quot;&gt;classes&lt;/a&gt; and &lt;a href=&quot;object-declarations&quot;&gt;objects and instances&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;classes&quot;&gt;クラス&lt;/a&gt;と&lt;a href=&quot;object-declarations&quot;&gt;オブジェクトとインスタンスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d63182055a00b09bf44245935dcf2b86fba89e4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;classes#overriding-properties&quot;&gt;Overriding Properties&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;classes#overriding-properties&quot;&gt;プロパティのオーバーライドを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="6045b199ca5c4a479e2bb6f0ff3afe72b0b53f8f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;collections-overview&quot;&gt;Collections overview&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;collections-overview&quot;&gt;コレクションの概要を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6aed9c599c727e0e8968ecfe9ad5a2b6cf6f273c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;control-flow#for-loops&quot;&gt;for loop&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;control-flow#for-loops&quot;&gt;forループを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="af880e9532e7b2e3551633495b0f6473ff1fcae4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;control-flow#if-expression&quot;&gt;&lt;em&gt;if&lt;/em&gt;-expressions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;control-flow#if-expression&quot;&gt;&lt;em&gt;if&lt;/em&gt; -expressionsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e5eef267c081e03fc5772f23f897355c86390bc2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;control-flow#when-expression&quot;&gt;when expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;control-flow#when-expression&quot;&gt;いつ式を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e781e5c6b063591c11082b6bfe59976039aab905" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;control-flow#while-loops&quot;&gt;while loop&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;control-flow#while-loops&quot;&gt;whileループを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="72fdd1b4df9f030ac2e6eb827afe4048c030e9c8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions&quot;&gt;Functions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;functions&quot;&gt;関数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3822f4b6e3755d6c4150f688e9f8dd4601b2b43e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;getting-started&quot;&gt;Getting Started with IntelliJ IDEA&lt;/a&gt; on how to set up development environment for Kotlin. In competitive programming, a single project is usually created and each problem's solution is written in a single source file.</source>
          <target state="translated">Kotlinの開発環境を設定する方法については&lt;a href=&quot;getting-started&quot;&gt;、IntelliJ IDEAの概要を&lt;/a&gt;ご覧ください。競争力のあるプログラミングでは、通常、単一のプロジェクトが作成され、各問題のソリューションは単一のソースファイルに記述されます。</target>
        </trans-unit>
        <trans-unit id="6d7a0c506dac9efc180dd3f27848ac388b3ed31a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/JetBrains/kotlin/tree/master/libraries/examples/kotlin-jsr223-local-example&quot;&gt;here&lt;/a&gt; for a larger example project using the API.</source>
          <target state="translated">APIを使用した大規模なサンプルプロジェクトについては、&lt;a href=&quot;https://github.com/JetBrains/kotlin/tree/master/libraries/examples/kotlin-jsr223-local-example&quot;&gt;こちら&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="0fcdd2501312f55e8c300f1256aabc2886c584c3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/unsigned-types.md&quot;&gt;language proposal for unsigned types&lt;/a&gt; for technical details and further discussion.</source>
          <target state="translated">技術的な詳細と詳細な説明については、&lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/unsigned-types.md&quot;&gt;符号なし型の言語提案を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="39862abac54383f5db77262fe8e95528586cbefb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://kotlinlang.org/lp/mobile/&quot;&gt;KMM features, case studies and examples&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/lp/mobile/&quot;&gt;KMMの機能、ケーススタディ、例を&lt;/a&gt;ご覧ください</target>
        </trans-unit>
        <trans-unit id="7532039c08b50ced577b6205ef701be3283628d8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;inline-classes&quot;&gt;reference&lt;/a&gt; for inline classes for details.</source>
          <target state="translated">詳細&lt;a href=&quot;inline-classes&quot;&gt;については&lt;/a&gt;、インラインクラスのリファレンスをご覧ください。</target>
        </trans-unit>
        <trans-unit id="c9f672232b71ccbe3bcad54d8cfd048b541d715b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;jvm-get-started&quot;&gt;Getting Started with IntelliJ IDEA&lt;/a&gt; on how to set up development environment for Kotlin. In competitive programming, a single project is usually created and each problem's solution is written in a single source file.</source>
          <target state="translated">Kotlinの開発環境をセットアップする方法については&lt;a href=&quot;jvm-get-started&quot;&gt;、IntelliJIDEA入門を&lt;/a&gt;参照してください。競技プログラミングでは、通常、単一のプロジェクトが作成され、各問題の解決策が単一のソースファイルに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="72d78c0e85a90eba65d587e0235fa9366f4f5b2e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;kotlin-doc&quot;&gt;Documenting Kotlin Code&lt;/a&gt; for information on the documentation comment syntax.</source>
          <target state="translated">ドキュメントコメント構文の詳細については、&lt;a href=&quot;kotlin-doc&quot;&gt;Kotlinコードのドキュメント化を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="f8e0c42cf38ae5c881bc057bd395e1165e8a43a2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;lambdas&quot;&gt;Higher-order functions and Lambdas&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;lambdas&quot;&gt;高階関数とラムダを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="61c6924790d73d55cb25a2c74a3ac3834c60937b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;null-safety&quot;&gt;Null-safety&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;null-safety&quot;&gt;Null-safetyを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cb52711a4d210618f01364bb8923cb2cf2059296" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;packages&quot;&gt;Packages&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;packages&quot;&gt;パッケージを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e11d1dd269d934fe14336d27089a06c861b622e8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;packages#imports&quot;&gt;Imports&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;packages#imports&quot;&gt;インポート&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e80083b4cd5cae8fb0037b50cd120ea1dcca9d8a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ranges&quot;&gt;Ranges&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ranges&quot;&gt;Rangesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a33677e991fdf4152646891d03c1672e31759159" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;this-expressions&quot;&gt;Qualified &lt;em&gt;this&lt;/em&gt; expressions&lt;/a&gt; to learn about disambiguation of &lt;em&gt;this&lt;/em&gt; in inner classes.</source>
          <target state="translated">内部クラスでの&lt;em&gt;これの&lt;/em&gt;明確化については、&lt;a href=&quot;this-expressions&quot;&gt;修飾された&lt;em&gt;この&lt;/em&gt;式&lt;/a&gt;を参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="49dc4f77dcd7817eb995e6e5a3ebc71a2c10d462" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;using-gradle#compiler-options&quot;&gt;Compiler options in Gradle&lt;/a&gt; for details. For &lt;a href=&quot;mpp-intro&quot;&gt;multiplatform projects&lt;/a&gt;, see &lt;a href=&quot;mpp-dsl-reference#language-settings&quot;&gt;language settings&lt;/a&gt;.</source>
          <target state="translated">詳細については&lt;a href=&quot;using-gradle#compiler-options&quot;&gt;、Gradleのコンパイラオプション&lt;/a&gt;を参照してください。以下のために&lt;a href=&quot;mpp-intro&quot;&gt;マルチプロジェクト&lt;/a&gt;、参照&lt;a href=&quot;mpp-dsl-reference#language-settings&quot;&gt;言語設定を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="94f57fb649679b58ce75a35d562414085cf87ebd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;using-gradle#compiler-options&quot;&gt;Compiler options in Gradle&lt;/a&gt; for details. For &lt;a href=&quot;whatsnew13#multiplatform-projects&quot;&gt;Multiplatform Projects&lt;/a&gt; settings, see &lt;a href=&quot;building-mpp-with-gradle#language-settings&quot;&gt;building Multiplatform Projects with Gradle&lt;/a&gt; section.</source>
          <target state="translated">詳細については&lt;a href=&quot;using-gradle#compiler-options&quot;&gt;、Gradleのコンパイラオプション&lt;/a&gt;を参照してください。以下のために&lt;a href=&quot;whatsnew13#multiplatform-projects&quot;&gt;マルチプロジェクト&lt;/a&gt;の設定、参照&lt;a href=&quot;building-mpp-with-gradle#language-settings&quot;&gt;のGradleのでマルチプロジェクトを構築する&lt;/a&gt;セクション。</target>
        </trans-unit>
        <trans-unit id="7ed0bb70c421b45440cc0db209c02920f745d74c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;using-maven#specifying-compiler-options&quot;&gt;Compiler options in Maven&lt;/a&gt; for details.</source>
          <target state="translated">詳細については&lt;a href=&quot;using-maven#specifying-compiler-options&quot;&gt;、Mavenのコンパイラオプション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b54c428be4abac9b8aa7be4ba584b46daabf19ab" translate="yes" xml:space="preserve">
          <source>See a full coroutine creation stack, as well as a call stack inside the coroutine. The stack includes all frames with variable values, even those that would be lost during standard debugging.</source>
          <target state="translated">コアーチンの作成スタックと、コアーチン内部のコールスタックを参照してください。スタックには、変数値を持つすべてのフレームが含まれており、標準的なデバッグ中に失われてしまうフレームも含まれています。</target>
        </trans-unit>
        <trans-unit id="ce3978d67b7d1bd90a41b2181470928f80a9d834" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;properties&quot;&gt;Properties And Fields&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;properties&quot;&gt;プロパティとフィールド&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1927e1cd499f912b4e75aeea8d95fdabcc28792e" translate="yes" xml:space="preserve">
          <source>See also logarithm functions for common fixed bases: &lt;a href=&quot;ln#kotlin.math%24ln%28kotlin.Double%29&quot;&gt;ln&lt;/a&gt;, &lt;a href=&quot;log10#kotlin.math%24log10%28kotlin.Double%29&quot;&gt;log10&lt;/a&gt; and &lt;a href=&quot;log2#kotlin.math%24log2%28kotlin.Double%29&quot;&gt;log2&lt;/a&gt;.</source>
          <target state="translated">一般的な固定底の対数関数も参照してください：&lt;a href=&quot;ln#kotlin.math%24ln%28kotlin.Double%29&quot;&gt;ln&lt;/a&gt;、&lt;a href=&quot;log10#kotlin.math%24log10%28kotlin.Double%29&quot;&gt;log10&lt;/a&gt;および&lt;a href=&quot;log2#kotlin.math%24log2%28kotlin.Double%29&quot;&gt;log2&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="45bfbe918ee8b7efacf36711757200ecfce30435" translate="yes" xml:space="preserve">
          <source>See also logarithm functions for common fixed bases: &lt;a href=&quot;ln#kotlin.math%24ln(kotlin.Double)&quot;&gt;ln&lt;/a&gt;, &lt;a href=&quot;log10#kotlin.math%24log10(kotlin.Double)&quot;&gt;log10&lt;/a&gt; and &lt;a href=&quot;log2#kotlin.math%24log2(kotlin.Double)&quot;&gt;log2&lt;/a&gt;.</source>
          <target state="translated">一般的な固定ベースの対数関数：&lt;a href=&quot;ln#kotlin.math%24ln(kotlin.Double)&quot;&gt;ln&lt;/a&gt;、&lt;a href=&quot;log10#kotlin.math%24log10(kotlin.Double)&quot;&gt;log10&lt;/a&gt;、&lt;a href=&quot;log2#kotlin.math%24log2(kotlin.Double)&quot;&gt;log2&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="446b6ef7aa0b302d8a46c4286a5d36536a09aea4" translate="yes" xml:space="preserve">
          <source>See also or Experimental API &lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/experimental.md&quot;&gt;KEEP&lt;/a&gt; for technical details.</source>
          <target state="translated">技術的な詳細については、または実験的API &lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/experimental.md&quot;&gt;KEEP&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="c67250701d5ea315927e478928dbae47c640c4f8" translate="yes" xml:space="preserve">
          <source>See also the Opt-in Requirements API &lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/experimental.md&quot;&gt;KEEP&lt;/a&gt; for technical details.</source>
          <target state="translated">また、要件オプトインAPIの参照&lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/experimental.md&quot;&gt;KEEP&lt;/a&gt;技術的な詳細については、を。</target>
        </trans-unit>
        <trans-unit id="b8d6677a32b4b229d038a3cbf6ebd226f8285a6a" translate="yes" xml:space="preserve">
          <source>See here for &lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization#current-project-status&quot;&gt;details&lt;/a&gt;.</source>
          <target state="translated">詳細はこちらを&lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization#current-project-status&quot;&gt;ご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="89bb66da1bc1695c79bf8970be2a0382cfd44b8d" translate="yes" xml:space="preserve">
          <source>See more about native binaries declaration at the &lt;a href=&quot;../building-mpp-with-gradle#building-final-native-binaries&quot;&gt;corresponding page&lt;/a&gt;.</source>
          <target state="translated">ネイティブバイナリ宣言の詳細については、&lt;a href=&quot;../building-mpp-with-gradle#building-final-native-binaries&quot;&gt;対応するページをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c90337477f28c69e470160c1be3c415aaf92ce14" translate="yes" xml:space="preserve">
          <source>See more details in &lt;a href=&quot;c_interop&quot;&gt;INTEROP.md&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;c_interop&quot;&gt;INTEROP.mdを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="452553878086517724efa33202a5a8964b0da5d2" translate="yes" xml:space="preserve">
          <source>See more info about dependencies at the &lt;a href=&quot;../building-mpp-with-gradle#adding-dependencies&quot;&gt;corresponding page&lt;/a&gt;.</source>
          <target state="translated">依存関係の詳細については、&lt;a href=&quot;../building-mpp-with-gradle#adding-dependencies&quot;&gt;対応するページをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d04fa7d9f4c04209951c47546bf6ec49100b9e3f" translate="yes" xml:space="preserve">
          <source>See no issues at all</source>
          <target state="translated">全く問題がないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="d29a6437cf181b0af5ceacce4b0721019014ce77" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../../../../../docs/reference/generics#type-projections&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../../../../docs/reference/generics#type-projections&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7b34fbd1aa7e811889de71121e06e6932f480175" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../../../../../docs/reference/generics#variance&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../../../../docs/reference/generics#variance&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7240928f0149f9330e21b7d8c8473b408e9be2b5" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../../../../../docs/reference/java-to-kotlin-interop#handling-signature-clashes-with-jvmname&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../../../../docs/reference/java-to-kotlin-interop#handling-signature-clashes-with-jvmname&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="4e56302902b6d7cf704d94dd232e74f328c57f2c" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../../../../../docs/reference/java-to-kotlin-interop#instance-fields&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../../../../docs/reference/java-to-kotlin-interop#instance-fields&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7a244dab269fec173abd1928c537d2e1eaaa4715" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../../../../../docs/reference/java-to-kotlin-interop#static-methods&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../../../../docs/reference/java-to-kotlin-interop#static-methods&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="f4cd375f16cd383b059d21dedc19c624ac2ba1de" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../../../../../docs/reference/reflection&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../../../../docs/reference/reflection&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="72cdc4d6bee3414fe6381333369ed7a61965be83" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../../../../../docs/reference/visibility-modifiers&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../../../../docs/reference/visibility-modifiers&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="fe954a2bf9d471f5fdc94f16960bf5a878c05413" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../tutorials/javascript/getting-started-maven/getting-started-with-maven&quot;&gt;Getting Started with Kotlin and JavaScript with Maven&lt;/a&gt; tutorial for more information.</source>
          <target state="translated">詳細については&lt;a href=&quot;../tutorials/javascript/getting-started-maven/getting-started-with-maven&quot;&gt;、Kotlin入門とMavenを使用したJavaScript&lt;/a&gt;チュートリアルをご覧ください。</target>
        </trans-unit>
        <trans-unit id="f69d353fcc18f1de1ac59cf0f9d284cc48a3cc84" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://kotlinlang.org/docs/reference/multiplatform.html&quot;&gt;documentation&lt;/a&gt; for details and steps to build a multiplatform project.</source>
          <target state="translated">マルチプラットフォームプロジェクトを構築するための詳細と手順については、&lt;a href=&quot;http://kotlinlang.org/docs/reference/multiplatform.html&quot;&gt;ドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="1cf78243b69a4b33515a1514a8bc6cae4ef1f751" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#expressions&quot;&gt;Grammar reference&lt;/a&gt; for the complete operators precedence hierarchy.</source>
          <target state="translated">演算子の優先順位の完全な階層については、&lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#expressions&quot;&gt;文法リファレンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="04290a32dde94e5467a257f67d0dc228f0d14cc5" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#forStatement&quot;&gt;grammar for &lt;em&gt;for&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">参照&lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#forStatement&quot;&gt;のための文法を&lt;em&gt;ため&lt;/em&gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ee1dc8e8d13d83e997447435f9ba472f0cd009f8" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#ifExpression&quot;&gt;grammar for &lt;em&gt;if&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#ifExpression&quot;&gt;&lt;em&gt;if&lt;/em&gt;&lt;/a&gt;の文法を&lt;em&gt;&lt;/em&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b285c0e86de8a581a61991ee7da4b754ae513e2" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#whenExpression&quot;&gt;grammar for &lt;em&gt;when&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#whenExpression&quot;&gt;&lt;em&gt;いつ&lt;/em&gt;&lt;/a&gt;文法を&lt;em&gt;&lt;/em&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dfb5b5177f3d4417b5b1aec6da0d268c7fb3dd0a" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#whileStatement&quot;&gt;grammar for &lt;em&gt;while&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#whileStatement&quot;&gt;&lt;em&gt;while&lt;/em&gt;&lt;/a&gt;文法を&lt;em&gt;&lt;/em&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4c142e485ce34a3edc749760733f1c02d73e19d6" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;type-aliases&quot;&gt;documentation&lt;/a&gt; and &lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/type-aliases.md&quot;&gt;KEEP&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;type-aliases&quot;&gt;ドキュメント&lt;/a&gt;と&lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/type-aliases.md&quot;&gt;KEEP&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f2fd457da1c9c81b713223b897fbc1dac4ccfea7" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;samples/libcurl&lt;/code&gt; for more details.</source>
          <target state="translated">詳細については、 &lt;code&gt;samples/libcurl&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="767754af5228f0307a86fcff121d80c53957012a" translate="yes" xml:space="preserve">
          <source>See the description of &lt;a href=&quot;kapt&quot;&gt;Kotlin annotation processing tool&lt;/a&gt; (&lt;code&gt;kapt&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;kapt&quot;&gt;Kotlin注釈処理ツール&lt;/a&gt;（ &lt;code&gt;kapt&lt;/code&gt; ）の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="27d63786313d54e555bc147958b0f7758e49c1a7" translate="yes" xml:space="preserve">
          <source>See the details on the syntax as well as the compatibility notice in the &lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/kotlin-contracts.md&quot;&gt;KEEP&lt;/a&gt;.</source>
          <target state="translated">構文の詳細と、&lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/kotlin-contracts.md&quot;&gt;KEEPの&lt;/a&gt;互換性に関する通知を参照してください。</target>
        </trans-unit>
        <trans-unit id="cbd9ca0b72729429e57010990712d0ea028ea89a" translate="yes" xml:space="preserve">
          <source>See the other overload of &lt;a href=&quot;pow#kotlin.math%24pow%28kotlin.Double%2C+kotlin.Double%29&quot;&gt;pow&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;pow#kotlin.math%24pow%28kotlin.Double%2C+kotlin.Double%29&quot;&gt;pow&lt;/a&gt;の他のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="49b5e929eef45ae74221a3da709cf4885c42bc36" translate="yes" xml:space="preserve">
          <source>See the other overload of &lt;a href=&quot;pow#kotlin.math%24pow(kotlin.Double,%20kotlin.Double)&quot;&gt;pow&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、他の過負荷の&lt;a href=&quot;pow#kotlin.math%24pow(kotlin.Double,%20kotlin.Double)&quot;&gt;捕虜&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1848d6eda12852059da4f468fd1210b532135f45" translate="yes" xml:space="preserve">
          <source>See the values of local and captured variables for both running and suspended coroutines.</source>
          <target state="translated">実行中のコアーチンとサスペンドされたコアーチンの両方について、ローカル変数とキャプチャされた変数の値を参照してください。</target>
        </trans-unit>
        <trans-unit id="cec7a60bb845fd7cb358ff67ea5861b283e96597" translate="yes" xml:space="preserve">
          <source>See this &lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md&quot;&gt;language proposal for inline classes&lt;/a&gt; for other technical details and discussion.</source>
          <target state="translated">その他の技術的な詳細と議論については、&lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md&quot;&gt;インラインクラスの&lt;/a&gt;この言語の提案を参照してください。</target>
        </trans-unit>
        <trans-unit id="002a4144c0bb875640ce6427eac3a179663115ca" translate="yes" xml:space="preserve">
          <source>See warnings about the upcoming change</source>
          <target state="translated">今後の変更についての警告を参照してください。</target>
        </trans-unit>
        <trans-unit id="1101f7912326c1029e04e7437c99a5ed6370f18e" translate="yes" xml:space="preserve">
          <source>See what &lt;a href=&quot;#types-in-c-language&quot;&gt;Data Types are in C Language&lt;/a&gt;</source>
          <target state="translated">何を参照してください。&lt;a href=&quot;#types-in-c-language&quot;&gt;データ型は、C言語であります&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0c9974e39c327f569bcd348b8b36f9140e4e7698" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;../tutorials/native/mpp-ios-android&quot;&gt;Multiplatform Project: iOS and Android&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;../tutorials/native/mpp-ios-android&quot;&gt;マルチプラットフォームプロジェクト：iOSおよびAndroid&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88b2c3be971f78e0384a2f3914837a9187f5cb5a" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;basic-types#floating-point-numbers-comparison&quot;&gt;Floating Point Numbers Comparison&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;basic-types#floating-point-numbers-comparison&quot;&gt;浮動小数点数の比較&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d857f440c3aca0e9f922ba8b7d1eab5c56b025df" translate="yes" xml:space="preserve">
          <source>See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm</source>
          <target state="translated">参照:https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm</target>
        </trans-unit>
        <trans-unit id="8ce4b6e4781457e2e238b0b0c70173b2e8bced13" translate="yes" xml:space="preserve">
          <source>Select &lt;em&gt;Use gradle 'wrapper' task configuration&lt;/em&gt; option in the Gradle import dialog to complete the import. For existing projects, which already have Gradle wrapper scripts, the &lt;em&gt;Use default Gradle wrapper&lt;/em&gt; option should be selected instead.</source>
          <target state="translated">選択&lt;em&gt;を使用Gradleの「ラッパー」タスク構成の&lt;/em&gt;インポートを完了するためにGradleのインポートダイアログ内のオプション。Gradleラッパースクリプトが既に存在する既存のプロジェクトの場合、代わりに[ &lt;em&gt;デフォルトのGradleラッパーを使用する&lt;/em&gt; ]オプションを選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="a4ba18808948e22b319e6ff3626179d0771172f8" translate="yes" xml:space="preserve">
          <source>Select &lt;strong&gt;Create New Virtual Device&lt;/strong&gt;.</source>
          <target state="translated">[ &lt;strong&gt;Create New Virtual Device]を&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="88c60277524c424110cd90b4ac1140d679ec1101" translate="yes" xml:space="preserve">
          <source>Select &lt;strong&gt;File | New | Kotlin Project&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;ファイルを&lt;/strong&gt;選択&lt;strong&gt;| &lt;/strong&gt;&lt;strong&gt;新規| &lt;/strong&gt;&lt;strong&gt;コトリンプロジェクト&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="51bd6f5b8caa2312f65b66e14a10bd9e6861f7a0" translate="yes" xml:space="preserve">
          <source>Select Expression (experimental)</source>
          <target state="translated">選択式(実験的</target>
        </trans-unit>
        <trans-unit id="547eecf41dc87556284adfa049756181373e8126" translate="yes" xml:space="preserve">
          <source>Select a device you like and click &lt;strong&gt;Next&lt;/strong&gt;.</source>
          <target state="translated">使用するデバイスを選択して、[ &lt;strong&gt;次へ&lt;/strong&gt; ]をクリックします。</target>
        </trans-unit>
        <trans-unit id="fad43dbed6f4183aadf8692b1c2034452b1ca05d" translate="yes" xml:space="preserve">
          <source>Select a system version and download its image.</source>
          <target state="translated">システムバージョンを選択し、そのイメージをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="d60a759340d40c46b0cebed4eb581fe0a6a3c493" translate="yes" xml:space="preserve">
          <source>Select an &lt;a href=&quot;https://developer.android.com/guide/components/activities/intro-activities&quot;&gt;activity&lt;/a&gt; that defines the behavior of your application. For your first &quot;Hello world&quot; application, select &lt;strong&gt;Empty Activity&lt;/strong&gt; that just shows a screen, and click &lt;strong&gt;Next&lt;/strong&gt;.</source>
          <target state="translated">アプリケーションの動作を定義する&lt;a href=&quot;https://developer.android.com/guide/components/activities/intro-activities&quot;&gt;アクティビティ&lt;/a&gt;を選択します。最初の「Hello world」アプリケーションの場合は、画面のみを表示する&lt;strong&gt;空のアクティビティ&lt;/strong&gt;を選択し、[ &lt;strong&gt;次へ&lt;/strong&gt; ]をクリックします。</target>
        </trans-unit>
        <trans-unit id="4c32ac23bf57e6bef05946a26b1a0eabf8256266" translate="yes" xml:space="preserve">
          <source>Select expression (experimental)</source>
          <target state="translated">選択式(実験)</target>
        </trans-unit>
        <trans-unit id="48956f92abeebca2ff71b62a0891686768c01f08" translate="yes" xml:space="preserve">
          <source>Select expression has &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/on-send.html&quot;&gt;onSend&lt;/a&gt; clause that can be used for a great good in combination with a biased nature of selection.</source>
          <target state="translated">選択式には&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/on-send.html&quot;&gt;onSend&lt;/a&gt;句があり、選択の偏った性質と組み合わせて非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="b520be71b3c104ce563b6c593fde42be010adf49" translate="yes" xml:space="preserve">
          <source>Select expression makes it possible to await multiple suspending functions simultaneously and &lt;em&gt;select&lt;/em&gt; the first one that becomes available.</source>
          <target state="translated">選択式を使用すると、複数の中断関数を同時に待機して、最初に使用可能になる関数を&lt;em&gt;選択&lt;/em&gt;できます。</target>
        </trans-unit>
        <trans-unit id="8175e32b759e37e1a5d84ee3e91065f0c422b7eb" translate="yes" xml:space="preserve">
          <source>Select expressions are an experimental feature of &lt;code&gt;kotlinx.coroutines&lt;/code&gt;. Their API is expected to evolve in the upcoming updates of the &lt;code&gt;kotlinx.coroutines&lt;/code&gt; library with potentially breaking changes.</source>
          <target state="translated">選択式は、 &lt;code&gt;kotlinx.coroutines&lt;/code&gt; の実験的な機能です。これらのAPIは、 &lt;code&gt;kotlinx.coroutines&lt;/code&gt; ライブラリの今後の更新で、潜在的に重大な変更とともに進化すると予想されます。</target>
        </trans-unit>
        <trans-unit id="42302b9a2abf4e35a9075aa892e7301f57141bf5" translate="yes" xml:space="preserve">
          <source>Selected documentation pages:</source>
          <target state="translated">厳選されたドキュメントページ。</target>
        </trans-unit>
        <trans-unit id="02edbb0885c1f54bd5c812f1f6c21dd73b7b7752" translate="yes" xml:space="preserve">
          <source>Selecting deferred values</source>
          <target state="translated">繰延値の選択</target>
        </trans-unit>
        <trans-unit id="47d00ff46b20191dc1fea60073556feeb9737b6b" translate="yes" xml:space="preserve">
          <source>Selecting from channels</source>
          <target state="translated">チャンネルからの選択</target>
        </trans-unit>
        <trans-unit id="aab3b9d16e09699ff2d802b15b20b5ecc4f06393" translate="yes" xml:space="preserve">
          <source>Selecting library headers</source>
          <target state="translated">ライブラリヘッダの選択</target>
        </trans-unit>
        <trans-unit id="fe050710fc31fb212b9d58e03ffb5ddf9227ff92" translate="yes" xml:space="preserve">
          <source>Selecting on close</source>
          <target state="translated">閉じた状態での選択</target>
        </trans-unit>
        <trans-unit id="c21c0093c98c3f86a84809d41128aa9f9d516de1" translate="yes" xml:space="preserve">
          <source>Selecting to send</source>
          <target state="translated">送信を選択する</target>
        </trans-unit>
        <trans-unit id="c5d699ecb491cd74b07cd5d34e15b6457dcd4d77" translate="yes" xml:space="preserve">
          <source>SelectionMode</source>
          <target state="translated">SelectionMode</target>
        </trans-unit>
        <trans-unit id="e224d8a043bad355e811a889ebdd19946f0af63a" translate="yes" xml:space="preserve">
          <source>Self-contained Jar file</source>
          <target state="translated">自己完結型の Jar ファイル</target>
        </trans-unit>
        <trans-unit id="deaa9959eee189b886b9fe0c02af7f02ee90f04a" translate="yes" xml:space="preserve">
          <source>Semantic difference between object expressions and declarations</source>
          <target state="translated">オブジェクト表現と宣言の意味的な違い</target>
        </trans-unit>
        <trans-unit id="1158dc6391ca1c282b0274da233e5b47974ab44c" translate="yes" xml:space="preserve">
          <source>Semicolons</source>
          <target state="translated">Semicolons</target>
        </trans-unit>
        <trans-unit id="5782c9162c716def6df9bf7e94748ad8c4334b5a" translate="yes" xml:space="preserve">
          <source>Send and receive operations to channels are &lt;em&gt;fair&lt;/em&gt; with respect to the order of their invocation from multiple coroutines. They are served in first-in first-out order, e.g. the first coroutine to invoke &lt;code&gt;receive&lt;/code&gt; gets the element. In the following example two coroutines &quot;ping&quot; and &quot;pong&quot; are receiving the &quot;ball&quot; object from the shared &quot;table&quot; channel.</source>
          <target state="translated">チャネルへの送受信操作は、複数のコルーチンからの呼び出しの順序に関して&lt;em&gt;公平&lt;/em&gt;です。それらは先入れ先出しの順序で提供されます。たとえば、 &lt;code&gt;receive&lt;/code&gt; を呼び出す最初のコルーチンが要素を取得します。次の例では、2つのコルーチン「ping」と「pong」が共有の「テーブル」チャネルから「ボール」オブジェクトを受信して​​います。</target>
        </trans-unit>
        <trans-unit id="e54a83f10e5af4bee27d8c0ebfe4ed0592366f8d" translate="yes" xml:space="preserve">
          <source>Separate interfaces for read-only and mutable collections</source>
          <target state="translated">読み取り専用のコレクションと突然変異可能なコレクションのための別々のインターフェイス</target>
        </trans-unit>
        <trans-unit id="5c8f4e0e1a2281faf562976c2410f76c3d8fbc95" translate="yes" xml:space="preserve">
          <source>Sequence</source>
          <target state="translated">Sequence</target>
        </trans-unit>
        <trans-unit id="e5883c1a54bb1e68289417fbad3062b1a700027a" translate="yes" xml:space="preserve">
          <source>Sequence operations</source>
          <target state="translated">シーケンス操作</target>
        </trans-unit>
        <trans-unit id="c48d275d17f30d5b803ff437ae7b3ef803c29872" translate="yes" xml:space="preserve">
          <source>Sequence operations, like &lt;a href=&quot;../map&quot;&gt;Sequence.map&lt;/a&gt;, &lt;a href=&quot;../filter&quot;&gt;Sequence.filter&lt;/a&gt; etc, generally preserve that property of a sequence, and again it's documented for an operation if it doesn't.</source>
          <target state="translated">シーケンス操作は、同じよう&lt;a href=&quot;../map&quot;&gt;Sequence.map&lt;/a&gt;、&lt;a href=&quot;../filter&quot;&gt;Sequence.filter&lt;/a&gt;など、一般的配列の性質を維持し、そうでない場合は、再度、それを操作するために文書化されています。</target>
        </trans-unit>
        <trans-unit id="64e6557fa694e5bc4d5214113f8e64a03eff042b" translate="yes" xml:space="preserve">
          <source>Sequence processing example</source>
          <target state="translated">シーケンス処理の例</target>
        </trans-unit>
        <trans-unit id="17d31f0a79810867402ac04dc581a512a3e7b8e1" translate="yes" xml:space="preserve">
          <source>Sequence.groupingBy</source>
          <target state="translated">Sequence.groupingBy</target>
        </trans-unit>
        <trans-unit id="01f90824cbb43798e728c150fb0e61a7bc14e304" translate="yes" xml:space="preserve">
          <source>SequenceBuilder</source>
          <target state="translated">SequenceBuilder</target>
        </trans-unit>
        <trans-unit id="1ba425c731fb567f4a419699f797f9b17fbee2da" translate="yes" xml:space="preserve">
          <source>SequenceScope</source>
          <target state="translated">SequenceScope</target>
        </trans-unit>
        <trans-unit id="b5fb636023abb67d347041d398442118f79ea091" translate="yes" xml:space="preserve">
          <source>Sequences</source>
          <target state="translated">Sequences</target>
        </trans-unit>
        <trans-unit id="dd81a16031599be93f6dd81ca5d6238d53a6744e" translate="yes" xml:space="preserve">
          <source>Sequences can be iterated multiple times, however some sequence implementations might constrain themselves to be iterated only once. That is mentioned specifically in their documentation (e.g. &lt;a href=&quot;../generate-sequence&quot;&gt;generateSequence&lt;/a&gt; overload). The latter sequences throw an exception on an attempt to iterate them the second time.</source>
          <target state="translated">シーケンスは複数回繰り返すことができますが、シーケンスの実装によっては、1回だけ繰り返すように制限される場合があります。それは彼らのドキュメントで特に言及されています（例えば、&lt;a href=&quot;../generate-sequence&quot;&gt;generateSequence&lt;/a&gt;オーバーロード）。後者のシーケンスは、2回目の繰り返しの試行で例外をスローします。</target>
        </trans-unit>
        <trans-unit id="324bddccf0babf837f3e319e5e20b79516c0238f" translate="yes" xml:space="preserve">
          <source>Sequences can be iterated multiple times, however some sequence implementations might constrain themselves to be iterated only once. That is mentioned specifically in their documentation (e.g. &lt;a href=&quot;generate-sequence&quot;&gt;kotlin.sequences.generateSequence&lt;/a&gt; overload). The latter sequences throw an exception on an attempt to iterate them the second time.</source>
          <target state="translated">シーケンスは複数回繰り返すことができますが、シーケンスの実装によっては、1回だけ繰り返すように制限される場合があります。これは、それらのドキュメントで具体的に言及されています（たとえば、&lt;a href=&quot;generate-sequence&quot;&gt;kotlin.sequences.generateSequence&lt;/a&gt;オーバーロード）。後者のシーケンスは、2回目の繰り返しの試行で例外をスローします。</target>
        </trans-unit>
        <trans-unit id="7d6e9c12f8fb2b461fa680aec22b49a6b437317d" translate="yes" xml:space="preserve">
          <source>Sequences can be iterated multiple times; however some sequence implementations might constrain themselves to be iterated only once. That is mentioned specifically in their documentation.</source>
          <target state="translated">シーケンスは複数回の反復処理が可能ですが、シーケンスの実装によっては、一度だけ反復処理を行うように制約される場合があります。これについてはドキュメントに特に記載されています。</target>
        </trans-unit>
        <trans-unit id="633b854023bf60ecd3352dd58f1b60cddc507889" translate="yes" xml:space="preserve">
          <source>Sequential by default</source>
          <target state="translated">デフォルトではシーケンシャル</target>
        </trans-unit>
        <trans-unit id="89282363da677473acdbf45f0831bde9f4d3b6c4" translate="yes" xml:space="preserve">
          <source>Serialization</source>
          <target state="translated">Serialization</target>
        </trans-unit>
        <trans-unit id="cef85d46b644879ebb59d9edf7dca14d06924037" translate="yes" xml:space="preserve">
          <source>Serialization Compiler Plugin</source>
          <target state="translated">シリアライズコンパイラプラグイン</target>
        </trans-unit>
        <trans-unit id="bfc1af3486233d86f9e4285f304ea90be870feae" translate="yes" xml:space="preserve">
          <source>Serialization Core Library</source>
          <target state="translated">シリアライズコアライブラリ</target>
        </trans-unit>
        <trans-unit id="f1f612371c661be3166a24f9dc10446222583cd3" translate="yes" xml:space="preserve">
          <source>Serialization plugin</source>
          <target state="translated">シリアライズプラグイン</target>
        </trans-unit>
        <trans-unit id="8271ef44e36a997c2ae658d1924bd9cf6db40226" translate="yes" xml:space="preserve">
          <source>ServiceWorkerMessageEventInit</source>
          <target state="translated">ServiceWorkerMessageEventInit</target>
        </trans-unit>
        <trans-unit id="4413f0ab2dcf4624fe4b65b9e4d2332c78716f39" translate="yes" xml:space="preserve">
          <source>ServiceWorkerState</source>
          <target state="translated">ServiceWorkerState</target>
        </trans-unit>
        <trans-unit id="448ab73ba1c21e671e218fb91f2644c834f0c16f" translate="yes" xml:space="preserve">
          <source>Set</source>
          <target state="translated">Set</target>
        </trans-unit>
        <trans-unit id="40113801b18ce319e5c44850e1e658e055ba2004" translate="yes" xml:space="preserve">
          <source>Set Specific Operations</source>
          <target state="translated">特定の操作を設定する</target>
        </trans-unit>
        <trans-unit id="43fa638b38fa3057dbf85563525061705d9f06b0" translate="yes" xml:space="preserve">
          <source>Set a callback &lt;a href=&quot;on-fail#kotlin.io.FileTreeWalk%24onFail%28kotlin.Function2%28%28java.io.File%2C+java.io.IOException%2C+kotlin.Unit%29%29%29%2Ffunction&quot;&gt;function&lt;/a&gt;, that is called on a directory when it's impossible to get its file list.</source>
          <target state="translated">ファイルリストを取得できない場合にディレクトリで呼び出されるコールバック&lt;a href=&quot;on-fail#kotlin.io.FileTreeWalk%24onFail%28kotlin.Function2%28%28java.io.File%2C+java.io.IOException%2C+kotlin.Unit%29%29%29%2Ffunction&quot;&gt;関数を&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="ceb94f72010eb7da9d200d0bc91d4363a00975f6" translate="yes" xml:space="preserve">
          <source>Set a callback &lt;a href=&quot;on-fail#kotlin.io.FileTreeWalk%24onFail(kotlin.Function2((java.io.File,%20java.io.IOException,%20kotlin.Unit)))/function&quot;&gt;function&lt;/a&gt;, that is called on a directory when it's impossible to get its file list.</source>
          <target state="translated">ファイルリストを取得できないときにディレクトリで呼び出されるコールバック&lt;a href=&quot;on-fail#kotlin.io.FileTreeWalk%24onFail(kotlin.Function2((java.io.File,%20java.io.IOException,%20kotlin.Unit)))/function&quot;&gt;関数を&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="f31f4c35915526a242633cf1e8c3f00933c4d361" translate="yes" xml:space="preserve">
          <source>Set a dependency on a kotlinx library</source>
          <target state="translated">kotlinx ライブラリへの依存関係を設定する</target>
        </trans-unit>
        <trans-unit id="a44795ecba49c77354cc67979b537afb9bf65601" translate="yes" xml:space="preserve">
          <source>Set dependencies at the top level</source>
          <target state="translated">トップレベルでの依存関係の設定</target>
        </trans-unit>
        <trans-unit id="485b7bd2d6be4000349673682360d0275c82f3c7" translate="yes" xml:space="preserve">
          <source>Set dependencies on test libraries</source>
          <target state="translated">テストライブラリへの依存関係の設定</target>
        </trans-unit>
        <trans-unit id="b061e7ff7dc8605bd1d5a2dec3d93d192c52d826" translate="yes" xml:space="preserve">
          <source>Set the bit specified to the specified value.</source>
          <target state="translated">指定されたビットを指定された値に設定します。</target>
        </trans-unit>
        <trans-unit id="38b610e97dc4a86ed3152f5aad53acad8003c57f" translate="yes" xml:space="preserve">
          <source>Set up an IDE</source>
          <target state="translated">IDEの設定</target>
        </trans-unit>
        <trans-unit id="9090f4dac9398caea18d500c177ae5d9eaaf87eb" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-char/index#kotlin.Char&quot;&gt;Char&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-char-at#kotlin.native%24setCharAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-char-at#kotlin.native%24setCharAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../-char/index#kotlin.Char&quot;&gt;Charを&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="246e048684268d842d2178c7526eb0fb7b532d94" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-char/index#kotlin.Char&quot;&gt;Char&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-char-at#kotlin.native%24setCharAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Char)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-char-at#kotlin.native%24setCharAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Char)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../-char/index#kotlin.Char&quot;&gt;Charを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="edcc200bc12273c6272fafd06f2a5c60428e5419" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-double-at#kotlin.native%24setDoubleAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Double%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">セット&lt;a href=&quot;../-double/index#kotlin.Double&quot;&gt;ダブル&lt;/a&gt;のうち&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;のByteArray&lt;/a&gt;指定されたインデックスのバイトバッファ&lt;a href=&quot;../../kotlin.native/set-double-at#kotlin.native%24setDoubleAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Double%29%2Findex&quot;&gt;インデックス&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0c21c7e45fe78866cb466cbf97aca0424240d7b4" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-double-at#kotlin.native%24setDoubleAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Double)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-double-at#kotlin.native%24setDoubleAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Double)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../-double/index#kotlin.Double&quot;&gt;Doubleを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="da515a45bf6a7b48f76d31bfdfc07e81c5e5b397" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-float-at#kotlin.native%24setFloatAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Float%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-float-at#kotlin.native%24setFloatAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Float%29%2Findex&quot;&gt;インデックス&lt;/a&gt;にある&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../-float/index#kotlin.Float&quot;&gt;Floatを&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="14e7d29c9ba65b63626d1832ef3563cc3027cc9e" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-float-at#kotlin.native%24setFloatAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Float)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-float-at#kotlin.native%24setFloatAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Float)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../-float/index#kotlin.Float&quot;&gt;Floatを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="6243aa097ace2f119715a9e02308e904fd46fa09" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-int-at#kotlin.native%24setIntAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-int-at#kotlin.native%24setIntAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../-int/index#kotlin.Int&quot;&gt;Intを&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="d7968c9395cc3f785c7fbad784256951eef4aeaa" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-int-at#kotlin.native%24setIntAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-int-at#kotlin.native%24setIntAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../-int/index#kotlin.Int&quot;&gt;Intを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="7e9fead8a733ff6e2f7c6229ab156b0be3c7aad8" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-long-at#kotlin.native%24setLongAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Long%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-long-at#kotlin.native%24setLongAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Long%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../-long/index#kotlin.Long&quot;&gt;Longを&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="9f2739f53f4e4c172abb388c4d9763395e85ec22" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-long-at#kotlin.native%24setLongAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Long)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-long-at#kotlin.native%24setLongAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Long)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../-long/index#kotlin.Long&quot;&gt;Longを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="cd6198304f168018790866f8d5de90bd850068be" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-short-at#kotlin.native%24setShortAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Short%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-short-at#kotlin.native%24setShortAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Short%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../-short/index#kotlin.Short&quot;&gt;Shortを&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="7a81ce63eb1f51f89792a8a960d7765ee7a768bb" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-short-at#kotlin.native%24setShortAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Short)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-short-at#kotlin.native%24setShortAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Short)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../-short/index#kotlin.Short&quot;&gt;ショートを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="043a131ab8bde8809b5efb8cc71bececd6f0b920" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-char/index#kotlin.Char&quot;&gt;Char&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-char-at#kotlin.native%24setCharAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-char-at#kotlin.native%24setCharAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../kotlin/-char/index#kotlin.Char&quot;&gt;Charを&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="c450f95e4310f7aa69bef07dac69e4ffc5e2dc9d" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-char/index#kotlin.Char&quot;&gt;Char&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-char-at#kotlin.native%24setCharAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Char)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-char-at#kotlin.native%24setCharAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Char)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../kotlin/-char/index#kotlin.Char&quot;&gt;Charを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="165ab1c79e9f7280a7ff5a7178cd42f19ee49e12" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-double-at#kotlin.native%24setDoubleAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Double%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">セット&lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;ダブル&lt;/a&gt;のうち&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;のByteArray&lt;/a&gt;指定されたインデックスのバイトバッファ&lt;a href=&quot;set-double-at#kotlin.native%24setDoubleAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Double%29%2Findex&quot;&gt;インデックス&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="06545b219b3bcf3a4774c7a193e181e8a5dc0a17" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-double-at#kotlin.native%24setDoubleAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Double)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-double-at#kotlin.native%24setDoubleAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Double)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;Doubleを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="66b277295ea869aa45f112638839d6a36ddd88a7" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-float-at#kotlin.native%24setFloatAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Float%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-float-at#kotlin.native%24setFloatAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Float%29%2Findex&quot;&gt;インデックス&lt;/a&gt;にある&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Floatを&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="89cba5150a88c23ecf719b99337b394e1b101c4e" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-float-at#kotlin.native%24setFloatAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Float)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-float-at#kotlin.native%24setFloatAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Float)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Floatを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="eeddfac7038244af25d78ade965c0d83befca8e5" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-int-at#kotlin.native%24setIntAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-int-at#kotlin.native%24setIntAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../kotlin/-int/index#kotlin.Int&quot;&gt;Intを&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="edc54f575b056d527576804eb42f35a7a57e4e5c" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-int-at#kotlin.native%24setIntAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-int-at#kotlin.native%24setIntAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../kotlin/-int/index#kotlin.Int&quot;&gt;Intを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="2a5595b9f2b46318a666585b89bac1d7a504ef30" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-long-at#kotlin.native%24setLongAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Long%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-long-at#kotlin.native%24setLongAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Long%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../kotlin/-long/index#kotlin.Long&quot;&gt;Longを&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="6ed8051bc57d0114b02204d54a88f06a18065698" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-long-at#kotlin.native%24setLongAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Long)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-long-at#kotlin.native%24setLongAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Long)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../kotlin/-long/index#kotlin.Long&quot;&gt;Longを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="61468958fc1d048054f7da161eb41f9a095e74ff" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-short-at#kotlin.native%24setShortAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Short%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-short-at#kotlin.native%24setShortAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Short%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../kotlin/-short/index#kotlin.Short&quot;&gt;Shortを&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="dd8bd4ea6807d9349c47929e568265a9f5aa283b" translate="yes" xml:space="preserve">
          <source>Sets &lt;a href=&quot;../kotlin/-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-short-at#kotlin.native%24setShortAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Short)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-short-at#kotlin.native%24setShortAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.Short)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファから&lt;a href=&quot;../kotlin/-short/index#kotlin.Short&quot;&gt;ショートを&lt;/a&gt;設定します</target>
        </trans-unit>
        <trans-unit id="d1af430d4c7c33f49b906ac16225b3535913e1cd" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;ACC_SYNTHETIC&lt;/code&gt; flag on the annotated target in the Java bytecode.</source>
          <target state="translated">Javaバイトコードの注釈付きターゲットに &lt;code&gt;ACC_SYNTHETIC&lt;/code&gt; フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="d34e821a8392e5cf541ba4b173e3093815cd886a" translate="yes" xml:space="preserve">
          <source>Sets UByte out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-u-byte-at#kotlin.native%24setUByteAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UByte%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-u-byte-at#kotlin.native%24setUByteAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UByte%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUByteを設定します。</target>
        </trans-unit>
        <trans-unit id="e99756f6102d7e5ffdc14e2089ad3d3c005ea4a9" translate="yes" xml:space="preserve">
          <source>Sets UByte out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-u-byte-at#kotlin.native%24setUByteAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UByte)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-u-byte-at#kotlin.native%24setUByteAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UByte)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファからUByteを設定します</target>
        </trans-unit>
        <trans-unit id="4a5da7cc264882bdd0383657b09985b2b48c35af" translate="yes" xml:space="preserve">
          <source>Sets UByte out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-u-byte-at#kotlin.native%24setUByteAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UByte%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-u-byte-at#kotlin.native%24setUByteAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UByte%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUByteを設定します。</target>
        </trans-unit>
        <trans-unit id="68844fe0de97af421ac92aac2a99a13416a47b01" translate="yes" xml:space="preserve">
          <source>Sets UByte out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-u-byte-at#kotlin.native%24setUByteAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UByte)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-u-byte-at#kotlin.native%24setUByteAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UByte)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファからUByteを設定します</target>
        </trans-unit>
        <trans-unit id="5752ba22649c586941889dd2a62fae9914f91863" translate="yes" xml:space="preserve">
          <source>Sets UInt out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-u-int-at#kotlin.native%24setUIntAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UInt%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-u-int-at#kotlin.native%24setUIntAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UInt%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUIntを設定します。</target>
        </trans-unit>
        <trans-unit id="ed76a21791b8bd269f9560fee19c5e7c82a7d5ef" translate="yes" xml:space="preserve">
          <source>Sets UInt out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-u-int-at#kotlin.native%24setUIntAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UInt)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-u-int-at#kotlin.native%24setUIntAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UInt)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファからUIntを設定します</target>
        </trans-unit>
        <trans-unit id="3cdc755ff5323ee1cc48907c601573c3854d5185" translate="yes" xml:space="preserve">
          <source>Sets UInt out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-u-int-at#kotlin.native%24setUIntAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UInt%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-u-int-at#kotlin.native%24setUIntAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UInt%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUIntを設定します。</target>
        </trans-unit>
        <trans-unit id="b346529531c769085f80db88178aa54d57e059a2" translate="yes" xml:space="preserve">
          <source>Sets UInt out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-u-int-at#kotlin.native%24setUIntAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UInt)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-u-int-at#kotlin.native%24setUIntAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UInt)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファからUIntを設定します</target>
        </trans-unit>
        <trans-unit id="75425820919865f6e0a6f27b614d44e86b6f6faf" translate="yes" xml:space="preserve">
          <source>Sets ULong out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-u-long-at#kotlin.native%24setULongAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.ULong%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-u-long-at#kotlin.native%24setULongAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.ULong%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからULongを設定します。</target>
        </trans-unit>
        <trans-unit id="672b0c4b3472d5c2777049a28d446092dbc2aeb1" translate="yes" xml:space="preserve">
          <source>Sets ULong out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-u-long-at#kotlin.native%24setULongAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.ULong)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-u-long-at#kotlin.native%24setULongAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.ULong)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファからULongを設定します</target>
        </trans-unit>
        <trans-unit id="bb90a94951e0937badd2c5a974e39954d8e1c0fa" translate="yes" xml:space="preserve">
          <source>Sets ULong out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-u-long-at#kotlin.native%24setULongAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.ULong%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-u-long-at#kotlin.native%24setULongAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.ULong%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからULongを設定します。</target>
        </trans-unit>
        <trans-unit id="c9a6e7c6757ff075cfb4baf97e9c29fd5abb1519" translate="yes" xml:space="preserve">
          <source>Sets ULong out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-u-long-at#kotlin.native%24setULongAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.ULong)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-u-long-at#kotlin.native%24setULongAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.ULong)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファからULongを設定します</target>
        </trans-unit>
        <trans-unit id="7f67e637b58367e0b58957c4447941673cd92e71" translate="yes" xml:space="preserve">
          <source>Sets UShort out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-u-short-at#kotlin.native%24setUShortAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UShort%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-u-short-at#kotlin.native%24setUShortAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UShort%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUShortを設定します。</target>
        </trans-unit>
        <trans-unit id="54a9a58fe67efd14af7738ce6cf03ed8501fc7ec" translate="yes" xml:space="preserve">
          <source>Sets UShort out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;set-u-short-at#kotlin.native%24setUShortAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UShort)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;set-u-short-at#kotlin.native%24setUShortAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UShort)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファからUShortを設定します</target>
        </trans-unit>
        <trans-unit id="728922f760b44c69e0b00d27282cd57c2b6e1fca" translate="yes" xml:space="preserve">
          <source>Sets UShort out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-u-short-at#kotlin.native%24setUShortAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UShort%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-u-short-at#kotlin.native%24setUShortAt%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.UShort%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUShortを設定します。</target>
        </trans-unit>
        <trans-unit id="887390d62637e60babb110b568eeec7307c21ddc" translate="yes" xml:space="preserve">
          <source>Sets UShort out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/set-u-short-at#kotlin.native%24setUShortAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UShort)/index&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/set-u-short-at#kotlin.native%24setUShortAt(kotlin.ByteArray,%20kotlin.Int,%20kotlin.UShort)/index&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファからUShortを設定します</target>
        </trans-unit>
        <trans-unit id="2900fbda2209cd97da96efa3c37d34a717e8828a" translate="yes" xml:space="preserve">
          <source>Sets a callback &lt;a href=&quot;on-leave#kotlin.io.FileTreeWalk%24onLeave%28kotlin.Function1%28%28java.io.File%2C+kotlin.Unit%29%29%29%2Ffunction&quot;&gt;function&lt;/a&gt;, that is called on any left directory after its files are visited and after it is visited itself.</source>
          <target state="translated">コールバック&lt;a href=&quot;on-leave#kotlin.io.FileTreeWalk%24onLeave%28kotlin.Function1%28%28java.io.File%2C+kotlin.Unit%29%29%29%2Ffunction&quot;&gt;関数を&lt;/a&gt;設定します。これは、ファイルが訪問された後、およびそれ自体が訪問された後に、左側のディレクトリで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7eb5a0750286bfc0bf889d4bf73533f7963fd1db" translate="yes" xml:space="preserve">
          <source>Sets a callback &lt;a href=&quot;on-leave#kotlin.io.FileTreeWalk%24onLeave(kotlin.Function1((java.io.File,%20kotlin.Unit)))/function&quot;&gt;function&lt;/a&gt;, that is called on any left directory after its files are visited and after it is visited itself.</source>
          <target state="translated">コールバック&lt;a href=&quot;on-leave#kotlin.io.FileTreeWalk%24onLeave(kotlin.Function1((java.io.File,%20kotlin.Unit)))/function&quot;&gt;関数を&lt;/a&gt;設定します。この関数は、ファイルにアクセスした後、およびファイル自体にアクセスした後に、左側のディレクトリで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b4931c0365ff304a815c6963d0bd7edb11b7c94c" translate="yes" xml:space="preserve">
          <source>Sets a predicate &lt;a href=&quot;on-enter#kotlin.io.FileTreeWalk%24onEnter%28kotlin.Function1%28%28java.io.File%2C+kotlin.Boolean%29%29%29%2Ffunction&quot;&gt;function&lt;/a&gt;, that is called on any entered directory before its files are visited and before it is visited itself.</source>
          <target state="translated">述語&lt;a href=&quot;on-enter#kotlin.io.FileTreeWalk%24onEnter%28kotlin.Function1%28%28java.io.File%2C+kotlin.Boolean%29%29%29%2Ffunction&quot;&gt;関数を&lt;/a&gt;設定します。述語関数は、そのファイルが訪問される前、およびそれ自体が訪問される前に、入力されたディレクトリで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cf976de53f8bfb250c57efca5d3bf77e7273c15d" translate="yes" xml:space="preserve">
          <source>Sets a predicate &lt;a href=&quot;on-enter#kotlin.io.FileTreeWalk%24onEnter(kotlin.Function1((java.io.File,%20kotlin.Boolean)))/function&quot;&gt;function&lt;/a&gt;, that is called on any entered directory before its files are visited and before it is visited itself.</source>
          <target state="translated">ファイルにアクセスする前、およびファイルにアクセスする前に、入力したディレクトリで呼び出される述語&lt;a href=&quot;on-enter#kotlin.io.FileTreeWalk%24onEnter(kotlin.Function1((java.io.File,%20kotlin.Boolean)))/function&quot;&gt;関数を&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="307c3b08228d209c4b76f0067076574f4a4d01fe" translate="yes" xml:space="preserve">
          <source>Sets all bits in the BitSet to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">BitSetのすべてのビットを &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="18c1c389ab129422cb72a224859d0ea272965e3c" translate="yes" xml:space="preserve">
          <source>Sets the array element at the specified &lt;a href=&quot;set#kotlin.Array%24set%28kotlin.Int%2C+kotlin.Array.T%29%2Findex&quot;&gt;index&lt;/a&gt; to the specified &lt;a href=&quot;set#kotlin.Array%24set%28kotlin.Int%2C+kotlin.Array.T%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.Array%24set%28kotlin.Int%2C+kotlin.Array.T%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;配列要素を指定された&lt;a href=&quot;set#kotlin.Array%24set%28kotlin.Int%2C+kotlin.Array.T%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="11bdf5a875cb31c1c56026618f4d6765e47fe713" translate="yes" xml:space="preserve">
          <source>Sets the array element at the specified &lt;a href=&quot;set#kotlin.Array%24set(kotlin.Int,%20kotlin.Array.T)/index&quot;&gt;index&lt;/a&gt; to the specified &lt;a href=&quot;set#kotlin.Array%24set(kotlin.Int,%20kotlin.Array.T)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.Array%24set(kotlin.Int,%20kotlin.Array.T)/index&quot;&gt;インデックスの&lt;/a&gt;配列要素を指定された&lt;a href=&quot;set#kotlin.Array%24set(kotlin.Int,%20kotlin.Array.T)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="9d82a173af7eab575c81214cafeae19267b32c70" translate="yes" xml:space="preserve">
          <source>Sets the bits from the range specified to the specified value.</source>
          <target state="translated">指定した範囲のビットを指定した値に設定します。</target>
        </trans-unit>
        <trans-unit id="9899dc3d49007fa7979991a572ef97990d1ed640" translate="yes" xml:space="preserve">
          <source>Sets the bits with indices between &lt;a href=&quot;set#kotlin.native.BitSet%24set%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Ffrom&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;set#kotlin.native.BitSet%24set%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fto&quot;&gt;to&lt;/a&gt; (exclusive) to the specified value.</source>
          <target state="translated">セット間のインデックスを有するビット&lt;a href=&quot;set#kotlin.native.BitSet%24set%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Ffrom&quot;&gt;から&lt;/a&gt;（含む）と&lt;a href=&quot;set#kotlin.native.BitSet%24set%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fto&quot;&gt;に&lt;/a&gt;（排他的）指定された値に。</target>
        </trans-unit>
        <trans-unit id="3e0a7e7a939d0ee954ab73be84ac31289295c49f" translate="yes" xml:space="preserve">
          <source>Sets the bits with indices between &lt;a href=&quot;set#kotlin.native.BitSet%24set(kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/from&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;set#kotlin.native.BitSet%24set(kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/to&quot;&gt;to&lt;/a&gt; (exclusive) to the specified value.</source>
          <target state="translated">&lt;a href=&quot;set#kotlin.native.BitSet%24set(kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/from&quot;&gt;from&lt;/a&gt;（包括的）から&lt;a href=&quot;set#kotlin.native.BitSet%24set(kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/to&quot;&gt;to&lt;/a&gt;（排他的）までのインデックスを持つビットを指定された値に設定します。</target>
        </trans-unit>
        <trans-unit id="29eedbac3d423a05f8d6c883690bdaab95095996" translate="yes" xml:space="preserve">
          <source>Sets the character at the specified &lt;a href=&quot;../set#kotlin.text%24set%28kotlin.text.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;index&lt;/a&gt; to the specified &lt;a href=&quot;../set#kotlin.text%24set%28kotlin.text.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Fvalue&quot;&gt;value&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../set#kotlin.text%24set%28kotlin.text.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;文字を指定された&lt;a href=&quot;../set#kotlin.text%24set%28kotlin.text.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="bb0b8fa0b347b9b16fd63e06b5bd3a87260d83b6" translate="yes" xml:space="preserve">
          <source>Sets the character at the specified &lt;a href=&quot;set#kotlin.text%24set%28java.lang.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;index&lt;/a&gt; to the specified &lt;a href=&quot;set#kotlin.text%24set%28java.lang.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Fvalue&quot;&gt;value&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.text%24set%28java.lang.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;文字を指定された&lt;a href=&quot;set#kotlin.text%24set%28java.lang.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="80c69316a95fe7e772cb32ac7444e561620116af" translate="yes" xml:space="preserve">
          <source>Sets the character at the specified &lt;a href=&quot;set#kotlin.text%24set%28kotlin.text.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;index&lt;/a&gt; to the specified &lt;a href=&quot;set#kotlin.text%24set%28kotlin.text.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Fvalue&quot;&gt;value&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.text%24set%28kotlin.text.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;文字を指定された&lt;a href=&quot;set#kotlin.text%24set%28kotlin.text.StringBuilder%2C+kotlin.Int%2C+kotlin.Char%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="10bce1fe2fc8e5fe524813204703e3ec81ffa10b" translate="yes" xml:space="preserve">
          <source>Sets the character at the specified &lt;a href=&quot;set#kotlin.text%24set(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.Char)/index&quot;&gt;index&lt;/a&gt; to the specified &lt;a href=&quot;set#kotlin.text%24set(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.Char)/value&quot;&gt;value&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.text%24set(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.Char)/index&quot;&gt;インデックスの&lt;/a&gt;文字を指定された&lt;a href=&quot;set#kotlin.text%24set(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.Char)/value&quot;&gt;値に&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="0ec9235a99166a3395dbf987a29fd6263c5bc19f" translate="yes" xml:space="preserve">
          <source>Sets the character at the specified &lt;a href=&quot;set#kotlin.text%24set(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.Char)/index&quot;&gt;index&lt;/a&gt; to the specified &lt;a href=&quot;set#kotlin.text%24set(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.Char)/value&quot;&gt;value&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.text%24set(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.Char)/index&quot;&gt;インデックスの&lt;/a&gt;文字を指定された&lt;a href=&quot;set#kotlin.text%24set(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.Char)/value&quot;&gt;値に&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="b414940d0d78a3695e15818127fbdab927ca87fa" translate="yes" xml:space="preserve">
          <source>Sets the character at the specified &lt;a href=&quot;set#kotlin.text.StringBuilder%24set(kotlin.Int,%20kotlin.Char)/index&quot;&gt;index&lt;/a&gt; to the specified &lt;a href=&quot;set#kotlin.text.StringBuilder%24set(kotlin.Int,%20kotlin.Char)/value&quot;&gt;value&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.text.StringBuilder%24set(kotlin.Int,%20kotlin.Char)/index&quot;&gt;インデックスの&lt;/a&gt;文字を指定された&lt;a href=&quot;set#kotlin.text.StringBuilder%24set(kotlin.Int,%20kotlin.Char)/value&quot;&gt;値に&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="185823a70e02396c0095a3ef140632cd0481c79c" translate="yes" xml:space="preserve">
          <source>Sets the content of this file as &lt;a href=&quot;write-text#kotlin.io%24writeText%28java.io.File%2C+kotlin.String%2C+java.nio.charset.Charset%29%2Ftext&quot;&gt;text&lt;/a&gt; encoded using UTF-8 or specified &lt;a href=&quot;write-text#kotlin.io%24writeText%28java.io.File%2C+kotlin.String%2C+java.nio.charset.Charset%29%2Fcharset&quot;&gt;charset&lt;/a&gt;. If this file exists, it becomes overwritten.</source>
          <target state="translated">このファイルのコンテンツを、UTF-8または指定された&lt;a href=&quot;write-text#kotlin.io%24writeText%28java.io.File%2C+kotlin.String%2C+java.nio.charset.Charset%29%2Fcharset&quot;&gt;文字セット&lt;/a&gt;を使用してエンコードされた&lt;a href=&quot;write-text#kotlin.io%24writeText%28java.io.File%2C+kotlin.String%2C+java.nio.charset.Charset%29%2Ftext&quot;&gt;テキスト&lt;/a&gt;として設定します。このファイルが存在する場合、上書きされます。</target>
        </trans-unit>
        <trans-unit id="1a4b3ac2c5e8ce3c7535a5909b9784f0c567beec" translate="yes" xml:space="preserve">
          <source>Sets the content of this file as &lt;a href=&quot;write-text#kotlin.io%24writeText(java.io.File,%20kotlin.String,%20java.nio.charset.Charset)/text&quot;&gt;text&lt;/a&gt; encoded using UTF-8 or specified &lt;a href=&quot;write-text#kotlin.io%24writeText(java.io.File,%20kotlin.String,%20java.nio.charset.Charset)/charset&quot;&gt;charset&lt;/a&gt;. If this file exists, it becomes overwritten.</source>
          <target state="translated">このファイルの内容を、UTF-8または指定された&lt;a href=&quot;write-text#kotlin.io%24writeText(java.io.File,%20kotlin.String,%20java.nio.charset.Charset)/charset&quot;&gt;文字セット&lt;/a&gt;を使用してエンコードされた&lt;a href=&quot;write-text#kotlin.io%24writeText(java.io.File,%20kotlin.String,%20java.nio.charset.Charset)/text&quot;&gt;テキスト&lt;/a&gt;として設定します。このファイルが存在する場合、上書きされます。</target>
        </trans-unit>
        <trans-unit id="9941f1f77af3ee35fb2ffb4e3a7bcfed1b02697f" translate="yes" xml:space="preserve">
          <source>Sets the content of this file as an &lt;a href=&quot;write-bytes#kotlin.io%24writeBytes%28java.io.File%2C+kotlin.ByteArray%29%2Farray&quot;&gt;array&lt;/a&gt; of bytes. If this file already exists, it becomes overwritten.</source>
          <target state="translated">このファイルのコンテンツをバイトの&lt;a href=&quot;write-bytes#kotlin.io%24writeBytes%28java.io.File%2C+kotlin.ByteArray%29%2Farray&quot;&gt;配列&lt;/a&gt;として設定します。このファイルがすでに存在する場合、上書きされます。</target>
        </trans-unit>
        <trans-unit id="ffb1528e31248e563182e4f87645cccb7efdf97a" translate="yes" xml:space="preserve">
          <source>Sets the content of this file as an &lt;a href=&quot;write-bytes#kotlin.io%24writeBytes(java.io.File,%20kotlin.ByteArray)/array&quot;&gt;array&lt;/a&gt; of bytes. If this file already exists, it becomes overwritten.</source>
          <target state="translated">このファイルの内容をバイトの&lt;a href=&quot;write-bytes#kotlin.io%24writeBytes(java.io.File,%20kotlin.ByteArray)/array&quot;&gt;配列&lt;/a&gt;として設定します。このファイルがすでに存在する場合は、上書きされます。</target>
        </trans-unit>
        <trans-unit id="77e69f5b00ef9d6b815b0ece296a85d9aa969669" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.BooleanArray%24set%28kotlin.Int%2C+kotlin.Boolean%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.BooleanArray%24set%28kotlin.Int%2C+kotlin.Boolean%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.BooleanArray%24set%28kotlin.Int%2C+kotlin.Boolean%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.BooleanArray%24set%28kotlin.Int%2C+kotlin.Boolean%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2babab390df5822c5686d7264a98269af33b3236" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.BooleanArray%24set(kotlin.Int,%20kotlin.Boolean)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.BooleanArray%24set(kotlin.Int,%20kotlin.Boolean)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.BooleanArray%24set(kotlin.Int,%20kotlin.Boolean)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.BooleanArray%24set(kotlin.Int,%20kotlin.Boolean)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="4baf2dc9994143edc877b925018d335cd4836753" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.ByteArray%24set%28kotlin.Int%2C+kotlin.Byte%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.ByteArray%24set%28kotlin.Int%2C+kotlin.Byte%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.ByteArray%24set%28kotlin.Int%2C+kotlin.Byte%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.ByteArray%24set%28kotlin.Int%2C+kotlin.Byte%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="4e5afa139eb5113571b275cd28884af1f5a7b8f8" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.ByteArray%24set(kotlin.Int,%20kotlin.Byte)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.ByteArray%24set(kotlin.Int,%20kotlin.Byte)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.ByteArray%24set(kotlin.Int,%20kotlin.Byte)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.ByteArray%24set(kotlin.Int,%20kotlin.Byte)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="4f10456289ed125c34024c96a9f3fced96e1084a" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.CharArray%24set%28kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.CharArray%24set%28kotlin.Int%2C+kotlin.Char%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.CharArray%24set%28kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.CharArray%24set%28kotlin.Int%2C+kotlin.Char%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="7ed277fe7ec446ecc68bdeec6859d0dc9ea75c51" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.CharArray%24set(kotlin.Int,%20kotlin.Char)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.CharArray%24set(kotlin.Int,%20kotlin.Char)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.CharArray%24set(kotlin.Int,%20kotlin.Char)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.CharArray%24set(kotlin.Int,%20kotlin.Char)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="9061b224d8142ce983f37941237124f97fb7de8c" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.DoubleArray%24set%28kotlin.Int%2C+kotlin.Double%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.DoubleArray%24set%28kotlin.Int%2C+kotlin.Double%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.DoubleArray%24set%28kotlin.Int%2C+kotlin.Double%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.DoubleArray%24set%28kotlin.Int%2C+kotlin.Double%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="71ba803373df6bddf59637e818448db310434892" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.DoubleArray%24set(kotlin.Int,%20kotlin.Double)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.DoubleArray%24set(kotlin.Int,%20kotlin.Double)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.DoubleArray%24set(kotlin.Int,%20kotlin.Double)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.DoubleArray%24set(kotlin.Int,%20kotlin.Double)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ec29a002b4c8ae3cba11729f4f8d9d60c8ea931e" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.FloatArray%24set%28kotlin.Int%2C+kotlin.Float%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.FloatArray%24set%28kotlin.Int%2C+kotlin.Float%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.FloatArray%24set%28kotlin.Int%2C+kotlin.Float%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.FloatArray%24set%28kotlin.Int%2C+kotlin.Float%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="d5e1f3fd887a0b7cd039a2d88494a72ae355bfa9" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.FloatArray%24set(kotlin.Int,%20kotlin.Float)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.FloatArray%24set(kotlin.Int,%20kotlin.Float)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.FloatArray%24set(kotlin.Int,%20kotlin.Float)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.FloatArray%24set(kotlin.Int,%20kotlin.Float)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="6e8d5814f499c6b4da621128bc725e00fe86459f" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.IntArray%24set%28kotlin.Int%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.IntArray%24set%28kotlin.Int%2C+kotlin.Int%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.IntArray%24set%28kotlin.Int%2C+kotlin.Int%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.IntArray%24set%28kotlin.Int%2C+kotlin.Int%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="85c830ee1f7ab2755fc1c848357fc5ca665fc9d3" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.IntArray%24set(kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.IntArray%24set(kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.IntArray%24set(kotlin.Int,%20kotlin.Int)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.IntArray%24set(kotlin.Int,%20kotlin.Int)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="54f288bc8477e9a77bca52d3a82f8f513baf826b" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.LongArray%24set%28kotlin.Int%2C+kotlin.Long%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.LongArray%24set%28kotlin.Int%2C+kotlin.Long%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.LongArray%24set%28kotlin.Int%2C+kotlin.Long%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.LongArray%24set%28kotlin.Int%2C+kotlin.Long%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="1d81beb0538979a9f15a517d72744a8ba3c9935c" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.LongArray%24set(kotlin.Int,%20kotlin.Long)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.LongArray%24set(kotlin.Int,%20kotlin.Long)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.LongArray%24set(kotlin.Int,%20kotlin.Long)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.LongArray%24set(kotlin.Int,%20kotlin.Long)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="bba404ae951c063d7104d314046303877f1e90e3" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.ShortArray%24set%28kotlin.Int%2C+kotlin.Short%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.ShortArray%24set%28kotlin.Int%2C+kotlin.Short%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.ShortArray%24set%28kotlin.Int%2C+kotlin.Short%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.ShortArray%24set%28kotlin.Int%2C+kotlin.Short%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="39ef4889da43f0d166b015f1c98b37a9001291e0" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.ShortArray%24set(kotlin.Int,%20kotlin.Short)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.ShortArray%24set(kotlin.Int,%20kotlin.Short)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.ShortArray%24set(kotlin.Int,%20kotlin.Short)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.ShortArray%24set(kotlin.Int,%20kotlin.Short)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2276370231d8bc10f6cfe6b1e5980d4b15dde8de" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.UByteArray%24set%28kotlin.Int%2C+kotlin.UByte%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.UByteArray%24set%28kotlin.Int%2C+kotlin.UByte%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.UByteArray%24set%28kotlin.Int%2C+kotlin.UByte%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.UByteArray%24set%28kotlin.Int%2C+kotlin.UByte%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="6305d64c448d1793da0e531c8323971bc8ab0254" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.UByteArray%24set(kotlin.Int,%20kotlin.UByte)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.UByteArray%24set(kotlin.Int,%20kotlin.UByte)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.UByteArray%24set(kotlin.Int,%20kotlin.UByte)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.UByteArray%24set(kotlin.Int,%20kotlin.UByte)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="242acce212e00f9853c222dc79085c2d4bf25a88" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.UIntArray%24set%28kotlin.Int%2C+kotlin.UInt%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.UIntArray%24set%28kotlin.Int%2C+kotlin.UInt%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.UIntArray%24set%28kotlin.Int%2C+kotlin.UInt%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.UIntArray%24set%28kotlin.Int%2C+kotlin.UInt%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="794e2cd772fa9942609b7071a82803d64ad03308" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.UIntArray%24set(kotlin.Int,%20kotlin.UInt)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.UIntArray%24set(kotlin.Int,%20kotlin.UInt)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.UIntArray%24set(kotlin.Int,%20kotlin.UInt)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.UIntArray%24set(kotlin.Int,%20kotlin.UInt)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="9c8d086faad98cba0d4d2474417843e8c2654c33" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.ULongArray%24set%28kotlin.Int%2C+kotlin.ULong%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.ULongArray%24set%28kotlin.Int%2C+kotlin.ULong%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.ULongArray%24set%28kotlin.Int%2C+kotlin.ULong%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.ULongArray%24set%28kotlin.Int%2C+kotlin.ULong%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="904a988924bb211f33eba0e9cd82c5d46493d1da" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.ULongArray%24set(kotlin.Int,%20kotlin.ULong)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.ULongArray%24set(kotlin.Int,%20kotlin.ULong)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.ULongArray%24set(kotlin.Int,%20kotlin.ULong)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.ULongArray%24set(kotlin.Int,%20kotlin.ULong)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="83d722d43b55121439e406624afd6b4f5e5e2bf2" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.UShortArray%24set%28kotlin.Int%2C+kotlin.UShort%29%2Findex&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.UShortArray%24set%28kotlin.Int%2C+kotlin.UShort%29%2Fvalue&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.UShortArray%24set%28kotlin.Int%2C+kotlin.UShort%29%2Findex&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.UShortArray%24set%28kotlin.Int%2C+kotlin.UShort%29%2Fvalue&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="fa76fc967017b032e8d1c2cdf69db3e8dfc8de3f" translate="yes" xml:space="preserve">
          <source>Sets the element at the given &lt;a href=&quot;set#kotlin.UShortArray%24set(kotlin.Int,%20kotlin.UShort)/index&quot;&gt;index&lt;/a&gt; to the given &lt;a href=&quot;set#kotlin.UShortArray%24set(kotlin.Int,%20kotlin.UShort)/value&quot;&gt;value&lt;/a&gt;. This method can be called using the index operator.</source>
          <target state="translated">指定された&lt;a href=&quot;set#kotlin.UShortArray%24set(kotlin.Int,%20kotlin.UShort)/index&quot;&gt;インデックスの&lt;/a&gt;要素を指定された&lt;a href=&quot;set#kotlin.UShortArray%24set(kotlin.Int,%20kotlin.UShort)/value&quot;&gt;値に&lt;/a&gt;設定します。このメソッドは、インデックス演算子を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="9116fb48f18f595cee1aa0ef86a9704539523b3e" translate="yes" xml:space="preserve">
          <source>Sets the length of this string builder to the specified &lt;a href=&quot;set-length#kotlin.text.StringBuilder%24setLength(kotlin.Int)/newLength&quot;&gt;newLength&lt;/a&gt;.</source>
          <target state="translated">この文字列ビルダーの長さを指定された&lt;a href=&quot;set-length#kotlin.text.StringBuilder%24setLength(kotlin.Int)/newLength&quot;&gt;newLengthに設定し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cdbfa1a2b3fcbca7289df75f3d9da6a49af783aa" translate="yes" xml:space="preserve">
          <source>Sets the maximum &lt;a href=&quot;max-depth#kotlin.io.FileTreeWalk%24maxDepth%28kotlin.Int%29%2Fdepth&quot;&gt;depth&lt;/a&gt; of a directory tree to traverse. By default there is no limit.</source>
          <target state="translated">トラバースするディレクトリツリーの最大&lt;a href=&quot;max-depth#kotlin.io.FileTreeWalk%24maxDepth%28kotlin.Int%29%2Fdepth&quot;&gt;深度&lt;/a&gt;を設定します。デフォルトでは制限はありません。</target>
        </trans-unit>
        <trans-unit id="67f6c7ce4f2baaa750ec29f2ef6b8526fae822b9" translate="yes" xml:space="preserve">
          <source>Sets the maximum &lt;a href=&quot;max-depth#kotlin.io.FileTreeWalk%24maxDepth(kotlin.Int)/depth&quot;&gt;depth&lt;/a&gt; of a directory tree to traverse. By default there is no limit.</source>
          <target state="translated">トラバースするディレクトリツリーの最大&lt;a href=&quot;max-depth#kotlin.io.FileTreeWalk%24maxDepth(kotlin.Int)/depth&quot;&gt;深度&lt;/a&gt;を設定します。デフォルトでは制限はありません。</target>
        </trans-unit>
        <trans-unit id="7f557c804ed296d322f4a5e5bfe00660a8f6e3a4" translate="yes" xml:space="preserve">
          <source>Sets the next value in the iteration, called from the &lt;a href=&quot;compute-next&quot;&gt;computeNext&lt;/a&gt; function</source>
          <target state="translated">&lt;a href=&quot;compute-next&quot;&gt;computeNext&lt;/a&gt;関数から呼び出される、反復の次の値を設定します</target>
        </trans-unit>
        <trans-unit id="4250580fbd524d1fd8d6ec08be759b582c4fb702" translate="yes" xml:space="preserve">
          <source>Sets the state to done so that the iteration terminates.</source>
          <target state="translated">イテレーションが終了するように状態を done に設定します。</target>
        </trans-unit>
        <trans-unit id="612c0835d62f2410d2f8de6e6d5fc77a9b31d932" translate="yes" xml:space="preserve">
          <source>Sets the value of the property for the given object.</source>
          <target state="translated">指定したオブジェクトのプロパティの値を設定します。</target>
        </trans-unit>
        <trans-unit id="9c35e499a0854cb5e1b033a2aea56399d4cfd894" translate="yes" xml:space="preserve">
          <source>Setter</source>
          <target state="translated">Setter</target>
        </trans-unit>
        <trans-unit id="da16c3cc3bfdcae6d86bd6879d30abd5784e4921" translate="yes" xml:space="preserve">
          <source>Setter of the property is a &lt;code&gt;set&lt;/code&gt; method declared alongside the property.</source>
          <target state="translated">プロパティのセッターは、プロパティと一緒に宣言 &lt;code&gt;set&lt;/code&gt; たsetメソッドです。</target>
        </trans-unit>
        <trans-unit id="2a57ff5fd34c53aa02935c137725d57e985fbf2e" translate="yes" xml:space="preserve">
          <source>Setters</source>
          <target state="translated">Setters</target>
        </trans-unit>
        <trans-unit id="795e6d53d5731fd7b921da0b1d365fac3636f285" translate="yes" xml:space="preserve">
          <source>Setters and getters</source>
          <target state="translated">セッターとゲッター</target>
        </trans-unit>
        <trans-unit id="d099d87160d087f60ade9cb21fa5440ff2125280" translate="yes" xml:space="preserve">
          <source>Setting Up the Local Environment</source>
          <target state="translated">地域環境の設定</target>
        </trans-unit>
        <trans-unit id="c44f26d2bfdb853b861ef2282603dadd2c943781" translate="yes" xml:space="preserve">
          <source>Setting this in a Gradle DSL:</source>
          <target state="translated">これをGradle DSLで設定します。</target>
        </trans-unit>
        <trans-unit id="1d9561629ffffcf08f870d78c8cba9699aaf1728" translate="yes" xml:space="preserve">
          <source>Setting up Framework Dependency in Xcode</source>
          <target state="translated">Xcodeでフレームワークの依存関係を設定する</target>
        </trans-unit>
        <trans-unit id="601eff2654656e13db208f79616084dab833fb1f" translate="yes" xml:space="preserve">
          <source>Setting up Targets</source>
          <target state="translated">ターゲットの設定</target>
        </trans-unit>
        <trans-unit id="f27242b25e228df6b15975fcf5c1aed13839ea95" translate="yes" xml:space="preserve">
          <source>Setting up Xcode</source>
          <target state="translated">Xcodeの設定</target>
        </trans-unit>
        <trans-unit id="729b164a15e1528ee04709ca227eb8126e79e0e9" translate="yes" xml:space="preserve">
          <source>Setting up a Multiplatform Project</source>
          <target state="translated">マルチプラットフォームプロジェクトの設定</target>
        </trans-unit>
        <trans-unit id="4b75b737e7019beac88da840b9c4fa621cc15e9b" translate="yes" xml:space="preserve">
          <source>Setting up a project</source>
          <target state="translated">プロジェクトの設定</target>
        </trans-unit>
        <trans-unit id="dfe5b993bb5b873cf296bfd1dec95400d302bb2f" translate="yes" xml:space="preserve">
          <source>Setting up the environment</source>
          <target state="translated">環境設定</target>
        </trans-unit>
        <trans-unit id="c676a8afec5bd640eea3d16f369b18ff86f79446" translate="yes" xml:space="preserve">
          <source>Setting up the local environment</source>
          <target state="translated">地域環境の設定</target>
        </trans-unit>
        <trans-unit id="c7f73bb54d928922c3838bb789ee9fb8a5b1eb37" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="translated">Settings</target>
        </trans-unit>
        <trans-unit id="89a5ab56adeb4ad20f46a74711635d7a3b3c6f17" translate="yes" xml:space="preserve">
          <source>Setup Kotlin Compilation Step</source>
          <target state="translated">セットアップKotlinコンパイルステップ</target>
        </trans-unit>
        <trans-unit id="f7fd968c0a5ce680afda4eb915e615fd82b3a5d5" translate="yes" xml:space="preserve">
          <source>Setup Kotlin Compiler Fetching Step</source>
          <target state="translated">セットアップKotlinコンパイラフェッチステップ</target>
        </trans-unit>
        <trans-unit id="1cd15bb14bf553822a7d00ea242fd63abf35e644" translate="yes" xml:space="preserve">
          <source>Setup for the whole project: Open File -&amp;gt; Settings, select &quot;Build, Execution, Deployment&quot; -&amp;gt; &quot;Compiler&quot; -&amp;gt; &quot;Kotlin compiler&quot;. Choose appropriate module system in &quot;Module kind&quot; field.</source>
          <target state="translated">プロジェクト全体のセットアップ：[ファイル]-&amp;gt; [設定]を選択し、[ビルド、実行、デプロイメント]-&amp;gt; [コンパイラ]-&amp;gt; [Kotlinコンパイラ]を選択します。「モジュールの種類」フィールドで適切なモジュールシステムを選択します。</target>
        </trans-unit>
        <trans-unit id="f0f08df8a582b1b5aaacc0eb420e8df1267b5d20" translate="yes" xml:space="preserve">
          <source>Setup per module: Open File -&amp;gt; Project Structure&amp;hellip;, find your module in Modules and select &quot;Kotlin&quot; facet under it. Choose appropriate module system in &quot;Module kind&quot; field.</source>
          <target state="translated">モジュールごとの設定：[ファイル]-&amp;gt; [プロジェクト構造]を開き、[モジュール]でモジュールを見つけて、その下の[Kotlin]ファセットを選択します。「モジュールの種類」フィールドで適切なモジュールシステムを選択します。</target>
        </trans-unit>
        <trans-unit id="e85ac6caafc3dc694f3d37ae03f6e0e397a05a87" translate="yes" xml:space="preserve">
          <source>Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set.</source>
          <target state="translated">7ビットASCII、別名ISO646-US、別名Unicode文字セットの基本ラテン語ブロック。</target>
        </trans-unit>
        <trans-unit id="7b29b4dba7f56bc1e20beeabf8e2e4afde6e1578" translate="yes" xml:space="preserve">
          <source>Several examples</source>
          <target state="translated">いくつかの例</target>
        </trans-unit>
        <trans-unit id="6b48a6c117f5beb6359de584b0c0262c2f5ac127" translate="yes" xml:space="preserve">
          <source>Several last lists may have less elements than the given &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">最後のいくつかのリストは、指定&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも要素が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="5621b426f36585f7c27b3b195296e11573e93c66" translate="yes" xml:space="preserve">
          <source>Several last lists may have less elements than the given &lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">最後のいくつかのリストには、指定&lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;さ&lt;/a&gt;れたサイズよりも少ない要素が含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="3dc2911d06598db01df02e69e45148f8fafc2630" translate="yes" xml:space="preserve">
          <source>Several last lists may have less elements than the given &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">最後のいくつかのリストは、指定&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも要素が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="3caecaa64d53476eff29e5609bcb7cea54f8f926" translate="yes" xml:space="preserve">
          <source>Several last lists may have less elements than the given &lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">最後のいくつかのリストには、指定&lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;さ&lt;/a&gt;れたサイズよりも少ない要素が含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="6876468af6c5e87e9f6d208540b74e1e7a8befa7" translate="yes" xml:space="preserve">
          <source>Several last strings may have less characters than the given &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">最後のいくつかの文字列は、指定&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも文字数が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="22493d5bafb3b925e08d997a0170c41745778cbf" translate="yes" xml:space="preserve">
          <source>Several last strings may have less characters than the given &lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">最後のいくつかの文字列は、指定&lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;さ&lt;/a&gt;れたサイズよりも文字数が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="ebb92729220424707666ea7db0750140ac89ed3f" translate="yes" xml:space="preserve">
          <source>Several last strings may have less characters than the given &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">最後のいくつかの文字列は、指定&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも文字数が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="90a09fd805b49360cc7fbddf97955799c8707c28" translate="yes" xml:space="preserve">
          <source>Several last strings may have less characters than the given &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">最後のいくつかの文字列は、指定&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;さ&lt;/a&gt;れたサイズよりも文字数が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="813a34b3a59a3ac492c103196888e0f76e842e38" translate="yes" xml:space="preserve">
          <source>Severity of the diagnostic that should be reported on usages of experimental API which did not explicitly accept the experimental aspect of that API either by using &lt;a href=&quot;../-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt; or by being annotated with the corresponding marker annotation.</source>
          <target state="translated">&lt;a href=&quot;../-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt;を使用するか、対応するマーカーアノテーションで注釈を付けることによって、APIの実験的側面を明示的に受け入れなかった実験的APIの使用について報告する必要がある診断の重大度。</target>
        </trans-unit>
        <trans-unit id="d1099b140c2cdd7a815583675ff5a73a0c8b9ec7" translate="yes" xml:space="preserve">
          <source>Severity of the diagnostic that should be reported on usages of experimental API which did not explicitly accept the experimental aspect of that API either by using &lt;a href=&quot;../../-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt; or by being annotated with the corresponding marker annotation.</source>
          <target state="translated">&lt;a href=&quot;../../-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt;を使用するか、対応するマーカーアノテーションで注釈を付けることによって、APIの実験的側面を明示的に受け入れなかった実験的APIの使用について報告する必要がある診断の重大度。</target>
        </trans-unit>
        <trans-unit id="836b05c7633a1e30ae532de9ebb894d7f73b61c8" translate="yes" xml:space="preserve">
          <source>ShadowAnimation</source>
          <target state="translated">ShadowAnimation</target>
        </trans-unit>
        <trans-unit id="c52b8fac4d1546004d36036314634bdacdd53b08" translate="yes" xml:space="preserve">
          <source>ShadowRootInit</source>
          <target state="translated">ShadowRootInit</target>
        </trans-unit>
        <trans-unit id="a309f22f502741e5b5409272ba7d0d45e894ec55" translate="yes" xml:space="preserve">
          <source>ShadowRootMode</source>
          <target state="translated">ShadowRootMode</target>
        </trans-unit>
        <trans-unit id="7c5b714bfe6235530e184e90c84e004cfdefe6b2" translate="yes" xml:space="preserve">
          <source>Share code on multiple platforms</source>
          <target state="translated">複数のプラットフォームでコードを共有</target>
        </trans-unit>
        <trans-unit id="db79c07cf0a0cefafe30ccd1fc8c954e9f3aad6e" translate="yes" xml:space="preserve">
          <source>Shared Mutable State and Concurrency</source>
          <target state="translated">共有可逆状態と同時実行性</target>
        </trans-unit>
        <trans-unit id="5aa53b857601ecf23027dcc72fd5e23b6e4d90ca" translate="yes" xml:space="preserve">
          <source>Shared mutable state and concurrency</source>
          <target state="translated">共有された変異可能な状態と同時実行</target>
        </trans-unit>
        <trans-unit id="5ef7f5e4f7f5fcb21c29e25a4231957e0c1d6ca3" translate="yes" xml:space="preserve">
          <source>SharedImmutable</source>
          <target state="translated">SharedImmutable</target>
        </trans-unit>
        <trans-unit id="c7977120bf6bcc880df4fe01f7ce83934ed43158" translate="yes" xml:space="preserve">
          <source>Sharing Code between Platforms</source>
          <target state="translated">プラットフォーム間でのコード共有</target>
        </trans-unit>
        <trans-unit id="dbe8ea8f6f902897a352043f04fbfba2b7660deb" translate="yes" xml:space="preserve">
          <source>Sharing Kotlin code between iOS and Android</source>
          <target state="translated">iOSとAndroid間でKotlinのコードを共有する</target>
        </trans-unit>
        <trans-unit id="3f04d40398ebd1f6a2cabd19b6ba50ea2f6b3801" translate="yes" xml:space="preserve">
          <source>Sharing Kotlin library between JVM, JS and Native worlds</source>
          <target state="translated">JVM、JS、ネイティブワールド間でKotlinライブラリを共有する</target>
        </trans-unit>
        <trans-unit id="297325326f8f9abbd333d90d941d1753331ba09a" translate="yes" xml:space="preserve">
          <source>Sharing code between mobile platforms is one of the major Kotlin Multiplatform use cases, and it is now possible to build mobile applications with parts of the code, such as business logic, connectivity, and more, shared between Android and iOS.</source>
          <target state="translated">モバイルプラットフォーム間でコードを共有することは、Kotlinマルチプラットフォームの主要なユースケースの1つであり、ビジネスロジックや接続性などのコードの一部をAndroidとiOSで共有してモバイルアプリケーションを構築することが可能になりました。</target>
        </trans-unit>
        <trans-unit id="040aff8ea8ac51b983400c9879fd1997543e1034" translate="yes" xml:space="preserve">
          <source>Sharing code between mobile platforms is one of the major Kotlin Multiplatform use cases. With Kotlin Multiplatform Mobile (KMM), you can build multiplatform mobile applications sharing code, such as business logic, connectivity, and more, between Android and iOS.</source>
          <target state="translated">モバイルプラットフォーム間でコードを共有することは、Kotlin Multiplatformの主要なユースケースの一つです。Kotlin Multiplatform Mobile (KMM)を使用すると、Android と iOS の間でビジネスロジックや接続性などのコードを共有するマルチプラットフォームのモバイルアプリケーションを構築することができます。</target>
        </trans-unit>
        <trans-unit id="051c4d62ebae6a7b7b80ef891d89eb1bf6a2550d" translate="yes" xml:space="preserve">
          <source>Sharing code between platforms is a powerful technique, but it may be hard to accomplish without rich APIs that we have in Android, JVM, or iOS platforms. Multiplatform libraries can be used to fix that. They bring rich APIs directly in the common Kotlin code. There are several examples of such libraries:</source>
          <target state="translated">プラットフォーム間でコードを共有することは強力なテクニックですが、Android、JVM、iOSプラットフォームにあるようなリッチなAPIがないと達成するのは難しいかもしれません。それを解決するためにマルチプラットフォームライブラリを使うことができます。リッチなAPIを一般的なKotlinのコードに直接持ってきてくれます。そのようなライブラリの例がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="1de7f8359460e124966f478d8ff0b1101ad84358" translate="yes" xml:space="preserve">
          <source>Shifts this value left by the &lt;a href=&quot;shl#kotlin%24shl%28java.math.BigInteger%2C+kotlin.Int%29%2Fn&quot;&gt;n&lt;/a&gt; number of bits.</source>
          <target state="translated">この値を&lt;a href=&quot;shl#kotlin%24shl%28java.math.BigInteger%2C+kotlin.Int%29%2Fn&quot;&gt;n&lt;/a&gt;ビットだけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="e18c349d9d803dcdf12d6d95cc7a992d1e495967" translate="yes" xml:space="preserve">
          <source>Shifts this value left by the &lt;a href=&quot;shl#kotlin%24shl(java.math.BigInteger,%20kotlin.Int)/n&quot;&gt;n&lt;/a&gt; number of bits.</source>
          <target state="translated">この値を&lt;a href=&quot;shl#kotlin%24shl(java.math.BigInteger,%20kotlin.Int)/n&quot;&gt;n&lt;/a&gt;ビットだけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="fa89bbf50fa31925246bd02a77f7c8660177c18c" translate="yes" xml:space="preserve">
          <source>Shifts this value left by the &lt;a href=&quot;shl#kotlin.Int%24shl%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits.</source>
          <target state="translated">この値を&lt;a href=&quot;shl#kotlin.Int%24shl%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;のビット数だけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="051aa5c8a217e0ec9d611e61f79ea0c7d2ce2986" translate="yes" xml:space="preserve">
          <source>Shifts this value left by the &lt;a href=&quot;shl#kotlin.Int%24shl(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt; number of bits.</source>
          <target state="translated">この値を&lt;a href=&quot;shl#kotlin.Int%24shl(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt;ビット数だけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="91a11dfe9061ef195b8867f7a99bdfcb07185b19" translate="yes" xml:space="preserve">
          <source>Shifts this value left by the &lt;a href=&quot;shl#kotlin.Long%24shl%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits.</source>
          <target state="translated">この値を&lt;a href=&quot;shl#kotlin.Long%24shl%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;のビット数だけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="b5c023ee929b72a1da0f01bf4beaaf2ef287ac6d" translate="yes" xml:space="preserve">
          <source>Shifts this value left by the &lt;a href=&quot;shl#kotlin.Long%24shl(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt; number of bits.</source>
          <target state="translated">この値を&lt;a href=&quot;shl#kotlin.Long%24shl(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt;ビット数だけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="55ad8fceb560e16ef264e86683f6269f57215026" translate="yes" xml:space="preserve">
          <source>Shifts this value left by the &lt;a href=&quot;shl#kotlin.UInt%24shl%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits.</source>
          <target state="translated">この値を&lt;a href=&quot;shl#kotlin.UInt%24shl%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;のビット数だけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="934a09c8634537e896c7984ad292f677367fa71f" translate="yes" xml:space="preserve">
          <source>Shifts this value left by the &lt;a href=&quot;shl#kotlin.UInt%24shl(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt; number of bits.</source>
          <target state="translated">この値を&lt;a href=&quot;shl#kotlin.UInt%24shl(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt;ビット数だけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="c5f970689157bbb4098e02ad8befbb51472db7a6" translate="yes" xml:space="preserve">
          <source>Shifts this value left by the &lt;a href=&quot;shl#kotlin.ULong%24shl%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits.</source>
          <target state="translated">この値を&lt;a href=&quot;shl#kotlin.ULong%24shl%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;のビット数だけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="2fc061c02031c8f176116c052cdfb7debc6f340a" translate="yes" xml:space="preserve">
          <source>Shifts this value left by the &lt;a href=&quot;shl#kotlin.ULong%24shl(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt; number of bits.</source>
          <target state="translated">この値を&lt;a href=&quot;shl#kotlin.ULong%24shl(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt;ビット数だけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="561765590bf462448174dfa2c676fabfb9613e7b" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;shr#kotlin%24shr%28java.math.BigInteger%2C+kotlin.Int%29%2Fn&quot;&gt;n&lt;/a&gt; number of bits, filling the leftmost bits with copies of the sign bit.</source>
          <target state="translated">この値を&lt;a href=&quot;shr#kotlin%24shr%28java.math.BigInteger%2C+kotlin.Int%29%2Fn&quot;&gt;n&lt;/a&gt;ビットだけ右にシフトし、左端のビットを符号ビットのコピーで埋めます。</target>
        </trans-unit>
        <trans-unit id="aadddb64dd479921e4755df0ea34e90fe382f413" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;shr#kotlin%24shr(java.math.BigInteger,%20kotlin.Int)/n&quot;&gt;n&lt;/a&gt; number of bits, filling the leftmost bits with copies of the sign bit.</source>
          <target state="translated">この値を&lt;a href=&quot;shr#kotlin%24shr(java.math.BigInteger,%20kotlin.Int)/n&quot;&gt;n&lt;/a&gt;ビットだけ右にシフトし、左端のビットを符号ビットのコピーで埋めます。</target>
        </trans-unit>
        <trans-unit id="cc68bba5cb4fdf70f538ef2cd32e3d9ca3a6f230" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;shr#kotlin.Int%24shr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with copies of the sign bit.</source>
          <target state="translated">この値を&lt;a href=&quot;shr#kotlin.Int%24shr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;のビット数だけ右にシフトし、左端のビットを符号ビットのコピーで埋めます。</target>
        </trans-unit>
        <trans-unit id="dafd852bc623b74f6fd053452c3c6439f19df874" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;shr#kotlin.Int%24shr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with copies of the sign bit.</source>
          <target state="translated">この値を&lt;a href=&quot;shr#kotlin.Int%24shr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt;ビット数だけ右にシフトし、左端のビットを符号ビットのコピーで埋めます。</target>
        </trans-unit>
        <trans-unit id="a3c9d6c2dfd7c1b329f5c2e52f9e86c783409844" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;shr#kotlin.Long%24shr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with copies of the sign bit.</source>
          <target state="translated">この値を&lt;a href=&quot;shr#kotlin.Long%24shr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;のビット数だけ右にシフトし、左端のビットを符号ビットのコピーで埋めます。</target>
        </trans-unit>
        <trans-unit id="6572cc2ffe76dea42378501dd3bba7f2258421c2" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;shr#kotlin.Long%24shr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with copies of the sign bit.</source>
          <target state="translated">この値を&lt;a href=&quot;shr#kotlin.Long%24shr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt;ビット数だけ右にシフトし、左端のビットを符号ビットのコピーで埋めます。</target>
        </trans-unit>
        <trans-unit id="205604884176d4ce45ddfadcf924ca5e75925d36" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;shr#kotlin.UInt%24shr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with zeros.</source>
          <target state="translated">この値を&lt;a href=&quot;shr#kotlin.UInt%24shr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;のビット数だけ右にシフトし、左端のビットをゼロで埋めます。</target>
        </trans-unit>
        <trans-unit id="8c4c0458171a3c19a67bce0f5307950efe019685" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;shr#kotlin.UInt%24shr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with zeros.</source>
          <target state="translated">この値を&lt;a href=&quot;shr#kotlin.UInt%24shr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt;ビット数だけ右にシフトし、左端のビットをゼロで埋めます。</target>
        </trans-unit>
        <trans-unit id="975363933f601796162b5dcd9c49eefffe3d4646" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;shr#kotlin.ULong%24shr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with zeros.</source>
          <target state="translated">この値を&lt;a href=&quot;shr#kotlin.ULong%24shr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;のビット数だけ右にシフトし、左端のビットをゼロで埋めます。</target>
        </trans-unit>
        <trans-unit id="1fe7a4df7aa408c8541435b702bfe22549c0a3ff" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;shr#kotlin.ULong%24shr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with zeros.</source>
          <target state="translated">この値を&lt;a href=&quot;shr#kotlin.ULong%24shr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt;ビット数だけ右にシフトし、左端のビットをゼロで埋めます。</target>
        </trans-unit>
        <trans-unit id="1320613fcb4e3ad05b5a1fb529d5aa02782a35b6" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;ushr#kotlin.Int%24ushr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with zeros.</source>
          <target state="translated">この値を&lt;a href=&quot;ushr#kotlin.Int%24ushr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;のビット数だけ右にシフトし、左端のビットをゼロで埋めます。</target>
        </trans-unit>
        <trans-unit id="7cbc62bc90122a4b2b6c0a5c4949e7918e7cb901" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;ushr#kotlin.Int%24ushr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with zeros.</source>
          <target state="translated">この値を&lt;a href=&quot;ushr#kotlin.Int%24ushr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt;ビット数だけ右にシフトし、左端のビットをゼロで埋めます。</target>
        </trans-unit>
        <trans-unit id="de121cd2bd1ef2196f936dbff0fb5367f384adab" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;ushr#kotlin.Long%24ushr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with zeros.</source>
          <target state="translated">この値を&lt;a href=&quot;ushr#kotlin.Long%24ushr%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;のビット数だけ右にシフトし、左端のビットをゼロで埋めます。</target>
        </trans-unit>
        <trans-unit id="b35b08bfc783731f0590e83b5330982c8de4b904" translate="yes" xml:space="preserve">
          <source>Shifts this value right by the &lt;a href=&quot;ushr#kotlin.Long%24ushr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt; number of bits, filling the leftmost bits with zeros.</source>
          <target state="translated">この値を&lt;a href=&quot;ushr#kotlin.Long%24ushr(kotlin.Int)/bitCount&quot;&gt;bitCount&lt;/a&gt;ビット数だけ右にシフトし、左端のビットをゼロで埋めます。</target>
        </trans-unit>
        <trans-unit id="0fe7d82f25a3015040a206e54f9c1d3a9717c4c4" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>
        </trans-unit>
        <trans-unit id="f1be0a77e24659d844b1d829e319473c64b3d92c" translate="yes" xml:space="preserve">
          <source>Short comments can be placed on a single line:</source>
          <target state="translated">短いコメントは1行に配置することができます。</target>
        </trans-unit>
        <trans-unit id="bb95645acf79d381a75848afbb852798210eb222" translate="yes" xml:space="preserve">
          <source>ShortArray</source>
          <target state="translated">ShortArray</target>
        </trans-unit>
        <trans-unit id="6908df3352349f003ba7c1e2bdfd0ab1d663f541" translate="yes" xml:space="preserve">
          <source>ShortIterator</source>
          <target state="translated">ShortIterator</target>
        </trans-unit>
        <trans-unit id="daaa8e58fde19c5641d9f419edefbe96acf6a0fc" translate="yes" xml:space="preserve">
          <source>ShortVar</source>
          <target state="translated">ShortVar</target>
        </trans-unit>
        <trans-unit id="a18072aa811b8ffe818664ff6ba45b9d51d7c523" translate="yes" xml:space="preserve">
          <source>ShortVarOf</source>
          <target state="translated">ShortVarOf</target>
        </trans-unit>
        <trans-unit id="240898f9447d350a1c2443d35798203546e2999e" translate="yes" xml:space="preserve">
          <source>Shorter syntax for properties</source>
          <target state="translated">プロパティの構文を短くしました。</target>
        </trans-unit>
        <trans-unit id="af61674ca511f597dfdc94a24bcd892cf0f59c64" translate="yes" xml:space="preserve">
          <source>Should compiler generated code call the main function</source>
          <target state="translated">コンパイラが生成したコードは、メイン関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="ad81adfa3e182e6e5c1f09169b9e8963d98edb1b" translate="yes" xml:space="preserve">
          <source>Sign and absolute value:</source>
          <target state="translated">符号と絶対値。</target>
        </trans-unit>
        <trans-unit id="eb82e12ce844f585fa316d6e9d0d950c6bdedc17" translate="yes" xml:space="preserve">
          <source>Signals that the annotated annotation class is a marker of an API that requires an explicit opt-in.</source>
          <target state="translated">アノテーションされたアノテーションクラスが、明示的なオプトインを必要とするAPIのマーカーであることを示します。</target>
        </trans-unit>
        <trans-unit id="9902ec5a921b75c5ce68e37cd519601a31d13da9" translate="yes" xml:space="preserve">
          <source>Signals that the annotated annotation class is a marker of an experimental API.</source>
          <target state="translated">アノテーションされたアノテーションクラスが実験的 API のマーカーであることを示します。</target>
        </trans-unit>
        <trans-unit id="a0215479e9dd9a267a38a1be46680da42a198173" translate="yes" xml:space="preserve">
          <source>Signed, unsigned integral, and floating point types are mapped to their Kotlin counterpart with the same width.</source>
          <target state="translated">符号付き、符号なし積分、浮動小数点型は、同じ幅でKotlinの対応する型にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="6e0afd9e7082ae45a85cb3ea220f3007b52fa99c" translate="yes" xml:space="preserve">
          <source>Significant bits</source>
          <target state="translated">有効ビット</target>
        </trans-unit>
        <trans-unit id="9fe5273a06659605c10cb83e488938ef900a3591" translate="yes" xml:space="preserve">
          <source>Signifies that the annotated functional type represents an extension function.</source>
          <target state="translated">アノテーションされた機能タイプが拡張機能を表すことを示します。</target>
        </trans-unit>
        <trans-unit id="9fcc4d0c21be05b877e2736e1dd7b56ceaaa4a1d" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;Array&lt;/code&gt; constructor, there are now functions that create &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;MutableList&lt;/code&gt; instances and initialize each element by calling a lambda:</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; コンストラクターと同様に、 &lt;code&gt;List&lt;/code&gt; および &lt;code&gt;MutableList&lt;/code&gt; インスタンスを作成し、ラムダを呼び出して各要素を初期化する関数があります。</target>
        </trans-unit>
        <trans-unit id="b696a41cbfc5d18be8eef6a404f46e79ece8b58f" translate="yes" xml:space="preserve">
          <source>Similar to when we're using &lt;a href=&quot;../getting-started-idea/getting-started-with-intellij-idea&quot;&gt;IntelliJ IDEA build system&lt;/a&gt; or the command line, we can have the compiler output JavaScript to comply with a specific module system such as AMD, CommonJS or UMD.</source>
          <target state="translated">&lt;a href=&quot;../getting-started-idea/getting-started-with-intellij-idea&quot;&gt;IntelliJ IDEAビルドシステム&lt;/a&gt;またはコマンドラインを使用している場合と同様に、コンパイラー出力JavaScriptを使用して、AMD、CommonJS、UMDなどの特定のモジュールシステムに準拠させることができます。</target>
        </trans-unit>
        <trans-unit id="c343ad89de5e3d2bda211b8f922e99f913bab352" translate="yes" xml:space="preserve">
          <source>Similarly to functions, Kotlin supports extension properties:</source>
          <target state="translated">関数と同様に、Kotlin は拡張プロパティをサポートしています。</target>
        </trans-unit>
        <trans-unit id="4167cd56e3b5dcc5788a4fd7f543f645c15d01ed" translate="yes" xml:space="preserve">
          <source>Similarly, a library consumer may need to provide matching fallbacks for custom product flavors if some are missing in the library publications.</source>
          <target state="translated">同様に、図書館の消費者は、図書館の出版物にないものがある場合には、カスタム製品のフレーバーに適合するフォールバックを提供する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f536b6acdc9043c4a42d4d23229b44e979722a18" translate="yes" xml:space="preserve">
          <source>Similarly, when we assign to &lt;code&gt;p&lt;/code&gt;, the &lt;code&gt;setValue()&lt;/code&gt; function is called. The first two parameters are the same, and the third holds the value being assigned:</source>
          <target state="translated">同様に、 &lt;code&gt;p&lt;/code&gt; に割り当てると、 &lt;code&gt;setValue()&lt;/code&gt; 関数が呼び出されます。最初の2つのパラメーターは同じで、3番目は割り当てられている値を保持します。</target>
        </trans-unit>
        <trans-unit id="3b895209bc0a4e4dfafeeb7fada6b857d595d852" translate="yes" xml:space="preserve">
          <source>Similarly, when you already have the type arguments of an instance checked statically (at compile time), you can make an &lt;em&gt;is&lt;/em&gt;-check or a cast that involves the non-generic part of the type. Note that angle brackets are omitted in this case:</source>
          <target state="translated">同様に、インスタンスの型引数が静的に（コンパイル時に）チェックされている場合&lt;em&gt;は&lt;/em&gt;、&lt;em&gt;is&lt;/em&gt; -checkまたは型の非ジェネリック部分を含むキャストを作成できます。この場合、山括弧は省略されています。</target>
        </trans-unit>
        <trans-unit id="373dea533a0d49a9c6fb1be2d9e503372df28cc1" translate="yes" xml:space="preserve">
          <source>Simple example</source>
          <target state="translated">簡単な例</target>
        </trans-unit>
        <trans-unit id="9fe6625e7fa70a75f441e66f48bbb12c8a2bda69" translate="yes" xml:space="preserve">
          <source>Simple example: Reachable Numbers problem</source>
          <target state="translated">簡単な例。到達可能な数字の問題</target>
        </trans-unit>
        <trans-unit id="460e0cbdf7f85b57fb0b9092f75f48e34791ec3e" translate="yes" xml:space="preserve">
          <source>Simple type</source>
          <target state="translated">簡易型</target>
        </trans-unit>
        <trans-unit id="bf9fd8196e53917d432912e26e9c5f145f971f1d" translate="yes" xml:space="preserve">
          <source>SimpleEffect</source>
          <target state="translated">SimpleEffect</target>
        </trans-unit>
        <trans-unit id="1f88a84a3c3cc88b9e388323628cb3bfb002e0ea" translate="yes" xml:space="preserve">
          <source>Since 1.1, data classes may extend other classes (see &lt;a href=&quot;sealed-classes&quot;&gt;Sealed classes&lt;/a&gt; for examples).</source>
          <target state="translated">1.1以降、データクラスは他のクラスを拡張する場合があります（例については、&lt;a href=&quot;sealed-classes&quot;&gt;シールドクラス&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="c45af68c04ba0b57547d05c578aa8eba167797e0" translate="yes" xml:space="preserve">
          <source>Since 1.3.0 Kotlin has an experimental support for scripts customization, such as adding external properties, providing static or dynamic dependencies, and so on. Customizations are defined by so-called &lt;em&gt;Script definitions&lt;/em&gt; - annotated kotlin classes with appropriate support code. The script filename extension is used to select appropriate definition.</source>
          <target state="translated">1.3.0以降、Kotlinは、外部プロパティの追加、静的または動的な依存関係の提供など、スクリプトのカスタマイズを試験的にサポートしています。カスタマイズは、いわゆる&lt;em&gt;スクリプト定義（&lt;/em&gt;適切なサポートコードが付いた注釈付きのkotlinクラス）によって定義されます。スクリプトのファイル名拡張子は、適切な定義を選択するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ae33bc2ca6c920991b37acb69fe39030237d1fda" translate="yes" xml:space="preserve">
          <source>Since 1.3.40, a separate Gradle plugin for Kotlin/Native is deprecated in favor of the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin. This plugin provides an IDE support along with support of the new multiplatform project model introduced in Kotlin 1.3.0. Below you can find a short list of differences between &lt;code&gt;kotlin-platform-native&lt;/code&gt; and &lt;code&gt;kotlin-muliplatform&lt;/code&gt; plugins. For more information see the &lt;code&gt;kotlin-muliplatform&lt;/code&gt;&lt;a href=&quot;../building-mpp-with-gradle&quot;&gt;documentation page&lt;/a&gt;. For &lt;code&gt;kotlin-platform-native&lt;/code&gt; reference see the &lt;a href=&quot;#kotlin-platform-native-reference&quot;&gt;corresponding section&lt;/a&gt;.</source>
          <target state="translated">1.3.40以降、kotlin / nativeの個別のGradleプラグインは廃止され、 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインが採用されました。このプラグインは、Kotlin 1.3.0で導入された新しいマルチプラットフォームプロジェクトモデルのサポートとともにIDEサポートを提供します。以下に、 &lt;code&gt;kotlin-platform-native&lt;/code&gt; プラグインと &lt;code&gt;kotlin-muliplatform&lt;/code&gt; プラグインの違いの短いリストを示します。詳細については、 &lt;code&gt;kotlin-muliplatform&lt;/code&gt; の&lt;a href=&quot;../building-mpp-with-gradle&quot;&gt;ドキュメントページをご覧ください&lt;/a&gt;。ため &lt;code&gt;kotlin-platform-native&lt;/code&gt; 参照を参照&lt;a href=&quot;#kotlin-platform-native-reference&quot;&gt;対応するセクション&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3f3503e86bffe0abaebb38725b3349da076c53cf" translate="yes" xml:space="preserve">
          <source>Since 1.3.40, test executables are represented by a separate binary type and have their own getter. To access the default test binary, use:</source>
          <target state="translated">1.3.40 以降、テスト実行ファイルは別のバイナリ型で表現され、独自のゲッターを持っています。デフォルトのテストバイナリにアクセスするには</target>
        </trans-unit>
        <trans-unit id="74d2423e1b8ad654b09fa01e578cbe247dd6909a" translate="yes" xml:space="preserve">
          <source>Since Java has no way of marking methods for which it makes sense to use the operator syntax, Kotlin allows using any Java methods with the right name and signature as operator overloads and other conventions (&lt;code&gt;invoke()&lt;/code&gt; etc.) Calling Java methods using the infix call syntax is not allowed.</source>
          <target state="translated">Javaには、演算子構文を使用する意味があるメソッドをマークする方法がないため、Kotlinでは、適切な名前とシグネチャを持つJavaメソッドを演算子のオーバーロードおよびその他の規則（ &lt;code&gt;invoke()&lt;/code&gt; など）として使用できます。インフィックスを使用したJavaメソッドの呼び出し呼び出し構文は許可されていません。</target>
        </trans-unit>
        <trans-unit id="b8398b1189e7866368709036da6ebf170a442288" translate="yes" xml:space="preserve">
          <source>Since Kotlin 1.1, it's possible to access the constants in an enum class in a generic way, using the &lt;code&gt;enumValues&amp;lt;T&amp;gt;()&lt;/code&gt; and &lt;code&gt;enumValueOf&amp;lt;T&amp;gt;()&lt;/code&gt; functions:</source>
          <target state="translated">Kotlin 1.1以降では、 &lt;code&gt;enumValues&amp;lt;T&amp;gt;()&lt;/code&gt; および &lt;code&gt;enumValueOf&amp;lt;T&amp;gt;()&lt;/code&gt; 関数を使用して、enumクラスの定数に一般的な方法でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="330983e4399baf0a2c9af16e30f769877d9bd0ed" translate="yes" xml:space="preserve">
          <source>Since Kotlin 1.1, you can omit the property type if it can be inferred from the getter:</source>
          <target state="translated">Kotlin 1.1以降、ゲッターから推測できる場合はプロパティの型を省略することができます。</target>
        </trans-unit>
        <trans-unit id="da701a88d5b6b6cb5f3f3cc5c091da6b746b52c6" translate="yes" xml:space="preserve">
          <source>Since Kotlin 1.1.50, &lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/41091f1cc7045142181d8c89645059f4a15cc91a/proposals/jsr-305-custom-nullability-qualifiers.md&quot;&gt;custom nullability qualifiers (KEEP-79)&lt;/a&gt; are also supported (see below).</source>
          <target state="translated">Kotlin 1.1.50以降、&lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/41091f1cc7045142181d8c89645059f4a15cc91a/proposals/jsr-305-custom-nullability-qualifiers.md&quot;&gt;カスタム&lt;/a&gt; null可能性修飾子（KEEP-79）もサポートされています（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="9ae7b7121257ecc4190400d88c65896582898044" translate="yes" xml:space="preserve">
          <source>Since Kotlin 1.2, explicitly specifying &lt;code&gt;this&lt;/code&gt; as the receiver is not necessary: &lt;code&gt;this::foo&lt;/code&gt; and &lt;code&gt;::foo&lt;/code&gt; are equivalent.</source>
          <target state="translated">Kotlin 1.2以降、 &lt;code&gt;this&lt;/code&gt; を受信者として明示的に指定する必要はありません &lt;code&gt;this::foo&lt;/code&gt; と &lt;code&gt;::foo&lt;/code&gt; は同等です。</target>
        </trans-unit>
        <trans-unit id="8c4391f4af9d2a0c13ee2de02e3def8882dce4b0" translate="yes" xml:space="preserve">
          <source>Since Kotlin 1.3 use &lt;a href=&quot;../../kotlin.sequences/-sequence-scope/index&quot;&gt;kotlin.sequences.SequenceScope&lt;/a&gt; instead.</source>
          <target state="translated">Kotlin 1.3以降では、代わりに&lt;a href=&quot;../../kotlin.sequences/-sequence-scope/index&quot;&gt;kotlin.sequences.SequenceScope&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="e80b0e98aee610d55a5c374cdbbf839bc8868cd2" translate="yes" xml:space="preserve">
          <source>Since Kotlin 1.3 use &lt;a href=&quot;../kotlin.sequences/iterator&quot;&gt;kotlin.sequences.iterator&lt;/a&gt; instead.</source>
          <target state="translated">Kotlin 1.3以降では、代わりに&lt;a href=&quot;../kotlin.sequences/iterator&quot;&gt;kotlin.sequences.iterator&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="88ab4850745a2ab5ce313b43d12c199319889b1c" translate="yes" xml:space="preserve">
          <source>Since Kotlin 1.3 use &lt;a href=&quot;../kotlin.sequences/sequence&quot;&gt;kotlin.sequences.sequence&lt;/a&gt; instead.</source>
          <target state="translated">Kotlin 1.3以降では、代わりに&lt;a href=&quot;../kotlin.sequences/sequence&quot;&gt;kotlin.sequences.sequence&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="405b74df55c0598869424e3cb858793a687c40ea" translate="yes" xml:space="preserve">
          <source>Since Kotlin 1.3, it is possible to capture &lt;em&gt;when&lt;/em&gt; subject in a variable using following syntax:</source>
          <target state="translated">Kotlin 1.3ので、キャプチャすることが可能である&lt;em&gt;とき&lt;/em&gt;、変数の被写体は、次の構文を使用しました：</target>
        </trans-unit>
        <trans-unit id="020966f8fc3e849e4a66f0a822c445794dfeed9a" translate="yes" xml:space="preserve">
          <source>Since Kotlin 1.4, a property can delegate its getter and setter to another property. Such delegation is available for both top-level and class properties (member and extension). The delegate property can be:</source>
          <target state="translated">Kotlin 1.4以降、プロパティはゲッターとセッターを別のプロパティに委譲することができます。このような委任は、トップレベルのプロパティとクラスのプロパティ(メンバと拡張子)の両方で利用できます。委任プロパティには、次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="efcc6bedd3b914eb31e0f75f655ecbdfda75ad9b" translate="yes" xml:space="preserve">
          <source>Since Kotlin/Native provides &lt;a href=&quot;native/c_interop&quot;&gt;interoperability with native languages&lt;/a&gt;, there is a DSL allowing one to configure this feature for a specific compilation.</source>
          <target state="translated">Kotlin / Nativeは&lt;a href=&quot;native/c_interop&quot;&gt;ネイティブ言語&lt;/a&gt;との相互運用性を提供するため、特定のコンパイル用にこの機能を構成できるDSLがあります。</target>
        </trans-unit>
        <trans-unit id="8a7b2ebad239fb7a910fd79eab4f3372b29c79ee" translate="yes" xml:space="preserve">
          <source>Since all the dependencies required for Kotlin are defined in the Gradle file, nothing else needs to be configured specifically for Kotlin to run correctly.</source>
          <target state="translated">Kotlinに必要な依存関係はすべてGradleファイルで定義されているので、Kotlinが正しく動作するために特別に設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="8de791302c96952201846f400a6083331bbe72a8" translate="yes" xml:space="preserve">
          <source>Since an anonymous class has no name, it can't be used as a return type - if you do return an anonymous object, the function's return type must be &lt;code&gt;Any&lt;/code&gt;.</source>
          <target state="translated">無名クラスには名前がないため、戻り値の型として使用できません。匿名オブジェクトを返す場合、関数の戻り値の型は &lt;code&gt;Any&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="1d293ea0c045033de8d8bd3af73aa0ea0b91a963" translate="yes" xml:space="preserve">
          <source>Since binaries compiled this way depend on the Kotlin runtime you should make sure the latter is present in the classpath whenever your compiled library is used.</source>
          <target state="translated">この方法でコンパイルされたバイナリは Kotlin ランタイムに依存するので、コンパイルしたライブラリを使うときには必ずクラスパスに後者があることを確認してください。</target>
        </trans-unit>
        <trans-unit id="622c73b5fb8d14a132011c0334d390f1a510313f" translate="yes" xml:space="preserve">
          <source>Since cancellation is just an exception, all resources are closed in the usual way. You can wrap the code with timeout in a &lt;code&gt;try {...} catch (e: TimeoutCancellationException) {...}&lt;/code&gt; block if you need to do some additional action specifically on any kind of timeout or use the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout-or-null.html&quot;&gt;withTimeoutOrNull&lt;/a&gt; function that is similar to &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt; but returns &lt;code&gt;null&lt;/code&gt; on timeout instead of throwing an exception:</source>
          <target state="translated">キャンセルは単なる例外であるため、すべてのリソースは通常の方法で閉じられます。特定の種類のタイムアウトで特に追加のアクションを実行する必要がある場合、または次のような&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout-or-null.html&quot;&gt;withTimeoutOrNull&lt;/a&gt;関数を使用する必要がある場合は、コードをタイムアウトで &lt;code&gt;try {...} catch (e: TimeoutCancellationException) {...}&lt;/code&gt; ブロックにラップできます。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt;が例外をスローする代わりにタイムアウト時に &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4e125d582c3c9f675a15d0038927e92dc5fb9b46" translate="yes" xml:space="preserve">
          <source>Since data classes automatically declare &lt;code&gt;componentN()&lt;/code&gt; functions, destructuring declarations work here.</source>
          <target state="translated">データクラスは自動的に &lt;code&gt;componentN()&lt;/code&gt; 関数を宣言するので、構造化宣言はここで機能します。</target>
        </trans-unit>
        <trans-unit id="ab91ad24a43e16b80819fa3c7ccb13e2c89d3927" translate="yes" xml:space="preserve">
          <source>Since each enum is an instance of the enum class, they can be initialized as:</source>
          <target state="translated">それぞれのenumはenumクラスのインスタンスなので、以下のように初期化することができます。</target>
        </trans-unit>
        <trans-unit id="fccccbd7e91cba8ebb5a9e0230afa4e091b0cd00" translate="yes" xml:space="preserve">
          <source>Since inline classes are compiled to their underlying type, it may lead to various obscure errors, for example unexpected platform signature clashes:</source>
          <target state="translated">インラインクラスはその基礎となる型にコンパイルされるため、予期しないプラットフォームのシグネチャの衝突など、様々な不明瞭なエラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="90493c5a0e006c2eb80d1e75cd9d689e0f1392ea" translate="yes" xml:space="preserve">
          <source>Since the arrays are also mapped to &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt;, it supports the &lt;code&gt;[]&lt;/code&gt; operator for accessing values by index:</source>
          <target state="translated">配列も &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; マップされるため、インデックスで値にアクセスするための &lt;code&gt;[]&lt;/code&gt; 演算子をサポートしています。</target>
        </trans-unit>
        <trans-unit id="4d7b853892431a18d65c0d328c4b6e037836cf2e" translate="yes" xml:space="preserve">
          <source>Since the available operators are hardcoded into the formal Kotlin syntax, you can not invent new operators, and overriding an operator does not affect its &lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#precedence&quot;&gt;precedence&lt;/a&gt;.</source>
          <target state="translated">使用可能な演算子は正式なKotlin構文にハードコードされているため、新しい演算子を作成することはできず、演算子をオーバーライドしてもその&lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#precedence&quot;&gt;優先順位に&lt;/a&gt;は影響しません。</target>
        </trans-unit>
        <trans-unit id="fd0b229f654576b966a8840a049ffa6b928881c9" translate="yes" xml:space="preserve">
          <source>Since the entire anonymous function is self-executing, it will execute as soon as the code is loaded. Its argument will be the object &lt;code&gt;kotlin&lt;/code&gt; from &lt;code&gt;kotlin.js&lt;/code&gt;.</source>
          <target state="translated">無名関数全体が自己実行型であるため、コードが読み込まれるとすぐに実行されます。その引数は、オブジェクトになります &lt;code&gt;kotlin&lt;/code&gt; から &lt;code&gt;kotlin.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99fc39de8ebf0847b1a608d5ecfdb8c433717d90" translate="yes" xml:space="preserve">
          <source>Since the order of parameters for an annotation written in Java is not defined, you can't use a regular function call syntax for passing the arguments. Instead, you need to use the named argument syntax:</source>
          <target state="translated">Java で記述された注釈のパラメータの順序は定義されていないので、引数を渡すために通常の関数呼び出し構文を使用することはできません。代わりに、名前付き引数構文を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1d3e6156826d803abef978e9ca301cc858a7854d" translate="yes" xml:space="preserve">
          <source>Since the parameter types are not encoded as generic type parameters in &lt;code&gt;KFunction&amp;lt;V&amp;gt;&lt;/code&gt;, you won't get compile-time type validation of the parameters you pass. In order to encode the parameter types, use one of the subinterfaces &lt;code&gt;KFunction1&amp;lt;A, V&amp;gt;&lt;/code&gt;, &lt;code&gt;KFunction2&amp;lt;A, B, V&amp;gt;&lt;/code&gt;, &lt;code&gt;KFunction3&amp;lt;A, B, C, V&amp;gt;&lt;/code&gt;, and so on, depending on how many parameters the function has got. Keep in mind that if you are referencing a member function, the first generic type parameter is the receiver type. For example, &lt;code&gt;KFunction3&amp;lt;A, B, C, V&amp;gt;&lt;/code&gt; may reference either an ordinary function that takes &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt; as parameters and returns &lt;code&gt;V&lt;/code&gt;, or it may reference a member function on &lt;code&gt;A&lt;/code&gt; that takes &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; as parameters and returns &lt;code&gt;V&lt;/code&gt;. When you use any of these types, you can call the function through its reference as if the reference were a function, e.g. &lt;code&gt;function(a, b)&lt;/code&gt;, and this call will be type-safe.</source>
          <target state="translated">パラメーターの型は &lt;code&gt;KFunction&amp;lt;V&amp;gt;&lt;/code&gt; ジェネリック型パラメーターとしてエンコードされていないため、渡したパラメーターのコンパイル時の型検証は行われません。パラメータタイプをエンコードするには、サブインターフェイス &lt;code&gt;KFunction1&amp;lt;A, V&amp;gt;&lt;/code&gt; 、 &lt;code&gt;KFunction2&amp;lt;A, B, V&amp;gt;&lt;/code&gt; 、 &lt;code&gt;KFunction3&amp;lt;A, B, C, V&amp;gt;&lt;/code&gt; などのいずれかを使用します。機能があります。メンバー関数を参照する場合、最初のジェネリック型パラメーターはレシーバー型であることに注意してください。たとえば、 &lt;code&gt;KFunction3&amp;lt;A, B, C, V&amp;gt;&lt;/code&gt; は、 &lt;code&gt;A&lt;/code&gt; 、 &lt;code&gt;B&lt;/code&gt; 、および &lt;code&gt;C&lt;/code&gt; をパラメーターとして取り、 &lt;code&gt;V&lt;/code&gt; を返す通常の関数を参照できます。または、 &lt;code&gt;B&lt;/code&gt; と &lt;code&gt;C&lt;/code&gt; をパラメーターとして取り、 &lt;code&gt;V&lt;/code&gt; を返す &lt;code&gt;A&lt;/code&gt; のメンバー関数を参照する場合があります。これらの型のいずれかを使用する場合、参照が &lt;code&gt;function(a, b)&lt;/code&gt; などの関数であるかのように、その参照を介して関数を呼び出すことができ、この呼び出しは型保証されます。</target>
        </trans-unit>
        <trans-unit id="c8d2c0eaa40e46a8c6ea31321656b62533073742" translate="yes" xml:space="preserve">
          <source>Since version 1.1.4, Kotlin/JS includes a dead code elimination (DCE) tool. This tool allows to strip out unused properties, functions and classes from the generated JS. There are several ways you get unused declarations:</source>
          <target state="translated">バージョン1.1.4以降、Kotlin/JSにはデッドコード除去(DCE)ツールが含まれています。このツールを使うと、生成されたJSから未使用のプロパティ、関数、クラスを取り除くことができます。未使用の宣言を取得する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="eb32719a3bf81b439295cec580621456d2ecbd8a" translate="yes" xml:space="preserve">
          <source>Since we'll be using the &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines&quot;&gt;&lt;code&gt;kotlinx.coroutines&lt;/code&gt;&lt;/a&gt;, let's add its recent version to our dependencies:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines&quot;&gt; &lt;code&gt;kotlinx.coroutines&lt;/code&gt; &lt;/a&gt;ではkotlinx.coroutinesを使用するため、最新バージョンを依存関係に追加します。</target>
        </trans-unit>
        <trans-unit id="1a9dce84a0725c0b6c49a8e9dd94e932d53babd3" translate="yes" xml:space="preserve">
          <source>Since you can't modify built-in or third-party classes, you can't directly add functions or properties to them. If you can achieve what you want by only using the public members of a class, you can of course just write a function that takes an instance of the class as a parameter - but sometimes, you'd really like to be able to say &lt;code&gt;x.foo(y)&lt;/code&gt; instead of &lt;code&gt;foo(x, y)&lt;/code&gt;, especially if you want to make a chain of such calls or property lookups: &lt;code&gt;x.foo(y).bar().baz&lt;/code&gt; instead of &lt;code&gt;getBaz(bar(foo(x, y)))&lt;/code&gt;.</source>
          <target state="translated">組み込みクラスやサードパーティのクラスを変更することはできないため、関数やプロパティを直接追加することはできません。クラスのパブリックメンバーのみを使用して必要なことを達成できる場合は、もちろん、クラスのインスタンスをパラメーターとして取る関数を記述するだけで済みますが、場合によっては、 &lt;code&gt;x.foo(y)&lt;/code&gt; と言いたいことがあります。 &lt;code&gt;foo(x, y)&lt;/code&gt; y）の代わりに.foo（y）、特にそのような呼び出しまたはプロパティ検索のチェーンを作成する場合： &lt;code&gt;getBaz(bar(foo(x, y)))&lt;/code&gt; &lt;code&gt;x.foo(y).bar().baz&lt;/code&gt; 代わりにx.foo（y）.bar（）。baz 、y）））。</target>
        </trans-unit>
        <trans-unit id="06def0138f09b8c0f949f07f4920634afdd6f7fb" translate="yes" xml:space="preserve">
          <source>SinceKotlin</source>
          <target state="translated">SinceKotlin</target>
        </trans-unit>
        <trans-unit id="c2499363e6a7b206721dbe6071ddba0631ff7592" translate="yes" xml:space="preserve">
          <source>Single-Expression functions</source>
          <target state="translated">単一表現関数</target>
        </trans-unit>
        <trans-unit id="948bf8711c54b33e1c9d4a741ca29c920e235551" translate="yes" xml:space="preserve">
          <source>Single-expression functions</source>
          <target state="translated">単一表現機能</target>
        </trans-unit>
        <trans-unit id="f4952f106d9d3b4bccd6d238d2f11b71e55ecb4c" translate="yes" xml:space="preserve">
          <source>Singletons</source>
          <target state="translated">Singletons</target>
        </trans-unit>
        <trans-unit id="ee6a091ca276835c16a3bfeac72a4361f88e2bf7" translate="yes" xml:space="preserve">
          <source>Sixteen-bit UCS Transformation Format, big-endian byte order.</source>
          <target state="translated">16ビットUCS変換フォーマット、ビッグエンディアンのバイトオーダー。</target>
        </trans-unit>
        <trans-unit id="ee23d2f192966423edfb5a719af0092090fdca64" translate="yes" xml:space="preserve">
          <source>Sixteen-bit UCS Transformation Format, byte order identified by an optional byte-order mark.</source>
          <target state="translated">16 ビット UCS 変換フォーマット、オプションのバイト順マークで識別されるバイト順。</target>
        </trans-unit>
        <trans-unit id="ecc2e39f3a6f9988d872a59c8d23128ff9edbcfe" translate="yes" xml:space="preserve">
          <source>Sixteen-bit UCS Transformation Format, little-endian byte order.</source>
          <target state="translated">16ビットUCS変換フォーマット、リトルエンディアンのバイト順。</target>
        </trans-unit>
        <trans-unit id="1a6fd3d12a17734000a1a6160d6675df426f8980" translate="yes" xml:space="preserve">
          <source>Size (bits)</source>
          <target state="translated">サイズ(ビット)</target>
        </trans-unit>
        <trans-unit id="f85dd4da6fcf55c2051ab8017fddbb6a18773e03" translate="yes" xml:space="preserve">
          <source>Skip reachibility check, can lead to mysterious crashes in an application. USE UNSAFE MODE ONLY IF ABSOLUTELY SURE WHAT YOU'RE DOING!!!</source>
          <target state="translated">到達可能性チェックをスキップすると、アプリケーションで謎のクラッシュを引き起こす可能性があります。絶対に何をしているのか確信がある場合のみ、安全でないモードを使用してください!</target>
        </trans-unit>
        <trans-unit id="71b8e40a5867a69e273ec4b85f91eb799854cf9c" translate="yes" xml:space="preserve">
          <source>Skip this file and go to the next.</source>
          <target state="translated">このファイルをスキップして次へ</target>
        </trans-unit>
        <trans-unit id="430b38bf6daa7f9164b164b2ffd540b5a3afe2fd" translate="yes" xml:space="preserve">
          <source>Slack</source>
          <target state="translated">Slack</target>
        </trans-unit>
        <trans-unit id="0c8525a31f225d6db84222cdc68f43cb8c6c18bf" translate="yes" xml:space="preserve">
          <source>Slice</source>
          <target state="translated">Slice</target>
        </trans-unit>
        <trans-unit id="d4ba32e18a522523616ead4e04bba098b836f870" translate="yes" xml:space="preserve">
          <source>Slotable</source>
          <target state="translated">Slotable</target>
        </trans-unit>
        <trans-unit id="10fbb462857c0cba8ce2d0a30fb30be71bb9c668" translate="yes" xml:space="preserve">
          <source>Smaller changes</source>
          <target state="translated">変化が小さい</target>
        </trans-unit>
        <trans-unit id="1962b7c27bd3945eb2943949ba4b088ed50789a2" translate="yes" xml:space="preserve">
          <source>Smart Casts</source>
          <target state="translated">スマートキャスト</target>
        </trans-unit>
        <trans-unit id="5d5e5c19860062429de60b61bb54ca023fa3667c" translate="yes" xml:space="preserve">
          <source>Smart cast improvements</source>
          <target state="translated">スマートキャストの改善</target>
        </trans-unit>
        <trans-unit id="bcb3cbb48cb2ad564dda01b8a4d33886b1b4cae4" translate="yes" xml:space="preserve">
          <source>Smart casts</source>
          <target state="translated">スマートキャスト</target>
        </trans-unit>
        <trans-unit id="31522d97ace96f0c56defc6bbe0845e755f1d98b" translate="yes" xml:space="preserve">
          <source>Smartcasts on local delegated properties</source>
          <target state="translated">ローカルデリゲートされたプロパティでのスマートキャスト</target>
        </trans-unit>
        <trans-unit id="a633eaa449ddacea57394a3e6ff86e18a93dfbee" translate="yes" xml:space="preserve">
          <source>So basically, we just put a string inside a tag body, but there is this little &lt;code&gt;+&lt;/code&gt; in front of it, so it is a function call that invokes a prefix &lt;code&gt;unaryPlus()&lt;/code&gt; operation. That operation is actually defined by an extension function &lt;code&gt;unaryPlus()&lt;/code&gt; that is a member of the &lt;code&gt;TagWithText&lt;/code&gt; abstract class (a parent of &lt;code&gt;Title&lt;/code&gt;):</source>
          <target state="translated">つまり、基本的には、タグ本体の内部に文字列を挿入するだけですが、その前にこの小さな &lt;code&gt;+&lt;/code&gt; があるため、プレフィックスの &lt;code&gt;unaryPlus()&lt;/code&gt; 操作を呼び出す関数呼び出しです。その操作は実際には、 &lt;code&gt;TagWithText&lt;/code&gt; 抽象クラス（ &lt;code&gt;Title&lt;/code&gt; の親）のメンバーである拡張関数 &lt;code&gt;unaryPlus()&lt;/code&gt; によって定義されます。</target>
        </trans-unit>
        <trans-unit id="932e80ae659a0de90bc0dc75a6b10c120ab6dbb8" translate="yes" xml:space="preserve">
          <source>So equality would have been lost silently all over the place, not to mention identity.</source>
          <target state="translated">だから、平等はアイデンティティはもちろんのこと、あちこちで黙々と失われていただろう。</target>
        </trans-unit>
        <trans-unit id="e96dd13ef1773945f266699aea438682e7ab3594" translate="yes" xml:space="preserve">
          <source>So in combination with the top level variable declared above, it can allow looking at the same memory from different threads and building traditional concurrent structures with platform-specific synchronization primitives.</source>
          <target state="translated">そのため、上記で宣言したトップレベルの変数と組み合わせることで、異なるスレッドから同じメモリを見たり、プラットフォーム固有の同期プリミティブを使って従来の並行構造を構築したりすることが可能になります。</target>
        </trans-unit>
        <trans-unit id="bc0acbaacdf27c7a450d9d610b6d7359119efc69" translate="yes" xml:space="preserve">
          <source>So is the following. The difference between &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; is that &lt;code&gt;+&lt;/code&gt; can be a unary operator, but &lt;code&gt;.&lt;/code&gt; can't, so the only way to get the second line to parse is to join it with the preceding line:</source>
          <target state="translated">以下はそうです。 &lt;code&gt;+&lt;/code&gt; との違い &lt;code&gt;.&lt;/code&gt; ことです &lt;code&gt;+&lt;/code&gt; は単項演算することができますが、 &lt;code&gt;.&lt;/code&gt; できないので、2行目を解析する唯一の方法は、2行目を前の行と結合することです。</target>
        </trans-unit>
        <trans-unit id="4f0ac44318d35bdb0434bf4bda34bcf67e8a08bc" translate="yes" xml:space="preserve">
          <source>So let us see what happens:</source>
          <target state="translated">では、どうなるか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="b40f56bc16e78af71c3cc44cb5713393fe2d93cd" translate="yes" xml:space="preserve">
          <source>So you can freely use destructuring declarations in &lt;em&gt;for&lt;/em&gt;-loops with maps (as well as collections of data class instances etc).</source>
          <target state="translated">その&lt;em&gt;ため&lt;/em&gt;、マップ（およびデータクラスインスタンスのコレクションなど）を含む&lt;em&gt;for&lt;/em&gt;ループで&lt;em&gt;、&lt;/em&gt;分解宣言を自由に使用できます。</target>
        </trans-unit>
        <trans-unit id="a8703e28503d05aec067966bd9d7e146f04d7ce9" translate="yes" xml:space="preserve">
          <source>So you can import all synthetic properties for the &lt;code&gt;free/res/layout/activity_free.xml&lt;/code&gt; layout by adding this import:</source>
          <target state="translated">したがって、次のインポートを追加することで、 &lt;code&gt;free/res/layout/activity_free.xml&lt;/code&gt; レイアウトのすべての合成プロパティをインポートできます。</target>
        </trans-unit>
        <trans-unit id="c3cd48eda4cfceda7505a2a71bde8fd157927016" translate="yes" xml:space="preserve">
          <source>So you can solve tasks:</source>
          <target state="translated">だから、タスクを解決することができます。</target>
        </trans-unit>
        <trans-unit id="2048afe6ef578a9b8c02d8c1f2dc71ba4cc5e26a" translate="yes" xml:space="preserve">
          <source>So, Java prohibits such things in order to guarantee run-time safety. But this has some implications. For example, consider the &lt;code&gt;addAll()&lt;/code&gt; method from &lt;code&gt;Collection&lt;/code&gt; interface. What's the signature of this method? Intuitively, we'd put it this way:</source>
          <target state="translated">したがって、Javaは実行時の安全性を保証するためにそのようなことを禁止します。しかし、これにはいくつかの意味があります。たとえば、 &lt;code&gt;Collection&lt;/code&gt; インターフェイスの &lt;code&gt;addAll()&lt;/code&gt; メソッドを考えてみます。このメソッドのシグネチャは何ですか？直感的には、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="a5ea33aab863f2ed16d025b58cd153fccbe69f68" translate="yes" xml:space="preserve">
          <source>So, first the resulting program prints &lt;code&gt;Start&lt;/code&gt;, then it runs a coroutine through &lt;code&gt;launch {}&lt;/code&gt;, then it runs another one through &lt;code&gt;runBlocking {}&lt;/code&gt; and blocks until it's done, then prints &lt;code&gt;Stop&lt;/code&gt;. Meanwhile the first coroutine completes and prints &lt;code&gt;Hello&lt;/code&gt;. Just like threads, we told you :)</source>
          <target state="translated">したがって、結果のプログラムは最初に &lt;code&gt;Start&lt;/code&gt; を出力し、次に &lt;code&gt;launch {}&lt;/code&gt; を介してコルーチンを実行し、次に &lt;code&gt;runBlocking {}&lt;/code&gt; を介して別のプログラムを実行し、完了するまでブロックしてから &lt;code&gt;Stop&lt;/code&gt; を出力します。一方、最初のコルーチンが完了して &lt;code&gt;Hello&lt;/code&gt; を出力します。スレッドのように、私たちはあなたに言った:)</target>
        </trans-unit>
        <trans-unit id="4790cb680e369e2465f78a22145ef3881f0b2cc4" translate="yes" xml:space="preserve">
          <source>So, here the two coroutines are defined but not executed as in the previous example, but the control is given to the programmer on when exactly to start the execution by calling &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/start.html&quot;&gt;start&lt;/a&gt;. We first start &lt;code&gt;one&lt;/code&gt;, then start &lt;code&gt;two&lt;/code&gt;, and then await for the individual coroutines to finish.</source>
          <target state="translated">だから、ここ2つのコルーチンが定義されているが、前の例のように実行されていないが、制御が正確に呼び出すことによって実行を開始するときに、プログラマに与えられている&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/start.html&quot;&gt;スタートを&lt;/a&gt;。私たちは、最初の起動 &lt;code&gt;one&lt;/code&gt; 開始し、その後、 &lt;code&gt;two&lt;/code&gt; 、そして仕上げに、個々のコルーチンのために待っています。</target>
        </trans-unit>
        <trans-unit id="f87bb15bb23744f645dc6cdce384f45a5dda4f5f" translate="yes" xml:space="preserve">
          <source>So, how do we start a coroutine? Let's use the &lt;code&gt;launch {}&lt;/code&gt; function:</source>
          <target state="translated">では、どのようにしてコルーチンを開始するのでしょうか？ &lt;code&gt;launch {}&lt;/code&gt; 関数を使用してみましょう：</target>
        </trans-unit>
        <trans-unit id="4e4f67678565baec8708cd041dbe11b31af3f570" translate="yes" xml:space="preserve">
          <source>So, now our functions are very simple:</source>
          <target state="translated">というわけで、今の機能は非常にシンプルです。</target>
        </trans-unit>
        <trans-unit id="5e798efb8bbb72d38198a7facef7f3b574f4636e" translate="yes" xml:space="preserve">
          <source>So, the coroutine that had inherited context of &lt;code&gt;runBlocking {...}&lt;/code&gt; continues to execute in the &lt;code&gt;main&lt;/code&gt; thread, while the unconfined one had resumed in the default executor thread that &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt; function is using.</source>
          <target state="translated">したがって、 &lt;code&gt;runBlocking {...}&lt;/code&gt; のコンテキストを継承したコルーチンは &lt;code&gt;main&lt;/code&gt; スレッドで実行され続けますが、制限されていないコルーチンは、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;遅延&lt;/a&gt;関数が使用しているデフォルトのエグゼキュータースレッドで再開されました。</target>
        </trans-unit>
        <trans-unit id="fe711e1882424258793db49ea08a08e7857e8ec8" translate="yes" xml:space="preserve">
          <source>So, the coroutine with the context inherited from &lt;code&gt;runBlocking {...}&lt;/code&gt; continues to execute in the &lt;code&gt;main&lt;/code&gt; thread, while the unconfined one resumes in the default executor thread that the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt; function is using.</source>
          <target state="translated">したがって、 &lt;code&gt;runBlocking {...}&lt;/code&gt; から継承されたコンテキストを持つコルーチンは、 &lt;code&gt;main&lt;/code&gt; スレッドで実行を継続しますが、制限されていないコルーチンは、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt;関数が使用しているデフォルトのエグゼキュータースレッドで再開します。</target>
        </trans-unit>
        <trans-unit id="7d211dfac10e36035423c9708a4f5505bb9c9ba2" translate="yes" xml:space="preserve">
          <source>So, the sequences let you avoid building results of intermediate steps, therefore improving the performance of the whole collection processing chain. However, the lazy nature of sequences adds some overhead which may be significant when processing smaller collections or doing simpler computations. Hence, you should consider both &lt;code&gt;Sequence&lt;/code&gt; and &lt;code&gt;Iterable&lt;/code&gt; and decide which one is better for your case.</source>
          <target state="translated">したがって、シーケンスを使用すると、中間ステップの結果の構築を回避できるため、コレクション処理チェーン全体のパフォーマンスが向上します。ただし、シーケンスのレイジーな性質は、より小さなコレクションを処理したり、より単純な計算を行ったりするときに重要になる可能性があるオーバーヘッドを追加します。したがって、 &lt;code&gt;Sequence&lt;/code&gt; と &lt;code&gt;Iterable&lt;/code&gt; の両方を検討し、どちらがケースに適しているかを判断する必要があります。</target>
        </trans-unit>
        <trans-unit id="d916356003ce204bc3a393ee9e159e33d7cd9b65" translate="yes" xml:space="preserve">
          <source>So, what does this call do? Let's look at the body of &lt;code&gt;html&lt;/code&gt; function as defined above. It creates a new instance of &lt;code&gt;HTML&lt;/code&gt;, then it initializes it by calling the function that is passed as an argument (in our example this boils down to calling &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; on the &lt;code&gt;HTML&lt;/code&gt; instance), and then it returns this instance. This is exactly what a builder should do.</source>
          <target state="translated">それで、この呼び出しは何をしますか？上で定義した &lt;code&gt;html&lt;/code&gt; 関数の本体を見てみましょう。 &lt;code&gt;HTML&lt;/code&gt; の新しいインスタンスを作成し、引数として渡される関数を呼び出して初期化し（この例では、 &lt;code&gt;HTML&lt;/code&gt; インスタンスの &lt;code&gt;head&lt;/code&gt; と &lt;code&gt;body&lt;/code&gt; を呼び出すことになります）、このインスタンスを返します。これはまさにビルダーがすべきことです。</target>
        </trans-unit>
        <trans-unit id="52f3768098539882e0119dbb283e6497243cf386" translate="yes" xml:space="preserve">
          <source>So, what the prefix &lt;code&gt;+&lt;/code&gt; does here is wrapping a string into an instance of &lt;code&gt;TextElement&lt;/code&gt; and adding it to the &lt;code&gt;children&lt;/code&gt; collection, so that it becomes a proper part of the tag tree.</source>
          <target state="translated">したがって、ここで &lt;code&gt;+&lt;/code&gt; が行うことは、文字列を &lt;code&gt;TextElement&lt;/code&gt; のインスタンスにラップし、それを &lt;code&gt;children&lt;/code&gt; コレクションに追加して、タグツリーの適切な部分になるようにすることです。</target>
        </trans-unit>
        <trans-unit id="12b3ed6e021fd91320b5ceebbd0e6bd9c0002703" translate="yes" xml:space="preserve">
          <source>Soft Keywords</source>
          <target state="translated">ソフトキーワード</target>
        </trans-unit>
        <trans-unit id="718385fd0c419503c70f82a093c83a84b1b25a04" translate="yes" xml:space="preserve">
          <source>Some Java issues addressed in Kotlin</source>
          <target state="translated">Kotlin で扱われている Java のいくつかの問題</target>
        </trans-unit>
        <trans-unit id="7e9e412f994dd90c183c701ff78aacb2d95c5613" translate="yes" xml:space="preserve">
          <source>Some JavaScript libraries export packages (namespaces) instead of functions and classes. In terms of JavaScript, it's an &lt;em&gt;object&lt;/em&gt; that has &lt;em&gt;members&lt;/em&gt; that are classes, functions and properties. Importing these packages as Kotlin objects often looks unnatural. The compiler can map imported JavaScript packages to Kotlin packages, using the following notation:</source>
          <target state="translated">一部のJavaScriptライブラリは、関数やクラスの代わりにパッケージ（名前空間）をエクスポートします。 JavaScriptに関しては、クラス、関数、プロパティの&lt;em&gt;メンバー&lt;/em&gt;を持つ&lt;em&gt;オブジェクト&lt;/em&gt;です。これらのパッケージをKotlinオブジェクトとしてインポートすると、不自然に見えることがよくあります。コンパイラーは、次の表記法を使用して、インポートされたJavaScriptパッケージをKotlinパッケージにマップできます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1ee1ea35caa4a9087e54f63c24f82f4afae23440" translate="yes" xml:space="preserve">
          <source>Some JavaScript libraries export packages (namespaces) instead of functions and classes. In terms of JavaScript, it's an object that has members that &lt;em&gt;are&lt;/em&gt; classes, functions and properties. Importing these packages as Kotlin objects often looks unnatural. The compiler allows to map imported JavaScript packages to Kotlin packages, using the following notation:</source>
          <target state="translated">一部のJavaScriptライブラリは、関数やクラスの代わりにパッケージ（名前空間）をエクスポートします。JavaScriptの面では、それはメンバーがある、オブジェクトの&lt;em&gt;ある&lt;/em&gt;クラス、関数およびプロパティを。これらのパッケージをKotlinオブジェクトとしてインポートすると、不自然に見えることがよくあります。コンパイラーは、次の表記法を使用して、インポートされたJavaScriptパッケージをKotlinパッケージにマップできます。</target>
        </trans-unit>
        <trans-unit id="83979962da7157bf550804d4790b2d0a8835f807" translate="yes" xml:space="preserve">
          <source>Some algorithms require shared mutable references across the multiple workers, for example global mutable configuration could be implemented as an immutable instance of properties list atomically replaced with the new version on configuration update as the whole in a single transaction. This way no inconsistent configuration could be seen, and at the same time configuration could be updated as needed. To achieve such functionality Kotlin/Native runtime provides two related classes: &lt;code&gt;kotlin.native.concurrent.AtomicReference&lt;/code&gt; and &lt;code&gt;kotlin.native.concurrent.FreezableAtomicReference&lt;/code&gt;. Atomic reference holds reference to a frozen or immutable object, and its value could be updated by set or compare-and-swap operation. Thus, dedicated set of objects could be used to create mutable shared object graphs (of immutable objects). Cycles in the shared memory could be created using atomic references. Kotlin/Native runtime doesn't support garbage collecting cyclic data when reference cycle goes through &lt;code&gt;AtomicReference&lt;/code&gt; or frozen &lt;code&gt;FreezableAtomicReference&lt;/code&gt;. So to avoid memory leaks atomic references that are potentially parts of shared cyclic data should be zeroed out once no longer needed.</source>
          <target state="translated">一部のアルゴリズムでは、複数のワーカー間で共有の可変参照が必要です。たとえば、グローバル可変構成は、単一のトランザクションで全体として構成更新時に新しいバージョンにアトミックに置き換えられたプロパティリストの不変インスタンスとして実装できます。このようにして、一貫性のない構成を確認することはできません。同時に、必要に応じて構成を更新できます。このような機能を実現するために、Kotlin / Nativeランタイムは、 &lt;code&gt;kotlin.native.concurrent.AtomicReference&lt;/code&gt; と &lt;code&gt;kotlin.native.concurrent.FreezableAtomicReference&lt;/code&gt; の2つの関連クラスを提供します。。アトミック参照は、フリーズされたオブジェクトまたは不変のオブジェクトへの参照を保持し、その値は、セットまたはコンペアアンドスワップ操作によって更新できます。したがって、専用のオブジェクトセットを使用して、（不変オブジェクトの）可変共有オブジェクトグラフを作成できます。共有メモリ内のサイクルは、アトミック参照を使用して作成できます。 Kotlin / Nativeランタイムは、参照サイクルが &lt;code&gt;AtomicReference&lt;/code&gt; またはフリーズされた &lt;code&gt;FreezableAtomicReference&lt;/code&gt; を通過する場合のガベージコレクションの周期的データをサポートしていません。したがって、メモリリークを回避するには、共有サイクリックデータの一部である可能性のあるアトミック参照を、不要になったらゼロにする必要があります。</target>
        </trans-unit>
        <trans-unit id="b8c228912efad39ab27850e7078c0b0220142ce8" translate="yes" xml:space="preserve">
          <source>Some annotation processors (such as &lt;code&gt;AutoFactory&lt;/code&gt;) rely on precise types in declaration signatures. By default, Kapt replaces every unknown type (including types for the generated classes) to &lt;code&gt;NonExistentClass&lt;/code&gt;, but you can change this behavior. Add the additional flag to the &lt;code&gt;build.gradle&lt;/code&gt; file to enable error type inferring in stubs:</source>
          <target state="translated">一部の注釈プロセッサ（ &lt;code&gt;AutoFactory&lt;/code&gt; など）は、宣言シグネチャの正確な型に依存しています。デフォルトでは、Kaptはすべての不明なタイプ（生成されたクラスのタイプを含む）を &lt;code&gt;NonExistentClass&lt;/code&gt; に置き換えますが、この動作を変更できます。 &lt;code&gt;build.gradle&lt;/code&gt; ファイルに追加のフラグを追加して、スタブで推論するエラータイプを有効にします。</target>
        </trans-unit>
        <trans-unit id="e9b0112a5ded4d6fc76de7c8757792375d1ef8b3" translate="yes" xml:space="preserve">
          <source>Some data inconsistency with regard to initialization, such as when:</source>
          <target state="translated">初期化に関するデータの不整合があります。</target>
        </trans-unit>
        <trans-unit id="2ec82937de14be8e97ca0c1e28319cd1f629f0ec" translate="yes" xml:space="preserve">
          <source>Some examples of what definitely isn't an incompatible change include</source>
          <target state="translated">互換性のない変更の例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="e95f2e174405bcc358621966d2d7302865740ca1" translate="yes" xml:space="preserve">
          <source>Some features of Kotlin programming language are not yet mapped into respective features of Objective-C or Swift. Currently, following features are not properly exposed in generated framework headers:</source>
          <target state="translated">Kotlin プログラミング言語のいくつかの機能は、まだ Objective-C や Swift のそれぞれの機能にマッピングされていません。現在のところ、以下の機能は生成されたフレームワークのヘッダで適切に公開されていません。</target>
        </trans-unit>
        <trans-unit id="cb68483f5d41b2d8412528579f8201778d125468" translate="yes" xml:space="preserve">
          <source>Some libraries have proper &lt;code&gt;module.modulemap&lt;/code&gt; or &lt;code&gt;module.map&lt;/code&gt; files in its headers. For example, macOS and iOS system libraries and frameworks do. The &lt;a href=&quot;https://clang.llvm.org/docs/Modules.html#module-map-language&quot;&gt;module map file&lt;/a&gt; describes the correspondence between header files and modules. When the module maps are available, the headers from the modules that are not included directly can be filtered out using the experimental &lt;code&gt;excludeDependentModules&lt;/code&gt; option of the &lt;code&gt;.def&lt;/code&gt; file:</source>
          <target state="translated">一部のライブラリには、ヘッダーに適切な &lt;code&gt;module.modulemap&lt;/code&gt; または &lt;code&gt;module.map&lt;/code&gt; ファイルがあります。たとえば、macOSとiOSのシステムライブラリとフレームワークにはあります。&lt;a href=&quot;https://clang.llvm.org/docs/Modules.html#module-map-language&quot;&gt;モジュール・マップ・ファイルには、&lt;/a&gt;ヘッダファイルとモジュール間の対応関係を記述します。モジュールマップが使用可能な場合、直接含まれていないモジュールのヘッダーは、 &lt;code&gt;.def&lt;/code&gt; ファイルの実験的な &lt;code&gt;excludeDependentModules&lt;/code&gt; オプションを使用してフィルターで除外できます。</target>
        </trans-unit>
        <trans-unit id="ecbe5afd16b78f70120a5b12f258298956ff8d44" translate="yes" xml:space="preserve">
          <source>Some non-primitive built-in classes are also mapped:</source>
          <target state="translated">プリミティブではないいくつかの組み込みクラスもマップされています。</target>
        </trans-unit>
        <trans-unit id="8dee9b7120e2be75fc0bee01d923884834726ceb" translate="yes" xml:space="preserve">
          <source>Some of the Gradle built-in dependencies, like &lt;code&gt;gradleApi()&lt;/code&gt;, &lt;code&gt;localGroovy()&lt;/code&gt;, or &lt;code&gt;gradleTestKit()&lt;/code&gt; are not available in the source sets dependency DSL. You can, however, add them within the top-level dependency block, as shown above.</source>
          <target state="translated">&lt;code&gt;gradleApi()&lt;/code&gt; 、 &lt;code&gt;localGroovy()&lt;/code&gt; 、 &lt;code&gt;gradleTestKit()&lt;/code&gt; などのGradle組み込み依存関係の一部は、ソースセット依存関係DSLでは使用できません。ただし、上記のように、最上位の依存関係ブロック内に追加できます。</target>
        </trans-unit>
        <trans-unit id="ca33e1fd8c377d86f53c24cb8d991d157f4d2294" translate="yes" xml:space="preserve">
          <source>Some of the Kotlin keywords are valid identifiers in Java: &lt;em&gt;in&lt;/em&gt;, &lt;em&gt;object&lt;/em&gt;, &lt;em&gt;is&lt;/em&gt;, etc. If a Java library uses a Kotlin keyword for a method, you can still call the method escaping it with the backtick (`) character:</source>
          <target state="translated">Kotlinキーワードの一部は、Javaで有効な識別子です：&lt;em&gt;in&lt;/em&gt;、&lt;em&gt;object&lt;/em&gt;、&lt;em&gt;is&lt;/em&gt;など。JavaライブラリがメソッドにKotlinキーワードを使用している場合でも、バックティック（ `）文字でエスケープしてメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="6cec025139e5801ae5f90249c852e460ef019361" translate="yes" xml:space="preserve">
          <source>Some source sets are created and configured by default: &lt;code&gt;commonMain&lt;/code&gt;, &lt;code&gt;commonTest&lt;/code&gt;, and the default source sets for the compilations. See &lt;a href=&quot;#default-project-layout&quot;&gt;Default Project Layout&lt;/a&gt;.</source>
          <target state="translated">いくつかのソースセットは、デフォルトで作成および構成されます： &lt;code&gt;commonMain&lt;/code&gt; 、 &lt;code&gt;commonTest&lt;/code&gt; 、およびコンパイル用のデフォルトのソースセット。&lt;a href=&quot;#default-project-layout&quot;&gt;デフォルトのプロジェクトレイアウトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="46849402d48ce8fa8cf59b2eca7dbd26570c373a" translate="yes" xml:space="preserve">
          <source>Some superclasses are very useful as a grouping mechanism for related classes and for providing shared functions, but are so general that they're not useful on their own. &lt;code&gt;MotorVehicle&lt;/code&gt; seems to fit this description. Such a class should be declared &lt;em&gt;abstract&lt;/em&gt;, which will prevent the class from being instantiated directly:</source>
          <target state="translated">一部のスーパークラスは、関連するクラスのグループ化メカニズムとして、および共有機能を提供するために非常に役立ちますが、あまりにも一般的であるため、それ自体では役に立ちません。 &lt;code&gt;MotorVehicle&lt;/code&gt; はこの説明に適合しているようです。このようなクラスは、クラスが直接インスタンス化されないようにする&lt;em&gt;abstract&lt;/em&gt;として宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="a997931671767da7af31a971af570dea73db8ed8" translate="yes" xml:space="preserve">
          <source>Some targets may require additional configuration. For Android and iOS examples, see the &lt;a href=&quot;../tutorials/native/mpp-ios-android&quot;&gt;Multiplatform Project: iOS and Android&lt;/a&gt; tutorial.</source>
          <target state="translated">一部のターゲットでは、追加の構成が必要になる場合があります。AndroidとiOSの例については、&lt;a href=&quot;../tutorials/native/mpp-ios-android&quot;&gt;マルチプラットフォームプロジェクト：iOSとAndroidの&lt;/a&gt;チュートリアルをご覧ください。</target>
        </trans-unit>
        <trans-unit id="032ac17975fab5e5d6859c4cde9edfb827035210" translate="yes" xml:space="preserve">
          <source>Some use cases for Kotlin/JS</source>
          <target state="translated">Kotlin/JSのユースケース</target>
        </trans-unit>
        <trans-unit id="63a9fbfe36ca16d1efe57c704a5a06f039c3e063" translate="yes" xml:space="preserve">
          <source>Sometimes it is beneficial to use &lt;a href=&quot;inline-functions&quot;&gt;inline functions&lt;/a&gt;, which provide flexible control flow, for higher-order functions.</source>
          <target state="translated">高次関数には、柔軟な制御フローを提供する&lt;a href=&quot;inline-functions&quot;&gt;インライン関数&lt;/a&gt;を使用すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="b3c9f6d381eb6e20cbdde2643da759944b133d98" translate="yes" xml:space="preserve">
          <source>Sometimes it is convenient to &lt;em&gt;destructure&lt;/em&gt; an object into a number of variables, for example:</source>
          <target state="translated">時にはために便利です&lt;em&gt;destructure&lt;/em&gt;例えば、変数の数にオブジェクトを：</target>
        </trans-unit>
        <trans-unit id="33e9db01a2a661ab9be13fb9f8fffd72e0669fdd" translate="yes" xml:space="preserve">
          <source>Sometimes it is convenient to have an ability to pass some thread-local data to or between coroutines. However, since they are not bound to any particular thread, this will likely lead to boilerplate if done manually.</source>
          <target state="translated">時には、いくつかのスレッドローカルのデータをコアーチンに渡したり、コアーチン間で渡したりする機能があると便利なことがあります。しかし、これらのデータは特定のスレッドに縛られていないので、手動で実行するとボイラプレートになってしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="302d682a26f0a7a9291ca67783bee5bced9328f3" translate="yes" xml:space="preserve">
          <source>Sometimes it is convenient to have an ability to pass some thread-local data, but, for coroutines, which are not bound to any particular thread, it is hard to achieve it manually without writing a lot of boilerplate.</source>
          <target state="translated">スレッドローカルのデータを渡す機能があると便利なこともありますが、特定のスレッドに縛られないコアーチンの場合、多くの定型文を書かずに手動でそれを実現するのは難しいです。</target>
        </trans-unit>
        <trans-unit id="043a7ce5b4e61465c0bfadb7f717902673e4e6dd" translate="yes" xml:space="preserve">
          <source>Sometimes it is more convenient to ship a static library with your product, rather than assume it is available within the user's environment. To include a static library into &lt;code&gt;.klib&lt;/code&gt; use &lt;code&gt;staticLibrary&lt;/code&gt; and &lt;code&gt;libraryPaths&lt;/code&gt; clauses. For example:</source>
          <target state="translated">静的ライブラリをユーザーの環境内で利用できると想定するよりも、製品に静的ライブラリを同梱する方が便利な場合があります。静的ライブラリを含めるには &lt;code&gt;.klib&lt;/code&gt; 使用 &lt;code&gt;staticLibrary&lt;/code&gt; と &lt;code&gt;libraryPaths&lt;/code&gt; の句。例えば：</target>
        </trans-unit>
        <trans-unit id="bda56f559bfdf285376cfe98c118c1fc0d45e476" translate="yes" xml:space="preserve">
          <source>Sometimes it is necessary for business logic to create a wrapper around some type. However, it introduces runtime overhead due to additional heap allocations. Moreover, if the wrapped type is primitive, the performance hit is terrible, because primitive types are usually heavily optimized by the runtime, while their wrappers don't get any special treatment.</source>
          <target state="translated">ビジネスロジックでは、ある型の周りにラッパーを作成する必要がある場合があります。しかし、これは追加のヒープ割り当てによる実行時のオーバーヘッドが発生します。さらに、ラッパーの型がプリミティブ型である場合には、パフォーマンスが著しく低下します。プリミティブ型は通常、ランタイムによって大幅に最適化されますが、ラッパーは特別な処理を受けないからです。</target>
        </trans-unit>
        <trans-unit id="a1c252c20c0ca0a66522a4f37c8be9e2e7e0683f" translate="yes" xml:space="preserve">
          <source>Sometimes it is required to add custom C declarations to the library before generating bindings (e.g., for &lt;a href=&quot;#macros&quot;&gt;macros&lt;/a&gt;). Instead of creating an additional header file with these declarations, you can include them directly to the end of the &lt;code&gt;.def&lt;/code&gt; file, after a separating line, containing only the separator sequence &lt;code&gt;---&lt;/code&gt;:</source>
          <target state="translated">バインディングを生成する前に、カスタムC宣言をライブラリに追加する必要がある場合があります（たとえば、&lt;a href=&quot;#macros&quot;&gt;マクロ用&lt;/a&gt;）。これらの宣言を使用して追加のヘッダーファイルを作成する代わりに、 &lt;code&gt;.def&lt;/code&gt; ファイルの末尾に、セパレータシーケンスのみを含む区切り線の後に &lt;code&gt;---&lt;/code&gt; を直接含めることができます。</target>
        </trans-unit>
        <trans-unit id="56ecfc8da440116471986a5f61a75f0ea7b94e9a" translate="yes" xml:space="preserve">
          <source>Sometimes it is required to override initializers, e.g. when subclassing &lt;code&gt;UIViewController&lt;/code&gt;. Initializers imported as Kotlin constructors can be overridden by Kotlin constructors marked with the &lt;code&gt;@OverrideInit&lt;/code&gt; annotation:</source>
          <target state="translated">&lt;code&gt;UIViewController&lt;/code&gt; をサブクラス化する場合など、初期化子をオーバーライドする必要がある場合があります。Kotlinコンストラクターとしてインポートされた初期化子は、 &lt;code&gt;@OverrideInit&lt;/code&gt; アノテーションが付けられたKotlinコンストラクターによってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="efdaae37e7bf4722447db8e7626c18f363241541" translate="yes" xml:space="preserve">
          <source>Sometimes the C libraries have function parameters or struct fields of a platform-dependent type, e.g. &lt;code&gt;long&lt;/code&gt; or &lt;code&gt;size_t&lt;/code&gt;. Kotlin itself doesn't provide neither implicit integer casts nor C-style integer casts (e.g. &lt;code&gt;(size_t) intValue&lt;/code&gt;), so to make writing portable code in such cases easier, the &lt;code&gt;convert&lt;/code&gt; method is provided:</source>
          <target state="translated">Cライブラリには、プラットフォームに依存する型の関数パラメータまたは構造体フィールド（たとえば &lt;code&gt;long&lt;/code&gt; または &lt;code&gt;size_t&lt;/code&gt; )がある場合があります。Kotlin自体は暗黙の整数キャストもCスタイルの整数キャストも提供しません（たとえば &lt;code&gt;(size_t) intValue&lt;/code&gt; ）。このような場合に移植可能なコードを簡単に作成できるように、 &lt;code&gt;convert&lt;/code&gt; メソッドが提供されています。</target>
        </trans-unit>
        <trans-unit id="c6d7d45f9a4bb2f105945868e1e4262dd631e65e" translate="yes" xml:space="preserve">
          <source>Sometimes we have a named function in Kotlin, for which we need a different JVM name in the byte code. The most prominent example happens due to &lt;em&gt;type erasure&lt;/em&gt;:</source>
          <target state="translated">Kotlinに名前付き関数がある場合があり、そのためにバイトコードで別のJVM名が必要です。最も顕著な例は、&lt;em&gt;型の消去&lt;/em&gt;が原因で発生します。</target>
        </trans-unit>
        <trans-unit id="57bc7ebf1e9198008144108c9c1119ef8c7efcd8" translate="yes" xml:space="preserve">
          <source>Sometimes we need to access a type passed to us as a parameter:</source>
          <target state="translated">パラメータとして渡された型にアクセスする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="d5900485f21e94ff8c4ddb23a5e9d44345914137" translate="yes" xml:space="preserve">
          <source>Sometimes we need to create an object of a slight modification of some class, without explicitly declaring a new subclass for it. Java handles this case with &lt;em&gt;anonymous inner classes&lt;/em&gt;. Kotlin slightly generalizes this concept with &lt;em&gt;object expressions&lt;/em&gt; and &lt;em&gt;object declarations&lt;/em&gt;.</source>
          <target state="translated">新しいサブクラスを明示的に宣言せずに、一部のクラスをわずかに変更したオブジェクトを作成する必要がある場合があります。Javaは&lt;em&gt;匿名の内部クラスで&lt;/em&gt;このケースを処理し&lt;em&gt;ます&lt;/em&gt;。Kotlinは、&lt;em&gt;オブジェクト式&lt;/em&gt;と&lt;em&gt;オブジェクト宣言を使用して&lt;/em&gt;、この概念を少し一般化してい&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a670d77086d7bf5aac8ce4af135b7004f29155cb" translate="yes" xml:space="preserve">
          <source>Sometimes we need to create an object of a slight modification of some class, without explicitly declaring a new subclass for it. Kotlin handles this case with &lt;em&gt;object expressions&lt;/em&gt; and &lt;em&gt;object declarations&lt;/em&gt;.</source>
          <target state="translated">新しいサブクラスを明示的に宣言せずに、クラスを少し変更したオブジェクトを作成する必要がある場合があります。Kotlinは、&lt;em&gt;オブジェクト式&lt;/em&gt;と&lt;em&gt;オブジェクト宣言&lt;/em&gt;を使用してこのケースを処理し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b9b1fa0588f23ccc07f2af6fa910811f7863c7b9" translate="yes" xml:space="preserve">
          <source>Sometimes we need to define multiple elements for a coroutine context. We can use the &lt;code&gt;+&lt;/code&gt; operator for that. For example, we can launch a coroutine with an explicitly specified dispatcher and an explicitly specified name at the same time:</source>
          <target state="translated">コルーチンコンテキストに対して複数の要素を定義する必要がある場合があります。そのために &lt;code&gt;+&lt;/code&gt; 演算子を使用できます。たとえば、明示的に指定されたディスパッチャーと明示的に指定された名前を使用してコルーチンを同時に起動できます。</target>
        </trans-unit>
        <trans-unit id="c43bb60fb115adf5865cb0fa15a4f5e0748287e9" translate="yes" xml:space="preserve">
          <source>Sometimes we need to define multiple elements for coroutine context. We can use &lt;code&gt;+&lt;/code&gt; operator for that. For example, we can launch a coroutine with an explicitly specified dispatcher and an explicitly specified name at the same time:</source>
          <target state="translated">コルーチンコンテキスト用に複数の要素を定義する必要がある場合があります。 &lt;code&gt;+&lt;/code&gt; 演算子を使用できます。たとえば、明示的に指定されたディスパッチャーと明示的に指定された名前を同時に使用してコルーチンを起動できます。</target>
        </trans-unit>
        <trans-unit id="1310e09600b521eea851206fd94e82f8d190d5a5" translate="yes" xml:space="preserve">
          <source>Sometimes you are going to use a Kotlin declaration directly from JavaScript, and it's being stripped out by DCE. You may want to keep this declaration. To do so, you can use the following syntax in &lt;code&gt;build.gradle&lt;/code&gt;:</source>
          <target state="translated">JavaScriptから直接Kotlin宣言を使用する場合があり、DCEによって削除されます。この宣言を保持することをお勧めします。そのためには、 &lt;code&gt;build.gradle&lt;/code&gt; で次の構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="2ac9b5cb701503646e0c16cf47968686ce844099" translate="yes" xml:space="preserve">
          <source>Sometimes you may need to keep a function or a class in the resulting JavaScript code even if you don't use it in your module, for example, if you're going to use it in the client JavaScript code.</source>
          <target state="translated">モジュールで使用しない場合でも、例えばクライアントのJavaScriptコードで使用する場合など、結果としてJavaScriptコードに関数やクラスを保持しておく必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="701d6ffd47aa414cf9e4b9070e6ac69d9f907851" translate="yes" xml:space="preserve">
          <source>Sometimes you may need to quickly write and execute some code outside of a project or an application. This may be useful, for example, when learning Kotlin or evaluating expressions. Let's have a look through two handy ways to quickly run Kotlin code:</source>
          <target state="translated">プロジェクトやアプリケーションの外でコードを素早く書いて実行する必要がある場合があります。これは、Kotlin を学ぶときや式を評価するときなどに便利です。ここでは、Kotlin のコードを素早く実行するための 2 つの便利な方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="b4425ac713740daf889b7cc088cbeb587776a728" translate="yes" xml:space="preserve">
          <source>Sometimes you need to call a Kotlin method with a parameter of type &lt;code&gt;KClass&lt;/code&gt;. There is no automatic conversion from &lt;code&gt;Class&lt;/code&gt; to &lt;code&gt;KClass&lt;/code&gt;, so you have to do it manually by invoking the equivalent of the &lt;code&gt;Class&amp;lt;T&amp;gt;.kotlin&lt;/code&gt; extension property:</source>
          <target state="translated">場合によっては、 &lt;code&gt;KClass&lt;/code&gt; タイプのパラメーターを使用してKotlinメソッドを呼び出す必要があります。 &lt;code&gt;Class&lt;/code&gt; から &lt;code&gt;KClass&lt;/code&gt; への自動変換はないため、 &lt;code&gt;Class&amp;lt;T&amp;gt;.kotlin&lt;/code&gt; 拡張プロパティに相当するものを呼び出して手動で行う必要があります。</target>
        </trans-unit>
        <trans-unit id="f7c6d9e07fb190279efd213b27af8a596256a8b2" translate="yes" xml:space="preserve">
          <source>Sometimes you want to say that you know nothing about the type argument, but still want to use it in a safe way. The safe way here is to define such a projection of the generic type, that every concrete instantiation of that generic type would be a subtype of that projection.</source>
          <target state="translated">型の引数については何も知らないが、それでも安全な方法で使いたいと思うことがあるでしょう。ここでの安全な方法は、汎用型の投影を定義することで、汎用型の具体的なインスタンス化はすべてその投影のサブタイプになります。</target>
        </trans-unit>
        <trans-unit id="46f170a2459c0e42a18d65de64835d7772e9f851" translate="yes" xml:space="preserve">
          <source>Sometimes, you're in a situation where you have a value &lt;code&gt;x&lt;/code&gt; that you know is not null, but the compiler doesn't realize it. This can legitimately happen when you're interacting with Java code, but if it happens because your code's logic is more complicated than the compiler's ability to reason about it, you should probably restructure your code. If you can't convince the compiler, you can resort to saying &lt;code&gt;x!!&lt;/code&gt; to form an expression that produces the value of &lt;code&gt;x&lt;/code&gt;, but whose type is non-nullable:</source>
          <target state="translated">ときどき、nullではないことがわかっている値 &lt;code&gt;x&lt;/code&gt; を持っているのに、コンパイラーがそれを認識しない状況にあります。これは、Javaコードを操作しているときに正当に発生する可能性がありますが、コードのロジックが、コンパイラがそれを推論する能力よりも複雑であるために発生する場合は、おそらくコードを再構築する必要があります。コンパイラを納得させることができない場合は、 &lt;code&gt;x!!&lt;/code&gt; と言うことに頼ることができます。 &lt;code&gt;x&lt;/code&gt; の値を生成するが、その型はnullにできない式を作成するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="378e9e163b7eecefadb4415cae533096e336c4ab" translate="yes" xml:space="preserve">
          <source>Sorting</source>
          <target state="translated">Sorting</target>
        </trans-unit>
        <trans-unit id="921e7c9357933042c013290bc34dab79354742a1" translate="yes" xml:space="preserve">
          <source>Sorts a range in the array in-place with the given &lt;a href=&quot;../../kotlin.collections/sort-with#kotlin.collections%24sortWith%28kotlin.Array%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort-with#kotlin.collections%24sortWith%28kotlin.Array%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;コンパレータを使用&lt;/a&gt;して、配列内の範囲をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="7ab5ac4c7321bd5e96bb4ea59931e3aafdf22bba" translate="yes" xml:space="preserve">
          <source>Sorts a range in the array in-place with the given &lt;a href=&quot;../../kotlin.collections/sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;コンパレータを使用&lt;/a&gt;して、配列内の範囲をインプレースでソートします。</target>
        </trans-unit>
        <trans-unit id="7a20d1597d8301c3cc3bcec0a63b03857c779e81" translate="yes" xml:space="preserve">
          <source>Sorts a range in the array in-place with the given &lt;a href=&quot;sort-with#kotlin.collections%24sortWith%28kotlin.Array%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-with#kotlin.collections%24sortWith%28kotlin.Array%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;コンパレータを使用&lt;/a&gt;して、配列内の範囲をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="9f29b8a3e32fc7d33d5032a0e7e2570dec8a50ce" translate="yes" xml:space="preserve">
          <source>Sorts a range in the array in-place with the given &lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;コンパレータを使用&lt;/a&gt;して、配列内の範囲をインプレースでソートします。</target>
        </trans-unit>
        <trans-unit id="6f9c7763537514e3ae832c455c2613ffa3795678" translate="yes" xml:space="preserve">
          <source>Sorts a range in the array in-place with the given &lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20kotlin.Comparator((kotlin.collections.sortWith.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20kotlin.Comparator((kotlin.collections.sortWith.T)),%20kotlin.Int,%20kotlin.Int)/comparator&quot;&gt;コンパレータを使用&lt;/a&gt;して、配列内の範囲をインプレースでソートします。</target>
        </trans-unit>
        <trans-unit id="1d1e6b1aadd9cf85696a8efae6efd2f282221c3e" translate="yes" xml:space="preserve">
          <source>Sorts a range in the array in-place.</source>
          <target state="translated">配列内の範囲をインプレースでソートします。</target>
        </trans-unit>
        <trans-unit id="10a2c137539a5db660667fa6576c28cd26e36ac6" translate="yes" xml:space="preserve">
          <source>Sorts elements in the array in-place according to natural sort order of the value returned by specified &lt;a href=&quot;../../kotlin.collections/sort-by#kotlin.collections%24sortBy%28kotlin.Array%28%28kotlin.collections.sortBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortBy.T%2C+kotlin.collections.sortBy.R%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort-by#kotlin.collections%24sortBy%28kotlin.Array%28%28kotlin.collections.sortBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortBy.T%2C+kotlin.collections.sortBy.R%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、配列内の要素をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="d614d5f803379f2eec6996f2ea55836ab718c0c6" translate="yes" xml:space="preserve">
          <source>Sorts elements in the array in-place according to natural sort order of the value returned by specified &lt;a href=&quot;../../kotlin.collections/sort-by#kotlin.collections%24sortBy(kotlin.Array((kotlin.collections.sortBy.T)),%20kotlin.Function1((kotlin.collections.sortBy.T,%20kotlin.collections.sortBy.R?)))/selector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort-by#kotlin.collections%24sortBy(kotlin.Array((kotlin.collections.sortBy.T)),%20kotlin.Function1((kotlin.collections.sortBy.T,%20kotlin.collections.sortBy.R?)))/selector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、配列内の要素をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="07efbdad7d4d4a2414ba73adc668adade052ada0" translate="yes" xml:space="preserve">
          <source>Sorts elements in the array in-place according to natural sort order of the value returned by specified &lt;a href=&quot;sort-by#kotlin.collections%24sortBy%28kotlin.Array%28%28kotlin.collections.sortBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortBy.T%2C+kotlin.collections.sortBy.R%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-by#kotlin.collections%24sortBy%28kotlin.Array%28%28kotlin.collections.sortBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortBy.T%2C+kotlin.collections.sortBy.R%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、配列内の要素をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="cb666ac48c0d59760a086d470c5a19d2b11c9178" translate="yes" xml:space="preserve">
          <source>Sorts elements in the array in-place according to natural sort order of the value returned by specified &lt;a href=&quot;sort-by#kotlin.collections%24sortBy(kotlin.Array((kotlin.collections.sortBy.T)),%20kotlin.Function1((kotlin.collections.sortBy.T,%20kotlin.collections.sortBy.R?)))/selector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-by#kotlin.collections%24sortBy(kotlin.Array((kotlin.collections.sortBy.T)),%20kotlin.Function1((kotlin.collections.sortBy.T,%20kotlin.collections.sortBy.R?)))/selector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、配列内の要素をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="bf0d525765ea180a93133271ef548eaa25ac7135" translate="yes" xml:space="preserve">
          <source>Sorts elements in the array in-place descending according to natural sort order of the value returned by specified &lt;a href=&quot;../../kotlin.collections/sort-by-descending#kotlin.collections%24sortByDescending%28kotlin.Array%28%28kotlin.collections.sortByDescending.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortByDescending.T%2C+kotlin.collections.sortByDescending.R%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort-by-descending#kotlin.collections%24sortByDescending%28kotlin.Array%28%28kotlin.collections.sortByDescending.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortByDescending.T%2C+kotlin.collections.sortByDescending.R%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数によって返された値の自然な並べ替え順序に従って、配列内の要素をインプレース降順で並べ替えます。</target>
        </trans-unit>
        <trans-unit id="524c437730f487654fb5f722d14a0d7c22cf7527" translate="yes" xml:space="preserve">
          <source>Sorts elements in the array in-place descending according to natural sort order of the value returned by specified &lt;a href=&quot;../../kotlin.collections/sort-by-descending#kotlin.collections%24sortByDescending(kotlin.Array((kotlin.collections.sortByDescending.T)),%20kotlin.Function1((kotlin.collections.sortByDescending.T,%20kotlin.collections.sortByDescending.R?)))/selector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort-by-descending#kotlin.collections%24sortByDescending(kotlin.Array((kotlin.collections.sortByDescending.T)),%20kotlin.Function1((kotlin.collections.sortByDescending.T,%20kotlin.collections.sortByDescending.R?)))/selector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然ソート順に従って、配列内の要素をインプレース降順でソートします。</target>
        </trans-unit>
        <trans-unit id="fa27ec6d7341fe4cf77ef645e820323c332516f4" translate="yes" xml:space="preserve">
          <source>Sorts elements in the array in-place descending according to natural sort order of the value returned by specified &lt;a href=&quot;sort-by-descending#kotlin.collections%24sortByDescending%28kotlin.Array%28%28kotlin.collections.sortByDescending.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortByDescending.T%2C+kotlin.collections.sortByDescending.R%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-by-descending#kotlin.collections%24sortByDescending%28kotlin.Array%28%28kotlin.collections.sortByDescending.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortByDescending.T%2C+kotlin.collections.sortByDescending.R%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数によって返された値の自然な並べ替え順序に従って、配列内の要素をインプレース降順で並べ替えます。</target>
        </trans-unit>
        <trans-unit id="7a32fc0d52dda597ec70a61cacc8a5671938c4a0" translate="yes" xml:space="preserve">
          <source>Sorts elements in the array in-place descending according to natural sort order of the value returned by specified &lt;a href=&quot;sort-by-descending#kotlin.collections%24sortByDescending(kotlin.Array((kotlin.collections.sortByDescending.T)),%20kotlin.Function1((kotlin.collections.sortByDescending.T,%20kotlin.collections.sortByDescending.R?)))/selector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-by-descending#kotlin.collections%24sortByDescending(kotlin.Array((kotlin.collections.sortByDescending.T)),%20kotlin.Function1((kotlin.collections.sortByDescending.T,%20kotlin.collections.sortByDescending.R?)))/selector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然ソート順に従って、配列内の要素をインプレース降順でソートします。</target>
        </trans-unit>
        <trans-unit id="80685ba332e950eb83904d1f4115777122edba8d" translate="yes" xml:space="preserve">
          <source>Sorts elements in the array in-place descending according to their natural sort order.</source>
          <target state="translated">配列の要素を、自然なソート順に従って降順でソートします。</target>
        </trans-unit>
        <trans-unit id="3fa32beeb828e11e44487567ba158313d97575ec" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place according to natural sort order of the value returned by specified &lt;a href=&quot;../sort-by#kotlin.collections%24sortBy%28kotlin.collections.MutableList%28%28kotlin.collections.sortBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortBy.T%2C+kotlin.collections.sortBy.R%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../sort-by#kotlin.collections%24sortBy%28kotlin.collections.MutableList%28%28kotlin.collections.sortBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortBy.T%2C+kotlin.collections.sortBy.R%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、リスト内の要素をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="3eb7d662fababf9344b18ca7ba5f8a759432e4ef" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place according to natural sort order of the value returned by specified &lt;a href=&quot;../sort-by#kotlin.collections%24sortBy(kotlin.collections.MutableList((kotlin.collections.sortBy.T)),%20kotlin.Function1((kotlin.collections.sortBy.T,%20kotlin.collections.sortBy.R?)))/selector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../sort-by#kotlin.collections%24sortBy(kotlin.collections.MutableList((kotlin.collections.sortBy.T)),%20kotlin.Function1((kotlin.collections.sortBy.T,%20kotlin.collections.sortBy.R?)))/selector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、リスト内の要素をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="a6a7a1bbadcee0fdc07b873d422460bcfcf63439" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place according to natural sort order of the value returned by specified &lt;a href=&quot;sort-by#kotlin.collections%24sortBy%28kotlin.collections.MutableList%28%28kotlin.collections.sortBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortBy.T%2C+kotlin.collections.sortBy.R%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-by#kotlin.collections%24sortBy%28kotlin.collections.MutableList%28%28kotlin.collections.sortBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortBy.T%2C+kotlin.collections.sortBy.R%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、リスト内の要素をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="1cc10c6d35be064c290d10ca48ea91be0492f9d7" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place according to natural sort order of the value returned by specified &lt;a href=&quot;sort-by#kotlin.collections%24sortBy(kotlin.collections.MutableList((kotlin.collections.sortBy.T)),%20kotlin.Function1((kotlin.collections.sortBy.T,%20kotlin.collections.sortBy.R?)))/selector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-by#kotlin.collections%24sortBy(kotlin.collections.MutableList((kotlin.collections.sortBy.T)),%20kotlin.Function1((kotlin.collections.sortBy.T,%20kotlin.collections.sortBy.R?)))/selector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、リスト内の要素をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="016acc76aaf4b67ee4196bd0e6dd698c603f8a7f" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place according to the order specified with &lt;a href=&quot;../sort-with#kotlin.collections%24sortWith%28kotlin.collections.MutableList%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../sort-with#kotlin.collections%24sortWith%28kotlin.collections.MutableList%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、リスト内の要素をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="7d3a9a30252022d98ff14ad32e68d6472da5d759" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place according to the order specified with &lt;a href=&quot;../sort-with#kotlin.collections%24sortWith(kotlin.collections.MutableList((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../sort-with#kotlin.collections%24sortWith(kotlin.collections.MutableList((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、リスト内の要素をインプレースでソートします。</target>
        </trans-unit>
        <trans-unit id="3bd3e4d90292d259ee01f75c87c74c625704e409" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place according to the order specified with &lt;a href=&quot;sort-with#kotlin.collections%24sortWith%28kotlin.collections.MutableList%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;sort-with#kotlin.collections%24sortWith%28kotlin.collections.MutableList%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、リスト内の要素をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="a27a30d98060067ccc92da7c7b7abd9184f7e85d" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place according to the order specified with &lt;a href=&quot;sort-with#kotlin.collections%24sortWith%28kotlin.collections.MutableList%28%28kotlin.collections.sortWith.T%29%29%2C+kotlin.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;sort-with#kotlin.collections%24sortWith%28kotlin.collections.MutableList%28%28kotlin.collections.sortWith.T%29%29%2C+kotlin.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、リスト内の要素をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="930e6c0e376a0ececcef9397828f3578ceab50b2" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place according to the order specified with &lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.collections.MutableList((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.collections.MutableList((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、リスト内の要素をインプレースでソートします。</target>
        </trans-unit>
        <trans-unit id="451f15947f12afae8573658bfb10d315dd72debd" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place according to the order specified with &lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.collections.MutableList((kotlin.collections.sortWith.T)),%20kotlin.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.collections.MutableList((kotlin.collections.sortWith.T)),%20kotlin.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、リスト内の要素をインプレースでソートします。</target>
        </trans-unit>
        <trans-unit id="08c50e4dcb5f1e790b3908c92dfd681b51af4fd6" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place according to their natural sort order.</source>
          <target state="translated">リスト内の要素を自然なソート順でソートします。</target>
        </trans-unit>
        <trans-unit id="518d2bf6df28c01bc5ce865b286b09bcb6bd8f57" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place descending according to natural sort order of the value returned by specified &lt;a href=&quot;../sort-by-descending#kotlin.collections%24sortByDescending%28kotlin.collections.MutableList%28%28kotlin.collections.sortByDescending.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortByDescending.T%2C+kotlin.collections.sortByDescending.R%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../sort-by-descending#kotlin.collections%24sortByDescending%28kotlin.collections.MutableList%28%28kotlin.collections.sortByDescending.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortByDescending.T%2C+kotlin.collections.sortByDescending.R%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、リスト内の要素をインプレース降順で並べ替えます。</target>
        </trans-unit>
        <trans-unit id="95b14134f87e11edfb507c62a0dc049983651cb2" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place descending according to natural sort order of the value returned by specified &lt;a href=&quot;../sort-by-descending#kotlin.collections%24sortByDescending(kotlin.collections.MutableList((kotlin.collections.sortByDescending.T)),%20kotlin.Function1((kotlin.collections.sortByDescending.T,%20kotlin.collections.sortByDescending.R?)))/selector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../sort-by-descending#kotlin.collections%24sortByDescending(kotlin.collections.MutableList((kotlin.collections.sortByDescending.T)),%20kotlin.Function1((kotlin.collections.sortByDescending.T,%20kotlin.collections.sortByDescending.R?)))/selector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、リスト内の要素をその場で降順で並べ替えます。</target>
        </trans-unit>
        <trans-unit id="a90b16f5917d7428e33805718ad4902f7d836c1f" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place descending according to natural sort order of the value returned by specified &lt;a href=&quot;sort-by-descending#kotlin.collections%24sortByDescending%28kotlin.collections.MutableList%28%28kotlin.collections.sortByDescending.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortByDescending.T%2C+kotlin.collections.sortByDescending.R%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-by-descending#kotlin.collections%24sortByDescending%28kotlin.collections.MutableList%28%28kotlin.collections.sortByDescending.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.sortByDescending.T%2C+kotlin.collections.sortByDescending.R%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、リスト内の要素をインプレース降順で並べ替えます。</target>
        </trans-unit>
        <trans-unit id="7864ad53951825c4ba3b7854eddaf6b68d4f97be" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place descending according to natural sort order of the value returned by specified &lt;a href=&quot;sort-by-descending#kotlin.collections%24sortByDescending(kotlin.collections.MutableList((kotlin.collections.sortByDescending.T)),%20kotlin.Function1((kotlin.collections.sortByDescending.T,%20kotlin.collections.sortByDescending.R?)))/selector&quot;&gt;selector&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-by-descending#kotlin.collections%24sortByDescending(kotlin.collections.MutableList((kotlin.collections.sortByDescending.T)),%20kotlin.Function1((kotlin.collections.sortByDescending.T,%20kotlin.collections.sortByDescending.R?)))/selector&quot;&gt;セレクター&lt;/a&gt;関数によって返される値の自然な並べ替え順序に従って、リスト内の要素をその場で降順で並べ替えます。</target>
        </trans-unit>
        <trans-unit id="8d80c7611560449691efd4fd1165c90dfada93cf" translate="yes" xml:space="preserve">
          <source>Sorts elements in the list in-place descending according to their natural sort order.</source>
          <target state="translated">リスト内の要素を、自然なソート順に従って降順でソートします。</target>
        </trans-unit>
        <trans-unit id="33cd75f026ddd26de228ee011733f2d816ccf5a7" translate="yes" xml:space="preserve">
          <source>Sorts elements of the array in the specified range in-place. The elements are sorted descending according to their natural sort order.</source>
          <target state="translated">指定された範囲内の配列の要素をその場でソートします。要素は、自然なソート順にしたがって降順にソートされます。</target>
        </trans-unit>
        <trans-unit id="286952b1c23000c7e96cb265d1597ee4be034d09" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the natural order of its elements.</source>
          <target state="translated">配列を,その要素の自然な順序に従って,その場でソートします.</target>
        </trans-unit>
        <trans-unit id="d8747f2faabc6c9d8057fc49ebee4065869ad5f8" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.Array%28%28kotlin.collections.sort.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.sort.T%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.Array%28%28kotlin.collections.sort.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.sort.T%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="d1839449662e167b67669a9432e7e5b8cda47aee" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="7d1ba7dd62c04c8e2b5a71936a2028b1fc09c095" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="0768dfe6e47561708ff3dcc3e7544aaeba456f69" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Double%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Double%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="c50febead4efd17d0d1e1a05393ce1b4d81939d6" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Float%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Float%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="614045354e7f88dacd9beea842f592073eab2474" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="92757cae315a994755e0f14f54db5ba3c6d0198c" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Long%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Long%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="66732bd072b25ed9a6c879f731965bd5869d1d8e" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Short%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Short%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="91018bf823a42030e6a02cceb91f30bb23b4a3c0" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.Array((kotlin.collections.sort.T)),%20kotlin.Function2((kotlin.collections.sort.T,%20,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.Array((kotlin.collections.sort.T)),%20kotlin.Function2((kotlin.collections.sort.T,%20,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="45c4d8278b87d47b820ac64aa10b40a0666016d9" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="8d58f0c19f310d1e8a64af26ab6a55ccb19982af" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.CharArray,%20kotlin.Function2((kotlin.Char,%20,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.CharArray,%20kotlin.Function2((kotlin.Char,%20,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="fe7403a5f0d391d45b595ab43a3107f32e06e822" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.DoubleArray,%20kotlin.Function2((kotlin.Double,%20,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.DoubleArray,%20kotlin.Function2((kotlin.Double,%20,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="b2301cc5b5b314eaa58d9ee71dd9a9e964db0dc4" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.FloatArray,%20kotlin.Function2((kotlin.Float,%20,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.FloatArray,%20kotlin.Function2((kotlin.Float,%20,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="93bcc1eefdaf25d6723a4105199c0ed6bf596de2" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.IntArray,%20kotlin.Function2((kotlin.Int,%20,%20)))/comparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.IntArray,%20kotlin.Function2((kotlin.Int,%20,%20)))/comparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="e2c0f1af6fb67463fda31931682ae64c5c3cae23" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.LongArray,%20kotlin.Function2((kotlin.Long,%20,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.LongArray,%20kotlin.Function2((kotlin.Long,%20,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="227678b50ff9b8109437a8bbff4850e7049d5b30" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.ShortArray,%20kotlin.Function2((kotlin.Short,%20,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort#kotlin.collections%24sort(kotlin.ShortArray,%20kotlin.Function2((kotlin.Short,%20,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="026d2b0c0155084b25c8a6103dc14e9f42617ceb" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort-with#kotlin.collections%24sortWith%28kotlin.Array%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort-with#kotlin.collections%24sortWith%28kotlin.Array%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="af92791ea6ee6d6d22da0220657548b203875847" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;../../kotlin.collections/sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、配列をインプレースでソートします。</target>
        </trans-unit>
        <trans-unit id="6ceaa28ff8b5e20a64c1dd76210809e53340579a" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;sort#kotlin.collections%24sort%28kotlin.Array%28%28kotlin.collections.sort.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.sort.T%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort#kotlin.collections%24sort%28kotlin.Array%28%28kotlin.collections.sort.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.sort.T%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="dbb39b6e7209d703010d1dea803d9e9f184dfb3a" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;sort#kotlin.collections%24sort%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort#kotlin.collections%24sort%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="e363a91bc377e2dc1cd26c0f020a22cd2d9e7d60" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;sort#kotlin.collections%24sort(kotlin.Array((kotlin.collections.sort.T)),%20kotlin.Function2((kotlin.collections.sort.T,%20,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort#kotlin.collections%24sort(kotlin.Array((kotlin.collections.sort.T)),%20kotlin.Function2((kotlin.collections.sort.T,%20,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="70a950e4b0a885649ef8eb42fd69f7d9fccd7744" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;sort#kotlin.collections%24sort(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function.</source>
          <target state="translated">指定された&lt;a href=&quot;sort#kotlin.collections%24sort(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20kotlin.Int)))/comparison&quot;&gt;比較&lt;/a&gt;関数で指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="0fa5aed9839230cbb9bbcaa97445de61b613d5ee" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;sort-with#kotlin.collections%24sortWith%28kotlin.Array%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-with#kotlin.collections%24sortWith%28kotlin.Array%28%28kotlin.collections.sortWith.T%29%29%2C+java.util.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="ae101b411aaa730dbbdac995beae34b884882ebe" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;sort-with#kotlin.collections%24sortWith%28kotlin.Array%28%28kotlin.collections.sortWith.T%29%29%2C+kotlin.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-with#kotlin.collections%24sortWith%28kotlin.Array%28%28kotlin.collections.sortWith.T%29%29%2C+kotlin.Comparator%28%28kotlin.collections.sortWith.T%29%29%29%2Fcomparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、配列をインプレースで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="e9bb0004209ee2991798c36960e91ab537d041fe" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20java.util.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、配列をインプレースでソートします。</target>
        </trans-unit>
        <trans-unit id="1bbc6b3dbd2ee856625f928ed05caaadf58b1098" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place according to the order specified by the given &lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20kotlin.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;sort-with#kotlin.collections%24sortWith(kotlin.Array((kotlin.collections.sortWith.T)),%20kotlin.Comparator((kotlin.collections.sortWith.T)))/comparator&quot;&gt;コンパレータで&lt;/a&gt;指定された順序に従って、配列をインプレースでソートします。</target>
        </trans-unit>
        <trans-unit id="4770f48b5aef319d4b83ff34a0f71504fb9289b9" translate="yes" xml:space="preserve">
          <source>Sorts the array in-place.</source>
          <target state="translated">配列をその場でソートします。</target>
        </trans-unit>
        <trans-unit id="7ca4493ee7745c260d2545e5a7bcb290392c92d7" translate="yes" xml:space="preserve">
          <source>Source and binary compatibility may have different modes for the same component, e.g. the source language can reach full stability before the binary format stabilizes, or vice versa.</source>
          <target state="translated">ソースとバイナリの互換性は、同じコンポーネントに対して異なるモードを持つことがあります。例えば、ソース言語はバイナリ形式が安定する前に完全な安定性に達することができますし、その逆もあります。</target>
        </trans-unit>
        <trans-unit id="2dcfc2bd4a05ff58d81210efcb67bf27a9d1018d" translate="yes" xml:space="preserve">
          <source>Source code organization</source>
          <target state="translated">ソースコードの組織</target>
        </trans-unit>
        <trans-unit id="91b779a28949d8daf60f28816366c445cff3b975" translate="yes" xml:space="preserve">
          <source>Source file names</source>
          <target state="translated">ソースファイル名</target>
        </trans-unit>
        <trans-unit id="b8b646a7bd4b1ccfe7716e24991769415bb7ad29" translate="yes" xml:space="preserve">
          <source>Source file organization</source>
          <target state="translated">ソースファイルの構成</target>
        </trans-unit>
        <trans-unit id="ba5b3110bc5e4b2e8ea36f406acb0d11147c336c" translate="yes" xml:space="preserve">
          <source>Source management</source>
          <target state="translated">ソース管理</target>
        </trans-unit>
        <trans-unit id="83330f3a77279d034f4be00739a614f19c8cd41b" translate="yes" xml:space="preserve">
          <source>Source management in the &lt;code&gt;kotlin.platform.native&lt;/code&gt; plugin is uniform with other Kotlin plugins and is based on source sets. A source set is a group of Kotlin/Native source which may contain both common and platform-specific code. The plugin provides a top-level script block &lt;code&gt;sourceSets&lt;/code&gt; allowing you to configure source sets. Also it creates the default source sets &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; (for production and test code respectively).</source>
          <target state="translated">&lt;code&gt;kotlin.platform.native&lt;/code&gt; プラグインのソース管理は、他のKotlinプラグインと同じであり、ソースセットに基づいています。ソースセットは、一般的なコードとプラットフォーム固有のコードの両方を含むKotlin / Nativeソースのグループです。プラグインは、ソースセットを構成できるトップレベルのスクリプトブロック &lt;code&gt;sourceSets&lt;/code&gt; を提供します。また、デフォルトのソースセット &lt;code&gt;main&lt;/code&gt; と &lt;code&gt;test&lt;/code&gt; を作成します（それぞれ本番コードとテストコード用）。</target>
        </trans-unit>
        <trans-unit id="708a466fe6dad98c570f231d1548d606e08ba67c" translate="yes" xml:space="preserve">
          <source>Source sets can now be shared between an arbitrary subset of platforms (for example, in a module that targets JS, Android and iOS, you can have a source set that is shared only between Android and iOS).</source>
          <target state="translated">ソースセットをプラットフォームの任意のサブセット間で共有できるようになりました(例えば、JS、Android、iOSを対象としたモジュールでは、AndroidとiOSの間でのみ共有されるソースセットを持つことができます)。</target>
        </trans-unit>
        <trans-unit id="2feb63b3ff19c42a8edc6ffc039220ef18a5c33f" translate="yes" xml:space="preserve">
          <source>Source: source-incompatible change stops code that used to compile fine (without errors or warnings) from compiling anymore</source>
          <target state="translated">ソース:ソース互換性のない変更により、(エラーや警告なしで)正常にコンパイルされていたコードのコンパイルを停止します。</target>
        </trans-unit>
        <trans-unit id="44f1fc4c183f95acabbc53da2abac4d4f1206e1e" translate="yes" xml:space="preserve">
          <source>Special Cases:</source>
          <target state="translated">特別なケース。</target>
        </trans-unit>
        <trans-unit id="3e47d59ad303a035e3cd65578d432eefaa1b80ed" translate="yes" xml:space="preserve">
          <source>Special Identifiers</source>
          <target state="translated">特殊な識別子</target>
        </trans-unit>
        <trans-unit id="da9712bd56acfa78d3913a233d114cc9c2158cd7" translate="yes" xml:space="preserve">
          <source>Special case:</source>
          <target state="translated">特殊なケース。</target>
        </trans-unit>
        <trans-unit id="56064f3962c04c365c47471ff7513622d3ab0964" translate="yes" xml:space="preserve">
          <source>Special cases:</source>
          <target state="translated">特殊なケース</target>
        </trans-unit>
        <trans-unit id="c50a4829b036375e75f919f98b4f3fb6147ea678" translate="yes" xml:space="preserve">
          <source>Special cases: - &lt;code&gt;acos(x)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;, when &lt;code&gt;abs(x) &amp;gt; 1&lt;/code&gt; or x is &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">特別な場合： - &lt;code&gt;acos(x)&lt;/code&gt; で &lt;code&gt;NaN&lt;/code&gt; 、 &lt;code&gt;abs(x) &amp;gt; 1&lt;/code&gt; またはxが &lt;code&gt;NaN&lt;/code&gt; の</target>
        </trans-unit>
        <trans-unit id="87ab084bbfabe196612e1b63be02ed62abd6f7a4" translate="yes" xml:space="preserve">
          <source>Special cases: - &lt;code&gt;asin(x)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;, when &lt;code&gt;abs(x) &amp;gt; 1&lt;/code&gt; or x is &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">特別な場合： - &lt;code&gt;asin(x)&lt;/code&gt; ある &lt;code&gt;NaN&lt;/code&gt; の場合、 &lt;code&gt;abs(x) &amp;gt; 1&lt;/code&gt; またはxが &lt;code&gt;NaN&lt;/code&gt; の</target>
        </trans-unit>
        <trans-unit id="80224f054ccac92a6dba14551f00788e44fb6cea" translate="yes" xml:space="preserve">
          <source>Special cases: - &lt;code&gt;x.IEEErem(y)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;, when &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;+Inf|-Inf&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; is zero. - &lt;code&gt;x.IEEErem(y) == x&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; is finite and &lt;code&gt;y&lt;/code&gt; is infinite.</source>
          <target state="translated">特殊なケース： &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;NaN&lt;/code&gt; または &lt;code&gt;y&lt;/code&gt; が &lt;code&gt;NaN&lt;/code&gt; または &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;+Inf|-Inf&lt;/code&gt; または &lt;code&gt;y&lt;/code&gt; がゼロの場合、 &lt;code&gt;x.IEEErem(y)&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; です。- &lt;code&gt;x.IEEErem(y) == x&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; は有限であり、 &lt;code&gt;y&lt;/code&gt; が無限大です。</target>
        </trans-unit>
        <trans-unit id="396f015dcc0a4c9a33dfce58b73cb0338669c047" translate="yes" xml:space="preserve">
          <source>Specialized classes</source>
          <target state="translated">専門クラス</target>
        </trans-unit>
        <trans-unit id="80214f6fe7568d1fe2eee4a6a25be91492189547" translate="yes" xml:space="preserve">
          <source>Specific return type. The return type moves away from the actual data that we need and instead returns a new type &lt;code&gt;Promise&lt;/code&gt; which has to be introspected.</source>
          <target state="translated">特定の戻り値の型。戻り値の型は、必要な実際のデータから離れ、代わりに、内省する必要がある新しい型の &lt;code&gt;Promise&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="10be766e1422f005154bcf107bfdb65683d40144" translate="yes" xml:space="preserve">
          <source>Specifies a code fragment that can be used to replace a deprecated function, property or class. Tools such as IDEs can automatically apply the replacements specified through this annotation.</source>
          <target state="translated">非推奨の関数、プロパティ、またはクラスを置き換えるために使用できるコード フラグメントを指定します。IDE などのツールは、このアノテーションで指定された置換を自動的に適用することができます。</target>
        </trans-unit>
        <trans-unit id="f6bde6daa244f6b004cb3386a82fc9dfe647f4b6" translate="yes" xml:space="preserve">
          <source>Specifies how a &lt;a href=&quot;-lazy/index&quot;&gt;Lazy&lt;/a&gt; instance synchronizes initialization among multiple threads.</source>
          <target state="translated">&lt;a href=&quot;-lazy/index&quot;&gt;Lazy&lt;/a&gt;インスタンスが複数のスレッド間で初期化を同期する方法を指定します。</target>
        </trans-unit>
        <trans-unit id="7a34891c3f008a377113c6728bb426ade078566a" translate="yes" xml:space="preserve">
          <source>Specifies how a &lt;a href=&quot;../-lazy/index&quot;&gt;Lazy&lt;/a&gt; instance synchronizes initialization among multiple threads.</source>
          <target state="translated">&lt;a href=&quot;../-lazy/index&quot;&gt;Lazy&lt;/a&gt;インスタンスが複数のスレッド間で初期化を同期する方法を指定します。</target>
        </trans-unit>
        <trans-unit id="c4f0b89f9b2bcd589a457d848fb7af8fa36d078a" translate="yes" xml:space="preserve">
          <source>Specifies how many times a function invokes its function parameter in place.</source>
          <target state="translated">関数がその関数のパラメータを呼び出す回数を指定します。</target>
        </trans-unit>
        <trans-unit id="e23535d6faf71a1a72da5d8b0c47cb4ff5c68bd4" translate="yes" xml:space="preserve">
          <source>Specifies how the deprecated element usages are reported in code. See the &lt;a href=&quot;../-deprecation-level/index#kotlin.DeprecationLevel&quot;&gt;DeprecationLevel&lt;/a&gt; enum for the possible values.</source>
          <target state="translated">廃止された要素の使用状況がコードで報告される方法を指定します。可能な値については、&lt;a href=&quot;../-deprecation-level/index#kotlin.DeprecationLevel&quot;&gt;DeprecationLevel&lt;/a&gt; enumを参照してください。</target>
        </trans-unit>
        <trans-unit id="1273973520fb373ff0923e2955fc0a8aa51d89ca" translate="yes" xml:space="preserve">
          <source>Specifies that a JVM default method should be generated for non-abstract Kotlin interface member.</source>
          <target state="translated">抽象化されていないKotlinインターフェースのメンバーに対して、JVMのデフォルトメソッドを生成することを指定します。</target>
        </trans-unit>
        <trans-unit id="1b608a06a3ef3e2f1977895180f9d7cd6dab326f" translate="yes" xml:space="preserve">
          <source>Specifies that a warning should be reported on incorrect usages of this experimental API.</source>
          <target state="translated">この実験的 API の誤った使用法について警告を報告することを指定します。</target>
        </trans-unit>
        <trans-unit id="9ad2d2ca6b5a6cc26f2cb4f5defb3fa422218068" translate="yes" xml:space="preserve">
          <source>Specifies that an additional static method needs to be generated from this element if it's a function. If this element is a property, additional static getter/setter methods should be generated.</source>
          <target state="translated">この要素が関数の場合、追加の静的メソッドをこの要素から生成する必要があることを指定します。この要素がプロパティの場合、追加の静的ゲッター/セッターメソッドを生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="41dca1654db714e11bbcbe786e5e6118d5a8481b" translate="yes" xml:space="preserve">
          <source>Specifies that an error should be reported on incorrect usages of this experimental API.</source>
          <target state="translated">この実験的 API の誤った使用法についてエラーを報告することを指定します。</target>
        </trans-unit>
        <trans-unit id="b8fb6a1c5d45c4db1467991d5c234e6ab817a1e3" translate="yes" xml:space="preserve">
          <source>Specifies that the function parameter &lt;a href=&quot;calls-in-place#kotlin.contracts.ContractBuilder%24callsInPlace%28kotlin.Function%28%28kotlin.contracts.ContractBuilder.callsInPlace.R%29%29%2C+kotlin.contracts.InvocationKind%29%2Flambda&quot;&gt;lambda&lt;/a&gt; is invoked in place.</source>
          <target state="translated">関数パラメーター&lt;a href=&quot;calls-in-place#kotlin.contracts.ContractBuilder%24callsInPlace%28kotlin.Function%28%28kotlin.contracts.ContractBuilder.callsInPlace.R%29%29%2C+kotlin.contracts.InvocationKind%29%2Flambda&quot;&gt;lambda&lt;/a&gt;が適切に呼び出されることを指定します。</target>
        </trans-unit>
        <trans-unit id="ddc7e85b467ba745554b9fbe336e7c79ad8bfb02" translate="yes" xml:space="preserve">
          <source>Specifies that the function parameter &lt;a href=&quot;calls-in-place#kotlin.contracts.ContractBuilder%24callsInPlace(kotlin.Function((kotlin.contracts.ContractBuilder.callsInPlace.R)),%20kotlin.contracts.InvocationKind)/lambda&quot;&gt;lambda&lt;/a&gt; is invoked in place.</source>
          <target state="translated">関数パラメーター&lt;a href=&quot;calls-in-place#kotlin.contracts.ContractBuilder%24callsInPlace(kotlin.Function((kotlin.contracts.ContractBuilder.callsInPlace.R)),%20kotlin.contracts.InvocationKind)/lambda&quot;&gt;lambda&lt;/a&gt;がインプレースで呼び出されることを指定します。</target>
        </trans-unit>
        <trans-unit id="9dbed9849f2069fc0d07922505e1643863d85c42" translate="yes" xml:space="preserve">
          <source>Specifies that this effect, when observed, guarantees &lt;a href=&quot;implies#kotlin.contracts.SimpleEffect%24implies%28kotlin.Boolean%29%2FbooleanExpression&quot;&gt;booleanExpression&lt;/a&gt; to be true.</source>
          <target state="translated">この効果が観察されたときに、&lt;a href=&quot;implies#kotlin.contracts.SimpleEffect%24implies%28kotlin.Boolean%29%2FbooleanExpression&quot;&gt;booleanExpression&lt;/a&gt;がtrue であることを保証することを指定します。</target>
        </trans-unit>
        <trans-unit id="0f0531ff91395c01803a017387912d23059522ce" translate="yes" xml:space="preserve">
          <source>Specifies that this effect, when observed, guarantees &lt;a href=&quot;implies#kotlin.contracts.SimpleEffect%24implies(kotlin.Boolean)/booleanExpression&quot;&gt;booleanExpression&lt;/a&gt; to be true.</source>
          <target state="translated">この効果が観察されたときに、&lt;a href=&quot;implies#kotlin.contracts.SimpleEffect%24implies(kotlin.Boolean)/booleanExpression&quot;&gt;booleanExpression&lt;/a&gt;がtrueであることを保証することを指定します。</target>
        </trans-unit>
        <trans-unit id="d54eb0bc950c7ef72bd2aa203d75cecf873009a2" translate="yes" xml:space="preserve">
          <source>Specifies the author of the element being documented.</source>
          <target state="translated">文書化する要素の作成者を指定します。</target>
        </trans-unit>
        <trans-unit id="7439a2699ea30bac21819e499a0c348bf4db5a53" translate="yes" xml:space="preserve">
          <source>Specifies the contract of a function.</source>
          <target state="translated">関数の契約を指定します。</target>
        </trans-unit>
        <trans-unit id="668aabdaa85311d5948645d77876f75a16affd74" translate="yes" xml:space="preserve">
          <source>Specifies the first version of Kotlin where a declaration has appeared. Using the declaration and specifying an older API version (via the &lt;code&gt;-api-version&lt;/code&gt; command line option) will result in an error.</source>
          <target state="translated">宣言が表示されたKotlinの最初のバージョンを指定します。宣言を使用し、（ &lt;code&gt;-api-version&lt;/code&gt; コマンドラインオプションを介して）古いAPIバージョンを指定すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="2e19852d4c7f63b915b4f0748c65b97fb769383f" translate="yes" xml:space="preserve">
          <source>Specifies the name for the Java class or method which is generated from this element.</source>
          <target state="translated">この要素から生成されるJavaクラスまたはメソッドの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="a687435bfccbdd96f3fa9d60bae94e072182829e" translate="yes" xml:space="preserve">
          <source>Specifies the version of the software in which the element being documented was introduced.</source>
          <target state="translated">ドキュメント化された要素が導入されたソフトウェアのバージョンを指定します。</target>
        </trans-unit>
        <trans-unit id="6a2ab35cdf92e0eb70a7b68a20b9148e819131c6" translate="yes" xml:space="preserve">
          <source>Specify the minimum target version for the Pod library.</source>
          <target state="translated">Podライブラリの最小ターゲットバージョンを指定します。</target>
        </trans-unit>
        <trans-unit id="2ecfae74b60c500bf98eff24ffe25a09c3d987a3" translate="yes" xml:space="preserve">
          <source>Specifying compiler options</source>
          <target state="translated">コンパイラオプションの指定</target>
        </trans-unit>
        <trans-unit id="b480fdbc738e688b220525f44187624b8dee5660" translate="yes" xml:space="preserve">
          <source>Specifying the type explicitly</source>
          <target state="translated">タイプを明示的に指定する</target>
        </trans-unit>
        <trans-unit id="746ebe7b30c04844a0a6acb84ceeeab7bfb3222b" translate="yes" xml:space="preserve">
          <source>Splits the &lt;a href=&quot;split#kotlin.text.Regex%24split%28kotlin.CharSequence%2C+kotlin.Int%29%2Finput&quot;&gt;input&lt;/a&gt; CharSequence around matches of this regular expression.</source>
          <target state="translated">&lt;a href=&quot;split#kotlin.text.Regex%24split%28kotlin.CharSequence%2C+kotlin.Int%29%2Finput&quot;&gt;入力された&lt;/a&gt; CharSequenceをこの正規表現の一致の周りで分割します。</target>
        </trans-unit>
        <trans-unit id="08699f935afbcbe3d27cfb1a9658ffde1d8c628f" translate="yes" xml:space="preserve">
          <source>Splits the &lt;a href=&quot;split#kotlin.text.Regex%24split(kotlin.CharSequence,%20kotlin.Int)/input&quot;&gt;input&lt;/a&gt; CharSequence around matches of this regular expression.</source>
          <target state="translated">この正規表現の一致を中心に&lt;a href=&quot;split#kotlin.text.Regex%24split(kotlin.CharSequence,%20kotlin.Int)/input&quot;&gt;入力&lt;/a&gt;CharSequenceを分割します。</target>
        </trans-unit>
        <trans-unit id="889fa2d0788d1531abe076f806167d469446a8f8" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.Array%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.Array%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.Array%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.Array%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="f8c682ed4a61277f6e6fef2ed839395919a64a6f" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="6057dd4ee229b6bb485f8071e494d337b4c9c199" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="36e78b5dbb516213087cd4a2cc82f8f5c89f375e" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="188c266d70ce2d849ff0de3b5932cdf9da587e53" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="2ff97334e8cd4ed34e1a92b3b104f2b5bdaf4fbb" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="33204572ae494c8da3e3225aed2c1e38da7a21ec" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="79b98ebd0576ac1d5b9a0ddfe5682da001dd4f39" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="d84eb1d37eef2994f2317dd6d168249568c0d6e4" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="469d1aaa39f881891fbb5aabfcc01cc364cb2742" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.Array((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.Array((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.Array((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.Array((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="3dd8b830c86a4857797960f2d7d66dfaa7d2c971" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.BooleanArray,%20kotlin.Function1((kotlin.Boolean,%20)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.BooleanArray,%20kotlin.Function1((kotlin.Boolean,%20)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.BooleanArray,%20kotlin.Function1((kotlin.Boolean,%20)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.BooleanArray,%20kotlin.Function1((kotlin.Boolean,%20)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="7c42fc7228361c2371d6a5ecd46c632501220f40" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.ByteArray,%20kotlin.Function1((kotlin.Byte,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.ByteArray,%20kotlin.Function1((kotlin.Byte,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.ByteArray,%20kotlin.Function1((kotlin.Byte,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.ByteArray,%20kotlin.Function1((kotlin.Byte,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="1a5ec76d2caa29fdf8ddb75556d9d7d3e8a36bca" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.CharArray,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.CharArray,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.CharArray,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.CharArray,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="ea7b25ae7c744cee7e75908d2f8155b496c3c347" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.DoubleArray,%20kotlin.Function1((kotlin.Double,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.DoubleArray,%20kotlin.Function1((kotlin.Double,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.DoubleArray,%20kotlin.Function1((kotlin.Double,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.DoubleArray,%20kotlin.Function1((kotlin.Double,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="c271b78e2206b0f220d21e1f8e7eb71f71ea50eb" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.FloatArray,%20kotlin.Function1((kotlin.Float,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.FloatArray,%20kotlin.Function1((kotlin.Float,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.FloatArray,%20kotlin.Function1((kotlin.Float,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.FloatArray,%20kotlin.Function1((kotlin.Float,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="43df9d3a9757b261b71c3d273263779c79744f23" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.IntArray,%20kotlin.Function1((kotlin.Int,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.IntArray,%20kotlin.Function1((kotlin.Int,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.IntArray,%20kotlin.Function1((kotlin.Int,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.IntArray,%20kotlin.Function1((kotlin.Int,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="f3bc0c194fa72da2f88cd58e958441fa8e555a9c" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.LongArray,%20kotlin.Function1((kotlin.Long,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.LongArray,%20kotlin.Function1((kotlin.Long,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.LongArray,%20kotlin.Function1((kotlin.Long,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.LongArray,%20kotlin.Function1((kotlin.Long,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="67234f2812035a75454135013d3423c4b4ce51a4" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.ShortArray,%20kotlin.Function1((kotlin.Short,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.ShortArray,%20kotlin.Function1((kotlin.Short,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.ShortArray,%20kotlin.Function1((kotlin.Short,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.ShortArray,%20kotlin.Function1((kotlin.Short,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="b8083df548af87e3622d6abccfa8e78274a64c6f" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.collections%24partition%28kotlin.Array%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.collections%24partition%28kotlin.Array%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;partition#kotlin.collections%24partition%28kotlin.Array%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;partition#kotlin.collections%24partition%28kotlin.Array%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="c6a7570726471ca0e60a15f1b62c162b494e7116" translate="yes" xml:space="preserve">
          <source>Splits the original array into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.collections%24partition(kotlin.Array((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.collections%24partition(kotlin.Array((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の配列をリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;partition#kotlin.collections%24partition(kotlin.Array((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;partition#kotlin.collections%24partition(kotlin.Array((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="d546386d2e87332d743bd4386df842ed3abe71a8" translate="yes" xml:space="preserve">
          <source>Splits the original char sequence into pair of char sequences, where &lt;em&gt;first&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のcharシーケンスを2つのcharシーケンスに分割します。&lt;em&gt;最初の&lt;/em&gt; charシーケンスには、&lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; となった文字が含まれ、&lt;em&gt;2番目の&lt;/em&gt; charシーケンスには、&lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; となった文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="f7187f16309f8fa5e58c1ffc82da217e3b650f8b" translate="yes" xml:space="preserve">
          <source>Splits the original char sequence into pair of char sequences, where &lt;em&gt;first&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のcharシーケンスをcharシーケンスのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;charシーケンスには、&lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した文字が含まれ、&lt;em&gt;2番目の&lt;/em&gt;charシーケンスには、&lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="3f2108aa3476d1886c05784b517af0f46f65dcce" translate="yes" xml:space="preserve">
          <source>Splits the original char sequence into pair of char sequences, where &lt;em&gt;first&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;../partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;../partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のcharシーケンスを2つのcharシーケンスに分割します。&lt;em&gt;最初の&lt;/em&gt; charシーケンスには、&lt;a href=&quot;../partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; となった文字が含まれ、&lt;em&gt;2番目の&lt;/em&gt; charシーケンスには、&lt;a href=&quot;../partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; となった文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="c0b0c9a3bd3b0ba50d4e7164b2759eee41ceeba2" translate="yes" xml:space="preserve">
          <source>Splits the original char sequence into pair of char sequences, where &lt;em&gt;first&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;../partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;../partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のcharシーケンスをcharシーケンスのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;charシーケンスには、&lt;a href=&quot;../partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した文字が含まれ、&lt;em&gt;2番目の&lt;/em&gt;charシーケンスには、&lt;a href=&quot;../partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="98cb77a4188cc584dfebb3134ca9b48a2ac72713" translate="yes" xml:space="preserve">
          <source>Splits the original char sequence into pair of char sequences, where &lt;em&gt;first&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のcharシーケンスを2つのcharシーケンスに分割します。&lt;em&gt;最初の&lt;/em&gt; charシーケンスには、&lt;a href=&quot;partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; となった文字が含まれ、&lt;em&gt;2番目の&lt;/em&gt; charシーケンスには、&lt;a href=&quot;partition#kotlin.text%24partition%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; となった文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="445325f0067f6e88b5adebcf3569f7fceed68246" translate="yes" xml:space="preserve">
          <source>Splits the original char sequence into pair of char sequences, where &lt;em&gt;first&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; char sequence contains characters for which &lt;a href=&quot;partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のcharシーケンスをcharシーケンスのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;charシーケンスには、&lt;a href=&quot;partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した文字が含まれ、&lt;em&gt;2番目の&lt;/em&gt;charシーケンスには、&lt;a href=&quot;partition#kotlin.text%24partition(kotlin.CharSequence,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="abff32a9b2f4672bf7a49c903911bd3c805f10b9" translate="yes" xml:space="preserve">
          <source>Splits the original collection into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のコレクションをリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="5e94fdcc1e6045991ea6e6a29e69f93e1dc2c8bc" translate="yes" xml:space="preserve">
          <source>Splits the original collection into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のコレクションをリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../../kotlin.collections/partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="51351b50d1163f62c3cb23f2fcefe72a33c2e006" translate="yes" xml:space="preserve">
          <source>Splits the original collection into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のコレクションをリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="185ca747627497f29774081a230018ffb2d10e8a" translate="yes" xml:space="preserve">
          <source>Splits the original collection into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のコレクションをリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="a6229b291af2d23e4a0f09e0825f18914ab656ef" translate="yes" xml:space="preserve">
          <source>Splits the original collection into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のコレクションをリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;partition#kotlin.collections%24partition%28kotlin.collections.Iterable%28%28kotlin.collections.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="b2fe8eb5efcb840e9f9b406f4e77592d61ba7a99" translate="yes" xml:space="preserve">
          <source>Splits the original collection into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のコレクションをリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;partition#kotlin.collections%24partition(kotlin.collections.Iterable((kotlin.collections.partition.T)),%20kotlin.Function1((kotlin.collections.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="eff78228133d9c510fcf60618ab7fbbe96384888" translate="yes" xml:space="preserve">
          <source>Splits the original sequence into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../partition#kotlin.sequences%24partition%28kotlin.sequences.Sequence%28%28kotlin.sequences.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../partition#kotlin.sequences%24partition%28kotlin.sequences.Sequence%28%28kotlin.sequences.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のシーケンスをリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;../partition#kotlin.sequences%24partition%28kotlin.sequences.Sequence%28%28kotlin.sequences.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;../partition#kotlin.sequences%24partition%28kotlin.sequences.Sequence%28%28kotlin.sequences.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="30f459632518f3e0c1251d867943b3f28b0cb50c" translate="yes" xml:space="preserve">
          <source>Splits the original sequence into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;../partition#kotlin.sequences%24partition(kotlin.sequences.Sequence((kotlin.sequences.partition.T)),%20kotlin.Function1((kotlin.sequences.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;../partition#kotlin.sequences%24partition(kotlin.sequences.Sequence((kotlin.sequences.partition.T)),%20kotlin.Function1((kotlin.sequences.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のシーケンスをリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;../partition#kotlin.sequences%24partition(kotlin.sequences.Sequence((kotlin.sequences.partition.T)),%20kotlin.Function1((kotlin.sequences.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;../partition#kotlin.sequences%24partition(kotlin.sequences.Sequence((kotlin.sequences.partition.T)),%20kotlin.Function1((kotlin.sequences.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="144bf3c5a2bc721c001b10a1ad55b094fadbc884" translate="yes" xml:space="preserve">
          <source>Splits the original sequence into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.sequences%24partition%28kotlin.sequences.Sequence%28%28kotlin.sequences.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.sequences%24partition%28kotlin.sequences.Sequence%28%28kotlin.sequences.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のシーケンスをリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには&lt;a href=&quot;partition#kotlin.sequences%24partition%28kotlin.sequences.Sequence%28%28kotlin.sequences.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには&lt;a href=&quot;partition#kotlin.sequences%24partition%28kotlin.sequences.Sequence%28%28kotlin.sequences.partition.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.partition.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="02ddac42f8baba3808675a7c681796c6c252ed55" translate="yes" xml:space="preserve">
          <source>Splits the original sequence into pair of lists, where &lt;em&gt;first&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.sequences%24partition(kotlin.sequences.Sequence((kotlin.sequences.partition.T)),%20kotlin.Function1((kotlin.sequences.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; list contains elements for which &lt;a href=&quot;partition#kotlin.sequences%24partition(kotlin.sequences.Sequence((kotlin.sequences.partition.T)),%20kotlin.Function1((kotlin.sequences.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元のシーケンスをリストのペアに分割します。&lt;em&gt;最初の&lt;/em&gt;リストには、&lt;a href=&quot;partition#kotlin.sequences%24partition(kotlin.sequences.Sequence((kotlin.sequences.partition.T)),%20kotlin.Function1((kotlin.sequences.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した要素が含まれ、&lt;em&gt;2番目の&lt;/em&gt;リストには、&lt;a href=&quot;partition#kotlin.sequences%24partition(kotlin.sequences.Sequence((kotlin.sequences.partition.T)),%20kotlin.Function1((kotlin.sequences.partition.T,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="fc5ba51f56d3586a3ac3ee5a06dad5c2ce9a8a65" translate="yes" xml:space="preserve">
          <source>Splits the original string into pair of strings, where &lt;em&gt;first&lt;/em&gt; string contains characters for which &lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition%28kotlin.String%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; string contains characters for which &lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition%28kotlin.String%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の文字列を2つの文字列に分割します。&lt;em&gt;最初の&lt;/em&gt;文字列には、&lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition%28kotlin.String%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; になった文字が含まれ、&lt;em&gt;2番目の&lt;/em&gt;文字列には、&lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition%28kotlin.String%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; になった文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="4cebb621a8e6a5ace107fced6f73f50ce58b471c" translate="yes" xml:space="preserve">
          <source>Splits the original string into pair of strings, where &lt;em&gt;first&lt;/em&gt; string contains characters for which &lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition(kotlin.String,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; string contains characters for which &lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition(kotlin.String,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の文字列を文字列のペアに分割します。&lt;em&gt;最初の&lt;/em&gt;文字列には、&lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition(kotlin.String,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した文字が含まれ、&lt;em&gt;2番目の&lt;/em&gt;文字列には、&lt;a href=&quot;../../kotlin.text/partition#kotlin.text%24partition(kotlin.String,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="46b23954fe998387aff666df8efc6520995fc7cc" translate="yes" xml:space="preserve">
          <source>Splits the original string into pair of strings, where &lt;em&gt;first&lt;/em&gt; string contains characters for which &lt;a href=&quot;partition#kotlin.text%24partition%28kotlin.String%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; string contains characters for which &lt;a href=&quot;partition#kotlin.text%24partition%28kotlin.String%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の文字列を2つの文字列に分割します。&lt;em&gt;最初の&lt;/em&gt;文字列には、&lt;a href=&quot;partition#kotlin.text%24partition%28kotlin.String%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; になった文字が含まれ、&lt;em&gt;2番目の&lt;/em&gt;文字列には、&lt;a href=&quot;partition#kotlin.text%24partition%28kotlin.String%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; になった文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="0493f5f5f586a61090cd626f293081c3b16b8368" translate="yes" xml:space="preserve">
          <source>Splits the original string into pair of strings, where &lt;em&gt;first&lt;/em&gt; string contains characters for which &lt;a href=&quot;partition#kotlin.text%24partition(kotlin.String,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;true&lt;/code&gt;, while &lt;em&gt;second&lt;/em&gt; string contains characters for which &lt;a href=&quot;partition#kotlin.text%24partition(kotlin.String,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;predicate&lt;/a&gt; yielded &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">元の文字列を文字列のペアに分割します。&lt;em&gt;最初の&lt;/em&gt;文字列には、&lt;a href=&quot;partition#kotlin.text%24partition(kotlin.String,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を生成した文字が含まれ、&lt;em&gt;2番目の&lt;/em&gt;文字列には、&lt;a href=&quot;partition#kotlin.text%24partition(kotlin.String,%20kotlin.Function1((kotlin.Char,%20kotlin.Boolean)))/predicate&quot;&gt;述語&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を生成した文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="a9a50e34ca1a18e2bc366dc8b4f692ad42af93fc" translate="yes" xml:space="preserve">
          <source>Splits this char sequence around matches of the given regular expression.</source>
          <target state="translated">この文字列を、指定された正規表現にマッチしたものを中心に分割します。</target>
        </trans-unit>
        <trans-unit id="9e611a3628d04640a979ef6c5b5e2ecc7f66cbfa" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a list of strings each not exceeding the given &lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えない文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="4a62958cc9533cc8f8aeb2cbb2ff8f917130ca17" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a list of strings each not exceeding the given &lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="ee551ba6b2c606bb6ab83b1a64bb7f625cc07a5b" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a list of strings each not exceeding the given &lt;a href=&quot;../chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;../chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えない文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="3939301f590bff32b3270f3f81dfb304f007d903" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a list of strings each not exceeding the given &lt;a href=&quot;../chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;../chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="eb121cc6174dd89d8c08cf61906842c082aba3c6" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a list of strings each not exceeding the given &lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えない文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="3f40eb698178eb6db4ff5ee7651a1bf0dca0fde5" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a list of strings each not exceeding the given &lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="264b34f24f1a06b392a80cbea51e94a0fdc3938d" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a sequence of strings each not exceeding the given &lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えない一連の文字列に分割します。</target>
        </trans-unit>
        <trans-unit id="e4cd050d753a79c2b581ae6b622710efaa7cae0e" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a sequence of strings each not exceeding the given &lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない文字列のシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="e6da35fa6eec6e876ca4586b221b0baab3b5636c" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a sequence of strings each not exceeding the given &lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えない一連の文字列に分割します。</target>
        </trans-unit>
        <trans-unit id="b08e8a3b3a3e0e3afabbec190106507b15fea7be" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a sequence of strings each not exceeding the given &lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない文字列のシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="a5ecdbe41629430b5e5cfb82fc1b4ad0586b6b35" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a sequence of strings each not exceeding the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えない一連の文字列に分割します。</target>
        </trans-unit>
        <trans-unit id="f903975a8a7c6bb4653c30ed3b1ea55d7b1381c9" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into a sequence of strings each not exceeding the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない文字列のシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="5f7147b8b3ec6b68d6bd51082e0faaca2998e51d" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないいくつかの文字シーケンスに分割し、指定された&lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="91d9f61349fd0e901bdb4c6d4509643f6e4fa84e" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/size&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/transform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない複数のcharシーケンスに分割し、指定された&lt;a href=&quot;../../kotlin.text/chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/transform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="63e385077425eafb77e9a40a51539c2d80eb2f51" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないいくつかの文字シーケンスに分割し、指定された&lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="83ba8fd85fa8d5392667a68b253699a701d55ed7" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/size&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/transform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない複数のcharシーケンスに分割し、指定された&lt;a href=&quot;../../kotlin.text/chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/transform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="581a009720af973c365e2ace4d33cf5076877aca" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;../chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;../chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないいくつかの文字シーケンスに分割し、指定された&lt;a href=&quot;../chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="9264227ba39c4b74ddc91913644e7a73ebfac8fd" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;../chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/size&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/transform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;../chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない複数のcharシーケンスに分割し、指定された&lt;a href=&quot;../chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/transform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="d717f98666285a1e90ad8965f8f7418dcc8ed232" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないいくつかの文字シーケンスに分割し、指定された&lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="6f3b39bc35b85296148b3daa02d1c0eb72d2df0a" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/size&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/transform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない複数のcharシーケンスに分割し、指定された&lt;a href=&quot;../chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/transform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="85e376173d9c9d8eeff5141b7586fa74005ee16a" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないいくつかの文字シーケンスに分割し、指定された&lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="6a7c745460198631737bdb1f1b73b1a7999f885d" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/size&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/transform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない複数のcharシーケンスに分割し、指定された&lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/transform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="99d50e657fbe43a3b68f5a6eb982003c115c6f08" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">この文字シーケンスを、それぞれ指定&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないいくつかの文字シーケンスに分割し、指定された&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="fa6778d5bcf32bfc8f1b73cc95e599f013de8a39" translate="yes" xml:space="preserve">
          <source>Splits this char sequence into several char sequences each not exceeding the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/size&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/transform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このcharシーケンスを、それぞれが指定&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えない複数のcharシーケンスに分割し、指定された&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/transform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="f66500e7f768a0de7bc52b6beeddc83d7cdc8834" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.</source>
          <target state="translated">この文字列を、以下のいずれかの文字列で区切られた行のリストに分割します。CRLF、LF、CR のいずれかで区切られた行のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="3d5a1c5b6b30c321992d76335fa3e703f787af61" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a list of strings around occurrences of the specified &lt;a href=&quot;../../kotlin.text/split#kotlin.text%24split%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、指定された&lt;a href=&quot;../../kotlin.text/split#kotlin.text%24split%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="dcd0e622134a8b9ff64d607832d645a9a49da056" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a list of strings around occurrences of the specified &lt;a href=&quot;../../kotlin.text/split#kotlin.text%24split(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、指定された&lt;a href=&quot;../../kotlin.text/split#kotlin.text%24split(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所の周りの文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="8197b9ef14d350d1f531e4c5e5be27c3d5429cd4" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a list of strings around occurrences of the specified &lt;a href=&quot;../split#kotlin.text%24split%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、指定された&lt;a href=&quot;../split#kotlin.text%24split%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="78d5d858554c887ccb8db6bfeabdafd042f64195" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a list of strings around occurrences of the specified &lt;a href=&quot;../split#kotlin.text%24split(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、指定された&lt;a href=&quot;../split#kotlin.text%24split(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所の周りの文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="5e5d0b62ab16eee4e98080c541c6045d782f0598" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a list of strings around occurrences of the specified &lt;a href=&quot;split#kotlin.text%24split%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、指定された&lt;a href=&quot;split#kotlin.text%24split%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="12d10ed5fb25d750ebed3fb28bbf6b83bd2c0019" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a list of strings around occurrences of the specified &lt;a href=&quot;split#kotlin.text%24split%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、指定された&lt;a href=&quot;split#kotlin.text%24split%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="4adc9dd856d39bd816f0f43340d177fe84299b7f" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a list of strings around occurrences of the specified &lt;a href=&quot;split#kotlin.text%24split(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、指定された&lt;a href=&quot;split#kotlin.text%24split(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所の周りの文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="c312ba4a46da215061d17d6069773fc40ab68aa8" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a list of strings around occurrences of the specified &lt;a href=&quot;split#kotlin.text%24split(kotlin.CharSequence,%20kotlin.CharArray,%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、指定された&lt;a href=&quot;split#kotlin.text%24split(kotlin.CharSequence,%20kotlin.CharArray,%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所の周りの文字列のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="3a6716d508015c660a59f20c19d214d94cfd85f3" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.</source>
          <target state="translated">この文字列を、以下のいずれかの文字列で区切られた行の列に分割します。CRLF、LF、CR のいずれかで区切られた行列に分割します。</target>
        </trans-unit>
        <trans-unit id="e3e94c6787d54178064018c52c37bc40d4047b92" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a sequence of strings around occurrences of the specified &lt;a href=&quot;../../kotlin.text/split-to-sequence#kotlin.text%24splitToSequence%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、指定された&lt;a href=&quot;../../kotlin.text/split-to-sequence#kotlin.text%24splitToSequence%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="453429c9f93911cb5ead26427cc8c66a8ee62d40" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a sequence of strings around occurrences of the specified &lt;a href=&quot;../../kotlin.text/split-to-sequence#kotlin.text%24splitToSequence(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、指定された&lt;a href=&quot;../../kotlin.text/split-to-sequence#kotlin.text%24splitToSequence(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="1dc6355bd5dcf88cb7012eadeab20169c9c6450f" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a sequence of strings around occurrences of the specified &lt;a href=&quot;../split-to-sequence#kotlin.text%24splitToSequence%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、指定された&lt;a href=&quot;../split-to-sequence#kotlin.text%24splitToSequence%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="6f287f7c9fff5b47a1ce26435fa2d9a57a16e1d1" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a sequence of strings around occurrences of the specified &lt;a href=&quot;../split-to-sequence#kotlin.text%24splitToSequence(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、指定された&lt;a href=&quot;../split-to-sequence#kotlin.text%24splitToSequence(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="2a3dd7ecd8e5aad7ae43ecd7e15b94ace9d83f6c" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a sequence of strings around occurrences of the specified &lt;a href=&quot;split-to-sequence#kotlin.text%24splitToSequence%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、指定された&lt;a href=&quot;split-to-sequence#kotlin.text%24splitToSequence%28kotlin.CharSequence%2C+kotlin.Array%28%28kotlin.String%29%29%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="7ffebadc04bba02e4e49a6327f15a6ca200c75ff" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a sequence of strings around occurrences of the specified &lt;a href=&quot;split-to-sequence#kotlin.text%24splitToSequence%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">この文字シーケンスを、指定された&lt;a href=&quot;split-to-sequence#kotlin.text%24splitToSequence%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Boolean%2C+kotlin.Int%29%2Fdelimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="9ba4325765fdea04698e46dd8e9c0ebc74bc7ee7" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a sequence of strings around occurrences of the specified &lt;a href=&quot;split-to-sequence#kotlin.text%24splitToSequence(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、指定された&lt;a href=&quot;split-to-sequence#kotlin.text%24splitToSequence(kotlin.CharSequence,%20kotlin.Array((kotlin.String)),%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="3aa6aa8a72ba98d64fe36c22d48b49b89739c6b7" translate="yes" xml:space="preserve">
          <source>Splits this char sequence to a sequence of strings around occurrences of the specified &lt;a href=&quot;split-to-sequence#kotlin.text%24splitToSequence(kotlin.CharSequence,%20kotlin.CharArray,%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;delimiters&lt;/a&gt;.</source>
          <target state="translated">このcharシーケンスを、指定された&lt;a href=&quot;split-to-sequence#kotlin.text%24splitToSequence(kotlin.CharSequence,%20kotlin.CharArray,%20kotlin.Boolean,%20kotlin.Int)/delimiters&quot;&gt;区切り文字の&lt;/a&gt;出現箇所を囲む文字列のシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="4894892135b3d855d1f0f6d3001b4e1d6e322c67" translate="yes" xml:space="preserve">
          <source>Splits this collection into a list of lists each not exceeding the given &lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このコレクションを、指定&lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないリストのリストに分割します。</target>
        </trans-unit>
        <trans-unit id="ae51951a1a9cf81795d473d5e3322f697bb4331c" translate="yes" xml:space="preserve">
          <source>Splits this collection into a list of lists each not exceeding the given &lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このコレクションを、それぞれが指定&lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えないリストのリストに分割します。</target>
        </trans-unit>
        <trans-unit id="8109cdc99c9d3ce75b0e6a735d1a16b951be7072" translate="yes" xml:space="preserve">
          <source>Splits this collection into a list of lists each not exceeding the given &lt;a href=&quot;../chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このコレクションを、指定&lt;a href=&quot;../chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないリストのリストに分割します。</target>
        </trans-unit>
        <trans-unit id="14504fa276ef002c991829771d14be5ffd317bcf" translate="yes" xml:space="preserve">
          <source>Splits this collection into a list of lists each not exceeding the given &lt;a href=&quot;../chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このコレクションを、それぞれが指定&lt;a href=&quot;../chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えないリストのリストに分割します。</target>
        </trans-unit>
        <trans-unit id="b0f2e0bbfd89fcd5462f6ead2b682ba787dadd8e" translate="yes" xml:space="preserve">
          <source>Splits this collection into a list of lists each not exceeding the given &lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このコレクションを、指定&lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないリストのリストに分割します。</target>
        </trans-unit>
        <trans-unit id="a66ba2c92e0165c7a28cec74608bbaf5da8f8f5e" translate="yes" xml:space="preserve">
          <source>Splits this collection into a list of lists each not exceeding the given &lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このコレクションを、それぞれが指定&lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えないリストのリストに分割します。</target>
        </trans-unit>
        <trans-unit id="e21d3492a25178c7b849a9e5acc322cb20b39aca" translate="yes" xml:space="preserve">
          <source>Splits this collection into several lists each not exceeding the given &lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このコレクションを、それぞれ指定&lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないいくつかのリストに分割し、指定された&lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="c35a9a72ee2593b0b0996aa9c2fa9215e3026959" translate="yes" xml:space="preserve">
          <source>Splits this collection into several lists each not exceeding the given &lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/size&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/transform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このコレクションをいくつかのリストに分割し、それぞれが指定&lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えないようにし、指定された&lt;a href=&quot;../../kotlin.collections/chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/transform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="a48428391f4651acfd24fee9fa33c87080c6e779" translate="yes" xml:space="preserve">
          <source>Splits this collection into several lists each not exceeding the given &lt;a href=&quot;../chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このコレクションを、それぞれ指定&lt;a href=&quot;../chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないいくつかのリストに分割し、指定された&lt;a href=&quot;../chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="0a62cec74d11e5ae4a829ee19a641fcfd3e4da18" translate="yes" xml:space="preserve">
          <source>Splits this collection into several lists each not exceeding the given &lt;a href=&quot;../chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/size&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/transform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このコレクションをいくつかのリストに分割し、それぞれが指定&lt;a href=&quot;../chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えないようにし、指定された&lt;a href=&quot;../chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/transform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="517737e782c5357ab242922fc5304b40e3826245" translate="yes" xml:space="preserve">
          <source>Splits this collection into several lists each not exceeding the given &lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このコレクションを、それぞれ指定&lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないいくつかのリストに分割し、指定された&lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="2221bd47b20e844a0f5a0c08acde759027264845" translate="yes" xml:space="preserve">
          <source>Splits this collection into several lists each not exceeding the given &lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/size&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/transform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このコレクションをいくつかのリストに分割し、それぞれが指定&lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えないようにし、指定された&lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/transform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="024d988a38905cd8d713b5b971dfe3778cfdc3d8" translate="yes" xml:space="preserve">
          <source>Splits this sequence into a sequence of lists each not exceeding the given &lt;a href=&quot;../chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このシーケンスを、それぞれが指定&lt;a href=&quot;../chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えない一連のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="89e66d42821d76b5c20d374af063183ac388f3e4" translate="yes" xml:space="preserve">
          <source>Splits this sequence into a sequence of lists each not exceeding the given &lt;a href=&quot;../chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このシーケンスを、それぞれが指定&lt;a href=&quot;../chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えないリストのシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="2782bc20294974e7a1e43c016491b6c91648db8f" translate="yes" xml:space="preserve">
          <source>Splits this sequence into a sequence of lists each not exceeding the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このシーケンスを、それぞれが指定&lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えない一連のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="99135cd7b03c2edcdaa34457cd79f869cfb58b45" translate="yes" xml:space="preserve">
          <source>Splits this sequence into a sequence of lists each not exceeding the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">このシーケンスを、それぞれが指定&lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int)/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えないリストのシーケンスに分割します。</target>
        </trans-unit>
        <trans-unit id="d437291eabeca701471089c6dfa0b2b88f511909" translate="yes" xml:space="preserve">
          <source>Splits this sequence into several lists each not exceeding the given &lt;a href=&quot;../chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このシーケンスを、それぞれが指定&lt;a href=&quot;../chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないいくつかのリストに分割し、指定された&lt;a href=&quot;../chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="f2435f94efc313c779ac2ced265ad21e693408c3" translate="yes" xml:space="preserve">
          <source>Splits this sequence into several lists each not exceeding the given &lt;a href=&quot;../chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.chunked.T)),%20kotlin.sequences.chunked.R)))/size&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;../chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.chunked.T)),%20kotlin.sequences.chunked.R)))/transform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このシーケンスをいくつかのリストに分割し、それぞれが指定&lt;a href=&quot;../chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.chunked.T)),%20kotlin.sequences.chunked.R)))/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えないようにし、指定された&lt;a href=&quot;../chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.chunked.T)),%20kotlin.sequences.chunked.R)))/transform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="42d99abb4dad1bd5f52d7374981881da327ee184" translate="yes" xml:space="preserve">
          <source>Splits this sequence into several lists each not exceeding the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このシーケンスを、それぞれが指定&lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズを超えないいくつかのリストに分割し、指定された&lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="68a4d3e554bce55c1ddcb2faa635fcae50b66ba6" translate="yes" xml:space="preserve">
          <source>Splits this sequence into several lists each not exceeding the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.chunked.T)),%20kotlin.sequences.chunked.R)))/size&quot;&gt;size&lt;/a&gt; and applies the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.chunked.T)),%20kotlin.sequences.chunked.R)))/transform&quot;&gt;transform&lt;/a&gt; function to an each.</source>
          <target state="translated">このシーケンスをいくつかのリストに分割し、それぞれが指定&lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.chunked.T)),%20kotlin.sequences.chunked.R)))/size&quot;&gt;さ&lt;/a&gt;れたサイズを超えないようにし、指定された&lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.chunked.T)),%20kotlin.sequences.chunked.R)))/transform&quot;&gt;変換&lt;/a&gt;関数をそれぞれに適用します。</target>
        </trans-unit>
        <trans-unit id="7c51d044b0775b9dff2cfa78b3da8cb8049bb2ff" translate="yes" xml:space="preserve">
          <source>Spring support</source>
          <target state="translated">スプリングサポート</target>
        </trans-unit>
        <trans-unit id="4d471041d7df92549d73db2c13c586ee2b0cec2e" translate="yes" xml:space="preserve">
          <source>Square brackets are translated to calls to &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; with appropriate numbers of arguments.</source>
          <target state="translated">角括弧は、適切な数の引数を &lt;code&gt;get&lt;/code&gt; および &lt;code&gt;set&lt;/code&gt; するための呼び出しに変換されます。</target>
        </trans-unit>
        <trans-unit id="760c3df67cfeafc7b66d5c5c9eecdb6431a5eaf6" translate="yes" xml:space="preserve">
          <source>Stability Levels Explained</source>
          <target state="translated">安定性レベルの説明</target>
        </trans-unit>
        <trans-unit id="00ffdccd32ed64d431bf831e7b8e2169d330f1f8" translate="yes" xml:space="preserve">
          <source>Stability of Different Components</source>
          <target state="translated">異なるコンポーネントの安定性</target>
        </trans-unit>
        <trans-unit id="335f562da0b6da5371be32abc5013ec933c6eaa9" translate="yes" xml:space="preserve">
          <source>Stability of Kotlin Components</source>
          <target state="translated">コトリン部品の安定性</target>
        </trans-unit>
        <trans-unit id="59370b6411d3426c49909870b95a752c0777385c" translate="yes" xml:space="preserve">
          <source>Stability of Subcomponents</source>
          <target state="translated">サブコンポーネントの安定性</target>
        </trans-unit>
        <trans-unit id="d96e5b2dd07c1733b2b013bd82922c22baade37d" translate="yes" xml:space="preserve">
          <source>Stable</source>
          <target state="translated">Stable</target>
        </trans-unit>
        <trans-unit id="d1536eaeef57c8fe7e38a044d153592707538ced" translate="yes" xml:space="preserve">
          <source>Stable releases with versions 1.2, 1.3, etc. are usually considered to be &lt;em&gt;feature releases&lt;/em&gt; bringing major changes in the language. Normally, we publish &lt;em&gt;incremental releases&lt;/em&gt;, numbered 1.2.20, 1.2.30, etc, in between feature releases.</source>
          <target state="translated">バージョン1.2、1.3などの安定したリリースは、通常、言語に大きな変更をもたらす&lt;em&gt;機能リリース&lt;/em&gt;と見なされます。通常、機能のリリースの間に、1.2.20、1.2.30などの番号が付けられた&lt;em&gt;増分リリース&lt;/em&gt;を発行し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c2b6f531a85effb53654c20ee953d94aca8bd93f" translate="yes" xml:space="preserve">
          <source>StableObjPtr</source>
          <target state="translated">StableObjPtr</target>
        </trans-unit>
        <trans-unit id="d5695f0dc6545fa97fef8f5d8d98f8ea9529cc21" translate="yes" xml:space="preserve">
          <source>StableRef</source>
          <target state="translated">StableRef</target>
        </trans-unit>
        <trans-unit id="cd6c8d56f6241b414217edc699eb83c63b345d74" translate="yes" xml:space="preserve">
          <source>Stack overflow</source>
          <target state="translated">スタックオーバーフロー</target>
        </trans-unit>
        <trans-unit id="ed0e3d47052276129876bad97c5d9695f1d4c1e7" translate="yes" xml:space="preserve">
          <source>Standard Data Classes</source>
          <target state="translated">標準データクラス</target>
        </trans-unit>
        <trans-unit id="9905d2303d697763e7c368a3fc398e3a629682f8" translate="yes" xml:space="preserve">
          <source>Standard Delegates</source>
          <target state="translated">標準代議員</target>
        </trans-unit>
        <trans-unit id="eba63c181dd248d4b5bba8f0065bbb50178505fc" translate="yes" xml:space="preserve">
          <source>Standard Library</source>
          <target state="translated">標準ライブラリ</target>
        </trans-unit>
        <trans-unit id="5cb78ec1155b67352920711808d484486519f871" translate="yes" xml:space="preserve">
          <source>Standard delegates</source>
          <target state="translated">標準的な代表者</target>
        </trans-unit>
        <trans-unit id="fbdf47a84aa524486f1f19bc8f2b7696fa1c4c48" translate="yes" xml:space="preserve">
          <source>Standard implementations of delegates for &lt;a href=&quot;../../../../../docs/reference/delegated-properties&quot;&gt;delegated properties&lt;/a&gt; and helper functions for implementing custom delegates.</source>
          <target state="translated">カスタムデリゲートを実装するための&lt;a href=&quot;../../../../../docs/reference/delegated-properties&quot;&gt;デリゲートプロパティ&lt;/a&gt;とヘルパー関数のデリゲートの標準実装。</target>
        </trans-unit>
        <trans-unit id="b31b91de60e88c68f139ba0e04804a05ebd424b2" translate="yes" xml:space="preserve">
          <source>Standard implementations of delegates for &lt;a href=&quot;docs/reference/delegated-properties&quot;&gt;delegated properties&lt;/a&gt; and helper functions for implementing custom delegates.</source>
          <target state="translated">カスタムデリゲートを実装するための&lt;a href=&quot;docs/reference/delegated-properties&quot;&gt;デリゲートプロパティ&lt;/a&gt;とヘルパー関数のデリゲートの標準実装。</target>
        </trans-unit>
        <trans-unit id="360c57caedbd1d1ff38dde144677c893d6ad3792" translate="yes" xml:space="preserve">
          <source>Standard library</source>
          <target state="translated">標準ライブラリ</target>
        </trans-unit>
        <trans-unit id="ad16d6480ea3a42fd35ae681f27222eeb06b2257" translate="yes" xml:space="preserve">
          <source>Standard property delegates.</source>
          <target state="translated">標準的なプロパティデリゲート。</target>
        </trans-unit>
        <trans-unit id="f22646c78134d6ac39afe0c5ee5f9ae0df7f3bbd" translate="yes" xml:space="preserve">
          <source>Star projection, denoted by the &lt;code&gt;*&lt;/code&gt; character. For example, in the type &lt;code&gt;KClass&amp;lt;*&amp;gt;&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; is the star projection. See the &lt;a href=&quot;../../../../../../docs/reference/generics#star-projections&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 文字で表される星図法。たとえば、タイプ &lt;code&gt;KClass&amp;lt;*&amp;gt;&lt;/code&gt; では、 &lt;code&gt;*&lt;/code&gt; は星図法です。詳細については、&lt;a href=&quot;../../../../../../docs/reference/generics#star-projections&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="a77f904c776f120da6135a5ca2b0fb989dcaa559" translate="yes" xml:space="preserve">
          <source>Star-projections</source>
          <target state="translated">Star-projections</target>
        </trans-unit>
        <trans-unit id="6e5590764483cbb03fdaa9e24fc59d1a85c1288e" translate="yes" xml:space="preserve">
          <source>Start new scheduling primitive, such as thread, to accept new tasks via &lt;code&gt;execute&lt;/code&gt; interface. Typically new worker may be needed for computations offload to another core, for IO it may be better to use non-blocking IO combined with more lightweight coroutines.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; インターフェイスを介して新しいタスクを受け入れるために、スレッドなどの新しいスケジューリングプリミティブを開始します。通常、新しいワーカーが別のコアへの計算オフロードに必要になる場合があります。IOの場合は、より軽量なコルーチンと組み合わせた非ブロッキングIOを使用する方がよい場合があります。</target>
        </trans-unit>
        <trans-unit id="a0279a8f5111591a71ef0ea505d164e207decfa7" translate="yes" xml:space="preserve">
          <source>Start the &lt;a href=&quot;#running-the-android-application&quot;&gt;Android application&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#running-the-android-application&quot;&gt;Androidアプリケーションを&lt;/a&gt;起動します。</target>
        </trans-unit>
        <trans-unit id="ffec450a13497055a66c40a0f95ad2095c4fa937" translate="yes" xml:space="preserve">
          <source>Start the &lt;a href=&quot;#running-the-ios-application&quot;&gt;iOS application&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#running-the-ios-application&quot;&gt;iOSアプリケーションを&lt;/a&gt;起動します。</target>
        </trans-unit>
        <trans-unit id="0bab1f2cb1c8332507f7e8e0dae6242d8ebf3cac" translate="yes" xml:space="preserve">
          <source>Starting from JDK 1.8, interfaces in Java can contain &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;default methods&lt;/a&gt;. To make all non-abstract members of Kotlin interfaces default for the Java classes implementing them, compile the Kotlin code with the &lt;code&gt;-Xjvm-default=all&lt;/code&gt; compiler option.</source>
          <target state="translated">JDK 1.8以降、Javaのインターフェースには&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;デフォルトのメソッド&lt;/a&gt;を含めることができます。Kotlinインターフェースのすべての非抽象メンバーをそれらを実装するJavaクラスのデフォルトにするには、 &lt;code&gt;-Xjvm-default=all&lt;/code&gt; コンパイラオプションを使用してKotlinコードをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="6e0f646bfc4efa2110bf6449cf37709d3558db49" translate="yes" xml:space="preserve">
          <source>Starting from JDK 1.8, interfaces in Java can contain &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;default methods&lt;/a&gt;. You can declare a non-abstract member of a Kotlin interface as default for the Java classes implementing it. To make a member default, mark it with the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-default/index&quot;&gt;&lt;code&gt;@JvmDefault&lt;/code&gt;&lt;/a&gt; annotation. Here is an example of a Kotlin interface with a default method:</source>
          <target state="translated">JDK 1.8以降、Javaのインターフェースに&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;デフォルトのメソッド&lt;/a&gt;を含めることができます。Kotlinインターフェースの非抽象メンバーを、それを実装するJavaクラスのデフォルトとして宣言できます。メンバーをデフォルトにするには、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-default/index&quot;&gt; &lt;code&gt;@JvmDefault&lt;/code&gt; &lt;/a&gt;アノテーションを付けます。デフォルトのメソッドを使用したKotlinインターフェースの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="cd2a24b509ce811a3267e32e8920ed8b3ac2112a" translate="yes" xml:space="preserve">
          <source>Starting from Kotlin 1.3, &lt;code&gt;@JvmStatic&lt;/code&gt; applies to functions defined in companion objects of interfaces as well. Such functions compile to static methods in interfaces. Note that static method in interfaces were introduced in Java 1.8, so be sure to use the corresponding targets.</source>
          <target state="translated">Kotlin 1.3以降、 &lt;code&gt;@JvmStatic&lt;/code&gt; はインターフェースのコンパニオンオブジェクトで定義された関数にも適用されます。このような関数は、インターフェイスで静的メソッドにコンパイルされます。インターフェースの静的メソッドはJava 1.8で導入されたので、対応するターゲットを必ず使用してください。</target>
        </trans-unit>
        <trans-unit id="f2ef314e1060cb19059b7679202c90dd5f779df0" translate="yes" xml:space="preserve">
          <source>Starting from version 1.3.30, kapt supports incremental annotation processing as an experimental feature. Currently, annotation processing can be incremental only if all annotation processors being used are incremental.</source>
          <target state="translated">バージョン1.3.30から、実験的な機能としてインクリメンタルアノテーション処理をサポートしています。現在のところ、アノテーション処理は、使用されているアノテーションプロセッサがすべてインクリメンタルである場合にのみ、インクリメンタル処理を行うことができます。</target>
        </trans-unit>
        <trans-unit id="1620971e5e7fb81960f0323359f6dc556dc282b3" translate="yes" xml:space="preserve">
          <source>Starting with 1.3.30, an experimental integration with &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt; is added to Kotlin/Native. This feature allows you to represent a Kotlin/Native Gradle-project as a CocoaPods dependency. Such a representation provides the following advantages:</source>
          <target state="translated">1.3.30以降では、との実験的な統合&lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPodsは&lt;/a&gt; Kotlin /ネイティブに追加されます。この機能を使用すると、Kotlin /ネイティブGradleプロジェクトをCocoaPods依存関係として表すことができます。このような表現には、次の利点があります。</target>
        </trans-unit>
        <trans-unit id="843f77eb473690d7aad6e0682c17b7993f79cc2f" translate="yes" xml:space="preserve">
          <source>Starting with Kotlin 1.1, the JavaScript target is no longer considered experimental. All language features are supported, and there are many new tools for integration with the front-end development environment. See &lt;a href=&quot;#javascript-backend&quot;&gt;below&lt;/a&gt; for a more detailed list of changes.</source>
          <target state="translated">Kotlin 1.1以降、JavaScriptターゲットは実験的とは見なされなくなりました。すべての言語機能がサポートされており、フロントエンド開発環境と統合するための多くの新しいツールがあります。変更の詳細なリストについては、&lt;a href=&quot;#javascript-backend&quot;&gt;以下&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ae38e0129a4b318762165a84af231b05176eafcd" translate="yes" xml:space="preserve">
          <source>Starting with Kotlin 1.1, the JavaScript target is no longer considered experimental. All language features are supported, and there are many new tools for integration with the frontend development environment. See &lt;a href=&quot;#javascript-backend&quot;&gt;below&lt;/a&gt; for a more detailed list of changes.</source>
          <target state="translated">Kotlin 1.1以降、JavaScriptターゲットは実験的なものとは見なされなくなりました。すべての言語機能がサポートされており、フロントエンド開発環境と統合するための多くの新しいツールがあります。変更の詳細なリストについては、&lt;a href=&quot;#javascript-backend&quot;&gt;以下&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="41f73c0acfd31a8c403654851fe6cd652c2e3650" translate="yes" xml:space="preserve">
          <source>Starting with Kotlin 1.1.2, the dependencies with group &lt;code&gt;org.jetbrains.kotlin&lt;/code&gt; are by default resolved with the version taken from the applied plugin. You can provide the version manually using the full dependency notation:</source>
          <target state="translated">Kotlin 1.1.2以降、グループ &lt;code&gt;org.jetbrains.kotlin&lt;/code&gt; との依存関係は、適用されたプラグインから取得したバージョンでデフォルトで解決されます。完全な依存関係表記を使用して、手動でバージョンを提供できます。</target>
        </trans-unit>
        <trans-unit id="07b8457eb5cdf91e3e7cbfadbb3eebb80e30d3ff" translate="yes" xml:space="preserve">
          <source>Starting with Kotlin 1.2, array arguments for annotations can be passed with the new array literal syntax instead of the &lt;code&gt;arrayOf&lt;/code&gt; function:</source>
          <target state="translated">Kotlin 1.2以降、アノテーションの配列引数は、 &lt;code&gt;arrayOf&lt;/code&gt; 関数の代わりに新しい配列リテラル構文で渡すことができます。</target>
        </trans-unit>
        <trans-unit id="12a86828fbb44a7006158c4f6ac9be7d98219035" translate="yes" xml:space="preserve">
          <source>Starting with version 1.1.50 primitive array translation utilizes JavaScript TypedArray:</source>
          <target state="translated">バージョン1.1.50からプリミティブ配列の変換はJavaScriptのTypedArrayを利用しています。</target>
        </trans-unit>
        <trans-unit id="dd4c7c6c2fa2a107f57737194dfcb51c6b3fd326" translate="yes" xml:space="preserve">
          <source>Starts a coroutine with receiver type &lt;a href=&quot;start-coroutine#R&quot;&gt;R&lt;/a&gt; and result type &lt;a href=&quot;start-coroutine#T&quot;&gt;T&lt;/a&gt;. This function creates and starts a new, fresh instance of suspendable computation every time it is invoked. The &lt;a href=&quot;start-coroutine#kotlin.coroutines%24startCoroutine%28kotlin.coroutines.SuspendFunction1%28%28kotlin.coroutines.startCoroutine.R%2C+kotlin.coroutines.startCoroutine.T%29%29%2C+kotlin.coroutines.startCoroutine.R%2C+kotlin.coroutines.Continuation%28%28kotlin.coroutines.startCoroutine.T%29%29%29%2Fcompletion&quot;&gt;completion&lt;/a&gt; continuation is invoked when the coroutine completes with a result or an exception.</source>
          <target state="translated">レシーバータイプ&lt;a href=&quot;start-coroutine#R&quot;&gt;R&lt;/a&gt;および結果タイプ&lt;a href=&quot;start-coroutine#T&quot;&gt;Tで&lt;/a&gt;コルーチンを開始します。この関数は、呼び出されるたびに、中断可能な計算の新しい新しいインスタンスを作成して開始します。&lt;a href=&quot;start-coroutine#kotlin.coroutines%24startCoroutine%28kotlin.coroutines.SuspendFunction1%28%28kotlin.coroutines.startCoroutine.R%2C+kotlin.coroutines.startCoroutine.T%29%29%2C+kotlin.coroutines.startCoroutine.R%2C+kotlin.coroutines.Continuation%28%28kotlin.coroutines.startCoroutine.T%29%29%29%2Fcompletion&quot;&gt;完了&lt;/a&gt;継続がコルーチン結果または例外で完了したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c7fa9a9cb5133b45f7dc5a5d54a3811aeb18a99a" translate="yes" xml:space="preserve">
          <source>Starts a coroutine with receiver type &lt;a href=&quot;start-coroutine#R&quot;&gt;R&lt;/a&gt; and result type &lt;a href=&quot;start-coroutine#T&quot;&gt;T&lt;/a&gt;. This function creates and starts a new, fresh instance of suspendable computation every time it is invoked. The &lt;a href=&quot;start-coroutine#kotlin.coroutines%24startCoroutine(kotlin.coroutines.SuspendFunction1((kotlin.coroutines.startCoroutine.R,%20kotlin.coroutines.startCoroutine.T)),%20kotlin.coroutines.startCoroutine.R,%20kotlin.coroutines.Continuation((kotlin.coroutines.startCoroutine.T)))/completion&quot;&gt;completion&lt;/a&gt; continuation is invoked when the coroutine completes with a result or an exception.</source>
          <target state="translated">レシーバータイプ&lt;a href=&quot;start-coroutine#R&quot;&gt;R&lt;/a&gt;および結果タイプ&lt;a href=&quot;start-coroutine#T&quot;&gt;Tで&lt;/a&gt;コルーチンを開始します。この関数は、呼び出されるたびに、一時停止可能な計算の新しい新しいインスタンスを作成して開始します。&lt;a href=&quot;start-coroutine#kotlin.coroutines%24startCoroutine(kotlin.coroutines.SuspendFunction1((kotlin.coroutines.startCoroutine.R,%20kotlin.coroutines.startCoroutine.T)),%20kotlin.coroutines.startCoroutine.R,%20kotlin.coroutines.Continuation((kotlin.coroutines.startCoroutine.T)))/completion&quot;&gt;完了&lt;/a&gt;継続がコルーチン結果または例外で完了したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="14c38709fc453b41bd452218007cb35f2d68079b" translate="yes" xml:space="preserve">
          <source>Starts a coroutine without a receiver and with result type &lt;a href=&quot;start-coroutine#T&quot;&gt;T&lt;/a&gt;. This function creates and starts a new, fresh instance of suspendable computation every time it is invoked. The &lt;a href=&quot;start-coroutine#kotlin.coroutines%24startCoroutine%28kotlin.coroutines.SuspendFunction0%28%28kotlin.coroutines.startCoroutine.T%29%29%2C+kotlin.coroutines.Continuation%28%28kotlin.coroutines.startCoroutine.T%29%29%29%2Fcompletion&quot;&gt;completion&lt;/a&gt; continuation is invoked when the coroutine completes with a result or an exception.</source>
          <target state="translated">レシーバーなしで結果タイプ&lt;a href=&quot;start-coroutine#T&quot;&gt;T&lt;/a&gt;でコルーチンを開始します。この関数は、呼び出されるたびに、中断可能な計算の新しい新しいインスタンスを作成して開始します。&lt;a href=&quot;start-coroutine#kotlin.coroutines%24startCoroutine%28kotlin.coroutines.SuspendFunction0%28%28kotlin.coroutines.startCoroutine.T%29%29%2C+kotlin.coroutines.Continuation%28%28kotlin.coroutines.startCoroutine.T%29%29%29%2Fcompletion&quot;&gt;完了&lt;/a&gt;継続がコルーチン結果または例外で完了したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="680ce3bf07f76d76f4284acff2d7d36edd428e4a" translate="yes" xml:space="preserve">
          <source>Starts a coroutine without a receiver and with result type &lt;a href=&quot;start-coroutine#T&quot;&gt;T&lt;/a&gt;. This function creates and starts a new, fresh instance of suspendable computation every time it is invoked. The &lt;a href=&quot;start-coroutine#kotlin.coroutines%24startCoroutine(kotlin.coroutines.SuspendFunction0((kotlin.coroutines.startCoroutine.T)),%20kotlin.coroutines.Continuation((kotlin.coroutines.startCoroutine.T)))/completion&quot;&gt;completion&lt;/a&gt; continuation is invoked when the coroutine completes with a result or an exception.</source>
          <target state="translated">レシーバーなしで結果タイプ&lt;a href=&quot;start-coroutine#T&quot;&gt;T&lt;/a&gt;でコルーチンを開始します。この関数は、呼び出されるたびに、一時停止可能な計算の新しい新しいインスタンスを作成して開始します。&lt;a href=&quot;start-coroutine#kotlin.coroutines%24startCoroutine(kotlin.coroutines.SuspendFunction0((kotlin.coroutines.startCoroutine.T)),%20kotlin.coroutines.Continuation((kotlin.coroutines.startCoroutine.T)))/completion&quot;&gt;完了&lt;/a&gt;継続がコルーチン結果または例外で完了したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5ad5c461ffacb6e08120b54a5c5c09dc010d10cb" translate="yes" xml:space="preserve">
          <source>Starts an unintercepted coroutine with receiver type &lt;a href=&quot;start-coroutine-unintercepted-or-return#R&quot;&gt;R&lt;/a&gt; and result type &lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;T&lt;/a&gt; and executes it until its first suspension. Returns the result of the coroutine or throws its exception if it does not suspend or &lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d&quot;&gt;COROUTINE_SUSPENDED&lt;/a&gt; if it suspends. In the latter case, the &lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24startCoroutineUninterceptedOrReturn%28kotlin.coroutines.SuspendFunction1%28%28kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.R%2C+kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.R%2C+kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%29%2Fcompletion&quot;&gt;completion&lt;/a&gt; continuation is invoked when the coroutine completes with a result or an exception.</source>
          <target state="translated">インターセプトされていないコルーチンをレシーバータイプ&lt;a href=&quot;start-coroutine-unintercepted-or-return#R&quot;&gt;R&lt;/a&gt;と結果タイプ&lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;T&lt;/a&gt;で開始し、最初の一時停止まで実行します。コルーチンの結果を返すか、サスペンドしない場合は例外をスローし、サスペンドする場合は&lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d&quot;&gt;COROUTINE_SUSPENDEDを&lt;/a&gt;スローします。後者の場合、コルーチンが結果または例外で完了したときに、&lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24startCoroutineUninterceptedOrReturn%28kotlin.coroutines.SuspendFunction1%28%28kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.R%2C+kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.R%2C+kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%29%2Fcompletion&quot;&gt;完了&lt;/a&gt;継続が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="eea330f2e3c8f4aad63821fe415632a52f31cb3b" translate="yes" xml:space="preserve">
          <source>Starts an unintercepted coroutine with receiver type &lt;a href=&quot;start-coroutine-unintercepted-or-return#R&quot;&gt;R&lt;/a&gt; and result type &lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;T&lt;/a&gt; and executes it until its first suspension. Returns the result of the coroutine or throws its exception if it does not suspend or &lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d&quot;&gt;COROUTINE_SUSPENDED&lt;/a&gt; if it suspends. In the latter case, the &lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24startCoroutineUninterceptedOrReturn(kotlin.coroutines.SuspendFunction1((kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.R,%20kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T)),%20kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.R,%20kotlin.coroutines.Continuation((kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T)))/completion&quot;&gt;completion&lt;/a&gt; continuation is invoked when the coroutine completes with a result or an exception.</source>
          <target state="translated">レシーバータイプ&lt;a href=&quot;start-coroutine-unintercepted-or-return#R&quot;&gt;R&lt;/a&gt;と結果タイプ&lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;Tで&lt;/a&gt;インターセプトされていないコルーチンを開始し、最初の中断まで実行します。コルーチンの結果を返すか、一時停止しない場合は例外をスローし、一時停止する場合は&lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d&quot;&gt;COROUTINE_SUSPENDEDを&lt;/a&gt;スローします。後者の場合、コルーチンが結果または例外で完了すると、&lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24startCoroutineUninterceptedOrReturn(kotlin.coroutines.SuspendFunction1((kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.R,%20kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T)),%20kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.R,%20kotlin.coroutines.Continuation((kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T)))/completion&quot;&gt;完了&lt;/a&gt;継続が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="334ec1f5ed05ab3e3f9b3bc457a00d70430e2e22" translate="yes" xml:space="preserve">
          <source>Starts an unintercepted coroutine without a receiver and with result type &lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;T&lt;/a&gt; and executes it until its first suspension. Returns the result of the coroutine or throws its exception if it does not suspend or &lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d&quot;&gt;COROUTINE_SUSPENDED&lt;/a&gt; if it suspends. In the latter case, the &lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24startCoroutineUninterceptedOrReturn%28kotlin.coroutines.SuspendFunction0%28%28kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%29%2Fcompletion&quot;&gt;completion&lt;/a&gt; continuation is invoked when the coroutine completes with a result or an exception.</source>
          <target state="translated">レシーバーなしで結果タイプ&lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;Tの&lt;/a&gt;インターセプトされていないコルーチンを開始し、最初の中断までそれを実行します。コルーチンの結果を返すか、サスペンドしない場合は例外をスローし、サスペンドする場合は&lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d&quot;&gt;COROUTINE_SUSPENDEDを&lt;/a&gt;スローします。後者の場合、コルーチンが結果または例外で完了したときに、&lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24startCoroutineUninterceptedOrReturn%28kotlin.coroutines.SuspendFunction0%28%28kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%29%2Fcompletion&quot;&gt;完了&lt;/a&gt;継続が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8e32550b501c26b7694d5da5582d67fd0e8523c5" translate="yes" xml:space="preserve">
          <source>Starts an unintercepted coroutine without a receiver and with result type &lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;T&lt;/a&gt; and executes it until its first suspension. Returns the result of the coroutine or throws its exception if it does not suspend or &lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d&quot;&gt;COROUTINE_SUSPENDED&lt;/a&gt; if it suspends. In the latter case, the &lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24startCoroutineUninterceptedOrReturn(kotlin.coroutines.SuspendFunction0((kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T)),%20kotlin.coroutines.Continuation((kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T)))/completion&quot;&gt;completion&lt;/a&gt; continuation is invoked when the coroutine completes with a result or an exception.</source>
          <target state="translated">レシーバーなしで結果タイプ&lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;Tの&lt;/a&gt;インターセプトされていないコルーチンを開始し、最初の中断まで実行します。コルーチンの結果を返すか、一時停止しない場合は例外をスローし、一時停止する場合は&lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d&quot;&gt;COROUTINE_SUSPENDEDを&lt;/a&gt;スローします。後者の場合、コルーチンが結果または例外で完了すると、&lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24startCoroutineUninterceptedOrReturn(kotlin.coroutines.SuspendFunction0((kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T)),%20kotlin.coroutines.Continuation((kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn.T)))/completion&quot;&gt;完了&lt;/a&gt;継続が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3ddb5f3024adc4fc2cb11955f22b8f2de6b0e3b1" translate="yes" xml:space="preserve">
          <source>Starts coroutine with receiver type &lt;a href=&quot;start-coroutine#R&quot;&gt;R&lt;/a&gt; and result type &lt;a href=&quot;start-coroutine#T&quot;&gt;T&lt;/a&gt;. This function creates and start a new, fresh instance of suspendable computation every time it is invoked. The &lt;a href=&quot;start-coroutine#kotlin.coroutines.experimental%24startCoroutine%28kotlin.coroutines.SuspendFunction1%28%28kotlin.coroutines.experimental.startCoroutine.R%2C+kotlin.coroutines.experimental.startCoroutine.T%29%29%2C+kotlin.coroutines.experimental.startCoroutine.R%2C+kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.startCoroutine.T%29%29%29%2Fcompletion&quot;&gt;completion&lt;/a&gt; continuation is invoked when coroutine completes with result or exception.</source>
          <target state="translated">レシーバータイプ&lt;a href=&quot;start-coroutine#R&quot;&gt;R&lt;/a&gt;および結果タイプ&lt;a href=&quot;start-coroutine#T&quot;&gt;Tで&lt;/a&gt;コルーチンを開始します。この関数は、呼び出されるたびに、中断可能な計算の新しい新しいインスタンスを作成して開始します。&lt;a href=&quot;start-coroutine#kotlin.coroutines.experimental%24startCoroutine%28kotlin.coroutines.SuspendFunction1%28%28kotlin.coroutines.experimental.startCoroutine.R%2C+kotlin.coroutines.experimental.startCoroutine.T%29%29%2C+kotlin.coroutines.experimental.startCoroutine.R%2C+kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.startCoroutine.T%29%29%29%2Fcompletion&quot;&gt;完成&lt;/a&gt;コルーチンが結果または例外で終了したときに継続が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="926abb8b1e85620405b11eda69dc96cfcc1f565d" translate="yes" xml:space="preserve">
          <source>Starts coroutine without receiver and with result type &lt;a href=&quot;start-coroutine#T&quot;&gt;T&lt;/a&gt;. This function creates and start a new, fresh instance of suspendable computation every time it is invoked. The &lt;a href=&quot;start-coroutine#kotlin.coroutines.experimental%24startCoroutine%28kotlin.coroutines.SuspendFunction0%28%28kotlin.coroutines.experimental.startCoroutine.T%29%29%2C+kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.startCoroutine.T%29%29%29%2Fcompletion&quot;&gt;completion&lt;/a&gt; continuation is invoked when coroutine completes with result or exception.</source>
          <target state="translated">レシーバーなしで結果タイプ&lt;a href=&quot;start-coroutine#T&quot;&gt;T&lt;/a&gt;でコルーチンを開始します。この関数は、呼び出されるたびに、中断可能な計算の新しい新しいインスタンスを作成して開始します。&lt;a href=&quot;start-coroutine#kotlin.coroutines.experimental%24startCoroutine%28kotlin.coroutines.SuspendFunction0%28%28kotlin.coroutines.experimental.startCoroutine.T%29%29%2C+kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.startCoroutine.T%29%29%29%2Fcompletion&quot;&gt;完成&lt;/a&gt;コルーチンが結果または例外で終了したときに継続が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2e41ff62360a7519652b277899448ef726bd6a59" translate="yes" xml:space="preserve">
          <source>Starts unintercepted coroutine with receiver type &lt;a href=&quot;start-coroutine-unintercepted-or-return#R&quot;&gt;R&lt;/a&gt; and result type &lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;T&lt;/a&gt; and executes it until its first suspension. Returns the result of the coroutine or throws its exception if it does not suspend or &lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d#kotlin.coroutines.experimental.intrinsics%24COROUTINE_SUSPENDED&quot;&gt;COROUTINE_SUSPENDED&lt;/a&gt; if it suspends. In the latter case, the &lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.experimental.intrinsics%24startCoroutineUninterceptedOrReturn%28kotlin.coroutines.SuspendFunction1%28%28kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.R%2C+kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.R%2C+kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%29%2Fcompletion&quot;&gt;completion&lt;/a&gt; continuation is invoked when coroutine completes with result or exception. This function is designed to be used from inside of &lt;a href=&quot;suspend-coroutine-or-return&quot;&gt;suspendCoroutineOrReturn&lt;/a&gt; to resume the execution of a suspended coroutine using a reference to the suspending function.</source>
          <target state="translated">インターセプトされていないコルーチンをレシーバータイプ&lt;a href=&quot;start-coroutine-unintercepted-or-return#R&quot;&gt;R&lt;/a&gt;および結果タイプ&lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;T&lt;/a&gt;で開始し、最初の一時停止まで実行します。コルーチンの結果を返すか、サスペンドしない場合は例外をスローし、サスペンドする場合は&lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d#kotlin.coroutines.experimental.intrinsics%24COROUTINE_SUSPENDED&quot;&gt;COROUTINE_SUSPENDEDを&lt;/a&gt;スローします。後者の場合、コルーチンが結果または例外で完了したときに、&lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.experimental.intrinsics%24startCoroutineUninterceptedOrReturn%28kotlin.coroutines.SuspendFunction1%28%28kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.R%2C+kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.R%2C+kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%29%2Fcompletion&quot;&gt;完了&lt;/a&gt;継続が呼び出されます。この関数は、&lt;a href=&quot;suspend-coroutine-or-return&quot;&gt;suspendCoroutineOrReturnの&lt;/a&gt;内部から使用して、中断関数への参照を使用して中断コルーチンの実行を再開するように設計されています。</target>
        </trans-unit>
        <trans-unit id="2788b8cd3b5da900d1f6ab2449049c41a16ae34e" translate="yes" xml:space="preserve">
          <source>Starts unintercepted coroutine without receiver and with result type &lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;T&lt;/a&gt; and executes it until its first suspension. Returns the result of the coroutine or throws its exception if it does not suspend or &lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d#kotlin.coroutines.experimental.intrinsics%24COROUTINE_SUSPENDED&quot;&gt;COROUTINE_SUSPENDED&lt;/a&gt; if it suspends. In the latter case, the &lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.experimental.intrinsics%24startCoroutineUninterceptedOrReturn%28kotlin.coroutines.SuspendFunction0%28%28kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%29%2Fcompletion&quot;&gt;completion&lt;/a&gt; continuation is invoked when coroutine completes with result or exception. This function is designed to be used from inside of &lt;a href=&quot;suspend-coroutine-or-return&quot;&gt;suspendCoroutineOrReturn&lt;/a&gt; to resume the execution of a suspended coroutine using a reference to the suspending function.</source>
          <target state="translated">インターセプトされていないコルーチンをレシーバーなしで結果タイプ&lt;a href=&quot;start-coroutine-unintercepted-or-return#T&quot;&gt;Tで&lt;/a&gt;開始し、最初の中断までそれを実行します。コルーチンの結果を返すか、サスペンドしない場合は例外をスローし、サスペンドする場合は&lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d#kotlin.coroutines.experimental.intrinsics%24COROUTINE_SUSPENDED&quot;&gt;COROUTINE_SUSPENDEDを&lt;/a&gt;スローします。後者の場合、コルーチンが結果または例外で完了したときに&lt;a href=&quot;start-coroutine-unintercepted-or-return#kotlin.coroutines.experimental.intrinsics%24startCoroutineUninterceptedOrReturn%28kotlin.coroutines.SuspendFunction0%28%28kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn.T%29%29%29%2Fcompletion&quot;&gt;完了&lt;/a&gt;継続が呼び出されます。この関数は、&lt;a href=&quot;suspend-coroutine-or-return&quot;&gt;suspendCoroutineOrReturnの&lt;/a&gt;内部から使用して、中断関数への参照を使用して中断コルーチンの実行を再開するように設計されています。</target>
        </trans-unit>
        <trans-unit id="a33cea1b6a9bd48cd9741eb556f78b336e49b52e" translate="yes" xml:space="preserve">
          <source>State of the future object.</source>
          <target state="translated">未来のオブジェクトの状態。</target>
        </trans-unit>
        <trans-unit id="600b8907db339cd22478c83d4a16dd85a73015b0" translate="yes" xml:space="preserve">
          <source>Static fields</source>
          <target state="translated">静的なフィールド</target>
        </trans-unit>
        <trans-unit id="d15bec36fb146b0a59873196f4b808af2a0c58d9" translate="yes" xml:space="preserve">
          <source>Static members</source>
          <target state="translated">静的なメンバー</target>
        </trans-unit>
        <trans-unit id="3367f809c842440e588af1b9c4ce823b40a614e7" translate="yes" xml:space="preserve">
          <source>Static members of Java classes form &quot;companion objects&quot; for these classes. We cannot pass such a &quot;companion object&quot; around as a value, but can access the members explicitly, for example:</source>
          <target state="translated">Java クラスの静的なメンバは、これらのクラスの「コンパニオン・オブジェクト」を形成します。このような「コンパニオン・オブジェクト」を値として渡すことはできませんが、例えば、明示的にメンバにアクセスすることはできます。</target>
        </trans-unit>
        <trans-unit id="749a016bf10749d6bbdfc0717392432e9f0401f6" translate="yes" xml:space="preserve">
          <source>Static methods</source>
          <target state="translated">静的メソッド</target>
        </trans-unit>
        <trans-unit id="352274d59d59b1511e7ddd7438d2c2b359144fe5" translate="yes" xml:space="preserve">
          <source>Status of different components</source>
          <target state="translated">異なる成分のステータス</target>
        </trans-unit>
        <trans-unit id="f3807792854b99f68c6be94a83962b160d23fe45" translate="yes" xml:space="preserve">
          <source>Stay in the constant feedback loop with the users.</source>
          <target state="translated">ユーザーとの一定のフィードバックループに留まる。</target>
        </trans-unit>
        <trans-unit id="f94f58f50f4cb02a7cf2e081505d0705933f148e" translate="yes" xml:space="preserve">
          <source>Stepping</source>
          <target state="translated">Stepping</target>
        </trans-unit>
        <trans-unit id="2d96e356b3dfea348019e9d1d257295bebd82c9a" translate="yes" xml:space="preserve">
          <source>Stepping functions works mostly the same way as for C/C++ programs</source>
          <target state="translated">ステッピング関数はC/C++プログラムとほぼ同じように動作します。</target>
        </trans-unit>
        <trans-unit id="1fdc6b688a5c8cce5acf4ba7f33e8a0452810157" translate="yes" xml:space="preserve">
          <source>Still, it's not 100% finished, so changes are possible (including ones based on your own feedback).</source>
          <target state="translated">それでも100%完成しているわけではないので、変更は可能です(自分の意見をもとにしたものも含めて)。</target>
        </trans-unit>
        <trans-unit id="9e092dda4f0e27d0c7686ddd00272079e678b6e6" translate="yes" xml:space="preserve">
          <source>Storage</source>
          <target state="translated">Storage</target>
        </trans-unit>
        <trans-unit id="248e9b3aa308183a170c36806544acb1d393c459" translate="yes" xml:space="preserve">
          <source>StorageEventInit</source>
          <target state="translated">StorageEventInit</target>
        </trans-unit>
        <trans-unit id="d976f838e65f2db3d7f099767b0928393c1ede54" translate="yes" xml:space="preserve">
          <source>Store old code style in project</source>
          <target state="translated">古いコードスタイルをプロジェクトに保存</target>
        </trans-unit>
        <trans-unit id="6afbacec45c0da97dff5ccf3dbf2645d5876c3c5" translate="yes" xml:space="preserve">
          <source>Store the initial value of &lt;code&gt;a&lt;/code&gt; to a temporary storage &lt;code&gt;a0&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; の初期値を一時ストレージ &lt;code&gt;a0&lt;/code&gt; に保存します。</target>
        </trans-unit>
        <trans-unit id="9c71e9de239b5ab938dbca4a1d875b22b4f56ace" translate="yes" xml:space="preserve">
          <source>Stores instance size of the type T: CEnumVar.</source>
          <target state="translated">T型のインスタンスサイズを格納します。CEnumVar型のインスタンスサイズを格納します。</target>
        </trans-unit>
        <trans-unit id="1c3904cdae80dc0a8fc8d311b3ceb604faa99393" translate="yes" xml:space="preserve">
          <source>Stores the value of the property for the given object in this mutable map.</source>
          <target state="translated">指定されたオブジェクトのプロパティの値を、このミューターブルマップに格納します。</target>
        </trans-unit>
        <trans-unit id="063a13497de8628ed966341d4c8998e048faac77" translate="yes" xml:space="preserve">
          <source>Storing Properties in a Map</source>
          <target state="translated">地図上のプロパティの保存</target>
        </trans-unit>
        <trans-unit id="ddb303d499265b7489a4f48bffe279ba6adc50f0" translate="yes" xml:space="preserve">
          <source>Storing properties in a map</source>
          <target state="translated">物件を地図上に保存する</target>
        </trans-unit>
        <trans-unit id="cc60d9a373cacd1f7b4d2be35acf2bfd9970e460" translate="yes" xml:space="preserve">
          <source>Strictfp</source>
          <target state="translated">Strictfp</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="dcadc5a0cb117211f9dc789c191b1d6c306ecd43" translate="yes" xml:space="preserve">
          <source>String Interpolation</source>
          <target state="translated">文字列補間</target>
        </trans-unit>
        <trans-unit id="18c909570fe3d2f04f7e3e21101c4ef09a029b7b" translate="yes" xml:space="preserve">
          <source>String Literals</source>
          <target state="translated">文字列リテラル</target>
        </trans-unit>
        <trans-unit id="3ad53eca410dfbc39bc16b33326f447092d15b4c" translate="yes" xml:space="preserve">
          <source>String Templates</source>
          <target state="translated">文字列テンプレート</target>
        </trans-unit>
        <trans-unit id="3ce59ba99c8eaf2a5afe5adcf7f90b7c4f8b3415" translate="yes" xml:space="preserve">
          <source>String builder can be used to efficiently perform multiple string manipulation operations.</source>
          <target state="translated">文字列ビルダを使用することで、複数の文字列操作を効率的に行うことができます。</target>
        </trans-unit>
        <trans-unit id="5993cb336c6391ee8eea94b873bb797a1c4d4619" translate="yes" xml:space="preserve">
          <source>String literals</source>
          <target state="translated">文字列リテラル</target>
        </trans-unit>
        <trans-unit id="26999992a443711764128a5ebde38ee89dae6779" translate="yes" xml:space="preserve">
          <source>String literals may contain template expressions, i.e. pieces of code that are evaluated and whose results are concatenated into the string. A template expression starts with a dollar sign ($) and consists of either a simple name:</source>
          <target state="translated">文字列リテラルはテンプレート式、つまり評価され、その結果が文字列に連結されるコードの断片を含むことがあります。テンプレート式はドル記号 ($)で始まり、単純な名前のいずれかで構成されます。</target>
        </trans-unit>
        <trans-unit id="8de7744f81c5ea96546b7ddeba1d815a5f60f342" translate="yes" xml:space="preserve">
          <source>String representation</source>
          <target state="translated">文字列表現</target>
        </trans-unit>
        <trans-unit id="6ab7e78e76236d943760ced282c69d00f2ee64f3" translate="yes" xml:space="preserve">
          <source>String representation of the worker.</source>
          <target state="translated">労働者の文字列表現。</target>
        </trans-unit>
        <trans-unit id="4f85bffe8cf536bd27d4c8a65ebe070b04592d3f" translate="yes" xml:space="preserve">
          <source>String templates</source>
          <target state="translated">文字列テンプレート</target>
        </trans-unit>
        <trans-unit id="7436274167a247aa32b0eb69c8fa150ce90cf60e" translate="yes" xml:space="preserve">
          <source>String to number conversions</source>
          <target state="translated">文字列から数値への変換</target>
        </trans-unit>
        <trans-unit id="d8722e7c9e74dd4282c8ddb6aafb6678ffcf1c49" translate="yes" xml:space="preserve">
          <source>StringBuilder</source>
          <target state="translated">StringBuilder</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="376d2dc017ddcafe576a8bb45c3839697d243c0f" translate="yes" xml:space="preserve">
          <source>Strings are represented by the type &lt;code&gt;String&lt;/code&gt;. Strings are immutable. Elements of a string are characters that can be accessed by the indexing operation: &lt;code&gt;s[i]&lt;/code&gt;. A string can be iterated over with a &lt;em&gt;for&lt;/em&gt;-loop:</source>
          <target state="translated">文字 &lt;code&gt;String&lt;/code&gt; 型で表されます。文字列は不変です。文字列の要素は、インデックス作成操作でアクセスできる文字です： &lt;code&gt;s[i]&lt;/code&gt; 。文字列は&lt;em&gt;for&lt;/em&gt;ループで反復できます：</target>
        </trans-unit>
        <trans-unit id="6f7691f2e802476360e0176ca90e2968711fe093" translate="yes" xml:space="preserve">
          <source>Strings from C and how they look in Kotlin/Native</source>
          <target state="translated">C の文字列と Kotlin/Native での見え方</target>
        </trans-unit>
        <trans-unit id="2684320b57a782ce0439d9845b025f4167f73160" translate="yes" xml:space="preserve">
          <source>Strong bidirectional character type &quot;AL&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様の強力な双方向性文字型「AL」。</target>
        </trans-unit>
        <trans-unit id="8af8df666f0e8eca9822d09b9b728f2790d43a77" translate="yes" xml:space="preserve">
          <source>Strong bidirectional character type &quot;L&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様の強力な双方向性文字型「L」。</target>
        </trans-unit>
        <trans-unit id="277bd06a9fb3591003f711495ac46fc89282f28e" translate="yes" xml:space="preserve">
          <source>Strong bidirectional character type &quot;LRE&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様の強力な双方向性文字型「LRE」。</target>
        </trans-unit>
        <trans-unit id="f0a8c58716e90117a1fa5949bd4edff7bafc489d" translate="yes" xml:space="preserve">
          <source>Strong bidirectional character type &quot;LRO&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様の強力な双方向性文字型「LRO」。</target>
        </trans-unit>
        <trans-unit id="5c434a125001d98e3d65585f819ed8840b4f8897" translate="yes" xml:space="preserve">
          <source>Strong bidirectional character type &quot;R&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様の強力な双方向性文字型「R」。</target>
        </trans-unit>
        <trans-unit id="64ad0d6aedac34d34b627e0784d46dea64c2ff5a" translate="yes" xml:space="preserve">
          <source>Strong bidirectional character type &quot;RLE&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様の強い双方向性文字型「RLE」。</target>
        </trans-unit>
        <trans-unit id="1665148f18e9a39912a6a12baccd3148269f2320" translate="yes" xml:space="preserve">
          <source>Strong bidirectional character type &quot;RLO&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様の強い双方向性文字型「RLO」。</target>
        </trans-unit>
        <trans-unit id="f21f357479481b3172a23f12385bf19995dd2f48" translate="yes" xml:space="preserve">
          <source>Struct and Union types from C and how they look in Kotlin/Native</source>
          <target state="translated">C からの構造体とユニオンの型と Kotlin/Native での見え方</target>
        </trans-unit>
        <trans-unit id="af5b40acf56f32ead50b7b4376e35475ae8821af" translate="yes" xml:space="preserve">
          <source>Structs / unions are mapped to types having fields available via the dot notation, i.e. &lt;code&gt;someStructInstance.field1&lt;/code&gt;.</source>
          <target state="translated">構造体/共用体は、ドット表記を介して使用可能なフィールドを持つ型にマッピングされます（ &lt;code&gt;someStructInstance.field1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="024b6c74302356ab4e71438eaaf0b40da91567fc" translate="yes" xml:space="preserve">
          <source>Structural changes in the base list make the behavior of the view undefined.</source>
          <target state="translated">ベースリストの構造的な変更により、ビューの動作が未定義になりました。</target>
        </trans-unit>
        <trans-unit id="72d92fad333f84fb34170c273e339309112411ea" translate="yes" xml:space="preserve">
          <source>Structural equality</source>
          <target state="translated">構造的平等</target>
        </trans-unit>
        <trans-unit id="7d27109df9078a59c52f1f92f6addfe6d10368ae" translate="yes" xml:space="preserve">
          <source>Structural equality (a check for &lt;code&gt;equals()&lt;/code&gt;).</source>
          <target state="translated">構造的等価性（ &lt;code&gt;equals()&lt;/code&gt; のチェック）。</target>
        </trans-unit>
        <trans-unit id="ece356b48420c60af23fc6b7ecae7a03ec149030" translate="yes" xml:space="preserve">
          <source>Structural equality comparisons are done with &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;, like in Python, but it's up to each class to define what that means, by &lt;a href=&quot;inheritance#overriding&quot;&gt;overriding&lt;/a&gt;&lt;a href=&quot;classes#inherited-built-in-functions&quot;&gt;&lt;code&gt;equals()&lt;/code&gt;&lt;/a&gt; (which will be called on the left operand with the right operand as the parameter) and &lt;code&gt;hashCode()&lt;/code&gt;. Most built-in collection types implement deep equality checks for these operators and functions. Reference comparisons - checking if two variables refer to the same object (the same as &lt;code&gt;is&lt;/code&gt; in Python) - are done with &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;.</source>
          <target state="translated">Pythonの場合と同様に、構造的同等性の比較は &lt;code&gt;==&lt;/code&gt; および &lt;code&gt;!=&lt;/code&gt; で行われ&lt;a href=&quot;inheritance#overriding&quot;&gt;ます&lt;/a&gt;&lt;a href=&quot;classes#inherited-built-in-functions&quot;&gt; &lt;code&gt;equals()&lt;/code&gt; &lt;/a&gt;、equals（）をオーバーライドすることによって、各クラスがその意味を定義します（これは、パラメーターとして右オペランドを使用して左オペランドで呼び出されます）。および &lt;code&gt;hashCode()&lt;/code&gt; 。ほとんどの組み込みコレクション型は、これらの演算子と関数の詳細な等価チェックを実装しています。参考比較は- 2つの変数が同じオブジェクト（同じ参照かどうかをチェック &lt;code&gt;is&lt;/code&gt; Pythonで） -で行われ &lt;code&gt;===&lt;/code&gt; と &lt;code&gt;!==&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1b70b639ef5cff3c53b813230fbda1e132ca3cce" translate="yes" xml:space="preserve">
          <source>Structural equality has nothing to do with comparison defined by the &lt;code&gt;Comparable&amp;lt;...&amp;gt;&lt;/code&gt; interface, so only a custom &lt;code&gt;equals(Any?)&lt;/code&gt; implementation may affect the behavior of the operator.</source>
          <target state="translated">構造的等価性は、 &lt;code&gt;Comparable&amp;lt;...&amp;gt;&lt;/code&gt; インターフェースで定義された比較とは関係がないため、カスタムの &lt;code&gt;equals(Any?)&lt;/code&gt; 実装のみが演算子の動作に影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="b976e0b583b0412204edf019c0b11bd8b81727df" translate="yes" xml:space="preserve">
          <source>Structural equality is checked by the &lt;code&gt;==&lt;/code&gt; operation (and its negated counterpart &lt;code&gt;!=&lt;/code&gt;). By convention, an expression like &lt;code&gt;a == b&lt;/code&gt; is translated to:</source>
          <target state="translated">構造の等価性は、 &lt;code&gt;==&lt;/code&gt; 演算（およびその否定の対応する &lt;code&gt;!=&lt;/code&gt; ）によってチェックされます。慣例により、 &lt;code&gt;a == b&lt;/code&gt; ような式は次のように変換されます。</target>
        </trans-unit>
        <trans-unit id="660ca66913fdaa764b314de4f4d616cb2af27fc3" translate="yes" xml:space="preserve">
          <source>Structured concurrency</source>
          <target state="translated">構造化された同時実行</target>
        </trans-unit>
        <trans-unit id="688fd1f0d4f70b417561f286a2459a51d7a9bf8d" translate="yes" xml:space="preserve">
          <source>Structured concurrency with async</source>
          <target state="translated">非同期による構造化された並行処理</target>
        </trans-unit>
        <trans-unit id="ce867a84f68c1d0cd7e5d2e0a575c394cc078c03" translate="yes" xml:space="preserve">
          <source>StyleSheet</source>
          <target state="translated">StyleSheet</target>
        </trans-unit>
        <trans-unit id="105633f7a20c3c4e6cfe2fcb5bc3777e06065699" translate="yes" xml:space="preserve">
          <source>StyleSheetList</source>
          <target state="translated">StyleSheetList</target>
        </trans-unit>
        <trans-unit id="4eb481e8f0e6186576b990d8a8ee65c0bcaf3bd9" translate="yes" xml:space="preserve">
          <source>Subclasses of a class that implements an interface (in this case, &lt;code&gt;Car&lt;/code&gt;) are also considered to be implementing the interface.</source>
          <target state="translated">インターフェースを実装するクラスのサブクラス（この場合は &lt;code&gt;Car&lt;/code&gt; ）もインターフェースを実装していると見なされます。</target>
        </trans-unit>
        <trans-unit id="82494d5df2327066831b19fcbdbc11f57f406da0" translate="yes" xml:space="preserve">
          <source>Subclassing</source>
          <target state="translated">Subclassing</target>
        </trans-unit>
        <trans-unit id="5aa09d55ccae6bc284a9aaa4b931ff34243aae33" translate="yes" xml:space="preserve">
          <source>Subclassing Kotlin classes and interfaces from Swift/Objective-C</source>
          <target state="translated">Swift/Objective-CからKotlinのクラスとインターフェースをサブクラス化する</target>
        </trans-unit>
        <trans-unit id="4c8bffd68e11c1e09416b7275b40472abdd31b0e" translate="yes" xml:space="preserve">
          <source>Subclassing Swift/Objective-C classes and protocols from Kotlin</source>
          <target state="translated">KotlinからのSwift/Objective-Cクラスとプロトコルのサブクラス化</target>
        </trans-unit>
        <trans-unit id="d8cfc0d2ff946e39f440d5850a833061ce441784" translate="yes" xml:space="preserve">
          <source>Subtracts the other Char value from this value resulting an Int.</source>
          <target state="translated">この値から他の Char 値を差し引きます。</target>
        </trans-unit>
        <trans-unit id="f8fc787359f50113256ce34acd74e7ad27c2b7de" translate="yes" xml:space="preserve">
          <source>Subtracts the other Int value from this value resulting a Char.</source>
          <target state="translated">この値から他のInt値を差し引くとCharになります。</target>
        </trans-unit>
        <trans-unit id="cd1dd0acae6df690f4f408b7810c6a68a77d2c65" translate="yes" xml:space="preserve">
          <source>Subtracts the other value from this value.</source>
          <target state="translated">この値から他の値を減算します。</target>
        </trans-unit>
        <trans-unit id="d6b1220988da8e4820eca8338c62f95c8d54d502" translate="yes" xml:space="preserve">
          <source>Such &lt;em&gt;smart casts&lt;/em&gt; work for &lt;a href=&quot;control-flow#when-expression&quot;&gt;&lt;em&gt;when&lt;/em&gt;-expressions&lt;/a&gt; and &lt;a href=&quot;control-flow#while-loops&quot;&gt;&lt;em&gt;while&lt;/em&gt;-loops&lt;/a&gt; as well:</source>
          <target state="translated">このような&lt;em&gt;スマートキャストの&lt;/em&gt;ための作業&lt;a href=&quot;control-flow#when-expression&quot;&gt;&lt;em&gt;時に&lt;/em&gt; -expressions&lt;/a&gt;と&lt;a href=&quot;control-flow#while-loops&quot;&gt;&lt;em&gt;しばらく&lt;/em&gt; -loops&lt;/a&gt;にも：</target>
        </trans-unit>
        <trans-unit id="a6ca684a14efd3b57eb8a5d3ba3348ea50581bab" translate="yes" xml:space="preserve">
          <source>Such a chain returns &lt;em&gt;null&lt;/em&gt; if any of the properties in it is null.</source>
          <target state="translated">そのようなチェーンは、その中のいずれかのプロパティが&lt;em&gt;nullの&lt;/em&gt;場合、&lt;em&gt;nullを&lt;/em&gt;返します。</target>
        </trans-unit>
        <trans-unit id="7f52975c732e28d7449a1d2bd849f22d7254ffe5" translate="yes" xml:space="preserve">
          <source>Such a dependency can be included in a Podfile of an Xcode project and automatically built (and rebuilt) along with this project. As a result, importing to Xcode is simplified since there is no need to write corresponding Gradle tasks and Xcode build steps manually.</source>
          <target state="translated">このような依存関係は、XcodeプロジェクトのPodfileに含めることができ、このプロジェクトと一緒に自動的にビルド(およびリビルド)することができます。その結果、対応するGradleタスクとXcodeビルドステップを手動で記述する必要がないので、Xcodeへのインポートが簡素化されます。</target>
        </trans-unit>
        <trans-unit id="275498570896fad34600eda0578ce2760eeaa8db" translate="yes" xml:space="preserve">
          <source>Such annotation type should itself be annotated with both &lt;code&gt;@Nonnull&lt;/code&gt; (or its nickname) and &lt;code&gt;@TypeQualifierDefault(...)&lt;/code&gt; with one or more &lt;code&gt;ElementType&lt;/code&gt; values:</source>
          <target state="translated">このような注釈タイプ自体は、 &lt;code&gt;@Nonnull&lt;/code&gt; （またはそのニックネーム）と、1つ以上の &lt;code&gt;ElementType&lt;/code&gt; 値を持つ &lt;code&gt;@TypeQualifierDefault(...)&lt;/code&gt; の両方で注釈を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="54a890751d7cb69dc2bb8082fffc6f90e74cda3e" translate="yes" xml:space="preserve">
          <source>Such common behaviours can be implemented as libraries using &lt;a href=&quot;delegated-properties&quot;&gt;&lt;em&gt;delegated properties&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">このような一般的な動作は、&lt;a href=&quot;delegated-properties&quot;&gt;&lt;em&gt;委任されたプロパティ&lt;/em&gt;&lt;/a&gt;を使用してライブラリとして実装でき&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="71a7fa20221b612c2534c0cd56321d47af321a0e" translate="yes" xml:space="preserve">
          <source>Such objects can have supertypes:</source>
          <target state="translated">このようなオブジェクトはスーパータイプを持つことができます。</target>
        </trans-unit>
        <trans-unit id="70d2b2ed000c8ab8416a2925902564c1eda90b74" translate="yes" xml:space="preserve">
          <source>Such properties can be used in annotations:</source>
          <target state="translated">このようなプロパティは、アノテーションで使用することができます。</target>
        </trans-unit>
        <trans-unit id="c1071ef3c60cf8dd3c256721ed0bebfd0d5200f8" translate="yes" xml:space="preserve">
          <source>Such returns (located in a lambda, but exiting the enclosing function) are called &lt;em&gt;non-local&lt;/em&gt; returns. We are used to this sort of construct in loops, which inline functions often enclose:</source>
          <target state="translated">そのような戻り値（ラムダにありますが、囲み関数を終了します）は、&lt;em&gt;非ローカル&lt;/em&gt;戻り値と呼ばれます。ループ内のこの種の構造に慣れています。これは、インライン関数で囲まれることが多いものです。</target>
        </trans-unit>
        <trans-unit id="10e6aa90785a792cb60500d5818fa4c115ff47c4" translate="yes" xml:space="preserve">
          <source>Such syntax is also known as &lt;em&gt;trailing lambda&lt;/em&gt;.</source>
          <target state="translated">このような構文は、&lt;em&gt;末尾ラムダ&lt;/em&gt;とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="c8895d425ddb898eb0386c82032007c2c016e5af" translate="yes" xml:space="preserve">
          <source>Suffix to use for generated JavaScript files</source>
          <target state="translated">生成された JavaScript ファイルに使用するサフィックス</target>
        </trans-unit>
        <trans-unit id="f20596f60d75184baac457dd39dfe5dbb7c92170" translate="yes" xml:space="preserve">
          <source>Suggested documentation pages:</source>
          <target state="translated">提案されたドキュメントページ。</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="efddb0d943663d3990ff15feb5144465e26709a1" translate="yes" xml:space="preserve">
          <source>Superclass for all platform classes representing numeric values.</source>
          <target state="translated">数値を表すすべてのプラットフォームクラスのスーパークラス。</target>
        </trans-unit>
        <trans-unit id="d57120c39b452641752cec548eba58dfe0d997dc" translate="yes" xml:space="preserve">
          <source>Supervision</source>
          <target state="translated">Supervision</target>
        </trans-unit>
        <trans-unit id="e8ca95dbcc7178511d7c5a9727cb4e64cd2491c0" translate="yes" xml:space="preserve">
          <source>Supervision job</source>
          <target state="translated">監督の仕事</target>
        </trans-unit>
        <trans-unit id="b540bbae2b6598d9471d4e821a9a3c9f224811ce" translate="yes" xml:space="preserve">
          <source>Supervision scope</source>
          <target state="translated">監督範囲</target>
        </trans-unit>
        <trans-unit id="44228bb9b805267096502663a9f60eebe9337369" translate="yes" xml:space="preserve">
          <source>Support for ::foo as a shorthand for this::foo</source>
          <target state="translated">this::foo の短縮形としての ::foo のサポート</target>
        </trans-unit>
        <trans-unit id="3ec47f1fa2e89d008f80cdf4b7103a20c0dbe0dc" translate="yes" xml:space="preserve">
          <source>Support for multiplatform programming is one of Kotlin&amp;rsquo;s key benefits. It reduces time spent writing and maintaining the same code for &lt;a href=&quot;mpp-supported-platforms&quot;&gt;different platforms&lt;/a&gt; while retaining the flexibility and benefits of native programming.</source>
          <target state="translated">マルチプラットフォームプログラミングのサポートは、Kotlinの主な利点の1つです。ネイティブプログラミングの柔軟性と利点を維持しながら、&lt;a href=&quot;mpp-supported-platforms&quot;&gt;異なるプラットフォームで&lt;/a&gt;同じコードを記述および維持するために費やされる時間を削減します。</target>
        </trans-unit>
        <trans-unit id="34c6c2ddc426343eed559ce47d4c777df69eba0c" translate="yes" xml:space="preserve">
          <source>Supported platforms</source>
          <target state="translated">サポートされているプラットフォーム</target>
        </trans-unit>
        <trans-unit id="9794d24ec85271049a86498f820c37d015564882" translate="yes" xml:space="preserve">
          <source>Supported types</source>
          <target state="translated">サポートされているタイプ</target>
        </trans-unit>
        <trans-unit id="93c79b3f7d0d1a76067ccba45bb58d73cfe3316b" translate="yes" xml:space="preserve">
          <source>Suppose there is a Java method that accepts an int array of indices:</source>
          <target state="translated">インデックスのint配列を受け付けるJavaメソッドがあるとします。</target>
        </trans-unit>
        <trans-unit id="0ca1c820ac8164eb818371a319e5876b522328ee" translate="yes" xml:space="preserve">
          <source>Suppose we have a generic interface &lt;code&gt;Source&amp;lt;T&amp;gt;&lt;/code&gt; that does not have any methods that take &lt;code&gt;T&lt;/code&gt; as a parameter, only methods that return &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; をパラメーターとして受け取るメソッドを持たず、 &lt;code&gt;T&lt;/code&gt; を返すメソッドのみを持つ汎用インターフェイス &lt;code&gt;Source&amp;lt;T&amp;gt;&lt;/code&gt; とします。</target>
        </trans-unit>
        <trans-unit id="d81855372fef77a8319ba3320877e631faefc705" translate="yes" xml:space="preserve">
          <source>Suppress</source>
          <target state="translated">Suppress</target>
        </trans-unit>
        <trans-unit id="f4bf603e39de5fe14652ee5e4d5bffe13ebca851" translate="yes" xml:space="preserve">
          <source>Suppresses all compilation warnings</source>
          <target state="translated">すべてのコンパイル警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="c08ada99a3ce33d336392fa9e2fcc77dd914f220" translate="yes" xml:space="preserve">
          <source>Suppresses errors about variance conflict</source>
          <target state="translated">分散競合に関する誤差を抑制します</target>
        </trans-unit>
        <trans-unit id="826a3782b77dd21352e84fb444cfe49b2d3d41ba" translate="yes" xml:space="preserve">
          <source>Suppresses the given compilation warnings in the annotated element.</source>
          <target state="translated">アノテーションされた要素で指定されたコンパイル警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="69d0f54516180fa102c2933686469dcb8fed1c6f" translate="yes" xml:space="preserve">
          <source>Surrogate pairs included in this string builder are treated as single characters. Therefore, the order of the high-low surrogates is never reversed.</source>
          <target state="translated">この文字列ビルダに含まれるサロゲートのペアは、1文字として扱われます。したがって、高位と低位のサロゲートの順序が逆になることはありません。</target>
        </trans-unit>
        <trans-unit id="52d7c5ec374713f5f37d91138c052ccbb60ec732" translate="yes" xml:space="preserve">
          <source>Suspend functions are only allowed to be called from a coroutine or another suspend function</source>
          <target state="translated">サスペンド関数は、コアーチンまたは他のサスペンド関数からのみ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ac8b279c6a3c1f3871f1125cc1498ab1f6a88def" translate="yes" xml:space="preserve">
          <source>SuspendFunction</source>
          <target state="translated">SuspendFunction</target>
        </trans-unit>
        <trans-unit id="ec4005f130005e7ee3fe9eb28e0b27154a02ee0d" translate="yes" xml:space="preserve">
          <source>Suspending functions</source>
          <target state="translated">サスペンド機能</target>
        </trans-unit>
        <trans-unit id="d52d9b4f1f762df95c3f2692f128dbd79352b8e8" translate="yes" xml:space="preserve">
          <source>Svetlana Isakova</source>
          <target state="translated">スベトラーナ・イサコバ</target>
        </trans-unit>
        <trans-unit id="e1b1187bdbb9c730f8014294b12fac3d0e7be01a" translate="yes" xml:space="preserve">
          <source>Swapping two variables</source>
          <target state="translated">2つの変数のスワップ</target>
        </trans-unit>
        <trans-unit id="112ab020698e5fc0f4baecd7821a512d8c419a69" translate="yes" xml:space="preserve">
          <source>Swift</source>
          <target state="translated">Swift</target>
        </trans-unit>
        <trans-unit id="11e426a93e6bdc30eee83310a54fe55623d59394" translate="yes" xml:space="preserve">
          <source>Swift/Objective-C classes and protocols can be subclassed with a Kotlin &lt;code&gt;final&lt;/code&gt; class. Non-&lt;code&gt;final&lt;/code&gt; Kotlin classes inheriting Swift/Objective-C types aren't supported yet, so it is not possible to declare a complex class hierarchy inheriting Swift/Objective-C types.</source>
          <target state="translated">Swift / Objective-Cクラスとプロトコルは、Kotlin &lt;code&gt;final&lt;/code&gt; クラスでサブクラス化できます。Swift / Objective-C型を継承する非 &lt;code&gt;final&lt;/code&gt; Kotlinクラスはまだサポートされていないため、Swift / Objective-C型を継承する複雑なクラス階層を宣言することはできません。</target>
        </trans-unit>
        <trans-unit id="f62b613e64a0b39b8f91de500961ddd372e2c85a" translate="yes" xml:space="preserve">
          <source>Swift/Objective-C initializers are imported to Kotlin as constructors and factory methods named &lt;code&gt;create&lt;/code&gt;. The latter happens with initializers declared in the Objective-C category or as a Swift extension, because Kotlin has no concept of extension constructors.</source>
          <target state="translated">Swift / Objective-Cイニシャライザは、 &lt;code&gt;create&lt;/code&gt; という名前のコンストラクタとファクトリメソッドとしてKotlinにインポートされます。Kotlinには拡張コンストラクターの概念がないため、後者は、Objective-CカテゴリーまたはSwift拡張として宣言された初期化子で発生します。</target>
        </trans-unit>
        <trans-unit id="9d575759176a53333f2c52896d12c38987eec991" translate="yes" xml:space="preserve">
          <source>Swift/Objective-C interop</source>
          <target state="translated">スイフト/Objective-Cインターロップ</target>
        </trans-unit>
        <trans-unit id="99720ddc441c1bfb4d0affa1772914ca5ac04545" translate="yes" xml:space="preserve">
          <source>Switch over a channel of deferred values</source>
          <target state="translated">遅延値のチャネルを切り替える</target>
        </trans-unit>
        <trans-unit id="13fd4750b81466d157a12fc10d9a852e2caf99fa" translate="yes" xml:space="preserve">
          <source>Switch to the default formatting and make it consistent with Kotlin Coding Conventions in Kotlin 1.4</source>
          <target state="translated">デフォルトのフォーマットに切り替え、Kotlin 1.4のKotlin Coding Conventionsと一致するようにします。</target>
        </trans-unit>
        <trans-unit id="61aa80a32f7f719d3326e90ee95ac7477fe0603f" translate="yes" xml:space="preserve">
          <source>Switching to the Kotlin Coding Conventions code style can be done in &lt;code&gt;Settings &amp;rarr; Editor &amp;rarr; Code Style &amp;rarr; Kotlin&lt;/code&gt; dialog. Switch scheme to &lt;em&gt;Project&lt;/em&gt; and activate &lt;code&gt;Set from... &amp;rarr; Predefined Style &amp;rarr; Kotlin Style Guide&lt;/code&gt;.</source>
          <target state="translated">Kotlinコーディング規約のコードスタイルへの切り替えは、 &lt;code&gt;Settings &amp;rarr; Editor &amp;rarr; Code Style &amp;rarr; Kotlin&lt;/code&gt; ダイアログで行うことができます。スキームを[ &lt;em&gt;プロジェクト&lt;/em&gt; ]に切り替え、[ &lt;code&gt;Set from... &amp;rarr; Predefined Style &amp;rarr; Kotlin Style Guide&lt;/code&gt; をアクティブにします。&amp;rarr;定義済みスタイル&amp;rarr;Kotlinスタイルガイド。</target>
        </trans-unit>
        <trans-unit id="ce89d26b5b915bdbefeba3e3c1002ad16cf04461" translate="yes" xml:space="preserve">
          <source>SymbolName</source>
          <target state="translated">SymbolName</target>
        </trans-unit>
        <trans-unit id="1c380083ceced1c7e8bbc5bd15ca13f7adc39f96" translate="yes" xml:space="preserve">
          <source>Symmetric: for any non-null values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;x.equals(y)&lt;/code&gt; should return true if and only if &lt;code&gt;y.equals(x)&lt;/code&gt; returns true.</source>
          <target state="translated">対称：任意の非ヌル値について &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の、 &lt;code&gt;x.equals(y)&lt;/code&gt; の場合にのみtrueを返すべき &lt;code&gt;y.equals(x)&lt;/code&gt; が trueを返します。</target>
        </trans-unit>
        <trans-unit id="c195e4374c85d74cc43f4f08a33d51e3c51b4cfd" translate="yes" xml:space="preserve">
          <source>Synchronized</source>
          <target state="translated">Synchronized</target>
        </trans-unit>
        <trans-unit id="60526f7fe57071fddf6bf31004eca244e13fd625" translate="yes" xml:space="preserve">
          <source>Synthetic targets become inaccessible for Java sources at compile time while still being accessible for Kotlin sources. Marking target as synthetic is a binary compatible change, already compiled Java code will be able to access such target.</source>
          <target state="translated">合成ターゲットはコンパイル時にJavaソースからはアクセスできなくなりますが、Kotlinソースからはアクセス可能です。ターゲットを合成ターゲットとしてマークすることはバイナリ互換性のある変更であり、すでにコンパイルされたJavaコードはそのようなターゲットにアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="8426ac9483ef9329287d13cda6dbc5c5b8457b87" translate="yes" xml:space="preserve">
          <source>System-related utility functions.</source>
          <target state="translated">システム関連のユーティリティ機能。</target>
        </trans-unit>
        <trans-unit id="7acd3724fef694b5c77a8242b8933516bfe3f06a" translate="yes" xml:space="preserve">
          <source>TERMINATE</source>
          <target state="translated">TERMINATE</target>
        </trans-unit>
        <trans-unit id="c2024afdc51720a7b9f26bd798eeb6515dee141f" translate="yes" xml:space="preserve">
          <source>THROWN</source>
          <target state="translated">THROWN</target>
        </trans-unit>
        <trans-unit id="aec59fbfc2f6181875490fd78c020230f3b1b1f7" translate="yes" xml:space="preserve">
          <source>TITLECASE_LETTER</source>
          <target state="translated">TITLECASE_LETTER</target>
        </trans-unit>
        <trans-unit id="b698c11e84460ed5999bfeb5cbf25b865c238f3c" translate="yes" xml:space="preserve">
          <source>TODO</source>
          <target state="translated">TODO</target>
        </trans-unit>
        <trans-unit id="6a05d02b340471018c943f805ab7f1309856273e" translate="yes" xml:space="preserve">
          <source>TODO(): Marking code as incomplete</source>
          <target state="translated">TODO()。コードを不完全なものとしてマークする</target>
        </trans-unit>
        <trans-unit id="3a36be7757d53df34ffbc16215cd6f9cfdd93b80" translate="yes" xml:space="preserve">
          <source>TODO: changing symbol name breaks the binary compatibility, so it should probably be allowed on &lt;code&gt;internal&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; functions only.</source>
          <target state="translated">TODO：シンボル名を変更するとバイナリ互換性が失われるため、 &lt;code&gt;internal&lt;/code&gt; 関数と &lt;code&gt;private&lt;/code&gt; 関数でのみ許可されるはずです。</target>
        </trans-unit>
        <trans-unit id="f3830d7277fcff42c992ea836b9ff28598687e08" translate="yes" xml:space="preserve">
          <source>TODO: consider providing an adapter instead of subtyping &lt;a href=&quot;../-c-values/index&quot;&gt;CValues&lt;/a&gt;.</source>
          <target state="translated">TODO：&lt;a href=&quot;../-c-values/index&quot;&gt;CValues&lt;/a&gt;をサブタイプする代わりに、アダプターを提供することを検討してください。</target>
        </trans-unit>
        <trans-unit id="40b96366fe4fb7eb04dbdc7b2c5d704e03c38057" translate="yes" xml:space="preserve">
          <source>TODO: the behavior of &lt;a href=&quot;../../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt;, &lt;a href=&quot;../../kotlin/-any/hash-code#kotlin.Any%24hashCode%28%29&quot;&gt;hashCode&lt;/a&gt; and &lt;a href=&quot;../../kotlin/-any/to-string#kotlin.Any%24toString%28%29&quot;&gt;toString&lt;/a&gt; differs on Native and JVM backends.</source>
          <target state="translated">TODO：&lt;a href=&quot;../../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt;、&lt;a href=&quot;../../kotlin/-any/hash-code#kotlin.Any%24hashCode%28%29&quot;&gt;hashCode&lt;/a&gt;、および&lt;a href=&quot;../../kotlin/-any/to-string#kotlin.Any%24toString%28%29&quot;&gt;toString&lt;/a&gt;の動作は、ネイティブバックエンドとJVMバックエンドで異なります。</target>
        </trans-unit>
        <trans-unit id="b0e3df42ab82e6e186c0a86de01f03cd58ed5da4" translate="yes" xml:space="preserve">
          <source>TODO: the behavior of &lt;a href=&quot;../../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt;, &lt;a href=&quot;../../kotlin/-any/hash-code#kotlin.Any%24hashCode()&quot;&gt;hashCode&lt;/a&gt; and &lt;a href=&quot;../../kotlin/-any/to-string#kotlin.Any%24toString()&quot;&gt;toString&lt;/a&gt; differs on Native and JVM backends.</source>
          <target state="translated">TODO：&lt;a href=&quot;../../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt;、&lt;a href=&quot;../../kotlin/-any/hash-code#kotlin.Any%24hashCode()&quot;&gt;hashCode&lt;/a&gt;、および&lt;a href=&quot;../../kotlin/-any/to-string#kotlin.Any%24toString()&quot;&gt;toString&lt;/a&gt;の動作は、ネイティブバックエンドとJVMバックエンドで異なります。</target>
        </trans-unit>
        <trans-unit id="aa57ca5da1542535d6e595c72a1049dfaa72214c" translate="yes" xml:space="preserve">
          <source>TOP_DOWN</source>
          <target state="translated">TOP_DOWN</target>
        </trans-unit>
        <trans-unit id="3fd18045f2522bb120b4e3ac843fcede30d5c942" translate="yes" xml:space="preserve">
          <source>TVOS</source>
          <target state="translated">TVOS</target>
        </trans-unit>
        <trans-unit id="6e9816a8e9d0388eecdb52866188c04e75e4b1b3" translate="yes" xml:space="preserve">
          <source>TYPE</source>
          <target state="translated">TYPE</target>
        </trans-unit>
        <trans-unit id="4f8e3ef2be07081eed30f4f241b8f6079253452d" translate="yes" xml:space="preserve">
          <source>TYPEALIAS</source>
          <target state="translated">TYPEALIAS</target>
        </trans-unit>
        <trans-unit id="74c2ff3e02a8146aa670c1188095f748d0498a87" translate="yes" xml:space="preserve">
          <source>TYPE_PARAMETER</source>
          <target state="translated">TYPE_PARAMETER</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">目次</target>
        </trans-unit>
        <trans-unit id="1a428989bd13dceabd89b698d9fa38eb8a0d175c" translate="yes" xml:space="preserve">
          <source>Table of contents</source>
          <target state="translated">目次</target>
        </trans-unit>
        <trans-unit id="321de0ab2873c1406451b4e621fed413b6b2ab1e" translate="yes" xml:space="preserve">
          <source>Tail recursive functions</source>
          <target state="translated">テール再帰関数</target>
        </trans-unit>
        <trans-unit id="2371ab50da6b9db0aea83641cb8925e9710f7c92" translate="yes" xml:space="preserve">
          <source>Take a look at the &lt;a href=&quot;https://www.jetbrains.com/help/education/learner-start-guide.html?section=Kotlin%20Koans&quot;&gt;Learner Start Guide&lt;/a&gt;, which will get you started with the Kotlin Koans course inside IntelliJ IDEA. Solve interactive coding challenges and get instant feedback right inside the IDE.</source>
          <target state="translated">見てみましょう&lt;a href=&quot;https://www.jetbrains.com/help/education/learner-start-guide.html?section=Kotlin%20Koans&quot;&gt;学習スタートガイド&lt;/a&gt;あなたがのIntelliJ IDEAの内部Kotlin Koansコースを始めるだろう。インタラクティブなコーディングの課題を解決し、IDE内で即座にフィードバックを取得します。</target>
        </trans-unit>
        <trans-unit id="20fa48deb639df41368610d6983f2e95bc62d9b3" translate="yes" xml:space="preserve">
          <source>Take a look at the behavior of the following code:</source>
          <target state="translated">以下のコードの動作を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="a34ab8557ec6518d7eec439be4e5bcf534a63994" translate="yes" xml:space="preserve">
          <source>Take and drop</source>
          <target state="translated">テイクアンドドロップ</target>
        </trans-unit>
        <trans-unit id="1bbdcf12e57848561b81b3650e41362a19702c6a" translate="yes" xml:space="preserve">
          <source>Take for instance the following code</source>
          <target state="translated">例えば、次のコードを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="ffc4d467faa7814fe0541133e507fd8deafa41f3" translate="yes" xml:space="preserve">
          <source>Taking the above into account, given the following code (module name is &lt;code&gt;ConsoleOutput&lt;/code&gt;)</source>
          <target state="translated">上記を考慮して、次のコードを指定します（モジュール名は &lt;code&gt;ConsoleOutput&lt;/code&gt; です）</target>
        </trans-unit>
        <trans-unit id="61ad50a9b9189cc3cf1874568e35e7901ff4c982" translate="yes" xml:space="preserve">
          <source>Target</source>
          <target state="translated">Target</target>
        </trans-unit>
        <trans-unit id="e9c2cc44a1648fab93dfd7f8478951978cee81a6" translate="yes" xml:space="preserve">
          <source>Target Platforms</source>
          <target state="translated">対象プラットフォーム</target>
        </trans-unit>
        <trans-unit id="2c6651b7aa08a8550dea113571107b0c864ada23" translate="yes" xml:space="preserve">
          <source>Target platform/device</source>
          <target state="translated">対象プラットフォーム/デバイス</target>
        </trans-unit>
        <trans-unit id="77c4c4b87221968bd3a3894fe9c81710e28b33b7" translate="yes" xml:space="preserve">
          <source>Target version of the generated JVM bytecode</source>
          <target state="translated">生成されたJVMバイトコードのターゲットバージョン</target>
        </trans-unit>
        <trans-unit id="b55ed86e9766080d6e500a070b6fef6b1986cd3f" translate="yes" xml:space="preserve">
          <source>Target version of the generated JVM bytecode (1.6, 1.8, 9, 10, 11 or 12), default is 1.6</source>
          <target state="translated">生成されたJVMバイトコードのターゲットバージョン(1.6,1.8,9,10,11,12)、デフォルトは1.6です。</target>
        </trans-unit>
        <trans-unit id="b9f79302140e02579ecf20feab5f4ed0599b5178" translate="yes" xml:space="preserve">
          <source>Target-specific options, only applicable to the certain target can be specified as well, such as</source>
          <target state="translated">特定のターゲットにのみ適用されるターゲット固有のオプションを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="fbb726beab60fbd5d494b96dfab27818ba4ef792" translate="yes" xml:space="preserve">
          <source>Targeting Android</source>
          <target state="translated">Androidをターゲットにした</target>
        </trans-unit>
        <trans-unit id="61435c5519fdf6e83f5be2de5ba7d3189d1e59db" translate="yes" xml:space="preserve">
          <source>Targeting JVM with Kotlin and Java source</source>
          <target state="translated">KotlinとJavaソースでJVMを狙う</target>
        </trans-unit>
        <trans-unit id="eed4cc7b25a381102c782f5eee23b1557b5da0f0" translate="yes" xml:space="preserve">
          <source>Targeting JVM with Kotlin-only source</source>
          <target state="translated">Kotlin専用ソースでJVMを狙う</target>
        </trans-unit>
        <trans-unit id="6be3f820f9efacb8a325c313968a6aa3ca133310" translate="yes" xml:space="preserve">
          <source>Targeting JVM with Kotlin-only source and multiple roots</source>
          <target state="translated">Kotlinのみのソースと複数のルートでJVMを狙う</target>
        </trans-unit>
        <trans-unit id="2426095a82998267d53648372ee8cb2c93e603c9" translate="yes" xml:space="preserve">
          <source>Targeting JavaScript</source>
          <target state="translated">ターゲティングJavaScript</target>
        </trans-unit>
        <trans-unit id="7e517a21f1ce2b40c420e67981cb82c90d901d12" translate="yes" xml:space="preserve">
          <source>Targeting JavaScript with Prefix, PostFix and sourcemap options</source>
          <target state="translated">Prefix、PostFix、ソースマップオプションでJavaScriptをターゲットにする</target>
        </trans-unit>
        <trans-unit id="af5e0c13bd0213a07d67ab13adf84941ec88763a" translate="yes" xml:space="preserve">
          <source>Targeting JavaScript with single source folder</source>
          <target state="translated">単一ソースフォルダでJavaScriptをターゲットにする</target>
        </trans-unit>
        <trans-unit id="f36e6891c319487c20f8187b941dcf72379e553c" translate="yes" xml:space="preserve">
          <source>Targeting JavaScript with single source folder and metaInfo option</source>
          <target state="translated">単一ソースフォルダとmetaInfoオプションでJavaScriptをターゲットにする</target>
        </trans-unit>
        <trans-unit id="51aaaf1ce12316c97c4129484dcd06dd799fd74b" translate="yes" xml:space="preserve">
          <source>Targeting multiple platforms</source>
          <target state="translated">複数のプラットフォームをターゲットに</target>
        </trans-unit>
        <trans-unit id="9057192fad6052cc02e53869d22c36d08b376824" translate="yes" xml:space="preserve">
          <source>Targeting the JVM</source>
          <target state="translated">JVMをターゲットにする</target>
        </trans-unit>
        <trans-unit id="e9c6bdd75b92fb92b0ec52b948e6ab977d88c1c8" translate="yes" xml:space="preserve">
          <source>Targeting the browser</source>
          <target state="translated">ブラウザをターゲットにする</target>
        </trans-unit>
        <trans-unit id="52408046d668e5c8da292f381cd0a5534e2e8a07" translate="yes" xml:space="preserve">
          <source>Targets (e.g. Linux/x64 or iOS/arm64 etc)</source>
          <target state="translated">ターゲット (例:Linux/x64 または iOS/arm64 など)</target>
        </trans-unit>
        <trans-unit id="837e53257b3eec566bea2e67012cd4dadfb5bb32" translate="yes" xml:space="preserve">
          <source>Targets and output kinds</source>
          <target state="translated">ターゲットと出力の種類</target>
        </trans-unit>
        <trans-unit id="816c9fefceb8b2eba75d842698c8c325c361d2dc" translate="yes" xml:space="preserve">
          <source>Targets can be specified by setting a corresponding component property:</source>
          <target state="translated">対応するコンポーネントのプロパティを設定することで、ターゲットを指定することができます。</target>
        </trans-unit>
        <trans-unit id="ccd64eb3b2ae68576bc374a9f76f6dafc19a16b7" translate="yes" xml:space="preserve">
          <source>Teaching Kotlin with EduTools plugin</source>
          <target state="translated">EduToolsプラグインでKotlinを教える</target>
        </trans-unit>
        <trans-unit id="107721a9ab514d4563cc6535734a7356bb7e6b23" translate="yes" xml:space="preserve">
          <source>Technically, there is no difference between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;union&lt;/code&gt; types on the Kotlin side. We should note, that &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; properties of &lt;code&gt;MyUnion&lt;/code&gt; class in Kotlin use the same memory location to read/write their value just like &lt;code&gt;union&lt;/code&gt; does in C language.</source>
          <target state="translated">技術的には、Kotlin側の &lt;code&gt;struct&lt;/code&gt; 体型と &lt;code&gt;union&lt;/code&gt; 体型に違いはありません。私たちはそれを、注意してください、 &lt;code&gt;b&lt;/code&gt; 、及び &lt;code&gt;c&lt;/code&gt; 特性 &lt;code&gt;MyUnion&lt;/code&gt; の Kotlinでクラスが同じようにその値を読み出し/書き込みするために同じメモリ位置を使用する &lt;code&gt;union&lt;/code&gt; C言語で行います。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d53818b29193f314641d3739f638d9be2e9e5f4" translate="yes" xml:space="preserve">
          <source>Templates are supported both inside raw strings and inside escaped strings. If you need to represent a literal &lt;code&gt;$&lt;/code&gt; character in a raw string (which doesn't support backslash escaping), you can use the following syntax:</source>
          <target state="translated">テンプレートは、未加工文字列とエスケープ文字列の両方でサポートされています。生の文字列（バックスラッシュエスケープをサポートしない）でリテラル &lt;code&gt;$&lt;/code&gt; 文字を表す必要がある場合は、次の構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="8761082f68b3e6705f4c38bb348056fcdd9cb6dd" translate="yes" xml:space="preserve">
          <source>Terminate the evaluation of the function.</source>
          <target state="translated">関数の評価を終了します。</target>
        </trans-unit>
        <trans-unit id="bd3961165a74d22116abf8cd7dfd89e1e128faab" translate="yes" xml:space="preserve">
          <source>Terminates the currently running process.</source>
          <target state="translated">現在実行中のプロセスを終了させます。</target>
        </trans-unit>
        <trans-unit id="4640b3677ae305cdd783f2fb2cb28eef6cd34e00" translate="yes" xml:space="preserve">
          <source>Ternary-operator &lt;code&gt;a ? b : c&lt;/code&gt;</source>
          <target state="translated">三項演算子 &lt;code&gt;a ? b : c&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="d3b8064c2d7f14d3be517a2dd8d759b095d75329" translate="yes" xml:space="preserve">
          <source>Testing predicates</source>
          <target state="translated">述語のテスト</target>
        </trans-unit>
        <trans-unit id="c7dd4726947e8a4e69327ac444e2102f6d4c85c3" translate="yes" xml:space="preserve">
          <source>Tests are a safe place to add Kotlin to the codebase because they are not bundled with your application during packaging.</source>
          <target state="translated">パッケージング時にアプリケーションにバンドルされていないので、テストはコードベースにKotlinを追加するための安全な場所です。</target>
        </trans-unit>
        <trans-unit id="082fdf5c87614574580fe601c26048e8b6285351" translate="yes" xml:space="preserve">
          <source>TexImageSource</source>
          <target state="translated">TexImageSource</target>
        </trans-unit>
        <trans-unit id="06d4a26dfeb6fe515c1bd30f6921c66e729ad5b4" translate="yes" xml:space="preserve">
          <source>TextMetrics</source>
          <target state="translated">TextMetrics</target>
        </trans-unit>
        <trans-unit id="0c0a3e3c79ed645faf27df5d40c7372e38f10e27" translate="yes" xml:space="preserve">
          <source>TextTrackCueList</source>
          <target state="translated">TextTrackCueList</target>
        </trans-unit>
        <trans-unit id="86fb1c4a335a80c40bdf3e5b1a2aadd5059a2ca7" translate="yes" xml:space="preserve">
          <source>TextTrackKind</source>
          <target state="translated">TextTrackKind</target>
        </trans-unit>
        <trans-unit id="12de6f114f3e1a86a095e86dfa5c8b68ba37ba4b" translate="yes" xml:space="preserve">
          <source>TextTrackMode</source>
          <target state="translated">TextTrackMode</target>
        </trans-unit>
        <trans-unit id="7878af5e1d970e3132e8a0a88487c501b01c97e2" translate="yes" xml:space="preserve">
          <source>That gives you a way to express queries via C#-like LINQ syntax, use lambdas to write much simpler code for asynchronous computations, and more. Read all the details &lt;a href=&quot;https://agrosner.gitbooks.io/dbflow/content/KotlinSupport.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">これにより、C＃のようなLINQ構文でクエリを表現したり、ラムダを使用して非同期計算用のはるかに単純なコードを記述したりできます。詳細は&lt;a href=&quot;https://agrosner.gitbooks.io/dbflow/content/KotlinSupport.html&quot;&gt;こちらを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="0edd9421fb5e5aa8cfee7f829a8302f1e02b82ec" translate="yes" xml:space="preserve">
          <source>That is because &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt; is a special &lt;em&gt;suspending function&lt;/em&gt; that does not block a thread, but &lt;em&gt;suspends&lt;/em&gt; coroutine and it can be only used from a coroutine.</source>
          <target state="translated">これは、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;遅延&lt;/a&gt;はスレッドをブロックせず、コルーチンを&lt;em&gt;一時停止&lt;/em&gt;する特別な&lt;em&gt;一時停止機能&lt;/em&gt;であり、コルーチンからのみ使用できるためです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="710fe831c742e4f0eb7d410a5e7f34322dc9bdb8" translate="yes" xml:space="preserve">
          <source>That is because &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt; is a special &lt;em&gt;suspending function&lt;/em&gt; that does not block a thread, but &lt;em&gt;suspends&lt;/em&gt; the coroutine, and it can be only used from a coroutine.</source>
          <target state="translated">これは、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;遅延&lt;/a&gt;はスレッドをブロックせずにコルーチンを&lt;em&gt;一時停止&lt;/em&gt;する特別な&lt;em&gt;一時停止関数&lt;/em&gt;であり、コルーチンからのみ使用できるためです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f1552ede00e5eac7ce32f87adbb1ebbd118c506" translate="yes" xml:space="preserve">
          <source>That is the common part. The code to generate the final message. It &lt;code&gt;expect&lt;/code&gt;s the platform to provide the platform name from the &lt;code&gt;expect fun platformName(): String&lt;/code&gt; function. We will use the &lt;code&gt;createApplicationScreenMessage&lt;/code&gt; from both Android and iOS applications.</source>
          <target state="translated">それが共通部分です。最終メッセージを生成するコード。プラットフォームは、 &lt;code&gt;expect fun platformName(): String&lt;/code&gt; 関数からプラットフォーム名を提供することを &lt;code&gt;expect&lt;/code&gt; ます。AndroidアプリケーションとiOSアプリケーションの両方から &lt;code&gt;createApplicationScreenMessage&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="2bc4829125d0242560af4ed1db4d6bbd3c58404a" translate="yes" xml:space="preserve">
          <source>That was easy, but maybe we'd want to do lazy-loading so that we won't spend time on extracting the fields that won't be used (especially if some of them contain a lot of data in a format that it is time-consuming to parse), and maybe we'd like support for default values. While we could implement that logic in a &lt;code&gt;get()&lt;/code&gt; block, it would need to be duplicated in every property. Alternatively, we could implement the logic in a separate &lt;code&gt;StringProperty&lt;/code&gt; class (note that this simple example is not thread-safe):</source>
          <target state="translated">それは簡単でしたが、使用されないフィールドを抽出するのに時間を費やさないように、レイジーロードを実行したい場合があります（特に、一部のフィールドに、解析に時間がかかります）、デフォルト値のサポートが必要な場合があります。このロジックを &lt;code&gt;get()&lt;/code&gt; ブロックで実装することもできますが、すべてのプロパティで複製する必要があります。または、別の &lt;code&gt;StringProperty&lt;/code&gt; クラスにロジックを実装することもできます（この単純な例はスレッドセーフではないことに注意してください）。</target>
        </trans-unit>
        <trans-unit id="7c754aa21a3405ebaf37834b83155abdf27ac763" translate="yes" xml:space="preserve">
          <source>That will force the Objc header to mark &lt;code&gt;myVal&lt;/code&gt; as non-null.</source>
          <target state="translated">これにより、Objcヘッダーが &lt;code&gt;myVal&lt;/code&gt; をnull以外としてマークします。</target>
        </trans-unit>
        <trans-unit id="ec91ab1097ba6574aef9c9b3b66e7a3cac24bd22" translate="yes" xml:space="preserve">
          <source>That will force the Objective-C header to mark &lt;code&gt;myVal&lt;/code&gt; as non-null.</source>
          <target state="translated">これにより、Objective-Cヘッダーが &lt;code&gt;myVal&lt;/code&gt; をnull以外としてマークするように強制されます。</target>
        </trans-unit>
        <trans-unit id="0f4622a697b62b60beae07bb6cb2be3136a91e3c" translate="yes" xml:space="preserve">
          <source>That's all! Note that &lt;code&gt;kapt&lt;/code&gt; takes care of your Java files as well, so you don't need to keep the &lt;code&gt;annotationProcessor&lt;/code&gt; dependency.</source>
          <target state="translated">それで全部です！注意 &lt;code&gt;kapt&lt;/code&gt; は、あなたが維持する必要がないので、同様にあなたのJavaファイルの世話を &lt;code&gt;annotationProcessor&lt;/code&gt; の依存関係を。</target>
        </trans-unit>
        <trans-unit id="24349cf6cc7cf7f9b384531cea8b8f5b11489c77" translate="yes" xml:space="preserve">
          <source>That's how you add the plugin in Gradle:</source>
          <target state="translated">それがGradleでプラグインを追加する方法です。</target>
        </trans-unit>
        <trans-unit id="736d96c876d3629aa01920322b964b507fdb9a3c" translate="yes" xml:space="preserve">
          <source>That's it, we are good to go and write code under &lt;code&gt;src/main/kotlin&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;src/main/kotlin&lt;/code&gt; の下にコードを記述できます。</target>
        </trans-unit>
        <trans-unit id="b79f3592a2bc46aa2f1d8a2fe0f2f1a3ad0a665d" translate="yes" xml:space="preserve">
          <source>That's why the actual signature of &lt;code&gt;addAll()&lt;/code&gt; is the following:</source>
          <target state="translated">そのため、 &lt;code&gt;addAll()&lt;/code&gt; の実際のシグネチャは次のようになります。</target>
        </trans-unit>
        <trans-unit id="5cebaf2e4c811fba9f733598c7e0ab2cbbdabb01" translate="yes" xml:space="preserve">
          <source>That's why we have the following migration plan instead:</source>
          <target state="translated">そのため、代わりに次のような移住計画があります。</target>
        </trans-unit>
        <trans-unit id="ed972239c05a1ce2160c2bcfca2e4a8ef0e2db12" translate="yes" xml:space="preserve">
          <source>The &quot;ping&quot; coroutine is started first, so it is the first one to receive the ball. Even though &quot;ping&quot; coroutine immediately starts receiving the ball again after sending it back to the table, the ball gets received by the &quot;pong&quot; coroutine, because it was already waiting for it:</source>
          <target state="translated">ping」コルーチンは最初に開始されるので、最初にボールを受け取るのは「ping」コルーチンである。ボールをテーブルに戻した後、すぐに「ping」コルーチンが再びボールの受信を開始しても、ボールは「pong」コルーチンが待っていたので、「pong」コルーチンに受信されてしまいます。</target>
        </trans-unit>
        <trans-unit id="c7440a8c30ab97822c9d77fe495203fe0ef8e721" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;manual&amp;rdquo; workaround is to store the values of sub-expressions with control flow in variables, instead of evaluating them directly inside the call arguments. It&amp;rsquo;s similar to &lt;code&gt;-Xnormalize-constructor-calls=enable&lt;/code&gt;.</source>
          <target state="translated">「手動の」回避策は、制御引数を含む部分式の値を、呼び出し引数の中で直接評価するのではなく、変数に格納することです。これは &lt;code&gt;-Xnormalize-constructor-calls=enable&lt;/code&gt; に似ています。</target>
        </trans-unit>
        <trans-unit id="b2dac38fb13b33ed15d5a221ea9b31acee5a3f83" translate="yes" xml:space="preserve">
          <source>The (complete) C data type.</source>
          <target state="translated">(完全な)Cデータ型。</target>
        </trans-unit>
        <trans-unit id="d40e2aa06e1f3081a9ba55e866548f768b24f0de" translate="yes" xml:space="preserve">
          <source>The (possibly empty) sequence of immutable C values. It is self-contained and doesn't depend on native memory.</source>
          <target state="translated">不変のC値の(空の可能性のある)シーケンス。自己完結型で、ネイティブメモリには依存しません。</target>
        </trans-unit>
        <trans-unit id="7b6a69c655f68801070a7ea7a1009ee4bf0a261f" translate="yes" xml:space="preserve">
          <source>The 64-bit Android Native target require a Linux or macOS host. The 32-bit Android Native target can be built on any supported host.</source>
          <target state="translated">64ビットAndroid Nativeターゲットは、LinuxまたはmacOSホストが必要です。32ビットAndroid Nativeターゲットは、サポートされているホスト上であればどのようなホストでもビルドできます。</target>
        </trans-unit>
        <trans-unit id="025e0471d3315a226930949e631a17bb911bf9c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#configuring-source-sets&quot;&gt;source sets&lt;/a&gt; and their &lt;a href=&quot;#adding-dependencies&quot;&gt;dependencies&lt;/a&gt; are then configured as follows:</source>
          <target state="translated">次に、&lt;a href=&quot;#configuring-source-sets&quot;&gt;ソースセット&lt;/a&gt;とその&lt;a href=&quot;#adding-dependencies&quot;&gt;依存関係&lt;/a&gt;を次のように構成します。</target>
        </trans-unit>
        <trans-unit id="587688423378c35c59750f8053e3e7120acd7a77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;-c-pointed/index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">特定の解釈なしの&lt;a href=&quot;-c-pointed/index&quot;&gt;CPointed&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d6d7555b1e73df12c61cc2d2ea015a73f43aed2f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../-c-pointed/index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">特定の解釈なしの&lt;a href=&quot;../-c-pointed/index&quot;&gt;CPointed&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e54545b48334a1124feb75af3b7057b37b313a69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt;&lt;code&gt;minusAssign&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;-=&lt;/code&gt;) operator is also available for mutable maps.</source>
          <target state="translated">&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt; &lt;code&gt;minusAssign&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;-=&lt;/code&gt; ）演算子は、また、変更可能なマップのために利用可能です。</target>
        </trans-unit>
        <trans-unit id="4ff365b4410b0b6619038682a29eefb850097313" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-dsl-marker/index&quot;&gt;&lt;code&gt;@DslMarker&lt;/code&gt;&lt;/a&gt; annotation allows to restrict the use of receivers from outer scopes in a DSL context. Consider the canonical &lt;a href=&quot;type-safe-builders&quot;&gt;HTML builder example&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-dsl-marker/index&quot;&gt; &lt;code&gt;@DslMarker&lt;/code&gt; の&lt;/a&gt;アノテーションは、DSLの文脈において、外側のスコープから受信機の使用を制限することを可能にします。正規の&lt;a href=&quot;type-safe-builders&quot;&gt;HTMLビルダーの例を&lt;/a&gt;考えてみます。</target>
        </trans-unit>
        <trans-unit id="0ed846a235f919618387ac6874100bd335e7cf20" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop.</source>
          <target state="translated">&lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C相互運用機能のドキュメントの&lt;/a&gt;ドキュメントには、相互運用機能のより高度なシナリオをカバーしています。</target>
        </trans-unit>
        <trans-unit id="1b6d8c3337d9451276257f3dd3c6b569bd207944" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../tutorials/httpservlets&quot;&gt;Creating Web Applications with Http Servlets&lt;/a&gt; and &lt;a href=&quot;../tutorials/spring-boot-restful&quot;&gt;Creating a RESTful Web Service with Spring Boot&lt;/a&gt; tutorials show you how you can build and run very small Web applications in Kotlin.</source>
          <target state="translated">&lt;a href=&quot;../tutorials/httpservlets&quot;&gt;HTTPサーブレット&lt;/a&gt;を使用したWebアプリケーションの作成および&lt;a href=&quot;../tutorials/spring-boot-restful&quot;&gt;Spring Bootを使用したRESTful Webサービスの作成の&lt;/a&gt;チュートリアルでは、Kotlinで非常に小さなWebアプリケーションを構築して実行する方法を示します。</target>
        </trans-unit>
        <trans-unit id="370b9ddcfe0daa7a4e64218bc3548eec2e892b70" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;building-mpp-with-gradle#adding-dependencies&quot;&gt;dependencies configuration&lt;/a&gt; has been changed; dependencies are now specified separately for each source root.</source>
          <target state="translated">&lt;a href=&quot;building-mpp-with-gradle#adding-dependencies&quot;&gt;依存関係の設定が&lt;/a&gt;変更されました。依存関係は現在、ソースルートごとに個別に指定されています。</target>
        </trans-unit>
        <trans-unit id="674f31521000a6f54abe7364383ba3624d590692" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;prefix&lt;/a&gt; argument, if specified, must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as &quot;job&quot; or &quot;mail&quot;.</source>
          <target state="translated">&lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;接頭&lt;/a&gt;引数は、指定された場合、少なくとも3つの文字でなければなりません。プレフィックスは、「job」や「mail」などの短く意味のある文字列にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="232e0eee7b10204645b3dd32191de6618efcf17f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;prefix&lt;/a&gt; argument, if specified, must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as &quot;job&quot; or &quot;mail&quot;.</source>
          <target state="translated">&lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;接頭&lt;/a&gt;引数は、指定された場合、少なくとも3つの文字でなければなりません。プレフィックスは、「job」や「mail」などの短く意味のある文字列にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="269230aa3731ce52c181b4cdd4ea09cfe0397b67" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;to&lt;/a&gt; value should be less than or equal to &lt;code&gt;this&lt;/code&gt; value. If the &lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;to&lt;/a&gt; value is greater than &lt;code&gt;this&lt;/code&gt; value the returned progression is empty.</source>
          <target state="translated">値未満であるか等しい必要があり &lt;code&gt;this&lt;/code&gt; 値。場合&lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;に&lt;/a&gt;値がより大きい場合 &lt;code&gt;this&lt;/code&gt; 値が返さ進行は空です。&lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cedb826c5703fb7b6739f64d401e4c303edac3fd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;to&lt;/a&gt; value should be less than or equal to &lt;code&gt;this&lt;/code&gt; value. If the &lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;to&lt;/a&gt; value is greater than &lt;code&gt;this&lt;/code&gt; value the returned progression is empty.</source>
          <target state="translated">値未満であるか等しい必要があり &lt;code&gt;this&lt;/code&gt; 値。場合&lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;に&lt;/a&gt;値がより大きい場合 &lt;code&gt;this&lt;/code&gt; 値が返さ進行は空です。&lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="742e049bae3776c4fe6fe85ca2d3d815ec2c3864" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;先の&lt;/a&gt;マップ。</target>
        </trans-unit>
        <trans-unit id="c384276c1494f8a4d389142695a22613ee5962a0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;先の&lt;/a&gt;マップ。</target>
        </trans-unit>
        <trans-unit id="5d95b84298d2eab336155e81f552bfaa2e8cad8d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)))/destination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)))/destination&quot;&gt;先の&lt;/a&gt;マップ。</target>
        </trans-unit>
        <trans-unit id="30431003356faec04f84a3163d4307b1d6bea476" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)),%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.V)))/destination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)),%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.V)))/destination&quot;&gt;先の&lt;/a&gt;マップ。</target>
        </trans-unit>
        <trans-unit id="c60c5bfb4e99d5eeb15d99db1ac41367610d72e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html library&lt;/a&gt; provides the ability to generate DOM using statically typed HTML builders. The library is available when targeting the JVM as well as JavaScript. To use the library we need to include the corresponding dependency. In the case of Gradle this would be</source>
          <target state="translated">&lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.htmlライブラリは&lt;/a&gt;静的に型付けHTMLビルダーを使用してDOMを生成する機能を提供します。ライブラリは、JVMおよびJavaScriptを対象とする場合に使用できます。ライブラリを使用するには、対応する依存関係を含める必要があります。Gradleの場合、これは</target>
        </trans-unit>
        <trans-unit id="11ff0e8cd4fdb0fd27629f6a7e687a0b18080e1a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt;&lt;code&gt;@Nonnull&lt;/code&gt;&lt;/a&gt; annotation defined in &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR-305&lt;/a&gt; is supported for denoting nullability of Java types.</source>
          <target state="translated">&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR-305で&lt;/a&gt;定義された&lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt; &lt;code&gt;@Nonnull&lt;/code&gt; &lt;/a&gt;アノテーションは、Java型のnull可能性を示すためにサポートされています。</target>
        </trans-unit>
        <trans-unit id="a931a42af218b74ddfa5646228c068094e9e0035" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.android.com/topic/libraries/data-binding/index.html&quot;&gt;Data Binding Library&lt;/a&gt; allows you to bind your application data to the layouts in a concise way.</source>
          <target state="translated">&lt;a href=&quot;https://developer.android.com/topic/libraries/data-binding/index.html&quot;&gt;データバインディングライブラリを&lt;/a&gt;使用すると、簡潔な方法でレイアウトにアプリケーションデータをバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="a2b7c849d9b50965b814a88b2bb1cbbfb44ead82" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Delegation_pattern&quot;&gt;Delegation pattern&lt;/a&gt; has proven to be a good alternative to implementation inheritance, and Kotlin supports it natively requiring zero boilerplate code. A class &lt;code&gt;Derived&lt;/code&gt; can implement an interface &lt;code&gt;Base&lt;/code&gt; by delegating all of its public members to a specified object:</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Delegation_pattern&quot;&gt;委任パターンを&lt;/a&gt;実装継承に良い代替であることが判明している、とKotlinネイティブゼロ定型コードを必要とそれをサポートします。 &lt;code&gt;Derived&lt;/code&gt; クラスは、すべてのパブリックメンバーを指定されたオブジェクトに委任することにより、インターフェイス &lt;code&gt;Base&lt;/code&gt; を実装できます。</target>
        </trans-unit>
        <trans-unit id="89d682e482c895868a37ff624bc3eb18d04bf269" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C相互運用機能のドキュメントの&lt;/a&gt;ドキュメントには、相互運用機能のより高度なシナリオをカバー</target>
        </trans-unit>
        <trans-unit id="1238852d879c2d710110f6784edd1cb93433787e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C相互運用機能のドキュメントの&lt;/a&gt;ドキュメントには、相互運用機能のより高度なシナリオをカバーしています。</target>
        </trans-unit>
        <trans-unit id="ad07c99f0aec0609e4c5ce0e6d68e85b21cca8ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/ilmat192/kotlin-native-serialization-sample&quot;&gt;example project&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/ilmat192/kotlin-native-serialization-sample&quot;&gt;サンプルプロジェクト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ed3b8b8f640f1bc7c5c2be4b375d8acbd62a9be8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive.html&quot;&gt;onReceive&lt;/a&gt; clause in &lt;code&gt;select&lt;/code&gt; fails when the channel is closed causing the corresponding &lt;code&gt;select&lt;/code&gt; to throw an exception. We can use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt; clause to perform a specific action when the channel is closed. The following example also shows that &lt;code&gt;select&lt;/code&gt; is an expression that returns the result of its selected clause:</source>
          <target state="translated">チャネルが閉じていると、 &lt;code&gt;select&lt;/code&gt; の&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive.html&quot;&gt;onReceive&lt;/a&gt;句が失敗し、対応する &lt;code&gt;select&lt;/code&gt; が例外をスローします。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt;句を使用して、チャネルが閉じているときに特定のアクションを実行できます。次の例は、 &lt;code&gt;select&lt;/code&gt; が、選択された句の結果を返す式であることも示しています。</target>
        </trans-unit>
        <trans-unit id="7b2b6bd69393d0995b1d531e59de6e1690650085" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt; coroutine dispatcher starts a coroutine in the caller thread, but only until the first suspension point. After suspension it resumes the coroutine in the thread that is fully determined by the suspending function that was invoked. The unconfined dispatcher is appropriate for coroutines which neither consume CPU time nor update any shared data (like UI) confined to a specific thread.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt;コルーチンディスパッチャは、呼び出し側スレッドにコルーチンを開始するが、唯一の第1吊り点まで。一時停止後、呼び出された一時停止関数によって完全に決定されるスレッド内のコルーチンを再開します。制限のないディスパッチャーは、CPU時間を消費せず、特定のスレッドに制限された共有データ（UIなど）を更新しないコルーチンに適しています。</target>
        </trans-unit>
        <trans-unit id="567140fae1a9d885e6f93737a3b69b522b5149e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt; coroutine dispatcher starts coroutine in the caller thread, but only until the first suspension point. After suspension it resumes in the thread that is fully determined by the suspending function that was invoked. Unconfined dispatcher is appropriate when coroutine does not consume CPU time nor updates any shared data (like UI) that is confined to a specific thread.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt;コルーチンディスパッチャは、呼び出し側スレッドにコルーチンを開始するが、唯一の第1吊り点まで。一時停止後、呼び出された一時停止機能によって完全に決定されるスレッドで再開されます。非制限ディスパッチャーは、コルーチンがCPU時間を消費せず、特定のスレッドに限定されている共有データ（UIなど）を更新しない場合に適しています。</target>
        </trans-unit>
        <trans-unit id="2c62562cc26b6319588208cc31aa39bb7081cc62" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&quot;&gt;SupervisorJob&lt;/a&gt; can be used for these purposes. It is similar to a regular &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html&quot;&gt;Job&lt;/a&gt; with the only exception that cancellation is propagated only downwards. This can easily be demonstrated using the following example:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&quot;&gt;SupervisorJobは、&lt;/a&gt;これらの目的のために使用することができます。これは通常の&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html&quot;&gt;ジョブ&lt;/a&gt;と似ていますが、キャンセルが下向きにのみ伝播される点が異なります。これは、次の例を使用して簡単に示すことができます。</target>
        </trans-unit>
        <trans-unit id="fa80881a041c6af7b81990bc6442fd43157648c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is available for testing different Kotlin projects.</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; APIは&lt;/a&gt;異なるKotlinプロジェクトをテストするために利用可能です。</target>
        </trans-unit>
        <trans-unit id="97cb445124dce985503ca787c74149658f56ba41" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is availble for multiplatform tests. Add the &lt;code&gt;kotlin-test-common&lt;/code&gt; and &lt;code&gt;kotlin-test-annotations-common&lt;/code&gt; dependencies to &lt;code&gt;commonTest&lt;/code&gt; to use the assertion functions like &lt;code&gt;kotlin.test.assertTrue(...)&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; APIは、&lt;/a&gt;マルチプラットフォームのテストのためのavailbleです。 &lt;code&gt;kotlin.test.assertTrue(...)&lt;/code&gt; などのアサーション関数を使用するには、 &lt;code&gt;kotlin-test-common&lt;/code&gt; および &lt;code&gt;kotlin-test-annotations-common&lt;/code&gt; 依存関係を &lt;code&gt;commonTest&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="bf9a347ca7004344d61319e9e4d5bb8c2e75274c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://ktor.io/&quot;&gt;Ktor framework&lt;/a&gt; is suitable for building asynchronous servers and clients in connected systems.</source>
          <target state="translated">&lt;a href=&quot;https://ktor.io/&quot;&gt;Ktorフレームワークは、&lt;/a&gt;接続されたシステムでは、非同期サーバーとクライアントを構築するために適しています。</target>
        </trans-unit>
        <trans-unit id="0194a3aa4b12c9468ece4f08b6ba21815b0e08f0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">特定の解釈なしの&lt;a href=&quot;index&quot;&gt;CPointed&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e2ef6f826701c72898d6d25192a84da10d181630" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;js-ir-compiler&quot;&gt;new Kotlin/JS IR compiler&lt;/a&gt; (currently with &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt; stability) comes with a number of improvements over the current default compiler. For example, it improves the size of generated executables via dead code elimination and makes it smoother to interoperate with the JavaScript ecosystem and its tooling. By generating TypeScript declaration files (d.ts) from Kotlin code, the new compiler makes it easier to create &amp;ldquo;hybrid&amp;rdquo; applications that mix TypeScript and Kotlin code, and leverage code-sharing functionality using Kotlin Multiplatform.</source>
          <target state="translated">&lt;a href=&quot;js-ir-compiler&quot;&gt;新しいKotlin / JS IRコンパイラ&lt;/a&gt;（現在と&lt;a href=&quot;evolution/components-stability&quot;&gt;アルファ&lt;/a&gt;安定性）は、現在のデフォルトコンパイラを超える多くの改良が付属しています。たとえば、デッドコードの排除によって生成された実行可能ファイルのサイズを改善し、JavaScriptエコシステムとそのツールとの相互運用をよりスムーズにします。新しいコンパイラは、KotlinコードからTypeScript宣言ファイル（d.ts）を生成することで、TypeScriptとKotlinコードを組み合わせた「ハイブリッド」アプリケーションを簡単に作成し、KotlinMultiplatformを使用してコード共有機能を活用できるようにします。</target>
        </trans-unit>
        <trans-unit id="f1f6321a990fb305c59adcbabf8e3830cf1b87ed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.Any%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Flock&quot;&gt;lock&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.Any%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Flock&quot;&gt;ロック&lt;/a&gt;パラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="ad29d28adce666b3b0aa95e3d086ef2150c731fc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.LazyThreadSafetyMode%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Fmode&quot;&gt;mode&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.LazyThreadSafetyMode%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Fmode&quot;&gt;モード&lt;/a&gt;パラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="65e44082e85c986aa2e19f4034c1939c25816182" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy(kotlin.Any?,%20kotlin.Function0((kotlin.lazy.T)))/lock&quot;&gt;lock&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy(kotlin.Any?,%20kotlin.Function0((kotlin.lazy.T)))/lock&quot;&gt;ロック&lt;/a&gt;パラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="acac99fbefec8adf034ebe09ae88ed968b1bfb59" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy(kotlin.LazyThreadSafetyMode,%20kotlin.Function0((kotlin.lazy.T)))/mode&quot;&gt;mode&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy(kotlin.LazyThreadSafetyMode,%20kotlin.Function0((kotlin.lazy.T)))/mode&quot;&gt;モード&lt;/a&gt;パラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="65f4a08157a599a0434e41b121c5f82c757d8345" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列は、操作を高速化するために&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt;に変換される場合があります。そのため、要素には、連続した呼び出し間で変化しない &lt;code&gt;hashCode()&lt;/code&gt; の正確で安定した実装が必要です。</target>
        </trans-unit>
        <trans-unit id="e24be1e2b6e9366f0d91d73c1522fb4cc61453ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="88eac69a24417f0a5acd408bdb0ac168d5ab84f8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="4fdc1e3b9cc58343e5c4eb08ebf24ea334f18ce1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列は、操作を高速化するために&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt;に変換される場合があります。そのため、要素には、連続した呼び出し間で変化しない &lt;code&gt;hashCode()&lt;/code&gt; の正確で安定した実装が必要です。</target>
        </trans-unit>
        <trans-unit id="00e3673225dc7616b276e346639c286afc0812ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="9bfb6c345d49b612f19ff9859dc63476feb3110d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="eef0f46e8880f391ca0f135eafed80d7953873e2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;素子&lt;/a&gt;アレイは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="a9357b4fe4ae7edffd3a4348a18308c871d282bd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="2ef34bb84f8efe0f11198308dcadc0a798d086c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="dfb66f4d60f9919dee9be2f66e79310c49bfdeea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;素子&lt;/a&gt;アレイは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="c2358033aedf09646b3978114c88919df8cce73a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="422371d5491a08f23ef3ac6338e4abe49c999f7b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="150ad09de77efcf5d7cfbcf006b9f6b89c68e678" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.Array%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.Array%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列は、操作を高速化するために&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt;に変換される場合があります。そのため、要素には、連続した呼び出し間で変化しない &lt;code&gt;hashCode()&lt;/code&gt; の正確で安定した実装が必要です。</target>
        </trans-unit>
        <trans-unit id="16822a8d7e6589a06d4a74f594278b5199a4c0ac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="7730285cb3f44afdb3b127e9800e2d48488fce25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="62d283a260d21c033d8ae6f886e9418e4ce557c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.Array((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.Array((kotlin.sequences.minus.T)))/elements&quot;&gt;素子&lt;/a&gt;アレイは、に変換することができる&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="c922bbe4f99fe85f64acb6a4c239e5a6014544af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.collections.Iterable((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.collections.Iterable((kotlin.sequences.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;コレクションは、に変換することができる&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="0fac9986e030aa348ad259c660503117d0363441" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;要素の&lt;/a&gt;配列をに変換することができる&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSetの&lt;/a&gt;、したがって要素が正しいと安定した実装が要求されている、動作を高速化するために &lt;code&gt;hashCode()&lt;/code&gt; の連続呼び出しの間に変化しません。</target>
        </trans-unit>
        <trans-unit id="6783ca375fba676e08fc3ee05e0ed3a5ef692c42" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;range#kotlin.text.MatchGroup%24range&quot;&gt;range&lt;/a&gt; property is available on JVM only.</source>
          <target state="translated">&lt;a href=&quot;range#kotlin.text.MatchGroup%24range&quot;&gt;範囲の&lt;/a&gt;プロパティは、JVM上で使用可能です。</target>
        </trans-unit>
        <trans-unit id="42745a5a4bae1983528b804b1ebebed6b02c4c55" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;replace#kotlin.text%24replace%28kotlin.CharSequence%2C+kotlin.text.Regex%2C+kotlin.String%29%2Freplacement&quot;&gt;replacement&lt;/a&gt; can consist of any combination of literal text and $-substitutions. To treat the replacement string literally escape it with the &lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement%28kotlin.String%29&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;replace#kotlin.text%24replace%28kotlin.CharSequence%2C+kotlin.text.Regex%2C+kotlin.String%29%2Freplacement&quot;&gt;交換は&lt;/a&gt;リテラルテキストおよび$ -substitutionsの任意の組み合わせで構成されます。置換文字列を処理するには、&lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement%28kotlin.String%29&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt;メソッドで文字列を文字どおりエスケープします。</target>
        </trans-unit>
        <trans-unit id="72a4e8e47da1c3186370a03fc43faed555a6af40" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;replace#kotlin.text%24replace(kotlin.CharSequence,%20kotlin.text.Regex,%20kotlin.String)/replacement&quot;&gt;replacement&lt;/a&gt; can consist of any combination of literal text and $-substitutions. To treat the replacement string literally escape it with the &lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement(kotlin.String)&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;replace#kotlin.text%24replace(kotlin.CharSequence,%20kotlin.text.Regex,%20kotlin.String)/replacement&quot;&gt;交換は&lt;/a&gt;リテラルテキストおよび$ -substitutionsの任意の組み合わせで構成されます。置換文字列を処理するには、&lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement(kotlin.String)&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt;メソッドを使用して文字通りエスケープします。</target>
        </trans-unit>
        <trans-unit id="95e9b2afeb8d6a526b5a01ab6cb37a3b2fbd3c86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!!&lt;/code&gt; Operator</source>
          <target state="translated">&lt;code&gt;!!&lt;/code&gt; オペレーター</target>
        </trans-unit>
        <trans-unit id="16f554cb9d6cac56c27af60060382d64762de72d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-d&lt;/code&gt; option indicates the output path for generated class files, which may be either a directory or a &lt;em&gt;.jar&lt;/em&gt; file. The &lt;code&gt;-include-runtime&lt;/code&gt; option makes the resulting &lt;em&gt;.jar&lt;/em&gt; file self-contained and runnable by including the Kotlin runtime library in it. If you want to see all available options run</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; オプションは、ディレクトリまたはいずれであってもよく生成されたクラスファイルの出力パス、を示す&lt;em&gt;の.jar&lt;/em&gt;ファイルを。 &lt;code&gt;-include-runtime&lt;/code&gt; オプションは、結果になり&lt;em&gt;の.jar&lt;/em&gt;ファイル自己完結型とその中にKotlinのランタイムライブラリを含めることによって実行可能に。利用可能なすべてのオプションの実行を確認したい場合</target>
        </trans-unit>
        <trans-unit id="22f7ccf0243674cea2ac7171ac3600509d7e8e7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-d&lt;/code&gt; option indicates what we want the output of the compiler to be called and may be either a directory name for class files or a &lt;em&gt;.jar&lt;/em&gt; file name. The &lt;code&gt;-include-runtime&lt;/code&gt; option makes the resulting &lt;em&gt;.jar&lt;/em&gt; file self-contained and runnable by including the Kotlin runtime library in it. If you want to see all available options run</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; オプションでは、我々は、コンパイラの出力が呼び出されると、クラスファイルのディレクトリ名またはのいずれであってもよい欲しいものを示している&lt;em&gt;の.jar&lt;/em&gt;ファイル名。 &lt;code&gt;-include-runtime&lt;/code&gt; オプションは、結果になり&lt;em&gt;の.jar&lt;/em&gt;ファイル自己完結型とその中にKotlinのランタイムライブラリを含めることによって実行可能に。利用可能なすべてのオプションを表示したい場合は、実行します</target>
        </trans-unit>
        <trans-unit id="c711aceaf8b8e464d66e1fd318914f03bac4786f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-meta-info&lt;/code&gt; option indicates that an additional JS file with binary meta-information about compiled kotlin code will be created.</source>
          <target state="translated">&lt;code&gt;-meta-info&lt;/code&gt; オプションは、コンパイルkotlinコードについてのバイナリメタ情報と追加のJSファイルが作成されることを示しています。</target>
        </trans-unit>
        <trans-unit id="dc6b8236cb90f6f8fe4324f1a0dc0ef9b906294c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.def&lt;/code&gt; file supports several options for adjusting the generated bindings.</source>
          <target state="translated">&lt;code&gt;.def&lt;/code&gt; ファイルが生成されたバインディングを調整するためのいくつかのオプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="73f8a4adb6a430053e582f21a1ecd992b4948729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.pointed&lt;/code&gt; property for &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; returns the lvalue of type &lt;code&gt;T&lt;/code&gt;, pointed by this pointer. The reverse operation is &lt;code&gt;.ptr&lt;/code&gt;: it takes the lvalue and returns the pointer to it.</source>
          <target state="translated">&lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; の &lt;code&gt;.pointed&lt;/code&gt; プロパティは、このポインターが指す &lt;code&gt;T&lt;/code&gt; 型の左辺値を返します。逆の操作は &lt;code&gt;.ptr&lt;/code&gt; です。左辺値を受け取り、そのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="6d8b85d101ff4f2f1b24686adcfb710c9930ca1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; operation is special: it is translated to a complex expression that screens for &lt;code&gt;null&lt;/code&gt;'s. &lt;code&gt;null == null&lt;/code&gt; is always true, and &lt;code&gt;x == null&lt;/code&gt; for a non-null &lt;code&gt;x&lt;/code&gt; is always false and won't invoke &lt;code&gt;x.equals()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 操作が特別である：それがためにスクリーンという複雑な式に変換され &lt;code&gt;null&lt;/code&gt; 「S。 &lt;code&gt;null == null&lt;/code&gt; 常に真であり、 &lt;code&gt;x == null&lt;/code&gt; null以外のための &lt;code&gt;x&lt;/code&gt; は常に偽であるとしません呼び出し &lt;code&gt;x.equals()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6bbc4d74ec596791bf71057157cc072f9f40333d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@BindView&lt;/code&gt; annotation is defined to be applied to the fields only, but the Kotlin compiler understands that and annotates the corresponding field under the hood when you apply the annotation to the whole property.</source>
          <target state="translated">&lt;code&gt;@BindView&lt;/code&gt; の注釈は、フィールドのみに適用されるように定義されていますが、Kotlinコンパイラはそれを理解し、あなたが全体のプロパティに注釈を適用するときにボンネットの下に、対応するフィールドに注釈を付けています。</target>
        </trans-unit>
        <trans-unit id="570e8cdd4880694f653c6df8b5e52b836ca08b91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JsExport&lt;/code&gt; annotation is available in the current default compiler backend and the new &lt;a href=&quot;js-ir-compiler&quot;&gt;IR compiler backend&lt;/a&gt;. If you are targeting the IR compiler backend, you &lt;strong&gt;must&lt;/strong&gt; use the &lt;code&gt;@JsExport&lt;/code&gt; annotation to make your functions visible from Kotlin in the first place.</source>
          <target state="translated">&lt;code&gt;@JsExport&lt;/code&gt; の注釈は、現在のデフォルトのコンパイラのバックエンドと新規に利用可能である&lt;a href=&quot;js-ir-compiler&quot;&gt;IRコンパイラのバックエンド&lt;/a&gt;。IRコンパイラバックエンドをターゲットにしている場合は、 &lt;code&gt;@JsExport&lt;/code&gt; アノテーションを使用して、Kotlinから関数を表示する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="027e903c95ee8bc2148123b05adc1c6430180f44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JsExport&lt;/code&gt; annotation is currently marked as experimental. Its design may change in future versions.</source>
          <target state="translated">&lt;code&gt;@JsExport&lt;/code&gt; の注釈は、現在実験としてマークされています。そのデザインは将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="1df3c0a179e9e6af77acfff08df64cc5248d7f9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JvmDefault&lt;/code&gt; annotation is experimental in Kotlin 1.3. Its name and behavior may change, leading to future incompatibility.</source>
          <target state="translated">&lt;code&gt;@JvmDefault&lt;/code&gt; の注釈はKotlin 1.3の実験です。その名前と動作は変更される可能性があり、将来の非互換性につながります。</target>
        </trans-unit>
        <trans-unit id="23f0d6b7e361daa5f829cff80c17a1080ce0221f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@UnderMigration&lt;/code&gt; annotation (provided in a separate artifact &lt;code&gt;kotlin-annotations-jvm&lt;/code&gt;) can be used by library maintainers to define the migration status for the nullability type qualifiers.</source>
          <target state="translated">&lt;code&gt;@UnderMigration&lt;/code&gt; の（別個のアーティファクトに設けられた注釈 &lt;code&gt;kotlin-annotations-jvm&lt;/code&gt; ）NULL可能タイプ修飾子の移行状態を定義するために、ライブラリ保守で使用することができます。</target>
        </trans-unit>
        <trans-unit id="bb1328f13d2922d7a316403f81e7c018a9247b4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt; representation of pointer parameters is designed to support C array literals without explicit native memory allocation. To construct the immutable self-contained sequence of C values, the following methods are provided:</source>
          <target state="translated">ポインターパラメーターの &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt; 表現は、明示的なネイティブメモリの割り当てなしでC配列リテラルをサポートするように設計されています。C値の不変の自己完結型シーケンスを構築するために、次のメソッドが提供されています。</target>
        </trans-unit>
        <trans-unit id="a1a03d0c25bc5cefc6e2a073c0dfa2fd3a424a42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Closeable.use&lt;/code&gt; function calls &lt;code&gt;Throwable.addSuppressed&lt;/code&gt; when an exception is thrown during closing the resource after some other exception.</source>
          <target state="translated">&lt;code&gt;Closeable.use&lt;/code&gt; の関数呼び出しは &lt;code&gt;Throwable.addSuppressed&lt;/code&gt; 例外が他のいくつかの例外の後のリソースをクローズ中にスローされたとき。</target>
        </trans-unit>
        <trans-unit id="a0327626fcb95882f9434dd6a1485603acf809a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyStruct&lt;/code&gt; and &lt;code&gt;MyUnion&lt;/code&gt; classes have the pointer to the native memory underneath. The memory will be released when a &lt;code&gt;memScoped&lt;/code&gt; function ends, which is equal to the end of its &lt;code&gt;block&lt;/code&gt;. Be careful to make sure that a pointer is not used outside of the &lt;code&gt;memScoped&lt;/code&gt; call. We may use &lt;code&gt;Arena()&lt;/code&gt; or &lt;code&gt;nativeHeap&lt;/code&gt; for pointers that should be available longer, or are cached inside a C library.</source>
          <target state="translated">&lt;code&gt;MyStruct&lt;/code&gt; と &lt;code&gt;MyUnion&lt;/code&gt; クラスは、ネイティブメモリの下へのポインタを持っています。メモリは、 &lt;code&gt;memScoped&lt;/code&gt; 関数が終了すると解放されます。これは、その &lt;code&gt;block&lt;/code&gt; 終了と同じです。ポインターが &lt;code&gt;memScoped&lt;/code&gt; 呼び出し以外で使用されないように注意してください。我々は使用することができます &lt;code&gt;Arena()&lt;/code&gt; または &lt;code&gt;nativeHeap&lt;/code&gt; を長く利用可能であるべきポインタのために、またはCライブラリの内部でキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="e163aa024140dbb6042ebda1a8af8dcaad09140b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Podspec&lt;/code&gt; file includes a path to an output framework and script phases that automate building this framework during the build process of an Xcode project.</source>
          <target state="translated">&lt;code&gt;Podspec&lt;/code&gt; のファイルは、自動化がXcodeプロジェクトのビルドプロセス中にこのフレームワークを構築し、出力フレームワークとスクリプトのフェーズへのパスが含まれています。</target>
        </trans-unit>
        <trans-unit id="e1e663158ad35ab7b0074a2786efe149637f58ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode/build.gradle&lt;/code&gt; file uses the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin to implement what we need. In the file, we define several targets &lt;code&gt;common&lt;/code&gt;, &lt;code&gt;android&lt;/code&gt;, and &lt;code&gt;iOS&lt;/code&gt;. Each target has its own platform. The &lt;code&gt;common&lt;/code&gt; target contains the Kotlin common code which is included into every platform compilation. It is allowed to have &lt;code&gt;expect&lt;/code&gt; declarations. Other targets provide &lt;code&gt;actual&lt;/code&gt; implementations for all &lt;code&gt;expect&lt;/code&gt;-actions from the &lt;code&gt;common&lt;/code&gt; target. The more detailed explanation of the multiplatform projects can be found on the &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;Multiplatform Projects&lt;/a&gt; documentation page.</source>
          <target state="translated">&lt;code&gt;SharedCode/build.gradle&lt;/code&gt; のファイルが使用しています &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 私たちが必要なものを実装するためのプラグインを。このファイルでは、 &lt;code&gt;common&lt;/code&gt; 、 &lt;code&gt;android&lt;/code&gt; 、および &lt;code&gt;iOS&lt;/code&gt; のいくつかのターゲットを定義しています。各ターゲットには独自のプラットフォームがあります。 &lt;code&gt;common&lt;/code&gt; の目標は、すべてのプラットフォームのコンパイルに含まれているKotlin共通のコードが含まれています。宣言を &lt;code&gt;expect&lt;/code&gt; ことが許可されています。他のターゲットは、 &lt;code&gt;common&lt;/code&gt; ターゲットからのすべての &lt;code&gt;expect&lt;/code&gt; アクションの &lt;code&gt;actual&lt;/code&gt; 実装を提供します。マルチプラットフォームプロジェクトの詳細については、マルチ&lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;プラットフォームプロジェクトの&lt;/a&gt;ドキュメントページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ef805264d2ba0e69f1525612b2097c56c9b79a21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode&lt;/code&gt; build generates iOS frameworks for use with the Xcode project. All frameworks are in the &lt;code&gt;SharedCode/build/bin&lt;/code&gt; folder. It creates a &lt;em&gt;debug&lt;/em&gt; and &lt;em&gt;release&lt;/em&gt; version for every framework target. The frameworks are in the following paths:</source>
          <target state="translated">&lt;code&gt;SharedCode&lt;/code&gt; のビルドには、Xcodeプロジェクトで使用するためのiOSフレームワークを生成します。すべてのフレームワークは &lt;code&gt;SharedCode/build/bin&lt;/code&gt; フォルダーにあります。すべてのフレームワークターゲットの&lt;em&gt;デバッグ&lt;/em&gt;バージョンと&lt;em&gt;リリース&lt;/em&gt;バージョンを作成します。フレームワークは次のパスにあります。</target>
        </trans-unit>
        <trans-unit id="49918eac55ef5c9d9df4be1f8508374502fa5919" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode&lt;/code&gt; sub-project should generate several artifacts for us:</source>
          <target state="translated">&lt;code&gt;SharedCode&lt;/code&gt; のサブプロジェクトでは、私たちのために、いくつかの成果物を生成する必要があります：</target>
        </trans-unit>
        <trans-unit id="738861947c8af30bd4668ff2083f0544a8963e87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings. All string literals in Kotlin programs, such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, are implemented as instances of this class.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; クラスは文字列を表します。 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; などのKotlinプログラムのすべての文字列リテラルは、このクラスのインスタンスとして実装されます。</target>
        </trans-unit>
        <trans-unit id="1109231b443cf6e05eb0d002d1e6b58cba8574e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeoutCancellationException&lt;/code&gt; that is thrown by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt; is a subclass of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt;. We have not seen its stack trace printed on the console before. That is because inside a cancelled coroutine &lt;code&gt;CancellationException&lt;/code&gt; is considered to be a normal reason for coroutine completion. However, in this example we have used &lt;code&gt;withTimeout&lt;/code&gt; right inside the &lt;code&gt;main&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;TimeoutCancellationException&lt;/code&gt; によってスローされ&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeoutは&lt;/a&gt;のサブクラスです&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt;。これまでにコンソールにスタックトレースが出力されたことはありません。これは、キャンセルされたコルーチンの内側で、 &lt;code&gt;CancellationException&lt;/code&gt; がコルーチンの完了の通常の理由と見なされるためです。ただし、この例では、 &lt;code&gt;main&lt;/code&gt; 関数内で &lt;code&gt;withTimeout&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="678b280d532baa9bcd8fba06428fcb263e6a4bcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Unit&lt;/code&gt; return type declaration is also optional. The above code is equivalent to:</source>
          <target state="translated">&lt;code&gt;Unit&lt;/code&gt; 戻り型の宣言も任意です。上記のコードは次と同等です。</target>
        </trans-unit>
        <trans-unit id="bb48ced54ff1266406f8ddf62204246a87b046d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;array.copyInto(targetArray, targetOffset, startIndex, endIndex)&lt;/code&gt; functions for the existing array types, including the unsigned arrays, make it easier to implement array-based containers in pure Kotlin.</source>
          <target state="translated">符号なし配列を含む既存の配列型の &lt;code&gt;array.copyInto(targetArray, targetOffset, startIndex, endIndex)&lt;/code&gt; 関数は、純粋なKotlinで配列ベースのコンテナーを実装することを容易にします。</target>
        </trans-unit>
        <trans-unit id="a6d3c63b724a00a7b22c190a90ba3fb846402424" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; blocks are tried in order until an exception type is found that matches the thrown exception (it doesn't need to be an exact match; the thrown exception's class can be a subclass of the declared one), and at most one &lt;code&gt;catch&lt;/code&gt; block will be executed. If no match is found, the exception bubbles out of the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 例外タイプがスローされた例外にマッチするまでブロックは（それが完全に一致する必要はありません。スローされた例外のクラスが1宣言のサブクラスすることができます）順序で試行され、そして多くても1つの &lt;code&gt;catch&lt;/code&gt; ブロック実行されます。一致が見つからない場合、例外は &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; からバブリングします。</target>
        </trans-unit>
        <trans-unit id="e92d0fff45fa528ec76156e8cf1a8aac33dfa367" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cocoapods&lt;/code&gt; block can include dependencies to Pods stored locally and Pods from the CocoaPods repository at the same time.</source>
          <target state="translated">&lt;code&gt;cocoapods&lt;/code&gt; のCocoaPodsからローカルに格納されたポッドポッドへの依存関係を含むことができ、ブロックは、同時にリポジトリ。</target>
        </trans-unit>
        <trans-unit id="c0fef9a879817509a3ced8499c0b86da8348957d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;component1()&lt;/code&gt; and &lt;code&gt;component2()&lt;/code&gt; functions are another example of the &lt;em&gt;principle of conventions&lt;/em&gt; widely used in Kotlin (see operators like &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;, &lt;em&gt;for&lt;/em&gt;-loops etc.). Anything can be on the right-hand side of a destructuring declaration, as long as the required number of component functions can be called on it. And, of course, there can be &lt;code&gt;component3()&lt;/code&gt; and &lt;code&gt;component4()&lt;/code&gt; and so on.</source>
          <target state="translated">&lt;code&gt;component1()&lt;/code&gt; 及び &lt;code&gt;component2()&lt;/code&gt; 関数は、別の例である&lt;em&gt;規則の原理&lt;/em&gt;広くKotlinで使用される（等オペレータ参照 &lt;code&gt;+&lt;/code&gt; 及び &lt;code&gt;*&lt;/code&gt; を、&lt;em&gt;ため&lt;/em&gt; -loops等）。必要な数のコンポーネント関数を呼び出すことができる限り、構造化宣言の右側に何でも置くことができます。そしてもちろん、 &lt;code&gt;component3()&lt;/code&gt; や &lt;code&gt;component4()&lt;/code&gt; などもあります。</target>
        </trans-unit>
        <trans-unit id="c908c6361f3f878795986cf1aacec3df19a47af2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;componentN()&lt;/code&gt; operator functions are not called for the components that are skipped in this way.</source>
          <target state="translated">&lt;code&gt;componentN()&lt;/code&gt; 演算子関数は、このようにスキップされるコンポーネントに呼び出されていません。</target>
        </trans-unit>
        <trans-unit id="7d4ca598e9322020fabb7ed0f0cf080beed5a640" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dynamic&lt;/code&gt; type basically turns off Kotlin's type checker:</source>
          <target state="translated">&lt;code&gt;dynamic&lt;/code&gt; タイプは、基本的には、Kotlinの型チェッカーオフにします。</target>
        </trans-unit>
        <trans-unit id="51e19e38be808ad0fddd91d78f8820fc196fada7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;external&lt;/code&gt; modifier</source>
          <target state="translated">&lt;code&gt;external&lt;/code&gt; 修飾子</target>
        </trans-unit>
        <trans-unit id="6672d0616428f2de367eecabae3ac9b311e7f971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;external&lt;/code&gt; modifier is only allowed on package-level declarations. You can't declare an &lt;code&gt;external&lt;/code&gt; member of a non-&lt;code&gt;external&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;external&lt;/code&gt; 改質剤のみのパッケージレベルの宣言では許可されています。 &lt;code&gt;external&lt;/code&gt; クラスの &lt;code&gt;external&lt;/code&gt; メンバーを宣言することはできません。</target>
        </trans-unit>
        <trans-unit id="3b6dae5981e61870a0a711096ca1cc69db0e7e4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;field&lt;/code&gt; identifier can only be used in the accessors of the property.</source>
          <target state="translated">&lt;code&gt;field&lt;/code&gt; 識別子は、専用のプロパティのアクセサに使用することができます。</target>
        </trans-unit>
        <trans-unit id="a8755ff22ac11729e9e1bb025cf0c2f08d13b24b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally&lt;/code&gt; block (if any) is executed at the end, no matter what the outcome is: either after the try block completes successfully, or after a catch block is executed (even if another exception is thrown by the catch block), or if no matching catch is found.</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 成功したtryブロックが完了した後、またはcatchブロックが（別の例外がcatchブロックによってスローされた場合でも）実行された後、または場合は、次のいずれか（もしあれば）、最後に結果が何であるかに関係なく実行されるブロック一致するキャッチは見つかりません。</target>
        </trans-unit>
        <trans-unit id="6e147b02bdfa0081a311ca1a27d8c44534b54856" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; functions in the &lt;code&gt;HTML&lt;/code&gt; class are defined similarly to &lt;code&gt;html&lt;/code&gt;. The only difference is that they add the built instances to the &lt;code&gt;children&lt;/code&gt; collection of the enclosing &lt;code&gt;HTML&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;HTML&lt;/code&gt; クラスの &lt;code&gt;head&lt;/code&gt; 関数と &lt;code&gt;body&lt;/code&gt; 関数は、 &lt;code&gt;html&lt;/code&gt; と同様に定義されています。唯一の違いは、それらが、囲まれた &lt;code&gt;HTML&lt;/code&gt; インスタンスの &lt;code&gt;children&lt;/code&gt; コレクションに構築されたインスタンスを追加することです。</target>
        </trans-unit>
        <trans-unit id="770f5ab17d8a9531f1b79df0e83aa540310bf343" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; keyword is not restricted to importing classes; you can also use it to import other declarations:</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; キーワードは、クラスをインポートするに限定されません。これを使用して他の宣言をインポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="41a9e375e0ec0d5188379910e6d4cc759d4c0ed4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inc()&lt;/code&gt; and &lt;code&gt;dec()&lt;/code&gt; functions must return a value, which will be assigned to the variable on which the &lt;code&gt;++&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt; operation was used. They shouldn't mutate the object on which the &lt;code&gt;inc&lt;/code&gt; or &lt;code&gt;dec&lt;/code&gt; was invoked.</source>
          <target state="translated">&lt;code&gt;inc()&lt;/code&gt; と &lt;code&gt;dec()&lt;/code&gt; 関数は、どの変数に割り当てられる値は、返さなければならない &lt;code&gt;++&lt;/code&gt; または &lt;code&gt;--&lt;/code&gt; 操作を使用したが。それらは、 &lt;code&gt;inc&lt;/code&gt; または &lt;code&gt;dec&lt;/code&gt; が呼び出されたオブジェクトを変更してはなりません。</target>
        </trans-unit>
        <trans-unit id="2a8bc7470da685195a735f122f1c7a64a5a63c8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; modifier affects both the function itself and the lambdas passed to it: all of those will be inlined into the call site.</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 修飾子は、関数自体と、それに渡されたラムダの両方に影響します。これらのすべては、呼び出しサイトにインライン化されます。</target>
        </trans-unit>
        <trans-unit id="4c1794e25137b28059a2347a21857b9a05912426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; modifier can be used on accessors of properties that don't have a backing field. You can annotate individual property accessors:</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 修飾子は、バッキングフィールドを持たないプロパティのアクセサに使用することができます。個々のプロパティアクセサーに注釈を付けることができます。</target>
        </trans-unit>
        <trans-unit id="2e8761b1965ac33697b654aacb6b2483099da851" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;internal&lt;/code&gt; visibility modifier means that the member is visible within the same module. More specifically, a module is a set of Kotlin files compiled together:</source>
          <target state="translated">&lt;code&gt;internal&lt;/code&gt; 部材は、同じモジュール内に表示されていることを視認性改質手段。より具体的には、モジュールは一緒にコンパイルされたKotlinファイルのセットです。</target>
        </trans-unit>
        <trans-unit id="5524830c2792b87628c40ec57ff6cb705892ec15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interop.def&lt;/code&gt; file is enough to compile and run the application or open it in an IDE. Now it is time to create project files, open the project in &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; and run it.</source>
          <target state="translated">&lt;code&gt;interop.def&lt;/code&gt; ファイルには、アプリケーションをコンパイルして実行するか、またはIDEで開くのに十分です。プロジェクトファイルを作成し、&lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEAで&lt;/a&gt;プロジェクトを開いて実行します。</target>
        </trans-unit>
        <trans-unit id="44ba6fd4ed404417523557c04ecd859c9b045fe5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin also uses configurations under the hood but it also provides a &lt;code&gt;dependencies&lt;/code&gt; block for each source set allowing configuring dependencies of this sources set:</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインはまた、フードの下で設定を使用し、それはまた、提供する &lt;code&gt;dependencies&lt;/code&gt; 設定され、このソースの構成の依存関係を可能にする各ソース・セットのブロック：</target>
        </trans-unit>
        <trans-unit id="2df8274be5a77a61c0bfa9793c6436553cef29b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin works with Gradle 6.0 or later.</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインはGradleの6.0以降で動作します。</target>
        </trans-unit>
        <trans-unit id="adb02342d7ce602f18e1bc8edea76f179234a358" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.js&lt;/code&gt; file should be referenced first as it is used by our application</source>
          <target state="translated">&lt;code&gt;kotlin.js&lt;/code&gt; それは我々のアプリケーションで使用されるファイルが最初に参照する必要があります</target>
        </trans-unit>
        <trans-unit id="d33f6d3213f1661b13836e07ebfe17d21d08c317" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.text.Regex&lt;/code&gt; class has become &lt;code&gt;Serializable&lt;/code&gt; and can now be used in serializable hierarchies.</source>
          <target state="translated">&lt;code&gt;kotlin.text.Regex&lt;/code&gt; のクラスでは、となっています &lt;code&gt;Serializable&lt;/code&gt; を、今、シリアライズ階層で使用することができます。</target>
        </trans-unit>
        <trans-unit id="4ac18e700523e48dabd941ad751d3aef964b3a3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;last&lt;/code&gt; element of the progression is calculated this way:</source>
          <target state="translated">進行の &lt;code&gt;last&lt;/code&gt; 要素は次のように計算されます。</target>
        </trans-unit>
        <trans-unit id="3bdd0dba3711de41e882257acdc9d6c6d0be76b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lateinit&lt;/code&gt; modifier can now be used on top-level properties and local variables. The latter can be used, for example, when a lambda passed as a constructor argument to one object refers to another object which has to be defined later:</source>
          <target state="translated">&lt;code&gt;lateinit&lt;/code&gt; 修飾子は現在トップレベルのプロパティおよびローカル変数に使用することができます。後者は、たとえば、コンストラクターの引数として1つのオブジェクトに渡されたラムダが、後で定義する必要がある別のオブジェクトを参照する場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="43331c82f7829c2da5f8833182cec47167e9b99d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;libnative&lt;/code&gt; is used as the library name, the generated header file name prefix. It is also prefixes all declarations in the header file.</source>
          <target state="translated">&lt;code&gt;libnative&lt;/code&gt; はライブラリ名、生成されたヘッダファイル名の接頭辞として使用されます。また、ヘッダーファイル内のすべての宣言の前に置かれます。</target>
        </trans-unit>
        <trans-unit id="bbfbe4356895f41e445e2fe6cf1eee9c6b52bcaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; structure contains several helper functions:</source>
          <target state="translated">&lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; の構造は、いくつかのヘルパー関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="31fcc81919bad97de24dff6463d9620cad90a047" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log&lt;/code&gt; function prints the name of the thread in square brackets and you can see, that it is the &lt;code&gt;main&lt;/code&gt; thread, but the identifier of the currently executing coroutine is appended to it. This identifier is consecutively assigned to all created coroutines when debugging mode is turned on.</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 機能は、角括弧内のスレッドの名前を印刷し、あなたが見ることができ、それがあることを &lt;code&gt;main&lt;/code&gt; スレッドが、現在実行中のコルーチンの識別子が、それに付加されます。この識別子は、デバッグモードがオンの場合、作成されたすべてのコルーチンに連続して割り当てられます。</target>
        </trans-unit>
        <trans-unit id="d6f1794c043d2601c1f38c209a2b74f37608e11a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log&lt;/code&gt; function prints the name of the thread in square brackets, and you can see that it is the &lt;code&gt;main&lt;/code&gt; thread with the identifier of the currently executing coroutine appended to it. This identifier is consecutively assigned to all created coroutines when the debugging mode is on.</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 機能は、角括弧内のスレッドの名前を印刷し、そしてあなたはそれがあることを確認することができ &lt;code&gt;main&lt;/code&gt; 、それに追加現在実行中のコルーチンの識別子を持つ糸。この識別子は、デバッグモードがオンのときに、作成されたすべてのコルーチンに連続して割り当てられます。</target>
        </trans-unit>
        <trans-unit id="3230b15e19fadbbe8582fc37fac536f21d903134" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;memoizedFoo&lt;/code&gt; variable will be computed on the first access only. If &lt;code&gt;someCondition&lt;/code&gt; fails, the variable won't be computed at all.</source>
          <target state="translated">&lt;code&gt;memoizedFoo&lt;/code&gt; の変数は、最初のアクセスで計算されます。場合 &lt;code&gt;someCondition&lt;/code&gt; が失敗し、変数はすべてで計算されることはありません。</target>
        </trans-unit>
        <trans-unit id="33d6683731510016eab36ef3fe8c81b5c054cb1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;metaInfo&lt;/code&gt; option is useful, if you want to distribute the result of translation as a Kotlin/JavaScript library. If &lt;code&gt;metaInfo&lt;/code&gt; was set to &lt;code&gt;true&lt;/code&gt;, then during compilation additional JS file with binary metadata will be created. This file should be distributed together with the result of translation:</source>
          <target state="translated">&lt;code&gt;metaInfo&lt;/code&gt; あなたはKotlin / JavaScriptライブラリとして翻訳の結果を配布する場合のオプションは、便利です。場合は &lt;code&gt;metaInfo&lt;/code&gt; に設定した &lt;code&gt;true&lt;/code&gt; 、バイナリメタデータを編集、追加のJSファイル中に作成されます。このファイルは、翻訳結果とともに配布する必要があります。</target>
        </trans-unit>
        <trans-unit id="ef6518091f136fea33cc33006301200c71352567" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mod&lt;/code&gt; operator is now deprecated, and &lt;code&gt;rem&lt;/code&gt; is used instead. See &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-14650&quot;&gt;this issue&lt;/a&gt; for motivation.</source>
          <target state="translated">&lt;code&gt;mod&lt;/code&gt; 演算子は廃止され、そして &lt;code&gt;rem&lt;/code&gt; 代わりに使用されます。動機については、&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-14650&quot;&gt;この問題&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8110b7b8d3687de9aeddaa2e0ee4cc0fcd8589ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provideDelegate&lt;/code&gt; method is called for each property during the creation of the &lt;code&gt;MyUI&lt;/code&gt; instance, and it performs the necessary validation right away.</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; の方法は、作成時に各プロパティに対して呼び出される &lt;code&gt;MyUI&lt;/code&gt; の場合、それはすぐに必要な検証を行います。</target>
        </trans-unit>
        <trans-unit id="553371a8f2ee3223a5555190c34ffafc9965ea1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provideDelegate&lt;/code&gt; method will be called for each property during the creation of a &lt;code&gt;MyUI&lt;/code&gt; instance, and it can perform the necessary validation right away.</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; の方法は、作成時に各プロパティの呼び出されます &lt;code&gt;MyUI&lt;/code&gt; のインスタンス、およびそれがすぐに必要な検証を行うことができます。</target>
        </trans-unit>
        <trans-unit id="3ced8435cd27ad8472273c2b70edbb4e6fae0033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strict&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; values have the same meaning as those of &lt;code&gt;MigrationStatus&lt;/code&gt;, and only the &lt;code&gt;strict&lt;/code&gt; mode affects the types in the annotated declarations as they are seen in Kotlin.</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; 、 &lt;code&gt;warn&lt;/code&gt; および &lt;code&gt;ignore&lt;/code&gt; 値がのと同じ意味を有する &lt;code&gt;MigrationStatus&lt;/code&gt; を、そして唯一の &lt;code&gt;strict&lt;/code&gt; モードは、彼らがKotlinに見られるとして注釈宣言内の型に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="b73370969f5202ffabe72c59e5b9b17674a895a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toast&lt;/code&gt; function is defined in the &lt;a href=&quot;https://github.com/Kotlin/anko&quot;&gt;Anko&lt;/a&gt; library.</source>
          <target state="translated">&lt;code&gt;toast&lt;/code&gt; 機能は、で定義されている&lt;a href=&quot;https://github.com/Kotlin/anko&quot;&gt;アンコの&lt;/a&gt;ライブラリ。</target>
        </trans-unit>
        <trans-unit id="28d1165f482266ce4727ebc682f071fdd99069b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typedef struct { .. } TYPE_NAME&lt;/code&gt; syntax is used in C language to declare a structure. &lt;a href=&quot;https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions&quot;&gt;The thread&lt;/a&gt; provides more explanations of that pattern.</source>
          <target state="translated">&lt;code&gt;typedef struct { .. } TYPE_NAME&lt;/code&gt; 構文は、構造を宣言するためにC言語で使用されています。&lt;a href=&quot;https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions&quot;&gt;スレッド&lt;/a&gt;は、そのパターンの詳細な説明を提供します。</target>
        </trans-unit>
        <trans-unit id="98db59501bac8408cab0fac3a9f3341579e6d212" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the specified name does not match any of the enum constants defined in the class.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; メソッドは、スロー &lt;code&gt;IllegalArgumentException&lt;/code&gt; 指定された名前はクラスで定義された列挙定数のいずれかと一致しない場合。</target>
        </trans-unit>
        <trans-unit id="3e338c07817ae57fb7dbab7add74e2021cf2d7f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;version&lt;/code&gt; should be literal in this block, and it cannot be applied from another build script.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; このブロック内のリテラルであるべきであり、それは別のビルドスクリプトから適用することはできません。</target>
        </trans-unit>
        <trans-unit id="271e23dc79ae024533b3813b505d0f8c07b0807d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; loop is similar to Python (but keep in mind that the condition must be an actual boolean expression, as there's no concept of truthy or falsy values).</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; ループは（truthyまたはfalsy値の概念がないとしてではなく、条件が実際のブール式でなければならないことに注意してください）Pythonのに似ています。</target>
        </trans-unit>
        <trans-unit id="223ff8adc648a88f8fddcdbfcf941801bfcdb1cf" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;New Project&lt;/em&gt; wizard in IntelliJ IDEA can be used to start a new Kotlin/Native project with just one click. Check out the &lt;em&gt;Kotlin&lt;/em&gt; section and select the &lt;em&gt;Native | Gradle&lt;/em&gt; option to generate the project. For a better understanding and to explain what's happening, in this tutorial we'll create the project manually.</source>
          <target state="translated">IntelliJ IDEA の&lt;em&gt;新規プロジェクト&lt;/em&gt;ウィザードを使用すると、ワンクリックで新しいKotlin /ネイティブプロジェクトを開始できます。&lt;em&gt;Kotlin&lt;/em&gt;セクションをチェックして、&lt;em&gt;ネイティブ&lt;/em&gt;を選択してください&lt;em&gt;。&lt;/em&gt;プロジェクトを生成する&lt;em&gt;Gradle&lt;/em&gt;オプション。理解を深め、何が起こっているのかを説明するために、このチュートリアルではプロジェクトを手動で作成します。</target>
        </trans-unit>
        <trans-unit id="7d53f956418818285247311dbf9f12e622bd802b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;by&lt;/em&gt;-clause in the supertype list for &lt;code&gt;Derived&lt;/code&gt; indicates that &lt;code&gt;b&lt;/code&gt; will be stored internally in objects of &lt;code&gt;Derived&lt;/code&gt; and the compiler will generate all the methods of &lt;code&gt;Base&lt;/code&gt; that forward to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">ためのスーパータイプのリストで-clause &lt;code&gt;Derived&lt;/code&gt; ことを示す &lt;code&gt;b&lt;/code&gt; 対象の内部に格納される &lt;code&gt;Derived&lt;/code&gt; の全てと、コンパイラが生成するメソッド &lt;code&gt;Base&lt;/code&gt; フォワードと &lt;code&gt;b&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="213b555bea1db5677fa1e760ddedf7cc9bc757bb" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;else&lt;/em&gt; branch is evaluated if none of the other branch conditions are satisfied. If &lt;em&gt;when&lt;/em&gt; is used as an expression, the &lt;em&gt;else&lt;/em&gt; branch is mandatory, unless the compiler can prove that all possible cases are covered with branch conditions (as, for example, with &lt;a href=&quot;enum-classes&quot;&gt;&lt;em&gt;enum&lt;/em&gt; class&lt;/a&gt; entries and &lt;a href=&quot;sealed-classes&quot;&gt;&lt;em&gt;sealed&lt;/em&gt; class&lt;/a&gt; subtypes).</source>
          <target state="translated">&lt;em&gt;それ以外の&lt;/em&gt;他の分岐条件のどれもが満たされていない場合は、分岐が評価されます。&lt;em&gt;when&lt;/em&gt;が式として使用される場合&lt;em&gt;、&lt;/em&gt;可能なすべてのケースが分岐条件（たとえば、&lt;a href=&quot;enum-classes&quot;&gt;&lt;em&gt;列挙型&lt;/em&gt;&lt;/a&gt;クラスエントリや&lt;a href=&quot;sealed-classes&quot;&gt;&lt;em&gt;封印された&lt;/em&gt;&lt;/a&gt;クラスサブタイプなど）でカバーされていることをコンパイラーが証明できない限り、&lt;em&gt;else&lt;/em&gt;分岐は必須です。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="61bf16ef28ea6d5682c3a6e4f7b1d1fca409774d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;is&lt;/em&gt; operator checks if an expression is an instance of a type. If an immutable local variable or property is checked for a specific type, there's no need to cast it explicitly:</source>
          <target state="translated">&lt;em&gt;ある&lt;/em&gt;式が型のインスタンスである場合にオペレータをチェックします。不変のローカル変数またはプロパティが特定の型についてチェックされている場合、明示的にキャストする必要はありません。</target>
        </trans-unit>
        <trans-unit id="f6350fa23a8337c14451639e9dda41ba02fbc154" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;kotlin-maven-plugin&lt;/em&gt; compiles Kotlin sources and modules. Currently only Maven v3 is supported.</source>
          <target state="translated">&lt;em&gt;kotlin-のmaven-pluginの&lt;/em&gt;コンパイルKotlin源とモジュール。現在、Maven v3のみがサポートされています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
