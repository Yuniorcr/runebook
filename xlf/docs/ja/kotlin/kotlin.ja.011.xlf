<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="5edd040d6f4c8ad9b18d73f7926255fa6764d0b8" translate="yes" xml:space="preserve">
          <source>As the command line parameter, use &lt;code&gt;-Pkotlin.incremental&lt;/code&gt; or &lt;code&gt;-Pkotlin.incremental.js&lt;/code&gt; with the boolean value reflecting the usage of incremental compilation.</source>
          <target state="translated">コマンドラインパラメーターとして、 &lt;code&gt;-Pkotlin.incremental&lt;/code&gt; または &lt;code&gt;-Pkotlin.incremental.js&lt;/code&gt; を使用し、ブール値はインクリメンタルコンパイルの使用法を反映します。</target>
        </trans-unit>
        <trans-unit id="5a2f37014fdc09535abad4023c6b450a2b899b17" translate="yes" xml:space="preserve">
          <source>As the platforms are different, targets are built in different ways as well and have various platform-specific settings. The Gradle plugin bundles a number of presets for the supported platforms.</source>
          <target state="translated">プラットフォームが異なるため、ターゲットも同様に異なる方法で構築されており、プラットフォーム固有の様々な設定を持っています。Gradle プラグインには、サポートされているプラットフォーム用の多数のプリセットがバンドルされています。</target>
        </trans-unit>
        <trans-unit id="c94dcb3870be9d6216468092f76cf2e236049a84" translate="yes" xml:space="preserve">
          <source>As the third parameter, specify the path to &lt;code&gt;Podspec&lt;/code&gt; of the local Pod using &lt;code&gt;project.file(..)&lt;/code&gt;.</source>
          <target state="translated">3番目のパラメーターとして、 &lt;code&gt;project.file(..)&lt;/code&gt; を使用してローカルポッドの &lt;code&gt;Podspec&lt;/code&gt; へのパスを指定します。</target>
        </trans-unit>
        <trans-unit id="43e93e982fbf27b175ee52afaca49428156c5004" translate="yes" xml:space="preserve">
          <source>As this is key to understanding how Kotlin is moving forward, let's expand on these principles.</source>
          <target state="translated">コトリンがどのように進んでいるのかを理解するための鍵となるので、これらの原則を広げてみましょう。</target>
        </trans-unit>
        <trans-unit id="d8a6951b471083df17ec063563955cea5aec3f48" translate="yes" xml:space="preserve">
          <source>As we can see, we've eliminated the explicit variable declarations in the Kotlin version, but everything else is pretty much verbatim to the C version. All the calls we'd expect in the &lt;code&gt;libcurl&lt;/code&gt; library are available in their Kotlin equivalent.</source>
          <target state="translated">ご覧のように、Kotlinバージョンでは明示的な変数宣言を削除しましたが、その他はすべてCバージョンとほとんど同じです。 &lt;code&gt;libcurl&lt;/code&gt; ライブラリで期待するすべての呼び出しは、Kotlinの同等の関数で利用できます。</target>
        </trans-unit>
        <trans-unit id="9beef94ae067e63cbd9e59d894b27cdc816aa2f7" translate="yes" xml:space="preserve">
          <source>As we have studied before, cancellation is a bidirectional relationship propagating through the whole coroutines hierarchy. But what if unidirectional cancellation is required?</source>
          <target state="translated">以前にも勉強したように、キャンセルはコーチンの階層全体を伝搬する双方向の関係です。しかし、一方向性のキャンセルが必要な場合はどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="1713b2a9d43cfa6a9db5c2c80eb267dd2e28729e" translate="yes" xml:space="preserve">
          <source>As we have studied before, cancellation is a bidirectional relationship propagating through the whole hierarchy of coroutines. Let us take a look at the case when unidirectional cancellation is required.</source>
          <target state="translated">これまで勉強してきたように、キャンセルはコルーチンの階層全体を伝搬する双方向の関係です。一方向性のキャンセルが必要な場合を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="b64b2981e63e1536aa67f1172fa99896be6284dc" translate="yes" xml:space="preserve">
          <source>As we mentioned above, Kotlin does not have checked exceptions. So, normally, the Java signatures of Kotlin functions do not declare exceptions thrown. Thus if we have a function in Kotlin like this:</source>
          <target state="translated">前述したように、Kotlinにはチェック済みの例外はありません。そのため、通常、Kotlinの関数のJavaシグネチャでは、スローされた例外は宣言されていません。したがって、Kotlinにこのような関数があったとします。</target>
        </trans-unit>
        <trans-unit id="08396bfca73f3c35212459154b28f8878108768a" translate="yes" xml:space="preserve">
          <source>As we mentioned before, we stick to making things explicit in Kotlin. And unlike Java, Kotlin requires explicit modifiers for overridable members (we call them &lt;em&gt;open&lt;/em&gt;) and for overrides:</source>
          <target state="translated">前に述べたように、Kotlinで物事を明示的にすることに固執します。Javaとは異なり、Kotlinはオーバーライド可能なメンバー（&lt;em&gt;open&lt;/em&gt;と呼ぶ）とオーバーライドに対して明示的な修飾子を必要とします。</target>
        </trans-unit>
        <trans-unit id="df863543f29ddc3af4cf8577dbf69c3145ac20fd" translate="yes" xml:space="preserve">
          <source>As we mentioned before, we stick to making things explicit in Kotlin. So, Kotlin requires explicit modifiers for overridable members (we call them &lt;em&gt;open&lt;/em&gt;) and for overrides:</source>
          <target state="translated">前に述べたように、Kotlinでは物事を明示的にすることに固執しています。そのため、Kotlinでは、オーバーライド可能なメンバー（&lt;em&gt;オープン&lt;/em&gt;と呼びます）およびオーバーライドに対して明示的な修飾子が必要です。</target>
        </trans-unit>
        <trans-unit id="0253e410893c125101fd61e2b655187a42457a6c" translate="yes" xml:space="preserve">
          <source>As we said above, the &lt;code&gt;[]&lt;/code&gt; operation stands for calls to member functions &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;set()&lt;/code&gt;.</source>
          <target state="translated">上記で述べたように、 &lt;code&gt;[]&lt;/code&gt; 操作はメンバー関数 &lt;code&gt;get()&lt;/code&gt; および &lt;code&gt;set()&lt;/code&gt; の呼び出しを表します。</target>
        </trans-unit>
        <trans-unit id="f6bc0d71d02feb935761c2fec09157ddb18fef0a" translate="yes" xml:space="preserve">
          <source>As with all-open, add the plugin JAR file to the compiler plugin classpath and specify annotations or presets:</source>
          <target state="translated">all-open と同様に、プラグイン JAR ファイルをコンパイラ・プラグインのクラスパスに追加し、アノテーションまたはプリセットを指定します。</target>
        </trans-unit>
        <trans-unit id="e700fa017eccf7f4f99be1f93fd46c19e29e9465" translate="yes" xml:space="preserve">
          <source>As with all-open, add the plugin to the buildscript dependencies:</source>
          <target state="translated">all-open と同様に、buildscript の依存関係にプラグインを追加します。</target>
        </trans-unit>
        <trans-unit id="0ddb289577a5748be89057d32163008e7c2b82ca" translate="yes" xml:space="preserve">
          <source>As with other function literals, if the function takes one parameter (other than the receiver object that it is invoked on), the single parameter is implicitly called &lt;code&gt;it&lt;/code&gt;, unless you declare another name. If it takes more than one parameter, you must declare their names.</source>
          <target state="translated">関数は（それが呼び出されたことを受信者オブジェクト以外の）一つのパラメータを取る場合は、他の関数リテラルと同じように、単一のパラメータは、暗黙的に呼び出され &lt;code&gt;it&lt;/code&gt; 別の名前を宣言しない限り、。複数のパラメーターを使用する場合は、それらの名前を宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="b55d293aa5b5fcb60313adc4451f1ab3f4ccc0ab" translate="yes" xml:space="preserve">
          <source>As with the &lt;em&gt;kotlin-spring&lt;/em&gt; plugin wrapped on top of &lt;em&gt;all-open&lt;/em&gt;, &lt;em&gt;kotlin-jpa&lt;/em&gt; is wrapped on top of &lt;em&gt;no-arg&lt;/em&gt;. The plugin specifies &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt;&lt;code&gt;@Entity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt;&lt;code&gt;@Embeddable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt;&lt;code&gt;@MappedSuperclass&lt;/code&gt;&lt;/a&gt;&lt;em&gt;no-arg&lt;/em&gt; annotations automatically.</source>
          <target state="translated">&lt;em&gt;オールオープンの&lt;/em&gt;上にラップされた&lt;em&gt;kotlin-spring&lt;/em&gt;プラグインと同様に、&lt;em&gt;kotlin-jpa&lt;/em&gt;は&lt;em&gt;no-argの&lt;/em&gt;上にラップされます。プラグインは、&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt; &lt;code&gt;@Embeddable&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt; &lt;code&gt;@Entity&lt;/code&gt; &lt;/a&gt;、@ Embeddable、および&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt; &lt;code&gt;@MappedSuperclass&lt;/code&gt; &lt;/a&gt;&lt;em&gt;の引数なしの&lt;/em&gt;アノテーションを自動的に指定します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b3a2c907f41578ca82056398084f5bd35172b8f8" translate="yes" xml:space="preserve">
          <source>As with the &lt;em&gt;kotlin-spring&lt;/em&gt; plugin, &lt;em&gt;kotlin-jpa&lt;/em&gt; is a wrapped on top of &lt;em&gt;no-arg&lt;/em&gt;. The plugin specifies &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt;&lt;code&gt;@Entity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt;&lt;code&gt;@Embeddable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt;&lt;code&gt;@MappedSuperclass&lt;/code&gt;&lt;/a&gt;&lt;em&gt;no-arg&lt;/em&gt; annotations automatically.</source>
          <target state="translated">同様に&lt;em&gt;kotlinスプリング&lt;/em&gt;プラグイン、&lt;em&gt;kotlin-JPAは&lt;/em&gt;の上にラップされている&lt;em&gt;引数なし&lt;/em&gt;。プラグインは&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt; &lt;code&gt;@Entity&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt; &lt;code&gt;@Embeddable&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt; &lt;code&gt;@MappedSuperclass&lt;/code&gt; &lt;/a&gt;&lt;em&gt; no-arg&lt;/em&gt;アノテーションを自動的に指定します。</target>
        </trans-unit>
        <trans-unit id="68d1e9ff2648dcea56d6c6f57453efa33c7feb3b" translate="yes" xml:space="preserve">
          <source>As you can see in this example, the annotated function appears to be a part of the &lt;code&gt;@ExperimentalDateTime&lt;/code&gt; experimental API. So, the described way of acceptance propagates the experimental status to the code that uses an experimental API; its clients will be required to accept it as well. To use multiple experimental APIs, annotate the declaration with all their markers.</source>
          <target state="translated">この例でわかるように、注釈付き関数は &lt;code&gt;@ExperimentalDateTime&lt;/code&gt; 実験的APIの一部であるように見えます。したがって、説明した受け入れ方法は、試験的なステータスを試験的なAPIを使用するコードに伝播します。そのクライアントもそれを受け入れる必要があります。複数の実験的APIを使用するには、宣言にすべてのマーカーで注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="cc87d19acb232a1d83499d511bd23cda3c0080c6" translate="yes" xml:space="preserve">
          <source>As you can see, now this loop is cancelled. &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html&quot;&gt;isActive&lt;/a&gt; is an extension property available inside the coroutine via the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; object.</source>
          <target state="translated">ご覧のとおり、このループはキャンセルされています。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html&quot;&gt;isActive&lt;/a&gt;は、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;オブジェクトを介してコルーチン内で使用できる拡張プロパティです。</target>
        </trans-unit>
        <trans-unit id="7352fb651c3772692a032dbe42546dd641670912" translate="yes" xml:space="preserve">
          <source>As you can see, only the first two coroutines had printed a message and the others were cancelled by a single invocation of &lt;code&gt;job.cancel()&lt;/code&gt; in &lt;code&gt;Activity.destroy()&lt;/code&gt;.</source>
          <target state="translated">あなたが見ることができるように、最初の2つのだけコルーチンは、メッセージを印刷していたし、他のものは、単一の呼び出しによってキャンセルされた &lt;code&gt;job.cancel()&lt;/code&gt; 内 &lt;code&gt;Activity.destroy()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c55419c015865a616e5464887b91f2221ed1c04e" translate="yes" xml:space="preserve">
          <source>As you can see, only the first two coroutines print a message and the others are cancelled by a single invocation of &lt;code&gt;job.cancel()&lt;/code&gt; in &lt;code&gt;Activity.destroy()&lt;/code&gt;.</source>
          <target state="translated">あなたが見ることができるように、最初の2つのだけコルーチンは、メッセージなどを印刷する単一の呼び出しによってキャンセルされている &lt;code&gt;job.cancel()&lt;/code&gt; 中 &lt;code&gt;Activity.destroy()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7b66783a2aeaef0abd85ccec69670f515a360a3" translate="yes" xml:space="preserve">
          <source>As you see, Kotlin aims to create very concise and readable JavaScript allowing us to interact with it as needed. One question of course is why go to all this trouble to as opposed to just use &lt;code&gt;console.log()&lt;/code&gt;. Obviously this is a very simple example that shows the basics of how it works and we've focused on analysing the output. As application complexity grows, the benefits of using Kotlin and static typing start to become more apparent.</source>
          <target state="translated">ご覧のとおり、Kotlinは非常に簡潔で読みやすいJavaScriptを作成し、必要に応じてJavaScriptを操作できるようにすることを目的としています。もちろん1つの質問は、単に &lt;code&gt;console.log()&lt;/code&gt; を使用するのではなく、このすべての問題に行く理由です。明らかにこれは非常に単純な例であり、それがどのように機能するかの基本を示し、出力の分析に焦点を当ててきました。アプリケーションの複雑さが増すにつれて、Kotlinと静的型付けを使用することの利点がより明白になります。</target>
        </trans-unit>
        <trans-unit id="421389931a4f34efe05c30826b90917d2975e478" translate="yes" xml:space="preserve">
          <source>As you see, in some aspects lists are very similar to arrays. However, there is one important difference: an array's size is defined upon initialization and is never changed; in turn, a list doesn't have a predefined size; a list's size can be changed as a result of write operations: adding, updating, or removing elements.</source>
          <target state="translated">ご覧のように、リストはある面では配列と非常によく似ています。それは、配列のサイズは初期化時に定義され、変更されることがないということです。</target>
        </trans-unit>
        <trans-unit id="e3292c12a856a02722a46d87471ff4e6faefa104" translate="yes" xml:space="preserve">
          <source>AssertionError</source>
          <target state="translated">AssertionError</target>
        </trans-unit>
        <trans-unit id="afab27ed2b3bea84dc85860592e64030242b513a" translate="yes" xml:space="preserve">
          <source>Assign the result of &lt;code&gt;a.inc()&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;;</source>
          <target state="translated">結果割り当てる &lt;code&gt;a.inc()&lt;/code&gt; に; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="34d89e7d6622db7d49c6f03cc2b51debfd79dc46" translate="yes" xml:space="preserve">
          <source>Assign the result of &lt;code&gt;a0.inc()&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;;</source>
          <target state="translated">結果割り当てる &lt;code&gt;a0.inc()&lt;/code&gt; に; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bfc2ce14690efbfc3e5f03f1bd9d81c65e09d6d4" translate="yes" xml:space="preserve">
          <source>AssignedNodesOptions</source>
          <target state="translated">AssignedNodesOptions</target>
        </trans-unit>
        <trans-unit id="c3dff150477195e5af84d55a29e3417947cf6401" translate="yes" xml:space="preserve">
          <source>AssociatedObjectKey</source>
          <target state="translated">AssociatedObjectKey</target>
        </trans-unit>
        <trans-unit id="bc4637d011ec1e897c4f35d1c0564ca5d6270854" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">指定された&lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;値&lt;/a&gt;をマップ内の指定された&lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;キー&lt;/a&gt;に関連付けます。</target>
        </trans-unit>
        <trans-unit id="039c6decd3896a4156afbd4bf6a0ebad01f7c4c8" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/value&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/key&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">指定された&lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/value&quot;&gt;値&lt;/a&gt;をマップ内の指定された&lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/key&quot;&gt;キー&lt;/a&gt;に関連付けます。</target>
        </trans-unit>
        <trans-unit id="abf408e5ce9df9297b5724dfc0aa196f0ea492ef" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fvalue&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fkey&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">指定された&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fvalue&quot;&gt;値&lt;/a&gt;をマップ内の指定された&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fkey&quot;&gt;キー&lt;/a&gt;に関連付けます。</target>
        </trans-unit>
        <trans-unit id="71f97c4356aa08d827089563a0021dca22efc19a" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)/value&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)/key&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">指定された&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)/value&quot;&gt;値&lt;/a&gt;をマップ内の指定された&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)/key&quot;&gt;キー&lt;/a&gt;に関連付けます。</target>
        </trans-unit>
        <trans-unit id="4f6905f1353a5a56ec02146382ec893696f10bfb" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">指定された&lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;値&lt;/a&gt;をマップ内の指定された&lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;キー&lt;/a&gt;に関連付けます。</target>
        </trans-unit>
        <trans-unit id="474780bfd61f09d7e1a6cde45d5c2a71f5f24780" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/value&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/key&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">指定された&lt;a href=&quot;put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/value&quot;&gt;値&lt;/a&gt;をマップ内の指定された&lt;a href=&quot;put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/key&quot;&gt;キー&lt;/a&gt;に関連付けます。</target>
        </trans-unit>
        <trans-unit id="1948b8a73d1cd0190740c5b39d682043e8e45d4f" translate="yes" xml:space="preserve">
          <source>Association</source>
          <target state="translated">Association</target>
        </trans-unit>
        <trans-unit id="8395c0a0a207934d59566106bad22ec2ff5eb59e" translate="yes" xml:space="preserve">
          <source>Assume that we have two suspending functions defined elsewhere that do something useful like some kind of remote service call or computation. We just pretend they are useful, but actually each one just delays for a second for the purpose of this example:</source>
          <target state="translated">他の場所で定義されている、ある種のリモートサービスコールや計算のような有用なことを行う2つのサスペンド関数があるとします。これらの関数は便利なふりをしていますが、実際には、この例の目的のために、それぞれの関数が1秒だけ遅延しているだけです。</target>
        </trans-unit>
        <trans-unit id="c3aa4978e4d58ec2c7d3b82f0965d81efb4db15b" translate="yes" xml:space="preserve">
          <source>Assume that you have a list of words. The code below filters the words longer than three characters and prints the lengths of first four such words.</source>
          <target state="translated">単語のリストがあるとします。以下のコードは、3文字より長い単語をフィルタリングし、そのような単語の最初の4つの長さを表示します。</target>
        </trans-unit>
        <trans-unit id="79861cda45d1d1336e91c18e019c28d9b3291f82" translate="yes" xml:space="preserve">
          <source>Assuming we have the following project layout</source>
          <target state="translated">以下のようなプロジェクトレイアウトがあるとします。</target>
        </trans-unit>
        <trans-unit id="d7a00b0d9f24fd10ce1bc320970a529790a5b81e" translate="yes" xml:space="preserve">
          <source>Async-style functions</source>
          <target state="translated">非同期スタイルの関数</target>
        </trans-unit>
        <trans-unit id="5f0c15c7899512dbe26911df30eecdd90eaafd60" translate="yes" xml:space="preserve">
          <source>Async: returning a value from a coroutine</source>
          <target state="translated">Async:コアーチンから値を返す</target>
        </trans-unit>
        <trans-unit id="4a98d707e385c86f0c101a642eb19f1b3d755a3e" translate="yes" xml:space="preserve">
          <source>Asynchronous Flow</source>
          <target state="translated">非同期フロー</target>
        </trans-unit>
        <trans-unit id="8148eff566285bcd48743fb742f972c7a1dd962f" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming</source>
          <target state="translated">非同期プログラミング</target>
        </trans-unit>
        <trans-unit id="bb7e30cd8cfe981829ae3dbd4f1b57e04eede4d9" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming Techniques</source>
          <target state="translated">非同期プログラミング技法</target>
        </trans-unit>
        <trans-unit id="e2607ac70e77e7024a19441f977aa15dcc598da2" translate="yes" xml:space="preserve">
          <source>Asynchronous or non-blocking programming is the new reality. Whether we're creating server-side, desktop or mobile applications, it's important that we provide an experience that is not only fluid from the user's perspective, but scalable when needed.</source>
          <target state="translated">非同期プログラミングやノンブロッキングプログラミングは新しい現実です。サーバーサイド、デスクトップ、モバイルのいずれのアプリケーションを作成するにしても、ユーザーの視点から流動的であるだけでなく、必要に応じてスケーラブルな体験を提供することが重要です。</target>
        </trans-unit>
        <trans-unit id="8c962fbddfbed98bc56b92b68db40e062e436b77" translate="yes" xml:space="preserve">
          <source>Asynchronous timeout and resources</source>
          <target state="translated">非同期タイムアウトとリソース</target>
        </trans-unit>
        <trans-unit id="c90a909b33ae5b355a043d0fe5cf66963c82e15f" translate="yes" xml:space="preserve">
          <source>At first sight, inline classes may appear to be very similar to &lt;a href=&quot;type-aliases&quot;&gt;type aliases&lt;/a&gt;. Indeed, both seem to introduce a new type and both will be represented as the underlying type at runtime.</source>
          <target state="translated">一見すると、インラインクラスは&lt;a href=&quot;type-aliases&quot;&gt;タイプエイリアス&lt;/a&gt;に非常に似ているように見える場合があります。実際、どちらも新しいタイプを導入しているようで、どちらも実行時に基本タイプとして表されます。</target>
        </trans-unit>
        <trans-unit id="4c1c4f3d0549737a69f500db6e62443a19d51d14" translate="yes" xml:space="preserve">
          <source>At most one Java class (and as many Java interfaces as you like) can be a supertype for a class in Kotlin.</source>
          <target state="translated">Kotlinでは、クラスのスーパータイプにできるのは、最大で1つのJavaクラス(そして好きなだけのJavaインターフェイス)です。</target>
        </trans-unit>
        <trans-unit id="3ca268b94cd98a6448db35d4377a0662bccdcb59" translate="yes" xml:space="preserve">
          <source>At the call site, inline accessors are inlined as regular inline functions.</source>
          <target state="translated">呼び出しサイトでは、インラインアクセサは通常のインライン関数としてインライン化されます。</target>
        </trans-unit>
        <trans-unit id="ee1f6327a5680b8affafb58ed8775299673d7bbf" translate="yes" xml:space="preserve">
          <source>At the call sites, which function to use is determined from the type of the arguments:</source>
          <target state="translated">呼び出し先では、引数の型からどの関数を使うかが決まります。</target>
        </trans-unit>
        <trans-unit id="776e970e6527bb2e679d37cd7d85af476c65df75" translate="yes" xml:space="preserve">
          <source>At this point we can start writing Kotlin code. For this sample, we're going to write some code that will print a string out to the console window.</source>
          <target state="translated">この時点でKotlinのコードを書き始めることができます。今回のサンプルでは、コンソールウィンドウに文字列を出力するコードを書いてみます。</target>
        </trans-unit>
        <trans-unit id="4e8863167b77086ca7c7ae08d20e28d919c8bb33" translate="yes" xml:space="preserve">
          <source>At this point, we should be able to compile and run the Android application</source>
          <target state="translated">この時点で、Androidアプリケーションをコンパイルして実行できるようになっているはずです。</target>
        </trans-unit>
        <trans-unit id="6242af7a693eecb27b33a26762af854b2d88d142" translate="yes" xml:space="preserve">
          <source>At this point, we should have a Gradle project that is ready to be opened in an IDE. IntelliJ IDEA (CLion, AppCode, or AndroidStudio) helps us to generate the &lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;Gradle Wrapper&lt;/a&gt; scripts for our project.</source>
          <target state="translated">この時点で、IDEで開く準備ができているGradleプロジェクトができているはずです。IntelliJ IDEA（CLion、AppCode、またはAndroidStudio）は、プロジェクトの&lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;Gradleラッパー&lt;/a&gt;スクリプトを生成するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f92583dde928fd145b3d96c6ab04278084ac9ae1" translate="yes" xml:space="preserve">
          <source>At this time, JavaScript does not support the full Kotlin reflection API. The only supported part of the API is the &lt;code&gt;::class&lt;/code&gt; syntax which allows you to refer to the class of an instance, or the class corresponding to the given type. The value of a &lt;code&gt;::class&lt;/code&gt; expression is a stripped-down &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt; implementation that only supports the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/simple-name&quot;&gt;simpleName&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/is-instance&quot;&gt;isInstance&lt;/a&gt; members.</source>
          <target state="translated">現時点では、JavaScriptはKotlinリフレクションAPIを完全にはサポートしていません。 APIでサポートされる唯一の部分は、 &lt;code&gt;::class&lt;/code&gt; 構文です。これにより、インスタンスのクラス、または指定されたタイプに対応するクラスを参照できます。 &lt;code&gt;::class&lt;/code&gt; 式の値は、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/simple-name&quot;&gt;simpleName&lt;/a&gt;および&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/is-instance&quot;&gt;isInstance&lt;/a&gt;メンバーのみをサポートする、簡略化された&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt;実装です。</target>
        </trans-unit>
        <trans-unit id="b1093ec23519e17835b710a2e546cfab3df5cdd9" translate="yes" xml:space="preserve">
          <source>Atomic Kotlin</source>
          <target state="translated">アトミックコトリン</target>
        </trans-unit>
        <trans-unit id="7d3ac242b6d27572d34300c15efdc9401c78d30a" translate="yes" xml:space="preserve">
          <source>Atomic lazy initializer, could be used in frozen objects, freezes initializing lambda, so use very carefully. Also, as with other uses of an &lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; may potentially leak memory, so it is recommended to use &lt;code&gt;atomicLazy&lt;/code&gt; in cases of objects living forever, such as object signletons, or in cases where it's guaranteed not to have cyclical garbage.</source>
          <target state="translated">アトミックレイジーイニシャライザーは、凍結されたオブジェクトで使用でき、初期化ラムダを凍結するため、注意深く使用してください。また、&lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReferenceの&lt;/a&gt;他の使用と同様に、メモリリークが発生する可能性があるため、オブジェクトサインレットなどの永遠に存続するオブジェクトの場合、または循環ガベージがないことが保証されている場合は、 &lt;code&gt;atomicLazy&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="aa8f18c35a25de30768b4c0929995f133f360d46" translate="yes" xml:space="preserve">
          <source>Atomic primitives and references</source>
          <target state="translated">原子プリミティブと参照</target>
        </trans-unit>
        <trans-unit id="3e3527d53d19dec4d8e1e33d95793431aa83f1ca" translate="yes" xml:space="preserve">
          <source>Atomic values and freezing: atomics &lt;a href=&quot;-atomic-int/index&quot;&gt;AtomicInt&lt;/a&gt;, &lt;a href=&quot;-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;, &lt;a href=&quot;-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt; and &lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; are unique types with regard to freezing. Namely, they provide mutating operations, while can participate in frozen subgraphs. So shared frozen objects can have fields of atomic types.</source>
          <target state="translated">原子値とフリーズ：&lt;a href=&quot;-atomic-int/index&quot;&gt;atomics AtomicInt&lt;/a&gt;、&lt;a href=&quot;-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;、&lt;a href=&quot;-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt;、および&lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt;は、フリーズに関してユニークなタイプです。つまり、フリーズされたサブグラフに参加できる一方で、それらは変更操作を提供します。したがって、共有された凍結オブジェクトは、アトミックタイプのフィールドを持つことができます。</target>
        </trans-unit>
        <trans-unit id="ff80b7bb0582527dccb6953af274f0c41a527a8d" translate="yes" xml:space="preserve">
          <source>Atomic values and freezing: atomics &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-int/index&quot;&gt;AtomicInt&lt;/a&gt;, &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;, &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt; and &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; are unique types with regard to freezing. Namely, they provide mutating operations, while can participate in frozen subgraphs. So shared frozen objects can have fields of atomic types.</source>
          <target state="translated">原子値とフリーズ：&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-int/index&quot;&gt;atomics AtomicInt&lt;/a&gt;、&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;、&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt;、および&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt;は、フリーズに関してユニークなタイプです。つまり、フリーズされたサブグラフに参加できる一方で、それらは変更操作を提供します。したがって、共有された凍結オブジェクトは、アトミックタイプのフィールドを持つことができます。</target>
        </trans-unit>
        <trans-unit id="f3220b8f47f19733bfedcab3d792dd6ebcbb2870" translate="yes" xml:space="preserve">
          <source>Atomic values and freezing: atomics &lt;a href=&quot;index&quot;&gt;AtomicInt&lt;/a&gt;, &lt;a href=&quot;../-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;, &lt;a href=&quot;../-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt; and &lt;a href=&quot;../-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; are unique types with regard to freezing. Namely, they provide mutating operations, while can participate in frozen subgraphs. So shared frozen objects can have fields of atomic types.</source>
          <target state="translated">原子値とフリーズ：&lt;a href=&quot;index&quot;&gt;atomics AtomicInt&lt;/a&gt;、&lt;a href=&quot;../-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;、&lt;a href=&quot;../-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt;、および&lt;a href=&quot;../-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt;は、フリーズに関してユニークなタイプです。つまり、フリーズされたサブグラフに参加できる一方で、それらは変更操作を提供します。したがって、共有された凍結オブジェクトは、アトミックタイプのフィールドを持つことができます。</target>
        </trans-unit>
        <trans-unit id="d29876e6e5c1007b7487d4800ff3326a46fdfe37" translate="yes" xml:space="preserve">
          <source>AtomicInt</source>
          <target state="translated">AtomicInt</target>
        </trans-unit>
        <trans-unit id="c6711287dc9369302489e77fcf65d42a31c0643c" translate="yes" xml:space="preserve">
          <source>AtomicLong</source>
          <target state="translated">AtomicLong</target>
        </trans-unit>
        <trans-unit id="b10e4647607e2f28f754fdbd9c0031e65869ad2c" translate="yes" xml:space="preserve">
          <source>AtomicNativePtr</source>
          <target state="translated">AtomicNativePtr</target>
        </trans-unit>
        <trans-unit id="cd0e6702ca5c371f1347949dd4a2eec403216573" translate="yes" xml:space="preserve">
          <source>AtomicReference</source>
          <target state="translated">AtomicReference</target>
        </trans-unit>
        <trans-unit id="6b9263c0c045b4b22f5e194c58e2e0998a48c054" translate="yes" xml:space="preserve">
          <source>Attaches previously detached object subgraph created by &lt;a href=&quot;-detached-object-graph/index&quot;&gt;DetachedObjectGraph&lt;/a&gt;. Please note, that once object graph is attached, the DetachedObjectGraph.stable pointer does not have sense anymore, and shall be discarded.</source>
          <target state="translated">&lt;a href=&quot;-detached-object-graph/index&quot;&gt;DetachedObjectGraph&lt;/a&gt;によって作成された、以前に切り離されたオブジェクトサブグラフをアタッチします。オブジェクトグラフがアタッチされると、DetachedObjectGraph.stableポインタは無効になり、破棄されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dc219046f9dd12cc6f54ad2da0d81941959336bb" translate="yes" xml:space="preserve">
          <source>Attaches previously detached object subgraph created by &lt;a href=&quot;-detached-object-graph/index&quot;&gt;DetachedObjectGraph&lt;/a&gt;. Please note, that once object graph is attached, the DetachedObjectGraph.stable pointer does not make sense anymore, and shall be discarded, so attach of one DetachedObjectGraph object can only happen once.</source>
          <target state="translated">&lt;a href=&quot;-detached-object-graph/index&quot;&gt;DetachedObjectGraph&lt;/a&gt;によって作成された以前に切り離されたオブジェクトサブグラフを添付します。オブジェクトグラフがアタッチされると、DetachedObjectGraph.stableポインターは意味をなさなくなり、破棄されるため、1つのDetachedObjectGraphオブジェクトのアタッチは1回だけ発生することに注意してください。</target>
        </trans-unit>
        <trans-unit id="85360aaf61fcc41844144d2a436522c4272bcaf6" translate="yes" xml:space="preserve">
          <source>Attaches previously detached object subgraph created by &lt;a href=&quot;index&quot;&gt;DetachedObjectGraph&lt;/a&gt;. Please note, that once object graph is attached, the DetachedObjectGraph.stable pointer does not have sense anymore, and shall be discarded.</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;DetachedObjectGraph&lt;/a&gt;によって作成された、以前に切り離されたオブジェクトサブグラフをアタッチします。オブジェクトグラフがアタッチされると、DetachedObjectGraph.stableポインタは無効になり、破棄されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d464a203d18b4acdef1cb9b5e6d79361554aa421" translate="yes" xml:space="preserve">
          <source>Attaches previously detached object subgraph created by &lt;a href=&quot;index&quot;&gt;DetachedObjectGraph&lt;/a&gt;. Please note, that once object graph is attached, the DetachedObjectGraph.stable pointer does not make sense anymore, and shall be discarded, so attach of one DetachedObjectGraph object can only happen once.</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;DetachedObjectGraph&lt;/a&gt;によって作成された以前に切り離されたオブジェクトサブグラフを添付します。オブジェクトグラフがアタッチされると、DetachedObjectGraph.stableポインターは意味をなさなくなり、破棄されるため、1つのDetachedObjectGraphオブジェクトのアタッチは1回だけ発生することに注意してください。</target>
        </trans-unit>
        <trans-unit id="3e04925abe583687ef35f1c1ca19b4070dadb97b" translate="yes" xml:space="preserve">
          <source>Attempts to access a member on a &lt;code&gt;null&lt;/code&gt; reference of a &lt;a href=&quot;java-interop#null-safety-and-platform-types&quot;&gt;platform type&lt;/a&gt;;</source>
          <target state="translated">&lt;a href=&quot;java-interop#null-safety-and-platform-types&quot;&gt;プラットフォーム型の&lt;/a&gt; &lt;code&gt;null&lt;/code&gt; 参照でメンバーにアクセスしようとします。</target>
        </trans-unit>
        <trans-unit id="f38b115c0558078590578144f222487894baa182" translate="yes" xml:space="preserve">
          <source>Attempts to match the entire &lt;a href=&quot;match-entire#kotlin.text.Regex%24matchEntire%28kotlin.CharSequence%29%2Finput&quot;&gt;input&lt;/a&gt; CharSequence against the pattern.</source>
          <target state="translated">&lt;a href=&quot;match-entire#kotlin.text.Regex%24matchEntire%28kotlin.CharSequence%29%2Finput&quot;&gt;入力&lt;/a&gt; CharSequence 全体をパターンと照合しようとします。</target>
        </trans-unit>
        <trans-unit id="3961ecca8671626370b3766776c20dc21550b18a" translate="yes" xml:space="preserve">
          <source>Attempts to match the entire &lt;a href=&quot;match-entire#kotlin.text.Regex%24matchEntire(kotlin.CharSequence)/input&quot;&gt;input&lt;/a&gt; CharSequence against the pattern.</source>
          <target state="translated">&lt;a href=&quot;match-entire#kotlin.text.Regex%24matchEntire(kotlin.CharSequence)/input&quot;&gt;入力&lt;/a&gt;CharSequence全体をパターンと照合しようとします。</target>
        </trans-unit>
        <trans-unit id="1e354738ed906b6023210a6af2ec10c3fd9cc557" translate="yes" xml:space="preserve">
          <source>Attempts to reduce storage used for this string builder.</source>
          <target state="translated">この文字列ビルダで使用するストレージの削減を試みます。</target>
        </trans-unit>
        <trans-unit id="0a3992a6a4aa368ee211c9a5ef66edcf44867dac" translate="yes" xml:space="preserve">
          <source>Attributes Common for JVM and JS</source>
          <target state="translated">JVMとJSに共通の属性</target>
        </trans-unit>
        <trans-unit id="19e61d54f451b94d2a537e89732db95c83678a6f" translate="yes" xml:space="preserve">
          <source>Attributes Common for JVM, JS, and JS DCE</source>
          <target state="translated">JVM、JS、JS DCEに共通の属性</target>
        </trans-unit>
        <trans-unit id="df5c20aa22a21e846f82b7e3de20a361b9409ec8" translate="yes" xml:space="preserve">
          <source>Attributes Specific for JS</source>
          <target state="translated">JSに固有の属性</target>
        </trans-unit>
        <trans-unit id="f2b02b6aea1831e52d168cd65816378536e73e3e" translate="yes" xml:space="preserve">
          <source>Attributes Specific for JVM</source>
          <target state="translated">JVMに固有の属性</target>
        </trans-unit>
        <trans-unit id="bc7039e1aba846721ec623985d2d40d6de32dcac" translate="yes" xml:space="preserve">
          <source>Attributes common for JVM and JS</source>
          <target state="translated">JVMとJSに共通の属性</target>
        </trans-unit>
        <trans-unit id="e487d31ee714c363147bda3038882243c57cd4e1" translate="yes" xml:space="preserve">
          <source>Attributes common for JVM, JS, and JS DCE</source>
          <target state="translated">JVM、JS、JS DCEに共通の属性</target>
        </trans-unit>
        <trans-unit id="3a04a6e86e3fe7f9d64d5f2e9b362b660d514689" translate="yes" xml:space="preserve">
          <source>Attributes common for kotlinc and kotlin2js</source>
          <target state="translated">kotlinc と kotlin2js で共通の属性</target>
        </trans-unit>
        <trans-unit id="58a9f1cbcc06a3468059fe9cb6b0bd7ec18ece90" translate="yes" xml:space="preserve">
          <source>Attributes specific for JS</source>
          <target state="translated">JSに固有の属性</target>
        </trans-unit>
        <trans-unit id="3e62e54f4e49fd8be02c1ea2299e7299a8d38dee" translate="yes" xml:space="preserve">
          <source>Attributes specific for JVM</source>
          <target state="translated">JVMに固有の属性</target>
        </trans-unit>
        <trans-unit id="4c30a80ce09bd22cb712da2e47c2b70c6a7dbc6d" translate="yes" xml:space="preserve">
          <source>AudioTrack</source>
          <target state="translated">AudioTrack</target>
        </trans-unit>
        <trans-unit id="6075948adfa60c73f74f563f8feb4a98403ab458" translate="yes" xml:space="preserve">
          <source>Augmented assignments</source>
          <target state="translated">拡張された割り当て</target>
        </trans-unit>
        <trans-unit id="834e7a793c079da4161fe6e5f43f722449edfaff" translate="yes" xml:space="preserve">
          <source>Authors of existing projects may choose to explicitly declare using the old code style in a project (this way the project won't be affected by switching to the defaults in the future)</source>
          <target state="translated">既存のプロジェクトの作者は、プロジェクトで古いコードスタイルを使用することを明示的に宣言することができます (この方法では、将来的にデフォルトのコードスタイルに切り替えてもプロジェクトに影響はありません)。</target>
        </trans-unit>
        <trans-unit id="698d12054509449dda459aba97ce14ac599bf62a" translate="yes" xml:space="preserve">
          <source>Authors of existing projects may choose to migrate to the Kotlin Coding Conventions</source>
          <target state="translated">既存のプロジェクトの著者は、Kotlin コーディング規約への移行を選択することができます。</target>
        </trans-unit>
        <trans-unit id="5b21b0d1957d77cbce2fde42083342b94ff6d7b9" translate="yes" xml:space="preserve">
          <source>AutofreeScope</source>
          <target state="translated">AutofreeScope</target>
        </trans-unit>
        <trans-unit id="ed639df7587daa7f0e2a83a2efdab37263d53336" translate="yes" xml:space="preserve">
          <source>Automatic Configuration</source>
          <target state="translated">自動設定</target>
        </trans-unit>
        <trans-unit id="f7df104fa9dfba3548d0c4684bc5a40afaa99b57" translate="yes" xml:space="preserve">
          <source>Automatically assigned ids are good when coroutines log often and you just need to correlate log records coming from the same coroutine. However, when a coroutine is tied to the processing of a specific request or doing some specific background task, it is better to name it explicitly for debugging purposes. The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html&quot;&gt;CoroutineName&lt;/a&gt; context element serves the same purpose as the thread name. It is included in the thread name that is executing this coroutine when the &lt;a href=&quot;#debugging-coroutines-and-threads&quot;&gt;debugging mode&lt;/a&gt; is turned on.</source>
          <target state="translated">自動的に割り当てられたIDは、コルーチンが頻繁にログを記録し、同じコルーチンからのログレコードを相互に関連付ける必要がある場合に適しています。ただし、コルーチンが特定の要求の処理または特定のバックグラウンドタスクの実行に関連付けられている場合は、デバッグのために明示的に名前を付けることをお勧めします。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html&quot;&gt;CoroutineNameの&lt;/a&gt;コンテキスト要素は、スレッド名と同じ目的を果たします。これは、&lt;a href=&quot;#debugging-coroutines-and-threads&quot;&gt;デバッグモード&lt;/a&gt;がオンになっているときにこのコルーチンを実行しているスレッド名に含まれています。</target>
        </trans-unit>
        <trans-unit id="e62729f2b2555d5d8ac4915829fe367bb5ae7e91" translate="yes" xml:space="preserve">
          <source>Automatically assigned ids are good when coroutines log often and you just need to correlate log records coming from the same coroutine. However, when coroutine is tied to the processing of a specific request or doing some specific background task, it is better to name it explicitly for debugging purposes. &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html&quot;&gt;CoroutineName&lt;/a&gt; context element serves the same function as a thread name. It'll get displayed in the thread name that is executing this coroutine when &lt;a href=&quot;#debugging-coroutines-and-threads&quot;&gt;debugging mode&lt;/a&gt; is turned on.</source>
          <target state="translated">コルーチンが頻繁にログを記録し、同じコルーチンからのログレコードを関連付ける必要がある場合は、自動的に割り当てられるIDが適しています。ただし、コルーチンが特定の要求の処理または特定のバックグラウンドタスクの実行に関連付けられている場合は、デバッグのために明示的に名前を付けることをお勧めします。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html&quot;&gt;CoroutineName&lt;/a&gt;コンテキスト要素は、スレッド名と同じ機能を果たします。&lt;a href=&quot;#debugging-coroutines-and-threads&quot;&gt;デバッグモード&lt;/a&gt;がオンの場合、このコルーチンを実行しているスレッド名に表示されます。</target>
        </trans-unit>
        <trans-unit id="dedf9e0b9e549511e84f9a55d3b042ca74de957a" translate="yes" xml:space="preserve">
          <source>Availability by default</source>
          <target state="translated">デフォルトでの利用可能性</target>
        </trans-unit>
        <trans-unit id="7c0e3548596e9319d754a7ccf13706332d8c4cb9" translate="yes" xml:space="preserve">
          <source>Available at runtime but is not visible during compilation of any module.</source>
          <target state="translated">実行時に利用可能ですが、モジュールのコンパイル時には表示されません。</target>
        </trans-unit>
        <trans-unit id="19e5fd6a644635fee9a19be8333a112f913920e1" translate="yes" xml:space="preserve">
          <source>Available values are similar to Maven.</source>
          <target state="translated">利用可能な値はMavenに似ています。</target>
        </trans-unit>
        <trans-unit id="925c5bacdb9d1f8779aa51c640f5ff726fe66e5b" translate="yes" xml:space="preserve">
          <source>Available values are: &lt;code&gt;plain&lt;/code&gt;, &lt;code&gt;amd&lt;/code&gt;, &lt;code&gt;commonjs&lt;/code&gt;, &lt;code&gt;umd&lt;/code&gt;.</source>
          <target state="translated">使用可能な値は、 &lt;code&gt;plain&lt;/code&gt; 、 &lt;code&gt;amd&lt;/code&gt; 、 &lt;code&gt;commonjs&lt;/code&gt; 、 &lt;code&gt;umd&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="14ae1302612f3a72a72bfd1d8a4999912d2ff46d" translate="yes" xml:space="preserve">
          <source>Available values are: &lt;code&gt;umd&lt;/code&gt; (default), &lt;code&gt;commonjs&lt;/code&gt;, &lt;code&gt;amd&lt;/code&gt;, &lt;code&gt;plain&lt;/code&gt;.</source>
          <target state="translated">使用可能な値は、 &lt;code&gt;umd&lt;/code&gt; （デフォルト）、 &lt;code&gt;commonjs&lt;/code&gt; 、 &lt;code&gt;amd&lt;/code&gt; 、 &lt;code&gt;plain&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="163b0272f1313b7d3ab40d92011eb45565a061a9" translate="yes" xml:space="preserve">
          <source>Avoid using multiple labeled returns in a lambda. Consider restructuring the lambda so that it will have a single exit point. If that's not possible or not clear enough, consider converting the lambda into an anonymous function.</source>
          <target state="translated">ラムダで複数のラベル付きリターンを使用しないようにしてください。ラムダを再構築して、単一の終了点を持つようにすることを検討してください。それが不可能な場合や十分に明確でない場合は、ラムダを匿名関数に変換することを検討してください。</target>
        </trans-unit>
        <trans-unit id="f61994132eb4d79c6aaf7ca511db5a42493392ec" translate="yes" xml:space="preserve">
          <source>Avoiding redundant constructs</source>
          <target state="translated">冗長な構成を避ける</target>
        </trans-unit>
        <trans-unit id="d05fb01e0b399387c3a28586f5fd296e2670d6a3" translate="yes" xml:space="preserve">
          <source>BINARY</source>
          <target state="translated">BINARY</target>
        </trans-unit>
        <trans-unit id="40f11d3ad003725179d3a62fbf2b87b2339ec88d" translate="yes" xml:space="preserve">
          <source>BOTTOM_UP</source>
          <target state="translated">BOTTOM_UP</target>
        </trans-unit>
        <trans-unit id="ddfff385b1434a7625c985e9f1d31a3cd0752508" translate="yes" xml:space="preserve">
          <source>BOUNDARY_NEUTRAL</source>
          <target state="translated">BOUNDARY_NEUTRAL</target>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">Background</target>
        </trans-unit>
        <trans-unit id="1f8df48cbdf6e9bb3b2a296fc43fa4bd2dbc081a" translate="yes" xml:space="preserve">
          <source>Backing Fields</source>
          <target state="translated">バッキングフィールド</target>
        </trans-unit>
        <trans-unit id="ba9525e05855250ce336ac7c2b4ab8bd18b3201d" translate="yes" xml:space="preserve">
          <source>Backing Properties</source>
          <target state="translated">バッキング特性</target>
        </trans-unit>
        <trans-unit id="631fe8fd6cc851cadc4405bb7dd43652aea1c83c" translate="yes" xml:space="preserve">
          <source>BarProp</source>
          <target state="translated">BarProp</target>
        </trans-unit>
        <trans-unit id="69c20ffdfd0584cd6a1117171a685097ea27aca9" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;実装の基本クラス。</target>
        </trans-unit>
        <trans-unit id="15d35858275d06dd03861a24397a3ce986f4354b" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;-coroutine-context/-key&quot;&gt;CoroutineContext.Key&lt;/a&gt; associated with polymorphic &lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementation. Polymorphic element implementation implies delegating its &lt;a href=&quot;-coroutine-context/-element/get&quot;&gt;get&lt;/a&gt; and &lt;a href=&quot;-coroutine-context/-element/minus-key&quot;&gt;minusKey&lt;/a&gt; to &lt;a href=&quot;get-polymorphic-element&quot;&gt;getPolymorphicElement&lt;/a&gt; and &lt;a href=&quot;minus-polymorphic-key&quot;&gt;minusPolymorphicKey&lt;/a&gt; respectively.</source>
          <target state="translated">多態的な&lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;実装に関連付けられた&lt;a href=&quot;-coroutine-context/-key&quot;&gt;CoroutineContext.Keyの&lt;/a&gt;基本クラス。ポリモーフィック要素の実装は、&lt;a href=&quot;-coroutine-context/-element/get&quot;&gt;get&lt;/a&gt;と&lt;a href=&quot;-coroutine-context/-element/minus-key&quot;&gt;minusKey&lt;/a&gt;をそれぞれ&lt;a href=&quot;get-polymorphic-element&quot;&gt;getPolymorphicElement&lt;/a&gt;と&lt;a href=&quot;minus-polymorphic-key&quot;&gt;minusPolymorphicKeyに&lt;/a&gt;委任することを意味します。</target>
        </trans-unit>
        <trans-unit id="7243152aff3a19217da0e810a6a6b21b0ed42228" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;../-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;実装の基本クラス。</target>
        </trans-unit>
        <trans-unit id="3dbb332a4302b9a6be036aad90c3597ea0d446a7" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../../kotlin.coroutines.experimental/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.coroutines.experimental/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;実装の基本クラス。</target>
        </trans-unit>
        <trans-unit id="64721f5bd5bf9cb87511e3b2df6546bc5436e2d1" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;実装の基本クラス。</target>
        </trans-unit>
        <trans-unit id="5c6c4d1fa1cea7d643033e0cc686085c0784ff70" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-key&quot;&gt;CoroutineContext.Key&lt;/a&gt; associated with polymorphic &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementation. Polymorphic element implementation implies delegating its &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/get&quot;&gt;get&lt;/a&gt; and &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/minus-key&quot;&gt;minusKey&lt;/a&gt; to &lt;a href=&quot;../../kotlin.coroutines/get-polymorphic-element&quot;&gt;getPolymorphicElement&lt;/a&gt; and &lt;a href=&quot;../../kotlin.coroutines/minus-polymorphic-key&quot;&gt;minusPolymorphicKey&lt;/a&gt; respectively.</source>
          <target state="translated">多態的な&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;実装に関連付けられた&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-key&quot;&gt;CoroutineContext.Keyの&lt;/a&gt;基本クラス。ポリモーフィック要素の実装は、&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/get&quot;&gt;get&lt;/a&gt;と&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/minus-key&quot;&gt;minusKey&lt;/a&gt;をそれぞれ&lt;a href=&quot;../../kotlin.coroutines/get-polymorphic-element&quot;&gt;getPolymorphicElement&lt;/a&gt;と&lt;a href=&quot;../../kotlin.coroutines/minus-polymorphic-key&quot;&gt;minusPolymorphicKeyに&lt;/a&gt;委任することを意味します。</target>
        </trans-unit>
        <trans-unit id="5734564e60f6d0468b2eba14396fc3fc48c4b1b3" translate="yes" xml:space="preserve">
          <source>Base interface implicitly implemented by all annotation interfaces. See &lt;a href=&quot;../../../../../../docs/reference/annotations&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on annotations.</source>
          <target state="translated">すべての注釈インターフェースによって暗黙的に実装された基本インターフェース。アノテーションの詳細については、&lt;a href=&quot;../../../../../../docs/reference/annotations&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7fe2c7954cd1b89a648a9cad253d4aec1376c4b5" translate="yes" xml:space="preserve">
          <source>Base interface implicitly implemented by all annotation interfaces. See &lt;a href=&quot;../../../../../docs/reference/annotations&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on annotations.</source>
          <target state="translated">すべての注釈インターフェースによって暗黙的に実装された基本インターフェース。アノテーションの詳細については、&lt;a href=&quot;../../../../../docs/reference/annotations&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="53bc813f0de4922a17c2d0a20db15ada1d790b5c" translate="yes" xml:space="preserve">
          <source>Base interface that can be used for implementing property delegate providers.</source>
          <target state="translated">プロパティデリゲートプロバイダを実装するために使用できる基本インタフェース。</target>
        </trans-unit>
        <trans-unit id="c59ba4cae5cc34265ab39cbd2c308fd7a43f2458" translate="yes" xml:space="preserve">
          <source>Base interface that can be used for implementing property delegates of read-only properties.</source>
          <target state="translated">読み取り専用プロパティのプロパティデリゲートを実装するために使用できる基本インターフェースです。</target>
        </trans-unit>
        <trans-unit id="e91c5343b8946f864e8b656029fb53550538fd16" translate="yes" xml:space="preserve">
          <source>Base interface that can be used for implementing property delegates of read-write properties.</source>
          <target state="translated">読み書きプロパティのプロパティデリゲートを実装するために使用できる基本インターフェースです。</target>
        </trans-unit>
        <trans-unit id="64373315f6e979efca96ab611c5eefc9e99553fc" translate="yes" xml:space="preserve">
          <source>Base of the natural logarithms, approximately 2.71828.</source>
          <target state="translated">自然対数のベース、約2.71828。</target>
        </trans-unit>
        <trans-unit id="2afb88d7964181bbca0fa9e83d658a614510bacd" translate="yes" xml:space="preserve">
          <source>Basecamp's Android app is &lt;a href=&quot;https://m.signalvnoise.com/how-we-made-basecamp-3s-android-app-100-kotlin-35e4e1c0ef12&quot;&gt;100% Kotlin code&lt;/a&gt;, and they report a huge difference in programmer happiness and great improvements in work quality and speed.</source>
          <target state="translated">BasecampのAndroidアプリは&lt;a href=&quot;https://m.signalvnoise.com/how-we-made-basecamp-3s-android-app-100-kotlin-35e4e1c0ef12&quot;&gt;100％Kotlinコード&lt;/a&gt;であり、プログラマーの幸せに大きな違いがあり、作業の品質と速度が大幅に向上していると報告されています。</target>
        </trans-unit>
        <trans-unit id="15e10e999d9f45564ef18325b8fb75ba7dfdf012" translate="yes" xml:space="preserve">
          <source>Basic Syntax</source>
          <target state="translated">基本構文</target>
        </trans-unit>
        <trans-unit id="0683d71248dcbb6ef209d3946391b3451983e5b6" translate="yes" xml:space="preserve">
          <source>Basic Types</source>
          <target state="translated">基本的な種類</target>
        </trans-unit>
        <trans-unit id="095602bb1950fe3e722bc705ecbf84e81ffbfbce" translate="yes" xml:space="preserve">
          <source>Basic interop types</source>
          <target state="translated">基本的なインターロップの種類</target>
        </trans-unit>
        <trans-unit id="31c67e8a76b1546e5e885d2ff65b10a2ec9660ee" translate="yes" xml:space="preserve">
          <source>Basic lifecycle tasks like &lt;code&gt;assemble&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, and &lt;code&gt;clean&lt;/code&gt; are also available.</source>
          <target state="translated">&lt;code&gt;assemble&lt;/code&gt; 、 &lt;code&gt;build&lt;/code&gt; 、 &lt;code&gt;clean&lt;/code&gt; などの基本的なライフサイクルタスクも使用できます。</target>
        </trans-unit>
        <trans-unit id="bff9aacbc4e15b3e4592c41eb9ecf6abc207d35d" translate="yes" xml:space="preserve">
          <source>Basic primitives for creating and suspending coroutines: &lt;a href=&quot;-continuation/index&quot;&gt;Continuation&lt;/a&gt;, &lt;a href=&quot;-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt; interfaces, coroutine creation and suspension top-level functions.</source>
          <target state="translated">コルーチンを作成および一時停止するための基本的なプリミティブ：&lt;a href=&quot;-continuation/index&quot;&gt;Continuation&lt;/a&gt;、&lt;a href=&quot;-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt;インターフェース、コルーチンの作成および一時停止のトップレベル関数。</target>
        </trans-unit>
        <trans-unit id="3c4f90d8acc9678c79d53f447d2f3f8d0cca60ff" translate="yes" xml:space="preserve">
          <source>Basic primitives for creating and suspending coroutines: &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-continuation/index&quot;&gt;Continuation&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt; interfaces, coroutine creation and suspension top-level functions.</source>
          <target state="translated">コルーチンを作成および一時停止するための基本的なプリミティブ：&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-continuation/index&quot;&gt;Continuation&lt;/a&gt;、&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt;インターフェース、コルーチンの作成および一時停止のトップレベル関数。</target>
        </trans-unit>
        <trans-unit id="ad5ff5967cd00f1b9a1ebc25862b124009e41b57" translate="yes" xml:space="preserve">
          <source>Basic terms</source>
          <target state="translated">基本的な用語</target>
        </trans-unit>
        <trans-unit id="6af1132d5b79ef2d86c138cc84ba1a7c1c491b45" translate="yes" xml:space="preserve">
          <source>Basically this step is limited to defining the Step Name and the version of Kotlin we need. Tags can be used.</source>
          <target state="translated">基本的にこのステップは、ステップ名と必要なKotlinのバージョンを定義するだけです。タグを使用することができます。</target>
        </trans-unit>
        <trans-unit id="5f93bc71aa464c43e8bc2736eb59d1de19d1609c" translate="yes" xml:space="preserve">
          <source>Basically, these functions do the same: execute a block of code on an object. What's different is how this object becomes available inside the block and what is the result of the whole expression.</source>
          <target state="translated">基本的に、これらの関数は同じことをします:オブジェクト上でコードのブロックを実行します。異なるのは、このオブジェクトがブロック内でどのように利用可能になるのか、そして全体の式の結果が何になるのかということです。</target>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="27757d2e54473d3cf22ab554f90a3e64a22141d2" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;T&lt;/code&gt; is used as a parameter type, it can't be covariant, and because it's used as a return type, it can't be contravariant. But if we only want to use the &lt;code&gt;get()&lt;/code&gt; function, we can project it covariantly with &lt;code&gt;out&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; はパラメーター型として使用されるため、共変にすることはできません。また、Tは戻り型として使用されるため、反変にすることもできません。ただし、 &lt;code&gt;get()&lt;/code&gt; 関数のみを使用する場合は、 &lt;code&gt;out&lt;/code&gt; を使用して共変的に投影できます。</target>
        </trans-unit>
        <trans-unit id="2249ad42743195fa21c675ff00b5c5fb81328557" translate="yes" xml:space="preserve">
          <source>Because inline classes may be represented both as the underlying value and as a wrapper, &lt;a href=&quot;equality#referential-equality&quot;&gt;referential equality&lt;/a&gt; is pointless for them and is therefore prohibited.</source>
          <target state="translated">インラインクラスは、基になる値とラッパーの両方として表すことができるため、&lt;a href=&quot;equality#referential-equality&quot;&gt;参照の等価性&lt;/a&gt;はそれらにとって無意味であり、したがって禁止されています。</target>
        </trans-unit>
        <trans-unit id="4ca6f154cfc4c63e383cfc7b5ba39283960d1b9e" translate="yes" xml:space="preserve">
          <source>Because the parameter of &lt;code&gt;js&lt;/code&gt; is parsed at compile time and translated to JavaScript code &quot;as-is&quot;, it is required to be a string constant. So, the following code is incorrect:</source>
          <target state="translated">&lt;code&gt;js&lt;/code&gt; のパラメーターはコンパイル時に解析され、JavaScriptコードに「そのまま」変換されるため、文字列定数である必要があります。したがって、次のコードは正しくありません。</target>
        </trans-unit>
        <trans-unit id="3b0d8a0e940588e3637555a402e45bcf798e5679" translate="yes" xml:space="preserve">
          <source>Because the scope functions are all quite similar in nature, it's important to understand the differences between them. There are two main differences between each scope function:</source>
          <target state="translated">スコープ機能はどれも似たようなものばかりなので、それぞれの違いを理解しておくことが大切です。各スコープ関数の違いは主に2つあります。</target>
        </trans-unit>
        <trans-unit id="819946568e5b0c80c753dc4720dc81fac4aa4556" translate="yes" xml:space="preserve">
          <source>Because the set of member functions of an object is constrained to be exactly the set of member functions that are declared at compile-time in the object's class and base classes, it's not possible to add new member functions to an object or to a class at runtime, so e.g. &lt;code&gt;p.leave = fun() { println(&quot;Bye!&quot;) }&lt;/code&gt; or anything of the sort won't compile.</source>
          <target state="translated">オブジェクトのメンバー関数のセットは、コンパイル時にオブジェクトのクラスと基本クラスで宣言されているメンバー関数のセットに厳密に制限されているため、オブジェクトまたはクラスに新しいメンバー関数を追加することはできません。ランタイムなので、たとえば、 &lt;code&gt;p.leave = fun() { println(&quot;Bye!&quot;) }&lt;/code&gt; やその他の種類はコンパイルできません。</target>
        </trans-unit>
        <trans-unit id="8e9ea512eb79ca2592dd1a0e0d03d975a2b307ee" translate="yes" xml:space="preserve">
          <source>Because the set of properties of an object is constrained to be exactly the set of properties that are declared at compile-time in the object's class, it's not possible to add new properties to an object or to a class at runtime, so e.g. &lt;code&gt;a.nationality = &quot;Norwegian&quot;&lt;/code&gt; won't compile.</source>
          <target state="translated">オブジェクトのプロパティのセットは、コンパイル時にオブジェクトのクラスで宣言されたプロパティのセットとまったく同じになるように制約されているため、実行時にオブジェクトまたはクラスに新しいプロパティを追加することはできません &lt;code&gt;a.nationality = &quot;Norwegian&quot;&lt;/code&gt; はコンパイルされません。</target>
        </trans-unit>
        <trans-unit id="ad87165569409ac8f63f0b14ac5e97d48b36791d" translate="yes" xml:space="preserve">
          <source>Before Kotlin 1.2, interface members overriding Java-default methods while targeting JVM 1.6 produced a warning on super calls: &lt;code&gt;Super calls to Java default methods are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'&lt;/code&gt;. In Kotlin 1.2, there's an &lt;strong&gt;error&lt;/strong&gt; instead, thus requiring any such code to be compiled with JVM target 1.8.</source>
          <target state="translated">Kotlin 1.2より前は、JVM 1.6を対象とするときにJavaのデフォルトメソッドをオーバーライドするインターフェイスメンバーがスーパーコールに関する警告を生成してい &lt;code&gt;Super calls to Java default methods are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'&lt;/code&gt; ます。Kotlin 1.2 では、代わりに&lt;strong&gt;エラーが発生&lt;/strong&gt;するため、そのようなコードはすべてJVMターゲット1.8でコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="e306172d559087c1f5488fe960b3bc7709c9e7f1" translate="yes" xml:space="preserve">
          <source>Before explaining what coroutines are, let's briefly review some of the other solutions.</source>
          <target state="translated">コアーチンとは何かを説明する前に、他のソリューションのいくつかを簡単におさらいしておきましょう。</target>
        </trans-unit>
        <trans-unit id="93e8eb7cb48937a7f7cda7db1b5cb495184a3434" translate="yes" xml:space="preserve">
          <source>Before reading this tutorial, please, look through &lt;a href=&quot;http://kotlinlang.org/docs/tutorials/javascript/getting-started-gradle/getting-started-with-gradle.html&quot;&gt;Kotlin and JavaScript for Gradle tutorial&lt;/a&gt;.</source>
          <target state="translated">このチュートリアルを読む前に、&lt;a href=&quot;http://kotlinlang.org/docs/tutorials/javascript/getting-started-gradle/getting-started-with-gradle.html&quot;&gt;KotlinとJavaScript for Gradleのチュートリアル&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="75adccbc8b940be9de2d4c0d6ecccaba4f5c3ad9" translate="yes" xml:space="preserve">
          <source>Before releasing stable versions, we usually publish a number of preview builds dubbed EAP (for &quot;Early Access Preview&quot;) that let us iterate faster and gather feedback from the community. EAPs of feature releases usually produce binaries that will be later rejected by the stable compiler to make sure that possible bugs in the binary format survive no longer than the preview period. Final Release Candidates normally do not bear this limitation.</source>
          <target state="translated">安定版をリリースする前に、私たちは通常、EAP (Early Access Preview)と呼ばれるいくつかのプレビュービルドを公開します。機能リリースの EAP は通常、バイナリを生成しますが、バイナリ形式のバグの可能性がプレビュー期間を超えないことを確認するために、後に安定版コンパイラによってリジェクトされます。最終リリース候補は通常この制限を受けません。</target>
        </trans-unit>
        <trans-unit id="f8753def1852fb24391129d524bf385a761d61d4" translate="yes" xml:space="preserve">
          <source>Begin with a small class or function with the annotations required for proper &lt;a href=&quot;../reference/java-interop&quot;&gt;interoperability with Java code&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../reference/java-interop&quot;&gt;Javaコードとの&lt;/a&gt;適切な相互運用性に必要なアノテーションを備えた小さなクラスまたは関数から始めます。</target>
        </trans-unit>
        <trans-unit id="f41ba730918fd1fccf5221281196b863dfda5c8a" translate="yes" xml:space="preserve">
          <source>Behavioral: a change is said to be behavioral-incompatible if one and the same program demonstrates different behavior before and after applying the change</source>
          <target state="translated">行動:変更は、1つと同じプログラムが変更を適用する前と適用後に異なる行動を示している場合、変更は行動的に互換性がないと言われています。</target>
        </trans-unit>
        <trans-unit id="dde6c943c606c3f296f259d96add15cf4fd1cf01" translate="yes" xml:space="preserve">
          <source>Being a statically typed language, Kotlin still has to interoperate with untyped or loosely typed environments, such as the JavaScript ecosystem. To facilitate these use cases, the &lt;code&gt;dynamic&lt;/code&gt; type is available in the language:</source>
          <target state="translated">Kotlinは静的に型付けされた言語であるため、JavaScriptエコシステムなど、型付けされていない、または緩やかに型付けされた環境と相互運用する必要があります。これらの使用例を容易にするために、 &lt;code&gt;dynamic&lt;/code&gt; タイプは言語で利用可能です：</target>
        </trans-unit>
        <trans-unit id="5fb9c683c2e184695c7bfd7451bb04214a1765b5" translate="yes" xml:space="preserve">
          <source>Being abstract is the only way to &quot;escape&quot; from having to implement the members of your interfaces, by offloading the work onto your subclasses - if a subclass wants to be concrete, it must implement all the &quot;missing&quot; members.</source>
          <target state="translated">抽象的であることは、作業をサブクラスにオフロードすることで、インターフェイスのメンバを実装しなければならないことから &quot;逃れる &quot;唯一の方法です-サブクラスが具象化したければ、&quot;足りない &quot;メンバをすべて実装しなければなりません。</target>
        </trans-unit>
        <trans-unit id="5e543936a5d76f10477f647e41b14d63cbeb8898" translate="yes" xml:space="preserve">
          <source>Below are descriptions of the standard library functions for write operations available on mutable maps.</source>
          <target state="translated">以下に,変異可能な地図上で利用可能な書き込み操作のための標準ライブラリ関数の説明を示します.</target>
        </trans-unit>
        <trans-unit id="23c4bcd44ee8499dae4c538d99a1425ac42187bb" translate="yes" xml:space="preserve">
          <source>Below is a class that can be used for ordering versions that consist of the major and the minor part.</source>
          <target state="translated">以下は、メジャーパートとマイナーパートで構成されるバージョンの順序付けに使用できるクラスです。</target>
        </trans-unit>
        <trans-unit id="01432299b2df31f0ad456d2e3dcfa35df72da82a" translate="yes" xml:space="preserve">
          <source>Below is a diagram of the Kotlin collection interfaces:</source>
          <target state="translated">以下はKotlinコレクションのインターフェースの図です。</target>
        </trans-unit>
        <trans-unit id="c026f6562df5d012fc4b9945fc1f178ec6dd656c" translate="yes" xml:space="preserve">
          <source>Below is an example Counter class that starts at a given value and can be incremented using the overloaded &lt;code&gt;+&lt;/code&gt; operator:</source>
          <target state="translated">以下は、指定された値で始まり、オーバーロードされた &lt;code&gt;+&lt;/code&gt; 演算子を使用してインクリメントできるCounterクラスの例です。</target>
        </trans-unit>
        <trans-unit id="edbdfb6203a38d292de6b0369ed2a2c9ea024b9a" translate="yes" xml:space="preserve">
          <source>Below please find explanations of how the modifiers apply to different types of declaring scopes.</source>
          <target state="translated">以下では、さまざまなタイプの宣言スコープに修飾子がどのように適用されるかを説明しています。</target>
        </trans-unit>
        <trans-unit id="a65fe305f30ed3d5d015c1d8ac222cdc8dd1b064" translate="yes" xml:space="preserve">
          <source>Besides calling &lt;code&gt;run&lt;/code&gt; on a receiver object, you can use it as a non-extension function. Non-extension &lt;code&gt;run&lt;/code&gt; lets you execute a block of several statements where an expression is required.</source>
          <target state="translated">レシーバーオブジェクトで &lt;code&gt;run&lt;/code&gt; を呼び出す以外に、それを非拡張関数として使用できます。非拡張 &lt;code&gt;run&lt;/code&gt; では、式が必要な複数のステートメントのブロックを実行できます。</target>
        </trans-unit>
        <trans-unit id="4d8f399439321d69bb3aae1bdb5a53f11ee0da4c" translate="yes" xml:space="preserve">
          <source>Besides converting existing functionality to Kotlin, you can also enjoy the Kotlin specific support. For instance, you can declare tables as &lt;a href=&quot;../reference/data-classes&quot;&gt;data classes&lt;/a&gt;:</source>
          <target state="translated">既存の機能をKotlinに変換するだけでなく、Kotlin固有のサポートも利用できます。たとえば、テーブルを&lt;a href=&quot;../reference/data-classes&quot;&gt;データクラス&lt;/a&gt;として宣言できます。</target>
        </trans-unit>
        <trans-unit id="f03b60f7e52b7ce49ed1e4f9fa511c452a2185bb" translate="yes" xml:space="preserve">
          <source>Beta</source>
          <target state="translated">Beta</target>
        </trans-unit>
        <trans-unit id="7926735646055aabbd4e967c6ef5b776640ea1e9" translate="yes" xml:space="preserve">
          <source>Beta status of unsigned integers</source>
          <target state="translated">符号なし整数のベータ状態</target>
        </trans-unit>
        <trans-unit id="112397f331b5572dd703b4ebc9b4678c9fc92667" translate="yes" xml:space="preserve">
          <source>Better code generation</source>
          <target state="translated">より良いコード生成</target>
        </trans-unit>
        <trans-unit id="daf5f256962e0bce3abff7235d6469a618bc9f29" translate="yes" xml:space="preserve">
          <source>Beware that dividing an integer by an integer produces an integer (like in Python 2, but unlike Python 3). If you want a floating-point result, at least one of the operands needs to be a floating-point number (and recall that like in most languages, floating-point operations are generally imprecise):</source>
          <target state="translated">整数を整数で割ると整数が生成されることに注意してください(Python 2と同様ですが、Python 3とは異なります)。浮動小数点の結果を得たい場合、オペランドの少なくとも1つは浮動小数点数でなければなりません (多くの言語と同様に、浮動小数点演算は一般的に不正確であることを覚えておいてください)。</target>
        </trans-unit>
        <trans-unit id="9ee4e69876a3afeb1c1bb0bcf29fd55cda91de34" translate="yes" xml:space="preserve">
          <source>Beware using the annotated API especially if you're developing a library, since your library might become binary incompatible with the future versions of the standard library.</source>
          <target state="translated">特にライブラリを開発している場合は、注釈付きAPIを使用することに注意してください。</target>
        </trans-unit>
        <trans-unit id="c66ee5bbf7e4118187340873748e37adbb358aa2" translate="yes" xml:space="preserve">
          <source>Binaries have a set of properties allowing one to configure them. The following options are available:</source>
          <target state="translated">バイナリには、それらを設定するためのプロパティのセットがあります。以下のオプションがあります。</target>
        </trans-unit>
        <trans-unit id="72a460c436692a1a8c70072c89565ca2220867ee" translate="yes" xml:space="preserve">
          <source>Binaries: &lt;code&gt;0b00001011&lt;/code&gt;</source>
          <target state="translated">バイナリ： &lt;code&gt;0b00001011&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c098d684da3e34376aa8f819e499d4e82c11310f" translate="yes" xml:space="preserve">
          <source>Binary compatibility warnings</source>
          <target state="translated">バイナリ互換性に関する警告</target>
        </trans-unit>
        <trans-unit id="b26f6c63a335a90adeeab8f4d5013e4f2efe2bec" translate="yes" xml:space="preserve">
          <source>Binary operations</source>
          <target state="translated">バイナリ演算</target>
        </trans-unit>
        <trans-unit id="f2a6d55277fe59460ac595b466dfa5b222b190df" translate="yes" xml:space="preserve">
          <source>Binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; and infix functions &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;, &lt;code&gt;shl&lt;/code&gt;, &lt;code&gt;shr&lt;/code&gt;;</source>
          <target state="translated">二項演算子 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;%&lt;/code&gt; と中置機能 &lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt; 、 &lt;code&gt;xor&lt;/code&gt; 、 &lt;code&gt;shl&lt;/code&gt; 、 &lt;code&gt;shr&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20b00ae38326b542aedf0b482b6afe3e749095cb" translate="yes" xml:space="preserve">
          <source>Binary representation:</source>
          <target state="translated">バイナリ表現。</target>
        </trans-unit>
        <trans-unit id="3dfefc606c6b6cb785b2fc9edff50a1793a08ceb" translate="yes" xml:space="preserve">
          <source>Binary search in sorted lists</source>
          <target state="translated">ソートされたリストのバイナリ検索</target>
        </trans-unit>
        <trans-unit id="effd37854dc15cf0fa524eebd650b9512c09f83b" translate="yes" xml:space="preserve">
          <source>Binary search with &lt;em&gt;comparison&lt;/em&gt; function lets you find elements without providing explicit search values. Instead, it takes a comparison function mapping elements to &lt;code&gt;Int&lt;/code&gt; values and searches for the element where the function returns zero. The list must be sorted in the ascending order according to the provided function; in other words, the return values of comparison must grow from one list element to the next one.</source>
          <target state="translated">&lt;em&gt;比較&lt;/em&gt;機能付きのバイナリ検索では、明示的な検索値を指定せずに要素を検索できます。代わりに、要素を &lt;code&gt;Int&lt;/code&gt; 値にマッピングする比較関数を受け取り、関数がゼロを返す要素を検索します。リストは、提供された関数に従って昇順でソートする必要があります。言い換えると、比較の戻り値は、あるリスト要素から次のリスト要素まで大きくなる必要があります。</target>
        </trans-unit>
        <trans-unit id="db5f4be53358b6d2931c1b26250a31285c182825" translate="yes" xml:space="preserve">
          <source>Binary: two binary artifacts are said to be binary-compatible if interchanging them doesn't lead to loading or linkage errors</source>
          <target state="translated">バイナリ:2つのバイナリアーチファクトは、それらを交換することがロードまたはリンケージエラーにつながらない場合は、バイナリ互換性があると言われています。</target>
        </trans-unit>
        <trans-unit id="ef29ec8d1db838c8e1a48ba8918f31da08b74947" translate="yes" xml:space="preserve">
          <source>BinaryType</source>
          <target state="translated">BinaryType</target>
        </trans-unit>
        <trans-unit id="2b237840996cac995b70318f64835abec7e9398b" translate="yes" xml:space="preserve">
          <source>Bit width</source>
          <target state="translated">ビット幅</target>
        </trans-unit>
        <trans-unit id="b4ef9f89df5e45033f2747be00f3790a8b4e3761" translate="yes" xml:space="preserve">
          <source>BitField</source>
          <target state="translated">BitField</target>
        </trans-unit>
        <trans-unit id="f8cd7716f7a5997d4efd153b8de6bda8ac575d3b" translate="yes" xml:space="preserve">
          <source>BitSet</source>
          <target state="translated">BitSet</target>
        </trans-unit>
        <trans-unit id="a36a25a1cccb68c7c87fcd879bbb216973e2de75" translate="yes" xml:space="preserve">
          <source>Bits</source>
          <target state="translated">Bits</target>
        </trans-unit>
        <trans-unit id="67445a8812f7cd259e3b6e21272d2fddff30a9e2" translate="yes" xml:space="preserve">
          <source>Bitwise operations</source>
          <target state="translated">ビット演算</target>
        </trans-unit>
        <trans-unit id="c24315eb20cc1f5a565ec08f29abab31c0925f1a" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="translated">Blob</target>
        </trans-unit>
        <trans-unit id="e31b904ea0486cad654bda29fbbbc9b45336239c" translate="yes" xml:space="preserve">
          <source>BlobPropertyBag</source>
          <target state="translated">BlobPropertyBag</target>
        </trans-unit>
        <trans-unit id="70af3238de42da66beb5f354425347f373dca837" translate="yes" xml:space="preserve">
          <source>Block Tags</source>
          <target state="translated">ブロックタグ</target>
        </trans-unit>
        <trans-unit id="8542f6a0cf58945d2439e86f2f6015e3ec4398b4" translate="yes" xml:space="preserve">
          <source>Block comments in Kotlin can be nested.</source>
          <target state="translated">Kotlinのブロックコメントは入れ子にすることができます。</target>
        </trans-unit>
        <trans-unit id="b16d07cec726bb8e19bba1a595f5b311f2f811e3" translate="yes" xml:space="preserve">
          <source>Block pointer type</source>
          <target state="translated">ブロックポインタ型</target>
        </trans-unit>
        <trans-unit id="f3b461348854c06872102b7c71825cb31ea832d9" translate="yes" xml:space="preserve">
          <source>Blocks execution until the future is ready.</source>
          <target state="translated">将来の準備が整うまで実行をブロックします。</target>
        </trans-unit>
        <trans-unit id="0b9d2b2362bc33581ba11fddcb0cf0590ebd3a7a" translate="yes" xml:space="preserve">
          <source>Blog</source>
          <target state="translated">Blog</target>
        </trans-unit>
        <trans-unit id="718a7e8a582e982e452dd5700addba4ffc1cf40d" translate="yes" xml:space="preserve">
          <source>Body</source>
          <target state="translated">Body</target>
        </trans-unit>
        <trans-unit id="4a7fdd8c17425252332ea0e89a35722b72d83135" translate="yes" xml:space="preserve">
          <source>Books</source>
          <target state="translated">Books</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="bcac21aba714064e6b64ee7f175904786fbaa767" translate="yes" xml:space="preserve">
          <source>Boolean expressions are formed with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; for logical AND, &lt;code&gt;||&lt;/code&gt; for logical OR, and &lt;code&gt;!&lt;/code&gt; for logical NOT. As in Python, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; are short-circuiting: they only evaluate the right-hand side if it's necessary to determine the outcome. Beware that the keywords &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; also exist, but they only perform &lt;em&gt;bitwise&lt;/em&gt; operations on integral values, and they do not short-circuit.</source>
          <target state="translated">ブール式は、論理AND、 &lt;code&gt;||&lt;/code&gt; の &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; で形成されます。論理OR、および &lt;code&gt;!&lt;/code&gt; 論理NOTの場合。 Pythonと同様、 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; および &lt;code&gt;||&lt;/code&gt; ショートサーキットです：結果を決定する必要がある場合にのみ、右側を評価します。キーワードことに注意してください &lt;code&gt;and&lt;/code&gt; し、 &lt;code&gt;or&lt;/code&gt; さらには存在するが、彼らは唯一の実行&lt;em&gt;ビット単位の&lt;/em&gt;整数値に対して操作を、彼らは短絡しません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="61a088b0a156000801673ebe9758a3bc5e658a93" translate="yes" xml:space="preserve">
          <source>BooleanArray</source>
          <target state="translated">BooleanArray</target>
        </trans-unit>
        <trans-unit id="94ed6ad64eddcf16d738b1b685887dc56574c0f0" translate="yes" xml:space="preserve">
          <source>BooleanIterator</source>
          <target state="translated">BooleanIterator</target>
        </trans-unit>
        <trans-unit id="a07abf481bfcf1e7306014f6c27bb8804d578197" translate="yes" xml:space="preserve">
          <source>BooleanVar</source>
          <target state="translated">BooleanVar</target>
        </trans-unit>
        <trans-unit id="590cf12042dbc6ae4ccebcc55f169cf10900e4f8" translate="yes" xml:space="preserve">
          <source>BooleanVarOf</source>
          <target state="translated">BooleanVarOf</target>
        </trans-unit>
        <trans-unit id="0786cdff946e6084c50bb7df6cacd8ed965599fa" translate="yes" xml:space="preserve">
          <source>Booleans</source>
          <target state="translated">Booleans</target>
        </trans-unit>
        <trans-unit id="2b4e4ca9dd13df33b1f274e08ff704dbb23d3e35" translate="yes" xml:space="preserve">
          <source>Booleans are boxed if a nullable reference is needed.</source>
          <target state="translated">ブーリアンは、ヌル可能な参照が必要な場合にはボックスに入れられます。</target>
        </trans-unit>
        <trans-unit id="6a192a826b5af31fd1aa88b2c770d9045a0a1def" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel.html&quot;&gt;Channel()&lt;/a&gt; factory function and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html&quot;&gt;produce&lt;/a&gt; builder take an optional &lt;code&gt;capacity&lt;/code&gt; parameter to specify &lt;em&gt;buffer size&lt;/em&gt;. Buffer allows senders to send multiple elements before suspending, similar to the &lt;code&gt;BlockingQueue&lt;/code&gt; with a specified capacity, which blocks when buffer is full.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel.html&quot;&gt;Channel（）&lt;/a&gt;ファクトリ関数と&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html&quot;&gt;プロデュース&lt;/a&gt;ビルダーはどちらも、オプションの &lt;code&gt;capacity&lt;/code&gt; パラメーターを使用して&lt;em&gt;バッファーサイズ&lt;/em&gt;を指定します。バッファーを使用すると、送信者は中断する前に複数の要素を送信できます。これは、バッファーがいっぱいになるとブロックする、指定された容量の &lt;code&gt;BlockingQueue&lt;/code&gt; と同様です。</target>
        </trans-unit>
        <trans-unit id="56678bcd37fdbd67057a57fd3f8c1ac179f5ab13" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;join&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html&quot;&gt;cancelAndJoin&lt;/a&gt; wait for all finalization actions to complete, so the example above produces the following output:</source>
          <target state="translated">どちらも&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;参加&lt;/a&gt;して&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html&quot;&gt;cancelAndJoin&lt;/a&gt;上記の例は次の出力が生成されて、完全にすべてのファイナライズアクション待ちを：</target>
        </trans-unit>
        <trans-unit id="aaa3ae0941c1c63e8404db11c2c5822ea8776ac1" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this collection.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、このコレクション内の要素の数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="084d0f42a2f1fd2b3233b8ecf6d5d045540a6653" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this collection.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、このコレクション内の要素の数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="d0eabf144d8023ff8f6b640fc08ef1af59ff52b1" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this collection.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;ステップの&lt;/a&gt;両方が正である必要があり、このコレクションの要素数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="0af0ae49c545b72fd3e3d56d5a9cc60d73808bcf" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.windowed.T)),%20kotlin.collections.windowed.R)))/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.windowed.T)),%20kotlin.collections.windowed.R)))/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this collection.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.windowed.T)),%20kotlin.collections.windowed.R)))/size&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.windowed.T)),%20kotlin.collections.windowed.R)))/step&quot;&gt;ステップの&lt;/a&gt;両方が正である必要があり、このコレクションの要素数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="f0718785d7a21f217dfdae0e623137151eb06714" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、このシーケンスの要素の数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="e153c00b80d52af9d9d30cb6047f86b6a26f5f37" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、このシーケンスの要素の数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="d8ad1650acfe57bcad1b2d605f5d9abb55199c3d" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;ステップの&lt;/a&gt;両方が正である必要があり、このシーケンスの要素の数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="9771f55b53bc744e427d88f270d79d362084e7f4" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.windowed.T)),%20kotlin.sequences.windowed.R)))/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.windowed.T)),%20kotlin.sequences.windowed.R)))/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.windowed.T)),%20kotlin.sequences.windowed.R)))/size&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.windowed.T)),%20kotlin.sequences.windowed.R)))/step&quot;&gt;ステップの&lt;/a&gt;両方が正である必要があり、このシーケンスの要素の数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="67539940f5aa420fb9707f75cbc306cea0396d84" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、この文字シーケンスの要素数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="cbced784a4e4808737c5eb9216375acd25dc2730" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、この文字シーケンスの要素数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="ab8e90c6489475f86d0d05c87a6bcb381c210ecd" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;ステップの&lt;/a&gt;両方が正である必要があり、この文字シーケンスの要素数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="f2bea8d6b0fb22780d4bd290339057a8cfec7f97" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowed.R)))/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowed.R)))/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowed.R)))/size&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowed.R)))/step&quot;&gt;ステップの&lt;/a&gt;両方が正である必要があり、この文字シーケンスの要素数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="36b84c2b0b283f28a914a68615f6871a6a9ceceb" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、この文字シーケンスの要素数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="f6aa8dd9910fba9b4cf6489eeeb8c66c8fc69e23" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、この文字シーケンスの要素数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="c7cf261e95866f81c07fa4adbc9f77d8c40e7b20" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;ステップの&lt;/a&gt;両方が正である必要があり、この文字シーケンスの要素数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="b33be4081d9d9107c78f1754dc20fc1c874f3478" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowedSequence.R)))/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowedSequence.R)))/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowedSequence.R)))/size&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowedSequence.R)))/step&quot;&gt;ステップの&lt;/a&gt;両方が正である必要があり、この文字シーケンスの要素数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="7d76727e25cbd1b3d5a88f50e15fcb2295a169f3" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;kotlin-platform-native&lt;/code&gt; and &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugins automatically set up artifact publication when the &lt;code&gt;maven-publish&lt;/code&gt; plugin is applied. See details about publication at the &lt;a href=&quot;../building-mpp-with-gradle#publishing-a-multiplatform-library&quot;&gt;corresponding page&lt;/a&gt;. Note that currently only Kotlin/Native libraries (&lt;code&gt;*.klib&lt;/code&gt;) can be published for native targets.</source>
          <target state="translated">&lt;code&gt;kotlin-platform-native&lt;/code&gt; &lt;code&gt;maven-publish&lt;/code&gt; プラグインが適用されると、kotlin-platform-nativeプラグインと &lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインの両方が自動的にアーティファクトパブリケーションをセットアップします。掲載の詳細は&lt;a href=&quot;../building-mpp-with-gradle#publishing-a-multiplatform-library&quot;&gt;対応ページをご覧ください&lt;/a&gt;。現在、ネイティブターゲットに対して公開できるのはKotlin /ネイティブライブラリ（ &lt;code&gt;*.klib&lt;/code&gt; ）のみです。</target>
        </trans-unit>
        <trans-unit id="f9fb92b17ca6c1036361cb0bc273b8d539a33467" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;put()&lt;/code&gt; and &lt;code&gt;putAll()&lt;/code&gt; overwrite the values if the given keys already exist in the map. Thus, you can use them to update values of map entries.</source>
          <target state="translated">指定されたキーがマップにすでに存在する場合、 &lt;code&gt;put()&lt;/code&gt; と &lt;code&gt;putAll()&lt;/code&gt; はどちらも値を上書きします。したがって、それらを使用してマップエントリの値を更新できます。</target>
        </trans-unit>
        <trans-unit id="48a0c772d877c93acd537f9dd2917a2d330472b6" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;run()&lt;/code&gt; and &lt;code&gt;let()&lt;/code&gt; are also useful if you've got an expression that you need to use multiple times, but you don't care to come up with a variable name for it and make a null check:</source>
          <target state="translated">&lt;code&gt;run()&lt;/code&gt; と &lt;code&gt;let()&lt;/code&gt; はどちらも、複数回使用する必要がある式がある場合にも役立ちますが、変数名を考えてnullチェックを行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="f117f717287c089c5644336542c588b36df80762" translate="yes" xml:space="preserve">
          <source>Both comparator and comparison binary search can be performed for list ranges as well.</source>
          <target state="translated">コンパレータ検索と比較バイナリ検索の両方がリスト範囲に対しても実行できます。</target>
        </trans-unit>
        <trans-unit id="a526106bb7b07bc95406f9258d87ca517b94f4f7" translate="yes" xml:space="preserve">
          <source>Both files &lt;code&gt;sample-library.js&lt;/code&gt; and &lt;code&gt;sample-library.meta.js&lt;/code&gt; should be present in the latter case, because translated JavaScript file contains meta-information about inlining, which is needed by compiler.</source>
          <target state="translated">後者の場合、 &lt;code&gt;sample-library.js&lt;/code&gt; と &lt;code&gt;sample-library.meta.js&lt;/code&gt; の両方のファイルが存在するはずです。翻訳されたJavaScriptファイルには、コンパイラーが必要とするインライン化に関するメタ情報が含まれているためです。</target>
        </trans-unit>
        <trans-unit id="c369edaa82ba26ca01871646d635daa8f7504cc8" translate="yes" xml:space="preserve">
          <source>Both of these print &lt;code&gt;-2147483648&lt;/code&gt;, because only the lower 32 bits of the &quot;real&quot; result are stored.</source>
          <target state="translated">「実際の」結果の下位32ビットのみが格納されるため、これらの両方が &lt;code&gt;-2147483648&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="8e964469a13a77088460de8cf5eddab2a6f999cc" translate="yes" xml:space="preserve">
          <source>Both scratches and worksheets use the compiled versions of connected modules. So, if you modify a module's source files, the changes will propagate to scratches and worksheets when you rebuild the module. To rebuild the module automatically before each run of a scratch or a worksheet, select &lt;strong&gt;Make before Run&lt;/strong&gt;.</source>
          <target state="translated">スクラッチとワークシートはどちらも、接続されたモジュールのコンパイル済みバージョンを使用します。そのため、モジュールのソースファイルを変更すると、モジュールを再構築したときに変更がスクラッチやワークシートに反映されます。スクラッチまたはワークシートを実行する前にモジュールを自動的に再構築するには、[&lt;strong&gt;実行前&lt;/strong&gt;に作成]&lt;strong&gt;を&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="26aa585d7dfdc3090a2d9026c66329ae2663ea8a" translate="yes" xml:space="preserve">
          <source>Bound Class References (since 1.1)</source>
          <target state="translated">バウンドクラスの参照 (1.1 以降)</target>
        </trans-unit>
        <trans-unit id="d7e744f9846b986738e0816b29c63f14509b6745" translate="yes" xml:space="preserve">
          <source>Bound Function and Property References (since 1.1)</source>
          <target state="translated">境界関数とプロパティの参照 (1.1以降)</target>
        </trans-unit>
        <trans-unit id="7b85b6504bf90c388faf780dc0b4dcabde2e43d2" translate="yes" xml:space="preserve">
          <source>Bound callable references</source>
          <target state="translated">バウンド呼び出し可能なリファレンス</target>
        </trans-unit>
        <trans-unit id="85989aa9e94909d737a99ce977c8f0524b5f104a" translate="yes" xml:space="preserve">
          <source>Bound class references (since 1.1)</source>
          <target state="translated">バウンドクラス参照 (1.1 以降)</target>
        </trans-unit>
        <trans-unit id="c1d763c06ba5611d707eeed031c4378440dc7fb3" translate="yes" xml:space="preserve">
          <source>Bound constructor references</source>
          <target state="translated">バウンド コンストラクタの参照</target>
        </trans-unit>
        <trans-unit id="17f0a15462df276172e8f66e25419c48cd9fc071" translate="yes" xml:space="preserve">
          <source>Bound function and property references (since 1.1)</source>
          <target state="translated">境界関数とプロパティの参照(1.1以降</target>
        </trans-unit>
        <trans-unit id="4b8b36c5403b746449d2c849c47bd500e35ca37c" translate="yes" xml:space="preserve">
          <source>BoxQuadOptions</source>
          <target state="translated">BoxQuadOptions</target>
        </trans-unit>
        <trans-unit id="5d13f522e9c8eabab2db0fea870c35c9728f8962" translate="yes" xml:space="preserve">
          <source>Break and Continue Labels</source>
          <target state="translated">ブレーク&amp;コンティニューラベル</target>
        </trans-unit>
        <trans-unit id="d43675deb5ef1628dcb32f38b7fd8e07e8b0fe63" translate="yes" xml:space="preserve">
          <source>Break and continue in loops</source>
          <target state="translated">ループ内でのブレークと継続</target>
        </trans-unit>
        <trans-unit id="04af83c573ed28bad405a1a5e0302494812d756c" translate="yes" xml:space="preserve">
          <source>Breaking change: consistent behavior of x.equals(null) for platform types</source>
          <target state="translated">変更点:プラットフォームタイプの x.equals(null)の一貫した動作</target>
        </trans-unit>
        <trans-unit id="95c82e98e38ccf406578979623b36433169e3065" translate="yes" xml:space="preserve">
          <source>Breaking change: fix for platform null escaping through an inlined extension receiver</source>
          <target state="translated">ブレークアップの変更:インライン拡張レシーバーを介したプラットフォームのヌルエスケープの修正</target>
        </trans-unit>
        <trans-unit id="0010a4c886f7138072d6a665dfc42b5efd885875" translate="yes" xml:space="preserve">
          <source>Breaking change: sound smart casts after try blocks</source>
          <target state="translated">変化を壊す:トライブロック後のサウンドスマートキャスト</target>
        </trans-unit>
        <trans-unit id="21a8752f2df54d656b09cd2a499cb3a3403ec7ca" translate="yes" xml:space="preserve">
          <source>Breakpoints</source>
          <target state="translated">Breakpoints</target>
        </trans-unit>
        <trans-unit id="58a6acc8a3a172fc6d1c2687109f35019caa5d29" translate="yes" xml:space="preserve">
          <source>Bridging blocking and non-blocking worlds</source>
          <target state="translated">ブロッキングとノンブロッキングの世界をつなぐ</target>
        </trans-unit>
        <trans-unit id="b2d0e321b1372a3d7d7a8f0627418b38b02bf979" translate="yes" xml:space="preserve">
          <source>Bruce Eckel says about checked exceptions:</source>
          <target state="translated">ブルース・エッケルは、チェックされた例外について言っています。</target>
        </trans-unit>
        <trans-unit id="c65e509230cb6459a020ee1e8509f0e4b332c107" translate="yes" xml:space="preserve">
          <source>Bruce Eckel says in &lt;a href=&quot;http://www.mindview.net/Etc/Discussions/CheckedExceptions&quot;&gt;Does Java need Checked Exceptions?&lt;/a&gt;:</source>
          <target state="translated">Bruce Eckelは次のように述べて&lt;a href=&quot;http://www.mindview.net/Etc/Discussions/CheckedExceptions&quot;&gt;います。&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="8f18995239d394ba2c3e058f972459a83f3ee77b" translate="yes" xml:space="preserve">
          <source>BufferDataSource</source>
          <target state="translated">BufferDataSource</target>
        </trans-unit>
        <trans-unit id="7c439368b22bd9105160b523a76b1a5ac5f2d39e" translate="yes" xml:space="preserve">
          <source>Buffered channels</source>
          <target state="translated">バッファ付きチャンネル</target>
        </trans-unit>
        <trans-unit id="4d7e3d8248b285fabf4d3ba1bb2e29ec395538fa" translate="yes" xml:space="preserve">
          <source>Builder for a &lt;a href=&quot;../../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt; or an &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;, provides &lt;a href=&quot;../../kotlin.coroutines.experimental/-sequence-builder/yield&quot;&gt;yield&lt;/a&gt; and &lt;a href=&quot;../../kotlin.coroutines.experimental/-sequence-builder/yield-all&quot;&gt;yieldAll&lt;/a&gt; suspension functions.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt;または&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iteratorの&lt;/a&gt;ビルダーは、&lt;a href=&quot;../../kotlin.coroutines.experimental/-sequence-builder/yield&quot;&gt;yield&lt;/a&gt;および&lt;a href=&quot;../../kotlin.coroutines.experimental/-sequence-builder/yield-all&quot;&gt;yieldAll&lt;/a&gt;サスペンション関数を提供します。</target>
        </trans-unit>
        <trans-unit id="9afd64c1688d7dd0ee5eb541287de8d42f18fdac" translate="yes" xml:space="preserve">
          <source>Builder for a &lt;a href=&quot;../../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt; or an &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;, provides &lt;a href=&quot;yield&quot;&gt;yield&lt;/a&gt; and &lt;a href=&quot;yield-all&quot;&gt;yieldAll&lt;/a&gt; suspension functions.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt;または&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iteratorの&lt;/a&gt;ビルダーは、&lt;a href=&quot;yield&quot;&gt;yield&lt;/a&gt;および&lt;a href=&quot;yield-all&quot;&gt;yieldAll&lt;/a&gt;サスペンション関数を提供します。</target>
        </trans-unit>
        <trans-unit id="026aff5308e9d22f7a4347477af6718bf43f8f8e" translate="yes" xml:space="preserve">
          <source>Builder for a &lt;a href=&quot;../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt; or an &lt;a href=&quot;../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;, provides &lt;a href=&quot;-sequence-builder/yield&quot;&gt;yield&lt;/a&gt; and &lt;a href=&quot;-sequence-builder/yield-all&quot;&gt;yieldAll&lt;/a&gt; suspension functions.</source>
          <target state="translated">&lt;a href=&quot;../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt;または&lt;a href=&quot;../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iteratorの&lt;/a&gt;ビルダーは、&lt;a href=&quot;-sequence-builder/yield&quot;&gt;yield&lt;/a&gt;および&lt;a href=&quot;-sequence-builder/yield-all&quot;&gt;yieldAll&lt;/a&gt;サスペンション関数を提供します。</target>
        </trans-unit>
        <trans-unit id="74fa65e782a73e12d9efad27fd48f933ef1a66ba" translate="yes" xml:space="preserve">
          <source>Builder-style usage of methods that return &lt;code&gt;Unit&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Unit&lt;/code&gt; を返すメソッドのビルダースタイルの使用法</target>
        </trans-unit>
        <trans-unit id="4f75eae01b3871647125ffb7e5f534fa945932c0" translate="yes" xml:space="preserve">
          <source>BuilderInference</source>
          <target state="translated">BuilderInference</target>
        </trans-unit>
        <trans-unit id="8e1df15ede6103768476e38443a4cea475658893" translate="yes" xml:space="preserve">
          <source>Building Kotlin Multiplatform Projects</source>
          <target state="translated">Kotlin マルチプラットフォームプロジェクトの構築</target>
        </trans-unit>
        <trans-unit id="52a49620e7d4a68e1a7b4934e6a2535a838bcfba" translate="yes" xml:space="preserve">
          <source>Building Multiplatform Projects with Gradle</source>
          <target state="translated">Gradle でマルチプラットフォームプロジェクトを構築する</target>
        </trans-unit>
        <trans-unit id="29d2e0ac69bee3e3a9008eab80d76ad558d8182c" translate="yes" xml:space="preserve">
          <source>Building a target requires compiling Kotlin once or multiple times. Each Kotlin compilation of a target may serve a different purpose (e.g. production code, tests) and incorporate different &lt;a href=&quot;#configuring-source-sets&quot;&gt;source sets&lt;/a&gt;. The compilations of a target may be accessed in the DSL, for example, to get the tasks, configure &lt;a href=&quot;using-gradle#compiler-options&quot;&gt;the Kotlin compiler options&lt;/a&gt; or get the dependency files and compilation outputs:</source>
          <target state="translated">ターゲットを構築するには、Kotlinを1回または複数回コンパイルする必要があります。ターゲットの各Kotlinコンパイルは、異なる目的（例、本番コード、テスト）に役立ち、異なる&lt;a href=&quot;#configuring-source-sets&quot;&gt;ソースセット&lt;/a&gt;を組み込むことができます。ターゲットのコンパイルはDSLでアクセスできます。たとえば、タスクを取得したり、&lt;a href=&quot;using-gradle#compiler-options&quot;&gt;Kotlinコンパイラオプションを&lt;/a&gt;構成したり、依存関係ファイルやコンパイル出力を取得したりできます。</target>
        </trans-unit>
        <trans-unit id="e49a7ea18a2e71986e311061334985bdf1840d33" translate="yes" xml:space="preserve">
          <source>Building and running the application</source>
          <target state="translated">アプリケーションの構築と実行</target>
        </trans-unit>
        <trans-unit id="9d4aaba95715014b5a62cfbfad19c855e1d5d6de" translate="yes" xml:space="preserve">
          <source>Building channel producers</source>
          <target state="translated">チャンネルプロデューサーの構築</target>
        </trans-unit>
        <trans-unit id="df07ae53e27f81198e41d13111e7b0f893c0314e" translate="yes" xml:space="preserve">
          <source>Building each target involves compiling Kotlin sources once or multiple times. In other words, a target may have one or more &lt;a href=&quot;#configuring-compilations&quot;&gt;compilations&lt;/a&gt;. For example, one compilation for production sources, the other for tests.</source>
          <target state="translated">各ターゲットを構築するには、Kotlinソースを1回または複数回コンパイルする必要があります。つまり、ターゲットには1つ以上の&lt;a href=&quot;#configuring-compilations&quot;&gt;コンパイル&lt;/a&gt;が含まれている可能性があります。たとえば、本番ソース用のコンパイルとテスト用のコンパイルがあります。</target>
        </trans-unit>
        <trans-unit id="b7c6bfdc6d8cd0cdba5e5c067b8cc97916e2d518" translate="yes" xml:space="preserve">
          <source>Building final native binaries</source>
          <target state="translated">最終的なネイティブバイナリの構築</target>
        </trans-unit>
        <trans-unit id="623b2701cf5e32e580a01afa293e0ee5cc7757cd" translate="yes" xml:space="preserve">
          <source>Building universal frameworks</source>
          <target state="translated">ユニバーサルフレームワークの構築</target>
        </trans-unit>
        <trans-unit id="7dcb14b38faee04cddfaa60e935edb23af9abf88" translate="yes" xml:space="preserve">
          <source>Builds a &lt;a href=&quot;-sequence/index&quot;&gt;Sequence&lt;/a&gt; lazily yielding values one by one.</source>
          <target state="translated">値を1つずつ遅延生成する&lt;a href=&quot;-sequence/index&quot;&gt;シーケンスを&lt;/a&gt;構築します。</target>
        </trans-unit>
        <trans-unit id="60c09d8d72282ae2ff6808742ac433ed965bbc49" translate="yes" xml:space="preserve">
          <source>Builds a &lt;a href=&quot;../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt; lazily yielding values one by one.</source>
          <target state="translated">値を1つずつ遅延生成する&lt;a href=&quot;../kotlin.sequences/-sequence/index&quot;&gt;シーケンスを&lt;/a&gt;構築します。</target>
        </trans-unit>
        <trans-unit id="5c259a4879a1b60d577a4d4830ba75ce2a10c992" translate="yes" xml:space="preserve">
          <source>Builds a new read-only &lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt; by populating a &lt;a href=&quot;-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; using the given &lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and returning a read-only list with the same elements.</source>
          <target state="translated">新しい読み取り専用ビルドの&lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;一覧&lt;/a&gt;移入によって&lt;a href=&quot;-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableListを&lt;/a&gt;与え使っ&lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderActionを&lt;/a&gt;し、同じ要素を持つ読み取り専用のリストを返します。</target>
        </trans-unit>
        <trans-unit id="9eda9f8a1ecf86e247a64f52482f39aefb83eff5" translate="yes" xml:space="preserve">
          <source>Builds a new read-only &lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; by populating a &lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; using the given &lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and returning a read-only map with the same key-value pairs.</source>
          <target state="translated">新しい読み取り専用のビルド&lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;、地図&lt;/a&gt;移入によって&lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMapを&lt;/a&gt;与え使っ&lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderActionを&lt;/a&gt;し、同じキーと値のペアを読み取り専用のマップを返します。</target>
        </trans-unit>
        <trans-unit id="ee6309e22d6f84961af8f11bfaea49a7c4265dbb" translate="yes" xml:space="preserve">
          <source>Builds a new read-only &lt;a href=&quot;-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt; by populating a &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; using the given &lt;a href=&quot;build-set#kotlin.collections%24buildSet(kotlin.Function1((kotlin.collections.MutableSet((kotlin.collections.buildSet.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and returning a read-only set with the same elements.</source>
          <target state="translated">新しい読み取り専用ビルド&lt;a href=&quot;-set/index#kotlin.collections.Set&quot;&gt;を設定&lt;/a&gt;移入によって&lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSetを&lt;/a&gt;与え使っ&lt;a href=&quot;build-set#kotlin.collections%24buildSet(kotlin.Function1((kotlin.collections.MutableSet((kotlin.collections.buildSet.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderActionを&lt;/a&gt;し、同じ要素を持つ読み取り専用のセットを返すが。</target>
        </trans-unit>
        <trans-unit id="c3321f7c232f47c1e35280ba87c98d1999d1ccb0" translate="yes" xml:space="preserve">
          <source>Builds an &lt;a href=&quot;../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; lazily yielding values one by one.</source>
          <target state="translated">値を1つずつ遅延して生成する&lt;a href=&quot;../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;イテレーター&lt;/a&gt;を作成します。</target>
        </trans-unit>
        <trans-unit id="d5fa78f424d01a27d2f2abd602c868f2a2b0676c" translate="yes" xml:space="preserve">
          <source>Builds new string by populating newly created &lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt; initialized with the given &lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2Fcapacity&quot;&gt;capacity&lt;/a&gt; using provided &lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2FbuilderAction&quot;&gt;builderAction&lt;/a&gt; and then converting it to &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">提供された&lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2FbuilderAction&quot;&gt;builderAction&lt;/a&gt;を使用して、指定された&lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2Fcapacity&quot;&gt;容量で&lt;/a&gt;初期化された新しく作成された&lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilderを&lt;/a&gt;生成し、それを&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;Stringに&lt;/a&gt;変換することにより、新しい文字列を構築します。</target>
        </trans-unit>
        <trans-unit id="5b36e9184915e981f4e153b45acf1a5010f63351" translate="yes" xml:space="preserve">
          <source>Builds new string by populating newly created &lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt; initialized with the given &lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Int,%20kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/capacity&quot;&gt;capacity&lt;/a&gt; using provided &lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Int,%20kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and then converting it to &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">提供された&lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Int,%20kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;を使用して、指定された&lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Int,%20kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/capacity&quot;&gt;容量で&lt;/a&gt;初期化された新しく作成された&lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilderに&lt;/a&gt;データを入力し、それを&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;Stringに&lt;/a&gt;変換することにより、新しい文字列を構築します。</target>
        </trans-unit>
        <trans-unit id="2177c869da3da0786344d6fbb7b625c917d754f4" translate="yes" xml:space="preserve">
          <source>Builds new string by populating newly created &lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt; using provided &lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2FbuilderAction&quot;&gt;builderAction&lt;/a&gt; and then converting it to &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">提供された&lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2FbuilderAction&quot;&gt;builderAction&lt;/a&gt;を使用して新しく作成された&lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt;を生成し、それを&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;Stringに&lt;/a&gt;変換することにより、新しい文字列を構築します。</target>
        </trans-unit>
        <trans-unit id="fde4fd7cc2f74c0e17a9b96c27d4db226471d02b" translate="yes" xml:space="preserve">
          <source>Builds new string by populating newly created &lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt; using provided &lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and then converting it to &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">提供された&lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;を使用して新しく作成された&lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilderにデータ&lt;/a&gt;を入力し、それを&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;Stringに&lt;/a&gt;変換することにより、新しい文字列を作成します。</target>
        </trans-unit>
        <trans-unit id="bed258e5dc6c32d5eff629fad90cc90960dc9445" translate="yes" xml:space="preserve">
          <source>Built-in operations on booleans include</source>
          <target state="translated">ブーリアンに対する組み込み操作には以下のものがあります。</target>
        </trans-unit>
        <trans-unit id="47f3eaf9e71c91ab96d58774f250474e1243fc32" translate="yes" xml:space="preserve">
          <source>But as you remember, our API converts byte arrays to byte arrays in a different format and it is not easy to test byte arrays. So before we start writing a test, let's add the method &lt;code&gt;encodeToString&lt;/code&gt; with a default implementation to our &lt;code&gt;Base64Encoder&lt;/code&gt; interface:</source>
          <target state="translated">ただし、ご存じのとおり、APIはバイト配列を別の形式のバイト配列に変換するため、バイト配列のテストは簡単ではありません。テストを書き始める前に、 &lt;code&gt;Base64Encoder&lt;/code&gt; インターフェースにデフォルトの実装を &lt;code&gt;encodeToString&lt;/code&gt; メソッドを追加しましょう。</target>
        </trans-unit>
        <trans-unit id="46671e900bf9c5370c122e9fbedf49a147fc9abb" translate="yes" xml:space="preserve">
          <source>But if the function the lambda is passed to is inlined, the return can be inlined as well, so it is allowed:</source>
          <target state="translated">しかし、ラムダが渡される関数がインライン化されていれば、戻り値もインライン化できるので、それが許されています。</target>
        </trans-unit>
        <trans-unit id="469a3ab76d91dc23561b9c2dd2b6f73190861246" translate="yes" xml:space="preserve">
          <source>But if the parameters may be inferred, e.g. from the constructor arguments or by some other means, one is allowed to omit the type arguments:</source>
          <target state="translated">しかし、コンストラクタの引数などからパラメータが推測される場合は、型の引数を省略することができます。</target>
        </trans-unit>
        <trans-unit id="371730e75c65ea86559a3bab20b4d1df590d8c70" translate="yes" xml:space="preserve">
          <source>But if you want to access the same property on &lt;code&gt;b&lt;/code&gt;, that would not be safe, and the compiler reports an error:</source>
          <target state="translated">しかし、 &lt;code&gt;b&lt;/code&gt; の同じプロパティにアクセスしたい場合、それは安全ではなく、コンパイラはエラーを報告します：</target>
        </trans-unit>
        <trans-unit id="7b329900d92968a004b1366936090f97eaaa4da2" translate="yes" xml:space="preserve">
          <source>But it appears that in many cases this kind of overhead can be eliminated by inlining the lambda expressions. The functions shown below are good examples of this situation. I.e., the &lt;code&gt;lock()&lt;/code&gt; function could be easily inlined at call-sites. Consider the following case:</source>
          <target state="translated">しかし、多くの場合、この種のオーバーヘッドはラムダ式をインライン化することで解消できるようです。以下に示す関数は、この状況の良い例です。つまり、 &lt;code&gt;lock()&lt;/code&gt; 関数は呼び出しサイトで簡単にインライン化できます。次のケースを考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="ca8031161b409294044618bf8d11e09390278df6" translate="yes" xml:space="preserve">
          <source>But the common code should somehow get an instance of this interface, for that purpose we define the factory object &lt;code&gt;Base64Factory&lt;/code&gt;:</source>
          <target state="translated">しかし、一般的なコードはどういうわけかこのインターフェイスのインスタンスを取得する必要があります。そのために、ファクトリオブジェクト &lt;code&gt;Base64Factory&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="64c68a296346ddc7d2235bc8b60a6da50952f9db" translate="yes" xml:space="preserve">
          <source>But then, we can't do the following simple thing (which is perfectly safe):</source>
          <target state="translated">しかし、そうすると、次のような簡単なことができなくなります(これは全く問題ありません)。</target>
        </trans-unit>
        <trans-unit id="4dc3ec007507d68d7b3e046b2209be5fde0773f0" translate="yes" xml:space="preserve">
          <source>But then, we would not be able to do the following simple thing (which is perfectly safe):</source>
          <target state="translated">しかし、そうなると、次のような簡単なことができなくなってしまいます(これは全く問題ありません)。</target>
        </trans-unit>
        <trans-unit id="56acdaddb3309bc89f33e780815c7e14ac3ea05a" translate="yes" xml:space="preserve">
          <source>But we don't want to implement all the possible methods inside the class &lt;code&gt;List&lt;/code&gt;, right? This is where extensions help us.</source>
          <target state="translated">しかし、可能なすべてのメソッドをクラス &lt;code&gt;List&lt;/code&gt; 内に実装したくないのですよね？ここで拡張機能が役立ちます。</target>
        </trans-unit>
        <trans-unit id="82da50346400079fe12e5635e4dd6673e78ddff1" translate="yes" xml:space="preserve">
          <source>But we still need to access that property, right? There are a few ways of doing that.</source>
          <target state="translated">でも、その物件にアクセスする必要があるんだよね?その方法はいくつかある</target>
        </trans-unit>
        <trans-unit id="7f69e49f3d3c341d43121910ff2da21d98a69781" translate="yes" xml:space="preserve">
          <source>But what if one does not want to print all exceptions to the console? &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&quot;&gt;CoroutineExceptionHandler&lt;/a&gt; context element is used as generic &lt;code&gt;catch&lt;/code&gt; block of coroutine where custom logging or exception handling may take place. It is similar to using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)&quot;&gt;&lt;code&gt;Thread.uncaughtExceptionHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">しかし、すべての例外をコンソールに出力したくない場合はどうでしょうか。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&quot;&gt;CoroutineExceptionHandler&lt;/a&gt;コンテキスト要素は、カスタムロギングまたは例外処理が行われる可能性があるコルーチンの汎用 &lt;code&gt;catch&lt;/code&gt; ブロックとして使用されます。これは&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)&quot;&gt; &lt;code&gt;Thread.uncaughtExceptionHandler&lt;/code&gt; &lt;/a&gt;を使用するのに似ています。</target>
        </trans-unit>
        <trans-unit id="4eeab717fbea77a855529c94381a85de48f5c2b4" translate="yes" xml:space="preserve">
          <source>But what if the extracted function contains a coroutine builder which is invoked on the current scope? In this case &lt;code&gt;suspend&lt;/code&gt; modifier on the extracted function is not enough. Making &lt;code&gt;doWorld&lt;/code&gt; an extension method on &lt;code&gt;CoroutineScope&lt;/code&gt; is one of the solutions, but it may not always be applicable as it does not make API clearer. The idiomatic solution is to have either an explicit &lt;code&gt;CoroutineScope&lt;/code&gt; as a field in a class containing the target function or an implicit one when the outer class implements &lt;code&gt;CoroutineScope&lt;/code&gt;. As a last resort, &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html&quot;&gt;CoroutineScope(coroutineContext)&lt;/a&gt; can be used, but such approach is structurally unsafe because you no longer have control on the scope of execution of this method. Only private APIs can use this builder.</source>
          <target state="translated">しかし、抽出された関数に現在のスコープで呼び出されるコルーチンビルダーが含まれている場合はどうなりますか？この場合、抽出された関数の &lt;code&gt;suspend&lt;/code&gt; 修飾子では不十分です。作る &lt;code&gt;doWorld&lt;/code&gt; 上の拡張メソッド &lt;code&gt;CoroutineScope&lt;/code&gt; はソリューションの1つですが、それはAPIをより明確にしないよう、常に適用されない場合があります。慣用的な解決策は、ターゲット関数を含むクラスのフィールドとして明示的な &lt;code&gt;CoroutineScope&lt;/code&gt; を持つか、外部クラスが &lt;code&gt;CoroutineScope&lt;/code&gt; を実装するときに暗黙的なフィールドを持つことです。最後の手段として、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html&quot;&gt;CoroutineScope（coroutineContext）&lt;/a&gt;は使用できますが、このメソッドの実行範囲を制御できなくなるため、このようなアプローチは構造的に安全ではありません。このビルダーを使用できるのは、プライベートAPIのみです。</target>
        </trans-unit>
        <trans-unit id="5719a29731535ebfb334e02c3962a1adab16839f" translate="yes" xml:space="preserve">
          <source>But what if the extracted function contains a coroutine builder which is invoked on the current scope? In this case, the &lt;code&gt;suspend&lt;/code&gt; modifier on the extracted function is not enough. Making &lt;code&gt;doWorld&lt;/code&gt; an extension method on &lt;code&gt;CoroutineScope&lt;/code&gt; is one of the solutions, but it may not always be applicable as it does not make the API clearer. The idiomatic solution is to have either an explicit &lt;code&gt;CoroutineScope&lt;/code&gt; as a field in a class containing the target function or an implicit one when the outer class implements &lt;code&gt;CoroutineScope&lt;/code&gt;. As a last resort, &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html&quot;&gt;CoroutineScope(coroutineContext)&lt;/a&gt; can be used, but such an approach is structurally unsafe because you no longer have control on the scope of execution of this method. Only private APIs can use this builder.</source>
          <target state="translated">しかし、抽出された関数に、現在のスコープで呼び出されるコルーチンビルダーが含まれている場合はどうなりますか？この場合、抽出された関数の &lt;code&gt;suspend&lt;/code&gt; 修飾子は十分ではありません。作る &lt;code&gt;doWorld&lt;/code&gt; 上の拡張メソッド &lt;code&gt;CoroutineScope&lt;/code&gt; はソリューションの1つですが、それはAPIをより明確にしないよう、常に適用されない場合があります。慣用的な解決策は、ターゲット関数を含むクラスのフィールドとして明示的な &lt;code&gt;CoroutineScope&lt;/code&gt; を使用するか、外部クラスが &lt;code&gt;CoroutineScope&lt;/code&gt; を実装するときに暗黙的なCoroutineScopeを使用することです。最後の手段として、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html&quot;&gt;CoroutineScope（coroutineContext）&lt;/a&gt;使用できますが、このメソッドの実行範囲を制御できなくなるため、このようなアプローチは構造的に安全ではありません。このビルダーを使用できるのはプライベートAPIのみです。</target>
        </trans-unit>
        <trans-unit id="e588e3dc3f065dd5013e3fcfeb790a6dae76b4d0" translate="yes" xml:space="preserve">
          <source>ButterKnife</source>
          <target state="translated">ButterKnife</target>
        </trans-unit>
        <trans-unit id="14e7f1820e780372578ba3c1c94e440889709ae8" translate="yes" xml:space="preserve">
          <source>By applying the &lt;code&gt;@JsExport&lt;/code&gt; annotation to a top-level declaration (like a class or function), you make the Kotlin declaration available from JavaScript. The annotation exports all nested declarations with the name given in Kotlin. It can also be applied on file-level using &lt;code&gt;@file:JsExport&lt;/code&gt;.</source>
          <target state="translated">適用することで &lt;code&gt;@JsExport&lt;/code&gt; の（クラスや関数など）のトップレベルの宣言に注釈を、あなたは、JavaScriptからKotlin宣言を利用可能にします。アノテーションは、Kotlinで指定された名前のネストされた宣言をすべてエクスポートします。 &lt;code&gt;@file:JsExport&lt;/code&gt; を使用してファイルレベルで適用することもできます。</target>
        </trans-unit>
        <trans-unit id="e315ba231d7689497d0c36cdb66e0b22d571cb74" translate="yes" xml:space="preserve">
          <source>By convention, implementations that install themselves as &lt;em&gt;the&lt;/em&gt; interceptor in the context with the &lt;a href=&quot;-key&quot;&gt;Key&lt;/a&gt; shall also scan the context for other element that implement &lt;a href=&quot;index&quot;&gt;ContinuationInterceptor&lt;/a&gt; interface and use their &lt;a href=&quot;intercept-continuation&quot;&gt;interceptContinuation&lt;/a&gt; functions, too.</source>
          <target state="translated">慣例により、として自分自身をインストールするの実装に関連して迎撃&lt;a href=&quot;-key&quot;&gt;キー&lt;/a&gt;も実装し、他の要素のコンテキストスキャンしなければなら&lt;a href=&quot;index&quot;&gt;ContinuationInterceptorの&lt;/a&gt;インターフェースを、その使用&lt;a href=&quot;intercept-continuation&quot;&gt;interceptContinuationの&lt;/a&gt;も機能します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5c4ed021fd2dcd1ae3268fe77ea2a26b45ead19f" translate="yes" xml:space="preserve">
          <source>By convention, the entry point of a Kotlin program is a function with a signature like &lt;code&gt;main(args: Array&amp;lt;String&amp;gt;)&lt;/code&gt;, where &lt;code&gt;args&lt;/code&gt; represent the command-line arguments passed to the program. However, not every application supports command-line arguments, so this parameter often ends up not being used.</source>
          <target state="translated">慣例により、Kotlinプログラムのエントリポイントは &lt;code&gt;main(args: Array&amp;lt;String&amp;gt;)&lt;/code&gt; ようなシグネチャを持つ関数です。ここで、 &lt;code&gt;args&lt;/code&gt; はプログラムに渡されるコマンドライン引数を表します。ただし、すべてのアプリケーションがコマンドライン引数をサポートしているわけではないため、このパラメーターが使用されないことがよくあります。</target>
        </trans-unit>
        <trans-unit id="f6287d8db9dee67e36a09d069c69a41065a81f0d" translate="yes" xml:space="preserve">
          <source>By convention, the first paragraph of the documentation text (the block of text until the first blank line) is the summary description of the element, and the following text is the detailed description.</source>
          <target state="translated">慣例では、ドキュメントテキストの最初の段落(最初の空白行までのテキストのブロック)が要素の概要説明であり、それに続くテキストが詳細説明です。</target>
        </trans-unit>
        <trans-unit id="e4d0ee6a3d773cd5fe33a5e915a48f340e15ef2b" translate="yes" xml:space="preserve">
          <source>By convention, the name of the setter parameter is &lt;code&gt;value&lt;/code&gt;, but you can choose a different name if you prefer.</source>
          <target state="translated">慣例により、セッターパラメータの名前は &lt;code&gt;value&lt;/code&gt; ですが、必要に応じて別の名前を選択できます。</target>
        </trans-unit>
        <trans-unit id="ec639bb3beaf521b7aa292f8ea79f78cf22ae6b7" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;|&lt;/code&gt; is used as margin prefix, but you can choose another character and pass it as a parameter, like &lt;code&gt;trimMargin(&quot;&amp;gt;&quot;)&lt;/code&gt;.</source>
          <target state="translated">デフォルトで &lt;code&gt;|&lt;/code&gt; マージンの接頭辞として使用されますが、別の文字を選択して、それを &lt;code&gt;trimMargin(&quot;&amp;gt;&quot;)&lt;/code&gt; のようにパラメータとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2157f3807036d87ee534a7dc55f304b05c3393dc" translate="yes" xml:space="preserve">
          <source>By default the Kotlin/Native compiler doesn't allow calling a non-designated Objective-C initializer as a &lt;code&gt;super(...)&lt;/code&gt; constructor. This behaviour can be inconvenient if the designated initializers aren't marked properly in the Objective-C library. Adding a &lt;code&gt;disableDesignatedInitializerChecks = true&lt;/code&gt; to the &lt;code&gt;.def&lt;/code&gt; file for this library would disable these compiler checks.</source>
          <target state="translated">デフォルトでは、Kotlin /ネイティブコンパイラーは、指定されていないObjective-C初期化子を &lt;code&gt;super(...)&lt;/code&gt; コンストラクターとして呼び出すことを許可していません。指定された初期化子がObjective-Cライブラリで適切にマークされていない場合、この動作は不便になる可能性があります。このライブラリの &lt;code&gt;.def&lt;/code&gt; ファイルに &lt;code&gt;disableDesignatedInitializerChecks = true&lt;/code&gt; を追加すると、これらのコンパイラチェックが無効になります。</target>
        </trans-unit>
        <trans-unit id="3a8ae013521aa2113c5644b6f40df7e80be91d82" translate="yes" xml:space="preserve">
          <source>By default the plugin creates software components for the main and test source sets. You can access them via the &lt;code&gt;components&lt;/code&gt; container provided by Gradle or via the &lt;code&gt;component&lt;/code&gt; property of a corresponding source set:</source>
          <target state="translated">デフォルトでは、プラグインはメインおよびテストソースセット用のソフトウェアコンポーネントを作成します。Gradleが提供する &lt;code&gt;components&lt;/code&gt; コンテナまたは対応するソースセットの &lt;code&gt;component&lt;/code&gt; プロパティを介して、これらにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d4dbe9f13a9e2b6944f1a197b2e0a3c54aaedc6f" translate="yes" xml:space="preserve">
          <source>By default the plugin downloads the Kotlin/Native compiler during the first run. If you have already downloaded the compiler manually you can specify the path to its root directory using &lt;code&gt;org.jetbrains.kotlin.native.home&lt;/code&gt; project property (e.g. in &lt;code&gt;gradle.properties&lt;/code&gt;).</source>
          <target state="translated">デフォルトでは、プラグインは最初の実行時にKotlin / Nativeコンパイラーをダウンロードします。すでに手動でコンパイラーをダウンロードしている場合は、 &lt;code&gt;org.jetbrains.kotlin.native.home&lt;/code&gt; プロジェクトプロパティ（ &lt;code&gt;gradle.properties&lt;/code&gt; など）を使用して、そのルートディレクトリへのパスを指定できます。</target>
        </trans-unit>
        <trans-unit id="1664eb337c008b6bc6ba3557bac64a2dbe807510" translate="yes" xml:space="preserve">
          <source>By default the production sources are located in &lt;code&gt;src/main/kotlin&lt;/code&gt; and the test sources - in &lt;code&gt;src/test/kotlin&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、本番ソースは &lt;code&gt;src/main/kotlin&lt;/code&gt; に、テストソースは &lt;code&gt;src/test/kotlin&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="76a5eff4cbb7d3b0eac8405bf73dd260a7e59b1d" translate="yes" xml:space="preserve">
          <source>By default, Android Extensions adds a hidden cache function and a storage field to each container (&lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html&quot;&gt;&lt;code&gt;Activity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.android.com/reference/android/support/v4/app/Fragment.html&quot;&gt;&lt;code&gt;Fragment&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.android.com/reference/android/view/View.html&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; or a &lt;code&gt;LayoutContainer&lt;/code&gt; implementation) written in Kotlin. The method is pretty small so it does not increase the size of APK much.</source>
          <target state="translated">デフォルトでは、Android Extensionsは、Kotlinで記述された各コンテナー（&lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html&quot;&gt; &lt;code&gt;Activity&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/app/Fragment.html&quot;&gt; &lt;code&gt;Fragment&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.android.com/reference/android/view/View.html&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;LayoutContainer&lt;/code&gt; 実装）に非表示のキャッシュ機能とストレージフィールドを追加します。このメソッドはかなり小さいので、APKのサイズはそれほど増加しません。</target>
        </trans-unit>
        <trans-unit id="4d7bda9f81163a6a8962c92f55010d6ace9066d9" translate="yes" xml:space="preserve">
          <source>By default, Android Extensions plugin uses &lt;code&gt;HashMap&lt;/code&gt; as a backing storage, but you can switch to the &lt;code&gt;SparseArray&lt;/code&gt; implementation, or just switch off caching. The latter is especially useful when you use only the &lt;a href=&quot;#parcelable-implementations-generator&quot;&gt;Parcelable&lt;/a&gt; part of Android Extensions.</source>
          <target state="translated">デフォルトでは、Android Extensionsプラグインは &lt;code&gt;HashMap&lt;/code&gt; をバッキングストレージとして使用しますが、 &lt;code&gt;SparseArray&lt;/code&gt; 実装に切り替えるか、単にキャッシュをオフにすることができます。後者は、Android拡張機能の&lt;a href=&quot;#parcelable-implementations-generator&quot;&gt;Parcelable&lt;/a&gt;部分のみを使用する場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="f5c7e9870f7efc4c699314a7a24e7c0d58da9e16" translate="yes" xml:space="preserve">
          <source>By default, Gradle does not expand the JARs in the build process, so we need to add an additional step in our build to do so:</source>
          <target state="translated">デフォルトでは、GradleはビルドプロセスでJARを展開しないので、そのためにはビルドに追加のステップを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="b2d5deccfa850128fd02c305654ca46974c778f3" translate="yes" xml:space="preserve">
          <source>By default, Kotlin classes are final: they can&amp;rsquo;t be inherited. To make a class inheritable, mark it with the &lt;code&gt;open&lt;/code&gt; keyword.</source>
          <target state="translated">デフォルトでは、Kotlinクラスは最終的なものです。継承することはできません。クラスを継承可能にするには、 &lt;code&gt;open&lt;/code&gt; キーワードでクラスをマークします。</target>
        </trans-unit>
        <trans-unit id="70d6cd4ae689d623400a5c3981b0fd105ebdc2ed" translate="yes" xml:space="preserve">
          <source>By default, Kotlin compiles down to Java (so you have the entire Java Standard Library available to you, and interacting with Java libraries is a breeze), so you now have a Java Archive (&lt;code&gt;program.jar&lt;/code&gt;) which includes the Java libraries that are necessary to support the Kotlin features (thanks to &lt;code&gt;-include-runtime&lt;/code&gt;), and you can run it using an out-of-the-box Java runtime:</source>
          <target state="translated">デフォルトでは、KotlinはJavaへのダウンコンパイル（あなたはあなたに全体のJavaの標準ライブラリを用意して、およびJavaライブラリと対話することは簡単ですので）あなたは今、Javaアーカイブ（持っているので、 &lt;code&gt;program.jar&lt;/code&gt; あるJavaライブラリが含まれます） Kotlin機能をサポートするために必要です（ &lt;code&gt;-include-runtime&lt;/code&gt; のおかげです）。すぐに使えるJavaランタイムを使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="7afb6f2771c4fbfd0553debf12349bf3e35e83f0" translate="yes" xml:space="preserve">
          <source>By default, Kotlin runs on JVM and gives direct access to a rich and efficient collections library with general-purpose collections and data-structures like dynamically-sized arrays (&lt;code&gt;ArrayList&lt;/code&gt;), hash-based maps and sets (&lt;code&gt;HashMap&lt;/code&gt;/&lt;code&gt;HashSet&lt;/code&gt;), tree-based ordered maps and sets (&lt;code&gt;TreeMap&lt;/code&gt;/&lt;code&gt;TreeSet&lt;/code&gt;), etc. Using a hash-set of integers to track values that were already reached while applying function &lt;code&gt;f&lt;/code&gt;, the straightforward imperative version of a solution to the problem can be written as shown below:</source>
          <target state="translated">デフォルトでは、KotlinはJVMで実行され、動的なサイズの配列（ &lt;code&gt;ArrayList&lt;/code&gt; ）、ハッシュベースのマップとセット（ &lt;code&gt;HashMap&lt;/code&gt; / &lt;code&gt;HashSet&lt;/code&gt; ）、ツリーなどの汎用コレクションとデータ構造を持つ豊富で効率的なコレクションライブラリに直接アクセスできます。ベースの順序付けられたマップとセット（ &lt;code&gt;TreeMap&lt;/code&gt; / &lt;code&gt;TreeSet&lt;/code&gt; ）など。整数のハッシュセットを使用して、関数 &lt;code&gt;f&lt;/code&gt; を適用しているときにすでに到達した値を追跡すると、問題の解決策の簡単な命令バージョンを次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="d92b23bfe8dd75221c0070051a895b75ef354d28" translate="yes" xml:space="preserve">
          <source>By default, a JVM target ignores Java sources and only compiles Kotlin source files.</source>
          <target state="translated">デフォルトでは、JVMターゲットはJavaソースを無視し、Kotlinソースファイルのみをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="600c37294cf5ac736ca17273ccf4851a2f16d3e0" translate="yes" xml:space="preserve">
          <source>By default, a Kotlin/Native target is compiled down to a &lt;code&gt;*.klib&lt;/code&gt; library artifact, which can be consumed by Kotlin/Native itself as a dependency but cannot be executed or used as a native library. To declare final native binaries like executables or shared libraries a &lt;code&gt;binaries&lt;/code&gt; property of a native target is used. This property represents a collection of native binaries built for this target in addition to the default &lt;code&gt;*.klib&lt;/code&gt; artifact and provides a set of methods for declaring and configuring them.</source>
          <target state="translated">デフォルトでは、Kotlin /ネイティブターゲットは &lt;code&gt;*.klib&lt;/code&gt; ライブラリアーティファクトにコンパイルされます。これは、Kotlin /ネイティブ自体によって依存関係として使用できますが、ネイティブライブラリとして実行または使用することはできません。実行可能ファイルや共有ライブラリなどの最終的なネイティブバイナリを宣言するには、ネイティブターゲットの &lt;code&gt;binaries&lt;/code&gt; プロパティを使用します。このプロパティは、デフォルトの &lt;code&gt;*.klib&lt;/code&gt; アーティファクトに加えて、このターゲット用にビルドされたネイティブバイナリのコレクションを表し、それらを宣言および構成するための一連のメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="0818f89fe4783c774b6ab1d9e53a8860bf21f08c" translate="yes" xml:space="preserve">
          <source>By default, a sources JAR is added to each publication in addition to its main artifact. The sources JAR contains the sources used by the &lt;code&gt;main&lt;/code&gt; compilation of the target. If you also need to publish a documentation artifact (like a Javadoc JAR), you need to configure its build manually and add it as an artifact to the relevant publications, as shown below.</source>
          <target state="translated">デフォルトでは、ソースJARはメインのアーティファクトに加えて各パブリケーションに追加されます。ソースJARには、ターゲットの &lt;code&gt;main&lt;/code&gt; コンパイルで使用されるソースが含まれています。ドキュメントアーティファクト（Javadoc JARなど）も公開する必要がある場合は、以下に示すように、ビルドを手動で設定し、アーティファクトとして関連するパブリケーションに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="c8cb8e17403ff9cb715ea26c126be98970f587df" translate="yes" xml:space="preserve">
          <source>By default, an &lt;code&gt;external&lt;/code&gt; declaration is available regardless your target module system. However, by applying &lt;a href=&quot;../-js-module/index&quot;&gt;JsModule&lt;/a&gt; annotation you can make a declaration unavailable to &lt;em&gt;plain&lt;/em&gt; module system. Some JavaScript libraries are distributed both as a standalone downloadable piece of JavaScript and as a module available as an npm package. To tell the Kotlin compiler to accept both cases, you can augment &lt;a href=&quot;../-js-module/index&quot;&gt;JsModule&lt;/a&gt; with the &lt;code&gt;@JsNonModule&lt;/code&gt; annotation.</source>
          <target state="translated">デフォルトでは、ターゲットモジュールシステムに関係なく、 &lt;code&gt;external&lt;/code&gt; 宣言を使用できます。ただし、&lt;a href=&quot;../-js-module/index&quot;&gt;JsModule&lt;/a&gt;アノテーションを適用することで、&lt;em&gt;単純な&lt;/em&gt;モジュールシステムで宣言を使用できないようにすることができます。一部のJavaScriptライブラリは、スタンドアロンのダウンロード可能なJavaScriptの一部として、およびnpmパッケージとして利用可能なモジュールの両方として配布されます。 Kotlinコンパイラーに両方のケースを受け入れるように&lt;a href=&quot;../-js-module/index&quot;&gt;指示&lt;/a&gt;するには、 &lt;code&gt;@JsNonModule&lt;/code&gt; アノテーションを使用してJsModuleを拡張できます。</target>
        </trans-unit>
        <trans-unit id="58c16e3eeeff5e380f1da54dc86032d6019e8115" translate="yes" xml:space="preserve">
          <source>By default, an Objective-C framework produced by Kotlin/Native supports only one platform. However, such frameworks can be merged into a single universal (fat) binary using the &lt;code&gt;lipo&lt;/code&gt; utility. Particularly, such an operation makes sense for 32-bit and 64-bit iOS frameworks. In this case the resulting universal framework can be used on both 32-bit and 64-bit devices.</source>
          <target state="translated">デフォルトでは、Kotlin / Nativeによって作成されたObjective-Cフレームワークは1つのプラットフォームのみをサポートします。ただし、そのようなフレームワークは、 &lt;code&gt;lipo&lt;/code&gt; ユーティリティを使用して単一のユニバーサル（脂肪）バイナリにマージできます。特に、このような操作は、32ビットおよび64ビットのiOSフレームワークでは理にかなっています。この場合、結果のユニバーサルフレームワークは、32ビットデバイスと64ビットデバイスの両方で使用できます。</target>
        </trans-unit>
        <trans-unit id="12308601a82ae7783306b8c48240a870f666e7e4" translate="yes" xml:space="preserve">
          <source>By default, each project contains two source sets, &lt;code&gt;commonMain&lt;/code&gt; and &lt;code&gt;commonTest&lt;/code&gt;, where one can place all the code that should be shared between all of the target platforms. These source sets are added to each production and test compilation, respectively.</source>
          <target state="translated">デフォルトでは、各プロジェクトには &lt;code&gt;commonMain&lt;/code&gt; と &lt;code&gt;commonTest&lt;/code&gt; の 2つのソースセットが含まれ、すべてのターゲットプラットフォーム間で共有する必要のあるすべてのコードを配置できます。これらのソースセットは、各本番環境とテストコンパイルにそれぞれ追加されます。</target>
        </trans-unit>
        <trans-unit id="5b57d652a4688ee4db7e97bbfdf27f173a8187bc" translate="yes" xml:space="preserve">
          <source>By default, export works non-transitively. If a library &lt;code&gt;foo&lt;/code&gt; depending on library &lt;code&gt;bar&lt;/code&gt; is exported, only methods of &lt;code&gt;foo&lt;/code&gt; will be added in the output framework. This behaviour can by changed by the &lt;code&gt;transitiveExport&lt;/code&gt; flag.</source>
          <target state="translated">デフォルトでは、エクスポートは非​​推移的に機能します。ライブラリ場合は &lt;code&gt;foo&lt;/code&gt; のライブラリに依存する &lt;code&gt;bar&lt;/code&gt; 輸出され、唯一の方法 &lt;code&gt;foo&lt;/code&gt; が出力フレームワークに追加されます。この動作は、 &lt;code&gt;transitiveExport&lt;/code&gt; フラグによって変更できます。</target>
        </trans-unit>
        <trans-unit id="f878eeb715782ef79a35a341bddc04ee6f954270" translate="yes" xml:space="preserve">
          <source>By default, no artifacts of an Android library are published. To publish artifacts produced by a set of &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android variants&lt;/a&gt;, specify the variant names in the Android target block as follows:</source>
          <target state="translated">デフォルトでは、Androidライブラリのアーティファクトは公開されません。&lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Androidバリアントの&lt;/a&gt;セットによって生成されたアーティファクトを公開するには、Androidターゲットブロックでバリアント名を次のように指定します。</target>
        </trans-unit>
        <trans-unit id="b062ead1d5e30fda7c464836f72f0cccd9aaa11e" translate="yes" xml:space="preserve">
          <source>By default, the evaluation of lazy properties is &lt;strong&gt;synchronized&lt;/strong&gt;: the value is computed only in one thread, and all threads will see the same value. If the synchronization of initialization delegate is not required, so that multiple threads can execute it simultaneously, pass &lt;code&gt;LazyThreadSafetyMode.PUBLICATION&lt;/code&gt; as a parameter to the &lt;code&gt;lazy()&lt;/code&gt; function. And if you're sure that the initialization will always happen on a single thread, you can use &lt;code&gt;LazyThreadSafetyMode.NONE&lt;/code&gt; mode, which doesn't incur any thread-safety guarantees and the related overhead.</source>
          <target state="translated">デフォルトでは、遅延プロパティの評価は&lt;strong&gt;同期され&lt;/strong&gt;ます。値は1つのスレッドでのみ計算され、すべてのスレッドで同じ値が表示されます。初期化デリゲートの同期が不要で、複数のスレッドが同時に実行できるようにするには、 &lt;code&gt;LazyThreadSafetyMode.PUBLICATION&lt;/code&gt; をパラメーターとして &lt;code&gt;lazy()&lt;/code&gt; 関数に渡します。また、初期化が常に単一のスレッドで行われることが &lt;code&gt;LazyThreadSafetyMode.NONE&lt;/code&gt; 場合は、LazyThreadSafetyMode.NONEモードを使用できます。これにより、スレッドの安全性の保証と関連するオーバーヘッドが発生しません。</target>
        </trans-unit>
        <trans-unit id="cf91dc8457f024db77525d6ee952007811f3f798" translate="yes" xml:space="preserve">
          <source>By default, the evaluation of lazy properties is &lt;strong&gt;synchronized&lt;/strong&gt;: the value is computed only in one thread, and all threads will see the same value. If the synchronization of initialization delegate is not required, so that multiple threads can execute it simultaneously, pass &lt;code&gt;LazyThreadSafetyMode.PUBLICATION&lt;/code&gt; as a parameter to the &lt;code&gt;lazy()&lt;/code&gt; function. And if you're sure that the initialization will always happen on the same thread as the one where you use the property, you can use &lt;code&gt;LazyThreadSafetyMode.NONE&lt;/code&gt;: it doesn't incur any thread-safety guarantees and the related overhead.</source>
          <target state="translated">デフォルトでは、レイジープロパティの評価は&lt;strong&gt;同期され&lt;/strong&gt;ます。値は1つのスレッドでのみ計算され、すべてのスレッドに同じ値が表示されます。初期化デリゲートの同期が不要で、複数のスレッドが同時に実行できる場合は、 &lt;code&gt;LazyThreadSafetyMode.PUBLICATION&lt;/code&gt; をパラメーターとして &lt;code&gt;lazy()&lt;/code&gt; 関数に渡します。また、初期化が常にプロパティを使用するスレッドと同じスレッドで行われることが &lt;code&gt;LazyThreadSafetyMode.NONE&lt;/code&gt; 場合は、LazyThreadSafetyMode.NONEを使用できます。スレッドセーフの保証や関連するオーバーヘッドは発生しません。</target>
        </trans-unit>
        <trans-unit id="99ffd3726db932db781eb6b6cabe9bafcd306993" translate="yes" xml:space="preserve">
          <source>By default, the resulting set of JavaScript files (your application together with all dependencies) can be found at path &lt;code&gt;$BUILD_DIR/min/&lt;/code&gt;, where &lt;code&gt;$BUILD_DIR&lt;/code&gt; is the path to generated JavaScript (usually, &lt;code&gt;build/classes/main&lt;/code&gt;).</source>
          <target state="translated">デフォルトでは、結果のJavaScriptファイルのセット（アプリケーションとすべての依存関係）はパス &lt;code&gt;$BUILD_DIR/min/&lt;/code&gt; にあります。ここで、 &lt;code&gt;$BUILD_DIR&lt;/code&gt; は生成されたJavaScriptへのパス（通常は &lt;code&gt;build/classes/main&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="aefff3dc0262a1a9c9d1ef5a002b1c76f5499d68" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;provideDelegate&lt;/code&gt; operator you can extend the logic of creating the object to which the property implementation is delegated. If the object used on the right hand side of &lt;code&gt;by&lt;/code&gt; defines &lt;code&gt;provideDelegate&lt;/code&gt; as a member or extension function, that function will be called to create the property delegate instance.</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; 演算子を定義することにより、プロパティの実装が委任されるオブジェクトを作成するロジックを拡張できます。 &lt;code&gt;by&lt;/code&gt; の右側で使用されているオブジェクトが、 &lt;code&gt;provideDelegate&lt;/code&gt; をメンバー関数または拡張関数として定義している場合、その関数が呼び出されて、プロパティデリゲートインスタンスが作成されます。</target>
        </trans-unit>
        <trans-unit id="be5a6408a04e9b0b6fb327f3e01d634a5ce56957" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;provideDelegate&lt;/code&gt; operator you can extend the logic of creating the object to which the property implementation is delegated. If the object used on the right-hand side of &lt;code&gt;by&lt;/code&gt; defines &lt;code&gt;provideDelegate&lt;/code&gt; as a member or extension function, that function will be called to create the property delegate instance.</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; 演算子を定義することにより、プロパティの実装が委任されるオブジェクトを作成するロジックを拡張できます。 &lt;code&gt;by&lt;/code&gt; の右側で使用されるオブジェクトが &lt;code&gt;provideDelegate&lt;/code&gt; をメンバーまたは拡張関数として定義している場合、その関数が呼び出されてプロパティデリゲートインスタンスが作成されます。</target>
        </trans-unit>
        <trans-unit id="4f4baa18a6ce640a87ee1469d12a17abf8cd0644" translate="yes" xml:space="preserve">
          <source>By the convention, all sources are located in the &lt;code&gt;src/&amp;lt;target name&amp;gt;[Main|Test]/kotlin&lt;/code&gt; folders. It creates &lt;em&gt;main&lt;/em&gt; and &lt;em&gt;test&lt;/em&gt; source sets for every target. Let's place the &lt;code&gt;hello.kt&lt;/code&gt; we previously created into the &lt;em&gt;main&lt;/em&gt; source set folder, which is &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt;. The &lt;code&gt;nativeMain&lt;/code&gt; folder comes from the &lt;code&gt;&quot;native&quot;&lt;/code&gt; target name, which we specified in the build script above.</source>
          <target state="translated">規約により、すべてのソースは &lt;code&gt;src/&amp;lt;target name&amp;gt;[Main|Test]/kotlin&lt;/code&gt; フォルダーにあります。すべてのターゲットの&lt;em&gt;メイン&lt;/em&gt;および&lt;em&gt;テスト&lt;/em&gt;ソースセットを作成します。以前に作成した &lt;code&gt;hello.kt&lt;/code&gt; を&lt;em&gt;メインの&lt;/em&gt;ソースセットフォルダー（ &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; )に配置しましょう。 &lt;code&gt;nativeMain&lt;/code&gt; のフォルダには、から来ている &lt;code&gt;&quot;native&quot;&lt;/code&gt; 我々は上記のビルドスクリプトに指定されたターゲット名、。</target>
        </trans-unit>
        <trans-unit id="a0dfab771ea3973b4c2124bbf544d87ad089f95d" translate="yes" xml:space="preserve">
          <source>By using an &lt;em&gt;object expression&lt;/em&gt;, you can now define an anonymous, unnamed class and at the same time create one instance of it, called an &lt;em&gt;anonymous object&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;オブジェクト式&lt;/em&gt;を使用する&lt;em&gt;こと&lt;/em&gt;で、名前のない匿名のクラスを定義すると同時に、&lt;em&gt;匿名オブジェクト&lt;/em&gt;と呼ばれるそのインスタンスを1つ作成でき&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="448cce1bad11787a3aaaf6d4b14ff64be923694d" translate="yes" xml:space="preserve">
          <source>By using well-named functions as builders in combination with &lt;a href=&quot;lambdas#function-literals-with-receiver&quot;&gt;function literals with receiver&lt;/a&gt; it is possible to create type-safe, statically-typed builders in Kotlin.</source>
          <target state="translated">ビルダーとして適切な名前の関数を&lt;a href=&quot;lambdas#function-literals-with-receiver&quot;&gt;、レシーバー&lt;/a&gt;付きの関数リテラルと組み合わせて使用​​することにより、タイプセーフで静的に型指定されたビルダーをKotlinで作成できます。</target>
        </trans-unit>
        <trans-unit id="7803ee252527503b67d1eeb0deb252622746cebd" translate="yes" xml:space="preserve">
          <source>Byte</source>
          <target state="translated">Byte</target>
        </trans-unit>
        <trans-unit id="8051f32f2b762ee221844914c1ad9edc1b014c6f" translate="yes" xml:space="preserve">
          <source>ByteArray</source>
          <target state="translated">ByteArray</target>
        </trans-unit>
        <trans-unit id="7ca4c3b5b837d26b47e13524a62d903214baaeb2" translate="yes" xml:space="preserve">
          <source>ByteIterator</source>
          <target state="translated">ByteIterator</target>
        </trans-unit>
        <trans-unit id="2e71678cd8d8c30b22ed7694dacffdc7ce8aac53" translate="yes" xml:space="preserve">
          <source>ByteVar</source>
          <target state="translated">ByteVar</target>
        </trans-unit>
        <trans-unit id="c3342bc2ee5e67573d8133bca38aac1e90aa9017" translate="yes" xml:space="preserve">
          <source>ByteVarOf</source>
          <target state="translated">ByteVarOf</target>
        </trans-unit>
        <trans-unit id="21abc86076158920e8e684ae35bd4456702276e8" translate="yes" xml:space="preserve">
          <source>Bytes are -128 through 127 due to Kotlin inheriting a bad design decision from Java. In order to get a traditional byte value between 0 and 255, keep the value as-is if it is positive, and add 256 if it is negative (so -128 is really 128, and -1 is really 255). See the section on &lt;a href=&quot;extension-functionsproperties&quot;&gt;extension functions&lt;/a&gt; for a neat workaround for this.</source>
          <target state="translated">KotlinがJavaから悪い設計決定を継承しているため、バイトは-128から127です。0〜255の従来のバイト値を取得するには、値が正の場合はそのままにし、負の場合は256を追加します（つまり、-128は実際には128、-1は実際には255）。このための適切な回避策については、&lt;a href=&quot;extension-functionsproperties&quot;&gt;拡張関数&lt;/a&gt;のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="32b80dccfbc24b758f7138d1b71599f78bc68a2e" translate="yes" xml:space="preserve">
          <source>C Function Pointers in Kotlin</source>
          <target state="translated">KotlinのC関数ポインタ</target>
        </trans-unit>
        <trans-unit id="b1f95093d989b07d82ccf10194388dd2a80f5a48" translate="yes" xml:space="preserve">
          <source>C Interop documentation</source>
          <target state="translated">C インターロップ文書</target>
        </trans-unit>
        <trans-unit id="53cd5afff77d718a16da7a261addfd2e7a746175" translate="yes" xml:space="preserve">
          <source>C Type</source>
          <target state="translated">Cタイプ</target>
        </trans-unit>
        <trans-unit id="de0720287ff37b2cbfaaa0591ad328902d17057c" translate="yes" xml:space="preserve">
          <source>C compiler and linker options</source>
          <target state="translated">C コンパイラとリンカのオプション</target>
        </trans-unit>
        <trans-unit id="989fc820e5551195e144c9823e3208c797ab54ba" translate="yes" xml:space="preserve">
          <source>C data or code.</source>
          <target state="translated">Cデータまたはコード。</target>
        </trans-unit>
        <trans-unit id="5c94a5c24eea74378442f31a2ec53ec9732a238c" translate="yes" xml:space="preserve">
          <source>C does not support objects either. People use function pointers to mimic object semantics. A function pointer is declared as follows &lt;code&gt;RETURN_TYPE (* FIELD_NAME)(PARAMETERS)&lt;/code&gt;. It is tricky to read, but we should be able to see function pointer fields in the structures above.</source>
          <target state="translated">Cもオブジェクトをサポートしていません。人々は、関数ポインタを使用してオブジェクトのセマンティクスを模倣します。関数ポインターは次の &lt;code&gt;RETURN_TYPE (* FIELD_NAME)(PARAMETERS)&lt;/code&gt; 宣言されていますRETURN_TYPE（* FIELD_NAME）（PARAMETERS）。読むのは難しいですが、上記の構造体の関数ポインタフィールドを見ることができるはずです。</target>
        </trans-unit>
        <trans-unit id="1b6fc450a61cb16ec000b609a019e62ec3913527" translate="yes" xml:space="preserve">
          <source>C features</source>
          <target state="translated">Cの特徴</target>
        </trans-unit>
        <trans-unit id="bd7caae6d13d723e3e15fbc66010f92e50b10c54" translate="yes" xml:space="preserve">
          <source>C interop</source>
          <target state="translated">Cインターホップ</target>
        </trans-unit>
        <trans-unit id="b21396dc1ca712c25b956b5bcc452b8d7baa7f60" translate="yes" xml:space="preserve">
          <source>C null pointer is represented as Kotlin's &lt;code&gt;null&lt;/code&gt;, and the pointer type &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; is not nullable, but the &lt;code&gt;CPointer&amp;lt;T&amp;gt;?&lt;/code&gt; is. The values of this type support all the Kotlin operations related to handling &lt;code&gt;null&lt;/code&gt;, e.g. &lt;code&gt;?:&lt;/code&gt;, &lt;code&gt;?.&lt;/code&gt;, &lt;code&gt;!!&lt;/code&gt; etc.:</source>
          <target state="translated">CのnullポインターはKotlinの &lt;code&gt;null&lt;/code&gt; として表され、ポインター型 &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; はnullにできませんが、 &lt;code&gt;CPointer&amp;lt;T&amp;gt;?&lt;/code&gt; です。このタイプの値は、 &lt;code&gt;null&lt;/code&gt; の処理に関連するすべてのKotlin操作をサポートします（例： &lt;code&gt;?:&lt;/code&gt; 、 &lt;code&gt;?.&lt;/code&gt; 、 &lt;code&gt;!!&lt;/code&gt; 等。：</target>
        </trans-unit>
        <trans-unit id="dc151d62ad65e920410dab6555446bf11db7ddfd" translate="yes" xml:space="preserve">
          <source>C pointer.</source>
          <target state="translated">C ポインタ。</target>
        </trans-unit>
        <trans-unit id="e117456e95203a35d890ff7b3058eb710d5d7f86" translate="yes" xml:space="preserve">
          <source>C types are mapped in the way we would expect, note that &lt;code&gt;char&lt;/code&gt; type is mapped to &lt;code&gt;kotlin.Byte&lt;/code&gt; as it is usually an 8-bit signed value.</source>
          <target state="translated">Cタイプは、我々は、メモを期待するようにマッピングされる &lt;code&gt;char&lt;/code&gt; タイプがマップさ &lt;code&gt;kotlin.Byte&lt;/code&gt; それは通常8ビットの符号付きの値であるように。</target>
        </trans-unit>
        <trans-unit id="2917e6fd0f3e33b19006bdd7164bba9ab07aabe5" translate="yes" xml:space="preserve">
          <source>C, &lt;a href=&quot;native/objc_interop&quot;&gt;Swift, and Objective-C&lt;/a&gt; frameworks</source>
          <target state="translated">C、&lt;a href=&quot;native/objc_interop&quot;&gt;Swift、およびObjective-C&lt;/a&gt;フレームワーク</target>
        </trans-unit>
        <trans-unit id="1173dbb43313d07b70a93fae991af36789693f17" translate="yes" xml:space="preserve">
          <source>C:</source>
          <target state="translated">C:</target>
        </trans-unit>
        <trans-unit id="5587b0afcca208a7504cee0d2b70832d76010329" translate="yes" xml:space="preserve">
          <source>CANCELLED</source>
          <target state="translated">CANCELLED</target>
        </trans-unit>
        <trans-unit id="5cdc6fa477463d5f2868f0830b1453a306f2fa9f" translate="yes" xml:space="preserve">
          <source>CANON_EQ</source>
          <target state="translated">CANON_EQ</target>
        </trans-unit>
        <trans-unit id="05dff59689b060e392059bcb723a36e923fd7076" translate="yes" xml:space="preserve">
          <source>CASE_INSENSITIVE_ORDER</source>
          <target state="translated">CASE_INSENSITIVE_ORDER</target>
        </trans-unit>
        <trans-unit id="36b39d95fa7628fc8631aece6f093e7d75dfacd3" translate="yes" xml:space="preserve">
          <source>CArrayPointer</source>
          <target state="translated">CArrayPointer</target>
        </trans-unit>
        <trans-unit id="e4b88b5e5593a3b64f320de4f61462008b202dff" translate="yes" xml:space="preserve">
          <source>CArrayPointerVar</source>
          <target state="translated">CArrayPointerVar</target>
        </trans-unit>
        <trans-unit id="6042f4ccd2b35f8dec9caec98fc66b65acdc25f3" translate="yes" xml:space="preserve">
          <source>CCall</source>
          <target state="translated">CCall</target>
        </trans-unit>
        <trans-unit id="9eca1112729b385d925f7ae25bcbc3cfa491265b" translate="yes" xml:space="preserve">
          <source>CEnum</source>
          <target state="translated">CEnum</target>
        </trans-unit>
        <trans-unit id="b5455516170f19d109400c5956bbee35b500c4f2" translate="yes" xml:space="preserve">
          <source>CEnumEntryAlias</source>
          <target state="translated">CEnumEntryAlias</target>
        </trans-unit>
        <trans-unit id="97ed55287cc4662cda5b3b8fad77ea7ba3b0fe5e" translate="yes" xml:space="preserve">
          <source>CEnumVar</source>
          <target state="translated">CEnumVar</target>
        </trans-unit>
        <trans-unit id="8c0ccef330f1db9aa37890d372291089719b63f3" translate="yes" xml:space="preserve">
          <source>CEnumVarTypeSize</source>
          <target state="translated">CEnumVarTypeSize</target>
        </trans-unit>
        <trans-unit id="7877de4c10096f42fa8b542b38a0c8abfeff2993" translate="yes" xml:space="preserve">
          <source>CFunction</source>
          <target state="translated">CFunction</target>
        </trans-unit>
        <trans-unit id="de93d650439933a417e5398f479ee838df4cb4ca" translate="yes" xml:space="preserve">
          <source>CInterop support</source>
          <target state="translated">CInteropサポート</target>
        </trans-unit>
        <trans-unit id="bb95f17d9243e483e268617dbce738cf49527ccf" translate="yes" xml:space="preserve">
          <source>CLASS</source>
          <target state="translated">CLASS</target>
        </trans-unit>
        <trans-unit id="6f093241bd938f2c115d85f657fff3c48481dc1a" translate="yes" xml:space="preserve">
          <source>CName</source>
          <target state="translated">CName</target>
        </trans-unit>
        <trans-unit id="51a8d6928a4ece9bd6c2ffdeac4703a48f7264cc" translate="yes" xml:space="preserve">
          <source>COMBINING_SPACING_MARK</source>
          <target state="translated">COMBINING_SPACING_MARK</target>
        </trans-unit>
        <trans-unit id="05ea2aeebb1bcb2ad1032369d543dbd4fc81dbb5" translate="yes" xml:space="preserve">
          <source>COMMENTS</source>
          <target state="translated">COMMENTS</target>
        </trans-unit>
        <trans-unit id="a7a1e281255eb12f243d1fb22c16cfeb7bc92339" translate="yes" xml:space="preserve">
          <source>COMMON_NUMBER_SEPARATOR</source>
          <target state="translated">COMMON_NUMBER_SEPARATOR</target>
        </trans-unit>
        <trans-unit id="c52b56dab38211c04eda3b5b35db68636802626a" translate="yes" xml:space="preserve">
          <source>COMPUTED</source>
          <target state="translated">COMPUTED</target>
        </trans-unit>
        <trans-unit id="bdec3307bf74529afc89fcf1474e2489961239de" translate="yes" xml:space="preserve">
          <source>CONNECTOR_PUNCTUATION</source>
          <target state="translated">CONNECTOR_PUNCTUATION</target>
        </trans-unit>
        <trans-unit id="6ed66fd18a1b175704db533d3865fa2679863e6d" translate="yes" xml:space="preserve">
          <source>CONSTRUCTOR</source>
          <target state="translated">CONSTRUCTOR</target>
        </trans-unit>
        <trans-unit id="50978fadde69c77246ce999d9f431f618a6319de" translate="yes" xml:space="preserve">
          <source>CONTROL</source>
          <target state="translated">CONTROL</target>
        </trans-unit>
        <trans-unit id="8fc5c55e6034fd47125219962977975bff811433" translate="yes" xml:space="preserve">
          <source>COROUTINE_SUSPENDED</source>
          <target state="translated">COROUTINE_SUSPENDED</target>
        </trans-unit>
        <trans-unit id="12d1986fc613cfc336463178bd0f86eacc9cbec3" translate="yes" xml:space="preserve">
          <source>COpaque</source>
          <target state="translated">COpaque</target>
        </trans-unit>
        <trans-unit id="cd5d9c91d54b3f73460c195e4e84cb0b00e86b06" translate="yes" xml:space="preserve">
          <source>COpaquePointer</source>
          <target state="translated">COpaquePointer</target>
        </trans-unit>
        <trans-unit id="811c260ca26dab79423d1f8171bada67987007ff" translate="yes" xml:space="preserve">
          <source>COpaquePointerVar</source>
          <target state="translated">COpaquePointerVar</target>
        </trans-unit>
        <trans-unit id="397200d444a672cec5c5eef9dc97e880ce1e2e10" translate="yes" xml:space="preserve">
          <source>CPointed</source>
          <target state="translated">CPointed</target>
        </trans-unit>
        <trans-unit id="51b353fb033a73606eb39e50dc81f9d252aeb1f5" translate="yes" xml:space="preserve">
          <source>CPointer</source>
          <target state="translated">CPointer</target>
        </trans-unit>
        <trans-unit id="6700f1fe51b114e5e9c72c7a33e268ef1f8e7f70" translate="yes" xml:space="preserve">
          <source>CPointerVar</source>
          <target state="translated">CPointerVar</target>
        </trans-unit>
        <trans-unit id="e654c28678d1b6417437c0054f6dc4efab83dee4" translate="yes" xml:space="preserve">
          <source>CPointerVarOf</source>
          <target state="translated">CPointerVarOf</target>
        </trans-unit>
        <trans-unit id="1ac5a2a80e85c8edc6448983eac51d3f84788275" translate="yes" xml:space="preserve">
          <source>CPrimitiveVar</source>
          <target state="translated">CPrimitiveVar</target>
        </trans-unit>
        <trans-unit id="194e13da720a1f025685e5d677eba8a1aff3860a" translate="yes" xml:space="preserve">
          <source>CSS</source>
          <target state="translated">CSS</target>
        </trans-unit>
        <trans-unit id="4ede088fc94d65ce23fbc165eaec3b59039e24ed" translate="yes" xml:space="preserve">
          <source>CSSBoxType</source>
          <target state="translated">CSSBoxType</target>
        </trans-unit>
        <trans-unit id="6afd47d5b7f3283b8d6fd118a275b40e71737fbd" translate="yes" xml:space="preserve">
          <source>CSSRule</source>
          <target state="translated">CSSRule</target>
        </trans-unit>
        <trans-unit id="bbd7eff05e78b46aaddc0d7751b4d6b08b36df99" translate="yes" xml:space="preserve">
          <source>CSSRuleList</source>
          <target state="translated">CSSRuleList</target>
        </trans-unit>
        <trans-unit id="26b46bdb7c8c6ff7e33fbe0e36eb0872be8cd5fc" translate="yes" xml:space="preserve">
          <source>CSSStyleDeclaration</source>
          <target state="translated">CSSStyleDeclaration</target>
        </trans-unit>
        <trans-unit id="10fdabde5da32be8abb7d3568067d963d8ef529e" translate="yes" xml:space="preserve">
          <source>CString</source>
          <target state="translated">CString</target>
        </trans-unit>
        <trans-unit id="0f85a38172841ad31c3642b449845f7454ccd5c9" translate="yes" xml:space="preserve">
          <source>CStruct</source>
          <target state="translated">CStruct</target>
        </trans-unit>
        <trans-unit id="a5d88b1964f1a69d82c336a406f0c7e8b2a0458f" translate="yes" xml:space="preserve">
          <source>CStructVar</source>
          <target state="translated">CStructVar</target>
        </trans-unit>
        <trans-unit id="0eb9b33a40670abf39d39eecfb8c441213774695" translate="yes" xml:space="preserve">
          <source>CURRENCY_SYMBOL</source>
          <target state="translated">CURRENCY_SYMBOL</target>
        </trans-unit>
        <trans-unit id="e6303ccf1ceff324ad3a408b48244faf8b681b0a" translate="yes" xml:space="preserve">
          <source>CURRENT</source>
          <target state="translated">CURRENT</target>
        </trans-unit>
        <trans-unit id="04ae7b30c87d0340e26fda5fe5edc02b7d194589" translate="yes" xml:space="preserve">
          <source>CValue</source>
          <target state="translated">CValue</target>
        </trans-unit>
        <trans-unit id="33bc692b7f747be5f7df544e80eec98e4fe5fd4f" translate="yes" xml:space="preserve">
          <source>CValues</source>
          <target state="translated">CValues</target>
        </trans-unit>
        <trans-unit id="9b1b3ebea096ae4fd53f227491e30122cdb29201" translate="yes" xml:space="preserve">
          <source>CValuesRef</source>
          <target state="translated">CValuesRef</target>
        </trans-unit>
        <trans-unit id="c86e7f2f572ff3b939bce1942ef5b42273538c89" translate="yes" xml:space="preserve">
          <source>CVariable</source>
          <target state="translated">CVariable</target>
        </trans-unit>
        <trans-unit id="50338b3b242845e21a0ace9ae9684283d945fb52" translate="yes" xml:space="preserve">
          <source>Cache</source>
          <target state="translated">Cache</target>
        </trans-unit>
        <trans-unit id="7fab5893b3be679f8a5c05a77544ce77ef30648a" translate="yes" xml:space="preserve">
          <source>CacheBatchOperation</source>
          <target state="translated">CacheBatchOperation</target>
        </trans-unit>
        <trans-unit id="2e747bad89a09a29cc3a20eb8727ed9d9a9efd1f" translate="yes" xml:space="preserve">
          <source>CacheQueryOptions</source>
          <target state="translated">CacheQueryOptions</target>
        </trans-unit>
        <trans-unit id="403e16ddd46c6bceb2d1f1cd983fa06a75aa7c44" translate="yes" xml:space="preserve">
          <source>CacheStorage</source>
          <target state="translated">CacheStorage</target>
        </trans-unit>
        <trans-unit id="34db46b3147a9417752a73e6aa03523556aa3f74" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">このファイルの相対パスを&lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルから計算します。&lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルはディレクトリとして扱われることに注意してください。このファイルが&lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルと一致する場合、パスが空の&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;ファイル&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="06bbcd199ba3b0b2621818db0667d1fa032314ee" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">&lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルからこのファイルの相対パスを計算します。&lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルはディレクトリとして扱われることに注意してください。このファイルが&lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルと一致する場合、パスが空の&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;ファイル&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="0b7d0c89204d227fe3ddb79ad5a1ca46cc60d22c" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">このファイルの相対パスを&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルから計算します。&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルはディレクトリとして扱われることに注意してください。このファイルが&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルと一致する場合、パスが空の&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;ファイル&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="150b56463f9b2a1c3c346b10d895c602dd9b5a34" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルからこのファイルの相対パスを計算します。&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルはディレクトリとして扱われることに注意してください。このファイルが&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルと一致する場合、パスが空の&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;ファイル&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="1db99d0e380dab5e2f3409e8414489a9a1c60607" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">このファイルの相対パスを&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルから計算します。&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルはディレクトリとして扱われることに注意してください。このファイルが&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルと一致する場合、パスが空の&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;ファイル&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="94364f792b1cf1ff342e0b31333a6522ce54fbb1" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルからこのファイルの相対パスを計算します。&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルはディレクトリとして扱われることに注意してください。このファイルが&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルと一致する場合、パスが空の&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;ファイル&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="58b40ce3a3c77f5f445a96771b2f292fe61e0a99" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file, then an empty string will be returned.</source>
          <target state="translated">このファイルの相対パスを&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルから計算します。&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルはディレクトリとして扱われることに注意してください。このファイルが&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;ファイルと一致する場合、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="1cf1bb02e2d297f5d8c6eed509ed4cd0c0ea77a5" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file, then an empty string will be returned.</source>
          <target state="translated">&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルからこのファイルの相対パスを計算します。&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルはディレクトリとして扱われることに注意してください。このファイルが&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;ベース&lt;/a&gt;ファイルと一致する場合、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="e4c23ba488daeba1fd770b81a98e5adb13047cfd" translate="yes" xml:space="preserve">
          <source>Calculates the remainder of dividing this value by the other value.</source>
          <target state="translated">この値を他の値で割った残りを計算します。</target>
        </trans-unit>
        <trans-unit id="b02983a5c7bff13cbf34d935c1690e2b0833b943" translate="yes" xml:space="preserve">
          <source>Callable references</source>
          <target state="translated">呼び出し可能な参照</target>
        </trans-unit>
        <trans-unit id="2f97a910b181d4f0a302c43f82374fb48021ade9" translate="yes" xml:space="preserve">
          <source>Callable references to constructors are typed as one of the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-function/index&quot;&gt;&lt;code&gt;KFunction&amp;lt;out R&amp;gt;&lt;/code&gt;&lt;/a&gt; subtypes , depending on the parameter count.</source>
          <target state="translated">コンストラクターへの呼び出し可能な参照は、パラメーターの数に応じ&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-function/index&quot;&gt; &lt;code&gt;KFunction&amp;lt;out R&amp;gt;&lt;/code&gt; &lt;/a&gt;、KFunction &amp;lt;out R&amp;gt;サブタイプの1つとして型指定されます。</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="3b170cdb6d7fe5181c064cc641c4a8fbcb1cb38b" translate="yes" xml:space="preserve">
          <source>Callbacks are quite common in event-loop architectures such as JavaScript, but even there, generally people have moved away to using other approaches such as promises or reactive extensions.</source>
          <target state="translated">コールバックはJavaScriptのようなイベントループアーキテクチャではよく見られますが、一般的にはプロミスやリアクティブな拡張機能のような他のアプローチを使うことから遠ざかっています。</target>
        </trans-unit>
        <trans-unit id="91f63fb778fbf778d23c69d5a31e985a9cacf308" translate="yes" xml:space="preserve">
          <source>Calling</source>
          <target state="translated">Calling</target>
        </trans-unit>
        <trans-unit id="82ed7e2b6c90eb6b1070acfea5700f43fe78f19f" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;x.equals(null)&lt;/code&gt; on a platform type that is mapped to a Java primitive (&lt;code&gt;Int!&lt;/code&gt;, &lt;code&gt;Boolean!&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;!, &lt;code&gt;Long!&lt;/code&gt;, &lt;code&gt;Float!&lt;/code&gt;, &lt;code&gt;Double!&lt;/code&gt;, &lt;code&gt;Char!&lt;/code&gt;) incorrectly returned &lt;code&gt;true&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; was null. Starting with Kotlin 1.2, calling &lt;code&gt;x.equals(...)&lt;/code&gt; on a null value of a platform type &lt;strong&gt;throws an NPE&lt;/strong&gt; (but &lt;code&gt;x == ...&lt;/code&gt; does not).</source>
          <target state="translated">Javaプリミティブ（ &lt;code&gt;Int!&lt;/code&gt; 、 &lt;code&gt;Boolean!&lt;/code&gt; 、 &lt;code&gt;Short&lt;/code&gt; ！、 &lt;code&gt;Long!&lt;/code&gt; 、 &lt;code&gt;Float!&lt;/code&gt; 、 &lt;code&gt;Double!&lt;/code&gt; 、 &lt;code&gt;Char!&lt;/code&gt; ）にマップされているプラ​​ットフォームタイプで &lt;code&gt;x.equals(null)&lt;/code&gt; を呼び出すと、 &lt;code&gt;x&lt;/code&gt; がnullのときに誤って &lt;code&gt;true&lt;/code&gt; が返されました。Kotlin 1.2以降、プラットフォームタイプのnull値で &lt;code&gt;x.equals(...)&lt;/code&gt; を呼び出すと&lt;strong&gt;、NPE&lt;/strong&gt;が&lt;strong&gt;スローされ&lt;/strong&gt;ます（ただし、 &lt;code&gt;x == ...&lt;/code&gt; は&lt;strong&gt;スローされ&lt;/strong&gt;ません）。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce77bd198c4fdd31f75068333f1e9ca1ead7f67d" translate="yes" xml:space="preserve">
          <source>Calling C, Objective-C, or Swift from Kotlin/Native is easy. Take a look at the &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C Interop documentation&lt;/a&gt; or &lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C and Swift&lt;/a&gt; interop documentation or check out one of our tutorials.</source>
          <target state="translated">Kotlin / NativeからC、Objective-C、またはSwiftを呼び出すのは簡単です。見てみましょう&lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C相互運用機能のドキュメント&lt;/a&gt;や&lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-Cのとスウィフト&lt;/a&gt;相互運用マニュアルを参照してか、私たちのチュートリアルのいずれかをチェックしてください。</target>
        </trans-unit>
        <trans-unit id="e0ba673bd2bca89bc54ee880f294a9f9f2f226e8" translate="yes" xml:space="preserve">
          <source>Calling Java code from Kotlin</source>
          <target state="translated">KotlinからJavaコードを呼び出す</target>
        </trans-unit>
        <trans-unit id="55681c13b88d07dfffc602e02788732270fea423" translate="yes" xml:space="preserve">
          <source>Calling JavaScript from Kotlin</source>
          <target state="translated">KotlinからJavaScriptを呼び出す</target>
        </trans-unit>
        <trans-unit id="e2b579ea1f89a002387cd93af497b90a5db8539b" translate="yes" xml:space="preserve">
          <source>Calling Kotlin Code from Swift</source>
          <target state="translated">SwiftからKotlinコードを呼び出す</target>
        </trans-unit>
        <trans-unit id="ce488fd0d2766e3fc2ba951609bc6095995c87b2" translate="yes" xml:space="preserve">
          <source>Calling Kotlin from Java</source>
          <target state="translated">JavaからKotlinを呼び出す</target>
        </trans-unit>
        <trans-unit id="505017f99d543d9122c5b377a0db051dc35f2068" translate="yes" xml:space="preserve">
          <source>Calling Kotlin from JavaScript</source>
          <target state="translated">JavaScriptからKotlinを呼び出す</target>
        </trans-unit>
        <trans-unit id="f134d5e9c204c2512c7e7ac6bc8abb68b3048346" translate="yes" xml:space="preserve">
          <source>Calling functions uses the traditional approach:</source>
          <target state="translated">関数の呼び出しは従来のアプローチを使用します。</target>
        </trans-unit>
        <trans-unit id="4dcf024b98fbf79e6047b0b390a06b859f1d6c15" translate="yes" xml:space="preserve">
          <source>Calling member functions uses the dot notation:</source>
          <target state="translated">メンバ関数の呼び出しはドット表記を使用します。</target>
        </trans-unit>
        <trans-unit id="52de33d500d0af2ca694a6ba9379af06dbd7ef41" translate="yes" xml:space="preserve">
          <source>Calling multiple methods on an object instance (&lt;code&gt;with&lt;/code&gt;)</source>
          <target state="translated">オブジェクトインスタンスで複数のメソッドを呼び出す（ &lt;code&gt;with&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="23a5f1fe47d421160cd29eb81450feac6c544139" translate="yes" xml:space="preserve">
          <source>Calling the superclass implementation</source>
          <target state="translated">スーパークラスの実装を呼び出す</target>
        </trans-unit>
        <trans-unit id="49e8442ec63e1fb29a9465d7aac088d1059302a0" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../-k-callable/call&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在のサスペンドコンテキストでcallableを呼び出します。callableがサスペンド関数でない場合、&lt;a href=&quot;../-k-callable/call&quot;&gt;KCallable.call&lt;/a&gt;として動作します。それ以外の場合は、現在の継続でサスペンド関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3a4f744b1c6bac7023f7c3b3cb69de59f8fcc6a3" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../-k-callable/call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在の一時停止コンテキストで呼び出し可能オブジェクトを呼び出します。呼び出し可能オブジェクトが中断関数でない場合、&lt;a href=&quot;../-k-callable/call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;として動作します。それ以外の場合は、現在の継続で中断関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="d68fe333acf2d5e03e614e522823b9d64e49fa24" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../-k-callable/call-by&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在のサスペンドコンテキストでcallableを呼び出します。呼び出し可能関数がサスペンド関数でない場合、&lt;a href=&quot;../-k-callable/call-by&quot;&gt;KCallable.callBy&lt;/a&gt;として動作します。それ以外の場合は、現在の継続でサスペンド関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="00132c78556027adc964bfa694608b367cfeda30" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../-k-callable/call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在の一時停止コンテキストで呼び出し可能オブジェクトを呼び出します。呼び出し可能オブジェクトがサスペンド関数でない場合は、&lt;a href=&quot;../-k-callable/call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;として動作します。それ以外の場合は、現在の継続で中断関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8f4300f049c1475df46042d7254c17d1beb9054d" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../kotlin.reflect/-k-callable/call&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在のサスペンドコンテキストでcallableを呼び出します。callableがサスペンド関数でない場合、&lt;a href=&quot;../kotlin.reflect/-k-callable/call&quot;&gt;KCallable.call&lt;/a&gt;として動作します。それ以外の場合は、現在の継続でサスペンド関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="24bbbd79f6ee34dd23756da78c71e8b3fadd7434" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../kotlin.reflect/-k-callable/call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在の一時停止コンテキストで呼び出し可能オブジェクトを呼び出します。呼び出し可能オブジェクトが中断関数でない場合、&lt;a href=&quot;../kotlin.reflect/-k-callable/call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;として動作します。それ以外の場合は、現在の継続で中断関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="af325880858eb6b1c7b61419993eb5f2c9b848ca" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../kotlin.reflect/-k-callable/call-by&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在のサスペンドコンテキストでcallableを呼び出します。呼び出し可能関数がサスペンド関数でない場合、&lt;a href=&quot;../kotlin.reflect/-k-callable/call-by&quot;&gt;KCallable.callBy&lt;/a&gt;として動作します。それ以外の場合は、現在の継続でサスペンド関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bb25a28bd54b39c0b2369935d197104098befe35" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../kotlin.reflect/-k-callable/call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在の一時停止コンテキストで呼び出し可能オブジェクトを呼び出します。呼び出し可能オブジェクトがサスペンド関数でない場合は、&lt;a href=&quot;../kotlin.reflect/-k-callable/call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;として動作します。それ以外の場合は、現在の継続で中断関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="9c6a42fed689c0990336b51915a5518ec6d56b46" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;call&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在のサスペンドコンテキストでcallableを呼び出します。callableがサスペンド関数でない場合、&lt;a href=&quot;call&quot;&gt;KCallable.call&lt;/a&gt;として動作します。それ以外の場合は、現在の継続でサスペンド関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="16e87770726bc687dad9595b8d0ae9c25c719694" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在の一時停止コンテキストで呼び出し可能オブジェクトを呼び出します。呼び出し可能オブジェクトが中断関数でない場合、&lt;a href=&quot;call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;として動作します。それ以外の場合は、現在の継続で中断関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a58f9bdb67a9b5620cf00e886532cbcfdb449acc" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;call-by&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在のサスペンドコンテキストでcallableを呼び出します。呼び出し可能関数がサスペンド関数でない場合、&lt;a href=&quot;call-by&quot;&gt;KCallable.callBy&lt;/a&gt;として動作します。それ以外の場合は、現在の継続でサスペンド関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="5fc64dbbecd3710045a5d9ca426204b2601ce7e2" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">現在の一時停止コンテキストで呼び出し可能オブジェクトを呼び出します。呼び出し可能オブジェクトがサスペンド関数でない場合は、&lt;a href=&quot;call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;として動作します。それ以外の場合は、現在の継続で中断関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b4003362afd6410f2325ecf6e92e3ed0380c6d48" translate="yes" xml:space="preserve">
          <source>Calls of the function will be translated to an assignment of &lt;a href=&quot;set#kotlin.js.Json%24set%28kotlin.String%2C+kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; to the receiver indexed (with square brackets/index operation) with &lt;a href=&quot;set#kotlin.js.Json%24set%28kotlin.String%2C+kotlin.Any%29%2FpropertyName&quot;&gt;propertyName&lt;/a&gt;.</source>
          <target state="translated">関数の呼び出しは、&lt;a href=&quot;set#kotlin.js.Json%24set%28kotlin.String%2C+kotlin.Any%29%2FpropertyName&quot;&gt;propertyNameで&lt;/a&gt;インデックスされた（角かっこ/インデックス操作で）インデックスが付けられたレシーバーへの&lt;a href=&quot;set#kotlin.js.Json%24set%28kotlin.String%2C+kotlin.Any%29%2Fvalue&quot;&gt;値の&lt;/a&gt;割り当てに変換されます。</target>
        </trans-unit>
        <trans-unit id="45277522b9eeea26f4969e17974bd5fc6096a76a" translate="yes" xml:space="preserve">
          <source>Calls of the function will be translated to an assignment of &lt;a href=&quot;set#kotlin.js.Json%24set(kotlin.String,%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the receiver indexed (with square brackets/index operation) with &lt;a href=&quot;set#kotlin.js.Json%24set(kotlin.String,%20kotlin.Any?)/propertyName&quot;&gt;propertyName&lt;/a&gt;.</source>
          <target state="translated">関数の呼び出しは、&lt;a href=&quot;set#kotlin.js.Json%24set(kotlin.String,%20kotlin.Any?)/propertyName&quot;&gt;propertyNameで&lt;/a&gt;インデックス付けされた（角括弧/インデックス操作で）レシーバーへの&lt;a href=&quot;set#kotlin.js.Json%24set(kotlin.String,%20kotlin.Any?)/value&quot;&gt;値の&lt;/a&gt;割り当てに変換されます。</target>
        </trans-unit>
        <trans-unit id="e1cb8690aabe43e450f25dd69e926af342fae97f" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;../use-contents#kotlinx.cinterop%24useContents%28kotlinx.cinterop.CValue%28%28kotlinx.cinterop.useContents.T%29%29%2C+kotlin.Function1%28%28kotlinx.cinterop.useContents.T%2C+kotlinx.cinterop.useContents.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with temporary copy if this value as receiver.</source>
          <target state="translated">この値がレシーバーである場合、一時的なコピーで&lt;a href=&quot;../use-contents#kotlinx.cinterop%24useContents%28kotlinx.cinterop.CValue%28%28kotlinx.cinterop.useContents.T%29%29%2C+kotlin.Function1%28%28kotlinx.cinterop.useContents.T%2C+kotlinx.cinterop.useContents.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="45183370c400997886f6171a671f1f8816539b27" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;../use-contents#kotlinx.cinterop%24useContents(kotlinx.cinterop.CValue((kotlinx.cinterop.useContents.T)),%20kotlin.Function1((kotlinx.cinterop.useContents.T,%20kotlinx.cinterop.useContents.R)))/block&quot;&gt;block&lt;/a&gt; with temporary copy of this value as receiver.</source>
          <target state="translated">この値の一時コピーを含む&lt;a href=&quot;../use-contents#kotlinx.cinterop%24useContents(kotlinx.cinterop.CValue((kotlinx.cinterop.useContents.T)),%20kotlin.Function1((kotlinx.cinterop.useContents.T,%20kotlinx.cinterop.useContents.R)))/block&quot;&gt;ブロック&lt;/a&gt;をレシーバーとして呼び出します。</target>
        </trans-unit>
        <trans-unit id="94dbeffe712e1c2eb8705fe59d66bb4221e06dab" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-contents#kotlinx.cinterop%24useContents%28kotlinx.cinterop.CValue%28%28kotlinx.cinterop.useContents.T%29%29%2C+kotlin.Function1%28%28kotlinx.cinterop.useContents.T%2C+kotlinx.cinterop.useContents.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with temporary copy if this value as receiver.</source>
          <target state="translated">この値がレシーバーである場合、一時的なコピーで&lt;a href=&quot;use-contents#kotlinx.cinterop%24useContents%28kotlinx.cinterop.CValue%28%28kotlinx.cinterop.useContents.T%29%29%2C+kotlin.Function1%28%28kotlinx.cinterop.useContents.T%2C+kotlinx.cinterop.useContents.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="9852a8f33812c1134c8e6da645e1bdb807dcd40a" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-contents#kotlinx.cinterop%24useContents(kotlinx.cinterop.CValue((kotlinx.cinterop.useContents.T)),%20kotlin.Function1((kotlinx.cinterop.useContents.T,%20kotlinx.cinterop.useContents.R)))/block&quot;&gt;block&lt;/a&gt; with temporary copy of this value as receiver.</source>
          <target state="translated">この値の一時コピーを含む&lt;a href=&quot;use-contents#kotlinx.cinterop%24useContents(kotlinx.cinterop.CValue((kotlinx.cinterop.useContents.T)),%20kotlin.Function1((kotlinx.cinterop.useContents.T,%20kotlinx.cinterop.useContents.R)))/block&quot;&gt;ブロック&lt;/a&gt;をレシーバーとして呼び出します。</target>
        </trans-unit>
        <trans-unit id="a9f7cbf9649ace2bd581cd617aa740588ac83868" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.File%2C+java.nio.charset.Charset%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; callback giving it a sequence of all the lines in this file and closes the reader once the processing is complete.</source>
          <target state="translated">このファイルのすべての行のシーケンスを指定して&lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.File%2C+java.nio.charset.Charset%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;コールバックを呼び出し、処理が完了するとリーダーを閉じます。</target>
        </trans-unit>
        <trans-unit id="5ade5306710622e3c8f930ff51884466e52db2fe" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.Reader%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; callback giving it a sequence of all the lines in this file and closes the reader once the processing is complete.</source>
          <target state="translated">このファイルのすべての行のシーケンスを指定して&lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.Reader%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;コールバックを呼び出し、処理が完了するとリーダーを閉じます。</target>
        </trans-unit>
        <trans-unit id="7641779d628967c9d3dca91996c711b5f4369b10" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-lines#kotlin.io%24useLines(java.io.File,%20java.nio.charset.Charset,%20kotlin.Function1((kotlin.sequences.Sequence((kotlin.String)),%20kotlin.io.useLines.T)))/block&quot;&gt;block&lt;/a&gt; callback giving it a sequence of all the lines in this file and closes the reader once the processing is complete.</source>
          <target state="translated">&lt;a href=&quot;use-lines#kotlin.io%24useLines(java.io.File,%20java.nio.charset.Charset,%20kotlin.Function1((kotlin.sequences.Sequence((kotlin.String)),%20kotlin.io.useLines.T)))/block&quot;&gt;ブロック&lt;/a&gt;コールバックを呼び出して、このファイルのすべての行のシーケンスを指定し、処理が完了するとリーダーを閉じます。</target>
        </trans-unit>
        <trans-unit id="d2aba120e7c67b5bdfb5ca3d303cb48699ba0029" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-lines#kotlin.io%24useLines(java.io.Reader,%20kotlin.Function1((kotlin.sequences.Sequence((kotlin.String)),%20kotlin.io.useLines.T)))/block&quot;&gt;block&lt;/a&gt; callback giving it a sequence of all the lines in this file and closes the reader once the processing is complete.</source>
          <target state="translated">&lt;a href=&quot;use-lines#kotlin.io%24useLines(java.io.Reader,%20kotlin.Function1((kotlin.sequences.Sequence((kotlin.String)),%20kotlin.io.useLines.T)))/block&quot;&gt;ブロック&lt;/a&gt;コールバックを呼び出して、このファイルのすべての行のシーケンスを指定し、処理が完了するとリーダーを閉じます。</target>
        </trans-unit>
        <trans-unit id="1889a6e188cd0f4fe350c88938dda5aa489e8804" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../also#kotlin%24also%28kotlin.also.T%2C+kotlin.Function1%28%28kotlin.also.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">指定された関数呼び出し&lt;a href=&quot;../also#kotlin%24also%28kotlin.also.T%2C+kotlin.Function1%28%28kotlin.also.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;と &lt;code&gt;this&lt;/code&gt; 引数や戻り値として &lt;code&gt;this&lt;/code&gt; 値を。</target>
        </trans-unit>
        <trans-unit id="ffc5f83062a65033fb3fb5428ed9549f186874ee" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../also#kotlin%24also(kotlin.also.T,%20kotlin.Function1((kotlin.also.T,%20kotlin.Unit)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">指定された関数呼び出し&lt;a href=&quot;../also#kotlin%24also(kotlin.also.T,%20kotlin.Function1((kotlin.also.T,%20kotlin.Unit)))/block&quot;&gt;ブロック&lt;/a&gt;と &lt;code&gt;this&lt;/code&gt; 引数や戻り値として &lt;code&gt;this&lt;/code&gt; 値を。</target>
        </trans-unit>
        <trans-unit id="4ea4db9db43d6976110b20ce1acd16ddca65f35e" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../apply#kotlin%24apply%28kotlin.apply.T%2C+kotlin.Function1%28%28kotlin.apply.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">指定された関数呼び出し&lt;a href=&quot;../apply#kotlin%24apply%28kotlin.apply.T%2C+kotlin.Function1%28%28kotlin.apply.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を有する &lt;code&gt;this&lt;/code&gt; の受信機と戻るような値 &lt;code&gt;this&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="f8555420120834a4078dc80bcef4a4cd29ecef03" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../apply#kotlin%24apply(kotlin.apply.T,%20kotlin.Function1((kotlin.apply.T,%20kotlin.Unit)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">指定された関数呼び出し&lt;a href=&quot;../apply#kotlin%24apply(kotlin.apply.T,%20kotlin.Function1((kotlin.apply.T,%20kotlin.Unit)))/block&quot;&gt;ブロック&lt;/a&gt;を有する &lt;code&gt;this&lt;/code&gt; の受信機と戻るような値 &lt;code&gt;this&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="078209b9459654f8c9167df0074bae80bf4694eb" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../let#kotlin%24let%28kotlin.let.T%2C+kotlin.Function1%28%28kotlin.let.T%2C+kotlin.let.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns its result.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値を引数として指定されたファンクション&lt;a href=&quot;../let#kotlin%24let%28kotlin.let.T%2C+kotlin.Function1%28%28kotlin.let.T%2C+kotlin.let.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="d94a1c1fb801d6754021c308c6a900c4670c1ca7" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../let#kotlin%24let(kotlin.let.T,%20kotlin.Function1((kotlin.let.T,%20kotlin.let.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns its result.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値を引数として指定された関数&lt;a href=&quot;../let#kotlin%24let(kotlin.let.T,%20kotlin.Function1((kotlin.let.T,%20kotlin.let.R)))/block&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="413763cf663eeb76e4cbc6ba24b962a88418bb8c" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../run#kotlin%24run%28kotlin.run.T%2C+kotlin.Function1%28%28kotlin.run.T%2C+kotlin.run.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its result.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値をレシーバーとして指定されたファンクション&lt;a href=&quot;../run#kotlin%24run%28kotlin.run.T%2C+kotlin.Function1%28%28kotlin.run.T%2C+kotlin.run.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="12a612c8e28140fc29ef9647026d723928878fe2" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../run#kotlin%24run(kotlin.run.T,%20kotlin.Function1((kotlin.run.T,%20kotlin.run.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its result.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値をレシーバーとして指定された関数&lt;a href=&quot;../run#kotlin%24run(kotlin.run.T,%20kotlin.Function1((kotlin.run.T,%20kotlin.run.R)))/block&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="ea859f4a518fc3a1215d13efa61a759c166edce2" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../run-catching#kotlin%24runCatching%28kotlin.runCatching.T%2C+kotlin.Function1%28%28kotlin.runCatching.T%2C+kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its encapsulated result if invocation was successful, catching and encapsulating any thrown exception as a failure.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値をレシーバーとして指定されたファンクション&lt;a href=&quot;../run-catching#kotlin%24runCatching%28kotlin.runCatching.T%2C+kotlin.Function1%28%28kotlin.runCatching.T%2C+kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を呼び出し、呼び出しが成功した場合はカプセル化された結果を返し、スローされた例外を失敗としてキャッチしてカプセル化します。</target>
        </trans-unit>
        <trans-unit id="6c950c8cad5ae4a1157f188f4b2bc9789a0e2a03" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its encapsulated result if invocation was successful, catching any &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception that was thrown from the &lt;a href=&quot;../run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; function execution and encapsulating it as a failure.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値をレシーバーとして指定された関数&lt;a href=&quot;../run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;ブロック&lt;/a&gt;を呼び出し、呼び出しが成功した場合はカプセル化された結果を返し、&lt;a href=&quot;../run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;ブロック&lt;/a&gt;関数の実行からスローされた&lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt;例外をキャッチし、失敗としてカプセル化します。</target>
        </trans-unit>
        <trans-unit id="27c2788fee2c255105b9cd867f454b646391c644" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;also#kotlin%24also%28kotlin.also.T%2C+kotlin.Function1%28%28kotlin.also.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">指定された関数呼び出し&lt;a href=&quot;also#kotlin%24also%28kotlin.also.T%2C+kotlin.Function1%28%28kotlin.also.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;と &lt;code&gt;this&lt;/code&gt; 引数や戻り値として &lt;code&gt;this&lt;/code&gt; 値を。</target>
        </trans-unit>
        <trans-unit id="c5cb87faa3b7d5deef0d5037fde19ccc9e576f83" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;also#kotlin%24also(kotlin.also.T,%20kotlin.Function1((kotlin.also.T,%20kotlin.Unit)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">指定された関数呼び出し&lt;a href=&quot;also#kotlin%24also(kotlin.also.T,%20kotlin.Function1((kotlin.also.T,%20kotlin.Unit)))/block&quot;&gt;ブロック&lt;/a&gt;と &lt;code&gt;this&lt;/code&gt; 引数や戻り値として &lt;code&gt;this&lt;/code&gt; 値を。</target>
        </trans-unit>
        <trans-unit id="96d8292022e87d6802505e7709d15b67e7a571b1" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;apply#kotlin%24apply%28kotlin.apply.T%2C+kotlin.Function1%28%28kotlin.apply.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">指定された関数呼び出し&lt;a href=&quot;apply#kotlin%24apply%28kotlin.apply.T%2C+kotlin.Function1%28%28kotlin.apply.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を有する &lt;code&gt;this&lt;/code&gt; の受信機と戻るような値 &lt;code&gt;this&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="fe675097d84b997131f92033e3778ab8e56f6670" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;apply#kotlin%24apply(kotlin.apply.T,%20kotlin.Function1((kotlin.apply.T,%20kotlin.Unit)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">指定された関数呼び出し&lt;a href=&quot;apply#kotlin%24apply(kotlin.apply.T,%20kotlin.Function1((kotlin.apply.T,%20kotlin.Unit)))/block&quot;&gt;ブロック&lt;/a&gt;を有する &lt;code&gt;this&lt;/code&gt; の受信機と戻るような値 &lt;code&gt;this&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="45184693a76689b4b0ff8737b19972165c51ecf5" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;let#kotlin%24let%28kotlin.let.T%2C+kotlin.Function1%28%28kotlin.let.T%2C+kotlin.let.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns its result.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値を引数として指定されたファンクション&lt;a href=&quot;let#kotlin%24let%28kotlin.let.T%2C+kotlin.Function1%28%28kotlin.let.T%2C+kotlin.let.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="2cd09c65e920473de74f37f791d2d6974af63c14" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;let#kotlin%24let(kotlin.let.T,%20kotlin.Function1((kotlin.let.T,%20kotlin.let.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns its result.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値を引数として指定された関数&lt;a href=&quot;let#kotlin%24let(kotlin.let.T,%20kotlin.Function1((kotlin.let.T,%20kotlin.let.R)))/block&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="61e00fb8b32476486f65ff02dfd2c83a03e55788" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run#kotlin%24run%28kotlin.Function0%28%28kotlin.run.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; and returns its result.</source>
          <target state="translated">指定されたファンクション&lt;a href=&quot;run#kotlin%24run%28kotlin.Function0%28%28kotlin.run.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="2f6f3e400e3e582d57d57f03511dcc626eae7637" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run#kotlin%24run%28kotlin.run.T%2C+kotlin.Function1%28%28kotlin.run.T%2C+kotlin.run.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its result.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値をレシーバーとして指定されたファンクション&lt;a href=&quot;run#kotlin%24run%28kotlin.run.T%2C+kotlin.Function1%28%28kotlin.run.T%2C+kotlin.run.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="a5abd3bf2547ca51ee2777f95feb3288a2bda079" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run#kotlin%24run(kotlin.Function0((kotlin.run.R)))/block&quot;&gt;block&lt;/a&gt; and returns its result.</source>
          <target state="translated">指定された関数&lt;a href=&quot;run#kotlin%24run(kotlin.Function0((kotlin.run.R)))/block&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="8514d9dfffba91d4b5b353f2e13b2edb91c15585" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run#kotlin%24run(kotlin.run.T,%20kotlin.Function1((kotlin.run.T,%20kotlin.run.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its result.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値をレシーバーとして指定された関数&lt;a href=&quot;run#kotlin%24run(kotlin.run.T,%20kotlin.Function1((kotlin.run.T,%20kotlin.run.R)))/block&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="3b3fcd284f88793a9b63d88de44e6d5308af1e20" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run-catching#kotlin%24runCatching%28kotlin.Function0%28%28kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; and returns its encapsulated result if invocation was successful, catching and encapsulating any thrown exception as a failure.</source>
          <target state="translated">指定された関数&lt;a href=&quot;run-catching#kotlin%24runCatching%28kotlin.Function0%28%28kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を呼び出し、呼び出しが成功した場合はカプセル化された結果を返し、スローされた例外を失敗としてキャッチしてカプセル化します。</target>
        </trans-unit>
        <trans-unit id="20026c2f1eb5224bc2c942ca5c2ec63f2a4a349d" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run-catching#kotlin%24runCatching%28kotlin.runCatching.T%2C+kotlin.Function1%28%28kotlin.runCatching.T%2C+kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its encapsulated result if invocation was successful, catching and encapsulating any thrown exception as a failure.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値をレシーバーとして指定されたファンクション&lt;a href=&quot;run-catching#kotlin%24runCatching%28kotlin.runCatching.T%2C+kotlin.Function1%28%28kotlin.runCatching.T%2C+kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を呼び出し、呼び出しが成功した場合はカプセル化された結果を返し、スローされた例外を失敗としてキャッチしてカプセル化します。</target>
        </trans-unit>
        <trans-unit id="9e44496e77cdbedf1f9acc6231a02f20aaea70a5" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.Function0((kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; and returns its encapsulated result if invocation was successful, catching any &lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception that was thrown from the &lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.Function0((kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; function execution and encapsulating it as a failure.</source>
          <target state="translated">指定された関数&lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.Function0((kotlin.runCatching.R)))/block&quot;&gt;ブロック&lt;/a&gt;を呼び出し、呼び出しが成功した場合はカプセル化された結果を返し、&lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.Function0((kotlin.runCatching.R)))/block&quot;&gt;ブロック&lt;/a&gt;関数の実行からスローされた&lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt;例外をキャッチし、それを失敗としてカプセル化します。</target>
        </trans-unit>
        <trans-unit id="ed7300a67595764d318c95df0168542979bfaa75" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its encapsulated result if invocation was successful, catching any &lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception that was thrown from the &lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; function execution and encapsulating it as a failure.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 値をレシーバーとして指定された関数&lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;ブロック&lt;/a&gt;を呼び出し、呼び出しが成功した場合はカプセル化された結果を返し、&lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;ブロック&lt;/a&gt;関数の実行からスローされた&lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt;例外をキャッチし、失敗としてカプセル化します。</target>
        </trans-unit>
        <trans-unit id="784bc3faccb4d060019a3bd80a8875afbd2bb4a9" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;with#kotlin%24with%28kotlin.with.T%2C+kotlin.Function1%28%28kotlin.with.T%2C+kotlin.with.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with the given &lt;a href=&quot;with#kotlin%24with%28kotlin.with.T%2C+kotlin.Function1%28%28kotlin.with.T%2C+kotlin.with.R%29%29%29%2Freceiver&quot;&gt;receiver&lt;/a&gt; as its receiver and returns its result.</source>
          <target state="translated">指定されたレシーバーを&lt;a href=&quot;with#kotlin%24with%28kotlin.with.T%2C+kotlin.Function1%28%28kotlin.with.T%2C+kotlin.with.R%29%29%29%2Freceiver&quot;&gt;レシーバー&lt;/a&gt;として指定されたファンクション&lt;a href=&quot;with#kotlin%24with%28kotlin.with.T%2C+kotlin.Function1%28%28kotlin.with.T%2C+kotlin.with.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="5200d99ada72e1c325bc0c10302bd6c6c1f6ed11" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;with#kotlin%24with(kotlin.with.T,%20kotlin.Function1((kotlin.with.T,%20kotlin.with.R)))/block&quot;&gt;block&lt;/a&gt; with the given &lt;a href=&quot;with#kotlin%24with(kotlin.with.T,%20kotlin.Function1((kotlin.with.T,%20kotlin.with.R)))/receiver&quot;&gt;receiver&lt;/a&gt; as its receiver and returns its result.</source>
          <target state="translated">指定されたレシーバーを&lt;a href=&quot;with#kotlin%24with(kotlin.with.T,%20kotlin.Function1((kotlin.with.T,%20kotlin.with.R)))/receiver&quot;&gt;レシーバー&lt;/a&gt;として指定された関数&lt;a href=&quot;with#kotlin%24with(kotlin.with.T,%20kotlin.Function1((kotlin.with.T,%20kotlin.with.R)))/block&quot;&gt;ブロック&lt;/a&gt;を呼び出し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="9f9c8aae32b643ccb905a50a88b964fcc563ff71" translate="yes" xml:space="preserve">
          <source>Calls this callable with the specified list of arguments and returns the result. Throws an exception if the number of specified arguments is not equal to the size of &lt;a href=&quot;../-k-callable/parameters&quot;&gt;parameters&lt;/a&gt;, or if their types do not match the types of the parameters.</source>
          <target state="translated">指定された引数のリストを使用してこのcallableを呼び出し、結果を返します。指定された引数の数が&lt;a href=&quot;../-k-callable/parameters&quot;&gt;パラメーター&lt;/a&gt;のサイズと等しくない場合、またはそれらのタイプがパラメーターのタイプと一致しない場合、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="ddcef407507cfef2cb27a753812e5d889553da91" translate="yes" xml:space="preserve">
          <source>Calls this callable with the specified list of arguments and returns the result. Throws an exception if the number of specified arguments is not equal to the size of &lt;a href=&quot;parameters&quot;&gt;parameters&lt;/a&gt;, or if their types do not match the types of the parameters.</source>
          <target state="translated">指定された引数のリストを使用してこのcallableを呼び出し、結果を返します。指定された引数の数が&lt;a href=&quot;parameters&quot;&gt;パラメーター&lt;/a&gt;のサイズと等しくない場合、またはそれらのタイプがパラメーターのタイプと一致しない場合、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="eb6c73d37b42595e7a7a81d2958c024f90c21195" translate="yes" xml:space="preserve">
          <source>Calls this callable with the specified list of arguments and returns the result. Throws an exception if the number of specified arguments is not equal to the size of &lt;a href=&quot;parameters#kotlin.reflect.KCallable%24parameters&quot;&gt;parameters&lt;/a&gt;, or if their types do not match the types of the parameters.</source>
          <target state="translated">引数のリストを指定してこの呼び出し可能オブジェクトを呼び出し、結果を返します。指定された引数の数が&lt;a href=&quot;parameters#kotlin.reflect.KCallable%24parameters&quot;&gt;parameters&lt;/a&gt;のサイズと等しくない場合、またはそれらの型がパラメーターの型と一致しない場合は、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="8afb2db5cc87a799faf80833c9012f2a02d23010" translate="yes" xml:space="preserve">
          <source>Calls this callable with the specified mapping of parameters to arguments and returns the result. If a parameter is not found in the mapping and is not optional (as per &lt;a href=&quot;../-k-parameter/is-optional&quot;&gt;KParameter.isOptional&lt;/a&gt;), or its type does not match the type of the provided value, an exception is thrown.</source>
          <target state="translated">パラメータから引数への指定されたマッピングを使用してこのcallableを呼び出し、結果を返します。パラメータがマッピングに見つからず、オプションではない場合（&lt;a href=&quot;../-k-parameter/is-optional&quot;&gt;KParameter.isOptionalのように&lt;/a&gt;）、またはそのタイプが指定された値のタイプと一致しない場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="6dce76d0ae19257aa86c427d1a3622b123e09781" translate="yes" xml:space="preserve">
          <source>Calls this callable with the specified mapping of parameters to arguments and returns the result. If a parameter is not found in the mapping and is not optional (as per &lt;a href=&quot;../-k-parameter/is-optional#kotlin.reflect.KParameter%24isOptional&quot;&gt;KParameter.isOptional&lt;/a&gt;), or its type does not match the type of the provided value, an exception is thrown.</source>
          <target state="translated">パラメータの引数への指定されたマッピングを使用してこの呼び出し可能オブジェクトを呼び出し、結果を返します。パラメータがマッピングに見つからず、オプションではない場合（&lt;a href=&quot;../-k-parameter/is-optional#kotlin.reflect.KParameter%24isOptional&quot;&gt;KParameter.isOptionalのように&lt;/a&gt;）、またはそのタイプが提供された値のタイプと一致しない場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="658854a7f04bb269a4ab8b8fa7d0698e8a68d048" translate="yes" xml:space="preserve">
          <source>Calls to the function will be translated to indexing operation (square brackets) on the receiver with &lt;a href=&quot;get#kotlin.js.Json%24get%28kotlin.String%29%2FpropertyName&quot;&gt;propertyName&lt;/a&gt; as the argument.</source>
          <target state="translated">関数の呼び出しは、&lt;a href=&quot;get#kotlin.js.Json%24get%28kotlin.String%29%2FpropertyName&quot;&gt;propertyName&lt;/a&gt;を引数として、レシーバーのインデックス操作（角かっこ）に変換されます。</target>
        </trans-unit>
        <trans-unit id="4054b8674e66a28f5bcd000124d242189e7248a5" translate="yes" xml:space="preserve">
          <source>Calls to the function will be translated to indexing operation (square brackets) on the receiver with &lt;a href=&quot;get#kotlin.js.Json%24get(kotlin.String)/propertyName&quot;&gt;propertyName&lt;/a&gt; as the argument.</source>
          <target state="translated">関数の呼び出しは、&lt;a href=&quot;get#kotlin.js.Json%24get(kotlin.String)/propertyName&quot;&gt;propertyName&lt;/a&gt;を引数として、レシーバーでのインデックス作成操作（角括弧）に変換されます。</target>
        </trans-unit>
        <trans-unit id="5742a45c495453ef8905065dcf3c63d2eacbb105" translate="yes" xml:space="preserve">
          <source>CallsInPlace</source>
          <target state="translated">CallsInPlace</target>
        </trans-unit>
        <trans-unit id="95efde3ceee47a98cbb5b9bd821507624396f907" translate="yes" xml:space="preserve">
          <source>Can I use Kotlin for Android development?</source>
          <target state="translated">Android開発にKotlinは使えますか?</target>
        </trans-unit>
        <trans-unit id="148f7ac58df24f13b1f6cc0a60796f4f33cd212c" translate="yes" xml:space="preserve">
          <source>Can I use Kotlin for desktop development?</source>
          <target state="translated">デスクトップ開発にKotlinは使えますか?</target>
        </trans-unit>
        <trans-unit id="08f90b1cc445d8ce0dd63b8cd07c857dbc92b5d2" translate="yes" xml:space="preserve">
          <source>Can I use Kotlin for native development?</source>
          <target state="translated">ネイティブ開発でKotlinは使えますか?</target>
        </trans-unit>
        <trans-unit id="a52843acfecd2cf845ec7b9e2b53bc422496c48c" translate="yes" xml:space="preserve">
          <source>Can I use Kotlin for server-side development?</source>
          <target state="translated">サーバーサイドの開発にKotlinは使えますか?</target>
        </trans-unit>
        <trans-unit id="533a1197857a6f927ea423c7b5a49a935adb8221" translate="yes" xml:space="preserve">
          <source>Can I use Kotlin for web development?</source>
          <target state="translated">Web開発にKotlinは使えますか?</target>
        </trans-unit>
        <trans-unit id="360a50f0c5f3ebe39197bdda61c8cfca5bc66d4c" translate="yes" xml:space="preserve">
          <source>Can be called from JavaScript like this:</source>
          <target state="translated">このようにJavaScriptから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2499f61f64f34b66ca45aa95905f2afd3ba979f4" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes 0 arguments and returns the value of the property type &lt;a href=&quot;-getter#R&quot;&gt;R&lt;/a&gt;.</source>
          <target state="translated">0個の引数を取り、プロパティタイプ&lt;a href=&quot;-getter#R&quot;&gt;Rの&lt;/a&gt;値を返す関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="462dfa03a916d1dcf1056942e46780c805e410cc" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes 0 arguments and returns the value of the property type &lt;a href=&quot;-getter#V&quot;&gt;V&lt;/a&gt;.</source>
          <target state="translated">0個の引数を取り、プロパティタイプ&lt;a href=&quot;-getter#V&quot;&gt;Vの&lt;/a&gt;値を返す関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="1e80567b1ef5fffe902f192fbecd0fbc3aacc59f" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes an argument of type &lt;a href=&quot;-getter#D&quot;&gt;D&lt;/a&gt; (the first receiver), an argument of type &lt;a href=&quot;-getter#E&quot;&gt;E&lt;/a&gt; (the second receiver) and returns the value of the property type &lt;a href=&quot;-getter#R&quot;&gt;R&lt;/a&gt;.</source>
          <target state="translated">タイプ&lt;a href=&quot;-getter#D&quot;&gt;D&lt;/a&gt;（最初のレシーバー）の引数、タイプ&lt;a href=&quot;-getter#E&quot;&gt;E&lt;/a&gt;（2番目のレシーバー）の引数を取り、プロパティタイプ&lt;a href=&quot;-getter#R&quot;&gt;Rの&lt;/a&gt;値を返す関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="9ca3802ad07f55ab1e95adbe2fb1ae42041c68ae" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes an argument of type &lt;a href=&quot;-getter#D&quot;&gt;D&lt;/a&gt; (the first receiver), an argument of type &lt;a href=&quot;-getter#E&quot;&gt;E&lt;/a&gt; (the second receiver) and returns the value of the property type &lt;a href=&quot;-getter#V&quot;&gt;V&lt;/a&gt;.</source>
          <target state="translated">タイプ&lt;a href=&quot;-getter#D&quot;&gt;D&lt;/a&gt;（最初のレシーバー）の引数、タイプ&lt;a href=&quot;-getter#E&quot;&gt;E&lt;/a&gt;（2番目のレシーバー）の引数を取り、プロパティタイプ&lt;a href=&quot;-getter#V&quot;&gt;Vの&lt;/a&gt;値を返す関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="9dbc541fe3c7dd68d1e4e23a374201f0ebf0aa5b" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes an argument of type &lt;a href=&quot;-getter#T&quot;&gt;T&lt;/a&gt; (the receiver) and returns the value of the property type &lt;a href=&quot;-getter#R&quot;&gt;R&lt;/a&gt;.</source>
          <target state="translated">タイプ&lt;a href=&quot;-getter#T&quot;&gt;T&lt;/a&gt;（レシーバー）の引数を取り、プロパティタイプ&lt;a href=&quot;-getter#R&quot;&gt;Rの&lt;/a&gt;値を返す関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="beba68933be9fab0ec857b78311b31d55cf484f0" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes an argument of type &lt;a href=&quot;-getter#T&quot;&gt;T&lt;/a&gt; (the receiver) and returns the value of the property type &lt;a href=&quot;-getter#V&quot;&gt;V&lt;/a&gt;.</source>
          <target state="translated">タイプ&lt;a href=&quot;-getter#T&quot;&gt;T&lt;/a&gt;（レシーバー）の引数を取り、プロパティタイプ&lt;a href=&quot;-getter#V&quot;&gt;Vの&lt;/a&gt;値を返す関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="eb03f6cacb746652107428acca7dacd8ec8429f8" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes an argument of type &lt;a href=&quot;-setter#D&quot;&gt;D&lt;/a&gt; (the first receiver), an argument of type &lt;a href=&quot;-setter#E&quot;&gt;E&lt;/a&gt; (the second receiver), and the new property value and returns &lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit&lt;/a&gt;.</source>
          <target state="translated">タイプ&lt;a href=&quot;-setter#D&quot;&gt;Dの&lt;/a&gt;引数（最初のレシーバー）、タイプ&lt;a href=&quot;-setter#E&quot;&gt;Eの&lt;/a&gt;引数（2番目のレシーバー）、および新しいプロパティ値を取り、&lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit&lt;/a&gt;を返す関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="ae3115f15974deda92fe9f96be1fea591abfc2d5" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes new property value as an argument and returns &lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit&lt;/a&gt;.</source>
          <target state="translated">新しいプロパティ値を引数として取り、&lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit&lt;/a&gt;を返す関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="2ca851a6bf9d692daa6259a9504e49f491303de2" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes the receiver and the new property value as arguments and returns &lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit&lt;/a&gt;.</source>
          <target state="translated">レシーバーと新しいプロパティ値を引数として取り、&lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit&lt;/a&gt;を返す関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="7211c19d616b685daa3bee14cbe71c749d10e4e0" translate="yes" xml:space="preserve">
          <source>CanPlayTypeResult</source>
          <target state="translated">CanPlayTypeResult</target>
        </trans-unit>
        <trans-unit id="f311addd351f862eae7f810f286dddb63f875658" translate="yes" xml:space="preserve">
          <source>Cancellable suspending functions throw &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt; on cancellation which can be handled in the usual way. For example, &lt;code&gt;try {...} finally {...}&lt;/code&gt; expression and Kotlin &lt;code&gt;use&lt;/code&gt; function execute their finalization actions normally when a coroutine is cancelled:</source>
          <target state="translated">キャンセル可能な一時停止関数は、通常の方法で処理できる&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;キャンセル時にCancellationException&lt;/a&gt;をスローします。たとえば、 &lt;code&gt;try {...} finally {...}&lt;/code&gt; 式を試してみると、コルーチンがキャンセルされたときに、Kotlinの &lt;code&gt;use&lt;/code&gt; 関数が通常のファイナライズアクションを実行します。</target>
        </trans-unit>
        <trans-unit id="fe5ceba59e434540bf707325daf265a730010867" translate="yes" xml:space="preserve">
          <source>Cancellation and Timeouts</source>
          <target state="translated">キャンセルとタイムアウト</target>
        </trans-unit>
        <trans-unit id="b910ee31a35d40d4412d731fa9087eb81dfa6d64" translate="yes" xml:space="preserve">
          <source>Cancellation and exceptions</source>
          <target state="translated">キャンセルと例外</target>
        </trans-unit>
        <trans-unit id="bef7bb5e57e5a92b8be6213bc977ef4ea4184ce0" translate="yes" xml:space="preserve">
          <source>Cancellation and timeouts</source>
          <target state="translated">キャンセルとタイムアウト</target>
        </trans-unit>
        <trans-unit id="e138f6c99c5aa83be543b10b0ca85c2c01e772b9" translate="yes" xml:space="preserve">
          <source>Cancellation exceptions are transparent and are unwrapped by default:</source>
          <target state="translated">キャンセルの例外は透過的で、デフォルトではアンラップされます。</target>
        </trans-unit>
        <trans-unit id="0e726cdbe302223fdfbec98285ec520b533b2180" translate="yes" xml:space="preserve">
          <source>Cancellation exceptions are transparent and unwrapped by default:</source>
          <target state="translated">キャンセルの例外は透過的で、デフォルトではアンラッピングされます。</target>
        </trans-unit>
        <trans-unit id="61d367778c32e9ef072df9163bc2b3e7c0641802" translate="yes" xml:space="preserve">
          <source>Cancellation is always propagated through coroutines hierarchy:</source>
          <target state="translated">キャンセルは常にコアーチンの階層を介して伝搬されます。</target>
        </trans-unit>
        <trans-unit id="50c49fe010016b533aec86340ec9452f83af59c6" translate="yes" xml:space="preserve">
          <source>Cancellation is closely related to exceptions. Coroutines internally use &lt;code&gt;CancellationException&lt;/code&gt; for cancellation, these exceptions are ignored by all handlers, so they should be used only as the source of additional debug information, which can be obtained by &lt;code&gt;catch&lt;/code&gt; block. When a coroutine is cancelled using &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;Job.cancel&lt;/a&gt;, it terminates, but it does not cancel its parent.</source>
          <target state="translated">キャンセルは例外と密接に関連しています。コルーチンは内部的に &lt;code&gt;CancellationException&lt;/code&gt; を使用します。これらの例外はすべてのハンドラーによって無視されるため、 &lt;code&gt;catch&lt;/code&gt; ブロックによって取得できる追加のデバッグ情報のソースとしてのみ使用する必要があります。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;Job.cancel&lt;/a&gt;を使用してコルーチンがキャンセルされると、コルーチンは終了しますが、その親はキャンセルされません。</target>
        </trans-unit>
        <trans-unit id="750aa75447df039f202611427dbb0083059a1aa1" translate="yes" xml:space="preserve">
          <source>Cancellation is cooperative</source>
          <target state="translated">キャンセルは協力的</target>
        </trans-unit>
        <trans-unit id="af14cd9b3ef3f2d110e66bdaac2d65cd831b9258" translate="yes" xml:space="preserve">
          <source>Cancellation is tightly bound with exceptions. Coroutines internally use &lt;code&gt;CancellationException&lt;/code&gt; for cancellation, these exceptions are ignored by all handlers, so they should be used only as the source of additional debug information, which can be obtained by &lt;code&gt;catch&lt;/code&gt; block. When a coroutine is cancelled using &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;Job.cancel&lt;/a&gt; without a cause, it terminates, but it does not cancel its parent. Cancelling without cause is a mechanism for parent to cancel its children without cancelling itself.</source>
          <target state="translated">キャンセルは例外を除いて厳しく制限されています。コルーチンは内部的に &lt;code&gt;CancellationException&lt;/code&gt; を使用してキャンセルします。これらの例外はすべてのハンドラーによって無視されるため、 &lt;code&gt;catch&lt;/code&gt; ブロックで取得できる追加のデバッグ情報のソースとしてのみ使用する必要があります。原因なしで&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;Job.cancel&lt;/a&gt;を使用してコルーチンがキャンセルされると、コルーチンは終了しますが、その親はキャンセルされません。原因なしでキャンセルすることは、親が自分自身をキャンセルせずに子をキャンセルするメカニズムです。</target>
        </trans-unit>
        <trans-unit id="8fe9cb2f4c068f9a53d28beb7e018a9bdfa65f1f" translate="yes" xml:space="preserve">
          <source>CancellationException</source>
          <target state="translated">CancellationException</target>
        </trans-unit>
        <trans-unit id="8f5bb7c3df9532ba67a3064437dfd961e456af82" translate="yes" xml:space="preserve">
          <source>Cancelling coroutine execution</source>
          <target state="translated">コルーティンの実行をキャンセルする</target>
        </trans-unit>
        <trans-unit id="f4a22d2703e3410da551d71a6a9f534ae02e9d30" translate="yes" xml:space="preserve">
          <source>Cannot be used in an inline function, to avoid binary compatibility issues.</source>
          <target state="translated">バイナリの互換性の問題を避けるため、インライン関数では使用できません。</target>
        </trans-unit>
        <trans-unit id="5f8df748391820d506d96f090af9502a82b32c12" translate="yes" xml:space="preserve">
          <source>CanvasCompositing</source>
          <target state="translated">CanvasCompositing</target>
        </trans-unit>
        <trans-unit id="09942dc0221982f9890a721ea9f36de0a0e818a1" translate="yes" xml:space="preserve">
          <source>CanvasDirection</source>
          <target state="translated">CanvasDirection</target>
        </trans-unit>
        <trans-unit id="8003d7bd1cce03545167120ec47fae8bb4fd91bc" translate="yes" xml:space="preserve">
          <source>CanvasDrawImage</source>
          <target state="translated">CanvasDrawImage</target>
        </trans-unit>
        <trans-unit id="a7732c95e9547581d321c33e851ac915eb0c36fc" translate="yes" xml:space="preserve">
          <source>CanvasDrawPath</source>
          <target state="translated">CanvasDrawPath</target>
        </trans-unit>
        <trans-unit id="4cdc78c4d8f41c91bc82cadd87236babc0770643" translate="yes" xml:space="preserve">
          <source>CanvasFillRule</source>
          <target state="translated">CanvasFillRule</target>
        </trans-unit>
        <trans-unit id="47d85eb146ab47af64e67047d7b645121b5f2b8e" translate="yes" xml:space="preserve">
          <source>CanvasFillStrokeStyles</source>
          <target state="translated">CanvasFillStrokeStyles</target>
        </trans-unit>
        <trans-unit id="621b992ab00c21bac72e0f790c3f252cf5a61f87" translate="yes" xml:space="preserve">
          <source>CanvasFilters</source>
          <target state="translated">CanvasFilters</target>
        </trans-unit>
        <trans-unit id="d0160ae7ea0f13645922c9389a913a3bc5603942" translate="yes" xml:space="preserve">
          <source>CanvasGradient</source>
          <target state="translated">CanvasGradient</target>
        </trans-unit>
        <trans-unit id="f713d15048871df6207bfa21e089a2a692ef1053" translate="yes" xml:space="preserve">
          <source>CanvasHitRegion</source>
          <target state="translated">CanvasHitRegion</target>
        </trans-unit>
        <trans-unit id="8906f16f149f388a30a61d46fb6cec59ecccac6a" translate="yes" xml:space="preserve">
          <source>CanvasImageData</source>
          <target state="translated">CanvasImageData</target>
        </trans-unit>
        <trans-unit id="dff170cc018a3208226df1bb91e1d4672b08d3bd" translate="yes" xml:space="preserve">
          <source>CanvasImageSmoothing</source>
          <target state="translated">CanvasImageSmoothing</target>
        </trans-unit>
        <trans-unit id="4442be0dd384eafda26b362b05089ac6715c4e11" translate="yes" xml:space="preserve">
          <source>CanvasImageSource</source>
          <target state="translated">CanvasImageSource</target>
        </trans-unit>
        <trans-unit id="2bde5288ca2282e29c7d96d81e3a364f7aeca0c0" translate="yes" xml:space="preserve">
          <source>CanvasLineCap</source>
          <target state="translated">CanvasLineCap</target>
        </trans-unit>
        <trans-unit id="33f67d72895f7922cfe60454529fb14da6cb6065" translate="yes" xml:space="preserve">
          <source>CanvasLineJoin</source>
          <target state="translated">CanvasLineJoin</target>
        </trans-unit>
        <trans-unit id="9441f1e6fb843aa677da744a1a6205c97a2b8df5" translate="yes" xml:space="preserve">
          <source>CanvasPath</source>
          <target state="translated">CanvasPath</target>
        </trans-unit>
        <trans-unit id="2e69ad659a7d09f0fad96a6cd38fb311e9d69d40" translate="yes" xml:space="preserve">
          <source>CanvasPathDrawingStyles</source>
          <target state="translated">CanvasPathDrawingStyles</target>
        </trans-unit>
        <trans-unit id="216ebe743f70853d170a1e43971be0c6cfa00f5c" translate="yes" xml:space="preserve">
          <source>CanvasPattern</source>
          <target state="translated">CanvasPattern</target>
        </trans-unit>
        <trans-unit id="3d6c5455d9bd0b85606b3ec0266b9813b1897664" translate="yes" xml:space="preserve">
          <source>CanvasRect</source>
          <target state="translated">CanvasRect</target>
        </trans-unit>
        <trans-unit id="f70215f7e53a7e484dc4fde2bbe97c1b40d128c5" translate="yes" xml:space="preserve">
          <source>CanvasRenderingContext2D</source>
          <target state="translated">CanvasRenderingContext2D</target>
        </trans-unit>
        <trans-unit id="5e8eb1f25e845b2013b3cfae2b62f23783f07a41" translate="yes" xml:space="preserve">
          <source>CanvasRenderingContext2DSettings</source>
          <target state="translated">CanvasRenderingContext2DSettings</target>
        </trans-unit>
        <trans-unit id="d050c138d1cb0ac4e3c761bb874eb26de64c7578" translate="yes" xml:space="preserve">
          <source>CanvasShadowStyles</source>
          <target state="translated">CanvasShadowStyles</target>
        </trans-unit>
        <trans-unit id="b5dcc551f32fbcb66b28107f1a94f9404c7e21a8" translate="yes" xml:space="preserve">
          <source>CanvasState</source>
          <target state="translated">CanvasState</target>
        </trans-unit>
        <trans-unit id="d160f26dca4b3427d128c32e97fce1fcd3f5a667" translate="yes" xml:space="preserve">
          <source>CanvasText</source>
          <target state="translated">CanvasText</target>
        </trans-unit>
        <trans-unit id="ccd125296018ef8e9dfddc7e282e9e51504f9ab7" translate="yes" xml:space="preserve">
          <source>CanvasTextAlign</source>
          <target state="translated">CanvasTextAlign</target>
        </trans-unit>
        <trans-unit id="7454119991d0b51aaec0668356693b8452173d7c" translate="yes" xml:space="preserve">
          <source>CanvasTextBaseline</source>
          <target state="translated">CanvasTextBaseline</target>
        </trans-unit>
        <trans-unit id="bc3f1062e8215f9b7c927e44a40fdb603ee6b86d" translate="yes" xml:space="preserve">
          <source>CanvasTextDrawingStyles</source>
          <target state="translated">CanvasTextDrawingStyles</target>
        </trans-unit>
        <trans-unit id="7c4c59048c03e3b2409c317987dc831784584ec5" translate="yes" xml:space="preserve">
          <source>CanvasTransform</source>
          <target state="translated">CanvasTransform</target>
        </trans-unit>
        <trans-unit id="fa922e9c45ac10511c2e18fc1126b93ead7be130" translate="yes" xml:space="preserve">
          <source>CanvasUserInterface</source>
          <target state="translated">CanvasUserInterface</target>
        </trans-unit>
        <trans-unit id="ca09c54bff74a82bae543ebe259f7452ee8c5293" translate="yes" xml:space="preserve">
          <source>Capabilities</source>
          <target state="translated">Capabilities</target>
        </trans-unit>
        <trans-unit id="c1bbc81661c94e57ff41fa474b6205ffd488374e" translate="yes" xml:space="preserve">
          <source>Capturing &lt;code&gt;when&lt;/code&gt; subject in a variable</source>
          <target state="translated">変数で主語をとる &lt;code&gt;when&lt;/code&gt; キャプチャ</target>
        </trans-unit>
        <trans-unit id="dccd76a7be95de25448b988c15de0da9b509e4af" translate="yes" xml:space="preserve">
          <source>CaretPosition</source>
          <target state="translated">CaretPosition</target>
        </trans-unit>
        <trans-unit id="0afa595bc08d7c995d5d3fedf3540d8738e12b76" translate="yes" xml:space="preserve">
          <source>Carry on solving</source>
          <target state="translated">解き続ける</target>
        </trans-unit>
        <trans-unit id="e0f540f92c7222f2992e0ffca4cb3124cdab0766" translate="yes" xml:space="preserve">
          <source>Casting</source>
          <target state="translated">Casting</target>
        </trans-unit>
        <trans-unit id="06a068efbf4ee6a1694ee9df6fe8df0a38390f0a" translate="yes" xml:space="preserve">
          <source>Casting a pointer (including &lt;code&gt;COpaquePointer&lt;/code&gt;) can be done with &lt;code&gt;.reinterpret&amp;lt;T&amp;gt;&lt;/code&gt;, e.g.:</source>
          <target state="translated">ポインターのキャスト（ &lt;code&gt;COpaquePointer&lt;/code&gt; を含む）は、 &lt;code&gt;.reinterpret&amp;lt;T&amp;gt;&lt;/code&gt; して実行できます。例：</target>
        </trans-unit>
        <trans-unit id="afab4876a4ee3ad31a7923b8299c6fec530ae92d" translate="yes" xml:space="preserve">
          <source>Casting and type testing</source>
          <target state="translated">鋳造・型式試験</target>
        </trans-unit>
        <trans-unit id="f861ab8adce922ca7f2432dc6c09aa64671bd8a9" translate="yes" xml:space="preserve">
          <source>Casting between mapped types</source>
          <target state="translated">マップされたタイプ間のキャスト</target>
        </trans-unit>
        <trans-unit id="caada6c6ec79dcc030dc939a9522d494bdcf2121" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../../kotlin.reflect.full/cast#kotlin.reflect.full%24cast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.cast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.reflect.full/cast#kotlin.reflect.full%24cast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.cast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトが表すクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="dd85863a99d7bbf5fd5743853dfc458d904cbf86" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../../kotlin.reflect.full/cast#kotlin.reflect.full%24cast(kotlin.reflect.KClass((kotlin.reflect.full.cast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.reflect.full/cast#kotlin.reflect.full%24cast(kotlin.reflect.KClass((kotlin.reflect.full.cast.T)),%20kotlin.Any?)/value&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトによって表されるクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="74705e4e7b829069cb479fae6235d3ffa245aae9" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../../kotlin.reflect.full/safe-cast#kotlin.reflect.full%24safeCast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.safeCast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.reflect.full/safe-cast#kotlin.reflect.full%24safeCast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.safeCast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトが表すクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a65a780dff7278e7485cb16d82c83a8674ad46a3" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../../kotlin.reflect.full/safe-cast#kotlin.reflect.full%24safeCast(kotlin.reflect.KClass((kotlin.reflect.full.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.reflect.full/safe-cast#kotlin.reflect.full%24safeCast(kotlin.reflect.KClass((kotlin.reflect.full.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトによって表されるクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2ef0ad51b05bc848cbb4440e9fb5228987c93b14" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../cast#kotlin.reflect%24cast(kotlin.reflect.KClass((kotlin.reflect.cast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;../cast#kotlin.reflect%24cast(kotlin.reflect.KClass((kotlin.reflect.cast.T)),%20kotlin.Any?)/value&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトによって表されるクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="a84723f8e066188ff6d11965a76e9c3a3d0f8feb" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../safe-cast#kotlin.reflect%24safeCast(kotlin.reflect.KClass((kotlin.reflect.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;../safe-cast#kotlin.reflect%24safeCast(kotlin.reflect.KClass((kotlin.reflect.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトによって表されるクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="596c5ef4cec8865a3fd608ea6b9c65d9b61064fa" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;cast#kotlin.reflect%24cast(kotlin.reflect.KClass((kotlin.reflect.cast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;cast#kotlin.reflect%24cast(kotlin.reflect.KClass((kotlin.reflect.cast.T)),%20kotlin.Any?)/value&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトによって表されるクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="17806de484aeab3a47990b82b07a5ef37d5809dc" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;cast#kotlin.reflect.full%24cast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.cast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;cast#kotlin.reflect.full%24cast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.cast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトが表すクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="5c66e6c48d91abd62eee8af01bd34b324578314a" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;cast#kotlin.reflect.full%24cast(kotlin.reflect.KClass((kotlin.reflect.full.cast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;cast#kotlin.reflect.full%24cast(kotlin.reflect.KClass((kotlin.reflect.full.cast.T)),%20kotlin.Any?)/value&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトによって表されるクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="d2c5eea39f56aca06d4e9aabc0ef67e4836c97ee" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;safe-cast#kotlin.reflect%24safeCast(kotlin.reflect.KClass((kotlin.reflect.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;safe-cast#kotlin.reflect%24safeCast(kotlin.reflect.KClass((kotlin.reflect.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトによって表されるクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7f684f05770c5e5fe6227b88f6206195e8913c71" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;safe-cast#kotlin.reflect.full%24safeCast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.safeCast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;safe-cast#kotlin.reflect.full%24safeCast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.safeCast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトが表すクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="17085f418a9e912754c58561f4d0bf75704f7eeb" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;safe-cast#kotlin.reflect.full%24safeCast(kotlin.reflect.KClass((kotlin.reflect.full.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">指定された&lt;a href=&quot;safe-cast#kotlin.reflect.full%24safeCast(kotlin.reflect.KClass((kotlin.reflect.full.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;値&lt;/a&gt;を、この&lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;オブジェクトによって表されるクラスにキャストします。値が &lt;code&gt;null&lt;/code&gt; の場合、またはこのクラスのインスタンスでない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d29e8d9bd82b9b52fa52ca384e6870b38cfc1fc9" translate="yes" xml:space="preserve">
          <source>Category member</source>
          <target state="translated">カテゴリーメンバー</target>
        </trans-unit>
        <trans-unit id="7ee6423dbf5769ec42af73fdd93989bd70c02881" translate="yes" xml:space="preserve">
          <source>Category members</source>
          <target state="translated">カテゴリーメンバー</target>
        </trans-unit>
        <trans-unit id="0864fac858ae3e068420c0d0cce435ab4447175e" translate="yes" xml:space="preserve">
          <source>Central Processor Unit architecture.</source>
          <target state="translated">セントラルプロセッサユニットのアーキテクチャ。</target>
        </trans-unit>
        <trans-unit id="f794caffb7bfcc084f55b05d1ca3fa848124a5e9" translate="yes" xml:space="preserve">
          <source>Certified Training</source>
          <target state="translated">認定トレーニング</target>
        </trans-unit>
        <trans-unit id="6f733b9e61cac0a722928e275d32ff698a66b2f1" translate="yes" xml:space="preserve">
          <source>Chained call wrapping</source>
          <target state="translated">連鎖コールラッピング</target>
        </trans-unit>
        <trans-unit id="408514ef0724e60f622a362d62d48e79d5764d84" translate="yes" xml:space="preserve">
          <source>Changes the interpretation of the pointed data or code.</source>
          <target state="translated">ポイントされたデータやコードの解釈を変更します。</target>
        </trans-unit>
        <trans-unit id="ce4866daf3ad76485c588ff66ed11dee1d37a911" translate="yes" xml:space="preserve">
          <source>Changes the value associated with the key of this entry.</source>
          <target state="translated">このエントリのキーに関連付けられた値を変更します。</target>
        </trans-unit>
        <trans-unit id="dc88027e6a741f779cd748b3363d72a9b962829a" translate="yes" xml:space="preserve">
          <source>Changing formatting in an existing project is a far more demanding task, and should probably be started with discussing all the caveats with the team.</source>
          <target state="translated">既存のプロジェクトでフォーマットを変更するのは、はるかに困難な作業であり、すべての注意点についてチームと話し合うことから始めるべきでしょう。</target>
        </trans-unit>
        <trans-unit id="f608880dded647afc69260b9caee61cf457fbb6c" translate="yes" xml:space="preserve">
          <source>Changing private/internal APIs and other implementation details.</source>
          <target state="translated">プライベート/インターナルAPIなどの実装内容の変更</target>
        </trans-unit>
        <trans-unit id="82106f167628c6561286c36dfbc3393f7b40b4a7" translate="yes" xml:space="preserve">
          <source>Changing view caching strategy</source>
          <target state="translated">ビューキャッシング戦略の変更</target>
        </trans-unit>
        <trans-unit id="393cd35fac39b9caaf9b9071bd6fedd830588212" translate="yes" xml:space="preserve">
          <source>Channel basics</source>
          <target state="translated">チャンネルの基本</target>
        </trans-unit>
        <trans-unit id="18e03e2a37ba37df713f9665ef752fb8b40fc1e8" translate="yes" xml:space="preserve">
          <source>Channels</source>
          <target state="translated">Channels</target>
        </trans-unit>
        <trans-unit id="108ee9713a43e6c2693880416acf1ae998bc68ce" translate="yes" xml:space="preserve">
          <source>Channels (experimental)</source>
          <target state="translated">チャンネル(実験的)</target>
        </trans-unit>
        <trans-unit id="bf292fdd1f7874feb3dfc0dbb4202def57bef472" translate="yes" xml:space="preserve">
          <source>Channels are fair</source>
          <target state="translated">チャネルは公正である</target>
        </trans-unit>
        <trans-unit id="0f9ba953e35135a3f8ec268817cc92f2557202a9" translate="yes" xml:space="preserve">
          <source>Char</source>
          <target state="translated">Char</target>
        </trans-unit>
        <trans-unit id="60bf8f54a68be267ea77345590ac5cd8abb74e72" translate="yes" xml:space="preserve">
          <source>Char sequences and strings in addition have an &lt;code&gt;ifBlank&lt;/code&gt; extension that does the same thing as &lt;code&gt;ifEmpty&lt;/code&gt;, but checks for a string being all whitespace instead of empty.</source>
          <target state="translated">加えて、charシーケンスと文字列を持っている &lt;code&gt;ifBlank&lt;/code&gt; のと同じものでない拡張子 &lt;code&gt;ifEmpty&lt;/code&gt; を、しかし、文字列のチェックは、すべての空白の代わりに、空であること。</target>
        </trans-unit>
        <trans-unit id="96e256b8b38d7493b5984a01d0b76b7f5e161e6b" translate="yes" xml:space="preserve">
          <source>CharArray</source>
          <target state="translated">CharArray</target>
        </trans-unit>
        <trans-unit id="21662f73ab2c143506e074e7125d2912962bc742" translate="yes" xml:space="preserve">
          <source>CharCategory</source>
          <target state="translated">CharCategory</target>
        </trans-unit>
        <trans-unit id="8641be6480d061955a6a6512333655fc98b529c1" translate="yes" xml:space="preserve">
          <source>CharDirectionality</source>
          <target state="translated">CharDirectionality</target>
        </trans-unit>
        <trans-unit id="824cfd3af26160879c2ac3cf561cedcd0a7c7144" translate="yes" xml:space="preserve">
          <source>CharIterator</source>
          <target state="translated">CharIterator</target>
        </trans-unit>
        <trans-unit id="a70f42f3e09977366c4370d5cd2eee5b60b64955" translate="yes" xml:space="preserve">
          <source>CharProgression</source>
          <target state="translated">CharProgression</target>
        </trans-unit>
        <trans-unit id="6cb20d661b17f81e907c62549a515c0ae1a62ae3" translate="yes" xml:space="preserve">
          <source>CharRange</source>
          <target state="translated">CharRange</target>
        </trans-unit>
        <trans-unit id="ee352e16ffeb4d6a086bccab16f296b15acb8cc9" translate="yes" xml:space="preserve">
          <source>CharSequence</source>
          <target state="translated">CharSequence</target>
        </trans-unit>
        <trans-unit id="9a15e38982ff9afc3765678f3881aff1f68a57d8" translate="yes" xml:space="preserve">
          <source>CharSequence.groupingBy</source>
          <target state="translated">CharSequence.groupingBy</target>
        </trans-unit>
        <trans-unit id="97d0ead8789ade10e4a920bf34f6297222355263" translate="yes" xml:space="preserve">
          <source>Character literals go in single quotes: &lt;code&gt;'1'&lt;/code&gt;. Special characters can be escaped using a backslash. The following escape sequences are supported: &lt;code&gt;\t&lt;/code&gt;, &lt;code&gt;\b&lt;/code&gt;, &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt;, &lt;code&gt;\'&lt;/code&gt;, &lt;code&gt;\&quot;&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt; and &lt;code&gt;\$&lt;/code&gt;. To encode any other character, use the Unicode escape sequence syntax: &lt;code&gt;'\uFF00'&lt;/code&gt;.</source>
          <target state="translated">文字リテラルは単一引用符で囲みます： &lt;code&gt;'1'&lt;/code&gt; 。特殊文字は、バックスラッシュを使用してエスケープできます。次のエスケープシーケンスがサポートされています： &lt;code&gt;\t&lt;/code&gt; 、 &lt;code&gt;\b&lt;/code&gt; 、 &lt;code&gt;\n&lt;/code&gt; 、 &lt;code&gt;\r&lt;/code&gt; 、 &lt;code&gt;\'&lt;/code&gt; 、 &lt;code&gt;\&quot;&lt;/code&gt; 、 &lt;code&gt;\\&lt;/code&gt; と &lt;code&gt;\$&lt;/code&gt; 。他の文字をエンコードするには、Unicodeのエスケープシーケンスの構文を使用します。 &lt;code&gt;'\uFF00'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c42a0a3569b629a7af93ad1c987fd90967c0fca" translate="yes" xml:space="preserve">
          <source>Character.toTitleCase</source>
          <target state="translated">Character.toTitleCase</target>
        </trans-unit>
        <trans-unit id="fadd9e5c9325f42cc90e4dcfd5e60c57c2fbe46a" translate="yes" xml:space="preserve">
          <source>CharacterCodingException</source>
          <target state="translated">CharacterCodingException</target>
        </trans-unit>
        <trans-unit id="b6f59f08fd6d58c6725e21a9ec24e068148ec586" translate="yes" xml:space="preserve">
          <source>Characters</source>
          <target state="translated">Characters</target>
        </trans-unit>
        <trans-unit id="d1e46233d431f9c51818e3cad5a41555704e7a02" translate="yes" xml:space="preserve">
          <source>Characters are appended in order, starting at the index 0.</source>
          <target state="translated">文字はインデックス 0 から順に追加されます。</target>
        </trans-unit>
        <trans-unit id="fadf7e4792cf64d3aad517d37493baa9735d2001" translate="yes" xml:space="preserve">
          <source>Characters are represented by the type &lt;code&gt;Char&lt;/code&gt;. They can not be treated directly as numbers</source>
          <target state="translated">文字は &lt;code&gt;Char&lt;/code&gt; 型で表されます。直接数値として扱うことはできません</target>
        </trans-unit>
        <trans-unit id="23621907080a3a764c144af18d2a2f9bab0a9bbf" translate="yes" xml:space="preserve">
          <source>Charsets</source>
          <target state="translated">Charsets</target>
        </trans-unit>
        <trans-unit id="2c9a8a19d661b6c61dde01e1d01b64f74e2cb6a1" translate="yes" xml:space="preserve">
          <source>Check for index overflow in operations on very long sequences</source>
          <target state="translated">非常に長いシーケンスに対する操作でのインデックスオーバーフローをチェックする</target>
        </trans-unit>
        <trans-unit id="6302726c69077b4ebc4c3c46eb49bb79de6c708d" translate="yes" xml:space="preserve">
          <source>Check if a number is out of range:</source>
          <target state="translated">数値が範囲外かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="437dbbaade4ad3f4d69fe740f4906d71a2d5bd91" translate="yes" xml:space="preserve">
          <source>Check if a number is within a range using &lt;em&gt;in&lt;/em&gt; operator:</source>
          <target state="translated">&lt;em&gt;in&lt;/em&gt;演算子を使用&lt;em&gt;して&lt;/em&gt;、数値が範囲内にあるかどうかを確認&lt;em&gt;し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6f1ff728312029597a3cdf34ffddcf123b633c0b" translate="yes" xml:space="preserve">
          <source>Check if byte order of the current platform is least significant byte (LSB) first, aka little endian.</source>
          <target state="translated">現在のプラットフォームのバイト順がLSB(Little Endian)と呼ばれる最小バイト(LSB)が最初にあるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="002be62cf9683291e0190eaeea12582af2b85579" translate="yes" xml:space="preserve">
          <source>Check if current architecture allows unaligned access to wider than byte locations.</source>
          <target state="translated">現在のアーキテクチャでは、バイト位置よりも広い位置へのアラインメントされていないアクセスが許可されているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="d12264046294a607009128dce650e88cdebfb5ee" translate="yes" xml:space="preserve">
          <source>Check out Google's &lt;a href=&quot;https://developer.android.com/samples/index.html?language=kotlin&quot;&gt;sample projects written in Kotlin&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developer.android.com/samples/index.html?language=kotlin&quot;&gt;Kotlinで作成さ&lt;/a&gt;れたGoogleのサンプルプロジェクトを確認してください。</target>
        </trans-unit>
        <trans-unit id="32f9c2b405a5dcb99423a9a7deeb9fd7abfa9155" translate="yes" xml:space="preserve">
          <source>Check out Google's &lt;a href=&quot;https://developer.android.com/samples/index.html?language=kotlin&quot;&gt;sample projects written in Kotlin&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.android.com/samples/index.html?language=kotlin&quot;&gt;Kotlinで書かれ&lt;/a&gt;たGoogleのサンプルプロジェクトをご覧ください。</target>
        </trans-unit>
        <trans-unit id="828f18a3be03d9146dec69ac49c4bd19ead986fc" translate="yes" xml:space="preserve">
          <source>Check out these community resources for more information:</source>
          <target state="translated">詳細については、これらのコミュニティリソースをチェックしてください。</target>
        </trans-unit>
        <trans-unit id="c7661384a3c3bb6e9a4e804c90aab56c34668852" translate="yes" xml:space="preserve">
          <source>Check the article on &lt;a href=&quot;js-modules&quot;&gt;JavaScript Modules&lt;/a&gt; for more information on the topic of JavaScript module systems.</source>
          <target state="translated">JavaScriptモジュールシステムのトピックの詳細については、&lt;a href=&quot;js-modules&quot;&gt;JavaScriptモジュール&lt;/a&gt;に関する記事を確認してください。</target>
        </trans-unit>
        <trans-unit id="75ea8b1321f2ff23323e36e9007412f9ea7cb89d" translate="yes" xml:space="preserve">
          <source>Check the state of each coroutine.</source>
          <target state="translated">各コルーチンの状態を確認します。</target>
        </trans-unit>
        <trans-unit id="35422006e8d54d6f2507a81fb7e5e2f61dc9a1c2" translate="yes" xml:space="preserve">
          <source>Checked Exceptions</source>
          <target state="translated">チェック済みの例外</target>
        </trans-unit>
        <trans-unit id="98a9a776f2f953ab47ef42b85ea71e9ed6294243" translate="yes" xml:space="preserve">
          <source>Checked exceptions</source>
          <target state="translated">チェック済みの例外</target>
        </trans-unit>
        <trans-unit id="2ec920cf6ce1fcceef744b1c29c435b940c5e602" translate="yes" xml:space="preserve">
          <source>Checking element presence in a collection.</source>
          <target state="translated">コレクション内の要素の存在を確認する</target>
        </trans-unit>
        <trans-unit id="bb584694ea104d07fd8e3e713d92e78671008e54" translate="yes" xml:space="preserve">
          <source>Checking existence</source>
          <target state="translated">存在を確認する</target>
        </trans-unit>
        <trans-unit id="982a79cfb4460f5939ed66b600c478a6fae01222" translate="yes" xml:space="preserve">
          <source>Checking for &lt;em&gt;null&lt;/em&gt; in conditions</source>
          <target state="translated">条件の&lt;em&gt;nullの&lt;/em&gt;チェック</target>
        </trans-unit>
        <trans-unit id="1cb7384b892c58af751e12a8ef40d8881cb78d9e" translate="yes" xml:space="preserve">
          <source>Checking if a collection contains an object using &lt;em&gt;in&lt;/em&gt; operator:</source>
          <target state="translated">コレクションにオブジェクトが含まれているかどうかを&lt;em&gt;in&lt;/em&gt;演算子を使用&lt;em&gt;して&lt;/em&gt;確認&lt;em&gt;し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="235091c4a32de30040c5d6e2f8c341a72de7afe8" translate="yes" xml:space="preserve">
          <source>Checking whether a lateinit var is initialized</source>
          <target state="translated">lateinit varが初期化されているかどうかのチェック</target>
        </trans-unit>
        <trans-unit id="336ccf337bda950aa1251870eec811ff97defc2c" translate="yes" xml:space="preserve">
          <source>Checking whether a lateinit var is initialized (since 1.2)</source>
          <target state="translated">lateinit varが初期化されているかどうかのチェック (1.2以降)</target>
        </trans-unit>
        <trans-unit id="8307a11bdb066aa396828f11f29d2218a40cc7b1" translate="yes" xml:space="preserve">
          <source>Checks if all elements in the specified collection are contained in this collection.</source>
          <target state="translated">指定されたコレクションのすべての要素がこのコレクションに含まれているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="aadab33726938c4885c5b9db839a1f312e4be197" translate="yes" xml:space="preserve">
          <source>Checks if array can contain element of type &lt;a href=&quot;../../kotlin.jvm/is-array-of#T&quot;&gt;T&lt;/a&gt;.</source>
          <target state="translated">配列が&lt;a href=&quot;../../kotlin.jvm/is-array-of#T&quot;&gt;T&lt;/a&gt;型の要素を含むことができるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="0a8cd7e5d1bb6108e937a6ba52d06771ed507424" translate="yes" xml:space="preserve">
          <source>Checks if array can contain element of type &lt;a href=&quot;is-array-of#T&quot;&gt;T&lt;/a&gt;.</source>
          <target state="translated">配列が&lt;a href=&quot;is-array-of#T&quot;&gt;T&lt;/a&gt;型の要素を含むことができるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="1306a9d3f7c4c4e6912b118b0ddf002407e419eb" translate="yes" xml:space="preserve">
          <source>Checks if given object is null or frozen or permanent (i.e. instantiated at compile-time).</source>
          <target state="translated">与えられたオブジェクトがNULLかフリーズしているか、永久的か(コンパイル時にインスタンス化されているか)をチェックします。</target>
        </trans-unit>
        <trans-unit id="98b70cdece60c84edab0266cf8f6296652ba19f7" translate="yes" xml:space="preserve">
          <source>Checks if the codepoint specified is a supplementary codepoint or not.</source>
          <target state="translated">指定したコードポイントが補助コードポイントであるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="2a36d0e4973d0f3959414858b0a9dfbc86f01816" translate="yes" xml:space="preserve">
          <source>Checks if the map contains the given key.</source>
          <target state="translated">マップに指定されたキーが含まれているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="061db2f7932872d8018e195128e8af7749c72a09" translate="yes" xml:space="preserve">
          <source>Checks if the progression is empty.</source>
          <target state="translated">プログレッションが空かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="49a5b83beb19902a752e95a6b222e822bb90faea" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Int%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">指定された&lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Int%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;値&lt;/a&gt;がこの範囲に属するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="93f5d1fa7ff37cab0ef52a384e6db4cc89e48d23" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Long%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">指定された&lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Long%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;値&lt;/a&gt;がこの範囲に属するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="840e9154a8b92175f0142e2b663a2e04299744eb" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.UIntRange%2C+kotlin.UByte%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">指定された&lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.UIntRange%2C+kotlin.UByte%29%2Fvalue&quot;&gt;値&lt;/a&gt;がこの範囲に属するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="d574ee7a2ac4727abd755f0c8adda4f55a25d2ed" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ULongRange%2C+kotlin.UByte%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">指定された&lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ULongRange%2C+kotlin.UByte%29%2Fvalue&quot;&gt;値&lt;/a&gt;がこの範囲に属するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="1936ccf64ca123181f93507a9feb0eebbe57ba0a" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Int)),%20kotlin.Byte)/value&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">指定した&lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Int)),%20kotlin.Byte)/value&quot;&gt;値&lt;/a&gt;がこの範囲に属しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="40c6193935caffa8266610ec4c295ab9ce877dd9" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Long)),%20kotlin.Byte)/value&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">指定した&lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Long)),%20kotlin.Byte)/value&quot;&gt;値&lt;/a&gt;がこの範囲に属しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="f7f90822a2ae202417ab2157576d03082c497813" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.UIntRange,%20kotlin.UByte)/value&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">指定した&lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.UIntRange,%20kotlin.UByte)/value&quot;&gt;値&lt;/a&gt;がこの範囲に属しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="8676dcdaeb183d186eb71dfdb2616faaa6f1a300" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ULongRange,%20kotlin.UByte)/value&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">指定した&lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ULongRange,%20kotlin.UByte)/value&quot;&gt;値&lt;/a&gt;がこの範囲に属しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="c859b6673ae95dd6316ba57dbb605098f36c2242" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Int%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">指定された&lt;a href=&quot;contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Int%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;値&lt;/a&gt;がこの範囲に属するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="3139767385b45f78f12bc1a4beeeb8dbf90719eb" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Int)),%20kotlin.Byte)/value&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">指定した&lt;a href=&quot;contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Int)),%20kotlin.Byte)/value&quot;&gt;値&lt;/a&gt;がこの範囲に属しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="6c4dc375b6189bd0d351b922264efc91169d72cb" translate="yes" xml:space="preserve">
          <source>Checks if the specified element is contained in this collection.</source>
          <target state="translated">指定した要素がこのコレクションに含まれているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="c2fcf22dd09b57d45aca55b0d4ee03697fcd22eb" translate="yes" xml:space="preserve">
          <source>Checks that the return type of the function is a subtype of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">関数の戻り型が &lt;code&gt;T&lt;/code&gt; のサブタイプであることを確認します。</target>
        </trans-unit>
        <trans-unit id="e6db6a0fc051275ddea53d61be2db2cbb1e810ff" translate="yes" xml:space="preserve">
          <source>Checks whether the range is empty.</source>
          <target state="translated">範囲が空かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="784e01fd13af02a1546d65c30ddd520a4574740f" translate="yes" xml:space="preserve">
          <source>Checks whether the specified &lt;a href=&quot;../-closed-range/contains#kotlin.ranges.ClosedRange%24contains%28kotlin.ranges.ClosedRange.T%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to the range.</source>
          <target state="translated">指定された&lt;a href=&quot;../-closed-range/contains#kotlin.ranges.ClosedRange%24contains%28kotlin.ranges.ClosedRange.T%29%2Fvalue&quot;&gt;値&lt;/a&gt;が範囲に属するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="241a53048d89b8ec3653ae4a83dda4a4ea670a6f" translate="yes" xml:space="preserve">
          <source>Checks whether the specified &lt;a href=&quot;../-closed-range/contains#kotlin.ranges.ClosedRange%24contains(kotlin.ranges.ClosedRange.T)/value&quot;&gt;value&lt;/a&gt; belongs to the range.</source>
          <target state="translated">指定した&lt;a href=&quot;../-closed-range/contains#kotlin.ranges.ClosedRange%24contains(kotlin.ranges.ClosedRange.T)/value&quot;&gt;値&lt;/a&gt;が範囲に属しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="377c8052c944d388ce9354706e2c9908f6cf58ae" translate="yes" xml:space="preserve">
          <source>Checks whether the specified &lt;a href=&quot;contains#kotlin.ranges.ClosedRange%24contains%28kotlin.ranges.ClosedRange.T%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to the range.</source>
          <target state="translated">指定された&lt;a href=&quot;contains#kotlin.ranges.ClosedRange%24contains%28kotlin.ranges.ClosedRange.T%29%2Fvalue&quot;&gt;値&lt;/a&gt;が範囲に属するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="78f8836bb253c6aaf309fd570c0d32734c368193" translate="yes" xml:space="preserve">
          <source>Checks whether the specified &lt;a href=&quot;contains#kotlin.ranges.ClosedRange%24contains(kotlin.ranges.ClosedRange.T)/value&quot;&gt;value&lt;/a&gt; belongs to the range.</source>
          <target state="translated">指定した&lt;a href=&quot;contains#kotlin.ranges.ClosedRange%24contains(kotlin.ranges.ClosedRange.T)/value&quot;&gt;値&lt;/a&gt;が範囲に属しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="2d5a064f6bf5628b993a4a964a494b2ae945a7be" translate="yes" xml:space="preserve">
          <source>ChildNode</source>
          <target state="translated">ChildNode</target>
        </trans-unit>
        <trans-unit id="9ec69fceb9f11fc0aaaa5e9578e4b5c3b1f361a3" translate="yes" xml:space="preserve">
          <source>Children of a coroutine</source>
          <target state="translated">コロチンの子供たち</target>
        </trans-unit>
        <trans-unit id="95dad7bbea504a28a666919c3c19bd3b56992309" translate="yes" xml:space="preserve">
          <source>Choose the dependency type based on your requirements.</source>
          <target state="translated">要件に応じて依存関係のタイプを選択します。</target>
        </trans-unit>
        <trans-unit id="d1e180228c6e398b7ec6347f14f06e411633dcab" translate="yes" xml:space="preserve">
          <source>Choosing good names</source>
          <target state="translated">良い名前を選ぶ</target>
        </trans-unit>
        <trans-unit id="cb81b0ea51edd864a4d2b387a6128e8b39289c1e" translate="yes" xml:space="preserve">
          <source>Choosing the Target Module System</source>
          <target state="translated">ターゲットモジュールシステムの選択</target>
        </trans-unit>
        <trans-unit id="2d613e8cf4995ed4ea2074ffd09bb1edb2455897" translate="yes" xml:space="preserve">
          <source>Choosing the target module system</source>
          <target state="translated">ターゲットモジュールシステムの選択</target>
        </trans-unit>
        <trans-unit id="5294f3f6bd2303c17ec8c28def8c442c8afaed73" translate="yes" xml:space="preserve">
          <source>Choosing the target module system depends on your build environment:</source>
          <target state="translated">ターゲットモジュールシステムの選択は、ビルド環境によって異なります。</target>
        </trans-unit>
        <trans-unit id="c2ada962c434eb1e78be70a26abac72b811941cd" translate="yes" xml:space="preserve">
          <source>Chunked</source>
          <target state="translated">Chunked</target>
        </trans-unit>
        <trans-unit id="355280bf7ee296c7cbd6b8ec30d87ef4a17e006a" translate="yes" xml:space="preserve">
          <source>Cinterop support</source>
          <target state="translated">シンタロープ対応</target>
        </trans-unit>
        <trans-unit id="963761801811c1bddaf2ec3c548b8a79c76cd5e4" translate="yes" xml:space="preserve">
          <source>Circular source set dependencies are prohibited.</source>
          <target state="translated">サーキュラーソースセットの依存関係は禁止されています。</target>
        </trans-unit>
        <trans-unit id="24af4805460c6f81aecd55c0ccffcd29ad1751bd" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;AtomicReference&lt;/code&gt; can be used to publish the changed frozen state to other threads, and so build patterns like shared caches.</source>
          <target state="translated">クラス &lt;code&gt;AtomicReference&lt;/code&gt; を使用して、変更された凍結状態を他のスレッドに公開し、共有キャッシュのようなパターンを構築できます。</target>
        </trans-unit>
        <trans-unit id="26bc7eebf3d4e8cbe2b3a4171a8561966d397df1" translate="yes" xml:space="preserve">
          <source>Class Members</source>
          <target state="translated">クラスメンバー</target>
        </trans-unit>
        <trans-unit id="de49d28923a369a4e8cc170c1f2aa1974a3997d6" translate="yes" xml:space="preserve">
          <source>Class References</source>
          <target state="translated">クラスリファレンス</target>
        </trans-unit>
        <trans-unit id="c06db6cb3409adf188ef08be3ccbdf1d0eca2e4d" translate="yes" xml:space="preserve">
          <source>Class WeakReference encapsulates weak reference to an object, which could be used to either retrieve a strong reference to an object, or return null, if object was already destoyed by the memory manager.</source>
          <target state="translated">クラスWeakReferenceは、オブジェクトへの弱い参照をカプセル化しています。これは、オブジェクトへの強い参照を取得するために使用することができますし、オブジェクトがメモリマネージャによってすでに破棄されている場合はNULLを返すことができます。</target>
        </trans-unit>
        <trans-unit id="e33345267f09a62cf04123d57a323a6bc3dd322d" translate="yes" xml:space="preserve">
          <source>Class WeakReference encapsulates weak reference to an object, which could be used to either retrieve a strong reference to an object, or return null, if object was already destroyed by the memory manager.</source>
          <target state="translated">クラスWeakReferenceは、オブジェクトへの弱い参照をカプセル化しています。これは、オブジェクトへの強い参照を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="fa2cedf469d8336cd94fb0abbb0fd3104c6d13c2" translate="yes" xml:space="preserve">
          <source>Class header formatting</source>
          <target state="translated">クラスヘッダーの書式設定</target>
        </trans-unit>
        <trans-unit id="3ca3662aaab3db7d7016712be4125f7cc47ad840" translate="yes" xml:space="preserve">
          <source>Class layout</source>
          <target state="translated">クラスレイアウト</target>
        </trans-unit>
        <trans-unit id="b847528b6f48fd68c33ba29cde1c7e26adff1eeb" translate="yes" xml:space="preserve">
          <source>Class members</source>
          <target state="translated">クラスメンバー</target>
        </trans-unit>
        <trans-unit id="786c2c4cb21f1d18bde33c506a002d2c6a2d4d53" translate="yes" xml:space="preserve">
          <source>Class method or property</source>
          <target state="translated">クラスメソッドまたはプロパティ</target>
        </trans-unit>
        <trans-unit id="94d1096d6809cce30c8f55717f3794c953475dff" translate="yes" xml:space="preserve">
          <source>Class names should use &lt;code&gt;UpperCamelCase&lt;/code&gt;, just like in Python.</source>
          <target state="translated">Pythonと同様に、クラス名には &lt;code&gt;UpperCamelCase&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="418f8d9fce3be7b19c0c8839c37326b2373f07e8" translate="yes" xml:space="preserve">
          <source>Class properties and parameters</source>
          <target state="translated">クラスのプロパティとパラメータ</target>
        </trans-unit>
        <trans-unit id="c9305cbcea295abc2f1a4bfcfed9c05191571c10" translate="yes" xml:space="preserve">
          <source>Class references</source>
          <target state="translated">クラス参照</target>
        </trans-unit>
        <trans-unit id="739a5b9e91e2f2089f57793db0dfdcb96d4b25d5" translate="yes" xml:space="preserve">
          <source>Class representing abstract computation, whose result may become available in the future.</source>
          <target state="translated">抽象的な計算を表すクラスで、その結果は将来利用可能になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="3b4694a905056b637efc568c69caf57fafd23e49" translate="yes" xml:space="preserve">
          <source>Class representing worker.</source>
          <target state="translated">労働者を表すクラス。</target>
        </trans-unit>
        <trans-unit id="300a654eb5f94bcc3ea07a759e8fca72358640a2" translate="yes" xml:space="preserve">
          <source>Class, interface or object, annotation class is also included</source>
          <target state="translated">クラス、インターフェースまたはオブジェクト、アノテーションクラスも含まれています。</target>
        </trans-unit>
        <trans-unit id="658f652cff731988820e41112c49edab3550929f" translate="yes" xml:space="preserve">
          <source>ClassCastException</source>
          <target state="translated">ClassCastException</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="a1cf3fc64b992150c2877b0a249fcfe3b1ca8ca9" translate="yes" xml:space="preserve">
          <source>Classes and Inheritance</source>
          <target state="translated">クラスと継承</target>
        </trans-unit>
        <trans-unit id="40203bad124f05ed8e987740b6dd6f0b6724a055" translate="yes" xml:space="preserve">
          <source>Classes and Interfaces</source>
          <target state="translated">クラスとインターフェース</target>
        </trans-unit>
        <trans-unit id="2902dddfe7eeba1a427ea8221c30e536b01ee124" translate="yes" xml:space="preserve">
          <source>Classes and Objects from Kotlin</source>
          <target state="translated">Kotlin のクラスとオブジェクト</target>
        </trans-unit>
        <trans-unit id="62ee3141d89c1d38f5b87e9404fe625db2c24e84" translate="yes" xml:space="preserve">
          <source>Classes and interfaces marked with this annotation are restricted when used as receivers for extension &lt;code&gt;suspend&lt;/code&gt; functions. These &lt;code&gt;suspend&lt;/code&gt; extensions can only invoke other member or extension &lt;code&gt;suspend&lt;/code&gt; functions on this particular receiver and are restricted from calling arbitrary suspension functions.</source>
          <target state="translated">この注釈でマークされたクラスとインターフェースは、拡張機能の &lt;code&gt;suspend&lt;/code&gt; 機能のレシーバーとして使用される場合は制限されます。これらの &lt;code&gt;suspend&lt;/code&gt; 拡張機能は、この特定のレシーバーの他のメンバーまたは拡張 &lt;code&gt;suspend&lt;/code&gt; 機能のみを呼び出すことができ、任意の中断機能の呼び出しが制限されています。</target>
        </trans-unit>
        <trans-unit id="9c91f6b9044a0f2b2db400d30e36f06c843be5ac" translate="yes" xml:space="preserve">
          <source>Classes and interfaces marked with this annotation are restricted when used as receivers for extension &lt;code&gt;suspend&lt;/code&gt; functions. These &lt;code&gt;suspend&lt;/code&gt; extensions can only invoke other member or extension &lt;code&gt;suspend&lt;/code&gt; functions on this particular receiver only and are restricted from calling arbitrary suspension functions.</source>
          <target state="translated">この注釈でマークされたクラスとインターフェースは、拡張機能の &lt;code&gt;suspend&lt;/code&gt; 機能のレシーバーとして使用される場合は制限されます。これらの &lt;code&gt;suspend&lt;/code&gt; 拡張機能は、この特定のレシーバーでのみ他のメンバーまたは拡張 &lt;code&gt;suspend&lt;/code&gt; 機能を呼び出すことができ、任意の中断機能の呼び出しが制限されています。</target>
        </trans-unit>
        <trans-unit id="6ea81b6f99457a55c5e36d73a36d9cdc43d87c81" translate="yes" xml:space="preserve">
          <source>Classes are declared with the &lt;code&gt;class&lt;/code&gt; keyword. A basic class without any properties or functions of its own looks like this:</source>
          <target state="translated">クラスは &lt;code&gt;class&lt;/code&gt; キーワードで宣言されます。独自のプロパティや関数を持たない基本的なクラスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="f0b20f200e8aa6bec8b3b657884db2f548fa3c4f" translate="yes" xml:space="preserve">
          <source>Classes can be nested in other classes:</source>
          <target state="translated">クラスは他のクラスに入れ子にすることができます。</target>
        </trans-unit>
        <trans-unit id="9e459e3dc5d0120109463a734b201906c6c7bea8" translate="yes" xml:space="preserve">
          <source>Classes can contain:</source>
          <target state="translated">クラスは含むことができます。</target>
        </trans-unit>
        <trans-unit id="f2b13ee61eb4f3131fd5ffd4139739484bc15d76" translate="yes" xml:space="preserve">
          <source>Classes in Kotlin are declared using the keyword &lt;em&gt;class&lt;/em&gt;:</source>
          <target state="translated">Kotlinのクラスは、キーワード&lt;em&gt;class&lt;/em&gt;を使用して宣言されます。</target>
        </trans-unit>
        <trans-unit id="aaa6d27710227b6755bbf2bf6817120e049c2431" translate="yes" xml:space="preserve">
          <source>Classes that don't declare a superclass implicitly inherit from &lt;code&gt;Any&lt;/code&gt;. The subclass must invoke one of the constructors of the base class, passing either parameters from its own constructor or constant values:</source>
          <target state="translated">スーパークラスを宣言しないクラスは、暗黙的に &lt;code&gt;Any&lt;/code&gt; を継承します。サブクラスは、基本クラスのコンストラクターの1つを呼び出して、独自のコンストラクターからのパラメーターまたは定数値を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="9f74da2d6fcc5b1e3989105668661996b416739b" translate="yes" xml:space="preserve">
          <source>Classes that inherit from this interface can be represented as a sequence of elements that can be iterated over and that supports removing elements during iteration.</source>
          <target state="translated">このインターフェイスを継承するクラスは、反復可能な要素のシーケンスとして表現することができ、反復中に要素を削除することをサポートしています。</target>
        </trans-unit>
        <trans-unit id="218c90a3c100273875eb842b2e06a420616a00bf" translate="yes" xml:space="preserve">
          <source>Classes that inherit from this interface can be represented as a sequence of elements that can be iterated over.</source>
          <target state="translated">このインターフェイスを継承するクラスは、反復処理可能な要素のシーケンスとして表現することができます。</target>
        </trans-unit>
        <trans-unit id="95d246c21ff1953254e36cf43d1e6189b1f2b589" translate="yes" xml:space="preserve">
          <source>Classes which inherit from this interface have a defined total ordering between their instances.</source>
          <target state="translated">このインターフェイスを継承するクラスは、そのインスタンス間で定義された合計順序を持っています。</target>
        </trans-unit>
        <trans-unit id="c05bb6d369456665cb374adb88d5a5189bfc260d" translate="yes" xml:space="preserve">
          <source>Classes with a few primary constructor parameters can be written in a single line:</source>
          <target state="translated">いくつかの一次コンストラクタのパラメータを持つクラスは、一行で書くことができます。</target>
        </trans-unit>
        <trans-unit id="690d1266f3666bd04ed2310538c65ab6bbd96b89" translate="yes" xml:space="preserve">
          <source>Classes with longer headers should be formatted so that each primary constructor parameter is in a separate line with indentation. Also, the closing parenthesis should be on a new line. If we use inheritance, then the superclass constructor call or list of implemented interfaces should be located on the same line as the parenthesis:</source>
          <target state="translated">長いヘッダを持つクラスは、それぞれの主要なコンストラクタのパラメータがインデント付きの別の行になるようにフォーマットしなければなりません。また、閉じ括弧は改行してください。継承を使用する場合は、スーパークラスのコンストラクタ呼び出しや実装されているインターフェイスのリストを括弧と同じ行に配置します。</target>
        </trans-unit>
        <trans-unit id="9ae3fa38ad86b1ad08d69c23b619b3f413fb2638" translate="yes" xml:space="preserve">
          <source>Classes, objects, interfaces, constructors, functions, properties and their setters can have &lt;em&gt;visibility modifiers&lt;/em&gt;. (Getters always have the same visibility as the property.) There are four visibility modifiers in Kotlin: &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;internal&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt;. The default visibility, used if there is no explicit modifier, is &lt;code&gt;public&lt;/code&gt;.</source>
          <target state="translated">クラス、オブジェクト、インターフェース、コンストラクター、関数、プロパティ、およびそれらのセッターは&lt;em&gt;可視性修飾子&lt;/em&gt;を持つことができます。（ゲッターは常にプロパティと同じ可視性を持っている。）Kotlinの4つの可視性修飾子があります： &lt;code&gt;private&lt;/code&gt; 、 &lt;code&gt;protected&lt;/code&gt; 、 &lt;code&gt;internal&lt;/code&gt; と &lt;code&gt;public&lt;/code&gt; 。明示的な修飾子がない場合に使用されるデフォルトの可視性は &lt;code&gt;public&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5e5e844f4cc4472e8f387eb40fc372d9985361c9" translate="yes" xml:space="preserve">
          <source>Classification of sequences</source>
          <target state="translated">シーケンスの分類</target>
        </trans-unit>
        <trans-unit id="30ca825b8bb5323b328e648a5d08ad44aff90650" translate="yes" xml:space="preserve">
          <source>Clears reference to an object.</source>
          <target state="translated">オブジェクトへの参照をクリアします。</target>
        </trans-unit>
        <trans-unit id="e8cf7637501db2656de0d7f42ee9a9c03c8b0b6b" translate="yes" xml:space="preserve">
          <source>Clears the bit specified</source>
          <target state="translated">指定されたビットをクリアします。</target>
        </trans-unit>
        <trans-unit id="e0bcce62a3890dcc5973393a9163d78794eaca02" translate="yes" xml:space="preserve">
          <source>Clears the bits with indices between &lt;a href=&quot;clear#kotlin.native.BitSet%24clear%28kotlin.Int%2C+kotlin.Int%29%2Ffrom&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;clear#kotlin.native.BitSet%24clear%28kotlin.Int%2C+kotlin.Int%29%2Fto&quot;&gt;to&lt;/a&gt; (exclusive) to the specified value.</source>
          <target state="translated">間インデックスを有するビットをクリアして&lt;a href=&quot;clear#kotlin.native.BitSet%24clear%28kotlin.Int%2C+kotlin.Int%29%2Ffrom&quot;&gt;から&lt;/a&gt;（含む）と&lt;a href=&quot;clear#kotlin.native.BitSet%24clear%28kotlin.Int%2C+kotlin.Int%29%2Fto&quot;&gt;に&lt;/a&gt;指定された値に（排他的）。</target>
        </trans-unit>
        <trans-unit id="b68a01e37c95acc52cd4015d8d64aac3f1589882" translate="yes" xml:space="preserve">
          <source>Clears the bits with indices between &lt;a href=&quot;clear#kotlin.native.BitSet%24clear(kotlin.Int,%20kotlin.Int)/from&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;clear#kotlin.native.BitSet%24clear(kotlin.Int,%20kotlin.Int)/to&quot;&gt;to&lt;/a&gt; (exclusive) to the specified value.</source>
          <target state="translated">&lt;a href=&quot;clear#kotlin.native.BitSet%24clear(kotlin.Int,%20kotlin.Int)/from&quot;&gt;from&lt;/a&gt;（包括的）から&lt;a href=&quot;clear#kotlin.native.BitSet%24clear(kotlin.Int,%20kotlin.Int)/to&quot;&gt;to&lt;/a&gt;（排他的）までのインデックスを持つビットを指定された値までクリアします。</target>
        </trans-unit>
        <trans-unit id="dc80672ef521efc0ef0a17410004a7d69a140be2" translate="yes" xml:space="preserve">
          <source>Clears the content of this string builder making it empty and returns this instance.</source>
          <target state="translated">この文字列ビルダの内容をクリアして空にし、このインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="d3d88a2c683fad64bf6150df6c700de5ce103013" translate="yes" xml:space="preserve">
          <source>Clears the content of this string builder making it empty.</source>
          <target state="translated">この文字列ビルダの内容をクリアして空にします。</target>
        </trans-unit>
        <trans-unit id="8545475c874d8cd5b229885080e6baa529daf756" translate="yes" xml:space="preserve">
          <source>Click &lt;strong&gt;OK&lt;/strong&gt; and here it is - your first Kotlin application for Android!</source>
          <target state="translated">&lt;strong&gt;OK&lt;/strong&gt;をクリックしてください。Android向けの最初のKotlinアプリケーションです。</target>
        </trans-unit>
        <trans-unit id="1bdd79b12628d8c4ec4226ff4207341dcb869ab8" translate="yes" xml:space="preserve">
          <source>Client</source>
          <target state="translated">Client</target>
        </trans-unit>
        <trans-unit id="c1ea43cc96b64c5b96e79af93399cf2b2084812b" translate="yes" xml:space="preserve">
          <source>Client &amp;mdash; Server</source>
          <target state="translated">クライアントサーバー</target>
        </trans-unit>
        <trans-unit id="3fefa8efc704dac1aaa32805e84422b049df0608" translate="yes" xml:space="preserve">
          <source>ClientQueryOptions</source>
          <target state="translated">ClientQueryOptions</target>
        </trans-unit>
        <trans-unit id="9308fa63d3b0d3f3953d6e8e033c4592e38c818c" translate="yes" xml:space="preserve">
          <source>ClientType</source>
          <target state="translated">ClientType</target>
        </trans-unit>
        <trans-unit id="28e22fe3dde53ce03b40861a4b22d205384bde66" translate="yes" xml:space="preserve">
          <source>Clients</source>
          <target state="translated">Clients</target>
        </trans-unit>
        <trans-unit id="3396ad3f61374789385264c17071d7920175b6b1" translate="yes" xml:space="preserve">
          <source>ClipboardEventInit</source>
          <target state="translated">ClipboardEventInit</target>
        </trans-unit>
        <trans-unit id="7297463a65daf3d1857f64c228deede347eddfef" translate="yes" xml:space="preserve">
          <source>ClipboardPermissionDescriptor</source>
          <target state="translated">ClipboardPermissionDescriptor</target>
        </trans-unit>
        <trans-unit id="08901cb8f603fc4f56658ce59e856a8614c55bdc" translate="yes" xml:space="preserve">
          <source>CloseEventInit</source>
          <target state="translated">CloseEventInit</target>
        </trans-unit>
        <trans-unit id="5ef941e8317f9d6c1e61e23ae9571a727029b15a" translate="yes" xml:space="preserve">
          <source>Closeable.use calls Throwable.addSuppressed if available</source>
          <target state="translated">Closeable.useはThrowable.addSuppressedが利用可能な場合にはThrowable.addSuppressedを呼び出します。</target>
        </trans-unit>
        <trans-unit id="5f1cfa5cccae266b661cf8d2e35cc3c9d6e700b9" translate="yes" xml:space="preserve">
          <source>ClosedFloatingPointRange</source>
          <target state="translated">ClosedFloatingPointRange</target>
        </trans-unit>
        <trans-unit id="e66ecb14f1e746c18112f64a72b8a97e74cd4009" translate="yes" xml:space="preserve">
          <source>ClosedRange</source>
          <target state="translated">ClosedRange</target>
        </trans-unit>
        <trans-unit id="60f8608476be28a4d9c3959f564fb6a26fd97ed9" translate="yes" xml:space="preserve">
          <source>Closing and iteration over channels</source>
          <target state="translated">チャネルの閉鎖と反復</target>
        </trans-unit>
        <trans-unit id="c63970fda29c5fc3fd5dcabe22511adc7684e67b" translate="yes" xml:space="preserve">
          <source>Closing resources with &lt;code&gt;finally&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; リソースを閉じる</target>
        </trans-unit>
        <trans-unit id="16b1546bfaf51b2730baa3cec8823ad69c6d520a" translate="yes" xml:space="preserve">
          <source>Closures</source>
          <target state="translated">Closures</target>
        </trans-unit>
        <trans-unit id="c48b7f655c90336133e0abdd77691431a8d756f1" translate="yes" xml:space="preserve">
          <source>CocoaPods Gradle plugin</source>
          <target state="translated">CocoaPods Gradle プラグイン</target>
        </trans-unit>
        <trans-unit id="382d31f023c9bcb43b5ca7cc209986730794a619" translate="yes" xml:space="preserve">
          <source>CocoaPods integration</source>
          <target state="translated">CocoaPods の統合</target>
        </trans-unit>
        <trans-unit id="0dc8282d7dc85c3178e5dfcd39b944dec26eb309" translate="yes" xml:space="preserve">
          <source>Code Style Migration Guide</source>
          <target state="translated">コードスタイル移行ガイド</target>
        </trans-unit>
        <trans-unit id="6e1900956b7af4b3e764d0a9f1dd39862b2c3f3b" translate="yes" xml:space="preserve">
          <source>Code Style Support in IDE</source>
          <target state="translated">IDEでのコードスタイルのサポート</target>
        </trans-unit>
        <trans-unit id="689c8941933ed63c6b5bfe3e4d2d29363a21c8a4" translate="yes" xml:space="preserve">
          <source>Code in a derived class can call its superclass functions and property accessors implementations using the &lt;em&gt;super&lt;/em&gt; keyword:</source>
          <target state="translated">派生クラスのコードは、&lt;em&gt;super&lt;/em&gt;キーワードを使用して、&lt;em&gt;スーパー&lt;/em&gt;クラス関数とプロパティアクセサー実装を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="c53e7a06868b09a2cee74089e3be8ad4e179e690" translate="yes" xml:space="preserve">
          <source>Code that compiled and ran fine is now rejected with an error (at compile or link time). This includes removing language constructs and adding new restrictions.</source>
          <target state="translated">コンパイルして正常に動作していたコードが、(コンパイル時やリンク時に)エラーで拒否されるようになりました。これには、言語構造の削除と新しい制限の追加が含まれます。</target>
        </trans-unit>
        <trans-unit id="c855547cc4fe33e6d42489a2a61ab56ad1445b95" translate="yes" xml:space="preserve">
          <source>Code that executed normally is now throwing an exception.</source>
          <target state="translated">正常に実行されていたコードが例外を投げるようになりました。</target>
        </trans-unit>
        <trans-unit id="f13c6d40584dcb243a09754125c5488f70e52a2c" translate="yes" xml:space="preserve">
          <source>Coding Conventions</source>
          <target state="translated">コーディング規約</target>
        </trans-unit>
        <trans-unit id="c7c34570bc4ae5cf6513807cb1a8f5f2ea1eee4d" translate="yes" xml:space="preserve">
          <source>Coding conventions for libraries</source>
          <target state="translated">ライブラリのコーディング規約</target>
        </trans-unit>
        <trans-unit id="30c54a96f8011b39819ba18bcb53fcbb092d650d" translate="yes" xml:space="preserve">
          <source>Collection</source>
          <target state="translated">Collection</target>
        </trans-unit>
        <trans-unit id="14fdd8dcac971a994b5411211d8e00576a06662c" translate="yes" xml:space="preserve">
          <source>Collection Aggregate Operations</source>
          <target state="translated">コレクションアグリゲート操作</target>
        </trans-unit>
        <trans-unit id="4e0f5b0c66d1cd223759fde27b79982e1f6f14dc" translate="yes" xml:space="preserve">
          <source>Collection Operations Overview</source>
          <target state="translated">コレクション業務の概要</target>
        </trans-unit>
        <trans-unit id="7df1eea5196a0f78eea81a1917411e169fb69417" translate="yes" xml:space="preserve">
          <source>Collection Ordering</source>
          <target state="translated">コレクションのご注文</target>
        </trans-unit>
        <trans-unit id="810938020ce0fa623bf8b6b80bc93b6eae4e2c5b" translate="yes" xml:space="preserve">
          <source>Collection Transformations</source>
          <target state="translated">コレクションの変換</target>
        </trans-unit>
        <trans-unit id="397b4f490c84193b00e7ba069ff81641961e9bcd" translate="yes" xml:space="preserve">
          <source>Collection Write Operations</source>
          <target state="translated">コレクション書き込み操作</target>
        </trans-unit>
        <trans-unit id="08d04ca5f235fcd82d2eb75492e8dd111912d256" translate="yes" xml:space="preserve">
          <source>Collection copying functions, such as &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-list&quot;&gt;&lt;code&gt;toList()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-mutable-list&quot;&gt;&lt;code&gt;toMutableList()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-set&quot;&gt;&lt;code&gt;toSet()&lt;/code&gt;&lt;/a&gt; and others, create a snapshot of a collection at a specific moment. Their result is a new collection of the same elements. If you add or remove elements from the original collection, this won't affect the copies. Copies may be changed independently of the source as well.</source>
          <target state="translated">&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-list&quot;&gt; &lt;code&gt;toList()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-mutable-list&quot;&gt; &lt;code&gt;toMutableList()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-set&quot;&gt; &lt;code&gt;toSet()&lt;/code&gt; &lt;/a&gt;などのコレクションコピー関数は、特定の瞬間にコレクションのスナップショットを作成します。それらの結果は、同じ要素の新しいコレクションです。元のコレクションに要素を追加または削除しても、コピーには影響しません。コピーは、ソースから独立して変更することもできます。</target>
        </trans-unit>
        <trans-unit id="b885525d98efe4aee3e905ef193585e65cdccdb1" translate="yes" xml:space="preserve">
          <source>Collection initialization can be used for restricting mutability. For example, if you create a &lt;code&gt;List&lt;/code&gt; reference to a &lt;code&gt;MutableList&lt;/code&gt;, the compiler will produce errors if you try to modify the collection through this reference.</source>
          <target state="translated">コレクションの初期化は、可変性を制限するために使用できます。たとえば、 &lt;code&gt;MutableList&lt;/code&gt; への &lt;code&gt;List&lt;/code&gt; 参照を作成する場合、この参照を通じてコレクションを変更しようとすると、コンパイラーはエラーを生成します。</target>
        </trans-unit>
        <trans-unit id="4b32fbc1fca98bb132d9d320bd041ce9437c6dea" translate="yes" xml:space="preserve">
          <source>Collection literals (in annotations)</source>
          <target state="translated">コレクションリテラル(注釈の中</target>
        </trans-unit>
        <trans-unit id="7548e7d8a359f6eeb2acd80c812527da65246c55" translate="yes" xml:space="preserve">
          <source>Collection of annotations that allow to store constant values.</source>
          <target state="translated">定数値を保存できるアノテーションのコレクション。</target>
        </trans-unit>
        <trans-unit id="5313594c5a68a7bb87bfac9c6cddfb55726f67a0" translate="yes" xml:space="preserve">
          <source>Collection operations are declared in the standard library in two ways: &lt;a href=&quot;classes#class-members&quot;&gt;member functions&lt;/a&gt; of collection interfaces and &lt;a href=&quot;extensions#extension-functions&quot;&gt;extension functions&lt;/a&gt;.</source>
          <target state="translated">コレクション操作は、2つの方法で標準ライブラリで宣言されてい&lt;a href=&quot;extensions#extension-functions&quot;&gt;ます&lt;/a&gt;。コレクションインターフェイスの&lt;a href=&quot;classes#class-members&quot;&gt;メンバー関数&lt;/a&gt;と拡張関数です。</target>
        </trans-unit>
        <trans-unit id="61d234098bb8881e194b33a0de7bd841e182dae0" translate="yes" xml:space="preserve">
          <source>Collection types</source>
          <target state="translated">コレクションの種類</target>
        </trans-unit>
        <trans-unit id="b784d66b099cfb0b75f9ec4453e5611fa5ec36fa" translate="yes" xml:space="preserve">
          <source>Collection types may be read-only or mutable in Kotlin, so Java's collections are mapped as follows (all Kotlin types in this table reside in the package &lt;code&gt;kotlin.collections&lt;/code&gt;):</source>
          <target state="translated">コレクションタイプはKotlinでは読み取り専用または変更可能であるため、Javaのコレクションは次のようにマッピングされます（このテーブルのすべてのKotlinタイプは、パッケージ &lt;code&gt;kotlin.collections&lt;/code&gt; にあります）。</target>
        </trans-unit>
        <trans-unit id="11f6cf75e8309dffe6f8bd94de9f9c6144ea6aed" translate="yes" xml:space="preserve">
          <source>Collection types, such as &lt;a href=&quot;-iterable/index#kotlin.collections.Iterable&quot;&gt;Iterable&lt;/a&gt;, &lt;a href=&quot;-collection/index#kotlin.collections.Collection&quot;&gt;Collection&lt;/a&gt;, &lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt;, &lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; and related top-level and extension functions.</source>
          <target state="translated">&lt;a href=&quot;-iterable/index#kotlin.collections.Iterable&quot;&gt;Iterable&lt;/a&gt;、&lt;a href=&quot;-collection/index#kotlin.collections.Collection&quot;&gt;Collection&lt;/a&gt;、&lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;、&lt;a href=&quot;-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt;、&lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt;などのコレクション型、および関連するトップレベル関数と拡張関数。</target>
        </trans-unit>
        <trans-unit id="20db58b5028ac6359ceed98ae317efd3933eac12" translate="yes" xml:space="preserve">
          <source>Collection types, such as &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-iterable/index#kotlin.collections.Iterable&quot;&gt;Iterable&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-collection/index#kotlin.collections.Collection&quot;&gt;Collection&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; and related top-level and extension functions.</source>
          <target state="translated">&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-iterable/index#kotlin.collections.Iterable&quot;&gt;Iterable&lt;/a&gt;、&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-collection/index#kotlin.collections.Collection&quot;&gt;Collection&lt;/a&gt;、&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;、&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt;、&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt;などのコレクション型、および関連するトップレベル関数と拡張関数。</target>
        </trans-unit>
        <trans-unit id="4bbb632f02fd69807705c0179999c17d35c93b0f" translate="yes" xml:space="preserve">
          <source>Collections</source>
          <target state="translated">Collections</target>
        </trans-unit>
        <trans-unit id="0479b59b3b214f741c9ee3783198a1f41ae247af" translate="yes" xml:space="preserve">
          <source>Collections are a common concept for most programming languages, so if you're familiar with, for example, Java or Python collections, you can skip this introduction and proceed to the detailed sections.</source>
          <target state="translated">コレクションはほとんどのプログラミング言語で共通の概念なので、例えばJavaやPythonのコレクションに慣れている場合は、この紹介を飛ばして詳細なセクションに進んでも構いません。</target>
        </trans-unit>
        <trans-unit id="8635b37eb9f58186e764d3c5e9b5b97675011777" translate="yes" xml:space="preserve">
          <source>Collections can be created in result of various operations on other collections. For example, &lt;a href=&quot;collection-filtering&quot;&gt;filtering&lt;/a&gt; a list creates a new list of elements that match the filter:</source>
          <target state="translated">コレクションは、他のコレクションに対するさまざまな操作の結果として作成できます。たとえば、リストを&lt;a href=&quot;collection-filtering&quot;&gt;フィルタリング&lt;/a&gt;すると、フィルターに一致する要素の新しいリストが作成されます。</target>
        </trans-unit>
        <trans-unit id="ca034ff377a02843d71c95bb3a5df11322dddf18" translate="yes" xml:space="preserve">
          <source>Collections of Nullable Type</source>
          <target state="translated">ヌル可能な型のコレクション</target>
        </trans-unit>
        <trans-unit id="d085afa2c1e8ea27cf07a0cd0405069bc5a67554" translate="yes" xml:space="preserve">
          <source>Collections, maps, object arrays, char sequences, and sequences now have an &lt;code&gt;ifEmpty&lt;/code&gt; function, which allows specifying a fallback value that will be used instead of the receiver if it is empty:</source>
          <target state="translated">コレクション、マップ、オブジェクト配列、charシーケンス、およびシーケンスに &lt;code&gt;ifEmpty&lt;/code&gt; 関数が追加され、空の場合にレシーバーの代わりに使用されるフォールバック値を指定できるようになりました。</target>
        </trans-unit>
        <trans-unit id="ac30df75efbedb8442edcd22700caca733d79868" translate="yes" xml:space="preserve">
          <source>Colon</source>
          <target state="translated">Colon</target>
        </trans-unit>
        <trans-unit id="84d20491bee1cca222700aa29435b8f60c127a70" translate="yes" xml:space="preserve">
          <source>ColorSpaceConversion</source>
          <target state="translated">ColorSpaceConversion</target>
        </trans-unit>
        <trans-unit id="c7bfda196f4ddae8fef69a2e01292a44c62d2275" translate="yes" xml:space="preserve">
          <source>Combined, these mechanisms allow natural race-free programming with code reuse across platforms in MPP projects.</source>
          <target state="translated">これらのメカニズムを組み合わせることで、MPPプロジェクトのプラットフォーム間でコードを再利用した自然なレースフリープログラミングが可能になります。</target>
        </trans-unit>
        <trans-unit id="c48542a2c62cc4bc2dfea820e7587114391d017f" translate="yes" xml:space="preserve">
          <source>Combined, these mechanisms allow natural race-freeze programming with code reuse across platforms in MPP projects.</source>
          <target state="translated">これらのメカニズムを組み合わせることで、MPPプロジェクトのプラットフォーム間でコードを再利用した自然なレースフリーズプログラミングが可能になります。</target>
        </trans-unit>
        <trans-unit id="94a0b08038ced447ca0da39b325b928ab58d97f6" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;../../kotlin.comparisons/then#kotlin.comparisons%24then%28kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">このコンパレータと指定された&lt;a href=&quot;../../kotlin.comparisons/then#kotlin.comparisons%24then%28kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%29%2Fcomparator&quot;&gt;コンパレータを&lt;/a&gt;組み合わせて、前者の考慮値が等しい場合にのみ後者を適用します。</target>
        </trans-unit>
        <trans-unit id="f4ded846e966c56bbdc7aa091cefd2533d52d055" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;../../kotlin.comparisons/then#kotlin.comparisons%24then(kotlin.Comparator((kotlin.comparisons.then.T)),%20kotlin.Comparator((kotlin.comparisons.then.T)))/comparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">このコンパレータと指定された&lt;a href=&quot;../../kotlin.comparisons/then#kotlin.comparisons%24then(kotlin.Comparator((kotlin.comparisons.then.T)),%20kotlin.Comparator((kotlin.comparisons.then.T)))/comparator&quot;&gt;コンパレータを&lt;/a&gt;組み合わせて、前者が考慮した値が等しい場合にのみ後者が適用されるようにします。</target>
        </trans-unit>
        <trans-unit id="aa944040dfe0fb45014966e84a517fc243499d68" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;../../kotlin.comparisons/then-descending#kotlin.comparisons%24thenDescending%28kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">このコンパレータと指定された&lt;a href=&quot;../../kotlin.comparisons/then-descending#kotlin.comparisons%24thenDescending%28kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%29%2Fcomparator&quot;&gt;コンパレータを&lt;/a&gt;組み合わせて、前者の考慮値が等しい場合にのみ後者を適用します。</target>
        </trans-unit>
        <trans-unit id="d5df0607bfc7d07081d98f2232ec69dbb07df2bf" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;../../kotlin.comparisons/then-descending#kotlin.comparisons%24thenDescending(kotlin.Comparator((kotlin.comparisons.thenDescending.T)),%20kotlin.Comparator((kotlin.comparisons.thenDescending.T)))/comparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">このコンパレータと指定された&lt;a href=&quot;../../kotlin.comparisons/then-descending#kotlin.comparisons%24thenDescending(kotlin.Comparator((kotlin.comparisons.thenDescending.T)),%20kotlin.Comparator((kotlin.comparisons.thenDescending.T)))/comparator&quot;&gt;コンパレータを&lt;/a&gt;組み合わせて、前者が考慮した値が等しい場合にのみ後者が適用されるようにします。</target>
        </trans-unit>
        <trans-unit id="3182280e76b1e0ba69eeec6ebc5b81c116f7140b" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;then#kotlin.comparisons%24then%28kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">このコンパレータと指定された&lt;a href=&quot;then#kotlin.comparisons%24then%28kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%29%2Fcomparator&quot;&gt;コンパレータを&lt;/a&gt;組み合わせて、前者の考慮値が等しい場合にのみ後者を適用します。</target>
        </trans-unit>
        <trans-unit id="9d495df0f105ee355d124d99d113a730ad352880" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;then#kotlin.comparisons%24then(kotlin.Comparator((kotlin.comparisons.then.T)),%20kotlin.Comparator((kotlin.comparisons.then.T)))/comparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">このコンパレータと指定された&lt;a href=&quot;then#kotlin.comparisons%24then(kotlin.Comparator((kotlin.comparisons.then.T)),%20kotlin.Comparator((kotlin.comparisons.then.T)))/comparator&quot;&gt;コンパレータを&lt;/a&gt;組み合わせて、前者が考慮した値が等しい場合にのみ後者が適用されるようにします。</target>
        </trans-unit>
        <trans-unit id="c9d4be5d9d7dd44f3d11fc44a518f6dc297db260" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;then-descending#kotlin.comparisons%24thenDescending%28kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">このコンパレータと指定された&lt;a href=&quot;then-descending#kotlin.comparisons%24thenDescending%28kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%29%2Fcomparator&quot;&gt;コンパレータを&lt;/a&gt;組み合わせて、前者の考慮値が等しい場合にのみ後者を適用します。</target>
        </trans-unit>
        <trans-unit id="5ccbc9d8e07be78cc0f15a1badca7482d8313eac" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;then-descending#kotlin.comparisons%24thenDescending(kotlin.Comparator((kotlin.comparisons.thenDescending.T)),%20kotlin.Comparator((kotlin.comparisons.thenDescending.T)))/comparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">このコンパレータと指定された&lt;a href=&quot;then-descending#kotlin.comparisons%24thenDescending(kotlin.Comparator((kotlin.comparisons.thenDescending.T)),%20kotlin.Comparator((kotlin.comparisons.thenDescending.T)))/comparator&quot;&gt;コンパレータを&lt;/a&gt;組み合わせて、前者が考慮した値が等しい場合にのみ後者が適用されるようにします。</target>
        </trans-unit>
        <trans-unit id="655832d3fde30ed3652945719ee23489155c6d76" translate="yes" xml:space="preserve">
          <source>Combining context elements</source>
          <target state="translated">コンテキスト要素の組み合わせ</target>
        </trans-unit>
        <trans-unit id="a678820233b37a0386d0e5144dbf7eca5694adea" translate="yes" xml:space="preserve">
          <source>Command line keys accepted by the compiler are also a kind of public API, and they are subject to the same considerations. Supported flags (those that don't have the &quot;-X&quot; or &quot;-XX&quot; prefix) can be added only in feature releases and should be properly deprecated before removing them. The &quot;-X&quot; and &quot;-XX&quot; flags are experimental and can be added and removed at any time.</source>
          <target state="translated">コンパイラによって受け入れられるコマンドラインキーもまた、一種の公開APIであり、同じ考慮事項の対象となります。サポートされているフラグ(プレフィックス&quot;-X &quot;や&quot;-XX &quot;を持たないフラグ)は、機能リリースでのみ追加することができ、削除する前に適切に非推奨とすべきです。X&quot; および &quot;-XX&quot; フラグは実験的なものであり、いつでも追加したり削除したりすることができます。</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="4252d4d3d86dacf947a846c649f1acc677e6bde8" translate="yes" xml:space="preserve">
          <source>Comments are initiated with &lt;code&gt;//&lt;/code&gt; and last until the end of the line. Block comments start with &lt;code&gt;/*&lt;/code&gt; and end with &lt;code&gt;*/&lt;/code&gt;.</source>
          <target state="translated">コメントは &lt;code&gt;//&lt;/code&gt; で始まり、行の終わりまで続きます。ブロックコメントは &lt;code&gt;/*&lt;/code&gt; で始まり、 &lt;code&gt;*/&lt;/code&gt; で終わります。</target>
        </trans-unit>
        <trans-unit id="0e642e061623271094dc7ea7c52704294acbde8e" translate="yes" xml:space="preserve">
          <source>Common code can rely on a set of libraries that cover everyday tasks such as &lt;a href=&quot;http://ktor.io/clients/http-client/multiplatform.html&quot;&gt;HTTP&lt;/a&gt;, &lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization&quot;&gt;serialization&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines&quot;&gt;managing coroutines&lt;/a&gt;. Also, an extensive standard library is available on all platforms.</source>
          <target state="translated">共通コードは、&lt;a href=&quot;http://ktor.io/clients/http-client/multiplatform.html&quot;&gt;HTTP&lt;/a&gt;、&lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization&quot;&gt;シリアル化&lt;/a&gt;、&lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines&quot;&gt;コルーチンの管理&lt;/a&gt;などの日常的なタスクをカバーする一連のライブラリに依存できます。また、すべてのプラットフォームで広範な標準ライブラリを利用できます。</target>
        </trans-unit>
        <trans-unit id="eacd29e150bf7f4b19b8fab3eb797604a6c1b6f2" translate="yes" xml:space="preserve">
          <source>Common operations</source>
          <target state="translated">共通操作</target>
        </trans-unit>
        <trans-unit id="e4d860d70b0968a7d424f45eff863ac62b72ef78" translate="yes" xml:space="preserve">
          <source>Common operations are available for both &lt;a href=&quot;collections-overview#collection-types&quot;&gt;read-only and mutable collections&lt;/a&gt;. Common operations fall into these groups:</source>
          <target state="translated">一般的な操作は、&lt;a href=&quot;collections-overview#collection-types&quot;&gt;読み取り専用コレクションと変更可能なコレクションの&lt;/a&gt;両方で使用できます。一般的な操作は次のグループに分類されます。</target>
        </trans-unit>
        <trans-unit id="b40c16c809d9f085eed9e9310288c4891fccf0d2" translate="yes" xml:space="preserve">
          <source>Common part</source>
          <target state="translated">共通部分</target>
        </trans-unit>
        <trans-unit id="bfd58ee3a270f3a931009900e1008d549bbd7453" translate="yes" xml:space="preserve">
          <source>Community</source>
          <target state="translated">Community</target>
        </trans-unit>
        <trans-unit id="dcd05a800dce1c0a95f1b07835a587a1fa065ad4" translate="yes" xml:space="preserve">
          <source>Community Resources</source>
          <target state="translated">コミュニティリソース</target>
        </trans-unit>
        <trans-unit id="dc7a4ca91615d001457aed95dcc1d27922425da6" translate="yes" xml:space="preserve">
          <source>Companion</source>
          <target state="translated">Companion</target>
        </trans-unit>
        <trans-unit id="76a9034ecffd7cb1dff04cfc41816a3e9b5f342f" translate="yes" xml:space="preserve">
          <source>Companion Object Extension Functions</source>
          <target state="translated">コンパニオンオブジェクト拡張機能</target>
        </trans-unit>
        <trans-unit id="d19ba530b1f6d42ff6d0697705f54d0607d522fb" translate="yes" xml:space="preserve">
          <source>Companion Object Extensions</source>
          <target state="translated">コンパニオンオブジェクト拡張</target>
        </trans-unit>
        <trans-unit id="c87b5c0cdaaf86742b62731a09a76f2906230aa1" translate="yes" xml:space="preserve">
          <source>Companion Object Functions</source>
          <target state="translated">コンパニオンオブジェクト関数</target>
        </trans-unit>
        <trans-unit id="35085e4e1da1c965bcb73671fc6cd5c4f3c137f0" translate="yes" xml:space="preserve">
          <source>Companion Object Properties</source>
          <target state="translated">コンパニオン オブジェクトのプロパティ</target>
        </trans-unit>
        <trans-unit id="9ccecc23410a1a5c9603c9f119fb36ba0d3a90c6" translate="yes" xml:space="preserve">
          <source>Companion Objects</source>
          <target state="translated">コンパニオンオブジェクト</target>
        </trans-unit>
        <trans-unit id="3e9e294591e17be498c2998b9dcdd5d9948d5b40" translate="yes" xml:space="preserve">
          <source>Companion object</source>
          <target state="translated">コンパニオンオブジェクト</target>
        </trans-unit>
        <trans-unit id="db9f5302d7578c7b0b299e25c0dbce75c111a3fd" translate="yes" xml:space="preserve">
          <source>Companion object extensions</source>
          <target state="translated">コンパニオンオブジェクトの拡張機能</target>
        </trans-unit>
        <trans-unit id="876a320a63980b4dbb6c30fb84d4a4bcffe205aa" translate="yes" xml:space="preserve">
          <source>Companion objects</source>
          <target state="translated">コンパニオンオブジェクト</target>
        </trans-unit>
        <trans-unit id="ef74a191950a837cb2f7a2546b6adc5ee933766b" translate="yes" xml:space="preserve">
          <source>Companion objects and their members can only be accessed via the containing class name, not via instances of the containing class. Kotlin does not support class-level functions that also can be overridden in subclasses (like &lt;code&gt;@classmethod&lt;/code&gt; in Python). If you try to redeclare a companion object in a subclass, you'll just shadow the one from the base class. If you need an overridable &quot;class-level&quot; function, make it an ordinary open function in which you do not access any instance members - you can override it in subclasses, and when you call it via an object instance, the override in the object's class will be called. It is possible, but inconvenient, to call functions via a class reference in Kotlin, so we won't cover that here.</source>
          <target state="translated">コンパニオンオブジェクトとそのメンバーには、含まれているクラスのインスタンスを介してではなく、含まれているクラス名を介してのみアクセスできます。 Kotlinは、サブクラスでオーバーライドできるクラスレベルの関数（Pythonの &lt;code&gt;@classmethod&lt;/code&gt; など）をサポートしていません。サブクラスでコンパニオンオブジェクトを再宣言しようとすると、基本クラスからオブジェクトをシャドウするだけです。オーバーライド可能な「クラスレベル」関数が必要な場合は、インスタンスメンバーにアクセスしない通常のオープン関数にします。サブクラスでそれをオーバーライドでき、オブジェクトインスタンスを介して呼び出すと、オブジェクトのクラスが呼び出されます。 Kotlinのクラス参照を介して関数を呼び出すことは可能ですが不便なので、ここでは説明しません。</target>
        </trans-unit>
        <trans-unit id="eadfd3f2fff5b46637c267d52d54cd4bbd4cc506" translate="yes" xml:space="preserve">
          <source>Comparable</source>
          <target state="translated">Comparable</target>
        </trans-unit>
        <trans-unit id="bd5dc2ff43c21afc00e56a2f75cce397b8506026" translate="yes" xml:space="preserve">
          <source>Comparator</source>
          <target state="translated">Comparator</target>
        </trans-unit>
        <trans-unit id="a3a836144d10521d89db63993e5f03ccdb20e02b" translate="yes" xml:space="preserve">
          <source>Comparator binary search</source>
          <target state="translated">コンパレータバイナリ検索</target>
        </trans-unit>
        <trans-unit id="1b61c50cc69d4a3899d2e5255c211dd339b0f329" translate="yes" xml:space="preserve">
          <source>Compare the types of bound and the corresponding unbound references. Bound callable reference has its receiver &quot;attached&quot; to it, so the type of the receiver is no longer a parameter:</source>
          <target state="translated">バウンド参照と対応するアンバウンド参照の型を比較します。束縛された呼び出し可能な参照は、そのレシーバが「くっついている」ので、レシーバの型はもはやパラメータではありません。</target>
        </trans-unit>
        <trans-unit id="3a0f7e5fa5fa9afa8cee3b2620aba881e90696fe" translate="yes" xml:space="preserve">
          <source>Compared to publishing a plain Kotlin/JVM or Java project, there is no need to create publications manually via the &lt;code&gt;publishing { ... }&lt;/code&gt; DSL. The publications are automatically created for each of the targets that can be built on the current host, except for the Android target, which needs an additional step to configure publishing, see &lt;a href=&quot;#publishing-android-libraries&quot;&gt;Publishing Android libraries&lt;/a&gt;.</source>
          <target state="translated">プレーンなKotlin / JVMまたはJavaプロジェクトを公開する場合と比較して、 &lt;code&gt;publishing { ... }&lt;/code&gt; DSLを介して手動でパブリケーションを作成する必要はありません。パブリケーションは、現在のホストでビルドできるターゲットごとに自動的に作成されます。ただし、パブリッシングを構成するための追加の手順が必要なAndroidターゲットは除きます&lt;a href=&quot;#publishing-android-libraries&quot;&gt;。Androidライブラリの&lt;/a&gt;パブリッシュを参照してください。</target>
        </trans-unit>
        <trans-unit id="64852406255a9a4113e2f4981e16599f3cbd0bde" translate="yes" xml:space="preserve">
          <source>Compares its two arguments for order. Returns zero if the arguments are equal, a negative number if the first argument is less than the second, or a positive number if the first argument is greater than the second.</source>
          <target state="translated">この関数は、その2つの引数の順序を比較します。引数が等しい場合は0を、第1引数が第2引数よりも小さい場合は負の数を、第1引数が第2引数よりも大きい場合は正の数を返します。</target>
        </trans-unit>
        <trans-unit id="90c5ea08e5923926d850965758a29907d554080d" translate="yes" xml:space="preserve">
          <source>Compares this list with another list instance with the ordered structural equality.</source>
          <target state="translated">このリストを、順序付き構造的平等性を持つ別のリストインスタンスと比較します。</target>
        </trans-unit>
        <trans-unit id="950ffca5dd347a5c64e4906fa2cb58f36f144d25" translate="yes" xml:space="preserve">
          <source>Compares this list with other list instance with the ordered structural equality.</source>
          <target state="translated">このリストを他のリストインスタンスと順序付き構造的平等性を持つリストと比較します。</target>
        </trans-unit>
        <trans-unit id="554350438c48966aa52d911e0f5e0fb4bd143c4b" translate="yes" xml:space="preserve">
          <source>Compares this map with other instance with the ordered structural equality.</source>
          <target state="translated">このマップを他のインスタンスと順序付き構造方程式で比較します。</target>
        </trans-unit>
        <trans-unit id="fad1ea1a98575ba2e457b4fe384ad3fa1869af18" translate="yes" xml:space="preserve">
          <source>Compares this object with the specified object for order. Returns zero if this object is equal to the specified &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt; object, a negative number if it's less than &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;, or a positive number if it's greater than &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;.</source>
          <target state="translated">このオブジェクトと指定されたオブジェクトの順序を比較します。このオブジェクトが指定された&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;他の&lt;/a&gt;オブジェクトと等しい場合はゼロを返し、&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;より小さい場合は負の数を返し、&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;より大きい場合は正の数を返します。</target>
        </trans-unit>
        <trans-unit id="3190d62f4d131740bed2429e35fbc6ae47243c94" translate="yes" xml:space="preserve">
          <source>Compares this object with the specified object for order. Returns zero if this object is equal to the specified &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt; object, a negative number if it's less than &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt;, or a positive number if it's greater than &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt;.</source>
          <target state="translated">このオブジェクトを指定されたオブジェクトと比較して順序を確認します。このオブジェクトが指定されたに等しい場合戻ってゼロ&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;、他の&lt;/a&gt;物体、それ未満の場合は、負の数を&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;他の&lt;/a&gt;それよりも大きいかどうか、または正の数&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;他&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5e62d9fb41d6ea3aab1f9658eba34bea551e1eee" translate="yes" xml:space="preserve">
          <source>Compares this object with the specified object for order. Returns zero if this object is equal to the specified &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt; object, a negative number if it's less than &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;, or a positive number if it's greater than &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;.</source>
          <target state="translated">このオブジェクトと指定されたオブジェクトの順序を比較します。このオブジェクトが指定された&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;他の&lt;/a&gt;オブジェクトと等しい場合はゼロを返し、&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;より小さい場合は負の数を返し、&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;より大きい場合は正の数を返します。</target>
        </trans-unit>
        <trans-unit id="d66583657cf1725802888b3a5f1571777b852fdf" translate="yes" xml:space="preserve">
          <source>Compares this object with the specified object for order. Returns zero if this object is equal to the specified &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt; object, a negative number if it's less than &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt;, or a positive number if it's greater than &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt;.</source>
          <target state="translated">このオブジェクトを指定されたオブジェクトと比較して順序を確認します。このオブジェクトが指定されたに等しい場合戻ってゼロ&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;、他の&lt;/a&gt;物体、それ未満の場合は、負の数を&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;他の&lt;/a&gt;それよりも大きいかどうか、または正の数&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;他&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4b5c37294f97a14ae629288d725d46e480de8ba0" translate="yes" xml:space="preserve">
          <source>Compares this set with another set instance with the unordered structural equality.</source>
          <target state="translated">この集合を、順序のない構造的平等性を持つ別の集合インスタンスと比較します。</target>
        </trans-unit>
        <trans-unit id="b1d4a384eb36feb8cf6fa29323cb0a2d21427812" translate="yes" xml:space="preserve">
          <source>Compares this set with other set instance with the unordered structural equality.</source>
          <target state="translated">この集合を他の集合インスタンスと無秩序な構造的平等性を持つ集合と比較します。</target>
        </trans-unit>
        <trans-unit id="0902f9812b6489157b65ec558bae4edb57728b49" translate="yes" xml:space="preserve">
          <source>Compares this value with the specified value for order.</source>
          <target state="translated">この値を注文の指定された値と比較します。</target>
        </trans-unit>
        <trans-unit id="f81e03368adc7d7de8bbaf5d665e6612de25e329" translate="yes" xml:space="preserve">
          <source>Compares this value with the specified value for order. Returns zero if this value is equal to the specified other value, a negative number if it's less than other, or a positive number if it's greater than other.</source>
          <target state="translated">この値を、指定された順序の値と比較します。この値が指定された他の値と等しい場合はゼロを、他の値より小さい場合は負の値を、他の値より大きい場合は正の値を返します。</target>
        </trans-unit>
        <trans-unit id="0a662e45ba9016359694e1a7e66831bc977f9c5a" translate="yes" xml:space="preserve">
          <source>Compares two nullable &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; values. Null is considered less than any value.</source>
          <target state="translated">2つのnull可能&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;値を比較します。nullはどの値よりも小さいと見なされます。</target>
        </trans-unit>
        <trans-unit id="7f648bb84bfe559e5adececde2ace1dcea302ece" translate="yes" xml:space="preserve">
          <source>Compares two strings lexicographically, optionally ignoring case differences.</source>
          <target state="translated">2つの文字列を辞書的に比較します(大文字と小文字の違いを無視することもできます)。</target>
        </trans-unit>
        <trans-unit id="9f25fd793181363d5737ac8ecae01b8fe3b0b8a8" translate="yes" xml:space="preserve">
          <source>Compares two values of range domain type and returns true if first is less than or equal to second.</source>
          <target state="translated">範囲ドメイン型の2つの値を比較し、1番目の値が2番目の値以下であれば真を返します。</target>
        </trans-unit>
        <trans-unit id="4c5c61a1bffaec58b4b1260a6d8a25b5edf748b8" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function to calculate the result of the comparison. The function is applied to the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fa&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fb&quot;&gt;b&lt;/a&gt; and return objects of type K which are then being compared with the given &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数を使用して2つの値を比較し、比較結果を計算します。この関数は、指定された値&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fa&quot;&gt;a&lt;/a&gt;および&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fb&quot;&gt;bに&lt;/a&gt;適用され、タイプKのオブジェクトを返します。これらのオブジェクトは、指定された&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fcomparator&quot;&gt;コンパレーターと比較され&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="157ca1b58611e00213cf38840de0b28de263312a" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function to calculate the result of the comparison. The function is applied to the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fa&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fb&quot;&gt;b&lt;/a&gt; and return &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; objects. The result of comparison of these &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; instances is returned.</source>
          <target state="translated">指定された&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fselector&quot;&gt;セレクター&lt;/a&gt;関数を使用して2つの値を比較し、比較結果を計算します。関数は、指定された値&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fa&quot;&gt;a&lt;/a&gt;および&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fb&quot;&gt;bに&lt;/a&gt;適用され、&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;オブジェクトを返します。これらの&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;インスタンスの比較結果が返されます。</target>
        </trans-unit>
        <trans-unit id="37483468d1d0abbd548c19ce4f9a366c705b1b9d" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/selector&quot;&gt;selector&lt;/a&gt; function to calculate the result of the comparison. The function is applied to the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/a&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/b&quot;&gt;b&lt;/a&gt; and return objects of type K which are then being compared with the given &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/selector&quot;&gt;セレクター&lt;/a&gt;関数を使用して2つの値を比較し、比較の結果を計算します。この関数は、指定された値&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/a&quot;&gt;a&lt;/a&gt;と&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/b&quot;&gt;bに&lt;/a&gt;適用され、タイプKのオブジェクトを返します。これらのオブジェクトは、指定された&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/comparator&quot;&gt;コンパレータと比較され&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="fa8ff08d38091c1115590e83835880e44f71aa75" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/selector&quot;&gt;selector&lt;/a&gt; function to calculate the result of the comparison. The function is applied to the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/a&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/b&quot;&gt;b&lt;/a&gt; and return &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; objects. The result of comparison of these &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; instances is returned.</source>
          <target state="translated">指定された&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/selector&quot;&gt;セレクター&lt;/a&gt;関数を使用して2つの値を比較し、比較の結果を計算します。この関数は、指定された値&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/a&quot;&gt;a&lt;/a&gt;と&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/b&quot;&gt;bに&lt;/a&gt;適用され、&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;オブジェクトを返します。これらの&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;インスタンスの比較結果が返されます。</target>
        </trans-unit>
        <trans-unit id="37750917f27b0d713270a6193d01e2df7708d622" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified functions &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fselectors&quot;&gt;selectors&lt;/a&gt; to calculate the result of the comparison. The functions are called sequentially, receive the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fa&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fb&quot;&gt;b&lt;/a&gt; and return &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; objects. As soon as the &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; instances returned by a function for &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fa&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fb&quot;&gt;b&lt;/a&gt; values do not compare as equal, the result of that comparison is returned.</source>
          <target state="translated">指定された関数&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fselectors&quot;&gt;セレクター&lt;/a&gt;を使用して2つの値を比較し、比較結果を計算します。関数は順次呼び出され、指定された値&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fa&quot;&gt;a&lt;/a&gt;および&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fb&quot;&gt;b&lt;/a&gt;を受け取り、&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;オブジェクトを返します。すぐに&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;匹敵&lt;/a&gt;する関数によって返されるインスタンスと&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fb&quot;&gt;Bの&lt;/a&gt;値が等しいと比較しない、その比較の結果が返されます。&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fa&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d183853cdfa5f8cb9c81042f165476b1d4725c93" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified functions &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/selectors&quot;&gt;selectors&lt;/a&gt; to calculate the result of the comparison. The functions are called sequentially, receive the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/a&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/b&quot;&gt;b&lt;/a&gt; and return &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; objects. As soon as the &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; instances returned by a function for &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/a&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/b&quot;&gt;b&lt;/a&gt; values do not compare as equal, the result of that comparison is returned.</source>
          <target state="translated">指定された関数&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/selectors&quot;&gt;セレクター&lt;/a&gt;を使用して2つの値を比較し、比較の結果を計算します。関数は順番に呼び出され、指定された値&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/a&quot;&gt;a&lt;/a&gt;と&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/b&quot;&gt;b&lt;/a&gt;を受け取り、&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;オブジェクトを返します。すぐに&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;匹敵&lt;/a&gt;する関数によって返されるインスタンスと&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/b&quot;&gt;Bの&lt;/a&gt;値が等しいと比較しない、その比較の結果が返されます。&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/a&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9f19ef02e93e90774153bbd6ed5b2351ab977c73" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet%28kotlin.Int%2C+kotlin.Int%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet%28kotlin.Int%2C+kotlin.Int%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet%28kotlin.Int%2C+kotlin.Int%29%2Fexpected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet%28kotlin.Int%2C+kotlin.Int%29%2Fnew&quot;&gt;新しい&lt;/a&gt;値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="122c2094c70640e3a29b525f5d56c4b7da23db5b" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet(kotlin.Int,%20kotlin.Int)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet(kotlin.Int,%20kotlin.Int)/new&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet(kotlin.Int,%20kotlin.Int)/expected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet(kotlin.Int,%20kotlin.Int)/new&quot;&gt;新しい&lt;/a&gt;値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="114b395416b339651ce422a30a320138360279a3" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet%28kotlin.Long%2C+kotlin.Long%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet%28kotlin.Long%2C+kotlin.Long%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet%28kotlin.Long%2C+kotlin.Long%29%2Fexpected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet%28kotlin.Long%2C+kotlin.Long%29%2Fnew&quot;&gt;新しい&lt;/a&gt;値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="08fae007809725847c717758daed28aac6881680" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet(kotlin.Long,%20kotlin.Long)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet(kotlin.Long,%20kotlin.Long)/new&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet(kotlin.Long,%20kotlin.Long)/expected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet(kotlin.Long,%20kotlin.Long)/new&quot;&gt;新しい&lt;/a&gt;値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="33e79c385d1ecca7b6f773750807dda8a0dad45b" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fexpected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;新しい&lt;/a&gt;値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="641671a7e930f79d93f8b81544c884e5de8e5be9" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/expected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;新しい&lt;/a&gt;値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="aad19e0b08b9c2212fcd34b07492441394b43397" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fexpected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;新しい&lt;/a&gt;値に置き換えます。比較は、値ベースではなく、IDベースであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="634e611a605af54462634d7b1cb590e3d8cd51dc" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/expected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;新しい&lt;/a&gt;値に置き換えます。比較はIDベースであり、値ベースではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2a7c89f946d53823e11aac953b3de81b713a012b" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fexpected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;新しい&lt;/a&gt;値に置き換えます。比較は、値ベースではなく、IDベースであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="55d02c9019a7783e00ea094b354c70b751af8100" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/expected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;新しい&lt;/a&gt;値に置き換えます。比較はIDベースであり、値ベースではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1602dbc0e7bd66fd4e6309d2ad105c28e4ed0d94" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap%28kotlin.Int%2C+kotlin.Int%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap%28kotlin.Int%2C+kotlin.Int%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap%28kotlin.Int%2C+kotlin.Int%29%2Fexpected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap%28kotlin.Int%2C+kotlin.Int%29%2Fnew&quot;&gt;新しい&lt;/a&gt;値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="ffaa182e5dad63cc785ffa110f53012280e9cbf0" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap(kotlin.Int,%20kotlin.Int)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap(kotlin.Int,%20kotlin.Int)/new&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap(kotlin.Int,%20kotlin.Int)/expected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap(kotlin.Int,%20kotlin.Int)/new&quot;&gt;新しい&lt;/a&gt;値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="4961582100958d9c1a4fbb8b107deca301459a31" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap%28kotlin.Long%2C+kotlin.Long%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap%28kotlin.Long%2C+kotlin.Long%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap%28kotlin.Long%2C+kotlin.Long%29%2Fexpected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap%28kotlin.Long%2C+kotlin.Long%29%2Fnew&quot;&gt;新しい&lt;/a&gt;値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="ae5592f9d27f36f934260b5d0a2dac2a166bee1c" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap(kotlin.Long,%20kotlin.Long)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap(kotlin.Long,%20kotlin.Long)/new&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap(kotlin.Long,%20kotlin.Long)/expected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap(kotlin.Long,%20kotlin.Long)/new&quot;&gt;新しい&lt;/a&gt;値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="3baa24475bea429cad0046c9c8bdc489c993284c" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;new&lt;/a&gt; value is not null, it must be frozen or permanent object.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fexpected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;新しい&lt;/a&gt;値に置き換えます。場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;、新しい&lt;/a&gt;値がnullではない、それは凍結または永久的なオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="e463cd6317ab4b95b19892c38cdaa4d8f63ca8b9" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;new&lt;/a&gt; value if values matches. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;new&lt;/a&gt; value is not null, it must be frozen or permanent object.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/expected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;新しい&lt;/a&gt;値に置き換えます。場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;、新しい&lt;/a&gt;値がnullではない、それは凍結または永久的なオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="484ef8b88aa051d852de31e7d69a2ffe4361bc12" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value is not null, it must be frozen or permanent object.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fexpected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;新しい&lt;/a&gt;値に置き換えます。比較は、値ベースではなく、IDベースであることに注意してください。場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;、新しい&lt;/a&gt;値がnullではない、それは凍結または永久的なオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="5f0d52e19d5f1b64fd9492dbea6f32f574826f3a" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value is not null, it must be frozen or permanent object.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/expected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;新しい&lt;/a&gt;値に置き換えます。比較はIDベースであり、値ベースではないことに注意してください。場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;、新しい&lt;/a&gt;値がnullではない、それは凍結または永久的なオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="21c447a9330973c5bdffcbc899b7cdb768d02c0d" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value is not null and object is frozen, it must be frozen or permanent object.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fexpected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;新しい&lt;/a&gt;値に置き換えます。場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;、新しい&lt;/a&gt;値がnullでなく、オブジェクトが凍結され、それが凍結または永久的なオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="3166ae600cbed70025a084c9ac73393f6ff9ef73" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value if values matches. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value is not null and object is frozen, it must be frozen or permanent object.</source>
          <target state="translated">値を&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/expected&quot;&gt;期待&lt;/a&gt;値と比較し、値が一致する場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;新しい&lt;/a&gt;値に置き換えます。場合は&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;、新しい&lt;/a&gt;値がnullでなく、オブジェクトが凍結され、それが凍結または永久的なオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="394e41048cbe310173033e7ae5f2b5a2434d911f" translate="yes" xml:space="preserve">
          <source>Comparison binary search</source>
          <target state="translated">比較バイナリ検索</target>
        </trans-unit>
        <trans-unit id="9461d4c9f916ad7df5538225ed552fb6e7e3284b" translate="yes" xml:space="preserve">
          <source>Comparison operators</source>
          <target state="translated">比較演算子</target>
        </trans-unit>
        <trans-unit id="43a1257c94c3625af3a4820651e77bb7e5919b78" translate="yes" xml:space="preserve">
          <source>Comparison operators: &lt;code&gt;a &amp;lt; b&lt;/code&gt;, &lt;code&gt;a &amp;gt; b&lt;/code&gt;, &lt;code&gt;a &amp;lt;= b&lt;/code&gt;, &lt;code&gt;a &amp;gt;= b&lt;/code&gt;</source>
          <target state="translated">比較演算子： &lt;code&gt;a &amp;lt; b&lt;/code&gt; 、 &lt;code&gt;a &amp;gt; b&lt;/code&gt; 、 &lt;code&gt;a &amp;lt;= b&lt;/code&gt; 、 &lt;code&gt;a &amp;gt;= b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c19d6a85cde6ffb47c0be3358e50362db268d22f" translate="yes" xml:space="preserve">
          <source>Comparison to Java Programming Language</source>
          <target state="translated">Javaプログラミング言語との比較</target>
        </trans-unit>
        <trans-unit id="e46ee00fde40e955c86abe019a61121e06d653c9" translate="yes" xml:space="preserve">
          <source>Comparisons</source>
          <target state="translated">Comparisons</target>
        </trans-unit>
        <trans-unit id="3d10a17bbcafa253a2f547a4d3cdc2dcd9e8e67a" translate="yes" xml:space="preserve">
          <source>Compatibility Guide for Kotlin 1.3</source>
          <target state="translated">Kotlin 1.3 の互換性ガイド</target>
        </trans-unit>
        <trans-unit id="ab158d92aa769c36330930aefe33be777405f096" translate="yes" xml:space="preserve">
          <source>Compatibility Modes</source>
          <target state="translated">互換性モード</target>
        </trans-unit>
        <trans-unit id="b2517b7bfbaa93708ea0797f6a1a981a224cee59" translate="yes" xml:space="preserve">
          <source>Compatibility Tools</source>
          <target state="translated">互換性ツール</target>
        </trans-unit>
        <trans-unit id="34b34cfc79cdf5ed37d2daa31e31fa83771c6d05" translate="yes" xml:space="preserve">
          <source>Compatibility flags</source>
          <target state="translated">互換性フラグ</target>
        </trans-unit>
        <trans-unit id="24b1a563df927b79ff52059a6fe7f4f07f083c4d" translate="yes" xml:space="preserve">
          <source>Compatibility mode for default methods</source>
          <target state="translated">デフォルトメソッドの互換性モード</target>
        </trans-unit>
        <trans-unit id="062a933f528dc14867f471c4122370c1ec7c48ea" translate="yes" xml:space="preserve">
          <source>Competitive Programming</source>
          <target state="translated">競争力のあるプログラミング</target>
        </trans-unit>
        <trans-unit id="4cef16aaddc5beb3a0a8c8c6dcb42ac7aa8951c6" translate="yes" xml:space="preserve">
          <source>Competitive programming and Kotlin</source>
          <target state="translated">競争力のあるプログラミングとKotlin</target>
        </trans-unit>
        <trans-unit id="779435d938b5f4d4c99c8c653840aaa0d1d27f91" translate="yes" xml:space="preserve">
          <source>Competitive programming problems often have input like this:</source>
          <target state="translated">競争の激しいプログラミング問題では、このような入力があることがよくあります。</target>
        </trans-unit>
        <trans-unit id="e178d49b71d4ecab26f50049569e812934ed37d9" translate="yes" xml:space="preserve">
          <source>Compilation class path</source>
          <target state="translated">コンパイルクラスのパス</target>
        </trans-unit>
        <trans-unit id="1c0c507276bf46861806ab317f7cdd44980f2759" translate="yes" xml:space="preserve">
          <source>Compilation class path reference</source>
          <target state="translated">コンパイルクラスのパス参照</target>
        </trans-unit>
        <trans-unit id="ad873024a72e87749444bf639fc9df742a1707a3" translate="yes" xml:space="preserve">
          <source>Compile a Kotlin code to a dynamic library</source>
          <target state="translated">Kotlinのコードを動的ライブラリにコンパイルする</target>
        </trans-unit>
        <trans-unit id="aca9e2814a2bbcc689598a15313b80870bd9b42e" translate="yes" xml:space="preserve">
          <source>Compile and run the example on &lt;a href=&quot;#compiling-and-running-the-example-on-linux-and-macos&quot;&gt;Linux and Mac&lt;/a&gt; and &lt;a href=&quot;#compiling-and-running-the-example-on-windows&quot;&gt;Windows&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#compiling-and-running-the-example-on-linux-and-macos&quot;&gt;Linux、Mac&lt;/a&gt;、&lt;a href=&quot;#compiling-and-running-the-example-on-windows&quot;&gt;Windowsで&lt;/a&gt;サンプルをコンパイルして実行する</target>
        </trans-unit>
        <trans-unit id="72064d4a180ef02a39354f66176c84fb0548cba8" translate="yes" xml:space="preserve">
          <source>Compile avoidance for kapt (since 1.3.20)</source>
          <target state="translated">kapt のコンパイル回避 (1.3.20 以降)</target>
        </trans-unit>
        <trans-unit id="637ca42cdaeb5f5233631b33ebd2c16f708a9c4b" translate="yes" xml:space="preserve">
          <source>Compile tasks</source>
          <target state="translated">タスクのコンパイル</target>
        </trans-unit>
        <trans-unit id="1157490bdeb22d1be81765a13a1f71421f68d521" translate="yes" xml:space="preserve">
          <source>Compile the application using the Kotlin compiler</source>
          <target state="translated">Kotlinコンパイラを使ってアプリケーションをコンパイルする</target>
        </trans-unit>
        <trans-unit id="03c89825c055435c615019680918f9ab6b1189e7" translate="yes" xml:space="preserve">
          <source>Compile the application using the Kotlin compiler:</source>
          <target state="translated">Kotlinコンパイラを使ってアプリケーションをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="921b146c0daa1b58d05333210fa642b42a817c43" translate="yes" xml:space="preserve">
          <source>Compile the client:</source>
          <target state="translated">クライアントをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="85980ca368c439d612a62feeb3c22d4520a3c93a" translate="yes" xml:space="preserve">
          <source>Compile the library using the JS compiler</source>
          <target state="translated">JS コンパイラを使ってライブラリをコンパイルする</target>
        </trans-unit>
        <trans-unit id="9455252385aecb94fba3d661915044a88e56d259" translate="yes" xml:space="preserve">
          <source>Compile with library:</source>
          <target state="translated">ライブラリでコンパイルします。</target>
        </trans-unit>
        <trans-unit id="d41acf091a6275283d4f6ccefb9d2a937d4b6b4a" translate="yes" xml:space="preserve">
          <source>Compile-Time Constants</source>
          <target state="translated">コンパイル時定数</target>
        </trans-unit>
        <trans-unit id="4c9d1f2132e2efb7dc57350eb68c7776e6e8330e" translate="yes" xml:space="preserve">
          <source>Compiler Keys</source>
          <target state="translated">コンパイラキー</target>
        </trans-unit>
        <trans-unit id="f05a88eb5583088cfb5f3af23ae435a9c43d6850" translate="yes" xml:space="preserve">
          <source>Compiler Options</source>
          <target state="translated">コンパイラオプション</target>
        </trans-unit>
        <trans-unit id="32539aebe8fbe50447702941623db72d336f1492" translate="yes" xml:space="preserve">
          <source>Compiler Plugin API</source>
          <target state="translated">コンパイラプラグインAPI</target>
        </trans-unit>
        <trans-unit id="a5def276d735f3ae52349ff4e9c00146dd7a2bd9" translate="yes" xml:space="preserve">
          <source>Compiler Plugins</source>
          <target state="translated">コンパイラプラグイン</target>
        </trans-unit>
        <trans-unit id="99453b01ed9668395db52137ac95533f2bf523b4" translate="yes" xml:space="preserve">
          <source>Compiler configuration</source>
          <target state="translated">コンパイラの設定</target>
        </trans-unit>
        <trans-unit id="c8d36c73ee25d65a59259585e736e00c1c87f0a3" translate="yes" xml:space="preserve">
          <source>Compiler options</source>
          <target state="translated">コンパイラオプション</target>
        </trans-unit>
        <trans-unit id="16b09e47f86fe203e52b566517a38889f340853a" translate="yes" xml:space="preserve">
          <source>Compilers are complicated software and despite the best effort of their developers they have bugs. The bugs that cause the compiler itself to fail or report spurious errors or generate obviously failing code, though annoying and often embarrassing, are easy to fix, because the fixes do not constitute incompatible changes. Other bugs may cause the compiler to generate incorrect code that does not fail: e.g. by missing some errors in the source or simply generating wrong instructions. Fixes of such bugs are technically incompatible changes (some code used to compile fine, but now it won't any more), but we are inclined to fixing them as soon as possible to prevent the bad code patterns from spreading across user code. In our opinion, this serves the principle of Comfortable Updates, because fewer users have a chance of encountering the issue. Of course, this applies only to bugs that are found soon after appearing in a released version.</source>
          <target state="translated">コンパイラは複雑なソフトウェアであり、開発者の最善の努力にもかかわらずバグがあります。コンパイラ自体が失敗したり、偽のエラーを報告したり、明らかに失敗するコードを生成したりするバグは、厄介で恥ずかしいものですが、修正するのは簡単なので、互換性のない変更ではありません。その他のバグにより、コンパイラが失敗しないのに誤ったコードを生成してしまうことがあります:例えば、ソースのエラーを見逃したり、単に間違った命令を生成してしまうことがあります。このようなバグの修正は技術的には互換性のない変更ですが (以前はうまくコンパイルできていたコードが、今はできなくなりました)、悪いコードパターンがユーザコードに広がるのを防ぐために、できるだけ早く修正したいと考えています。私たちの考えでは、これは「快適な更新」の原則に資するものであり、問題に遭遇するユーザが減るからです。もちろん、これはリリースされたバージョンに登場してすぐに発見されたバグにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="97ea09b312879ce9df1eea948b56934aea9cfd0a" translate="yes" xml:space="preserve">
          <source>Compiling Kotlin and Java sources</source>
          <target state="translated">KotlinとJavaのソースをコンパイルする</target>
        </trans-unit>
        <trans-unit id="a5b70db1805f14583c6ebf2c8b0592b48de0d271" translate="yes" xml:space="preserve">
          <source>Compiling Kotlin only source code</source>
          <target state="translated">Kotlin のソースコードのみをコンパイルする</target>
        </trans-unit>
        <trans-unit id="53c9b57582db6dd7965be7474f98a3648d5b3eac" translate="yes" xml:space="preserve">
          <source>Compiling Kotlin/Native code and use it from Objective-C and Swift</source>
          <target state="translated">Kotlin/NativeコードをコンパイルしてObjective-CやSwiftから利用する</target>
        </trans-unit>
        <trans-unit id="24c58b06b20f55df8f5651941f526a6d22d3c2a6" translate="yes" xml:space="preserve">
          <source>Compiling Kotlin/Native code to a dynamic library</source>
          <target state="translated">Kotlin/Native コードを動的ライブラリにコンパイルする</target>
        </trans-unit>
        <trans-unit id="18b869d52ab1ba843901fab8ea31519950c8b6b2" translate="yes" xml:space="preserve">
          <source>Compiling a library</source>
          <target state="translated">ライブラリのコンパイル</target>
        </trans-unit>
        <trans-unit id="90c6e7f353327a035e627969004330ddc56355a6" translate="yes" xml:space="preserve">
          <source>Compiling and Linking the library</source>
          <target state="translated">ライブラリのコンパイルとリンク</target>
        </trans-unit>
        <trans-unit id="9643908ac0d886939542952f3d3c8b6a519953e8" translate="yes" xml:space="preserve">
          <source>Compiling and Running the Example on Linux and macOS</source>
          <target state="translated">LinuxとmacOSでサンプルをコンパイルして実行する</target>
        </trans-unit>
        <trans-unit id="61bd878fa415faec28c9e1d212393df9d1902a99" translate="yes" xml:space="preserve">
          <source>Compiling and Running the Example on Windows</source>
          <target state="translated">Windows上で例題をコンパイルして実行する</target>
        </trans-unit>
        <trans-unit id="611121f8b32170211272449e4fe516c23dddd7a0" translate="yes" xml:space="preserve">
          <source>Compiling and running</source>
          <target state="translated">コンパイルと実行</target>
        </trans-unit>
        <trans-unit id="76090c31043c794bd01d750fcccacffc090b28f7" translate="yes" xml:space="preserve">
          <source>Compiling the code from the console</source>
          <target state="translated">コンソールからコードをコンパイルする</target>
        </trans-unit>
        <trans-unit id="521ffb94c78fdf8a3052cd297cb2675a73929150" translate="yes" xml:space="preserve">
          <source>Complete list of elements and attributes are listed below:</source>
          <target state="translated">要素と属性の完全なリストは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="aec451d085d4fe32991339a518bc16961757e7c2" translate="yes" xml:space="preserve">
          <source>Components allow you to specify:</source>
          <target state="translated">コンポーネントを指定することができます。</target>
        </trans-unit>
        <trans-unit id="61a74e7ecbd3269e28edf0496ebb545abe2190a4" translate="yes" xml:space="preserve">
          <source>Composing Suspending Functions</source>
          <target state="translated">サスペンド関数の構成</target>
        </trans-unit>
        <trans-unit id="de3b78b60e965433479e052daac10341513ebaf0" translate="yes" xml:space="preserve">
          <source>Composing suspending functions</source>
          <target state="translated">サスペンド機能の構成</target>
        </trans-unit>
        <trans-unit id="aafa0c5cb88d6c36a279448a6ec0d00a0fb47e80" translate="yes" xml:space="preserve">
          <source>CompositionEventInit</source>
          <target state="translated">CompositionEventInit</target>
        </trans-unit>
        <trans-unit id="ed2ff637c10fb1755e29c0eb2376d67d8e5a91b4" translate="yes" xml:space="preserve">
          <source>Comprehensions</source>
          <target state="translated">Comprehensions</target>
        </trans-unit>
        <trans-unit id="fe16b2e419247b3bfe896053f1be0ce886d4de58" translate="yes" xml:space="preserve">
          <source>Computation thrown an exception.</source>
          <target state="translated">計算が例外をスローしました。</target>
        </trans-unit>
        <trans-unit id="58754a33960f46b4b39aacc990f1c3553c4b3a27" translate="yes" xml:space="preserve">
          <source>Compute stable wrt potential object relocations by the memory manager identity hash code.</source>
          <target state="translated">メモリマネージャのアイデンティティハッシュコードを用いて、潜在的なオブジェクトの再配置を安定的に計算します。</target>
        </trans-unit>
        <trans-unit id="759dc563afcf1b09a8658d09f86d8312b1c74439" translate="yes" xml:space="preserve">
          <source>Computes &lt;code&gt;exp(x) - 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exp(x) - 1&lt;/code&gt; 計算します。</target>
        </trans-unit>
        <trans-unit id="ce188344a4a89cc27976c0691ae9673e3d851731" translate="yes" xml:space="preserve">
          <source>Computes &lt;code&gt;ln(a + 1)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ln(a + 1)&lt;/code&gt; 計算します。</target>
        </trans-unit>
        <trans-unit id="efd0d084b6901fa01fab237c8ae6254fe11544ba" translate="yes" xml:space="preserve">
          <source>Computes &lt;code&gt;ln(x + 1)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ln(x + 1)&lt;/code&gt; 計算します。</target>
        </trans-unit>
        <trans-unit id="479831737fe42b4ea79afaf5ab097fe283559461" translate="yes" xml:space="preserve">
          <source>Computes &lt;code&gt;sqrt(x^2 + y^2)&lt;/code&gt; without intermediate overflow or underflow.</source>
          <target state="translated">中間のオーバーフローまたはアンダーフローなしで &lt;code&gt;sqrt(x^2 + y^2)&lt;/code&gt; を計算します。</target>
        </trans-unit>
        <trans-unit id="5be0681c128c3a53870b319fc23d03276a8e7b4e" translate="yes" xml:space="preserve">
          <source>Computes Euler's number &lt;code&gt;e&lt;/code&gt; raised to the power of the value &lt;a href=&quot;exp#kotlin.math%24exp%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">オイラー数 &lt;code&gt;e&lt;/code&gt; を値&lt;a href=&quot;exp#kotlin.math%24exp%28kotlin.Double%29%2Fx&quot;&gt;xで&lt;/a&gt;累乗して計算します。</target>
        </trans-unit>
        <trans-unit id="ff565ce1378d4b4e77be485afca24a6593e21665" translate="yes" xml:space="preserve">
          <source>Computes Euler's number &lt;code&gt;e&lt;/code&gt; raised to the power of the value &lt;a href=&quot;exp#kotlin.math%24exp(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">オイラーの数 &lt;code&gt;e&lt;/code&gt; を値&lt;a href=&quot;exp#kotlin.math%24exp(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;累乗で計算します。</target>
        </trans-unit>
        <trans-unit id="d9ad220e09ce10c0b1d3278a7b9bc5abbed8425e" translate="yes" xml:space="preserve">
          <source>Computes the arc cosine of the value &lt;a href=&quot;acos#kotlin.math%24acos%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;0.0&lt;/code&gt; to &lt;code&gt;PI&lt;/code&gt; radians.</source>
          <target state="translated">値&lt;a href=&quot;acos#kotlin.math%24acos%28kotlin.Double%29%2Fx&quot;&gt;xの&lt;/a&gt;逆余弦を計算します。戻り値は &lt;code&gt;0.0&lt;/code&gt; から &lt;code&gt;PI&lt;/code&gt; ラジアンの範囲の角度です。</target>
        </trans-unit>
        <trans-unit id="3ef2e10512a29d32338572f93ad63c9728db8f9b" translate="yes" xml:space="preserve">
          <source>Computes the arc cosine of the value &lt;a href=&quot;acos#kotlin.math%24acos(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;0.0&lt;/code&gt; to &lt;code&gt;PI&lt;/code&gt; radians.</source>
          <target state="translated">値&lt;a href=&quot;acos#kotlin.math%24acos(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;アークコサインを計算します。返される値は、範囲内の角度である &lt;code&gt;0.0&lt;/code&gt; に &lt;code&gt;PI&lt;/code&gt; のラジアン。</target>
        </trans-unit>
        <trans-unit id="74694339d27a3650962ff09b8800075ae45ad99f" translate="yes" xml:space="preserve">
          <source>Computes the arc sine of the value &lt;a href=&quot;asin#kotlin.math%24asin%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;-PI/2&lt;/code&gt; to &lt;code&gt;PI/2&lt;/code&gt; radians.</source>
          <target state="translated">値&lt;a href=&quot;asin#kotlin.math%24asin%28kotlin.Double%29%2Fx&quot;&gt;xの&lt;/a&gt;逆正弦を計算します。戻り値は &lt;code&gt;-PI/2&lt;/code&gt; から &lt;code&gt;PI/2&lt;/code&gt; ラジアンの範囲の角度です。</target>
        </trans-unit>
        <trans-unit id="817e3000088c3f6197c39f1d89424b0d7031505a" translate="yes" xml:space="preserve">
          <source>Computes the arc sine of the value &lt;a href=&quot;asin#kotlin.math%24asin(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;-PI/2&lt;/code&gt; to &lt;code&gt;PI/2&lt;/code&gt; radians.</source>
          <target state="translated">値&lt;a href=&quot;asin#kotlin.math%24asin(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;アークサインを計算します。戻り値は、 &lt;code&gt;-PI/2&lt;/code&gt; から &lt;code&gt;PI/2&lt;/code&gt; ラジアンの範囲の角度です。</target>
        </trans-unit>
        <trans-unit id="532ea78bf6018eae31bf9aaaf81b513fcdc6c52c" translate="yes" xml:space="preserve">
          <source>Computes the arc tangent of the value &lt;a href=&quot;atan#kotlin.math%24atan%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;-PI/2&lt;/code&gt; to &lt;code&gt;PI/2&lt;/code&gt; radians.</source>
          <target state="translated">値&lt;a href=&quot;atan#kotlin.math%24atan%28kotlin.Double%29%2Fx&quot;&gt;xの&lt;/a&gt;逆正接を計算します。戻り値は &lt;code&gt;-PI/2&lt;/code&gt; から &lt;code&gt;PI/2&lt;/code&gt; ラジアンの範囲の角度です。</target>
        </trans-unit>
        <trans-unit id="e82e5d15947d86a41fc39817b97e993fb6d7f7ba" translate="yes" xml:space="preserve">
          <source>Computes the arc tangent of the value &lt;a href=&quot;atan#kotlin.math%24atan(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;-PI/2&lt;/code&gt; to &lt;code&gt;PI/2&lt;/code&gt; radians.</source>
          <target state="translated">値&lt;a href=&quot;atan#kotlin.math%24atan(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;アークタンジェントを計算します。戻り値は、 &lt;code&gt;-PI/2&lt;/code&gt; から &lt;code&gt;PI/2&lt;/code&gt; ラジアンの範囲の角度です。</target>
        </trans-unit>
        <trans-unit id="69aac902ae4280ae453dec3182b654f73bbda9ad" translate="yes" xml:space="preserve">
          <source>Computes the binary logarithm (base 2) of the value &lt;a href=&quot;log2#kotlin.math%24log2%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;log2#kotlin.math%24log2%28kotlin.Double%29%2Fx&quot;&gt;xの&lt;/a&gt; 2進数の対数（底は2）を計算します。</target>
        </trans-unit>
        <trans-unit id="85e5083b205858b8d6554074c5f24c2c0d243aa2" translate="yes" xml:space="preserve">
          <source>Computes the binary logarithm (base 2) of the value &lt;a href=&quot;log2#kotlin.math%24log2(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;log2#kotlin.math%24log2(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;2進対数（基数2）を計算します。</target>
        </trans-unit>
        <trans-unit id="042db05e19a1f7f2f3a0240c225fe5c20d2af1c7" translate="yes" xml:space="preserve">
          <source>Computes the common logarithm (base 10) of the value &lt;a href=&quot;log10#kotlin.math%24log10%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;log10#kotlin.math%24log10%28kotlin.Double%29%2Fx&quot;&gt;xの&lt;/a&gt;常用対数（底は10）を計算します。</target>
        </trans-unit>
        <trans-unit id="358cd53c9a53727494d1deec1d2bf4f91c153ed4" translate="yes" xml:space="preserve">
          <source>Computes the common logarithm (base 10) of the value &lt;a href=&quot;log10#kotlin.math%24log10(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;log10#kotlin.math%24log10(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;常用対数（基数10）を計算します。</target>
        </trans-unit>
        <trans-unit id="801aeaf1ab4a7cad800d25e50ccf0797533b391d" translate="yes" xml:space="preserve">
          <source>Computes the cosine of the angle &lt;a href=&quot;cos#kotlin.math%24cos%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">ラジアンで与えられた角度&lt;a href=&quot;cos#kotlin.math%24cos%28kotlin.Double%29%2Fx&quot;&gt;xの&lt;/a&gt;コサインを計算します。</target>
        </trans-unit>
        <trans-unit id="75967952ccf7290b36f64f520e62146f8d0e2355" translate="yes" xml:space="preserve">
          <source>Computes the cosine of the angle &lt;a href=&quot;cos#kotlin.math%24cos(kotlin.Double)/x&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">ラジアンで指定された角度&lt;a href=&quot;cos#kotlin.math%24cos(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;余弦を計算します。</target>
        </trans-unit>
        <trans-unit id="af38d2adb7c5da916d562ba5ee7c65306c711eb7" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic cosine of the value &lt;a href=&quot;cosh#kotlin.math%24cosh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;cosh#kotlin.math%24cosh%28kotlin.Double%29%2Fx&quot;&gt;xの&lt;/a&gt;双曲線余弦を計算します。</target>
        </trans-unit>
        <trans-unit id="8d3d2706ff20a1ee67e304247843292649cbffc1" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic cosine of the value &lt;a href=&quot;cosh#kotlin.math%24cosh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;cosh#kotlin.math%24cosh(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;双曲線余弦を計算します。</target>
        </trans-unit>
        <trans-unit id="16aaad9c9ae20d5e9d990484d6b0f9f0afca7da2" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic sine of the value &lt;a href=&quot;sinh#kotlin.math%24sinh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;sinh#kotlin.math%24sinh%28kotlin.Double%29%2Fx&quot;&gt;xの&lt;/a&gt;双曲線正弦を計算します。</target>
        </trans-unit>
        <trans-unit id="78b628807a6fecfe918e09dfd809510ec5d17f64" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic sine of the value &lt;a href=&quot;sinh#kotlin.math%24sinh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;sinh#kotlin.math%24sinh(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;双曲線正弦を計算します。</target>
        </trans-unit>
        <trans-unit id="c20d0295e4a248227a3e536953ecd22b74af4ef1" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic tangent of the value &lt;a href=&quot;tanh#kotlin.math%24tanh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;tanh#kotlin.math%24tanh%28kotlin.Double%29%2Fx&quot;&gt;xの&lt;/a&gt;双曲線正接を計算します。</target>
        </trans-unit>
        <trans-unit id="50d64ffe4ed447458cc4f0117c28215b5f1f8bb6" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic tangent of the value &lt;a href=&quot;tanh#kotlin.math%24tanh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;tanh#kotlin.math%24tanh(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;双曲線タンジェントを計算します。</target>
        </trans-unit>
        <trans-unit id="f936970b16e260f28ce47fac9ff5ba6c59c3ffe0" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic cosine of the value &lt;a href=&quot;acosh#kotlin.math%24acosh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;acosh#kotlin.math%24acosh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;の逆双曲線余弦を計算します。</target>
        </trans-unit>
        <trans-unit id="148b6be4512caf33be7bd4a871031518ddd7c89e" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic cosine of the value &lt;a href=&quot;acosh#kotlin.math%24acosh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;acosh#kotlin.math%24acosh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;の逆双曲線余弦を計算します。</target>
        </trans-unit>
        <trans-unit id="05dc7149a198d3bba80945f453fa01e84950b7d2" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic sine of the value &lt;a href=&quot;asinh#kotlin.math%24asinh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;asinh#kotlin.math%24asinh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;の逆双曲線正弦を計算します。</target>
        </trans-unit>
        <trans-unit id="816d411034193e38cd91b9245d1ea6c543c03667" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic sine of the value &lt;a href=&quot;asinh#kotlin.math%24asinh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;asinh#kotlin.math%24asinh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;の逆双曲線正弦を計算します。</target>
        </trans-unit>
        <trans-unit id="0f04076888fda0550126c88212efd0073c87ccbf" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic tangent of the value &lt;a href=&quot;atanh#kotlin.math%24atanh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;atanh#kotlin.math%24atanh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;の逆双曲線正接を計算します。</target>
        </trans-unit>
        <trans-unit id="d48b27a27275e22603476c644267ad61d506f7d1" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic tangent of the value &lt;a href=&quot;atanh#kotlin.math%24atanh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;atanh#kotlin.math%24atanh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;の逆双曲線正接を計算します。</target>
        </trans-unit>
        <trans-unit id="78d9c99b5e12f4a5453810f3fc45aa422fcd4ced" translate="yes" xml:space="preserve">
          <source>Computes the logarithm of the value &lt;a href=&quot;log#kotlin.math%24log%28kotlin.Double%2C+kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt; to the given &lt;a href=&quot;log#kotlin.math%24log%28kotlin.Double%2C+kotlin.Double%29%2Fbase&quot;&gt;base&lt;/a&gt;.</source>
          <target state="translated">値の対数計算&lt;a href=&quot;log#kotlin.math%24log%28kotlin.Double%2C+kotlin.Double%29%2Fx&quot;&gt;X&lt;/a&gt;所与の&lt;a href=&quot;log#kotlin.math%24log%28kotlin.Double%2C+kotlin.Double%29%2Fbase&quot;&gt;ベース&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9e24082c0bf6e60132029df213269f9cbe8eee03" translate="yes" xml:space="preserve">
          <source>Computes the logarithm of the value &lt;a href=&quot;log#kotlin.math%24log(kotlin.Double,%20kotlin.Double)/x&quot;&gt;x&lt;/a&gt; to the given &lt;a href=&quot;log#kotlin.math%24log(kotlin.Double,%20kotlin.Double)/base&quot;&gt;base&lt;/a&gt;.</source>
          <target state="translated">値の対数計算&lt;a href=&quot;log#kotlin.math%24log(kotlin.Double,%20kotlin.Double)/x&quot;&gt;X&lt;/a&gt;所与の&lt;a href=&quot;log#kotlin.math%24log(kotlin.Double,%20kotlin.Double)/base&quot;&gt;ベース&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bbdf88dc8eaa810b9f221e162c0ae164bfccc030" translate="yes" xml:space="preserve">
          <source>Computes the natural logarithm (base &lt;code&gt;E&lt;/code&gt;) of the value &lt;a href=&quot;ln#kotlin.math%24ln%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;ln#kotlin.math%24ln%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;の自然対数（底 &lt;code&gt;E&lt;/code&gt; ）を計算します。</target>
        </trans-unit>
        <trans-unit id="c4083bc3cb7a7cd79e81e5c9139a5dc48a7261a4" translate="yes" xml:space="preserve">
          <source>Computes the natural logarithm (base &lt;code&gt;E&lt;/code&gt;) of the value &lt;a href=&quot;ln#kotlin.math%24ln(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;ln#kotlin.math%24ln(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;の自然対数（基数 &lt;code&gt;E&lt;/code&gt; ）を計算します。</target>
        </trans-unit>
        <trans-unit id="3658b7ea17138ddaaaa32aa6ade2835c3de87bc8" translate="yes" xml:space="preserve">
          <source>Computes the next item in the iterator.</source>
          <target state="translated">イテレータの次の項目を計算します。</target>
        </trans-unit>
        <trans-unit id="b4a8f06d6424ce207fe2dbeb1673df11b4b022bd" translate="yes" xml:space="preserve">
          <source>Computes the positive square root of the value &lt;a href=&quot;sqrt#kotlin.math%24sqrt%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;sqrt#kotlin.math%24sqrt%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;の正の平方根を計算します。</target>
        </trans-unit>
        <trans-unit id="9472eb21955f9b4592952edb9bf8ae5f60c43778" translate="yes" xml:space="preserve">
          <source>Computes the positive square root of the value &lt;a href=&quot;sqrt#kotlin.math%24sqrt(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">値&lt;a href=&quot;sqrt#kotlin.math%24sqrt(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;の正の平方根を計算します。</target>
        </trans-unit>
        <trans-unit id="227fc806bb5cb8f94d8306fcd123a47201cc098d" translate="yes" xml:space="preserve">
          <source>Computes the remainder of division of this value by the &lt;a href=&quot;-i-e-e-erem#kotlin.math%24IEEErem%28kotlin.Double%2C+kotlin.Double%29%2Fdivisor&quot;&gt;divisor&lt;/a&gt; value according to the IEEE 754 standard.</source>
          <target state="translated">IEEE 754標準に従って、この値を&lt;a href=&quot;-i-e-e-erem#kotlin.math%24IEEErem%28kotlin.Double%2C+kotlin.Double%29%2Fdivisor&quot;&gt;除数の&lt;/a&gt;値で除算した余りを計算します。</target>
        </trans-unit>
        <trans-unit id="7f507c0eb9b4a99edc49474bb0338c726700d1d3" translate="yes" xml:space="preserve">
          <source>Computes the remainder of division of this value by the &lt;a href=&quot;-i-e-e-erem#kotlin.math%24IEEErem(kotlin.Double,%20kotlin.Double)/divisor&quot;&gt;divisor&lt;/a&gt; value according to the IEEE 754 standard.</source>
          <target state="translated">IEEE 754標準に従って、この値を&lt;a href=&quot;-i-e-e-erem#kotlin.math%24IEEErem(kotlin.Double,%20kotlin.Double)/divisor&quot;&gt;除&lt;/a&gt;数値で除算した余りを計算します。</target>
        </trans-unit>
        <trans-unit id="7929cca41305f1b4a016af478fa8a663f57598a1" translate="yes" xml:space="preserve">
          <source>Computes the sine of the angle &lt;a href=&quot;sin#kotlin.math%24sin%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">ラジアンで与えられた角度&lt;a href=&quot;sin#kotlin.math%24sin%28kotlin.Double%29%2Fx&quot;&gt;xの&lt;/a&gt;サインを計算します。</target>
        </trans-unit>
        <trans-unit id="105341cda1f54797ab2e70680187e6360edec2cd" translate="yes" xml:space="preserve">
          <source>Computes the sine of the angle &lt;a href=&quot;sin#kotlin.math%24sin(kotlin.Double)/x&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">ラジアンで指定された角度&lt;a href=&quot;sin#kotlin.math%24sin(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;正弦を計算します。</target>
        </trans-unit>
        <trans-unit id="8f3573cd1d7c804fefd68285e96e557316e005d0" translate="yes" xml:space="preserve">
          <source>Computes the tangent of the angle &lt;a href=&quot;tan#kotlin.math%24tan%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">ラジアンで与えられた角度&lt;a href=&quot;tan#kotlin.math%24tan%28kotlin.Double%29%2Fx&quot;&gt;xの&lt;/a&gt;タンジェントを計算します。</target>
        </trans-unit>
        <trans-unit id="3b9576488a97ba2e0d8923cbc9cc0de66a90a149" translate="yes" xml:space="preserve">
          <source>Computes the tangent of the angle &lt;a href=&quot;tan#kotlin.math%24tan(kotlin.Double)/x&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">ラジアンで指定された角度&lt;a href=&quot;tan#kotlin.math%24tan(kotlin.Double)/x&quot;&gt;xの&lt;/a&gt;接線を計算します。</target>
        </trans-unit>
        <trans-unit id="1aba6cf12cb1df84a02458cf394b58671b7b321d" translate="yes" xml:space="preserve">
          <source>Concatenates characters in this &lt;a href=&quot;../kotlin/-char-array/index#kotlin.CharArray&quot;&gt;CharArray&lt;/a&gt; into a String.</source>
          <target state="translated">この&lt;a href=&quot;../kotlin/-char-array/index#kotlin.CharArray&quot;&gt;CharArray&lt;/a&gt;の文字を文字列に連結します。</target>
        </trans-unit>
        <trans-unit id="1302f45c5af73878c717281df472074f24772f6b" translate="yes" xml:space="preserve">
          <source>Concatenates characters in this &lt;a href=&quot;../kotlin/-char-array/index#kotlin.CharArray&quot;&gt;CharArray&lt;/a&gt; or its subrange into a String.</source>
          <target state="translated">この&lt;a href=&quot;../kotlin/-char-array/index#kotlin.CharArray&quot;&gt;CharArray&lt;/a&gt;またはそのサブ範囲の文字を連結してStringにします。</target>
        </trans-unit>
        <trans-unit id="c78b957e6dcc9382fde9640b35614817fc42c4a2" translate="yes" xml:space="preserve">
          <source>Concatenates this Char and a String.</source>
          <target state="translated">この文字と文字列を連結します。</target>
        </trans-unit>
        <trans-unit id="df062526a2314e0bee167c57d603eadf84e209c3" translate="yes" xml:space="preserve">
          <source>Concatenates this string with the string representation of the given &lt;a href=&quot;plus#kotlin%24plus%28kotlin.String%2C+kotlin.Any%29%2Fother&quot;&gt;other&lt;/a&gt; object. If either the receiver or the &lt;a href=&quot;plus#kotlin%24plus%28kotlin.String%2C+kotlin.Any%29%2Fother&quot;&gt;other&lt;/a&gt; object are null, they are represented as the string &quot;null&quot;.</source>
          <target state="translated">この文字列を、指定された&lt;a href=&quot;plus#kotlin%24plus%28kotlin.String%2C+kotlin.Any%29%2Fother&quot;&gt;他の&lt;/a&gt;オブジェクトの文字列表現と連結します。レシーバまたは&lt;a href=&quot;plus#kotlin%24plus%28kotlin.String%2C+kotlin.Any%29%2Fother&quot;&gt;他の&lt;/a&gt;オブジェクトのいずれかがnullの場合、それらは文字列「null」として表されます。</target>
        </trans-unit>
        <trans-unit id="2ff85894052ad1bdb1158c8198936601e0ba0f35" translate="yes" xml:space="preserve">
          <source>Concatenates this string with the string representation of the given &lt;a href=&quot;plus#kotlin%24plus(kotlin.String?,%20kotlin.Any?)/other&quot;&gt;other&lt;/a&gt; object. If either the receiver or the &lt;a href=&quot;plus#kotlin%24plus(kotlin.String?,%20kotlin.Any?)/other&quot;&gt;other&lt;/a&gt; object are null, they are represented as the string &quot;null&quot;.</source>
          <target state="translated">この文字列を、指定された&lt;a href=&quot;plus#kotlin%24plus(kotlin.String?,%20kotlin.Any?)/other&quot;&gt;他の&lt;/a&gt;オブジェクトの文字列表現と連結します。受信者または&lt;a href=&quot;plus#kotlin%24plus(kotlin.String?,%20kotlin.Any?)/other&quot;&gt;他の&lt;/a&gt;オブジェクトのいずれかがnullの場合、それらは文字列「null」として表されます。</target>
        </trans-unit>
        <trans-unit id="8f444b9d5448ea57d949c47888a5c267129a7f51" translate="yes" xml:space="preserve">
          <source>Conceptually, &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt; is just like &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&quot;&gt;launch&lt;/a&gt;. It starts a separate coroutine which is a light-weight thread that works concurrently with all the other coroutines. The difference is that &lt;code&gt;launch&lt;/code&gt; returns a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; and does not carry any resulting value, while &lt;code&gt;async&lt;/code&gt; returns a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html&quot;&gt;Deferred&lt;/a&gt; &amp;mdash; a light-weight non-blocking future that represents a promise to provide a result later. You can use &lt;code&gt;.await()&lt;/code&gt; on a deferred value to get its eventual result, but &lt;code&gt;Deferred&lt;/code&gt; is also a &lt;code&gt;Job&lt;/code&gt;, so you can cancel it if needed.</source>
          <target state="translated">概念的には、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt;は&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&quot;&gt;launch&lt;/a&gt;と同じです。これは、他のすべてのコルーチンと同時に機能する軽量スレッドである別のコルーチンを開始します。違いは、 &lt;code&gt;launch&lt;/code&gt; は&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;ジョブ&lt;/a&gt;を返し、結果の値を運ばないのに対し、 &lt;code&gt;async&lt;/code&gt; は&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html&quot;&gt;Deferredを&lt;/a&gt;返すことです。これは、後で結果を提供するという約束を表す軽量の非ブロッキングフューチャーです。遅延値に対して &lt;code&gt;.await()&lt;/code&gt; を使用して最終的な結果を取得できますが、 &lt;code&gt;Deferred&lt;/code&gt; は &lt;code&gt;Job&lt;/code&gt; でもあるため、必要に応じてキャンセルできます。</target>
        </trans-unit>
        <trans-unit id="741286a78a486044c8e70baf53ce8b42a09e5cfa" translate="yes" xml:space="preserve">
          <source>Conceptually, &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt; is just like &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&quot;&gt;launch&lt;/a&gt;. It starts a separate coroutine which is a light-weight thread that works concurrently with all the other coroutines. The difference is that &lt;code&gt;launch&lt;/code&gt; returns a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; and does not carry any resulting value, while &lt;code&gt;async&lt;/code&gt; returns a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html&quot;&gt;Deferred&lt;/a&gt; &amp;ndash; a light-weight non-blocking future that represents a promise to provide a result later. You can use &lt;code&gt;.await()&lt;/code&gt; on a deferred value to get its eventual result, but &lt;code&gt;Deferred&lt;/code&gt; is also a &lt;code&gt;Job&lt;/code&gt;, so you can cancel it if needed.</source>
          <target state="translated">概念的には、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;非同期&lt;/a&gt;は&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&quot;&gt;起動&lt;/a&gt;と同じです。他のすべてのコルーチンと同時に動作する軽量スレッドである別のコルーチンを開始します。違いは、 &lt;code&gt;launch&lt;/code&gt; は&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;ジョブ&lt;/a&gt;を返し、結果の値を運びませんが、 &lt;code&gt;async&lt;/code&gt; は&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html&quot;&gt;Deferred（&lt;/a&gt;後で結果を提供するという約束を表す軽量のノンブロッキングフューチャー）を返すことです。遅延値で &lt;code&gt;.await()&lt;/code&gt; を使用して最終的な結果を取得できますが、 &lt;code&gt;Deferred&lt;/code&gt; も &lt;code&gt;Job&lt;/code&gt; なので、必要に応じてキャンセルできます。</target>
        </trans-unit>
        <trans-unit id="04d6dddfd7d6fccb9f9797c14c7ae51504c95b2c" translate="yes" xml:space="preserve">
          <source>Conceptually, a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/close.html&quot;&gt;close&lt;/a&gt; is like sending a special close token to the channel. The iteration stops as soon as this close token is received, so there is a guarantee that all previously sent elements before the close are received:</source>
          <target state="translated">概念的には、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/close.html&quot;&gt;クローズ&lt;/a&gt;は特別なクローズトークンをチャネルに送信するようなものです。このクローズトークンが受信されるとすぐに反復が停止するため、クローズ前に以前に送信されたすべての要素が受信されることが保証されます。</target>
        </trans-unit>
        <trans-unit id="0434df6a9465ae13aa06669a7769d87fb8625d68" translate="yes" xml:space="preserve">
          <source>Concrete type constructors</source>
          <target state="translated">コンクリート型コンストラクタ</target>
        </trans-unit>
        <trans-unit id="17e44d30708beb60414b171dd076a3db769f9d9e" translate="yes" xml:space="preserve">
          <source>Concurrency in Kotlin/Native</source>
          <target state="translated">Kotlin/ネイティブでの並行処理</target>
        </trans-unit>
        <trans-unit id="0f9c420abbf1f3f22ec98382c17954b9c2cc5972" translate="yes" xml:space="preserve">
          <source>Concurrent getOrPut, that is safe for concurrent maps.</source>
          <target state="translated">コンカレントマップのために安全なコンカレントgetOrPut。</target>
        </trans-unit>
        <trans-unit id="6d2e2eb8e58b21b66ed060a6e67917b441e9c1ac" translate="yes" xml:space="preserve">
          <source>Concurrent using async</source>
          <target state="translated">非同期を使ったコンカレント</target>
        </trans-unit>
        <trans-unit id="8c17ec700e8098781c5f019ea1f3a9c2803b50da" translate="yes" xml:space="preserve">
          <source>ConcurrentModificationException</source>
          <target state="translated">ConcurrentModificationException</target>
        </trans-unit>
        <trans-unit id="e428c12fd355944b5e6b7023bd80dd3c17b5aee5" translate="yes" xml:space="preserve">
          <source>Conditional expressions</source>
          <target state="translated">条件式</target>
        </trans-unit>
        <trans-unit id="e0b601d01602ccee0b95b13b09aba26c6be9c141" translate="yes" xml:space="preserve">
          <source>ConditionalEffect</source>
          <target state="translated">ConditionalEffect</target>
        </trans-unit>
        <trans-unit id="d6a56385d0729f6ff4bf27671cc845cb6f2cfde5" translate="yes" xml:space="preserve">
          <source>Conditionals</source>
          <target state="translated">Conditionals</target>
        </trans-unit>
        <trans-unit id="92015b87c51e9a386b39b7390b3f804964403ad0" translate="yes" xml:space="preserve">
          <source>Configure &lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;homepage&lt;/code&gt;, and &lt;code&gt;frameworkName&lt;/code&gt;of the &lt;code&gt;Podspec&lt;/code&gt; file in the &lt;code&gt;cocoapods&lt;/code&gt; block.</source>
          <target state="translated">設定の &lt;code&gt;summary&lt;/code&gt; 、 &lt;code&gt;homepage&lt;/code&gt; 、および &lt;code&gt;frameworkName&lt;/code&gt; の &lt;code&gt;Podspec&lt;/code&gt; の中にファイル &lt;code&gt;cocoapods&lt;/code&gt; のブロック。</target>
        </trans-unit>
        <trans-unit id="0a068a6c8767e4cb896a903ca1ebb5979eee6e24" translate="yes" xml:space="preserve">
          <source>Configure a Gradle project: apply the &lt;code&gt;org.jetbrains.kotlin.native.cocoapods&lt;/code&gt; plugin, add and configure the targets, and specify the required podspec fields.</source>
          <target state="translated">Gradleプロジェクトを構成します &lt;code&gt;org.jetbrains.kotlin.native.cocoapods&lt;/code&gt; プラグインを適用し、ターゲットを追加して構成し、必要なpodspecフィールドを指定します。</target>
        </trans-unit>
        <trans-unit id="6bd1072fd2b16535210740116017ce97cd964c3a" translate="yes" xml:space="preserve">
          <source>Configure compiler options</source>
          <target state="translated">コンパイラオプションの設定</target>
        </trans-unit>
        <trans-unit id="acb1a1fd8c2db70df06189170deff73e7582acea" translate="yes" xml:space="preserve">
          <source>Configure modules when using IntelliJ IDEA</source>
          <target state="translated">IntelliJ IDEA使用時のモジュール設定</target>
        </trans-unit>
        <trans-unit id="bafcc9be82b48bb113284b72ec4bbb7eef622a42" translate="yes" xml:space="preserve">
          <source>Configure modules when using Maven or Gradle</source>
          <target state="translated">MavenまたはGradleを使用しているときにモジュールを設定する</target>
        </trans-unit>
        <trans-unit id="9a5e37175cbfe18703adb354929f6146ea83955e" translate="yes" xml:space="preserve">
          <source>Configure the Kotlin Compiler to generate source maps, accessible via &lt;code&gt;Preferences|Kotlin Compiler&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Preferences|Kotlin Compiler&lt;/code&gt; からアクセスできるソースマップを生成するようにKotlinコンパイラを構成します</target>
        </trans-unit>
        <trans-unit id="32bc3c22148beccab28adad18f452f24bed405a4" translate="yes" xml:space="preserve">
          <source>Configuring</source>
          <target state="translated">Configuring</target>
        </trans-unit>
        <trans-unit id="c6f642bf53aa120d51d77434ecd1921f01ef293a" translate="yes" xml:space="preserve">
          <source>Configuring Compiler Options</source>
          <target state="translated">コンパイラオプションの設定</target>
        </trans-unit>
        <trans-unit id="ae57f3dcf89aafc276a6da1192dc6c69c3e2fa00" translate="yes" xml:space="preserve">
          <source>Configuring Dependencies</source>
          <target state="translated">依存関係の設定</target>
        </trans-unit>
        <trans-unit id="6adea55a63a3e5f588fd1691c8030f13a604a01a" translate="yes" xml:space="preserve">
          <source>Configuring Modules when using Maven or Gradle</source>
          <target state="translated">MavenまたはGradleを使用しているときのモジュールの設定</target>
        </trans-unit>
        <trans-unit id="9032ed38ca30ab9ca4555bd02e218655f08059c4" translate="yes" xml:space="preserve">
          <source>Configuring Modules with IntelliJ IDEA</source>
          <target state="translated">IntelliJ IDEAでモジュールを設定する</target>
        </trans-unit>
        <trans-unit id="0716638696ea1bf6be179f8738f4bd49caa6d9b9" translate="yes" xml:space="preserve">
          <source>Configuring Source Sets</source>
          <target state="translated">ソースセットの設定</target>
        </trans-unit>
        <trans-unit id="b4b1d0a30a684b1065d1192c9ba3c0d8c7f01243" translate="yes" xml:space="preserve">
          <source>Configuring binaries</source>
          <target state="translated">バイナリの設定</target>
        </trans-unit>
        <trans-unit id="0b0013c4519ee4f6d0759ef4077c3c75074b4bb3" translate="yes" xml:space="preserve">
          <source>Configuring compilations</source>
          <target state="translated">コンパイルの設定</target>
        </trans-unit>
        <trans-unit id="0b2898eee3c319b67ffbe83e0c5f6a3c0dcf57b1" translate="yes" xml:space="preserve">
          <source>Configuring dependencies</source>
          <target state="translated">依存関係の設定</target>
        </trans-unit>
        <trans-unit id="43e7dc67d0592ccb0b143c729a21fd1266053a0f" translate="yes" xml:space="preserve">
          <source>Configuring properties of an object (&lt;code&gt;apply&lt;/code&gt;)</source>
          <target state="translated">オブジェクトのプロパティの構成（ &lt;code&gt;apply&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8827a6be4bb5bafaeeb86a01fac35b1285d3bfc7" translate="yes" xml:space="preserve">
          <source>Configuring routes for a web server: &lt;a href=&quot;http://ktor.io/features/routing.html#routing-tree&quot;&gt;Ktor&lt;/a&gt;.</source>
          <target state="translated">：Webサーバのルート設定&lt;a href=&quot;http://ktor.io/features/routing.html#routing-tree&quot;&gt;Ktorを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3075a26cd4ffdadef1b5503037d6390fc950ed96" translate="yes" xml:space="preserve">
          <source>Configuring routes for a web server: &lt;a href=&quot;https://ktor.io/docs/routing.html&quot;&gt;Ktor&lt;/a&gt;.</source>
          <target state="translated">Webサーバーのルートの構成：&lt;a href=&quot;https://ktor.io/docs/routing.html&quot;&gt;Ktor&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d61d465a720e84f31ad8ddf61f24508332eb30bd" translate="yes" xml:space="preserve">
          <source>Configuring the dependency</source>
          <target state="translated">依存関係の設定</target>
        </trans-unit>
        <trans-unit id="0db6a649a381bc5f7e3b67d7a9cfd33941261af8" translate="yes" xml:space="preserve">
          <source>Confirm to open the file &lt;em&gt;as Project&lt;/em&gt;.</source>
          <target state="translated">ファイル&lt;em&gt;をProjectとして&lt;/em&gt;開くことを確認します。</target>
        </trans-unit>
        <trans-unit id="34088eff4f339036d28972c8cad1b202dcab0f9e" translate="yes" xml:space="preserve">
          <source>Congratulations! You now have your Kotlin application running in Eclipse IDE.</source>
          <target state="translated">おめでとうございます。これであなたのKotlinアプリケーションがEclipse IDEで動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="03eac9438b85bf13c3b10775e15730b9a94a6e5a" translate="yes" xml:space="preserve">
          <source>Congratulations! You now have your first Kotlin application running.</source>
          <target state="translated">おめでとうございます!これで最初のKotlinアプリケーションが起動しました。これで初めてのKotlinアプリケーションが起動しました。</target>
        </trans-unit>
        <trans-unit id="46bb34608946e842bfee54d59e7b06d9480faa79" translate="yes" xml:space="preserve">
          <source>Connect to platform-specific APIs</source>
          <target state="translated">プラットフォーム固有のAPIへの接続</target>
        </trans-unit>
        <trans-unit id="8641ed5d2322500d8a7d390bbef1d764418711b5" translate="yes" xml:space="preserve">
          <source>Connecting source sets</source>
          <target state="translated">ソースセットの接続</target>
        </trans-unit>
        <trans-unit id="4adddd0410090df891e6fa4925fe03ba5adb5c9d" translate="yes" xml:space="preserve">
          <source>Consider the following code:</source>
          <target state="translated">次のコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="9c9abb7300d19ea6f39900d470fca65b3c7ac134" translate="yes" xml:space="preserve">
          <source>Consider the following examples:</source>
          <target state="translated">次のような例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b2ef9b0cc3432d7972b575f4877e4a60ab789f0a" translate="yes" xml:space="preserve">
          <source>Consider the following function &lt;code&gt;reformat()&lt;/code&gt; that has 4 arguments with default values.</source>
          <target state="translated">デフォルト値を持つ4つの引数を持つ次の関数 &lt;code&gt;reformat()&lt;/code&gt; について考えてみます。</target>
        </trans-unit>
        <trans-unit id="908dded501f1eb025abaae1e462f1b9398ed9b15" translate="yes" xml:space="preserve">
          <source>Consider the following function:</source>
          <target state="translated">次のような関数を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b289ddf1c842e28da76bf910a38596b1780bf830" translate="yes" xml:space="preserve">
          <source>Consider this class:</source>
          <target state="translated">このクラスを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="7b49161f06c9ec24c51c26a33252ca85fd036d2f" translate="yes" xml:space="preserve">
          <source>Consider what happens if between &lt;code&gt;val one = somethingUsefulOneAsync()&lt;/code&gt; line and &lt;code&gt;one.await()&lt;/code&gt; expression there is some logic error in the code and the program throws an exception and the operation that was being performed by the program aborts. Normally, a global error-handler could catch this exception, log and report the error for developers, but the program could otherwise continue doing other operations. But here we have &lt;code&gt;somethingUsefulOneAsync&lt;/code&gt; still running in background, despite the fact, that operation that had initiated it aborts. This problem does not happen with structured concurrency, as shown in the section below.</source>
          <target state="translated">&lt;code&gt;val one = somethingUsefulOneAsync()&lt;/code&gt; 行と &lt;code&gt;one.await()&lt;/code&gt; 式の間にコードに論理エラーがあり、プログラムが例外をスローし、プログラムによって実行されていた操作が異常終了した場合にどうなるかを考えます。通常、グローバルエラーハンドラはこの例外をキャッチし、ログに記録して開発者にエラーを報告しますが、プログラムは他の操作を続行できます。しかし、ここでは、 &lt;code&gt;somethingUsefulOneAsync&lt;/code&gt; がまだバックグラウンドで実行されていますが、それを開始した操作は中止されます。この問題は、以下のセクションに示すように、構造化された同時実行では発生しません。</target>
        </trans-unit>
        <trans-unit id="ecfd0afaba3d32eb22d5627f126a2e0a43c477e3" translate="yes" xml:space="preserve">
          <source>Consider what happens if between the &lt;code&gt;val one = somethingUsefulOneAsync()&lt;/code&gt; line and &lt;code&gt;one.await()&lt;/code&gt; expression there is some logic error in the code and the program throws an exception and the operation that was being performed by the program aborts. Normally, a global error-handler could catch this exception, log and report the error for developers, but the program could otherwise continue doing other operations. But here we have &lt;code&gt;somethingUsefulOneAsync&lt;/code&gt; still running in the background, even though the operation that initiated it was aborted. This problem does not happen with structured concurrency, as shown in the section below.</source>
          <target state="translated">&lt;code&gt;val one = somethingUsefulOneAsync()&lt;/code&gt; 行と &lt;code&gt;one.await()&lt;/code&gt; 式の間にコードに論理エラーがあり、プログラムが例外をスローし、プログラムによって実行されていた操作が中止された場合にどうなるかを考えてみてください。通常、グローバルエラーハンドラーはこの例外をキャッチし、開発者向けにエラーをログに記録して報告できますが、それ以外の場合、プログラムは他の操作を続行できます。ただし、ここでは、 &lt;code&gt;somethingUsefulOneAsync&lt;/code&gt; を開始した操作が中止された場合でも、バックグラウンドで実行されています。以下のセクションに示すように、この問題は構造化された同時実行では発生しません。</target>
        </trans-unit>
        <trans-unit id="8c40066d35fcd11f64ca21f44527ee0a11ed15de" translate="yes" xml:space="preserve">
          <source>Considering the strong ties between Kotlin/Native and C via interoperability, in conjunction with the other mechanisms mentioned above it is possible to build popular data structures, like concurrent hashmap or shared cache with Kotlin/Native. It is possible to rely upon shared C data, and store in it references to detached object subgraphs. Consider the following .def file:</source>
          <target state="translated">Kotlin/NativeとC言語の相互運用性を通じた強い結びつきを考えれば、上述の他のメカニズムと組み合わせることで、Kotlin/Nativeを使ってハッシュマップや共有キャッシュのような一般的なデータ構造を構築することが可能になる。共有されたCデータに依存することが可能であり、その中に分離されたオブジェクトのサブグラフへの参照を格納することができます。以下の.defファイルを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="56798221ef10102e114fc83cfd623ea1fa22d892" translate="yes" xml:space="preserve">
          <source>Consistent: for any non-null values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, multiple invocations of &lt;code&gt;x.equals(y)&lt;/code&gt; consistently return true or consistently return false, provided no information used in &lt;code&gt;equals&lt;/code&gt; comparisons on the objects is modified.</source>
          <target state="translated">一貫性：null以外の値 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; の場合、 &lt;code&gt;x.equals(y)&lt;/code&gt; を複数回呼び出すと、オブジェクトの &lt;code&gt;equals&lt;/code&gt; 比較で使用される情報が変更されていない限り、常にtrueまたは一貫してfalseが返されます。</target>
        </trans-unit>
        <trans-unit id="9f3341d3710b74c1bace9f7d9d287f157faea4f4" translate="yes" xml:space="preserve">
          <source>Console</source>
          <target state="translated">Console</target>
        </trans-unit>
        <trans-unit id="764c9c986df55ceb6a841b603f3fcbf0970d7bfa" translate="yes" xml:space="preserve">
          <source>Constant definitions for the standard &lt;a href=&quot;charset&quot;&gt;charsets&lt;/a&gt;. These charsets are guaranteed to be available on every implementation of the Java platform.</source>
          <target state="translated">標準&lt;a href=&quot;charset&quot;&gt;文字セットの&lt;/a&gt;定数定義。これらの文字セットは、Javaプラットフォームのすべての実装で利用できることが保証されています。</target>
        </trans-unit>
        <trans-unit id="e88b824a7bf92f00d5df3ff2da5f466c4e2303e7" translate="yes" xml:space="preserve">
          <source>Constant definitions for the standard &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html&quot;&gt;charsets&lt;/a&gt;. These charsets are guaranteed to be available on every implementation of the Java platform.</source>
          <target state="translated">標準&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html&quot;&gt;文字セットの&lt;/a&gt;定数定義。これらの文字セットは、Javaプラットフォームのすべての実装で使用できることが保証されています。</target>
        </trans-unit>
        <trans-unit id="67e94e5da65288806349ddbf2ae8490bcc2ca3dd" translate="yes" xml:space="preserve">
          <source>Constant inlining</source>
          <target state="translated">定数のインライン</target>
        </trans-unit>
        <trans-unit id="01d9ff7913b4d6f8f2ee138f743c335cdae1d179" translate="yes" xml:space="preserve">
          <source>ConstantValue</source>
          <target state="translated">ConstantValue</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="6c6830ad580832c1c8597108fba70eee6ef60f2e" translate="yes" xml:space="preserve">
          <source>Constants: &lt;code&gt;PI&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt;;</source>
          <target state="translated">定数： &lt;code&gt;PI&lt;/code&gt; および &lt;code&gt;E&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="436f1f1d611ab2e0702a01e0cc9cbdda1939a2c9" translate="yes" xml:space="preserve">
          <source>ConstrainBooleanParameters</source>
          <target state="translated">ConstrainBooleanParameters</target>
        </trans-unit>
        <trans-unit id="475a80971fe259a970959d811991c62ed1ae1ee5" translate="yes" xml:space="preserve">
          <source>ConstrainDOMStringParameters</source>
          <target state="translated">ConstrainDOMStringParameters</target>
        </trans-unit>
        <trans-unit id="aa69a541e433061f8ab23df05a17708ff130bf7c" translate="yes" xml:space="preserve">
          <source>ConstrainDoubleRange</source>
          <target state="translated">ConstrainDoubleRange</target>
        </trans-unit>
        <trans-unit id="d0467568e3493359c107a70975ab633ccf876f93" translate="yes" xml:space="preserve">
          <source>ConstrainULongRange</source>
          <target state="translated">ConstrainULongRange</target>
        </trans-unit>
        <trans-unit id="75fbf913fdc479835cddbda3c8f0f7fdec5c5c59" translate="yes" xml:space="preserve">
          <source>ConstrainablePattern</source>
          <target state="translated">ConstrainablePattern</target>
        </trans-unit>
        <trans-unit id="b87e91e90287af02456ecc46950edef74b5a1590" translate="yes" xml:space="preserve">
          <source>ConstraintSet</source>
          <target state="translated">ConstraintSet</target>
        </trans-unit>
        <trans-unit id="52e68a873a2be3470675b9ee933b98d781ae7fef" translate="yes" xml:space="preserve">
          <source>Constraints</source>
          <target state="translated">Constraints</target>
        </trans-unit>
        <trans-unit id="845031d832af4aef0365353707cf1e379f1bdb85" translate="yes" xml:space="preserve">
          <source>Constructing</source>
          <target state="translated">Constructing</target>
        </trans-unit>
        <trans-unit id="595b186a9a39c9b7a029e0799f97422ceab3edbf" translate="yes" xml:space="preserve">
          <source>Constructing Collections</source>
          <target state="translated">コレクションの構築</target>
        </trans-unit>
        <trans-unit id="1f5376dbd05b33a058072acf16e6aa57083bb60c" translate="yes" xml:space="preserve">
          <source>Constructing from elements</source>
          <target state="translated">要素からの構築</target>
        </trans-unit>
        <trans-unit id="3634b92bdbefa43627f031638c37dec428564fef" translate="yes" xml:space="preserve">
          <source>Constructor References</source>
          <target state="translated">コンストラクタ参照</target>
        </trans-unit>
        <trans-unit id="ccaf573ecc85741b41cabdf7775f56bd7b187ebd" translate="yes" xml:space="preserve">
          <source>Constructor calls normalization</source>
          <target state="translated">コンストラクタは正規化を呼び出します。</target>
        </trans-unit>
        <trans-unit id="30c032b52aad8e1c058067a4610d8697f243c009" translate="yes" xml:space="preserve">
          <source>Constructor only (primary or secondary)</source>
          <target state="translated">コンストラクタのみ(一次または二次</target>
        </trans-unit>
        <trans-unit id="efea3bdf3ad7edafedda951f7522fffc4ef535d7" translate="yes" xml:space="preserve">
          <source>Constructor references</source>
          <target state="translated">コンストラクタ参照</target>
        </trans-unit>
        <trans-unit id="5854c91ff97eb7cf9a7be8db8904e598bb6336d2" translate="yes" xml:space="preserve">
          <source>Constructor references are effectively factory functions for creating new instances of a class, which might come in handy:</source>
          <target state="translated">コンストラクタ参照は、クラスの新しいインスタンスを作成するためのファクトリ関数です。</target>
        </trans-unit>
        <trans-unit id="60a5c966a71a24034f9238685790a526710ef75d" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">Constructors</target>
        </trans-unit>
        <trans-unit id="f8c4229167ef28a6f4fd3f250a43d5255a8e4f1e" translate="yes" xml:space="preserve">
          <source>Constructors and initializer blocks</source>
          <target state="translated">コンストラクタとイニシャライザブロック</target>
        </trans-unit>
        <trans-unit id="2b6ddb85384db918130a8d798e2102687f329e88" translate="yes" xml:space="preserve">
          <source>Constructors can be referenced just like methods and properties. They can be used wherever an object of function type is expected that takes the same parameters as the constructor and returns an object of the appropriate type. Constructors are referenced by using the &lt;code&gt;::&lt;/code&gt; operator and adding the class name. Consider the following function that expects a function parameter with no parameters and return type &lt;code&gt;Foo&lt;/code&gt;:</source>
          <target state="translated">コンストラクタは、メソッドやプロパティと同じように参照できます。これらは、コンストラクターと同じパラメーターを取り、適切なタイプのオブジェクトを返す関数タイプのオブジェクトが期待されるところならどこでも使用できます。 &lt;code&gt;::&lt;/code&gt; 演算子を使用し、クラス名を追加することにより、コンストラクターが参照されます。パラメーターのない関数パラメーターと戻り値の型 &lt;code&gt;Foo&lt;/code&gt; を期待する次の関数を考えます。</target>
        </trans-unit>
        <trans-unit id="e1d7d3b5740ad4ec5ee4df05fefa64a316643241" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;a href=&quot;index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; filled with the elements of the specified collection.</source>
          <target state="translated">指定されたコレクションの要素で満たされた新しい&lt;a href=&quot;index#kotlin.collections.HashSet&quot;&gt;HashSetを&lt;/a&gt;構築します。</target>
        </trans-unit>
        <trans-unit id="e9a658c9d20b8c78840ec431e9d3f81298a30dcd" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;a href=&quot;index#kotlin.collections.LinkedHashSet&quot;&gt;LinkedHashSet&lt;/a&gt; filled with the elements of the specified collection.</source>
          <target state="translated">指定されたコレクションの要素で満たされた新しい&lt;a href=&quot;index#kotlin.collections.LinkedHashSet&quot;&gt;LinkedHashSetを&lt;/a&gt;構築します。</target>
        </trans-unit>
        <trans-unit id="9c5dbc756f0a9668a0df1a068a1af439793b4689" translate="yes" xml:space="preserve">
          <source>Constructs a new FileInputStream of this file and returns it as a result.</source>
          <target state="translated">このファイルの新しい FileInputStream を作成し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="fe1b6d867cf6a1e22f663ab4090350e1d3330333" translate="yes" xml:space="preserve">
          <source>Constructs a new FileOutputStream of this file and returns it as a result.</source>
          <target state="translated">このファイルの新しいFileOutputStreamを作成し、結果としてそれを返します。</target>
        </trans-unit>
        <trans-unit id="b9b077f8e78abe633c1ff71d09a73752d67393ea" translate="yes" xml:space="preserve">
          <source>Constructs a new empty &lt;a href=&quot;index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt;.</source>
          <target state="translated">新しい空の&lt;a href=&quot;index#kotlin.collections.HashSet&quot;&gt;HashSetを作成し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="15a95a1cdc8e8c9a4b4c8aafa593e5da21d7eb18" translate="yes" xml:space="preserve">
          <source>Constructs a new empty &lt;a href=&quot;index#kotlin.collections.LinkedHashSet&quot;&gt;LinkedHashSet&lt;/a&gt;.</source>
          <target state="translated">新しい空の&lt;a href=&quot;index#kotlin.collections.LinkedHashSet&quot;&gt;LinkedHashSetを構築し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2bfa4cda9d76d3c8890e9ea11b234c1c9e61df8f" translate="yes" xml:space="preserve">
          <source>Constructs a string builder that contains the same characters as the specified content char sequence.</source>
          <target state="translated">指定された内容の文字列と同じ文字を含む文字列ビルダを構築します。</target>
        </trans-unit>
        <trans-unit id="13fb6d266925ff23c57f9b4a129f39adc12c752a" translate="yes" xml:space="preserve">
          <source>Constructs a string builder that contains the same characters as the specified content string.</source>
          <target state="translated">指定した内容文字列と同じ文字を含む文字列ビルダを構築します。</target>
        </trans-unit>
        <trans-unit id="99948e9ebe747cc129dc9ff02f0edb37ec7d37fb" translate="yes" xml:space="preserve">
          <source>Constructs an empty &lt;a href=&quot;index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">空の&lt;a href=&quot;index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="3c40b513119475a75b80ef5b826fe7de1523922a" translate="yes" xml:space="preserve">
          <source>Constructs an empty &lt;a href=&quot;index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">空の&lt;a href=&quot;index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="b72210b1298231e4e4d9443f94dcd10313d746e2" translate="yes" xml:space="preserve">
          <source>Constructs an empty string builder with the specified initial capacity.</source>
          <target state="translated">指定した初期容量を持つ空の文字列ビルダを構築します。</target>
        </trans-unit>
        <trans-unit id="d64e1ba49db9ccc30a41f44a63df2d67295250d5" translate="yes" xml:space="preserve">
          <source>Constructs an empty string builder.</source>
          <target state="translated">空の文字列ビルダを構築します。</target>
        </trans-unit>
        <trans-unit id="387fe7c63e53382d6136ae7a18859f89f583148c" translate="yes" xml:space="preserve">
          <source>Constructs an instance of &lt;a href=&quot;index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; filled with the contents of the specified &lt;a href=&quot;-init-#kotlin.collections.HashMap%24%3Cinit%3E%28kotlin.collections.Map%28%28kotlin.collections.HashMap.K%2C+kotlin.collections.HashMap.V%29%29%29%2Foriginal&quot;&gt;original&lt;/a&gt; map.</source>
          <target state="translated">指定された&lt;a href=&quot;-init-#kotlin.collections.HashMap%24%3Cinit%3E%28kotlin.collections.Map%28%28kotlin.collections.HashMap.K%2C+kotlin.collections.HashMap.V%29%29%29%2Foriginal&quot;&gt;元の&lt;/a&gt;マップの内容で満たされた&lt;a href=&quot;index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;のインスタンスを構築します。</target>
        </trans-unit>
        <trans-unit id="7628b482d19a0ecefbf7e94b7cf2022db16d57b5" translate="yes" xml:space="preserve">
          <source>Constructs an instance of &lt;a href=&quot;index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; filled with the contents of the specified original map.</source>
          <target state="translated">指定された元のマップのコンテンツで満たされた&lt;a href=&quot;index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;のインスタンスを構築します。</target>
        </trans-unit>
        <trans-unit id="b81800d066a40f384245bca494b0bd2ff9f2f7a2" translate="yes" xml:space="preserve">
          <source>Constructs an instance of &lt;a href=&quot;index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; filled with the contents of the specified &lt;a href=&quot;-init-#kotlin.collections.LinkedHashMap%24%3Cinit%3E%28kotlin.collections.Map%28%28kotlin.collections.LinkedHashMap.K%2C+kotlin.collections.LinkedHashMap.V%29%29%29%2Foriginal&quot;&gt;original&lt;/a&gt; map.</source>
          <target state="translated">指定された&lt;a href=&quot;-init-#kotlin.collections.LinkedHashMap%24%3Cinit%3E%28kotlin.collections.Map%28%28kotlin.collections.LinkedHashMap.K%2C+kotlin.collections.LinkedHashMap.V%29%29%29%2Foriginal&quot;&gt;元の&lt;/a&gt;マップの内容で満たされた&lt;a href=&quot;index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;のインスタンスを構築します。</target>
        </trans-unit>
        <trans-unit id="9883a9179c73c2e09f38b1182e2e6ebb65915396" translate="yes" xml:space="preserve">
          <source>Constructs an instance of &lt;a href=&quot;index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; filled with the contents of the specified original map.</source>
          <target state="translated">指定された元のマップのコンテンツで満たされた&lt;a href=&quot;index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;のインスタンスを構築します。</target>
        </trans-unit>
        <trans-unit id="c72ecd67c3541e9c10bef3f69d1481004f9bcca3" translate="yes" xml:space="preserve">
          <source>Constructs the specialized implementation of &lt;a href=&quot;-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; with String keys, which stores the keys as properties of JS object without hashing them.</source>
          <target state="translated">キーをハッシュせずにJSオブジェクトのプロパティとしてキーを格納する文字列キーを使用して、&lt;a href=&quot;-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;の特殊な実装を構築します。</target>
        </trans-unit>
        <trans-unit id="230423aac7c3262a270aff363c79a02c510e5bea" translate="yes" xml:space="preserve">
          <source>Constructs the specialized implementation of &lt;a href=&quot;-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; with String keys, which stores the keys as properties of JS object without hashing them.</source>
          <target state="translated">&lt;a href=&quot;-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;の特殊な実装を文字列キーで構築します。これは、キーをハッシュせずにJSオブジェクトのプロパティとして保存します。</target>
        </trans-unit>
        <trans-unit id="8985d43279f453108a36237fb34b9b7fd615a367" translate="yes" xml:space="preserve">
          <source>Consult the general &lt;a href=&quot;https://www.jetbrains.com/help/idea/scratches.html&quot;&gt;Scratches documentation&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、一般的な&lt;a href=&quot;https://www.jetbrains.com/help/idea/scratches.html&quot;&gt;スクラッチドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a6395d612e2149cc07e69f2fd6cfffcd18740386" translate="yes" xml:space="preserve">
          <source>Consume a generated Kotlin API</source>
          <target state="translated">生成されたKotlin APIを消費する</target>
        </trans-unit>
        <trans-unit id="cf12704be37bd6ccd3de06eea21b725a20d88ab4" translate="yes" xml:space="preserve">
          <source>Consumed</source>
          <target state="translated">Consumed</target>
        </trans-unit>
        <trans-unit id="51cd84c8e654009fcc69ff295f6c0de85ebc5c84" translate="yes" xml:space="preserve">
          <source>Consumer is going to be quite slow, taking 250 ms to process each number:</source>
          <target state="translated">消費者は、各番号を処理するのに250ミリ秒かかるので、かなり遅くなりそうです。</target>
        </trans-unit>
        <trans-unit id="5a738ad8d9b3e5cd90665d2306f20a7492ac267f" translate="yes" xml:space="preserve">
          <source>ConsumesReceiver</source>
          <target state="translated">ConsumesReceiver</target>
        </trans-unit>
        <trans-unit id="5572773ba08ac2f77251c287c09661edd16f19b9" translate="yes" xml:space="preserve">
          <source>Consuming a nullable Boolean</source>
          <target state="translated">ヌル可能なブール値を消費する</target>
        </trans-unit>
        <trans-unit id="e47aa61ce78f196b16795a0e7f82fdbc94ac89bf" translate="yes" xml:space="preserve">
          <source>Consuming the Kotlin API</source>
          <target state="translated">Kotlin API を消費する</target>
        </trans-unit>
        <trans-unit id="3a49fa305b1783091dbbe78a441e52d5dfd4fa22" translate="yes" xml:space="preserve">
          <source>Contains the list of code elements which are the possible annotation targets</source>
          <target state="translated">アノテーション対象となりうるコード要素のリストを含みます。</target>
        </trans-unit>
        <trans-unit id="aa55eca17f4bb765d9f84b8862cdfe7b80ebcfeb" translate="yes" xml:space="preserve">
          <source>Contains the list of possible annotation's retentions.</source>
          <target state="translated">アノテーションの保持可能なリストが含まれています。</target>
        </trans-unit>
        <trans-unit id="f5cbdf6bfb51439be085b5c6b7460a7c91eabc3c" translate="yes" xml:space="preserve">
          <source>Contents</source>
          <target state="translated">Contents</target>
        </trans-unit>
        <trans-unit id="ed1146311f37b039affa59f1f5817d1fb13c3e70" translate="yes" xml:space="preserve">
          <source>Context object</source>
          <target state="translated">コンテキストオブジェクト</target>
        </trans-unit>
        <trans-unit id="c760ae20ed45ab9983d041f44deecd22ccc9441a" translate="yes" xml:space="preserve">
          <source>Context object: &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;it&lt;/code&gt;</source>
          <target state="translated">コンテキストオブジェクト： &lt;code&gt;this&lt;/code&gt; または &lt;code&gt;it&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c08c99ad2204929dfa89fe84b4104bb82098f23" translate="yes" xml:space="preserve">
          <source>Context of the coroutine that corresponds to this continuation.</source>
          <target state="translated">この続きに対応するコルーチンのコンテキスト。</target>
        </trans-unit>
        <trans-unit id="796cf4522bc01f7618c7d381ee4fa05cab4a0802" translate="yes" xml:space="preserve">
          <source>Continuation</source>
          <target state="translated">Continuation</target>
        </trans-unit>
        <trans-unit id="1bf6fad7976dc7ec2e9a537eca2916df75ca22eb" translate="yes" xml:space="preserve">
          <source>Continuation context of current coroutine.</source>
          <target state="translated">現在のコルーチンの継続コンテキスト。</target>
        </trans-unit>
        <trans-unit id="6ab9f39955e03f02f59547f88190a65e327aaccb" translate="yes" xml:space="preserve">
          <source>Continuation0</source>
          <target state="translated">Continuation0</target>
        </trans-unit>
        <trans-unit id="3fb7040b0cdb220058e1254d1edd01a7b3bacf4d" translate="yes" xml:space="preserve">
          <source>Continuation1</source>
          <target state="translated">Continuation1</target>
        </trans-unit>
        <trans-unit id="f8045414ba644ea180e40881a5e3eaed7498c70c" translate="yes" xml:space="preserve">
          <source>Continuation2</source>
          <target state="translated">Continuation2</target>
        </trans-unit>
        <trans-unit id="6abc9d68c643c70b7beb90f4b48dd101d42c0802" translate="yes" xml:space="preserve">
          <source>ContinuationInterceptor</source>
          <target state="translated">ContinuationInterceptor</target>
        </trans-unit>
        <trans-unit id="3dc6e95fc1fbeb44ce9d7617992cd18ce58bb2c0" translate="yes" xml:space="preserve">
          <source>Continue on with the code exercises and learn more about Kotlin. Even if you make a mistake, EduTools will help you if you get stuck. If the verification failed, you will get a message to help you to find the mistake:</source>
          <target state="translated">コード演習を続けて、Kotlinについて学びましょう。間違えてもEduToolsは行き詰まった時に助けてくれます。検証に失敗した場合は、間違いを見つけるのに役立つメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="adee36ebe6643ce5d2227c49f8f19d7163e12d2f" translate="yes" xml:space="preserve">
          <source>ContractBuilder</source>
          <target state="translated">ContractBuilder</target>
        </trans-unit>
        <trans-unit id="b8cdeb4697d624c0c9df664b294c0d188d8e66de" translate="yes" xml:space="preserve">
          <source>ContractBuilder.callsInPlace</source>
          <target state="translated">ContractBuilder.callsInPlace</target>
        </trans-unit>
        <trans-unit id="c9196ea48537bad0bce56d4d125eabfe387fce03" translate="yes" xml:space="preserve">
          <source>ContractBuilder.returns</source>
          <target state="translated">ContractBuilder.returns</target>
        </trans-unit>
        <trans-unit id="43e2ddf17fee0078ffb22f4162b48c95fdceb4ea" translate="yes" xml:space="preserve">
          <source>ContractBuilder.returnsNotNull</source>
          <target state="translated">ContractBuilder.returnsNotNull</target>
        </trans-unit>
        <trans-unit id="32767bc87ce3ae8cd973b35c715a2ae94be49543" translate="yes" xml:space="preserve">
          <source>Contracts</source>
          <target state="translated">Contracts</target>
        </trans-unit>
        <trans-unit id="5df12b1b6819de76f82f223b1a54602658c26e21" translate="yes" xml:space="preserve">
          <source>Contracts in stdlib</source>
          <target state="translated">stdlibでの契約</target>
        </trans-unit>
        <trans-unit id="8a78760e24a97eaacac2066fdcf8dce23772ecc7" translate="yes" xml:space="preserve">
          <source>Control Flow: if, when, for, while</source>
          <target state="translated">制御の流れ:if、when、for、while</target>
        </trans-unit>
        <trans-unit id="60580c3b8469553d9bfbc36e745f38c84d30c057" translate="yes" xml:space="preserve">
          <source>Convenient form for a generic function that requires the generic type information</source>
          <target state="translated">汎用型情報を必要とする汎用関数の便利な形</target>
        </trans-unit>
        <trans-unit id="a891008bab71ca39daeb88cf4ef81547f954ce5f" translate="yes" xml:space="preserve">
          <source>Conversely, if you have an instance of &lt;code&gt;Generic&amp;lt;Supertype&amp;gt;&lt;/code&gt;, and you want to refer to it as a &lt;code&gt;Generic&amp;lt;Subtype&amp;gt;&lt;/code&gt; (which you can't do with nongeneric classes), you can safely &lt;em&gt;give&lt;/em&gt; instances of the generic type parameter to it - the compiler will require those instances to be of the type &lt;code&gt;Subtype&lt;/code&gt;, which will be acceptable to the real instance because it can handle any &lt;code&gt;Supertype&lt;/code&gt;. This is called &lt;em&gt;contravariance&lt;/em&gt;, and Kotlin lets you do &lt;em&gt;declaration-site contravariance&lt;/em&gt; by putting &lt;code&gt;in&lt;/code&gt; in front of the generic type parameter. If you do, you may only use that type parameter as a parameter type, not as a return type. Here is the simplest useful contravariant interface:</source>
          <target state="translated">逆に、 &lt;code&gt;Generic&amp;lt;Supertype&amp;gt;&lt;/code&gt; インスタンスがあり、それを &lt;code&gt;Generic&amp;lt;Subtype&amp;gt;&lt;/code&gt; として参照する場合（これは非ジェネリッククラスでは実行できません）、ジェネリック型パラメーターのインスタンスを安全に&lt;em&gt;与える&lt;/em&gt;ことができます。 -コンパイラーは、これらのインスタンスのタイプを &lt;code&gt;Subtype&lt;/code&gt; にする必要があります。これは、任意の &lt;code&gt;Supertype&lt;/code&gt; を処理できるため、実際のインスタンスに受け入れられます。これが呼び出され&lt;em&gt;contravariance&lt;/em&gt;、およびKotlinはあなたが行うことができます&lt;em&gt;宣言サイトcontravarianceを&lt;/em&gt;置くことによって &lt;code&gt;in&lt;/code&gt; ジェネリック型パラメーターの前。その場合、その型パラメーターはパラメーターの型としてのみ使用でき、戻り値の型としては使用できません。これが最も単純で有用な反変インターフェースです：</target>
        </trans-unit>
        <trans-unit id="99d55c6aa81ddef660acb4d14625de4630bf00f6" translate="yes" xml:space="preserve">
          <source>Conversion between &lt;code&gt;CValue&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CValue&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt; 間の変換</target>
        </trans-unit>
        <trans-unit id="82c22aa2db24d04e104a061d404f70c5d266266b" translate="yes" xml:space="preserve">
          <source>Convert this array of Kotlin strings to C array of C strings, allocating memory for the array and C strings with given &lt;a href=&quot;-autofree-scope/index&quot;&gt;AutofreeScope&lt;/a&gt;.</source>
          <target state="translated">このKotlin文字列の配列をC文字列のC配列に変換し、指定された&lt;a href=&quot;-autofree-scope/index&quot;&gt;AutofreeScopeで&lt;/a&gt;配列とC文字列にメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="f73fcb10bbc12c47a208c45232202d6d020e32f4" translate="yes" xml:space="preserve">
          <source>Convert this array of Kotlin strings to C array of C strings, allocating memory for the array and C strings with given &lt;a href=&quot;../../kotlinx.cinterop/-autofree-scope/index&quot;&gt;AutofreeScope&lt;/a&gt;.</source>
          <target state="translated">このKotlin文字列の配列をC文字列のC配列に変換し、指定された&lt;a href=&quot;../../kotlinx.cinterop/-autofree-scope/index&quot;&gt;AutofreeScopeで&lt;/a&gt;配列とC文字列にメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="54a45a32c88b033a4e3c3e7bb7405b83061b5ee7" translate="yes" xml:space="preserve">
          <source>Convert this list of Kotlin strings to C array of C strings, allocating memory for the array and C strings with given &lt;a href=&quot;-autofree-scope/index&quot;&gt;AutofreeScope&lt;/a&gt;.</source>
          <target state="translated">このKotlin文字列のリストをC文字列のC配列に変換し、指定された&lt;a href=&quot;-autofree-scope/index&quot;&gt;AutofreeScopeで&lt;/a&gt;配列とC文字列にメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="e1578ccd6857bb0ee9964d168752bc3968fa0882" translate="yes" xml:space="preserve">
          <source>Convert this list of Kotlin strings to C array of C strings, allocating memory for the array and C strings with given &lt;a href=&quot;../../kotlinx.cinterop/-autofree-scope/index&quot;&gt;AutofreeScope&lt;/a&gt;.</source>
          <target state="translated">このKotlin文字列のリストをC文字列のC配列に変換し、指定された&lt;a href=&quot;../../kotlinx.cinterop/-autofree-scope/index&quot;&gt;AutofreeScopeで&lt;/a&gt;配列とC文字列にメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="ec849d25447e9f6e84aeb4b613780e2ea6a0bfb6" translate="yes" xml:space="preserve">
          <source>Convert worker to a COpaquePointer value that could be passed via native void* pointer. Can be used as an argument of &lt;a href=&quot;from-c-pointer&quot;&gt;Worker.fromCPointer&lt;/a&gt;.</source>
          <target state="translated">ネイティブのvoid *ポインターを介して渡すことができるCOpaquePointer値にワーカーを変換します。&lt;a href=&quot;from-c-pointer&quot;&gt;Worker.fromCPointerの&lt;/a&gt;引数として使用できます。</target>
        </trans-unit>
        <trans-unit id="8972774a14e3110816435d582abc912fffa1d47e" translate="yes" xml:space="preserve">
          <source>ConvertCoordinateOptions</source>
          <target state="translated">ConvertCoordinateOptions</target>
        </trans-unit>
        <trans-unit id="941c74594872cd89ef57fa07eb378441512ebfc7" translate="yes" xml:space="preserve">
          <source>Converting an existing Java file to Kotlin with J2K</source>
          <target state="translated">J2Kで既存のJavaファイルをKotlinに変換する</target>
        </trans-unit>
        <trans-unit id="2b4a7d28d76e7932f8cdb7003f917741180d329f" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt; into an UTF-8 array.</source>
          <target state="translated">&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;文字列&lt;/a&gt;をUTF-8配列に変換します。</target>
        </trans-unit>
        <trans-unit id="d5f2f96eae84a607c8e9b82a332c5b8d35772b90" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt; into an UTF-8 array. Replaces invalid input sequences with a default character.</source>
          <target state="translated">&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;文字列&lt;/a&gt;をUTF-8配列に変換します。無効な入力シーケンスをデフォルトの文字で置き換えます。</target>
        </trans-unit>
        <trans-unit id="4152829edf8d0bd862b7d49f550e8005d5542354" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;index#kotlin.String&quot;&gt;String&lt;/a&gt; into an UTF-8 array.</source>
          <target state="translated">&lt;a href=&quot;index#kotlin.String&quot;&gt;文字列&lt;/a&gt;をUTF-8配列に変換します。</target>
        </trans-unit>
        <trans-unit id="15a1976407026878dcbdc8d91b2bd9c33bcfdce5" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;index#kotlin.String&quot;&gt;String&lt;/a&gt; into an UTF-8 array. Replaces invalid input sequences with a default character.</source>
          <target state="translated">&lt;a href=&quot;index#kotlin.String&quot;&gt;文字列&lt;/a&gt;をUTF-8配列に変換します。無効な入力シーケンスをデフォルトの文字で置き換えます。</target>
        </trans-unit>
        <trans-unit id="021e3ba12ac9fb2ad59feb3f84f676999dc070f4" translate="yes" xml:space="preserve">
          <source>Converts a surrogate pair to a unicode code point. Doesn't validate that the characters are a valid surrogate pair.</source>
          <target state="translated">サロゲートペアをユニコードのコードポイントに変換します。文字が有効なサロゲートペアであることを検証しません。</target>
        </trans-unit>
        <trans-unit id="7533b0bd3490d722a9dbc28bce734df120aa2b5a" translate="yes" xml:space="preserve">
          <source>Converts an UTF-8 array into a &lt;a href=&quot;../-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">UTF-8配列を&lt;a href=&quot;../-string/index#kotlin.String&quot;&gt;Stringに&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="69c5f6ce3716254fd0b364f0167db77c05c8aafa" translate="yes" xml:space="preserve">
          <source>Converts an UTF-8 array into a &lt;a href=&quot;../-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;. Replaces invalid input sequences with a default character.</source>
          <target state="translated">UTF-8配列を&lt;a href=&quot;../-string/index#kotlin.String&quot;&gt;Stringに&lt;/a&gt;変換します。無効な入力シーケンスをデフォルトの文字で置き換えます。</target>
        </trans-unit>
        <trans-unit id="ac5da0f15f69a45a9a2eefdfc24447136488d1ff" translate="yes" xml:space="preserve">
          <source>Converts an UTF-8 array into a &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">UTF-8配列を&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;Stringに&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="f74cd64bf1a19e3547dc8fda6940315222d03649" translate="yes" xml:space="preserve">
          <source>Converts an UTF-8 array into a &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;. Replaces invalid input sequences with a default character.</source>
          <target state="translated">UTF-8配列を&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;Stringに&lt;/a&gt;変換します。無効な入力シーケンスをデフォルトの文字で置き換えます。</target>
        </trans-unit>
        <trans-unit id="f7ca22737699ebd96b5b5c28f45a53f367d66dce" translate="yes" xml:space="preserve">
          <source>Converts entry to &lt;a href=&quot;../../../kotlin/-pair/index&quot;&gt;Pair&lt;/a&gt; with key being first component and value being second.</source>
          <target state="translated">エントリを&lt;a href=&quot;../../../kotlin/-pair/index&quot;&gt;ペアに&lt;/a&gt;変換します。キーは最初のコンポーネントで、値は2番目です。</target>
        </trans-unit>
        <trans-unit id="56a4ec551bb76a419079bb0ff3eb9c7588ccacde" translate="yes" xml:space="preserve">
          <source>Converts entry to &lt;a href=&quot;../kotlin/-pair/index&quot;&gt;Pair&lt;/a&gt; with key being first component and value being second.</source>
          <target state="translated">エントリを&lt;a href=&quot;../kotlin/-pair/index&quot;&gt;ペアに&lt;/a&gt;変換します。キーは最初のコンポーネントで、値は2番目です。</target>
        </trans-unit>
        <trans-unit id="6ca616cc46321979503bd4701ed6fbf6e2d72c70" translate="yes" xml:space="preserve">
          <source>Converts the characters from a portion of the specified array to a string.</source>
          <target state="translated">指定した配列の一部の文字を文字列に変換します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
