<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="cypress">
    <body>
      <group id="cypress">
        <trans-unit id="fc93394f74e45c570e0f6cf7122afd769779a5a4" translate="yes" xml:space="preserve">
          <source>When commands are clicked on and logged into the console from the Command Log, they now display their &amp;lsquo;yield&amp;rsquo; instead of &amp;lsquo;return&amp;rsquo;, since they really yield instead of return. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/612&quot;&gt;#612&lt;/a&gt;</source>
          <target state="translated">コマンドがクリックされ、コマンドログからコンソールにログインすると、実際にはリターンではなく生成されるため、コマンドは「リターン」ではなく「収量」を表示します。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/612&quot;&gt;＃612&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ead4da1a68cc1ac4b3f759ecef5973e75218b224" translate="yes" xml:space="preserve">
          <source>When commands are retried and when they are not</source>
          <target state="translated">コマンドが再試行されるときとされないとき</target>
        </trans-unit>
        <trans-unit id="81ead84dbc327bbb7043faa556b02a6a77e3bb18" translate="yes" xml:space="preserve">
          <source>When conditional testing is a good choice for your tests</source>
          <target state="translated">条件付きテストがテストに適している場合</target>
        </trans-unit>
        <trans-unit id="cb94349095c2d9171293adbf7de1100601aa47b7" translate="yes" xml:space="preserve">
          <source>When creating your own custom command, you can control how it appears and behaves in the Command Log.</source>
          <target state="translated">独自のカスタムコマンドを作成する場合は、コマンドログに表示され、動作を制御することができます。</target>
        </trans-unit>
        <trans-unit id="e5f09d527f376e934718253cdc7fa5cebe56724a" translate="yes" xml:space="preserve">
          <source>When debugging a failing test, follow these general principles to isolate the problem:</source>
          <target state="translated">失敗したテストをデバッグする場合は、以下の一般的な原則に従って問題を切り分けてください。</target>
        </trans-unit>
        <trans-unit id="dc8510e936d7d1f0a73641c90e06497c0b210b42" translate="yes" xml:space="preserve">
          <source>When determining an unique selector it will automatically prefer elements with:</source>
          <target state="translated">一意なセレクタを決定する際には、自動的に要素を優先します。</target>
        </trans-unit>
        <trans-unit id="641cb04088c3d30f1cc440812e3140d96171c317" translate="yes" xml:space="preserve">
          <source>When developing on Cypress, we now start the process through the CLI to bring it into parity with how it works when used in production. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/838&quot;&gt;#838&lt;/a&gt;.</source>
          <target state="translated">サイプレスで開発する場合は、CLIを介してプロセスを開始し、本番環境で使用する場合と同じように動作させます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/838&quot;&gt;＃838を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="c21bb5dbf3de840505a35cd548dc431349b9f505" translate="yes" xml:space="preserve">
          <source>When doing so Cypress will automatically validate your subject to ensure it conforms to one of those types.</source>
          <target state="translated">その際、Cypressは自動的にサブジェクトを検証し、サブジェクトがこれらのタイプのいずれかに適合していることを確認します。</target>
        </trans-unit>
        <trans-unit id="801680050dc02a05a315eec0690be8feb234a36c" translate="yes" xml:space="preserve">
          <source>When downloading Cypress for the first time, the &lt;code&gt;cypress&lt;/code&gt; command line tool &lt;em&gt;does not&lt;/em&gt; read proxy settings from the Windows registry. If you need to configure a proxy for the installation to work, you must set the appropriate environment variables as described below.</source>
          <target state="translated">サイプレスを初めてダウンロードするとき、 &lt;code&gt;cypress&lt;/code&gt; コマンドラインツール&lt;em&gt;は&lt;/em&gt;、Windowsレジストリからプロキシ設定を読み取り&lt;em&gt;ません&lt;/em&gt;。インストールが機能するようにプロキシを構成する必要がある場合は、以下の説明に従って適切な環境変数を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="e126e8a416a9c36acddae54ecb0124fbdc05b156" translate="yes" xml:space="preserve">
          <source>When editing &lt;code&gt;cypress.json&lt;/code&gt; file, the dead browser page no longer appears. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/492&quot;&gt;#492&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cypress.json&lt;/code&gt; ファイルを編集するとき、ブラウザの停止ページが表示されなくなりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/492&quot;&gt;＃492を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="fdea5321ed362d3b919e7df795d87cf6db6c3b9e" translate="yes" xml:space="preserve">
          <source>When editing the &lt;a href=&quot;../references/configuration&quot;&gt;&lt;code&gt;cypress.json&lt;/code&gt;&lt;/a&gt; file, you can use our &lt;a href=&quot;https://on.cypress.io/cypress.schema.json&quot;&gt;json schema file&lt;/a&gt; to get intelligent tooltips in your IDE for each configuration property.</source>
          <target state="translated">&lt;a href=&quot;../references/configuration&quot;&gt; &lt;code&gt;cypress.json&lt;/code&gt; &lt;/a&gt;ファイルを編集する場合、&lt;a href=&quot;https://on.cypress.io/cypress.schema.json&quot;&gt;jsonスキーマファイル&lt;/a&gt;を使用して、各構成プロパティのIDEでインテリジェントツールチップを取得できます。</target>
        </trans-unit>
        <trans-unit id="ecef3f96a8711c3dd8f7845b2abb06ebe72886d5" translate="yes" xml:space="preserve">
          <source>When element is not in focus</source>
          <target state="translated">要素にピントが合っていない場合</target>
        </trans-unit>
        <trans-unit id="1e4533044bf135309f6bd7635faca02f083ae309" translate="yes" xml:space="preserve">
          <source>When element&amp;rsquo;s are not visible due to being covered by another element, the error message now says what element is covering what element. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/611&quot;&gt;#611&lt;/a&gt;</source>
          <target state="translated">別の要素で覆われているために要素が表示されない場合、エラーメッセージに、どの要素がどの要素を覆っているのかが表示されるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/611&quot;&gt;＃611&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="63d0deba2fe6b732270972705e63dc68f49512ac" translate="yes" xml:space="preserve">
          <source>When finished, if necessary, remove the edited Test Runner version and reinstall the Cypress official version to get back to the official released code.</source>
          <target state="translated">終了したら、必要に応じて編集したテストランナーのバージョンを削除し、Cypressの公式版を再インストールすることで、公式にリリースされたコードに戻ることができます。</target>
        </trans-unit>
        <trans-unit id="fff78527749f5d53a9a2734e0f089cdc64a2f0c0" translate="yes" xml:space="preserve">
          <source>When given a &lt;code&gt;key&lt;/code&gt; argument:</source>
          <target state="translated">ときに与えられた &lt;code&gt;key&lt;/code&gt; 引数を：</target>
        </trans-unit>
        <trans-unit id="6ba04301b18d5a7543b8a72f4baa84955cc0fc2b" translate="yes" xml:space="preserve">
          <source>When given a &lt;code&gt;time&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;time&lt;/code&gt; 引数が与えられた場合：</target>
        </trans-unit>
        <trans-unit id="b76aeab27bd0b5953443e7e4ffcf86cbfa37a551" translate="yes" xml:space="preserve">
          <source>When given an &lt;code&gt;alias&lt;/code&gt; argument:</source>
          <target state="translated">与えられたときに &lt;code&gt;alias&lt;/code&gt; 引数：</target>
        </trans-unit>
        <trans-unit id="04fb3a1f680374a1842ea92703f5640d06a5cdbe" translate="yes" xml:space="preserve">
          <source>When hover over commands element layers (2d transforms like rotation) are now taken into account and displayed correctly.</source>
          <target state="translated">コマンドの上にカーソルを置くと、要素レイヤー(回転などの2次元変形)が考慮されて正しく表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="6b9254e8941a93db40b432758c3c06c98b3d0b74" translate="yes" xml:space="preserve">
          <source>When hovering over each command, Cypress will automatically display the snapshot in the viewport dimensions that existed when that command ran.</source>
          <target state="translated">各コマンドにカーソルを合わせると、そのコマンドが実行されたときに存在していたビューポート寸法のスナップショットが自動的に表示されます。</target>
        </trans-unit>
        <trans-unit id="b219fd10faccfdae13d954c8a005695a13fc37af" translate="yes" xml:space="preserve">
          <source>When in doubt, you can &lt;em&gt;always&lt;/em&gt; issue a regular &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt; to query for the elements again.</source>
          <target state="translated">疑問がある場合は、&lt;em&gt;常に&lt;/em&gt;通常の&lt;a href=&quot;../../api/commands/get&quot;&gt; &lt;code&gt;cy.get()&lt;/code&gt; &lt;/a&gt;を発行して、要素を再度クエリできます。</target>
        </trans-unit>
        <trans-unit id="ff038c2267dcdbfd92034fabc8cc6aa03106ae03" translate="yes" xml:space="preserve">
          <source>When it&amp;rsquo;s running in development you can easily:</source>
          <target state="translated">開発中に実行すると、簡単に次のことができます。</target>
        </trans-unit>
        <trans-unit id="2f75182a4b2e33f5b3af6d70e1c4a4bf6c2a9622" translate="yes" xml:space="preserve">
          <source>When logging in:</source>
          <target state="translated">ログイン時に</target>
        </trans-unit>
        <trans-unit id="c35c94c099e7bdb8d1dc2ea1803a97ae2561b282" translate="yes" xml:space="preserve">
          <source>When main app window comes into focus, it will automatically focus other peripheral windows.</source>
          <target state="translated">メインアプリのウィンドウがフォーカスされると、自動的に他の周辺ウィンドウにもフォーカスされるようになりました。</target>
        </trans-unit>
        <trans-unit id="12cdc2db0d6d6d0a888f42e94b234d7912498371" translate="yes" xml:space="preserve">
          <source>When navigating directly to &lt;code&gt;localhost:2020&lt;/code&gt; outside of the new Cypress browser environment, a message now displays discouraging running tests outside of the new Cypress browser environment.</source>
          <target state="translated">新しいサイプレスブラウザー環境外で直接 &lt;code&gt;localhost:2020&lt;/code&gt; に移動すると、新しいサイプレスブラウザー環境外でのテストの実行を推奨するメッセージが表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="3456f2adb503f8fe1b4d811f67472a7bdae92b80" translate="yes" xml:space="preserve">
          <source>When no extension is passed to &lt;code&gt;cy.fixture()&lt;/code&gt;, Cypress will search for files with the specified name within the &lt;a href=&quot;../../guides/references/configuration#Folders-Files&quot;&gt;&lt;code&gt;fixturesFolder&lt;/code&gt;&lt;/a&gt; (which defaults to &lt;code&gt;cypress/fixtures&lt;/code&gt;) and resolve the first one.</source>
          <target state="translated">&lt;code&gt;cy.fixture()&lt;/code&gt; に拡張子が渡されない場合、サイプレスは、&lt;a href=&quot;../../guides/references/configuration#Folders-Files&quot;&gt; &lt;code&gt;fixturesFolder&lt;/code&gt; &lt;/a&gt;（デフォルトは &lt;code&gt;cypress/fixtures&lt;/code&gt; ）内の指定された名前のファイルを検索し、最初のファイルを解決します。</target>
        </trans-unit>
        <trans-unit id="639d45d85f8f66e9cb0a643cae5ab4bd1ad79d38" translate="yes" xml:space="preserve">
          <source>When no extension is passed to &lt;code&gt;cy.fixture()&lt;/code&gt;, Cypress will search for files with the specified name within the &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Folders-Files&quot;&gt;&lt;code&gt;fixturesFolder&lt;/code&gt;&lt;/a&gt; (which defaults to &lt;code&gt;cypress/fixtures&lt;/code&gt;) and resolve the first one.</source>
          <target state="translated">&lt;code&gt;cy.fixture()&lt;/code&gt; に拡張子が渡されない場合、サイプレスは、&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Folders-Files&quot;&gt; &lt;code&gt;fixturesFolder&lt;/code&gt; &lt;/a&gt;（デフォルトは &lt;code&gt;cypress/fixtures&lt;/code&gt; ）内で指定された名前のファイルを検索し、最初のファイルを解決します。</target>
        </trans-unit>
        <trans-unit id="b941579fd8692f487bf033aa3ec4b7bc72d3ba81" translate="yes" xml:space="preserve">
          <source>When passed a &lt;code&gt;time&lt;/code&gt; argument &lt;code&gt;cy.wait()&lt;/code&gt; can be chained off of &lt;code&gt;cy&lt;/code&gt; or off another command.</source>
          <target state="translated">&lt;code&gt;time&lt;/code&gt; 引数を渡すと、 &lt;code&gt;cy.wait()&lt;/code&gt; を &lt;code&gt;cy&lt;/code&gt; から切り離したり、別のコマンドから切り離したりできます。</target>
        </trans-unit>
        <trans-unit id="70249ff419463e8e1664c672068da9d4d6147bc5" translate="yes" xml:space="preserve">
          <source>When passed an &lt;code&gt;alias&lt;/code&gt; argument &lt;code&gt;cy.wait()&lt;/code&gt; requires being chained off of &lt;code&gt;cy&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;alias&lt;/code&gt; 引数 &lt;code&gt;cy.wait()&lt;/code&gt; が渡されると、 &lt;code&gt;cy&lt;/code&gt; からチェーンされている必要があります。</target>
        </trans-unit>
        <trans-unit id="f84079bf5c45276b13e190886766c3ba2daaffe7" translate="yes" xml:space="preserve">
          <source>When passing &lt;code&gt;fullPage&lt;/code&gt; to the &lt;code&gt;capture&lt;/code&gt; option, Cypress scrolls the application under test from top to bottom, takes screenshots at each point and stitches them together. Due to this, elements that are &lt;code&gt;position: fixed&lt;/code&gt; or &lt;code&gt;position: sticky&lt;/code&gt; will appear multiple times in the final screenshot. To prevent this, in most cases you can programmatically change the element to be &lt;code&gt;position: absolute&lt;/code&gt; before the screenshot and change it back afterwards like shown below:</source>
          <target state="translated">&lt;code&gt;fullPage&lt;/code&gt; を &lt;code&gt;capture&lt;/code&gt; オプションに渡すと、サイプレスはテスト中のアプリケーションを上から下にスクロールし、各ポイントでスクリーンショットを撮り、それらをつなぎ合わせます。このため、最終的なスクリーンショットでは、 &lt;code&gt;position: fixed&lt;/code&gt; または &lt;code&gt;position: sticky&lt;/code&gt; 要素が複数回表示されます。これを防ぐために、ほとんどの場合、プログラムで要素を &lt;code&gt;position: absolute&lt;/code&gt; 変更できます。スクリーンショットの前に「絶対」にし、後で次のように変更します。</target>
        </trans-unit>
        <trans-unit id="a08180b990c137085f24a3a9de8eba84b01860ea" translate="yes" xml:space="preserve">
          <source>When passing a &lt;code&gt;string&lt;/code&gt; as the &lt;code&gt;url&lt;/code&gt;, the XHR&amp;rsquo;s URL must match &lt;em&gt;exactly&lt;/em&gt; what you&amp;rsquo;ve written.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; を &lt;code&gt;url&lt;/code&gt; として渡す場合、XHRのURL は記述したものと&lt;em&gt;正確に&lt;/em&gt;一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="1c1d481237dabe83d916b37690f35a90d12ccf17" translate="yes" xml:space="preserve">
          <source>When passing a &lt;code&gt;string&lt;/code&gt; as the &lt;code&gt;url&lt;/code&gt;, the XHR&amp;rsquo;s URL must match &lt;em&gt;exactly&lt;/em&gt; what you&amp;rsquo;ve written. You&amp;rsquo;ll want to use the decoded string and not include any hash encoding (ie. use &lt;code&gt;@&lt;/code&gt; instead of &lt;code&gt;%40&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; を &lt;code&gt;url&lt;/code&gt; として渡す場合、XHRのURLはあなたが書いたものと&lt;em&gt;正確に&lt;/em&gt;一致する必要があります。デコードされた文字列を使用し、ハッシュエンコーディングを含めないようにします（つまり、 &lt;code&gt;%40&lt;/code&gt; の代わりに &lt;code&gt;@&lt;/code&gt; を使用します）。</target>
        </trans-unit>
        <trans-unit id="378cc3abe7054d8b0c1a0186c3dcb3f9161c629e" translate="yes" xml:space="preserve">
          <source>When passing a RegExp as the &lt;code&gt;url&lt;/code&gt;, the XHR&amp;rsquo;s url will be tested against the regular expression and will apply if it passes.</source>
          <target state="translated">RegExpを &lt;code&gt;url&lt;/code&gt; として渡すと、XHRのURLは正規表現に対してテストされ、合格した場合に適用されます。</target>
        </trans-unit>
        <trans-unit id="ee6407e014ea7a44a09a0c9ba587480846955944" translate="yes" xml:space="preserve">
          <source>When passing an array of aliases to &lt;a href=&quot;../../api/commands/wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt; there was an edge case where an incorrect error message was being thrown. The incorrect values were a combination of the wrong alias, the wrong timeout value, or the wrong request or response. Now Cypress correctly provides all 3 of these values.</source>
          <target state="translated">エイリアスの配列を&lt;a href=&quot;../../api/commands/wait&quot;&gt; &lt;code&gt;cy.wait()&lt;/code&gt; &lt;/a&gt;に渡すと、不正なエラーメッセージがスローされるという特別なケースがありました。誤った値は、誤ったエイリアス、誤ったタイムアウト値、または誤った要求または応答の組み合わせでした。現在、サイプレスはこれら3つの値すべてを正しく提供しています。</target>
        </trans-unit>
        <trans-unit id="73146fb842db129a8f42e4896028236c04102bb7" translate="yes" xml:space="preserve">
          <source>When passing an array of aliases to &lt;code&gt;cy.wait()&lt;/code&gt;, Cypress will wait for all requests to complete within the given &lt;code&gt;requestTimeout&lt;/code&gt; and &lt;code&gt;responseTimeout&lt;/code&gt;.</source>
          <target state="translated">エイリアスの配列を &lt;code&gt;cy.wait()&lt;/code&gt; に渡す場合、サイプレスは指定された &lt;code&gt;requestTimeout&lt;/code&gt; および &lt;code&gt;responseTimeout&lt;/code&gt; 内にすべての要求が完了するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="7632c625e18892d53bf74cdc79799fd95a0b90cb" translate="yes" xml:space="preserve">
          <source>When passing the option &lt;code&gt;{ force: true }&lt;/code&gt; to &lt;a href=&quot;../../api/commands/click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/type&quot;&gt;&lt;code&gt;.type()&lt;/code&gt;&lt;/a&gt;, we no longer attempt to scroll the element into view. We&amp;rsquo;ve also disabled the check that the element is in view before clicking or typing. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/553&quot;&gt;#553&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/537&quot;&gt;#537&lt;/a&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{ force: true }&lt;/code&gt; を&lt;a href=&quot;../../api/commands/click&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../api/commands/type&quot;&gt; &lt;code&gt;.type()&lt;/code&gt; &lt;/a&gt;に渡すと、要素をスクロールして表示しないようにします。また、クリックまたは入力する前に、要素が表示されていることのチェックを無効にしました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/553&quot;&gt;＃553&lt;/a&gt;と&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/537&quot;&gt;＃537を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="e9fcb01986a3151c59909e120528b2e3aa69dbcf" translate="yes" xml:space="preserve">
          <source>When recording to the Dashboard Service, we now provide estimated durations per spec directly within the standard output, as long as the spec has had enough run history for this to be determined. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2276&quot;&gt;#2276&lt;/a&gt;.</source>
          <target state="translated">ダッシュボードサービスに記録する場合、スペックがこれを決定するのに十分な実行履歴を持っている限り、スペックごとの推定所要時間を標準出力内に直接提供するようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2276&quot;&gt;＃2276を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="d84d00ae20eafab83131fbe5add99c26271e45fe" translate="yes" xml:space="preserve">
          <source>When recording to the Dashboard we now more accurately collect commit details when it is missing from the local &lt;code&gt;git&lt;/code&gt; data. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2129&quot;&gt;#2129&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2073&quot;&gt;#2073&lt;/a&gt;.</source>
          <target state="translated">ダッシュボードに記録するときに、ローカルの &lt;code&gt;git&lt;/code&gt; データからコミット詳細が欠落している場合に、より正確に収集するようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2129&quot;&gt;＃2129&lt;/a&gt;および&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2073&quot;&gt;＃2073を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="74cf0bf1ab55097c43398eb2086002aade6c83c2" translate="yes" xml:space="preserve">
          <source>When recording to the Dashboard, unrecognized warnings coming from the API server are now displayed in stdout. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/4489&quot;&gt;#4489&lt;/a&gt;.</source>
          <target state="translated">ダッシュボードに記録するときに、APIサーバーからの認識されない警告がstdoutに表示されるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/4489&quot;&gt;＃4489を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="d6df0a5af4f1ba65f08a0e753f1281d60d3fe621" translate="yes" xml:space="preserve">
          <source>When requests are not stubbed, this guarantees that the &lt;em&gt;contract&lt;/em&gt; between your client and server is working correctly.</source>
          <target state="translated">リクエストがスタブされていない場合、これにより、クライアントとサーバー間の&lt;em&gt;コントラクト&lt;/em&gt;が正しく機能していることが保証されます。</target>
        </trans-unit>
        <trans-unit id="8ccdd8e32996fda17d33acbd519cc6d10ec0898e" translate="yes" xml:space="preserve">
          <source>When reverting the DOM, associated command elements are now automatically scrolled into view.</source>
          <target state="translated">DOM を元に戻すと、関連するコマンド要素が自動的にスクロールして表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="19880ebae16cdb31a280fa67290cbf2a519b5837" translate="yes" xml:space="preserve">
          <source>When running &lt;code&gt;cypress run --record&lt;/code&gt; on forked PR&amp;rsquo;s, we now detect that the Record Key is missing and do not fail the build. We will display a warning, but continue running the tests. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1193&quot;&gt;#1193&lt;/a&gt;.</source>
          <target state="translated">実行している場合は &lt;code&gt;cypress run --record&lt;/code&gt; フォークPRの上で、私たちは今、レコード・キーが欠落していることを検出し、ビルドに失敗していません。警告を表示しますが、テストの実行を続けます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1193&quot;&gt;＃1193を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="fd9ebdee5a017b52cb59397952ffa952eed4d038" translate="yes" xml:space="preserve">
          <source>When running &lt;code&gt;cypress run&lt;/code&gt; or in CI, Cypress will now automatically take a screenshot when a test fails. You can optionally turn this off by setting &lt;a href=&quot;configuration#Screenshots&quot;&gt;&lt;code&gt;screenshotOnHeadlessFailure&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;false&lt;/code&gt; in your configuration.</source>
          <target state="translated">実行している場合は &lt;code&gt;cypress run&lt;/code&gt; またはCIでのテストが失敗した場合、サイプレスが自動的にスクリーンショットを取るだろう。オプションで、設定で&lt;a href=&quot;configuration#Screenshots&quot;&gt; &lt;code&gt;screenshotOnHeadlessFailure&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;false&lt;/code&gt; に設定することでこれをオフにできます。</target>
        </trans-unit>
        <trans-unit id="82945ae5c789764007c9dad2d2fc05fe6ff0ee17" translate="yes" xml:space="preserve">
          <source>When running Cypress with &lt;code&gt;NODE_OPTIONS&lt;/code&gt; environment variables set, Cypress no longer issues an incorrect 0 exit code. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1676&quot;&gt;#1676&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;NODE_OPTIONS&lt;/code&gt; 環境変数を設定してサイプレスを実行すると、サイプレスは誤った0終了コードを発行しなくなりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1676&quot;&gt;＃1676&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be27f0732057e0f639c4b56ff8fb71a73aa8fe8c" translate="yes" xml:space="preserve">
          <source>When running a project in the new Cypress browser environment, if a new tab is opened, a message now displays discouraging the use of multiple tabs while testing. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/9&quot;&gt;#9&lt;/a&gt;.</source>
          <target state="translated">新しいサイプレスブラウザー環境でプロジェクトを実行しているときに、新しいタブが開かれると、テスト中に複数のタブの使用を推奨するメッセージが表示されるようになりました。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/9&quot;&gt;＃9&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="be758852e49cb340d8318094804db4524fd946e6" translate="yes" xml:space="preserve">
          <source>When running in &lt;a href=&quot;https://circleci.com/&quot;&gt;Circle CI&lt;/a&gt;, we automatically export screenshots as artifacts which makes them available directly in their web UI. If you&amp;rsquo;re using Circle CI, you&amp;rsquo;ll be able to see screenshots without doing anything. If you&amp;rsquo;re using &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;, you&amp;rsquo;ll need to upload artifacts to an &lt;code&gt;s3 bucket&lt;/code&gt;. This is a small slice of what is coming to help diagnose and understand errors in CI. Also in &lt;code&gt;0.17.0&lt;/code&gt; we will automatically scroll the tests and more intelligently and open / close test commands so you can visually see what happened. Currently you may not see the test command&amp;rsquo;s failure in the Command Log due to the view not scrolling.</source>
          <target state="translated">&lt;a href=&quot;https://circleci.com/&quot;&gt;Circle CI&lt;/a&gt;で実行すると、スクリーンショットがアーティファクトとして自動的にエクスポートされ、Web UIで直接利用できるようになります。 Circle CIを使用している場合は、何もせずにスクリーンショットを表示できます。&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;を使用している場合は、アーティファクトを &lt;code&gt;s3 bucket&lt;/code&gt; にアップロードする必要があります。これは、CIのエラーを診断して理解するのに役立つもののほんの一部です。また、 &lt;code&gt;0.17.0&lt;/code&gt; では、テストを自動的にスクロールし、よりインテリジェントに、テストコマンドを開閉​​して、何が起こったのかを視覚的に確認できるようにします。現在、ビューがスクロールしないため、コマンドログにテストコマンドの失敗が表示されない場合があります。</target>
        </trans-unit>
        <trans-unit id="01ad2aead278fa746de1240cef82e91260c50359" translate="yes" xml:space="preserve">
          <source>When running in interactive mode using &lt;a href=&quot;../guides/command-line#cypress-open&quot;&gt;&lt;code&gt;cypress open&lt;/code&gt;&lt;/a&gt; Cypress watches the filesystem for changes to your spec files. Soon after adding or updating a test Cypress will reload it and run all of the tests in that spec file.</source>
          <target state="translated">サイプレス&lt;a href=&quot;../guides/command-line#cypress-open&quot;&gt; &lt;code&gt;cypress open&lt;/code&gt; &lt;/a&gt;を使用してインタラクティブモードで実行している場合、サイプレスはスペックファイルへの変更がないかファイルシステムを監視します。テストを追加または更新するとすぐに、サイプレスはそれを再ロードし、そのスペックファイル内のすべてのテストを実行します。</target>
        </trans-unit>
        <trans-unit id="d4736574368de6325a3b94619c7fddd98647909b" translate="yes" xml:space="preserve">
          <source>When running tests with non-string test titles, the screenshots now automatically stringify the test titles instead of throwing an error. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/4310&quot;&gt;#4310&lt;/a&gt;.</source>
          <target state="translated">文字列以外のテストタイトルを使用してテストを実行すると、スクリーンショットがエラーをスローする代わりに、テストタイトルを自動的に文字列化するようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/4310&quot;&gt;＃4310を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="28a1ab912b82a2b297a580d62c62b893e213fcda" translate="yes" xml:space="preserve">
          <source>When running through &lt;code&gt;cypress run&lt;/code&gt; or in &lt;a href=&quot;../../guides/guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;, Cypress automatically takes a screenshot when a test fails. You can optionally turn this off by setting &lt;code&gt;screenshotOnRunFailure&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; within &lt;a href=&quot;../cypress-api/screenshot-api&quot;&gt;Cypress.Screenshot.defaults()&lt;/a&gt;.</source>
          <target state="translated">走るとき &lt;code&gt;cypress run&lt;/code&gt; またはで&lt;a href=&quot;../../guides/guides/continuous-integration&quot;&gt;継続的インテグレーション&lt;/a&gt;テストが失敗した場合、サイプレスは自動的にスクリーンショットを取ります。&lt;a href=&quot;../cypress-api/screenshot-api&quot;&gt;Cypress.Screenshot.defaults（）&lt;/a&gt;内で &lt;code&gt;screenshotOnRunFailure&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定することにより、オプションでこれをオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="8e0ee048759469325a5ec3cc2b6c5e278cf53044" translate="yes" xml:space="preserve">
          <source>When running through &lt;code&gt;cypress run&lt;/code&gt; or in &lt;a href=&quot;https://docs.cypress.io/guides/guides/continuous-integration.html&quot;&gt;Continuous Integration&lt;/a&gt;, Cypress automatically takes a screenshot when a test fails. You can optionally turn this off by setting &lt;code&gt;screenshotOnRunFailure&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; within your &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Screenshots&quot;&gt;&lt;code&gt;screenshotOnRunFailure&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../cypress-api/screenshot-api&quot;&gt;Cypress.Screenshot.defaults()&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cypress run&lt;/code&gt; または&lt;a href=&quot;https://docs.cypress.io/guides/guides/continuous-integration.html&quot;&gt;継続的インテグレーション&lt;/a&gt;で実行している場合、テストが失敗すると、サイプレスは自動的にスクリーンショットを撮ります。オプションで、&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Screenshots&quot;&gt; &lt;code&gt;screenshotOnRunFailure&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../cypress-api/screenshot-api&quot;&gt;Cypress.Screenshot.defaults（）&lt;/a&gt;内で &lt;code&gt;screenshotOnRunFailure&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定することにより、これをオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="2a5043a6728d3566be3d99364b44c8c239413d4b" translate="yes" xml:space="preserve">
          <source>When running through the CLI, Cypress will now display an error if the server&amp;rsquo;s port is currently in use. Previously this would not output an error and the process would just hang.</source>
          <target state="translated">CLIを介して実行する場合、サーバーのポートが現在使用中の場合、サイプレスはエラーを表示します。以前は、これはエラーを出力せず、プロセスがハングするだけでした。</target>
        </trans-unit>
        <trans-unit id="8d8c2b829a087efc0dbfc17ea07ce36042054e28" translate="yes" xml:space="preserve">
          <source>When running with &lt;code&gt;cypress run&lt;/code&gt; we now run each spec file in isolation from others. We have rewritten our reporter to provide more details and provide a summary of the run at the bottom.</source>
          <target state="translated">&lt;code&gt;cypress run&lt;/code&gt; で実行する場合、各スペックファイルを他から分離して実行するようになりました。詳細を提供し、実行の概要を下部に提供するようにレポーターを書き直しました。</target>
        </trans-unit>
        <trans-unit id="96820865eba9c88ed15dc2755393b969247556d2" translate="yes" xml:space="preserve">
          <source>When starting a series of commands:</source>
          <target state="translated">一連のコマンドを起動する場合</target>
        </trans-unit>
        <trans-unit id="a58c4133ebdb9ad0509c9bc0be623bebac5ed766" translate="yes" xml:space="preserve">
          <source>When starting up after being installed, Cypress will attempt to load the proxy configured in the Windows registry by default. &lt;a href=&quot;https://www.howtogeek.com/tips/how-to-set-your-proxy-settings-in-windows-8.1/&quot;&gt;Learn how to set your proxy settings system-wide in Windows.&lt;/a&gt;</source>
          <target state="translated">インストール後に起動すると、サイプレスはデフォルトでWindowsレジストリに設定されているプロキシをロードしようとします。&lt;a href=&quot;https://www.howtogeek.com/tips/how-to-set-your-proxy-settings-in-windows-8.1/&quot;&gt;Windowsでシステム全体にプロキシ設定を設定する方法を学びます。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b786af6d2599d9e10e26c483bd206961ee791ae5" translate="yes" xml:space="preserve">
          <source>When stubbing a response, you typically need to manage potentially large and complex JSON objects. Cypress allows you to integrate fixture syntax directly into responses.</source>
          <target state="translated">レスポンスをスタブ化する場合、通常、大きくて複雑な JSON オブジェクトを管理する必要があります。Cypress では、フィクスチャ構文をレスポンスに直接統合することができます。</target>
        </trans-unit>
        <trans-unit id="728d506383d7c4ff287770bd662f8a42e91fcc69" translate="yes" xml:space="preserve">
          <source>When stubs are created by calling the method &lt;code&gt;.withArgs(...)&lt;/code&gt; we also visually link these together.</source>
          <target state="translated">メソッド &lt;code&gt;.withArgs(...)&lt;/code&gt; を呼び出してスタブを作成すると、これらも視覚的にリンクされます。</target>
        </trans-unit>
        <trans-unit id="b272d509460177374837244707495582159cb71a" translate="yes" xml:space="preserve">
          <source>When the cookie expires, specified in seconds since &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_time&quot;&gt;Unix Epoch&lt;/a&gt;.</source>
          <target state="translated">クッキーの有効期限が切れると、以降秒単位で指定された&lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_time&quot;&gt;UNIXのエポック&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f4cad3e7ea25cfc9a592ff7d792a18579c8a1be5" translate="yes" xml:space="preserve">
          <source>When the current URL contains a hash:</source>
          <target state="translated">現在のURLにハッシュが含まれている場合</target>
        </trans-unit>
        <trans-unit id="495f5682d38540f1c3ffe3f9fe5aad571c564b92" translate="yes" xml:space="preserve">
          <source>When the current URL does not contain a hash:</source>
          <target state="translated">現在の URL にハッシュが含まれていない場合。</target>
        </trans-unit>
        <trans-unit id="be7267b2ac003ba3aa0d3454f2c2a079586b70e1" translate="yes" xml:space="preserve">
          <source>When the error is fixed in your test file, your tests will automatically re-run.</source>
          <target state="translated">テストファイルでエラーが修正されると、テストは自動的に再実行されます。</target>
        </trans-unit>
        <trans-unit id="ce3845ceaaae7533b66391da21acd439dc3b3316" translate="yes" xml:space="preserve">
          <source>When the running spec, the project, or the browser is closed while running tests, the &lt;code&gt;close&lt;/code&gt; event will be emitted. The preprocessor should do any necessary cleanup in this function, like closing the watcher when watching.</source>
          <target state="translated">テストの実行中に実行中の仕様、プロジェクト、またはブラウザーが閉じられると、 &lt;code&gt;close&lt;/code&gt; イベントが発生します。プリプロセッサは、監視中にウォッチャーを閉じるなど、この関数で必要なクリーンアップを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="ac12d9dcf09bc198c3995ebf57459f800db84fa3" translate="yes" xml:space="preserve">
          <source>When the test calls &lt;code&gt;add(2, 3)&lt;/code&gt;, the counter increments inside the &amp;ldquo;add&amp;rdquo; function are executed, and the coverage object becomes:</source>
          <target state="translated">テストが &lt;code&gt;add(2, 3)&lt;/code&gt; 呼び出すと、「add」関数内のカウンターの増分が実行され、カバレッジオブジェクトは次のようになります。</target>
        </trans-unit>
        <trans-unit id="a2f2be8b24e4dd1d9d4a4bc0c9a89d6d42ac0720" translate="yes" xml:space="preserve">
          <source>When the url changes this is now logged as a page event, and its &lt;code&gt;onConsole&lt;/code&gt; logs what caused it to change.</source>
          <target state="translated">URLが変更されると、これはページイベントとしてログに記録され、その &lt;code&gt;onConsole&lt;/code&gt; は変更の原因をログに記録します。</target>
        </trans-unit>
        <trans-unit id="6e537db1847b9f83392ca7284ce19c9e04c6fb0a" translate="yes" xml:space="preserve">
          <source>When the web application runs without the delay, it gets its items into the DOM before the Cypress command &lt;code&gt;cy.get('.todo-list li')&lt;/code&gt; runs. After the &lt;code&gt;cy.get()&lt;/code&gt; returns 2 items, the &lt;code&gt;.find()&lt;/code&gt; command just has to find the right label. Great.</source>
          <target state="translated">Webアプリケーションが遅延なしで実行されると、サイプレスコマンド &lt;code&gt;cy.get('.todo-list li')&lt;/code&gt; が実行される前に、DOMにアイテムが取得されます。後 &lt;code&gt;cy.get()&lt;/code&gt; 2つの項目を返し、 &lt;code&gt;.find()&lt;/code&gt; コマンドは、ちょうど右のラベルを見つける必要があります。すごい。</target>
        </trans-unit>
        <trans-unit id="c17c460146884420ef0209a24a059dea7188fb1f" translate="yes" xml:space="preserve">
          <source>When they click the link labeled &lt;code&gt;type&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; というラベルのリンクをクリックすると</target>
        </trans-unit>
        <trans-unit id="e57b9504e95a5138e2a2796ac404bd8be829bd5a" translate="yes" xml:space="preserve">
          <source>When true, automatically takes a screenshot when there is a failure during &lt;code&gt;cypress run&lt;/code&gt;.</source>
          <target state="translated">trueの場合、 &lt;code&gt;cypress run&lt;/code&gt; 中に障害が発生すると、自動的にスクリーンショットを撮ります。</target>
        </trans-unit>
        <trans-unit id="2e14540fadbae9d8939f41e8be2235e4f3fa46a1" translate="yes" xml:space="preserve">
          <source>When true, automatically takes a screenshot when there is a failure in Run mode.</source>
          <target state="translated">trueの場合、実行モードで障害が発生したときに自動的にスクリーンショットを撮影します。</target>
        </trans-unit>
        <trans-unit id="953201de643f1b2feed9b255c60f710fd2d75e84" translate="yes" xml:space="preserve">
          <source>When true, prevents JavaScript timers (&lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, etc) and CSS animations from running while the screenshot is taken.</source>
          <target state="translated">trueの場合、スクリーンショットの取得中にJavaScriptタイマー（ &lt;code&gt;setTimeout&lt;/code&gt; 、 &lt;code&gt;setInterval&lt;/code&gt; など）およびCSSアニメーションが実行されないようにします。</target>
        </trans-unit>
        <trans-unit id="a256ae1b12492a2827e095a3ef3123ac8c634c9f" translate="yes" xml:space="preserve">
          <source>When uncaught errors are thrown in hooks we now indicate Mocha&amp;rsquo;s behavior as part of the error - that it is skipping the remaining tests in the current suite. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/240&quot;&gt;#240&lt;/a&gt;.</source>
          <target state="translated">キャッチされないエラーがフックでスローされた場合、モカの動作をエラーの一部として示す-現在のスイートの残りのテストをスキップしている。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/240&quot;&gt;＃240を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="63c9595d73e95be93d74ca3a8b5f4c7ce979b0fc" translate="yes" xml:space="preserve">
          <source>When used with an alias, &lt;code&gt;cy.wait()&lt;/code&gt; goes through two separate &amp;ldquo;waiting&amp;rdquo; periods.</source>
          <target state="translated">エイリアスと共に使用すると、 &lt;code&gt;cy.wait()&lt;/code&gt; は2つの別々の「待機」期間を通過します。</target>
        </trans-unit>
        <trans-unit id="2f7b284874d2f7c9fe6ce1ff618a8d456e0592d2" translate="yes" xml:space="preserve">
          <source>When users navigate between pages with commands, like &lt;a href=&quot;../../api/commands/click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt;, Cypress now correctly waits until the age has finished loading before running more commands. Previously this waited for the &lt;code&gt;unload&lt;/code&gt; event, which did not fire synchronously, and ow we bind to &lt;code&gt;beforeunload&lt;/code&gt; which does. Additionally Cypress checks to ensure &lt;code&gt;beforeunload&lt;/code&gt; did not return a non-undefined value.</source>
          <target state="translated">ユーザーが&lt;a href=&quot;../../api/commands/click&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;などのコマンドを使用してページ間を移動する場合、サイプレスは、次のコマンドを実行する前に、経過時間の読み込みが完了するまで正しく待機するようになりました。以前は、これは同期的に起動されなかった &lt;code&gt;unload&lt;/code&gt; イベントを待機していましたが、これを実行する &lt;code&gt;beforeunload&lt;/code&gt; にバインドしました。さらに、サイプレスは &lt;code&gt;beforeunload&lt;/code&gt; が未定義でない値を返さないことを確認してチェックします。</target>
        </trans-unit>
        <trans-unit id="30d4c4ff71bd934c9fa52d70ba4611911d8491e7" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../../api/commands/select&quot;&gt;&lt;code&gt;.select()&lt;/code&gt;&lt;/a&gt; on a select with multiple options with the same value, we now properly set &lt;code&gt;selectedIndex&lt;/code&gt; and &lt;code&gt;selectedOptions&lt;/code&gt; on the &lt;code&gt;select&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/554&quot;&gt;#554&lt;/a&gt;.</source>
          <target state="translated">使用する場合は&lt;a href=&quot;../../api/commands/select&quot;&gt; &lt;code&gt;.select()&lt;/code&gt; &lt;/a&gt;同じ値を持つ複数のオプションを選択する上で、我々は今、正しく設定 &lt;code&gt;selectedIndex&lt;/code&gt; と &lt;code&gt;selectedOptions&lt;/code&gt; を上 &lt;code&gt;select&lt;/code&gt; 。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/554&quot;&gt;＃554を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="7038282aee174018d5e684492933319a62ce4b8e" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;this.users&lt;/code&gt; we have access to it synchronously, whereas when using &lt;code&gt;cy.get('@users')&lt;/code&gt; it becomes an asynchronous command.</source>
          <target state="translated">使用している場合 &lt;code&gt;this.users&lt;/code&gt; を使用したときのに対し、我々は、同期的にそれへのアクセス権を持っている &lt;code&gt;cy.get('@users')&lt;/code&gt; 、それが非同期コマンドになります。</target>
        </trans-unit>
        <trans-unit id="3d68d72d4181e1b4359ac07b37fc7ba41c74a6e7" translate="yes" xml:space="preserve">
          <source>When using a callback function with &lt;a href=&quot;../../api/commands/should&quot;&gt;&lt;code&gt;.should()&lt;/code&gt;&lt;/a&gt;, be sure that the entire function can be executed multiple times without side effects. Cypress applies its &lt;a href=&quot;retry-ability&quot;&gt;retry&lt;/a&gt; logic to these functions: if there&amp;rsquo;s a failure, it will repeatedly rerun the assertions until the timeout is reached. That means your code should be retry-safe. The technical term for this means your code must be &lt;strong&gt;idempotent&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/should&quot;&gt; &lt;code&gt;.should()&lt;/code&gt; &lt;/a&gt;でコールバック関数を使用する場合は、副作用なしに関数全体を複数回実行できることを確認してください。サイプレスは&lt;a href=&quot;retry-ability&quot;&gt;再試行&lt;/a&gt;ロジックをこれらの関数に適用します。障害が発生した場合、タイムアウトに達するまでアサーションを繰り返し再実行します。つまり、コードは再試行しても安全である必要があります。これの専門用語は、コードがべき&lt;strong&gt;等で&lt;/strong&gt;なければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="bdd00944f31b6aa9b2e9bbd8de4f1e5cc50e4465" translate="yes" xml:space="preserve">
          <source>When using a callback function with &lt;code&gt;.should()&lt;/code&gt; or &lt;code&gt;.and()&lt;/code&gt;, on the other hand, there is special logic to rerun the callback function until no assertions throw within it. You should be careful of side affects in a &lt;code&gt;.should()&lt;/code&gt; or &lt;code&gt;.and()&lt;/code&gt; callback function that you would not want performed multiple times.</source>
          <target state="translated">コールバック関数使用する場合 &lt;code&gt;.should()&lt;/code&gt; または &lt;code&gt;.and()&lt;/code&gt; 、一方、アサーションは、その中に投げなくなるまで、コールバック関数を再実行するために特別な論理があります。 &lt;code&gt;.should()&lt;/code&gt; または.and &lt;code&gt;.and()&lt;/code&gt; コールバック関数で、複数回実行したくない副作用に注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="7dd8e99d7a1f0c4490a0d6a34076a8e3319a92c5" translate="yes" xml:space="preserve">
          <source>When using aliases with DOM elements, Cypress will query the DOM again if the previously aliased DOM element has gone stale.</source>
          <target state="translated">エイリアスを DOM 要素で使用する場合、以前にエイリアスされた DOM 要素が古くなった場合、Cypress は再度 DOM に問い合わせを行います。</target>
        </trans-unit>
        <trans-unit id="1bb50bc6152854cf462d82039f015fed762fab55" translate="yes" xml:space="preserve">
          <source>When using special character sequences, it&amp;rsquo;s possible to activate modifier keys and type key combinations, such as &lt;code&gt;CTRL + R&lt;/code&gt; or &lt;code&gt;SHIFT + ALT + Q&lt;/code&gt;. The modifier(s) remain activated for the duration of the &lt;code&gt;.type()&lt;/code&gt; command, and are released when all subsequent characters are typed, unless &lt;a href=&quot;type#Options&quot;&gt;&lt;code&gt;{release: false}&lt;/code&gt;&lt;/a&gt; is passed as an &lt;a href=&quot;type#Key-Combinations&quot;&gt;option&lt;/a&gt;. A &lt;code&gt;keydown&lt;/code&gt; event is fired when a modifier is activated and a &lt;code&gt;keyup&lt;/code&gt; event is fired when it is released.</source>
          <target state="translated">特殊文字シーケンスを使用する場合、修飾キーをアクティブにしたり、 &lt;code&gt;CTRL + R&lt;/code&gt; や &lt;code&gt;SHIFT + ALT + Q&lt;/code&gt; などのキーの組み合わせを入力することができます。&lt;a href=&quot;type#Options&quot;&gt; &lt;code&gt;{release: false}&lt;/code&gt; &lt;/a&gt;が&lt;a href=&quot;type#Key-Combinations&quot;&gt;オプション&lt;/a&gt;として渡されない限り、 &lt;code&gt;.type()&lt;/code&gt; は.type（）コマンドの実行中はアクティブなままで、後続のすべての文字が入力されると解放されます。 &lt;code&gt;keydown&lt;/code&gt; 修飾子がアクティブになるとイベントが発生して &lt;code&gt;keyup&lt;/code&gt; 、それが解放されたときにイベントが発生しています。</target>
        </trans-unit>
        <trans-unit id="ce74957c1aa2f0ee65331aca52b1f528d0203edc" translate="yes" xml:space="preserve">
          <source>When using special character sequences, it&amp;rsquo;s possible to activate modifier keys and type key combinations, such as &lt;code&gt;CTRL+R&lt;/code&gt; or &lt;code&gt;SHIFT+ALT+b&lt;/code&gt;. Single key combinations can be specified with &lt;code&gt;{modifier+key}&lt;/code&gt; syntax.</source>
          <target state="translated">特殊文字シーケンスを使用する場合、修飾キーをアクティブにして、 &lt;code&gt;CTRL+R&lt;/code&gt; や &lt;code&gt;SHIFT+ALT+b&lt;/code&gt; などのキーの組み合わせを入力することができます。単一のキーの組み合わせは、 &lt;code&gt;{modifier+key}&lt;/code&gt; 構文で指定できます。</target>
        </trans-unit>
        <trans-unit id="5040ce5d72a5dad196e1af18f360ea344de26466" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--record&lt;/code&gt; flag while running your tests, videos are processed, compressed, and uploaded to the &lt;a href=&quot;../dashboard/introduction&quot;&gt;Dashboard Service&lt;/a&gt; after every spec file runs, successful or not. To change this behavior to only process videos in the case that tests fail, set the &lt;a href=&quot;../references/configuration#Videos&quot;&gt;&lt;code&gt;videoUploadOnPasses&lt;/code&gt;&lt;/a&gt; configuration option to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">テストの実行中に &lt;code&gt;--record&lt;/code&gt; フラグを使用すると、すべてのスペックファイルが正常に実行されたかどうかにかかわらず、ビデオが処理され、圧縮されて、&lt;a href=&quot;../dashboard/introduction&quot;&gt;ダッシュボードサービス&lt;/a&gt;にアップロードされます。テストが失敗した場合にのみビデオを処理するようにこの動作を変更するには、&lt;a href=&quot;../references/configuration#Videos&quot;&gt; &lt;code&gt;videoUploadOnPasses&lt;/code&gt; &lt;/a&gt;構成オプションを &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="67dc8d993be9d9bb9a2023aec7b5e5a0390ddc8a" translate="yes" xml:space="preserve">
          <source>When using the new &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;&amp;ndash;parallel&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;&amp;ndash;group&lt;/code&gt;&lt;/a&gt; feature, we now visually indicate that to you in the standard output when recording. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2275&quot;&gt;#2275&lt;/a&gt;.</source>
          <target state="translated">新しい使用する場合は&lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt; &lt;code&gt;&amp;ndash;parallel&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt; &lt;code&gt;&amp;ndash;group&lt;/code&gt; &lt;/a&gt;の機能を、私たちは今、視覚的に標準出力記録のあなたにあることを示しています。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2275&quot;&gt;＃2275を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="b296e6af02863fcec9a59a6c3bf61e48f19cecf0" translate="yes" xml:space="preserve">
          <source>When viewing the Test Runner&amp;rsquo;s main window at its smallest size, the header text no longer incorrectly wraps. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/86&quot;&gt;#86&lt;/a&gt;.</source>
          <target state="translated">テストランナーのメインウィンドウを最小サイズで表示すると、ヘッダーテキストが正しく折り返されなくなりました。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/86&quot;&gt;＃86&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0857e3a4cb62b9c295e57521b62607f57f6e4897" translate="yes" xml:space="preserve">
          <source>When visiting non same-origin URL, Cypress will &lt;a href=&quot;https://docs.cypress.io/guides/guides/web-security.html&quot;&gt;change the hosted URL to the new URL&lt;/a&gt;, wiping the state of any local variables. We want to save a variable across visiting non same-origin URLs.</source>
          <target state="translated">同一生成元以外のURLにアクセスすると、サイプレスは&lt;a href=&quot;https://docs.cypress.io/guides/guides/web-security.html&quot;&gt;ホストされているURLを新しいURL&lt;/a&gt;に変更し、ローカル変数の状態を消去します。同一生成元以外のURLにアクセスするときに変数を保存したいと思います。</target>
        </trans-unit>
        <trans-unit id="282f40905cefe5e210f76ad839710dd0879285ea" translate="yes" xml:space="preserve">
          <source>When we check &lt;code&gt;glob&lt;/code&gt; patterns with &lt;a href=&quot;https://github.com/isaacs/minimatch&quot;&gt;minimatch&lt;/a&gt;, by default Cypress uses sets &lt;code&gt;matchBase&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. You can override this option in &lt;a href=&quot;server&quot;&gt;&lt;code&gt;cy.server()&lt;/code&gt;&lt;/a&gt; options.</source>
          <target state="translated">&lt;code&gt;glob&lt;/code&gt; パターンを&lt;a href=&quot;https://github.com/isaacs/minimatch&quot;&gt;minimatch&lt;/a&gt;でチェックする場合、サイプレスはデフォルトで &lt;code&gt;matchBase&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定して使用します。このオプションは&lt;a href=&quot;server&quot;&gt; &lt;code&gt;cy.server()&lt;/code&gt; &lt;/a&gt;オプションでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="f82047af0b1f625497e25096bc0711853e858956" translate="yes" xml:space="preserve">
          <source>When we reference &lt;code&gt;@firstTodo&lt;/code&gt;, Cypress checks to see if all of the elements it is referencing are still in the DOM. If they are, it returns those existing elements. If they aren&amp;rsquo;t, Cypress replays the commands leading up to the alias definition.</source>
          <target state="translated">&lt;code&gt;@firstTodo&lt;/code&gt; を参照すると、サイプレスは、参照しているすべての要素がまだDOMにあるかどうかを確認します。存在する場合は、それらの既存の要素を返します。そうでない場合、サイプレスはエイリアス定義に至るまでのコマンドを再生します。</target>
        </trans-unit>
        <trans-unit id="6418e7950235a73f979a678a9ba731fe32dcb073" translate="yes" xml:space="preserve">
          <source>When we run Cypress with &lt;a href=&quot;https://github.com/istanbuljs/babel-plugin-istanbul&quot;&gt;&lt;code&gt;babel-plugin-istanbul&lt;/code&gt;&lt;/a&gt; included and inspect the &lt;code&gt;window.__coverage__&lt;/code&gt; object in the &lt;strong&gt;spec iframe&lt;/strong&gt;, we should see the coverage information for the application source files.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/istanbuljs/babel-plugin-istanbul&quot;&gt; &lt;code&gt;babel-plugin-istanbul&lt;/code&gt; を&lt;/a&gt;含めてCypressを実行し、&lt;strong&gt;spec iframe&lt;/strong&gt;の &lt;code&gt;window.__coverage__&lt;/code&gt; オブジェクトを検査すると、アプリケーションソースファイルのカバレッジ情報が表示されます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c5e1233e773a8a4ada9a0b18de680700472e8538" translate="yes" xml:space="preserve">
          <source>When we run the same tests with parallelization, Cypress uses its &lt;a href=&quot;#Balance-strategy&quot;&gt;balance strategy&lt;/a&gt; to order to specs to run based on the spec&amp;rsquo;s previous run history. During the same CI run as above, we ran &lt;em&gt;all&lt;/em&gt; tests again, but this time with parallelization across 2 machines. This job was named &lt;code&gt;2x-electron&lt;/code&gt; in the project&amp;rsquo;s &lt;a href=&quot;https://github.com/cypress-io/cypress-example-kitchensink/blob/master/circle.yml&quot;&gt;circle.yml&lt;/a&gt; file and it finished in &lt;strong&gt;59 seconds&lt;/strong&gt;.</source>
          <target state="translated">並列化を使用して同じテストを実行すると、サイプレスはその&lt;a href=&quot;#Balance-strategy&quot;&gt;バランス戦略&lt;/a&gt;を使用して、スペックの以前の実行履歴に基づいて実行するスペックに順序付けします。上記と同じCIの実行中に、&lt;em&gt;すべての&lt;/em&gt;テストを再度実行しましたが、今回は2台のマシン間で並列化を行いました。このジョブはプロジェクトの&lt;a href=&quot;https://github.com/cypress-io/cypress-example-kitchensink/blob/master/circle.yml&quot;&gt;circle.yml&lt;/a&gt;ファイルで &lt;code&gt;2x-electron&lt;/code&gt; という名前で、&lt;strong&gt;59秒&lt;/strong&gt;で終了しました。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="30c11e3106191276cf8898a244f72b21c0172d43" translate="yes" xml:space="preserve">
          <source>When we say &lt;em&gt;JavaScript Redirects&lt;/em&gt; we are talking about any kind of code that does something like this:</source>
          <target state="translated">私たちが言うときに&lt;em&gt;はJavaScriptリダイレクトを&lt;/em&gt;、私たちはこのような何かを行うコードのいずれかの種類について話しています：</target>
        </trans-unit>
        <trans-unit id="452c392cc45f8e62d91228fbdd56acc9639d1a5a" translate="yes" xml:space="preserve">
          <source>When we say &lt;em&gt;guard&lt;/em&gt;, this usually means:</source>
          <target state="translated">&lt;em&gt;ガード&lt;/em&gt;と言うとき、これは通常以下を意味します：</target>
        </trans-unit>
        <trans-unit id="da4a1223dc41882a28829dd9345d56dc6fd26868" translate="yes" xml:space="preserve">
          <source>When working with &lt;code&gt;stubs&lt;/code&gt; or &lt;code&gt;spies&lt;/code&gt; you&amp;rsquo;ll regularly want to use those when writing Chai assertions. Cypress bundles in Sinon-Chai which extends Chai allowing you to &lt;a href=&quot;https://github.com/cypress-io/sinon-chai&quot;&gt;write assertions&lt;/a&gt; about &lt;code&gt;stubs&lt;/code&gt; and &lt;code&gt;spies&lt;/code&gt;.</source>
          <target state="translated">で作業する場合 &lt;code&gt;stubs&lt;/code&gt; や &lt;code&gt;spies&lt;/code&gt; あなたは定期的にチャイアサーションを書くときに、それらを使用することをお勧めします。Chaiを拡張するSinon-Chaiのサイプレスバンドル。 &lt;code&gt;stubs&lt;/code&gt; と &lt;code&gt;spies&lt;/code&gt; に関する&lt;a href=&quot;https://github.com/cypress-io/sinon-chai&quot;&gt;アサーション&lt;/a&gt;を記述できます。</target>
        </trans-unit>
        <trans-unit id="173bce22d2286cf3cac66ffbfeec799b516ece0e" translate="yes" xml:space="preserve">
          <source>When working with local &lt;code&gt;https&lt;/code&gt; in webpack, set an environment variable to allow local certificate:</source>
          <target state="translated">webpack でローカル &lt;code&gt;https&lt;/code&gt; を使用する場合は、ローカル証明書を許可するように環境変数を設定します。</target>
        </trans-unit>
        <trans-unit id="146dd76001da477c4731e28b9699450829896b6d" translate="yes" xml:space="preserve">
          <source>When writing integration tests, you will likely work a lot with the DOM. Cypress brings in Chai-jQuery, which automatically extends Chai with specific jQuery chainer methods.</source>
          <target state="translated">統合テストを書くときには、DOM を使って作業することが多いでしょう。Cypress は Chai-jQuery を持ち込んでおり、これは Chai を特定の jQuery の chainer メソッドで自動的に拡張します。</target>
        </trans-unit>
        <trans-unit id="e672b327d99eae9fb8d2c06880494c99bcb1dfee" translate="yes" xml:space="preserve">
          <source>When writing unit tests, or even in integration-like tests, you often need to ability to stub and spy methods. Cypress includes two methods, &lt;a href=&quot;../../api/commands/stub&quot;&gt;&lt;code&gt;cy.stub()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/spy&quot;&gt;&lt;code&gt;cy.spy()&lt;/code&gt;&lt;/a&gt; that return Sinon stubs and spies, respectively.</source>
          <target state="translated">単体テストを作成するとき、または統合のようなテストでさえ、メソッドをスタブおよびスパイする機能が必要になることがよくあります。サイプレスには、シノンのスタブとスパイをそれぞれ返す&lt;a href=&quot;../../api/commands/stub&quot;&gt; &lt;code&gt;cy.stub()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../api/commands/spy&quot;&gt; &lt;code&gt;cy.spy()&lt;/code&gt; &lt;/a&gt;という2つのメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="0e8f0bdeacf845162ac6aedb4bd8a5d551852870" translate="yes" xml:space="preserve">
          <source>When you chain &lt;code&gt;.should()&lt;/code&gt; on a DOM-based command, the default &lt;code&gt;.should('exist')&lt;/code&gt; assertion is skipped. This may result in an unexpected behavior such as negative assertions passing even when the element doesn&amp;rsquo;t exist in the DOM. See &lt;a href=&quot;../../guides/core-concepts/introduction-to-cypress#Default-Assertions&quot;&gt;Default Assertions&lt;/a&gt; for more.</source>
          <target state="translated">DOMベースのコマンドで &lt;code&gt;.should()&lt;/code&gt; をチェーンすると、デフォルトの &lt;code&gt;.should('exist')&lt;/code&gt; アサーションはスキップされます。これにより、要素がDOMに存在しない場合でも、否定のアサーションが渡されるなど、予期しない動作が発生する可能性があります。詳細については、&lt;a href=&quot;../../guides/core-concepts/introduction-to-cypress#Default-Assertions&quot;&gt;デフォルトのアサーション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d57940cc82ad21e9a682ebeca6c60ea8fa463998" translate="yes" xml:space="preserve">
          <source>When you click on a stub or spy, we also output &lt;strong&gt;remarkably&lt;/strong&gt; helpful debugging information.</source>
          <target state="translated">スタブまたはスパイをクリックすると、&lt;strong&gt;非常に&lt;/strong&gt;役立つデバッグ情報も出力されます。</target>
        </trans-unit>
        <trans-unit id="458d2770acaa2009139d707ae1bf3a38a96e8cd7" translate="yes" xml:space="preserve">
          <source>When you edit the selector, it will show you how many elements match and highlight those elements in your app.</source>
          <target state="translated">セレクタを編集すると、アプリ内の要素がどれだけ一致しているかを表示し、それらの要素を強調表示します。</target>
        </trans-unit>
        <trans-unit id="4874c5aeb5a016ca7511b034fd2d7b5e3f176dd8" translate="yes" xml:space="preserve">
          <source>When you force an event to happen we will:</source>
          <target state="translated">あなたがイベントを強制的に起こすとき、私たちはそうします。</target>
        </trans-unit>
        <trans-unit id="4892340cd1e056b060f23cb37e0a3f1c66ee08b3" translate="yes" xml:space="preserve">
          <source>When you invite users (from the Dashboard) we will &lt;strong&gt;automatically&lt;/strong&gt; whitelist them. This means you can invite all of your teammates (or anyone else). They can start using Cypress without talking to us.</source>
          <target state="translated">ダッシュボードからユーザーを招待すると、&lt;strong&gt;自動的に&lt;/strong&gt;ホワイトリストに登録されます。つまり、チームメイト全員（または他の誰でも）を招待できます。彼らは私たちと話をしなくてもサイプレスを使い始めることができます。</target>
        </trans-unit>
        <trans-unit id="07dfa7f252b3d76547221eff0ca8b668a8486ad9" translate="yes" xml:space="preserve">
          <source>When you open a Cypress project, clicking on the &lt;em&gt;Settings&lt;/em&gt; tab will display the resolved configuration to you. This makes it easy to understand and see where different values came from.</source>
          <target state="translated">サイプレスプロジェクトを開いて、&lt;em&gt;[設定&lt;/em&gt; ]タブをクリックすると、解決された構成が表示されます。これにより、さまざまな値がどこから来たかを簡単に理解して確認できます。</target>
        </trans-unit>
        <trans-unit id="ab460b206d7153d7d79fd30feb6b470faa3fe569" translate="yes" xml:space="preserve">
          <source>When you open the Test Runner in a project that uses the above modifications to your plugins file, only the Chrome browsers found on the system will display in the list of available browsers.</source>
          <target state="translated">上記のプラグインファイルの修正を使用したプロジェクトでテストランナーを開くと、利用可能なブラウザのリストには、システム上で見つかったChromeブラウザのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="e1c501c166f2995371e56c8428949ccb0a7f2816" translate="yes" xml:space="preserve">
          <source>When you run tests in Cypress, we launch a browser for you. This enables us to:</source>
          <target state="translated">Cypress でテストを実行すると、ブラウザが起動します。これにより、以下のことが可能になります。</target>
        </trans-unit>
        <trans-unit id="2030d32b8c1e80dba91fa5ab9c1c39763c8f9951" translate="yes" xml:space="preserve">
          <source>When you run the Cypress tests now, you should see a few commands after the tests finish. We have highlighted these commands using a green rectangle below.</source>
          <target state="translated">Cypress のテストを実行すると、テスト終了後にいくつかのコマンドが表示されるはずです。これらのコマンドは下の緑の四角でハイライトされています。</target>
        </trans-unit>
        <trans-unit id="44f828aa43ac83333a9828c9db9d6bcc014dc2a7" translate="yes" xml:space="preserve">
          <source>When you start a &lt;a href=&quot;../../api/commands/server&quot;&gt;&lt;code&gt;cy.server()&lt;/code&gt;&lt;/a&gt; and define &lt;a href=&quot;../../api/commands/route&quot;&gt;&lt;code&gt;cy.route()&lt;/code&gt;&lt;/a&gt; commands, Cypress displays this under &amp;ldquo;Routes&amp;rdquo; in the Command Log.</source>
          <target state="translated">あなたが起動すると&lt;a href=&quot;../../api/commands/server&quot;&gt; &lt;code&gt;cy.server()&lt;/code&gt; &lt;/a&gt;と定義&lt;a href=&quot;../../api/commands/route&quot;&gt; &lt;code&gt;cy.route()&lt;/code&gt; &lt;/a&gt;コマンドを、サイプレスは、コマンドログで「ルート」の下にこれを表示します。</target>
        </trans-unit>
        <trans-unit id="a16fa569b34118cb9b27d09b87df8ea3c60c5f3f" translate="yes" xml:space="preserve">
          <source>When you start running your tests, Cypress does not know the url of the app you plan to test. So, Cypress initially opens on &lt;code&gt;https://localhost&lt;/code&gt; + a random port.</source>
          <target state="translated">テストの実行を開始しても、サイプレスはテストする予定のアプリのURLを認識していません。したがって、サイプレスは最初に &lt;code&gt;https://localhost&lt;/code&gt; +ランダムなポートで開きます。</target>
        </trans-unit>
        <trans-unit id="8a9afbc1a5811ad6bdacb237d95f6ae8689be1e9" translate="yes" xml:space="preserve">
          <source>When you stub requests, you can automatically control their response &lt;code&gt;headers&lt;/code&gt;. This is useful when you want to send back meta data in the &lt;code&gt;headers&lt;/code&gt;, such as &lt;em&gt;pagination&lt;/em&gt; or &lt;em&gt;token&lt;/em&gt; information.</source>
          <target state="translated">リクエストをスタブすると、そのレスポンス &lt;code&gt;headers&lt;/code&gt; 自動的に制御できます。これは、&lt;em&gt;ページネーション&lt;/em&gt;や&lt;em&gt;トークン&lt;/em&gt;情報などのメタデータを &lt;code&gt;headers&lt;/code&gt; で送り返す場合に便利です。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="449aafde66ca4c743e6ce897116811ed77f28832" translate="yes" xml:space="preserve">
          <source>When you submit a regular HTML form, the browser will follow this &lt;code&gt;HTTP(s) request&lt;/code&gt;.</source>
          <target state="translated">通常のHTMLフォームを送信すると、ブラウザはこの &lt;code&gt;HTTP(s) request&lt;/code&gt; 従います。</target>
        </trans-unit>
        <trans-unit id="97e298e9358f1e8249224c2a944bc63ec1025ee4" translate="yes" xml:space="preserve">
          <source>When you use aliasing with the &lt;a href=&quot;../../api/commands/as&quot;&gt;&lt;code&gt;.as()&lt;/code&gt;&lt;/a&gt; command, we also correlate those aliases with the calls. This works identically to aliasing a &lt;a href=&quot;../../api/commands/route&quot;&gt;&lt;code&gt;cy.route()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/as&quot;&gt; &lt;code&gt;.as()&lt;/code&gt; &lt;/a&gt;コマンドでエイリアスを使用すると、それらのエイリアスが呼び出しと関連付けられます。これは&lt;a href=&quot;../../api/commands/route&quot;&gt; &lt;code&gt;cy.route()&lt;/code&gt; の&lt;/a&gt;エイリアスと同じように機能します。</target>
        </trans-unit>
        <trans-unit id="a9f73347f2fcb67ec2aa85a6aecdb057caa6ace6" translate="yes" xml:space="preserve">
          <source>When you use the &lt;a href=&quot;test-runner#Command-Log&quot;&gt;Command Log&lt;/a&gt; to hover over a command, you&amp;rsquo;ll notice that we will always scroll the element the command was applied to into view. Please note that this is &lt;em&gt;NOT&lt;/em&gt; using the same algorithms that we described above.</source>
          <target state="translated">&lt;a href=&quot;test-runner#Command-Log&quot;&gt;コマンドログ&lt;/a&gt;を使用してコマンドにカーソルを合わせると、コマンドが適用された要素が常にスクロールして表示されることがわかります。これは、上で説明したのと同じアルゴリズムを使用してい&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="506aca18dacfbfb7310cd1d69cef3bdef0b7dcbe" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re writing tests for a very &lt;strong&gt;specific feature&lt;/strong&gt;, you &lt;em&gt;should&lt;/em&gt; use your UI to test it.</source>
          <target state="translated">非常に&lt;strong&gt;特定の機能の&lt;/strong&gt;テストを作成する場合は、UIを使用してテストする&lt;em&gt;必要&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="6a700b1aeb514624ce9adb2e8ff46ae0e947160b" translate="yes" xml:space="preserve">
          <source>When your application navigates to a superdomain outside of the current origin-policy, Cypress is unable to communicate with it, and thus fails.</source>
          <target state="translated">アプリケーションが現在のオリジンポリシー外のスーパードメインに移動すると、Cypress はそのスーパードメインと通信できず、失敗します。</target>
        </trans-unit>
        <trans-unit id="277086799c1afca418091d7e2865e412f48c0f4d" translate="yes" xml:space="preserve">
          <source>When your tests are running, you can use the &lt;a href=&quot;../../api/cypress-api/env&quot;&gt;&lt;code&gt;Cypress.env&lt;/code&gt;&lt;/a&gt; function to access the values of your environment variables.</source>
          <target state="translated">テストの実行中に、&lt;a href=&quot;../../api/cypress-api/env&quot;&gt; &lt;code&gt;Cypress.env&lt;/code&gt; &lt;/a&gt;関数を使用して環境変数の値にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="07b0b44ffbfda0ae3f57b0f61e636c370df10139" translate="yes" xml:space="preserve">
          <source>Whenever Cypress cannot interact with an element, it could fail at any of the above steps. You will usually get an error explaining why the element was not found to be actionable.</source>
          <target state="translated">Cypressが要素と対話できない場合、上記のステップのいずれかで失敗する可能性があります。通常、要素がアクション可能であることが見つからなかった理由を説明するエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="9743294032a19e222eaf512d5727e0389d1cd18b" translate="yes" xml:space="preserve">
          <source>Whenever commands have an assertion they will not resolve until their associated assertions pass. This enables you to describe the state of your application without having to worry about when it gets there.</source>
          <target state="translated">コマンドにアサーションがある場合はいつでも、関連するアサーションが通過するまで解決しません。これにより、アプリケーションの状態を記述する際に、いつそこに到達するかを心配することなく記述することができます。</target>
        </trans-unit>
        <trans-unit id="dfa43e30ebdda3842a6a65726041a1ccddfe86a6" translate="yes" xml:space="preserve">
          <source>Whenever you encounter errors in the CLI we&amp;rsquo;ll output helpful debugging information at the bottom of each error.</source>
          <target state="translated">CLIでエラーが発生すると、各エラーの下部に役立つデバッグ情報が出力されます。</target>
        </trans-unit>
        <trans-unit id="5e740625c858f61fda2fb28b6c3776f0853f5e22" translate="yes" xml:space="preserve">
          <source>Whenever you modify &lt;code&gt;cypress.json&lt;/code&gt;, Cypress will automatically reboot itself and kill any open browsers. This is normal. Just click on the spec file again to relaunch the browser.</source>
          <target state="translated">&lt;code&gt;cypress.json&lt;/code&gt; を変更すると、サイプレスは自動的に再起動し、開いているブラウザを強制終了します。これは正常です。specファイルをもう一度クリックすると、ブラウザが再起動します。</target>
        </trans-unit>
        <trans-unit id="3f04f64ccbbf64ceb2be78e5da89106ffceb3f1a" translate="yes" xml:space="preserve">
          <source>Whenever you return an object from your &lt;code&gt;pluginFile&lt;/code&gt;, Cypress will take this and &amp;ldquo;diff&amp;rdquo; it against the original configuration and automatically set the resolved values to point to what you returned.</source>
          <target state="translated">&lt;code&gt;pluginFile&lt;/code&gt; からオブジェクトを返すときはいつでも、サイプレスはこれを受け取り、元の構成と「比較」し、返されたものを指すように解決された値を自動的に設定します。</target>
        </trans-unit>
        <trans-unit id="4393fb1a13539272944f9ed0f8f72b68bf967eeb" translate="yes" xml:space="preserve">
          <source>Whenever you return an object from your &lt;code&gt;pluginFile&lt;/code&gt;, Cypress will take this and &amp;ldquo;diff&amp;rdquo; it against the original configuration, and automatically set the resolved values to point to what you returned.</source>
          <target state="translated">&lt;code&gt;pluginFile&lt;/code&gt; からオブジェクトを返すときはいつでも、サイプレスはこれを取得して元の構成と比較し、自動的に解決された値を設定して、返されたものを指し示します。</target>
        </trans-unit>
        <trans-unit id="2a373643eddcc8c36c49dd17d55ccd07d141072a" translate="yes" xml:space="preserve">
          <source>Whenever you start a server and add routes, Cypress will display a new Instrument Log called &lt;em&gt;Routes&lt;/em&gt;. It will list the routing table in the Instrument Log, including the &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;stubbed&lt;/code&gt;, &lt;code&gt;alias&lt;/code&gt; and number of matched requests:</source>
          <target state="translated">サーバーを起動してルートを追加すると、サイプレスは&lt;em&gt;Routes&lt;/em&gt;と呼ばれる新しい機器ログを表示します。 &lt;code&gt;method&lt;/code&gt; 、 &lt;code&gt;url&lt;/code&gt; 、 &lt;code&gt;stubbed&lt;/code&gt; 、 &lt;code&gt;alias&lt;/code&gt; 、一致したリクエストの数を含むルーティングテーブルがInstrument Logにリストされます。</target>
        </trans-unit>
        <trans-unit id="54b4ef170f5b9e2fa99e22be1a39654479504895" translate="yes" xml:space="preserve">
          <source>Whenever you use a callback function, its return value is always ignored. Cypress always forces the command to yield the value from the previous cy command&amp;rsquo;s yield (which in the example below is &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">コールバック関数を使用すると、その戻り値は常に無視されます。サイプレスは常に、コマンドに前のcyコマンドのyield（以下の例では &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; ）からの値を強制的に強制します</target>
        </trans-unit>
        <trans-unit id="d1971ab6315772419dbf8eee58ee2c58d7d44d04" translate="yes" xml:space="preserve">
          <source>Whenever you&amp;rsquo;re using a child command you likely want to use &lt;a href=&quot;../commands/wrap&quot;&gt;&lt;code&gt;cy.wrap()&lt;/code&gt;&lt;/a&gt; on the subject. Wrapping it enables you to immediately use more Cypress commands on that subject.</source>
          <target state="translated">子コマンドを使用しているときはいつでも、件名に&lt;a href=&quot;../commands/wrap&quot;&gt; &lt;code&gt;cy.wrap()&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。それをラップすると、その主題でより多くのサイプレスコマンドをすぐに使用できます。</target>
        </trans-unit>
        <trans-unit id="8819e1ad4c465bb36863dc4c5672a014cacedb86" translate="yes" xml:space="preserve">
          <source>Whenever you&amp;rsquo;re using a child command you likely want to use &lt;code&gt;cy.wrap()&lt;/code&gt; on the subject. Wrapping it enables you to immediately use more Cypress commands on that subject.</source>
          <target state="translated">子コマンドを使用しているときはいつでも、サブジェクト &lt;code&gt;cy.wrap()&lt;/code&gt; を使用したいと思うでしょう。ラップすることで、そのサブジェクトに対してより多くのサイプレスコマンドをすぐに使用できます。</target>
        </trans-unit>
        <trans-unit id="672ad5ac7443e25239333ea7293ed6657db4b882" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;HH&lt;/code&gt; is 00-23, &lt;code&gt;mm&lt;/code&gt; is 00-59, &lt;code&gt;ss&lt;/code&gt; is 00-59, and &lt;code&gt;SSS&lt;/code&gt; is 000-999.</source>
          <target state="translated">どこ &lt;code&gt;HH&lt;/code&gt; は 00-23で、 &lt;code&gt;mm&lt;/code&gt; は 00-59で、 &lt;code&gt;ss&lt;/code&gt; 00から59で、 &lt;code&gt;SSS&lt;/code&gt; は 000から999です。</target>
        </trans-unit>
        <trans-unit id="78e2ae165d816036f6f6f6d3865025f475753c2f" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;W&lt;/code&gt; is the literal character &amp;lsquo;W&amp;rsquo; and &lt;code&gt;ww&lt;/code&gt; is the number of the week (01-53).</source>
          <target state="translated">ここで、 &lt;code&gt;W&lt;/code&gt; はリテラル文字 'W'であり、 &lt;code&gt;ww&lt;/code&gt; は週番号（01-53）です。</target>
        </trans-unit>
        <trans-unit id="e5a86f970f8b16904d6a7c10e6bb23b12406f5a6" translate="yes" xml:space="preserve">
          <source>Where Cypress will automatically save the video of the test run when tests run with &lt;code&gt;cypress run&lt;/code&gt;.</source>
          <target state="translated">サイプレス実行でテストを実行すると、サイプレスはテスト実行のビデオを自動的に保存し &lt;code&gt;cypress run&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f732ea59d82bc6caa095aa8e040d51307d477408" translate="yes" xml:space="preserve">
          <source>Where to put screenshot configuration</source>
          <target state="translated">スクリーンショットの設定をどこに置くか</target>
        </trans-unit>
        <trans-unit id="16135e9ac659c8d23dbeeab42fad1fa2c419cd91" translate="yes" xml:space="preserve">
          <source>Whether Chrome Web Security for &lt;code&gt;same-origin policy&lt;/code&gt; and &lt;code&gt;insecure mixed content&lt;/code&gt; is enabled. &lt;a href=&quot;../guides/web-security&quot;&gt;Read more about this here&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;same-origin policy&lt;/code&gt; および &lt;code&gt;insecure mixed content&lt;/code&gt; に対してChrome Webセキュリティを有効にするかどうか。&lt;a href=&quot;../guides/web-security&quot;&gt;これについてもっと読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0e90f9f4f04fed1459fadb1ceb107bf248263594" translate="yes" xml:space="preserve">
          <source>Whether Cypress should automatically retry status code errors under the hood. Cypress will retry a request up to 4 times if this is set to true.</source>
          <target state="translated">Cypressが自動的にステータスコードエラーを再試行するかどうか。これがtrueに設定されている場合、Cypressはリクエストを最大4回まで再試行します。</target>
        </trans-unit>
        <trans-unit id="bdeb900e4e6b5be8de4445258768661404d3475d" translate="yes" xml:space="preserve">
          <source>Whether Cypress should automatically retry transient network errors under the hood. Cypress will retry a request up to 4 times if this is set to true.</source>
          <target state="translated">Cypress が過渡的なネットワークエラーを自動的に再試行するかどうか。これが true に設定されている場合、Cypress はリクエストを最大 4 回まで再試行します。</target>
        </trans-unit>
        <trans-unit id="41736d0931c53e387928e0ba4671acaefc71206a" translate="yes" xml:space="preserve">
          <source>Whether Cypress will capture a video of the tests run with &lt;code&gt;cypress run&lt;/code&gt;.</source>
          <target state="translated">かどうかサイプレスで実行テストのビデオキャプチャします &lt;code&gt;cypress run&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8115c0785217c5bf02d8a4bcb7a02c997793053b" translate="yes" xml:space="preserve">
          <source>Whether Cypress will process, compress, and upload videos to the &lt;a href=&quot;../dashboard/introduction&quot;&gt;Dashboard&lt;/a&gt; even when all tests in a spec file are passing. This only applies when recording your runs to the Dashboard. Turn this off if you&amp;rsquo;d like to only upload the spec file&amp;rsquo;s video when there are failing tests.</source>
          <target state="translated">スペックファイル内のすべてのテストに合格した場合でも、サイプレスがビデオを処理、圧縮、および&lt;a href=&quot;../dashboard/introduction&quot;&gt;ダッシュボードに&lt;/a&gt;アップロードするかどうか。これは、ダッシュボードにランニングを記録するときにのみ適用されます。テストが失敗した場合にのみスペックファイルの動画をアップロードする場合は、これをオフにします。</target>
        </trans-unit>
        <trans-unit id="761b99b6c0a551c6ac694cbdf99a49fca065cd15" translate="yes" xml:space="preserve">
          <source>Whether Cypress will search for and replace obstructive JS code in &lt;code&gt;.js&lt;/code&gt; or &lt;code&gt;.html&lt;/code&gt; files. &lt;a href=&quot;#modifyObstructiveCode&quot;&gt;Please read the notes for more information on this setting.&lt;/a&gt;</source>
          <target state="translated">サイプレスが &lt;code&gt;.js&lt;/code&gt; または &lt;code&gt;.html&lt;/code&gt; ファイル内の邪魔なJSコードを検索して置き換えるかどうか。&lt;a href=&quot;#modifyObstructiveCode&quot;&gt;この設定の詳細については、注意事項をお読みください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e44463933898448ac71fed945bf07b878b5a4c26" translate="yes" xml:space="preserve">
          <source>Whether Cypress will trash assets within the &lt;code&gt;screenshotsFolder&lt;/code&gt; and &lt;code&gt;videosFolder&lt;/code&gt; before tests run with &lt;code&gt;cypress run&lt;/code&gt;.</source>
          <target state="translated">かどうかサイプレスは、内の資産をゴミ箱ます &lt;code&gt;screenshotsFolder&lt;/code&gt; と &lt;code&gt;videosFolder&lt;/code&gt; で実行するテストの前に、 &lt;code&gt;cypress run&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c2cb21e895a5a745b6ec0fbc20abc4d8c70a44ca" translate="yes" xml:space="preserve">
          <source>Whether Cypress will watch and restart tests on test file changes</source>
          <target state="translated">Cypressがテストファイルの変更を監視してテストを再開するかどうか</target>
        </trans-unit>
        <trans-unit id="31e09d64c50c51e6cd0394f2dbb150c0701af681" translate="yes" xml:space="preserve">
          <source>Whether cookie debugging should be enabled.</source>
          <target state="translated">クッキーのデバッグを有効にすべきかどうか。</target>
        </trans-unit>
        <trans-unit id="c321c1f09789d9f18547c7ac48c679d1660a47e7" translate="yes" xml:space="preserve">
          <source>Whether or not you choose to stub responses, Cypress enables you to declaratively &lt;a href=&quot;../../api/commands/wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt; for requests and their responses.</source>
          <target state="translated">応答のスタブを選択するかどうかにかかわらず、サイプレスでは、要求とその応答に対して宣言的に&lt;a href=&quot;../../api/commands/wait&quot;&gt; &lt;code&gt;cy.wait()&lt;/code&gt; &lt;/a&gt;を実行できます。</target>
        </trans-unit>
        <trans-unit id="9ed062e032668d1b5c6e0232138b7f73d439bce6" translate="yes" xml:space="preserve">
          <source>Whether the application under test was scaled to fit into the browser viewport. May be &lt;code&gt;scale&lt;/code&gt; argument passed in via &lt;a href=&quot;../commands/screenshot#Arguments&quot;&gt;&lt;code&gt;cy.screenshot()&lt;/code&gt;&amp;ldquo;&lt;/a&gt;</source>
          <target state="translated">テスト対象のアプリケーションがブラウザのビューポートに収まるようにスケーリングされているかどうか。&lt;a href=&quot;../commands/screenshot#Arguments&quot;&gt; &lt;code&gt;cy.screenshot()&lt;/code&gt; &lt;/a&gt;を介して渡された &lt;code&gt;scale&lt;/code&gt; 引数である可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e996007366dd64ce77a435c058317411ca69c45" translate="yes" xml:space="preserve">
          <source>Whether the browser displays headed.</source>
          <target state="translated">ブラウザが見出しを表示するかどうか。</target>
        </trans-unit>
        <trans-unit id="e03b6a210045ab14dfd8997e93aa8a0cd84a22c0" translate="yes" xml:space="preserve">
          <source>Whether the browser is running headlessly.</source>
          <target state="translated">ブラウザがヘッドレスで動作しているかどうか</target>
        </trans-unit>
        <trans-unit id="ffdf77e9df613e519abee92f139e0a2032bdc81f" translate="yes" xml:space="preserve">
          <source>Whether the browser is selected in the browser selector of the Test Runner.</source>
          <target state="translated">テストランナーのブラウザセレクタでブラウザが選択されているかどうか。</target>
        </trans-unit>
        <trans-unit id="d61bcc4fd11e49e5bad66f31fd5f7b69ad45f057" translate="yes" xml:space="preserve">
          <source>Whether the cookie is a secure cookie</source>
          <target state="translated">クッキーが安全なクッキーであるかどうか</target>
        </trans-unit>
        <trans-unit id="940a089ba1b31a0cf3683acd601865036a91262f" translate="yes" xml:space="preserve">
          <source>Whether the cookie is an HTTP only cookie</source>
          <target state="translated">クッキーがHTTPのみのクッキーであるかどうか</target>
        </trans-unit>
        <trans-unit id="7003e8472f9982a9668f5bfc7481ea0a542cfdd0" translate="yes" xml:space="preserve">
          <source>Whether the event bubbles</source>
          <target state="translated">イベントの泡が出るかどうか</target>
        </trans-unit>
        <trans-unit id="973a7ee6bcf819fdc50de3b3d5d8a48450efe210" translate="yes" xml:space="preserve">
          <source>Whether the event is cancelable</source>
          <target state="translated">イベントがキャンセル可能かどうか</target>
        </trans-unit>
        <trans-unit id="7a2592a9dc32e9a9e19d59c009f42312d292b16a" translate="yes" xml:space="preserve">
          <source>Whether the screenshot was stitched together from multiple screenshot images.</source>
          <target state="translated">複数のスクリーンショット画像からスクリーンショットをつなぎ合わせたかどうか。</target>
        </trans-unit>
        <trans-unit id="566e741e52efc26610171f25c2555c7813b1e764" translate="yes" xml:space="preserve">
          <source>Whether to accept the &lt;code&gt;gzip&lt;/code&gt; encoding</source>
          <target state="translated">&lt;code&gt;gzip&lt;/code&gt; エンコーディングを受け入れるかどうか</target>
        </trans-unit>
        <trans-unit id="2ac1703f3587a706b72a5046adfde0e823f3e31f" translate="yes" xml:space="preserve">
          <source>Whether to automatically follow redirects</source>
          <target state="translated">リダイレクトを自動的にフォローするかどうか</target>
        </trans-unit>
        <trans-unit id="455fdc212a434e553b1eaee2316881f999d92170" translate="yes" xml:space="preserve">
          <source>Whether to automatically take screenshots when there are run failures.</source>
          <target state="translated">実行失敗時に自動的にスクリーンショットを撮るかどうか。</target>
        </trans-unit>
        <trans-unit id="3ffe0a2d063bf3de6022c75671348b48dab72193" translate="yes" xml:space="preserve">
          <source>Whether to convert the &lt;code&gt;body&lt;/code&gt; values to url encoded content and set the &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; header</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; 値をURLエンコードされたコンテンツに変換し、 &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; ヘッダーを設定するかどうか</target>
        </trans-unit>
        <trans-unit id="5825390ed7f2a186453f401d8a3bf1d5a389956b" translate="yes" xml:space="preserve">
          <source>Whether to disable JavaScript timers and CSS animations when taking the screenshot.</source>
          <target state="translated">スクリーンショット撮影時にJavaScriptのタイマーやCSSアニメーションを無効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="f9a20434ef0f424cd34adbf62bc5a50efebd38d0" translate="yes" xml:space="preserve">
          <source>Whether to fail on response codes other than &lt;code&gt;2xx&lt;/code&gt; and &lt;code&gt;3xx&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;2xx&lt;/code&gt; および &lt;code&gt;3xx&lt;/code&gt; 以外の応答コードで失敗するかどうか</target>
        </trans-unit>
        <trans-unit id="cbd265fb13acbb0a9279638ca3c848375fc68423" translate="yes" xml:space="preserve">
          <source>Whether to record the test run</source>
          <target state="translated">テスト実行を記録するかどうか</target>
        </trans-unit>
        <trans-unit id="867373d406c06b9c70a72c9eaacd5e8069b658eb" translate="yes" xml:space="preserve">
          <source>Whether to reload the current page without using the cache. &lt;code&gt;true&lt;/code&gt; forces the reload without cache.</source>
          <target state="translated">キャッシュを使用せずに現在のページをリロードするかどうか。 &lt;code&gt;true&lt;/code&gt; は、キャッシュなしで再ロードを強制します。</target>
        </trans-unit>
        <trans-unit id="29a023c33165226876793f689ff1210618eaeba6" translate="yes" xml:space="preserve">
          <source>Whether to scale the app to fit into the browser viewport. This is always coerced to &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;runner&lt;/code&gt; captures.</source>
          <target state="translated">アプリをブラウザのビューポートに合わせて拡大縮小するかどうか。これは、 &lt;code&gt;runner&lt;/code&gt; キャプチャでは常に &lt;code&gt;true&lt;/code&gt; に強制されます。</target>
        </trans-unit>
        <trans-unit id="9f34456bcdc57b0dbe9e97c8f761264c1a6d1a2f" translate="yes" xml:space="preserve">
          <source>Whether to scale the app to fit into the browser viewport. This is always coerced to &lt;code&gt;true&lt;/code&gt; when &lt;code&gt;capture&lt;/code&gt; is &lt;code&gt;runner&lt;/code&gt;.</source>
          <target state="translated">アプリをブラウザのビューポートに合わせて拡大縮小するかどうか。 &lt;code&gt;capture&lt;/code&gt; が &lt;code&gt;runner&lt;/code&gt; の場合、これは常に &lt;code&gt;true&lt;/code&gt; に強制されます。</target>
        </trans-unit>
        <trans-unit id="fc45ac18df39651c64e978994345d4ac53a2b95f" translate="yes" xml:space="preserve">
          <source>Whether to scale your application under test in the screenshot.</source>
          <target state="translated">スクリーンショットでテスト中のアプリケーションをスケーリングするかどうか。</target>
        </trans-unit>
        <trans-unit id="7136bba78216598218ef7f55e8918c5d46b83ae7" translate="yes" xml:space="preserve">
          <source>Whether to traverse shadow DOM boundaries and include elements within the shadow DOM in the yielded results.</source>
          <target state="translated">シャドウDOMの境界をトラバースして、生成された結果にシャドウDOM内の要素を含めるかどうか。</target>
        </trans-unit>
        <trans-unit id="3c5ed08a9100f578114549c25b3f933a75a2ebed" translate="yes" xml:space="preserve">
          <source>Whether to wait for elements to &lt;a href=&quot;https://docs.cypress.io/guides/core-concepts/interacting-with-elements.html#Animations&quot;&gt;finish animating&lt;/a&gt; before executing the command.</source>
          <target state="translated">コマンドを実行&lt;a href=&quot;https://docs.cypress.io/guides/core-concepts/interacting-with-elements.html#Animations&quot;&gt;する&lt;/a&gt;前に、要素のアニメーションが終了するのを待つかどうか。</target>
        </trans-unit>
        <trans-unit id="6c18664bd72425aeb26f645bf90139bf863fe4a1" translate="yes" xml:space="preserve">
          <source>Whether to wait for elements to finish animating before executing commands</source>
          <target state="translated">コマンドを実行する前に要素のアニメーションが終了するのを待つかどうか</target>
        </trans-unit>
        <trans-unit id="f0b95643d856efb96bcbd48fb228d61ee18c4da2" translate="yes" xml:space="preserve">
          <source>Whether to wait for the Command Log to synchronize before taking the screenshot.</source>
          <target state="translated">スクリーンショットを撮る前にコマンドログの同期を待つかどうか。</target>
        </trans-unit>
        <trans-unit id="423b4b1a2ceb78e00f2cc630388766057b470a4c" translate="yes" xml:space="preserve">
          <source>Whether you are testing a chat application or anything else - what you are really asking about is testing collaboration. But, &lt;strong&gt;you don&amp;rsquo;t need to recreate the entire environment in order to test collaboration with 100% coverage&lt;/strong&gt;.</source>
          <target state="translated">チャットアプリケーションをテストする場合でも、他の何かをテストする場合でも、実際に求めているのはコラボレーションのテストです。ただし、&lt;strong&gt;100％のカバレッジでコラボレーションをテストするために、環境全体を再作成する必要はありません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="86306d968b9f21296d4fc02aaef110dd7cc0138b" translate="yes" xml:space="preserve">
          <source>Whether you install an npm module, or just want to write your own code - you should do all of that in this file:</source>
          <target state="translated">npm モジュールをインストールするにしても、自分でコードを書くにしても、このファイルですべてを行うべきです。</target>
        </trans-unit>
        <trans-unit id="ad017d00c4fda6d44729823c48bc44ed65111e95" translate="yes" xml:space="preserve">
          <source>Which libraries Cypress includes to provide typical testing functionality</source>
          <target state="translated">典型的なテスト機能を提供するために、Cypressにはどのようなライブラリが含まれているか</target>
        </trans-unit>
        <trans-unit id="79a80de518cb64b399db0b9c36a3ea47734d4c5b" translate="yes" xml:space="preserve">
          <source>Which parts of the Test Runner to capture. This value is ignored for element screenshot captures. Valid values are &lt;code&gt;viewport&lt;/code&gt;, &lt;code&gt;fullPage&lt;/code&gt;, or &lt;code&gt;runner&lt;/code&gt;. When &lt;code&gt;viewport&lt;/code&gt;, the application under test is captured in the current viewport. When &lt;code&gt;fullPage&lt;/code&gt;, the application under test is captured in its entirety from top to bottom. When &lt;code&gt;runner&lt;/code&gt;, the entire browser viewport, including the Cypress Command Log, is captured. For screenshots automatically taken on test failure, capture is always coerced to &lt;code&gt;runner&lt;/code&gt;.</source>
          <target state="translated">キャプチャするテストランナーの部分。この値は、要素のスクリーンショットキャプチャでは無視されます。有効な値は、 &lt;code&gt;viewport&lt;/code&gt; 、 &lt;code&gt;fullPage&lt;/code&gt; 、または &lt;code&gt;runner&lt;/code&gt; です。場合 &lt;code&gt;viewport&lt;/code&gt; 、テスト対象アプリケーションは、現在のビューポート内に捕捉されます。ときに &lt;code&gt;fullPage&lt;/code&gt; 、テスト対象のアプリケーションが上から下にその全体が取り込まれます。 &lt;code&gt;runner&lt;/code&gt; の場合、サイプレスコマンドログを含むブラウザビューポート全体がキャプチャされます。テストの失敗時に自動的に取得されるスクリーンショットの場合、キャプチャは常に &lt;code&gt;runner&lt;/code&gt; に強制されます。</target>
        </trans-unit>
        <trans-unit id="2f650885846b4af47d67dada2754d97d36f026c2" translate="yes" xml:space="preserve">
          <source>Which parts of the Test Runner to capture. This value is ignored for element screenshot captures. Valid values are &lt;code&gt;viewport&lt;/code&gt;, &lt;code&gt;fullPage&lt;/code&gt;, or &lt;code&gt;runner&lt;/code&gt;. When &lt;code&gt;viewport&lt;/code&gt;, your application under test is captured in the current viewport. When &lt;code&gt;fullPage&lt;/code&gt;, your application under test is captured in its entirety from top to bottom. When &lt;code&gt;runner&lt;/code&gt;, the entire browser viewport, including the Cypress Command Log, is captured. For screenshots automatically taken on test failure, capture is always coerced to &lt;code&gt;runner&lt;/code&gt;.</source>
          <target state="translated">キャプチャするテストランナーの部分。この値は、要素のスクリーンショットキャプチャでは無視されます。有効な値は、 &lt;code&gt;viewport&lt;/code&gt; 、 &lt;code&gt;fullPage&lt;/code&gt; 、または &lt;code&gt;runner&lt;/code&gt; です。 &lt;code&gt;viewport&lt;/code&gt; の場合、テスト中のアプリケーションが現在のビューポートにキャプチャされます。 &lt;code&gt;fullPage&lt;/code&gt; の場合、テスト中のアプリケーション全体が上から下にキャプチャされます。 &lt;code&gt;runner&lt;/code&gt; の場合、サイプレスコマンドログを含むブラウザビューポート全体がキャプチャされます。テストが失敗したときに自動的に取得されるスクリーンショットの場合、キャプチャは常に &lt;code&gt;runner&lt;/code&gt; に強制されます。</target>
        </trans-unit>
        <trans-unit id="bd03555e1b8d55dc857d849d83c7454e88068532" translate="yes" xml:space="preserve">
          <source>Which parts of the screen to capture.</source>
          <target state="translated">画面のどの部分をキャプチャするか。</target>
        </trans-unit>
        <trans-unit id="e7cb006b71ab32c9adaee73ac1284ff25c1f0d24" translate="yes" xml:space="preserve">
          <source>Which, if any, elements to black out when taking the screenshot.</source>
          <target state="translated">スクリーンショットを撮るときにブラックアウトする要素があるとすれば、それはどれか。</target>
        </trans-unit>
        <trans-unit id="063f8835b94bcdd5840931fec11005087262155c" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;Cypress.config()&lt;/code&gt; changes configuration values through the entire spec file, using test configuration will only change configuration values during the suite or test where they are set. The values will then reset to the previous default values after the suite or test is complete.</source>
          <target state="translated">ながら &lt;code&gt;Cypress.config()&lt;/code&gt; は全体のスペックファイルを介して設定値を変更し、テストコンフィギュレーションを使用してのみ、それらが設定されているスイートまたはテスト中に設定値を変更します。スイートまたはテストが完了すると、値は以前のデフォルト値にリセットされます。</target>
        </trans-unit>
        <trans-unit id="a1729a8085c44b25fb561a990da61878f16ef97a" translate="yes" xml:space="preserve">
          <source>While Cypress allows to configure where your tests, fixtures, and support files are located, if you&amp;rsquo;re starting your first project, we recommend you use the above structure.</source>
          <target state="translated">サイプレスはテスト、フィクスチャ、サポートファイルの場所を構成できますが、最初のプロジェクトを開始する場合は、上記の構造を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8a93ce68c968dc7125affffacae501a5a4047874" translate="yes" xml:space="preserve">
          <source>While Mocha provides us a framework to structure our tests, Chai gives us the ability to easily write assertions. Chai gives us readable assertions with excellent error messages. Cypress extends this, fixes several common pitfalls, and wraps Chai&amp;rsquo;s DSL using &lt;a href=&quot;../core-concepts/introduction-to-cypress#Assertions&quot;&gt;subjects&lt;/a&gt; and the &lt;a href=&quot;../../api/commands/should&quot;&gt;&lt;code&gt;.should()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">Mochaはテストを構造化するためのフレームワークを提供しますが、Chaiはアサーションを簡単に作成する機能を提供します。Chaiは読みやすいアサーションと優れたエラーメッセージを提供します。サイプレスはこれを拡張し、いくつかの一般的な落とし穴を修正し、&lt;a href=&quot;../core-concepts/introduction-to-cypress#Assertions&quot;&gt;サブジェクト&lt;/a&gt;と&lt;a href=&quot;../../api/commands/should&quot;&gt; &lt;code&gt;.should()&lt;/code&gt; &lt;/a&gt;コマンドを使用してChaiのDSLをラップします。</target>
        </trans-unit>
        <trans-unit id="30c8700511492854c68a0c9d89a62e7cd250dfeb" translate="yes" xml:space="preserve">
          <source>While at first it may seem like these are strict limitations in Cypress - we think you will soon realize that many of these boundaries are actually &lt;strong&gt;good&lt;/strong&gt; to have. In a sense they prevent you from writing bad, slow, or flaky tests.</source>
          <target state="translated">最初はこれらがサイプレスの厳格な制限であるように見えるかもしれませんが、これらの境界の多くは実際に持っているのが&lt;strong&gt;良い&lt;/strong&gt;ことにすぐに気付くと思います。ある意味で、それらはあなたが悪い、遅い、または不安定なテストを書くのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="da74082104c885de8ab0dcfddc44918a9c3ac8bc" translate="yes" xml:space="preserve">
          <source>While most commands time out after a few seconds, other specialized commands that expect particular things to take much longer like &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; will naturally wait longer before timing out.</source>
          <target state="translated">ほとんどのコマンドは数秒後にタイムアウトしますが、&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; の&lt;/a&gt;ように特定の処理に長い時間がかかることを期待する他の特殊なコマンドは、タイムアウトするまで自然に長く待機します。</target>
        </trans-unit>
        <trans-unit id="dda4789187c7669b48726cb79d25043d3d3a6776" translate="yes" xml:space="preserve">
          <source>While outside the scope of this article, you could test a chat application using the following principles. Each one will incrementally introduce more collaboration:</source>
          <target state="translated">この記事の範囲外ですが、以下の原則を使用してチャットアプリケーションをテストすることができます。それぞれが、より多くのコラボレーションを段階的に導入していきます。</target>
        </trans-unit>
        <trans-unit id="2f7183b07b498319babd23533a6ce57f2cffff0f" translate="yes" xml:space="preserve">
          <source>While stubbing is great, it means that you don&amp;rsquo;t have the guarantees that these response payloads actually match what the server will send. However, there are still many valid ways to get around this:</source>
          <target state="translated">スタブはすばらしいですが、これらの応答ペイロードがサーバーが送信するものと実際に一致するという保証はありません。ただし、これを回避する有効な方法はまだたくさんあります。</target>
        </trans-unit>
        <trans-unit id="d7becc257e6e19366bd3a59650863a33e04432d8" translate="yes" xml:space="preserve">
          <source>While technically this runs fine - this is really excessive, and not performant.</source>
          <target state="translated">技術的には問題なく動作していますが、これは本当に過剰であり、性能がありません。</target>
        </trans-unit>
        <trans-unit id="8025589e3477db14232e01f31d204322d647cedc" translate="yes" xml:space="preserve">
          <source>While the above checks are super helpful at finding situations that would prevent your users from interacting with elements - sometimes they can get in the way!</source>
          <target state="translated">上記のチェックは、ユーザーが要素と対話できないような状況を見つけるのに非常に役立ちますが、時にはそれらが邪魔になることもあります。</target>
        </trans-unit>
        <trans-unit id="cb5eebab8c3c2d5c8ffd21b4c0c4165f87f0d345" translate="yes" xml:space="preserve">
          <source>While there are many new and powerful capabilities of Cypress - there are also important trade-offs that we&amp;rsquo;ve made in making this possible.</source>
          <target state="translated">サイプレスには多くの新しい強力な機能がありますが、これを可能にするために私たちが行った重要なトレードオフもあります。</target>
        </trans-unit>
        <trans-unit id="030af3b6b1a93102000e8ceb98520a6ecb539e94" translate="yes" xml:space="preserve">
          <source>While there&amp;rsquo;s nothing really &lt;em&gt;wrong&lt;/em&gt; with this approach, it does add a lot of complexity. You will be battling synchronizing the state between your server and your browser - and you&amp;rsquo;ll always need to set up / tear down this state before tests (which is slow).</source>
          <target state="translated">このアプローチには何も&lt;em&gt;問題&lt;/em&gt;はありませんが、かなり複雑になります。サーバーとブラウザの間で状態を同期することと戦います-そして、テストの前にこの状態を設定/破棄する必要があります（遅い）。</target>
        </trans-unit>
        <trans-unit id="c164f96b0645923ff8f534cf0d60d320e76ffe36" translate="yes" xml:space="preserve">
          <source>While there&amp;rsquo;s nothing wrong with writing out the full path to the Cypress executable each time, it&amp;rsquo;s much easier and clearer to add Cypress commands to the &lt;code&gt;scripts&lt;/code&gt; field in your &lt;code&gt;package.json&lt;/code&gt; file.</source>
          <target state="translated">サイプレス実行可能ファイルへのフルパスを毎回書き出すことは問題ありませんが、 &lt;code&gt;package.json&lt;/code&gt; ファイルの &lt;code&gt;scripts&lt;/code&gt; フィールドにサイプレスコマンドを追加する方がはるかに簡単で明確です。</target>
        </trans-unit>
        <trans-unit id="d38c60e0a1adf08ebf78c05479d58b5b5def173b" translate="yes" xml:space="preserve">
          <source>While this may take a bit more work than other options - it yields you the most amount of flexibility and the ability to manage configuration however you&amp;rsquo;d like.</source>
          <target state="translated">これは他のオプションよりも少し多くの作業を必要とする可能性があります-それはあなたにあなたが望むどのようにでもあなたに最大限の柔軟性と設定を管理する能力を与えます。</target>
        </trans-unit>
        <trans-unit id="318012b6b9386f9280c9fe773d40c9a281ab052f" translate="yes" xml:space="preserve">
          <source>While this new Chromium application passes our internal tests, it may crop up other regressions we aren&amp;rsquo;t aware of. If you&amp;rsquo;re experiencing different behavior in CI vs running locally in Chrome, this may be an indication of these.</source>
          <target state="translated">この新しいChromiumアプリケーションは内部テストに合格していますが、認識されていない他のリグレッションが発生する可能性があります。CIの動作とChromeでローカルに実行している動作が異なる場合は、これが原因である可能性があります。</target>
        </trans-unit>
        <trans-unit id="91e784b215a40267a4bf70b260acb26b69eda73d" translate="yes" xml:space="preserve">
          <source>While this works in practice, it&amp;rsquo;s often indicative of an anti-pattern. You almost never need to return both a promise and also invoke &lt;code&gt;cy&lt;/code&gt; commands.</source>
          <target state="translated">これは実際には機能しますが、しばしばアンチパターンを示しています。promiseを返す必要も、 &lt;code&gt;cy&lt;/code&gt; コマンドを呼び出す必要もほとんどありません。</target>
        </trans-unit>
        <trans-unit id="31babd36f691189fb28c03c015383588f9c122f6" translate="yes" xml:space="preserve">
          <source>While working in the Cypress Test Runner you can always restart / refresh while in the middle of a test. When that happens, code in an &lt;code&gt;after&lt;/code&gt; won&amp;rsquo;t execute.</source>
          <target state="translated">サイプレステストランナーでの作業中は、テストの最中にいつでも再起動/更新できます。これが発生すると、内のコード &lt;code&gt;after&lt;/code&gt; 実行されません。</target>
        </trans-unit>
        <trans-unit id="4f4bd02f81f747b5ee22bb7ac5b19bd3f551693f" translate="yes" xml:space="preserve">
          <source>While you certainly &lt;em&gt;can&lt;/em&gt; test an application that&amp;rsquo;s already deployed, that&amp;rsquo;s not really the &lt;strong&gt;sweet spot&lt;/strong&gt; of Cypress.</source>
          <target state="translated">すでに展開されているアプリケーションをテストすることは確かに&lt;em&gt;可能&lt;/em&gt;ですが、それはサイプレスの&lt;strong&gt;スイートスポット&lt;/strong&gt;ではありません。</target>
        </trans-unit>
        <trans-unit id="13b0a7459609b07974093e75a6727d3e1431dc35" translate="yes" xml:space="preserve">
          <source>While you&amp;rsquo;ll still receive all of the regular HTML / JS / CSS assets from your server and you&amp;rsquo;ll continue to &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; it in the same way - you can instead &lt;strong&gt;stub&lt;/strong&gt; the JSON responses coming from it.</source>
          <target state="translated">サーバーから通常のHTML / JS / CSSアセットのすべてを受信し、同じ方法で&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; を&lt;/a&gt;続行しますが、代わりにそこからのJSON応答を&lt;strong&gt;スタブ&lt;/strong&gt;できます。</target>
        </trans-unit>
        <trans-unit id="9531a11970da0f9e11c5c55654095ad4e88d319d" translate="yes" xml:space="preserve">
          <source>Whitelist Array</source>
          <target state="translated">ホワイトリスト配列</target>
        </trans-unit>
        <trans-unit id="3bd2035ad66f2e21de8e62528e9f8a4c52d2790a" translate="yes" xml:space="preserve">
          <source>Whitelist Function</source>
          <target state="translated">ホワイトリスト機能</target>
        </trans-unit>
        <trans-unit id="9b9dd85fbff2ef7f6674b6f8a8eb1c6dee6c03f0" translate="yes" xml:space="preserve">
          <source>Whitelist RegExp</source>
          <target state="translated">ホワイトリスト RegExp</target>
        </trans-unit>
        <trans-unit id="10f0b0527ee0ebc1a2ff9b229af041a4ed553e62" translate="yes" xml:space="preserve">
          <source>Whitelist String</source>
          <target state="translated">ホワイトリスト文字列</target>
        </trans-unit>
        <trans-unit id="cfc81ad963218eef675afa431ee14f7f4220cf38" translate="yes" xml:space="preserve">
          <source>Whitelist accepts:</source>
          <target state="translated">ホワイトリストは受け入れます。</target>
        </trans-unit>
        <trans-unit id="ee022eabf15b7cb10facff1a865cf41857bfcf02" translate="yes" xml:space="preserve">
          <source>Whitelisted &lt;code&gt;.coffee&lt;/code&gt;, &lt;code&gt;.scss&lt;/code&gt;, &lt;code&gt;.less&lt;/code&gt; XHR&amp;rsquo;s from displaying in the Command Log.</source>
          <target state="translated">ホワイトリストに &lt;code&gt;.coffee&lt;/code&gt; 、 &lt;code&gt;.scss&lt;/code&gt; 、 &lt;code&gt;.less&lt;/code&gt; XHRはコマンドログに表示されません。</target>
        </trans-unit>
        <trans-unit id="fbe879d21f706f263f7f4543c84ee96394c72498" translate="yes" xml:space="preserve">
          <source>Whitelisted &lt;code&gt;autoScrollingEnabled&lt;/code&gt; to be saved in &lt;code&gt;state.json&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2476&quot;&gt;#2476&lt;/a&gt;.</source>
          <target state="translated">ホワイトリストに &lt;code&gt;autoScrollingEnabled&lt;/code&gt; された &lt;code&gt;state.json&lt;/code&gt; に保存されます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2476&quot;&gt;＃2476を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="8257782e5b970997cb30b2e4555a9ed3b9ea92c1" translate="yes" xml:space="preserve">
          <source>Whitelisting assets which should never be stubbed has been improved. Now &lt;code&gt;.jsx&lt;/code&gt; templates pass-through correctly.</source>
          <target state="translated">スタブすべきではないアセットのホワイトリスト登録が改善されました。今 &lt;code&gt;.jsx&lt;/code&gt; のテンプレートは、パススルー正しく。</target>
        </trans-unit>
        <trans-unit id="b55223cfadcd781467bde322006948a79cad1967" translate="yes" xml:space="preserve">
          <source>Who uses Cypress?</source>
          <target state="translated">サイプレスを使っている人は?</target>
        </trans-unit>
        <trans-unit id="2f97207534c18993571e797428ce3b613fc3f5e9" translate="yes" xml:space="preserve">
          <source>Why Cypress?</source>
          <target state="translated">なぜサイプレスなのか?</target>
        </trans-unit>
        <trans-unit id="a2df07a78268820f1ef2bccd097800f342fb3474" translate="yes" xml:space="preserve">
          <source>Why are some commands &lt;em&gt;NOT&lt;/em&gt; retried?</source>
          <target state="translated">一部のコマンドが再試行され&lt;em&gt;ないの&lt;/em&gt;はなぜですか？</target>
        </trans-unit>
        <trans-unit id="e964dd0c8407ffaad4f71f8eaaffe744fcd57473" translate="yes" xml:space="preserve">
          <source>Why did you change the default test folder to be &lt;code&gt;cypress/integration&lt;/code&gt;.</source>
          <target state="translated">デフォルトのテストフォルダーを &lt;code&gt;cypress/integration&lt;/code&gt; に変更したのはなぜですか。</target>
        </trans-unit>
        <trans-unit id="5b59ddd63da244b2d99831c6b7dcc030b333865f" translate="yes" xml:space="preserve">
          <source>Why is it &lt;code&gt;Cypress.config&lt;/code&gt; and not &lt;code&gt;cy.config&lt;/code&gt;?</source>
          <target state="translated">なぜ &lt;code&gt;Cypress.config&lt;/code&gt; なく &lt;code&gt;cy.config&lt;/code&gt; ですか？</target>
        </trans-unit>
        <trans-unit id="f93853d95fb11e05aafe07bed844eb80d38bfb7e" translate="yes" xml:space="preserve">
          <source>Why is it &lt;code&gt;Cypress.env&lt;/code&gt; and not &lt;code&gt;cy.env&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;Cypress.env&lt;/code&gt; なく &lt;code&gt;cy.env&lt;/code&gt; なのはなぜですか？</target>
        </trans-unit>
        <trans-unit id="5dd054abbdd81e11c8a95eb1807f0e8f301fc9f4" translate="yes" xml:space="preserve">
          <source>Why should I manually set the event type?</source>
          <target state="translated">なぜ手動でイベントタイプを設定しなければならないのですか?</target>
        </trans-unit>
        <trans-unit id="13be4a8bdb3afec20836192dba27b9d40acb76b0" translate="yes" xml:space="preserve">
          <source>Why would I ever need to use environment variables?</source>
          <target state="translated">なぜ環境変数を使う必要があるのか?</target>
        </trans-unit>
        <trans-unit id="7293e54a3e598247b88fa56e517c94eb77af8a95" translate="yes" xml:space="preserve">
          <source>Why you did this pattern in unit tests:</source>
          <target state="translated">なぜこのパターンをユニットテストでやったのか</target>
        </trans-unit>
        <trans-unit id="020b1ee0de3bdee33ecaaf21ee0c1fc055674cbb" translate="yes" xml:space="preserve">
          <source>Why you rarely need to use variables with Cypress</source>
          <target state="translated">Cypressで変数を使う必要がほとんどない理由</target>
        </trans-unit>
        <trans-unit id="3ec6320fd4ac1f18d69ab1372ae6b042eb0b157b" translate="yes" xml:space="preserve">
          <source>Why you shouldn&amp;rsquo;t do this in Cypress:</source>
          <target state="translated">サイプレスでこれを行うべきではない理由：</target>
        </trans-unit>
        <trans-unit id="7a20d1252b03398a7abebb2301afbd9533fad8c6" translate="yes" xml:space="preserve">
          <source>Why? Because if the DOM is not going to change after the &lt;code&gt;load&lt;/code&gt; event occurs, then it can accurately represent a stable state of truth.</source>
          <target state="translated">どうして？ &lt;code&gt;load&lt;/code&gt; イベントの発生後にDOMが変更されない場合、DOMは安定した真実の状態を正確に表すことができるためです。</target>
        </trans-unit>
        <trans-unit id="26b6cf092e908b7236a5ab86844a3537cd596ca0" translate="yes" xml:space="preserve">
          <source>Why? Because if you refresh Cypress in the middle of the test - you will have built up partial state in the database, and your custom &lt;code&gt;cy.resetDb()&lt;/code&gt; function &lt;strong&gt;will never get called&lt;/strong&gt;.</source>
          <target state="translated">どうして？テストの途中でサイプレスを更新すると、データベースに部分的な状態が構築され、カスタム &lt;code&gt;cy.resetDb()&lt;/code&gt; 関数&lt;strong&gt;が呼び出されないため&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="c96bd2ed33a0cb5319c8aea2f43590508a6259f4" translate="yes" xml:space="preserve">
          <source>Width of viewport in pixels (must be a non-negative, finite number).</source>
          <target state="translated">ビューポートの幅をピクセル単位で表します(負でない有限数でなければなりません)。</target>
        </trans-unit>
        <trans-unit id="740612bbe8a8ba2edee8f0784e16158aa4bc693c" translate="yes" xml:space="preserve">
          <source>Width of viewport in pixels (must be between 20 and 3000).</source>
          <target state="translated">ビューポートの幅をピクセル単位で表示します(20~3000の間でなければなりません)。</target>
        </trans-unit>
        <trans-unit id="60b6ce8c2a0e9b895c30787ad491bbca447646e6" translate="yes" xml:space="preserve">
          <source>Width, Height</source>
          <target state="translated">幅、高さ</target>
        </trans-unit>
        <trans-unit id="9ad0c0b34826eda4fd9d451d9fa2a4bfded3e92e" translate="yes" xml:space="preserve">
          <source>Will scroll with the easing animation</source>
          <target state="translated">緩和アニメーションでスクロールします</target>
        </trans-unit>
        <trans-unit id="41dfc0a6c92707948578891c51d98c6443be63cc" translate="yes" xml:space="preserve">
          <source>Window</source>
          <target state="translated">Window</target>
        </trans-unit>
        <trans-unit id="47d4bf9243ba905bee32475e779fa3c24cc8bfc0" translate="yes" xml:space="preserve">
          <source>Window Alert</source>
          <target state="translated">ウィンドウアラート</target>
        </trans-unit>
        <trans-unit id="4e67225518a6bdc9b3c60f89fb71fb61b41bebec" translate="yes" xml:space="preserve">
          <source>Window Before Load</source>
          <target state="translated">ロード前のウィンドウ</target>
        </trans-unit>
        <trans-unit id="9e28dfada85ac4d23db1bd7f071223f7d31f4f44" translate="yes" xml:space="preserve">
          <source>Window Confirm</source>
          <target state="translated">ウィンドウの確認</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="1de9eae165f5a2d612a3006e5da76e592af596fa" translate="yes" xml:space="preserve">
          <source>Windows 32-bit (&lt;code&gt;?platform=win32&amp;amp;arch=ia32&lt;/code&gt;, available since &lt;a href=&quot;../references/changelog#3-3-0&quot;&gt;Cypress 3.3.0&lt;/a&gt;)</source>
          <target state="translated">Windows 32ビット（ &lt;code&gt;?platform=win32&amp;amp;arch=ia32&lt;/code&gt; 、&lt;a href=&quot;../references/changelog#3-3-0&quot;&gt;Cypress 3.3.0以降&lt;/a&gt;で使用可能）</target>
        </trans-unit>
        <trans-unit id="892eb30664e49b9647500f1dd3e791364d6b2aa2" translate="yes" xml:space="preserve">
          <source>Windows 64-bit (&lt;code&gt;?platform=win32&amp;amp;arch=x64&lt;/code&gt;)</source>
          <target state="translated">Windows 64ビット（ &lt;code&gt;?platform=win32&amp;amp;arch=x64&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d61ef8f1263745681f34613413bc836ec71a45e9" translate="yes" xml:space="preserve">
          <source>Windows is now supported. We have been running it successfully on EC2 and all of our example projects are also running in CI with AppVeyor. It is still super beta (we&amp;rsquo;re aware of a couple issues already) and we&amp;rsquo;re still updating our own infrastructure to manage and test it as comprehensively as we do OSX and Linux. We are only building a 32bit version of Windows, but will soon be building a 64bit as well. As of today the Windows binary is about 2x the size of what it will be. Unzipping takes a long time, we are sorry. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/74&quot;&gt;#74&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/444&quot;&gt;#444&lt;/a&gt;.</source>
          <target state="translated">Windowsがサポートされるようになりました。EC2で問題なく実行しており、サンプルプロジェクトもすべてAppVeyorを使用してCIで実行しています。これはまだスーパーベータ版であり（既にいくつかの問題を認識しています）、OSXやLinuxと同様に包括的なインフラストラクチャの更新と管理を行っています。Windowsの32ビットバージョンのみをビルドしていますが、64ビットバージョンも間もなくビルドされます。現在のところ、Windowsバイナリのサイズは、2倍になります。解凍に時間がかかります。申し訳ありません。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/74&quot;&gt;＃74&lt;/a&gt;と&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/444&quot;&gt;＃444を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="a9f75fb666eb7369907ad5e76c78b077e8c896d6" translate="yes" xml:space="preserve">
          <source>Windows now forcibly displays colors correctly to the terminal. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1127&quot;&gt;#1127&lt;/a&gt;.</source>
          <target state="translated">Windowsは、強制的に正しくターミナルに色を表示します。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1127&quot;&gt;＃1127を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="18dbec5b3d5c516886145bd094fb745eaa46277e" translate="yes" xml:space="preserve">
          <source>Windows users no longer exit with &lt;code&gt;EPIPE&lt;/code&gt; errors when running &lt;code&gt;cypress run&lt;/code&gt; in newer versions of Node. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1841&quot;&gt;#1841&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2044&quot;&gt;#2044&lt;/a&gt;.</source>
          <target state="translated">新しいバージョンのノードで &lt;code&gt;cypress run&lt;/code&gt; しているときに、Windowsユーザーが &lt;code&gt;EPIPE&lt;/code&gt; エラーで終了しなくなりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1841&quot;&gt;＃1841&lt;/a&gt;および&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2044&quot;&gt;＃2044を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="10913b05ebaea696a82a5dbee33c2f5a954297c5" translate="yes" xml:space="preserve">
          <source>Windows: &lt;code&gt;%APPDATA%\Cypress\cy\production\browsers&lt;/code&gt;</source>
          <target state="translated">Windows： &lt;code&gt;%APPDATA%\Cypress\cy\production\browsers&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f7cad752a1756c589a7d1751f79c9ae7054f5dc3" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#routeMatcher-RouteMatcher&quot;&gt;`RouteMatcher`&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#routeMatcher-RouteMatcher&quot;&gt;`RouteMatcher`&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8a04aa8c3ae5c49bbcf10fde083981080655183c" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;baseUrl&lt;/code&gt; set, Cypress loads main window in &lt;code&gt;baseUrl&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;baseUrl&lt;/code&gt; にのセット、サイプレスは、メインウィンドウをロードし &lt;code&gt;baseUrl&lt;/code&gt; に</target>
        </trans-unit>
        <trans-unit id="1057eb8064f1596749ce465d0fd981a5e756077f" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;cy.intercept()&lt;/code&gt;, you can:</source>
          <target state="translated">&lt;code&gt;cy.intercept()&lt;/code&gt; 、次のことができます。</target>
        </trans-unit>
        <trans-unit id="f252adea0947e77f3c0bcf89abdce4883ec73e1e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;operationName&lt;/code&gt; property:</source>
          <target state="translated">&lt;code&gt;operationName&lt;/code&gt; のプロパティ：</target>
        </trans-unit>
        <trans-unit id="81fc1d3a1ce3fa8065b60f2f7ee20e1857adf53a" translate="yes" xml:space="preserve">
          <source>With Cypress, by adding a &lt;a href=&quot;../../api/commands/wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt;, you can more easily pinpoint your specific problem. If the response never came back, you&amp;rsquo;ll receive an error like this:</source>
          <target state="translated">サイプレスでは、&lt;a href=&quot;../../api/commands/wait&quot;&gt; &lt;code&gt;cy.wait()&lt;/code&gt; を&lt;/a&gt;追加することにより、特定の問題をより簡単に特定できます。応答が返されない場合は、次のようなエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="324f62d776b36302fae0f158bb48f689eac27ff1" translate="yes" xml:space="preserve">
          <source>With Cypress, we automatically watch your &lt;code&gt;pluginsFile&lt;/code&gt; and any changes made will take effect immediately. We will read the file in and execute the exported function again.</source>
          <target state="translated">サイプレスでは、あなたの &lt;code&gt;pluginsFile&lt;/code&gt; を自動的に監視し、加えられた変更は直ちに有効になります。ファイルを読み込んで、エクスポートされた関数を再度実行します。</target>
        </trans-unit>
        <trans-unit id="2d635167b9ab9bbc62bb901a9237c2a0a66c7b58" translate="yes" xml:space="preserve">
          <source>With Cypress, you don&amp;rsquo;t have to assert to have a useful test. Even without assertions, a few lines of Cypress can ensure thousands of lines of code are working properly across the client and server!</source>
          <target state="translated">サイプレスでは、有用なテストを行うために断言する必要はありません。アサーションがなくても、数行のサイプレスで数千行のコードがクライアントとサーバー全体で適切に機能していることを確認できます！</target>
        </trans-unit>
        <trans-unit id="5cd018500995ac99144a5d8f06785abea09916d9" translate="yes" xml:space="preserve">
          <source>With Cypress, you have the ability to record your project&amp;rsquo;s tests.</source>
          <target state="translated">サイプレスでは、プロジェクトのテストを記録することができます。</target>
        </trans-unit>
        <trans-unit id="cecd5b7f531f2034a00137ec958ca364816ffa35" translate="yes" xml:space="preserve">
          <source>With Stubbing</source>
          <target state="translated">スタビング付き</target>
        </trans-unit>
        <trans-unit id="dbc0d8696651296fb73ba8533dddda5e407c08fc" translate="yes" xml:space="preserve">
          <source>With URL</source>
          <target state="translated">URL付き</target>
        </trans-unit>
        <trans-unit id="3b657f2578332777327f187492910d1d8a20dfe9" translate="yes" xml:space="preserve">
          <source>With a &lt;code&gt;StaticResponse&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;StaticResponse&lt;/code&gt; のオブジェクト</target>
        </trans-unit>
        <trans-unit id="e0bfa5a19660c9844839ce10a038ebb441cbdd86" translate="yes" xml:space="preserve">
          <source>With a custom selector strategy that favours classes, the selector value will be &lt;code&gt;'.number3'&lt;/code&gt;.</source>
          <target state="translated">クラスを &lt;code&gt;'.number3'&lt;/code&gt; カスタムセレクター戦略では、セレクター値は'.number3'になります。</target>
        </trans-unit>
        <trans-unit id="8c6a0a3be9b1c5a32e32c20d13cbc765264fee9c" translate="yes" xml:space="preserve">
          <source>With a duration estimation for each spec file of a test run, Cypress can distribute spec files to available CI resources in descending order of spec run duration. In this manner, the most time-consuming specs start first which minimizes the overall test run duration.</source>
          <target state="translated">テスト実行の各スペックファイルの継続時間を推定することで、Cypress はスペックファイルを利用可能な CI リソースに、スペック実行の継続時間の降順で配布することができます。この方法では、最も時間のかかるスペックが最初に開始されるため、全体的なテスト実行期間が最小化されます。</target>
        </trans-unit>
        <trans-unit id="e0067d946a05fc7cda30d22276dfde0df5a7f37b" translate="yes" xml:space="preserve">
          <source>With a fixture</source>
          <target state="translated">フィクスチャを使って</target>
        </trans-unit>
        <trans-unit id="b4731609fd5c1e3b879d8021b6237528a57477c3" translate="yes" xml:space="preserve">
          <source>With a string</source>
          <target state="translated">紐を使って</target>
        </trans-unit>
        <trans-unit id="d2e0f705744da6de9b9acfbb52cfebd2919d3c3f" translate="yes" xml:space="preserve">
          <source>With parallelization</source>
          <target state="translated">並列化と</target>
        </trans-unit>
        <trans-unit id="3659716464d76403703624f376f36f5100221ce5" translate="yes" xml:space="preserve">
          <source>With plugins, you can programmatically alter the resolved configuration and environment variables that come from &lt;code&gt;cypress.json&lt;/code&gt;, &lt;a href=&quot;../guides/environment-variables#Option-2-cypress-env-json&quot;&gt;&lt;code&gt;cypress.env.json&lt;/code&gt;&lt;/a&gt;, the CLI, or system environment variables.</source>
          <target state="translated">プラグインを使用すると、 &lt;code&gt;cypress.json&lt;/code&gt; 、&lt;a href=&quot;../guides/environment-variables#Option-2-cypress-env-json&quot;&gt; &lt;code&gt;cypress.env.json&lt;/code&gt; &lt;/a&gt;、CLI、またはシステム環境変数からの解決済みの構成変数と環境変数をプログラムで変更できます。</target>
        </trans-unit>
        <trans-unit id="8bbe6ccbd10d31aa0e0e3a7d35d78505d05e189c" translate="yes" xml:space="preserve">
          <source>With that said - you still have the option to have it &lt;strong&gt;both ways&lt;/strong&gt;.</source>
          <target state="translated">そうは言っても、あなたはまだそれを&lt;strong&gt;両方の方法で&lt;/strong&gt;持つオプションがあり&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="43e92d93953a6c6776e1a2c3bf42eb28eaa6259b" translate="yes" xml:space="preserve">
          <source>With that said, as long as you are aware of the potential pitfalls with control flow, it is possible to do this in Cypress!</source>
          <target state="translated">とはいえ、コントロールフローの潜在的な落とし穴を認識していれば、サイプレスでも可能です</target>
        </trans-unit>
        <trans-unit id="aa2d4bf98dcaae706370c1b4c5e896b548d8d92b" translate="yes" xml:space="preserve">
          <source>With that said, except in the most unusual and rare circumstances, you can still test most application behavior without opening multiple browsers at the same time.</source>
          <target state="translated">そうは言っても、最も異常で稀な状況を除いては、複数のブラウザを同時に開かなくても、ほとんどのアプリケーションの動作をテストすることができます。</target>
        </trans-unit>
        <trans-unit id="7186fa0b6472e23066ddb57d7d36b1e0306931a9" translate="yes" xml:space="preserve">
          <source>With the default selector strategy, the selector value will be &lt;code&gt;'#bingo'&lt;/code&gt; because IDs have priority over classes.</source>
          <target state="translated">デフォルトのセレクター戦略では、IDがクラスよりも優先されるため、セレクター値は &lt;code&gt;'#bingo'&lt;/code&gt; なります。</target>
        </trans-unit>
        <trans-unit id="5b5f9bd0a40917819f7a3803644b0e1fe5baf4cd" translate="yes" xml:space="preserve">
          <source>With this option enabled - Cypress will search through the response streams coming from your server on &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; files and replace code that &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/886#issuecomment-364779884&quot;&gt;matches the following patterns.&lt;/a&gt;</source>
          <target state="translated">このオプションを有効にすると、サイプレスは &lt;code&gt;.html&lt;/code&gt; および &lt;code&gt;.js&lt;/code&gt; ファイルでサーバーからの応答ストリームを検索し&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/886#issuecomment-364779884&quot;&gt;、次のパターンに一致する&lt;/a&gt;コードを置き換えます。</target>
        </trans-unit>
        <trans-unit id="c6205072bdbddad8d3ef5cfb3e195b5d2c6f3556" translate="yes" xml:space="preserve">
          <source>Within</source>
          <target state="translated">Within</target>
        </trans-unit>
        <trans-unit id="f5f70cb66d60ea6f53ef4cf2198b72d1af04ae68" translate="yes" xml:space="preserve">
          <source>Within &lt;a href=&quot;../guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;, or from your local computer&amp;rsquo;s terminal, pass the displayed &lt;a href=&quot;#Identification&quot;&gt;Record Key&lt;/a&gt; while running the &lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;a href=&quot;../guides/continuous-integration&quot;&gt;継続的インテグレーション&lt;/a&gt;内、またはローカルコンピューターのターミナルから、&lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt; &lt;code&gt;cypress run&lt;/code&gt; &lt;/a&gt;コマンドの実行中に表示された&lt;a href=&quot;#Identification&quot;&gt;レコードキー&lt;/a&gt;を渡します。</target>
        </trans-unit>
        <trans-unit id="b88411b1ac3655bb73b98154aea8100ca872d0a5" translate="yes" xml:space="preserve">
          <source>Within Cypress, you have the ability to choose whether to stub responses or allow them to actually hit your server. You can also mix and match within the same test by choosing to stub certain requests, while allowing others to hit your server.</source>
          <target state="translated">Cypress の中では、レスポンスをスタブするか、実際にサーバーにヒットさせるかを選択することができます。また、同じテスト内で特定のリクエストをスタブにして、他のリクエストをサーバーにヒットさせることもできます。</target>
        </trans-unit>
        <trans-unit id="bf0016aaa34012562c39a3599899ce838be61180" translate="yes" xml:space="preserve">
          <source>Within a few milliseconds after the DOM updates, &lt;code&gt;cy.get()&lt;/code&gt; finds two elements and the &lt;code&gt;should('have.length', 2)&lt;/code&gt; assertion passes</source>
          <target state="translated">DOMが更新されてから数ミリ秒以内に、 &lt;code&gt;cy.get()&lt;/code&gt; は2つの要素を見つけ、 &lt;code&gt;should('have.length', 2)&lt;/code&gt; アサーションが通過します</target>
        </trans-unit>
        <trans-unit id="e70935eb04a39039416421f2fc50df146e2bb5f6" translate="yes" xml:space="preserve">
          <source>Within the context of the &lt;a href=&quot;../../api/commands/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; function, the &lt;code&gt;debugger&lt;/code&gt; is called, halting the browser and calling focus to the Developer Tools.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; &lt;/a&gt;関数のコンテキスト内で、 &lt;code&gt;debugger&lt;/code&gt; が呼び出され、ブラウザーが停止し、開発者ツールにフォーカスが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2d7483d7edd2af13bb6dc2b1f51a23f8500b884d" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;baseUrl&lt;/code&gt; set, Cypress loads main window in &lt;code&gt;localhost&lt;/code&gt; + random port</source>
          <target state="translated">&lt;code&gt;baseUrl&lt;/code&gt; が設定されていない場合、サイプレスは &lt;code&gt;localhost&lt;/code&gt; ウィンドウとランダムポートにメインウィンドウをロードします</target>
        </trans-unit>
        <trans-unit id="d2f5291a32efdfed22811452bf2aa5f989782742" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;operationName&lt;/code&gt; property:</source>
          <target state="translated">&lt;code&gt;operationName&lt;/code&gt; プロパティなし：</target>
        </trans-unit>
        <trans-unit id="906a6eb7d04be89d6d2b3daa4e326d26ddb2fac7" translate="yes" xml:space="preserve">
          <source>Without &lt;strong&gt;retry-ability&lt;/strong&gt;, assertions would randomly fail. This would lead to flaky, inconsistent results. This is also why we cannot use new JS features like &lt;code&gt;async / await&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;再試行機能が&lt;/strong&gt;ないと、アサーションはランダムに失敗します。これは、不安定で一貫性のない結果につながります。これが、 &lt;code&gt;async / await&lt;/code&gt; などの新しいJS機能を使用できない理由でもあります。</target>
        </trans-unit>
        <trans-unit id="acb1dc80e7632f9b47496cf67df2c872ca70f178" translate="yes" xml:space="preserve">
          <source>Without Stubbing</source>
          <target state="translated">スタブなし</target>
        </trans-unit>
        <trans-unit id="2a4a1b0491c7a6e9d7a59d6132c3af9f757e57ca" translate="yes" xml:space="preserve">
          <source>Without a single explicit assertion, there are dozens of ways this test can fail! Here&amp;rsquo;s a few:</source>
          <target state="translated">明示的なアサーションが1つもない場合、このテストが失敗する可能性のある方法は多数あります。ここにいくつかあります：</target>
        </trans-unit>
        <trans-unit id="a1219481711846711eed3cfae042f29750086a95" translate="yes" xml:space="preserve">
          <source>Without parallelization</source>
          <target state="translated">並列化なし</target>
        </trans-unit>
        <trans-unit id="44db76fdf7269cbcb7a11a9b09f77cbb96044bec" translate="yes" xml:space="preserve">
          <source>Without the explicit selector the subject would change to be the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;. Using the explicit selector ensures that chained commands will have the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; as the subject.</source>
          <target state="translated">明示的なセレクターがない場合、サブジェクトは &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; に変更されます。明示的なセレクターを使用することで、チェーンされたコマンドが &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; を主語として持つようになります。</target>
        </trans-unit>
        <trans-unit id="973948319a04f7243a7ee0f7f79cf360c46cbdae" translate="yes" xml:space="preserve">
          <source>WordPress ReactJS Boilerplate</source>
          <target state="translated">WordPress ReactJS ボイラープレート</target>
        </trans-unit>
        <trans-unit id="97de39ae118b23bf5c7480efba0263d4b3523884" translate="yes" xml:space="preserve">
          <source>Workarounds</source>
          <target state="translated">Workarounds</target>
        </trans-unit>
        <trans-unit id="2cd0a2df375a60b44c976c8a4db7d194060d4461" translate="yes" xml:space="preserve">
          <source>Workarounds for the lack of a &lt;code&gt;cy.hover()&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;cy.hover()&lt;/code&gt; コマンドがないための回避策。</target>
        </trans-unit>
        <trans-unit id="a029ad208ecbaff772e93e32f766a12214b46a9a" translate="yes" xml:space="preserve">
          <source>Working with (or without!) your authentication mechanism</source>
          <target state="translated">認証メカニズムを使用する(または使用しない)場合</target>
        </trans-unit>
        <trans-unit id="a58cf4400fc9e0f2d0922b7223946562b1482781" translate="yes" xml:space="preserve">
          <source>Worst - too generic, no context.</source>
          <target state="translated">最悪-あまりにも一般的で、文脈がない。</target>
        </trans-unit>
        <trans-unit id="e2b27d10698f477cb5d3abdca308a747ef002771" translate="yes" xml:space="preserve">
          <source>Worth noting is that this test transitioned across two different pages.</source>
          <target state="translated">注目すべきは、このテストが2つの異なるページにまたがって移行したことです。</target>
        </trans-unit>
        <trans-unit id="c3447e7954fa5698ae957a33210094d617b1dc00" translate="yes" xml:space="preserve">
          <source>Wrap</source>
          <target state="translated">Wrap</target>
        </trans-unit>
        <trans-unit id="815e184ef7f08812dabb069624864d3ce9cad673" translate="yes" xml:space="preserve">
          <source>Wrap a method in a spy in order to record calls to and arguments of the function.</source>
          <target state="translated">関数の呼び出しと引数を記録するために、メソッドをスパイでラップします。</target>
        </trans-unit>
        <trans-unit id="d0e74f074efa84f7e7f076c9a2ad80f855245635" translate="yes" xml:space="preserve">
          <source>Wrap a method with a spy</source>
          <target state="translated">メソッドをスパイでラップする</target>
        </trans-unit>
        <trans-unit id="caf5dcb3f0a5d5cc662149fa11623a73d286dea4" translate="yes" xml:space="preserve">
          <source>Wrap elements to continue executing commands</source>
          <target state="translated">コマンドを実行し続けるための要素をラップする</target>
        </trans-unit>
        <trans-unit id="6aeeb5d1410040f2fa5f8d1c096cc6a1c8f97152" translate="yes" xml:space="preserve">
          <source>Write JSON to a file</source>
          <target state="translated">ファイルにJSONを書き込む</target>
        </trans-unit>
        <trans-unit id="5bfcf55a9ad2e92d1a46f472dec4bad34f51236c" translate="yes" xml:space="preserve">
          <source>Write a &lt;em&gt;real&lt;/em&gt; test</source>
          <target state="translated">&lt;em&gt;実際の&lt;/em&gt;テストを書く</target>
        </trans-unit>
        <trans-unit id="2dd9609ec0161b8d632b04b5aa5502b3d84bd8e4" translate="yes" xml:space="preserve">
          <source>Write a simple test</source>
          <target state="translated">簡単なテストを書く</target>
        </trans-unit>
        <trans-unit id="a08f85691e5616827fd376baa49e87458bc7f09d" translate="yes" xml:space="preserve">
          <source>Write a single e2e test without stubs, and then stub the rest</source>
          <target state="translated">スタブなしで単一の e2e テストを書き、残りの部分をスタブ化します。</target>
        </trans-unit>
        <trans-unit id="cd6d5754e026150b391ab35cb939286835acd624" translate="yes" xml:space="preserve">
          <source>Write command log to the terminal</source>
          <target state="translated">コマンドログをターミナルに書き込む</target>
        </trans-unit>
        <trans-unit id="22f196c7cb125c4b03f179cb32f7c2aaf4cf6d69" translate="yes" xml:space="preserve">
          <source>Write our first failing test.</source>
          <target state="translated">最初に失敗したテストを書いて</target>
        </trans-unit>
        <trans-unit id="8e04273f82e5c422931875249934b749d7eac91c" translate="yes" xml:space="preserve">
          <source>Write our first passing test.</source>
          <target state="translated">最初の合格体験記を書こう</target>
        </trans-unit>
        <trans-unit id="7f49208ca7d9f2aa45c31fa44dcd53e09c9d2ea8" translate="yes" xml:space="preserve">
          <source>Write response data to a fixture file</source>
          <target state="translated">フィクスチャファイルにレスポンスデータを書き込む</target>
        </trans-unit>
        <trans-unit id="a44bf03a5e55df5413891c44c1fac78a52233070" translate="yes" xml:space="preserve">
          <source>Write some text to a &lt;code&gt;txt&lt;/code&gt; file</source>
          <target state="translated">いくつかのテキスト書く &lt;code&gt;txt&lt;/code&gt; ファイルを</target>
        </trans-unit>
        <trans-unit id="391b1a9608423cb9c4d16a7886b9e07fab1acb00" translate="yes" xml:space="preserve">
          <source>Write tests</source>
          <target state="translated">テストを書く</target>
        </trans-unit>
        <trans-unit id="cff899899ede8d6c533f3b1b8b0d7c3492723fc4" translate="yes" xml:space="preserve">
          <source>Write that JavaScript file to disk (example: &lt;code&gt;/Users/foo/tmp/spec.js&lt;/code&gt;)</source>
          <target state="translated">そのJavaScriptファイルをディスクに書き込みます（例： &lt;code&gt;/Users/foo/tmp/spec.js&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="5719aaf7992634642b1b7112e30c7134e764302f" translate="yes" xml:space="preserve">
          <source>Write to a file to create a fixture from response body</source>
          <target state="translated">レスポンスボディからフィクスチャを作成するためのファイルへの書き込み</target>
        </trans-unit>
        <trans-unit id="cab3cbe1fed5623141fafd3b38cf9a06822dd75f" translate="yes" xml:space="preserve">
          <source>Write to a file with the specified contents.</source>
          <target state="translated">指定した内容のファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="a600dde27ac1cbb55dea0b6a4509220f889cf37a" translate="yes" xml:space="preserve">
          <source>Write your configuration in &lt;code&gt;yml&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yml&lt;/code&gt; で設定を書きます</target>
        </trans-unit>
        <trans-unit id="b3bbf365324121f0ac4816ebcc17d68fa60e28ae" translate="yes" xml:space="preserve">
          <source>Write your own &lt;code&gt;chai&lt;/code&gt; assertions as &lt;a href=&quot;http://chaijs.com/api/plugins/&quot;&gt;documented here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://chaijs.com/api/plugins/&quot;&gt;ここに記載されて&lt;/a&gt;いるように、独自の &lt;code&gt;chai&lt;/code&gt; アサーションを記述します。</target>
        </trans-unit>
        <trans-unit id="57e9c65100c0cc4da8b086c12796529e5b38c06c" translate="yes" xml:space="preserve">
          <source>Write your test code in ClojureScript.</source>
          <target state="translated">ClojureScriptでテストコードを書きます。</target>
        </trans-unit>
        <trans-unit id="6ab72b29ea2983720d1bfac24c6424cb6657e4dd" translate="yes" xml:space="preserve">
          <source>Writing Assertions</source>
          <target state="translated">アサーションの書き方</target>
        </trans-unit>
        <trans-unit id="ba0e9312c8cb9cd6ef1a61e5d88575514a7ba12b" translate="yes" xml:space="preserve">
          <source>Writing Tests</source>
          <target state="translated">筆記試験</target>
        </trans-unit>
        <trans-unit id="9d497ec47a0985dbe1ace5d6eae1d0ddbb898606" translate="yes" xml:space="preserve">
          <source>Writing Your First Test</source>
          <target state="translated">最初のテストの書き方</target>
        </trans-unit>
        <trans-unit id="510a261ec2843f68a4816e4735bf0f01c466c291" translate="yes" xml:space="preserve">
          <source>Writing a Plugin</source>
          <target state="translated">プラグインを書く</target>
        </trans-unit>
        <trans-unit id="05db46358fd92c5aad6d2c6528572f6a3a6fe318" translate="yes" xml:space="preserve">
          <source>Writing an assertion</source>
          <target state="translated">アサーションの書き方</target>
        </trans-unit>
        <trans-unit id="faec91882204c852d12e33358973060973700fdf" translate="yes" xml:space="preserve">
          <source>Writing and Organizing Tests</source>
          <target state="translated">テストの記述と整理</target>
        </trans-unit>
        <trans-unit id="55c5c7c7f6dc652f5ade97c4e0d3f0a7cba0e2ec" translate="yes" xml:space="preserve">
          <source>Writing integration tests is not the same as unit tests</source>
          <target state="translated">統合テストを書くことはユニットテストと同じではない</target>
        </trans-unit>
        <trans-unit id="ab2816d4bb9622be7220e5163963f6a9c487ee4d" translate="yes" xml:space="preserve">
          <source>Writing tests</source>
          <target state="translated">筆記試験</target>
        </trans-unit>
        <trans-unit id="8bd291d7c8fc247b785a2fb2b82d1c2a79454331" translate="yes" xml:space="preserve">
          <source>XHR URL is now decoded to make assertions easier. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/75&quot;&gt;#75&lt;/a&gt;.</source>
          <target state="translated">XHRのURLがデコードされ、アサーションが簡単になりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/75&quot;&gt;＃75を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="948e5c4f5e072cc35e1ae48bf50f57c093a6e15d" translate="yes" xml:space="preserve">
          <source>XHR handling has been rewritten to be much more flexible, extensible, and future-proof.</source>
          <target state="translated">XHR の取り扱いは、はるかに柔軟性、拡張性、将来性を考慮して書き換えられました。</target>
        </trans-unit>
        <trans-unit id="ef873078fda8e8bc78ce2414cf867d501e93e50b" translate="yes" xml:space="preserve">
          <source>XHR requests for &lt;code&gt;.svg&lt;/code&gt; files are no longer shown in the Command Log by default. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/131&quot;&gt;#131&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.svg&lt;/code&gt; ファイルに対するXHRリクエストは、デフォルトではコマンドログに表示されなくなりました。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/131&quot;&gt;＃131&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="663ae6f07edc2db763c485b93a365cc398937f83" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s from your application are no longer forcefully aborted between tests.</source>
          <target state="translated">アプリケーションからのXHRは、テスト間で強制的に打ち切られなくなりました。</target>
        </trans-unit>
        <trans-unit id="2e6b301701bcc969d7bd210e9e0c093363ad7666" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s now include an &lt;code&gt;Initiator&lt;/code&gt; stack regardless of whether they&amp;rsquo;re stubbed. The &lt;code&gt;Initiator&lt;/code&gt; stack includes the stack which caused the XHR to be created and sent.</source>
          <target state="translated">XHR には、スタブされているかどうかに関係なく、 &lt;code&gt;Initiator&lt;/code&gt; スタックが含まれるようになりました。 &lt;code&gt;Initiator&lt;/code&gt; スタックは、XHRを作成して送信される原因となったスタックを含みます。</target>
        </trans-unit>
        <trans-unit id="d0aefc34be6eecce54750d8cbc361aec46085c48" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s now snapshot twice - when the request is made and when the response is returned.</source>
          <target state="translated">XHRのスナップショットが2回になりました-要求が行われたときと応答が返されたとき。</target>
        </trans-unit>
        <trans-unit id="133f6f4281ac57439b78e67d0cdc25582668ce19" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s that display &lt;code&gt;(XHR STUB)&lt;/code&gt; in the Command Log have been stubbed and their response, status, headers, and delay have been controlled by your matching &lt;code&gt;cy.route()&lt;/code&gt;.</source>
          <target state="translated">コマンドログに &lt;code&gt;(XHR STUB)&lt;/code&gt; を表示するXHRはスタブ化され、それらの応答、ステータス、ヘッダー、および遅延は、一致する &lt;code&gt;cy.route()&lt;/code&gt; によって制御されています。</target>
        </trans-unit>
        <trans-unit id="3c7ad4fc93d4ee54a5bb8a0c2dc774f349135f16" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s that display &lt;code&gt;(XHR)&lt;/code&gt; in the Command Log have &lt;em&gt;not&lt;/em&gt; been stubbed and were passed directly through to a server.</source>
          <target state="translated">コマンドログに表示される &lt;code&gt;(XHR)&lt;/code&gt; はスタブ化されて&lt;em&gt;おらず&lt;/em&gt;、サーバーに直接渡されました。</target>
        </trans-unit>
        <trans-unit id="20ca621c7a5e5fc4d60e985951e1e2743133d289" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s which are aborted no longer cause an &lt;code&gt;INVALID_STATE_ERR&lt;/code&gt; to be thrown. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/62&quot;&gt;#62&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/34&quot;&gt;#34&lt;/a&gt;.</source>
          <target state="translated">中止されたXHRが &lt;code&gt;INVALID_STATE_ERR&lt;/code&gt; をスローすることはなくなりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/62&quot;&gt;＃62&lt;/a&gt;と&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/34&quot;&gt;＃34を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="896067df2d97b6f3a5ba58b06798fd7757f700ee" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s which have their &lt;code&gt;onload&lt;/code&gt; handler replaced after &lt;code&gt;XHR#send&lt;/code&gt; is called is now properly accounted for. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/143&quot;&gt;#143&lt;/a&gt;.</source>
          <target state="translated">XHR &lt;code&gt;XHR#send&lt;/code&gt; が呼び出された後に &lt;code&gt;onload&lt;/code&gt; ハンドラーが置き換えられたXHRが適切に考慮されるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/143&quot;&gt;＃143を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="743b51390e3cb9baef6667ca98b59b7d162859f4" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s will continue to work correctly even &lt;em&gt;after&lt;/em&gt; a test ends. In previous versions, due to replacing the entire XHR object, your application would not work correctly after a test ended. This prevented you from &amp;ldquo;navigating around&amp;rdquo; and working with your app after the tests end.</source>
          <target state="translated">XHRは、テストが終了した&lt;em&gt;後&lt;/em&gt;でも正しく機能し続けます。以前のバージョンでは、XHRオブジェクト全体を置き換えるため、テストが終了した後、アプリケーションは正しく機能しませんでした。これにより、テストの終了後に「移動」してアプリを操作することができなくなりました。</target>
        </trans-unit>
        <trans-unit id="f4f89ce0456ef298d7e8ec18b48711ea69b3e457" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s will no longer be ended early and display no status as if there was no response. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/63&quot;&gt;#63&lt;/a&gt;.</source>
          <target state="translated">XHRは早期終了せず、応答がないかのようにステータスを表示しません。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/63&quot;&gt;＃63を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="e37300eec1d33692909be126a13d42a375e42b89" translate="yes" xml:space="preserve">
          <source>XHRs that display &lt;code&gt;(XHR STUB)&lt;/code&gt; in the Command Log have been stubbed and their response, status, headers, and delay have been controlled by your matching &lt;code&gt;cy.route()&lt;/code&gt;.</source>
          <target state="translated">コマンドログに表示される &lt;code&gt;(XHR STUB)&lt;/code&gt; はスタブ化されており、それらの応答、ステータス、ヘッダー、および遅延は、一致する &lt;code&gt;cy.route()&lt;/code&gt; によって制御されています。</target>
        </trans-unit>
        <trans-unit id="204f0cb1408889b2a27a2064525940e4a5915a4b" translate="yes" xml:space="preserve">
          <source>XHRs that display &lt;code&gt;(XHR)&lt;/code&gt; in the Command Log have &lt;em&gt;not&lt;/em&gt; been stubbed and were passed directly through to a server.</source>
          <target state="translated">コマンドログに表示される &lt;code&gt;(XHR)&lt;/code&gt; はスタブ化されて&lt;em&gt;おらず&lt;/em&gt;、サーバーに直接渡されています。</target>
        </trans-unit>
        <trans-unit id="ffbcb202b09db426bae56cf2ffb88f18594f2258" translate="yes" xml:space="preserve">
          <source>YAML</source>
          <target state="translated">YAML</target>
        </trans-unit>
        <trans-unit id="ba1d290fe051c54f76c2d9bc9b616a74a98d0f68" translate="yes" xml:space="preserve">
          <source>Yes. You can do that and much more.</source>
          <target state="translated">はい、それ以上のことができます。</target>
        </trans-unit>
        <trans-unit id="8c7d6cec1a113eff5e749d252aff4bf832876c90" translate="yes" xml:space="preserve">
          <source>Yield the elements that do not have class &lt;code&gt;active&lt;/code&gt;</source>
          <target state="translated">クラスが &lt;code&gt;active&lt;/code&gt; ない要素を生成します</target>
        </trans-unit>
        <trans-unit id="69ae77c7512a652e2918cd1f0757f42b91b8dfda" translate="yes" xml:space="preserve">
          <source>Yield the object passed into &lt;code&gt;.wrap()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.wrap()&lt;/code&gt; に渡されたオブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="ba4333a9fa315b8ff9110c4f259d82398439326c" translate="yes" xml:space="preserve">
          <source>Yield the object passed into &lt;code&gt;.wrap()&lt;/code&gt;. If the object is a promise, yield its resolved value.</source>
          <target state="translated">&lt;code&gt;.wrap()&lt;/code&gt; に渡されたオブジェクトを生成します。オブジェクトがpromiseの場合は、解決された値を生成します。</target>
        </trans-unit>
        <trans-unit id="542815938eae61d84fdfe3b4fc49fd92c34beb56" translate="yes" xml:space="preserve">
          <source>Yield the remote window object</source>
          <target state="translated">リモートウィンドウオブジェクトを降伏させる</target>
        </trans-unit>
        <trans-unit id="5a12ea0e0de8f020b440dba245a0b3c4be9d09a5" translate="yes" xml:space="preserve">
          <source>Yielded (what was returned by this command)</source>
          <target state="translated">Yielded (このコマンドで返されたもの)</target>
        </trans-unit>
        <trans-unit id="738a2b66281e5ca4973cbceebc923d1996e03dad" translate="yes" xml:space="preserve">
          <source>Yields</source>
          <target state="translated">Yields</target>
        </trans-unit>
        <trans-unit id="462c5e6929436be950f4b6f269bbbb0bff05188a" translate="yes" xml:space="preserve">
          <source>You &lt;strong&gt;can&lt;/strong&gt;&lt;a href=&quot;../../api/commands/visit&quot;&gt;visit&lt;/a&gt; different subdomains in the same test.</source>
          <target state="translated">あなたは&lt;strong&gt;できる&lt;/strong&gt;&lt;a href=&quot;../../api/commands/visit&quot;&gt;訪問&lt;/a&gt;同じテストで異なるサブドメインを。</target>
        </trans-unit>
        <trans-unit id="499c99de6a195378ff0c8dde918219add5664a04" translate="yes" xml:space="preserve">
          <source>You &lt;strong&gt;can&lt;/strong&gt;&lt;a href=&quot;../../api/commands/visit&quot;&gt;visit&lt;/a&gt; different superdomains in &lt;strong&gt;different&lt;/strong&gt; tests.</source>
          <target state="translated">あなたは&lt;strong&gt;できる&lt;/strong&gt;&lt;a href=&quot;../../api/commands/visit&quot;&gt;訪問&lt;/a&gt;で異なるスーパードメイン&lt;strong&gt;の異なる&lt;/strong&gt;テストを。</target>
        </trans-unit>
        <trans-unit id="9850ddbfd7faa1d9b87b1e04ba053680f689e1d4" translate="yes" xml:space="preserve">
          <source>You &lt;strong&gt;cannot&lt;/strong&gt;&lt;a href=&quot;../../api/commands/visit&quot;&gt;visit&lt;/a&gt; two different superdomains in the same test.</source>
          <target state="translated">同じテストで2つの異なるスーパードメインに&lt;a href=&quot;../../api/commands/visit&quot;&gt;アクセス&lt;/a&gt;する&lt;strong&gt;ことはできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ba9e72e81a428fe6d349b8ef505e1ad5f33af85a" translate="yes" xml:space="preserve">
          <source>You almost &lt;strong&gt;never&lt;/strong&gt; need to wait for an arbitrary period of time. There are always better ways to express this in Cypress.</source>
          <target state="translated">任意の時間待機する必要はほとんどあり&lt;strong&gt;ません&lt;/strong&gt;。これをサイプレスで表現するより良い方法は常にあります。</target>
        </trans-unit>
        <trans-unit id="d8fea4ef67601902621408e89ad55a3b3e9e8d0e" translate="yes" xml:space="preserve">
          <source>You are a developer that has forked our codebase and do not have access to run our API locally. Please read more about this in our &lt;a href=&quot;https://on.cypress.io/contributing&quot;&gt;contributing doc&lt;/a&gt;.</source>
          <target state="translated">あなたは私たちのコードベースを分岐し、APIをローカルで実行するアクセス権を持っていない開発者です。詳細については、&lt;a href=&quot;https://on.cypress.io/contributing&quot;&gt;寄稿のドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="a07010ed6d0b79d84e123ef7cebbd3d1f5665e75" translate="yes" xml:space="preserve">
          <source>You are attempting to pass the &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag to a run that was completed over 24 hours ago.</source>
          <target state="translated">24時間以上前に完了した実行に&lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;フラグを渡そうとしています。</target>
        </trans-unit>
        <trans-unit id="0a5eaeeeaffb9cde25c1cea6692bd14c95df196d" translate="yes" xml:space="preserve">
          <source>You are testing a page that uses Single sign-on (SSO). In this case your web server is likely redirecting you between superdomains, so you receive this error message. You can likely get around this redirect problem by using &lt;a href=&quot;../../api/commands/request&quot;&gt;&lt;code&gt;cy.request()&lt;/code&gt;&lt;/a&gt; to manually handle the session yourself.</source>
          <target state="translated">シングルサインオン（SSO）を使用するページをテストしています。この場合、Webサーバーがスーパードメイン間でリダイレクトしている可能性が高いため、このエラーメッセージが表示されます。&lt;a href=&quot;../../api/commands/request&quot;&gt; &lt;code&gt;cy.request()&lt;/code&gt; &lt;/a&gt;を使用して手動でセッションを手動で処理することにより、このリダイレクトの問題を回避できる可能性があります。</target>
        </trans-unit>
        <trans-unit id="5e20b1e7029e04bd7c212b7346c26fecd36d0b70" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../../api/commands/stub&quot;&gt;stub&lt;/a&gt; everything and simulate every single scenario. Chat messages, offline messages, connections, reconnections, disconnections, group chat, etc. Everything that happens inside of the browser can be fully tested. Requests leaving the browser could also be stubbed and you could assert that the request bodies were correct.</source>
          <target state="translated">すべてを&lt;a href=&quot;../../api/commands/stub&quot;&gt;スタブし、&lt;/a&gt;すべてのシナリオをシミュレートできます。チャットメッセージ、オフラインメッセージ、接続、再接続、切断、グループチャットなど。ブラウザ内で発生するすべてのことを完全にテストできます。ブラウザを離れるリクエストもスタブされ、リクエストの本文が正しいと断言することができます。</target>
        </trans-unit>
        <trans-unit id="784d08745185a1519441b40f1c76d4c3dde4fc93" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../../api/plugins/writing-a-plugin&quot;&gt;check out the API docs here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/plugins/writing-a-plugin&quot;&gt;こちらからAPIドキュメントを確認&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="44d08e9900a859f4834cce50509040d4089e753b" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../../guides/guides/network-requests&quot;&gt;read more about XHR strategy here&lt;/a&gt;.</source>
          <target state="translated">あなたはできます&lt;a href=&quot;../../guides/guides/network-requests&quot;&gt;ここでXHR戦略についての詳細を読みます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2154ae12aa1c12609440ccc8342fe419b011a087" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../../guides/references/configuration#Viewport&quot;&gt;change these default dimensions&lt;/a&gt; by adding the following to your &lt;code&gt;cypress.json&lt;/code&gt;:</source>
          <target state="translated">以下を &lt;code&gt;cypress.json&lt;/code&gt; に追加すること&lt;a href=&quot;../../guides/references/configuration#Viewport&quot;&gt;により、これらのデフォルトの寸法&lt;/a&gt;を変更できます。</target>
        </trans-unit>
        <trans-unit id="a436468e8d3700843fa05d00ce7f2786823d1b10" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../dashboard/projects#Setup&quot;&gt;read more about recording runs here&lt;/a&gt;.</source>
          <target state="translated">あなたはできます&lt;a href=&quot;../dashboard/projects#Setup&quot;&gt;ここでの実行を記録についての詳細を読みます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf85580f3b8841e21d30afc6192aea62ae439056" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../guides/command-line&quot;&gt;read more about the CLI here&lt;/a&gt;.</source>
          <target state="translated">あなたはできる&lt;a href=&quot;../guides/command-line&quot;&gt;CLIの詳細についてはこちらを読んで&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="495f3f50cfa9af97f811f5082ba77ee95a195970" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../guides/environment-variables&quot;&gt;read more about Environment Variables&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guides/environment-variables&quot;&gt;環境変数の詳細について&lt;/a&gt;は、こちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="92e9c3215e41aae529b1035ff69debfc86a8d6bb" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../references/configuration&quot;&gt;read more about how environment variables can change configuration here&lt;/a&gt;.</source>
          <target state="translated">あなたは可能&lt;a href=&quot;../references/configuration&quot;&gt;な環境変数は、ここで設定を変更する方法についての詳細を読みます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="90c5f70b87d4541bb2abbaddd78c34b2d40f9221" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;https://docs.cypress.io/guides/guides/network-requests.html&quot;&gt;read more about XHR strategy here&lt;/a&gt;.</source>
          <target state="translated">あなたはできます&lt;a href=&quot;https://docs.cypress.io/guides/guides/network-requests.html&quot;&gt;ここでXHR戦略についての詳細を読みます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="68e03cc5ef11fedbbc01ea36a5959fbcaebdf7f7" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Viewport&quot;&gt;change these default dimensions&lt;/a&gt; by adding the following to your configuration file (&lt;code&gt;cypress.json&lt;/code&gt; by default):</source>
          <target state="translated">&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Viewport&quot;&gt;これらのデフォルトのサイズ&lt;/a&gt;を変更するには、構成ファイル（デフォルトでは &lt;code&gt;cypress.json&lt;/code&gt; ）に以下を追加します。</target>
        </trans-unit>
        <trans-unit id="4d491b6991d0e25f7938f96f1803e588382f664d" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;server#Options&quot;&gt;read more about this behavior here.&lt;/a&gt;</source>
          <target state="translated">あなたはできます&lt;a href=&quot;server#Options&quot;&gt;ここで、この動作についての詳細を読みます。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f7429e037d4f10c8de0ca682f640e0d9eccf99b0" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;server#Options&quot;&gt;read more about this here.&lt;/a&gt;</source>
          <target state="translated">あなたはすることができます&lt;a href=&quot;server#Options&quot;&gt;。この詳細についてはこちらをお読みください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ce5fd0d44b3fc46a01b53aa0560b7918ea740915" translate="yes" xml:space="preserve">
          <source>You can access functions to then drill into their own properties instead of invoking them.</source>
          <target state="translated">関数にアクセスして、それらを呼び出すのではなく、それらのプロパティにドリルでアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="5f4b77fc836d5a265c934a0f8270a262a73b1b14" translate="yes" xml:space="preserve">
          <source>You can add multiple groups to the same run by passing a different name. This can help distinguish groups of specs from each other.</source>
          <target state="translated">異なる名前を渡すことで、複数のグループを同じランに追加することができます。これは、スペックのグループを互いに区別するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="9bf9fe4eef68136c89d109fccd0aa58e4cf8a4e4" translate="yes" xml:space="preserve">
          <source>You can add retry-ability to your own &lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt;custom commands&lt;/a&gt;, see &lt;a href=&quot;https://github.com/cypress-io/cypress-xpath/pull/12/files&quot;&gt;this pull request to cypress-xpath&lt;/a&gt; for an example.</source>
          <target state="translated">独自の&lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt;カスタムコマンド&lt;/a&gt;に再試行機能を追加できます。例については、&lt;a href=&quot;https://github.com/cypress-io/cypress-xpath/pull/12/files&quot;&gt;cypress-xpathへのこのプルリクエストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5fb82d597ef3272f052afe18e0fad50752efcb6d" translate="yes" xml:space="preserve">
          <source>You can additionally pass a &lt;code&gt;--group&lt;/code&gt; flag so this shows up as a named &lt;a href=&quot;parallelization#Grouping-test-runs&quot;&gt;group&lt;/a&gt;.</source>
          <target state="translated">さらに &lt;code&gt;--group&lt;/code&gt; フラグを渡して、これが名前付き&lt;a href=&quot;parallelization#Grouping-test-runs&quot;&gt;グループ&lt;/a&gt;として表示されるようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="43d327df1d2cbf3d00430666edcfd81a359f119c" translate="yes" xml:space="preserve">
          <source>You can additionally reference &lt;a href=&quot;../core-concepts/variables-and-aliases&quot;&gt;aliases&lt;/a&gt; within responses. These aliases do not have to point to fixtures, but that is a common use case. Separating out a fixture enables you to work and mutate that object prior to handing it off to a response.</source>
          <target state="translated">さらに、応答内で&lt;a href=&quot;../core-concepts/variables-and-aliases&quot;&gt;エイリアスを&lt;/a&gt;参照できます。これらのエイリアスはフィクスチャを指す必要はありませんが、これは一般的な使用例です。フィクスチャを分離することで、オブジェクトを応答に渡す前に、そのオブジェクトを処理して変更することができます。</target>
        </trans-unit>
        <trans-unit id="e6215c846c9e2413af9d999de1041b1b887be989" translate="yes" xml:space="preserve">
          <source>You can almost read it like a little story! Cypress calls this &amp;ldquo;chaining&amp;rdquo; and we chain together commands to build tests that really express what the app does in a declarative way.</source>
          <target state="translated">あなたはほとんどそれを小さな物語のように読むことができます！サイプレスはこれを「連鎖」と呼び、コマンドを連鎖させて、アプリの動作を宣言的に表現するテストを作成します。</target>
        </trans-unit>
        <trans-unit id="6abc7816b2d0675cc1ce58f7e2e18b2cd29f02c7" translate="yes" xml:space="preserve">
          <source>You can also &lt;code&gt;require&lt;/code&gt; local files relative to your project.</source>
          <target state="translated">プロジェクトに関連 &lt;code&gt;require&lt;/code&gt; ローカルファイルを要求することもできます。</target>
        </trans-unit>
        <trans-unit id="79f7a1c4e1c214de9bc8a43f6f54a14a7e3ed530" translate="yes" xml:space="preserve">
          <source>You can also access the &lt;code&gt;clock&lt;/code&gt; object via &lt;code&gt;this.clock&lt;/code&gt; in a &lt;a href=&quot;then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">&lt;a href=&quot;then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; &lt;/a&gt;コールバックで &lt;code&gt;this.clock&lt;/code&gt; を介して &lt;code&gt;clock&lt;/code&gt; オブジェクトにアクセスすることもできます。</target>
        </trans-unit>
        <trans-unit id="bb3981301b8c8c9baaf227f00e9c6f69073b413e" translate="yes" xml:space="preserve">
          <source>You can also choose a browser by supplying a path:</source>
          <target state="translated">また、パスを指定してブラウザを選択することもできます。</target>
        </trans-unit>
        <trans-unit id="edc776eb9b4214fea2ba7e9d6b140f013e1d31c9" translate="yes" xml:space="preserve">
          <source>You can also experiment with what &lt;a href=&quot;../../api/commands/contains&quot;&gt;&lt;code&gt;cy.contains()&lt;/code&gt;&lt;/a&gt; would yield given a string of text. Click on &lt;code&gt;cy.get&lt;/code&gt; and switch to &lt;code&gt;cy.contains&lt;/code&gt;.</source>
          <target state="translated">テキストの文字列が与えられたときに&lt;a href=&quot;../../api/commands/contains&quot;&gt; &lt;code&gt;cy.contains()&lt;/code&gt; &lt;/a&gt;が何を生成するかを試すこともできます。クリックして &lt;code&gt;cy.get&lt;/code&gt; へとスイッチ &lt;code&gt;cy.contains&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a373a76aeb86a79de2ae0bb4ca8c8224407f553" translate="yes" xml:space="preserve">
          <source>You can also find your Record Key inside of the &lt;em&gt;Settings&lt;/em&gt; tab in the Test Runner.</source>
          <target state="translated">レコードキーは、テストランナーの&lt;em&gt;[設定&lt;/em&gt; ]タブ内にもあります。</target>
        </trans-unit>
        <trans-unit id="e910c91c4d3eb331aa40a99585e3fc2bd1fa9355" translate="yes" xml:space="preserve">
          <source>You can also force Cypress to skip the installation of the binary application by setting &lt;code&gt;CYPRESS_INSTALL_BINARY=0&lt;/code&gt;. This could be useful if you want to prevent Cypress from downloading the Cypress binary at the time of &lt;code&gt;npm install&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CYPRESS_INSTALL_BINARY=0&lt;/code&gt; を設定して、サイプレスにバイナリアプリケーションのインストールを強制的にスキップさせることもできます。これは、 &lt;code&gt;npm install&lt;/code&gt; 時にサイプレスがサイプレスバイナリをダウンロードしないようにする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="75ca84eae6e1d1a4c235730f033d8eea601a161d" translate="yes" xml:space="preserve">
          <source>You can also force the action to be performed on the element regardless of whether the element is visible or not.</source>
          <target state="translated">また、要素が表示されているかどうかに関わらず、要素に対してアクションを強制的に実行させることもできます。</target>
        </trans-unit>
        <trans-unit id="f730e6f4a04e24f99b0c716d8058dbb4dc54d9a6" translate="yes" xml:space="preserve">
          <source>You can also include arbitrary event properties (e.g. &lt;code&gt;clientX&lt;/code&gt;, &lt;code&gt;shiftKey&lt;/code&gt;) and they will be attached to the event. Passing in coordinate arguments (&lt;code&gt;clientX&lt;/code&gt;, &lt;code&gt;pageX&lt;/code&gt;, etc) will override the position coordinates.</source>
          <target state="translated">任意のイベントプロパティ（ &lt;code&gt;clientX&lt;/code&gt; 、 &lt;code&gt;shiftKey&lt;/code&gt; など）を含めることもでき、それらはイベントにアタッチされます。座標引数（ &lt;code&gt;clientX&lt;/code&gt; 、 &lt;code&gt;pageX&lt;/code&gt; など）を渡すと、位置座標がオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="bcb856b9724a4fa7f847157ca2d79ac226ce0eef" translate="yes" xml:space="preserve">
          <source>You can also launch Chromium:</source>
          <target state="translated">Chromiumを起動することもできます。</target>
        </trans-unit>
        <trans-unit id="1356698e80248e43b88730c4463de0933166c7d0" translate="yes" xml:space="preserve">
          <source>You can also launch Electron headed:</source>
          <target state="translated">エレクトロンヘッドを起動することもできます。</target>
        </trans-unit>
        <trans-unit id="80f64a0cf8b0a4e119997575d9d04d4a84f146c8" translate="yes" xml:space="preserve">
          <source>You can also mix optional commands &lt;strong&gt;with&lt;/strong&gt; validations.</source>
          <target state="translated">オプションのコマンド&lt;strong&gt;と&lt;/strong&gt;検証を混在させることもできます。</target>
        </trans-unit>
        <trans-unit id="66db6cce48bf4cb810b588cb860314482e87f08b" translate="yes" xml:space="preserve">
          <source>You can also modify the behavior of existing Cypress commands. This is useful to always set some defaults to avoid creating another command that ends up just using the original.</source>
          <target state="translated">既存のCypressコマンドの動作を変更することもできます。これは、元のコマンドを使うだけで終わってしまう別のコマンドの作成を避けるために、常にいくつかのデフォルトを設定しておくのに便利です。</target>
        </trans-unit>
        <trans-unit id="75594d2bee4091bac2ea16a5a5af2387d74a58f1" translate="yes" xml:space="preserve">
          <source>You can also modify the behavior of existing Cypress commands. This is useful to always set some defaults to avoid creating another command that ends up using the original.</source>
          <target state="translated">既存のCypressコマンドの動作を変更することもできます。これは、元のコマンドを使用して終わる別のコマンドを作成しないように、常にいくつかのデフォルトを設定しておくのに便利です。</target>
        </trans-unit>
        <trans-unit id="4b2828e90e5427e97e52a6d3ef90e2e398374448" translate="yes" xml:space="preserve">
          <source>You can also override configuration values within your test using &lt;a href=&quot;../../api/cypress-api/config&quot;&gt;&lt;code&gt;Cypress.config()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/cypress-api/config&quot;&gt; &lt;code&gt;Cypress.config()&lt;/code&gt; &lt;/a&gt;を使用して、テスト内の構成値をオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="9669cc5529312653389cac780d96db9f8b09ddb8" translate="yes" xml:space="preserve">
          <source>You can also provide the username and password directly in the URL.</source>
          <target state="translated">URLに直接ユーザー名とパスワードを入力することもできます。</target>
        </trans-unit>
        <trans-unit id="5abe4f73857a4182949b4618c4dbd119d106b410" translate="yes" xml:space="preserve">
          <source>You can also query DOM elements with &lt;code&gt;cy.$$&lt;/code&gt;. But &lt;code&gt;Cypress.$&lt;/code&gt; and &lt;code&gt;cy.$$&lt;/code&gt; are different.</source>
          <target state="translated">&lt;code&gt;cy.$$&lt;/code&gt; を使用してDOM要素をクエリすることもできます。しかし、 &lt;code&gt;Cypress.$&lt;/code&gt; と &lt;code&gt;cy.$$&lt;/code&gt; は異なります。</target>
        </trans-unit>
        <trans-unit id="1e7378309e90d3f3e6b7105692f196c77a53112f" translate="yes" xml:space="preserve">
          <source>You can also reference fixtures as strings directly in the response by passing an aliased fixture with &lt;code&gt;@&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; でエイリアスされたフィクスチャを渡すことにより、レスポンスでフィクスチャを文字列として直接参照することもできます。</target>
        </trans-unit>
        <trans-unit id="0a258007e0713ab14f35b5bfe3308c438cbcbe78" translate="yes" xml:space="preserve">
          <source>You can also see all GitHub Integration enabled Cypress projects within your organizations &lt;strong&gt;Integrations&lt;/strong&gt; page:</source>
          <target state="translated">組織の&lt;strong&gt;統合&lt;/strong&gt;ページ内で、GitHub統合対応のサイプレスプロジェクトをすべて表示することもできます。</target>
        </trans-unit>
        <trans-unit id="fef34e4c0976f5f9d1128119e2293fcadfdd8c69" translate="yes" xml:space="preserve">
          <source>You can also see verbose Cypress logs when running the Test Runner binary</source>
          <target state="translated">テストランナーのバイナリを実行すると、詳細な Cypress のログを見ることができます。</target>
        </trans-unit>
        <trans-unit id="0b61b0b140b27978c66084948f860f083e22cd45" translate="yes" xml:space="preserve">
          <source>You can also set &lt;code&gt;NO_PROXY&lt;/code&gt; to bypass the proxy for certain domains (by default, only &lt;code&gt;localhost&lt;/code&gt; will be bypassed):</source>
          <target state="translated">&lt;code&gt;NO_PROXY&lt;/code&gt; を設定して、特定のドメインのプロキシをバイパスすることもできます（デフォルトでは、 &lt;code&gt;localhost&lt;/code&gt; のみがバイパスされます）。</target>
        </trans-unit>
        <trans-unit id="b1df080149da01d5047d265f6b4c4503ef3fd2f3" translate="yes" xml:space="preserve">
          <source>You can also set all &lt;code&gt;cy.visit()&lt;/code&gt; commands&amp;rsquo; &lt;code&gt;pageLoadTimeout&lt;/code&gt; and &lt;code&gt;baseUrl&lt;/code&gt; globally in &lt;a href=&quot;../../guides/references/configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;cy.visit()&lt;/code&gt; コマンドの &lt;code&gt;pageLoadTimeout&lt;/code&gt; および &lt;code&gt;baseUrl&lt;/code&gt; を&lt;a href=&quot;../../guides/references/configuration&quot;&gt;設定で&lt;/a&gt;グローバルに設定することもできます。</target>
        </trans-unit>
        <trans-unit id="7dc235e2dd692f50861bd0d75f7a6625c19e9add" translate="yes" xml:space="preserve">
          <source>You can also set all &lt;code&gt;cy.visit()&lt;/code&gt; commands&amp;rsquo; &lt;code&gt;pageLoadTimeout&lt;/code&gt; and &lt;code&gt;baseUrl&lt;/code&gt; globally in &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;cy.visit()&lt;/code&gt; コマンドの &lt;code&gt;pageLoadTimeout&lt;/code&gt; および &lt;code&gt;baseUrl&lt;/code&gt; を&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html&quot;&gt;構成で&lt;/a&gt;グローバルに設定することもできます。</target>
        </trans-unit>
        <trans-unit id="ddc41b9156c6f191e37a3148278eb23cb277f6a3" translate="yes" xml:space="preserve">
          <source>You can also set custom environment variables for use in your tests. These enable your code to reference dynamic values.</source>
          <target state="translated">また、テストで使用するためのカスタム環境変数を設定することもできます。これにより、コードが動的な値を参照できるようになります。</target>
        </trans-unit>
        <trans-unit id="d1107e80041395e278d9bfec399d396819951db0" translate="yes" xml:space="preserve">
          <source>You can also set options for &lt;code&gt;cy.request()&lt;/code&gt;&amp;lsquo;s &lt;code&gt;baseUrl&lt;/code&gt; and &lt;code&gt;responseTimeout&lt;/code&gt; globally in &lt;a href=&quot;../../guides/references/configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">あなたはまたのためのオプションを設定することができます &lt;code&gt;cy.request()&lt;/code&gt; の &lt;code&gt;baseUrl&lt;/code&gt; にと &lt;code&gt;responseTimeout&lt;/code&gt; で、グローバル&lt;a href=&quot;../../guides/references/configuration&quot;&gt;コンフィギュレーションを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="02986901c50070bde7b0ef61de6ea21ff7de2d19" translate="yes" xml:space="preserve">
          <source>You can also set options for &lt;code&gt;cy.request()&lt;/code&gt;&amp;lsquo;s &lt;code&gt;baseUrl&lt;/code&gt; and &lt;code&gt;responseTimeout&lt;/code&gt; globally in &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cy.request()&lt;/code&gt; の &lt;code&gt;baseUrl&lt;/code&gt; および &lt;code&gt;responseTimeout&lt;/code&gt; のオプションを&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html&quot;&gt;構成で&lt;/a&gt;グローバルに設定することもできます。</target>
        </trans-unit>
        <trans-unit id="b8168fc02c79572a79ba1ac091a0b3699434adf2" translate="yes" xml:space="preserve">
          <source>You can also set options for all &lt;a href=&quot;wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt;&amp;lsquo;s &lt;code&gt;requestTimeout&lt;/code&gt; and &lt;code&gt;responseTimeout&lt;/code&gt; globally in &lt;a href=&quot;../../guides/references/configuration&quot;&gt;configuration&lt;/a&gt; to control how long to wait for the request and response of a supplied route.</source>
          <target state="translated">設定ですべての&lt;a href=&quot;wait&quot;&gt; &lt;code&gt;cy.wait()&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;requestTimeout&lt;/code&gt; および &lt;code&gt;responseTimeout&lt;/code&gt; のオプションをグローバルに&lt;a href=&quot;../../guides/references/configuration&quot;&gt;設定&lt;/a&gt;して、指定されたルートの要求と応答を待つ時間を制御することもできます。</target>
        </trans-unit>
        <trans-unit id="7ab8e26558101209472234cc17984c08a4c7c5ac" translate="yes" xml:space="preserve">
          <source>You can also set options for all &lt;a href=&quot;wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt;&amp;lsquo;s &lt;code&gt;requestTimeout&lt;/code&gt; and &lt;code&gt;responseTimeout&lt;/code&gt; globally in &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html&quot;&gt;configuration&lt;/a&gt; to control how long to wait for the request and response of a supplied route.</source>
          <target state="translated">構成ですべての&lt;a href=&quot;wait&quot;&gt; &lt;code&gt;cy.wait()&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;requestTimeout&lt;/code&gt; および &lt;code&gt;responseTimeout&lt;/code&gt; のオプションをグローバルに&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html&quot;&gt;設定&lt;/a&gt;して、指定されたルートの要求と応答を待機する時間を制御することもできます。</target>
        </trans-unit>
        <trans-unit id="fc19a9813ee5d74ccec080f9e2871dfc2cf77339" translate="yes" xml:space="preserve">
          <source>You can also set proxy environment variables before running Cypress to override the Windows registry. This is also the only way to define a proxy for &lt;code&gt;cypress install&lt;/code&gt;. In Command Prompt, defining the required environment variables looks like this:</source>
          <target state="translated">サイプレスを実行してWindowsレジストリを上書きする前に、プロキシ環境変数を設定することもできます。これは、 &lt;code&gt;cypress install&lt;/code&gt; プロキシを定義する唯一の方法でもあります。コマンドプロンプトで必要な環境変数を定義すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="3eba9eaea57ee86eda61d39c0cb20904fda8fa68" translate="yes" xml:space="preserve">
          <source>You can also set the timeout globally via the &lt;a href=&quot;../references/configuration#Timeouts&quot;&gt;configuration setting: &lt;code&gt;defaultCommandTimeout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../references/configuration#Timeouts&quot;&gt;構成設定 &lt;code&gt;defaultCommandTimeout&lt;/code&gt; を&lt;/a&gt;使用して、タイムアウトをグローバルに設定することもできます。</target>
        </trans-unit>
        <trans-unit id="b87884bf39c14ad453d04ea15ab0971d7774f421" translate="yes" xml:space="preserve">
          <source>You can also supply the &lt;code&gt;--browser&lt;/code&gt; command line argument to launch a browser from a known filesystem path to bypass browser auto detection. &lt;a href=&quot;launching-browsers#Launching-by-a-path&quot;&gt;See &amp;lsquo;Launching Browsers&amp;rsquo; for more information&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;--browser&lt;/code&gt; コマンドライン引数を指定して、既知のファイルシステムパスからブラウザを起動し、ブラウザの自動検出をバイパスすることもできます。&lt;a href=&quot;launching-browsers#Launching-by-a-path&quot;&gt;詳細については、「ブラウザの起動」を参照してください&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cc1b52c24e86b2b4be396650015de0959d5fcba4" translate="yes" xml:space="preserve">
          <source>You can also turn off our checks for animations with the configuration option &lt;a href=&quot;../references/configuration#Animations&quot;&gt;&lt;code&gt;waitForAnimations&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">設定オプション&lt;a href=&quot;../references/configuration#Animations&quot;&gt; &lt;code&gt;waitForAnimations&lt;/code&gt; を&lt;/a&gt;使用して、アニメーションのチェックをオフにすることもできます。</target>
        </trans-unit>
        <trans-unit id="e92d91cd084ad1da7c15131810b4d1177ff17f71" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;../guides/environment-variables&quot;&gt;environment variables&lt;/a&gt; to override configuration values. This is especially useful in &lt;a href=&quot;../guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt; or when working locally. This gives you the ability to change configuration options without modifying any code or build scripts.</source>
          <target state="translated">&lt;a href=&quot;../guides/environment-variables&quot;&gt;環境変数&lt;/a&gt;を使用して、構成値をオーバーライドすることもできます。これは、&lt;a href=&quot;../guides/continuous-integration&quot;&gt;継続的インテグレーション&lt;/a&gt;またはローカルで作業するときに特に役立ちます。これにより、コードやビルドスクリプトを変更せずに構成オプションを変更できます。</target>
        </trans-unit>
        <trans-unit id="b7b8f4d45319dee07869a91ac5b121bf6ea0e232" translate="yes" xml:space="preserve">
          <source>You can also use a function as a response which enables you to add logic surrounding the response.</source>
          <target state="translated">レスポンスとして関数を使用することもでき、レスポンスの周囲にロジックを追加することができます。</target>
        </trans-unit>
        <trans-unit id="5bc5238e147f3b03f3c1be8bbcd3115ea7a8e3dd" translate="yes" xml:space="preserve">
          <source>You can also use key combinations during &lt;a href=&quot;click#Click-with-key-combinations&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;rightclick#Right-click-with-key-combinations&quot;&gt;&lt;code&gt;.rightclick()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;dblclick#Double-click-with-key-combinations&quot;&gt;&lt;code&gt;.dblclick()&lt;/code&gt;&lt;/a&gt; through their options. See each doc for more information.</source>
          <target state="translated">また、中にキーの組み合わせを使用することができます&lt;a href=&quot;click#Click-with-key-combinations&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;rightclick#Right-click-with-key-combinations&quot;&gt; &lt;code&gt;.rightclick()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;dblclick#Double-click-with-key-combinations&quot;&gt; &lt;code&gt;.dblclick()&lt;/code&gt; &lt;/a&gt;そのオプションを使用して。詳細については、各ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="58faa034e7c87edbc2c65294b4a153b856c7ee56" translate="yes" xml:space="preserve">
          <source>You can also use key combinations during &lt;a href=&quot;type&quot;&gt;&lt;code&gt;.type()&lt;/code&gt;&lt;/a&gt;. This offers options to hold down keys across multiple commands. See &lt;a href=&quot;type#Key-Combinations&quot;&gt;Key Combinations&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;type&quot;&gt; &lt;code&gt;.type()&lt;/code&gt; &lt;/a&gt;中にキーの組み合わせを使用することもできます。これにより、複数のコマンド間でキーを押し続けるオプションが提供されます。詳細については、&lt;a href=&quot;type#Key-Combinations&quot;&gt;キーの組み合わせ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="22c469c8dc57a8e8c5ed37eef09746b7a8446a73" translate="yes" xml:space="preserve">
          <source>You can alternatively require and run Cypress as a node module using our &lt;a href=&quot;module-api&quot;&gt;Module API&lt;/a&gt;.</source>
          <target state="translated">あるいは、&lt;a href=&quot;module-api&quot;&gt;モジュールAPI&lt;/a&gt;を使用して、サイプレスをノードモジュールとして要求および実行することもできます。</target>
        </trans-unit>
        <trans-unit id="3175a2b4f4549de4e33942286466a2a4dc1e48b7" translate="yes" xml:space="preserve">
          <source>You can assert about the underlying XHR object.</source>
          <target state="translated">基礎となるXHRオブジェクトについてアサートすることができます。</target>
        </trans-unit>
        <trans-unit id="8ffc92d6f9ac91733bcc1c82ea9f5a8866adcdb0" translate="yes" xml:space="preserve">
          <source>You can assert that a file does not exist like so:</source>
          <target state="translated">このようにファイルが存在しないことを主張することができます。</target>
        </trans-unit>
        <trans-unit id="26ad54b282d0eb9740f3007c306d5f45c93589c8" translate="yes" xml:space="preserve">
          <source>You can avoid this check in the future by passing an ID to the &lt;a href=&quot;../guides/command-line#cypress-run-ci-build-id-lt-id-gt&quot;&gt;&lt;code&gt;--ci-build-id&lt;/code&gt;&lt;/a&gt; flag manually.</source>
          <target state="translated">IDを&lt;a href=&quot;../guides/command-line#cypress-run-ci-build-id-lt-id-gt&quot;&gt; &lt;code&gt;--ci-build-id&lt;/code&gt; &lt;/a&gt;フラグに手動で渡すことで、今後このチェックを回避できます。</target>
        </trans-unit>
        <trans-unit id="b31e2a27d983a97c552cc374237cd9d7941ccd4f" translate="yes" xml:space="preserve">
          <source>You can call &lt;code&gt;cy.clock()&lt;/code&gt; again for this purpose later in a chain if necessary.</source>
          <target state="translated">この目的のために、必要に応じて後でチェーンの中で &lt;code&gt;cy.clock()&lt;/code&gt; を再度呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="12d79ac1293246ea41fab1f37fa66cd279225314" translate="yes" xml:space="preserve">
          <source>You can chain &lt;a href=&quot;its&quot;&gt;&lt;code&gt;.its()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;should&quot;&gt;&lt;code&gt;.should()&lt;/code&gt;&lt;/a&gt; to assert against request/response cycles:</source>
          <target state="translated">&lt;a href=&quot;its&quot;&gt; &lt;code&gt;.its()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;should&quot;&gt; &lt;code&gt;.should()&lt;/code&gt; &lt;/a&gt;をチェーンして、要求/応答サイクルに対してアサートできます。</target>
        </trans-unit>
        <trans-unit id="26e9a164d5e9c68e547303a1f613766d10ea1418" translate="yes" xml:space="preserve">
          <source>You can chain a &lt;code&gt;.log(bool)&lt;/code&gt; method to disable &lt;code&gt;cy.stub()&lt;/code&gt; calls from being shown in the Command Log. This may be useful when your stubs are called an excessive number of times.</source>
          <target state="translated">&lt;code&gt;.log(bool)&lt;/code&gt; メソッドをチェーンして、 &lt;code&gt;cy.stub()&lt;/code&gt; 呼び出しがコマンドログに表示されないようにすることができます。これは、スタブが過度に呼び出される場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="6e76c197da2f401b90598e6d5b3657441656fa45" translate="yes" xml:space="preserve">
          <source>You can chain multiple assertions together using &lt;a href=&quot;../../api/commands/and&quot;&gt;&lt;code&gt;.and()&lt;/code&gt;&lt;/a&gt;, which is just another name for &lt;a href=&quot;../../api/commands/should&quot;&gt;&lt;code&gt;.should()&lt;/code&gt;&lt;/a&gt; that makes things more readable:</source>
          <target state="translated">あなたは、チェーンの複数のアサーションを一緒に使用することができます&lt;a href=&quot;../../api/commands/and&quot;&gt; &lt;code&gt;.and()&lt;/code&gt; &lt;/a&gt;、のためのちょうど別の名前である&lt;a href=&quot;../../api/commands/should&quot;&gt; &lt;code&gt;.should()&lt;/code&gt; &lt;/a&gt;物事をより読みやすくなります。</target>
        </trans-unit>
        <trans-unit id="324978bd59726ff9b6daf19dbb7623b404a04f96" translate="yes" xml:space="preserve">
          <source>You can change anything in the JavaScript code:</source>
          <target state="translated">JavaScriptのコードで何かを変更することができます。</target>
        </trans-unit>
        <trans-unit id="7401ba441fe83bcdec7dc3f48a153e72de720fac" translate="yes" xml:space="preserve">
          <source>You can change the size of the viewport height and width for the remainder of the tests by setting the new values for &lt;code&gt;viewportHeight&lt;/code&gt; or &lt;code&gt;viewportWidth&lt;/code&gt; within &lt;a href=&quot;../cypress-api/config&quot;&gt;&lt;code&gt;Cypress.config()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../cypress-api/config&quot;&gt; &lt;code&gt;Cypress.config()&lt;/code&gt; &lt;/a&gt;内で &lt;code&gt;viewportHeight&lt;/code&gt; または &lt;code&gt;viewportWidth&lt;/code&gt; の新しい値を設定することにより、残りのテストのビューポートの高さと幅のサイズを変更できます。</target>
        </trans-unit>
        <trans-unit id="9d21c8345ab680ab31b60b1a58d273194bcf7fe6" translate="yes" xml:space="preserve">
          <source>You can change the timeout of &lt;code&gt;cy.exec()&lt;/code&gt; for the remainder of the tests by setting the new values for &lt;code&gt;execTimeout&lt;/code&gt; within &lt;a href=&quot;../cypress-api/config&quot;&gt;&lt;code&gt;Cypress.config()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">あなたはタイムアウト変更することができます &lt;code&gt;cy.exec()&lt;/code&gt; の新しい値を設定することで、テストの残りの部分を &lt;code&gt;execTimeout&lt;/code&gt; 内&lt;a href=&quot;../cypress-api/config&quot;&gt; &lt;code&gt;Cypress.config()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b11989f59235e70ad780236eb17ece99f0578676" translate="yes" xml:space="preserve">
          <source>You can change the timeout of &lt;code&gt;cy.task()&lt;/code&gt; for the remainder of the tests by setting the new values for &lt;code&gt;taskTimeout&lt;/code&gt; within &lt;a href=&quot;../cypress-api/config&quot;&gt;&lt;code&gt;Cypress.config()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">あなたはタイムアウト変更することができます &lt;code&gt;cy.task()&lt;/code&gt; の新しい値を設定することで、テストの残りの部分を &lt;code&gt;taskTimeout&lt;/code&gt; 内&lt;a href=&quot;../cypress-api/config&quot;&gt; &lt;code&gt;Cypress.config()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="acd9e8848201a5377bfae9ccff12e3e96d52b109" translate="yes" xml:space="preserve">
          <source>You can check the cookie existence without comparing any of its properties</source>
          <target state="translated">クッキーのプロパティを比較することなく、クッキーの存在を確認することができます。</target>
        </trans-unit>
        <trans-unit id="16913b3bed889723969c72a8d71314dec1332362" translate="yes" xml:space="preserve">
          <source>You can configure CI to use any reporter built into Mocha, and additionally we are adding JUnit XML output (for Jenkins) as a built in default.</source>
          <target state="translated">Mochaに組み込まれた任意のレポーターを使用するようにCIを設定することができ、さらにJUnit XML出力(Jenkins用)をデフォルトで追加しています。</target>
        </trans-unit>
        <trans-unit id="46bd564633cf1e7708d67ea672dfa5b61b28793d" translate="yes" xml:space="preserve">
          <source>You can configure the &lt;code&gt;cy.exec()&lt;/code&gt; timeout within a suite or test by passing the new configuration value within the &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Test-Configuration&quot;&gt;test configuration&lt;/a&gt;.</source>
          <target state="translated">あなたは、設定することができます &lt;code&gt;cy.exec()&lt;/code&gt; 内の新しい設定値を渡すことで、スイートまたはテスト中にタイムアウトを&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Test-Configuration&quot;&gt;テスト構成&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d2b1845f6c62f21887d7353579615093ce5357d3" translate="yes" xml:space="preserve">
          <source>You can configure the &lt;code&gt;cy.task()&lt;/code&gt; timeout within a suite or test by passing the new configuration value within the &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Test-Configuration&quot;&gt;test configuration&lt;/a&gt;.</source>
          <target state="translated">あなたは、設定することができます &lt;code&gt;cy.task()&lt;/code&gt; 内の新しい設定値を渡すことで、スイートまたはテスト内でタイムアウトを&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Test-Configuration&quot;&gt;テスト構成&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ceafdf5691ad9fe8b2bbfa8d6d2b9d9b4fed3b3c" translate="yes" xml:space="preserve">
          <source>You can configure the size of the viewport height and width within a suite or test by passing the new configuration value within the &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Test-Configuration&quot;&gt;test configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Test-Configuration&quot;&gt;テスト構成&lt;/a&gt;内で新しい構成値を渡すことにより、スイートまたはテスト内でビューポートの高さと幅のサイズを構成できます。</target>
        </trans-unit>
        <trans-unit id="44522a700127f81cfa8d4cd7a580fcabb332d6fb" translate="yes" xml:space="preserve">
          <source>You can create an organization from within the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt; by going to the &lt;strong&gt;Organizations&lt;/strong&gt; tab and clicking &lt;strong&gt; Add Organization&lt;/strong&gt;.</source>
          <target state="translated">あなたは内から組織を作成することができ&lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;、ダッシュボードサービス&lt;/a&gt;に行くことによって&lt;strong&gt;組織&lt;/strong&gt;タブとクリック&lt;strong&gt;機構を追加します&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a06ded0a0c44a1f5754f79079f79ec07319016cd" translate="yes" xml:space="preserve">
          <source>You can create multiple Record Keys for a project, or delete existing ones from our &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard&lt;/a&gt;.</source>
          <target state="translated">プロジェクトに複数のレコードキーを作成するか、&lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;ダッシュボード&lt;/a&gt;から既存のレコードキーを削除できます。</target>
        </trans-unit>
        <trans-unit id="5a2ce4ef56a8ea5d69610b02eb11bc54412ee2fb" translate="yes" xml:space="preserve">
          <source>You can create your own &lt;code&gt;cypress.env.json&lt;/code&gt; file that Cypress will automatically check. Values in here will overwrite conflicting environment variables in &lt;code&gt;cypress.json&lt;/code&gt;.</source>
          <target state="translated">サイプレスが自動的にチェックする独自の &lt;code&gt;cypress.env.json&lt;/code&gt; ファイルを作成できます。ここの値は、 &lt;code&gt;cypress.json&lt;/code&gt; の競合する環境変数を上書きします。</target>
        </trans-unit>
        <trans-unit id="6523f3351366b7ce61e38eeff804ad2055d0c5d9" translate="yes" xml:space="preserve">
          <source>You can define your behaviors in a &lt;code&gt;beforeEach&lt;/code&gt; within any of the &lt;code&gt;cypress/support&lt;/code&gt; files:</source>
          <target state="translated">&lt;code&gt;cypress/support&lt;/code&gt; ファイル内の &lt;code&gt;beforeEach&lt;/code&gt; で動作を定義できます。</target>
        </trans-unit>
        <trans-unit id="59b303eb868263da303c6fbda4bfbb73b3116eef" translate="yes" xml:space="preserve">
          <source>You can delete organizations that you own as long as they do not have any projects in the organization. You must first transfer ownership of your projects to another organization before you can delete the organization.</source>
          <target state="translated">所有している組織は、その組織にプロジェクトが存在しない限り、削除することができます。組織を削除する前に、最初にプロジェクトの所有権を別の組織に移す必要があります。</target>
        </trans-unit>
        <trans-unit id="7bba89ff9d30a5268594482d2fa9607fd9e3fe12" translate="yes" xml:space="preserve">
          <source>You can delete projects you own. This will also delete all of their recorded test runs. Deleting projects can only be done from the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt;.</source>
          <target state="translated">所有しているプロジェクトを削除できます。これにより、記録されたテスト実行もすべて削除されます。プロジェクトの削除は、&lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;ダッシュボードサービス&lt;/a&gt;からのみ実行できます。</target>
        </trans-unit>
        <trans-unit id="2293186d2954a26e38fd4a9835d61aa09945a4b8" translate="yes" xml:space="preserve">
          <source>You can delete the recorded video for a spec. This will skip the compression and uploading of the video when recording to the Dashboard.</source>
          <target state="translated">録画した動画を仕様に合わせて削除することができます。これにより、Dashboardに録画する際の動画の圧縮とアップロードがスキップされます。</target>
        </trans-unit>
        <trans-unit id="79831bc7512a1e1c26a421f007ce979847bf0a7c" translate="yes" xml:space="preserve">
          <source>You can describe the method signature for your custom command, allowing IntelliSense to show helpful documentation. See the &lt;a href=&quot;https://github.com/cypress-io/cypress-example-todomvc#cypress-intellisense&quot;&gt;&lt;code&gt;cypress-example-todomvc&lt;/code&gt;&lt;/a&gt; repository for a working example.</source>
          <target state="translated">カスタムコマンドのメソッドシグネチャを記述して、IntelliSenseが役立つドキュメントを表示できるようにすることができます。&lt;a href=&quot;https://github.com/cypress-io/cypress-example-todomvc#cypress-intellisense&quot;&gt; &lt;code&gt;cypress-example-todomvc&lt;/code&gt; &lt;/a&gt;については、cypress-example-todomvcリポジトリを参照してください。</target>
        </trans-unit>
        <trans-unit id="643f7e328ecedd1f5d98bbf5dff347818789df5e" translate="yes" xml:space="preserve">
          <source>You can disable all stubbing and its effects and restore it to the default behavior as a test is running. By setting &lt;code&gt;enable&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, this disables stubbing routes and XHR&amp;rsquo;s will no longer show up as (XHR Stub) in the Command Log. However, routing aliases can continue to be used and will continue to match requests, but will not affect responses.</source>
          <target state="translated">テストの実行中に、すべてのスタブとその影響を無効にして、デフォルトの動作に戻すことができます。 &lt;code&gt;enable&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、スタブルートが無効になり、XHRは（XHRスタブ）としてコマンドログに表示されなくなります。ただし、ルーティングエイリアスは引き続き使用でき、リクエストと一致し続けますが、応答には影響しません。</target>
        </trans-unit>
        <trans-unit id="68d2cd188f36f701d8b251e7a7fbb2dcb2457a36" translate="yes" xml:space="preserve">
          <source>You can do this in many ways and here is a simple example of using an HTTP server to act as the client and exposing a REST interface that enables us to control it.</source>
          <target state="translated">これは多くの方法で行うことができ、ここでは、クライアントとして動作し、それを制御することができますRESTインターフェースを公開するためにHTTPサーバを使用する簡単な例を示しています。</target>
        </trans-unit>
        <trans-unit id="7b736df01753bd3372efae350c20a5c5dadcdfbb" translate="yes" xml:space="preserve">
          <source>You can drill into nested properties by using &lt;em&gt;dot notation&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;ドット表記&lt;/em&gt;を使用して、ネストされたプロパティにドリルできます。</target>
        </trans-unit>
        <trans-unit id="1228304b4cc01b66a784eeb63078c8726421e77c" translate="yes" xml:space="preserve">
          <source>You can dynamically generate tests using JavaScript.</source>
          <target state="translated">JavaScriptを使って動的にテストを生成することができます。</target>
        </trans-unit>
        <trans-unit id="9a2e37cb8e37e96e3c4243fd4554f774483b5cf1" translate="yes" xml:space="preserve">
          <source>You can edit the number of seconds that a run will wait for new groups to join before transitioning to &amp;lsquo;completed&amp;rsquo;. See our &lt;a href=&quot;../guides/parallelization#Run-completion-delay&quot;&gt;parallelization guide&lt;/a&gt; to learn more.</source>
          <target state="translated">実行が「完了」に移行する前に新しいグループが参加するのを待つ秒数を編集できます。詳細については、&lt;a href=&quot;../guides/parallelization#Run-completion-delay&quot;&gt;並列化ガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="bf9c4659f323040b517229eb77925764c5ae5536" translate="yes" xml:space="preserve">
          <source>You can even add an assertion to the test itself to ensure the URL is matched</source>
          <target state="translated">URL が一致していることを確認するために、テスト自体にアサーションを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="8dab3e9ab7530834286664395fc341ebb044a056" translate="yes" xml:space="preserve">
          <source>You can even throw your own errors from the callback function.</source>
          <target state="translated">コールバック関数から独自のエラーを投げることもできます。</target>
        </trans-unit>
        <trans-unit id="41b32dfc16a036c0a0a54153f50cbd0df7ee3e80" translate="yes" xml:space="preserve">
          <source>You can explore the above combined full stack coverage report at the &lt;a href=&quot;https://coveralls.io/github/cypress-io/cypress-example-realworld&quot;&gt;coveralls.io/github/cypress-io/cypress-example-realworld&lt;/a&gt; dashboard.</source>
          <target state="translated">上記の結合されたフルスタックカバレッジレポートは、&lt;a href=&quot;https://coveralls.io/github/cypress-io/cypress-example-realworld&quot;&gt;coveralls.io / github / cypress-io / cypress-example-realworld&lt;/a&gt;ダッシュボードで確認できます。</target>
        </trans-unit>
        <trans-unit id="0f0568ec7f2fe4ea42d6839ef295021cdeb33705" translate="yes" xml:space="preserve">
          <source>You can find a simple example with custom commands written in TypeScript in &lt;a href=&quot;https://github.com/omerose/cypress-support&quot;&gt;omerose/cypress-support&lt;/a&gt; repo.</source>
          <target state="translated">TypeScriptで記述されたカスタムコマンドの簡単な例は、&lt;a href=&quot;https://github.com/omerose/cypress-support&quot;&gt;omerose / cypress-support&lt;/a&gt;リポジトリにあります。</target>
        </trans-unit>
        <trans-unit id="d9a7f4868071ee5c6983b82ebcc25855d5856aa0" translate="yes" xml:space="preserve">
          <source>You can find an example of Jest and Cypress installed in the same project using a separate &lt;code&gt;tsconfig.json&lt;/code&gt; file in the &lt;a href=&quot;https://github.com/cypress-io/cypress-and-jest-typescript-example&quot;&gt;cypress-io/cypress-and-jest-typescript-example&lt;/a&gt; repo.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/cypress-io/cypress-and-jest-typescript-example&quot;&gt;cypress-io / cypress-and-jest-typescript-example&lt;/a&gt;リポジトリの個別の &lt;code&gt;tsconfig.json&lt;/code&gt; ファイルを使用して、同じプロジェクトにインストールされたJestとCypressの例を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="0d61b24dcafb9772bac5e241c51bcc0893b73bb8" translate="yes" xml:space="preserve">
          <source>You can find full examples showing different code coverage setups in the following repositories:</source>
          <target state="translated">異なるコードカバレッジの設定を示す完全な例は、以下のリポジトリにあります。</target>
        </trans-unit>
        <trans-unit id="0632d008fb07530217cff8f54fa087f4afc85cdd" translate="yes" xml:space="preserve">
          <source>You can find multiple examples at &lt;a href=&quot;https://github.com/cypress-io/circleci-orb/blob/master/docs/examples.md&quot;&gt;our orb examples page&lt;/a&gt; and in the &lt;a href=&quot;https://github.com/cypress-io/cypress-example-circleci-orb&quot;&gt;cypress-example-circleci-orb&lt;/a&gt; project.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/cypress-io/circleci-orb/blob/master/docs/examples.md&quot;&gt;orbの例のページ&lt;/a&gt;と&lt;a href=&quot;https://github.com/cypress-io/cypress-example-circleci-orb&quot;&gt;cypress-example-circleci-orb&lt;/a&gt;プロジェクトで複数の例を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="23e457cbde83a98743dd9d4d6026fffc11caa2e5" translate="yes" xml:space="preserve">
          <source>You can find the current Node version we use &lt;a href=&quot;https://github.com/cypress-io/cypress/blob/master/.node-version&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/cypress-io/cypress/blob/master/.node-version&quot;&gt;ここで&lt;/a&gt;、現在使用しているノードのバージョンを確認できます。</target>
        </trans-unit>
        <trans-unit id="f6e1f33debb1fdf0f1398f1641570a646f589f02" translate="yes" xml:space="preserve">
          <source>You can find the current Node version we use when the &lt;code&gt;nodeVersion&lt;/code&gt; is set to the default &lt;code&gt;bundled&lt;/code&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/blob/master/.node-version&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;nodeVersion&lt;/code&gt; がデフォルトの &lt;code&gt;bundled&lt;/code&gt; 設定されている場合に使用する現在のノードバージョンを&lt;a href=&quot;https://github.com/cypress-io/cypress/blob/master/.node-version&quot;&gt;ここで&lt;/a&gt;見つけることができます。</target>
        </trans-unit>
        <trans-unit id="6ce85bc1af7afb7a0ccc8d0454399d537be9ea00" translate="yes" xml:space="preserve">
          <source>You can force requests that do &lt;em&gt;not&lt;/em&gt; match a route to return a &lt;code&gt;404&lt;/code&gt; status and an empty body by passing an option to the &lt;code&gt;cy.server()&lt;/code&gt; like so:</source>
          <target state="translated">次のように &lt;code&gt;cy.server()&lt;/code&gt; にオプションを渡す&lt;em&gt;こと&lt;/em&gt;で、ルートに一致し&lt;em&gt;ない&lt;/em&gt;リクエストに強制的に &lt;code&gt;404&lt;/code&gt; ステータスと空の本文を返すことができます。</target>
        </trans-unit>
        <trans-unit id="bd4304e731086e33e0e57a31115a58826e9ee3f7" translate="yes" xml:space="preserve">
          <source>You can get details about any given screenshot and manipulate it after it has been written to disk with the &lt;a href=&quot;../plugins/after-screenshot-api&quot;&gt;&lt;code&gt;after:screenshot&lt;/code&gt; plugin event&lt;/a&gt;.</source>
          <target state="translated">所定のスクリーンショットの詳細を取得し、&lt;a href=&quot;../plugins/after-screenshot-api&quot;&gt; &lt;code&gt;after:screenshot&lt;/code&gt; プラグインイベント&lt;/a&gt;を使用してディスクに書き込まれた後で操作できます。</target>
        </trans-unit>
        <trans-unit id="f81ceee5fe45ac0a04018259c3f786dd7757967a" translate="yes" xml:space="preserve">
          <source>You can get your project&amp;rsquo;s record key by locating it in your settings tab in the Test Runner or in the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt;.</source>
          <target state="translated">プロジェクトのレコードキーを取得するには、テストランナーの[設定]タブまたは&lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;ダッシュボードサービスに配置し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ac560b0641950b1b1186f9110e022b90f0ac5546" translate="yes" xml:space="preserve">
          <source>You can globally disable animation error checking, or increase the threshold by modifying the &lt;a href=&quot;configuration&quot;&gt;configuration&lt;/a&gt; in your &lt;a href=&quot;configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">アニメーションエラーチェックをグローバルに無効にするか、&lt;a href=&quot;configuration&quot;&gt;構成&lt;/a&gt;で構成を変更してしきい値を増やすことができ&lt;a href=&quot;configuration&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e42e77e262790c44d05760ae6ba937b2ca2810ac" translate="yes" xml:space="preserve">
          <source>You can however send your own video file for testing by passing a Chrome command line switch pointing to a video file.</source>
          <target state="translated">ただし、Chrome のコマンドライン スイッチに動画ファイルを指定して、独自の動画ファイルを送信してテストすることもできます。</target>
        </trans-unit>
        <trans-unit id="353e67490c1bb57c25a41de380f16f7d5d3e8bf0" translate="yes" xml:space="preserve">
          <source>You can ignore Cypress&amp;rsquo; default behavior of checking that the element is visible, clickable and not disabled by setting &lt;code&gt;force&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the options.</source>
          <target state="translated">オプションで &lt;code&gt;force&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、要素が表示され、クリック可能であり、無効になっていないことを確認するサイプレスのデフォルトの動作を無視できます。</target>
        </trans-unit>
        <trans-unit id="4d243b7020b63c577424f535262ee8cfa58047b4" translate="yes" xml:space="preserve">
          <source>You can include the plugin &lt;a href=&quot;https://github.com/bahmutov/cypress-failed-log&quot;&gt;cypress-failed-log&lt;/a&gt; in your tests. This plugin writes the list of Cypress commands to the terminal as well as a JSON file if a test fails.</source>
          <target state="translated">プラグイン&lt;a href=&quot;https://github.com/bahmutov/cypress-failed-log&quot;&gt;cypress-failed-log&lt;/a&gt;をテストに含めることができます。このプラグインは、テストが失敗した場合に、サイプレスコマンドのリストとJSONファイルを端末に書き込みます。</target>
        </trans-unit>
        <trans-unit id="4f1d30e37722e1b89ae1d58cf72a5a09f71edab6" translate="yes" xml:space="preserve">
          <source>You can increase the time allowed to execute the command, although &lt;em&gt;we don&amp;rsquo;t recommend executing commands that take a long time to exit&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;終了までに時間がかかるコマンドの実行はお勧めしません&lt;/em&gt;が、コマンドの実行を許可する時間を増やすことができ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="82e453d00f6b5098c7e698201618716ea58d6a03" translate="yes" xml:space="preserve">
          <source>You can increase the time allowed to execute the task, although &lt;em&gt;we do not recommend executing tasks that take a long time to exit&lt;/em&gt;.</source>
          <target state="translated">タスクの実行を許可する時間を増やすことができますが、&lt;em&gt;終了するまでに時間がかかるタスクの実行はお勧めしません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="de3d1f1d6559c8bf05d9a09a07ef4ad28cc7914f" translate="yes" xml:space="preserve">
          <source>You can install any published plugin using NPM:</source>
          <target state="translated">NPMを使えば、公開されているプラグインをインストールすることができます。</target>
        </trans-unit>
        <trans-unit id="d95865b257586d6d508c100cd98a91fa2af8be80" translate="yes" xml:space="preserve">
          <source>You can install the Cypress binary from any URL or file path using the &lt;a href=&quot;../getting-started/installing-cypress#Advanced&quot;&gt;&lt;code&gt;CYPRESS_BINARY_VERSION&lt;/code&gt; environment variable&lt;/a&gt;. Closes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/701&quot;&gt;#701&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../getting-started/installing-cypress#Advanced&quot;&gt; &lt;code&gt;CYPRESS_BINARY_VERSION&lt;/code&gt; 環境変数&lt;/a&gt;を使用して、任意のURLまたはファイルパスからサイプレスバイナリをインストールできます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/701&quot;&gt;＃701を&lt;/a&gt;閉じます。</target>
        </trans-unit>
        <trans-unit id="b275caa249f35789b5a6b52732b967117fffee73" translate="yes" xml:space="preserve">
          <source>You can integrate your project with GitHub and edit its settings from within the project settings page.</source>
          <target state="translated">プロジェクトをGitHubに統合したり、プロジェクトの設定ページから設定を編集したりすることができます。</target>
        </trans-unit>
        <trans-unit id="86219c109eae21cebe8d7d1faa0d1a5a1b24b254" translate="yes" xml:space="preserve">
          <source>You can invite users to Cypress from the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt;. Invited users will see all projects and tests run for the organization.</source>
          <target state="translated">&lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;ダッシュボードサービス&lt;/a&gt;からサイプレスにユーザーを招待できます。招待されたユーザーには、組織に対して実行されたすべてのプロジェクトとテストが表示されます。</target>
        </trans-unit>
        <trans-unit id="f2c434326252254bff882591bbc39c757ede2834" translate="yes" xml:space="preserve">
          <source>You can launch Chrome browsers:</source>
          <target state="translated">Chromeブラウザを起動することができます。</target>
        </trans-unit>
        <trans-unit id="74dfe23dfd1d16ee92fb1e884cf413a8c9dec34c" translate="yes" xml:space="preserve">
          <source>You can launch any supported browser by specifying a path to the binary:</source>
          <target state="translated">バイナリのパスを指定することで、サポートされているブラウザを起動することができます。</target>
        </trans-unit>
        <trans-unit id="46e2dc84ba3c1deb51d796174810752816157a0d" translate="yes" xml:space="preserve">
          <source>You can make use of aliasing, &lt;a href=&quot;as&quot;&gt;&lt;code&gt;.as()&lt;/code&gt;&lt;/a&gt;, instead of working directly with the yielded data.</source>
          <target state="translated">生成されたデータを直接操作する代わりに、エイリアス&lt;a href=&quot;as&quot;&gt; &lt;code&gt;.as()&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="ba9d241fe58b4fd51988a52e710fb3ab9759bbb6" translate="yes" xml:space="preserve">
          <source>You can modify a command&amp;rsquo;s timeout. This timeout affects both its default assertions (if any) and any specific assertions you&amp;rsquo;ve added.</source>
          <target state="translated">コマンドのタイムアウトを変更できます。このタイムアウトは、デフォルトのアサーション（存在する場合）と追加した特定のアサーションの両方に影響します。</target>
        </trans-unit>
        <trans-unit id="6e9ded55098e6a24261534757bba5462a9b2f089" translate="yes" xml:space="preserve">
          <source>You can modify fixture data directly before passing it along to a route.</source>
          <target state="translated">ルートに渡す前に、フィクスチャデータを直接修正することができます。</target>
        </trans-unit>
        <trans-unit id="268849d6550ed973e88233729fd806557475af6f" translate="yes" xml:space="preserve">
          <source>You can modify the folder configuration in your &lt;code&gt;cypress.json&lt;/code&gt;. See &lt;a href=&quot;../references/configuration#Folders-Files&quot;&gt;configuration&lt;/a&gt; for more detail.</source>
          <target state="translated">&lt;code&gt;cypress.json&lt;/code&gt; でフォルダー構成を変更できます。詳細については、&lt;a href=&quot;../references/configuration#Folders-Files&quot;&gt;設定&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9ffae52ae8492e79e9f3e63f7316f6c6dfe695e1" translate="yes" xml:space="preserve">
          <source>You can modify the global defaults and preserve a set of Cookies which will always be preserved across tests.</source>
          <target state="translated">グローバルデフォルトを変更して、テスト中に常に保存される Cookie のセットを保存することができます。</target>
        </trans-unit>
        <trans-unit id="38963574c45938411d77bb86650a9bb6c1772c18" translate="yes" xml:space="preserve">
          <source>You can modify the global defaults and whitelist a set of Cookies which will always be preserved across tests.</source>
          <target state="translated">グローバルデフォルトを変更して、テスト中に常に保存される Cookie のセットをホワイトリスト化することができます。</target>
        </trans-unit>
        <trans-unit id="c0e314c1b8a88bd78d2167d2e1acfd3c1a1b764d" translate="yes" xml:space="preserve">
          <source>You can nest fixtures within folders and reference them by defining the path from the fixturesFolder:</source>
          <target state="translated">フィクスチャをフォルダ内に入れ子にして、fixturesFolderからパスを定義することで、それらを参照することができます。</target>
        </trans-unit>
        <trans-unit id="5258c2451cd4a326e045ffa1956e6f735e66b388" translate="yes" xml:space="preserve">
          <source>You can no longer improperly use &lt;a href=&quot;../../api/commands/its&quot;&gt;&lt;code&gt;.its()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/invoke&quot;&gt;&lt;code&gt;.invoke()&lt;/code&gt;&lt;/a&gt;. Using &lt;a href=&quot;../../api/commands/invoke&quot;&gt;&lt;code&gt;.invoke()&lt;/code&gt;&lt;/a&gt; on a non function property will result in an error that tells you how to write it properly using &lt;a href=&quot;../../api/commands/its&quot;&gt;&lt;code&gt;.its()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/its&quot;&gt; &lt;code&gt;.its()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../api/commands/invoke&quot;&gt; &lt;code&gt;.invoke()&lt;/code&gt; を&lt;/a&gt;不適切に使用することはできなくなりました。使用&lt;a href=&quot;../../api/commands/invoke&quot;&gt; &lt;code&gt;.invoke()&lt;/code&gt; &lt;/a&gt;以外の関数プロパティには、使用して適切にそれを記述する方法を説明しますとエラーになります&lt;a href=&quot;../../api/commands/its&quot;&gt; &lt;code&gt;.its()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ece224cc6591037f5d9540aab7d82ff657aa2511" translate="yes" xml:space="preserve">
          <source>You can now &lt;a href=&quot;../../api/events/catalog-of-events&quot;&gt;disable Cypress global exception handlers&lt;/a&gt; for your application. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/254&quot;&gt;#254&lt;/a&gt;</source>
          <target state="translated">これで、アプリケーションの&lt;a href=&quot;../../api/events/catalog-of-events&quot;&gt;サイプレスグローバル例外ハンドラー&lt;/a&gt;を無効にできます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/254&quot;&gt;＃254の&lt;/a&gt;修正</target>
        </trans-unit>
        <trans-unit id="7f6c8741bc92d985041c76c28111a4e5bec73e60" translate="yes" xml:space="preserve">
          <source>You can now &lt;a href=&quot;../getting-started/installing-cypress&quot;&gt;install Cypress as a real &lt;code&gt;npm&lt;/code&gt; module&lt;/a&gt;, and even &lt;code&gt;require&lt;/code&gt; it in your node files.</source>
          <target state="translated">これで&lt;a href=&quot;../getting-started/installing-cypress&quot;&gt;、サイプレスを実際の &lt;code&gt;npm&lt;/code&gt; モジュールとしてインストール&lt;/a&gt;できるようになり、ノードファイルでそれを &lt;code&gt;require&lt;/code&gt; こともできます。</target>
        </trans-unit>
        <trans-unit id="5680e07c33853ea5c9b4de59fbef6b160e725b11" translate="yes" xml:space="preserve">
          <source>You can now &lt;a href=&quot;../tooling/reporters&quot;&gt;add or write your own custom reporters&lt;/a&gt;. This means you can &lt;code&gt;npm install xyz-mocha-reporter&lt;/code&gt; and we&amp;rsquo;ll automatically correctly &lt;code&gt;require&lt;/code&gt; that package. Alternatively you can write your own &lt;code&gt;xyz-custom_reporter.js&lt;/code&gt; file. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/231&quot;&gt;#231&lt;/a&gt;.</source>
          <target state="translated">これで&lt;a href=&quot;../tooling/reporters&quot;&gt;、独自のカスタムレポーターを追加または作成できます&lt;/a&gt;。これは、 &lt;code&gt;npm install xyz-mocha-reporter&lt;/code&gt; をnpmインストールできることを意味します。このパッケージは自動的に正しく &lt;code&gt;require&lt;/code&gt; になります。または、独自の &lt;code&gt;xyz-custom_reporter.js&lt;/code&gt; ファイルを作成することもできます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/231&quot;&gt;＃231を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="0765f34270ac09c7d9ced98e0e75f5138ceb2326" translate="yes" xml:space="preserve">
          <source>You can now call &lt;a href=&quot;../../api/commands/focus&quot;&gt;&lt;code&gt;.focus()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/blur&quot;&gt;&lt;code&gt;.blur()&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;../../api/commands/window&quot;&gt;&lt;code&gt;cy.window()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これで、呼び出すことができます&lt;a href=&quot;../../api/commands/focus&quot;&gt; &lt;code&gt;.focus()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../api/commands/blur&quot;&gt; &lt;code&gt;.blur()&lt;/code&gt; &lt;/a&gt;上&lt;a href=&quot;../../api/commands/window&quot;&gt; &lt;code&gt;cy.window()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8feefa9fed92a283287c1cb630012766eac5156c" translate="yes" xml:space="preserve">
          <source>You can now customize the default Babe; configuration options for the Browserify preprocessor. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/343&quot;&gt;#343&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/905&quot;&gt;#905&lt;/a&gt;.</source>
          <target state="translated">これでデフォルトのBabeをカスタマイズできます。Browserifyプリプロセッサの構成オプション。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/343&quot;&gt;＃343&lt;/a&gt;と&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/905&quot;&gt;＃905を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="6122353f44506f72a3680590c0f0b5087d6858af" translate="yes" xml:space="preserve">
          <source>You can now disable &lt;code&gt;videoCompression&lt;/code&gt; by passing &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;cypress.json&lt;/code&gt; or env variables. In very long runs and on CPU throttled instances compression can take a considerable amount of time, possibly as much as 50% of the time spent running actual tests. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/372&quot;&gt;#372&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cypress.json&lt;/code&gt; またはenv変数に &lt;code&gt;false&lt;/code&gt; を渡すことにより、videoCompressionを無効にできるように &lt;code&gt;videoCompression&lt;/code&gt; ました。非常に長い実行とCPUスロットルインスタンスでは、圧縮にかなりの時間がかかり、実際のテストの実行に費やした時間の50％ほどになる可能性があります。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/372&quot;&gt;＃372を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="712559d3a93d9cdad79cd3343451ce05ecd5814a" translate="yes" xml:space="preserve">
          <source>You can now disable the force sending of &lt;code&gt;404&lt;/code&gt; to all XHR&amp;rsquo;s which are not stubbed. This allows you to mix and match, enabling some requests to be stubbed and others to hit your server and respond normally.</source>
          <target state="translated">スタブされていないすべてのXHRへの &lt;code&gt;404&lt;/code&gt; の強制送信を無効にできるようになりました。これにより、さまざまな要求をスタブ化し、他の要求をサーバーにヒットして通常どおりに応答させることができます。</target>
        </trans-unit>
        <trans-unit id="20d67d23501ad6a8707df3918f7feae7d0572c0b" translate="yes" xml:space="preserve">
          <source>You can now force other additional response headers to be sent on stubbed XHRs.</source>
          <target state="translated">これで、スタブされたXHRで他の追加の応答ヘッダを強制的に送信できるようになりました。</target>
        </trans-unit>
        <trans-unit id="899619b79724c677d1afafc90146b76d878a885c" translate="yes" xml:space="preserve">
          <source>You can now opt out of sending exceptions to &lt;code&gt;https://api.cypress.io&lt;/code&gt; by setting &lt;code&gt;CYPRESS_CRASH_REPORTS=0&lt;/code&gt; in your system environment variables. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/4386&quot;&gt;#4386&lt;/a&gt;</source>
          <target state="translated">システム環境変数で &lt;code&gt;CYPRESS_CRASH_REPORTS=0&lt;/code&gt; を設定することにより、 &lt;code&gt;https://api.cypress.io&lt;/code&gt; //api.cypress.ioへの例外の送信をオプトアウトできるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/4386&quot;&gt;＃4386&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eb9e11c211b7518d8b0d00cb81d803e6bc1ccdde" translate="yes" xml:space="preserve">
          <source>You can now overwrite existing commands with &lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt;&lt;code&gt;Cypress.Commands.overwrite&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt; &lt;code&gt;Cypress.Commands.overwrite&lt;/code&gt; で&lt;/a&gt;既存のコマンドを上書きできるようになりました。</target>
        </trans-unit>
        <trans-unit id="9559413240a3ca49f0aeb8a6bb2ed1190c0fa94a" translate="yes" xml:space="preserve">
          <source>You can now pass a &lt;code&gt;flag&lt;/code&gt; option to &lt;a href=&quot;../../api/commands/writefile&quot;&gt;&lt;code&gt;cy.writeFile()&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;https://nodejs.org/api/fs.html#fs_file_system_flags&quot;&gt;following flags&lt;/a&gt; are available. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1249&quot;&gt;#1249&lt;/a&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;flag&lt;/code&gt; オプションを&lt;a href=&quot;../../api/commands/writefile&quot;&gt; &lt;code&gt;cy.writeFile()&lt;/code&gt; に&lt;/a&gt;渡すことができます。&lt;a href=&quot;https://nodejs.org/api/fs.html#fs_file_system_flags&quot;&gt;以下のフラグが&lt;/a&gt;用意されています。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1249&quot;&gt;＃1249を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="35d2b0974800617df9ce9d53af5d17e80ee10d79" translate="yes" xml:space="preserve">
          <source>You can now pass a browser option to &lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt; as &lt;code&gt;--browser &amp;lt;browser name&amp;gt;&lt;/code&gt;. This enables you to run the same set of browsers when running from the CLI as when you&amp;rsquo;re running from the GUI. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/462&quot;&gt;#462&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/531&quot;&gt;#531&lt;/a&gt;.</source>
          <target state="translated">これで、ブラウザーオプションを &lt;code&gt;--browser &amp;lt;browser name&amp;gt;&lt;/code&gt; として&lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt; &lt;code&gt;cypress run&lt;/code&gt; &lt;/a&gt;するサイプレスに渡すことができます。これにより、CLIから実行する場合と同じように、GUIから実行する場合と同じブラウザーのセットを実行できます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/462&quot;&gt;＃462&lt;/a&gt;と&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/531&quot;&gt;＃531を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="e5e480fde137a4b850caed59f517e6b52aed45fc" translate="yes" xml:space="preserve">
          <source>You can now pass a normal object to &lt;code&gt;cypress.open()&lt;/code&gt; or &lt;code&gt;cypress.run()&lt;/code&gt; through the &lt;a href=&quot;../guides/module-api&quot;&gt;Module API&lt;/a&gt;, just as you would from the command line. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1442&quot;&gt;#1442&lt;/a&gt;.</source>
          <target state="translated">コマンドラインからの場合と同じように、&lt;a href=&quot;../guides/module-api&quot;&gt;モジュールAPI&lt;/a&gt;を介して通常のオブジェクトを &lt;code&gt;cypress.open()&lt;/code&gt; または &lt;code&gt;cypress.run()&lt;/code&gt; に渡すことができるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1442&quot;&gt;＃1442&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0785a54f6c3288ada1c045b8687dacb180c62e42" translate="yes" xml:space="preserve">
          <source>You can now pass an object literal as &lt;code&gt;config&lt;/code&gt; when using Cypress as a node module. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/639&quot;&gt;#639&lt;/a&gt;.</source>
          <target state="translated">サイプレスをノードモジュールとして使用するときに、オブジェクトリテラルを &lt;code&gt;config&lt;/code&gt; として渡すことができるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/639&quot;&gt;＃639を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="0b3b1753fed5f2d2b7b2d7c23e19df557bac55b1" translate="yes" xml:space="preserve">
          <source>You can now pass keyboard modifiers such as &lt;code&gt;ctrl&lt;/code&gt;, &lt;code&gt;cmd&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, and &lt;code&gt;alt&lt;/code&gt; to &lt;a href=&quot;../../api/commands/type&quot;&gt;&lt;code&gt;.type()&lt;/code&gt;&lt;/a&gt;. In addition we&amp;rsquo;ve added support for not &amp;ldquo;releasing&amp;rdquo; these keys so they can affect other actions such as &lt;a href=&quot;../../api/commands/click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt;. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/196&quot;&gt;#196&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ctrl&lt;/code&gt; 、 &lt;code&gt;cmd&lt;/code&gt; 、 &lt;code&gt;shift&lt;/code&gt; 、 &lt;code&gt;alt&lt;/code&gt; などのキーボード修飾子を&lt;a href=&quot;../../api/commands/type&quot;&gt; &lt;code&gt;.type()&lt;/code&gt; に&lt;/a&gt;渡すことができるようになりました。さらに、これらのキーを「解放」しないサポートを追加したので、それらは&lt;a href=&quot;../../api/commands/click&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;などの他のアクションに影響を与えることができます。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/196&quot;&gt;＃196&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a81d9c165fdd3ac6701832c2f5e0182d43e7295d" translate="yes" xml:space="preserve">
          <source>You can now programmatically &lt;a href=&quot;../../api/events/catalog-of-events&quot;&gt;intercept and potentially turn off uncaught application errors&lt;/a&gt; from failing your tests.</source>
          <target state="translated">プログラムで&lt;a href=&quot;../../api/events/catalog-of-events&quot;&gt;インターセプトし、キャッチされなかったアプリケーションエラー&lt;/a&gt;をテストの失敗からオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="138d7132a9353a5b49ed6b47667bd99c0281d4b2" translate="yes" xml:space="preserve">
          <source>You can now programmatically control whether you accept or cancel &lt;a href=&quot;../../api/events/catalog-of-events&quot;&gt;&lt;code&gt;window.confirm()&lt;/code&gt;&lt;/a&gt; calls from your application.</source>
          <target state="translated">アプリケーションから&lt;a href=&quot;../../api/events/catalog-of-events&quot;&gt; &lt;code&gt;window.confirm()&lt;/code&gt; &lt;/a&gt;呼び出しを受け入れるかキャンセルするかをプログラムで制御できるようになりました。</target>
        </trans-unit>
        <trans-unit id="7623fcd4d1628bae4e1b7ad1761dcbef8afc7a70" translate="yes" xml:space="preserve">
          <source>You can now run all of your tests inside of the GUI App.</source>
          <target state="translated">これで、すべてのテストをGUIアプリ内で実行できるようになりました。</target>
        </trans-unit>
        <trans-unit id="c64804a37af779bbe2592b2c3bf4afaaa3e219e2" translate="yes" xml:space="preserve">
          <source>You can now run and omit the &lt;code&gt;--key&lt;/code&gt; flag:</source>
          <target state="translated">これで、 &lt;code&gt;--key&lt;/code&gt; フラグを実行して省略できます。</target>
        </trans-unit>
        <trans-unit id="3bf62b732cce7d08d2b31bcd631494149ab3518e" translate="yes" xml:space="preserve">
          <source>You can now run multiple specs by passing a glob to the &lt;code&gt;--spec&lt;/code&gt; argument of &lt;code&gt;cypress run&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/263&quot;&gt;#263&lt;/a&gt;, &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/416&quot;&gt;#416&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/681&quot;&gt;#681&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cypress run&lt;/code&gt; &lt;code&gt;--spec&lt;/code&gt; 引数にグロブを渡すことで、複数のスペックを実行できるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/263&quot;&gt;＃263&lt;/a&gt;、&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/416&quot;&gt;＃416&lt;/a&gt;、および&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/681&quot;&gt;＃681を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="45640b87476c3305f0b7e13caef65bb39c529a54" translate="yes" xml:space="preserve">
          <source>You can now run your tests in the &lt;a href=&quot;../guides/launching-browsers#Electron-Browser&quot;&gt;Electron browser&lt;/a&gt; that comes built with Cypress. You will see it as an option in the browser dropdown. This is the same browser that Cypress uses when running &lt;code&gt;cypress run&lt;/code&gt;. This is useful for debugging issues that only occur during headless runs. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/452&quot;&gt;#452&lt;/a&gt;.</source>
          <target state="translated">これで、サイプレスに組み込まれている&lt;a href=&quot;../guides/launching-browsers#Electron-Browser&quot;&gt;Electronブラウザー&lt;/a&gt;でテストを実行できます。ブラウザのドロップダウンにオプションとして表示されます。これは、サイプレスが &lt;code&gt;cypress run&lt;/code&gt; を実行するときに使用するブラウザと同じです。これは、ヘッドレス実行中にのみ発生する問題のデバッグに役立ちます。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/452&quot;&gt;＃452&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ec53cb8fd64f5f52a4282b6c5e9cd12983e338da" translate="yes" xml:space="preserve">
          <source>You can now set the default &lt;a href=&quot;configuration&quot;&gt;&lt;code&gt;reporter&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;cypress.json&lt;/code&gt; for use during &lt;code&gt;cypress run&lt;/code&gt; or in CI.</source>
          <target state="translated">&lt;code&gt;cypress.json&lt;/code&gt; でデフォルトの&lt;a href=&quot;configuration&quot;&gt; &lt;code&gt;reporter&lt;/code&gt; &lt;/a&gt;を設定して、 &lt;code&gt;cypress run&lt;/code&gt; 中またはCI で使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="bd5379dfca4df4d3b27774dbb439c7dfe0adf4fe" translate="yes" xml:space="preserve">
          <source>You can now stop and restart tests from the UI.</source>
          <target state="translated">UIからテストを停止して再起動できるようになりました。</target>
        </trans-unit>
        <trans-unit id="fc14b634efcdaee12ffae4a5baf0f8512a6f38ef" translate="yes" xml:space="preserve">
          <source>You can now turn off &lt;code&gt;supportFolder&lt;/code&gt; and &lt;code&gt;fixturesFolder&lt;/code&gt; by passing &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;cypress.json&lt;/code&gt;. This will automatically remove the folders the next time you open your project in Cypress. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/102&quot;&gt;#102&lt;/a&gt;.</source>
          <target state="translated">あなたは今オフにすることができ &lt;code&gt;supportFolder&lt;/code&gt; と &lt;code&gt;fixturesFolder&lt;/code&gt; を渡すことで、 &lt;code&gt;false&lt;/code&gt; で &lt;code&gt;cypress.json&lt;/code&gt; 。これにより、次回サイプレスでプロジェクトを開いたときにフォルダーが自動的に削除されます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/102&quot;&gt;＃102を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="c4721446938ebfeb10d08fe7b676b4f960b45827" translate="yes" xml:space="preserve">
          <source>You can now type into the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; or &lt;code&gt;document&lt;/code&gt; as opposed to previously &lt;em&gt;having&lt;/em&gt; to target a valid focusable element. This is useful in situations where you&amp;rsquo;re testing keyboard shortcuts and do not want to target a specific element. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/150&quot;&gt;#150&lt;/a&gt;.</source>
          <target state="translated">以前は有効なフォーカス可能な要素をターゲットにする必要が&lt;em&gt;あっ&lt;/em&gt;たのとは対照的に、 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; または &lt;code&gt;document&lt;/code&gt; 入力できます。これは、キーボードショートカットをテストしていて、特定の要素をターゲットにしたくない場合に役立ちます。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/150&quot;&gt;＃150&lt;/a&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1ef09dd6a0cadfc84b178dfb9fb73fdbd41e818e" translate="yes" xml:space="preserve">
          <source>You can now use &lt;a href=&quot;../../api/commands/focus&quot;&gt;&lt;code&gt;.focus()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../api/commands/blur&quot;&gt;&lt;code&gt;.blur()&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;cy.get('body')&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2235&quot;&gt;#2235&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cy.get('body')&lt;/code&gt; で&lt;a href=&quot;../../api/commands/focus&quot;&gt; &lt;code&gt;.focus()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../api/commands/blur&quot;&gt; &lt;code&gt;.blur()&lt;/code&gt; &lt;/a&gt;を使用できるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2235&quot;&gt;＃2235を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="942d3b9d1d9095e8dd2beb6c2f1c97aca0c68f0e" translate="yes" xml:space="preserve">
          <source>You can now use &lt;a href=&quot;../../api/commands/stub&quot;&gt;&lt;code&gt;cy.stub()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/spy&quot;&gt;&lt;code&gt;cy.spy()&lt;/code&gt;&lt;/a&gt; synchronously. These both match the Sinon API identically. We will display &lt;code&gt;stub/spy&lt;/code&gt; calls in the Command Log and provide the call count, arguments, context, and return values when you click on the log. Stubs are automatically reset between tests. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/377&quot;&gt;#377&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/stub&quot;&gt; &lt;code&gt;cy.stub()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../api/commands/spy&quot;&gt; &lt;code&gt;cy.spy()&lt;/code&gt; を&lt;/a&gt;同期的に使用できるようになりました。これらは両方とも、Sinon APIとまったく同じです。コマンドログに &lt;code&gt;stub/spy&lt;/code&gt; 呼び出しを表示し、ログをクリックすると、呼び出し数、引数、コンテキスト、および戻り値を提供します。スタブはテスト間で自動的にリセットされます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/377&quot;&gt;＃377を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="79e8206517830b8225596c03133251ab6833111c" translate="yes" xml:space="preserve">
          <source>You can now use environment variables that have a &lt;code&gt;=&lt;/code&gt; character as values. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/620&quot;&gt;#620&lt;/a&gt;. Contributed by &lt;a href=&quot;https://github.com/HugoGiraudel&quot;&gt;@HugoGiraudel&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; 文字を値として持つ環境変数を使用できるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/620&quot;&gt;＃620を&lt;/a&gt;修正。&lt;a href=&quot;https://github.com/HugoGiraudel&quot;&gt;@HugoGiraudel&lt;/a&gt;による寄稿。</target>
        </trans-unit>
        <trans-unit id="29bbd0400cd893e20dc7cee46c1fa1932fe383f9" translate="yes" xml:space="preserve">
          <source>You can now use the Test Runner application without logging in. Some areas of the application still require logging in through GitHub, like the &amp;lsquo;Runs&amp;rsquo; tab and viewing the project&amp;rsquo;s &amp;lsquo;Record Key&amp;rsquo;. The only places where login is required is when it interacts with our external servers. Naturally these places are optional and will not affect the local test writing + running experience.</source>
          <target state="translated">ログインせずにテストランナーアプリケーションを使用できるようになりました。アプリケーションの一部の領域では、「実行」タブやプロジェクトの「レコードキー」の表示など、GitHubを介してログインする必要があります。ログインが必要なのは、外部サーバーとやり取りするときだけです。当然、これらの場所はオプションであり、ローカルのテスト作成+実行エクスペリエンスには影響しません。</target>
        </trans-unit>
        <trans-unit id="8de4972db5eb3c931e400e2a110f6c96d78cd5b2" translate="yes" xml:space="preserve">
          <source>You can now use your regularly installed &lt;code&gt;node_modules&lt;/code&gt; in your project to do things like utilizing &lt;a href=&quot;https://lodash.com/&quot;&gt;&lt;code&gt;lodash&lt;/code&gt;&lt;/a&gt; for utility functions or extending &lt;a href=&quot;http://www.chaijs.com/&quot;&gt;&lt;code&gt;chai&lt;/code&gt;&lt;/a&gt; with assertion plugins.</source>
          <target state="translated">プロジェクトに定期的にインストールされた &lt;code&gt;node_modules&lt;/code&gt; を使用して、ユーティリティ関数に&lt;a href=&quot;https://lodash.com/&quot;&gt; &lt;code&gt;lodash&lt;/code&gt; &lt;/a&gt;を利用したり、アサーションプラグインで&lt;a href=&quot;http://www.chaijs.com/&quot;&gt; &lt;code&gt;chai&lt;/code&gt; &lt;/a&gt;を拡張したりすることができます。</target>
        </trans-unit>
        <trans-unit id="95297733ad8226fb0378093b3ac94e6ce247e579" translate="yes" xml:space="preserve">
          <source>You can now zoom in the main Test Runner window and also the Electron browser. Corresponding keyboard shortcuts for Zoom in, Zoom out and Actual Size are also available. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1231&quot;&gt;#1231&lt;/a&gt;.</source>
          <target state="translated">これで、メインのテストランナーウィンドウとElectronブラウザーを拡大できます。ズームイン、ズームアウト、実際のサイズに対応するキーボードショートカットも利用できます。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1231&quot;&gt;＃1231&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5be6e5857a73b45348dde23e2452fc92891dee85" translate="yes" xml:space="preserve">
          <source>You can pass &lt;code&gt;--headed --no-exit&lt;/code&gt; in order to view the &lt;strong&gt;command log&lt;/strong&gt; or have access to &lt;strong&gt;developer tools&lt;/strong&gt; after a &lt;code&gt;spec&lt;/code&gt; has run.</source>
          <target state="translated">&lt;strong&gt;コマンドログ&lt;/strong&gt;を表示したり、 &lt;code&gt;spec&lt;/code&gt; 実行後に&lt;strong&gt;開発者ツール&lt;/strong&gt;にアクセスしたりするには、 &lt;code&gt;--headed --no-exit&lt;/code&gt; 渡します。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce6cd293bdd6cb1e8bb1cbe322a68a49007a7c1b" translate="yes" xml:space="preserve">
          <source>You can pass &lt;code&gt;{ force: true }&lt;/code&gt; to most action commands.</source>
          <target state="translated">ほとんどのアクションコマンドに &lt;code&gt;{ force: true }&lt;/code&gt; を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="95f1fd98298ede2c01c8184bf72064cd2e4c990d" translate="yes" xml:space="preserve">
          <source>You can pass Electron-specific launch arguments using the &lt;code&gt;ELECTRON_EXTRA_LAUNCH_ARGS&lt;/code&gt; environment variable. For example, to disable HTTP browser cache and ignore certificate errors, you can set the environment variables before running Cypress like below:</source>
          <target state="translated">&lt;code&gt;ELECTRON_EXTRA_LAUNCH_ARGS&lt;/code&gt; 環境変数を使用して、Electron固有の起動引数を渡すことができます。たとえば、HTTPブラウザキャッシュを無効にして証明書エラーを無視するには、次のようにサイプレスを実行する前に環境変数を設定できます。</target>
        </trans-unit>
        <trans-unit id="c8e8f933c73a0a7fdcfc434c40860ed412dde843" translate="yes" xml:space="preserve">
          <source>You can pass a different value to link agents to the same run. For example, if you are using Jenkins and think the environment variable &lt;code&gt;BUILD_TAG&lt;/code&gt; is more unique than the environment variable &lt;code&gt;BUILD_NUMBER&lt;/code&gt;, pass the &lt;code&gt;BUILD_TAG&lt;/code&gt; value via CLI &lt;a href=&quot;command-line#cypress-run-ci-build-id-lt-id-gt&quot;&gt;&lt;code&gt;--ci-build-id&lt;/code&gt; flag&lt;/a&gt;.</source>
          <target state="translated">異なる値を渡して、エージェントを同じ実行にリンクすることができます。あなたは、環境変数をジェンキンスを使用して考えている場合たとえば、 &lt;code&gt;BUILD_TAG&lt;/code&gt; は、環境変数よりもユニークです &lt;code&gt;BUILD_NUMBER&lt;/code&gt; 、合格 &lt;code&gt;BUILD_TAG&lt;/code&gt; の値を経由してCLI &lt;a href=&quot;command-line#cypress-run-ci-build-id-lt-id-gt&quot;&gt; &lt;code&gt;--ci-build-id&lt;/code&gt; フラグを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="09383e1d5f1fbad75c9300dd9efb4373486f2d9b" translate="yes" xml:space="preserve">
          <source>You can pass an array of aliases that will be waited on before resolving.</source>
          <target state="translated">解決する前に待機するエイリアスの配列を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="baa5e9a56cb2b2c60dc571c37bff5374f786fef3" translate="yes" xml:space="preserve">
          <source>You can pass in a &lt;code&gt;delay&lt;/code&gt; option that causes a delay (in ms) to the &lt;code&gt;response&lt;/code&gt; for matched requests. The example below will cause the response to be delayed by 3 secs. This can be useful for testing loading states, like loading spinners, in the DOM before the request responds.</source>
          <target state="translated">一致した要求の &lt;code&gt;response&lt;/code&gt; 遅延（ミリ秒単位）を引き起こす &lt;code&gt;delay&lt;/code&gt; オプションを渡すことができます。以下の例では、応答が3秒遅れます。これは、リクエストが応答する前に、DOMでスピナーの読み込みなどの読み込み状態をテストするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="95596200293024877f6efba1b6965118d0a1a1d2" translate="yes" xml:space="preserve">
          <source>You can preview all issues addressed from a pre-release version &lt;a href=&quot;https://github.com/cypress-io/cypress/issues?utf8=%E2%9C%93&amp;amp;q=label%3A%22stage%3A+pending+release%22+&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/cypress-io/cypress/issues?utf8=%E2%9C%93&amp;amp;q=label%3A%22stage%3A+pending+release%22+&quot;&gt;ここで&lt;/a&gt;は、プレリリースバージョンから対処されたすべての問題をプレビューできます。</target>
        </trans-unit>
        <trans-unit id="83a25889c934de24f12625a4e517844ca663b8be" translate="yes" xml:space="preserve">
          <source>You can programmatically modify these values and Cypress will then respect these changes. This enables you to swap out configuration based on things like the environment you&amp;rsquo;re running in.</source>
          <target state="translated">プログラムでこれらの値を変更すると、サイプレスはこれらの変更を尊重します。これにより、実行中の環境などに基づいて構成を交換できます。</target>
        </trans-unit>
        <trans-unit id="b5acd5847d4bace3e744730c10667c02a81f076c" translate="yes" xml:space="preserve">
          <source>You can provide a &lt;a href=&quot;../utilities/minimatch&quot;&gt;minimatch&lt;/a&gt; pattern</source>
          <target state="translated">&lt;a href=&quot;../utilities/minimatch&quot;&gt;ミニマッチ&lt;/a&gt;パターンを提供できます</target>
        </trans-unit>
        <trans-unit id="1ec0d1c73f020c928d7c6393427f5add1e08221e" translate="yes" xml:space="preserve">
          <source>You can provide a substring of the URL to match</source>
          <target state="translated">にマッチする URL の部分文字列を提供することができます。</target>
        </trans-unit>
        <trans-unit id="e9578295d9b3f3aec59dba7dc4ee111b9ad14c3a" translate="yes" xml:space="preserve">
          <source>You can provide query parameters as an object to &lt;code&gt;cy.visit()&lt;/code&gt; by passing &lt;code&gt;qs&lt;/code&gt; to &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;qs&lt;/code&gt; を &lt;code&gt;options&lt;/code&gt; に渡すことにより、クエリパラメータを &lt;code&gt;cy.visit()&lt;/code&gt; のオブジェクトとして提供できます。</target>
        </trans-unit>
        <trans-unit id="e251fcb3775b061b4ded433a4d6827c0a8dba5ad" translate="yes" xml:space="preserve">
          <source>You can provide the entire URL to match</source>
          <target state="translated">マッチするようにURL全体を提供することができます。</target>
        </trans-unit>
        <trans-unit id="1c924b81f8b6a5f981ef5f631b0fc68ee89248d8" translate="yes" xml:space="preserve">
          <source>You can quickly get to a project&amp;rsquo;s GitHub Integrations settings, by clicking on the &lt;strong&gt;Configure&lt;/strong&gt; link of the desired project within an organization&amp;rsquo;s Integrations page:</source>
          <target state="translated">組織の[統合]ページ内で目的のプロジェクトの[ &lt;strong&gt;構成]&lt;/strong&gt;リンクをクリックすると、プロジェクトのGitHub統合設定にすばやくアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d482e895eaa5b3578ddfb67a017dd106d821e27c" translate="yes" xml:space="preserve">
          <source>You can read all about how to do &lt;a href=&quot;conditional-testing&quot;&gt;conditional testing&lt;/a&gt; here.</source>
          <target state="translated">&lt;a href=&quot;conditional-testing&quot;&gt;条件付きテストの&lt;/a&gt;実行方法については、こちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="093d8c97f842f7cee5f704db68c73235cfd0a099" translate="yes" xml:space="preserve">
          <source>You can refer to each of these libraries&amp;rsquo; documentation for more examples and explanations.</source>
          <target state="translated">その他の例と説明については、これらの各ライブラリのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d4220931c77cd1b78d9b949f7d01e10002cca5a7" translate="yes" xml:space="preserve">
          <source>You can require Cypress as a node module from your application under test. This can be useful when you want to access to the test results directly after the run. With this workflow, for example, you can:</source>
          <target state="translated">テスト中のアプリケーションからノードモジュールとしてCypressを要求することができます。これは、実行後に直接テスト結果にアクセスしたい場合に便利です。例えば、このワークフローでは、以下のようにできます。</target>
        </trans-unit>
        <trans-unit id="a6d06f2b1adb2d4129788844caa528ecf1cda1ad" translate="yes" xml:space="preserve">
          <source>You can restore the clock and allow your application to resume normally without manipulating native global functions related to time. This is automatically called between tests.</source>
          <target state="translated">時計を復元して、時間に関連するネイティブのグローバル関数を操作せずにアプリケーションを正常に再開できるようにすることができます。これはテストの間に自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9729098893650c87d3fe783fa897d1c93cb9e161" translate="yes" xml:space="preserve">
          <source>You can retry any function with attached assertions using this 3rd party plugin &lt;a href=&quot;https://github.com/NicholasBoll/cypress-pipe&quot;&gt;cypress-pipe&lt;/a&gt;.</source>
          <target state="translated">このサードパーティのプラグイン&lt;a href=&quot;https://github.com/NicholasBoll/cypress-pipe&quot;&gt;cypress-pipe&lt;/a&gt;を使用して、アサーションが添付された関数を再試行できます。</target>
        </trans-unit>
        <trans-unit id="3ca8daa58bccea2736c00e6d18178cc413797e53" translate="yes" xml:space="preserve">
          <source>You can return a promise from the &lt;code&gt;after:run&lt;/code&gt; event handler and it will be awaited before Cypress proceeds running your specs.</source>
          <target state="translated">&lt;code&gt;after:run&lt;/code&gt; イベントハンドラーからpromiseを返すことができ、サイプレスが仕様の実行を続行する前にそれが待機されます。</target>
        </trans-unit>
        <trans-unit id="67f0b06a17d33551d6201ba13debb52bb81db144" translate="yes" xml:space="preserve">
          <source>You can return a promise from the &lt;code&gt;after:spec&lt;/code&gt; event handler and it will be awaited before Cypress proceeds with processing the spec&amp;rsquo;s video or moving on to further specs if there are any.</source>
          <target state="translated">&lt;code&gt;after:spec&lt;/code&gt; イベントハンドラーからpromiseを返すことができます。これは、サイプレスが仕様のビデオの処理を続行するか、仕様がある場合はさらに仕様に進む前に待機されます。</target>
        </trans-unit>
        <trans-unit id="0737daddca1d0c26b60880c56637aaca6d3b5a37" translate="yes" xml:space="preserve">
          <source>You can return a promise from the &lt;code&gt;before:run&lt;/code&gt; event handler and it will be awaited before Cypress proceeds running your specs.</source>
          <target state="translated">&lt;code&gt;before:run&lt;/code&gt; イベントハンドラーからpromiseを返すことができ、Cypressが仕様の実行を続行する前にそれが待機されます。</target>
        </trans-unit>
        <trans-unit id="e1325019e5cbb795850e58b6d8f48a4e5382bc28" translate="yes" xml:space="preserve">
          <source>You can return a promise from the &lt;code&gt;before:spec&lt;/code&gt; event handler and it will be awaited before Cypress proceeds running the spec.</source>
          <target state="translated">&lt;code&gt;before:spec&lt;/code&gt; イベントハンドラーからpromiseを返すことができ、サイプレスがスペックの実行を続行する前にそれが待機されます。</target>
        </trans-unit>
        <trans-unit id="2b021998ab49659091a319a0899f8da252e029c4" translate="yes" xml:space="preserve">
          <source>You can return a synchronous function, or you can also return a Promise, and it will be awaited until it resolves. This enables you to perform asynchronous actions in your exported function such as reading files in from the filesystem.</source>
          <target state="translated">同期関数を返すこともできますし、Promiseを返すこともできます。これにより、エクスポートした関数でファイルシステムからファイルを読み込むなどの非同期アクションを実行することができます。</target>
        </trans-unit>
        <trans-unit id="5c3b3c87f4945d647d11b09a1116a3b25970d659" translate="yes" xml:space="preserve">
          <source>You can return an object or a promise that resolves an object from the callback function. Any type of value other than an object will be ignored. The object can contain the following properties:</source>
          <target state="translated">コールバック関数からオブジェクトまたはオブジェクトを解決するプロミスを返すことができます。オブジェクト以外の型の値は無視されます。オブジェクトには、以下のプロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="fdfcd8df61569a4b4f2445e5510b44f4634a238a" translate="yes" xml:space="preserve">
          <source>You can return an object or a promise that resolves to an object from the callback function. &lt;em&gt;Any type of returned value other than an object will be ignored.&lt;/em&gt; The object can contain the following properties:</source>
          <target state="translated">コールバック関数から、オブジェクトまたはオブジェクトに解決されるプロミスを返すことができます。&lt;em&gt;オブジェクト以外のタイプの戻り値はすべて無視されます。&lt;/em&gt;オブジェクトには、次のプロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="0972f826468d740f3213d9220231dfa30ce1b776" translate="yes" xml:space="preserve">
          <source>You can run the test command by command using the &lt;a href=&quot;../../api/commands/pause&quot;&gt;&lt;code&gt;.pause()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/pause&quot;&gt; &lt;code&gt;.pause()&lt;/code&gt; &lt;/a&gt;コマンドを使用して、コマンドごとにテストコマンドを実行できます。</target>
        </trans-unit>
        <trans-unit id="76e33a7c5024a9118c78fd8bb1e3b79de0e8a5bf" translate="yes" xml:space="preserve">
          <source>You can run your Node server and instrument it using nyc on the fly. Instead of the &amp;ldquo;normal&amp;rdquo; server start command, you can run the command &lt;code&gt;npm run start:coverage&lt;/code&gt; defined in the &lt;code&gt;package.json&lt;/code&gt; like this:</source>
          <target state="translated">Nodeサーバーを実行し、オンザフライでnycを使用してインストルメントできます。「通常の」サーバー起動コマンドの代わりに、 &lt;code&gt;package.json&lt;/code&gt; で定義されているコマンド &lt;code&gt;npm run start:coverage&lt;/code&gt; を次のように実行できます。</target>
        </trans-unit>
        <trans-unit id="0cfaeb1e1f89a0964091e9a595d48ec43b62b037" translate="yes" xml:space="preserve">
          <source>You can safely remove: &lt;code&gt;{stub: false}&lt;/code&gt;.</source>
          <target state="translated">安全に削除できます： &lt;code&gt;{stub: false}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="08f10e4d69193f7784523fb19f369fd1f495bca3" translate="yes" xml:space="preserve">
          <source>You can safely skip down to the bottom where we provide examples of conditional testing.</source>
          <target state="translated">条件付きテストの例を提供しています。</target>
        </trans-unit>
        <trans-unit id="4028c8615256dad9fb86aab718b3986f1cf37299" translate="yes" xml:space="preserve">
          <source>You can see a walk-through of debugging some application code from Cypress &lt;a href=&quot;https://vimeo.com/242961930#t=264s&quot;&gt;in this segment from our React tutorial series&lt;/a&gt;.</source>
          <target state="translated">サイプレスのアプリケーションコードのデバッグのウォークスルーは&lt;a href=&quot;https://vimeo.com/242961930#t=264s&quot;&gt;、Reactチュートリアルシリーズのこのセグメントにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c564a93b8efa760ea99e7aaeaaca4a085f950583" translate="yes" xml:space="preserve">
          <source>You can see all of the default chrome command line switches we send &lt;a href=&quot;https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/browsers/chrome.coffee#L18&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/browsers/chrome.coffee#L18&quot;&gt;ここ&lt;/a&gt;で送信するすべてのデフォルトのchromeコマンドラインスイッチを確認できます。</target>
        </trans-unit>
        <trans-unit id="6c359e34437ce9859dd9f80925e6c22da34fa740" translate="yes" xml:space="preserve">
          <source>You can see screenshots taken during a CI run in the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt; without any extra work.</source>
          <target state="translated">追加の作業なしで、&lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;ダッシュボードサービス&lt;/a&gt;でCIの実行中に取得したスクリーンショットを表示できます。</target>
        </trans-unit>
        <trans-unit id="4f6c5eac75cd6906abb941afb985054a42e14b08" translate="yes" xml:space="preserve">
          <source>You can see the result of each spec file that ran within &lt;strong&gt;Specs&lt;/strong&gt;. There is also the option to switch between &lt;strong&gt;Timeline View&lt;/strong&gt; and &lt;strong&gt;Bar Chart View&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Specs&lt;/strong&gt;内で実行された各specファイルの結果を確認できます。&lt;strong&gt;タイムラインビュー&lt;/strong&gt;と&lt;strong&gt;棒グラフビュー&lt;/strong&gt;を切り替えるオプションもあります。</target>
        </trans-unit>
        <trans-unit id="41f6257cca856552f249e6281ad4d60617a042db" translate="yes" xml:space="preserve">
          <source>You can see the result of each spec file that ran within the &lt;a href=&quot;../dashboard/introduction&quot;&gt;Dashboard Service&lt;/a&gt; in the run&amp;rsquo;s &lt;strong&gt;Specs&lt;/strong&gt; tab. Specs are visualized within a &lt;strong&gt;Timeline&lt;/strong&gt;, &lt;strong&gt;Bar Chart&lt;/strong&gt;, and &lt;strong&gt;Machines&lt;/strong&gt; view.</source>
          <target state="translated">&lt;a href=&quot;../dashboard/introduction&quot;&gt;ダッシュボードサービス&lt;/a&gt;内で実行された各スペックファイルの結果は、実行の[ &lt;strong&gt;スペック&lt;/strong&gt; ]タブで確認できます。仕様は、&lt;strong&gt;タイムライン&lt;/strong&gt;、&lt;strong&gt;棒グラフ&lt;/strong&gt;、および&lt;strong&gt;マシン&lt;/strong&gt;ビュー内で視覚化されます。</target>
        </trans-unit>
        <trans-unit id="8b6b763e3ac6f797b65d890fcd00e07b4ade0a86" translate="yes" xml:space="preserve">
          <source>You can set any configuration value as an environment variable. This overrides values in your &lt;code&gt;cypress.json&lt;/code&gt;.</source>
          <target state="translated">環境変数として任意の構成値を設定できます。これは &lt;code&gt;cypress.json&lt;/code&gt; の値を上書きします。</target>
        </trans-unit>
        <trans-unit id="bda536015f20293e9b0642a848b69cc95bec4799" translate="yes" xml:space="preserve">
          <source>You can set the record key as the environment variable, &lt;code&gt;CYPRESS_RECORD_KEY&lt;/code&gt;, and we&amp;rsquo;ll automatically use that value. You can now omit the &lt;code&gt;--key&lt;/code&gt; flag when recording.</source>
          <target state="translated">レコードキーを環境変数 &lt;code&gt;CYPRESS_RECORD_KEY&lt;/code&gt; として設定すると、その値が自動的に使用されます。記録時に &lt;code&gt;--key&lt;/code&gt; フラグを省略できるようになりました。</target>
        </trans-unit>
        <trans-unit id="f6224baca389961718809e590054e78945b5cfff" translate="yes" xml:space="preserve">
          <source>You can set the viewport&amp;rsquo;s width and height globally by defining &lt;code&gt;viewportWidth&lt;/code&gt; and &lt;code&gt;viewportHeight&lt;/code&gt; in the &lt;a href=&quot;../../guides/references/configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../guides/references/configuration&quot;&gt;構成&lt;/a&gt;で &lt;code&gt;viewportWidth&lt;/code&gt; および &lt;code&gt;viewportHeight&lt;/code&gt; を定義することにより、ビューポートの幅と高さをグローバルに設定できます。</target>
        </trans-unit>
        <trans-unit id="b5ec5338c0f8e2783617b038a89f0af4d2746806" translate="yes" xml:space="preserve">
          <source>You can set the viewport&amp;rsquo;s width and height globally by defining &lt;code&gt;viewportWidth&lt;/code&gt; and &lt;code&gt;viewportHeight&lt;/code&gt; in the &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html&quot;&gt;構成&lt;/a&gt;で &lt;code&gt;viewportWidth&lt;/code&gt; と &lt;code&gt;viewportHeight&lt;/code&gt; を定義することにより、ビューポートの幅と高さをグローバルに設定できます。</target>
        </trans-unit>
        <trans-unit id="1cff7dd3fa7c5f93754a82bd39bf2f7aad1c06dd" translate="yes" xml:space="preserve">
          <source>You can set various environment variables to modify how Cypress runs.</source>
          <target state="translated">Cypress の動作を変更するために、様々な環境変数を設定することができます。</target>
        </trans-unit>
        <trans-unit id="8ad40832dc09fa34ee7e9dc311cd9bad9d0989a3" translate="yes" xml:space="preserve">
          <source>You can specify reporter options using the &lt;code&gt;--reporter-options &amp;lt;reporter-options&amp;gt;&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;--reporter-options &amp;lt;reporter-options&amp;gt;&lt;/code&gt; フラグを使用して、レポーターオプションを指定できます。</target>
        </trans-unit>
        <trans-unit id="3d7fc61b5efd85c34d5a76e8baa7c036858d513a" translate="yes" xml:space="preserve">
          <source>You can stop the &lt;code&gt;.each()&lt;/code&gt; loop early by returning &lt;code&gt;false&lt;/code&gt; in the callback function.</source>
          <target state="translated">コールバック関数で &lt;code&gt;false&lt;/code&gt; を返すことにより、 &lt;code&gt;.each()&lt;/code&gt; ループを早期に停止できます。</target>
        </trans-unit>
        <trans-unit id="723230f0b51a80b0ce7659307d00661884fda0fc" translate="yes" xml:space="preserve">
          <source>You can swap out or extend the default preprocessor to do exotic things like compile ClojureScript into JavaScript. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/533&quot;&gt;#533&lt;/a&gt;.</source>
          <target state="translated">デフォルトのプリプロセッサーを交換または拡張して、ClojureScriptをJavaScriptにコンパイルするなどのエキゾチックなことを行うことができます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/533&quot;&gt;＃533を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="910364632dda2057719acd8eaf346fa0ff511e1b" translate="yes" xml:space="preserve">
          <source>You can take advantage of &lt;code&gt;Cypress.Cookies.preserveOnce()&lt;/code&gt; or even &lt;em&gt;whitelist&lt;/em&gt; cookies by their name to preserve values across multiple tests. This enables you to preserve sessions through several tests.</source>
          <target state="translated">あなたはの利点を取ることができます &lt;code&gt;Cypress.Cookies.preserveOnce()&lt;/code&gt; 、さらには&lt;em&gt;、ホワイトリスト&lt;/em&gt;、複数のテストでこれらの値を保存するために彼らの名前でクッキー。これにより、いくつかのテストを通じてセッションを保持できます。</target>
        </trans-unit>
        <trans-unit id="2059a009fff071bd9b0e7e124ec4e5c023938635" translate="yes" xml:space="preserve">
          <source>You can take advantage of &lt;code&gt;Cypress.Cookies.preserveOnce()&lt;/code&gt; or even preserve cookies by their name to preserve values across multiple tests. This enables you to preserve sessions through several tests.</source>
          <target state="translated">あなたはの利点を取ることができます &lt;code&gt;Cypress.Cookies.preserveOnce()&lt;/code&gt; や複数のテストでこれらの値を保存するために彼らの名前でクッキーを保存します。これにより、いくつかのテストを通じてセッションを保持できます。</target>
        </trans-unit>
        <trans-unit id="9a9e9d7a70afff61bf7e7c51a872422b1e56906d" translate="yes" xml:space="preserve">
          <source>You can test a route multiple times with unique response objects by using &lt;a href=&quot;../../guides/core-concepts/variables-and-aliases#Aliases&quot;&gt;aliases&lt;/a&gt; and &lt;a href=&quot;wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt;. Each time we use &lt;code&gt;cy.wait()&lt;/code&gt; for an alias, Cypress waits for the next nth matching request.</source>
          <target state="translated">&lt;a href=&quot;../../guides/core-concepts/variables-and-aliases#Aliases&quot;&gt;エイリアス&lt;/a&gt;と&lt;a href=&quot;wait&quot;&gt; &lt;code&gt;cy.wait()&lt;/code&gt; &lt;/a&gt;を使用して、一意の応答オブジェクトでルートを複数回テストできます。エイリアスに &lt;code&gt;cy.wait()&lt;/code&gt; を使用するたびに、サイプレスは次のn番目の一致するリクエストを待ちます。</target>
        </trans-unit>
        <trans-unit id="1fef1a01c1a62dc23cf2e99b73a06318556b47f6" translate="yes" xml:space="preserve">
          <source>You can test a route multiple times with unique response objects by using &lt;a href=&quot;https://docs.cypress.io/guides/core-concepts/variables-and-aliases.html#Aliases&quot;&gt;aliases&lt;/a&gt; and &lt;a href=&quot;wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt;. Each time we use &lt;code&gt;cy.wait()&lt;/code&gt; for an alias, Cypress waits for the next nth matching request.</source>
          <target state="translated">&lt;a href=&quot;https://docs.cypress.io/guides/core-concepts/variables-and-aliases.html#Aliases&quot;&gt;エイリアス&lt;/a&gt;と&lt;a href=&quot;wait&quot;&gt; &lt;code&gt;cy.wait()&lt;/code&gt; &lt;/a&gt;を使用して、一意の応答オブジェクトを使用してルートを複数回テストできます。エイリアスに &lt;code&gt;cy.wait()&lt;/code&gt; を使用するたびに、サイプレスは次のn番目の一致するリクエストを待ちます。</target>
        </trans-unit>
        <trans-unit id="2fb0f582a4050b96bd8879a4624c30a616c80c95" translate="yes" xml:space="preserve">
          <source>You can test your application against different browsers and view the results under a single run within the Dashboard. Below, we simple name our groups the same name as the browser being tested:</source>
          <target state="translated">異なるブラウザに対してアプリケーションをテストし、ダッシュボード内で一度に実行して結果を見ることができます。以下では、グループにテストするブラウザと同じ名前を付けています。</target>
        </trans-unit>
        <trans-unit id="f598c2ccf2c64fff3b267ea99d6f81ec096ae000" translate="yes" xml:space="preserve">
          <source>You can tests specifying a specific &lt;a href=&quot;../tooling/reporters&quot;&gt;Mocha reporter&lt;/a&gt;.</source>
          <target state="translated">特定の&lt;a href=&quot;../tooling/reporters&quot;&gt;Mochaレポーターを&lt;/a&gt;指定してテストできます。</target>
        </trans-unit>
        <trans-unit id="4dc0d43325e06aca5a0d873b3d4344134575dbf1" translate="yes" xml:space="preserve">
          <source>You can think of Cypress as &amp;ldquo;queueing&amp;rdquo; every command. Eventually they&amp;rsquo;ll get run and in the exact order they were used, 100% of the time.</source>
          <target state="translated">サイプレスはすべてのコマンドを「キューに入れる」と考えることができます。最終的には100％実行され、使用された順序どおりに実行されます。</target>
        </trans-unit>
        <trans-unit id="54603838932f21824ed30912e6fb2f69afb7d0ca" translate="yes" xml:space="preserve">
          <source>You can think of the &lt;code&gt;cy.get('@users')&lt;/code&gt; as doing the same thing as &lt;a href=&quot;../../api/commands/wrap&quot;&gt;&lt;code&gt;cy.wrap(this.users)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cy.get('@users')&lt;/code&gt; は&lt;a href=&quot;../../api/commands/wrap&quot;&gt; &lt;code&gt;cy.wrap(this.users)&lt;/code&gt; &lt;/a&gt;と同じことをしていると考えることができます。</target>
        </trans-unit>
        <trans-unit id="ca47aeb19ed661c5051ca536eef4f865413b79de" translate="yes" xml:space="preserve">
          <source>You can transfer projects that you own to another &lt;a href=&quot;organizations&quot;&gt;organization&lt;/a&gt; you are a part of or to another user in the organization. Projects can only be transferred from the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt;.</source>
          <target state="translated">所有しているプロジェクトを、所属する別の&lt;a href=&quot;organizations&quot;&gt;組織&lt;/a&gt;または組織内の別のユーザーに転送できます。プロジェクトは、&lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;ダッシュボードサービス&lt;/a&gt;からのみ転送できます。</target>
        </trans-unit>
        <trans-unit id="c0546ab31afc221a899fe7cd47ea1b34c5b58990" translate="yes" xml:space="preserve">
          <source>You can turn this off by passing &lt;code&gt;multiple: false&lt;/code&gt; to &lt;code&gt;.dblclick()&lt;/code&gt;.</source>
          <target state="translated">これをオフにするには、 &lt;code&gt;multiple: false&lt;/code&gt; を &lt;code&gt;.dblclick()&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="6fe7784508f1cad1a7d1e5aecbac9aff8099a369" translate="yes" xml:space="preserve">
          <source>You can turn this option off if the application or site you&amp;rsquo;re testing &lt;strong&gt;does not&lt;/strong&gt; implement these security measures. Additionally it&amp;rsquo;s possible that the patterns we search for may accidentally rewrite valid JS code. If that&amp;rsquo;s the case, please disable this option.</source>
          <target state="translated">テストするアプリケーションまたはサイトがこれらのセキュリティ対策を実装&lt;strong&gt;していない&lt;/strong&gt;場合は、このオプションをオフにできます。さらに、検索したパターンが誤って有効なJSコードを書き換える可能性もあります。その場合は、このオプションを無効にしてください。</target>
        </trans-unit>
        <trans-unit id="21b2c3f1cde7a495e39b5f2474be703b35af77dc" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt; to wait on requests that end with network errors:</source>
          <target state="translated">&lt;a href=&quot;wait&quot;&gt; &lt;code&gt;cy.wait()&lt;/code&gt; &lt;/a&gt;を使用して、ネットワークエラーで終了するリクエストを待機できます。</target>
        </trans-unit>
        <trans-unit id="ff1d7d303c6b75ddbf9d379a5b40ec67323d99c1" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;Cypress.Cookies.preserveOnce()&lt;/code&gt; to preserve cookies through multiple tests.</source>
          <target state="translated">&lt;code&gt;Cypress.Cookies.preserveOnce()&lt;/code&gt; を使用して、複数のテストを通じてCookieを保持できます。</target>
        </trans-unit>
        <trans-unit id="e8fbf0f35afe641f630c5e5a1c2bb8aa3d20bfc6" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;back&lt;/code&gt; or &lt;code&gt;forward&lt;/code&gt; to go one step back or forward. You could also navigate to a specific history position (&lt;code&gt;-1&lt;/code&gt; goes back one page, &lt;code&gt;1&lt;/code&gt; goes forward one page, etc).</source>
          <target state="translated">&lt;code&gt;back&lt;/code&gt; または &lt;code&gt;forward&lt;/code&gt; を使用して、1ステップ前または後ろに移動できます。特定の履歴位置に移動することもできます（ &lt;code&gt;-1&lt;/code&gt; は1ページ戻る、 &lt;code&gt;1&lt;/code&gt; は1ページ進むなど）。</target>
        </trans-unit>
        <trans-unit id="04ea80f173471d85895c6e0bd8b66c66d1296bda" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;cy.get()&lt;/code&gt; for aliases of primitives, regular objects, or even DOM elements.</source>
          <target state="translated">プリミティブ、通常のオブジェクト、さらにはDOM要素のエイリアスに &lt;code&gt;cy.get()&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="74f3217dbd04db458f958ae18b022d8fad8457e1" translate="yes" xml:space="preserve">
          <source>You can use a space character in &lt;code&gt;cy.contains()&lt;/code&gt; to match text in the HTML that uses a non-breaking space entity &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cy.contains()&lt;/code&gt; でスペース文字を使用して、改行しないスペースエンティティを使用するHTMLのテキストと一致させることができます &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="646b093ec95e3dcd86d6cee906caa2dc5f12a4fc" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;https://api.jquery.com/contains-selector/&quot;&gt;jQuery :contains&lt;/a&gt; selector to perform a case-sensitive text substring match.</source>
          <target state="translated">&lt;a href=&quot;https://api.jquery.com/contains-selector/&quot;&gt;jQuery：contains&lt;/a&gt;セレクターを使用して、大文字と小文字を区別するテキスト部分文字列の一致を実行できます。</target>
        </trans-unit>
        <trans-unit id="2f8c171cf96b96e43f2bf2f4e7d4b2ef52f45317" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;--env&lt;/code&gt; argument for &lt;a href=&quot;command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;command-line#cypress-run&quot;&gt; &lt;code&gt;cypress run&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;--env&lt;/code&gt; 引数を使用できます。</target>
        </trans-unit>
        <trans-unit id="461eab789254757280fbe7008ba0fd099a02dc86" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;after:screenshot&lt;/code&gt; event to do things like:</source>
          <target state="translated">&lt;code&gt;after:screenshot&lt;/code&gt; イベントを使用すると、次のようなことができます。</target>
        </trans-unit>
        <trans-unit id="6a22587d009d55d15f0dff907cab2634f8adcb22" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;before:browser:launch&lt;/code&gt; event to do things like:</source>
          <target state="translated">&lt;code&gt;before:browser:launch&lt;/code&gt; イベントを使用すると、次のようなことができます。</target>
        </trans-unit>
        <trans-unit id="d063686ec5c268bcf7070a7e5b7a25e195f90a25" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;file:preprocessor&lt;/code&gt; event to do things like:</source>
          <target state="translated">&lt;code&gt;file:preprocessor&lt;/code&gt; イベントを使用すると、次のようなことができます。</target>
        </trans-unit>
        <trans-unit id="b3fcf7004a5109e1aedf7709d79de417e6704366" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;req.reply()&lt;/code&gt; function to dynamically control the response to a request.</source>
          <target state="translated">&lt;code&gt;req.reply()&lt;/code&gt; 関数を使用して、要求への応答を動的に制御できます。</target>
        </trans-unit>
        <trans-unit id="d27bfcd47408047796dc3f5c38d6007a2c9bb94d" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;res.send()&lt;/code&gt; function to dynamically control the incoming response. Also, any modifications to &lt;code&gt;res&lt;/code&gt; will be persisted when the response is sent to the browser.</source>
          <target state="translated">&lt;code&gt;res.send()&lt;/code&gt; 関数を使用して、着信応答を動的に制御できます。また、 &lt;code&gt;res&lt;/code&gt; への変更は、応答がブラウザに送信されたときに保持されます。</target>
        </trans-unit>
        <trans-unit id="cd032a1b23aef5cfe1bad82782cb9e315a1835ee" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;task&lt;/code&gt; event to do things like:</source>
          <target state="translated">&lt;code&gt;task&lt;/code&gt; イベントを使用すると、次のようなことができます。</target>
        </trans-unit>
        <trans-unit id="2888ec9200752a82767de747b9cba4649fa2059c" translate="yes" xml:space="preserve">
          <source>You can use the CLI tool to run Cypress in CI. The documentation for this needs to be written, but it will be very simple to do. You will robably only have to write 2 lines in your CI scripts to run Cypress.</source>
          <target state="translated">CLIツールを使ってCIでCypressを動かすことができます。このためのドキュメントを書く必要がありますが、非常に簡単にできます。Cypressを実行するには、CIスクリプトに2行書くだけで済むでしょう。</target>
        </trans-unit>
        <trans-unit id="5547da28e894548399a5fa22b4b50847593cc98c" translate="yes" xml:space="preserve">
          <source>You can use the Developer Tools while your tests run, you can see every console message, every network request. You can inspect elements, and you can even use debugger statements in your spec code or your application code. There is no fidelity loss - you can use all the tools you&amp;rsquo;re already comfortable with. This enables you to test and develop all at the same time.</source>
          <target state="translated">テストの実行中に開発者ツールを使用して、すべてのコンソールメッセージ、すべてのネットワークリクエストを確認できます。要素を検査したり、スペックコードやアプリケーションコードでデバッガーステートメントを使用したりすることもできます。忠実度が失われることはありません。使い慣れたすべてのツールを使用できます。これにより、すべてのテストと開発を同時に行うことができます。</target>
        </trans-unit>
        <trans-unit id="c184cef359b33488d0c085a316fc7e2907efea81" translate="yes" xml:space="preserve">
          <source>You can use the new environment variable &lt;a href=&quot;../guides/command-line#Debugging-commands&quot;&gt;&lt;code&gt;DEBUG=cypress:cli&lt;/code&gt;&lt;/a&gt; to see debugging output from the CLI.</source>
          <target state="translated">新しい環境変数&lt;a href=&quot;../guides/command-line#Debugging-commands&quot;&gt; &lt;code&gt;DEBUG=cypress:cli&lt;/code&gt; &lt;/a&gt;を使用して、CLIからのデバッグ出力を確認できます。</target>
        </trans-unit>
        <trans-unit id="22738064dc0055e3576f672f1d93cd11d2295f09" translate="yes" xml:space="preserve">
          <source>You can use the route callback to modify the request before it is sent.</source>
          <target state="translated">ルートコールバックを使用して、送信前にリクエストを修正することができます。</target>
        </trans-unit>
        <trans-unit id="89e28fa754123a8e59c649c7722e1de8b000fb3d" translate="yes" xml:space="preserve">
          <source>You can wrap promises returned by the application code. Cypress commands will automatically wait for the promise to resolve before continuing with the yielded value to the next command or assertion. See the &lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html#Logging-In&quot;&gt;Logging in using application code&lt;/a&gt; recipe for the full example.</source>
          <target state="translated">アプリケーションコードによって返されたpromiseをラップできます。サイプレスのコマンドは、次のコマンドまたはアサーションに渡された値を続行する前に、約束が解決するまで自動的に待機します。完全な例については、&lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html#Logging-In&quot;&gt;アプリケーションコード&lt;/a&gt;レシピを使用したログインをご覧ください。</target>
        </trans-unit>
        <trans-unit id="9f1595dbd98eb985f69549e9fe4fc0d58d6c4474" translate="yes" xml:space="preserve">
          <source>You can write your own custom reporter which Cypress can use in CI.</source>
          <target state="translated">CypressがCIで使えるカスタムレポーターを書くことができます。</target>
        </trans-unit>
        <trans-unit id="3f43a3a230ce840c57b1d2e85fba58af6b4d7348" translate="yes" xml:space="preserve">
          <source>You cannot &amp;lsquo;accidentally&amp;rsquo; forget to return or chain a command.</source>
          <target state="translated">コマンドを返すかチェーンすることを「誤って」忘れることはできません。</target>
        </trans-unit>
        <trans-unit id="5ad860ac0e8b6e451fbd07b0e592e3e2409c1b2f" translate="yes" xml:space="preserve">
          <source>You cannot &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; two different super domains within a single test. Example: &lt;code&gt;cy.visit('https://google.com').visit('https://apple.com')&lt;/code&gt;. There shouldn&amp;rsquo;t be any reason you ever need to do this in a single test, if you do, you should make these two separate tests.</source>
          <target state="translated">1つのテスト内で2つの異なるスーパードメインを&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; &lt;/a&gt;することはできません。例： &lt;code&gt;cy.visit('https://google.com').visit('https://apple.com')&lt;/code&gt; 。単一のテストでこれを行う必要がある理由はありません。そうする場合は、これらの2つの個別のテストを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="edcbd74da8496cd823f72d660c829af32b64e41f" translate="yes" xml:space="preserve">
          <source>You cannot &lt;strong&gt;race&lt;/strong&gt; or run multiple commands at the same time (in parallel).</source>
          <target state="translated">複数のコマンドを同時に（並行して）&lt;strong&gt;競合&lt;/strong&gt;または実行することはできません。</target>
        </trans-unit>
        <trans-unit id="1e175a922719286679bd036516770e57c9585aa4" translate="yes" xml:space="preserve">
          <source>You cannot accidentally forget to return or chain a command</source>
          <target state="translated">誤ってコマンドを返し忘れたり、チェーンしたりすることはできません。</target>
        </trans-unit>
        <trans-unit id="1a4cbcf681c38f6f8994caa502d9bab3bcb147e3" translate="yes" xml:space="preserve">
          <source>You cannot add a &lt;code&gt;.catch&lt;/code&gt; error handler to a failed command</source>
          <target state="translated">失敗したコマンドに &lt;code&gt;.catch&lt;/code&gt; エラーハンドラーを追加することはできません</target>
        </trans-unit>
        <trans-unit id="60932948e6aa35c099d499cc17a967d91a40855e" translate="yes" xml:space="preserve">
          <source>You cannot add a &lt;code&gt;.catch&lt;/code&gt; error handler to a failed command.</source>
          <target state="translated">失敗したコマンドに &lt;code&gt;.catch&lt;/code&gt; エラーハンドラーを追加することはできません。</target>
        </trans-unit>
        <trans-unit id="f06445bda2c15c330aebc4c0ec7ef389b2db8965" translate="yes" xml:space="preserve">
          <source>You cannot do conditional testing on the DOM unless you are either:</source>
          <target state="translated">どちらかでない限り、DOMで条件付きテストを行うことはできません。</target>
        </trans-unit>
        <trans-unit id="17fec2f5716bb410d015cec146346f2fa3bb8898" translate="yes" xml:space="preserve">
          <source>You cannot race or run multiple commands at the same time</source>
          <target state="translated">複数のコマンドを同時に実行したり、レースをしたりすることはできません。</target>
        </trans-unit>
        <trans-unit id="41920e271f7f01a8967101548cb3191382c31125" translate="yes" xml:space="preserve">
          <source>You cannot run tests on a run that has been complete for that long.</source>
          <target state="translated">それほど長い間、完了したランでテストを実行することはできません。</target>
        </trans-unit>
        <trans-unit id="3163e436a13ac260b88f565ac76aea617306ea74" translate="yes" xml:space="preserve">
          <source>You cannot use Cypress to drive &lt;a href=&quot;#Multiple-browsers-open-at-the-same-time&quot;&gt;two browsers at the same time&lt;/a&gt;.</source>
          <target state="translated">サイプレスを使用して&lt;a href=&quot;#Multiple-browsers-open-at-the-same-time&quot;&gt;2つのブラウザを同時に&lt;/a&gt;駆動することはできません。</target>
        </trans-unit>
        <trans-unit id="8469dc23f44adc095a60b2e9c81980693ea63ea2" translate="yes" xml:space="preserve">
          <source>You cannot use a &lt;code&gt;this.*&lt;/code&gt; reference until the &lt;code&gt;.as()&lt;/code&gt; command runs.</source>
          <target state="translated">&lt;code&gt;.as()&lt;/code&gt; コマンドが実行されるまで、this &lt;code&gt;this.*&lt;/code&gt; 参照は使用できません。</target>
        </trans-unit>
        <trans-unit id="158d8ab9f0429c198eae4f5363176f454dcf7c17" translate="yes" xml:space="preserve">
          <source>You cannot use the &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag with this group.</source>
          <target state="translated">このグループでは&lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;フラグを使用できません。</target>
        </trans-unit>
        <trans-unit id="af7529afa2e0c4975a51584b9f98767da8553313" translate="yes" xml:space="preserve">
          <source>You could &lt;code&gt;cy.request()&lt;/code&gt; an endpoint on your server that tells you what email has been queued or delivered. That would give you a programmatic way to know without involving the UI. Your server would have to expose this endpoint.</source>
          <target state="translated">あなたは可能性 &lt;code&gt;cy.request()&lt;/code&gt; キューに入れられたか、配信されたものを電子メールがわかります、サーバー上のエンドポイントを。これにより、UIを使用せずにプログラムで知ることができます。サーバーはこのエンドポイントを公開する必要があります。</target>
        </trans-unit>
        <trans-unit id="1f1ce0e43e8afcd56b4e2ae3464b3f0e4420b951" translate="yes" xml:space="preserve">
          <source>You could also restore by using &lt;a href=&quot;invoke&quot;&gt;&lt;code&gt;.invoke()&lt;/code&gt;&lt;/a&gt; to invoke the &lt;code&gt;restore&lt;/code&gt; function.</source>
          <target state="translated">&lt;a href=&quot;invoke&quot;&gt; &lt;code&gt;.invoke()&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;restore&lt;/code&gt; 関数を呼び出すことによって復元することもできます。</target>
        </trans-unit>
        <trans-unit id="1987762737a03f1eaa4c8d66fede66fbd050bff0" translate="yes" xml:space="preserve">
          <source>You could also use &lt;code&gt;cy.request()&lt;/code&gt; to a 3rd party server that exposes an API to read off emails. You will then need the proper authentication credentials, which your server could provide, or you could use environment variables.</source>
          <target state="translated">電子メールを読み取るためのAPIを公開するサードパーティのサーバーに &lt;code&gt;cy.request()&lt;/code&gt; を使用することもできます。次に、サーバーが提供できる適切な認証資格情報が必要になります。または、環境変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="104e8ae8791a932080c229fd93a30dd054794043" translate="yes" xml:space="preserve">
          <source>You could have the server generate all of the fixture stubs for you ahead of time. This means their data will reflect what the server will actually send.</source>
          <target state="translated">事前にサーバにフィクスチャのスタブをすべて生成させることができます。これは、サーバが実際に送信するデータが反映されることを意味します。</target>
        </trans-unit>
        <trans-unit id="7910ea53f7005e53f967ab1794dc027d679ae72d" translate="yes" xml:space="preserve">
          <source>You could now swap out configuration + environment variables like so:</source>
          <target state="translated">これで、設定+環境変数をこのようにスワップアウトできるようになりました。</target>
        </trans-unit>
        <trans-unit id="4fb2e4df8c0656d511756a2c689acc6e3432980b" translate="yes" xml:space="preserve">
          <source>You could technically write a functional test asserting the CSS properties using the &lt;a href=&quot;../references/assertions#CSS&quot;&gt;&lt;code&gt;have.css&lt;/code&gt; assertion&lt;/a&gt;, but these may quickly become cumbersome to write and maintain, especially when visual styles rely on a lot of CSS styles.</source>
          <target state="translated">技術的には、&lt;a href=&quot;../references/assertions#CSS&quot;&gt; &lt;code&gt;have.css&lt;/code&gt; アサーション&lt;/a&gt;を使用してCSSプロパティをアサートする機能テストを記述できますが、特に視覚スタイルが多くのCSSスタイルに依存している場合、これらの記述と保守がすぐに面倒になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f56cfbee519983ca12118924a1e8d72929fe3a73" translate="yes" xml:space="preserve">
          <source>You did not pass the &lt;code&gt;--parallel&lt;/code&gt; flag, but this run&amp;rsquo;s group was originally created with the &lt;code&gt;--parallel&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;--parallel&lt;/code&gt; フラグを渡しませんでしたが、この実行のグループは最初に &lt;code&gt;--parallel&lt;/code&gt; フラグを使用して作成されました。</target>
        </trans-unit>
        <trans-unit id="a0687c1cb29102e05fe935b827b4fb58b626daf3" translate="yes" xml:space="preserve">
          <source>You do not have internet. Please ensure you have connectivity then try again.</source>
          <target state="translated">インターネットに接続できません。インターネットに接続していることを確認してから、もう一度お試しください。</target>
        </trans-unit>
        <trans-unit id="0ebb08807f8467c3baa92aab177136cfe19f916d" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t have access to its &lt;code&gt;stdout&lt;/code&gt; or logs</source>
          <target state="translated">その &lt;code&gt;stdout&lt;/code&gt; またはログにアクセスできません</target>
        </trans-unit>
        <trans-unit id="0126e92e25485f78c3532cec1498597ea32832b7" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t have to do any work on the server. Your application will have no idea its requests are being stubbed, so there are &lt;em&gt;no code changes&lt;/em&gt; needed.</source>
          <target state="translated">サーバーで作業を行う必要はありません。アプリケーションは、リクエストがスタブされていることを認識し&lt;em&gt;ない&lt;/em&gt;ため&lt;em&gt;、コードを変更する&lt;/em&gt;必要はあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8fd52a384943e856094a196daec57ed33db33601" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t need to write &lt;a href=&quot;../../api/commands/should&quot;&gt;&lt;code&gt;.should('exist')&lt;/code&gt;&lt;/a&gt; after a DOM based command, unless you chain extra &lt;code&gt;.should()&lt;/code&gt; assertions.</source>
          <target state="translated">余分な &lt;code&gt;.should()&lt;/code&gt; アサーションをチェーンしない限り、DOMベースのコマンドの後に&lt;a href=&quot;../../api/commands/should&quot;&gt; &lt;code&gt;.should('exist')&lt;/code&gt; &lt;/a&gt;を記述する必要はありません。</target>
        </trans-unit>
        <trans-unit id="59ae0f46cd5028c64357005b637da1e0b2ab2790" translate="yes" xml:space="preserve">
          <source>You generally stub a function when it has side effects you are trying to control.</source>
          <target state="translated">あなたは一般的に、あなたがコントロールしようとしている副作用を持っているときに関数をスタブします。</target>
        </trans-unit>
        <trans-unit id="d99f377b674c94b3286d6cb5e7ecaa062dc7d38e" translate="yes" xml:space="preserve">
          <source>You have &lt;strong&gt;throttled&lt;/strong&gt; or &lt;strong&gt;debounced&lt;/strong&gt; functions which you want to control.</source>
          <target state="translated">あなたはしている&lt;strong&gt;絞っ&lt;/strong&gt;たり&lt;strong&gt;デバウンス&lt;/strong&gt;コントロールしたい機能を。</target>
        </trans-unit>
        <trans-unit id="fc64cd1b99c70deaf9cc3fe22b04c3013ad0e431" translate="yes" xml:space="preserve">
          <source>You have a function that accepts a callback, and want to invoke the callback.</source>
          <target state="translated">コールバックを受け付ける関数を持っていて、コールバックを呼び出したいとします。</target>
        </trans-unit>
        <trans-unit id="cd3f4f0ebd0dca22a1dcd447a664a29c3b6980f0" translate="yes" xml:space="preserve">
          <source>You have a function that wraps &lt;code&gt;window.location&lt;/code&gt; and don&amp;rsquo;t want your application to be navigated.</source>
          <target state="translated">&lt;code&gt;window.location&lt;/code&gt; をラップする関数があり、アプリケーションをナビゲートしたくない場合。</target>
        </trans-unit>
        <trans-unit id="09ed1d11298a43c9ce48b38e37047d88a82a48ce" translate="yes" xml:space="preserve">
          <source>You have to background the process</source>
          <target state="translated">プロセスを背景にする必要があります。</target>
        </trans-unit>
        <trans-unit id="48635d7501113c60085d1e2ec38cd03da6b1eddf" translate="yes" xml:space="preserve">
          <source>You have two async functions &lt;code&gt;async function foo() {...}&lt;/code&gt; and &lt;code&gt;async function bar() {...}&lt;/code&gt;</source>
          <target state="translated">2つの非同期関数 &lt;code&gt;async function foo() {...}&lt;/code&gt; と &lt;code&gt;async function bar() {...}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88c8d15827b01794b5cc30ea2966ee50d741af27" translate="yes" xml:space="preserve">
          <source>You lose access to it via terminal</source>
          <target state="translated">ターミナル経由でアクセスできなくなる</target>
        </trans-unit>
        <trans-unit id="9b66b80b4d17b1ce5c1c42399a3f53749b4fb9f6" translate="yes" xml:space="preserve">
          <source>You may also specify the relative path of an html file. The path is relative to the root</source>
          <target state="translated">htmlファイルの相対パスを指定することもできます。パスはルート</target>
        </trans-unit>
        <trans-unit id="a75c9d45f4847e30614a7f9015285087441860f6" translate="yes" xml:space="preserve">
          <source>You may ask about this functionality like this:</source>
          <target state="translated">この機能については、こんな感じで聞いてみるといいかもしれません。</target>
        </trans-unit>
        <trans-unit id="6a678e4287be446ca7bd68c1b4ec4b567229969f" translate="yes" xml:space="preserve">
          <source>You may be wondering - why can&amp;rsquo;t I just visit my application that&amp;rsquo;s already in production?</source>
          <target state="translated">疑問に思われるかもしれませんが、既に稼働しているアプリケーションにアクセスできないのはなぜですか？</target>
        </trans-unit>
        <trans-unit id="fe46960c9b571f01fb886747f9b86d67017597a7" translate="yes" xml:space="preserve">
          <source>You may find it easier to add the cypress command to the &lt;code&gt;scripts&lt;/code&gt; object in your &lt;code&gt;package.json&lt;/code&gt; file and call it from an &lt;a href=&quot;https://docs.npmjs.com/cli/run-script.html&quot;&gt;&lt;code&gt;npm run&lt;/code&gt; script&lt;/a&gt;.</source>
          <target state="translated">cypressコマンドを &lt;code&gt;package.json&lt;/code&gt; ファイルの &lt;code&gt;scripts&lt;/code&gt; オブジェクトに追加して、&lt;a href=&quot;https://docs.npmjs.com/cli/run-script.html&quot;&gt; &lt;code&gt;npm run&lt;/code&gt; &lt;/a&gt;スクリプトから呼び出す方が簡単な場合があります。</target>
        </trans-unit>
        <trans-unit id="5c7097da7005bfcf247b0b587beb54947fc36c5e" translate="yes" xml:space="preserve">
          <source>You may find yourself struggling to write good selectors because:</source>
          <target state="translated">なぜなら、良いセレクターを書くのに苦労していることに気づくかもしれません。</target>
        </trans-unit>
        <trans-unit id="44d1781ba76280835315dcc743d2074be13d561f" translate="yes" xml:space="preserve">
          <source>You may receive this error when trying to run Cypress tests in &lt;a href=&quot;../guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;. This means that you did not pass a specific record key to: &lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run --record&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guides/continuous-integration&quot;&gt;継続的インテグレーションで&lt;/a&gt;サイプレステストを実行しようとすると、このエラーが表示される場合があります。これは、特定のレコードキーを&lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt; &lt;code&gt;cypress run --record&lt;/code&gt; に&lt;/a&gt;渡さなかったことを意味します。</target>
        </trans-unit>
        <trans-unit id="f84cb86761cfe44218be0931dbb8e5d611e28b8d" translate="yes" xml:space="preserve">
          <source>You may see a variation of this message for 4 different reasons:</source>
          <target state="translated">4つの理由でバリエーションが出てくるかもしれません。</target>
        </trans-unit>
        <trans-unit id="9cf846455ac81f29a25c1ffcfc5b6fa7169829e5" translate="yes" xml:space="preserve">
          <source>You may think this works:</source>
          <target state="translated">これは効くと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="39fa45d8c9330205ec0eead9254882946c668316" translate="yes" xml:space="preserve">
          <source>You may think to yourself&amp;hellip; okay fine, but 4 seconds - man that&amp;rsquo;s not enough. Network requests could be slow, let&amp;rsquo;s bump it up to 1 minute!</source>
          <target state="translated">あなたは自分で考えるかもしれません&amp;hellip;大丈夫ですが、4秒-十分ではありません。ネットワークリクエストが遅くなる可能性があります。最大1分間上げましょう。</target>
        </trans-unit>
        <trans-unit id="0f633f517449880b309666041e3d8b9f5dfc3d38" translate="yes" xml:space="preserve">
          <source>You may want to access 3rd party servers in several situations:</source>
          <target state="translated">いくつかの状況でサードパーティのサーバーにアクセスしたくなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f9be79bbd4186950ab6781451ae03f3d8d688a42" translate="yes" xml:space="preserve">
          <source>You may want to define the &lt;code&gt;cy.route()&lt;/code&gt; after receiving the fixture and working with its data.</source>
          <target state="translated">フィクスチャを受信して​​そのデータを操作した後、 &lt;code&gt;cy.route()&lt;/code&gt; を定義することができます。</target>
        </trans-unit>
        <trans-unit id="b172892f9e07d66df055122a6321a6d5cfc32de4" translate="yes" xml:space="preserve">
          <source>You may want to mask some values passed to the &lt;a href=&quot;../commands/type&quot;&gt;&lt;code&gt;.type()&lt;/code&gt;&lt;/a&gt; command so that sensitive data does not display in screenshots or videos of your test run. This example overwrites the &lt;a href=&quot;../commands/type&quot;&gt;&lt;code&gt;.type()&lt;/code&gt;&lt;/a&gt; command to allow you to mask sensitive data in the Test Runner&amp;rsquo;s Command Log.</source>
          <target state="translated">&lt;a href=&quot;../commands/type&quot;&gt; &lt;code&gt;.type()&lt;/code&gt; &lt;/a&gt;コマンドに渡される一部の値をマスクして、テスト実行のスクリーンショットやビデオに機密データが表示されないようにすることができます。この例では、&lt;a href=&quot;../commands/type&quot;&gt; &lt;code&gt;.type()&lt;/code&gt; &lt;/a&gt;コマンドを上書きして、テストランナーのコマンドログ内の機密データをマスクできるようにします。</target>
        </trans-unit>
        <trans-unit id="a3b6f354f217f7055bd9c0f277b95a4e8439bfd8" translate="yes" xml:space="preserve">
          <source>You might also see this phrased as &amp;ldquo;Given, When, Then&amp;rdquo;, or &amp;ldquo;Arrange, Act, Assert&amp;rdquo;. The idea is simple: first you put the application into a specific state, then you take some action in the application that causes it to change, and finally you check the resulting application state.</source>
          <target state="translated">また、「与えられたとき、とき、その後」、または「配置、行動、表明」と表現されている場合もあります。アイデアは単純です。最初にアプリケーションを特定の状態にしてから、アプリケーションでアクションを実行してアプリケーションを変更し、最後に結果のアプリケーションの状態を確認します。</target>
        </trans-unit>
        <trans-unit id="f4913f54f941c08d39e498032ec2a0d7b32d57c9" translate="yes" xml:space="preserve">
          <source>You might be wondering:</source>
          <target state="translated">と疑問に思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="95121d813021385cf7a3ff4b615ae409e5088641" translate="yes" xml:space="preserve">
          <source>You might notice that if you already have the browser open you will see two of the same browser icons in your Dock.</source>
          <target state="translated">すでにブラウザを開いている場合、Dockに同じブラウザアイコンが2つ表示されていることに気づくかもしれません。</target>
        </trans-unit>
        <trans-unit id="08fc24c39a1287937eb61acb657ec7fb3f6187a7" translate="yes" xml:space="preserve">
          <source>You must use the &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag with this group.</source>
          <target state="translated">このグループでは&lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;フラグを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b9dbe38652921775eaa4cbd40019c5354abac710" translate="yes" xml:space="preserve">
          <source>You need to have your Developer Tools open for &lt;code&gt;.debug()&lt;/code&gt; to hit the breakpoint.</source>
          <target state="translated">ブレークポイントに &lt;code&gt;.debug()&lt;/code&gt; するには、.debug（）で開発者ツールを開く必要があります。</target>
        </trans-unit>
        <trans-unit id="0734072bd9e8d93ee9f801ed02f73ec0410a091a" translate="yes" xml:space="preserve">
          <source>You need to install any peer dependencies the reporter requires, even if they&amp;rsquo;re bundled with Cypress. For example, &lt;a href=&quot;https://github.com/adamgruber/mochawesome&quot;&gt;mochawesome&lt;/a&gt; requires &lt;code&gt;mocha&lt;/code&gt; as a peer dependency. You will need to install &lt;code&gt;mocha&lt;/code&gt; as a dev dependency of your own project for it to work.</source>
          <target state="translated">Cypressにバンドルされている場合でも、レポーターが必要とするピア依存関係をインストールする必要があります。たとえば、&lt;a href=&quot;https://github.com/adamgruber/mochawesome&quot;&gt;mochawesome&lt;/a&gt;はピア依存関係として &lt;code&gt;mocha&lt;/code&gt; を必要とします。 &lt;code&gt;mocha&lt;/code&gt; を機能させるには、自分のプロジェクトのdev依存関係としてmochaをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="9a88a6f0dfa35d80a802126d5d293096cc2b5edc" translate="yes" xml:space="preserve">
          <source>You need to make sure &lt;code&gt;foo()&lt;/code&gt; has resolved first before invoking &lt;code&gt;bar()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;bar()&lt;/code&gt; を呼び出す前に、 &lt;code&gt;foo()&lt;/code&gt; が最初に解決されたことを確認する必要があります</target>
        </trans-unit>
        <trans-unit id="6cee7a456e0bad2ec1d061cd4635c894f4e610a9" translate="yes" xml:space="preserve">
          <source>You need to manually move your existing test files from &lt;code&gt;tests&lt;/code&gt; into &lt;code&gt;cypress/integration&lt;/code&gt;.</source>
          <target state="translated">既存のテストファイルを &lt;code&gt;tests&lt;/code&gt; から &lt;code&gt;cypress/integration&lt;/code&gt; に手動で移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="2c28cd071e011226995eb9347d282026c3679bd0" translate="yes" xml:space="preserve">
          <source>You need to rewrite this as:</source>
          <target state="translated">と書き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="e710bff1748ea4e2b242bf9fef1c09c2b3d83a5c" translate="yes" xml:space="preserve">
          <source>You no longer have to log in again after updating. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/305&quot;&gt;#305&lt;/a&gt;.</source>
          <target state="translated">アップデート後、再度ログインする必要はありません。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/305&quot;&gt;＃305を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="4d3a6cbca443450a553d9932da54cb2266af6112" translate="yes" xml:space="preserve">
          <source>You no longer have to use &lt;code&gt;cypress get:key&lt;/code&gt; to get your Record Key. We now display this in your &amp;ldquo;Settings&amp;rdquo; tab and also in the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard&lt;/a&gt;.</source>
          <target state="translated">レコード &lt;code&gt;cypress get:key&lt;/code&gt; を取得するためにcypress get：keyを使用する必要がなくなりました。これを[設定]タブと&lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;ダッシュボード&lt;/a&gt;に表示します。</target>
        </trans-unit>
        <trans-unit id="48958730eb8bc8cabd82e9c07779575aeaf452ff" translate="yes" xml:space="preserve">
          <source>You now use &lt;code&gt;npm&lt;/code&gt; to manage Cypress versions like every other dev dependency.</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; を使用して、他のすべての開発依存関係と同様にサイプレスバージョンを管理します。</target>
        </trans-unit>
        <trans-unit id="e396e64354d20cde2f86731e3f88a57f8b327afa" translate="yes" xml:space="preserve">
          <source>You only need to do one thing to know whether you&amp;rsquo;ve coupled your tests incorrectly, or if one test is relying on the state of a previous one.</source>
          <target state="translated">テストを誤って結合したかどうか、または1つのテストが前のテストの状態に依存しているかどうかを知るために必要なことは1つだけです。</target>
        </trans-unit>
        <trans-unit id="589ef582e116899aae5e91f03f8ca34cad7e2a28" translate="yes" xml:space="preserve">
          <source>You passed the --record flag but did not provide us your Record Key.</source>
          <target state="translated">レコードフラグを通過しましたが、レコードキーを提供してくれませんでした。</target>
        </trans-unit>
        <trans-unit id="78239b4a65908f84da00e65e60e8b206d9e91939" translate="yes" xml:space="preserve">
          <source>You passed the &lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; flag, but this group name has already been used for this run.</source>
          <target state="translated">&lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt; &lt;code&gt;--group&lt;/code&gt; &lt;/a&gt;フラグを渡しましたが、このグループ名はこの実行ですでに使用されています。</target>
        </trans-unit>
        <trans-unit id="75d33c8651c8ffd3598e84963bc965c189a42e47" translate="yes" xml:space="preserve">
          <source>You passed the &lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag but we could not automatically determine or generate a &lt;code&gt;ciBuildId&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt; &lt;code&gt;--group&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;フラグを渡しましたが、ciBuildIdを自動的に決定または生成できません &lt;code&gt;ciBuildId&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d72d1bb7deee67e6e8859365b81b9519021bf15" translate="yes" xml:space="preserve">
          <source>You passed the &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag, but we do not parallelize tests across different environments.</source>
          <target state="translated">&lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;フラグを渡しましたが、異なる環境間でテストを並列化しません。</target>
        </trans-unit>
        <trans-unit id="4db5b7a17552c77c6c3eeb0704ccf24740830d32" translate="yes" xml:space="preserve">
          <source>You passed the &lt;code&gt;--ci-build-id&lt;/code&gt; flag but did not provide either a &lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">&lt;code&gt;--ci-build-id&lt;/code&gt; フラグを渡しましたが、&lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt; &lt;code&gt;--group&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;フラグを提供していません。</target>
        </trans-unit>
        <trans-unit id="c30ac9616ad11c60c23cbcbe827fdb05052af1ca" translate="yes" xml:space="preserve">
          <source>You passed the &lt;code&gt;--ci-build-id&lt;/code&gt;, &lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag without also passing the &lt;code&gt;--record&lt;/code&gt; flag.</source>
          <target state="translated">あなたは合格 &lt;code&gt;--ci-build-id&lt;/code&gt; 、&lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt; &lt;code&gt;--group&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;も渡さずにフラグを &lt;code&gt;--record&lt;/code&gt; フラグ。</target>
        </trans-unit>
        <trans-unit id="f65ab52a54959d7f8d0a3998f526abfba2e8c6e0" translate="yes" xml:space="preserve">
          <source>You passed the &lt;code&gt;--parallel&lt;/code&gt; flag, but this run group was originally created without the &lt;code&gt;--parallel&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;--parallel&lt;/code&gt; フラグを渡しましたが、この実行グループは最初に &lt;code&gt;--parallel&lt;/code&gt; フラグなしで作成されました。</target>
        </trans-unit>
        <trans-unit id="24efcae6801e94ebb8d9e6b8fd0fea53a5457fac" translate="yes" xml:space="preserve">
          <source>You passed the &lt;code&gt;--record&lt;/code&gt; flag but did not provide us your Record Key.</source>
          <target state="translated">&lt;code&gt;--record&lt;/code&gt; フラグを渡しましたが、レコードキーを提供していません。</target>
        </trans-unit>
        <trans-unit id="49267bcbfbe5992865cc05e384fc5972793a6cb5" translate="yes" xml:space="preserve">
          <source>You purposefully &lt;strong&gt;cannot&lt;/strong&gt; do anything useful with the return value from a command. Commands are enqueued and managed entirely behind the scenes.</source>
          <target state="translated">コマンドからの戻り値を使用して、意図的に何かを行う&lt;strong&gt;ことはできませ&lt;/strong&gt;ん。コマンドはキューに入れられ、完全にバックグラウンドで管理されます。</target>
        </trans-unit>
        <trans-unit id="7ea79327fedbec3620adf1bb96fcb1a743bf9a73" translate="yes" xml:space="preserve">
          <source>You rarely have to ever use &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt; in Cypress. If you&amp;rsquo;re using them, it&amp;rsquo;s usually a sign you&amp;rsquo;re doing it wrong.</source>
          <target state="translated">サイプレスで &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、または &lt;code&gt;var&lt;/code&gt; を使用する必要はほとんどありません。それらを使用している場合、それは通常、それが間違っている兆候です。</target>
        </trans-unit>
        <trans-unit id="60ff395e16e5c981e5372977d32a1c364a7c4b9f" translate="yes" xml:space="preserve">
          <source>You should think of assertions as &lt;strong&gt;guards&lt;/strong&gt;.</source>
          <target state="translated">アサーションは&lt;strong&gt;ガード&lt;/strong&gt;と考える必要があります。</target>
        </trans-unit>
        <trans-unit id="8af7f403d48a3a31f5827244a6be423b803862eb" translate="yes" xml:space="preserve">
          <source>You should think of failed commands in Cypress as akin to uncaught exceptions in server side code. It is not possible to try to recover in those scenarios because the system has transitioned to an unreliable state. Instead you generally always opt to crash and log. When Cypress fails the test - that is exactly what it is doing. Bailing out, skipping any remaining commands in the test, and logging out the failure.</source>
          <target state="translated">Cypress での失敗したコマンドは、サーバーサイドのコードでの捕捉されない例外に似ていると考えるべきです。システムが信頼性のない状態に移行しているため、このようなシナリオでは復旧を試みることはできません。その代わりに、一般的には常にクラッシュしてログを取ることを選択します。Cypress がテストに失敗したとき、それはまさに何をしているのかということです。ベイルアウトし、テスト中の残りのコマンドをスキップし、失敗をログアウトします。</target>
        </trans-unit>
        <trans-unit id="35a94309d47a10e1bed607e8a950f8269cdba95c" translate="yes" xml:space="preserve">
          <source>You typically want to record when running tests in &lt;a href=&quot;../guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;, but you can also record your tests when running locally.</source>
          <target state="translated">通常、&lt;a href=&quot;../guides/continuous-integration&quot;&gt;継続的インテグレーション&lt;/a&gt;でテストを実行するときに記録する必要がありますが、ローカルで実行するときにテストを記録することもできます。</target>
        </trans-unit>
        <trans-unit id="dbd8f04281ee1f5c53e1413afde7e650e5b4983c" translate="yes" xml:space="preserve">
          <source>You want to &amp;ldquo;trick&amp;rdquo; your application into thinking it&amp;rsquo;s logged in or logged out.</source>
          <target state="translated">アプリケーションを「だまして」、ログインまたはログアウトされていると思わせたいとします。</target>
        </trans-unit>
        <trans-unit id="86280316b3afab18be28e25706a839608e42a65a" translate="yes" xml:space="preserve">
          <source>You were told that adding multiple assertions was bad and accepted this as truth</source>
          <target state="translated">複数の主張を加えるのは悪いことだと言われ、それを真実として受け入れた</target>
        </trans-unit>
        <trans-unit id="d489ffbdc5741148a6b66f12538f582ce577dcb5" translate="yes" xml:space="preserve">
          <source>You will always know (and can visually see) which assertion failed in a large test</source>
          <target state="translated">大規模なテストでどのアサーションが失敗したかを常に知ることができます。</target>
        </trans-unit>
        <trans-unit id="51c8f85d3b11834ad2939c007acb28167f940528" translate="yes" xml:space="preserve">
          <source>You will commonly use these chainers after using DOM commands like: &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/commands/contains&quot;&gt;&lt;code&gt;cy.contains()&lt;/code&gt;&lt;/a&gt;, etc.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/get&quot;&gt; &lt;code&gt;cy.get()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/commands/contains&quot;&gt; &lt;code&gt;cy.contains()&lt;/code&gt; &lt;/a&gt;などのDOMコマンドを使用した後、これらのチェーンを一般的に使用します。</target>
        </trans-unit>
        <trans-unit id="3330e6fcf3b3976e3fd63dfd447334f21bd9c823" translate="yes" xml:space="preserve">
          <source>You will need to download a new &lt;a href=&quot;../guides/command-line&quot;&gt;cypress-cli&lt;/a&gt; - version &lt;code&gt;0.13.1&lt;/code&gt;.</source>
          <target state="translated">新しい&lt;a href=&quot;../guides/command-line&quot;&gt;cypress- &lt;/a&gt; &lt;code&gt;0.13.1&lt;/code&gt; バージョン0.13.1をダウンロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="06d9add928e123fd18e639db8e42c3550b3a3d9c" translate="yes" xml:space="preserve">
          <source>You will need to keep in mind it is &lt;strong&gt;Cypress who is requiring your file&lt;/strong&gt; - not your local project, not your local Node version, and not anything else under your control.</source>
          <target state="translated">&lt;strong&gt;サイプレスがファイルを必要としているの&lt;/strong&gt;は、ローカルプロジェクトではなく、ローカルノードのバージョンではなく、管理下にあるものではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d225114070fb7343bd3f5398ecf480625bd1fb25" translate="yes" xml:space="preserve">
          <source>You will need to log in to record your tests, so you will need to log in to the Cypress Dashboard here.</source>
          <target state="translated">テストを記録するにはログインが必要なので、ここでCypress Dashboardにログインする必要があります。</target>
        </trans-unit>
        <trans-unit id="34222e531ec9f273447da0cd8e6183116626cf75" translate="yes" xml:space="preserve">
          <source>You will now see a very specific error message when we detect that you&amp;rsquo;ve mixed up &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;sync&lt;/code&gt; code in a &lt;a href=&quot;../../api/commands/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; callback function. An example would be queuing up a new cypress command but then synchronously returning a different value.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; &lt;/a&gt;コールバック関数で &lt;code&gt;async&lt;/code&gt; コードと &lt;code&gt;sync&lt;/code&gt; コードを混同していることが検出されると、非常に具体的なエラーメッセージが表示されます。例としては、新しいサイプレスコマンドをキューに登録してから、同期的に別の値を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="d7f0f2d19173146743594f430a21d28dc2726008" translate="yes" xml:space="preserve">
          <source>You will now see better stack traces and errors during &lt;code&gt;cypress run&lt;/code&gt; / in CI. No more &lt;code&gt;undefined is not a function&lt;/code&gt; errors.</source>
          <target state="translated">&lt;code&gt;cypress run&lt;/code&gt; 中/ CI 中のスタックトレースとエラーが改善されました。これ以上の &lt;code&gt;undefined is not a function&lt;/code&gt; エラーではありません。</target>
        </trans-unit>
        <trans-unit id="9787473bd247d1640f294339a0f6ce72d0de147f" translate="yes" xml:space="preserve">
          <source>You will see requests named as &lt;code&gt;(XHR Stub)&lt;/code&gt; or &lt;code&gt;(XHR)&lt;/code&gt; in the Command Log.</source>
          <target state="translated">コマンドログに &lt;code&gt;(XHR Stub)&lt;/code&gt; または &lt;code&gt;(XHR)&lt;/code&gt; という名前のリクエストが表示されます。</target>
        </trans-unit>
        <trans-unit id="8b2671e16e4a097b58544a7818605a54389459e0" translate="yes" xml:space="preserve">
          <source>You will see the following in the command log:</source>
          <target state="translated">コマンドログに以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="5807f6e3117effb36a88dca8e5e5057c1994a963" translate="yes" xml:space="preserve">
          <source>You will want to consider the development costs of implementing a visual testing tool yourself versus using an external 3rd party provider. Storing, reviewing and analyzing image differences are non-trivial tasks and they can quickly become a chore when going with a DIY solution.</source>
          <target state="translated">ビジュアルテストツールを自分で実装する場合の開発コストと、外部のサードパーティプロバイダを使用する場合の開発コストを考慮する必要があります。画像の保存、レビュー、および画像の違いの分析は、単純な作業ではなく、DIYソリューションを使用する場合には、すぐに雑用になってしまいます。</target>
        </trans-unit>
        <trans-unit id="5f798ddb6580479bf1f070c690f886f37f619ed5" translate="yes" xml:space="preserve">
          <source>You will want to then &lt;a href=&quot;../guides/continuous-integration#Record-tests&quot;&gt;add the key to your config file or as an environment variable&lt;/a&gt;.</source>
          <target state="translated">次に&lt;a href=&quot;../guides/continuous-integration#Record-tests&quot;&gt;、キーを設定ファイルに追加するか、環境変数として追加します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="04ed992567c1266be46b89368cfa8f547ecbc6f0" translate="yes" xml:space="preserve">
          <source>You would likely encounter constant port conflicts</source>
          <target state="translated">ポートの競合が絶え間なく発生する可能性が高い</target>
        </trans-unit>
        <trans-unit id="c5a74997f000a8a6b0ead4d688bd65d3cbfdff36" translate="yes" xml:space="preserve">
          <source>You would typically use them with the &lt;a href=&quot;../../api/commands/fixture&quot;&gt;&lt;code&gt;cy.fixture()&lt;/code&gt;&lt;/a&gt; command and most often when you&amp;rsquo;re stubbing &lt;a href=&quot;../guides/network-requests&quot;&gt;Network Requests&lt;/a&gt;.</source>
          <target state="translated">通常、これらは&lt;a href=&quot;../../api/commands/fixture&quot;&gt; &lt;code&gt;cy.fixture()&lt;/code&gt; &lt;/a&gt;コマンドで使用し、最も頻繁には&lt;a href=&quot;../guides/network-requests&quot;&gt;ネットワークリクエストを&lt;/a&gt;スタブするときに使用します。</target>
        </trans-unit>
        <trans-unit id="38ab251a23d48b529300dc39c893c29d1d585f50" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;d typically set this environment variable when running in &lt;a href=&quot;continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;.</source>
          <target state="translated">通常、&lt;a href=&quot;continuous-integration&quot;&gt;継続的インテグレーションで&lt;/a&gt;実行するときにこの環境変数を設定します。</target>
        </trans-unit>
        <trans-unit id="eac4348441c2845f1972b2393cb8583aeabac266" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll likely also want to test your login UI for:</source>
          <target state="translated">次のログインUIをテストすることもできます。</target>
        </trans-unit>
        <trans-unit id="a86509920a4005c16463cdef6e235bc5cc46371d" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll receive an email confirming your request. The Cypress Team will review your request and, if approved, an OSS plan subscription will be applied to your organization.</source>
          <target state="translated">リクエストを確認するメールが届きます。サイプレスチームがリクエストを確認し、承認された場合、OSSプランのサブスクリプションが組織に適用されます。</target>
        </trans-unit>
        <trans-unit id="3b7694508bf41bf37659646dd902f15567e64739" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll typically receive this message due to:</source>
          <target state="translated">通常、次の理由でこのメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="7a35f1ebb021d55307607e031b0bf309023c2e0d" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll want to refer to your CI provider&amp;rsquo;s documentation on how to set up multiple machines to run in your CI environment.</source>
          <target state="translated">CI環境で実行するように複数のマシンをセットアップする方法については、CIプロバイダーのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ff97cb7e003f0b0b856d0dcbab7911fc8549d610" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re about to embark on writing tests for your application, and only &lt;em&gt;you&lt;/em&gt; know your application, so we don&amp;rsquo;t have a lot of specific advice to give you.</source>
          <target state="translated">アプリケーションのテストを書き始めるところです。アプリケーション&lt;em&gt;を&lt;/em&gt;知っているのはあなただけなので、具体的なアドバイスはあまりありません。</target>
        </trans-unit>
        <trans-unit id="f8a5510df5de9d2a565d96620c6b6ec066fc5e45" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re in! Inspect the state of your application like you normally would if you&amp;rsquo;d dropped the &lt;code&gt;debugger&lt;/code&gt; into your application code.</source>
          <target state="translated">君も仲間だ！ &lt;code&gt;debugger&lt;/code&gt; をアプリケーションコードにドロップした場合と同じように、アプリケーションの状態を検査します。</target>
        </trans-unit>
        <trans-unit id="5a7e2faad9d8fe103868cba12c41bc7231ad6a60" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re polling something in your application with &lt;code&gt;setInterval&lt;/code&gt; and want to control that.</source>
          <target state="translated">アプリケーションの何かを &lt;code&gt;setInterval&lt;/code&gt; でポーリングしていて、それを制御したいと考えています。</target>
        </trans-unit>
        <trans-unit id="c28380e07650860efc738a338e59cff4f20dd8e7" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re trying to &lt;strong&gt;store and compare&lt;/strong&gt; values such as &lt;strong&gt;text&lt;/strong&gt;, &lt;strong&gt;classes&lt;/strong&gt;, &lt;strong&gt;attributes&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;テキスト&lt;/strong&gt;、&lt;strong&gt;クラス&lt;/strong&gt;、&lt;strong&gt;属性&lt;/strong&gt;などの値を&lt;strong&gt;保存して比較&lt;/strong&gt;しようとしてい&lt;strong&gt;ます&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b474b587e8bc56c18b6b7c81f1112b5c90454bbf" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re trying to share &lt;strong&gt;values&lt;/strong&gt; between tests and hooks like &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;beforeEach&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beforeEach&lt;/code&gt; よう &lt;code&gt;before&lt;/code&gt; 、テストとフックの間で&lt;strong&gt;値&lt;/strong&gt;を共有しようとしてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="2bc0b97ba22bc48dfd6c86d507f828612a87f44c" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re trying to test your application&amp;rsquo;s &amp;ldquo;failure path&amp;rdquo; by forcing things to fail.</source>
          <target state="translated">強制的に失敗させることによって、アプリケーションの「障害パス」をテストしようとしています。</target>
        </trans-unit>
        <trans-unit id="0c56a159de1f4368970ff5d1b826187ba622f73d" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re trying to test your application&amp;rsquo;s &amp;ldquo;happy path&amp;rdquo; by forcing things to pass.</source>
          <target state="translated">物事を強制的に通過させることによって、アプリケーションの「ハッピーパス」をテストしようとしています。</target>
        </trans-unit>
        <trans-unit id="a550cc56e467725dfdae836c12ba5677ad5b1a6f" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re using &lt;code&gt;oauth&lt;/code&gt; and want to stub login methods.</source>
          <target state="translated">&lt;code&gt;oauth&lt;/code&gt; を使用しており、ログインメソッドをスタブ化したい。</target>
        </trans-unit>
        <trans-unit id="b2883b1ae887b2e21321a80c0d6458773175a45b" translate="yes" xml:space="preserve">
          <source>You, the test writer must know ahead of time what your application is programmed to do - or have 100% confidence that the state of a mutable object (like the DOM) has stabilized in order to write accurate conditional tests.</source>
          <target state="translated">あなた、テストライターは、アプリケーションが何をするようにプログラムされているかを事前に知っていなければなりません-あるいは、正確な条件付きテストを書くためには、(DOMのような)変異可能なオブジェクトの状態が安定していることを100%確信していなければなりません。</target>
        </trans-unit>
        <trans-unit id="a7b7db0faffc2d03b47db85feb8616e8d2a77972" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;pluginsFile&lt;/code&gt; is invoked when Cypress opens a project.</source>
          <target state="translated">あなたの &lt;code&gt;pluginsFile&lt;/code&gt; は、サイプレスは、プロジェクトを開いたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d89883360548e8023f1a87f0baedbb6d0e59b33c" translate="yes" xml:space="preserve">
          <source>Your Cypress test code runs in the same run loop as your application. This means you have access to the code running on the page, as well as the things the browser makes available to you, like &lt;code&gt;document&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt;, and, of course, &lt;code&gt;debugger&lt;/code&gt;.</source>
          <target state="translated">サイプレステストコードは、アプリケーションと同じ実行ループで実行されます。これは、ページ上で実行されているコードにアクセスできること、および &lt;code&gt;document&lt;/code&gt; 、 &lt;code&gt;window&lt;/code&gt; 、そしてもちろん &lt;code&gt;debugger&lt;/code&gt; など、ブラウザーが使用できるようにするものにアクセスできることを意味します。</target>
        </trans-unit>
        <trans-unit id="ea0a664fdb2c4301c118c66fa9a16e415c552e5b" translate="yes" xml:space="preserve">
          <source>Your application code</source>
          <target state="translated">アプリケーションコード</target>
        </trans-unit>
        <trans-unit id="50050e3042f7ec88b3d5292def1e628c3f408ed0" translate="yes" xml:space="preserve">
          <source>Your application may use dynamic classes or ID&amp;rsquo;s that change</source>
          <target state="translated">アプリケーションは、動的クラスまたは変化するIDを使用する場合があります</target>
        </trans-unit>
        <trans-unit id="52911618a7175f28eaf93ca3327f130d3cf5c3f1" translate="yes" xml:space="preserve">
          <source>Your application uses dynamic ID&amp;rsquo;s and class names</source>
          <target state="translated">アプリケーションが動的IDとクラス名を使用している</target>
        </trans-unit>
        <trans-unit id="3045a8a5332629b580c98caeffc16c22781e836a" translate="yes" xml:space="preserve">
          <source>Your application&amp;rsquo;s viewport dimensions will now automatically scale to fit regardless of your screen&amp;rsquo;s size. This enables you to test resolutions larger than what your screen is capable of displaying. Additionally this fixes edge cases caused when there was a difference in viewports between users.</source>
          <target state="translated">アプリケーションのビューポートのサイズは、画面のサイズに関係なく、自動的に調整されます。これにより、画面の表示能力を超える解像度をテストできます。さらに、これはユーザー間でビューポートに違いがあったときに引き起こされたエッジケースを修正します。</target>
        </trans-unit>
        <trans-unit id="60b103172cb708a26a0cd83fd92359421ed3c884" translate="yes" xml:space="preserve">
          <source>Your current proxy settings can be viewed from within the Cypress Test Runner. Follow these steps:</source>
          <target state="translated">現在のプロキシ設定は、Cypress Test Runner 内で確認できます。以下の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="89c8db9da53773a8e97a7ccd27f75fd924623601" translate="yes" xml:space="preserve">
          <source>Your fixtures can be further organized within additional folders. For instance, you could create another folder called &lt;code&gt;images&lt;/code&gt; and add images:</source>
          <target state="translated">フィクスチャーは、追加のフォルダー内でさらに整理できます。たとえば、 &lt;code&gt;images&lt;/code&gt; という別のフォルダを作成して画像を追加できます。</target>
        </trans-unit>
        <trans-unit id="f7537ed89d991fc7bfe7d036a88a03bd1680a113" translate="yes" xml:space="preserve">
          <source>Your framework hasn&amp;rsquo;t finished bootstrapping.</source>
          <target state="translated">フレームワークのブートストラップが完了していません。</target>
        </trans-unit>
        <trans-unit id="648142e95f1ffc0bc853cb92576a2c444c68b155" translate="yes" xml:space="preserve">
          <source>Your function returns a &lt;code&gt;Promise&lt;/code&gt;, and you want to automatically resolve or reject it.</source>
          <target state="translated">関数が &lt;code&gt;Promise&lt;/code&gt; を返し、それを自動的に解決または拒否したい。</target>
        </trans-unit>
        <trans-unit id="35cfdae0d284492ddc2a4bf6b8e4a4096c61a21e" translate="yes" xml:space="preserve">
          <source>Your function will receive 2 arguments: &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt;.</source>
          <target state="translated">関数は2つの引数を受け取ります： &lt;code&gt;on&lt;/code&gt; と &lt;code&gt;config&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf8a2e404029a67272dc5bb64efe4acb0cc7d9c3" translate="yes" xml:space="preserve">
          <source>Your list of projects in the Test Runner now displays their last recorded run status - passing, failing, pending, running, etc.</source>
          <target state="translated">テストランナー内のプロジェクトのリストには、最後に記録された実行ステータス(合格、失敗、保留、実行中など)が表示されます。</target>
        </trans-unit>
        <trans-unit id="8def68f931fd1f4dad062f94e933a751d95aca5b" translate="yes" xml:space="preserve">
          <source>Your project is a non-commercial entity</source>
          <target state="translated">あなたのプロジェクトは非営利団体です。</target>
        </trans-unit>
        <trans-unit id="22b9817867cf70a0a67aa1226b00035b8103dc89" translate="yes" xml:space="preserve">
          <source>Your project&amp;rsquo;s current proxy settings now display in the &lt;a href=&quot;proxy-configuration#View-proxy-settings-in-Cypress&quot;&gt;Settings of the Test Runner&lt;/a&gt;. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3856&quot;&gt;#3856&lt;/a&gt;.</source>
          <target state="translated">プロジェクトの現在のプロキシ設定&lt;a href=&quot;proxy-configuration#View-proxy-settings-in-Cypress&quot;&gt;が、テストランナーの設定に&lt;/a&gt;表示されます。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3856&quot;&gt;＃3856&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="697a02b364e220515d12931f0448928a395cb9fb" translate="yes" xml:space="preserve">
          <source>Your selectors break from development changes to CSS styles or JS behavior</source>
          <target state="translated">CSS スタイルや JS の動作を変更した場合、セレクタが開発時のものとは別のものになります。</target>
        </trans-unit>
        <trans-unit id="1a606d99e2be8b8406a6e0315b6e867d370f7379" translate="yes" xml:space="preserve">
          <source>Your tests break whenever there are CSS or content changes</source>
          <target state="translated">CSS やコンテンツの変更があると、テストが中断されます。</target>
        </trans-unit>
        <trans-unit id="933dc34d770ebe503010c38732e23f0535b972f3" translate="yes" xml:space="preserve">
          <source>Your visual styles may also rely on more than just CSS, perhaps you want to ensure an SVG or image has rendered correctly or shapes were correctly drawn to a canvas.</source>
          <target state="translated">ビジュアルスタイルはCSSだけでなく、SVGや画像が正しくレンダリングされているか、シェイプがキャンバスに正しく描画されているかを確認したい場合もあるでしょう。</target>
        </trans-unit>
        <trans-unit id="6a4173c09fba685001a35c85647eda65ce46fdc8" translate="yes" xml:space="preserve">
          <source>Zero config Mochawesome reporter for Cypress with screenshots.</source>
          <target state="translated">Cypress用のゼロコンフィグMochawesomeレポーターをスクリーンショット付きで。</target>
        </trans-unit>
        <trans-unit id="d1c1e45e2bd8451861fad93c9ae896f208553c6a" translate="yes" xml:space="preserve">
          <source>^HTML &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">^ HTML &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 要素。</target>
        </trans-unit>
        <trans-unit id="b016a497c6941a3811814c68d66ff07bfb90df88" translate="yes" xml:space="preserve">
          <source>^HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements with a defined &lt;code&gt;type&lt;/code&gt; attribute of one of the following:</source>
          <target state="translated">次のいずれかの定義済み &lt;code&gt;type&lt;/code&gt; 属性を持つ^ HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素：</target>
        </trans-unit>
        <trans-unit id="5a25c1fb7f888154f4cf3726019f43e09f969954" translate="yes" xml:space="preserve">
          <source>a(&lt;em&gt;type&lt;/em&gt;)</source>
          <target state="translated">a(&lt;em&gt;type&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="6aa8fcde98e48fddf1de5f3e266ee6570d890c12" translate="yes" xml:space="preserve">
          <source>access the actual XHR object for assertions</source>
          <target state="translated">アサーションのための実際の XHR オブジェクトにアクセスします。</target>
        </trans-unit>
        <trans-unit id="db7a32b53f1c50a82aa0fd9bda55aafa73d687ee" translate="yes" xml:space="preserve">
          <source>adds &lt;code&gt;chai&lt;/code&gt; assertions for stubs and spies</source>
          <target state="translated">スタブとスパイの &lt;code&gt;chai&lt;/code&gt; アサーションを追加します</target>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="06965aa626d01e5cbfbd62bda1c1cd5902f94cc6" translate="yes" xml:space="preserve">
          <source>alternatively, use destructuring</source>
          <target state="translated">代わりに</target>
        </trans-unit>
        <trans-unit id="982131e9610e162804cb608af79e8ac0e8e57fbe" translate="yes" xml:space="preserve">
          <source>alwaysCalledOn</source>
          <target state="translated">alwaysCalledOn</target>
        </trans-unit>
        <trans-unit id="e7d2fb066db7f8d734b098fe130f7a680c398454" translate="yes" xml:space="preserve">
          <source>alwaysCalledWith</source>
          <target state="translated">alwaysCalledWith</target>
        </trans-unit>
        <trans-unit id="41d16b3ed8eac1c26dcea69d2a9d5c12ba0164b8" translate="yes" xml:space="preserve">
          <source>alwaysCalledWithExactly</source>
          <target state="translated">alwaysCalledWithExactly</target>
        </trans-unit>
        <trans-unit id="1aa44666c7418826ff49a92e15b733f529072b65" translate="yes" xml:space="preserve">
          <source>alwaysCalledWithMatch</source>
          <target state="translated">alwaysCalledWithMatch</target>
        </trans-unit>
        <trans-unit id="ab79788d5b1f9ef9abb530ef3fabb0fed3dbe64e" translate="yes" xml:space="preserve">
          <source>alwaysCalledWithNew</source>
          <target state="translated">alwaysCalledWithNew</target>
        </trans-unit>
        <trans-unit id="88d8212f813009f624f89d810f23dfa5a5dcff5e" translate="yes" xml:space="preserve">
          <source>alwaysReturned</source>
          <target state="translated">alwaysReturned</target>
        </trans-unit>
        <trans-unit id="745fe6b5b1a5d16a47a11983c531166c14316225" translate="yes" xml:space="preserve">
          <source>alwaysThrew</source>
          <target state="translated">alwaysThrew</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="ab4922fc7449a3b2f61bbfc53a6b958b9c478cc6" translate="yes" xml:space="preserve">
          <source>and much more - &lt;code&gt;cy.intercept()&lt;/code&gt; gives full access to all HTTP requests at all stages.</source>
          <target state="translated">さらに、 &lt;code&gt;cy.intercept()&lt;/code&gt; は、すべての段階ですべてのHTTPリクエストへのフルアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="7ba58739169412252d41dea92182cef18f70b69b" translate="yes" xml:space="preserve">
          <source>and on and on&amp;hellip;</source>
          <target state="translated">そしてどんどん&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="translated">any</target>
        </trans-unit>
        <trans-unit id="43b9d80d1f50472e56afb94a061257af5b53182b" translate="yes" xml:space="preserve">
          <source>appveyor.yml</source>
          <target state="translated">appveyor.yml</target>
        </trans-unit>
        <trans-unit id="5a36f117812e69f1a5ab7e32a43b6e3db24618b2" translate="yes" xml:space="preserve">
          <source>arch</source>
          <target state="translated">arch</target>
        </trans-unit>
        <trans-unit id="536f158f6dfd529865dcb865a97bb16804e34d70" translate="yes" xml:space="preserve">
          <source>arguments</source>
          <target state="translated">arguments</target>
        </trans-unit>
        <trans-unit id="df211ccdd94a63e0bcb9e6ae427a249484a49d60" translate="yes" xml:space="preserve">
          <source>as</source>
          <target state="translated">as</target>
        </trans-unit>
        <trans-unit id="1312c71367158fb268b1793b3473d23a81cf4d9d" translate="yes" xml:space="preserve">
          <source>attr(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="translated">attr（&lt;em&gt;name&lt;/em&gt;、&lt;em&gt;[value]&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="882c7af4a4652fa96fb81f092cc2cea7ebc62642" translate="yes" xml:space="preserve">
          <source>autoset-status-cypress-testrail-reporter</source>
          <target state="translated">autoset-status-cypress-testrail-reporter</target>
        </trans-unit>
        <trans-unit id="ec0a3d38277ad19039d901020e4fa5d40049f131" translate="yes" xml:space="preserve">
          <source>bitbucket-pipelines.yml</source>
          <target state="translated">bitbucket-pipelines.yml</target>
        </trans-unit>
        <trans-unit id="1064c9ccfdac81fc1084c91222873c7c2a84f915" translate="yes" xml:space="preserve">
          <source>blacklistHosts</source>
          <target state="translated">blacklistHosts</target>
        </trans-unit>
        <trans-unit id="a9b74ac8513ee8b5afb229690237d3f48d34d22d" translate="yes" xml:space="preserve">
          <source>blur</source>
          <target state="translated">blur</target>
        </trans-unit>
        <trans-unit id="ef98362b8a6b0c8cd804b0d227aa1ffeaba89786" translate="yes" xml:space="preserve">
          <source>browser</source>
          <target state="translated">browser</target>
        </trans-unit>
        <trans-unit id="c1efef9b619111fa57666798ed72e46afd3612cf" translate="yes" xml:space="preserve">
          <source>callCount</source>
          <target state="translated">callCount</target>
        </trans-unit>
        <trans-unit id="4b31bbcba710459137e63c4396275b56d2807c82" translate="yes" xml:space="preserve">
          <source>callback function called when any XHR is aborted</source>
          <target state="translated">XHR が中止されたときに呼び出されるコールバック関数</target>
        </trans-unit>
        <trans-unit id="9e56b4df926facb28cc01af42d1b60c056f83927" translate="yes" xml:space="preserve">
          <source>callback function called when any request is sent</source>
          <target state="translated">コールバック関数</target>
        </trans-unit>
        <trans-unit id="6472b303515a3f514846ef66e7163c392b91be75" translate="yes" xml:space="preserve">
          <source>callback function called when any response is returned</source>
          <target state="translated">コールバック関数</target>
        </trans-unit>
        <trans-unit id="5f79e8e842fe1ca26f5eabc89d5bb12494380701" translate="yes" xml:space="preserve">
          <source>callback function when a request is sent</source>
          <target state="translated">リクエスト送信時コールバック機能</target>
        </trans-unit>
        <trans-unit id="b14b8a8c8338921ee080fb9670c3faf7b95cf1a2" translate="yes" xml:space="preserve">
          <source>callback function when a response is returned</source>
          <target state="translated">コールバック関数</target>
        </trans-unit>
        <trans-unit id="29f08839b9869dd4d8b2b946570aa19d83794615" translate="yes" xml:space="preserve">
          <source>callback function which fires anytime an XHR is aborted</source>
          <target state="translated">XHRが中止されたときに発生するコールバック関数</target>
        </trans-unit>
        <trans-unit id="970eeb47b2d091dc3fee38f7ecd0e8ec3352f34f" translate="yes" xml:space="preserve">
          <source>called</source>
          <target state="translated">called</target>
        </trans-unit>
        <trans-unit id="4b8cdc4a82f01ec231870a7a4c1d802b782b7500" translate="yes" xml:space="preserve">
          <source>calledAfter</source>
          <target state="translated">calledAfter</target>
        </trans-unit>
        <trans-unit id="d3712a77ddeadb37020c1e6f77f2896aa5ee9dbf" translate="yes" xml:space="preserve">
          <source>calledBefore</source>
          <target state="translated">calledBefore</target>
        </trans-unit>
        <trans-unit id="428fec6c21e4ed4ea68ea2ae25c8eb77daa06d15" translate="yes" xml:space="preserve">
          <source>calledOn</source>
          <target state="translated">calledOn</target>
        </trans-unit>
        <trans-unit id="02bff6172e7cdae55469e9c30966d1118b23b265" translate="yes" xml:space="preserve">
          <source>calledOnce</source>
          <target state="translated">calledOnce</target>
        </trans-unit>
        <trans-unit id="c622e5f1a0255891f3893da95474bb20f1765b8f" translate="yes" xml:space="preserve">
          <source>calledThrice</source>
          <target state="translated">calledThrice</target>
        </trans-unit>
        <trans-unit id="e21d20383a56e44c4673ee004b8035335beabd34" translate="yes" xml:space="preserve">
          <source>calledTwice</source>
          <target state="translated">calledTwice</target>
        </trans-unit>
        <trans-unit id="92b3489d9d49199e46d9af83624ffc44abb61fe0" translate="yes" xml:space="preserve">
          <source>calledWith</source>
          <target state="translated">calledWith</target>
        </trans-unit>
        <trans-unit id="79a026a2fb44e97501a320077b780e0d2b1f5922" translate="yes" xml:space="preserve">
          <source>calledWithExactly</source>
          <target state="translated">calledWithExactly</target>
        </trans-unit>
        <trans-unit id="ee21509c8c1be9d566c6c2b4b8c0e1fd64739766" translate="yes" xml:space="preserve">
          <source>calledWithMatch</source>
          <target state="translated">calledWithMatch</target>
        </trans-unit>
        <trans-unit id="bf4258c5b4e2a485b26d92c559d1afa1375a8218" translate="yes" xml:space="preserve">
          <source>calledWithNew</source>
          <target state="translated">calledWithNew</target>
        </trans-unit>
        <trans-unit id="604f60f245e74033cb5c6a23463091f19dfd572d" translate="yes" xml:space="preserve">
          <source>can intercept all types of network requests including Fetch API, page loads, XMLHttpRequests, resource loads, etc.</source>
          <target state="translated">は、Fetch API、ページロード、XMLHttpRequests、リソースロードなど、あらゆるタイプのネットワークリクエストを傍受することができます。</target>
        </trans-unit>
        <trans-unit id="bffd54c04d5321f75d061c808047f033bed2aeb2" translate="yes" xml:space="preserve">
          <source>change the run-time behavior of Cypress before opening a pull request</source>
          <target state="translated">プルリクエストを開く前の Cypress のランタイム動作を変更します。</target>
        </trans-unit>
        <trans-unit id="698dc05e9772e7dccb755c0fcb1310b87815a3ea" translate="yes" xml:space="preserve">
          <source>change(&lt;em&gt;function&lt;/em&gt;)</source>
          <target state="translated">change(&lt;em&gt;function&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="08ac019697e04f1eadf21bd5e11b0a1d25b336de" translate="yes" xml:space="preserve">
          <source>changing the response from the server</source>
          <target state="translated">サーバからの応答を変更</target>
        </trans-unit>
        <trans-unit id="d56d985300d4b52eb6e189be006f44f8d23c5ec9" translate="yes" xml:space="preserve">
          <source>check</source>
          <target state="translated">check</target>
        </trans-unit>
        <trans-unit id="75e4aedce48faf384f3535ffeb842e9a0718a25c" translate="yes" xml:space="preserve">
          <source>checked</source>
          <target state="translated">checked</target>
        </trans-unit>
        <trans-unit id="42685f11da91a55b1f5c5b782edb2f0fc1dd5148" translate="yes" xml:space="preserve">
          <source>children</source>
          <target state="translated">children</target>
        </trans-unit>
        <trans-unit id="6179cc1997fe0737bf6e0867f408f0e34f4ae83d" translate="yes" xml:space="preserve">
          <source>circle.yml</source>
          <target state="translated">circle.yml</target>
        </trans-unit>
        <trans-unit id="fbbd19ad1d7bedad4fdbac0f37d409fa91db14c1" translate="yes" xml:space="preserve">
          <source>class(&lt;em&gt;className&lt;/em&gt;)</source>
          <target state="translated">class(&lt;em&gt;className&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="168cbb2ea52b9e34d271accecfa7d7951e948a99" translate="yes" xml:space="preserve">
          <source>clear</source>
          <target state="translated">clear</target>
        </trans-unit>
        <trans-unit id="268d1428d8d8ba7d1c4a1b9f15753bee467cf52b" translate="yes" xml:space="preserve">
          <source>clearCookie</source>
          <target state="translated">clearCookie</target>
        </trans-unit>
        <trans-unit id="380a624a5556dd6d3cfbda5f6fe39457e08a3c40" translate="yes" xml:space="preserve">
          <source>clearCookies</source>
          <target state="translated">clearCookies</target>
        </trans-unit>
        <trans-unit id="63e18e3324a093bc9d7284f3329e625362e42e89" translate="yes" xml:space="preserve">
          <source>clearLocalStorage</source>
          <target state="translated">clearLocalStorage</target>
        </trans-unit>
        <trans-unit id="b93ec56608fb302fea7a8019d7c0e8e7239fc033" translate="yes" xml:space="preserve">
          <source>click</source>
          <target state="translated">click</target>
        </trans-unit>
        <trans-unit id="83655a5560ef1c438170f28acfecbe5013e8f34f" translate="yes" xml:space="preserve">
          <source>clock</source>
          <target state="translated">clock</target>
        </trans-unit>
        <trans-unit id="a6a97c6ef99bcf77d165796e9d8f42e57c7308b5" translate="yes" xml:space="preserve">
          <source>clock behavior before &lt;code&gt;cy.visit()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;cy.visit()&lt;/code&gt; の前の時計の動作</target>
        </trans-unit>
        <trans-unit id="0b2e4de9c9b4d1a6befeb7709ce03c4f81bc3324" translate="yes" xml:space="preserve">
          <source>closeTo(&lt;em&gt;expected&lt;/em&gt;, &lt;em&gt;delta&lt;/em&gt;)</source>
          <target state="translated">closeTo（&lt;em&gt;予想&lt;/em&gt;、&lt;em&gt;デルタ&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="c113bd75a926da05464727110810cccd9f23a03d" translate="yes" xml:space="preserve">
          <source>closest</source>
          <target state="translated">closest</target>
        </trans-unit>
        <trans-unit id="4d9d4d13c9fca8770c92d0ba02b99d333e6ffdf0" translate="yes" xml:space="preserve">
          <source>cly</source>
          <target state="translated">cly</target>
        </trans-unit>
        <trans-unit id="d9c778992d3a1d8eb44bfc070fdf2fba36340bba" translate="yes" xml:space="preserve">
          <source>command instance &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="translated">コマンドインスタンス&lt;strong&gt;（オブジェクト）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f2660c56744bb635c0b82bbbda7338ef388e8e2" translate="yes" xml:space="preserve">
          <source>command properties and arguments &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="translated">コマンドのプロパティと引数&lt;strong&gt;（オブジェクト）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="418b03c91215cc919b0411338e64a1f9a8c01e9a" translate="yes" xml:space="preserve">
          <source>community</source>
          <target state="translated">community</target>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="translated">config</target>
        </trans-unit>
        <trans-unit id="0652e436f42d75f5672a8bd9ae2f398a55115d51" translate="yes" xml:space="preserve">
          <source>configuration</source>
          <target state="translated">configuration</target>
        </trans-unit>
        <trans-unit id="f9e8f9efc5ada5451ea10910bb6334378cd4fd0c" translate="yes" xml:space="preserve">
          <source>contain(&lt;em&gt;text&lt;/em&gt;)</source>
          <target state="translated">contain(&lt;em&gt;text&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="caeb909ae4ff4ee25a0ff0d476946ed256f2aee1" translate="yes" xml:space="preserve">
          <source>contains</source>
          <target state="translated">contains</target>
        </trans-unit>
        <trans-unit id="f3f2b45e3fe0e25eef937527f97f3df42af01a10" translate="yes" xml:space="preserve">
          <source>css(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="translated">css（&lt;em&gt;名前&lt;/em&gt;、&lt;em&gt;[値]&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="31ace4ad1831aae866cd7951a842ca3e38f21981" translate="yes" xml:space="preserve">
          <source>cy</source>
          <target state="translated">cy</target>
        </trans-unit>
        <trans-unit id="20c80193b1ecd7b852f764b064020c13d6dc13eb" translate="yes" xml:space="preserve">
          <source>cy-dom-diff allows matching chunks of DOM against HTML; including dynamic content.</source>
          <target state="translated">cy-dom-diff は、動的コンテンツを含む DOM の塊を HTML に対してマッチングさせることができます。</target>
        </trans-unit>
        <trans-unit id="853c87400933970a6566f37700f29a2f23ddd036" translate="yes" xml:space="preserve">
          <source>cy-mobile-commands</source>
          <target state="translated">cy-mobile-commands</target>
        </trans-unit>
        <trans-unit id="506f88bd51eca32b14f38ebd0b8e6c2d4e4edef1" translate="yes" xml:space="preserve">
          <source>cy-search</source>
          <target state="translated">cy-search</target>
        </trans-unit>
        <trans-unit id="64f9d11b9d6a30549d2ec2ea61be05d7d7e5db99" translate="yes" xml:space="preserve">
          <source>cy-spok</source>
          <target state="translated">cy-spok</target>
        </trans-unit>
        <trans-unit id="1ccbbcad40ecbeb676506963807de7ddff1644ea" translate="yes" xml:space="preserve">
          <source>cy-view</source>
          <target state="translated">cy-view</target>
        </trans-unit>
        <trans-unit id="71224a852ab46001c8f775e8feedd63dad1e5955" translate="yes" xml:space="preserve">
          <source>cy...() failed because the element you are chaining off of has become detached or removed from the dom</source>
          <target state="translated">cy....()が失敗したのは、チェーン接続している要素が dom から切り離されたか、削除されたためです。</target>
        </trans-unit>
        <trans-unit id="3b106cc8eb05e42314a69a3bbd986df53069eb41" translate="yes" xml:space="preserve">
          <source>cy....() failed because the element cannot be interacted with</source>
          <target state="translated">cy......()は、要素との対話ができないので失敗しました。</target>
        </trans-unit>
        <trans-unit id="30b19e08efef5909c5c31f4c4649ec15c0fa5118" translate="yes" xml:space="preserve">
          <source>cy....() failed because the element is currently animating</source>
          <target state="translated">cy......()が失敗したのは、要素が現在アニメーションしているためです。</target>
        </trans-unit>
        <trans-unit id="70a4c7cd8e13bc0ea9dd8ae9d5715d70dbded6b6" translate="yes" xml:space="preserve">
          <source>cy.task</source>
          <target state="translated">cy.task</target>
        </trans-unit>
        <trans-unit id="ad0cb315e4b5de4b02f426de3b8c666e949ba6da" translate="yes" xml:space="preserve">
          <source>cy.visit() failed because you are attempting to visit a second unique domain</source>
          <target state="translated">cy.visit()が失敗したのは、二番目にユニークなドメインを訪問しようとしているためです。</target>
        </trans-unit>
        <trans-unit id="81f7f97efdbc9f67889fc4a85aeefb6f4e424dd9" translate="yes" xml:space="preserve">
          <source>cyphell</source>
          <target state="translated">cyphell</target>
        </trans-unit>
        <trans-unit id="a31106349dabcf7678a8c2007f8a815fbf572dfe" translate="yes" xml:space="preserve">
          <source>cypress custom commands to locate react elements by component, props and state</source>
          <target state="translated">cypress のカスタムコマンドで react 要素をコンポーネント、小道具、状態で検索する</target>
        </trans-unit>
        <trans-unit id="c592b7de9065ebdd3fab3e42eb22f962b3ae8f97" translate="yes" xml:space="preserve">
          <source>cypress-allure-plugin</source>
          <target state="translated">cypress-allure-plugin</target>
        </trans-unit>
        <trans-unit id="685038f571bc09b075d1f91fa0e4b41c84312d61" translate="yes" xml:space="preserve">
          <source>cypress-angular-unit-test</source>
          <target state="translated">cypress-angular-unit-test</target>
        </trans-unit>
        <trans-unit id="d8c8324eca2a0d4d227ed69a8eeb5528333ad114" translate="yes" xml:space="preserve">
          <source>cypress-angularjs-unit-test</source>
          <target state="translated">cypress-angularjs-unit-test</target>
        </trans-unit>
        <trans-unit id="44325a88fcc01959ca670e1e4f40a87838e052d9" translate="yes" xml:space="preserve">
          <source>cypress-app-watcher-preprocessor</source>
          <target state="translated">cypress-app-watcher-preprocessor</target>
        </trans-unit>
        <trans-unit id="e37ed0400ca5e5141f7b1d61b62168fd6f499acd" translate="yes" xml:space="preserve">
          <source>cypress-audit</source>
          <target state="translated">cypress-audit</target>
        </trans-unit>
        <trans-unit id="2500857e729166c03938069426e43a88b65d5759" translate="yes" xml:space="preserve">
          <source>cypress-autorecord</source>
          <target state="translated">cypress-autorecord</target>
        </trans-unit>
        <trans-unit id="82f63e99d38d467b61817896e9375502875b7001" translate="yes" xml:space="preserve">
          <source>cypress-autostub</source>
          <target state="translated">cypress-autostub</target>
        </trans-unit>
        <trans-unit id="06f43b4f26d8f5fcc21a7fb285aadfabf2f530cd" translate="yes" xml:space="preserve">
          <source>cypress-axe</source>
          <target state="translated">cypress-axe</target>
        </trans-unit>
        <trans-unit id="5eb88a59967cedf449ce0ab27a50110fa60e1a1f" translate="yes" xml:space="preserve">
          <source>cypress-blink-test</source>
          <target state="translated">cypress-blink-test</target>
        </trans-unit>
        <trans-unit id="2c555b3ad941be87e5bb86f4e35e24d3ae2437dd" translate="yes" xml:space="preserve">
          <source>cypress-browser-permissions</source>
          <target state="translated">cypress-browser-permissions</target>
        </trans-unit>
        <trans-unit id="0df6dc2a442f9f514206b0b0aeb7cc3fcf94fa7c" translate="yes" xml:space="preserve">
          <source>cypress-capybara</source>
          <target state="translated">cypress-capybara</target>
        </trans-unit>
        <trans-unit id="551c5878a91ca677f9841ab020b428774f5897a3" translate="yes" xml:space="preserve">
          <source>cypress-commands</source>
          <target state="translated">cypress-commands</target>
        </trans-unit>
        <trans-unit id="3535f52ea00a6129ea4ebf858f4564473d48c885" translate="yes" xml:space="preserve">
          <source>cypress-cy-select</source>
          <target state="translated">cypress-cy-select</target>
        </trans-unit>
        <trans-unit id="a621b8071d5337a16db7d6a703abe30736c2a9f4" translate="yes" xml:space="preserve">
          <source>cypress-cycle-unit-test</source>
          <target state="translated">cypress-cycle-unit-test</target>
        </trans-unit>
        <trans-unit id="81d4fd62a6f52423435bb152803ae42759e447b4" translate="yes" xml:space="preserve">
          <source>cypress-dark</source>
          <target state="translated">cypress-dark</target>
        </trans-unit>
        <trans-unit id="df2cd9a0df84826823b817a47ee868c9b4560c79" translate="yes" xml:space="preserve">
          <source>cypress-docker-images</source>
          <target state="translated">cypress-docker-images</target>
        </trans-unit>
        <trans-unit id="c77bd5b9822047f1821f36035e55ef5199121f45" translate="yes" xml:space="preserve">
          <source>cypress-dotenv</source>
          <target state="translated">cypress-dotenv</target>
        </trans-unit>
        <trans-unit id="2ca047dd10653ce69b1027da7de40af08ff356c0" translate="yes" xml:space="preserve">
          <source>cypress-downloadfile</source>
          <target state="translated">cypress-downloadfile</target>
        </trans-unit>
        <trans-unit id="e634bc830c4f40d606b39c07603e448cc9ba73aa" translate="yes" xml:space="preserve">
          <source>cypress-drag-drop</source>
          <target state="translated">cypress-drag-drop</target>
        </trans-unit>
        <trans-unit id="ff4a7fe9d91829f1da63adc7c867efee5a595579" translate="yes" xml:space="preserve">
          <source>cypress-example-docker-codeship</source>
          <target state="translated">cypress-example-docker-codeship</target>
        </trans-unit>
        <trans-unit id="eabe4915617dc0421e9922bd3673807bd387b48d" translate="yes" xml:space="preserve">
          <source>cypress-example-kitchensink</source>
          <target state="translated">cypress-example-kitchensink</target>
        </trans-unit>
        <trans-unit id="54e6fb6d11f64e5562c166541616d67fd9cda907" translate="yes" xml:space="preserve">
          <source>cypress-example-kitchensink Assertions</source>
          <target state="translated">cypress-example-kitchensink アサーション</target>
        </trans-unit>
        <trans-unit id="f245f51f47b3e71d0d14978578b402687bd5183b" translate="yes" xml:space="preserve">
          <source>cypress-example-piechopper</source>
          <target state="translated">cypress-example-piechopper</target>
        </trans-unit>
        <trans-unit id="84f9e522bd1e1acd66404287e8ccb46964c5cdf5" translate="yes" xml:space="preserve">
          <source>cypress-example-recipes</source>
          <target state="translated">cypress-example-recipes</target>
        </trans-unit>
        <trans-unit id="942d3b6bae5169646558d78b0075af00743d43d0" translate="yes" xml:space="preserve">
          <source>cypress-example-todomvc</source>
          <target state="translated">cypress-example-todomvc</target>
        </trans-unit>
        <trans-unit id="93f2d1cf3b1baf4065fac0123e760b7c0cd37ded" translate="yes" xml:space="preserve">
          <source>cypress-expect</source>
          <target state="translated">cypress-expect</target>
        </trans-unit>
        <trans-unit id="91ccb99edf1a2c2b220c38af44ca4cdc1eed6518" translate="yes" xml:space="preserve">
          <source>cypress-expect-n-assertions</source>
          <target state="translated">cypress-expect-n-assertions</target>
        </trans-unit>
        <trans-unit id="60da51978f8d3b69b5aa4ef07bfb1ed8e801b9a1" translate="yes" xml:space="preserve">
          <source>cypress-fail-fast</source>
          <target state="translated">cypress-fail-fast</target>
        </trans-unit>
        <trans-unit id="e24c405ecbe4e6276083eaa342dc48b082629b80" translate="yes" xml:space="preserve">
          <source>cypress-failed-log</source>
          <target state="translated">cypress-failed-log</target>
        </trans-unit>
        <trans-unit id="286b7fb5dae04edcbea5d015cc2d283b92b84690" translate="yes" xml:space="preserve">
          <source>cypress-file-upload</source>
          <target state="translated">cypress-file-upload</target>
        </trans-unit>
        <trans-unit id="6249292e4c5098dd6436cd57c5378fa2c8a4a51a" translate="yes" xml:space="preserve">
          <source>cypress-fill-command</source>
          <target state="translated">cypress-fill-command</target>
        </trans-unit>
        <trans-unit id="bd3135f2741788f74fc4b1d9e4f1b1601b7cfbdc" translate="yes" xml:space="preserve">
          <source>cypress-firebase</source>
          <target state="translated">cypress-firebase</target>
        </trans-unit>
        <trans-unit id="ff47127972fba86546bb14c5e12fc4bb25a69677" translate="yes" xml:space="preserve">
          <source>cypress-graphql-mock</source>
          <target state="translated">cypress-graphql-mock</target>
        </trans-unit>
        <trans-unit id="1974d8db252c8461655c6a5afc7e88dbe32c8af1" translate="yes" xml:space="preserve">
          <source>cypress-graphql-mock-network</source>
          <target state="translated">cypress-graphql-mock-network</target>
        </trans-unit>
        <trans-unit id="e7c934e56b4b9396f80bee35fe0c1181311fbf3b" translate="yes" xml:space="preserve">
          <source>cypress-har-generator</source>
          <target state="translated">cypress-har-generator</target>
        </trans-unit>
        <trans-unit id="5e720167d7eaff4837074e67669c94f871b0ca2b" translate="yes" xml:space="preserve">
          <source>cypress-hmr-restarter</source>
          <target state="translated">cypress-hmr-restarter</target>
        </trans-unit>
        <trans-unit id="b1123afc16a596b1b22e8c49f9e1ebc0609ff294" translate="yes" xml:space="preserve">
          <source>cypress-hyperapp-unit-test</source>
          <target state="translated">cypress-hyperapp-unit-test</target>
        </trans-unit>
        <trans-unit id="a9a836319f27093ff9ae974e581c232a177c3a19" translate="yes" xml:space="preserve">
          <source>cypress-iframe</source>
          <target state="translated">cypress-iframe</target>
        </trans-unit>
        <trans-unit id="48237284522d9c08fd20bcba09f43a71484156a3" translate="yes" xml:space="preserve">
          <source>cypress-jest-adapter</source>
          <target state="translated">cypress-jest-adapter</target>
        </trans-unit>
        <trans-unit id="188793c424bf363fb6ff9af9d1ac078b98495257" translate="yes" xml:space="preserve">
          <source>cypress-keycloak-commands</source>
          <target state="translated">cypress-keycloak-commands</target>
        </trans-unit>
        <trans-unit id="3a6e8d923d080b10f8f1840013b3dd464c74a7dd" translate="yes" xml:space="preserve">
          <source>cypress-laravel</source>
          <target state="translated">cypress-laravel</target>
        </trans-unit>
        <trans-unit id="56ae6b268fbd488724782861dc73ea977ae6c06c" translate="yes" xml:space="preserve">
          <source>cypress-layout-inspector</source>
          <target state="translated">cypress-layout-inspector</target>
        </trans-unit>
        <trans-unit id="d364f763d30cf0b441acf480314b54bd42a7643c" translate="yes" xml:space="preserve">
          <source>cypress-localstorage-commands</source>
          <target state="translated">cypress-localstorage-commands</target>
        </trans-unit>
        <trans-unit id="1d6db2a44d901e293d206460656517a88ed14381" translate="yes" xml:space="preserve">
          <source>cypress-log-to-output</source>
          <target state="translated">cypress-log-to-output</target>
        </trans-unit>
        <trans-unit id="2050d1cd52a415871fc7d2469eddf7b6a462593f" translate="yes" xml:space="preserve">
          <source>cypress-mailosaur</source>
          <target state="translated">cypress-mailosaur</target>
        </trans-unit>
        <trans-unit id="7544df9160b0e25c8c3c98d4b4a6dd73038702eb" translate="yes" xml:space="preserve">
          <source>cypress-mochawesome-reporter</source>
          <target state="translated">cypress-mochawesome-reporter</target>
        </trans-unit>
        <trans-unit id="7f6ac2fdc1af768468dc26bf28e8b38808ef3d09" translate="yes" xml:space="preserve">
          <source>cypress-ntlm-auth</source>
          <target state="translated">cypress-ntlm-auth</target>
        </trans-unit>
        <trans-unit id="4aff15d6ad0c0a52090f5a595c00c1d00ea39098" translate="yes" xml:space="preserve">
          <source>cypress-on-rails</source>
          <target state="translated">cypress-on-rails</target>
        </trans-unit>
        <trans-unit id="2801d8cd4809df9c4aabc5afecad34c1d12698ed" translate="yes" xml:space="preserve">
          <source>cypress-otp</source>
          <target state="translated">cypress-otp</target>
        </trans-unit>
        <trans-unit id="60dfca23b20e0c872fb75190628765251d6604cd" translate="yes" xml:space="preserve">
          <source>cypress-pipe</source>
          <target state="translated">cypress-pipe</target>
        </trans-unit>
        <trans-unit id="4c63849ef9dfe6d36e90ad7d49593b7008a5fcd8" translate="yes" xml:space="preserve">
          <source>cypress-plugin-livereload</source>
          <target state="translated">cypress-plugin-livereload</target>
        </trans-unit>
        <trans-unit id="6be65232fbe686224c5f461b099504eba19e4bcf" translate="yes" xml:space="preserve">
          <source>cypress-plugin-retries</source>
          <target state="translated">cypress-plugin-retries</target>
        </trans-unit>
        <trans-unit id="2942c80a28c48824af9be2df6abf13d886a963a2" translate="yes" xml:space="preserve">
          <source>cypress-plugin-snapshots</source>
          <target state="translated">cypress-plugin-snapshots</target>
        </trans-unit>
        <trans-unit id="aef7fd446506be8cb9d4eb9c7d915faba34ce55e" translate="yes" xml:space="preserve">
          <source>cypress-plugin-tab</source>
          <target state="translated">cypress-plugin-tab</target>
        </trans-unit>
        <trans-unit id="62988526250aaf8d372e2192da6e5901c93757bc" translate="yes" xml:space="preserve">
          <source>cypress-protobuf</source>
          <target state="translated">cypress-protobuf</target>
        </trans-unit>
        <trans-unit id="8158b01f149fab08496248a3096b1535fb0481a6" translate="yes" xml:space="preserve">
          <source>cypress-rails</source>
          <target state="translated">cypress-rails</target>
        </trans-unit>
        <trans-unit id="f3e34e2c597d4e116524fe04d38841be11b0b015" translate="yes" xml:space="preserve">
          <source>cypress-react-selector</source>
          <target state="translated">cypress-react-selector</target>
        </trans-unit>
        <trans-unit id="219201fc1f82166b9d033201fcba1f6e3b25b7c5" translate="yes" xml:space="preserve">
          <source>cypress-react-unit-test</source>
          <target state="translated">cypress-react-unit-test</target>
        </trans-unit>
        <trans-unit id="d6cf95bb302d41dae12db14fcac1b036b0446109" translate="yes" xml:space="preserve">
          <source>cypress-redux</source>
          <target state="translated">cypress-redux</target>
        </trans-unit>
        <trans-unit id="33fa5f13711d20677ddf2b62faf25facc70b7c49" translate="yes" xml:space="preserve">
          <source>cypress-repeat</source>
          <target state="translated">cypress-repeat</target>
        </trans-unit>
        <trans-unit id="fef7d35f5d9bbc54b778f09b4bf4f32d3b44fdc4" translate="yes" xml:space="preserve">
          <source>cypress-rollup-preprocessor</source>
          <target state="translated">cypress-rollup-preprocessor</target>
        </trans-unit>
        <trans-unit id="eb98693421105c91ff2530ef17be6e8242beeddd" translate="yes" xml:space="preserve">
          <source>cypress-select-tests</source>
          <target state="translated">cypress-select-tests</target>
        </trans-unit>
        <trans-unit id="1a3aa28b33d31b0939a240cae88ddd8fc8a3db87" translate="yes" xml:space="preserve">
          <source>cypress-shadow-dom</source>
          <target state="translated">cypress-shadow-dom</target>
        </trans-unit>
        <trans-unit id="6ef85ef962c8774fd691927abb4942ac7fa3baa2" translate="yes" xml:space="preserve">
          <source>cypress-slack-healthcheck</source>
          <target state="translated">cypress-slack-healthcheck</target>
        </trans-unit>
        <trans-unit id="b4e64b0bb155fa6ee1122e3dfe69ea5c5e8d8df0" translate="yes" xml:space="preserve">
          <source>cypress-slack-reporter</source>
          <target state="translated">cypress-slack-reporter</target>
        </trans-unit>
        <trans-unit id="8243605425ff2e7641cbe1ab23bfb0b7518f90bd" translate="yes" xml:space="preserve">
          <source>cypress-social-logins</source>
          <target state="translated">cypress-social-logins</target>
        </trans-unit>
        <trans-unit id="32454fd56b83766207d087504db57b001d648b9f" translate="yes" xml:space="preserve">
          <source>cypress-svelte-unit-test</source>
          <target state="translated">cypress-svelte-unit-test</target>
        </trans-unit>
        <trans-unit id="a40a1c865c3663b6ffdb380568047326157d47c4" translate="yes" xml:space="preserve">
          <source>cypress-tags</source>
          <target state="translated">cypress-tags</target>
        </trans-unit>
        <trans-unit id="c0ac7988755ae461b1125f123a74bbdacf4e14e8" translate="yes" xml:space="preserve">
          <source>cypress-teamcity-reporter</source>
          <target state="translated">cypress-teamcity-reporter</target>
        </trans-unit>
        <trans-unit id="21925373bbc911a4132a71404b4745f6141014d7" translate="yes" xml:space="preserve">
          <source>cypress-terminal-report</source>
          <target state="translated">cypress-terminal-report</target>
        </trans-unit>
        <trans-unit id="f4811371e72c2723be25e15ee551bffc631aa35b" translate="yes" xml:space="preserve">
          <source>cypress-testing-library</source>
          <target state="translated">cypress-testing-library</target>
        </trans-unit>
        <trans-unit id="db1ad3b7d779b8e766c71399492c69d34263fe81" translate="yes" xml:space="preserve">
          <source>cypress-testrail-reporter</source>
          <target state="translated">cypress-testrail-reporter</target>
        </trans-unit>
        <trans-unit id="b1c1700726ae24847576c524d98d358cc02e9c75" translate="yes" xml:space="preserve">
          <source>cypress-timings</source>
          <target state="translated">cypress-timings</target>
        </trans-unit>
        <trans-unit id="80c4b51ccfe1feee0ff2968608b18e13b8842601" translate="yes" xml:space="preserve">
          <source>cypress-unfetch</source>
          <target state="translated">cypress-unfetch</target>
        </trans-unit>
        <trans-unit id="2475cf6c595f4c255cf2e679d1ad091cbada646b" translate="yes" xml:space="preserve">
          <source>cypress-vue-unit-test</source>
          <target state="translated">cypress-vue-unit-test</target>
        </trans-unit>
        <trans-unit id="b2a3018ceb2d61c3aa5829bec18fda5861d2c1db" translate="yes" xml:space="preserve">
          <source>cypress-wait-until</source>
          <target state="translated">cypress-wait-until</target>
        </trans-unit>
        <trans-unit id="9030706d91f7c22858b4562086b1f45a2d756378" translate="yes" xml:space="preserve">
          <source>cypress-watch-and-reload</source>
          <target state="translated">cypress-watch-and-reload</target>
        </trans-unit>
        <trans-unit id="3fa2c1db405a0cf8b7993d4837193bc967ba2e4c" translate="yes" xml:space="preserve">
          <source>cypress-websocket-testing</source>
          <target state="translated">cypress-websocket-testing</target>
        </trans-unit>
        <trans-unit id="8c9b55bba28d709f4827ea28485b1e043826713b" translate="yes" xml:space="preserve">
          <source>cypress-xpath</source>
          <target state="translated">cypress-xpath</target>
        </trans-unit>
        <trans-unit id="1cd7786282577f82e5e5d7703505815e6e9e412e" translate="yes" xml:space="preserve">
          <source>cypress.json</source>
          <target state="translated">cypress.json</target>
        </trans-unit>
        <trans-unit id="04692159d7d9d295f56960cfce9f9a9babc252bd" translate="yes" xml:space="preserve">
          <source>cypressautomocker</source>
          <target state="translated">cypressautomocker</target>
        </trans-unit>
        <trans-unit id="f067441fe4a8b7a85b2239bab5670e77fda9fb14" translate="yes" xml:space="preserve">
          <source>data(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="translated">データ（&lt;em&gt;名前&lt;/em&gt;、&lt;em&gt;[値]&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="7cc6a5c381eab655a2b25bb744a3a5143775d522" translate="yes" xml:space="preserve">
          <source>data-cy shorthand notation for cypress get and find functions</source>
          <target state="translated">サイプレスの取得・検索関数のdata-cy略記法</target>
        </trans-unit>
        <trans-unit id="2da62890f7b6a88945dfd31de8e2bf3a9dc58d6f" translate="yes" xml:space="preserve">
          <source>dblclick</source>
          <target state="translated">dblclick</target>
        </trans-unit>
        <trans-unit id="32faaecac742100f7753f0c1d0aa0add01b4046b" translate="yes" xml:space="preserve">
          <source>debug</source>
          <target state="translated">debug</target>
        </trans-unit>
        <trans-unit id="947a6315975831909d82c87a0564425a0b9a9a50" translate="yes" xml:space="preserve">
          <source>debug Cypress not starting or hanging</source>
          <target state="translated">デバッグ Cypress が起動していない、またはぶら下がっていない</target>
        </trans-unit>
        <trans-unit id="ab406449d6aa92ac418e55a018e5f8d05b9902cb" translate="yes" xml:space="preserve">
          <source>debug problems related to the way CLI arguments are parsed by the npm CLI module</source>
          <target state="translated">CLI の引数が npm CLI モジュールによって解析される方法に関連する問題をデバッグします。</target>
        </trans-unit>
        <trans-unit id="063fb16cacadfcb9c4dc809939cc50f59afc0c93" translate="yes" xml:space="preserve">
          <source>decrease(&lt;em&gt;function&lt;/em&gt;)</source>
          <target state="translated">decrease(&lt;em&gt;function&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="3dde59ff3d79fc2322f4192f74c1d1af30d32cc6" translate="yes" xml:space="preserve">
          <source>deep</source>
          <target state="translated">deep</target>
        </trans-unit>
        <trans-unit id="eb4920343ea1c66e4a9defdf4af28c1bcae50422" translate="yes" xml:space="preserve">
          <source>deep.equal(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="translated">deep.equal(&lt;em&gt;value&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="675d0449a2b69d2d935a670fe489be70b3605d64" translate="yes" xml:space="preserve">
          <source>deep.property(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="translated">deep.property（&lt;em&gt;name&lt;/em&gt;、&lt;em&gt;[value]&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="9f052d2961e279ecbb0d216ac35a1c81b27704a6" translate="yes" xml:space="preserve">
          <source>delay for stubbed responses (in ms)</source>
          <target state="translated">スタブ応答の遅延(ミリ秒</target>
        </trans-unit>
        <trans-unit id="f68c5fd2a39efd39a72859fa78f1b239afb45dd1" translate="yes" xml:space="preserve">
          <source>descendants(&lt;em&gt;selector&lt;/em&gt;)</source>
          <target state="translated">descendants(&lt;em&gt;selector&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="347e87f4eb15f7a1cf67b173bbf89c510f1ec646" translate="yes" xml:space="preserve">
          <source>devicePixelRatio</source>
          <target state="translated">devicePixelRatio</target>
        </trans-unit>
        <trans-unit id="15a0529617580a22ed5df3adde566560d7afda75" translate="yes" xml:space="preserve">
          <source>directory of the Cypress installation. Note that the &lt;code&gt;file://&lt;/code&gt; prefix is not needed.</source>
          <target state="translated">サイプレスインストールのディレクトリ。 &lt;code&gt;file://&lt;/code&gt; プレフィックスは必要ないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="54801bd6cc72e42cd61e5b83dde57afc4779700f" translate="yes" xml:space="preserve">
          <source>disable security features which make automation difficult</source>
          <target state="translated">自動化を困難にするセキュリティ機能を無効にする</target>
        </trans-unit>
        <trans-unit id="07596f183f5e91b1778d5e47b2752b8d42aa763d" translate="yes" xml:space="preserve">
          <source>disabled</source>
          <target state="translated">disabled</target>
        </trans-unit>
        <trans-unit id="4f8278c89ad16da05fec4fdfc61fe44798b92720" translate="yes" xml:space="preserve">
          <source>document</source>
          <target state="translated">document</target>
        </trans-unit>
        <trans-unit id="ed84ac37eef3a02a183f9cef17a5225be1a23097" translate="yes" xml:space="preserve">
          <source>does not have method set to &lt;code&gt;GET&lt;/code&gt; by default, but intercepts &lt;code&gt;*&lt;/code&gt; methods.</source>
          <target state="translated">デフォルトではメソッドが &lt;code&gt;GET&lt;/code&gt; に設定されていませんが、 &lt;code&gt;*&lt;/code&gt; メソッドをインターセプトします。</target>
        </trans-unit>
        <trans-unit id="37b423c20fbf8032787f38114664ff146221ca03" translate="yes" xml:space="preserve">
          <source>does not require calling &lt;a href=&quot;server&quot;&gt;&lt;code&gt;cy.server()&lt;/code&gt;&lt;/a&gt; before use - in fact, &lt;code&gt;cy.server()&lt;/code&gt; does not influence &lt;code&gt;cy.intercept()&lt;/code&gt; at all.</source>
          <target state="translated">呼び出す必要はありません&lt;a href=&quot;server&quot;&gt; &lt;code&gt;cy.server()&lt;/code&gt; &lt;/a&gt;使用前に-実際には、 &lt;code&gt;cy.server()&lt;/code&gt; に影響しない &lt;code&gt;cy.intercept()&lt;/code&gt; すべてで。</target>
        </trans-unit>
        <trans-unit id="be65d27ae088a0e03fd8e1331d90b01649464cb6" translate="yes" xml:space="preserve">
          <source>dom</source>
          <target state="translated">dom</target>
        </trans-unit>
        <trans-unit id="b32f279e548b6fceef4343170778273bfe60658c" translate="yes" xml:space="preserve">
          <source>each</source>
          <target state="translated">each</target>
        </trans-unit>
        <trans-unit id="ad87109bfff0765f4dd8cf4943b04d16a4070fea" translate="yes" xml:space="preserve">
          <source>empty</source>
          <target state="translated">empty</target>
        </trans-unit>
        <trans-unit id="3ea3f9802accf8817bacd6f3df46a73b93ccddec" translate="yes" xml:space="preserve">
          <source>enabled</source>
          <target state="translated">enabled</target>
        </trans-unit>
        <trans-unit id="7a92f3d26362d6557d5701de77a63a01df61e57f" translate="yes" xml:space="preserve">
          <source>end</source>
          <target state="translated">end</target>
        </trans-unit>
        <trans-unit id="b3cc629e4d698b44bdcda8141ce2e359d32074d0" translate="yes" xml:space="preserve">
          <source>ensure your application makes the intended requests</source>
          <target state="translated">アプリケーションが意図した要求を確実に行うようにする</target>
        </trans-unit>
        <trans-unit id="920f8f5815b381ea692e9e7c2f7119f2b1aa620a" translate="yes" xml:space="preserve">
          <source>env</source>
          <target state="translated">env</target>
        </trans-unit>
        <trans-unit id="a9c619705e8fcaa770885cac1837ae950f5c8ba5" translate="yes" xml:space="preserve">
          <source>eq</source>
          <target state="translated">eq</target>
        </trans-unit>
        <trans-unit id="c4bb11aba08fee403b5b6e8c70b0c676abe9fceb" translate="yes" xml:space="preserve">
          <source>eql(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="translated">eql(&lt;em&gt;value&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="55aca476c17f9ad4227acb37e58a18c60051e8a7" translate="yes" xml:space="preserve">
          <source>equal(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="translated">equal(&lt;em&gt;value&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="be62562725d30894d1641b11d5106adde66f0d79" translate="yes" xml:space="preserve">
          <source>exec</source>
          <target state="translated">exec</target>
        </trans-unit>
        <trans-unit id="7e89f2472eea0797f15896f1658417395dcaae35" translate="yes" xml:space="preserve">
          <source>exist</source>
          <target state="translated">exist</target>
        </trans-unit>
        <trans-unit id="2216470a6aacb2edec4887e9eadec834847afc5d" translate="yes" xml:space="preserve">
          <source>experimental</source>
          <target state="translated">experimental</target>
        </trans-unit>
        <trans-unit id="574e201cacc05cf40293d931076f150895bb0f5b" translate="yes" xml:space="preserve">
          <source>expose test environment specific routes</source>
          <target state="translated">テスト環境固有のルートを公開</target>
        </trans-unit>
        <trans-unit id="7cb6efb98ba5972a9b5090dc2e517fe14d12cb04" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="translated">false</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="ded8dae5786fb0e9e6ffb657401fd861ba2efe11" translate="yes" xml:space="preserve">
          <source>find</source>
          <target state="translated">find</target>
        </trans-unit>
        <trans-unit id="e0996a37c13d44c3b06074939d43fa3759bd32c1" translate="yes" xml:space="preserve">
          <source>first</source>
          <target state="translated">first</target>
        </trans-unit>
        <trans-unit id="51cff3c1f0bc59f6187e7040cc12a4e9b1eca7aa" translate="yes" xml:space="preserve">
          <source>fixture</source>
          <target state="translated">fixture</target>
        </trans-unit>
        <trans-unit id="78918dcaf22c0486024b08caed8fe0c57e583a47" translate="yes" xml:space="preserve">
          <source>focus</source>
          <target state="translated">focus</target>
        </trans-unit>
        <trans-unit id="22a08123ec4acc58198c375920cf32a5165558f0" translate="yes" xml:space="preserve">
          <source>focus[ed]</source>
          <target state="translated">focus[ed]</target>
        </trans-unit>
        <trans-unit id="f31b0b227337866ce82630c2d10406cfadf78bd2" translate="yes" xml:space="preserve">
          <source>focused</source>
          <target state="translated">focused</target>
        </trans-unit>
        <trans-unit id="9fe9c75603ec13a2e5d8954b050b7221126502f7" translate="yes" xml:space="preserve">
          <source>forcibly send XHR&amp;rsquo;s a 404 status when the XHR&amp;rsquo;s do not match any existing route</source>
          <target state="translated">XHRが既存のルートと一致しない場合、XHRに404ステータスを強制的に送信します</target>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="783923e57ba5e8f1044632c31fd806ee24814bb5" translate="yes" xml:space="preserve">
          <source>get</source>
          <target state="translated">get</target>
        </trans-unit>
        <trans-unit id="25916f93770a9adca80f2a550d3a2506981beb73" translate="yes" xml:space="preserve">
          <source>getCookie</source>
          <target state="translated">getCookie</target>
        </trans-unit>
        <trans-unit id="3f737990e01640a4bfaf7751e7e2e8502e1e44b6" translate="yes" xml:space="preserve">
          <source>getCookies</source>
          <target state="translated">getCookies</target>
        </trans-unit>
        <trans-unit id="1ec558a60b5dda24597816c924776716018caf8b" translate="yes" xml:space="preserve">
          <source>go</source>
          <target state="translated">go</target>
        </trans-unit>
        <trans-unit id="2512c87e86c8d2149c928014edbde56f2dbeddd4" translate="yes" xml:space="preserve">
          <source>greaterThan(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="translated">greaterThan(&lt;em&gt;value&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="2346ad27d7568ba9896f1b7da6b5991251debdf2" translate="yes" xml:space="preserve">
          <source>hash</source>
          <target state="translated">hash</target>
        </trans-unit>
        <trans-unit id="6f253d28517c39eeddcaddf0e859d5344e6ba1f6" translate="yes" xml:space="preserve">
          <source>have fun 🎉</source>
          <target state="translated">楽しもうね〜🎉</target>
        </trans-unit>
        <trans-unit id="73e7e545c519a38f0aec9e72df51f8ba169db34d" translate="yes" xml:space="preserve">
          <source>height</source>
          <target state="translated">height</target>
        </trans-unit>
        <trans-unit id="99d72c7fc3e2e145870beab37c0b70e343ea9c3b" translate="yes" xml:space="preserve">
          <source>hidden</source>
          <target state="translated">hidden</target>
        </trans-unit>
        <trans-unit id="fbc5881426baf05f182f0473d6ccddce906092b3" translate="yes" xml:space="preserve">
          <source>hover</source>
          <target state="translated">hover</target>
        </trans-unit>
        <trans-unit id="ed6eefc9117167b11ea3eef312ee00e95dbf0401" translate="yes" xml:space="preserve">
          <source>how to handle the previously yielded subject.</source>
          <target state="translated">前に生成されたサブジェクトをどのように処理するかを指定します。</target>
        </trans-unit>
        <trans-unit id="de05b2acf571749867adfc7859af04e0fe3a3832" translate="yes" xml:space="preserve">
          <source>html(&lt;em&gt;html&lt;/em&gt;)</source>
          <target state="translated">html(&lt;em&gt;html&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="22ef5f356758d1da2a25fd6ecdea04e9729d7064" translate="yes" xml:space="preserve">
          <source>id(&lt;em&gt;id&lt;/em&gt;)</source>
          <target state="translated">id(&lt;em&gt;id&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="5c8b0b054141dd70e74e20b5bd85bcfc0370ed34" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;force404&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; (the default) then the request will &lt;a href=&quot;https://docs.cypress.io/guides/guides/network-requests.html#Use-Server-Responses&quot;&gt;pass through to the server&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;force404&lt;/code&gt; がある &lt;code&gt;false&lt;/code&gt; （デフォルト）その要求はされます&lt;a href=&quot;https://docs.cypress.io/guides/guides/network-requests.html#Use-Server-Responses&quot;&gt;、サーバーへ通過します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f48cf9040508b376a38fd4e1da36c2391fc15d85" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;force404&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; (the default) then the request will pass through to the server.</source>
          <target state="translated">場合 &lt;code&gt;force404&lt;/code&gt; がある &lt;code&gt;false&lt;/code&gt; （デフォルト）その後、要求がサーバに通過します。</target>
        </trans-unit>
        <trans-unit id="7024006187e928719cb37c7d130f1610c9d90ec4" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;force404&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; then the response &lt;a href=&quot;#Notes&quot;&gt;will be a 404&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;force404&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; その後、応答は&lt;a href=&quot;#Notes&quot;&gt;404になります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9372562f5c6170252c10dae576fe6b3a730b465e" translate="yes" xml:space="preserve">
          <source>iframe support is somewhat limited, but does work.</source>
          <target state="translated">iframeのサポートは多少制限されていますが、動作します。</target>
        </trans-unit>
        <trans-unit id="2c2cc60639e7f1f86a79ae2d680888a3c6165cf8" translate="yes" xml:space="preserve">
          <source>iframes</source>
          <target state="translated">iframes</target>
        </trans-unit>
        <trans-unit id="aa24f8620a4ea4a9a706c3e2f71d472ad598deb2" translate="yes" xml:space="preserve">
          <source>iframes not supported</source>
          <target state="translated">iframe非対応</target>
        </trans-unit>
        <trans-unit id="4b16d9529970c712c5689a714de1ff11d8864b06" translate="yes" xml:space="preserve">
          <source>include(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="translated">include(&lt;em&gt;value&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="124a2dbe6af6ffcea9bc590ab2cb89a42e2887e6" translate="yes" xml:space="preserve">
          <source>increase(&lt;em&gt;function&lt;/em&gt;)</source>
          <target state="translated">increase(&lt;em&gt;function&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="d07f9596b3412dd86da84c01076709c60b811a26" translate="yes" xml:space="preserve">
          <source>instanceOf(&lt;em&gt;constructor&lt;/em&gt;)</source>
          <target state="translated">instanceOf(&lt;em&gt;constructor&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="c1feeaa7daab93ac02212ffb2207aa531e0d8298" translate="yes" xml:space="preserve">
          <source>intercept</source>
          <target state="translated">intercept</target>
        </trans-unit>
        <trans-unit id="219fe784363be17d9be76ae1902ddc1b1ca83bc0" translate="yes" xml:space="preserve">
          <source>intercepting static resources like HTML and CSS</source>
          <target state="translated">HTMLやCSSのような静的なリソースを傍受する</target>
        </trans-unit>
        <trans-unit id="e91dd3f61d88900e0d4734f29d0025d93acf6c9c" translate="yes" xml:space="preserve">
          <source>investigate a hard to recreate bug that happens on your machine</source>
          <target state="translated">再現しにくいバグを調べる</target>
        </trans-unit>
        <trans-unit id="d6aa1f3a789f3f3108666e0ac807ca5ca7dc5fa5" translate="yes" xml:space="preserve">
          <source>invoke</source>
          <target state="translated">invoke</target>
        </trans-unit>
        <trans-unit id="a3db8735259305cd9cc3c59545f413fb2e632e48" translate="yes" xml:space="preserve">
          <source>isBrowser</source>
          <target state="translated">isBrowser</target>
        </trans-unit>
        <trans-unit id="b5b2414610a40b9710e94dc7f29ac7d1c49797dc" translate="yes" xml:space="preserve">
          <source>isCy</source>
          <target state="translated">isCy</target>
        </trans-unit>
        <trans-unit id="f803b26388365e33184d5cc145d868e1b8df74d5" translate="yes" xml:space="preserve">
          <source>its</source>
          <target state="translated">its</target>
        </trans-unit>
        <trans-unit id="818533aa876aa97624377a7b0b2d3de3acc2813b" translate="yes" xml:space="preserve">
          <source>itself</source>
          <target state="translated">itself</target>
        </trans-unit>
        <trans-unit id="abae7f8db280b8aa28837a39d7381885293293c5" translate="yes" xml:space="preserve">
          <source>jQuery UI Sortable</source>
          <target state="translated">jQuery UI ソータブル</target>
        </trans-unit>
        <trans-unit id="f29eaba1fd5cf1e3a3cac10143a85ed26eb263ae" translate="yes" xml:space="preserve">
          <source>key(&lt;em&gt;key1&lt;/em&gt;, &lt;em&gt;[key2]&lt;/em&gt;, &lt;em&gt;[&amp;hellip;]&lt;/em&gt;)</source>
          <target state="translated">キー（&lt;em&gt;KEY1&lt;/em&gt;、&lt;em&gt;[KEY2] &lt;/em&gt;、&lt;em&gt;[...] &lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="213ed3ea453bf610688ff8041e0a3b7b6abb5e6e" translate="yes" xml:space="preserve">
          <source>last</source>
          <target state="translated">last</target>
        </trans-unit>
        <trans-unit id="819b36585104117945379443c549fcfd726fa3db" translate="yes" xml:space="preserve">
          <source>least(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="translated">least(&lt;em&gt;value&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="71348d2c5502d8feb739019a8da2ee87089701ec" translate="yes" xml:space="preserve">
          <source>lengthOf(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="translated">lengthOf(&lt;em&gt;value&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="b4ee649ff826630507272f1e65795a0eea2bdfa5" translate="yes" xml:space="preserve">
          <source>lessThan(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="translated">lessThan(&lt;em&gt;value&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="6469ac84a89748bb67b923c833ed0c778a17aea3" translate="yes" xml:space="preserve">
          <source>location</source>
          <target state="translated">location</target>
        </trans-unit>
        <trans-unit id="7babc233de26ab19ead1b9c278128d5c434910ee" translate="yes" xml:space="preserve">
          <source>log</source>
          <target state="translated">log</target>
        </trans-unit>
        <trans-unit id="1468dbd21338ee723d7d1cdef002be18b95d4174" translate="yes" xml:space="preserve">
          <source>log attributes &lt;strong&gt;(Object)&lt;/strong&gt;, whether Cypress is in interactive mode (running via &lt;code&gt;cypress open&lt;/code&gt;) &lt;strong&gt;(Boolean)&lt;/strong&gt;</source>
          <target state="translated">ログ属性&lt;strong&gt;（オブジェクト）&lt;/strong&gt;、サイプレスがインタラクティブモードであるかどうか（サイプレス &lt;code&gt;cypress open&lt;/code&gt; を介して実行）&lt;strong&gt;（ブール値）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8b6210fdf0c430ea0b8190f4d612bd5f9b6572fd" translate="yes" xml:space="preserve">
          <source>log attributes &lt;strong&gt;(Object)&lt;/strong&gt;, whether Cypress is in interactive mode &lt;strong&gt;(Boolean)&lt;/strong&gt;</source>
          <target state="translated">ログ属性&lt;strong&gt;（オブジェクト）&lt;/strong&gt;、サイプレスがインタラクティブモードかどうか&lt;strong&gt;（ブール）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2551489fd8863a1c560d5e3bcf12554ac6aedda1" translate="yes" xml:space="preserve">
          <source>macOS 64-bit (&lt;code&gt;?platform=darwin&lt;/code&gt;)</source>
          <target state="translated">macOS 64ビット（ &lt;code&gt;?platform=darwin&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="eb7512f40389e82af1175ece379ad5d9fb730cc5" translate="yes" xml:space="preserve">
          <source>match(&lt;em&gt;RegExp&lt;/em&gt;)</source>
          <target state="translated">match(&lt;em&gt;RegExp&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="a6ffa4bbf81cf529ad22070fa1a3ef7446df2a98" translate="yes" xml:space="preserve">
          <source>match(&lt;em&gt;selector&lt;/em&gt;)</source>
          <target state="translated">match(&lt;em&gt;selector&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="60391f39d630b5f6ba563ff38dff66a0856b9a96" translate="yes" xml:space="preserve">
          <source>members(&lt;em&gt;set&lt;/em&gt;)</source>
          <target state="translated">members(&lt;em&gt;set&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="18c91d281601ae2c8ca6d690cc897da2f7e4b879" translate="yes" xml:space="preserve">
          <source>method to match against requests</source>
          <target state="translated">メソッド</target>
        </trans-unit>
        <trans-unit id="6910f776c1354a72fa6ebba0dae7dddf003ef15f" translate="yes" xml:space="preserve">
          <source>minimatch</source>
          <target state="translated">minimatch</target>
        </trans-unit>
        <trans-unit id="f29b9dbc5ec4ad55fee89bb88f5c93caa4ae6627" translate="yes" xml:space="preserve">
          <source>mochawesome-merge</source>
          <target state="translated">mochawesome-merge</target>
        </trans-unit>
        <trans-unit id="82c38b283b487783c7e2f6ac75f2adad30ff119e" translate="yes" xml:space="preserve">
          <source>modifyObstructiveCode</source>
          <target state="translated">modifyObstructiveCode</target>
        </trans-unit>
        <trans-unit id="b56def36afbfb8cd1bc7a898851fea4c97586530" translate="yes" xml:space="preserve">
          <source>moment</source>
          <target state="translated">moment</target>
        </trans-unit>
        <trans-unit id="20c92931615bb1c97ca104a95cc67ef2a19289d2" translate="yes" xml:space="preserve">
          <source>most(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="translated">most(&lt;em&gt;value&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="b4b3e0a278988bc15f2913af3f4153ccef74e465" translate="yes" xml:space="preserve">
          <source>nested</source>
          <target state="translated">nested</target>
        </trans-unit>
        <trans-unit id="edee9402d198b04ac77dcf5dc9cc3dac44573782" translate="yes" xml:space="preserve">
          <source>next</source>
          <target state="translated">next</target>
        </trans-unit>
        <trans-unit id="ccefaadfdffe563d2631c2f2ffa3f15d87750642" translate="yes" xml:space="preserve">
          <source>nextAll</source>
          <target state="translated">nextAll</target>
        </trans-unit>
        <trans-unit id="858408d5395601b5789c0f3e439c636d1494f131" translate="yes" xml:space="preserve">
          <source>nextUntil</source>
          <target state="translated">nextUntil</target>
        </trans-unit>
        <trans-unit id="557f255516719ea16f8f4a0aae1166054e2c9b43" translate="yes" xml:space="preserve">
          <source>not</source>
          <target state="translated">not</target>
        </trans-unit>
        <trans-unit id="f69703c6bdd2314a2d363a52ea9636026e9740ca" translate="yes" xml:space="preserve">
          <source>npm Reporters</source>
          <target state="translated">npm レポーター</target>
        </trans-unit>
        <trans-unit id="e88132417b2efe72cde53346062aab21879b2e4c" translate="yes" xml:space="preserve">
          <source>npm install any existing &lt;code&gt;chai&lt;/code&gt; library and import into your test file or support file.</source>
          <target state="translated">npmは既存の &lt;code&gt;chai&lt;/code&gt; ライブラリをインストールし、テストファイルまたはサポートファイルにインポートします。</target>
        </trans-unit>
        <trans-unit id="6ca1f4a98324d13add10f76a43a5f6e6da77ace6" translate="yes" xml:space="preserve">
          <source>npm modules</source>
          <target state="translated">npmモジュール</target>
        </trans-unit>
        <trans-unit id="bd5193910094354dc6348f9386b03957f20021a3" translate="yes" xml:space="preserve">
          <source>npm-cy</source>
          <target state="translated">npm-cy</target>
        </trans-unit>
        <trans-unit id="2be88ca4242c76e8253ac62474851065032d6833" translate="yes" xml:space="preserve">
          <source>null</source>
          <target state="translated">null</target>
        </trans-unit>
        <trans-unit id="5adeac62dbc1427c247cbaec06f0c19059f8d037" translate="yes" xml:space="preserve">
          <source>official</source>
          <target state="translated">official</target>
        </trans-unit>
        <trans-unit id="7a85f4764bbd6daf1c3545efbbf0f279a6dc0beb" translate="yes" xml:space="preserve">
          <source>ok</source>
          <target state="translated">ok</target>
        </trans-unit>
        <trans-unit id="db3d405b10675998c030223177d42e71b4e7a312" translate="yes" xml:space="preserve">
          <source>on</source>
          <target state="translated">on</target>
        </trans-unit>
        <trans-unit id="0d347175df0ad682d14a19c9415db17583bd86ec" translate="yes" xml:space="preserve">
          <source>onElement Callback</source>
          <target state="translated">オンエレメントコールバック</target>
        </trans-unit>
        <trans-unit id="1863835675e3970e15e5c22411ef60824eb55591" translate="yes" xml:space="preserve">
          <source>once</source>
          <target state="translated">once</target>
        </trans-unit>
        <trans-unit id="c2a9cf9df3ddd64236a68589104819c6fdc0a2a5" translate="yes" xml:space="preserve">
          <source>oneOf(&lt;em&gt;values&lt;/em&gt;)</source>
          <target state="translated">oneOf(&lt;em&gt;values&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="2f6d3eca5a849f14e9764ff9a4a76e9f53e690a8" translate="yes" xml:space="preserve">
          <source>ordered</source>
          <target state="translated">ordered</target>
        </trans-unit>
        <trans-unit id="52a0610f0ce006d52ca0dc8952a611d8567935b8" translate="yes" xml:space="preserve">
          <source>ownProperty(&lt;em&gt;name&lt;/em&gt;)</source>
          <target state="translated">ownProperty(&lt;em&gt;name&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="4c3a24c2670e2ac9f412ee2f74f9864924ff1f5b" translate="yes" xml:space="preserve">
          <source>ownPropertyDescriptor(&lt;em&gt;name&lt;/em&gt;)</source>
          <target state="translated">ownPropertyDescriptor(&lt;em&gt;name&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="d8fd39d0bbdd2dcf322d8b11390a4c5825b11495" translate="yes" xml:space="preserve">
          <source>parent</source>
          <target state="translated">parent</target>
        </trans-unit>
        <trans-unit id="a664f10b5e580cdde0ca6f4ae01ccf741592737a" translate="yes" xml:space="preserve">
          <source>parents</source>
          <target state="translated">parents</target>
        </trans-unit>
        <trans-unit id="60dda22734c279778cf61057ba7b044370b7d49e" translate="yes" xml:space="preserve">
          <source>parentsUntil</source>
          <target state="translated">parentsUntil</target>
        </trans-unit>
        <trans-unit id="de12302a32f350df35b22c9171d543c4f480e5d7" translate="yes" xml:space="preserve">
          <source>pass &lt;code&gt;false&lt;/code&gt; to disable existing route stubs</source>
          <target state="translated">既存のルートスタブを無効にするには &lt;code&gt;false&lt;/code&gt; を渡します</target>
        </trans-unit>
        <trans-unit id="ef8d29955a725c39916a4626f3921a0104242439" translate="yes" xml:space="preserve">
          <source>pause</source>
          <target state="translated">pause</target>
        </trans-unit>
        <trans-unit id="3c72abbe626f27d174d80fc434b851cce7bde6d3" translate="yes" xml:space="preserve">
          <source>platform</source>
          <target state="translated">platform</target>
        </trans-unit>
        <trans-unit id="8d106d8420cfb95790cc8f657069bb679627be1a" translate="yes" xml:space="preserve">
          <source>pointer-events: none</source>
          <target state="translated">ポインタイベント:なし</target>
        </trans-unit>
        <trans-unit id="859d455b8ebd64a26ac0b5eb7278e93d30fb10ac" translate="yes" xml:space="preserve">
          <source>prev</source>
          <target state="translated">prev</target>
        </trans-unit>
        <trans-unit id="8a63c34bb17fd9d2f073e1fd9bdb46b752f749ed" translate="yes" xml:space="preserve">
          <source>prevAll</source>
          <target state="translated">prevAll</target>
        </trans-unit>
        <trans-unit id="8bcb944c7fd3ac61d0f8b9924a0f24f5bae349c8" translate="yes" xml:space="preserve">
          <source>prevUntil</source>
          <target state="translated">prevUntil</target>
        </trans-unit>
        <trans-unit id="317c3d1c259ddcd847d3847428c39baca6ba4cee" translate="yes" xml:space="preserve">
          <source>prop(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="translated">prop（&lt;em&gt;名前&lt;/em&gt;、&lt;em&gt;[値]&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="85bb3e80a17f26053a332bb011eb74a411cc0d72" translate="yes" xml:space="preserve">
          <source>property(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="translated">プロパティ（&lt;em&gt;名前&lt;/em&gt;、&lt;em&gt;[値]&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="8587ad3e265d7e1d3a5afbfe8390621c10a7ca41" translate="yes" xml:space="preserve">
          <source>provides the &lt;a href=&quot;../../api/commands/clock&quot;&gt;&lt;code&gt;cy.clock()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/tick&quot;&gt;&lt;code&gt;cy.tick()&lt;/code&gt;&lt;/a&gt; APIs</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/clock&quot;&gt; &lt;code&gt;cy.clock()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../api/commands/tick&quot;&gt; &lt;code&gt;cy.tick()&lt;/code&gt; &lt;/a&gt; APIを提供します</target>
        </trans-unit>
        <trans-unit id="33b1fe83ee7fe7f82a4005bbd20d4f1c3a71ac57" translate="yes" xml:space="preserve">
          <source>provides the &lt;a href=&quot;../../api/commands/stub&quot;&gt;&lt;code&gt;cy.stub()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/spy&quot;&gt;&lt;code&gt;cy.spy()&lt;/code&gt;&lt;/a&gt; APIs</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/stub&quot;&gt; &lt;code&gt;cy.stub()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../api/commands/spy&quot;&gt; &lt;code&gt;cy.spy()&lt;/code&gt; &lt;/a&gt; APIを提供します</target>
        </trans-unit>
        <trans-unit id="73f5092ce31a05a69ed5ae13a01b963808776923" translate="yes" xml:space="preserve">
          <source>readFile</source>
          <target state="translated">readFile</target>
        </trans-unit>
        <trans-unit id="c17f720c0ef1a72e1a7ffed26d862ac21931e191" translate="yes" xml:space="preserve">
          <source>redirecting requests</source>
          <target state="translated">リダイレクトリクエスト</target>
        </trans-unit>
        <trans-unit id="d6e6e576541fa2152f6fc490b0e99e20c953988c" translate="yes" xml:space="preserve">
          <source>reload</source>
          <target state="translated">reload</target>
        </trans-unit>
        <trans-unit id="79483eca122d60e1838cf3ac2b022339d03c5730" translate="yes" xml:space="preserve">
          <source>removeAllListeners</source>
          <target state="translated">removeAllListeners</target>
        </trans-unit>
        <trans-unit id="f416665d1452ee063f5059487b8216ddb9f19c18" translate="yes" xml:space="preserve">
          <source>removeListener</source>
          <target state="translated">removeListener</target>
        </trans-unit>
        <trans-unit id="d610a96184d5dabaf9c7d58ffffb009dec67ef6a" translate="yes" xml:space="preserve">
          <source>removed use &lt;code&gt;CYPRESS_INSTALL_BINARY&lt;/code&gt; instead</source>
          <target state="translated">削除された代わりに &lt;code&gt;CYPRESS_INSTALL_BINARY&lt;/code&gt; を使用</target>
        </trans-unit>
        <trans-unit id="ee35826eaec59bd6a00cbd0a6deae8005ee4aa3a" translate="yes" xml:space="preserve">
          <source>removed use &lt;code&gt;CYPRESS_INSTALL_BINARY=0&lt;/code&gt; instead</source>
          <target state="translated">代わりに &lt;code&gt;CYPRESS_INSTALL_BINARY=0&lt;/code&gt; を使用して削除</target>
        </trans-unit>
        <trans-unit id="8eff98011d67112d81babff24b5370092a8420d7" translate="yes" xml:space="preserve">
          <source>replying with different responses</source>
          <target state="translated">へんとう</target>
        </trans-unit>
        <trans-unit id="088e29b0ab0079560dea5d3e5aeb2f7868af661e" translate="yes" xml:space="preserve">
          <source>request</source>
          <target state="translated">request</target>
        </trans-unit>
        <trans-unit id="3d53f87c2daa326af1f125b4e434eca12334ef51" translate="yes" xml:space="preserve">
          <source>reset state on the server / database</source>
          <target state="translated">サーバ/データベースの状態をリセットする</target>
        </trans-unit>
        <trans-unit id="ac22e8589d72998694fef2fef102afc3ca713a9d" translate="yes" xml:space="preserve">
          <source>respondTo(&lt;em&gt;method&lt;/em&gt;)</source>
          <target state="translated">respondTo(&lt;em&gt;method&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="bd868b3c6b50a1364e484d22796ee7ae0e745d79" translate="yes" xml:space="preserve">
          <source>response body when stubbing routes</source>
          <target state="translated">スタブルート時の応答体</target>
        </trans-unit>
        <trans-unit id="ca7028420ee695416651cbd050845ac15baa9709" translate="yes" xml:space="preserve">
          <source>response headers for stubbed routes</source>
          <target state="translated">スタブルート用応答ヘッダ</target>
        </trans-unit>
        <trans-unit id="3d3bf64c2a67016f72e3173b25cd7c014f035d20" translate="yes" xml:space="preserve">
          <source>response status code when stubbing routes</source>
          <target state="translated">ルートスタブ時の応答状態コード</target>
        </trans-unit>
        <trans-unit id="5c4aa1c82a8f2be6c16b6a4277d6b582af9f4155" translate="yes" xml:space="preserve">
          <source>retry options &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="translated">再試行オプション&lt;strong&gt;（オブジェクト）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1302aeee7db4b8b7ffcf91019d299aeb21bf6f39" translate="yes" xml:space="preserve">
          <source>returned</source>
          <target state="translated">returned</target>
        </trans-unit>
        <trans-unit id="fd699f8583e894be69a50ca130d88c4d3743b12f" translate="yes" xml:space="preserve">
          <source>rightclick</source>
          <target state="translated">rightclick</target>
        </trans-unit>
        <trans-unit id="dc76e9f0c0006e8f919e0c515c66dbba3982f785" translate="yes" xml:space="preserve">
          <source>root</source>
          <target state="translated">root</target>
        </trans-unit>
        <trans-unit id="f8b77721db3865cbcd3c48d991841eaed614b7a8" translate="yes" xml:space="preserve">
          <source>root project folder</source>
          <target state="translated">ルートプロジェクトフォルダ</target>
        </trans-unit>
        <trans-unit id="fc166eb81361ff31179cd3c83da3bfe088b851d3" translate="yes" xml:space="preserve">
          <source>route</source>
          <target state="translated">route</target>
        </trans-unit>
        <trans-unit id="82b29037ce7b2128c0faf8d9f67991fb1bc046dc" translate="yes" xml:space="preserve">
          <source>satisfy(&lt;em&gt;method&lt;/em&gt;)</source>
          <target state="translated">satisfy(&lt;em&gt;method&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="754d2e97bafe87cf79fea733afb2a09bab2db7e3" translate="yes" xml:space="preserve">
          <source>screenshot</source>
          <target state="translated">screenshot</target>
        </trans-unit>
        <trans-unit id="6cfdfea766b814d7c797c9ea0414d3c25f6588b1" translate="yes" xml:space="preserve">
          <source>scrollIntoView</source>
          <target state="translated">scrollIntoView</target>
        </trans-unit>
        <trans-unit id="6700c5597be1171483c418c50fa4958c4319dd58" translate="yes" xml:space="preserve">
          <source>scrollTo</source>
          <target state="translated">scrollTo</target>
        </trans-unit>
        <trans-unit id="812af7ed814ed75970f983084a5bcaa2229cb3cf" translate="yes" xml:space="preserve">
          <source>seed data by running executable scripts</source>
          <target state="translated">実行可能なスクリプトの実行によるシードデータ</target>
        </trans-unit>
        <trans-unit id="81448fe273247b533b9f018e96c158cab7901247" translate="yes" xml:space="preserve">
          <source>select</source>
          <target state="translated">select</target>
        </trans-unit>
        <trans-unit id="835f3b50e33719422d6faca2d01d99417afea46b" translate="yes" xml:space="preserve">
          <source>selected</source>
          <target state="translated">selected</target>
        </trans-unit>
        <trans-unit id="3de4f901fffb30ac720b0e7eb654b4faa2dd03fa" translate="yes" xml:space="preserve">
          <source>server</source>
          <target state="translated">server</target>
        </trans-unit>
        <trans-unit id="c968f343d5ebd7d780a39ed08758be8fb80798dc" translate="yes" xml:space="preserve">
          <source>setCookie</source>
          <target state="translated">setCookie</target>
        </trans-unit>
        <trans-unit id="ed9d3d832af899035363a69fd53cd3be8f71501c" translate="yes" xml:space="preserve">
          <source>shadow</source>
          <target state="translated">shadow</target>
        </trans-unit>
        <trans-unit id="dd3035979b0589f90c1bcf53e00ddf8b4fb00f9f" translate="yes" xml:space="preserve">
          <source>shippable.yml</source>
          <target state="translated">shippable.yml</target>
        </trans-unit>
        <trans-unit id="c6dc9bc9f77b486a13b3f63ffb2ffd1cb3fef4db" translate="yes" xml:space="preserve">
          <source>should</source>
          <target state="translated">should</target>
        </trans-unit>
        <trans-unit id="e2910176a052e9880e3e654752f38352524c9172" translate="yes" xml:space="preserve">
          <source>siblings</source>
          <target state="translated">siblings</target>
        </trans-unit>
        <trans-unit id="39abfeda7b05ceff9704d48f58d0c4bca275e49e" translate="yes" xml:space="preserve">
          <source>sinon</source>
          <target state="translated">sinon</target>
        </trans-unit>
        <trans-unit id="078772725d009dfa127dbc9e3ac5682a60a9b371" translate="yes" xml:space="preserve">
          <source>spec</source>
          <target state="translated">spec</target>
        </trans-unit>
        <trans-unit id="ea118158db41224345b3de5e4f831e9c23fde1d2" translate="yes" xml:space="preserve">
          <source>spread</source>
          <target state="translated">spread</target>
        </trans-unit>
        <trans-unit id="3e6a717447654c7d91d56e5c836522fff758fc0e" translate="yes" xml:space="preserve">
          <source>spy</source>
          <target state="translated">spy</target>
        </trans-unit>
        <trans-unit id="132d9c65e05d7037939023336d4d0b68380293a9" translate="yes" xml:space="preserve">
          <source>spying on requests</source>
          <target state="translated">依頼盗聴</target>
        </trans-unit>
        <trans-unit id="ac9c073603dd424cdf4f2933aa7f0515c6c7c8d9" translate="yes" xml:space="preserve">
          <source>string(&lt;em&gt;string&lt;/em&gt;)</source>
          <target state="translated">string(&lt;em&gt;string&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="58801e3391955d7ee7d51ba293351c3176f5b682" translate="yes" xml:space="preserve">
          <source>stub</source>
          <target state="translated">stub</target>
        </trans-unit>
        <trans-unit id="3671414ea29206fcb09ebe28ad6f89bc8de5f739" translate="yes" xml:space="preserve">
          <source>stub or spy on any type of HTTP request.</source>
          <target state="translated">あらゆるタイプの HTTP リクエストをスタブまたはスパイします。</target>
        </trans-unit>
        <trans-unit id="6747f1ac3a0d9cc3bddbc0d1299039f9b3b7b24a" translate="yes" xml:space="preserve">
          <source>stub the response to an HTTP request, either dynamically or statically.</source>
          <target state="translated">スタブは、HTTP リクエストに対するレスポンスを動的または静的に指定します。</target>
        </trans-unit>
        <trans-unit id="5e7fd1e210a6d0376b2ea291ca41b6c6e4eb2f37" translate="yes" xml:space="preserve">
          <source>stubbing any request</source>
          <target state="translated">おねがいごと</target>
        </trans-unit>
        <trans-unit id="3fa4054f214f0f8063d8fb4453be65d460e3e30c" translate="yes" xml:space="preserve">
          <source>submit</source>
          <target state="translated">submit</target>
        </trans-unit>
        <trans-unit id="e062332b395fc3c39f207f55c3e03c27c702c13c" translate="yes" xml:space="preserve">
          <source>take shortcuts</source>
          <target state="translated">近道をする</target>
        </trans-unit>
        <trans-unit id="7fbb727db4b2b6715b092505673cb5922a0d63a8" translate="yes" xml:space="preserve">
          <source>task</source>
          <target state="translated">task</target>
        </trans-unit>
        <trans-unit id="90c04b64a010c79a03a3d71e82736a7f2a079318" translate="yes" xml:space="preserve">
          <source>test attributes &lt;strong&gt;(Object)&lt;/strong&gt;, runnable instance &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="translated">テスト属性&lt;strong&gt;（オブジェクト）&lt;/strong&gt;、実行可能なインスタンス&lt;strong&gt;（オブジェクト）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="65aecd77ab21f9d36f76499f27b05e2a42c292c8" translate="yes" xml:space="preserve">
          <source>tests or suites which are manually re-run from the UI now hide all of the other tests / suites.</source>
          <target state="translated">UI から手動で再実行されたテストやスイートは、他のすべてのテストやスイートを隠すようになりました。</target>
        </trans-unit>
        <trans-unit id="ba45004243732472a3c1f447f09a1371210cc2e5" translate="yes" xml:space="preserve">
          <source>tests with a duplicate &lt;code&gt;id&lt;/code&gt; to another test will now run (with a random temporarily assigned id).</source>
          <target state="translated">別のテストと重複する &lt;code&gt;id&lt;/code&gt; を持つテストが実行されます（ランダムに一時的に割り当てられたIDで）。</target>
        </trans-unit>
        <trans-unit id="45d7794a85f3e70b095b50947ff32acf1d95a08e" translate="yes" xml:space="preserve">
          <source>tests without an &lt;code&gt;id&lt;/code&gt; now run (with a random temporarily assigned id).</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; ないテストが実行されます（ランダムに一時的に割り当てられたIDで）。</target>
        </trans-unit>
        <trans-unit id="a8e5c13c46f49f349eee20caa29070f5af3679df" translate="yes" xml:space="preserve">
          <source>text(&lt;em&gt;text&lt;/em&gt;)</source>
          <target state="translated">text(&lt;em&gt;text&lt;/em&gt;)</target>
        </trans-unit>
        <trans-unit id="f3f3d7cd3fe2cccb1919c854eddff567603bc29a" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;teamcity&lt;/code&gt; reporter is now also working again.</source>
          <target state="translated">&lt;code&gt;teamcity&lt;/code&gt; 記者は今も再び取り組んでいます。</target>
        </trans-unit>
        <trans-unit id="3fcfaa6c040cb3f04710098803a14361a5d1305c" translate="yes" xml:space="preserve">
          <source>the actual beforeunload event &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="translated">実際のbeforeunloadイベント&lt;strong&gt;（オブジェクト）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c14c3798c1f195fa348450d8dc66b11b93615f4" translate="yes" xml:space="preserve">
          <source>the actual unload event &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="translated">実際のアンロードイベント&lt;strong&gt;（オブジェクト）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="df06aca8629d063e91abfd4fda80085cda5956ea" translate="yes" xml:space="preserve">
          <source>the alert text &lt;strong&gt;(String)&lt;/strong&gt;</source>
          <target state="translated">警告テキスト&lt;strong&gt;（文字列）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c009ee2c35e36841541f1297007840190f6517cd" translate="yes" xml:space="preserve">
          <source>the confirmation text &lt;strong&gt;(String)&lt;/strong&gt;</source>
          <target state="translated">確認テキスト&lt;strong&gt;（文字列）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33fd156c298a8d542cc35c1d7d2c962990abce51" translate="yes" xml:space="preserve">
          <source>the element or window being scrolled &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="translated">スクロールされる要素またはウィンドウ&lt;strong&gt;（オブジェクト）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="05ecda15e807e97eaac6a3f3c9137502b8f66747" translate="yes" xml:space="preserve">
          <source>the error &lt;strong&gt;(Object)&lt;/strong&gt;, Mocha runnable &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="translated">エラー&lt;strong&gt;（オブジェクト）&lt;/strong&gt;、モカ実行可能&lt;strong&gt;（オブジェクト）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="feebb5889291a79c58f11e8172e8df1b51a4edcb" translate="yes" xml:space="preserve">
          <source>the new url &lt;strong&gt;(String)&lt;/strong&gt;</source>
          <target state="translated">新しいURL &lt;strong&gt;（文字列）&lt;/strong&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
