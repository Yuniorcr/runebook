<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="cypress">
    <body>
      <group id="cypress">
        <trans-unit id="4752e108ef1f5f601a6569de4952c0938340e9cc" translate="yes" xml:space="preserve">
          <source>If you were to put an &lt;code&gt;.only&lt;/code&gt; on any of the last three tests, they would fail. Each test requires the previous to run in a specific order in order to pass.</source>
          <target state="translated">あなたが入れていた場合は &lt;code&gt;.only&lt;/code&gt; 最後の3つのテストのいずれかで、彼らは失敗するでしょう。各テストでは、合格するために前のテストを特定の順序で実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="2a47508471ea10dee78dd57cf2fcdc3c1f3bfa39" translate="yes" xml:space="preserve">
          <source>If you were using the environment variable &lt;code&gt;CYPRESS_CI_KEY&lt;/code&gt;, rename it to&lt;code&gt;CYPRESS_RECORD_KEY&lt;/code&gt;.</source>
          <target state="translated">環境変数 &lt;code&gt;CYPRESS_CI_KEY&lt;/code&gt; を使用していた場合は、名前をCYPRESS_RECORD_KEYに変更し &lt;code&gt;CYPRESS_RECORD_KEY&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4b709e350a4aecb7a53788fc3dda1358f417bb3e" translate="yes" xml:space="preserve">
          <source>If you wish to continue chaining commands after your &lt;a href=&quot;../../api/commands/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt;, you&amp;rsquo;ll need to specify the subject you want to yield to those commands, which you can achieve with a simple return value other than &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. Cypress will yield that to the next command for you.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; の&lt;/a&gt;後でコマンドのチェーンを継続する場合は、それらのコマンドに委譲するサブジェクトを指定する必要があります。これは、 &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 以外の単純な戻り値で実現できます。サイプレスはそれを次のコマンドに渡します。</target>
        </trans-unit>
        <trans-unit id="bcad8d20c8fa3c62441ed9d593a57637beece082" translate="yes" xml:space="preserve">
          <source>If you would like to change the default option for &lt;strong&gt;ALL&lt;/strong&gt;&lt;code&gt;cy.server()&lt;/code&gt; you &lt;a href=&quot;../cypress-api/cypress-server#Options&quot;&gt;can change this option permanently&lt;/a&gt;.</source>
          <target state="translated">あなたはデフォルトのオプション変更したい場合は&lt;strong&gt;ALLの&lt;/strong&gt; &lt;code&gt;cy.server()&lt;/code&gt; あなたは&lt;a href=&quot;../cypress-api/cypress-server#Options&quot;&gt;永久にこのオプションを変更することができます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ca143e0d558ba1dde31fa7556fc88cd2fbd6446c" translate="yes" xml:space="preserve">
          <source>If you would like to check the response data of each response of an aliased route, you can use several &lt;code&gt;cy.wait()&lt;/code&gt; calls.</source>
          <target state="translated">エイリアスされたルートの各応答の応答データを確認したい場合は、いくつかの &lt;code&gt;cy.wait()&lt;/code&gt; 呼び出しを使用できます。</target>
        </trans-unit>
        <trans-unit id="b3e8ddb52d7e1304f23f1df11a7077ca70501382" translate="yes" xml:space="preserve">
          <source>If you would like to interact with your app while the Selector Playground is open, the element highlighting might get in the way. Toggling the highlighting off will allow you to interact with your app more easily.</source>
          <target state="translated">セレクタ プレイグラウンドが開いているときにアプリを操作する場合、要素のハイライトが邪魔になることがあります。ハイライトをオフに切り替えると、アプリをより簡単に操作できるようになります。</target>
        </trans-unit>
        <trans-unit id="257345e20741273bc8aebc5b4227337dc3209c6c" translate="yes" xml:space="preserve">
          <source>If you would like to opt out of sending any exception data to Cypress, you can do so by setting &lt;code&gt;CYPRESS_CRASH_REPORTS=0&lt;/code&gt; in your system environment variables.</source>
          <target state="translated">サイプレスへの例外データの送信をオプトアウトしたい場合は、システム環境変数で &lt;code&gt;CYPRESS_CRASH_REPORTS=0&lt;/code&gt; を設定することで実行できます。</target>
        </trans-unit>
        <trans-unit id="6ec7269dd0ddcbbd541803b25d55649a227b9a2c" translate="yes" xml:space="preserve">
          <source>If you wrap the asynchronous functions in &lt;code&gt;cy.wrap()&lt;/code&gt;, then &lt;code&gt;bar()&lt;/code&gt; may be called prematurely before the required data is available:</source>
          <target state="translated">あなたは非同期機能をラップした場合 &lt;code&gt;cy.wrap()&lt;/code&gt; 、その後、 &lt;code&gt;bar()&lt;/code&gt; に必要なデータが利用可能になる前に途中で呼ばれることがあります。</target>
        </trans-unit>
        <trans-unit id="d9f828d6b029b5fc2a0dd131813027ec78e819f4" translate="yes" xml:space="preserve">
          <source>If you write &lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt;custom commands&lt;/a&gt; and provide TypeScript definitions for them, you can use the triple slash directives to show IntelliSense, even if your project uses only JavaScript. For example, if your custom commands are written in &lt;code&gt;cypress/support/commands.js&lt;/code&gt; and you describe them in &lt;code&gt;cypress/support/index.d.ts&lt;/code&gt; use:</source>
          <target state="translated">&lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt;カスタムコマンド&lt;/a&gt;を記述してTypeScript定義を提供する場合、プロジェクトでJavaScriptのみを使用している場合でも、トリプルスラッシュディレクティブを使用してIntelliSenseを表示できます。たとえば、カスタムコマンドが &lt;code&gt;cypress/support/commands.js&lt;/code&gt; で記述されており、それらを &lt;code&gt;cypress/support/index.d.ts&lt;/code&gt; に記述している場合は、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="e0c5fb1cd97eadb56927777df1149e1ef56b5749" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like Cypress to automatically send requests that do &lt;em&gt;NOT&lt;/em&gt; match routes the following response:</source>
          <target state="translated">サイプレスがルートに一致し&lt;em&gt;ない&lt;/em&gt;リクエストを自動的に送信するようにしたい場合は、次の応答：</target>
        </trans-unit>
        <trans-unit id="07f9119d637c76f137670adee7ae1ac277c5a2a6" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to contribute directly to the Cypress code, we&amp;rsquo;d love to have your help! Please check out our &lt;a href=&quot;https://github.com/cypress-io/cypress/blob/develop/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; to learn about the many ways you can contribute.</source>
          <target state="translated">サイプレスのコードに直接貢献したい場合は、ぜひご協力ください。&lt;a href=&quot;https://github.com/cypress-io/cypress/blob/develop/CONTRIBUTING.md&quot;&gt;寄稿&lt;/a&gt;できるさまざまな方法については、寄稿ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="a31bcb7fcf9edc392674ed9f19ff3eab0d7e8c9f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to learn more about handling asynchronous Cypress Commands please read our &lt;a href=&quot;variables-and-aliases&quot;&gt;Core Concept Guide&lt;/a&gt;.</source>
          <target state="translated">非同期サイプレスコマンドの処理の詳細については、&lt;a href=&quot;variables-and-aliases&quot;&gt;コアコンセプトガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="6612ee1c4997412de093222d9c00de68da458fcd" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to override these built-in checks, provide the &lt;code&gt;{force: true}&lt;/code&gt; option to the action itself. Refer to each command for their available options, additional use cases, and argument usage.</source>
          <target state="translated">これらの組み込みチェックをオーバーライドする場合は、アクション自体に &lt;code&gt;{force: true}&lt;/code&gt; オプションを提供します。使用可能なオプション、追加の使用例、および引数の使用法については、各コマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="79a3552ac4e20ee3c91582932cf9a9765ac3c173" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to override this, explicitly pass in &lt;code&gt;headers&lt;/code&gt; as an object literal.</source>
          <target state="translated">これをオーバーライドする場合は、 &lt;code&gt;headers&lt;/code&gt; をオブジェクトリテラルとして明示的に渡します。</target>
        </trans-unit>
        <trans-unit id="397a0ada5ff3e4ff64036bb5f68f8e7335b5f4ed" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to see (the huge) stream of events that Cypress emits you can pop open your Dev Tools and write this line in the console.</source>
          <target state="translated">サイプレスが発行するイベントの（巨大な）ストリームを表示したい場合は、Dev Toolsをポップオープンして、コンソールにこの行を書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="bc38c2776039636f87a8d14ddb692422627c92a4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re a modern JS programmer you might hear &amp;ldquo;asynchronous&amp;rdquo; and think: &lt;strong&gt;why can&amp;rsquo;t I just use &lt;code&gt;async/await&lt;/code&gt;&lt;/strong&gt; instead of learning some proprietary API?</source>
          <target state="translated">現代のJSプログラマーであれば、「非同期」と聞いて考えるかもしれません。独自のAPIを学習する代わりに、&lt;strong&gt;なぜ &lt;code&gt;async/await&lt;/code&gt; を&lt;/strong&gt;&lt;strong&gt;使用できないの&lt;/strong&gt;でしょうか。</target>
        </trans-unit>
        <trans-unit id="aab1685bc6de35aba42818473854d58988d957ec" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re developing using a modern JS-based web application stack then you&amp;rsquo;ve likely got support for some form of hot module replacement which is responsible for watching your application code&amp;mdash;HTML, CSS, JS, etc.&amp;mdash;and transparently reloading your application in response to changes.</source>
          <target state="translated">最新のJSベースのWebアプリケーションスタックを使用して開発している場合は、アプリケーションコード（HTML、CSS、JSなど）を監視し、透過的に再ロードする何らかの形式のホットモジュール置換をサポートしている可能性があります。変更に応じたアプリケーション。</target>
        </trans-unit>
        <trans-unit id="b0151c4866ea1f65ef47c82597be6b39f46675b0" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re familiar with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;native Promises&lt;/a&gt; the Cypress &lt;code&gt;.then()&lt;/code&gt; works the same way. You can continue to nest more Cypress commands inside of the &lt;code&gt;.then()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;ネイティブのPromiseに&lt;/a&gt;慣れている場合、サイプレスの &lt;code&gt;.then()&lt;/code&gt; は同じように機能します。 &lt;code&gt;.then()&lt;/code&gt; 内にさらにサイプレスコマンドをネストすることができます。</target>
        </trans-unit>
        <trans-unit id="6398aeebd96fdad7efb346e26e781b17073909fb" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re familiar with Cypress commands already, but find yourself using &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt; then you&amp;rsquo;re typically trying to do one of two things:</source>
          <target state="translated">サイプレスのコマンドに慣れているが、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、または &lt;code&gt;var&lt;/code&gt; を使用している場合は、通常、次の2つのいずれかを実行しようとしています。</target>
        </trans-unit>
        <trans-unit id="90a3204f17130c904eee3d822ba7552a50c50835" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re familiar with writing tests in JavaScript, then writing tests in Cypress will be a breeze.</source>
          <target state="translated">JavaScriptでのテストの記述に慣れている場合は、サイプレスでのテストの記述が簡単になります。</target>
        </trans-unit>
        <trans-unit id="48163e06e6271e83b1007a0e84670bdca1d5715d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re having an issue during installation of Cypress, try removing the contents of the Cypress cache.</source>
          <target state="translated">サイプレスのインストール中に問題が発生した場合は、サイプレスキャッシュの内容を削除してみてください。</target>
        </trans-unit>
        <trans-unit id="90e3f49a1c0d7c9e8171ff957e37dacab6d491b4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re in a situation where you don&amp;rsquo;t control the code, or otherwise cannot work around this, you can bypass this restriction in Cypress by &lt;a href=&quot;web-security#Disabling-Web-Security&quot;&gt;disabling web security&lt;/a&gt;.</source>
          <target state="translated">コードを制御できない状況にある場合、またはこれを回避できない場合は、&lt;a href=&quot;web-security#Disabling-Web-Security&quot;&gt;Webセキュリティを無効にすること&lt;/a&gt;でサイプレスのこの制限を回避できます。</target>
        </trans-unit>
        <trans-unit id="af78d3b5edaa3283e443ab02165983526a9cf924" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in understanding more, we&amp;rsquo;ve written &lt;a href=&quot;../references/trade-offs&quot;&gt;an entire guide&lt;/a&gt; on this topic.</source>
          <target state="translated">もっと理解したい場合は、このトピックに関する&lt;a href=&quot;../references/trade-offs&quot;&gt;完全なガイド&lt;/a&gt;を作成しました。</target>
        </trans-unit>
        <trans-unit id="cf577a2dcd8a201ed583c60ac9f9aa31d097fc31" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re looking to understand &lt;strong&gt;how&lt;/strong&gt; to use these assertions please read about assertions in our &lt;a href=&quot;../core-concepts/introduction-to-cypress#Assertions&quot;&gt;Introduction to Cypress&lt;/a&gt;.</source>
          <target state="translated">これらのアサーションの使用&lt;strong&gt;方法&lt;/strong&gt;を理解したい場合は&lt;a href=&quot;../core-concepts/introduction-to-cypress#Assertions&quot;&gt;、サイプレスの概要&lt;/a&gt;でアサーションについてお読みください。</target>
        </trans-unit>
        <trans-unit id="8af4808d5bb633153c33775dcd081b988cb4cb54" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using Node or &lt;code&gt;npm&lt;/code&gt; in your project or you just want to try Cypress out quickly, you can always &lt;a href=&quot;https://download.cypress.io/desktop&quot;&gt;download Cypress directly from our CDN&lt;/a&gt;.</source>
          <target state="translated">プロジェクトでNodeまたは &lt;code&gt;npm&lt;/code&gt; を使用していない場合、またはサイプレスをすぐに試してみたい場合は、いつでも&lt;a href=&quot;https://download.cypress.io/desktop&quot;&gt;CDNから直接サイプレスをダウンロードできます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1906afa3a0aaf176eb25afa3593af9ececb7a879" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re running &lt;code&gt;node.js&lt;/code&gt; on your server, you might add a &lt;code&gt;before&lt;/code&gt; or &lt;code&gt;beforeEach&lt;/code&gt; hook that executes an &lt;code&gt;npm&lt;/code&gt; task.</source>
          <target state="translated">サーバーで &lt;code&gt;node.js&lt;/code&gt; を実行している場合は、 &lt;code&gt;npm&lt;/code&gt; タスクを実行する &lt;code&gt;before&lt;/code&gt; または &lt;code&gt;beforeEach&lt;/code&gt; フックを追加できます。</target>
        </trans-unit>
        <trans-unit id="29cd81df6830db2d21c23a922f4a678d201d46b6" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re struggling with writing the correct pattern you can iterate much faster by testing directly in your Developer Tools console.</source>
          <target state="translated">正しいパターンの作成に苦労している場合は、開発者ツールコンソールで直接テストすることで、はるかに速く反復できます。</target>
        </trans-unit>
        <trans-unit id="db72c14e3605aa39163bff502db3500deba464f9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using our &lt;a href=&quot;module-api&quot;&gt;Module API&lt;/a&gt; then you can write a script that boots and then shuts down the server later. As a bonus you can easily work with the results and do other things.</source>
          <target state="translated">&lt;a href=&quot;module-api&quot;&gt;モジュールAPI&lt;/a&gt;を使用している場合は、後でサーバーを起動してシャットダウンするスクリプトを作成できます。おまけとして、結果を簡単に操作して他のことを行うことができます。</target>
        </trans-unit>
        <trans-unit id="857911eb4c5c9c4babb34646680345a6f5337c69" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using source control, we recommend that you check your &lt;code&gt;cypress.json&lt;/code&gt;, including the &lt;code&gt;projectId&lt;/code&gt;, into source control. If you don&amp;rsquo;t want your &lt;code&gt;projectId&lt;/code&gt; visible in your source code you can set it as an environment variable using the name &lt;code&gt;CYPRESS_PROJECT_ID&lt;/code&gt;. The exact mechanism for doing so depends on your system but could be as simple as:</source>
          <target state="translated">ソース管理を使用している場合は、 &lt;code&gt;cypress.json&lt;/code&gt; を含む &lt;code&gt;projectId&lt;/code&gt; をソース管理にチェックインすることをお勧めします。あなたはしたくない場合は &lt;code&gt;projectId&lt;/code&gt; ソースコードに目に見えるあなたは名前の使用環境変数として設定することができ &lt;code&gt;CYPRESS_PROJECT_ID&lt;/code&gt; を。そのための正確なメカニズムはシステムによって異なりますが、次のように単純な場合もあります。</target>
        </trans-unit>
        <trans-unit id="b3ca61cf369f9cb670a267457e5be980da07e5ba" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re working on a &lt;code&gt;search_spec.js&lt;/code&gt; file and want to compose several repeatable actions together, you should first ask yourself:</source>
          <target state="translated">&lt;code&gt;search_spec.js&lt;/code&gt; ファイルで作業していて、いくつかの繰り返し可能なアクションを一緒に構成したい場合は、まず自分自身に質問する必要があります。</target>
        </trans-unit>
        <trans-unit id="c09b6d1a0633f326d322ec72835ebdcb06ab6f25" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve been reading along, then you should already have a grasp on why trying to implement conditional code with asynchronous rendering is not a good idea. If the test writer cannot accurately predict the given state of the system, then neither can Cypress. Error handling offers no additional proof this can be done deterministically.</source>
          <target state="translated">読んでいるのであれば、非同期レンダリングで条件付きコードを実装しようとすることがなぜ良い考えではないのか、すでに理解しているはずです。テストライターがシステムの特定の状態を正確に予測できない場合、サイプレスも予測できません。エラー処理は、これが決定論的に実行できる追加の証拠を提供しません。</target>
        </trans-unit>
        <trans-unit id="d152a777af1651a876c73e112b5e83c8a153b2f1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve started your server, then you should see your application loaded and working.</source>
          <target state="translated">サーバーを起動している場合は、アプリケーションが読み込まれ、動作していることがわかります。</target>
        </trans-unit>
        <trans-unit id="5a51b93fb470dc449759d0d8f4c8df6dcf9764ba" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve used &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt; before, you may be used to querying for elements like this:</source>
          <target state="translated">あなたが使用している場合&lt;a href=&quot;https://jquery.com/&quot;&gt;はjQueryを&lt;/a&gt;前に、あなたはこのような要素を照会するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="3e62c43f907228e54c54a15b78209d390669cb0b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve worked in &lt;a href=&quot;http://chaijs.com/&quot;&gt;Chai&lt;/a&gt; before, you will recognize that &lt;code&gt;.and()&lt;/code&gt; matches the same fluent assertion syntax.</source>
          <target state="translated">以前に&lt;a href=&quot;http://chaijs.com/&quot;&gt;Chaiで&lt;/a&gt;作業したことがある場合は、 &lt;code&gt;.and()&lt;/code&gt; が同じFluentアサーション構文と一致していることに気付くでしょう。</target>
        </trans-unit>
        <trans-unit id="6301358721c49fd060835e6bf5ce15ce964f5320" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;pluginsFile&lt;/code&gt; has an uncaught exception, an unhandled rejection from a promise, a syntax error, or anything else - we will automatically catch those and display them to you inside of the console and even in the Test Runner itself.</source>
          <target state="translated">あなたの場合は &lt;code&gt;pluginsFile&lt;/code&gt; がキャッチされない例外、約束、構文エラー、または何か他のものから未処理の拒絶反応を持っている-私たちは、自動的にそれらをキャッチし、コンソールの内部でもテストランナー自体にあなたにそれらを表示します。</target>
        </trans-unit>
        <trans-unit id="48617617a160057ac3e4ee541085f64eed5d32d3" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;pluginsFile&lt;/code&gt; has an uncaught exception, an unhandled rejection from a promise, or a syntax error - we will automatically catch those and display them to you inside of the console and even in the Test Runner itself.</source>
          <target state="translated">あなたの場合は &lt;code&gt;pluginsFile&lt;/code&gt; がキャッチされない例外、約束、または構文エラーから未処理の拒絶反応を持っている-私たちは、自動的にそれらをキャッチし、コンソールの内部でもテストランナー自体にあなたにそれらを表示します。</target>
        </trans-unit>
        <trans-unit id="d45a4ee8912fe4bbfb83ed748f7b205163bde32a" translate="yes" xml:space="preserve">
          <source>If your Record Key is accidentally exposed, you should &lt;a href=&quot;#Delete-record-key&quot;&gt;delete it&lt;/a&gt; and &lt;a href=&quot;#Create-new-record-key&quot;&gt;create a new one&lt;/a&gt;.</source>
          <target state="translated">レコードキーが誤って公開された場合は、&lt;a href=&quot;#Delete-record-key&quot;&gt;削除して&lt;/a&gt;&lt;a href=&quot;#Create-new-record-key&quot;&gt;新しい&lt;/a&gt;キーを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="450c0c90faf8c245e199c06666424f8562cf7971" translate="yes" xml:space="preserve">
          <source>If your administrator has set any of the following Chrome GPOs, it can prevent your tests from running in Chrome:</source>
          <target state="translated">管理者が以下の Chrome GPO のいずれかを設定している場合、Chrome でテストが実行できなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c918f1c46e4a769dd4560399b137e05d9f18db1d" translate="yes" xml:space="preserve">
          <source>If your app is translated into multiple languages for i18n, make sure you consider the implications of using user-facing text to find DOM elements!</source>
          <target state="translated">アプリが i18n のために複数の言語に翻訳されている場合は、DOM 要素を見つけるためにユーザーが直面するテキストを使用することの意味合いを考慮してください。</target>
        </trans-unit>
        <trans-unit id="d94c360e593adaedc1e2b08f74fc2d7133f24347" translate="yes" xml:space="preserve">
          <source>If your application is server side rendered without JavaScript that asynchronously modifies the DOM - congratulations, you can easily do conditional testing on the DOM!</source>
          <target state="translated">あなたのアプリケーションが JavaScript を使わずにサーバーサイドでレンダリングされ、非同期的に DOM を変更する場合-おめでとうございます、DOM で条件付きテストを簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="a2671c271ca9fb3c0f6865e39e2fe992db49b6b5" translate="yes" xml:space="preserve">
          <source>If your back end server handling the &lt;code&gt;/submit&lt;/code&gt; route does a &lt;code&gt;30x&lt;/code&gt; redirect to a different superdomain, you will get a &lt;code&gt;cross origin&lt;/code&gt; error.</source>
          <target state="translated">&lt;code&gt;/submit&lt;/code&gt; ルートを処理するバックエンドサーバーが別のスーパードメインに &lt;code&gt;30x&lt;/code&gt; リダイレクトすると、 &lt;code&gt;cross origin&lt;/code&gt; エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="e638b849e3e497b9d491a634ddbf0794dd8e2aa2" translate="yes" xml:space="preserve">
          <source>If your callback function returns a &lt;code&gt;Promise&lt;/code&gt;, it will be awaited before iterating over the next element in the collection.</source>
          <target state="translated">コールバック関数が &lt;code&gt;Promise&lt;/code&gt; を返す場合、コレクション内の次の要素を反復する前にそれが待機されます。</target>
        </trans-unit>
        <trans-unit id="7db70995f28dedb8765483bbaeaf1301c0dcc648" translate="yes" xml:space="preserve">
          <source>If your end-to-end tests become full of assertions checking visibility, color and other style properties, it might be time to start using visual diffing to verify the page appearance.</source>
          <target state="translated">エンドツーエンドのテストが、可視性や色、その他のスタイル プロパティをチェックするアサーションでいっぱいになってきたら、ページの外観を検証するためにビジュアル ディフティングを使い始める時期かもしれません。</target>
        </trans-unit>
        <trans-unit id="afe8980f8c12c10868130b21bebe1afa23668b71" translate="yes" xml:space="preserve">
          <source>If your environment variables match a standard configuration key, then instead of setting an &lt;code&gt;environment variable&lt;/code&gt; they will instead override the configuration value.</source>
          <target state="translated">環境変数が標準の構成キーと一致する場合、環境変数を設定する代わりに、 &lt;code&gt;environment variable&lt;/code&gt; が構成値をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="7bb90797045230df4a57116841d7511b0ecb17e2" translate="yes" xml:space="preserve">
          <source>If your organization signs up for one of our &lt;a href=&quot;https://www.cypress.io/pricing/&quot;&gt;paid plans&lt;/a&gt;, you can get dedicated email support, which gives you one-on-one help from our team.</source>
          <target state="translated">組織が&lt;a href=&quot;https://www.cypress.io/pricing/&quot;&gt;有料プランの&lt;/a&gt; 1つにサインアップすると、専用の電子メールサポートを利用でき、チームから1対1のサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="e83f4d1be8c008408e3a808dcebb5bde0df59a60" translate="yes" xml:space="preserve">
          <source>If your project has a large number of tests, it can take a long time for tests to complete running serially on one machine. Running tests in parallel across many virtual machines can save your team time and money when running tests in Continuous Integration (CI).</source>
          <target state="translated">プロジェクトに多数のテストがある場合、1 台のマシン上で連続的にテストを実行していると、テストが完了するまでに長い時間がかかることがあります。継続的インテグレーション(CI)でテストを実行する際に、多くの仮想マシンでテストを並行して実行することで、チームの時間とコストを節約できます。</target>
        </trans-unit>
        <trans-unit id="972a2e4f1d881a662f849d9da6c11e1da1fc50e3" translate="yes" xml:space="preserve">
          <source>If your server uses hapi, include &lt;code&gt;middleware/hapi&lt;/code&gt;</source>
          <target state="translated">サーバーがhapiを使用している場合は、 &lt;code&gt;middleware/hapi&lt;/code&gt; 含めます</target>
        </trans-unit>
        <trans-unit id="35dc3ac6f9d4bc1a2b69448fca5b7e96b1efcd96" translate="yes" xml:space="preserve">
          <source>If your site embeds an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; that is a cross-origin frame, Cypress will not be able to automate or communicate with this &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">サイトにクロスオリジンフレームである &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; が埋め込まれている場合、サイプレスはこの &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; を自動化したり通信したりできません。</target>
        </trans-unit>
        <trans-unit id="4cc14e90118f684031598010e6951eeee1954f4f" translate="yes" xml:space="preserve">
          <source>If your spec files have a long run duration, you might notice a time gap between a finished spec and a new spec starting during &lt;code&gt;cypress run&lt;/code&gt;. During this time, Cypress is encoding the captured video and possibly uploading it to the Dashboard.</source>
          <target state="translated">スペックファイルの実行時間が長い場合、 &lt;code&gt;cypress run&lt;/code&gt; 中に、開始されたスペックと新しいスペックの間に時間差が生じることがあります。この間、サイプレスはキャプチャしたビデオをエンコードし、場合によってはダッシュボードにアップロードします。</target>
        </trans-unit>
        <trans-unit id="c9763b7614af0243e3fafa15044725c99cce0582" translate="yes" xml:space="preserve">
          <source>If your specs files are in TypeScript, you should include the TypeScript definition file, &lt;code&gt;cypress/support/index.d.ts&lt;/code&gt;, with the rest of the source files.</source>
          <target state="translated">スペックファイルがTypeScriptにある場合は、TypeScript定義ファイル &lt;code&gt;cypress/support/index.d.ts&lt;/code&gt; を残りのソースファイルに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="4566c8c95f04052245fda9e142ccfec9ec55f3e4" translate="yes" xml:space="preserve">
          <source>If, for example, the source file is &lt;code&gt;spec.coffee&lt;/code&gt;, the preprocessor should:</source>
          <target state="translated">たとえば、ソースファイルが &lt;code&gt;spec.coffee&lt;/code&gt; の場合、プリプロセッサは次のことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="840c871c346b319879c8eb853624aaf51bf83ae9" translate="yes" xml:space="preserve">
          <source>If, for whatever reason, Cypress cannot communicate with the automation servers, your testing session will immediately end and you&amp;rsquo;ll have the ability to re-spawn the browser.</source>
          <target state="translated">何らかの理由でサイプレスがオートメーションサーバーと通信できない場合、テストセッションはすぐに終了し、ブラウザを再起動することができます。</target>
        </trans-unit>
        <trans-unit id="6e0fee1c2641dd555f1c1bad3340ac9feb443a86" translate="yes" xml:space="preserve">
          <source>If, hypothetically, you have written this command because it &lt;strong&gt;has&lt;/strong&gt; to run before the next test does, then the absolute &lt;strong&gt;worst place&lt;/strong&gt; to put it is in an &lt;code&gt;after&lt;/code&gt; or &lt;code&gt;afterEach&lt;/code&gt; hook.</source>
          <target state="translated">仮に、次のテストが実行される前に実行する必要&lt;strong&gt;がある&lt;/strong&gt;ためにこのコマンドを記述した場合、それ&lt;strong&gt;を配置&lt;/strong&gt;するための絶対&lt;strong&gt;最悪の場所&lt;/strong&gt;は &lt;code&gt;after&lt;/code&gt; または &lt;code&gt;afterEach&lt;/code&gt; フックです。</target>
        </trans-unit>
        <trans-unit id="295b7cc4ef2ab9f4a9603b7774c355dfa1b31a2a" translate="yes" xml:space="preserve">
          <source>Iframes are now correctly handled when we restore snapshots. Previously, we removed iframes which would change the page layout and the hitboxes&amp;rsquo; coordinates we drew were wrong. Now we insert iframe placeholders that prevent the page layout from changing. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/234&quot;&gt;#234&lt;/a&gt;.</source>
          <target state="translated">スナップショットを復元するときにiframeが正しく処理されるようになりました。以前は、ページレイアウトを変更するiframeを削除し、描画したヒットボックスの座標が間違っていました。次に、ページレイアウトが変更されないようにするiframeプレースホルダーを挿入します。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/234&quot;&gt;＃234を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="7ef38483a93250e520f89a8bbbebfc58b0b8455f" translate="yes" xml:space="preserve">
          <source>Ignore built-in error checking</source>
          <target state="translated">組み込みのエラーチェックを無視する</target>
        </trans-unit>
        <trans-unit id="ed9917af3f24331b10fa356d066f586ae0104d1a" translate="yes" xml:space="preserve">
          <source>Ignores certificate errors.</source>
          <target state="translated">証明書のエラーを無視します。</target>
        </trans-unit>
        <trans-unit id="86babcad8f01e1bf1a0b598ae0e6c8ff84262776" translate="yes" xml:space="preserve">
          <source>Image Fixture</source>
          <target state="translated">イメージフィクスチャ</target>
        </trans-unit>
        <trans-unit id="c6710ca3583d7013d43636ee35c7fd947d72dc23" translate="yes" xml:space="preserve">
          <source>Image fixtures are sent as &lt;code&gt;base64&lt;/code&gt;</source>
          <target state="translated">画像フィクスチャは &lt;code&gt;base64&lt;/code&gt; として送信されます</target>
        </trans-unit>
        <trans-unit id="b956a40d46b4cd0728e2de70828549219afdf868" translate="yes" xml:space="preserve">
          <source>Image fixtures will be sent back as a &lt;code&gt;base64&lt;/code&gt; string.</source>
          <target state="translated">画像フィクスチャは &lt;code&gt;base64&lt;/code&gt; 文字列として返送されます。</target>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="4513b6761ce835e6212684f50a737b86fcbdf6d4" translate="yes" xml:space="preserve">
          <source>Imagine we load the above instrumented source file from our test spec file. Immediately some counters will be incremented!</source>
          <target state="translated">上記のインストルメントされたソースファイルをテスト仕様ファイルからロードしたとします。すぐにいくつかのカウンタがインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="1e83d6215f35398bb51293f5f120782b52a65a7c" translate="yes" xml:space="preserve">
          <source>Imagine you have a button:</source>
          <target state="translated">ボタンを持っていると想像してみてください。</target>
        </trans-unit>
        <trans-unit id="24b4ed9bf98f198033e93677c87fd1e3d8ac7052" translate="yes" xml:space="preserve">
          <source>Imagine you have a nested navigation structure where the user must hover over and move the mouse in a very specific pattern to reach the desired link.</source>
          <target state="translated">ユーザーが目的のリンクに到達するためには、マウスを特定のパターンで移動させ、上にカーソルを置く必要がある入れ子構造のナビゲーション構造を想像してみてください。</target>
        </trans-unit>
        <trans-unit id="e12ad3c8e988f212753edfa4bc105c46859f3cf9" translate="yes" xml:space="preserve">
          <source>Imagine you&amp;rsquo;re testing the functionality of a &lt;strong&gt;Shopping Cart&lt;/strong&gt;. To test this, you need the ability to add products to that cart. Well where do the products come from? Should you use your UI to login to the admin area, and then create all of the products including their descriptions, categories, and images? Once that&amp;rsquo;s done should you then visit each product and add each one to the shopping cart?</source>
          <target state="translated">&lt;strong&gt;ショッピングカートの&lt;/strong&gt;機能をテストしているとしましょう。これをテストするには、そのカートに商品を追加する機能が必要です。さて、製品はどこから来たのですか？UIを使用して管理領域にログインし、説明、カテゴリ、画像を含むすべての製品を作成する必要がありますか？それが終わったら、各製品にアクセスして、それぞれをショッピングカートに追加する必要がありますか？</target>
        </trans-unit>
        <trans-unit id="566491edc9d62340e3c6a132a8942efac39e2f06" translate="yes" xml:space="preserve">
          <source>Implicit Subjects</source>
          <target state="translated">暗黙の主語</target>
        </trans-unit>
        <trans-unit id="cf477996796d1f1e0450b8ac052a7dd0a9274bd6" translate="yes" xml:space="preserve">
          <source>Implicit form submission behavior</source>
          <target state="translated">暗黙のフォーム送信動作</target>
        </trans-unit>
        <trans-unit id="ceea8996382aff9fe78b5e01926378f70c5f2ea7" translate="yes" xml:space="preserve">
          <source>Improved &lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;cypress ci&lt;/code&gt; headless output. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/306&quot;&gt;#306&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt; &lt;code&gt;cypress run&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;cypress ci&lt;/code&gt; ヘッドレス出力の改善。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/306&quot;&gt;＃306を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="cbc813306f6acf875228b7315bd382b47baa1b66" translate="yes" xml:space="preserve">
          <source>Improved &lt;code&gt;onConsole&lt;/code&gt; message for &lt;a href=&quot;../../api/commands/focused&quot;&gt;&lt;code&gt;cy.focused()&lt;/code&gt;&lt;/a&gt; when no element was returned. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/23&quot;&gt;#23&lt;/a&gt;.</source>
          <target state="translated">要素が返されなかった場合の&lt;a href=&quot;../../api/commands/focused&quot;&gt; &lt;code&gt;cy.focused()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;onConsole&lt;/code&gt; メッセージを改善しました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/23&quot;&gt;＃23を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="8be175fa25df67e38fdd3f4a4b7899db413fbd67" translate="yes" xml:space="preserve">
          <source>Improved accessibility of Test Runner for screen readers. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3850&quot;&gt;#3850&lt;/a&gt;.</source>
          <target state="translated">スクリーンリーダーのテストランナーのアクセシビリティが向上しました。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3850&quot;&gt;＃3850&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3f2a13dc80d0bdb5e140f0519a5c90516c8387df" translate="yes" xml:space="preserve">
          <source>Improved clicking algorithm to reduce edge cases where element could not be clicked but should have been able to be clicked.</source>
          <target state="translated">要素がクリックできなかったが、クリックできるはずの要素がクリックできなかった場合のエッジケースを減らすために、クリックアルゴリズムを改善しました。</target>
        </trans-unit>
        <trans-unit id="26c3840709d197d5090b792b8c718a0588711bf2" translate="yes" xml:space="preserve">
          <source>Improved command errors and normalized many of them. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/137&quot;&gt;#137&lt;/a&gt;.</source>
          <target state="translated">コマンドエラーが改善され、その多くが正規化されました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/137&quot;&gt;＃137を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="0079ba670fc7406dd72cb13a76e2e79ed8e6cc8c" translate="yes" xml:space="preserve">
          <source>Improved command subject validation error messages.</source>
          <target state="translated">コマンド件名の検証エラーメッセージを改善しました。</target>
        </trans-unit>
        <trans-unit id="74dfd904cdd11d00b81ae50365c01467a12398f8" translate="yes" xml:space="preserve">
          <source>Improved crash reporting when the binary throws an uncaught error.</source>
          <target state="translated">バイナリが捕捉できないエラーをスローした場合のクラッシュ報告を改善しました。</target>
        </trans-unit>
        <trans-unit id="06848fcd0a27917f97653952ba6663ed45f9ac7d" translate="yes" xml:space="preserve">
          <source>Improved displaying list of Tutorials, Recipes, Applications, and Docker examples</source>
          <target state="translated">チュートリアル、レシピ、アプリケーション、Dockerサンプルの一覧表示を改善しました。</target>
        </trans-unit>
        <trans-unit id="d901ffa123fb70088a50387566c488b5b3de71a1" translate="yes" xml:space="preserve">
          <source>Improved dozens of error messages.</source>
          <target state="translated">数十件のエラーメッセージを改善しました。</target>
        </trans-unit>
        <trans-unit id="e822ae58f01d47a3917a83810d36528353a05695" translate="yes" xml:space="preserve">
          <source>Improved element display in Command Log when multiple elements are part of an assertion. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/96&quot;&gt;#96&lt;/a&gt;.</source>
          <target state="translated">複数の要素がアサーションの一部である場合のコマンドログでの要素表示の改善。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/96&quot;&gt;＃96を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="c89f05a9dad058acf481a167fb569de38b4b1279" translate="yes" xml:space="preserve">
          <source>Improved error message displayed for &lt;code&gt;cypress cache&lt;/code&gt; to not display &lt;code&gt;[object Object]&lt;/code&gt; and made &lt;code&gt;--help&lt;/code&gt; labels more descriptive. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2589&quot;&gt;#2589&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cypress cache&lt;/code&gt; に表示されるエラーメッセージが &lt;code&gt;[object Object]&lt;/code&gt; を表示しないように改善され、 &lt;code&gt;--help&lt;/code&gt; ラベルがよりわかりやすくなりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2589&quot;&gt;＃2589を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="22f67255037b6cc1bc249cb0edbe6a12a30b661e" translate="yes" xml:space="preserve">
          <source>Improved error message when attempting to use &lt;code&gt;cy.agents&lt;/code&gt; or anything else which requires a remote sandbox. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/12&quot;&gt;#12&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cy.agents&lt;/code&gt; またはリモートサンドボックスを必要とするその他のものを使用しようとしたときのエラーメッセージが改善されました。修正&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/12&quot;&gt;＃12&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b65001dddbe732d7b52b947c65b159a18865ed4d" translate="yes" xml:space="preserve">
          <source>Improved error messages for &lt;a href=&quot;../../api/commands/readfile&quot;&gt;&lt;code&gt;cy.readFile()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/writefile&quot;&gt;&lt;code&gt;cy.writeFile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/readfile&quot;&gt; &lt;code&gt;cy.readFile()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../api/commands/writefile&quot;&gt; &lt;code&gt;cy.writeFile()&lt;/code&gt; の&lt;/a&gt;エラーメッセージが改善されました。</target>
        </trans-unit>
        <trans-unit id="2a064c031c08696360e6bbf4e8b948a04debcb9d" translate="yes" xml:space="preserve">
          <source>Improved error messages for invalid &lt;a href=&quot;../../api/commands/route&quot;&gt;&lt;code&gt;cy.route()&lt;/code&gt;&lt;/a&gt; arguments. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/20&quot;&gt;#20&lt;/a&gt;.</source>
          <target state="translated">無効な&lt;a href=&quot;../../api/commands/route&quot;&gt; &lt;code&gt;cy.route()&lt;/code&gt; &lt;/a&gt;引数のエラーメッセージが改善されました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/20&quot;&gt;＃20を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="252e7ddbffce22ae202c3a169dfa5b9285348f95" translate="yes" xml:space="preserve">
          <source>Improved error messages for traversal failures. Errors now include the parent context DOM element. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/11&quot;&gt;#11&lt;/a&gt;.</source>
          <target state="translated">トラバーサル障害のエラーメッセージが改善されました。エラーには、親コンテキストのDOM要素が含まれるようになりました。修正&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/11&quot;&gt;＃11&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dc2e133b65b998b88433f9a583a813183a950144" translate="yes" xml:space="preserve">
          <source>Improved error when &lt;a href=&quot;../../api/commands/request&quot;&gt;&lt;code&gt;cy.request()&lt;/code&gt;&lt;/a&gt; fails. The request parameters are now included in the error. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/134&quot;&gt;#134&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/request&quot;&gt; &lt;code&gt;cy.request()&lt;/code&gt; &lt;/a&gt;が失敗したときのエラーを改善しました。リクエストパラメータがエラーに含まれるようになりました。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/134&quot;&gt;＃134&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e6068976492ac9da6b70d05c82e9cb604fa898dc" translate="yes" xml:space="preserve">
          <source>Improved errors shown when opening a project in the Desktop Application. The design is more readable and the error&amp;rsquo;s stack trace is now expandable. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2955&quot;&gt;#2955&lt;/a&gt;.</source>
          <target state="translated">デスクトップアプリケーションでプロジェクトを開くときに表示されるエラーの改善。デザインが読みやすくなり、エラーのスタックトレースが拡張可能になりました。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2955&quot;&gt;＃2955&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a1ba1aecea97b21b1e473a7bbe2a28a4e914e288" translate="yes" xml:space="preserve">
          <source>Improved experience of search in Desktop Application when there are no results. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3146&quot;&gt;#3146&lt;/a&gt;.</source>
          <target state="translated">結果がない場合のデスクトップアプリケーションでの検索エクスペリエンスの向上。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3146&quot;&gt;＃3146&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ddf104430b20ab94d5d8562c1dcce5c4ebcac9b3" translate="yes" xml:space="preserve">
          <source>Improved headless performance, and added optimizations for early and often GC.</source>
          <target state="translated">ヘッドレス性能を向上させ、早い時期や頻繁にGCを行う場合の最適化を追加しました。</target>
        </trans-unit>
        <trans-unit id="aaccc99da6954af13e6294a931c8df21f58f9ca7" translate="yes" xml:space="preserve">
          <source>Improved initial Desktop Application startup performance by about &lt;code&gt;1.5s&lt;/code&gt;.</source>
          <target state="translated">初期デスクトップアプリケーションの起動パフォーマンスが約 &lt;code&gt;1.5s&lt;/code&gt; 向上しました。</target>
        </trans-unit>
        <trans-unit id="4aaecbabaabfac9f34870586de9a9edaebe6db4d" translate="yes" xml:space="preserve">
          <source>Improved options logging and argument logging for all commands. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/8&quot;&gt;#8&lt;/a&gt;.</source>
          <target state="translated">すべてのコマンドのオプションロギングと引数ロギングの改善。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/8&quot;&gt;＃8を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="55e75b36e99319d57066673a634846441b91874a" translate="yes" xml:space="preserve">
          <source>Improved performance by preventing &lt;code&gt;snapshots&lt;/code&gt; from being taken during headless runs.</source>
          <target state="translated">ヘッドレス実行中に &lt;code&gt;snapshots&lt;/code&gt; が取得されないようにすることによるパフォーマンスの向上。</target>
        </trans-unit>
        <trans-unit id="da41a6fab9284055cae9ffba69b0c0519d609ab3" translate="yes" xml:space="preserve">
          <source>Improved performance of formatting fixtures.</source>
          <target state="translated">フォーマットフィクスチャのパフォーマンスを向上させました。</target>
        </trans-unit>
        <trans-unit id="79354d3b6c2b87282c39b3ad05ff13372bd1c3e0" translate="yes" xml:space="preserve">
          <source>Improved performance when running &lt;code&gt;cypress run&lt;/code&gt; by caching the last bundled spec. This prevents having the same spec file rebundled each time &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; caused a full page navigation. You should see a moderate improvement in test run time. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/370&quot;&gt;#370&lt;/a&gt;.</source>
          <target state="translated">最後にバンドルされた仕様をキャッシュ &lt;code&gt;cypress run&lt;/code&gt; により、cypress runを実行するときのパフォーマンスが向上しました。これにより、&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; &lt;/a&gt;がページ全体をナビゲートするたびに同じスペックファイルが再バンドルされるのを防ぎます。テストの実行時間は中程度に改善されるはずです。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/370&quot;&gt;＃370を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="703f10390cde2fb7bb83b317e4b2ace6524a7e5f" translate="yes" xml:space="preserve">
          <source>Improved reliability for displaying the remote url.</source>
          <target state="translated">リモートURLの表示の信頼性を向上させました。</target>
        </trans-unit>
        <trans-unit id="16e39974c1762c69a407c7513a4d370ee3cb0335" translate="yes" xml:space="preserve">
          <source>Improved the &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/74#issuecomment-208422453&quot;&gt;error message&lt;/a&gt; displayed to users on Windows attempting to download the Cypress Desktop app.</source>
          <target state="translated">サイプレスデスクトップアプリをダウンロードしようとするWindowsのユーザーに表示される&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/74#issuecomment-208422453&quot;&gt;エラーメッセージを&lt;/a&gt;改善しました。</target>
        </trans-unit>
        <trans-unit id="67acb5ba4500405f155be15da50cb281965298a5" translate="yes" xml:space="preserve">
          <source>Improved the calculations to calculate an elements visibility. Additionally updated error messages to be clearer whenever an element isn&amp;rsquo;t considered visible. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/613&quot;&gt;#613&lt;/a&gt;</source>
          <target state="translated">要素の可視性を計算するように計算を改善しました。さらに、エラーメッセージが更新され、要素が表示されていると見なされない場合はいつでも明確になるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/613&quot;&gt;＃613の&lt;/a&gt;修正</target>
        </trans-unit>
        <trans-unit id="b88681d8483932fe365c217e142947af1e1bba42" translate="yes" xml:space="preserve">
          <source>Improved the element detachment error messages (when you try to interact with an element that&amp;rsquo;s become stale / detached from the document).</source>
          <target state="translated">要素の切り離しのエラーメッセージを改善しました（古くなった、またはドキュメントから切り離された要素を操作しようとしたとき）。</target>
        </trans-unit>
        <trans-unit id="92596101c48f6d47c1bc13230dd426124e45de22" translate="yes" xml:space="preserve">
          <source>Improved the reporter&amp;rsquo;s responsive design so controls still show at narrower widths. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/544&quot;&gt;#544&lt;/a&gt;.</source>
          <target state="translated">レポーターのレスポンシブデザインが改善され、コントロールがより狭い幅で表示されるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/544&quot;&gt;＃544を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="2a25e1d51c3d2713bcd39f6d37f1e5f69d3127b7" translate="yes" xml:space="preserve">
          <source>Improved verifying the binary for the first time after an &lt;code&gt;npm install&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/709&quot;&gt;#709&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;npm install&lt;/code&gt; 後、初めてのバイナリ検証の改善。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/709&quot;&gt;＃709を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="eca4359f4f67e96fd9312096e6628697698cac42" translate="yes" xml:space="preserve">
          <source>In CI, the window size (not the viewport) has been changed from &lt;code&gt;1024x768&lt;/code&gt; to &lt;code&gt;1280x720&lt;/code&gt;. This will only affect &lt;code&gt;screenshot&lt;/code&gt; artifacts which are taken automatically with &lt;a href=&quot;../../api/commands/screenshot&quot;&gt;&lt;code&gt;cy.screenshot()&lt;/code&gt;&lt;/a&gt; (coming soon) or whenever a test fails (also coming soon).</source>
          <target state="translated">CIでは、（ビューポートではなく）ウィンドウサイズが &lt;code&gt;1024x768&lt;/code&gt; から &lt;code&gt;1280x720&lt;/code&gt; に変更されました。これは、&lt;a href=&quot;../../api/commands/screenshot&quot;&gt; &lt;code&gt;cy.screenshot()&lt;/code&gt; で&lt;/a&gt;自動的に取得される &lt;code&gt;screenshot&lt;/code&gt; アーティファクト（近日公開）またはテストが失敗した場合（近日公開）にのみ影響します。</target>
        </trans-unit>
        <trans-unit id="1e4b013137369ed2b06a5fb376399217a8fac236" translate="yes" xml:space="preserve">
          <source>In Cypress there is no built in error recovery from a failed command. A command and its assertions all &lt;em&gt;eventually&lt;/em&gt; pass, or if one fails, all remaining commands are not run, and the test fails.</source>
          <target state="translated">サイプレスでは、失敗したコマンドからの組み込みのエラー回復はありません。コマンドとそのアサーションはすべて&lt;em&gt;最終的に&lt;/em&gt;は合格します。失敗した場合、残りのすべてのコマンドは実行されず、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="8f50116473ece617233977357a4883828c892141" translate="yes" xml:space="preserve">
          <source>In Cypress, &amp;ldquo;environment variables&amp;rdquo; are variables that are accessible via &lt;code&gt;Cypress.env&lt;/code&gt;. These are not the same as OS-level environment variables. However, &lt;a href=&quot;https://docs.cypress.io/guides/guides/environment-variables.html#Option-3-CYPRESS&quot;&gt;it is possible to set Cypress environment variables from OS-level environment variables&lt;/a&gt;.</source>
          <target state="translated">サイプレスでは、「環境変数」は &lt;code&gt;Cypress.env&lt;/code&gt; を介してアクセスできる変数です。これらは、OSレベルの環境変数と同じではありません。ただし、&lt;a href=&quot;https://docs.cypress.io/guides/guides/environment-variables.html#Option-3-CYPRESS&quot;&gt;OSレベルの環境変数からサイプレス環境変数を設定することは可能です&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b0d55e4cc0ea2cf5d444b8bfcff8fb4264bd554d" translate="yes" xml:space="preserve">
          <source>In Cypress, querying elements is the same:</source>
          <target state="translated">Cypressでは、要素の問い合わせも同じです。</target>
        </trans-unit>
        <trans-unit id="c4ae9e544f2d81fa393bf995be3feae899249191" translate="yes" xml:space="preserve">
          <source>In Cypress, when you want to interact with a DOM element directly, call &lt;a href=&quot;../../api/commands/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; with a callback function that receives the element as its first argument. When you want to skip the retry-and-timeout functionality entirely and perform traditional synchronous work, use &lt;a href=&quot;../../api/utilities/%24&quot;&gt;&lt;code&gt;Cypress.$&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">サイプレスでは、DOM要素と直接やり取りしたい場合、最初の引数として要素を受け取るコールバック関数で&lt;a href=&quot;../../api/commands/then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; &lt;/a&gt;を呼び出します。再試行とタイムアウトの機能を完全にスキップして、従来の同期作業を実行する場合は、&lt;a href=&quot;../../api/utilities/%24&quot;&gt; &lt;code&gt;Cypress.$&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="93dc3a56cc98e9a5da2045fbad38633a61a8b168" translate="yes" xml:space="preserve">
          <source>In Cypress, you almost never need to use &lt;code&gt;cy.wait()&lt;/code&gt; for an arbitrary amount of time. If you are finding yourself doing this, there is likely a much better, simpler way.</source>
          <target state="translated">サイプレスでは、任意の時間だけ &lt;code&gt;cy.wait()&lt;/code&gt; を使用する必要はほとんどありません。あなたがこれをしていることに気づいているなら、おそらくもっと良い、より簡単な方法があるでしょう。</target>
        </trans-unit>
        <trans-unit id="83afb0e7a862e44031c0c1176f1d0fe6caae0f69" translate="yes" xml:space="preserve">
          <source>In Docker</source>
          <target state="translated">Dockerでは</target>
        </trans-unit>
        <trans-unit id="23d0b9b709accae2ccb336b4bd7475f91e65a70c" translate="yes" xml:space="preserve">
          <source>In February 2018 we gave a &amp;ldquo;Best Practices&amp;rdquo; conference talk at AssertJS. This video demonstrates how to approach writing fast, scalable tests.</source>
          <target state="translated">2018年2月に、AssertJSで「ベストプラクティス」会議講演を行いました。このビデオでは、高速でスケーラブルなテストを作成する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="217ea5cca9699504b57fcecb48b0029845d1abba" translate="yes" xml:space="preserve">
          <source>In a nutshell</source>
          <target state="translated">一言で言えば</target>
        </trans-unit>
        <trans-unit id="0cfcf679328437fea7ca63674e0875324d46aa18" translate="yes" xml:space="preserve">
          <source>In a real browser, if a user holds &lt;code&gt;SHIFT&lt;/code&gt; and types &lt;code&gt;a&lt;/code&gt;, a capital &lt;code&gt;A&lt;/code&gt; will be typed into the input. Currently, Cypress does not simulate that behavior.</source>
          <target state="translated">実際のブラウザでは、ユーザーが &lt;code&gt;SHIFT&lt;/code&gt; を押し &lt;code&gt;a&lt;/code&gt; と入力すると、入力に大文字の &lt;code&gt;A&lt;/code&gt; が入力されます。現在、サイプレスはその動作をシミュレートしていません。</target>
        </trans-unit>
        <trans-unit id="6fc81d665c6573b797ef9731d4199a3fa5775693" translate="yes" xml:space="preserve">
          <source>In a real browser, preventing &lt;code&gt;mousedown&lt;/code&gt; on a form field will prevent it from receiving focus and thus prevent it from being able to be typed into. Currently, Cypress does not factor this in. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;Open an issue&lt;/a&gt; if you need this to be fixed.</source>
          <target state="translated">実際のブラウザでは、フォームフィールドでの &lt;code&gt;mousedown&lt;/code&gt; を防止すると、フォームフィールドにフォーカスが移らず、入力できなくなります。現在、サイプレスはこれを考慮に入れていません。これを修正する必要がある場合は&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;、問題を開いて&lt;/a&gt;ください。</target>
        </trans-unit>
        <trans-unit id="320d28f497aadcc5b422e2819000cb122757a814" translate="yes" xml:space="preserve">
          <source>In action</source>
          <target state="translated">アクション</target>
        </trans-unit>
        <trans-unit id="66c2b6aed0a9de1021112edd369a9f8559aa7c32" translate="yes" xml:space="preserve">
          <source>In addition to controlling the command&amp;rsquo;s implicit behavior you can also add declarative subject validations such as:</source>
          <target state="translated">コマンドの暗黙的な動作を制御することに加えて、次のような宣言型のサブジェクト検証を追加することもできます。</target>
        </trans-unit>
        <trans-unit id="51f29c6b3af38b802d9213596ba6361aa65273ef" translate="yes" xml:space="preserve">
          <source>In addition to having a helpful UI, there are also special commands dedicated to the task of debugging.</source>
          <target state="translated">便利なUIに加えて、デバッグ作業に特化した特別なコマンドも用意されています。</target>
        </trans-unit>
        <trans-unit id="96aae7a4198787988c8fe087f5568f27d3da7538" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;DEBUG&lt;/code&gt; messages, Cypress also emits multiple events you can listen to as shown below. &lt;a href=&quot;../../api/events/catalog-of-events#Logging-All-Events&quot;&gt;Read more about logging events in the browser here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;DEBUG&lt;/code&gt; メッセージに加えて、サイプレスは、以下に示すように、聞くことができる複数のイベントも発行します。&lt;a href=&quot;../../api/events/catalog-of-events#Logging-All-Events&quot;&gt;ブラウザでのイベントのロギングについて詳しくは、こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3bc2b29e552e115209ada03b0c740b4c8ea36f37" translate="yes" xml:space="preserve">
          <source>In addition to the browsers found on your system, you&amp;rsquo;ll notice that Electron is an available browser. The Electron browser is a version of Chromium that comes with &lt;a href=&quot;https://electron.atom.io/&quot;&gt;Electron&lt;/a&gt;.</source>
          <target state="translated">システム上にあるブラウザーに加えて、Electronが使用可能なブラウザーであることがわかります。Electronブラウザは、&lt;a href=&quot;https://electron.atom.io/&quot;&gt;Electronに&lt;/a&gt;付属するバージョンのChromiumです。</target>
        </trans-unit>
        <trans-unit id="dfa444adf9ce49e02f71a3745577a26190472e06" translate="yes" xml:space="preserve">
          <source>In additional to controlling the command&amp;rsquo;s implicit behavior you can also add declarative subject validations such as:</source>
          <target state="translated">コマンドの暗黙的な動作を制御することに加えて、次のような宣言的なサブジェクト検証を追加することもできます。</target>
        </trans-unit>
        <trans-unit id="c98561952b227b72d8d063fd8a2755bcb59940d2" translate="yes" xml:space="preserve">
          <source>In all cases, the fact that the binary was installed from a custom location &lt;em&gt;is not saved in your &lt;code&gt;package.json&lt;/code&gt; file&lt;/em&gt;. Every repeated installation needs to use the same environment variable to install the same binary.</source>
          <target state="translated">すべての場合において、バイナリがカスタムの場所からインストールされたという事実&lt;em&gt;は、 &lt;code&gt;package.json&lt;/code&gt; ファイルに保存されません&lt;/em&gt;。繰り返しインストールするたびに、同じ環境変数を使用して同じバイナリをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="e556245dccc8b934e56ce11b57126a1352618544" translate="yes" xml:space="preserve">
          <source>In all cases, you are using &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt; job definitions that Cypress provides inside the orb. Using the orb brings simplicity and static checks of parameters to CircleCI configuration.</source>
          <target state="translated">すべての場合において、サイプレスがオーブ内で提供 &lt;code&gt;install&lt;/code&gt; &lt;code&gt;run&lt;/code&gt; およびインストールジョブ定義を使用しています。orbを使用すると、パラメーターの単純で静的なチェックがCircleCI構成にもたらされます。</target>
        </trans-unit>
        <trans-unit id="e2544fa406c5d3a4a0393145b666362aac681f4f" translate="yes" xml:space="preserve">
          <source>In case you missed it before - Cypress tests run inside of the browser! This means we can do things nobody else can. There is no object serialization or JSON wire protocols. You have real, native access to everything in your application under test. It is impossible for Cypress to &amp;lsquo;miss&amp;rsquo; elements and it always knows the moment your application fires any kind of event.</source>
          <target state="translated">見逃した場合のために-サイプレステストはブラウザ内で実行されます！これは、他の誰もできないことをできることを意味します。オブジェクトのシリアル化やJSONワイヤプロトコルはありません。テスト中のアプリケーションのすべてに実際にネイティブにアクセスできます。サイプレスが要素を「見逃す」ことは不可能であり、アプリケーションがあらゆる種類のイベントを起動した瞬間を常に認識しています。</target>
        </trans-unit>
        <trans-unit id="06db0e869e5b5019e15cfcf65f101aeda26d156d" translate="yes" xml:space="preserve">
          <source>In each of these examples, it&amp;rsquo;s important to note that Cypress will automatically &lt;em&gt;wait&lt;/em&gt; until these assertions pass. This prevents you from having to know or care about the precise moment your elements eventually do reach this state.</source>
          <target state="translated">これらの各例では、サイプレスがこれらのアサーションがパスするまで自動的に&lt;em&gt;待機&lt;/em&gt;することに注意することが重要です。これにより、最終的に要素がこの状態になる正確な瞬間を知る必要がないようにします。</target>
        </trans-unit>
        <trans-unit id="957cedd2227871d2848a63a9c4d6c999d1cb3089" translate="yes" xml:space="preserve">
          <source>In each of these situations, Cypress will lose the ability to automate your application and will immediately error.</source>
          <target state="translated">これらの状況のいずれにおいても、Cypress はアプリケーションを自動化する機能を失い、すぐにエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="d455e0cf9f8dec0308d2c03ee28d251b870d0a43" translate="yes" xml:space="preserve">
          <source>In fact we can likely bypass the initial visit altogether and just &lt;code&gt;POST&lt;/code&gt; directly to your &lt;code&gt;SSO&lt;/code&gt; server.</source>
          <target state="translated">実際、最初のアクセスを完全にバイパスし、 &lt;code&gt;SSO&lt;/code&gt; サーバーに直接 &lt;code&gt;POST&lt;/code&gt; するだけの可能性があります。</target>
        </trans-unit>
        <trans-unit id="3b828d2cc65ff6901d0db67ba050dd72135ffb14" translate="yes" xml:space="preserve">
          <source>In fact we only ever scroll elements into view when actionable commands are running using the above algorithms. We &lt;em&gt;do not&lt;/em&gt; scroll elements into view on regular DOM commands like &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../api/commands/find&quot;&gt;&lt;code&gt;.find()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実際、上記のアルゴリズムを使用して実行可能なコマンドが実行されている場合にのみ、要素をスクロールして表示します。我々は&lt;em&gt;していない&lt;/em&gt;ような、通常のDOMコマンドのビューに要素をスクロール&lt;a href=&quot;../../api/commands/get&quot;&gt; &lt;code&gt;cy.get()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../api/commands/find&quot;&gt; &lt;code&gt;.find()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="972e3b350e94808ddfad132c9667f5d95eba221c" translate="yes" xml:space="preserve">
          <source>In fact, Cypress &lt;a href=&quot;../references/bundled-tools#Other-Library-Utilities&quot;&gt;bundles jQuery&lt;/a&gt; and exposes many of its DOM traversal methods to you so you can work with complex HTML structures with ease using APIs you&amp;rsquo;re already familiar with.</source>
          <target state="translated">実際、サイプレス&lt;a href=&quot;../references/bundled-tools#Other-Library-Utilities&quot;&gt;はjQuery&lt;/a&gt;をバンドルし、そのDOMトラバーサルメソッドの多くを公開しているため、使い慣れたAPIを使用して複雑なHTML構造を簡単に操作できます。</target>
        </trans-unit>
        <trans-unit id="2cfb46617eb16e37fba8d76bf4e0fbd123bfb6db" translate="yes" xml:space="preserve">
          <source>In general, it should not be necessary to manually restore the native functions that &lt;code&gt;cy.clock()&lt;/code&gt; overrides since this is done automatically between tests. But if you need to, the &lt;code&gt;clock&lt;/code&gt; object yield has a &lt;code&gt;.restore()&lt;/code&gt; method.</source>
          <target state="translated">これはテスト間で自動的に行われるため、一般に、 &lt;code&gt;cy.clock()&lt;/code&gt; がオーバーライドするネイティブ関数を手動で復元する必要はありません。ただし、必要に応じて、 &lt;code&gt;clock&lt;/code&gt; オブジェクトの生成には &lt;code&gt;.restore()&lt;/code&gt; メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="6f65ca0977b8d4f0f635988d0d1f96d0e636bf9a" translate="yes" xml:space="preserve">
          <source>In general, there are only a handful of very specific situations where you &lt;em&gt;can&lt;/em&gt; create control flow. Asking to recover from errors is actually just asking for another &lt;code&gt;if/else&lt;/code&gt; control flow.</source>
          <target state="translated">一般に、制御フロー&lt;em&gt;を&lt;/em&gt;作成&lt;em&gt;できる&lt;/em&gt;状況はごく一部です。エラーからの回復を要求することは、実際には単に別の &lt;code&gt;if/else&lt;/code&gt; 制御フローを要求することです。</target>
        </trans-unit>
        <trans-unit id="9a36d58b1789bc4d3558b6ff8edc263c58dfa4f4" translate="yes" xml:space="preserve">
          <source>In green, we highlighted the 4 statements present in that file. The first three statements were each executed once and the last statement was never executed (it probably was inside an &lt;code&gt;if&lt;/code&gt; statement). By using the application, we can both increment the counters and flip some of the zero counters into positive numbers.</source>
          <target state="translated">緑で、そのファイルにある4つのステートメントを強調表示しました。最初の3つのステートメントはそれぞれ1回実行され、最後のステートメントは実行されませんでした（おそらく &lt;code&gt;if&lt;/code&gt; ステートメント内にありました）。アプリケーションを使用することで、カウンターをインクリメントし、一部のゼロカウンターを正の数にフリップできます。</target>
        </trans-unit>
        <trans-unit id="2ce9da97dae73d511f76748460799579cde4725e" translate="yes" xml:space="preserve">
          <source>In many single-page JavaScript applications the DOM re-renders parts of the application constantly. If you alias DOM elements that have been removed from the DOM by the time you call &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt; with the alias, Cypress automatically re-queries the DOM to find these elements again.</source>
          <target state="translated">多くの単一ページのJavaScriptアプリケーションでは、DOMはアプリケーションの一部を常に再レンダリングします。エイリアスを使用して&lt;a href=&quot;../../api/commands/get&quot;&gt; &lt;code&gt;cy.get()&lt;/code&gt; &lt;/a&gt;を呼び出すまでにDOMから削除されたDOM要素にエイリアスを設定すると、サイプレスは自動的にDOMを再クエリしてこれらの要素を再度検索します。</target>
        </trans-unit>
        <trans-unit id="3b8f64d724638ed5c83f51001e0f2a341e271119" translate="yes" xml:space="preserve">
          <source>In modern JavaScript frameworks, DOM elements are regularly re-rendered - meaning that the old element is thrown away and a new one is put in its place. Because this happens so fast, it may &lt;em&gt;appear&lt;/em&gt; as if nothing has visibly changed to the user. But if you are in the middle of executing test commands, it&amp;rsquo;s possible the element you&amp;rsquo;re interacting with has become &amp;ldquo;dead&amp;rdquo;. To deal with this situation you must:</source>
          <target state="translated">最新のJavaScriptフレームワークでは、DOM要素は定期的に再レン​​ダリングされます。つまり、古い要素は破棄され、新しい要素がその場所に配置されます。これは非常に速く起こるので、それが可能&lt;em&gt;に表示され&lt;/em&gt;、何も目に見えて、ユーザーに変更されなかったかのよう。しかし、テストコマンドを実行している最中に、操作している要素が「デッド」になっている可能性があります。この状況に対処するには、次のことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="c0b6f380fda038fbcafdd75cab9a5d02d486aa59" translate="yes" xml:space="preserve">
          <source>In most cases they will be the same, but they could be different if you have installed a different version of the npm package and for some reason could not install the matching binary.</source>
          <target state="translated">ほとんどの場合は同じですが、異なるバージョンの npm パッケージをインストールしていて、何らかの理由で一致するバイナリをインストールできなかった場合は、異なるバイナリになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="00c6f6264b87e2dbd6e00057ddc1337aac8cff3a" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;code&gt;.and()&lt;/code&gt; yields the same subject it was given from the previous command.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;.and()&lt;/code&gt; は、前のコマンドから与えられたものと同じサブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="55903538ca91ab3f5216aa568a05e5bdbeb4127d" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;code&gt;.should()&lt;/code&gt; yields the same subject it was given from the previous command.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;.should()&lt;/code&gt; は、前のコマンドから与えられたものと同じサブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="89b0743460f4cc378c0dc73810f513fdeb375908" translate="yes" xml:space="preserve">
          <source>In most cases, it&amp;rsquo;s easier to use &lt;a href=&quot;tick&quot;&gt;&lt;code&gt;cy.tick()&lt;/code&gt;&lt;/a&gt; to move time, but you can also use the &lt;code&gt;clock&lt;/code&gt; object yielded by &lt;code&gt;cy.clock()&lt;/code&gt;.</source>
          <target state="translated">ほとんどの場合、時間を移動するために&lt;a href=&quot;tick&quot;&gt; &lt;code&gt;cy.tick()&lt;/code&gt; &lt;/a&gt;を使用する方が簡単ですが、 &lt;code&gt;cy.clock()&lt;/code&gt; によって生成された &lt;code&gt;clock&lt;/code&gt; オブジェクトを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f076236ad2ec6acc7d572774df0df507bc59afc9" translate="yes" xml:space="preserve">
          <source>In order for the &lt;code&gt;@cypress/code-coverage&lt;/code&gt; plugin to know that it should request the back end coverage, add the new endpoint to the &lt;code&gt;cypress.json&lt;/code&gt; environment settings under &lt;code&gt;env.codeCoverage.url&lt;/code&gt; key. For example, if the application back end is running at port 3000 and we are using the default &amp;ldquo;GET /&lt;strong&gt;coverage&lt;/strong&gt;&amp;ldquo; endpoint, set the following:</source>
          <target state="translated">ためには &lt;code&gt;@cypress/code-coverage&lt;/code&gt; それが新しいエンドポイントを追加し、バックエンドのカバレッジを要求すべきであることを知っているプラグイン &lt;code&gt;cypress.json&lt;/code&gt; の下の環境設定 &lt;code&gt;env.codeCoverage.url&lt;/code&gt; のキー。たとえば、アプリケーションのバックエンドがポート3000で実行されていて、デフォルトの「GET / &lt;strong&gt;カバレッジ&lt;/strong&gt;」エンドポイントを使用している場合は、次のように設定します。</target>
        </trans-unit>
        <trans-unit id="baf3bf60042422bbe31cf06d5cda76bbd9dd6c4e" translate="yes" xml:space="preserve">
          <source>In order to properly configure your proxy configuration, it can be helpful to know how to view currently set environment variables, unset unwanted environment variables, and set environment variables depending on your operating system.</source>
          <target state="translated">プロキシの設定を適切に設定するためには、現在設定されている環境変数の表示方法、不要な環境変数の設定解除方法、オペレーティングシステムに応じた環境変数の設定方法を知っておくと便利です。</target>
        </trans-unit>
        <trans-unit id="58b3c0815dffd24ae8198b86de21463a624f1b5d" translate="yes" xml:space="preserve">
          <source>In order to run in parallel mode each machine must send identical environment parameters such as:</source>
          <target state="translated">パラレルモードで実行するためには、各マシンは以下のような同一の環境パラメータを送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="960ecf2a8bb32c6c051d1950abd6d2c10ef9886c" translate="yes" xml:space="preserve">
          <source>In order to use either of these parameters a &lt;code&gt;ciBuildId&lt;/code&gt; must be determined.</source>
          <target state="translated">これらのパラメーターのいずれかを使用するには、 &lt;code&gt;ciBuildId&lt;/code&gt; を決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="757fbb0c7658d315aa68d0d75d1e33fe4e732269" translate="yes" xml:space="preserve">
          <source>In other words, &lt;code&gt;cy.request()&lt;/code&gt; transparently performs all of the underlying functions as if it came from the browser.</source>
          <target state="translated">言い換えると、 &lt;code&gt;cy.request()&lt;/code&gt; は、ブラウザから来たかのように、すべての基本的な機能を透過的に実行します。</target>
        </trans-unit>
        <trans-unit id="b445cba6faffc900548081af28b090a31c4d2a28" translate="yes" xml:space="preserve">
          <source>In other words, Cypress will look inside of the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; containing &amp;ldquo;Delete User&amp;rdquo; for the content: &amp;ldquo;Yes, Delete!&amp;rdquo;, which is not what we intended.</source>
          <target state="translated">言い換えると、サイプレスは、「ユーザーの削除」を含む &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 内でコンテンツ「Yes、Delete！」を探しますが、これは意図したものではありません。</target>
        </trans-unit>
        <trans-unit id="c7fd92ad95f41e3f9a80069cdc87e37caf3899b0" translate="yes" xml:space="preserve">
          <source>In other words, based on the commands and the events happening, Cypress automatically alters its expected timeouts to match web application behavior.</source>
          <target state="translated">言い換えれば、Cypress は、コマンドと発生したイベントに基づいて、予想されるタイムアウトをウェブアプリケーションの動作に合わせて自動的に変更します。</target>
        </trans-unit>
        <trans-unit id="dd08023cd2b43573ac20a805bf980289cfe9cd99" translate="yes" xml:space="preserve">
          <source>In other words, what&amp;rsquo;s the difference between:</source>
          <target state="translated">つまり、次の違いは何ですか。</target>
        </trans-unit>
        <trans-unit id="9f20db83fc921929320420426f7f2eb3f45eba78" translate="yes" xml:space="preserve">
          <source>In other words, you can have confidence your server is sending the correct data in the correct structure to your client to consume. It is a good idea to have &lt;em&gt;end-to-end&lt;/em&gt; tests around your application&amp;rsquo;s &lt;em&gt;critical paths&lt;/em&gt;. These typically include user login, signup, or other critical paths such as billing.</source>
          <target state="translated">つまり、サーバーが正しい構造の正しいデータをクライアントに送信して消費することを確信できます。アプリケーションの&lt;em&gt;クリティカルパスに関する&lt;/em&gt;&lt;em&gt;エンドツーエンドの&lt;/em&gt;テストを行うことをお勧めし&lt;em&gt;ます&lt;/em&gt;。これらには通常、ユーザーログイン、サインアップ、または請求などのその他の重要なパスが含まれます。</target>
        </trans-unit>
        <trans-unit id="5f074992d34b093b8250574c6e893a7e33326ae2" translate="yes" xml:space="preserve">
          <source>In other words, you cannot do conditional testing safely if you want your tests to run 100% consistently.</source>
          <target state="translated">言い換えれば、テストを100%一貫して実行させたい場合、条件付きテストを安全に実行することはできません。</target>
        </trans-unit>
        <trans-unit id="e171c64eb19d826206200e5d26a2b563c2afe04a" translate="yes" xml:space="preserve">
          <source>In other words, you cannot get a correct visual representation of what Cypress &amp;ldquo;saw&amp;rdquo; when looking at a previous snapshot.</source>
          <target state="translated">つまり、以前のスナップショットを見たときにサイプレスが「見た」ものを正確に視覚的に表現することはできません。</target>
        </trans-unit>
        <trans-unit id="92669c73359bc8943897aa378ff69c32cbfdada6" translate="yes" xml:space="preserve">
          <source>In our case it would re-issue the commands: &lt;code&gt;cy.get('#todos li').first()&lt;/code&gt;. Everything just works because the new &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; is found.</source>
          <target state="translated">今回の場合、コマンド &lt;code&gt;cy.get('#todos li').first()&lt;/code&gt; を再発行します。新しい &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; が見つかったので、すべてがうまくいきます。</target>
        </trans-unit>
        <trans-unit id="26178a5fe7b914d6ed00a2f239b56df67d688cb8" translate="yes" xml:space="preserve">
          <source>In our example above we can assert about the request object to verify that it sent data as a query string in the URL. Although we&amp;rsquo;re mocking the response, we can still verify that our application sends the correct request.</source>
          <target state="translated">上記の例では、リクエストオブジェクトについてアサートして、URL内のクエリ文字列としてデータを送信したことを確認できます。応答をモックしていますが、アプリケーションが正しいリクエストを送信していることを確認できます。</target>
        </trans-unit>
        <trans-unit id="fc66356f8684948999e9b56da8c86da2d45fdde7" translate="yes" xml:space="preserve">
          <source>In our example above, we added an assertion to the display of the search results.</source>
          <target state="translated">上記の例では、検索結果の表示にアサーションを追加しました。</target>
        </trans-unit>
        <trans-unit id="cbd09423e8d8b6b60544024b0180eeb79623cdfd" translate="yes" xml:space="preserve">
          <source>In real promises it&amp;rsquo;s very easy to &amp;lsquo;lose&amp;rsquo; a nested Promise if you don&amp;rsquo;t return it or chain it correctly.</source>
          <target state="translated">実際のプロミスでは、ネストされたプロミスを返さなかったり、正しくチェーンしないと、「失う」ことは非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="fe475bc5771e4e48a486de0206a21291a10d5ba0" translate="yes" xml:space="preserve">
          <source>In short: each Test Runner sends a list of the spec files to the Dashboard Service, and the service sends back one spec at a time to each Test Runner to run.</source>
          <target state="translated">要するに、各テスト ランナーはスペックファイルのリストをダッシュボード サービスに送り、サービスは各テスト ランナーに一度に1つのスペックを送り返して実行します。</target>
        </trans-unit>
        <trans-unit id="b2702e8c706482bb57ea15ead38c09b0c3cc3468" translate="yes" xml:space="preserve">
          <source>In summary, &lt;code&gt;{ force: true }&lt;/code&gt; skips the checks, and it will always fire the event at the desired element.</source>
          <target state="translated">要約すると、 &lt;code&gt;{ force: true }&lt;/code&gt; はチェックをスキップし、常に目的の要素でイベントを発生させます。</target>
        </trans-unit>
        <trans-unit id="5b128d58ca001409e86451f0c96ce0bae6522382" translate="yes" xml:space="preserve">
          <source>In test file</source>
          <target state="translated">テストファイルでは</target>
        </trans-unit>
        <trans-unit id="ddbfcf2f900b721463e0197d2741c0c7e30a1d9b" translate="yes" xml:space="preserve">
          <source>In that case, use the &lt;code&gt;eventConstructor&lt;/code&gt; option.</source>
          <target state="translated">その場合は、 &lt;code&gt;eventConstructor&lt;/code&gt; オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="d7d47f109594cd38d016e5a421f2ceca2de108aa" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../guides/command-line&quot;&gt;Cypress CLI tool&lt;/a&gt; package version &lt;code&gt;0.11.1&lt;/code&gt;, you can now pass the &lt;code&gt;--spec&lt;/code&gt; option to &lt;code&gt;cypress ci&lt;/code&gt;. This enables you to run a specific spec file as opposed to all tests. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/161&quot;&gt;#161&lt;/a&gt;.</source>
          <target state="translated">では&lt;a href=&quot;../guides/command-line&quot;&gt;サイプレスCLIツール&lt;/a&gt;パッケージのバージョン &lt;code&gt;0.11.1&lt;/code&gt; 、あなたは今渡すことができ &lt;code&gt;--spec&lt;/code&gt; にオプション &lt;code&gt;cypress ci&lt;/code&gt; 。これにより、すべてのテストではなく、特定のスペックファイルを実行できます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/161&quot;&gt;＃161を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="e548e59ef9c1834daff6987fa3dae2477d409463" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;task&lt;/code&gt; plugin event, the command will fail if &lt;code&gt;undefined&lt;/code&gt; is returned. This helps catch typos or cases where the task event is not handled.</source>
          <target state="translated">では &lt;code&gt;task&lt;/code&gt; 場合は、プラグインのイベント、コマンドは失敗します &lt;code&gt;undefined&lt;/code&gt; 返されます。これにより、タイプミスや、タスクイベントが処理されないケースを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="f454795faa20c2cbbedb4921ca14516cef861e0f" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;best&lt;/strong&gt; case scenario, we have wasted at LEAST 4 seconds waiting on the &lt;code&gt;&amp;lt;#wizard&amp;gt;&lt;/code&gt; element to possibly exist before we errored and continued on.</source>
          <target state="translated">で&lt;strong&gt;最良の&lt;/strong&gt;ケースのシナリオでは、我々は上で待機している、少なくとも4秒無駄にしている &lt;code&gt;&amp;lt;#wizard&amp;gt;&lt;/code&gt; 私たちはエラーが発生したとに続く前におそらく存在する要素を。</target>
        </trans-unit>
        <trans-unit id="c6ddf3f2715bb8b202d71d3c892e47fa1bdbea66" translate="yes" xml:space="preserve">
          <source>In the above examples, the subject was an object, but &lt;code&gt;cy.invoke&lt;/code&gt; also works on arrays and allows using numerical index to pick a function to run.</source>
          <target state="translated">上記の例では、サブジェクトはオブジェクトでしたが、 &lt;code&gt;cy.invoke&lt;/code&gt; は配列でも機能し、数値インデックスを使用して実行する関数を選択できます。</target>
        </trans-unit>
        <trans-unit id="edd2b868139cae76a520ce3fbf3e663f3cea5e1c" translate="yes" xml:space="preserve">
          <source>In the case where you &lt;strong&gt;are&lt;/strong&gt; trying to use the DOM to do conditional testing, you can utilize the ability to synchronously query for elements in Cypress to create control flow.</source>
          <target state="translated">DOMを使用して条件付きテストを実行しようとして&lt;strong&gt;いる&lt;/strong&gt;場合、サイプレスの要素を同期的にクエリする機能を利用して、制御フローを作成できます。</target>
        </trans-unit>
        <trans-unit id="af8e46f6692be60a06f94bec5c36c9a457f0ab0e" translate="yes" xml:space="preserve">
          <source>In the case where you cannot control it, you can still conditionally dismiss it &lt;strong&gt;if&lt;/strong&gt; you know whether it is going to be shown.</source>
          <target state="translated">制御できない場合でも、表示されるかどうかがわかって&lt;strong&gt;いれば、&lt;/strong&gt;条件付きで非表示にすることが&lt;strong&gt;でき&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b780dbd10d62f32c288dc68d699654e289fb3be5" translate="yes" xml:space="preserve">
          <source>In the corresponding Application Preview below, you can see &lt;code&gt;https://example.cypress.io&lt;/code&gt; is being displayed in the righthand side. Not only is the application visible, but it is fully interactable. You can open your developer tools to inspect elements as you would your normal application. The DOM is completely available for debugging.</source>
          <target state="translated">以下の対応するアプリケーションプレビューでは、 &lt;code&gt;https://example.cypress.io&lt;/code&gt; //example.cypress.ioが右側に表示されています。アプリケーションが表示されるだけでなく、完全に対話可能です。開発者ツールを開いて、通常のアプリケーションと同じように要素を検査できます。DOMは完全にデバッグに使用できます。</target>
        </trans-unit>
        <trans-unit id="724f36d11e3292b6f98fd52ad540c1e33ae08a1a" translate="yes" xml:space="preserve">
          <source>In the event you did not read a word above and skipped down here, we will reiterate it one more time:</source>
          <target state="translated">上の言葉を読まずに飛ばしてしまった場合は、ここでもう一度言い直します。</target>
        </trans-unit>
        <trans-unit id="1e8a71e8ca92d8291e8879ff3d151c47acc69ff5" translate="yes" xml:space="preserve">
          <source>In the example above, a lowercase &lt;code&gt;a&lt;/code&gt; will be typed, because that&amp;rsquo;s the literal character specified. To type a capital &lt;code&gt;A&lt;/code&gt;, you can use &lt;code&gt;.type('{shift}A')&lt;/code&gt; (or &lt;code&gt;.type('A')&lt;/code&gt; if you don&amp;rsquo;t care about the &lt;code&gt;shiftKey&lt;/code&gt; property on any key events).</source>
          <target state="translated">上記の例では、小文字の &lt;code&gt;a&lt;/code&gt; が入力されます。これは、指定されたリテラル文字だからです。資本型に &lt;code&gt;A&lt;/code&gt; を、あなたは使用することができます &lt;code&gt;.type('{shift}A')&lt;/code&gt; （または &lt;code&gt;.type('A')&lt;/code&gt; 使用すると、気にしない場合 &lt;code&gt;shiftKey&lt;/code&gt; のいずれかのキーイベントのプロパティ）。</target>
        </trans-unit>
        <trans-unit id="dbc64ac6d10e528c5dd0d59f366d067fbeecd5c2" translate="yes" xml:space="preserve">
          <source>In the example above, the &lt;code&gt;cy:run&lt;/code&gt; command will only be executed when the URL &lt;code&gt;http://localhost:3030&lt;/code&gt; responds with an HTTP status code of 200. The server will also shut down when the tests complete.</source>
          <target state="translated">上記の例では、 &lt;code&gt;cy:run&lt;/code&gt; コマンドは、URL &lt;code&gt;http://localhost:3030&lt;/code&gt; が HTTPステータスコード200で応答した場合にのみ実行されます。サーバーは、テストが完了するとシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="36aa59bac872c548ec5c4844f5228652bcec4f87" translate="yes" xml:space="preserve">
          <source>In the example below, we forget to return the &lt;code&gt;Promise&lt;/code&gt; in our test. This means the test passes synchronously but our &lt;code&gt;Promise&lt;/code&gt; resolves in the next test.</source>
          <target state="translated">以下の例では、テストで &lt;code&gt;Promise&lt;/code&gt; を返すのを忘れています。つまり、テストは同期的にパスしますが、 &lt;code&gt;Promise&lt;/code&gt; は次のテストで解決します。</target>
        </trans-unit>
        <trans-unit id="4d34ae3c0b5a56416754aa0ee709bc378be03638" translate="yes" xml:space="preserve">
          <source>In the example below, we use &lt;code&gt;.invoke()&lt;/code&gt; to force a hidden div to be &lt;code&gt;'display: block'&lt;/code&gt; so we can interact with its children elements.</source>
          <target state="translated">以下の例では、 &lt;code&gt;.invoke()&lt;/code&gt; を使用して、非表示のdivを強制的に &lt;code&gt;'display: block'&lt;/code&gt; し、その子要素と対話できるようにします。</target>
        </trans-unit>
        <trans-unit id="f27417c0747c77a446165a6754921ffe06e5f8bc" translate="yes" xml:space="preserve">
          <source>In the example below, we wrote the following code in our test file:</source>
          <target state="translated">以下の例では、テストファイルに以下のようなコードを書きました。</target>
        </trans-unit>
        <trans-unit id="2c3fd6d848f681a8962c6e80e0b5e298a6910b03" translate="yes" xml:space="preserve">
          <source>In the failing test, the first label was indeed found correctly:</source>
          <target state="translated">不合格のテストでは、確かに最初のラベルは正しく発見されました。</target>
        </trans-unit>
        <trans-unit id="dc4f496da8638b96d4ce34bbfb37866667239e3a" translate="yes" xml:space="preserve">
          <source>In the future we &lt;strong&gt;do&lt;/strong&gt; have plans to release back end adapters for other languages.</source>
          <target state="translated">将来的に&lt;strong&gt;は&lt;/strong&gt;、他の言語用のバックエンドアダプターをリリースする計画があります。</target>
        </trans-unit>
        <trans-unit id="9f17a7e89132ce690ba65f235d11f373c553da68" translate="yes" xml:space="preserve">
          <source>In the meantime, you can use the experimental &lt;a href=&quot;https://github.com/Bkucera/cypress-plugin-tab&quot;&gt;cypress-plugin-tab&lt;/a&gt; and can thumbs up &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/299&quot;&gt;this issue&lt;/a&gt;.</source>
          <target state="translated">それまでは、実験的な&lt;a href=&quot;https://github.com/Bkucera/cypress-plugin-tab&quot;&gt;cypress-plugin-tab&lt;/a&gt;を使用して、&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/299&quot;&gt;この問題を解決&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="2aff2b7ccdcec5e32c4a2e7b02e2db1586ac8631" translate="yes" xml:space="preserve">
          <source>In the plugins file, you can filter the list of browsers passed inside the &lt;code&gt;config&lt;/code&gt; object and return the list of browsers you want available for selection during &lt;code&gt;cypress open&lt;/code&gt;.</source>
          <target state="translated">プラグインファイルでは、 &lt;code&gt;config&lt;/code&gt; オブジェクト内で渡されるブラウザーのリストをフィルター処理し、 &lt;code&gt;cypress open&lt;/code&gt; いるときに選択できるブラウザーのリストを返すことができます。</target>
        </trans-unit>
        <trans-unit id="6ec7dc43a85ae43215bb3280a0f9cc20341b1b44" translate="yes" xml:space="preserve">
          <source>In the reporter, suites that are pending or contain only pending tests have the blue &amp;ldquo;pending&amp;rdquo; indicator on the left instead of the white &amp;ldquo;processing&amp;rdquo; indicator.</source>
          <target state="translated">レポーターでは、保留中または保留中のテストのみを含むスイートの左側に、白い「処理中」インジケーターの代わりに青い「保留中」インジケーターがあります。</target>
        </trans-unit>
        <trans-unit id="a69eccd9bb40f73f185ff0c943557c487d55274e" translate="yes" xml:space="preserve">
          <source>In this example let&amp;rsquo;s assume you visit your website and the content will be different based on which A/B campaign your server decides to send. Perhaps it is based on geo-location, IP address, time of day, locale, or other factors that are difficult to control. How can you write tests in this manner?</source>
          <target state="translated">この例では、Webサイトにアクセスし、サーバーが送信することにしたA / Bキャンペーンに基づいてコンテンツが異なると仮定します。おそらく、地理的位置、IPアドレス、時刻、ロケール、または制御が困難なその他の要因に基づいています。この方法でテストを作成するにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="4ea8c3945e2f52e1de5bdf1d7b536abba51eb026" translate="yes" xml:space="preserve">
          <source>In this example we have a little text input field and we invoke an async action which will disable this input field.</source>
          <target state="translated">この例では、小さなテキスト入力フィールドがあり、この入力フィールドを無効にする非同期アクションを呼び出しています。</target>
        </trans-unit>
        <trans-unit id="654e84b325996c6895471a04a6f7915066a8ecd3" translate="yes" xml:space="preserve">
          <source>In this example we use &lt;a href=&quot;and&quot;&gt;&lt;code&gt;.and()&lt;/code&gt;&lt;/a&gt; which is identical to &lt;code&gt;.should()&lt;/code&gt;.</source>
          <target state="translated">この例では、使用&lt;a href=&quot;and&quot;&gt; &lt;code&gt;.and()&lt;/code&gt; &lt;/a&gt;と同じである &lt;code&gt;.should()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e416902b989d2600c051c0e9f8ab3e2f63b31266" translate="yes" xml:space="preserve">
          <source>In this example, a single machine runs a job named &lt;code&gt;1x-electron&lt;/code&gt;, defined in the project&amp;rsquo;s &lt;a href=&quot;https://github.com/cypress-io/cypress-example-kitchensink/blob/master/circle.yml&quot;&gt;circle.yml&lt;/a&gt; file. Cypress runs all 19 spec files one by one alphabetically in this job. It takes &lt;strong&gt;1:51&lt;/strong&gt; to complete all of the tests.</source>
          <target state="translated">この例では、1台のマシンがプロジェクトの&lt;a href=&quot;https://github.com/cypress-io/cypress-example-kitchensink/blob/master/circle.yml&quot;&gt;circle.yml&lt;/a&gt;ファイルで定義された &lt;code&gt;1x-electron&lt;/code&gt; という名前のジョブを実行します。サイプレスは、このジョブで19個のスペックファイルすべてをアルファベット順に1つずつ実行します。すべてのテストを完了するには、&lt;strong&gt;1：51&lt;/strong&gt;かかります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2643a67dae18365b8b6d2a95e30a99ef71ff487c" translate="yes" xml:space="preserve">
          <source>In this example, imagine there is a clock in your app showing the current time. This can cause screenshots to be non-deterministic, which could create false negatives when screenshot diffing. You can use &lt;code&gt;onBeforeScreenshot&lt;/code&gt; to hide the clock and then show it again with &lt;code&gt;onAfterScreenshot&lt;/code&gt;.</source>
          <target state="translated">この例では、アプリに現在の時刻を示す時計があるとします。これにより、スクリーンショットが非決定的になる可能性があり、スクリーンショットの比較時に偽陰性が発生する可能性があります。 &lt;code&gt;onBeforeScreenshot&lt;/code&gt; を使用して時計を非表示にしてから、 &lt;code&gt;onAfterScreenshot&lt;/code&gt; で再び表示できます。</target>
        </trans-unit>
        <trans-unit id="a07dd6b5d361acae3ffa1068fce4a9b7a33bb16e" translate="yes" xml:space="preserve">
          <source>In this example, let&amp;rsquo;s imagine you are running a bunch of tests and each time you load your application, it may show a &amp;ldquo;Welcome Wizard&amp;rdquo; modal.</source>
          <target state="translated">この例では、一連のテストを実行していて、アプリケーションをロードするたびに、「ようこそウィザード」モーダルが表示される場合があるとします。</target>
        </trans-unit>
        <trans-unit id="fafa4f19520320378cadbfdf56dbbc2434c0bc91" translate="yes" xml:space="preserve">
          <source>In this example, on first login our server sends us back a session cookie.</source>
          <target state="translated">この例では、最初のログイン時にサーバーがセッションクッキーを送り返してきます。</target>
        </trans-unit>
        <trans-unit id="7210a6e4d1ffd24e18e8d24883b3b00e3ced26ae" translate="yes" xml:space="preserve">
          <source>In this example, on first login our server sends us back a session cookie. After invoking &lt;code&gt;cy.clearCookies()&lt;/code&gt; this clears the session cookie, and upon navigating to an unauthorized page, our server should have redirected us back to login.</source>
          <target state="translated">この例では、最初のログイン時にサーバーからセッションCookieが返されます。 &lt;code&gt;cy.clearCookies()&lt;/code&gt; を呼び出した後、これはセッションCookieをクリアし、無許可のページに移動すると、サーバーはログインにリダイレクトするはずです。</target>
        </trans-unit>
        <trans-unit id="85c42c93845e2fef29497af7ebc2d6d884e3e475" translate="yes" xml:space="preserve">
          <source>In this example, on first login, our server sends us back a session cookie.</source>
          <target state="translated">この例では、最初のログイン時にサーバーがセッションクッキーを送り返してきます。</target>
        </trans-unit>
        <trans-unit id="799dbbc93386c9ff6001443b5847cefadcb8013d" translate="yes" xml:space="preserve">
          <source>In this example, on first login, our server sends us back a session cookie. After invoking &lt;code&gt;cy.clearCookie('session_id')&lt;/code&gt;, this clears the session cookie. Then upon navigating to an unauthorized page, we asset that our server has redirected us back to login.</source>
          <target state="translated">この例では、最初のログイン時に、サーバーからセッションCookieが返されます。 &lt;code&gt;cy.clearCookie('session_id')&lt;/code&gt; を呼び出した後、これはセッションCookieをクリアします。次に、許可されていないページに移動すると、サーバーがログインにリダイレクトして戻ったことがわかります。</target>
        </trans-unit>
        <trans-unit id="7297a60e52bc9bb948168460d36d99e4b7589f7e" translate="yes" xml:space="preserve">
          <source>In this example, our matching requests will be delayed 1000ms and have a status of &lt;code&gt;422&lt;/code&gt;, but its &lt;code&gt;response&lt;/code&gt; will be what was set in &lt;a href=&quot;route&quot;&gt;&lt;code&gt;cy.route()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この例では、一致するリクエストは1000ms遅延し、ステータスは &lt;code&gt;422&lt;/code&gt; になりますが、その &lt;code&gt;response&lt;/code&gt; は&lt;a href=&quot;route&quot;&gt; &lt;code&gt;cy.route()&lt;/code&gt; で&lt;/a&gt;設定されたものになります。</target>
        </trans-unit>
        <trans-unit id="bf08c406fc81bfa00e9fdfaffe9c326c6d728148" translate="yes" xml:space="preserve">
          <source>In this example, there are many possible sources of failure. In most testing tools, if our request failed to go out, we would normally only ever get an error once we attempt to find the results in the DOM and see that there is no matching element. This is problematic because it&amp;rsquo;s unknown &lt;em&gt;why&lt;/em&gt; the results failed to be displayed. Was there a problem with our rendering code? Did we modify or change an attribute such as an &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; on an element? Perhaps our server sent us different Book items.</source>
          <target state="translated">この例では、多くの失敗の原因が考えられます。ほとんどのテストツールでは、リクエストが送信されなかった場合、通常、DOMで結果を見つけて一致する要素がないことを確認して初めてエラーが発生します。結果が表示されなかった&lt;em&gt;理由&lt;/em&gt;は不明であるため、これは問題です。レンダリングコードに問題がありましたか？要素の &lt;code&gt;id&lt;/code&gt; や &lt;code&gt;class&lt;/code&gt; などの属性を変更または変更しましたか？おそらく私たちのサーバーが私たちに異なる本のアイテムを送ったのでしょう。</target>
        </trans-unit>
        <trans-unit id="26c579e70948f3a1f956cb155892f61465c6d265" translate="yes" xml:space="preserve">
          <source>In this guide we will lay out what some of the trade-offs are - and specifically how you can work around them.</source>
          <target state="translated">このガイドでは、トレードオフとは何か、具体的にどのようにしてトレードオフを回避することができるのかを説明します。</target>
        </trans-unit>
        <trans-unit id="a3303302589adc4ad15584529c87e66119817327" translate="yes" xml:space="preserve">
          <source>In this situation, not only did we wait a long period of time, but when the &lt;code&gt;&amp;lt;#wizard&amp;gt;&lt;/code&gt; element was eventually shown it&amp;rsquo;s likely caused an error downstream on other commands.</source>
          <target state="translated">この状況では、長時間待機しただけでなく、 &lt;code&gt;&amp;lt;#wizard&amp;gt;&lt;/code&gt; 要素が最終的に表示されたときに、他のコマンドでダウンストリームエラーが発生した可能性があります。</target>
        </trans-unit>
        <trans-unit id="a4202b0f92e36d449c7b45c72de6f38215f13650" translate="yes" xml:space="preserve">
          <source>In this situation, you want to close the wizard when it is present and ignore it if it is not.</source>
          <target state="translated">このような状況では、ウィザードが存在する場合は閉じ、存在しない場合は無視したいところです。</target>
        </trans-unit>
        <trans-unit id="3c09ca3ad405df1d96dace4aa01304bfb583b1eb" translate="yes" xml:space="preserve">
          <source>In version &lt;a href=&quot;changelog&quot;&gt;&lt;code&gt;0.20.0&lt;/code&gt;&lt;/a&gt;, we removed the commands for adding custom commands and replaced them with, what we believe to be, a simpler interface.</source>
          <target state="translated">バージョン&lt;a href=&quot;changelog&quot;&gt; &lt;code&gt;0.20.0&lt;/code&gt; &lt;/a&gt;では、カスタムコマンドを追加するためのコマンドを削除し、よりシンプルなインターフェイスに置き換えました。</target>
        </trans-unit>
        <trans-unit id="674a03f401da3ae13913196cc8830c75d7101199" translate="yes" xml:space="preserve">
          <source>In versions before &lt;a href=&quot;changelog&quot;&gt;&lt;code&gt;0.20.0&lt;/code&gt;&lt;/a&gt; of Cypress we automatically detected this and forced the &lt;code&gt;cy&lt;/code&gt; commands to be returned. To make things less magical and clearer, we are now throwing an error.</source>
          <target state="translated">サイプレスの&lt;a href=&quot;changelog&quot;&gt; &lt;code&gt;0.20.0&lt;/code&gt; &lt;/a&gt;より前のバージョンでは、これを自動的に検出し、 &lt;code&gt;cy&lt;/code&gt; コマンドを強制的に返しました。不思議でわかりにくいものにするために、エラーをスローしています。</target>
        </trans-unit>
        <trans-unit id="dd7419a89ff7022ec510bff41c55069b8119c312" translate="yes" xml:space="preserve">
          <source>In very rare cases you might want to install the pre-release version of Cypress to verify a fix from the &lt;a href=&quot;https://github.com/cypress-io/cypress/commits/develop&quot;&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/a&gt; branch, that has not been published yet.</source>
          <target state="translated">非常にまれなケースですが、サイプレスのプレリリースバージョンをインストールして、まだ公開されていない&lt;a href=&quot;https://github.com/cypress-io/cypress/commits/develop&quot;&gt; &lt;code&gt;develop&lt;/code&gt; &lt;/a&gt;ブランチからの修正を確認することができます。</target>
        </trans-unit>
        <trans-unit id="0163ac93d42d63bd37548aa08e795fe9630f509a" translate="yes" xml:space="preserve">
          <source>In your application code, you set &lt;code&gt;cookies&lt;/code&gt; and store a session on the browser. Now let&amp;rsquo;s imagine you have a single &lt;code&gt;insecure&lt;/code&gt; link (or JavaScript redirect) in your application code.</source>
          <target state="translated">アプリケーションコードで、 &lt;code&gt;cookies&lt;/code&gt; を設定し、ブラウザにセッションを保存します。次に、アプリケーションコードに &lt;code&gt;insecure&lt;/code&gt; リンク（またはJavaScriptリダイレクト）が1つあるとしましょう。</target>
        </trans-unit>
        <trans-unit id="50a3e186589c6f6b457bc1a4566cf2eda5511e90" translate="yes" xml:space="preserve">
          <source>In your server, insert another middleware from &lt;code&gt;@cypress/code-coverage&lt;/code&gt;. If you use an Express server, include &lt;code&gt;middleware/express&lt;/code&gt;:</source>
          <target state="translated">サーバーに、 &lt;code&gt;@cypress/code-coverage&lt;/code&gt; から別のミドルウェアを挿入します。Expressサーバーを使用する場合は、 &lt;code&gt;middleware/express&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="9b70ff70ff7c5d78a34d4e32b3bf2a2948bd6297" translate="yes" xml:space="preserve">
          <source>Include the port other than &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;80&lt;/code&gt; と &lt;code&gt;443&lt;/code&gt; 以外のポートを含める</target>
        </trans-unit>
        <trans-unit id="7ff904b2e78fa3e369d1cc645a00ef32f2b6d10b" translate="yes" xml:space="preserve">
          <source>Incorrect usage of --ci-build-id flag</source>
          <target state="translated">CI-BUILD-ID フラグの使用法が間違っていた。</target>
        </trans-unit>
        <trans-unit id="eed10255d07b47a63a72e87b88c1d7f2895705ab" translate="yes" xml:space="preserve">
          <source>Incorrect usage of &lt;code&gt;--ci-build-id&lt;/code&gt; flag</source>
          <target state="translated">&lt;code&gt;--ci-build-id&lt;/code&gt; フラグの誤った使用</target>
        </trans-unit>
        <trans-unit id="2934b39a8c2dae9682547a1c6726dd6892991929" translate="yes" xml:space="preserve">
          <source>Incorrectly handling query params on redirects fixed.</source>
          <target state="translated">リダイレクトでのクエリパラメータの扱いが不適切だったのを修正した。</target>
        </trans-unit>
        <trans-unit id="7f73e5c2402c202a68a0e14f165f5e8af1d21f98" translate="yes" xml:space="preserve">
          <source>Increased &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; timeout from &lt;strong&gt;15s&lt;/strong&gt; to &lt;strong&gt;20s&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; の&lt;/a&gt;タイムアウトを&lt;strong&gt;15秒&lt;/strong&gt;から&lt;strong&gt;20秒に&lt;/strong&gt;増やしました。</target>
        </trans-unit>
        <trans-unit id="73b2ebc8af102151cec09c774a4534a9a37f10b7" translate="yes" xml:space="preserve">
          <source>Increased &lt;code&gt;visitTimeout&lt;/code&gt; from &lt;code&gt;20s&lt;/code&gt; to &lt;code&gt;30s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;visitTimeout&lt;/code&gt; が &lt;code&gt;20s&lt;/code&gt; から &lt;code&gt;30s&lt;/code&gt; 秒に増加しました。</target>
        </trans-unit>
        <trans-unit id="60d8ca1d362434d7d992fe5d5e9bf7b5c74aa4be" translate="yes" xml:space="preserve">
          <source>Increased max viewport size to &lt;code&gt;4000&lt;/code&gt;</source>
          <target state="translated">ビューポートの最大サイズを &lt;code&gt;4000&lt;/code&gt; に増やしました</target>
        </trans-unit>
        <trans-unit id="3b4c8073854add7c1e8d30cfbcc5c0e6d772861a" translate="yes" xml:space="preserve">
          <source>Increased timeout for browser to make a connection when running during &lt;code&gt;cypress run&lt;/code&gt; from 10 seconds to 30 seconds.</source>
          <target state="translated">&lt;code&gt;cypress run&lt;/code&gt; 中に実行されたときに接続を確立するためのブラウザーのタイムアウトが10秒から30秒に増加しました。</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="9dc579b03a1575bb8ca231f018fa24b7b9a268c7" translate="yes" xml:space="preserve">
          <source>Index From End</source>
          <target state="translated">インデックス</target>
        </trans-unit>
        <trans-unit id="ff434e2f139c0722f744e0fe3834ea8cc93ed511" translate="yes" xml:space="preserve">
          <source>Index, name of property or name of nested properties (with dot notation) to get.</source>
          <target state="translated">インデックス、取得するプロパティの名前または入れ子になったプロパティの名前(ドット表記)。</target>
        </trans-unit>
        <trans-unit id="d4ee2e4bfdb02384be06a48400b72c41760759b0" translate="yes" xml:space="preserve">
          <source>Indexing the web</source>
          <target state="translated">ウェブのインデックス作成</target>
        </trans-unit>
        <trans-unit id="dc9fedd2d661f73b8ab1a9e196c1bcc8275bbee9" translate="yes" xml:space="preserve">
          <source>Initially you may be tempted to use &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; or use Cypress to traverse to the 3rd party login window.</source>
          <target state="translated">最初は、&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; &lt;/a&gt;を使用するか、サイプレスを使用してサードパーティのログインウィンドウに移動するように誘惑されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="4a8cd3a01c2a7003359df7223ec6ad3c420afb36" translate="yes" xml:space="preserve">
          <source>Injects &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/domain&quot;&gt;&lt;code&gt;document.domain&lt;/code&gt;&lt;/a&gt; into &lt;code&gt;text/html&lt;/code&gt; pages.</source>
          <target state="translated">注入&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/domain&quot;&gt; &lt;code&gt;document.domain&lt;/code&gt; を&lt;/a&gt;へ &lt;code&gt;text/html&lt;/code&gt; ページ。</target>
        </trans-unit>
        <trans-unit id="2097134c11ba44805655781d022efeab896310da" translate="yes" xml:space="preserve">
          <source>Inlined Google Fonts into &lt;code&gt;vendor.css&lt;/code&gt;.</source>
          <target state="translated">Googleフォントを &lt;code&gt;vendor.css&lt;/code&gt; にインライン化しました。</target>
        </trans-unit>
        <trans-unit id="a59f621afdf9fe7451526c2bf4126b406bd45519" translate="yes" xml:space="preserve">
          <source>Input ranges are now more easily testable using the new &lt;a href=&quot;../../api/commands/trigger&quot;&gt;&lt;code&gt;.trigger()&lt;/code&gt;&lt;/a&gt; command. See our &lt;a href=&quot;recipes#Form-Interactions&quot;&gt;new recipe&lt;/a&gt; for details on how. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/287&quot;&gt;#287&lt;/a&gt;.</source>
          <target state="translated">新しい&lt;a href=&quot;../../api/commands/trigger&quot;&gt; &lt;code&gt;.trigger()&lt;/code&gt; &lt;/a&gt;コマンドを使用して、入力範囲をより簡単にテストできるようになりました。方法の詳細については、&lt;a href=&quot;recipes#Form-Interactions&quot;&gt;新しいレシピ&lt;/a&gt;を参照してください。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/287&quot;&gt;＃287を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="65a38d0cf0c91f4dfc5a43b6d5241eda136a85cd" translate="yes" xml:space="preserve">
          <source>Input/Textarea</source>
          <target state="translated">Input/Textarea</target>
        </trans-unit>
        <trans-unit id="f62457422b43396556bf83cc4805844e73d8e90a" translate="yes" xml:space="preserve">
          <source>Insecure Content</source>
          <target state="translated">安全でないコンテンツ</target>
        </trans-unit>
        <trans-unit id="6dd0dc1ea10721e352e9a173ee7ca71cf27090fa" translate="yes" xml:space="preserve">
          <source>Inserts character to the right of the cursor</source>
          <target state="translated">カーソルの右側に文字を挿入</target>
        </trans-unit>
        <trans-unit id="7574261097e865c28a259c681701fd0a35918d87" translate="yes" xml:space="preserve">
          <source>Inside of a callback passed to &lt;code&gt;req.reply()&lt;/code&gt;, you can access the destination server&amp;rsquo;s real response.</source>
          <target state="translated">&lt;code&gt;req.reply()&lt;/code&gt; に渡されるコールバック内で、宛先サーバーの実際の応答にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="815f7d20ba4f5e3c004cb8cbfa36da5dd979b66a" translate="yes" xml:space="preserve">
          <source>Inside of this file, you will export a function. Cypress will call this function, pass you the project&amp;rsquo;s configuration, and enable you to bind to the events exposed.</source>
          <target state="translated">このファイル内で、関数をエクスポートします。サイプレスはこの関数を呼び出し、プロジェクトの構成を渡し、公開されたイベントにバインドできるようにします。</target>
        </trans-unit>
        <trans-unit id="24d6c2f6a92b25dfecd8ca5c21464abceb4d09f6" translate="yes" xml:space="preserve">
          <source>Inside the browser</source>
          <target state="translated">ブラウザの中</target>
        </trans-unit>
        <trans-unit id="7bdc4cee10367f81fa94c2dd050062b1c1da3d71" translate="yes" xml:space="preserve">
          <source>Install a version different than the default npm package.</source>
          <target state="translated">デフォルトのnpmパッケージとは異なるバージョンをインストールします。</target>
        </trans-unit>
        <trans-unit id="c9c1f3821545c8e75ca62658cd68f8d6ebd0eb96" translate="yes" xml:space="preserve">
          <source>Install binary</source>
          <target state="translated">バイナリのインストール</target>
        </trans-unit>
        <trans-unit id="6420671ac39b9dc0aa1e29413441339c84e8453d" translate="yes" xml:space="preserve">
          <source>Install pre-release version</source>
          <target state="translated">プレリリース版のインストール</target>
        </trans-unit>
        <trans-unit id="ac03b5988480f0cf04e149075af86a6e1fe7f84c" translate="yes" xml:space="preserve">
          <source>Install the Cypress GitHub app</source>
          <target state="translated">CypressのGitHubアプリをインストールする</target>
        </trans-unit>
        <trans-unit id="9a539696de966a99368f5d0fe4395d7a76ef9f7b" translate="yes" xml:space="preserve">
          <source>Install the plugin</source>
          <target state="translated">プラグインのインストール</target>
        </trans-unit>
        <trans-unit id="3f3bfafdc36e0eb870cdb18cc9c59efb1ce7f065" translate="yes" xml:space="preserve">
          <source>Install via organization integration settings</source>
          <target state="translated">組織統合の設定でインストール</target>
        </trans-unit>
        <trans-unit id="a7d37c03d6b82b4cf9c24a59b72de2aa85ff8fa1" translate="yes" xml:space="preserve">
          <source>Install via project settings</source>
          <target state="translated">プロジェクト設定からインストール</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="e38432618ce4d39079fc324e614d4d92a2815160" translate="yes" xml:space="preserve">
          <source>Installing</source>
          <target state="translated">Installing</target>
        </trans-unit>
        <trans-unit id="859ed9192b8b065cfabff634c98cfe3e2f2e507a" translate="yes" xml:space="preserve">
          <source>Installing Cypress</source>
          <target state="translated">サイプレスのインストール</target>
        </trans-unit>
        <trans-unit id="4a1047bfa9593c168e832a865502e77d69a31196" translate="yes" xml:space="preserve">
          <source>Installing Cypress via &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://yarnpkg.com/&quot;&gt; &lt;code&gt;yarn&lt;/code&gt; &lt;/a&gt;サイプレスをインストールする：</target>
        </trans-unit>
        <trans-unit id="4fc87b674ce76b66283308c75af1a20c59064192" translate="yes" xml:space="preserve">
          <source>Installing Cypress via &lt;code&gt;npm&lt;/code&gt; is easy:</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; を介したサイプレスのインストールは簡単です：</target>
        </trans-unit>
        <trans-unit id="bad94515f6d136d2603333a9eb3cf4a918bebd46" translate="yes" xml:space="preserve">
          <source>Installing plugins</source>
          <target state="translated">プラグインのインストール</target>
        </trans-unit>
        <trans-unit id="75ee6728c4c28a14541dea084abd70aef23fc383" translate="yes" xml:space="preserve">
          <source>Instantiate a new bluebird promise.</source>
          <target state="translated">新しいブルーバードの約束をインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="1ea2f9a830363440bf8fcb6fb1c6fdcea44f8cb4" translate="yes" xml:space="preserve">
          <source>Instead of hard coding external documentation, we now link everything through a redirection portal. This will prevent any links / documentation from ever breaking due to reorganization or renaming.</source>
          <target state="translated">外部ドキュメントをハードコーディングする代わりに、リダイレクトポータルを介してすべてをリンクします。これにより、再編成や名前の変更によるリンクやドキュメントの破損を防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="ed3418d486f2d3efc9dfa13f1a5241e231595548" translate="yes" xml:space="preserve">
          <source>Instead of hard coding it into your run command like this:</source>
          <target state="translated">このように実行コマンドにハードコーディングする代わりに</target>
        </trans-unit>
        <trans-unit id="1f563a271ac755feeb3fbff53c9077285499286a" translate="yes" xml:space="preserve">
          <source>Instead of hard coding this in your tests:</source>
          <target state="translated">テストでハードコーディングするのではなく</target>
        </trans-unit>
        <trans-unit id="178b11451aece3bb113e51341d1126d93801be03" translate="yes" xml:space="preserve">
          <source>Instead of hardcoding the URL you can use the &lt;code&gt;baseUrl&lt;/code&gt; of the &lt;a href=&quot;../../guides/references/configuration&quot;&gt;Cypress configuration&lt;/a&gt;.</source>
          <target state="translated">URLをハードコーディングする代わりに、&lt;a href=&quot;../../guides/references/configuration&quot;&gt;サイプレス構成の&lt;/a&gt; &lt;code&gt;baseUrl&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="a5ffae783d76ca79da46abc91ce1a00297b625cb" translate="yes" xml:space="preserve">
          <source>Instead of hardcoding the URL you can use the &lt;code&gt;baseUrl&lt;/code&gt; of the &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html&quot;&gt;Cypress configuration&lt;/a&gt;.</source>
          <target state="translated">URLをハードコーディングする代わりに、&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html&quot;&gt;サイプレス構成の&lt;/a&gt; &lt;code&gt;baseUrl&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="2b582649a31b9537e7a392d9367d7850a86e5085" translate="yes" xml:space="preserve">
          <source>Instead of having your test code bypass OAuth, you could also ask your server for help. Perhaps all an OAuth token does is generate a user in your database. Oftentimes OAuth is only useful initially and your server establishes its own session with the client. If that is the case, just use &lt;a href=&quot;../../api/commands/request&quot;&gt;&lt;code&gt;cy.request()&lt;/code&gt;&lt;/a&gt; to get the session directly from your server and bypass the provider altogether.</source>
          <target state="translated">テストコードにOAuthをバイパスさせる代わりに、サーバーに助けを求めることもできます。おそらく、OAuthトークンが行うことは、データベースにユーザーを生成することだけです。多くの場合、OAuthは最初にのみ役立ち、サーバーはクライアントとの独自のセッションを確立します。その場合は、&lt;a href=&quot;../../api/commands/request&quot;&gt; &lt;code&gt;cy.request()&lt;/code&gt; &lt;/a&gt;を使用してサーバーから直接セッションを取得し、プロバイダーを完全にバイパスします。</target>
        </trans-unit>
        <trans-unit id="629bec7aac0e872cbe7d626036314386f3323c28" translate="yes" xml:space="preserve">
          <source>Instead of just executing a system command, you may want more flexibility and could expose a series of routes only when running in a test environment.</source>
          <target state="translated">システムコマンドを実行するだけではなく、もっと柔軟性が欲しいかもしれませんし、テスト環境で実行しているときだけ一連のルートを公開することもできます。</target>
        </trans-unit>
        <trans-unit id="f01e5be95b1bf47441299b767044f92ed41bd546" translate="yes" xml:space="preserve">
          <source>Instead of seeing &lt;code&gt;Script error.&lt;/code&gt; - cross origins script errors are now handled specially and we throw a very long and exciting error explaining what just happened. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/241&quot;&gt;#241&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Script error.&lt;/code&gt; 代わりに。-クロスオリジンスクリプトエラーは特別に処理されるようになり、何が起こったのかを説明する非常に長くエキサイティングなエラーが発生します。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/241&quot;&gt;＃241を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="d18ac78a128a806e1c302d719659a6cc0174ffdf" translate="yes" xml:space="preserve">
          <source>Instead of setting environment variables in a file, you can use plugins to dynamically set them with Node code. This enables you to do things like use &lt;code&gt;fs&lt;/code&gt; and read off configuration values and dynamically change them.</source>
          <target state="translated">ファイルに環境変数を設定する代わりに、プラグインを使用して、ノードコードでそれらを動的に設定できます。これにより、 &lt;code&gt;fs&lt;/code&gt; を使用したり、構成値を読み取ったり、動的に変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="e1ebf20150edf99407e68b3406dd94d76e87f380" translate="yes" xml:space="preserve">
          <source>Instead of using the &lt;code&gt;npx instrument&lt;/code&gt; command, we can use &lt;a href=&quot;https://github.com/istanbuljs/babel-plugin-istanbul&quot;&gt;&lt;code&gt;babel-plugin-istanbul&lt;/code&gt;&lt;/a&gt; to instrument the code as part of its transpilation. Add this plugin to the &lt;code&gt;.babelrc&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;npx instrument&lt;/code&gt; コマンドを使用する代わりに、翻訳の一部としてコードをインストルメント化するために&lt;a href=&quot;https://github.com/istanbuljs/babel-plugin-istanbul&quot;&gt; &lt;code&gt;babel-plugin-istanbul&lt;/code&gt; &lt;/a&gt;を使用できます。このプラグインを &lt;code&gt;.babelrc&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="2998155e2741051ec0a7e752a6f926056b9ba0ea" translate="yes" xml:space="preserve">
          <source>Instead of using the &lt;code&gt;this.*&lt;/code&gt; syntax, there is another way to access aliases.</source>
          <target state="translated">&lt;code&gt;this.*&lt;/code&gt; 構文を使用する代わりに、エイリアスにアクセスする別の方法があります。</target>
        </trans-unit>
        <trans-unit id="ea08e736ffcfed67863099290e6d89016c3fff8b" translate="yes" xml:space="preserve">
          <source>Instead of waiting until commands resolve, commands are immediately inserted with a &lt;code&gt;pending&lt;/code&gt; status.</source>
          <target state="translated">コマンドが解決されるまで待機する代わりに、コマンドは &lt;code&gt;pending&lt;/code&gt; 状態で直ちに挿入されます。</target>
        </trans-unit>
        <trans-unit id="ec3730b710019e0d0b7125d426b50267f140b583" translate="yes" xml:space="preserve">
          <source>Instead of writing a response inline you can automatically connect a response with a &lt;a href=&quot;fixture&quot;&gt;&lt;code&gt;cy.fixture()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">応答をインラインで&lt;a href=&quot;fixture&quot;&gt; &lt;code&gt;cy.fixture()&lt;/code&gt; &lt;/a&gt;代わりに、応答をcy.fixture（）に自動的に接続できます。</target>
        </trans-unit>
        <trans-unit id="e8e54126a8d91a8e59e34800c4f7893c875f3819" translate="yes" xml:space="preserve">
          <source>Instead, adding the &lt;code&gt;data-cy&lt;/code&gt; attribute to the element gives us a targeted selector that&amp;rsquo;s only used for testing.</source>
          <target state="translated">代わりに、 &lt;code&gt;data-cy&lt;/code&gt; 属性を要素に追加すると、テストのみに使用されるターゲットセレクターが提供されます。</target>
        </trans-unit>
        <trans-unit id="af3f0d790b3484834d544ee886d3c75f240f8b1f" translate="yes" xml:space="preserve">
          <source>Instead, all you need to test is that the &lt;code&gt;href&lt;/code&gt; property is correct!</source>
          <target state="translated">代わりに、 &lt;code&gt;href&lt;/code&gt; プロパティが正しいことだけをテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="e28c659f1fc6fb8a50e8a542f95f7c0abd2f3060" translate="yes" xml:space="preserve">
          <source>Instead, use &lt;a href=&quot;then&quot;&gt;&lt;code&gt;cy.then()&lt;/code&gt;&lt;/a&gt; callback to check the value.</source>
          <target state="translated">代わりに、&lt;a href=&quot;then&quot;&gt; &lt;code&gt;cy.then()&lt;/code&gt; &lt;/a&gt;コールバックを使用して値を確認します。</target>
        </trans-unit>
        <trans-unit id="74ef1173d7b9183cda0d76d8d9b9bfb65a5b1d48" translate="yes" xml:space="preserve">
          <source>Instead, you should build a docker container for your project&amp;rsquo;s version of cypress.</source>
          <target state="translated">代わりに、プロジェクトのバージョンのサイプレス用のDockerコンテナーを構築する必要があります。</target>
        </trans-unit>
        <trans-unit id="139273c40f59c240e55fe300580a238e66c7d66c" translate="yes" xml:space="preserve">
          <source>Instrument Panel</source>
          <target state="translated">インストルメントパネル</target>
        </trans-unit>
        <trans-unit id="30cce81e55c85561b3c24a6c6ea38eaef83e25d8" translate="yes" xml:space="preserve">
          <source>Instrumenting code</source>
          <target state="translated">インストルメンテーションコード</target>
        </trans-unit>
        <trans-unit id="3f7f3bf0c28229b845074a2404d80beaf96ac5fc" translate="yes" xml:space="preserve">
          <source>Integrate Cypress into GitHub via &lt;a href=&quot;github-integration#Pull-request-comments&quot;&gt;pull requests&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;github-integration#Pull-request-comments&quot;&gt;プルリクエストを&lt;/a&gt;介してサイプレスをGitHubに統合する</target>
        </trans-unit>
        <trans-unit id="8fefe595d387ac96a5a56e0b9a7d898d1d18a92e" translate="yes" xml:space="preserve">
          <source>Integrate with GitHub</source>
          <target state="translated">GitHubとの統合</target>
        </trans-unit>
        <trans-unit id="ce2d6691d9d9eb7e24fc3b0d2685f541b7efd5df" translate="yes" xml:space="preserve">
          <source>Integrate your Cypress tests with your GitHub workflow via commit &lt;a href=&quot;github-integration#Status-checks&quot;&gt;status checks&lt;/a&gt;</source>
          <target state="translated">コミット&lt;a href=&quot;github-integration#Status-checks&quot;&gt;ステータスチェック&lt;/a&gt;により、サイプレステストをGitHubワークフローと統合します。</target>
        </trans-unit>
        <trans-unit id="f16b98b1e2980b72ddcf6467c1ba1c24a6704e6e" translate="yes" xml:space="preserve">
          <source>Integrates Allure reporter with Cypress. Command logging and screenshot attachment out of the box.</source>
          <target state="translated">AllureレポーターをCypressと統合。コマンドロギングとスクリーンショットの添付が可能です。</target>
        </trans-unit>
        <trans-unit id="1a9b9bfc859afc93862f3511b4c483f1d2a686aa" translate="yes" xml:space="preserve">
          <source>Integration and Extensions</source>
          <target state="translated">統合と拡張</target>
        </trans-unit>
        <trans-unit id="8391e14b3c43387f52504bec0babee16188c1fe0" translate="yes" xml:space="preserve">
          <source>Integration tests</source>
          <target state="translated">統合テスト</target>
        </trans-unit>
        <trans-unit id="1f3bca9783a181f0387ffd5b50900c7ff7893e6c" translate="yes" xml:space="preserve">
          <source>Integration with open source service for visual testing and managing its results.</source>
          <target state="translated">ビジュアルテストとその結果を管理するためのオープンソースサービスとの統合。</target>
        </trans-unit>
        <trans-unit id="7f5a9c0f6a734e94e85a46d82a89f815b9c96120" translate="yes" xml:space="preserve">
          <source>IntelliSense is available for Cypress while editing your &lt;code&gt;cypress.json&lt;/code&gt; file. &lt;a href=&quot;../tooling/intelligent-code-completion&quot;&gt;Learn how to set up Intelligent Code Completion.&lt;/a&gt;</source>
          <target state="translated">IntelliSenseは、 &lt;code&gt;cypress.json&lt;/code&gt; ファイルの編集中にサイプレスで使用できます。&lt;a href=&quot;../tooling/intelligent-code-completion&quot;&gt;インテリジェントコード補完を設定する方法を学びます。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1b337d1f12d5e5b495cd81755b7b5f3d5998afe0" translate="yes" xml:space="preserve">
          <source>IntelliSense is available for Cypress. It offers intelligent code suggestions directly in your IDE while writing tests. A typical IntelliSense popup shows command definition, a code example and a link to the full documentation page.</source>
          <target state="translated">IntelliSense は Cypress で利用可能です。IntelliSense は、テストを書いている間に IDE で直接インテリジェントなコード提案を提供します。典型的なIntelliSenseのポップアップは、コマンド定義、コード例、および完全なドキュメントページへのリンクを表示します。</target>
        </trans-unit>
        <trans-unit id="f18cfc36f4f9f94cbd1fb8f20de9b282adaeb658" translate="yes" xml:space="preserve">
          <source>Intelligent Code Completion</source>
          <target state="translated">インテリジェントコードの完成</target>
        </trans-unit>
        <trans-unit id="856a93b4361932980473a8fb3311b9ea2c301155" translate="yes" xml:space="preserve">
          <source>Intelligent code completion using JSON schemas is supported by default in &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; and &lt;a href=&quot;https://www.visualstudio.com/&quot;&gt;Visual Studio&lt;/a&gt;. All other editors will require extra configuration or plugins for JSON schema support.</source>
          <target state="translated">&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;および&lt;a href=&quot;https://www.visualstudio.com/&quot;&gt;Visual Studio&lt;/a&gt;では、JSONスキーマを使用したインテリジェントなコード補完がデフォルトでサポートされています。他のすべてのエディターでは、JSONスキーマをサポートするための追加の構成またはプラグインが必要になります。</target>
        </trans-unit>
        <trans-unit id="8f38d1ecc140acef2d9f5582d2d1cb48e2c05275" translate="yes" xml:space="preserve">
          <source>Intelligently handle defaultPrevented events from descendants.</source>
          <target state="translated">子孫からのdefaultPreventedイベントをインテリジェントに処理します。</target>
        </trans-unit>
        <trans-unit id="c5684bf0251f67aed31969310a29107e69d8bf67" translate="yes" xml:space="preserve">
          <source>Interact with a range input (slider)</source>
          <target state="translated">レンジ入力(スライダー)との連動</target>
        </trans-unit>
        <trans-unit id="7bb43fc0728072e2523ce8de6dd4b4325b0d3d60" translate="yes" xml:space="preserve">
          <source>Interact with that element.</source>
          <target state="translated">その要素とインタラクトします。</target>
        </trans-unit>
        <trans-unit id="5533fd2ae269ffec5ff40e8ec9c81ff86a38ca11" translate="yes" xml:space="preserve">
          <source>Interacting With Elements</source>
          <target state="translated">要素との相互作用</target>
        </trans-unit>
        <trans-unit id="7a7209ae3fe1d1613751f606535395a7b5bfede0" translate="yes" xml:space="preserve">
          <source>Interacting with Elements</source>
          <target state="translated">要素との相互作用</target>
        </trans-unit>
        <trans-unit id="9fddd7885ecc9e94bca6c0627c009d2153cf69bc" translate="yes" xml:space="preserve">
          <source>Intercepting a request</source>
          <target state="translated">リクエストの傍受</target>
        </trans-unit>
        <trans-unit id="68ba181eb3c6f4a2c8f320938ad974253d586841" translate="yes" xml:space="preserve">
          <source>Intercepting a response</source>
          <target state="translated">応答を傍受する</target>
        </trans-unit>
        <trans-unit id="7dccb7d7f013ef6ffc105874dfb5ced54d432c57" translate="yes" xml:space="preserve">
          <source>Interested in the best practices for selecting elements? &lt;a href=&quot;../references/best-practices#Selecting-Elements&quot;&gt;Read here&lt;/a&gt;.</source>
          <target state="translated">要素を選択するためのベストプラクティスに興味がありますか？&lt;a href=&quot;../references/best-practices#Selecting-Elements&quot;&gt;こちらをお読みください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="921ffd2755b90606f913c1460d96bcf0d244ec77" translate="yes" xml:space="preserve">
          <source>Internal API changes for &lt;code&gt;$Commands&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$Commands&lt;/code&gt; 内部APIの変更。</target>
        </trans-unit>
        <trans-unit id="52f21819b854a9784c2db643b1522586ed08f07d" translate="yes" xml:space="preserve">
          <source>Internal changes to our API structure and communication. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1170&quot;&gt;#1170&lt;/a&gt;, &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1413&quot;&gt;#1413&lt;/a&gt;, &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1415&quot;&gt;#1415&lt;/a&gt;.</source>
          <target state="translated">API構造と通信に対する内部変更。修正&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1170&quot;&gt;＃1170&lt;/a&gt;、&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1413&quot;&gt;＃1413&lt;/a&gt;、&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1415&quot;&gt;＃1415&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0bf544a33742e82395b839d9d4a981bc5fc63018" translate="yes" xml:space="preserve">
          <source>Internal refactor / improvements to support long lived runnable objects to work with page events.</source>
          <target state="translated">内部リファクタリング/改善により、ページイベントで動作するように、長持ちするランナブルオブジェクトをサポートするようになりました。</target>
        </trans-unit>
        <trans-unit id="157197151b0a4d0adfba14ac302478ff89daeb9c" translate="yes" xml:space="preserve">
          <source>Internal refactoring to &lt;code&gt;Cypress.Mouse&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Cypress.Mouse&lt;/code&gt; への内部リファクタリング。</target>
        </trans-unit>
        <trans-unit id="6b5a7c797bec5b174af546a6e927e3044e5694b8" translate="yes" xml:space="preserve">
          <source>Internal routing errors in Cypress are now gracefully handled with &lt;code&gt;x-cypress-error&lt;/code&gt; and &lt;code&gt;x-cypress-stack&lt;/code&gt; set on response headers.</source>
          <target state="translated">サイプレスの内部ルーティングエラーは、応答ヘッダーに設定された &lt;code&gt;x-cypress-error&lt;/code&gt; および &lt;code&gt;x-cypress-stack&lt;/code&gt; で正常に処理されるようになりました。</target>
        </trans-unit>
        <trans-unit id="c72e6571cd87805043d6ff824199fef507cb65cb" translate="yes" xml:space="preserve">
          <source>Internally Cypress does account for this, and will polyfill the blur events when necessary to replicate what the browser does. Unfortunately the browser will still behave differently when not in focus - for instance it may throttle async events. Your best bet here is to keep Cypress focused when working on a test.</source>
          <target state="translated">内部的には、Cypress はこれを考慮し、ブラウザが行うことを再現するために必要に応じてぼかしイベントをポリフィルします。残念ながら、ブラウザはフォーカスしていないときにも異なる動作をします-例えば、非同期イベントをスロットルすることがあります。ここでの最善の策は、テスト作業中は Cypress をフォーカスしたままにしておくことです。</target>
        </trans-unit>
        <trans-unit id="a272838493ed5297b778c148fbcb938ec5db8a46" translate="yes" xml:space="preserve">
          <source>Internally our built in commands make use of every single one of these combinations above.</source>
          <target state="translated">内部的には、私たちの内蔵コマンドは、上記の組み合わせの一つ一つを利用しています。</target>
        </trans-unit>
        <trans-unit id="0a6c0e39c71a508a816c659333b19d3aa2ca1aa5" translate="yes" xml:space="preserve">
          <source>Internally refactored Cypress for easier testability / debuggability.</source>
          <target state="translated">Cypressを内部的にリファクタリングし、テスト性/デバッグ性を向上させました。</target>
        </trans-unit>
        <trans-unit id="ae1dabe147bee7e07cfaf98b6f39f019fd111f2b" translate="yes" xml:space="preserve">
          <source>Internally refactored how browsers are added and spawned in preparation of us adding cross browser support.</source>
          <target state="translated">クロスブラウザサポートの追加に備えて、ブラウザの追加と生成方法を内部的にリファクタリングしました。</target>
        </trans-unit>
        <trans-unit id="6d2bf3bf97d7110e76dbf631a8d5f08b70486dc2" translate="yes" xml:space="preserve">
          <source>Internally, Cypress has made a reference to the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; collection returned as the alias &amp;ldquo;rows&amp;rdquo;. To reference these same &amp;ldquo;rows&amp;rdquo; later, you can use the &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">内部的には、サイプレスはエイリアス「行」として返される &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; コレクションを参照しています。これらの同じ「行」を後で参照するには、&lt;a href=&quot;../../api/commands/get&quot;&gt; &lt;code&gt;cy.get()&lt;/code&gt; &lt;/a&gt;コマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="d69183212fcfe1542f38a5df9e8d4a7011169e19" translate="yes" xml:space="preserve">
          <source>Introduced new &lt;a href=&quot;../../api/commands/fixture&quot;&gt;&lt;code&gt;cy.fixture()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">新しい&lt;a href=&quot;../../api/commands/fixture&quot;&gt; &lt;code&gt;cy.fixture()&lt;/code&gt; &lt;/a&gt;コマンドが導入されました。</target>
        </trans-unit>
        <trans-unit id="15570a42c8d0090306099d26d01331b13063fa9b" translate="yes" xml:space="preserve">
          <source>Introduced new &lt;strong&gt;command option&lt;/strong&gt;&lt;code&gt;length&lt;/code&gt; which cues Cypress into not resolving matched elements until their length matches the option provided.</source>
          <target state="translated">サイプレスが指定されたオプションと長さが一致するまで一致した要素を解決しないように&lt;strong&gt;指示する&lt;/strong&gt;新しい&lt;strong&gt;コマンドオプションの&lt;/strong&gt; &lt;code&gt;length&lt;/code&gt; を導入しました。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="1e3df84601bda6f6c3662c05c057adf074a426d2" translate="yes" xml:space="preserve">
          <source>Introduction to Cypress</source>
          <target state="translated">サイプレスの紹介</target>
        </trans-unit>
        <trans-unit id="19704f243c889fd8081b9ea58fe747cb415143c5" translate="yes" xml:space="preserve">
          <source>Invalid cookie values no longer crash Cypress. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/962&quot;&gt;#962&lt;/a&gt;.</source>
          <target state="translated">無効なCookie値がサイプレスをクラッシュさせることはなくなりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/962&quot;&gt;＃962を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="2288ac5fc4461a2811be53687ea7cd7c43e275e4" translate="yes" xml:space="preserve">
          <source>Invalid username / password</source>
          <target state="translated">無効なユーザー名/パスワード</target>
        </trans-unit>
        <trans-unit id="ad3ad21f22a0dea7c53804a19001fb6e698cd76f" translate="yes" xml:space="preserve">
          <source>Invite &amp;lsquo;admin&amp;rsquo; to organization</source>
          <target state="translated">「管理者」を組織に招待する</target>
        </trans-unit>
        <trans-unit id="36693165be36c67188bff1bff1bfc7701213a1d7" translate="yes" xml:space="preserve">
          <source>Invite &amp;lsquo;member&amp;rsquo; to organization</source>
          <target state="translated">「メンバー」を組織に招待する</target>
        </trans-unit>
        <trans-unit id="347eb9ff3bad1a574d79ae444188fc379f78bf8e" translate="yes" xml:space="preserve">
          <source>Invite &amp;lsquo;owner&amp;rsquo; to organization</source>
          <target state="translated">「所有者」を組織に招待する</target>
        </trans-unit>
        <trans-unit id="86ff18d2c897eb70e44accff7d9f889361c34d7e" translate="yes" xml:space="preserve">
          <source>Invite a user to an organization:</source>
          <target state="translated">ユーザーを組織に招待します。</target>
        </trans-unit>
        <trans-unit id="69d42209324e467625ff0472353eddf0ba29aa27" translate="yes" xml:space="preserve">
          <source>Invite and edit user&amp;rsquo;s roles for organizations</source>
          <target state="translated">組織のユーザーの役割を招待して編集する</target>
        </trans-unit>
        <trans-unit id="416bba0c81753e21fba73796c1fc9f7a549b9cd2" translate="yes" xml:space="preserve">
          <source>Invite users</source>
          <target state="translated">ユーザーを招待する</target>
        </trans-unit>
        <trans-unit id="c65605adf5270f5065089b0189da542274d30db0" translate="yes" xml:space="preserve">
          <source>Invoke</source>
          <target state="translated">Invoke</target>
        </trans-unit>
        <trans-unit id="ec417f97085e4623c23f8655854d04156e0e11ff" translate="yes" xml:space="preserve">
          <source>Invoke a function on the previously yielded subject.</source>
          <target state="translated">前に生成されたテーマの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="d315b3fdccae782b8f67272f62e777033d41fe07" translate="yes" xml:space="preserve">
          <source>Invoke the function on the subject in wrap and return the new value</source>
          <target state="translated">wrap 内のサブジェクトに対して関数を呼び出し、新しい値を返します。</target>
        </trans-unit>
        <trans-unit id="a4b1f6caeb6dc4d8f76a066a34621313e6b8c42f" translate="yes" xml:space="preserve">
          <source>Invoking an async function</source>
          <target state="translated">非同期関数の呼び出し</target>
        </trans-unit>
        <trans-unit id="3fd34f6d72837602be97a0ae744b2653093c3973" translate="yes" xml:space="preserve">
          <source>Invoking it like this would error:</source>
          <target state="translated">このように呼び出すとエラーになります。</target>
        </trans-unit>
        <trans-unit id="b6cf35572474cd34fdfc18029c9173661fc34e06" translate="yes" xml:space="preserve">
          <source>Is DOM</source>
          <target state="translated">DOMは</target>
        </trans-unit>
        <trans-unit id="a9c48cbffd0926ca435f0a6aa07f5b44e0cb83d2" translate="yes" xml:space="preserve">
          <source>Is attached</source>
          <target state="translated">付属しています</target>
        </trans-unit>
        <trans-unit id="1a5737d16c0caf17174bf8c64656e315fcf633f1" translate="yes" xml:space="preserve">
          <source>Is descendent</source>
          <target state="translated">子孫です</target>
        </trans-unit>
        <trans-unit id="302d3b31f903ddcac8adf13f2827d7a482164c73" translate="yes" xml:space="preserve">
          <source>Is detached</source>
          <target state="translated">戸建</target>
        </trans-unit>
        <trans-unit id="5c3aa00cf387fd5b00fd2be49e286cfa6a922ead" translate="yes" xml:space="preserve">
          <source>Is document</source>
          <target state="translated">ドキュメントは</target>
        </trans-unit>
        <trans-unit id="337b849276e69cb43521fdaea7db7d4271706083" translate="yes" xml:space="preserve">
          <source>Is element</source>
          <target state="translated">要素は</target>
        </trans-unit>
        <trans-unit id="c5a816892ab8af8686fc83b9c6d7ff49932ec118" translate="yes" xml:space="preserve">
          <source>Is focusable</source>
          <target state="translated">フォーカス可能</target>
        </trans-unit>
        <trans-unit id="c513aca72b5565cd78d991c82deba5101d1d4c5e" translate="yes" xml:space="preserve">
          <source>Is focused</source>
          <target state="translated">焦点を合わせている</target>
        </trans-unit>
        <trans-unit id="92cbb18d46585cfcf3aac2bd9744763325b27bc7" translate="yes" xml:space="preserve">
          <source>Is hidden</source>
          <target state="translated">隠れている</target>
        </trans-unit>
        <trans-unit id="1cb26dc76ce6c121b781908083e74bc7caeb15a3" translate="yes" xml:space="preserve">
          <source>Is jQuery</source>
          <target state="translated">jQueryは</target>
        </trans-unit>
        <trans-unit id="0b4cab04a45465e47883d63fab5c59f92151ba1b" translate="yes" xml:space="preserve">
          <source>Is resetting the state necessary?</source>
          <target state="translated">状態のリセットは必要ですか?</target>
        </trans-unit>
        <trans-unit id="5d1d57e2ee232a5355d7315c07f0ca8742e6551c" translate="yes" xml:space="preserve">
          <source>Is scrollable</source>
          <target state="translated">スクロール可能</target>
        </trans-unit>
        <trans-unit id="5ea8391c45995b583f6b1235a1326f8f1cc82faf" translate="yes" xml:space="preserve">
          <source>Is the element behind another element?</source>
          <target state="translated">要素は別の要素の後ろにあるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="5a7e766f4d95000632b60abba0b2c5c4cafc7af4" translate="yes" xml:space="preserve">
          <source>Is the element invisible?</source>
          <target state="translated">要素は見えないのか?</target>
        </trans-unit>
        <trans-unit id="00a5eb5be6d0e0275a142afb158897a4a831d272" translate="yes" xml:space="preserve">
          <source>Is this worth trying to replicate when you&amp;rsquo;re testing?</source>
          <target state="translated">テストしているときに、これを複製してみる価値はありますか？</target>
        </trans-unit>
        <trans-unit id="db711e8244acdbb422d0057f6b2e38460719d54c" translate="yes" xml:space="preserve">
          <source>Is visible</source>
          <target state="translated">目に見える</target>
        </trans-unit>
        <trans-unit id="e1bd30fba2d2ceb9e89834c2084380287de0029e" translate="yes" xml:space="preserve">
          <source>Is window</source>
          <target state="translated">窓は</target>
        </trans-unit>
        <trans-unit id="1884b1c046724c12caad7ac9535bb681e1c79107" translate="yes" xml:space="preserve">
          <source>Isolate the Problem</source>
          <target state="translated">問題の切り分け</target>
        </trans-unit>
        <trans-unit id="73781a127ec1294a42a6bd6b81266946ff4be5b3" translate="yes" xml:space="preserve">
          <source>Issue</source>
          <target state="translated">Issue</target>
        </trans-unit>
        <trans-unit id="7dfe538fef5659381b9d285d4320a6802e39e9d9" translate="yes" xml:space="preserve">
          <source>Issue a JavaScript redirect in your application, such as &lt;code&gt;window.location.href = '...'&lt;/code&gt;, to a different superdomain.</source>
          <target state="translated">アプリケーションでJavaScriptリダイレクト（ &lt;code&gt;window.location.href = '...'&lt;/code&gt; など）を別のスーパードメインに発行します。</target>
        </trans-unit>
        <trans-unit id="0d4a689a54881b45cfb9f81abe79746e9cf4aa4c" translate="yes" xml:space="preserve">
          <source>Issue a simple HTTP request</source>
          <target state="translated">シンプルな HTTP リクエストを発行します。</target>
        </trans-unit>
        <trans-unit id="7ee5e4b43f88a6841552130a17aaa8aa88d0254b" translate="yes" xml:space="preserve">
          <source>Issue an HTTP request</source>
          <target state="translated">HTTP リクエストを発行する</target>
        </trans-unit>
        <trans-unit id="692ba34138d2513c2acea648571557cb0adef435" translate="yes" xml:space="preserve">
          <source>Issuing Cypress Commands inside of a Promise now works. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/111&quot;&gt;#111&lt;/a&gt;.</source>
          <target state="translated">Promise内でのサイプレスコマンドの発行が機能するようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/111&quot;&gt;＃111を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="dee2e0973907cfa359ccd0df171a7e26c022e6b7" translate="yes" xml:space="preserve">
          <source>It assumes there is a &lt;code&gt;.git&lt;/code&gt; folder and uses Git commands to get each property, like &lt;code&gt;git show -s --pretty=%B&lt;/code&gt; to get commit message, see &lt;a href=&quot;https://github.com/cypress-io/commit-info/blob/master/src/git-api.js&quot;&gt;src/git-api.js&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.git&lt;/code&gt; フォルダーがあることを前提とし、Gitコマンドを使用して各プロパティを取得します。 &lt;code&gt;git show -s --pretty=%B&lt;/code&gt; 、git show -s --pretty =％Bでコミットメッセージを取得します&lt;a href=&quot;https://github.com/cypress-io/commit-info/blob/master/src/git-api.js&quot;&gt;。src/ git-api.jsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d7d0de77ccdda3a2a187a7b8e78c458ac11bf60" translate="yes" xml:space="preserve">
          <source>It can be difficult to debug problems when elements are not considered actionable by Cypress.</source>
          <target state="translated">要素がCypressで実行可能とみなされていない場合、問題をデバッグするのが困難になることがあります。</target>
        </trans-unit>
        <trans-unit id="98fe5df6c7157e79098cc5adf264e9dbe0f66498" translate="yes" xml:space="preserve">
          <source>It can be run headlessly.</source>
          <target state="translated">頭を使わずに走らせることができます。</target>
        </trans-unit>
        <trans-unit id="eab1062950ccb91bfac00fbcc20a78ab95c5f218" translate="yes" xml:space="preserve">
          <source>It comes baked into Cypress and does not need to be installed separately.</source>
          <target state="translated">Cypressに組み込まれており、別途インストールする必要はありません。</target>
        </trans-unit>
        <trans-unit id="e08fe0558387b8908f22a5d18bb76e07d18b0252" translate="yes" xml:space="preserve">
          <source>It fails. But the interesting thing is that the type of &lt;code&gt;event&lt;/code&gt; is &lt;code&gt;KeyboardEvent&lt;/code&gt; when you &lt;code&gt;console.log(event)&lt;/code&gt;.</source>
          <target state="translated">失敗します。しかし、興味深いのは、 &lt;code&gt;console.log(event)&lt;/code&gt; の場合、 &lt;code&gt;event&lt;/code&gt; のタイプが &lt;code&gt;KeyboardEvent&lt;/code&gt; であるということです。</target>
        </trans-unit>
        <trans-unit id="9fd1be0a7f50e587da2eb19d6f0d71a2591d1f1d" translate="yes" xml:space="preserve">
          <source>It generates the beautiful standalone HTML report file &lt;code&gt;mochawesome-report/mochawesome.html&lt;/code&gt; shown below. As you can see all test results, timing information, and even test bodies are included.</source>
          <target state="translated">以下に示す美しいスタンドアロンのHTMLレポートファイル &lt;code&gt;mochawesome-report/mochawesome.html&lt;/code&gt; を生成します。すべてのテスト結果を見ることができるように、タイミング情報、さらにはテスト本体も含まれています。</target>
        </trans-unit>
        <trans-unit id="39136691a806ecd4ede3234a57363343020ed269" translate="yes" xml:space="preserve">
          <source>It is common for tests in Cypress to issue 30+ commands. Because nearly every command has a default assertion (and can therefore fail), even by limiting your assertions you&amp;rsquo;re not saving yourself anything because &lt;strong&gt;any single command could implicitly fail&lt;/strong&gt;.</source>
          <target state="translated">サイプレスのテストでは、30以上のコマンドを発行するのが一般的です。ほとんどすべてのコマンドにはデフォルトのアサーションがあり（したがって失敗する可能性がある）、アサーションを制限しても&lt;strong&gt;、単一のコマンドが暗黙的に失敗する可能性がある&lt;/strong&gt;ため&lt;strong&gt;、&lt;/strong&gt;何も保存していませ&lt;strong&gt;ん&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c747b31deacd2080c345077d706ed1ebf0b2fd34" translate="yes" xml:space="preserve">
          <source>It is crucial that you understand how your application works else you will write flaky tests.</source>
          <target state="translated">アプリケーションがどのように動作するかを理解していないと、欠陥テストを書くことになってしまいます。</target>
        </trans-unit>
        <trans-unit id="be413bf9ba03e137bb850af2935df0123b1aaa8b" translate="yes" xml:space="preserve">
          <source>It is incredibly time consuming and slows down your tests.</source>
          <target state="translated">信じられないほど時間がかかり、テストが遅くなります。</target>
        </trans-unit>
        <trans-unit id="7d30012372de91ccedf2455e8c6a978fbbd46ee2" translate="yes" xml:space="preserve">
          <source>It is very important to understand that Cypress commands don&amp;rsquo;t do anything at the moment they are invoked, but rather enqueue themselves to be run later. This is what we mean when we say Cypress commands are asynchronous.</source>
          <target state="translated">サイプレスのコマンドは、呼び出された時点では何も実行せず、後で実行するために自分自身をキューに入れることを理解することが非常に重要です。これは、サイプレスのコマンドが非同期であると私たちが言っていることです。</target>
        </trans-unit>
        <trans-unit id="9ce21251dca34ef1a436adc21881c5a7d1ce13a9" translate="yes" xml:space="preserve">
          <source>It should look something like &lt;strong&gt;http://localhost:8080&lt;/strong&gt;.</source>
          <target state="translated">それは次のようになります&lt;strong&gt;にhttp：// localhostを：8080&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="80b7742976b8adf460d2d2aeb2886a8468365602" translate="yes" xml:space="preserve">
          <source>It simplifies running Cypress in &lt;a href=&quot;../guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guides/continuous-integration&quot;&gt;継続的インテグレーションでの&lt;/a&gt;サイプレスの実行を簡素化します。</target>
        </trans-unit>
        <trans-unit id="1ee5eaf554a89f33a67614769634524a529f93dd" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a great idea to get your signup and login flow under test coverage since it is very important to all of your users and you never want it to break.</source>
          <target state="translated">サインアップとログインのフローをテストカバレッジの下に置くことは、すべてのユーザーにとって非常に重要であり、中断させたくないので、すばらしいアイデアです。</target>
        </trans-unit>
        <trans-unit id="fdf1af60bbdc583e41dcea4a260c119b88956670" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s actually &lt;em&gt;possible&lt;/em&gt; for Cypress to accommodate these situations the same way Selenium does, but you will never have &lt;em&gt;native&lt;/em&gt; access to these iframes from inside of Cypress.</source>
          <target state="translated">サイプレスがSeleniumと同じようにこれらの状況に対応する&lt;em&gt;こと&lt;/em&gt;は実際には&lt;em&gt;可能&lt;/em&gt;ですが、サイプレスの内部からこれらのiframeに&lt;em&gt;ネイティブ&lt;/em&gt;アクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="6e768f10fff402864eeaab9272cadf49b69c0c93" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s all downside with no upside:</source>
          <target state="translated">それはすべて欠点であり、欠点はありません。</target>
        </trans-unit>
        <trans-unit id="170b7b6f80c240695138216f1a14ebd2feeafdd5" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s because the Test Runner uses an &lt;code&gt;iframe&lt;/code&gt; to load the application under test. In other words, the &lt;code&gt;KeyboardEvent&lt;/code&gt; used in the the code above and the &lt;code&gt;KeyboardEvent&lt;/code&gt; class from which the &lt;code&gt;event&lt;/code&gt; variable is constructed are different &lt;code&gt;KeyboardEvent&lt;/code&gt;s.</source>
          <target state="translated">これは、テストランナーが &lt;code&gt;iframe&lt;/code&gt; を使用してテスト対象のアプリケーションをロードするためです。換言すれば、 &lt;code&gt;KeyboardEvent&lt;/code&gt; のは、上記のコードとで使用さ &lt;code&gt;KeyboardEvent&lt;/code&gt; そこからクラス &lt;code&gt;event&lt;/code&gt; 可変である異なる構築さ &lt;code&gt;KeyboardEvent&lt;/code&gt; S。</target>
        </trans-unit>
        <trans-unit id="df5ee67cce4958a1e097362f1ecc1e29ce35767e" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to note that although we do our &lt;strong&gt;very best&lt;/strong&gt; to ensure your application works normally inside of Cypress, there &lt;em&gt;are&lt;/em&gt; some limitations you need to be aware of.</source>
          <target state="translated">それは我々が行うもののことに注意することが重要です&lt;strong&gt;非常に最高の&lt;/strong&gt;アプリケーションがサイプレスの内部に正常に動作することを確認するために、そこに&lt;em&gt;ある&lt;/em&gt;あなたが知っておく必要があるいくつかの制限が。</target>
        </trans-unit>
        <trans-unit id="3e97d2f36e753347978d17dde27a0e2abc95a1c2" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to understand why you&amp;rsquo;d want to bind to either &lt;code&gt;Cypress&lt;/code&gt; or &lt;code&gt;cy&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Cypress&lt;/code&gt; または &lt;code&gt;cy&lt;/code&gt; にバインドする理由を理解することが重要です。</target>
        </trans-unit>
        <trans-unit id="334b2ddb847b165d4c039dc54bf5b6af4255a7d9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to enable debugging these scripts by adding the &lt;code&gt;crossorigin&lt;/code&gt; attribute and setting a &lt;code&gt;CORS&lt;/code&gt; header.</source>
          <target state="translated">&lt;code&gt;crossorigin&lt;/code&gt; 属性を追加して &lt;code&gt;CORS&lt;/code&gt; ヘッダーを設定することで、これらのスクリプトのデバッグを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="657a07f2be60684130376ca86fceb04fc3e5f766" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s still useful to load a setup file before your test code. If you are setting Cypress defaults or utilizing custom Cypress commands, instead of needing to import/require those defaults/commands in every test file, you can use the &lt;a href=&quot;configuration#Folders-Files&quot;&gt;&lt;code&gt;supportFile&lt;/code&gt;&lt;/a&gt; configuration option.</source>
          <target state="translated">テストコードの前にセットアップファイルをロードすると便利です。サイプレスのデフォルトを設定する場合、またはカスタムサイプレスコマンドを利用する場合は、すべてのテストファイルでそれらのデフォルト/コマンドをインポート/要求する代わりに、&lt;a href=&quot;configuration#Folders-Files&quot;&gt; &lt;code&gt;supportFile&lt;/code&gt; &lt;/a&gt;構成オプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="2cb6a6443a633c3a158d58be0f5fede03d79e6f7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s very important to understand the mechanism Cypress uses to chain commands together. It manages a Promise chain on your behalf, with each command yielding a &amp;lsquo;subject&amp;rsquo; to the next command, until the chain ends or an error is encountered. The developer should not need to use Promises directly, but understanding how they work is helpful!</source>
          <target state="translated">サイプレスがコマンドをチェーンするために使用するメカニズムを理解することは非常に重要です。代わりにPromiseチェーンを管理し、チェーンが終了するかエラーが発生するまで、各コマンドは次のコマンドの「サブジェクト」を生成します。開発者はPromiseを直接使用する必要はありませんが、Promiseがどのように機能するかを理解しておくと役に立ちます。</target>
        </trans-unit>
        <trans-unit id="43a1419b0a16467bcb3ceadf516778d211fab736" translate="yes" xml:space="preserve">
          <source>Iterate through an array like structure (arrays or objects with a &lt;code&gt;length&lt;/code&gt; property).</source>
          <target state="translated">配列のような配列（ &lt;code&gt;length&lt;/code&gt; プロパティを持つ配列またはオブジェクト）を反復処理します。</target>
        </trans-unit>
        <trans-unit id="e0c004fb3f415f03826dcbf579bbcc9503d137b4" translate="yes" xml:space="preserve">
          <source>Its &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">その &lt;code&gt;width&lt;/code&gt; または &lt;code&gt;height&lt;/code&gt; ある &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e9865a8842f87c81f0188117d466d92c66748e6" translate="yes" xml:space="preserve">
          <source>Its CSS property (or ancestors) is &lt;code&gt;display: none&lt;/code&gt;.</source>
          <target state="translated">そのCSSプロパティ（または祖先）は &lt;code&gt;display: none&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c62d091c0bf41bc4cf1929cbfc41afaced5389bc" translate="yes" xml:space="preserve">
          <source>Its CSS property (or ancestors) is &lt;code&gt;visibility: hidden&lt;/code&gt;.</source>
          <target state="translated">そのCSSプロパティ（または祖先）は &lt;code&gt;visibility: hidden&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0d01899d7eac45b85bcaa9827cc3ee4480c18cf4" translate="yes" xml:space="preserve">
          <source>Its CSS property is &lt;code&gt;position: fixed&lt;/code&gt; and it&amp;rsquo;s offscreen or covered up.</source>
          <target state="translated">そのCSSプロパティは &lt;code&gt;position: fixed&lt;/code&gt; 、画面外または隠されます。</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="5d6ee3c1b91a4f3e6dfca851d66a0f0944b4c263" translate="yes" xml:space="preserve">
          <source>JSON fixtures with unicode escape sequences are now parsed correctly. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/964&quot;&gt;#964&lt;/a&gt;.</source>
          <target state="translated">Unicodeエスケープシーケンスを含むJSONフィクスチャが正しく解析されるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/964&quot;&gt;＃964を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="e15ddc552daca5b41bfb140c68f1f25c6da5e7bc" translate="yes" xml:space="preserve">
          <source>JSX and CJSX</source>
          <target state="translated">JSXとCJSX</target>
        </trans-unit>
        <trans-unit id="d66ed2254c1744f6803e5dc84b262f6d290da4c9" translate="yes" xml:space="preserve">
          <source>JavaScript Redirects</source>
          <target state="translated">JavaScriptのリダイレクト</target>
        </trans-unit>
        <trans-unit id="5f61712d6fc2cae7116b6916efcc16204b0c2aed" translate="yes" xml:space="preserve">
          <source>JavaScript arrays and objects are stringified and formatted into text.</source>
          <target state="translated">JavaScriptの配列やオブジェクトは文字列化され、テキストに整形されます。</target>
        </trans-unit>
        <trans-unit id="4200ab363a2bbec801370b191a1404dca14c89ab" translate="yes" xml:space="preserve">
          <source>JavaScript popup blocking is now disabled and will not interfere with running tests. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/125&quot;&gt;#125&lt;/a&gt;.</source>
          <target state="translated">JavaScriptポップアップブロックが無効になり、テストの実行を妨げることはなくなりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/125&quot;&gt;＃125を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="a2feefe9afbc3d0f6fec53c2b390d4515e363675" translate="yes" xml:space="preserve">
          <source>Jenkins</source>
          <target state="translated">Jenkins</target>
        </trans-unit>
        <trans-unit id="0c2c5c506cef0ed2d3ad2b7e45e97980b66f5520" translate="yes" xml:space="preserve">
          <source>Jenkinsfile</source>
          <target state="translated">Jenkinsfile</target>
        </trans-unit>
        <trans-unit id="b5b8bd2dde132deaa5d4e014fa98dd4029a66224" translate="yes" xml:space="preserve">
          <source>Jump to failed tests</source>
          <target state="translated">失敗したテストへのジャンプ</target>
        </trans-unit>
        <trans-unit id="7cdd0a39f39601525c6c1fb41dee66f38e4478fa" translate="yes" xml:space="preserve">
          <source>Just as you would when writing TypeScript files in your project, you will have to handle transpiling your TypeScript test files. Cypress exposes a &lt;a href=&quot;../../api/plugins/preprocessors-api&quot;&gt;&lt;code&gt;file:preprocessor&lt;/code&gt; event&lt;/a&gt; you can use to customize how your test code is transpiled and sent to the browser.</source>
          <target state="translated">プロジェクトでTypeScriptファイルを書き込む場合と同様に、TypeScriptテストファイルのトランスパイルを処理する必要があります。サイプレスは、テストコードを変換してブラウザに送信する方法をカスタマイズするために使用できる&lt;a href=&quot;../../api/plugins/preprocessors-api&quot;&gt; &lt;code&gt;file:preprocessor&lt;/code&gt; イベント&lt;/a&gt;を公開しています。</target>
        </trans-unit>
        <trans-unit id="f46351566b7bab6e81796aa2cde4e4b3a16d22f5" translate="yes" xml:space="preserve">
          <source>Just be sure &lt;em&gt;not&lt;/em&gt; to include any code that has side effects in your callback function.</source>
          <target state="translated">念の&lt;em&gt;ない&lt;/em&gt;コールバック関数に副作用を持っている任意のコードを含めること。</target>
        </trans-unit>
        <trans-unit id="784324892fb89e718e64e6169b2c7f6e3bac488a" translate="yes" xml:space="preserve">
          <source>Just be sure &lt;em&gt;not&lt;/em&gt; to include any code that has side effects in your callback function. The callback function will be retried over and over again until no assertions within it throw.</source>
          <target state="translated">念の&lt;em&gt;ない&lt;/em&gt;コールバック関数に副作用を持っている任意のコードを含めること。コールバック関数は、その中のアサーションがスローされなくなるまで何度も再試行されます。</target>
        </trans-unit>
        <trans-unit id="00504ece5558f7cee1907345a51121045921205d" translate="yes" xml:space="preserve">
          <source>Just like Promises, you can return any compatible &amp;ldquo;thenable&amp;rdquo; (anything that has a &lt;code&gt;.then()&lt;/code&gt; interface) and Cypress will wait for that to resolve before continuing forward through the chain of commands.</source>
          <target state="translated">Promisesと同様に、互換性のある「Thenable」（。then &lt;code&gt;.then()&lt;/code&gt; インターフェースを持つもの）を返すことができ、サイプレスはそれが解決するのを待ってからコマンドチェーンを続行します。</target>
        </trans-unit>
        <trans-unit id="3b3398bb5c649b30e2db6fc94c81b3132106125c" translate="yes" xml:space="preserve">
          <source>Just like the &lt;a href=&quot;command-line&quot;&gt;Command Line options&lt;/a&gt; for &lt;code&gt;cypress run&lt;/code&gt;, you can pass options that modify how Cypress runs.</source>
          <target state="translated">同じように&lt;a href=&quot;command-line&quot;&gt;コマンドラインオプション&lt;/a&gt;のための &lt;code&gt;cypress run&lt;/code&gt; には、サイプレスの実行方法を変更するオプションを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2ee3b2c9db3bd2ce0b81005461c49e6cfad51475" translate="yes" xml:space="preserve">
          <source>Just like the &lt;a href=&quot;command-line&quot;&gt;Command Line options&lt;/a&gt;, you can pass options that modify how Cypress runs.</source>
          <target state="translated">&lt;a href=&quot;command-line&quot;&gt;コマンドラインオプション&lt;/a&gt;と同様に、サイプレスの実行方法を変更するオプションを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="0577f4f324e393ae3d72c81193996ac3e8f07715" translate="yes" xml:space="preserve">
          <source>Just like with multiple tabs - Cypress does not support controlling more than 1 open browser at a time.</source>
          <target state="translated">複数のタブと同様に-Cypress は、一度に複数のオープンブラウザを制御することをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="ac66d9188443ba391152d22f101054ec2945a03e" translate="yes" xml:space="preserve">
          <source>Just like with your test files, the &lt;a href=&quot;configuration#Folders-Files&quot;&gt;&lt;code&gt;supportFile&lt;/code&gt;&lt;/a&gt; can use ES2015+ (or CoffeeScript) and modules, so you can import/require other files as needed.</source>
          <target state="translated">テストファイルと同様に、&lt;a href=&quot;configuration#Folders-Files&quot;&gt; &lt;code&gt;supportFile&lt;/code&gt; &lt;/a&gt;はES2015 +（またはCoffeeScript）とモジュールを使用できるため、必要に応じて他のファイルをインポート/要求できます。</target>
        </trans-unit>
        <trans-unit id="e7d4bb38752df4300cd5554ef8dd04226945030c" translate="yes" xml:space="preserve">
          <source>Just manually unzip and double click. Cypress will run without needing to install any dependencies.</source>
          <target state="translated">手動で解凍してダブルクリックするだけです。Cypress は依存関係をインストールしなくても実行されます。</target>
        </trans-unit>
        <trans-unit id="c9fdbdd9e6318c0bb604e7e9ad1b6812d9a45ba2" translate="yes" xml:space="preserve">
          <source>Keep Cypress Test Runner open after tests in a spec file run</source>
          <target state="translated">仕様ファイルのテスト後に Cypress Test Runner を開いておく</target>
        </trans-unit>
        <trans-unit id="54750ea67025a99e6f4fcde0f725e5f7b10e8bd2" translate="yes" xml:space="preserve">
          <source>Keep Cypress open after all tests run</source>
          <target state="translated">すべてのテストが実行された後、Cypress を開いたままにしておく</target>
        </trans-unit>
        <trans-unit id="bfd4238847f221fc0b9d92bc87ddd9c5d82d3102" translate="yes" xml:space="preserve">
          <source>Keep a modifier activated between commands</source>
          <target state="translated">コマンド間でモディファイアを有効にしておく</target>
        </trans-unit>
        <trans-unit id="262ad766f219d25be086be5cc099772d711a7e0b" translate="yes" xml:space="preserve">
          <source>Keep in mind - code executed in plugins &lt;strong&gt;may&lt;/strong&gt; be executed by the Node version that comes bundled in Cypress itself.</source>
          <target state="translated">プラグインで実行されるコードは、サイプレス自体にバンドルされているノードバージョンで実行される&lt;strong&gt;場合&lt;/strong&gt;がある&lt;strong&gt;ことに&lt;/strong&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="f9f503ed838e0a7cf35077660aba33cdb448e219" translate="yes" xml:space="preserve">
          <source>Keep in mind - code executed in plugins is executed &lt;strong&gt;by the Node version&lt;/strong&gt; that comes bundled in Cypress itself.</source>
          <target state="translated">留意してください-プラグインで実行さ&lt;strong&gt;れる&lt;/strong&gt;コードは、サイプレス自体にバンドルさ&lt;strong&gt;れているノードバージョンによって&lt;/strong&gt;実行されます。</target>
        </trans-unit>
        <trans-unit id="f30ef21f41a06ebf6d4a07c00044760f541cf433" translate="yes" xml:space="preserve">
          <source>Keep in mind that there are use cases for both approaches because they have different ergonomics.</source>
          <target state="translated">どちらのアプローチも人間工学が異なるため、ユースケースがあることを覚えておきましょう。</target>
        </trans-unit>
        <trans-unit id="f638df9bc16cb7019014edeb557c54677e4c03fa" translate="yes" xml:space="preserve">
          <source>Keep in mind, setting something in a global hook will render it less flexible for changes and for testing its behavior down the road.</source>
          <target state="translated">グローバルフックに何かを設定すると、変更のための柔軟性が低くなり、その動作をテストするために、そのようになることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="ba28782ce21f499aeb0e691c016ca977d8ab3db6" translate="yes" xml:space="preserve">
          <source>Keep the form as the subject</source>
          <target state="translated">フォームを件名にしておく</target>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="f708a1aed2b98a10d5f99aa0de892e1c6fedef57" translate="yes" xml:space="preserve">
          <source>Key Combinations</source>
          <target state="translated">キーの組み合わせ</target>
        </trans-unit>
        <trans-unit id="c2b024ab82e3ea96b24576523563cf4ea3318647" translate="yes" xml:space="preserve">
          <source>Key Cypress features</source>
          <target state="translated">キーサイプレスの特徴</target>
        </trans-unit>
        <trans-unit id="93cac4d9c2f3ba888dfbaa5efc279cd8395bc3d0" translate="yes" xml:space="preserve">
          <source>Key Differences</source>
          <target state="translated">主な違い</target>
        </trans-unit>
        <trans-unit id="70ca15755321c55d088710350beef00d5ec91b4e" translate="yes" xml:space="preserve">
          <source>Key Events Table</source>
          <target state="translated">キーイベント表</target>
        </trans-unit>
        <trans-unit id="857d6f33d5eb33ba41809c31a6688e5f86c13fce" translate="yes" xml:space="preserve">
          <source>Keyboard shortcuts where the listener is on the &lt;code&gt;document&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">リスナーが &lt;code&gt;document&lt;/code&gt; または &lt;code&gt;body&lt;/code&gt; 上にあるキーボードショートカット。</target>
        </trans-unit>
        <trans-unit id="b6f86635fbab459c3dfca553452917a169023767" translate="yes" xml:space="preserve">
          <source>Kick off other builds or scripts</source>
          <target state="translated">他のビルドやスクリプトをキックオフ</target>
        </trans-unit>
        <trans-unit id="cd9aabc75704dec1a8701384247294faf9245eaa" translate="yes" xml:space="preserve">
          <source>Killing processes</source>
          <target state="translated">キリングプロセス</target>
        </trans-unit>
        <trans-unit id="2a73fbcd9674e09cb33a5adbfcf79b0b3d853d96" translate="yes" xml:space="preserve">
          <source>Knapsack Pro Cypress</source>
          <target state="translated">ナップサック プロ サイプレス</target>
        </trans-unit>
        <trans-unit id="f5025143a89e9b224781aa62468c0e2c91c66496" translate="yes" xml:space="preserve">
          <source>Known Issues</source>
          <target state="translated">既知の問題</target>
        </trans-unit>
        <trans-unit id="d36b5e0832a8d6cca58d3315be6a7ae1ba8b0b97" translate="yes" xml:space="preserve">
          <source>Known Issues:</source>
          <target state="translated">既知の問題。</target>
        </trans-unit>
        <trans-unit id="8c5ce75c7a54b8f3a8f4f82c3cd0ebb1e308b951" translate="yes" xml:space="preserve">
          <source>Labeling these groups in this manner helps up later when we review our test runs in the Cypress Dashboard, as shown below:</source>
          <target state="translated">このようにこれらのグループにラベルを付けることで、後で Cypress ダッシュボードでのテスト実行を確認する際に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d2460f98e9d33f3715ead8c78027879fad8595b1" translate="yes" xml:space="preserve">
          <source>Last but not least - trying to shoehorn tests to an already built application is much more difficult than building it as you write tests. You&amp;rsquo;ll likely encounter a series of initial up front challenges / hurdles that would have otherwise been avoided writing tests from the start.</source>
          <target state="translated">最後に重要なことですが、すでに構築されているアプリケーションにテストをシューホーンしようとすることは、テストを書くときにそれを構築するよりもはるかに困難です。最初からテストを書くことを避けられていた一連の最初の最初の課題/ハードルに遭遇する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b7ad4898fc7c25e90e113f44efde477ec19a3ead" translate="yes" xml:space="preserve">
          <source>Lastly you can pass in environment variables as options when &lt;a href=&quot;command-line#cypress-run&quot;&gt;using the CLI tool&lt;/a&gt;.</source>
          <target state="translated">最後に&lt;a href=&quot;command-line#cypress-run&quot;&gt;、CLIツールを使用する&lt;/a&gt;ときに、環境変数をオプションとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="f131c7bc4486c7900913e25aac88bf30cf8d7b28" translate="yes" xml:space="preserve">
          <source>Later in this guide we&amp;rsquo;ll go into much more detail about &lt;a href=&quot;#Default-Assertions&quot;&gt;Default Assertions&lt;/a&gt; and &lt;a href=&quot;#Timeouts&quot;&gt;Timeouts&lt;/a&gt;.</source>
          <target state="translated">このガイドの後半では、&lt;a href=&quot;#Default-Assertions&quot;&gt;デフォルトのアサーション&lt;/a&gt;と&lt;a href=&quot;#Timeouts&quot;&gt;タイムアウト&lt;/a&gt;について詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="8b1c5691506cde7010b7e4c2a7a229d772d075d0" translate="yes" xml:space="preserve">
          <source>Launch Cypress in interactive mode.</source>
          <target state="translated">インタラクティブモードでCypressを起動します。</target>
        </trans-unit>
        <trans-unit id="351e9082a029d1b2e09b40d6b23edeb85ca13c34" translate="yes" xml:space="preserve">
          <source>Launching Browsers</source>
          <target state="translated">ブラウザの起動</target>
        </trans-unit>
        <trans-unit id="6208680f7a552dc0169086e364a08af5f96eb97d" translate="yes" xml:space="preserve">
          <source>Launching browsers</source>
          <target state="translated">ブラウザの起動</target>
        </trans-unit>
        <trans-unit id="2da1539877c9a2dc579ca754fe07a3ec6c4711a6" translate="yes" xml:space="preserve">
          <source>Launching by a path</source>
          <target state="translated">パスによる打ち上げ</target>
        </trans-unit>
        <trans-unit id="a4447863b6af851e202f216b37d31a5ff214b746" translate="yes" xml:space="preserve">
          <source>Leading, trailing, duplicate whitespaces aren&amp;rsquo;t ignored in &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag</source>
          <target state="translated">&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; タグでは、先頭、末尾、重複する空白は無視されません</target>
        </trans-unit>
        <trans-unit id="3bade34ecbc5d996b2f301ebd4ba689e81c7c9ea" translate="yes" xml:space="preserve">
          <source>Length</source>
          <target state="translated">Length</target>
        </trans-unit>
        <trans-unit id="ebb7c80c25a220250f85a8f41208f771a5c7bea6" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s add a &lt;a href=&quot;../../api/commands/pause&quot;&gt;&lt;code&gt;cy.pause()&lt;/code&gt;&lt;/a&gt; to our test code and see what happens.</source>
          <target state="translated">テストコードに&lt;a href=&quot;../../api/commands/pause&quot;&gt; &lt;code&gt;cy.pause()&lt;/code&gt; &lt;/a&gt;を追加して、何が起こるか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="885416ab834937446cf45c3677249c258e6a577c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s add it to our test and see what happens:</source>
          <target state="translated">それをテストに追加して、何が起こるか見てみましょう：</target>
        </trans-unit>
        <trans-unit id="bca0aabc49f54952b8d68e3527b487ce9d2aa118" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s add the &lt;code&gt;baseUrl&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;baseUrl&lt;/code&gt; オプションを追加しましょう。</target>
        </trans-unit>
        <trans-unit id="4682502d1494cb1079bfccac9d577db191eefe43" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s compare the prior example to a fictional version of it as raw, Promise-based code:</source>
          <target state="translated">前の例を、架空のPromiseベースのコードとしての架空のバージョンと比較してみましょう。</target>
        </trans-unit>
        <trans-unit id="443ba0d20ca2baebed62685e4aee136a11020247" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a new file in the &lt;code&gt;cypress/integration&lt;/code&gt; folder that was created for us:</source>
          <target state="translated">私たちのために作成 &lt;code&gt;cypress/integration&lt;/code&gt; れたcypress / integrationフォルダーに新しいファイルを作成しましょう：</target>
        </trans-unit>
        <trans-unit id="e20c030f5691819171fa2bbabf0527387bca6c87" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s delete the &lt;code&gt;examples&lt;/code&gt; folder that Cypress created for you, since we learned about this in the previous tutorial.</source>
          <target state="translated">これについては前のチュートリアルで学習したので、サイプレスが作成した &lt;code&gt;examples&lt;/code&gt; フォルダーを削除してみましょう。</target>
        </trans-unit>
        <trans-unit id="eae5647b7bda4db6cdf6119d4436916ef3b38cb3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s examine several different ways you may get this error message. In every situation, you&amp;rsquo;ll need to change something in your test code to prevent the error.</source>
          <target state="translated">このエラーメッセージが表示されるいくつかの異なる方法を調べてみましょう。すべての状況で、エラーを防ぐためにテストコードの何かを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="5a51a29403bd30329942e71ffef291897daafd19" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s explore a few examples.</source>
          <target state="translated">いくつかの例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="2c20749b7bfe220ee9548ce34452cb4a1a5ff666" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s explore some examples of conditional testing that will pass or fail 100% of the time.</source>
          <target state="translated">100％の確率で合格または不合格になる条件付きテストの例をいくつか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="712f316fb9c26562a172e33dc77b8e70b16c80e9" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s find both list items that contain the work &amp;ldquo;Services&amp;rdquo;</source>
          <target state="translated">作品「サービス」を含む両方のリストアイテムを見つけましょう</target>
        </trans-unit>
        <trans-unit id="ce6143bc468fb0ff760d94fee09d340a7044567c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine a scenario where you click a button to delete a user and a dialog appears asking you to confirm this deletion.</source>
          <target state="translated">ボタンをクリックしてユーザーを削除し、この削除の確認を求めるダイアログが表示されるシナリオを想像してみてください。</target>
        </trans-unit>
        <trans-unit id="c5a46fe5fdc9d5fcfc253a3f6eb0d85baf8e45e1" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine the following Node code:</source>
          <target state="translated">次のノードコードを想像してみましょう：</target>
        </trans-unit>
        <trans-unit id="fafc64da2669147d85d4713f0ba11e20192dead2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine the following examples:</source>
          <target state="translated">次の例を想像してみましょう：</target>
        </trans-unit>
        <trans-unit id="b4a87247f21941ab8d0c11cbf2d5e8e698497657" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine the following test that is filling out the form.</source>
          <target state="translated">フォームに入力する次のテストを想像してみましょう。</target>
        </trans-unit>
        <trans-unit id="8deca3882603b4815b813aad98f1ef40a383d1ea" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine we have a scenario where our application may do two separate things that we are unable to control. In other words you tried every strategy above and for whatever reason you were unable to know ahead of time what your application will do.</source>
          <target state="translated">アプリケーションが、制御できない2つの別々のことを行うシナリオがあると想像してみましょう。つまり、上記のすべての戦略を試しましたが、何らかの理由で、アプリケーションが何をするかを事前に知ることができませんでした。</target>
        </trans-unit>
        <trans-unit id="35284e0f921dfe7652bde3f7e411fc7b9585cfaf" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine when we click the &lt;code&gt;.edit&lt;/code&gt; button that our &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; is re-rendered in the DOM. Instead of displaying the edit button it instead displays an &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; text field allowing you to edit the todo. The previous &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; has been &lt;em&gt;completely&lt;/em&gt; removed from the DOM and a new &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; is rendered in its place.</source>
          <target state="translated">&lt;code&gt;.edit&lt;/code&gt; ボタンをクリックしたときに、 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; がDOMに再レンダリングされたとしましょう。編集ボタンを表示する代わりに、 &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; テキストフィールドを表示して、ToDoを編集できます。以前の &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; はDOMから&lt;em&gt;完全に&lt;/em&gt;削除され、代わりに新しい &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; がレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="7d808bde7c34ec6ca0d3c30277078b7dabd82ab8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate and tease apart why.</source>
          <target state="translated">その理由を調べて、バラバラにしましょう。</target>
        </trans-unit>
        <trans-unit id="2e3bba187abd89b66a59680a6e194fbadd3521e0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate both strategies, why you would use one versus the other, and why you should regularly use both.</source>
          <target state="translated">両方の戦略、なぜ一方を他方で使用するのか、なぜ両方を定期的に使用するのかを調べてみましょう。</target>
        </trans-unit>
        <trans-unit id="2d4f9815304d15e5a17e7df1310baffe82204eb0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate each benefit.</source>
          <target state="translated">それぞれのメリットを調べてみましょう。</target>
        </trans-unit>
        <trans-unit id="169149ed9f430b57d016c6dd935c9c8095167568" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate how we could target it:</source>
          <target state="translated">それをどのようにターゲットにできるかを調べてみましょう：</target>
        </trans-unit>
        <trans-unit id="3084907eb2a8dd371b0d137bd4562cbd3493cca9" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate how you might encounter cross-origin errors in your test code and break down how to work around them in Cypress.</source>
          <target state="translated">テストコードでクロスオリジンエラーが発生する可能性がある方法を調査し、サイプレスでそれらを回避する方法を詳しく見てみましょう。</target>
        </trans-unit>
        <trans-unit id="bc565d7abfa48de2e072f0cb705331e2f6ec8d6f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate why and how you can overcome these problems&amp;hellip;</source>
          <target state="translated">これらの問題を解決する理由と方法を調べてみましょう&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="8896a36074dfd4485880af3371c84962a831cb50" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at a few strategies for dealing with these situations.</source>
          <target state="translated">これらの状況に対処するためのいくつかの戦略を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="d172a231ad56188812168291eea6a5fd8742b6b4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at an example:</source>
          <target state="translated">例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="6eb61cda1a1cde839ea1830e853af24649f2e66a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how you&amp;rsquo;d describe an assertion in english:</source>
          <target state="translated">アサーションを英語でどのように記述するかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="f0e7cab14e7daaa858f50a25da386c2c86aa0f8a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at our previous example with aliases.</source>
          <target state="translated">エイリアスを使用した前の例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="43b793ba529829706eb45ceb2c8d4400697c82b1" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at the last command and assertion pair:</source>
          <target state="translated">最後のコマンドとアサーションのペアを見てみましょう：</target>
        </trans-unit>
        <trans-unit id="539e870868d193929f3aae87ef230c265994444e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at the one file that has a &amp;ldquo;missed&amp;rdquo; line. It is the &lt;code&gt;src/selectors/index.js&lt;/code&gt; file shown below.</source>
          <target state="translated">「行方不明」の行がある1つのファイルを見てみましょう。それはある &lt;code&gt;src/selectors/index.js&lt;/code&gt; 、以下に示すファイル。</target>
        </trans-unit>
        <trans-unit id="0b8d4c98a18ff40c1aa1cdef1ea3d45b4e0c78be" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at why this is not really necessary.</source>
          <target state="translated">これが本当に必要ではない理由を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="2473b3ecdba2b7127b07b2c802f7b00878278040" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at why this is&amp;hellip;</source>
          <target state="translated">これがなぜなのかを見てみましょう...</target>
        </trans-unit>
        <trans-unit id="9a054ff013460ad6926f9fa58186e2d76b0ad8dd" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s make an assertion about something on the new page we clicked into. Perhaps we&amp;rsquo;d like to make sure the new URL is the expected URL. We can do that by looking up the URL and chaining an assertion to it with &lt;a href=&quot;../../api/commands/should&quot;&gt;&lt;code&gt;.should()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">クリックした新しいページの何かについてアサーションを作成してみましょう。おそらく、新しいURLが予期されたURLであることを確認したいと思います。これを行うには、URLを&lt;a href=&quot;../../api/commands/should&quot;&gt; &lt;code&gt;.should()&lt;/code&gt; &lt;/a&gt;し、.should（）を使用してアサーションをチェーン化します。</target>
        </trans-unit>
        <trans-unit id="f32f42b3a1cb48d3adbca6e14af7ebc3b75ef494" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s reimagine our &amp;ldquo;Welcome Wizard&amp;rdquo; example from before.</source>
          <target state="translated">以前の「ようこそウィザード」の例を再考してみましょう。</target>
        </trans-unit>
        <trans-unit id="988ea2d35cf0a2611265cba0d2e2a98f99c5709f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s revisit the example from above but assume we&amp;rsquo;re testing some other part of the system.</source>
          <target state="translated">上記の例をもう一度見てみましょう。ただし、システムの他の部分をテストしているとします。</target>
        </trans-unit>
        <trans-unit id="1358f012d696ae41e62d5cafe06bce42c151cd16" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we do not know whether our &lt;code&gt;table&lt;/code&gt; element is scrollable. Sometimes the &lt;code&gt;table&lt;/code&gt; may be scrollable (with 2,000 rows) and sometimes the &lt;code&gt;table&lt;/code&gt; may not be scrollable (with 5 rows). You can ignore the error checking to ensure the element is scrollable by passing &lt;code&gt;ensureScrollable: false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;table&lt;/code&gt; 要素がスクロール可能かどうかわからないとしましょう。時には &lt;code&gt;table&lt;/code&gt; （2,000行で）スクロールすることができ、時には &lt;code&gt;table&lt;/code&gt; （5行で）スクロール可能ではないかもしれません。 &lt;code&gt;ensureScrollable: false&lt;/code&gt; を渡すことにより、要素がスクロール可能であることを確認するためのエラーチェックを無視できます。</target>
        </trans-unit>
        <trans-unit id="39257fadd856fa2ad1912a62339a162eb3e7c1b3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you have an application that has a &lt;em&gt;customer facing portal&lt;/em&gt;, &lt;em&gt;guest facing portal&lt;/em&gt; and an &lt;em&gt;administration facing portal&lt;/em&gt;. You could organize and test these three parts of your application within the same run:</source>
          <target state="translated">たとえば、&lt;em&gt;顧客向けポータル&lt;/em&gt;、&lt;em&gt;ゲスト向けポータル&lt;/em&gt;、&lt;em&gt;管理向けポータル&lt;/em&gt;があるアプリケーションがあるとし&lt;em&gt;ます&lt;/em&gt;。同じ実行内でアプリケーションのこれら3つの部分を整理してテストできます。</target>
        </trans-unit>
        <trans-unit id="1c832551e4b0cffe1a46ffb672aa0a6c9c019d7b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you want to check the type of the events. You might write code like below:</source>
          <target state="translated">イベントの種類を確認したいとします。あなたは以下のようなコードを書くかもしれません：</target>
        </trans-unit>
        <trans-unit id="f795908eb24847d3eda606084a425d84b5bff198" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see some of this in action using our existing test code.</source>
          <target state="translated">既存のテストコードを使用して、この動作の一部を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="37cb465b301b765dd01870d548ebf5a0ea656c1a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a look at an example below.</source>
          <target state="translated">以下の例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="e3855576fc69b0e44654912c35e5aa717c7cab40" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a look at each trade-off in depth:</source>
          <target state="translated">それぞれのトレードオフについて詳しく見てみましょう。</target>
        </trans-unit>
        <trans-unit id="1f47c90e757d9d1c4642991d58d8426850cdba9b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s use &lt;a href=&quot;../../api/commands/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; to tap into the Cypress command during execution and add a &lt;code&gt;debugger&lt;/code&gt; at the appropriate time:</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; &lt;/a&gt;を使用して、実行中にサイプレスコマンドを利用し、適切なタイミングで &lt;code&gt;debugger&lt;/code&gt; を追加しましょう。</target>
        </trans-unit>
        <trans-unit id="f002882ff00789e7c6a104fabd6688a95e127f7a" translate="yes" xml:space="preserve">
          <source>Libraries and Tools</source>
          <target state="translated">ライブラリとツール</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスに基づいてライセンスされています。</target>
        </trans-unit>
        <trans-unit id="5e30eb09d78f62a6dcfe537c5c3654674d6e6725" translate="yes" xml:space="preserve">
          <source>Like most image comparison tools, the plugin also shows a difference view on mouse hover:</source>
          <target state="translated">他の画像比較ツールと同様に、このプラグインもマウスを置いた時に差分表示を行います。</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="b6f43bfcec5d8865957543b9f612c2425b3918ee" translate="yes" xml:space="preserve">
          <source>Linking CI machines for parallelization or grouping</source>
          <target state="translated">並列化やグループ化のためのCIマシンの連携</target>
        </trans-unit>
        <trans-unit id="83ad8510bbd3f22363d068e1c96f82fd0fcccd31" translate="yes" xml:space="preserve">
          <source>Linux</source>
          <target state="translated">Linux</target>
        </trans-unit>
        <trans-unit id="d64113ad4719ae7e5b985168742fe374fd6ff36d" translate="yes" xml:space="preserve">
          <source>Linux 64-bit (&lt;code&gt;?platform=linux&lt;/code&gt;)</source>
          <target state="translated">Linux 64ビット（ &lt;code&gt;?platform=linux&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="775d9b892894ff25bc2027d1e2649f194b953bdd" translate="yes" xml:space="preserve">
          <source>Linux or macOS</source>
          <target state="translated">リナックスまたはマコス</target>
        </trans-unit>
        <trans-unit id="2087ebad183f29af2b58cf518a65de92b8bedf1f" translate="yes" xml:space="preserve">
          <source>Linux/OSX</source>
          <target state="translated">Linux/OSX</target>
        </trans-unit>
        <trans-unit id="73da9a3053f1ab8fa7772b7c663d9b1efb80a862" translate="yes" xml:space="preserve">
          <source>Linux: &lt;code&gt;~/.cache/Cypress&lt;/code&gt;</source>
          <target state="translated">Linux： &lt;code&gt;~/.cache/Cypress&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a40a8f8da308121ab1813f8a8be34f4423c5e470" translate="yes" xml:space="preserve">
          <source>List of Assertions</source>
          <target state="translated">アサーション一覧</target>
        </trans-unit>
        <trans-unit id="f5e95c32033408678a4374d5c71acddfd248b0f7" translate="yes" xml:space="preserve">
          <source>List of available Chai Assertions</source>
          <target state="translated">利用可能なチャイのアサーション一覧</target>
        </trans-unit>
        <trans-unit id="1f39b028fa28484b73cc6b80bdef24a830069b3d" translate="yes" xml:space="preserve">
          <source>List of available Chai-jQuery Assertions</source>
          <target state="translated">利用可能な Chai-jQuery アサーションのリスト</target>
        </trans-unit>
        <trans-unit id="573573a7b64d43e99354afff9d510f81301513e1" translate="yes" xml:space="preserve">
          <source>List of available Sinon-Chai Assertions</source>
          <target state="translated">利用可能なシノン・チャイのアサーション一覧</target>
        </trans-unit>
        <trans-unit id="0c4ad782ed47f4ab54dcefd9357da3b5f48ed433" translate="yes" xml:space="preserve">
          <source>List of events</source>
          <target state="translated">イベント一覧</target>
        </trans-unit>
        <trans-unit id="dc33149633cd3f0a0e0b7cf4ad1aad9aef6e1a06" translate="yes" xml:space="preserve">
          <source>List of plugins</source>
          <target state="translated">プラグイン一覧</target>
        </trans-unit>
        <trans-unit id="8f6a83346dedadca53ddbaf6a4aa0b98a2c19890" translate="yes" xml:space="preserve">
          <source>List the contents of the default &lt;code&gt;cypress.json&lt;/code&gt; configuration file</source>
          <target state="translated">デフォルトの &lt;code&gt;cypress.json&lt;/code&gt; 構成ファイルの内容を一覧表示します</target>
        </trans-unit>
        <trans-unit id="5b21f31a036e2a6f9710615a40b7caa5490588b3" translate="yes" xml:space="preserve">
          <source>Listed in the &lt;a href=&quot;../../plugins/index#visual-testing&quot;&gt;Visual Testing plugins&lt;/a&gt; section.</source>
          <target state="translated">&lt;a href=&quot;../../plugins/index#visual-testing&quot;&gt;ビジュアルテストプラグイン&lt;/a&gt;セクションにリストされています。</target>
        </trans-unit>
        <trans-unit id="237700d410e20f496fd8c4a94154acaff5624a3e" translate="yes" xml:space="preserve">
          <source>Listen for &lt;code&gt;alert&lt;/code&gt; or &lt;code&gt;confirm&lt;/code&gt; calls and change the &lt;code&gt;confirm&lt;/code&gt; behavior</source>
          <target state="translated">&lt;code&gt;alert&lt;/code&gt; 聞いたり、通話を &lt;code&gt;confirm&lt;/code&gt; したり、 &lt;code&gt;confirm&lt;/code&gt; 動作を変更したりする</target>
        </trans-unit>
        <trans-unit id="44f7822fff2bcb1d65145af4cc472ca31943aecf" translate="yes" xml:space="preserve">
          <source>Listen for &lt;code&gt;command:retry&lt;/code&gt; events to understand why Cypress is internally retrying for debugging purposes</source>
          <target state="translated">&lt;code&gt;command:retry&lt;/code&gt; イベントをリッスンして、サイプレスがデバッグ目的で内部的に再試行する理由を理解する</target>
        </trans-unit>
        <trans-unit id="0b65b3442c4678df19f79af70aeb3b85cd0d9b47" translate="yes" xml:space="preserve">
          <source>Listen for &lt;code&gt;uncaught exceptions&lt;/code&gt; and prevent Cypress from failing the test</source>
          <target state="translated">&lt;code&gt;uncaught exceptions&lt;/code&gt; れない例外をリッスンし、サイプレスがテストに失敗するのを防ぎます</target>
        </trans-unit>
        <trans-unit id="47aa4a124779f7c540a6ccdf3ec8fdfacca9d60f" translate="yes" xml:space="preserve">
          <source>Listen for &lt;code&gt;window:before:load&lt;/code&gt; events and modify the &lt;code&gt;window&lt;/code&gt; before any of your app code runs between page transitions</source>
          <target state="translated">&lt;code&gt;window:before:load&lt;/code&gt; イベントをリッスンし、ページ遷移の間にアプリコードが実行される前に &lt;code&gt;window&lt;/code&gt; を変更します</target>
        </trans-unit>
        <trans-unit id="b1614eb657113262f4021ee8457c8ca1b765a5f5" translate="yes" xml:space="preserve">
          <source>Listen for a route matching a returned object literal from a callback function. Functions that return a &lt;code&gt;Promise&lt;/code&gt; will automatically be awaited.</source>
          <target state="translated">コールバック関数から返されたオブジェクトリテラルに一致するルートをリッスンします。 &lt;code&gt;Promise&lt;/code&gt; を返す関数が自動的に待機されます。</target>
        </trans-unit>
        <trans-unit id="89654886ae49143524677f1870f38103571dcfbb" translate="yes" xml:space="preserve">
          <source>Listen for a route matching the specific URL.</source>
          <target state="translated">特定のURLにマッチするルートをリッスンします。</target>
        </trans-unit>
        <trans-unit id="beaa121c5df16babeee394d78065d7bb26a5e196" translate="yes" xml:space="preserve">
          <source>Live reload performance improvements when tests are changed.</source>
          <target state="translated">テストが変更されたときにライブリロードのパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="4ca95322cb587284d05c12ebecb42e6b5ec18c31" translate="yes" xml:space="preserve">
          <source>Load a &lt;code&gt;users.json&lt;/code&gt; fixture</source>
          <target state="translated">&lt;code&gt;users.json&lt;/code&gt; フィクスチャをロードする</target>
        </trans-unit>
        <trans-unit id="9286ab58e426f84c50b0ead6fe1430b8f5b2a37a" translate="yes" xml:space="preserve">
          <source>Load a Chrome extension</source>
          <target state="translated">Chromeの拡張機能を読み込む</target>
        </trans-unit>
        <trans-unit id="8ab913b1d6275e9ceb48e922a517e827e35aefae" translate="yes" xml:space="preserve">
          <source>Load a fixed set of data located in a file.</source>
          <target state="translated">ファイル内にある固定セットのデータを読み込みます。</target>
        </trans-unit>
        <trans-unit id="d44f34c1919153fa4a809df474a5dd961b2cc7ac" translate="yes" xml:space="preserve">
          <source>Load your own chrome extension</source>
          <target state="translated">独自のクローム拡張機能をロードする</target>
        </trans-unit>
        <trans-unit id="11c4e1c1659aa650ee14c2bbcbea3ceac20633cf" translate="yes" xml:space="preserve">
          <source>Local Reporters</source>
          <target state="translated">現地レポーター</target>
        </trans-unit>
        <trans-unit id="810e36e49199a8ab0597bf823d81609511f832a8" translate="yes" xml:space="preserve">
          <source>Location of Cypress binary at run-time</source>
          <target state="translated">実行時のCypressバイナリの位置</target>
        </trans-unit>
        <trans-unit id="a9071ba51a818c8eb370704470363c350b2a603c" translate="yes" xml:space="preserve">
          <source>Log Cypress events</source>
          <target state="translated">Cypress イベントのログ</target>
        </trans-unit>
        <trans-unit id="b1d1e882234b2a9dfe68f933a15adb9744659020" translate="yes" xml:space="preserve">
          <source>Log browser information</source>
          <target state="translated">ブラウザのログ情報</target>
        </trans-unit>
        <trans-unit id="7a18ea1089142721abf404ef0bd3e4eed88046db" translate="yes" xml:space="preserve">
          <source>Log in command using UI</source>
          <target state="translated">UIを利用したログインコマンド</target>
        </trans-unit>
        <trans-unit id="1961857dd16e8d04354a31f83363ca420784d0b5" translate="yes" xml:space="preserve">
          <source>Log in command using request</source>
          <target state="translated">リクエストを使ったログインコマンド</target>
        </trans-unit>
        <trans-unit id="7245a63b158afcf7a8fd676b255be8d6a05bc366" translate="yes" xml:space="preserve">
          <source>Log out command using &lt;code&gt;localStorage&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localStorage&lt;/code&gt; を使用してコマンドをログアウトします</target>
        </trans-unit>
        <trans-unit id="863ccf079eb499445be3d23c4be4fc5952c5dd7c" translate="yes" xml:space="preserve">
          <source>Log out command using UI</source>
          <target state="translated">UIを使ったログアウトコマンド</target>
        </trans-unit>
        <trans-unit id="f8e1df79330e79373110a99d92a83704cbcc5c10" translate="yes" xml:space="preserve">
          <source>Log out when cookie values are created, modified or deleted</source>
          <target state="translated">クッキーの値が作成、変更、削除されたときにログアウトする</target>
        </trans-unit>
        <trans-unit id="f822df594b4c2a8cb991782337e6739e209866e6" translate="yes" xml:space="preserve">
          <source>Log spec information</source>
          <target state="translated">ログスペック情報</target>
        </trans-unit>
        <trans-unit id="c6a917ed1a993e13e9fa8095e055b8d7b1754e0f" translate="yes" xml:space="preserve">
          <source>Log the browser and the number of specs that will be run</source>
          <target state="translated">実行されるブラウザとスペック数を記録する</target>
        </trans-unit>
        <trans-unit id="08943e8f55087c5506a5f7ca1a681ea61695a7d6" translate="yes" xml:space="preserve">
          <source>Log the number of passed tests of a run</source>
          <target state="translated">実行したテストの合格数を記録する</target>
        </trans-unit>
        <trans-unit id="44b281df965d24971b203a14f8af6f35c2a65e27" translate="yes" xml:space="preserve">
          <source>Log the relative spec path to stdout after the spec is run</source>
          <target state="translated">スペック実行後の相対的なスペックパスを標準出力に記録する</target>
        </trans-unit>
        <trans-unit id="234abbf21838e54fefbf7b32f054beaab3203a3e" translate="yes" xml:space="preserve">
          <source>Log the relative spec path to stdout before the spec is run</source>
          <target state="translated">スペック実行前にスペックの相対パスを標準出力に記録する</target>
        </trans-unit>
        <trans-unit id="565bb1bfc0e94fc7f4da5a09fb311dd6c7563ef6" translate="yes" xml:space="preserve">
          <source>Log when cookie values are created, modified or deleted</source>
          <target state="translated">クッキーの値が作成、変更、削除されたときのログ</target>
        </trans-unit>
        <trans-unit id="23013e805cdcccfccb9957860e652d1d267f4008" translate="yes" xml:space="preserve">
          <source>Logging All Events</source>
          <target state="translated">すべてのイベントのロギング</target>
        </trans-unit>
        <trans-unit id="783f02798d5892e34e2b6c2aa451f3417f080785" translate="yes" xml:space="preserve">
          <source>Logging in</source>
          <target state="translated">ログイン</target>
        </trans-unit>
        <trans-unit id="52377cdc16227649b3402555a5029ff43a990fd0" translate="yes" xml:space="preserve">
          <source>Logging in can be more complex than what we&amp;rsquo;ve just covered.</source>
          <target state="translated">ログインは、ここで説明したものよりも複雑になる場合があります。</target>
        </trans-unit>
        <trans-unit id="70a6992b1f5281374b3aedd90080e8a316e124b5" translate="yes" xml:space="preserve">
          <source>Logging in, viewing runs, and setting up new projects to record requires connecting to an external API server. This error displays when we failed to connect to the API server.</source>
          <target state="translated">ログイン、ランの表示、新規プロジェクトの記録設定を行うには、外部APIサーバーへの接続が必要です。このエラーは、APIサーバーへの接続に失敗した場合に表示されます。</target>
        </trans-unit>
        <trans-unit id="257fee490b2bcfb2ec4815f6049deb4aee902e57" translate="yes" xml:space="preserve">
          <source>Logs cypress commands, route request data and browser console errors and warnings to terminal when tests fail on CI.</source>
          <target state="translated">CI上でテストが失敗した場合、cypressコマンド、ルートリクエストデータ、ブラウザコンソールのエラーと警告をターミナルに記録します。</target>
        </trans-unit>
        <trans-unit id="1f0ff0e51a4cdf9cedf302bd85dd5af4c210e752" translate="yes" xml:space="preserve">
          <source>Look at the &lt;a href=&quot;screenshots-and-videos&quot;&gt;video recordings and screenshots&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;screenshots-and-videos&quot;&gt;ビデオ録画とスクリーンショットを&lt;/a&gt;見てください。</target>
        </trans-unit>
        <trans-unit id="7595c7cbfa6c48479b1f4e56957d8d40692498ac" translate="yes" xml:space="preserve">
          <source>Look in the following locations for the policy settings listed above:</source>
          <target state="translated">上記のポリシー設定は、以下の場所を見てください。</target>
        </trans-unit>
        <trans-unit id="2bac4f8fe4751a77f0becc124925f87f3173634a" translate="yes" xml:space="preserve">
          <source>Luckily Cypress supports this use case. Reverse the order of the commands:</source>
          <target state="translated">幸いにもCypressはこのユースケースをサポートしています。コマンドの順序を逆にします。</target>
        </trans-unit>
        <trans-unit id="76866d2f6c76c061d1da6fed916f2d2184b886dc" translate="yes" xml:space="preserve">
          <source>Luckily, Cypress gives a stable platform for &lt;a href=&quot;plugins-guide&quot;&gt;writing plugins&lt;/a&gt; that &lt;em&gt;can perform visual testing&lt;/em&gt;.</source>
          <target state="translated">幸いにも、サイプレスは安定プラットフォームを提供し&lt;a href=&quot;plugins-guide&quot;&gt;、プラグインの書き込み&lt;/a&gt;&lt;em&gt;ビジュアルテストを実行できます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8edb68df1cb3adc8b9a4351e7a73a3beae0ca860" translate="yes" xml:space="preserve">
          <source>Luckily, it is very easy to avoid both of these problems.</source>
          <target state="translated">幸いなことに、この2つの問題を回避することは非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="bce5cbbc84d3e261a03b3a1d0c106e050710935a" translate="yes" xml:space="preserve">
          <source>Luckily, once we understand how retry-ability works and how only the last command is used for assertion retries, we can fix this test for good.</source>
          <target state="translated">幸いなことに、リトライ可能性がどのように働くのか、そしてアサーションのリトライに最後のコマンドだけが使われるのかを理解すれば、このテストを永久に修正することができます。</target>
        </trans-unit>
        <trans-unit id="7306f557ac38a698c07eb0909cd6b734c28b509e" translate="yes" xml:space="preserve">
          <source>Luckily, there are some solutions for this. Instead of introducing arbitrary waits (like &lt;code&gt;sleep 20&lt;/code&gt;) you can use a better option.</source>
          <target state="translated">幸いなことに、これにはいくつかの解決策があります。任意の待機（ &lt;code&gt;sleep 20&lt;/code&gt; など）を導入する代わりに、より良いオプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="08bce2d9a3206bf0d7143d86833197a8534fabc6" translate="yes" xml:space="preserve">
          <source>Mac</source>
          <target state="translated">Mac</target>
        </trans-unit>
        <trans-unit id="4554e883566e450fcbbf053758da9e9575455342" translate="yes" xml:space="preserve">
          <source>Machine-friendly name, like &lt;code&gt;chrome&lt;/code&gt;, &lt;code&gt;electron&lt;/code&gt;, or &lt;code&gt;firefox&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;chrome&lt;/code&gt; 、 &lt;code&gt;electron&lt;/code&gt; 、 &lt;code&gt;firefox&lt;/code&gt; などの機械にわかりやすい名前。</target>
        </trans-unit>
        <trans-unit id="2fb86d9566b3f968bc70b61eaf2f9726efef6367" translate="yes" xml:space="preserve">
          <source>Machines View</source>
          <target state="translated">機械を見る</target>
        </trans-unit>
        <trans-unit id="d0922fb4c1fbea914b1fb1ed0015789ffc4e57f4" translate="yes" xml:space="preserve">
          <source>Major browser version</source>
          <target state="translated">主要ブラウザのバージョン</target>
        </trans-unit>
        <trans-unit id="b540d3540057125828d76f4e0eed6a4573deab7b" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;GET&lt;/code&gt; request</source>
          <target state="translated">作る &lt;code&gt;GET&lt;/code&gt; リクエストを</target>
        </trans-unit>
        <trans-unit id="48dc1bdca0dcc6adf40f54791e606df71a0fa6dd" translate="yes" xml:space="preserve">
          <source>Make a request using a specific method. If no method is defined, Cypress uses the &lt;code&gt;GET&lt;/code&gt; method by default.</source>
          <target state="translated">特定の方法を使用してリクエストを作成します。メソッドが定義されていない場合、サイプレスはデフォルトで &lt;code&gt;GET&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="cebb171a26b6cbebac4e0186fcb263d23c59626e" translate="yes" xml:space="preserve">
          <source>Make an HTTP request.</source>
          <target state="translated">HTTPリクエストを行います。</target>
        </trans-unit>
        <trans-unit id="ce97028323163e41f64fdde91f5280c6c32b921e" translate="yes" xml:space="preserve">
          <source>Make an assertion about the document</source>
          <target state="translated">文書についてのアサーションを行う</target>
        </trans-unit>
        <trans-unit id="c3d6c8953e63806cf660c6022400447a4cfbaa00" translate="yes" xml:space="preserve">
          <source>Make an assertion about the resulting application state.</source>
          <target state="translated">結果のアプリケーションの状態についてアサーションを行います。</target>
        </trans-unit>
        <trans-unit id="f2517822c2371847d9cdd708bfbf40096367aca1" translate="yes" xml:space="preserve">
          <source>Make an assertion on the 3rd row of a table</source>
          <target state="translated">表の3行目にアサーションを作成する</target>
        </trans-unit>
        <trans-unit id="1614221dfe745bd295f21b986c5166c0fbc9c529" translate="yes" xml:space="preserve">
          <source>Make an assertion on the focused element</source>
          <target state="translated">フォーカスされた要素についてのアサーションを行う</target>
        </trans-unit>
        <trans-unit id="3ae23d7b673045b84d0697d075bb2527d3bb9bf0" translate="yes" xml:space="preserve">
          <source>Make assertions about every location property</source>
          <target state="translated">すべての場所のプロパティについてのアサーションを作成します。</target>
        </trans-unit>
        <trans-unit id="f8b88a39a2318a470e92995b216437be91a61196" translate="yes" xml:space="preserve">
          <source>Make multiple assertions against the same subject.</source>
          <target state="translated">同じ対象に対して複数の主張をする。</target>
        </trans-unit>
        <trans-unit id="0a53eb093ff04b19bf374891359d8465dc82f9f7" translate="yes" xml:space="preserve">
          <source>Make sure not to start a new watcher each time it is called. Instead, cache the watcher and, on subsequent calls, return a promise that resolves when the latest version of the file has been processed.</source>
          <target state="translated">呼び出されるたびに新しいウォッチャーを起動しないようにしてください。その代わり、ウォッチャーをキャッシュし、その後の呼び出しでは、ファイルの最新バージョンが処理されたときに解決する約束を返します。</target>
        </trans-unit>
        <trans-unit id="9ff705689fab9890b9783256609183ae05158795" translate="yes" xml:space="preserve">
          <source>Make sure that you have already run &lt;a href=&quot;https://docs.npmjs.com/cli/init&quot;&gt;&lt;code&gt;npm init&lt;/code&gt;&lt;/a&gt; or have a &lt;code&gt;node_modules&lt;/code&gt; folder or &lt;code&gt;package.json&lt;/code&gt; file in the root of your project to ensure cypress is installed in the correct directory.</source>
          <target state="translated">サイプレスが正しいディレクトリにインストールされていることを確認するには、プロジェクトのルートに&lt;a href=&quot;https://docs.npmjs.com/cli/init&quot;&gt; &lt;code&gt;npm init&lt;/code&gt; &lt;/a&gt;がすでに実行されているか、 &lt;code&gt;node_modules&lt;/code&gt; フォルダーまたは &lt;code&gt;package.json&lt;/code&gt; ファイルがあることを確認してください。</target>
        </trans-unit>
        <trans-unit id="4222f7cb17edf447486ac1c51fb1e178f2db8fc0" translate="yes" xml:space="preserve">
          <source>Make sure you &lt;a href=&quot;../getting-started/installing-cypress&quot;&gt;install&lt;/a&gt; and &lt;a href=&quot;../getting-started/installing-cypress#Opening-Cypress&quot;&gt;open&lt;/a&gt; it first!</source>
          <target state="translated">まず&lt;a href=&quot;../getting-started/installing-cypress&quot;&gt;インストール&lt;/a&gt;して&lt;a href=&quot;../getting-started/installing-cypress#Opening-Cypress&quot;&gt;開い&lt;/a&gt;てください！</target>
        </trans-unit>
        <trans-unit id="ab4c2e49c8df5c39471365b8b727448c92d15cc5" translate="yes" xml:space="preserve">
          <source>Make sure your Developer Tools are open and you can get pretty close to &amp;ldquo;seeing&amp;rdquo; the calculations Cypress is performing.</source>
          <target state="translated">開発ツールが開いていることを確認してください。サイプレスが実行している計算を「確認」するのにかなり近づくことができます。</target>
        </trans-unit>
        <trans-unit id="0a2761f8fc063acf9a5c332f3a583b75037e497d" translate="yes" xml:space="preserve">
          <source>Make your custom commands composable and as unopinionated as possible. Cramming too much into them makes them inflexible and requires more and more options passing to control their behavior.</source>
          <target state="translated">カスタムコマンドは構成可能なものにして、可能な限り偏見のないものにしてください。詰め込みすぎると柔軟性がなくなり、挙動を制御するために、より多くのオプションを渡す必要が出てきます。</target>
        </trans-unit>
        <trans-unit id="78fa83e50f14e9c6022319a4984431cf4991bfba" translate="yes" xml:space="preserve">
          <source>Making multiple requests to the same route</source>
          <target state="translated">同一ルートに複数のリクエストを行う</target>
        </trans-unit>
        <trans-unit id="e78c1f318260b5dc42548187badf43499117b433" translate="yes" xml:space="preserve">
          <source>Manage organizations</source>
          <target state="translated">組織の管理</target>
        </trans-unit>
        <trans-unit id="b7ee3c4dd0a46c8618da4ec41c685dff32c86d6e" translate="yes" xml:space="preserve">
          <source>Manage users</source>
          <target state="translated">ユーザーの管理</target>
        </trans-unit>
        <trans-unit id="27553769f18b12c6edb40359e7d0c44ecc8e7bab" translate="yes" xml:space="preserve">
          <source>Managing Organizations</source>
          <target state="translated">組織の管理</target>
        </trans-unit>
        <trans-unit id="06127dcf56e6c198e1007c1bb15671dfa19e9ffc" translate="yes" xml:space="preserve">
          <source>Manipulate the screenshot image by resizing or cropping it</source>
          <target state="translated">スクリーンショット画像のサイズを変更したり、トリミングしたりして、スクリーンショット画像を操作する</target>
        </trans-unit>
        <trans-unit id="f09ef90b04cf487cb5b71882220ba013a593a394" translate="yes" xml:space="preserve">
          <source>Manipulating a database (seeding, reading, writing, etc.)</source>
          <target state="translated">データベースの操作(種付け、読み込み、書き込みなど</target>
        </trans-unit>
        <trans-unit id="699e2c5353d23f547aa773828ab0e3393d57e921" translate="yes" xml:space="preserve">
          <source>Manual navigation after tests run now works reliably.</source>
          <target state="translated">テスト実行後の手動ナビゲーションが確実に動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="7a8edb137bcaa335484528651807038fc4caaff4" translate="yes" xml:space="preserve">
          <source>Many OAuth providers also throttle the number of web requests you can make to them. For instance, if you try to test Google, Google will &lt;strong&gt;automatically&lt;/strong&gt; detect that you are not a human and instead of giving you an OAuth login screen, they will make you fill out a captcha.</source>
          <target state="translated">多くのOAuthプロバイダーはまた、それらに対して行うことができるWeb要求の数を抑制します。たとえば、Googleをテストしようとすると、Googleはあなたが人間でないことを&lt;strong&gt;自動的に&lt;/strong&gt;検出し、OAuthログイン画面を表示する代わりに、キャプチャを入力させます。</target>
        </trans-unit>
        <trans-unit id="302b90335ecbeb483cdd007f3a8c592ec180fe89" translate="yes" xml:space="preserve">
          <source>Many OAuth providers run A/B experiments, which means that their login screen is dynamically changing. This makes automated testing difficult.</source>
          <target state="translated">多くのOAuthプロバイダはA/B実験を行っており、ログイン画面が動的に変化することを意味します。そのため、自動テストが難しくなっています。</target>
        </trans-unit>
        <trans-unit id="58b8ebec583e7f9587bcb766eac86fe1c6f5cff2" translate="yes" xml:space="preserve">
          <source>Many additional tests added to the multi-os deployment process.</source>
          <target state="translated">マルチOS展開プロセスに多くの追加テストが追加されました。</target>
        </trans-unit>
        <trans-unit id="49aeb3c9b116e9c0ff3e3425fdabe7ea3186b382" translate="yes" xml:space="preserve">
          <source>Many applications will have already begun routing, initialization, and requests by the time the &lt;code&gt;cy.visit()&lt;/code&gt; in the above code resolves. Therefore creating a &lt;a href=&quot;intercept&quot;&gt;&lt;code&gt;cy.intercept()&lt;/code&gt;&lt;/a&gt; route will happen too late, and Cypress will not process the requests.</source>
          <target state="translated">多くのアプリケーションは、上記のコードの &lt;code&gt;cy.visit()&lt;/code&gt; が解決されるまでに、ルーティング、初期化、および要求をすでに開始しています。したがって、&lt;a href=&quot;intercept&quot;&gt; &lt;code&gt;cy.intercept()&lt;/code&gt; &lt;/a&gt;ルートの作成は遅すぎ、サイプレスはリクエストを処理しません。</target>
        </trans-unit>
        <trans-unit id="41cfb5d324a03fa4926fd5cd22853342474b7e1e" translate="yes" xml:space="preserve">
          <source>Many applications will have already begun routing, initialization, and requests by the time the &lt;code&gt;cy.visit()&lt;/code&gt; in the above code resolves. Therefore creating a &lt;a href=&quot;server&quot;&gt;&lt;code&gt;cy.server()&lt;/code&gt;&lt;/a&gt; will happen too late, and Cypress will not process the requests.</source>
          <target state="translated">上記のコードの &lt;code&gt;cy.visit()&lt;/code&gt; が解決するまでに、多くのアプリケーションはルーティング、初期化、および要求をすでに開始しています。したがって、&lt;a href=&quot;server&quot;&gt; &lt;code&gt;cy.server()&lt;/code&gt; の&lt;/a&gt;作成は遅すぎるため、サイプレスはリクエストを処理しません。</target>
        </trans-unit>
        <trans-unit id="d5b17f1b6812165887f5b5827b59116e76e35e72" translate="yes" xml:space="preserve">
          <source>Many browsers such as Firefox, Safari, and Internet Explorer are not currently supported. Support for more browsers is on our roadmap. You can read an exhaustive explanation about our future cross browser testing strategy &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/310&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Firefox、Safari、Internet Explorerなどの多くのブラウザは現在サポートされていません。より多くのブラウザーのサポートはロードマップにあります。今後のクロスブラウザーテスト戦略についての詳細な説明は、&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/310&quot;&gt;こちらでご覧いただけます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="deccd58d208bf0efdcd7527a95ebdeb681d59e65" translate="yes" xml:space="preserve">
          <source>Many commands have a default, built-in assertion, or rather have requirements that may cause it to fail without needing an explicit assertion you&amp;rsquo;ve added.</source>
          <target state="translated">多くのコマンドには、デフォルトの組み込みアサーションがあり、追加の明示的なアサーションを必要とせずに失敗する可能性がある要件があります。</target>
        </trans-unit>
        <trans-unit id="9212119d80329bd222fa4e9c75948d57ed9efeb5" translate="yes" xml:space="preserve">
          <source>Many error messages have been rewritten to be much more fluent and easier to understand.</source>
          <target state="translated">多くのエラーメッセージは、より流暢に、よりわかりやすく書き換えられています。</target>
        </trans-unit>
        <trans-unit id="1b67d956a31853a13b263fb151fe1f802bc843c4" translate="yes" xml:space="preserve">
          <source>Many first time users look at Cypress code and think it runs synchronously.</source>
          <target state="translated">初めてCypressのコードを見る人の多くは、同期して動作していると思っています。</target>
        </trans-unit>
        <trans-unit id="b627362b19722478ab857b3e0670013bf0bd5bf3" translate="yes" xml:space="preserve">
          <source>Many internal development / debugging processes improved.</source>
          <target state="translated">多くの社内開発/デバッグプロセスが改善されました。</target>
        </trans-unit>
        <trans-unit id="0578bbe35f4cd3360c635588c2bd18aa71e0aaf7" translate="yes" xml:space="preserve">
          <source>Many new configuration options are available for controlling how XHR&amp;rsquo;s are stubbed.</source>
          <target state="translated">XHRのスタブ方法を制御するために、多くの新しい構成オプションが利用可能です。</target>
        </trans-unit>
        <trans-unit id="91450740a314f8d06185e9abd63eb52ed6c619b6" translate="yes" xml:space="preserve">
          <source>Many of our users ask how they can recover from failed commands.</source>
          <target state="translated">私たちのユーザーの多くは、失敗したコマンドからどのようにして回復することができるかを尋ねます。</target>
        </trans-unit>
        <trans-unit id="ebad1da53b473c981bee1a4aa1baaf38d821b85f" translate="yes" xml:space="preserve">
          <source>Many of our users ask how to accomplish this seemingly simple idiom in Cypress.</source>
          <target state="translated">私たちのユーザーの多くは、この一見シンプルなイディオムをCypressでどうやって実現するかを尋ねてきます。</target>
        </trans-unit>
        <trans-unit id="45d1659b5cf476f2b90f2ec2a4b45355baab986a" translate="yes" xml:space="preserve">
          <source>Many of our users run the &lt;em&gt;majority&lt;/em&gt; of their integration tests against a local development server, but then reserve a smaller set of &lt;strong&gt;smoke tests&lt;/strong&gt; that run only against a deployed production app.</source>
          <target state="translated">ユーザーの多くは、ローカル開発サーバーに対して統合テストの&lt;em&gt;大部分&lt;/em&gt;を実行しますが、デプロイされた本番アプリに対してのみ実行する小規模な&lt;strong&gt;煙テストの&lt;/strong&gt;セットを予約します。</target>
        </trans-unit>
        <trans-unit id="66e29d1e52684cd06ac76fbdd13a73851655b327" translate="yes" xml:space="preserve">
          <source>Many of these issues are currently being worked on or are on our &lt;a href=&quot;roadmap&quot;&gt;Roadmap&lt;/a&gt;.</source>
          <target state="translated">これらの問題の多くは、現在取り組んでいるか、&lt;a href=&quot;roadmap&quot;&gt;ロードマップに&lt;/a&gt;載っています。</target>
        </trans-unit>
        <trans-unit id="9f31c471784fde97058873281cbcf93de4eefb85" translate="yes" xml:space="preserve">
          <source>Many people approach this situation by running a command like the following:</source>
          <target state="translated">多くの人は、以下のようなコマンドを実行することでこの状況にアプローチします。</target>
        </trans-unit>
        <trans-unit id="8856cb6286f546e2c07c8c24380ecb11c0baed1d" translate="yes" xml:space="preserve">
          <source>Margin on zero client width / client height is now displayed correctly on command hover and more accurately mimics the way Chrome Dev Tools highlights elements.</source>
          <target state="translated">クライアントの幅/クライアントの高さのマージンがゼロの場合、コマンド ホバーで正しく表示されるようになり、Chrome Dev Tools で要素を強調表示する方法をより正確に模倣できるようになりました。</target>
        </trans-unit>
        <trans-unit id="dba90dd018ee4e6023343ea7d3bbe39b4c1e7b70" translate="yes" xml:space="preserve">
          <source>Massage the subject in some way prior to making the assertion</source>
          <target state="translated">主張をする前に何らかの方法で対象をマッサージする</target>
        </trans-unit>
        <trans-unit id="df045e1dda9af207ebdd22cc46cb4c822dc1b316" translate="yes" xml:space="preserve">
          <source>Match route against any UserId</source>
          <target state="translated">任意の UserId に対してルートをマッチさせる</target>
        </trans-unit>
        <trans-unit id="e3f881aff307db56b041aabd99009eac81961bf6" translate="yes" xml:space="preserve">
          <source>Match the route to a specific method (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, etc).</source>
          <target state="translated">ルートを特定のメソッド（ &lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;POST&lt;/code&gt; 、 &lt;code&gt;PUT&lt;/code&gt; など）に一致させます。</target>
        </trans-unit>
        <trans-unit id="836f70fd7d82393c2699b8755613486047b49b3c" translate="yes" xml:space="preserve">
          <source>Matcher</source>
          <target state="translated">Matcher</target>
        </trans-unit>
        <trans-unit id="8ffced42002a2fa5617b200f8f8fbd54a128af5e" translate="yes" xml:space="preserve">
          <source>Matchers</source>
          <target state="translated">Matchers</target>
        </trans-unit>
        <trans-unit id="ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a" translate="yes" xml:space="preserve">
          <source>Matches</source>
          <target state="translated">Matches</target>
        </trans-unit>
        <trans-unit id="d08b9e8784711a6011e4dbb1e80d47913982b39f" translate="yes" xml:space="preserve">
          <source>Matches &lt;code&gt;*google.com&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*google.com&lt;/code&gt; に一致</target>
        </trans-unit>
        <trans-unit id="a10953a8fb2f1334f3b753eba54b9eb6f7f5199f" translate="yes" xml:space="preserve">
          <source>Matches &lt;code&gt;google.com&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;google.com&lt;/code&gt; に一致</target>
        </trans-unit>
        <trans-unit id="6110e7f5a76f37e450eeeec323764e57b7003ded" translate="yes" xml:space="preserve">
          <source>Matching URL</source>
          <target state="translated">マッチングURL</target>
        </trans-unit>
        <trans-unit id="12cbe10e02e70dd3222978103128ac46f497d423" translate="yes" xml:space="preserve">
          <source>Matching origins and non origin URL&amp;rsquo;s</source>
          <target state="translated">一致するオリジンと非オリジンURL</target>
        </trans-unit>
        <trans-unit id="ce3222a53551b76e3d865f9d5a33f75d3f991d4a" translate="yes" xml:space="preserve">
          <source>Matching requests and routes</source>
          <target state="translated">リクエストとルートのマッチング</target>
        </trans-unit>
        <trans-unit id="2efbcbe6aa01bcece60387200b3c69ef872b2cb3" translate="yes" xml:space="preserve">
          <source>Maybe not! For these scenarios we give you a simple escape hatch to bypass all of the checks above and just force events to happen!</source>
          <target state="translated">そうではないかもしれません これらのシナリオでは、上記のチェックをすべてバイパスして、イベントを強制的に発生させるためのシンプルな脱出ハッチを提供しています!</target>
        </trans-unit>
        <trans-unit id="431c09700fcab65da1715e0f662680af5c825f3f" translate="yes" xml:space="preserve">
          <source>Memory optimizations in CI.</source>
          <target state="translated">CIにおけるメモリの最適化。</target>
        </trans-unit>
        <trans-unit id="d12885576bb1823b9e1c4cce59321dfbf5b05837" translate="yes" xml:space="preserve">
          <source>Memory usage improvements.</source>
          <target state="translated">メモリ使用量の改善。</target>
        </trans-unit>
        <trans-unit id="8e8a0736134cc1207e9b9c709ee22329176acbb8" translate="yes" xml:space="preserve">
          <source>Merges multiple mochawesome JSON reports</source>
          <target state="translated">複数のMochawesome JSONレポートをマージ</target>
        </trans-unit>
        <trans-unit id="2e002ffc65162e59c29d93e6f7a9ddbb30ca09c9" translate="yes" xml:space="preserve">
          <source>Merging queries</source>
          <target state="translated">クエリのマージ</target>
        </trans-unit>
        <trans-unit id="07a9c92e56c3913ed2b7410987cce0db987e75ea" translate="yes" xml:space="preserve">
          <source>Merry Christmas everyone ;-)</source>
          <target state="translated">メリークリスマス)</target>
        </trans-unit>
        <trans-unit id="19955b50e1890263325c103ee200ecdbb71035f9" translate="yes" xml:space="preserve">
          <source>Merry Christmas everyone!</source>
          <target state="translated">みんなメリークリスマス</target>
        </trans-unit>
        <trans-unit id="68f4145fee7dde76afceb910165924ad14cf0d00" translate="yes" xml:space="preserve">
          <source>Message</source>
          <target state="translated">Message</target>
        </trans-unit>
        <trans-unit id="cef6aba945ae2a8391fb0b6ab9733b6400f87525" translate="yes" xml:space="preserve">
          <source>Message to be printed to Cypress Command Log. Accepts a Markdown formatted message.</source>
          <target state="translated">Cypress コマンドログに印刷するメッセージ。Markdown フォーマットのメッセージを受け付けます。</target>
        </trans-unit>
        <trans-unit id="bb2469146b0b0ca67690cb92451e53de5427570d" translate="yes" xml:space="preserve">
          <source>Message: &lt;code&gt;COMMIT_INFO_MESSAGE&lt;/code&gt;</source>
          <target state="translated">メッセージ： &lt;code&gt;COMMIT_INFO_MESSAGE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="3583720023ed685351cee9bf652377a3f0e66a18" translate="yes" xml:space="preserve">
          <source>Method and URL</source>
          <target state="translated">メソッドとURL</target>
        </trans-unit>
        <trans-unit id="479945670b01027341d48afec46812b492c18ac0" translate="yes" xml:space="preserve">
          <source>Method and Value</source>
          <target state="translated">方法と価値</target>
        </trans-unit>
        <trans-unit id="235d62c34b5da2f99dbd542ba942c4ea6d60bbf0" translate="yes" xml:space="preserve">
          <source>Method to match against requests</source>
          <target state="translated">リクエストとのマッチング方法</target>
        </trans-unit>
        <trans-unit id="38f44181f4d91c52c894dfa6d08bb60ae8a6f477" translate="yes" xml:space="preserve">
          <source>Method, URL, and Body</source>
          <target state="translated">メソッド、URL、ボディ</target>
        </trans-unit>
        <trans-unit id="11df8b01186108002422ecfc886c7cbc9528bde7" translate="yes" xml:space="preserve">
          <source>Migrating &lt;code&gt;cy.route()&lt;/code&gt; to &lt;code&gt;cy.intercept()&lt;/code&gt;</source>
          <target state="translated">移行 &lt;code&gt;cy.route()&lt;/code&gt; に &lt;code&gt;cy.intercept()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bc93878c3ba17340102ebf0f740f8c3302add0b" translate="yes" xml:space="preserve">
          <source>Milliseconds</source>
          <target state="translated">Milliseconds</target>
        </trans-unit>
        <trans-unit id="509e2230d08e6046ee2ef1e68e1c2d66e4ce5243" translate="yes" xml:space="preserve">
          <source>Mimic user typing behavior</source>
          <target state="translated">ユーザーのタイピング動作を模倣</target>
        </trans-unit>
        <trans-unit id="cfd23a6e536b1366fa441556525d84fb56ca0562" translate="yes" xml:space="preserve">
          <source>Minor improvements to contributing docs and scripts. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1665&quot;&gt;#1665&lt;/a&gt;.</source>
          <target state="translated">寄稿するドキュメントとスクリプトのマイナーな改善。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1665&quot;&gt;＃1665を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="124e85abbb2009c7204c3bf0ef8e142433a502d4" translate="yes" xml:space="preserve">
          <source>Mirroring</source>
          <target state="translated">Mirroring</target>
        </trans-unit>
        <trans-unit id="0a893ece8e469a3ca3d935c49f41d08d04b75ecc" translate="yes" xml:space="preserve">
          <source>Misc</source>
          <target state="translated">Misc</target>
        </trans-unit>
        <trans-unit id="315d4987ea678a3937a8ad8dd5906795fea294bc" translate="yes" xml:space="preserve">
          <source>Mix and match, typically have one true end-to-end test, and then stub the rest</source>
          <target state="translated">ミックス&amp;マッチ、通常は1つの真のエンドツーエンドのテストを行い、残りの部分をスタブにします。</target>
        </trans-unit>
        <trans-unit id="f8455bb68e35c806ea06e6d44559f99c3c5014ce" translate="yes" xml:space="preserve">
          <source>Mobile testing helper for Cypress</source>
          <target state="translated">サイプレスのモバイルテストヘルパー</target>
        </trans-unit>
        <trans-unit id="814d5c9075ac58da08deb4e3d88f6089a78f380d" translate="yes" xml:space="preserve">
          <source>Mocha</source>
          <target state="translated">Mocha</target>
        </trans-unit>
        <trans-unit id="09299d24728ba4d7f2ab3e4726b8dc2a351b8d2b" translate="yes" xml:space="preserve">
          <source>Mocha automatically shares contexts for us across all applicable hooks for each test. Additionally these aliases and properties are automatically cleaned up after each test.</source>
          <target state="translated">Mocha は、テストごとに適用可能なすべてのフックのコンテキストを自動的に共有してくれます。さらに、これらのエイリアスとプロパティは、各テストの後に自動的にクリーンアップされます。</target>
        </trans-unit>
        <trans-unit id="70c4693bafb11398e35d34e3b4baa1b0a03e19d0" translate="yes" xml:space="preserve">
          <source>Mocha&amp;rsquo;s built-in reporters</source>
          <target state="translated">モカの組み込みレポーター</target>
        </trans-unit>
        <trans-unit id="9b10a344b67ae24fcc616378433969201b4947ff" translate="yes" xml:space="preserve">
          <source>Mochawesome now works correctly and outputs files in all versions. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/551&quot;&gt;#551&lt;/a&gt;.</source>
          <target state="translated">Mochawesomeが正しく動作し、すべてのバージョンのファイルを出力するようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/551&quot;&gt;＃551を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="3ba4fd3a12340764d2d6185f0628b20bfae2a6db" translate="yes" xml:space="preserve">
          <source>Mochawesome will exit correctly with code &lt;code&gt;1&lt;/code&gt; when a hook fails. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1063&quot;&gt;#1063&lt;/a&gt;.</source>
          <target state="translated">Mochawesomeは、フックが失敗すると、コード &lt;code&gt;1&lt;/code&gt; で正しく終了します。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1063&quot;&gt;＃1063&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e982a9fbd6d7ea055f3583daa61b8cf12dcdfb83" translate="yes" xml:space="preserve">
          <source>Modified the &lt;code&gt;document.hasFocus()&lt;/code&gt; method to return &lt;code&gt;true&lt;/code&gt; if the top window (Cypress window) is in focus. This should now correctly match how your application behaves outside of Cypress. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1940&quot;&gt;#1940&lt;/a&gt;.</source>
          <target state="translated">一番上のウィンドウ（サイプレスウィンドウ）がフォーカスされている場合に &lt;code&gt;true&lt;/code&gt; を返すように &lt;code&gt;document.hasFocus()&lt;/code&gt; メソッドを変更しました。これは、サイプレス外でのアプリケーションの動作と正しく一致するはずです。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1940&quot;&gt;＃1940を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="1f7dd5e6b53a181538f5b496c3e397f65fcff0fb" translate="yes" xml:space="preserve">
          <source>Modifier effects</source>
          <target state="translated">変更効果</target>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="5a53f153d15be1c568be25f585edd0190baca4a1" translate="yes" xml:space="preserve">
          <source>Modifiers are automatically released between tests, even with &lt;code&gt;{release: false}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{release: false}&lt;/code&gt; ても、修飾子はテスト間で自動的に解放されます。</target>
        </trans-unit>
        <trans-unit id="26d367dff38eac0b85a9568bde2c53c2423d004a" translate="yes" xml:space="preserve">
          <source>Modifiers are simulated by setting their corresponding values to &lt;code&gt;true&lt;/code&gt; for key and click events. So, for example, activating the &lt;code&gt;{shift}&lt;/code&gt; modifier will set &lt;code&gt;event.shiftKey&lt;/code&gt; to true for any key events, such as &lt;code&gt;keydown&lt;/code&gt;.</source>
          <target state="translated">修飾子は、キーイベントとクリックイベントの対応する値を &lt;code&gt;true&lt;/code&gt; に設定することによってシミュレートされます。したがって、たとえば &lt;code&gt;{shift}&lt;/code&gt; 修飾子を &lt;code&gt;event.shiftKey&lt;/code&gt; すると、 &lt;code&gt;keydown&lt;/code&gt; などのすべてのキーイベントに対してevent.shiftKeyがtrueに設定されます。</target>
        </trans-unit>
        <trans-unit id="682e67798b95a80ed10baf13833a0428f45ff4c3" translate="yes" xml:space="preserve">
          <source>Modify Electron app switches</source>
          <target state="translated">エレクトロンアプリのスイッチを変更</target>
        </trans-unit>
        <trans-unit id="ef6bdfed66bc550b98a08f356b417584d018e6c7" translate="yes" xml:space="preserve">
          <source>Modify args based on browser</source>
          <target state="translated">ブラウザに応じて引数を変更する</target>
        </trans-unit>
        <trans-unit id="9f6cb2abde0bfdde4e12f1e9893c3c51c906387d" translate="yes" xml:space="preserve">
          <source>Modify browser launch arguments, preferences, and extensions</source>
          <target state="translated">ブラウザの起動引数、環境設定、および拡張機能を変更する</target>
        </trans-unit>
        <trans-unit id="0b343474d47e423ff4e127d031d52708ec8b2267" translate="yes" xml:space="preserve">
          <source>Modify browser launch arguments:</source>
          <target state="translated">ブラウザの起動引数を変更します。</target>
        </trans-unit>
        <trans-unit id="32d0c25b785344d57cd3b1dd991846a745b59161" translate="yes" xml:space="preserve">
          <source>Modify options for TypeScript compilation</source>
          <target state="translated">TypeScript コンパイル用のオプションを変更する</target>
        </trans-unit>
        <trans-unit id="2d6f161a8054c6e895ee899296c1384958a789cb" translate="yes" xml:space="preserve">
          <source>Modify screenshot details</source>
          <target state="translated">スクリーンショットの詳細を変更する</target>
        </trans-unit>
        <trans-unit id="9f4f49b27873da79133502b4415ba8406222f55c" translate="yes" xml:space="preserve">
          <source>Modify screenshot path</source>
          <target state="translated">スクリーンショットのパスを変更する</target>
        </trans-unit>
        <trans-unit id="f854a4df77032cb21feee6480ee2489d112f2d87" translate="yes" xml:space="preserve">
          <source>Modify your Application before it loads after page transitions</source>
          <target state="translated">ページ遷移後にロードする前にアプリケーションを修正する</target>
        </trans-unit>
        <trans-unit id="c32630d3c0ae2ff96b5fb18c71fff0357e46ddaf" translate="yes" xml:space="preserve">
          <source>Modifying an incoming response</source>
          <target state="translated">着信応答を変更する</target>
        </trans-unit>
        <trans-unit id="89cab456f9d18bc059b465ce59388cf3ea441cb9" translate="yes" xml:space="preserve">
          <source>Modifying an outgoing request</source>
          <target state="translated">送信リクエストの変更</target>
        </trans-unit>
        <trans-unit id="20a8393b6cce3c25730fdedc4368d43e36a833c4" translate="yes" xml:space="preserve">
          <source>Modifying fixture data before using it</source>
          <target state="translated">フィクスチャデータを使用する前に修正する</target>
        </trans-unit>
        <trans-unit id="7ee83fed2e8bf53e577b314dd959ae5c55d31275" translate="yes" xml:space="preserve">
          <source>Module API</source>
          <target state="translated">モジュールAPI</target>
        </trans-unit>
        <trans-unit id="018c7f864edc24dac6c48e2bea114c9d3ee3c3d6" translate="yes" xml:space="preserve">
          <source>Module for adding visual regression testing to Cypress.</source>
          <target state="translated">Cypress にビジュアルリグレッションテストを追加するためのモジュールです。</target>
        </trans-unit>
        <trans-unit id="f1c9b76d560c89c55f48f9d201f33ee01912eeed" translate="yes" xml:space="preserve">
          <source>Month Inputs</source>
          <target state="translated">月の入力</target>
        </trans-unit>
        <trans-unit id="45b8f20869e24872df19def36622f5cffb3b60e7" translate="yes" xml:space="preserve">
          <source>More &lt;code&gt;cy.spy()&lt;/code&gt; examples</source>
          <target state="translated">その他の &lt;code&gt;cy.spy()&lt;/code&gt; の例</target>
        </trans-unit>
        <trans-unit id="4560ff401774bfb5b2711a3156e92fb27b6be5ac" translate="yes" xml:space="preserve">
          <source>More &lt;code&gt;cy.stub()&lt;/code&gt; examples</source>
          <target state="translated">その他の &lt;code&gt;cy.stub()&lt;/code&gt; の例</target>
        </trans-unit>
        <trans-unit id="a033cdaa694d2f3dab32939161991cb126b374dd" translate="yes" xml:space="preserve">
          <source>More Info:</source>
          <target state="translated">詳細はこちら</target>
        </trans-unit>
        <trans-unit id="c7edc0bf54b3bf2bdd3b7b485cef9f4031121657" translate="yes" xml:space="preserve">
          <source>More changes to prepare for server adapters,</source>
          <target state="translated">サーバーアダプターに備えるための変更点が増えました。</target>
        </trans-unit>
        <trans-unit id="98fbe8b660ac4b398b4966666617d52580c9d094" translate="yes" xml:space="preserve">
          <source>More content was added to our &lt;a href=&quot;../tooling/code-coverage&quot;&gt;Code Coverage&lt;/a&gt; doc.</source>
          <target state="translated">&lt;a href=&quot;../tooling/code-coverage&quot;&gt;コードカバレッジ&lt;/a&gt;ドキュメントにコンテンツが追加されました。</target>
        </trans-unit>
        <trans-unit id="6f099371f505f33a215bcb52e60d5c2746d87e5a" translate="yes" xml:space="preserve">
          <source>Most CI providers will automatically kill background processes so you don&amp;rsquo;t have to worry about cleaning up your server process once Cypress finishes.</source>
          <target state="translated">ほとんどのCIプロバイダーはバックグラウンドプロセスを自動的に強制終了するため、サイプレスの終了後にサーバープロセスをクリーンアップする必要はありません。</target>
        </trans-unit>
        <trans-unit id="af6c80da5531ea12bcd3adc0689e100aa64af93d" translate="yes" xml:space="preserve">
          <source>Most likely fixed a bug that was crashing Cypress due to &lt;code&gt;Cannot set headers after they've been sent&lt;/code&gt;. We were unable to write a test for this since we could not recreate the error, but analyzed how it &lt;em&gt;may&lt;/em&gt; happen and fixed the code there. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;Open an issue&lt;/a&gt; if you see this error, it will be obvious since Cypress will literally crash.</source>
          <target state="translated">&lt;code&gt;Cannot set headers after they've been sent&lt;/code&gt; ためにサイプレスをクラッシュさせていたバグを修正した可能性が高いです。エラーを再現できなかったため、このテストを作成できませんでしたが、エラーがどのように発生&lt;em&gt;する&lt;/em&gt;かを分析し、そこでコードを修正しました。このエラーが表示された場合&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;は問題を開い&lt;/a&gt;てください。サイプレスは文字通りクラッシュするため、それは明らかです。</target>
        </trans-unit>
        <trans-unit id="f394c1de5256dc0e2025bdec29ee0354d43290a0" translate="yes" xml:space="preserve">
          <source>Most of the action commands now take multiple snapshots (giving you a precise look at an action prior to it happening, and then afterwards).</source>
          <target state="translated">ほとんどのアクションコマンドは、複数のスナップショットを取るようになりました(アクションが発生する前のアクションと発生後のアクションを正確に見ることができます)。</target>
        </trans-unit>
        <trans-unit id="b9543f0af4fafcd6d2a2a813d8ce702ba83f3a2c" translate="yes" xml:space="preserve">
          <source>Most of the time this use case is needed when users click an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; that opens a new tab. Users then want to switch to that tab to verify that the content loaded. But, you shouldn&amp;rsquo;t need to do this. In fact we have &lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html#Testing-the-DOM&quot;&gt;recipes of showing you how to test this without multiple tabs&lt;/a&gt;.</source>
          <target state="translated">ほとんどの場合、この使用例は、ユーザーが新しいタブを開く &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; をクリックしたときに必要になります。次に、ユーザーはそのタブに切り替えて、コンテンツが読み込まれたことを確認します。しかし、これを行う必要はありません。実際、&lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html#Testing-the-DOM&quot;&gt;複数のタブなしでこれをテストする方法を示すレシピがあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7f098ddab7cd85595b7bc50c469384586ac99b82" translate="yes" xml:space="preserve">
          <source>Most of the time, when querying for elements, you expect them to eventually exist. But sometimes you wish to wait until they &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; exist.</source>
          <target state="translated">ほとんどの場合、要素のクエリを実行すると、最終的には要素が存在することが予想されます。しかし、それら&lt;em&gt;が&lt;/em&gt;存在&lt;em&gt;しなくなる&lt;/em&gt;まで待つことを望む場合があります。</target>
        </trans-unit>
        <trans-unit id="29a782808551f348930fba38dd0a762c24097d5e" translate="yes" xml:space="preserve">
          <source>Most testing tools (like Selenium) operate by running outside of the browser and executing remote commands across the network. &lt;em&gt;Cypress is the exact opposite.&lt;/em&gt; Cypress is executed in the same run loop as your application.</source>
          <target state="translated">ほとんどのテストツール（Seleniumなど）は、ブラウザの外部で実行し、ネットワーク経由でリモートコマンドを実行することによって動作します。&lt;em&gt;サイプレスは正反対です。&lt;/em&gt;サイプレスは、アプリケーションと同じ実行ループで実行されます。</target>
        </trans-unit>
        <trans-unit id="80c34b003b881af372ec0bfca3c68bc5dfc2cdb0" translate="yes" xml:space="preserve">
          <source>Mounting a project directory with an existing &lt;code&gt;node_modules&lt;/code&gt; into a &lt;code&gt;cypress/base&lt;/code&gt; docker image &lt;strong&gt;will not work&lt;/strong&gt;:</source>
          <target state="translated">既存でプロジェクトディレクトリをマウント &lt;code&gt;node_modules&lt;/code&gt; に &lt;code&gt;cypress/base&lt;/code&gt; ドッキングウィンドウのイメージは&lt;strong&gt;なりません作品&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="b239ecd4f1b125963a812db57dc3cec60573502b" translate="yes" xml:space="preserve">
          <source>Mouse Events</source>
          <target state="translated">マウスイベント</target>
        </trans-unit>
        <trans-unit id="889d0cd771f51813c36f0a1326540e6442b615e4" translate="yes" xml:space="preserve">
          <source>Mousedown cancellation will not cause focus</source>
          <target state="translated">マウスダウンをキャンセルしてもフォーカスは発生しません。</target>
        </trans-unit>
        <trans-unit id="04a4551cf8f2ffd2cc7a1a6a262a29951c273d43" translate="yes" xml:space="preserve">
          <source>Move repeated code in previous tests to &lt;code&gt;before&lt;/code&gt; or &lt;code&gt;beforeEach&lt;/code&gt; hooks.</source>
          <target state="translated">前のテストで繰り返されたコードを &lt;code&gt;before&lt;/code&gt; または &lt;code&gt;beforeEach&lt;/code&gt; フックに移動します。</target>
        </trans-unit>
        <trans-unit id="be2fa0dc690b284e6dfe99319975f6a05b5fcc89" translate="yes" xml:space="preserve">
          <source>Move the clock a number of milliseconds. Any timers within the affected range of time will be called.</source>
          <target state="translated">クロックをミリ秒単位で移動させます。影響を受ける時間の範囲内にあるタイマーはすべてコールされます。</target>
        </trans-unit>
        <trans-unit id="9b5d46d6dc554aac1eec9c8a2ac1ff34ba5998da" translate="yes" xml:space="preserve">
          <source>Move the clock the specified number of &lt;code&gt;milliseconds&lt;/code&gt;. Any timers within the affected range of time will be called.</source>
          <target state="translated">クロックを指定された &lt;code&gt;milliseconds&lt;/code&gt; 数だけ移動します。影響を受ける時間範囲内のタイマーが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5c61bb0d107be71155afebcab18cb29288fb208e" translate="yes" xml:space="preserve">
          <source>Move those Cypress commands into an &lt;code&gt;it(...)&lt;/code&gt; block and everything will work correctly.</source>
          <target state="translated">これらのサイプレスコマンドを &lt;code&gt;it(...)&lt;/code&gt; ブロックに移動すると、すべてが正しく動作します。</target>
        </trans-unit>
        <trans-unit id="5761e4eb671f9f4f0945b4f525ec85951b39678d" translate="yes" xml:space="preserve">
          <source>Move time after overriding a native time function with &lt;a href=&quot;clock&quot;&gt;&lt;code&gt;cy.clock()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;clock&quot;&gt; &lt;code&gt;cy.clock()&lt;/code&gt; &lt;/a&gt;でネイティブの時間関数をオーバーライドした後、時間を移動します。</target>
        </trans-unit>
        <trans-unit id="4c3b0ec167613968f727aab461572d5e6997faa5" translate="yes" xml:space="preserve">
          <source>Moved snapshot message to be affixed to the bottom of the remote app in preparation for cycling through multiple snapshots.</source>
          <target state="translated">複数のスナップショットを循環させるための準備として、リモートアプリの下部に貼るスナップショットメッセージを移動しました。</target>
        </trans-unit>
        <trans-unit id="4c80111af24ff29caaa5295aff90a78cb9762c99" translate="yes" xml:space="preserve">
          <source>Moves cursor down</source>
          <target state="translated">カーソルを下に移動</target>
        </trans-unit>
        <trans-unit id="82954d32c3ed425a1b14e632c4d60273e2189cde" translate="yes" xml:space="preserve">
          <source>Moves cursor left</source>
          <target state="translated">カーソルを左に移動</target>
        </trans-unit>
        <trans-unit id="10e5d58b6d0c9baed5e17aa003f42e4579268bfe" translate="yes" xml:space="preserve">
          <source>Moves cursor right</source>
          <target state="translated">カーソルを右に移動</target>
        </trans-unit>
        <trans-unit id="51e610897322b968cf2cb4fb55f659138cdff9a6" translate="yes" xml:space="preserve">
          <source>Moves cursor to end of typeable element</source>
          <target state="translated">カーソルをタイプ可能な要素の末尾に移動</target>
        </trans-unit>
        <trans-unit id="18f72522a36155f6dfce19e97f98e42ba361987b" translate="yes" xml:space="preserve">
          <source>Moves cursor to the end of the line</source>
          <target state="translated">カーソルを行末に移動</target>
        </trans-unit>
        <trans-unit id="e76fe25f1f40f9931fb081a54b8a92064fef6334" translate="yes" xml:space="preserve">
          <source>Moves cursor to the start of the line</source>
          <target state="translated">カーソルを行頭に移動</target>
        </trans-unit>
        <trans-unit id="647a380e2712638453169ad2cd221bbce09d9b98" translate="yes" xml:space="preserve">
          <source>Moves cursor to the start of typeable element</source>
          <target state="translated">カーソルをタイプ可能な要素の先頭に移動します。</target>
        </trans-unit>
        <trans-unit id="1457b152a68551e25968913f5e97eb00d849a67b" translate="yes" xml:space="preserve">
          <source>Moves cursor up</source>
          <target state="translated">カーソルを上に移動</target>
        </trans-unit>
        <trans-unit id="ed358fdd2c6c1b1051e1dbf45e846f478f5e4e6a" translate="yes" xml:space="preserve">
          <source>Much better. But still coupled to text content that may change.</source>
          <target state="translated">だいぶ良くなりました。しかし、まだ変更される可能性のあるテキストの内容に結合されています。</target>
        </trans-unit>
        <trans-unit id="c77765cac3c7ce5c92f09833a369c83486c36ffe" translate="yes" xml:space="preserve">
          <source>Much slower</source>
          <target state="translated">はるかに遅い</target>
        </trans-unit>
        <trans-unit id="f248990047836f9af40f0eb02ccb3f884aff4b66" translate="yes" xml:space="preserve">
          <source>Multiple &lt;a href=&quot;command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt; calls can be labeled and associated to a &lt;strong&gt;single&lt;/strong&gt; run by passing in the &lt;a href=&quot;command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;--group &amp;lt;name&amp;gt;&lt;/code&gt; flag&lt;/a&gt;, where &lt;code&gt;name&lt;/code&gt; is an arbitrary reference label. The group name must be unique within the associated test run.</source>
          <target state="translated">&lt;a href=&quot;command-line#cypress-run-group-lt-name-gt&quot;&gt; &lt;code&gt;--group &amp;lt;name&amp;gt;&lt;/code&gt; &lt;/a&gt;フラグを渡すことで、複数の&lt;a href=&quot;command-line#cypress-run&quot;&gt; &lt;code&gt;cypress run&lt;/code&gt; &lt;/a&gt;呼び出しにラベルを付け、&lt;strong&gt;1つの&lt;/strong&gt;実行に関連付けることができます。ここで、 &lt;code&gt;name&lt;/code&gt; は任意の参照ラベルです。グループ名は、関連するテスト実行内で一意である必要があります。</target>
        </trans-unit>
        <trans-unit id="48e99bc02a5c317d584a54fa0a48818f479c8440" translate="yes" xml:space="preserve">
          <source>Multiple Assertions</source>
          <target state="translated">複数のアサーション</target>
        </trans-unit>
        <trans-unit id="0922553b0e0a73ead1266b4da2d2a38a75162ebf" translate="yes" xml:space="preserve">
          <source>Multiple Reporters</source>
          <target state="translated">複数の記者</target>
        </trans-unit>
        <trans-unit id="331f9a2c732ec80c48d077d1d11d4db5cb14e773" translate="yes" xml:space="preserve">
          <source>Multiple assertions</source>
          <target state="translated">複数のアサーション</target>
        </trans-unit>
        <trans-unit id="57ec357675f2389696871840a18642befa15466c" translate="yes" xml:space="preserve">
          <source>Multiple browsers open at the same time</source>
          <target state="translated">複数のブラウザを同時に開く</target>
        </trans-unit>
        <trans-unit id="29bb8368a994515e3d19c89c63c64c0f07edd985" translate="yes" xml:space="preserve">
          <source>Multiple reporters examples</source>
          <target state="translated">複数の記者の例</target>
        </trans-unit>
        <trans-unit id="9148fbb8304f4463eb369efa0553bac9a7195cb9" translate="yes" xml:space="preserve">
          <source>Multiple snapshots are now cycled automatically on hover, and the name of the snapshot is displayed.</source>
          <target state="translated">複数のスナップショットがホバー時に自動的に循環し、スナップショットの名前が表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="d69ed4b1357c7fe8fad86436eeb947e3961769c3" translate="yes" xml:space="preserve">
          <source>Multiple tabs</source>
          <target state="translated">複数のタブ</target>
        </trans-unit>
        <trans-unit id="c7a46952c5c2d8fd100a6fbd4c2bcad60f83e8db" translate="yes" xml:space="preserve">
          <source>Multiple values must be separated by a comma, not a space.</source>
          <target state="translated">複数の値はスペースではなくカンマで区切る必要があります。</target>
        </trans-unit>
        <trans-unit id="54ecc4f4fd90a0d84f23eaec608679503bc43cc3" translate="yes" xml:space="preserve">
          <source>My application does A/B testing, how do I account for that?</source>
          <target state="translated">私のアプリケーションはA/Bテストを行っています。</target>
        </trans-unit>
        <trans-unit id="cecb686770f745c887257951b8338a595eac593d" translate="yes" xml:space="preserve">
          <source>My test still passes! The last &lt;code&gt;cy.get('.todo-list')&lt;/code&gt; and the assertion &lt;code&gt;should('have.length', 2)&lt;/code&gt; are clearly showing the spinning indicators, meaning Cypress is requerying for them.</source>
          <target state="translated">私のテストはまだ合格です！最後の &lt;code&gt;cy.get('.todo-list')&lt;/code&gt; とアサーション &lt;code&gt;should('have.length', 2)&lt;/code&gt; は、回転インジケーターを明確に示しています。つまり、サイプレスがそれらを再クエリしています。</target>
        </trans-unit>
        <trans-unit id="7b43145da4a748e6bed58068e2758ad0437c7292" translate="yes" xml:space="preserve">
          <source>My users receive a &amp;ldquo;welcome wizard&amp;rdquo;, but existing ones don&amp;rsquo;t. Can I always close the wizard in case it&amp;rsquo;s shown, and ignore it when it&amp;rsquo;s not?</source>
          <target state="translated">ユーザーには「ようこそウィザード」が表示されますが、既存のウィザードには表示されません。ウィザードが表示されている場合は常に閉じ、表示されていない場合は無視できますか？</target>
        </trans-unit>
        <trans-unit id="ac489d5ae4982a9a391ccbe6c4f85b759a49ec66" translate="yes" xml:space="preserve">
          <source>NPM module for create-react-app applications to instrument source code without ejecting react-scripts</source>
          <target state="translated">create-react-app アプリケーション用の NPM モジュールで、react-scripts をイジェクトせずにソースコードを計測することができます。</target>
        </trans-unit>
        <trans-unit id="d4e7cb43e2a14f0d564f130472a1f8db5d1c42b7" translate="yes" xml:space="preserve">
          <source>NTLM authentication support for Cypress</source>
          <target state="translated">Cypress の NTLM 認証のサポート</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="f9d2933e9257b6e2af23e64c57ebdf5085947fcd" translate="yes" xml:space="preserve">
          <source>Name Value</source>
          <target state="translated">名前 値</target>
        </trans-unit>
        <trans-unit id="b8c2e6ae0fa23d551c1843ea039ab0e3553786e7" translate="yes" xml:space="preserve">
          <source>Name and Value</source>
          <target state="translated">名前と値</target>
        </trans-unit>
        <trans-unit id="fbe5d2f276bca82410d5e445fc3cb42570fbdb36" translate="yes" xml:space="preserve">
          <source>Name of function to be invoked.</source>
          <target state="translated">呼び出される関数の名前。</target>
        </trans-unit>
        <trans-unit id="cdc8ab8381e03a2b2e7079e785d3c581334c1d52" translate="yes" xml:space="preserve">
          <source>Name of native functions that clock should override.</source>
          <target state="translated">クロックがオーバーライドすべきネイティブ関数の名前。</target>
        </trans-unit>
        <trans-unit id="a5060069b5ed173f8884cf707dad275d318888c8" translate="yes" xml:space="preserve">
          <source>Name of property or nested properties (with dot notation) to get.</source>
          <target state="translated">取得するプロパティまたは入れ子になっているプロパティの名前(ドット表記)。</target>
        </trans-unit>
        <trans-unit id="7f5dbb53b1fbd7441597e2204594eaa622731421" translate="yes" xml:space="preserve">
          <source>Named the spec + app iframe so that inside of Chrome Dev Tools the iframe selector will clearly distinguish which iframe is your application versus Cypress.</source>
          <target state="translated">spec+app iframeに名前を付けたので、Chrome Dev Toolsの内部でiframeセレクターがiframeがアプリケーション対Cypressのアプリケーションであるかを明確に区別するようにします。</target>
        </trans-unit>
        <trans-unit id="a61ae26a7f8c60a906482146649f22e33b0fee98" translate="yes" xml:space="preserve">
          <source>Names given to &lt;a href=&quot;../../api/commands/as&quot;&gt;&lt;code&gt;.as()&lt;/code&gt;&lt;/a&gt; now work properly when they contain a &lt;code&gt;.&lt;/code&gt; character. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3512&quot;&gt;#3512&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/as&quot;&gt; &lt;code&gt;.as()&lt;/code&gt; に&lt;/a&gt;指定された名前に、が含まれている場合に正しく機能するようになりました &lt;code&gt;.&lt;/code&gt; キャラクター。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3512&quot;&gt;＃3512を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="bc893c6af718324576f34765093d5f20b6c54411" translate="yes" xml:space="preserve">
          <source>Names of cookies to be preserved. Pass an unlimited number of arguments.</source>
          <target state="translated">保存するクッキーの名前。引数の数に制限はありません。</target>
        </trans-unit>
        <trans-unit id="47b8b73453024c16a33ac79654339beda985ce39" translate="yes" xml:space="preserve">
          <source>Namespaced all cypress internal routes.</source>
          <target state="translated">すべてのサイプレス内部ルートを名前空間にしました。</target>
        </trans-unit>
        <trans-unit id="34803b64f16548b242233b7132d75f6e5f8fe8e6" translate="yes" xml:space="preserve">
          <source>Naming conventions</source>
          <target state="translated">命名規則</target>
        </trans-unit>
        <trans-unit id="801f35e25fc9a9c80bc8e37a7c4aaa9359f4f20b" translate="yes" xml:space="preserve">
          <source>Native Location</source>
          <target state="translated">ネイティブの位置</target>
        </trans-unit>
        <trans-unit id="2e30cc097892427215e0b5070bcb34797f4a0b84" translate="yes" xml:space="preserve">
          <source>Native access</source>
          <target state="translated">ネイティブアクセス</target>
        </trans-unit>
        <trans-unit id="ce5f99883c519caeab9bed25f6e57393b35f5359" translate="yes" xml:space="preserve">
          <source>Navigate back or forward to the previous or next URL in the browser&amp;rsquo;s history.</source>
          <target state="translated">ブラウザの履歴の前のURLまたは次のURLに戻るか進む。</target>
        </trans-unit>
        <trans-unit id="3d054fd3b1c68cde4d6675a4072249d0aa5824b2" translate="yes" xml:space="preserve">
          <source>Navigate to any superdomain without cross-origin errors</source>
          <target state="translated">クロスオリジンエラーなしで任意のスーパードメインへのナビゲート</target>
        </trans-unit>
        <trans-unit id="f003138d5b0ef4f3d03123419a03c71510d01b29" translate="yes" xml:space="preserve">
          <source>Navigating between full page refreshes during tests now works reliably.</source>
          <target state="translated">テスト中に全ページの更新の間を移動すると、確実に動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="ea53187d0b8860192e4cc973b4edf4179ca436b1" translate="yes" xml:space="preserve">
          <source>Nested Properties</source>
          <target state="translated">ネストされたプロパティ</target>
        </trans-unit>
        <trans-unit id="71c8d5da6b113edf1a2be1e1db3f1c016c79d602" translate="yes" xml:space="preserve">
          <source>Nested directories under &lt;code&gt;cypress/support&lt;/code&gt; no longer cause a &lt;code&gt;500&lt;/code&gt; when tests run. This was due to Cypress not ignoring directories and trying to serve them as regular files. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/163&quot;&gt;#163&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cypress/support&lt;/code&gt; の下にネストされたディレクトリがテストの実行時に &lt;code&gt;500&lt;/code&gt; を引き起こすことはなくなりました。これは、サイプレスがディレクトリを無視せず、それらを通常のファイルとして提供しようとしたためです。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/163&quot;&gt;＃163を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="f06563daf6842a8e082fd4615e320fc869bb69d9" translate="yes" xml:space="preserve">
          <source>Nesting</source>
          <target state="translated">Nesting</target>
        </trans-unit>
        <trans-unit id="ec2c20162d70708dfac963668d643cffd68cdc19" translate="yes" xml:space="preserve">
          <source>Network Requests</source>
          <target state="translated">ネットワーク要求</target>
        </trans-unit>
        <trans-unit id="9747f0ed594c9375b5488666b1886defe05defc7" translate="yes" xml:space="preserve">
          <source>Network XHR Requests</source>
          <target state="translated">ネットワークXHRリクエスト</target>
        </trans-unit>
        <trans-unit id="5b10e6f550f2b5b63058d3b037b51be856d701eb" translate="yes" xml:space="preserve">
          <source>Network requests in Kitchen Sink example</source>
          <target state="translated">キッチンシンクでのネットワークリクエスト例</target>
        </trans-unit>
        <trans-unit id="80c3052d33ccdee15ffaaa110c5c39072495fe63" translate="yes" xml:space="preserve">
          <source>Never</source>
          <target state="translated">Never</target>
        </trans-unit>
        <trans-unit id="727da35b772915d16f0be7fd55bf558b6f956678" translate="yes" xml:space="preserve">
          <source>Nevertheless, if you &lt;strong&gt;did&lt;/strong&gt; want to write a test in Cypress, you already have the tools to do this without involving the UI.</source>
          <target state="translated">それでも、サイプレスでテストを記述&lt;strong&gt;し&lt;/strong&gt;たい場合&lt;strong&gt;は&lt;/strong&gt;、UIを使用せずにこれを行うためのツールがすでに用意されています。</target>
        </trans-unit>
        <trans-unit id="5add408b5e4bcec582f1bccaff5cb1b25bb8aea7" translate="yes" xml:space="preserve">
          <source>Nevertheless, it is useful if your command can work in multiple ways - either with an existing subject or without one.</source>
          <target state="translated">それにもかかわらず、コマンドが複数の方法で動作する場合、既存のサブジェクトを使用しても、サブジェクトを使用しなくても、どちらでも動作する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="5623546efbfd7982de21607d02a7a20acfe8f552" translate="yes" xml:space="preserve">
          <source>New &amp;ldquo;.scrollIntoView()&amp;rdquo;</source>
          <target state="translated">新しい「.scrollIntoView（）」</target>
        </trans-unit>
        <trans-unit id="e0a66b791889a58e42d204ab7dc1a3dff26a1467" translate="yes" xml:space="preserve">
          <source>New &amp;ldquo;.trigger()&amp;rdquo;</source>
          <target state="translated">新しい「.trigger（）」</target>
        </trans-unit>
        <trans-unit id="b11235404026cea94c965fa477255344baa5b4c7" translate="yes" xml:space="preserve">
          <source>New &amp;ldquo;Catalog of Events&amp;rdquo;</source>
          <target state="translated">新しい「イベントのカタログ」</target>
        </trans-unit>
        <trans-unit id="48e7e007baf22fdeecebb2e2b6e81b0c61fad499" translate="yes" xml:space="preserve">
          <source>New &amp;ldquo;Cypress.Commands&amp;rdquo;</source>
          <target state="translated">新しい「Cypress.Commands」</target>
        </trans-unit>
        <trans-unit id="66df5a0b16ae1791ab99c356063f69f065ba8e80" translate="yes" xml:space="preserve">
          <source>New &amp;ldquo;Cypress.log&amp;rdquo;</source>
          <target state="translated">新しい「Cypress.log」</target>
        </trans-unit>
        <trans-unit id="79a92c7c66ee582b9058fd5fc553efb82f6784cb" translate="yes" xml:space="preserve">
          <source>New &amp;ldquo;Module API&amp;rdquo; doc</source>
          <target state="translated">新しい「モジュールAPI」ドキュメント</target>
        </trans-unit>
        <trans-unit id="e8bd1252f42e4fca4c6f8c22a10c97df31c87907" translate="yes" xml:space="preserve">
          <source>New &amp;ldquo;cy.scrollTo()&amp;rdquo;</source>
          <target state="translated">新しい「cy.scrollTo（）」</target>
        </trans-unit>
        <trans-unit id="b52b08cd047ce32efc9e565d8c671f3272a9cdd2" translate="yes" xml:space="preserve">
          <source>New &lt;a href=&quot;../../api/commands/scrollintoview&quot;&gt;&lt;code&gt;.scrollIntoView()&lt;/code&gt;&lt;/a&gt; command. Useful for scrolling an element into view. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/498&quot;&gt;#498&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/313&quot;&gt;#313&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/519&quot;&gt;#519&lt;/a&gt;.</source>
          <target state="translated">新しい&lt;a href=&quot;../../api/commands/scrollintoview&quot;&gt; &lt;code&gt;.scrollIntoView()&lt;/code&gt; &lt;/a&gt;コマンド。要素をスクロールして表示するのに便利です。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/498&quot;&gt;＃498&lt;/a&gt;＆&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/313&quot;&gt;＃313&lt;/a&gt;＆&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/519&quot;&gt;＃519を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="b7e8d0643ac2842fa896462c58262be2feebb1a2" translate="yes" xml:space="preserve">
          <source>New &lt;a href=&quot;../../api/commands/scrollto&quot;&gt;&lt;code&gt;cy.scrollTo()&lt;/code&gt;&lt;/a&gt; command. Useful for having a container scroll to a specific position. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/497&quot;&gt;#497&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/313&quot;&gt;#313&lt;/a&gt;.</source>
          <target state="translated">新しい&lt;a href=&quot;../../api/commands/scrollto&quot;&gt; &lt;code&gt;cy.scrollTo()&lt;/code&gt; &lt;/a&gt;コマンド。コンテナを特定の位置までスクロールさせるのに役立ちます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/497&quot;&gt;＃497&lt;/a&gt;および&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/313&quot;&gt;＃313を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="4636a29df1b03ce68f001c75d68df33a20fadda0" translate="yes" xml:space="preserve">
          <source>New &lt;a href=&quot;../../api/commands/trigger&quot;&gt;&lt;code&gt;.trigger()&lt;/code&gt;&lt;/a&gt; command. Useful for triggering arbitrary events. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/406&quot;&gt;#406&lt;/a&gt;.</source>
          <target state="translated">新しい&lt;a href=&quot;../../api/commands/trigger&quot;&gt; &lt;code&gt;.trigger()&lt;/code&gt; &lt;/a&gt;コマンド。任意のイベントをトリガーするのに役立ちます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/406&quot;&gt;＃406を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="0c4966b657880f92ffedb3a818a05218a9361bfe" translate="yes" xml:space="preserve">
          <source>New &lt;a href=&quot;../core-concepts/retry-ability&quot;&gt;Retryability&lt;/a&gt; doc &lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/issues/1278&quot;&gt;#1278&lt;/a&gt;</source>
          <target state="translated">新しい&lt;a href=&quot;../core-concepts/retry-ability&quot;&gt;再試行可能性&lt;/a&gt;ドキュメント&lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/issues/1278&quot;&gt;＃1278&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c6224abd6d37e4b7df6d8246615dc2e521f2908e" translate="yes" xml:space="preserve">
          <source>New &lt;a href=&quot;../tooling/code-coverage&quot;&gt;Code Coverage&lt;/a&gt; doc. Addressed in &lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/pull/1744&quot;&gt;#1744&lt;/a&gt;.</source>
          <target state="translated">新しい&lt;a href=&quot;../tooling/code-coverage&quot;&gt;コードカバレッジ&lt;/a&gt;ドキュメント。&lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/pull/1744&quot;&gt;＃1744で&lt;/a&gt;対処。</target>
        </trans-unit>
        <trans-unit id="c06c51e5ad34aca96b655ef329585dcce09bcbb3" translate="yes" xml:space="preserve">
          <source>New &lt;a href=&quot;../tooling/visual-testing&quot;&gt;Visual Testing&lt;/a&gt; doc. Addressed in &lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/pull/1536&quot;&gt;#1744&lt;/a&gt;.</source>
          <target state="translated">新しい&lt;a href=&quot;../tooling/visual-testing&quot;&gt;ビジュアルテスト&lt;/a&gt;ドキュメント。&lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/pull/1536&quot;&gt;＃1744で&lt;/a&gt;対処。</target>
        </trans-unit>
        <trans-unit id="45a9bfcb0bae540505a183166364c68991379059" translate="yes" xml:space="preserve">
          <source>New &lt;a href=&quot;https://docs.cypress.io/examples/media/courses-media.html&quot;&gt;Courses&lt;/a&gt; doc to list online courses that teach end-to-end testing with Cypress. Addressed in &lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/pull/1766&quot;&gt;#1766&lt;/a&gt;.</source>
          <target state="translated">サイプレスによるエンドツーエンドのテストを教えるオンラインコースをリストする新しい&lt;a href=&quot;https://docs.cypress.io/examples/media/courses-media.html&quot;&gt;コース&lt;/a&gt;ドキュメント。&lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/pull/1766&quot;&gt;＃1766で&lt;/a&gt;対処。</target>
        </trans-unit>
        <trans-unit id="c01771f4befd1d341915bfa2ad870e4c15335501" translate="yes" xml:space="preserve">
          <source>New &lt;a href=&quot;proxy-configuration&quot;&gt;Proxy Configuration&lt;/a&gt; doc. Addressed in &lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/pull/1486&quot;&gt;#1486&lt;/a&gt;.</source>
          <target state="translated">新しい&lt;a href=&quot;proxy-configuration&quot;&gt;プロキシ設定&lt;/a&gt;ドキュメント。&lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/pull/1486&quot;&gt;＃1486で&lt;/a&gt;対処。</target>
        </trans-unit>
        <trans-unit id="c527fb79cbaeebb2b4d7e342ffe60b64f0c2be75" translate="yes" xml:space="preserve">
          <source>New &lt;code&gt;Screenshot API&lt;/code&gt; doc</source>
          <target state="translated">新しい &lt;code&gt;Screenshot API&lt;/code&gt; ドキュメント</target>
        </trans-unit>
        <trans-unit id="fb1f191336063c46e75bf06b257f420bddc66788" translate="yes" xml:space="preserve">
          <source>New &lt;code&gt;cy.message&lt;/code&gt; and &lt;code&gt;cy.msg&lt;/code&gt; commands in preparation for &lt;code&gt;cypress-ruby&lt;/code&gt;, &lt;code&gt;cypress-node&lt;/code&gt;, &lt;code&gt;cypress-*&lt;/code&gt; packages/gem to talk directly to your back end.</source>
          <target state="translated">&lt;code&gt;cypress-ruby&lt;/code&gt; 、 &lt;code&gt;cypress-node&lt;/code&gt; 、 &lt;code&gt;cypress-*&lt;/code&gt; packages / gemがバックエンドと直接通信するための新しい &lt;code&gt;cy.message&lt;/code&gt; および &lt;code&gt;cy.msg&lt;/code&gt; コマンド。</target>
        </trans-unit>
        <trans-unit id="ccf0fb932c68af719e0a3d8893b501ddb1476526" translate="yes" xml:space="preserve">
          <source>New &lt;code&gt;cy.task()&lt;/code&gt; doc</source>
          <target state="translated">新しい &lt;code&gt;cy.task()&lt;/code&gt; ドキュメント</target>
        </trans-unit>
        <trans-unit id="66ff046fcdd5c831a44707609c477fdf4fc22189" translate="yes" xml:space="preserve">
          <source>New &lt;code&gt;options&lt;/code&gt; object replaces old &lt;code&gt;args&lt;/code&gt; as second argument to &lt;code&gt;before:browser:launch&lt;/code&gt;</source>
          <target state="translated">新しい &lt;code&gt;options&lt;/code&gt; オブジェクトは、 &lt;code&gt;before:browser:launch&lt;/code&gt; の2番目の引数として古い &lt;code&gt;args&lt;/code&gt; を置き換えます</target>
        </trans-unit>
        <trans-unit id="186b048c1fffc54afa5ae5b45c6126f9121aeb12" translate="yes" xml:space="preserve">
          <source>New Example CircleCI Orb</source>
          <target state="translated">新しい例 サークルCIオーブ</target>
        </trans-unit>
        <trans-unit id="b2467835ef4ced59e6a3bb4425ddfca35436f27a" translate="yes" xml:space="preserve">
          <source>New chromium upgrade fixes situation where extremely long CI runs would sometimes randomly crash.</source>
          <target state="translated">新しい chromium のアップグレードで、非常に長い CI の実行が時々ランダムにクラッシュしていた状況を修正しました。</target>
        </trans-unit>
        <trans-unit id="3b0e81f655692a4b78802718e1525f4e3835cb13" translate="yes" xml:space="preserve">
          <source>New chromium upgrade prevents synchronous XHR freezes.</source>
          <target state="translated">新しいchromiumのアップグレードで、同期しているXHRのフリーズを防ぐ。</target>
        </trans-unit>
        <trans-unit id="1fdfb5d0314648f4a63cf251b79e32ac9cc3ef54" translate="yes" xml:space="preserve">
          <source>New error message added about policy settings to our &lt;a href=&quot;error-messages&quot;&gt;Error Messages&lt;/a&gt; doc. Addressed in &lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/pull/1754&quot;&gt;#1567&lt;/a&gt;.</source>
          <target state="translated">ポリシー設定に関する新しいエラーメッセージが&lt;a href=&quot;error-messages&quot;&gt;エラーメッセージ&lt;/a&gt;ドキュメントに追加されました。&lt;a href=&quot;https://github.com/cypress-io/cypress-documentation/pull/1754&quot;&gt;＃1567で&lt;/a&gt;対処。</target>
        </trans-unit>
        <trans-unit id="e7d56bb4dd4e297805352880152d0c5342017f31" translate="yes" xml:space="preserve">
          <source>New kind of testing</source>
          <target state="translated">新種のテスト</target>
        </trans-unit>
        <trans-unit id="caca8abdda6b7542ba4c27d38eba79a35954c0b3" translate="yes" xml:space="preserve">
          <source>New testing approaches not possible before</source>
          <target state="translated">これまでにない新しいテストアプローチ</target>
        </trans-unit>
        <trans-unit id="c5f21993ea2385024912dcdd7a29e743d3166f67" translate="yes" xml:space="preserve">
          <source>New traversal commands &lt;a href=&quot;../../api/commands/nextall&quot;&gt;&lt;code&gt;.nextAll()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/commands/nextuntil&quot;&gt;&lt;code&gt;.nextUntil()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/commands/parentsuntil&quot;&gt;&lt;code&gt;.parentsUntil()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/commands/prevall&quot;&gt;&lt;code&gt;.prevAll()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../api/commands/prevuntil&quot;&gt;&lt;code&gt;.prevUntil()&lt;/code&gt;&lt;/a&gt; have been added. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/432&quot;&gt;#432&lt;/a&gt;.</source>
          <target state="translated">新トラバーサルコマンド&lt;a href=&quot;../../api/commands/nextall&quot;&gt; &lt;code&gt;.nextAll()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/commands/nextuntil&quot;&gt; &lt;code&gt;.nextUntil()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/commands/parentsuntil&quot;&gt; &lt;code&gt;.parentsUntil()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/commands/prevall&quot;&gt; &lt;code&gt;.prevAll()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../../api/commands/prevuntil&quot;&gt; &lt;code&gt;.prevUntil()&lt;/code&gt; が&lt;/a&gt;追加されました。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/432&quot;&gt;＃432&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="18528c67a4d488dec41975e8099583755bdee915" translate="yes" xml:space="preserve">
          <source>New users to Cypress may initially find it challenging to work with the asynchronous nature of our APIs.</source>
          <target state="translated">Cypress を初めて利用するユーザーは、最初は API の非同期性を利用するのが難しいと感じるかもしれません。</target>
        </trans-unit>
        <trans-unit id="a7f33b9b463e7684059101ae962fbdc5db1e5eb2" translate="yes" xml:space="preserve">
          <source>Newer CLI versions will not work on versions of Cypress &amp;lt; &lt;code&gt;0.19.0&lt;/code&gt; (but we don&amp;rsquo;t know why this would ever even happen).</source>
          <target state="translated">新しいCLIバージョンは、サイプレス &lt;code&gt;0.19.0&lt;/code&gt; 未満のバージョンでは機能しません（ただし、これが発生する理由さえわかりません）。</target>
        </trans-unit>
        <trans-unit id="ce5f24d36c8abb2269675688704d20ef1014084d" translate="yes" xml:space="preserve">
          <source>Next Right Now - Next.js Boilerplate</source>
          <target state="translated">Next Right Now-Next.js Boilerplate</target>
        </trans-unit>
        <trans-unit id="11fc14203dd0f4441645a9c34d5dd022905f56e4" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="translated">次のステップ</target>
        </trans-unit>
        <trans-unit id="4d8dec2a98dee7b543854ea9ac1414ab296149bb" translate="yes" xml:space="preserve">
          <source>Next.js boilerplate with Jest/Cypress and CI/CD pipeline built-in (monorepo, multi-tenants)</source>
          <target state="translated">Jest/CypressとCI/CDパイプラインを内蔵したNext.jsのボイラープレート(モノレポ、マルチテナント)</target>
        </trans-unit>
        <trans-unit id="d9441960e4fb0272e22515014d077fe67c2c191b" translate="yes" xml:space="preserve">
          <source>No Args</source>
          <target state="translated">アルグなし</target>
        </trans-unit>
        <trans-unit id="4702ee68581472fd4527dd9500e19add3644dbf5" translate="yes" xml:space="preserve">
          <source>No Arguments</source>
          <target state="translated">議論の余地なし</target>
        </trans-unit>
        <trans-unit id="a1b7763da3d955e87848a6114813163fb8ded722" translate="yes" xml:space="preserve">
          <source>No code changes to your server or client code</source>
          <target state="translated">サーバーやクライアントのコードを変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="af6e4ce551c0eb1d83b368d3f348545f83330e27" translate="yes" xml:space="preserve">
          <source>No guarantee your stubbed responses match the actual data the server sends</source>
          <target state="translated">スタブ化されたレスポンスがサーバーが送信する実際のデータと一致する保証はありません。</target>
        </trans-unit>
        <trans-unit id="43930eae8e41956ec9cbaac1e2bb044c5f664376" translate="yes" xml:space="preserve">
          <source>No longer force &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; to navigate to &lt;code&gt;about:blank&lt;/code&gt; prior to navigating to the real url. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/208&quot;&gt;#208&lt;/a&gt;.</source>
          <target state="translated">実際のURLに移動する前に、&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; &lt;/a&gt;に &lt;code&gt;about:blank&lt;/code&gt; への移動を強制しなくなりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/208&quot;&gt;＃208を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="e094a3bccff8bff43909d7b73794f40dad03e972" translate="yes" xml:space="preserve">
          <source>No longer send back a 500 message when initial response status code is 4xx.</source>
          <target state="translated">初期応答ステータスコードが4xxの場合に500メッセージを返信しないようになりました。</target>
        </trans-unit>
        <trans-unit id="cd0af6cfca75c5899cf7e65ad84cc8da0f0de726" translate="yes" xml:space="preserve">
          <source>No matches</source>
          <target state="translated">一致するものはありません。</target>
        </trans-unit>
        <trans-unit id="8ac2290a52ee02b49ea6e0279864b4588412aa0f" translate="yes" xml:space="preserve">
          <source>No matter what is returned in the callback function, &lt;code&gt;.each()&lt;/code&gt; will always yield the original array.</source>
          <target state="translated">コールバック関数で何が返されても、 &lt;code&gt;.each()&lt;/code&gt; は常に元の配列を生成します。</target>
        </trans-unit>
        <trans-unit id="c31694cf5d9a2189eff15a33f1789ab2d94a82f3" translate="yes" xml:space="preserve">
          <source>No need to use &lt;code&gt;cypress-cli&lt;/code&gt; anymore to manage Cypress versions. &lt;strong&gt;You will need to uninstall the &lt;code&gt;cypress-cli&lt;/code&gt; by running &lt;code&gt;npm uninstall -g cypress-cli&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">サイプレスのバージョンを管理するために &lt;code&gt;cypress-cli&lt;/code&gt; を使用する必要はもうありません。&lt;strong&gt; &lt;code&gt;npm uninstall -g cypress-cli&lt;/code&gt; を&lt;/strong&gt;&lt;strong&gt;実行して&lt;/strong&gt;&lt;strong&gt;、 &lt;code&gt;cypress-cli&lt;/code&gt; をアンインストールする必要があり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f65df38c7e949221b62a26df819cc0c36acb4fad" translate="yes" xml:space="preserve">
          <source>No need to use &lt;code&gt;window.location&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;window.location&lt;/code&gt; を使用する必要はありません</target>
        </trans-unit>
        <trans-unit id="92121508d5b64ac294a224e238d7f7498cbc576a" translate="yes" xml:space="preserve">
          <source>No test coverage on some server endpoints</source>
          <target state="translated">一部のサーバエンドポイントでテストカバレッジがない</target>
        </trans-unit>
        <trans-unit id="89c328f07e40d30f614e6be57ebfe6bc97f6ebe0" translate="yes" xml:space="preserve">
          <source>No tests found in your file</source>
          <target state="translated">ファイルにテストが見つかりませんでした</target>
        </trans-unit>
        <trans-unit id="bd8da0e92eefcdc8f7fd083b2c8b0072d320891a" translate="yes" xml:space="preserve">
          <source>No. You shouldn&amp;rsquo;t do that.</source>
          <target state="translated">いいえ、それを行うべきではありません。</target>
        </trans-unit>
        <trans-unit id="8d2610c4471324b190316825676fc0d1a3cc45a5" translate="yes" xml:space="preserve">
          <source>Node module dependencies updated. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1674&quot;&gt;#1674&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1942&quot;&gt;#1942&lt;/a&gt;.</source>
          <target state="translated">ノードモジュールの依存関係が更新されました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1674&quot;&gt;＃1674&lt;/a&gt;および&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1942&quot;&gt;＃1942を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="c0ec20d7d237f7dd2bed4aa1a814f5612442a295" translate="yes" xml:space="preserve">
          <source>Noisy Promise demonstration. Not valid code.</source>
          <target state="translated">ノイジープロミスのデモ。有効なコードではありません。</target>
        </trans-unit>
        <trans-unit id="f2bcd72b46f4701a431727ea4d7ded249c651144" translate="yes" xml:space="preserve">
          <source>Non-breaking space</source>
          <target state="translated">ノンブレーキングスペース</target>
        </trans-unit>
        <trans-unit id="2a722c38749360de9de7d36887717cd5c07dd04b" translate="yes" xml:space="preserve">
          <source>None of the above commands are &lt;em&gt;idempotent&lt;/em&gt;; they all cause side effects. Racing commands is not possible because commands must be run in a controlled, serial manner in order to create consistency. Because integration and e2e tests primarily mimic the actions of a real user, Cypress models its command execution model after a real user working step by step.</source>
          <target state="translated">上記のコマンドはいずれも&lt;em&gt;べき等&lt;/em&gt;ではありません。それらはすべて副作用を引き起こします。一貫性を保つためにコマンドは制御されたシリアル方式で実行する必要があるため、レーシングコマンドは不可能です。統合およびe2eテストは主に実際のユーザーのアクションを模倣するため、サイプレスは実際のユーザーが段階的に作業した後、コマンド実行モデルをモデル化します。</target>
        </trans-unit>
        <trans-unit id="136e1359b2167ed4940dc7011f47c048ebbf84a5" translate="yes" xml:space="preserve">
          <source>Normally Cypress would return the first &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; since that is the &lt;em&gt;deepest&lt;/em&gt; element that contains &amp;ldquo;apples&amp;rdquo;.</source>
          <target state="translated">通常、サイプレスは最初の &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; を返します。これは、「りんご」を含む&lt;em&gt;最も深い&lt;/em&gt;要素だからです。</target>
        </trans-unit>
        <trans-unit id="fbb80e5c1388bb43baa21d06596eac6b5b6750f1" translate="yes" xml:space="preserve">
          <source>Normally when the browser detects a cross-origin HTTP request, it will send an &lt;code&gt;OPTIONS&lt;/code&gt; preflight check to ensure the server allows cross-origin requests, but &lt;code&gt;cy.request()&lt;/code&gt; bypasses CORS entirely.</source>
          <target state="translated">通常、ブラウザーはクロスオリジンHTTPリクエストを検出すると、サーバーがクロスオリジンリクエストを許可するように &lt;code&gt;OPTIONS&lt;/code&gt; プリフライトチェックを送信しますが、 &lt;code&gt;cy.request()&lt;/code&gt; はCORSを完全にバイパスします。</target>
        </trans-unit>
        <trans-unit id="60c68d02159f6c09765eb2d51789a8bc8a91e260" translate="yes" xml:space="preserve">
          <source>Normally when writing code in Node, you typically have to restart the process after changing any files.</source>
          <target state="translated">通常、Nodeでコードを書くときは、ファイルを変更した後にプロセスを再起動しなければなりません。</target>
        </trans-unit>
        <trans-unit id="5895514fbcf3d6a0a79d277bea6c345ee0e68fd4" translate="yes" xml:space="preserve">
          <source>Normally, as a user, all of your test code, your application, and Cypress commands are executed in the browser. But Cypress is also a Node process that plugins can use.</source>
          <target state="translated">通常、ユーザーとしては、テストコードもアプリケーションもCypressのコマンドもすべてブラウザ上で実行されます。しかし、Cypressはプラグインが利用できるNodeプロセスでもあります。</target>
        </trans-unit>
        <trans-unit id="f85f0b503b65b1678bdce73ea41fe49e76217e0f" translate="yes" xml:space="preserve">
          <source>Not all config values can be changed at all times</source>
          <target state="translated">すべての設定値を常に変更できるわけではありません。</target>
        </trans-unit>
        <trans-unit id="28cb651d278e081430effd741894a40be95a885e" translate="yes" xml:space="preserve">
          <source>Not all configuration values can be changed during runtime. See &lt;a href=&quot;#Notes&quot;&gt;Notes&lt;/a&gt; below for details.</source>
          <target state="translated">実行時にすべての構成値を変更できるわけではありません。詳細については、下記の&lt;a href=&quot;#Notes&quot;&gt;注を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="85fd0d0ffa97e270a4ab26d63942281b93421215" translate="yes" xml:space="preserve">
          <source>Not animating</source>
          <target state="translated">アニメーション化しない</target>
        </trans-unit>
        <trans-unit id="5366b56df28a7932bc55b4017c02a8b44da0b7bd" translate="yes" xml:space="preserve">
          <source>Not as obvious where values come from versus the other options.</source>
          <target state="translated">価値観がどこから来るのか、他の選択肢と比較しても明らかではない。</target>
        </trans-unit>
        <trans-unit id="1c349d5ff60c494ffad3b9f757b51009d93ef609" translate="yes" xml:space="preserve">
          <source>Not as useful if you&amp;rsquo;re using traditional server side HTML rendering</source>
          <target state="translated">従来のサーバー側のHTMLレンダリングを使用している場合はそれほど役に立ちません</target>
        </trans-unit>
        <trans-unit id="da1f35a0206cefa29e7666c416ac420783e39328" translate="yes" xml:space="preserve">
          <source>Not being covered</source>
          <target state="translated">カバーされていない</target>
        </trans-unit>
        <trans-unit id="a163b430350a9df04cde13de3a705eb78295db95" translate="yes" xml:space="preserve">
          <source>Not being disabled</source>
          <target state="translated">障害者ではないこと</target>
        </trans-unit>
        <trans-unit id="cd731ff87fc20c23d0d1b846dad17c1b59fdba80" translate="yes" xml:space="preserve">
          <source>Not being hidden</source>
          <target state="translated">隠れていない</target>
        </trans-unit>
        <trans-unit id="368c42f19cbb713ff7e310c6608e770c006cf667" translate="yes" xml:space="preserve">
          <source>Not every command is retried</source>
          <target state="translated">すべてのコマンドが再試行されるわけではありません</target>
        </trans-unit>
        <trans-unit id="a33a096a90c1b37a8c60d11eddfac93efa5ecd1f" translate="yes" xml:space="preserve">
          <source>Not only is this an anti-pattern, but it&amp;rsquo;s an actual logical fallacy.</source>
          <target state="translated">これはアンチパターンであるだけでなく、実際の論理的な誤りでもあります。</target>
        </trans-unit>
        <trans-unit id="7b35de0a431c4174b24ed042b20257be5bcce575" translate="yes" xml:space="preserve">
          <source>Not sure what a part of the URL a host is? &lt;a href=&quot;https://nodejs.org/api/url.html#url_url_strings_and_url_objects&quot;&gt;Use this guide as a reference.&lt;/a&gt;</source>
          <target state="translated">ホストがURLのどの部分かわからない場合は、&lt;a href=&quot;https://nodejs.org/api/url.html#url_url_strings_and_url_objects&quot;&gt;このガイドを参考にしてください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c49d64a3504b2d01592e1f16bdeb1bbc1991fc31" translate="yes" xml:space="preserve">
          <source>Not working for you? Don&amp;rsquo;t know how to set your token? If you still need to be able to be redirected to your SSO server, you can read about &lt;a href=&quot;web-security#Disabling-Web-Security&quot;&gt;disabling web security&lt;/a&gt;.</source>
          <target state="translated">あなたのために働いていませんか？トークンの設定方法がわかりませんか？それでもSSOサーバーにリダイレクトできるようにする必要がある場合は、&lt;a href=&quot;web-security#Disabling-Web-Security&quot;&gt;Webセキュリティの無効化&lt;/a&gt;について読むことができます。</target>
        </trans-unit>
        <trans-unit id="47dc41d0b3977e9e3b8385257e5356565087cc58" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;cy.clock()&lt;/code&gt; only applies to the &lt;code&gt;top&lt;/code&gt; window on a web page. It will not override the time functions of any &lt;code&gt;iframe&lt;/code&gt; embedded on the page.</source>
          <target state="translated">&lt;code&gt;cy.clock()&lt;/code&gt; はWebページの &lt;code&gt;top&lt;/code&gt; ウィンドウにのみ適用されることに注意してください。ページに埋め込まれた &lt;code&gt;iframe&lt;/code&gt; の時間関数を上書きしません。</target>
        </trans-unit>
        <trans-unit id="87651ea2e0d84f0f10bc925332a3b282754cef2c" translate="yes" xml:space="preserve">
          <source>Note that some implementations may rely on the &lt;code&gt;input&lt;/code&gt; event instead, which is fired as a user moves the slider, but is not supported by some browsers.</source>
          <target state="translated">実装によっては、代わりに &lt;code&gt;input&lt;/code&gt; イベントに依存する場合があることに注意してください。これは、ユーザーがスライダーを動かすと発生しますが、一部のブラウザーではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="5575c70cc86ec9c4720a3f53e208af696e204860" translate="yes" xml:space="preserve">
          <source>Note that you must specify &lt;code&gt;Date&lt;/code&gt; in order to override the current datetime. The example below affects the current datetime without affecting scheduled timers.</source>
          <target state="translated">現在の日時を上書きするには、 &lt;code&gt;Date&lt;/code&gt; を指定する必要があることに注意してください。以下の例は、スケジュールされたタイマーに影響を与えることなく、現在の日時に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="e99c89f5564fd39e1eb10d60903f06d0aec1f3e7" translate="yes" xml:space="preserve">
          <source>Note that you must specify &lt;code&gt;Date&lt;/code&gt; in order to override the current datetime. The example below just affects the current datetime without affecting scheduled timers.</source>
          <target state="translated">現在の日時を上書きするには、 &lt;code&gt;Date&lt;/code&gt; を指定する必要があることに注意してください。以下の例は、スケジュールされたタイマーに影響を与えることなく、現在の日時にのみ影響します。</target>
        </trans-unit>
        <trans-unit id="71ec3c80bcdb34ce90a7bc671a4276d3079d0125" translate="yes" xml:space="preserve">
          <source>Note the use of the standard function syntax. Using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt; to access aliases via &lt;code&gt;this&lt;/code&gt; won&amp;rsquo;t work because of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_separate_this&quot;&gt;the lexical binding&lt;/a&gt; of &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">標準関数構文の使用に注意してください。使用して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;矢印の機能を&lt;/a&gt;経由してアクセスエイリアスに &lt;code&gt;this&lt;/code&gt; ためではないだろう作品&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_separate_this&quot;&gt;結合字句&lt;/a&gt;の &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e141c018aca524e87e39832519a7ec93ce1f73ed" translate="yes" xml:space="preserve">
          <source>Note: we are still updating all of the docs to reflect all the 0.20.0 changes.</source>
          <target state="translated">注:0.20.0の変更をすべて反映させるために、まだすべてのドキュメントを更新しています。</target>
        </trans-unit>
        <trans-unit id="702c4b52cb899216c608d3c5323569745437248e" translate="yes" xml:space="preserve">
          <source>Note: we recommend deleting all files from the &lt;code&gt;cypress/results&lt;/code&gt; folder before running this command, since each run will output new XML files. For example, we can add the npm script commands below to our &lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">注：実行するたびに新しいXMLファイルが出力されるため、このコマンドを実行する前に、 &lt;code&gt;cypress/results&lt;/code&gt; フォルダーからすべてのファイルを削除することをお勧めします。たとえば、以下のnpmスクリプトコマンドを &lt;code&gt;package.json&lt;/code&gt; に追加できます。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="3deb92bf54af02cc1eec5104e1ad9e096cd8041f" translate="yes" xml:space="preserve">
          <source>Nothing slows a test suite down like having to log in, but all the good parts of your application most likely require an authenticated user! Here are some tips.</source>
          <target state="translated">ログインしなければならないようなテストスイートを遅くするものはありませんが、あなたのアプリケーションの良い部分はすべて認証済みのユーザを必要とする可能性が高いです! ここにいくつかのヒントがあります。</target>
        </trans-unit>
        <trans-unit id="1f4d0504f06214721b4cc87be5bcd3a4fe6afec9" translate="yes" xml:space="preserve">
          <source>Notice Cypress displays a message about this being the default page &lt;a href=&quot;../core-concepts/test-runner#Application-Under-Test&quot;&gt;on the righthand side&lt;/a&gt;. Cypress assumes you&amp;rsquo;ll want to go out and &lt;a href=&quot;../../api/commands/visit&quot;&gt;visit&lt;/a&gt; a URL on the internet - but it can also work just fine without that.</source>
          <target state="translated">サイプレスがこれがデフォルトのページ&lt;a href=&quot;../core-concepts/test-runner#Application-Under-Test&quot;&gt;である&lt;/a&gt;ことを示すメッセージを右側に表示することに注意してください。サイプレスは外出してインターネット上のURLに&lt;a href=&quot;../../api/commands/visit&quot;&gt;アクセス&lt;/a&gt;することを想定していますが、それがなくても問題なく機能します。</target>
        </trans-unit>
        <trans-unit id="22652f894a9c82a24b8671df27088b0aeac39e3d" translate="yes" xml:space="preserve">
          <source>Notice Cypress displays the message that it couldn&amp;rsquo;t find any tests. This is normal - we haven&amp;rsquo;t written any tests! Sometimes you&amp;rsquo;ll also see this message if there was an error parsing your test file. You can always open your &lt;strong&gt;Dev Tools&lt;/strong&gt; to inspect the Console for any syntax or parsing errors that prevented Cypress from reading your tests.</source>
          <target state="translated">サイプレスがテストを見つけられなかったというメッセージを表示することに注意してください。これは正常です-テストを作成していません。テストファイルの解析中にエラーが発生した場合にも、このメッセージが表示されることがあります。いつでも&lt;strong&gt;Dev Tools&lt;/strong&gt;を開いてコンソールを検査し、サイプレスによるテストの読み取りを妨げた構文または解析エラーを確認できます。</target>
        </trans-unit>
        <trans-unit id="33c3bfdf64f122f7b954198ce15c9be09f144ac8" translate="yes" xml:space="preserve">
          <source>Notice how the &lt;strong&gt;ADD_TODO&lt;/strong&gt; action was executed 3 times - because our test has added 3 todo items, and the &lt;strong&gt;COMPLETE_TODO&lt;/strong&gt; action was executed just once - because our test has marked 1 todo item as completed.</source>
          <target state="translated">テストで3つの&lt;strong&gt;ToDo&lt;/strong&gt;アイテムが追加されたため、&lt;strong&gt;ADD_TODO&lt;/strong&gt;アクションが3回実行されたことに注目してください。テストで1つのToDoアイテムが完了としてマークされているため、&lt;strong&gt;COMPLETE_TODO&lt;/strong&gt;アクションが1回だけ実行されました。</target>
        </trans-unit>
        <trans-unit id="fe42e5841f7dd5db49be4591cec035f4c039baf3" translate="yes" xml:space="preserve">
          <source>Notice it highlights in purple. This did three things worth noting&amp;hellip;</source>
          <target state="translated">紫色で強調表示されています。これは注目に値する3つのことを行いました&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="238657d12f0a7b02a469ac4e3a4519d186623156" translate="yes" xml:space="preserve">
          <source>Notice that the Cypress &lt;code&gt;npm&lt;/code&gt; package is a wrapper around the Cypress binary. The version of the &lt;code&gt;npm&lt;/code&gt; package determines the version of the binary downloaded.</source>
          <target state="translated">サイプレス &lt;code&gt;npm&lt;/code&gt; パッケージはサイプレスバイナリのラッパーであることに注意してください。バージョン &lt;code&gt;npm&lt;/code&gt; パッケージは、バイナリダウンロードのバージョンを決定します。</target>
        </trans-unit>
        <trans-unit id="9903bd272894a0e9daec4e2d6b6900a9810ad430" translate="yes" xml:space="preserve">
          <source>Notice that this timeout has flowed down to all assertions and Cypress will now wait &lt;em&gt;up to 10 seconds total&lt;/em&gt; for all of them to pass.</source>
          <target state="translated">このタイムアウトがすべてのアサーションに流れ込み、サイプレスはすべてのアサーションが通過するまで&lt;em&gt;合計&lt;/em&gt;で&lt;em&gt;最大10秒&lt;/em&gt;待機&lt;em&gt;すること&lt;/em&gt;に注意してください。</target>
        </trans-unit>
        <trans-unit id="3b8adffbbb12a9d3f3e55a8a61bf959f11057efd" translate="yes" xml:space="preserve">
          <source>Notice that when adding up the spec&amp;rsquo;s run times (&lt;strong&gt;0:55&lt;/strong&gt;), they add up to less than the total time for the run to complete (&lt;strong&gt;1:51&lt;/strong&gt;) . There is extra time in the run for each spec: starting the browser, encoding and uploading the video to the dashboard, requesting the next spec to run.</source>
          <target state="translated">スペックの実行時間（&lt;strong&gt;0:55&lt;/strong&gt;）を合計すると、実行が完了するまでの合計時間（&lt;strong&gt;1:51&lt;/strong&gt;）よりも短くなることに注意してください。各仕様の実行には、ブラウザーの起動、ビデオのエンコードとダッシュボードへのアップロード、実行する次の仕様の要求など、余分な時間がかかります。</target>
        </trans-unit>
        <trans-unit id="9624ce694f9532e0a1f18bdfdac0b62b0a3c119f" translate="yes" xml:space="preserve">
          <source>Notice the calls to &lt;code&gt;cov_18hmhptych.s[0]++&lt;/code&gt; and &lt;code&gt;cov_18hmhptych.s[1]++&lt;/code&gt; that increment the statement counters. All counters and additional book-keeping information is stored in a single object attached to the browser&amp;rsquo;s &lt;code&gt;window&lt;/code&gt; object. We can see the counters if we serve the &lt;code&gt;instrumented&lt;/code&gt; folder instead of &lt;code&gt;src&lt;/code&gt; and open the application.</source>
          <target state="translated">ステートメントカウンターをインクリメントする &lt;code&gt;cov_18hmhptych.s[0]++&lt;/code&gt; および &lt;code&gt;cov_18hmhptych.s[1]++&lt;/code&gt; の呼び出しに注意してください。すべてのカウンタと追加の簿記情報は、ブラウザの &lt;code&gt;window&lt;/code&gt; オブジェクトにアタッチされた単一のオブジェクトに格納されます。 &lt;code&gt;src&lt;/code&gt; の代わりに &lt;code&gt;instrumented&lt;/code&gt; フォルダーを提供してアプリケーションを開くと、カウンターを確認できます。</target>
        </trans-unit>
        <trans-unit id="de412f24bbb31a65dd952f9c05bace08a5b750da" translate="yes" xml:space="preserve">
          <source>Notice there is also a funny looking Log called: &lt;code&gt;(PAGE LOAD)&lt;/code&gt; followed by another entry for &lt;code&gt;(NEW URL)&lt;/code&gt;. Neither of these was a command that we issued - rather Cypress itself will log out important events from your application when they occur. Notice these look different (they are gray and without a number).</source>
          <target state="translated">&lt;code&gt;(PAGE LOAD)&lt;/code&gt; という名前の面白いログがあり、その後に &lt;code&gt;(NEW URL)&lt;/code&gt; の別のエントリが続くことに注意してください。これらのどちらも、私たちが発行したコマンドではありませんでした。むしろ、サイプレス自体が重要なイベントが発生すると、アプリケーションからログアウトします。これらは異なって見えることに注意してください（灰色で番号なし）。</target>
        </trans-unit>
        <trans-unit id="24cdc108df5164363adcb76832f8e0d0e38369f2" translate="yes" xml:space="preserve">
          <source>Notification center</source>
          <target state="translated">通知センター</target>
        </trans-unit>
        <trans-unit id="e3b82040565bb4be6b11f778a2e3df327ed20a3b" translate="yes" xml:space="preserve">
          <source>Now</source>
          <target state="translated">Now</target>
        </trans-unit>
        <trans-unit id="0ba27239348a0b8a7c3cf9341f29b0bfe7c93ada" translate="yes" xml:space="preserve">
          <source>Now Cypress provides us a UI (similar to debugger) to step forward through each command.</source>
          <target state="translated">Cypress は、各コマンドをステップアップするための UI (デバッガに似ています)を提供してくれます。</target>
        </trans-unit>
        <trans-unit id="266f3950523b343bd5c5677017facb6866ab80f4" translate="yes" xml:space="preserve">
          <source>Now Cypress will skip its install phase once the npm module is installed.</source>
          <target state="translated">npmモジュールがインストールされると、Cypressはインストールフェーズをスキップするようになりました。</target>
        </trans-unit>
        <trans-unit id="49c8371146058b533c1499d33f31da187dcac8a0" translate="yes" xml:space="preserve">
          <source>Now What?</source>
          <target state="translated">今は何を?</target>
        </trans-unit>
        <trans-unit id="7fa182979af5cac1ec7bf0589ad69639c606aafd" translate="yes" xml:space="preserve">
          <source>Now click on the &lt;code&gt;home_page_spec.js&lt;/code&gt; file and watch Cypress open your browser.</source>
          <target state="translated">次に、 &lt;code&gt;home_page_spec.js&lt;/code&gt; ファイルをクリックして、サイプレスがブラウザーを開くのを確認します。</target>
        </trans-unit>
        <trans-unit id="2dfbc1e12d5e26a42c257dd231c78514f58bf2fc" translate="yes" xml:space="preserve">
          <source>Now if you remember at the end of the test we ended up on a different URL:</source>
          <target state="translated">今、テストの最後に覚えているなら、私たちは別のURLに行き着いた。</target>
        </trans-unit>
        <trans-unit id="b3ba9f46bbe2a37812dd34fb8f1df86ac794d0e9" translate="yes" xml:space="preserve">
          <source>Now it&amp;rsquo;s time to write our first test. We&amp;rsquo;re going to:</source>
          <target state="translated">それでは、最初のテストを作成します。に行っていました：</target>
        </trans-unit>
        <trans-unit id="216a4c11ea65937fd8b60a10401654c21c6737dd" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s create our own spec file called &lt;code&gt;home_page_spec.js&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;home_page_spec.js&lt;/code&gt; という独自のスペックファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="8563b7b571860be5a8cfa144d4f84d4faf733115" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s test out &lt;code&gt;**&lt;/code&gt; support.</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt; サポートをテストしてみましょう。</target>
        </trans-unit>
        <trans-unit id="255bec658b34ad387514345f89f1abf76c973b27" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s write our first failing test.</source>
          <target state="translated">では、最初の失敗したテストを書いてみましょう。</target>
        </trans-unit>
        <trans-unit id="86f5521cf7a6e67a5e0fb88c5f502ca9a89f5128" translate="yes" xml:space="preserve">
          <source>Now our sensitive password is not printed to the Test Runner&amp;rsquo;s Command Log when &lt;code&gt;sensitive: true&lt;/code&gt; is passed as an option to &lt;a href=&quot;../commands/type&quot;&gt;&lt;code&gt;.type()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これで、機密性の高いパスワードは、機密性の高い場合にテストランナーのコマンドログに出力されません &lt;code&gt;sensitive: true&lt;/code&gt; がオプションとして&lt;a href=&quot;../commands/type&quot;&gt; &lt;code&gt;.type()&lt;/code&gt; に&lt;/a&gt;渡されます。</target>
        </trans-unit>
        <trans-unit id="995f8411e28ba80a702fad3dcc54d3dbaba88eee" translate="yes" xml:space="preserve">
          <source>Now that we understand the real reason behind the flaky test, we need to think about why the default retry-ability has not helped us in this situation. Why hasn&amp;rsquo;t Cypress found the 2 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements after the second one was added?</source>
          <target state="translated">不安定なテストの背後にある本当の理由を理解したところで、この状況でデフォルトの再試行機能が役に立たなかった理由を考える必要があります。2番目の要素が追加された後、サイプレスが2つの &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素を見つけなかったのはなぜですか？</target>
        </trans-unit>
        <trans-unit id="b46e50ef610c979ce2b8f47e16658fb4b9f70a23" translate="yes" xml:space="preserve">
          <source>Now that we&amp;rsquo;ve got a page loaded, we need to take some action on it. Why don&amp;rsquo;t we click a link on the page? Sounds easy enough, let&amp;rsquo;s go look for one we like&amp;hellip; how about &lt;code&gt;type&lt;/code&gt;?</source>
          <target state="translated">ページが読み込まれたので、ページに何らかのアクションを実行する必要があります。ページのリンクをクリックしてみませんか？簡単そうに聞こえるので、好きなものを探しましょう... &lt;code&gt;type&lt;/code&gt; どうですか？</target>
        </trans-unit>
        <trans-unit id="46bd4086c35d1a0a0419b97130003bbdbfdfb479" translate="yes" xml:space="preserve">
          <source>Now there is not even a need to do conditional testing since you are able to know ahead of time what campaign was sent. Yes, this may require server side updates, but you have to make an untestable app testable if you want to test it!</source>
          <target state="translated">どのキャンペーンが送られてきたかを事前に知ることができるようになったので、条件付きテストをする必要すらなくなりました。はい、これはサーバー側のアップデートが必要になるかもしれませんが、テストしたいのであれば、テスト不可能なアプリをテスト可能なものにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="957e1785a201ad0e252eced449556775304b7836" translate="yes" xml:space="preserve">
          <source>Now we can assert something about this new page!</source>
          <target state="translated">これで、この新しいページについて何かを主張することができるようになりました。</target>
        </trans-unit>
        <trans-unit id="e96096fb7f7005ab49c42a203dbfeb9051f1cb72" translate="yes" xml:space="preserve">
          <source>Now we can put an &lt;code&gt;.only&lt;/code&gt; on this test and it will run successfully irrespective of any other test. The ideal Cypress workflow is writing and iterating on a single test at a time.</source>
          <target state="translated">これで、このテストに &lt;code&gt;.only&lt;/code&gt; を置くことができ、他のテストに関係なく正常に実行されます。理想的なサイプレスワークフローは、一度に1つのテストを記述および反復することです。</target>
        </trans-unit>
        <trans-unit id="d23a28df61541bff515f2a089246b970b7cbda0d" translate="yes" xml:space="preserve">
          <source>Now we know exactly why our test failed. It had nothing to do with the DOM. Instead we can see that either our request never went out or a request went out to the wrong URL.</source>
          <target state="translated">テストが失敗した理由がわかりました。それは DOM とは何の関係もありませんでした。代わりに、リクエストが出てこなかったか、リクエストが間違った URL に出てしまったかのどちらかであることがわかります。</target>
        </trans-unit>
        <trans-unit id="6081c1c3d3e8cf637f9851c8f48bc235a9ecfe55" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;re in business! The first time through, &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt; chain (with its &lt;a href=&quot;../../api/commands/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; attached) are enqueued for Cypress to execute. The &lt;code&gt;it&lt;/code&gt; block exits, and Cypress starts its work:</source>
          <target state="translated">今、私たちはビジネスをしています！最初に、&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../api/commands/get&quot;&gt; &lt;code&gt;cy.get()&lt;/code&gt; &lt;/a&gt;チェーン（&lt;a href=&quot;../../api/commands/then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; が&lt;/a&gt;アタッチされている）は、サイプレスが実行するためにキューに入れられます。 &lt;code&gt;it&lt;/code&gt; 終了をブロックし、サイプレスは、その作業を開始します。</target>
        </trans-unit>
        <trans-unit id="6346f423c98bd78f8a03335522a1fef94fa618db" translate="yes" xml:space="preserve">
          <source>Now when Cypress logs cookies they will only include the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">これで、サイプレスがCookieをログに記録するときに、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; のみが含まれます。</target>
        </trans-unit>
        <trans-unit id="5029d6be001ccee71bc634614aecc53d7da7d5bd" translate="yes" xml:space="preserve">
          <source>Now when you click the giant yellow failure messages if the error is a &lt;code&gt;CypressError&lt;/code&gt; instead of logging nothing it will now find the command associated to that error and display the same message as if you clicked the failed command.</source>
          <target state="translated">エラーが何も記録せずに &lt;code&gt;CypressError&lt;/code&gt; である場合に巨大な黄色のエラーメッセージをクリックすると、そのエラーに関連付けられたコマンドが検索され、失敗したコマンドをクリックした場合と同じメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="498258ae1992a17e6d44069d5f999af0dce7fada" translate="yes" xml:space="preserve">
          <source>Now you can create parent, dual, and child commands using the same &lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt;&lt;code&gt;Cypress.Commands.add()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">同じ&lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt; &lt;code&gt;Cypress.Commands.add()&lt;/code&gt; &lt;/a&gt;コマンドを使用して、親、デュアル、および子のコマンドを作成できるようになりました。</target>
        </trans-unit>
        <trans-unit id="603b03047f2e00b82e57c8b074d14b7126ccf5c5" translate="yes" xml:space="preserve">
          <source>Now you can invoke the command from your project root like so:</source>
          <target state="translated">これで、プロジェクトのルートから以下のようにコマンドを呼び出すことができるようになりました。</target>
        </trans-unit>
        <trans-unit id="2058e831fd601da2f65563ddd1ac46c697b4bdfd" translate="yes" xml:space="preserve">
          <source>Now you can omit the &lt;code&gt;--key&lt;/code&gt; flag.</source>
          <target state="translated">これで、 &lt;code&gt;--key&lt;/code&gt; フラグを省略できます。</target>
        </trans-unit>
        <trans-unit id="af51545390e59575c0deca7a0e6e036d9a5e4b3a" translate="yes" xml:space="preserve">
          <source>Now you can open Cypress from your &lt;strong&gt;project root&lt;/strong&gt; one of the following ways:</source>
          <target state="translated">これで、&lt;strong&gt;プロジェクトルート&lt;/strong&gt;から次のいずれかの方法でサイプレスを開くことができます。</target>
        </trans-unit>
        <trans-unit id="376832d2b7e49b3bb27ada5cb0d457814ec1003e" translate="yes" xml:space="preserve">
          <source>Now you can select the error text in the GUI. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/344&quot;&gt;#344&lt;/a&gt;.</source>
          <target state="translated">これで、GUIでエラーテキストを選択できます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/344&quot;&gt;＃344を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="43a0dc8aaf42def2f849b846d113b2dea48018d5" translate="yes" xml:space="preserve">
          <source>Now you may be thinking, &lt;em&gt;This sounds like a problem with Cypress because when I work with my application outside of Cypress it works just fine.&lt;/em&gt;😒</source>
          <target state="translated">さて、あなたは考えているかもしれません、&lt;em&gt;これはサイプレスの問題のように聞こえ&lt;/em&gt;ます。&lt;em&gt;なぜなら、私がサイプレスの外で私のアプリケーションで作業するとき、それはうまく機能するからです。&lt;/em&gt;😒</target>
        </trans-unit>
        <trans-unit id="3a698bf27667db64b11c913c5a6b57513f656804" translate="yes" xml:space="preserve">
          <source>Now you should see a view explaining how to record your first run.</source>
          <target state="translated">今、あなたの最初のランを記録する方法を説明するビューが表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="7be3c60885c07c6fe478a6044314f3cda9005978" translate="yes" xml:space="preserve">
          <source>Now you&amp;rsquo;ll need to add in the following code in your test file to visit your server:</source>
          <target state="translated">サーバーにアクセスするには、テストファイルに次のコードを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="c061855a4a69d4fb8ffbb939fd779556fe668065" translate="yes" xml:space="preserve">
          <source>Now, by default, screenshots are nested within a folder with the name of &lt;strong&gt;the spec file&lt;/strong&gt; that is currently running. Example - the spec named &lt;code&gt;cypress/integration/foo/bar_spec.js&lt;/code&gt; will save screenshots inside of this directory: &lt;code&gt;cypress/screenshots/foo/bar_spec.js/*&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1826&quot;&gt;#1826&lt;/a&gt;.</source>
          <target state="translated">現在、デフォルトでは、スクリーンショットは、現在実行中の&lt;strong&gt;スペックファイルの&lt;/strong&gt;名前を持つフォルダー内にネストされています。例 &lt;code&gt;cypress/integration/foo/bar_spec.js&lt;/code&gt; という名前の仕様は、スクリーンショットをこのディレクトリ内に保存します： &lt;code&gt;cypress/screenshots/foo/bar_spec.js/*&lt;/code&gt; 。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1826&quot;&gt;＃1826を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="21e7e0067872c260164232cb882c681393d0d766" translate="yes" xml:space="preserve">
          <source>Now, once you have your login completely tested - you may be tempted to think:</source>
          <target state="translated">さて、一度、あなたのログインを完全にテストしてみましょう-あなたは考えたくなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7f300c87bed90c9de7fc494ed2e4fa7d5c944d91" translate="yes" xml:space="preserve">
          <source>Nrwl Extensions for Angular</source>
          <target state="translated">Angular用のNrwl拡張機能</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="f6b7c67f781e67d4b5afb7ed0380ce22801f45ad" translate="yes" xml:space="preserve">
          <source>Nx</source>
          <target state="translated">Nx</target>
        </trans-unit>
        <trans-unit id="b8a395c809fba1242259e67ea1bc89b4a0df8989" translate="yes" xml:space="preserve">
          <source>OSX: &lt;code&gt;~/Library/Caches/Cypress&lt;/code&gt;</source>
          <target state="translated">OSX： &lt;code&gt;~/Library/Caches/Cypress&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="0663c41ca4dea7fa2729e92795c2f74803c9a968" translate="yes" xml:space="preserve">
          <source>Object of environment variables to set before the command executes (e.g. &lt;code&gt;{USERNAME: 'johndoe'}&lt;/code&gt;). Will be merged with existing system environment variables</source>
          <target state="translated">コマンドの実行前に設定する環境変数のオブジェクト（例： &lt;code&gt;{USERNAME: 'johndoe'}&lt;/code&gt; ）。既存のシステム環境変数とマージされます</target>
        </trans-unit>
        <trans-unit id="72a83add2c5ede877c10d23f302d3e17accbadab" translate="yes" xml:space="preserve">
          <source>Objects</source>
          <target state="translated">Objects</target>
        </trans-unit>
        <trans-unit id="830ad4a68bd68f89d259b1167a36d1ce2a7ece85" translate="yes" xml:space="preserve">
          <source>Obvious where environment variables come from.</source>
          <target state="translated">環境変数がどこから来るのかは明らかです。</target>
        </trans-unit>
        <trans-unit id="cad6113d4f785fa6b5d4006b8600f370384f24de" translate="yes" xml:space="preserve">
          <source>Occurs after a screenshot is taken.</source>
          <target state="translated">スクリーンショットを撮影した後に発生します。</target>
        </trans-unit>
        <trans-unit id="3fbe9e37babc7c3903da7a85c3ba1634c5aad146" translate="yes" xml:space="preserve">
          <source>Occurs after a spec is finished running.</source>
          <target state="translated">仕様の実行が終了した後に発生します。</target>
        </trans-unit>
        <trans-unit id="d709f854d71478852631c9b8dd42ad2119bc1367" translate="yes" xml:space="preserve">
          <source>Occurs after the run is finished.</source>
          <target state="translated">実行終了後に発生します。</target>
        </trans-unit>
        <trans-unit id="c4dbd2d5bc5be193a229dabcde3aa47e0c232d2a" translate="yes" xml:space="preserve">
          <source>Occurs before the run starts.</source>
          <target state="translated">ランが始まる前に発生します。</target>
        </trans-unit>
        <trans-unit id="460f72be573a9be21a00ed92514fd9e7585f488c" translate="yes" xml:space="preserve">
          <source>Occurs immediately before launching a browser.</source>
          <target state="translated">ブラウザを起動する直前に発生します。</target>
        </trans-unit>
        <trans-unit id="97770d10be3ad225c8bd3f73d871f94fd003ad08" translate="yes" xml:space="preserve">
          <source>Occurs in conjunction with the &lt;code&gt;cy.task&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;cy.task&lt;/code&gt; コマンドと一緒に発生します。</target>
        </trans-unit>
        <trans-unit id="23f11527c4dc5fedb99be478977504b333b2be2e" translate="yes" xml:space="preserve">
          <source>Occurs when a spec is about to be run.</source>
          <target state="translated">仕様が実行されようとしているときに発生します。</target>
        </trans-unit>
        <trans-unit id="161995ee88691351003567301a068f04cd9a2e56" translate="yes" xml:space="preserve">
          <source>Occurs when a spec or spec-related file needs to be transpiled for the browser.</source>
          <target state="translated">仕様や仕様関連のファイルをブラウザ用にトランスパイルする必要がある場合に発生します。</target>
        </trans-unit>
        <trans-unit id="cff6dc2c4b5039c6d00804a3c902a3bd511124e0" translate="yes" xml:space="preserve">
          <source>Of course if the form&amp;rsquo;s &lt;code&gt;submit&lt;/code&gt; event is &lt;code&gt;preventedDefault&lt;/code&gt; the form will not actually be submitted.</source>
          <target state="translated">もちろん、フォームの &lt;code&gt;submit&lt;/code&gt; イベントが &lt;code&gt;preventedDefault&lt;/code&gt; た場合、デフォルトではフォームは実際には送信されません。</target>
        </trans-unit>
        <trans-unit id="351fc6e919ca093fd9846ffd4579c0946ebf85e4" translate="yes" xml:space="preserve">
          <source>Official Cypress Orb for CircleCI configuration.</source>
          <target state="translated">CircleCI設定用の公式サイプレスオーブ。</target>
        </trans-unit>
        <trans-unit id="2a8de9843a8452c8548953e50430e01db1ee690a" translate="yes" xml:space="preserve">
          <source>Official TypeScript definitions for the Cypress API.</source>
          <target state="translated">Cypress API の公式 TypeScript 定義。</target>
        </trans-unit>
        <trans-unit id="3f80ea00ca969abbe7141b32ca301328d0eef806" translate="yes" xml:space="preserve">
          <source>Official docs</source>
          <target state="translated">公式ドキュメント</target>
        </trans-unit>
        <trans-unit id="ba74c0d98b3c935325911caff8c06dfd49274be9" translate="yes" xml:space="preserve">
          <source>Often a Cypress command has built-in assertions that will cause the command to be retried. For example, the &lt;a href=&quot;../../api/commands/eq&quot;&gt;&lt;code&gt;.eq()&lt;/code&gt;&lt;/a&gt; command will be retried even without any attached assertions until it finds an element with the given index in the previously yielded list of elements.</source>
          <target state="translated">多くの場合、サイプレスのコマンドには、コマンドを再試行させる組み込みのアサーションがあります。たとえば、&lt;a href=&quot;../../api/commands/eq&quot;&gt; &lt;code&gt;.eq()&lt;/code&gt; &lt;/a&gt;コマンドは、アサーションがアタッチされていなくても、以前に生成された要素のリストで特定のインデックスを持つ要素が見つかるまで再試行されます。</target>
        </trans-unit>
        <trans-unit id="095fe852c11931fb45e6b0673836e9f0e2292216" translate="yes" xml:space="preserve">
          <source>Often times you may load a fixture in a &lt;code&gt;beforeEach&lt;/code&gt; hook but want to utilize the values in your tests.</source>
          <target state="translated">フィクスチャを &lt;code&gt;beforeEach&lt;/code&gt; フックにロードすることがよくありますが、テストで値を利用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="6bd7a2b8347b7e2e3f6affb1a0ae760cbc0793b1" translate="yes" xml:space="preserve">
          <source>Oftentimes either the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element is covering the exact coordinate we&amp;rsquo;re attempting to interact with. In those cases, the event fires on the child. We even note this for you in the &lt;a href=&quot;test-runner#Command-Log&quot;&gt;Command Log&lt;/a&gt;.</source>
          <target state="translated">多くの場合、 &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; 要素または &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 要素は、操作しようとしている正確な座標をカバーしています。これらの場合、イベントは子供に発生します。これについては、&lt;a href=&quot;test-runner#Command-Log&quot;&gt;コマンドログに&lt;/a&gt;も記録されています。</target>
        </trans-unit>
        <trans-unit id="926d845073c8f0facacd7def3f70e1f5256c1d6c" translate="yes" xml:space="preserve">
          <source>Oftentimes it can be much easier to programmatically control and boot your servers with a Node script.</source>
          <target state="translated">多くの場合、プログラムでノードスクリプトを使ってサーバを制御したり起動したりする方がはるかに簡単です。</target>
        </trans-unit>
        <trans-unit id="fc379aaefa770f8d370e09688c1e21a79f108a6c" translate="yes" xml:space="preserve">
          <source>Oftentimes it&amp;rsquo;s much simpler and conveys what you&amp;rsquo;re trying to test by just using &lt;code&gt;.focus()&lt;/code&gt; directly.</source>
          <target state="translated">多くの場合、それははるかに単純であり、 &lt;code&gt;.focus()&lt;/code&gt; を直接使用するだけでテストしようとしていることを伝えます。</target>
        </trans-unit>
        <trans-unit id="aa205ab96f8bc058412ba2d91b4a4e6078193115" translate="yes" xml:space="preserve">
          <source>Oftentimes it&amp;rsquo;s much simpler and conveys what you&amp;rsquo;re trying to test by just using &lt;code&gt;.submit()&lt;/code&gt; directly.</source>
          <target state="translated">多くの場合、それははるかに単純であり、 &lt;code&gt;.submit()&lt;/code&gt; を直接使用するだけでテストしようとしていることを伝えます。</target>
        </trans-unit>
        <trans-unit id="43083e1e9b4c2d4686ddcf80d633b5db94b73a5f" translate="yes" xml:space="preserve">
          <source>Oftentimes using &lt;code&gt;.focus()&lt;/code&gt; directly is more concise and conveys what you&amp;rsquo;re trying to test.</source>
          <target state="translated">多くの場合、 &lt;code&gt;.focus()&lt;/code&gt; を直接使用する方が簡潔で、テストしようとしていることを伝えます。</target>
        </trans-unit>
        <trans-unit id="807e890fe11073b5bb2acf23b69cea7f87cd8d58" translate="yes" xml:space="preserve">
          <source>Oftentimes using &lt;code&gt;.submit()&lt;/code&gt; directly is more concise and conveys what you&amp;rsquo;re trying to test.</source>
          <target state="translated">多くの場合、 &lt;code&gt;.submit()&lt;/code&gt; を直接使用する方が簡潔で、テストしようとしていることを伝えます。</target>
        </trans-unit>
        <trans-unit id="b1322e59d7c8d278fafe91aefb9c8efbe888dbeb" translate="yes" xml:space="preserve">
          <source>Oftentimes we see users run into problems targeting their elements because:</source>
          <target state="translated">多くの場合、ユーザーが自分の要素をターゲットにすることに問題を抱えているのを目にします。</target>
        </trans-unit>
        <trans-unit id="8ddbd9a737d531ab0fe4a0d9c2415dcae46bda41" translate="yes" xml:space="preserve">
          <source>Oftentimes we see users wanting the ability to use multiple reporters. When running in CI, you might want to generate a report for &lt;code&gt;junit&lt;/code&gt; and perhaps a &lt;code&gt;json&lt;/code&gt; report. This is great, but by setting this reporter you won&amp;rsquo;t receive any additional feedback while the tests are running!</source>
          <target state="translated">多くの場合、ユーザーは複数のレポーターを使用する機能を望んでいます。CIで実行している場合、 &lt;code&gt;junit&lt;/code&gt; のレポートと、おそらく &lt;code&gt;json&lt;/code&gt; レポートを生成することができます。これはすばらしいことですが、このレポーターを設定することで、テストの実行中に追加のフィードバックを受け取ることはありません。</target>
        </trans-unit>
        <trans-unit id="0847e15501719f2aed4a76c1e2f7f53a85939c43" translate="yes" xml:space="preserve">
          <source>Oftentimes you can use &lt;a href=&quot;trigger&quot;&gt;&lt;code&gt;.trigger()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;invoke&quot;&gt;&lt;code&gt;.invoke()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;wrap&quot;&gt;&lt;code&gt;cy.wrap()&lt;/code&gt;&lt;/a&gt; to show the element before you perform the action.</source>
          <target state="translated">多くの場合、あなたは使用することができます&lt;a href=&quot;trigger&quot;&gt; &lt;code&gt;.trigger()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;invoke&quot;&gt; &lt;code&gt;.invoke()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;wrap&quot;&gt; &lt;code&gt;cy.wrap()&lt;/code&gt; を&lt;/a&gt;使用すると、アクションを実行する前に要素を表示します。</target>
        </trans-unit>
        <trans-unit id="6aa7ca4e8e533dee077aa2089b66e61dfe7632fa" translate="yes" xml:space="preserve">
          <source>Oftentimes your application may make initial requests immediately when it loads (such as authenticating a user). Cypress makes it possible to start your server and define routes before a &lt;a href=&quot;visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt;. Upon the next visit, the server + routes will be instantly applied before your application loads.</source>
          <target state="translated">多くの場合、アプリケーションは、ロードするとすぐに初期リクエストを行う場合があります（ユーザーの認証など）。サイプレスは、サーバーを起動し、&lt;a href=&quot;visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; の&lt;/a&gt;前にルートを定義することを可能にします。次のアクセス時に、サーバー+ルートはアプリケーションがロードされる前に即座に適用されます。</target>
        </trans-unit>
        <trans-unit id="cbefb02e9289d6b26c3cdba50db23715a316dd42" translate="yes" xml:space="preserve">
          <source>Oftentimes, once you have a proper e2e test around logging in, there&amp;rsquo;s no reason to continue to &lt;code&gt;cy.visit()&lt;/code&gt; the login and wait for the entire page to load all associated resources before running any other commands. Doing so can slow down our entire test suite.</source>
          <target state="translated">ログインに関して適切なe2eテストを行った後は、ログインの &lt;code&gt;cy.visit()&lt;/code&gt; を続行し、ページ全体が関連するすべてのリソースをロードするのを待ってから、他のコマンドを実行する必要はありません。これを行うと、テストスイート全体が遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b92a8e77c84c136fb698b3705e19c9c1271dd21c" translate="yes" xml:space="preserve">
          <source>Ok, now we want to click on the link we found. How do we do that? You could almost guess this one: just add a &lt;a href=&quot;../../api/commands/click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt; command to the end of the previous command, like so:</source>
          <target state="translated">では、見つけたリンクをクリックします。どうすればよいですか？あなたはこれをほぼ推測することができます：次のように、前のコマンドの最後に&lt;a href=&quot;../../api/commands/click&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;コマンドを追加するだけです：</target>
        </trans-unit>
        <trans-unit id="4818681e1c851cc4c1a4841177b7bfed26ca79be" translate="yes" xml:space="preserve">
          <source>Ok, we&amp;rsquo;re done talking. Now dive in and get started testing your app!</source>
          <target state="translated">OK、話し終えました。さあ、潜入してアプリのテストを始めましょう！</target>
        </trans-unit>
        <trans-unit id="ac801b81820eacd9039b1a5ed340d48f18649ea0" translate="yes" xml:space="preserve">
          <source>Okay but let&amp;rsquo;s say you&amp;rsquo;re worried about &lt;code&gt;google.com&lt;/code&gt; serving up the right HTML content. How would you test that? Easy! Just make a &lt;a href=&quot;../../api/commands/request&quot;&gt;&lt;code&gt;cy.request()&lt;/code&gt;&lt;/a&gt; directly to it. &lt;a href=&quot;../../api/commands/request&quot;&gt;&lt;code&gt;cy.request()&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;NOT bound to CORS or same-origin policy&lt;/em&gt;.</source>
          <target state="translated">では、 &lt;code&gt;google.com&lt;/code&gt; が適切なHTMLコンテンツを提供することについて心配しているとしましょう。どのようにテストしますか？かんたん！ただ、作る&lt;a href=&quot;../../api/commands/request&quot;&gt; &lt;code&gt;cy.request()&lt;/code&gt; &lt;/a&gt;直接に。&lt;a href=&quot;../../api/commands/request&quot;&gt; &lt;code&gt;cy.request()&lt;/code&gt; &lt;/a&gt;は&lt;em&gt;CORSまたは同一生成元ポリシーにバインドされていません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b0e29f88362e22e9b7b6132e499444626c8fe13d" translate="yes" xml:space="preserve">
          <source>Older CLI versions will continue to work on &lt;code&gt;0.19.0&lt;/code&gt; except for the &lt;a href=&quot;../guides/command-line#cypress-open&quot;&gt;&lt;code&gt;cypress open&lt;/code&gt;&lt;/a&gt; command - and will we print a warning to nudge you to upgrade.</source>
          <target state="translated">古いバージョンのCLI は、&lt;a href=&quot;../guides/command-line#cypress-open&quot;&gt; &lt;code&gt;cypress open&lt;/code&gt; &lt;/a&gt;コマンドを除いて &lt;code&gt;0.19.0&lt;/code&gt; でも引き続き機能します-アップグレードを促す警告を出力します。</target>
        </trans-unit>
        <trans-unit id="4960ddea9f2b277980f54fc15581a1068616a876" translate="yes" xml:space="preserve">
          <source>Omit the fixture file&amp;rsquo;s extension</source>
          <target state="translated">フィクスチャファイルの拡張子を省略</target>
        </trans-unit>
        <trans-unit id="ad01d2cca702011e7b3a083f1f8fd956523749d2" translate="yes" xml:space="preserve">
          <source>On Linux CI you should install the binary from the &amp;ldquo;Testing new linux x64 &amp;hellip;&amp;rdquo; commit.</source>
          <target state="translated">Linux CIでは、「Testing new linux x64&amp;hellip;」コミットからバイナリをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="4823186d4fda336b2a1c959f4230e5aa047019f5" translate="yes" xml:space="preserve">
          <source>On Linux, Cypress scans your &lt;code&gt;PATH&lt;/code&gt; for a number of different binary names. If the browser you are trying to use does not exist under one of the expected binary names, Cypress will not be able to find it.</source>
          <target state="translated">Linuxでは、サイプレスは &lt;code&gt;PATH&lt;/code&gt; をスキャンして、さまざまなバイナリ名を探します。使用しようとしているブラウザーが予期されるバイナリー名のいずれかで存在しない場合、サイプレスはそれを見つけることができません。</target>
        </trans-unit>
        <trans-unit id="1f6f26baba59812cd46044aafda98a99712bee59" translate="yes" xml:space="preserve">
          <source>On Mac, Cypress attempts to find installed browsers by their bundle identifier. If this does not succeed, it will fall back to the Linux browser detection method.</source>
          <target state="translated">Mac では、Cypress はインストールされているブラウザをバンドル識別子で検出しようとします。これが成功しない場合は、Linux ブラウザの検出方法にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="c9440f32e464df5490d7f051ac6f485c1eb689af" translate="yes" xml:space="preserve">
          <source>On Windows, Cypress scans the following locations to try to find each browser:</source>
          <target state="translated">Windowsの場合、Cypressは以下の場所をスキャンして各ブラウザを探そうとします。</target>
        </trans-unit>
        <trans-unit id="84c278636de46335194dd53c093e1de81d16fea3" translate="yes" xml:space="preserve">
          <source>Onboarding dialogs will never show up again once they are dismissed. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/522&quot;&gt;#522&lt;/a&gt;.</source>
          <target state="translated">オンボーディングダイアログは、いったん閉じると再び表示されることはありません。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/522&quot;&gt;＃522を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="011291e4053e1d9577cd2af8a844ab4c3d02736c" translate="yes" xml:space="preserve">
          <source>Once Cypress detects that a matching XHR has begun its request, it then switches over to the 2nd waiting period. This duration is configured by the &lt;a href=&quot;../../guides/references/configuration#Timeouts&quot;&gt;&lt;code&gt;responseTimeout&lt;/code&gt;&lt;/a&gt; option - which has a default of &lt;code&gt;20000&lt;/code&gt; ms.</source>
          <target state="translated">サイプレスは、一致するXHRが要求を開始したことを検出すると、2番目の待機期間に切り替えます。この期間は、&lt;a href=&quot;../../guides/references/configuration#Timeouts&quot;&gt; &lt;code&gt;responseTimeout&lt;/code&gt; &lt;/a&gt;オプションによって構成されます-デフォルトは &lt;code&gt;20000&lt;/code&gt; ミリ秒です。</target>
        </trans-unit>
        <trans-unit id="35ac051e9108c8b6a83952a41e578292999ef04b" translate="yes" xml:space="preserve">
          <source>Once Cypress detects that a matching request has begun its request, it then switches over to the 2nd waiting period. This duration is configured by the &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Timeouts&quot;&gt;&lt;code&gt;responseTimeout&lt;/code&gt;&lt;/a&gt; option - which has a default of &lt;code&gt;20000&lt;/code&gt; ms.</source>
          <target state="translated">サイプレスは、一致する要求が要求を開始したことを検出すると、2番目の待機期間に切り替わります。この期間は、&lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Timeouts&quot;&gt; &lt;code&gt;responseTimeout&lt;/code&gt; &lt;/a&gt;オプションによって構成されます。デフォルトは &lt;code&gt;20000&lt;/code&gt; ミリ秒です。</target>
        </trans-unit>
        <trans-unit id="a20f076e5f8777c9a90eb34904dfed267efc1b9b" translate="yes" xml:space="preserve">
          <source>Once a GitHub repository is associated with a Cypress project, the GitHub integration will be immediately enabled:</source>
          <target state="translated">GitHub リポジトリが Cypress プロジェクトに関連付けられると、GitHub の統合がすぐに有効になります。</target>
        </trans-unit>
        <trans-unit id="bef603f59418eebc2acc2bfa125e9641b628d3d1" translate="yes" xml:space="preserve">
          <source>Once again - we will need another reliable way to achieve this without involving the DOM.</source>
          <target state="translated">もう一度言いますが、DOM を介さずにこれを実現するためには、別の信頼できる方法が必要です。</target>
        </trans-unit>
        <trans-unit id="645c5a6978abf81195f86cc762a7fe7f5f83f59a" translate="yes" xml:space="preserve">
          <source>Once multiple machines are available within your CI environment, you can pass the &lt;a href=&quot;command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag to have your tests run in parallel.</source>
          <target state="translated">CI環境内で複数のマシンが使用可能になったら、&lt;a href=&quot;command-line#cypress-run-parallel&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;フラグを渡して、テストを並行して実行できます。</target>
        </trans-unit>
        <trans-unit id="2ebca00326fdb0328843c14d5ba3ccf576f2681d" translate="yes" xml:space="preserve">
          <source>Once multiple machines are available within your CI environment, you can pass the &lt;a href=&quot;command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; key to &lt;a href=&quot;command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt; to have your recorded tests parallelized.</source>
          <target state="translated">CI環境内で複数のマシンが利用可能になったら、&lt;a href=&quot;command-line#cypress-run-parallel&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;キーを&lt;a href=&quot;command-line#cypress-run&quot;&gt; &lt;code&gt;cypress run&lt;/code&gt; &lt;/a&gt;に渡して、記録されたテストを並列化できます。</target>
        </trans-unit>
        <trans-unit id="a0063b89d560c8734a0aae5368a8fb9babfd9be2" translate="yes" xml:space="preserve">
          <source>Once that file is created, you should see it in the list of spec files.</source>
          <target state="translated">そのファイルが作成されると、specファイルのリストに表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="4b4069f115b00eed842becb70feb85e3b0ca0a33" translate="yes" xml:space="preserve">
          <source>Once the element is in focus, Cypress will begin firing keyboard events.</source>
          <target state="translated">要素がフォーカスされると、Cypressはキーボードイベントの発射を開始します。</target>
        </trans-unit>
        <trans-unit id="d7e0df75c076e76cc2478a82baa7346d1159d690" translate="yes" xml:space="preserve">
          <source>Once the tests finish, the coverage object can be serialized and saved to disk so that a human-friendly report can be generated. The collected coverage information can also be sent to external services and help during pull request reviews.</source>
          <target state="translated">テストが終了すると、カバレッジオブジェクトをシリアライズしてディスクに保存し、人間に優しいレポートを生成することができます。収集したカバレッジ情報は、外部サービスに送信したり、プルリクエストのレビュー中にヘルプを提供したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="ddcb2e576d529613bdd06656d9cc403d561a1443" translate="yes" xml:space="preserve">
          <source>Once we&amp;rsquo;ve created that file, we should see the Cypress Test Runner immediately display it in the list of Integration Tests. Cypress monitors your spec files for any changes and automatically displays any changes.</source>
          <target state="translated">そのファイルを作成すると、Cypress Test Runnerが統合テストのリストにすぐに表示するのがわかります。サイプレスはスペックファイルの変更を監視し、変更を自動的に表示します。</target>
        </trans-unit>
        <trans-unit id="6e953bed8817624325b42831edb261b7b98b8305" translate="yes" xml:space="preserve">
          <source>Once you get the hang of async code you&amp;rsquo;ll realize you can do everything you could do synchronously, without your code doing any backflips.</source>
          <target state="translated">非同期コードのこつをつかめば、コードでバックフリップを実行しなくても、同期で実行できるすべてのことを実行できることに気付くでしょう。</target>
        </trans-unit>
        <trans-unit id="0399eb7b0a8466dcf593574f482f0bf09a763b19" translate="yes" xml:space="preserve">
          <source>Once you have a &lt;code&gt;stub&lt;/code&gt; or a &lt;code&gt;spy&lt;/code&gt; in hand, you can then create assertions about them.</source>
          <target state="translated">あなたが持ってたら &lt;code&gt;stub&lt;/code&gt; や &lt;code&gt;spy&lt;/code&gt; 手にし、あなたはその後、それらについてのアサーションを作成することができます。</target>
        </trans-unit>
        <trans-unit id="6ad1296add3d2fee8297511b1e2c6c31f26c0009" translate="yes" xml:space="preserve">
          <source>Once you log in to the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt; you can view any &lt;a href=&quot;projects#Public-vs-Private&quot;&gt;public project&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;ダッシュボードサービスに&lt;/a&gt;ログインすると、&lt;a href=&quot;projects#Public-vs-Private&quot;&gt;パブリックプロジェクトを&lt;/a&gt;表示できます。</target>
        </trans-unit>
        <trans-unit id="66d0e71aeeae9c09bf48576ac479ea9f39b5aec9" translate="yes" xml:space="preserve">
          <source>Once you save again, you&amp;rsquo;ll see Cypress display the failing test in red since &lt;code&gt;true&lt;/code&gt; does not equal &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">もう一度保存すると、 &lt;code&gt;true&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; と等しくないため、サイプレスは失敗したテストを赤で表示します。</target>
        </trans-unit>
        <trans-unit id="7be564fe5aafaa3b0e8ce7145d3c03a77422dcd2" translate="yes" xml:space="preserve">
          <source>Once you save this file you should see the browser reload.</source>
          <target state="translated">このファイルを保存すると、ブラウザがリロードされます。</target>
        </trans-unit>
        <trans-unit id="61bd7090d8718a3dd009b4e986354c4a9a9de5ad" translate="yes" xml:space="preserve">
          <source>Once you set up your project to record, we generate a unique &lt;code&gt;projectId&lt;/code&gt; for your project and automatically insert it into your &lt;code&gt;cypress.json&lt;/code&gt; file.</source>
          <target state="translated">記録するプロジェクトをセットアップすると、プロジェクトに一意の &lt;code&gt;projectId&lt;/code&gt; が生成され、 &lt;code&gt;cypress.json&lt;/code&gt; ファイルに自動的に挿入されます。</target>
        </trans-unit>
        <trans-unit id="43018e251fa63222ebc94f97be8c612cdbcfe078" translate="yes" xml:space="preserve">
          <source>Once you start a server with &lt;a href=&quot;../../api/commands/server&quot;&gt;&lt;code&gt;cy.server()&lt;/code&gt;&lt;/a&gt;, all requests will be controllable for the remainder of the test. When a new test runs, Cypress will restore the default behavior and remove all routing and stubbing. For a complete reference of the API and options, refer to the documentation for each command.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/server&quot;&gt; &lt;code&gt;cy.server()&lt;/code&gt; &lt;/a&gt;でサーバーを起動すると、残りのテストの間、すべてのリクエストを制御できます。新しいテストを実行すると、サイプレスはデフォルトの動作を復元し、ルーティングとスタブをすべて削除します。APIとオプションの完全なリファレンスについては、各コマンドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9c2bd277f31482bc5354dbd9f9d14fe0ad057d8f" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re set up to record test runs, we automatically generate a &lt;em&gt;Record Key&lt;/em&gt; for the project.</source>
          <target state="translated">テストの実行を記録するように設定すると、プロジェクトの&lt;em&gt;記録キーが&lt;/em&gt;自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="65115baa350039d4bef2d656ae17e1944d8acaa5" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve enabled &lt;a href=&quot;../../api/commands/clock&quot;&gt;&lt;code&gt;cy.clock()&lt;/code&gt;&lt;/a&gt; you can control time by &lt;strong&gt;ticking&lt;/strong&gt; it ahead by milliseconds.</source>
          <target state="translated">あなたが有効にしたら&lt;a href=&quot;../../api/commands/clock&quot;&gt; &lt;code&gt;cy.clock()&lt;/code&gt; &lt;/a&gt;あなたは、時間を制御することができ&lt;strong&gt;カチカチ&lt;/strong&gt;ミリ秒単位で先にそれを。</target>
        </trans-unit>
        <trans-unit id="90c10f46aeeea8c2a71abb45e9f26f3d163137bb" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve established it&amp;rsquo;s working you can then use stubs to test all of the edge cases and additional scenarios. There are no benefits to using real data in the vast majority of cases. We recommend that the vast majority of tests use stub data. They will be orders of magnitude faster, and much less complex.</source>
          <target state="translated">それが機能していることを確認したら、スタブを使用して、すべてのエッジケースと追加のシナリオをテストできます。ほとんどの場合、実際のデータを使用してもメリットはありません。テストの大部分はスタブデータを使用することをお勧めします。それらは桁違いに速く、はるかに複雑ではありません。</target>
        </trans-unit>
        <trans-unit id="56fafd8d718991ba5c8832f5c726ccc5587e41f7" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve read through the documentation below, we invite you to experience the power of Cypress reporters via &lt;a href=&quot;https://github.com/cypress-io/testing-workshop-cypress/blob/master/slides/09-reporters/PITCHME.md&quot;&gt;Section 9&lt;/a&gt; of our open source &lt;a href=&quot;https://github.com/cypress-io/testing-workshop-cypress&quot;&gt;testing workshop for Cypress&lt;/a&gt;.</source>
          <target state="translated">以下のドキュメントをお読みになりましたら、サイプレスのオープンソース&lt;a href=&quot;https://github.com/cypress-io/testing-workshop-cypress&quot;&gt;テストワークショップの&lt;/a&gt;&lt;a href=&quot;https://github.com/cypress-io/testing-workshop-cypress/blob/master/slides/09-reporters/PITCHME.md&quot;&gt;セクション9&lt;/a&gt;でサイプレスレポーターの力を体験してください。</target>
        </trans-unit>
        <trans-unit id="df157874970327fef8f9a7b22d9180ff38fd346e" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve started the GitHub App installation process &lt;a href=&quot;#Install-via-organization-integration-settings&quot;&gt;via a Cypress organization's settings&lt;/a&gt; or &lt;a href=&quot;#Install-via-project-settings&quot;&gt;a project's settings&lt;/a&gt;, you will be directed to GitHub.com to complete the installation:</source>
          <target state="translated">&lt;a href=&quot;#Install-via-organization-integration-settings&quot;&gt;サイプレス組織の設定&lt;/a&gt;または&lt;a href=&quot;#Install-via-project-settings&quot;&gt;プロジェクトの設定&lt;/a&gt;を介してGitHubアプリのインストールプロセスを開始すると、GitHub.comに移動してインストールを完了します。</target>
        </trans-unit>
        <trans-unit id="ef066aebc4725ac85c7003ac5b1e6845f4ee4226" translate="yes" xml:space="preserve">
          <source>Once your server is running, it&amp;rsquo;s time to visit it.</source>
          <target state="translated">サーバーが実行されたら、次にアクセスします。</target>
        </trans-unit>
        <trans-unit id="3a18e89d10a438c45e22b562ec9ef6caa981ee4e" translate="yes" xml:space="preserve">
          <source>One Superdomain per Test</source>
          <target state="translated">テストごとに1つのスーパードメイン</target>
        </trans-unit>
        <trans-unit id="d8ca14dc5c9bc4a29e0e98ac529afdc92830cb5d" translate="yes" xml:space="preserve">
          <source>One advantage of declaratively waiting for responses is that it decreases test flake. You can think of &lt;a href=&quot;../../api/commands/wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt; as a guard that indicates to Cypress when you expect a request to be made that matches a specific routing alias. This prevents the next commands from running until responses come back and it guards against situations where your requests are initially delayed.</source>
          <target state="translated">宣言的に応答を待つことの1つの利点は、テストフレークが減少することです。&lt;a href=&quot;../../api/commands/wait&quot;&gt; &lt;code&gt;cy.wait()&lt;/code&gt; &lt;/a&gt;は、特定のルーティングエイリアスに一致するリクエストが行われると予想されるときにサイプレスに指示するガードと考えることができます。これにより、応答が返ってくるまで次のコマンドが実行されなくなり、要求が最初に遅延する状況から保護されます。</target>
        </trans-unit>
        <trans-unit id="99fbabcaf5016959edd6e7659e1949fbbee545fd" translate="yes" xml:space="preserve">
          <source>One check per &lt;a href=&quot;../guides/parallelization#Grouping-test-runs&quot;&gt;run group&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guides/parallelization#Grouping-test-runs&quot;&gt;実行グループ&lt;/a&gt;ごとに1つのチェック。</target>
        </trans-unit>
        <trans-unit id="7bcb5f0dc971ff33d07dfedb7418ee56f85d5f9c" translate="yes" xml:space="preserve">
          <source>One common scenario Cypress supports is visiting a remote page and also preventing any Ajax requests from immediately going out.</source>
          <target state="translated">Cypressがサポートしている一般的なシナリオは、リモートページを訪問し、Ajaxリクエストがすぐに外に出ないようにすることです。</target>
        </trans-unit>
        <trans-unit id="5ab08fdaa1121402661faf3f153de76b816f92fc" translate="yes" xml:space="preserve">
          <source>One final question you should ask yourself is - is resetting the state even necessary? Remember, Cypress already automatically clears &lt;a href=&quot;../../api/commands/clearlocalstorage&quot;&gt;&lt;code&gt;localStorage&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/commands/clearcookies&quot;&gt;cookies&lt;/a&gt;, sessions, etc before each test. Make sure you are not trying to clean up state that is already cleaned up by Cypress automatically.</source>
          <target state="translated">あなたが自問すべき最後の1つの質問は、状態をリセットすることは必要ですか？サイプレスは、各テストの前に&lt;a href=&quot;../../api/commands/clearlocalstorage&quot;&gt; &lt;code&gt;localStorage&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/commands/clearcookies&quot;&gt;Cookie&lt;/a&gt;、セッションなどをすでに自動的に消去していることに注意してください。サイプレスが既に自動的にクリーンアップしている状態をクリーンアップしようとしていないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="33cfe5e191ba0a56ee0afcff13839288db466f93" translate="yes" xml:space="preserve">
          <source>One group can be called &lt;code&gt;package/admin&lt;/code&gt;:</source>
          <target state="translated">1つのグループは &lt;code&gt;package/admin&lt;/code&gt; と呼ぶことができます：</target>
        </trans-unit>
        <trans-unit id="c6a3eb70df3cbaaa6934879c33c8e92b96116084" translate="yes" xml:space="preserve">
          <source>One last thing to consider here is that every once in a while we discover bugs in Cypress that lead to &lt;code&gt;cross origin&lt;/code&gt; errors that can otherwise be fixed. If you think you&amp;rsquo;re experiencing a bug, &lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt;come into our chat&lt;/a&gt; or &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;open an issue&lt;/a&gt;.</source>
          <target state="translated">ここで最後に考慮すべきことの1つは、サイプレスのバグを発見することがあり、他の方法では修正できる &lt;code&gt;cross origin&lt;/code&gt; エラーにつながることです。バグが発生していると思われる場合は&lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt;、チャットに参加する&lt;/a&gt;か&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;、問題を開い&lt;/a&gt;てください。</target>
        </trans-unit>
        <trans-unit id="dea7df5aa0d1d03d862bdc311a977082dc295e02" translate="yes" xml:space="preserve">
          <source>One of the &lt;strong&gt;best&lt;/strong&gt; parts of Cypress is its emphasis on debuggability. Unlike other testing tools - when your tests end - you are left with your working application at the exact point where your test finished.</source>
          <target state="translated">サイプレスの&lt;strong&gt;優れた点の&lt;/strong&gt; 1つは、デバッグ可能性に重点を置いていることです。他のテストツールとは異なり、テストが終了すると、テストが終了した正確な時点で作業アプリケーションが残ります。</target>
        </trans-unit>
        <trans-unit id="0096c1d79bb67b777dba0d7d1ac6863a9ae96235" translate="yes" xml:space="preserve">
          <source>One of the first (and arguably one of the hardest) hurdles you&amp;rsquo;ll have to overcome is testing logging into your application.</source>
          <target state="translated">あなたが克服しなければならない最初の（そして間違いなく最も難しい）ハードルの1つは、アプリケーションへのログインのテストです。</target>
        </trans-unit>
        <trans-unit id="c8229342ccbc579a23cd59bab8b73537a2a26607" translate="yes" xml:space="preserve">
          <source>One of the first things many of our users attempt to do is involve 3rd party servers in their tests.</source>
          <target state="translated">多くのユーザーが最初にやろうとしていることの一つは、サードパーティのサーバーをテストに参加させることです。</target>
        </trans-unit>
        <trans-unit id="9d8bcb0207134d49a9e3f55925befc6393c9fc00" translate="yes" xml:space="preserve">
          <source>One thing you may notice though is that Cypress still enforces visiting a single superdomain with &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt;, but there is an &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/944&quot;&gt;issue open&lt;/a&gt; to change this restriction.</source>
          <target state="translated">ただし、サイプレスはまだ&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; &lt;/a&gt;を使用して単一のスーパードメインへのアクセスを強制していることに気づくかもしれませんが、この制限を変更するために未&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/944&quot;&gt;解決の問題&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="3d997e0d4b1f5fc1055e5b9873767c7259880985" translate="yes" xml:space="preserve">
          <source>Only run command in Chrome</source>
          <target state="translated">Chromeでのみコマンドを実行する</target>
        </trans-unit>
        <trans-unit id="2d21bf69e1b9f242f1a1cba9e9186fac359649c8" translate="yes" xml:space="preserve">
          <source>Only run commands in Chromium-based browser</source>
          <target state="translated">Chromiumベースのブラウザでのみコマンドを実行する</target>
        </trans-unit>
        <trans-unit id="5d4ecf105d696aca98c9cb1dc58390d02e178e80" translate="yes" xml:space="preserve">
          <source>Only run on specific release channels of browsers</source>
          <target state="translated">ブラウザの特定のリリースチャンネルでのみ実行</target>
        </trans-unit>
        <trans-unit id="5b5e733bc13b459bb90300743dfb28ef82208823" translate="yes" xml:space="preserve">
          <source>Only run on stable release in Chromium-based browser</source>
          <target state="translated">Chromium ベースのブラウザでは安定版でのみ動作します。</target>
        </trans-unit>
        <trans-unit id="457ab9a26866612d36a45121ce34a18db2475033" translate="yes" xml:space="preserve">
          <source>Only the &lt;em&gt;first&lt;/em&gt; matched element will be returned</source>
          <target state="translated">&lt;em&gt;最初に&lt;/em&gt;一致した要素のみが返されます</target>
        </trans-unit>
        <trans-unit id="5aff459157afcaf73e456dcae0a96b977982d896" translate="yes" xml:space="preserve">
          <source>Only the last command is retried</source>
          <target state="translated">最後のコマンドのみ再試行</target>
        </trans-unit>
        <trans-unit id="9496a560deca4edbd47eedf83e966a2ccc9af00b" translate="yes" xml:space="preserve">
          <source>Only valid when providing a &lt;code&gt;--group&lt;/code&gt; or &lt;code&gt;--parallel&lt;/code&gt; flag. Read our &lt;a href=&quot;parallelization&quot;&gt;parallelization&lt;/a&gt; documentation to learn more.</source>
          <target state="translated">&lt;code&gt;--group&lt;/code&gt; または &lt;code&gt;--parallel&lt;/code&gt; フラグを指定する場合にのみ有効です。詳細については、&lt;a href=&quot;parallelization&quot;&gt;並列&lt;/a&gt;化のドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="adedc0e77ab345ac5fba97224bb370e27193c174" translate="yes" xml:space="preserve">
          <source>Only works for values that should be the same on across all machines.</source>
          <target state="translated">すべてのマシンで同じ値でなければならない場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="d1df40d932308f58d1eb31e3ca3803824eb1a869" translate="yes" xml:space="preserve">
          <source>Open Cypress in detached mode</source>
          <target state="translated">アタッチモードでサイプレスを開く</target>
        </trans-unit>
        <trans-unit id="549a3606dec10c5fbc820ae7919714e2a25f6119" translate="yes" xml:space="preserve">
          <source>Open Cypress via &lt;code&gt;cypress open&lt;/code&gt;</source>
          <target state="translated">サイプレスオープン経由でサイプレスを &lt;code&gt;cypress open&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa0a1b82caad1cbc6f27f1e611b6a4651948b916" translate="yes" xml:space="preserve">
          <source>Open Source Plan</source>
          <target state="translated">オープンソースプラン</target>
        </trans-unit>
        <trans-unit id="6cc3364a242cbf9be7ce547554de30d92585b0cd" translate="yes" xml:space="preserve">
          <source>Open source</source>
          <target state="translated">オープンソース</target>
        </trans-unit>
        <trans-unit id="7feeb6405514b8dd84fd1151a4fdc736f529b33b" translate="yes" xml:space="preserve">
          <source>Open sourced another core repo: &lt;a href=&quot;https://github.com/cypress-io/cypress/tree/develop/packages/desktop-gui&quot;&gt;Cypress Core Test Runner&lt;/a&gt; which makes up the Cypress Desktop Application.</source>
          <target state="translated">オープンソースの別のコアリポジトリ：サイプレスデスクトップアプリケーションを構成するサイプレス&lt;a href=&quot;https://github.com/cypress-io/cypress/tree/develop/packages/desktop-gui&quot;&gt;コアテストランナー&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="787657c640af126142117ee9a64a489a980b9f3e" translate="yes" xml:space="preserve">
          <source>Open up &lt;code&gt;cypress.json&lt;/code&gt;, which you will find in your project root (where you installed Cypress.) It starts out empty:</source>
          <target state="translated">プロジェクトのルート（Cypressをインストールした場所）にある &lt;code&gt;cypress.json&lt;/code&gt; を開きます。</target>
        </trans-unit>
        <trans-unit id="322aa3b169a8824e905342ea6f1bf4d2c8949463" translate="yes" xml:space="preserve">
          <source>Open up Registry Editor by pressing WinKey+R and typing &lt;code&gt;regedit.exe&lt;/code&gt;</source>
          <target state="translated">WinKey + Rを押し、 &lt;code&gt;regedit.exe&lt;/code&gt; と入力して、レジストリエディターを開きます。</target>
        </trans-unit>
        <trans-unit id="358d384c0eba45a65af1c353ab0d4eb9b978ba85" translate="yes" xml:space="preserve">
          <source>Open up your Dev Tools and click on the &lt;code&gt;GET&lt;/code&gt; for the &lt;code&gt;.action-email&lt;/code&gt; class selector.</source>
          <target state="translated">開発ツールを開き、 &lt;code&gt;.action-email&lt;/code&gt; クラスセレクターの &lt;code&gt;GET&lt;/code&gt; をクリックします。</target>
        </trans-unit>
        <trans-unit id="e388bf6b6d29ece502d5c6eb8fde2f43021194fc" translate="yes" xml:space="preserve">
          <source>Open up your favorite IDE and add the code below to our &lt;code&gt;sample_spec.js&lt;/code&gt; test file.</source>
          <target state="translated">お気に入りのIDEを開き、以下のコードを &lt;code&gt;sample_spec.js&lt;/code&gt; テストファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="38a84cf82b69c037086a0394837dbdbd077a4315" translate="yes" xml:space="preserve">
          <source>Open up your project in Cypress via &lt;code&gt;cypress open&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cypress open&lt;/code&gt; を介してサイプレスでプロジェクトを開きます。</target>
        </trans-unit>
        <trans-unit id="9939506f8a17c9637f3d8b4761737922b0c38e2f" translate="yes" xml:space="preserve">
          <source>Opening Cypress</source>
          <target state="translated">オープニングサイプレス</target>
        </trans-unit>
        <trans-unit id="00a7e00440d823f7dd5d2321c2f4cedcf2a9d5c9" translate="yes" xml:space="preserve">
          <source>Opening Cypress in global mode is useful if you have multiple nested projects but want to share a single global installation of Cypress. In this case you can add each nested project to the Cypress in global mode, thus giving you a nice UI to switch between them.</source>
          <target state="translated">Cypressをグローバルモードで開くのは、複数の入れ子になったプロジェクトを持っているが、一つのCypressのグローバルインストールを共有したい場合に便利です。この場合、入れ子になっている各プロジェクトをグローバルモードでCypressに追加することができます。</target>
        </trans-unit>
        <trans-unit id="5de73a2b39ef7eb2ae43ad368b796a0ae5a25b42" translate="yes" xml:space="preserve">
          <source>Opens the Cypress Test Runner in interactive mode.</source>
          <target state="translated">インタラクティブモードで Cypress Test Runner を開きます。</target>
        </trans-unit>
        <trans-unit id="d8623dd1b7e9d853708b7d57679c46236fb6c059" translate="yes" xml:space="preserve">
          <source>Operating system version</source>
          <target state="translated">オペレーティングシステムのバージョン</target>
        </trans-unit>
        <trans-unit id="83517ba1df481bff4d5f44fa1fd8f3f8f0740ddb" translate="yes" xml:space="preserve">
          <source>Operating system version and browser version.</source>
          <target state="translated">オペレーティングシステムのバージョンとブラウザのバージョン。</target>
        </trans-unit>
        <trans-unit id="c025e1e57b8199e6351b41f7949ac3b6927005cd" translate="yes" xml:space="preserve">
          <source>Operation system name</source>
          <target state="translated">運用システム名</target>
        </trans-unit>
        <trans-unit id="8aac54081d0a934ec893c1a88295f5f6e352678f" translate="yes" xml:space="preserve">
          <source>Opposite of &lt;a href=&quot;filter&quot;&gt;&lt;code&gt;.filter()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;filter&quot;&gt; &lt;code&gt;.filter()&lt;/code&gt; の&lt;/a&gt;反対</target>
        </trans-unit>
        <trans-unit id="2f48120db6999232566be38e94c8ea0907727771" translate="yes" xml:space="preserve">
          <source>Opposite of &lt;a href=&quot;not&quot;&gt;&lt;code&gt;.not()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;not&quot;&gt; &lt;code&gt;.not()&lt;/code&gt; の&lt;/a&gt;反対</target>
        </trans-unit>
        <trans-unit id="7343562a97828c8398dd9d230b8e463de1025253" translate="yes" xml:space="preserve">
          <source>Opt out of sending exception data to Cypress</source>
          <target state="translated">サイプレスへの例外データ送信のオプトアウト</target>
        </trans-unit>
        <trans-unit id="039129dcc8892ac781a6d577f4bb1f3fe8e579d4" translate="yes" xml:space="preserve">
          <source>Opt out on Linux or macOS</source>
          <target state="translated">LinuxやmacOSでのオプトアウト</target>
        </trans-unit>
        <trans-unit id="a64df27ddf187fd87993b59cd1f6b0e38f8c0f07" translate="yes" xml:space="preserve">
          <source>Opt out on Windows</source>
          <target state="translated">Windowsでのオプトアウト</target>
        </trans-unit>
        <trans-unit id="09524cb8114203476e925e19331a84b8bb0785c7" translate="yes" xml:space="preserve">
          <source>Optimized first test run after hard refresh.</source>
          <target state="translated">ハードリフレッシュ後の最初のテスト実行を最適化しました。</target>
        </trans-unit>
        <trans-unit id="c3bcf47692f749ede7fe7aba18645d0061f390d4" translate="yes" xml:space="preserve">
          <source>Optimized performance for hovering / exiting commands. Heavily reduced the CPU on revert / restore the DOM.</source>
          <target state="translated">コマンドのホバリング/終了時のパフォーマンスを最適化しました。リバート/リストア時のCPUを大幅に削減しました。</target>
        </trans-unit>
        <trans-unit id="522858793295427c7800f3482d3abb70024373e9" translate="yes" xml:space="preserve">
          <source>Optimized performance of command lists.</source>
          <target state="translated">コマンドリストのパフォーマンスを最適化しました。</target>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="1f034c31204d862f3fafd97195c6f6818c48fd9b" translate="yes" xml:space="preserve">
          <source>Option #1: &lt;code&gt;cypress.json&lt;/code&gt;</source>
          <target state="translated">オプション＃1： &lt;code&gt;cypress.json&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f028893a48daebc2deaaac90b65fd94fc68c910" translate="yes" xml:space="preserve">
          <source>Option #2: &lt;code&gt;cypress.env.json&lt;/code&gt;</source>
          <target state="translated">オプション＃2： &lt;code&gt;cypress.env.json&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="acc7c2e11bcf1c107b7e26c1f684644f3a3cc738" translate="yes" xml:space="preserve">
          <source>Option #3: &lt;code&gt;CYPRESS_*&lt;/code&gt;</source>
          <target state="translated">オプション＃3： &lt;code&gt;CYPRESS_*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a64457d06c7bc99cbaefc6a9533a870ca642a111" translate="yes" xml:space="preserve">
          <source>Option #4: &lt;code&gt;--env&lt;/code&gt;</source>
          <target state="translated">オプション＃4：-- &lt;code&gt;--env&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f471d69777771b5ee06f9e62ff05b7cf24245fae" translate="yes" xml:space="preserve">
          <source>Option #5: Plugins</source>
          <target state="translated">オプション#5:プラグイン</target>
        </trans-unit>
        <trans-unit id="1a14a0d7b093514d6c33982fdca31a9bf14d464c" translate="yes" xml:space="preserve">
          <source>Optional with Types</source>
          <target state="translated">タイプでオプション</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="1244c0634596c218c84666eb43b95bbb27f0ae5f" translate="yes" xml:space="preserve">
          <source>Options passed to &lt;code&gt;cypress open&lt;/code&gt; will automatically be applied to the project you open. These persist on all projects until you quit the Cypress Test Runner. These options will also override values in &lt;code&gt;cypress.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cypress open&lt;/code&gt; 渡されたオプションは、開いているプロジェクトに自動的に適用されます。これらは、サイプレステストランナーを終了するまで、すべてのプロジェクトで持続します。これらのオプションは、 &lt;code&gt;cypress.json&lt;/code&gt; の値もオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="c2994688fbdbe152f586a5d6b59595c3883ad684" translate="yes" xml:space="preserve">
          <source>Options that can be modified to control how the browser is launched, with the following properties:</source>
          <target state="translated">ブラウザの起動方法を制御するために変更できるオプションで、以下のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="bdd0b506837a990803d8edf137f2934329835748" translate="yes" xml:space="preserve">
          <source>Options:</source>
          <target state="translated">Options:</target>
        </trans-unit>
        <trans-unit id="8941428310c6eee57bc8705cffaf426d3a2e5406" translate="yes" xml:space="preserve">
          <source>Or Chrome Canary:</source>
          <target state="translated">もしくはクロームカナリア。</target>
        </trans-unit>
        <trans-unit id="69d8e4068a02f7b7ff38ecfe7805f2cb9370bcdd" translate="yes" xml:space="preserve">
          <source>Or in the Given, When, Then syntax:</source>
          <target state="translated">あるいは Given,When,Then の構文で。</target>
        </trans-unit>
        <trans-unit id="075d46ef0da1626f74ef520838cdbd8dad2c09e5" translate="yes" xml:space="preserve">
          <source>Or one check per spec file.</source>
          <target state="translated">または、スペックファイルごとに1つのチェック。</target>
        </trans-unit>
        <trans-unit id="d1de00c730d787028891cd81f075376b7d6ea81c" translate="yes" xml:space="preserve">
          <source>Or set record key as environment variable</source>
          <target state="translated">または、環境変数としてレコードキーを設定</target>
        </trans-unit>
        <trans-unit id="31fdfb86e72c3486dc20ada33b8560b64105f920" translate="yes" xml:space="preserve">
          <source>Or via &lt;code&gt;this.clock&lt;/code&gt;:</source>
          <target state="translated">または &lt;code&gt;this.clock&lt;/code&gt; を介して：</target>
        </trans-unit>
        <trans-unit id="07605242f7a070b43bdc103189dccf6a5cc43506" translate="yes" xml:space="preserve">
          <source>Organizations</source>
          <target state="translated">Organizations</target>
        </trans-unit>
        <trans-unit id="1de172d9322cfcfe717f545e2ecb33091c256184" translate="yes" xml:space="preserve">
          <source>Organizations are used to group projects and manage access to those projects.</source>
          <target state="translated">組織は、プロジェクトをグループ化し、それらのプロジェクトへのアクセスを管理するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a9c85825e284e10a0f3e973d528398d4faeffeae" translate="yes" xml:space="preserve">
          <source>Organize desktop vs mobile tests separately</source>
          <target state="translated">デスクトップとモバイルのテストを別々に整理する</target>
        </trans-unit>
        <trans-unit id="e6edb79bd3299492851baf099d1440283a3e86f2" translate="yes" xml:space="preserve">
          <source>Organize projects</source>
          <target state="translated">プロジェクトの整理</target>
        </trans-unit>
        <trans-unit id="f0336ca0b112897804e1308b65551001120f1017" translate="yes" xml:space="preserve">
          <source>Organized files around in preparation for OS release.</source>
          <target state="translated">OSリリースに向けて、ファイルの整理をしました。</target>
        </trans-unit>
        <trans-unit id="3661d984d680ac44e98a3b8527c0fd1ef2eede8a" translate="yes" xml:space="preserve">
          <source>Organizing</source>
          <target state="translated">Organizing</target>
        </trans-unit>
        <trans-unit id="3f5c63b2b821d22bce8f1aeeadafe5bb2c7ba1bd" translate="yes" xml:space="preserve">
          <source>Organizing Tests, Logging In, Controlling State</source>
          <target state="translated">テストの整理、ログイン、状態の制御</target>
        </trans-unit>
        <trans-unit id="86e4e3875420cdee95d08d4472073493729a7aee" translate="yes" xml:space="preserve">
          <source>Orientation</source>
          <target state="translated">Orientation</target>
        </trans-unit>
        <trans-unit id="40d10e7b54cbee953ab20dc3bf1adde199b2125f" translate="yes" xml:space="preserve">
          <source>Originally used in &lt;a href=&quot;https://github.com/Xvier/cypress-downloadfile&quot;&gt;cypress-downloadfile&lt;/a&gt;, this command calls other Cypress commands.</source>
          <target state="translated">もともと&lt;a href=&quot;https://github.com/Xvier/cypress-downloadfile&quot;&gt;cypress-downloadfile&lt;/a&gt;で使用されていたこのコマンドは、他のCypressコマンドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="718591843f9ba65a328acf7e21cfb68fa2042427" translate="yes" xml:space="preserve">
          <source>Other Events</source>
          <target state="translated">その他のイベント</target>
        </trans-unit>
        <trans-unit id="a0f0ed667090e2b4da8a08677ee6af9717b63780" translate="yes" xml:space="preserve">
          <source>Other Library Utilities</source>
          <target state="translated">その他のライブラリユーティリティ</target>
        </trans-unit>
        <trans-unit id="9633103b8382b75b3eaa31a6dbe6ab1d02153685" translate="yes" xml:space="preserve">
          <source>Other commands have other default assertions not related to the DOM.</source>
          <target state="translated">他のコマンドは、DOM に関係のない他のデフォルトのアサーションを持っています。</target>
        </trans-unit>
        <trans-unit id="134fb8d2ae04d2d3c9a9a4af6ad1692000839276" translate="yes" xml:space="preserve">
          <source>Other header edge cases fixed.</source>
          <target state="translated">その他のヘッダのエッジケースを修正しました。</target>
        </trans-unit>
        <trans-unit id="9a74839fb329210cefc15f752a6622604d7bd388" translate="yes" xml:space="preserve">
          <source>Other scenarios are fixed where command options would show incorrect number of object keys due to a bug in underscore&amp;rsquo;s &lt;code&gt;reduce&lt;/code&gt; with an object that has a &lt;code&gt;length&lt;/code&gt; key. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/35&quot;&gt;#35&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; キーを持つオブジェクトを &lt;code&gt;reduce&lt;/code&gt; したアンダースコアの削減のバグが原因で、コマンドオプションが誤った数のオブジェクトキーを表示する他のシナリオが修正されました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/35&quot;&gt;＃35を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="b1b918a54461b6ca203ece2f7ef887446cdd145c" translate="yes" xml:space="preserve">
          <source>Other than that, you&amp;rsquo;ll have to wait for us to implement APIs to support this (check our &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/136&quot;&gt;open issue&lt;/a&gt;), or you can &lt;a href=&quot;web-security#Disabling-Web-Security&quot;&gt;disable web security&lt;/a&gt;.</source>
          <target state="translated">それ以外は、これをサポートするAPIを実装するまで待つ必要があります（&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/136&quot;&gt;未解決の問題を&lt;/a&gt;確認してください）。または、&lt;a href=&quot;web-security#Disabling-Web-Security&quot;&gt;Webセキュリティ&lt;/a&gt;を無効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="a6a1d57adbc55a74cd8d7e46f6465f90cae14723" translate="yes" xml:space="preserve">
          <source>Others, such as DOM based commands will automatically &lt;a href=&quot;retry-ability&quot;&gt;retry&lt;/a&gt; and wait for their corresponding elements to exist before failing.</source>
          <target state="translated">DOMベースのコマンドなどの他のものは、自動的に&lt;a href=&quot;retry-ability&quot;&gt;再試行し&lt;/a&gt;、失敗する前に対応する要素が存在するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="e0917a579b85b660779c9fc378f8524170e9108b" translate="yes" xml:space="preserve">
          <source>Otherwise the request will go out to the server, and the test spies on the network call. The spying intercept can even modify the real response from the server before it is returned to the web application under test.</source>
          <target state="translated">そうでなければ、リクエストはサーバに出て行き、テストはネットワークコールをスパイします。スパイの傍受は、テスト対象のウェブアプリケーションに戻される前に、サーバからの実際のレスポンスを修正することもできます。</target>
        </trans-unit>
        <trans-unit id="b64eeb9f052228eb6127e939fd69a0fcd34b7810" translate="yes" xml:space="preserve">
          <source>Our &lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html#Fundamentals&quot;&gt;&amp;ldquo;Node Modules&amp;rdquo; recipes&lt;/a&gt; show you how to modify the support file.</source>
          <target state="translated">私たちの&lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html#Fundamentals&quot;&gt;「ノードモジュール」のレシピは、&lt;/a&gt;サポートファイルを変更する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d8cf6c038b7ecc3bd2037fbd2a871b0c1e37a427" translate="yes" xml:space="preserve">
          <source>Our &lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt;chat&lt;/a&gt; has now been directly integrated into Cypress&amp;rsquo;s nav. Clicking on the &lt;code&gt;chat&lt;/code&gt; icon will immediately display the current gitter chat log.</source>
          <target state="translated">これで、&lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt;チャット&lt;/a&gt;がサイプレスのナビゲーションに直接統合されました。 &lt;code&gt;chat&lt;/code&gt; アイコンをクリックすると、現在のGitterチャットログがすぐに表示されます。</target>
        </trans-unit>
        <trans-unit id="b84dd6ed27ebbb24161fb20cd13e9c9446790489" translate="yes" xml:space="preserve">
          <source>Our algorithm &lt;em&gt;should&lt;/em&gt; always be able to scroll until the element is not covered.</source>
          <target state="translated">要素がカバーされなくなるまで、アルゴリズム&lt;em&gt;は&lt;/em&gt;常にスクロールできる&lt;em&gt;必要&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="a870abe4c860977f849cc1f630781f46ffcd7fba" translate="yes" xml:space="preserve">
          <source>Our application correctly processing the response.</source>
          <target state="translated">当社のアプリケーションは、応答を正しく処理しています。</target>
        </trans-unit>
        <trans-unit id="04b5c88478c6a72f90ab7e86e7bf14012bd5b57b" translate="yes" xml:space="preserve">
          <source>Our application inserting the results into the DOM.</source>
          <target state="translated">私たちのアプリケーションは、結果をDOMに挿入します。</target>
        </trans-unit>
        <trans-unit id="a3ddf5a85c47d7464247fdd4ad5f82292ed8284e" translate="yes" xml:space="preserve">
          <source>Our application making a request to the correct URL.</source>
          <target state="translated">正しいURLへのリクエストを行っている当社のアプリケーション。</target>
        </trans-unit>
        <trans-unit id="af3d530a585a8e1bc006a72ddbadc9663b1582e9" translate="yes" xml:space="preserve">
          <source>Our build and testing processes have been upgraded to accommodate Linux builds.</source>
          <target state="translated">私たちのビルドとテストプロセスは、Linuxビルドに対応するようにアップグレードされました。</target>
        </trans-unit>
        <trans-unit id="e00a5668b64eb01e1930ca426cb6f2768842a9ee" translate="yes" xml:space="preserve">
          <source>Our input field</source>
          <target state="translated">弊社の入力フィールド</target>
        </trans-unit>
        <trans-unit id="079b47f75703a22d5288bf3ca08f7f9e8baf8b77" translate="yes" xml:space="preserve">
          <source>Our internal proxy no longer strips &lt;code&gt;HttpOnly&lt;/code&gt; cookie flags.</source>
          <target state="translated">内部プロキシは、 &lt;code&gt;HttpOnly&lt;/code&gt; Cookieフラグを削除しなくなりました。</target>
        </trans-unit>
        <trans-unit id="0f2b1d5242f8bd9da93bf9465b342f83bf4228db" translate="yes" xml:space="preserve">
          <source>Our mission</source>
          <target state="translated">私たちの使命</target>
        </trans-unit>
        <trans-unit id="5faefe610314fb559126eea0cf9344887304000f" translate="yes" xml:space="preserve">
          <source>Our mission is to build a thriving, open source ecosystem that enhances productivity, makes testing an enjoyable experience, and generates developer happiness. We hold ourselves accountable to champion a testing process &lt;strong&gt;that actually works&lt;/strong&gt;.</source>
          <target state="translated">私たちの使命は、生産性を高め、テストを楽しい体験にして、開発者の幸福を生み出す、繁栄しているオープンソースのエコシステムを構築することです。私たちは&lt;strong&gt;、実際に機能&lt;/strong&gt;するテストプロセスを擁護する責任を負っています。</target>
        </trans-unit>
        <trans-unit id="c36f22791b58a721576a2ea6c34e8bd392f10c81" translate="yes" xml:space="preserve">
          <source>Our mission, and what we believe in</source>
          <target state="translated">私たちの使命、私たちが信じていること</target>
        </trans-unit>
        <trans-unit id="764a968fc502f358b28aeda7baffb35af3131b9f" translate="yes" xml:space="preserve">
          <source>Our official list of Cypress plugins.</source>
          <target state="translated">Cypressプラグインの公式リストです。</target>
        </trans-unit>
        <trans-unit id="3f30a4728b3ddc300ec54d283646606d6079b0eb" translate="yes" xml:space="preserve">
          <source>Our run will generate files &lt;code&gt;cypress/results/mochawesome.json, cypress/results/mochawesome_001.json, ...&lt;/code&gt;. Then we can combine them using the &lt;a href=&quot;https://github.com/antontelesh/mochawesome-merge&quot;&gt;mochawesome-merge&lt;/a&gt; utility.</source>
          <target state="translated">実行すると、ファイル &lt;code&gt;cypress/results/mochawesome.json, cypress/results/mochawesome_001.json, ...&lt;/code&gt; が生成されます。次に、&lt;a href=&quot;https://github.com/antontelesh/mochawesome-merge&quot;&gt;mochawesome-merge&lt;/a&gt;ユーティリティを使用してそれらを組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="828b52eb03deb7deb2c7275716d13c839d78b132" translate="yes" xml:space="preserve">
          <source>Our team is always planning and working on really &amp;ldquo;big&amp;rdquo; upcoming features. Priorities can change as we move forward, but here is an outline of where Cypress is headed now.</source>
          <target state="translated">私たちのチームは、常に「大きな」今後の機能を計画し、取り組んでいます。私たちが前進するにつれて優先順位は変わる可能性がありますが、これはサイプレスが現在向かっているところの概要です。</target>
        </trans-unit>
        <trans-unit id="900f285ccd208a81b53230dc6914a439983fdea3" translate="yes" xml:space="preserve">
          <source>Our test can confirm the property was properly set.</source>
          <target state="translated">当社のテストでは、物件が正しく設定されているかどうかを確認することができます。</target>
        </trans-unit>
        <trans-unit id="41d947e0f7db689e7999246dec22a51df898a054" translate="yes" xml:space="preserve">
          <source>Our test should now display &lt;code&gt;CONTAINS&lt;/code&gt; in the &lt;a href=&quot;../core-concepts/test-runner#Command-Log&quot;&gt;Command Log&lt;/a&gt; and still be green.</source>
          <target state="translated">これでテストの&lt;a href=&quot;../core-concepts/test-runner#Command-Log&quot;&gt;コマンドログに&lt;/a&gt; &lt;code&gt;CONTAINS&lt;/code&gt; が表示され、緑色のままになります。</target>
        </trans-unit>
        <trans-unit id="6dc11a421caea45bb7bf80b53ddf9ed997ebaa3d" translate="yes" xml:space="preserve">
          <source>Our unit test is hitting the line we could not reach from the end-to-end tests, and if we execute all spec files - we will get 100% code coverage.</source>
          <target state="translated">私たちのユニットテストは、エンドツーエンドのテストでは到達できなかったラインにヒットしており、すべてのスペックファイルを実行すれば-100%のコードカバレッジを得ることができます。</target>
        </trans-unit>
        <trans-unit id="de107cd8214241da67abb1dce8f61cdc7e52cba4" translate="yes" xml:space="preserve">
          <source>Our users are typically developers or QA engineers building web applications using modern JavaScript frameworks.</source>
          <target state="translated">当社のユーザーは、通常、最新のJavaScriptフレームワークを使用してWebアプリケーションを構築する開発者やQAエンジニアです。</target>
        </trans-unit>
        <trans-unit id="cfd6eb0a6f58dc56f19f16cac6a2b6c5603d3e4e" translate="yes" xml:space="preserve">
          <source>Output both the versions of the installed Cypress binary application and the npm module.</source>
          <target state="translated">インストールされたCypressバイナリアプリケーションとnpmモジュールの両方のバージョンを出力します。</target>
        </trans-unit>
        <trans-unit id="287dd0e59f15cdc3294daad256a1cd713cd10158" translate="yes" xml:space="preserve">
          <source>Output usage information</source>
          <target state="translated">使用情報を出力します。</target>
        </trans-unit>
        <trans-unit id="7a7557c64edbf1ae6e0c7582c591925bad209743" translate="yes" xml:space="preserve">
          <source>Outputs Key Events Table to console on click</source>
          <target state="translated">クリックするとキーイベントテーブルをコンソールに出力</target>
        </trans-unit>
        <trans-unit id="b1bca3106f7d79706aa3b51e4318a92e167ae698" translate="yes" xml:space="preserve">
          <source>Outstanding requests are automatically aborted between tests</source>
          <target state="translated">未処理のリクエストはテスト間で自動的に中断されます</target>
        </trans-unit>
        <trans-unit id="b87f621eb3bd3b9d4273639f1afa66324d564e12" translate="yes" xml:space="preserve">
          <source>Over in the &lt;a href=&quot;../core-concepts/test-runner#Command-Log&quot;&gt;Command Log&lt;/a&gt; you&amp;rsquo;ll see Cypress display the suite, the test and your first assertion (which should be passing in green).</source>
          <target state="translated">以上で&lt;a href=&quot;../core-concepts/test-runner#Command-Log&quot;&gt;コマンドログ&lt;/a&gt;あなたはサイプレススイート、テストおよび（緑に渡すべきである）あなたの最初のアサーションを表示する表示されます。</target>
        </trans-unit>
        <trans-unit id="ce131b5f054db4860bc0e21b9f9d5edf6321df5f" translate="yes" xml:space="preserve">
          <source>Overhauled the entire subsystem dealing with an element&amp;rsquo;s visibility state. Previously we were using jQuery&amp;rsquo;s &lt;code&gt;.is(&quot;:visible&quot;)&lt;/code&gt; selector which was ineffective at truly determining when an element is &amp;ldquo;visible&amp;rdquo;. Our changes now differ significantly from jQuery, but they match what a real user would consider visible, and the rules are fairly easy to explain. In other words these rules should just &amp;ldquo;make sense&amp;rdquo;.</source>
          <target state="translated">要素の表示状態を処理するサブシステム全体を見直しました。以前は、jQueryの &lt;code&gt;.is(&quot;:visible&quot;)&lt;/code&gt; セレクターを使用していましたが、これは要素がいつ「可視」かを正確に判断するのに効果がありませんでした。今回の変更はjQueryと大きく異なりますが、実際のユーザーが目に見えると見なすものと一致し、ルールの説明はかなり簡単です。つまり、これらのルールは「意味をなす」だけです。</target>
        </trans-unit>
        <trans-unit id="ea5df8734b78a704d09b18622f7793039329d295" translate="yes" xml:space="preserve">
          <source>Overkill for 1 or 2 environment variables.</source>
          <target state="translated">1つまたは2つの環境変数のためのオーバーキル。</target>
        </trans-unit>
        <trans-unit id="2acc0cb53bf75fb575fd79d5044494ca1c739f83" translate="yes" xml:space="preserve">
          <source>Override &lt;code&gt;url&lt;/code&gt; glob matching options</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; globマッチングオプションを上書きする</target>
        </trans-unit>
        <trans-unit id="ac7a1564c38cb88838b8d574a746b7686662e3d0" translate="yes" xml:space="preserve">
          <source>Override default Mocha timeout handling, replaced with custom logic. Removes many bizarre edge cases.</source>
          <target state="translated">デフォルトのMochaタイムアウト処理をオーバーライドし、カスタムロジックに置き換えました。多くの奇妙なエッジケースを削除します。</target>
        </trans-unit>
        <trans-unit id="bba26f010298017d7596195a44abf189ea2f7ba1" translate="yes" xml:space="preserve">
          <source>Override default port</source>
          <target state="translated">デフォルトのポートをオーバーライド</target>
        </trans-unit>
        <trans-unit id="972589e34f682f215737ae7dade9d1545d13b9ff" translate="yes" xml:space="preserve">
          <source>Override multiple options from configuration file (&lt;code&gt;cypress.json&lt;/code&gt; by default) by passing an object literal</source>
          <target state="translated">オブジェクトリテラルを渡すことにより、構成ファイル（デフォルトでは &lt;code&gt;cypress.json&lt;/code&gt; ）から複数のオプションをオーバーライドします</target>
        </trans-unit>
        <trans-unit id="f4fa50fda07b6b386cbfe63da1a0a3de6d39c585" translate="yes" xml:space="preserve">
          <source>Override multiple values from configuration file (&lt;code&gt;cypress.json&lt;/code&gt; by default) by passing an object literal.</source>
          <target state="translated">オブジェクトリテラルを渡すことにより、構成ファイル（デフォルトでは &lt;code&gt;cypress.json&lt;/code&gt; ）から複数の値をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="dbfae8106e4520016392671e88563d001da61afc" translate="yes" xml:space="preserve">
          <source>Override the selectors that are returned per element</source>
          <target state="translated">要素ごとに返されるセレクタを上書きする</target>
        </trans-unit>
        <trans-unit id="c056a4e8c8b5ded25fd5c1de1e24443e6cab17c0" translate="yes" xml:space="preserve">
          <source>Overrides &lt;code&gt;name&lt;/code&gt; only for display purposes.</source>
          <target state="translated">表示目的でのみ &lt;code&gt;name&lt;/code&gt; オーバーライドします。</target>
        </trans-unit>
        <trans-unit id="0de2f7df9a1182e3371193832e9ffbda0ba1cf73" translate="yes" xml:space="preserve">
          <source>Overrides the global &lt;code&gt;requestTimeout&lt;/code&gt; for this request. Defaults to &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">このリクエストのグローバル &lt;code&gt;requestTimeout&lt;/code&gt; をオーバーライドします。デフォルトは &lt;code&gt;timeout&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="34b11a7aa4a58c64096833a3770ff786f1acbda0" translate="yes" xml:space="preserve">
          <source>Overrides the global &lt;code&gt;responseTimeout&lt;/code&gt; for this request. Defaults to &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">このリクエストのグローバル &lt;code&gt;responseTimeout&lt;/code&gt; をオーバーライドします。デフォルトは &lt;code&gt;timeout&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bc533440e33f7e93c5572bc348f0389559438897" translate="yes" xml:space="preserve">
          <source>Overriding Configuration</source>
          <target state="translated">設定の上書き</target>
        </trans-unit>
        <trans-unit id="d13fa98479a1b2e41a0dd81028d7125dee6b7be4" translate="yes" xml:space="preserve">
          <source>Overriding Options</source>
          <target state="translated">オーバーライドオプション</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="5d1061667d68f65ca9a24abf5bb68fe6608d538d" translate="yes" xml:space="preserve">
          <source>Overview -</source>
          <target state="translated">概要</target>
        </trans-unit>
        <trans-unit id="66a410f3471068bac3a522089b7d1674fc867f4c" translate="yes" xml:space="preserve">
          <source>Overview:</source>
          <target state="translated">Overview:</target>
        </trans-unit>
        <trans-unit id="651b238328415d9482abe02a46509e24270cd762" translate="yes" xml:space="preserve">
          <source>Overwrite &lt;code&gt;contains&lt;/code&gt; command</source>
          <target state="translated">上書きに &lt;code&gt;contains&lt;/code&gt; コマンドが含まれています</target>
        </trans-unit>
        <trans-unit id="380d7b9e8db236251941584dcac13331a990fa25" translate="yes" xml:space="preserve">
          <source>Overwrite &lt;code&gt;screenshot&lt;/code&gt; command</source>
          <target state="translated">&lt;code&gt;screenshot&lt;/code&gt; 上書きするコマンド</target>
        </trans-unit>
        <trans-unit id="dfcd4c1735270bc28b574b108a6da1453b4ca95e" translate="yes" xml:space="preserve">
          <source>Overwrite &lt;code&gt;type&lt;/code&gt; command</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; コマンドを上書き</target>
        </trans-unit>
        <trans-unit id="fe55ff3990602e8a382186152e84bf5417950bd2" translate="yes" xml:space="preserve">
          <source>Overwrite &lt;code&gt;visit&lt;/code&gt; command</source>
          <target state="translated">&lt;code&gt;visit&lt;/code&gt; コマンドを上書き</target>
        </trans-unit>
        <trans-unit id="c6b2f04ca28a0bbf26ecf770f4a432fd6fd1eccb" translate="yes" xml:space="preserve">
          <source>Overwrite Existing Commands</source>
          <target state="translated">既存のコマンドを上書きする</target>
        </trans-unit>
        <trans-unit id="14e092b6505d8076a0e4cf7586f230f4cdc06706" translate="yes" xml:space="preserve">
          <source>Overwrites all other forms of setting env variables.</source>
          <target state="translated">他のすべての形式の env 変数の設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="55af20415ead0ddd417f37fa91a4c767b749ee34" translate="yes" xml:space="preserve">
          <source>PR</source>
          <target state="translated">PR</target>
        </trans-unit>
        <trans-unit id="d625e512af00f2c3d22d6c1e5f20c004a9fabed3" translate="yes" xml:space="preserve">
          <source>PR comments and failure screenshot thumbnails are optional, and can be disabled if not needed within a project&amp;rsquo;s GitHub Integration settings:</source>
          <target state="translated">PRのコメントと失敗のスクリーンショットのサムネイルはオプションであり、プロジェクトのGitHub統合設定で不要な場合は無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="92367bb4820f6d139b1601c7faa4553765dda55b" translate="yes" xml:space="preserve">
          <source>Padding used to alter the dimensions of a screenshot of an element. It can either be a number, or an array of up to four numbers &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties&quot;&gt;using CSS shorthand notation&lt;/a&gt;. This property is only applied for element screenshots and is ignored for all other types.</source>
          <target state="translated">要素のスクリーンショットのサイズを変更するために使用されるパディング。数値、または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties&quot;&gt;CSSの省略表記を使用した&lt;/a&gt;最大4つの数値の配列のいずれかです。このプロパティは要素のスクリーンショットにのみ適用され、他のすべてのタイプでは無視されます。</target>
        </trans-unit>
        <trans-unit id="7914cd03c604d20e425177927205bc571e20082a" translate="yes" xml:space="preserve">
          <source>Page Load Errors</source>
          <target state="translated">ページロードエラー</target>
        </trans-unit>
        <trans-unit id="3765bfd5d7bd998258438c0b7893f18862adbecf" translate="yes" xml:space="preserve">
          <source>Page Loads</source>
          <target state="translated">ページの読み込み</target>
        </trans-unit>
        <trans-unit id="1fca89dd57d703cf1a653a18dfa94add93e1ce84" translate="yes" xml:space="preserve">
          <source>Page Navigation</source>
          <target state="translated">ページナビゲーション</target>
        </trans-unit>
        <trans-unit id="8b5b1ded6410ecf095ecbabe4bbdfd1434a68849" translate="yes" xml:space="preserve">
          <source>Page events</source>
          <target state="translated">ページイベント</target>
        </trans-unit>
        <trans-unit id="29b18fd430fb6dbbedb01b3cb9c534dbbee44ce3" translate="yes" xml:space="preserve">
          <source>Page load events no longer forcibly &lt;code&gt;null&lt;/code&gt; out the current subject. This was very unexpected and difficult to debug. Now stale elements or other objects from previous pages are yielded to you.</source>
          <target state="translated">ページ読み込みイベントは、現在の件名を強制的に &lt;code&gt;null&lt;/code&gt; することはなくなりました。これは予想外であり、デバッグが困難でした。これで、前のページの古い要素または他のオブジェクトが生成されます。</target>
        </trans-unit>
        <trans-unit id="d352b7dfb32b85185978769c09f84cfe59d257e0" translate="yes" xml:space="preserve">
          <source>Pain to write the &lt;code&gt;--env&lt;/code&gt; options everywhere you use Cypress.</source>
          <target state="translated">サイプレスを使用する &lt;code&gt;--env&lt;/code&gt; の場所で--envオプションを記述するのは面倒です。</target>
        </trans-unit>
        <trans-unit id="fb7f75a523427d81e3000ff59131b5a7d5e28db6" translate="yes" xml:space="preserve">
          <source>Parallelization</source>
          <target state="translated">Parallelization</target>
        </trans-unit>
        <trans-unit id="1ffd2f8d4759391168c0a25163e739ef59d84cf2" translate="yes" xml:space="preserve">
          <source>Parallelization process</source>
          <target state="translated">並列化処理</target>
        </trans-unit>
        <trans-unit id="0071f7c6e61d24f7681f55d5de9b246688d675d0" translate="yes" xml:space="preserve">
          <source>Parallelization settings</source>
          <target state="translated">並列化の設定</target>
        </trans-unit>
        <trans-unit id="e78977b0d2b7295348fb2111c8c0aed1c15bf0bd" translate="yes" xml:space="preserve">
          <source>Parallelizing our tests across 2 machines saved us almost 50% of the total run time, and we can further decrease the build time by adding more machines.</source>
          <target state="translated">2台のマシンでテストを並列化することで、総実行時間の50%近くを節約することができ、さらにマシンを追加することでビルド時間をさらに短縮することができます。</target>
        </trans-unit>
        <trans-unit id="7b61933b5151f96fe8f08b1892fb206db0c69f36" translate="yes" xml:space="preserve">
          <source>Parent Commands</source>
          <target state="translated">親コマンド</target>
        </trans-unit>
        <trans-unit id="6d813481d0e2765edac3b22ef65af035c97bd900" translate="yes" xml:space="preserve">
          <source>Parent commands always &lt;strong&gt;begin&lt;/strong&gt; a new chain of commands. Even if you&amp;rsquo;ve chained it off of a previous command, parent commands will always start a new chain, and ignore previously yielded subjects.</source>
          <target state="translated">親コマンドは常に新しいコマンドチェーンを&lt;strong&gt;開始&lt;/strong&gt;します。前のコマンドからチェインした場合でも、親コマンドは常に新しいチェインを開始し、以前に生成されたサブジェクトを無視します。</target>
        </trans-unit>
        <trans-unit id="726bec5e8a61a888b556fb08e09589f15c6497ae" translate="yes" xml:space="preserve">
          <source>Parse special characters for strings surrounded by &lt;code&gt;{}&lt;/code&gt;, such as &lt;code&gt;{esc}&lt;/code&gt;. Set to &lt;code&gt;false&lt;/code&gt; to type the literal characters instead</source>
          <target state="translated">&lt;code&gt;{esc}&lt;/code&gt; など、{ &lt;code&gt;{}&lt;/code&gt; で囲まれた文字列の特殊文字を解析します。代わりにリテラル文字を入力するには &lt;code&gt;false&lt;/code&gt; に設定します</target>
        </trans-unit>
        <trans-unit id="7f65b13784e740a4319a207b36f6d3ebf1191822" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;{animationDistanceThreshold: 20}&lt;/code&gt; to decrease the sensitivity of detecting if an element is animating. By increasing the threshold this enables your element to move farther on the page without causing Cypress to continuously retry.</source>
          <target state="translated">&lt;code&gt;{animationDistanceThreshold: 20}&lt;/code&gt; を渡して、要素がアニメーションかどうかを検出する感度を下げます。しきい値を上げることにより、サイプレスに継続的に再試行させることなく、エレメントをページ上でさらに移動させることができます。</target>
        </trans-unit>
        <trans-unit id="6e3c4f2fd7e8d3c49dd7759238695f4e1271b28d" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;{force: true}&lt;/code&gt;. This disables &lt;em&gt;all&lt;/em&gt; error checking</source>
          <target state="translated">&lt;code&gt;{force: true}&lt;/code&gt; 渡します。これにより、&lt;em&gt;すべての&lt;/em&gt;エラーチェックが無効に&lt;em&gt;なり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7954dfd274f9fe4fbfb315ff96ad047a4c1c7738" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;{waitForAnimations: false}&lt;/code&gt; to disable animation error checking</source>
          <target state="translated">パス &lt;code&gt;{waitForAnimations: false}&lt;/code&gt; 無効にアニメーションエラーチェックに</target>
        </trans-unit>
        <trans-unit id="42a14d42feb62693eb0d570ec87fed2c3979285a" translate="yes" xml:space="preserve">
          <source>Pass a function that can have any number of explicit assertions within it. Whatever was passed to the function is what is yielded.</source>
          <target state="translated">関数を渡して、その中にいくつでも明示的なアサーションを持つことができます。関数に渡されたものが何であれ、その結果が得られます。</target>
        </trans-unit>
        <trans-unit id="b7970c2432353e0ed7d38f33f8f53b87bbd51c68" translate="yes" xml:space="preserve">
          <source>Pass a function that expands the array into its arguments.</source>
          <target state="translated">配列を引数に展開する関数を渡します。</target>
        </trans-unit>
        <trans-unit id="9695fea0c70832d4dbc5486f1028ee09d482e97b" translate="yes" xml:space="preserve">
          <source>Pass a function that is invoked with the following arguments:</source>
          <target state="translated">以下の引数で呼び出される関数を渡します。</target>
        </trans-unit>
        <trans-unit id="48a526df05a88ca4659c2b3bed048b44d80bfdaf" translate="yes" xml:space="preserve">
          <source>Pass a function that receives the arguments passed to the command.</source>
          <target state="translated">コマンドに渡された引数を受け取る関数を渡します。</target>
        </trans-unit>
        <trans-unit id="1702bd7343a24ebfd3728dbd6ea3445e739f20f1" translate="yes" xml:space="preserve">
          <source>Pass a function that takes the current yielded subject as its first argument.</source>
          <target state="translated">現在の生成されたサブジェクトを第一引数に取る関数を渡します。</target>
        </trans-unit>
        <trans-unit id="89b5efc7fbcfc8e82e4f3f7b2a16815750d4be7b" translate="yes" xml:space="preserve">
          <source>Pass a function that takes the previously yielded subject as its first argument.</source>
          <target state="translated">前に生成されたサブジェクトを第 1 引数に取る関数を渡します。</target>
        </trans-unit>
        <trans-unit id="b53ee1e2da26c3ad158135a09e1e5043e9bff542" translate="yes" xml:space="preserve">
          <source>Pass a single string variable.</source>
          <target state="translated">1つの文字列変数を渡します。</target>
        </trans-unit>
        <trans-unit id="a9883256c0e1a4e71c3f1ed9505e84dea67bc010" translate="yes" xml:space="preserve">
          <source>Pass an object as a JSON in a string.</source>
          <target state="translated">オブジェクトをJSONとして文字列で渡します。</target>
        </trans-unit>
        <trans-unit id="899c3df738db5eb28c8614c44887a337fe4a13cc" translate="yes" xml:space="preserve">
          <source>Pass in an options object</source>
          <target state="translated">オプションオブジェクトを渡す</target>
        </trans-unit>
        <trans-unit id="081085aaf38a112f2493ac4b0e4b0cb79e3f59d5" translate="yes" xml:space="preserve">
          <source>Pass in an options object to &lt;code&gt;Cypress.log()&lt;/code&gt;.</source>
          <target state="translated">オプションオブジェクトを &lt;code&gt;Cypress.log()&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="30ce724b997ece17d42c30137b18429e840ca749" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.blur&lt;/code&gt;.</source>
          <target state="translated">オプションオブジェクトを渡して、 &lt;code&gt;.blur&lt;/code&gt; のデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="62d2c52785d24cfbb304812547fc0ac32efd8985" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.check()&lt;/code&gt;.</source>
          <target state="translated">オプションオブジェクトを渡して、 &lt;code&gt;.check()&lt;/code&gt; のデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="a81fa5b3e26185decdb933b9b334502b022e14a8" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.children()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.children()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="66a0bd38e1ab2e0d45d1c23ff87015a8fb7713b5" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.clear()&lt;/code&gt;.</source>
          <target state="translated">オプションオブジェクトを渡して、 &lt;code&gt;.clear()&lt;/code&gt; のデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="5d7c52f9e5d8fda425242e1b8979de9625daa8f5" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.click()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.click()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="824c84851489b0bdf01185f5dee4ac1d8ca53c86" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.closest()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.closest()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="db4e6a9e5a7456e312ae8f301c8b7c92bab8decf" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.contains()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.contains()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="531e37b609ab1ecde77405892c15f6063f827f15" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.dblclick()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.dblclick()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="6e99909a352c5eec870d34926405770f1c665753" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.debug()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.debug()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="b7720b5be271d33cb3a5b6abc7392249fa21567b" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.eq()&lt;/code&gt;.</source>
          <target state="translated">オプションオブジェクトを渡して、 &lt;code&gt;.eq()&lt;/code&gt; のデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="decd6f2e7ed526173f58b3cdd3859563a440b1dd" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.filter()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.filter()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="2c544301b56ae5b6844d408877eed8aaf505bf59" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.find()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.find()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="23d30c9a3ab905680019ae050e190aebab2c6b4a" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.first()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.first()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="9fd5eef1cba712f7111e8eb177e251687159701f" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.focus()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.focus()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="0a4ed6efa0ef55be04edb42dbcf462b75b54b885" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.invoke()&lt;/code&gt;.</source>
          <target state="translated">オプションオブジェクトを渡して、 &lt;code&gt;.invoke()&lt;/code&gt; のデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="e10921418a99e5dba1c39d870481fd2427394955" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.its()&lt;/code&gt;.</source>
          <target state="translated">オプションオブジェクトを渡して、 &lt;code&gt;.its()&lt;/code&gt; のデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="30786191033ad23c2474fcb28d7bf4d25f54d932" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.last()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.last()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="e9981eec7cee39bacee115b368aa65ee6a0c8525" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.next()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.next()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="11ba2f7017804272febc9f9a6ac4e566cd5e4cf6" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.nextAll()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.nextAll()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="aac7bde659146227e3b76efef14122a7f1ea9aae" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.nextUntil()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.nextUntil()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="2c253e4feab239bd8fe7fecdd559faf749a2e40a" translate="yes" xml:space="preserve">
          <source>Pass in an options object to change the default behavior of &lt;code&gt;.not()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.not()&lt;/code&gt; のデフォルトの動作を変更するには、オプションオブジェクトを渡します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
