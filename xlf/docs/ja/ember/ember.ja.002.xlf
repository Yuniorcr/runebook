<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="ember">
    <body>
      <group id="ember">
        <trans-unit id="46cc27dcedc983269fe3dae4fb3c917ec22990eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Native&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Native&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52751513d2493dd0d64f888941864b8be8e5ce5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Nested invocation&lt;/strong&gt; is another way to use a helper. Like inline helpers, nested helpers generate and return a single value. For example, this template only renders &lt;code&gt;&quot;zoooom&quot;&lt;/code&gt; if both &lt;code&gt;isFast&lt;/code&gt; and &lt;code&gt;isFueled&lt;/code&gt; are true:</source>
          <target state="translated">&lt;strong&gt;ネストされた呼び出し&lt;/strong&gt;は、ヘルパーを使用するもう1つの方法です。インラインヘルパーと同様に、ネストされたヘルパーは単一の値を生成して返します。たとえば、このテンプレートは、 &lt;code&gt;isFast&lt;/code&gt; と &lt;code&gt;isFueled&lt;/code&gt; の両方がtrueの場合にのみ &lt;code&gt;&quot;zoooom&quot;&lt;/code&gt; レンダリングします。</target>
        </trans-unit>
        <trans-unit id="275460f523b118049b10ae5f0f999ee575431a37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Never&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Never&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5938f985ae4a6eb7f469289b3da82078aa94ed7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non-native classes&lt;/strong&gt;. Octane apps say goodbye to &lt;code&gt;extend()&lt;/code&gt;, &lt;code&gt;create()&lt;/code&gt;, and mixins, and use Native Classes instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dcf051b0f8d4d6b70a92dd10d98dbbb05e7cdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Note:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c6706d4e671914b516408c09188cf03534b10db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Promises&lt;/strong&gt; - the native way to deal with asynchrony in your JavaScript code. See the relevant &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Mozilla Developer Network&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;約束&lt;/strong&gt; -JavaScriptコードで非同期を処理するネイティブな方法。関連する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Mozilla Developer Network&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4f0e6c795f05f3b5db2a12a168e52bcd194b048a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Promises&lt;/strong&gt; - the native way to deal with asynchrony in your JavaScript code. See the relevant &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Mozilla Developer Network&lt;/a&gt; section. In addition, modern &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await&quot;&gt;&lt;code&gt;async/await&lt;/code&gt; function syntax&lt;/a&gt; is good to know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e950934efea9cd4f355fb7ad4df86e0c64315506" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Required.&lt;/strong&gt; You must implement this method to apply this mixin.</source>
          <target state="translated">&lt;strong&gt;必須。&lt;/strong&gt;このミックスインを適用するには、このメソッドを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="24993c189d4cd762b7eb2181ccc6ac96dd1f9b1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The getter does not need any special annotations.&lt;/strong&gt; As long as you've marked the properties that can change with &lt;code&gt;@tracked&lt;/code&gt;, you can use JavaScript to compute new values from those properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcea3a8103a14becd4a075465bc5c402fa88c01e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The run loop&lt;/strong&gt;. App developers should never have to write code that interacts with the Ember run loop, even in tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c04ca3a7f9dd255e30a26a61897792a828611c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is how we normally write helpers in Ember&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881babe651a21a62e7364b7b9cfa1794d6395225" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When customizing a serializer it is important to grok what the customizations are. Please read the docs for the methods this mixin provides, in case you need to modify it to fit your specific needs.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;シリアライザをカスタマイズする場合、カスタマイズ内容を理解することが重要です。特定のニーズに合わせて変更する必要がある場合は、このミックスインが提供するメソッドのドキュメントをお読みください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="470600606588a32d9557241101058912ab50961d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt;: This is where folders and files for models, components, routes, templates and styles are stored. The majority of your coding on an Ember project happens in this folder.</source>
          <target state="translated">&lt;strong&gt;app&lt;/strong&gt;：これは、モデル、コンポーネント、ルート、テンプレート、およびスタイルのフォルダーとファイルが格納される場所です。Emberプロジェクトでのコーディングの大部分は、このフォルダーで行われます。</target>
        </trans-unit>
        <trans-unit id="8481c210d2bfd9e765791e4f4a3dd04bd9d6ec83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;config&lt;/strong&gt;: The config directory contains the &lt;code&gt;environment.js&lt;/code&gt; where you can configure settings for your app.</source>
          <target state="translated">&lt;strong&gt;config&lt;/strong&gt;：configディレクトリーには、アプリの設定を構成できる &lt;code&gt;environment.js&lt;/code&gt; が含まれています。</target>
        </trans-unit>
        <trans-unit id="3bbd1fe48c75d123d9b241aa7cf37249e8f60f3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ember-cli-build.js&lt;/strong&gt;: This file describes how Ember CLI should build our app.</source>
          <target state="translated">&lt;strong&gt;ember-cli-build.js&lt;/strong&gt;：このファイルは、Ember CLIがアプリをビルドする方法を説明します。</target>
        </trans-unit>
        <trans-unit id="68cdacf9491924b75172e8dab39d04533551eca8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jQuery&lt;/strong&gt;. For DOM interaction, developers should use templates or native DOM APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c6cdacb081a9f0a62d6e02a0564a76df9ce816" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt;String the name of this relationship on the Model</source>
          <target state="translated">&lt;strong&gt;key&lt;/strong&gt; Stringモデル上のこの関係の名前</target>
        </trans-unit>
        <trans-unit id="1fd7a0b34963fb6134b8ae17d1ecaed1cb1f794e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;kind&lt;/strong&gt;String &quot;hasMany&quot; or &quot;belongsTo&quot;</source>
          <target state="translated">&lt;strong&gt;種類の&lt;/strong&gt;文字列「hasMany」または「belongsTo」</target>
        </trans-unit>
        <trans-unit id="df54a76dfc05f7feb93b9870ae131f74a3c72a4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;node_modules / package.json&lt;/strong&gt;: This directory and file are from npm. npm is the package manager for Node.js. Ember is built with Node and uses a variety of Node.js modules for operation. The &lt;code&gt;package.json&lt;/code&gt; file maintains the list of current npm dependencies for the app. Any Ember CLI addons you install will also show up here. Packages listed in &lt;code&gt;package.json&lt;/code&gt; are installed in the node_modules directory.</source>
          <target state="translated">&lt;strong&gt;node_modules / package.json&lt;/strong&gt;：このディレクトリとファイルはnpmからのものです。npmはNode.jsのパッケージマネージャーです。EmberはNodeで構築されており、操作にはさまざまなNode.jsモジュールを使用します。 &lt;code&gt;package.json&lt;/code&gt; のファイルは、アプリケーションの現在のNPMの依存関係のリストを保持します。インストールしたEmber CLIアドオンもここに表示されます。 &lt;code&gt;package.json&lt;/code&gt; にリストされているパッケージは、node_modulesディレクトリーにインストールされます。</target>
        </trans-unit>
        <trans-unit id="efbedcbe9d2e3a12d8d8b0d88ed61054a887ebe9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;options&lt;/strong&gt;Object the original options hash passed when the relationship was declared</source>
          <target state="translated">&lt;strong&gt;options&lt;/strong&gt;オブジェクト関係が宣言されたときに渡された元のオプションハッシュ</target>
        </trans-unit>
        <trans-unit id="6840a435ff71567b4b4a941b6847beb0ddb59330" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;parentType&lt;/strong&gt;DS.Model the type of the Model that owns this relationship</source>
          <target state="translated">&lt;strong&gt;parentType&lt;/strong&gt; DS.Modelこの関係を所有するモデルのタイプ</target>
        </trans-unit>
        <trans-unit id="7b360785b08f4c59c21ddaf3671eb93c0740f054" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;public&lt;/strong&gt;: This directory contains assets such as images and fonts.</source>
          <target state="translated">&lt;strong&gt;public&lt;/strong&gt;：このディレクトリには、画像やフォントなどのアセットが含まれています。</target>
        </trans-unit>
        <trans-unit id="2661328b5b44a9913111324f3cea23d911fa3e0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tests / testem.js&lt;/strong&gt;: Automated tests for our app go in the &lt;code&gt;tests&lt;/code&gt; folder, and Ember CLI's test runner &lt;strong&gt;testem&lt;/strong&gt; is configured in &lt;code&gt;testem.js&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;tests / testem.js&lt;/strong&gt;：アプリの自動テストは &lt;code&gt;tests&lt;/code&gt; フォルダーにあり、Ember CLIのテストランナー&lt;strong&gt;testem&lt;/strong&gt;は&lt;strong&gt;testem.js&lt;/strong&gt;で構成されてい &lt;code&gt;testem.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa2ab6088b7133c1145df75bf15fd8ea46566d39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt;String the type name of the related Model</source>
          <target state="translated">&lt;strong&gt;type&lt;/strong&gt; String関連するモデルのタイプ名</target>
        </trans-unit>
        <trans-unit id="4fb59e3a73663d5b9fc22e94c07aa74fe28020a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;vendor&lt;/strong&gt;: This directory is where front-end dependencies (such as JavaScript or CSS) that are not managed by Bower go.</source>
          <target state="translated">&lt;strong&gt;vendor&lt;/strong&gt;：このディレクトリは、Bowerによって管理されていないフロントエンドの依存関係（JavaScriptやCSSなど）が移動する場所です。</target>
        </trans-unit>
        <trans-unit id="9e550e6978bf8ce363e735f61a5329a94d3e4b94" translate="yes" xml:space="preserve">
          <source>@action, {{on}} and {{fn}}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a104720fd47e5de4a82907b888ca895f1310a23" translate="yes" xml:space="preserve">
          <source>@each</source>
          <target state="translated">@each</target>
        </trans-unit>
        <trans-unit id="b63a5032a4f6d06544f05b54829328428a4671e6" translate="yes" xml:space="preserve">
          <source>@eachpublic</source>
          <target state="translated">@eachpublic</target>
        </trans-unit>
        <trans-unit id="a84832d8a317b79048cb747460807cd5f0c21e79" translate="yes" xml:space="preserve">
          <source>@ember-data/adapter</source>
          <target state="translated">@ember-data/adapter</target>
        </trans-unit>
        <trans-unit id="d27df9e14ef39d7153a975a41c7989ec9ec8a82d" translate="yes" xml:space="preserve">
          <source>@ember-data/model</source>
          <target state="translated">@ember-data/model</target>
        </trans-unit>
        <trans-unit id="651d8952598e49c77f68ef8643a3baaaa29e5602" translate="yes" xml:space="preserve">
          <source>@ember-data/serializer</source>
          <target state="translated">@ember-data/serializer</target>
        </trans-unit>
        <trans-unit id="41116ecbc4089ac14813bf72e5e43318c2be5504" translate="yes" xml:space="preserve">
          <source>@ember-data/store</source>
          <target state="translated">@ember-data/store</target>
        </trans-unit>
        <trans-unit id="53b9c81505e4ada6bd2f7e384935ac0aefecebed" translate="yes" xml:space="preserve">
          <source>@ember/application</source>
          <target state="translated">@ember/application</target>
        </trans-unit>
        <trans-unit id="61d1d6a0a1d2d0effe9e5e736bcb8a416e1ab90e" translate="yes" xml:space="preserve">
          <source>@ember/array</source>
          <target state="translated">@ember/array</target>
        </trans-unit>
        <trans-unit id="4fb3770c46984b4dc92bb7bd246d55a899f071a9" translate="yes" xml:space="preserve">
          <source>@ember/component</source>
          <target state="translated">@ember/component</target>
        </trans-unit>
        <trans-unit id="2aa2a6db9ebec37324c30ab650396636ffff2c94" translate="yes" xml:space="preserve">
          <source>@ember/component/helper</source>
          <target state="translated">@ember/component/helper</target>
        </trans-unit>
        <trans-unit id="bfd12969bf83fd1feb2ae5371c53bbf08e6c6d97" translate="yes" xml:space="preserve">
          <source>@ember/controller</source>
          <target state="translated">@ember/controller</target>
        </trans-unit>
        <trans-unit id="8d77a255ce4e3f4d03a7386c7b0d609e206736a4" translate="yes" xml:space="preserve">
          <source>@ember/debug</source>
          <target state="translated">@ember/debug</target>
        </trans-unit>
        <trans-unit id="25be50a77683c04ed884ca466e6d454a12bf5089" translate="yes" xml:space="preserve">
          <source>@ember/destroyable</source>
          <target state="translated">@ember/destroyable</target>
        </trans-unit>
        <trans-unit id="ca2a52f826dbf85cd3957b3dea8b7057165ca911" translate="yes" xml:space="preserve">
          <source>@ember/engine</source>
          <target state="translated">@ember/engine</target>
        </trans-unit>
        <trans-unit id="4c4a82c37ea6f5646760817ba97742b1e71a0aed" translate="yes" xml:space="preserve">
          <source>@ember/enumerable</source>
          <target state="translated">@ember/enumerable</target>
        </trans-unit>
        <trans-unit id="a0e0fde7d923c22553982f115f401c51cafbb99e" translate="yes" xml:space="preserve">
          <source>@ember/error</source>
          <target state="translated">@ember/error</target>
        </trans-unit>
        <trans-unit id="24e867317ba3a1a9f57bb896e1220fe076d661da" translate="yes" xml:space="preserve">
          <source>@ember/helper</source>
          <target state="translated">@ember/helper</target>
        </trans-unit>
        <trans-unit id="e61c1957261d6c6b6085aa1b3441eeeaddfa44c1" translate="yes" xml:space="preserve">
          <source>@ember/object</source>
          <target state="translated">@ember/object</target>
        </trans-unit>
        <trans-unit id="798360581537d58ae389b8a8f6752c4f1f0868e8" translate="yes" xml:space="preserve">
          <source>@ember/object/compat</source>
          <target state="translated">@ember/object/compat</target>
        </trans-unit>
        <trans-unit id="3c4c2741b0b49235cec15ef4795eac1978a1ee86" translate="yes" xml:space="preserve">
          <source>@ember/object/computed</source>
          <target state="translated">@ember/object/computed</target>
        </trans-unit>
        <trans-unit id="7d86f26ef80776b9b559fcdeab2cbf4376df7346" translate="yes" xml:space="preserve">
          <source>@ember/object/evented</source>
          <target state="translated">@ember/object/evented</target>
        </trans-unit>
        <trans-unit id="aaa81b3c4fef267aebd1b415e21bb6042db7550b" translate="yes" xml:space="preserve">
          <source>@ember/object/events</source>
          <target state="translated">@ember/object/events</target>
        </trans-unit>
        <trans-unit id="4ddbd2982c7200305644ab2f67826e425fe7f852" translate="yes" xml:space="preserve">
          <source>@ember/object/internals</source>
          <target state="translated">@ember/object/internals</target>
        </trans-unit>
        <trans-unit id="a3b2ed0c37ed21a2c34eb2aa0a53c279598b8ed5" translate="yes" xml:space="preserve">
          <source>@ember/object/mixin</source>
          <target state="translated">@ember/object/mixin</target>
        </trans-unit>
        <trans-unit id="d50fc146481d3aebb15ba0d167bdaa4aec33ca69" translate="yes" xml:space="preserve">
          <source>@ember/object/observers</source>
          <target state="translated">@ember/object/observers</target>
        </trans-unit>
        <trans-unit id="e925711e4b0506df036523eb257a0dbdca7178a7" translate="yes" xml:space="preserve">
          <source>@ember/polyfills</source>
          <target state="translated">@ember/polyfills</target>
        </trans-unit>
        <trans-unit id="c23ad30937b00a6f8d32bb1518874cf6fe7126e8" translate="yes" xml:space="preserve">
          <source>@ember/routing</source>
          <target state="translated">@ember/routing</target>
        </trans-unit>
        <trans-unit id="a380c7830f5e13c406c71913fedc6bfdb871da98" translate="yes" xml:space="preserve">
          <source>@ember/runloop</source>
          <target state="translated">@ember/runloop</target>
        </trans-unit>
        <trans-unit id="d2f50634a34661826cc2378889ae5b80e7f22a92" translate="yes" xml:space="preserve">
          <source>@ember/service</source>
          <target state="translated">@ember/service</target>
        </trans-unit>
        <trans-unit id="1cba11baa70229b9c6d0cec32f2c7ee14f74e5f6" translate="yes" xml:space="preserve">
          <source>@ember/string</source>
          <target state="translated">@ember/string</target>
        </trans-unit>
        <trans-unit id="9f6d55042d91454cf9ac6e6e6b5ff437fab33876" translate="yes" xml:space="preserve">
          <source>@ember/template</source>
          <target state="translated">@ember/template</target>
        </trans-unit>
        <trans-unit id="cad3aefdc2a7e736b76ab54a28fc3320e12d1315" translate="yes" xml:space="preserve">
          <source>@ember/test</source>
          <target state="translated">@ember/test</target>
        </trans-unit>
        <trans-unit id="43b98a8c4c0513b9c2417ab6d724adee5fcb8b9b" translate="yes" xml:space="preserve">
          <source>@ember/utils</source>
          <target state="translated">@ember/utils</target>
        </trans-unit>
        <trans-unit id="c74d444a6300a7850693a4126a85d1093b82c7c7" translate="yes" xml:space="preserve">
          <source>@glimmer/tracking</source>
          <target state="translated">@glimmer/tracking</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="105e706c5a0b406113be39077dfee881b1f52efb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Controller&quot;&gt;Controller&lt;/a&gt; is routable object which receives a single property from the Route &amp;ndash; &lt;code&gt;model&lt;/code&gt; &amp;ndash; which is the return value of the Route's &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#model&quot;&gt;&lt;code&gt;model()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750249ccf178076eaee9557b46a05f046f177bef" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Service&quot;&gt;&lt;code&gt;Service&lt;/code&gt;&lt;/a&gt; is an Ember object that lives for the duration of the application, and can be made available in different parts of your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae76bfb5590e0d3b4555f9006461154c7e304f0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://en.wikipedia.org/wiki/Cron&quot;&gt;cron&lt;/a&gt; utility parses an input string into an object that can be used for UI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbed7901f13c3b1fe7d038fff4169f30c4a94de" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;AbortError&lt;/code&gt; is used by an adapter to signal that a request to the external API was aborted. For example, this can occur if the user navigates away from the current page after a request to the external API has been initiated but before a response has been received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae30432ae2e8254e69f769cc2cfe15c73786d284" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BelongsToReference&lt;/code&gt; is a low-level API that allows users and addon authors to perform meta-operations on a belongs-to relationship.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302756143b6827ecfb1ea16432cf0c68d2519077" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ConflictError&lt;/code&gt; equates to a HTTP &lt;code&gt;409 Conflict&lt;/code&gt; response status. It is used by an adapter to indicate that the request could not be processed because of a conflict in the request. An example scenario would be when creating a record with a client-generated ID but that ID is already known to the external API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc93c37be1f7b5aeb90bd5062ef7ac95cab7a0d5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.AbortError&lt;/code&gt; is used by an adapter to signal that a request to the external API was aborted. For example, this can occur if the user navigates away from the current page after a request to the external API has been initiated but before a response has been received.</source>
          <target state="translated">A &lt;code&gt;DS.AbortError&lt;/code&gt; は、外部APIへの要求が中止されたことを知らせるためにアダプタが使用されます。たとえば、外部APIへのリクエストが開始された後、レスポンスが受信される前に、ユーザーが現在のページから移動した場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b480f5113d03af2cb8949938c6b4a9c2c5f36c44" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.AdapterError&lt;/code&gt; is used by an adapter to signal that an error occurred during a request to an external API. It indicates a generic error, and subclasses are used to indicate specific error states. The following subclasses are provided:</source>
          <target state="translated">A &lt;code&gt;DS.AdapterError&lt;/code&gt; は、エラーが外部APIへのリクエスト中に発生したことを知らせるためにアダプタが使用されます。これは一般的なエラーを示し、サブクラスは特定のエラー状態を示すために使用されます。次のサブクラスが提供されています。</target>
        </trans-unit>
        <trans-unit id="48d0b507fdfd4bea3540108d5aac765d760b6398" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.ConflictError&lt;/code&gt; equates to a HTTP &lt;code&gt;409 Conflict&lt;/code&gt; response status. It is used by an adapter to indicate that the request could not be processed because of a conflict in the request. An example scenario would be when creating a record with a client generated id but that id is already known to the external API.</source>
          <target state="translated">A &lt;code&gt;DS.ConflictError&lt;/code&gt; は HTTPに相当 &lt;code&gt;409 Conflict&lt;/code&gt; 応答ステータス。これはアダプターによって使用され、要求の競合のために要求を処理できなかったことを示します。シナリオの例としては、クライアントが生成したIDを使用してレコードを作成したが、そのIDは外部APIですでに認識されている場合があります。</target>
        </trans-unit>
        <trans-unit id="22e82437db6f702331073bf754017df1fe2a4dc3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.ForbiddenError&lt;/code&gt; equates to a HTTP &lt;code&gt;403 Forbidden&lt;/code&gt; response status. It is used by an adapter to signal that a request to the external API was valid but the server is refusing to respond to it. If authorization was provided and is valid, then the authenticated user does not have the necessary permissions for the request.</source>
          <target state="translated">A &lt;code&gt;DS.ForbiddenError&lt;/code&gt; は HTTPに相当 &lt;code&gt;403 Forbidden&lt;/code&gt; 応答ステータス。これは、アダプターが外部APIへの要求は有効であったが、サーバーがそれに応答することを拒否していることを通知するために使用されます。承認が提供され、有効である場合、認証されたユーザーは要求に必要な権限を持っていません。</target>
        </trans-unit>
        <trans-unit id="be67fdd797c0eb7f63b2a4e3626f22fb402351b0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.InvalidError&lt;/code&gt; is used by an adapter to signal the external API was unable to process a request because the content was not semantically correct or meaningful per the API. Usually this means a record failed some form of server side validation. When a promise from an adapter is rejected with a &lt;code&gt;DS.InvalidError&lt;/code&gt; the record will transition to the &lt;code&gt;invalid&lt;/code&gt; state and the errors will be set to the &lt;code&gt;errors&lt;/code&gt; property on the record.</source>
          <target state="translated">A &lt;code&gt;DS.InvalidError&lt;/code&gt; は、コンテンツがAPI当たり意味的に正しいか有意義ではなかったため、要求を処理できませんでした外部APIを通知するためにアダプターが使用されています。通常、これは、レコードが何らかのサーバー側の検証に失敗したことを意味します。アダプターからのプロミスが &lt;code&gt;DS.InvalidError&lt;/code&gt; で拒否されると、レコードは &lt;code&gt;invalid&lt;/code&gt; 状態に遷移し、エラーはレコードの &lt;code&gt;errors&lt;/code&gt; プロパティに設定されます。</target>
        </trans-unit>
        <trans-unit id="8cef967c37ad7234867dac1b8fc34dc617e9de59" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.NotFoundError&lt;/code&gt; equates to a HTTP &lt;code&gt;404 Not Found&lt;/code&gt; response status. It is used by an adapter to signal that a request to the external API was rejected because the resource could not be found on the API.</source>
          <target state="translated">A &lt;code&gt;DS.NotFoundError&lt;/code&gt; は HTTPに相当 &lt;code&gt;404 Not Found&lt;/code&gt; 応答ステータス。APIでリソースが見つからなかったため、外部APIへのリクエストが拒否されたことを通知するためにアダプターによって使用されます。</target>
        </trans-unit>
        <trans-unit id="9cf86b2e9084693ddc33e7078b13973eaf62d580" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.ServerError&lt;/code&gt; equates to a HTTP &lt;code&gt;500 Internal Server Error&lt;/code&gt; response status. It is used by the adapter to indicate that a request has failed because of an error in the external API.</source>
          <target state="translated">A &lt;code&gt;DS.ServerError&lt;/code&gt; は HTTPに相当 &lt;code&gt;500 Internal Server Error&lt;/code&gt; 応答ステータス。これは、外部APIのエラーのために要求が失敗したことを示すためにアダプターによって使用されます。</target>
        </trans-unit>
        <trans-unit id="10dcb401dc6e95359c2a133a95b5c2c685bb25ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.TimeoutError&lt;/code&gt; is used by an adapter to signal that a request to the external API has timed out. I.e. no response was received from the external API within an allowed time period.</source>
          <target state="translated">A &lt;code&gt;DS.TimeoutError&lt;/code&gt; は、外部APIへのリクエストがタイムアウトしたことを知らせるために、アダプターによって使用されます。つまり、許可された時間内に外部APIから応答がありませんでした。</target>
        </trans-unit>
        <trans-unit id="7d7f67b6c2d390180b7b780e2376e0d612463234" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.UnauthorizedError&lt;/code&gt; equates to a HTTP &lt;code&gt;401 Unauthorized&lt;/code&gt; response status. It is used by an adapter to signal that a request to the external API was rejected because authorization is required and has failed or has not yet been provided.</source>
          <target state="translated">A &lt;code&gt;DS.UnauthorizedError&lt;/code&gt; は HTTPに相当 &lt;code&gt;401 Unauthorized&lt;/code&gt; 応答ステータス。これは、許可が必要であり、失敗したかまだ提供されていないために、外部APIへの要求が拒否されたことを通知するためにアダプターによって使用されます。</target>
        </trans-unit>
        <trans-unit id="741333828bcb11a03f9d231b9f1bcacd39a479f8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ForbiddenError&lt;/code&gt; equates to a HTTP &lt;code&gt;403 Forbidden&lt;/code&gt; response status. It is used by an adapter to signal that a request to the external API was valid but the server is refusing to respond to it. If authorization was provided and is valid, then the authenticated user does not have the necessary permissions for the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e65b5a5ff084c70cd62752035b375432e0ecad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;HasManyReference&lt;/code&gt; is a low-level API that allows users and addon authors to perform meta-operations on a has-many relationship.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8334b569a762d2cc8017cde582e0867cb0a80c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;InvalidError&lt;/code&gt; is used by an adapter to signal the external API was unable to process a request because the content was not semantically correct or meaningful per the API. Usually, this means a record failed some form of server-side validation. When a promise from an adapter is rejected with a &lt;code&gt;InvalidError&lt;/code&gt; the record will transition to the &lt;code&gt;invalid&lt;/code&gt; state and the errors will be set to the &lt;code&gt;errors&lt;/code&gt; property on the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5930d1bcd72b59f96480c5ab195a8bd1cff6b953" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ManyArray&lt;/code&gt; is a &lt;code&gt;MutableArray&lt;/code&gt; that represents the contents of a has-many relationship.</source>
          <target state="translated">A &lt;code&gt;ManyArray&lt;/code&gt; がある &lt;code&gt;MutableArray&lt;/code&gt; あり、多くの関係の内容を表しています。</target>
        </trans-unit>
        <trans-unit id="d2bb6f9087c5cdb7bc8ca4e278beb6a66c417990" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NotFoundError&lt;/code&gt; equates to a HTTP &lt;code&gt;404 Not Found&lt;/code&gt; response status. It is used by an adapter to signal that a request to the external API was rejected because the resource could not be found on the API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e54ab3b27e58aa830c56ed18933ccea43ca083" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PromiseArray&lt;/code&gt; is an object that acts like both an &lt;code&gt;Ember.Array&lt;/code&gt; and a promise. When the promise is resolved the resulting value will be set to the &lt;code&gt;PromiseArray&lt;/code&gt;'s &lt;code&gt;content&lt;/code&gt; property. This makes it easy to create data bindings with the &lt;code&gt;PromiseArray&lt;/code&gt; that will be updated when the promise resolves.</source>
          <target state="translated">A &lt;code&gt;PromiseArray&lt;/code&gt; は両方のように機能するオブジェクトである &lt;code&gt;Ember.Array&lt;/code&gt; と約束。promiseが解決されると、結果の値は &lt;code&gt;PromiseArray&lt;/code&gt; の &lt;code&gt;content&lt;/code&gt; プロパティに設定されます。これにより、Promiseの解決時に更新される &lt;code&gt;PromiseArray&lt;/code&gt; を使用してデータバインディングを簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="0d19be6669052c929ac43d73e3cd38063b850ca8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PromiseObject&lt;/code&gt; is an object that acts like both an &lt;code&gt;Ember.Object&lt;/code&gt; and a promise. When the promise is resolved, then the resulting value will be set to the &lt;code&gt;PromiseObject&lt;/code&gt;'s &lt;code&gt;content&lt;/code&gt; property. This makes it easy to create data bindings with the &lt;code&gt;PromiseObject&lt;/code&gt; that will be updated when the promise resolves.</source>
          <target state="translated">A &lt;code&gt;PromiseObject&lt;/code&gt; は両方のように機能するオブジェクトである &lt;code&gt;Ember.Object&lt;/code&gt; と約束。promiseが解決されると、結果の値は &lt;code&gt;PromiseObject&lt;/code&gt; の &lt;code&gt;content&lt;/code&gt; プロパティに設定されます。これにより、Promiseの解決時に更新される &lt;code&gt;PromiseObject&lt;/code&gt; を使用してデータバインディングを簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="bf00cf93ac9058c2b77290c956b867ba045e304f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PromiseObject&lt;/code&gt; is an object that acts like both an &lt;code&gt;EmberObject&lt;/code&gt; and a promise. When the promise is resolved, then the resulting value will be set to the &lt;code&gt;PromiseObject&lt;/code&gt;'s &lt;code&gt;content&lt;/code&gt; property. This makes it easy to create data bindings with the &lt;code&gt;PromiseObject&lt;/code&gt; that will be updated when the promise resolves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3cfbc96c8e5deb10ba90483ae8e16126a18ff07" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RecordReference&lt;/code&gt; is a low-level API that allows users and addon authors to perform meta-operations on a record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d7c0e2541a6f547442db488ca8e54fdd7b6a6b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Route&lt;/code&gt; object that fetches the model used by that template.</source>
          <target state="translated">そのテンプレートで使用されるモデルをフェッチする &lt;code&gt;Route&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="4c7a82877c9457589c254b559a3807fc6ca762ef" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RouteInfoWithAttributes&lt;/code&gt; is an object that contains metadata, including the resolved value from the routes &lt;code&gt;model&lt;/code&gt; hook. Like &lt;code&gt;RouteInfo&lt;/code&gt;, a &lt;code&gt;RouteInfoWithAttributes&lt;/code&gt; represents a specific route within a Transition. It is read-only and internally immutable. It is also not observable, because a Transition instance is never changed after creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3189b91bdb61e1aa43efbe6b908d636d8780c481" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerError&lt;/code&gt; equates to a HTTP &lt;code&gt;500 Internal Server Error&lt;/code&gt; response status. It is used by the adapter to indicate that a request has failed because of an error in the external API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4611c23711ab67a25910c645225ba21fac86e48c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TimeoutError&lt;/code&gt; is used by an adapter to signal that a request to the external API has timed out. I.e. no response was received from the external API within an allowed time period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed120dd6aba7caf374487db58fc8248bfcbd00e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UnauthorizedError&lt;/code&gt; equates to a HTTP &lt;code&gt;401 Unauthorized&lt;/code&gt; response status. It is used by an adapter to signal that a request to the external API was rejected because authorization is required and has failed or has not yet been provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9588efe0c39e2ffc672357010bf320a5487d6e55" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;contact&lt;/code&gt; route, with information on how to contact the company.</source>
          <target state="translated">会社への連絡方法に関する情報が記載された &lt;code&gt;contact&lt;/code&gt; ルート。</target>
        </trans-unit>
        <trans-unit id="281545c9885e4a727fda20cf21f27e4ba744b228" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;model&lt;/code&gt; hook can return just about any type of data, like a string, object, or array, but the most common pattern is to return a JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;Promise&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bc5cbe09603512428383da80d9a6ee76ec9be4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;multiple&lt;/code&gt;, a piece of state that represents the number to multiply the &lt;code&gt;count&lt;/code&gt; by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9050abb1ae594c1f1f0da538d55ea7a5103db87" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;rentals/index&lt;/code&gt; route that displays the rental page's general information, and also lists available rentals. The index nested route is shown by default when the user visits the &lt;code&gt;rentals&lt;/code&gt; URL.</source>
          <target state="translated">&lt;code&gt;rentals/index&lt;/code&gt; ルートが表示されていること、レンタルページの一般的な情報は、とにも利用できるレンタルを示しています。ユーザーが &lt;code&gt;rentals&lt;/code&gt; URLにアクセスすると、インデックスのネストされたルートがデフォルトで表示されます。</target>
        </trans-unit>
        <trans-unit id="266676ab249e8dd99a7c2bba6678cb01bbffbe07" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;rentals/show&lt;/code&gt; route that still displays the rental page's general information, while also showing detailed information about a selected rental. The &lt;code&gt;show&lt;/code&gt; route will get substituted with the id of the rental being shown (for example &lt;code&gt;rentals/grand-old-mansion&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;rentals/show&lt;/code&gt; も選ばレンタルに関する詳細な情報を示しながら、まだ、レンタルページの一般的な情報を表示することをルート。 &lt;code&gt;show&lt;/code&gt; ルートは、表示されているレンタルのIDで置き換えられ &lt;code&gt;rentals/grand-old-mansion&lt;/code&gt; （たとえば、rentals / grand-old-mansion）。</target>
        </trans-unit>
        <trans-unit id="383e441262c8c5fbe48093166f54c371460609af" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;rentals&lt;/code&gt; route, where we will allow users to browse rental properties.</source>
          <target state="translated">Aは &lt;code&gt;rentals&lt;/code&gt; 我々は、ユーザーが賃貸物件を閲覧することができますルートを、。</target>
        </trans-unit>
        <trans-unit id="67c9c63cc4aa645596774790c058c9a59c6f4f4a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;target&lt;/code&gt; option can be provided to the helper to change which object will receive the method call. This option must be a path to an object, accessible in the current context:</source>
          <target state="translated">メソッドコールを受け取るオブジェクトを変更する &lt;code&gt;target&lt;/code&gt; オプションをヘルパーに提供できます。このオプションは、現在のコンテキストでアクセス可能なオブジェクトへのパスでなければなりません：</target>
        </trans-unit>
        <trans-unit id="c339a2cfacfc5553acf33536d8c780714946440d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;templates/posts.hbs&lt;/code&gt; file has the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="638e1c5e3bb2ad1544bc9f1f7413ef6418c0198d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; is a chunk of HTML that can be included in another component using HTML tag syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f2e8ad0c526974fe8246bf7dd7ebe3c99dc071" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; is kind of like your own custom HTML tag. You can tell that a tag refers to an Ember component because it starts with a capital letter. Built-in HTML tags start with lowercase letters (&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;). Our component is called &lt;code&gt;&amp;lt;ReceivedMessage&amp;gt;&lt;/code&gt;, based on its name on the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130dc192c9096f24701a513b2a2c27a343bad925" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;record&lt;/strong&gt; is an instance of a model that contains data loaded from a server. Your application can also create new records and save them back to the server.</source>
          <target state="translated">&lt;strong&gt;レコードは&lt;/strong&gt;、サーバからロードされたデータが含まれているモデルのインスタンスです。アプリケーションは、新しいレコードを作成してサーバーに保存することもできます。</target>
        </trans-unit>
        <trans-unit id="876ccb109e961a4b09a85146113a95696e15e3a0" translate="yes" xml:space="preserve">
          <source>A BelongsToReference is a low level API that allows users and addon author to perform meta-operations on a belongs-to relationship.</source>
          <target state="translated">BelongsToReferenceは、ユーザとアドオン作者が所属関係のメタ操作を行うことを可能にする低レベルAPIです。</target>
        </trans-unit>
        <trans-unit id="33bcbf1fa40871cef0ad8c28e7954bc4dc4fa0a8" translate="yes" xml:space="preserve">
          <source>A Contact Route</source>
          <target state="translated">コンタクトルート</target>
        </trans-unit>
        <trans-unit id="69e5bae8c7d262dd926c678c2a23dba63883fa53" translate="yes" xml:space="preserve">
          <source>A Controller is usually paired with an individual Route of the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4e6fd668747ce7aeec451a94588f515bfd0824" translate="yes" xml:space="preserve">
          <source>A DOM Element, Document, or jQuery to use as context</source>
          <target state="translated">コンテキストとして使用する DOM Element、Document、または jQuery。</target>
        </trans-unit>
        <trans-unit id="e0196e0a77e857a693a7c87aed43dc1ad6cb6d8d" translate="yes" xml:space="preserve">
          <source>A HasManyReference is a low level API that allows users and addon author to perform meta-operations on a has-many relationship.</source>
          <target state="translated">HasManyReferenceは、ユーザーやアドオン作者がhas-many関係のメタ演算を行うことを可能にする低レベルAPIです。</target>
        </trans-unit>
        <trans-unit id="dc49bf05f59922fe942dc3948a9fcec444115457" translate="yes" xml:space="preserve">
          <source>A JSON representation of the object.</source>
          <target state="translated">オブジェクトのJSON表現。</target>
        </trans-unit>
        <trans-unit id="566d602e8aba629a425a2851f6b745033bce78a7" translate="yes" xml:space="preserve">
          <source>A JSON:API Document containing a single JSON:API Resource as its primary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fa463e99c3c03b377886df80f4e7bcb5cc5e3d" translate="yes" xml:space="preserve">
          <source>A JavaScript source file (&lt;code&gt;app/components/rental-listing.js&lt;/code&gt;) that defines how it will behave.</source>
          <target state="translated">動作方法を定義するJavaScriptソースファイル（ &lt;code&gt;app/components/rental-listing.js&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1c7bd2551c35b4d1aef2a15ba7dd5b8fa1898930" translate="yes" xml:space="preserve">
          <source>A Namespace is an object usually used to contain other objects or methods such as an application or framework. Create a namespace anytime you want to define one of these new containers.</source>
          <target state="translated">名前空間は、通常、アプリケーションやフレームワークなどの他のオブジェクトやメソッドを格納するために使用されるオブジェクトです。これらの新しいコンテナのいずれかを定義したい場合はいつでもネームスペースを作成します。</target>
        </trans-unit>
        <trans-unit id="ee5fdcd91d1afa37536b1d90788cbb67385724a5" translate="yes" xml:space="preserve">
          <source>A Note on Mobile Performance</source>
          <target state="translated">モバイルパフォーマンスの注意点</target>
        </trans-unit>
        <trans-unit id="b1c5b38b8b094aa864efd71136414bf39accba33" translate="yes" xml:space="preserve">
          <source>A PromiseManyArray is a PromiseArray that also proxies certain method calls to the underlying manyArray. Right now we proxy:</source>
          <target state="translated">PromiseManyArray は PromiseArray であり、その下にある manyArray への特定のメソッド呼び出しをプロキシします。今はプロキシしています。</target>
        </trans-unit>
        <trans-unit id="1624fc693be4f921262d9df0488c32380d02f7fa" translate="yes" xml:space="preserve">
          <source>A Rentals Route</source>
          <target state="translated">レンタルルート</target>
        </trans-unit>
        <trans-unit id="779ecff1e7b65a8089d63aed050e7eba24c33e75" translate="yes" xml:space="preserve">
          <source>A RouteInfo is an object that contains metadata about a specific route within a Transition. It is read-only and internally immutable. It is also not observable, because a Transition instance is never changed after creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4665625ba231935a86d8466b1f238bf318fbd0f0" translate="yes" xml:space="preserve">
          <source>A Snapshot containing the parent record's current data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11517f05e5bab18a8978aef16ef5e83f167c4efd" translate="yes" xml:space="preserve">
          <source>A Snapshot containing the record's current data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694ca6b0efcd76bb616b72d48b7baf100528f381" translate="yes" xml:space="preserve">
          <source>A Snapshot for the record to serialize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebbb498b1c51089825914bd7c4a31668cc640804" translate="yes" xml:space="preserve">
          <source>A Transition is a thennable (a promise-like object) that represents an attempt to transition to another route. It can be aborted, either explicitly via &lt;code&gt;abort&lt;/code&gt; or by attempting another transition while a previous one is still underway. An aborted transition can also be &lt;code&gt;retry()&lt;/code&gt;d later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719747ea16d59c2504369345f8ab69b7a5c5a51a" translate="yes" xml:space="preserve">
          <source>A Word on Promises...</source>
          <target state="translated">約束の言葉...</target>
        </trans-unit>
        <trans-unit id="fe7be7da2076011e394aa9ca0ac3951f9bcb6487" translate="yes" xml:space="preserve">
          <source>A `QueryParams` object for `{{link-to}}`</source>
          <target state="translated">`{{link-to}}` のための `QueryParams` オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="58cdbd4e4749375a003884d9f4eb272538b31a8e" translate="yes" xml:space="preserve">
          <source>A basic example:</source>
          <target state="translated">基本的な例です。</target>
        </trans-unit>
        <trans-unit id="1a1d2a91012c1180a1265fe02c186ceaa77fd396" translate="yes" xml:space="preserve">
          <source>A blog post component allows two modes&amp;mdash;view and edit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf063feb31c2f2586aed52dc94ac7da1bb1a2bf5" translate="yes" xml:space="preserve">
          <source>A boolean flag to tell if the component is in the process of destroying. This is set to true before &lt;code&gt;willDestroy&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a192e1daf2ac12c65780180efe0404fb2fe22c" translate="yes" xml:space="preserve">
          <source>A boolean to tell if the component has been fully destroyed. This is set to true after &lt;code&gt;willDestroy&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2783679ee9b5feef49fa9a1dc7330bcc282cae5f" translate="yes" xml:space="preserve">
          <source>A boolean. If falsy, the deprecation will be displayed.</source>
          <target state="translated">真偽値。虚偽の場合は、非推奨を表示します。</target>
        </trans-unit>
        <trans-unit id="15f66f52c048c665323928b0faac199d9003256f" translate="yes" xml:space="preserve">
          <source>A button component satisfies accessibility for various arguments and actions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa29d7665d4ee1f7ccfae273841d018be10e5378" translate="yes" xml:space="preserve">
          <source>A button in the template that calls the action</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4429b3200e4fae0b282b590256f1e6d3936cb9b1" translate="yes" xml:space="preserve">
          <source>A complete &lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt; test harness.</source>
          <target state="translated">完全な&lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt;テストハーネス。</target>
        </trans-unit>
        <trans-unit id="408139e87592a3dc2244b1d85e4bacd8095b3285" translate="yes" xml:space="preserve">
          <source>A component consists of two parts:</source>
          <target state="translated">コンポーネントは2つの部分から構成されています。</target>
        </trans-unit>
        <trans-unit id="5462371b0d7bf67e4e8839de22f49197e4ab6678" translate="yes" xml:space="preserve">
          <source>A component is a reusable UI element that consists of a &lt;code&gt;.hbs&lt;/code&gt; template and an optional JavaScript class that defines its behavior. For example, someone might make a &lt;code&gt;button&lt;/code&gt; in the template and handle the click behavior in the JavaScript file that shares the same name as the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d3cc41142be1cc6e10ffbccff054f3ae945eb2" translate="yes" xml:space="preserve">
          <source>A component to display a map on each rental listing.</source>
          <target state="translated">各賃貸物件に地図を表示するためのコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="7b0befc8893bf1028121a69e186f099fab314a02" translate="yes" xml:space="preserve">
          <source>A component will often not know what information a parent needs to process an action, and will just pass all the information it has. For example, our &lt;code&gt;UserProfile&lt;/code&gt; component is going to notify its parent, &lt;code&gt;SystemPreferencesEditor&lt;/code&gt;, that a user's account was deleted, and passes along with it the full user profile object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add9482b9d424e511fa42bb4e768ec8fac92907d" translate="yes" xml:space="preserve">
          <source>A component will often not know what information a parent needs to process an action, and will just pass all the information it has. For example, our &lt;code&gt;user-profile&lt;/code&gt; component is going to notify its parent, &lt;code&gt;system-preferences-editor&lt;/code&gt;, that a user's account was deleted, and passes along with it the full user profile object.</source>
          <target state="translated">多くの場合、コンポーネントは、親がアクションを処理するために必要な情報を知らず、保持しているすべての情報を渡すだけです。たとえば、 &lt;code&gt;user-profile&lt;/code&gt; コンポーネントは、その親である &lt;code&gt;system-preferences-editor&lt;/code&gt; に、ユーザーのアカウントが削除されたことを通知し、それとともに完全なユーザープロファイルオブジェクトを渡します。</target>
        </trans-unit>
        <trans-unit id="71286ede7d62eb4434708ac285eaba45858488f2" translate="yes" xml:space="preserve">
          <source>A component's &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#method__&quot;&gt;&lt;code&gt;$()&lt;/code&gt;&lt;/a&gt; method allows you to access the component's DOM element by returning a JQuery element. For example, you can set an attribute using jQuery's &lt;code&gt;attr()&lt;/code&gt; method:</source>
          <target state="translated">コンポーネントの&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#method__&quot;&gt; &lt;code&gt;$()&lt;/code&gt; &lt;/a&gt;メソッドを使用すると、JQuery要素を返すことにより、コンポーネントのDOM要素にアクセスできます。たとえば、jQueryの &lt;code&gt;attr()&lt;/code&gt; メソッドを使用して属性を設定できます。</target>
        </trans-unit>
        <trans-unit id="1e3404a6d6fa6e76a98547de4542bc8673bfc94c" translate="yes" xml:space="preserve">
          <source>A component's name is derived from its file name. We capitalize the first letter and every letter after &lt;code&gt;-&lt;/code&gt;, then remove the hyphens. This is known as pascal case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec444d9b75b946d530971861321f9f5a86edb89" translate="yes" xml:space="preserve">
          <source>A component, by itself, doesn't have direct access to DOM elements. We have to render the page, push an element back up into the component class, and only then can we safely refer to that element. This can sometimes require us to render the component's HTML twice in order for things to start working. Modifiers let us avoid this possible performance issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e359f11d406c8a4b7955e07923f8361f0de365" translate="yes" xml:space="preserve">
          <source>A computed property macro that returns true if the value of the dependent property is null, an empty string, empty array, or empty function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c763479bfbc76e7d7940ef300f676a3ddbd8a2c" translate="yes" xml:space="preserve">
          <source>A computed property that calculates the maximum value in the dependent array. This will return &lt;code&gt;-Infinity&lt;/code&gt; when the dependent array is empty.</source>
          <target state="translated">従属配列の最大値を計算する計算されたプロパティ。依存配列が空の場合、これは &lt;code&gt;-Infinity&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="afccd490e5f901b8a36308f4997ce0f6e3f7597b" translate="yes" xml:space="preserve">
          <source>A computed property that calculates the minimum value in the dependent array. This will return &lt;code&gt;Infinity&lt;/code&gt; when the dependent array is empty.</source>
          <target state="translated">従属配列の最小値を計算する計算されたプロパティ。従属配列が空の場合、これは &lt;code&gt;Infinity&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9974b4654e469b8db57a1fcbec50896d455ccac1" translate="yes" xml:space="preserve">
          <source>A computed property that converts the provided dependent property into a boolean value.</source>
          <target state="translated">与えられた従属プロパティをブール値に変換する計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="fd8c6f196c803ddc9c26e77339d13d81362adfa6" translate="yes" xml:space="preserve">
          <source>A computed property that performs a logical &lt;code&gt;and&lt;/code&gt; on the original values for the provided dependent properties.</source>
          <target state="translated">論理行う計算性 &lt;code&gt;and&lt;/code&gt; 提供依存特性のために元の値にします。</target>
        </trans-unit>
        <trans-unit id="945b3b8ed6c6878bf7cc23d303cb20832f65993c" translate="yes" xml:space="preserve">
          <source>A computed property that returns the array of values for the provided dependent properties.</source>
          <target state="translated">指定された従属プロパティの値の配列を返す計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="d0b6149975025bb8da048400ba0227d90a7df300" translate="yes" xml:space="preserve">
          <source>A computed property that returns the inverse boolean value of the original value for the dependent property.</source>
          <target state="translated">計算されたプロパティで、従属プロパティの元の値の逆ブーリアン値を返します。</target>
        </trans-unit>
        <trans-unit id="7a4c3da6b9a0ff1602bbda04536c0e6dce3f9392" translate="yes" xml:space="preserve">
          <source>A computed property that returns the sum of the values in the dependent array.</source>
          <target state="translated">従属配列の値の合計を返す計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="0259bcabf1fff133ec03f302136afb061587a1e8" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the provided dependent property is equal to the given value.</source>
          <target state="translated">与えられた従属プロパティが、与えられた値と等しい場合に真を返す計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="43791b5f383cb17dd17a48ea10639cb5fbcf38fa" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the provided dependent property is greater than or equal to the provided value.</source>
          <target state="translated">指定された従属プロパティが指定された値以上の場合に真を返す計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="44459f27f904760e8a8a159ca0cff425ac024805" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the provided dependent property is greater than the provided value.</source>
          <target state="translated">与えられた従属プロパティが、与えられた値よりも大きい場合に真を返す計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="833a09f6f4b8923a267d472a1a55b997f80954c1" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the provided dependent property is less than or equal to the provided value.</source>
          <target state="translated">与えられた従属プロパティが、与えられた値以下の場合に真を返す計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="5dbdded579e19770a07ba120d2a79f594c5bbcb1" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the provided dependent property is less than the provided value.</source>
          <target state="translated">与えられた従属プロパティが、与えられた値よりも小さい場合に真を返す計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="2fd2d52f530113373926a1bd4c1cfc461521a921" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the value of the dependent property is NOT null, an empty string, empty array, or empty function.</source>
          <target state="translated">計算されたプロパティで、従属プロパティの値がnull、空の文字列、空の配列、または空の関数ではない場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="1809faaeee90bdd62f88903099dc08048f92510f" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the value of the dependent property is null or undefined. This avoids errors from JSLint complaining about use of ==, which can be technically confusing.</source>
          <target state="translated">従属プロパティの値がnullまたは未定義の場合にtrueを返す計算されたプロパティ。これにより、JSLintが==の使用について文句を言うエラーを回避できます。</target>
        </trans-unit>
        <trans-unit id="06706f50e47c13c840dc77e9fe586ddf67f4d763" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the value of the dependent property is null, an empty string, empty array, or empty function.</source>
          <target state="translated">従属プロパティの値がnull、空の文字列、空の配列、または空の関数の場合に真を返す計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="bfba4061445759538ca93b92b23b86ab9bc4e76a" translate="yes" xml:space="preserve">
          <source>A computed property transforms an object literal with object's accessor function(s) into a property.</source>
          <target state="translated">計算されたプロパティは、オブジェクトのアクセサ関数を持つオブジェクトリテラルをプロパティに変換します。</target>
        </trans-unit>
        <trans-unit id="fd867b71051d6985840f7332a75c1cfaabd25b0a" translate="yes" xml:space="preserve">
          <source>A computed property which matches the original value for the dependent property against a given RegExp, returning &lt;code&gt;true&lt;/code&gt; if the value matches the RegExp and &lt;code&gt;false&lt;/code&gt; if it does not.</source>
          <target state="translated">指定されたRegExpに対する依存プロパティの元の値と一致する計算されたプロパティ。値がRegExpと一致する場合は &lt;code&gt;true&lt;/code&gt; を返し、一致しない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="34473f32afac3e5624fa4d2072d2b42e8c3a6d02" translate="yes" xml:space="preserve">
          <source>A computed property which performs a logical &lt;code&gt;or&lt;/code&gt; on the original values for the provided dependent properties.</source>
          <target state="translated">指定された依存プロパティの論理値 &lt;code&gt;or&lt;/code&gt; 元の値を実行する計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="b1f7277073dcf905d770a71a52bba7d2664f93f5" translate="yes" xml:space="preserve">
          <source>A computed property which returns a new array with all the elements two or more dependent arrays have in common.</source>
          <target state="translated">2つ以上の従属配列が共通して持つすべての要素を持つ新しい配列を返す計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="04f70fc8fd22a538518b37ff920f6cc48d385c51" translate="yes" xml:space="preserve">
          <source>A computed property which returns a new array with all the properties from the first dependent array sorted based on a property or sort function.</source>
          <target state="translated">計算されたプロパティで、最初の従属配列のすべてのプロパティを、プロパティまたはソート関数に基づいてソートした新しい配列を返します。</target>
        </trans-unit>
        <trans-unit id="b945dc0224d1ec0a214b00edce76b1817d383a7d" translate="yes" xml:space="preserve">
          <source>A computed property which returns a new array with all the properties from the first dependent array sorted based on a property or sort function. The sort macro can be used in two different ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d514e6791f78a7ee6387baf89be943feeb58920b" translate="yes" xml:space="preserve">
          <source>A computed property which returns a new array with all the properties from the first dependent array that are not in the second dependent array.</source>
          <target state="translated">計算されたプロパティで、最初の従属配列にあるすべてのプロパティのうち、2番目の従属配列にないものを含む新しい配列を返します。</target>
        </trans-unit>
        <trans-unit id="9ae49a81f1b7b136ef1c3f3879fc002266d05133" translate="yes" xml:space="preserve">
          <source>A computed property which returns a new array with all the unique elements from an array, with uniqueness determined by specific key.</source>
          <target state="translated">特定のキーによって一意性が決定され、配列からすべての一意な要素を持つ新しい配列を返す計算されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="a491d7db177839d7b7b347173e49e99aae9fafae" translate="yes" xml:space="preserve">
          <source>A computed property which returns a new array with all the unique elements from one or more dependent arrays.</source>
          <target state="translated">計算されたプロパティで,1つ以上の従属配列の中からすべての一意な要素を持つ新しい配列を返します.</target>
        </trans-unit>
        <trans-unit id="e03280469acba4765062b9db611d7f54939166e1" translate="yes" xml:space="preserve">
          <source>A conventional project layout, making existing Ember applications easy to approach.</source>
          <target state="translated">従来型のプロジェクトレイアウトで、既存のEmberアプリケーションへのアプローチを容易にします。</target>
        </trans-unit>
        <trans-unit id="3b14a4be92d27b0b93957122d2e638b03b636e3b" translate="yes" xml:space="preserve">
          <source>A corollary is that these tests differ in performance. The more parts used (the closer to the real app), the slower the tests. As your app gets bigger, you will want to maintain a healthy mix of unit, rendering, and application tests so that you can enjoy both broad test coverage and short feedback loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131025c2bde366d3f442178cd7e3ea45867ac44b" translate="yes" xml:space="preserve">
          <source>A custom serializer will also need to define a &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Serializer.html#method_normalize&quot;&gt;normalize&lt;/a&gt; method. This method is called by &lt;code&gt;store.normalize(type, payload)&lt;/code&gt; and is often used for normalizing requests made outside of Ember Data because they do not fall into the normal CRUD flow that the adapter provides.</source>
          <target state="translated">カスタムシリアライザはまた、&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Serializer.html#method_normalize&quot;&gt;正規化&lt;/a&gt;メソッドを定義する必要があります。このメソッドは、 &lt;code&gt;store.normalize(type, payload)&lt;/code&gt; によって呼び出され、アダプターが提供する通常のCRUDフローに該当しないため、Ember Dataの外部で行われたリクエストの正規化によく使用されます。</target>
        </trans-unit>
        <trans-unit id="7385fb2685774f2f425893eaf1d1c9914af271f4" translate="yes" xml:space="preserve">
          <source>A custom serializer will also need to define a &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Serializer/methods#normalize&quot;&gt;normalize&lt;/a&gt; method. This method is called by &lt;code&gt;store.normalize(type, payload)&lt;/code&gt; and is often used for normalizing requests made outside of Ember Data because they do not fall into the normal CRUD flow that the adapter provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965f0eae3b6dbd1496b2dd524354b0b41151afae" translate="yes" xml:space="preserve">
          <source>A debug message to display.</source>
          <target state="translated">表示するデバッグメッセージ。</target>
        </trans-unit>
        <trans-unit id="39f7b0f3c0a437ac794c87fc0c76129e28e5f4d6" translate="yes" xml:space="preserve">
          <source>A description of the assertion. This will become the text of the Error thrown if the assertion fails.</source>
          <target state="translated">アサーションの説明。これは、アサーションが失敗した場合にスローされるエラーのテキストになります。</target>
        </trans-unit>
        <trans-unit id="0f6dbf6476ba31036654b5f4ca962c84db32b964" translate="yes" xml:space="preserve">
          <source>A description of the deprecation.</source>
          <target state="translated">非推奨の説明。</target>
        </trans-unit>
        <trans-unit id="1837e75640fb82328a65573e9d0ce100611583e4" translate="yes" xml:space="preserve">
          <source>A development server.</source>
          <target state="translated">開発サーバーです。</target>
        </trans-unit>
        <trans-unit id="5a8e30bda1a4f84944f370b4cb01736e9bdb1809" translate="yes" xml:space="preserve">
          <source>A dynamic segment is a portion of a URL that starts with a &lt;code&gt;:&lt;/code&gt; and is followed by an identifier.</source>
          <target state="translated">動的セグメントは、 &lt;code&gt;:&lt;/code&gt; で始まり、識別子が続くURLの一部です。</target>
        </trans-unit>
        <trans-unit id="69b27e633e9aff3b70d00dcb2578883f3a25b095" translate="yes" xml:space="preserve">
          <source>A factory can represent any part of your application, like a &lt;em&gt;route&lt;/em&gt;, &lt;em&gt;template&lt;/em&gt;, or custom class. Every factory is registered with a particular key. For example, the index template is registered with the key &lt;code&gt;template:index&lt;/code&gt;, and the application route is registered with the key &lt;code&gt;route:application&lt;/code&gt;.</source>
          <target state="translated">ファクトリは、&lt;em&gt;ルート&lt;/em&gt;、&lt;em&gt;テンプレート&lt;/em&gt;、カスタムクラスなど、アプリケーションの任意の部分を表すことができます。すべての工場は特定のキーで登録されています。たとえば、インデックステンプレートはキー &lt;code&gt;template:index&lt;/code&gt; で登録され、アプリケーションルートはキー &lt;code&gt;route:application&lt;/code&gt; で登録されます。</target>
        </trans-unit>
        <trans-unit id="5a7864153dc09f9dae9356338ebaf73309bce87f" translate="yes" xml:space="preserve">
          <source>A factory function which receives an optional owner, and returns a helper manager</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b713eddbb7bc164ea440e78db3a8399814ac7e" translate="yes" xml:space="preserve">
          <source>A factory function, which receives the &lt;code&gt;owner&lt;/code&gt; and returns an instance of a helper manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777a6c4f022e5b47c8f56cfb49c2647d252ae153" translate="yes" xml:space="preserve">
          <source>A feature can have one of a three flags:</source>
          <target state="translated">機能は3つのフラグのうちの1つを持つことができます。</target>
        </trans-unit>
        <trans-unit id="4395ec9193a1fb8614031a07974b0dbad33102b4" translate="yes" xml:space="preserve">
          <source>A few of things to note in this simple test:</source>
          <target state="translated">この簡単なテストで注意すべき点をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="e5e53ecd6c75835250a1d932992921cd834b98ff" translate="yes" xml:space="preserve">
          <source>A filtered array.</source>
          <target state="translated">フィルタリングされた配列。</target>
        </trans-unit>
        <trans-unit id="c09238b0f4cf63a731d526d78fb6ced46c4f1d50" translate="yes" xml:space="preserve">
          <source>A flag whether a function should only be called once</source>
          <target state="translated">関数を一度だけ呼び出すかどうかのフラグ</target>
        </trans-unit>
        <trans-unit id="ac5049c57055d0ded9b551e91917eb661bb1d992" translate="yes" xml:space="preserve">
          <source>A fullname attribute is computed which combines the &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; attributes.</source>
          <target state="translated">fullName属性は、 &lt;code&gt;firstName&lt;/code&gt; 属性と &lt;code&gt;lastName&lt;/code&gt; 属性を組み合わせて計算されます。</target>
        </trans-unit>
        <trans-unit id="195ea75b25518974cc8b5249e7d76b0d2cc15566" translate="yes" xml:space="preserve">
          <source>A fully-Octane app has the following configuration in &lt;code&gt;config/optional-features.json&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39970261feb2edc9d7f8f08ee054bbf461369df" translate="yes" xml:space="preserve">
          <source>A function may be assigned to &lt;code&gt;Ember.onerror&lt;/code&gt; to be called when Ember internals encounter an error. This is useful for specialized error handling and reporting code.</source>
          <target state="translated">Ember内部でエラーが発生したときに呼び出される関数を &lt;code&gt;Ember.onerror&lt;/code&gt; に割り当てることができます。これは、特殊なエラー処理とレポートコードに役立ちます。</target>
        </trans-unit>
        <trans-unit id="11ca89654a12a432d4643c385fb7f15885d79579" translate="yes" xml:space="preserve">
          <source>A function or the name of a function to be called on `target`</source>
          <target state="translated">target` で呼び出される関数または関数名</target>
        </trans-unit>
        <trans-unit id="8d3d5bdef706170c1b43cf8ceb032823792398a5" translate="yes" xml:space="preserve">
          <source>A function to handle deprecation calls.</source>
          <target state="translated">非推奨の呼び出しを処理するための関数です。</target>
        </trans-unit>
        <trans-unit id="fc0569c63add1c0c2e9141312a0d1a21e3605cd4" translate="yes" xml:space="preserve">
          <source>A function to handle warnings.</source>
          <target state="translated">警告を処理するための関数です。</target>
        </trans-unit>
        <trans-unit id="772e9928418182b0dcd98ed018442a809993c477" translate="yes" xml:space="preserve">
          <source>A good example is preventing navigation when a form is half-filled out:</source>
          <target state="translated">良い例としては、フォームが半分埋まっているときのナビゲーションを防止することが挙げられます。</target>
        </trans-unit>
        <trans-unit id="1c5d4033dfd88de07d9946b713597e389f38850f" translate="yes" xml:space="preserve">
          <source>A good example is sending some analytics when the route has transitioned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecf0ed232f0cc7c688861b1533c21916b08befb" translate="yes" xml:space="preserve">
          <source>A group is an array of snapshots meant to be fetched together by a single &lt;code&gt;findMany&lt;/code&gt; request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f874a612d4e0dc43e458950caf8d91e56e8ac2" translate="yes" xml:space="preserve">
          <source>A handy shortcut for this is to use a &quot;spread operator&quot;, like &lt;code&gt;...arguments&lt;/code&gt;:</source>
          <target state="translated">このための便利なショートカットは、 &lt;code&gt;...arguments&lt;/code&gt; ような「スプレッドオペレーター」を使用することです。</target>
        </trans-unit>
        <trans-unit id="2bc58c2ebbcac31ed3b573d8eb9a7356a8b07577" translate="yes" xml:space="preserve">
          <source>A hash containing lists of the model's relationships, grouped by the relationship kind. For example, given a model with this definition:</source>
          <target state="translated">リレーションシップの種類によってグループ化されたモデルのリレーションシップのリストを含むハッシュ。例えば、このような定義のモデルがあるとします。</target>
        </trans-unit>
        <trans-unit id="ec8ad7e0c442a611775e6bdc63a83d6c045465c6" translate="yes" xml:space="preserve">
          <source>A helper definition, which is the object or function to associate the factory function with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="063632d2d12e1801d8c7de89a45d4c80eb2fa5e3" translate="yes" xml:space="preserve">
          <source>A helper, which uses &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat&quot;&gt;&lt;code&gt;Intl.NumberFormat&lt;/code&gt;&lt;/a&gt;, formats a price depending on the currency and number of digits to show</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002cbcf56bee0a507c862ecd66564cde14d0ae7d" translate="yes" xml:space="preserve">
          <source>A hook you can implement to convert the URL into the model for this route.</source>
          <target state="translated">URL をこのルートのモデルに変換するために実装できるフックです。</target>
        </trans-unit>
        <trans-unit id="e523ddb9cb0077f0e7e9efea1c6ca53b0e4f74df" translate="yes" xml:space="preserve">
          <source>A hook you can implement to convert the route's model into parameters for the URL.</source>
          <target state="translated">ルートのモデルを URL のパラメータに変換するために実装できるフック。</target>
        </trans-unit>
        <trans-unit id="c79ab8868a30ae091433886b3b9b677dbdb3c517" translate="yes" xml:space="preserve">
          <source>A hook you can implement to optionally redirect to another route.</source>
          <target state="translated">オプションで別のルートにリダイレクトするために実装できるフック。</target>
        </trans-unit>
        <trans-unit id="c821816d4745b2e732eb4a319568f5a0e3771e9e" translate="yes" xml:space="preserve">
          <source>A hook you can use to render the template for the current route.</source>
          <target state="translated">現在のルートのテンプレートをレンダリングするために使用できるフックです。</target>
        </trans-unit>
        <trans-unit id="b7d35522f785d5d2f17eb10043e9b0e22702615b" translate="yes" xml:space="preserve">
          <source>A hook you can use to reset controller values either when the model changes or the route is exiting.</source>
          <target state="translated">モデルが変更されたとき、またはルートが終了したときにコントローラの値をリセットするために使用できるフック。</target>
        </trans-unit>
        <trans-unit id="09ba4354b8baac4169d50a77d1cac438e656e83b" translate="yes" xml:space="preserve">
          <source>A hook you can use to setup the controller for the current route.</source>
          <target state="translated">現在のルートのコントローラを設定するために使用できるフックです。</target>
        </trans-unit>
        <trans-unit id="ee079a76318bbe3fd0ae4177e7a0fc30647a2f50" translate="yes" xml:space="preserve">
          <source>A link will be active if &lt;code&gt;current-when&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; or the current route is the route this link would transition to.</source>
          <target state="translated">&lt;code&gt;current-when&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、または現在のルートがこのリンクの遷移先のルートである場合、リンクはアクティブになります。</target>
        </trans-unit>
        <trans-unit id="3863557073365f326c78ed7bed868b03ceb14513" translate="yes" xml:space="preserve">
          <source>A list of boot-time configuration options for customizing the behavior of an &lt;code&gt;ApplicationInstance&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e649bc595abbffa19a4461f93d3e6cdb54a49bc" translate="yes" xml:space="preserve">
          <source>A list of boot-time configuration options for customizing the behavior of an &lt;code&gt;Ember.ApplicationInstance&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ember.ApplicationInstance&lt;/code&gt; の動作をカスタマイズするための起動時設定オプションのリスト。</target>
        </trans-unit>
        <trans-unit id="b430585ba8f0f6e9d04f0dc1006753364e999c54" translate="yes" xml:space="preserve">
          <source>A list of properties of the view to apply as attributes. If the property is a string value, the value of that string will be applied as the value for an attribute of the property's name.</source>
          <target state="translated">アトリビュートとして適用するビューのプロパティのリスト。プロパティが文字列の値の場合、その文字列の値がプロパティ名の属性の値として適用されます。</target>
        </trans-unit>
        <trans-unit id="e52f350b6064cc52433762ffe29ca02248ba6cb9" translate="yes" xml:space="preserve">
          <source>A list of properties of the view to apply as class names. If the property is a string value, the value of that string will be applied as a class name.</source>
          <target state="translated">クラス名として適用するビューのプロパティのリストです。プロパティが文字列の値の場合、その文字列の値がクラス名として適用されます。</target>
        </trans-unit>
        <trans-unit id="735c8c616470156006424a3f6186395cc8775efd" translate="yes" xml:space="preserve">
          <source>A low level mixin making ObjectProxy promise-aware.</source>
          <target state="translated">ObjectProxy をプロミス対応にする低レベルのミックスインです。</target>
        </trans-unit>
        <trans-unit id="1067f525a37aaeec1e9620550374097824a883ec" translate="yes" xml:space="preserve">
          <source>A map whose keys are the attributes of the model (properties described by DS.attr) and whose values are the meta object for the property.</source>
          <target state="translated">キーがモデルの属性(DS.attrで記述されたプロパティ)であり、値がそのプロパティのメタオブジェクトであるマップ。</target>
        </trans-unit>
        <trans-unit id="d84b89baf6ba3181355eed803540fe64dfc2f91f" translate="yes" xml:space="preserve">
          <source>A map whose keys are the attributes of the model (properties described by DS.attr) and whose values are type of transformation applied to each attribute. This map does not include any attributes that do not have an transformation type.</source>
          <target state="translated">キーがモデルの属性(DS.attrで記述されたプロパティ)であり、値が各属性に適用される変換タイプであるマップ。このマップには、変換タイプを持たない属性は含まれません。</target>
        </trans-unit>
        <trans-unit id="e9e395907f08ec2a339ee6073d6cb8677ded4443" translate="yes" xml:space="preserve">
          <source>A map whose keys are the attributes of the model (properties described by attr) and whose values are the meta object for the property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e683ca43722cd5bf157a9d2e1bccc16708fe5acb" translate="yes" xml:space="preserve">
          <source>A map whose keys are the attributes of the model (properties described by attr) and whose values are type of transformation applied to each attribute. This map does not include any attributes that do not have an transformation type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8aa238af5d9e1a69672acd9e86581953ac5d26" translate="yes" xml:space="preserve">
          <source>A map whose keys are the fields of the model and whose values are strings describing the kind of the field. A model's fields are the union of all of its attributes and relationships.</source>
          <target state="translated">キーがモデルのフィールドで、値がフィールドの種類を表す文字列であるマップ。モデルのフィールドは、その属性とリレーションシップのすべての和です。</target>
        </trans-unit>
        <trans-unit id="b84a1b3938a51ee6595167fbc1b64d1c26d0eb97" translate="yes" xml:space="preserve">
          <source>A map whose keys are the relationships of a model and whose values are relationship descriptors.</source>
          <target state="translated">キーがモデルのリレーションシップで、値がリレーションシップ記述子であるマップ。</target>
        </trans-unit>
        <trans-unit id="5c749d8d38dbb6efe5efc0f01db27302cb7dec7f" translate="yes" xml:space="preserve">
          <source>A model also describes its relationships with other objects. For example, an &lt;code&gt;order&lt;/code&gt; may have many &lt;code&gt;line-items&lt;/code&gt;, and a &lt;code&gt;line-item&lt;/code&gt; may belong to a particular &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">モデルは他のオブジェクトとの関係も記述します。例えば、 &lt;code&gt;order&lt;/code&gt; 多く有していてもよい &lt;code&gt;line-items&lt;/code&gt; 、そして &lt;code&gt;line-item&lt;/code&gt; 特定のに属することができる &lt;code&gt;order&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f4f874113ec32c7d5b7fafdaa6e0741a1c0923cd" translate="yes" xml:space="preserve">
          <source>A model context does not include a primitive string or number, which does cause the model hook to be called.</source>
          <target state="translated">モデルコンテキストにはプリミティブな文字列や数値が含まれていないため、モデルフックが呼び出される原因となります。</target>
        </trans-unit>
        <trans-unit id="37871220571a57fe035f4bab6084f491f85da8be" translate="yes" xml:space="preserve">
          <source>A model is a class that defines the properties and behavior of the data that you present to the user. Anything that the user expects to see if they leave your app and come back later (or if they refresh the page) should be represented by a model.</source>
          <target state="translated">モデルは、ユーザーに提示するデータのプロパティと動作を定義するクラスです。ユーザーがアプリを離れて後で戻ってきた場合(またはページを更新した場合)に表示されることを期待するものはすべて、モデルで表現する必要があります。</target>
        </trans-unit>
        <trans-unit id="c1a07c2973ef7c81f865a5219b3d0bdb813af4e8" translate="yes" xml:space="preserve">
          <source>A model typically persists information to a web server, although models can be configured to save to anywhere else, such as the browser's Local Storage.</source>
          <target state="translated">モデルは通常、情報をWebサーバーに保存しますが、モデルはブラウザのローカルストレージなど、他の場所に保存するように設定することができます。</target>
        </trans-unit>
        <trans-unit id="d93e695b3fd763d9a4bfbaf97085b3d02c97d87c" translate="yes" xml:space="preserve">
          <source>A navigation component recursively renders child nav items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7949529a103a62a4eabcba8f895a43f2a8303271" translate="yes" xml:space="preserve">
          <source>A nested route name includes the names of its ancestors. If you want to transition to a route (either via &lt;code&gt;transitionTo&lt;/code&gt; or &lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt;), make sure to use the full route name (&lt;code&gt;posts.new&lt;/code&gt;, not &lt;code&gt;new&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35406968e2a350aa9010aed9c3e6268ad14047e" translate="yes" xml:space="preserve">
          <source>A nested route name includes the names of its ancestors. If you want to transition to a route (either via &lt;code&gt;transitionTo&lt;/code&gt; or &lt;code&gt;{{#link-to}}&lt;/code&gt;), make sure to use the full route name (&lt;code&gt;posts.new&lt;/code&gt;, not &lt;code&gt;new&lt;/code&gt;).</source>
          <target state="translated">ネストされたルート名には、その祖先の名前が含まれます。あなたは（いずれかを経由するルートに移行したい場合は &lt;code&gt;transitionTo&lt;/code&gt; または &lt;code&gt;{{#link-to}}&lt;/code&gt; ）、フルルート名（使用していることを確認し &lt;code&gt;posts.new&lt;/code&gt; 、ない &lt;code&gt;new&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="616c4cf0d50a10888409b3e924452935f2743bdd" translate="yes" xml:space="preserve">
          <source>A nested router like this:</source>
          <target state="translated">こんな感じの入れ子になったルーター。</target>
        </trans-unit>
        <trans-unit id="690c6d22d7fe0f6b900233bca2ce30f9306667f4" translate="yes" xml:space="preserve">
          <source>A new project will be created inside your current directory. You can now go to your &lt;code&gt;super-rentals&lt;/code&gt; project directory and start working on it.</source>
          <target state="translated">現在のディレクトリ内に新しいプロジェクトが作成されます。これで、 &lt;code&gt;super-rentals&lt;/code&gt; プロジェクトディレクトリに移動して作業を開始できます。</target>
        </trans-unit>
        <trans-unit id="f1b98522c77a33eec52a4f899428271445b931ef" translate="yes" xml:space="preserve">
          <source>A newly-flagged feature is only available in canary builds and can be enabled at runtime through your project's configuration file.</source>
          <target state="translated">新たにフラグが設定された機能は、canary ビルドでのみ利用可能で、実行時にプロジェクトの設定ファイルを使って有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="69067fafebff49c361b07bcca3e6380a630f46ce" translate="yes" xml:space="preserve">
          <source>A one-way binding only propagates changes in one direction, using &lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html#method_oneWay&quot;&gt;&lt;code&gt;computed.oneWay()&lt;/code&gt;&lt;/a&gt;. Often, one-way bindings are a performance optimization and you can safely use a two-way binding (which are de facto one-way bindings if you only ever change one side). Sometimes one-way bindings are useful to achieve specific behaviour such as a default that is the same as another property but can be overridden (e.g. a shipping address that starts the same as a billing address but can later be changed)</source>
          <target state="translated">一方向バインディングは、&lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html#method_oneWay&quot;&gt; &lt;code&gt;computed.oneWay()&lt;/code&gt; &lt;/a&gt;を使用して、変更を一方向にのみ伝達します。多くの場合、一方向バインディングはパフォーマンスの最適化であり、双方向バインディングを安全に使用できます（片側のみを変更する場合、これは事実上一方向バインディングです）。一方向バインディングは、別のプロパティと同じであるが上書きできるデフォルトなどの特定の動作を実現するのに役立つ場合があります（たとえば、請求先住所と同じで始まるが後で変更できる配送先住所など）。</target>
        </trans-unit>
        <trans-unit id="3b0f3e16a598d49e410a51000efb66784c1b64b7" translate="yes" xml:space="preserve">
          <source>A payload with an attr configured for embedded records needs to be extracted:</source>
          <target state="translated">埋め込みレコードに設定されたattrを持つペイロードを抽出する必要があります。</target>
        </trans-unit>
        <trans-unit id="754b7ce544d748dc371ba0357de8219729b68a15" translate="yes" xml:space="preserve">
          <source>A payload with an attribute configured for embedded records can serialize the records together under the root attribute's payload:</source>
          <target state="translated">埋め込みレコード用に設定された属性を持つペイロードは、ルート属性のペイロードの下でレコードをまとめてシリアライズすることができます。</target>
        </trans-unit>
        <trans-unit id="560e271658f0e996c59f5c2cfa87ca60059c5e39" translate="yes" xml:space="preserve">
          <source>A primary language should be defined on the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element's &lt;code&gt;lang&lt;/code&gt; attribute. For new apps, you can use the &lt;code&gt;--lang&lt;/code&gt; option on the &lt;code&gt;ember new&lt;/code&gt; command to set the language for a new application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0ae96f3c9091427eb9feb731cecfd8d355b870" translate="yes" xml:space="preserve">
          <source>A promise can be in one of three states: pending, fulfilled, or rejected.</source>
          <target state="translated">約束は、保留、成就、拒否の3つの状態のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="24e22e61d207f240f5044b1681adf8be22829d85" translate="yes" xml:space="preserve">
          <source>A promise that resolves with the new value in this belongs-to relationship.</source>
          <target state="translated">この属している関係の中で、新しい価値で解決する約束。</target>
        </trans-unit>
        <trans-unit id="03249110696adf7d9fce18f021bbef08ff6080e2" translate="yes" xml:space="preserve">
          <source>A promise that will never resolve</source>
          <target state="translated">絶対に解決しない約束</target>
        </trans-unit>
        <trans-unit id="b7d10474223d0a597541e2cfcfdd2a9576dbaf03" translate="yes" xml:space="preserve">
          <source>A property descriptor containing the getter and setter (when used in classic classes)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4be102aa0858e349eb66775a64bb7344eb05fe" translate="yes" xml:space="preserve">
          <source>A record array is an array that contains records of a certain modelName. The record array materializes records as needed when they are retrieved for the first time. You should not create record arrays yourself. Instead, an instance of &lt;code&gt;DS.RecordArray&lt;/code&gt; or its subclasses will be returned by your application's store in response to queries.</source>
          <target state="translated">レコード配列は、特定のmodelNameのレコードを含む配列です。レコード配列は、初めて取得されるときに、必要に応じてレコードを具体化します。自分でレコード配列を作成しないでください。代わりに、 &lt;code&gt;DS.RecordArray&lt;/code&gt; またはそのサブクラスのインスタンスが、クエリへの応答としてアプリケーションのストアによって返されます。</target>
        </trans-unit>
        <trans-unit id="9a689b2a254c28f3224517a5be192a1ac20c3801" translate="yes" xml:space="preserve">
          <source>A record array is an array that contains records of a certain modelName. The record array materializes records as needed when they are retrieved for the first time. You should not create record arrays yourself. Instead, an instance of &lt;code&gt;RecordArray&lt;/code&gt; or its subclasses will be returned by your application's store in response to queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6710d1a1b95fb46edef7d88de3b44dc9a78763" translate="yes" xml:space="preserve">
          <source>A record is uniquely identified by its model &lt;strong&gt;type&lt;/strong&gt; and &lt;strong&gt;ID&lt;/strong&gt;.</source>
          <target state="translated">レコードは、モデル&lt;strong&gt;タイプ&lt;/strong&gt;と&lt;strong&gt;ID&lt;/strong&gt;によって一意に識別され&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="21b8acb556631becaba134bf80dba6137f8e76c1" translate="yes" xml:space="preserve">
          <source>A record will be in the &lt;code&gt;valid&lt;/code&gt; state when the adapter did not report any server-side validation failures.</source>
          <target state="translated">アダプターがサーバー側の検証エラーを報告しなかった場合、レコードは &lt;code&gt;valid&lt;/code&gt; 状態になります。</target>
        </trans-unit>
        <trans-unit id="120893b9cdbc49b546ba87c5a1ec41b17ddf8aa8" translate="yes" xml:space="preserve">
          <source>A reference to the child route's &lt;code&gt;RouteInfo&lt;/code&gt;. This can be used to traverse downward to the leafmost &lt;code&gt;RouteInfo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f55ab745279069aaf93aa450b314a6df3a0414" translate="yes" xml:space="preserve">
          <source>A reference to the child route's RouteInfo. This can be used to traverse downward to the leafmost &lt;code&gt;RouteInfo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7efe61c1ca0992c278d663d9f67e16b8b1e0ef9" translate="yes" xml:space="preserve">
          <source>A reference to the parent route's &lt;code&gt;RouteInfo&lt;/code&gt;. This can be used to traverse upward to the topmost &lt;code&gt;RouteInfo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b646d7aec78613fee236e641889066c0c56909b" translate="yes" xml:space="preserve">
          <source>A reference to the parent route's RouteInfo. This can be used to traverse upward to the topmost &lt;code&gt;RouteInfo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0df2c4aaeb3477c2c604989aaf5ff0dc482665" translate="yes" xml:space="preserve">
          <source>A rejected array.</source>
          <target state="translated">拒否された配列です。</target>
        </trans-unit>
        <trans-unit id="3e51bd2682d6b7c660dde73493a3071b6d63cb7e" translate="yes" xml:space="preserve">
          <source>A resource's &lt;code&gt;attrs&lt;/code&gt; option may be set to use &lt;code&gt;ids&lt;/code&gt;, &lt;code&gt;records&lt;/code&gt; or false for the &lt;code&gt;serialize&lt;/code&gt; and &lt;code&gt;deserialize&lt;/code&gt; settings.</source>
          <target state="translated">リソースの &lt;code&gt;attrs&lt;/code&gt; オプションは、 &lt;code&gt;serialize&lt;/code&gt; および &lt;code&gt;deserialize&lt;/code&gt; 設定に &lt;code&gt;ids&lt;/code&gt; 、 &lt;code&gt;records&lt;/code&gt; 、またはfalse を使用するように設定できます。</target>
        </trans-unit>
        <trans-unit id="68e5af032f9f3bca13e5f3c4b42f77a9b868af85" translate="yes" xml:space="preserve">
          <source>A response that contains multiple records may have an array in its &lt;code&gt;data&lt;/code&gt; property.</source>
          <target state="translated">複数のレコードを含む応答では、 &lt;code&gt;data&lt;/code&gt; プロパティに配列が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="221dbbb4bdc294822dea4e47a95dceb0c0f3504a" translate="yes" xml:space="preserve">
          <source>A route handler file, which sets up what should happen when that route is loaded &lt;em&gt;&lt;code&gt;(app/routes/about.js)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">ルートが読み込まれたときに何が起こるかを設定するルートハンドラーファイル&lt;em&gt; &lt;code&gt;(app/routes/about.js)&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bd76f689c1b1cf2edecf43c5ef43576011182f5f" translate="yes" xml:space="preserve">
          <source>A route template, which is where we display the actual content for the page &lt;em&gt;&lt;code&gt;(app/templates/about.hbs)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">ページの実際のコンテンツを表示するルートテンプレート&lt;em&gt; &lt;code&gt;(app/templates/about.hbs)&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="72aec06e2cbfcfd34da65ec3ca635d41cbd75f07" translate="yes" xml:space="preserve">
          <source>A route's JavaScript file is one of the best places in an app to make requests to an API. In this section of the guides, you'll learn how to use the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; method to fetch data by making a HTTP request, and render it in a route's &lt;code&gt;hbs&lt;/code&gt; template, or pass it down to a component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80c0f471744d70fd7d49ec2b0c3b6ae236eac6b" translate="yes" xml:space="preserve">
          <source>A sample component template could look like this:</source>
          <target state="translated">コンポーネントテンプレートのサンプルは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="313eb4ae7397faa5f4909972c2ad73f65f3cff0d" translate="yes" xml:space="preserve">
          <source>A serializer has two main roles in Ember Data. First, it is responsible for taking a response from an adapter and serializing it into the normalized JSON format that Ember Data understands. Secondly, it transforms snapshots of records into a payload the adapter will send to the server when creating, updating, or deleting a record.</source>
          <target state="translated">シリアライザは、Ember Data の中で 2 つの主な役割を持っています。第一に、アダプタから応答を受け取り、それをEmber Dataが理解できる正規化されたJSON形式にシリアライズする責任があります。第二に、レコードのスナップショットを、レコードを作成、更新、削除するときにアダプタがサーバに送信するペイロードに変換します。</target>
        </trans-unit>
        <trans-unit id="37af9017b42e56fbbcb87cffc4954a5d243ed7da" translate="yes" xml:space="preserve">
          <source>A serializer in Ember Data is responsible for normalizing a payload from an adapter into the format that Ember Data understands. It is also responsible for transforming a snapshot of a record into the payload that an adapter will send to the backend.</source>
          <target state="translated">Ember Data のシリアライザは、アダプタからのペイロードを、Ember Data が理解できる形式に正規化する役割を果たします。また、レコードのスナップショットを、アダプタがバックエンドに送るペイロードに変換する役割もあります。</target>
        </trans-unit>
        <trans-unit id="7c895b90222fc81da588c9e0646d2df62e5cf424" translate="yes" xml:space="preserve">
          <source>A service to keep a cache of rendered maps to use in different places in the application.</source>
          <target state="translated">レンダリングされたマップのキャッシュを保持して、アプリケーションのさまざまな場所で使用するためのサービスです。</target>
        </trans-unit>
        <trans-unit id="3c3d903ea99c2476f16cbf3393899fe9f15b0928" translate="yes" xml:space="preserve">
          <source>A simple example of usage:</source>
          <target state="translated">簡単な使用例です。</target>
        </trans-unit>
        <trans-unit id="8e839688e01ba01e9dfe145feb09335f1aa963d0" translate="yes" xml:space="preserve">
          <source>A simple example:</source>
          <target state="translated">簡単な例です。</target>
        </trans-unit>
        <trans-unit id="7c5a6abc5e310dfe6a84055df1ea6d3961e87d8a" translate="yes" xml:space="preserve">
          <source>A skip navigation link, or skip link, is a useful feature for users who want to bypass content that is repeated on multiple pages (i.e., a site header). This can especially helpful to users with assistive technology, who have to browse website content in a more linear fashion, but it can also be useful for power users who prefer to navigate websites only using a keyboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d274a36ee6e757d5a75282c192d27af9d7b6bf" translate="yes" xml:space="preserve">
          <source>A sophisticated text editor for code, markup and prose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe2accf54d3a5f4254784eb6d5cfb9db1888678" translate="yes" xml:space="preserve">
          <source>A standard promise hook that resolves if the transition succeeds and rejects if it fails/redirects/aborts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5bc1ec0036ae274060ccd389cd6f0b1ea67333" translate="yes" xml:space="preserve">
          <source>A state may implement zero or more events and flags.</source>
          <target state="translated">状態は、0個以上のイベントとフラグを実装することができます。</target>
        </trans-unit>
        <trans-unit id="32cd32f434617976faf72a74fb5d07b5c8ed826d" translate="yes" xml:space="preserve">
          <source>A string that will not be HTML escaped by Handlebars.</source>
          <target state="translated">ハンドルバーでHTMLがエスケープされないようにする文字列。</target>
        </trans-unit>
        <trans-unit id="bdc38e38a317499db1d65de43d85943675b74110" translate="yes" xml:space="preserve">
          <source>A stub stands in place of the real object in your application and simulates its behavior. In the stub service, define a method that will fetch the map based on location, called &lt;code&gt;getMapElement&lt;/code&gt;.</source>
          <target state="translated">スタブは、アプリケーションの実際のオブジェクトの代わりに立って、その動作をシミュレートします。スタブサービスで、 &lt;code&gt;getMapElement&lt;/code&gt; と呼ばれる、場所に基づいてマップをフェッチするメソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="aeef60b43ff081b31523ea1c338caf0f4d76bf9e" translate="yes" xml:space="preserve">
          <source>A subclass of the JavaScript Error object for use in Ember.</source>
          <target state="translated">Ember で使用する JavaScript Error オブジェクトのサブクラスです。</target>
        </trans-unit>
        <trans-unit id="296c7fcd6cedd62993531604b81b2ac120760f97" translate="yes" xml:space="preserve">
          <source>A target object or a function</source>
          <target state="translated">対象となるオブジェクトや関数</target>
        </trans-unit>
        <trans-unit id="cb536b028ba547a17fc771e9b4531254772e08f5" translate="yes" xml:space="preserve">
          <source>A template that defines how it will look (&lt;code&gt;app/templates/components/rental-listing.hbs&lt;/code&gt;)</source>
          <target state="translated">外観を定義するテンプレート（ &lt;code&gt;app/templates/components/rental-listing.hbs&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="acfe9143c927cfb089cd2845d43a1eeff971a8a8" translate="yes" xml:space="preserve">
          <source>A template to be displayed when the user visits &lt;code&gt;/scientists&lt;/code&gt;.</source>
          <target state="translated">ユーザーが &lt;code&gt;/scientists&lt;/code&gt; にアクセスしたときに表示されるテンプレート。</target>
        </trans-unit>
        <trans-unit id="48d4844f1559cb2de2f2064f2fcbdfefc8d2bee8" translate="yes" xml:space="preserve">
          <source>A top most object of the request payload onto which to append the serialized record</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c16b851b5bfa04503f2f1a6303edf6dc213b40e" translate="yes" xml:space="preserve">
          <source>A transform has two functions: &lt;code&gt;serialize&lt;/code&gt; and &lt;code&gt;deserialize&lt;/code&gt;. Deserialization converts a value to a format that the client expects. Serialization does the reverse and converts a value to the format expected by the persistence layer.</source>
          <target state="translated">変換には、 &lt;code&gt;serialize&lt;/code&gt; と &lt;code&gt;deserialize&lt;/code&gt; の 2つの関数があります。逆シリアル化は、値をクライアントが期待する形式に変換します。シリアライゼーションはその逆を行い、永続化レイヤーが期待する形式に値を変換します。</target>
        </trans-unit>
        <trans-unit id="e8e324271ace94d3ca83d71a5940c8b717bc62ba" translate="yes" xml:space="preserve">
          <source>A unit test for this route.</source>
          <target state="translated">このルートのユニットテスト。</target>
        </trans-unit>
        <trans-unit id="4e4c72968c6c63750c88efcc1df92843dcdc01e1" translate="yes" xml:space="preserve">
          <source>A user is able to create a blog post.</source>
          <target state="translated">ユーザーはブログ記事を作成することができます。</target>
        </trans-unit>
        <trans-unit id="14ac3739ecbc3cce41527a43c02dac69610f63a1" translate="yes" xml:space="preserve">
          <source>A user is able to log in via the login form.</source>
          <target state="translated">ユーザーはログインフォームからログインすることができます。</target>
        </trans-unit>
        <trans-unit id="89ef66d96328015790ebfc7c576d8ad66ef363e3" translate="yes" xml:space="preserve">
          <source>A user is prevented from typing more than 50 characters into post's title field.</source>
          <target state="translated">ユーザーが投稿のタイトル欄に50文字以上入力できないようにしました。</target>
        </trans-unit>
        <trans-unit id="58af9c9e350819c582740d5ff4808115ce6132cb" translate="yes" xml:space="preserve">
          <source>A utility function to create a map from the Google Maps API.</source>
          <target state="translated">Google Maps APIから地図を作成するユーティリティ関数です。</target>
        </trans-unit>
        <trans-unit id="bb4771b943bff95e54d8589ba98dd97636cf52e6" translate="yes" xml:space="preserve">
          <source>A validation tool which checks for common issues in your JavaScript. You'd usually use this in your build process to enforce quality in your codebase. A great example of something to check for: &lt;em&gt;making sure you've always got your semicolons&lt;/em&gt;.</source>
          <target state="translated">JavaScriptの一般的な問題をチェックする検証ツール。通常、これをビルドプロセスで使用して、コードベースの品質を強化します。チェック対象の良い例：&lt;em&gt;常にセミコロンを取得していることを確認してください&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7229154626a7e638f8dfb8f3853f864acc34490b" translate="yes" xml:space="preserve">
          <source>A valuable attribute of the Ember framework is its use of &lt;a href=&quot;http://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt; to aid projects in keeping up with changes to the framework. Before any functionality or API is removed it first goes through a deprecation period where the functionality is still supported, but usage of it generates a warning logged to the browser console. These warnings can pile up between major releases to a point where the amount of deprecation warnings that scroll through the console becomes overwhelming.</source>
          <target state="translated">Emberフレームワークの価値ある属性は、プロジェクトがフレームワークの変更に対応できるように&lt;a href=&quot;http://semver.org/&quot;&gt;セマンティックバージョニング&lt;/a&gt;を使用することです。機能またはAPIが削除される前に、まず機能がサポートされている非推奨期間が経過しますが、使用するとブラウザコンソールにログが記録されます。これらの警告は、コンソールをスクロールする非推奨の警告が大量になるまで、メジャーリリース間で積み重なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d11138bbe4d4307c7e11d7cf9bc1fbd666ddcc73" translate="yes" xml:space="preserve">
          <source>A value is blank if it is empty or a whitespace string.</source>
          <target state="translated">値が空か空白文字列の場合は空白になります。</target>
        </trans-unit>
        <trans-unit id="8d1f021a0c0f2b13574b49fae2a1d6d476e7e060" translate="yes" xml:space="preserve">
          <source>A value is present if it not &lt;code&gt;isBlank&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;isBlank&lt;/code&gt; でない場合、値が存在します。</target>
        </trans-unit>
        <trans-unit id="f48d0a670e99edf05724ed7e949ae0349d64236c" translate="yes" xml:space="preserve">
          <source>A visitor does not have access to the admin panel.</source>
          <target state="translated">訪問者は管理パネルにアクセスできません。</target>
        </trans-unit>
        <trans-unit id="9cefa9b15bf3ec23b34cb0c6282bcc551ba027cd" translate="yes" xml:space="preserve">
          <source>A warning to display.</source>
          <target state="translated">表示するための警告。</target>
        </trans-unit>
        <trans-unit id="778f927c7f135cd674b23e2ba49a161af1a2ded2" translate="yes" xml:space="preserve">
          <source>AEmber.NativeArraypublic</source>
          <target state="translated">AEmber.NativeArraypublic</target>
        </trans-unit>
        <trans-unit id="9879dc23cf752ded0d3c709d57d87b803f4e81e2" translate="yes" xml:space="preserve">
          <source>AJAX callbacks</source>
          <target state="translated">AJAXコールバック</target>
        </trans-unit>
        <trans-unit id="a9046dbb4daece424db4f9e1cb3852669b9ef68d" translate="yes" xml:space="preserve">
          <source>AMD JavaScript modules</source>
          <target state="translated">AMD JavaScript モジュール</target>
        </trans-unit>
        <trans-unit id="00e38421a40e481837442f1e838c95ebda36e489" translate="yes" xml:space="preserve">
          <source>API Overview</source>
          <target state="translated">APIの概要</target>
        </trans-unit>
        <trans-unit id="ca8ef9a45d6a496b147a5eb817fc9fcaef9a74fc" translate="yes" xml:space="preserve">
          <source>API requests can be made almost anywhere in an Ember app, however the most common place is the &lt;code&gt;model&lt;/code&gt; hook of a Route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414dc2de6205a888f5a4098c07424abb4fdb4856" translate="yes" xml:space="preserve">
          <source>API responses will be translated into instances of &lt;code&gt;DS.Errors&lt;/code&gt; differently, depending on the specific combination of adapter and serializer used. You may want to check the documentation or the source code of the libraries that you are using, to know how they expect errors to be communicated.</source>
          <target state="translated">API応答は、使用されるアダプターと &lt;code&gt;DS.Errors&lt;/code&gt; の特定の組み合わせに応じて、DS.Errorsのインスタンスに異なる方法で変換されます。使用しているライブラリのドキュメントまたはソースコードをチェックして、エラーがどのように伝えられるかを知ることができます。</target>
        </trans-unit>
        <trans-unit id="5fe041530ba8558c321bac220e1c8de3c4e1f021" translate="yes" xml:space="preserve">
          <source>API responses will be translated into instances of &lt;code&gt;Errors&lt;/code&gt; differently, depending on the specific combination of adapter and serializer used. You may want to check the documentation or the source code of the libraries that you are using, to know how they expect errors to be communicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324cefd2fcd2f4bbcb04a1db3ecabb3920ce6198" translate="yes" xml:space="preserve">
          <source>AbortError</source>
          <target state="translated">AbortError</target>
        </trans-unit>
        <trans-unit id="2e8d2dae567e5b401c938574cd5a980faa892739" translate="yes" xml:space="preserve">
          <source>Aborted transitions can be retried at a later time. A common use case for this is having an authenticated route redirect the user to a login page, and then redirecting them back to the authenticated route once they've logged in.</source>
          <target state="translated">中断されたトランジションは、後で再試行することができます。一般的な使用例としては、認証済みルートでユーザーをログインページにリダイレクトさせ、ログイン後に認証済みルートにリダイレクトさせるというものがあります。</target>
        </trans-unit>
        <trans-unit id="7f822f9e40f9b5173117f5f39ac274176470b8ba" translate="yes" xml:space="preserve">
          <source>Aborting Transitions Within &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;beforeModel&lt;/code&gt;, &lt;code&gt;afterModel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;model&lt;/code&gt; 、 &lt;code&gt;beforeModel&lt;/code&gt; 、 &lt;code&gt;afterModel&lt;/code&gt; 内の遷移の中止</target>
        </trans-unit>
        <trans-unit id="3ea678ab865304fc908e56076cf840e30979fc06" translate="yes" xml:space="preserve">
          <source>Aborts the Transition. Note you can also implicitly abort a transition by initiating another transition while a previous one is underway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f37869865287c799aa5a03f4a625dae9b804236" translate="yes" xml:space="preserve">
          <source>Abstracting the Logic Into a Custom Modifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4e81eb7658715d12bb057c6976bab2d9e1b4bb" translate="yes" xml:space="preserve">
          <source>Acceptance Testing the Rental List</source>
          <target state="translated">レンタルリストの受け入れテスト</target>
        </trans-unit>
        <trans-unit id="44a09c418324158dfd048b7b23925eb42035c677" translate="yes" xml:space="preserve">
          <source>Acceptance Tests</source>
          <target state="translated">受入試験</target>
        </trans-unit>
        <trans-unit id="0e265262b61a3e40190ac74373b3099a1e2b2304" translate="yes" xml:space="preserve">
          <source>Acceptance tests are setup by calling the function &lt;code&gt;moduleForAcceptance&lt;/code&gt;. This function ensures that your Ember application is started and shut down between each test.</source>
          <target state="translated">受け入れテストは、関数 &lt;code&gt;moduleForAcceptance&lt;/code&gt; を呼び出すことによって設定されます。この機能により、Emberアプリケーションが起動され、各テストの間にシャットダウンされます。</target>
        </trans-unit>
        <trans-unit id="27656383c861b3221a09a8e2857ac96875ead638" translate="yes" xml:space="preserve">
          <source>Acceptance tests are used to test user interaction and application flow. The tests interact with the application in the same ways that a user would, by doing things like filling out form fields and clicking buttons. Acceptance tests ensure that the features within a project are basically functional, and are valuable in ensuring the core features of a project have not regressed, and that the project's goals are being met.</source>
          <target state="translated">受入テストは、ユーザのインタラクションとアプリケーションの流れをテストするために使用されます。テストは、ユーザがフォームフィールドに記入したり、ボタンをクリックしたりするのと同じ方法でアプリケーションと対話します。受入テストは、プロジェクト内の機能が基本的に機能していることを保証し、プロジェクトのコア機能が後退していないことや、プロジェクトの目標が達成されていることを保証する上で貴重なものです。</target>
        </trans-unit>
        <trans-unit id="8a5f638cc1d0f0efc4d9a9b92ac6c43085673983" translate="yes" xml:space="preserve">
          <source>Accepting Input to a Component</source>
          <target state="translated">コンポーネントへの入力を受け入れる</target>
        </trans-unit>
        <trans-unit id="d660049bc1f2f54fc0e3f4ace6fa5eb205f2f1e0" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">Accessibility</target>
        </trans-unit>
        <trans-unit id="bc03dfb41cf672c9544f728deff319cd4d6c8f77" translate="yes" xml:space="preserve">
          <source>Accessibility Strategy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39a9bcdb3565667f2811d0907a6d5f065eb9cff" translate="yes" xml:space="preserve">
          <source>Accessibility addons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0dbeb454867393e2d95531904ae42de1326c30" translate="yes" xml:space="preserve">
          <source>Accessibility should be considered at the start of a project, whether that project has named accessibility an explicit goal or not. Since no one can predict anyone else's future (including whether or not they will need assistive technology at some point), and because in many places around the world it is legally required to make websites digitally accessible, accessibility should be thought about in the same way as performance- a necessity for any web-based product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd5843fad36a0b4ae613f2e2045972bcab9f656" translate="yes" xml:space="preserve">
          <source>Accessible Color Palette Builder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd2618007c94ee34aa19377671346876e369595" translate="yes" xml:space="preserve">
          <source>Accessible Rich Internet Applications (ARIA) 1.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07619cb27c8b1f57f6fc623b700d0ed621288a0" translate="yes" xml:space="preserve">
          <source>Accessible name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f344ca153944c9ec54979a9301bb2d6de3bdda3" translate="yes" xml:space="preserve">
          <source>Accessing Object Properties</source>
          <target state="translated">オブジェクト プロパティへのアクセス</target>
        </trans-unit>
        <trans-unit id="c35e20fb739a4737e5fef9dcd31a2c6baf677b39" translate="yes" xml:space="preserve">
          <source>Accessing Services</source>
          <target state="translated">サービスへのアクセス</target>
        </trans-unit>
        <trans-unit id="cfc5b1dde1e2c63523e0ed02ea95577bd5e3c1d2" translate="yes" xml:space="preserve">
          <source>Accessing an item's &lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">アイテムの &lt;code&gt;index&lt;/code&gt; アクセスする</target>
        </trans-unit>
        <trans-unit id="ca4a305307e0ff27e9f11dedc446bb26089db652" translate="yes" xml:space="preserve">
          <source>Accessing our maps API through a &lt;a href=&quot;https://guides.emberjs.com/applications/services&quot;&gt;service&lt;/a&gt; will give us several benefits</source>
          <target state="translated">&lt;a href=&quot;https://guides.emberjs.com/applications/services&quot;&gt;サービス&lt;/a&gt;を通じてマップAPIにアクセスすると、いくつかのメリットがあります</target>
        </trans-unit>
        <trans-unit id="9b47ccf55149807d853d44259738ef66e00d80b4" translate="yes" xml:space="preserve">
          <source>Accessing the Google Maps API with a Utility</source>
          <target state="translated">ユーティリティを使用して Google Maps API にアクセスする</target>
        </trans-unit>
        <trans-unit id="f5b0e226ed894764db92e76b6c1f1203c0b805bb" translate="yes" xml:space="preserve">
          <source>Accessors</source>
          <target state="translated">Accessors</target>
        </trans-unit>
        <trans-unit id="38ed25f645dcfc2df115d6a387d5f2679551323f" translate="yes" xml:space="preserve">
          <source>Accessors can be defined with the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; keywords:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900e02bcf9381fc252334366f1222273386991f8" translate="yes" xml:space="preserve">
          <source>Accessors, also known as getters and setters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ae864fba470c2ed48b02c13385b6ad4c84ead4" translate="yes" xml:space="preserve">
          <source>Accessors, also known as getters/setters, allow you to define a special function that is &lt;em&gt;accessed&lt;/em&gt; like a property. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a3a4f498b28cbec01c44aacf0dc5e3a1b828ef" translate="yes" xml:space="preserve">
          <source>Accuracy</source>
          <target state="translated">Accuracy</target>
        </trans-unit>
        <trans-unit id="97b101eb4a96a947309ad20d6017680103e3f95d" translate="yes" xml:space="preserve">
          <source>Across the Board Normalization</source>
          <target state="translated">クロス・ザ・ボード・ノーマライゼーション</target>
        </trans-unit>
        <trans-unit id="97c89a4d6630adeb18fa12ba9976a31413fe293e" translate="yes" xml:space="preserve">
          <source>Action</source>
          <target state="translated">Action</target>
        </trans-unit>
        <trans-unit id="0f1609148ca60a0b757b4b6ef200dcfe2f0a0af5" translate="yes" xml:space="preserve">
          <source>Action Fundamentals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617f82299f3621e8f106b178792e79a9d42f9c01" translate="yes" xml:space="preserve">
          <source>Action Parameters</source>
          <target state="translated">アクションパラメータ</target>
        </trans-unit>
        <trans-unit id="9ead969fd194363deaca0f030c3df01bbaee4b1b" translate="yes" xml:space="preserve">
          <source>ActionHandler</source>
          <target state="translated">ActionHandler</target>
        </trans-unit>
        <trans-unit id="c81e8765f02fbfe34ff71f82e9a3d6c35bf7b012" translate="yes" xml:space="preserve">
          <source>ActionSupport</source>
          <target state="translated">ActionSupport</target>
        </trans-unit>
        <trans-unit id="c3cd636a585b20c40ac2df5ffb403e83cb2eef51" translate="yes" xml:space="preserve">
          <source>Actions</source>
          <target state="translated">Actions</target>
        </trans-unit>
        <trans-unit id="dca4d295973c33e1b157a02a2e6f659654a2ead2" translate="yes" xml:space="preserve">
          <source>Actions are JavaScript methods that you can call from a template. Find out how you can use actions with recommended patterns from the chapter &lt;a href=&quot;https://guides.emberjs.com/in-depth-topics/patterns-for-actions/&quot;&gt;Patterns for Actions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38647e8052fef0032f19d5d819d8ac4390cb154" translate="yes" xml:space="preserve">
          <source>Actions are always looked up on the &lt;code&gt;actions&lt;/code&gt; property of the current context. This avoids collisions in the naming of common actions, such as &lt;code&gt;destroy&lt;/code&gt;. Two options can be passed to the &lt;code&gt;action&lt;/code&gt; helper when it is used in this way.</source>
          <target state="translated">アクションは常に、現在のコンテキストの &lt;code&gt;actions&lt;/code&gt; プロパティで検索されます。これにより、 &lt;code&gt;destroy&lt;/code&gt; などの一般的なアクションの名前の衝突を回避できます。このように使用すると、2つのオプションを &lt;code&gt;action&lt;/code&gt; ヘルパーに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="ac13185fa12701db033762c764d4e1def30c4909" translate="yes" xml:space="preserve">
          <source>Actions are the primary method for updating state in an Ember application, and as such they have lots of uses and patterns. This guide covers some of the more common action patterns that can be used in Ember.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef321ee173e7ba5a99a3e27aa555cb83c2a83923" translate="yes" xml:space="preserve">
          <source>Actions can also be invoked from other parts of your application via &lt;code&gt;ActionHandler#send&lt;/code&gt;.</source>
          <target state="translated">アクションは、アプリケーションの他の部分から &lt;code&gt;ActionHandler#send&lt;/code&gt; を介して呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="d265dabb987eaae69a060cfd294d552f86de3822" translate="yes" xml:space="preserve">
          <source>Actions can be invoked on objects other than the component directly from the template. For example, in our &lt;code&gt;SendMessage&lt;/code&gt; component we might include a service that processes the &lt;code&gt;sendMessage&lt;/code&gt; logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac67e5ce98c087908f39f11cea90bf623ccb17fb" translate="yes" xml:space="preserve">
          <source>Actions can be invoked on objects other than the component directly from the template. For example, in our &lt;code&gt;send-message&lt;/code&gt; component we might include a service that processes the &lt;code&gt;sendMessage&lt;/code&gt; logic.</source>
          <target state="translated">コンポーネント以外のオブジェクトに対して、テンプレートから直接アクションを呼び出すことができます。たとえば、 &lt;code&gt;send-message&lt;/code&gt; コンポーネントには、 &lt;code&gt;sendMessage&lt;/code&gt; ロジックを処理するサービスを含めることができます。</target>
        </trans-unit>
        <trans-unit id="3ce8f13218eb402c2df429715fa272511ad7668d" translate="yes" xml:space="preserve">
          <source>Actions in components allow you to decouple an event happening from how it's handled, leading to modular, more reusable components.</source>
          <target state="translated">コンポーネントのアクションを使用すると、イベントの発生を処理方法から切り離すことができ、モジュール化された再利用性の高いコンポーネントを実現できます。</target>
        </trans-unit>
        <trans-unit id="c612ed0140667c0e62d9f7a1d523831c7041d1d2" translate="yes" xml:space="preserve">
          <source>Actions invoked with &lt;code&gt;sendAction&lt;/code&gt; have the same currying behavior as demonstrated with &lt;code&gt;on-input&lt;/code&gt; above. For example:</source>
          <target state="translated">&lt;code&gt;sendAction&lt;/code&gt; で呼び出されたアクションは、上記の &lt;code&gt;on-input&lt;/code&gt; で示されているのと同じカリー化動作を持っています。例えば：</target>
        </trans-unit>
        <trans-unit id="9dd2a9395182a0837e5a69ceb089926159b2de79" translate="yes" xml:space="preserve">
          <source>Activating a Canary Feature</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38273a4f69f8fe135938b7cf85ee84ff3bcecc9e" translate="yes" xml:space="preserve">
          <source>Active CSS Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965c8c2299fd94833f9b672ad404956bad4b8f47" translate="yes" xml:space="preserve">
          <source>Ad Hoc Injections</source>
          <target state="translated">アドホック注射</target>
        </trans-unit>
        <trans-unit id="e6b4616c0b930c121c72c82e34550e44bce3ed0f" translate="yes" xml:space="preserve">
          <source>Adapter</source>
          <target state="translated">Adapter</target>
        </trans-unit>
        <trans-unit id="7b1c67e650668dc5c12c97e47344ef19be296223" translate="yes" xml:space="preserve">
          <source>Adapter Resolution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23ed806f99e9163d07877e070940fd1a866b9a5" translate="yes" xml:space="preserve">
          <source>AdapterError</source>
          <target state="translated">AdapterError</target>
        </trans-unit>
        <trans-unit id="f8e64b89ee4585758e2437b11b782091a8c1c19d" translate="yes" xml:space="preserve">
          <source>AdapterPopulatedRecordArray</source>
          <target state="translated">AdapterPopulatedRecordArray</target>
        </trans-unit>
        <trans-unit id="381e6f2969f7ac5cc8e8450cfd8670f3522246c0" translate="yes" xml:space="preserve">
          <source>Adapters let you completely change how your API is implemented without impacting your Ember application code.</source>
          <target state="translated">アダプタを使用すると、Ember アプリケーションのコードに影響を与えることなく、API の実装方法を完全に変更することができます。</target>
        </trans-unit>
        <trans-unit id="cc9a7760101cd3e6a4bd47590a9a5d54bf1cbc35" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;await pauseTest();&lt;/code&gt; in your test code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30306e1b80780b8434ef1b39907be0a658b8dcf" translate="yes" xml:space="preserve">
          <source>Add an event listener</source>
          <target state="translated">イベントリスナーの追加</target>
        </trans-unit>
        <trans-unit id="5b58e56f9360e98d1bf073d232c8e385133a2666" translate="yes" xml:space="preserve">
          <source>Add the following bookmark:</source>
          <target state="translated">以下のブックマークを追加します。</target>
        </trans-unit>
        <trans-unit id="13be4fa81c316c889b22a98a584e5b3e01b4b1a6" translate="yes" xml:space="preserve">
          <source>Add the following code after the imports to our acceptance test:</source>
          <target state="translated">受け入れテストにインポートした後に以下のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="68f57af06da9563227acf6cc2a382d91ef1267e5" translate="yes" xml:space="preserve">
          <source>Add the objects in the passed array to the end of the array. Defers notifying observers of the change until all objects are added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0efe1c0250f3fc188e6a8e3737351d8dca2b0ce1" translate="yes" xml:space="preserve">
          <source>Add the objects in the passed numerable to the end of the array. Defers notifying observers of the change until all objects are added.</source>
          <target state="translated">渡された数値化可能なオブジェクトを配列の末尾に追加します。すべてのオブジェクトが追加されるまで、オブザーバへの変更の通知を遅延させます。</target>
        </trans-unit>
        <trans-unit id="29f7f9468ccd168471a49cc00c77dd9437fadf66" translate="yes" xml:space="preserve">
          <source>Adding Data Attributes</source>
          <target state="translated">データ属性の追加</target>
        </trans-unit>
        <trans-unit id="a46bd6a48506d37840e26e455b21f72457e13b3b" translate="yes" xml:space="preserve">
          <source>Adding Nested Routes</source>
          <target state="translated">ネストされたルートを追加する</target>
        </trans-unit>
        <trans-unit id="bb915848f121656d8082caf271f5e286b5d703a8" translate="yes" xml:space="preserve">
          <source>Adding Objects</source>
          <target state="translated">オブジェクトの追加</target>
        </trans-unit>
        <trans-unit id="fbf5e48b6a9cd3118543626736e3af2ed0bf0b8f" translate="yes" xml:space="preserve">
          <source>Adding Your Application Goals as Acceptance Tests</source>
          <target state="translated">アプリケーションの目標を合格テストとして追加する</target>
        </trans-unit>
        <trans-unit id="86b41c8a927c8c5a757118ad1ffaf3f422c6de5a" translate="yes" xml:space="preserve">
          <source>Adding a Banner with Navigation</source>
          <target state="translated">ナビゲーションでバナーを追加する</target>
        </trans-unit>
        <trans-unit id="7907b3231eba85b6e9a0d3e1a77b8c0e0b253aa8" translate="yes" xml:space="preserve">
          <source>Adding a breakpoint</source>
          <target state="translated">ブレークポイントの追加</target>
        </trans-unit>
        <trans-unit id="75af891187566cd5974854a2145ffd749735c23c" translate="yes" xml:space="preserve">
          <source>Adding a label to an input element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4c7f27c3bc07ce79145dc9d90e9c65138713e1" translate="yes" xml:space="preserve">
          <source>Adding a single property that is not an array will just add it in the array:</source>
          <target state="translated">配列ではない単一のプロパティを追加すると、配列の中に追加されるだけです。</target>
        </trans-unit>
        <trans-unit id="961b1847cb50852ed3ea64456047c5d703ca8190" translate="yes" xml:space="preserve">
          <source>Adding additional attributes on a link</source>
          <target state="translated">リンクに追加の属性を追加する</target>
        </trans-unit>
        <trans-unit id="7a1dec12e5bd06e88edffee0dd45da20527d5fc2" translate="yes" xml:space="preserve">
          <source>Adding arguments to action callbacks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014b5a0a8439fb714c677ef423ab10b27d2ab8e2" translate="yes" xml:space="preserve">
          <source>Adding event handlers to elements (when used as a modifier):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238f58072f55a746c0c6427be164278d95ececaa" translate="yes" xml:space="preserve">
          <source>Adding explicit injections in general is a highly recommended practice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbef15dbce6c895851b8526e25a336b3def8281b" translate="yes" xml:space="preserve">
          <source>Adding the &lt;code&gt;static&lt;/code&gt; keyword to a class element definition puts it on the &lt;em&gt;class&lt;/em&gt; itself, instead of instances:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2eb56110c25a5dfc7c53bd0e0fb918c3c99c20e" translate="yes" xml:space="preserve">
          <source>Adding the Rental To Our Template</source>
          <target state="translated">レンタルをテンプレートに追加</target>
        </trans-unit>
        <trans-unit id="84afde926b540b2f7f426749497948e02d4b57b2" translate="yes" xml:space="preserve">
          <source>Additional resources:</source>
          <target state="translated">追加のリソース。</target>
        </trans-unit>
        <trans-unit id="fc881ca94ae041edddea26c0df1a4f655bbb2bb8" translate="yes" xml:space="preserve">
          <source>Additionally a helper can be called as a nested helper (sometimes called a subexpression). In this example, the computed value of a helper is passed to a component named &lt;code&gt;show-money&lt;/code&gt;:</source>
          <target state="translated">さらに、ヘルパーはネストされたヘルパー（サブ表現と呼ばれることもあります）として呼び出すことができます。この例では、ヘルパーの計算値が &lt;code&gt;show-money&lt;/code&gt; という名前のコンポーネントに渡されます。</target>
        </trans-unit>
        <trans-unit id="09683c9869179610982cef3cb6331d7ae0d62eb5" translate="yes" xml:space="preserve">
          <source>Additionally a helper can be called as a nested helper. In this example, we show the formatted currency value if the &lt;code&gt;showMoney&lt;/code&gt; named argument is truthy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc2b7d3e370a211f92cf1b5d003a240af3bd462" translate="yes" xml:space="preserve">
          <source>Additionally you can &lt;code&gt;yield&lt;/code&gt; properties into the context for use by the consumer:</source>
          <target state="translated">さらに、コンシューマーが使用するコンテキストにプロパティを &lt;code&gt;yield&lt;/code&gt; できます。</target>
        </trans-unit>
        <trans-unit id="84d8720737180b39ffa90df8c9aac2f8c5c75e43" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;args&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; mutable, and is frozen in development modes. This is partially to prevent folks from trying to accomplish two-way bindings (which doesn't work, this is discussed in more detail below) and partially to ensure that &lt;code&gt;args&lt;/code&gt; always stays in sync with the arguments passed to the component, so it can be the canonical &quot;single source of truth&quot;. If you want to provide defaults to an argument, you should use a getter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3b1f7bd23ed7ecbacd0d8766335c2e64464779" translate="yes" xml:space="preserve">
          <source>Additionally, certain Ember objects still require the use of &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;, such as &lt;code&gt;ObjectProxy&lt;/code&gt; and &lt;code&gt;ArrayProxy&lt;/code&gt;. These will continue to function with tracked, but you &lt;em&gt;must&lt;/em&gt; use &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;. Likewise, KVO methods on Ember's &lt;code&gt;Enumerable&lt;/code&gt; class, such as &lt;code&gt;objectAt&lt;/code&gt; and &lt;code&gt;pushObject&lt;/code&gt;, and the various implementations of it will &lt;em&gt;generally&lt;/em&gt; continue to be tracked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1b6e0c9ed4043e184646f1976b2c49188e9088" translate="yes" xml:space="preserve">
          <source>Additionally, class helpers can call &lt;code&gt;recompute&lt;/code&gt; to force a new computation.</source>
          <target state="translated">また、クラスヘルパーは、呼び出すことができます &lt;code&gt;recompute&lt;/code&gt; 新しい計算を強制します。</target>
        </trans-unit>
        <trans-unit id="aff8c2a0852aaa3dedd9b762f5dfaf585b559da0" translate="yes" xml:space="preserve">
          <source>Additionally, if you try to set the model of an &lt;code&gt;Ember.ArrayController&lt;/code&gt; to a plain native array, it will raise an exception since it no longer implements the &lt;code&gt;Ember.Array&lt;/code&gt; interface.</source>
          <target state="translated">さらに、 &lt;code&gt;Ember.ArrayController&lt;/code&gt; のモデルをプレーンなネイティブ配列に設定しようとすると、 &lt;code&gt;Ember.Array&lt;/code&gt; インターフェイスを実装しなくなったため、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="06fd6762790bb2f63ab0bf1fbfa1923a15db1e1a" translate="yes" xml:space="preserve">
          <source>Additionally, it causes less churn to decide to implement basic accessibility considerations at the start of the project, than trying to add it on later or pivoting mid-project. Semantic HTML doesn't take any additional time to write than non-semantic markup, provides a lower cognitive burden for development, typically produces less markup which will help an application be more performant, and is better for SEO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614b01d739cbbf475bc18a379a6da866937a8964" translate="yes" xml:space="preserve">
          <source>Additionally, since the component isn't instantiated until the block content is rendered, we can add arguments within the block. In this case we'll add a text style option which will dictate the style of the body text we want in our post. When &lt;code&gt;{{post.body}}&lt;/code&gt; is instantiated, it will have both the &lt;code&gt;editStyle&lt;/code&gt; and &lt;code&gt;postData&lt;/code&gt; given by its wrapping component, as well as the &lt;code&gt;bodyStyle&lt;/code&gt; declared in the template.</source>
          <target state="translated">さらに、コンポーネントはブロックのコンテンツがレンダリングされるまでインスタンス化されないため、ブロック内に引数を追加できます。この例では、投稿に必要な本文テキストのスタイルを指示するテキストスタイルオプションを追加します。場合 &lt;code&gt;{{post.body}}&lt;/code&gt; インスタンス化され、それは、両方があります &lt;code&gt;editStyle&lt;/code&gt; と &lt;code&gt;postData&lt;/code&gt; その包装成分によって与えられる、ならびに &lt;code&gt;bodyStyle&lt;/code&gt; 属性は、テンプレート内で宣言しました。</target>
        </trans-unit>
        <trans-unit id="f0bc0d6c761728ed6eb684dcbbdb607b74c8e87f" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;mut&lt;/code&gt; helper can be combined with the &lt;code&gt;action&lt;/code&gt; helper to mutate a value. For example:</source>
          <target state="translated">さらに、 &lt;code&gt;mut&lt;/code&gt; ヘルパーを &lt;code&gt;action&lt;/code&gt; ヘルパーと組み合わせて、値を変更できます。例えば：</target>
        </trans-unit>
        <trans-unit id="69b34585bfd0f9f9d781705ff2180e2bef8489c3" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;mut&lt;/code&gt; helper can be combined with the &lt;code&gt;fn&lt;/code&gt; helper to mutate a value. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720976c9268821443e37ad99700c74bf4f06c7b7" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;mut&lt;/code&gt; helper generally can't be used for the same reason:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff38fbaef4688ee36ebaf956ca46ea7564c61799" translate="yes" xml:space="preserve">
          <source>Additionally, to retrieve the first and last objects in an array in an observable fashion, you should use &lt;code&gt;myArray.get('firstObject')&lt;/code&gt; and &lt;code&gt;myArray.get('lastObject')&lt;/code&gt;, respectively.</source>
          <target state="translated">さらに、配列内の最初と最後のオブジェクトを &lt;code&gt;myArray.get('firstObject')&lt;/code&gt; 可能な方法で取得するには、それぞれmyArray.get（ 'firstObject'）および &lt;code&gt;myArray.get('lastObject')&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="9e5d0b1302110e26dae48d761f60bb9682109f97" translate="yes" xml:space="preserve">
          <source>Additionally, you can also pass in a &lt;code&gt;model&lt;/code&gt; argument that will be set as the engines model. This can be an existing object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e91e7b78e6370c74b0939a3277d0018c3be62f0" translate="yes" xml:space="preserve">
          <source>Additionally, you will have to continue using &lt;em&gt;accessor&lt;/em&gt; functions for arrays if you want arrays to update as expected. These functions are covered in more detail in the &lt;a href=&quot;https://guides.emberjs.com/components/looping-through-lists/&quot;&gt;Looping Through Lists&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32c2dbcf34398cc50e6a6697df547ab5ac9a6bc" translate="yes" xml:space="preserve">
          <source>Addons</source>
          <target state="translated">Addons</target>
        </trans-unit>
        <trans-unit id="2411a924cd0f94fc35324331e68f85ad745420cc" translate="yes" xml:space="preserve">
          <source>Addons are JavaScript packages that integrate with Ember. For example, &lt;a href=&quot;https://github.com/adopted-ember-addons/ember-cli-sass&quot;&gt;&lt;code&gt;ember-cli-sass&lt;/code&gt;&lt;/a&gt; is an addon that allows you to use SASS/SCSS in your applications. You can install it using the Ember CLI with the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838e38c65403d79db60dcc3e55c156ab7110af36" translate="yes" xml:space="preserve">
          <source>Adds an array observer to the receiving array. The array observer object normally must implement two methods:</source>
          <target state="translated">受信配列に配列オブザーバを追加します。配列オブザーバオブジェクトは通常、2つのメソッドを実装しなければなりません。</target>
        </trans-unit>
        <trans-unit id="0ad9f3590163f2505aed3ffe90e450b29bdb9ba0" translate="yes" xml:space="preserve">
          <source>Adds an observer on a property.</source>
          <target state="translated">プロパティにオブザーバを追加します。</target>
        </trans-unit>
        <trans-unit id="9bb27d5e0611cced09effb7935991fe177224108" translate="yes" xml:space="preserve">
          <source>Adds each object in the passed array to the receiver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b8f978e5c477465a6baeff452966da87c1e3f5" translate="yes" xml:space="preserve">
          <source>Adds each object in the passed enumerable to the receiver.</source>
          <target state="translated">渡されたenumerableの各オブジェクトを受信機に追加します。</target>
        </trans-unit>
        <trans-unit id="c9c6a3d472cf059b5a0ab4b9951d7e76bd529bf2" translate="yes" xml:space="preserve">
          <source>Adds identifiers to the &lt;code&gt;RecordArray&lt;/code&gt; without duplicates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818f401e00e97f49fd796b6b2e9da04207c31113" translate="yes" xml:space="preserve">
          <source>Adds the named objects to the beginning of the array. Defers notifying observers until all objects have been added.</source>
          <target state="translated">指定されたオブジェクトを配列の先頭に追加します。すべてのオブジェクトが追加されるまで、オブザーバへの通知を遅延させます。</target>
        </trans-unit>
        <trans-unit id="3c5e5d99dd32a203dcc72a428b5b6629786bd068" translate="yes" xml:space="preserve">
          <source>Adds the passed target/method and any optional arguments to the named queue to be executed at the end of the RunLoop. If you have not already started a RunLoop when calling this method one will be started for you automatically.</source>
          <target state="translated">渡されたターゲット/メソッドと任意の引数を、RunLoopの最後に実行される名前付きキューに追加します。このメソッドを呼び出すときにまだ RunLoop を開始していない場合は、自動的に RunLoop が開始されます。</target>
        </trans-unit>
        <trans-unit id="1dca87d49eb6bfa992ae0a731eefcd208543b8d6" translate="yes" xml:space="preserve">
          <source>Advance to the next level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66931511954ef5ba588177fe993eecfba55f8306" translate="yes" xml:space="preserve">
          <source>Advanced Example</source>
          <target state="translated">高度な例</target>
        </trans-unit>
        <trans-unit id="186b4c5c3b7976b349d51e4508670ebdde03183d" translate="yes" xml:space="preserve">
          <source>Advanced Example:</source>
          <target state="translated">先進的な例。</target>
        </trans-unit>
        <trans-unit id="aeed9b4c741b5cb4e55f198c89190812e9900514" translate="yes" xml:space="preserve">
          <source>Advanced Usage:</source>
          <target state="translated">高度な使用法。</target>
        </trans-unit>
        <trans-unit id="a6a21e5c434254c6803b80cd6fc8d57bcbe220ac" translate="yes" xml:space="preserve">
          <source>Advanced: Class Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5215acd515beaa16e202387d73fa33b51b6a698" translate="yes" xml:space="preserve">
          <source>After a component successfully renders its backing HTML element into the DOM, it will trigger its &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement&quot;&gt;&lt;code&gt;didInsertElement()&lt;/code&gt;&lt;/a&gt; hook.</source>
          <target state="translated">コンポーネントがバッキングHTML要素をDOMに正常にレンダリングした後、&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement&quot;&gt; &lt;code&gt;didInsertElement()&lt;/code&gt; &lt;/a&gt;フックをトリガーします。</target>
        </trans-unit>
        <trans-unit id="5202159cfac89de0f36afb291d224809df2dbeac" translate="yes" xml:space="preserve">
          <source>After a few seconds, you should see output that looks like this:</source>
          <target state="translated">数秒後、このような出力が表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="c3da6b85eaa54589f8ced34a483e30ea26758f57" translate="yes" xml:space="preserve">
          <source>After fixing a deprecation and getting your scenarios working again, you might want to leave the deprecation message in the workflow file with the throw handler enabled. This will ensure you haven't missed anything, and ensure no new deprecated calls of that type are introduced to your project. Next, it's just a matter of going down the list, updating the handler, and fixing each remaining deprecation.</source>
          <target state="translated">Deprecation を修正してシナリオが再び動作するようになった後、throw ハンドラを有効にしてワークフローファイルに Deprecation メッセージを残しておくと良いでしょう。これにより、何も見逃していないことを確認し、そのタイプの新しい非推奨コールがプロジェクトに導入されないことを確認することができます。次に、リストを見て、ハンドラを更新して、残っている廃止予定のコールを修正するだけです。</target>
        </trans-unit>
        <trans-unit id="e8a563a03588b4ce19824d10483066c169e84711" translate="yes" xml:space="preserve">
          <source>After reading it, &lt;code&gt;meta.total&lt;/code&gt; can be used to calculate how many pages of posts you'll have.</source>
          <target state="translated">それを読んだ後、 &lt;code&gt;meta.total&lt;/code&gt; を使用して、投稿のページ数を計算できます。</target>
        </trans-unit>
        <trans-unit id="acfbbd52bbbb4ced17ca3ce859f416e93cba3255" translate="yes" xml:space="preserve">
          <source>After refreshing, Ember Data will appropriately look up the &quot;post&quot; model.</source>
          <target state="translated">リフレッシュ後、Ember Dataは適切に「ポスト」モデルを調べます。</target>
        </trans-unit>
        <trans-unit id="8e61b4bb84fed97f4f7b6123711e139bd5112710" translate="yes" xml:space="preserve">
          <source>After saving a new post successfully, a user is then shown the list of prior posts.</source>
          <target state="translated">新しい投稿の保存に成功すると、ユーザーは過去の投稿の一覧を表示します。</target>
        </trans-unit>
        <trans-unit id="235f56f22416c84a49c97407d786c0884e7cf673" translate="yes" xml:space="preserve">
          <source>After starting the server we should now see some end to end maps functionality show up on our front page!</source>
          <target state="translated">サーバーを起動した後、私たちのフロントページにエンドツーエンドのマップ機能が表示されるようになるはずです。</target>
        </trans-unit>
        <trans-unit id="98d297497aa50ba76e205142532b5510d9c48570" translate="yes" xml:space="preserve">
          <source>After updating our mirage configuration, we should see a simple filter on the home screen that will update the rental list as you type:</source>
          <target state="translated">ミラージュの設定を更新した後、ホーム画面にシンプルなフィルターが表示され、入力するとレンタルリストが更新されます。</target>
        </trans-unit>
        <trans-unit id="19ad05f957b79b38ceb81dd6312675b3cd75ce1c" translate="yes" xml:space="preserve">
          <source>After you have defined a model class, you can start &lt;a href=&quot;../finding-records&quot;&gt;finding&lt;/a&gt; and &lt;a href=&quot;../creating-updating-and-deleting-records&quot;&gt;working with records&lt;/a&gt; of that type.</source>
          <target state="translated">モデルクラスを定義したら、そのタイプの&lt;a href=&quot;../creating-updating-and-deleting-records&quot;&gt;レコードの&lt;/a&gt;&lt;a href=&quot;../finding-records&quot;&gt;検索&lt;/a&gt;と操作を開始できます。</target>
        </trans-unit>
        <trans-unit id="13f2d652f70945cb85fc5562fc3600a535ffb359" translate="yes" xml:space="preserve">
          <source>After:</source>
          <target state="translated">After:</target>
        </trans-unit>
        <trans-unit id="f1cd78ce91ac71db82cb5bb2b15ba7b56dad3762" translate="yes" xml:space="preserve">
          <source>Afterwards we add a further initializer named &lt;code&gt;pre&lt;/code&gt;, this time specifying that it should run before the initializer named &lt;code&gt;first&lt;/code&gt;:</source>
          <target state="translated">その後、 &lt;code&gt;pre&lt;/code&gt; という名前のイニシャライザを追加します。今回は、 &lt;code&gt;first&lt;/code&gt; 名前が付けられたイニシャライザの前に実行するように指定します。</target>
        </trans-unit>
        <trans-unit id="114f0fdf38dcb7f9f7e8fbac3f9f386224c4f06f" translate="yes" xml:space="preserve">
          <source>Afterwards, we can refactor the initial components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc0ed35fab8b9af4bc688962a9cd85ef53ae193" translate="yes" xml:space="preserve">
          <source>Again, note that these features will continue to work for apps that need them. An edition is not a breaking change, just a minor release. But for someone starting a new Ember app today, this is complexity they can safely skip learning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb065953fd69ec084a86ff8a162790324b40790" translate="yes" xml:space="preserve">
          <source>Again, the two components look similar. The first component has an &lt;code&gt;is-active&lt;/code&gt; class, while the second a &lt;code&gt;current-user&lt;/code&gt; class. How should we unify the components into one?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626d0adc94dcedaf3af61d87e54f26c480c7bd5c" translate="yes" xml:space="preserve">
          <source>Aggregate Information (Every or Any)</source>
          <target state="translated">集計情報(全てまたは任意</target>
        </trans-unit>
        <trans-unit id="70de51fa75e9edd99e6b4963a49d84a2bf27b1ce" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;mapBy&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mapBy&lt;/code&gt; のエイリアス</target>
        </trans-unit>
        <trans-unit id="d000f39170991f1fd43318c904daa38dd3efa366" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;mapBy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6896081e96ffaab61b811f72dddb265a71d05a" translate="yes" xml:space="preserve">
          <source>Alias for jQuery</source>
          <target state="translated">jQueryのエイリアス</target>
        </trans-unit>
        <trans-unit id="e209a5d4078b378b87ac5499ddf7812b6b95e027" translate="yes" xml:space="preserve">
          <source>All Ember Data classes, methods and functions are defined inside of this namespace.</source>
          <target state="translated">すべての Ember Data クラス、メソッド、および関数は、この名前空間の内部で定義されています。</target>
        </trans-unit>
        <trans-unit id="3698aeba7ff5a69d3c6f22b01d9c336e6bef20fc" translate="yes" xml:space="preserve">
          <source>All assets located in the &lt;code&gt;public/&lt;/code&gt; folder will be copied as is to the final output directory, &lt;code&gt;dist/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;public/&lt;/code&gt; フォルダーにあるすべてのアセットは、最終出力ディレクトリ &lt;code&gt;dist/&lt;/code&gt; そのままコピーされます。</target>
        </trans-unit>
        <trans-unit id="fd8aae95d9b2813640907de0ca9b623b6dbcba4e" translate="yes" xml:space="preserve">
          <source>All ember models have an id property. This is an identifier managed by an external source. These are always coerced to be strings before being used internally. Note when declaring the attributes for a model it is an error to declare an id attribute.</source>
          <target state="translated">すべての ember モデルには id プロパティがあります。これは外部ソースによって管理される識別子です。これらは、内部的に使用される前に、常に強制的に文字列にされます。モデルの属性を宣言するときに id 属性を宣言するとエラーになることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3486d672b565e38796bbf374c641258f59a55692" translate="yes" xml:space="preserve">
          <source>All enumerables expose &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#property_firstObject&quot;&gt;&lt;code&gt;firstObject&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#property_lastObject&quot;&gt;&lt;code&gt;lastObject&lt;/code&gt;&lt;/a&gt; properties that you can bind to.</source>
          <target state="translated">すべてのenumerablesは公開&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#property_firstObject&quot;&gt; &lt;code&gt;firstObject&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#property_lastObject&quot;&gt; &lt;code&gt;lastObject&lt;/code&gt; &lt;/a&gt;あなたがと結合することができるという性質を。</target>
        </trans-unit>
        <trans-unit id="0926465db0dcb951cc1f0003cb0577400b2d4022" translate="yes" xml:space="preserve">
          <source>All examples in this guide follow QUnit. Rest assured, the best practices for testing that we present in this guide are independent of your choice of testing framework. Keep in mind, the setup functions from &lt;a href=&quot;https://github.com/emberjs/ember-qunit&quot;&gt;ember-qunit&lt;/a&gt;&amp;mdash;&lt;code&gt;setupTest&lt;/code&gt;, &lt;code&gt;setupRenderingTest&lt;/code&gt;, and &lt;code&gt;setupApplicationTest&lt;/code&gt;&amp;mdash;need to be replaced with those from &lt;a href=&quot;https://github.com/emberjs/ember-mocha&quot;&gt;ember-mocha&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d7744eabcb9058f40daea2a118601b2428e49c" translate="yes" xml:space="preserve">
          <source>All interactive elements must have an accessible name. But what does that mean, exactly?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a9be30367f4a27730e81fbccce7fd0aad0bcd4" translate="yes" xml:space="preserve">
          <source>All of the Ember.js conveniences are available for modifying attributes. For example, you can use &lt;code&gt;Ember.Object&lt;/code&gt;'s &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_incrementProperty&quot;&gt;&lt;code&gt;incrementProperty&lt;/code&gt;&lt;/a&gt; helper:</source>
          <target state="translated">Ember.jsの便利な機能はすべて、属性の変更に使用できます。たとえば、 &lt;code&gt;Ember.Object&lt;/code&gt; の&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_incrementProperty&quot;&gt; &lt;code&gt;incrementProperty&lt;/code&gt; &lt;/a&gt;ヘルパーを使用できます。</target>
        </trans-unit>
        <trans-unit id="6bc42e572e5de321dbd2d066b83cbd5d2ec99a88" translate="yes" xml:space="preserve">
          <source>All of the event handling approaches described above respond to the same set of events. The names of the built-in events are listed below. (The hash of built-in events exists in &lt;code&gt;Ember.EventDispatcher&lt;/code&gt;.) Additional, custom events can be registered by using &lt;code&gt;Ember.Application.customEvents&lt;/code&gt;.</source>
          <target state="translated">上記のすべてのイベント処理アプローチは、同じ一連のイベントに応答します。組み込みイベントの名前を以下に示します。（組み込みイベントのハッシュは &lt;code&gt;Ember.EventDispatcher&lt;/code&gt; に存在します。）追加のカスタムイベントは、 &lt;code&gt;Ember.Application.customEvents&lt;/code&gt; を使用して登録できます。</target>
        </trans-unit>
        <trans-unit id="46e22ed99a22840595b1de896dbcc655416932c3" translate="yes" xml:space="preserve">
          <source>All our &lt;code&gt;SystemPreferencesEditor&lt;/code&gt; component really needs to process a user deletion is an account ID. For this case, the &lt;code&gt;fn&lt;/code&gt; helper provides the value via partial application to allow a parent component to dig into the passed object to pull out only what it needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229c0c6ae7ddf3e9e24fb42c05923cbeb93f534f" translate="yes" xml:space="preserve">
          <source>All our &lt;code&gt;system-preferences-editor&lt;/code&gt; component really needs to process a user deletion is an account ID. For this case, the action helper provides the &lt;code&gt;value&lt;/code&gt; attribute to allow a parent component to dig into the passed object to pull out only what it needs.</source>
          <target state="translated">すべての当社の &lt;code&gt;system-preferences-editor&lt;/code&gt; コンポーネントは、本当にユーザーの削除は、アカウントIDで処理する必要があります。この場合、アクションヘルパーは &lt;code&gt;value&lt;/code&gt; 属性を提供して、親コンポーネントが渡されたオブジェクトを掘り下げ、必要なものだけを引き出せるようにします。</target>
        </trans-unit>
        <trans-unit id="a86c6bb7f6d22f1e653e780827b3ff7ed83481b8" translate="yes" xml:space="preserve">
          <source>All parameters are optional. The function should return &lt;code&gt;true&lt;/code&gt; to include the item in the results, and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a787c960fc606e377560ffac4417e44624088fc" translate="yes" xml:space="preserve">
          <source>All params are optional. The method should return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d01f87b07aec86e2d4e07c2a66e7e783b689f3f" translate="yes" xml:space="preserve">
          <source>All style assets added this way will be concatenated and output as &lt;code&gt;/assets/vendor-823a77210dbe57c0736fbbda596cb84f.css&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718cc7b8864472ef4e74b1ea16436f4fc7ff3d96" translate="yes" xml:space="preserve">
          <source>All style assets added this way will be concatenated and output as &lt;code&gt;/assets/vendor.css&lt;/code&gt;.</source>
          <target state="translated">この方法で追加されたすべてのスタイルアセットは連結され、 &lt;code&gt;/assets/vendor.css&lt;/code&gt; として出力されます。</target>
        </trans-unit>
        <trans-unit id="f16b71ca628fe8405ecbd9361993f54c50fc073b" translate="yes" xml:space="preserve">
          <source>All third-party assets, included either manually in &lt;code&gt;vendor/&lt;/code&gt; or via a package manager like Bower, must be added via &lt;code&gt;import()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vendor/&lt;/code&gt; 手動で、またはBowerなどのパッケージマネージャーを介して含まれるすべてのサードパーティアセットは、 &lt;code&gt;import()&lt;/code&gt; を介して追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="d2180ccdea1ed0c1ef5a5028b5fe7fe6b47fd2c8" translate="yes" xml:space="preserve">
          <source>All third-party assets, included either manually in &lt;code&gt;vendor/&lt;/code&gt; or via a package manager like npm, must be added via &lt;code&gt;app.import()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf786e288505f7c89875c65f38709ab6e7774d0" translate="yes" xml:space="preserve">
          <source>All we want to do when a user visits the root (&lt;code&gt;/&lt;/code&gt;) URL is transition to &lt;code&gt;/rentals&lt;/code&gt;. To do this we will add code to our index route handler by implementing a route lifecycle hook, called &lt;code&gt;beforeModel&lt;/code&gt;.</source>
          <target state="translated">ユーザーがルート（ &lt;code&gt;/&lt;/code&gt; ）URLにアクセスしたときに行うことは、 &lt;code&gt;/rentals&lt;/code&gt; への遷移だけです。これを行うには、 &lt;code&gt;beforeModel&lt;/code&gt; と呼ばれるルートライフサイクルフックを実装して、インデックスルートハンドラーにコードを追加します。</target>
        </trans-unit>
        <trans-unit id="9eeaa2e6065909ce6be50386af9debc71d210cc6" translate="yes" xml:space="preserve">
          <source>Allow registering options for all factories of a type.</source>
          <target state="translated">タイプのすべての工場にオプションを登録できるようにします。</target>
        </trans-unit>
        <trans-unit id="fd31d681ad2597760c29143eaee7f311d122c3ee" translate="yes" xml:space="preserve">
          <source>Allowing Default Action</source>
          <target state="translated">デフォルトアクションの許可</target>
        </trans-unit>
        <trans-unit id="6e08a097c0ce32e8ba1e1d6b95a4b1a44cc0234c" translate="yes" xml:space="preserve">
          <source>Allowing Default Browser Action</source>
          <target state="translated">デフォルトのブラウザアクションを許可する</target>
        </trans-unit>
        <trans-unit id="225e76fc1cc7d4b77c063f838f10b18b298b1023" translate="yes" xml:space="preserve">
          <source>Allowing Modifier Keys</source>
          <target state="translated">修飾キーの許可</target>
        </trans-unit>
        <trans-unit id="5539cdfc08868b3d1b8aa4cec0319ad286612a49" translate="yes" xml:space="preserve">
          <source>Allows for runtime registration of handler functions that override the default deprecation behavior. Deprecations are invoked by calls to &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/@ember%2Fdebug/methods#deprecate&quot;&gt;@ember/debug/deprecate&lt;/a&gt;. The following example demonstrates its usage by registering a handler that throws an error if the message contains the word &quot;should&quot;, otherwise defers to the default handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6992de9a0552f0a40afb55475fda253a35b85c36" translate="yes" xml:space="preserve">
          <source>Allows for runtime registration of handler functions that override the default deprecation behavior. Deprecations are invoked by calls to &lt;a href=&quot;https://emberjs.com/api/classes/Ember.html#method_deprecate&quot;&gt;Ember.deprecate&lt;/a&gt;. The following example demonstrates its usage by registering a handler that throws an error if the message contains the word &quot;should&quot;, otherwise defers to the default handler.</source>
          <target state="translated">デフォルトの非推奨動作をオーバーライドするハンドラー関数のランタイム登録を可能にします。非推奨は&lt;a href=&quot;https://emberjs.com/api/classes/Ember.html#method_deprecate&quot;&gt;Ember.deprecateの&lt;/a&gt;呼び出しによって呼び出されます。次の例は、メッセージに「should」という単語が含まれている場合にエラーをスローするハンドラーを登録することにより、その使用法を示しています。そうでない場合は、デフォルトのハンドラーに従います。</target>
        </trans-unit>
        <trans-unit id="dba10f2663bbb76e24470fcd8ecfd8c5d8ab476d" translate="yes" xml:space="preserve">
          <source>Allows for runtime registration of handler functions that override the default warning behavior. Warnings are invoked by calls made to &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/@ember%2Fdebug/methods#warn&quot;&gt;@ember/debug/warn&lt;/a&gt;. The following example demonstrates its usage by registering a handler that does nothing overriding Ember's default warning behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a893a2d17b48de5fc7573df951096b2dcef5f22" translate="yes" xml:space="preserve">
          <source>Allows for runtime registration of handler functions that override the default warning behavior. Warnings are invoked by calls made to &lt;a href=&quot;https://emberjs.com/api/classes/Ember.html#method_warn&quot;&gt;Ember.warn&lt;/a&gt;. The following example demonstrates its usage by registering a handler that does nothing overriding Ember's default warning behavior.</source>
          <target state="translated">デフォルトの警告動作をオーバーライドするハンドラー関数のランタイム登録を可能にします。警告は、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.html#method_warn&quot;&gt;Ember.warn&lt;/a&gt;への呼び出しによって呼び出されます。次の例は、Emberのデフォルトの警告動作をオーバーライドしないハンドラーを登録することにより、その使用法を示しています。</target>
        </trans-unit>
        <trans-unit id="152a5267639ede0c60e32fd51b44b36e075fbc25" translate="yes" xml:space="preserve">
          <source>Allows you to produce custom metadata for the route. The return value of this method will be attached to its corresponding RouteInfoWithAttributes object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8837c765f5879bdcfaa68e31e606df42e35fcec1" translate="yes" xml:space="preserve">
          <source>Allows you to specify which context to call the specified function in while adding the execution of that function to the Ember run loop. This ability makes this method a great way to asynchronously integrate third-party libraries into your Ember application.</source>
          <target state="translated">指定した関数を呼び出すコンテキストを指定し、その関数の実行を Ember の実行ループに追加します。この機能により、このメソッドは、サードパーティのライブラリを非同期的に Ember アプリケーションに統合するための素晴らしい方法となります。</target>
        </trans-unit>
        <trans-unit id="43d09e474472eda4635ad21f8b5f03cfd24b6cf5" translate="yes" xml:space="preserve">
          <source>Allows you to traverse through the linked list of &lt;code&gt;RouteInfo&lt;/code&gt;s from the topmost to leafmost. Returns the first &lt;code&gt;RouteInfo&lt;/code&gt; in the linked list for which the callback returns true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1bea53958709685d1c2ec20b3089e9eb98236df" translate="yes" xml:space="preserve">
          <source>Almost every test has a pattern of visiting a route, interacting with the page (using the helpers), and checking for expected changes in the DOM.</source>
          <target state="translated">ほとんどすべてのテストには、ルートにアクセスし、ページと対話し(ヘルパーを使って)、DOM で予想される変化をチェックするというパターンがあります。</target>
        </trans-unit>
        <trans-unit id="5eb585a5d8debb39a2e408f32ce5f5d2d0b65dfb" translate="yes" xml:space="preserve">
          <source>Along the way, you might need to study up on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class&quot;&gt;Native JavaScript Classes&lt;/a&gt; too. Otherwise, it may be confusing about which parts of code are special to Ember, and which are not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32eb76d385644f5902d1a58a747a9b7a890957b" translate="yes" xml:space="preserve">
          <source>Along with the records returned from your store, you'll likely need to handle some kind of metadata. &lt;em&gt;Metadata&lt;/em&gt; is data that goes along with a specific &lt;em&gt;model&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; instead of a record.</source>
          <target state="translated">ストアから返されたレコードに加えて、おそらく何らかのメタデータを処理する必要があります。&lt;em&gt;メタデータ&lt;/em&gt;は、レコードの代わりに特定の&lt;em&gt;モデル&lt;/em&gt;または&lt;em&gt;タイプ&lt;/em&gt;に沿ったデータです。</target>
        </trans-unit>
        <trans-unit id="a4a29874e43397b867c35bbb4bac2e6ddf1c6ef7" translate="yes" xml:space="preserve">
          <source>Along with two types of modifiers that can be applied to methods, accessors, and fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287aa9efd6d0131e0e8c3a8ab6310d9c9f9f13ca" translate="yes" xml:space="preserve">
          <source>Also available as &lt;code&gt;Function.prototype.observes&lt;/code&gt; if prototype extensions are enabled.</source>
          <target state="translated">プロトタイプ拡張が有効かどうかを &lt;code&gt;Function.prototype.observes&lt;/code&gt; としても利用できます。</target>
        </trans-unit>
        <trans-unit id="20716f0097f6e369fad1156fe013f9e2b4ee343c" translate="yes" xml:space="preserve">
          <source>Also note how the callback function passed to the test helper is marked with the keyword &lt;code&gt;async&lt;/code&gt;. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&quot;&gt;ECMAScript 2017 feature async/await&lt;/a&gt; allows us to write asynchronous code in an easy-to-read, seemingly synchronous manner. We can better see what this means, once we start writing out our first test case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d405afc403e701b0ff791113a507d6d4c38813e" translate="yes" xml:space="preserve">
          <source>Also note that for &lt;code&gt;scheduleOnce&lt;/code&gt; to prevent additional calls, you need to pass the same function instance. The following case works as expected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a71db6d5d517b8977003666223226fe7a669b73" translate="yes" xml:space="preserve">
          <source>Also note that multiple calls to &lt;code&gt;peekAll&lt;/code&gt; for a given type will always return the same &lt;code&gt;RecordArray&lt;/code&gt;.</source>
          <target state="translated">また、特定のタイプの &lt;code&gt;peekAll&lt;/code&gt; を複数回呼び出すと、常に同じ &lt;code&gt;RecordArray&lt;/code&gt; が返されることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="d86077b483479586784301fa189115176eddf0ef" translate="yes" xml:space="preserve">
          <source>Also note that passing an anonymous function to &lt;code&gt;run.scheduleOnce&lt;/code&gt; will not prevent additional calls with an identical anonymous function from scheduling the items multiple times, e.g.:</source>
          <target state="translated">また、無名関数を &lt;code&gt;run.scheduleOnce&lt;/code&gt; に渡しても、同じ無名関数を使用した追加の呼び出しでアイテムが複数回スケジュールされるのを防ぐことはできません。</target>
        </trans-unit>
        <trans-unit id="809a8d162707850d38fd3de439436fce60c769a5" translate="yes" xml:space="preserve">
          <source>Also note, how both creating a record and updating properties on the record through the &lt;code&gt;levelUp&lt;/code&gt; method requires us to wrap these operations into a &lt;code&gt;run&lt;/code&gt; function. You can read more the Ember run loop &lt;a href=&quot;https://guides.emberjs.com/applications/run-loop/&quot;&gt;over here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855f6f073c4f90c4033dda3d95e4edd38622472a" translate="yes" xml:space="preserve">
          <source>Also take a look at &lt;a href=&quot;#method_modelNameFromPayloadType&quot;&gt;modelNameFromPayloadType&lt;/a&gt; to customize how the model name from should be mapped from the payload.</source>
          <target state="translated">また、&lt;a href=&quot;#method_modelNameFromPayloadType&quot;&gt;modelNameFromPayloadType&lt;/a&gt;を見て、モデル名をペイロードからマッピングする方法をカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="5a40e9c25fcd68dadcf28a840e0a3ba09ababcc4" translate="yes" xml:space="preserve">
          <source>Also take a look at &lt;a href=&quot;#method_payloadTypeFromModelName&quot;&gt;payloadTypeFromModelName&lt;/a&gt; to customize how the type of a record should be serialized.</source>
          <target state="translated">また、&lt;a href=&quot;#method_payloadTypeFromModelName&quot;&gt;payloadTypeFromModelName&lt;/a&gt;を見て、レコードのタイプをシリアル化する方法をカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="765058281b41d2406ccda100d75aeebf9d049d08" translate="yes" xml:space="preserve">
          <source>Also, note that the second test uses a dummy object as the returned map element (defined on line 4). Our map element can be substituted with any object because we are only asserting that the cache has been accessed (see line 32).</source>
          <target state="translated">また、2 番目のテストでは返されたマップ要素(4 行目に定義されている)としてダミーオブジェクトを使用していることにも注意してください。私たちのマップ要素は、キャッシュがアクセスされたことを主張しているだけなので、どのようなオブジェクトでも代用できます(32行目を参照)。</target>
        </trans-unit>
        <trans-unit id="d3e4f6316a7cf691def638bdca1ad5d8ea6d9564" translate="yes" xml:space="preserve">
          <source>Also, these helpers register themselves in the order that you call them and will be run in a chain; each one is only called after the previous one finishes. You can rest assured, therefore, that the order you call them in will also be their execution order, and that the previous helper has finished before the next one starts.</source>
          <target state="translated">また、これらのヘルパーは呼び出した順番で登録され、連鎖的に実行されます。したがって、呼び出した順番も実行順となり、次のヘルパーが始まる前に前のヘルパーが終了していることを確認することができるので安心してください。</target>
        </trans-unit>
        <trans-unit id="ab11f9ebfff84692e7c7903b624652206fc57659" translate="yes" xml:space="preserve">
          <source>Alternatively (and recommended), you can also define &lt;code&gt;EmberENV.FEATURES&lt;/code&gt; if you need to enable features flagged at runtime.</source>
          <target state="translated">または（推奨）、実行時にフラグが設定された機能を有効にする必要がある場合は、 &lt;code&gt;EmberENV.FEATURES&lt;/code&gt; も定義できます。</target>
        </trans-unit>
        <trans-unit id="e2441af84c835069d960f8b18d73f19906e7e58b" translate="yes" xml:space="preserve">
          <source>Alternatively you can pass an id into the call to &lt;code&gt;store.createRecord&lt;/code&gt; directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1c338c009761bfc062cee666109779d3ebafd0" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;code&gt;pushPayload&lt;/code&gt; will accept a model type which will determine which serializer will process the payload.</source>
          <target state="translated">または、 &lt;code&gt;pushPayload&lt;/code&gt; は、ペイロードを処理するシリアライザを決定するモデルタイプを受け入れます。</target>
        </trans-unit>
        <trans-unit id="02613cd77a36c4f02b5d61f696c09cd217233003" translate="yes" xml:space="preserve">
          <source>Alternatively, if called within an existing run loop:</source>
          <target state="translated">あるいは、既存の実行ループ内で呼び出された場合。</target>
        </trans-unit>
        <trans-unit id="5a85d30b9c88f8fdb857d54755da58e0796aa6eb" translate="yes" xml:space="preserve">
          <source>Alternatively, we could update the &lt;code&gt;hasMany&lt;/code&gt; relationship by pushing a record into the relationship:</source>
          <target state="translated">あるいは、レコードを関係にプッシュすることにより、 &lt;code&gt;hasMany&lt;/code&gt; 関係を更新することもできます。</target>
        </trans-unit>
        <trans-unit id="efbf21138b1b23ce19aaa165231cf9248bf29028" translate="yes" xml:space="preserve">
          <source>Alternatively, you can accept an arbitrary number of parameters by setting &lt;code&gt;positionalParams&lt;/code&gt; to a string, e.g. &lt;code&gt;positionalParams: 'params'&lt;/code&gt;. This will allow you to access those params as an array like so:</source>
          <target state="translated">あるいは、 &lt;code&gt;positionalParams&lt;/code&gt; を文字列に設定することで、任意の数のパラメーターを受け入れることができます（例 &lt;code&gt;positionalParams: 'params'&lt;/code&gt; 。これにより、これらのパラメーターに配列としてアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="6faf54c18e0980c4d4c1d13783729370498e78a4" translate="yes" xml:space="preserve">
          <source>Alternatively, you can explicitly provide a serialized &lt;code&gt;id&lt;/code&gt;, in place of passing a model object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92bca942c96ee4ac6c5528df059e247f3940328" translate="yes" xml:space="preserve">
          <source>Alternatively, you can pass the &lt;code&gt;outlet&lt;/code&gt; name directly as a string.</source>
          <target state="translated">または、 &lt;code&gt;outlet&lt;/code&gt; 名を文字列として直接渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="b11c114b6aa556375b6458321ebe1447d05fce62" translate="yes" xml:space="preserve">
          <source>Alternatively, you could pass both a photo's ID and a comment to the component:</source>
          <target state="translated">あるいは、写真のIDとコメントの両方をコンポーネントに渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="2a9f9d2ee2674d44b3b938a426ec795bfaf36b31" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;createRecord&lt;/code&gt; is fairly straightforward, the only thing to watch out for is that you cannot assign a promise as a relationship, currently.</source>
          <target state="translated">が &lt;code&gt;createRecord&lt;/code&gt; は非常に簡単です、に注意する唯一のものは、あなたが現在、関係として約束を割り当てることができないということです。</target>
        </trans-unit>
        <trans-unit id="eef2a7c411f8622d7eba3b860aa0cd53b1790a3f" translate="yes" xml:space="preserve">
          <source>Although Ember Data encourages you to sideload your relationships, sometimes when working with legacy APIs you may discover you need to deal with JSON that contains relationships embedded inside other records. The &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt; is meant to help with this problem.</source>
          <target state="translated">Ember Dataは関係をサイドロードすることをお勧めしますが、レガシーAPIを操作するときに、他のレコード内に埋め込まれた関係を含むJSONを処理する必要がある場合があります。 &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt; は、この問題を支援するために意味されます。</target>
        </trans-unit>
        <trans-unit id="1c3f267874e2789ed75f6f7073e54490c6c0a9b5" translate="yes" xml:space="preserve">
          <source>Although autoruns are convenient, they are suboptimal. The current JS frame is allowed to end before the run loop is flushed, which sometimes means the browser will take the opportunity to do other things, like garbage collection. GC running in between data changing and DOM rerendering can cause visual lag and should be minimized.</source>
          <target state="translated">オートランは便利ですが、最適ではありません。現在の JS フレームは、ランループがフラッシュされる前に終了することが許可されているため、ブラウザがガベージコレクションのような他のことをする機会を奪うことがあります。データの変更と DOM の再レンダリングの間に GC が実行されると、視覚的なラグが発生する可能性があるので、最小限に抑えるべきです。</target>
        </trans-unit>
        <trans-unit id="5a8abe7c0e83297852d4f67da4842abb482c2b8a" translate="yes" xml:space="preserve">
          <source>Although these methods are efficient, they do add a layer of indirection to your application so it is a good idea to use them only when you need the flexibility of using both true JavaScript arrays and &quot;virtual&quot; arrays such as controllers and collections.</source>
          <target state="translated">これらのメソッドは効率的ですが、アプリケーションに間接的なレイヤーを追加することになるので、真の JavaScript 配列とコントローラやコレクションのような &quot;仮想&quot; 配列の両方を使用する柔軟性が必要な場合にのみ使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ccfc88ef2112665ae2b825601a633790b9a7f125" translate="yes" xml:space="preserve">
          <source>Although this is the most common way to add an observer, this capability is actually built into the &lt;code&gt;Ember.Object&lt;/code&gt; class on top of two methods defined in this mixin: &lt;code&gt;addObserver&lt;/code&gt; and &lt;code&gt;removeObserver&lt;/code&gt;. You can use these two methods to add and remove observers yourself if you need to do so at runtime.</source>
          <target state="translated">これはオブザーバーを追加する最も一般的な方法ですが、この機能は実際には、このミックスインで定義されている2つのメソッド &lt;code&gt;addObserver&lt;/code&gt; および &lt;code&gt;removeObserver&lt;/code&gt; の上にある &lt;code&gt;Ember.Object&lt;/code&gt; クラスに組み込まれています。実行時に必要な場合は、これら2つのメソッドを使用してオブザーバーを自分で追加および削除できます。</target>
        </trans-unit>
        <trans-unit id="0bedd4c4463cb2876fa7d45887958ccfb2bc89cf" translate="yes" xml:space="preserve">
          <source>Although this is the most common way to add an observer, this capability is actually built into the &lt;code&gt;EmberObject&lt;/code&gt; class on top of two methods defined in this mixin: &lt;code&gt;addObserver&lt;/code&gt; and &lt;code&gt;removeObserver&lt;/code&gt;. You can use these two methods to add and remove observers yourself if you need to do so at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fdf3acda5570ed5cbb53880e6ef30466d75ee58" translate="yes" xml:space="preserve">
          <source>Always check to see if someone has already written an addon or library that helps connect to your API host or style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c97fd3f322b72a3d4c4d7d442eaf826aed2dd2b" translate="yes" xml:space="preserve">
          <source>Always give your class a name, e.g. ✅ &lt;code&gt;class MyClass {}&lt;/code&gt; and not 🛑 &lt;code&gt;class {}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73adb7629ca2f26a20ecbd91717b58bf8e26e808" translate="yes" xml:space="preserve">
          <source>Always test on real, representative mobile devices.</source>
          <target state="translated">必ず実際の代表的なモバイルデバイスでテストしてください。</target>
        </trans-unit>
        <trans-unit id="7e624e8c287aa2c3b7ac91a4518796513fe4bb5b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Application.html&quot;&gt;&lt;code&gt;Ember.Application&lt;/code&gt;&lt;/a&gt; serves as a &quot;registry&quot; for dependency declarations. Factories (i.e. classes) are registered with an application, as well as rules about &quot;injecting&quot; dependencies that are applied when objects are instantiated.</source>
          <target state="translated">アン&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Application.html&quot;&gt; &lt;code&gt;Ember.Application&lt;/code&gt; は、&lt;/a&gt;依存関係宣言の「レジストリ」として機能します。ファクトリ（つまり、クラス）はアプリケーションに登録され、オブジェクトがインスタンス化されるときに適用される依存性の「注入」に関するルールも同様です。</target>
        </trans-unit>
        <trans-unit id="de948038346f8af9fc0cb6320df6101f3e94f5dc" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;http://emberjs.com/api/classes/Ember.ApplicationInstance.html&quot;&gt;&lt;code&gt;Ember.ApplicationInstance&lt;/code&gt;&lt;/a&gt; serves as the &quot;owner&quot; for objects that are instantiated from registered factories. Application instances provide a means to &quot;look up&quot; (i.e. instantiate and / or retrieve) objects.</source>
          <target state="translated">AN &lt;a href=&quot;http://emberjs.com/api/classes/Ember.ApplicationInstance.html&quot;&gt; &lt;code&gt;Ember.ApplicationInstance&lt;/code&gt; が&lt;/a&gt;登録工場からインスタンス化されるオブジェクトの「所有者」として機能します。アプリケーションインスタンスは、オブジェクトを「ルックアップ」する（つまり、インスタンス化および/または取得する）手段を提供します。</target>
        </trans-unit>
        <trans-unit id="ac779e3c2cb123d5adaf74e6554e7d130c4a9eaf" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Service.html&quot;&gt;&lt;code&gt;Ember.Service&lt;/code&gt;&lt;/a&gt; is an Ember object that lives for the duration of the application, and can be made available in different parts of your application.</source>
          <target state="translated">アン&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Service.html&quot;&gt; &lt;code&gt;Ember.Service&lt;/code&gt; は、&lt;/a&gt;アプリケーションの期間住んエンバーオブジェクトで、アプリケーションのさまざまな部分で使用可能にすることができます。</target>
        </trans-unit>
        <trans-unit id="150cadffc6234f6dd95528843d3a3b767e3d2c1a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Application&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; serves as a &quot;registry&quot; for dependency declarations. Factories (i.e. classes) are registered with an application, as well as rules about &quot;injecting&quot; dependencies that are applied when objects are instantiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32c6f3234e84ad02ca6286961ff387ee08af23d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/ApplicationInstance&quot;&gt;&lt;code&gt;ApplicationInstance&lt;/code&gt;&lt;/a&gt; serves as the &quot;owner&quot; for objects that are instantiated from registered factories. Application instances provide a means to &quot;look up&quot; (i.e. instantiate and / or retrieve) objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80570aee16848a546fc70644c93965861edf257c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://guides.emberjs.com/templates/actions/&quot;&gt;actions hash&lt;/a&gt; is an object in the component that contains functions. These functions are called when the user interacts with the UI, such as clicking.</source>
          <target state="translated">&lt;a href=&quot;https://guides.emberjs.com/templates/actions/&quot;&gt;アクションハッシュは&lt;/a&gt;機能が含まれているコンポーネント内のオブジェクトです。これらの関数は、ユーザーがクリックなどのUIを操作するときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7f4bee16270cf0cb6f61f70a26b58e0e0c94a92f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Ember.Component&lt;/code&gt; is a view that is completely isolated. Properties accessed in its templates go to the view object and actions are targeted at the view object. There is no access to the surrounding context or outer controller; all contextual information must be passed in.</source>
          <target state="translated">AN &lt;code&gt;Ember.Component&lt;/code&gt; は完全に隔離されている図です。テンプレートでアクセスされるプロパティはビューオブジェクトに移動し、アクションはビューオブジェクトをターゲットにします。周囲のコンテキストや外部コントローラーへのアクセスはありません。すべてのコンテキスト情報を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="1883bb873b7fcf60158adf7d837aa6b927c0e6a2" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;about&lt;/code&gt; route, that gives information on our application.</source>
          <target state="translated">アプリケーションに関する情報を提供する &lt;code&gt;about&lt;/code&gt; ルート。</target>
        </trans-unit>
        <trans-unit id="bb1448a6a4f0771288c7f687937892fa7ef13e01" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;adapter&lt;/strong&gt; is an object that translates requests from Ember (such as &quot;find the user with an ID of 1&quot;) into requests to a server.</source>
          <target state="translated">&lt;strong&gt;アダプタは、&lt;/strong&gt;サーバへのリクエストに（例えば「1のIDを持つユーザを見つける」など）エンバーからの要求を変換するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="5902d993be6eb634955e5fd9227b9df48f126894" translate="yes" xml:space="preserve">
          <source>An About Route</source>
          <target state="translated">ルートについて</target>
        </trans-unit>
        <trans-unit id="f642fc2a91377aca2824b91dca244f58751396c3" translate="yes" xml:space="preserve">
          <source>An ArrayProxy wraps any other object that implements &lt;code&gt;Array&lt;/code&gt; and/or &lt;code&gt;MutableArray,&lt;/code&gt; forwarding all requests. This makes it very useful for a number of binding use cases or other cases where being able to swap out the underlying array is useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9500428fb1d2f5abb8fba66420e17f6fcc1234b3" translate="yes" xml:space="preserve">
          <source>An ArrayProxy wraps any other object that implements &lt;code&gt;Ember.Array&lt;/code&gt; and/or &lt;code&gt;Ember.MutableArray,&lt;/code&gt; forwarding all requests. This makes it very useful for a number of binding use cases or other cases where being able to swap out the underlying array is useful.</source>
          <target state="translated">&lt;code&gt;Ember.MutableArray,&lt;/code&gt; またはEmber.MutableArray、あるいはその &lt;code&gt;Ember.Array&lt;/code&gt; を実装する他のオブジェクトをラップし、すべての要求を転送します。これにより、多くのバインディングの使用例や、基になる配列をスワップアウトできることが有用な他の場合に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9a6039258cfcdc862552cfdba43389f97b2d891a" translate="yes" xml:space="preserve">
          <source>An Ember route is built with three parts:</source>
          <target state="translated">琥珀ルートは3つのパーツで構成されています。</target>
        </trans-unit>
        <trans-unit id="596f4894284d1bf94fc6151d59724cd243050588" translate="yes" xml:space="preserve">
          <source>An ID is usually assigned to a record by the server when you save it for the first time, but you can also generate IDs client-side.</source>
          <target state="translated">IDは通常、レコードを初めて保存するときにサーバーによって割り当てられますが、クライアント側でIDを生成することもできます。</target>
        </trans-unit>
        <trans-unit id="c76edccb2007be97c5102cf9e80f944ae7a8691f" translate="yes" xml:space="preserve">
          <source>An Index Route</source>
          <target state="translated">インデックスルート</target>
        </trans-unit>
        <trans-unit id="e5e7d7f7cc5134380d134c786308635abca89e80" translate="yes" xml:space="preserve">
          <source>An Integration Test</source>
          <target state="translated">統合テスト</target>
        </trans-unit>
        <trans-unit id="50fad2554ce7e95a53c65017699fe62afba1cc76" translate="yes" xml:space="preserve">
          <source>An RecordReference is a low level API that allows users and addon author to perform meta-operations on a record.</source>
          <target state="translated">RecordReferenceは、ユーザーやアドオン作成者がレコードに対してメタ操作を行うことを可能にする低レベルAPIです。</target>
        </trans-unit>
        <trans-unit id="f4c5e8a55d8da65f8eb359d5bfadfcc73a0ee14e" translate="yes" xml:space="preserve">
          <source>An action to double the &lt;code&gt;multiple&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608cdc5facc35a250421503c369c58512fc16f58" translate="yes" xml:space="preserve">
          <source>An adapter can target other hosts by setting the &lt;code&gt;host&lt;/code&gt; property.</source>
          <target state="translated">アダプタは、 &lt;code&gt;host&lt;/code&gt; プロパティを設定することにより、他のホストをターゲットにすることができます。</target>
        </trans-unit>
        <trans-unit id="9a5775bac8afbc0c3d7f8686c2d570e43392de66" translate="yes" xml:space="preserve">
          <source>An adapter is an object that receives requests from a store and translates them into the appropriate action to take against your persistence layer. The persistence layer is usually an HTTP API, but may be anything, such as the browser's local storage. Typically the adapter is not invoked directly instead its functionality is accessed through the &lt;code&gt;store&lt;/code&gt;.</source>
          <target state="translated">アダプターは、ストアからリクエストを受信し、永続化レイヤーに対して実行する適切なアクションに変換するオブジェクトです。通常、永続化レイヤーはHTTP APIですが、ブラウザーのローカルストレージなど、何でもかまいません。通常、アダプターは直接呼び出されず、代わりに &lt;code&gt;store&lt;/code&gt; からその機能にアクセスします。</target>
        </trans-unit>
        <trans-unit id="9fc80751fda7c43b7d6a2db08d919277d3465e27" translate="yes" xml:space="preserve">
          <source>An additional benefit is that you no longer have to use &lt;code&gt;set&lt;/code&gt; to update these values, you can use standard JavaScript syntax instead!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3a86affe2d7220ce0e01e6dbfde7c83555af2d" translate="yes" xml:space="preserve">
          <source>An alias to the proxied promise's &lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">プロキシされたpromiseの &lt;code&gt;catch&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="29c43cebb44c8dee95e990d1d5f3c186f19709c0" translate="yes" xml:space="preserve">
          <source>An alias to the proxied promise's &lt;code&gt;finally&lt;/code&gt;.</source>
          <target state="translated">プロキシされたpromiseの &lt;code&gt;finally&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="29d2587b6a6e14a31cba73d06ed8ee8231089637" translate="yes" xml:space="preserve">
          <source>An alias to the proxied promise's &lt;code&gt;then&lt;/code&gt;.</source>
          <target state="translated">プロキシされたpromiseの &lt;code&gt;then&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="0fae4849e3919222e3cba2482fe020e2bb1f1ddf" translate="yes" xml:space="preserve">
          <source>An app can use a different version than what it specifies as it's compatibility version. For instance, an App could be using &lt;code&gt;3.16&lt;/code&gt; while specifying compatibility with &lt;code&gt;3.12&lt;/code&gt;. This would remove any deprecations that were present in or before &lt;code&gt;3.12&lt;/code&gt; but keep support for anything deprecated in or abvoe &lt;code&gt;3.13&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e753b000ae156d9d8ea5bb3a387e513289c376" translate="yes" xml:space="preserve">
          <source>An array containing all of the error messages for this record. This is useful for displaying all errors to the user.</source>
          <target state="translated">このレコードのすべてのエラーメッセージを含む配列。これは、すべてのエラーをユーザに表示するのに便利です。</target>
        </trans-unit>
        <trans-unit id="3c7090dadd43a75eefba2c31824359b0ff59d071" translate="yes" xml:space="preserve">
          <source>An array of Snapshot arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61e2b6273b8fdc31ef8e26f8d2af48ae022708a" translate="yes" xml:space="preserve">
          <source>An array of columns of the following format: name: {String} The name of the column. desc: {String} Humanized description (what would show in a table column name).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b72d7bef0000bbe49e0a833c3532585f1a79a0" translate="yes" xml:space="preserve">
          <source>An array of indexes of items to return.</source>
          <target state="translated">返す項目のインデックスの配列。</target>
        </trans-unit>
        <trans-unit id="8122272945877e94daf5c84ee2ad4d0a13df3286" translate="yes" xml:space="preserve">
          <source>An array of records. This array will be observed for changes, so it should update when new records are added/removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e75799df15196f7a25ed796714cc70426f54776" translate="yes" xml:space="preserve">
          <source>An array of snapshots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbb22315f2e30f32aa62fad0bad0532be1e2c84" translate="yes" xml:space="preserve">
          <source>An array of snapshots of the available data for the resources to fetch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb58ab5ebfb56d5e2bfd8b9296c584c2ccf48594" translate="yes" xml:space="preserve">
          <source>An array of strings.</source>
          <target state="translated">文字列の配列。</target>
        </trans-unit>
        <trans-unit id="5887d2bd2f0ddf7e42b115ac99e306e4fbbb7769" translate="yes" xml:space="preserve">
          <source>An array of the ids of the resources to fetch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1120aaa0a87d2dd213ed0158edf71c2454297f52" translate="yes" xml:space="preserve">
          <source>An array of these arguments is passed to the helper function:</source>
          <target state="translated">これらの引数の配列がヘルパー関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="fda1ec9d59264d818647834489da811f90f6a33d" translate="yes" xml:space="preserve">
          <source>An array of types directly related to a model. Each type will be included once, regardless of the number of relationships it has with the model.</source>
          <target state="translated">モデルに直接関連するタイプの配列。モデルとの関係の数に関係なく、各型は一度だけ含まれます。</target>
        </trans-unit>
        <trans-unit id="aa341318cbc6694b07d1e5032577eaf030d13bdc" translate="yes" xml:space="preserve">
          <source>An array of zero or more objects that should be inserted into the array at *idx*</source>
          <target state="translated">idx*で配列に挿入される 0 個以上のオブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="1fe90876a1b798c907c82e0db130ed1fa8029f0a" translate="yes" xml:space="preserve">
          <source>An author's full name and date are properly displayed in a blog post.</source>
          <target state="translated">ブログ記事では、著者のフルネームと日付がきちんと表示されています。</target>
        </trans-unit>
        <trans-unit id="639f2e84401c149f296033a7bb9384842745aa11" translate="yes" xml:space="preserve">
          <source>An empty Array.</source>
          <target state="translated">空の配列。</target>
        </trans-unit>
        <trans-unit id="62fed3b9378eaf6151f1cae0fb4e68e38624c81f" translate="yes" xml:space="preserve">
          <source>An engine instance.</source>
          <target state="translated">エンジンのインスタンス。</target>
        </trans-unit>
        <trans-unit id="5c12b0fcbf2f75e8c43db741b03984a0468e7065" translate="yes" xml:space="preserve">
          <source>An entry in the Ember router (&lt;code&gt;/app/router.js&lt;/code&gt;), which maps between our route name and a specific URI</source>
          <target state="translated">Emberルーター（ &lt;code&gt;/app/router.js&lt;/code&gt; ）のエントリ。これは、ルート名と特定のURIの間でマッピングされます</target>
        </trans-unit>
        <trans-unit id="9a58bf8a890e6bbec14734c7fd86bd9ac0f0c1f9" translate="yes" xml:space="preserve">
          <source>An entry in the application's router (located in &lt;code&gt;app/router.js&lt;/code&gt;).</source>
          <target state="translated">アプリケーションのルーターのエントリ（ &lt;code&gt;app/router.js&lt;/code&gt; にあります）。</target>
        </trans-unit>
        <trans-unit id="b565f8e5e3cdc9e58b5e0baabeea00d8be83e64b" translate="yes" xml:space="preserve">
          <source>An event handler takes a function as its second argument. When there are no arguments to the function, you can pass it directly, just like in JavaScript. Otherwise, you can build a function inline by using the &lt;code&gt;fn&lt;/code&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565168f03af98242da9412c8a3b9f2424ed1c113" translate="yes" xml:space="preserve">
          <source>An event object will be passed as the argument to the event handler method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90a6d1a7f3af0170568124207d8fe96a4cf9503" translate="yes" xml:space="preserve">
          <source>An example may help here: Let's say a user clicks two buttons, one after another and both load data from different servers. They take different times to respond.</source>
          <target state="translated">ここでは例が役に立つかもしれません。ユーザーが2つのボタンを次々とクリックし、両方とも異なるサーバーからデータを読み込んだとします。応答するまでにかかる時間が異なります。</target>
        </trans-unit>
        <trans-unit id="2451a04315b1c74c5afabdc5516cb2823698620f" translate="yes" xml:space="preserve">
          <source>An example of ordering initializers, we create an initializer named &lt;code&gt;first&lt;/code&gt;:</source>
          <target state="translated">初期化子の順序付けの例として、 &lt;code&gt;first&lt;/code&gt; という名前の初期化子を作成します。</target>
        </trans-unit>
        <trans-unit id="f7fd1537334865abb1ac63354a604b5cb0c99abf" translate="yes" xml:space="preserve">
          <source>An example of providing a session object to all controllers:</source>
          <target state="translated">すべてのコントローラにセッションオブジェクトを提供する例です。</target>
        </trans-unit>
        <trans-unit id="fa7f52aa1b03dcc4378de659015523d44d1a571b" translate="yes" xml:space="preserve">
          <source>An example of registering a controller with a non-standard name:</source>
          <target state="translated">標準以外の名前でコントローラを登録する例です。</target>
        </trans-unit>
        <trans-unit id="9c172c992da769bfd8273ffa63f0953f84dc83b5" translate="yes" xml:space="preserve">
          <source>An example of some of the options you can configure: &lt;a href=&quot;http://eslint.org/docs/rules/&quot;&gt;ESLint&lt;/a&gt;&lt;a href=&quot;http://jshint.com/docs/options/&quot;&gt;JSlint&lt;/a&gt;</source>
          <target state="translated">構成できるオプションの例：&lt;a href=&quot;http://eslint.org/docs/rules/&quot;&gt;ESLint &lt;/a&gt;&lt;a href=&quot;http://jshint.com/docs/options/&quot;&gt;JSlint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9976c8abcf03ae85cfba8fcdc9e6e5d66a8621e3" translate="yes" xml:space="preserve">
          <source>An example of the internals</source>
          <target state="translated">内部構造の一例</target>
        </trans-unit>
        <trans-unit id="0b071b91906b2689dd25d0849d30729ed7b9644c" translate="yes" xml:space="preserve">
          <source>An example of this scenario in action is a profile editor component. As you are editing one user, and the user attribute is changed, you can use &lt;code&gt;didUpdateAttrs&lt;/code&gt; to clear any error state that was built up from editing the previous user.</source>
          <target state="translated">このシナリオの例は、プロファイルエディタコンポーネントです。1人のユーザーを編集していて、ユーザー属性が変更されているため、 &lt;code&gt;didUpdateAttrs&lt;/code&gt; を使用して、前のユーザーの編集から構築されたエラー状態をクリアできます。</target>
        </trans-unit>
        <trans-unit id="5a019624ad0e8c382a95c9a56ab5a27f3fa03376" translate="yes" xml:space="preserve">
          <source>An example real-world use case is implementing timeouts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fd4c1b5f79277887b9af3301a467a5a1810dd6" translate="yes" xml:space="preserve">
          <source>An example usage of this method is re-querying the server for the latest information using the same parameters as when the route was first entered.</source>
          <target state="translated">この方法の使用例としては、ルートを最初に入力したときと同じパラメータを使用して、最新の情報をサーバに再問い合わせする方法があります。</target>
        </trans-unit>
        <trans-unit id="a4ea86d5180bf384ebb676f2abebaee5f42c159f" translate="yes" xml:space="preserve">
          <source>An example use case would be to detect if the user has entered a route for a specific model that does not exist. For example:</source>
          <target state="translated">使用例としては、ユーザーが存在しない特定のモデルのルートを入力したかどうかを検出することが挙げられます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="5441cf6ba6543e259ec5e71bc7109f11c26b46b9" translate="yes" xml:space="preserve">
          <source>An example use case would be to redirect the user to a log in route if a request is unauthorized:</source>
          <target state="translated">使用例としては、リクエストが許可されていない場合にログインルートにリダイレクトすることが考えられます。</target>
        </trans-unit>
        <trans-unit id="efe097bb10a2f31742bb7369946ae5bef9e910dc" translate="yes" xml:space="preserve">
          <source>An example use case would be to redirect the user to a login route if a request is unauthorized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a16fd76648c5969d4f7924c3292d90decadb74" translate="yes" xml:space="preserve">
          <source>An example use case would be to warn the user to check their internet connection if an adapter operation has timed out:</source>
          <target state="translated">使用例としては、アダプタの操作がタイムアウトした場合に、インターネット接続を確認するようにユーザーに警告することが挙げられます。</target>
        </trans-unit>
        <trans-unit id="40a990dc842a897e946e5ebc92c2a2fb7bb24729" translate="yes" xml:space="preserve">
          <source>An honorable mention to Neovim, a hyper-extensible Vim-based text editor with a range of ember extensions. You'll want to remove any linter / completion manager you currently have installed (or disable them for &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.ts&lt;/code&gt; or &lt;code&gt;.hbs&lt;/code&gt; files), and follow the install guides for the following packages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053593634953b29a961890378abe6d4ebd0d43fe" translate="yes" xml:space="preserve">
          <source>An important note: &lt;code&gt;RSVP.hash&lt;/code&gt; is intended for plain JavaScript objects that are just a set of keys and values. &lt;code&gt;RSVP.hash&lt;/code&gt; will NOT preserve prototype chains.</source>
          <target state="translated">重要な注意： &lt;code&gt;RSVP.hash&lt;/code&gt; は、単なるキーと値のセットであるプレーンなJavaScriptオブジェクトを対象としています。 &lt;code&gt;RSVP.hash&lt;/code&gt; はプロトタイプチェーンを保持しません。</target>
        </trans-unit>
        <trans-unit id="9a3e26d24bc233ea862be6868f841a9990b7ffb8" translate="yes" xml:space="preserve">
          <source>An important note: &lt;code&gt;RSVP.hashSettled&lt;/code&gt; is intended for plain JavaScript objects that are just a set of keys and values. &lt;code&gt;RSVP.hashSettled&lt;/code&gt; will NOT preserve prototype chains.</source>
          <target state="translated">重要な注意： &lt;code&gt;RSVP.hashSettled&lt;/code&gt; は、単なるキーと値のセットであるプレーンなJavaScriptオブジェクトを対象としています。 &lt;code&gt;RSVP.hashSettled&lt;/code&gt; はプロトタイプチェーンを保持しません。</target>
        </trans-unit>
        <trans-unit id="e41e26772b5317538ad716acbd80baf24b49b4c0" translate="yes" xml:space="preserve">
          <source>An important note: &lt;code&gt;hash&lt;/code&gt; is intended for plain JavaScript objects that are just a set of keys and values. &lt;code&gt;hash&lt;/code&gt; will NOT preserve prototype chains.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5686560984b8de66c98919292e042c711c8d10" translate="yes" xml:space="preserve">
          <source>An important note: &lt;code&gt;hashSettled&lt;/code&gt; is intended for plain JavaScript objects that are just a set of keys and values. &lt;code&gt;hashSettled&lt;/code&gt; will NOT preserve prototype chains.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da72e9ee57598df3d953627dc3016f9052a9342" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;Application&lt;/code&gt; is the starting point for every Ember application. It instantiates, initializes and coordinates the objects that make up your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f4ef225775e32cbb05ad354ffda0cbce66f59f" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;Ember.Application&lt;/code&gt; is the starting point for every Ember application. It helps to instantiate, initialize and coordinate the many objects that make up your app.</source>
          <target state="translated">&lt;code&gt;Ember.Application&lt;/code&gt; のインスタンスは、すべてのEmberアプリケーションの開始点です。アプリを構成する多くのオブジェクトをインスタンス化、初期化、調整するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d2389c217e67fa49543428f4121e5a3895c6210e" translate="yes" xml:space="preserve">
          <source>An instantiated &lt;code&gt;Model&lt;/code&gt; is referred to as a &lt;code&gt;record&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3153e3c65cd1fb3412d51bd91b8f730d9b3fdbb" translate="yes" xml:space="preserve">
          <source>An item is added to the &lt;code&gt;todos&lt;/code&gt; array.</source>
          <target state="translated">アイテムが &lt;code&gt;todos&lt;/code&gt; 配列に追加されます。</target>
        </trans-unit>
        <trans-unit id="8a385c702881a44cf0bfe43e07e259405c173c6f" translate="yes" xml:space="preserve">
          <source>An item is removed from the &lt;code&gt;todos&lt;/code&gt; array.</source>
          <target state="translated">アイテムが &lt;code&gt;todos&lt;/code&gt; 配列から削除されます。</target>
        </trans-unit>
        <trans-unit id="e77b109133f483882d852df1ac18105151423dee" translate="yes" xml:space="preserve">
          <source>An object instance.</source>
          <target state="translated">オブジェクトのインスタンス。</target>
        </trans-unit>
        <trans-unit id="2bc5157ce7d5d52f47e0dd7999ba37bc76cad2e2" translate="yes" xml:space="preserve">
          <source>An object that can be used to pass a unique `id` for this warning. The `id` can be used by Ember debugging tools to change the behavior (raise, log, or silence) for that specific warning. The `id` should be namespaced by dots, e.g. &quot;ember-debug.feature-flag-with-features-stripped&quot;</source>
          <target state="translated">この警告に対して一意の `id` を渡すために使用できるオブジェクト。この `id` は、Ember のデバッグツールが特定の警告に対する動作 (警告の発生、ログ、沈黙)を変更するために使うことができます。id` はドットで名前を区切ってください。</target>
        </trans-unit>
        <trans-unit id="179502adbd250c5f946552b0e15aec102a262e09" translate="yes" xml:space="preserve">
          <source>An object with an owner.</source>
          <target state="translated">オーナーを持つオブジェクト。</target>
        </trans-unit>
        <trans-unit id="d1ac5cfeeafef69c45bf9b57a3215ee36cbc969f" translate="yes" xml:space="preserve">
          <source>An object with methods for accessing information about the type, attributes and relationships of the primary type associated with the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d355e4a637ec26fe9ad11ba1f1279d9d68495b" translate="yes" xml:space="preserve">
          <source>An object's keys will be listed in the same order as the array returned from calling &lt;code&gt;Object.keys&lt;/code&gt; on that object. If you want a different sort order, you should use &lt;code&gt;Object.keys&lt;/code&gt; to get an array, sort that array with the built-in JavaScript tools, and use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each-in&quot;&gt;&lt;code&gt;{{#each}}&lt;/code&gt;&lt;/a&gt; helper instead.</source>
          <target state="translated">オブジェクトのキーは、そのオブジェクトの &lt;code&gt;Object.keys&lt;/code&gt; の呼び出しから返される配列と同じ順序でリストされます。別の並べ替え順序が必要な場合は、 &lt;code&gt;Object.keys&lt;/code&gt; を使用して配列を取得し、組み込みのJavaScriptツールでその配列を並べ替え、代わりに&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each-in&quot;&gt; &lt;code&gt;{{#each}}&lt;/code&gt; &lt;/a&gt;ヘルパーを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="80d4108f227752b8367ec493d7779bc4eb094232" translate="yes" xml:space="preserve">
          <source>An object's keys will be listed in the same order as the array returned from calling &lt;code&gt;Object.keys&lt;/code&gt; on that object. If you want a different sort order, you should use &lt;code&gt;Object.keys&lt;/code&gt; to get an array, sort that array with the built-in JavaScript tools, and use the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#each&quot;&gt;&lt;code&gt;{{#each}}&lt;/code&gt;&lt;/a&gt; helper instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2260b59f8a4149ec98c09e5d99e706e2a95c3711" translate="yes" xml:space="preserve">
          <source>An open standard for sound, interoperable JavaScript promises</source>
          <target state="translated">サウンド、相互運用性の高い JavaScript のオープンスタンダードが約束されています。</target>
        </trans-unit>
        <trans-unit id="259617466814dab7ee239a6cb08ccd0c6cf63ad9" translate="yes" xml:space="preserve">
          <source>An optional boolean. If falsy, the warning will be displayed.</source>
          <target state="translated">オプションのブール値。虚偽の場合、警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="27fa9677b27a4b0ee61247242b260ea08da55285" translate="yes" xml:space="preserve">
          <source>An optional function that produces args</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d4d0e2726f270a0b0e1eb3d24d277ebb5e98e4" translate="yes" xml:space="preserve">
          <source>An optional label. This is useful for tooling.</source>
          <target state="translated">オプションのラベル。ツーリングに便利です。</target>
        </trans-unit>
        <trans-unit id="1ade0e9c435f407193894ad24428f419ab10cca7" translate="yes" xml:space="preserve">
          <source>An optional model argument can be used for routes whose paths contain dynamic segments. This argument will become the model context of the linked route:</source>
          <target state="translated">オプションのモデル引数は、パスにダイナミックセグメントが含まれるルートに使用できます。この引数はリンクされたルートのモデルコンテキストになります。</target>
        </trans-unit>
        <trans-unit id="5578f6c7adb66c4e71c478fd4f253de05d686cc8" translate="yes" xml:space="preserve">
          <source>An optional paramter that if set to `true` causes the promise to fulfill with the callback's success arguments as an array. This is useful if the node function has multiple success paramters. If you set this paramter to an array with names, the promise will fulfill with a hash with these names as keys and the success parameters as values.</source>
          <target state="translated">オプションのパラメータで、`true` に設定すると、コールバックの成功引数を配列で指定して約束を履行させます。これは、ノード関数が複数の成功パラメータを持つ場合に便利です。このパラメータを名前を含む配列に設定すると、これらの名前をキー、成功パラメータを値としたハッシュでプロミスを成立させます。</target>
        </trans-unit>
        <trans-unit id="29c842c186926290569207c94c1496fbea50ae71" translate="yes" xml:space="preserve">
          <source>An optional string for identifying the promise.</source>
          <target state="translated">プロミスを識別するためのオプションの文字列。</target>
        </trans-unit>
        <trans-unit id="33b5c7ed975b395b86706ece50e898ec81ef5be8" translate="yes" xml:space="preserve">
          <source>An optional target can be passed in as the 2nd argument that will be set as the &quot;this&quot; for the callback. This is a good way to give your function access to the object triggering the event. When the target parameter is used the callback becomes the third argument.</source>
          <target state="translated">オプションのターゲットを第2引数として渡すことができ、コールバックの &quot;this &quot;として設定されます。これは、イベントのトリガーとなるオブジェクトへのアクセスを関数に与える良い方法です。target パラメータを使用すると、コールバックは第三引数になります。</target>
        </trans-unit>
        <trans-unit id="629fe19ce0fbe90b07d4d86ab6b8fbd3201252d8" translate="yes" xml:space="preserve">
          <source>An optional target can be passed in as the 2nd argument that will be set as the &quot;this&quot; for the callback. This is a good way to give your function access to the object triggering the event. When the target parameter is used the callback method becomes the third argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad56b83e88617534d6efc0455f3cba813e7c5b29" translate="yes" xml:space="preserve">
          <source>An options hash with a &lt;code&gt;queryParams&lt;/code&gt; property may be provided as the final argument to add query parameters to the destination URL.</source>
          <target state="translated">&lt;code&gt;queryParams&lt;/code&gt; プロパティを持つオプションハッシュは、宛先パラメーターにクエリパラメーターを追加する最後の引数として提供されます。</target>
        </trans-unit>
        <trans-unit id="e99bd8851a8c1e21e0899057936304d4f9f5ec02" translate="yes" xml:space="preserve">
          <source>An overridable method called when objects are instantiated. By default, does nothing unless it is overridden during class definition.</source>
          <target state="translated">オブジェクトがインスタンス化されたときに呼び出されるオーバーライド可能なメソッド。デフォルトでは、クラス定義時にオーバーライドされない限り何もしません。</target>
        </trans-unit>
        <trans-unit id="1a185885182ba5b812ef8fd0d0b7d413f174dd3d" translate="yes" xml:space="preserve">
          <source>An owner object.</source>
          <target state="translated">オーナーオブジェクト。</target>
        </trans-unit>
        <trans-unit id="0eda0fc1a49d4da33d8de7ed9e252a116506debb" translate="yes" xml:space="preserve">
          <source>Analogous to the &lt;code&gt;loading&lt;/code&gt; event, you could manage the &lt;code&gt;error&lt;/code&gt; event at the application level to avoid writing the same code for multiple routes.</source>
          <target state="translated">&lt;code&gt;loading&lt;/code&gt; イベントと同様に、アプリケーションレベルで &lt;code&gt;error&lt;/code&gt; イベントを管理して、複数のルートに同じコードを記述しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="b021894f7f8f33dda1f7bee7b102509639d55af1" translate="yes" xml:space="preserve">
          <source>Anatomy of an Ember App</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3270f7bfa9cfbfb16e0304d6f3e70d4952490dc0" translate="yes" xml:space="preserve">
          <source>And Ember makes use of our new helper function to replace the content inside the &lt;code&gt;{{ }}&lt;/code&gt; with the formatted amount.</source>
          <target state="translated">そしてEmberは、新しいヘルパー関数を使用して、 &lt;code&gt;{{ }}&lt;/code&gt; 内のコンテンツをフォーマットされた量に置き換えます。</target>
        </trans-unit>
        <trans-unit id="a606b6661260a7a59324c809666dc5fe86f26a95" translate="yes" xml:space="preserve">
          <source>And calling &lt;code&gt;modelFor&lt;/code&gt; returned the result of the &lt;code&gt;model&lt;/code&gt; hook.</source>
          <target state="translated">そして、 &lt;code&gt;modelFor&lt;/code&gt; を呼び出すと、 &lt;code&gt;model&lt;/code&gt; フックの結果が返されます。</target>
        </trans-unit>
        <trans-unit id="d930c4217f924dfa7432e8ab0f217c1d57139a50" translate="yes" xml:space="preserve">
          <source>And can then be detected in an application and used to send the user to an &lt;code&gt;under-maintenance&lt;/code&gt; route:</source>
          <target state="translated">アプリケーションで検出され、 &lt;code&gt;under-maintenance&lt;/code&gt; ルートにユーザーを送信するために使用できます。</target>
        </trans-unit>
        <trans-unit id="f808f9f869b6b3a7f5f8b0cb1aa83e5f8cc1f1ab" translate="yes" xml:space="preserve">
          <source>And here's what our generator prints out:</source>
          <target state="translated">発電機がプリントアウトしたのはこれだ</target>
        </trans-unit>
        <trans-unit id="def5b530cd508c093916372400b1e3caa792e7ae" translate="yes" xml:space="preserve">
          <source>And if the adapter for the &lt;code&gt;User&lt;/code&gt; model defines a &lt;code&gt;queryRecord()&lt;/code&gt; method that targets that endpoint:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48305643331cfa0bcc55d0f34c5d29663ab786a6" translate="yes" xml:space="preserve">
          <source>And in that component, we can apply the class to the paragraph using &lt;code&gt;...attributes&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3e2f83e5ca47a26c3d390b8788c344f1177ca8" translate="yes" xml:space="preserve">
          <source>And in the component class, we'll add the &lt;code&gt;addMessage&lt;/code&gt; action. This action will create the new message from the text that the &lt;code&gt;&amp;lt;NewMessageInput&amp;gt;&lt;/code&gt; component gives us, and push it into the messages array. In order for the messages array to react to that change, we'll also need to convert it into an &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/EmberArray&quot;&gt;&lt;code&gt;EmberArray&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;EmberArray&lt;/code&gt; provides special methods that tell Ember when changes occur to the array itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6f1a793e66022cf16ad811eeaac6a0fae8ad16" translate="yes" xml:space="preserve">
          <source>And include it in our &lt;code&gt;application.hbs&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e344023512079b32b7b9912bb0077c2b75831af0" translate="yes" xml:space="preserve">
          <source>And it returns a Cache instance that contains the most recent value of the helper. You can access the helper using &lt;code&gt;getValue()&lt;/code&gt; like any other cache. The cache is also destroyable, and using the &lt;code&gt;destroy()&lt;/code&gt; function on it will cause the helper to be torn down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ccfb227e02188d1a6099f47dec4a2899ab2cb3" translate="yes" xml:space="preserve">
          <source>And our API might setup these relationships like so:</source>
          <target state="translated">そして、私たちのAPIはこのようなリレーションシップを設定するかもしれません。</target>
        </trans-unit>
        <trans-unit id="858587f15e1784f314286bdd2d9574a8f10a0682" translate="yes" xml:space="preserve">
          <source>And our test might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3b5d4c652aa41a2bf3cb0e322c393e12452e25" translate="yes" xml:space="preserve">
          <source>And putting it after:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093ac7197a3ab6824a8db25169552604bf3185ba" translate="yes" xml:space="preserve">
          <source>And so we need to change it to look like:</source>
          <target state="translated">ということで、見た目を変える必要があります。</target>
        </trans-unit>
        <trans-unit id="56cfc8651344f1ea80613714a0d182bc8475717d" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3b783be1e07defa8d5fdd993d1c5f973e18323" translate="yes" xml:space="preserve">
          <source>And the content passed in between the brackets of the component would be rendered in the same place as the &lt;code&gt;{{yield}}&lt;/code&gt; within it, replacing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bf132516ee160b661225a174fe8ef6b99ab116" translate="yes" xml:space="preserve">
          <source>And the following application code:</source>
          <target state="translated">そして、以下のようなアプリケーションコード。</target>
        </trans-unit>
        <trans-unit id="bb7c832f55b6bf0ad54136a9b9a4c99e15beebd3" translate="yes" xml:space="preserve">
          <source>And the following component template:</source>
          <target state="translated">そして、以下のようなコンポーネントテンプレート。</target>
        </trans-unit>
        <trans-unit id="bfd57da9ac459cb354e27395ee58a9b5ea9450b4" translate="yes" xml:space="preserve">
          <source>And then add the &lt;code&gt;{{outlet}}&lt;/code&gt; helper to your template where you want the nested template to display:</source>
          <target state="translated">次に、ネストされたテンプレートを表示するテンプレートに &lt;code&gt;{{outlet}}&lt;/code&gt; ヘルパーを追加します。</target>
        </trans-unit>
        <trans-unit id="f11afecc22f8319d64744b13769de65d8b8e7542" translate="yes" xml:space="preserve">
          <source>And then let's update our new template (&lt;code&gt;/app/templates/rentals.hbs&lt;/code&gt;) with some initial content. We'll come back to this page in a bit to add in the actual rental properties.</source>
          <target state="translated">次に、新しいテンプレート（ &lt;code&gt;/app/templates/rentals.hbs&lt;/code&gt; ）をいくつかの初期コンテンツで更新します。このページに戻って、実際の賃貸物件を追加します。</target>
        </trans-unit>
        <trans-unit id="7de96cbb44a1491ee841ac09e0486623ee14a153" translate="yes" xml:space="preserve">
          <source>And then use it in the component's template:</source>
          <target state="translated">そして、それをコンポーネントのテンプレートで使用します。</target>
        </trans-unit>
        <trans-unit id="93bb7cea089a59a66a8c88a8ec0b2a43d54d618b" translate="yes" xml:space="preserve">
          <source>And two named arguments:</source>
          <target state="translated">そして、2つの名前のついた引数。</target>
        </trans-unit>
        <trans-unit id="22187ae87c41840c4ba6a0cc6a831932b5588f5c" translate="yes" xml:space="preserve">
          <source>And we're all done! If we try to click the plus, minus, or double buttons in any order, we can watch as these three outputs stay up-to-date perfectly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14ab158b4527060b12f9265e1c0a0852d58cc34" translate="yes" xml:space="preserve">
          <source>And without block params:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c291e4ba7a0d7d9d4db7adb6563d3f90f88340" translate="yes" xml:space="preserve">
          <source>And you attempted to save a record that did not validate on the backend:</source>
          <target state="translated">あなたはバックエンドで検証されないレコードを保存しようとしました。</target>
        </trans-unit>
        <trans-unit id="0f667d37fa5f016a26f06a9872a7f2160c41fbaa" translate="yes" xml:space="preserve">
          <source>And you can optionally override the following methods:</source>
          <target state="translated">そして、オプションで以下のメソッドをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="fbb92e00845dc889a1c690c9730efd2d0c510419" translate="yes" xml:space="preserve">
          <source>Angle Bracket Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad055c150c2fec190996fe9d3d2d911b44e7939c" translate="yes" xml:space="preserve">
          <source>Angle Brackets have a number of benefits:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be01cf55d15a848b8d1511a18b96dff878bd9334" translate="yes" xml:space="preserve">
          <source>Angle bracket syntax works for invoking components of any type, whether they are classic components, Glimmer components, or any other type of component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9950e90df2c4c70fa95d66b36d973c47cc5723e3" translate="yes" xml:space="preserve">
          <source>Anonymous AMD JavaScript modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c53a5609268d8cc3b657e64edfd02e22ffa9dc" translate="yes" xml:space="preserve">
          <source>Another common task to perform on an enumerable is to take the enumerable as input, and return an Array after filtering it based on some criteria.</source>
          <target state="translated">また、列挙可能要素に対して実行するもう一つの一般的なタスクは、入力として列挙可能要素を受け取り、いくつかの基準に基づいてフィルタリングした後に配列を返すことです。</target>
        </trans-unit>
        <trans-unit id="d52db59bec7e29f9ab90f3fbd743f54f3368a885" translate="yes" xml:space="preserve">
          <source>Another difference is that unlike &lt;code&gt;_super()&lt;/code&gt;, if the method doesn't exist on the parent class then an error will be thrown. In most cases, the method should exist or not, and you shouldn't need to guard it one way or the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8461c31aaae42ec56856084e31327466738e04d" translate="yes" xml:space="preserve">
          <source>Another use case for pushing in records is if your application has a streaming connection to a backend. If a record is created or modified, you want to update the UI immediately.</source>
          <target state="translated">レコードをプッシュインするもう一つの使用例は、アプリケーションがバックエンドにストリーミング接続している場合です。レコードが作成されたり変更されたりした場合、すぐにUIを更新したい場合です。</target>
        </trans-unit>
        <trans-unit id="1068c7d1ed158eed896ddf549ac83db6a4145848" translate="yes" xml:space="preserve">
          <source>Another way that a tracked property could be updated is asynchronously, if you're sending a request to the server. For instance, maybe we would want to load the user's preferred language:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399d18ba6bf9bfa67cb5837c23ceeeee5ffa2afc" translate="yes" xml:space="preserve">
          <source>Another way to inject a service is to provide the name of the service as an argument to the decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea03de2438b80b08c0d2d6fd50c0f66b720e4691" translate="yes" xml:space="preserve">
          <source>Another way to inject a service is to provide the name of the service as the argument.</source>
          <target state="translated">サービスを注入するもう一つの方法は、引数にサービス名を与えることです。</target>
        </trans-unit>
        <trans-unit id="e550138b92434dcdf6b44555879aa1edcad0aa02" translate="yes" xml:space="preserve">
          <source>Another way to preserve native event behaviors and use an action, is to assign a (closure) action to an inline event handler. Consider the template below which includes an &lt;code&gt;onclick&lt;/code&gt; handler on a &lt;code&gt;button&lt;/code&gt; element:</source>
          <target state="translated">ネイティブイベントの動作を保持してアクションを使用する別の方法は、インラインイベントハンドラーに（クロージャー）アクションを割り当てることです。 &lt;code&gt;button&lt;/code&gt; 要素に &lt;code&gt;onclick&lt;/code&gt; ハンドラーを含む以下のテンプレートを検討してください。</target>
        </trans-unit>
        <trans-unit id="7cb070bee6806669fac22f1d37552f007d2c7985" translate="yes" xml:space="preserve">
          <source>Another way to say this is that the &lt;code&gt;value&lt;/code&gt; property of &lt;code&gt;input&lt;/code&gt; is &lt;a href=&quot;https://guides.emberjs.com/object-model/bindings/&quot;&gt;&lt;strong&gt;bound&lt;/strong&gt;&lt;/a&gt; to the &lt;code&gt;value&lt;/code&gt; property of the component. If the property changes, either by the user typing in the input field, or by assigning a new value to it in our program, the new value of the property is present in both the rendered web page and in the code.</source>
          <target state="translated">これを言うための別の方法は、ということです &lt;code&gt;value&lt;/code&gt; のプロパティ &lt;code&gt;input&lt;/code&gt; された&lt;a href=&quot;https://guides.emberjs.com/object-model/bindings/&quot;&gt;&lt;strong&gt;バインド&lt;/strong&gt;&lt;/a&gt;に &lt;code&gt;value&lt;/code&gt; コンポーネントのプロパティ。ユーザーが入力フィールドに入力するか、プログラムで新しい値を割り当てることによってプロパティが変更された場合、プロパティの新しい値は、レンダリングされたWebページとコードの両方に存在します。</target>
        </trans-unit>
        <trans-unit id="322444d3bb52c341f429ca0454f292dc242f315b" translate="yes" xml:space="preserve">
          <source>Any</source>
          <target state="translated">Any</target>
        </trans-unit>
        <trans-unit id="61705f9b76ff585c3fc229ef27f86a4bd443f9b1" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;belongsTo&lt;/code&gt; relationships in the JSON representation should be the dasherized version of the property's name. For example, if you have a model:</source>
          <target state="translated">どれ &lt;code&gt;belongsTo&lt;/code&gt; のの JSON表現における関係は、プロパティの名前のdasherizedバージョンである必要があります。たとえば、モデルがある場合：</target>
        </trans-unit>
        <trans-unit id="6c59b3640b4d3b9b99e2c131e33c0fdea90e9d34" translate="yes" xml:space="preserve">
          <source>Any adapter in &lt;code&gt;app/adapters/&lt;/code&gt; can be looked up by &lt;code&gt;name&lt;/code&gt; using &lt;code&gt;store.adapterFor(name)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa59a9bfdd546f74777b72ed6d3a1e7e76147ff" translate="yes" xml:space="preserve">
          <source>Any additional arguments you wish to pass to the method.</source>
          <target state="translated">メソッドに渡す追加の引数。</target>
        </trans-unit>
        <trans-unit id="dc7cbe307affe607de815c79b0d58e0d2d610aaf" translate="yes" xml:space="preserve">
          <source>Any addon that will provide UI elements to the application should be evaluated for accessibility before use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d93ab8dd51e3f38d20c35d5f03147f74fccc7b" translate="yes" xml:space="preserve">
          <source>Any callbacks registered with &lt;code&gt;onInjectHelpers&lt;/code&gt; will be called once the helpers have been injected.</source>
          <target state="translated">&lt;code&gt;onInjectHelpers&lt;/code&gt; で登録されたコールバックは、ヘルパーが注入されると呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a072dbbde5d03120c8988ec1ff83fbcc8adb2d48" translate="yes" xml:space="preserve">
          <source>Any instances created via the factory's &lt;code&gt;.create()&lt;/code&gt; method &lt;em&gt;must&lt;/em&gt; be destroyed manually by the caller of &lt;code&gt;.create()&lt;/code&gt;. Typically, this is done during the creating objects own &lt;code&gt;destroy&lt;/code&gt; or &lt;code&gt;willDestroy&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6784962c5c85317454cd4e07dd7e38080869c4" translate="yes" xml:space="preserve">
          <source>Any object that has this mixin applied can be used in observer operations. That includes &lt;code&gt;Ember.Object&lt;/code&gt; and most objects you will interact with as you write your Ember application.</source>
          <target state="translated">このミックスインが適用されているオブジェクトは、オブザーバー操作で使用できます。これには、 &lt;code&gt;Ember.Object&lt;/code&gt; と、Emberアプリケーションを作成するときに操作するほとんどのオブジェクトが含まれます。</target>
        </trans-unit>
        <trans-unit id="ee3a012d09f7745a765f1f81efbddddba645caa4" translate="yes" xml:space="preserve">
          <source>Any object that has this mixin applied can be used in observer operations. That includes &lt;code&gt;EmberObject&lt;/code&gt; and most objects you will interact with as you write your Ember application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1cf3a8104333652f9a4172ac27fadbfcd65150a" translate="yes" xml:space="preserve">
          <source>Any other status codes will be treated as an &quot;adapter error&quot;. The request promise will be rejected, similarly to the &quot;invalid&quot; case, but with an instance of &lt;code&gt;AdapterError&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c13cc317849a06291912ab3d658733cd2683f03" translate="yes" xml:space="preserve">
          <source>Any other status codes will be treated as an &quot;adapter error&quot;. The request promise will be rejected, similarly to the &quot;invalid&quot; case, but with an instance of &lt;code&gt;DS.AdapterError&lt;/code&gt; instead.</source>
          <target state="translated">その他のステータスコードは、「アダプタエラー」として扱われます。「無効な」ケースと同様に、要求プロミスは拒否されますが、代わりに &lt;code&gt;DS.AdapterError&lt;/code&gt; のインスタンスが使用されます。</target>
        </trans-unit>
        <trans-unit id="bf1406d398e033ac639a1464581a15a5e25635d4" translate="yes" xml:space="preserve">
          <source>Any other status codes will be treated as an adapter error. The request promise will be rejected, similarly to the invalid case, but with an instance of &lt;code&gt;AdapterError&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6df25135550e72ebbfba360e5b60bb4aa2e8483" translate="yes" xml:space="preserve">
          <source>Any other status codes will be treated as an adapter error. The request promise will be rejected, similarly to the invalid case, but with an instance of &lt;code&gt;DS.AdapterError&lt;/code&gt; instead.</source>
          <target state="translated">その他のステータスコードは、アダプタエラーとして処理されます。無効なケースと同様に、要求プロミスは拒否されますが、代わりに &lt;code&gt;DS.AdapterError&lt;/code&gt; のインスタンスが使用されます。</target>
        </trans-unit>
        <trans-unit id="d902258615b966c9b7918a4dabf813ec90db7e42" translate="yes" xml:space="preserve">
          <source>Any serializer in &lt;code&gt;app/serializers/&lt;/code&gt; can be looked up by &lt;code&gt;name&lt;/code&gt; using &lt;code&gt;store.serializerFor(name)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964c6055e03db34dbdbce82677a4153ec608b92b" translate="yes" xml:space="preserve">
          <source>Any time the &quot;name&quot; property on the component changes, the DOM will be updated.</source>
          <target state="translated">コンポーネントの &quot;name&quot; プロパティが変更されるたびに DOM が更新されます。</target>
        </trans-unit>
        <trans-unit id="32134b0e43d18da466539ef39c3442aa4a2e7c83" translate="yes" xml:space="preserve">
          <source>Any | Promise&amp;lt;any&amp;gt;</source>
          <target state="translated">いずれか 約束&amp;lt;どれでも&amp;gt;</target>
        </trans-unit>
        <trans-unit id="0b5958b0f53cb499388dd9ee04a106a30b02c5d1" translate="yes" xml:space="preserve">
          <source>Apache</source>
          <target state="translated">Apache</target>
        </trans-unit>
        <trans-unit id="b291beb8793f4f3308c463951165dad483715a6c" translate="yes" xml:space="preserve">
          <source>Application</source>
          <target state="translated">Application</target>
        </trans-unit>
        <trans-unit id="c84b28805bf79f21bca3da75574bdcfebfd9553b" translate="yes" xml:space="preserve">
          <source>Application Considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db44f1a1d5a0bed952609e71cb45a89b07826b89" translate="yes" xml:space="preserve">
          <source>Application Initializers</source>
          <target state="translated">アプリケーションイニシャライザ</target>
        </trans-unit>
        <trans-unit id="28077dc5dca8cfd41ec7bf28339c995ce45280cf" translate="yes" xml:space="preserve">
          <source>Application Instance Initializers</source>
          <target state="translated">アプリケーションインスタンスイニシャライザ</target>
        </trans-unit>
        <trans-unit id="41cd6078ee3f41ce5693a80f97b81ee8bc05d2b3" translate="yes" xml:space="preserve">
          <source>Application Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fbb2c871fdfdcb61f55fa6840fac8c9796223c" translate="yes" xml:space="preserve">
          <source>Application initializers are run as your application boots, and provide the primary means to configure &lt;a href=&quot;../dependency-injection&quot;&gt;dependency injections&lt;/a&gt; in your application.</source>
          <target state="translated">アプリケーション初期化子は、アプリケーションの起動時に実行され、アプリケーションで&lt;a href=&quot;../dependency-injection&quot;&gt;依存性注入&lt;/a&gt;を構成する主要な手段を提供します。</target>
        </trans-unit>
        <trans-unit id="c1ae28ca7909073017188af82529c637aece67b6" translate="yes" xml:space="preserve">
          <source>Application initializers can be created with Ember CLI's &lt;code&gt;initializer&lt;/code&gt; generator:</source>
          <target state="translated">アプリケーション初期化子は、Ember CLIの &lt;code&gt;initializer&lt;/code&gt; ジェネレーターで作成できます。</target>
        </trans-unit>
        <trans-unit id="440287943b422ada5a57c6872c80bdf5f6e2f6bf" translate="yes" xml:space="preserve">
          <source>Application initializers can be used for a variety of reasons including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0327b249608fb10533fa4bc5c32423fb329e7456" translate="yes" xml:space="preserve">
          <source>Application instance initializers are run as an application instance is loaded. They provide a way to configure the initial state of your application, as well as to set up dependency injections that are local to the application instance (e.g. A/B testing configurations).</source>
          <target state="translated">アプリケーションインスタンスのイニシャライザは、アプリケーションインスタンスがロードされると同時に実行されます。これは、アプリケーションの初期状態を設定したり、アプリケーションインスタンスにローカルな依存性注入を設定したりする方法を提供します (例:A/B テストの設定)。</target>
        </trans-unit>
        <trans-unit id="bd764e59f8aa96def75203a863b05b52311f69c0" translate="yes" xml:space="preserve">
          <source>Application instance initializers can be created with Ember CLI's &lt;code&gt;instance-initializer&lt;/code&gt; generator:</source>
          <target state="translated">アプリケーションインスタンス初期化子は、Ember CLIの &lt;code&gt;instance-initializer&lt;/code&gt; ジェネレーターで作成できます。</target>
        </trans-unit>
        <trans-unit id="f43feef2b58cdfeed8d85c69f39aeaa788357d99" translate="yes" xml:space="preserve">
          <source>Application is not Detected Without Reload</source>
          <target state="translated">リロードしないとアプリケーションが検出されない</target>
        </trans-unit>
        <trans-unit id="604e339cdd3f3c07c450870cce58cb44984d68bf" translate="yes" xml:space="preserve">
          <source>Application tests (previously known as acceptance tests)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1affc69c98578fb01fd4087754635f88ebfbd2" translate="yes" xml:space="preserve">
          <source>Application tests are slower than unit and rendering tests because they create an instance of the Ember application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648fe13fc82c6051d3bb53145789d54915e9d45f" translate="yes" xml:space="preserve">
          <source>Application tests help you see how well different components interact with each other. For nested or contextual components, you can get by with rendering tests. If components are unrelated, however, application tests may be the only way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573a080ef2363bb5ed2ae5d7c4dbda02e5cb947b" translate="yes" xml:space="preserve">
          <source>ApplicationInstance</source>
          <target state="translated">ApplicationInstance</target>
        </trans-unit>
        <trans-unit id="6151f974f0ae8d7efd8100118eeb0f606e6e512a" translate="yes" xml:space="preserve">
          <source>ApplicationInstance.BootOptions</source>
          <target state="translated">ApplicationInstance.BootOptions</target>
        </trans-unit>
        <trans-unit id="e1f46a19d20b853668d9e13a3d5f5eb836a9cb36" translate="yes" xml:space="preserve">
          <source>Applications and Instances</source>
          <target state="translated">アプリケーションとインスタンス</target>
        </trans-unit>
        <trans-unit id="58b72e59fa1d3f8773afc2294edde2f653d27e9a" translate="yes" xml:space="preserve">
          <source>Applications and application instances each serve a role in Ember's DI implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43322b8c083c52b41ec49152dfdbce1ae6848d05" translate="yes" xml:space="preserve">
          <source>Applications whose API's structure endpoint URLs &lt;em&gt;very close to&lt;/em&gt; or &lt;em&gt;exactly&lt;/em&gt; the &lt;strong&gt;REST&lt;/strong&gt; or &lt;strong&gt;JSON:API&lt;/strong&gt; convention, the &lt;code&gt;@ember-data/adapter&lt;/code&gt; package contains implementations these applications can extend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77cbe978decf7e18ac53e8ff64911f09e83509bc" translate="yes" xml:space="preserve">
          <source>Architecture Overview</source>
          <target state="translated">アーキテクチャの概要</target>
        </trans-unit>
        <trans-unit id="4bc8e2f847bb9ebb4315a87b3fcf3b69861d47bf" translate="yes" xml:space="preserve">
          <source>Are you wondering what the Octane equivalent is for some classic Ember features? Have a look at the &lt;a href=&quot;https://ember-learn.github.io/ember-octane-vs-classic-cheat-sheet/&quot;&gt;cheat sheet&lt;/a&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cbbe460eb0d2e33ef2f69fa66f50d49a830be2" translate="yes" xml:space="preserve">
          <source>Argument Defaults</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="fb3a7abeb9142225b4ee4fbb50f25cf053c3bf3f" translate="yes" xml:space="preserve">
          <source>Arguments always refer to the original value that was passed in, so you don't have to track down confusing code in hooks or computed property definitions that modifies the value of the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6f65ca0bd8caddf93848c7f15dcb21e290e761" translate="yes" xml:space="preserve">
          <source>Arguments are also namespaced on &lt;code&gt;this.args&lt;/code&gt; within Glimmer components, which is an immutable object. This means that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611f09a5ce77eceb72172af01ffa01cee12813fe" translate="yes" xml:space="preserve">
          <source>Arguments passed when using &lt;code&gt;new&lt;/code&gt; will be accessible in the &lt;code&gt;constructor&lt;/code&gt; of the class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b312ee2ba740cc6cf8c66435bc1ab39c75b14a" translate="yes" xml:space="preserve">
          <source>Arguments should match those passed to &lt;code&gt;Ember.addListener&lt;/code&gt;.</source>
          <target state="translated">引数は &lt;code&gt;Ember.addListener&lt;/code&gt; に渡される引数と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="99fa043302210093a135d04cf8a73aa2c0b569e3" translate="yes" xml:space="preserve">
          <source>Arguments should match those passed to &lt;code&gt;addListener&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a55ff69bb1ff3fd2c38215faa9031998bc70e0" translate="yes" xml:space="preserve">
          <source>Arguments, like &lt;code&gt;{{@name}}&lt;/code&gt;, are automatically tracked, so if they change and are used somewhere in your component, the component will update accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="e72896fe1492e71f21a94a64857102dbaaa2693c" translate="yes" xml:space="preserve">
          <source>Array of promises.</source>
          <target state="translated">約束の配列。</target>
        </trans-unit>
        <trans-unit id="c8ae3652fe542bc0967199e29e0acc4616cf7bcb" translate="yes" xml:space="preserve">
          <source>Array&amp;lt;Array&amp;lt;Snapshot&amp;gt;&amp;gt;</source>
          <target state="translated">Array&amp;lt;Array&amp;lt;Snapshot&amp;gt;&amp;gt;</target>
        </trans-unit>
        <trans-unit id="554ec7f9295c25b13a23965968534f530c666139" translate="yes" xml:space="preserve">
          <source>Array&amp;lt;Snapshot&amp;gt;</source>
          <target state="translated">Array&amp;lt;Snapshot&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6bc9c855eef6ffa566a6c76708b7ae43b8ea1d71" translate="yes" xml:space="preserve">
          <source>Array&amp;lt;string&amp;gt;</source>
          <target state="translated">Array&amp;lt;string&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3e3da0e5afcc95be3e15b8063c5fa0302b0266c1" translate="yes" xml:space="preserve">
          <source>Array.[]</source>
          <target state="translated">Array.[]</target>
        </trans-unit>
        <trans-unit id="aba67a4b44f8228cd28b9688b767e7ce828d9382" translate="yes" xml:space="preserve">
          <source>ArrayProxy</source>
          <target state="translated">ArrayProxy</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="08461a5115a2a0f38cef54d472eed75041f3b96f" translate="yes" xml:space="preserve">
          <source>Arrays and objects defined directly on any &lt;code&gt;Ember.Object&lt;/code&gt; are shared across all instances of that class.</source>
          <target state="translated">&lt;code&gt;Ember.Object&lt;/code&gt; で直接定義された配列とオブジェクトは、そのクラスのすべてのインスタンスで共有されます。</target>
        </trans-unit>
        <trans-unit id="5e040cb0b00cdbc7434b067156a33541a49f7887" translate="yes" xml:space="preserve">
          <source>Arrays are another example of a type of object where you can't enumerate every possible value - after all, there are an infinite number of integers (though you &lt;em&gt;may&lt;/em&gt; run out of bits in your computer at some point!). Instead, you can continue to use &lt;code&gt;EmberArray&lt;/code&gt;, which will continue to work with tracking and will cause any dependencies that use it to invalidate correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fca31fb04e58d6c6096ec6d3f367922c2d2c5c" translate="yes" xml:space="preserve">
          <source>Array|Promise</source>
          <target state="translated">Array|Promise</target>
        </trans-unit>
        <trans-unit id="7f7804c4ad6b8ec101018686c9b412921306b2e4" translate="yes" xml:space="preserve">
          <source>As Ember CLI runs, it takes the &lt;code&gt;ember-tutorial&lt;/code&gt; CSS file and puts it in a file called &lt;code&gt;vendor.css&lt;/code&gt;. The &lt;code&gt;vendor.css&lt;/code&gt; file is referenced in &lt;code&gt;app/index.html&lt;/code&gt;, making the styles available at runtime.</source>
          <target state="translated">Ember CLIが実行されると、それは &lt;code&gt;ember-tutorial&lt;/code&gt; CSSファイルを &lt;code&gt;vendor.css&lt;/code&gt; して、それをvendor.cssというファイルに配置します。 &lt;code&gt;vendor.css&lt;/code&gt; のファイルがで参照されている &lt;code&gt;app/index.html&lt;/code&gt; 実行時にスタイルを利用可能にします、。</target>
        </trans-unit>
        <trans-unit id="3addcbfe9779e3c434f4307dffe878d46aed0782" translate="yes" xml:space="preserve">
          <source>As a result of this type injection, all factories of the type &lt;code&gt;route&lt;/code&gt; will be instantiated with the property &lt;code&gt;logger&lt;/code&gt; injected. The value of &lt;code&gt;logger&lt;/code&gt; will come from the factory named &lt;code&gt;logger:main&lt;/code&gt;.</source>
          <target state="translated">このタイプのインジェクションの結果として、 &lt;code&gt;route&lt;/code&gt; タイプのすべてのファクトリは、インジェクションされたプロパティ &lt;code&gt;logger&lt;/code&gt; インスタンス化されます。 &lt;code&gt;logger&lt;/code&gt; の値は、logger &lt;code&gt;logger:main&lt;/code&gt; という名前のファクトリから取得されます。</target>
        </trans-unit>
        <trans-unit id="311ea72dae21bedf22e80bf4e5eb3f57f08f802c" translate="yes" xml:space="preserve">
          <source>As a user looks through our list of rentals, they may want to have some interactive options to help them make a decision. Let's add the ability to toggle the size of the image for each rental. To do this, we'll use a component.</source>
          <target state="translated">ユーザーがレンタルリストに目を通すと、彼らは決定を助けるためにいくつかのインタラクティブなオプションを持っていることを望むかもしれません。各レンタルのために画像のサイズを切り替える機能を追加しましょう。これにはコンポーネントを使います。</target>
        </trans-unit>
        <trans-unit id="122dcca7a8a0de9f8e49a807d3d18e056bffe6f9" translate="yes" xml:space="preserve">
          <source>As an analogy, JSON API is to JavaScript apps and API servers what SQL is to server-side frameworks and databases. Popular frameworks like Ruby on Rails, Laravel, Django, Spring and more work out of the box with many different databases, like MySQL, PostgreSQL, SQL Server, and more.</source>
          <target state="translated">例えとして、JSON API は JavaScript アプリや API サーバーにとって、SQL がサーバーサイドのフレームワークやデータベースにとってのものであるようなものです。Ruby on Rails、Laravel、Django、Springなどの人気のあるフレームワークは、MySQL、PostgreSQL、SQL Serverなどのような多くの異なるデータベースですぐに動作します。</target>
        </trans-unit>
        <trans-unit id="a9a6716ba26e03617c92f53fd2352147c7252db8" translate="yes" xml:space="preserve">
          <source>As an application grows in size, it will have many templates backed by controllers and components.</source>
          <target state="translated">アプリケーションのサイズが大きくなると、コントローラとコンポーネントに支えられた多くのテンプレートを持つことになります。</target>
        </trans-unit>
        <trans-unit id="aa189213dcb346106d5e9872d77e6451881b369f" translate="yes" xml:space="preserve">
          <source>As an example, consider the router:</source>
          <target state="translated">例として、ルーターを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="1576ebe2d9b67dd183a72d25dc37d740c1367d47" translate="yes" xml:space="preserve">
          <source>As an exercise, here is the above &lt;code&gt;format-currency&lt;/code&gt; helper re-factored into a class-based helper:</source>
          <target state="translated">演習として、ここでは、クラスベースのヘルパーにリファクタリングされた上記の &lt;code&gt;format-currency&lt;/code&gt; ヘルパーを示します。</target>
        </trans-unit>
        <trans-unit id="abfeef8dd340e62de1345b3bdb4f7d25f54691a8" translate="yes" xml:space="preserve">
          <source>As another example, let's make a helper utilizing an authentication service that welcomes users by their name if they're logged in:</source>
          <target state="translated">別の例として、ログインしていれば名前で歓迎する認証サービスを利用したヘルパーを作ってみましょう。</target>
        </trans-unit>
        <trans-unit id="da0df0da65c3ae7e6622548b6eab04753b236bfe" translate="yes" xml:space="preserve">
          <source>As before when we created the &lt;a href=&quot;../simple-component&quot;&gt;&lt;code&gt;rental-listing&lt;/code&gt; component&lt;/a&gt;, the &quot;generate component&quot; CLI command creates</source>
          <target state="translated">以前に&lt;a href=&quot;../simple-component&quot;&gt; &lt;code&gt;rental-listing&lt;/code&gt; コンポーネント&lt;/a&gt;を作成したときと同様に、「コンポーネントの生成」CLIコマンドは</target>
        </trans-unit>
        <trans-unit id="e4f8b74691d28ef085474c5c7e3a4ee5281aefb5" translate="yes" xml:space="preserve">
          <source>As components are rendered, re-rendered and finally removed, Ember provides &lt;em&gt;lifecycle hooks&lt;/em&gt; that allow you to run code at specific times in a component's life.</source>
          <target state="translated">コンポーネントがレンダリング、再レンダリングされ、最終的に削除されると、Emberはコンポーネントの&lt;em&gt;ライフサイクルの&lt;/em&gt;特定の時間にコードを実行できるようにする&lt;em&gt;ライフサイクルフック&lt;/em&gt;を提供し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c976c994a38ead0b719af8c1f9b88cc662ef8b66" translate="yes" xml:space="preserve">
          <source>As for the &lt;code&gt;current-user&lt;/code&gt; class, it may have been just one of a few classes that can be applied to the &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; element. Let's use &lt;code&gt;...attributes&lt;/code&gt; to apply the &lt;code&gt;current-user&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49eff526078dcae910ad5947d7b287b225607e5e" translate="yes" xml:space="preserve">
          <source>As illustrated in the diagram above, the adapter cannot always return the requested record immediately. In this case, the adapter must make an &lt;em&gt;asynchronous&lt;/em&gt; request to the server, and only when that request finishes loading can the record be created with its backing data.</source>
          <target state="translated">上の図に示すように、アダプターは常に要求されたレコードをすぐに返すことができない場合があります。この場合、アダプターはサーバーに対して&lt;em&gt;非同期&lt;/em&gt;要求を行う必要があり、その要求のロードが完了したときにのみ、バッキングデータを使用してレコードを作成できます。</target>
        </trans-unit>
        <trans-unit id="99ca4fb1beac8d51bfa495913434c4c345bda40c" translate="yes" xml:space="preserve">
          <source>As in the case of &lt;code&gt;store.query()&lt;/code&gt;, a query object can also be passed to &lt;code&gt;store.queryRecord()&lt;/code&gt; and is available for the adapter's &lt;code&gt;queryRecord()&lt;/code&gt; to use to qualify the request. However the adapter must return a single model object, not an array containing one element, otherwise Ember Data will throw an exception.</source>
          <target state="translated">&lt;code&gt;store.query()&lt;/code&gt; の場合と同様に、クエリオブジェクトを &lt;code&gt;store.queryRecord()&lt;/code&gt; に渡すこともでき、アダプタの &lt;code&gt;queryRecord()&lt;/code&gt; がリクエストの修飾に使用できます。ただし、アダプターは、1つの要素を含む配列ではなく、単一のモデルオブジェクトを返す必要があります。そうしないと、Ember Dataが例外をスローします。</target>
        </trans-unit>
        <trans-unit id="97635391398fda444388d21e716aa21408aa8b50" translate="yes" xml:space="preserve">
          <source>As in the earlier examples, the comment's &lt;code&gt;belongsTo&lt;/code&gt; relationship will also be cleared by Ember Data.</source>
          <target state="translated">以前の例と同様に、コメントの &lt;code&gt;belongsTo&lt;/code&gt; 関係もEmber Dataによってクリアされます。</target>
        </trans-unit>
        <trans-unit id="003bea68cedf87e1780da824c13d59df1ff7af25" translate="yes" xml:space="preserve">
          <source>As instances, these helpers also have access to the container an will accept injected dependencies.</source>
          <target state="translated">インスタンスとして、これらのヘルパーはコンテナにアクセスし、注入された依存関係を受け入れます。</target>
        </trans-unit>
        <trans-unit id="18534661125f74bf6346b215141eb236e05b22fc" translate="yes" xml:space="preserve">
          <source>As instances, these helpers also have access to the container and will accept injected dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cacc2d627b5f266fe9cf7bfe4a641b468cba56ef" translate="yes" xml:space="preserve">
          <source>As it is the basic object type in Ember, being able to test a simple &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html&quot;&gt;&lt;code&gt;Ember.Object&lt;/code&gt;&lt;/a&gt; sets the foundation for testing more specific parts of your Ember application such as controllers, components, etc. Testing an &lt;code&gt;Ember.Object&lt;/code&gt; is as simple as creating an instance of the object, setting its state, and running assertions against the object. By way of example, let's look at a few common cases.</source>
          <target state="translated">Emberの基本的なオブジェクトタイプであるため、単純な&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html&quot;&gt; &lt;code&gt;Ember.Object&lt;/code&gt; &lt;/a&gt;をテストできることは、コントローラー、コンポーネントなど、Emberアプリケーションのより特定の部分をテストするための基盤を確立します &lt;code&gt;Ember.Object&lt;/code&gt; テストは、オブジェクトのインスタンス、状態の設定、オブジェクトに対するアサーションの実行。例として、いくつかの一般的なケースを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="53f8a854604d6c0b8e88a2e75222bcf223f2515a" translate="yes" xml:space="preserve">
          <source>As long as the properties are tracked, and accessed when rendering the template directly or indirectly, everything should update as expected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b26474ccf1de5f731e6454e022ad86eac498963" translate="yes" xml:space="preserve">
          <source>As mentioned above, we recommend that you use &lt;code&gt;npx @ember/octanify&lt;/code&gt; to ensure these flags are set to the appropriate values. To learn what each option does, check out the &lt;a href=&quot;../../configuring-ember/optional-features&quot;&gt;Optional Features&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41dc958fa2ea76e6ba5543e57f4cb5c6b24e746f" translate="yes" xml:space="preserve">
          <source>As mentioned above, we recommend that you use &lt;code&gt;npx @ember/octanify&lt;/code&gt; to ensure these flags are set to the appropriate values. To learn what each option does, check out the &lt;a href=&quot;https://guides.emberjs.com/configuring-ember/optional-features/&quot;&gt;Optional Features&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3138a71e853aa2b60d90fb77188c71cc96882ed8" translate="yes" xml:space="preserve">
          <source>As mentioned above, you should wrap any non-Ember async callbacks in &lt;code&gt;Ember.run&lt;/code&gt;. If you don't, Ember will try to approximate a beginning and end for you. Consider the following callback:</source>
          <target state="translated">上記のように、 &lt;code&gt;Ember.run&lt;/code&gt; で非Ember非同期コールバックをラップする必要があります。そうでない場合、Emberはおおよその始まりと終わりを試みます。次のコールバックを検討してください。</target>
        </trans-unit>
        <trans-unit id="f6634d6a8d88308b3254746b73f8e595c194c13b" translate="yes" xml:space="preserve">
          <source>As mentioned before, our initial test just made sure everything was running properly. Now let's replace that test with the list of tasks we want our app to handle (described up above).</source>
          <target state="translated">前述したように、最初のテストでは、すべてが正しく実行されていることを確認しました。では、このテストをアプリに処理させたいタスクのリストに置き換えてみましょう(上で説明しました)。</target>
        </trans-unit>
        <trans-unit id="a2be8e0adcfa1aa4f96496cec6a785cbd688f7be" translate="yes" xml:space="preserve">
          <source>As mentioned earlier on the &lt;a href=&quot;../acceptance-test&quot;&gt;Planning the Application page&lt;/a&gt;, an Ember acceptance test automates interacting with our app in a similar way to a visitor.</source>
          <target state="translated">前述の&lt;a href=&quot;../acceptance-test&quot;&gt;「アプリケーション&lt;/a&gt;の計画」ページで説明したように、Ember受け入れテストは、訪問者と同じようにアプリとの対話を自動化します。</target>
        </trans-unit>
        <trans-unit id="26aba4ddf9df1ce20c811d263d5fbec26355bc10" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, we schedule work (in the form of function invocations) on queues, and these queues are processed to completion in priority order.</source>
          <target state="translated">前述したように、我々はキュー上で(関数呼び出しの形で)作業をスケジュールし、これらのキューは優先順位の高い順に処理されて完了します。</target>
        </trans-unit>
        <trans-unit id="7556317ab0ca3832a43ca1c6c682a597423fe38d" translate="yes" xml:space="preserve">
          <source>As mentioned in the previous section, we use the &lt;code&gt;concat&lt;/code&gt; helper to render both &lt;code&gt;person.givenName&lt;/code&gt; and &lt;code&gt;person.familyName&lt;/code&gt; in one go. But we also want to make sure that the names are capitalized. It gets a bit repetitive to keep writing &lt;code&gt;capitalize&lt;/code&gt; and honestly, we might just forget it at some point. Thankfully, we can use the &lt;code&gt;{{let}}&lt;/code&gt; helper to fix this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b6f125ee3d6d0295e5a3907e1391e9db734bb3" translate="yes" xml:space="preserve">
          <source>As part of making your app upgrades as smooth as possible, the Inspector gathers your deprecations, groups them, and displays them in a way that helps you fix them.</source>
          <target state="translated">アプリのアップグレードを可能な限りスムーズに行うために、インスペクタは非推奨事項を収集し、グループ化し、それらを修正するのに役立つ方法で表示します。</target>
        </trans-unit>
        <trans-unit id="1d09613c1dfb00458167443cf419d127edf67f08" translate="yes" xml:space="preserve">
          <source>As seen in the &lt;a href=&quot;https://guides.emberjs.com/templates/writing-helpers&quot;&gt;Writing Helpers&lt;/a&gt; guide. The helper function expects the unnamed arguments as an array as the first argument. It expects the named arguments as an object as the second argument.</source>
          <target state="translated">見られるように&lt;a href=&quot;https://guides.emberjs.com/templates/writing-helpers&quot;&gt;書くヘルパー&lt;/a&gt;ガイド。ヘルパー関数は、名前のない引数を最初の引数として配列として期待します。これは、名前付き引数を2番目の引数としてオブジェクトとして期待しています。</target>
        </trans-unit>
        <trans-unit id="8f68455579dd856d56240eb43c7fe7a9dbf3fb19" translate="yes" xml:space="preserve">
          <source>As seen in the &lt;a href=&quot;https://guides.emberjs.com/templates/writing-helpers/&quot;&gt;Writing Helpers&lt;/a&gt; guide. The helper function expects the unnamed arguments as an array as the first argument. It expects the named arguments as an object as the second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84ef0ba5d97aba9769a584c2d26fe83b58a26a8" translate="yes" xml:space="preserve">
          <source>As shown here, we can pass different content into the tag. The content of the tag is also referred to as &lt;em&gt;the block&lt;/em&gt;. The &lt;code&gt;{{yield}}&lt;/code&gt; syntax yields to the block once the block is passed into the component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63cd927a14867ce3ef7598750785a48449a7e9ac" translate="yes" xml:space="preserve">
          <source>As the proxy is an ObjectProxy, and the json now its content, all the json properties will be available directly from the proxy.</source>
          <target state="translated">プロキシはObjectProxyであり、jsonは今、そのコンテンツとして、すべてのjsonプロパティは、プロキシから直接利用可能になります。</target>
        </trans-unit>
        <trans-unit id="839921acedf01a62de2ab72624945f1296874da4" translate="yes" xml:space="preserve">
          <source>As the user inputs text, this property is updated to reflect the &lt;code&gt;value&lt;/code&gt; property of the HTML element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c0114ed3606496cbcb98afe5e657a3825b6b500" translate="yes" xml:space="preserve">
          <source>As they search for a rental, users might also want to narrow their search to a specific city. While our &lt;a href=&quot;../simple-component&quot;&gt;initial&lt;/a&gt; rental listing component only displayed rental information, this new filter component will also allow the user to provide input in the form of filter criteria.</source>
          <target state="translated">レンタルを検索するとき、ユーザーは検索を特定の都市に絞り込むこともできます。私たちの間に&lt;a href=&quot;../simple-component&quot;&gt;最初の&lt;/a&gt;コンポーネントをリストレンタルのみレンタル情報を表示し、この新しいフィルタ・コンポーネントは、ユーザーがフィルタ基準の形式で入力を提供できるようになります。</target>
        </trans-unit>
        <trans-unit id="3ef82893252744a1b499132ad853ca79e552d0e0" translate="yes" xml:space="preserve">
          <source>As usual, there's a generator that makes this easy for us. Make a new component by typing:</source>
          <target state="translated">いつものように、これを簡単にしてくれるジェネレータがあります。と入力して新しいコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="6fa2afaa305f9094baad3a3f54af0876278af656" translate="yes" xml:space="preserve">
          <source>As we can see from the warning, &lt;code&gt;@ember/optional-features&lt;/code&gt; has created a file in &lt;code&gt;config/optional-features.json&lt;/code&gt; to store the configuration for your project. We commit it to our repository and we are off to the races!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306d333a4f71d5816d13abcfd58bba336166f4ce" translate="yes" xml:space="preserve">
          <source>As we continue through this tutorial, we'll use these acceptance tests as our checklist. Once all the tests are passing, we'll have accomplished our high level goals.</source>
          <target state="translated">このチュートリアルを進めていく中で、これらの受け入れテストをチェックリストとして使用していきます。すべてのテストが合格すれば、高レベルの目標を達成したことになります。</target>
        </trans-unit>
        <trans-unit id="4bf007fb0c2f3c34cd58000ff2b4a5b6d680c969" translate="yes" xml:space="preserve">
          <source>As we mentioned above, components only have two lifecycle hooks, &lt;code&gt;constructor&lt;/code&gt; and &lt;code&gt;willDestroy&lt;/code&gt;. There were a number of other lifecycle hooks that existed on classic components which were generally related to updating component state or DOM manipulation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc114a9d701db960551865117ad7391d9cc045ea" translate="yes" xml:space="preserve">
          <source>As we mentioned above, for all intents and purposes the methods, fields, and accessors are only usable on &lt;em&gt;instances&lt;/em&gt; of the class. However, sometimes you may want to place them &lt;em&gt;directly&lt;/em&gt; on the class, for instance if you want to share some state between all instances of the class. You can do this by adding the &lt;code&gt;static&lt;/code&gt; keyword in front of the definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762369d4378b2482bf59c8e52491cc7542fb6f49" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;findAll&lt;/code&gt;, the final result after normalization to &lt;code&gt;JSON:API&lt;/code&gt; will be added to store via &lt;code&gt;store.push&lt;/code&gt; where it will merge with any existing records for &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7796b3fe19b6a004e5933a00e42c6dcd9bb59bf3" translate="yes" xml:space="preserve">
          <source>As with the &lt;code&gt;loading&lt;/code&gt; substate, on a thrown error or rejected promise returned from the &lt;code&gt;articles.overview&lt;/code&gt; route's &lt;code&gt;model&lt;/code&gt; hook (or &lt;code&gt;beforeModel&lt;/code&gt; or &lt;code&gt;afterModel&lt;/code&gt;) Ember will look for an error template or route in the following order:</source>
          <target state="translated">&lt;code&gt;loading&lt;/code&gt; サブステートと同様に、 &lt;code&gt;articles.overview&lt;/code&gt; ルートの &lt;code&gt;model&lt;/code&gt; フック（または &lt;code&gt;beforeModel&lt;/code&gt; または &lt;code&gt;afterModel&lt;/code&gt; ）から返されたスローされたエラーまたは拒否されたプロミスでは、Emberは次の順序でエラーテンプレートまたはルートを探します。</target>
        </trans-unit>
        <trans-unit id="5b3029597944ed54983bca9a138b492cee282e0c" translate="yes" xml:space="preserve">
          <source>As you can see, both literal and bound values can be set on attributes, and attributes can be used &lt;em&gt;without&lt;/em&gt; setting a value at all, just like HTML attributes. The component you are invoking decides where to put these attributes by using the special &lt;code&gt;...attributes&lt;/code&gt; syntax. This will be discussed later in the section on components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b005a7c253dc1a312a426ca896f387b7d8fbcf" translate="yes" xml:space="preserve">
          <source>As you can see, it functions a little bit differently that the &lt;code&gt;_super()&lt;/code&gt; method. When used in a constructor, you call it directly like a function. You &lt;em&gt;must&lt;/em&gt; do this before using &lt;code&gt;this&lt;/code&gt; in the constructor, otherwise it's a syntax error. However, when used in any other method, you must &lt;em&gt;explicitly&lt;/em&gt; specify the function you are calling on the parent class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b02e3a13a7b798f9d11208cf0cde6353127b34" translate="yes" xml:space="preserve">
          <source>As you can see, the Inspector shows the routes you defined as well as the routes automatically generated by Ember.</source>
          <target state="translated">ご覧のように、インスペクタには、あなたが定義したルートだけでなく、Emberによって自動的に生成されたルートも表示されます。</target>
        </trans-unit>
        <trans-unit id="6f17c2c0791521047c64cdf9285d0e75e021ffab" translate="yes" xml:space="preserve">
          <source>As you learn about Ember, you'll see code like &lt;code&gt;Ember.Component.extend()&lt;/code&gt; and &lt;code&gt;DS.Model.extend()&lt;/code&gt;. Here, you'll learn about this &lt;code&gt;extend()&lt;/code&gt; method, as well as other major features of the Ember object model.</source>
          <target state="translated">あなたはエンバーについて学ぶとして、あなたのようなコードを参照してくださいよ &lt;code&gt;Ember.Component.extend()&lt;/code&gt; と &lt;code&gt;DS.Model.extend()&lt;/code&gt; 。ここでは、この &lt;code&gt;extend()&lt;/code&gt; メソッドと、Emberオブジェクトモデルの他の主要な機能について学びます。</target>
        </trans-unit>
        <trans-unit id="8f06ca2c81b8c26f02d96e6329c0db6f670de11b" translate="yes" xml:space="preserve">
          <source>As you move forward with these template guides, keep in mind that a helper can be used anywhere a normal value can be used.</source>
          <target state="translated">これらのテンプレートガイドを進める際には、ヘルパーは通常の値が使用できる場所であればどこでも使用できることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="85ba2b8e94ac60de39a520e332a62669c801c7e1" translate="yes" xml:space="preserve">
          <source>As you upgrade between releases, you might also notice that your terminal log begins to stream template-related deprecation warnings during the compile process, making it difficult to review your compilation logs.</source>
          <target state="translated">リリース間でアップグレードすると、コンパイルプロセス中にテンプレート関連の非推奨警告がターミナルログに流れ始め、コンパイルログを確認するのが困難になることに気づくかもしれません。</target>
        </trans-unit>
        <trans-unit id="4292ff646216ec9688bcaac6b8d2d1ecaca767ce" translate="yes" xml:space="preserve">
          <source>As you're developing your Ember app, you are likely to run into common scenarios that aren't addressed by Ember itself. Perhaps you want to use a CSS preprocessor to write your stylesheets, or you want to use a popular JS library, or maybe you want to import components written by a different department within your organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8030db38771f4501e97ea4289def0f67f21d001c" translate="yes" xml:space="preserve">
          <source>As you're developing your Ember app, you'll likely run into common scenarios that aren't addressed by Ember itself, such as authentication or using SASS for your stylesheets. Ember CLI provides a common format called &lt;a href=&quot;#toc_addons&quot;&gt;Ember Addons&lt;/a&gt; for distributing reusable libraries to solve these problems. Additionally, you may want to make use of front-end dependencies like a CSS framework or a JavaScript datepicker that aren't specific to Ember apps.</source>
          <target state="translated">Emberアプリを開発していると、認証やスタイルシートのSASSの使用など、Ember自体では対応できない一般的なシナリオに遭遇する可能性があります。Ember CLIは、これらの問題を解決するために再利用可能なライブラリを配布するための&lt;a href=&quot;#toc_addons&quot;&gt;Ember Addons&lt;/a&gt;と呼ばれる一般的な形式を提供します。さらに、CSSフレームワークやJavaScript日付ピッカーなど、Emberアプリに固有ではないフロントエンドの依存関係を利用することもできます。</target>
        </trans-unit>
        <trans-unit id="d41f5be85b9fec5163ff038a3caf2635c6cc436c" translate="yes" xml:space="preserve">
          <source>As your application boots, it creates an &lt;a href=&quot;http://emberjs.com/api/classes/Ember.ApplicationInstance.html&quot;&gt;&lt;code&gt;Ember.ApplicationInstance&lt;/code&gt;&lt;/a&gt; that is used to manage its stateful aspects. This instance acts as the &quot;owner&quot; of objects instantiated for your app.</source>
          <target state="translated">アプリケーションが起動すると、ステートフルな側面を管理するために使用される&lt;a href=&quot;http://emberjs.com/api/classes/Ember.ApplicationInstance.html&quot;&gt; &lt;code&gt;Ember.ApplicationInstance&lt;/code&gt; &lt;/a&gt;が作成されます。このインスタンスは、アプリに対してインスタンス化されたオブジェクトの「所有者」として機能します。</target>
        </trans-unit>
        <trans-unit id="b3b5c6211be811b100cf62298dade3daaebff438" translate="yes" xml:space="preserve">
          <source>As your application boots, it creates an &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/ApplicationInstance&quot;&gt;&lt;code&gt;ApplicationInstance&lt;/code&gt;&lt;/a&gt; that is used to manage its stateful aspects. This instance acts as the &quot;owner&quot; of objects instantiated for your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85482f7bde92f968b723a7c1cccba703446c7834" translate="yes" xml:space="preserve">
          <source>As your application grows, you will notice you are sharing UI elements between multiple pages, or using them multiple times on the same page. Ember makes it easy to refactor your templates into reusable components.</source>
          <target state="translated">アプリケーションが成長するにつれて、複数のページ間で UI 要素を共有したり、同じページで複数回使用したりしていることに気づくでしょう。Emberを使えば、テンプレートを再利用可能なコンポーネントにリファクタリングすることが簡単にできます。</target>
        </trans-unit>
        <trans-unit id="dd8b717c424aec19d8b46e728b8a3e6e7d6654ad" translate="yes" xml:space="preserve">
          <source>Assertions are removed from production builds, so they can be freely added for documentation and debugging purposes without worries of incuring any performance penalty. However, because of that, they should not be used for checks that could reasonably fail during normal usage. Furthermore, care should be taken to avoid accidentally relying on side-effects produced from evaluating the condition itself, since the code will not run in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2cec2e9dfda4b6eb086f48956a67e9aa6066ef" translate="yes" xml:space="preserve">
          <source>Assimilation</source>
          <target state="translated">Assimilation</target>
        </trans-unit>
        <trans-unit id="d55c9f6900701a0c15d2e9897b19c81c1438d26a" translate="yes" xml:space="preserve">
          <source>Assume that a &lt;code&gt;User&lt;/code&gt; can own a &lt;code&gt;Profile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;User&lt;/code&gt; が &lt;code&gt;Profile&lt;/code&gt; を所有できると仮定します。</target>
        </trans-unit>
        <trans-unit id="9a79520fe869c6590342ba964e1e8196743a9b60" translate="yes" xml:space="preserve">
          <source>Assuming an &lt;code&gt;article&lt;/code&gt; route with a model that looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe8e98ba709beda34fca658dee0e3c113d54233" translate="yes" xml:space="preserve">
          <source>Assuming the &lt;code&gt;@developers&lt;/code&gt; argument contains this array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0eae4a846d9c5ab77883eacc28131689ac5ea1" translate="yes" xml:space="preserve">
          <source>Assuming you have already generated the &lt;code&gt;posts&lt;/code&gt; route, to generate the above nested route you would run:</source>
          <target state="translated">すでに &lt;code&gt;posts&lt;/code&gt; ルートを生成していると仮定して、上記のネストされたルートを生成するには、以下を実行します。</target>
        </trans-unit>
        <trans-unit id="8b593995c88f61a609044a01e37e8e4ccc22e065" translate="yes" xml:space="preserve">
          <source>Assumptions</source>
          <target state="translated">Assumptions</target>
        </trans-unit>
        <trans-unit id="d113e9e9b47b09d806bb34df02a659f0a2190023" translate="yes" xml:space="preserve">
          <source>Async helpers also come in handy when you want to group interaction into one helper. For example:</source>
          <target state="translated">非同期ヘルパーは、インタラクションを一つのヘルパーにまとめたいときにも便利です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fc31882cb59aefb1303d4facff868ae43726b8fd" translate="yes" xml:space="preserve">
          <source>Async observers are more performant than those that run synchronously and can help you to manage your application state in a more predictable manner. This is one of the reasons, why the &lt;code&gt;default-async-observers&lt;/code&gt; feature is &lt;strong&gt;enabled by default&lt;/strong&gt; in newly created, modern Ember applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a694f132ffd5ee023d8bfe4db469892d873344c" translate="yes" xml:space="preserve">
          <source>Asynchronous Helpers</source>
          <target state="translated">非同期ヘルパー</target>
        </trans-unit>
        <trans-unit id="b882aa063e2d0be0004d24a29b1095b58191cf32" translate="yes" xml:space="preserve">
          <source>Asynchronous Routing</source>
          <target state="translated">非同期ルーティング</target>
        </trans-unit>
        <trans-unit id="9d1e1b8e9ce65e96225bf275b064f8840bc64f84" translate="yes" xml:space="preserve">
          <source>Asynchronous calls typically return a promise (or deferred). This is an object which has a state: it can be given handlers for when it's fulfilled or rejected.</source>
          <target state="translated">非同期呼び出しは通常、プロミスを返します。これは状態を持つオブジェクトであり、それが達成されたとき、または拒否されたときのためのハンドラを与えることができます。</target>
        </trans-unit>
        <trans-unit id="f6afba5345b52f9fe856d72fb2e116d021abf742" translate="yes" xml:space="preserve">
          <source>Asynchronous example:</source>
          <target state="translated">非同期の例。</target>
        </trans-unit>
        <trans-unit id="024ed461313ea710758c8440ffa3aac3c8cae37e" translate="yes" xml:space="preserve">
          <source>Asynchronous helpers are &quot;aware&quot; of (and wait for) asynchronous behavior within your application, making it much easier to write deterministic tests.</source>
          <target state="translated">非同期ヘルパーはアプリケーション内の非同期動作を &quot;認識 &quot;して(待って)くれるので、決定論的なテストを書くのがより簡単になります。</target>
        </trans-unit>
        <trans-unit id="7474c0015a7cbc566fad6bd0c470876572283c8e" translate="yes" xml:space="preserve">
          <source>At a high-level, we break application boot into two distinct phases:</source>
          <target state="translated">高レベルでは、アプリケーションの起動を2つの異なるフェーズに分けます。</target>
        </trans-unit>
        <trans-unit id="604422ae04a00582512d890ad9756cc860609209" translate="yes" xml:space="preserve">
          <source>At every level of nesting (including the top level), Ember automatically provides a route for the &lt;code&gt;/&lt;/code&gt; path named &lt;code&gt;index&lt;/code&gt;. To see when a new level of nesting occurs, check the router, whenever you see a &lt;code&gt;function&lt;/code&gt;, that's a new level.</source>
          <target state="translated">ネストのすべてのレベル（トップレベルを含む）で、Emberは &lt;code&gt;/&lt;/code&gt; という名前の/ pathへのルートを自動的に提供し &lt;code&gt;index&lt;/code&gt; 。ネストの新しいレベルがいつ発生するかを確認するには、ルーターをチェックします。 &lt;code&gt;function&lt;/code&gt; が表示されたら、それは新しいレベルです。</target>
        </trans-unit>
        <trans-unit id="1a72286828b045fa20348b567c081a976787f702" translate="yes" xml:space="preserve">
          <source>At first, using Ember Data may feel different than the way you're used to writing JavaScript applications. Many developers are familiar with using AJAX to fetch raw JSON data from an endpoint, which may appear easy at first. Over time, however, complexity leaks out into your application code, making it hard to maintain.</source>
          <target state="translated">最初は、Ember Dataを使うと、JavaScriptアプリケーションを書くのに慣れている方法とは違うと感じるかもしれません。多くの開発者は、AJAXを使ってエンドポイントから生のJSONデータを取得することに慣れており、最初は簡単に見えるかもしれません。しかし、時間が経つにつれて、複雑さがアプリケーションのコードに漏れ出し、メンテナンスが難しくなります。</target>
        </trans-unit>
        <trans-unit id="eb0419aa6a91b702ea23dfa212b1276fa15fbd08" translate="yes" xml:space="preserve">
          <source>At first, using Ember Data may feel different than the way you're used to writing JavaScript applications. Many developers are familiar with using Ajax to fetch raw JSON data from an endpoint, which may appear easy at first. Over time, however, complexity leaks out into your application code, making it hard to maintain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aacf12182d97bd84ec57121482defb62321f637" translate="yes" xml:space="preserve">
          <source>At its core, Ember's UIs are &lt;em&gt;HTML&lt;/em&gt; driven - every part of the UI that is shown to the user is defined in an HTML template somewhere in your application. Because of this, templates are central to Ember, and one of the most important parts of the framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e76c294bed3108976242f61fd1d7d056da52ddb" translate="yes" xml:space="preserve">
          <source>At most one model for each &lt;a href=&quot;https://guides.emberjs.com/routing/defining-your-routes/#toc_dynamic-segments&quot;&gt;dynamic segment&lt;/a&gt;. By default, Ember.js will replace each segment with the value of the corresponding object's &lt;code&gt;id&lt;/code&gt; property. In the example above, the second argument is each &lt;code&gt;photo&lt;/code&gt; object, and the &lt;code&gt;id&lt;/code&gt; property is used to fill in the dynamic segment with either &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, or &lt;code&gt;3&lt;/code&gt;. If there is no model to pass to the component, you can provide an explicit value instead:</source>
          <target state="translated">各&lt;a href=&quot;https://guides.emberjs.com/routing/defining-your-routes/#toc_dynamic-segments&quot;&gt;動的セグメント&lt;/a&gt;に対して最大1つのモデル。デフォルトでは、Ember.jsは各セグメントを対応するオブジェクトの &lt;code&gt;id&lt;/code&gt; プロパティの値に置き換えます。上記の例では、第二の引数はそれぞれある &lt;code&gt;photo&lt;/code&gt; オブジェクト、および &lt;code&gt;id&lt;/code&gt; プロパティはいずれかと動的セグメントを埋めるために使用される &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;2&lt;/code&gt; 、または &lt;code&gt;3&lt;/code&gt; 。コンポーネントに渡すモデルがない場合は、代わりに明示的な値を指定できます。</target>
        </trans-unit>
        <trans-unit id="69c3a590946da3c24ad7291ea76832f83ea93d52" translate="yes" xml:space="preserve">
          <source>At some point, you may want to add default values to your arguments if one wasn't passed to your component. Arguments are not mutable, so if you attempt to reassign a value on &lt;code&gt;this.args&lt;/code&gt;, it'll fail. Instead, you should define a getter on your component that provides the default value if the argument was not provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6d3b2c1e01895160e35c6131f96028ebae6938" translate="yes" xml:space="preserve">
          <source>At the end of a RunLoop, any methods scheduled in this way will be invoked. Methods will be invoked in an order matching the named queues defined in the &lt;code&gt;queues&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec9405efb0386846a8807b3a31fe58f288690e6" translate="yes" xml:space="preserve">
          <source>At the end of a RunLoop, any methods scheduled in this way will be invoked. Methods will be invoked in an order matching the named queues defined in the &lt;code&gt;run.queues&lt;/code&gt; property.</source>
          <target state="translated">RunLoopの最後に、この方法でスケジュールされたメソッドが呼び出されます。メソッドは、 &lt;code&gt;run.queues&lt;/code&gt; プロパティで定義された名前付きキューに一致する順序で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="12f96c29406b183c26ea71c6b64edde12cc58a84" translate="yes" xml:space="preserve">
          <source>At the heart of Ember is Ember-Runtime, a set of core functions that provide cross-platform compatibility and object property observing. Ember-Runtime is small and performance-focused so you can use it alongside other cross-platform libraries such as jQuery. For more details, see &lt;a href=&quot;https://emberjs.com/api/modules/ember-runtime.html&quot;&gt;Ember-Runtime&lt;/a&gt;.</source>
          <target state="translated">Emberの中心はEmber-Runtimeです。これは、クロスプラットフォームの互換性とオブジェクトプロパティの監視を提供するコア関数のセットです。Ember-Runtimeは小さく、パフォーマンスを重視しているため、jQueryなどの他のクロスプラットフォームライブラリと一緒に使用できます。詳細については、&lt;a href=&quot;https://emberjs.com/api/modules/ember-runtime.html&quot;&gt;Ember-Runtimeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="43473effc2c8cbc495a11ccde511f0bb67d7a225" translate="yes" xml:space="preserve">
          <source>At the start of a beta cycle the Ember core team evaluates each new feature. Features deemed stable are made available in the next beta and enabled by default.</source>
          <target state="translated">ベータサイクルの開始時に、Emberのコアチームは各新機能を評価します。安定していると判断された機能は、次のベータで利用可能になり、デフォルトで有効になります。</target>
        </trans-unit>
        <trans-unit id="02fcc07119232c1ede969118b71afe87945155cc" translate="yes" xml:space="preserve">
          <source>At this point all our tests should pass, including the &lt;a href=&quot;../acceptance-test&quot;&gt;list of acceptance tests&lt;/a&gt; we created as our beginning requirements.</source>
          <target state="translated">この時点で、最初の要件として作成した&lt;a href=&quot;../acceptance-test&quot;&gt;受け入れテスト&lt;/a&gt;のリストを含め、すべてのテストに合格するはずです。</target>
        </trans-unit>
        <trans-unit id="58954f132b5aa897d1883f8a43334615e25f69ec" translate="yes" xml:space="preserve">
          <source>At this point you can do a &lt;a href=&quot;../deploying&quot;&gt;deployment&lt;/a&gt; and share your Super Rentals application to the world or you can use this as a base to explore other Ember features and addons. Regardless, we hope this has helped you get started with creating your own ambitious applications with Ember!</source>
          <target state="translated">この時点で、&lt;a href=&quot;../deploying&quot;&gt;展開&lt;/a&gt;を行ってSuper Rentalsアプリケーションを世界中に共有したり、これをベースとして他のEmber機能やアドオンを探索したりできます。とにかく、これがEmberを使用した独自の野心的なアプリケーションの作成を開始するのに役立つことを願っています！</target>
        </trans-unit>
        <trans-unit id="1bd9b5e5f7f22993de86e7de87f658cef6b36b95" translate="yes" xml:space="preserve">
          <source>At this point, our block content has access to everything it needs to render, via the wrapping &lt;code&gt;blog-post&lt;/code&gt; component's template helpers.</source>
          <target state="translated">この時点で、ブロックコンテンツは、ラッピングする &lt;code&gt;blog-post&lt;/code&gt; コンポーネントのテンプレートヘルパーを介して、レンダリングする必要があるすべてのものにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="59905693b637d9aa355e39ca35e76a2ee37223da" translate="yes" xml:space="preserve">
          <source>At this point, we should be able to navigate between our &lt;code&gt;about&lt;/code&gt;, &lt;code&gt;contact&lt;/code&gt;, and &lt;code&gt;rentals&lt;/code&gt; pages.</source>
          <target state="translated">この時点で、私たちは私たちの間を移動することができるはずです &lt;code&gt;about&lt;/code&gt; 、 &lt;code&gt;contact&lt;/code&gt; 、および &lt;code&gt;rentals&lt;/code&gt; ページ。</target>
        </trans-unit>
        <trans-unit id="8b835a3f78cc768ce62c5e13c229075402e14a03" translate="yes" xml:space="preserve">
          <source>At this point, you can continue to the &lt;a href=&quot;../routes-and-templates&quot;&gt;next page&lt;/a&gt; or read more about Ember testing below.</source>
          <target state="translated">この時点で、&lt;a href=&quot;../routes-and-templates&quot;&gt;次のページ&lt;/a&gt;に進むか、以下のEmberテストの詳細を読むことができます。</target>
        </trans-unit>
        <trans-unit id="2586793eebaa431e6679b739ad4e25168985bbad" translate="yes" xml:space="preserve">
          <source>At this point, you can either persist your changes via &lt;code&gt;save()&lt;/code&gt; or you can roll back your changes. Calling &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#method_rollbackAttributes&quot;&gt;&lt;code&gt;rollbackAttributes()&lt;/code&gt;&lt;/a&gt; for a saved record reverts all the &lt;code&gt;changedAttributes&lt;/code&gt; to their original value. If the record &lt;code&gt;isNew&lt;/code&gt; it will be removed from the store.</source>
          <target state="translated">この時点で、 &lt;code&gt;save()&lt;/code&gt; を使用して変更を永続化するか、変更をロールバックできます。保存されたレコードに対して&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#method_rollbackAttributes&quot;&gt; &lt;code&gt;rollbackAttributes()&lt;/code&gt; &lt;/a&gt;を呼び出すと、すべての &lt;code&gt;changedAttributes&lt;/code&gt; が元の値に戻ります。レコードが &lt;code&gt;isNew&lt;/code&gt; 場合、ストアから削除されます。</target>
        </trans-unit>
        <trans-unit id="4d614c57b309b40243828266c6acc885207e6186" translate="yes" xml:space="preserve">
          <source>At this point, you can either persist your changes via &lt;code&gt;save()&lt;/code&gt; or you can roll back your changes. Calling &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Model/methods#rollbackAttributes&quot;&gt;&lt;code&gt;rollbackAttributes()&lt;/code&gt;&lt;/a&gt; for a saved record reverts all the &lt;code&gt;changedAttributes&lt;/code&gt; to their original value. If the record &lt;code&gt;isNew&lt;/code&gt; it will be removed from the store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41dded417052424bdcf3c39f6c8664147fae6806" translate="yes" xml:space="preserve">
          <source>Atom</source>
          <target state="translated">Atom</target>
        </trans-unit>
        <trans-unit id="33b12658f55b6f8b7cd0a5aad6c5efd4551092e5" translate="yes" xml:space="preserve">
          <source>Atom is hackable text editor for the 21st Century.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaadbd3b4c608776e71642462b140b1a321d4080" translate="yes" xml:space="preserve">
          <source>Attaching Actions to Non-Clickable Elements</source>
          <target state="translated">非クリック可能な要素へのアクションのアタッチ</target>
        </trans-unit>
        <trans-unit id="977cdd4c60c3eae70e9b9de3d34e8c4109852a3f" translate="yes" xml:space="preserve">
          <source>Attaching actions to DOM elements</source>
          <target state="translated">アクションを DOM 要素にアタッチする</target>
        </trans-unit>
        <trans-unit id="8e3da4707f8656a453fa96b571d97b75794ccd21" translate="yes" xml:space="preserve">
          <source>Attempts to add the passed object to the receiver if the object is not already present in the collection. If the object is present, this method has no effect.</source>
          <target state="translated">オブジェクトがまだコレクションに存在しない場合に、渡されたオブジェクトをレシーバに追加しようとします。オブジェクトが存在する場合、このメソッドは何の効果もありません。</target>
        </trans-unit>
        <trans-unit id="4f777a9ed3b994806a472032ec849e0ef34ecf7d" translate="yes" xml:space="preserve">
          <source>Attempts to remove the passed object from the receiver collection if the object is present in the collection. If the object is not present, this method has no effect.</source>
          <target state="translated">オブジェクトがコレクション内に存在する場合に、渡されたオブジェクトをレシーバのコレクションから削除しようとします。オブジェクトが存在しない場合、このメソッドは何の効果もありません。</target>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="6ec6d89f423d9e38d748baf4b1f1836781f0fcbf" translate="yes" xml:space="preserve">
          <source>Attribute Names</source>
          <target state="translated">属性名</target>
        </trans-unit>
        <trans-unit id="b1b547d1ff50678c20d8048258a2a244b72d2277" translate="yes" xml:space="preserve">
          <source>Attribute Ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a05430770622de21c0faf0e251227cc79d971d" translate="yes" xml:space="preserve">
          <source>Attribute names in your JSON payload should be the camelCased versions of the attributes in your Ember.js models.</source>
          <target state="translated">JSONペイロードの属性名は、Ember.jsモデルの属性のキャメルケース版を使用してください。</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="e31898f142563b3823600180d1ec6a160deb8abb" translate="yes" xml:space="preserve">
          <source>Attributes are also available to classic components, and &lt;code&gt;...attributes&lt;/code&gt; is applied automatically to the wrapping element. If you're converting a component from classic components, you should be sure to add &lt;code&gt;...attributes&lt;/code&gt; to the wrapper element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15394d673370c824cbd9257b3097ca11b176e7b1" translate="yes" xml:space="preserve">
          <source>Attributes are used when turning the JSON payload returned from your server into a record, and when serializing a record to save back to the server after it has been modified.</source>
          <target state="translated">属性は、サーバーから返されたJSONペイロードをレコードに変換したり、レコードをシリアライズして修正後にサーバーに保存する際に使用されます。</target>
        </trans-unit>
        <trans-unit id="b11af515f8211c7c98f45b87b9cafd501804421e" translate="yes" xml:space="preserve">
          <source>Attributes can be applied to multiple elements as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56438642f0ab238478bbefcab98fbaa14d46450" translate="yes" xml:space="preserve">
          <source>Augments a constructor's own properties and functions:</source>
          <target state="translated">コンストラクタ自身のプロパティや関数を拡張します。</target>
        </trans-unit>
        <trans-unit id="a2f9b618879ca0736d07b6619b258226caebaa0e" translate="yes" xml:space="preserve">
          <source>Augments a constructor's prototype with additional properties and functions:</source>
          <target state="translated">コンストラクタのプロトタイプを追加のプロパティと関数で拡張します。</target>
        </trans-unit>
        <trans-unit id="011acab72ef31d6e6dae85d00b4256899c4da349" translate="yes" xml:space="preserve">
          <source>Authoring Adapters</source>
          <target state="translated">オーサリングアダプタ</target>
        </trans-unit>
        <trans-unit id="0e5647323a0775b905f99dd49c5c2ec27e1e176a" translate="yes" xml:space="preserve">
          <source>Authoring Serializers</source>
          <target state="translated">シリアライザのオーサリング</target>
        </trans-unit>
        <trans-unit id="56874b2f851d69474fb406c3ad51fd76a8ff5fb2" translate="yes" xml:space="preserve">
          <source>AutoLocation</source>
          <target state="translated">AutoLocation</target>
        </trans-unit>
        <trans-unit id="7db19ea1a02598dc4c77a174c421e0eb0a38f24b" translate="yes" xml:space="preserve">
          <source>Autoruns are Embers way of not punishing you in production if you forget to open a run loop before you schedule callbacks on it. While this is useful in production, these are still situations that should be revealed in testing to help you find and fix them.</source>
          <target state="translated">Autorunsは、コールバックをスケジュールする前に実行ループを開くのを忘れた場合に、本番環境では罰せられないようにするためのエンバーズの方法です。これは本番環境では便利ですが、これらの状況はテストで明らかにして、発見して修正するのに役立つはずです。</target>
        </trans-unit>
        <trans-unit id="59a379f080719fed1325dfc72ce9981cf59d3b60" translate="yes" xml:space="preserve">
          <source>Autoruns are disabled in testing for several reasons:</source>
          <target state="translated">オートランはいくつかの理由でテストでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="20d149ddd2196d6f8efa70e37fd6b28dd46d788b" translate="yes" xml:space="preserve">
          <source>Autotracking Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e18869592ca032d6936bfa8215ab000533c143f" translate="yes" xml:space="preserve">
          <source>Autotracking In-Depth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4c5699e9c3bf292e3cd89a6bb5cd43636b1385" translate="yes" xml:space="preserve">
          <source>Autotracking is how Ember's &lt;em&gt;reactivity&lt;/em&gt; model works - how it decides what to rerender, and when. This guide covers tracking in more depth, including how it can be used in various types of classes, and how it interacts with arrays and POJOs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c149dbe1fafb85369b896c781475811578d179" translate="yes" xml:space="preserve">
          <source>Available queues, and their order, can be found at &lt;code&gt;queues&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a6cbb6987ffc5fdcbe4fb1796799b4e5212e38" translate="yes" xml:space="preserve">
          <source>Available queues, and their order, can be found at &lt;code&gt;run.queues&lt;/code&gt;</source>
          <target state="translated">使用可能なキューとその順序は、 &lt;code&gt;run.queues&lt;/code&gt; で確認できます</target>
        </trans-unit>
        <trans-unit id="235a0577d09184162900c3504628ba592f4d3362" translate="yes" xml:space="preserve">
          <source>Available since v1.0.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9173eab37655a6d1e8d5df3ee6f99aea42dae55a" translate="yes" xml:space="preserve">
          <source>Available since v1.10.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e3767a3f684d5cd6bb77aac2e2a02d7235fc69" translate="yes" xml:space="preserve">
          <source>Available since v1.11.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7587ad16163cbd54ec329e7f86bcfae9abcfe5" translate="yes" xml:space="preserve">
          <source>Available since v1.13.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cbed5ce0a0c543f083cb94ba0794ccecc4c7fa4" translate="yes" xml:space="preserve">
          <source>Available since v1.2.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1817a5987e844dea83caa7b5ea95d6df0e6a0d" translate="yes" xml:space="preserve">
          <source>Available since v1.3.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f3b82fb3769ad0453fc817aa75703f30589b78" translate="yes" xml:space="preserve">
          <source>Available since v1.4.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ec6cd66fd1830f6599c5c745a0cb1135a248a2" translate="yes" xml:space="preserve">
          <source>Available since v1.5.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637029e5d8e1b0b52723ee6ae2c2860f4e78a37f" translate="yes" xml:space="preserve">
          <source>Available since v1.6.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64e7928c287e36eafc378e5accbf9c372753679" translate="yes" xml:space="preserve">
          <source>Available since v1.7.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0c38a3e59a457a63c7004251b4b6898207e35c" translate="yes" xml:space="preserve">
          <source>Available since v1.8.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3744b5b921ed6915cf8361b3b798c70410086e" translate="yes" xml:space="preserve">
          <source>Available since v1.9.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8388dd9fd983d82070267383a7f6f51b7c9d13" translate="yes" xml:space="preserve">
          <source>Available since v2.1.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3434e05be6f8fede400b06a662f0990561f952a" translate="yes" xml:space="preserve">
          <source>Available since v2.10.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0c23dfcecfbbeed284e6e4641709d56c94d97e" translate="yes" xml:space="preserve">
          <source>Available since v2.3.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca4bb62c431adc047492d8e3e960cc6eab8ecde" translate="yes" xml:space="preserve">
          <source>Available since v2.5.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb0c66ed5a56f2f99d4dd12b1790eaab3bc3e60" translate="yes" xml:space="preserve">
          <source>Available since v3.10.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2533280aed0656aa4282b97bccc15bd70975d7b1" translate="yes" xml:space="preserve">
          <source>Available since v3.11.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59036079aac72fc3643c54d16e1571e06b975c70" translate="yes" xml:space="preserve">
          <source>Available since v3.8.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a962c55f21c6425bddac7366fbb0fe07122f56" translate="yes" xml:space="preserve">
          <source>Avoid using class state in field definitions, use the constructor instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f922b385a7e9f8d156ca4612a64f10a2b41eefb6" translate="yes" xml:space="preserve">
          <source>Backburner has support for stitching the stacktraces together so that you can track down where an erroring &lt;code&gt;Ember.run.later&lt;/code&gt; is being initiated from. Unfortunately, this is quite slow and is not appropriate for production or even normal development.</source>
          <target state="translated">Backburnerは、スタックトレースをつなぎ合わせることをサポートしているため、エラーのある &lt;code&gt;Ember.run.later&lt;/code&gt; がどこから開始されているのかを追跡できます。残念ながら、これは非常に遅く、本番や通常の開発には適していません。</target>
        </trans-unit>
        <trans-unit id="5565b8908d86a903cc35e6eae119d03aeaae8b40" translate="yes" xml:space="preserve">
          <source>Background Reloading</source>
          <target state="translated">背景のリロード</target>
        </trans-unit>
        <trans-unit id="57702bfb28ed9547528aa68a728d20b92c526740" translate="yes" xml:space="preserve">
          <source>Backwards Compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43441f538606a9564acd9157577fcf3dba0f20ef" translate="yes" xml:space="preserve">
          <source>Based on what we've already learned, we'll need:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68ef3a01126fe18f2427232120e8a7d3b05edf8" translate="yes" xml:space="preserve">
          <source>Basic Controller Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724fb49b1a2edb91c740412ddea2584f33b4cf3a" translate="yes" xml:space="preserve">
          <source>Basic Routes</source>
          <target state="translated">基本路線</target>
        </trans-unit>
        <trans-unit id="630b1b43052c22e1bd9799b5673582e36f998969" translate="yes" xml:space="preserve">
          <source>Basic Usage:</source>
          <target state="translated">基本的な使い方。</target>
        </trans-unit>
        <trans-unit id="8ada93b2847db3d5c94fbfbd017b469ec1eecca6" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;/posts&lt;/code&gt; represents a fixed model, we don't need any additional information to know what to retrieve. However, if we want a route to represent a single post, we would not want to have to hardcode every possible post into the router.</source>
          <target state="translated">&lt;code&gt;/posts&lt;/code&gt; は固定モデルを表すため、何を取得するかを知るために追加情報は必要ありません。ただし、単一の投稿を表すルートが必要な場合は、可能なすべての投稿をルーターにハードコーディングする必要はありません。</target>
        </trans-unit>
        <trans-unit id="703c87a452fefa1f8cdf42778798eae571808aea" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;Application&lt;/code&gt; ultimately inherits from &lt;code&gt;Ember.Namespace&lt;/code&gt;, any classes you create will have useful string representations when calling &lt;code&gt;toString()&lt;/code&gt;. See the &lt;code&gt;Ember.Namespace&lt;/code&gt; documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ccc7f51247a5205c6481d94736daa12929e2a1" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;Ember.Application&lt;/code&gt; inherits from &lt;code&gt;Ember.Namespace&lt;/code&gt;, any classes you create will have useful string representations when calling &lt;code&gt;toString()&lt;/code&gt;. See the &lt;code&gt;Ember.Namespace&lt;/code&gt; documentation for more information.</source>
          <target state="translated">ので &lt;code&gt;Ember.Application&lt;/code&gt; のから継承 &lt;code&gt;Ember.Namespace&lt;/code&gt; を呼び出すときに、あなたが作成したクラスが便利な文字列表現を持つことになります &lt;code&gt;toString()&lt;/code&gt; を。詳細については、 &lt;code&gt;Ember.Namespace&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="55a8c0c55c4e28bb69a194bcb179205c321affcc" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;get&lt;/code&gt; unifies the syntax for accessing all these kinds of properties, it can make many refactorings easier, such as replacing a simple property with a computed property, or vice versa.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; は、これらすべての種類のプロパティにアクセスするための構文を統合するため、単純なプロパティを計算されたプロパティに、またはその逆に置き換えるなど、多くのリファクタリングを容易にすることができます。</target>
        </trans-unit>
        <trans-unit id="67b77ee71ee30bcbfde972fdbc6ab17a5e638e72" translate="yes" xml:space="preserve">
          <source>Because HTML &lt;code&gt;input&lt;/code&gt; elements are self closing &lt;code&gt;layout&lt;/code&gt; and &lt;code&gt;layoutName&lt;/code&gt; properties will not be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9f1a41d095d76e52560e285eb25bb5dd766819" translate="yes" xml:space="preserve">
          <source>Because HTML &lt;code&gt;input&lt;/code&gt; elements are self closing &lt;code&gt;layout&lt;/code&gt; and &lt;code&gt;layoutName&lt;/code&gt; properties will not be applied. See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.View.html&quot;&gt;Ember.View&lt;/a&gt;'s layout section for more information.</source>
          <target state="translated">HTML &lt;code&gt;input&lt;/code&gt; 要素は自己終了 &lt;code&gt;layout&lt;/code&gt; なので、 &lt;code&gt;layoutName&lt;/code&gt; プロパティは適用されません。詳細については、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.View.html&quot;&gt;Ember.View&lt;/a&gt;のレイアウトセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="602c7bf83c39faf41cf7612a43c086d011bc111a" translate="yes" xml:space="preserve">
          <source>Because HTML &lt;code&gt;textarea&lt;/code&gt; elements do not contain inner HTML the &lt;code&gt;layout&lt;/code&gt; and &lt;code&gt;layoutName&lt;/code&gt; properties will not be applied. See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.View.html&quot;&gt;Ember.View&lt;/a&gt;'s layout section for more information.</source>
          <target state="translated">HTML &lt;code&gt;textarea&lt;/code&gt; 要素には内部HTMLが含まれていないため、 &lt;code&gt;layout&lt;/code&gt; プロパティと &lt;code&gt;layoutName&lt;/code&gt; プロパティは適用されません。詳細については、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.View.html&quot;&gt;Ember.View&lt;/a&gt;のレイアウトセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="ba56f36cf9504193e7d77883e84347df4194d7b2" translate="yes" xml:space="preserve">
          <source>Because of Ember's support for bindings and observers, you will always access properties using the get method, and set properties using the set method. This allows the observing objects to be notified and computed properties to be handled properly.</source>
          <target state="translated">Emberはバインディングとオブザーバーをサポートしているので、常にgetメソッドを使ってプロパティにアクセスし、setメソッドを使ってプロパティを設定します。これにより、オブザーバーしているオブジェクトへの通知や計算されたプロパティを適切に処理することができます。</target>
        </trans-unit>
        <trans-unit id="a8ae91d71186c8162e9906575f83ad0c71bb6c38" translate="yes" xml:space="preserve">
          <source>Because of this asynchronicity, the store immediately returns a &lt;em&gt;promise&lt;/em&gt; from the &lt;code&gt;find()&lt;/code&gt; method. Similarly, any requests that the store makes to the adapter also return promises.</source>
          <target state="translated">この非同期性のため、ストアはすぐに &lt;code&gt;find()&lt;/code&gt; メソッドから&lt;em&gt;promise&lt;/em&gt;を返します。同様に、ストアがアダプターに対して行う要求もすべてpromiseを返します。</target>
        </trans-unit>
        <trans-unit id="1906f295c19ea94c0e84848fcd2a5f2d27ed3c73" translate="yes" xml:space="preserve">
          <source>Because of this asynchronicity, the store immediately returns a &lt;em&gt;promise&lt;/em&gt; from the &lt;code&gt;findRecord()&lt;/code&gt; method. Similarly, any request that the store makes to the adapter also returns promises.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d641c61aa5f85907b53d2a176b90a86200658fbd" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;fullName&lt;/code&gt; computed property depends on &lt;code&gt;firstName&lt;/code&gt;, updating &lt;code&gt;firstName&lt;/code&gt; will fire observers on &lt;code&gt;fullName&lt;/code&gt; as well.</source>
          <target state="translated">ので &lt;code&gt;fullName&lt;/code&gt; 計算されたプロパティが依存する &lt;code&gt;firstName&lt;/code&gt; 、更新 &lt;code&gt;firstName&lt;/code&gt; のは、上のオブザーバーを発生させます &lt;code&gt;fullName&lt;/code&gt; にも。</target>
        </trans-unit>
        <trans-unit id="eb7c7a31498a049b34a25cec1fe640a98027671a" translate="yes" xml:space="preserve">
          <source>Because the code that is written must be readable by other machines (assistive tech like screen readers, for example), there is documentation about how this accessible name is determined: &lt;a href=&quot;https://www.w3.org/TR/accname-1.1/&quot;&gt;Accessible Name and Description Computation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc82e24ccce33a201125d0a9e25397d88d38a3a" translate="yes" xml:space="preserve">
          <source>Because the priority is first to last, the &quot;sync&quot; queue has higher priority than the &quot;render&quot; or &quot;destroy&quot; queue.</source>
          <target state="translated">優先度は最初から最後までなので、&quot;sync&quot; キューは &quot;render&quot; や &quot;destroy&quot; キューよりも高い優先度を持っています。</target>
        </trans-unit>
        <trans-unit id="ca516588fe4aad411d8ce205b4c2db67008a7f2e" translate="yes" xml:space="preserve">
          <source>Because we only plan to display static content on our about page, we won't adjust the &lt;code&gt;/app/routes/about.js&lt;/code&gt; route handler file right now. Instead, let's open our &lt;code&gt;/app/templates/about.hbs&lt;/code&gt; template file and add some info about Super Rentals:</source>
          <target state="translated">静的コンテンツはaboutページにのみ表示する予定なので、 &lt;code&gt;/app/routes/about.js&lt;/code&gt; は/app/routes/about.jsルートハンドラーファイルを調整しません。代わりに、 &lt;code&gt;/app/templates/about.hbs&lt;/code&gt; templates / about.hbsテンプレートファイルを開いて、スーパーレンタルに関する情報を追加します。</target>
        </trans-unit>
        <trans-unit id="fdd6c7e36bfcc169635cb2a250fa0ec9a5191758" translate="yes" xml:space="preserve">
          <source>Becomes true whenever the array currently has observers watching changes on the array.</source>
          <target state="translated">現在、配列の変更を監視しているオブザーバーがいる場合は、真になります。</target>
        </trans-unit>
        <trans-unit id="a15ca45f6217e208c1d6bbd430b7df52f8019e01" translate="yes" xml:space="preserve">
          <source>Before classes were available in JavaScript, Ember developers still got to use some class-like features thanks to &lt;code&gt;@ember/object&lt;/code&gt;. Now that classes are available in JavaScript, we can do away with some of the &lt;code&gt;@ember/object&lt;/code&gt; quirks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a6eefa17e5e40fcc7e29e936936740d9b86b04" translate="yes" xml:space="preserve">
          <source>Before implementing a map, we need to make a 3rd party map API available to our Ember app. There are several ways to include 3rd party libraries in Ember. See the guides section on &lt;a href=&quot;https://guides.emberjs.com/addons-and-dependencies/managing-dependencies/&quot;&gt;managing dependencies&lt;/a&gt; as a starting point when you need to add one.</source>
          <target state="translated">マップを実装する前に、EmberアプリでサードパーティのマップAPIを利用できるようにする必要があります。Emberにサードパーティのライブラリを含めるには、いくつかの方法があります。&lt;a href=&quot;https://guides.emberjs.com/addons-and-dependencies/managing-dependencies/&quot;&gt;依存関係&lt;/a&gt;を追加する必要がある場合の出発点として、依存関係の管理に関するガイドのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="04482d2da333522926f72a356a5bfba9d31b6e01" translate="yes" xml:space="preserve">
          <source>Before making an assertion, wait for the execution of each asynchronous helper to finish with the &lt;code&gt;await&lt;/code&gt; keyword:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184486c397e2c3cf6e270cc0294995f58c89b4c2" translate="yes" xml:space="preserve">
          <source>Before you start writing any Ember code, it's a good idea to get an overview of how an Ember application works.</source>
          <target state="translated">Ember のコードを書き始める前に、Ember アプリケーションがどのように動作するかの概要を知ることは良いアイデアです。</target>
        </trans-unit>
        <trans-unit id="842beb51ca9c5417a27f472386d0e0d52dcc074f" translate="yes" xml:space="preserve">
          <source>Before:</source>
          <target state="translated">Before:</target>
        </trans-unit>
        <trans-unit id="8240b85129915e6d5d39790b593e31a4e70811e9" translate="yes" xml:space="preserve">
          <source>Begins a new RunLoop. Any deferred actions invoked after the begin will be buffered until you invoke a matching call to &lt;code&gt;end()&lt;/code&gt;. This is a lower-level way to use a RunLoop instead of using &lt;code&gt;run()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c8d5f7603f2678d521765ce966807c817dad7a" translate="yes" xml:space="preserve">
          <source>Begins a new RunLoop. Any deferred actions invoked after the begin will be buffered until you invoke a matching call to &lt;code&gt;run.end()&lt;/code&gt;. This is a lower-level way to use a RunLoop instead of using &lt;code&gt;run()&lt;/code&gt;.</source>
          <target state="translated">新しいRunLoopを開始します。開始後に呼び出された遅延アクションは、 &lt;code&gt;run.end()&lt;/code&gt; への対応する呼び出しを呼び出すまでバッファリングされます。これは、 &lt;code&gt;run()&lt;/code&gt; を使用する代わりに、RunLoopを使用する下位レベルの方法です。</target>
        </trans-unit>
        <trans-unit id="9773bb2a4e6fbd3e49a503a393c63119abf5b295" translate="yes" xml:space="preserve">
          <source>Behind the scenes, the CDN will distribute your content geographically with the goal of end-users being able to fetch your content with the lowest latency possible. For example, if a user is in India, they'd likely get content served from India faster than from the United States.</source>
          <target state="translated">裏では、エンドユーザーが可能な限り低いレイテンシでコンテンツを取得できるようにすることを目標に、CDNはコンテンツを地理的に配信します。例えば、ユーザーがインドにいる場合、米国よりもインドからの方が早くコンテンツが配信される可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="906f6d01a6b90b3a4f2198b043497bcdff757722" translate="yes" xml:space="preserve">
          <source>Behind the scenes, what is happening is that the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#setupController&quot;&gt;route's controller&lt;/a&gt; receives the results of the model hook, and Ember makes the model hook results available to the template. Your app may not have a controller file for the route, but the behavior is the same regardless.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85bf548552e758a473fb421db7fd35efa4f3e605" translate="yes" xml:space="preserve">
          <source>BelongsTo: &lt;code&gt;{ serialize: 'id', deserialize: 'id' }&lt;/code&gt; HasMany: &lt;code&gt;{ serialize: false, deserialize: 'ids' }&lt;/code&gt;</source>
          <target state="translated">BelongsTo： &lt;code&gt;{ serialize: 'id', deserialize: 'id' }&lt;/code&gt; deserialize：'id'} HasMany： &lt;code&gt;{ serialize: false, deserialize: 'ids' }&lt;/code&gt; deserialize ： 'ids'}</target>
        </trans-unit>
        <trans-unit id="92540263d683ad033101e89c7ab3438af02cd9e3" translate="yes" xml:space="preserve">
          <source>BelongsToReference</source>
          <target state="translated">BelongsToReference</target>
        </trans-unit>
        <trans-unit id="34bcf95e632553eda17103e231139562411bada0" translate="yes" xml:space="preserve">
          <source>Below are some common issues you may encounter when using the Inspector, along with the necessary steps to solve them. If your issue is not listed below, please submit an issue to the Inspector's &lt;a href=&quot;https://github.com/emberjs/ember-inspector&quot;&gt;GitHub repo&lt;/a&gt;.</source>
          <target state="translated">以下は、インスペクタの使用時に発生する可能性のある一般的な問題と、それらを解決するために必要な手順です。問題が以下に記載されていない場合は、問題をインスペクターの&lt;a href=&quot;https://github.com/emberjs/ember-inspector&quot;&gt;GitHubリポジトリに&lt;/a&gt;送信してください。</target>
        </trans-unit>
        <trans-unit id="695b0847861d155aac843f4e4ca8e305041ec8f4" translate="yes" xml:space="preserve">
          <source>Below are some samples of ways to use lifecycle hooks within your components.</source>
          <target state="translated">以下は、コンポーネント内でライフサイクルフックを使用する方法のサンプルです。</target>
        </trans-unit>
        <trans-unit id="291e904f8a7fa5eaebfe7e0fa23177cf263270c5" translate="yes" xml:space="preserve">
          <source>Below is a description of each of the methods on the interface and their functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b3e9556caf521f66e82350368ec5ac768ca0c64" translate="yes" xml:space="preserve">
          <source>Below is an example of a per-type serializer (&lt;code&gt;post&lt;/code&gt; type).</source>
          <target state="translated">以下は、タイプごとのシリアライザ（ &lt;code&gt;post&lt;/code&gt; タイプ）の例です。</target>
        </trans-unit>
        <trans-unit id="a5e6e234b7ed9fe5a6c682b1f355706eb29a9173" translate="yes" xml:space="preserve">
          <source>Below is the documentation for Classic components. If you are looking for the API documentation for Template-only or Glimmer components, it is &lt;a href=&quot;https://api.emberjs.com/ember/release/modules/@glimmer%2Fcomponent&quot;&gt;available here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5214898b090fa876877b6b5782df9c4ca539a4ab" translate="yes" xml:space="preserve">
          <source>Below is the documentation for Template-only and Glimmer components. If you are looking for the API documentation for Classic components, it is &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Component&quot;&gt;available here&lt;/a&gt;. The source code for Glimmer components can be found in &lt;a href=&quot;https://github.com/glimmerjs/glimmer.js/tree/master/packages/%40glimmer/component&quot;&gt;&lt;code&gt;@glimmer/component&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f7d46e71b9894cafca4065f881ca95a83b2f4d" translate="yes" xml:space="preserve">
          <source>Below is the same deprecation-workflow file as above, now with a regular expression on line 7 to remove some redundant messages. Note that the double quotes around &lt;code&gt;matchMessage&lt;/code&gt; have also been replaced with forward slashes.</source>
          <target state="translated">以下は上記と同じdeprecation-workflowファイルですが、冗長なメッセージを削除するための正規表現が7行目にあります。 &lt;code&gt;matchMessage&lt;/code&gt; を囲む二重引用符もスラッシュに置き換えられていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="960ac88bd1d4540756c95bea14732962f11a19f9" translate="yes" xml:space="preserve">
          <source>Below we add a remove action to the &lt;code&gt;cart-contents&lt;/code&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a9a448876963b1a5013979ed02936a580daf1c" translate="yes" xml:space="preserve">
          <source>Below we add a remove action to the &lt;code&gt;cart-contents&lt;/code&gt; component. Notice that below we access the &lt;code&gt;cart&lt;/code&gt; service with a call to&lt;code&gt;this.get&lt;/code&gt;.</source>
          <target state="translated">以下で、 &lt;code&gt;cart-contents&lt;/code&gt; コンポーネントに削除アクションを追加します。以下では、 &lt;code&gt;this.get&lt;/code&gt; を呼び出して &lt;code&gt;cart&lt;/code&gt; サービスにアクセスしています。</target>
        </trans-unit>
        <trans-unit id="51b4cff8c754b5b9b24475fc5afafb96a504a228" translate="yes" xml:space="preserve">
          <source>Benefits of &lt;code&gt;@action&lt;/code&gt;, &lt;code&gt;{{on}}&lt;/code&gt;, and &lt;code&gt;{{fn}}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5993b6fe592213a9dee75afd9977b364d041cf" translate="yes" xml:space="preserve">
          <source>Benefits of &lt;code&gt;this&lt;/code&gt; in templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d805670dc60d575e2674fc162ed5333fdaf9ed" translate="yes" xml:space="preserve">
          <source>Benefits of Angle Brackets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf7e8222edbd1952d167ab4f155593b14ed8f5c" translate="yes" xml:space="preserve">
          <source>Benefits of Glimmer Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa0cef06f33464183b43f7427091e72e76b7594" translate="yes" xml:space="preserve">
          <source>Benefits of Named Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603930dfc6b353770972149ffe4795e9a9a59760" translate="yes" xml:space="preserve">
          <source>Benefits of Native Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b755469ac3ec99d13fd59add395b3ab0022475" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;{{action}}&lt;/code&gt;, it is also possible to pass any arbitrary element modifiers using the angle bracket invocation syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3473ae839d7876b9c12e956bc85aa276fbfee546" translate="yes" xml:space="preserve">
          <source>Besides ES6, you'll see a lot of content about compiling/transpiling CoffeeScript, a short-hand language which can &quot;compile&quot; to JavaScript.</source>
          <target state="translated">ES6の他にも、CoffeeScriptをJavaScriptに &quot;コンパイル &quot;できるショートハンド言語であるCoffeeScriptのコンパイル/トランスパイリングに関する内容が盛りだくさんです。</target>
        </trans-unit>
        <trans-unit id="7bd0ed1d9030f89c91af701f519d5b94d60de999" translate="yes" xml:space="preserve">
          <source>Besides properties, double curly braces (&lt;code&gt;{{}}&lt;/code&gt;) may also contain helpers and components, which we'll discuss later.</source>
          <target state="translated">プロパティの他に、二重中括弧（ &lt;code&gt;{{}}&lt;/code&gt; ）にはヘルパーとコンポーネントが含まれる場合がありますが、これについては後で説明します。</target>
        </trans-unit>
        <trans-unit id="47be2ca9b139f48a82092d21ad3c72eab6501a34" translate="yes" xml:space="preserve">
          <source>Besides the custom class name for the value being &lt;code&gt;true&lt;/code&gt;, you can also specify a class name which is used when the value is &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">値が &lt;code&gt;true&lt;/code&gt; のカスタムクラス名に加えて、値が &lt;code&gt;false&lt;/code&gt; の場合に使用されるクラス名を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="e41f7d1bc0d0c7928ac6d1fa13f85a10f010279b" translate="yes" xml:space="preserve">
          <source>Beta features that receive negative feedback from the community are disabled in the next beta point release, and are not included in the next stable release. They may still be included in the next beta cycle if the issues/concerns are resolved.</source>
          <target state="translated">コミュニティから否定的なフィードバックを受けたベータ機能は、次のベータポイントリリースで無効化され、次の安定版リリースには含まれません。問題/懸念事項が解決されていれば、次のベータサイクルに含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="24f5a3e51e94cbb9080af9327164878aa332067a" translate="yes" xml:space="preserve">
          <source>Binding Element Attributes</source>
          <target state="translated">バインディング要素の属性</target>
        </trans-unit>
        <trans-unit id="9f37cd8b58ca3436726a232f6276b6be473416cd" translate="yes" xml:space="preserve">
          <source>Binding dynamic attribute</source>
          <target state="translated">バインディング動的属性</target>
        </trans-unit>
        <trans-unit id="967382f86044b6efc91dfee8f4e2b4ed941211cd" translate="yes" xml:space="preserve">
          <source>Bindings</source>
          <target state="translated">Bindings</target>
        </trans-unit>
        <trans-unit id="0fd5e5702c2a2b8d9bd0d8e5ff6ccbb97a1c033a" translate="yes" xml:space="preserve">
          <source>Block &lt;code&gt;if&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0fc82b79b091f59214a16221b95376c703b10e" translate="yes" xml:space="preserve">
          <source>Block Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9fb8189ac6f1cb7e0b9631557e27da8a854c72c" translate="yes" xml:space="preserve">
          <source>Block Form</source>
          <target state="translated">ブロック形式</target>
        </trans-unit>
        <trans-unit id="557758c8174336d6369c72e1c97a88e6c9ef1fba" translate="yes" xml:space="preserve">
          <source>Block Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c105cc5dcc58a17f4df8de56aee738e2affa3ce3" translate="yes" xml:space="preserve">
          <source>Block form</source>
          <target state="translated">ブロック形式</target>
        </trans-unit>
        <trans-unit id="49100a3290d374e27e83d19e957ac12342793e83" translate="yes" xml:space="preserve">
          <source>Block params, like function arguments in JavaScript, are positional. &lt;code&gt;person&lt;/code&gt; is what each item is named in the above template, but &lt;code&gt;human&lt;/code&gt; would work just as well.</source>
          <target state="translated">JavaScriptの関数引数と同様に、ブロックパラメーターは定位置です。 &lt;code&gt;person&lt;/code&gt; は、上記のテンプレートで各アイテムが命名されているものですが、 &lt;code&gt;human&lt;/code&gt; も同様に機能します。</target>
        </trans-unit>
        <trans-unit id="89cdbb7139e3739622efe0d88dcc4fd99073a62a" translate="yes" xml:space="preserve">
          <source>Blocks are executed in their original context, meaning they have access to the scope and any in-scope variables where they were defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c713ca305dca3bf7efdc467b2029c62aa3cd50c" translate="yes" xml:space="preserve">
          <source>Blocks can also pass values back into the template, similar to a callback function in JavaScript. Consider for instance a simple &lt;code&gt;BlogPost&lt;/code&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9eec850bd8792a378b84e4f28265bdea7e3c7a6" translate="yes" xml:space="preserve">
          <source>Blog dates are properly formatted.</source>
          <target state="translated">ブログの日付は適切にフォーマットされています。</target>
        </trans-unit>
        <trans-unit id="e963a85c0c8a238f5361e2429d62278cf5e7dc39" translate="yes" xml:space="preserve">
          <source>Bookmark Me</source>
          <target state="translated">ブックマーク</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="5c7f3b824274f00a1a1136adcf6ac0c94cc5233f" translate="yes" xml:space="preserve">
          <source>Boolean value class name bindings whose property names are in a camelCase-style format will be converted to a dasherized format:</source>
          <target state="translated">ブーリアン値 プロパティ名がキャメルカテー スタイル形式のクラス名バインディングは、 破線化形式に変換されます。</target>
        </trans-unit>
        <trans-unit id="da3d2f1c6bd8c47dc3e21495ee821cf23c600c93" translate="yes" xml:space="preserve">
          <source>BooleanTransform</source>
          <target state="translated">BooleanTransform</target>
        </trans-unit>
        <trans-unit id="73d63b221c33e6a800a0a8b60a2835cfc7c99d59" translate="yes" xml:space="preserve">
          <source>Boolean|Array</source>
          <target state="translated">Boolean|Array</target>
        </trans-unit>
        <trans-unit id="a0ce6d436df7b39ce692560a8fcae315bc3649d0" translate="yes" xml:space="preserve">
          <source>Boot a new instance of &lt;code&gt;ApplicationInstance&lt;/code&gt; for the current application and navigate it to the given &lt;code&gt;url&lt;/code&gt;. Returns a &lt;code&gt;Promise&lt;/code&gt; that resolves with the instance when the initial routing and rendering is complete, or rejects with any error that occurred during the boot process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b662f901820aa84703a5ab27406f020b71d12fac" translate="yes" xml:space="preserve">
          <source>Boot a new instance of &lt;code&gt;Ember.ApplicationInstance&lt;/code&gt; for the current application and navigate it to the given &lt;code&gt;url&lt;/code&gt;. Returns a &lt;code&gt;Promise&lt;/code&gt; that resolves with the instance when the initial routing and rendering is complete, or rejects with any error that occurred during the boot process.</source>
          <target state="translated">現在のアプリケーションの &lt;code&gt;Ember.ApplicationInstance&lt;/code&gt; の新しいインスタンスを起動し、指定された &lt;code&gt;url&lt;/code&gt; 移動します。最初のルーティングとレンダリングが完了したときにインスタンスで解決する &lt;code&gt;Promise&lt;/code&gt; を返すか、起動プロセス中に発生したエラーで拒否します。</target>
        </trans-unit>
        <trans-unit id="ce578ae18e3ade88013885d6663439b3efff0f30" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;classNames&lt;/code&gt; and &lt;code&gt;classNameBindings&lt;/code&gt; are concatenated properties. See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/EmberObject&quot;&gt;EmberObject&lt;/a&gt; documentation for more information about concatenated properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95fba81bae1171011d3f83b597f4397b483f650b" translate="yes" xml:space="preserve">
          <source>Both LESS and Sass are types of CSS preprocessor markup intended to give you much more control over your CSS. During the build process, the LESS or Sass resources compile down to vanilla CSS (which can be executed in a browser).</source>
          <target state="translated">LESS と Sass は両方とも CSS プリプロセッサのマークアップで、CSS をより多く制御できるようにすることを目的としています。ビルドプロセスの間に、LESS や Sass リソースはバニラ CSS (ブラウザで実行可能な)にコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="75850e5e7412f29fd9186adb3afcb9b8ecaa0835" translate="yes" xml:space="preserve">
          <source>Both assistive technologies and conventional user agents can render text more accurately when the language of the Web page is identified. Screen readers can load the correct pronunciation rules. Visual browsers can display characters and scripts correctly. Media players can show captions correctly. As a result, users with disabilities will be better able to understand the content. &lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/language-of-page.html#intent&quot;&gt;WCAG Success Criterion 3.1.1: Intent&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89800a13eb0f94d7dbcccff2650f44de3da79f96" translate="yes" xml:space="preserve">
          <source>Both callbacks will be passed the observed object, starting index of the change as well as a count of the items to be removed and added. You can use these callbacks to optionally inspect the array during the change, clear caches, or do any other bookkeeping necessary.</source>
          <target state="translated">どちらのコールバックにも、観測されたオブジェクト、変更の開始インデックス、削除・追加されるアイテムのカウントが渡されます。これらのコールバックを使用して、変更中の配列を検査したり、キャッシュをクリアしたり、その他の必要な帳尻合わせをしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="f84f09199f3be61351b1b4385a55c855a5ce2cc8" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;{{this.count}}&lt;/code&gt; and the &lt;code&gt;{{this.timesTen}}&lt;/code&gt; properties in the template will update whenever the button is clicked. Any tracked properties that are used in any way to calculate a value that is used in the template will cause a rerender when updated - this includes through method calls and other means:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca7b25a12ee371fde32a1fae5ec55c746045403" translate="yes" xml:space="preserve">
          <source>Both the HTML and ARIA specifications have been written in a way that make them work together. Semantic HTML provides the necessary &lt;em&gt;context&lt;/em&gt; to screen readers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8a0bed1ace1b0a0bdc6b8c1770fd716ea80639" translate="yes" xml:space="preserve">
          <source>Both will result in:</source>
          <target state="translated">どちらも結果が出ます。</target>
        </trans-unit>
        <trans-unit id="ed6f071f5d1cc63649929752e477025e55f321df" translate="yes" xml:space="preserve">
          <source>Bound template names</source>
          <target state="translated">バウンドテンプレート名</target>
        </trans-unit>
        <trans-unit id="2d322fc75b209892986aecddff9f51e3a71cdf28" translate="yes" xml:space="preserve">
          <source>Bound:</source>
          <target state="translated">Bound:</target>
        </trans-unit>
        <trans-unit id="1f688a06e547b5c3a43787858bd62f64749948d7" translate="yes" xml:space="preserve">
          <source>Bower</source>
          <target state="translated">Bower</target>
        </trans-unit>
        <trans-unit id="79db4f10279d627796ca873c8258739a62aa8ab0" translate="yes" xml:space="preserve">
          <source>Breaking Components Down Further</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8044e0e2cd7a5d532114324b6f745ced2e7d0cca" translate="yes" xml:space="preserve">
          <source>Breaking it into pieces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1b3fb569c8c631d02d11ef9aec80f1758c78ab" translate="yes" xml:space="preserve">
          <source>Broadly speaking, these tests differ in two aspects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b025f7993f95344119634bb5b50e594147ae1a68" translate="yes" xml:space="preserve">
          <source>Browser Applications (Manual Boot)</source>
          <target state="translated">ブラウザアプリケーション(手動起動</target>
        </trans-unit>
        <trans-unit id="8b8f118d4bcfd41266285e6076c5e95f509a6757" translate="yes" xml:space="preserve">
          <source>Browser events may bubble up the DOM which potentially target parent component(s) in succession. To enable bubbling &lt;code&gt;return true;&lt;/code&gt; from the event handler method in your component.</source>
          <target state="translated">ブラウザイベントは、親コンポーネントを連続してターゲットにする可能性のあるDOMをバブルアップする可能性があります。バブリングを有効にするには、 &lt;code&gt;return true;&lt;/code&gt; コンポーネントのイベントハンドラーメソッドから。</target>
        </trans-unit>
        <trans-unit id="dea4f8853fb3a2f492dbca9fc45fc7edbced2316" translate="yes" xml:space="preserve">
          <source>Browsers have implemented the spec in a way that provides functionality for free. For example, consider this code sample:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15d854cfd26c3a30d616d8c01e10ae84ecf8196" translate="yes" xml:space="preserve">
          <source>Browsers that support the &lt;code&gt;history&lt;/code&gt; API will use &lt;code&gt;HistoryLocation&lt;/code&gt;, those that do not, but still support the &lt;code&gt;hashchange&lt;/code&gt; event will use &lt;code&gt;HashLocation&lt;/code&gt;, and in the rare case neither is supported will use &lt;code&gt;NoneLocation&lt;/code&gt;.</source>
          <target state="translated">サポートしているブラウザ &lt;code&gt;history&lt;/code&gt; APIを使用します &lt;code&gt;HistoryLocation&lt;/code&gt; 、そうでないものを、まだサポートしてい &lt;code&gt;hashchange&lt;/code&gt; イベントが使用する &lt;code&gt;HashLocation&lt;/code&gt; を、そしてまれなケースではどちらも使用されますサポートされていません &lt;code&gt;NoneLocation&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="5a9ec828f41619019abe66fcb1522f78d729dcdd" translate="yes" xml:space="preserve">
          <source>Browsers that update themselves (without user intervention).</source>
          <target state="translated">自分で更新する(ユーザーの介入なしに)ブラウザ。</target>
        </trans-unit>
        <trans-unit id="e4f261aee464809e1efb47e6e6abe22ebb1ee313" translate="yes" xml:space="preserve">
          <source>Bubbling</source>
          <target state="translated">Bubbling</target>
        </trans-unit>
        <trans-unit id="9692f5b1d0f56ef48cf5214d3d7cc75fc9d32e16" translate="yes" xml:space="preserve">
          <source>Build Time Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dae71cf45c8a0e9183a358920801e89f36db04b" translate="yes" xml:space="preserve">
          <source>Build targets</source>
          <target state="translated">ビルドターゲット</target>
        </trans-unit>
        <trans-unit id="c1abd6bb45baaafc89778e0a9b4a7b6c23db4a86" translate="yes" xml:space="preserve">
          <source>Build targets can also be leveraged in other ways.</source>
          <target state="translated">ビルドターゲットは他の方法でも活用できます。</target>
        </trans-unit>
        <trans-unit id="949f39e87da5e3d727e3238031714d8c0c9b09db" translate="yes" xml:space="preserve">
          <source>BuildURLMixin</source>
          <target state="translated">BuildURLMixin</target>
        </trans-unit>
        <trans-unit id="00fa25106b200476be5023b7fcc1482fb3e8d675" translate="yes" xml:space="preserve">
          <source>Building For Production</source>
          <target state="translated">生産のための建物</target>
        </trans-unit>
        <trans-unit id="2c95c403d24822dffbdf94a7023c8ec2a153b6c4" translate="yes" xml:space="preserve">
          <source>Building a Complex Component</source>
          <target state="translated">複雑なコンポーネントの構築</target>
        </trans-unit>
        <trans-unit id="c9f06e233758385d11a72ecfb17f98f65687a46c" translate="yes" xml:space="preserve">
          <source>Building a Data Custom Adapter</source>
          <target state="translated">データカスタムアダプタの構築</target>
        </trans-unit>
        <trans-unit id="17241a49497275e3e421151e5f4ee28e0a030424" translate="yes" xml:space="preserve">
          <source>Building a Simple Component</source>
          <target state="translated">シンプルなコンポーネントの構築</target>
        </trans-unit>
        <trans-unit id="f3245d43f4e9a449ac5c57e3e7dc226da1811bda" translate="yes" xml:space="preserve">
          <source>Building your app to be deployed to production.</source>
          <target state="translated">本番環境にデプロイするためのアプリを構築します。</target>
        </trans-unit>
        <trans-unit id="6d640a1770c22e89b504595a96b4dce39204681f" translate="yes" xml:space="preserve">
          <source>Builds a URL for a &lt;code&gt;record.save()&lt;/code&gt; call when the record has been deleted locally.</source>
          <target state="translated">レコードがローカルで削除されたときに、 &lt;code&gt;record.save()&lt;/code&gt; 呼び出しのURLを作成します。</target>
        </trans-unit>
        <trans-unit id="289ae0cc6ffa2786ea63f4cedac431aa1484e1cd" translate="yes" xml:space="preserve">
          <source>Builds a URL for a &lt;code&gt;record.save()&lt;/code&gt; call when the record has been update locally.</source>
          <target state="translated">レコードがローカルで更新されたときに、 &lt;code&gt;record.save()&lt;/code&gt; 呼び出しのURLを作成します。</target>
        </trans-unit>
        <trans-unit id="972541165054c599d0a7b044c37ee45fe27f745f" translate="yes" xml:space="preserve">
          <source>Builds a URL for a &lt;code&gt;record.save()&lt;/code&gt; call when the record has been updated locally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d350078e26d21f68136280426da67e8a907f343e" translate="yes" xml:space="preserve">
          <source>Builds a URL for a &lt;code&gt;record.save()&lt;/code&gt; call when the record was created locally using &lt;code&gt;store.createRecord()&lt;/code&gt;.</source>
          <target state="translated">以下のためのURLを構築します &lt;code&gt;record.save()&lt;/code&gt; レコードが使用してローカルで作成されたコール &lt;code&gt;store.createRecord()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1dfb681ca48cfff21ea2a7ad620205777787d787" translate="yes" xml:space="preserve">
          <source>Builds a URL for a &lt;code&gt;store.findAll(type)&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;store.findAll(type)&lt;/code&gt; 呼び出しのURLを作成します。</target>
        </trans-unit>
        <trans-unit id="e7d2314d8c9f05f30039eb7bae0132751cf51c6b" translate="yes" xml:space="preserve">
          <source>Builds a URL for a &lt;code&gt;store.findRecord(type, id)&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;store.findRecord(type, id)&lt;/code&gt; 呼び出しのURLを作成します。</target>
        </trans-unit>
        <trans-unit id="82391b65699069ed3c665e2b23aac1e08fddb98f" translate="yes" xml:space="preserve">
          <source>Builds a URL for a &lt;code&gt;store.query(type, query)&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;store.query(type, query)&lt;/code&gt; 呼び出しのURLを作成します。</target>
        </trans-unit>
        <trans-unit id="b32be656fe1758525ec4dd75f03d80311884b6b3" translate="yes" xml:space="preserve">
          <source>Builds a URL for a &lt;code&gt;store.queryRecord(type, query)&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;store.queryRecord(type, query)&lt;/code&gt; 呼び出しのURLを作成します。</target>
        </trans-unit>
        <trans-unit id="40808a15f11cbe2c37ecc100f6b988095474cdc8" translate="yes" xml:space="preserve">
          <source>Builds a URL for a given type and optional ID.</source>
          <target state="translated">指定したタイプとオプションの ID の URL をビルドします。</target>
        </trans-unit>
        <trans-unit id="25e79b0b1e91c20a07cd7f9cd8210c28d74d38d8" translate="yes" xml:space="preserve">
          <source>Builds a URL for coalesceing multiple &lt;code&gt;store.findRecord(type, id)&lt;/code&gt; records into 1 request when the adapter's &lt;code&gt;coalesceFindRequests&lt;/code&gt; property is true.</source>
          <target state="translated">アダプターの &lt;code&gt;coalesceFindRequests&lt;/code&gt; プロパティがtrue の場合、複数の &lt;code&gt;store.findRecord(type, id)&lt;/code&gt; レコードを合体するためのURLを1つのリクエストに構築します。</target>
        </trans-unit>
        <trans-unit id="8e1ddfdef5a8a0027c4aa848724449adf561c0d2" translate="yes" xml:space="preserve">
          <source>Builds a URL for coalescing multiple &lt;code&gt;store.findRecord(type, id)&lt;/code&gt; records into 1 request when the adapter's &lt;code&gt;coalesceFindRequests&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c2479aa18da61dd22009ae36e8b89dfec12911" translate="yes" xml:space="preserve">
          <source>Builds a URL for fetching a async belongsTo relationship when a url is not provided by the server.</source>
          <target state="translated">サーバーからURLが提供されていない場合に、非同期の belongsTo リレーションシップを取得するためのURLをビルドします。</target>
        </trans-unit>
        <trans-unit id="a35268be645341dac3e743b249648a36a1e1d1d2" translate="yes" xml:space="preserve">
          <source>Builds a URL for fetching a async hasMany relationship when a url is not provided by the server.</source>
          <target state="translated">サーバーからURLが提供されていない場合に、非同期のhasManyリレーションシップを取得するためのURLをビルドします。</target>
        </trans-unit>
        <trans-unit id="4373a991c55677910bdd0b033632b1b6527b05fa" translate="yes" xml:space="preserve">
          <source>Builds a URL for fetching an async &lt;code&gt;belongsTo&lt;/code&gt; relationship when a url is not provided by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37287c4a278164a757cb95ff1781ecdfbe7e50aa" translate="yes" xml:space="preserve">
          <source>Builds a URL for fetching an async &lt;code&gt;hasMany&lt;/code&gt; relationship when a URL is not provided by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6408bfefa5794bb4225a8f01f57427e9c8517b2c" translate="yes" xml:space="preserve">
          <source>Built-in Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7998e59d701a8696fc25146f2f6266408261fbbd" translate="yes" xml:space="preserve">
          <source>Built-in Helpers</source>
          <target state="translated">内蔵ヘルパー</target>
        </trans-unit>
        <trans-unit id="8946a7120570480ad6f64547621ff0e3a3252d35" translate="yes" xml:space="preserve">
          <source>But ES5 code is usually more verbose than the original Javascript, and over time, as browsers gain the ability to execute the new features in JavaScript and older browsers lose users, many users won't really want this verbose code as it increases their app's size and load times.</source>
          <target state="translated">しかし、ES5のコードは通常、オリジナルのJavascriptよりも冗長で、時間が経つにつれて、ブラウザがJavaScriptの新機能を実行できるようになり、古いブラウザはユーザーを失うため、多くのユーザーは、アプリのサイズとロード時間を増加させるため、この冗長なコードを本当に望んでいないでしょう。</target>
        </trans-unit>
        <trans-unit id="cd136bf9fc0af13e9982e53db70c41367980fbfd" translate="yes" xml:space="preserve">
          <source>But once loaded on a model instance, it will behave as an object:</source>
          <target state="translated">しかし、モデルインスタンスにロードされると、それはオブジェクトとして動作します。</target>
        </trans-unit>
        <trans-unit id="70648fb1a98c6183bbac202e5d24fe2d631d6029" translate="yes" xml:space="preserve">
          <source>But our server expects data in this format:</source>
          <target state="translated">しかし、私たちのサーバーはこの形式のデータを求めています。</target>
        </trans-unit>
        <trans-unit id="9edfc7552deebbb18f0fcd23aa280b2438c4b3da" translate="yes" xml:space="preserve">
          <source>But the following will:</source>
          <target state="translated">しかし、次のようになります。</target>
        </trans-unit>
        <trans-unit id="a788cef036130d6b8fd8fd213fc2929e639d7b6c" translate="yes" xml:space="preserve">
          <source>But this other case will schedule the function multiple times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105761152a1448c15df936786b070c1da391811a" translate="yes" xml:space="preserve">
          <source>But we'll also need a way to multiply the &lt;code&gt;count&lt;/code&gt; by the &lt;code&gt;multiple&lt;/code&gt; and show it in the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac8b3afa0ebd029a579db73918b0978c18de432" translate="yes" xml:space="preserve">
          <source>But what about the opposite direction? How does data flow back out of the component to the parent? In Ember, components use &lt;strong&gt;actions&lt;/strong&gt; to communicate events and changes.</source>
          <target state="translated">しかし、反対の方向はどうですか？データはどのようにコンポーネントから親に戻されますか？Emberでは、コンポーネントは&lt;strong&gt;アクション&lt;/strong&gt;を使用してイベントと変更を伝達します。</target>
        </trans-unit>
        <trans-unit id="fed83b386ca22cd097b5f221caba2b9ded956d8f" translate="yes" xml:space="preserve">
          <source>But what if you have an Ember.js app that you need to embed into an existing page, or run alongside other JavaScript frameworks, or serve from the same domain as another app?</source>
          <target state="translated">しかし、Ember.jsアプリを既存のページに埋め込む必要があったり、他のJavaScriptフレームワークと一緒に実行したり、別のアプリと同じドメインからサービスを提供したりする必要がある場合はどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="44849edc12fbad6421a2a5d67b046e93c35939f6" translate="yes" xml:space="preserve">
          <source>But when you need to add static methods or static properties to the class itself you can use &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_reopenClass&quot;&gt;&lt;code&gt;reopenClass()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ただし、クラス自体に静的メソッドまたは静的プロパティを追加する必要がある場合は、&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_reopenClass&quot;&gt; &lt;code&gt;reopenClass()&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="d94eb2b1e7432dbcbffc3890c7ed0270a6876866" translate="yes" xml:space="preserve">
          <source>By calling &lt;code&gt;setupTest()&lt;/code&gt;, you gain access to a few things. First is Ember's &lt;a href=&quot;https://guides.emberjs.com/applications/dependency-injection/&quot;&gt;Dependency Injection&lt;/a&gt; system. In short, you can &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/ApplicationInstance/methods#lookup&quot;&gt;look up&lt;/a&gt; anything in your application, with a little help from &lt;code&gt;this.owner&lt;/code&gt;. Second, you gain access to some common utility functions, &lt;code&gt;this.get()&lt;/code&gt; and &lt;code&gt;this.set()&lt;/code&gt;, in your tests. Finally, you can use &lt;code&gt;pauseTest()&lt;/code&gt; to &lt;a href=&quot;../index#toc_how-to-debug-tests&quot;&gt;debug your tests&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af15bb4c3ad741a787ed9fcac10a5493b70ceee7" translate="yes" xml:space="preserve">
          <source>By comparison, using the computed macro abstracts some of this away:</source>
          <target state="translated">それに比べて、計算されたマクロを使用すると、この一部が抽象化されます。</target>
        </trans-unit>
        <trans-unit id="4bb2b99cc531eb6e5f54f2b2cc13877e3bf5e2b6" translate="yes" xml:space="preserve">
          <source>By convention these property names are camelCase in Ember Data models. As with the &lt;code&gt;type&lt;/code&gt; names, this is different from the example attribute and relationship names shown in the &lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;JSON API spec&lt;/a&gt;. The examples in the spec use dash-case for attribute and relationship names. However, the spec does not require attribute or relationship names to follow any specific casing convention. If you are using Ember Data's own &lt;code&gt;JSONAPISerializer&lt;/code&gt; it will assume the attribute and relationship names from your API are dash-case and automatically transform them to camelCase when it creates the normalized JSON object.</source>
          <target state="translated">慣例により、これらのプロパティ名はEmber Dataモデルではキャメルケースです。 &lt;code&gt;type&lt;/code&gt; 名と同様に、これは&lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;JSON API仕様に&lt;/a&gt;示されているサンプルの属性および関係名とは異なります。仕様の例では、属性名と関係名にダッシュケースを使用しています。ただし、仕様では、特定の大文字と小文字の規則に従うために属性名または関係名は必要ありません。 Ember Data独自の &lt;code&gt;JSONAPISerializer&lt;/code&gt; を使用している場合は、APIからの属性と関係の名前がダッシュケースであると想定し、正規化されたJSONオブジェクトを作成するときに、それらを自動的にcamelCaseに変換します。</target>
        </trans-unit>
        <trans-unit id="c87cfd9c921af917ed12e49fad2d762850e48642" translate="yes" xml:space="preserve">
          <source>By convention these property names are camelCase in Ember Data models. As with the &lt;code&gt;type&lt;/code&gt; names, this is different from the example attribute and relationship names shown in the &lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;JSON:API spec&lt;/a&gt;. The examples in the spec use dash-case for attribute and relationship names. However, the spec does not require attribute or relationship names to follow any specific casing convention. If you are using Ember Data's own &lt;code&gt;JSONAPISerializer&lt;/code&gt; it will assume the attribute and relationship names from your API are dash-case and automatically transform them to camelCase when it creates the normalized JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94cca917e76603ba78868852ea9942b1e2e7611" translate="yes" xml:space="preserve">
          <source>By convention, properties or variables that hold classes are PascalCased, while instances are not. So, for example, the variable &lt;code&gt;Person&lt;/code&gt; would point to a class, while &lt;code&gt;person&lt;/code&gt; would point to an instance (usually of the &lt;code&gt;Person&lt;/code&gt; class). You should stick to these naming conventions in your Ember applications.</source>
          <target state="translated">慣例により、クラスを保持するプロパティまたは変数はPascalCasedですが、インスタンスはPascalCasedではありません。したがって、たとえば、変数 &lt;code&gt;Person&lt;/code&gt; はクラスを指し、 &lt;code&gt;person&lt;/code&gt; は（通常は &lt;code&gt;Person&lt;/code&gt; クラスの）インスタンスを指します。Emberアプリケーションでは、これらの命名規則に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="c713163e4371828a83c7c3cc3e1ef652942dc783" translate="yes" xml:space="preserve">
          <source>By convention, the name of a given model (its &lt;code&gt;type&lt;/code&gt;) matches the name of the file in the &lt;code&gt;app/models&lt;/code&gt; folder and should be lowercase, singular and dasherized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c939f448f0f040b28693e1777c233f4bca9b76d4" translate="yes" xml:space="preserve">
          <source>By convention, the name of a given model (its &lt;code&gt;type&lt;/code&gt;) matches the name of the file in the &lt;code&gt;app/models&lt;/code&gt; folder and should be lowercase, singular and dasherized. @mainName @ember-data/model @tag main</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7fef8badbfed80576079ff75199dd7efbf2f94" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;{{link-to}}&lt;/code&gt; is enabled. any passed value to the &lt;code&gt;disabled&lt;/code&gt; component property will disable the &lt;code&gt;link-to&lt;/code&gt; component.</source>
          <target state="translated">デフォルトでは &lt;code&gt;{{link-to}}&lt;/code&gt; が有効になっています。渡された値 &lt;code&gt;disabled&lt;/code&gt; コンポーネントプロパティは無効になります &lt;code&gt;link-to&lt;/code&gt; コンポーネントを。</target>
        </trans-unit>
        <trans-unit id="5bd831ff22c0fdce17ff2fbad1e0840c3c362767" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;{{link-to}}&lt;/code&gt; renders an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element. This can be overridden for a single use of &lt;code&gt;{{link-to}}&lt;/code&gt; by supplying a &lt;code&gt;tagName&lt;/code&gt; option:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;{{link-to}}&lt;/code&gt; は &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 要素をレンダリングします。これは、 &lt;code&gt;tagName&lt;/code&gt; オプションを指定することで、 &lt;code&gt;{{link-to}}&lt;/code&gt; を1回使用する場合はオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="0398305836f98f70adca9c5d83e3d35006a6fa44" translate="yes" xml:space="preserve">
          <source>By default Ember Data comes with several built-in adapters. Feel free to use these adapters as a starting point for creating your own custom adapter.</source>
          <target state="translated">デフォルトでは、Ember Dataは、いくつかの組み込みアダプタを持っています。これらのアダプタを、あなた自身のカスタムアダプタを作成するための出発点として自由に使ってください。</target>
        </trans-unit>
        <trans-unit id="8e7c5bdd0380508662b5ce4ff9cdb98e82cbd0f2" translate="yes" xml:space="preserve">
          <source>By default calling &lt;code&gt;post.get('comments')&lt;/code&gt; will trigger the following requests(assuming the comments haven't been loaded before):</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;post.get('comments')&lt;/code&gt; を呼び出すと、次のリクエストがトリガーされます（コメントがまだロードされていない場合）：</target>
        </trans-unit>
        <trans-unit id="24e2f9a6d447981369ed080c338531747c959b0c" translate="yes" xml:space="preserve">
          <source>By default if this method is not implemented EmberData will call &lt;code&gt;findMany&lt;/code&gt; once with all requested records as a single group when &lt;code&gt;coalesceFindRequests&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f744dfe5755ba94f817529b5907fd07da58d65" translate="yes" xml:space="preserve">
          <source>By default initializer names are derived from their module name. This initializer will be given the name &lt;code&gt;logger&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c99f06a230a7b8dc8be85d2e84262b5e663b7b" translate="yes" xml:space="preserve">
          <source>By default new Ember apps include &lt;a href=&quot;https://guides.emberjs.com/models/&quot;&gt;Ember Data&lt;/a&gt;, which is a separate data library that integrates with Ember and provides a solid, conventional model layer. We'll see Ember Data in action in the tutorial in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070c47d4fcdaf580813f4f637a17230422adb384" translate="yes" xml:space="preserve">
          <source>By default only many-to-many and many-to-none relationships are serialized. This could be configured per relationship by Serializer's &lt;code&gt;attrs&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7ced8ab34ae69dc13ee5e220022b7b95fba3cd" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;JSONAPIAdapter&lt;/code&gt; will attempt to pluralize and dasherize the model name to generate the path name. If this convention does not conform to your backend you can override the &lt;code&gt;pathForType&lt;/code&gt; method.</source>
          <target state="translated">デフォルトでは &lt;code&gt;JSONAPIAdapter&lt;/code&gt; は、パス名を生成するためにモデル名を複数形とdasherizeしようとします。この規則がバックエンドに準拠していない場合は、 &lt;code&gt;pathForType&lt;/code&gt; メソッドをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="6d58a10585b3658a8e0ee4f17436744695172053" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;{{action}}&lt;/code&gt; helper will ignore click events with pressed modifier keys. You can supply an &lt;code&gt;allowedKeys&lt;/code&gt; option to specify which keys should not be ignored.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;{{action}}&lt;/code&gt; ヘルパーは、修飾キーが押されたクリックイベントを無視します。あなたは、供給することができます &lt;code&gt;allowedKeys&lt;/code&gt; 無視すべきではないキーを指定するためのオプションを。</target>
        </trans-unit>
        <trans-unit id="3166c3a64a70eab5fdd5e557efed5160e0e5900a" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;{{link-to}}&lt;/code&gt; component prevents the default browser action by calling &lt;code&gt;preventDefault()&lt;/code&gt; as this sort of action bubbling is normally handled internally and we do not want to take the browser to a new URL (for example).</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;{{link-to}}&lt;/code&gt; コンポーネントは &lt;code&gt;preventDefault()&lt;/code&gt; を呼び出してデフォルトのブラウザアクションを防止します。これは、この種のアクションバブリングが通常内部で処理され、ブラウザを新しいURLに移動したくないためです（たとえば）。</target>
        </trans-unit>
        <trans-unit id="01b7dee22c48ccfb7d072f4ae78b8ba2ffa57fed" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;{{link-to}}&lt;/code&gt; component will bind to the &lt;code&gt;active&lt;/code&gt;, &lt;code&gt;loading&lt;/code&gt;, and &lt;code&gt;disabled&lt;/code&gt; classes. It is discouraged to override these directly.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;{{link-to}}&lt;/code&gt; コンポーネントは、 &lt;code&gt;active&lt;/code&gt; クラス、 &lt;code&gt;loading&lt;/code&gt; 中のクラス、 &lt;code&gt;disabled&lt;/code&gt; クラスにバインドされます。これらを直接オーバーライドすることはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="b6794c13710418e025c164e113b742dab502de0a" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;{{link-to}}&lt;/code&gt; component will bind to the &lt;code&gt;href&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; attributes. It's discouraged that you override these defaults, however you can push onto the array if needed.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;{{link-to}}&lt;/code&gt; コンポーネントは &lt;code&gt;href&lt;/code&gt; 属性と &lt;code&gt;title&lt;/code&gt; 属性にバインドされます。これらのデフォルトをオーバーライドすることはお勧めしませんが、必要に応じて配列にプッシュできます。</target>
        </trans-unit>
        <trans-unit id="06e4f4feb085cf8d074a20af9a83d65b953097b4" translate="yes" xml:space="preserve">
          <source>By default the JSONAPIAdapter will send each find request coming from a &lt;code&gt;store.find&lt;/code&gt; or from accessing a relationship separately to the server. If your server supports passing ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests within a single runloop.</source>
          <target state="translated">デフォルトでは、JSONAPIAdapterは、 &lt;code&gt;store.find&lt;/code&gt; またはリレーションシップへのアクセスからのfindリクエストを個別にサーバーに送信します。サーバーがIDをクエリ文字列として渡すことをサポートしている場合は、coalesceFindRequestsをtrueに設定して、単一の実行ループ内ですべての検索要求を合体できます。</target>
        </trans-unit>
        <trans-unit id="504f6aacc74b51a8d89f5e840d19d39dc16e91db" translate="yes" xml:space="preserve">
          <source>By default the RESTAdapter will send each find request coming from a &lt;code&gt;store.find&lt;/code&gt; or from accessing a relationship separately to the server. If your server supports passing ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests within a single runloop.</source>
          <target state="translated">デフォルトでは、RESTApapterは、 &lt;code&gt;store.find&lt;/code&gt; またはリレーションシップへのアクセスからのfindリクエストを個別にサーバーに送信します。サーバーがIDをクエリ文字列として渡すことをサポートしている場合は、coalesceFindRequestsをtrueに設定して、単一の実行ループ内ですべての検索要求を合体できます。</target>
        </trans-unit>
        <trans-unit id="af6edefa7d3f9a325dcac88789a517e9953f3829" translate="yes" xml:space="preserve">
          <source>By default the adapter will target the current domain. If you would like to specify a new domain you can do so by setting the &lt;code&gt;host&lt;/code&gt; property on the adapter.</source>
          <target state="translated">デフォルトでは、アダプターは現在のドメインをターゲットにします。新しいドメインを指定する場合は、アダプターの &lt;code&gt;host&lt;/code&gt; プロパティを設定することで指定できます。</target>
        </trans-unit>
        <trans-unit id="cc72cda19d335e0c30a7dffc44c4b6e212506ce4" translate="yes" xml:space="preserve">
          <source>By default the boolean transform only allows for values of &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. You can opt into allowing &lt;code&gt;null&lt;/code&gt; values for boolean attributes via &lt;code&gt;DS.attr('boolean', { allowNull: true })&lt;/code&gt;</source>
          <target state="translated">デフォルトでは、ブール変換は &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; の値のみを許可します。 &lt;code&gt;DS.attr('boolean', { allowNull: true })&lt;/code&gt; を使用して、ブール属性に &lt;code&gt;null&lt;/code&gt; 値を許可することを選択できます。</target>
        </trans-unit>
        <trans-unit id="387da59df6f8a56a8fbef265b3e9683a41f7097b" translate="yes" xml:space="preserve">
          <source>By default the controller's &lt;code&gt;model&lt;/code&gt; will be the route's model, so it does not need to be passed unless you wish to change which model is being used.</source>
          <target state="translated">デフォルトでは、コントローラの &lt;code&gt;model&lt;/code&gt; はルートのモデルになるため、使用されているモデルを変更する場合を除き、渡す必要はありません。</target>
        </trans-unit>
        <trans-unit id="88f29fafe048e43628ee4aec43e238b5dc79cec5" translate="yes" xml:space="preserve">
          <source>By default the function backing the computed property will only be called once and the result will be cached. You can specify various properties that your computed property depends on. This will force the cached result to be recomputed if the dependencies are modified.</source>
          <target state="translated">デフォルトでは、computedプロパティをバックアップする関数は一度だけ呼び出され、その結果はキャッシュされます。computedプロパティが依存する様々なプロパティを指定することができます。これにより、依存関係が変更された場合には、キャッシュされた結果が強制的に再計算されるようになります。</target>
        </trans-unit>
        <trans-unit id="c137c99672cba4b157461ab3d46594e1a5abe4d5" translate="yes" xml:space="preserve">
          <source>By default the modelName for a model is its name in dasherized form. This means that a payload key like &quot;blogPost&quot; would be normalized to &quot;blog-post&quot; when Ember Data looks up the model. Usually, Ember Data can use the correct inflection to do this for you. Most of the time, you won't need to override &lt;code&gt;modelNameFromPayloadKey&lt;/code&gt; for this purpose.</source>
          <target state="translated">デフォルトでは、モデルのmodelNameは、ダッシュ形式の名前です。これは、Ember Dataがモデルを検索するときに、「blogPost」などのペイロードキーが「blog-post」に正規化されることを意味します。通常、Ember Dataは正しい屈折を使用してこれを行うことができます。ほとんどの場合、この目的で &lt;code&gt;modelNameFromPayloadKey&lt;/code&gt; をオーバーライドする必要はありません。</target>
        </trans-unit>
        <trans-unit id="8c77ad946e971938391972b9f793a7a818ea528c" translate="yes" xml:space="preserve">
          <source>By default the modelName for a model is its name in dasherized form. Usually, Ember Data can use the correct inflection to do this for you. Most of the time, you won't need to override &lt;code&gt;modelNameFromPayloadType&lt;/code&gt; for this purpose.</source>
          <target state="translated">デフォルトでは、モデルのmodelNameは、ダッシュ形式の名前です。通常、Ember Dataは正しい屈折を使用してこれを行うことができます。ほとんどの場合、この目的で &lt;code&gt;modelNameFromPayloadType&lt;/code&gt; をオーバーライドする必要はありません。</target>
        </trans-unit>
        <trans-unit id="de92b9f8150e4df8e69de5b8e22cae5f3178e5c9" translate="yes" xml:space="preserve">
          <source>By default the modelName for a model is its singularized name in dasherized form. Usually, Ember Data can use the correct inflection to do this for you. Most of the time, you won't need to override &lt;code&gt;modelNameFromPayloadType&lt;/code&gt; for this purpose.</source>
          <target state="translated">デフォルトでは、モデルのmodelNameは、ダッシュ形式の単数形の名前です。通常、Ember Dataは正しい屈折を使用してこれを行うことができます。ほとんどの場合、この目的で &lt;code&gt;modelNameFromPayloadType&lt;/code&gt; をオーバーライドする必要はありません。</target>
        </trans-unit>
        <trans-unit id="6800977c0484482dcb2cb2742379c10c0625d474" translate="yes" xml:space="preserve">
          <source>By default the payload type is the camelized model name. Usually, Ember Data can use the correct inflection to do this for you. Most of the time, you won't need to override &lt;code&gt;payloadTypeFromModelName&lt;/code&gt; for this purpose.</source>
          <target state="translated">デフォルトでは、ペイロードタイプはキャメル化されたモデル名です。通常、Ember Dataは正しい屈折を使用してこれを行うことができます。ほとんどの場合、この目的のために &lt;code&gt;payloadTypeFromModelName&lt;/code&gt; をオーバーライドする必要はありません。</target>
        </trans-unit>
        <trans-unit id="5f18c6cc0cf8419c23c178cfc2fc4de15f7a881e" translate="yes" xml:space="preserve">
          <source>By default the payload type is the pluralized model name. Usually, Ember Data can use the correct inflection to do this for you. Most of the time, you won't need to override &lt;code&gt;payloadTypeFromModelName&lt;/code&gt; for this purpose.</source>
          <target state="translated">デフォルトでは、ペイロードタイプは複数形のモデル名です。通常、Ember Dataは正しい屈折を使用してこれを行うことができます。ほとんどの場合、この目的のために &lt;code&gt;payloadTypeFromModelName&lt;/code&gt; をオーバーライドする必要はありません。</target>
        </trans-unit>
        <trans-unit id="f27d0d1c29dc7731cfb2b55d2d8109145de649bd" translate="yes" xml:space="preserve">
          <source>By default the snapshot's id (String) is set on the json hash via json[primaryKey] = snapshot.id.</source>
          <target state="translated">デフォルトでは、スナップショットのID(文字列)はjson[primaryKey]=snapshot.idでjsonハッシュに設定されます。</target>
        </trans-unit>
        <trans-unit id="b8d86af84b8ba24fc9bbc906d3fc240124920b92" translate="yes" xml:space="preserve">
          <source>By default the store will try to coalesce all &lt;code&gt;fetchRecord&lt;/code&gt; calls within the same runloop into as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call. You can opt out of this behaviour by either not implementing the findMany hook or by setting coalesceFindRequests to false.</source>
          <target state="translated">デフォルトでは、ストアは &lt;code&gt;fetchRecord&lt;/code&gt; 呼び出してそれをfindMany呼び出しに渡すことにより、同じrunloop内のすべてのfetchRecord呼び出しを可能な限り少ない要求にまとめようとします。この動作を無効にするには、findManyフックを実装しないか、coalesceFindRequestsをfalseに設定します。</target>
        </trans-unit>
        <trans-unit id="481a70ca186a88fd4ee402205ad3861d43ae6686" translate="yes" xml:space="preserve">
          <source>By default the value of the &lt;code&gt;headers&lt;/code&gt; property of the adapter is returned.</source>
          <target state="translated">デフォルトでは、アダプタの &lt;code&gt;headers&lt;/code&gt; プロパティの値が返されます。</target>
        </trans-unit>
        <trans-unit id="e2b894ed448ac9a0c0501fc3970e12fff7eb9064" translate="yes" xml:space="preserve">
          <source>By default this component will forward &lt;code&gt;href&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;rel&lt;/code&gt;, &lt;code&gt;tabindex&lt;/code&gt;, and &lt;code&gt;target&lt;/code&gt; arguments to attributes on the component's element. When invoked with &lt;code&gt;{{link-to}}&lt;/code&gt;, you can only customize these attributes. When invoked with &lt;code&gt;&amp;lt;LinkTo&amp;gt;&lt;/code&gt;, you can just use HTML attributes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb483213b1cc75913f05136b8de82588bdd10989" translate="yes" xml:space="preserve">
          <source>By default this component will forward a number of arguments to attributes on the the component's element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121d9b12b56756adf43f98fdc9bf2ae06c92793b" translate="yes" xml:space="preserve">
          <source>By default this component will set classes on its element when any of the following arguments are truthy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1358c19a54d35cea536679b1310b38c92948d937" translate="yes" xml:space="preserve">
          <source>By default this hook just returns the json payload passed to it. You might want to override it in two cases:</source>
          <target state="translated">デフォルトでは、このフックは渡された json ペイロードを返すだけです。このフックをオーバーライドしたい場合があります。</target>
        </trans-unit>
        <trans-unit id="7e463052a16e66f773f873c51aab318423fe874f" translate="yes" xml:space="preserve">
          <source>By default this hook returns &lt;code&gt;false&lt;/code&gt;, as most UIs should not block user interactions while waiting on data update.</source>
          <target state="translated">デフォルトでは、このフックは &lt;code&gt;false&lt;/code&gt; を返します。ほとんどのUIは、データの更新を待機している間、ユーザーの操作をブロックしないはずです。</target>
        </trans-unit>
        <trans-unit id="35b897102d575e89bf0a2b71be0d85083134b480" translate="yes" xml:space="preserve">
          <source>By default this hook returns &lt;code&gt;true&lt;/code&gt; so the data for the record is updated in the background.</source>
          <target state="translated">デフォルトでは、このフックは &lt;code&gt;true&lt;/code&gt; を返すため、レコードのデータはバックグラウンドで更新されます。</target>
        </trans-unit>
        <trans-unit id="9ac5e2eb4137e0a7f4543e8db2fadbbd1949b391" translate="yes" xml:space="preserve">
          <source>By default this method returns &lt;code&gt;true&lt;/code&gt;, indicating that a background reload should always be triggered.</source>
          <target state="translated">デフォルトでは、このメソッドは &lt;code&gt;true&lt;/code&gt; を返します。これは、バックグラウンドリロードが常にトリガーされることを示します。</target>
        </trans-unit>
        <trans-unit id="c15feeb92091ec4574c102af2950a0b12b0095a4" translate="yes" xml:space="preserve">
          <source>By default this methods returns &lt;code&gt;true&lt;/code&gt; if the passed &lt;code&gt;snapshotRecordArray&lt;/code&gt; is empty (meaning that there are no records locally available yet), otherwise it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、この方法は返す &lt;code&gt;true&lt;/code&gt; 渡された場合 &lt;code&gt;snapshotRecordArray&lt;/code&gt; は（まだローカルで利用可能なレコードがないことを意味する）空で、それ以外の場合はを返し、 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac286970e65a66ed46573d9fb4eebe5d33dc9ce0" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;import&lt;/code&gt;ed assets will be copied to &lt;code&gt;dist/&lt;/code&gt; as they are, with the existing directory structure maintained.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;import&lt;/code&gt; されたアセットは、既存のディレクトリ構造を維持したまま、 &lt;code&gt;dist/&lt;/code&gt; にそのままコピーされます。</target>
        </trans-unit>
        <trans-unit id="fcfd723bf5a7dbc5a600bf49491f8d54a7c6be67" translate="yes" xml:space="preserve">
          <source>By default, Ember CLI does not generate a file for its application route. To extend the behavior of the ember application route we will run the command &lt;code&gt;ember generate route application&lt;/code&gt;. Ember CLI does however generate an application template, so when asked whether we want to overwrite &lt;code&gt;app/templates/application.hbs&lt;/code&gt; we will answer 'n'.</source>
          <target state="translated">デフォルトでは、Ember CLIはアプリケーションルート用のファイルを生成しません。emberアプリケーションルートの動作を拡張するには、コマンド &lt;code&gt;ember generate route application&lt;/code&gt; を実行します。ただし、Ember CLIはアプリケーションテンプレートを生成するため、 &lt;code&gt;app/templates/application.hbs&lt;/code&gt; を上書きするかどうかを尋ねられたら、「n」と答えます。</target>
        </trans-unit>
        <trans-unit id="ae742c3fe061fb2c8c5eb3f656182d05648e1322" translate="yes" xml:space="preserve">
          <source>By default, Ember Data is designed to work out of the box with &lt;a href=&quot;http://jsonapi.org&quot;&gt;JSON:API&lt;/a&gt;. JSON:API is a formal specification for building conventional, robust, and performant APIs that allow clients and servers to communicate model data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb67730642c060b291fd8097d1a3f7e283b32d8" translate="yes" xml:space="preserve">
          <source>By default, Ember Data uses and recommends the &lt;code&gt;JSONAPISerializer&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Ember Dataは &lt;code&gt;JSONAPISerializer&lt;/code&gt; を使用および推奨します。</target>
        </trans-unit>
        <trans-unit id="884276af340a1350bf8ad5600a0271ca7bf2151f" translate="yes" xml:space="preserve">
          <source>By default, Ember Data will &lt;code&gt;POST&lt;/code&gt; newly created records to their type URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b421f430e90e01048a2284b47bf293a3d391586" translate="yes" xml:space="preserve">
          <source>By default, Ember Data will &lt;code&gt;POST&lt;/code&gt; newly created records to their type url.</source>
          <target state="translated">デフォルトでは、Ember Dataは新しく作成されたレコードをタイプurlに &lt;code&gt;POST&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="6c869aec8d2659935383ec77d6d8a3c83c0857bd" translate="yes" xml:space="preserve">
          <source>By default, Ember assumes that none of the values that are rendered will ever change. In some cases this is clearly true - for instance, the punctuation in the template will always be the same, so Ember doesn't need to do anything to update it. These are static, state-less parts of the template. In other cases, like &lt;code&gt;this.greeting&lt;/code&gt; or &lt;code&gt;@name&lt;/code&gt; argument, that's less clear. It appears &lt;code&gt;language&lt;/code&gt; might be something we want to update, and if we do, then &lt;code&gt;greeting&lt;/code&gt; should probably change, right? At the least, we should &lt;em&gt;check&lt;/em&gt; to see if it should change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc388b9f9fbf30c27d4c38581e1dfed911c7e214" translate="yes" xml:space="preserve">
          <source>By default, Ember will attempt to instantiate a registered factory when it is looked up. When registering an already instantiated object instead of a class, use the &lt;code&gt;instantiate: false&lt;/code&gt; option to avoid attempts to re-instantiate it during lookups.</source>
          <target state="translated">デフォルトでは、Emberは登録されたファクトリーがルックアップされるときにインスタンス化を試みます。クラスではなくインスタンス化済みのオブジェクトを登録する場合は、 &lt;code&gt;instantiate: false&lt;/code&gt; オプションを使用して、ルックアップ中にインスタンス化を再試行しないようにします。</target>
        </trans-unit>
        <trans-unit id="f2d76a4c9eebb602f6b3e859ce500dd273905c1e" translate="yes" xml:space="preserve">
          <source>By default, Ember will lookup a route's controller that matches the name of the route (i.e. &lt;code&gt;App.PostController&lt;/code&gt; for &lt;code&gt;App.PostRoute&lt;/code&gt;). However, if you would like to define a specific controller to use, you can do so using this property.</source>
          <target state="translated">デフォルトでは、Emberはルートの名前に一致するルートのコントローラーを検索します（つまり、 &lt;code&gt;App.PostController&lt;/code&gt; の &lt;code&gt;App.PostRoute&lt;/code&gt; ）。ただし、使用する特定のコントローラーを定義する場合は、このプロパティを使用して定義できます。</target>
        </trans-unit>
        <trans-unit id="f46ea5c2c2ea47e7d75eaa37ae6824cd1d6c7f3f" translate="yes" xml:space="preserve">
          <source>By default, Ember will lookup a route's controller that matches the name of the route (i.e. &lt;code&gt;posts.new&lt;/code&gt;). However, if you would like to define a specific controller to use, you can do so using this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca133aebe6d5f58f902cdeb7505db4d5e9e8caf" translate="yes" xml:space="preserve">
          <source>By default, Ember will use &lt;code&gt;pushState&lt;/code&gt; to update the URL in the address bar in response to a controller query param property change. If you would like to use &lt;code&gt;replaceState&lt;/code&gt; instead, which prevents an additional item from being added to your browser's history, you can specify this as follows:</source>
          <target state="translated">デフォルトでは、Emberは &lt;code&gt;pushState&lt;/code&gt; を使用して、コントローラークエリのparamプロパティの変更に応じてアドレスバーのURLを更新します。代わりに &lt;code&gt;replaceState&lt;/code&gt; を使用して、ブラウザーの履歴にアイテムが追加されないようにする場合は、次のように指定できます。</target>
        </trans-unit>
        <trans-unit id="8b1135bc0a8d2816333641964de7a779056ffc03" translate="yes" xml:space="preserve">
          <source>By default, Ember.js will extend the prototypes of native JavaScript objects in the following ways:</source>
          <target state="translated">デフォルトでは、Ember.jsは以下の方法でネイティブJavaScriptオブジェクトのプロトタイプを拡張します。</target>
        </trans-unit>
        <trans-unit id="75a501cb01ffff8dd03c68d44ea685ad6fff5d58" translate="yes" xml:space="preserve">
          <source>By default, Ember.js will replace each dynamic segment in the URL with the model object's &lt;code&gt;id&lt;/code&gt; property. In the example above, the &lt;code&gt;@model&lt;/code&gt; argument is the &lt;code&gt;photo&lt;/code&gt; objects, and their &lt;code&gt;id&lt;/code&gt; properties are used to fill in the dynamic segment in the URL; in this case, either &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, or &lt;code&gt;3&lt;/code&gt;. This behavior can be customized within &lt;code&gt;PhotoEditRoute&lt;/code&gt;'s &lt;code&gt;serialize&lt;/code&gt; hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80642b442dac8d83d1e353bcf810ebb7af998671" translate="yes" xml:space="preserve">
          <source>By default, Octane does not include jQuery. Continuing to use jQuery in your app will not conflict with Octane features, however you should follow the deprecation instructions for &lt;a href=&quot;https://deprecations.emberjs.com/v3.x/#toc_jquery-apis&quot;&gt;&lt;code&gt;jquery-apis&lt;/code&gt;&lt;/a&gt; if you need to keep using it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2346823cdf60d6253f5a11f022e58817de7bef12" translate="yes" xml:space="preserve">
          <source>By default, a route handler will render the template with the same name as the route. Take this router:</source>
          <target state="translated">デフォルトでは、ルートハンドラはルートと同じ名前のテンプレートをレンダリングします。このルーターを例にとると</target>
        </trans-unit>
        <trans-unit id="2f5cfecead5797053c6caf503b3b9088ec223de1" translate="yes" xml:space="preserve">
          <source>By default, an action will stop bubbling once a handler defined on the &lt;code&gt;actions&lt;/code&gt; hash handles it. To continue bubbling the action, you must return &lt;code&gt;true&lt;/code&gt; from the handler:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;actions&lt;/code&gt; ハッシュで定義されたハンドラーが処理すると、アクションはバブリングを停止します。アクションのバブリングを続けるには、ハンドラーから &lt;code&gt;true&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="287b919ecdecf0e2a44e4911ab979d269cbe408c" translate="yes" xml:space="preserve">
          <source>By default, applications will have a single &lt;code&gt;Store&lt;/code&gt; service that is automatically created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db95e1ddc416ca4dcc871a866afbc49b8abcf3d8" translate="yes" xml:space="preserve">
          <source>By default, attributes are passed through as-is, unless you specified an attribute type (&lt;code&gt;DS.attr('date')&lt;/code&gt;). If you specify a transform, the JavaScript value will be serialized when inserted into the JSON hash.</source>
          <target state="translated">デフォルトでは、属性タイプ（ &lt;code&gt;DS.attr('date')&lt;/code&gt; ）を指定しない限り、属性はそのまま渡されます。変換を指定した場合、JavaScript値はJSONハッシュに挿入されるときにシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="0340bfa8c6531c91607059be240efc863fe50fd6" translate="yes" xml:space="preserve">
          <source>By default, attributes are passed through as-is, unless you specified an attribute type (&lt;code&gt;attr('date')&lt;/code&gt;). If you specify a transform, the JavaScript value will be serialized when inserted into the JSON hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b2b7d2b99362e2156353bd07439b10a9f15d39" translate="yes" xml:space="preserve">
          <source>By default, belongs-to relationships are converted into IDs when inserted into the JSON hash.</source>
          <target state="translated">デフォルトでは、JSONハッシュに挿入されたときに、属しているリレーションシップはIDに変換されます。</target>
        </trans-unit>
        <trans-unit id="d439431cda7033139db4a539bfbf7a27c9249cbe" translate="yes" xml:space="preserve">
          <source>By default, calling &lt;code&gt;Ember.Application.create()&lt;/code&gt; will automatically initialize your application by calling the &lt;code&gt;Ember.Application.initialize()&lt;/code&gt; method. If you need to delay initialization, you can call your app's &lt;code&gt;deferReadiness()&lt;/code&gt; method. When you are ready for your app to be initialized, call its &lt;code&gt;advanceReadiness()&lt;/code&gt; method.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;Ember.Application.create()&lt;/code&gt; を呼び出すと、 &lt;code&gt;Ember.Application.initialize()&lt;/code&gt; メソッドを呼び出すことにより、アプリケーションが自動的に初期化されます。初期化を遅らせる必要がある場合は、アプリの &lt;code&gt;deferReadiness()&lt;/code&gt; メソッドを呼び出すことができます。アプリを初期化する準備ができたら、 &lt;code&gt;advanceReadiness()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="b3921b9dc08e373e9d7465188c32b5c7838b109f" translate="yes" xml:space="preserve">
          <source>By default, each component is backed by a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element. If you were to look at a rendered component in your developer tools, you would see a DOM representation that looked something like:</source>
          <target state="translated">デフォルトでは、各コンポーネントは &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素によってサポートされています。開発者ツールでレンダリングされたコンポーネントを見ると、次のようなDOM表現が表示されます。</target>
        </trans-unit>
        <trans-unit id="b939d68aa4956ef0e362b83dce5142a34a01e09f" translate="yes" xml:space="preserve">
          <source>By default, helpers and components do not accept &lt;em&gt;data attributes&lt;/em&gt;. For example</source>
          <target state="translated">デフォルトでは、ヘルパーとコンポーネントは&lt;em&gt;データ属性を&lt;/em&gt;受け入れません。例えば</target>
        </trans-unit>
        <trans-unit id="6cf516ec9031f8a0657f90941a4445c3807f4cd4" translate="yes" xml:space="preserve">
          <source>By default, helpers are &lt;em&gt;stateless&lt;/em&gt;. They are passed inputs (parameters and a hash), they perform an operation on those inputs, and return a single output. They have no side-effects and don't save any information that is used on subsequent runs of the function.</source>
          <target state="translated">デフォルトでは、ヘルパーは&lt;em&gt;ステートレス&lt;/em&gt;です。それらは渡された入力（パラメーターとハッシュ）であり、それらの入力に対して操作を実行し、単一の出力を返します。それらには副作用がなく、関数の以降の実行で使用される情報は保存されません。</target>
        </trans-unit>
        <trans-unit id="e61f18b8cb9b58e044b028111987ced90ec2b750" translate="yes" xml:space="preserve">
          <source>By default, if a model promise rejects during a transition, the transition is aborted, no new destination route templates are rendered, and an error is logged to the console.</source>
          <target state="translated">デフォルトでは、モデルプロミスがトランジション中に拒否されると、トランジションは中止され、新しい宛先ルートテンプレートはレンダリングされず、エラーはコンソールに記録されます。</target>
        </trans-unit>
        <trans-unit id="f523b2abe862b013a9c330366793eecbc8c121a3" translate="yes" xml:space="preserve">
          <source>By default, if your route has a dynamic segment ending in &lt;code&gt;_id&lt;/code&gt;:</source>
          <target state="translated">デフォルトでは、ルートに &lt;code&gt;_id&lt;/code&gt; で終わる動的セグメントがある場合：</target>
        </trans-unit>
        <trans-unit id="8d54476788d0aaf696ac7249976396c8f62fcb0b" translate="yes" xml:space="preserve">
          <source>By default, it creates a JSON object with a key for each attribute and belongsTo relationship.</source>
          <target state="translated">デフォルトでは、各属性と belongsTo リレーションシップのキーを持つ JSON オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="4dc01aca9ddad6593518924f00fc71526261dc06" translate="yes" xml:space="preserve">
          <source>By default, it pluralizes the type's name (for example, 'post' becomes 'posts' and 'person' becomes 'people').</source>
          <target state="translated">デフォルトでは、型の名前を複数形にします(例えば、'post'は'posts'になり、'person'は'people'になります)。</target>
        </trans-unit>
        <trans-unit id="f39e95b2bceecaa468b43bc7bc3713edfbdc52ab" translate="yes" xml:space="preserve">
          <source>By default, it pluralizes the type's name (for example, 'post' becomes 'posts' and 'person' becomes 'people'). To override the pluralization see &lt;a href=&quot;#method_pathForType&quot;&gt;pathForType&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、タイプの名前を複数形にします（たとえば、「post」は「posts」になり、「person」は「people」になります）。複数形をオーバーライドするには、&lt;a href=&quot;#method_pathForType&quot;&gt;pathForTypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0fe85a44dc226429c73a8e9260c97bab7bcdb231" translate="yes" xml:space="preserve">
          <source>By default, it pluralizes the type's name (for example, 'post' becomes 'posts' and 'person' becomes 'people'). To override the pluralization see &lt;a href=&quot;buildurlmixin/methods#pathForType&quot;&gt;pathForType&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9ce8f8dc442252e04d7b7433af6a43768e10cf" translate="yes" xml:space="preserve">
          <source>By default, query param values in Ember are &quot;sticky&quot;, in that if you make changes to a query param and then leave and re-enter the route, the new value of that query param will be preserved (rather than reset to its default). This is a particularly handy default for preserving sort/filter parameters as you navigate back and forth between routes.</source>
          <target state="translated">デフォルトでは、Ember のクエリパラメータの値は &quot;スティッキー&quot; になっています。これは、ルートを行ったり来たりしながらソート/フィルタパラメータを保存する際に特に便利なデフォルトです。</target>
        </trans-unit>
        <trans-unit id="6cdcbdedd1009d87591c7874cc98d33d692ece43" translate="yes" xml:space="preserve">
          <source>By default, registrations are treated as &quot;singletons&quot;. This simply means that an instance will be created when it is first looked up, and this same instance will be cached and returned from subsequent lookups.</source>
          <target state="translated">デフォルトでは、登録は「シングルトン」として扱われます。これは単純に、最初に検索されたときにインスタンスが作成され、この同じインスタンスがキャッシュされて、その後の検索から返されることを意味します。</target>
        </trans-unit>
        <trans-unit id="db37c21ab60a34deca18f6033d7aba2d4e5552c0" translate="yes" xml:space="preserve">
          <source>By default, specifying &lt;code&gt;foo&lt;/code&gt; as a controller query param property will bind to a query param whose key is &lt;code&gt;foo&lt;/code&gt;, e.g. &lt;code&gt;?foo=123&lt;/code&gt;. You can also map a controller property to a different query param key using the following configuration syntax:</source>
          <target state="translated">デフォルトでは、コントローラのクエリパラメータプロパティとして &lt;code&gt;foo&lt;/code&gt; を指定すると、キーが &lt;code&gt;foo&lt;/code&gt; であるクエリパラメータにバインドされます（例： &lt;code&gt;?foo=123&lt;/code&gt; )。次の構成構文を使用して、コントローラプロパティを別のクエリパラメータキーにマップすることもできます。</target>
        </trans-unit>
        <trans-unit id="0073a1ec75825f7d847ed41eec405ae5254f86db" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_action&quot;&gt;&lt;code&gt;{{action}}&lt;/code&gt;&lt;/a&gt; helper listens for click events and triggers the action when the user clicks on the element.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_action&quot;&gt; &lt;code&gt;{{action}}&lt;/code&gt; &lt;/a&gt;ヘルパーはクリックイベントをリッスンし、ユーザーが要素をクリックしたときにアクションをトリガーします。</target>
        </trans-unit>
        <trans-unit id="1aaa2e9dda7d7c708a9dac3261825adab8e82b2a" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;JSONAPIAdapter&lt;/code&gt; will attempt to pluralize and dasherize the model name to generate the path name. If this convention does not conform to your backend you can override the &lt;code&gt;pathForType&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbed8bdb5ac81c386a4c87a428dd6cd0d8fcf5e0" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;setupController&lt;/code&gt; hook sets the &lt;code&gt;model&lt;/code&gt; property of the controller to the &lt;code&gt;model&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;setupController&lt;/code&gt; のフックがセット &lt;code&gt;model&lt;/code&gt; へのコントローラのプロパティ &lt;code&gt;model&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21ae0557a45b6b70ca6eeb21d6add95c7f2352fe" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;setupController&lt;/code&gt; hook sets the &lt;code&gt;model&lt;/code&gt; property of the controller to the specified &lt;code&gt;model&lt;/code&gt; when it is not &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff6c981fe4aced844298461f508dffc81659763" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;{{action}}&lt;/code&gt; helper prevents the default browser action of the DOM event. If you want to allow the browser action, you can stop Ember from preventing it.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;{{action}}&lt;/code&gt; ヘルパーはDOMイベントのデフォルトのブラウザアクションを防止します。ブラウザーアクションを許可する場合は、Emberがそれを妨げないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="1cffaa4862efc54226cf88901c712194f75c8576" translate="yes" xml:space="preserve">
          <source>By default, the RESTAdapter will send the query params sorted alphabetically to the server.</source>
          <target state="translated">デフォルトでは、RESTAdapter はクエリパラメータをアルファベット順にサーバに送信します。</target>
        </trans-unit>
        <trans-unit id="921e00e5dedf98782420379db324a08f350606a9" translate="yes" xml:space="preserve">
          <source>By default, the action handler receives the first parameter of the event listener, the event object the browser passes to the handler, so &lt;code&gt;bandDidChange&lt;/code&gt; prints &lt;code&gt;Event {}&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、アクションハンドラーはイベントリスナーの最初のパラメーター、ブラウザーがハンドラーに渡すイベントオブジェクトを &lt;code&gt;bandDidChange&lt;/code&gt; ため、bandDidChangeは &lt;code&gt;Event {}&lt;/code&gt; 出力します。</target>
        </trans-unit>
        <trans-unit id="22698cd4cf1064e1b2491d3aa6a13ff729c00c58" translate="yes" xml:space="preserve">
          <source>By default, the adapter will target the current domain. If you would like to specify a new domain you can do so by setting the &lt;code&gt;host&lt;/code&gt; property on the adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db4e9a65c7168d1e0ee06a4bff3243460adb1bd" translate="yes" xml:space="preserve">
          <source>By default, the application sets up these event listeners on the document body. However, in cases where you are embedding an Ember application inside an existing page, you may want it to set up the listeners on an element inside the body.</source>
          <target state="translated">デフォルトでは、アプリケーションはこれらのイベントリスナーをドキュメント本体にセットアップします。しかし、既存のページの中に Ember アプリケーションを埋め込む場合には、ボディの中の要素にリスナーをセットアップさせたいかもしれません。</target>
        </trans-unit>
        <trans-unit id="c05478471a1decbce75890fa12c2d46840e12aa7" translate="yes" xml:space="preserve">
          <source>By default, the application's &lt;code&gt;Ember.EventDispatcher&lt;/code&gt; listens for a set of standard DOM events, such as &lt;code&gt;mousedown&lt;/code&gt; and &lt;code&gt;keyup&lt;/code&gt;, and delegates them to your application's &lt;code&gt;Ember.View&lt;/code&gt; instances.</source>
          <target state="translated">デフォルトでは、アプリケーションの &lt;code&gt;Ember.EventDispatcher&lt;/code&gt; は、 &lt;code&gt;mousedown&lt;/code&gt; や &lt;code&gt;keyup&lt;/code&gt; などの一連の標準DOMイベントをリッスンし、それらをアプリケーションの &lt;code&gt;Ember.View&lt;/code&gt; インスタンスに委任します。</target>
        </trans-unit>
        <trans-unit id="930afa4a1a6e3b3b34db33c1060e36b230b89cf6" translate="yes" xml:space="preserve">
          <source>By default, the boolean transform only allows for values of &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. You can opt into allowing &lt;code&gt;null&lt;/code&gt; values for boolean attributes via &lt;code&gt;attr('boolean', { allowNull: true })&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c82a0d32d4ba3b8aa8a3e3616a54138c3fd231e" translate="yes" xml:space="preserve">
          <source>By default, the data will be deserialized using a default serializer (the application serializer if it exists).</source>
          <target state="translated">デフォルトでは、データはデフォルトのシリアライザ(存在する場合はアプリケーションのシリアライザ)を使用してデシリアライズされます。</target>
        </trans-unit>
        <trans-unit id="790465ab5555e9fbfb798b4e477576ff07b98827" translate="yes" xml:space="preserve">
          <source>By default, the name of the Boolean property is dasherized. You can customize the class name applied by delimiting it with a colon:</source>
          <target state="translated">既定では、ブール値プロパティの名前は破線になっています。コロンで区切ることで、適用されるクラス名をカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="5c617b39af17acb89a63dac6e50e0941fe679624" translate="yes" xml:space="preserve">
          <source>By default, the render buffer will use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag for views.</source>
          <target state="translated">デフォルトでは、レンダーバッファーはビューに &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; タグを使用します。</target>
        </trans-unit>
        <trans-unit id="15fe058599ba8351b2ae7aa80bb97bec6a180d05" translate="yes" xml:space="preserve">
          <source>By default, the router will begin trying to translate the current URL into application state once the browser emits the &lt;code&gt;DOMContentReady&lt;/code&gt; event. If you need to defer routing, you can call the application's &lt;code&gt;deferReadiness()&lt;/code&gt; method. Once routing can begin, call the &lt;code&gt;advanceReadiness()&lt;/code&gt; method.</source>
          <target state="translated">デフォルトでは、ブラウザーが &lt;code&gt;DOMContentReady&lt;/code&gt; イベントを発行すると、ルーターは現在のURLをアプリケーションの状態に変換しようとします。ルーティングを延期する必要がある場合は、アプリケーションの &lt;code&gt;deferReadiness()&lt;/code&gt; メソッドを呼び出すことができます。ルーティングを開始できるようになったら、 &lt;code&gt;advanceReadiness()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="2b81d8fed92bf147220dfee742151538020231ee" translate="yes" xml:space="preserve">
          <source>By default, the store will talk to your backend using a standard REST mechanism. You can customize how the store talks to your backend by specifying a custom adapter:</source>
          <target state="translated">デフォルトでは、ストアは標準の REST メカニズムを使用してバックエンドと通信します。カスタムアダプタを指定することで、ストアがバックエンドと通信する方法をカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="483b91ed636b9ad3863e53255b6f4826d53bcfb2" translate="yes" xml:space="preserve">
          <source>By default, the value of the target property is set to the router, and is injected when a controller is instantiated. This injection is applied as part of the application's initialization process. In most cases the &lt;code&gt;target&lt;/code&gt; property will automatically be set to the logical consumer of actions for the controller.</source>
          <target state="translated">デフォルトでは、ターゲットプロパティの値はルーターに設定され、コントローラーがインスタンス化されるときに挿入されます。この注入は、アプリケーションの初期化プロセスの一部として適用されます。ほとんどの場合、 &lt;code&gt;target&lt;/code&gt; プロパティは、コントローラーのアクションの論理コンシューマーに自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="2f7deecf58415489ee625ccf2605c22daec721ec" translate="yes" xml:space="preserve">
          <source>By default, this component will add the &lt;code&gt;ember-checkbox&lt;/code&gt; class to the component's element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1a5507484e7ed494b30ee63988a502f6b31ec9" translate="yes" xml:space="preserve">
          <source>By default, this component will add the &lt;code&gt;ember-text-field&lt;/code&gt; class to the component's element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19e6853dd7fb6061aaba1d722c2a462daf0297c" translate="yes" xml:space="preserve">
          <source>By default, this hook returns &lt;code&gt;true&lt;/code&gt; so the data for the record is updated in the background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e0d28fc15f177e3e7b1c552240fa4abc15e57f" translate="yes" xml:space="preserve">
          <source>By default, this method is called automatically on &quot;DOM ready&quot;; however, if autoboot is disabled, this is automatically called when the first application instance is created via &lt;code&gt;visit&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9049dafb4bc2774b669f241e3f958af8185082" translate="yes" xml:space="preserve">
          <source>By default, this method returns &lt;code&gt;true&lt;/code&gt; if the passed &lt;code&gt;snapshotRecordArray&lt;/code&gt; is empty (meaning that there are no records locally available yet), otherwise, it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036035b3ac14079944e74693c433e3ade8ad0077" translate="yes" xml:space="preserve">
          <source>By default, when you extend an Ember class a property defined in the subclass overrides a property with the same name that is defined in the superclass. However, there are some cases where it is preferable to build up a property's value by combining the superclass' property value with the subclass' value. An example of this in use within Ember is the &lt;code&gt;classNames&lt;/code&gt; property of &lt;code&gt;Component&lt;/code&gt; from &lt;code&gt;@ember/component&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60286e5362a48018810276af0272f1c5f23d0897" translate="yes" xml:space="preserve">
          <source>By default, when you extend an Ember class a property defined in the subclass overrides a property with the same name that is defined in the superclass. However, there are some cases where it is preferable to build up a property's value by combining the superclass' property value with the subclass' value. An example of this in use within Ember is the &lt;code&gt;classNames&lt;/code&gt; property of &lt;code&gt;Ember.View&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Emberクラスを拡張すると、サブクラスで定義されたプロパティは、スーパークラスで定義された同じ名前のプロパティをオーバーライドします。ただし、スーパークラスのプロパティ値とサブクラスの値を組み合わせてプロパティの値を作成する方が望ましい場合もあります。 Ember内で使用されている例として、 &lt;code&gt;Ember.View&lt;/code&gt; の &lt;code&gt;classNames&lt;/code&gt; プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="141551cc0f38eb0e3405d80788a76b219cd01eab" translate="yes" xml:space="preserve">
          <source>By default, when you extend an Ember class a property defined in the subclass overrides a property with the same name that is defined in the superclass. However, there are some cases where it is preferable to build up a property's value by merging the superclass property value with the subclass property's value. An example of this in use within Ember is the &lt;code&gt;queryParams&lt;/code&gt; property of routes.</source>
          <target state="translated">デフォルトでは、Emberクラスを拡張すると、サブクラスで定義されたプロパティは、スーパークラスで定義された同じ名前のプロパティをオーバーライドします。ただし、スーパークラスのプロパティ値とサブクラスのプロパティ値をマージしてプロパティの値を作成する方が望ましい場合もあります。Ember内で使用されているこの例は、ルートの &lt;code&gt;queryParams&lt;/code&gt; プロパティです。</target>
        </trans-unit>
        <trans-unit id="7ad3553f9d6ef3c9e3238830ddef88e713377559" translate="yes" xml:space="preserve">
          <source>By default, when you run &lt;code&gt;ember test --server&lt;/code&gt;, Ember CLI runs the &lt;a href=&quot;https://github.com/testem/testem&quot;&gt;Testem test runner&lt;/a&gt;, which runs Qunit in Chrome and &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;ember test --server&lt;/code&gt; を実行すると、Ember CLIが&lt;a href=&quot;https://github.com/testem/testem&quot;&gt;Testemテストランナー&lt;/a&gt;を実行します。これは、Chromeと&lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJSでQunitを実行し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c0850d5e1a158bd3b887c16df76f38a385718772" translate="yes" xml:space="preserve">
          <source>By default, your application will render the &lt;a href=&quot;https://guides.emberjs.com/routing/defining-your-routes/#toc_the-application-route&quot;&gt;application template&lt;/a&gt; and attach it to the document's &lt;code&gt;body&lt;/code&gt; element.</source>
          <target state="translated">デフォルトでは、アプリケーションは&lt;a href=&quot;https://guides.emberjs.com/routing/defining-your-routes/#toc_the-application-route&quot;&gt;アプリケーションテンプレート&lt;/a&gt;をレンダリングし、それをドキュメントの &lt;code&gt;body&lt;/code&gt; 要素に添付します。</target>
        </trans-unit>
        <trans-unit id="668fd716e178e64e4f5546e3cf5dfc624509d725" translate="yes" xml:space="preserve">
          <source>By doing so, Ember will use the value of the property specified (&lt;code&gt;person.name&lt;/code&gt; in the example) to find a &quot;match&quot; from the previous render. That is, if Ember has previously seen an object from the &lt;code&gt;@developers&lt;/code&gt; array with a matching name, its DOM elements will be re-used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3b597e0cf19fb03a609816b67c53bcc0cc4cd1" translate="yes" xml:space="preserve">
          <source>By example having a user that has many pets:</source>
          <target state="translated">例えば、多くのペットを飼っているユーザーを持つことで。</target>
        </trans-unit>
        <trans-unit id="7d4b6843174da27b5c04b7a61f8ca2ee85bb64f4" translate="yes" xml:space="preserve">
          <source>By keeping state in the component and handling DOM method calls in a modifier, we can use autotracking and stick to 1-way data flow in the component. Further, we could change the component's own design later &lt;em&gt;without&lt;/em&gt; having to change how we interact with the DOM element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a624260d0566cc20f22f14a0ac7301e20a74df48" translate="yes" xml:space="preserve">
          <source>By looking at how we use the &lt;code&gt;&amp;lt;Message&amp;gt;&lt;/code&gt; component, we can see that some of the arguments are fairly repetitive. Both &lt;code&gt;@avatarTitle&lt;/code&gt; and &lt;code&gt;@avatarInitial&lt;/code&gt; are based on the user's &lt;code&gt;@username&lt;/code&gt;, but the title has more text, and the initial is only the first letter of the name. We'd rather just pass a username to the &lt;code&gt;&amp;lt;Message&amp;gt;&lt;/code&gt; component and &lt;em&gt;compute&lt;/em&gt; the value of the title and initial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf547008e8efe197154dbdf1126f1f6ccd7729f9" translate="yes" xml:space="preserve">
          <source>By measuring the render time, the Inspector adds a slight delay to the rendering process. As such, the duration is not an exact representation of expected rendering time for a production application. Thus, the rendering duration is more useful to compare times than as an absolute measure of performance.</source>
          <target state="translated">レンダリング時間を測定することで、インスペクタはレンダリングプロセスにわずかな遅延を加えます。そのため、持続時間は、本番アプリケーションで予想されるレンダリング時間を正確に表すものではありません。したがって、レンダリング時間は、パフォーマンスの絶対的な尺度というよりも、時間を比較するのに便利です。</target>
        </trans-unit>
        <trans-unit id="737735ccfb0b0b447ca4c19d08766c885d30f5b8" translate="yes" xml:space="preserve">
          <source>By overwriting &lt;code&gt;modelNameFromPayloadType&lt;/code&gt; you can specify that the &lt;code&gt;administrator&lt;/code&gt; model should be used:</source>
          <target state="translated">&lt;code&gt;modelNameFromPayloadType&lt;/code&gt; を上書きすることで、 &lt;code&gt;administrator&lt;/code&gt; モデルを使用するように指定できます。</target>
        </trans-unit>
        <trans-unit id="023a30eaf5a49f0481c0ef84076c43c8239bcdd2" translate="yes" xml:space="preserve">
          <source>By overwriting &lt;code&gt;modelNameFromPayloadType&lt;/code&gt; you can specify that the &lt;code&gt;post&lt;/code&gt; model should be used:</source>
          <target state="translated">&lt;code&gt;modelNameFromPayloadType&lt;/code&gt; を上書きすることで、 &lt;code&gt;post&lt;/code&gt; モデルを使用するように指定できます。</target>
        </trans-unit>
        <trans-unit id="429e37999eda7e7026bbcc4685fdb4cba268e8ca" translate="yes" xml:space="preserve">
          <source>By overwriting &lt;code&gt;payloadTypeFromModelName&lt;/code&gt; you can specify that the namespaces model name for the &lt;code&gt;administrator&lt;/code&gt; should be used:</source>
          <target state="translated">&lt;code&gt;payloadTypeFromModelName&lt;/code&gt; を上書きすることにより、 &lt;code&gt;administrator&lt;/code&gt; 名前空間モデル名を使用するように指定できます。</target>
        </trans-unit>
        <trans-unit id="bef8b706f04806f62e4f3468b01e30a26956abbe" translate="yes" xml:space="preserve">
          <source>By overwriting &lt;code&gt;payloadTypeFromModelName&lt;/code&gt; you can specify that the namespaces model name for the &lt;code&gt;post&lt;/code&gt; should be used:</source>
          <target state="translated">&lt;code&gt;payloadTypeFromModelName&lt;/code&gt; を上書きすることで、 &lt;code&gt;post&lt;/code&gt; 名前空間モデル名を使用するように指定できます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
