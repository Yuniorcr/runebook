<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="ember">
    <body>
      <group id="ember">
        <trans-unit id="fa74a5445ac21a141ea80fae8c137247dd31ba9d" translate="yes" xml:space="preserve">
          <source>Now in our browser we should see that the first rental property is listed as &quot;Standalone&quot;, while the other two are listed as &quot;Community&quot;.</source>
          <target state="translated">今、私たちのブラウザでは、最初の賃貸物件は「スタンドアローン」と表示され、他の2つは「コミュニティ」と表示されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="02f78c37e1d7493e21b1b94978d032932bbcb8df" translate="yes" xml:space="preserve">
          <source>Now in the browser when a scientist's name is clicked, this function is called and the person's name is alerted.</source>
          <target state="translated">ブラウザ上で科学者の名前をクリックすると、この機能が呼び出され、その人の名前がアラートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="ed29b70e455c078562a5f430d4dbd6281287bd7b" translate="yes" xml:space="preserve">
          <source>Now let's add code that simulates a visitor arriving on our homepage, clicking one of our links and then visiting a new page.</source>
          <target state="translated">今、私たちのホームページに到着し、私たちのリンクのいずれかをクリックして、新しいページを訪問する訪問者をシミュレートするコードを追加してみましょう。</target>
        </trans-unit>
        <trans-unit id="697e0df1cf9b32cc42300e9918ecad3b0cea695c" translate="yes" xml:space="preserve">
          <source>Now let's create a test which will call &lt;code&gt;levelUp&lt;/code&gt; on the player when they are level 4 to assert that the &lt;code&gt;levelName&lt;/code&gt; changes. We will use &lt;code&gt;module&lt;/code&gt; together with the &lt;code&gt;setupTest&lt;/code&gt; helper method:</source>
          <target state="translated">次に、レベル4のときにプレーヤーで &lt;code&gt;levelUp&lt;/code&gt; を呼び出して、 &lt;code&gt;levelName&lt;/code&gt; が変更されたことを表明するテストを作成しましょう。 &lt;code&gt;module&lt;/code&gt; を &lt;code&gt;setupTest&lt;/code&gt; ヘルパーメソッドと一緒に使用します。</target>
        </trans-unit>
        <trans-unit id="c09d33d498277510cb65c5bde600e541b65944ec" translate="yes" xml:space="preserve">
          <source>Now let's create a test which will call &lt;code&gt;levelUp&lt;/code&gt; on the player when they are level 4 to assert that the &lt;code&gt;levelName&lt;/code&gt; changes. We will use &lt;code&gt;moduleForModel&lt;/code&gt;:</source>
          <target state="translated">次に、レベル4のときにプレーヤーで &lt;code&gt;levelUp&lt;/code&gt; を呼び出すテストを作成して、 &lt;code&gt;levelName&lt;/code&gt; が変更されたことをアサートします。 &lt;code&gt;moduleForModel&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="37fd2a1099f983eece52ae774c4e471341b866db" translate="yes" xml:space="preserve">
          <source>Now let's create another route with contact details for the company. Once again, we'll start by generating a route:</source>
          <target state="translated">それでは、会社の連絡先を含む別のルートを作成してみましょう。もう一度、ルートを生成することから始めましょう。</target>
        </trans-unit>
        <trans-unit id="311e7c28de846f6b4798420c4a5a9e440da7f54c" translate="yes" xml:space="preserve">
          <source>Now let's render our component using the &lt;code&gt;render&lt;/code&gt; function. The &lt;code&gt;render&lt;/code&gt; function allows us to pass a template string, so that we can declare the component in the same way we do in our templates. Since we set the &lt;code&gt;rentalObj&lt;/code&gt; variable to our local scope, we can access it as part of our render string.</source>
          <target state="translated">次に、 &lt;code&gt;render&lt;/code&gt; 関数を使用してコンポーネントをレンダリングします。 &lt;code&gt;render&lt;/code&gt; 機能は、我々は我々がテンプレートで行うのと同じ方法でコンポーネントを宣言することができるように、私たちはテンプレート文字列を渡すことができます。 &lt;code&gt;rentalObj&lt;/code&gt; 変数をローカルスコープに設定したので、レンダー文字列の一部としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="431b5430f4b40181fa2b80add538cc5e19028acf" translate="yes" xml:space="preserve">
          <source>Now let's say your template is starting to get a bit cluttered and you want to clean up the logic in your templates. This can be achieved with the &lt;code&gt;let&lt;/code&gt; block helper. The &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#let&quot;&gt;&lt;code&gt;{{let}}&lt;/code&gt;&lt;/a&gt; helper lets you create new bindings (or temporary variables) in your template.</source>
          <target state="translated">ここで、テンプレートが少し乱雑になり始めていて、テンプレートのロジックをクリーンアップしたいとします。これは、 &lt;code&gt;let&lt;/code&gt; ブロックヘルパーを使用して実現できます。&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#let&quot;&gt; &lt;code&gt;{{let}}&lt;/code&gt; &lt;/a&gt;ヘルパーは、あなたのテンプレートで新しいバインディング（または一時的な変数）を作成することができます。</target>
        </trans-unit>
        <trans-unit id="ae22d53ed6893c6b12aeed6c790fd45587cc8f49" translate="yes" xml:space="preserve">
          <source>Now let's tell Ember how to turn that array of strings into HTML. Open the &lt;code&gt;scientists&lt;/code&gt; template and add the following code to loop through the array and print it:</source>
          <target state="translated">次に、その文字列の配列をHTMLに変換する方法をEmberに伝えます。 &lt;code&gt;scientists&lt;/code&gt; テンプレートを開き、次のコードを追加して配列をループして出力します。</target>
        </trans-unit>
        <trans-unit id="7f913783707682a29aebe4955714ed5c947732a8" translate="yes" xml:space="preserve">
          <source>Now let's test that the map component is relying on our service to provide map elements.</source>
          <target state="translated">ここで、マップ コンポーネントがマップ要素を提供するためにサービスに依存していることをテストしてみましょう。</target>
        </trans-unit>
        <trans-unit id="96f7e41a4cd747d58701a050ee081913d14c9b5e" translate="yes" xml:space="preserve">
          <source>Now let's write a test that sets a property on our &lt;code&gt;post&lt;/code&gt; model in the &lt;code&gt;PostController&lt;/code&gt; that would be available on the &lt;code&gt;CommentsController&lt;/code&gt;.</source>
          <target state="translated">今の書き込み、私たちのプロパティ設定し、テストしましょう &lt;code&gt;post&lt;/code&gt; でモデル &lt;code&gt;PostController&lt;/code&gt; に利用できるようになる &lt;code&gt;CommentsController&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c9f9ed10a2412df54c18588a43c8397490d4ba61" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;ember server&lt;/code&gt; (or &lt;code&gt;ember serve&lt;/code&gt;, or even &lt;code&gt;ember s&lt;/code&gt; for short) on your command line to start the Ember development server and then go to &lt;a href=&quot;http://localhost:4200/about&quot;&gt;&lt;code&gt;http://localhost:4200/about&lt;/code&gt;&lt;/a&gt; to see our new page in action!</source>
          <target state="translated">今すぐ実行する &lt;code&gt;ember server&lt;/code&gt; （または &lt;code&gt;ember serve&lt;/code&gt; 、あるいは &lt;code&gt;ember s&lt;/code&gt; エンバー開発サーバを起動し、その後に行くために、あなたのコマンドラインに短いため）&lt;a href=&quot;http://localhost:4200/about&quot;&gt; &lt;code&gt;http://localhost:4200/about&lt;/code&gt; &lt;/a&gt;アクションで私たちの新しいページを参照してください！</target>
        </trans-unit>
        <trans-unit id="84b050c16846a3214fdf9d603f7c5b69acbc94b6" translate="yes" xml:space="preserve">
          <source>Now run the tests by typing &lt;code&gt;ember test --server&lt;/code&gt; in the command line (or &lt;code&gt;ember t -s&lt;/code&gt; for short).</source>
          <target state="translated">次に、コマンドラインに &lt;code&gt;ember test --server&lt;/code&gt; （または &lt;code&gt;ember t -s&lt;/code&gt; ）と入力して、テストを実行します。</target>
        </trans-unit>
        <trans-unit id="34b197a6f48a8ab8f16c6e0063a35905a4b87cee" translate="yes" xml:space="preserve">
          <source>Now run your test suite with the CLI command, &lt;code&gt;ember test --server&lt;/code&gt;.</source>
          <target state="translated">次に、CLIコマンド &lt;code&gt;ember test --server&lt;/code&gt; を使用してテストスイートを実行します。</target>
        </trans-unit>
        <trans-unit id="787a23779b90cc388529dd5a1d0792e8596631dc" translate="yes" xml:space="preserve">
          <source>Now that data can be used in the &lt;code&gt;favorite-posts&lt;/code&gt; template:</source>
          <target state="translated">これで、 &lt;code&gt;favorite-posts&lt;/code&gt; テンプレートでデータを使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="e32163bdf7a676f31ff681bf9c67e518f8ae20d2" translate="yes" xml:space="preserve">
          <source>Now that our API is ready to return individual rentals, we can generate our &lt;code&gt;show&lt;/code&gt; sub-route. Much like generating our &lt;code&gt;rentals&lt;/code&gt; route, we will use &lt;code&gt;ember g&lt;/code&gt; to create a nested route.</source>
          <target state="translated">APIが個々のレンタルを返す準備ができたので、 &lt;code&gt;show&lt;/code&gt; サブルートを生成できます。 &lt;code&gt;rentals&lt;/code&gt; ルートの生成と同様に、 &lt;code&gt;ember g&lt;/code&gt; を使用してネストされたルートを作成します。</target>
        </trans-unit>
        <trans-unit id="390b956f83716b5d2b619a143ece53c88d58057b" translate="yes" xml:space="preserve">
          <source>Now that we are able to generate a map element, we will implement a maps service that will keep a reference to the Map object we create, and attach the map to an element in our application</source>
          <target state="translated">これでマップ要素を生成できるようになったので、作成したマップオブジェクトへの参照を保持し、アプリケーションの要素にマップをアタッチするマップサービスを実装します。</target>
        </trans-unit>
        <trans-unit id="e29152200d11c3493e21bf49ce8fe2f07316838b" translate="yes" xml:space="preserve">
          <source>Now that we are returning all of our rentals to the nested route's model, we will also move the rental list markup from our main route template to our nested route index template.</source>
          <target state="translated">すべてのレンタルをネストされたルートのモデルに返しているので、レンタルリストのマークアップをメインのルートテンプレートからネストされたルートインデックステンプレートに移動します。</target>
        </trans-unit>
        <trans-unit id="74ca8a47289101b4d71bc8a893d38054ad494e17" translate="yes" xml:space="preserve">
          <source>Now that we can load pages for individual rentals, we'll add a link (using the &lt;code&gt;link-to&lt;/code&gt; helper) within our &lt;code&gt;rental-listing&lt;/code&gt; component to navigate to individual pages. Here, the &lt;code&gt;link-to&lt;/code&gt; helper takes the route name and the rental model object as arguments. When you pass an object as second argument into the &lt;code&gt;link-to&lt;/code&gt; block helper, it will by default &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_serialize&quot;&gt;serialize&lt;/a&gt; the object to the ID of the model into the URL. Alternately, you may just pass &lt;code&gt;rental.id&lt;/code&gt; for clarity.</source>
          <target state="translated">個々のレンタルのページをロードできるようになったので、 &lt;code&gt;rental-listing&lt;/code&gt; コンポーネント内にリンク（ヘルパー &lt;code&gt;link-to&lt;/code&gt; のリンクを使用）を追加して、個々のページに移動します。ここで、 &lt;code&gt;link-to&lt;/code&gt; ヘルパーは、ルート名とレンタルモデルオブジェクトを引数として受け取ります。オブジェクトを2番目の引数として &lt;code&gt;link-to&lt;/code&gt; ブロックヘルパーに渡すと、デフォルトでオブジェクトがモデルのIDに&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_serialize&quot;&gt;シリアル&lt;/a&gt;化されてURLになります。代わりに、明確にするために &lt;code&gt;rental.id&lt;/code&gt; を渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="7449048b4c1f507cba589b5896f56bc6e59ebf2b" translate="yes" xml:space="preserve">
          <source>Now that we have a button, we need to wire it up to do &lt;em&gt;something&lt;/em&gt; when a user clicks on it. For simplicity, let's say we want to show an &lt;code&gt;alert&lt;/code&gt; dialog with the person's name when the button is clicked.</source>
          <target state="translated">ボタンができたので、ユーザーがボタンをクリックしたときに&lt;em&gt;何か&lt;/em&gt;を実行するために、ボタンを接続する必要があります。簡単にするために、ボタンがクリックされたときに人の名前を含む &lt;code&gt;alert&lt;/code&gt; ダイアログを表示するとします。</target>
        </trans-unit>
        <trans-unit id="4255feacf5239fbecd768d0253861a9694b0f109" translate="yes" xml:space="preserve">
          <source>Now that we have implemented the desired behavior, we can go back to the component's template and wire everything up:</source>
          <target state="translated">これで目的の動作が実装できたので、コンポーネントのテンプレートに戻って、すべての配線を行います。</target>
        </trans-unit>
        <trans-unit id="f51bc732dd5d0541e4168611797a812b626f2f08" translate="yes" xml:space="preserve">
          <source>Now that we have the maps API available to the application, we can create our map utility. Utility files can be generated using Ember CLI.</source>
          <target state="translated">これで、アプリケーションでマップAPIを利用できるようになったので、マップユーティリティを作成することができます。ユーティリティファイルは Ember CLI を使用して生成することができます。</target>
        </trans-unit>
        <trans-unit id="a4e52876f40ef26dc44f65cd5da56d10b2128afb" translate="yes" xml:space="preserve">
          <source>Now that we have various pages in our application, let's walk through how to build tests for them.</source>
          <target state="translated">アプリケーションの中に様々なページがあるので、それらのためのテストを構築する方法を見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="a9325da4991f12e5819676980260f75961e78b11" translate="yes" xml:space="preserve">
          <source>Now that we see &lt;em&gt;why&lt;/em&gt; we want to use a modifier for our audio component, let's walk through &lt;em&gt;how&lt;/em&gt; to create one. We will start with the component (to manage the state) and then implement the modifier (the manage the DOM).</source>
          <target state="translated">オーディオコンポーネントにモディファイヤを使用する&lt;em&gt;理由が&lt;/em&gt;わかったので、モディファイヤを作成する&lt;em&gt;方法&lt;/em&gt;を見ていきましょう。コンポーネント（状態を管理するため）から始めて、修飾子（DOMを管理するため）を実装します。</target>
        </trans-unit>
        <trans-unit id="6188cec92e3b92a3cd3573bff0b61954c555c273" translate="yes" xml:space="preserve">
          <source>Now that we've created a new component for filtering a list, we want to create a test to verify it. Let's use a &lt;a href=&quot;https://guides.emberjs.com/testing/testing-components&quot;&gt;component integration test&lt;/a&gt; to verify our component behavior, similar to &lt;a href=&quot;../simple-component#toc_an-integration-test&quot;&gt;how we tested our rental listing component earlier&lt;/a&gt;.</source>
          <target state="translated">リストをフィルタリングするための新しいコンポーネントを作成したので、それを検証するテストを作成します。&lt;a href=&quot;../simple-component#toc_an-integration-test&quot;&gt;先にレンタルリストコンポーネントをテスト&lt;/a&gt;した方法と同様に、&lt;a href=&quot;https://guides.emberjs.com/testing/testing-components&quot;&gt;コンポーネントの統合テスト&lt;/a&gt;を使用して、コンポーネントの動作を確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="8f98c7ad85c92ecc814c29c3767c5a61cece2013" translate="yes" xml:space="preserve">
          <source>Now that we've created this modifier, we can use it in our &lt;code&gt;modal&lt;/code&gt; component, and add some logic to invoke a passed-in action whenever the user clicks outside the modal.</source>
          <target state="translated">このモディファイヤを作成したので、 &lt;code&gt;modal&lt;/code&gt; コンポーネントで使用し、ユーザーがモーダルの外側をクリックするたびに渡されたアクションを呼び出すロジックを追加できます。</target>
        </trans-unit>
        <trans-unit id="22d276eb5319d347792a8180152b4cf12d2f8003" translate="yes" xml:space="preserve">
          <source>Now that we've got the &lt;code&gt;scientists&lt;/code&gt; template rendering, let's give it some data to render. We do that by specifying a &lt;em&gt;model&lt;/em&gt; for that route, and we can specify a model by editing &lt;code&gt;app/routes/scientists.js&lt;/code&gt;.</source>
          <target state="translated">今、私たちが持っていることを &lt;code&gt;scientists&lt;/code&gt; テンプレートのレンダリングを、のはそれをレンダリングするためのいくつかのデータを与えてみましょう。そのルートの&lt;em&gt;モデル&lt;/em&gt;を指定することでそれを行い、 &lt;code&gt;app/routes/scientists.js&lt;/code&gt; を編集することでモデルを指定できます。</target>
        </trans-unit>
        <trans-unit id="409a5bf3323ebbf783bca40b618202511ed25e9c" translate="yes" xml:space="preserve">
          <source>Now that we've tested that the &lt;code&gt;list-filter&lt;/code&gt; component behaves as expected, let's test that the page itself also behaves properly with an acceptance test. We'll verify that a user visiting the rentals page can enter text into the search field and narrow the list of rentals by city.</source>
          <target state="translated">今、私たちがいることをテストしたことを &lt;code&gt;list-filter&lt;/code&gt; ページ自体も受け入れテストで正常に動作することを期待通りに振る舞うコンポーネントは、のテストをしてみましょう。レンタルページにアクセスするユーザーが検索フィールドにテキストを入力し、レンタルリストを都市で絞り込むことができることを確認します。</target>
        </trans-unit>
        <trans-unit id="e9f934b876c6d18b3147c025ed6401410b05147e" translate="yes" xml:space="preserve">
          <source>Now that we've written our application and verified that it works in development, it's time to get it ready to deploy to our users.</source>
          <target state="translated">アプリケーションを書き、開発中に動作することを確認したので、ユーザーにデプロイする準備をしましょう。</target>
        </trans-unit>
        <trans-unit id="9242ac3aa654e84ff49bf7dcc4f82def076c3580" translate="yes" xml:space="preserve">
          <source>Now that you have the basics down, are you feeling creative and adventurous? The Ember community has created hundreds of addons that you can use for free in your app. Addons let you quickly add features like calendars, navbars, payments, authentication, themes, and more. Visit &lt;a href=&quot;https://emberobserver.com&quot;&gt;Ember Observer&lt;/a&gt; to browse the possibilities!</source>
          <target state="translated">基本を理解したので、創造的で冒険的な気分になりましたか？Emberコミュニティは、アプリで無料で使用できる何百ものアドオンを作成しました。アドオンを使用すると、カレンダー、ナビゲーションバー、支払い、認証、テーマなどの機能をすばやく追加できます。可能性を閲覧するには、&lt;a href=&quot;https://emberobserver.com&quot;&gt;EmberObserverに&lt;/a&gt;アクセスしてください。</target>
        </trans-unit>
        <trans-unit id="42a2fba2bd604ccca37641fca53a4a2fc6b8507c" translate="yes" xml:space="preserve">
          <source>Now that your app is deployed, what should you do next?</source>
          <target state="translated">アプリがデプロイされたら、次は何をすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="84e818bed748241b2d7235584a3e41d2b94d2146" translate="yes" xml:space="preserve">
          <source>Now the Text component doesn't have any internal state, it defers to the parent Form component, and when the Form component toggles its disabled state, it clears the state of the text. The mutation of state is centralized in the action where it occurs, making our program easier to reason about as a whole.</source>
          <target state="translated">Textコンポーネントは内部状態を持たず、親であるFormコンポーネントに依存しており、Formコンポーネントが無効状態を切り替えると、Textの状態もクリアされます。状態の変化は、それが発生するアクションに集中しているので、プログラム全体としての推論が容易になりました。</target>
        </trans-unit>
        <trans-unit id="fb98077b823bffbec7d94fef2fd368d976bda3cd" translate="yes" xml:space="preserve">
          <source>Now the same template above renders the following HTML:</source>
          <target state="translated">これで、上記の同じテンプレートでは、以下のようなHTMLが表示されます。</target>
        </trans-unit>
        <trans-unit id="751cdc42f9ac3dfa5f8f1d9e4ef15bfaddd5edf2" translate="yes" xml:space="preserve">
          <source>Now the value passed into the helper has its HTML escaped, but the trusted &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tags that we want to wrap the value in are &lt;em&gt;not&lt;/em&gt; escaped. A malicious user setting their &lt;code&gt;firstName&lt;/code&gt; to something containing HTML would see this:</source>
          <target state="translated">これで、ヘルパーに渡される値はHTMLでエスケープされますが、値をラップする信頼できる &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; タグ&lt;em&gt;は&lt;/em&gt;エスケープされ&lt;em&gt;ません&lt;/em&gt;。悪意のあるユーザーが &lt;code&gt;firstName&lt;/code&gt; をHTMLを含むものに設定すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="8b6b5009f8b7a2901d3d319dd17092db9a1ed606" translate="yes" xml:space="preserve">
          <source>Now visiting the root route at &lt;code&gt;/&lt;/code&gt; will result in the &lt;code&gt;/rentals&lt;/code&gt; URL loading.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; でルートルートにアクセスすると、 &lt;code&gt;/rentals&lt;/code&gt; URLが読み込まれます。</target>
        </trans-unit>
        <trans-unit id="6c6c7e593ed0c850f3e8190fef9191b81f3e28da" translate="yes" xml:space="preserve">
          <source>Now we are listing rentals, and verifying it with an acceptance test. This leaves us with 2 remaining acceptance test failures (and 1 eslint failure):</source>
          <target state="translated">今、私たちはレンタルをリストアップしていて、それを受け入れテストで検証しています。これで残りの2つの受入テストの失敗(と1つのエスリントの失敗)を残すことができました。</target>
        </trans-unit>
        <trans-unit id="7108a8b8c763bba0f7398042020329fed4eaf6cc" translate="yes" xml:space="preserve">
          <source>Now we can add functionality that will show the image of a rental when requested by the user.</source>
          <target state="translated">これで、ユーザーが要求したときにレンタルの画像を表示する機能を追加できるようになりました。</target>
        </trans-unit>
        <trans-unit id="0eb5f04b662c492a3092ec0f4d3de3f94910b7d1" translate="yes" xml:space="preserve">
          <source>Now we can either set the &lt;code&gt;belongsTo&lt;/code&gt; relationship in our new comment, or, update the blogPost's &lt;code&gt;hasMany&lt;/code&gt; relationship. As you might observe, we don't need to set both &lt;code&gt;hasMany&lt;/code&gt; and &lt;code&gt;belongsTo&lt;/code&gt; for a record. Ember Data will do that for us.</source>
          <target state="translated">これで、新しいコメントで &lt;code&gt;belongsTo&lt;/code&gt; 関係を設定するか、blogPostの &lt;code&gt;hasMany&lt;/code&gt; 関係を更新できます。 &lt;code&gt;belongsTo&lt;/code&gt; かもしれませんが、レコードに &lt;code&gt;hasMany&lt;/code&gt; とbelongsToの両方を設定する必要はありません。EmberDataがそれを行います。</target>
        </trans-unit>
        <trans-unit id="fe4c933206df8d089a9a5f5490e91df59c0228d5" translate="yes" xml:space="preserve">
          <source>Now we can move on to a more complex test case that ensures our helper is rendered correctly as well. This can be done with the &lt;code&gt;setupRenderingTest&lt;/code&gt; helper, as shown in &lt;a href=&quot;../testing-components&quot;&gt;Testing Components&lt;/a&gt;.</source>
          <target state="translated">これで、ヘルパーが正しくレンダリングされることを保証する、より複雑なテストケースに進むことができます。これは、 &lt;code&gt;setupRenderingTest&lt;/code&gt; &lt;a href=&quot;../testing-components&quot;&gt;コンポーネントのテスト」に&lt;/a&gt;示すように、setupRenderingTestヘルパーを使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="bfa9210fe58ffde8b4dcc9ff4b51a5ca9f882a82" translate="yes" xml:space="preserve">
          <source>Now we can move on to an integration test. Integration testing helpers is done with the &lt;code&gt;moduleForComponent&lt;/code&gt; helpers, as shown in &lt;a href=&quot;../unit-testing-basics&quot;&gt;Testing Components&lt;/a&gt;.</source>
          <target state="translated">これで、統合テストに進むことができます。統合テストヘルパーは、 &lt;code&gt;moduleForComponent&lt;/code&gt; &lt;a href=&quot;../unit-testing-basics&quot;&gt;コンポーネントのテスト」に&lt;/a&gt;示すように、moduleForComponentヘルパーを使用して実行されます。</target>
        </trans-unit>
        <trans-unit id="d378360c77a1435b23b3e8fbbda88e19e03f54b9" translate="yes" xml:space="preserve">
          <source>Now we can open and close the modal dialog at will! Next, we'll setup the component to send its &lt;em&gt;own&lt;/em&gt; events when the user clicks the &quot;OK&quot; and &quot;Cancel&quot; buttons.</source>
          <target state="translated">これで、モーダルダイアログを自由に開いたり閉じたりできます。次に、ユーザーが[OK]ボタンと[キャンセル]ボタンをクリックしたときに&lt;em&gt;独自の&lt;/em&gt;イベントを送信するようにコンポーネントを設定します。</target>
        </trans-unit>
        <trans-unit id="11398bb83489e7573750eb0b3ecfd3dc7203a6e0" translate="yes" xml:space="preserve">
          <source>Now we can use our custom &lt;code&gt;{{autofocus}}&lt;/code&gt; modifier throughout our application.</source>
          <target state="translated">これで、アプリケーション全体でカスタム &lt;code&gt;{{autofocus}}&lt;/code&gt; 修飾子を使用できます。</target>
        </trans-unit>
        <trans-unit id="6fdad371bc9df138ad834391faad276517ce8b68" translate="yes" xml:space="preserve">
          <source>Now we have a button that can receive some text as an argument, with a modal confirmation that will show conditionally based on its &lt;code&gt;isConfirming&lt;/code&gt; property. You'll notice this property is decorated with the &lt;code&gt;@tracked&lt;/code&gt; decorator - this is known as a &lt;em&gt;tracked property&lt;/em&gt;, and indicates to Ember that the field will change in value over the lifetime of the component. You can learn more about tracked properties in the &lt;a href=&quot;../autotracking-in-depth&quot;&gt;Autotracking In-Depth&lt;/a&gt; guide.</source>
          <target state="translated">これで、 &lt;code&gt;isConfirming&lt;/code&gt; プロパティに基づいて条件付きで表示されるモーダル確認を使用して、引数としてテキストを受け取ることができるボタンができました。このプロパティは &lt;code&gt;@tracked&lt;/code&gt; デコレータで装飾されていることに気付くでしょう。これは&lt;em&gt;trackedプロパティ&lt;/em&gt;と呼ばれ、コンポーネントの存続期間中にフィールドの値が変化することをEmberに示します。追跡されたプロパティの詳細については、&lt;a href=&quot;../autotracking-in-depth&quot;&gt;AutotrackingIn-Depth&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="4adfea733a9bf47405887104fee15db7d39c58a6" translate="yes" xml:space="preserve">
          <source>Now we need to define a computed property of our category-filtered array that the &lt;code&gt;articles&lt;/code&gt; template will render:</source>
          <target state="translated">次に、 &lt;code&gt;articles&lt;/code&gt; テンプレートがレンダリングする、カテゴリーでフィルターされた配列の計算されたプロパティを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a9ade858770208815604908e8c6a68cfd6d052d" translate="yes" xml:space="preserve">
          <source>Now we need to define a getter for our category-filtered array, which the &lt;code&gt;articles&lt;/code&gt; template will render. For the getter to recompute when values change, &lt;code&gt;category&lt;/code&gt; and &lt;code&gt;model&lt;/code&gt; should be marked as tracked properties:</source>
          <target state="translated">次に、 &lt;code&gt;articles&lt;/code&gt; テンプレートがレンダリングするカテゴリフィルター配列のゲッターを定義する必要があります。値が変更されたときにゲッターが再計算するには、 &lt;code&gt;category&lt;/code&gt; と &lt;code&gt;model&lt;/code&gt; を追跡プロパティとしてマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="54e5a7d11514449fe0aca845de95725d318042b5" translate="yes" xml:space="preserve">
          <source>Now we need to make it so that the &lt;code&gt;userDidDeleteAccount()&lt;/code&gt; action defined in the parent component &lt;code&gt;user-profile&lt;/code&gt; can be triggered from within &lt;code&gt;button-with-confirmation&lt;/code&gt;. We'll do this by passing the action to the child component in exactly the same way that we pass other properties. This is possible since actions are simply functions, just like any other method on a component, and they can therefore be passed from one component to another like this:</source>
          <target state="translated">次に、親コンポーネントの &lt;code&gt;user-profile&lt;/code&gt; で定義された &lt;code&gt;userDidDeleteAccount()&lt;/code&gt; アクションを &lt;code&gt;button-with-confirmation&lt;/code&gt; 内からトリガーできるようにする必要があります。これを行うには、他のプロパティを渡すのとまったく同じ方法で、子コンポーネントにアクションを渡します。これは、コンポーネント上の他のメソッドと同様に、アクションは単なる関数であり、次のように1つのコンポーネントから別のコンポーネントに渡すことができるため、可能です。</target>
        </trans-unit>
        <trans-unit id="638d79b6dc710ae90d1be166135c3fd4850c0c22" translate="yes" xml:space="preserve">
          <source>Now we've implemented our action, but we have not told Ember when we want this action to be triggered, which is the next step.</source>
          <target state="translated">これでアクションは実装されましたが、次のステップであるこのアクションをいつトリガーさせたいかをEmberに伝えていません。</target>
        </trans-unit>
        <trans-unit id="eb138d4ac2039ca6f91d7778d49a1e0c080f7905" translate="yes" xml:space="preserve">
          <source>Now we've implemented our action, but we have not told Ember when we want this action to be triggered. In order to trigger the action when the user clicks &quot;OK&quot; in the &lt;code&gt;ButtonWithConfirmation&lt;/code&gt; component, we'll need to pass the action &lt;em&gt;down&lt;/em&gt; to it as an argument:</source>
          <target state="translated">これでアクションを実装しましたが、このアクションをいつトリガーするかをEmberに通知していません。ユーザーが「OK」をクリックしたときにアクションをトリガーするために &lt;code&gt;ButtonWithConfirmation&lt;/code&gt; のコンポーネントは、我々は行動合格する必要があります&lt;em&gt;ダウン&lt;/em&gt;引数としてそれました：</target>
        </trans-unit>
        <trans-unit id="55a49ef66b489e2e182e74e6d1a108e56c676795" translate="yes" xml:space="preserve">
          <source>Now when called like so:</source>
          <target state="translated">今、そう言われると</target>
        </trans-unit>
        <trans-unit id="9c2fddefdc4b37f652575c4a9980122a108feeff" translate="yes" xml:space="preserve">
          <source>Now when the &lt;code&gt;SystemPreferencesEditor&lt;/code&gt; handles the delete action, it receives only the user's account &lt;code&gt;id&lt;/code&gt; string.</source>
          <target state="translated">これで、 &lt;code&gt;SystemPreferencesEditor&lt;/code&gt; が削除アクションを処理するときに、ユーザーのアカウント &lt;code&gt;id&lt;/code&gt; 文字列のみを受け取ります。</target>
        </trans-unit>
        <trans-unit id="8266b5a5c3d0155af7d2420da1952fd4bf225240" translate="yes" xml:space="preserve">
          <source>Now when the &lt;code&gt;system-preferences-editor&lt;/code&gt; handles the delete action, it receives only the user's account &lt;code&gt;id&lt;/code&gt; string.</source>
          <target state="translated">&lt;code&gt;system-preferences-editor&lt;/code&gt; が削除アクションを処理するとき、ユーザーのアカウント &lt;code&gt;id&lt;/code&gt; 文字列のみを受け取ります。</target>
        </trans-unit>
        <trans-unit id="24e0f7c85a3653f2f8783ca8850aaea9de98c648" translate="yes" xml:space="preserve">
          <source>Now when we click the image or the &lt;code&gt;View Larger&lt;/code&gt; link in our browser, we see our image show larger. When we click the enlarged image again, we see it smaller.</source>
          <target state="translated">ブラウザで画像または &lt;code&gt;View Larger&lt;/code&gt; 画像を表示]リンクをクリックすると、画像が大きく表示されます。拡大した画像をもう一度クリックすると、小さく表示されます。</target>
        </trans-unit>
        <trans-unit id="5d245f0aef23eeedd834fcade7b3ff3025ac6d19" translate="yes" xml:space="preserve">
          <source>Now when we go to &lt;a href=&quot;http://localhost:4200/contact&quot;&gt;&lt;code&gt;http://localhost:4200/contact&lt;/code&gt;&lt;/a&gt;, we'll see our contact page.</source>
          <target state="translated">&lt;a href=&quot;http://localhost:4200/contact&quot;&gt; &lt;code&gt;http://localhost:4200/contact&lt;/code&gt; &lt;/a&gt;にアクセスすると、連絡先ページが表示されます。</target>
        </trans-unit>
        <trans-unit id="be877b75fca57439ff66da3a78bca6da09e90e67" translate="yes" xml:space="preserve">
          <source>Now when you confirm deletion, the action goes straight to the &lt;code&gt;SystemPreferencesEditor&lt;/code&gt; to be handled in its local context.</source>
          <target state="translated">これで、削除を確認すると、アクションは &lt;code&gt;SystemPreferencesEditor&lt;/code&gt; に直接移動し、ローカルコンテキストで処理されます。</target>
        </trans-unit>
        <trans-unit id="ce9483b052b5784076ba5b335a0118e44ab1c9e9" translate="yes" xml:space="preserve">
          <source>Now when you confirm deletion, the action goes straight to the &lt;code&gt;system-preferences-editor&lt;/code&gt; to be handled in its local context.</source>
          <target state="translated">削除を確認すると、アクションは直接 &lt;code&gt;system-preferences-editor&lt;/code&gt; に送られ、ローカルコンテキストで処理されます。</target>
        </trans-unit>
        <trans-unit id="473068e00c295cfcafcd8f45ee6f410ef05f53fa" translate="yes" xml:space="preserve">
          <source>Now, almost anywhere in your app, you can use the various jQuery integration.</source>
          <target state="translated">これで、アプリ内のほとんどどこでも、様々なjQueryの統合機能を使うことができます。</target>
        </trans-unit>
        <trans-unit id="c492595dd56aaada785857fc9c9edf375ab46697" translate="yes" xml:space="preserve">
          <source>Now, as long as your template is wrapped in the &lt;code&gt;let&lt;/code&gt; helper, you can access the capitalized given name and family name as &lt;code&gt;givenName&lt;/code&gt; and &lt;code&gt;familyName&lt;/code&gt; instead of &lt;code&gt;(capitalize this.person.givenName)&lt;/code&gt;.</source>
          <target state="translated">これで、テンプレートが &lt;code&gt;let&lt;/code&gt; ヘルパーでラップされている限り、 &lt;code&gt;(capitalize this.person.givenName)&lt;/code&gt; の代わりに、大文字の名前と家系の名前を &lt;code&gt;givenName&lt;/code&gt; と &lt;code&gt;familyName&lt;/code&gt; としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="61a8b0d0ff011a9764ca1ad939461500c43c3744" translate="yes" xml:space="preserve">
          <source>Now, define your new controller like so:</source>
          <target state="translated">では、新しいコントローラを以下のように定義します。</target>
        </trans-unit>
        <trans-unit id="2bd21344ef8f95330e5f178d2999e6351e5140b4" translate="yes" xml:space="preserve">
          <source>Now, if we use our &lt;code&gt;ErrorDialog&lt;/code&gt; component without a block, we'll get the default message.</source>
          <target state="translated">ここで、ブロックなしで &lt;code&gt;ErrorDialog&lt;/code&gt; コンポーネントを使用すると、デフォルトのメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="f4fd3bbdfb6ab9a0619b9f651b994843f728f190" translate="yes" xml:space="preserve">
          <source>Now, let's add a list of available rentals to the rentals page we've just created.</source>
          <target state="translated">では、先ほど作成したレンタルページに、利用可能なレンタルの一覧を追加してみましょう。</target>
        </trans-unit>
        <trans-unit id="a53ad0647104e578d8de2040723dfe077ba174b5" translate="yes" xml:space="preserve">
          <source>Now, let's switch over to our rentals page template. We can use the model attribute to display our list of rentals. Here, we'll use another common Handlebars helper called &lt;a href=&quot;https://guides.emberjs.com/templates/displaying-a-list-of-items/&quot;&gt;&lt;code&gt;{{each}}&lt;/code&gt;&lt;/a&gt;. This helper will let us loop through each of the rental objects in our model:</source>
          <target state="translated">次に、レンタルページテンプレートに切り替えます。model属性を使用して、レンタルのリストを表示できます。ここでは、&lt;a href=&quot;https://guides.emberjs.com/templates/displaying-a-list-of-items/&quot;&gt; &lt;code&gt;{{each}}&lt;/code&gt; &lt;/a&gt;と呼ばれる別の一般的なハンドルバーヘルパーを使用します。このヘルパーを使用すると、モデル内の各レンタルオブジェクトをループできます。</target>
        </trans-unit>
        <trans-unit id="1c7b54e01c4ec08044f348cb31fc93794811e59a" translate="yes" xml:space="preserve">
          <source>Now, suppose we want to add comments to an existing blogPost. We can do this in two ways, but for both of them, we first need to look up a blog post that is already loaded in the store, using its id:</source>
          <target state="translated">さて、既存のblogPostにコメントを追加したいとしましょう。これには2つの方法がありますが、どちらの方法でも、まずストアにすでに読み込まれているブログ記事を、そのidを使って検索する必要があります。</target>
        </trans-unit>
        <trans-unit id="f5634ffbc151b6f602493d24fb1795397f8549ec" translate="yes" xml:space="preserve">
          <source>Now, the Counter calls the &lt;code&gt;updateMultiple&lt;/code&gt; argument (which we expect to be a function) with the new value for &lt;code&gt;multiple&lt;/code&gt;, and the parent component can update the multiple.</source>
          <target state="translated">これで、Counterは &lt;code&gt;updateMultiple&lt;/code&gt; 引数（関数であると予想されます）を &lt;code&gt;multiple&lt;/code&gt; の新しい値で呼び出し、親コンポーネントは倍数を更新できます。</target>
        </trans-unit>
        <trans-unit id="15795f7ce89f935cc441a35c4b6d01a3b8f097c4" translate="yes" xml:space="preserve">
          <source>Now, we can use &lt;code&gt;onConfirm&lt;/code&gt; in the child component to invoke the action on the parent:</source>
          <target state="translated">これで、子コンポーネントで &lt;code&gt;onConfirm&lt;/code&gt; を使用して、親のアクションを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e8a74da24790015ebe84e057ae755a540ac6ffaa" translate="yes" xml:space="preserve">
          <source>Now, we can use the &lt;code&gt;{{blog-post}}&lt;/code&gt; component and pass it properties in another template:</source>
          <target state="translated">これで、 &lt;code&gt;{{blog-post}}&lt;/code&gt; コンポーネントを使用して、別のテンプレートでプロパティを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="fdf62c9f4192c9e36113ca42781fc9263390a9ef" translate="yes" xml:space="preserve">
          <source>Now, we'll add our corresponding link to the contact page so we can move back and forth between &lt;code&gt;about&lt;/code&gt; and &lt;code&gt;contact&lt;/code&gt;:</source>
          <target state="translated">次に、対応するリンクを連絡先ページに追加して、 &lt;code&gt;about&lt;/code&gt; と &lt;code&gt;contact&lt;/code&gt; の間を前後に移動できるようにします。</target>
        </trans-unit>
        <trans-unit id="a879d50bf8c09faae5535f3cab8516120420f26f" translate="yes" xml:space="preserve">
          <source>Now, when the &lt;code&gt;+1&lt;/code&gt; and &lt;code&gt;-1&lt;/code&gt; buttons get clicked, the number displayed will change.</source>
          <target state="translated">これで、 &lt;code&gt;+1&lt;/code&gt; &lt;code&gt;-1&lt;/code&gt; ボタンと-1ボタンをクリックすると、表示される数字が変わります。</target>
        </trans-unit>
        <trans-unit id="6b6222fa9f13976ca7ad6beffaa5b6d82e8a9acf" translate="yes" xml:space="preserve">
          <source>Now, when the user visits &lt;code&gt;/about&lt;/code&gt;, Ember will render the &lt;code&gt;about&lt;/code&gt; template. Visiting &lt;code&gt;/favs&lt;/code&gt; will render the &lt;code&gt;favorites&lt;/code&gt; template.</source>
          <target state="translated">これで、ユーザーが &lt;code&gt;/about&lt;/code&gt; にアクセスすると、Emberは &lt;code&gt;about&lt;/code&gt; テンプレートをレンダリングします。訪問 &lt;code&gt;/favs&lt;/code&gt; レンダリングする &lt;code&gt;favorites&lt;/code&gt; テンプレートを。</target>
        </trans-unit>
        <trans-unit id="894378d414e7ebe678c18c3f781dba0645530766" translate="yes" xml:space="preserve">
          <source>Now, when we click on the confirm button, the &lt;code&gt;submitConfirm&lt;/code&gt; action will also call the &lt;code&gt;deleteAccount&lt;/code&gt; action, which was passed down as an argument to the confirmation button component. In this way, the &lt;code&gt;@onConfirm&lt;/code&gt; argument is like an event which our &lt;code&gt;ButtonWithConfirmation&lt;/code&gt; component triggers.</source>
          <target state="translated">今、私たちは確認ボタンをクリックすると、 &lt;code&gt;submitConfirm&lt;/code&gt; のアクションも呼び出します &lt;code&gt;deleteAccount&lt;/code&gt; の確認ボタンコンポーネントに引数として受け継がれたアクションを、。このように、 &lt;code&gt;@onConfirm&lt;/code&gt; 引数は、 &lt;code&gt;ButtonWithConfirmation&lt;/code&gt; コンポーネントがトリガーするイベントのようなものです。</target>
        </trans-unit>
        <trans-unit id="714db7ba4265493aac8451d6fdd39218363b66cb" translate="yes" xml:space="preserve">
          <source>Now, whenever we change the value of the &lt;code&gt;select&lt;/code&gt;, it'll call the action method, which will set the value of &lt;code&gt;language&lt;/code&gt;. Since &lt;code&gt;language&lt;/code&gt; is marked as tracked, and was used in rendering &lt;code&gt;greeting&lt;/code&gt;, Ember will know that &lt;code&gt;greeting&lt;/code&gt; needs to be re-rendered in the template, and will update.</source>
          <target state="translated">これで、 &lt;code&gt;select&lt;/code&gt; の値を変更するたびに、actionメソッドが呼び出され、 &lt;code&gt;language&lt;/code&gt; の値が設定されます。以来 &lt;code&gt;language&lt;/code&gt; 追跡としてマークされ、レンダリングに使用された &lt;code&gt;greeting&lt;/code&gt; 、エンバーがあることを知っているだろう &lt;code&gt;greeting&lt;/code&gt; ニーズがテンプレートに再レンダリングされる、および更新します。</target>
        </trans-unit>
        <trans-unit id="e024f13e16917f40a23bcb1554e9bce6943df6d7" translate="yes" xml:space="preserve">
          <source>Now, whenever we type a value and submit it in the form, a new message object will be added to the array, and the &lt;code&gt;{{each}}&lt;/code&gt; will update with the new item.</source>
          <target state="translated">これで、値を入力してフォームに送信するたびに、新しいメッセージオブジェクトが配列に追加され、 &lt;code&gt;{{each}}&lt;/code&gt; が新しいアイテムで更新されます。</target>
        </trans-unit>
        <trans-unit id="a5cd41af69260a04d94db9c599bc1850243572fb" translate="yes" xml:space="preserve">
          <source>Now, you have a choice to make, and the right answer varies based on how your team operates and what your app is like. Consider which path has the least mental overhead for your engineering team, including both experienced and beginner Ember developers.</source>
          <target state="translated">さて、あなたは選択を迫られていますが、正解はあなたのチームの運営方法やアプリの内容によって異なります。経験豊富なEmber開発者と初心者を含めたエンジニアリングチームにとって、どの道が最も精神的な負担が少ないかを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="109085beaaa80ac89858b283a64f7c75d7e5bb12" translate="yes" xml:space="preserve">
          <source>Null</source>
          <target state="translated">Null</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="88edc4776d403507658bee878ccdd72f1066d6fc" translate="yes" xml:space="preserve">
          <source>Number of elements that should be removed from the array, starting at *idx*.</source>
          <target state="translated">idx*から始まる配列から削除されるべき要素の数。</target>
        </trans-unit>
        <trans-unit id="0da649b10044d0f71d7a6905e9b6d63659072ba9" translate="yes" xml:space="preserve">
          <source>Number of milliseconds to space out requests.</source>
          <target state="translated">リクエストをスペースアウトするためのミリ秒数。</target>
        </trans-unit>
        <trans-unit id="76f886e5f43af44774fe994d2bf9d8f584ccf233" translate="yes" xml:space="preserve">
          <source>Number of milliseconds to wait.</source>
          <target state="translated">待ち時間のミリ秒数。</target>
        </trans-unit>
        <trans-unit id="dd4ba91b29d32edc1f365c3bd6735151219f7f8b" translate="yes" xml:space="preserve">
          <source>NumberTransform</source>
          <target state="translated">NumberTransform</target>
        </trans-unit>
        <trans-unit id="c96f8cfa04b2401642b632ab99c696e7b056b4c9" translate="yes" xml:space="preserve">
          <source>Number|Property</source>
          <target state="translated">Number|Property</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="046bbc130ff7274f6d64607d913605fb2889bf35" translate="yes" xml:space="preserve">
          <source>Object Inspector</source>
          <target state="translated">オブジェクトインスペクタ</target>
        </trans-unit>
        <trans-unit id="e1513401bdad97eeec26a0df3ad83cdcfa1ea677" translate="yes" xml:space="preserve">
          <source>Object Root</source>
          <target state="translated">オブジェクトルート</target>
        </trans-unit>
        <trans-unit id="a7b77dbe50791d31096e5af54a26e5c31a19b936" translate="yes" xml:space="preserve">
          <source>Object containing values to use within the new class</source>
          <target state="translated">新しいクラス内で使用する値を含むオブジェクト</target>
        </trans-unit>
        <trans-unit id="f1d7548ccd9210fe9f2413508f315d38d0d8c629" translate="yes" xml:space="preserve">
          <source>Object that will be set as the model of the engine.</source>
          <target state="translated">エンジンのモデルとして設定されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="d2fff7b4d950616ac3bef1a515c9329ec963f60e" translate="yes" xml:space="preserve">
          <source>Object | AdapterError</source>
          <target state="translated">オブジェクト|アダプタエラー</target>
        </trans-unit>
        <trans-unit id="6b304869b69598961a9d35b37c6fa6c60971f424" translate="yes" xml:space="preserve">
          <source>Object | DS.AdapterError</source>
          <target state="translated">オブジェクト|DS.AdapterError</target>
        </trans-unit>
        <trans-unit id="b4784d7acbd2702fa6271cd5462cc264f381f5af" translate="yes" xml:space="preserve">
          <source>Object | undefined</source>
          <target state="translated">オブジェクト|未定義</target>
        </trans-unit>
        <trans-unit id="43710f2ae099d35ce837e6f0eaa732de92f07067" translate="yes" xml:space="preserve">
          <source>Object...</source>
          <target state="translated">Object...</target>
        </trans-unit>
        <trans-unit id="509eaa966f59106fc4885b0bd87f377320887ef2" translate="yes" xml:space="preserve">
          <source>ObjectProxy</source>
          <target state="translated">ObjectProxy</target>
        </trans-unit>
        <trans-unit id="b6ab519ee4828e64cb84e7da4b0494d126262ccd" translate="yes" xml:space="preserve">
          <source>Objects are considered Array-like if any of the following are true:</source>
          <target state="translated">オブジェクトは、以下のいずれかが真である場合、Array-likeとみなされます。</target>
        </trans-unit>
        <trans-unit id="1f91056b2f2c5a87fefcf8263cdce9940569716e" translate="yes" xml:space="preserve">
          <source>Objects in Ember</source>
          <target state="translated">こはくの中のオブジェクト</target>
        </trans-unit>
        <trans-unit id="ea0a98c632b2c1b78a2d3889fe6a012055812ca8" translate="yes" xml:space="preserve">
          <source>Object|Function</source>
          <target state="translated">Object|Function</target>
        </trans-unit>
        <trans-unit id="d9008046621fd4aa468204fcfd6ca159f07a8852" translate="yes" xml:space="preserve">
          <source>Object|Promise</source>
          <target state="translated">Object|Promise</target>
        </trans-unit>
        <trans-unit id="c231f0cfa191393d14a834365263558785e900ee" translate="yes" xml:space="preserve">
          <source>Object|String</source>
          <target state="translated">Object|String</target>
        </trans-unit>
        <trans-unit id="c92258fa87a7fd87bfb0eac39b2cad3876c1531d" translate="yes" xml:space="preserve">
          <source>Observable</source>
          <target state="translated">Observable</target>
        </trans-unit>
        <trans-unit id="307932fe3fc8a6a623482336122238a18d63c345" translate="yes" xml:space="preserve">
          <source>Observable Equivalent</source>
          <target state="translated">観測可能等価</target>
        </trans-unit>
        <trans-unit id="03ec7d08aec77b2156c9347f0082c5eed203b4e0" translate="yes" xml:space="preserve">
          <source>Observer Methods</source>
          <target state="translated">オブザーバの方法</target>
        </trans-unit>
        <trans-unit id="20c17cb09007fd332a06112b65f303ed65335037" translate="yes" xml:space="preserve">
          <source>Observer methods have the following signature:</source>
          <target state="translated">オブザーバ・メソッドには、以下のシグネチャがあります。</target>
        </trans-unit>
        <trans-unit id="0618a214d16e39be75c6315a11d086a7dcbea1b6" translate="yes" xml:space="preserve">
          <source>Observers</source>
          <target state="translated">Observers</target>
        </trans-unit>
        <trans-unit id="853a6ea1725e790242a53c8b71d88a3606114195" translate="yes" xml:space="preserve">
          <source>Observers / Binding</source>
          <target state="translated">オブザーバー/バインディング</target>
        </trans-unit>
        <trans-unit id="0ba30584277e971c04f0d982aa5c093fa641ac6a" translate="yes" xml:space="preserve">
          <source>Observers and asynchrony</source>
          <target state="translated">オブザーバーと非同期</target>
        </trans-unit>
        <trans-unit id="dd121fa26be2df8672e845b1537510d9b314c5cd" translate="yes" xml:space="preserve">
          <source>Observers and object initialization</source>
          <target state="translated">オブザーバとオブジェクトの初期化</target>
        </trans-unit>
        <trans-unit id="e736f6b09fdaa953337c6d536a1450f9f94c9a91" translate="yes" xml:space="preserve">
          <source>Observers are annotated using &lt;code&gt;Ember.observer()&lt;/code&gt;:</source>
          <target state="translated">オブザーバーは &lt;code&gt;Ember.observer()&lt;/code&gt; を使用して注釈が付けられます。</target>
        </trans-unit>
        <trans-unit id="3077946aa34d8ec8d2b52fd810a985c5b86ca007" translate="yes" xml:space="preserve">
          <source>Observers in Ember are currently synchronous. This means that they will fire as soon as one of the properties they observe changes. Because of this, it is easy to introduce bugs where properties are not yet synchronized:</source>
          <target state="translated">Emberのオブザーバーは、現在、同期しています。これは、観測しているプロパティの一つが変わるとすぐに起動することを意味します。このため、プロパティがまだ同期化されていないバグが発生しやすくなっています。</target>
        </trans-unit>
        <trans-unit id="0dcd8db6908df157727f62893615213904a58453" translate="yes" xml:space="preserve">
          <source>Observers never fire until after the initialization of an object is complete.</source>
          <target state="translated">オブザーバは、オブジェクトの初期化が完了するまで、決して発射しません。</target>
        </trans-unit>
        <trans-unit id="f5999f9bc2923f92d05e5b16aa536ea236796646" translate="yes" xml:space="preserve">
          <source>Observers should contain behavior that reacts to changes in another property. Observers are especially useful when you need to perform some behavior after a binding has finished synchronizing.</source>
          <target state="translated">オブザーバは、別のプロパティの変更に反応する動作を含むべきです。オブザーバは、バインディングの同期が終了した後に何らかの動作を実行する必要がある場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="e3b3d585c4b8fcab8db62fcf152d3716f7e04235" translate="yes" xml:space="preserve">
          <source>Observes all relevant properties and re-sends the wrapped record when a change occurs.</source>
          <target state="translated">関連するすべてのプロパティを観察し、変更があった場合はラップレコードを再送信します。</target>
        </trans-unit>
        <trans-unit id="2e48525b5f6912ad099b4ea5d21fef8fb5a4b87c" translate="yes" xml:space="preserve">
          <source>Observing Property Changes</source>
          <target state="translated">プロパティの変化を観察する</target>
        </trans-unit>
        <trans-unit id="49abd5a03a91a7274230eb2dc93800125ce2b2dc" translate="yes" xml:space="preserve">
          <source>Occasionally you may want to prevent the app from initializing during setup. This could enable extra configuration, or enable asserting prior to the app becoming ready.</source>
          <target state="translated">セットアップ中にアプリが初期化されないようにしたい場合があります。これは、余分な設定を有効にしたり、アプリの準備が整う前にアサートを有効にしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="5998747d026b2e17f67c947965996ccf455b6d78" translate="yes" xml:space="preserve">
          <source>Octane provides a set of new conventional APIs for creating and adding event handlers and actions to your components and templates:</source>
          <target state="translated">Octaneは、イベントハンドラやアクションを作成してコンポーネントやテンプレートに追加するための、一連の新しい従来型APIを提供します。</target>
        </trans-unit>
        <trans-unit id="767e6f8a96c4ae852ffc759490d9c6e73f237304" translate="yes" xml:space="preserve">
          <source>Octane upgrade strategy</source>
          <target state="translated">オクタンのアップグレード戦略</target>
        </trans-unit>
        <trans-unit id="1004ee76d68d2440e2104c1c0f8c10a40b78ea70" translate="yes" xml:space="preserve">
          <source>Octane was a big shift in Ember's syntax, features, and mental models! If you are in the process of upgrading an existing app to use Octane patterns, check out our dedicated &lt;a href=&quot;current-edition&quot;&gt;Octane Update Guide&lt;/a&gt;.</source>
          <target state="translated">Octaneは、Emberの構文、機能、メンタルモデルに大きな変化をもたらしました。Octaneパターンを使用するように既存のアプリをアップグレードしている場合は、専用の&lt;a href=&quot;current-edition&quot;&gt;Octaneアップデートガイドを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="8ff2f4ac5135f40e96e90d7929e9e452ea04a10c" translate="yes" xml:space="preserve">
          <source>Often actions perform asynchronous tasks, such as making an ajax request to a server. Since actions are functions that can be passed in by a parent component, they are able to return values when called. The most common scenario is for an action to return a promise so that the component can handle the action's completion.</source>
          <target state="translated">多くの場合、アクションはサーバーへのajaxリクエストなどの非同期タスクを実行します。アクションは親コンポーネントから渡される関数なので、呼び出されたときに値を返すことができます。最も一般的なシナリオは、アクションが約束を返すことで、コンポーネントがアクションの完了を処理できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="bc5a51fbbacf924217ea79e869e7741f73181329" translate="yes" xml:space="preserve">
          <source>Often this is unnecessary, but to ensure robust auto-tracking behavior it is advisable to mark tracked state appropriately wherever possible.</source>
          <target state="translated">多くの場合、これは不要ですが、堅牢な自動追跡の動作を確保するためには、可能な限り追跡された状態を適切にマークすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="89cb7859835dee6ef77b5791366871c69a2d100f" translate="yes" xml:space="preserve">
          <source>Often times, your components will just encapsulate certain snippets of Handlebars templates that you find yourself using over and over. In those cases, you do not need to write any JavaScript at all. Define the Handlebars template as described above and use the component that is created.</source>
          <target state="translated">多くの場合、あなたのコンポーネントは、あなたが何度も何度も使用しているハンドルバーテンプレートの特定のスニペットをカプセル化しているだけです。そのような場合は、JavaScriptを書く必要はありません。上記のようにハンドルバーテンプレートを定義し、作成されたコンポーネントを使用します。</target>
        </trans-unit>
        <trans-unit id="5aaf5caa5b49b93e7119e86a70d536ce6664ca8a" translate="yes" xml:space="preserve">
          <source>Often you'll want to have a template that displays inside another template. For example, in a blogging application, instead of going from a list of blog posts to creating a new post, you might want to have the post creation page display next to the list.</source>
          <target state="translated">多くの場合、別のテンプレートの中にテンプレートを表示させたいことがあるでしょう。例えば、ブログアプリケーションでは、ブログ記事のリストから新しい記事を作成するのではなく、記事作成ページをリストの隣に表示させたいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="62bb97c24abd34d344b7c7e101be577c8280b132" translate="yes" xml:space="preserve">
          <source>Often, interacting with a component will cause asynchronous behavior to occur, such as HTTP requests, or timers. The &lt;code&gt;wait&lt;/code&gt; helper is designed to handle these scenarios, by providing a hook to ensure assertions are made after all Ajax requests and timers are complete.</source>
          <target state="translated">多くの場合、コンポーネントとの対話により、HTTPリクエストやタイマーなどの非同期動作が発生します。 &lt;code&gt;wait&lt;/code&gt; ヘルパーは、すべてのAjaxリクエストとタイマーが完了した後、アサーションが行われていることを確認するためのフックを提供することで、これらのシナリオを処理するように設計されています。</target>
        </trans-unit>
        <trans-unit id="474dbfb11cc1f0dc8c12a795f79767e73fcd2a35" translate="yes" xml:space="preserve">
          <source>Often, interacting with a component will cause asynchronous behavior to occur, such as HTTP requests, or timers. The module &lt;code&gt;@ember/test-helpers&lt;/code&gt; provides you with several &lt;a href=&quot;https://github.com/emberjs/ember-test-helpers/blob/master/API.md&quot;&gt;useful helpers&lt;/a&gt; that will allow you to wait for any asynchronous behavior to complete that is triggered by a DOM interaction induced by those. To use them in your tests, you can &lt;code&gt;await&lt;/code&gt; any of them to make sure that subsequent assertions are executed once the asynchronous behavior has fully settled:</source>
          <target state="translated">多くの場合、コンポーネントと対話すると、HTTPリクエストやタイマーなどの非同期動作が発生します。モジュール &lt;code&gt;@ember/test-helpers&lt;/code&gt; は、それらによって引き起こされるDOM相互作用によってトリガーされる非同期動作が完了するのを待つことができる、いくつかの&lt;a href=&quot;https://github.com/emberjs/ember-test-helpers/blob/master/API.md&quot;&gt;便利なヘルパー&lt;/a&gt;を提供します。テストでそれらを使用するには、非同期動作が完全に解決した後、後続のアサーションが実行されることを確認するためにそれらのいずれかを &lt;code&gt;await&lt;/code&gt; ことができます。</target>
        </trans-unit>
        <trans-unit id="50ea8ddf844ede9c0ec44349c06ad04be2998925" translate="yes" xml:space="preserve">
          <source>Often, services connect to third party APIs that are not desirable to include in automated tests. To stub these services we simply have to register a stub service that implements the same API, but does not have the dependencies that are problematic for the test suite.</source>
          <target state="translated">多くの場合、サービスは自動テストに含めることは望ましくないサードパーティのAPIに接続します。これらのサービスをスタブ化するには、同じ API を実装したスタブサービスを登録する必要がありますが、テストスイートにとって問題となる依存関係を持っていません。</target>
        </trans-unit>
        <trans-unit id="0ce500ec9eb2726f6b12a95aabe734c404cd89eb" translate="yes" xml:space="preserve">
          <source>Often, the relationships in Ember Data applications will have an inverse. For example, imagine the following models are defined:</source>
          <target state="translated">しばしば、Ember Dataアプリケーションの関係は、逆数を持つことになります。例えば、次のようなモデルが定義されていると想像してみてください。</target>
        </trans-unit>
        <trans-unit id="c1f047d78b062689ec81f8220591ae2637824e50" translate="yes" xml:space="preserve">
          <source>Often, you'll want a template to display data from a model. Loading the appropriate model is one job of a route.</source>
          <target state="translated">モデルからデータを表示するためのテンプレートが必要になることがよくあります。適切なモデルをロードすることは、ルートの1つの仕事です。</target>
        </trans-unit>
        <trans-unit id="d6ad0b4e0abbf304dee7a1c87c639ad156bc354a" translate="yes" xml:space="preserve">
          <source>Oftentimes we'll need to repeat a component multiple times in a row, with different data for each usage of the component. We can use the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#each&quot;&gt;&lt;code&gt;{{#each}}&lt;/code&gt;&lt;/a&gt; helper to loop through lists of items like this, repeating a section of template for each item in the list.</source>
          <target state="translated">多くの場合、コンポーネントの使用法ごとに異なるデータを使用して、コンポーネントを連続して複数回繰り返す必要があります。&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#each&quot;&gt; &lt;code&gt;{{#each}}&lt;/code&gt; &lt;/a&gt;ヘルパーを使用して、このようなアイテムのリストをループし、リスト内のアイテムごとにテンプレートのセクションを繰り返すことができます。</target>
        </trans-unit>
        <trans-unit id="2c3ffdb1abb5aafa99ed88d09e01065a059a00a9" translate="yes" xml:space="preserve">
          <source>On Component Destroy</source>
          <target state="translated">オンコンポーネントデストロイ</target>
        </trans-unit>
        <trans-unit id="7871fb44d093405668420a934d855c398825b852" translate="yes" xml:space="preserve">
          <source>On Initial Render</source>
          <target state="translated">初期レンダリング時</target>
        </trans-unit>
        <trans-unit id="3b81a353de54248fb63ae86d5a82b1a0e405029d" translate="yes" xml:space="preserve">
          <source>On Mac and Linux, you can improve file watching performance by installing &lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html&quot;&gt;Watchman&lt;/a&gt;.</source>
          <target state="translated">MacおよびLinuxでは、&lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html&quot;&gt;Watchman&lt;/a&gt;をインストールすることにより、ファイル監視のパフォーマンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="58e13e632d3a342d5053b03478a93981c741b85e" translate="yes" xml:space="preserve">
          <source>On Re-Render</source>
          <target state="translated">再レンダリング時</target>
        </trans-unit>
        <trans-unit id="79702120c7c021f8b09ee1afda618cd0df787a69" translate="yes" xml:space="preserve">
          <source>On a belongsTo relationship:</source>
          <target state="translated">belongsTo 関係で。</target>
        </trans-unit>
        <trans-unit id="eb43fdb147dc2a32fcd7a2f1655715ba70c1d257" translate="yes" xml:space="preserve">
          <source>On a class-based helper, it may be useful to force a recomputation of that helpers value. This is akin to &lt;code&gt;rerender&lt;/code&gt; on a component.</source>
          <target state="translated">クラスベースのヘルパーでは、そのヘルパー値の再計算を強制することが役立つ場合があります。これは、コンポーネントを再 &lt;code&gt;rerender&lt;/code&gt; するのと同じです。</target>
        </trans-unit>
        <trans-unit id="6861bce269e523e12d7da65c6da77edffe736f32" translate="yes" xml:space="preserve">
          <source>On all newer browsers, you only need to use this method to retrieve properties if the property might not be defined on the object and you want to respect the &lt;code&gt;unknownProperty&lt;/code&gt; handler. Otherwise you can ignore this method.</source>
          <target state="translated">新しいすべてのブラウザーでは、プロパティがオブジェクトで定義されていない可能性があり、 &lt;code&gt;unknownProperty&lt;/code&gt; ハンドラーを尊重したい場合にのみ、このメソッドを使用してプロパティを取得する必要があります。それ以外の場合は、このメソッドを無視できます。</target>
        </trans-unit>
        <trans-unit id="aeba23ad12f082d9bc5f8ea964d08e7ff1c2466b" translate="yes" xml:space="preserve">
          <source>On an Apache server, the rewrite engine (mod-rewrite) must be enabled in order for Ember routing to work properly. If you upload your dist folder, going to your main URL works, but when you try to go to a route such as '{main URL}/example' and it returns 404, your server has not been configured for &quot;friendly&quot; URLs.</source>
          <target state="translated">Apache サーバでは、Ember のルーティングが正しく動作するためには、リライトエンジン (mod-rewrite)が有効になっている必要があります。distフォルダをアップロードした場合、メインURLへのアクセスは動作しますが、'{main URL}/example'のようなルートにアクセスしようとして404を返す場合は、サーバが &quot;フレンドリー &quot;なURLに設定されていないことを示しています。</target>
        </trans-unit>
        <trans-unit id="a9188633f146f1828663d4971118211e9bc5e119" translate="yes" xml:space="preserve">
          <source>On each call to the &lt;code&gt;normalize&lt;/code&gt; method, the third parameter (&lt;code&gt;prop&lt;/code&gt;) is always one of the keys that were in the original payload or in the result of another normalization as &lt;code&gt;normalizeResponse&lt;/code&gt;.</source>
          <target state="translated">呼び出しごとに &lt;code&gt;normalize&lt;/code&gt; 方法、第三のパラメータ（ &lt;code&gt;prop&lt;/code&gt; ）は、常に、元のペイロードに又は別の正規化の結果であったキーの一つである &lt;code&gt;normalizeResponse&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8c9c6f59e26d3f950eadfc25af534272ba19cb77" translate="yes" xml:space="preserve">
          <source>On success, the request promise will be resolved with the full response payload.</source>
          <target state="translated">成功した場合、リクエストプロミスは完全なレスポンスペイロードで解決されます。</target>
        </trans-unit>
        <trans-unit id="78f324f1e8f3f3b4f5bff5c1b66a78f5e0759ff5" translate="yes" xml:space="preserve">
          <source>On the left side of each Guides page is a table of contents, organized into sections that can be expanded to show the topics they cover. Both the sections and the topics within each section are ordered from basic to advanced concepts.</source>
          <target state="translated">各ガイドページの左側には目次があります。セクションと各セクション内のトピックは、基本的な概念から高度な概念へと順番に並べられています。</target>
        </trans-unit>
        <trans-unit id="e3e4d1cf6f4dc0ce1d411fc45282d9de13cdd984" translate="yes" xml:space="preserve">
          <source>On the other hand, if you're looking at JavaScript documentation that tells you to set a property on an element object, you can use &lt;code&gt;{{prop&lt;/code&gt; to set the prop</source>
          <target state="translated">一方、要素オブジェクトにプロパティを設定するように指示するJavaScriptドキュメントを表示している場合は、 &lt;code&gt;{{prop&lt;/code&gt; を使用してpropを設定できます。</target>
        </trans-unit>
        <trans-unit id="e32c960456f9b43f9166f605a702a559006007ce" translate="yes" xml:space="preserve">
          <source>Once a factory is registered, it can be &quot;injected&quot; where it is needed.</source>
          <target state="translated">一度登録された工場は、必要なところに「注入」することができます。</target>
        </trans-unit>
        <trans-unit id="f9cbd543588086a92219171a559bd29b089ae9bc" translate="yes" xml:space="preserve">
          <source>Once defined, a class exists like a variable does in the current scope:</source>
          <target state="translated">一度定義されたクラスは、現在のスコープ内では変数のように存在します。</target>
        </trans-unit>
        <trans-unit id="bdec5004fb5c33e3b2c477c863020702ae402501" translate="yes" xml:space="preserve">
          <source>Once injected into a component, a service can also be used in the template. Note &lt;code&gt;cart&lt;/code&gt; being used below to get data from the cart.</source>
          <target state="translated">コンポーネントに注入されると、サービスをテンプレートで使用することもできます。 &lt;code&gt;cart&lt;/code&gt; からデータを取得するために以下で使用されているカートに注意してください。</target>
        </trans-unit>
        <trans-unit id="ccee3bf08a6536ea2be6c885ed850fbb3a399af9" translate="yes" xml:space="preserve">
          <source>Once inside the &lt;code&gt;articles&lt;/code&gt; route, any changes to the &lt;code&gt;category&lt;/code&gt; property on &lt;code&gt;controller:articles&lt;/code&gt; will cause the URL to update the query param. By default, a query param property change won't cause a full router transition (i.e. it won't call &lt;code&gt;model&lt;/code&gt; hooks and &lt;code&gt;setupController&lt;/code&gt;, etc.); it will only update the URL.</source>
          <target state="translated">&lt;code&gt;articles&lt;/code&gt; ルート内に &lt;code&gt;category&lt;/code&gt; 、 &lt;code&gt;controller:articles&lt;/code&gt; のcategoryプロパティが変更されると、URLがクエリパラメータを更新します。デフォルトでは、クエリのparamプロパティを変更しても、ルーターが完全に遷移することはありません（つまり、 &lt;code&gt;model&lt;/code&gt; フックや &lt;code&gt;setupController&lt;/code&gt; を呼び出すことはありません）。URLのみが更新されます。</target>
        </trans-unit>
        <trans-unit id="457d77836a439fdff49c3b23b258781eb29f6526" translate="yes" xml:space="preserve">
          <source>Once installed, go to an Ember application, open the Developer Tools, and click on the &lt;code&gt;Ember&lt;/code&gt; tab at the far right.</source>
          <target state="translated">インストールしたら、Emberアプリケーションに移動し、開発者ツールを開いて、右端の &lt;code&gt;Ember&lt;/code&gt; タブをクリックします。</target>
        </trans-unit>
        <trans-unit id="d4986dfc0d963c8eec63b7840ddbc1ff83a864a8" translate="yes" xml:space="preserve">
          <source>Once installed, go to an Ember application, open the Developer Tools, and click on the &lt;code&gt;Ember&lt;/code&gt; tab.</source>
          <target state="translated">インストールしたら、Emberアプリケーションに移動し、開発者ツールを開いて、[ &lt;code&gt;Ember&lt;/code&gt; ]タブをクリックします。</target>
        </trans-unit>
        <trans-unit id="164742e39c4ca64cff90a3cf61eb5e20c381b0f7" translate="yes" xml:space="preserve">
          <source>Once installed, the addon works in 3 steps:</source>
          <target state="translated">インストールすると、アドオンは3つのステップで動作します。</target>
        </trans-unit>
        <trans-unit id="cd5d0a583c546e922e7dd07f13b00126893c9cbb" translate="yes" xml:space="preserve">
          <source>Once loaded, a service will persist until the application exits.</source>
          <target state="translated">一度ロードされると、アプリケーションが終了するまでサービスは持続します。</target>
        </trans-unit>
        <trans-unit id="9b7473ccb2808c3e1202cafe608e15eb9e87bf60" translate="yes" xml:space="preserve">
          <source>Once open, remove the component labeled &lt;code&gt;{{welcome-page}}&lt;/code&gt;. The application should now be a completely blank canvas to build our application on.</source>
          <target state="translated">開いたら、 &lt;code&gt;{{welcome-page}}&lt;/code&gt; というラベルの付いたコンポーネントを削除します。これで、アプリケーションは、アプリケーションを構築するための完全に空白のキャンバスになります。</target>
        </trans-unit>
        <trans-unit id="1eca8732180d60ac42bab4f21f28e52ea9a48daf" translate="yes" xml:space="preserve">
          <source>Once rendered an element's &lt;code&gt;elementId&lt;/code&gt; is considered immutable and you should never change it. If you need to compute a dynamic value for the &lt;code&gt;elementId&lt;/code&gt;, you should do this when the component or element is being instantiated:</source>
          <target state="translated">いったんレンダリングされると、要素の &lt;code&gt;elementId&lt;/code&gt; は不変と見なされ、変更することはできません。 &lt;code&gt;elementId&lt;/code&gt; の動的な値を計算する必要がある場合は、コンポーネントまたは要素がインスタンス化されているときにこれを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="82a9545fb47f95fd5c00cdd70a3ecca8110ee2b0" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;DEBUG&lt;/code&gt; value is set to &lt;code&gt;true&lt;/code&gt;, when you are at a breakpoint you can navigate back up the stack to the &lt;code&gt;flush&lt;/code&gt; method in and check the &lt;code&gt;errorRecordedForStack.stack&lt;/code&gt; value, which will be the captured stack when this job was scheduled.</source>
          <target state="translated">いったん &lt;code&gt;DEBUG&lt;/code&gt; の値に設定されて &lt;code&gt;true&lt;/code&gt; 、あなたがブレークポイントであるときは、スタックにまで戻って移動することができます &lt;code&gt;flush&lt;/code&gt; での方法とチェック &lt;code&gt;errorRecordedForStack.stack&lt;/code&gt; のこのジョブがスケジュールされた際に撮影し、スタックされる値を、。</target>
        </trans-unit>
        <trans-unit id="4267347d40eb36c6cbbed253186fd37bf3007beb" translate="yes" xml:space="preserve">
          <source>Once the beta cycle has completed, the next stable release will include any features that were enabled during the beta cycle. At this point the feature flags will be removed from the canary and future beta branches, and the feature becomes part of the framework.</source>
          <target state="translated">ベータサイクルが完了すると、次の安定版リリースにはベータサイクル中に有効化された機能が含まれます。この時点で、機能フラグはカナリアと将来のベータブランチから削除され、機能はフレームワークの一部となります。</target>
        </trans-unit>
        <trans-unit id="56051bb2517e89df5d91846d46bbeb555a7edbb5" translate="yes" xml:space="preserve">
          <source>Once the main transition into &lt;code&gt;slow-model&lt;/code&gt; completes, the &lt;code&gt;loading&lt;/code&gt; route will be exited and the transition to &lt;code&gt;slow-model&lt;/code&gt; will continue.</source>
          <target state="translated">&lt;code&gt;slow-model&lt;/code&gt; へのメインの移行が完了すると、 &lt;code&gt;loading&lt;/code&gt; ルートが終了し、 &lt;code&gt;slow-model&lt;/code&gt; への移行が続行されます。</target>
        </trans-unit>
        <trans-unit id="d59a62a3f97ccc2bfdeef6fc089edaeadc6ceb33" translate="yes" xml:space="preserve">
          <source>Once the proxied promise has settled this will become &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">プロキシ化された約束が解決すると、これは &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="4398fd5039ae29bd335437e10b017a202f1021a5" translate="yes" xml:space="preserve">
          <source>Once the proxied promise has settled this will become &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">プロキシ化された約束が解決すると、これは &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="4688c68d00bda5e6b4d6f0282ecb2274e65f3aa4" translate="yes" xml:space="preserve">
          <source>Once the request to the server returns with a JSON payload for the requested record, the adapter resolves the promise it returned to the store with the JSON.</source>
          <target state="translated">サーバへのリクエストが、要求されたレコードに対する JSON ペイロードを返すと、アダプタは、ストアに返された約束を JSON で解決します。</target>
        </trans-unit>
        <trans-unit id="035a2dea0fa0be24848d3ad0692450c6fa370306" translate="yes" xml:space="preserve">
          <source>Once the routes are defined, how do we go about transitioning between them within our application? It depends on where the transition needs to take place:</source>
          <target state="translated">ルートを定義した後、アプリケーション内でルート間の移行を行うにはどうすればよいでしょうか。それは、どこで移行する必要があるかによります。</target>
        </trans-unit>
        <trans-unit id="a7341d0efec76622cf31b57420e0efd9cc42ff86" translate="yes" xml:space="preserve">
          <source>Once the stub service is registered the test simply needs to check that the stub data that is being returned from the service is reflected in the component output.</source>
          <target state="translated">スタブサービスが登録されたら、テストはサービスから返されるスタブデータがコンポーネント出力に反映されているかどうかをチェックするだけです。</target>
        </trans-unit>
        <trans-unit id="f005b56256f8b41ba8bc28347de5eacad0139afb" translate="yes" xml:space="preserve">
          <source>Once the stub service is registered, the test needs to check that the stub data from the service is reflected in the component output.</source>
          <target state="translated">スタブサービスを登録したら、テストではサービスからのスタブデータがコンポーネントの出力に反映されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="a047160287303cb08554e10e09d6a4704cbf7198" translate="yes" xml:space="preserve">
          <source>Once we &lt;code&gt;await&lt;/code&gt; the execution of the asynchronous helpers this way, we will ensure that all subsequent assertions are always made &lt;strong&gt;after&lt;/strong&gt; the previous steps in the test have completed.</source>
          <target state="translated">この方法で非同期ヘルパーの実行を &lt;code&gt;await&lt;/code&gt; と、テストの前のステップが完了した&lt;strong&gt;後に&lt;/strong&gt;、後続のすべてのアサーションが常に行われるよう&lt;strong&gt;に&lt;/strong&gt;なります。</target>
        </trans-unit>
        <trans-unit id="6f0dda9c0cb3a268c5b42422c783a5ad7cd0e1d9" translate="yes" xml:space="preserve">
          <source>Once we create this &quot;button with confirmation&quot; component, we want to be able to reuse it all over our application.</source>
          <target state="translated">この「確認ボタン」コンポーネントを作成したら、アプリケーション全体で再利用できるようにしたいと思います。</target>
        </trans-unit>
        <trans-unit id="9fbeae9a67f6bd9c4e25f14b9f726db44131dc7a" translate="yes" xml:space="preserve">
          <source>Once we have a new project in place, we can confirm everything is working by starting the Ember development server:</source>
          <target state="translated">新しいプロジェクトができたら、Emberの開発サーバーを起動して、すべてが動作していることを確認します。</target>
        </trans-unit>
        <trans-unit id="23b19ac1ee33b1618505282400756773afbf338c" translate="yes" xml:space="preserve">
          <source>Once yielded, the data can be accessed by the wrapped content by referencing the &lt;code&gt;post&lt;/code&gt; variable. Now a component called &lt;code&gt;markdown-style&lt;/code&gt; will be rendered in &lt;code&gt;{{post.body}}&lt;/code&gt;.</source>
          <target state="translated">生成されると、 &lt;code&gt;post&lt;/code&gt; 変数を参照することにより、ラップされたコンテンツからデータにアクセスできます。これで、 &lt;code&gt;{{post.body}}&lt;/code&gt; &lt;code&gt;markdown-style&lt;/code&gt; というコンポーネントが{{post.body}}にレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="a140d5eab4a5bae85d89e8c5e6d02aa38933424a" translate="yes" xml:space="preserve">
          <source>Once you are logged-in to your Netlify account and in the &quot;Sites&quot; section, you should see the Netlify drag and drop area</source>
          <target state="translated">あなたのNetlifyアカウントにログインして、&quot;Sites &quot;セクションに入ったら、Netlifyのドラッグ&amp;ドロップエリアが見えるはずです。</target>
        </trans-unit>
        <trans-unit id="be2dc254dc6c7464981de655c454c5b817215603" translate="yes" xml:space="preserve">
          <source>Once you call this method, any time the key's value is set, your observer will be notified. Note that the observers are triggered any time the value is set, regardless of whether it has actually changed. Your observer should be prepared to handle that.</source>
          <target state="translated">このメソッドを呼び出すと、キーの値が設定されるたびにオブザーバーに通知されます。実際に値が変更されたかどうかに関わらず、値が設定されるたびにオブザーバーがトリガーされることに注意してください。オブザーバーはそれに対応できるように準備しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="c2c34893439eddc0041c09c4f5e714db935f2904" translate="yes" xml:space="preserve">
          <source>Once you click the &quot;Deploy site&quot; button, you will be taken to your website &quot;Overview&quot; and you should see the status of your deployment</source>
          <target state="translated">Deploy site &quot;ボタンをクリックすると、ウェブサイトの &quot;Overview &quot;が表示され、デプロイメントの状況が確認できます。</target>
        </trans-unit>
        <trans-unit id="9adc765189962af6b2b054d5d23f3d48e08dcdbd" translate="yes" xml:space="preserve">
          <source>Once you have an understanding of Ember Data, you will have a much better way to manage the complexity of data loading in your application. This will allow your code to evolve and grow, with better maintainability.</source>
          <target state="translated">Ember Dataを理解すると、アプリケーションの複雑なデータロードを管理する方法が格段に向上します。これにより、保守性を高めながらコードを進化・成長させることができます。</target>
        </trans-unit>
        <trans-unit id="0e423cbca6b9df549f466352ce6ab4bd43120115" translate="yes" xml:space="preserve">
          <source>Once you have an understanding of Ember Data, you will have a much better way to manage the complexity of data loading in your application. This will allow your code to evolve without becoming a mess.</source>
          <target state="translated">Ember Dataを理解したら、アプリケーションのデータロードの複雑さを管理するためのより良い方法を手に入れることができるでしょう。これにより、コードを混乱させることなく進化させることができるようになります。</target>
        </trans-unit>
        <trans-unit id="e7879c2db8a502cf08ab955e6b7189ce9ea7ec40" translate="yes" xml:space="preserve">
          <source>Once you have built your &lt;code&gt;deprecation-workflow.js&lt;/code&gt; file and your deprecations are silenced, you can begin to work on deprecations one by one at your own leisure. To find deprecations, you can change the handler value of that message to either &lt;code&gt;throw&lt;/code&gt; or &lt;code&gt;log&lt;/code&gt;. Throw will throw an actual exception when the deprecation is encountered, so that tests that use the deprecated feature will fail. Choosing to log will simply log a warning to the console as before. These settings give you some flexibility on how you want to go about fixing the deprecations.</source>
          <target state="translated">あなたは組み込まれていたら &lt;code&gt;deprecation-workflow.js&lt;/code&gt; ファイルをして、非推奨が沈黙している、あなたは非推奨独自のレジャーで一つずつ上で作業を開始することができます。廃止予定を見つけるには、そのメッセージのハンドラー値を &lt;code&gt;throw&lt;/code&gt; または &lt;code&gt;log&lt;/code&gt; に変更します。非推奨が検出されると、throwは実際の例外をスローするため、非推奨の機能を使用するテストは失敗します。ログを選択すると、以前と同様にコンソールに警告が記録されます。これらの設定により、非推奨の修正方法を柔軟に選択できます。</target>
        </trans-unit>
        <trans-unit id="297de7e31394aa2c72d2a09e3d3842f25dc27bdc" translate="yes" xml:space="preserve">
          <source>Once you have defined a class, you can create new &lt;em&gt;instances&lt;/em&gt; of that class by calling its &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_create&quot;&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt; method. Any methods, properties and computed properties you defined on the class will be available to instances:</source>
          <target state="translated">クラスを定義したら、&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_create&quot;&gt; &lt;code&gt;create()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して、そのクラスの新しい&lt;em&gt;インスタンス&lt;/em&gt;を作成できます。クラスで定義したメソッド、プロパティ、計算されたプロパティはインスタンスで利用できます。</target>
        </trans-unit>
        <trans-unit id="0ae78f9453ab89e2b98b40a513549fd747f33aca" translate="yes" xml:space="preserve">
          <source>Once you have defined a route with a dynamic segment, Ember will extract the value of the dynamic segment from the URL for you and pass them as a hash to the &lt;code&gt;model&lt;/code&gt; hook as the first argument:</source>
          <target state="translated">動的セグメントを使用してルートを定義すると、EmberはURLから動的セグメントの値を抽出し、ハッシュとして最初の引数として &lt;code&gt;model&lt;/code&gt; フックに渡します。</target>
        </trans-unit>
        <trans-unit id="d56fddae181db8c2b78a84601bce87e7de8acc10" translate="yes" xml:space="preserve">
          <source>Once you have installed canary, feature-flags can be activated at build-time by an environment variable or at runtime using &lt;code&gt;window.EmberDataENV&lt;/code&gt;.</source>
          <target state="translated">カナリアをインストールすると、ビルド時に環境変数を使用して、または実行時に &lt;code&gt;window.EmberDataENV&lt;/code&gt; を使用して機能フラグをアクティブ化できます。</target>
        </trans-unit>
        <trans-unit id="aa5d0d138ce115e372b6db1d89430c67ac960c72" translate="yes" xml:space="preserve">
          <source>Once you have successfully connected your GitHub account with Netlify, you should see a list of repositories to choose from. Select or search for your GitHub repository that you wish to deploy</source>
          <target state="translated">GitHubのアカウントとNetlifyの接続が完了すると、リポジトリのリストが表示されますので、その中から選択してください。デプロイしたいGitHubリポジトリを選択または検索してください。</target>
        </trans-unit>
        <trans-unit id="37dc9e0949005db31c3bef8749a046174ea22093" translate="yes" xml:space="preserve">
          <source>Once you have these two methods implemented, apply the &lt;code&gt;Ember.Enumerable&lt;/code&gt; mixin to your class and you will be able to enumerate the contents of your object like any other collection.</source>
          <target state="translated">これらの2つのメソッドを実装したら、 &lt;code&gt;Ember.Enumerable&lt;/code&gt; ミックスインをクラスに適用すると、他のコレクションと同様にオブジェクトのコンテンツを列挙できるようになります。</target>
        </trans-unit>
        <trans-unit id="b15e1b20d0b0af628b5179c016082022baa8c7ff" translate="yes" xml:space="preserve">
          <source>Once you have upgraded an app's version, some new features may be available out of the box. On the other hand, some features will require that you enable them specifically in your app's configuration, since they may change the app's default behavior.</source>
          <target state="translated">アプリのバージョンをアップグレードすると、いくつかの新機能がすぐに利用できるようになります。その一方で、アプリのデフォルトの動作を変更する可能性があるため、アプリの設定で特別に有効にする必要がある機能もあります。</target>
        </trans-unit>
        <trans-unit id="33ebab4951d433891c0e76e835d2372486c21e1f" translate="yes" xml:space="preserve">
          <source>Once you see &quot;Your site is deployed&quot; as shown above, your website is now live and you can click on the link provided above the &quot;Getting started&quot; section to view your site</source>
          <target state="translated">上図のように「Your site is deployed」と表示されたら、あなたのウェブサイトはライブ状態となり、「Getting started」セクションの上にあるリンクをクリックして、あなたのサイトを見ることができます。</target>
        </trans-unit>
        <trans-unit id="1b9d85c5deeeb3704876076fe0a38dc0383e0843" translate="yes" xml:space="preserve">
          <source>Once you see a feature that you would like to toggle for your project you can run one of two commands, &lt;code&gt;ember feature:enable &amp;lt;feature&amp;gt;&lt;/code&gt; and &lt;code&gt;ember feature:disable &amp;lt;feature&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">プロジェクトで切り替えたい機能が表示されたら、 &lt;code&gt;ember feature:enable &amp;lt;feature&amp;gt;&lt;/code&gt; と &lt;code&gt;ember feature:disable &amp;lt;feature&amp;gt;&lt;/code&gt; の2つのコマンドのいずれかを実行できます。</target>
        </trans-unit>
        <trans-unit id="d318d88b083e6a740e5695fcce549c330e442a4c" translate="yes" xml:space="preserve">
          <source>Once you've installed Ember CLI via npm, you will have access to a new &lt;code&gt;ember&lt;/code&gt; command in your terminal. You can use the &lt;code&gt;ember new&lt;/code&gt; command to create a new application.</source>
          <target state="translated">npmを介してEmber CLIをインストールすると、ターミナルで新しい &lt;code&gt;ember&lt;/code&gt; コマンドにアクセスできるようになります。あなたは使用することができます &lt;code&gt;ember new&lt;/code&gt; 新しいアプリケーションを作成するためのコマンドを。</target>
        </trans-unit>
        <trans-unit id="ed008ddc2ecf4254729fcc7abac70a4419caad53" translate="yes" xml:space="preserve">
          <source>Once you've loaded your models from storage, components know how to translate model data into a UI that your user can interact with. For more information about how components get model data, see the &lt;a href=&quot;../routing/specifying-a-routes-model&quot;&gt;Specifying a Route's Model&lt;/a&gt; guide.</source>
          <target state="translated">ストレージからモデルをロードすると、コンポーネントはモデルデータをユーザーが操作できるUIに変換する方法を認識します。コンポーネントがモデルデータを取得する方法の詳細については、「&lt;a href=&quot;../routing/specifying-a-routes-model&quot;&gt;ルートのモデルの指定」&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="fae22ba23783545c09734f8348d02996c94f94d2" translate="yes" xml:space="preserve">
          <source>Once you've loaded your models from storage, components know how to translate model data into a UI that your user can interact with. For more information about how components get model data, see the &lt;a href=&quot;https://guides.emberjs.com/routing/specifying-a-routes-model&quot;&gt;Specifying a Route's Model&lt;/a&gt; guide.</source>
          <target state="translated">ストレージからモデルをロードすると、コンポーネントは、モデルデータをユーザーが操作できるUIに変換する方法を認識します。コンポーネントがモデルデータを取得する方法の詳細については、「&lt;a href=&quot;https://guides.emberjs.com/routing/specifying-a-routes-model&quot;&gt;ルートのモデルの指定」&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="ec5fbc573c5964663edea838c458902fcef9408a" translate="yes" xml:space="preserve">
          <source>Once you've loaded your models from storage, components know how to translate model data into a UI that your user can interact with. For more information about how components get model data, see the &lt;a href=&quot;https://guides.emberjs.com/routing/specifying-a-routes-model/&quot;&gt;Specifying a Route's Model&lt;/a&gt; guide.</source>
          <target state="translated">ストレージからモデルをロードすると、コンポーネントはモデルデータをユーザーが操作できるUIに変換する方法を認識します。コンポーネントがモデルデータを取得する方法の詳細については、「&lt;a href=&quot;https://guides.emberjs.com/routing/specifying-a-routes-model/&quot;&gt;ルートのモデルの指定」&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="946fb83a5b5f0d85f4cd4d0947e1d59cebfd37a1" translate="yes" xml:space="preserve">
          <source>Once you've removed deprecations that you may not need to immediately address, you may still be left with many deprecations. Also, your remaining deprecations may only occur in very specific scenarios that are not obvious. How then should you go about finding and fixing these? This is where the &lt;a href=&quot;http://emberobserver.com/addons/ember-cli-deprecation-workflow&quot;&gt;ember-cli-deprecation-workflow&lt;/a&gt; addon can be extremely helpful.</source>
          <target state="translated">すぐに対応する必要のない非推奨を削除しても、多くの非推奨が残る可能性があります。また、残りのサポート終了は、明確ではない非常に特定のシナリオでのみ発生する可能性があります。次に、これらを見つけて修正する方法を教えてください。これは、&lt;a href=&quot;http://emberobserver.com/addons/ember-cli-deprecation-workflow&quot;&gt;ember-cli-deprecation-workflow&lt;/a&gt;アドオンが非常に役立つ場所です。</target>
        </trans-unit>
        <trans-unit id="9b5a236db997313e379baebf8b99be646172bb5f" translate="yes" xml:space="preserve">
          <source>One benefit of the above approach compared to using &lt;code&gt;next&lt;/code&gt; is that you will be able to perform DOM/CSS operations before unprocessed elements are rendered to the screen, which may prevent flickering or other artifacts caused by delaying processing until after rendering.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; を使用する場合と比較した上記のアプローチの利点の1つは、未処理の要素が画面にレンダリングされる前にDOM / CSS操作を実行できることです。これにより、レンダリング後まで処理を遅らせることによって引き起こされるちらつきやその他のアーティファクトを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="7d393feab7e66d7efa30902c007f830f56512202" translate="yes" xml:space="preserve">
          <source>One benefit of the above approach compared to using &lt;code&gt;run.next&lt;/code&gt; is that you will be able to perform DOM/CSS operations before unprocessed elements are rendered to the screen, which may prevent flickering or other artifacts caused by delaying processing until after rendering.</source>
          <target state="translated">&lt;code&gt;run.next&lt;/code&gt; を使用する場合と比較した上記のアプローチの利点の1つは、未処理の要素が画面にレンダリングされる前にDOM / CSS操作を実行できることです。これにより、レンダリング後まで処理が遅延することによるちらつきやその他のアーティファクトを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="2017e7fd0f2a575b1a1bb39b33094a703f7dc923" translate="yes" xml:space="preserve">
          <source>One common example is when overriding the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#method_normalizeResponse&quot;&gt;&lt;code&gt;normalizeResponse()&lt;/code&gt;&lt;/a&gt; hook in one of Ember-Data's serializers.</source>
          <target state="translated">一般的な例の1つは、Ember-Dataのシリア&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#method_normalizeResponse&quot;&gt; &lt;code&gt;normalizeResponse()&lt;/code&gt; &lt;/a&gt; 1つでnormalizeResponse（）フックをオーバーライドする場合です。</target>
        </trans-unit>
        <trans-unit id="24d60b4229d3dd8c3b6979867083b6a314e88b0d" translate="yes" xml:space="preserve">
          <source>One common example is when overriding the &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer/methods#normalizeResponse&quot;&gt;&lt;code&gt;normalizeResponse()&lt;/code&gt;&lt;/a&gt; hook in one of Ember Data's serializers.</source>
          <target state="translated">一般的な例の1つは、Ember Dataのシリア&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer/methods#normalizeResponse&quot;&gt; &lt;code&gt;normalizeResponse()&lt;/code&gt; &lt;/a&gt;1つでnormalizeResponse（）フックをオーバーライドする場合です。</target>
        </trans-unit>
        <trans-unit id="ef72e13fa9c7abd23262b84daf45e66eae37d8b2" translate="yes" xml:space="preserve">
          <source>One common way of building web applications is to tightly couple user interface elements to data fetching. For example, imagine you are writing the admin section of a blogging app, which has a feature that lists the drafts for the currently logged in user.</source>
          <target state="translated">ウェブアプリケーションを構築する一般的な方法の1つは、ユーザーインターフェースの要素をデータ取得に密接に結びつけることです。例えば、現在ログインしているユーザーの下書きを一覧表示する機能を持つブログアプリの管理セクションを書いていると想像してみてください。</target>
        </trans-unit>
        <trans-unit id="1fd57542548476a402566a40e7028672d63f27fb" translate="yes" xml:space="preserve">
          <source>One detail to keep in mind is that both branches of the &lt;code&gt;if&lt;/code&gt; helper will be evaluated, so if you have &lt;code&gt;{{if condition &quot;foo&quot; (expensive-operation &quot;bar&quot;)&lt;/code&gt;, &lt;code&gt;expensive-operation&lt;/code&gt; will always calculate.</source>
          <target state="translated">覚えておくべき詳細の1つは、 &lt;code&gt;if&lt;/code&gt; ヘルパーの両方の分岐が評価されるため、 &lt;code&gt;{{if condition &quot;foo&quot; (expensive-operation &quot;bar&quot;)&lt;/code&gt; 場合、 &lt;code&gt;expensive-operation&lt;/code&gt; は常に計算されます。</target>
        </trans-unit>
        <trans-unit id="921f9a649da7d3ee552d9bb46da95892c7504e20" translate="yes" xml:space="preserve">
          <source>One downside to returning a cached record is you may find the state of the data has changed since it was first loaded into the store's identity map. In order to prevent this stale data from being a problem for long, Ember Data will automatically make a request in the background each time a cached record is returned from the store. When the new data comes in, the record is updated, and if there have been changes to the record since the initial render, the template is re-rendered with the new information.</source>
          <target state="translated">キャッシュされたレコードを返すことの欠点としては、ストアのアイデンティティマップに最初に読み込まれたときからデータの状態が変わっていることに気づくかもしれません。このような陳腐なデータが長く問題にならないようにするために、Ember Dataは、キャッシュされたレコードがストアから返されるたびに、バックグラウンドで自動的にリクエストを行います。新しいデータが入ってくるとレコードが更新され、最初のレンダリングからレコードに変更があった場合は、テンプレートが新しい情報で再レンダリングされます。</target>
        </trans-unit>
        <trans-unit id="3e384e5b15606da3e69fd4ec7b0e22e51cb4eec4" translate="yes" xml:space="preserve">
          <source>One example is to add computed properties to your component:</source>
          <target state="translated">例えば、コンポーネントに計算済みのプロパティを追加することができます。</target>
        </trans-unit>
        <trans-unit id="6e6e9d09355e2e6fdfee3fc6889b073f2cc7d11f" translate="yes" xml:space="preserve">
          <source>One job of a route handler is rendering the appropriate template to the screen.</source>
          <target state="translated">ルートハンドラの仕事の一つは、適切なテンプレートを画面にレンダリングすることです。</target>
        </trans-unit>
        <trans-unit id="023b2e22d9619644336d8abd002c12ec4e3957f7" translate="yes" xml:space="preserve">
          <source>One nice thing about this model is that if you try to set a value to the same thing as last time, Ember (through HTMLBars) will avoid doing any work on the DOM.</source>
          <target state="translated">このモデルのいいところは、前回と同じものに値を設定しようとすると、Emberが(HTMLBarsを介して)DOMに対して一切の作業をしないようにしてくれることです。</target>
        </trans-unit>
        <trans-unit id="2c25bd1df98cee9098780b27f236f384e2f2dd2d" translate="yes" xml:space="preserve">
          <source>One of the major issues in testing web applications is that all code is event-driven and therefore has the potential to be asynchronous (i.e. output can happen out of sequence from input). This has the ramification that code can be executed in any order.</source>
          <target state="translated">ウェブアプリケーションをテストする上での大きな問題の一つは、すべてのコードがイベント駆動型であるため、非同期である可能性があることです(つまり、入力からの出力が順番通りに行われない可能性がある)。これは、コードが任意の順番で実行される可能性があるということを意味します。</target>
        </trans-unit>
        <trans-unit id="f22cb0dab0dc2d88fe000d648a9d5f8ff6c7e07a" translate="yes" xml:space="preserve">
          <source>One of the methods is &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_transitionTo&quot;&gt;&lt;code&gt;transitionTo()&lt;/code&gt;&lt;/a&gt;. Calling &lt;code&gt;transitionTo()&lt;/code&gt; from a route or &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Controller.html#method_transitionToRoute&quot;&gt;&lt;code&gt;transitionToRoute()&lt;/code&gt;&lt;/a&gt; from a controller will stop any transitions currently in progress and start a new one, functioning as a redirect. &lt;code&gt;transitionTo()&lt;/code&gt; behaves exactly like the &lt;a href=&quot;https://guides.emberjs.com/templates/links&quot;&gt;link-to&lt;/a&gt; helper.</source>
          <target state="translated">メソッドの1つは&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_transitionTo&quot;&gt; &lt;code&gt;transitionTo()&lt;/code&gt; &lt;/a&gt;です。呼び出し &lt;code&gt;transitionTo()&lt;/code&gt; 経路又はから&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Controller.html#method_transitionToRoute&quot;&gt; &lt;code&gt;transitionToRoute()&lt;/code&gt; を&lt;/a&gt;コントローラから、現在進行中の任意の遷移を停止し、新しいものを開始、リダイレクトとして機能するであろう。 &lt;code&gt;transitionTo()&lt;/code&gt; は、&lt;a href=&quot;https://guides.emberjs.com/templates/links&quot;&gt;リンク先&lt;/a&gt;ヘルパーとまったく同じように動作します。</target>
        </trans-unit>
        <trans-unit id="d7fa6909d82a904c6cff8f9a667268e7d78933f3" translate="yes" xml:space="preserve">
          <source>One of the methods is &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#transitionTo&quot;&gt;&lt;code&gt;transitionTo()&lt;/code&gt;&lt;/a&gt;. Calling &lt;code&gt;transitionTo()&lt;/code&gt; from a route or &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Controller/methods#transitionToRoute&quot;&gt;&lt;code&gt;transitionToRoute()&lt;/code&gt;&lt;/a&gt; from a controller will stop any transitions currently in progress and start a new one, functioning as a redirect. &lt;code&gt;transitionTo()&lt;/code&gt; behaves exactly like the &lt;a href=&quot;https://guides.emberjs.com/templates/links/&quot;&gt;&lt;code&gt;LinkTo&lt;/code&gt;&lt;/a&gt; helper.</source>
          <target state="translated">メソッドの1つは&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#transitionTo&quot;&gt; &lt;code&gt;transitionTo()&lt;/code&gt; &lt;/a&gt;です。呼び出し &lt;code&gt;transitionTo()&lt;/code&gt; 経路又はから&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Controller/methods#transitionToRoute&quot;&gt; &lt;code&gt;transitionToRoute()&lt;/code&gt; を&lt;/a&gt;コントローラから、現在進行中の任意の遷移を停止し、新しいものを開始、リダイレクトとして機能するであろう。 &lt;code&gt;transitionTo()&lt;/code&gt; は、&lt;a href=&quot;https://guides.emberjs.com/templates/links/&quot;&gt; &lt;code&gt;LinkTo&lt;/code&gt; &lt;/a&gt;ヘルパーとまったく同じように動作します。</target>
        </trans-unit>
        <trans-unit id="3d247fef3beb6617e410a9310b1691023a273f3f" translate="yes" xml:space="preserve">
          <source>One of the responsibilities of a route is to load a model.</source>
          <target state="translated">ルートの責任の一つは、モデルをロードすることです。</target>
        </trans-unit>
        <trans-unit id="4db10af2705c05b2352d5ae0b313303226020bab" translate="yes" xml:space="preserve">
          <source>One of the ways that Ember releases guarantee stability is by following &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt; (SemVer). For the Ember project this means that any feature that is to be removed must first be deprecated, and only removed when a major version is released. It also means that new features are introduced in a backwards compatible way.</source>
          <target state="translated">Emberがリリースして安定性を保証する方法の1つは、&lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;（SemVer）に従うことです。Emberプロジェクトの場合、これは、削除する機能を最初に非推奨にし、メジャーバージョンがリリースされたときにのみ削除する必要があることを意味します。また、下位互換性のある方法で新しい機能が導入されていることも意味します。</target>
        </trans-unit>
        <trans-unit id="bc339cc993a1d0dfdea6070d19f55e3e10babcc4" translate="yes" xml:space="preserve">
          <source>One or more Mixin classes</source>
          <target state="translated">1つ以上のミクシィンクラス</target>
        </trans-unit>
        <trans-unit id="a4387dcdd8c21d687d201ae902808eab655aaeb6" translate="yes" xml:space="preserve">
          <source>One property can be mapped on to another by placing a &quot;:&quot; between the source property and the destination property:</source>
          <target state="translated">1 つのプロパティを別のプロパティにマッピングするには、ソース・プロパティとデスティネーション・プロパティの間に &quot;:&quot; を挿入します。</target>
        </trans-unit>
        <trans-unit id="ddd8ba8819277c241acfb17d9b513165c7a86664" translate="yes" xml:space="preserve">
          <source>One scenario would be to camelCase the meta keys of your payload. The example below shows how this could be done using &lt;code&gt;normalizeArrayResponse&lt;/code&gt; and &lt;code&gt;extractRelationship&lt;/code&gt;.</source>
          <target state="translated">1つのシナリオは、ペイロードのメタキーをcamelCaseすることです。以下の例は、 &lt;code&gt;normalizeArrayResponse&lt;/code&gt; および &lt;code&gt;extractRelationship&lt;/code&gt; を使用してこれを行う方法を示しています。</target>
        </trans-unit>
        <trans-unit id="467f5c1f11f4fc8b09ce3a5b43a54f0e1c05570d" translate="yes" xml:space="preserve">
          <source>One simple way to add page titles is to create a &lt;code&gt;title&lt;/code&gt; helper:</source>
          <target state="translated">ページタイトルを追加する簡単な方法の1つは、 &lt;code&gt;title&lt;/code&gt; ヘルパーを作成することです。</target>
        </trans-unit>
        <trans-unit id="97e7553844cde0e577049d9ab7cc94f72565fa90" translate="yes" xml:space="preserve">
          <source>One thing that makes Ember special is that every app you create has a &lt;em&gt;lot&lt;/em&gt; in common with apps that other people have made. This means that chances are good that you can connect with other developers who share both your interests and technical challenges. Visit the &lt;a href=&quot;https://emberjs.com/community/&quot;&gt;Ember Community page&lt;/a&gt; to learn about the ways you can get connected. Find a nearby meetup, ask questions, follow a newsletter, and more! We hope to see you around!</source>
          <target state="translated">Emberを特別なものにしていることの1つは、作成するすべてのアプリには、他の人が作成したアプリと&lt;em&gt;多くの&lt;/em&gt;共通点があることです。これは、あなたの興味と技術的課題の両方を共有する他の開発者とつながることができる可能性が高いことを意味します。接続する方法については、&lt;a href=&quot;https://emberjs.com/community/&quot;&gt;Emberコミュニティページ&lt;/a&gt;にアクセスしてください。近くの交流会を見つけたり、質問したり、ニュースレターをフォローしたりできます。よろしくお願いします！</target>
        </trans-unit>
        <trans-unit id="867d5906f67405a74420e9289d5c01bc85d7ba3c" translate="yes" xml:space="preserve">
          <source>One way to organize is to mimic the folder structure of &lt;code&gt;app/routes&lt;/code&gt;. In other words, for every route, you create an application test file. If this would result in too many files, you can instead create a file for each parent route.</source>
          <target state="translated">整理する1つの方法は、 &lt;code&gt;app/routes&lt;/code&gt; のフォルダー構造を模倣することです。つまり、ルートごとに、アプリケーションテストファイルを作成します。これによりファイルが多すぎる場合は、代わりに親ルートごとにファイルを作成できます。</target>
        </trans-unit>
        <trans-unit id="aa8da0e5204ecf2e3129f7e87c21cf719d86102c" translate="yes" xml:space="preserve">
          <source>One way to think about the store is as a cache of all of the records that have been loaded by your application. If a route or a controller in your app asks for a record, the store can return it immediately if it is in the cache. Otherwise, the store must ask the adapter to load it, which usually means a trip over the network to retrieve it from the server.</source>
          <target state="translated">ストアについて考える1つの方法は、アプリケーションによってロードされたすべてのレコードのキャッシュとして考えることです。アプリ内のルートまたはコントローラがレコードを要求した場合、キャッシュにレコードがあれば、ストアはすぐにそれを返すことができます。そうでない場合は、ストアはアダプタにロードを依頼する必要がありますが、これは通常、サーバからレコードを取得するためにネットワークを経由することを意味します。</target>
        </trans-unit>
        <trans-unit id="8c24dfe505a974aee3ed176f59d17fbda0bb9ffa" translate="yes" xml:space="preserve">
          <source>One, unit tests are typically isolated and focus on individual methods and functions, so it is easy to debug when your tests fail.</source>
          <target state="translated">1つは、ユニットテストは一般的に分離されており、個々のメソッドや関数に焦点を当てているため、テストが失敗してもデバッグが容易であることです。</target>
        </trans-unit>
        <trans-unit id="206de582d9e42728271567f32cef1d2caa66c410" translate="yes" xml:space="preserve">
          <source>One-To-Many</source>
          <target state="translated">One-To-Many</target>
        </trans-unit>
        <trans-unit id="72ed6317b3c29cc659bd9726d64c0704e0a987b4" translate="yes" xml:space="preserve">
          <source>One-To-One</source>
          <target state="translated">One-To-One</target>
        </trans-unit>
        <trans-unit id="e8edf93e5fc748fcefb10c45b67f1fe2105f8341" translate="yes" xml:space="preserve">
          <source>One-Way Bindings</source>
          <target state="translated">ワンウェイバインディング</target>
        </trans-unit>
        <trans-unit id="a888cbb9d1975f7a372576caffb7acdfc8b16b4f" translate="yes" xml:space="preserve">
          <source>One-to-Many</source>
          <target state="translated">One-to-Many</target>
        </trans-unit>
        <trans-unit id="a2cab38603c3673e0e2b0a47873e43f0dbfdffa8" translate="yes" xml:space="preserve">
          <source>One-to-One</source>
          <target state="translated">One-to-One</target>
        </trans-unit>
        <trans-unit id="69039b055f29859716cd66c6b480ac6e9f39194e" translate="yes" xml:space="preserve">
          <source>One-way Data Flow</source>
          <target state="translated">一方通行のデータフロー</target>
        </trans-unit>
        <trans-unit id="7cd4094ddfbc83c812c552f23a48ae51c79c9bda" translate="yes" xml:space="preserve">
          <source>Only one helper manager is guaranteed to exist per &lt;code&gt;owner&lt;/code&gt; and per usage of &lt;code&gt;setHelperManager&lt;/code&gt;, so many helpers will end up using the same instance of the helper manager. As such, you should only store state that is related to the manager itself. If you want to store state specific to a particular helper definition, you should assign a unique helper manager to that helper. In general, most managers should either be stateless, or only have the &lt;code&gt;owner&lt;/code&gt; they were created with as state.</source>
          <target state="translated">&lt;code&gt;owner&lt;/code&gt; ごとおよび &lt;code&gt;setHelperManager&lt;/code&gt; の使用ごとに1つのヘルパーマネージャーのみが存在することが保証されているため、多くのヘルパーがヘルパーマネージャーの同じインスタンスを使用することになります。そのため、マネージャー自体に関連する状態のみを保存する必要があります。特定のヘルパー定義に固有​​の状態を保存する場合は、そのヘルパーに一意のヘルパーマネージャーを割り当てる必要があります。一般に、ほとんどのマネージャーはステートレスであるか、作成された &lt;code&gt;owner&lt;/code&gt; のみをステートとして持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="56312e9de33823d672f614456c13a57c2666c655" translate="yes" xml:space="preserve">
          <source>Only specific decorators provided by Ember can be applied this way in classic classes.</source>
          <target state="translated">クラシッククラスでこのように適用できるのは、Emberが提供する特定のデコレーターだけです。</target>
        </trans-unit>
        <trans-unit id="d328cfa965ffcc50cbae46e22f7eacf54dc6ea0e" translate="yes" xml:space="preserve">
          <source>Only valid HTML elements in a &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag can be used</source>
          <target state="translated">&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; タグ内の有効なHTML要素のみを使用できます</target>
        </trans-unit>
        <trans-unit id="bfa59a0348d458088b021847d4beef2f800c063e" translate="yes" xml:space="preserve">
          <source>Open &lt;a href=&quot;http://localhost:4200&quot;&gt;&lt;code&gt;http://localhost:4200&lt;/code&gt;&lt;/a&gt; in your browser of choice. You should see an Ember welcome page and not much else.</source>
          <target state="translated">選択したブラウザで&lt;a href=&quot;http://localhost:4200&quot;&gt; &lt;code&gt;http://localhost:4200&lt;/code&gt; &lt;/a&gt;を開きます。Emberのウェルカムページが表示されますが、それ以外は表示されません。</target>
        </trans-unit>
        <trans-unit id="f2b45396a05b9e6a742a38dba57faf9bcaacbc0e" translate="yes" xml:space="preserve">
          <source>Open &lt;a href=&quot;http://localhost:4200&quot;&gt;&lt;code&gt;http://localhost:4200&lt;/code&gt;&lt;/a&gt; in your browser of choice. You should see an Ember welcome page and not much else. Congratulations! You just created and booted your first Ember app.</source>
          <target state="translated">選択したブラウザーで&lt;a href=&quot;http://localhost:4200&quot;&gt; &lt;code&gt;http://localhost:4200&lt;/code&gt; &lt;/a&gt;を開きます。Emberのウェルカムページだけが表示されます。おめでとう！最初のEmberアプリを作成して起動しました。</target>
        </trans-unit>
        <trans-unit id="2f97601478ddfa30694a21e0aee77ce407626778" translate="yes" xml:space="preserve">
          <source>Open our existing acceptance test, &lt;code&gt;tests/acceptance/list-rentals-test.js&lt;/code&gt;, and implement the test labeled &quot;should filter the list of rentals by city&quot;.</source>
          <target state="translated">既存の受け入れテストtest &lt;code&gt;tests/acceptance/list-rentals-test.js&lt;/code&gt; 、「レンタルリストを都市でフィルタリングする必要があります」というラベルの付いたテストを実装します。</target>
        </trans-unit>
        <trans-unit id="0cc801dfb3bc3822b07222ee8a7d8dcfc04c59ec" translate="yes" xml:space="preserve">
          <source>Open the newly-created template in &lt;code&gt;app/templates/scientists.hbs&lt;/code&gt; and add the following HTML:</source>
          <target state="translated">&lt;code&gt;app/templates/scientists.hbs&lt;/code&gt; で新しく作成されたテンプレートを開き、次のHTMLを追加します。</target>
        </trans-unit>
        <trans-unit id="ca4a95be4af61aa0fce1e5925d32c5bcc4963385" translate="yes" xml:space="preserve">
          <source>Opening an issue or pull request to &lt;a href=&quot;https://github.com/ember-learn/guides-source/&quot;&gt;the GitHub repository&lt;/a&gt;</source>
          <target state="translated">問題を開くか&lt;a href=&quot;https://github.com/ember-learn/guides-source/&quot;&gt;、GitHubリポジトリ&lt;/a&gt;へのリクエストをプルします</target>
        </trans-unit>
        <trans-unit id="bd792fbd2875bdf3718df2a36075e5b668af82a7" translate="yes" xml:space="preserve">
          <source>Opening an issue or pull request to &lt;a href=&quot;https://github.com/emberjs/guides/&quot;&gt;the GitHub repository&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/guides/&quot;&gt;GitHubリポジトリ&lt;/a&gt;への課題またはプルリクエストを開く</target>
        </trans-unit>
        <trans-unit id="c1dd165afc95895bd90768a2a8a39ca08acf8783" translate="yes" xml:space="preserve">
          <source>Opening that file will reveal some initial code that will try to go to the &lt;code&gt;list-rentals&lt;/code&gt; route and verify that the route is loaded. The initial code is there to help us build our first acceptance test.</source>
          <target state="translated">そのファイルを開くと、 &lt;code&gt;list-rentals&lt;/code&gt; ルートに移動して、ルートが読み込まれていることを確認する初期コードが表示されます。最初のコードは、最初の受け入れテストを構築するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="68394f0bdcf1b11a4905c9738f7ac23b35d3aca2" translate="yes" xml:space="preserve">
          <source>Opening the template for this route reveals an outlet underneath the route's general page information. At the bottom of the template, you'll notice an &lt;code&gt;{{outlet}}&lt;/code&gt; helper. This is where the active nested route will be rendered.</source>
          <target state="translated">このルートのテンプレートを開くと、ルートの一般的なページ情報の下にアウトレットが表示されます。テンプレートの下部に、 &lt;code&gt;{{outlet}}&lt;/code&gt; ヘルパーが表示されます。これは、アクティブなネストされたルートがレンダリングされる場所です。</target>
        </trans-unit>
        <trans-unit id="84c592e4f2dcd576f7dfcf84d3f2fab2e7d1c377" translate="yes" xml:space="preserve">
          <source>Operations performed in initializers should be kept as lightweight as possible to minimize delays in loading your application. Although advanced techniques exist for allowing asynchrony in application initializers (i.e. &lt;code&gt;deferReadiness&lt;/code&gt; and &lt;code&gt;advanceReadiness&lt;/code&gt;), these techniques should generally be avoided. Any asynchronous loading conditions (e.g. user authorization) are almost always better handled in your application route's hooks, which allows for DOM interaction while waiting for conditions to resolve.</source>
          <target state="translated">イニシャライザで実行される操作は、アプリケーションのロードの遅延を最小限に抑えるために、可能な限り軽量に保つ必要があります。アプリケーション初期化子で非同期を可能にする高度な手法（つまり、 &lt;code&gt;deferReadiness&lt;/code&gt; と &lt;code&gt;advanceReadiness&lt;/code&gt; ）が存在しますが、これらの手法は一般に避けられるべきです。非同期の読み込み条件（ユーザー認証など）は、ほとんどの場合、アプリケーションルートのフックでより適切に処理されます。これにより、条件が解決するのを待っている間、DOMの相互作用が可能になります。</target>
        </trans-unit>
        <trans-unit id="245a923eb00420b9baa12f359835e88308f803dd" translate="yes" xml:space="preserve">
          <source>Opting into a full transition</source>
          <target state="translated">完全移行へのオプトイン</target>
        </trans-unit>
        <trans-unit id="1c49b1643c903074dd04faa3ee683900d824639b" translate="yes" xml:space="preserve">
          <source>Optional Features</source>
          <target state="translated">オプション機能</target>
        </trans-unit>
        <trans-unit id="878e1e97652f92b3656ef534228d846d629e2052" translate="yes" xml:space="preserve">
          <source>Optional addons for Neovim's Ember Language Server:</source>
          <target state="translated">Neovim社のEmber Language Serverのオプション・アドオンです。</target>
        </trans-unit>
        <trans-unit id="66b8b140d34ca56fe840cbf56dad53e263eb6056" translate="yes" xml:space="preserve">
          <source>Optional arguments to be passed to the queued method.</source>
          <target state="translated">キューイングされたメソッドに渡されるオプションの引数。</target>
        </trans-unit>
        <trans-unit id="7174acae61247527fa92ec0872c03eec9cf98de5" translate="yes" xml:space="preserve">
          <source>Optional arguments to pass on</source>
          <target state="translated">渡すためのオプションの引数</target>
        </trans-unit>
        <trans-unit id="f4fa0c5292f62f88297e792835dcb8ffe325cd65" translate="yes" xml:space="preserve">
          <source>Optional arguments to pass to the timeout.</source>
          <target state="translated">タイムアウトに渡すオプションの引数。</target>
        </trans-unit>
        <trans-unit id="a00dbf5de4ed7db7948c3423669d8aeb01e9edd2" translate="yes" xml:space="preserve">
          <source>Optional array of actions (listeners).</source>
          <target state="translated">アクション(リスナー)のオプション配列。</target>
        </trans-unit>
        <trans-unit id="1fddf763cfe0151919fd12f5694dc361ffe0744c" translate="yes" xml:space="preserve">
          <source>Optional array of objects to insert or null if no objects.</source>
          <target state="translated">オプションで、挿入するオブジェクトの配列、またはオブジェクトがない場合はNULL。</target>
        </trans-unit>
        <trans-unit id="a7f4c5eb44535d1e4f3e27873e7fffaf8af0087e" translate="yes" xml:space="preserve">
          <source>Optional array of parameters to interpolate into string.</source>
          <target state="translated">文字列に補間するパラメータのオプション配列.</target>
        </trans-unit>
        <trans-unit id="ff1789bb5d4aa8d68c7ab51838333480e8e224d2" translate="yes" xml:space="preserve">
          <source>Optional dependent keys that trigger this computed property.</source>
          <target state="translated">この計算されたプロパティをトリガするオプションの依存キー。</target>
        </trans-unit>
        <trans-unit id="8ce8b2338198547d4dbc4f7c5014302632a59a0d" translate="yes" xml:space="preserve">
          <source>Optional features in Octane</source>
          <target state="translated">Octaneのオプション機能</target>
        </trans-unit>
        <trans-unit id="6c4f35334f92330cec8db7b3c2ec6ce4d524729c" translate="yes" xml:space="preserve">
          <source>Optional hash of configuration options including `willChange` and `didChange` option.</source>
          <target state="translated">オプションの `willChange` と `didChange` オプションを含む設定オプションのハッシュ。</target>
        </trans-unit>
        <trans-unit id="2f6b7a5c6a5652ddfb412d45674a61749417b985" translate="yes" xml:space="preserve">
          <source>Optional meta to lookup listeners</source>
          <target state="translated">リスナーを検索するためのオプションのメタ</target>
        </trans-unit>
        <trans-unit id="844e0186eb00638ab699a19704bf6b6030a59426" translate="yes" xml:space="preserve">
          <source>Optional parameters for each listener.</source>
          <target state="translated">各リスナーのオプションパラメータ。</target>
        </trans-unit>
        <trans-unit id="6f066f2da230be0f98eac3487bbb5312285fcf7e" translate="yes" xml:space="preserve">
          <source>Optionally supply a model for the route in question. The model will be serialized into the URL using the &lt;code&gt;serialize&lt;/code&gt; hook of the route:</source>
          <target state="translated">必要に応じて、問題のルートのモデルを指定します。ルートの &lt;code&gt;serialize&lt;/code&gt; フックを使用して、モデルがURLにシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="4afb26fd74d5f6e8ea7cbf72fa7921df56de5e90" translate="yes" xml:space="preserve">
          <source>Optionally you can pass a type which unload all records for a given type.</source>
          <target state="translated">オプションで、指定された型のすべてのレコードをアンロードする型を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="d707d47d0d151fe2e1d8731df65d7ece3ccb76af" translate="yes" xml:space="preserve">
          <source>Optionally, a model type used to determine which serializer will be used</source>
          <target state="translated">オプションで、どのシリアライザが使用されるかを決定するために使用されるモデルタイプ</target>
        </trans-unit>
        <trans-unit id="136ae3638c2d9288aced04a9905490f376059e3b" translate="yes" xml:space="preserve">
          <source>Optionally, if &lt;code&gt;adapter.shouldBackgroundReloadAll&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, then a background reload is started. Once this resolves, the array with which the promise resolves, is updated automatically so it contains all the records in the store:</source>
          <target state="translated">必要に応じて、 &lt;code&gt;adapter.shouldBackgroundReloadAll&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; と評価された場合、バックグラウンドの再読み込みが開始されます。これが解決すると、promiseが解決する配列が自動的に更新され、ストア内のすべてのレコードが含まれます。</target>
        </trans-unit>
        <trans-unit id="f76ca3aa52e342e9e499538412c709f9fc9c6c82" translate="yes" xml:space="preserve">
          <source>Optionally, if &lt;code&gt;adapter.shouldBackgroundReloadRecord&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, then a background reload is started, which updates the records' data, once it is available:</source>
          <target state="translated">必要に応じて、 &lt;code&gt;adapter.shouldBackgroundReloadRecord&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; と評価されると、バックグラウンドのリロードが開始され、レコードのデータが利用可能になると更新されます。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="056a298f55d85765827346a51abdb7d167ab8056" translate="yes" xml:space="preserve">
          <source>Options for `Ember.deprecate`.</source>
          <target state="translated">Ember.deprecate` のオプションです。</target>
        </trans-unit>
        <trans-unit id="56daff5148c17e197dc8b310ce65f94faf88f205" translate="yes" xml:space="preserve">
          <source>Options for `deprecate`.</source>
          <target state="translated">deprecate`のオプションです。</target>
        </trans-unit>
        <trans-unit id="da90baa9e342d697ce99637be813aa29582aef4f" translate="yes" xml:space="preserve">
          <source>Or an inline &lt;code&gt;hash&lt;/code&gt;, and you can even pass components:</source>
          <target state="translated">またはインライン &lt;code&gt;hash&lt;/code&gt; 、そしてあなたもコンポーネントを渡すことができます：</target>
        </trans-unit>
        <trans-unit id="009e8dbddb1a9a2e364046dc2b7da46c91d93f02" translate="yes" xml:space="preserve">
          <source>Or by using a helper in the template:</source>
          <target state="translated">または、テンプレートのヘルパーを使用することで。</target>
        </trans-unit>
        <trans-unit id="a6e1814cb1ede5b914af8ed5b9da5330939a141d" translate="yes" xml:space="preserve">
          <source>Or equivalently, &lt;code&gt;{{person/short-profile}}&lt;/code&gt;:</source>
          <target state="translated">または同等に、 &lt;code&gt;{{person/short-profile}}&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d84522ef4b97044a7b5036fbf48e647677689781" translate="yes" xml:space="preserve">
          <source>Or if you pass it an array with names it returns the parameters as a hash:</source>
          <target state="translated">あるいは、名前を含む配列を渡すと、パラメータをハッシュとして返します。</target>
        </trans-unit>
        <trans-unit id="37cdfe0b0058fe4edf3c475c18fb07ae927c2616" translate="yes" xml:space="preserve">
          <source>Or on a hasMany relationship:</source>
          <target state="translated">またはhaveManyの関係に。</target>
        </trans-unit>
        <trans-unit id="64e13784e0e5fc4499c58a28e19a3b279f630bc2" translate="yes" xml:space="preserve">
          <source>Or perhaps you might want to boot two instances of your app on the same page for a split-screen multiplayer experience:</source>
          <target state="translated">また、画面を分割してマルチプレイヤーを体験するために、同じページにあるアプリのインスタンスを2つ起動させたいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="50016e626900570663ecf9226b2c2f188c840413" translate="yes" xml:space="preserve">
          <source>Or, assign an action to an inline event handler in the template (which creates a closure action and does receive the event object as an argument).</source>
          <target state="translated">または、テンプレート内のインラインイベントハンドラにアクションを割り当てます(クロージャアクションを作成し、イベントオブジェクトを引数として受け取ります)。</target>
        </trans-unit>
        <trans-unit id="852f185db9f10db5ab3f8319e0a877a87def8abb" translate="yes" xml:space="preserve">
          <source>Orca, available for integration in Ubuntu, otherwise available as a download</source>
          <target state="translated">Orca、Ubuntuに統合して利用可能、それ以外はダウンロードで入手可能</target>
        </trans-unit>
        <trans-unit id="a4cc74f7b298a6159af4768c4304193189c80184" translate="yes" xml:space="preserve">
          <source>Order of Lifecycle Hooks Called</source>
          <target state="translated">ライフサイクルフックと呼ばれる順番</target>
        </trans-unit>
        <trans-unit id="d3ed86c1334d74f0ae883f47feef902d83b9d8c6" translate="yes" xml:space="preserve">
          <source>Ordering</source>
          <target state="translated">Ordering</target>
        </trans-unit>
        <trans-unit id="519255ae1f74ffc5ddd29979295c7572f048ad81" translate="yes" xml:space="preserve">
          <source>Organization</source>
          <target state="translated">Organization</target>
        </trans-unit>
        <trans-unit id="f6011263f2c8df7e6d5838c01886ff0ab127d426" translate="yes" xml:space="preserve">
          <source>Organize records into groups, each of which is to be passed to separate calls to &lt;code&gt;findMany&lt;/code&gt;.</source>
          <target state="translated">レコードをグループに編成します。各グループは、 &lt;code&gt;findMany&lt;/code&gt; への個別の呼び出しに渡されます。</target>
        </trans-unit>
        <trans-unit id="5c2df0e1900518adaa51b92719f7b922310675ba" translate="yes" xml:space="preserve">
          <source>Other Assets</source>
          <target state="translated">その他の資産</target>
        </trans-unit>
        <trans-unit id="050073d537a7166c91b8fc6249ae7d68937485e8" translate="yes" xml:space="preserve">
          <source>Other Ember-specific addons for data loading. Search for them on &lt;a href=&quot;https://emberobserver.com&quot;&gt;Ember Observer&lt;/a&gt;</source>
          <target state="translated">データをロードするための他のEmber固有のアドオン。&lt;a href=&quot;https://emberobserver.com&quot;&gt;EmberObserver&lt;/a&gt;でそれらを検索します</target>
        </trans-unit>
        <trans-unit id="2cebb63339c152392cb23339f7e974429533abe9" translate="yes" xml:space="preserve">
          <source>Other HTML Attributes</source>
          <target state="translated">その他のHTML属性</target>
        </trans-unit>
        <trans-unit id="a18cb54e465ff4fb1bb3202ed20081c8f7fe153e" translate="yes" xml:space="preserve">
          <source>Other Useful Articles</source>
          <target state="translated">その他のお役立ち記事</target>
        </trans-unit>
        <trans-unit id="d3a5d50dac3d2fd3be1db7f31ed808c7f8a1ff9f" translate="yes" xml:space="preserve">
          <source>Other assets</source>
          <target state="translated">その他の資産</target>
        </trans-unit>
        <trans-unit id="be657d8c6d64e6d3d350289bde7b2fdefa384a70" translate="yes" xml:space="preserve">
          <source>Other decorators exist, including &lt;code&gt;@tracked&lt;/code&gt; which will be discussed later on, and the &lt;code&gt;@action&lt;/code&gt; decorator. The &lt;code&gt;@action&lt;/code&gt; decorator replaces the &lt;code&gt;actions&lt;/code&gt; hash on routes, controllers, and components:</source>
          <target state="translated">他のデコレータには、存在 &lt;code&gt;@tracked&lt;/code&gt; 後に議論される、及び &lt;code&gt;@action&lt;/code&gt; デコレータ。 &lt;code&gt;@action&lt;/code&gt; デコレータは代わる &lt;code&gt;actions&lt;/code&gt; ルート、コントローラ、およびコンポーネントのハッシュを：</target>
        </trans-unit>
        <trans-unit id="e4dafe89467b908579e92440e9dade6a6a530c6d" translate="yes" xml:space="preserve">
          <source>Other than that, fields can generally safely replace properties.</source>
          <target state="translated">それ以外のフィールドは、一般的に安全にプロパティを置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="72938e69e43228a9d4d754a44650fe08dcd71b15" translate="yes" xml:space="preserve">
          <source>Other than that, go to town!</source>
          <target state="translated">それ以外は、街に出てください。</target>
        </trans-unit>
        <trans-unit id="05b2c2f5c7ef214490e816d188da36da6aead3a8" translate="yes" xml:space="preserve">
          <source>Other than these two restrictions, Ember Data's normalized JSON object follows the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API&lt;/a&gt; specification.</source>
          <target state="translated">これら2つの制限を除いて、Ember Dataの正規化されたJSONオブジェクトは&lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API&lt;/a&gt;仕様に従います。</target>
        </trans-unit>
        <trans-unit id="d677034ba96b86d96a07c3b5f23a48edcbc95ef6" translate="yes" xml:space="preserve">
          <source>Other than these two restrictions, Ember Data's normalized JSON object follows the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON:API&lt;/a&gt; specification.</source>
          <target state="translated">これらの2つの制限を除いて、Ember Dataの正規化されたJSONオブジェクトは&lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON：API&lt;/a&gt;仕様に従います。</target>
        </trans-unit>
        <trans-unit id="2d1570f0454b1699f4dd4b984290a82643a03560" translate="yes" xml:space="preserve">
          <source>Otherwise, when using native class syntax, native class rules and behaviors apply, and when using classic class syntax, classic class rules apply.</source>
          <target state="translated">それ以外の場合は、ネイティブクラスの構文を使用する場合は、ネイティブクラスのルールとビヘイビアが適用され、クラシッククラスの構文を使用する場合は、クラシッククラスのルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="0a59ae439add2f420237329f253278208031489d" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;filterByCity&lt;/code&gt; function is going to pretend to be the action function for our component, that does the actual filtering of the rental list.</source>
          <target state="translated">私たちの &lt;code&gt;filterByCity&lt;/code&gt; 関数は、レンタルリストの実際のフィルタリングを行うコンポーネントのアクション関数のふりをします。</target>
        </trans-unit>
        <trans-unit id="1d2352d7289d1df632f9cdd6e7d02d2ec6a168ab" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;rentals&lt;/code&gt; route is going to serve multiple functions. From our &lt;a href=&quot;../acceptance-test&quot;&gt;acceptance tests&lt;/a&gt;, we've shown that we want our users to be able to browse and search rentals, as well as see detailed information for individual rentals. To satisfy that requirement, we are going to make use of Ember's &lt;a href=&quot;https://guides.emberjs.com/routing/defining-your-routes/#toc_nested-routes&quot;&gt;nested route capability&lt;/a&gt;.</source>
          <target state="translated">私たちの &lt;code&gt;rentals&lt;/code&gt; ルートは、複数の機能を提供する予定です。&lt;a href=&quot;../acceptance-test&quot;&gt;受け入れテスト&lt;/a&gt;から、ユーザーがレンタルを閲覧および検索したり、個々のレンタルの詳細情報を確認したりできるようにしたいことがわかりました。この要件を満たすために、Emberの&lt;a href=&quot;https://guides.emberjs.com/routing/defining-your-routes/#toc_nested-routes&quot;&gt;ネストされたルート機能&lt;/a&gt;を利用します。</target>
        </trans-unit>
        <trans-unit id="ceabe1dbf5cc8df0bb7eda712f95c063f04ae06b" translate="yes" xml:space="preserve">
          <source>Our app needs a single function, &lt;code&gt;createMap&lt;/code&gt;, which makes use of &lt;code&gt;google.maps.Map&lt;/code&gt; to create our map element, &lt;code&gt;google.maps.Geocoder&lt;/code&gt; to lookup the coordinates of our location, and &lt;code&gt;google.maps.Marker&lt;/code&gt; to pin our map based on the resolved location.</source>
          <target state="translated">私たちのアプリは、単一の機能を必要とする &lt;code&gt;createMap&lt;/code&gt; を使用せた、 &lt;code&gt;google.maps.Map&lt;/code&gt; は、私たちのマップ要素、作成する &lt;code&gt;google.maps.Geocoder&lt;/code&gt; を私たちの場所の座標をルックアップする、と &lt;code&gt;google.maps.Marker&lt;/code&gt; に基づいて私たちのマップを固定します解決された場所。</target>
        </trans-unit>
        <trans-unit id="e07b0dd7549ed8c27ea39867fe2f2d1988667c3e" translate="yes" xml:space="preserve">
          <source>Our app should behave now as before, with the addition of an image for each rental item.</source>
          <target state="translated">レンタルアイテムごとに画像が追加され、以前と同じように動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="6a20c7d31e256f685e6854e8af9656af5d1a7698" translate="yes" xml:space="preserve">
          <source>Our component integration test will test two different behaviors:</source>
          <target state="translated">私たちのコンポーネント統合テストは、2つの異なる動作をテストします。</target>
        </trans-unit>
        <trans-unit id="bc927403c3f4e27e29509ea224d204579314bd1e" translate="yes" xml:space="preserve">
          <source>Our component is called &lt;code&gt;&amp;lt;PeopleList&amp;gt;&lt;/code&gt;, based on its name on the file system. Please note that the letters P and L are capitalized.</source>
          <target state="translated">このコンポーネントは、ファイルシステムでの名前に基づいて、 &lt;code&gt;&amp;lt;PeopleList&amp;gt;&lt;/code&gt; と呼ばれます。文字PとLは大文字であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="aac6bcc3102b1ecd24b4fb91e8b2669dc6aa577c" translate="yes" xml:space="preserve">
          <source>Our counter has two different actions, &lt;code&gt;increment&lt;/code&gt; and &lt;code&gt;decrement&lt;/code&gt;. But both actions are mostly doing the same thing. The only difference is that &lt;code&gt;increment&lt;/code&gt; changes the count by &lt;code&gt;+1&lt;/code&gt;, while &lt;code&gt;decrement&lt;/code&gt; changes it by &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">カウンターには、 &lt;code&gt;increment&lt;/code&gt; と &lt;code&gt;decrement&lt;/code&gt; 2つの異なるアクションがあります。しかし、どちらのアクションもほとんど同じことをしています。唯一の違いは、ということである &lt;code&gt;increment&lt;/code&gt; 、カウントを変更 &lt;code&gt;+1&lt;/code&gt; ながら、 &lt;code&gt;decrement&lt;/code&gt; でそれを変更 &lt;code&gt;-1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cae96a04e9b7056dc33933f973849aed2afc24ae" translate="yes" xml:space="preserve">
          <source>Our goal is to help you avoid that mess and come up to speed as fast as possible; you can consider us your internet friend.</source>
          <target state="translated">私たちの目標は、あなたがその混乱を回避し、できるだけ早くスピードアップするためのお手伝いをすることであり、あなたは私たちをあなたのインターネットの友人と考えることができます。</target>
        </trans-unit>
        <trans-unit id="939816c45abd273d6565fd8a68842401b6e05c49" translate="yes" xml:space="preserve">
          <source>Our launched Chrome web browser now shows 10 successful tests. If you toggle the box labeled &quot;Hide passed tests&quot;, you should see our successful acceptance test, along with 9 passing ESLint tests. Ember tests each file you create for syntax issues (known as &quot;linting&quot;) using &lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt;.</source>
          <target state="translated">私たちが立ち上げたChrome Webブラウザーは、10個の成功したテストを示しています。「合格したテストを非表示にする」というラベルの付いたボックスを切り替えると、合格した合格テストとESLintテストに合格した9個が表示されます。Emberは、&lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt;を使用して、作成した各ファイルの構文の問題（ &quot; linting &quot;と呼ばれる）をテストします。</target>
        </trans-unit>
        <trans-unit id="bb08f510a40d4531dddec319cee316e84226d5d3" translate="yes" xml:space="preserve">
          <source>Our list-filter component takes a function as an argument, used to find the list of matching rentals based on the filter string provided by the user. We provide an action function by setting it to the local scope of our test by calling &lt;code&gt;this.on&lt;/code&gt;.</source>
          <target state="translated">リストフィルターコンポーネントは関数を引数として取り、ユーザーが提供したフィルター文字列に基づいて、一致するレンタルのリストを検索します。 &lt;code&gt;this.on&lt;/code&gt; を呼び出してテストのローカルスコープに設定することにより、アクション関数を提供します。</target>
        </trans-unit>
        <trans-unit id="b06b1f865cc2e950e72d8ef25f106bf2e0d12435" translate="yes" xml:space="preserve">
          <source>Our new &lt;code&gt;rental-listing&lt;/code&gt; component will manage how a user sees and interacts with a rental. To start, let's move the rental display details for a single rental from the &lt;code&gt;rentals.hbs&lt;/code&gt; template into &lt;code&gt;rental-listing.hbs&lt;/code&gt; and add the image field:</source>
          <target state="translated">私たちの新しい &lt;code&gt;rental-listing&lt;/code&gt; コンポーネントは、ユーザーがレンタルをどのように見て操作するかを管理します。まず、単一のレンタルのレンタル表示詳細を &lt;code&gt;rentals.hbs&lt;/code&gt; テンプレートから &lt;code&gt;rental-listing.hbs&lt;/code&gt; に移動し、画像フィールドを追加します。</target>
        </trans-unit>
        <trans-unit id="29373ffd294040aafa4cf834c59c8d7e6c803a1c" translate="yes" xml:space="preserve">
          <source>Our new helper starts out with some boilerplate code from the generator:</source>
          <target state="translated">私たちの新しいヘルパーは、ジェネレーターからいくつかのボイラープレートコードから始まります。</target>
        </trans-unit>
        <trans-unit id="a349524a1f4aadac769db82fd11c98cb24360fc6" translate="yes" xml:space="preserve">
          <source>Our new route is nested within our &lt;code&gt;rentals&lt;/code&gt; route. This tells Ember that it is a sub-route and will be accessed through &lt;code&gt;localhost:4200/rentals/show&lt;/code&gt;.</source>
          <target state="translated">新しいルートは &lt;code&gt;rentals&lt;/code&gt; ルート内にネストされています。これはEmberにサブルートであり、 &lt;code&gt;localhost:4200/rentals/show&lt;/code&gt; を介してアクセスされることを伝えます。</target>
        </trans-unit>
        <trans-unit id="4f76189ba851aa52d8190127cc50d8974b28cd36" translate="yes" xml:space="preserve">
          <source>Our primary focus with mirage will be in the &lt;code&gt;config.js&lt;/code&gt; file, which is where we can define our API endpoints and our data. We will be following the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON-API specification&lt;/a&gt; which requires our data to be formatted a certain way. Let's configure Mirage to send back our rentals that we had defined above by updating &lt;code&gt;mirage/config.js&lt;/code&gt;:</source>
          <target state="translated">Mirageでの主な焦点は &lt;code&gt;config.js&lt;/code&gt; ファイルです。このファイルで、APIエンドポイントとデータを定義できます。データを特定の方法でフォーマットする必要がある&lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON-API仕様に&lt;/a&gt;従います。Mirage &lt;code&gt;mirage/config.js&lt;/code&gt; 更新して、上記で定義したレンタルを返送するようにMirageを構成しましょう。</target>
        </trans-unit>
        <trans-unit id="1b24e7c85fa3198f703161c3ddef40fe3394011b" translate="yes" xml:space="preserve">
          <source>Our test fills out &quot;Seattle&quot; as the search criteria in the search field, and then sends a &lt;code&gt;keyup&lt;/code&gt; event to the same field with a code of &lt;code&gt;69&lt;/code&gt; (the &lt;code&gt;e&lt;/code&gt; key) to simulate a user typing.</source>
          <target state="translated">このテストでは、検索フィールドの検索条件として「シアトル」に入力し、ユーザーの入力をシミュレートするために、 &lt;code&gt;69&lt;/code&gt; のコード（ &lt;code&gt;e&lt;/code&gt; キー）でキー &lt;code&gt;keyup&lt;/code&gt; イベントを同じフィールドに送信します。</target>
        </trans-unit>
        <trans-unit id="01bb65c5738545e59a2a76289dfe05d3a8130803" translate="yes" xml:space="preserve">
          <source>Out of the box, Ember provides 2 components for building a form:</source>
          <target state="translated">Emberには、フォームを作成するための2つのコンポーネントが用意されています。</target>
        </trans-unit>
        <trans-unit id="bea2ea8d295526b6de7ab08ba561f86c1192c9c8" translate="yes" xml:space="preserve">
          <source>Out-of-Component Modifications</source>
          <target state="translated">コンポーネント外の変更</target>
        </trans-unit>
        <trans-unit id="8169481c0bf47ccddb7f0929954e65aedb10ffd6" translate="yes" xml:space="preserve">
          <source>Outer HTML</source>
          <target state="translated">アウターHTML</target>
        </trans-unit>
        <trans-unit id="78d0fbfeeac956fe03189a14212a32e505b7af40" translate="yes" xml:space="preserve">
          <source>Outputting their name and age.</source>
          <target state="translated">名前と年齢を出力します。</target>
        </trans-unit>
        <trans-unit id="7f785f12de428c659f4e7bcaf5ae3019791cd9ca" translate="yes" xml:space="preserve">
          <source>Outside of class definitions</source>
          <target state="translated">クラス定義の外</target>
        </trans-unit>
        <trans-unit id="eafba9b212384c69a2a6dba1d05842ab6585a134" translate="yes" xml:space="preserve">
          <source>Over the past few years, many new features have been added to Ember with the goal of introducing a new programming model for the framework. This new model brings major gains in productivity and performance, incrementally via a series of minor (non-breaking) releases. This allows for new apps to have the best features enabled automatically, while teams working on existing apps can migrate over time, while still keeping their apps up-to-date with the latest release.</source>
          <target state="translated">ここ数年、Emberには、フレームワークに新しいプログラミングモデルを導入することを目的として、多くの新機能が追加されてきました。この新しいモデルは、生産性とパフォーマンスに大きな向上をもたらし、一連のマイナー(ブレークしない)リリースを通じて段階的に提供されます。これにより、新しいアプリには最適な機能が自動的に有効になり、既存のアプリを開発しているチームは、時間の経過とともにアプリを最新のリリースに合わせて移行することができます。</target>
        </trans-unit>
        <trans-unit id="6448c99bf69eeb2ba6848557375b741d43c476bb" translate="yes" xml:space="preserve">
          <source>Override this function when writing a class-based helper.</source>
          <target state="translated">クラスベースのヘルパーを書く場合は、この関数をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="e7118e866bd2fbc9b87fc7380712b78a5ce41ae2" translate="yes" xml:space="preserve">
          <source>Override this method with your testing framework's false assertion. This function is called whenever an exception occurs causing the testing promise to fail.</source>
          <target state="translated">このメソッドをテストフレームワークの false アサーションでオーバーライドします。この関数は、テストの約束を失敗させる例外が発生したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="78724f610daa7d335490afd0afef134897e80478" translate="yes" xml:space="preserve">
          <source>Override this to call your framework's methods that handle async operations.</source>
          <target state="translated">これをオーバーライドして、非同期操作を扱うフレームワークのメソッドを呼び出すようにします。</target>
        </trans-unit>
        <trans-unit id="6d464e9e96aeb92e00f8be7c60b6ca811e20cee2" translate="yes" xml:space="preserve">
          <source>Override to implement teardown.</source>
          <target state="translated">ティアダウンを実装するためのオーバーライドです。</target>
        </trans-unit>
        <trans-unit id="72f33b6fd8ce9f99ebb8295cb19dd840fcca6242" translate="yes" xml:space="preserve">
          <source>Overrides &lt;code&gt;RegistryProxy#unregister&lt;/code&gt; in order to clear any cached instances of the unregistered factory.</source>
          <target state="translated">&lt;code&gt;RegistryProxy#unregister&lt;/code&gt; されていないファクトリのキャッシュされたインスタンスをクリアするために、RegistryProxy＃unregisterをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="e441b8e9bc7405861b187f25fbe7e852d75948a0" translate="yes" xml:space="preserve">
          <source>Overriding Application-wide Defaults</source>
          <target state="translated">アプリケーション全体のデフォルトを上書きする</target>
        </trans-unit>
        <trans-unit id="fff1ab70d9215d47433358aa873ef34fdced6c34" translate="yes" xml:space="preserve">
          <source>Overriding Parent Class Methods</source>
          <target state="translated">親クラスのメソッドをオーバーライドする</target>
        </trans-unit>
        <trans-unit id="bfaaaf32788c2fd06d3c8e0c98eb03bc280e18a2" translate="yes" xml:space="preserve">
          <source>Overriding attributes</source>
          <target state="translated">オーバーライド属性</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="9fbe29d4d76ec756421aee06e0f34f17fa488ff3" translate="yes" xml:space="preserve">
          <source>PATCH</source>
          <target state="translated">PATCH</target>
        </trans-unit>
        <trans-unit id="61ff81c30aa3c76e78afea62b2e3bd1dfa49e854" translate="yes" xml:space="preserve">
          <source>POST</source>
          <target state="translated">POST</target>
        </trans-unit>
        <trans-unit id="9290a0c61239f22dc109f2cd18743bbd807cdfac" translate="yes" xml:space="preserve">
          <source>Package @ember-data/adapter</source>
          <target state="translated">パッケージ @ember-data/adapter</target>
        </trans-unit>
        <trans-unit id="e48b0cb91fa97df93af72ee439134098689f0194" translate="yes" xml:space="preserve">
          <source>Package @ember-data/canary-features</source>
          <target state="translated">パッケージ @ember-data/canary-features</target>
        </trans-unit>
        <trans-unit id="0df8a2ed461206098f5b4f4bb6b0b2f49d2c5424" translate="yes" xml:space="preserve">
          <source>Package @ember-data/debug</source>
          <target state="translated">パッケージ @ember-data/debug</target>
        </trans-unit>
        <trans-unit id="9b7005ba2cff12f87eed22566914ec8bc55ebaf0" translate="yes" xml:space="preserve">
          <source>Package @ember-data/deprecations</source>
          <target state="translated">パッケージ @ember-data/deprecations</target>
        </trans-unit>
        <trans-unit id="003e7b5f1273dcc0898f2a9cd0b132fbd688696d" translate="yes" xml:space="preserve">
          <source>Package @ember-data/model</source>
          <target state="translated">パッケージ @ember-data/model</target>
        </trans-unit>
        <trans-unit id="47ad3c107b0e54a7ac1944c31fed17b5bb0710b2" translate="yes" xml:space="preserve">
          <source>Package @ember-data/record-data</source>
          <target state="translated">パッケージ @ember-data/record-data</target>
        </trans-unit>
        <trans-unit id="0fd4f67405e1b8aaeb42c2b813a453272e96702d" translate="yes" xml:space="preserve">
          <source>Package @ember-data/serializer</source>
          <target state="translated">パッケージ @ember-data/serializer</target>
        </trans-unit>
        <trans-unit id="b1428f30eaa099cc623d9e5875f2945adcbf8b3f" translate="yes" xml:space="preserve">
          <source>Package @ember-data/store</source>
          <target state="translated">パッケージ @ember-data/store</target>
        </trans-unit>
        <trans-unit id="5fc9be9110da4f7fb13626f72e62a26c36c3285a" translate="yes" xml:space="preserve">
          <source>Package @ember/application</source>
          <target state="translated">パッケージ @ember/application</target>
        </trans-unit>
        <trans-unit id="734ddb7d2dec1da49f5a7fc4629acf3a0da89742" translate="yes" xml:space="preserve">
          <source>Package @ember/array</source>
          <target state="translated">パッケージ @ember/array</target>
        </trans-unit>
        <trans-unit id="b42065785fb6162ff0afee19170bdb1dd62e3f3e" translate="yes" xml:space="preserve">
          <source>Package @ember/canary-features</source>
          <target state="translated">パッケージ @ember/canary-features</target>
        </trans-unit>
        <trans-unit id="d68e9ad98654a50df7ef78f05cf1891259317b6f" translate="yes" xml:space="preserve">
          <source>Package @ember/component</source>
          <target state="translated">パッケージ @ember/component</target>
        </trans-unit>
        <trans-unit id="5d695465b0e4cf906ffdacae17d59c894af69af4" translate="yes" xml:space="preserve">
          <source>Package @ember/component/template-only</source>
          <target state="translated">パッケージ @ember/component/template-only</target>
        </trans-unit>
        <trans-unit id="a7efd390eff02546d1f737fae51a9b0fce7d5272" translate="yes" xml:space="preserve">
          <source>Package @ember/controller</source>
          <target state="translated">パッケージ @ember/controller</target>
        </trans-unit>
        <trans-unit id="2f1b639937499523a3c3c4afcd3c6b9aa0f47a5b" translate="yes" xml:space="preserve">
          <source>Package @ember/debug</source>
          <target state="translated">パッケージ @ember/debug</target>
        </trans-unit>
        <trans-unit id="15b3cc89b5948c441515371238505ac6bdc640a2" translate="yes" xml:space="preserve">
          <source>Package @ember/destroyable</source>
          <target state="translated">パッケージ @ember/destroyable</target>
        </trans-unit>
        <trans-unit id="288f71afaeef2694e4f64440becbe75db3414274" translate="yes" xml:space="preserve">
          <source>Package @ember/engine</source>
          <target state="translated">パッケージ @ember/engine</target>
        </trans-unit>
        <trans-unit id="22cdfc249e93751bc4e29af9207596016371912e" translate="yes" xml:space="preserve">
          <source>Package @ember/enumerable</source>
          <target state="translated">パッケージ @ember/enumerable</target>
        </trans-unit>
        <trans-unit id="91262918ea03b8ce2ce4191feee99570cfde1a47" translate="yes" xml:space="preserve">
          <source>Package @ember/error</source>
          <target state="translated">パッケージ @ember/error</target>
        </trans-unit>
        <trans-unit id="39640ebf9a47fcd005b23845b0a078c1994e86be" translate="yes" xml:space="preserve">
          <source>Package @ember/helper</source>
          <target state="translated">パッケージ @ember/helper</target>
        </trans-unit>
        <trans-unit id="cce16c7338b5d8b924f1cc6f3d1bbcd885119379" translate="yes" xml:space="preserve">
          <source>Package @ember/object</source>
          <target state="translated">パッケージ @ember/object</target>
        </trans-unit>
        <trans-unit id="06e0c1a06b356a4bb4ea26a54c36bcd05dca95e6" translate="yes" xml:space="preserve">
          <source>Package @ember/polyfills</source>
          <target state="translated">パッケージ @ember/polyfills</target>
        </trans-unit>
        <trans-unit id="b8957e0676c9cdd531464db23eece45a24eebf23" translate="yes" xml:space="preserve">
          <source>Package @ember/routing</source>
          <target state="translated">パッケージ @ember/routing</target>
        </trans-unit>
        <trans-unit id="2fac61a119c4b8c50423c769ea4f236d4573336b" translate="yes" xml:space="preserve">
          <source>Package @ember/runloop</source>
          <target state="translated">パッケージ @ember/runloop</target>
        </trans-unit>
        <trans-unit id="4b0836fca2e2abdb0c5955b1f8d2b052a49b9757" translate="yes" xml:space="preserve">
          <source>Package @ember/service</source>
          <target state="translated">パッケージ @ember/service</target>
        </trans-unit>
        <trans-unit id="167799b5dc9f55026cd1b693dbf9e2db4a456aab" translate="yes" xml:space="preserve">
          <source>Package @ember/string</source>
          <target state="translated">パッケージ @ember/string</target>
        </trans-unit>
        <trans-unit id="60870d470295461c33c93fcdaab465250cc3710c" translate="yes" xml:space="preserve">
          <source>Package @ember/template</source>
          <target state="translated">パッケージ @ember/template</target>
        </trans-unit>
        <trans-unit id="0527976ce9e613c1af2c657cfcd35ca62ed6e24a" translate="yes" xml:space="preserve">
          <source>Package @ember/test</source>
          <target state="translated">パッケージ @ember/test</target>
        </trans-unit>
        <trans-unit id="25f0d5bb78f64057f00284b3938d011e12e60d25" translate="yes" xml:space="preserve">
          <source>Package @ember/utils</source>
          <target state="translated">パッケージ @ember/utils</target>
        </trans-unit>
        <trans-unit id="5493c735a2970d00426d269a6a115776da490027" translate="yes" xml:space="preserve">
          <source>Package @glimmer/component</source>
          <target state="translated">パッケージ @glimmer/component</target>
        </trans-unit>
        <trans-unit id="f9d00a0b930fb49d15a31cc517fd94f6342ceb3d" translate="yes" xml:space="preserve">
          <source>Package @glimmer/tracking</source>
          <target state="translated">パッケージ @glimmer/tracking</target>
        </trans-unit>
        <trans-unit id="1f6cd1e1b9b2885f0f08a829e5728420fd9cdd78" translate="yes" xml:space="preserve">
          <source>Package ember</source>
          <target state="translated">パッケージの琥珀</target>
        </trans-unit>
        <trans-unit id="d1d327c69c7c0d03ff923e3dd13072724f7f2692" translate="yes" xml:space="preserve">
          <source>Package rsvp</source>
          <target state="translated">パッケージ rsvp</target>
        </trans-unit>
        <trans-unit id="c03c75ad187275e61e870b10c1663f828100a587" translate="yes" xml:space="preserve">
          <source>Page Template Considerations</source>
          <target state="translated">ページテンプレートの注意点</target>
        </trans-unit>
        <trans-unit id="4aeab6c0b8647d5f1be2e4da4b067b9dd6c2ef73" translate="yes" xml:space="preserve">
          <source>Page Title</source>
          <target state="translated">ページタイトル</target>
        </trans-unit>
        <trans-unit id="8e19661733745ef4b2adef80a34cf5d1556477ae" translate="yes" xml:space="preserve">
          <source>Pagination is a common example of using metadata. Imagine a blog with far more posts than you can display at once. You might query it like so:</source>
          <target state="translated">パジネーションは、メタデータを利用した一般的な例です。一度に表示できる数よりもはるかに多くの記事を持つブログを想像してみてください。このようにクエリーしてみましょう。</target>
        </trans-unit>
        <trans-unit id="758bd025ac3588ef2bf1ea78e2ec92a078d36580" translate="yes" xml:space="preserve">
          <source>Parent components can pass actions to child components through templates alone without adding JavaScript code to those child components.</source>
          <target state="translated">親コンポーネントは、子コンポーネントにJavaScriptのコードを追加することなく、テンプレートのみで子コンポーネントにアクションを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="53b2b4d9664c2f7ba6c736b20cc936678a185b0b" translate="yes" xml:space="preserve">
          <source>Parent:&lt;a href=&quot;ember&quot;&gt;ember&lt;/a&gt;</source>
          <target state="translated">Parent:&lt;a href=&quot;ember&quot;&gt;ember&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2e82d2ab7546c96cb9a5574e03456855e889721d" translate="yes" xml:space="preserve">
          <source>Part of what makes components so useful is that they let you take complete control of a section of the DOM. This allows for direct DOM manipulation, listening and responding to browser events, and using 3rd party JavaScript libraries in your Ember app.</source>
          <target state="translated">コンポーネントが非常に便利なのは、DOM のセクションを完全にコントロールできることです。これにより、DOM を直接操作したり、ブラウザイベントをリッスンして応答したり、Ember アプリでサードパーティの JavaScript ライブラリを使用したりすることができます。</target>
        </trans-unit>
        <trans-unit id="6d4b8ab5dc9107f2d41ceec11911caf0fa5785aa" translate="yes" xml:space="preserve">
          <source>Pass a function that is costly to compute to &lt;code&gt;createCache&lt;/code&gt;.</source>
          <target state="translated">計算にコストがかかる関数を &lt;code&gt;createCache&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="cd0f0c84bbea848ebc99a6d8b09e02c0b6c2687a" translate="yes" xml:space="preserve">
          <source>Passing Actions With Angle Bracket Invocation</source>
          <target state="translated">アングルブラケット呼び出しによるアクションの受け渡し</target>
        </trans-unit>
        <trans-unit id="1fd681d8590147352e763485982ff52042383b47" translate="yes" xml:space="preserve">
          <source>Passing Arguments</source>
          <target state="translated">引数の受け渡し</target>
        </trans-unit>
        <trans-unit id="e653b24bf9e209d80df6a1f3355da460f12ffc78" translate="yes" xml:space="preserve">
          <source>Passing Arguments to Actions</source>
          <target state="translated">アクションへの引数の渡し方</target>
        </trans-unit>
        <trans-unit id="1e7148ce0c1621aba30d240c1c19ad8aaf313466" translate="yes" xml:space="preserve">
          <source>Passing Properties to a Component</source>
          <target state="translated">プロパティをコンポーネントに渡す</target>
        </trans-unit>
        <trans-unit id="3da03a376688d5fb14e52c7f63a1a27343631407" translate="yes" xml:space="preserve">
          <source>Passing arguments</source>
          <target state="translated">引数の受け渡し</target>
        </trans-unit>
        <trans-unit id="5d1352dd442d4cfba0e5fd622749a8a67bb427c2" translate="yes" xml:space="preserve">
          <source>Passing classes to an invocation (i.e. &lt;code&gt;{{my-component class=&quot;...&quot;}}&lt;/code&gt;) will no longer result in those classes being present on any element. This could be a change in behavior which impacts any reflected attribute passed as an argument, such as &lt;code&gt;id=&lt;/code&gt; or &lt;code&gt;tagName=&lt;/code&gt;.</source>
          <target state="translated">クラスを呼び出し（つまり、 &lt;code&gt;{{my-component class=&quot;...&quot;}}&lt;/code&gt; ）に渡すと、それらのクラスがどの要素にも存在しなくなります。これは、 &lt;code&gt;id=&lt;/code&gt; や &lt;code&gt;tagName=&lt;/code&gt; など、引数として渡された反映属性に影響を与える動作の変更である可能性があります。</target>
        </trans-unit>
        <trans-unit id="d7b6892060d3ef827e6332e1ab8d7813ce2e7481" translate="yes" xml:space="preserve">
          <source>Passing functions with the action helper</source>
          <target state="translated">アクションヘルパーで関数を渡す</target>
        </trans-unit>
        <trans-unit id="1f6f9f64dca762b74228ae921a682024bab888c8" translate="yes" xml:space="preserve">
          <source>Passing multiple blocks</source>
          <target state="translated">複数のブロックをパスする</target>
        </trans-unit>
        <trans-unit id="974e5a0b0533d8543bc9f8c28e441ee3eaff1431" translate="yes" xml:space="preserve">
          <source>Passing parameters to blocks</source>
          <target state="translated">ブロックへのパラメータの受け渡し</target>
        </trans-unit>
        <trans-unit id="84eae16350232d0e4ebbc64979eac30603537f4e" translate="yes" xml:space="preserve">
          <source>Passing parameters to named bxlocks</source>
          <target state="translated">名前付きbxlocksへのパラメータの渡し方</target>
        </trans-unit>
        <trans-unit id="8b910b718628891639ad10590baddf47ec63bfe2" translate="yes" xml:space="preserve">
          <source>Passing the Action to the Component</source>
          <target state="translated">アクションをコンポーネントに渡す</target>
        </trans-unit>
        <trans-unit id="3ae4de702d5188523f33d4b5bc1b974cacf49f52" translate="yes" xml:space="preserve">
          <source>Passing three arguments:</source>
          <target state="translated">3つの引数を渡します。</target>
        </trans-unit>
        <trans-unit id="27ba0b50b608b03349c7157edc6ddef068a469a8" translate="yes" xml:space="preserve">
          <source>Passing two arguments:</source>
          <target state="translated">2つの引数を渡します。</target>
        </trans-unit>
        <trans-unit id="bc9542bcb8c51a85721c7d88e5203af136f9bb1f" translate="yes" xml:space="preserve">
          <source>Path Customization</source>
          <target state="translated">パスのカスタマイズ</target>
        </trans-unit>
        <trans-unit id="356cd3bf86420c7cad5947142df308e6e29392c9" translate="yes" xml:space="preserve">
          <source>Pathname customization</source>
          <target state="translated">パス名のカスタマイズ</target>
        </trans-unit>
        <trans-unit id="acf84c0cf396ae71011ae919f3466523baa1c7b1" translate="yes" xml:space="preserve">
          <source>Patterns for Actions</source>
          <target state="translated">行動のパターン</target>
        </trans-unit>
        <trans-unit id="e703641d8deb06b53efdd58ac5208df544778810" translate="yes" xml:space="preserve">
          <source>Patterns for Components</source>
          <target state="translated">コンポーネントのパターン</target>
        </trans-unit>
        <trans-unit id="4d370c50b556b5821596079c3ed48ddf2fbe93ad" translate="yes" xml:space="preserve">
          <source>Pauses the current test - this is useful for debugging while testing or for test-driving. It allows you to inspect the state of your application at any point. Example (The test will pause before clicking the button):</source>
          <target state="translated">現在のテストを一時停止します-これはテスト中のデバッグやテストドライブに便利です。これにより、任意の時点でアプリケーションの状態を検査することができます。例 (ボタンをクリックする前にテストが一時停止します)</target>
        </trans-unit>
        <trans-unit id="61b6cd1258641f0b4de19e16db4a9ed827fe2c16" translate="yes" xml:space="preserve">
          <source>Percy</source>
          <target state="translated">Percy</target>
        </trans-unit>
        <trans-unit id="4946af784e3408745353f1accc2c18f8c0f6d02d" translate="yes" xml:space="preserve">
          <source>Perform a synchronous transition into another route without attempting to resolve promises, update the URL, or abort any currently active asynchronous transitions (i.e. regular transitions caused by &lt;code&gt;transitionTo&lt;/code&gt; or URL changes).</source>
          <target state="translated">promiseの解決、URLの更新、または現在アクティブな非同期遷移（ &lt;code&gt;transitionTo&lt;/code&gt; またはURLの変更による通常の遷移）の中止を試みずに、別のルートへの同期遷移を実行します。</target>
        </trans-unit>
        <trans-unit id="f66eb1046fbcbd1e99aff53dcfd1c6c3e96fed3d" translate="yes" xml:space="preserve">
          <source>Performance can be a concern with fields, since they eagerly create new values for &lt;em&gt;every&lt;/em&gt; instance of the component. This is generally not a problem, but is something to be aware of.</source>
          <target state="translated">フィールドはコンポーネントの&lt;em&gt;すべての&lt;/em&gt;インスタンスに対して新しい値を熱心に作成するため、パフォーマンスが問題になる可能性があります。これは一般的に問題ではありませんが、注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="c97446af9643bcb61ef246b84f5ae53f1e5a2243" translate="yes" xml:space="preserve">
          <source>Perhaps the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; itself was the target of styles (e.g. &lt;code&gt;body &amp;gt; div &amp;gt; .some-child&lt;/code&gt;).</source>
          <target state="translated">おそらく、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 自体がスタイルのターゲットでした（例： &lt;code&gt;body &amp;gt; div &amp;gt; .some-child&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="55048dbb27d1bf87f25ec1c140008767e958cd27" translate="yes" xml:space="preserve">
          <source>Perhaps the application relied on the root &lt;code&gt;.ember-view&lt;/code&gt; for styles (CSS).</source>
          <target state="translated">おそらく、アプリケーションはスタイルのルート &lt;code&gt;.ember-view&lt;/code&gt; （CSS）に依存していました。</target>
        </trans-unit>
        <trans-unit id="f12c5f85d68b2c1cf86b757e8d7188dc87be03b5" translate="yes" xml:space="preserve">
          <source>Persisting Records</source>
          <target state="translated">永続的な記録</target>
        </trans-unit>
        <trans-unit id="7681a0376373e3089f3cc1d9cb621f731b425cd6" translate="yes" xml:space="preserve">
          <source>Picking different components to render in response to the data allows you to have different template and behavior for each case. The &lt;code&gt;{{component}}&lt;/code&gt; helper is a powerful tool for improving code modularity.</source>
          <target state="translated">データに応じてレンダリングするさまざまなコンポーネントを選択することで、ケースごとに異なるテンプレートと動作を設定できます。 &lt;code&gt;{{component}}&lt;/code&gt; ヘルパーコードのモジュール性を改善するための強力なツールです。</target>
        </trans-unit>
        <trans-unit id="53a53cee8d77f69a554611c87983d1a34a9295ae" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;...attributes&lt;/code&gt;&lt;strong&gt;before&lt;/strong&gt; your attributes only if you want to disallow tags from overriding your attributes. This is likely to be unusual.</source>
          <target state="translated">タグによる属性のオーバーライドを禁止する場合にのみ、 &lt;code&gt;...attributes&lt;/code&gt; &lt;strong&gt;前に&lt;/strong&gt;...属性を配置します。これは珍しいことです。</target>
        </trans-unit>
        <trans-unit id="9f5cbf3b9054a982345706be838f8ffee79e5683" translate="yes" xml:space="preserve">
          <source>Plain Old JavaScript Objects (POJOs)</source>
          <target state="translated">POJO(Plain Old JavaScript Object)について</target>
        </trans-unit>
        <trans-unit id="fdc10446ecd38ca13652c931db183d1cff77fdfe" translate="yes" xml:space="preserve">
          <source>Plain Properties</source>
          <target state="translated">プレーンプロパティ</target>
        </trans-unit>
        <trans-unit id="e1a35f314bf2633bdff792cb61a30fd24db73276" translate="yes" xml:space="preserve">
          <source>Planning Your App</source>
          <target state="translated">アプリの企画</target>
        </trans-unit>
        <trans-unit id="0a8d7e61a508ccfa82dd401015443674854d4316" translate="yes" xml:space="preserve">
          <source>Please note that jQuery integration is off by default and this feature will not work properly. To enable this feature, you can read the instructions in the &lt;a href=&quot;https://guides.emberjs.com/release/configuring-ember/optional-features/#toc_jquery-integration&quot;&gt;jquery-integration optional feature guide&lt;/a&gt;.</source>
          <target state="translated">jQuery統合はデフォルトでオフになっており、この機能は正しく機能しないことに注意してください。この機能を有効にするには、&lt;a href=&quot;https://guides.emberjs.com/release/configuring-ember/optional-features/#toc_jquery-integration&quot;&gt;jquery-integrationオプション機能ガイドの&lt;/a&gt;手順をお読みください。</target>
        </trans-unit>
        <trans-unit id="10ab891c24a563405b3a70b1ca34ebe464adb253" translate="yes" xml:space="preserve">
          <source>Please note: This is not for normal usage, and should be used sparingly.</source>
          <target state="translated">ご注意:通常の使用ではありませんので、控えめにご使用ください。</target>
        </trans-unit>
        <trans-unit id="651987c8f13c93d564a719b93607cd420d73a63f" translate="yes" xml:space="preserve">
          <source>Please note: any property changes made during this event will have no effect on object observers.</source>
          <target state="translated">注意:このイベント中に行われたプロパティの変更は、オブジェクトオブザーバには影響しません。</target>
        </trans-unit>
        <trans-unit id="0f86931da96969bb0d673e6eb85b8c9d2da0aefa" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#if&quot;&gt;API documentation of the &lt;code&gt;if&lt;/code&gt; helper&lt;/a&gt; for more patterns.</source>
          <target state="translated">その他のパタ​​ーンについて&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#if&quot;&gt;は、 &lt;code&gt;if&lt;/code&gt; ヘルパーのAPIドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="97a8fb33f7301b7d070bb6b9b6f5697d38d45f2d" translate="yes" xml:space="preserve">
          <source>Pluralization Customization</source>
          <target state="translated">複数化のカスタマイズ</target>
        </trans-unit>
        <trans-unit id="861260cecd797e42301015d1972945d6ccce6883" translate="yes" xml:space="preserve">
          <source>Polyfill</source>
          <target state="translated">Polyfill</target>
        </trans-unit>
        <trans-unit id="989fc91d044783d05d714e433d3e90dca9bdf4da" translate="yes" xml:space="preserve">
          <source>Polymorphism</source>
          <target state="translated">Polymorphism</target>
        </trans-unit>
        <trans-unit id="b60b227dfc72ce2592d5e011bdf46ba68f6f3eeb" translate="yes" xml:space="preserve">
          <source>Polymorphism is a powerful concept which allows a developer to abstract common functionality into a base class. Consider the following example: a user with multiple payment methods. They could have a linked PayPal account, and a couple credit cards on file.</source>
          <target state="translated">ポリモーフィズムは、開発者が共通の機能を基底クラスに抽象化することを可能にする強力な概念です。次の例を考えてみましょう。このようなユーザーは、リンクされたPayPalアカウントを持っていて、いくつかのクレジットカードをファイルに保存しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="4cb4bbf7cc3d4bc42049240fc08ab58851cd946a" translate="yes" xml:space="preserve">
          <source>Pop object from array or nil if none are left. Works just like &lt;code&gt;pop()&lt;/code&gt; but it is KVO-compliant.</source>
          <target state="translated">配列からオブジェクトをポップします。オブジェクトが残っていない場合はnilです。 &lt;code&gt;pop()&lt;/code&gt; と同じように機能しますが、KVOに準拠しています。</target>
        </trans-unit>
        <trans-unit id="dc996b0d24beeb1d3c79bbc55469c48d769e7cfb" translate="yes" xml:space="preserve">
          <source>Positional Params</source>
          <target state="translated">位置パラメータ</target>
        </trans-unit>
        <trans-unit id="b3f0b82d15093c4f3eefcefcd7c265667c8881d6" translate="yes" xml:space="preserve">
          <source>Positional arguments (e.g. &lt;code&gt;{{my-component this.someValue}}&lt;/code&gt;) are &lt;em&gt;not&lt;/em&gt; available in angle bracket invocation, since there is some ambiguity between their behavior and the behavior of standard HTML attributes (HTML attributes without &lt;code&gt;=&lt;/code&gt; default to truthy). If you still need positional arguments, you &lt;em&gt;must&lt;/em&gt; use the component with curly bracket syntax.</source>
          <target state="translated">位置引数（ &lt;code&gt;{{my-component this.someValue}}&lt;/code&gt; など）は、アングルブラケットの呼び出しで&lt;em&gt;は&lt;/em&gt;使用でき&lt;em&gt;ませ&lt;/em&gt;ん。これは、それらの動作と標準のHTML属性（ &lt;code&gt;=&lt;/code&gt; のないHTML属性はデフォルトでtrue）の動作との間にあいまいさが存在するためです。それでも位置引数が&lt;em&gt;必要な&lt;/em&gt;場合は、中括弧構文のコンポーネントを使用する&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5e660f41bf1644faff28e9b935d929c729609d44" translate="yes" xml:space="preserve">
          <source>Practical Resources</source>
          <target state="translated">実用的なリソース</target>
        </trans-unit>
        <trans-unit id="bacc2b59c813afe0d96367410de97912289853d4" translate="yes" xml:space="preserve">
          <source>Prefer the &lt;code&gt;constructor&lt;/code&gt; function, unless the class extends &lt;code&gt;EmberObject&lt;/code&gt;, in which case prefer &lt;code&gt;init&lt;/code&gt;.</source>
          <target state="translated">クラスが &lt;code&gt;EmberObject&lt;/code&gt; を拡張する場合を除き、 &lt;code&gt;constructor&lt;/code&gt; 関数を優先し &lt;code&gt;init&lt;/code&gt; 。拡張する場合は、initを優先します。</target>
        </trans-unit>
        <trans-unit id="f2684504bc0f6384c84c477f8be4a0311c5832d7" translate="yes" xml:space="preserve">
          <source>Preloading</source>
          <target state="translated">Preloading</target>
        </trans-unit>
        <trans-unit id="1ac28a409b05010e5dbd603d91ab6fbe68e42feb" translate="yes" xml:space="preserve">
          <source>Preparing an Addon to use a Canary Feature</source>
          <target state="translated">カナリア機能を使用するためのアドオンの準備</target>
        </trans-unit>
        <trans-unit id="8fa8462b8d7a18af6be6a7e1a411e11684ed8f8f" translate="yes" xml:space="preserve">
          <source>Pretty nice, right?</source>
          <target state="translated">いいでしょう?</target>
        </trans-unit>
        <trans-unit id="4b1fb7e1484b0ba94928623eb8f36f404667ac59" translate="yes" xml:space="preserve">
          <source>Preventing Transitions via &lt;code&gt;willTransition&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;willTransition&lt;/code&gt; による遷移の防止</target>
        </trans-unit>
        <trans-unit id="d802d61c8a7392e75323ae02de35b9864c66709a" translate="yes" xml:space="preserve">
          <source>Preventing and Retrying Transitions</source>
          <target state="translated">トランジションの防止と再試行</target>
        </trans-unit>
        <trans-unit id="5013daf65503f91d54eccc1797b76d7e4dcd2880" translate="yes" xml:space="preserve">
          <source>Previously, in the &lt;a href=&quot;../routes-and-templates&quot;&gt;Routes and Templates tutorial&lt;/a&gt;, we set up a &lt;code&gt;rentals&lt;/code&gt; route.</source>
          <target state="translated">以前は、&lt;a href=&quot;../routes-and-templates&quot;&gt;ルートとテンプレートのチュートリアル&lt;/a&gt;で、 &lt;code&gt;rentals&lt;/code&gt; ルートを設定していました。</target>
        </trans-unit>
        <trans-unit id="f9baaec4106faea48eaf7fcd6f074b9e97eaf3ab" translate="yes" xml:space="preserve">
          <source>Process all the jobs sequentially in &lt;code&gt;WORK_QUEUE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;WORK_QUEUE&lt;/code&gt; ですべてのジョブを順番に処理する</target>
        </trans-unit>
        <trans-unit id="fe5671922bc7f67cfabfa60ab97a9542ac21f39f" translate="yes" xml:space="preserve">
          <source>Promise</source>
          <target state="translated">Promise</target>
        </trans-unit>
        <trans-unit id="eb5d6e800790dcdd19447fac47669042de50dde8" translate="yes" xml:space="preserve">
          <source>Promise Example;</source>
          <target state="translated">プロミスの例。</target>
        </trans-unit>
        <trans-unit id="7763424e70cdeb92b8efa1ce1e7ab2fb3c67f143" translate="yes" xml:space="preserve">
          <source>Promise States and Filtering</source>
          <target state="translated">プロミスステートとフィルタリング</target>
        </trans-unit>
        <trans-unit id="5ea8f6f7f55aefad94d6f37edf953a84817d34aa" translate="yes" xml:space="preserve">
          <source>Promise objects represent the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its &lt;code&gt;then&lt;/code&gt; method, which registers callbacks to receive either a promise&amp;rsquo;s eventual value or the reason why the promise cannot be fulfilled.</source>
          <target state="translated">Promiseオブジェクトは、非同期操作の最終的な結果を表します。promiseとやり取りする主な方法は、 &lt;code&gt;then&lt;/code&gt; メソッドを使用することです。このメソッドは、promiseの最終的な値またはpromiseを実行できない理由のいずれかを受け取るコールバックを登録します。</target>
        </trans-unit>
        <trans-unit id="46847c5528bf36a862876e82e64f9301b7d8c435" translate="yes" xml:space="preserve">
          <source>Promise that resolves to the passed value.</source>
          <target state="translated">渡された値に解決するプロミス。</target>
        </trans-unit>
        <trans-unit id="031404877d6971f9d9a6925cfa325d146b1c8336" translate="yes" xml:space="preserve">
          <source>Promise&amp;lt;Application,Error&amp;gt;</source>
          <target state="translated">Promise&amp;lt;Application,Error&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f3922bee8d393adcf25c00ee1087ae678555fbab" translate="yes" xml:space="preserve">
          <source>Promise&amp;lt;ApplicationInstance, Error&amp;gt;</source>
          <target state="translated">Promise &amp;lt;ApplicationInstance、エラー&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f90fc3965e7f0b82d63fa7168a48a06bdbb2d8a7" translate="yes" xml:space="preserve">
          <source>Promise&amp;lt;Ember.ApplicationInstance, Error&amp;gt;</source>
          <target state="translated">Promise &amp;lt;Ember.ApplicationInstance、エラー&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b8fc6774f9e5c60ba40f1272fa1455b64359b716" translate="yes" xml:space="preserve">
          <source>Promise&amp;lt;EngineInstance,Error&amp;gt;</source>
          <target state="translated">Promise&amp;lt;EngineInstance,Error&amp;gt;</target>
        </trans-unit>
        <trans-unit id="20dfb17fbcb83737eb52f26791ace1434823d825" translate="yes" xml:space="preserve">
          <source>Promise&amp;lt;record&amp;gt;</source>
          <target state="translated">Promise&amp;lt;record&amp;gt;</target>
        </trans-unit>
        <trans-unit id="203fae2a257dd496efa85980bf0ba4c7773be142" translate="yes" xml:space="preserve">
          <source>Promise&amp;lt;record&amp;gt; a promise for the value (record or relationship)</source>
          <target state="translated">Promise &amp;lt;record&amp;gt;値の約束（レコードまたは関係）</target>
        </trans-unit>
        <trans-unit id="dbab246007bbd1239c5f27c1517a97b421235a50" translate="yes" xml:space="preserve">
          <source>PromiseArray</source>
          <target state="translated">PromiseArray</target>
        </trans-unit>
        <trans-unit id="9507c3c92d0c3333ad409798f6bbbe601a9c7186" translate="yes" xml:space="preserve">
          <source>PromiseObject</source>
          <target state="translated">PromiseObject</target>
        </trans-unit>
        <trans-unit id="1e8da2708d11a179d860eb37dfe66600b1bd2b46" translate="yes" xml:space="preserve">
          <source>PromiseProxyMixin</source>
          <target state="translated">PromiseProxyMixin</target>
        </trans-unit>
        <trans-unit id="b1d472e424c03ff52490d1edc8a0e23f95babb92" translate="yes" xml:space="preserve">
          <source>Promises</source>
          <target state="translated">Promises</target>
        </trans-unit>
        <trans-unit id="f44a75e9345297610dff0ce9a97e4b57b6b46aab" translate="yes" xml:space="preserve">
          <source>Promises A+ specifies that any exceptions that occur with a promise must be caught by the promises implementation and bubbled to the last handler. For this reason, it is recommended that you always specify a second rejection handler function to &lt;code&gt;then&lt;/code&gt;. However, &lt;code&gt;RSVP.rethrow&lt;/code&gt; will throw the exception outside of the promise, so it bubbles up to your console if in the browser, or domain/cause uncaught exception in Node. &lt;code&gt;rethrow&lt;/code&gt; will also throw the error again so the error can be handled by the promise per the spec.</source>
          <target state="translated">Promises A +は、promiseで発生するすべての例外をpromises実装でキャッチし、最後のハンドラーにバブリングする必要があることを指定します。このため、 &lt;code&gt;then&lt;/code&gt; には常に2番目の拒否ハンドラ関数を指定することをお勧めします。ただし、 &lt;code&gt;RSVP.rethrow&lt;/code&gt; はpromiseの外で例外をスローするため、ブラウザーの場合はコンソールにバブルアップします。Nodeの場合、キャッチされない例外がドメイン/原因になります。 &lt;code&gt;rethrow&lt;/code&gt; もエラーを再度スローするので、仕様に従ってプロミスでエラーを処理できます。</target>
        </trans-unit>
        <trans-unit id="f087fe7714b99fc26f67b90d3aebac0b1e3a66e9" translate="yes" xml:space="preserve">
          <source>Promises A+ specifies that any exceptions that occur with a promise must be caught by the promises implementation and bubbled to the last handler. For this reason, it is recommended that you always specify a second rejection handler function to &lt;code&gt;then&lt;/code&gt;. However, &lt;code&gt;rethrow&lt;/code&gt; will throw the exception outside of the promise, so it bubbles up to your console if in the browser, or domain/cause uncaught exception in Node. &lt;code&gt;rethrow&lt;/code&gt; will also throw the error again so the error can be handled by the promise per the spec.</source>
          <target state="translated">Promise A +は、Promiseで発生する例外はすべて、Promise実装によってキャッチされ、最後のハンドラーにバブルされる必要があることを指定します。このため、常に2番目の拒否ハンドラー関数を &lt;code&gt;then&lt;/code&gt; に指定することをお勧めします。ただし、 &lt;code&gt;rethrow&lt;/code&gt; すると、Promiseの範囲外で例外がスローされるため、ブラウザー内の場合はコンソールにバブルアップするか、Nodeでドメイン/原因のキャッチされない例外が発生します。 &lt;code&gt;rethrow&lt;/code&gt; もエラーを再度スローするため、仕様に従ってpromiseでエラーを処理できます。</target>
        </trans-unit>
        <trans-unit id="216c902fd90fd7f61531c27c5a86d60085ec25e9" translate="yes" xml:space="preserve">
          <source>Promises Not Detected</source>
          <target state="translated">プロミスは検出されません</target>
        </trans-unit>
        <trans-unit id="aaca97f965d2c31995d03cad0b27e350c3445416" translate="yes" xml:space="preserve">
          <source>Promises can also be said to &lt;em&gt;resolve&lt;/em&gt; a value. If this value is also a promise, then the original promise's settled state will match the value's settled state. So a promise that &lt;em&gt;resolves&lt;/em&gt; a promise that rejects will itself reject, and a promise that &lt;em&gt;resolves&lt;/em&gt; a promise that fulfills will itself fulfill.</source>
          <target state="translated">約束は価値を&lt;em&gt;解決&lt;/em&gt;するとも言えます。この値がpromiseでもある場合、元のpromiseの解決済みの状態は、値の解決済みの状態と一致します。したがって、拒否する約束を&lt;em&gt;解決&lt;/em&gt;する約束は、それ自体が拒否し、実行する約束を&lt;em&gt;解決&lt;/em&gt;する約束は、それ自体が実行されます。</target>
        </trans-unit>
        <trans-unit id="9f4ddbbce9b9a96df78d3c916a6239398660cebc" translate="yes" xml:space="preserve">
          <source>Promises generated by Ember are all labeled by default. You can also label your own RSVP Promises to find them in the Inspector's Promises tab. All RSVP methods can take a label as the final argument.</source>
          <target state="translated">Ember によって生成された約束は、すべてデフォルトでラベル付けされています。また、独自の RSVP Promises にラベルを付けて、インスペクタの Promises タブで見つけることもできます。すべての RSVP メソッドは最終的な引数としてラベルを取ることができます。</target>
        </trans-unit>
        <trans-unit id="763b5a177da3472a739c49add6d1a21b1ef06c5d" translate="yes" xml:space="preserve">
          <source>Promises have different colors based on their state.</source>
          <target state="translated">プロミスは状態によって色が違います。</target>
        </trans-unit>
        <trans-unit id="f72d01a967e01e14a4a0fa223b3309202aa7c45b" translate="yes" xml:space="preserve">
          <source>Promises shine when abstracting away asynchronous interactions such as &lt;code&gt;XMLHttpRequest&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;XMLHttpRequest&lt;/code&gt; などの非同期の相互作用を抽象化すると、約束がうまくいきます。</target>
        </trans-unit>
        <trans-unit id="9229a94589162572814117eb770a291cf02fddad" translate="yes" xml:space="preserve">
          <source>Promises that are fulfilled have a fulfillment value and are in the fulfilled state. Promises that are rejected have a rejection reason and are in the rejected state. A fulfillment value is never a thenable.</source>
          <target state="translated">履行された約束は履行値を持ち、履行状態にある。拒否された約束には拒否理由があり、拒否された状態にある。充足値は、その時に可能な値ではありません。</target>
        </trans-unit>
        <trans-unit id="03590df139443945075f2a3bc957119a024699ce" translate="yes" xml:space="preserve">
          <source>Promise|Object</source>
          <target state="translated">Promise|Object</target>
        </trans-unit>
        <trans-unit id="4d27d8f128502f9f8111caae7ff62cbb3ed8d690" translate="yes" xml:space="preserve">
          <source>Proper use of loading and error states result in better user experience</source>
          <target state="translated">ローディングとエラーの状態を適切に利用することで、ユーザーエクスペリエンスの向上につながる</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="7ed31ad18cd5e9f2707ad799a56faddf17019c6d" translate="yes" xml:space="preserve">
          <source>Properties and Fields</source>
          <target state="translated">プロパティとフィールド</target>
        </trans-unit>
        <trans-unit id="536b9006793cf5c3c1070e09df19893db8668d7a" translate="yes" xml:space="preserve">
          <source>Properties and observers allow one object to observe changes to a property on another object. This is one of the fundamental ways that models, controllers and views communicate with each other in an Ember application.</source>
          <target state="translated">プロパティとオブザーバーは、あるオブジェクトが別のオブジェクトのプロパティへの変更を観測することを可能にします。これは、モデル、コントローラ、ビューが Ember アプリケーションで互いに通信する基本的な方法の 1 つです。</target>
        </trans-unit>
        <trans-unit id="82033eb711807359e0eec9de4a43a4d74d92c987" translate="yes" xml:space="preserve">
          <source>Properties can be chained as well:</source>
          <target state="translated">プロパティはチェーン化することもできます。</target>
        </trans-unit>
        <trans-unit id="78f31ba10d57ca9b7adea36e3e53f11fe1911b58" translate="yes" xml:space="preserve">
          <source>Properties passed to &lt;code&gt;create&lt;/code&gt; will be available on the instance by the time &lt;code&gt;init&lt;/code&gt; runs, so any code that requires these values should work at that time.</source>
          <target state="translated">&lt;code&gt;create&lt;/code&gt; に渡されたプロパティは、 &lt;code&gt;init&lt;/code&gt; が実行されるまでにインスタンスで使用できるようになるため、これらの値を必要とするコードはすべてその時点で機能するはずです。</target>
        </trans-unit>
        <trans-unit id="5c379650924c833d1858287bc08588ceb832a8a0" translate="yes" xml:space="preserve">
          <source>Properties that are defined on the model but are omitted in the normalized JSON API document object will not be updated. Properties that are included in the normalized JSON API document object but not defined on the Model will be ignored.</source>
          <target state="translated">モデル上で定義されているが、正規化されたJSON APIドキュメントオブジェクトに省略されているプロパティは更新されません。正規化されたJSON APIドキュメントオブジェクトに含まれているが、モデル上で定義されていないプロパティは無視されます。</target>
        </trans-unit>
        <trans-unit id="8abb7eb3c6d007528a186713bf1812adcaa9791f" translate="yes" xml:space="preserve">
          <source>Properties that are defined on the model but are omitted in the normalized JSON:API document object will not be updated. Properties that are included in the normalized JSON:API document object but not defined on the Model will be ignored.</source>
          <target state="translated">モデル上で定義されているが、正規化されたJSON:APIドキュメント・オブジェクトでは省略されているプロパティは更新されません。正規化されたJSON:APIドキュメント・オブジェクトに含まれているが、モデル上で定義されていないプロパティは無視されます。</target>
        </trans-unit>
        <trans-unit id="8d9e37b396787a5cb09465045bf0f0a4eab7185e" translate="yes" xml:space="preserve">
          <source>Property Observers</source>
          <target state="translated">プロパティオブザーバー</target>
        </trans-unit>
        <trans-unit id="36a5c5d127ff74bc8923ef2c6b095fb263a73471" translate="yes" xml:space="preserve">
          <source>PropertyDecorator</source>
          <target state="translated">PropertyDecorator</target>
        </trans-unit>
        <trans-unit id="1663fd75547a6135b01b3df3236c0070aa5f0920" translate="yes" xml:space="preserve">
          <source>PropertyDescriptor|undefined</source>
          <target state="translated">PropertyDescriptor|undefined</target>
        </trans-unit>
        <trans-unit id="3249cd85365c1d97e6d4a3239b88af5d064671ab" translate="yes" xml:space="preserve">
          <source>Provide the asset path as the first argument, and the list of modules and exports as the second.</source>
          <target state="translated">第一引数にアセットパスを、第二引数にモジュールとエクスポートのリストを指定します。</target>
        </trans-unit>
        <trans-unit id="4e7ccdfdc46e55a1f8f8e8698100457fdda15b9f" translate="yes" xml:space="preserve">
          <source>Provide the asset path as the first argument:</source>
          <target state="translated">第一引数にアセットパスを指定します。</target>
        </trans-unit>
        <trans-unit id="804a830ba49ef5270d658059a3cc0bf26f755759" translate="yes" xml:space="preserve">
          <source>Providing Markup to a Component</source>
          <target state="translated">コンポーネントへのマークアップの提供</target>
        </trans-unit>
        <trans-unit id="5c9b1ac36b5021ea213e2a9b52e09401d0c16a5b" translate="yes" xml:space="preserve">
          <source>Proxies to the serializer's &lt;code&gt;serialize&lt;/code&gt; method.</source>
          <target state="translated">シリアライザの &lt;code&gt;serialize&lt;/code&gt; メソッドのプロキシ。</target>
        </trans-unit>
        <trans-unit id="127bb9e4bb030d22e2337f3c5cdd29d2359e0a2d" translate="yes" xml:space="preserve">
          <source>ProxyMixin</source>
          <target state="translated">ProxyMixin</target>
        </trans-unit>
        <trans-unit id="942ee8718427c820129c01d74733d07d8f832498" translate="yes" xml:space="preserve">
          <source>Pure native classes, sharing functionality via class inheritance.</source>
          <target state="translated">純粋なネイティブクラスで、クラスの継承により機能を共有しています。</target>
        </trans-unit>
        <trans-unit id="c4a9924b7849758c869d4fd5e52d97bd8b26ff5e" translate="yes" xml:space="preserve">
          <source>Push some data for a given type into the store.</source>
          <target state="translated">指定された型のデータをストアにプッシュします。</target>
        </trans-unit>
        <trans-unit id="9536ee10c3ab2432a5e6558f3207239d0d2ea555" translate="yes" xml:space="preserve">
          <source>Push some raw data into the store.</source>
          <target state="translated">いくつかの生データをストアにプッシュします。</target>
        </trans-unit>
        <trans-unit id="9b601bad7a8b3234afd2de3a37d3cb2f2f119973" translate="yes" xml:space="preserve">
          <source>Push the object onto the end of the array if it is not already present in the array.</source>
          <target state="translated">配列内にオブジェクトが存在しない場合は、そのオブジェクトを配列の末尾に押し込みます。</target>
        </trans-unit>
        <trans-unit id="5a5340b1561d715113dc2d332842eae59747ca32" translate="yes" xml:space="preserve">
          <source>Push the object onto the end of the array. Works just like &lt;code&gt;push()&lt;/code&gt; but it is KVO-compliant.</source>
          <target state="translated">オブジェクトを配列の最後にプッシュします。 &lt;code&gt;push()&lt;/code&gt; と同じように機能しますが、KVOに準拠しています。</target>
        </trans-unit>
        <trans-unit id="700f90c6bd512a32dbfb55478282f3c7731cdb78" translate="yes" xml:space="preserve">
          <source>Pushing Records</source>
          <target state="translated">プッシングレコード</target>
        </trans-unit>
        <trans-unit id="08491627624f56833d6474da961363d94fe64101" translate="yes" xml:space="preserve">
          <source>Pushing Records into the Store</source>
          <target state="translated">レコードを店舗に押し込む</target>
        </trans-unit>
        <trans-unit id="ba83f3a04b35edb4a33611352a88476fef56f328" translate="yes" xml:space="preserve">
          <source>QUnit example:</source>
          <target state="translated">QUnit の例です。</target>
        </trans-unit>
        <trans-unit id="c5aad12964a69eb6cc9ccef39e0f740e43015f0f" translate="yes" xml:space="preserve">
          <source>QUnit passes in an object called an &lt;a href=&quot;https://api.qunitjs.com/assert/&quot;&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; to each test function. An &lt;code&gt;assert&lt;/code&gt; has functions, such as &lt;code&gt;equal()&lt;/code&gt;, that allow your test to check for conditions within the test environment. A test must have one passing assert to be successful.</source>
          <target state="translated">QUnitは、&lt;a href=&quot;https://api.qunitjs.com/assert/&quot;&gt; &lt;code&gt;assert&lt;/code&gt; &lt;/a&gt;と呼ばれるオブジェクトを各テスト関数に渡します。 &lt;code&gt;assert&lt;/code&gt; のような機能を、持っている &lt;code&gt;equal()&lt;/code&gt; テストは、テスト環境内の状態をチェックすることができ、。テストを成功させるには、テストに1つのアサートが必要です。</target>
        </trans-unit>
        <trans-unit id="8efa9f9b516b6bc7822720c80c7291bdcd7559ed" translate="yes" xml:space="preserve">
          <source>QUnit, QUnit DOM</source>
          <target state="translated">QUnit,QUnit DOM</target>
        </trans-unit>
        <trans-unit id="3229861d9c9111cf61a19e43da48ddbbd1b48efd" translate="yes" xml:space="preserve">
          <source>Query Parameters</source>
          <target state="translated">クエリパラメータ</target>
        </trans-unit>
        <trans-unit id="0fd0190c18a1b0c89567786d2da87abd9ad2e6a8" translate="yes" xml:space="preserve">
          <source>Query Params</source>
          <target state="translated">Query Params</target>
        </trans-unit>
        <trans-unit id="5139ef15ef3085f1688a1e87d332dfd36e0ceff6" translate="yes" xml:space="preserve">
          <source>Query param values are cast to the same datatype as the default value, e.g. a URL change from &lt;code&gt;/?page=3&lt;/code&gt; to &lt;code&gt;/?page=2&lt;/code&gt; will set &lt;code&gt;controller:articles&lt;/code&gt;'s &lt;code&gt;page&lt;/code&gt; property to the number &lt;code&gt;2&lt;/code&gt;, rather than the string &lt;code&gt;&quot;2&quot;&lt;/code&gt;. The same also applies to boolean default values. If the default value is an array, the string will be parsed using &lt;code&gt;JSON.parse&lt;/code&gt;.</source>
          <target state="translated">クエリパラメータの値はデフォルト値と同じデータ型にキャストされます。たとえば、URLが &lt;code&gt;/?page=3&lt;/code&gt; から &lt;code&gt;/?page=2&lt;/code&gt; に変更されると、 &lt;code&gt;controller:articles&lt;/code&gt; の &lt;code&gt;page&lt;/code&gt; プロパティが文字列 &lt;code&gt;&quot;2&quot;&lt;/code&gt; ではなく数値 &lt;code&gt;2&lt;/code&gt; に設定されます&quot;。同じことがブールのデフォルト値にも当てはまります。デフォルト値が配列の場合、文字列は &lt;code&gt;JSON.parse&lt;/code&gt; を使用して解析されます。</target>
        </trans-unit>
        <trans-unit id="0aca39e962863236da8c92fd756de102fb200868" translate="yes" xml:space="preserve">
          <source>Query parameters are optional key-value pairs that appear to the right of the &lt;code&gt;?&lt;/code&gt; in a URL. For example, the following URL has two query params, &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;page&lt;/code&gt;, with respective values &lt;code&gt;ASC&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;:</source>
          <target state="translated">クエリパラメータは、 &lt;code&gt;?&lt;/code&gt; の右側に表示されるオプションのキーと値のペアです。URLで。たとえば、次のURLには2つのクエリパラメータ &lt;code&gt;sort&lt;/code&gt; と &lt;code&gt;page&lt;/code&gt; があり、それぞれの値は &lt;code&gt;ASC&lt;/code&gt; と &lt;code&gt;2&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b0f8ce0e88182d09e5b36ad33c8efbb1f3a42a78" translate="yes" xml:space="preserve">
          <source>Query params allow for additional application state to be serialized into the URL that can't otherwise fit into the &lt;em&gt;path&lt;/em&gt; of the URL (i.e. everything to the left of the &lt;code&gt;?&lt;/code&gt;). Common use cases for query params include representing the current page number in a paginated collection, filter criteria, or sorting criteria.</source>
          <target state="translated">クエリparamsがそうでない場合に適合することはできませんURLにシリアライズするために追加のアプリケーションの状態を可能とする&lt;em&gt;パス&lt;/em&gt; URLの（左のすなわちすべて &lt;code&gt;?&lt;/code&gt; ）。クエリパラメーターの一般的な使用例には、ページ分割されたコレクション、フィルター条件、または並べ替え条件で現在のページ番号を表すことが含まれます。</target>
        </trans-unit>
        <trans-unit id="b1782f7b18226435ee790bf1a339595b9fcaafce" translate="yes" xml:space="preserve">
          <source>Query params are declared on route-driven controllers. For example, to configure query params that are active within the &lt;code&gt;articles&lt;/code&gt; route, they must be declared on &lt;code&gt;controller:articles&lt;/code&gt;.</source>
          <target state="translated">クエリパラメータは、ルート駆動型コントローラで宣言されます。たとえば、 &lt;code&gt;articles&lt;/code&gt; ルート内でアクティブなクエリパラメータを設定するには、それらを &lt;code&gt;controller:articles&lt;/code&gt; で宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="b1e8c5f9eb6a51268771357d73e5c3d414ee77b7" translate="yes" xml:space="preserve">
          <source>Query params that require additional customization can be provided along with strings in the &lt;code&gt;queryParams&lt;/code&gt; array.</source>
          <target state="translated">追加のカスタマイズが必要なクエリ &lt;code&gt;queryParams&lt;/code&gt; は、queryParams配列の文字列とともに提供できます。</target>
        </trans-unit>
        <trans-unit id="84d51a6c79840a7e20e6f3b3c232167ddd101fdb" translate="yes" xml:space="preserve">
          <source>Querying for A Single Record</source>
          <target state="translated">単一レコードのクエリ</target>
        </trans-unit>
        <trans-unit id="bab1721e2fbda766f83183971199264a105762c8" translate="yes" xml:space="preserve">
          <source>Querying for Multiple Records</source>
          <target state="translated">複数のレコードの問い合わせ</target>
        </trans-unit>
        <trans-unit id="455083cac2ae96eabe3895762b6080aa09e6afa4" translate="yes" xml:space="preserve">
          <source>Quick Start</source>
          <target state="translated">クイックスタート</target>
        </trans-unit>
        <trans-unit id="230411ef89f03596bd363a86e0479171061c9d26" translate="yes" xml:space="preserve">
          <source>RESTAdapter</source>
          <target state="translated">RESTAdapter</target>
        </trans-unit>
        <trans-unit id="d951635668302f4b57a9b19aab103a9dba73ce9f" translate="yes" xml:space="preserve">
          <source>RESTSerializer</source>
          <target state="translated">RESTSerializer</target>
        </trans-unit>
        <trans-unit id="9e2ff6c5483cb39d97a402f850cb39e32d0c9dbc" translate="yes" xml:space="preserve">
          <source>RSVP</source>
          <target state="translated">RSVP</target>
        </trans-unit>
        <trans-unit id="cc85f8587031356b78b2448d63c222acc180e5f9" translate="yes" xml:space="preserve">
          <source>RSVP.EventTarget</source>
          <target state="translated">RSVP.EventTarget</target>
        </trans-unit>
        <trans-unit id="8c3018eec21a26738e481a8b5ea2b8b6ade95786" translate="yes" xml:space="preserve">
          <source>RSVP.Promise</source>
          <target state="translated">RSVP.Promise</target>
        </trans-unit>
        <trans-unit id="4e1ef1585228db21136c63e2c103fa2fc8cba9b0" translate="yes" xml:space="preserve">
          <source>RSVP.Promise&amp;lt;any&amp;gt;</source>
          <target state="translated">RSVP.Promise&amp;lt;any&amp;gt;</target>
        </trans-unit>
        <trans-unit id="02ed91fc301225e19af656a773481bbe02910c4f" translate="yes" xml:space="preserve">
          <source>RSVP.Promise&amp;lt;undefined&amp;gt;</source>
          <target state="translated">RSVP.Promise&amp;lt;undefined&amp;gt;</target>
        </trans-unit>
        <trans-unit id="0e57c7077cfdd6dccd21781d8c00850d345148e3" translate="yes" xml:space="preserve">
          <source>Rather than create an arbitrary set of conventions, Ember Data is designed to work out of the box with &lt;a href=&quot;http://jsonapi.org&quot;&gt;JSON API&lt;/a&gt;. JSON API is a formal specification for building conventional, robust, and performant APIs that allow clients and servers to communicate model data.</source>
          <target state="translated">Ember Dataは、任意の一連の規則を作成するのではなく、そのまま&lt;a href=&quot;http://jsonapi.org&quot;&gt;JSON APIを使用&lt;/a&gt;して機能するように設計されています。JSON APIは、クライアントとサーバーがモデルデータを通信できるようにする、従来の堅牢で高性能なAPIを構築するための正式な仕様です。</target>
        </trans-unit>
        <trans-unit id="20a3458f1862c89f455c490634fb5f573475fbc2" translate="yes" xml:space="preserve">
          <source>Rather than writing the higher level app code that internally invokes the various run loop scheduling functions, we have stripped away the covers, and shown the raw run-loop interactions.</source>
          <target state="translated">内部的に様々なランループスケジューリング関数を呼び出す高レベルのアプリコードを書くのではなく、カバーを剥ぎ取り、生のランループインタラクションを表示しています。</target>
        </trans-unit>
        <trans-unit id="02143f2c5abf0fcc77c1815c31c2586f2ab77a8d" translate="yes" xml:space="preserve">
          <source>Re-route to the existing url</source>
          <target state="translated">既存のURLへの再ルーティング</target>
        </trans-unit>
        <trans-unit id="555768dd72554ce46dd9aaba0b928945c0c45add" translate="yes" xml:space="preserve">
          <source>Read some blog posts about data loading in Ember. Apps and APIs come in so many different shapes and sizes that it's helpful to seek out examples that are similar to your goals before digging into the details.</source>
          <target state="translated">Emberでのデータロードに関するブログ記事を読んでみましょう。アプリやAPIには様々な形や大きさがあるので、詳細を調べる前に自分の目的に近い例を探してみると良いでしょう。</target>
        </trans-unit>
        <trans-unit id="4762fc07015da670d25188e13fd68f6f63cbbe2e" translate="yes" xml:space="preserve">
          <source>Read-only Attributes</source>
          <target state="translated">Read-only Attributes</target>
        </trans-unit>
        <trans-unit id="c853a28871d264d43a0d86e34fdf1c1f3e7482f4" translate="yes" xml:space="preserve">
          <source>Readonly Nested Data</source>
          <target state="translated">読み取り専用の入れ子になったデータ</target>
        </trans-unit>
        <trans-unit id="a541f922c72dc2bbd61c03c85126d821763fdbd8" translate="yes" xml:space="preserve">
          <source>Recall that our modifier will manage the DOM (i.e. calling the audio element's &lt;code&gt;play&lt;/code&gt; or &lt;code&gt;pause&lt;/code&gt; method). All the component needs to do is to track whether the audio is playing:</source>
          <target state="translated">モディファイアがDOMを管理することを思い出してください（つまり、オーディオ要素の &lt;code&gt;play&lt;/code&gt; または &lt;code&gt;pause&lt;/code&gt; メソッドを呼び出します）。コンポーネントが行う必要があるのは、オーディオが再生されているかどうかを追跡することだけです。</target>
        </trans-unit>
        <trans-unit id="ced23c694be11636b1a1057eb27e72fe6d077ceb" translate="yes" xml:space="preserve">
          <source>Recall that there were a few exceptions. The following input attributes must be passed as arguments (i.e. do prepend &lt;code&gt;@&lt;/code&gt;) to the &lt;code&gt;&amp;lt;Input&amp;gt;&lt;/code&gt; component:</source>
          <target state="translated">いくつかの例外があったことを思い出してください。次の入力属性は、引数として &lt;code&gt;&amp;lt;Input&amp;gt;&lt;/code&gt; コンポーネントに渡す必要があります（つまり、 &lt;code&gt;@&lt;/code&gt; を先頭に追加します）。</target>
        </trans-unit>
        <trans-unit id="0c10e60d11c6190929e46b216e3485144d573585" translate="yes" xml:space="preserve">
          <source>Receives a destroyable and a destructor function, and de-associates the destructor from the destroyable.</source>
          <target state="translated">destroyableとデストラクタ関数を受け取り、デストラクタとdestroyableの関連付けを解除します。</target>
        </trans-unit>
        <trans-unit id="3d7346f83dd4ebab78f9b401d93fec94888fd513" translate="yes" xml:space="preserve">
          <source>Receives a destroyable object and a destructor function, and associates the function with it. When the destroyable is destroyed with destroy, or when its parent is destroyed, the destructor function will be called.</source>
          <target state="translated">destroyableオブジェクトとデストラクタ関数を受け取り、その関数を関連付けます。destroyableがdestroyで破壊されたとき、またはその親が破壊されたときに、デストラクタ関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cfb21c34cc91761b59549492bc38bb22aee9aa80" translate="yes" xml:space="preserve">
          <source>Receives a destroyable, and returns true if the destroyable has begun destroying. Otherwise returns false.</source>
          <target state="translated">destroyableを受信し、破壊を開始した場合はtrueを返します。それ以外の場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="22c4309d8d736af351252e3939d38e7b00f34610" translate="yes" xml:space="preserve">
          <source>Receives a destroyable, and returns true if the destroyable has finished destroying. Otherwise returns false.</source>
          <target state="translated">destroyableを受信し、破壊が完了していればtrueを返します。それ以外はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="698fcc6e06623ab7a1f886a395c6817e24d08745" translate="yes" xml:space="preserve">
          <source>Recomputing is fine in most cases. If the computation that happens in the getter is very expensive, however, you will want to cache the value and retrieve it when the dependencies haven't changed. You want to recompute only if a dependency has been updated.</source>
          <target state="translated">ほとんどの場合、再計算で問題ありません。しかし、ゲッターで行われる計算が非常に高くつく場合は、値をキャッシュし、依存関係が変更されていないときに値を取得したいと思うでしょう。依存関係が更新された場合にのみ再計算を行いたいのです。</target>
        </trans-unit>
        <trans-unit id="b129f9f5e547d2585b00b80301e33d0ccd886142" translate="yes" xml:space="preserve">
          <source>Record States and Filtering</source>
          <target state="translated">記録状態とフィルタリング</target>
        </trans-unit>
        <trans-unit id="c4612a8c735947d2f4860fb003a9cdd796980b66" translate="yes" xml:space="preserve">
          <source>RecordArray</source>
          <target state="translated">RecordArray</target>
        </trans-unit>
        <trans-unit id="779639f77d26423e55093890463c73df4117f2b4" translate="yes" xml:space="preserve">
          <source>RecordReference</source>
          <target state="translated">RecordReference</target>
        </trans-unit>
        <trans-unit id="e51c55255be9007d473b3c04b4553c2a27d6f03b" translate="yes" xml:space="preserve">
          <source>Records</source>
          <target state="translated">Records</target>
        </trans-unit>
        <trans-unit id="09f48f492f46fd16811c910592ad171170771ab8" translate="yes" xml:space="preserve">
          <source>Records in Ember Data are persisted on a per-instance basis. Call &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#method_save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; on any instance of &lt;code&gt;DS.Model&lt;/code&gt; and it will make a network request.</source>
          <target state="translated">Ember Dataのレコードは、インスタンスごとに保持されます。コールは&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#method_save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;のいずれかのインスタンスで &lt;code&gt;DS.Model&lt;/code&gt; 、それがネットワーク要求を行います。</target>
        </trans-unit>
        <trans-unit id="ed751fe2f444ff45c31b40f1861107d5255a6d0f" translate="yes" xml:space="preserve">
          <source>Records in Ember Data are persisted on a per-instance basis. Call &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Model/methods#save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; on any instance of &lt;code&gt;Model&lt;/code&gt; and it will make a network request.</source>
          <target state="translated">Ember Dataのレコードは、インスタンスごとに保持されます。 &lt;code&gt;Model&lt;/code&gt; の任意のインスタンスで&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Model/methods#save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;を呼び出すと、ネットワーク要求が行われます。</target>
        </trans-unit>
        <trans-unit id="93f89c3ab4a799a6a0aab99eb1bb7100ea88724d" translate="yes" xml:space="preserve">
          <source>Records that already exist on the backend are updated using the HTTP &lt;code&gt;PATCH&lt;/code&gt; verb.</source>
          <target state="translated">バックエンドにすでに存在するレコードは、HTTP &lt;code&gt;PATCH&lt;/code&gt; 動詞を使用して更新されます。</target>
        </trans-unit>
        <trans-unit id="2f7c32c0b4917effc40dd0a0959efa8e648135b6" translate="yes" xml:space="preserve">
          <source>Records without an &lt;code&gt;id&lt;/code&gt; property are not considered embedded records, model instances must have an &lt;code&gt;id&lt;/code&gt; property to be used with Ember Data.</source>
          <target state="translated">なしレコード &lt;code&gt;id&lt;/code&gt; プロパティが埋め込まれたレコード考慮されていない、モデルインスタンスを持っている必要があります &lt;code&gt;id&lt;/code&gt; エンバーデータと一緒に使用するプロパティを。</target>
        </trans-unit>
        <trans-unit id="5ac9a9807e12ead40a070a8626218b2274db6816" translate="yes" xml:space="preserve">
          <source>Recovering from Rejection</source>
          <target state="translated">拒絶からの回復</target>
        </trans-unit>
        <trans-unit id="60e22121bdd0bc71cdb2bae2a3aa577006b2eae9" translate="yes" xml:space="preserve">
          <source>Redirecting</source>
          <target state="translated">Redirecting</target>
        </trans-unit>
        <trans-unit id="d0b1214393f95eb4505b13838fbc94ad949a9823" translate="yes" xml:space="preserve">
          <source>Refactor some components to use &lt;a href=&quot;../../components&quot;&gt;Glimmer Components&lt;/a&gt;. Good components to refactor first are those that do not rely on two-way bindings, computed properties, or observers. These components will serve as examples that your coworkers can refer back to.</source>
          <target state="translated">一部のコンポーネントをリファクタリングして、&lt;a href=&quot;../../components&quot;&gt;GlimmerComponents&lt;/a&gt;を使用します。最初にリファクタリングするのに適したコンポーネントは、双方向バインディング、計算されたプロパティ、またはオブザーバーに依存しないコンポーネントです。これらのコンポーネントは、同僚が参照できる例として役立ちます。</target>
        </trans-unit>
        <trans-unit id="699246f530a0f9bdddf368649ef2dcc19173ed67" translate="yes" xml:space="preserve">
          <source>Refactor some components to use &lt;a href=&quot;https://guides.emberjs.com/components/&quot;&gt;Glimmer Components&lt;/a&gt;. Good components to refactor first are those that do not rely on two-way bindings, computed properties, or observers. These components will serve as examples that your coworkers can refer back to.</source>
          <target state="translated">一部のコンポーネントをリファクタリングして、&lt;a href=&quot;https://guides.emberjs.com/components/&quot;&gt;GlimmerComponents&lt;/a&gt;を使用します。最初にリファクタリングするのに適したコンポーネントは、双方向バインディング、計算されたプロパティ、またはオブザーバーに依存しないコンポーネントです。これらのコンポーネントは、同僚が参照できる例として役立ちます。</target>
        </trans-unit>
        <trans-unit id="f398f3fd3d702745528a0e9f42da80b185589162" translate="yes" xml:space="preserve">
          <source>Refactoring checklist</source>
          <target state="translated">リファクタリングチェックリスト</target>
        </trans-unit>
        <trans-unit id="6bfa4764dfd3c083f396267379ee172ae1854a8d" translate="yes" xml:space="preserve">
          <source>Refer to documentation for &lt;code&gt;beforeModel&lt;/code&gt; for a description of transition-pausing semantics when a promise is returned from this hook.</source>
          <target state="translated">このフックからpromiseが返されたときの移行を一時停止するセマンティクスについては、 &lt;code&gt;beforeModel&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="99f62095529c6af5ce3c4c2976cf5e8e543250eb" translate="yes" xml:space="preserve">
          <source>References to other records should be done by ID. For example, if you have a model with a &lt;code&gt;hasMany&lt;/code&gt; relationship:</source>
          <target state="translated">他のレコードへの参照はIDで行う必要があります。たとえば、 &lt;code&gt;hasMany&lt;/code&gt; 関係を持つモデルがある場合：</target>
        </trans-unit>
        <trans-unit id="69f6bad51245a7a68b6a5d503ecf8f42a933df09" translate="yes" xml:space="preserve">
          <source>Reflexive Relations</source>
          <target state="translated">反射的な関係</target>
        </trans-unit>
        <trans-unit id="6224a939ef652c56dddd065c6b6575aface1416e" translate="yes" xml:space="preserve">
          <source>Refresh the model on this route and any child routes, firing the &lt;code&gt;beforeModel&lt;/code&gt;, &lt;code&gt;model&lt;/code&gt;, and &lt;code&gt;afterModel&lt;/code&gt; hooks in a similar fashion to how routes are entered when transitioning in from other route. The current route params (e.g. &lt;code&gt;article_id&lt;/code&gt;) will be passed in to the respective model hooks, and if a different model is returned, &lt;code&gt;setupController&lt;/code&gt; and associated route hooks will re-fire as well.</source>
          <target state="translated">このルートと子ルートのモデルを更新し、他のルートからの遷移時にルートが入力されるのと同じ方法で &lt;code&gt;beforeModel&lt;/code&gt; 、 &lt;code&gt;model&lt;/code&gt; 、および &lt;code&gt;afterModel&lt;/code&gt; フックを起動します。現在のルートパラメータ（ &lt;code&gt;article_id&lt;/code&gt; など）はそれぞれのモデルフックに渡され、別のモデルが返された場合、 &lt;code&gt;setupController&lt;/code&gt; および関連するルートフックも再起動されます。</target>
        </trans-unit>
        <trans-unit id="ca5db4fe93ba98fe1b576309acf2388052f2a36a" translate="yes" xml:space="preserve">
          <source>RegExp</source>
          <target state="translated">RegExp</target>
        </trans-unit>
        <trans-unit id="06b326b8df4964d11fe7f98ffc257e678212ac9e" translate="yes" xml:space="preserve">
          <source>Regardless of how the URL becomes set, the Ember router then maps the current URL to one or more route handlers. A route handler can do several things:</source>
          <target state="translated">URL がどのように設定されるかにかかわらず、Ember ルータは現在の URL を 1 つ以上のルートハンドラにマップします。ルートハンドラはいくつかのことを行うことができます。</target>
        </trans-unit>
        <trans-unit id="13ef3793fbf15d676e0da171536ccb7a8b55c72a" translate="yes" xml:space="preserve">
          <source>Regardless of the serializer used, this metadata is extracted from the response. You can then read it with &lt;code&gt;.get('meta')&lt;/code&gt;.</source>
          <target state="translated">使用されるシリアライザに関係なく、このメタデータは応答から抽出されます。その後、 &lt;code&gt;.get('meta')&lt;/code&gt; を使用してそれを読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="6bf45590a3ae91521f07c3e91845970cf7b6a81b" translate="yes" xml:space="preserve">
          <source>Regardless of the serializer used, this metadata is extracted from the response. You can then read it with &lt;code&gt;.meta&lt;/code&gt;.</source>
          <target state="translated">使用されるシリアライザーに関係なく、このメタデータは応答から抽出されます。その後、 &lt;code&gt;.meta&lt;/code&gt; を使用して読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="580b18a39e5b39765415c0eed123af6da265aa11" translate="yes" xml:space="preserve">
          <source>Register options for a particular factory.</source>
          <target state="translated">特定の工場のオプションを登録します。</target>
        </trans-unit>
        <trans-unit id="6291ba0522621d5582aa26e4decc87be7d141a60" translate="yes" xml:space="preserve">
          <source>Register/Unregister additional test helpers.</source>
          <target state="translated">追加のテストヘルパーを登録/解除します。</target>
        </trans-unit>
        <trans-unit id="57ac94516e6ba3226fa58ffc652e3e7312c91e5d" translate="yes" xml:space="preserve">
          <source>Registered factories are &lt;strong&gt;instantiated&lt;/strong&gt; by having &lt;code&gt;create&lt;/code&gt; called on them. Additionally they are &lt;strong&gt;singletons&lt;/strong&gt;, each time they are looked up they return the same instance.</source>
          <target state="translated">登録されたファクトリは、 &lt;code&gt;create&lt;/code&gt; を呼び出すことによって&lt;strong&gt;インスタンス化&lt;/strong&gt;されます。さらに、それらは&lt;strong&gt;シングルトンであり&lt;/strong&gt;、ルックアップされるたびに同じインスタンスを返します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="63c9b0772d57be72a0c5d903431a873fcdb8a6f2" translate="yes" xml:space="preserve">
          <source>Registering Already Instantiated Objects</source>
          <target state="translated">既にインスタンス化されたオブジェクトの登録</target>
        </trans-unit>
        <trans-unit id="4e4aa5ae30460fc62431c4dbebe42f4477bbe300" translate="yes" xml:space="preserve">
          <source>Registering Singletons vs. Non-Singletons</source>
          <target state="translated">シングルトンと非シングルトンの登録</target>
        </trans-unit>
        <trans-unit id="aba41c3a5d53b4b36fb1b8a0fdb902b0488d3a7a" translate="yes" xml:space="preserve">
          <source>Registering a Library</source>
          <target state="translated">ライブラリの登録</target>
        </trans-unit>
        <trans-unit id="0803d3a3d9f15e36c86ae2132d20124795a72459" translate="yes" xml:space="preserve">
          <source>Registers a factory that can be used for dependency injection (with &lt;code&gt;inject&lt;/code&gt;) or for service lookup. Each factory is registered with a full name including two parts: &lt;code&gt;type:name&lt;/code&gt;.</source>
          <target state="translated">依存関係の注入（ &lt;code&gt;inject&lt;/code&gt; を使用）またはサービスの検索に使用できるファクトリを登録します。各ファクトリーは、 &lt;code&gt;type:name&lt;/code&gt; の 2つの部分を含む完全な名前で登録されます。</target>
        </trans-unit>
        <trans-unit id="9f7e42ab82b7c92882f8e66014048c4f809e7e13" translate="yes" xml:space="preserve">
          <source>Registration keys have two segments split by a colon (&lt;code&gt;:&lt;/code&gt;). The first segment is the framework factory type, and the second is the name of the particular factory. Hence, the &lt;code&gt;index&lt;/code&gt; template has the key &lt;code&gt;template:index&lt;/code&gt;. Ember has several built-in factory types, such as &lt;code&gt;service&lt;/code&gt;, &lt;code&gt;route&lt;/code&gt;, &lt;code&gt;template&lt;/code&gt;, and &lt;code&gt;component&lt;/code&gt;.</source>
          <target state="translated">登録キーは、コロンで分割二つのセグメントを持っています（ &lt;code&gt;:&lt;/code&gt; ）。最初のセグメントはフレームワークファクトリタイプで、2番目のセグメントは特定のファクトリの名前です。したがって、 &lt;code&gt;index&lt;/code&gt; テンプレートには &lt;code&gt;template:index&lt;/code&gt; というキーがあります。Emberには、 &lt;code&gt;service&lt;/code&gt; 、 &lt;code&gt;route&lt;/code&gt; 、 &lt;code&gt;template&lt;/code&gt; 、 &lt;code&gt;component&lt;/code&gt; など、いくつかの組み込みのファクトリタイプがあります。</target>
        </trans-unit>
        <trans-unit id="74bb08da802a694a3d25bf4c3835ded58d2f6fc6" translate="yes" xml:space="preserve">
          <source>RegistryProxy</source>
          <target state="translated">RegistryProxy</target>
        </trans-unit>
        <trans-unit id="0a580368138bbedf511a06592637b0c30c98bec4" translate="yes" xml:space="preserve">
          <source>RegistryProxyMixin</source>
          <target state="translated">RegistryProxyMixin</target>
        </trans-unit>
        <trans-unit id="63a6a6ef6785a3cb9c1352a24ea4357d90e0f58f" translate="yes" xml:space="preserve">
          <source>RegistryProxyMixin  (private)</source>
          <target state="translated">RegistryProxyMixin (プライベート)</target>
        </trans-unit>
        <trans-unit id="0db97526891b25965235d31bf6cc3d8269a10d30" translate="yes" xml:space="preserve">
          <source>RegistryProxyMixin is used to provide public access to specific registry functionality.</source>
          <target state="translated">RegistryProxyMixin は、特定のレジストリ機能へのパブリックアクセスを提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="b4fc9c8d52106a97dfa0edae4264e66eed1c5b26" translate="yes" xml:space="preserve">
          <source>Regular npm packages</source>
          <target state="translated">通常のnpmパッケージ</target>
        </trans-unit>
        <trans-unit id="5f5b133edab536327af2bd039bb8a3451c0c686b" translate="yes" xml:space="preserve">
          <source>Rejected model promises halt transitions, but because promises are chainable, you can catch promise rejects within the &lt;code&gt;model&lt;/code&gt; hook itself and convert them into fulfills that won't halt the transition.</source>
          <target state="translated">拒否されたモデルのプロミスはトランジションを停止しますが、プロミスは連鎖可能であるため、 &lt;code&gt;model&lt;/code&gt; フック自体の中でプロミスリジェクトをキャッチし、トランジションを停止しないフルフィルメントに変換できます。</target>
        </trans-unit>
        <trans-unit id="4345bd81dfdc7be3c7d907680b6150899b9077a3" translate="yes" xml:space="preserve">
          <source>RelationshipSchema</source>
          <target state="translated">RelationshipSchema</target>
        </trans-unit>
        <trans-unit id="229981dd1dc44fcc3bf72493583bb63fa236cecf" translate="yes" xml:space="preserve">
          <source>Relationships</source>
          <target state="translated">Relationships</target>
        </trans-unit>
        <trans-unit id="7ebee1cc4a1ef9624d817353b136be3fe22ab7fc" translate="yes" xml:space="preserve">
          <source>Relationships are usually represented by ids to the record in the relationship. The related records can then be sideloaded in the response under a key for the type.</source>
          <target state="translated">リレーションシップは通常、リレーションシップ内のレコードへの ID で表されます。関連するレコードは、レスポンスでタイプのキーの下にサイドロードすることができます。</target>
        </trans-unit>
        <trans-unit id="d4abfee2fa163eac14a7ded7bb1fdab42b33f49a" translate="yes" xml:space="preserve">
          <source>Relationships as Promises</source>
          <target state="translated">約束としての人間関係</target>
        </trans-unit>
        <trans-unit id="34bad3622d708d6c624e5f19e7f5f5bb00dbbb2d" translate="yes" xml:space="preserve">
          <source>Relevant keywords for search.</source>
          <target state="translated">検索に関連するキーワード</target>
        </trans-unit>
        <trans-unit id="282e0c1116f45802ea510d978c4bb1aaeda3e638" translate="yes" xml:space="preserve">
          <source>Reload the record from the adapter.</source>
          <target state="translated">アダプタからレコードをリロードします。</target>
        </trans-unit>
        <trans-unit id="b9032b6f32f6e2281f4ae7c18e28a848286c6415" translate="yes" xml:space="preserve">
          <source>Reloading</source>
          <target state="translated">Reloading</target>
        </trans-unit>
        <trans-unit id="4d8114b387125160739c4384d9e4a3715ae113c8" translate="yes" xml:space="preserve">
          <source>Reloads all of the records in the manyArray. If the manyArray holds a relationship that was originally fetched using a links url Ember Data will revisit the original links url to repopulate the relationship.</source>
          <target state="translated">manyArray 内のすべてのレコードをリロードします。manyArrayが元々リンクURLを使用して取得されたリレーションを保持している場合、Ember Dataはリレーションを再配置するために元のリンクURLを再訪します。</target>
        </trans-unit>
        <trans-unit id="d6324829793579791ae457de1efbafabdce16f68" translate="yes" xml:space="preserve">
          <source>Reloads the record if it is already loaded. If the record is not loaded it will load the record via &lt;code&gt;store.findRecord&lt;/code&gt;</source>
          <target state="translated">レコードが既にロードされている場合は、レコードを再ロードします。レコードがロードされていない場合は、 &lt;code&gt;store.findRecord&lt;/code&gt; を介してレコードをロードします</target>
        </trans-unit>
        <trans-unit id="5bd1485c9bed37c1cf2bf2094bc180edee39e981" translate="yes" xml:space="preserve">
          <source>Reloads this has-many relationship.</source>
          <target state="translated">このhas-many関係をリロードします。</target>
        </trans-unit>
        <trans-unit id="59de02ca246fcb0ddd1b90d1b40ad31e348afc0d" translate="yes" xml:space="preserve">
          <source>Reloads this has-many relationship. This causes a request to the specified relationship link or reloads all items currently in the relationship.</source>
          <target state="translated">このhas-manyリレーションをリロードします。これにより、指定されたリレーションシップ・リンクへのリクエストが行われるか、現在リレーションシップにあるすべてのアイテムがリロードされます。</target>
        </trans-unit>
        <trans-unit id="f4276922880097708e01378b7c926ae47b0ca730" translate="yes" xml:space="preserve">
          <source>Relying on autoruns is not a rigorous or efficient way to use the run loop. Wrapping event handlers manually are preferred.</source>
          <target state="translated">オートランに頼るのは、ランループを使うための厳密で効率的な方法ではありません。イベントハンドラを手動でラップすることが望ましいです。</target>
        </trans-unit>
        <trans-unit id="4656fc9d7b003300b618f2b5e454b26fe556d1b6" translate="yes" xml:space="preserve">
          <source>Remember that &lt;code&gt;{{firstName}}&lt;/code&gt; and &lt;code&gt;{{lastName}}&lt;/code&gt; are bound data. That means if the value of one of those properties changes, the DOM will be updated automatically.</source>
          <target state="translated">&lt;code&gt;{{firstName}}&lt;/code&gt; と &lt;code&gt;{{lastName}}&lt;/code&gt; はバインドされたデータであることを忘れないでください。つまり、これらのプロパティのいずれかの値が変更されると、DOMは自動的に更新されます。</target>
        </trans-unit>
        <trans-unit id="685e29f4b662e2c0f1a0744e653894d1da2671ad" translate="yes" xml:space="preserve">
          <source>Remember that &lt;em&gt;only events&lt;/em&gt; should ever cause a state transition. You should never call &lt;code&gt;transitionTo()&lt;/code&gt; from outside a state's event handler. If you are tempted to do so, create a new event and send that to the state manager.</source>
          <target state="translated">&lt;em&gt;イベントのみ&lt;/em&gt;が状態遷移を引き起こすことを忘れないでください。状態のイベントハンドラーの外部から &lt;code&gt;transitionTo()&lt;/code&gt; を呼び出さないでください。もしそうしたいのなら、新しいイベントを作成し、それを状態マネージャーに送信してください。</target>
        </trans-unit>
        <trans-unit id="2772f3979b8490dfd9afc9103221e01e92eba84f" translate="yes" xml:space="preserve">
          <source>Remove a previously added helper method.</source>
          <target state="translated">以前に追加されたヘルパー・メソッドを削除します。</target>
        </trans-unit>
        <trans-unit id="6c924c7cc754f0fab9bce280a8c42f9e3cff21cd" translate="yes" xml:space="preserve">
          <source>Remove all elements from the array. This is useful if you want to reuse an existing array without having to recreate it.</source>
          <target state="translated">配列からすべての要素を削除します。これは、既存の配列を再作成せずに再利用したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="f6355dee47de1f32bf6f9799d78b6fee6bcd492e" translate="yes" xml:space="preserve">
          <source>Remove all occurrences of an object in the array.</source>
          <target state="translated">配列内のオブジェクトの出現回数をすべて削除します。</target>
        </trans-unit>
        <trans-unit id="152c1eaa085138cfa9d77a0942ce9534a3d76fe7" translate="yes" xml:space="preserve">
          <source>Remove an event listener</source>
          <target state="translated">イベントリスナーの削除</target>
        </trans-unit>
        <trans-unit id="4aa91b51bc12a3f5d89e5b53340b91ffc806cb11" translate="yes" xml:space="preserve">
          <source>Remove an object at the specified index using the &lt;code&gt;replace()&lt;/code&gt; primitive method. You can pass either a single index, or a start and a length.</source>
          <target state="translated">&lt;code&gt;replace()&lt;/code&gt; プリミティブメソッドを使用して、指定したインデックスにあるオブジェクトを削除します。単一のインデックス、または開始と長さのいずれかを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="b8553b7b30d27bd6e52896284d645032511283c5" translate="yes" xml:space="preserve">
          <source>Remove an observer you have previously registered on this object. Pass the same key, target, and method you passed to &lt;code&gt;addObserver()&lt;/code&gt; and your target will no longer receive notifications.</source>
          <target state="translated">このオブジェクトに以前に登録したオブザーバーを削除します。 &lt;code&gt;addObserver()&lt;/code&gt; に渡したものと同じキー、ターゲット、およびメソッドを渡すと、ターゲットは通知を受信しなくなります。</target>
        </trans-unit>
        <trans-unit id="1fff707f00d08e1f5dfe2689260813207706b7e3" translate="yes" xml:space="preserve">
          <source>Removes an array observer from the object if the observer is current registered. Calling this method multiple times with the same object will have no effect.</source>
          <target state="translated">オブザーバが現在登録されている場合、オブジェクトから配列オブザーバを削除します。同じオブジェクトでこのメソッドを複数回コールしても効果はありません。</target>
        </trans-unit>
        <trans-unit id="3723e36afe7e7b4392638a97cc108f54843aa4a5" translate="yes" xml:space="preserve">
          <source>Removes each object in the passed array from the receiver.</source>
          <target state="translated">渡された配列の各オブジェクトを受信機から削除する。</target>
        </trans-unit>
        <trans-unit id="18f9a7bd887e2ad04e12b6586614eadc5a5bf73f" translate="yes" xml:space="preserve">
          <source>Removes each object in the passed enumerable from the receiver.</source>
          <target state="translated">渡された列挙可能ファイル内の各オブジェクトを受信機から削除します。</target>
        </trans-unit>
        <trans-unit id="878c0c65b88d3bf26a4e986890bfb205e92a4a9b" translate="yes" xml:space="preserve">
          <source>Removes identifiers from the &lt;code&gt;RecordArray&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RecordArray&lt;/code&gt; から識別子を削除します。</target>
        </trans-unit>
        <trans-unit id="53ebb1fef0864af0278ae31f4ac0ec30dc3e82ad" translate="yes" xml:space="preserve">
          <source>Removing Objects</source>
          <target state="translated">オブジェクトの削除</target>
        </trans-unit>
        <trans-unit id="6d84c2db53b8c4b4553001a5c3d3b995a8fc5d9b" translate="yes" xml:space="preserve">
          <source>Removing Relationships</source>
          <target state="translated">関係性の削除</target>
        </trans-unit>
        <trans-unit id="9f698ccebc9b22f6dbcefd96182ce1c685d4fb77" translate="yes" xml:space="preserve">
          <source>Removing jQuery completely</source>
          <target state="translated">jQueryの完全削除</target>
        </trans-unit>
        <trans-unit id="041f6ca8e2d2dc5b856e1d078db74ba2885f4518" translate="yes" xml:space="preserve">
          <source>Rendering Performance</source>
          <target state="translated">レンダリング性能</target>
        </trans-unit>
        <trans-unit id="78e1949446438590a34392113638b5521c9fcf75" translate="yes" xml:space="preserve">
          <source>Rendering Tests</source>
          <target state="translated">レンダリングテスト</target>
        </trans-unit>
        <trans-unit id="0985a0ecfabc2231124bd8de762617aaeafd5bd5" translate="yes" xml:space="preserve">
          <source>Rendering a Template</source>
          <target state="translated">テンプレートのレンダリング</target>
        </trans-unit>
        <trans-unit id="67db7b0b091d6d767654968bfc75b8a1cf8456c3" translate="yes" xml:space="preserve">
          <source>Rendering tests (integration tests) check how a &lt;strong&gt;component looks and behaves&lt;/strong&gt;. Ember CLI creates rendering tests for &lt;a href=&quot;https://guides.emberjs.com/components/defining-a-component/&quot;&gt;components&lt;/a&gt; and &lt;a href=&quot;https://guides.emberjs.com/templates/writing-helpers/&quot;&gt;helpers&lt;/a&gt;.</source>
          <target state="translated">レンダリングテスト（統合テスト）は、&lt;strong&gt;コンポーネントの外観と動作を&lt;/strong&gt;チェックします。Ember CLIは、&lt;a href=&quot;https://guides.emberjs.com/components/defining-a-component/&quot;&gt;コンポーネント&lt;/a&gt;と&lt;a href=&quot;https://guides.emberjs.com/templates/writing-helpers/&quot;&gt;ヘルパーの&lt;/a&gt;レンダリングテストを作成します。</target>
        </trans-unit>
        <trans-unit id="f641e50ecb0ef4a6143f745a23c883acd88a466b" translate="yes" xml:space="preserve">
          <source>Rendering tests (previously known as integration tests)</source>
          <target state="translated">レンダリングテスト(旧称:統合テスト</target>
        </trans-unit>
        <trans-unit id="7e00afed9568e851f563f95aa0fc07a60bfd0ba4" translate="yes" xml:space="preserve">
          <source>Rendering tests let you test components using Ember's rendering engine. This means, a component created in your rendering test will behave as it would in the real app. You are guaranteed that the component will follow its lifecycle hooks. You can also interact with the component like an end-user would.</source>
          <target state="translated">レンダリングテストでは、Emberのレンダリングエンジンを使ってコンポーネントをテストすることができます。つまり、レンダリングテストで作成されたコンポーネントは、実際のアプリでも同じように動作するということです。コンポーネントがそのライフサイクルフックに従うことが保証されます。また、エンドユーザーが行うようにコンポーネントを操作することもできます。</target>
        </trans-unit>
        <trans-unit id="3bf2cfd82c10e27a15ca73d1aff040c4b9aabd81" translate="yes" xml:space="preserve">
          <source>Renders the view again. This will work regardless of whether the view is already in the DOM or not. If the view is in the DOM, the rendering process will be deferred to give bindings a chance to synchronize.</source>
          <target state="translated">ビューを再度レンダリングします。これは、ビューが既に DOM にあるかどうかに関係なく動作します。ビューが DOM にある場合、レンダリング処理は延期され、バインディングが同期する機会が与えられます。</target>
        </trans-unit>
        <trans-unit id="90fcf58a93bf37c133e53c27b59ac552b7f86095" translate="yes" xml:space="preserve">
          <source>Reopening Classes and Instances</source>
          <target state="translated">クラスとインスタンスの再開</target>
        </trans-unit>
        <trans-unit id="68fd737319a0b0cb58525f439e8f98a23d49c821" translate="yes" xml:space="preserve">
          <source>Replace all the receiver's content with content of the argument. If argument is an empty array receiver will be cleared.</source>
          <target state="translated">受信機の全ての内容を引数の内容で置き換える。引数が空の配列の場合、受信機はクリアされる。</target>
        </trans-unit>
        <trans-unit id="12205427cfdf5328a7ffdc0d916e8bdc2aeef4ed" translate="yes" xml:space="preserve">
          <source>Replacement for &lt;code&gt;Ember.RSVP.resolve&lt;/code&gt; The only difference is this uses an instance of &lt;code&gt;Ember.Test.Promise&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Ember.RSVP.resolve&lt;/code&gt; の置き換え唯一の違いは、これが &lt;code&gt;Ember.Test.Promise&lt;/code&gt; のインスタンスを使用することです。</target>
        </trans-unit>
        <trans-unit id="38df34ec5043e01b14b58ab782972627050d5e4e" translate="yes" xml:space="preserve">
          <source>Replaces underscores, spaces, or camelCase with dashes.</source>
          <target state="translated">アンダースコア、スペース、またはキャメルケースをダッシュで置き換えます。</target>
        </trans-unit>
        <trans-unit id="551c187c4562e07235299d81c81fb5553d3be6b8" translate="yes" xml:space="preserve">
          <source>Replacing history entries</source>
          <target state="translated">履歴エントリの入れ替え</target>
        </trans-unit>
        <trans-unit id="db33df2b86e0548c5026c0e2feca083dd46c73b8" translate="yes" xml:space="preserve">
          <source>Reporting a problem</source>
          <target state="translated">問題の報告</target>
        </trans-unit>
        <trans-unit id="5a3259ad102284e341592f2a49ccbc5935cfc92a" translate="yes" xml:space="preserve">
          <source>Represents a list of records whose membership is determined by the store. As records are created, loaded, or modified, the store evaluates them to determine if they should be part of the record array.</source>
          <target state="translated">レコードのリストを表し、そのメンバシップはストアによって決定されます。レコードが作成、ロード、変更されると、ストアはそれらのレコードを評価してレコード配列に含まれるべきかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="97471577bb242ec38248e3746d99aa261e14fdfd" translate="yes" xml:space="preserve">
          <source>Represents an ordered list of records whose order and membership is determined by the adapter. For example, a query sent to the adapter may trigger a search on the server, whose results would be loaded into an instance of the &lt;code&gt;AdapterPopulatedRecordArray&lt;/code&gt;.</source>
          <target state="translated">順序とメンバーシップがアダプターによって決定されるレコードの順序付きリストを表します。たとえば、アダプターに送信されたクエリはサーバーで検索をトリガーし、その結果は &lt;code&gt;AdapterPopulatedRecordArray&lt;/code&gt; のインスタンスに読み込まれます。</target>
        </trans-unit>
        <trans-unit id="f983e24377129faa7d20942c23e23254dfe09a06" translate="yes" xml:space="preserve">
          <source>Represents the URL of the root of the application, often '/'. This prefix is assumed on all routes defined on this router.</source>
          <target state="translated">アプリケーションのルートの URL を表します。このプレフィックスは、このルータで定義されたすべてのルートで想定されます。</target>
        </trans-unit>
        <trans-unit id="99a531ee74a48c9f139d54302917c31212c36e9a" translate="yes" xml:space="preserve">
          <source>Represents the model's class name as a string. This can be used to look up the model's class name through &lt;code&gt;DS.Store&lt;/code&gt;'s modelFor method.</source>
          <target state="translated">モデルのクラス名を文字列として表します。これは、 &lt;code&gt;DS.Store&lt;/code&gt; のmodelForメソッドを介してモデルのクラス名を検索するために使用できます。</target>
        </trans-unit>
        <trans-unit id="46266c1e4f3d4db7ab26dd4974b725ba8d500a8c" translate="yes" xml:space="preserve">
          <source>Represents the model's class name as a string. This can be used to look up the model's class name through &lt;code&gt;Store&lt;/code&gt;'s modelFor method.</source>
          <target state="translated">モデルのクラス名を文字列として表します。これは、 &lt;code&gt;Store&lt;/code&gt; のmodelForメソッドを介してモデルのクラス名を検索するために使用できます。</target>
        </trans-unit>
        <trans-unit id="1a4d728aaa71b622cd6daaefae1957da6eba6abf" translate="yes" xml:space="preserve">
          <source>Request Errors</source>
          <target state="translated">リクエストエラー</target>
        </trans-unit>
        <trans-unit id="ddf10a02bb0396e1c0bcad5c8cea1e4177da9463" translate="yes" xml:space="preserve">
          <source>Request Flow</source>
          <target state="translated">リクエストフロー</target>
        </trans-unit>
        <trans-unit id="6a446bfa5dd57c064db5b7db62b9216d2d4fe7f6" translate="yes" xml:space="preserve">
          <source>Requests for &lt;code&gt;person&lt;/code&gt; would now target &lt;code&gt;/person/1&lt;/code&gt;. Requests for &lt;code&gt;user-profile&lt;/code&gt; would now target &lt;code&gt;/user_profile/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;person&lt;/code&gt; のリクエストは &lt;code&gt;/person/1&lt;/code&gt; をターゲットにするようになりました。 &lt;code&gt;user-profile&lt;/code&gt; のリクエストは &lt;code&gt;/user_profile/1&lt;/code&gt; をターゲットにするようになりました。</target>
        </trans-unit>
        <trans-unit id="e23fb7f5045063dea88f661c92bdf8761f6d2db8" translate="yes" xml:space="preserve">
          <source>Requests for &lt;code&gt;person&lt;/code&gt; would now target &lt;code&gt;http://emberjs.com/api/1/people/1&lt;/code&gt;.</source>
          <target state="translated">以下のための要求 &lt;code&gt;person&lt;/code&gt; 今標的とする &lt;code&gt;http://emberjs.com/api/1/people/1&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="e8662a972a8167c817a2396b8c370f76230f2940" translate="yes" xml:space="preserve">
          <source>Requests for &lt;code&gt;person&lt;/code&gt; would now target &lt;code&gt;https://api.emberjs.com/api/1/people/1&lt;/code&gt;.</source>
          <target state="translated">以下のための要求 &lt;code&gt;person&lt;/code&gt; 今標的とする &lt;code&gt;https://api.emberjs.com/api/1/people/1&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="dbed8372b111ece5b7dea26366e56a504eeb78ba" translate="yes" xml:space="preserve">
          <source>Requests for &lt;code&gt;person&lt;/code&gt; would now target &lt;code&gt;https://api.example.com/people/1&lt;/code&gt;.</source>
          <target state="translated">以下のための要求 &lt;code&gt;person&lt;/code&gt; 今標的とする &lt;code&gt;https://api.example.com/people/1&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="39adf7b336b15481b1d246e2d2e38d4faf23c063" translate="yes" xml:space="preserve">
          <source>Requests for the &lt;code&gt;Person&lt;/code&gt; model would now target &lt;code&gt;/api/1/people/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Person&lt;/code&gt; モデルのリクエストは、 &lt;code&gt;/api/1/people/1&lt;/code&gt; をターゲットにするようになりました。</target>
        </trans-unit>
        <trans-unit id="b5a6ae7596913135d59e602a8445cd7c591187b4" translate="yes" xml:space="preserve">
          <source>Requests for the &lt;code&gt;Post&lt;/code&gt; model would now target &lt;code&gt;/api/1/post/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Post&lt;/code&gt; モデルのリクエストは &lt;code&gt;/api/1/post/&lt;/code&gt; ターゲットにするようになりました。</target>
        </trans-unit>
        <trans-unit id="47352f3ca02fa7dd1203791432c99adf3ee88922" translate="yes" xml:space="preserve">
          <source>Requests for the &lt;code&gt;Post&lt;/code&gt; model would now target &lt;code&gt;https://api.example.com/post/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Post&lt;/code&gt; モデルのリクエストは、 &lt;code&gt;https://api.example.com/post/&lt;/code&gt; をターゲットにするようになりました。</target>
        </trans-unit>
        <trans-unit id="507eba662c0bdfc5e6dcd2e527c591cbe849d43c" translate="yes" xml:space="preserve">
          <source>Requests for the &lt;code&gt;person&lt;/code&gt; model would now target &lt;code&gt;/api/1/people/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;person&lt;/code&gt; モデルのリクエストは、 &lt;code&gt;/api/1/people/1&lt;/code&gt; をターゲットにするようになりました。</target>
        </trans-unit>
        <trans-unit id="c77ddbd00374e8cd6c0cc4272b91fdfbb3d601e3" translate="yes" xml:space="preserve">
          <source>Requests for the &lt;code&gt;person&lt;/code&gt; model would now target &lt;code&gt;https://api.example.com/people/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;person&lt;/code&gt; モデルのリクエストは &lt;code&gt;https://api.example.com/people/1&lt;/code&gt; をターゲットにするようになりました。</target>
        </trans-unit>
        <trans-unit id="e190e5d005c3ed64981ff2ea4572bff204aed4b0" translate="yes" xml:space="preserve">
          <source>Requests in Components</source>
          <target state="translated">コンポーネントでの要求</target>
        </trans-unit>
        <trans-unit id="51c8ad35eaad89bb264b06a831b0f1c6c203b261" translate="yes" xml:space="preserve">
          <source>Requests in Services</source>
          <target state="translated">サービスへの要望</target>
        </trans-unit>
        <trans-unit id="a1c0056db49c0064449972ec5b173f83fa648732" translate="yes" xml:space="preserve">
          <source>Requests in a Route's &lt;code&gt;model&lt;/code&gt; hook</source>
          <target state="translated">ルートの &lt;code&gt;model&lt;/code&gt; フックでのリクエスト</target>
        </trans-unit>
        <trans-unit id="bd278c9727c891a2d697427de980af3125d812f7" translate="yes" xml:space="preserve">
          <source>Requests in services have the same drawbacks as Components. Functions and state in a Service can be used almost anywhere in the app.</source>
          <target state="translated">サービス内のリクエストには、コンポーネントと同じような欠点があります。サービス内の関数や状態は、アプリ内のほとんどの場所で使用できます。</target>
        </trans-unit>
        <trans-unit id="ef47fdb02ee01d8a4e88ea5e1d94c9f92f4cd4c9" translate="yes" xml:space="preserve">
          <source>Required &lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 必要</target>
        </trans-unit>
        <trans-unit id="7ea99c4b89bd3e73a15c7dfe3ef60bd94d5f0728" translate="yes" xml:space="preserve">
          <source>Required &lt;code&gt;this&lt;/code&gt; in templates</source>
          <target state="translated">テンプレートで &lt;code&gt;this&lt;/code&gt; が必要</target>
        </trans-unit>
        <trans-unit id="7d1ce0dbae3dcf8f899bd4893d4663dda4cf2c7d" translate="yes" xml:space="preserve">
          <source>Rerun your test suite as you make updates to your workflow file and you should validate that your deprecations are gone. Once that is completed, you can proceed with enhancing your application without the sea of deprecation warnings clouding your log.</source>
          <target state="translated">ワークフローファイルを更新しながらテストスイートを再実行して、非推奨版がなくなっていることを確認してください。これが完了したら、非推奨の警告がログを曇らせることなく、アプリケーションの拡張を進めることができます。</target>
        </trans-unit>
        <trans-unit id="1459337c0ecc835d1d2041391957329cf96ed92d" translate="yes" xml:space="preserve">
          <source>Reset the application. This is typically used only in tests. It cleans up the application in the following order:</source>
          <target state="translated">アプリケーションをリセットします。これは通常、テストでのみ使用されます。以下の順序でアプリケーションをクリーンアップします。</target>
        </trans-unit>
        <trans-unit id="9799189643ce709a24fb886e74561834ed7c1a6f" translate="yes" xml:space="preserve">
          <source>Resetting Presentation State on Attribute Change with &lt;code&gt;didUpdateAttrs&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;didUpdateAttrs&lt;/code&gt; を使用した属性変更時のプレゼンテーション状態のリセット</target>
        </trans-unit>
        <trans-unit id="bed023e0df790a0e66439a5a1e1a05337670d105" translate="yes" xml:space="preserve">
          <source>Respecting the URL results in better user experience</source>
          <target state="translated">URLを尊重することで、より良いユーザーエクスペリエンスが得られる</target>
        </trans-unit>
        <trans-unit id="14de0ea979680e88715bf0fb25e6a27c36244df1" translate="yes" xml:space="preserve">
          <source>Responding to Browser Events</source>
          <target state="translated">ブラウザイベントへの対応</target>
        </trans-unit>
        <trans-unit id="86514db4ea326cca476f8161d03fbe8c00199720" translate="yes" xml:space="preserve">
          <source>Responding to user interactions</source>
          <target state="translated">ユーザーインタラクションへの対応</target>
        </trans-unit>
        <trans-unit id="38ad8517f1dfe99e4d87fbdbdd90a3a14b28b872" translate="yes" xml:space="preserve">
          <source>Restrictions</source>
          <target state="translated">Restrictions</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="02d55b2baf2725bcbe0634735b4de01c005aa3e5" translate="yes" xml:space="preserve">
          <source>Results in:</source>
          <target state="translated">結果が出ています。</target>
        </trans-unit>
        <trans-unit id="5dd10def5c86f482d9171ac3d500c6b0ae25364b" translate="yes" xml:space="preserve">
          <source>Resumes a test paused by &lt;code&gt;pauseTest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pauseTest&lt;/code&gt; によって一時停止されたテストを再開します。</target>
        </trans-unit>
        <trans-unit id="ea776300d8aba3829da1ffb0408566a09e4e259f" translate="yes" xml:space="preserve">
          <source>Retries a previously-aborted transition (making sure to abort the transition if it's still active). Returns a new transition that represents the new attempt to transition.</source>
          <target state="translated">以前に中止されたトランジションを再試行します(トランジションがまだアクティブな場合は必ず中止します)。新たなトランジションの試みを表す新しいトランジションを返します。</target>
        </trans-unit>
        <trans-unit id="c136ec01ad8662f631bfe9cf5dd76daebe9695f1" translate="yes" xml:space="preserve">
          <source>Retrieves the value of a property from an Object, or a default value in the case that the property returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">オブジェクトからプロパティの値を取得します。プロパティが &lt;code&gt;undefined&lt;/code&gt; を返す場合はデフォルト値を取得します。</target>
        </trans-unit>
        <trans-unit id="97f8358f1a7527129a6026137d59d3b142bea4da" translate="yes" xml:space="preserve">
          <source>Retrieves the value of a property from the object.</source>
          <target state="translated">オブジェクトからプロパティの値を取得します。</target>
        </trans-unit>
        <trans-unit id="c2507d71833d1926fc8ca2bfcba6650b2356a523" translate="yes" xml:space="preserve">
          <source>Retrieves the value of a property, or a default value in the case that the property returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">プロパティの値、またはプロパティが &lt;code&gt;undefined&lt;/code&gt; を返す場合のデフォルト値を取得します。</target>
        </trans-unit>
        <trans-unit id="c9b109a01cbb856b78796ff1f23e3ed037d6d59e" translate="yes" xml:space="preserve">
          <source>Retrieving Multiple Records</source>
          <target state="translated">複数のレコードを取得する</target>
        </trans-unit>
        <trans-unit id="f585070c87519f1f46d5aa282e338ef3ef4cffe8" translate="yes" xml:space="preserve">
          <source>Retrieving Related Model Records</source>
          <target state="translated">関連モデルの記録を検索する</target>
        </trans-unit>
        <trans-unit id="5763b513c21e726fa47e619aeec98e7a63c47120" translate="yes" xml:space="preserve">
          <source>Retrieving Related Records</source>
          <target state="translated">関連記録の検索</target>
        </trans-unit>
        <trans-unit id="f42b92f006ec325e98a3d7f40334441d8ddf5a15" translate="yes" xml:space="preserve">
          <source>Retrieving Specific Fields by Type</source>
          <target state="translated">タイプ別に特定のフィールドを検索する</target>
        </trans-unit>
        <trans-unit id="3ea11ae149c9ff5b4ef4d8e06d23a82d3df6baab" translate="yes" xml:space="preserve">
          <source>Retrieving a Single Record</source>
          <target state="translated">単一レコードの取得</target>
        </trans-unit>
        <trans-unit id="9cd9632ea5c6744340a949d9498150ea0dd8d956" translate="yes" xml:space="preserve">
          <source>Return a specific registered option for a particular factory.</source>
          <target state="translated">特定の工場の特定の登録済みオプションを返します。</target>
        </trans-unit>
        <trans-unit id="29ebe6c216062fb1ce4cf798a7f1e3baeab920a9" translate="yes" xml:space="preserve">
          <source>Return registered options for a particular factory.</source>
          <target state="translated">特定の工場の登録済みオプションを返します。</target>
        </trans-unit>
        <trans-unit id="26b22776384430c648a6b859ff17b84f59ea040d" translate="yes" xml:space="preserve">
          <source>Return the new cumulative value.</source>
          <target state="translated">新しい累積値を返します。</target>
        </trans-unit>
        <trans-unit id="edee4fec8219eea58f41fb844b109d44f9727045" translate="yes" xml:space="preserve">
          <source>Return the registered options for all factories of a type.</source>
          <target state="translated">ある型のすべての工場に対して登録されているオプションを返します。</target>
        </trans-unit>
        <trans-unit id="3f2c37eae2ce5f96df692aaeedf57af072ef9d9e" translate="yes" xml:space="preserve">
          <source>Return to Step 1</source>
          <target state="translated">ステップ1に戻る</target>
        </trans-unit>
        <trans-unit id="86661c3a6c5cd6befa4e37cc90df459f0d9bf691" translate="yes" xml:space="preserve">
          <source>Return value from invoking the passed function. Please note, when called within an existing loop, no return value is possible.</source>
          <target state="translated">渡された関数を呼び出したときの戻り値です。既存のループ内で呼び出された場合は、戻り値が得られないので注意してください。</target>
        </trans-unit>
        <trans-unit id="19e15fef1135e42fb3ddbd944fd5ba42b4c44461" translate="yes" xml:space="preserve">
          <source>Return values from a component with &lt;code&gt;yield&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; あるコンポーネントからの戻り値</target>
        </trans-unit>
        <trans-unit id="f303cd37013bf328626e038174b28974872e0cbc" translate="yes" xml:space="preserve">
          <source>Returning a &lt;code&gt;DS.InvalidError&lt;/code&gt; from this method will cause the record to transition into the &lt;code&gt;invalid&lt;/code&gt; state and make the &lt;code&gt;errors&lt;/code&gt; object available on the record. When returning an &lt;code&gt;DS.InvalidError&lt;/code&gt; the store will attempt to normalize the error data returned from the server using the serializer's &lt;code&gt;extractErrors&lt;/code&gt; method.</source>
          <target state="translated">このメソッドから &lt;code&gt;DS.InvalidError&lt;/code&gt; を返すと、レコードが &lt;code&gt;invalid&lt;/code&gt; 状態に遷移し、 &lt;code&gt;errors&lt;/code&gt; オブジェクトがレコードで使用できるようになります。 &lt;code&gt;DS.InvalidError&lt;/code&gt; を返すとき、ストアは &lt;code&gt;extractErrors&lt;/code&gt; のextractErrorsメソッドを使用してサーバーから返されたエラーデータを正規化しようとします。</target>
        </trans-unit>
        <trans-unit id="d76aa8210cf0dafd3f5542c252c74215e7c0d82e" translate="yes" xml:space="preserve">
          <source>Returning a &lt;code&gt;InvalidError&lt;/code&gt; from this method will cause the record to transition into the &lt;code&gt;invalid&lt;/code&gt; state and make the &lt;code&gt;errors&lt;/code&gt; object available on the record. When returning an &lt;code&gt;InvalidError&lt;/code&gt; the store will attempt to normalize the error data returned from the server using the serializer's &lt;code&gt;extractErrors&lt;/code&gt; method.</source>
          <target state="translated">このメソッドから &lt;code&gt;InvalidError&lt;/code&gt; を返すと、レコードが &lt;code&gt;invalid&lt;/code&gt; 状態に遷移し、 &lt;code&gt;errors&lt;/code&gt; オブジェクトがレコードで使用できるようになります。返すとき &lt;code&gt;InvalidError&lt;/code&gt; をストアは、シリアライザの使用して、サーバーから返されたエラーデータ正規化しようとします &lt;code&gt;extractErrors&lt;/code&gt; の方法を。</target>
        </trans-unit>
        <trans-unit id="cee47736237de7f8bb7ea807b0ee3fa5be36f81b" translate="yes" xml:space="preserve">
          <source>Returns -1 if no match is found.</source>
          <target state="translated">一致しない場合は-1を返します。</target>
        </trans-unit>
        <trans-unit id="5eb7b0965957835e626048810b6a5e9b19ca1f4e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;routeName/models/queryParams&lt;/code&gt; is the active route, where &lt;code&gt;models&lt;/code&gt; and &lt;code&gt;queryParams&lt;/code&gt; are optional. See &lt;a href=&quot;api/ember/release/classes/route/methods#model&quot;&gt;model&lt;/a&gt; and &lt;a href=&quot;https://api.emberjs.com/api/ember/3.7/classes/Route/properties#queryParams&quot;&gt;queryParams&lt;/a&gt; for more information about these arguments.</source>
          <target state="translated">戻り値 &lt;code&gt;true&lt;/code&gt; の場合 &lt;code&gt;routeName/models/queryParams&lt;/code&gt; アクティブルートであり、 &lt;code&gt;models&lt;/code&gt; と &lt;code&gt;queryParams&lt;/code&gt; はオプションです。これらの引数の詳細については、&lt;a href=&quot;api/ember/release/classes/route/methods#model&quot;&gt;model&lt;/a&gt;および&lt;a href=&quot;https://api.emberjs.com/api/ember/3.7/classes/Route/properties#queryParams&quot;&gt;queryParams&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="85b812af2c70b17fb4a0e4704404e2e2663bc781" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the passed function returns true for any item in the enumeration.</source>
          <target state="translated">渡された関数が列挙内のいずれかのアイテムに対してtrueを返す場合、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f60ba937bfb0a86b00fcc64b5fa06c54faa1208f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the passed function returns true for every item in the enumeration. This corresponds with the &lt;code&gt;Array.prototype.every()&lt;/code&gt; method defined in ES5.</source>
          <target state="translated">渡された関数が列挙内のすべての項目に対してtrueを返す場合、 &lt;code&gt;true&lt;/code&gt; を返します。これは、ES5で定義されている &lt;code&gt;Array.prototype.every()&lt;/code&gt; メソッドに対応しています。</target>
        </trans-unit>
        <trans-unit id="0ca1e9e1279673b31d55774d9185dc03beed7b19" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the passed function returns true for every item in the enumeration. This corresponds with the &lt;code&gt;every()&lt;/code&gt; method in JavaScript 1.6.</source>
          <target state="translated">渡された関数が列挙内のすべてのアイテムに対してtrueを返す場合、 &lt;code&gt;true&lt;/code&gt; を返します。これはJavaScript 1.6の &lt;code&gt;every()&lt;/code&gt; メソッドに対応しています。</target>
        </trans-unit>
        <trans-unit id="48e8bff0730db4951905ce3907f251ae28d439c0" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the passed object can be found in the array. This method is a Polyfill for ES 2016 Array.includes. If no &lt;code&gt;startAt&lt;/code&gt; argument is given, the starting location to search is 0. If it's negative, searches from the index of &lt;code&gt;this.length + startAt&lt;/code&gt; by asc.</source>
          <target state="translated">渡されたオブジェクトが配列に &lt;code&gt;true&lt;/code&gt; 場合はtrueを返します。このメソッドは、ES 2016 Array.includesのポリフィルです。 &lt;code&gt;startAt&lt;/code&gt; 引数が指定されていない場合、検索の開始位置は0です。それが負の場合は、 &lt;code&gt;this.length + startAt&lt;/code&gt; インデックスからasc で検索します。</target>
        </trans-unit>
        <trans-unit id="97d2d4c6d57998537e2ece3978bd7eda8781ffbc" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the passed object can be found in the enumerable.</source>
          <target state="translated">渡されたオブジェクトが列挙型に &lt;code&gt;true&lt;/code&gt; 場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="59ba394095833f93ec360f4386b9490268271009" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the passed property resolves to the value of the second argument for all items in the array. This method is often simpler/faster than using a callback.</source>
          <target state="translated">渡されたプロパティが配列内のすべての項目の2番目の引数の値に解決される場合、 &lt;code&gt;true&lt;/code&gt; を返します。このメソッドは、多くの場合、コールバックを使用するよりも簡単/高速です。</target>
        </trans-unit>
        <trans-unit id="5e0cff20c4e03c114bb589de045dad56c4977ab9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the passed property resolves to the value of the second argument for all items in the enumerable. This method is often simpler/faster than using a callback.</source>
          <target state="translated">渡されたプロパティが列挙可能なすべてのアイテムの2番目の引数の値に解決される場合は &lt;code&gt;true&lt;/code&gt; を返します。この方法は、多くの場合、コールバックを使用するよりも簡単/高速です。</target>
        </trans-unit>
        <trans-unit id="19694ec1d241ea3ac0257cd094f61a4584115eaf" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the passed property resolves to the value of the second argument for any item in the array. This method is often simpler/faster than using a callback.</source>
          <target state="translated">渡されたプロパティが配列内の任意の項目の2番目の引数の値に解決される場合、 &lt;code&gt;true&lt;/code&gt; を返します。このメソッドは、多くの場合、コールバックを使用するよりも簡単/高速です。</target>
        </trans-unit>
        <trans-unit id="785710d311908f0da91ca0999d02fda0b1b3f90e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the passed property resolves to the value of the second argument for any item in the enumerable. This method is often simpler/faster than using a callback.</source>
          <target state="translated">渡されたプロパティが列挙可能なアイテムの2番目の引数の値に解決される場合は &lt;code&gt;true&lt;/code&gt; を返します。この方法は、多くの場合、コールバックを使用するよりも簡単/高速です。</target>
        </trans-unit>
        <trans-unit id="125bbdbd31c014a3c75ab73874ead547c5f9f32b" translate="yes" xml:space="preserve">
          <source>Returns a consistent type for the passed object.</source>
          <target state="translated">渡されたオブジェクトの一貫した型を返します。</target>
        </trans-unit>
        <trans-unit id="d5e31a7796519c4db2aefafeb16832aabfafcd9e" translate="yes" xml:space="preserve">
          <source>Returns a copy of the array with all &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; elements removed.</source>
          <target state="translated">すべての &lt;code&gt;null&lt;/code&gt; および &lt;code&gt;undefined&lt;/code&gt; 要素が削除された配列のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="2b92287589187fde80aa3c9745f11bf4566c0019" translate="yes" xml:space="preserve">
          <source>Returns a hash containing the parameters of an ancestor route.</source>
          <target state="translated">祖先ルートのパラメータを含むハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="b4ada03057da551460d8be699ac1083dbb48fb4c" translate="yes" xml:space="preserve">
          <source>Returns a jQuery object for this component's element. If you pass in a selector string, this method will return a jQuery object, using the current element as its buffer.</source>
          <target state="translated">このコンポーネントの要素の jQuery オブジェクトを返します。セレクタ文字列を渡した場合、このメソッドは、現在の要素をバッファとして使用して jQuery オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="2703351044d1524246ab647abe9d450da6a2453f" translate="yes" xml:space="preserve">
          <source>Returns a jQuery object for this component's element. If you pass in a selector string, this method will return a jQuery object, using the current element as its buffer. For example, calling &lt;code&gt;component.$('li')&lt;/code&gt; will return a jQuery object containing all of the &lt;code&gt;li&lt;/code&gt; elements inside the DOM element of this component.</source>
          <target state="translated">このコンポーネントの要素のjQueryオブジェクトを返します。セレクター文字列を渡すと、このメソッドは現在の要素をバッファーとして使用してjQueryオブジェクトを返します。たとえば、 &lt;code&gt;component.$('li')&lt;/code&gt; を呼び出すと、このコンポーネントのDOM要素内のすべての &lt;code&gt;li&lt;/code&gt; 要素を含むjQueryオブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="8a47cf2c5ff6ea84daf5839f6f90517c7d1d2ada" translate="yes" xml:space="preserve">
          <source>Returns a jQuery object for this view's element. If you pass in a selector string, this method will return a jQuery object, using the current element as its buffer.</source>
          <target state="translated">このビューの要素の jQuery オブジェクトを返します。セレクタ文字列を渡すと、このメソッドは現在の要素をバッファとして使用して jQuery オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="4ed70d04f3ee7207358048712104fcd24783ff91" translate="yes" xml:space="preserve">
          <source>Returns a new array that contains only items containing a unique property value. The default implementation returns an array regardless of the receiver type.</source>
          <target state="translated">一意のプロパティ値を含むアイテムのみを含む新しい配列を返します。デフォルトの実装では、レシーバのタイプにかかわらず、配列を返します。</target>
        </trans-unit>
        <trans-unit id="3ee49ab71f088094d7a6ef65373cff6aea3b838c" translate="yes" xml:space="preserve">
          <source>Returns a new array that contains only unique values. The default implementation returns an array regardless of the receiver type.</source>
          <target state="translated">一意の値のみを含む新しい配列を返します。デフォルトの実装では、レシーバのタイプにかかわらず、配列を返します。</target>
        </trans-unit>
        <trans-unit id="f535e0230de6304fca3d92bc4f17beb2ef84342a" translate="yes" xml:space="preserve">
          <source>Returns a new array that excludes the passed value. The default implementation returns an array regardless of the receiver type. If the receiver does not contain the value it returns the original array.</source>
          <target state="translated">渡された値を除いた新しい配列を返します。デフォルトの実装では、レシーバのタイプに関わらず、配列を返します。レシーバに値が含まれていない場合は、元の配列を返します。</target>
        </trans-unit>
        <trans-unit id="926fcdedb193ee950b728d011e0592df4e16f0a0" translate="yes" xml:space="preserve">
          <source>Returns a new array that is a slice of the receiver. This implementation uses the observable array methods to retrieve the objects for the new slice.</source>
          <target state="translated">受信機のスライスである新しい配列を返します。この実装では、観測可能な配列メソッドを使用して、新しいスライスのオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="332a3f58f30615456cdeb690333df10511405cb9" translate="yes" xml:space="preserve">
          <source>Returns a new array with all of the items in the enumeration that the provided callback function returns true for. This method corresponds to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Array.prototype.filter()&lt;/a&gt;.</source>
          <target state="translated">提供されたコールバック関数がtrueを返す列挙内のすべての項目を含む新しい配列を返します。このメソッドは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Array.prototype.filter（）に&lt;/a&gt;対応します。</target>
        </trans-unit>
        <trans-unit id="f490c002b2bf76e65c1ef0218a8c11e0b2f0ba00" translate="yes" xml:space="preserve">
          <source>Returns a new enumerable that contains only items containing a unique property value. The default implementation returns an array regardless of the receiver type.</source>
          <target state="translated">一意なプロパティ値を含む項目のみを含む新しい列挙可能な値を返します。デフォルトの実装では、レシーバの型に関係なく配列を返します。</target>
        </trans-unit>
        <trans-unit id="bdd3af7ab7b2da54382d05f7328e37ab891fb2d3" translate="yes" xml:space="preserve">
          <source>Returns a new enumerable that contains only unique values. The default implementation returns an array regardless of the receiver type.</source>
          <target state="translated">一意な値のみを含む新しい enumerable を返します。デフォルトの実装では、レシーバの型に関係なく配列を返します。</target>
        </trans-unit>
        <trans-unit id="31c2891af58e7eda6b60e3cadcd876d663730e1c" translate="yes" xml:space="preserve">
          <source>Returns a new enumerable that excludes the passed value. The default implementation returns an array regardless of the receiver type. If the receiver does not contain the value it returns the original enumerable.</source>
          <target state="translated">渡された値を除いた新しい enumerable を返します。デフォルトの実装では、レシーバの型に関係なく配列を返します。レシーバに値が含まれていない場合は、元の列挙可能配列を返します。</target>
        </trans-unit>
        <trans-unit id="79b5522f2b1ae4f90cc466e02013320e2a3ad2b8" translate="yes" xml:space="preserve">
          <source>Returns a polymorphic relationship formatted as a JSON-API &quot;relationship object&quot;.</source>
          <target state="translated">JSON-API &quot;relationshipオブジェクト &quot;としてフォーマットされた多相関係を返します。</target>
        </trans-unit>
        <trans-unit id="da5d72f3f51387291e0c92700f8ccbb22c667d59" translate="yes" xml:space="preserve">
          <source>Returns a promise that is fulfilled when all the given promises have been fulfilled, or rejected if any of them become rejected. The returned promise is fulfilled with a hash that has the same key names as the &lt;code&gt;promises&lt;/code&gt; object argument. If any of the values in the object are not promises, they will simply be copied over to the fulfilled object.</source>
          <target state="translated">指定されたすべてのプロミスが満たされている場合に満たされるプロミスを返します。それらのいずれかが拒否された場合は拒否されます。返されたpromiseは、 &lt;code&gt;promises&lt;/code&gt; オブジェクトの引数と同じキー名を持つハッシュで処理されます。オブジェクトの値のいずれかがpromiseでない場合、それらは単純に実現されたオブジェクトにコピーされます。</target>
        </trans-unit>
        <trans-unit id="82c815d0ca08ef29364305f689eaaae5497c95e1" translate="yes" xml:space="preserve">
          <source>Returns a promise that is fulfilled when all the given promises have been settled, or rejected if the passed parameters are invalid.</source>
          <target state="translated">与えられたすべてのプロミスが解決されたときに成立するプロミスを返します。</target>
        </trans-unit>
        <trans-unit id="6d3f9c4b4397f9ef81ee1535035150e16652f8d6" translate="yes" xml:space="preserve">
          <source>Returns a promise that is fulfilled when all the given promises have been settled. The return promise is fulfilled with an array of the states of the promises passed into the &lt;code&gt;promises&lt;/code&gt; array argument.</source>
          <target state="translated">指定されたすべての約束が解決されたときに満たされる約束を返します。return promiseは &lt;code&gt;promises&lt;/code&gt; 配列引数に渡されたpromiseの状態の配列で満たされます。</target>
        </trans-unit>
        <trans-unit id="f6e385587e066b24048df3bceae7d07c05eb9136" translate="yes" xml:space="preserve">
          <source>Returns a relationship formatted as a JSON-API &quot;relationship object&quot;.</source>
          <target state="translated">JSON-API &quot;relationshipオブジェクト &quot;としてフォーマットされたリレーションを返します。</target>
        </trans-unit>
        <trans-unit id="52a97236412e0d9a5ce17c93a028e57570cea2e1" translate="yes" xml:space="preserve">
          <source>Returns a special object that can be used to observe individual properties on the array. Just get an equivalent property on this object and it will return an enumerable that maps automatically to the named key on the member objects.</source>
          <target state="translated">配列上の個々のプロパティを観察するために使用できる特別なオブジェクトを返します。このオブジェクトで同等のプロパティを取得するだけで、メンバオブジェクトの名前付きキーに自動的にマップされる列挙可能な値を返します。</target>
        </trans-unit>
        <trans-unit id="f1bb9132b749d70b8d6303a10f424698c9fb0eed" translate="yes" xml:space="preserve">
          <source>Returns a string representation which attempts to provide more information than Javascript's &lt;code&gt;toString&lt;/code&gt; typically does, in a generic way for all Ember objects.</source>
          <target state="translated">すべてのEmberオブジェクトに対して一般的な方法で、JavaScriptの &lt;code&gt;toString&lt;/code&gt; よりも多くの情報を提供しようとする文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="1baffde3c198a82c1a9f24fd1699b9537bf5a9f0" translate="yes" xml:space="preserve">
          <source>Returns a unique id for the object. If the object does not yet have a guid, one will be assigned to it. You can call this on any object, &lt;code&gt;Ember.Object&lt;/code&gt;-based or not, but be aware that it will add a &lt;code&gt;_guid&lt;/code&gt; property.</source>
          <target state="translated">オブジェクトの一意のIDを返します。オブジェクトにまだGUIDがない場合は、GUIDが割り当てられます。 &lt;code&gt;Ember.Object&lt;/code&gt; ベースかどうかに関係なく、これを任意のオブジェクトで呼び出すことができますが、 &lt;code&gt;_guid&lt;/code&gt; プロパティが追加されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4fe073685bcbe50133bcaf9d9680a9bc1a21e5a7" translate="yes" xml:space="preserve">
          <source>Returns a unique id for the object. If the object does not yet have a guid, one will be assigned to it. You can call this on any object, &lt;code&gt;EmberObject&lt;/code&gt;-based or not.</source>
          <target state="translated">オブジェクトの一意のIDを返します。オブジェクトにまだGUIDがない場合は、GUIDが割り当てられます。これは、 &lt;code&gt;EmberObject&lt;/code&gt; ベースであるかどうかに関係なく、任意のオブジェクトで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="1f4ec976109d986b5a79d48479eb69b877f9ce1c" translate="yes" xml:space="preserve">
          <source>Returns an array mapped to the specified key.</source>
          <target state="translated">指定したキーにマップされた配列を返します。</target>
        </trans-unit>
        <trans-unit id="b64d16ac418315ac651a71cfd903dcf3f4c1950a" translate="yes" xml:space="preserve">
          <source>Returns an array mapped via the callback</source>
          <target state="translated">コールバックでマップされた配列を返します。</target>
        </trans-unit>
        <trans-unit id="829d878e18002574178651ec68a61b50ed634687" translate="yes" xml:space="preserve">
          <source>Returns an array with all of the items in the enumeration that the passed function returns true for. This method corresponds to &lt;code&gt;filter()&lt;/code&gt; defined in JavaScript 1.6.</source>
          <target state="translated">渡された関数がtrueを返す列挙内のすべての項目を含む配列を返します。このメソッドは、JavaScript 1.6で定義された &lt;code&gt;filter()&lt;/code&gt; に対応しています。</target>
        </trans-unit>
        <trans-unit id="c71aa9a7da9062c13eb9514b5d81794253550ff0" translate="yes" xml:space="preserve">
          <source>Returns an array with all of the items in the enumeration where the passed function returns false. This method is the inverse of filter().</source>
          <target state="translated">渡された関数が false を返す列挙内のすべての項目を含む配列を返します。このメソッドは filter()の逆数です。</target>
        </trans-unit>
        <trans-unit id="78ff059f5f0f8f4ba1bb336fa61257c52bc1e554" translate="yes" xml:space="preserve">
          <source>Returns an array with just the items with the matched property. You can pass an optional second argument with the target value. Otherwise this will match any property that evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">一致したプロパティを持つアイテムのみの配列を返します。オプションの2番目の引数をターゲット値とともに渡すことができます。それ以外の場合、これは &lt;code&gt;true&lt;/code&gt; と評価されるすべてのプロパティと一致します。</target>
        </trans-unit>
        <trans-unit id="f5d725514851c9b11eac282307b62e805938ccc7" translate="yes" xml:space="preserve">
          <source>Returns an array with the items that do not have truthy values for key. You can pass an optional second argument with the target value. Otherwise this will match any property that evaluates to false.</source>
          <target state="translated">keyにtruthy値を持たない項目を含む配列を返します。オプションの第二引数にターゲット値を渡すことができます。そうでない場合は、これは false として評価されるすべてのプロパティにマッチします。</target>
        </trans-unit>
        <trans-unit id="3b041d1644fe8d55b45f0896022ff7a3e5e96227" translate="yes" xml:space="preserve">
          <source>Returns an array with the items that do not have truthy values for the provided key. You can pass an optional second argument with a target value to reject for the key. Otherwise this will reject objects where the provided property evaluates to false.</source>
          <target state="translated">指定されたキーに対して真正な値を持たないアイテムを配列で返します。オプションの第2引数には、キーに対して拒否するターゲット値を渡すことができます。それ以外の場合は、指定されたプロパティの評価値が False であるオブジェクトを拒否します。</target>
        </trans-unit>
        <trans-unit id="1a3670a2d50cfc92881b423c60b1f1c2575feb6e" translate="yes" xml:space="preserve">
          <source>Returns an instance of the adapter for a given type. For example, &lt;code&gt;adapterFor('person')&lt;/code&gt; will return an instance of &lt;code&gt;App.PersonAdapter&lt;/code&gt;.</source>
          <target state="translated">指定されたタイプのアダプタのインスタンスを返します。たとえば、 &lt;code&gt;adapterFor('person')&lt;/code&gt; は &lt;code&gt;App.PersonAdapter&lt;/code&gt; のインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="673a33da06126a5640a2ab9e96c90786fc9c52f9" translate="yes" xml:space="preserve">
          <source>Returns an instance of the serializer for a given type. For example, &lt;code&gt;serializerFor('person')&lt;/code&gt; will return an instance of &lt;code&gt;App.PersonSerializer&lt;/code&gt;.</source>
          <target state="translated">指定されたタイプのシリアライザのインス​​タンスを返します。たとえば、 &lt;code&gt;serializerFor('person')&lt;/code&gt; は &lt;code&gt;App.PersonSerializer&lt;/code&gt; のインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="57c8785371bfdb428b7960568f1bb17a9b411222" translate="yes" xml:space="preserve">
          <source>Returns an object that can be used to provide an owner to a manually created instance.</source>
          <target state="translated">手動で作成したインスタンスの所有者を指定するために使用できるオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="fd2a4f6967074c15ba164a31f50b2fef12d1c233" translate="yes" xml:space="preserve">
          <source>Returns an object, whose keys are changed properties, and value is an [oldProp, newProp] array.</source>
          <target state="translated">キーが変更されたプロパティ、値が [oldProp,newProp]の配列であるオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="eb72d59dd2b98c9d1f57e9369a6432daa8505854" translate="yes" xml:space="preserve">
          <source>Returns errors for a given attribute</source>
          <target state="translated">指定した属性のエラーを返します</target>
        </trans-unit>
        <trans-unit id="84982465e39ac847f3650a8b4a93110951755c44" translate="yes" xml:space="preserve">
          <source>Returns keywords to match when searching records.</source>
          <target state="translated">レコードを検索する際にマッチするキーワードを返します。</target>
        </trans-unit>
        <trans-unit id="c53cee14bf3f2dd98c4f832e2cfc8603ac6576e6" translate="yes" xml:space="preserve">
          <source>Returns the Capitalized form of a string</source>
          <target state="translated">文字列の大文字表記を返します。</target>
        </trans-unit>
        <trans-unit id="27bef32d6017037bf8ae7ec87140c840faa058d7" translate="yes" xml:space="preserve">
          <source>Returns the UpperCamelCase form of a string.</source>
          <target state="translated">UpperCamelCase形式の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="9e667554d12ea03a5ae716d11d67d4c4964f3096" translate="yes" xml:space="preserve">
          <source>Returns the associated child for convenience.</source>
          <target state="translated">便利なように、関連する子を返します。</target>
        </trans-unit>
        <trans-unit id="3ea8d719e010027a981f551b7907ffaf6428b3c0" translate="yes" xml:space="preserve">
          <source>Returns the available classes a given type.</source>
          <target state="translated">指定された型で利用可能なクラスを返します。</target>
        </trans-unit>
        <trans-unit id="559a00b1190b2d1cae3fc144a9dbab5ae67bb15d" translate="yes" xml:space="preserve">
          <source>Returns the cached value for a property, if one exists. This can be useful for peeking at the value of a computed property that is generated lazily, without accidentally causing it to be created.</source>
          <target state="translated">プロパティのキャッシュされた値を返します。これは、怠惰に生成された計算されたプロパティの値を覗き見するのに便利です。</target>
        </trans-unit>
        <trans-unit id="c7c90e8f44c4bb41743551254bcbc3f92e3bc124" translate="yes" xml:space="preserve">
          <source>Returns the cached value of a computed property, if it exists. This allows you to inspect the value of a computed property without accidentally invoking it if it is intended to be generated lazily.</source>
          <target state="translated">計算されたプロパティのキャッシュされた値を返します。これにより、計算されたプロパティが怠惰に生成されることを意図している場合に誤って呼び出すことなく、その値を検査することができます。</target>
        </trans-unit>
        <trans-unit id="fc4ee2b850450a7e973ddd1ed839152228fa5e24" translate="yes" xml:space="preserve">
          <source>Returns the controller of the current route, or a parent (or any ancestor) route in a route hierarchy.</source>
          <target state="translated">現在のルートのコントローラ、またはルート階層内の親ルート(またはその先祖)を返します。</target>
        </trans-unit>
        <trans-unit id="9725708a8c5defae2f7c0cd978776509197591b1" translate="yes" xml:space="preserve">
          <source>Returns the current DOM element for the view.</source>
          <target state="translated">ビューの現在の DOM 要素を返します。</target>
        </trans-unit>
        <trans-unit id="b98b32c89ebbfef46cceba77784cc4659c5bbd7e" translate="yes" xml:space="preserve">
          <source>Returns the current URL.</source>
          <target state="translated">現在の URL を返します。</target>
        </trans-unit>
        <trans-unit id="603c43d141eff0347fdae1c71f24b3fffbceee88" translate="yes" xml:space="preserve">
          <source>Returns the current path.</source>
          <target state="translated">現在のパスを返します。</target>
        </trans-unit>
        <trans-unit id="5f1aa9ae053c0edabb551d28c02b549a6462af84" translate="yes" xml:space="preserve">
          <source>Returns the currently active route name.</source>
          <target state="translated">現在アクティブなルート名を返します。</target>
        </trans-unit>
        <trans-unit id="813b9ecb5f8511435272f62810e6b41f7e57a004" translate="yes" xml:space="preserve">
          <source>Returns the first item in the array for which the callback returns true. This method is similar to the &lt;code&gt;find()&lt;/code&gt; method defined in ECMAScript 2015.</source>
          <target state="translated">コールバックがtrueを返す配列の最初の項目を返します。このメソッドは、ECMAScript 2015で定義されている &lt;code&gt;find()&lt;/code&gt; メソッドに似ています。</target>
        </trans-unit>
        <trans-unit id="f9fe31d2ca8c909a9d417483d744e509af227d01" translate="yes" xml:space="preserve">
          <source>Returns the first item in the array for which the callback returns true. This method works similar to the &lt;code&gt;filter()&lt;/code&gt; method defined in JavaScript 1.6 except that it will stop working on the array once a match is found.</source>
          <target state="translated">コールバックがtrueを返す配列の最初の項目を返します。このメソッドはJavaScript 1.6で定義された &lt;code&gt;filter()&lt;/code&gt; メソッドと同様に機能しますが、一致が見つかると配列の処理が停止する点が異なります。</target>
        </trans-unit>
        <trans-unit id="2e59a22f6a7f2a23baf41260a3a174ae4dda651e" translate="yes" xml:space="preserve">
          <source>Returns the first item with a property matching the passed value. You can pass an optional second argument with the target value. Otherwise this will match any property that evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">渡された値と一致するプロパティを持つ最初のアイテムを返します。オプションの2番目の引数をターゲット値とともに渡すことができます。それ以外の場合、これは &lt;code&gt;true&lt;/code&gt; と評価されるすべてのプロパティと一致します。</target>
        </trans-unit>
        <trans-unit id="4e4749aa6dc27e7bce3a78184551818e1fd4702e" translate="yes" xml:space="preserve">
          <source>Returns the index of the given &lt;code&gt;object&lt;/code&gt;'s last occurrence.</source>
          <target state="translated">指定された &lt;code&gt;object&lt;/code&gt; の最後の出現のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="a5a026a77c75bacd53505cdcc6e9f209285cfdf2" translate="yes" xml:space="preserve">
          <source>Returns the index of the given object's first occurrence. If no &lt;code&gt;startAt&lt;/code&gt; argument is given, the starting location to search is 0. If it's negative, will count backward from the end of the array. Returns -1 if no match is found.</source>
          <target state="translated">指定されたオブジェクトの最初の出現のインデックスを返します。 &lt;code&gt;startAt&lt;/code&gt; 引数が指定されていない場合、検索の開始位置は0です。それが負の場合、配列の最後から逆方向にカウントします。一致するものが見つからない場合は-1を返します。</target>
        </trans-unit>
        <trans-unit id="b0b515aad064fd3b288bb9d89c67df97fc51d2b5" translate="yes" xml:space="preserve">
          <source>Returns the index of the given object's last occurrence. If no &lt;code&gt;startAt&lt;/code&gt; argument is given, the search starts from the last position. If it's negative, will count backward from the end of the array. Returns -1 if no match is found.</source>
          <target state="translated">指定されたオブジェクトの最後の出現のインデックスを返します。 &lt;code&gt;startAt&lt;/code&gt; 引数を指定しない場合、検索は最後の位置から開始されます。負の場合は、配列の最後から逆方向にカウントします。一致するものが見つからない場合は-1を返します。</target>
        </trans-unit>
        <trans-unit id="53b4efc0ec12b66bfb72581aacfd1278f1182232" translate="yes" xml:space="preserve">
          <source>Returns the lowerCamelCase form of a string.</source>
          <target state="translated">文字列のlowerCamelCase形式を返します。</target>
        </trans-unit>
        <trans-unit id="9578d2b6bd478f1d1d2ab145665ede9e0378f6c2" translate="yes" xml:space="preserve">
          <source>Returns the model class for the particular &lt;code&gt;modelName&lt;/code&gt;.</source>
          <target state="translated">特定の &lt;code&gt;modelName&lt;/code&gt; のモデルクラスを返します。</target>
        </trans-unit>
        <trans-unit id="6084c6c52d8f4610c165db1925af06fb94911fbb" translate="yes" xml:space="preserve">
          <source>Returns the name of the model class.</source>
          <target state="translated">モデルクラスの名前を返します。</target>
        </trans-unit>
        <trans-unit id="0bab782f8ac9d0f882b41382a9b9eba4f7d1cced" translate="yes" xml:space="preserve">
          <source>Returns the object at the given &lt;code&gt;index&lt;/code&gt;. If the given &lt;code&gt;index&lt;/code&gt; is negative or is greater or equal than the array length, returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;index&lt;/code&gt; オブジェクトを返します。指定された &lt;code&gt;index&lt;/code&gt; が負であるか、配列の長さ以上である場合、 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f3f7b4ca85546523dc009d25cb0b789a874b05c9" translate="yes" xml:space="preserve">
          <source>Returns the resolved model of a parent (or any ancestor) route in a route hierarchy. During a transition, all routes must resolve a model object, and if a route needs access to a parent route's model in order to resolve a model (or just reuse the model from a parent), it can call &lt;code&gt;this.modelFor(theNameOfParentRoute)&lt;/code&gt; to retrieve it. If the ancestor route's model was a promise, its resolved result is returned.</source>
          <target state="translated">ルート階層の親（または祖先）ルートの解決されたモデルを返します。遷移中、すべてのルートはモデルオブジェクトを解決する必要があり、モデルを解決する（または親からモデルを再利用する）ためにルートが親ルートのモデルにアクセスする必要がある場合は、 &lt;code&gt;this.modelFor(theNameOfParentRoute)&lt;/code&gt; を呼び出してそれを取得します。祖先ルートのモデルがプロミスだった場合、解決された結果が返されます。</target>
        </trans-unit>
        <trans-unit id="a84d41130ac37df9542127b00978dea35fe64b87" translate="yes" xml:space="preserve">
          <source>Returns the resource's ID.</source>
          <target state="translated">リソースのIDを返します。</target>
        </trans-unit>
        <trans-unit id="bf66565ff73540d9dd7fc00f9444426f536c7d08" translate="yes" xml:space="preserve">
          <source>Returns the resource's attributes formatted as a JSON-API &quot;attributes object&quot;.</source>
          <target state="translated">リソースの属性を JSON-API &quot;attributes object&quot; 形式で返します。</target>
        </trans-unit>
        <trans-unit id="415b933c18c5478e404754280a5d65c8ca1940a0" translate="yes" xml:space="preserve">
          <source>Returns the resource's relationships formatted as a JSON-API &quot;relationships object&quot;.</source>
          <target state="translated">リソースのリレーションシップを JSON-API &quot;relations object&quot; 形式で返します。</target>
        </trans-unit>
        <trans-unit id="cdf54eb05e0fa1e3d781a566f01099e76afe41b7" translate="yes" xml:space="preserve">
          <source>Returns the value of the named property on all items in the enumeration.</source>
          <target state="translated">列挙されているすべての項目について、指定されたプロパティの値を返します。</target>
        </trans-unit>
        <trans-unit id="7070d6237ca8bd3631e5672cdd05bb5c80f183e0" translate="yes" xml:space="preserve">
          <source>Returns the values of filters defined by &lt;code&gt;getFilters&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getFilters&lt;/code&gt; で定義されたフィルターの値を返します。</target>
        </trans-unit>
        <trans-unit id="afc70541a8fa4d9fce60946294448cc54071c811" translate="yes" xml:space="preserve">
          <source>Returns true if it is possible to catalog a list of available classes in the resolver for a given type.</source>
          <target state="translated">指定した型についてリゾルバで利用可能なクラスのリストをカタログ化することが可能な場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="dbd27005b9eb80ac7f03ed6d41eccecffd320423" translate="yes" xml:space="preserve">
          <source>Returns true if the passed object is an array or Array-like.</source>
          <target state="translated">渡されたオブジェクトが配列か配列に似ている場合に true を返します。</target>
        </trans-unit>
        <trans-unit id="2cbfc0edc2a1571a31104dc3ac6c9e8701099f18" translate="yes" xml:space="preserve">
          <source>Returns true if the passed value is null or undefined. This avoids errors from JSLint complaining about use of ==, which can be technically confusing.</source>
          <target state="translated">渡された値がnullまたは未定義の場合はtrueを返します。これにより、技術的に混乱を招く==の使用についてJSLintが文句を言うエラーを回避できます。</target>
        </trans-unit>
        <trans-unit id="cb7fd3ff2c053ac1f7adced8bb08e8be1c57f557" translate="yes" xml:space="preserve">
          <source>Reusing Route Context</source>
          <target state="translated">ルートコンテキストの再利用</target>
        </trans-unit>
        <trans-unit id="f7a260f32f2ae28e993f2a321848e1adcfad19eb" translate="yes" xml:space="preserve">
          <source>Reverse objects in the array. Works just like &lt;code&gt;reverse()&lt;/code&gt; but it is KVO-compliant.</source>
          <target state="translated">配列内のオブジェクトを反転します。 &lt;code&gt;reverse()&lt;/code&gt; と同じように機能しますが、KVOに準拠しています。</target>
        </trans-unit>
        <trans-unit id="ef58b6655b1d174bf86dcad644fe5f14396fd1de" translate="yes" xml:space="preserve">
          <source>Review the refactoring checklist below to create a plan for handling existing code. Note that some steps have codemods available!</source>
          <target state="translated">以下のリファクタリングチェックリストを見て、既存のコードを処理するための計画を立ててください。いくつかのステップでは、codemodが利用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6209537eda0bb676e9c1139d4542bb71b587c921" translate="yes" xml:space="preserve">
          <source>RootState</source>
          <target state="translated">RootState</target>
        </trans-unit>
        <trans-unit id="4999528efe0f94f8f66b1dc05aad8ebaaae7b2be" translate="yes" xml:space="preserve">
          <source>Route</source>
          <target state="translated">Route</target>
        </trans-unit>
        <trans-unit id="20bb4efd64b3d8c3fbab0cab5b9e525a3f5f3641" translate="yes" xml:space="preserve">
          <source>Route Handlers</source>
          <target state="translated">ルートハンドラ</target>
        </trans-unit>
        <trans-unit id="3e5b526bf5c2870cc328f02613777cab7924648b" translate="yes" xml:space="preserve">
          <source>RouteInfo</source>
          <target state="translated">RouteInfo</target>
        </trans-unit>
        <trans-unit id="836d21b73cac9b2da1021cc61047f6d87e32ce66" translate="yes" xml:space="preserve">
          <source>RouteInfoWithAttributes</source>
          <target state="translated">RouteInfoWithAttributes</target>
        </trans-unit>
        <trans-unit id="6dcf16e1c5d3e9fd2ae4a4d54c174448fe43e1b6" translate="yes" xml:space="preserve">
          <source>Router</source>
          <target state="translated">Router</target>
        </trans-unit>
        <trans-unit id="15507cd11e5f36e3bd1000cd0d459f39fb04d158" translate="yes" xml:space="preserve">
          <source>Router and Route Handlers</source>
          <target state="translated">ルータとルートハンドラ</target>
        </trans-unit>
        <trans-unit id="eb04e4102ddcdddd2b4ad8996248c661dcd7e77f" translate="yes" xml:space="preserve">
          <source>RouterService</source>
          <target state="translated">RouterService</target>
        </trans-unit>
        <trans-unit id="a9d3b175c69e17dc9060b2a51d5088436b3d7c7d" translate="yes" xml:space="preserve">
          <source>RouterService  (public)</source>
          <target state="translated">ルーターサービス</target>
        </trans-unit>
        <trans-unit id="03730e58401ef5d9e79d1f674df0a5f9cf756e33" translate="yes" xml:space="preserve">
          <source>Routes</source>
          <target state="translated">Routes</target>
        </trans-unit>
        <trans-unit id="bbe3002d2245379df83a5467ffff0fec18ef89e8" translate="yes" xml:space="preserve">
          <source>Routes and Templates</source>
          <target state="translated">ルートとテンプレート</target>
        </trans-unit>
        <trans-unit id="8987ca9f541ce3e64483abe2d701eb7b2b6a9540" translate="yes" xml:space="preserve">
          <source>Routes in this example application can now access the injected logger:</source>
          <target state="translated">このサンプル アプリケーションのルートは、注入されたロガーにアクセスできるようになりました。</target>
        </trans-unit>
        <trans-unit id="64588f6aefa7085fb2efbbcac558cdfba1c74948" translate="yes" xml:space="preserve">
          <source>Routes without dynamic segments will always execute the model hook.</source>
          <target state="translated">ダイナミックセグメントのないルートは常にモデルフックを実行します。</target>
        </trans-unit>
        <trans-unit id="0e523b39cf9ec96ace784b7a343ed0d9faa3ec4c" translate="yes" xml:space="preserve">
          <source>Routine minor version maintenance upgrades</source>
          <target state="translated">定期的なマイナーバージョンアップの実施</target>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="0cd39bd2ed21b982743ecb7fd781003d0e3b3062" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;ember server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ember server&lt;/code&gt; 実行します。</target>
        </trans-unit>
        <trans-unit id="1442914c6ee08b64a917d4c330cde7b015a3686d" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;ember t -s&lt;/code&gt; to verify that our new test is passing. To find the new test, locate &quot;Integration | Component | rental listing&quot; in the &quot;Module&quot; field of the test UI.</source>
          <target state="translated">&lt;code&gt;ember t -s&lt;/code&gt; を実行して、新しいテストに合格していることを確認します。新しいテストを見つけるには、テストUIの「モジュール」フィールドで「統合|コンポーネント|レンタルリスト」を見つけます。</target>
        </trans-unit>
        <trans-unit id="64e27783b0104ad18b07f55f262e7f7444bb57e6" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;npx @ember/octanify&lt;/code&gt; to add any missing Octane related dependencies and enable the set of Octane optional features.</source>
          <target state="translated">&lt;code&gt;npx @ember/octanify&lt;/code&gt; を実行して、不足しているOctane関連の依存関係を追加し、Octaneオプション機能のセットを有効にします。</target>
        </trans-unit>
        <trans-unit id="2dbbc67840c5e39c504d798d6593f53821d2cc88" translate="yes" xml:space="preserve">
          <source>Run a function meant for debugging.</source>
          <target state="translated">デバッグ用の関数を実行します。</target>
        </trans-unit>
        <trans-unit id="72b319733a3cbd1a60f4223245198cfc2ad86b61" translate="yes" xml:space="preserve">
          <source>Run any application initializers and run the application load hook. These hooks may choose to defer readiness. For example, an authentication hook might want to defer readiness until the auth token has been retrieved.</source>
          <target state="translated">任意のアプリケーションのイニシャライザを実行し、アプリケーションのロードフックを実行します。これらのフックは、準備状態を延期することができます。たとえば、認証フックでは、authトークンが取得されるまで準備を延期することができます。</target>
        </trans-unit>
        <trans-unit id="66a5ecdab45965e437f71333f302f2e5bab78442" translate="yes" xml:space="preserve">
          <source>Run in a full browser environment.</source>
          <target state="translated">フルブラウザ環境で動作します。</target>
        </trans-unit>
        <trans-unit id="edc3981913706bf02d5feb303f21804148ecbc99" translate="yes" xml:space="preserve">
          <source>Run the following command to install the addon:</source>
          <target state="translated">以下のコマンドを実行して、アドオンをインストールします。</target>
        </trans-unit>
        <trans-unit id="2acab689db555e5a40a3ad5f90d7b5a3c8c74f42" translate="yes" xml:space="preserve">
          <source>Run the following commands to install the addon and generate a new modifier:</source>
          <target state="translated">以下のコマンドを実行して、アドオンのインストールと新しいモディファイアの生成を行います。</target>
        </trans-unit>
        <trans-unit id="6f6ff3e3092b35d4ef3929076640b57e0d508a29" translate="yes" xml:space="preserve">
          <source>Run the tests again using the command &lt;code&gt;ember t -s&lt;/code&gt;, and toggle &quot;Hide passed tests&quot; to show your new passing test.</source>
          <target state="translated">コマンド &lt;code&gt;ember t -s&lt;/code&gt; を使用してテストを再度実行し、「合格したテストを非表示」を切り替えて、新しい合格したテストを表示します。</target>
        </trans-unit>
        <trans-unit id="113d8c01f0ce1a9637e7e61d07f886f1ce894435" translate="yes" xml:space="preserve">
          <source>Run time, where we begin executing the application once everything has loaded.</source>
          <target state="translated">実行時間は、すべてが読み込まれたらアプリケーションの実行を開始します。</target>
        </trans-unit>
        <trans-unit id="18856dbed1e97664803502cb153a1b07dd530799" translate="yes" xml:space="preserve">
          <source>Run your tests to make sure everything still works as expected.</source>
          <target state="translated">テストを実行して、すべてが期待通りに動作することを確認してください。</target>
        </trans-unit>
        <trans-unit id="8cbc363f50b4971680e11de197253d5ebff17363" translate="yes" xml:space="preserve">
          <source>Run your tests with &lt;code&gt;ember test&lt;/code&gt; on the command-line. You can re-run your tests on every file-change with &lt;code&gt;ember test --server&lt;/code&gt;.</source>
          <target state="translated">コマンドラインで &lt;code&gt;ember test&lt;/code&gt; を使用してテストを実行します。 &lt;code&gt;ember test --server&lt;/code&gt; を使用すると、ファイルが変更されるたびにテストを再実行できます。</target>
        </trans-unit>
        <trans-unit id="2ce92b8f8a607252af27b98ddec45308f2f8137b" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;ember test --server&lt;/code&gt; will now show 7 failing tests (out of 15). Each of the 6 tests we setup above will fail, plus one ESLint test will fail saying, &lt;code&gt;assert is defined but never used&lt;/code&gt;. The tests above fail because QUnit requires at least one check for a specific condition (known as an &lt;code&gt;assert&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;ember test --server&lt;/code&gt; を実行すると、7つの失敗したテストが表示されます（15のうち）。上記でセットアップした6つのテストのそれぞれが失敗し、さらに1つのESLintテストが失敗し、 &lt;code&gt;assert is defined but never used&lt;/code&gt; 。上記のテストは、QUnitが特定の条件（ &lt;code&gt;assert&lt;/code&gt; と呼ばれる）について少なくとも1つのチェックを必要とするため失敗します。</target>
        </trans-unit>
        <trans-unit id="52d1f9fc84c72f964d3e2290880c642e3e33c2c8" translate="yes" xml:space="preserve">
          <source>Running this command generates three files: a component JavaScript file, a template, and a test file.</source>
          <target state="translated">このコマンドを実行すると、コンポーネントJavaScriptファイル、テンプレート、テストファイルの3つのファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="42272791157160739ed302e320a2062a5ebaa316" translate="yes" xml:space="preserve">
          <source>Runs the passed target and method inside of a RunLoop, ensuring any deferred actions including bindings and views updates are flushed at the end.</source>
          <target state="translated">RunLoop内で渡されたターゲットとメソッドを実行し、バインディングやビューの更新などの遅延したアクションが最後にフラッシュされるようにします。</target>
        </trans-unit>
        <trans-unit id="222cad2bd37e45b5f33d5d967590f4b613622bfd" translate="yes" xml:space="preserve">
          <source>Runtime Configuration</source>
          <target state="translated">ランタイム構成</target>
        </trans-unit>
        <trans-unit id="429ee37aaa10a7c1e1dbc7f3832b6b87b1b491c2" translate="yes" xml:space="preserve">
          <source>SSR</source>
          <target state="translated">SSR</target>
        </trans-unit>
        <trans-unit id="50fce6d02899850101b1865a947b45128c5350eb" translate="yes" xml:space="preserve">
          <source>SVG</source>
          <target state="translated">SVG</target>
        </trans-unit>
        <trans-unit id="34e3d9fa2efb3b7c73f3535f9e2462b7e96c9177" translate="yes" xml:space="preserve">
          <source>Safari &amp;amp; VoiceOver (MacOS)</source>
          <target state="translated">SafariとVoiceOver（MacOS）</target>
        </trans-unit>
        <trans-unit id="5d8e270a3b478909d95ca7c40279e9043d659c52" translate="yes" xml:space="preserve">
          <source>SafeString</source>
          <target state="translated">SafeString</target>
        </trans-unit>
        <trans-unit id="3345733b5704ef652ed8eb46f076938ea03125bd" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;deleteRecord&lt;/code&gt;, but saves the record immediately.</source>
          <target state="translated">&lt;code&gt;deleteRecord&lt;/code&gt; と同じですが、レコードをすぐに保存します。</target>
        </trans-unit>
        <trans-unit id="4a7e069bd507c730311a8b251060b5b9997cb937" translate="yes" xml:space="preserve">
          <source>Sass/Less Comparison</source>
          <target state="translated">サス/レスの比較</target>
        </trans-unit>
        <trans-unit id="25818b0851afccf72a718a0e15e8c5e40a99b3fc" translate="yes" xml:space="preserve">
          <source>Save the record and persist any changes to the record to an external source via the adapter.</source>
          <target state="translated">レコードを保存し、レコードへの変更をアダプタを介して外部ソースに永続化します。</target>
        </trans-unit>
        <trans-unit id="6c84a72cd3751d9f682a3838ae1434b6568e663c" translate="yes" xml:space="preserve">
          <source>Save this template and switch back to the &lt;code&gt;scientists&lt;/code&gt; template.</source>
          <target state="translated">このテンプレートを保存して、 &lt;code&gt;scientists&lt;/code&gt; テンプレートに切り替えます。</target>
        </trans-unit>
        <trans-unit id="6db7e04098ce89e31bb81c3fc95a3a70f998a013" translate="yes" xml:space="preserve">
          <source>Save this template and switch back to the &lt;code&gt;scientists&lt;/code&gt; template. Replace all our old code with our new componentized version. Components look like HTML tags but instead of using angle brackets (&lt;code&gt;&amp;lt;tag&amp;gt;&lt;/code&gt;) they use double curly braces (&lt;code&gt;{{component}}&lt;/code&gt;).</source>
          <target state="translated">このテンプレートを保存して、 &lt;code&gt;scientists&lt;/code&gt; テンプレートに切り替えます。古いコードをすべて新しいコンポーネント化バージョンに置き換えます。コンポーネントはHTMLタグのように見えますが、山括弧（ &lt;code&gt;&amp;lt;tag&amp;gt;&lt;/code&gt; ）を使用する代わりに、二重中括弧（ &lt;code&gt;{{component}}&lt;/code&gt; ）を使用しています。</target>
        </trans-unit>
        <trans-unit id="75008fab400537d9213cc7b35f572e830001bbbb" translate="yes" xml:space="preserve">
          <source>Saves all of the records in the &lt;code&gt;ManyArray&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ManyArray&lt;/code&gt; のすべてのレコードを保存します。</target>
        </trans-unit>
        <trans-unit id="df3feb104ba2e45607091340bd579e0e82e620de" translate="yes" xml:space="preserve">
          <source>Saves all of the records in the &lt;code&gt;RecordArray&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RecordArray&lt;/code&gt; 内のすべてのレコードを保存します。</target>
        </trans-unit>
        <trans-unit id="3fe2b6866788c46de111214341e6e46e2056460c" translate="yes" xml:space="preserve">
          <source>Say your API namespaces the type of a model and expects the following payload when you update the &lt;code&gt;post&lt;/code&gt; model, which has a polymorphic &lt;code&gt;user&lt;/code&gt; relationship:</source>
          <target state="translated">API名前空間がモデルのタイプであり、多態的な &lt;code&gt;user&lt;/code&gt; 関係を持つ &lt;code&gt;post&lt;/code&gt; モデルを更新するときに、次のペイロードが必要であるとします。</target>
        </trans-unit>
        <trans-unit id="d136d61c474d3b91c7e154860b021ed3fbba6838" translate="yes" xml:space="preserve">
          <source>Say your API namespaces the type of a model and expects the following payload when you update the &lt;code&gt;post&lt;/code&gt; model:</source>
          <target state="translated">API名前空間がモデルのタイプであり、 &lt;code&gt;post&lt;/code&gt; モデルを更新するときに次のペイロードが必要であるとします。</target>
        </trans-unit>
        <trans-unit id="ea662432dbe1c412446984e3028f23c30fe1a705" translate="yes" xml:space="preserve">
          <source>Say your API namespaces the type of a model and returns the following payload for the &lt;code&gt;post&lt;/code&gt; model, which has a polymorphic &lt;code&gt;user&lt;/code&gt; relationship:</source>
          <target state="translated">APIの名前空間にモデルのタイプを指定し、多態的な &lt;code&gt;user&lt;/code&gt; 関係を持つ &lt;code&gt;post&lt;/code&gt; モデルの次のペイロードを返します。</target>
        </trans-unit>
        <trans-unit id="a903a2095a7bcdbfa11fb73fb67d71d335131cd8" translate="yes" xml:space="preserve">
          <source>Say your API namespaces the type of a model and returns the following payload for the &lt;code&gt;post&lt;/code&gt; model:</source>
          <target state="translated">API名前空間がモデルのタイプであり、 &lt;code&gt;post&lt;/code&gt; モデルの次のペイロードを返すとします。</target>
        </trans-unit>
        <trans-unit id="b6d33be0f5b1eaf876dc704dde51d9330f8ce358" translate="yes" xml:space="preserve">
          <source>Say your template now looks like this:</source>
          <target state="translated">テンプレートが以下のようになったとします。</target>
        </trans-unit>
        <trans-unit id="bc16a7d79cd8b9582ffe6cf1c9f51f2a4e6b9968" translate="yes" xml:space="preserve">
          <source>Schedule a function to run one time during the current RunLoop. This is equivalent to calling &lt;code&gt;scheduleOnce&lt;/code&gt; with the &quot;actions&quot; queue.</source>
          <target state="translated">現在のRunLoop中に関数を1回実行するようにスケジュールします。これは、「アクション」キューで &lt;code&gt;scheduleOnce&lt;/code&gt; を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="2fa9c050bafdf85859c52a24173e46d2b0a60bfa" translate="yes" xml:space="preserve">
          <source>Schedules a function to run one time in a given queue of the current RunLoop. Calling this method with the same queue/target/method combination will have no effect (past the initial call).</source>
          <target state="translated">現在のRunLoopの指定されたキューで関数を一度だけ実行するようにスケジュールします。同じキュー/ターゲット/メソッドの組み合わせでこのメソッドをコールしても、 (最初のコール以降は)何の効果もありません。</target>
        </trans-unit>
        <trans-unit id="1b04067c753c9231c4ab1631929ac85a00912241" translate="yes" xml:space="preserve">
          <source>Schedules an item to run from within a separate run loop, after control has been returned to the system. This is equivalent to calling &lt;code&gt;later&lt;/code&gt; with a wait time of 1ms.</source>
          <target state="translated">制御がシステムに戻された後、別の実行ループ内から実行するようにアイテムをスケジュールします。これは、1msの待機時間で &lt;code&gt;later&lt;/code&gt; 呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="415823adc474692ea63ccbfdd4bf9285fdf51e36" translate="yes" xml:space="preserve">
          <source>Schedules an item to run from within a separate run loop, after control has been returned to the system. This is equivalent to calling &lt;code&gt;run.later&lt;/code&gt; with a wait time of 1ms.</source>
          <target state="translated">制御がシステムに戻った後、別の実行ループ内から実行するようにアイテムをスケジュールします。これは、1msの待機時間で &lt;code&gt;run.later&lt;/code&gt; を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="d41e78b236856ccbed77627ade3d088d216acb1c" translate="yes" xml:space="preserve">
          <source>Screen Reader and Browser Combinations</source>
          <target state="translated">スクリーンリーダーとブラウザの組み合わせ</target>
        </trans-unit>
        <trans-unit id="5b35f99d17c2b4cd3489d04e3e8a0753839e2f05" translate="yes" xml:space="preserve">
          <source>Scrolling to a Component in the Browser</source>
          <target state="translated">ブラウザ内のコンポーネントへのスクロール</target>
        </trans-unit>
        <trans-unit id="2da8e5963f5b139e60b530201737776279520ba2" translate="yes" xml:space="preserve">
          <source>Second value to compare</source>
          <target state="translated">比較する第二の値</target>
        </trans-unit>
        <trans-unit id="fbb14676cc33f6f4135e4da0888670ea8bff400b" translate="yes" xml:space="preserve">
          <source>Second, attribute and relationship names in the JSON API document should exactly match the name and casing of the &lt;code&gt;DS.attr()&lt;/code&gt;, &lt;code&gt;DS.belongsTo()&lt;/code&gt; and &lt;code&gt;DS.hasMany()&lt;/code&gt;, properties defined on the Model.</source>
          <target state="translated">2番目に、JSON APIドキュメントの属性と関係の名前は、モデルで定義されているプロパティである &lt;code&gt;DS.attr()&lt;/code&gt; 、 &lt;code&gt;DS.belongsTo()&lt;/code&gt; 、および &lt;code&gt;DS.hasMany()&lt;/code&gt; の名前と大文字と小文字が完全に一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="034dffe4f830c683fca9562126a5ca88d70ebe7c" translate="yes" xml:space="preserve">
          <source>Second, attribute and relationship names in the JSON:API document should exactly match the name and casing of the &lt;code&gt;@attr&lt;/code&gt;, &lt;code&gt;@belongsTo&lt;/code&gt; and &lt;code&gt;@hasMany&lt;/code&gt;, properties defined on the Model.</source>
          <target state="translated">次に、JSON：APIドキュメントの属性名と関係名は、モデルで定義されている &lt;code&gt;@attr&lt;/code&gt; 、 &lt;code&gt;@belongsTo&lt;/code&gt; 、および &lt;code&gt;@hasMany&lt;/code&gt; プロパティの名前と大文字小文字と完全に一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="db838ce03ec02cddf2e180b605abba62ccb78900" translate="yes" xml:space="preserve">
          <source>Second, you can use Ember CLI to create an application test. Because application tests can cover anything in your app, you will want to organize the files in some natural manner. This will help you quickly find tests and prevent writing duplicates.</source>
          <target state="translated">次に、Ember CLIを使用してアプリケーションテストを作成することができます。アプリケーションテストはアプリ内のあらゆるものを対象とすることができるため、自然な方法でファイルを整理したいと思うでしょう。そうすることで、テストをすぐに見つけることができ、重複して書くことを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="2505c754e96c76956a7be1f711c7c15d871a6591" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method_findRecord&quot;&gt;findRecord&lt;/a&gt; if you would like to request this record from the backend.</source>
          <target state="translated">このレコードをバックエンドからリクエストする場合は、&lt;a href=&quot;#method_findRecord&quot;&gt;findRecordを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e6b7139c565ccba6b41646265abe63665bc0e0fb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method_peekAll&quot;&gt;peekAll&lt;/a&gt; to get an array of current records in the store, without waiting until a reload is finished.</source>
          <target state="translated">リロードが完了するまで待たずに、ストア内の現在のレコードの配列を取得するには、&lt;a href=&quot;#method_peekAll&quot;&gt;peekAll&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="886ff4d1e817dd0f2c949c0a7b4ce296faa34a4f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method_peekRecord&quot;&gt;peekRecord&lt;/a&gt; to get the cached version of a record.</source>
          <target state="translated">レコードのキャッシュバージョンを取得するには、&lt;a href=&quot;#method_peekRecord&quot;&gt;peekRecord&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="61ccab3b58667205608bc05c31f4f4471dba3cbc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method_query&quot;&gt;query&lt;/a&gt; to only get a subset of records from the server.</source>
          <target state="translated">サーバーからレコードのサブセットのみを取得するには、&lt;a href=&quot;#method_query&quot;&gt;クエリ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3105a13b11f9cc2079e6d9c9697d486cac446dad" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../classes/store/methods#findRecord&quot;&gt;findRecord&lt;/a&gt; if you would like to request this record from the backend.</source>
          <target state="translated">バックエンドからこのレコードを要求する場合は、&lt;a href=&quot;../classes/store/methods#findRecord&quot;&gt;findRecordを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="767b15fbf66aebbc4c1178cfc66ef2addeaff7a7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../classes/store/methods#peekAll&quot;&gt;peekAll&lt;/a&gt; to get an array of current records in the store, without waiting until a reload is finished.</source>
          <target state="translated">リロードが完了するまで待たずに、ストア内の現在のレコードの配列を取得するには、&lt;a href=&quot;../classes/store/methods#peekAll&quot;&gt;peekAll&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="301e5555d56099e927bafe66085f45d680ad09fd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../classes/store/methods#peekRecord&quot;&gt;peekRecord&lt;/a&gt; to get the cached version of a record.</source>
          <target state="translated">キャッシュされたバージョンのレコードを取得するには、&lt;a href=&quot;../classes/store/methods#peekRecord&quot;&gt;peekRecord&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="52b9c1d58375374ce85b3db6e92e1d22b6f76771" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../classes/store/methods#query&quot;&gt;query&lt;/a&gt; to only get a subset of records from the server.</source>
          <target state="translated">サーバーからレコードのサブセットのみを取得するには、&lt;a href=&quot;../classes/store/methods#query&quot;&gt;クエリ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="46d9795971c80ea476d0b1500751d7a511c3ccff" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../passing-properties-to-a-component&quot;&gt;Passing Properties to a Component&lt;/a&gt; for more.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../passing-properties-to-a-component&quot;&gt;プロパティをコンポーネントに渡すを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0319da9f087136e4a227ecabe7592e7410d686a7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Component&quot;&gt;&quot;Event Names&quot;&lt;/a&gt; for a list of acceptable DOM event names.</source>
          <target state="translated">受け入れ可能なDOMイベント名のリストについては、&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Component&quot;&gt;「イベント名」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="59c230214dd323fd59b372f5662d59a31f4e058f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods#Input&quot;&gt;Ember.Templates.components.Input&lt;/a&gt; for usage details.</source>
          <target state="translated">使用法の詳細については、&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods#Input&quot;&gt;Ember.Templates.components.Input&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c606b9d8595a50fa7aa94676800966aac8b31e0c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods#Input&quot;&gt;Ember.Templates.components.Input&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods#Input&quot;&gt;Ember.Templates.components.Inputを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b59e94468bbac79b422f95f86d51ba6d3357a3b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods#LinkTo&quot;&gt;Ember.Templates.components.LinkTo&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods#LinkTo&quot;&gt;Ember.Templates.components.LinkToを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d8ef01c673e480de87f9a30258d0cc3c0b91e52" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#action&quot;&gt;Ember.Templates.helpers.action&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#action&quot;&gt;Ember.Templates.helpers.actionを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ff6fbd0c84895ac5a1183d822bece1572d790301" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#input&quot;&gt;Ember.Templates.helpers.input&lt;/a&gt; for usage details.</source>
          <target state="translated">使用法の詳細については、&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#input&quot;&gt;Ember.Templates.helpers.input&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3f4195a0e3a0053f1daea3c2b0663c242da9aae2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/HashLocation&quot;&gt;HashLocation&lt;/a&gt;. See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/HistoryLocation&quot;&gt;HistoryLocation&lt;/a&gt;. See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/NoneLocation&quot;&gt;NoneLocation&lt;/a&gt;. See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/AutoLocation&quot;&gt;AutoLocation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/HashLocation&quot;&gt;HashLocationを&lt;/a&gt;参照してください。&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/HistoryLocation&quot;&gt;HistoryLocationを&lt;/a&gt;参照してください。&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/NoneLocation&quot;&gt;NoneLocationを&lt;/a&gt;参照してください。&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/AutoLocation&quot;&gt;AutoLocationを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="30783607813c38b446462004a03e85001d9c1d18" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Location&quot;&gt;Location&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Location&quot;&gt;場所&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d7cd238cafae20ea63e84d678404ca936763fda5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#replaceWith&quot;&gt;replaceWith&lt;/a&gt; for more info.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#replaceWith&quot;&gt;replaceWith&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1495cd26c813c59a09e8d41995ed5d2e6a8db9b7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#transitionTo&quot;&gt;transitionTo&lt;/a&gt; for more info.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#transitionTo&quot;&gt;transitionTo&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aead30c4035a153b7292346def1a11abd9b74534" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/RouteInfo&quot;&gt;RouteInfo&lt;/a&gt; for more info.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/RouteInfo&quot;&gt;RouteInfo&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3db6252e2ca3a79d9351ce05c47a2d29d1a3f0d3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component#event-names&quot;&gt;&quot;Event Names&quot;&lt;/a&gt; for a list of acceptable DOM event names.</source>
          <target state="translated">受け入れ可能なDOMイベント名のリストについては、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component#event-names&quot;&gt;「イベント名」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e8789001d899131f2e85e2f5f2831793db5bede0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.ComputedProperty.html&quot;&gt;Ember.ComputedProperty&lt;/a&gt;, &lt;a href=&quot;https://emberjs.com/api/classes/Ember.computed.html&quot;&gt;Ember.computed&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://emberjs.com/api/classes/Ember.ComputedProperty.html&quot;&gt;Ember.ComputedProperty&lt;/a&gt;、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.computed.html&quot;&gt;Ember.computedを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="65ead4fce2d577717cfc6277eb28eb28c8681b44" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.LinkComponent.html&quot;&gt;Ember.LinkComponent&lt;/a&gt; for a complete list of overrideable properties. Be sure to also check out inherited properties of &lt;code&gt;LinkComponent&lt;/code&gt;.</source>
          <target state="translated">オーバーライド可能なプロパティの完全なリストについては、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.LinkComponent.html&quot;&gt;Ember.LinkComponent&lt;/a&gt;を参照してください。 &lt;code&gt;LinkComponent&lt;/code&gt; の継承されたプロパティも確認してください。</target>
        </trans-unit>
        <trans-unit id="045265cfa59bb6f41aaac98fec78959fdd19abe6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Location.HashLocation&quot;&gt;Ember.Location.HashLocation&lt;/a&gt;. See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Location.HistoryLocation&quot;&gt;Ember.Location.HistoryLocation&lt;/a&gt;. See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Location.NoneLocation&quot;&gt;Ember.Location.NoneLocation&lt;/a&gt;. See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Location.AutoLocation&quot;&gt;Ember.Location.AutoLocation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Location.HashLocation&quot;&gt;Ember.Location.HashLocationを&lt;/a&gt;参照してください。&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Location.HistoryLocation&quot;&gt;Ember.Location.HistoryLocationを&lt;/a&gt;参照してください。&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Location.NoneLocation&quot;&gt;Ember.Location.NoneLocationを&lt;/a&gt;参照してください。&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Location.AutoLocation&quot;&gt;Ember.Location.AutoLocationを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="01062a6ca91683116a2e4f5f08c832a71f5fe8f8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Route.html#method_replaceWith&quot;&gt;Route.replaceWith&lt;/a&gt; for more info.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Route.html#method_replaceWith&quot;&gt;Route.replaceWith&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="857a99c53ed3cf0419cf7f9b690df0548804f0cb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Route.html#method_transitionTo&quot;&gt;Route.transitionTo&lt;/a&gt; for more info.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Route.html#method_transitionTo&quot;&gt;Route.transitionTo&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="881033150b0297e5f01d4a625bd73488021b52e6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.String.html#method_loc&quot;&gt;Ember.String.loc&lt;/a&gt; for how to set up localized string references.</source>
          <target state="translated">ローカライズされた文字列参照を設定する方法については、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.String.html#method_loc&quot;&gt;Ember.String.loc&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6112da6f0d617231dc4dbb1b45eeb398b827508d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html#method_action&quot;&gt;Ember.Templates.helpers.action&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html#method_action&quot;&gt;Ember.Templates.helpers.actionを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2e320b1d30f80cb3e78ed752a8fd867c8ef8c8dc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html#method_input&quot;&gt;Ember.Templates.helpers.input&lt;/a&gt; for usage details.</source>
          <target state="translated">使用法の詳細については、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html#method_input&quot;&gt;Ember.Templates.helpers.input&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="03d11afa96477f44a066fa485ba8101cf284b0ae" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html#method_textarea&quot;&gt;Ember.Templates.helpers.textarea&lt;/a&gt; for usage details.</source>
          <target state="translated">使用法の詳細については、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html#method_textarea&quot;&gt;Ember.Templates.helpers.textarea&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="47faa79acc3c86a2306cd182fa2b1e0dd8b6cb51" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html#method_yield&quot;&gt;Ember.Templates.helpers.yield&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html#method_yield&quot;&gt;Ember.Templates.helpers.yield&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5d084a39940c5ca6a3dc230b8703de366598062d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://emberjs.com/guides/templates/the-application-template/&quot;&gt;templates guide&lt;/a&gt; for additional information on using &lt;code&gt;{{outlet}}&lt;/code&gt; in &lt;code&gt;application.hbs&lt;/code&gt;. You may also specify a name for the &lt;code&gt;{{outlet}}&lt;/code&gt;, which is useful when using more than one &lt;code&gt;{{outlet}}&lt;/code&gt; in a template:</source>
          <target state="translated">参照&lt;a href=&quot;https://emberjs.com/guides/templates/the-application-template/&quot;&gt;テンプレートはガイド&lt;/a&gt;使用の詳細については &lt;code&gt;{{outlet}}&lt;/code&gt; で &lt;code&gt;application.hbs&lt;/code&gt; 。 &lt;code&gt;{{outlet}}&lt;/code&gt; の名前を指定することもできます。これは、テンプレートで複数の &lt;code&gt;{{outlet}}&lt;/code&gt; を使用する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="da7f7101e86e008a15c9fc249f9d10eeeb8ad692" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;Ember.observer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ember.observer&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="cb6d38f9f2619d3888781eee8439db883f2023dd" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;Ember.on&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ember.on&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d5654e29a2f9b281a9e8375d997a1390c911e728" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;serialize&lt;/code&gt; for information on how to customize the serialized form of a record.</source>
          <target state="translated">レコードのシリアル化された形式をカスタマイズする方法については、 &lt;code&gt;serialize&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d9a00896f41c599da76dc20f479edb128563ac86" translate="yes" xml:space="preserve">
          <source>See Application.initializer for discussion on the usage of before and after.</source>
          <target state="translated">beforeとafterの使い方については、Application.initializerを参照してください。</target>
        </trans-unit>
        <trans-unit id="c586195d203dee29ed62d91d26341ea7df6918eb" translate="yes" xml:space="preserve">
          <source>See Ember.Application.initializer for discussion on the usage of before and after.</source>
          <target state="translated">before と after の使い方については、Ember.Application.initializer を参照してください。</target>
        </trans-unit>
        <trans-unit id="bede171d87f7cb61701998037e437c80414a95a2" translate="yes" xml:space="preserve">
          <source>See Ember.Templates.components.Textarea.</source>
          <target state="translated">Ember.Templates.components.Textarea を参照してください。</target>
        </trans-unit>
        <trans-unit id="e38cd17e666018827e69a44432616458686394b7" translate="yes" xml:space="preserve">
          <source>See RSVP.Promise.catch.</source>
          <target state="translated">RSVP.Promise.catchを参照してください。</target>
        </trans-unit>
        <trans-unit id="392314b527dfbd25d9b7ed433a5cad392661aecf" translate="yes" xml:space="preserve">
          <source>See RSVP.Promise.finally.</source>
          <target state="translated">RSVP.Promise.finallyを参照してください。</target>
        </trans-unit>
        <trans-unit id="2192c68214bde1365823cd88f18083860287db7d" translate="yes" xml:space="preserve">
          <source>See RSVP.Promise.then.</source>
          <target state="translated">RSVP.Promise.thenを参照してください。</target>
        </trans-unit>
        <trans-unit id="e4f6b4832e77e568563e9f9654dc677db5ef2bd6" translate="yes" xml:space="preserve">
          <source>See all observers for an object, key</source>
          <target state="translated">オブジェクトのすべてのオブザーバーを見る</target>
        </trans-unit>
        <trans-unit id="f44d1816a0f33954c0c1b606d935226b15a7a275" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#method_replaceWith&quot;&gt;replaceWith&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#method_replaceWith&quot;&gt;replaceWith&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1988f100a0c69901fb6b7c62063558d170fe6707" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.ControllerMixin/methods#replaceRoute&quot;&gt;replaceRoute&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.ControllerMixin/methods#replaceRoute&quot;&gt;replaceRoute&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="65b6e8e3055ab3ad8943a84067c6dde10eeb6b38" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://emberjs.com/api/classes/Ember.ControllerMixin.html#method_replaceRoute&quot;&gt;replaceRoute&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://emberjs.com/api/classes/Ember.ControllerMixin.html#method_replaceRoute&quot;&gt;replaceRoute&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="97dd9bb1a71a2721679fe0253b5d472ea10ebad5" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot;&gt;partial application&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot;&gt;部分適用&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b99a8f14eeb215db8b265ce373ed6b7c06c3bcdc" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;findMany&lt;/code&gt; and &lt;code&gt;coalesceFindRequests&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;findMany&lt;/code&gt; および &lt;code&gt;coalesceFindRequests&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="9055a79315a92197a81491b2935920ef41434f7b" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;groupRecordsForFindMany&lt;/code&gt; and &lt;code&gt;coalesceFindRequests&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;groupRecordsForFindMany&lt;/code&gt; および &lt;code&gt;coalesceFindRequests&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="b6e0086846357bfe5efd4585bcddabbf01147a92" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;shouldReloadAll&lt;/code&gt; and &lt;code&gt;shouldBackgroundReloadAll&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;shouldReloadAll&lt;/code&gt; および &lt;code&gt;shouldBackgroundReloadAll&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="b9f85b38eecb68cbfa9743890c0ab6a9e7d97afa" translate="yes" xml:space="preserve">
          <source>See also the documentation for &lt;code&gt;shouldBackgroundReloadRecord&lt;/code&gt; which defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">デフォルトが &lt;code&gt;true&lt;/code&gt; である &lt;code&gt;shouldBackgroundReloadRecord&lt;/code&gt; のドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="1131debc15fa7b2f9872d39240142f424b1f9d69" translate="yes" xml:space="preserve">
          <source>See more about &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component.html&quot;&gt;Ember components&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component.html&quot;&gt;Emberコンポーネントの&lt;/a&gt;詳細を見る</target>
        </trans-unit>
        <trans-unit id="3ba9f21e3fbfc35d0ad9d88b57d28f52f45794dc" translate="yes" xml:space="preserve">
          <source>See more about &lt;a href=&quot;https://emberjs.com/api/classes/Ember.TextArea.html&quot;&gt;Text Support Actions&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://emberjs.com/api/classes/Ember.TextArea.html&quot;&gt;テキストサポートアクションの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="d8d27c03873709d7fb4d40eef28f6d91b6c1accb" translate="yes" xml:space="preserve">
          <source>See more about &lt;a href=&quot;https://emberjs.com/api/classes/Ember.TextField.html&quot;&gt;Text Support Actions&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://emberjs.com/api/classes/Ember.TextField.html&quot;&gt;テキストサポートアクションの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="962ed2719e85d5ea79a83fc6aacb86ed6c442ba1" translate="yes" xml:space="preserve">
          <source>See that first, we are creating a new testing module using the &lt;a href=&quot;https://api.qunitjs.com/QUnit/module&quot;&gt;&lt;code&gt;QUnit.module&lt;/code&gt;&lt;/a&gt; function. This will scope all of our tests together into one group that can be configured and run independently from other modules defined in our test suite. Also, we have used &lt;code&gt;setupTest&lt;/code&gt;, one of the several test helpers provided by &lt;a href=&quot;https://github.com/emberjs/ember-qunit&quot;&gt;ember-qunit&lt;/a&gt;. The &lt;code&gt;setupTest&lt;/code&gt; helper provides us with some conveniences, such as the &lt;code&gt;this.owner&lt;/code&gt; object, that helps us to create or lookup objects which are needed to setup our test. In this example, we use the &lt;code&gt;this.owner&lt;/code&gt; object to lookup the service instance that becomes our test subject: &lt;code&gt;someThing&lt;/code&gt;. Note that in a unit test you can customize any object under test by setting its properties accordingly. We can use the &lt;code&gt;set&lt;/code&gt; method of the test object to achieve this.</source>
          <target state="translated">まず、&lt;a href=&quot;https://api.qunitjs.com/QUnit/module&quot;&gt; &lt;code&gt;QUnit.module&lt;/code&gt; &lt;/a&gt;関数を使用して新しいテストモジュールを作成していることを確認してください。これにより、すべてのテストが1つのグループにまとめられ、テストスイートで定義された他のモジュールから独立して構成および実行できるようになります。また、&lt;a href=&quot;https://github.com/emberjs/ember-qunit&quot;&gt;ember-qunitが&lt;/a&gt;提供するいくつかのテストヘルパーの1つである &lt;code&gt;setupTest&lt;/code&gt; を使用しました。 &lt;code&gt;setupTest&lt;/code&gt; ヘルパーは、次のようないくつかの便利さを提供してくれます &lt;code&gt;this.owner&lt;/code&gt; のセットアップに我々のテストを必要としている私たちが作成するのに役立ちますオブジェクト、または参照オブジェクト。この例では、 &lt;code&gt;this.owner&lt;/code&gt; オブジェクトを使用して、テストサブジェクトとなるサービスインスタンスを検索します： &lt;code&gt;someThing&lt;/code&gt; 。単体テストでは、プロパティを適宜設定することで、テスト対象のオブジェクトをカスタマイズできることに注意してください。これを実現するために、テストオブジェクトの &lt;code&gt;set&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="5aa5055098c1d7f1ee4bd170e24743c3af2dcaa6" translate="yes" xml:space="preserve">
          <source>See that we have used &lt;code&gt;moduleFor&lt;/code&gt;, one of the several unit-test helpers provided by Ember-Qunit. Test helpers provide us with some conveniences, such as the &lt;code&gt;subject&lt;/code&gt; function that handles lookup and instantiation for our object under test. Note that in a unit test you can customize the initialization of your object under test by passing to the &lt;code&gt;subject&lt;/code&gt; function an object containing the instance variables you would like to initialize. For example, to initialize the property 'foo' in our object under test, we would call &lt;code&gt;this.subject({ foo: 'bar' });&lt;/code&gt;</source>
          <target state="translated">Ember-Qunitが提供するいくつかの単体テストヘルパーの1つである &lt;code&gt;moduleFor&lt;/code&gt; を使用したことを確認してください。テストヘルパーは、テスト対象のオブジェクトのルックアップとインスタンス化を処理する &lt;code&gt;subject&lt;/code&gt; 関数などの便利な機能を提供します。単体テストでは、初期化するインスタンス変数を含むオブジェクトを &lt;code&gt;subject&lt;/code&gt; 関数に渡すことにより、テスト中のオブジェクトの初期化をカスタマイズできます。たとえば、テスト対象のオブジェクトのプロパティ 'foo'を初期化するには、 &lt;code&gt;this.subject({ foo: 'bar' });&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="ae9382bccb52583673509854efe6c33c1551b8a4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://emberjs.com/guides/routing/rendering-a-template/&quot;&gt;routing guide&lt;/a&gt; for more information on how your &lt;code&gt;route&lt;/code&gt; interacts with the &lt;code&gt;{{outlet}}&lt;/code&gt; helper. Note: Your content &lt;strong&gt;will not render&lt;/strong&gt; if there isn't an &lt;code&gt;{{outlet}}&lt;/code&gt; for it.</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt; と &lt;code&gt;{{outlet}}&lt;/code&gt; ヘルパーの相互作用の詳細については、&lt;a href=&quot;https://emberjs.com/guides/routing/rendering-a-template/&quot;&gt;ルーティングガイド&lt;/a&gt;をご覧ください。注：コンテンツの &lt;code&gt;{{outlet}}&lt;/code&gt; がない場合、コンテンツ&lt;strong&gt;はレンダリングされません&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2edbaf0ad072472661c6c4f6ea9bc0de07118fdf" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://guides.emberjs.com/release/configuring-ember/feature-flags/&quot;&gt;feature flag guide&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://guides.emberjs.com/release/configuring-ember/feature-flags/&quot;&gt;フィーチャートグルガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ddb5210f337735b81962ad926f8b222ce36247c9" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://guides.emberjs.com/release/routing/rendering-a-template/&quot;&gt;routing guide&lt;/a&gt; for more information on how your &lt;code&gt;route&lt;/code&gt; interacts with the &lt;code&gt;{{outlet}}&lt;/code&gt; helper. Note: Your content &lt;strong&gt;will not render&lt;/strong&gt; if there isn't an &lt;code&gt;{{outlet}}&lt;/code&gt; for it.</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt; が &lt;code&gt;{{outlet}}&lt;/code&gt; ヘルパーとどのように相互作用するかについての詳細は、&lt;a href=&quot;https://guides.emberjs.com/release/routing/rendering-a-template/&quot;&gt;ルーティングガイド&lt;/a&gt;を参照してください。注： &lt;code&gt;{{outlet}}&lt;/code&gt; がない場合、コンテンツ&lt;strong&gt;はレンダリングされません&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a57805751973ea57faaaae7c6e36d1170562cb5e" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;normalize&lt;/code&gt; documentation for more information.</source>
          <target state="translated">詳細については、 &lt;code&gt;normalize&lt;/code&gt; ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="466a6e9c7a1e57a171042a7f153306f2eec6b51f" translate="yes" xml:space="preserve">
          <source>See the Handlebars documentation on &lt;a href=&quot;http://handlebarsjs.com/#block-expressions&quot;&gt;block expressions&lt;/a&gt; for more.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://handlebarsjs.com/#block-expressions&quot;&gt;ブロック式&lt;/a&gt;に関するハンドルバーのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9f864ff30f39009bee652eeaa77b5d4e2cb3c219" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;code&gt;Ember.EventDispatcher&lt;/code&gt; for more information.</source>
          <target state="translated">詳細については、 &lt;code&gt;Ember.EventDispatcher&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f9ec3fb36372bb7e739319f5901a89f1c01950e5" translate="yes" xml:space="preserve">
          <source>See the documentation on &lt;code&gt;Application&lt;/code&gt;'s &lt;code&gt;rootElement&lt;/code&gt; for details.</source>
          <target state="translated">詳細については、 &lt;code&gt;Application&lt;/code&gt; の &lt;code&gt;rootElement&lt;/code&gt; に関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ea7a7d93a5f6e7b777d76bb4492e53852bacf5fc" translate="yes" xml:space="preserve">
          <source>See the documentation on &lt;code&gt;BootOptions&lt;/code&gt; for the options it takes.</source>
          <target state="translated">必要なオプションについては、 &lt;code&gt;BootOptions&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9d1186a24f13f7ddf3bb7bc489fbe38dfa0116f7" translate="yes" xml:space="preserve">
          <source>See the documentation on &lt;code&gt;Ember.Applications&lt;/code&gt;'s &lt;code&gt;rootElement&lt;/code&gt; for details.</source>
          <target state="translated">詳細については、 &lt;code&gt;Ember.Applications&lt;/code&gt; の &lt;code&gt;rootElement&lt;/code&gt; に関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="dea9dace86fce4ca0506d1cbbe4c73c1b60d132e" translate="yes" xml:space="preserve">
          <source>See the documentation on the &lt;code&gt;isBrowser&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt; and &lt;code&gt;rootElement&lt;/code&gt; properties on &lt;code&gt;ApplicationInstance.BootOptions&lt;/code&gt; for details.</source>
          <target state="translated">上のドキュメントを参照してください &lt;code&gt;isBrowser&lt;/code&gt; 、 &lt;code&gt;document&lt;/code&gt; や &lt;code&gt;rootElement&lt;/code&gt; のプロパティを &lt;code&gt;ApplicationInstance.BootOptions&lt;/code&gt; 詳細については。</target>
        </trans-unit>
        <trans-unit id="1adc341f4763a89fa8173df93fc2565a43324631" translate="yes" xml:space="preserve">
          <source>See the documentation on the &lt;code&gt;isBrowser&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt; and &lt;code&gt;rootElement&lt;/code&gt; properties on &lt;code&gt;Ember.ApplicationInstance.BootOptions&lt;/code&gt; for details.</source>
          <target state="translated">詳細については、 &lt;code&gt;isBrowser&lt;/code&gt; 、 &lt;code&gt;document&lt;/code&gt; 、および &lt;code&gt;rootElement&lt;/code&gt; プロパティに関する &lt;code&gt;Ember.ApplicationInstance.BootOptions&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="1824d460f7c3833816d20ccdd7e4598d1c806c7e" translate="yes" xml:space="preserve">
          <source>See the list of event names at the end of this page. Any event can be defined as an event handler in your component.</source>
          <target state="translated">このページの最後にあるイベント名のリストを参照してください。任意のイベントは、コンポーネント内のイベントハンドラとして定義できます。</target>
        </trans-unit>
        <trans-unit id="1a127955b9093eefeadddc3e86e6bc2ecfb11432" translate="yes" xml:space="preserve">
          <source>See {{#crossLink &quot;Ember.String/pluralize&quot;}}{{/crossLink}}</source>
          <target state="translated">{{#crossLink &quot;Ember.String/pluralize&quot;}}{{/crossLink}}を参照してください。</target>
        </trans-unit>
        <trans-unit id="b2ec09c4221cd9352fad5f335a19d089d3aff099" translate="yes" xml:space="preserve">
          <source>See {{#crossLink &quot;Ember.String/singularize&quot;}}{{/crossLink}}</source>
          <target state="translated">{{#crossLink &quot;Ember.String/singularize&quot;}}{{/crossLink}}を参照してください。</target>
        </trans-unit>
        <trans-unit id="091a6847e80f8f6e58ab446255013d6e21fc3d12" translate="yes" xml:space="preserve">
          <source>Self-Closing Tags</source>
          <target state="translated">セルフクロージング・タグ</target>
        </trans-unit>
        <trans-unit id="4908850b77074857fa2902c9a0c51ac951c3d066" translate="yes" xml:space="preserve">
          <source>Send an event. The execution of suspended listeners is skipped, and once listeners are removed. A listener without a target is executed on the passed object. If an array of actions is not passed, the actions stored on the passed object are invoked.</source>
          <target state="translated">イベントを送信します。サスペンドされたリスナーの実行はスキップされ、一旦リスナーは削除されます。ターゲットのないリスナーは、渡されたオブジェクト上で実行されます。アクションの配列が渡されない場合、渡されたオブジェクトに格納されているアクションが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a7cbd3195b0b1848a603028087345561cbdb3c83" translate="yes" xml:space="preserve">
          <source>Sending Actions</source>
          <target state="translated">アクションの送信</target>
        </trans-unit>
        <trans-unit id="090be3d6246540fa8c78341d0fd9ec8bb7d44ef7" translate="yes" xml:space="preserve">
          <source>Sending from the Console to the Inspector</source>
          <target state="translated">コンソールからインスペクタへの送信</target>
        </trans-unit>
        <trans-unit id="064119347ce21be3830f42ad99fd305e6bb36ddb" translate="yes" xml:space="preserve">
          <source>Sending from the Inspector to the Console</source>
          <target state="translated">インスペクタからコンソールへの送信</target>
        </trans-unit>
        <trans-unit id="37adf51f8e931f4ac6beffdc0bce4b8c9a345a4c" translate="yes" xml:space="preserve">
          <source>Sends a delete request for the record to the server.</source>
          <target state="translated">レコードの削除要求をサーバーに送信します。</target>
        </trans-unit>
        <trans-unit id="291d83532f286c48f65ce13d9158d367234e5871" translate="yes" xml:space="preserve">
          <source>Sends an action to the router, which will delegate it to the currently active route hierarchy per the bubbling rules explained under &lt;code&gt;actions&lt;/code&gt;.</source>
          <target state="translated">アクションをルーターに送信します。ルーターは、 &lt;code&gt;actions&lt;/code&gt; 説明されているバブリングルールに従って、現在アクティブなルート階層にアクションを委任します。</target>
        </trans-unit>
        <trans-unit id="21f60515d4413efa1948ac110388d426adab17c9" translate="yes" xml:space="preserve">
          <source>Serialize &lt;code&gt;belongsTo&lt;/code&gt; relationship when it is configured as an embedded object.</source>
          <target state="translated">埋め込みオブジェクトとして構成されている場合、 &lt;code&gt;belongsTo&lt;/code&gt; 関係をシリアライズします。</target>
        </trans-unit>
        <trans-unit id="59bee72c1fd17c82da45c231f035a209dfdee94a" translate="yes" xml:space="preserve">
          <source>Serializer</source>
          <target state="translated">Serializer</target>
        </trans-unit>
        <trans-unit id="ba84cd3aab23d1d10e849506dac174ba63cacf16" translate="yes" xml:space="preserve">
          <source>Serializer Resolution</source>
          <target state="translated">シリアライザの解像度</target>
        </trans-unit>
        <trans-unit id="77f5a897d372d976dbdf3ed3fd84a1f9fe2c636a" translate="yes" xml:space="preserve">
          <source>Serializes &lt;code&gt;hasMany&lt;/code&gt; relationships when it is configured as embedded objects.</source>
          <target state="translated">埋め込みオブジェクトとして構成されている場合、 &lt;code&gt;hasMany&lt;/code&gt; 関係をシリアル化します。</target>
        </trans-unit>
        <trans-unit id="859739a640dcccec7d3c89114d041ab46afff14a" translate="yes" xml:space="preserve">
          <source>Serializes the record and sends it to the server.</source>
          <target state="translated">レコードをシリアライズしてサーバーに送信します。</target>
        </trans-unit>
        <trans-unit id="aa92b22d8e89b667210a07e5334e64f079da918f" translate="yes" xml:space="preserve">
          <source>Serializes the record update and sends it to the server.</source>
          <target state="translated">レコードの更新をシリアライズしてサーバーに送信します。</target>
        </trans-unit>
        <trans-unit id="761efa682a827fca2803f8da4a302dc39dc2208e" translate="yes" xml:space="preserve">
          <source>Serializing a &lt;code&gt;belongsTo&lt;/code&gt; relationship removes the property that refers to the parent record</source>
          <target state="translated">&lt;code&gt;belongsTo&lt;/code&gt; 関係をシリアライズすると、親レコードを参照するプロパティが削除されます</target>
        </trans-unit>
        <trans-unit id="5fe4ca86767cc1bd91544bb1b9f91724e637ec8b" translate="yes" xml:space="preserve">
          <source>Serializing a &lt;code&gt;hasMany&lt;/code&gt; relationship does not remove the property that refers to the parent record.</source>
          <target state="translated">&lt;code&gt;hasMany&lt;/code&gt; 関係をシリアル化しても、親レコードを参照するプロパティは削除されません。</target>
        </trans-unit>
        <trans-unit id="b6798f213d4815c22490d46bda891a2bbd22a2a8" translate="yes" xml:space="preserve">
          <source>Serializing records</source>
          <target state="translated">レコードのシリアライズ</target>
        </trans-unit>
        <trans-unit id="01fe9a20a8fdeb0f312fdcea1363c6a939cf772b" translate="yes" xml:space="preserve">
          <source>Server-Side Rendering</source>
          <target state="translated">サーバーサイドレンダリング</target>
        </trans-unit>
        <trans-unit id="d4b08fda9668f41846dc7fb238475372e5a87571" translate="yes" xml:space="preserve">
          <source>Server-Side Rendering (also known as FastBoot)</source>
          <target state="translated">サーバサイドレンダリング (FastBoot としても知られています)</target>
        </trans-unit>
        <trans-unit id="ddedf41976a8db9f179e56d77dad30a5828aa47a" translate="yes" xml:space="preserve">
          <source>Server-Side Resource Discovery</source>
          <target state="translated">サーバーサイドリソース検出</target>
        </trans-unit>
        <trans-unit id="626629d0773ba5b8e704de2a8cf4d1b2671d6966" translate="yes" xml:space="preserve">
          <source>Server-backed API calls that may not fit Ember Data.</source>
          <target state="translated">Ember Data に適合しない可能性のあるサーバーバック API 呼び出し。</target>
        </trans-unit>
        <trans-unit id="3788673593a9fb3cb0da7a56e2684739ac286fa2" translate="yes" xml:space="preserve">
          <source>Server-sent events or notifications.</source>
          <target state="translated">サーバーから送信されたイベントや通知。</target>
        </trans-unit>
        <trans-unit id="9b6a5da899565637a0947288637800a9aafb0780" translate="yes" xml:space="preserve">
          <source>ServerError</source>
          <target state="translated">ServerError</target>
        </trans-unit>
        <trans-unit id="acca64b83535b9a1dff37a13cd176f393be7c195" translate="yes" xml:space="preserve">
          <source>Servers</source>
          <target state="translated">Servers</target>
        </trans-unit>
        <trans-unit id="329cb8b6ba8c427be7c09b298295c655415c7ac9" translate="yes" xml:space="preserve">
          <source>Service</source>
          <target state="translated">Service</target>
        </trans-unit>
        <trans-unit id="24bd63c80b86894e4c67eb6439773461722ba2f2" translate="yes" xml:space="preserve">
          <source>Service injections and arguments are available in the constructor.</source>
          <target state="translated">サービスインジェクションと引数は、コンストラクタで利用できます。</target>
        </trans-unit>
        <trans-unit id="5cbd584046863bc7b753e57e8681a98a87f36f0f" translate="yes" xml:space="preserve">
          <source>Services</source>
          <target state="translated">Services</target>
        </trans-unit>
        <trans-unit id="8c95ce8ed53a712d7d11fe978a559e8aacdfb5cc" translate="yes" xml:space="preserve">
          <source>Services and Utilities</source>
          <target state="translated">サービスとユーティリティ</target>
        </trans-unit>
        <trans-unit id="973e47a9c7779d6a3f292ac37ac9d79ba9c45893" translate="yes" xml:space="preserve">
          <source>Services are useful for features that require shared state or persistent connections. Example uses of services might include:</source>
          <target state="translated">サービスは、状態の共有や持続的な接続を必要とする機能に便利です。サービスの使用例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="44de33fce9e667d81467d696283b746a2b89ae0f" translate="yes" xml:space="preserve">
          <source>Services can be generated using Ember CLI's &lt;code&gt;service&lt;/code&gt; generator. For example, the following command will create the &lt;code&gt;ShoppingCart&lt;/code&gt; service:</source>
          <target state="translated">Ember CLIの &lt;code&gt;service&lt;/code&gt; ジェネレーターを使用してサービスを生成できます。たとえば、次のコマンドは &lt;code&gt;ShoppingCart&lt;/code&gt; サービスを作成します。</target>
        </trans-unit>
        <trans-unit id="f28ef67c082d95db9b197a590c7d6ac777b73ad0" translate="yes" xml:space="preserve">
          <source>Services must extend the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Service.html&quot;&gt;&lt;code&gt;Ember.Service&lt;/code&gt;&lt;/a&gt; base class:</source>
          <target state="translated">サービスは&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Service.html&quot;&gt; &lt;code&gt;Ember.Service&lt;/code&gt; &lt;/a&gt;基本クラスを拡張する必要があります。</target>
        </trans-unit>
        <trans-unit id="05197f4ec7c1ead15af7cb4af2fab7e9ba449c55" translate="yes" xml:space="preserve">
          <source>Services must extend the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Service&quot;&gt;&lt;code&gt;Service&lt;/code&gt;&lt;/a&gt; base class:</source>
          <target state="translated">サービスは、&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Service&quot;&gt; &lt;code&gt;Service&lt;/code&gt; &lt;/a&gt;基本クラスを拡張する必要があります。</target>
        </trans-unit>
        <trans-unit id="8d8ded186c4b66ab76f84a5c45d66e048959d458" translate="yes" xml:space="preserve">
          <source>Services which can be injected into multiple classes, sharing functionality and state between them.</source>
          <target state="translated">複数のクラスに注入し、クラス間で機能や状態を共有することができるサービス。</target>
        </trans-unit>
        <trans-unit id="ca477a114f59f850145f1a7532f31375acde781f" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;EmberENV.FEATURES&lt;/code&gt; in your application's &lt;code&gt;config/environment.js&lt;/code&gt; file to enable canary features in your application.</source>
          <target state="translated">アプリケーションの &lt;code&gt;config/environment.js&lt;/code&gt; ファイルで &lt;code&gt;EmberENV.FEATURES&lt;/code&gt; を設定して、アプリケーションでカナリア機能を有効にします。</target>
        </trans-unit>
        <trans-unit id="ac2ee51eb0d899834a5e76d58a0d52b264a8975b" translate="yes" xml:space="preserve">
          <source>Set a list of properties on an object. These properties are set inside a single &lt;code&gt;beginPropertyChanges&lt;/code&gt; and &lt;code&gt;endPropertyChanges&lt;/code&gt; batch, so observers will be buffered.</source>
          <target state="translated">オブジェクトのプロパティのリストを設定します。これらのプロパティは、単一の &lt;code&gt;beginPropertyChanges&lt;/code&gt; および &lt;code&gt;endPropertyChanges&lt;/code&gt; バッチ内で設定されるため、オブザーバーはバッファリングされます。</target>
        </trans-unit>
        <trans-unit id="bb507d8cf4504dfd969277729f9d6cb3da94b46d" translate="yes" xml:space="preserve">
          <source>Set the value of a boolean property to the opposite of its current value.</source>
          <target state="translated">ブール値プロパティの値を現在の値の反対に設定します。</target>
        </trans-unit>
        <trans-unit id="354b450dc637fea87122e449b4c6d64fd161d127" translate="yes" xml:space="preserve">
          <source>Set the value of a property to the current value minus some amount.</source>
          <target state="translated">プロパティの値を現在の値から一部を差し引いた値に設定します。</target>
        </trans-unit>
        <trans-unit id="0a474206fc22982beb1518f159723d7d5b1a7bd6" translate="yes" xml:space="preserve">
          <source>Set the value of a property to the current value plus some amount.</source>
          <target state="translated">プロパティの値を現在の値にある程度の金額を加えた値に設定します。</target>
        </trans-unit>
        <trans-unit id="e42433abf46583349e14e913f6b0bddd60fc0563" translate="yes" xml:space="preserve">
          <source>Set this to provide an alternate class to &lt;code&gt;DefaultResolver&lt;/code&gt;</source>
          <target state="translated">これを設定して、 &lt;code&gt;DefaultResolver&lt;/code&gt; に代替クラスを提供します</target>
        </trans-unit>
        <trans-unit id="022856defe2402ee0a7880769473d89d1b0fd118" translate="yes" xml:space="preserve">
          <source>Set this to provide an alternate class to &lt;code&gt;Ember.DefaultResolver&lt;/code&gt;</source>
          <target state="translated">これを設定して、 &lt;code&gt;Ember.DefaultResolver&lt;/code&gt; に代替クラスを提供します。</target>
        </trans-unit>
        <trans-unit id="b2871131570de12ffc4fe0e0fa49f2aa7a81352e" translate="yes" xml:space="preserve">
          <source>Sets a list of properties at once. These properties are set inside a single &lt;code&gt;beginPropertyChanges&lt;/code&gt; and &lt;code&gt;endPropertyChanges&lt;/code&gt; batch, so observers will be buffered.</source>
          <target state="translated">プロパティのリストを一度に設定します。これらのプロパティは、単一の &lt;code&gt;beginPropertyChanges&lt;/code&gt; および &lt;code&gt;endPropertyChanges&lt;/code&gt; バッチ内で設定されるため、オブザーバーはバッファリングされます。</target>
        </trans-unit>
        <trans-unit id="2478dff276ae3c77d7f495b39bbafe7dedf46174" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;disabled&lt;/code&gt; attribute of the &lt;code&gt;Checkbox&lt;/code&gt;'s element</source>
          <target state="translated">&lt;code&gt;Checkbox&lt;/code&gt; の要素の &lt;code&gt;disabled&lt;/code&gt; 属性を設定します</target>
        </trans-unit>
        <trans-unit id="e54a99e025defe6d81185356e0087e36fb02c41f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;rel&lt;/code&gt; attribute of the &lt;code&gt;LinkComponent&lt;/code&gt;'s HTML element.</source>
          <target state="translated">&lt;code&gt;LinkComponent&lt;/code&gt; のHTML要素の &lt;code&gt;rel&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="d5e1f88540ae2f1f6c34ad87101fb61aaa2e4704" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;tabindex&lt;/code&gt; attribute of the &lt;code&gt;LinkComponent&lt;/code&gt;'s HTML element.</source>
          <target state="translated">&lt;code&gt;LinkComponent&lt;/code&gt; のHTML要素の &lt;code&gt;tabindex&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="2bdac2845cc69ea660701ca0222c09a0c44c26f0" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;target&lt;/code&gt; attribute of the &lt;code&gt;LinkComponent&lt;/code&gt;'s HTML element.</source>
          <target state="translated">&lt;code&gt;LinkComponent&lt;/code&gt; のHTML要素の &lt;code&gt;target&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="fcf346b3d86476123ef32bd696299134f1d94520" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;title&lt;/code&gt; attribute of the &lt;code&gt;LinkComponent&lt;/code&gt;'s HTML element.</source>
          <target state="translated">&lt;code&gt;LinkComponent&lt;/code&gt; のHTML要素の &lt;code&gt;title&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="51b9025622045e7bea6fb4165ada413012de1269" translate="yes" xml:space="preserve">
          <source>Sets the URL-changing method to be employed at the end of a successful transition. By default, a new Transition will just use &lt;code&gt;updateURL&lt;/code&gt;, but passing 'replace' to this method will cause the URL to update using 'replaceWith' instead. Omitting a parameter will disable the URL change, allowing for transitions that don't update the URL at completion (this is also used for handleURL, since the URL has already changed before the transition took place).</source>
          <target state="translated">正常な移行の最後に使用されるURL変更方法を設定します。デフォルトでは、新しいトランジションは &lt;code&gt;updateURL&lt;/code&gt; のみを使用しますが、このメソッドに「replace」を渡すと、代わりに「replaceWith」を使用してURLが更新されます。パラメータを省略すると、URLの変更が無効になり、完了時にURLを更新しない遷移が可能になります（遷移が行われる前にURLがすでに変更されているため、これはhandleURLにも使用されます）。</target>
        </trans-unit>
        <trans-unit id="b72787353f86d425923f841fb4aef6f74ac404b9" translate="yes" xml:space="preserve">
          <source>Sets the dependent keys on this computed property. Pass any number of arguments containing key paths that this computed property depends on.</source>
          <target state="translated">このcomputedプロパティに依存するキーを設定します。このcomputedプロパティが依存するキー・パスを含む任意の数の引数を渡します。</target>
        </trans-unit>
        <trans-unit id="2f675f90939d774f421170557b095c97251f63f9" translate="yes" xml:space="preserve">
          <source>Sets the helper manager for an object or function.</source>
          <target state="translated">オブジェクトや関数のヘルパー・マネージャーを設定します。</target>
        </trans-unit>
        <trans-unit id="8dcc21cc9416b36d9a48400e5dcfa0b900385d0e" translate="yes" xml:space="preserve">
          <source>Sets the provided key or path to the value.</source>
          <target state="translated">指定されたキーまたはパスを値に設定します。</target>
        </trans-unit>
        <trans-unit id="871a5db89a47b1c8ac126c47ae45dbaed6801707" translate="yes" xml:space="preserve">
          <source>Sets the value of a property on an object, respecting computed properties and notifying observers and other listeners of the change. If the property is not defined but the object implements the &lt;code&gt;setUnknownProperty&lt;/code&gt; method then that will be invoked as well.</source>
          <target state="translated">計算されたプロパティを尊重し、オブザーバーや他のリスナーに変更を通知して、オブジェクトのプロパティの値を設定します。プロパティは定義されていませんが、オブジェクトが &lt;code&gt;setUnknownProperty&lt;/code&gt; メソッドを実装している場合は、それも呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4d62cb5e39e4fa575e3defe17489ed6fd18a914c" translate="yes" xml:space="preserve">
          <source>Sets the value of a property on an object, respecting computed properties and notifying observers and other listeners of the change. If the specified property is not defined on the object and the object implements the &lt;code&gt;setUnknownProperty&lt;/code&gt; method, then instead of setting the value of the property on the object, its &lt;code&gt;setUnknownProperty&lt;/code&gt; handler will be invoked with the two parameters &lt;code&gt;keyName&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">オブジェクトのプロパティの値を設定し、計算されたプロパティを尊重し、オブザーバーや他のリスナーに変更を通知します。指定されたプロパティがオブジェクトで定義されておらず、オブジェクトが &lt;code&gt;setUnknownProperty&lt;/code&gt; メソッドを実装している場合、オブジェクトのプロパティの値を設定する代わりに、その &lt;code&gt;setUnknownProperty&lt;/code&gt; ハンドラーが2つのパラメーター &lt;code&gt;keyName&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="290a8a4289954bb2a5ee87f2331ca5e9d2142b2b" translate="yes" xml:space="preserve">
          <source>Sets the value on the named property for each member. This is more ergonomic than using other methods defined on this helper. If the object implements Ember.Observable, the value will be changed to &lt;code&gt;set(),&lt;/code&gt; otherwise it will be set directly. &lt;code&gt;null&lt;/code&gt; objects are skipped.</source>
          <target state="translated">各メンバーの名前付きプロパティに値を設定します。これは、このヘルパーで定義された他のメソッドを使用するよりも人間工学的です。オブジェクトがEmber.Observableを実装している場合、値は &lt;code&gt;set(),&lt;/code&gt; 変更されます。それ以外の場合は、直接設定されます。 &lt;code&gt;null&lt;/code&gt; オブジェクトはスキップされます。</target>
        </trans-unit>
        <trans-unit id="742c211cf05d64e5ad624ceb43a028370924a427" translate="yes" xml:space="preserve">
          <source>Sets the value on the named property for each member. This is more ergonomic than using other methods defined on this helper. If the object implements Observable, the value will be changed to &lt;code&gt;set(),&lt;/code&gt; otherwise it will be set directly. &lt;code&gt;null&lt;/code&gt; objects are skipped.</source>
          <target state="translated">各メンバーの名前付きプロパティに値を設定します。これは、このヘルパーで定義されている他の方法を使用するよりも人間工学的です。オブジェクトがObservableを実装している場合、値は &lt;code&gt;set(),&lt;/code&gt; 変更されます。それ以外の場合は、直接設定されます。 &lt;code&gt;null&lt;/code&gt; オブジェクトはスキップされます。</target>
        </trans-unit>
        <trans-unit id="8bb3a4f26234490d92af65a4b7728511ce022d83" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;serialize&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enforces serialization for hasMany relationships even if it's neither a many-to-many nor many-to-none relationship.</source>
          <target state="translated">&lt;code&gt;serialize&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、多対多または多対非の関係でなくても、hasMany関係のシリアル化が強制されます。</target>
        </trans-unit>
        <trans-unit id="b425d7e560cd8c0761f98a652da8de1351923229" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;sortQueryParams&lt;/code&gt; to a falsey value will respect the original order.</source>
          <target state="translated">&lt;code&gt;sortQueryParams&lt;/code&gt; をfalse値に設定すると、元の順序が尊重されます。</target>
        </trans-unit>
        <trans-unit id="da33b396a5b97cdc6b9f02bcd176c913528421e0" translate="yes" xml:space="preserve">
          <source>Setting Computed Properties</source>
          <target state="translated">計算されたプロパティの設定</target>
        </trans-unit>
        <trans-unit id="b2159831f0f013e12890235b72b76c9ed8107ba6" translate="yes" xml:space="preserve">
          <source>Setting any dependent property will propagate changes through any computed properties that depend on them, all the way down the chain of computed properties you've created.</source>
          <target state="translated">依存性のあるプロパティを設定すると、そのプロパティに依存するすべての計算されたプロパティを通して、あなたが作成した計算されたプロパティのチェーンの下まで、変更が伝わります。</target>
        </trans-unit>
        <trans-unit id="4c811f11c80da676754851d73427229f494eb7e2" translate="yes" xml:space="preserve">
          <source>Setting attributes on &lt;code&gt;&amp;lt;Input&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;Input&amp;gt;&lt;/code&gt; 属性を設定する</target>
        </trans-unit>
        <trans-unit id="3caba60e55b03843eed07241fa6a00961df6443b" translate="yes" xml:space="preserve">
          <source>Setting attributes on &lt;code&gt;&amp;lt;Textarea&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;Textarea&amp;gt;&lt;/code&gt; に属性を設定する</target>
        </trans-unit>
        <trans-unit id="5789f3a613624c39e98b0a04a128ab506fbe4ddc" translate="yes" xml:space="preserve">
          <source>Setting coalesceFindRequests to &lt;code&gt;true&lt;/code&gt; also works for &lt;code&gt;store.find&lt;/code&gt; requests and &lt;code&gt;belongsTo&lt;/code&gt; relationships accessed within the same runloop. If you set &lt;code&gt;coalesceFindRequests: true&lt;/code&gt;</source>
          <target state="translated">coalesceFindRequestsを &lt;code&gt;true&lt;/code&gt; に設定すると、同じrunloop内でアクセスされる &lt;code&gt;store.find&lt;/code&gt; 要求および &lt;code&gt;belongsTo&lt;/code&gt; 関係にも機能します。 &lt;code&gt;coalesceFindRequests: true&lt;/code&gt; を設定した場合：true</target>
        </trans-unit>
        <trans-unit id="e771b554952852c7a0bf2e49bb60a2514950d6a7" translate="yes" xml:space="preserve">
          <source>Setting properties on an HTML element, on the other hand, is a different story, because there's no way to set a property using HTML syntax.</source>
          <target state="translated">一方、HTML要素にプロパティを設定する場合は話が別で、HTMLの構文を使ってプロパティを設定する方法はありません。</target>
        </trans-unit>
        <trans-unit id="afe29c914c9d854075bf9ebee96af7585fe24770" translate="yes" xml:space="preserve">
          <source>Setting properties on the component in &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement&quot;&gt;&lt;code&gt;didInsertElement()&lt;/code&gt;&lt;/a&gt; triggers a re-render, and for performance reasons, is not allowed.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement&quot;&gt; &lt;code&gt;didInsertElement()&lt;/code&gt; で&lt;/a&gt;コンポーネントのプロパティを設定すると再レンダリングがトリガーされますが、パフォーマンス上の理由から許可されていません。</target>
        </trans-unit>
        <trans-unit id="f02aee210f24787a1e623ad68c0d1a1b060d3aeb" translate="yes" xml:space="preserve">
          <source>Setting query-params</source>
          <target state="translated">クエリパラメータの設定</target>
        </trans-unit>
        <trans-unit id="3d7cc07cf937737b1517c6bf9374d4cc18998479" translate="yes" xml:space="preserve">
          <source>Setting up Data for the Nested Detail Route</source>
          <target state="translated">ネストされた詳細ルートのデータを設定する</target>
        </trans-unit>
        <trans-unit id="04b56454c3e76a73bcf804097a9d07a7e2424bf3" translate="yes" xml:space="preserve">
          <source>Setup callbacks to be fired when the test helpers are injected into your application.</source>
          <target state="translated">テストヘルパーがアプリケーションに注入されたときに発生するコールバックを設定します。</target>
        </trans-unit>
        <trans-unit id="7fd361ad8b078a558ea7b7da0dad0bbe6c028891" translate="yes" xml:space="preserve">
          <source>Several of the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html&quot;&gt;Ember.computed&lt;/a&gt; macros utilize the &lt;code&gt;[]&lt;/code&gt; key to implement common use-cases. For instance, to create a computed property that mapped properties from an array, you could use &lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html#method_map&quot;&gt;Ember.computed.map&lt;/a&gt; or build the computed property yourself:</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html&quot;&gt;Ember.computed&lt;/a&gt;マクロのいくつかは、 &lt;code&gt;[]&lt;/code&gt; キーを使用して一般的なユースケースを実装しています。たとえば、配列からプロパティをマップする計算プロパティを作成するには、&lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html#method_map&quot;&gt;Ember.computed.mapを&lt;/a&gt;使用するか、計算プロパティを自分で作成します。</target>
        </trans-unit>
        <trans-unit id="56671d09d11f94a0111d047a53973e69ddd5107c" translate="yes" xml:space="preserve">
          <source>Shadow DOM</source>
          <target state="translated">シャドーDOM</target>
        </trans-unit>
        <trans-unit id="a07efaea553500b80c6b1e25c2a1ad7f85b92746" translate="yes" xml:space="preserve">
          <source>Sharing Component Data with its Wrapped Content</source>
          <target state="translated">コンポーネントデータをラッピングされたコンテンツと共有する</target>
        </trans-unit>
        <trans-unit id="5765ccb23e0fb8bade85df4ffb0d4efcfedb02e5" translate="yes" xml:space="preserve">
          <source>Shift an object from start of array or nil if none are left. Works just like &lt;code&gt;shift()&lt;/code&gt; but it is KVO-compliant.</source>
          <target state="translated">オブジェクトを配列の先頭からシフトするか、オブジェクトが残っていない場合はnilにします。 &lt;code&gt;shift()&lt;/code&gt; と同じように機能しますが、KVOに準拠しています。</target>
        </trans-unit>
        <trans-unit id="bcb7f8e893a6eec69601e5f12cb167564cd7ea66" translate="yes" xml:space="preserve">
          <source>Should I use controllers in my application? I've heard they're going away!</source>
          <target state="translated">アプリケーションでコントローラーを使うべきか?なくなるって聞いたんだけど!?</target>
        </trans-unit>
        <trans-unit id="beeea36abf2de6573612e2054086e5dc5b962f2d" translate="yes" xml:space="preserve">
          <source>Should actually replace the specified objects on the content array. You can override this method in subclasses to transform the content item into something new.</source>
          <target state="translated">コンテンツ配列上の指定されたオブジェクトを実際に置き換える必要があります。サブクラスでこのメソッドをオーバーライドすると、コンテンツアイテムを新しいものに変換できます。</target>
        </trans-unit>
        <trans-unit id="6c4c063ccc2f6265cd6469510436e8100e2e23a9" translate="yes" xml:space="preserve">
          <source>Should actually retrieve the object at the specified index from the content. You can override this method in subclasses to transform the content item to something new.</source>
          <target state="translated">実際にコンテンツから指定されたインデックスのオブジェクトを取得する必要があります。サブクラスでこのメソッドをオーバーライドすることで、コンテンツの項目を新しいものに変換することができます。</target>
        </trans-unit>
        <trans-unit id="ce6b3b9a9ec11b6f601d2c791d118fb24339f616" translate="yes" xml:space="preserve">
          <source>Should cause Ember to rerender if and when they change</source>
          <target state="translated">変更があった場合には、Emberが再レンダリングするようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="283dd7128cd25f308270c83f4e6274499295d261" translate="yes" xml:space="preserve">
          <source>Should we use controllers in my application? I've heard they're going away!</source>
          <target state="translated">アプリケーションにコントローラを使うべきでしょうか?廃止されると聞きましたが。</target>
        </trans-unit>
        <trans-unit id="e3cbebe0c33c59b226e4d26667ceeeb607570eb4" translate="yes" xml:space="preserve">
          <source>Show more details for a selected rental</source>
          <target state="translated">選択したレンタルの詳細を表示</target>
        </trans-unit>
        <trans-unit id="63295e39bc7e2edd921e15de80cf52a0162dce6f" translate="yes" xml:space="preserve">
          <source>Show rentals on the home page</source>
          <target state="translated">ホームページにレンタルを表示する</target>
        </trans-unit>
        <trans-unit id="a6df6bc849e9ed5bad5bd1b761e2d78888c983b9" translate="yes" xml:space="preserve">
          <source>Showing a property</source>
          <target state="translated">物件の表示</target>
        </trans-unit>
        <trans-unit id="5feabe6b60582bbf4b541103f30632fee297466c" translate="yes" xml:space="preserve">
          <source>Sideloaded Data</source>
          <target state="translated">サイドロードされたデータ</target>
        </trans-unit>
        <trans-unit id="f5028052c614a640caa81611333680ece76b35e0" translate="yes" xml:space="preserve">
          <source>Silencing Deprecation Warnings During Compile</source>
          <target state="translated">コンパイル時に非推奨の警告を表示しないようにする</target>
        </trans-unit>
        <trans-unit id="41b23908c12c4f5949e08b4e02f7c021d977337b" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;transitionTo&lt;/code&gt;, but instead of adding the destination to the browser's URL history, it replaces the entry for the current route. When the user clicks the &quot;back&quot; button in the browser, there will be fewer steps. This is most commonly used to manage redirects in a way that does not cause confusing additions to the user's browsing history.</source>
          <target state="translated">&lt;code&gt;transitionTo&lt;/code&gt; に似ていますが、ブラウザのURL履歴に宛先を追加する代わりに、現在のルートのエントリを置き換えます。ユーザーがブラウザの「戻る」ボタンをクリックすると、手順が少なくなります。これは、ユーザーの閲覧履歴に紛らわしい追加を引き起こさない方法でリダイレクトを管理するために最も一般的に使用されます。</target>
        </trans-unit>
        <trans-unit id="af61b24dae3801016bbf21366ede7ddbe142922e" translate="yes" xml:space="preserve">
          <source>Similar to how the default &lt;code&gt;loading&lt;/code&gt; event handlers are implemented, the default &lt;code&gt;error&lt;/code&gt; handlers will look for an appropriate error substate to enter, if one can be found.</source>
          <target state="translated">デフォルトの &lt;code&gt;loading&lt;/code&gt; イベントハンドラーの実装方法と同様に、デフォルトの &lt;code&gt;error&lt;/code&gt; ハンドラーは、適切なエラーサブステートが見つかれば、それを探して入力します。</target>
        </trans-unit>
        <trans-unit id="717acf41849b10523800fa58b23cc2b20a9ef6da" translate="yes" xml:space="preserve">
          <source>Similar to map, this specialized function returns the value of the named property on all items in the enumeration.</source>
          <target state="translated">map と同様に、この特殊な関数は、列挙されたすべての項目について、指定されたプロパティの値を返します。</target>
        </trans-unit>
        <trans-unit id="74e714802d7db3b86e903677715205f93a921c22" translate="yes" xml:space="preserve">
          <source>Similarly, if your backend store provides data in a format other than JSON API, you can use the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#method_normalizeResponse&quot;&gt;&lt;code&gt;normalizeResponse()&lt;/code&gt;&lt;/a&gt; hook. Using the same example as above, if the server provides data that looks like:</source>
          <target state="translated">同様に、バックエンドストアがJSON API以外の形式でデータを提供する場合は、&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#method_normalizeResponse&quot;&gt; &lt;code&gt;normalizeResponse()&lt;/code&gt; &lt;/a&gt;フックを使用できます。上記と同じ例を使用して、サーバーが次のようなデータを提供する場合：</target>
        </trans-unit>
        <trans-unit id="3618bd19508f0430379f994f5efcc9f7fdc1d229" translate="yes" xml:space="preserve">
          <source>Similarly, if your backend store provides data in a format other than JSON:API, you can use the &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer/methods#normalizeResponse&quot;&gt;&lt;code&gt;normalizeResponse()&lt;/code&gt;&lt;/a&gt; hook. Using the same example as above, if the server provides data that looks like:</source>
          <target state="translated">同様に、バックエンドストアがJSON：API以外の形式でデータを提供する場合は、&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer/methods#normalizeResponse&quot;&gt; &lt;code&gt;normalizeResponse()&lt;/code&gt; &lt;/a&gt;フックを使用できます。上記と同じ例を使用して、サーバーが次のようなデータを提供する場合：</target>
        </trans-unit>
        <trans-unit id="e5ba23a2acdb58eae654126aeb02c16cfa736653" translate="yes" xml:space="preserve">
          <source>Similarly, in response to a &lt;code&gt;GET&lt;/code&gt; request for &lt;code&gt;/posts&lt;/code&gt;, the JSON should look like this:</source>
          <target state="translated">同様に、 &lt;code&gt;/posts&lt;/code&gt; に対する &lt;code&gt;GET&lt;/code&gt; リクエストに応答して、JSONは次のようになります。</target>
        </trans-unit>
        <trans-unit id="c15fa4b758d35cc97d9959bcc45edd294156d605" translate="yes" xml:space="preserve">
          <source>Simple Example</source>
          <target state="translated">簡単な例</target>
        </trans-unit>
        <trans-unit id="5d072a0f490db522bd703110a84349b2f76d1d40" translate="yes" xml:space="preserve">
          <source>Simple Transition Example</source>
          <target state="translated">シンプルな遷移の例</target>
        </trans-unit>
        <trans-unit id="38e622f586624128158ede91d1097cbecc68bbfa" translate="yes" xml:space="preserve">
          <source>Simply add &lt;code&gt;await pauseTest();&lt;/code&gt; to your test code, then save. When the test reaches this line, it will pause, allowing you to inspect the state of your application. When you are done, type &lt;code&gt;resumeTest()&lt;/code&gt; in the browser console to continue the test.</source>
          <target state="translated">単に &lt;code&gt;await pauseTest();&lt;/code&gt; 追加します。テストコードに保存してから保存します。テストがこの行に達すると、一時停止し、アプリケーションの状態を検査できるようになります。完了したら、ブラウザコンソールに &lt;code&gt;resumeTest()&lt;/code&gt; と入力して、テストを続行します。</target>
        </trans-unit>
        <trans-unit id="7b4ed4e4198e38ae80e5b6a6af9aeb8f248f3233" translate="yes" xml:space="preserve">
          <source>Simply converts the enumerable into a genuine array. The order is not guaranteed. Corresponds to the method implemented by Prototype.</source>
          <target state="translated">単純に列挙可能なものを純正配列に変換します。順番は保証されていません。Prototypeで実装されている方法に対応しています。</target>
        </trans-unit>
        <trans-unit id="58e976acf9398464f5580a302f815169000d3a0c" translate="yes" xml:space="preserve">
          <source>Simply converts the object into a genuine array. The order is not guaranteed. Corresponds to the method implemented by Prototype.</source>
          <target state="translated">単純にオブジェクトを純正の配列に変換します。順序は保証されません。Prototypeで実装されているメソッドに対応しています。</target>
        </trans-unit>
        <trans-unit id="fe202f68e7bb9a71a693a3787ee7684995266c8a" translate="yes" xml:space="preserve">
          <source>Simply define a template called &lt;code&gt;loading&lt;/code&gt; (and optionally a corresponding route) that Ember will transition to. The intermediate transition into the loading substate happens immediately (synchronously), the URL won't be updated, and, unlike other transitions, the currently active transition won't be aborted.</source>
          <target state="translated">Emberが移行する &lt;code&gt;loading&lt;/code&gt; （およびオプションで対応するルート）と呼ばれるテンプレートを定義するだけです。ローディングサブステートへの中間遷移はすぐに（同期的に）発生し、URLは更新されません。また、他の遷移とは異なり、現在アクティブな遷移は中止されません。</target>
        </trans-unit>
        <trans-unit id="97cf625e23a87e8fb775cd15dcb177e76da7d713" translate="yes" xml:space="preserve">
          <source>Simulates a key event type, e.g. &lt;code&gt;keypress&lt;/code&gt;, &lt;code&gt;keydown&lt;/code&gt;, &lt;code&gt;keyup&lt;/code&gt; with the desired keyCode on element found by the selector.</source>
          <target state="translated">シミュレートキーイベントタイプ、例えば &lt;code&gt;keypress&lt;/code&gt; 、 &lt;code&gt;keydown&lt;/code&gt; 、 &lt;code&gt;keyup&lt;/code&gt; 要素に所望のキーコードでは、セレクタによって見出さ。</target>
        </trans-unit>
        <trans-unit id="9d573de332969d08498e24e616e22a931b37eb39" translate="yes" xml:space="preserve">
          <source>Simulates a key event, e.g. &lt;code&gt;keypress&lt;/code&gt;, &lt;code&gt;keydown&lt;/code&gt;, &lt;code&gt;keyup&lt;/code&gt; with the desired keyCode Example:</source>
          <target state="translated">シミュレートキーイベント、例えば &lt;code&gt;keypress&lt;/code&gt; 、 &lt;code&gt;keydown&lt;/code&gt; 、 &lt;code&gt;keyup&lt;/code&gt; 希望のkeyCode例と：</target>
        </trans-unit>
        <trans-unit id="5ff3adcfa93d61b2bd68be16bf0530824ab668cd" translate="yes" xml:space="preserve">
          <source>Simulating API requests</source>
          <target state="translated">APIリクエストのシミュレーション</target>
        </trans-unit>
        <trans-unit id="fe22422d207cd0772ccfa88aaa36392c7d87ecf6" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;didUpdateAttrs&lt;/code&gt; is called prior to rerender, you can use this hook to execute code when specific attributes are changed. This hook can be an effective alternative to an observer, as it will run prior to a re-render, but after an attribute has changed.</source>
          <target state="translated">以来 &lt;code&gt;didUpdateAttrs&lt;/code&gt; が前に再レンダリングに呼ばれて、あなたは、特定の属性が変更されたときにコードを実行するために、このフックを使用することができます。このフックは再レンダリングの前に実行されますが、属性が変更された後に実行されるため、オブザーバーの効果的な代替手段になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f64ef341b1692fc1922e959a50c6efb02dd93401" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;srcObject&lt;/code&gt; is a property and not an HTML attribute, you can use the &lt;code&gt;prop&lt;/code&gt; element modifier from &lt;a href=&quot;https://www.npmjs.com/package/ember-prop-modifier&quot;&gt;ember-prop-modifier&lt;/a&gt; like this:</source>
          <target state="translated">以来 &lt;code&gt;srcObject&lt;/code&gt; は財産ではなくHTML属性では、使用することができます &lt;code&gt;prop&lt;/code&gt; から要素修飾子&lt;a href=&quot;https://www.npmjs.com/package/ember-prop-modifier&quot;&gt;残り火-プロプ修飾子&lt;/a&gt;このように：</target>
        </trans-unit>
        <trans-unit id="b527d855f262ec89fbcbd6c18de1d551d43311d9" translate="yes" xml:space="preserve">
          <source>Since Ember addons are npm packages, &lt;code&gt;ember install&lt;/code&gt; installs them in the &lt;code&gt;node_modules&lt;/code&gt; directory, and makes an entry in &lt;code&gt;package.json&lt;/code&gt;. Be sure to restart your server after the addon has installed successfully. Restarting the server will incorporate the new CSS and refreshing the browser window will give you this:</source>
          <target state="translated">Emberアドオンはnpmパッケージである &lt;code&gt;ember install&lt;/code&gt; 、ember installはそれらを &lt;code&gt;node_modules&lt;/code&gt; ディレクトリにインストールし、 &lt;code&gt;package.json&lt;/code&gt; にエントリを作成します。アドオンが正常にインストールされたら、必ずサーバーを再起動してください。サーバーを再起動すると新しいCSSが組み込まれ、ブラウザウィンドウを更新すると次のようになります。</target>
        </trans-unit>
        <trans-unit id="ec8081d027ecc0077fdd772e1c50ff82e993f556" translate="yes" xml:space="preserve">
          <source>Since Ember is a template-oriented framework, not all developers need to use JavaScript when working on Ember apps. Some developers may be more focused on the structure of an app's templates, its styles, or the accessibility of an app. However, it's good to have some general knowledge of JavaScript for the places where it is used.</source>
          <target state="translated">Emberはテンプレート指向のフレームワークであるため、すべての開発者がEmberアプリの開発時にJavaScriptを使用する必要はありません。開発者の中には、アプリのテンプレートの構造やスタイル、あるいはアプリのアクセシビリティを重視する人もいるでしょう。しかし、JavaScriptが使用される場所のために、JavaScriptの一般的な知識を持っていることは良いことです。</target>
        </trans-unit>
        <trans-unit id="5760823c11d76bb4f0f8aa397fbe539249ff2741" translate="yes" xml:space="preserve">
          <source>Since a JSON API Document can have meta defined in multiple locations you can use the specific serializer hooks if you need to customize the meta.</source>
          <target state="translated">JSON API ドキュメントは複数の場所でメタを定義することができるので、メタをカスタマイズする必要がある場合は、特定のシリアライザフックを使用することができます。</target>
        </trans-unit>
        <trans-unit id="a3a256154d2dce95ced059699c91ae1f2f5c9d2c" translate="yes" xml:space="preserve">
          <source>Since a route's &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_beforeModel&quot;&gt;&lt;code&gt;beforeModel()&lt;/code&gt;&lt;/a&gt; executes before the &lt;code&gt;model()&lt;/code&gt; hook, it's a good place to do a redirect if you don't need any information that is contained in the model.</source>
          <target state="translated">ルートの&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_beforeModel&quot;&gt; &lt;code&gt;beforeModel()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;model()&lt;/code&gt; フックの前に実行されるため、モデルに含まれる情報が必要ない場合は、リダイレクトを行うのに適しています。</target>
        </trans-unit>
        <trans-unit id="682b1a98a4f99c8285fdf96f23e6c200bb6255b0" translate="yes" xml:space="preserve">
          <source>Since a route's &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#beforeModel&quot;&gt;&lt;code&gt;beforeModel()&lt;/code&gt;&lt;/a&gt; executes before the &lt;code&gt;model()&lt;/code&gt; hook, it's a good place to do a redirect if you don't need any information that is contained in the model.</source>
          <target state="translated">ルートの&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#beforeModel&quot;&gt; &lt;code&gt;beforeModel()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;model()&lt;/code&gt; フックの前に実行されるため、モデルに含まれている情報が必要ない場合は、リダイレクトを実行するのに適した場所です。</target>
        </trans-unit>
        <trans-unit id="1df2b7cd90ba8966b9e8733c80dc430ec4b6a752" translate="yes" xml:space="preserve">
          <source>Since our component is expecting the filter process to be asynchronous, we return promises from our filter, using &lt;a href=&quot;http://emberjs.com/api/classes/RSVP.html&quot;&gt;Ember's RSVP library&lt;/a&gt;.</source>
          <target state="translated">コンポーネントはフィルタープロセスが非同期であることを&lt;a href=&quot;http://emberjs.com/api/classes/RSVP.html&quot;&gt;想定しているため&lt;/a&gt;、EmberのRSVPライブラリを使用して、フィルターからpromiseを返します。</target>
        </trans-unit>
        <trans-unit id="410a75600d988e5e0052e587fd06ad0d2fe20811" translate="yes" xml:space="preserve">
          <source>Since our data is hard-coded in Mirage, we know that there is only one rental with a city name of &quot;Seattle&quot;, so we assert that the number of listings is one and that the location it displays is named, &quot;Seattle&quot;.</source>
          <target state="translated">私たちのデータはミラージュにハードコーディングされていますので、「シアトル」という都市名の賃貸が1件しかないことがわかっていますので、掲載数は1件で、表示されている場所は「シアトル」という名前であると断言します。</target>
        </trans-unit>
        <trans-unit id="cd893f3a53047516be9e73d4b5f5e2369b6477ff" translate="yes" xml:space="preserve">
          <source>Since tests are a core part of the Ember framework and your development cycle, we will dedicate several sections to learning how to write tests.</source>
          <target state="translated">テストはEmberフレームワークと開発サイクルの中核をなすものなので、テストの書き方を学ぶためにいくつかのセクションを用意しています。</target>
        </trans-unit>
        <trans-unit id="ba722444287b7c4015475cc81a6d6d752afc68bd" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;didReceiveAttrs&lt;/code&gt; hook is called every time a component's attributes are updated whether on render or re-render, you can use the hook to effectively act as an observer, ensuring code is executed every time an attribute changes.</source>
          <target state="translated">以来 &lt;code&gt;didReceiveAttrs&lt;/code&gt; のフックが呼び出されたコンポーネントの属性をレンダリングまたは再レンダリングするには、コードを確保し、効果的にオブザーバーとして機能するようにフックを使用できるかどうか、更新される度に毎回属性の変更を実行します。</target>
        </trans-unit>
        <trans-unit id="a20cf75b3f9d9576789e92d06b30e1f775773a29" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;model&lt;/code&gt; hook is Promise-aware, it is great for making API requests (using tools like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;fetch&lt;/a&gt;) and returning the results.</source>
          <target state="translated">以来 &lt;code&gt;model&lt;/code&gt; フックが約束に対応しており、それがAPI要求を行う（のようなツールを使用するのに最適です&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;フェッチ&lt;/a&gt;結果を）して返します。</target>
        </trans-unit>
        <trans-unit id="0f47663319ab899455b89bcb7770d1bba128290a" translate="yes" xml:space="preserve">
          <source>Since the scientist route is nested under the application route, Ember will render its content inside the application route template's &lt;code&gt;{{outlet}}&lt;/code&gt; directive.</source>
          <target state="translated">科学者ルートはアプリケーションルートの下にネストされているため、Emberはそのコンテンツをアプリケーションルートテンプレートの &lt;code&gt;{{outlet}}&lt;/code&gt; ディレクティブ内にレンダリングします。</target>
        </trans-unit>
        <trans-unit id="28d7c278a30e6ec4d4f3023b775fa6840cb84e97" translate="yes" xml:space="preserve">
          <source>Since the specific &lt;code&gt;id&lt;/code&gt; of the &lt;code&gt;user&lt;/code&gt; is not known beforehand, we can use &lt;code&gt;queryRecord&lt;/code&gt; to get the user:</source>
          <target state="translated">&lt;code&gt;user&lt;/code&gt; 特定の &lt;code&gt;id&lt;/code&gt; は事前にわかっていないため、 &lt;code&gt;queryRecord&lt;/code&gt; を使用してユーザーを取得できます。</target>
        </trans-unit>
        <trans-unit id="fb26b8bc3ae369feedef6c08efb8cf5ba34752ca" translate="yes" xml:space="preserve">
          <source>Since the title is just the &lt;code&gt;@username&lt;/code&gt; plus some extra stuff, we can replace &lt;code&gt;@avatarTitle&lt;/code&gt; by &lt;em&gt;interpolating&lt;/em&gt; the &lt;code&gt;@username&lt;/code&gt; argument in a string literal passed to &lt;code&gt;&amp;lt;Message::Avatar&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">タイトルだけであるので &lt;code&gt;@username&lt;/code&gt; プラスいくつかの余分なもの、私たちは置き換えることができ &lt;code&gt;@avatarTitle&lt;/code&gt; をすることにより&lt;em&gt;補間&lt;/em&gt; &lt;code&gt;@username&lt;/code&gt; のに渡された文字列リテラルに引数を &lt;code&gt;&amp;lt;Message::Avatar&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51f0b4a52b8cebee35dc789d53b13ace54ffb771" translate="yes" xml:space="preserve">
          <source>Since there is no access to jQuery in the non-browser environment, you must also specify a DOM &lt;code&gt;Element&lt;/code&gt; object in the same &lt;code&gt;document&lt;/code&gt; for the &lt;code&gt;rootElement&lt;/code&gt; option (as opposed to a selector string like &lt;code&gt;&quot;body&quot;&lt;/code&gt;).</source>
          <target state="translated">非ブラウザー環境ではjQueryにアクセスできないため、同じ &lt;code&gt;document&lt;/code&gt; の &lt;code&gt;rootElement&lt;/code&gt; オプションにはDOM &lt;code&gt;Element&lt;/code&gt; オブジェクトも指定する必要があります（ &lt;code&gt;&quot;body&quot;&lt;/code&gt; ようなセレクター文字列ではありません）。</target>
        </trans-unit>
        <trans-unit id="bd76475c68e526debe88fcdc606730652138849e" translate="yes" xml:space="preserve">
          <source>Since we added &lt;code&gt;:rental_id&lt;/code&gt; to the &lt;code&gt;show&lt;/code&gt; path in our router, &lt;code&gt;rental_id&lt;/code&gt; is now available in our &lt;code&gt;model&lt;/code&gt; hook. When we call &lt;code&gt;this.get('store').findRecord('rental', params.rental_id)&lt;/code&gt;, Ember Data queries &lt;code&gt;/rentals/our-id&lt;/code&gt; using a HTTP GET request (&lt;a href=&quot;https://guides.emberjs.com/models/&quot;&gt;learn more about that here&lt;/a&gt;).</source>
          <target state="translated">我々は追加するので &lt;code&gt;:rental_id&lt;/code&gt; をする &lt;code&gt;show&lt;/code&gt; 私たちのルータのパス、 &lt;code&gt;rental_id&lt;/code&gt; は、私たちの中で利用可能になりました &lt;code&gt;model&lt;/code&gt; フック。我々は呼び出すとき &lt;code&gt;this.get('store').findRecord('rental', params.rental_id)&lt;/code&gt; 、エンバーデータクエリ &lt;code&gt;/rentals/our-id&lt;/code&gt; HTTP GETリクエストを使用して（&lt;a href=&quot;https://guides.emberjs.com/models/&quot;&gt;ここではもっとそのことについて学びます&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a193b3400008fcdd68f61cf30910ac15e02de1ad" translate="yes" xml:space="preserve">
          <source>Since we have already set up Ember Mirage in our development environment, Mirage will return the data we requested without actually making a network request.</source>
          <target state="translated">開発環境にEmber Mirageを設定済みなので、実際にネットワークリクエストをしなくても、Mirageはリクエストしたデータを返してくれます。</target>
        </trans-unit>
        <trans-unit id="d50f255275c91b6d41ca18a9a609fd25ba369850" translate="yes" xml:space="preserve">
          <source>Since we haven't added any functionality to our application yet, we'll use this first test to get started on running tests in our app.</source>
          <target state="translated">まだアプリケーションに機能を追加していないので、この最初のテストを使用して、アプリでのテスト実行を開始します。</target>
        </trans-unit>
        <trans-unit id="59ca8024809d59f43c02b2a1ec4a73e4e2d23ac4" translate="yes" xml:space="preserve">
          <source>Since we want to remove this namespace, we can define a serializer for the application that will remove &quot;blog/&quot; from the payload key whenver it's encountered by Ember Data:</source>
          <target state="translated">この名前空間を削除したいので、Ember Dataによってペイロードキーから &quot;blog/&quot;を削除するアプリケーション用のシリアライザを定義することができます。</target>
        </trans-unit>
        <trans-unit id="36cf3d73436a3652e530541299f44a225f1e4f9e" translate="yes" xml:space="preserve">
          <source>Since you're writing an HTML template, you can use dynamic substitution inside of an attribute's value; whenever the value changes, the attribute will change.</source>
          <target state="translated">HTMLテンプレートを書いているので、属性の値の中で動的置換を使うことができます。値が変わると、属性も変わります。</target>
        </trans-unit>
        <trans-unit id="ea807664a1d8b2ab5af2d6a9b45e6b93f54d047b" translate="yes" xml:space="preserve">
          <source>Since your app is made up of multiple components, you want to ensure that each is correct before testing them as a group. If a component is reusable, you want to guarantee that it works for all (if not, many) permutations of &lt;a href=&quot;https://guides.emberjs.com/components/component-arguments-and-html-attributes/&quot;&gt;arguments&lt;/a&gt; and &lt;a href=&quot;https://guides.emberjs.com/components/component-state-and-actions/&quot;&gt;actions&lt;/a&gt;.</source>
          <target state="translated">アプリは複数のコンポーネントで構成されているため、グループとしてテストする前に、それぞれが正しいことを確認する必要があります。コンポーネントが再利用可能である場合は、&lt;a href=&quot;https://guides.emberjs.com/components/component-arguments-and-html-attributes/&quot;&gt;引数&lt;/a&gt;と&lt;a href=&quot;https://guides.emberjs.com/components/component-state-and-actions/&quot;&gt;アクションの&lt;/a&gt;すべての（そうでない場合でも）順列に対して機能することを保証する必要があります。</target>
        </trans-unit>
        <trans-unit id="4434cedbc25a9b21d7d06d3713a6484879933703" translate="yes" xml:space="preserve">
          <source>Since:</source>
          <target state="translated">Since:</target>
        </trans-unit>
        <trans-unit id="aea64bd0a70c382637df038e21dc5f4ef10a121b" translate="yes" xml:space="preserve">
          <source>Single word component names are completely OK in angle bracket form.</source>
          <target state="translated">1つの単語で構成されたコンポーネント名は、アングルブラケット形式でも全く問題ありません。</target>
        </trans-unit>
        <trans-unit id="bf8e78bc810b7c1f530dd6d72d017daf1c3887b6" translate="yes" xml:space="preserve">
          <source>SingleResourceDocument</source>
          <target state="translated">SingleResourceDocument</target>
        </trans-unit>
        <trans-unit id="39ca4feb35676630d8f746e3036b880a54da9d5c" translate="yes" xml:space="preserve">
          <source>Skip Navigation Links</source>
          <target state="translated">ナビゲーションリンクをスキップする</target>
        </trans-unit>
        <trans-unit id="a516a3ce4b9fd1e3a2a9186564fe4ca0d9da8218" translate="yes" xml:space="preserve">
          <source>Skipping tests</source>
          <target state="translated">テストのスキップ</target>
        </trans-unit>
        <trans-unit id="b08ae37ed0218a85800a574ce852c8c93ad73b28" translate="yes" xml:space="preserve">
          <source>Snapshot</source>
          <target state="translated">Snapshot</target>
        </trans-unit>
        <trans-unit id="5fd5c5d29b3c095a89a560172a9860a1ee047466" translate="yes" xml:space="preserve">
          <source>SnapshotRecordArray</source>
          <target state="translated">SnapshotRecordArray</target>
        </trans-unit>
        <trans-unit id="de370e832d39727a0c5b9309d06edd07070c125e" translate="yes" xml:space="preserve">
          <source>So &lt;code&gt;{ embedded: 'always' }&lt;/code&gt; is shorthand for: &lt;code&gt;{ serialize: 'records', deserialize: 'records' }&lt;/code&gt;</source>
          <target state="translated">したがって、 &lt;code&gt;{ embedded: 'always' }&lt;/code&gt; は、 &lt;code&gt;{ serialize: 'records', deserialize: 'records' }&lt;/code&gt; 省略形です。</target>
        </trans-unit>
        <trans-unit id="0dbbff918236c7712aa927da66b932a496597385" translate="yes" xml:space="preserve">
          <source>So far in our example, the action we have passed to &lt;code&gt;ButtonWithConfirmation&lt;/code&gt; is a function that accepts one argument, &lt;code&gt;messageType&lt;/code&gt;. Suppose we want to extend this by allowing &lt;code&gt;sendMessage&lt;/code&gt; to take a second argument, the actual text of the message the user is sending:</source>
          <target state="translated">これまでの例では、 &lt;code&gt;ButtonWithConfirmation&lt;/code&gt; に渡したアクションは、1つの引数 &lt;code&gt;messageType&lt;/code&gt; を受け入れる関数です。 &lt;code&gt;sendMessage&lt;/code&gt; が2番目の引数（ユーザーが送信しているメッセージの実際のテキスト）を取ることを許可することによってこれを拡張したいとします。</target>
        </trans-unit>
        <trans-unit id="92b64ffe3c61fe82b2f00e41e184a5ff233a2011" translate="yes" xml:space="preserve">
          <source>So far in our example, the action we have passed to &lt;code&gt;button-with-confirmation&lt;/code&gt; is a function that accepts one argument, &lt;code&gt;messageType&lt;/code&gt;. Suppose we want to extend this by allowing &lt;code&gt;sendMessage&lt;/code&gt; to take a second argument, the actual text of the message the user is sending:</source>
          <target state="translated">これまでの例では、 &lt;code&gt;button-with-confirmation&lt;/code&gt; に渡したアクションは、1つの引数 &lt;code&gt;messageType&lt;/code&gt; を受け入れる関数です。 &lt;code&gt;sendMessage&lt;/code&gt; に2番目の引数（ユーザーが送信しているメッセージの実際のテキスト）を許可することにより、これを拡張したいとします。</target>
        </trans-unit>
        <trans-unit id="19c36a10e1948ddfdc6257320833f42dd10fde96" translate="yes" xml:space="preserve">
          <source>So far we've only shown tracked properties working through getters, but tracking works through &lt;em&gt;methods&lt;/em&gt; or &lt;em&gt;functions&lt;/em&gt; as well:</source>
          <target state="translated">これまで、ゲッターを介して&lt;em&gt;機能&lt;/em&gt;する追跡されたプロパティのみを示してきましたが、追跡は&lt;em&gt;メソッド&lt;/em&gt;または&lt;em&gt;関数&lt;/em&gt;を介して&lt;em&gt;機能&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="80a65522f1652c5d00122d3950c2523b284f1750" translate="yes" xml:space="preserve">
          <source>So far, our &lt;code&gt;&amp;lt;PeopleList&amp;gt;&lt;/code&gt; component is purely presentational &amp;ndash; it takes some inputs as arguments and renders them using a template. To introduce &lt;em&gt;behavior&lt;/em&gt; to our component &amp;ndash; handling the button click in this case, we will need to attach some &lt;em&gt;code&lt;/em&gt; to the component.</source>
          <target state="translated">これまでのところ、 &lt;code&gt;&amp;lt;PeopleList&amp;gt;&lt;/code&gt; コンポーネントは純粋にプレゼンテーションであり、引数としていくつかの入力を受け取り、テンプレートを使用してそれらをレンダリングします。コンポーネントに&lt;em&gt;動作&lt;/em&gt;を導入&lt;em&gt;する&lt;/em&gt;には、この場合はボタンのクリックを処理するために、コンポーネントに&lt;em&gt;コード&lt;/em&gt;を添付する必要があります。</target>
        </trans-unit>
        <trans-unit id="860179c222e257dfd377a3ba0841f6fa360f92ff" translate="yes" xml:space="preserve">
          <source>So far, our app is directly showing the user data from our Ember Data models. As our app grows, we will want to manipulate data further before presenting it to our users. For this reason, Ember offers Handlebars template helpers to decorate the data in our templates. Let's use a handlebars helper to allow our users to quickly see if a property is &quot;Standalone&quot; or part of a &quot;Community&quot;.</source>
          <target state="translated">今のところ、私たちのアプリは、Ember Data モデルからのユーザーデータを直接表示しています。アプリが成長するにつれて、ユーザーに表示する前にデータをさらに操作したいと思うようになります。このため、Emberでは、テンプレート内のデータを装飾するためのハンドルバーテンプレートヘルパーを提供しています。ハンドルバーヘルパーを使用して、あるプロパティが「スタンドアロン」なのか「コミュニティ」の一部なのかをユーザーが素早く確認できるようにしてみましょう。</target>
        </trans-unit>
        <trans-unit id="5a240f0aacaf6090843d2fe6aff9163a4d3416bb" translate="yes" xml:space="preserve">
          <source>So far, our application is listing data, but there is no way for the user to interact with the information. In web applications we often want to respond to user actions like clicks or hovers. Ember makes this easy to do.</source>
          <target state="translated">これまでのところ、私たちのアプリケーションはデータを一覧表示していますが、ユーザーがその情報を操作する方法はありません。ウェブアプリケーションでは、クリックやホバーなどのユーザーのアクションに反応させたいことがよくあります。Emberはこれを簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="5b117a8a88428d25b4b1e4a7c06468ec66a59e3f" translate="yes" xml:space="preserve">
          <source>So far, we've talked about how to populate an attribute with the value of a variable. But what if we want the value of an attribute to differ based upon whether the variable is truthy or falsy?</source>
          <target state="translated">ここまでは、変数の値をアトリビュートに入力する方法について説明してきました。しかし、変数の値がtruthyかfalsyかによって、属性の値を変えたい場合はどうすればよいでしょうか?</target>
        </trans-unit>
        <trans-unit id="e2d06f6c5fcf83668c50dcf5e00a42ff400f7c2d" translate="yes" xml:space="preserve">
          <source>So far, we've talked about web APIs that work by setting attributes as well as web APIs that work by setting properties. But what about web APIs that work by calling methods, like setting focus on an element?</source>
          <target state="translated">これまで、属性を設定することで動作するWeb APIや、プロパティを設定することで動作するWeb APIについて説明してきました。では、要素のフォーカスを設定するような、メソッドを呼び出して動作するWeb APIはどうでしょうか。</target>
        </trans-unit>
        <trans-unit id="4beaba805d3a97bce58afc2f7cb86863c0470f86" translate="yes" xml:space="preserve">
          <source>So far, your application is listing data, but there is no way for the user to interact with the information. In web applications you often want to listen for user events like clicks or hovers. Ember makes this easy to do. First add an &lt;code&gt;action&lt;/code&gt; helper to the &lt;code&gt;li&lt;/code&gt; in your &lt;code&gt;people-list&lt;/code&gt; component.</source>
          <target state="translated">これまでのところ、アプリケーションはデータをリストしていますが、ユーザーが情報を操作する方法はありません。Webアプリケーションでは、クリックやホバーなどのユーザーイベントをリッスンすることがよくあります。Emberはこれを簡単にします。最初に、 &lt;code&gt;people-list&lt;/code&gt; コンポーネントの &lt;code&gt;li&lt;/code&gt; に &lt;code&gt;action&lt;/code&gt; ヘルパーを追加します。</target>
        </trans-unit>
        <trans-unit id="82dbd01dbf5e166342277657acc79af70412fa18" translate="yes" xml:space="preserve">
          <source>So this change to &lt;code&gt;firstName&lt;/code&gt; was observed by &lt;code&gt;fullName&lt;/code&gt; computed property, which was itself observed by the &lt;code&gt;description&lt;/code&gt; property.</source>
          <target state="translated">したがって、 &lt;code&gt;firstName&lt;/code&gt; へのこの変更は、 &lt;code&gt;fullName&lt;/code&gt; 計算プロパティによって観察され、それ自体が &lt;code&gt;description&lt;/code&gt; プロパティによって観察されました。</target>
        </trans-unit>
        <trans-unit id="7c179ab2cf598954fd3d4e13b9ad80cb323f34c9" translate="yes" xml:space="preserve">
          <source>So too with JSON API. By using JSON API to interop between your Ember app and your server, you can entirely change your backend stack without breaking your frontend. And as you add apps for other platforms, such as iOS and Android, you will be able to leverage JSON API libraries for those platforms to easily consume the same API your Ember app uses.</source>
          <target state="translated">JSON APIも同様です。JSON APIを使用してEmberアプリとサーバー間の相互接続を行うことで、フロントエンドを壊すことなくバックエンドスタックを完全に変更することができます。そして、iOSやAndroidなどの他のプラットフォーム用のアプリを追加すると、それらのプラットフォーム用のJSON APIライブラリを活用して、Emberアプリが使用しているのと同じAPIを簡単に利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="1b4ae5f1c58dc8bb8ea15838b3e9682246652530" translate="yes" xml:space="preserve">
          <source>So, how can we provide some visual feedback during the transition?</source>
          <target state="translated">では、移行中に視覚的なフィードバックを提供するにはどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="fd7b7f2884ce4c1630ffc4f76897bd0d01d7ef54" translate="yes" xml:space="preserve">
          <source>So, if we want to display a purchase total we can pass the value into the template in cents:</source>
          <target state="translated">そのため、購入合計を表示したい場合は、テンプレートに値をセント単位で渡すことができます。</target>
        </trans-unit>
        <trans-unit id="820ab04fe6d1513548b6823192b5113a17600f54" translate="yes" xml:space="preserve">
          <source>Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary headers can be set as key/value pairs on the &lt;code&gt;JSONAPIAdapter&lt;/code&gt;'s &lt;code&gt;headers&lt;/code&gt; object and Ember Data will send them along with each ajax request.</source>
          <target state="translated">一部のAPIは、たとえばAPIキーを提供するために、HTTPヘッダーを必要とします。任意のヘッダーは、 &lt;code&gt;JSONAPIAdapter&lt;/code&gt; の &lt;code&gt;headers&lt;/code&gt; オブジェクトでキー/値のペアとして設定でき、Ember Dataは各ajaxリクエストと共にそれらを送信します。</target>
        </trans-unit>
        <trans-unit id="8b2ac0c846f9c6b1368c32fcb57645817bd2729e" translate="yes" xml:space="preserve">
          <source>Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary headers can be set as key/value pairs on the &lt;code&gt;RESTAdapter&lt;/code&gt;'s &lt;code&gt;headers&lt;/code&gt; object and Ember Data will send them along with each ajax request.</source>
          <target state="translated">一部のAPIは、たとえばAPIキーを提供するために、HTTPヘッダーを必要とします。 &lt;code&gt;RESTAdapter&lt;/code&gt; の &lt;code&gt;headers&lt;/code&gt; オブジェクトで任意のヘッダーをキーと値のペアとして設定でき、Ember Dataは各ajaxリクエストと共にそれらを送信します。</target>
        </trans-unit>
        <trans-unit id="470ef24de909d94ebda0dd114d92e50df150b44d" translate="yes" xml:space="preserve">
          <source>Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary headers can be set as key/value pairs on the &lt;code&gt;RESTAdapter&lt;/code&gt;'s &lt;code&gt;headers&lt;/code&gt; object and Ember Data will send them along with each ajax request. For dynamic headers see &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/RESTAdapter&quot;&gt;headers customization&lt;/a&gt;.</source>
          <target state="translated">一部のAPIは、たとえばAPIキーを提供するためにHTTPヘッダーを必要とします。任意のヘッダーは、 &lt;code&gt;RESTAdapter&lt;/code&gt; の &lt;code&gt;headers&lt;/code&gt; オブジェクトでキーと値のペアとして設定でき、EmberDataは各ajaxリクエストとともにそれらを送信します。動的ヘッダーについては、&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/RESTAdapter&quot;&gt;ヘッダーのカスタマイズを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1ff79da2240d73d23b85815d98e514154e6babb3" translate="yes" xml:space="preserve">
          <source>Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary headers can be set as key/value pairs on the &lt;code&gt;RESTAdapter&lt;/code&gt;'s &lt;code&gt;headers&lt;/code&gt; object and Ember Data will send them along with each ajax request. For dynamic headers see &lt;a href=&quot;https://emberjs.com/api/data/classes/DS.RESTAdapter.html#toc_headers-customization&quot;&gt;headers customization&lt;/a&gt;.</source>
          <target state="translated">一部のAPIは、たとえばAPIキーを提供するためにHTTPヘッダーを必要とします。 &lt;code&gt;RESTAdapter&lt;/code&gt; の &lt;code&gt;headers&lt;/code&gt; オブジェクトで任意のヘッダーをキーと値のペアとして設定でき、Ember Dataは各ajaxリクエストと共にそれらを送信します。動的ヘッダーについては、&lt;a href=&quot;https://emberjs.com/api/data/classes/DS.RESTAdapter.html#toc_headers-customization&quot;&gt;ヘッダーのカスタマイズを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="589305bc3eb0d013e4fe10cb12d21b40cca5f01f" translate="yes" xml:space="preserve">
          <source>Some addons might conditionally include polyfills only if needed. Some linters may emit warnings when using features not yet fully supported in your targets. Some addons may even automatically prefix unsupported CSS properties.</source>
          <target state="translated">アドオンによっては、必要な場合にのみ条件付きでポリフィルが含まれる場合があります。リンターによっては、ターゲットでまだ完全にサポートされていない機能を使用する際に警告を発する場合があります。アドオンによっては、サポートされていない CSS プロパティに自動的にプレフィックスを付ける場合があります。</target>
        </trans-unit>
        <trans-unit id="3ff258fab639787350b4d162b7b89ec9d01856b6" translate="yes" xml:space="preserve">
          <source>Some common tools for making &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; (create, read, update, delete) requests in Ember include:</source>
          <target state="translated">Emberで&lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt;（作成、読み取り、更新、削除）リクエストを行うための一般的なツールには次のものがあります。</target>
        </trans-unit>
        <trans-unit id="6e74245b72df6c829e572b3d6fe97cf270bbb1d9" translate="yes" xml:space="preserve">
          <source>Some common use cases include:</source>
          <target state="translated">一般的な使用例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="fb8a1601e22971013d244a3199654c426856db1e" translate="yes" xml:space="preserve">
          <source>Some decorators can also receive arguments:</source>
          <target state="translated">デコレーターの中には、引数を受け取ることができるものもあります。</target>
        </trans-unit>
        <trans-unit id="17a6dac8bf912ce569cbeab14f1bf531b4c08379" translate="yes" xml:space="preserve">
          <source>Some examples modifying that default behavior:</source>
          <target state="translated">そのデフォルトの動作を変更する例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="85e58413d75b43a1155e92c311ad52664b36bef1" translate="yes" xml:space="preserve">
          <source>Some examples of how &lt;em&gt;enabling&lt;/em&gt; this feature impacts app code are:</source>
          <target state="translated">この機能の&lt;em&gt;有効化&lt;/em&gt;がアプリコードに与える影響の例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="82534b5183631ee9d5eeba124dc1c2d8a8efa3a1" translate="yes" xml:space="preserve">
          <source>Some examples of how names are resolved:</source>
          <target state="translated">名前の解決方法の例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="d36a638a9881c1c5bedbe70a1f5fac81a45f759e" translate="yes" xml:space="preserve">
          <source>Some models may have properties that are deeply nested objects of readonly data. The na&amp;iuml;ve solution would be to define models for each nested object and use &lt;code&gt;hasMany&lt;/code&gt; and &lt;code&gt;belongsTo&lt;/code&gt; to recreate the nested relationship. However, since readonly data will never need to be updated and saved this often results in the creation of a great deal of code for very little benefit. An alternate approach is to define these relationships using an attribute with no transform (&lt;code&gt;@attr&lt;/code&gt;). This makes it easy to access readonly values in other objects and templates without the overhead of defining extraneous models.</source>
          <target state="translated">一部のモデルには、読み取り専用データの深くネストされたオブジェクトであるプロパティが含まれている場合があります。 &lt;code&gt;belongsTo&lt;/code&gt; な解決策は、ネストされたオブジェクトごとにモデルを定義し、 &lt;code&gt;hasMany&lt;/code&gt; とbelongsToを使用してネストされた関係を再作成することです。ただし、読み取り専用データを更新して保存する必要がないため、多くの場合、多くのコードが作成され、ほとんどメリットがありません。別のアプローチは、変換なしの属性（ &lt;code&gt;@attr&lt;/code&gt; ）を使用してこれらの関係を定義することです。これにより、無関係なモデルを定義するオーバーヘッドなしに、他のオブジェクトやテンプレートの読み取り専用値に簡単にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="9d5184c34d7d66d58908b766bee8f66460408f46" translate="yes" xml:space="preserve">
          <source>Some models may have properties that are deeply nested objects of readonly data. The na&amp;iuml;ve solution would be to define models for each nested object and use &lt;code&gt;hasMany&lt;/code&gt; and &lt;code&gt;belongsTo&lt;/code&gt; to recreate the nested relationship. However, since readonly data will never need to be updated and saved this often results in the creation of a great deal of code for very little benefit. An alternate approach is to define these relationships using an attribute with no transform (&lt;code&gt;DS.attr()&lt;/code&gt;). This makes it easy to access readonly values in computed properties and templates without the overhead of defining extraneous models.</source>
          <target state="translated">一部のモデルには、読み取り専用データの深くネストされたオブジェクトであるプロパティがあります。 &lt;code&gt;belongsTo&lt;/code&gt; な解決策は、ネストされたオブジェクトごとにモデルを定義し、 &lt;code&gt;hasMany&lt;/code&gt; とbelongsToを使用して、ネストされた関係を再作成することです。ただし、読み取り専用のデータを更新して保存する必要はないため、多くの場合、非常に小さなメリットのために大量のコードが作成されます。別のアプローチは、変換なしの属性（ &lt;code&gt;DS.attr()&lt;/code&gt; ）を使用してこれらの関係を定義することです。これにより、無関係なモデルを定義するオーバーヘッドなしに、計算されたプロパティとテンプレートの読み取り専用の値に簡単にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="9b4ade66ce72953c75feeb49b9c6df4d4fc8e7c5" translate="yes" xml:space="preserve">
          <source>Some notes about &lt;code&gt;class&lt;/code&gt; usage:</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 使用法に関する注意事項：</target>
        </trans-unit>
        <trans-unit id="0c345287ac108fa43e40986e9e0b206ee82b4fe8" translate="yes" xml:space="preserve">
          <source>Some of Ember's test helpers are promises that wait for the run loop to empty before resolving. If your application has code that runs &lt;em&gt;outside&lt;/em&gt; a run loop, these will resolve too early and give erroneous test failures which are difficult to find. Disabling autoruns help you identify these scenarios and helps both your testing and your application!</source>
          <target state="translated">Emberのテストヘルパーの一部は、実行ループが空になるのを待ってから解決するという約束です。アプリケーションに実行ループの&lt;em&gt;外&lt;/em&gt;で実行されるコードがある場合、これらは早期に解決され、見つけるのが難しい誤ったテストエラーが発生します。自動実行を無効にすると、これらのシナリオを特定し、テストとアプリケーションの両方に役立ちます。</target>
        </trans-unit>
        <trans-unit id="b1bbf5eaf965f38fe34ca676ba670d7b7e3a16eb" translate="yes" xml:space="preserve">
          <source>Some of the features that Ember relies on, such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Field_declarations&quot;&gt;class fields&lt;/a&gt; and &lt;a href=&quot;https://github.com/tc39/proposal-decorators&quot;&gt;decorators&lt;/a&gt; have not yet been fully finalized in JavaScript just yet, so we'll cover these here with the assumption that you've had a chance to familiarize yourself with classes before. If you haven't, you can also check out &lt;a href=&quot;https://guides.emberjs.com/in-depth-topics/native-classes-in-depth/&quot;&gt;our detailed class primer&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Field_declarations&quot;&gt;クラスフィールド&lt;/a&gt;や&lt;a href=&quot;https://github.com/tc39/proposal-decorators&quot;&gt;デコレータ&lt;/a&gt;など、Emberが依存する機能の一部は、JavaScriptでまだ完全に完成していないため、ここでは、以前にクラスに慣れたことがあることを前提として、これらについて説明します。まだお持ちでない場合は、&lt;a href=&quot;https://guides.emberjs.com/in-depth-topics/native-classes-in-depth/&quot;&gt;詳細なクラス入門書をご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4979198f37570d49855015976a8e9dfdb6023e02" translate="yes" xml:space="preserve">
          <source>Some of the helpers we'll use commonly are:</source>
          <target state="translated">よく使うヘルパーの中には</target>
        </trans-unit>
        <trans-unit id="3748e66aa53dcbbdabc1f3d7af1f40169fdff824" translate="yes" xml:space="preserve">
          <source>Some of the more common ways to report a problem with the guides are:</source>
          <target state="translated">ガイドの問題を報告するためのより一般的な方法のいくつかは、次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5337883a101c091bf437d743927429e7f9b3a8dc" translate="yes" xml:space="preserve">
          <source>Some of the reasons this may happen:</source>
          <target state="translated">その理由のいくつかをご紹介します。</target>
        </trans-unit>
        <trans-unit id="822e1f477acc562b0e523818fa99c2731cc5d901" translate="yes" xml:space="preserve">
          <source>Some of these features that you'll learn about in the guides are:</source>
          <target state="translated">ガイドで学ぶこれらの機能の中には、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="013194aba18ba879d16afd5810abb441525b32e0" translate="yes" xml:space="preserve">
          <source>Some of these handy helpers are:</source>
          <target state="translated">これらの便利なヘルパーの一部をご紹介します。</target>
        </trans-unit>
        <trans-unit id="66952b6d0704d8bd5ed88829a1728002186d07f9" translate="yes" xml:space="preserve">
          <source>Some other event in the app causes the URL to change.</source>
          <target state="translated">アプリ内の他のイベントによりURLが変更されています。</target>
        </trans-unit>
        <trans-unit id="57317550a3c27511c883be0f3369988d320cb4f4" translate="yes" xml:space="preserve">
          <source>Some people choose to load data in their Components. The drawback is that requires more work from developers to handle async, rendering, errors, concurrency, and URL state themselves - functionality they would get automatically if they used a Route's &lt;code&gt;model&lt;/code&gt; hook. However there are valid use cases for loading data in a component, for developers who are comfortable handling the router's features themselves.</source>
          <target state="translated">コンポーネントにデータをロードすることを選択する人もいます。欠点は、非同期、レンダリング、エラー、同時実行性、およびURL状態自体を処理するために、開発者がより多くの作業を必要とすることです。これらの機能は、Routeの &lt;code&gt;model&lt;/code&gt; フックを使用した場合に自動的に取得されます。ただし、ルーターの機能を自分で処理することに慣れている開発者にとっては、コンポーネントにデータをロードするための有効な使用例があります。</target>
        </trans-unit>
        <trans-unit id="6662963cf7cb67b19d16e3797446e1a4df2164ae" translate="yes" xml:space="preserve">
          <source>Some properties are not only grouped by inheritance, but also by framework level semantics. For example, if you inspect an Ember Data model, you can see &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Belongs To&lt;/code&gt;, &lt;code&gt;Has Many&lt;/code&gt;, and &lt;code&gt;Flags&lt;/code&gt; groups.</source>
          <target state="translated">一部のプロパティは、継承によってグループ化されるだけでなく、フレームワークレベルのセマンティクスによってもグループ化されます。たとえば、Ember Dataモデルを検査すると、 &lt;code&gt;Attributes&lt;/code&gt; 、 &lt;code&gt;Belongs To&lt;/code&gt; 、 &lt;code&gt;Has Many&lt;/code&gt; 、および &lt;code&gt;Flags&lt;/code&gt; グループが表示されます。</target>
        </trans-unit>
        <trans-unit id="d53376f049cded3ffe42cdb45579f580b958c176" translate="yes" xml:space="preserve">
          <source>Some raw JSON data to be normalized into a JSON:API Resource.</source>
          <target state="translated">JSON:API Resourceに正規化される生のJSONデータがあります。</target>
        </trans-unit>
        <trans-unit id="325238f44bc39a7d51558fbf18caf5277d0da375" translate="yes" xml:space="preserve">
          <source>Some reasons for customizing an Adapter include using &lt;code&gt;underscores_case&lt;/code&gt; in your urls, using a medium other than REST to communicate with your backend API or even using a &lt;a href=&quot;https://github.com/locks/ember-localstorage-adapter&quot;&gt;local storage backend&lt;/a&gt;.</source>
          <target state="translated">アダプターをカスタマイズする理由としては、URLに &lt;code&gt;underscores_case&lt;/code&gt; を使用する、REST以外のメディアを使用してバックエンドAPIと通信する、&lt;a href=&quot;https://github.com/locks/ember-localstorage-adapter&quot;&gt;ローカルストレージバックエンド&lt;/a&gt;を使用するなどがあります。</target>
        </trans-unit>
        <trans-unit id="2244f25ae871987e59d131e17c8c7397712981aa" translate="yes" xml:space="preserve">
          <source>Some routes always display the same model. For example, the &lt;code&gt;/photos&lt;/code&gt; route will always display the same list of photos available in the application. If your user leaves this route and comes back later, the model does not change.</source>
          <target state="translated">一部のルートは常に同じモデルを表示します。たとえば、 &lt;code&gt;/photos&lt;/code&gt; ルートは、アプリケーションで利用可能な写真の同じリストを常に表示します。ユーザーがこのルートを離れて後で戻ってきても、モデルは変わりません。</target>
        </trans-unit>
        <trans-unit id="dfada9d7be3abdb25489a10a3babdd4c487f5a91" translate="yes" xml:space="preserve">
          <source>Some specific examples of units tests are:</source>
          <target state="translated">ユニットテストの具体的な例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="f4c0047cd154d80ed200c3a10a6e33a060f165c8" translate="yes" xml:space="preserve">
          <source>Some times you might be working on a feature, but know that a certain test will fail so you might want to skip it. You can do it by using &lt;code&gt;skip&lt;/code&gt;:</source>
          <target state="translated">機能に取り組んでいる場合もありますが、特定のテストが失敗することを知っているので、それをスキップすることもできます。あなたは &lt;code&gt;skip&lt;/code&gt; を使用してそれを行うことができます：</target>
        </trans-unit>
        <trans-unit id="e8353c07cd51f4950ee2ad76a1992e4ffb81690e" translate="yes" xml:space="preserve">
          <source>Some types of computed properties are very common. Ember provides a number of computed property macros, which are shorter ways of expressing certain types of computed property.</source>
          <target state="translated">いくつかのタイプの計算されたプロパティは、非常に一般的なものです。Emberはいくつかのcomputed propertyマクロを提供していますが、これはある種のcomputed propertyを短く表現する方法です。</target>
        </trans-unit>
        <trans-unit id="e242b0e25372bca745a56f2ef24c52a13c526d4c" translate="yes" xml:space="preserve">
          <source>Sometimes a service may or may not exist, like when an initializer conditionally registers a service. Since normal injection will throw an error if the service doesn't exist, you must look up the service using Ember's &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/@ember%2Fapplication/methods#getOwner&quot;&gt;&lt;code&gt;getOwner&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">初期化子が条件付きでサービスを登録する場合のように、サービスが存在する場合と存在しない場合があります。サービスが存在しない場合、通常のインジェクションはエラーをスローするため、代わりにEmberの&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/@ember%2Fapplication/methods#getOwner&quot;&gt; &lt;code&gt;getOwner&lt;/code&gt; &lt;/a&gt;を使用してサービスを検索する必要があります。</target>
        </trans-unit>
        <trans-unit id="86c891d4cd8c7cba722589fb8d2aa6a1abb982b5" translate="yes" xml:space="preserve">
          <source>Sometimes a service may or may not exist, like when an initializer conditionally registers a service. Since normal injection will throw an error if the service doesn't exist, you must look up the service using Ember's &lt;a href=&quot;https://emberjs.com/api/classes/Ember.html#method_getOwner&quot;&gt;&lt;code&gt;getOwner&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">イニシャライザがサービスを条件付きで登録する場合など、サービスが存在する場合と存在しない場合があります。サービスが存在しない場合、通常のインジェクションはエラーをスローするため、代わりにEmberの&lt;a href=&quot;https://emberjs.com/api/classes/Ember.html#method_getOwner&quot;&gt; &lt;code&gt;getOwner&lt;/code&gt; &lt;/a&gt;を使用してサービスを検索する必要があります。</target>
        </trans-unit>
        <trans-unit id="3155e1aa9ca809aad16247d1dc430dba0afcf4d9" translate="yes" xml:space="preserve">
          <source>Sometimes controllers have dependencies on other controllers. This is accomplished by injecting one controller into another. For example, here are two simple controllers. The &lt;code&gt;CommentsController&lt;/code&gt; uses the &lt;code&gt;PostController&lt;/code&gt; via &lt;code&gt;inject&lt;/code&gt;:</source>
          <target state="translated">コントローラーが他のコントローラーに依存している場合があります。これは、1つのコントローラーを別のコントローラーに注入することによって実現されます。たとえば、次の2つの単純なコントローラーがあります。 &lt;code&gt;CommentsController&lt;/code&gt; は、使用 &lt;code&gt;PostController&lt;/code&gt; 経由して &lt;code&gt;inject&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ec494ae7d5dc61d3450971f28ceab15c4a31768f" translate="yes" xml:space="preserve">
          <source>Sometimes the parent component invoking an action has some context needed for the action that the child component doesn't. Consider, for example, the case where the &lt;code&gt;ButtonWithConfirmation&lt;/code&gt; component we've defined is used within &lt;code&gt;SendMessage&lt;/code&gt;. The &lt;code&gt;sendMessage&lt;/code&gt; action that we pass to the child component may expect a message type parameter to be provided as an argument:</source>
          <target state="translated">アクションを呼び出す親コンポーネントには、子コンポーネントにはないアクションに必要なコンテキストがある場合があります。たとえば、定義した &lt;code&gt;ButtonWithConfirmation&lt;/code&gt; コンポーネントが &lt;code&gt;SendMessage&lt;/code&gt; 内で使用されている場合を考えてみます。 &lt;code&gt;sendMessage&lt;/code&gt; 我々は、子コンポーネントに渡すという行為は、メッセージタイプパラメータを引数として提供されることを期待することがあります。</target>
        </trans-unit>
        <trans-unit id="9e4d9e623bb94a60e9ac83b620b9d575221d6a19" translate="yes" xml:space="preserve">
          <source>Sometimes the parent component invoking an action has some context needed for the action that the child component doesn't. Consider, for example, the case where the &lt;code&gt;button-with-confirmation&lt;/code&gt; component we've defined is used within &lt;code&gt;send-message&lt;/code&gt;. The &lt;code&gt;sendMessage&lt;/code&gt; action that we pass to the child component may expect a message type parameter to be provided as an argument:</source>
          <target state="translated">アクションを呼び出す親コンポーネントには、子コンポーネントにはないアクションに必要なコンテキストがある場合があります。たとえば、定義 &lt;code&gt;button-with-confirmation&lt;/code&gt; たbutton-with-confirmationコンポーネントが &lt;code&gt;send-message&lt;/code&gt; 内で使用されている場合を考えます。 &lt;code&gt;sendMessage&lt;/code&gt; 我々は、子コンポーネントに渡すという行為は、メッセージタイプパラメータを引数として提供されることを期待することがあります。</target>
        </trans-unit>
        <trans-unit id="b795927e172ff54b29fd66e4ef2233525e286ec2" translate="yes" xml:space="preserve">
          <source>Sometimes the value you want to propagate to a downstream promise can only be retrieved asynchronously. This can be achieved by returning a promise in the fulfillment or rejection handler. The downstream promise will then be pending until the returned promise is settled. This is called &lt;em&gt;assimilation&lt;/em&gt;.</source>
          <target state="translated">時には、下流のpromiseに伝達したい値が非同期でしか取得できない場合があります。これは、履行または拒否ハンドラーでpromiseを返すことで実現できます。返されたプロミスが解決するまで、下流のプロミスは保留されます。これは&lt;em&gt;同化&lt;/em&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="fb6b416b736de5984855b00b7181426c6ea9cfe1" translate="yes" xml:space="preserve">
          <source>Sometimes we want to set relationships on already existing records. We can simply set a &lt;code&gt;belongsTo&lt;/code&gt; relationship:</source>
          <target state="translated">既存のレコードに関係を設定したい場合があります。 &lt;code&gt;belongsTo&lt;/code&gt; 関係を設定するだけです：</target>
        </trans-unit>
        <trans-unit id="e3938ef49fd1f00900f13ab44705cfe380190afd" translate="yes" xml:space="preserve">
          <source>Sometimes you don't care if properties of individual array items change. In this case use the &lt;code&gt;[]&lt;/code&gt; key instead of &lt;code&gt;@each&lt;/code&gt;. Computed properties dependent on an array using the &lt;code&gt;[]&lt;/code&gt; key will only update if items are added to or removed from the array, or if the array property is set to a different array. For example:</source>
          <target state="translated">場合によっては、個々の配列項目のプロパティが変更されても気にしないことがあります。この場合、 &lt;code&gt;@each&lt;/code&gt; の代わりに &lt;code&gt;[]&lt;/code&gt; キーを使用します。 &lt;code&gt;[]&lt;/code&gt; キーを使用して配列に依存する計算プロパティは、項目が配列に追加または配列から削除された場合、または配列プロパティが別の配列に設定されている場合にのみ更新されます。例えば：</target>
        </trans-unit>
        <trans-unit id="59593e85c482d9ccffbf9cb3f10447cbf9a7e137" translate="yes" xml:space="preserve">
          <source>Sometimes you have a computed property whose value depends on the properties of items in an array. For example, you may have an array of todo items, and want to calculate the incomplete todo's based on their &lt;code&gt;isDone&lt;/code&gt; property.</source>
          <target state="translated">計算されたプロパティがあり、その値は配列内のアイテムのプロパティに依存する場合があります。たとえば、ToDo項目の配列があり、 &lt;code&gt;isDone&lt;/code&gt; プロパティに基づいて不完全なToDoを計算したい場合があります。</target>
        </trans-unit>
        <trans-unit id="02020eb76a56d4e096072529eb83ef7b6e6a7883" translate="yes" xml:space="preserve">
          <source>Sometimes you need to change a value directly or indirectly without actually calling &lt;code&gt;get()&lt;/code&gt; or &lt;code&gt;set()&lt;/code&gt; on it. In this case, you can use this method instead. Calling this method will notify all observers that the property has potentially changed value.</source>
          <target state="translated">実際に &lt;code&gt;get()&lt;/code&gt; または &lt;code&gt;set()&lt;/code&gt; を呼び出さずに、値を直接または間接的に変更する必要がある場合があります。この場合、代わりにこの方法を使用できます。このメソッドを呼び出すと、プロパティの値が変更された可能性があることがすべてのオブザーバーに通知されます。</target>
        </trans-unit>
        <trans-unit id="416096650446b210755d175075d7e07b083b9ad1" translate="yes" xml:space="preserve">
          <source>Sometimes you need to fetch a model, but your route doesn't have the parameters, because it's a child route and the route directly above or a few levels above has the parameters that your route needs.</source>
          <target state="translated">モデルを取得する必要があるのに、ルートが子ルートであり、直上や数段上のルートが必要なパラメータを持っているために、ルートがパラメータを持っていないことがあります。</target>
        </trans-unit>
        <trans-unit id="204181322499311f46007cd4bc07ef725e80b57a" translate="yes" xml:space="preserve">
          <source>Sometimes you need to fetch a model, but your route doesn't have the parameters, because it's a child route and the route directly above or a few levels above has the parameters that your route needs. You might run into this if you have a URL like &lt;code&gt;/album/4/songs/18&lt;/code&gt;, and when you're in the songs route, you need an album ID.</source>
          <target state="translated">モデルをフェッチする必要がある場合がありますが、ルートにはパラメーターがありません。これは、それが子ルートであり、ルートの真上または数レベル上のルートに、ルートに必要なパラメーターがあるためです。 &lt;code&gt;/album/4/songs/18&lt;/code&gt; のようなURLがあり、曲のルートにいるときにアルバムIDが必要な場合は、これに遭遇する可能性があります。</target>
        </trans-unit>
        <trans-unit id="559f553ca9e321ad0a7cbfeb49c2a261a0036395" translate="yes" xml:space="preserve">
          <source>Sometimes you need to retain the &lt;code&gt;this&lt;/code&gt;:</source>
          <target state="translated">時々 &lt;code&gt;this&lt;/code&gt; を保持する必要があります：</target>
        </trans-unit>
        <trans-unit id="069522e3125331b06bf7bf0225dd816607897fe7" translate="yes" xml:space="preserve">
          <source>Sometimes you want to redirect a user to a different page than what they requested for.</source>
          <target state="translated">時には、ユーザーが要求したものとは異なるページにリダイレクトしたいこともあるでしょう。</target>
        </trans-unit>
        <trans-unit id="0b639c578441ab69ca93cfe6eacb7e5c4ffe28f4" translate="yes" xml:space="preserve">
          <source>Sometimes, we may want to provide some default content if the user of a component hasn't provided a block. For instance, consider an error message dialog that has a default message in cases where we don't know what error occurred. We could show the default message using the &lt;code&gt;(has-block)&lt;/code&gt; syntax in an &lt;code&gt;ErrorDialog&lt;/code&gt; component.</source>
          <target state="translated">コンポーネントのユーザーがブロックを提供していない場合は、デフォルトのコンテンツを提供したい場合があります。たとえば、発生したエラーがわからない場合にデフォルトのメッセージが表示されるエラーメッセージダイアログについて考えてみます。 &lt;code&gt;ErrorDialog&lt;/code&gt; コンポーネントで &lt;code&gt;(has-block)&lt;/code&gt; 構文を使用して、デフォルトのメッセージを表示できます。</target>
        </trans-unit>
        <trans-unit id="ff1deea5816647c86f04dab422bbd3f177c20025" translate="yes" xml:space="preserve">
          <source>Sometimes, you may need to generate links for nested routes which can have multiple &lt;a href=&quot;https://guides.emberjs.com/routing/defining-your-routes/#toc_dynamic-segments&quot;&gt;dynamic segments&lt;/a&gt;. For example, consider the following route definitions:</source>
          <target state="translated">場合によっては、複数の&lt;a href=&quot;https://guides.emberjs.com/routing/defining-your-routes/#toc_dynamic-segments&quot;&gt;動的セグメントを&lt;/a&gt;持つことができるネストされたルートのリンクを生成する必要があります。たとえば、次のルート定義について考えてみます。</target>
        </trans-unit>
        <trans-unit id="2baef004d709137087990a2c9d850371fca71c1c" translate="yes" xml:space="preserve">
          <source>Sometimes, you may want to define a component that wraps content provided by other templates.</source>
          <target state="translated">他のテンプレートで提供されているコンテンツをラップするコンポーネントを定義したい場合もあるでしょう。</target>
        </trans-unit>
        <trans-unit id="2395a368ce28ec5ec373220c01e2fc1461af523a" translate="yes" xml:space="preserve">
          <source>Sometimes, you might see helpers invoked by placing them inside parentheses, &lt;code&gt;()&lt;/code&gt;. This means that a Helper is being used inside of another Helper or Component. This is referred to as a &quot;nested&quot; Helper Invocation. Parentheses must be used because curly braces &lt;code&gt;{{}}&lt;/code&gt; cannot be nested.</source>
          <target state="translated">場合によっては、ヘルパーを括弧内に配置することで呼び出されることがあります &lt;code&gt;()&lt;/code&gt; 。これは、ヘルパーが別のヘルパーまたはコンポーネント内で使用されていることを意味します。これは、「ネストされた」ヘルパー呼び出しと呼ばれます。中括弧 &lt;code&gt;{{}}&lt;/code&gt; はネストできないため、括弧を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8ed644784dc95f21d324b17adf99f942121d6a63" translate="yes" xml:space="preserve">
          <source>Sometimes, you will want to conditionally set an argument or attribute.</source>
          <target state="translated">時には、引数や属性を条件付きで設定したいこともあるでしょう。</target>
        </trans-unit>
        <trans-unit id="064d7374612367c011789ae5321e5d060ef161dd" translate="yes" xml:space="preserve">
          <source>Sorts the array by the keys specified in the argument.</source>
          <target state="translated">引数で指定したキーで配列をソートします。</target>
        </trans-unit>
        <trans-unit id="03d664c8a7630fa11c74ace4dc1511eeaa4841f2" translate="yes" xml:space="preserve">
          <source>Special HTML elements like &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; などの特別なHTML要素</target>
        </trans-unit>
        <trans-unit id="96659bf5510b1ddbf595565c481a37824bc493f8" translate="yes" xml:space="preserve">
          <source>Specifies how records can be filtered. Records returned will need to have a &lt;code&gt;filterValues&lt;/code&gt; property with a key for every name in the returned array.</source>
          <target state="translated">レコードをフィルタリングする方法を指定します。返されるレコードには、返される配列内のすべての名前のキーを持つ &lt;code&gt;filterValues&lt;/code&gt; プロパティが必要です。</target>
        </trans-unit>
        <trans-unit id="95f6dd8dc212ba5d85302c1420a17db8da9053f3" translate="yes" xml:space="preserve">
          <source>Specify a method that observes property changes.</source>
          <target state="translated">プロパティの変更を観測するメソッドを指定します。</target>
        </trans-unit>
        <trans-unit id="223591aeca04cad98919771b70c08a1289123a53" translate="yes" xml:space="preserve">
          <source>Specifying DOM event type</source>
          <target state="translated">DOM イベントタイプの指定</target>
        </trans-unit>
        <trans-unit id="9dc9de0aa5ed554b19547386f6cca49a1ec57918" translate="yes" xml:space="preserve">
          <source>Specifying Initializer Order</source>
          <target state="translated">初期化子の順序を指定する</target>
        </trans-unit>
        <trans-unit id="5fdf0dd083e563032f5e6602ce7e005cc574889d" translate="yes" xml:space="preserve">
          <source>Specifying Keys</source>
          <target state="translated">キーの指定</target>
        </trans-unit>
        <trans-unit id="35833528563ce69a1f68854f07be8e7aa16a509d" translate="yes" xml:space="preserve">
          <source>Specifying Query Parameters</source>
          <target state="translated">クエリパラメータの指定</target>
        </trans-unit>
        <trans-unit id="7c35f3946da6ff79b8757a6ceb8ee8d49df16369" translate="yes" xml:space="preserve">
          <source>Specifying a Root URL</source>
          <target state="translated">ルートURLの指定</target>
        </trans-unit>
        <trans-unit id="3178f09d7674b2ba76416a9f78ffa51e9d2fdd63" translate="yes" xml:space="preserve">
          <source>Specifying a Route&amp;#x27;s Model</source>
          <target state="translated">ルートのモデルの指定</target>
        </trans-unit>
        <trans-unit id="0aab4ef25ec9e8d4b45fcc096abf64fe7a154c92" translate="yes" xml:space="preserve">
          <source>Specifying a Route's Model</source>
          <target state="translated">ルートのモデルを指定する</target>
        </trans-unit>
        <trans-unit id="9d13a540e07e9718658fc51f3532a2a9665ff955" translate="yes" xml:space="preserve">
          <source>Specifying a Target</source>
          <target state="translated">ターゲットの指定</target>
        </trans-unit>
        <trans-unit id="0576f645f0df389ae6ff04ea0100cb46c490b756" translate="yes" xml:space="preserve">
          <source>Specifying the Type of Event</source>
          <target state="translated">イベントの種類を指定する</target>
        </trans-unit>
        <trans-unit id="d91b92c60fdffefa96bc27ffdf887f5e281d0a13" translate="yes" xml:space="preserve">
          <source>Specifying the URL Type</source>
          <target state="translated">URLの種類を指定する</target>
        </trans-unit>
        <trans-unit id="c69285edae5096eb75f15a92d92d9083fbcd550c" translate="yes" xml:space="preserve">
          <source>Specifying whitelisted modifier keys</source>
          <target state="translated">ホワイトリスト化された修飾キーの指定</target>
        </trans-unit>
        <trans-unit id="9d4fa9e78c183321cef3a8e36a830b3610a9a700" translate="yes" xml:space="preserve">
          <source>Splits a string into separate units separated by spaces, eliminating any empty strings in the process. This is a convenience method for split that is mostly useful when applied to the &lt;code&gt;String.prototype&lt;/code&gt;.</source>
          <target state="translated">文字列をスペースで区切られた個別の単位に分割し、プロセスで空の文字列を削除します。これは、 &lt;code&gt;String.prototype&lt;/code&gt; に適用したときに主に役立つ分割のための便利なメソッドです。</target>
        </trans-unit>
        <trans-unit id="be240ad179556a0e830c1c4a80ede62ad10a9099" translate="yes" xml:space="preserve">
          <source>StableRecordIdentifier[]</source>
          <target state="translated">StableRecordIdentifier[]</target>
        </trans-unit>
        <trans-unit id="0d1e61286aa50eb30bfbfd7083574b6c91fc2ff1" translate="yes" xml:space="preserve">
          <source>Standard CSS class names to apply to the view's outer element. This property automatically inherits any class names defined by the view's superclasses as well.</source>
          <target state="translated">ビューの外部要素に適用する標準的なCSSのクラス名。このプロパティは、ビューのスーパークラスによって定義されたクラス名を自動的に継承します。</target>
        </trans-unit>
        <trans-unit id="8d2e5c61163ac5addfc66cdf3663694e20d997c0" translate="yes" xml:space="preserve">
          <source>Standard Method</source>
          <target state="translated">標準的な方法</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
