<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="5acb9506d75a51ad2e949d226d6eb45b0c67820e" translate="yes" xml:space="preserve">
          <source>D can still explicitly allocate memory using core.stdc.stdlib.malloc() and core.stdc.stdlib.free(), these are useful for connecting to C functions that expect malloc'd buffers, etc.</source>
          <target state="translated">D は core.stdc.stdlib.malloc()と core.stdc.stdlib.free()を使って明示的にメモリを割り当てることができますが、これらは malloc されたバッファなどを期待する C 関数に接続するのに便利です。</target>
        </trans-unit>
        <trans-unit id="17e8e7c234c8b135698e2569ad7c740d6032f484" translate="yes" xml:space="preserve">
          <source>D cannot directly call C++ special member functions, and vice versa. These include constructors, destructors, conversion operators, operator overloading, and allocators.</source>
          <target state="translated">D は C++の特殊なメンバ関数を直接呼び出すことはできませんが、その逆も同様です。これらには、コンストラクタ、デストラクタ、変換演算子、演算子のオーバーロード、およびアロケータが含まれます。</target>
        </trans-unit>
        <trans-unit id="0fb4b87546a27bc737044f6f7e9773793eda6a11" translate="yes" xml:space="preserve">
          <source>D code can be embedded using lines beginning with at least three hyphens &lt;code&gt;-&lt;/code&gt;, backticks &lt;code&gt;`&lt;/code&gt; or tildes &lt;code&gt;~&lt;/code&gt; (ignoring whitespace) to delineate the code section:</source>
          <target state="translated">Dコードは、少なくとも3つのハイフン &lt;code&gt;-&lt;/code&gt; 、バッククォート &lt;code&gt;`&lt;/code&gt; またはチルダ &lt;code&gt;~&lt;/code&gt; （空白を無視）で始まる行を使用して埋め込んで、コードセクションを区切ることができます。</target>
        </trans-unit>
        <trans-unit id="dcedc4ea27f9fbbf3eaeba264e973e8baac897d0" translate="yes" xml:space="preserve">
          <source>D code gets automatic syntax highlighting. To include code in another language without syntax highlighting, add a language string at the end of the top delimiter line:</source>
          <target state="translated">D のコードには、自動的にシンタックスハイライトが適用されます。構文の強調表示を行わずに他の言語のコードを含めるには、先頭の区切り行の最後に言語文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="db2576347b92e13d169d9d3a8ec611d68f429441" translate="yes" xml:space="preserve">
          <source>D constrains integral types to specific sizes. But efficiency of different sizes varies from machine to machine, pointer sizes vary, and the maximum integer size varies. &lt;b&gt;stdint&lt;/b&gt; offers a portable way of trading off size vs efficiency, in a manner compatible with the</source>
          <target state="translated">Dは、整数型を特定のサイズに制限します。ただし、さまざまなサイズの効率はマシンごとに異なり、ポインターのサイズもさまざまで、最大整数サイズもさまざまです。&lt;b&gt;stdint&lt;/b&gt;は、サイズと効率をトレードオフするポータブルな方法を提供します。</target>
        </trans-unit>
        <trans-unit id="507bee50e6e5c4a08c20f7a821523744843dab1d" translate="yes" xml:space="preserve">
          <source>D conventions are:</source>
          <target state="translated">Dの規約は</target>
        </trans-unit>
        <trans-unit id="9a11c2269497647472aad8b1a5fbcb4adc87a952" translate="yes" xml:space="preserve">
          <source>D does not support bit fields. If needed, they can be emulated with shift and mask operations, or use the &lt;a href=&quot;https://dlang.org/phobos/std_bitmanip.html#bitfields&quot;&gt;std.bitmanip.bitfields&lt;/a&gt; library type. &lt;a href=&quot;https://dlang.org/htod.html&quot;&gt;htod&lt;/a&gt; will convert bit fields to inline functions that do the right shift and masks.</source>
          <target state="translated">Dはビットフィールドをサポートしていません。必要に応じて、シフトおよびマスク操作でエミュレートするか、&lt;a href=&quot;https://dlang.org/phobos/std_bitmanip.html#bitfields&quot;&gt;std.bitmanip.bitfields&lt;/a&gt;ライブラリタイプを使用できます。&lt;a href=&quot;https://dlang.org/htod.html&quot;&gt;htod&lt;/a&gt;は、ビットフィールドを、右シフトとマスクを行うインライン関数に変換します。</target>
        </trans-unit>
        <trans-unit id="10392eddc0ec6cd68606fb4c53a826525a44407e" translate="yes" xml:space="preserve">
          <source>D does not support declaring variables of anonymous struct types. In such a case you can define a named struct in D and make it private:</source>
          <target state="translated">D は匿名構造体型の変数宣言をサポートしていません。このような場合は、Dで名前付き構造体を定義し、それをプライベートにすることができます。</target>
        </trans-unit>
        <trans-unit id="b5ed1c9e2e5b85b71f5da5cc74c0dc2f3e444e1a" translate="yes" xml:space="preserve">
          <source>D exception handling fits right in with that.</source>
          <target state="translated">Dの例外処理はそれにぴったりです。</target>
        </trans-unit>
        <trans-unit id="2996c849bb3b528029f848ec1204d0c07cdcd623" translate="yes" xml:space="preserve">
          <source>D features not available with &lt;b&gt;BetterC&lt;/b&gt;:</source>
          <target state="translated">&lt;b&gt;BetterC&lt;/b&gt;では使用できないD機能：</target>
        </trans-unit>
        <trans-unit id="883282b9d057cb0d92c679117bdb3b124bb34d24" translate="yes" xml:space="preserve">
          <source>D grammar allows declarations only as statements. However in AST representation it can be part of any expression. This is used, for example, during internal syntax re-writes to inject hidden symbols.</source>
          <target state="translated">D文法では宣言は文としてしか使えません。しかし、AST表現では、宣言は任意の式の一部になることができます。これは、例えば、内部構文の書き換えの際に、隠されたシンボルを注入するために使用されます。</target>
        </trans-unit>
        <trans-unit id="bff43f4fa297f3c093df3b2ac4a91965cf38a6b0" translate="yes" xml:space="preserve">
          <source>D has reference types, but they are implicit. For example, classes are always referred to by reference; this means that class instances can never reside on the stack or be passed as function parameters.</source>
          <target state="translated">D は参照型を持っていますが、それは暗黙のうちです。例えば、クラスは常に参照によって参照されます。これは、クラスインスタンスがスタックに常駐したり、関数のパラメータとして渡されたりすることができないことを意味します。</target>
        </trans-unit>
        <trans-unit id="1b55a6666e706c8c18a3807c207816e092af0934" translate="yes" xml:space="preserve">
          <source>D has some support for interfacing with Objective-C. It supports classes, subclasses, instance variables, instance and class methods. It is only available on macOS, compiling for 64bit.</source>
          <target state="translated">D は Objective-C とのインターフェイスをいくつかサポートしています。クラス、サブクラス、インスタンス変数、インスタンスメソッド、クラスメソッドをサポートしています。これはmacOSでのみ利用可能で、64bit用にコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="19426ac046e36206df7c1df586ad586f184cd03e" translate="yes" xml:space="preserve">
          <source>D has types that are not represented in existing C or C++ debuggers. These are dynamic arrays, associative arrays, and delegates. Representing these types as structs causes problems because function calling conventions for structs are often different than that for these types, which causes C/C++ debuggers to misrepresent things. For these debuggers, they are represented as a C type which does match the calling conventions for the type.</source>
          <target state="translated">Dには、既存のCやC++デバッガでは表現されていない型があります。これらの型は、動的配列、連想配列、およびデリゲートです。これらの型を構造体として表現すると、構造体の関数呼び出し規約がこれらの型とは異なることが多く、C/C++デバッガが誤った表現をしてしまうという問題が発生します。これらのデバッガのために、これらの型は型の呼び出し規約と一致するCの型として表現されています。</target>
        </trans-unit>
        <trans-unit id="121b6728c073450cbfd13591bf64f1dacb90a45f" translate="yes" xml:space="preserve">
          <source>D has types that are not represented in existing C or C++ debuggers. These are dynamic arrays, associative arrays, and delegates. Representing these types as structs causes problems because function calling conventions for structs are often different than that for these types, which causes C/C++ debuggers to misrepresent things. For these debuggers, they are represented as a C type which does match the calling conventions for the type. The &lt;b&gt;dmd&lt;/b&gt; compiler will generate only C symbolic type info with the &lt;b&gt;-gc&lt;/b&gt; compiler switch.</source>
          <target state="translated">Dには、既存のCまたはC ++デバッガーでは表現されない型があります。これらは、動的配列、連想配列、およびデリゲートです。これらの型を構造体として表すと、構造体の関数呼び出し規約がこれらの型のものと異なることがよくあり、C / C ++デバッガーが誤った表現をするため、問題が発生します。これらのデバッガーの場合、それらはC型として表され、その型の呼び出し規約と一致します。&lt;b&gt;DMD&lt;/b&gt;コンパイラが持つ唯一のCシンボリック型情報が生成されます&lt;b&gt;-gc&lt;/b&gt;コンパイラスイッチを。</target>
        </trans-unit>
        <trans-unit id="0d7dc7a95854603cb8d9462f5cc1ad1a152da8c2" translate="yes" xml:space="preserve">
          <source>D header file for C99</source>
          <target state="translated">C99用Dヘッダファイル</target>
        </trans-unit>
        <trans-unit id="ed764989e25528a9844d96827752e35b6e2e9eea" translate="yes" xml:space="preserve">
          <source>D header file for C99.</source>
          <target state="translated">C99用のDヘッダファイル。</target>
        </trans-unit>
        <trans-unit id="7ad95cc9683672fd46f6a22377da886b23e6e760" translate="yes" xml:space="preserve">
          <source>D header file for interaction with C++ std::array.</source>
          <target state="translated">C++の std::array とのインタラクション用の D ヘッダファイル.</target>
        </trans-unit>
        <trans-unit id="4f35219179c87ed75b46610654f6f3ed6dbd80a3" translate="yes" xml:space="preserve">
          <source>D header file for interaction with C++ std::string.</source>
          <target state="translated">C++std::stringとの相互作用のためのDヘッダファイル.</target>
        </trans-unit>
        <trans-unit id="8745691e9f4a9ab07ce82e5bf211832a13541675" translate="yes" xml:space="preserve">
          <source>D header file for interaction with C++ std::string_view.</source>
          <target state="translated">C++std::string_viewとの相互作用のためのDヘッダファイル。</target>
        </trans-unit>
        <trans-unit id="0fa30a4a6e6e6ac7b257dba8aee80922db2a59d4" translate="yes" xml:space="preserve">
          <source>D header file for interaction with C++ std::type_traits.</source>
          <target state="translated">C++std::type_traitsとの相互作用のためのDヘッダファイル。</target>
        </trans-unit>
        <trans-unit id="e89f07a65806c6e223faa5fc9abe0d71cc5e02bb" translate="yes" xml:space="preserve">
          <source>D header file for interaction with C++ std::vector.</source>
          <target state="translated">C++std::vector とのインタラクション用の D ヘッダファイル.</target>
        </trans-unit>
        <trans-unit id="5824cf94dceeaf8ce80dcdea0f69c87be67a1def" translate="yes" xml:space="preserve">
          <source>D is a general-purpose systems programming language with a C-like syntax that compiles to native code. It is statically typed and supports both automatic (garbage collected) and manual memory management. D programs are structured as modules that can be compiled separately and linked with external libraries to create native libraries or executables.</source>
          <target state="translated">D は、ネイティブコードにコンパイルされる C ライクな構文を持つ汎用システムプログラミング言語です。静的型付けされており、自動(ガベージコレクション)と手動のメモリ管理の両方をサポートしています。Dプログラムはモジュールとして構造化されており、個別にコンパイルしたり、外部ライブラリとリンクしてネイティブライブラリや実行ファイルを作成したりすることができます。</target>
        </trans-unit>
        <trans-unit id="f4523654c6ad41f53f1cb538f5b3376ea8b5d67c" translate="yes" xml:space="preserve">
          <source>D is a systems programming language with support for garbage collection. Usually it is not necessary to free memory explicitly. Just allocate as needed, and the garbage collector will periodically return all unused memory to the pool of available memory.</source>
          <target state="translated">Dはガベージコレクションをサポートするシステムプログラミング言語です。通常、明示的にメモリを解放する必要はありません。必要に応じて割り当てるだけで、ガベージコレクタは定期的にすべての未使用メモリを利用可能なメモリプールに返します。</target>
        </trans-unit>
        <trans-unit id="e55199a6ff4a3d3957959784edcd8f8e4b27511c" translate="yes" xml:space="preserve">
          <source>D is designed to fit comfortably with a C compiler for the target system. D makes up for not having its own VM by relying on the target environment's C runtime library. It would be senseless to attempt to port to D or write D wrappers for the vast array of C APIs available. How much easier it is to just call them directly.</source>
          <target state="translated">D は、ターゲットシステム用の C コンパイラに快適にフィットするように設計されています。D は、ターゲット環境の C ランタイムライブラリに依存することで、独自の VM を持たないことを補っています。D に移植しようとしたり、利用可能な膨大な数の C API のために D のラッパーを書いたりするのは無意味なことです。それらを直接呼び出せば、どれだけ簡単になることか。</target>
        </trans-unit>
        <trans-unit id="cc6ee9028bb527b99c9d4c56e23cdd8645b43dac" translate="yes" xml:space="preserve">
          <source>D is statically typed. Every expression has a type. Types constrain the values an expression can hold, and determine the semantics of operations on those values.</source>
          <target state="translated">Dは静的に型付けされています。すべての式は型を持っています。型は式が保持できる値を制約し、それらの値に対する操作のセマンティクスを決定します。</target>
        </trans-unit>
        <trans-unit id="4cbe911218e52a81c61994de4956c194b77f145c" translate="yes" xml:space="preserve">
          <source>D language counterpart to C++ std::array.</source>
          <target state="translated">C++の std::array に対応する D 言語.</target>
        </trans-unit>
        <trans-unit id="d67cb3c014edbba57daff299226c50e7d26383c4" translate="yes" xml:space="preserve">
          <source>D language counterpart to C++ std::basic_string.</source>
          <target state="translated">C++のstd::basic_stringに対応するD言語.</target>
        </trans-unit>
        <trans-unit id="41ac364d23fcf29b68564ddbcd4409f706b80280" translate="yes" xml:space="preserve">
          <source>D language counterpart to C++ std::basic_string_view.</source>
          <target state="translated">C++のstd::basic_string_viewのD言語対応版.</target>
        </trans-unit>
        <trans-unit id="9f0d936e12f702e1c17150706af894a23276e3c6" translate="yes" xml:space="preserve">
          <source>D language types specify only a minimum precision, not a maximum. The &lt;code&gt;toPrec()&lt;/code&gt; function forces rounding of the argument &lt;code&gt;f&lt;/code&gt; to the precision of the specified floating point type &lt;code&gt;T&lt;/code&gt;. The rounding mode used is inevitably target-dependent, but will be done in a way to maximize accuracy. In most cases, the default is round-to-nearest.</source>
          <target state="translated">D言語タイプは、最大ではなく最小の精度のみを指定します。 &lt;code&gt;toPrec()&lt;/code&gt; の引数の丸め関数力 &lt;code&gt;f&lt;/code&gt; 指定浮動小数点型の精度 &lt;code&gt;T&lt;/code&gt; 。使用される丸めモードは必然的にターゲットに依存しますが、精度を最大化する方法で実行されます。ほとんどの場合、デフォルトは四捨五入です。</target>
        </trans-unit>
        <trans-unit id="9d7d4857e53f3903d163814c3fd126b718eac23d" translate="yes" xml:space="preserve">
          <source>D makes this simple. All member initializations must be determinable by the compiler at compile time, hence there is no order-of-evaluation dependency for member initializations, and it is not possible to read a value that has not been initialized. Dynamic initialization is performed by a static constructor, defined with a special syntax &lt;code&gt;static this()&lt;/code&gt;.</source>
          <target state="translated">Dはこれを簡単にします。すべてのメンバー初期化は、コンパイル時にコンパイラーによって判別可能でなければならないため、メンバー初期化には評価順序の依存関係はなく、初期化されていない値を読み取ることはできません。動的な初期化は、特別な構文 &lt;code&gt;static this()&lt;/code&gt; で定義された静的コンストラクターによって実行されます。</target>
        </trans-unit>
        <trans-unit id="348b41b262e2ee87f7ee9a58be800f10e55e96d7" translate="yes" xml:space="preserve">
          <source>D makes use of the Codeview OEM generic type record indicated by &lt;code&gt;LF_OEM&lt;/code&gt; (0x0015). The format is:</source>
          <target state="translated">Dは、 &lt;code&gt;LF_OEM&lt;/code&gt; （0x0015）で示されるCodeview OEMジェネリック型レコードを利用します。形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f05a7b018a28bc978c0088c176ce00074272430c" translate="yes" xml:space="preserve">
          <source>D programs generally require:</source>
          <target state="translated">Dプログラムは一般的に必要です。</target>
        </trans-unit>
        <trans-unit id="9d19d04a51d14b6f326e1ab50d8689f157419398" translate="yes" xml:space="preserve">
          <source>D provides an easy way to call C functions and operating system API functions, as compatibility with both is essential. The</source>
          <target state="translated">Dは、Cの関数とオペレーティングシステムのAPI関数の両方との互換性が不可欠なので、簡単に呼び出す方法を提供します。そのため、C言語の関数とオペレーティングシステムのAPI関数を簡単に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2b7505970a750559a4a0dcb9c95b55f7ba6c9212" translate="yes" xml:space="preserve">
          <source>D runtime type identification uses completely different techniques than C++. The two are incompatible.</source>
          <target state="translated">Dのランタイム型識別は、C++とは全く異なる技術を使用しています。この2つは互換性がありません。</target>
        </trans-unit>
        <trans-unit id="2f074b4f5342d38c9e4b97593d5d852288629b0d" translate="yes" xml:space="preserve">
          <source>D structs and classes have different semantics whereas C++ structs and classes are basically the same. The use of a D struct or class depends on the C++ implementation and not on the used C++ keyword. When mapping a D &lt;code&gt;class&lt;/code&gt; onto a C++ &lt;code&gt;struct&lt;/code&gt;, use &lt;code&gt;extern(C++, struct)&lt;/code&gt; to avoid linking problems with C++ compilers (notably MSVC) that distinguish between C++'s &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;struct&lt;/code&gt; when mangling. Conversely, use &lt;code&gt;extern(C++, class)&lt;/code&gt; to map a D &lt;code&gt;struct&lt;/code&gt; onto a C++ &lt;code&gt;class&lt;/code&gt;.</source>
          <target state="translated">Dの構造体とクラスはセマンティクスが異なりますが、C ++の構造体とクラスは基本的に同じです。D構造体またはクラスの使用は、使用されるC ++キーワードではなく、C ++実装に依存します。D &lt;code&gt;class&lt;/code&gt; をC ++ &lt;code&gt;struct&lt;/code&gt; にマッピングするときは、 &lt;code&gt;extern(C++, struct)&lt;/code&gt; を使用して、C ++ の &lt;code&gt;class&lt;/code&gt; と &lt;code&gt;struct&lt;/code&gt; を区別するC ++コンパイラ（特にMSVC）とのリンクの問題を回避します。逆に、 &lt;code&gt;extern(C++, class)&lt;/code&gt; を使用して、D &lt;code&gt;struct&lt;/code&gt; をC ++ &lt;code&gt;class&lt;/code&gt; にマップします。</target>
        </trans-unit>
        <trans-unit id="413b9f9ee5f4a33c9e8e2c74310bb7e1520feb22" translate="yes" xml:space="preserve">
          <source>D structs and unions are analogous to C's.</source>
          <target state="translated">D構造体と組合はC構造体に類推されます。</target>
        </trans-unit>
        <trans-unit id="b0e98f6d2eaf06b89533f60085e7a9609ecffc56" translate="yes" xml:space="preserve">
          <source>D style variadic function</source>
          <target state="translated">Dスタイルバリアディック機能</target>
        </trans-unit>
        <trans-unit id="c9234fe1a36dd900caaf3d14d414557e453441fe" translate="yes" xml:space="preserve">
          <source>D supports bitfields in the standard library: see &lt;a href=&quot;https://dlang.org/phobos/std_bitmanip.html#bitfields&quot;&gt;&lt;code&gt;std.bitmanip.bitfields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Dは標準ライブラリのビットフィールドをサポートしています&lt;a href=&quot;https://dlang.org/phobos/std_bitmanip.html#bitfields&quot;&gt; &lt;code&gt;std.bitmanip.bitfields&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0a3e7acb063a730b948300d255921be3f44a2bd6" translate="yes" xml:space="preserve">
          <source>D symbol identifiers to source representation.</source>
          <target state="translated">D シンボル識別子をソース表現に変換します。</target>
        </trans-unit>
        <trans-unit id="63b2085b5ee886bb893b17cc3825c3a7bac6abcc" translate="yes" xml:space="preserve">
          <source>D takes a pragmatic approach that assumes a couple modest accommodations can solve a significant chunk of the problem:</source>
          <target state="translated">Dは、カップルのささやかな宿泊施設が問題のかなりの部分を解決することができると仮定して、実用的なアプローチを取っています。</target>
        </trans-unit>
        <trans-unit id="076ea0cddc7cd8818920bc029904f93dd150a22a" translate="yes" xml:space="preserve">
          <source>D understands how C function names are &quot;mangled&quot; and the correct C function call/return sequence.</source>
          <target state="translated">Dは、C言語の関数名がどのように「こじつけ」されているか、正しいC言語の関数の呼び出し/戻りの順序を理解しています。</target>
        </trans-unit>
        <trans-unit id="bfdb702abc09e4bf6af6f33ee84d8a6561bdb436" translate="yes" xml:space="preserve">
          <source>D understands how C++ function names are &quot;mangled&quot; and the correct C++ function call/return sequence.</source>
          <target state="translated">Dは、C++の関数名がどのように「こじつけ」されているか、正しいC++関数の呼び出し/戻りの順序を理解しています。</target>
        </trans-unit>
        <trans-unit id="f2ca0b27fd611ef015ce14be30794acd4f9a7076" translate="yes" xml:space="preserve">
          <source>D x86 Inline Assembler</source>
          <target state="translated">D x86インラインアセンブラ</target>
        </trans-unit>
        <trans-unit id="5cdfa72ceece084d32cc919a274b9cba8fcd894f" translate="yes" xml:space="preserve">
          <source>D's allocators have a layered structure in both implementation and documentation:</source>
          <target state="translated">Dのアロケータは、実装でもドキュメントでもレイヤー構造になっています。</target>
        </trans-unit>
        <trans-unit id="6829dc591dc54cea15edb61fe39f95e34f7f3982" translate="yes" xml:space="preserve">
          <source>D's built-in garbage-collected allocator.</source>
          <target state="translated">D の組み込みのガベージコレクション型アロケータ。</target>
        </trans-unit>
        <trans-unit id="b8187ee85e129e1f90db421cc9a29c74c3da265a" translate="yes" xml:space="preserve">
          <source>D's goals for embedded documentation are:</source>
          <target state="translated">Dの組み込みドキュメントの目標は</target>
        </trans-unit>
        <trans-unit id="40a87633288b39dd560b9503d0951d9deec4c501" translate="yes" xml:space="preserve">
          <source>D, being a systems programming language, provides an inline assembler. The inline assembler is standardized for D implementations across the same CPU family, for example, the Intel Pentium inline assembler for a Win32 D compiler will be syntax compatible with the inline assembler for Linux running on an Intel Pentium.</source>
          <target state="translated">システムプログラミング言語であるDにはインラインアセンブラがあります。インラインアセンブラは、同じ CPU ファミリの D 実装に対して標準化されており、例えば、Win32 D コンパイラ用の Intel Pentium インラインアセンブラは、Intel Pentium 上で動作する Linux 用のインラインアセンブラと文法的に互換性があります。</target>
        </trans-unit>
        <trans-unit id="f121662d3ed579c4262cd8ee742f37a867894743" translate="yes" xml:space="preserve">
          <source>D-style Variadic Functions</source>
          <target state="translated">D-style Variadic Functions</target>
        </trans-unit>
        <trans-unit id="85f3cd4f9bad02d84690368f648e490c0fb00c1d" translate="yes" xml:space="preserve">
          <source>D-style variadic functions cannot be marked as &lt;code&gt;@safe&lt;/code&gt;.</source>
          <target state="translated">Dスタイルの可変関数は &lt;code&gt;@safe&lt;/code&gt; としてマークできません。</target>
        </trans-unit>
        <trans-unit id="1ff8c600ebb573fe27a75c1d69933fce59916bff" translate="yes" xml:space="preserve">
          <source>D.NET</source>
          <target state="translated">D.NET</target>
        </trans-unit>
        <trans-unit id="32d5e09780df47e67febb678521d8abe246ef7f3" translate="yes" xml:space="preserve">
          <source>D1 style operator overloading</source>
          <target state="translated">D1 スタイルの演算子のオーバーロード</target>
        </trans-unit>
        <trans-unit id="6e915cae90d2c29f2358559dc05c3df58595f55d" translate="yes" xml:space="preserve">
          <source>DATETIME</source>
          <target state="translated">DATETIME</target>
        </trans-unit>
        <trans-unit id="1814daa949d9be12578d550487601b3ffb0f3294" translate="yes" xml:space="preserve">
          <source>DCatchBlock</source>
          <target state="translated">DCatchBlock</target>
        </trans-unit>
        <trans-unit id="c35aab27f1f16d077844d1e2e843f5ad7a4d74b4" translate="yes" xml:space="preserve">
          <source>DCatchInfo</source>
          <target state="translated">DCatchInfo</target>
        </trans-unit>
        <trans-unit id="149aac94bd27b95bb54c837312e06b3ff1e01797" translate="yes" xml:space="preserve">
          <source>DELETE, TRACE and others</source>
          <target state="translated">DELETE、TRACEなど</target>
        </trans-unit>
        <trans-unit id="ed03c1e6eea87bb52507c25ade7ebb2cf71c59b0" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Use &lt;a href=&quot;#reverseArgs&quot;&gt;&lt;code&gt;reverseArgs&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#reverseArgs&quot;&gt; &lt;code&gt;reverseArgs&lt;/code&gt; &lt;/a&gt;：reverseArgsを使用</target>
        </trans-unit>
        <trans-unit id="5684aeb3ce6e6bbccefbe8970e6bd7ea5a037735" translate="yes" xml:space="preserve">
          <source>DF &lt;code&gt;f&lt;/code&gt;</source>
          <target state="translated">DF &lt;code&gt;f&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c26f4629698733a6034fa75e0b7268c2d40e6d7a" translate="yes" xml:space="preserve">
          <source>DG &lt;code&gt;sink&lt;/code&gt;</source>
          <target state="translated">DG &lt;code&gt;sink&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fea0a308507e8c0ea8d5406ec3aa47072ac89917" translate="yes" xml:space="preserve">
          <source>DHandlerInfo</source>
          <target state="translated">DHandlerInfo</target>
        </trans-unit>
        <trans-unit id="8ac04a874fab478591710648015b2cab5ac04e7a" translate="yes" xml:space="preserve">
          <source>DHandlerTable</source>
          <target state="translated">DHandlerTable</target>
        </trans-unit>
        <trans-unit id="281b3e844c7c9ebd0f0700420e0eca42f1c07f3d" translate="yes" xml:space="preserve">
          <source>DList &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string op, Stuff)(Stuff rhs)</source>
          <target state="translated">DList &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;（string op、Stuff）（Stuff rhs）</target>
        </trans-unit>
        <trans-unit id="db5bf0255282647c454fa59e6c8c5eb7735233ea" translate="yes" xml:space="preserve">
          <source>DList &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt;(string op, Stuff)(Stuff lhs)</source>
          <target state="translated">DList &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt;（string op、Stuff）（Stuff lhs）</target>
        </trans-unit>
        <trans-unit id="25c0b6803c5bf3452395c58abf6779ae685c3351" translate="yes" xml:space="preserve">
          <source>DList &lt;strong id=&quot;opOpAssign&quot;&gt;opOpAssign&lt;/strong&gt;(string op, Stuff)(Stuff rhs)</source>
          <target state="translated">DList &lt;strong id=&quot;opOpAssign&quot;&gt;opOpAssign&lt;/strong&gt;（string op、Stuff）（Stuff rhs）</target>
        </trans-unit>
        <trans-unit id="73220b6fc86e8444477fc3e4a8f1ac57ede8ba51" translate="yes" xml:space="preserve">
          <source>DMD (Digital Mars D) is the compiler</source>
          <target state="translated">DMD(デジタルマーズD)は、コンパイラ</target>
        </trans-unit>
        <trans-unit id="2252ec1f6791e8118b0737f8262fe59003241113" translate="yes" xml:space="preserve">
          <source>DMD's entry point, C main.</source>
          <target state="translated">DMDのエントリーポイント、Cメイン。</target>
        </trans-unit>
        <trans-unit id="20cf49a295826203fca48874eadc25984298220f" translate="yes" xml:space="preserve">
          <source>DMD-generated module &lt;code&gt;__entrypoint&lt;/code&gt; where the C main resides</source>
          <target state="translated">Cメインが存在するDMD生成モジュール &lt;code&gt;__entrypoint&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a40af10594b1fe393f992683f992876e5b82c830" translate="yes" xml:space="preserve">
          <source>DNS cache timeout</source>
          <target state="translated">DNSキャッシュタイムアウト</target>
        </trans-unit>
        <trans-unit id="839b4d242b27d4e00dc0979927fcbe8223225c0f" translate="yes" xml:space="preserve">
          <source>DNS lookup timeout.</source>
          <target state="translated">DNSルックアップのタイムアウト。</target>
        </trans-unit>
        <trans-unit id="05360ae598da60f4c6ea48e2bd59a360ad627b22" translate="yes" xml:space="preserve">
          <source>DOCFILENAME</source>
          <target state="translated">DOCFILENAME</target>
        </trans-unit>
        <trans-unit id="527d9c071bb7a8c959e3b30d96d47f285f9bf286" translate="yes" xml:space="preserve">
          <source>DT &lt;code&gt;tolerance&lt;/code&gt;</source>
          <target state="translated">DT &lt;code&gt;tolerance&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b61e056a09b75ddaa3d4ded4da051df87ba437b" translate="yes" xml:space="preserve">
          <source>DWARF Version</source>
          <target state="translated">DWARFバージョン</target>
        </trans-unit>
        <trans-unit id="24942523bd10801ae5b643487a7c28eba38f21f5" translate="yes" xml:space="preserve">
          <source>Dash</source>
          <target state="translated">Dash</target>
        </trans-unit>
        <trans-unit id="876c81de0c2e26d99cf08d9a14af93e711b19f5c" translate="yes" xml:space="preserve">
          <source>Dash_Punctuation</source>
          <target state="translated">Dash_Punctuation</target>
        </trans-unit>
        <trans-unit id="f4ad2706fa87a802352efdbb422cb64dbe61c91c" translate="yes" xml:space="preserve">
          <source>Data &lt;code&gt;data&lt;/code&gt;</source>
          <target state="translated">データ &lt;code&gt;data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="352953a16a74f0790135416ee3270f630371240c" translate="yes" xml:space="preserve">
          <source>Data Change Notification Callbacks</source>
          <target state="translated">データ変更通知コールバック</target>
        </trans-unit>
        <trans-unit id="df6ebe7969c4d5202b832d782941362c6e0cae9d" translate="yes" xml:space="preserve">
          <source>Data Type Compatibility</source>
          <target state="translated">データ型の互換性</target>
        </trans-unit>
        <trans-unit id="300eccfd0c54c3aa5cc0df22eac803dbe88630e3" translate="yes" xml:space="preserve">
          <source>Data definitions DTibytes 1..7 bytes DTabytes offset of bytes of data a { a data bytes } DTnbytes bytes of data a { a data bytes } a = offset DTazeros # of 0 bytes a DTsymsize same as DTazeros, but the type of the symbol gives the size DTcommon # of 0 bytes (in a common block) a DTxoff offset from symbol w a w = symbol number (pointer for CPP) a = offset DTcoff offset into code segment</source>
          <target state="translated">データ定義 DTibytes 1~7 バイト DTabytes データのバイトオフセット a{a データバイト }のバイトオフセット DTnbytes bytes of data a{a data bytes}a=offset DTazeros#of 0 bytes a DTsymsize DTazeros と同じですが、シンボルの種類によってサイズが変わります DTcommon#of 0 bytes (共通ブロック内)a DTxoff offset from symbol w a w=シンボル番号 (CPP のポインタ)a=offset DTcoff offset into code segment</target>
        </trans-unit>
        <trans-unit id="5938adc1e4b8fc6c4fa6aeefb38d094858c6ba03" translate="yes" xml:space="preserve">
          <source>Data for a class declaration that is needed for the Objective-C integration.</source>
          <target state="translated">Objective-C 統合に必要なクラス宣言のデータ。</target>
        </trans-unit>
        <trans-unit id="6a01abb210c956c2e12e9ccb27efc6f5697b4642" translate="yes" xml:space="preserve">
          <source>Data is shared across threads and the affix follows suit.</source>
          <target state="translated">データはスレッド間で共有され、アフィはそれに従います。</target>
        </trans-unit>
        <trans-unit id="775e1e628cf251b049c3fa9bfe1977a634c74e05" translate="yes" xml:space="preserve">
          <source>Data is written to one end of the pipe and read from the other.</source>
          <target state="translated">データはパイプの一方の端に書き込まれ、もう一方の端から読み込まれます。</target>
        </trans-unit>
        <trans-unit id="b510f83fb9e39f1a10ce10e2dd7b90e9a99c4178" translate="yes" xml:space="preserve">
          <source>Data link escape</source>
          <target state="translated">データリンクエスケープ</target>
        </trans-unit>
        <trans-unit id="09d7927bd586a435c13e162ffd8e2037761ee143" translate="yes" xml:space="preserve">
          <source>Data may be placed into a table. Tables consist of a single header row, a delimiter row, and zero or more data rows. Cells in each row are separated by pipe (&lt;code&gt;|&lt;/code&gt;) characters. Initial and trailing &lt;code&gt;|&lt;/code&gt;'s are optional. The number of cells in the delimiter row must match the number of cells in the header row:</source>
          <target state="translated">データはテーブルに配置できます。テーブルは、単一のヘッダー行、区切り行、および0個以上のデータ行で構成されます。各行のセルはパイプ（ &lt;code&gt;|&lt;/code&gt; ）文字で区切られます。最初と末尾 &lt;code&gt;|&lt;/code&gt; はオプションです。区切り行のセルの数は、ヘッダー行のセルの数と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="35e3ae602f557832691821f2a5d7c7c5a9884f67" translate="yes" xml:space="preserve">
          <source>Data of member in compressed form.</source>
          <target state="translated">メンバーのデータを圧縮したもの。</target>
        </trans-unit>
        <trans-unit id="796c0736ccd7880cc5a54a71c908e1c0408f3f88" translate="yes" xml:space="preserve">
          <source>Data of the entire contents of the archive.</source>
          <target state="translated">アーカイブの全コンテンツのデータ。</target>
        </trans-unit>
        <trans-unit id="b20bde9629e5c99004ca74941e9b23c3a1df877c" translate="yes" xml:space="preserve">
          <source>Data passed to the progress callback</source>
          <target state="translated">プログレスコールバックに渡されるデータ</target>
        </trans-unit>
        <trans-unit id="cc3e0536ab13aed2fb72da353c6d1b107881a065" translate="yes" xml:space="preserve">
          <source>Data pulled from input before finding a problem</source>
          <target state="translated">問題を発見する前に入力からデータを引き出す</target>
        </trans-unit>
        <trans-unit id="a46a83973f1d5005a51cff8503ad3554d15739dd" translate="yes" xml:space="preserve">
          <source>Data that will never change its value can be typed as immutable. The immutable keyword can be used as a</source>
          <target state="translated">値が変わることのないデータは、immutable と入力することができます。immutableキーワードは</target>
        </trans-unit>
        <trans-unit id="bd76809af8087d8bf86bccfefc1fce2214a3765e" translate="yes" xml:space="preserve">
          <source>Data to HTTP Post</source>
          <target state="translated">HTTPポストへのデータ</target>
        </trans-unit>
        <trans-unit id="0be170abfdf228097d8fd04a092e2e686eb56209" translate="yes" xml:space="preserve">
          <source>Data to be swapped with &lt;code&gt;lhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; と交換するデータ。</target>
        </trans-unit>
        <trans-unit id="e4c961498463f7e0d6c406d9c8008486428ab14e" translate="yes" xml:space="preserve">
          <source>Data to be swapped with &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rhs&lt;/code&gt; と交換されるデータ。</target>
        </trans-unit>
        <trans-unit id="0c3a807b2afb3a1c7be0e9b4ae52d8810bae9911" translate="yes" xml:space="preserve">
          <source>Data to copy.</source>
          <target state="translated">データをコピーします。</target>
        </trans-unit>
        <trans-unit id="1dfd2ee1303ec46c31262cfa19e2f7fb06dc1a8b" translate="yes" xml:space="preserve">
          <source>Data to post.</source>
          <target state="translated">投稿するデータ。</target>
        </trans-unit>
        <trans-unit id="797bc05b357305e1932e73a7d36b5c5d9e636a5c" translate="yes" xml:space="preserve">
          <source>Data type definition of curl_off_t.</source>
          <target state="translated">curl_off_t のデータ型定義。</target>
        </trans-unit>
        <trans-unit id="805e631b2c4331634631ab9d3d378e6f37ae988c" translate="yes" xml:space="preserve">
          <source>Data type mismatch</source>
          <target state="translated">データ型の不一致</target>
        </trans-unit>
        <trans-unit id="87ad120a4ba60c79863260e10eca7015248baadd" translate="yes" xml:space="preserve">
          <source>Database Connection For Functions</source>
          <target state="translated">機能のデータベース接続</target>
        </trans-unit>
        <trans-unit id="f77d22fb96d5dfa5073b2fe8ffcf8caa0f1f055f" translate="yes" xml:space="preserve">
          <source>Database Connection Handle</source>
          <target state="translated">データベース接続ハンドル</target>
        </trans-unit>
        <trans-unit id="ed913bb076648fca64b8de1c707bbce02bda0945" translate="yes" xml:space="preserve">
          <source>Database Connection Status</source>
          <target state="translated">データベース接続状態</target>
        </trans-unit>
        <trans-unit id="74cbb2ae7b134d31108d39d85d470240bf8ec748" translate="yes" xml:space="preserve">
          <source>Database Name NULL</source>
          <target state="translated">データベース名 NULL</target>
        </trans-unit>
        <trans-unit id="9c74d7c4589947e1f0611e10551aa7c9e1f5efa2" translate="yes" xml:space="preserve">
          <source>Database Name Table Name</source>
          <target state="translated">データベース名 テーブル名</target>
        </trans-unit>
        <trans-unit id="08868372fcc6df03923ff0a62b6740aab4b59a1d" translate="yes" xml:space="preserve">
          <source>Database lock protocol error</source>
          <target state="translated">データベースロックプロトコルエラー</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="e41c9dca2333fa788b5cf30714ffc607513d2701" translate="yes" xml:space="preserve">
          <source>Date &lt;code&gt;date&lt;/code&gt;</source>
          <target state="translated">日付 &lt;code&gt;date&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30ef0df6fd820e100e2b862329873127bc101367" translate="yes" xml:space="preserve">
          <source>Date &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">日付 &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0992381fbd2ed819a8d85ebd8c5f3c4e046a291c" translate="yes" xml:space="preserve">
          <source>Date checking</source>
          <target state="translated">日付チェック</target>
        </trans-unit>
        <trans-unit id="f9a570306f04512676b4ec99a692b20b053ab81b" translate="yes" xml:space="preserve">
          <source>Date conversion</source>
          <target state="translated">日付変換</target>
        </trans-unit>
        <trans-unit id="f1e5baf5ecc3589631088c40cbdd43061976ed8f" translate="yes" xml:space="preserve">
          <source>DateTime</source>
          <target state="translated">DateTime</target>
        </trans-unit>
        <trans-unit id="7bd0a645e83d6293f2ac658ba2c541a128f65160" translate="yes" xml:space="preserve">
          <source>DateTime &lt;code&gt;dateTime&lt;/code&gt;</source>
          <target state="translated">DateTime &lt;code&gt;dateTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50c465a7e603d7f34f3bc92280dabffaa722ae0b" translate="yes" xml:space="preserve">
          <source>DateTime &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">DateTime &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="102540d9bb31a7bb0220b673237b8d10f7c7275f" translate="yes" xml:space="preserve">
          <source>David Simcha</source>
          <target state="translated">デビッド・シムチャ</target>
        </trans-unit>
        <trans-unit id="23c1a4a564924c404275ccc90f9032d7bc610cd3" translate="yes" xml:space="preserve">
          <source>Day of a Gregorian Month.</source>
          <target state="translated">グレゴリオ暦の月の日。</target>
        </trans-unit>
        <trans-unit id="232f188c18baa6ec73f240c2283edac2e895ead4" translate="yes" xml:space="preserve">
          <source>Day of the month.</source>
          <target state="translated">月の日にち。</target>
        </trans-unit>
        <trans-unit id="626768dfcc6b9633ecc6a7e7e7bf8195db816514" translate="yes" xml:space="preserve">
          <source>Day of the week this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;が当たる曜日。</target>
        </trans-unit>
        <trans-unit id="c331185171d5b8b397558aeeba86ec31a95daba4" translate="yes" xml:space="preserve">
          <source>Day of the week this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が存在する曜日。</target>
        </trans-unit>
        <trans-unit id="88e734266606869df957a7c0f140482b5dc9240d" translate="yes" xml:space="preserve">
          <source>Day of the week this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;がある曜日。</target>
        </trans-unit>
        <trans-unit id="5adf2e7dce3355a8b43b9e02348a4d264604444a" translate="yes" xml:space="preserve">
          <source>Day of the year this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;が当たる年の日。</target>
        </trans-unit>
        <trans-unit id="d8cf70c5944db45b0744da7bbc738777a7ad789e" translate="yes" xml:space="preserve">
          <source>Day of the year this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が存在する年間通算日。</target>
        </trans-unit>
        <trans-unit id="f9c83570b5900ee02a21939abef960bd71f7ebe0" translate="yes" xml:space="preserve">
          <source>Day of the year this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;が存在する年間通算日。</target>
        </trans-unit>
        <trans-unit id="9d217acf15d9c91018c040a87e1a6703ff4783db" translate="yes" xml:space="preserve">
          <source>Day of the year.</source>
          <target state="translated">一年のうちの一日。</target>
        </trans-unit>
        <trans-unit id="5556bda98087587c3fd3795ebf53b124789c5586" translate="yes" xml:space="preserve">
          <source>DayOfWeek &lt;code&gt;currDoW&lt;/code&gt;</source>
          <target state="translated">DayOfWeek &lt;code&gt;currDoW&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f233ca1cd32606c49e90bb687b290b377c3fa09c" translate="yes" xml:space="preserve">
          <source>DayOfWeek &lt;code&gt;dayOfWeek&lt;/code&gt;</source>
          <target state="translated">DayOfWeek &lt;code&gt;dayOfWeek&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe0c0bef273fca4c1fc04dfe682d2fed5f5b8c28" translate="yes" xml:space="preserve">
          <source>DayOfWeek &lt;code&gt;dow&lt;/code&gt;</source>
          <target state="translated">DayOfWeek &lt;code&gt;dow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8064b01fec4de1e986ae9989edb52515cfd892bb" translate="yes" xml:space="preserve">
          <source>Daylight Savings Time flag</source>
          <target state="translated">夏時間旗</target>
        </trans-unit>
        <trans-unit id="86ccd9040e164f6b31eff441e1b4ddc44e72847d" translate="yes" xml:space="preserve">
          <source>Ddoc Section Formatting Macros</source>
          <target state="translated">Ddoc セクションの書式設定マクロ</target>
        </trans-unit>
        <trans-unit id="6ac46f279a1fa0133478a64489b3104466715043" translate="yes" xml:space="preserve">
          <source>Ddoc can automatically generate usage examples for declarations using unit tests. If a declaration is followed by a documented unit test, the code from the test will be inserted into the example section of the declaration. This avoids the frequent problem of having outdated documentation for pieces of code.</source>
          <target state="translated">Ddoc は、ユニットテストを使って宣言の使用例を自動的に生成することができます。宣言の後にドキュメント化されたユニットテストが続く場合、テストのコードは宣言の例のセクションに挿入されます。これにより、コードの一部に古い文書があるという頻繁に起こる問題を回避することができます。</target>
        </trans-unit>
        <trans-unit id="c18b6736ff9c9b5405dba716c1075e7224dff8e0" translate="yes" xml:space="preserve">
          <source>Ddoc does not generate HTML code. It formats into the basic formatting macros, which (in their predefined form) are then expanded into HTML. If output other than HTML is desired, then these macros need to be redefined.</source>
          <target state="translated">Ddoc は HTML コードを生成しません。それは基本的な書式設定マクロにフォーマットされ、(定義済みの形式で)HTMLに展開されます。HTML以外の出力が必要な場合は、これらのマクロを再定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="e9840b40bb80bed37d395f716bc6b09d4d6c01d5" translate="yes" xml:space="preserve">
          <source>Ddoc is primarily designed for use in producing documentation from embedded comments. It can also, however, be used for processing other general documentation. The reason for doing this would be to take advantage of the macro capability of Ddoc and the D code syntax highlighting capability.</source>
          <target state="translated">Ddocは、主に埋め込まれたコメントからドキュメントを作成するために設計されています。しかし、他の一般的な文書を処理するために使用することもできます。その理由は、Ddocのマクロ機能とDコードのシンタックスハイライト機能を活用するためです。</target>
        </trans-unit>
        <trans-unit id="1fb7c1687832d0818c78d9fb05c4ecb341d15249" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;, which is assumed to have been previously allocated with this allocator. Deallocation performs a linear search in the free list to preserve its sorting order. It follows that blocks with higher addresses in allocators with many free blocks are slower to deallocate.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; を割り当て解除します。これは、このアロケーターで以前に割り当てられていると想定されています。割り当て解除は、空きリストで線形検索を実行して、並べ替え順序を保持します。したがって、空きブロックが多いアロケータ内のアドレスが高いブロックほど、割り当て解除が遅くなります。</target>
        </trans-unit>
        <trans-unit id="3d01931f745782a57d8fca7493bd853c4a9ddce7" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; の割り当てを解除します。</target>
        </trans-unit>
        <trans-unit id="e7fadc0e35dabce1bf9846c81d69446d932164cd" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;. If it's of eligible size, it's put on the free list. Otherwise, it's returned to &lt;code&gt;parent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; の割り当てを解除します。適格なサイズの場合は、フリーリストに追加されます。それ以外の場合は、 &lt;code&gt;parent&lt;/code&gt; に返されます。</target>
        </trans-unit>
        <trans-unit id="4dedb91c6fcf841105df2821d7153a890b807f6b" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;. This works only if &lt;code&gt;b&lt;/code&gt; was obtained as the last call to &lt;code&gt;allocate&lt;/code&gt;; otherwise (i.e. another allocation has occurred since) it does nothing.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; の割り当てを解除します。これは、 &lt;code&gt;b&lt;/code&gt; が &lt;code&gt;allocate&lt;/code&gt; の最後の呼び出しとして取得された場合にのみ機能します。それ以外の場合（つまり、別の割り当てが発生した後）は何もしません。</target>
        </trans-unit>
        <trans-unit id="81959fcf2b1407376d1d5051d3ba64c2b39ce9b1" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;. This works only if &lt;code&gt;b&lt;/code&gt; was obtained as the last call to &lt;code&gt;allocate&lt;/code&gt;; otherwise (i.e. another allocation has occurred since) it does nothing. This semantics is tricky and therefore &lt;code&gt;deallocate&lt;/code&gt; is defined only if &lt;code&gt;Region&lt;/code&gt; is instantiated with &lt;code&gt;Yes.defineDeallocate&lt;/code&gt; as the third template argument.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; の割り当てを解除します。これは、 &lt;code&gt;b&lt;/code&gt; が &lt;code&gt;allocate&lt;/code&gt; の最後の呼び出しとして取得された場合にのみ機能します。それ以外の場合（つまり、別の割り当てが発生した後）は何もしません。このセマンティクスはトリッキーであるため、 &lt;code&gt;deallocate&lt;/code&gt; する場合にのみ定義されている &lt;code&gt;Region&lt;/code&gt; でインスタンス化され &lt;code&gt;Yes.defineDeallocate&lt;/code&gt; 第三テンプレート引数として。</target>
        </trans-unit>
        <trans-unit id="00417f5823644f33bf5edec704252ae474e90607" translate="yes" xml:space="preserve">
          <source>Deallocates a block previously allocated with this allocator.</source>
          <target state="translated">このアロケータで以前に割り当てられたブロックを解放します。</target>
        </trans-unit>
        <trans-unit id="e60dbe0f533b075afd615147044f432f563e90fc" translate="yes" xml:space="preserve">
          <source>Deallocates a memory block. Implementations that don't support this primitive should always return &lt;code&gt;false&lt;/code&gt;. A simple way to check that an allocator supports deallocation is to call &lt;code&gt;deallocate(null)&lt;/code&gt;.</source>
          <target state="translated">メモリブロックの割り当てを解除します。このプリミティブをサポートしない実装は、常に &lt;code&gt;false&lt;/code&gt; を返す必要があります。アロケータが割り当て解除をサポートしていることを確認する簡単な方法は、 &lt;code&gt;deallocate(null)&lt;/code&gt; を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="1aecd159fca1c4e67fecc7d26fe360b4f5fa379d" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated by this region, which can be subsequently reused for new allocations.</source>
          <target state="translated">この領域に割り当てられたすべてのメモリを解放します。</target>
        </trans-unit>
        <trans-unit id="29e7515d0b0fa1aa05fab0cdf677555556bd1ab2" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated with this allocator.</source>
          <target state="translated">このアロケータで割り当てられたすべてのメモリを解放します。</target>
        </trans-unit>
        <trans-unit id="13ee72b94b0c3a01c2b39dc74bddd998b6f54bff" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated with this allocator. If an allocator implements this method, it must specify whether its destructor calls it, too.</source>
          <target state="translated">このアロケータで割り当てられたすべてのメモリを解放します。アロケータがこのメソッドを実装している場合、そのデストラクタもこのメソッドを呼び出すかどうかを指定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="c8b0dd85166c453cf047322a1d701f8f0774ce61" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated.</source>
          <target state="translated">割り当てられたすべてのメモリを解放します。</target>
        </trans-unit>
        <trans-unit id="dc581d2fbe01bbad449340bd78f6d3905d3d52bc" translate="yes" xml:space="preserve">
          <source>Deallocates all memory currently allocated, making the allocator ready for other allocations. This is a &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;) operation.</source>
          <target state="translated">現在割り当てられているすべてのメモリの割り当てを解除し、アロケータを他の割り当てに備えます。これは&amp;Omicron;（ &lt;code&gt;1&lt;/code&gt; ）操作です。</target>
        </trans-unit>
        <trans-unit id="375eb34e6b4c58d529175cc75b6080a5179fa77c" translate="yes" xml:space="preserve">
          <source>Deallocates all memory. Implementations that don't support this primitive should always return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">すべてのメモリの割り当てを解除します。このプリミティブをサポートしない実装は、常に &lt;code&gt;false&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="693611e2f31c3d686f38d8d59ef91ed8a58f5e60" translate="yes" xml:space="preserve">
          <source>Deallocates everything from the parent.</source>
          <target state="translated">親からすべてを解放します。</target>
        </trans-unit>
        <trans-unit id="28e790db63e16ffb73cddf977ba22e95426db2d3" translate="yes" xml:space="preserve">
          <source>Deallocates the buffer &lt;code&gt;b&lt;/code&gt; given as parameter. Deallocations take place in constant time, regardless of the number of nodes in the list. &lt;code&gt;b.ptr&lt;/code&gt; is rounded down to the nearest multiple of the &lt;code&gt;alignment&lt;/code&gt; to quickly find the corresponding &lt;code&gt;AlignedBlockNode&lt;/code&gt;.</source>
          <target state="translated">パラメータとして指定されたバッファ &lt;code&gt;b&lt;/code&gt; の割り当てを解除します。リスト内のノードの数に関係なく、割り当て解除は一定の時間内に行われます。 &lt;code&gt;b.ptr&lt;/code&gt; は、対応する &lt;code&gt;AlignedBlockNode&lt;/code&gt; をすばやく見つけるために、 &lt;code&gt;alignment&lt;/code&gt; 最も近い倍数に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="e6ed360d4abba38f3529f274c0f497df84327d1f" translate="yes" xml:space="preserve">
          <source>Deallocates the given buffer &lt;code&gt;b&lt;/code&gt;, by atomically setting the corresponding bit to &lt;code&gt;0&lt;/code&gt;. &lt;code&gt;b&lt;/code&gt; must be valid, and cannot contain multiple adjacent &lt;code&gt;blocks&lt;/code&gt;.</source>
          <target state="translated">対応するビットをアトミックに &lt;code&gt;0&lt;/code&gt; に設定することにより、指定されたバッファー &lt;code&gt;b&lt;/code&gt; の割り当てを解除します。 &lt;code&gt;b&lt;/code&gt; は有効でなければならず、隣接する複数の &lt;code&gt;blocks&lt;/code&gt; 含めることはできません。</target>
        </trans-unit>
        <trans-unit id="6756d0c2656d83a2c4a40d0c6c294083d6454148" translate="yes" xml:space="preserve">
          <source>Deallocates the memory referenced by p. If p is null, no action occurs. If p references memory not originally allocated by this garbage collector, if p points to the interior of a memory block, or if this method is called from a finalizer, no action will be taken. The block will not be finalized regardless of whether the FINALIZE attribute is set. If finalization is desired, call &lt;a href=&quot;object#destroy&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt; prior to &lt;code&gt;GC.free&lt;/code&gt;.</source>
          <target state="translated">pによって参照されるメモリの割り当てを解除します。pがnullの場合、アクションは発生しません。pがこのガベージコレクターによって元々割り当てられていないメモリを参照する場合、pがメモリブロックの内部を指す場合、またはこのメソッドがファイナライザーから呼び出される場合、アクションは実行されません。FINALIZE属性が設定されているかどうかに関係なく、ブロックはファイナライズされません。ファイナライズを希望する場合は、呼び出しが&lt;a href=&quot;object#destroy&quot;&gt; &lt;code&gt;destroy&lt;/code&gt; &lt;/a&gt;前に &lt;code&gt;GC.free&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91420f5f3acdf53b1f959f067447b487323b2d18" translate="yes" xml:space="preserve">
          <source>Deallocation removes any read/write permissions from the target pages and notifies the OS to reclaim the physical memory, while keeping the virtual memory.</source>
          <target state="translated">Deallocation は、ターゲットページから読み書き権限を削除し、仮想メモリを保持したまま物理メモリを再利用するよう OS に通知します。</target>
        </trans-unit>
        <trans-unit id="978410b97d8a330550445ffa9ad9d811af65a9f4" translate="yes" xml:space="preserve">
          <source>Debug Condition</source>
          <target state="translated">デバッグ条件</target>
        </trans-unit>
        <trans-unit id="14a5529bad4b06400e8ae61ab912a7cd0d10cc37" translate="yes" xml:space="preserve">
          <source>Debug Specification</source>
          <target state="translated">デバッグ仕様</target>
        </trans-unit>
        <trans-unit id="06a1228bc1a2b90a6f69119da7257f1a1ab45207" translate="yes" xml:space="preserve">
          <source>Debug Statement</source>
          <target state="translated">デバッグステートメント</target>
        </trans-unit>
        <trans-unit id="e0c2c1850c4f5c7487bbcf707447288586061665" translate="yes" xml:space="preserve">
          <source>Debug identifiers and levels are set either by the command line switch &lt;code&gt;-debug&lt;/code&gt; or by a</source>
          <target state="translated">デバッグ識別子とレベルは、コマンドラインスイッチ &lt;code&gt;-debug&lt;/code&gt; または</target>
        </trans-unit>
        <trans-unit id="f2acd488deeb1960df8e4e199af113ed6c4248b5" translate="yes" xml:space="preserve">
          <source>Debug specifications only affect the module they appear in, they do not affect any imported modules. Debug identifiers are in their own namespace, independent from version identifiers and other symbols.</source>
          <target state="translated">デバッグ仕様は、それが表示されたモジュールにのみ影響を与え、インポートされたモジュールには影響を与えません。デバッグ識別子は、バージョン識別子や他のシンボルとは独立した独自の名前空間にあります。</target>
        </trans-unit>
        <trans-unit id="9e4e870be69d39ebaf5be79f4a5e8a28e4a8f09b" translate="yes" xml:space="preserve">
          <source>DebugSpecification</source>
          <target state="translated">DebugSpecification</target>
        </trans-unit>
        <trans-unit id="3d2007a7dd8aa1714c20fa92fcc1113b1137a313" translate="yes" xml:space="preserve">
          <source>DebugStatement</source>
          <target state="translated">DebugStatement</target>
        </trans-unit>
        <trans-unit id="54b7fa5fd17a033513aa4603fe16f3295eb20cde" translate="yes" xml:space="preserve">
          <source>DebugStatements</source>
          <target state="translated">DebugStatements</target>
        </trans-unit>
        <trans-unit id="4d93d7d3dbfcebf8261ee800b21d2d60de831b8a" translate="yes" xml:space="preserve">
          <source>DebugSymbol's happen for statements like: debug = identifier; debug = integer;</source>
          <target state="translated">DebugSymbol は、debug=identifier;debug=integer のようなステートメントで発生します。</target>
        </trans-unit>
        <trans-unit id="a30a20c0780e4f65a6fbda30a51368b3ea650aeb" translate="yes" xml:space="preserve">
          <source>Decide if attributes for this function can be inferred from examining the function body.</source>
          <target state="translated">この関数の属性が、関数本体の検査から推測できるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="e4c3a2d0cc24a4535ef91791064ffe989cbd382a" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>
        </trans-unit>
        <trans-unit id="9e7ef50b518db60d788f6a66f520f096a5520932" translate="yes" xml:space="preserve">
          <source>Decimal Literal Types</source>
          <target state="translated">10進リテラル型</target>
        </trans-unit>
        <trans-unit id="a474b82d29231d6f1ccbf54770e91331804b5e39" translate="yes" xml:space="preserve">
          <source>Decimal integers are a sequence of decimal digits.</source>
          <target state="translated">10進数の整数は、10進数の桁数列です。</target>
        </trans-unit>
        <trans-unit id="2de80026e02653cd40f376511faf80e503b57dad" translate="yes" xml:space="preserve">
          <source>Decimal_Number</source>
          <target state="translated">Decimal_Number</target>
        </trans-unit>
        <trans-unit id="902215ab9cce221464c82a811ffbf787aae569a5" translate="yes" xml:space="preserve">
          <source>Declaration &lt;code&gt;d&lt;/code&gt;</source>
          <target state="translated">宣言 &lt;code&gt;d&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a9836d7a1f0bfb09fb9f17d77609357ee100d20" translate="yes" xml:space="preserve">
          <source>Declaration Statement</source>
          <target state="translated">宣言文</target>
        </trans-unit>
        <trans-unit id="0d29683a9ffa0394ace63543e28e006b48029722" translate="yes" xml:space="preserve">
          <source>Declaration Syntax</source>
          <target state="translated">宣言構文</target>
        </trans-unit>
        <trans-unit id="6dbd41224edfbe68c7f2bb4f6490fc6955007a5d" translate="yes" xml:space="preserve">
          <source>Declaration of a symbol</source>
          <target state="translated">シンボルの宣言</target>
        </trans-unit>
        <trans-unit id="4df4d0d514f56b499f06d9d0b79927ecf23d6473" translate="yes" xml:space="preserve">
          <source>Declaration statements define variables, and declare types, templates, functions, imports, conditionals, static foreaches, and static asserts.</source>
          <target state="translated">宣言文は、変数を定義し、型、テンプレート、関数、インポート、条件式、静的フォアリーチ、および静的アサートを宣言します。</target>
        </trans-unit>
        <trans-unit id="f167d58fa1936ba9d8b8b66ebb917ff8a385b7fc" translate="yes" xml:space="preserve">
          <source>Declaration syntax generally reads right to left:</source>
          <target state="translated">宣言構文は一般的に右から左に読みます。</target>
        </trans-unit>
        <trans-unit id="f529c46c42bf47385843447380f9083ea85ad933" translate="yes" xml:space="preserve">
          <source>DeclarationBlock</source>
          <target state="translated">DeclarationBlock</target>
        </trans-unit>
        <trans-unit id="5bb823617a62be17e705b335fba5d4aec48eeccc" translate="yes" xml:space="preserve">
          <source>DeclarationExp &lt;code&gt;e&lt;/code&gt;</source>
          <target state="translated">DeclarationExp &lt;code&gt;e&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9b846963186dedc9a34aab11fab9a0a092e2d1b" translate="yes" xml:space="preserve">
          <source>Declarations</source>
          <target state="translated">Declarations</target>
        </trans-unit>
        <trans-unit id="b2d470601a3d4487d9aa450f5db0b4407b71ec6f" translate="yes" xml:space="preserve">
          <source>Declarations appear before the identifier being declared and read right to left, so:</source>
          <target state="translated">宣言は、宣言される識別子の前に現れ、右から左へと読み込まれます。</target>
        </trans-unit>
        <trans-unit id="792121f5e5959941aabdee1cc06fb17c681269dd" translate="yes" xml:space="preserve">
          <source>Declarations at module scope.</source>
          <target state="translated">モジュールスコープでの宣言。</target>
        </trans-unit>
        <trans-unit id="357cee9200ca080c7e1bb92afd3f56d835106b03" translate="yes" xml:space="preserve">
          <source>Declarations for interfacing with the ODBC library.</source>
          <target state="translated">ODBCライブラリとのインターフェイスのための宣言。</target>
        </trans-unit>
        <trans-unit id="6c8080422baab7c5dfd2ef7a7d95733d7d14dbd2" translate="yes" xml:space="preserve">
          <source>Declarations inside &lt;code&gt;BaseClass&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BaseClass&lt;/code&gt; 内の宣言。</target>
        </trans-unit>
        <trans-unit id="acbd57364da8ec4429f99f9abe1e2cf960f39c4c" translate="yes" xml:space="preserve">
          <source>Declarations inside &lt;code&gt;Foo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Foo&lt;/code&gt; 内の宣言。</target>
        </trans-unit>
        <trans-unit id="07073b60f0a5c321ba826fabc66323c4ccf44ef5" translate="yes" xml:space="preserve">
          <source>Declarations inside &lt;code&gt;bar&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bar&lt;/code&gt; 内の宣言。</target>
        </trans-unit>
        <trans-unit id="e39406434fba037956df51d317adc73db26ad763" translate="yes" xml:space="preserve">
          <source>Declarator</source>
          <target state="translated">Declarator</target>
        </trans-unit>
        <trans-unit id="4884a58f8854eaff9e14e4541fa2bfc15e139d8a" translate="yes" xml:space="preserve">
          <source>Declare The Schema Of A Virtual Table</source>
          <target state="translated">仮想テーブルのスキーマを宣言する</target>
        </trans-unit>
        <trans-unit id="789b27945c32aa3b3dc27c3088dc1d56ef533c8f" translate="yes" xml:space="preserve">
          <source>Declare one or more of the functions to be function templates even if they take no specific template arguments:</source>
          <target state="translated">特定のテンプレート引数を取らない場合でも、1 つ以上の関数を関数テンプレートと宣言します。</target>
        </trans-unit>
        <trans-unit id="d589e1ed3e4a83c9e3c689d35e6af4db16cf6a59" translate="yes" xml:space="preserve">
          <source>Declare parameters of template instance, initialize them with the template instance arguments.</source>
          <target state="translated">テンプレートインスタンスのパラメータを宣言し、テンプレートインスタンスの引数で初期化します。</target>
        </trans-unit>
        <trans-unit id="d8118e66aa0d9891f4571c1ab2494aaa3cdb7a6b" translate="yes" xml:space="preserve">
          <source>Declare result variable lazily.</source>
          <target state="translated">結果変数を怠惰に宣言します。</target>
        </trans-unit>
        <trans-unit id="8ce51b37a7f81f5172fdac6a58f02604f2a69530" translate="yes" xml:space="preserve">
          <source>Declare template parameter tp with value o, and install it in the scope sc.</source>
          <target state="translated">テンプレートパラメータtpを値oで宣言し、スコープscにインストールします。</target>
        </trans-unit>
        <trans-unit id="13a40c01b2509965e38c4e58bf4f7081ffd728d9" translate="yes" xml:space="preserve">
          <source>Declare the functions inside of a mixin template:</source>
          <target state="translated">ミキシンテンプレート内の関数を宣言します。</target>
        </trans-unit>
        <trans-unit id="a85107bcac12057ef2b3cbc11e112f58d45e3a1d" translate="yes" xml:space="preserve">
          <source>Declare the functions to be static members of a nested struct:</source>
          <target state="translated">関数は、入れ子になった構造体の静的メンバであることを宣言します。</target>
        </trans-unit>
        <trans-unit id="23776085f3b27f84d9591be0a7aa80866f3538fd" translate="yes" xml:space="preserve">
          <source>Declare your own linear congruential engine</source>
          <target state="translated">独自の線形整合エンジンを宣言する</target>
        </trans-unit>
        <trans-unit id="c657d4e9ebee4c198c968bcba7aff6eeab9209c1" translate="yes" xml:space="preserve">
          <source>Declared Datatype Of A Query Result</source>
          <target state="translated">クエリ結果の宣言されたデータ型</target>
        </trans-unit>
        <trans-unit id="71a17a71a9f79cc8bd76ac0e7f0f13c4f0c8db81" translate="yes" xml:space="preserve">
          <source>Declaring an External Class</source>
          <target state="translated">外部クラスの宣言</target>
        </trans-unit>
        <trans-unit id="6c0d8f96cd8b374527e48fbd5b4e9fb411f6bca8" translate="yes" xml:space="preserve">
          <source>Declaring an instance variable looks exactly the same as for a regular D class.</source>
          <target state="translated">インスタンス変数の宣言は、通常のDクラスと全く同じです。</target>
        </trans-unit>
        <trans-unit id="df50d3b937b66b95438db0baeefd22f2c1fa73b6" translate="yes" xml:space="preserve">
          <source>Decode</source>
          <target state="translated">Decode</target>
        </trans-unit>
        <trans-unit id="dbba0fda2419c5ddfc2c1e2e7bf06860f6436900" translate="yes" xml:space="preserve">
          <source>Decode Signed LEB128.</source>
          <target state="translated">LEB128をデコードしました。</target>
        </trans-unit>
        <trans-unit id="6d4fd06fda3c2f0f209bfb521e76e6c96911badb" translate="yes" xml:space="preserve">
          <source>Decode Unsigned LEB128.</source>
          <target state="translated">符号なしのLEB128をデコードします。</target>
        </trans-unit>
        <trans-unit id="1331e16b2aa86b673e67d5de5aa0667a06e438f1" translate="yes" xml:space="preserve">
          <source>Decode a UTF-16 sequence as a single UTF-32 code point.</source>
          <target state="translated">UTF-16 シーケンスを単一の UTF-32 コードポイントとしてデコードします。</target>
        </trans-unit>
        <trans-unit id="37b32b5db730690ed79c40536224b996ea9780ef" translate="yes" xml:space="preserve">
          <source>Decode a UTF-8 sequence as a single UTF-32 code point.</source>
          <target state="translated">UTF-8 シーケンスを単一の UTF-32 コードポイントとしてデコードします。</target>
        </trans-unit>
        <trans-unit id="dfd3524c8c563b09008218fac3d408952ffb4b11" translate="yes" xml:space="preserve">
          <source>Decode, and throw exception on error</source>
          <target state="translated">デコードして、エラー時に例外を投げる</target>
        </trans-unit>
        <trans-unit id="406bb62f3f33b8ee5964cf4ecafe3878f9b6291c" translate="yes" xml:space="preserve">
          <source>Decode, but ignore errors</source>
          <target state="translated">デコードはするが、エラーは無視する</target>
        </trans-unit>
        <trans-unit id="3821e20522daad9f57316f912fe1be7b26097318" translate="yes" xml:space="preserve">
          <source>DecodeException if decode fails</source>
          <target state="translated">デコードに失敗した場合のDecodeException</target>
        </trans-unit>
        <trans-unit id="46664e82aa4d152b87c49f64b8c12e4e9f3bfc63" translate="yes" xml:space="preserve">
          <source>DecodeException if mode == DecodeMode.STRICT and decode fails</source>
          <target state="translated">モード ==DecodeMode.STRICT でデコードに失敗した場合の DecodeException</target>
        </trans-unit>
        <trans-unit id="f001d418c3a6a2090bdc0efd4a74748a8652ac76" translate="yes" xml:space="preserve">
          <source>DecodeMode &lt;code&gt;mode&lt;/code&gt;</source>
          <target state="translated">DecodeMode &lt;code&gt;mode&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9f9cd86a51b3e2f8f8bb9ccc352699712738757" translate="yes" xml:space="preserve">
          <source>Decoder!Range &lt;strong id=&quot;decoder&quot;&gt;decoder&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">デコーダー！レンジ&lt;strong id=&quot;decoder&quot;&gt;デコーダー&lt;/strong&gt;（レンジ）（レンジレンジ）</target>
        </trans-unit>
        <trans-unit id="1b1bd0df056cc5b05a9c21efd16cacfb012e0aa6" translate="yes" xml:space="preserve">
          <source>Decodes a single code point from the end of a string.</source>
          <target state="translated">文字列の末尾から1つのコードポイントをデコードします。</target>
        </trans-unit>
        <trans-unit id="3d5e319e3deb54e40422a2ff80fdffd0d465c77c" translate="yes" xml:space="preserve">
          <source>Decodes a single code point.</source>
          <target state="translated">単一のコードポイントをデコードします。</target>
        </trans-unit>
        <trans-unit id="d605555fd554268d3f7092e4dfd739e804d6e4ff" translate="yes" xml:space="preserve">
          <source>Decodes a single code point. The input does not have to be valid.</source>
          <target state="translated">1つのコードポイントをデコードします。入力は有効である必要はありません。</target>
        </trans-unit>
        <trans-unit id="0f95dd9db2c1f3dc7f42ac75e283334b4487f4e0" translate="yes" xml:space="preserve">
          <source>Decodes a string by unescaping all predefined XML entities.</source>
          <target state="translated">定義済みのXMLエンティティをすべてアンエスケープして文字列をデコードします。</target>
        </trans-unit>
        <trans-unit id="394691f122913c450c1d979638fefc7f9b4936d9" translate="yes" xml:space="preserve">
          <source>Decodes and returns the code point starting at &lt;code&gt;str[index]&lt;/code&gt;. &lt;code&gt;index&lt;/code&gt; is advanced to one past the decoded code point. If the code point is not well-formed, then a &lt;code&gt;UTFException&lt;/code&gt; is thrown and &lt;code&gt;index&lt;/code&gt; remains unchanged.</source>
          <target state="translated">&lt;code&gt;str[index]&lt;/code&gt; から始まるコードポイントをデコードして返します。 &lt;code&gt;index&lt;/code&gt; は、デコードされたコードポイントを1つ超えて進みます。コードポイントが整形式でない場合、 &lt;code&gt;UTFException&lt;/code&gt; がスローされ、 &lt;code&gt;index&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="a966f90f685bee27fa037e2c88b5c7e4eaa16b77" translate="yes" xml:space="preserve">
          <source>Decodes source into a given &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;output range&lt;/a&gt;.</source>
          <target state="translated">ソースを指定された&lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;出力範囲に&lt;/a&gt;デコードします。</target>
        </trans-unit>
        <trans-unit id="49d1787ea4b9bb131d20e33432426cfac5ed8daf" translate="yes" xml:space="preserve">
          <source>Decodes source into newly-allocated buffer.</source>
          <target state="translated">ソースを新たに割り当てられたバッファにデコードします。</target>
        </trans-unit>
        <trans-unit id="dc99eaa6f996cb24aaa9f16d927e74ca329a6edf" translate="yes" xml:space="preserve">
          <source>Decodes source into the given buffer.</source>
          <target state="translated">ソースを指定されたバッファにデコードします。</target>
        </trans-unit>
        <trans-unit id="ac1d3d72ef820f018eec0cf37be48d3fc07063e8" translate="yes" xml:space="preserve">
          <source>Decodes the URI string encodedURI into a UTF-8 string and returns it. All escape sequences are decoded.</source>
          <target state="translated">URI文字列encodedURIをUTF-8文字列にデコードして返します。すべてのエスケープシーケンスがデコードされます。</target>
        </trans-unit>
        <trans-unit id="475eb1f0fc19db39961b576c47d3442f49745df2" translate="yes" xml:space="preserve">
          <source>Decodes the URI string encodedURI into a UTF-8 string and returns it. Escape sequences that resolve to reserved URI characters are not replaced. Escape sequences that resolve to the '#' character are not replaced.</source>
          <target state="translated">URI文字列encodedURIをUTF-8文字列にデコードして返します。予約されたURI文字に解決するエスケープシーケンスは置換されない。'#' 文字に解決するエスケープシーケンスは置換されません。</target>
        </trans-unit>
        <trans-unit id="73e4e91afe8b4f47795484e980cc395b572d9595" translate="yes" xml:space="preserve">
          <source>Decoding (&lt;a href=&quot;#decodeGrapheme&quot;&gt;&lt;code&gt;decodeGrapheme&lt;/code&gt;&lt;/a&gt;) and iteration (&lt;a href=&quot;#byGrapheme&quot;&gt;&lt;code&gt;byGrapheme&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#graphemeStride&quot;&gt;&lt;code&gt;graphemeStride&lt;/code&gt;&lt;/a&gt;) by user-perceived characters, that is by &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt; clusters.</source>
          <target state="translated">ユーザーが認識した文字、つまり&lt;a href=&quot;#Grapheme&quot;&gt; &lt;code&gt;Grapheme&lt;/code&gt; &lt;/a&gt;クラスターによるデコード（&lt;a href=&quot;#decodeGrapheme&quot;&gt; &lt;code&gt;decodeGrapheme&lt;/code&gt; &lt;/a&gt;）および反復（&lt;a href=&quot;#byGrapheme&quot;&gt; &lt;code&gt;byGrapheme&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#graphemeStride&quot;&gt; &lt;code&gt;graphemeStride&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c8daa89a5a99e8ec115a0662f2e1660217e62ec8" translate="yes" xml:space="preserve">
          <source>Decommit all physical memory associated with the buffer given as parameter, but keep the range of virtual addresses.</source>
          <target state="translated">パラメータとして与えられたバッファに関連付けられたすべての物理メモリをデコミットしますが、仮想アドレスの範囲は保持します。</target>
        </trans-unit>
        <trans-unit id="9b0a363a7d243d250d53b4cbfe3e066f33145e52" translate="yes" xml:space="preserve">
          <source>Decompose</source>
          <target state="translated">Decompose</target>
        </trans-unit>
        <trans-unit id="f696ff6edb97c27479dfeb370594310b979f4fdf" translate="yes" xml:space="preserve">
          <source>Decomposes a Hangul syllable. If &lt;code&gt;ch&lt;/code&gt; is not a composed syllable then this function returns &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt; containing only &lt;code&gt;ch&lt;/code&gt; as is.</source>
          <target state="translated">ハングル音節を分解します。 &lt;code&gt;ch&lt;/code&gt; が構成された音節ではない場合、この関数は &lt;code&gt;ch&lt;/code&gt; のみを含む&lt;a href=&quot;#Grapheme&quot;&gt; &lt;code&gt;Grapheme&lt;/code&gt; &lt;/a&gt;をそのまま返します。</target>
        </trans-unit>
        <trans-unit id="8e7b400681f356e884cec054477da6ae1fd30add" translate="yes" xml:space="preserve">
          <source>Decomposing and composing of individual character(s) according to canonical or compatibility rules, see &lt;a href=&quot;#compose&quot;&gt;&lt;code&gt;compose&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decompose&quot;&gt;&lt;code&gt;decompose&lt;/code&gt;&lt;/a&gt;, including the specific version for Hangul syllables &lt;a href=&quot;#composeJamo&quot;&gt;&lt;code&gt;composeJamo&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decomposeHangul&quot;&gt;&lt;code&gt;decomposeHangul&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">正規規則または互換性規則に従って個々の文字を分解および合成する方法については、ハングル音節&lt;a href=&quot;#composeJamo&quot;&gt; &lt;code&gt;composeJamo&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#decomposeHangul&quot;&gt; &lt;code&gt;decomposeHangul&lt;/code&gt; の&lt;/a&gt;特定のバージョンを含む&lt;a href=&quot;#compose&quot;&gt; &lt;code&gt;compose&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#decompose&quot;&gt; &lt;code&gt;decompose&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="64557b59c3e3b422b56194c79018a7a402df5f75" translate="yes" xml:space="preserve">
          <source>Decompress and return any remaining data. The returned data should be appended to that returned by uncompress(). The UnCompress object cannot be used further.</source>
          <target state="translated">解凍して、残っているデータを返します。返されたデータは、uncompress()によって返されたデータに追加されなければなりません。UnCompress オブジェクトは、それ以上は使用できません。</target>
        </trans-unit>
        <trans-unit id="f015adc95346148c234f8fb705aeca257d640460" translate="yes" xml:space="preserve">
          <source>Decompress the contents of a member.</source>
          <target state="translated">メンバの内容を展開します。</target>
        </trans-unit>
        <trans-unit id="758d2baadff9e7263131434184a3f463f60af9a5" translate="yes" xml:space="preserve">
          <source>Decompress the contents of archive member de and return the expanded data.</source>
          <target state="translated">アーカイブメンバーdeの内容を展開し、展開したデータを返す。</target>
        </trans-unit>
        <trans-unit id="331e56cb06cb518e2402ea3951b07bb690da1ffd" translate="yes" xml:space="preserve">
          <source>Decompress the data in buf and return the decompressed data. The buffers returned from successive calls to this should be concatenated together.</source>
          <target state="translated">buf内のデータを展開し、展開したデータを返します。これに対する連続した呼び出しから返されたバッファは連結されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="9ea10b070e9d7365e1dfb76f204e09a139b7b4bf" translate="yes" xml:space="preserve">
          <source>Decompresses the data in srcbuf[].</source>
          <target state="translated">srcbuf[]のデータを展開します.</target>
        </trans-unit>
        <trans-unit id="3e9abbc6f4724b8e785725d912f2aaa59750275e" translate="yes" xml:space="preserve">
          <source>Decreases the reference count of the concrete class that implements this interface. When the reference count is &lt;code&gt;0&lt;/code&gt;, the object self-destructs.</source>
          <target state="translated">このインターフェイスを実装する具象クラスの参照カウントを減らします。参照カウントが &lt;code&gt;0&lt;/code&gt; の場合、オブジェクトは自己破壊します。</target>
        </trans-unit>
        <trans-unit id="02c806f941459077b10b340cd9632e9a0cb538f5" translate="yes" xml:space="preserve">
          <source>Decrements the internal lock count by one. If this brings the count to zero, the lock is released.</source>
          <target state="translated">内部ロックのカウントを 1 つ減少させます。これによりカウントがゼロになると、ロックは解除されます。</target>
        </trans-unit>
        <trans-unit id="ef0d38f738fb21cfe095e1269d745948ad990bfd" translate="yes" xml:space="preserve">
          <source>Deduction from a specialization can provide values for more than one parameter:</source>
          <target state="translated">専門化からの控除は、複数のパラメータに値を提供することができます。</target>
        </trans-unit>
        <trans-unit id="e9d287d865171614d8dedf150d2d0836f7b7edd5" translate="yes" xml:space="preserve">
          <source>Deep interface inheritance causes compile error with messages like &quot;Error: function std.typecons.AutoImplement!(Foo).AutoImplement.bar does not override any function&quot;. [&lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=2525&quot;&gt;Bugzilla 2525&lt;/a&gt;]</source>
          <target state="translated">インターフェイスの継承が深いと、「エラー：関数std.typecons.AutoImplement！（Foo）.AutoImplement.barは関数をオーバーライドしません」などのメッセージが表示され、コンパイルエラーが発生します。[ &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=2525&quot;&gt;Bugzilla 2525&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="c748de0e8bf8554aeb51f7845528d2e387d7b157" translate="yes" xml:space="preserve">
          <source>Default Initialization</source>
          <target state="translated">デフォルトの初期化</target>
        </trans-unit>
        <trans-unit id="371d87a5f41a115cc6ae98f15bc16de04539f72f" translate="yes" xml:space="preserve">
          <source>Default Initialization of Structs</source>
          <target state="translated">構造体のデフォルト初期化</target>
        </trans-unit>
        <trans-unit id="420b1de5ee5bd01f3bccad5941846b453e834c77" translate="yes" xml:space="preserve">
          <source>Default Initialization of Unions</source>
          <target state="translated">ユニオンのデフォルト初期化</target>
        </trans-unit>
        <trans-unit id="50c0422b1bd3c0cb85a3b10f878811736afd4f6f" translate="yes" xml:space="preserve">
          <source>Default Random Engines</source>
          <target state="translated">デフォルトのランダムエンジン</target>
        </trans-unit>
        <trans-unit id="4f3b4cf1b282f5e24851d2fc312835e2ee1126a7" translate="yes" xml:space="preserve">
          <source>Default constructor that initializes a &lt;code&gt;TaskPool&lt;/code&gt; with &lt;code&gt;totalCPUs&lt;/code&gt; - 1 worker threads. The minus 1 is included because the main thread will also be available to do work.</source>
          <target state="translated">初期化デフォルトコンストラクタ &lt;code&gt;TaskPool&lt;/code&gt; に含まと &lt;code&gt;totalCPUs&lt;/code&gt; を - 1つのワーカースレッド。メインスレッドも作業できるようになるため、マイナス1が含まれています。</target>
        </trans-unit>
        <trans-unit id="27d8f5b12b08679fa1ceeb7aa68b26b65ef2045f" translate="yes" xml:space="preserve">
          <source>Default formatting (same as &quot;d&quot;)</source>
          <target state="translated">デフォルトの書式設定(&quot;d &quot;と同じ</target>
        </trans-unit>
        <trans-unit id="e96836a37f607443c594efaed093035c05afe38b" translate="yes" xml:space="preserve">
          <source>Default highlighting of all the members of a class, struct, etc.</source>
          <target state="translated">クラスや構造体などのすべてのメンバのデフォルトのハイライト表示。</target>
        </trans-unit>
        <trans-unit id="98f9ae2cc7e4e80454521f2ab1730089e9d6baa9" translate="yes" xml:space="preserve">
          <source>Default namespace from RFC 4122</source>
          <target state="translated">RFC 4122 のデフォルトの名前空間</target>
        </trans-unit>
        <trans-unit id="2c5cd1f0d1dcc8e95ce7f83f2ec37a797706dca3" translate="yes" xml:space="preserve">
          <source>Default parameters are resolved and semantically checked in the context of the function declaration.</source>
          <target state="translated">デフォルトのパラメータは、関数宣言のコンテキストで解決され、意味的にチェックされます。</target>
        </trans-unit>
        <trans-unit id="dc75ea9274f6222114e96e9234906962c3ab1c51" translate="yes" xml:space="preserve">
          <source>Default system linkage for the target.</source>
          <target state="translated">ターゲットのデフォルトのシステム連携。</target>
        </trans-unit>
        <trans-unit id="a76b4f3915cc1ec7629202bfab49b91d3e8811c7" translate="yes" xml:space="preserve">
          <source>Default value to use for architecture. Should be &quot;32&quot; or &quot;64&quot;</source>
          <target state="translated">アーキテクチャに使用するデフォルト値。32&quot; または &quot;64&quot; である必要があります。</target>
        </trans-unit>
        <trans-unit id="0471388472434480b398dbbb1b529f53c8403a1a" translate="yes" xml:space="preserve">
          <source>DefaultStatement &lt;strong id=&quot;sdefault&quot;&gt;sdefault&lt;/strong&gt;;</source>
          <target state="translated">DefaultStatement &lt;strong id=&quot;sdefault&quot;&gt;sdefault&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="bc406dd5812a1993fbe6a79d3cd9b04e74387b96" translate="yes" xml:space="preserve">
          <source>Default_Ignorable_Code_Point</source>
          <target state="translated">Default_Ignorable_Code_Point</target>
        </trans-unit>
        <trans-unit id="f04a631e5fb8580ab675839a96ca7cd9782ddc95" translate="yes" xml:space="preserve">
          <source>Defaults to &quot;&quot; but can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &quot;&quot;ですが、 &lt;code&gt;getopt&lt;/code&gt; を呼び出す前に割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="df1395a4ccfcda2ee16159ff05ed2cc4232a297b" translate="yes" xml:space="preserve">
          <source>Defaults to &quot;--&quot; but can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;. Assigning an empty string to &lt;code&gt;endOfOptions&lt;/code&gt; effectively disables it.</source>
          <target state="translated">デフォルトは「-」ですが、 &lt;code&gt;getopt&lt;/code&gt; を呼び出す前にに割り当てることができます。空の文字列を &lt;code&gt;endOfOptions&lt;/code&gt; に割り当てると、事実上無効になります。</target>
        </trans-unit>
        <trans-unit id="8aa51945574822bec5dcd1c3efc97549eb710c3f" translate="yes" xml:space="preserve">
          <source>Defaults to '-' but it can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;.</source>
          <target state="translated">デフォルトは「-」ですが、 &lt;code&gt;getopt&lt;/code&gt; を呼び出す前に割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="9de2851fac6dd53ccefeb661bb98002fd0c199f4" translate="yes" xml:space="preserve">
          <source>Defaults to '=' but can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;.</source>
          <target state="translated">デフォルトは '='ですが、 &lt;code&gt;getopt&lt;/code&gt; を呼び出す前にに割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="8503b1ebf1456be871732701f4598afac98d9a38" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;Yes.preserveAttributes&lt;/code&gt; on Windows, and the opposite on all other platforms.</source>
          <target state="translated">Windowsではデフォルトで &lt;code&gt;Yes.preserveAttributes&lt;/code&gt; になり、他のすべてのプラットフォームでは逆になります。</target>
        </trans-unit>
        <trans-unit id="fd21e76d6af8f49e1eb6914fb6c49390fd8bd8c1" translate="yes" xml:space="preserve">
          <source>Define &lt;code&gt;XorshiftEngine&lt;/code&gt; generators with well-chosen parameters. See each bits examples of &quot;Xorshift RNGs&quot;. &lt;code&gt;Xorshift&lt;/code&gt; is a Xorshift128's alias because 128bits implementation is mostly used.</source>
          <target state="translated">適切に選択されたパラメータを使用して &lt;code&gt;XorshiftEngine&lt;/code&gt; ジェネレータを定義します。「Xorshift RNG」の各ビットの例を参照してください。 &lt;code&gt;Xorshift&lt;/code&gt; は、128ビットの実装が主に使用されるため、Xorshift128のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="81847ec7dd3ceb5453d0ee6884a6280e90c956b1" translate="yes" xml:space="preserve">
          <source>Define LinearCongruentialEngine generators with well-chosen parameters. &lt;code&gt;MinstdRand0&lt;/code&gt; implements Park and Miller's &quot;minimal standard&quot; &lt;a href=&quot;http://wikipedia.org/wiki/Park%E2%80%93Miller_random_number_generator&quot;&gt;generator&lt;/a&gt; that uses 16807 for the multiplier. &lt;code&gt;MinstdRand&lt;/code&gt; implements a variant that has slightly better spectral behavior by using the multiplier 48271. Both generators are rather simplistic.</source>
          <target state="translated">適切に選択されたパラメータを使用して、LinearCongruentialEngineジェネレータを定義します。 &lt;code&gt;MinstdRand0&lt;/code&gt; は、乗数に16807を使用するParkおよびMillerの「最小標準」&lt;a href=&quot;http://wikipedia.org/wiki/Park%E2%80%93Miller_random_number_generator&quot;&gt;ジェネレータ&lt;/a&gt;を実装しています。 &lt;code&gt;MinstdRand&lt;/code&gt; は、乗算器48271を使用することにより、スペクトル動作がわずかに改善されたバリアントを実装します。どちらのジェネレータもかなり単純化されています。</target>
        </trans-unit>
        <trans-unit id="073997141f7a62781b86828c7a9a7d7df73f9d16" translate="yes" xml:space="preserve">
          <source>Define LinearCongruentialEngine generators with well-chosen parameters. &lt;code&gt;MinstdRand0&lt;/code&gt; implements Park and Miller's &quot;minimal standard&quot; &lt;a href=&quot;https://wikipedia.org/wiki/Park%E2%80%93Miller_random_number_generator&quot;&gt;generator&lt;/a&gt; that uses 16807 for the multiplier. &lt;code&gt;MinstdRand&lt;/code&gt; implements a variant that has slightly better spectral behavior by using the multiplier 48271. Both generators are rather simplistic.</source>
          <target state="translated">適切に選択されたパラメーターを使用してLinearCongruentialEngineジェネレーターを定義します。 &lt;code&gt;MinstdRand0&lt;/code&gt; は、乗数に16807を使用するPark andMillerの「最小標準」&lt;a href=&quot;https://wikipedia.org/wiki/Park%E2%80%93Miller_random_number_generator&quot;&gt;ジェネレーター&lt;/a&gt;を実装します。 &lt;code&gt;MinstdRand&lt;/code&gt; は、乗数48271を使用することにより、スペクトル動作がわずかに優れたバリアントを実装します。どちらのジェネレーターもかなり単純化されています。</target>
        </trans-unit>
        <trans-unit id="2a32a694b454b48f0c6093b3ea95bcc7ae1e63ab" translate="yes" xml:space="preserve">
          <source>Define New Collating Sequences</source>
          <target state="translated">新しい照合シーケンスの定義</target>
        </trans-unit>
        <trans-unit id="39097f9cdbdc9c13d9f7924e620c0870a6ab1f2d" translate="yes" xml:space="preserve">
          <source>Define base class for synchronization exceptions.</source>
          <target state="translated">同期例外の基底クラスを定義します。</target>
        </trans-unit>
        <trans-unit id="1fe6ef7e4374fbc92435a3eb3a1da3f110264323" translate="yes" xml:space="preserve">
          <source>Define when building the standard library</source>
          <target state="translated">標準ライブラリ構築時の定義</target>
        </trans-unit>
        <trans-unit id="3531e23462282b88161b0b09c4198f983f8f5d9c" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;Allocator.deallocate&lt;/code&gt; and &lt;code&gt;Allocator.owns&lt;/code&gt; are defined.</source>
          <target state="translated">&lt;code&gt;Allocator.deallocate&lt;/code&gt; および &lt;code&gt;Allocator.owns&lt;/code&gt; が定義されている場合に定義されます。</target>
        </trans-unit>
        <trans-unit id="a3e2600e60e43fcc7af73e79b544e721703b0e8b" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; exists and forwards to &lt;code&gt;parent.deallocate(b.ptr[0 .. goodAllocSize(b.length)])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; が存在する場合に定義され、parent.deallocate &lt;code&gt;parent.deallocate(b.ptr[0 .. goodAllocSize(b.length)])&lt;/code&gt; 転送します。</target>
        </trans-unit>
        <trans-unit id="d5839c46fd4f57e4f4534cc94d889acf7302900a" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; exists, and returns to it all memory held in the free tree.</source>
          <target state="translated">&lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; が存在する場合に定義され、フリーツリーに保持されているすべてのメモリをそこに返します。</target>
        </trans-unit>
        <trans-unit id="ae7fc2022dee75f14540e1bb6b89db20bb6af50b" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator.deallocateAll&lt;/code&gt; exists, and forwards to it. Also nullifies the free tree (it's assumed the parent frees all memory stil managed by the free tree).</source>
          <target state="translated">&lt;code&gt;ParentAllocator.deallocateAll&lt;/code&gt; が存在する場合に定義され、それに転送します。また、フリーツリーを無効にします（親はフリーツリーによって管理されているすべてのメモリを解放すると見なされます）。</target>
        </trans-unit>
        <trans-unit id="924b574b2f51f1f91bae0a753d7a3cd5e721d17d" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator&lt;/code&gt; defines it. Checks whether the block belongs to this allocator.</source>
          <target state="translated">&lt;code&gt;ParentAllocator&lt;/code&gt; が定義する場合に定義されます。ブロックがこのアロケータに属しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="22d483263bd2221c01661d83bf480b3a1978600e" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;perCallFlags&lt;/code&gt; is nonzero.</source>
          <target state="translated">&lt;code&gt;perCallFlags&lt;/code&gt; がゼロ以外の場合に定義されます。</target>
        </trans-unit>
        <trans-unit id="80fb3bfe81400b11248d1a55abb8916e94447707" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;perCallFlags&lt;/code&gt; is nonzero. Iterates all monitored file/line instances. The order of iteration is not meaningful (items are inserted at the front of a list upon the first call), so preprocessing the statistics after collection might be appropriate.</source>
          <target state="translated">&lt;code&gt;perCallFlags&lt;/code&gt; がゼロ以外の場合に定義されます。監視対象のすべてのファイル/行インスタンスを反復します。反復の順序は意味がないため（項目は最初の呼び出し時にリストの先頭に挿入されます）、収集後に統計を前処理することが適切な場合があります。</target>
        </trans-unit>
        <trans-unit id="af0b04d11e256e5ba5a86b4d6ccc479ac3bb0733" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;perCallFlags&lt;/code&gt; is nonzero. Outputs (e.g. to a &lt;code&gt;File&lt;/code&gt;) a simple report of the collected per-call statistics.</source>
          <target state="translated">&lt;code&gt;perCallFlags&lt;/code&gt; がゼロ以外の場合に定義されます。収集されたコールごとの統計の簡単なレポートを（ &lt;code&gt;File&lt;/code&gt; ）出力します。</target>
        </trans-unit>
        <trans-unit id="0e6aad149de6e35db7818ba9e061e221c789d78e" translate="yes" xml:space="preserve">
          <source>Defined in RFC 4122 document</source>
          <target state="translated">RFC 4122 ドキュメントで定義されています。</target>
        </trans-unit>
        <trans-unit id="74bb7ab73b6be283bed5a27e4f9da6abe208f8a4" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.deallocateAll&lt;/code&gt; is defined. Affects per instance and per call &lt;code&gt;numDeallocateAll&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Allocator.deallocateAll&lt;/code&gt; が定義されている場合にのみ定義されます。インスタンスごとおよび呼び出し &lt;code&gt;numDeallocateAll&lt;/code&gt; 影響します。</target>
        </trans-unit>
        <trans-unit id="880dd85210629b3db5a46cc41b73cc297fc347f0" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.expand&lt;/code&gt; is defined. Finds the owner of &lt;code&gt;b&lt;/code&gt; and calls &lt;code&gt;expand&lt;/code&gt; for it. The owner is not brought to the head of the list.</source>
          <target state="translated">&lt;code&gt;Allocator.expand&lt;/code&gt; が定義されている場合にのみ定義されます。 &lt;code&gt;b&lt;/code&gt; の所有者を見つけて、そのために &lt;code&gt;expand&lt;/code&gt; を呼び出します。所有者はリストの先頭に表示されません。</target>
        </trans-unit>
        <trans-unit id="744c61edf3dc2f8cca313264c4f118c38c0b2a22" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.owns&lt;/code&gt; and &lt;code&gt;Allocator.deallocateAll&lt;/code&gt; are defined.</source>
          <target state="translated">&lt;code&gt;Allocator.owns&lt;/code&gt; および &lt;code&gt;Allocator.deallocateAll&lt;/code&gt; が定義されている場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="1fdfa394d06528a596ae4874c40d528d999bfd2b" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.reallocate&lt;/code&gt; is defined. Finds the owner of &lt;code&gt;b&lt;/code&gt; and calls &lt;code&gt;reallocate&lt;/code&gt; for it. If that fails, calls the global &lt;code&gt;reallocate&lt;/code&gt;, which allocates a new block and moves memory.</source>
          <target state="translated">&lt;code&gt;Allocator.reallocate&lt;/code&gt; が定義されている場合にのみ定義されます。 &lt;code&gt;b&lt;/code&gt; の所有者を見つけて、それに対して &lt;code&gt;reallocate&lt;/code&gt; を呼び出します。それが失敗した場合は、新しいブロックを割り当ててメモリを移動するグローバル &lt;code&gt;reallocate&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="ed697f6a88a630666af1c722afd39b1d0f4f4f19" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator&lt;/code&gt; defines &lt;code&gt;owns&lt;/code&gt;. Finds the owner of &lt;code&gt;b&lt;/code&gt; and forwards the call to it.</source>
          <target state="translated">&lt;code&gt;Allocator&lt;/code&gt; が &lt;code&gt;owns&lt;/code&gt; 定義する場合にのみ定義されます。 &lt;code&gt;b&lt;/code&gt; の所有者を見つけて、それにコールを転送します。</target>
        </trans-unit>
        <trans-unit id="a0e6bc044e12c4e9611bf3580583040fda29e9b8" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator&lt;/code&gt; defines &lt;code&gt;owns&lt;/code&gt;. Tries each allocator in turn, in most-recently-used order. If the owner is found, it is moved to the front of the list as a side effect under the assumption it will be used soon.</source>
          <target state="translated">&lt;code&gt;Allocator&lt;/code&gt; が定義する場合にのみ定義されます &lt;code&gt;owns&lt;/code&gt; をするます。最も最近使用された順序で、各アロケーターを順番に試行します。所有者が見つかると、すぐに使用されることを想定して、副作用としてリストの先頭に移動します。</target>
        </trans-unit>
        <trans-unit id="2e24b737d8be4f0fce227702cdf2d4971d9bd548" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Options.bytesUsed&lt;/code&gt; is defined. Returns &lt;code&gt;bytesUsed == 0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Options.bytesUsed&lt;/code&gt; が定義されている場合にのみ定義されます。戻り値 &lt;code&gt;bytesUsed == 0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e866186e044949f060cc13ede78f11571f00e878" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;ParentAllocator.alignedAllocate&lt;/code&gt; exists. Expansion occurs in place under the conditions required by &lt;code&gt;expand&lt;/code&gt;. Shrinking occurs in place if &lt;code&gt;goodAllocSize(b.length) == goodAllocSize(s)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ParentAllocator.alignedAllocate&lt;/code&gt; が存在する場合にのみ定義されます。展開は、 &lt;code&gt;expand&lt;/code&gt; で必要な条件の下で行われます。収縮は適所で起こります &lt;code&gt;goodAllocSize(b.length) == goodAllocSize(s)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="9de3285d7d12656c0f50a8bc0845b0e3663f1845" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;ParentAllocator&lt;/code&gt; defines &lt;code&gt;deallocateAll&lt;/code&gt;. If so, forwards to it and resets the freelist.</source>
          <target state="translated">&lt;code&gt;ParentAllocator&lt;/code&gt; が定義する場合にのみ定義されます &lt;code&gt;deallocateAll&lt;/code&gt; 。もしそうなら、それに転送し、フリーリストをリセットします。</target>
        </trans-unit>
        <trans-unit id="bb02e98056476e0ccf512cbbc349777443611e1f" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;parent.alignedAllocate&lt;/code&gt; exists and works similarly to &lt;code&gt;allocate&lt;/code&gt; by forwarding to &lt;code&gt;parent.alignedAllocate(goodAllocSize(n), a)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parent.alignedAllocate&lt;/code&gt; が存在する場合にのみ定義され、 &lt;code&gt;parent.alignedAllocate(goodAllocSize(n), a)&lt;/code&gt; 転送することで &lt;code&gt;allocate&lt;/code&gt; と同様に機能します。ます。</target>
        </trans-unit>
        <trans-unit id="3bdcfae19e6266cb37491298481490d18641857e" translate="yes" xml:space="preserve">
          <source>Defined when building the standard runtime</source>
          <target state="translated">標準ランタイムの構築時に定義される</target>
        </trans-unit>
        <trans-unit id="8603ace2093f41a5875c31508c40434bf1934d95" translate="yes" xml:space="preserve">
          <source>Defined whether or not &lt;code&gt;Allocator.deallocate&lt;/code&gt; is defined. Affects per instance: &lt;code&gt;numDeallocate&lt;/code&gt;, &lt;code&gt;bytesUsed&lt;/code&gt;, and &lt;code&gt;bytesSlack&lt;/code&gt;. Affects per call: &lt;code&gt;numDeallocate&lt;/code&gt; and &lt;code&gt;bytesContracted&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Allocator.deallocate&lt;/code&gt; が定義されているかどうかを定義します。インスタンスごとの影響： &lt;code&gt;numDeallocate&lt;/code&gt; 、 &lt;code&gt;bytesUsed&lt;/code&gt; 、および &lt;code&gt;bytesSlack&lt;/code&gt; 。呼び出しごとの影響： &lt;code&gt;numDeallocate&lt;/code&gt; および &lt;code&gt;bytesContracted&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a10dcb53bbdef9f4f52f70eb8281de857ea0c04d" translate="yes" xml:space="preserve">
          <source>Defined whether or not &lt;code&gt;Allocator.expand&lt;/code&gt; is defined. Affects per instance: &lt;code&gt;numExpand&lt;/code&gt;, &lt;code&gt;numExpandOK&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, &lt;code&gt;bytesSlack&lt;/code&gt;, &lt;code&gt;bytesAllocated&lt;/code&gt;, and &lt;code&gt;bytesUsed&lt;/code&gt;. Affects per call: &lt;code&gt;numExpand&lt;/code&gt;, &lt;code&gt;numExpandOK&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, and &lt;code&gt;bytesAllocated&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Allocator.expand&lt;/code&gt; が定義されているかどうかを定義します。インスタンスごとの影響： &lt;code&gt;numExpand&lt;/code&gt; 、 &lt;code&gt;numExpandOK&lt;/code&gt; 、 &lt;code&gt;bytesExpanded&lt;/code&gt; 、 &lt;code&gt;bytesSlack&lt;/code&gt; 、 &lt;code&gt;bytesAllocated&lt;/code&gt; 、および &lt;code&gt;bytesUsed&lt;/code&gt; 。呼び出しごとの影響： &lt;code&gt;numExpand&lt;/code&gt; 、 &lt;code&gt;numExpandOK&lt;/code&gt; 、 &lt;code&gt;bytesExpanded&lt;/code&gt; 、および &lt;code&gt;bytesAllocated&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b422af85c74e4035f60d8efe5ab2781d63622be3" translate="yes" xml:space="preserve">
          <source>Defined whether or not &lt;code&gt;Allocator.reallocate&lt;/code&gt; is defined. Affects per instance: &lt;code&gt;numReallocate&lt;/code&gt;, &lt;code&gt;numReallocateOK&lt;/code&gt;, &lt;code&gt; numReallocateInPlace&lt;/code&gt;, &lt;code&gt;bytesNotMoved&lt;/code&gt;, &lt;code&gt;bytesAllocated&lt;/code&gt;, &lt;code&gt; bytesSlack&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, and &lt;code&gt;bytesContracted&lt;/code&gt;. Affects per call: &lt;code&gt;numReallocate&lt;/code&gt;, &lt;code&gt;numReallocateOK&lt;/code&gt;, &lt;code&gt;numReallocateInPlace&lt;/code&gt;, &lt;code&gt;bytesNotMoved&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, &lt;code&gt;bytesContracted&lt;/code&gt;, and &lt;code&gt;bytesMoved&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Allocator.reallocate&lt;/code&gt; が定義されているかどうかを定義します。インスタンスごとの影響： &lt;code&gt;numReallocate&lt;/code&gt; 、 &lt;code&gt;numReallocateOK&lt;/code&gt; 、 &lt;code&gt; numReallocateInPlace&lt;/code&gt; 、 &lt;code&gt;bytesNotMoved&lt;/code&gt; 、 &lt;code&gt;bytesAllocated&lt;/code&gt; 、 &lt;code&gt; bytesSlack&lt;/code&gt; 、 &lt;code&gt;bytesExpanded&lt;/code&gt; 、および &lt;code&gt;bytesContracted&lt;/code&gt; 。呼び出しごとの影響： &lt;code&gt;numReallocate&lt;/code&gt; 、 &lt;code&gt;numReallocateOK&lt;/code&gt; 、 &lt;code&gt;numReallocateInPlace&lt;/code&gt; 、 &lt;code&gt;bytesNotMoved&lt;/code&gt; 、 &lt;code&gt;bytesExpanded&lt;/code&gt; 、 &lt;code&gt;bytesContracted&lt;/code&gt; 、 &lt;code&gt;bytesMoved&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e01f0090ee0730f66f1a15b18bea750a3d6fc2b4" translate="yes" xml:space="preserve">
          <source>Defines a Latin2-encoded character.</source>
          <target state="translated">Latin2 エンコードされた文字を定義します。</target>
        </trans-unit>
        <trans-unit id="5e53ecfaa755cb1d4f19e088a8c9f00a6dbfc490" translate="yes" xml:space="preserve">
          <source>Defines a Windows1250-encoded character.</source>
          <target state="translated">Windows1250 エンコードされた文字を定義します。</target>
        </trans-unit>
        <trans-unit id="9f1903090723311586df4cd37fbdf5f26e67079a" translate="yes" xml:space="preserve">
          <source>Defines a Windows1251-encoded character.</source>
          <target state="translated">Windows1251 エンコードされた文字を定義します。</target>
        </trans-unit>
        <trans-unit id="cccb5b7d80539ad53bf55ca34e9f94b1953e89a5" translate="yes" xml:space="preserve">
          <source>Defines a Windows1252-encoded character.</source>
          <target state="translated">Windows1252 エンコードされた文字を定義します。</target>
        </trans-unit>
        <trans-unit id="56254a36f29bce74ac63e1c814d120ccbdcc4a03" translate="yes" xml:space="preserve">
          <source>Defines a reference-counted object containing a &lt;code&gt;T&lt;/code&gt; value as payload.</source>
          <target state="translated">を含む参照カウントオブジェクトを定義します &lt;code&gt;T&lt;/code&gt; 値をペイロードとして。</target>
        </trans-unit>
        <trans-unit id="ba5e2fe31df68893adfb9e39176c913b0ab90b13" translate="yes" xml:space="preserve">
          <source>Defines a simple, self-documenting yes/no flag. This makes it easy for APIs to define functions accepting flags without resorting to &lt;code&gt;bool&lt;/code&gt;, which is opaque in calls, and without needing to define an enumerated type separately. Using &lt;code&gt;Flag!&quot;Name&quot;&lt;/code&gt; instead of &lt;code&gt;bool&lt;/code&gt; makes the flag's meaning visible in calls. Each yes/no flag has its own type, which makes confusions and mix-ups impossible.</source>
          <target state="translated">単純な自己文書化のyes / noフラグを定義します。これにより、呼び出しで不透明な &lt;code&gt;bool&lt;/code&gt; に頼ることなく、列挙型を個別に定義する必要なく、フラグを受け入れる関数をAPIが簡単に定義できるようになります。使用 &lt;code&gt;Flag!&quot;Name&quot;&lt;/code&gt; の代わりに、 &lt;code&gt;bool&lt;/code&gt; のすると、呼び出しでフラグの意味が表示されます。yes / noフラグにはそれぞれ独自のタイプがあり、混乱や取り違えはありません。</target>
        </trans-unit>
        <trans-unit id="d037c0e93cb77eea8d259e298e9c276dd536788f" translate="yes" xml:space="preserve">
          <source>Defines a total order on all floating-point numbers.</source>
          <target state="translated">すべての浮動小数点数の合計順序を定義します。</target>
        </trans-unit>
        <trans-unit id="1b2fe2f27a3c2be6c4b5a0300512ceb77431cca8" translate="yes" xml:space="preserve">
          <source>Defines a value paired with a distinctive &quot;null&quot; state that denotes the absence of a value. If default constructed, a &lt;code&gt;Nullable!T&lt;/code&gt; object starts in the null state. Assigning it renders it non-null. Calling &lt;code&gt;nullify&lt;/code&gt; can nullify it again.</source>
          <target state="translated">値がないことを示す特徴的な「null」状態とペアになっている値を定義します。デフォルトで作成された場合、 &lt;code&gt;Nullable!T&lt;/code&gt; オブジェクトはnull状態で始まります。割り当てると、null以外になります。呼び出す &lt;code&gt;nullify&lt;/code&gt; をと、再度無効化できます。</target>
        </trans-unit>
        <trans-unit id="3f49f1773a53446e251ede71ac0716adcb46d913" translate="yes" xml:space="preserve">
          <source>Defines an Latin1-encoded character.</source>
          <target state="translated">Latin1 エンコードされた文字を定義します。</target>
        </trans-unit>
        <trans-unit id="e57a29ea6d093696ef6c6f7d8afb730e34136a6d" translate="yes" xml:space="preserve">
          <source>Defines an Latin1-encoded string (as an array of &lt;code&gt;immutable(Latin1Char)&lt;/code&gt;).</source>
          <target state="translated">Latin1でエンコードされた文字列を（の配列として定義します &lt;code&gt;immutable(Latin1Char)&lt;/code&gt; のます。</target>
        </trans-unit>
        <trans-unit id="011886a5161af4c4e37e5385fd27679cc8b830bd" translate="yes" xml:space="preserve">
          <source>Defines an Latin2-encoded string (as an array of &lt;code&gt; immutable(Latin2Char)&lt;/code&gt;).</source>
          <target state="translated">Latin2でエンコードされた文字列を定義します（ &lt;code&gt; immutable(Latin2Char)&lt;/code&gt; の配列として））。</target>
        </trans-unit>
        <trans-unit id="8d5cf26107dde7d6c09fcfb638d212a7bf2e12ba" translate="yes" xml:space="preserve">
          <source>Defines an Windows1250-encoded string (as an array of &lt;code&gt; immutable(Windows1250Char)&lt;/code&gt;).</source>
          <target state="translated">Windows1250でエンコードされた文字列を定義します（ &lt;code&gt; immutable(Windows1250Char)&lt;/code&gt; 配列（Windows1250Char）として））。</target>
        </trans-unit>
        <trans-unit id="e8732904f5c920a3848f6eb11eb4689860b73df6" translate="yes" xml:space="preserve">
          <source>Defines an Windows1251-encoded string (as an array of &lt;code&gt; immutable(Windows1251Char)&lt;/code&gt;).</source>
          <target state="translated">Windows1251でエンコードされた文字列を定義します（ &lt;code&gt; immutable(Windows1251Char)&lt;/code&gt; の配列として）。</target>
        </trans-unit>
        <trans-unit id="e4276c26be648ff75c1e818b48f26e071b93fc98" translate="yes" xml:space="preserve">
          <source>Defines an Windows1252-encoded string (as an array of &lt;code&gt; immutable(Windows1252Char)&lt;/code&gt;).</source>
          <target state="translated">Windows1252でエンコードされた文字列を定義します（ &lt;code&gt; immutable(Windows1252Char)&lt;/code&gt; の配列として）。</target>
        </trans-unit>
        <trans-unit id="97ccdd739d5a34ddd79a07f475bf10a7ea2872af" translate="yes" xml:space="preserve">
          <source>Defines an early termination condition. Receives the current upper and lower bounds on the root. The delegate must return &lt;code&gt;true&lt;/code&gt; when these bounds are acceptable. If this function always returns &lt;code&gt;false&lt;/code&gt;, full machine precision will be achieved.</source>
          <target state="translated">早期終了条件を定義します。ルートの現在の上限と下限を受け取ります。デリゲートは、これらの境界が許容できる場合は &lt;code&gt;true&lt;/code&gt; を返す必要があります。この関数が常に &lt;code&gt;false&lt;/code&gt; を返す場合、完全な機械精度が達成されます。</target>
        </trans-unit>
        <trans-unit id="5c3a4051688057309dd223cc23bc9904e0d4075a" translate="yes" xml:space="preserve">
          <source>Defines binary operations with overflow checking for any two integral types. The result type obeys the language rules (even when they may be counterintuitive), and &lt;code&gt;overflow&lt;/code&gt; is set if an overflow occurs (including inadvertent change of signedness, e.g. &lt;code&gt;-1&lt;/code&gt; is converted to &lt;code&gt;uint&lt;/code&gt;). Conceptually the behavior is:</source>
          <target state="translated">2つの整数型のオーバーフローチェックを行うバイナリ演算を定義します。結果の型は言語の規則に従い（直感的でない場合でも）、オーバーフローが発生すると &lt;code&gt;overflow&lt;/code&gt; が設定されます（符号の不注意な変更を含む、たとえば &lt;code&gt;-1&lt;/code&gt; は &lt;code&gt;uint&lt;/code&gt; に）。概念的には、動作は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c6275d2a02318e95dbebc22c44c93c7e2829c06d" translate="yes" xml:space="preserve">
          <source>Defines binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; for the case when a built-in numeric or Boolean type is on the left-hand side, and a &lt;code&gt;Checked&lt;/code&gt; instance is on the right-hand side.</source>
          <target state="translated">二項演算子 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;%&lt;/code&gt; 、 &lt;code&gt;^^&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; を定義します、 &lt;code&gt;^&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 、組み込みの数値型またはブール型が左側にあり、 &lt;code&gt;Checked&lt;/code&gt; インスタンスが右側にある場合。</target>
        </trans-unit>
        <trans-unit id="deff15ac1ee86ba403037d1ba526c39f22f79b38" translate="yes" xml:space="preserve">
          <source>Defines binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. If &lt;code&gt;Hook&lt;/code&gt; defines &lt;code&gt;hookOpBinary&lt;/code&gt;, &lt;code&gt;opBinary&lt;/code&gt; forwards to &lt;code&gt; Checked!(typeof(hook.hookOpBinary!op(get, rhs)), Hook)(hook.hookOpBinary!op(get, rhs))&lt;/code&gt;.</source>
          <target state="translated">二項演算子 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;%&lt;/code&gt; 、 &lt;code&gt;^^&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; を定義します、 &lt;code&gt;^&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 。 &lt;code&gt;Hook&lt;/code&gt; が &lt;code&gt;hookOpBinary&lt;/code&gt; を定義している場合、 &lt;code&gt;opBinary&lt;/code&gt; は &lt;code&gt; Checked!(typeof(hook.hookOpBinary!op(get, rhs)), Hook)(hook.hookOpBinary!op(get, rhs))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="82d51c5b573b12f3ad98f02a60e2594b70eb07ed" translate="yes" xml:space="preserve">
          <source>Defines built-in exception types and low-level language hooks required by the compiler.</source>
          <target state="translated">コンパイラが必要とする組み込みの例外型と低レベル言語フックを定義します。</target>
        </trans-unit>
        <trans-unit id="4e91c153395398611d9ad588b394bf5e23ccda89" translate="yes" xml:space="preserve">
          <source>Defines hooks for binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; for cases where a &lt;code&gt;Checked&lt;/code&gt; object is the left-hand side operand. If &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt;, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; without evaluating the operand. Otherwise, evaluates the operand. If evaluation does not overflow, returns the result. Otherwise, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt;.</source>
          <target state="translated">二項演算子 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;%&lt;/code&gt; 、 &lt;code&gt;^^&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; のフックを定義します、 &lt;code&gt;^&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; は、 &lt;code&gt;Checked&lt;/code&gt; オブジェクトが左側のオペランドである場合に使用します。 &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt; 場合、オペランドを評価せずに &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; を返します。それ以外の場合は、オペランドを評価します。評価がオーバーフローしない場合、結果を返します。それ以外の場合は、 &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="b4943eeb1bdb96455051418c789cfdb6862bc56c" translate="yes" xml:space="preserve">
          <source>Defines hooks for binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; for cases where a &lt;code&gt;Checked&lt;/code&gt; object is the right-hand side operand. If &lt;code&gt;rhs == WithNaN.defaultValue!Rhs&lt;/code&gt;, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; without evaluating the operand. Otherwise, evaluates the operand. If evaluation does not overflow, returns the result. Otherwise, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt;.</source>
          <target state="translated">二項演算子 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;%&lt;/code&gt; 、 &lt;code&gt;^^&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; のフックを定義します、 &lt;code&gt;^&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; は、 &lt;code&gt;Checked&lt;/code&gt; オブジェクトが右側のオペランドである場合に使用します。 &lt;code&gt;rhs == WithNaN.defaultValue!Rhs&lt;/code&gt; 場合、オペランドを評価せずに &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; を返します。それ以外の場合は、オペランドを評価します。評価がオーバーフローしない場合、結果を返します。それ以外の場合は、 &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="344e4af67915b1da0a4f7b2eb4baa46168d0a009" translate="yes" xml:space="preserve">
          <source>Defines hooks for binary operators &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;^^=&lt;/code&gt;, &lt;code&gt;&amp;amp;=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;, &lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt; for cases where a &lt;code&gt;Checked&lt;/code&gt; object is the left-hand side operand. If &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt;, no action is carried. Otherwise, evaluates the operand. If evaluation does not overflow and fits in &lt;code&gt;Lhs&lt;/code&gt; without loss of information or change of sign, sets &lt;code&gt;lhs&lt;/code&gt; to the result. Otherwise, sets &lt;code&gt;lhs&lt;/code&gt; to &lt;code&gt;WithNaN.defaultValue!Lhs&lt;/code&gt;.</source>
          <target state="translated">二項演算子のフックを定義します &lt;code&gt;+=&lt;/code&gt; 、 &lt;code&gt;-=&lt;/code&gt; 、 &lt;code&gt;*=&lt;/code&gt; 、 &lt;code&gt;/=&lt;/code&gt; 、 &lt;code&gt;%=&lt;/code&gt; 、 &lt;code&gt;^^=&lt;/code&gt; 、 &lt;code&gt;&amp;amp;=&lt;/code&gt; 、 &lt;code&gt;|=&lt;/code&gt; 、 &lt;code&gt;^=&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt; の場合 &lt;code&gt;Checked&lt;/code&gt; オブジェクトは左側のオペランドです。場合 &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt; 、何のアクションが実行されません。それ以外の場合は、オペランドを評価します。評価がオーバーフローせず、情報の損失や符号の変更なしに &lt;code&gt;Lhs&lt;/code&gt; に収まる場合は、 &lt;code&gt;lhs&lt;/code&gt; を結果に設定します。それ以外の場合は、設定します &lt;code&gt;lhs&lt;/code&gt; を &lt;code&gt;WithNaN.defaultValue!Lhs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1765c6ae1549ba0f78d30a2ebbb0c0bf7b13cc1d" translate="yes" xml:space="preserve">
          <source>Defines hooks for unary operators &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;++&lt;/code&gt;, and &lt;code&gt;--&lt;/code&gt;.</source>
          <target state="translated">単項演算子 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;~&lt;/code&gt; 、 &lt;code&gt;++&lt;/code&gt; 、および &lt;code&gt;--&lt;/code&gt; フックを定義します。</target>
        </trans-unit>
        <trans-unit id="1062f11ecac31d0859fcc7cf5ec29909f863a7eb" translate="yes" xml:space="preserve">
          <source>Defines operators &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;^^=&lt;/code&gt;, &lt;code&gt;&amp;amp;=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;, &lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt;.</source>
          <target state="translated">演算子 &lt;code&gt;+=&lt;/code&gt; 、 &lt;code&gt;-=&lt;/code&gt; 、 &lt;code&gt;*=&lt;/code&gt; 、 &lt;code&gt;/=&lt;/code&gt; 、 &lt;code&gt;%=&lt;/code&gt; 、 &lt;code&gt;^^=&lt;/code&gt; 、 &lt;code&gt;&amp;amp;=&lt;/code&gt; 、 &lt;code&gt;|=&lt;/code&gt; 、 &lt;code&gt;^=&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="a84f96c56e07c3c0d4be57b930a8414c37127be8" translate="yes" xml:space="preserve">
          <source>Defines the array's primary range, which is a random-access range.</source>
          <target state="translated">配列の一次範囲(ランダムアクセス範囲)を定義します。</target>
        </trans-unit>
        <trans-unit id="b9547918d0ec754aaa9e5611e63002c034456218" translate="yes" xml:space="preserve">
          <source>Defines the array's primary range.</source>
          <target state="translated">配列の一次範囲を定義します。</target>
        </trans-unit>
        <trans-unit id="25307811d2b650458426086b1231b34b76190751" translate="yes" xml:space="preserve">
          <source>Defines the constants A=0, B=1, C=2, all of type &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">定数A = 0、B = 1、C = 2、すべて &lt;code&gt;int&lt;/code&gt; 型を定義します。</target>
        </trans-unit>
        <trans-unit id="5960422815ff02efca0bb0b0bc511d329a4df6b9" translate="yes" xml:space="preserve">
          <source>Defines the container's primary range, which embodies a bidirectional range.</source>
          <target state="translated">コンテナの一次範囲を定義します。</target>
        </trans-unit>
        <trans-unit id="cfb64e179215d70a5466203268165ded0aa67b71" translate="yes" xml:space="preserve">
          <source>Defines the container's primary range, which embodies a forward range.</source>
          <target state="translated">コンテナの一次範囲を定義します。</target>
        </trans-unit>
        <trans-unit id="7704b43cc8447527f7119f9c397053172e452d7c" translate="yes" xml:space="preserve">
          <source>Defines the fastest type to use when storing temporaries of a calculation intended to ultimately yield a result of type &lt;code&gt;F&lt;/code&gt; (where &lt;code&gt;F&lt;/code&gt; must be one of &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, or &lt;code&gt;real&lt;/code&gt;). When doing a multi-step computation, you may want to store intermediate results as &lt;code&gt;FPTemporary!F&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;F&lt;/code&gt; の結果を最終的に生成することを目的とした計算の一時を保存するときに使用する最速のタイプを定義します（ &lt;code&gt;F&lt;/code&gt; は &lt;code&gt;float&lt;/code&gt; 、 &lt;code&gt;double&lt;/code&gt; 、または &lt;code&gt;real&lt;/code&gt; のいずれかでなければなりません）。複数ステップの計算を行う場合、中間結果を &lt;code&gt;FPTemporary!F&lt;/code&gt; として保存することができます。</target>
        </trans-unit>
        <trans-unit id="7510c989e941b6308941ea24aee5fb7c86db407f" translate="yes" xml:space="preserve">
          <source>Defines the minimum and maximum. These values are hookable by defining &lt;code&gt;Hook.min&lt;/code&gt; and/or &lt;code&gt;Hook.max&lt;/code&gt;.</source>
          <target state="translated">最小値と最大値を定義します。これらの値は、 &lt;code&gt;Hook.min&lt;/code&gt; やHook.maxを定義することでフック &lt;code&gt;Hook.max&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="de7aa10564ec957fefcba6baa79ce725c7abf349" translate="yes" xml:space="preserve">
          <source>Defines the policy used by this mutex. Currently, two policies are defined.</source>
          <target state="translated">このミューテックスで使用するポリシーを定義します。現在、2つのポリシーが定義されています。</target>
        </trans-unit>
        <trans-unit id="b305949e5df45bb169d88a908bbe6d1143c90bf8" translate="yes" xml:space="preserve">
          <source>Defines the swapping strategy for algorithms that need to swap elements in a range (such as partition and sort). The strategy concerns the swapping of elements that are not the core concern of the algorithm. For example, consider an algorithm that sorts &lt;code&gt;[ &quot;abc&quot;, &quot;b&quot;, &quot;aBc&quot; ]&lt;/code&gt; according to &lt;code&gt;toUpper(a) &amp;lt; toUpper(b)&lt;/code&gt;. That algorithm might choose to swap the two equivalent strings &lt;code&gt;&quot;abc&quot;&lt;/code&gt; and &lt;code&gt;&quot;aBc&quot;&lt;/code&gt;. That does not affect the sorting since both &lt;code&gt;[&quot;abc&quot;, &quot;aBc&quot;, &quot;b&quot; ]&lt;/code&gt; and &lt;code&gt;[ &quot;aBc&quot;, &quot;abc&quot;, &quot;b&quot; ]&lt;/code&gt; are valid outcomes.</source>
          <target state="translated">範囲内の要素を交換する必要があるアルゴリズム（パーティションやソートなど）の交換戦略を定義します。戦略は、アルゴリズムの中心的な関心事ではない要素の交換に関係します。たとえば、 &lt;code&gt;[ &quot;abc&quot;, &quot;b&quot;, &quot;aBc&quot; ]&lt;/code&gt; を &lt;code&gt;toUpper(a) &amp;lt; toUpper(b)&lt;/code&gt; に従ってソートするアルゴリズムを考えてみましょう。そのアルゴリズムは、2つの同等の文字列 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; と &lt;code&gt;&quot;aBc&quot;&lt;/code&gt; を交換することを選択する場合があります。 &lt;code&gt;[&quot;abc&quot;, &quot;aBc&quot;, &quot;b&quot; ]&lt;/code&gt; と &lt;code&gt;[ &quot;aBc&quot;, &quot;abc&quot;, &quot;b&quot; ]&lt;/code&gt; はどちらも有効な結果であるため、並べ替えには影響しません。</target>
        </trans-unit>
        <trans-unit id="4ffb8042426740aa5362d442a645d2b525c7e4eb" translate="yes" xml:space="preserve">
          <source>Defines unary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;++&lt;/code&gt;, and &lt;code&gt;--&lt;/code&gt;. Unary &lt;code&gt;+&lt;/code&gt; is not overridable and always has built-in behavior (returns &lt;code&gt;this&lt;/code&gt;). For the others, if &lt;code&gt;Hook&lt;/code&gt; defines &lt;code&gt;hookOpUnary&lt;/code&gt;, &lt;code&gt;opUnary&lt;/code&gt; forwards to &lt;code&gt; Checked!(typeof(hook.hookOpUnary!op(get)), Hook)(hook.hookOpUnary!op(get))&lt;/code&gt;.</source>
          <target state="translated">単項演算子 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;~&lt;/code&gt; 、 &lt;code&gt;++&lt;/code&gt; 、および &lt;code&gt;--&lt;/code&gt; を定義します。単項 &lt;code&gt;+&lt;/code&gt; はオーバーライド可能ではなく、常に組み込みの動作があります（ &lt;code&gt;this&lt;/code&gt; 返します）。その他の場合、 &lt;code&gt;Hook&lt;/code&gt; &lt;code&gt;hookOpUnary&lt;/code&gt; を定義すると、 &lt;code&gt;opUnary&lt;/code&gt; は &lt;code&gt; Checked!(typeof(hook.hookOpUnary!op(get)), Hook)(hook.hookOpUnary!op(get))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c91bdc265815b43c5de3c96f45a415a58fc03b3a" translate="yes" xml:space="preserve">
          <source>Defines various character sets.</source>
          <target state="translated">様々な文字セットを定義します。</target>
        </trans-unit>
        <trans-unit id="91c4c727f1758e45e932ce0db96676cf294ad1a7" translate="yes" xml:space="preserve">
          <source>Defining a Class</source>
          <target state="translated">クラスの定義</target>
        </trans-unit>
        <trans-unit id="253771ce82d51dcb870328ec077ebadd1937c2b0" translate="yes" xml:space="preserve">
          <source>Defining an Objective-C class is exactly the same as declaring an external class but it should not be declared as &lt;code&gt;extern&lt;/code&gt;.</source>
          <target state="translated">Objective-Cクラスの定義は、外部クラスの宣言とまったく同じですが、 &lt;code&gt;extern&lt;/code&gt; として宣言しないでください。</target>
        </trans-unit>
        <trans-unit id="49228588f4c386e959561b07cb41a3da0cc8a81a" translate="yes" xml:space="preserve">
          <source>Definitions and Terms</source>
          <target state="translated">定義と用語</target>
        </trans-unit>
        <trans-unit id="ebbaa67091704824d3f48a282a09651d409aa6bd" translate="yes" xml:space="preserve">
          <source>Definitions from *.ddoc files specified on the command line.</source>
          <target state="translated">コマンドラインで指定した*.docファイルの定義。</target>
        </trans-unit>
        <trans-unit id="a576cd4219d3b8794f54a95b3ea7cef6eaff9c96" translate="yes" xml:space="preserve">
          <source>Definitions from any Macros: sections.</source>
          <target state="translated">任意のマクロからの定義:セクション</target>
        </trans-unit>
        <trans-unit id="56ddc5afa8fef3fcf012921b1f9dae5145cf3f46" translate="yes" xml:space="preserve">
          <source>Definitions from file specified by &lt;a href=&quot;https://dlang.org/dmd-windows.html&quot;&gt;sc.ini&lt;/a&gt;'s or &lt;a href=&quot;https://dlang.org/dmd-linux.html#dmd_conf&quot;&gt;dmd.conf&lt;/a&gt; DDOCFILE setting.</source>
          <target state="translated">&lt;a href=&quot;https://dlang.org/dmd-windows.html&quot;&gt;sc.ini&lt;/a&gt;または&lt;a href=&quot;https://dlang.org/dmd-linux.html#dmd_conf&quot;&gt;dmd.conf&lt;/a&gt; DDOCFILE設定で指定されたファイルからの定義。</target>
        </trans-unit>
        <trans-unit id="5248d2cbc097c85b5bf07bd79ad21d3dc04f00b6" translate="yes" xml:space="preserve">
          <source>Definitions of common Byte Order Marks. The elements of the &lt;code&gt;enum&lt;/code&gt; can used as indices into &lt;code&gt;bomTable&lt;/code&gt; to get matching &lt;code&gt;BOMSeq&lt;/code&gt;.</source>
          <target state="translated">一般的なバイトオーダーマークの定義。 &lt;code&gt;enum&lt;/code&gt; の要素を &lt;code&gt;bomTable&lt;/code&gt; へのインデックスとして使用して、一致する &lt;code&gt;BOMSeq&lt;/code&gt; を取得できます。</target>
        </trans-unit>
        <trans-unit id="7897876db0bd35868da0c36a32fa7a500fda668a" translate="yes" xml:space="preserve">
          <source>Definitions of special attributes recognized by the compiler.</source>
          <target state="translated">コンパイラが認識する特殊な属性の定義。</target>
        </trans-unit>
        <trans-unit id="b21b82b54b0a65d096a65a8b2d7349eacef2dd27" translate="yes" xml:space="preserve">
          <source>Deflate algorithm. Use zlib library to compress</source>
          <target state="translated">デフレートアルゴリズム。zlib ライブラリを使用して</target>
        </trans-unit>
        <trans-unit id="a05b529ef757005d2ca3fc1444fc2e68093e8860" translate="yes" xml:space="preserve">
          <source>Deflate algorithm. Use zlib library to compress.</source>
          <target state="translated">Deflateアルゴリズム。圧縮には zlib ライブラリを使用します。</target>
        </trans-unit>
        <trans-unit id="d3b60fd736fbc73cf4f2f050a5951f01d10ff552" translate="yes" xml:space="preserve">
          <source>Deinitialize the memory allocator</source>
          <target state="translated">メモリアロケータを初期化しない</target>
        </trans-unit>
        <trans-unit id="718411bfbf8f7d188783f4bac4960c2189d9cac7" translate="yes" xml:space="preserve">
          <source>Deinitializes the global state of the compiler.</source>
          <target state="translated">コンパイラのグローバル状態を初期化します。</target>
        </trans-unit>
        <trans-unit id="065cfc5102f580580f89796dcd1da1ae87b21082" translate="yes" xml:space="preserve">
          <source>Deinitializes the global variables of the DMD compiler.</source>
          <target state="translated">DMDコンパイラのグローバル変数を初期化します。</target>
        </trans-unit>
        <trans-unit id="35ad6c0b40711e9f140e5814aaeef4e704df85cf" translate="yes" xml:space="preserve">
          <source>Delegate Layout</source>
          <target state="translated">代議員のレイアウト</target>
        </trans-unit>
        <trans-unit id="d47fb2fb1178c716e771f8849c7c3bc1aa8bb49f" translate="yes" xml:space="preserve">
          <source>Delegate constructor calls cannot appear after labels.</source>
          <target state="translated">デリゲート コンストラクタの呼び出しは、ラベルの後には表示されません。</target>
        </trans-unit>
        <trans-unit id="64b5c80659df5d38b23f9b3191515d8daefe2e21" translate="yes" xml:space="preserve">
          <source>Delegate to call afterwards</source>
          <target state="translated">以後の呼び出しを代行する</target>
        </trans-unit>
        <trans-unit id="7dcccba4f8856a9df41efcf1d5ea4f2cfd327cec" translate="yes" xml:space="preserve">
          <source>Delegates</source>
          <target state="translated">Delegates</target>
        </trans-unit>
        <trans-unit id="3cf9845d1e82b5c764efd1c97377bd5fd9ba42fb" translate="yes" xml:space="preserve">
          <source>Delegates are</source>
          <target state="translated">代議員は</target>
        </trans-unit>
        <trans-unit id="16abb00eb4427b3b72f26ec632c009b0430dcf6f" translate="yes" xml:space="preserve">
          <source>Delegates are an aggregate of two pieces of data: an object reference and a pointer to a non-static member function, or a pointer to a closure and a pointer to a nested function. The object reference forms the &lt;code&gt;this&lt;/code&gt; pointer when the function is called.</source>
          <target state="translated">デリゲートは、オブジェクト参照と非静的メンバー関数へのポインター、またはクロージャーへのポインターとネストされた関数へのポインターの2つのデータの集合体です。オブジェクト参照は、関数が呼び出されたときに &lt;code&gt;this&lt;/code&gt; ポインターを形成します。</target>
        </trans-unit>
        <trans-unit id="4aec14b7fdac5fb0ecec8f415ab6eb69aa261acb" translate="yes" xml:space="preserve">
          <source>Delegates are called analogously to function pointers:</source>
          <target state="translated">デレゲートは、関数ポインタと同様に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2558e9f7d9f5526e4364edc3b8db3d61cf86460c" translate="yes" xml:space="preserve">
          <source>Delegates are declared similarly to function pointers:</source>
          <target state="translated">デレゲートは、関数ポインタと同様に宣言されます。</target>
        </trans-unit>
        <trans-unit id="aa625441b78d7acde925782444188a7c87208857" translate="yes" xml:space="preserve">
          <source>Delegates are formatted by &lt;code&gt;ReturnType delegate(Parameters) FunctionAttributes&lt;/code&gt;</source>
          <target state="translated">デリゲートは &lt;code&gt;ReturnType delegate(Parameters) FunctionAttributes&lt;/code&gt; によってフォーマットされます</target>
        </trans-unit>
        <trans-unit id="5e1b39ccb37a9961d1255101485bf15889e010ca" translate="yes" xml:space="preserve">
          <source>Delegates are returned with the pointer to the function in EDX and the context pointer in EAX.</source>
          <target state="translated">デリゲートは、EDXの関数へのポインタとEAXのコンテキストポインタで返されます。</target>
        </trans-unit>
        <trans-unit id="052b6f63bd5851cead5b4c172e8f935a644d89b8" translate="yes" xml:space="preserve">
          <source>Delegates cannot be initialized with static member functions or non-member functions.</source>
          <target state="translated">静的なメンバ関数や非メンバ関数を使用してデリゲートを初期化することはできません。</target>
        </trans-unit>
        <trans-unit id="7c7d30725d61528bbe87347b21c48cb4af14cdd7" translate="yes" xml:space="preserve">
          <source>Delegates to non-static nested functions contain two pieces of data: the pointer to the stack frame of the lexically enclosing function (called the</source>
          <target state="translated">非静的ネストされた関数のデリゲートには、2つのデータが含まれています。</target>
        </trans-unit>
        <trans-unit id="df2bc9c8ae8ec095a651df2d9f40d26505be447e" translate="yes" xml:space="preserve">
          <source>Delegates vs interfaces</source>
          <target state="translated">デレゲートとインターフェイス</target>
        </trans-unit>
        <trans-unit id="d54452ca4b1bb4f12762b945e239935abe5fa967" translate="yes" xml:space="preserve">
          <source>Delegates, Function Pointers, and Closures</source>
          <target state="translated">委譲子、関数ポインタ、およびクロージャ</target>
        </trans-unit>
        <trans-unit id="412badc405df4381dd52a85e29141086798a8af9" translate="yes" xml:space="preserve">
          <source>Delegating Constructors</source>
          <target state="translated">コンストラクタの委譲</target>
        </trans-unit>
        <trans-unit id="0f5b0bb2508c13ddea64f445e0f902492dfb25f9" translate="yes" xml:space="preserve">
          <source>Delegating constructor calls cannot appear after labels.</source>
          <target state="translated">コンストラクタの呼び出しを委譲すると、ラベルの後に表示されない。</target>
        </trans-unit>
        <trans-unit id="9c2f909da974c69b9255abf22c4ae5cb45c5d450" translate="yes" xml:space="preserve">
          <source>Delegating the kind of operation to &quot;g&quot; flag is soon to be phased out along with the ability to choose the exact matching scheme. The choice of matching scheme to use depends highly on the pattern kind and can done automatically on case by case basis.</source>
          <target state="translated">操作の種類を &quot;g &quot;フラグに委譲することは、正確なマッチングスキームを選択する機能とともに、まもなく廃止されます。使用するマッチング・スキームの選択は、パターンの種類に大きく依存し、ケース・バイ・ケースで自動的に行われます。</target>
        </trans-unit>
        <trans-unit id="f6fdbe48dc54dd86f63097a03bd24094dedd713a" translate="yes" xml:space="preserve">
          <source>Delete</source>
          <target state="translated">Delete</target>
        </trans-unit>
        <trans-unit id="65ff71d2eb372c56b3f421a32122f09cb83f3b55" translate="yes" xml:space="preserve">
          <source>Delete Expressions</source>
          <target state="translated">式の削除</target>
        </trans-unit>
        <trans-unit id="8f55705e486ea8516926708c08c13c9256e8a95e" translate="yes" xml:space="preserve">
          <source>Delete a file.</source>
          <target state="translated">ファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="972202c713fa07c93a56a91c10a0682843f3a8e5" translate="yes" xml:space="preserve">
          <source>Delete de from the archive.</source>
          <target state="translated">アーカイブからdeを削除します。</target>
        </trans-unit>
        <trans-unit id="88fe1a4f86d7d55ef149bd6699c8cb4ae2ad5354" translate="yes" xml:space="preserve">
          <source>Delete entry in AA, return true if it was present</source>
          <target state="translated">AA内のエントリを削除し、存在していればtrueを返します。</target>
        </trans-unit>
        <trans-unit id="25daa8e189d0bc44a28d39ed353b7d7a29be2d4b" translate="yes" xml:space="preserve">
          <source>Delete entry scope const AA, return true if it was present</source>
          <target state="translated">エントリスコープの削除 const AA,存在していれば真を返します。</target>
        </trans-unit>
        <trans-unit id="2f7a502591586046031c9af95e9952db392fbf2f" translate="yes" xml:space="preserve">
          <source>Delete exception instance &lt;code&gt;t&lt;/code&gt; from the exception pool. Must have been allocated with &lt;code&gt;_d_newThrowable()&lt;/code&gt;. This is meant to be called at the close of a catch block. It's nothrow because otherwise any function with a catch block could not be nothrow.</source>
          <target state="translated">例外インスタンス &lt;code&gt;t&lt;/code&gt; を例外プールから削除します。 &lt;code&gt;_d_newThrowable()&lt;/code&gt; で割り当てられている必要があります。これは、catchブロックの終了時に呼び出されることを意図しています。それ以外の場合、catchブロックを含む関数はスローされないため、これはスローではありません。</target>
        </trans-unit>
        <trans-unit id="5dfa5a5b1782a414f9933fb08f5b7f16627c244b" translate="yes" xml:space="preserve">
          <source>Delete existing file, write new file</source>
          <target state="translated">既存ファイルの削除、新規ファイルの書き込み</target>
        </trans-unit>
        <trans-unit id="046b836f5646c2c23db59e441ec8c005c9a8f702" translate="yes" xml:space="preserve">
          <source>Delete file &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">ファイル &lt;code&gt;name&lt;/code&gt; 削除します。</target>
        </trans-unit>
        <trans-unit id="8cc031cb08c389041e65ed6ad302b03e5855448c" translate="yes" xml:space="preserve">
          <source>Delete member &lt;code&gt;de&lt;/code&gt; from the archive. Uses the name of the member to detect which element to delete.</source>
          <target state="translated">アーカイブからメンバー &lt;code&gt;de&lt;/code&gt; を削除します。メンバーの名前を使用して、削除する要素を検出します。</target>
        </trans-unit>
        <trans-unit id="d9e7b44b2cadf44f0c32b15240292c8452debe64" translate="yes" xml:space="preserve">
          <source>Deleting arrays</source>
          <target state="translated">配列の削除</target>
        </trans-unit>
        <trans-unit id="0fdf5407bec76f65af9589ccf41be8c79bf847a1" translate="yes" xml:space="preserve">
          <source>Deleting arrays of structs</source>
          <target state="translated">構造体の配列の削除</target>
        </trans-unit>
        <trans-unit id="4254b9286de9f21e4cee34675ef4eebdc65ff8c6" translate="yes" xml:space="preserve">
          <source>Deleting classes</source>
          <target state="translated">クラスの削除</target>
        </trans-unit>
        <trans-unit id="ed4c149e0b712f4e2bb72b0013511d6f061d5740" translate="yes" xml:space="preserve">
          <source>Deleting interfaces</source>
          <target state="translated">インターフェースの削除</target>
        </trans-unit>
        <trans-unit id="ae17b3b5e7a92728accc290c8bf686e71c3e3517" translate="yes" xml:space="preserve">
          <source>Deleting structs</source>
          <target state="translated">構造体の削除</target>
        </trans-unit>
        <trans-unit id="be9605dcb1e588f88c8bee392dc7b467d126321c" translate="yes" xml:space="preserve">
          <source>Delimited Strings</source>
          <target state="translated">区切りのある弦</target>
        </trans-unit>
        <trans-unit id="9e387962609f0e1e964c7e568f72f9e7ae3c3956" translate="yes" xml:space="preserve">
          <source>Delimited strings use various forms of delimiters. The delimiter, whether a character or identifer, must immediately follow the &quot; without any intervening whitespace. The terminating delimiter must immediately precede the closing &quot; without any intervening whitespace. A</source>
          <target state="translated">区切り文字列は様々な形式の区切り文字を使用します。区切り文字は、文字であろうと識別子であろうと、空白を挟まずに &quot; の直後に続けなければなりません。終了する区切り文字は、ホワイトスペースを介在させずに &quot; の直後に続けなければなりません。A</target>
        </trans-unit>
        <trans-unit id="695cf84f7fd42be086fd3b6d5da97a93866813a5" translate="yes" xml:space="preserve">
          <source>Delimited strings use various forms of delimiters. The delimiter, whether a character or identifier, must immediately follow the &quot; without any intervening whitespace. The terminating delimiter must immediately precede the closing &quot; without any intervening whitespace. A</source>
          <target state="translated">区切り文字列は様々な形式の区切り文字を使用します。区切り文字は、文字であれ識別子であれ、空白を挟まずに &quot; の直後に続けなければなりません。終端の区切り文字は、空白を介在させずに &quot; の直後に続けなければなりません。A</target>
        </trans-unit>
        <trans-unit id="5dec72453c3798227c53d3e18645cc781f128098" translate="yes" xml:space="preserve">
          <source>Demangle D mangled names.</source>
          <target state="translated">Dの揶揄された名前を解体して</target>
        </trans-unit>
        <trans-unit id="ddfd9e8118efdecff8dd2d2af4b014f3b4804c01" translate="yes" xml:space="preserve">
          <source>Demangles D mangled names. If it is not a D mangled name, it returns its argument name.</source>
          <target state="translated">Dのマングルされた名前を解除します。D マングルされた名前でない場合は、その引数の名前を返します。</target>
        </trans-unit>
        <trans-unit id="debfefbb9cba46b7cd15ad0f72aee393c6142eb7" translate="yes" xml:space="preserve">
          <source>Demangles a D mangled type.</source>
          <target state="translated">Dのマングルドタイプを解除します。</target>
        </trans-unit>
        <trans-unit id="ef35d5b2d9137e56445dcb13b1926641ac1748d1" translate="yes" xml:space="preserve">
          <source>Denis Shelomovskij</source>
          <target state="translated">デニス・シェロモフスキー</target>
        </trans-unit>
        <trans-unit id="b119328fcf0f1a8506c71d6d5c90a4b602176677" translate="yes" xml:space="preserve">
          <source>Depending on the architecture, compiler flags may be required to activate support for SIMD types.</source>
          <target state="translated">アーキテクチャによっては、SIMD 型のサポートを有効にするためにコンパイラフラグが必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="5800c53d5e6610496fae36318de2fc0ee48759c2" translate="yes" xml:space="preserve">
          <source>Depending on the sign, NANs go to either end of the spectrum.</source>
          <target state="translated">符号にもよりますが、NANはどちらかの端に行きます。</target>
        </trans-unit>
        <trans-unit id="eef926e2307412ea5d18dc2f434ab76df97c9426" translate="yes" xml:space="preserve">
          <source>Depending on the struct layout, the compiler may generate the following internal postblit functions:</source>
          <target state="translated">構造体のレイアウトに応じて、コンパイラは以下の内部ポストブリット関数を生成します。</target>
        </trans-unit>
        <trans-unit id="527600bf0272b6bf3abcb495a99c6ee346bb82b2" translate="yes" xml:space="preserve">
          <source>Deprecated</source>
          <target state="translated">Deprecated</target>
        </trans-unit>
        <trans-unit id="42a66abe1669ce3ffad7695dbe407c22ed591eb2" translate="yes" xml:space="preserve">
          <source>Deprecated Functions</source>
          <target state="translated">非推奨関数</target>
        </trans-unit>
        <trans-unit id="bfc32553e9a3941dedadb9fb40b33e7008f653d9" translate="yes" xml:space="preserve">
          <source>Deprecated Soft Heap Limit Interface</source>
          <target state="translated">非推奨のソフトヒープ制限インタフェース</target>
        </trans-unit>
        <trans-unit id="b2a248487f391de50bfbecd25bb7aaa1ed569640" translate="yes" xml:space="preserve">
          <source>Deprecated. Please use &lt;a href=&quot;#enforce&quot;&gt;&lt;code&gt;enforce&lt;/code&gt;&lt;/a&gt; instead. This function will be removed 2.089.</source>
          <target state="translated">非推奨。代わりに&lt;a href=&quot;#enforce&quot;&gt; &lt;code&gt;enforce&lt;/code&gt; &lt;/a&gt;を使用してください。この関数は2.089で削除されます。</target>
        </trans-unit>
        <trans-unit id="2c79ea7bd700047cc619e794290dc3e2dc523454" translate="yes" xml:space="preserve">
          <source>Deprecated. Please use &lt;a href=&quot;#round&quot;&gt;&lt;code&gt;round&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">非推奨。代わりに&lt;a href=&quot;#round&quot;&gt; &lt;code&gt;round&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="1b9904893da49653e1dba2c46ecfb0656a693e60" translate="yes" xml:space="preserve">
          <source>DeprecatedAttribute</source>
          <target state="translated">DeprecatedAttribute</target>
        </trans-unit>
        <trans-unit id="ee777837c7008ab314d60ab6340d94b7bb481757" translate="yes" xml:space="preserve">
          <source>Dereferencing a pointer that is not</source>
          <target state="translated">ではないポインタの参照を解除する</target>
        </trans-unit>
        <trans-unit id="0474d0915ec1aafb67985d6471d5cd7b881a0fc7" translate="yes" xml:space="preserve">
          <source>Deregisters the calling thread from use with the runtime. If this routine is called for a thread which is not registered, the result is undefined.</source>
          <target state="translated">呼び出したスレッドをランタイムでの使用から登録解除します。登録されていないスレッドに対してこのルーチンが呼び出された場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="1ca49bb05cb1ee30fb0317e206c0b46b922133c6" translate="yes" xml:space="preserve">
          <source>Deregisters the given thread from use with the runtime. If this routine is called for a thread which is not registered, the result is undefined.</source>
          <target state="translated">指定されたスレッドをランタイムでの使用から登録解除します。登録されていないスレッドに対してこのルーチンが呼び出された場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="081ea626fb636d13a422e02a8223b6bacf54ed06" translate="yes" xml:space="preserve">
          <source>Derived Data Types</source>
          <target state="translated">派生データ型</target>
        </trans-unit>
        <trans-unit id="dc979d243485252a4a9336b834ea499511e48f35" translate="yes" xml:space="preserve">
          <source>Derived classes inherit any allocator from their base class, if one is not specified.</source>
          <target state="translated">派生クラスは、アロケータが指定されていない場合は、その基底クラスから任意のアロケータを継承します。</target>
        </trans-unit>
        <trans-unit id="ecdd58700bf7c79b9590aa6ba4f17a59fdf13cc5" translate="yes" xml:space="preserve">
          <source>Derived classes inherit any deallocator from their base class, if one is not specified.</source>
          <target state="translated">派生クラスは、デアロケータが指定されていない場合は、ベースクラスから任意のデアロケータを継承します。</target>
        </trans-unit>
        <trans-unit id="01e635f27ec24e2d0be75256adcfabf099c3a6e6" translate="yes" xml:space="preserve">
          <source>Desc</source>
          <target state="translated">Desc</target>
        </trans-unit>
        <trans-unit id="d55435d9dcbb175dba229d196e836af1eeb181cc" translate="yes" xml:space="preserve">
          <source>Describes a back-end target. At present it is incomplete, but in the future it should grow to contain most or all target machine and target O/S specific information.</source>
          <target state="translated">バックエンドターゲットを記述します。現在は不完全ですが、将来的には、ほとんどまたはすべてのターゲットマシンとターゲットO/S固有の情報を含むようになるはずです。</target>
        </trans-unit>
        <trans-unit id="17519f0a081d4de96e9a8327052145d4da388c05" translate="yes" xml:space="preserve">
          <source>Describes how an argument type is passed to a function on target.</source>
          <target state="translated">引数の型がターゲットの関数にどのように渡されるかを説明します。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="04f0f87cdf30f41863595935bdd7b915c84a0c3d" translate="yes" xml:space="preserve">
          <source>Deseret</source>
          <target state="translated">Deseret</target>
        </trans-unit>
        <trans-unit id="5c22a4f35a8597f537d66c0b77083b1157bffb80" translate="yes" xml:space="preserve">
          <source>Destination string</source>
          <target state="translated">宛先文字列</target>
        </trans-unit>
        <trans-unit id="839c441dcc29d361bfacf38afa416f18a1637928" translate="yes" xml:space="preserve">
          <source>Destroy A Prepared Statement Object</source>
          <target state="translated">準備されたステートメントオブジェクトの破棄</target>
        </trans-unit>
        <trans-unit id="2ac4f537d3b2f32d96a398d33d05ec08395a3c21" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates (using &lt;code&gt;alloc&lt;/code&gt;) the object pointed to by a pointer, the class object referred to by a &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; reference, or an entire array. It is assumed the respective entities had been allocated with the same allocator.</source>
          <target state="translated">ポインターが指すオブジェクト、 &lt;code&gt;class&lt;/code&gt; または &lt;code&gt;interface&lt;/code&gt; 参照によって参照されるクラスオブジェクト、または配列全体を破棄し、割り当てを解除します（ &lt;code&gt;alloc&lt;/code&gt; を使用）。それぞれのエンティティが同じアロケータで割り当てられていると想定されています。</target>
        </trans-unit>
        <trans-unit id="c7c2581b265a4916c03d15bb749b173d1a0e008f" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates (using &lt;code&gt;allocatorFor!T&lt;/code&gt;) the object pointed to by a pointer, the class object referred to by a &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; reference, or an entire array. It is assumed the respective entities had been allocated with the same allocator.</source>
          <target state="translated">ポインターによってポイントされたオブジェクト、 &lt;code&gt;class&lt;/code&gt; または &lt;code&gt;interface&lt;/code&gt; 参照によって参照されたクラスオブジェクト、または配列全体を破棄し、割り当てを解除します（ &lt;code&gt;allocatorFor!T&lt;/code&gt; を使用）。それぞれのエンティティが同じアロケータで割り当てられていると想定されています。</target>
        </trans-unit>
        <trans-unit id="461b0c4ed643cec21e62641f68d242b11940c0e4" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates a multidimensional array, assuming it was created with makeMultidimensionalArray and the same allocator was used.</source>
          <target state="translated">makeMultidimensionalArrayで作成され、同じアロケータが使用されたと仮定して、多次元配列を破棄し、解放します。</target>
        </trans-unit>
        <trans-unit id="a2ba51b01f5575967e896aa687ec2875a9254daf" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates an object.</source>
          <target state="translated">オブジェクトを破棄してから解放します。</target>
        </trans-unit>
        <trans-unit id="f22d78fd51640f5bf6ec9cfaee6fb8da07259389" translate="yes" xml:space="preserve">
          <source>Destroys the given object and optionally resets to initial state. It's used to destroy an object, calling its destructor or finalizer so it no longer references any other objects. It does</source>
          <target state="translated">指定したオブジェクトを破棄し、オプションで初期状態に戻します。これはオブジェクトを破壊するために使用され、そのデストラクタやファイナライザを呼び出して、他のオブジェクトを参照しなくなります。これは、以下のことを行います。</target>
        </trans-unit>
        <trans-unit id="3eb34f7d8ff2a61c242722058a753cf673126c48" translate="yes" xml:space="preserve">
          <source>Destructively get the error message from the last constraint evaluation</source>
          <target state="translated">最後の制約評価のエラーメッセージを破壊的に取得します。</target>
        </trans-unit>
        <trans-unit id="7d01bf1298a3c981415555afc1ef02f440504923" translate="yes" xml:space="preserve">
          <source>Destructively reads and returns the first element of the container. The slot is not removed from the container; it is left initialized with &lt;code&gt;T.init&lt;/code&gt;. This routine need not be defined if &lt;code&gt; front&lt;/code&gt; returns a &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="translated">コンテナの最初の要素を破壊的に読み取り、返します。スロットはコンテナから削除されません。 &lt;code&gt;T.init&lt;/code&gt; で初期化されたままです。 &lt;code&gt; front&lt;/code&gt; が &lt;code&gt;ref&lt;/code&gt; を返す場合、このルーチンを定義する必要はありません。</target>
        </trans-unit>
        <trans-unit id="9336266e721a28a2d92fc3dbf7f484300407b2c1" translate="yes" xml:space="preserve">
          <source>Destructively reads and returns the last element of the container. The slot is not removed from the container; it is left initialized with &lt;code&gt;T.init&lt;/code&gt;. This routine need not be defined if &lt;code&gt; front&lt;/code&gt; returns a &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="translated">破壊的にコンテナの最後の要素を読み取って返します。スロットはコンテナから削除されません。 &lt;code&gt;T.init&lt;/code&gt; で初期化されたままです。 &lt;code&gt; front&lt;/code&gt; が &lt;code&gt;ref&lt;/code&gt; を返す場合、このルーチンを定義する必要はありません。</target>
        </trans-unit>
        <trans-unit id="7aac383021a816adb22bea815df65cb001f38245" translate="yes" xml:space="preserve">
          <source>Destructively reads and returns the value at position &lt;code&gt;x&lt;/code&gt;. The slot is not removed from the container; it is left initialized with &lt;code&gt; T.init&lt;/code&gt;.</source>
          <target state="translated">位置 &lt;code&gt;x&lt;/code&gt; の値を破壊的に読み取り、返します。スロットはコンテナから削除されません。 &lt;code&gt; T.init&lt;/code&gt; で初期化されたままです。</target>
        </trans-unit>
        <trans-unit id="84a4ecd4027e79f4330184a9d5c9d5af4500afab" translate="yes" xml:space="preserve">
          <source>Destructively reads the &lt;code&gt;n&lt;/code&gt;th element in the composite range. Defined if all ranges offer random access.</source>
          <target state="translated">複合範囲の &lt;code&gt;n&lt;/code&gt; 番目の要素を破壊的に読み取ります。すべての範囲がランダムアクセスを提供するかどうかを定義します。</target>
        </trans-unit>
        <trans-unit id="bcf6c17f9da73e467a073ac5e6e487e5bdc36429" translate="yes" xml:space="preserve">
          <source>Destructors</source>
          <target state="translated">Destructors</target>
        </trans-unit>
        <trans-unit id="e919ed9bb70a46a3796a19890a326ae3da20095c" translate="yes" xml:space="preserve">
          <source>Destructors are attached to VarDeclarations. Hence, if expression returns a temp that needs a destructor, make sure and create a VarDeclaration for that temp.</source>
          <target state="translated">デストラクタは VarDeclaration に付属しています。したがって、式がデストラクタを必要とするテンポラを返す場合は、必ずそのテンポラ用の VarDeclaration を作成してください。</target>
        </trans-unit>
        <trans-unit id="1e1a2ce60b3d70cf2ae1ff1fc74a1778546c1572" translate="yes" xml:space="preserve">
          <source>Destructors are called when an object goes out of scope. Their purpose is to free up resources owned by the struct object.</source>
          <target state="translated">デストラクタは、オブジェクトがスコープ外になると呼び出されます。その目的は、構造体オブジェクトが所有するリソースを解放することです。</target>
        </trans-unit>
        <trans-unit id="733aed473da33e2c79e767b165dc015afa760e13" translate="yes" xml:space="preserve">
          <source>Destructors are used to deallocate resources acquired by an object. For most classes, this resource is allocated memory. With garbage collection, most destructors then become empty and can be discarded entirely.</source>
          <target state="translated">デストラクタは、オブジェクトが取得したリソースを解放するために使用されます。ほとんどのクラスでは、このリソースはメモリが割り当てられています。ガベージコレクションでは、ほとんどのデストラクタは空になり、完全に破棄することができます。</target>
        </trans-unit>
        <trans-unit id="4193705fdcc17dae2da79691a2cff0a2916e3951" translate="yes" xml:space="preserve">
          <source>Destructors will always be executed while other threads are active; that is, an implementation that stops the world must not execute destructors until the world has been resumed.</source>
          <target state="translated">デストラクタは常に他のスレッドがアクティブな間に実行されます。</target>
        </trans-unit>
        <trans-unit id="f9fe3defe21f65240e63a90d5c97a3f08cb63c9f" translate="yes" xml:space="preserve">
          <source>Detaches from the current file (throwing on failure), and then attempts to open file &lt;code&gt;name&lt;/code&gt; with mode &lt;code&gt;stdioOpenmode&lt;/code&gt;. The mode has the same semantics as in the C standard library &lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/fopen.html&quot;&gt;fopen&lt;/a&gt; function.</source>
          <target state="translated">現在のファイルから切り離して（失敗するとスローされます）、モード &lt;code&gt;stdioOpenmode&lt;/code&gt; でファイル &lt;code&gt;name&lt;/code&gt; を開こうとします。このモードのセマンティクスは、C標準ライブラリの&lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/fopen.html&quot;&gt;fopen&lt;/a&gt;関数と同じです。</target>
        </trans-unit>
        <trans-unit id="43c99522dee5ed94beb8731d90acc43ed9c784ee" translate="yes" xml:space="preserve">
          <source>Detaches from the current file (throwing on failure), and then runs a command by calling the C standard library function &lt;a href=&quot;http://opengroup.org/onlinepubs/007908799/xsh/popen.html&quot;&gt;popen&lt;/a&gt;.</source>
          <target state="translated">現在のファイルから切り離し（失敗するとスロー）、C標準ライブラリ関数&lt;a href=&quot;http://opengroup.org/onlinepubs/007908799/xsh/popen.html&quot;&gt;popenを&lt;/a&gt;呼び出してコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="57bdba4a21f2a94d4edb4431fa5a0dd46d80e939" translate="yes" xml:space="preserve">
          <source>Detaches from the current file (throwing on failure), and then runs a command by calling the C standard library function &lt;a href=&quot;https://opengroup.org/onlinepubs/007908799/xsh/popen.html&quot;&gt;popen&lt;/a&gt;.</source>
          <target state="translated">現在のファイルから切り離し（失敗時にスロー）、C標準ライブラリ関数&lt;a href=&quot;https://opengroup.org/onlinepubs/007908799/xsh/popen.html&quot;&gt;popenを&lt;/a&gt;呼び出してコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="bd15bb413d37f7450fabf4b76fbb1eddbcbd1e62" translate="yes" xml:space="preserve">
          <source>Detaches from the underlying file. If the sole owner, calls &lt;code&gt;close&lt;/code&gt;.</source>
          <target state="translated">元のファイルから切り離します。唯一の所有者の場合は、 &lt;code&gt;close&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="542386bcd7c66d08d9518931559ad4e0bf8fae14" translate="yes" xml:space="preserve">
          <source>Detect cases where pointers to the stack can escape the lifetime of the stack frame by being placed into a GC allocated object. Print error messages when these are detected.</source>
          <target state="translated">スタックへのポインタが、GC 割り当てられたオブジェクトに置かれることで、スタックフレームの寿命を逃すことができるケースを検出します。これらが検出された場合、エラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="9076928999f6d4e94fb79f73da0c20fffef0d124" translate="yes" xml:space="preserve">
          <source>Detect cases where pointers to the stack can escape the lifetime of the stack frame by returning &lt;code&gt;e&lt;/code&gt; by value. Print error messages when these are detected.</source>
          <target state="translated">スタックへのポインタが &lt;code&gt;e&lt;/code&gt; を値で返すことにより、スタックフレームの有効期間をエスケープできるケースを検出します。これらが検出されたときにエラーメッセージを出力します。</target>
        </trans-unit>
        <trans-unit id="fdb923c0534e9e273b6936106d4812cf1cf38b9f" translate="yes" xml:space="preserve">
          <source>Detect cases where pointers to the stack can escape the lifetime of the stack frame when throwing &lt;code&gt;e&lt;/code&gt;. Print error messages when these are detected.</source>
          <target state="translated">スタックへのポインタが &lt;code&gt;e&lt;/code&gt; をスローしたときにスタックフレームの有効期間をエスケープできる場合を検出します。これらが検出されたときにエラーメッセージを出力します。</target>
        </trans-unit>
        <trans-unit id="499cb741a25cf7eada5e6336f956dbbc7666650a" translate="yes" xml:space="preserve">
          <source>Detect cases where returning &lt;code&gt;e&lt;/code&gt; by &lt;code&gt;ref&lt;/code&gt; can result in a reference to the stack being returned. Print error messages when these are detected.</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; で &lt;code&gt;e&lt;/code&gt; を返すと、スタックへの参照が返される可能性がある場合を検出します。これらが検出されたときにエラーメッセージを出力します。</target>
        </trans-unit>
        <trans-unit id="8d6a78255190ec428d4fad5f67efcbbc9ca2974e" translate="yes" xml:space="preserve">
          <source>Detect if type has pointer fields that are initialized to void. Local stack variables with such void fields can remain uninitialized, leading to pointer bugs.</source>
          <target state="translated">型に void に初期化されたポインタフィールドがあるかどうかを検出します。このような void フィールドを持つローカルスタック変数は初期化されずに残る可能性があり、 ポインタのバグにつながります。</target>
        </trans-unit>
        <trans-unit id="54df594c9eb6677b5114796db2da98d1c4d4d452" translate="yes" xml:space="preserve">
          <source>Detect the currently active compiler.</source>
          <target state="translated">現在アクティブなコンパイラを検出します。</target>
        </trans-unit>
        <trans-unit id="b51b71117c0828c840c8304d87dfac8964b64f84" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a basic type (scalar type or void).</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が基本型（スカラー型またはvoid）かどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="1e78a9491e067ba1200478bea4b6381af182bad4" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in boolean type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が組み込みのブール型かどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="bccc60c97e13b55d2259e4dd661f163277430aaf" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in floating point type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が組み込みの浮動小数点型かどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="31e28e8d83f4150e30813b06f2f956381a78adee" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in integral type. Types &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;wchar&lt;/code&gt;, and &lt;code&gt;dchar&lt;/code&gt; are not considered integral.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が組み込みの整数型かどうかを検出します。型 &lt;code&gt;bool&lt;/code&gt; 、 &lt;code&gt;char&lt;/code&gt; 、 &lt;code&gt;wchar&lt;/code&gt; 、および &lt;code&gt;dchar&lt;/code&gt; は、整数型とは見なされません。</target>
        </trans-unit>
        <trans-unit id="de2d77424008998270c19608961463e73f92c7be" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in numeric type (integral or floating point).</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が組み込み数値型（整数または浮動小数点）かどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="8c65089db015519f052bf159af96861d7372752d" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in signed numeric type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が組み込みの符号付き数値型であるかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="5a490a1efc5fe8f8c15db26ad0b4f95eab8eca53" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in unsigned numeric type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が組み込みの符号なし数値型であるかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="1b38352e7ad6b1a6fbdbccfb9ff4ad51beb73154" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a callable object, which can be called with the function call operator &lt;code&gt;(...)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が関数呼び出し演算子 &lt;code&gt;(...)&lt;/code&gt; で呼び出すことができる呼び出し可能オブジェクトであるかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="9d45434827e487a9b6c8f41db71cdd120d62ea9e" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a final class.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が最終クラスかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="2f84ba682685f76cbf3408bf575477cd73c6327b" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a final function.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が最終関数かどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="8c52ac80711426de7e3c5c1cd6a0a7eb7e94d583" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a scalar type (a built-in numeric, character or boolean type).</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; がスカラー型（組み込みの数値型、文字型、またはブール型）かどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="bf13c75ae1dde7ee0304af6c7479fae0f687338c" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a struct, static array, or enum that is implicitly convertible to a string.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が構造体、静的配列、または暗黙的に文字列に変換可能な列挙型であるかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="2f245b54bbf6f96a3faf317a8a5dca85cbc461ba" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is an abstract class.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が抽象クラスかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="a0b8e4c218376a5ae32d31d3e0a14bdfe6e6a841" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is an abstract function.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が抽象関数かどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="b6b9086f224909a7c2bb4c56aba8c2ed79ca9706" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is an associative array type</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が連想配列型かどうかを検出</target>
        </trans-unit>
        <trans-unit id="0c1e7216bbcd9d1c115943f756e4d4417a836a18" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is one of the built-in character types.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が組み込み文字タイプの1つであるかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="9077d0a75bafe1b3a2f13d1ff7c468b81df74dc7" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is one of the built-in string types.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が組み込み文字列型の1つであるかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="4922c3a1a7b5dd1ae36c0c326672b28edec6d464" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;X&lt;/code&gt; is a final method or class.</source>
          <target state="translated">&lt;code&gt;X&lt;/code&gt; が最終メソッドかクラスかを検出します。</target>
        </trans-unit>
        <trans-unit id="827d13e51ef77f43eb8725193f558f8d3eaf26a4" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;X&lt;/code&gt; is a type. Analogous to &lt;code&gt;is(X)&lt;/code&gt;. This is useful when used in conjunction with other templates, e.g. &lt;code&gt;allSatisfy!(isType, X)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;X&lt;/code&gt; が型かどうかを検出します。 &lt;code&gt;is(X)&lt;/code&gt; に似ています。これは、他のテンプレート、たとえば &lt;code&gt;allSatisfy!(isType, X)&lt;/code&gt; と組み合わせて使用​​すると便利です。</target>
        </trans-unit>
        <trans-unit id="faf576f5d93ef682672e5244af28e0c3228a1ea4" translate="yes" xml:space="preserve">
          <source>Detect whether an enum is of integral type and has only &quot;flag&quot; values (i.e. values with a bit count of exactly 1). Additionally, a zero value is allowed for compatibility with enums including a &quot;None&quot; value.</source>
          <target state="translated">列挙型が積分型で、&quot;フラグ &quot;値のみを持つかどうかを検出します(すなわち、ビット数がちょうど1の値)。さらに、&quot;None &quot;値を含む列挙型との互換性のために、ゼロ値が許可されています。</target>
        </trans-unit>
        <trans-unit id="55ab7e461b66e319d8943fcc41de661d483907b2" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;T&lt;/code&gt; is a delegate.</source>
          <target state="translated">シンボルまたはタイプ &lt;code&gt;T&lt;/code&gt; がデリゲートであるかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="064b283bb793e2f13ffab06a0541e23b98aa996d" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;T&lt;/code&gt; is a function pointer.</source>
          <target state="translated">シンボルまたはタイプ &lt;code&gt;T&lt;/code&gt; が関数ポインターかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="b905a78d7eaf504e70d41bac2fa8c3c5b9742831" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;T&lt;/code&gt; is a function, a function pointer or a delegate.</source>
          <target state="translated">シンボルまたは &lt;code&gt;T&lt;/code&gt; 型が関数、関数ポインター、デリゲートのいずれであるかを検出します。</target>
        </trans-unit>
        <trans-unit id="674c29e0e2e68606be876cc14e7e5e12719c9857" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;X&lt;/code&gt; is a function. This is different that finding if a symbol is callable or satisfying &lt;code&gt;is(X == function)&lt;/code&gt;, it finds specifically if the symbol represents a normal function declaration, i.e. not a delegate or a function pointer.</source>
          <target state="translated">シンボルまたはタイプ &lt;code&gt;X&lt;/code&gt; が関数かどうかを検出します。これは、シンボルが呼び出し可能または満たす &lt;code&gt;is(X == function)&lt;/code&gt; であるかどうかを見つけるのとは異なり、シンボルが通常の関数宣言（デリゲートまたは関数ポインターではない）を表すかどうかを明確に見つけます。</target>
        </trans-unit>
        <trans-unit id="a18e26595656dc21ae2e7aa0da88d7f5461d5ee5" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a SIMD vector type.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; がSIMDベクトルタイプかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="6931021a7dd4235c4e43d4024655c4f753d99d87" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a builtin type.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; が組み込みタイプかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="7d34991bc4b88a04f0d2dab2f2dc23c8c0accb03" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a dynamic array.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; が動的配列であるかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="d70edfd1cd99f8159a2db9bad481855617e7d282" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a narrow string.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; が狭い文字列かどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="891aa6be5a4a83c8eb5f8d718cd4f28085867ec7" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a pointer.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; がポインターかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="43cee00a6b779541c408c81e19cef2a386e3e9ef" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a static array.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; が静的配列であるかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="f8ace4bf5df650564f19304d71e5d174e7eb8a72" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a string that will be autodecoded.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; が自動デコードされる文字列かどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="9c8d24db5f10b60dbce755a6acb2ee42c46f0c75" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is an aggregate type.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; が集約タイプかどうかを検出します。</target>
        </trans-unit>
        <trans-unit id="231e9d409748bcfba060f2b94a81fb91cefc2633" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is an array (static or dynamic; for associative arrays see &lt;a href=&quot;#isAssociativeArray&quot;&gt;&lt;code&gt;isAssociativeArray&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; が配列であるかどうかを検出します（静的または動的。連想配列については&lt;a href=&quot;#isAssociativeArray&quot;&gt; &lt;code&gt;isAssociativeArray&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a570e3de4ebebd703f76578c10d24c5c6e1c0a0b" translate="yes" xml:space="preserve">
          <source>Detects whether &lt;code&gt;T&lt;/code&gt; is a comparable type. Basic types and structs and classes that implement opCmp are ordering comparable.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が比較可能な型かどうかを検出します。opCmpを実装する基本型と構造体およびクラスは、順序付けが同等です。</target>
        </trans-unit>
        <trans-unit id="0cb93bae74fdeaac6fc236f4e82d733ebb774f3f" translate="yes" xml:space="preserve">
          <source>Determine If A Prepared Statement Has Been Reset</source>
          <target state="translated">作成されたステートメントがリセットされたかどうかの判断</target>
        </trans-unit>
        <trans-unit id="db966195ad1f618275836e22992513b99d0a007c" translate="yes" xml:space="preserve">
          <source>Determine If An SQL Statement Is Complete</source>
          <target state="translated">SQLステートメントが完全であるかどうかの判断</target>
        </trans-unit>
        <trans-unit id="c26787f0638276ef98ffe28bc01f913ce7cd577e" translate="yes" xml:space="preserve">
          <source>Determine backend tym bits corresponding to MOD</source>
          <target state="translated">MOD に対応するバックエンドの tym ビットを決定します。</target>
        </trans-unit>
        <trans-unit id="bd50d354bd2da7cac6650d8443206ebc8579e505" translate="yes" xml:space="preserve">
          <source>Determine cost of inlining Expression</source>
          <target state="translated">式のインライン化のコストを決定する</target>
        </trans-unit>
        <trans-unit id="d999b41f32ac29b623afade74858ca9ac9b9eb82" translate="yes" xml:space="preserve">
          <source>Determine cost of inlining function</source>
          <target state="translated">インライン機能のコストを決定</target>
        </trans-unit>
        <trans-unit id="b89883ad97d6e0f10f1d04a3963690958709c5b3" translate="yes" xml:space="preserve">
          <source>Determine file name extension as slice of input.</source>
          <target state="translated">入力のスライスとしてファイル名の拡張子を決定します。</target>
        </trans-unit>
        <trans-unit id="4888046c30ec3c0e823a22287f94fe792cc1cee3" translate="yes" xml:space="preserve">
          <source>Determine if 'this' can be implicitly converted to type 'to'.</source>
          <target state="translated">this' が暗黙のうちに 'to' 型に変換できるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="9a6a487846cd439c760b867647167d0a43c8efda" translate="yes" xml:space="preserve">
          <source>Determine if 'this' has complete base class information. This is used to detect forward references in covariant overloads.</source>
          <target state="translated">this' が完全な基底クラス情報を持っているかどうかを判断します。これは共変量オーバーロードの前方参照を検出するために使用されます。</target>
        </trans-unit>
        <trans-unit id="270a5778fa851b2c65d873ec35c4d21e8814dc94" translate="yes" xml:space="preserve">
          <source>Determine if 'this' is a base class of cd.</source>
          <target state="translated">this' が cd の基底クラスかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="2fc64d96936ef03185e0f208f0407d2013e22a77" translate="yes" xml:space="preserve">
          <source>Determine if 'this' is a base class of cd. (Actually, if it is an interface supported by cd)</source>
          <target state="translated">これ」が cd の基底クラスであるかどうかを判断します。(実際には cd がサポートするインターフェースであるかどうか)</target>
        </trans-unit>
        <trans-unit id="1aabd0fe13df1f7a6451f2d0f8cb8e6f3ac45ccb" translate="yes" xml:space="preserve">
          <source>Determine if 'this' is a base class of cd. This is used to detect circular inheritance only.</source>
          <target state="translated">'this' が cd の基底クラスであるかどうかを判定します。これは循環継承のみを検出するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f1f9c46d3d7b73954da02f8483e442b459949365" translate="yes" xml:space="preserve">
          <source>Determine if 'this' overrides fd. Return !=0 if it does.</source>
          <target state="translated">this' が fd を上書きするかどうかを判断します。上書きされている場合は !=0 を返します。</target>
        </trans-unit>
        <trans-unit id="d98d667440fab25729ff393e6749fc6bc7c803a8" translate="yes" xml:space="preserve">
          <source>Determine if &lt;code&gt;this&lt;/code&gt; has a lifetime that lasts past the destruction of &lt;code&gt;v&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; が &lt;code&gt;v&lt;/code&gt; の破棄を過ぎて続く存続期間を持っているかどうかを判別します</target>
        </trans-unit>
        <trans-unit id="9deaf7e3761824d3a560f3a002c9cfc9bbdf30a8" translate="yes" xml:space="preserve">
          <source>Determine if &lt;code&gt;this&lt;/code&gt; is available by walking up the enclosing scopes until a function is found.</source>
          <target state="translated">関数が見つかるまで囲みスコープを上に移動して、 &lt;code&gt;this&lt;/code&gt; が利用可能かどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="9e7fe93e32fcd42c1ea43251fdd4c08fd9a92cb2" translate="yes" xml:space="preserve">
          <source>Determine if Expression has any side effects.</source>
          <target state="translated">エクスプレッションに副作用があるかどうかを見極める</target>
        </trans-unit>
        <trans-unit id="f8e1b84bee581482cfd7496a29be083631594f1c" translate="yes" xml:space="preserve">
          <source>Determine if a &lt;code&gt;this&lt;/code&gt; is needed to access &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; が &lt;code&gt;d&lt;/code&gt; にアクセスするために必要かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="378e53b0c9705af12aa3d20a3dfea2de180d3964" translate="yes" xml:space="preserve">
          <source>Determine if a database is read-only</source>
          <target state="translated">データベースが読み取り専用かどうかの判断</target>
        </trans-unit>
        <trans-unit id="fad2fb7deeb5e3b2b95e75834d1bd3d75cd9c9b5" translate="yes" xml:space="preserve">
          <source>Determine if a symbol has a given &lt;a href=&quot;https://dlang.org/spec/attribute.html#uda&quot;&gt;user-defined attribute&lt;/a&gt;.</source>
          <target state="translated">シンボルに特定の&lt;a href=&quot;https://dlang.org/spec/attribute.html#uda&quot;&gt;ユーザー定義属性&lt;/a&gt;があるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="49b7cd6a540b1533843dadd565bc412266929ade" translate="yes" xml:space="preserve">
          <source>Determine if an enclosed &lt;code&gt;break&lt;/code&gt; would apply to this statement, such as if it is a loop or switch statement.</source>
          <target state="translated">ループまたはスイッチステートメントなど、囲まれた &lt;code&gt;break&lt;/code&gt; がこのステートメントに適用されるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="fe4f7fc039e88d4d60f26ff9bde9881e60eed3ee" translate="yes" xml:space="preserve">
          <source>Determine if an enclosed &lt;code&gt;continue&lt;/code&gt; would apply to this statement, such as if it is a loop statement.</source>
          <target state="translated">囲まれた &lt;code&gt;continue&lt;/code&gt; がこのステートメントに適用されるかどうかを判断します（ループステートメントなど）。</target>
        </trans-unit>
        <trans-unit id="7df92a453270a0ff75e532f40d676ac1a1b29c5c" translate="yes" xml:space="preserve">
          <source>Determine if converting 'this' to 'to' is an identity operation, a conversion to const operation, or the types aren't the same.</source>
          <target state="translated">this' から 'to' への変換が同一性操作なのか、const への変換なのか、型が同じではないのかを判断します。</target>
        </trans-unit>
        <trans-unit id="7bb85eefd3529fbadfd10c398a5f02000661a8a5" translate="yes" xml:space="preserve">
          <source>Determine if enum is a special one.</source>
          <target state="translated">enumが特殊なものかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="0be17bface398896e6fbb5e6eeae1cd6a535fed0" translate="yes" xml:space="preserve">
          <source>Determine if function is a builtin one that we can evaluate at compile time.</source>
          <target state="translated">コンパイル時に評価できる関数が組み込まれているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="98a5ca1cdf3c0ffd4595f295d0cd487fbda95cf5" translate="yes" xml:space="preserve">
          <source>Determine if function is a non-static member function that has an implicit 'this' expression.</source>
          <target state="translated">関数が暗黙の 'this' 式を持つ非静的メンバ関数であるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="ed50069e8eef8cb717d09f426afa76da9625f4d4" translate="yes" xml:space="preserve">
          <source>Determine if function needs a static frame pointer.</source>
          <target state="translated">関数がスタティックフレームポインタを必要とするかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="9ac7fdfd8c90918c14e542343cc9f9687a8d9198" translate="yes" xml:space="preserve">
          <source>Determine if function's variables are referenced by a function nested within it.</source>
          <target state="translated">関数の変数が、その中に入れ子になっている関数によって参照されているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="cfc2ffe7ef218b7a4686596124702195d226e9be" translate="yes" xml:space="preserve">
          <source>Determine if it is @safe to cast e from tfrom to tto.</source>
          <target state="translated">tfromからttoにeをキャストするのが@安全かどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="3f355a69378df7ca91f6d2fd1bab608b14d6b776" translate="yes" xml:space="preserve">
          <source>Determine if operands of binary op can be reversed to fit operator overload.</source>
          <target state="translated">演算子の過負荷に適合するように、バイナリオペランドのオペランドが反転できるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="be30b8b7412fc422b2330bdf9c0a92a776e5ce0e" translate="yes" xml:space="preserve">
          <source>Determine if p points to the rest of an identifier.</source>
          <target state="translated">pが識別子の残りの部分を指しているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="8e5281a6c7319e91a2189a41c2ef29a176db9e6a" translate="yes" xml:space="preserve">
          <source>Determine if p points to the start of an identifier.</source>
          <target state="translated">pが識別子の先頭を指しているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="316b506f6acfc382426ee0a988f166b0b6290256" translate="yes" xml:space="preserve">
          <source>Determine if parameter is a lazy array of delegates. If so, return the return type of those delegates. If not, return NULL.</source>
          <target state="translated">パラメータがデリゲートの遅延配列であるかどうかを判断します。そうであれば、それらのデリゲートの戻り値の型を返します。そうでない場合は、NULLを返します。</target>
        </trans-unit>
        <trans-unit id="cde324315a08ff1fbf62286d3c4e66f069818380" translate="yes" xml:space="preserve">
          <source>Determine if path is absolute.</source>
          <target state="translated">パスが絶対パスかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="95b5299a192aa44d7a560f633dc8b34f81756716" translate="yes" xml:space="preserve">
          <source>Determine if slot 0 of the vtbl[] is reserved for something else. For class objects, yes, this is where the ClassInfo ptr goes. For COM interfaces, no. For non-COM interfaces, yes, this is where the Interface ptr goes.</source>
          <target state="translated">vtbl[]のスロット0が他の何かのために予約されているかどうかを判断します。クラスオブジェクトの場合は、はい、ここに ClassInfo ptr が格納されます。COMインタフェースの場合は、いいえ。非COMインタフェースの場合は、はい、これはInterface ptrが入るところです。</target>
        </trans-unit>
        <trans-unit id="d6020afb22c7f7860bdfff6e4d49cee5acd1140e" translate="yes" xml:space="preserve">
          <source>Determine if slot 0 of the vtbl[] is reserved for something else. For class objects, yes, this is where the classinfo ptr goes. For COM interfaces, no. For non-COM interfaces, yes, this is where the Interface ptr goes.</source>
          <target state="translated">vtbl[]のスロット0が他の何かのために予約されているかどうかを判断します。クラスオブジェクトの場合は、はい、これはclassinfo ptrが入る場所です。COMインタフェースの場合は、noです。非COMインターフェースの場合は、yes、これはInterfaceのptrが入るところです。</target>
        </trans-unit>
        <trans-unit id="f2c73dfba48a96e7f07a8203d457d63f496cd2f8" translate="yes" xml:space="preserve">
          <source>Determine if string is a valid Identifier.</source>
          <target state="translated">文字列が有効な識別子かどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="e40c18902c112b083f5b1bec1e5285cd185cca5e" translate="yes" xml:space="preserve">
          <source>Determine if struct is POD (Plain Old Data).</source>
          <target state="translated">struct が POD (Plain Old Data)かどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="be392e8a57bd5dab891b2efd8f733e73d8ab6f6a" translate="yes" xml:space="preserve">
          <source>Determine if sym is the 'primary' destructor, that is, the most-aggregate destructor (the one that is defined as _xdtor)</source>
          <target state="translated">sym が 'プライマリ' デストラクタ、つまり最も集約的なデストラクタ (_xdtor で定義されているもの)であるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="7bff0244a23527db485143f875cdc64b133c0e61" translate="yes" xml:space="preserve">
          <source>Determine if t is a struct that has destructor.</source>
          <target state="translated">t がデストラクタを持つ構造体であるかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="2217bce6f22486903bfc5b61c828563f3e5a8066" translate="yes" xml:space="preserve">
          <source>Determine if t is a struct that has postblit.</source>
          <target state="translated">t が postblit を持つ構造体であるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="c3729f2949c876b2a955a596117188b2288de9c2" translate="yes" xml:space="preserve">
          <source>Determine if template instance is really a template function, and that template function needs to infer types from the function arguments.</source>
          <target state="translated">テンプレートインスタンスが本当にテンプレート関数であり、そのテンプレート関数が関数の引数から型を推論する必要があるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="fce7a1efc6ef0138c637fced312783604e90c9f1" translate="yes" xml:space="preserve">
          <source>Determine if the call of f, or function type or delegate type t1, has any side effects.</source>
          <target state="translated">fの呼び出し、または関数型やデリゲート型t1の呼び出しに副作用があるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="736a23aad28d59a837cc0c93fc2977a227e17fff" translate="yes" xml:space="preserve">
          <source>Determine if this symbol is only one.</source>
          <target state="translated">この記号が1つだけかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="2fc16966011442d5b9df75d427210aafdacf2a82" translate="yes" xml:space="preserve">
          <source>Determine if too expensive to inline.</source>
          <target state="translated">インラインにするには高すぎるかどうかを判断する。</target>
        </trans-unit>
        <trans-unit id="e99f6262aa8845662506231314521688e8fe7455" translate="yes" xml:space="preserve">
          <source>Determine if type t can be indexed or sliced given that it is not an aggregate with operator overloads.</source>
          <target state="translated">演算子オーバーロードを持つ集約体ではない場合に、型tがインデックス化またはスライス化できるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="c4724821c4fcf2478ae2d717f41aa91b34098b11" translate="yes" xml:space="preserve">
          <source>Determine if type t is copyable.</source>
          <target state="translated">型tがコピー可能かどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="a624a8e85f794e2b9a00a2c6869bf76e1171cc66" translate="yes" xml:space="preserve">
          <source>Determine if we need to generate an instance of ModuleInfo for this Module.</source>
          <target state="translated">このモジュールの ModuleInfo のインスタンスを生成する必要があるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="479aaf7dde32be79091b845d2f8777260b360556" translate="yes" xml:space="preserve">
          <source>Determine if zero bits need to be copied for this backend type</source>
          <target state="translated">このバックエンドタイプにゼロビットをコピーする必要があるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="24b28aafb862370e9bc9d9c3dd0d659eb032aa2f" translate="yes" xml:space="preserve">
          <source>Determine lexical level difference from &lt;code&gt;this&lt;/code&gt; to nested function &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">字句レベル差を決定し &lt;code&gt;this&lt;/code&gt; 入れ子関数に &lt;code&gt;fd&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9747c00345ecadf5845fc493b2735fcff266bb22" translate="yes" xml:space="preserve">
          <source>Determine lexical level difference from &lt;code&gt;this&lt;/code&gt; to nested function &lt;code&gt;fd&lt;/code&gt;. Issue error if &lt;code&gt;this&lt;/code&gt; cannot call &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">字句レベル差を決定し &lt;code&gt;this&lt;/code&gt; 入れ子関数に &lt;code&gt;fd&lt;/code&gt; 。 &lt;code&gt;this&lt;/code&gt; が &lt;code&gt;fd&lt;/code&gt; を呼び出せない場合は、エラーを発行します。</target>
        </trans-unit>
        <trans-unit id="ed3f29692e2dc50798983bef609614ff2b74448a" translate="yes" xml:space="preserve">
          <source>Determine mask of ways that a statement can exit.</source>
          <target state="translated">ステートメントが終了する方法のマスクを決定します。</target>
        </trans-unit>
        <trans-unit id="df7ed67f9ac0d29143623306e6d91138f580d975" translate="yes" xml:space="preserve">
          <source>Determine number of arguments, folding in tuples.</source>
          <target state="translated">引数の数を決定し、タプルで畳み込みます。</target>
        </trans-unit>
        <trans-unit id="9c1d788a86541433216b1cbe6cd800e359230a01" translate="yes" xml:space="preserve">
          <source>Determine number of entries in associative array.</source>
          <target state="translated">連想配列のエントリ数を決定します。</target>
        </trans-unit>
        <trans-unit id="eb3a7a28aadc6ac9a24522fb1facbfd2499e9ebf" translate="yes" xml:space="preserve">
          <source>Determine partial specialization order of 'this' vs g. This is very similar to TemplateDeclaration::leastAsSpecialized().</source>
          <target state="translated">これは TemplateDeclaration::lessAsSpecialized()と非常に似ています。</target>
        </trans-unit>
        <trans-unit id="07fd5119c1c381fac5e9c06cace35914173ad2f6" translate="yes" xml:space="preserve">
          <source>Determine partial specialization order of 'this' vs td2.</source>
          <target state="translated">'this'対td2の部分特殊化順序を決定する。</target>
        </trans-unit>
        <trans-unit id="e4a0c05f58058b8b1a23ad73ba5dbb12b1000809" translate="yes" xml:space="preserve">
          <source>Determine properties of an elem. EBIN binary node? EUNA unary node? EOP operator node (unary or binary)? ERTOL right to left evaluation (left to right is default) Eunambig unambiguous definition elem?</source>
          <target state="translated">エレムのプロパティを決定します。EBINバイナリノード? EUNA 単項ノード? EOP演算子ノード(単項またはバイナリ)? ERTOL 右から左への評価(左から右がデフォルト)Eunambig曖昧性のない定義elem?</target>
        </trans-unit>
        <trans-unit id="ec90df507605c588bbd907da1813711d1abfd953" translate="yes" xml:space="preserve">
          <source>Determine return style of function - whether in registers or through a hidden pointer to the caller's stack.</source>
          <target state="translated">関数の戻り値のスタイルを決定します-レジスタに格納されているか、呼び出し元のスタックへの隠れたポインタを介しているか。</target>
        </trans-unit>
        <trans-unit id="cb1ac0fdb6de60b29d0b485cddbfcca58a990ed6" translate="yes" xml:space="preserve">
          <source>Determine the cost of evaluating an operator.</source>
          <target state="translated">オペレーターの評価コストを決定する。</target>
        </trans-unit>
        <trans-unit id="2a3db1976e3076dd125c7bfa90f65d53dd96bce3" translate="yes" xml:space="preserve">
          <source>Determine the linkage attribute of the function.</source>
          <target state="translated">関数の連結属性を決定します。</target>
        </trans-unit>
        <trans-unit id="4620ec5933c4cce452d632eaafeadcbe437b16d9" translate="yes" xml:space="preserve">
          <source>Determine the right symbol to look up an associative array element.</source>
          <target state="translated">連想配列の要素を参照するための正しいシンボルを決定します。</target>
        </trans-unit>
        <trans-unit id="96ef7480200f4b221065970ed3935ac957722606" translate="yes" xml:space="preserve">
          <source>Determine the size a value of type &lt;code&gt;t&lt;/code&gt; will be when it is passed on the function parameter stack.</source>
          <target state="translated">タイプ &lt;code&gt;t&lt;/code&gt; の値が関数パラメータースタックに渡されるときのサイズを決定します。</target>
        </trans-unit>
        <trans-unit id="2ce82109b0eb275737e6626cc738e09d8757df3f" translate="yes" xml:space="preserve">
          <source>Determine things about relational operators.</source>
          <target state="translated">関係演算子に関することを決定します。</target>
        </trans-unit>
        <trans-unit id="445eda42e7c74464d44ccd1620a2befb21ab9620" translate="yes" xml:space="preserve">
          <source>Determine whether an 'out' contract is declared inside the given function or any of its overrides.</source>
          <target state="translated">指定された関数内で 'out' 契約が宣言されているかどうか、またはそのオーバーライドのいずれかが宣言されているかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="be63ebb9b04e4d8d615eca65e8535b3769ebecf8" translate="yes" xml:space="preserve">
          <source>Determine whether the given file (or directory) exists.</source>
          <target state="translated">指定されたファイル(またはディレクトリ)が存在するかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="bfdac9bb32932094f4b0f47419554e0bafa2389e" translate="yes" xml:space="preserve">
          <source>Determine which Module a Dsymbol is in, as far as access rights go.</source>
          <target state="translated">アクセス権の範囲内で、Dsymbolがどのモジュールにあるかを決定します。</target>
        </trans-unit>
        <trans-unit id="723620b57dc29a2943525ce74b11aab59b3b93b8" translate="yes" xml:space="preserve">
          <source>Determine which Module a Dsymbol is in.</source>
          <target state="translated">あるsymbolがどのモジュールにあるかを決定します。</target>
        </trans-unit>
        <trans-unit id="3834ecc3aa1dad92da7b3401ec6af20392309d9e" translate="yes" xml:space="preserve">
          <source>Determines additional argument types for makeTupleForeach.</source>
          <target state="translated">makeTupleForeachの追加引数の型を決定します。</target>
        </trans-unit>
        <trans-unit id="cbda00b791b63020eacb383579930a0158c3cc64" translate="yes" xml:space="preserve">
          <source>Determines if &lt;code&gt;f&lt;/code&gt; is a function that requires a context pointer.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; がコンテキストポインタを必要とする関数かどうかを判別します。</target>
        </trans-unit>
        <trans-unit id="2a8678bb77c2872e0adc65687e74251cccabf377" translate="yes" xml:space="preserve">
          <source>Determines if a TemplateInstance will need a nested generation of the TemplateDeclaration. Sets enclosing property if so, and returns != 0;</source>
          <target state="translated">TemplateInstanceがTemplateDeclarationのネストされた生成を必要とするかどうかを判断します。必要な場合は囲い込みプロパティを設定し、 !=0 を返します。</target>
        </trans-unit>
        <trans-unit id="c10a7e5581a17107fb508dd7d48da75fd37b44b8" translate="yes" xml:space="preserve">
          <source>Determines if x is &amp;plusmn;&amp;infin;.</source>
          <target state="translated">xが&amp;plusmn;&amp;infin;かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="92eac75e8cbc6049ad92262b93532f4eee6c60d1" translate="yes" xml:space="preserve">
          <source>Determines if x is NaN.</source>
          <target state="translated">x が NaN であるかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="af8200a58cdb4cd837802e4514a7145ed07fb505" translate="yes" xml:space="preserve">
          <source>Determines if x is finite.</source>
          <target state="translated">xが有限かどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="eaf6a6dd33d39ca2f85c693e18a10fe4ec497406" translate="yes" xml:space="preserve">
          <source>Determines if x is normalized.</source>
          <target state="translated">x が正規化されているかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="1530bf626bae0f80da40842bbc7b8e58caf37370" translate="yes" xml:space="preserve">
          <source>Determines if x is subnormal.</source>
          <target state="translated">x が亜正規値かどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="03a2ac6420b6f24c17fedf5d0c29dfeaa05227a0" translate="yes" xml:space="preserve">
          <source>Determines the behavior for when an error is detected.</source>
          <target state="translated">エラーが検出されたときの動作を決定します。</target>
        </trans-unit>
        <trans-unit id="291cdf30bdc4d2ceba2bd008be64b599519e85cc" translate="yes" xml:space="preserve">
          <source>Determines the boundary between valid and invalid addresses. Status codes above this number will be returned as-is, status codes below will be returned as EmailStatusCode.valid. Thus the calling program can simply look for EmailStatusCode.valid if it is only interested in whether an address is valid or not. The errorLevel will determine how &quot;picky&quot; isEmail() is about the address.  If omitted or passed as EmailStatusCode.none then isEmail() will not perform any finer grained error checking and an address is either considered valid or not. Email status code will either be EmailStatusCode.valid or EmailStatusCode.error.</source>
          <target state="translated">有効なアドレスと無効なアドレスの境界を決定します。この番号より上のステータスコードはそのまま返され、下のステータスコードはEmailStatusCode.validとして返されます。したがって、アドレスが有効かどうかだけに興味がある場合、呼び出し側のプログラムは単にEmailStatusCode.validを探すことができます。errorLevelは、isEmail()がアドレスについてどれだけ「気難しい」かを決定する。省略されているか、EmailStatusCode.noneとして渡された場合、isEmail()はより細かいエラーチェックを行わず、アドレスは有効かどうかのどちらかとみなされます。電子メールのステータスコードは、EmailStatusCode.validかEmailStatusCode.errorのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="b08723c8d029e0808aad92158ef8f7cd9d5154cb" translate="yes" xml:space="preserve">
          <source>Determines the path to the current user's preferred command interpreter.</source>
          <target state="translated">現在のユーザーの希望するコマンドインタプリタへのパスを決定します。</target>
        </trans-unit>
        <trans-unit id="9bd7ecbe5ae3fa4321dce2a69d3c85c5d1fb3689" translate="yes" xml:space="preserve">
          <source>Determines the return type of makeTupleForeach.</source>
          <target state="translated">makeTupleForeachの戻り値の型を決定します。</target>
        </trans-unit>
        <trans-unit id="8a2c0e82a4c82cf25e46b967e56429fa643e7957" translate="yes" xml:space="preserve">
          <source>Determines what kind of variadic parameters function has.</source>
          <target state="translated">変分パラメータ関数がどのような種類のパラメータを持っているかを決定します。</target>
        </trans-unit>
        <trans-unit id="d994ce5a973e87c8a98d2fc2edd4cd117663f111" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;T&lt;/code&gt; has its own context pointer. &lt;code&gt;T&lt;/code&gt; must be either &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, or &lt;code&gt;union&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が独自のコンテキストポインターを持っているかどうかを判断します。 &lt;code&gt;T&lt;/code&gt; は、 &lt;code&gt;class&lt;/code&gt; 、 &lt;code&gt;struct&lt;/code&gt; 、または &lt;code&gt;union&lt;/code&gt; 体でなければなりません。</target>
        </trans-unit>
        <trans-unit id="79dcffbdac2699b8d56325ec6cc56e1b3aa1778e" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;T&lt;/code&gt; is a class nested inside another class and that &lt;code&gt;T.outer&lt;/code&gt; is the implicit reference to the outer class (i.e. &lt;code&gt;outer&lt;/code&gt; has not been used as a field or method name)</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が別のクラス内にネストされたクラスであり、その &lt;code&gt;T.outer&lt;/code&gt; が外部クラスへの暗黙の参照であるかどうかを決定します（つまり、 &lt;code&gt;outer&lt;/code&gt; はフィールドまたはメソッド名として使用されていません）</target>
        </trans-unit>
        <trans-unit id="528e814e2b44f7d34f9985d0baf099b0e6fea047" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;T&lt;/code&gt; or any of its representation types have a context pointer.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; またはその表現型のいずれかにコンテキストポインターがあるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="01ed6a908c8924bcb05f62a2cc826cfe4cd7bb23" translate="yes" xml:space="preserve">
          <source>Determines whether a path is absolute or not.</source>
          <target state="translated">パスが絶対パスかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="dcfeda9a254a089d6294c953e0491b65b7ef276d" translate="yes" xml:space="preserve">
          <source>Determines whether a path starts at a root directory.</source>
          <target state="translated">パスがルートディレクトリから始まるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="f4edc6bd929f6c3bbc4b5e9c6a10714bafa42804" translate="yes" xml:space="preserve">
          <source>Determines whether a symbol represents a module or package (Used as a helper for is(type == module) and is(type == package))</source>
          <target state="translated">シンボルがモジュールを表すかパッケージを表すかを判定します (is(type ==module)と is(type ==package)のヘルパーとして使われます)</target>
        </trans-unit>
        <trans-unit id="1c5c488163b93892028eaf2415c0fd1650901e2a" translate="yes" xml:space="preserve">
          <source>Determines whether the element for which the given predicate is true should be included in the resulting range (&lt;code&gt;No.openRight&lt;/code&gt;), or not (&lt;code&gt;Yes.openRight&lt;/code&gt;).</source>
          <target state="translated">与えられた述語が真である要素が結果の範囲に含まれるべきか（ &lt;code&gt;No.openRight&lt;/code&gt; ）、含まれないべきか（ &lt;code&gt;Yes.openRight&lt;/code&gt; ）を決定します。</target>
        </trans-unit>
        <trans-unit id="543cbcdd8099f7a0b4e482266421c33c837a5831" translate="yes" xml:space="preserve">
          <source>Determines whether the function type &lt;code&gt;F&lt;/code&gt; is covariant with &lt;code&gt;G&lt;/code&gt;, i.e., functions of the type &lt;code&gt;F&lt;/code&gt; can override ones of the type &lt;code&gt;G&lt;/code&gt;.</source>
          <target state="translated">関数型か否かを判定する &lt;code&gt;F&lt;/code&gt; が持つ共変である &lt;code&gt;G&lt;/code&gt; 、すなわち、タイプの関数 &lt;code&gt;F&lt;/code&gt; は、タイプのもので上書きすることができ &lt;code&gt;G&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="857bda4d26bbce771887b7d005e412fd90efa18b" translate="yes" xml:space="preserve">
          <source>Determines whether the given character is a directory separator.</source>
          <target state="translated">与えられた文字がディレクトリの区切り文字であるかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="d36b5cd65a97672003a0ec9584d46cf9f414ebf5" translate="yes" xml:space="preserve">
          <source>Determines whether the type &lt;code&gt;S&lt;/code&gt; can be copied. If a type cannot be copied, then code such as &lt;code&gt;MyStruct x; auto y = x;&lt;/code&gt; will fail to compile. Copying for structs can be disabled by using &lt;code&gt;@disable this(this)&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;S&lt;/code&gt; をコピーできるかどうかを決定します。タイプをコピーできない場合は、 &lt;code&gt;MyStruct x; auto y = x;&lt;/code&gt; などのコード。自動y = x; コンパイルに失敗します。構造体のコピーは、 &lt;code&gt;@disable this(this)&lt;/code&gt; を使用して無効にできます。</target>
        </trans-unit>
        <trans-unit id="061572172fa8b502ac5a30678cb22158f90cac0c" translate="yes" xml:space="preserve">
          <source>Determines whether to sort the index by the elements they refer to.</source>
          <target state="translated">インデックスを参照する要素でソートするかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="c3376a9770679682419b8a2b1d090a087ba2468b" translate="yes" xml:space="preserve">
          <source>Devanagari</source>
          <target state="translated">Devanagari</target>
        </trans-unit>
        <trans-unit id="f1d0b00583cf18e4f46c6f6a49928b18ac563eb8" translate="yes" xml:space="preserve">
          <source>Devanagari Extended</source>
          <target state="translated">デヴァナガリー拡張</target>
        </trans-unit>
        <trans-unit id="f2b6aad897453084e39c5b6cb348101052d037d6" translate="yes" xml:space="preserve">
          <source>Device control 1</source>
          <target state="translated">デバイス制御 1</target>
        </trans-unit>
        <trans-unit id="c59c390789ea42b9e83bd6e9a087f7e7e19830c2" translate="yes" xml:space="preserve">
          <source>Device control 2</source>
          <target state="translated">デバイス制御 2</target>
        </trans-unit>
        <trans-unit id="03d032304208a286ab590e6e0412ba2f32473099" translate="yes" xml:space="preserve">
          <source>Device control 3</source>
          <target state="translated">デバイス制御 3</target>
        </trans-unit>
        <trans-unit id="99e66b66a02a1ee7e99342652890cd1ca85ebf30" translate="yes" xml:space="preserve">
          <source>Device control 4</source>
          <target state="translated">デバイス制御 4</target>
        </trans-unit>
        <trans-unit id="dd45a760f4e395483865648f31fd4527b653a0e6" translate="yes" xml:space="preserve">
          <source>Dg &lt;code&gt;dg&lt;/code&gt;</source>
          <target state="translated">Dg &lt;code&gt;dg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df416cb44acdc7ff67e4ace824b92780b273ed0c" translate="yes" xml:space="preserve">
          <source>Diacritic</source>
          <target state="translated">Diacritic</target>
        </trans-unit>
        <trans-unit id="2af2a931f99b70f76b1b6ecd5b006a779a09475c" translate="yes" xml:space="preserve">
          <source>Diagnosed incompatibilities are:</source>
          <target state="translated">診断された不適合は</target>
        </trans-unit>
        <trans-unit id="e3846175845cdb013139d3c78211ff1af2ada56b" translate="yes" xml:space="preserve">
          <source>Diagnostic reporter which prints the diagnostic messages to stderr.</source>
          <target state="translated">診断メッセージを標準エラーに出力する診断レポーター。</target>
        </trans-unit>
        <trans-unit id="48b17d41a887daf56fbe376e53c33e4334d2b37f" translate="yes" xml:space="preserve">
          <source>DiagnosticReporter &lt;code&gt;diagnosticReporter&lt;/code&gt;</source>
          <target state="translated">DiagnosticReporter &lt;code&gt;diagnosticReporter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ca05e4035af5bf6a8530fc91b666a55254f9cf3" translate="yes" xml:space="preserve">
          <source>DiagnosticReporting &lt;code&gt;useDeprecated&lt;/code&gt;</source>
          <target state="translated">DiagnosticReporting &lt;code&gt;useDeprecated&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abfa2f54c9cbb66bf41f52c2e1c10ea7cf7fc1c0" translate="yes" xml:space="preserve">
          <source>Dictates directory spanning policy for dirEntries (see below).</source>
          <target state="translated">dirEntriesのディレクトリスパニングポリシーを指定します(下記参照)。</target>
        </trans-unit>
        <trans-unit id="e6576da21cb057e550894290bd7fc9e18fb25046" translate="yes" xml:space="preserve">
          <source>Dictates how iteration in a &lt;a href=&quot;#zip&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#lockstep&quot;&gt;&lt;code&gt;lockstep&lt;/code&gt;&lt;/a&gt; should stop. By default stop at the end of the shortest of all ranges.</source>
          <target state="translated">&lt;a href=&quot;#zip&quot;&gt; &lt;code&gt;zip&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#lockstep&quot;&gt; &lt;code&gt;lockstep&lt;/code&gt; &lt;/a&gt;反復の停止方法を指示します。デフォルトでは、すべての範囲の最短の端で停止します。</target>
        </trans-unit>
        <trans-unit id="5868229c99f342304e88e7ab77113b5de8a9b34d" translate="yes" xml:space="preserve">
          <source>Differences from the Kernighan-Ritchie allocator:</source>
          <target state="translated">カーニガン・リッチー・アロケータとの違い。</target>
        </trans-unit>
        <trans-unit id="00d0138195f4b82f95ed866a592bbdfe8acc72f4" translate="yes" xml:space="preserve">
          <source>Different compiler settings, optimization settings, and inlining settings can affect opportunities for constant folding, therefore the results of floating point calculations may differ depending on those settings.</source>
          <target state="translated">コンパイラの設定、最適化の設定、およびインラインの設定が異なると、定数折り畳みの機会に影響を与えるため、浮動小数点計算の結果はそれらの設定によって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="e0f5b6944c2cb56e5841bec8be19999cd4103ab2" translate="yes" xml:space="preserve">
          <source>Different data locks for a single share</source>
          <target state="translated">1つの共有に対して異なるデータロック</target>
        </trans-unit>
        <trans-unit id="e8b45432740c6a6295216b76e3f34067af96d73b" translate="yes" xml:space="preserve">
          <source>Different from other AttribDeclaration subclasses, include() call requires the completion of addMember and setScope phases.</source>
          <target state="translated">他のAttribDeclarationサブクラスとは異なり、include()呼び出しはaddMemberとsetScopeフェーズの完了を必要とします。</target>
        </trans-unit>
        <trans-unit id="f5c695c1d733025cbaa13f8eaba5273501ba483e" translate="yes" xml:space="preserve">
          <source>Different lock access types</source>
          <target state="translated">異なるロックアクセスタイプ</target>
        </trans-unit>
        <trans-unit id="38c26e54dd81b5beb41841e49c13ad7a31bbab29" translate="yes" xml:space="preserve">
          <source>Different signals can be added to a class by naming the mixins.</source>
          <target state="translated">ミキシンに名前を付けることで、異なるシグナルをクラスに追加することができます。</target>
        </trans-unit>
        <trans-unit id="41d219b83461231cfa58beb6fe7013a0c39674fb" translate="yes" xml:space="preserve">
          <source>Digamma function</source>
          <target state="translated">ダイガンマ機能</target>
        </trans-unit>
        <trans-unit id="47fdd58bee4dc86df2b978107102a22b9c44345b" translate="yes" xml:space="preserve">
          <source>Digest</source>
          <target state="translated">Digest</target>
        </trans-unit>
        <trans-unit id="e202731645b5903590a1721aec671ead010434dd" translate="yes" xml:space="preserve">
          <source>Digest with IE flavour</source>
          <target state="translated">IE フレーバーでダイジェスト</target>
        </trans-unit>
        <trans-unit id="347acdba548588bbd29c93b643717c5b619fc9dc" translate="yes" xml:space="preserve">
          <source>DigestType!H &lt;strong id=&quot;finish&quot;&gt;finish&lt;/strong&gt;();</source>
          <target state="translated">DigestType！H &lt;strong id=&quot;finish&quot;&gt;仕上げ&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="7e055596d1a7dd6729a4ea844af3804a3000405b" translate="yes" xml:space="preserve">
          <source>DigestType!Hash &lt;strong id=&quot;digest&quot;&gt;digest&lt;/strong&gt;(Hash, Range)(auto ref Range range)</source>
          <target state="translated">DigestType！ハッシュ&lt;strong id=&quot;digest&quot;&gt;ダイジェスト&lt;/strong&gt;（ハッシュ、範囲）（自動参照範囲の範囲）</target>
        </trans-unit>
        <trans-unit id="e3729bbf766b7afa198569d6497eb40e04441ade" translate="yes" xml:space="preserve">
          <source>DigestType!Hash &lt;strong id=&quot;digest&quot;&gt;digest&lt;/strong&gt;(Hash, T...)(scope const T data)</source>
          <target state="translated">DigestType！Hash &lt;strong id=&quot;digest&quot;&gt;ダイジェスト&lt;/strong&gt;（Hash、T ...）（scope const T data）</target>
        </trans-unit>
        <trans-unit id="a62b295138ccc435d1119df6f358d56908f084eb" translate="yes" xml:space="preserve">
          <source>Digesting single bits (as opposed to bytes) is not implemented. This will be done as another template constraint helper (hasBitDigesting!T) and an additional interface (BitDigest)</source>
          <target state="translated">(バイトではなく)シングルビットのダイジェストは実装されていません。これは、別のテンプレート制約ヘルパー(hasBitDigesting!T)と追加インターフェース(BitDigest)として行われます。</target>
        </trans-unit>
        <trans-unit id="bb3d49bc8e14b2dd94a418374cf376aa4e3689a1" translate="yes" xml:space="preserve">
          <source>Digests do not work in CTFE</source>
          <target state="translated">ダイジェストはCTFEでは機能しません</target>
        </trans-unit>
        <trans-unit id="3d267bf6104bc48ff02fae4aa1086207aeaf2f15" translate="yes" xml:space="preserve">
          <source>Digital Mars D (DMD)</source>
          <target state="translated">デジタルマーズD(DMD</target>
        </trans-unit>
        <trans-unit id="860dec87a36aab409b5c7737ad322775f24b3873" translate="yes" xml:space="preserve">
          <source>Digital Mars's MAKE program can be notified that a program can accept long command lines via environment variables by preceding the rule line for the program with a *.</source>
          <target state="translated">Digital MarsのMAKEプログラムは、プログラムのルール行の前に*を付けることで、環境変数を介して長いコマンドラインを受け付けることができることを通知することができます。</target>
        </trans-unit>
        <trans-unit id="e2f6cb0f659da17abd54f5cdfc673931b59818ec" translate="yes" xml:space="preserve">
          <source>DigitalMars C runtime</source>
          <target state="translated">デジタルマーズCランタイム</target>
        </trans-unit>
        <trans-unit id="62cefd338233e3a8f7eedd473ea4c0190b889a59" translate="yes" xml:space="preserve">
          <source>DigitalMars Cpp runtime</source>
          <target state="translated">デジタルマーズCppランタイム</target>
        </trans-unit>
        <trans-unit id="0ceb1ec77714195da0fe4bcb3a48e59dc70dbfce" translate="yes" xml:space="preserve">
          <source>Dimension i.e. the number of native words backing this &lt;code&gt;BitArray&lt;/code&gt;.  Technically, this is the length of the underlying array storing bits, which is equal to &lt;code&gt;ceil(length / (size_t.sizeof * 8))&lt;/code&gt;, as bits are packed into &lt;code&gt;size_t&lt;/code&gt; units.</source>
          <target state="translated">ディメンション、つまりこの &lt;code&gt;BitArray&lt;/code&gt; を支えるネイティブワードの数。技術的には、これはビットを格納する基になる配列の長さであり、ビットは &lt;code&gt;size_t&lt;/code&gt; 単位にパックされるため、 &lt;code&gt;ceil(length / (size_t.sizeof * 8))&lt;/code&gt; と等しくなります。</target>
        </trans-unit>
        <trans-unit id="3927412ea64e80f5a0cbe309d0aa4c42ecdc9065" translate="yes" xml:space="preserve">
          <source>Dingbats</source>
          <target state="translated">Dingbats</target>
        </trans-unit>
        <trans-unit id="759e0d815ae585fb8bac59addeabec46e631136b" translate="yes" xml:space="preserve">
          <source>DirEntry &lt;code&gt;de&lt;/code&gt;</source>
          <target state="translated">DirEntry &lt;code&gt;de&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="622c520ae1561df1c0e646d62ea55fd11213a490" translate="yes" xml:space="preserve">
          <source>Direction &lt;code&gt;dir&lt;/code&gt;</source>
          <target state="translated">方向 &lt;code&gt;dir&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1029544ae8b46287a52a74595462c217cf60a5a9" translate="yes" xml:space="preserve">
          <source>Directories</source>
          <target state="translated">Directories</target>
        </trans-unit>
        <trans-unit id="7f5cf49d5f14355579c48870159720b7e4cb8104" translate="yes" xml:space="preserve">
          <source>Directory matching callback called after the file (chunk) was downloaded, or skipped</source>
          <target state="translated">ファイル (チャンク)がダウンロードされた後に呼び出される、またはスキップされた後に呼び出されるディレクトリマッチングコールバック</target>
        </trans-unit>
        <trans-unit id="62a1901037b83e3013b41d8cdfaeaf3b97e8ec0c" translate="yes" xml:space="preserve">
          <source>Directory matching callback called before downloading of an individual file (chunk) started</source>
          <target state="translated">個々のファイル(チャンク)のダウンロードが開始される前に呼び出されるディレクトリマッチングコールバック</target>
        </trans-unit>
        <trans-unit id="c8ba486351bc5bc8f536c3684d649f6bba19fb09" translate="yes" xml:space="preserve">
          <source>Directs the call to either one of the &lt;code&gt;buckets&lt;/code&gt; allocators.</source>
          <target state="translated">呼び出しを &lt;code&gt;buckets&lt;/code&gt; アロケータのいずれかに転送します。</target>
        </trans-unit>
        <trans-unit id="673cf6ae82497c0bfb4b0257312c6ce0dff96771" translate="yes" xml:space="preserve">
          <source>Disable (mask) specific hardware exceptions. Multiple exceptions may be ORed together.</source>
          <target state="translated">特定のハードウェア例外を無効化(マスク)します。複数の例外を一緒にORすることができます。</target>
        </trans-unit>
        <trans-unit id="03145a3cc292c23bd2c39300c95f0daea5c2a86b" translate="yes" xml:space="preserve">
          <source>Disable GC collection cycles while that thread is active with &lt;a href=&quot;#disable&quot;&gt;&lt;code&gt;disable&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#enable&quot;&gt;&lt;code&gt;enable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#disable&quot;&gt; &lt;code&gt;disable&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#enable&quot;&gt; &lt;code&gt;enable&lt;/code&gt; &lt;/a&gt;でスレッドがアクティブな間にGC収集サイクルを無効にします。</target>
        </trans-unit>
        <trans-unit id="fc4db9a1df0ab57c1963989136455f78a06edbf2" translate="yes" xml:space="preserve">
          <source>Disable the Nagle algorithm for send coalescing</source>
          <target state="translated">送信合体のためのNagleアルゴリズムを無効にする</target>
        </trans-unit>
        <trans-unit id="0f18d15c436642bb1b6dc9007150b2e55250d957" translate="yes" xml:space="preserve">
          <source>Disables automatic garbage collections performed to minimize the process footprint. Collections may continue to occur in instances where the implementation deems necessary for correct program behavior, such as during an out of memory condition. This function is reentrant, but enable must be called once for each call to disable.</source>
          <target state="translated">プロセスフットプリントを最小化するために実行される自動ガベージコレクションを無効にします。コレクションは、メモリ切れ状態など、実装がプログラムの正しい動作のために必要と判断した場合、継続して発生する可能性があります。この関数はリエントラントですが、無効にするには呼び出しごとに enable を 1 回呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="4381e662a49e6eff28e950bf9b63b9397e0ff422" translate="yes" xml:space="preserve">
          <source>Disables sends and/or receives.</source>
          <target state="translated">送受信を無効にします。</target>
        </trans-unit>
        <trans-unit id="9a028268b53825265b1f96bf957d18423681846f" translate="yes" xml:space="preserve">
          <source>Disabling Array Bounds Checking</source>
          <target state="translated">配列境界のチェックを無効にする</target>
        </trans-unit>
        <trans-unit id="92134947ba1f6ead2a7886f3c52a180f24e38c29" translate="yes" xml:space="preserve">
          <source>Disabling Default Struct Construction</source>
          <target state="translated">デフォルトの構造体構築を無効にする</target>
        </trans-unit>
        <trans-unit id="2403aba30d80ac06cb16c5482b584bcc2fb8556f" translate="yes" xml:space="preserve">
          <source>Disabling exception will follow these rules:</source>
          <target state="translated">例外を無効にすることは、これらのルールに従います。</target>
        </trans-unit>
        <trans-unit id="45b418f2ce93897cacff432a6407313616f0effc" translate="yes" xml:space="preserve">
          <source>Disabling struct postblit makes the object not copyable.</source>
          <target state="translated">postblit構造体を無効にすると、オブジェクトをコピーできなくなります。</target>
        </trans-unit>
        <trans-unit id="3dde1f923bce15988a141f95ecfb94c07dd719af" translate="yes" xml:space="preserve">
          <source>Disallow &lt;code&gt;@system&lt;/code&gt; asm statements.</source>
          <target state="translated">&lt;code&gt;@system&lt;/code&gt; asmステートメントを禁止します。</target>
        </trans-unit>
        <trans-unit id="a58e3b7d7ec9e61c853624d42770760218e02be9" translate="yes" xml:space="preserve">
          <source>Disallowed Floating Point Transformations</source>
          <target state="translated">禁止されている浮動小数点変換</target>
        </trans-unit>
        <trans-unit id="95ae8922ce7ae02dfbd1162984b468693f6a563b" translate="yes" xml:space="preserve">
          <source>Disallowing overlapping makes it possible for more aggressive parallel code optimizations than possible with the serial semantics of C.</source>
          <target state="translated">オーバーラップを禁止することで、C のシリアルセマンティクスで可能なよりも積極的な並列コードの最適化が可能になります。</target>
        </trans-unit>
        <trans-unit id="3b145cd26efec2371fbaebd6e59da0288cdb70a4" translate="yes" xml:space="preserve">
          <source>Disclaimer: The random number generators and API provided in this module are not designed to be cryptographically secure, and are therefore unsuitable for cryptographic or security-related purposes such as generating authentication tokens or network sequence numbers. For such needs, please use a reputable cryptographic library instead.</source>
          <target state="translated">免責事項:このモジュールで提供される乱数生成器とAPIは暗号的に安全なように設計されていないため、認証トークンやネットワークシーケンス番号の生成など、暗号やセキュリティ関連の目的には適していません。そのようなニーズには、代わりに信頼できる暗号ライブラリを使用してください。</target>
        </trans-unit>
        <trans-unit id="07ce2fc6e101a8eec909001f12bbd0963c513e2d" translate="yes" xml:space="preserve">
          <source>Disconnect all the slots.</source>
          <target state="translated">すべてのスロットを外します。</target>
        </trans-unit>
        <trans-unit id="696c96f0d428c1560921179cb1efd5002041994a" translate="yes" xml:space="preserve">
          <source>Discriminant for which kind of initializer</source>
          <target state="translated">どの種類のイニシャライザのための識別器</target>
        </trans-unit>
        <trans-unit id="3fd00c73c6b0c2fdb2f52597de39a96356605fab" translate="yes" xml:space="preserve">
          <source>Discriminated unions and algebraic types.</source>
          <target state="translated">識別された組合と代数型。</target>
        </trans-unit>
        <trans-unit id="0d4a9ae8f73ae60ae256d80c2349812a114d7d32" translate="yes" xml:space="preserve">
          <source>Dispatches allocations (and deallocations) between two allocators (&lt;code&gt;SmallAllocator&lt;/code&gt; and &lt;code&gt;LargeAllocator&lt;/code&gt;) depending on the size allocated, as follows. All allocations smaller than or equal to &lt;code&gt;threshold&lt;/code&gt; will be dispatched to &lt;code&gt;SmallAllocator&lt;/code&gt;. The others will go to &lt;code&gt;LargeAllocator&lt;/code&gt;.</source>
          <target state="translated">次のように、割り当てられたサイズに応じて、2つのアロケータ（ &lt;code&gt;SmallAllocator&lt;/code&gt; と &lt;code&gt;LargeAllocator&lt;/code&gt; ）間の割り当て（および割り当て解除）をディスパッチします。 &lt;code&gt;threshold&lt;/code&gt; 以下のすべての割り当てが &lt;code&gt;SmallAllocator&lt;/code&gt; にディスパッチされます。他は &lt;code&gt;LargeAllocator&lt;/code&gt; に行きます。</target>
        </trans-unit>
        <trans-unit id="878767dea09dd65d9e99925d1bbf35b9ead4d939" translate="yes" xml:space="preserve">
          <source>Dispose</source>
          <target state="translated">Dispose</target>
        </trans-unit>
        <trans-unit id="86bcb9360235671e21ca43c426414e6c95361431" translate="yes" xml:space="preserve">
          <source>Dissecting the SS</source>
          <target state="translated">SSの解剖</target>
        </trans-unit>
        <trans-unit id="eba01cc696856200a8e961304fb348e230176b24" translate="yes" xml:space="preserve">
          <source>Distinguishes between a Mailbox as defined by RFC 5321 and an addr-spec as defined by RFC 5322. Depending on the context, either can be regarded as a valid email address.</source>
          <target state="translated">RFC 5321 で定義されている Mailbox と RFC 5322 で定義されている addr-spec を区別します。コンテキストに応じて、どちらも有効なメールアドレスとみなすことができます。</target>
        </trans-unit>
        <trans-unit id="b89e0561b370a9d9defb798c326cac4cbabab55c" translate="yes" xml:space="preserve">
          <source>Distributed under the &lt;a href=&quot;http://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0の&lt;/a&gt;下で配布されます。</target>
        </trans-unit>
        <trans-unit id="2ace81f9d94387dd1a13fbe82f4f33df38b3641a" translate="yes" xml:space="preserve">
          <source>Distributed under the &lt;a href=&quot;http://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0&lt;/a&gt;. (See accompanying file LICENSE)</source>
          <target state="translated">&lt;a href=&quot;http://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0の&lt;/a&gt;下で配布されます。（添付ファイルLICENSEを参照）</target>
        </trans-unit>
        <trans-unit id="66bad9be669ed560e9a54fc66baf3603e98d93ee" translate="yes" xml:space="preserve">
          <source>Distributed under the &lt;a href=&quot;https://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License1.0の&lt;/a&gt;下で配布されます。</target>
        </trans-unit>
        <trans-unit id="7859de8d4a829c3bf0f9aefeae6a9f597e4258ab" translate="yes" xml:space="preserve">
          <source>Distributed under the &lt;a href=&quot;https://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0&lt;/a&gt;. (See accompanying file LICENSE)</source>
          <target state="translated">&lt;a href=&quot;https://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License1.0の&lt;/a&gt;下で配布されます。（添付ファイルLICENSEを参照）</target>
        </trans-unit>
        <trans-unit id="ba891575bb154c2b907934064ce520b42404b90b" translate="yes" xml:space="preserve">
          <source>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at &lt;a href=&quot;http://%20boost.org/LICENSE_1_0.txt&quot;&gt;boost.org/LICENSE_1_0.txt&lt;/a&gt;).</source>
          <target state="translated">Boost Software License、Version 1.0の下で配布されます。（添付ファイルLICENSE_1_0.txtを参照するか、&lt;a href=&quot;http://%20boost.org/LICENSE_1_0.txt&quot;&gt;boost.org&lt;/a&gt; /LICENSE_1_0.txtにコピーしてください）。</target>
        </trans-unit>
        <trans-unit id="6ab74f49d93f10ad089666bb7d00d1c70aa92f62" translate="yes" xml:space="preserve">
          <source>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at &lt;a href=&quot;http://boost.org/LICENSE_1_0.txt&quot;&gt;boost.org/LICENSE_1_0.txt&lt;/a&gt;).</source>
          <target state="translated">Boost Software License、Version 1.0の下で配布されます。（添付ファイルLICENSE_1_0.txtを参照するか、&lt;a href=&quot;http://boost.org/LICENSE_1_0.txt&quot;&gt;boost.org&lt;/a&gt; /LICENSE_1_0.txtにコピーしてください）。</target>
        </trans-unit>
        <trans-unit id="7dd8ab5f4ba23f62268005f9a218258f47a3175d" translate="yes" xml:space="preserve">
          <source>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at &lt;a href=&quot;https://boost.org/LICENSE_1_0.txt&quot;&gt;boost.org/LICENSE_1_0.txt&lt;/a&gt;).</source>
          <target state="translated">Boostソフトウェアライセンスバージョン1.0で配布されます。（添付ファイルLICENSE_1_0.txtを参照するか、&lt;a href=&quot;https://boost.org/LICENSE_1_0.txt&quot;&gt;boost.org&lt;/a&gt; / LICENSE_1_0.txtにコピーしてください）。</target>
        </trans-unit>
        <trans-unit id="0a2d39b8d8ded48a2849b3ea1a1dcbcd9d0e8dbe" translate="yes" xml:space="preserve">
          <source>Ditto</source>
          <target state="translated">Ditto</target>
        </trans-unit>
        <trans-unit id="a816314180f7274708cea2cfeb5b4bf0a2c3d833" translate="yes" xml:space="preserve">
          <source>Divide two complex floating point numbers, x / y.</source>
          <target state="translated">2つの複素浮動小数点数、x/yを割ります。</target>
        </trans-unit>
        <trans-unit id="5d913c09c6d3d954ae89f4b03b5517d485d50649" translate="yes" xml:space="preserve">
          <source>Divide-and-conquer division</source>
          <target state="translated">分割統治</target>
        </trans-unit>
        <trans-unit id="b1eff6af42848eda7c48b15c9d38a5f1bae8908c" translate="yes" xml:space="preserve">
          <source>Divides allocation sizes in discrete buckets and uses an array of allocators, one per bucket, to satisfy requests.</source>
          <target state="translated">割り当てサイズを個別のバケットに分割し、リクエストを満たすためにバケットごとに1つのアロケータの配列を使用します。</target>
        </trans-unit>
        <trans-unit id="0a36c5ce128a07ea9566a1fde171f2200aeda2ed" translate="yes" xml:space="preserve">
          <source>Divides two durations.</source>
          <target state="translated">2つの持続時間を分割します。</target>
        </trans-unit>
        <trans-unit id="d59184e9b1f7fb2d487b23c37a8d0769b2b80f6e" translate="yes" xml:space="preserve">
          <source>Dmitry Olshansky</source>
          <target state="translated">ドミトリー・オルシャンスキー</target>
        </trans-unit>
        <trans-unit id="76dadc05139fc7b9bb55ebcce06ee30f3a6d580d" translate="yes" xml:space="preserve">
          <source>Dmitry Olshansky,  API and utility constructs are modeled after the original &lt;code&gt;std.regex&lt;/code&gt; by Walter Bright and Andrei Alexandrescu.</source>
          <target state="translated">Dmitry Olshansky、APIおよびユーティリティ構成は、Walter BrightおよびAndrei Alexandrescuによるオリジナルの &lt;code&gt;std.regex&lt;/code&gt; をモデルにしています。</target>
        </trans-unit>
        <trans-unit id="4bd083b2b3e187d89788105aa92f56163ce3b9bb" translate="yes" xml:space="preserve">
          <source>Do Statement</source>
          <target state="translated">ステートメントを行う</target>
        </trans-unit>
        <trans-unit id="afa88e9df2329969dfa74d520fd827ee0b4bb118" translate="yes" xml:space="preserve">
          <source>Do access check for member of this class, this class being the type of the 'this' pointer used to access smember. Returns true if the member is not accessible.</source>
          <target state="translated">このクラスのメンバのアクセスチェックを行います。このクラスは smember へのアクセスに使用される 'this' ポインタの型です。メンバにアクセスできない場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="8ced80b974abadd59803f313239db93fc65a5aef" translate="yes" xml:space="preserve">
          <source>Do an explicit cast. Assume that the 'this' expression does not have any indirections.</source>
          <target state="translated">明示的なキャストを行います。this' 式には間接的な要素がないと仮定します。</target>
        </trans-unit>
        <trans-unit id="8cf5f7f93eb415898103ca45b53223874a94e907" translate="yes" xml:space="preserve">
          <source>Do an implicit cast. Issue error if it can't be done.</source>
          <target state="translated">暗黙のキャストを行う。できない場合はエラーを出す。</target>
        </trans-unit>
        <trans-unit id="49ad1ee743ebd2812afa41df4f17b41e99db9e93" translate="yes" xml:space="preserve">
          <source>Do assignment to an array. p[0 .. count] = value;</source>
          <target state="translated">配列への代入を行います。</target>
        </trans-unit>
        <trans-unit id="2342a7521a0c9b6a4e6ba9b2d19061a24febfe06" translate="yes" xml:space="preserve">
          <source>Do byte or word alignment as necessary. Align sizes of 0, as we may not know array sizes yet.</source>
          <target state="translated">必要に応じてバイトやワードのアラインメントを行います。配列のサイズがまだわからないかもしれないので、0のサイズを整列させます。</target>
        </trans-unit>
        <trans-unit id="f3c57d19eb68dddb9c7bee678b606c3b2b7c954b" translate="yes" xml:space="preserve">
          <source>Do char promotions. char -&amp;gt; dchar wchar -&amp;gt; dchar dchar -&amp;gt; dchar</source>
          <target state="translated">charプロモーションを行います。char-&amp;gt; dchar wchar-&amp;gt; dchar dchar-&amp;gt; dchar</target>
        </trans-unit>
        <trans-unit id="d7efa78739a0a812ec969fd8c04cc8a58f93414c" translate="yes" xml:space="preserve">
          <source>Do construction of an array. ti[count] p = value;</source>
          <target state="translated">配列の構築を行う。</target>
        </trans-unit>
        <trans-unit id="b160013f0a885bfb3ed7bf9da930f4023f015430" translate="yes" xml:space="preserve">
          <source>Do integral promotions (convertchk). Don't convert</source>
          <target state="translated">インテグラルプロモーションを行う(コンバージョンチケ 変換しない</target>
        </trans-unit>
        <trans-unit id="bc9a100899d36229e4bd36b9da54ca644bcf9adb" translate="yes" xml:space="preserve">
          <source>Do mangling for C++ linkage. This is the POSIX side of the implementation. It exports two functions to C++, &lt;code&gt;toCppMangleItanium&lt;/code&gt; and &lt;code&gt;cppTypeInfoMangleItanium&lt;/code&gt;.</source>
          <target state="translated">C ++リンケージのマングリングを行います。これは実装のPOSIX側です。2つの関数、C ++に &lt;code&gt;toCppMangleItanium&lt;/code&gt; と &lt;code&gt;cppTypeInfoMangleItanium&lt;/code&gt; をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="48f2007f86e365b8ec9f6adbb696ec1982a609ae" translate="yes" xml:space="preserve">
          <source>Do not add or subtract an offset to a pointer such that the result points outside of the bounds of the garbage collected object originally allocated.</source>
          <target state="translated">結果が元々割り当てられていたガベージコレクションオブジェクトの境界外を指すようなポインタへのオフセットを加算または減算しないでください。</target>
        </trans-unit>
        <trans-unit id="81b778ac215108ff623547eace59a4ae9bb0b6fe" translate="yes" xml:space="preserve">
          <source>Do not align references or pointers that were allocated using &lt;a href=&quot;expression#NewExpression&quot;&gt;&lt;i&gt;NewExpression&lt;/i&gt;&lt;/a&gt; on boundaries that are not a multiple of &lt;code&gt;size_t&lt;/code&gt;. The garbage collector assumes that pointers and references to GC allocated objects will be on &lt;code&gt;size_t&lt;/code&gt; byte boundaries.</source>
          <target state="translated">&lt;code&gt;size_t&lt;/code&gt; の倍数ではない境界で&lt;a href=&quot;expression#NewExpression&quot;&gt;&lt;i&gt;NewExpression&lt;/i&gt;&lt;/a&gt;を使用して割り当てられた参照またはポインタを整列させないでください。ガベージコレクターは、GCで割り当てられたオブジェクトへのポインターと参照が &lt;code&gt;size_t&lt;/code&gt; バイト境界にあると想定しています。</target>
        </trans-unit>
        <trans-unit id="caca04bc995d0c6eb8fc2349201d477b42dc5917" translate="yes" xml:space="preserve">
          <source>Do not attempt to resume normal execution after an</source>
          <target state="translated">の後に通常の実行を再開しようとしないでください。</target>
        </trans-unit>
        <trans-unit id="6dae81830baa5344537fe42e7999203b567a0ce3" translate="yes" xml:space="preserve">
          <source>Do not auto-initialize the object</source>
          <target state="translated">オブジェクトを自動初期化しない</target>
        </trans-unit>
        <trans-unit id="77b2c3ee1b3b37ff4e1d1f86da4e93a8c9f01993" translate="yes" xml:space="preserve">
          <source>Do not call this from inside a callback handler e.g. &lt;code&gt;onReceive&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;onReceive&lt;/code&gt; などのコールバックハンドラ内からこれを呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="3f58790833caa6a65a159ebf3ca17750973f0db4" translate="yes" xml:space="preserve">
          <source>Do not confuse function types with function pointer types; function types are usually used for compile-time reflection purposes.</source>
          <target state="translated">関数型と関数ポインタ型を混同しないでください。</target>
        </trans-unit>
        <trans-unit id="63e963b5f29077511474456af6492bdde1d38506" translate="yes" xml:space="preserve">
          <source>Do not confuse this with &lt;a href=&quot;std_variant#Variant&quot;&gt;&lt;code&gt;std.variant.Variant&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これを&lt;a href=&quot;std_variant#Variant&quot;&gt; &lt;code&gt;std.variant.Variant&lt;/code&gt; &lt;/a&gt;と混同しないでください。</target>
        </trans-unit>
        <trans-unit id="a3dd442e9ddf9950a928b468f82f2b3da4fe83b1" translate="yes" xml:space="preserve">
          <source>Do not confuse this with &lt;a href=&quot;std_variant#Variant&quot;&gt;&lt;code&gt;std.variant.Variant&lt;/code&gt;&lt;/a&gt;. The type of this property is &lt;a href=&quot;#Variant&quot;&gt;`std.uuid.UUID.Variant`&lt;/a&gt;.</source>
          <target state="translated">これを&lt;a href=&quot;std_variant#Variant&quot;&gt; &lt;code&gt;std.variant.Variant&lt;/code&gt; &lt;/a&gt;と混同しないでください。このプロパティのタイプは&lt;a href=&quot;#Variant&quot;&gt;`std.uuid.UUID.Variant`&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="29b494027d2c32b0eb23f6f091dc23e2a05787b4" translate="yes" xml:space="preserve">
          <source>Do not decode</source>
          <target state="translated">デコードしないでください</target>
        </trans-unit>
        <trans-unit id="73679fcab18429a879497ec92e92f528b9054737" translate="yes" xml:space="preserve">
          <source>Do not depend on the ordering of pointers:</source>
          <target state="translated">ポインタの順序に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="15214b550edaf6868002baab7a36d86b63fdbd52" translate="yes" xml:space="preserve">
          <source>Do not erase the endOfOptions separator from args</source>
          <target state="translated">args の endOfOptions の区切り文字を消去しないでください。</target>
        </trans-unit>
        <trans-unit id="ed54b943220a06fc33fbd41e84ae8d683cb32f84" translate="yes" xml:space="preserve">
          <source>Do not have pointers in a struct instance that point back to the same instance. The trouble with this is if the instance gets moved in memory, the pointer will point back to where it came from, with likely disastrous results.</source>
          <target state="translated">構造体インスタンス内で、同じインスタンスを指すポインタを持たないようにします。この問題は、インスタンスがメモリ内で移動した場合にポインタが元の場所に戻ってしまい、悲惨な結果になる可能性があるということです。</target>
        </trans-unit>
        <trans-unit id="9503045deb2713c12f10681d5a82c5e6dc3786b4" translate="yes" xml:space="preserve">
          <source>Do not have side effects in either</source>
          <target state="translated">どちらにも副作用はありません。</target>
        </trans-unit>
        <trans-unit id="a2207daa5237f7950ee2a24d7bad6178ad0c4eac" translate="yes" xml:space="preserve">
          <source>Do not hold references to GC allocated data in such threads.</source>
          <target state="translated">このようなスレッドでは、GC に割り当てられたデータへの参照を保持しないでください。</target>
        </trans-unit>
        <trans-unit id="75112ebefdc8bc7ab72ca5983be8d10945931a0b" translate="yes" xml:space="preserve">
          <source>Do not indirectly call exported or public member functions within a class invariant, as this can result in infinite recursion.</source>
          <target state="translated">クラス不変型の中で、エクスポートされた関数やパブリック・メンバ関数を間接的に呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="e1775975c4acb65a912112e3f08e4b4d3508929c" translate="yes" xml:space="preserve">
          <source>Do not indirectly call exported or public member functions within a struct invariant, as this can result in infinite recursion.</source>
          <target state="translated">構造体の不変型内で、エクスポートされた関数やパブリック・メンバ関数を間接的に呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="265e329368392df0768a84da95edc465b4f53d17" translate="yes" xml:space="preserve">
          <source>Do not misalign pointers if those pointers may point into the GC heap, such as:</source>
          <target state="translated">ポインタがGCヒープを指す可能性がある場合は、ポインタの位置を間違えないようにしてください。</target>
        </trans-unit>
        <trans-unit id="ae28e6f2bf434f35cfb2723801a49eb3b07894f4" translate="yes" xml:space="preserve">
          <source>Do not move this memory block on collect.</source>
          <target state="translated">コレクト時にこのメモリブロックを移動しないでください。</target>
        </trans-unit>
        <trans-unit id="252d61d2c9aaae3fa2855b13f421208eb1adfbab" translate="yes" xml:space="preserve">
          <source>Do not pass or return structs with no fields of non-zero size to &lt;code&gt;extern (C)&lt;/code&gt; functions. According to C11 6.7.2.1p8 this is undefined behavior.</source>
          <target state="translated">サイズがゼロ以外のフィールドのない構造体を &lt;code&gt;extern (C)&lt;/code&gt; 関数に渡したり、返したりしないでください。C11 6.7.2.1p8によると、これは未定義の動作です。</target>
        </trans-unit>
        <trans-unit id="545f474f77e15c3644ea6498632a63e633d190ac" translate="yes" xml:space="preserve">
          <source>Do not route</source>
          <target state="translated">路線変更をしないでください</target>
        </trans-unit>
        <trans-unit id="dc0a76e6e9b0c6af0cc401f08c6346c5684c9a82" translate="yes" xml:space="preserve">
          <source>Do not scan through this block on collect.</source>
          <target state="translated">コレクトでこのブロックをスキャンしないでください。</target>
        </trans-unit>
        <trans-unit id="ee5948436f95ed6ca0018fa3d5ef4d60f9e4e270" translate="yes" xml:space="preserve">
          <source>Do not store into pointers values that may point into the garbage collected heap:</source>
          <target state="translated">ガベージコレクションされたヒープを指す可能性のある値をポインタに格納しないでください。</target>
        </trans-unit>
        <trans-unit id="4694aebab008c009fd2ade5c78c132624b4e3994" translate="yes" xml:space="preserve">
          <source>Do not store magic values into pointers, other than &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">マジック値を &lt;code&gt;null&lt;/code&gt; 以外のポインタに格納しないでください。</target>
        </trans-unit>
        <trans-unit id="1baaebf042ac12ef4083353631588e08e8ab3c7a" translate="yes" xml:space="preserve">
          <source>Do not store pointers into non-pointer variables using casts and other tricks.</source>
          <target state="translated">キャストなどのトリックを使ってポインタをポインタではない変数に格納しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="5518272732f9db527429d7b720c46d2567a0aeeb" translate="yes" xml:space="preserve">
          <source>Do not take advantage of alignment of pointers to store bit flags in the low order bits:</source>
          <target state="translated">低次ビットにビットフラグを格納するためにポインタのアライメントを利用しないでください。</target>
        </trans-unit>
        <trans-unit id="b58865d06e7074ca80b26d076607e9c3e9f0a800" translate="yes" xml:space="preserve">
          <source>Do not use built-in appending (i.e. &lt;code&gt;~=&lt;/code&gt;) on the original array until you are done with the appender, because subsequent calls to the appender will reallocate the array data without those appends.</source>
          <target state="translated">アペンダーを使い終わるまで、元の配列に組み込みのアペンディング（つまり &lt;code&gt;~=&lt;/code&gt; ）を使用しないでください。その後のアペンダーの呼び出しでは、アペンダーなしで配列データが再割り当てされます。</target>
        </trans-unit>
        <trans-unit id="f43c209d1eced41c1951e6622431f16dd6a92327" translate="yes" xml:space="preserve">
          <source>Do not use byte-by-byte memory copies to copy pointer values. This may result in intermediate conditions where there is not a valid pointer, and if the gc pauses the thread in such a condition, it can corrupt memory. Most implementations of &lt;code&gt;memcpy()&lt;/code&gt; will work since the internal implementation of it does the copy in aligned chunks greater than or equal to the pointer size, but since this kind of implementation is not guaranteed by the C standard, use &lt;code&gt;memcpy()&lt;/code&gt; only with extreme caution.</source>
          <target state="translated">バイトごとのメモリコピーを使用してポインタ値をコピーしないでください。これにより、有効なポインターがない中間条件が発生する可能性があり、GCがそのような条件でスレッドを一時停止すると、メモリが破損する可能性があります。 &lt;code&gt;memcpy()&lt;/code&gt; のほとんどの実装は、ポインターのサイズ以上の整列されたチャンクでコピーを行うので機能しますが、この種類の実装はC標準で保証されていないため、極端な場合のみ &lt;code&gt;memcpy()&lt;/code&gt; を使用してください注意。</target>
        </trans-unit>
        <trans-unit id="8fef94bc41deb275037bea8264e5ce1e16ff6601" translate="yes" xml:space="preserve">
          <source>Do not use pointer values to compute a hash function. A copying garbage collector can arbitrarily move objects around in memory, thus invalidating the computed hash value.</source>
          <target state="translated">ハッシュ関数の計算にポインタ値を使用しないでください。コピーガベージコレクタは、メモリ内でオブジェクトを任意に移動させることができ、計算されたハッシュ値を無効にします。</target>
        </trans-unit>
        <trans-unit id="0fcdfeaf8d861d5921d7ae20a6aa8706d48e2502" translate="yes" xml:space="preserve">
          <source>Do not use the xor trick to swap two pointer values.</source>
          <target state="translated">2つのポインタの値を交換するためにxorトリックを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="9450a2a7f4c92d925d6ca19a49b85936cbddd9f4" translate="yes" xml:space="preserve">
          <source>Do not write pointer values out to disk and read them back in again.</source>
          <target state="translated">ポインタの値をディスクに書き出して、再度読み込まないようにしてください。</target>
        </trans-unit>
        <trans-unit id="47e4f0210c15edd10b3e8dfae2c365e9ea492c46" translate="yes" xml:space="preserve">
          <source>Do not xor pointers with other values, like the xor pointer linked list trick used in C.</source>
          <target state="translated">C で使われている xor ポインタリンクリストのトリックのように、ポインタを他の値と xor しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="44cce4fe17e5532d7d769dc78edb2ce4bfb6d3c6" translate="yes" xml:space="preserve">
          <source>Do same thing as &lt;a href=&quot;#makeTransTable&quot;&gt;&lt;code&gt;makeTransTable&lt;/code&gt;&lt;/a&gt; but allocate the translation table on the GC heap.</source>
          <target state="translated">&lt;a href=&quot;#makeTransTable&quot;&gt; &lt;code&gt;makeTransTable&lt;/code&gt; &lt;/a&gt;と同じことを行いますが、変換テーブルをGCヒープに割り当てます。</target>
        </trans-unit>
        <trans-unit id="c4aa62dd02825b617ff934fd70f3fd8af2008444" translate="yes" xml:space="preserve">
          <source>Do syntax copy of an array of Dsymbol's.</source>
          <target state="translated">Dsymbol の配列の構文コピーを行います。</target>
        </trans-unit>
        <trans-unit id="f7a07128b5b38f3860b8f68acb34a0025bf24ca2" translate="yes" xml:space="preserve">
          <source>Do syntax copy of an array of Ensure's.</source>
          <target state="translated">エンシュアの配列の構文コピーを行います。</target>
        </trans-unit>
        <trans-unit id="19da1895e2f7ae31622d6bf9481e29416f91cc3f" translate="yes" xml:space="preserve">
          <source>Do syntax copy of an array of Statement's.</source>
          <target state="translated">ステートメントの配列の構文コピーを行います。</target>
        </trans-unit>
        <trans-unit id="8b79f267da0581c6563cba569790a61e0f1e62f8" translate="yes" xml:space="preserve">
          <source>Do while statements implement simple loops.</source>
          <target state="translated">Do while ステートメントは単純なループを実装しています。</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="e5cf7df46ec6959b440885b9ae093cdb071a4cdc" translate="yes" xml:space="preserve">
          <source>Documentation Generator</source>
          <target state="translated">ドキュメント作成</target>
        </trans-unit>
        <trans-unit id="2b55770552f067992cb153f9604359fff22e6d9a" translate="yes" xml:space="preserve">
          <source>Documentation may contain lists. Start an ordered list with a number followed by a period:</source>
          <target state="translated">ドキュメントにはリストが含まれている場合があります。順序付きリストは、数字とピリオドの後にピリオドを付けて開始します。</target>
        </trans-unit>
        <trans-unit id="926e5491f782345c5ebce88e5158033ebc55572c" translate="yes" xml:space="preserve">
          <source>Documentation may include a section of quoted material by prefixing each line of the section with a &lt;code&gt;&amp;gt;&lt;/code&gt;. Quotes may include headings, lists, embedded code, etc.</source>
          <target state="translated">ドキュメントには、セクションの各行の前に &lt;code&gt;&amp;gt;&lt;/code&gt; を付けることにより、引用資料のセクションを含めることができます。引用には、見出し、リスト、埋め込みコードなどが含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="fdb5a714ba58a87c2a7f2811a3ac36b770a2efdc" translate="yes" xml:space="preserve">
          <source>Documentation may link to other documentation or to a URL. There are four styles of links:</source>
          <target state="translated">ドキュメントは、他のドキュメントにリンクしたり、URLにリンクしたりすることができます。リンクには4つのスタイルがあります。</target>
        </trans-unit>
        <trans-unit id="6c528ec8a539858f2d0895db65fe8bac577f548f" translate="yes" xml:space="preserve">
          <source>Documented Unittests</source>
          <target state="translated">ドキュメント化されたユニテスト</target>
        </trans-unit>
        <trans-unit id="bb7221f475015c63e0d052b4eb162c85818223c5" translate="yes" xml:space="preserve">
          <source>Documented unittests allow the developer to deliver code examples to the user, while at the same time automatically verifying that the examples are valid. This avoids the frequent problem of having outdated documentation for some piece of code.</source>
          <target state="translated">ドキュメント化されたユニテストにより、開発者はコード例をユーザに提供することができ、同時にその例が有効であることを自動的に検証することができます。これにより、コードの一部に古いドキュメントがあるという頻繁に起こる問題を回避することができます。</target>
        </trans-unit>
        <trans-unit id="22157d9a8327c6cba20cc721270ec0fb147058d0" translate="yes" xml:space="preserve">
          <source>Does *not* do a deep copy.</source>
          <target state="translated">深いコピーはしない。</target>
        </trans-unit>
        <trans-unit id="7880c3cdd7abd23aa1dab064c815cf8a6efc9dbd" translate="yes" xml:space="preserve">
          <source>Does array assignment (not construction) from another lvalue array of the same element type. Handles overlapping copies.</source>
          <target state="translated">同じ要素型の別のlvalue配列から配列の代入を行います(構築ではありません)。重複コピーを処理します。</target>
        </trans-unit>
        <trans-unit id="bb326be1508b3558c9df2c127c6767a185c8e15f" translate="yes" xml:space="preserve">
          <source>Does array assignment (not construction) from another rvalue array of the same element type.</source>
          <target state="translated">同じ要素型の別のrvalue配列から配列の代入を行います(構築ではありません)。</target>
        </trans-unit>
        <trans-unit id="d7b5e205d736eaa89aab0a993c404218452acec2" translate="yes" xml:space="preserve">
          <source>Does array initialization (not assignment) from another array of the same element type.</source>
          <target state="translated">同じ要素型の別の配列から配列の初期化を行います(代入ではありません)。</target>
        </trans-unit>
        <trans-unit id="1c341d6163b42492bc175f361de7f7e046b501b5" translate="yes" xml:space="preserve">
          <source>Does array initialization (not assignment) from another array of the same element type. ti is the element type.</source>
          <target state="translated">同じ要素型の別の配列から配列の初期化を行います(代入ではありません).</target>
        </trans-unit>
        <trans-unit id="4f48305c318afd30929190596a37b1449341dc48" translate="yes" xml:space="preserve">
          <source>Does basic case-insensitive comparison of &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt;. This function uses simpler comparison rule thus achieving better performance than &lt;a href=&quot;#icmp&quot;&gt;&lt;code&gt;icmp&lt;/code&gt;&lt;/a&gt;. However keep in mind the warning below.</source>
          <target state="translated">&lt;code&gt;r1&lt;/code&gt; と &lt;code&gt;r2&lt;/code&gt; の基本的な大文字と小文字を区別しない比較を行います。この関数はより単純な比較規則を使用するため、&lt;a href=&quot;#icmp&quot;&gt; &lt;code&gt;icmp&lt;/code&gt; &lt;/a&gt;よりも優れたパフォーマンスを実現します。ただし、以下の警告に留意してください。</target>
        </trans-unit>
        <trans-unit id="1541f9d0a1b7d7addfa9e467393388bf45331786" translate="yes" xml:space="preserve">
          <source>Does case insensitive comparison of &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt;. Follows the rules of full case-folding mapping. This includes matching as equal german &amp;szlig; with &quot;ss&quot; and other 1:M &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; mappings unlike &lt;a href=&quot;#sicmp&quot;&gt;&lt;code&gt;sicmp&lt;/code&gt;&lt;/a&gt;. The cost of &lt;code&gt;icmp&lt;/code&gt; being pedantically correct is slightly worse performance.</source>
          <target state="translated">&lt;code&gt;r1&lt;/code&gt; と &lt;code&gt;r2&lt;/code&gt; の大文字と小文字を区別しない比較を行います。完全なケースフォールディングマッピングのルールに従います。これには、&lt;a href=&quot;#sicmp&quot;&gt; &lt;code&gt;sicmp&lt;/code&gt; &lt;/a&gt;とは異なり、 &quot;ss&quot;と他の1：M &lt;a href=&quot;#Code%20point&quot;&gt;コードポイント&lt;/a&gt;マッピングとの等しいドイツ語&amp;szlig;としてのマッチングが含まれます。 &lt;code&gt;icmp&lt;/code&gt; が明確に正しいことによるコストは、パフォーマンスがわずかに低下します。</target>
        </trans-unit>
        <trans-unit id="d227fda4244c2852330a21da3953b3ada54ec0a1" translate="yes" xml:space="preserve">
          <source>Does it have an x87 FPU on-chip?</source>
          <target state="translated">x87のFPUをオンチップで搭載しているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="83fba42bfa5a2255055c2e608e063da748b0f4c1" translate="yes" xml:space="preserve">
          <source>Does not allocate memory if it does not throw.</source>
          <target state="translated">スローしない場合はメモリを確保しません。</target>
        </trans-unit>
        <trans-unit id="f5f60bc07826ab5afe9362b839574ccde8f21899" translate="yes" xml:space="preserve">
          <source>Does not allocate memory.</source>
          <target state="translated">メモリを割り当てません。</target>
        </trans-unit>
        <trans-unit id="48413fe4541dc1ee71e5310b4e9c41a5627c01cd" translate="yes" xml:space="preserve">
          <source>Does not allocate memory. Characters in UTF-8 or UTF-16 format that cannot be decoded are treated as &lt;a href=&quot;std_utf#replacementDchar&quot;&gt;&lt;code&gt;std.utf.replacementDchar&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">メモリを割り当てません。デコードできないUTF-8またはUTF-16形式の文字は&lt;a href=&quot;std_utf#replacementDchar&quot;&gt; &lt;code&gt;std.utf.replacementDchar&lt;/code&gt; &lt;/a&gt;として扱われます。</target>
        </trans-unit>
        <trans-unit id="dce2a3d4cb0e63320ae9bb41db9cf5f239c6203b" translate="yes" xml:space="preserve">
          <source>Does not resolve symbolic links.</source>
          <target state="translated">シンボリックリンクを解決しません。</target>
        </trans-unit>
        <trans-unit id="c740830c192296775600e4b476a2a4cd6515e7a8" translate="yes" xml:space="preserve">
          <source>Does not return on success (the current process will have been replaced). Returns -1 on failure with no indication of the underlying error.</source>
          <target state="translated">成功しても戻りません(現在のプロセスは置き換えられています)。失敗した場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="f67d427a021b49d829af064322fcd164d0d520fe" translate="yes" xml:space="preserve">
          <source>Does not support encryption.</source>
          <target state="translated">暗号化には対応していません。</target>
        </trans-unit>
        <trans-unit id="57647b73e9c332f36e028fa36bff18cf326e39ad" translate="yes" xml:space="preserve">
          <source>Does not throw on invalid UTF; such is simply passed unchanged to the output.</source>
          <target state="translated">無効な UTF をスローしません。</target>
        </trans-unit>
        <trans-unit id="5e5419f6b87cc49ac2507077d7548ae9d6c064c5" translate="yes" xml:space="preserve">
          <source>Does not use GC if &lt;code&gt;useReplacementDchar&lt;/code&gt; is set to &lt;code&gt;UseReplacementDchar.no&lt;/code&gt;</source>
          <target state="translated">場合GCを使用しない &lt;code&gt;useReplacementDchar&lt;/code&gt; がに設定されている &lt;code&gt;UseReplacementDchar.no&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37786dd9ad405e5b54d26d2bbe52bc54cf2418f3" translate="yes" xml:space="preserve">
          <source>Does not work correctly for signed intergal types and value &lt;code&gt;Num&lt;/code&gt;.min.</source>
          <target state="translated">署名intergal型と値のために正常に動作しません &lt;code&gt;Num&lt;/code&gt; .min。</target>
        </trans-unit>
        <trans-unit id="56a999eccf87855de475f9001b77eaa33bebcc42" translate="yes" xml:space="preserve">
          <source>Does not work with &lt;code&gt;@safe&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;@safe&lt;/code&gt; 関数では機能しません。</target>
        </trans-unit>
        <trans-unit id="2068fc4e744b5cb3b339dae23375f8492cf64188" translate="yes" xml:space="preserve">
          <source>Does not work with case insensitive strings where the mapping of tolower and toupper is not 1:1.</source>
          <target state="translated">tolowerとtoupperのマッピングが1:1ではない場合、大文字小文字を区別しない文字列では動作しません。</target>
        </trans-unit>
        <trans-unit id="234e510cc603f08075d818203c3bd0a16b71e801" translate="yes" xml:space="preserve">
          <source>Does not yet verify that put takes scope parameters.</source>
          <target state="translated">put がスコープパラメータを取ることをまだ検証していません。</target>
        </trans-unit>
        <trans-unit id="b970936a7b0239e08cb29e7cc368f29721b67295" translate="yes" xml:space="preserve">
          <source>Does nothing if the directory specified by &lt;code&gt;pathname&lt;/code&gt; already exists.</source>
          <target state="translated">&lt;code&gt;pathname&lt;/code&gt; 指定されたディレクトリがすでに存在する場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="d14a56d6d7f137ebcec5fe42cb450c31b78d2d48" translate="yes" xml:space="preserve">
          <source>Does semantic analysis on function bodies.</source>
          <target state="translated">機能体の意味解析を行います。</target>
        </trans-unit>
        <trans-unit id="6fd2735e2d40ea539042c5be41e2050d6af1c881" translate="yes" xml:space="preserve">
          <source>Does semantic analysis on initializers and members of aggregates.</source>
          <target state="translated">集約体のイニシャライザとメンバの意味分析を行います。</target>
        </trans-unit>
        <trans-unit id="7426f971998f7162437e092ad05d77db524d6ce4" translate="yes" xml:space="preserve">
          <source>Does semantic analysis on the public face of declarations.</source>
          <target state="translated">宣言の公開面のセマンティック分析を行う。</target>
        </trans-unit>
        <trans-unit id="5e7b66a0efda11b1a40d7f052dad77b19269e8c9" translate="yes" xml:space="preserve">
          <source>Does string s[] start with a URL?</source>
          <target state="translated">文字列s[]はURLで始まるのか?</target>
        </trans-unit>
        <trans-unit id="38868c2e83fb9b3a3cc81b391b385a673621f4ac" translate="yes" xml:space="preserve">
          <source>Does string s[] start with an email address?</source>
          <target state="translated">文字列s[]はメールアドレスで始まる?</target>
        </trans-unit>
        <trans-unit id="ee8fd059691124d36d3b2bf9c557a5b6992ef466" translate="yes" xml:space="preserve">
          <source>Does symbol go into data segment? Includes extern variables.</source>
          <target state="translated">シンボルはデータセグメントに入るか?外部変数を含む。</target>
        </trans-unit>
        <trans-unit id="6ea873f55def1751953aed891c21e1fd70621fb3" translate="yes" xml:space="preserve">
          <source>Does symbol go into thread local storage?</source>
          <target state="translated">シンボルはスレッドのローカルストレージに入るのか?</target>
        </trans-unit>
        <trans-unit id="5f4245209de5aaf56cccd41911b16c063a174fee" translate="yes" xml:space="preserve">
          <source>Does this CPU perform better on AMD K7 code than PentiumPro..Core2 code?</source>
          <target state="translated">このCPUは、AMD K7のコードではPentiumPro.Core2のコードよりも性能が良いのでしょうか?</target>
        </trans-unit>
        <trans-unit id="f93413c51da306bad6613f0c3dfb9485692526d8" translate="yes" xml:space="preserve">
          <source>Does this CPU perform better on Pentium I code than Pentium Pro code?</source>
          <target state="translated">このCPUはPentium ProコードよりもPentium Iコードの方が性能が良いのでしょうか?</target>
        </trans-unit>
        <trans-unit id="6beb25bfcb2d456e092bdcbcd4df3c0a4af2770f" translate="yes" xml:space="preserve">
          <source>Does this CPU perform better on Pentium4 code than PentiumPro..Core2 code?</source>
          <target state="translated">このCPUはPentiumPro...Core2よりもPentium4の方が性能が良いのでしょうか?</target>
        </trans-unit>
        <trans-unit id="303dfd80025298b45e565827e0f7acdfb67e7adf" translate="yes" xml:space="preserve">
          <source>Does this expression statically evaluate to a boolean 'result' (true or false)?</source>
          <target state="translated">この式は静的にブール値の'result'に評価されますか(trueかfalseか)?</target>
        </trans-unit>
        <trans-unit id="20fe1fb5a82d9f8293a5f142d362ade49a423c3b" translate="yes" xml:space="preserve">
          <source>Does this generator have a fixed range? (true).</source>
          <target state="translated">このジェネレーターは固定範囲を持っていますか?(true)とします。</target>
        </trans-unit>
        <trans-unit id="c45ddb9e91921f4fb3ca128e8d434af1f9c44043" translate="yes" xml:space="preserve">
          <source>Does this statement end with a return statement?</source>
          <target state="translated">この文はreturn文で終わるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="602cff563bc9c1a99154cbe14ef76827c7b8bd0a" translate="yes" xml:space="preserve">
          <source>Doesn't run semantic() on the returned type.</source>
          <target state="translated">返された型に対して semantic()を実行しません。</target>
        </trans-unit>
        <trans-unit id="65bae41fbf2bab9d6c517a5161d6f4e5c84b2f99" translate="yes" xml:space="preserve">
          <source>Doing a finer grained specialization than template partial specialization allows for.</source>
          <target state="translated">テンプレート部分特化よりも細かい特化をすることで可能になる</target>
        </trans-unit>
        <trans-unit id="7bf1581b3d79aef115fa984692a0f57e9b6391b0" translate="yes" xml:space="preserve">
          <source>Dollar Operator Overloading</source>
          <target state="translated">ドル演算子のオーバーロード</target>
        </trans-unit>
        <trans-unit id="421fb059a6bf248f5571209ef5cbebb58961f8d1" translate="yes" xml:space="preserve">
          <source>Domain X</source>
          <target state="translated">ドメインエックス</target>
        </trans-unit>
        <trans-unit id="5c300ea4f935146cff3d8c2e417b69ad4286f5b3" translate="yes" xml:space="preserve">
          <source>Domain literal is missing its closing bracket</source>
          <target state="translated">ドメインリテラルの閉じ括弧がありません</target>
        </trans-unit>
        <trans-unit id="36a62fa1476d63a0f159cc1bcd228125da0bc26a" translate="yes" xml:space="preserve">
          <source>Dominic Sayers &amp;lt;dominic@sayers.cc&amp;gt;, Jacob Carlborg</source>
          <target state="translated">Dominic Sayers &amp;lt;dominic@sayers.cc&amp;gt;、Jacob Carlborg</target>
        </trans-unit>
        <trans-unit id="6b8429a95f0eac205580ed220d9c90696f62766d" translate="yes" xml:space="preserve">
          <source>Domino Tiles</source>
          <target state="translated">ドミノタイル</target>
        </trans-unit>
        <trans-unit id="fa09a73d5a2559992d8df50b14b202ba40b84989" translate="yes" xml:space="preserve">
          <source>Don Clugston</source>
          <target state="translated">ドン・クラグストン</target>
        </trans-unit>
        <trans-unit id="9d0b26b787f9f3785eca5ba583a0874a32c4dfc6" translate="yes" xml:space="preserve">
          <source>Don Clugston, Sean Kelly, Walter Bright, Alex R&amp;oslash;nne Petersen, Thomas Stuart Bockman</source>
          <target state="translated">Don Clugston、Sean Kelly、Walter Bright、AlexR&amp;oslash;nnePetersen、Thomas Stuart Bockman</target>
        </trans-unit>
        <trans-unit id="f0d862ef147328c2bdab8e47b939a7df16dbcb18" translate="yes" xml:space="preserve">
          <source>Don Clugston, Tomas Lindquist Olsen &amp;lt;tomas@famolsen.dk&amp;gt;</source>
          <target state="translated">Don Clugston、Tomas Lindquist Olsen &amp;lt;tomas@famolsen.dk&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a588f29267f5677ec0874779bc43b4529049e908" translate="yes" xml:space="preserve">
          <source>Don't allow access, but don't generate an error</source>
          <target state="translated">アクセスを許可しないが、エラーを発生させない</target>
        </trans-unit>
        <trans-unit id="f5bedabd34c7a0b41762124d3fa68898fb512506" translate="yes" xml:space="preserve">
          <source>DosFileTime &lt;code&gt;dft&lt;/code&gt;</source>
          <target state="translated">DosFileTime &lt;code&gt;dft&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9f917733056998a71b923495fed0aa216ff5bfd" translate="yes" xml:space="preserve">
          <source>DotExpFlag bit flags</source>
          <target state="translated">ドットExpフラグビットフラグ</target>
        </trans-unit>
        <trans-unit id="29452f8d098cfc522610ae95cc37fe7fabe7176a" translate="yes" xml:space="preserve">
          <source>DotIdExp &lt;strong id=&quot;typeDotIdExp&quot;&gt;typeDotIdExp&lt;/strong&gt;(ref const Loc loc, Type type, Identifier ident);</source>
          <target state="translated">DotIdExp &lt;strong id=&quot;typeDotIdExp&quot;&gt;typeDotIdExp&lt;/strong&gt;（ref const Loc loc、Type type、Identifier ident）;</target>
        </trans-unit>
        <trans-unit id="f769255e26cd75e595da28495b1c1b062915615a" translate="yes" xml:space="preserve">
          <source>DotIdentifier</source>
          <target state="translated">DotIdentifier</target>
        </trans-unit>
        <trans-unit id="d02f752b78fa27af256bc9c9891df221a3c43cc3" translate="yes" xml:space="preserve">
          <source>Double Quoted Strings</source>
          <target state="translated">ダブルクォートの弦</target>
        </trans-unit>
        <trans-unit id="97ef51994f0551456726ff4652bec8fae2bae111" translate="yes" xml:space="preserve">
          <source>Double quoted strings are enclosed by &quot;&quot;. &lt;a href=&quot;#EscapeSequence&quot;&gt;&lt;i&gt;EscapeSequence&lt;/i&gt;&lt;/a&gt;s can be embedded in them.</source>
          <target state="translated">二重引用符で囲まれた文字列は「」で囲まれています。&lt;a href=&quot;#EscapeSequence&quot;&gt;&lt;i&gt;EscapeSequence&lt;/i&gt;&lt;/a&gt;をそれらに埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="58a15cf6ea8b9a28cb41169bfcd5ac8fbf81d48d" translate="yes" xml:space="preserve">
          <source>Double quoted strings are enclosed by &quot;&quot;. &lt;a href=&quot;#EscapeSequence&quot;&gt;&lt;i&gt;EscapeSequence&lt;/i&gt;&lt;/a&gt;s can be embedded into them.</source>
          <target state="translated">二重引用符で囲まれた文字列は &quot;&quot;で囲まれています。&lt;a href=&quot;#EscapeSequence&quot;&gt;&lt;i&gt;EscapeSequenceを&lt;/i&gt;&lt;/a&gt;埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="0b4c7f39c0dd52ca9e93b751cf3a268ca267083b" translate="yes" xml:space="preserve">
          <source>Double quotes in a field are escaped with a double quote</source>
          <target state="translated">フィールド内の二重引用符は二重引用符でエスケープされます。</target>
        </trans-unit>
        <trans-unit id="39ada38f04cebecefb9b4425f65f5414bc2e5688" translate="yes" xml:space="preserve">
          <source>DragonFlyBSD</source>
          <target state="translated">DragonFlyBSD</target>
        </trans-unit>
        <trans-unit id="c6cfd9344502d0bda387e7aa2d5b236691470937" translate="yes" xml:space="preserve">
          <source>DragonFlyBSD,FreeBSD,OpenBSD-Only</source>
          <target state="translated">DragonFlyBSD,FreeBSD,OpenBSD-Only</target>
        </trans-unit>
        <trans-unit id="6762d5db4af81e5f2c77bcbf79bc1f395b8eb0a4" translate="yes" xml:space="preserve">
          <source>Drop an IP group membership</source>
          <target state="translated">IPグループのメンバーシップを削除する</target>
        </trans-unit>
        <trans-unit id="2344a954abca9d2ee9cc4c6e9c4befacdc6f6e79" translate="yes" xml:space="preserve">
          <source>Dst</source>
          <target state="translated">Dst</target>
        </trans-unit>
        <trans-unit id="b024af56227cbde4a86bf76b0bd08cc52aebe130" translate="yes" xml:space="preserve">
          <source>Dst &lt;strong id=&quot;onBadCast&quot;&gt;onBadCast&lt;/strong&gt;(Dst, Src)(Src src);</source>
          <target state="translated">Dst &lt;strong id=&quot;onBadCast&quot;&gt;onBadCast&lt;/strong&gt;（Dst、Src）（Src src）;</target>
        </trans-unit>
        <trans-unit id="09e6401c31232a6fb2cc5ab8768ce235cdf1abe2" translate="yes" xml:space="preserve">
          <source>Dst[] &lt;code&gt;r&lt;/code&gt;</source>
          <target state="translated">Dst [] &lt;code&gt;r&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5a9a4e4ef12e5629fa29318fc987f63c1263435" translate="yes" xml:space="preserve">
          <source>Dsymbol</source>
          <target state="translated">Dsymbol</target>
        </trans-unit>
        <trans-unit id="8b545778ae57876ecf0207ce6c8091ae91e982a7" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;dstart&lt;/code&gt;</source>
          <target state="translated">Dsymbol &lt;code&gt;dstart&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f906c5f387f9a40fce5e5a506c83c5ea11982076" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;fstart&lt;/code&gt;</source>
          <target state="translated">Dsymbol &lt;code&gt;fstart&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e832a1f077874040d38633a04423fe25027820e" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">記号 &lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="490e98cb5be1dc66bf96b3750e4de4b963606587" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">シンボル &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38f65a50fa64dd5ef5a05cc65e0cd98b7a44a10d" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;sapply&lt;/code&gt;</source>
          <target state="translated">Dsymbol &lt;code&gt;sapply&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad654599d75bbb9a0a04ad6c6a4c073c4440fbe1" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;sym&lt;/code&gt;</source>
          <target state="translated">Dsymbol &lt;code&gt;sym&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51c0a3fc988c10b5abd6f1880eec7b7da76ded32" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;var&lt;/code&gt;</source>
          <target state="translated">Dsymbol &lt;code&gt;var&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a455a913b2851eb9ab6f94cc3b97c5265722c6d" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;mostVisibleOverload&quot;&gt;mostVisibleOverload&lt;/strong&gt;(Dsymbol s, Module mod = null);</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;mostVisibleOverload&quot;&gt;mostVisibleOverload&lt;/strong&gt;（Dsymbol s、Module mod = null）;</target>
        </trans-unit>
        <trans-unit id="6bc55e9116eca2e0a18110f594ccc1a1b222faee" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;overnext&quot;&gt;overnext&lt;/strong&gt;;</source>
          <target state="translated">Dsymbolオーバー&lt;strong id=&quot;overnext&quot;&gt;ネクスト&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="6f998ebe1daa0a42b7c8113385a9a3ff31e4e90e" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;search&quot;&gt;search&lt;/strong&gt;(ref const Loc loc, Identifier ident, int flags = IgnoreNone);</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;search&quot;&gt;検索&lt;/strong&gt;（ref const Loc loc、Identifier ident、int flags = IgnoreNone）;</target>
        </trans-unit>
        <trans-unit id="d9aef60a1f0da381fa62cedea3e703d86c8caec5" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;search&quot;&gt;search&lt;/strong&gt;(ref const Loc loc, Identifier ident, int flags = SearchLocalsOnly);</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;search&quot;&gt;検索&lt;/strong&gt;（ref const Loc loc、Identifier ident、int flags = SearchLocalsOnly）;</target>
        </trans-unit>
        <trans-unit id="02b208db776f82952606d59fc10c27ac71a372a1" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;search_function&quot;&gt;search_function&lt;/strong&gt;(ScopeDsymbol ad, Identifier funcid);</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;search_function&quot;&gt;search_function&lt;/strong&gt;（ScopeDsymbol ad、Identifier funcid）;</target>
        </trans-unit>
        <trans-unit id="c6f6da4481e29b43f5371dd381f64d16bb020eb2" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;sym&quot;&gt;sym&lt;/strong&gt;;</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;sym&quot;&gt;sym&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="3293e7c40b5953f617f5d49b0894e4f7726b94e8" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;symtabLookup&quot;&gt;symtabLookup&lt;/strong&gt;(Dsymbol s, Identifier id);</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;symtabLookup&quot;&gt;symtabLookup&lt;/strong&gt;（Dsymbol s、識別子ID）;</target>
        </trans-unit>
        <trans-unit id="292d8088efaebd0453ef2ade829fbebf5d2ffa4d" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;syntaxCopy&quot;&gt;syntaxCopy&lt;/strong&gt;(Dsymbol s);</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;syntaxCopy&quot;&gt;syntaxCopy&lt;/strong&gt;（Dsymbol s）;</target>
        </trans-unit>
        <trans-unit id="4f2d964bc204331c0e5701b7d6577842b5d5d2c5" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;toAlias&quot;&gt;toAlias&lt;/strong&gt;();</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;toAlias&quot;&gt;toAlias&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="d63aa4af0b5bd60b9f77db659b1759fbc7188d93" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;toAlias2&quot;&gt;toAlias2&lt;/strong&gt;();</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;toAlias2&quot;&gt;toAlias2&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="c616142ceaa6dd7c99efb38a7262dd9e4a74e2ff" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;toDsymbol&quot;&gt;toDsymbol&lt;/strong&gt;(Scope* sc);</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;toDsymbol&quot;&gt;toDsymbol&lt;/strong&gt;（Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="e066699810a3cfe4a775dc1614d4092e48b924c1" translate="yes" xml:space="preserve">
          <source>Dsymbol that generates a scope</source>
          <target state="translated">スコープを生成する記号</target>
        </trans-unit>
        <trans-unit id="cc0fbab1260d726e2460fb8256825878dd187711" translate="yes" xml:space="preserve">
          <source>Dsymbol* &lt;code&gt;ps&lt;/code&gt;</source>
          <target state="translated">Dsymbol * &lt;code&gt;ps&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9bf3da6da4ac27f77ae668682aa5bbd52078beee" translate="yes" xml:space="preserve">
          <source>DsymbolTable &lt;strong id=&quot;labtab&quot;&gt;labtab&lt;/strong&gt;;</source>
          <target state="translated">DsymbolTable &lt;strong id=&quot;labtab&quot;&gt;labtab&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="5f805700e007097747cad69493643b293e2e10b6" translate="yes" xml:space="preserve">
          <source>Dsymbol_apply_ft_t &lt;code&gt;fp&lt;/code&gt;</source>
          <target state="translated">Dsymbol_apply_ft_t &lt;code&gt;fp&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db8646dc08b819447ef527c06deac4cc9e003026" translate="yes" xml:space="preserve">
          <source>Dsymbols</source>
          <target state="translated">Dsymbols</target>
        </trans-unit>
        <trans-unit id="9b6c5433d304473effb9bafc5ebabea2c78462bf" translate="yes" xml:space="preserve">
          <source>Dsymbols &lt;strong id=&quot;obj_symbols_towrite&quot;&gt;obj_symbols_towrite&lt;/strong&gt;;</source>
          <target state="translated">Dsymbols &lt;strong id=&quot;obj_symbols_towrite&quot;&gt;obj_symbols_towrite&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="4fd8c240eec48309328d40f64dfa4c80111856bd" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;code&gt;decl&lt;/code&gt;</source>
          <target state="translated">Dsymbols * &lt;code&gt;decl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="020ceea6d0b7987843bd33375b6b8581024abf03" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;code&gt;symbols&lt;/code&gt;</source>
          <target state="translated">Dsymbols * &lt;code&gt;symbols&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f54f49b35574d76d126f9bf8be7e61d8604c8097" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;code&gt;vtbl&lt;/code&gt;</source>
          <target state="translated">Dsymbols * &lt;code&gt;vtbl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="095218a7826af0ed580e41f7cac48851e6cfa475" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;strong id=&quot;include&quot;&gt;include&lt;/strong&gt;(Scope* sc);</source>
          <target state="translated">Dsymbols * &lt;strong id=&quot;include&quot;&gt;include&lt;/strong&gt;（Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="a2e879bbecbe7013ea6be1dd6d3bde799d27cd35" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;strong id=&quot;methodList&quot;&gt;methodList&lt;/strong&gt;;</source>
          <target state="translated">Dsymbols * &lt;strong id=&quot;methodList&quot;&gt;methodList&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="85e56264d0ff9cd817a1e96f31730a6976842b9b" translate="yes" xml:space="preserve">
          <source>DtBuilder &lt;code&gt;dtb&lt;/code&gt;</source>
          <target state="translated">DtBuilder &lt;code&gt;dtb&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84bc9a0f1bfa58783417cc630153b7860a875bc1" translate="yes" xml:space="preserve">
          <source>DtorDeclaration &lt;strong id=&quot;buildDtor&quot;&gt;buildDtor&lt;/strong&gt;(AggregateDeclaration ad, Scope* sc);</source>
          <target state="translated">DtorDeclaration &lt;strong id=&quot;buildDtor&quot;&gt;buildDtor&lt;/strong&gt;（AggregateDeclaration ad、Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="97b38c1c9b9dc77fcb289aa3909fd034cd23c5dc" translate="yes" xml:space="preserve">
          <source>DtorDeclaration &lt;strong id=&quot;buildExternDDtor&quot;&gt;buildExternDDtor&lt;/strong&gt;(AggregateDeclaration ad, Scope* sc);</source>
          <target state="translated">DtorDeclaration &lt;strong id=&quot;buildExternDDtor&quot;&gt;buildExternDDtor&lt;/strong&gt;（AggregateDeclaration ad、Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="881fe54811919601458a7e7d557dfc4aeab13911" translate="yes" xml:space="preserve">
          <source>Due to caching byLineCopy can be more memory-efficient than &lt;code&gt;File.byLine.map!idup&lt;/code&gt;.</source>
          <target state="translated">キャッシングにより、byLineCopyは &lt;code&gt;File.byLine.map!idup&lt;/code&gt; よりもメモリ効率が高くなります。</target>
        </trans-unit>
        <trans-unit id="b4db7a535677101ee5ada4f464ddc7e4b0fe1093" translate="yes" xml:space="preserve">
          <source>Due to safe type promotion in D, chaining together different character ranges results in a &lt;code&gt;uint&lt;/code&gt; range.  Use &lt;a href=&quot;std_utf#byChar&quot;&gt;byChar&lt;/a&gt;, &lt;a href=&quot;std_utf#byWchar&quot;&gt;byWchar&lt;/a&gt;, and &lt;a href=&quot;std_utf#byDchar&quot;&gt;byDchar&lt;/a&gt; on the ranges to get the type you need.</source>
          <target state="translated">Dでは安全な型の昇格のため、異なる文字範囲を連結すると、 &lt;code&gt;uint&lt;/code&gt; 範囲になります。使用&lt;a href=&quot;std_utf#byChar&quot;&gt;byChar&lt;/a&gt;、&lt;a href=&quot;std_utf#byWchar&quot;&gt;byWchar&lt;/a&gt;、および&lt;a href=&quot;std_utf#byDchar&quot;&gt;byDchar&lt;/a&gt;範囲には、必要なタイプを取得します。</target>
        </trans-unit>
        <trans-unit id="245263e86646b52a2631b15f2d5731286c30243f" translate="yes" xml:space="preserve">
          <source>Dumps the full contents of module &lt;code&gt;m&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;m&lt;/code&gt; の全内容を &lt;code&gt;buf&lt;/code&gt; にダンプします。</target>
        </trans-unit>
        <trans-unit id="66ae505d132b46de925c396bf17063ad737667f4" translate="yes" xml:space="preserve">
          <source>Duplicate functionality of D1's &lt;code&gt;std.file.listdir()&lt;/code&gt;:</source>
          <target state="translated">D1の &lt;code&gt;std.file.listdir()&lt;/code&gt; の重複した機能：</target>
        </trans-unit>
        <trans-unit id="0fe85129a7a4025418f0efa7eafb65196f6338fe" translate="yes" xml:space="preserve">
          <source>Duplicate overloads matching the same type in one of the visitors are disallowed.</source>
          <target state="translated">1つの訪問者で同じ型に一致する重複したオーバーロードは許可されません。</target>
        </trans-unit>
        <trans-unit id="fc16ad21d271cc28fc39654c94b04c509aaeeada" translate="yes" xml:space="preserve">
          <source>Duplicate this container. The resulting container contains a shallow copy of the elements.</source>
          <target state="translated">このコンテナを複製します。結果として得られるコンテナには、要素の浅いコピーが含まれています。</target>
        </trans-unit>
        <trans-unit id="3cff863af2ce18e996162a094cbaf327406df3ed" translate="yes" xml:space="preserve">
          <source>Duplicate this handle.</source>
          <target state="translated">このハンドルを複製してください。</target>
        </trans-unit>
        <trans-unit id="889a9cca7b59b20e1a35bacd792adf966e23a88d" translate="yes" xml:space="preserve">
          <source>Duplicates</source>
          <target state="translated">Duplicates</target>
        </trans-unit>
        <trans-unit id="6e20b589aa6df2b4a8b01c6746eab8d8ca3617e0" translate="yes" xml:space="preserve">
          <source>Duplicates the &lt;code&gt;BitArray&lt;/code&gt; and its contents.</source>
          <target state="translated">&lt;code&gt;BitArray&lt;/code&gt; とその内容を複製します。</target>
        </trans-unit>
        <trans-unit id="c85af77478d7179a021e026a9b51351edc52f852" translate="yes" xml:space="preserve">
          <source>Duplicates the array. The elements themselves are not transitively duplicated.</source>
          <target state="translated">配列を複製します。要素自体は透過的に複製されません。</target>
        </trans-unit>
        <trans-unit id="5e7865574bd7823d0044616e1ee1d6d9cdff3d00" translate="yes" xml:space="preserve">
          <source>Duplicates the container. The elements themselves are not transitively duplicated.</source>
          <target state="translated">コンテナを複製します。要素自体はトランジット的に複製されない。</target>
        </trans-unit>
        <trans-unit id="70c6d18f48b358cf705cd9d32f4242396d57c82d" translate="yes" xml:space="preserve">
          <source>Duplicates this &lt;code&gt;frontTransversal&lt;/code&gt;. Note that only the encapsulating range of range will be duplicated. Underlying ranges will not be duplicated.</source>
          <target state="translated">この &lt;code&gt;frontTransversal&lt;/code&gt; を複製します。範囲のカプセル化範囲のみが複製されることに注意してください。基礎となる範囲は複製されません。</target>
        </trans-unit>
        <trans-unit id="1370004da76fa4f3b7a5180fd5436065ef4c7d5b" translate="yes" xml:space="preserve">
          <source>Duration</source>
          <target state="translated">Duration</target>
        </trans-unit>
        <trans-unit id="7c1132f35da45d5af85bf32b2cd42c739981fe8d" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;duration&lt;/code&gt;</source>
          <target state="translated">期間 &lt;code&gt;duration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f43ea6515e3d20a727bc9ceb0ded3e3985bfea29" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;fracSecs&lt;/code&gt;</source>
          <target state="translated">期間 &lt;code&gt;fracSecs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4db07fc9d025d6dca122dcd081981f03faf8c06d" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;period&lt;/code&gt;</source>
          <target state="translated">期間 &lt;code&gt;period&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1058c37a804c6465609fd319f856edc7b95cd41" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">持続時間 &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd859acef007a458701d97ec4e9f4657ea6508a7" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;timeout&lt;/code&gt;</source>
          <target state="translated">期間 &lt;code&gt;timeout&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="acb4f6be6fa038d94a6684fa91b79637f83566a5" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;tmout&lt;/code&gt;</source>
          <target state="translated">期間 &lt;code&gt;tmout&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="437f51f0e93fcf9a848d5569e4dfa0e920813016" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;utcOffset&lt;/code&gt;</source>
          <target state="translated">期間 &lt;code&gt;utcOffset&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="768274ee3975a86c0844fdcb16d2a35285f29f34" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;val&lt;/code&gt;</source>
          <target state="translated">期間 &lt;code&gt;val&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84d6dd410070e6a7e55306ddd911ce9d1fa874c6" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">期間 &lt;code&gt;value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c2bafb9fe842c627b8e34a5a41cb92e24c037eb" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;maxCollectionTime&quot;&gt;maxCollectionTime&lt;/strong&gt;;</source>
          <target state="translated">期間&lt;strong id=&quot;maxCollectionTime&quot;&gt;maxCollectionTime&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="615947f51ef7a81f57bc3da2067a415c70840e4d" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;maxPauseTime&quot;&gt;maxPauseTime&lt;/strong&gt;;</source>
          <target state="translated">期間&lt;strong id=&quot;maxPauseTime&quot;&gt;maxPauseTime&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="5ad2215ff4ec69bcc4c35cb6884b6c2e949cde29" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;totalCollectionTime&quot;&gt;totalCollectionTime&lt;/strong&gt;;</source>
          <target state="translated">期間&lt;strong id=&quot;totalCollectionTime&quot;&gt;totalCollectionTime&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="b1d97bac08417469a47a741116e255e1ede2c38d" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;totalPauseTime&quot;&gt;totalPauseTime&lt;/strong&gt;;</source>
          <target state="translated">期間&lt;strong id=&quot;totalPauseTime&quot;&gt;totalPauseTime&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="365e9c607e20865c871c53952a3517838814d291" translate="yes" xml:space="preserve">
          <source>Duration timeout value.</source>
          <target state="translated">持続時間のタイムアウト値。</target>
        </trans-unit>
        <trans-unit id="7346ab1d5fb6d44aac4cf947a60e019f7fe10b6d" translate="yes" xml:space="preserve">
          <source>Duration, how long to wait. If &lt;code&gt;duration&lt;/code&gt; is negative, won't wait at all.</source>
          <target state="translated">期間、待機時間。 &lt;code&gt;duration&lt;/code&gt; が負の場合、まったく待機しません。</target>
        </trans-unit>
        <trans-unit id="799b124c8daf8718469cbae4456491d6aecf27e8" translate="yes" xml:space="preserve">
          <source>Duration[fun.length] &lt;strong id=&quot;benchmark&quot;&gt;benchmark&lt;/strong&gt;(fun...)(uint n);</source>
          <target state="translated">Duration [fun.length] &lt;strong id=&quot;benchmark&quot;&gt;ベンチマーク&lt;/strong&gt;（fun ...）（uint n）;</target>
        </trans-unit>
        <trans-unit id="01a2cc2568b87a3a494bd2eafcbbdf44739d7fa2" translate="yes" xml:space="preserve">
          <source>Durations of Time</source>
          <target state="translated">時間の長さ</target>
        </trans-unit>
        <trans-unit id="07bb208f468d8b3ddd81b6ffef4767871ab2e0b2" translate="yes" xml:space="preserve">
          <source>Dynamic Array Layout</source>
          <target state="translated">動的配列レイアウト</target>
        </trans-unit>
        <trans-unit id="b2b34c5b7f4476c5b543850932f16344548fc1d9" translate="yes" xml:space="preserve">
          <source>Dynamic Array Properties</source>
          <target state="translated">動的配列のプロパティ</target>
        </trans-unit>
        <trans-unit id="6589f7c7fc3ae1ddd6d9ea0628690494a52e6667" translate="yes" xml:space="preserve">
          <source>Dynamic Arrays</source>
          <target state="translated">動的配列</target>
        </trans-unit>
        <trans-unit id="de7306215588ef2471751e42c6ef7a7796dbbd5c" translate="yes" xml:space="preserve">
          <source>Dynamic Initialization of Structs</source>
          <target state="translated">構造体の動的初期化</target>
        </trans-unit>
        <trans-unit id="6a1ec417f9656bfa58ac913f9a623361c31817a1" translate="yes" xml:space="preserve">
          <source>Dynamic String Object</source>
          <target state="translated">動的文字列オブジェクト</target>
        </trans-unit>
        <trans-unit id="8dfe7ac24e000242d3210236b955fc6d93f77174" translate="yes" xml:space="preserve">
          <source>Dynamic allocator interface. Code that defines allocators ultimately implements this interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations.</source>
          <target state="translated">動的アロケータインターフェース。アロケータを定義するコードは、最終的にこのインタフェースを実装します。これは、様々なアロケータの実装をカプセル化するために統一された型が必要な場合に使用されるべきです。</target>
        </trans-unit>
        <trans-unit id="e6e94d0dd79dd4b04ec17eaa625ce2daf2263cb8" translate="yes" xml:space="preserve">
          <source>Dynamic array properties are:</source>
          <target state="translated">動的配列のプロパティは</target>
        </trans-unit>
        <trans-unit id="fcf3f6b5602d426a76e64859371a3b8e82326184" translate="yes" xml:space="preserve">
          <source>Dynamic array, no dimension</source>
          <target state="translated">動的配列、無次元</target>
        </trans-unit>
        <trans-unit id="7d44854713dee942aa855be9529ca9049d1f51a4" translate="yes" xml:space="preserve">
          <source>Dynamic arrays</source>
          <target state="translated">動的配列</target>
        </trans-unit>
        <trans-unit id="1b1f7143c558a88bd72bd07ce563ba1179684e46" translate="yes" xml:space="preserve">
          <source>Dynamic arrays (though slices of static arrays work) and associative arrays</source>
          <target state="translated">動的配列 (静的配列のスライスは動作しますが)および連想配列</target>
        </trans-unit>
        <trans-unit id="6502e52c892b54fece51dcff086d445a369a930e" translate="yes" xml:space="preserve">
          <source>Dynamic arrays are formatted as input ranges.  Specializations:</source>
          <target state="translated">動的配列は入力範囲としてフォーマットされます。専門化。</target>
        </trans-unit>
        <trans-unit id="fd2b48e308cffeab080f92b79babbd14ca12a9b6" translate="yes" xml:space="preserve">
          <source>Dynamic arrays are initialized to having 0 elements.</source>
          <target state="translated">動的配列は、0 の要素を持つように初期化されます。</target>
        </trans-unit>
        <trans-unit id="16a59a2d2944e36cc40d33dc27c3f04f2148ecb0" translate="yes" xml:space="preserve">
          <source>Dynamic arrays are returned with the pointer in EDX and the length in EAX.</source>
          <target state="translated">動的配列は、ポインタがEDX、長さがEAXで返されます。</target>
        </trans-unit>
        <trans-unit id="4ce2caad71bf4dd56046e9edc2df9b7e23f1b563" translate="yes" xml:space="preserve">
          <source>Dynamic arrays consist of a length and a pointer to the array data. Multiple dynamic arrays can share all or parts of the array data.</source>
          <target state="translated">動的配列は、長さと配列データへのポインタから構成されます。複数の動的配列は、配列データの全部または一部を共有することができます。</target>
        </trans-unit>
        <trans-unit id="b54578a708d1177bfc68570440611b3f68c4e3d7" translate="yes" xml:space="preserve">
          <source>Dynamic binding -- Qt's Signals and Slots vs Objective-C</source>
          <target state="translated">動的バインディング --Qt のシグナルとスロットと Objective-C の比較</target>
        </trans-unit>
        <trans-unit id="a26723c7c3553b927f3ca69df439741cc9ff45f0" translate="yes" xml:space="preserve">
          <source>Dynamic shared allocator interface. Code that defines allocators shareable across threads ultimately implements this interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations.</source>
          <target state="translated">動的共有アロケータインターフェース。スレッド間で共有可能なアロケータを定義するコードは、最終的にこのインターフェイスを実装します。これは、様々なアロケータの実装をカプセル化するために統一された型が必要な場合に使用されるべきです。</target>
        </trans-unit>
        <trans-unit id="758e372147a13eab85e0e2348816aeca5a5cf87b" translate="yes" xml:space="preserve">
          <source>Dynamically Typed Value Object</source>
          <target state="translated">動的型付き値オブジェクト</target>
        </trans-unit>
        <trans-unit id="23e36053f3d03d5f62e159c1169e1004cb311b5b" translate="yes" xml:space="preserve">
          <source>Dynamically allocates (using &lt;code&gt;alloc&lt;/code&gt;) and then creates in the memory allocated an object of type &lt;code&gt;T&lt;/code&gt;, using &lt;code&gt;args&lt;/code&gt; (if any) for its initialization. Initialization occurs in the memory allocated and is otherwise semantically the same as &lt;code&gt;T(args)&lt;/code&gt;. (Note that using &lt;code&gt;alloc.make!(T[])&lt;/code&gt; creates a pointer to an (empty) array of &lt;code&gt;T&lt;/code&gt;s, not an array. To use an allocator to allocate and initialize an array, use &lt;code&gt;alloc.makeArray!T&lt;/code&gt; described below.)</source>
          <target state="translated">動的に割り当てる（使用 &lt;code&gt;alloc&lt;/code&gt; 次に）とすると、メモリ内に作成するタイプのオブジェクトに割り当てられた &lt;code&gt;T&lt;/code&gt; を使用して、 &lt;code&gt;args&lt;/code&gt; 初期化するために（もしあれば）。初期化は割り当てられたメモリで行われ、それ以外は意味的には &lt;code&gt;T(args)&lt;/code&gt; と同じです。 （ &lt;code&gt;alloc.make!(T[])&lt;/code&gt; を使用すると、配列ではなく &lt;code&gt;T&lt;/code&gt; の（空の）配列へのポインターが作成されます。アロケーターを使用して配列を割り当て、初期化するには、以下で説明する &lt;code&gt;alloc.makeArray!T&lt;/code&gt; を使用します。 ）</target>
        </trans-unit>
        <trans-unit id="34ce244b6bf5d752a3f5544473bfc0e3809802c5" translate="yes" xml:space="preserve">
          <source>Dynamically allocates (using the appropriate allocator chosen with &lt;code&gt;allocatorFor!T&lt;/code&gt;) and then creates in the memory allocated an object of type &lt;code&gt;T&lt;/code&gt;, using &lt;code&gt;args&lt;/code&gt; (if any) for its initialization. Initialization occurs in the memory allocated and is otherwise semantically the same as &lt;code&gt;T(args)&lt;/code&gt;. (Note that using &lt;code&gt;make!(T[])&lt;/code&gt; creates a pointer to an (empty) array of &lt;code&gt;T&lt;/code&gt;s, not an array. To allocate and initialize an array, use &lt;code&gt;makeArray!T&lt;/code&gt; described below.)</source>
          <target state="translated">（して選択された適切な割当使用して動的に割り当て &lt;code&gt;allocatorFor!T&lt;/code&gt; メモリに作成し、その後とは）タイプのオブジェクトに割り当てられた &lt;code&gt;T&lt;/code&gt; を使用して、 &lt;code&gt;args&lt;/code&gt; 初期化するために（もしあれば）。初期化は割り当てられたメモリで行われ、それ以外は意味的には &lt;code&gt;T(args)&lt;/code&gt; と同じです。（ &lt;code&gt;make!(T[])&lt;/code&gt; を使用すると、配列ではなく &lt;code&gt;T&lt;/code&gt; の（空の）配列へのポインターが作成されることに注意してください。配列を割り当てて初期化するには、以下で説明する &lt;code&gt;makeArray!T&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="c87a673760938363adec32d38a7ce2e63ff06dc4" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;c&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;c&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9cab13dd2ab0edecf5f07f49ff5c30ac749537ea" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;e&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;e&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="654b3cd931994406b92e783e53bd21d8d15be1e3" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;element&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;element&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6fa7346c4b309ed05ec509280861ca5282502720" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;end&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;end&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36696ce19b713f0e7192d8af3d4e8d66b818b117" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;expression&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;expression&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41178eef3b8d5ea8f259ae34efc32aa2178b878b" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;lPar&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;lPar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1451714e15dd7f03412e8b3df15c9865899b794" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;needle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="da623f5b68b27f40326d87a65ee8eabbb9a543cb" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;pivot&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;pivot&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d579a7cdba3a442fd745d93d48ef920a780541e" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;rPar&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;rPar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e6d8c3d877bc4d0d225fa90451158b1d112a2ce" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;result&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;result&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b49a3ab1144291faa187044ae19832f647014922" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;seed&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;seed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c3d28f03f6fc526462dee33dea8868b1064430f" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(size_t n);</source>
          <target state="translated">E &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;（size_t n）;</target>
        </trans-unit>
        <trans-unit id="aeaa924cdd1fb426235a2a89796ef7f817847e58" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(size_t);</source>
          <target state="translated">E &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;（size_t）;</target>
        </trans-unit>
        <trans-unit id="4b6060bed99df55889fedcc7ebd1dda48edc20bc" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;();</source>
          <target state="translated">E &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="70ba5bb514291f484fb16aff803acb49985b81d2" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;();</source>
          <target state="translated">E &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="4bcc66f6ce127618b0ccfebf4dd0276bd0404552" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t);</source>
          <target state="translated">E &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;（size_t）;</target>
        </trans-unit>
        <trans-unit id="22bec8dd2b08e66c06f91112cd2924b9824f4fbb" translate="yes" xml:space="preserve">
          <source>EAX allocated data, null if stack overflows</source>
          <target state="translated">EAX 割り当てられたデータ、スタックがオーバーフローした場合は null</target>
        </trans-unit>
        <trans-unit id="5bd5f8d7ae14ebe0f410005fa0ee4a2df8d30846" translate="yes" xml:space="preserve">
          <source>EAX, ECX, EDX are scratch registers and can be destroyed by a function.</source>
          <target state="translated">EAX、ECX、EDXはスクラッチレジスタであり、関数によって破壊することができます。</target>
        </trans-unit>
        <trans-unit id="3a86e3e3cac4abfb1ddb991c6016eb447bfb5086" translate="yes" xml:space="preserve">
          <source>EBX, ESI, EDI, EBP must be preserved across function calls.</source>
          <target state="translated">EBX,ESI,EDI,EBP は、関数呼び出しの間で保存されなければなりません。</target>
        </trans-unit>
        <trans-unit id="fd8f8916ced6868f49d5edae3f52ca90edef07ea" translate="yes" xml:space="preserve">
          <source>EF BB BF</source>
          <target state="translated">EF BB BF</target>
        </trans-unit>
        <trans-unit id="2abe262f3d9c19b48e58a958d307e0e7e6c94f0f" translate="yes" xml:space="preserve">
          <source>EFLAGS is assumed destroyed across function calls, except for the direction flag which must be forward.</source>
          <target state="translated">EFLAGS は、前方でなければならない方向フラグを除いて、関数呼び出し全体で破棄されるものとします。</target>
        </trans-unit>
        <trans-unit id="a415e9a8573efb1bbda1a90eb747ad5f4c19fa97" translate="yes" xml:space="preserve">
          <source>EH Table Entry</source>
          <target state="translated">EHテーブルエントリ</target>
        </trans-unit>
        <trans-unit id="4c7a265fd1e6b68c05bde4f42c601389064c93ed" translate="yes" xml:space="preserve">
          <source>EH Table Segment</source>
          <target state="translated">EHテーブルセグメント</target>
        </trans-unit>
        <trans-unit id="5bc604777adb22ae457a5473c397202e00689e23" translate="yes" xml:space="preserve">
          <source>EMPTY</source>
          <target state="translated">EMPTY</target>
        </trans-unit>
        <trans-unit id="d205abee3d2a71688a6b66568be289a94050031c" translate="yes" xml:space="preserve">
          <source>END</source>
          <target state="translated">END</target>
        </trans-unit>
        <trans-unit id="b3b0bdfd557f6b7a88d34ecfb7cb2aafce7efc42" translate="yes" xml:space="preserve">
          <source>EXPERIMENTAL</source>
          <target state="translated">EXPERIMENTAL</target>
        </trans-unit>
        <trans-unit id="235f0479b81b99352344ba40f72272e7f500760e" translate="yes" xml:space="preserve">
          <source>E[] &lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">E [] &lt;code&gt;array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30968cd89d2de89aae2990a42c8165e26f50f9a1" translate="yes" xml:space="preserve">
          <source>E[] &lt;code&gt;elems&lt;/code&gt;</source>
          <target state="translated">E [] &lt;code&gt;elems&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c044a741516f01488c89439ef580a3ff478233bf" translate="yes" xml:space="preserve">
          <source>E[] &lt;code&gt;subject&lt;/code&gt;</source>
          <target state="translated">E [] &lt;code&gt;subject&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f217d5beff31c1ca2b1848f38ef906faae597466" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;encode&quot;&gt;encode&lt;/strong&gt;(E)(dchar c);</source>
          <target state="translated">E [] &lt;strong id=&quot;encode&quot;&gt;エンコード&lt;/strong&gt;（E）（dchar c）;</target>
        </trans-unit>
        <trans-unit id="fd56c4205cae90ba13324d33630ab9d062248305" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;replace&quot;&gt;replace&lt;/strong&gt;(E, R1, R2)(E[] subject, R1 from, R2 to)</source>
          <target state="translated">E [] &lt;strong id=&quot;replace&quot;&gt;置換&lt;/strong&gt;（E、R1、R2）（E []サブジェクト、R1開始、R2終了）</target>
        </trans-unit>
        <trans-unit id="3f51610d23e4abe8c977115a859bbe3315b9eef7" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt;(E, R1, R2)(E[] subject, R1 from, R2 to)</source>
          <target state="translated">E [] &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt;（E、R1、R2）（E [] subject、R1 from、R2 to）</target>
        </trans-unit>
        <trans-unit id="eeafbf65fd3a9aa3deb4cbca03e3644a0587b086" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;replaceLast&quot;&gt;replaceLast&lt;/strong&gt;(E, R1, R2)(E[] subject, R1 from, R2 to)</source>
          <target state="translated">E [] &lt;strong id=&quot;replaceLast&quot;&gt;replaceLast&lt;/strong&gt;（E、R1、R2）（E [] subject、R1 from、R2 to）</target>
        </trans-unit>
        <trans-unit id="e6ba4ade5ebf9a7e06a220ee8879663501891f2b" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; in the</source>
          <target state="translated">それぞれ&lt;a href=&quot;#AssignExpression&quot;&gt;&lt;i&gt;のAssignExpression&lt;/i&gt;&lt;/a&gt;で</target>
        </trans-unit>
        <trans-unit id="970c6cbee0d5ba3d3d3bc667ccac13fe12be1735" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; in the</source>
          <target state="translated">それぞれ&lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;のAssignExpression&lt;/i&gt;&lt;/a&gt;で</target>
        </trans-unit>
        <trans-unit id="631d7ded095224de62f48a96e5644c6398acd903" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Tuple&lt;/code&gt; is the same length.</source>
          <target state="translated">各 &lt;code&gt;Tuple&lt;/code&gt; は同じ長さです。</target>
        </trans-unit>
        <trans-unit id="e3399020b909958cac85e153ab516f6c7694ec40" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;front&lt;/code&gt; will not persist after &lt;code&gt;popFront&lt;/code&gt; is called, so the caller must copy its contents (e.g. by calling &lt;code&gt;to!string&lt;/code&gt;) when retention is needed. If the caller needs to retain a copy of every line, use the &lt;a href=&quot;#byLineCopy&quot;&gt;&lt;code&gt;byLineCopy&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="translated">各 &lt;code&gt;front&lt;/code&gt; は &lt;code&gt;popFront&lt;/code&gt; が呼び出された後は保持されないため、保持が必要な場合、呼び出し元はそのコンテンツを（たとえば &lt;code&gt;to!string&lt;/code&gt; を呼び出して）コピーする必要があります。呼び出し元がすべての行のコピーを保持する必要がある場合は、代わりに&lt;a href=&quot;#byLineCopy&quot;&gt; &lt;code&gt;byLineCopy&lt;/code&gt; &lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="b7a44f23b11cb96b96cd2ba0915faa0f052e0b5c" translate="yes" xml:space="preserve">
          <source>Each argument (including any &lt;code&gt;this&lt;/code&gt; pointer) is compared against the function's corresponding parameter, to determine the match level for that argument. The match level for a function is the</source>
          <target state="translated">各引数（ &lt;code&gt;this&lt;/code&gt; ポインターを含む）は、関数の対応するパラメーターと比較され、その引数の一致レベルが決定されます。関数の一致レベルは</target>
        </trans-unit>
        <trans-unit id="bb45b718916691da1989010513d172008ff92bab" translate="yes" xml:space="preserve">
          <source>Each documentation comment is associated with a declaration. If the documentation comment is on a line by itself or with only whitespace to the left, it refers to the next declaration. Multiple documentation comments applying to the same declaration are concatenated. Documentation comments not associated with a declaration are ignored. Documentation comments preceding the</source>
          <target state="translated">それぞれの文書コメントは宣言に関連しています。ドキュメント・コメントがそれ自体が一行にあるか、左に空白だけがある場合、それは次の宣言を参照します。同じ宣言に適用される複数の文書コメントは連結されます。宣言に関連付けられていない文書コメントは無視される。宣言の前にある文書コメントは、その宣言に関連していないものは無視されます。</target>
        </trans-unit>
        <trans-unit id="edbe8fa5098bb9e7391f688ef6b6ee2314274823" translate="yes" xml:space="preserve">
          <source>Each element is a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; containing the index and the element, in that order, where the index member is named &lt;code&gt;index&lt;/code&gt; and the element member is named &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">各要素は&lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; で&lt;/a&gt;あり、インデックスと要素がこの順序で含まれてい &lt;code&gt;value&lt;/code&gt; 。インデックスメンバーは &lt;code&gt;index&lt;/code&gt; という名前で、要素メンバーはvalueという名前です。</target>
        </trans-unit>
        <trans-unit id="f713367635244c4763db8b557037fbd71862c126" translate="yes" xml:space="preserve">
          <source>Each expression has a unique full expression.</source>
          <target state="translated">それぞれの表現には、固有の完全な表現があります。</target>
        </trans-unit>
        <trans-unit id="045e249c636ce92b7d03d5926827a365b72e955d" translate="yes" xml:space="preserve">
          <source>Each flag represents a field that can be included in the JSON output.</source>
          <target state="translated">各フラグは、JSON出力に含めることができるフィールドを表しています。</target>
        </trans-unit>
        <trans-unit id="5177bac79e351e65e9f095012536f0d31e1946c9" translate="yes" xml:space="preserve">
          <source>Each record should contain the same number of fields</source>
          <target state="translated">各レコードには、同じ数のフィールドが含まれていなければなりません。</target>
        </trans-unit>
        <trans-unit id="0442bfb8225327c8e19427dd3466d5d9e7bdf4e2" translate="yes" xml:space="preserve">
          <source>Each tracked pointer is in one of the following states:</source>
          <target state="translated">各トラッキングポインタは、以下のいずれかの状態にあります。</target>
        </trans-unit>
        <trans-unit id="1ed967b9db86d0b5204db6ba5bddc65d5e95f444" translate="yes" xml:space="preserve">
          <source>Eager parallel map. The eagerness of this function means it has less overhead than the lazily evaluated &lt;code&gt;TaskPool.map&lt;/code&gt; and should be preferred where the memory requirements of eagerness are acceptable. &lt;code&gt;functions&lt;/code&gt; are the functions to be evaluated, passed as template alias parameters in a style similar to &lt;a href=&quot;std_algorithm_iteration#map&quot;&gt;&lt;code&gt;std.algorithm.iteration.map&lt;/code&gt;&lt;/a&gt;. The first argument must be a random access range. For performance reasons, amap will assume the range elements have not yet been initialized. Elements will be overwritten without calling a destructor nor doing an assignment. As such, the range must not contain meaningful data: either un-initialized objects, or objects in their &lt;code&gt;.init&lt;/code&gt; state.</source>
          <target state="translated">熱心な平行マップ。この関数の熱意は、遅延評価された &lt;code&gt;TaskPool.map&lt;/code&gt; よりもオーバーヘッドが少ないことを意味し、熱意のメモリ要件が許容できる場合に推奨されます。 &lt;code&gt;functions&lt;/code&gt; は評価される関数であり、&lt;a href=&quot;std_algorithm_iteration#map&quot;&gt; &lt;code&gt;std.algorithm.iteration.map&lt;/code&gt; &lt;/a&gt;と同様のスタイルでテンプレートエイリアスパラメーターとして渡されます。最初の引数はランダムアクセス範囲でなければなりません。パフォーマンス上の理由から、amapはrange要素がまだ初期化されていないと想定します。要素は、デストラクタを呼び出したり、割り当てを行ったりせずに上書きされます。したがって、範囲には意味のあるデータ（初期化されていないオブジェクト、または &lt;code&gt;.init&lt;/code&gt; 状態のオブジェクト）が含まれていてはなりません。</target>
        </trans-unit>
        <trans-unit id="6c6575a18eb9b2fb3966e6ef26042f110228071b" translate="yes" xml:space="preserve">
          <source>Eagerly advances &lt;code&gt;r&lt;/code&gt; itself (not a copy) exactly &lt;code&gt;n&lt;/code&gt; times (by calling &lt;code&gt;r.popFront&lt;/code&gt;). &lt;code&gt;popFrontExactly&lt;/code&gt; takes &lt;code&gt;r&lt;/code&gt; by &lt;code&gt;ref&lt;/code&gt;, so it mutates the original range. Completes in &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;) steps for ranges that support slicing, and have either length or are infinite. Completes in &amp;Omicron;(&lt;code&gt;n&lt;/code&gt;) time for all other ranges.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 自体（コピーではなく）を正確に &lt;code&gt;n&lt;/code&gt; 回（ &lt;code&gt;r.popFront&lt;/code&gt; を呼び出すことにより）熱心に進めます。 &lt;code&gt;popFrontExactly&lt;/code&gt; は &lt;code&gt;ref&lt;/code&gt; によって &lt;code&gt;r&lt;/code&gt; を取るため、元の範囲を変更します。スライスをサポートし、長さまたは無限のいずれかである範囲に対して、&amp;Omicron;（ &lt;code&gt;1&lt;/code&gt; ）ステップで完了します。他のすべての範囲では、&amp;Omicron;（ &lt;code&gt;n&lt;/code&gt; ）時間で完了します。</target>
        </trans-unit>
        <trans-unit id="013c49ea1dde714e0a3a2fb0379b67f24fba5a76" translate="yes" xml:space="preserve">
          <source>Eagerly concatenates all of the ranges in &lt;code&gt;ror&lt;/code&gt; together (with the GC) into one array using &lt;code&gt;sep&lt;/code&gt; as the separator if present.</source>
          <target state="translated">存在する場合はセパレーターとして &lt;code&gt;sep&lt;/code&gt; を使用して、 &lt;code&gt;ror&lt;/code&gt; のすべての範囲を（GCと共に）積極的に1つの配列に連結します。</target>
        </trans-unit>
        <trans-unit id="c0675dcff491ec3b808cdc7c8d2ede81bbb0ddeb" translate="yes" xml:space="preserve">
          <source>Eagerly evaluates and caches another range's &lt;code&gt;front&lt;/code&gt;.</source>
          <target state="translated">別の範囲の &lt;code&gt;front&lt;/code&gt; 熱心に評価してキャッシュします。</target>
        </trans-unit>
        <trans-unit id="34fb6db85c18082d6a3fa90368894fb8d976e6bd" translate="yes" xml:space="preserve">
          <source>Eagerly iterates over &lt;code&gt;r&lt;/code&gt; and calls &lt;code&gt;fun&lt;/code&gt; over each element.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; を熱心に繰り返し、各要素に対して &lt;code&gt;fun&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f4e28a21c2fa843876b16d9be4d1cc2f403c77b2" translate="yes" xml:space="preserve">
          <source>Eagerly split a range or string into an array.</source>
          <target state="translated">積極的に範囲や文字列を配列に分割します。</target>
        </trans-unit>
        <trans-unit id="2d87236b0de760733175e1874c38a59c48b27028" translate="yes" xml:space="preserve">
          <source>Eagerly splits &lt;code&gt;range&lt;/code&gt; into an array, using &lt;code&gt;sep&lt;/code&gt; as the delimiter.</source>
          <target state="translated">&lt;code&gt;sep&lt;/code&gt; を区切り文字として使用して、 &lt;code&gt;range&lt;/code&gt; を積極的に配列に分割します。</target>
        </trans-unit>
        <trans-unit id="d27eae008f59d8f1f91c00161f3159b86155fb96" translate="yes" xml:space="preserve">
          <source>Effectively a namespace to make it clear that the methods it contains are getting the time from the system clock. It cannot be instantiated.</source>
          <target state="translated">実質的には、それが含むメソッドがシステムクロックから時間を取得していることを明確にするための名前空間です。インスタンス化することはできません。</target>
        </trans-unit>
        <trans-unit id="a916cbf64fcae583b211aefc5aaa6379657e245f" translate="yes" xml:space="preserve">
          <source>Effectively it's a forward range of Captures!R, produced by lazily searching for matches in a given input.</source>
          <target state="translated">実質的にはCaptures!Rの前方範囲であり、与えられた入力の中からマッチするものを怠惰に検索することによって生成されます。</target>
        </trans-unit>
        <trans-unit id="aca7b73e0a41a8787ac878b76dda80e96536be1b" translate="yes" xml:space="preserve">
          <source>Effectively this creates a 'tester' lambda suitable for algorithms like std.algorithm.find that take unary predicates.</source>
          <target state="translated">実質的にこれは、std.algorithm.findのような単項述語を取るアルゴリズムに適した「テスター」ラムダを作成します。</target>
        </trans-unit>
        <trans-unit id="cd9f4825654c8b3616fba4aa5643f7ea0757d86c" translate="yes" xml:space="preserve">
          <source>Efficiently calculates x * 2&lt;sup&gt;n&lt;/sup&gt;.</source>
          <target state="translated">x * 2 &lt;sup&gt;nを&lt;/sup&gt;効率的に計算します。</target>
        </trans-unit>
        <trans-unit id="14aca9bf4e0924cef20dae33b10f37cdb469f89b" translate="yes" xml:space="preserve">
          <source>Egyptian Hieroglyphs</source>
          <target state="translated">エジプトのヒエログリフ</target>
        </trans-unit>
        <trans-unit id="bb212465dbae7203df4ab62ae8863407da33e722" translate="yes" xml:space="preserve">
          <source>Egyptian_Hieroglyphs</source>
          <target state="translated">Egyptian_Hieroglyphs</target>
        </trans-unit>
        <trans-unit id="9bf6d61222f740d6395d5c0a917b01c65ac7a82e" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;SocketOption.SNDTIMEO&lt;/code&gt; or &lt;code&gt;SocketOption.RCVTIMEO&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SocketOption.SNDTIMEO&lt;/code&gt; または &lt;code&gt;SocketOption.RCVTIMEO&lt;/code&gt; のいずれか。</target>
        </trans-unit>
        <trans-unit id="b538213d432e073149fc8ce936d87efd13bbae8b" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;front&lt;/code&gt; and &lt;code&gt;back&lt;/code&gt; are disjoint, or &lt;code&gt;back&lt;/code&gt; is reachable from &lt;code&gt;front&lt;/code&gt; and &lt;code&gt;front&lt;/code&gt; is not reachable from &lt;code&gt;back&lt;/code&gt;.</source>
          <target state="translated">どちらの &lt;code&gt;front&lt;/code&gt; と &lt;code&gt;back&lt;/code&gt; 互いに素である、または &lt;code&gt;back&lt;/code&gt; から到達可能で &lt;code&gt;front&lt;/code&gt; と &lt;code&gt;front&lt;/code&gt; から到達できない &lt;code&gt;back&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3bb6162d792c8db1e60f256982fb8e204e3145a0" translate="yes" xml:space="preserve">
          <source>Either a single element, or a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; of elements, to be evaluated in turn against each element in &lt;code&gt;haystack&lt;/code&gt; under the given predicate.</source>
          <target state="translated">指定された述語の下で、 &lt;code&gt;haystack&lt;/code&gt; の各要素に対して順に評価される単一の要素または要素の&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前方範囲&lt;/a&gt;のいずれか。</target>
        </trans-unit>
        <trans-unit id="56799ecf425da0fe03950f720256493fc8f97323" translate="yes" xml:space="preserve">
          <source>Either a suitable block of &lt;code&gt;n&lt;/code&gt; bytes aligned at &lt;code&gt;a&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; で整列した &lt;code&gt;n&lt;/code&gt; バイトの適切なブロック、または &lt;code&gt;null&lt;/code&gt; のいずれか。</target>
        </trans-unit>
        <trans-unit id="cce4bcaf50fdceff52e6b76b4f40f1e91193a96c" translate="yes" xml:space="preserve">
          <source>Elem &lt;strong id=&quot;back&quot;&gt;back&lt;/strong&gt;();</source>
          <target state="translated">ELEM &lt;strong id=&quot;back&quot;&gt;バック&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="a64a0dd8f8de41ca8f9155d1c41f1246f2b78d16" translate="yes" xml:space="preserve">
          <source>Elem &lt;strong id=&quot;front&quot;&gt;front&lt;/strong&gt;();</source>
          <target state="translated">要素&lt;strong id=&quot;front&quot;&gt;フロント&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="07fc2178c4163e292259cfb2eeb452fa28ebb264" translate="yes" xml:space="preserve">
          <source>Elem &lt;strong id=&quot;removeAny&quot;&gt;removeAny&lt;/strong&gt;();</source>
          <target state="translated">Elem &lt;strong id=&quot;removeAny&quot;&gt;removeAny&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="815fed41d2b5c32373a2ba77bc841eb55036192a" translate="yes" xml:space="preserve">
          <source>Element &lt;code&gt;item&lt;/code&gt;</source>
          <target state="translated">要素 &lt;code&gt;item&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="617b6ad21e69ef0e23e6081aaddb2e46c0aa49f9" translate="yes" xml:space="preserve">
          <source>Element &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="translated">要素 &lt;code&gt;needle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5cc795bd839deb73768f3b2b378624de54ec5c8e" translate="yes" xml:space="preserve">
          <source>Element or range.</source>
          <target state="translated">要素または範囲。</target>
        </trans-unit>
        <trans-unit id="e5d3f7d287d7ac65d2f0d6c2698caa1155f2bb82" translate="yes" xml:space="preserve">
          <source>Element sampling</source>
          <target state="translated">元素サンプリング</target>
        </trans-unit>
        <trans-unit id="441f754d30b34ec6f455f3b63ab4e3ef12fa2567" translate="yes" xml:space="preserve">
          <source>Element type for the tree</source>
          <target state="translated">ツリーの要素タイプ</target>
        </trans-unit>
        <trans-unit id="2a017ecfbaef83e525a46dc1052a60ee1f7dcc34" translate="yes" xml:space="preserve">
          <source>Element type of &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; 要素タイプ。</target>
        </trans-unit>
        <trans-unit id="a9ad4909fe4e9413a21c83b4b347fd8272797126" translate="yes" xml:space="preserve">
          <source>Element types. These should be combined with storage classes.</source>
          <target state="translated">要素の型。これらはストレージクラスと組み合わせる必要があります。</target>
        </trans-unit>
        <trans-unit id="4a86309a78186d3dff495cf566f9a99d9a424ccb" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!(ElementType!RoR)[] &lt;strong id=&quot;join&quot;&gt;join&lt;/strong&gt;(RoR)(RoR ror)</source>
          <target state="translated">ElementEncodingType！（ElementType！RoR）[] &lt;strong id=&quot;join&quot;&gt;結合&lt;/strong&gt;（RoR）（RoR ror）</target>
        </trans-unit>
        <trans-unit id="1ae890c2864d9cb7135c605192d53170ba9f48e8" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!(ElementType!RoR)[] &lt;strong id=&quot;join&quot;&gt;join&lt;/strong&gt;(RoR, E)(RoR ror, scope E sep)</source>
          <target state="translated">ElementEncodingType！（ElementType！RoR）[] &lt;strong id=&quot;join&quot;&gt;join&lt;/strong&gt;（RoR、E）（RoR ror、scope E sep）</target>
        </trans-unit>
        <trans-unit id="6cb7f607653348ef8248d1403fc1b7cb812dc41c" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!(ElementType!RoR)[] &lt;strong id=&quot;join&quot;&gt;join&lt;/strong&gt;(RoR, R)(RoR ror, scope R sep)</source>
          <target state="translated">ElementEncodingType！（ElementType！RoR）[] &lt;strong id=&quot;join&quot;&gt;join&lt;/strong&gt;（RoR、R）（RoR ror、scope R sep）</target>
        </trans-unit>
        <trans-unit id="702f931d0306af88b0823865552adc6fa0812c5d" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!S[] &lt;strong id=&quot;replicate&quot;&gt;replicate&lt;/strong&gt;(S)(S s, size_t n)</source>
          <target state="translated">ElementEncodingType！S [] &lt;strong id=&quot;replicate&quot;&gt;複製&lt;/strong&gt;（S）（S s、size_t n）</target>
        </trans-unit>
        <trans-unit id="42a3ba77b8c17a1ef2ce9dcc9fd601cdaa03846f" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!S[] &lt;strong id=&quot;toLower&quot;&gt;toLower&lt;/strong&gt;(S)(S s)</source>
          <target state="translated">ElementEncodingType！S [] &lt;strong id=&quot;toLower&quot;&gt;toLower&lt;/strong&gt;（S）（S s）</target>
        </trans-unit>
        <trans-unit id="392acda9c596c467f63fe2c49f8758250301f4bd" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!S[] &lt;strong id=&quot;toUpper&quot;&gt;toUpper&lt;/strong&gt;(S)(S s)</source>
          <target state="translated">ElementEncodingType！S [] &lt;strong id=&quot;toUpper&quot;&gt;toUpper&lt;/strong&gt;（S）（S s）</target>
        </trans-unit>
        <trans-unit id="5379158f2d181b7fa9f49b4b944d580681d55b28" translate="yes" xml:space="preserve">
          <source>ElementHandler[string] &lt;strong id=&quot;onEndTag&quot;&gt;onEndTag&lt;/strong&gt;;</source>
          <target state="translated">ElementHandler [string] &lt;strong id=&quot;onEndTag&quot;&gt;onEndTag&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="3509bab6a8e8df125122f531a5102572618ae319" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(size_t n);</source>
          <target state="translated">ElementType &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;（size_t n）;</target>
        </trans-unit>
        <trans-unit id="33ef2617a32e997a8e380250ba77dae4b8b6d9fc" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;();</source>
          <target state="translated">ElementType &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="a2be9443bfc1f887c0ddfce9a4c4bebf9beb84b9" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;();</source>
          <target state="translated">ElementType &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="ab1735c15e6bbd4f47316c932e21c0b1884f9074" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t n);</source>
          <target state="translated">ElementType &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;（size_t n）;</target>
        </trans-unit>
        <trans-unit id="0ceae5422846c1850afe1536d2f161cc51bc15f2" translate="yes" xml:space="preserve">
          <source>ElementType!R &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(R)(R r, size_t i);</source>
          <target state="translated">ElementType！R &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;（R）（R r、size_t i）;</target>
        </trans-unit>
        <trans-unit id="6041d7706b79b33d558f662e1a591338bf754e6f" translate="yes" xml:space="preserve">
          <source>ElementType!R &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;(R)(R r);</source>
          <target state="translated">ElementType！R &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;（R）（R r）;</target>
        </trans-unit>
        <trans-unit id="1ae77fbe5957fe1ff7bf65bc7bb4e202ac6e7310" translate="yes" xml:space="preserve">
          <source>ElementType!R &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;(R)(R r);</source>
          <target state="translated">ElementType！R &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;（R）（R r）;</target>
        </trans-unit>
        <trans-unit id="dba97a41f5d9403a5379470ec77587dfe2b378ab" translate="yes" xml:space="preserve">
          <source>ElementType!Range &lt;strong id=&quot;entropy&quot;&gt;entropy&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">ElementType！Range &lt;strong id=&quot;entropy&quot;&gt;エントロピー&lt;/strong&gt;（Range）（Range r）</target>
        </trans-unit>
        <trans-unit id="54482da3f9235c6fbbbf0ed6a5f5744dc3f1fb04" translate="yes" xml:space="preserve">
          <source>ElementType!Range &lt;strong id=&quot;entropy&quot;&gt;entropy&lt;/strong&gt;(Range, F)(Range r, F max)</source>
          <target state="translated">ElementType！Range &lt;strong id=&quot;entropy&quot;&gt;エントロピー&lt;/strong&gt;（Range、F）（Range r、F max）</target>
        </trans-unit>
        <trans-unit id="a1daac9d4b0263465c14fe15886ba68d3da513b2" translate="yes" xml:space="preserve">
          <source>ElementType!Range &lt;strong id=&quot;sumOfLog2s&quot;&gt;sumOfLog2s&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">ElementType！Range &lt;strong id=&quot;sumOfLog2s&quot;&gt;sumOfLog2s&lt;/strong&gt;（Range）（Range r）</target>
        </trans-unit>
        <trans-unit id="9f2f50d89dda35c54cbe17ed4d5bc5e3935e704e" translate="yes" xml:space="preserve">
          <source>ElementType!S[] &lt;strong id=&quot;replicate&quot;&gt;replicate&lt;/strong&gt;(S)(S s, size_t n)</source>
          <target state="translated">ElementType！S [] &lt;strong id=&quot;replicate&quot;&gt;複製&lt;/strong&gt;（S）（S s、size_t n）</target>
        </trans-unit>
        <trans-unit id="5af41717fc3e0c6b68c90ef101993c3de9cf4657" translate="yes" xml:space="preserve">
          <source>ElementType!Store &lt;strong id=&quot;removeAny&quot;&gt;removeAny&lt;/strong&gt;();</source>
          <target state="translated">ElementType！Store &lt;strong id=&quot;removeAny&quot;&gt;removeAny&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="81e6d0f4b8b168d02f8b5a91f64c39e265ade30e" translate="yes" xml:space="preserve">
          <source>ElementType!String[] &lt;strong id=&quot;array&quot;&gt;array&lt;/strong&gt;(String)(scope String str)</source>
          <target state="translated">ElementType！String [] &lt;strong id=&quot;array&quot;&gt;array&lt;/strong&gt;（String）（scope String str）</target>
        </trans-unit>
        <trans-unit id="a3bd4e1dc80bf2ee2b709752575c9a0862156bc5" translate="yes" xml:space="preserve">
          <source>Element[] &lt;strong id=&quot;elements&quot;&gt;elements&lt;/strong&gt;;</source>
          <target state="translated">Element [] &lt;strong id=&quot;elements&quot;&gt;要素&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="bb9e481b91ab17d164bbd39e916a61e4b19723f7" translate="yes" xml:space="preserve">
          <source>Elementary mathematical functions (powers, roots, trigonometry).</source>
          <target state="translated">初歩的な数学関数(力、根、三角法)。</target>
        </trans-unit>
        <trans-unit id="5f985b24fa425c8c26af762a28cd7fb06853f0e7" translate="yes" xml:space="preserve">
          <source>Elements can be swapped across ranges of different types:</source>
          <target state="translated">さまざまなタイプの範囲で要素を入れ替えることができます。</target>
        </trans-unit>
        <trans-unit id="13dd77bf1e66f2b40efa3b9e8d4d21e1130a5e9f" translate="yes" xml:space="preserve">
          <source>Elements for a bit field representing memory block attributes. These are manipulated via the getAttr, setAttr, clrAttr functions.</source>
          <target state="translated">メモリブロックの属性を表すビットフィールドの要素。これらは getAttr,setAttr,clrAttr 関数で操作されます。</target>
        </trans-unit>
        <trans-unit id="c838e4b542ac5aa6a62ecd0a260e0e5a1e61eb97" translate="yes" xml:space="preserve">
          <source>Elems</source>
          <target state="translated">Elems</target>
        </trans-unit>
        <trans-unit id="fc0ff864861865bae147c8715abde6277197adcb" translate="yes" xml:space="preserve">
          <source>Elems are the basic tree element. They can be either terminal elems (leaves), unary elems (left subtree exists) or binary elems (left and right subtrees exist).</source>
          <target state="translated">エレムは基本的な木の要素です。エレムは、終端エレム(葉)、単項エレム(左サブツリーが存在する)、二項エレム(左サブツリーと右サブツリーが存在する)のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="37137a150453c8341dc88dc5e4a24adeca9da8da" translate="yes" xml:space="preserve">
          <source>Eliminates elements at given offsets from &lt;code&gt;range&lt;/code&gt; and returns the shortened range.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; から指定されたオフセットにある要素を削除し、短縮された範囲を返します。</target>
        </trans-unit>
        <trans-unit id="7961b40e09efce39bb1596a6f0073b30b5359e24" translate="yes" xml:space="preserve">
          <source>Else if either operand is &lt;code&gt;double&lt;/code&gt;, the other operand is converted to &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">どちらかのオペランドがあるそうであれば &lt;code&gt;double&lt;/code&gt; 、他のオペランドがに変換され &lt;code&gt;double&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f17ee232bd9cb197e4fd87f9507c3c4dbb560cd" translate="yes" xml:space="preserve">
          <source>Else if either operand is &lt;code&gt;float&lt;/code&gt;, the other operand is converted to &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">そうでない場合、どちらかのオペランドが &lt;code&gt;float&lt;/code&gt; の場合、もう一方のオペランドはfloatに変換され &lt;code&gt;float&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9609e0b7e6ea340dbf05465faf2ff6efe7d4b312" translate="yes" xml:space="preserve">
          <source>Else the integer promotions are done on each operand, followed by:</source>
          <target state="translated">そうでなければ、各オペランドに対して整数の昇格が行われ、それに続きます。</target>
        </trans-unit>
        <trans-unit id="893da40d8f9df3d0daa923e7df9a12d1a05b2a0c" translate="yes" xml:space="preserve">
          <source>ElseStatement</source>
          <target state="translated">ElseStatement</target>
        </trans-unit>
        <trans-unit id="6b2e0054898f373aae2215ecda0f85d8c9f14b1d" translate="yes" xml:space="preserve">
          <source>EmailStatus &lt;strong id=&quot;isEmail&quot;&gt;isEmail&lt;/strong&gt;(Char)(const(Char)[] email, CheckDns checkDNS = No.checkDns, EmailStatusCode errorLevel = EmailStatusCode.none)</source>
          <target state="translated">EmailStatus &lt;strong id=&quot;isEmail&quot;&gt;isEmail&lt;/strong&gt;（Char）（const（Char）[] email、CheckDns checkDNS = No.checkDns、EmailStatusCode errorLevel = EmailStatusCode.none）</target>
        </trans-unit>
        <trans-unit id="1295ed0c2f947c93f62b24a516ec70bae65910d9" translate="yes" xml:space="preserve">
          <source>EmailStatusCode &lt;code&gt;errorLevel&lt;/code&gt;</source>
          <target state="translated">EmailStatusCode &lt;code&gt;errorLevel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee568c86daa6658674d61b601ab68991b94f1e98" translate="yes" xml:space="preserve">
          <source>EmailStatusCode &lt;code&gt;statusCode&lt;/code&gt;</source>
          <target state="translated">EmailStatusCode &lt;code&gt;statusCode&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ebe11a2c604519a279794e1deefdb918d19d099" translate="yes" xml:space="preserve">
          <source>Embed these highlighting commands in the text stream. HIGHLIGHT.Escape indicates a Color follows.</source>
          <target state="translated">テキストストリームにこれらのハイライトコマンドを埋め込みます。HIGHLIGHT.Escapeは色が続くことを示します。</target>
        </trans-unit>
        <trans-unit id="2957d7f1b575cf6674f3b9cd21c15484f7fb0b85" translate="yes" xml:space="preserve">
          <source>Embedded Code</source>
          <target state="translated">埋め込みコード</target>
        </trans-unit>
        <trans-unit id="9bff0882940fac652cad3dd1bc8ec9e7bd34c15e" translate="yes" xml:space="preserve">
          <source>Embedded Comments</source>
          <target state="translated">埋め込みコメント</target>
        </trans-unit>
        <trans-unit id="883b86e78b11fee2715119068e524fae48a93354" translate="yes" xml:space="preserve">
          <source>Embedded HTML</source>
          <target state="translated">埋め込みHTML</target>
        </trans-unit>
        <trans-unit id="afb3c8cf26049457eca4057cf4fd156dcc008d93" translate="yes" xml:space="preserve">
          <source>Embedded documentation comments are one of the following forms:</source>
          <target state="translated">埋め込まれたドキュメントのコメントは、以下のいずれかの形式になります。</target>
        </trans-unit>
        <trans-unit id="043c2cfcce9821785484b7fc5bceb933d7a9060f" translate="yes" xml:space="preserve">
          <source>Embedded documentation comments are processed in a series of phases:</source>
          <target state="translated">埋め込まれたドキュメントのコメントは、一連のフェーズで処理されます。</target>
        </trans-unit>
        <trans-unit id="04a28bd6845e9c95330e13fd7f59f93dbf4e7b08" translate="yes" xml:space="preserve">
          <source>Emit prefetch instruction.</source>
          <target state="translated">プリフェッチ命令を送信します。</target>
        </trans-unit>
        <trans-unit id="ac6ff37e2f54571cc60828ad2c5211775b2622b5" translate="yes" xml:space="preserve">
          <source>Emoticons</source>
          <target state="translated">Emoticons</target>
        </trans-unit>
        <trans-unit id="b55c446755b6bea6f311ce6517e64a2b1c2e459b" translate="yes" xml:space="preserve">
          <source>Empty Structs</source>
          <target state="translated">空の構造体</target>
        </trans-unit>
        <trans-unit id="1c6e2b73fed51429a5a892cd9c8056cf6678edd7" translate="yes" xml:space="preserve">
          <source>Empty and separator-only ranges.</source>
          <target state="translated">空の範囲とセパレータのみの範囲。</target>
        </trans-unit>
        <trans-unit id="030c3429dfb8a61c15a21ebff544e445beb8e45e" translate="yes" xml:space="preserve">
          <source>Enable (unmask) specific hardware exceptions. Multiple exceptions may be ORed together.</source>
          <target state="translated">特定のハードウェア例外を有効にします(アンマスク)。複数の例外を一緒にORすることができます。</target>
        </trans-unit>
        <trans-unit id="47209fc977a3d6844b590f95a2e890da8c62a167" translate="yes" xml:space="preserve">
          <source>Enable Or Disable Extended Result Codes</source>
          <target state="translated">拡張結果コードの有効化または無効化</target>
        </trans-unit>
        <trans-unit id="2ae5828f55ab597198616d5a6a29272c5472108b" translate="yes" xml:space="preserve">
          <source>Enable Or Disable Extension Loading</source>
          <target state="translated">拡張機能の読み込みを有効または無効にする</target>
        </trans-unit>
        <trans-unit id="4f3889a08ab86ec8ddcc4be30913885c66215716" translate="yes" xml:space="preserve">
          <source>Enable Or Disable Shared Pager Cache</source>
          <target state="translated">共有ページャーキャッシュの有効化または無効化</target>
        </trans-unit>
        <trans-unit id="4bce37c03cdb1ea1c2db7e72938269d734302d1b" translate="yes" xml:space="preserve">
          <source>Enable SSL/TLS for FTP, pick one of: CURLFTPSSL_TRY - try using SSL, proceed anyway otherwise CURLFTPSSL_CONTROL - SSL for the control connection or fail CURLFTPSSL_ALL - SSL for all communication or fail</source>
          <target state="translated">FTPでSSL/TLSを有効にするには、以下のいずれかを選択します。CURLFTPSSL_TRY-SSLを使用してみて、それ以外の場合は続行 CURLFTPSSL_CONTROL-コントロール接続のためのSSLか、失敗 CURLFTPSSL_ALL-すべての通信のためのSSLか、失敗</target>
        </trans-unit>
        <trans-unit id="1cbf90ffe7b5043f00cb0b86caba37bb56558b58" translate="yes" xml:space="preserve">
          <source>Enable keep-alive packets</source>
          <target state="translated">キープアライブパケットを有効にする</target>
        </trans-unit>
        <trans-unit id="10efdb46d610a542c9c965d276df321b68e5b03f" translate="yes" xml:space="preserve">
          <source>Enable merging of coverage reports with existing data.</source>
          <target state="translated">既存のデータとカバレッジレポートのマージを可能にします。</target>
        </trans-unit>
        <trans-unit id="b84845f1dfde2cfcd609b3fdd44a1877a729e347" translate="yes" xml:space="preserve">
          <source>Enable/disable the TCP Nagle algorithm</source>
          <target state="translated">TCP Nagle アルゴリズムの有効化/無効化</target>
        </trans-unit>
        <trans-unit id="9d44a972ab5a45fa93d33bed969870132f92a36c" translate="yes" xml:space="preserve">
          <source>Enables TCP keep-alive with the specified parameters.</source>
          <target state="translated">指定されたパラメータでTCPキープアライブを有効にします。</target>
        </trans-unit>
        <trans-unit id="79bcddb5a0eeb733d6cee82beff697e093ac845f" translate="yes" xml:space="preserve">
          <source>Enables automatic garbage collection behavior if collections have previously been suspended by a call to disable. This function is reentrant, and must be called once for every call to disable before automatic collections are enabled.</source>
          <target state="translated">以前にdisableを呼び出すことでコレクションが一時停止されていた場合、自動ガベージコレクションの動作を有効にします。この関数はリエントラント型で、自動コレクションを有効にする前に、disable を呼び出すたびに 1 回呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="b5b9df3f99d6bcd73bd5fffe2b0799d07c917202" translate="yes" xml:space="preserve">
          <source>Encapsulate Parameters* so .length and [i] can be used on it. &lt;a href=&quot;https://dlang.org/spec/function.html#ParameterList&quot;&gt;https://dlang.org/spec/function.html#ParameterList&lt;/a&gt;</source>
          <target state="translated">パラメータ*をカプセル化して、.lengthと[i]を使用できるようにします。&lt;a href=&quot;https://dlang.org/spec/function.html#ParameterList&quot;&gt;https://dlang.org/spec/function.html#ParameterList&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9c7711e4b76eb88caee19cd84075750386f2e48" translate="yes" xml:space="preserve">
          <source>Encapsulate path and file names.</source>
          <target state="translated">パス名とファイル名をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="0d4f5fbb3a956c798f6999285ecf9cf7a69251e8" translate="yes" xml:space="preserve">
          <source>Encapsulates a &lt;code&gt;FILE*&lt;/code&gt;. Generally D does not attempt to provide thin wrappers over equivalent functions in the C standard library, but manipulating &lt;code&gt;FILE*&lt;/code&gt; values directly is unsafe and error-prone in many ways. The &lt;code&gt;File&lt;/code&gt; type ensures safe manipulation, automatic file closing, and a lot of convenience.</source>
          <target state="translated">&lt;code&gt;FILE*&lt;/code&gt; カプセル化します。一般に、DはC標準ライブラリの同等の関数に薄いラッパーを提供しようとはしませんが、 &lt;code&gt;FILE*&lt;/code&gt; 値を直接操作することは安全でなく、多くの点でエラーが発生しやすくなります。 &lt;code&gt;File&lt;/code&gt; 種類は、安全な操作、自動ファイルクローズ、および利便性の多くを保証します。</target>
        </trans-unit>
        <trans-unit id="42f3f54b4a70b84c3d0e6908ba2c470466ee4877" translate="yes" xml:space="preserve">
          <source>Encapsulates all implementation-level data needed for scheduling.</source>
          <target state="translated">スケジューリングに必要なすべての実装レベルのデータをカプセル化します。</target>
        </trans-unit>
        <trans-unit id="748e49eacf2c1a655647e4253e6a96c30a279303" translate="yes" xml:space="preserve">
          <source>Encapsulates unique ownership of a resource.</source>
          <target state="translated">リソースの一意の所有権をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="e40ad790e55199e7d2ef0dbc7fabf2db622c12ec" translate="yes" xml:space="preserve">
          <source>Enclosed Alphanumeric Supplement</source>
          <target state="translated">封入されている英数字の補足</target>
        </trans-unit>
        <trans-unit id="e6b4a28e228cf42e5ab146723e0937d7bf37431e" translate="yes" xml:space="preserve">
          <source>Enclosed Alphanumerics</source>
          <target state="translated">封入された英数字</target>
        </trans-unit>
        <trans-unit id="ecbd1232b7421472379e7dc4138275ac6aa868e1" translate="yes" xml:space="preserve">
          <source>Enclosed CJK Letters and Months</source>
          <target state="translated">封入された日中韓の手紙と月</target>
        </trans-unit>
        <trans-unit id="c5214ea8b39e3e2f736d3259bf59f7b62a472bac" translate="yes" xml:space="preserve">
          <source>Enclosed Ideographic Supplement</source>
          <target state="translated">封入されているイデオグラフィックの補足</target>
        </trans-unit>
        <trans-unit id="3b610eb478dd2651d7723bcf0f052053fc2c5033" translate="yes" xml:space="preserve">
          <source>Enclosing_Mark</source>
          <target state="translated">Enclosing_Mark</target>
        </trans-unit>
        <trans-unit id="782e817cf07d938d62f7f0517e130f19ec6b4cf1" translate="yes" xml:space="preserve">
          <source>Encode</source>
          <target state="translated">Encode</target>
        </trans-unit>
        <trans-unit id="3e475d947990d92a7a4d09f9a4707983b827e684" translate="yes" xml:space="preserve">
          <source>Encode and decode UTF-8, UTF-16 and UTF-32 strings.</source>
          <target state="translated">UTF-8、UTF-16、UTF-32の文字列をエンコード、デコードします。</target>
        </trans-unit>
        <trans-unit id="5a334ca888394778b3416c4aaed610512bec455a" translate="yes" xml:space="preserve">
          <source>Encode and decode Uniform Resource Identifiers (URIs).</source>
          <target state="translated">統一リソース識別子(URI)をエンコードしてデコードします。</target>
        </trans-unit>
        <trans-unit id="2a3ea83c8f7a80a45437a91f54c430d375ed83e9" translate="yes" xml:space="preserve">
          <source>Encode and decode Uniform Resource Identifiers (URIs). URIs are used in internet transfer protocols. Valid URI characters consist of letters, digits, and the characters &lt;b&gt;;/?:@&amp;amp;=+$,-.!~*'()&lt;/b&gt; Reserved URI characters are &lt;b&gt;;/?:@&amp;amp;=+$,&lt;/b&gt; Escape sequences consist of &lt;b&gt;%&lt;/b&gt; followed by two hex digits.</source>
          <target state="translated">Uniform Resource Identifier（URI）をエンコードおよびデコードします。URIはインターネット転送プロトコルで使用されます。有効なURI文字は文字、数字、および文字で構成&lt;b&gt;？; /：@＆= + $、 - 〜* '（）。！&lt;/b&gt;予約URI文字はされ&lt;b&gt;; /：@＆= + $、？&lt;/b&gt;エスケープシーケンスで構成されて&lt;b&gt;％&lt;/b&gt;に続きます2桁の16進数。</target>
        </trans-unit>
        <trans-unit id="3441d10c6cc1bf3c5ff4b87a06f4ce4e76401654" translate="yes" xml:space="preserve">
          <source>Encode source into a &lt;code&gt;char[]&lt;/code&gt; buffer using Base64 encoding.</source>
          <target state="translated">Base64エンコーディングを使用して、ソースを &lt;code&gt;char[]&lt;/code&gt; バッファにエンコードします。</target>
        </trans-unit>
        <trans-unit id="220162a6e5b325187b91acc2c02d19d314f1fd83" translate="yes" xml:space="preserve">
          <source>Encode the given expression, which is assumed to be an rvalue literal as another type for use in CTFE. This corresponds roughly to the idiom *(Type *)&amp;amp;e.</source>
          <target state="translated">CTFEで使用する別の型として右辺値リテラルであると想定される、指定された式をエンコードします。これはおおよそイディオム*（タイプ*）＆eに対応します。</target>
        </trans-unit>
        <trans-unit id="0ad8d5b089dad44fcb9b633792f5660c5a7cd53d" translate="yes" xml:space="preserve">
          <source>Encoded strings will not have any padding if the &lt;code&gt;Padding&lt;/code&gt; parameter is set to &lt;code&gt;NoPadding&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Padding&lt;/code&gt; パラメータが &lt;code&gt;NoPadding&lt;/code&gt; に設定されている場合、エンコードされた文字列にはパディングがありません。</target>
        </trans-unit>
        <trans-unit id="06c389c01cc77c1798feea52bafb6d47e85cf5d4" translate="yes" xml:space="preserve">
          <source>Encoder!Range &lt;strong id=&quot;encoder&quot;&gt;encoder&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">エンコーダー！レンジ&lt;strong id=&quot;encoder&quot;&gt;エンコーダー&lt;/strong&gt;（レンジ）（レンジレンジ）</target>
        </trans-unit>
        <trans-unit id="37bb3fd438866d7d6a800d64d5e82569366077ed" translate="yes" xml:space="preserve">
          <source>Encodes &lt;a href=&quot;http://realityinteractive.com/rgrzywinski/archives/000249.html&quot;&gt;edit operations&lt;/a&gt; necessary to transform one sequence into another. Given sequences &lt;code&gt;s&lt;/code&gt; (source) and &lt;code&gt;t&lt;/code&gt; (target), a sequence of &lt;code&gt;EditOp&lt;/code&gt; encodes the steps that need to be taken to convert &lt;code&gt;s&lt;/code&gt; into &lt;code&gt;t&lt;/code&gt;. For example, if &lt;code&gt;s = &quot;cat&quot;&lt;/code&gt; and &lt;code&gt;&quot;cars&quot;&lt;/code&gt;, the minimal sequence that transforms &lt;code&gt;s&lt;/code&gt; into &lt;code&gt;t&lt;/code&gt; is: skip two characters, replace 't' with 'r', and insert an 's'. Working with edit operations is useful in applications such as spell-checkers (to find the closest word to a given misspelled word), approximate searches, diff-style programs that compute the difference between files, efficient encoding of patches, DNA sequence analysis, and plagiarism detection.</source>
          <target state="translated">あるシーケンスを別のシーケンスに変換&lt;a href=&quot;http://realityinteractive.com/rgrzywinski/archives/000249.html&quot;&gt;するために&lt;/a&gt;必要な編集操作をエンコードします。シーケンス &lt;code&gt;s&lt;/code&gt; （ソース）と &lt;code&gt;t&lt;/code&gt; （ターゲット）が与えられると、 &lt;code&gt;EditOp&lt;/code&gt; のシーケンスは &lt;code&gt;s&lt;/code&gt; を &lt;code&gt;t&lt;/code&gt; に変換するために必要なステップをエンコードします。たとえば、 &lt;code&gt;s = &quot;cat&quot;&lt;/code&gt; および &lt;code&gt;&quot;cars&quot;&lt;/code&gt; の場合、 &lt;code&gt;s&lt;/code&gt; を &lt;code&gt;t&lt;/code&gt; に変換する最小のシーケンスis：2つの文字をスキップし、「t」を「r」に置き換え、「s」を挿入します。編集操作の操作は、スペルチェッカー（特定のスペルミスのある単語に最も近い単語を見つけるため）、近似検索、ファイル間の差異を計算するdiffスタイルのプログラム、パッチの効率的なエンコーディング、DNAシーケンス分析などのアプリケーションで役立ちます。盗用の検出。</target>
        </trans-unit>
        <trans-unit id="3da8545dfc7cfa2cac1f67c4cdd8acd325688097" translate="yes" xml:space="preserve">
          <source>Encodes &lt;code&gt;c&lt;/code&gt; in &lt;code&gt;str&lt;/code&gt;'s encoding and appends it to &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">エンコード &lt;code&gt;c&lt;/code&gt; で &lt;code&gt;str&lt;/code&gt; のエンコードとに追加し &lt;code&gt;str&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0154f11eaa6c395b0cc601aa424b12e43b6352b" translate="yes" xml:space="preserve">
          <source>Encodes &lt;code&gt;c&lt;/code&gt; into the static array, &lt;code&gt;buf&lt;/code&gt;, and returns the actual length of the encoded character (a number between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; for &lt;code&gt;char[4]&lt;/code&gt; buffers and a number between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; for &lt;code&gt;wchar[2]&lt;/code&gt; buffers).</source>
          <target state="translated">エンコード &lt;code&gt;c&lt;/code&gt; 静的アレイに &lt;code&gt;buf&lt;/code&gt; 、及びリターン符号化文字の実際の長さ（間番号 &lt;code&gt;1&lt;/code&gt; 及び &lt;code&gt;4&lt;/code&gt; のための &lt;code&gt;char[4]&lt;/code&gt; バッファとの間番号 &lt;code&gt;1&lt;/code&gt; および &lt;code&gt;2&lt;/code&gt; のため &lt;code&gt;wchar[2]&lt;/code&gt; バッファ）。</target>
        </trans-unit>
        <trans-unit id="2e6104a6ab2772f371922f3aaeaeb7d2389d06bb" translate="yes" xml:space="preserve">
          <source>Encodes a single code point into a user-supplied, fixed-size buffer.</source>
          <target state="translated">1つのコードポイントを、ユーザーが提供する固定サイズのバッファにエンコードします。</target>
        </trans-unit>
        <trans-unit id="10ddb4f7dd523c4befc685a3e0632670f78d6f59" translate="yes" xml:space="preserve">
          <source>Encodes a single code point into an array.</source>
          <target state="translated">1つのコードポイントを配列にエンコードします。</target>
        </trans-unit>
        <trans-unit id="bd958e479e5410a4cc921752fa501a1fa5bf4c58" translate="yes" xml:space="preserve">
          <source>Encodes a single code point to a delegate.</source>
          <target state="translated">1つのコードポイントをデリゲートにエンコードします。</target>
        </trans-unit>
        <trans-unit id="e84d12b3e9a0bd7610b25c211345bfe28c02cc65" translate="yes" xml:space="preserve">
          <source>Encodes a single code point.</source>
          <target state="translated">1つのコードポイントをエンコードします。</target>
        </trans-unit>
        <trans-unit id="9fb3f11471ae30b471fb2d7c48448f96784bbdea" translate="yes" xml:space="preserve">
          <source>Encodes a string by replacing all characters which need to be escaped with appropriate predefined XML entities.</source>
          <target state="translated">エスケープする必要のあるすべての文字を、適切な定義済み XML エンティティで置き換えることで文字列をエンコードします。</target>
        </trans-unit>
        <trans-unit id="0311bab99351addf1e4e596241ca4f5800c003ee" translate="yes" xml:space="preserve">
          <source>Encodes source into an &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;output range&lt;/a&gt; using Base64 encoding.</source>
          <target state="translated">Base64エンコーディングを使用して、ソースを&lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;出力範囲に&lt;/a&gt;エンコードします。</target>
        </trans-unit>
        <trans-unit id="c1c86a4c1f506295d95ffc6df9298ff289c2e793" translate="yes" xml:space="preserve">
          <source>Encodes source to newly-allocated buffer.</source>
          <target state="translated">新たに割り当てられたバッファにソースをエンコードします。</target>
        </trans-unit>
        <trans-unit id="70f275c65bf2cb900479221ec66705952ce2b93e" translate="yes" xml:space="preserve">
          <source>Encodes string &lt;code&gt;s&lt;/code&gt; into UTF-16 and returns the encoded string. &lt;code&gt;toUTF16z&lt;/code&gt; is suitable for calling the 'W' functions in the Win32 API that take an &lt;code&gt;LPCWSTR&lt;/code&gt; argument.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; をUTF-16にエンコードし、エンコードされた文字列を返します。 &lt;code&gt;toUTF16z&lt;/code&gt; は、 &lt;code&gt;LPCWSTR&lt;/code&gt; 引数を取るWin32 APIの「W」関数を呼び出すのに適しています。</target>
        </trans-unit>
        <trans-unit id="18e78253a5c62ee01707c07e6fe0d95281b69440" translate="yes" xml:space="preserve">
          <source>Encodes the UTF-8 string uri into a URI and returns that URI. Any character not a valid URI character is escaped. The '#' character is not escaped.</source>
          <target state="translated">UTF-8文字列uriをURIにエンコードし、そのURIを返す。有効なURI文字以外の文字はエスケープされる。文字「#」はエスケープされない。</target>
        </trans-unit>
        <trans-unit id="805d83a773804113c35b1c178f426b5d83bc5314" translate="yes" xml:space="preserve">
          <source>Encodes the UTF-8 string uriComponent into a URI and returns that URI. Any character not a letter, digit, or one of -.!~*'() is escaped.</source>
          <target state="translated">UTF-8 文字列 uriComponent を URI にエンコードし、その URI を返します。文字、数字、または -.</target>
        </trans-unit>
        <trans-unit id="1ce944cce4506abe10ef748e0dcaa7daa1599ca2" translate="yes" xml:space="preserve">
          <source>Encodes the contents of &lt;code&gt;s&lt;/code&gt; in units of type &lt;code&gt;Tgt&lt;/code&gt;, writing the result to an output range.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; の内容を &lt;code&gt;Tgt&lt;/code&gt; 型の単位でエンコードし、結果を出力範囲に書き込みます。</target>
        </trans-unit>
        <trans-unit id="9c7e5df1b8876d8a4528edc6b37704fba0dde231" translate="yes" xml:space="preserve">
          <source>Encodes the elements of &lt;code&gt;s&lt;/code&gt; to UTF-16 and returns a newly GC allocated &lt;code&gt;wstring&lt;/code&gt; of the elements.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; の要素をUTF-16にエンコードし、新しくGCに割り当てられた要素の &lt;code&gt;wstring&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b85ee0f06ef14a8b4983d595facf07889fcdeaa4" translate="yes" xml:space="preserve">
          <source>Encodes the elements of &lt;code&gt;s&lt;/code&gt; to UTF-32 and returns a newly GC allocated &lt;code&gt;dstring&lt;/code&gt; of the elements.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; の要素をUTF-32にエンコードし、新しくGCに割り当てられた要素の &lt;code&gt;dstring&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c4fa69cb4316c9e45077264d1be54ce0c8233a8d" translate="yes" xml:space="preserve">
          <source>Encodes the elements of &lt;code&gt;s&lt;/code&gt; to UTF-8 and returns a newly allocated string of the elements.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; の要素をUTF-8にエンコードし、新しく割り当てられた要素の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="8932888046af9bb1c9f4652f83ea1afc7f9a87cf" translate="yes" xml:space="preserve">
          <source>Encoding / decoding Base64 format.</source>
          <target state="translated">エンコード/デコード Base64 フォーマット。</target>
        </trans-unit>
        <trans-unit id="0e7952fa5a4905bd0cbd5639a2acedee76ceca8d" translate="yes" xml:space="preserve">
          <source>Encoding schemes</source>
          <target state="translated">符号化方式</target>
        </trans-unit>
        <trans-unit id="9c4f36161365b1d3838bcbdd250887a7031a7e6b" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle ASCII</source>
          <target state="translated">ASCII を扱うための EncodingScheme</target>
        </trans-unit>
        <trans-unit id="446d406963616098f3653df4a74a7dddda5a039f" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Latin-1</source>
          <target state="translated">Latin-1 を扱うための EncodingScheme</target>
        </trans-unit>
        <trans-unit id="d6bf86f655741e69d6528dfdf4504b309aeec0a7" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Latin-2</source>
          <target state="translated">Latin-2 を扱うための EncodingScheme</target>
        </trans-unit>
        <trans-unit id="dd6227348bc30155f280725c96868620ad2230e9" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle UTF-16 in native byte order</source>
          <target state="translated">ネイティブバイト順でUTF-16を扱うためのEncodingScheme</target>
        </trans-unit>
        <trans-unit id="be2fba0adf5350ce6b87d427869b7d2551c0de7d" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle UTF-32 in native byte order</source>
          <target state="translated">ネイティブバイト順でUTF-32を扱うためのEncodingScheme</target>
        </trans-unit>
        <trans-unit id="b49746e2674f13df8a872f2e10e509856c176586" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle UTF-8</source>
          <target state="translated">UTF-8を扱うためのEncodingScheme</target>
        </trans-unit>
        <trans-unit id="faeeae997244cadf686b50227182c2861e34762e" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Windows-1250</source>
          <target state="translated">Windows-1250を扱うためのEncodingScheme</target>
        </trans-unit>
        <trans-unit id="1ffb35bddfecbce77d9f1afe7c2504515c41a641" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Windows-1251</source>
          <target state="translated">Windows-1251を扱うためのEncodingScheme</target>
        </trans-unit>
        <trans-unit id="590090ad0ced92c41c7d0d87dd80d15aa2bc562b" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Windows-1252</source>
          <target state="translated">Windows-1252 を扱うための EncodingScheme</target>
        </trans-unit>
        <trans-unit id="0bc8157b0e896cd216388715ec7f6749ad576c53" translate="yes" xml:space="preserve">
          <source>Encodings currently supported are UTF-8, UTF-16, UTF-32, ASCII, ISO-8859-1 (also known as LATIN-1), ISO-8859-2 (LATIN-2), WINDOWS-1250, WINDOWS-1251 and WINDOWS-1252.</source>
          <target state="translated">現在サポートされているエンコーディングは、UTF-8、UTF-16、UTF-32、ASCII、ISO-8859-1(LATIN-1としても知られています)、ISO-8859-2(LATIN-2)、WINDOWS-1250、WINDOWS-1251、WINDOWS-1252です。</target>
        </trans-unit>
        <trans-unit id="1ae196dd0d55e616b5fc4ddc9c0045f6f5796717" translate="yes" xml:space="preserve">
          <source>Encountered an invalid character</source>
          <target state="translated">無効な文字に遭遇しました</target>
        </trans-unit>
        <trans-unit id="3c563e61565c36beafce54d1011c140a395217b9" translate="yes" xml:space="preserve">
          <source>End of File</source>
          <target state="translated">ファイルの終了</target>
        </trans-unit>
        <trans-unit id="26f22eedf68e21f94951e1814a0ef555343a9a70" translate="yes" xml:space="preserve">
          <source>End of Line</source>
          <target state="translated">行の終わり</target>
        </trans-unit>
        <trans-unit id="1922f8549c83f9841a0a3a96665a811403626eb9" translate="yes" xml:space="preserve">
          <source>End of medium</source>
          <target state="translated">媒体の終わり</target>
        </trans-unit>
        <trans-unit id="4de459b167bc17b3a0e6bbfc5dba938d1d966746" translate="yes" xml:space="preserve">
          <source>End of text</source>
          <target state="translated">テキストの終わり</target>
        </trans-unit>
        <trans-unit id="8c7f307345f3f9f062b9e039589289044820b04a" translate="yes" xml:space="preserve">
          <source>End of transmission</source>
          <target state="translated">送信終了</target>
        </trans-unit>
        <trans-unit id="d64987ee0b36791afc8558c7aa92bade6f37e738" translate="yes" xml:space="preserve">
          <source>End of transmission block</source>
          <target state="translated">送信ブロックの終了</target>
        </trans-unit>
        <trans-unit id="02fe45e6afb4c80bc3451ca5beaedbe06e5b4573" translate="yes" xml:space="preserve">
          <source>End use of ap.</source>
          <target state="translated">apの使用を終了します。</target>
        </trans-unit>
        <trans-unit id="ceebd323052ebae99407c57b0c539216799488af" translate="yes" xml:space="preserve">
          <source>End-of-line (U+000A).</source>
          <target state="translated">エンドオブライン(U+000A)。</target>
        </trans-unit>
        <trans-unit id="322c5d3730703ae50125a473e7a7c3d0e9ef2301" translate="yes" xml:space="preserve">
          <source>Endianness</source>
          <target state="translated">Endianness</target>
        </trans-unit>
        <trans-unit id="13a5c5feafb1e854278095b06d5c23b1b6c39ea8" translate="yes" xml:space="preserve">
          <source>Endianness conversion</source>
          <target state="translated">エンディアンス変換</target>
        </trans-unit>
        <trans-unit id="46c0381e6bc545755b616831881040e1b2f21be9" translate="yes" xml:space="preserve">
          <source>Endianness refers to the order in which multibyte types are stored. The two main orders are</source>
          <target state="translated">エンジアンネスとは、マルチバイト型が格納されている順序のことです。主な順序は以下の2つです。</target>
        </trans-unit>
        <trans-unit id="077056a263e02ed818ae98bf1fa380acb11b14ed" translate="yes" xml:space="preserve">
          <source>Enforce</source>
          <target state="translated">Enforce</target>
        </trans-unit>
        <trans-unit id="b48fd47a6c0cd5f02c2e6251cb7c4497455891d8" translate="yes" xml:space="preserve">
          <source>Enforces that the given value is true, throwing an &lt;code&gt;ErrnoException&lt;/code&gt; if it is not.</source>
          <target state="translated">指定された値がtrueであることを &lt;code&gt;ErrnoException&lt;/code&gt; 、そうでない場合はErrnoExceptionをスローします。</target>
        </trans-unit>
        <trans-unit id="4ea84a73fbc3cd4c8a0ef912e19036649eae80de" translate="yes" xml:space="preserve">
          <source>Enforces that the given value is true. If the given value is false, an exception is thrown. The</source>
          <target state="translated">指定した値が真であることを強制します。指定した値が false の場合は例外がスローされます。このような場合には例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="ff68eb68195a8071792a3ca526f37b8bcbc8ec51" translate="yes" xml:space="preserve">
          <source>Enquiry</source>
          <target state="translated">Enquiry</target>
        </trans-unit>
        <trans-unit id="1ae4e99b78a129f094edccddc69d35644252e904" translate="yes" xml:space="preserve">
          <source>Ensure that the provided path exists</source>
          <target state="translated">提供されたパスが存在することを確認する</target>
        </trans-unit>
        <trans-unit id="29ccbf8748c2fbce9ee3867511df1c6e53e16753" translate="yes" xml:space="preserve">
          <source>Ensure the root path (the path minus the name) of the provided path exists, and terminate the process if it doesn't.</source>
          <target state="translated">指定したパスのルートパス(パスから名前を引いたもの)が存在することを確認し、存在しない場合はプロセスを終了させます。</target>
        </trans-unit>
        <trans-unit id="5f56bd357515dfd89697384d6d4a430df26264c8" translate="yes" xml:space="preserve">
          <source>Ensures sufficient capacity to accommodate &lt;code&gt;e&lt;/code&gt; elements. If &lt;code&gt;e &amp;lt; capacity&lt;/code&gt;, this method does nothing.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; エレメントを収容するのに十分な容量を確保します。 &lt;code&gt;e &amp;lt; capacity&lt;/code&gt; 場合、このメソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="7496c87d8654c0d48379ac62a2d57a9cbf3195d3" translate="yes" xml:space="preserve">
          <source>Ensures* &lt;strong id=&quot;fensures&quot;&gt;fensures&lt;/strong&gt;;</source>
          <target state="translated">* &lt;strong id=&quot;fensures&quot;&gt;fensuresを&lt;/strong&gt;保証します。</target>
        </trans-unit>
        <trans-unit id="1ecdf6feee54c3ecdc9ed86dd3b1d8d646d8d82e" translate="yes" xml:space="preserve">
          <source>Entry point for CTFE. A compile-time result is required. Give an error if not possible.</source>
          <target state="translated">CTFE のエントリーポイント。コンパイル時の結果が必要です。できない場合はエラーにしてください。</target>
        </trans-unit>
        <trans-unit id="1e2bd9cd17d10f67710426147be408571da46673" translate="yes" xml:space="preserve">
          <source>Enum &amp;amp; Variable Templates</source>
          <target state="translated">列挙型と変数のテンプレート</target>
        </trans-unit>
        <trans-unit id="5a1be1c96f470256fed749b9334c204f6340eda9" translate="yes" xml:space="preserve">
          <source>Enum Default Initializer</source>
          <target state="translated">Enum デフォルトのイニシャライザ</target>
        </trans-unit>
        <trans-unit id="a1ea6e59090424af41c0589b36355a75f90aa3a0" translate="yes" xml:space="preserve">
          <source>Enum Properties</source>
          <target state="translated">列挙プロパティ</target>
        </trans-unit>
        <trans-unit id="9c419b2f60d486073fc04f184ff556748d53e97b" translate="yes" xml:space="preserve">
          <source>Enum declarations are used to define a group of constants.</source>
          <target state="translated">列挙宣言は、定数のグループを定義するために使用されます。</target>
        </trans-unit>
        <trans-unit id="465cd0ed52d2e368b8931b724a70ae413c97f797" translate="yes" xml:space="preserve">
          <source>Enum options.</source>
          <target state="translated">列挙オプション。</target>
        </trans-unit>
        <trans-unit id="4b2b0b99f8b474622498c40d642e3acadf238431" translate="yes" xml:space="preserve">
          <source>Enum properties only exist for named enums.</source>
          <target state="translated">列挙型プロパティは、名前付き列挙型にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="3b5232dbf7a0d383457da309b54268e5223b3cd1" translate="yes" xml:space="preserve">
          <source>EnumBaseType</source>
          <target state="translated">EnumBaseType</target>
        </trans-unit>
        <trans-unit id="5459409c4560a1853b8bcba1a6a798e678c27502" translate="yes" xml:space="preserve">
          <source>EnumMember</source>
          <target state="translated">EnumMember</target>
        </trans-unit>
        <trans-unit id="1cb2acbf0ed9c36886669ea0a63a81c566c074d5" translate="yes" xml:space="preserve">
          <source>EnumMembers</source>
          <target state="translated">EnumMembers</target>
        </trans-unit>
        <trans-unit id="fcd3434f3e84e6bf841e9b8a79d8c04bee767ab0" translate="yes" xml:space="preserve">
          <source>Enumerated types are converted to strings as their symbolic names.</source>
          <target state="translated">列挙型は記号名として文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="7b3cd3ee7332b62ae93f10b73519c0675e0a4b7b" translate="yes" xml:space="preserve">
          <source>Enumeration type for normalization forms, passed as template parameter for functions like &lt;a href=&quot;#normalize&quot;&gt;&lt;code&gt;normalize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下のような機能のためのテンプレートパラメータとして渡された正規化形式の列挙型、&lt;a href=&quot;#normalize&quot;&gt; &lt;code&gt;normalize&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4135d93181c7c7b6f7eebfce73c4b88f3696363b" translate="yes" xml:space="preserve">
          <source>Enumerator &lt;code&gt;start&lt;/code&gt;</source>
          <target state="translated">列挙子の &lt;code&gt;start&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
