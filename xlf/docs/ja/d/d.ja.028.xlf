<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="7f3ea7f5b668b927908903c59ab3b69fcb5af861" translate="yes" xml:space="preserve">
          <source>The stack size for this fiber.</source>
          <target state="translated">このファイバのスタックサイズ。</target>
        </trans-unit>
        <trans-unit id="d77b689dcb1ab13845e33f5ac0d239d2be984a77" translate="yes" xml:space="preserve">
          <source>The stack size for this thread.</source>
          <target state="translated">このスレッドのスタックサイズ。</target>
        </trans-unit>
        <trans-unit id="1902c662d9b13b82fe81369d128dde4e10ffcdaa" translate="yes" xml:space="preserve">
          <source>The stack trace of where the error happened. This is an opaque object that can either be converted to &lt;code&gt;string&lt;/code&gt;, or iterated over with &lt;code&gt; foreach&lt;/code&gt; to extract the items in the stack trace (as strings).</source>
          <target state="translated">エラーが発生した場所のスタックトレース。これは不透明なオブジェクトで、 &lt;code&gt;string&lt;/code&gt; に変換するか、 &lt;code&gt; foreach&lt;/code&gt; で繰り返して、スタックトレース内の項目を（文字列として）抽出できます。</target>
        </trans-unit>
        <trans-unit id="9f20dc3ac3213d71596e365d3a32376deda65355" translate="yes" xml:space="preserve">
          <source>The stack variables referenced by a nested function are still valid even after the function exits (this is different from D 1.0). This is called a</source>
          <target state="translated">入れ子になった関数で参照されるスタック変数は、関数が終了した後も有効です(これはD 1.0とは異なります)。これは</target>
        </trans-unit>
        <trans-unit id="813353f101357b03d0b61c073a4c5ccf1975eaf3" translate="yes" xml:space="preserve">
          <source>The standard HTTP methods : &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.1&quot;&gt;RFC2616 Section 5.1.1&lt;/a&gt;</source>
          <target state="translated">標準のHTTPメソッド：&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.1&quot;&gt;RFC2616セクション5.1.1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5be2cd87a2b0f4860fcc1853c1fefdfb3d5a3f6e" translate="yes" xml:space="preserve">
          <source>The standard error stream of the child process. This can be any &lt;a href=&quot;std_stdio#File&quot;&gt;&lt;code&gt;std.stdio.File&lt;/code&gt;&lt;/a&gt; that is opened for writing. By default the child process inherits the parent's error stream.</source>
          <target state="translated">子プロセスの標準エラーストリーム。これは、書き込み用に開かれている任意の&lt;a href=&quot;std_stdio#File&quot;&gt; &lt;code&gt;std.stdio.File&lt;/code&gt; &lt;/a&gt;です。デフォルトでは、子プロセスは親のエラーストリームを継承します。</target>
        </trans-unit>
        <trans-unit id="c14ddf17075fee8f053a24cb7922aea2d8242099" translate="yes" xml:space="preserve">
          <source>The standard error stream.</source>
          <target state="translated">標準的なエラーストリーム。</target>
        </trans-unit>
        <trans-unit id="28e8c3771deea57b1287ddecdda74142b64d7ee8" translate="yes" xml:space="preserve">
          <source>The standard input stream of the child process. This can be any &lt;a href=&quot;std_stdio#File&quot;&gt;&lt;code&gt;std.stdio.File&lt;/code&gt;&lt;/a&gt; that is opened for reading. By default the child process inherits the parent's input stream.</source>
          <target state="translated">子プロセスの標準入力ストリーム。これは、読み取り用に開かれている任意の&lt;a href=&quot;std_stdio#File&quot;&gt; &lt;code&gt;std.stdio.File&lt;/code&gt; &lt;/a&gt;です。デフォルトでは、子プロセスは親の入力ストリームを継承します。</target>
        </trans-unit>
        <trans-unit id="25a87846c6350f9b0dad73c8670fb5c7a560abfc" translate="yes" xml:space="preserve">
          <source>The standard input stream.</source>
          <target state="translated">標準の入力ストリーム。</target>
        </trans-unit>
        <trans-unit id="7f5d48c8b0f2de69f4c747237a77a2d1bfba7b08" translate="yes" xml:space="preserve">
          <source>The standard library lends a hand for comparing strings with mixed encodings (by transparently decoding, see &lt;a href=&quot;https://dlang.org/phobos/std_algorithm.html#cmp&quot;&gt;&lt;code&gt;std.algorithm.cmp&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;https://dlang.org/phobos/std_uni.html#icmp&quot;&gt;case-insensitive comparison&lt;/a&gt; and &lt;a href=&quot;https://dlang.org/phobos/std_uni.html#normalize&quot;&gt;normalization&lt;/a&gt;.</source>
          <target state="translated">標準ライブラリは、文字列を混合エンコーディング（透過的にデコードすることにより、&lt;a href=&quot;https://dlang.org/phobos/std_algorithm.html#cmp&quot;&gt; &lt;code&gt;std.algorithm.cmp&lt;/code&gt; を&lt;/a&gt;参照）、&lt;a href=&quot;https://dlang.org/phobos/std_uni.html#icmp&quot;&gt;大文字と小文字を区別しない比較&lt;/a&gt;、および&lt;a href=&quot;https://dlang.org/phobos/std_uni.html#normalize&quot;&gt;正規化&lt;/a&gt;と比較するための手助けをします。</target>
        </trans-unit>
        <trans-unit id="d461322cb73ba656cc10ee6e78ac236193d95ae6" translate="yes" xml:space="preserve">
          <source>The standard output stream of the child process. This can be any &lt;a href=&quot;std_stdio#File&quot;&gt;&lt;code&gt;std.stdio.File&lt;/code&gt;&lt;/a&gt; that is opened for writing. By default the child process inherits the parent's output stream.</source>
          <target state="translated">子プロセスの標準出力ストリーム。これは、書き込み用に開かれている任意の&lt;a href=&quot;std_stdio#File&quot;&gt; &lt;code&gt;std.stdio.File&lt;/code&gt; &lt;/a&gt;です。デフォルトでは、子プロセスは親の出力ストリームを継承します。</target>
        </trans-unit>
        <trans-unit id="3a9e602747062d7eede03400aa4e39b2ccb593c6" translate="yes" xml:space="preserve">
          <source>The standard output stream.</source>
          <target state="translated">標準出力ストリーム。</target>
        </trans-unit>
        <trans-unit id="21e7fda428c2c6b1ed80304e44601e7fae93a662" translate="yes" xml:space="preserve">
          <source>The start tag of the element</source>
          <target state="translated">要素の開始タグ</target>
        </trans-unit>
        <trans-unit id="e872d9d6a6689ad057f6c088df86c8dbaa1e7c70" translate="yes" xml:space="preserve">
          <source>The starting point of the interval. It is included in the interval.</source>
          <target state="translated">インターバルの始点。インターバルに含まれます。</target>
        </trans-unit>
        <trans-unit id="3554fc05aa3ab3a9ddf7ec9973a0bf7f4072e5a0" translate="yes" xml:space="preserve">
          <source>The starting value.</source>
          <target state="translated">開始値です。</target>
        </trans-unit>
        <trans-unit id="a84bd1411e0ff3c732833affc83038a36b88c2e4" translate="yes" xml:space="preserve">
          <source>The state of the sequence is stored as a &lt;code&gt;Tuple&lt;/code&gt; so it can be heterogeneous.</source>
          <target state="translated">シーケンスの状態は &lt;code&gt;Tuple&lt;/code&gt; として格納されるため、異種混合にすることができます。</target>
        </trans-unit>
        <trans-unit id="a8013cbe10851e46bc860bd1d31ef9871f35e223" translate="yes" xml:space="preserve">
          <source>The state of this fiber as an enumerated value.</source>
          <target state="translated">このファイバの状態を列挙した値。</target>
        </trans-unit>
        <trans-unit id="debdb4248e291669b86fe314e231ec5f465f64cb" translate="yes" xml:space="preserve">
          <source>The std time to convert.</source>
          <target state="translated">変換する標準時間。</target>
        </trans-unit>
        <trans-unit id="e0b383e1171d8d015f97f2490da3a859a852e7d9" translate="yes" xml:space="preserve">
          <source>The stored &lt;code&gt;Logger&lt;/code&gt;</source>
          <target state="translated">保存された &lt;code&gt;Logger&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d23198b78726b12c064950153015ab0cde6faecb" translate="yes" xml:space="preserve">
          <source>The strategy for finding the next available block is first fit.</source>
          <target state="translated">次の利用可能なブロックを見つけるための戦略は、最初にフィットします。</target>
        </trans-unit>
        <trans-unit id="c2420fb1448496dbbd08ceea8e09dc60562adfb8" translate="yes" xml:space="preserve">
          <source>The stream to pass to INTERLEAVEFUNCTION.</source>
          <target state="translated">INTERLEAVEFUNCTION に渡すストリーム。</target>
        </trans-unit>
        <trans-unit id="18822dcb8b0bc3c64136bcaebcbf45df0cd6a713" translate="yes" xml:space="preserve">
          <source>The string</source>
          <target state="translated">文字列</target>
        </trans-unit>
        <trans-unit id="e64ff94f3ecfd8fab9d37892f66980e617d6433b" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;command&lt;/code&gt; is passed verbatim to the shell, and is therefore subject to its rules about command structure, argument/filename quoting and escaping of special characters. The path to the shell executable defaults to &lt;a href=&quot;#nativeShell&quot;&gt;&lt;code&gt;nativeShell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;command&lt;/code&gt; はそのままシェルに渡されるため、コマンド構造、引数/ファイル名の引用、特殊文字のエスケープに関するルールの対象となります。シェル実行可能ファイルへのパスは、デフォルトで&lt;a href=&quot;#nativeShell&quot;&gt; &lt;code&gt;nativeShell&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="601595000f8c78875086bc48ab40c9c94bc17a1c" translate="yes" xml:space="preserve">
          <source>The string arguments must only contain valid characters for C++ name mangling which currently include alphanumerics and the underscore character.</source>
          <target state="translated">文字列引数には、C++の名前マングリングで有効な文字のみを含める必要があり、現在は英数字とアンダースコア文字が含まれています。</target>
        </trans-unit>
        <trans-unit id="2bf86f45ac17363df2917e94c577fdefa4162b88" translate="yes" xml:space="preserve">
          <source>The string indicating which characters to replace and what to replace them with. It is generated by &lt;a href=&quot;#makeTransTable&quot;&gt;&lt;code&gt;makeTransTable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">置換する文字と置換する文字を示す文字列。&lt;a href=&quot;#makeTransTable&quot;&gt; &lt;code&gt;makeTransTable&lt;/code&gt; &lt;/a&gt;によって生成されます。</target>
        </trans-unit>
        <trans-unit id="f0533873999a54cfe4dbbd386fac2585e64d8e51" translate="yes" xml:space="preserve">
          <source>The string is meant to be human readable, not machine parseable (e.g. whether there is an &lt;code&gt;'s'&lt;/code&gt; on the end of the unit name usually depends on whether it's plural or not, and empty units are not included unless the Duration is &lt;code&gt;zero&lt;/code&gt;). Any code needing a specific string format should use &lt;code&gt;total&lt;/code&gt; or &lt;code&gt;split&lt;/code&gt; to get the units needed to create the desired string format and create the string itself.</source>
          <target state="translated">文字列は人間が読めるようにするためのものであり、機械で解析することはできません（たとえば、ユニット名の末尾に &lt;code&gt;'s'&lt;/code&gt; があるかどうかは、通常、複数かどうかによって異なり、Durationが &lt;code&gt;zero&lt;/code&gt; ない限り、空のユニットは含まれません）。特定の文字列形式が必要なコードでは、 &lt;code&gt;total&lt;/code&gt; または &lt;code&gt;split&lt;/code&gt; を使用して、目的の文字列形式を作成し、文字列自体を作成するために必要な単位を取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="2bd07e9629d13f3f409b884d3ffac3a7eb0da845" translate="yes" xml:space="preserve">
          <source>The string literal specifies a linker directive to be embedded in the generated object file.</source>
          <target state="translated">文字列リテラルは、生成されたオブジェクトファイルに埋め込むリンカ指令を指定します。</target>
        </trans-unit>
        <trans-unit id="32d9e6c3c8e59228cc1e78ece5ad6aef58df9887" translate="yes" xml:space="preserve">
          <source>The string literals are assembled as UTF-8 char arrays, and the postfix is applied to convert to wchar or dchar as necessary as a final step.</source>
          <target state="translated">文字列リテラルはUTF-8のchar配列として組み立てられ、最後のステップとして必要に応じてwcharやdcharに変換するためにpostfixが適用されます。</target>
        </trans-unit>
        <trans-unit id="e1f9801101f016db2a559c014cb349546f881701" translate="yes" xml:space="preserve">
          <source>The string representation of this &lt;code&gt;Tuple&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Tuple&lt;/code&gt; の文字列表現。</target>
        </trans-unit>
        <trans-unit id="95ecc1c83a5bc8c9a30b488436872240eb5cf883" translate="yes" xml:space="preserve">
          <source>The string that conventionally marks the end of all options (default '--').</source>
          <target state="translated">すべてのオプションの終わりを表す文字列 (デフォルトは '--')。</target>
        </trans-unit>
        <trans-unit id="a364f528b991ce1bd157c8e5da1cb5665c7d72c5" translate="yes" xml:space="preserve">
          <source>The string to be decoded</source>
          <target state="translated">デコードされる文字列</target>
        </trans-unit>
        <trans-unit id="a6de95ac63fa71760fd1a5b11770046f783a2524" translate="yes" xml:space="preserve">
          <source>The string to be encoded</source>
          <target state="translated">エンコードされる文字列</target>
        </trans-unit>
        <trans-unit id="e2b9d608f0fe83dbf1e7d9c07afcec863203911e" translate="yes" xml:space="preserve">
          <source>The string to capitalize.</source>
          <target state="translated">大文字にする文字列。</target>
        </trans-unit>
        <trans-unit id="cf1478823e2820a59dba10485e438b40c5348725" translate="yes" xml:space="preserve">
          <source>The string to center</source>
          <target state="translated">センターへの文字列</target>
        </trans-unit>
        <trans-unit id="2e9ccd0a631efea8fdc72a8c62875a331c029bd3" translate="yes" xml:space="preserve">
          <source>The string to demangle.</source>
          <target state="translated">解体するための紐。</target>
        </trans-unit>
        <trans-unit id="b67968a1752f9ee5eb2c12fda8191f64a6136ec4" translate="yes" xml:space="preserve">
          <source>The string to parse</source>
          <target state="translated">解析する文字列</target>
        </trans-unit>
        <trans-unit id="5681bac273a271a57db9a94a9ee8c1380568e850" translate="yes" xml:space="preserve">
          <source>The string to return the representation of.</source>
          <target state="translated">表現を返す文字列。</target>
        </trans-unit>
        <trans-unit id="6f72b4c4ff92e79f46043b6ac90fd712bc168dfd" translate="yes" xml:space="preserve">
          <source>The string used to separate the elements of an array or associative array (default is &quot;&quot; which means the elements are separated by whitespace).</source>
          <target state="translated">配列や連想配列の要素を区切るための文字列 (デフォルトは &quot;&quot; で、空白で区切ることを意味します)。</target>
        </trans-unit>
        <trans-unit id="555d16dee4415f5ab0acc21725fda20143e994af" translate="yes" xml:space="preserve">
          <source>The strip group of functions allow stripping of either leading, trailing, or both leading and trailing elements.</source>
          <target state="translated">関数の strip グループは、先行要素、末尾要素、または先行要素と末尾要素の両方のストリップを可能にします。</target>
        </trans-unit>
        <trans-unit id="58b660c2a16b28679d8eef710bda4717a0e26225" translate="yes" xml:space="preserve">
          <source>The structs &lt;code&gt;Yes&lt;/code&gt; and &lt;code&gt;No&lt;/code&gt; are provided as shorthand for &lt;code&gt;Flag!&quot;Name&quot;.yes&lt;/code&gt; and &lt;code&gt;Flag!&quot;Name&quot;.no&lt;/code&gt; and are preferred for brevity and readability. These convenience structs mean it is usually unnecessary and counterproductive to create an alias of a &lt;code&gt;Flag&lt;/code&gt; as a way of avoiding typing out the full type while specifying the affirmative or negative options.  Passing categorical data by means of unstructured &lt;code&gt;bool&lt;/code&gt; parameters is classified under &quot;simple-data coupling&quot; by Steve McConnell in the &lt;a href=&quot;https://google.com/search?btnI=I%27m+Feeling+Lucky&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;q=Code%20Complete&quot;&gt;Code Complete&lt;/a&gt; book, along with three other kinds of coupling. The author argues citing several studies that coupling has a negative effect on code quality. &lt;code&gt;Flag&lt;/code&gt; offers a simple structuring method for passing yes/no flags to APIs.</source>
          <target state="translated">構造体 &lt;code&gt;Yes&lt;/code&gt; および &lt;code&gt;No&lt;/code&gt; は、 &lt;code&gt;Flag!&quot;Name&quot;.yes&lt;/code&gt; および &lt;code&gt;Flag!&quot;Name&quot;.no&lt;/code&gt; 省略形として提供されており、簡潔さと読みやすさのために推奨されています。これらの便利な構造体は、肯定または否定のオプションを指定する際に完全な型を入力するのを避ける方法として、 &lt;code&gt;Flag&lt;/code&gt; エイリアスを作成することは通常不必要で逆効果です。非構造化 &lt;code&gt;bool&lt;/code&gt; パラメータを使用したカテゴリデータの受け渡しは、&lt;a href=&quot;https://google.com/search?btnI=I%27m+Feeling+Lucky&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;q=Code%20Complete&quot;&gt;コードコンプリート&lt;/a&gt;ブックのSteve McConnellによる「単純データカップリング」の下で、他の3種類のカップリングとともに分類されます。著者は、いくつかの研究を引用して、カップリングがコードの品質に悪影響を及ぼすと主張しています。 &lt;code&gt;Flag&lt;/code&gt; yes / noフラグをAPIに渡すための単純な構造化メソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="076392e866b208f90ee610d973e43efceb10e97e" translate="yes" xml:space="preserve">
          <source>The subclass of EncodingScheme to register.</source>
          <target state="translated">登録するEncodingSchemeのサブクラス。</target>
        </trans-unit>
        <trans-unit id="c1ed1f004de54db1586dcfe56503caa35fb79f44" translate="yes" xml:space="preserve">
          <source>The sum of &lt;code&gt;sizes&lt;/code&gt; must be equal 21.</source>
          <target state="translated">&lt;code&gt;sizes&lt;/code&gt; の合計は21でなければなりません。</target>
        </trans-unit>
        <trans-unit id="789facc231279c33347577b57e2a474fbfbd6abb" translate="yes" xml:space="preserve">
          <source>The sum of all bit lengths in one bitfield instantiation must be exactly 8, 16, 32, or 64. If padding is needed, just allocate one bitfield with an empty name.</source>
          <target state="translated">1 つのビ ッ ト フ ィ ール ド の イ ン ス タ ン シエーシ ョ ン内のすべてのビ ッ ト 長の合計は、 正確に 8、16、32、64 のいずれかでなければな り ません。パディングが必要な場合は、空の名前で1つのビットフィールドを割り当てるだけです。</target>
        </trans-unit>
        <trans-unit id="2cfe229a83e79df357cdfd328b79e038bc593b6f" translate="yes" xml:space="preserve">
          <source>The sum of all the elements in the range r.</source>
          <target state="translated">rの範囲内のすべての要素の合計。</target>
        </trans-unit>
        <trans-unit id="9be88f8537261298343db1ff319dde4340861d75" translate="yes" xml:space="preserve">
          <source>The supplied code as a delegate.</source>
          <target state="translated">提供されたコードをデリゲートとして使用します。</target>
        </trans-unit>
        <trans-unit id="63d3a3cda8996c92ecd751aecdc230c95f7170d2" translate="yes" xml:space="preserve">
          <source>The swapping strategy parameter is not implemented yet; currently it is ignored.</source>
          <target state="translated">スワッピング戦略パラメータはまだ実装されていません。</target>
        </trans-unit>
        <trans-unit id="80b980e073fe362e9683180ed237939256d93352" translate="yes" xml:space="preserve">
          <source>The swapping strategy to employ.</source>
          <target state="translated">採用するスワッピング戦略。</target>
        </trans-unit>
        <trans-unit id="170969e1d0fabb640f8089b36d7401a205bca51c" translate="yes" xml:space="preserve">
          <source>The swapping strategy to use.</source>
          <target state="translated">使うべきスワッピング戦略。</target>
        </trans-unit>
        <trans-unit id="98e99ba24a8243b8fd6b17bc749b4554c5b7f75e" translate="yes" xml:space="preserve">
          <source>The swapping strategy.</source>
          <target state="translated">スワッピング戦略です。</target>
        </trans-unit>
        <trans-unit id="48042820d83937bec0797943750b58634bf67f60" translate="yes" xml:space="preserve">
          <source>The symbol containing the &lt;code&gt;static foreach&lt;/code&gt; variables.</source>
          <target state="translated">&lt;code&gt;static foreach&lt;/code&gt; 変数を含むシンボル。</target>
        </trans-unit>
        <trans-unit id="56e1148f66671625bb0c6990da38dc2d64edea1a" translate="yes" xml:space="preserve">
          <source>The symbol this &lt;code&gt;alias this&lt;/code&gt; resolves to</source>
          <target state="translated">この &lt;code&gt;alias this&lt;/code&gt; 解決するこのエイリアスのシンボル</target>
        </trans-unit>
        <trans-unit id="dac6f5e28e8cd7e2f90032028de6bb0f0117f4f9" translate="yes" xml:space="preserve">
          <source>The symlink to create. A relative path is relative to the current working directory.</source>
          <target state="translated">作成するシンボリックリンク。相対パスは、現在の作業ディレクトリからの相対パスです。</target>
        </trans-unit>
        <trans-unit id="83a33998cfc84a9e39e9f0423cfd7357619092df" translate="yes" xml:space="preserve">
          <source>The synchronization gets released even if</source>
          <target state="translated">があっても同期は解除されます。</target>
        </trans-unit>
        <trans-unit id="f52720ebc8b4fb3263a1e381206af9d0efeeb0c2" translate="yes" xml:space="preserve">
          <source>The synchronized statement wraps a statement with a mutex to synchronize access among multiple threads.</source>
          <target state="translated">同期ステートメントは、複数のスレッド間でアクセスを同期させるために、ミューテックスでステートメントをラップします。</target>
        </trans-unit>
        <trans-unit id="54b1dbc833575883512c8f1664c887a121ae9fd3" translate="yes" xml:space="preserve">
          <source>The syntax is &lt;b&gt;/c/string/&lt;/b&gt;, where &lt;b&gt;c&lt;/b&gt; is either a single character, or multiple characters separated by whitespace or commas, and &lt;b&gt;string&lt;/b&gt; is the replacement text.</source>
          <target state="translated">構文は&lt;b&gt;/ c / string /です&lt;/b&gt;。ここで、&lt;b&gt;c&lt;/b&gt;は単一の文字、または空白またはコンマで区切られた複数の文字のいずれかであり、&lt;b&gt;string&lt;/b&gt;は置換テキストです。</target>
        </trans-unit>
        <trans-unit id="29a57978120d30d4470e32a4ab4fb731cec2bd76" translate="yes" xml:space="preserve">
          <source>The syntax trees are traversed to declare variables, load symbol tables, assign types, and determine the meaning of the program.</source>
          <target state="translated">構文ツリーをトラバースして、変数の宣言、シンボルテーブルのロード、型の割り当て、プログラムの意味を決定します。</target>
        </trans-unit>
        <trans-unit id="d9da9fc28de038f5884f945667be4b8054f95702" translate="yes" xml:space="preserve">
          <source>The syntax trees are traversed to declare variables, load symbol tables, assign types, and in general determine the meaning of the program.</source>
          <target state="translated">構文木は、変数の宣言、シンボルテーブルのロード、型の割り当て、そして一般的にプログラムの意味を決定するためにトラバースされます。</target>
        </trans-unit>
        <trans-unit id="fa94a6e6326b720f3ede8ff8d6c4dce16a4fa303" translate="yes" xml:space="preserve">
          <source>The system clock ticks are the ticks of the system clock at the highest precision that the system provides.</source>
          <target state="translated">システムクロックの目盛りは、システムが提供する最高精度のシステムクロックの目盛りです。</target>
        </trans-unit>
        <trans-unit id="5387aa28c9051257b0dae7b093c61c8a7eb3427d" translate="yes" xml:space="preserve">
          <source>The system-provided garbage-collector allocator. This should be the default fallback allocator tapping into system memory. It offers manual &lt;code&gt;free&lt;/code&gt; and dutifully collects litter.</source>
          <target state="translated">システム提供のガベージコレクタアロケータ。これは、システムメモリを利用するデフォルトのフォールバックアロケータである必要があります。マニュアルを &lt;code&gt;free&lt;/code&gt; で提供し、ゴミを忠実に収集します。</target>
        </trans-unit>
        <trans-unit id="ec81049f6e21b9ea49ff325809160b315623cf2d" translate="yes" xml:space="preserve">
          <source>The table below gives a synopsis of predefined allocator building blocks, with their respective modules. Either &lt;code&gt;import&lt;/code&gt; the needed modules individually, or &lt;code&gt;import&lt;/code&gt;&lt;code&gt;std.experimental.building_blocks&lt;/code&gt;, which imports them all &lt;code&gt;public&lt;/code&gt;ly. The building blocks can be assembled in unbounded ways and also combined with your own. For a collection of typical and useful preassembled allocators and for inspiration in defining more such assemblies, refer to &lt;a href=&quot;std_experimental_allocator_showcase&quot;&gt;&lt;code&gt;std.experimental.allocator.showcase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の表は、事前定義されたアロケータービルディングブロックの概要と、それぞれのモジュールを示しています。どちらの &lt;code&gt;import&lt;/code&gt; 個別に必要なモジュールを、あるいは &lt;code&gt;import&lt;/code&gt; &lt;code&gt;std.experimental.building_blocks&lt;/code&gt; 、どの輸入それらをすべて &lt;code&gt;public&lt;/code&gt; LY。ビルディングブロックは、無制限に組み立てたり、独自のものと組み合わせたりすることができます。一般的で有用な事前に組み立てられたアロケーターのコレクション、およびそのようなアセンブリーをさらに定義するためのインスピレーションについては、&lt;a href=&quot;std_experimental_allocator_showcase&quot;&gt; &lt;code&gt;std.experimental.allocator.showcase&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d173662a2aa058963145fe71e5e20907062a55be" translate="yes" xml:space="preserve">
          <source>The target hardware does not have a floating point unit</source>
          <target state="translated">ターゲットハードウェアには浮動小数点単位がありません。</target>
        </trans-unit>
        <trans-unit id="c5cdb1793dc5882606089de2cbe88b09e1226416" translate="yes" xml:space="preserve">
          <source>The target hardware has a floating point unit</source>
          <target state="translated">ターゲットハードウェアには、浮動小数点単位の</target>
        </trans-unit>
        <trans-unit id="b0979a69d6f3a7dae7324755cd1aa56f216e319b" translate="yes" xml:space="preserve">
          <source>The target object</source>
          <target state="translated">対象となるオブジェクト</target>
        </trans-unit>
        <trans-unit id="0b824dcd9bca9b5db9480c831c6a63d26770ea48" translate="yes" xml:space="preserve">
          <source>The target of the search. Must be an input range. If any of &lt;code&gt;needles&lt;/code&gt; is a range with elements comparable to elements in &lt;code&gt;haystack&lt;/code&gt;, then &lt;code&gt;haystack&lt;/code&gt; must be a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; such that the search can backtrack.</source>
          <target state="translated">検索のターゲット。入力範囲でなければなりません。いずれかの場合には &lt;code&gt;needles&lt;/code&gt; 中の要素と同等の要素を持つ範囲である &lt;code&gt;haystack&lt;/code&gt; 、そして &lt;code&gt;haystack&lt;/code&gt; でなければならない&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前進レンジは、&lt;/a&gt;検索がバックトラックすることができるように。</target>
        </trans-unit>
        <trans-unit id="1bfc030365108c10d6974605e9bd398b8361c092" translate="yes" xml:space="preserve">
          <source>The target range to copy common elements to.</source>
          <target state="translated">共通要素をコピーする対象範囲</target>
        </trans-unit>
        <trans-unit id="829e896e39b70090cbc3b2de79f25fe9335f1b77" translate="yes" xml:space="preserve">
          <source>The target range.</source>
          <target state="translated">目標とする範囲。</target>
        </trans-unit>
        <trans-unit id="23350db16fa1f3e6288ccb87e5a181ba79379e10" translate="yes" xml:space="preserve">
          <source>The target supports interfacing with Objective-C</source>
          <target state="translated">ターゲットは Objective-C とのインターフェイスをサポートしています。</target>
        </trans-unit>
        <trans-unit id="eac1bff04784409ef03a30482f19ef41091d6414" translate="yes" xml:space="preserve">
          <source>The target type in the conversion or comparison</source>
          <target state="translated">変換または比較のターゲットタイプ</target>
        </trans-unit>
        <trans-unit id="390654f1dbf50ff204a2f1fd9ed2609258c428a9" translate="yes" xml:space="preserve">
          <source>The target type of the cast</source>
          <target state="translated">キャストのターゲットタイプ</target>
        </trans-unit>
        <trans-unit id="5431c3bccb7e8fdc6dc54d831207394bad385ccd" translate="yes" xml:space="preserve">
          <source>The target variable.</source>
          <target state="translated">ターゲット変数です。</target>
        </trans-unit>
        <trans-unit id="b71a4a76d74bf9f8e3d2c97011ae3038c9fc6fff" translate="yes" xml:space="preserve">
          <source>The technical term 'Special Functions' includes several families of transcendental functions, which have important applications in particular branches of mathematics and physics.</source>
          <target state="translated">専門用語「特殊関数」には、数学や物理学の特定の分野で重要な応用がある超越的な関数のいくつかのファミリーが含まれています。</target>
        </trans-unit>
        <trans-unit id="2b45d76d889fde617363950e6293b054095035b5" translate="yes" xml:space="preserve">
          <source>The template API is slightly more efficient. It does not have to allocate memory dynamically, all memory is allocated on the stack. The OOP API has to allocate in the finish method if no buffer was provided. If you provide a buffer to the OOP APIs finish function, it doesn't allocate, but the &lt;a href=&quot;#Digest&quot;&gt;&lt;code&gt;Digest&lt;/code&gt;&lt;/a&gt; classes still have to be created using &lt;code&gt;new&lt;/code&gt; which allocates them using the GC.  The OOP API is useful to change the digest function and/or digest backend at 'runtime'. The benefit here is that switching e.g. Phobos MD5Digest and an OpenSSLMD5Digest implementation is ABI compatible.  If just one specific digest type and backend is needed, the template API is usually a good fit. In this simplest case, the template API can even be used without templates: Just use the &quot;&lt;b&gt;x&lt;/b&gt;&quot; structs directly.</source>
          <target state="translated">テンプレートAPIは少し効率的です。メモリを動的に割り当てる必要はありません。すべてのメモリがスタックに割り当てられます。バッファが提供されなかった場合、OOP APIはfinishメソッドで割り当てる必要があります。 OOP APIの終了関数にバッファーを提供しても、割り当ては行われませんが、GCを使用してそれらを割り当てる &lt;code&gt;new&lt;/code&gt; を使用して&lt;a href=&quot;#Digest&quot;&gt; &lt;code&gt;Digest&lt;/code&gt; &lt;/a&gt;クラスを作成する必要があります。 OOP APIは、「実行時」にダイジェスト機能やダイジェストバックエンドを変更するのに役立ちます。ここでの利点は、たとえばPhobos MD5DigestとOpenSSLMD5Digest実装の切り替えがABI互換であることです。特定のダイジェストタイプとバックエンドが1つだけ必要な場合は、通常、テンプレートAPIが適しています。この最も単純なケースでは、テンプレートAPIはテンプレートなしでも使用できます。「&lt;b&gt;x&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&quot;直接構造化します。</target>
        </trans-unit>
        <trans-unit id="408001ca506523fa6af663497d5def923a607239" translate="yes" xml:space="preserve">
          <source>The template parameter &lt;code&gt;T&lt;/code&gt; specifies the type to return. Possible values are &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;ubyte&lt;/code&gt; to return &lt;code&gt;char[]&lt;/code&gt; or &lt;code&gt;ubyte[]&lt;/code&gt;. If asking for &lt;code&gt;char&lt;/code&gt;, content will be converted from the connection character set (specified in HTTP response headers or FTP connection properties, both ISO-8859-1 by default) to UTF-8.</source>
          <target state="translated">テンプレートパラメータ &lt;code&gt;T&lt;/code&gt; は、返されるタイプを指定します。可能な値は &lt;code&gt;char&lt;/code&gt; と &lt;code&gt;ubyte&lt;/code&gt; で、 &lt;code&gt;char[]&lt;/code&gt; または &lt;code&gt;ubyte[]&lt;/code&gt; を返します。 &lt;code&gt;char&lt;/code&gt; を要求すると、コンテンツは接続文字セット（HTTP応答ヘッダーまたはFTP接続プロパティで指定され、デフォルトではISO-8859-1）からUTF-8に変換されます。</target>
        </trans-unit>
        <trans-unit id="3d301625295a49a8e01e8072c1823836d6260302" translate="yes" xml:space="preserve">
          <source>The template picked to instantiate is the one that is most specialized that fits the types of the</source>
          <target state="translated">インスタンス化するために選択されたテンプレートは、そのテンプレートが</target>
        </trans-unit>
        <trans-unit id="02b51510e4339a80ea7cc2a65d41d079d75e78b8" translate="yes" xml:space="preserve">
          <source>The template to instantiate.</source>
          <target state="translated">インスタンス化するテンプレート。</target>
        </trans-unit>
        <trans-unit id="e41f924354ea35f5712eb828813900cd1d5f4161" translate="yes" xml:space="preserve">
          <source>The term and concept of a 'critical region' comes from &lt;a href=&quot;https://github.com/mono/mono/blob/521f4a198e442573c400835ef19bbb36b60b0ebb/mono/metadata/sgen-gc.h#L925&quot;&gt;Mono's SGen garbage collector&lt;/a&gt;.</source>
          <target state="translated">「クリティカルリージョン」という用語と概念は、&lt;a href=&quot;https://github.com/mono/mono/blob/521f4a198e442573c400835ef19bbb36b60b0ebb/mono/metadata/sgen-gc.h#L925&quot;&gt;MonoのSGenガベージコレクターに&lt;/a&gt;由来します。</target>
        </trans-unit>
        <trans-unit id="efe68f5f28809042f03e04ab3e7e40904902798b" translate="yes" xml:space="preserve">
          <source>The tested value</source>
          <target state="translated">テスト値</target>
        </trans-unit>
        <trans-unit id="836717195b2e4f6e650af52f82b03152a0dc0a7a" translate="yes" xml:space="preserve">
          <source>The text from &lt;a href=&quot;http://unicode.org/cldr/data/common/supplemental/windowsZones.xml&quot;&gt;windowsZones.xml&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://unicode.org/cldr/data/common/supplemental/windowsZones.xml&quot;&gt;windowsZones.xml&lt;/a&gt;からのテキスト</target>
        </trans-unit>
        <trans-unit id="459f3d558c2480422a70a7a05484244d80510d43" translate="yes" xml:space="preserve">
          <source>The text to print at the beginning of the help output.</source>
          <target state="translated">ヘルプ出力の最初に印刷するテキスト。</target>
        </trans-unit>
        <trans-unit id="b43a60a00dd34982ab5b9431db8979ee331c8fcd" translate="yes" xml:space="preserve">
          <source>The text to printed at the beginning of the help output.</source>
          <target state="translated">ヘルプ出力の先頭に印刷するテキスト。</target>
        </trans-unit>
        <trans-unit id="f99eb9686d85d18418cbec2f3108af60157b8372" translate="yes" xml:space="preserve">
          <source>The third form, &lt;code&gt;goto case;&lt;/code&gt;, transfers to the next &lt;a href=&quot;#CaseStatement&quot;&gt;&lt;i&gt;CaseStatement&lt;/i&gt;&lt;/a&gt; of the innermost enclosing &lt;a href=&quot;#SwitchStatement&quot;&gt;&lt;i&gt;SwitchStatement&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">3番目の形式は &lt;code&gt;goto case;&lt;/code&gt; 、最も内側にある&lt;a href=&quot;#SwitchStatement&quot;&gt;&lt;i&gt;SwitchStatementの&lt;/i&gt;&lt;/a&gt;次の&lt;a href=&quot;#CaseStatement&quot;&gt;&lt;i&gt;CaseStatement&lt;/i&gt;&lt;/a&gt;に転送します。&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="0d93a13c865f0a3f12bf9f0bb2248b62195335a7" translate="yes" xml:space="preserve">
          <source>The third version counts the elements for which &lt;code&gt;pred(x)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Performs &amp;Omicron;(&lt;code&gt;haystack.length&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">3番目のバージョンは、 &lt;code&gt;pred(x)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; である要素をカウントします。 &lt;code&gt;pred&lt;/code&gt; の &amp;Omicron;（ &lt;code&gt;haystack.length&lt;/code&gt; ）評価を実行します。</target>
        </trans-unit>
        <trans-unit id="a7f1a71c5e73a907487dd15adada9e34f7e659b3" translate="yes" xml:space="preserve">
          <source>The thread function.</source>
          <target state="translated">スレッド機能です。</target>
        </trans-unit>
        <trans-unit id="3959bc13b481b7efab32161f7b4d802658e73e9a" translate="yes" xml:space="preserve">
          <source>The thread identifier to search for.</source>
          <target state="translated">検索するスレッドの識別子。</target>
        </trans-unit>
        <trans-unit id="5a0f4bf2e74aee3208cf1615166945a5d795e350" translate="yes" xml:space="preserve">
          <source>The thread module provides support for thread creation and management.</source>
          <target state="translated">スレッドモジュールは、スレッドの作成と管理をサポートします。</target>
        </trans-unit>
        <trans-unit id="d7abe70146b93589cb3df68907f1263f3d11f70c" translate="yes" xml:space="preserve">
          <source>The thread object associated with the thread identifier, null if not found.</source>
          <target state="translated">スレッド識別子に関連付けられたスレッドオブジェクト。</target>
        </trans-unit>
        <trans-unit id="ab55fec985d480d7e55fafd41bc48fa26e59c5c7" translate="yes" xml:space="preserve">
          <source>The thread object representing the calling thread. The result of deleting this object is undefined. If the current thread is not attached to the runtime, a null reference is returned.</source>
          <target state="translated">呼び出し元のスレッドを表すスレッドオブジェクト。このオブジェクトを削除した結果は未定義です。現在のスレッドがランタイムにアタッチされていない場合、NULL参照が返されます。</target>
        </trans-unit>
        <trans-unit id="e5711fdf4eb878a460acdc3e1a74ec3adfd4c562" translate="yes" xml:space="preserve">
          <source>The thread to add.</source>
          <target state="translated">追加するスレッド。</target>
        </trans-unit>
        <trans-unit id="7d29c86c6e1877f0c1dbf42c7ab48cb432ebae10" translate="yes" xml:space="preserve">
          <source>The thread to remove.</source>
          <target state="translated">撤去するスレッドです。</target>
        </trans-unit>
        <trans-unit id="d0b4719e19dcec3e27e7ac05162455919bfcbe02" translate="yes" xml:space="preserve">
          <source>The threadsafe version of the &lt;a href=&quot;#BitmappedBlock&quot;&gt;&lt;code&gt;BitmappedBlock&lt;/code&gt;&lt;/a&gt;. The semantics of the &lt;code&gt;SharedBitmappedBlock&lt;/code&gt; are identical to the regular &lt;a href=&quot;#BitmappedBlock&quot;&gt;&lt;code&gt;BitmappedBlock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#BitmappedBlock&quot;&gt; &lt;code&gt;BitmappedBlock&lt;/code&gt; &lt;/a&gt;のスレッドセーフバージョン。 &lt;code&gt;SharedBitmappedBlock&lt;/code&gt; のセマンティクスは、通常の&lt;a href=&quot;#BitmappedBlock&quot;&gt; &lt;code&gt;BitmappedBlock&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="59a01b618381df97fff6e53a1c501e32c03fcf01" translate="yes" xml:space="preserve">
          <source>The threadsafe version of the &lt;code&gt;Region&lt;/code&gt; allocator. Allocations and deallocations are lock-free based using &lt;a href=&quot;core_atomic#cas&quot;&gt;&lt;code&gt;core.atomic.cas&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Region&lt;/code&gt; アロケータのスレッドセーフバージョン。割り当てと割り当て解除は、&lt;a href=&quot;core_atomic#cas&quot;&gt; &lt;code&gt;core.atomic.cas&lt;/code&gt; &lt;/a&gt;を使用してロックフリーに基づいています。</target>
        </trans-unit>
        <trans-unit id="1aa46d46c716c543c618abaaa5d085bc00056cfe" translate="yes" xml:space="preserve">
          <source>The tick of the system clock (as a &lt;code&gt;TickDuration&lt;/code&gt;) when the application started.</source>
          <target state="translated">アプリケーションの起動時のシステムクロックのティック（ &lt;code&gt;TickDuration&lt;/code&gt; として）。</target>
        </trans-unit>
        <trans-unit id="c9d9d06b3436a3b01b898cdc70083c5a552bbada" translate="yes" xml:space="preserve">
          <source>The tid register by name.</source>
          <target state="translated">名前別のチッドレジスタです。</target>
        </trans-unit>
        <trans-unit id="c95778519910f76a9057566bdc33da531d73931d" translate="yes" xml:space="preserve">
          <source>The time complexity of &lt;code&gt;resolveInternalPointer&lt;/code&gt; is &amp;Omicron;(&lt;code&gt;k&lt;/code&gt;), where &lt;code&gt;k&lt;/code&gt; is the size of the object within which the internal pointer is looked up.</source>
          <target state="translated">&lt;code&gt;resolveInternalPointer&lt;/code&gt; の時間の複雑さは&amp;Omicron;（ &lt;code&gt;k&lt;/code&gt; ）です。ここで、 &lt;code&gt;k&lt;/code&gt; は内部ポインターが検索されるオブジェクトのサイズです。</target>
        </trans-unit>
        <trans-unit id="c6f885eba6e13ebbe7785527359e11e5b18d7b86" translate="yes" xml:space="preserve">
          <source>The time in this time zone that needs to be adjusted to UTC time.</source>
          <target state="translated">このタイムゾーンの時間をUTC時間に合わせる必要があります。</target>
        </trans-unit>
        <trans-unit id="36444ba6ba0b4c42e3d384843ef7cb9d529fafd9" translate="yes" xml:space="preserve">
          <source>The time it takes for a collection to complete is not bounded. While in practice it is very quick, this cannot normally be guaranteed.</source>
          <target state="translated">コレクションが完了するまでにかかる時間には制限がありません。実際には非常に速いのですが、通常はこれを保証することはできません。</target>
        </trans-unit>
        <trans-unit id="de1882702ad690d9d775a9f36384bf0f0cf2e003" translate="yes" xml:space="preserve">
          <source>The time point to check for inclusion in this interval.</source>
          <target state="translated">この間隔に含まれているかどうかを確認するタイムポイント。</target>
        </trans-unit>
        <trans-unit id="6e148efcac14a5504ed5ebc4915f1425f4ffaad7" translate="yes" xml:space="preserve">
          <source>The time point to check whether this interval is after it.</source>
          <target state="translated">この間隔の後にあるかどうかを確認するためのタイムポイントです。</target>
        </trans-unit>
        <trans-unit id="0af6ef24e2680b0852356a3c276c84d96252cda5" translate="yes" xml:space="preserve">
          <source>The time point to check whether this interval is before it.</source>
          <target state="translated">この間隔がその前にあるかどうかを確認するためのタイムポイントです。</target>
        </trans-unit>
        <trans-unit id="8a3820a8c6e406527bb35a80565a009d598d8a36" translate="yes" xml:space="preserve">
          <source>The time point to set &lt;code&gt;begin&lt;/code&gt; to.</source>
          <target state="translated">設定 &lt;code&gt;begin&lt;/code&gt; 時間の開始点。</target>
        </trans-unit>
        <trans-unit id="cbec4c576826e4c65a07a27c4030261f911b3fc7" translate="yes" xml:space="preserve">
          <source>The time point to set end to.</source>
          <target state="translated">終了を設定するタイムポイント。</target>
        </trans-unit>
        <trans-unit id="4e8c71e16602a3ead734892883c0297513fcb288" translate="yes" xml:space="preserve">
          <source>The time point which begins the interval.</source>
          <target state="translated">インターバルを開始するタイムポイント。</target>
        </trans-unit>
        <trans-unit id="b2fbbe21f1348e2b8375bc085e626db9a6aa48c4" translate="yes" xml:space="preserve">
          <source>The time point which ends (but is not included in) the interval.</source>
          <target state="translated">インターバルを終了する(ただし、インターバルには含まれない)タイムポイント。</target>
        </trans-unit>
        <trans-unit id="78c4a788ebf74ce66cd510d9291804e7429c59df" translate="yes" xml:space="preserve">
          <source>The time point which ends the interval.</source>
          <target state="translated">インターバルを終了するタイムポイント。</target>
        </trans-unit>
        <trans-unit id="a07ced07ea48cf9efd3c59008997a5861e92661c" translate="yes" xml:space="preserve">
          <source>The time portion of &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の時刻部分。</target>
        </trans-unit>
        <trans-unit id="eaefa3fbda7de51442bf3c3c08acb463add5f535" translate="yes" xml:space="preserve">
          <source>The time required of the base function</source>
          <target state="translated">ベース関数の所要時間</target>
        </trans-unit>
        <trans-unit id="5dfcadc4d17bd6640e6259395ec434dc6bc95330" translate="yes" xml:space="preserve">
          <source>The time required of the target function</source>
          <target state="translated">目的の機能の所要時間</target>
        </trans-unit>
        <trans-unit id="48cf786f30ef005c486cb7a01e2f10f8f8403d94" translate="yes" xml:space="preserve">
          <source>The time to return if the given file does not exist.</source>
          <target state="translated">与えられたファイルが存在しない場合の返却時間。</target>
        </trans-unit>
        <trans-unit id="4267537c103e163837339d1b65e1d8cf5f9910a8" translate="yes" xml:space="preserve">
          <source>The time to wait.</source>
          <target state="translated">待機時間です。</target>
        </trans-unit>
        <trans-unit id="fa99618f433466483613abfd766711a1f7a82462" translate="yes" xml:space="preserve">
          <source>The time units of the &lt;code&gt;Duration&lt;/code&gt; (e.g. &lt;code&gt;&quot;days&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; の時間単位（ &lt;code&gt;&quot;days&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e6cd7e80f003f95225b75b6571da8250b5085bd4" translate="yes" xml:space="preserve">
          <source>The time units of the &lt;code&gt;TickDuration&lt;/code&gt; (e.g. &lt;code&gt;&quot;msecs&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;TickDuration&lt;/code&gt; の時間単位（ &lt;code&gt;&quot;msecs&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="da60824664e52c129d1706b86eb17c66b6fccefc" translate="yes" xml:space="preserve">
          <source>The time zone for the SysTime that's returned.</source>
          <target state="translated">返されたSysTimeのタイムゾーン。</target>
        </trans-unit>
        <trans-unit id="c438d5ef1eeaa45747297e85768ff04bc9674297" translate="yes" xml:space="preserve">
          <source>The time zone that the &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; will be in (&lt;code&gt;FILETIME&lt;/code&gt;s are in UTC).</source>
          <target state="translated">&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;が入るタイムゾーン（ &lt;code&gt;FILETIME&lt;/code&gt; はUTCです）。</target>
        </trans-unit>
        <trans-unit id="8ed6f652fe44fd70fdb71a9b99c39e57d001f270" translate="yes" xml:space="preserve">
          <source>The time zone that the time in the &lt;code&gt;SYSTEMTIME&lt;/code&gt; struct is assumed to be (if the &lt;code&gt;SYSTEMTIME&lt;/code&gt; was supplied by a Windows system call, the &lt;code&gt;SYSTEMTIME&lt;/code&gt; will either be in local time or UTC, depending on the call).</source>
          <target state="translated">で、時間という時間帯 &lt;code&gt;SYSTEMTIME&lt;/code&gt; の構造体は、（場合を想定している &lt;code&gt;SYSTEMTIME&lt;/code&gt; は、Windowsのシステムコールによって供給された、 &lt;code&gt;SYSTEMTIME&lt;/code&gt; は、いずれかの呼び出しに応じて、現地時間またはUTCになります）。</target>
        </trans-unit>
        <trans-unit id="e2b1325df63f2bced3800f46b247c623c3e4272e" translate="yes" xml:space="preserve">
          <source>The time zone to convert the given time to (no conversion occurs if null).</source>
          <target state="translated">与えられた時間を変換するタイムゾーン(nullの場合は変換されません)。</target>
        </trans-unit>
        <trans-unit id="07061a5295594952467858d09a80f0ac4c6b93c5" translate="yes" xml:space="preserve">
          <source>The time zone which the DOS file time is assumed to be in.</source>
          <target state="translated">DOSファイルの時刻を想定したタイムゾーン。</target>
        </trans-unit>
        <trans-unit id="ea5d10f63e5499e351af6e045b5284865995d1c6" translate="yes" xml:space="preserve">
          <source>The time-domain signal.</source>
          <target state="translated">時間領域の信号です。</target>
        </trans-unit>
        <trans-unit id="77a3aa828967d445cff64c8dd096774ce4063dcd" translate="yes" xml:space="preserve">
          <source>The timeout duration to set. Must not be negative.</source>
          <target state="translated">設定するタイムアウト時間。負の値であってはなりません。</target>
        </trans-unit>
        <trans-unit id="d16c09d69ed3827cc0d9a393d7d97a0e7218d947" translate="yes" xml:space="preserve">
          <source>The times when endianness matters are:</source>
          <target state="translated">エンディアンスが問題になる時代です。</target>
        </trans-unit>
        <trans-unit id="e3fa37b42db66accd6b9bcd0e0be5ca501e23ea7" translate="yes" xml:space="preserve">
          <source>The total hnsecs from midnight, January 1st, 1 A.D. UTC. This is the internal representation of &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1月1日の午前0時からADの1 UTCまでの合計hnsec。これは&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の内部表現です。</target>
        </trans-unit>
        <trans-unit id="1c5851853cba4938d9ece2d746e33f63f5ccc8b6" translate="yes" xml:space="preserve">
          <source>The total number of CPU cores available on the current machine, as reported by the operating system.</source>
          <target state="translated">オペレーティング システムによって報告された、現在のマシンで利用可能な CPU コアの総数。</target>
        </trans-unit>
        <trans-unit id="79b5fcc0a58019c01762b4288a59bbc0fed9cdab" translate="yes" xml:space="preserve">
          <source>The total number of fields minus the number of hidden fields.</source>
          <target state="translated">フィールドの総数から非表示フィールドの数を引いたものです。</target>
        </trans-unit>
        <trans-unit id="dc0f294e7939a4a8cc8e219285559a0f838c9d26" translate="yes" xml:space="preserve">
          <source>The total number of valid bits in the given bit array</source>
          <target state="translated">指定されたビット配列の有効ビット数の合計。</target>
        </trans-unit>
        <trans-unit id="df0ace455640aad44a2f2df358df6cfc839cb3dc" translate="yes" xml:space="preserve">
          <source>The total size of a static array cannot exceed 16Mb.</source>
          <target state="translated">静的配列の合計サイズは16MBを超えることはできません。</target>
        </trans-unit>
        <trans-unit id="976a549fe53e07ee95927e3a3f5dc68542025ca7" translate="yes" xml:space="preserve">
          <source>The traditional C way of detecting and reporting errors is not traditional, it is ad-hoc and varies from function to function, including:</source>
          <target state="translated">エラーを検出して報告するCの方法は伝統的なものではなく、アドホックなものであり、機能によって異なります。</target>
        </trans-unit>
        <trans-unit id="67c33a524b8d09894199c567d354a8e0cb98ab34" translate="yes" xml:space="preserve">
          <source>The trailing end of the sub-format string following the specifier for each item is interpreted as the array delimiter, and is therefore omitted following the last array item. The &lt;b&gt;%|&lt;/b&gt; delimiter specifier may be used to indicate where the delimiter begins, so that the portion of the format string prior to it will be retained in the last array element:</source>
          <target state="translated">各項目の指定子に続くサブフォーマット文字列の末尾は、配列の区切り文字として解釈されるため、最後の配列項目に続いて省略されます。&lt;b&gt;％| &lt;/b&gt;区切り文字指定子は、区切り文字の開始位置を示すために使用できます。これにより、フォーマット文字列の前の部分が最後の配列要素に保持されます。</target>
        </trans-unit>
        <trans-unit id="ba1799b6274ed3732b914694e0713f19f1425685" translate="yes" xml:space="preserve">
          <source>The transformation target</source>
          <target state="translated">変換対象</target>
        </trans-unit>
        <trans-unit id="dc8b213c861da206308d6e24e6eb30fbdfae1604" translate="yes" xml:space="preserve">
          <source>The transformation to apply.</source>
          <target state="translated">適用する変換。</target>
        </trans-unit>
        <trans-unit id="6b4ca3ee54513a021c5a032735367ac7e4c3f685" translate="yes" xml:space="preserve">
          <source>The transformation to apply. Either a unary function (&lt;code&gt;unaryFun!transform(element)&lt;/code&gt;), or a binary function (&lt;code&gt;binaryFun!transform(element, index)&lt;/code&gt;).</source>
          <target state="translated">適用する変換。単項関数（ &lt;code&gt;unaryFun!transform(element)&lt;/code&gt; ）または二項関数（ &lt;code&gt;binaryFun!transform(element, index)&lt;/code&gt; ）のいずれか。</target>
        </trans-unit>
        <trans-unit id="b1e46c489c0f174beeea6508fe063266ccec2c4d" translate="yes" xml:space="preserve">
          <source>The transversal assumes, without verifying, that the elements of a range of ranges have all the same length. This option is useful if checking was already done from the outside of the range.</source>
          <target state="translated">横軸は、範囲の要素がすべて同じ長さであることを検証せずに仮定します。このオプションは、範囲の外側から既にチェックが行われている場合に便利です。</target>
        </trans-unit>
        <trans-unit id="c892e981eb5136632b424a66b388d449fc7ea3de" translate="yes" xml:space="preserve">
          <source>The transversal enforces that the elements of a range of ranges have all the same length (e.g. an array of arrays, all having the same length). Checking is done once upon construction of the transversal range.</source>
          <target state="translated">横断は,範囲の要素がすべて同じ長さを持つことを強制します(例えば,配列の配列で,すべて同じ長さを持ちます).チェックは,横方向範囲の構築時に一度だけ行われます.</target>
        </trans-unit>
        <trans-unit id="39be873b141578a1b5b94098b6cdd594b486bf6c" translate="yes" xml:space="preserve">
          <source>The try/catch/finally statements look a lot nicer than endless if (error) goto errorhandler; statements.</source>
          <target state="translated">try/catch/finally ステートメントは、無限に続く if (error)goto errorhandler;ステートメントよりもずっと素敵に見えます。</target>
        </trans-unit>
        <trans-unit id="2180bb589eb009453566d9091bc41a602b56f38e" translate="yes" xml:space="preserve">
          <source>The tuple passes in a range closed to the left and open to the right (consistent with built-in slices), e.g. &lt;code&gt;tuple(1, 3)&lt;/code&gt; means indices &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; but not &lt;code&gt;3&lt;/code&gt;.</source>
          <target state="translated">タプルは、左及び（内蔵スライスと一致する）、右に開い、例えばに対して閉じ範囲内を通過 &lt;code&gt;tuple(1, 3)&lt;/code&gt; 手段インデックス &lt;code&gt;1&lt;/code&gt; 及び &lt;code&gt;2&lt;/code&gt; ではなく &lt;code&gt;3&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07a7ad5d5f1c875f8f019e5586ed049f63bb8fa1" translate="yes" xml:space="preserve">
          <source>The two functions are almost identical semantically. The expressions in the first are lowered to contract blocks that look almost exactly like the second, except that a separate block is created for each expression in the first, thus avoiding shadowing variable names.</source>
          <target state="translated">この2つの関数は意味的にはほぼ同じです。前者の式は、2つ目の式とほぼ同じように見えるコントラクトブロックに下げられますが、1つ目の式ごとに別のブロックが作成され、変数名のシャドーイングを避けることができます。</target>
        </trans-unit>
        <trans-unit id="28b3f8f71ef0f4ce43325479aa6cdea23771283e" translate="yes" xml:space="preserve">
          <source>The two sockets are indistinguishable.</source>
          <target state="translated">2つのソケットは見分けがつかない。</target>
        </trans-unit>
        <trans-unit id="61509f7d94291812c28aff0f194b21e094315464" translate="yes" xml:space="preserve">
          <source>The type being allocated embeds no pointers. Examples: &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;int[]&lt;/code&gt;, &lt;code&gt; Tuple!(int, float)&lt;/code&gt;. The implicit conservative assumption is that the type has members with indirections so it needs to be scanned if garbage collected. Example of types with pointers: &lt;code&gt;int*[]&lt;/code&gt;, &lt;code&gt;Tuple!(int, string)&lt;/code&gt;.</source>
          <target state="translated">割り当てられる型にはポインタが埋め込まれていません。例： &lt;code&gt;int&lt;/code&gt; 、 &lt;code&gt;int[]&lt;/code&gt; 、 &lt;code&gt; Tuple!(int, float)&lt;/code&gt; 。暗黙的な保守的な仮定では、型には間接参照を持つメンバーがあるため、ガベージコレクションが行われた場合はスキャンする必要があります。ポインタを持つ型の例： &lt;code&gt;int*[]&lt;/code&gt; 、 &lt;code&gt;Tuple!(int, string)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c92e87e9681d72db37be621f13a19e6f9ccab9d8" translate="yes" xml:space="preserve">
          <source>The type being allocated is &lt;code&gt;immutable&lt;/code&gt; and has no pointers. The thread that allocated it must also deallocate it. Example: &lt;code&gt;immutable(int)&lt;/code&gt;.</source>
          <target state="translated">割り当てられる型は &lt;code&gt;immutable&lt;/code&gt; であり、ポインタはありません。それを割り当てたスレッドも、割り当てを解除する必要があります。例： &lt;code&gt;immutable(int)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e05464f951110a64f08a5f46efef5075a235c4f" translate="yes" xml:space="preserve">
          <source>The type being allocated may be shared across threads, embeds no indirections, and has fixed size.</source>
          <target state="translated">割り当てられた型はスレッド間で共有され、間接的な処理は行われず、サイズは固定されています。</target>
        </trans-unit>
        <trans-unit id="31e0418a4ffc820d767ece7d24f4809101c1c145" translate="yes" xml:space="preserve">
          <source>The type being allocated may be shared across threads, may embed indirections, and has fixed size.</source>
          <target state="translated">割り当てられた型はスレッド間で共有され、間接的に埋め込まれ、サイズが固定されている可能性があります。</target>
        </trans-unit>
        <trans-unit id="6fe4cebdd8e8add445c91158cc91cb4158edec6a" translate="yes" xml:space="preserve">
          <source>The type being allocated may be shared across threads, may embed indirections, and has variable size.</source>
          <target state="translated">割り当てられた型はスレッド間で共有され、間接的に埋め込まれ、可変サイズを持つことができます。</target>
        </trans-unit>
        <trans-unit id="ddfa6b8808ffdca7214f401f8531dd3f2c5d3a94" translate="yes" xml:space="preserve">
          <source>The type can be inferred from the initializer:</source>
          <target state="translated">型はイニシャライザから推測できます。</target>
        </trans-unit>
        <trans-unit id="a2bca00fd97360bf19d51b245e76c8ddf38d445e" translate="yes" xml:space="preserve">
          <source>The type for a callback function. This is legacy and deprecated. It is included for historical compatibility and is not documented.</source>
          <target state="translated">コールバック関数の型。これはレガシーで非推奨です。歴史的な互換性のために含まれており、ドキュメント化されていません。</target>
        </trans-unit>
        <trans-unit id="121e0a2d6317bfb42929d38aae907c92fbe1c037" translate="yes" xml:space="preserve">
          <source>The type for a unary expression is incompatible. Print error message.</source>
          <target state="translated">単項式の型は互換性がありません。エラー・メッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="6c3d19b0730f008ab63e19c7a8d36ffbf8fb1da1" translate="yes" xml:space="preserve">
          <source>The type of &lt;code&gt;Throwable&lt;/code&gt; to handle.</source>
          <target state="translated">処理する &lt;code&gt;Throwable&lt;/code&gt; のタイプ。</target>
        </trans-unit>
        <trans-unit id="3c9c6ef66ad21283731c4e03058407f8e8389f4f" translate="yes" xml:space="preserve">
          <source>The type of &lt;code&gt;Throwable&lt;/code&gt;s to catch. Defaults to &lt;code&gt;Exception&lt;/code&gt;</source>
          <target state="translated">キャッチする &lt;code&gt;Throwable&lt;/code&gt; のタイプ。デフォルトは &lt;code&gt;Exception&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="334019df59cb8690811d0f69b9dd1719fafb9c56" translate="yes" xml:space="preserve">
          <source>The type of a bit field can be any integral type or enumerated type. The most efficient type to store in bitfields is bool, followed by unsigned types, followed by signed types.</source>
          <target state="translated">ビットフィールドの型は、任意の積分型または列挙型にすることができます。ビットフィールドに格納する最も効率的な型はboolであり、次いで符号なし型、符号付き型が続きます。</target>
        </trans-unit>
        <trans-unit id="94b6a8f2e23e23e45fa071980296e38bdaa78842" translate="yes" xml:space="preserve">
          <source>The type of a const declaration is itself const.</source>
          <target state="translated">const宣言の型はそれ自体がconstです。</target>
        </trans-unit>
        <trans-unit id="f092f06205403400bf68aeecbf79e12113097113" translate="yes" xml:space="preserve">
          <source>The type of a string is determined by the semantic phase of compilation. The type is one of: char[], wchar[], dchar[], and is determined by implicit conversion rules. If there are two equally applicable implicit conversions, the result is an error. To disambiguate these cases, a cast or a postfix of &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt; or &lt;code&gt;d&lt;/code&gt; can be used:</source>
          <target state="translated">文字列のタイプは、コンパイルのセマンティックフェーズによって決まります。タイプは、char []、wchar []、dchar []のいずれかであり、暗黙の変換ルールによって決定されます。2つの等しく適用可能な暗黙の変換がある場合、結果はエラーになります。これらのケースを明確にするには、キャストやの接尾辞 &lt;code&gt;c&lt;/code&gt; が、 &lt;code&gt;w&lt;/code&gt; または &lt;code&gt;d&lt;/code&gt; 使用することができます。</target>
        </trans-unit>
        <trans-unit id="ca53c8f136489f724620c0090bfc2e63be277e6a" translate="yes" xml:space="preserve">
          <source>The type of an</source>
          <target state="translated">のタイプは</target>
        </trans-unit>
        <trans-unit id="31de113d851dba3763860dc7a09ef0a95ac4302d" translate="yes" xml:space="preserve">
          <source>The type of concurrency used when logical threads are created is determined by the Scheduler selected at initialization time. The default behavior is currently to create a new kernel thread per call to spawn, but other schedulers are available that multiplex fibers across the main thread or use some combination of the two approaches.</source>
          <target state="translated">論理スレッドが作成されるときに使用される同時実行のタイプは、初期化時に選択されたスケジューラによって決定されます。デフォルトの動作は現在、スポーンの呼び出しごとに新しいカーネルスレッドを作成しますが、メインスレッド全体にファイバーを多重化したり、2 つのアプローチのいくつかの組み合わせを使用したりする他のスケジューラが利用可能です。</target>
        </trans-unit>
        <trans-unit id="98b545b7a4a8236494e660dadf828715e09984c5" translate="yes" xml:space="preserve">
          <source>The type of encoding cannot be deduced. Therefore, it is necessary to explicitly specify the encoding type.</source>
          <target state="translated">エンコーディングの種類を推論することはできません。そのため、エンコーディングの種類を明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="28559fdc7fafacf56a4b4aa4caf411513cf1a53a" translate="yes" xml:space="preserve">
          <source>The type of exception to catch.</source>
          <target state="translated">キャッチする例外の種類。</target>
        </trans-unit>
        <trans-unit id="16e7bff806ed1fa4ab8073e5ade6ccec0c8f929f" translate="yes" xml:space="preserve">
          <source>The type of the</source>
          <target state="translated">の種類があります。</target>
        </trans-unit>
        <trans-unit id="e2db65940bfb878a54cfaaae819d3064fa148502" translate="yes" xml:space="preserve">
          <source>The type of the &lt;code&gt;TypeInfo&lt;/code&gt; object associated with &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; に関連付けられた &lt;code&gt;TypeInfo&lt;/code&gt; オブジェクトのタイプ</target>
        </trans-unit>
        <trans-unit id="3fe50288d353a1cb4576b8e3e05c3c630fa3b33c" translate="yes" xml:space="preserve">
          <source>The type of the array elements</source>
          <target state="translated">配列要素の型</target>
        </trans-unit>
        <trans-unit id="d37e2aaad386c1ac5e9f0016c42e7b609226d289" translate="yes" xml:space="preserve">
          <source>The type of the expression.</source>
          <target state="translated">式の種類。</target>
        </trans-unit>
        <trans-unit id="028c1d38d3da5ded0145ae38e0f7c2dbd53920e7" translate="yes" xml:space="preserve">
          <source>The type of the integer is resolved as follows:</source>
          <target state="translated">整数の型は以下のように解決されます。</target>
        </trans-unit>
        <trans-unit id="212a76fc03c17bbe0ddb79883b2541fa9887cff9" translate="yes" xml:space="preserve">
          <source>The type of the integral subject to checking.</source>
          <target state="translated">チェック対象の積分の型。</target>
        </trans-unit>
        <trans-unit id="c013517e503aa577ef8db2efdfe587a3e89caa97" translate="yes" xml:space="preserve">
          <source>The type of the output cannot be deduced. Therefore, it is necessary to explicitly specify the encoding as a template parameter.</source>
          <target state="translated">出力の型を推論することはできません。そのため、テンプレートパラメータとして明示的にエンコーディングを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="03cbac5dfebfa2a554890fbfd9c43c204a18bfcf" translate="yes" xml:space="preserve">
          <source>The type of the output cannot be deduced. Therefore, it is necessary to explicitly specify the encoding type in the template parameter.</source>
          <target state="translated">出力の型を推論することはできません。そのため、テンプレートパラメータでエンコーディングの型を明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d39ec39bd451294d5515fb3a127cb955f855d7d6" translate="yes" xml:space="preserve">
          <source>The type of the previous</source>
          <target state="translated">前のタイプ</target>
        </trans-unit>
        <trans-unit id="033a19799f0fa5ac9cef064ceb5d1268d8f17524" translate="yes" xml:space="preserve">
          <source>The type of the resulting array elements</source>
          <target state="translated">結果として得られる配列要素の型</target>
        </trans-unit>
        <trans-unit id="81040b338b2e6abd79e9a3fdf3377720163baee6" translate="yes" xml:space="preserve">
          <source>The type of the return value.</source>
          <target state="translated">戻り値の型。</target>
        </trans-unit>
        <trans-unit id="dd58ac5452c68f3b56c536830be3fca377a108cc" translate="yes" xml:space="preserve">
          <source>The type of the slice is a dynamic array of the element type of the</source>
          <target state="translated">の要素型の動的配列で、スライスの型は</target>
        </trans-unit>
        <trans-unit id="cd785b1199a8635d3d151523c5ad55526bbbd6f9" translate="yes" xml:space="preserve">
          <source>The type of the symbol.</source>
          <target state="translated">シンボルの種類です。</target>
        </trans-unit>
        <trans-unit id="452196a4318917b63a4cfe89691bc99e9fba3c75" translate="yes" xml:space="preserve">
          <source>The type of units to add (&quot;years&quot; or &quot;months&quot;).</source>
          <target state="translated">追加する単位の種類(「年」または「月」)。</target>
        </trans-unit>
        <trans-unit id="f9dccb4c7e9a59ec9ebfcaaaf2ab57b17a652de7" translate="yes" xml:space="preserve">
          <source>The type returned by &lt;code&gt;takeOne&lt;/code&gt; is a random-access range with length regardless of &lt;code&gt;R&lt;/code&gt;'s capabilities, as long as it is a forward range. (another feature that distinguishes &lt;code&gt;takeOne&lt;/code&gt; from &lt;code&gt;take&lt;/code&gt;). If (D R) is an input range but not a forward range, return type is an input range with all random-access capabilities except save.</source>
          <target state="translated">&lt;code&gt;takeOne&lt;/code&gt; によって返される型は、前方の範囲である限り、 &lt;code&gt;R&lt;/code&gt; の機能に関係なく、長さがランダムアクセスの範囲です。（ &lt;code&gt;takeOne&lt;/code&gt; と &lt;code&gt;take&lt;/code&gt; を区別する別の機能）。（DR）が入力範囲であるが前方範囲ではない場合、戻り値の型は保存を除くすべてのランダムアクセス機能を備えた入力範囲です。</target>
        </trans-unit>
        <trans-unit id="df7e4abf69509dd860941f1b197de09e0d181452" translate="yes" xml:space="preserve">
          <source>The type stored inside &lt;code&gt;bomTable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bomTable&lt;/code&gt; 内に格納されるタイプ。</target>
        </trans-unit>
        <trans-unit id="6da0e0e3a59ae4f419059fd79e6a5b2efe510dd1" translate="yes" xml:space="preserve">
          <source>The type to cast from. The programmer must ensure it is legal to make this cast.</source>
          <target state="translated">キャスト元の型です。プログラマは、このキャストが合法であることを確認しなければなりません。</target>
        </trans-unit>
        <trans-unit id="6fc6b3afd9d09c214bbb47deabcb3d5029a321f8" translate="yes" xml:space="preserve">
          <source>The type to cast to.</source>
          <target state="translated">キャスト先のタイプ。</target>
        </trans-unit>
        <trans-unit id="7a12dddb89baf93f3c8ff660933719a4552a94a9" translate="yes" xml:space="preserve">
          <source>The type to check</source>
          <target state="translated">チェックするタイプ</target>
        </trans-unit>
        <trans-unit id="20caa9de7c60aa932980e2103bddf1b7c37802ff" translate="yes" xml:space="preserve">
          <source>The type to check Returns A &lt;code&gt;bool&lt;/code&gt;</source>
          <target state="translated">チェックするタイプは、 &lt;code&gt;bool&lt;/code&gt; 返します</target>
        </trans-unit>
        <trans-unit id="129cd5fe4646df1f906533b11f848d4c99ca621d" translate="yes" xml:space="preserve">
          <source>The type to check.</source>
          <target state="translated">チェックするタイプです。</target>
        </trans-unit>
        <trans-unit id="e0884902d15a178811c08946d7f41f322c3b3c6e" translate="yes" xml:space="preserve">
          <source>The type to convert to (either an integral type or a floating point type).</source>
          <target state="translated">変換先の型(積分型または浮動小数点型のいずれか)。</target>
        </trans-unit>
        <trans-unit id="731464fe86427c8aef65d3aa38988badaf10df11" translate="yes" xml:space="preserve">
          <source>The type to qualify</source>
          <target state="translated">資格を取得するタイプ</target>
        </trans-unit>
        <trans-unit id="d4255aeb11f7f1166da5fe91079652809cb8c332" translate="yes" xml:space="preserve">
          <source>The type to transform</source>
          <target state="translated">変換するタイプ</target>
        </trans-unit>
        <trans-unit id="a182178d558aaac6dc8d492d1e7dc9ff9e25bdd0" translate="yes" xml:space="preserve">
          <source>The types bool, byte, ubyte, short, ushort, int, uint, pointer, Object, and interfaces are returned in EAX.</source>
          <target state="translated">bool、byte、ubyte、short、ushort、int、uint、pointer、Object、およびinterfacesの型がEAXで返されます。</target>
        </trans-unit>
        <trans-unit id="0110212887a1a5d92fbf43e56315c07c9570e0ab" translate="yes" xml:space="preserve">
          <source>The types defined will all follow the naming convention:</source>
          <target state="translated">定義された型はすべて命名規則に従います。</target>
        </trans-unit>
        <trans-unit id="04692c0de4f65115c6356357897fe3c8458aeb37" translate="yes" xml:space="preserve">
          <source>The types for a binary expression are incompatible. Print error message.</source>
          <target state="translated">バイナリ式の型は互換性がありません。エラー・メッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="5522b90b8401affc194c75d94ed28b129ed2edae" translate="yes" xml:space="preserve">
          <source>The types of template parameters are deduced for a particular template instantiation by comparing the template argument with the corresponding template parameter.</source>
          <target state="translated">テンプレート・パラメータの種類は、テンプレート引数と対応するテンプレート・パラメータを比較することで、特定のテンプレート・インスタンシエーションに対して推論されます。</target>
        </trans-unit>
        <trans-unit id="066569f5b571624866c51a31fa6ddcb337821083" translate="yes" xml:space="preserve">
          <source>The types of the &lt;code&gt;Tuple&lt;/code&gt;'s components.</source>
          <target state="translated">&lt;code&gt;Tuple&lt;/code&gt; のコンポーネントのタイプ。</target>
        </trans-unit>
        <trans-unit id="3c8b9bedfec2099e1aa223db3144a32e496f4931" translate="yes" xml:space="preserve">
          <source>The underlying &lt;code&gt;FILE*&lt;/code&gt; handle is maintained in a reference-counted manner, such that as soon as the last &lt;code&gt;File&lt;/code&gt; variable bound to a given &lt;code&gt;FILE*&lt;/code&gt; goes out of scope, the underlying &lt;code&gt;FILE*&lt;/code&gt; is automatically closed.</source>
          <target state="translated">基になる &lt;code&gt;FILE*&lt;/code&gt; ハンドルは参照カウント方式で維持されます。つまり、特定の &lt;code&gt;FILE*&lt;/code&gt; バインドされている最後の &lt;code&gt;File&lt;/code&gt; 変数がスコープ外になるとすぐに、基になる &lt;code&gt;FILE*&lt;/code&gt; が自動的に閉じられます。</target>
        </trans-unit>
        <trans-unit id="2e4c90c054f0493a2822eb59e3b3bf2666457fe9" translate="yes" xml:space="preserve">
          <source>The underlying delegate of the &lt;code&gt;lazy&lt;/code&gt; parameter may be extracted by using the &lt;code&gt;&amp;amp;&lt;/code&gt; operator:</source>
          <target state="translated">&lt;code&gt;lazy&lt;/code&gt; パラメーターの基になるデリゲートは、 &lt;code&gt;&amp;amp;&lt;/code&gt; 演算子を使用して抽出できます。</target>
        </trans-unit>
        <trans-unit id="afc75b662708321c7f89938e96034aeb600136f1" translate="yes" xml:space="preserve">
          <source>The unfilled part of target</source>
          <target state="translated">ターゲットの未記入部分</target>
        </trans-unit>
        <trans-unit id="634a8a351a2208e39d6a5ada2c8d683b264478f7" translate="yes" xml:space="preserve">
          <source>The units of time to convert from.</source>
          <target state="translated">から変換する時間の単位。</target>
        </trans-unit>
        <trans-unit id="ca496597d1b0052334d45f82b4d1ebb346322b8a" translate="yes" xml:space="preserve">
          <source>The units of time to convert to.</source>
          <target state="translated">換算する時間の単位。</target>
        </trans-unit>
        <trans-unit id="0be285da06571b223018436a72e418b7f4b54a74" translate="yes" xml:space="preserve">
          <source>The units of time to validate.</source>
          <target state="translated">検証する時間の単位。</target>
        </trans-unit>
        <trans-unit id="421844a18abe81313eecb91da7e35563552d941b" translate="yes" xml:space="preserve">
          <source>The units to add.</source>
          <target state="translated">追加するユニット。</target>
        </trans-unit>
        <trans-unit id="b4529f66e815e24cb45e91c0feb5284c7f7ff115" translate="yes" xml:space="preserve">
          <source>The units to add. Must be &lt;code&gt;&quot;days&quot;&lt;/code&gt;.</source>
          <target state="translated">追加する単位。 &lt;code&gt;&quot;days&quot;&lt;/code&gt; なければなりません。</target>
        </trans-unit>
        <trans-unit id="a30f00fc7d9dabd0ab88732559ada44060afc844" translate="yes" xml:space="preserve">
          <source>The units to convert to. Accepts &lt;code&gt;&quot;seconds&quot;&lt;/code&gt; and smaller only.</source>
          <target state="translated">変換する単位。 &lt;code&gt;&quot;seconds&quot;&lt;/code&gt; 以下のみを受け入れます。</target>
        </trans-unit>
        <trans-unit id="77097e55fb24c41c45ac8fd555bdb9f92cb58569" translate="yes" xml:space="preserve">
          <source>The unix time to convert.</source>
          <target state="translated">変換するためのunixの時間。</target>
        </trans-unit>
        <trans-unit id="20dd814c3aa8014ba5957f08ad17be1db064e4d2" translate="yes" xml:space="preserve">
          <source>The unsorted, right-hand side of the random access range to be sorted.</source>
          <target state="translated">ソートされるランダムアクセス範囲の右側にある、ソートされていないもの。</target>
        </trans-unit>
        <trans-unit id="d1d3c14f93e1c2e8f53e8dab18a0c8184c6c7a98" translate="yes" xml:space="preserve">
          <source>The upper bound of the clamp.</source>
          <target state="translated">クランプの上界。</target>
        </trans-unit>
        <trans-unit id="0983ef86eb34d76a2780b35b3edfbd68c63c7dea" translate="yes" xml:space="preserve">
          <source>The url to receive content from</source>
          <target state="translated">コンテンツを受け取るためのURL</target>
        </trans-unit>
        <trans-unit id="446e2b0a1f994283348417fe7415a244c477d8c8" translate="yes" xml:space="preserve">
          <source>The use in the example above is correct because &lt;code&gt;result&lt;/code&gt; was private to &lt;code&gt;letters&lt;/code&gt; and is inaccessible in writing after the function returns. The following example shows an incorrect use of &lt;code&gt;assumeUnique&lt;/code&gt;.</source>
          <target state="translated">上記の例での使用は正しいです。 &lt;code&gt;result&lt;/code&gt; は &lt;code&gt;letters&lt;/code&gt; に対してプライベートであり、関数が戻った後の書き込みではアクセスできません。次の例は、 &lt;code&gt;assumeUnique&lt;/code&gt; の誤った使用を示しています。</target>
        </trans-unit>
        <trans-unit id="f765f067fdbcdb23f122179aadad4e3aab7633fe" translate="yes" xml:space="preserve">
          <source>The use of this function is discouraged - use either of &lt;a href=&quot;#matchAll&quot;&gt;&lt;code&gt;matchAll&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#matchFirst&quot;&gt;&lt;code&gt;matchFirst&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数の使用はお勧めしません&lt;a href=&quot;#matchAll&quot;&gt; &lt;code&gt;matchAll&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#matchFirst&quot;&gt; &lt;code&gt;matchFirst&lt;/code&gt; の&lt;/a&gt;いずれかを使用してください。</target>
        </trans-unit>
        <trans-unit id="12cefe2def110643149592a34e2703038ffe95e9" translate="yes" xml:space="preserve">
          <source>The use of this function is discouraged, please use &lt;a href=&quot;#replaceAll&quot;&gt;&lt;code&gt;replaceAll&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#replaceFirst&quot;&gt;&lt;code&gt;replaceFirst&lt;/code&gt;&lt;/a&gt; explicitly.</source>
          <target state="translated">この関数の使用はお勧めしません&lt;a href=&quot;#replaceAll&quot;&gt; &lt;code&gt;replaceAll&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#replaceFirst&quot;&gt; &lt;code&gt;replaceFirst&lt;/code&gt; を&lt;/a&gt;明示的に使用してください。</target>
        </trans-unit>
        <trans-unit id="258077ec71c841ca26961567df7573b36d2e9600" translate="yes" xml:space="preserve">
          <source>The user-defined attribute to search for</source>
          <target state="translated">検索するユーザー定義属性</target>
        </trans-unit>
        <trans-unit id="aef8bf31a8de472e5ee4f185e2b79cc50024f24a" translate="yes" xml:space="preserve">
          <source>The usual arithmetic conversions convert operands of binary operators to a common type. The operands must already be of arithmetic types. The following rules are applied in order, looking at the base type:</source>
          <target state="translated">通常の算術変換は、バイナリ演算子のオペランドを共通の型に変換します。オペランドはすでに算術型でなければなりません。以下のルールは、基底型を見ながら順に適用されます。</target>
        </trans-unit>
        <trans-unit id="ed8ed81507c265fdc6ddf599aacfb34e442e2017" translate="yes" xml:space="preserve">
          <source>The value held internally by this &lt;code&gt;Nullable&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Nullable&lt;/code&gt; によって内部的に保持される値。</target>
        </trans-unit>
        <trans-unit id="18c2cd4ec56e16370bc6d10103dd74ac049c5530" translate="yes" xml:space="preserve">
          <source>The value held previously by &lt;code&gt;here&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;here&lt;/code&gt; までに保有していた価値。</target>
        </trans-unit>
        <trans-unit id="d539c77bb27b77f2df22dab504e881d99f6b5dd9" translate="yes" xml:space="preserve">
          <source>The value held previously by &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">以前に &lt;code&gt;val&lt;/code&gt; によって保持されていた値。</target>
        </trans-unit>
        <trans-unit id="758230c61eadaee99aa3c3ef284aa623718c1933" translate="yes" xml:space="preserve">
          <source>The value of 'val'.</source>
          <target state="translated">val' の値。</target>
        </trans-unit>
        <trans-unit id="b06c415192563751b142dd5d437c6004b2e9459e" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;expr&lt;/code&gt;, if any.</source>
          <target state="translated">もしあれば、 &lt;code&gt;expr&lt;/code&gt; の値。</target>
        </trans-unit>
        <trans-unit id="efa4633a9b927147870c40861701a3a66f460ac4" translate="yes" xml:space="preserve">
          <source>The value of an</source>
          <target state="translated">の値は</target>
        </trans-unit>
        <trans-unit id="e705d7da4d67602f093ecd07ec55976add979079" translate="yes" xml:space="preserve">
          <source>The value of an &lt;a href=&quot;#EnumMember&quot;&gt;&lt;i&gt;EnumMember&lt;/i&gt;&lt;/a&gt; is given by its &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;. If there is no &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; and it is the first</source>
          <target state="translated">&lt;a href=&quot;#EnumMember&quot;&gt;&lt;i&gt;EnumMember&lt;/i&gt;&lt;/a&gt;の値は、その&lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;によって指定されます。&lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;がなく、それが最初の場合</target>
        </trans-unit>
        <trans-unit id="cfdd678ef3efc50d4d19e113e22570e812ee97e8" translate="yes" xml:space="preserve">
          <source>The value of cos(y) + i sin(y).</source>
          <target state="translated">cos(y)+i sin(y)の値。</target>
        </trans-unit>
        <trans-unit id="ce228048bba4c787805c0ea9367075ff06ba1fcc" translate="yes" xml:space="preserve">
          <source>The value of cosh(y) + i sinh(y)</source>
          <target state="translated">cosh(y)+i sinh(y)の値は</target>
        </trans-unit>
        <trans-unit id="dffcef37a6c60e8c1178ac476b670c4fbdc86276" translate="yes" xml:space="preserve">
          <source>The value of the bound being violated</source>
          <target state="translated">違反している境界の値</target>
        </trans-unit>
        <trans-unit id="911671dbc78d40ead01af236d912c34ae5fc15c4" translate="yes" xml:space="preserve">
          <source>The value of the selected choice.</source>
          <target state="translated">選択された選択肢の値。</target>
        </trans-unit>
        <trans-unit id="2079c7788ad766ba6207e480774a32436765df0d" translate="yes" xml:space="preserve">
          <source>The value of this &lt;code&gt;BigInt&lt;/code&gt; as a &lt;code&gt;long&lt;/code&gt;, or &lt;code&gt;long.max&lt;/code&gt;/&lt;code&gt;long.min&lt;/code&gt; if outside the representable range.</source>
          <target state="translated">この値 &lt;code&gt;BigInt&lt;/code&gt; として &lt;code&gt;long&lt;/code&gt; 、又は &lt;code&gt;long.max&lt;/code&gt; / &lt;code&gt;long.min&lt;/code&gt; 表現可能な範囲外の場合。</target>
        </trans-unit>
        <trans-unit id="bfb5bbd989c9054cc2b242d5eea3691758f09eed" translate="yes" xml:space="preserve">
          <source>The value of this &lt;code&gt;BigInt&lt;/code&gt; as an &lt;code&gt;int&lt;/code&gt;, or &lt;code&gt;int.max&lt;/code&gt;/&lt;code&gt;int.min&lt;/code&gt; if outside the representable range.</source>
          <target state="translated">この値 &lt;code&gt;BigInt&lt;/code&gt; として &lt;code&gt;int&lt;/code&gt; 、または &lt;code&gt;int.max&lt;/code&gt; / &lt;code&gt;int.min&lt;/code&gt; 表現可能な範囲外の場合。</target>
        </trans-unit>
        <trans-unit id="44a86e613513bb5b90f75505c846e4f1a8d5e443" translate="yes" xml:space="preserve">
          <source>The value of x - i * y, where i is the number of times that y can be completely subtracted from x. The result has the same sign as x.</source>
          <target state="translated">x-i*y の値、ここで i は x から y が完全に減算できる回数で、結果は x と同じ符号を持つ。</target>
        </trans-unit>
        <trans-unit id="fbda37a05f283a201fa47e61f1a28829aac6ca57" translate="yes" xml:space="preserve">
          <source>The value that serves as the stopping criterion. This value is not included in the range.</source>
          <target state="translated">停止基準となる値です。この値は範囲に含まれません。</target>
        </trans-unit>
        <trans-unit id="06ef9451ca2a6ddc30c31abb46ec77c558d2c434" translate="yes" xml:space="preserve">
          <source>The value to act as a proxy for all operations. It must be an lvalue.</source>
          <target state="translated">すべての操作のプロキシとして動作する値。lvalueでなければなりません。</target>
        </trans-unit>
        <trans-unit id="c4437657364f8d6c0ea26bb67bc977fd2c3d6762" translate="yes" xml:space="preserve">
          <source>The value to add to the current value at each iteration.</source>
          <target state="translated">各反復時に現在の値に追加する値。</target>
        </trans-unit>
        <trans-unit id="71df2093c5012459c48815bda74ee8c58897d1c9" translate="yes" xml:space="preserve">
          <source>The value to add.</source>
          <target state="translated">付加価値をつけること。</target>
        </trans-unit>
        <trans-unit id="9ea1a4ae4b9c004c5d2afcb14b6504f978c0f7ea" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
          <target state="translated">追加する値。</target>
        </trans-unit>
        <trans-unit id="3e27e971fbf5a179f864e36ffcc71eeed5543b79" translate="yes" xml:space="preserve">
          <source>The value to be reference counted</source>
          <target state="translated">参照カウントする値</target>
        </trans-unit>
        <trans-unit id="48cc3d885cf27d16c55ff2638b8883795263bff6" translate="yes" xml:space="preserve">
          <source>The value to bind to.</source>
          <target state="translated">バインドする値。</target>
        </trans-unit>
        <trans-unit id="a802e0b8a3a2b83e804f3a0f0ce8a9cba9671bc8" translate="yes" xml:space="preserve">
          <source>The value to cast. It must be of type &lt;code&gt;From&lt;/code&gt;, otherwise a compile-time error is emitted.</source>
          <target state="translated">キャストする値。 &lt;code&gt;From&lt;/code&gt; 型である必要があります。そうでない場合、コンパイル時エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="62da9509e3333e477d714ba7dbd138814897fd19" translate="yes" xml:space="preserve">
          <source>The value to clamp.</source>
          <target state="translated">クランプする値。</target>
        </trans-unit>
        <trans-unit id="4ad7684bb8903fcc2f377acbdab0d055ec3933a5" translate="yes" xml:space="preserve">
          <source>The value to convert.</source>
          <target state="translated">変換する値。</target>
        </trans-unit>
        <trans-unit id="50f2da1a55629d14637add94e8f4d0df9b3b3315" translate="yes" xml:space="preserve">
          <source>The value to divide from this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;TickDuration&lt;/code&gt; から除算する値。</target>
        </trans-unit>
        <trans-unit id="0a1bf08b423c514be4510f8c180b0baca8c3ce06" translate="yes" xml:space="preserve">
          <source>The value to divide from this duration.</source>
          <target state="translated">この持続時間から割り算する値。</target>
        </trans-unit>
        <trans-unit id="1354007d97f6ba4733c332273819ddc621808569" translate="yes" xml:space="preserve">
          <source>The value to exchange.</source>
          <target state="translated">交換する価値。</target>
        </trans-unit>
        <trans-unit id="1212730d5cf61a8236b91aa2562728d9cffb815c" translate="yes" xml:space="preserve">
          <source>The value to initialize this &lt;code&gt;Nullable&lt;/code&gt; with.</source>
          <target state="translated">この &lt;code&gt;Nullable&lt;/code&gt; を初期化する値。</target>
        </trans-unit>
        <trans-unit id="d9870b988dc93826e41d9e14caae258236099356" translate="yes" xml:space="preserve">
          <source>The value to multiply this &lt;code&gt;Duration&lt;/code&gt; by.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に乗算する値。</target>
        </trans-unit>
        <trans-unit id="b63d59c749f4e3c4e27b5c62bc54fa60f14460d7" translate="yes" xml:space="preserve">
          <source>The value to multiply/divide this &lt;code&gt;Duration&lt;/code&gt; by.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; を乗算/除算する値。</target>
        </trans-unit>
        <trans-unit id="5f9706fe37a21ebb4f5356314e9dbb0f193612de" translate="yes" xml:space="preserve">
          <source>The value to search for.</source>
          <target state="translated">探すべき値。</target>
        </trans-unit>
        <trans-unit id="26611747ab051faf83da9bb9d7c2556f3251cdff" translate="yes" xml:space="preserve">
          <source>The value to store.</source>
          <target state="translated">保存する値です。</target>
        </trans-unit>
        <trans-unit id="623dc949267aac51bc4afc97ec71884d344d0223" translate="yes" xml:space="preserve">
          <source>The value to subtract.</source>
          <target state="translated">減算する値です。</target>
        </trans-unit>
        <trans-unit id="572affcd555e45a118ca8c255703b01188667dc6" translate="yes" xml:space="preserve">
          <source>The value to test.</source>
          <target state="translated">テストする値。</target>
        </trans-unit>
        <trans-unit id="19051782b6b3c278237f01645d39c916e236a933" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
          <target state="translated">書き込む値です。</target>
        </trans-unit>
        <trans-unit id="ed8375fc18b2f2889a5d8178e1f4e71c024e1115" translate="yes" xml:space="preserve">
          <source>The value to yield.</source>
          <target state="translated">歩留まりを上げるための価値。</target>
        </trans-unit>
        <trans-unit id="36090b23e6b19abea403f7cf11708f739d6ebe0a" translate="yes" xml:space="preserve">
          <source>The value.</source>
          <target state="translated">値です。</target>
        </trans-unit>
        <trans-unit id="d9c7ac0f2459cf0fcaba3e1a3c53a1114b6dd604" translate="yes" xml:space="preserve">
          <source>The values of the statistics. Has the same length as &lt;code&gt;opts&lt;/code&gt;.</source>
          <target state="translated">統計の値。 &lt;code&gt;opts&lt;/code&gt; と同じ長さです。</target>
        </trans-unit>
        <trans-unit id="73dba46e865b8a15dc63f7dc2a467e9bb9da631f" translate="yes" xml:space="preserve">
          <source>The values to compare the value to.</source>
          <target state="translated">比較対象となる値です。</target>
        </trans-unit>
        <trans-unit id="75999ceef9f4bfecc84eef7c1abce7ef1a1e25fa" translate="yes" xml:space="preserve">
          <source>The values to select the maximum from. At least two arguments must be passed, and they must be comparable with &lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">最大値を選択する値。少なくとも2つの引数を渡す必要があり、それらは &lt;code&gt;&amp;gt;&lt;/code&gt; と同等である必要があります。</target>
        </trans-unit>
        <trans-unit id="c472612eda8a57b671db853841e452b39218b0df" translate="yes" xml:space="preserve">
          <source>The values to select the maximum from. At least two arguments must be passed.</source>
          <target state="translated">最大値を選択する値。少なくとも2つの引数を渡さなければなりません。</target>
        </trans-unit>
        <trans-unit id="7a965cfb58b4af69ed40e336a152e8e938e3ae5e" translate="yes" xml:space="preserve">
          <source>The values to select the minimum from. At least two arguments must be passed, and they must be comparable with &lt;code&gt;&amp;lt;&lt;/code&gt;.</source>
          <target state="translated">最小値を選択する値。少なくとも2つの引数を渡す必要があり、それらは &lt;code&gt;&amp;lt;&lt;/code&gt; と比較できる必要があります。</target>
        </trans-unit>
        <trans-unit id="6c4b476e00d554e5b462693564ced434266700cc" translate="yes" xml:space="preserve">
          <source>The vararg module is intended to facilitate vararg manipulation in D. It should be interface compatible with the C module &quot;stdarg,&quot; and the two modules may share a common implementation if possible (as is done here).</source>
          <target state="translated">vararg モジュールは D での vararg の操作を容易にすることを意図しています。 C モジュールの &quot;stdarg&quot; と互換性のあるインターフェイスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="e58c51068f71cad0c83773e1d40394fdd897c493" translate="yes" xml:space="preserve">
          <source>The variable to initialize</source>
          <target state="translated">初期化する変数</target>
        </trans-unit>
        <trans-unit id="da94a792f23c83ccf884c163bc10a13c232be367" translate="yes" xml:space="preserve">
          <source>The variadic arguments are normally consumed in order. POSIX-style &lt;a href=&quot;http://opengroup.org/onlinepubs/009695399/functions/printf.html&quot;&gt; positional parameter syntax&lt;/a&gt; is also supported. Each argument is formatted into a sequence of chars according to the format specification, and the characters are passed to &lt;code&gt;w&lt;/code&gt;. As many arguments as specified in the format string are consumed and formatted. If there are fewer arguments than format specifiers, a &lt;code&gt;FormatException&lt;/code&gt; is thrown. If there are more remaining arguments than needed by the format specification, they are ignored but only if at least one argument was formatted.</source>
          <target state="translated">可変個引数は通常順番に消費されます。 POSIXスタイルの&lt;a href=&quot;http://opengroup.org/onlinepubs/009695399/functions/printf.html&quot;&gt;位置パラメータ構文&lt;/a&gt;もサポートされています。各引数は、フォーマット仕様に従って文字のシーケンスにフォーマットされ、文字は &lt;code&gt;w&lt;/code&gt; に渡されます。フォーマット文字列で指定された数の引数が消費され、フォーマットされます。書式指定子よりも引数が少ない場合、 &lt;code&gt;FormatException&lt;/code&gt; がスローされます。残りの引数がフォーマット仕様で必要とされるよりも多い場合、それらは無視されますが、少なくとも1つの引数がフォーマットされた場合のみです。</target>
        </trans-unit>
        <trans-unit id="fa8f9f636d8a6045425f97a32a164b87a688ed99" translate="yes" xml:space="preserve">
          <source>The variadic part is converted to a dynamic array and the rest is the same as for non-variadic functions.</source>
          <target state="translated">変分部は動的配列に変換され、その他は非変分部の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="4280e8c5fae666595a22ad15b85940850cfe38e7" translate="yes" xml:space="preserve">
          <source>The vector extensions are currently implemented for the OS X 32 bit target, and all 64 bit targets.</source>
          <target state="translated">ベクトル拡張は現在、OS X 32ビットターゲットとすべての64ビットターゲットに実装されています。</target>
        </trans-unit>
        <trans-unit id="9a3f2a8776586397a6e7f50b19626acf584f35ca" translate="yes" xml:space="preserve">
          <source>The vendor specific version number, as in version_major.version_minor</source>
          <target state="translated">version_major.version_minor のように、ベンダー固有のバージョン番号を指定します。</target>
        </trans-unit>
        <trans-unit id="00e7fe40797e665c537b4d388116b4be59e896ff" translate="yes" xml:space="preserve">
          <source>The version of the D Programming Language Specification supported by the compiler.</source>
          <target state="translated">コンパイラがサポートするD言語仕様書のバージョン。</target>
        </trans-unit>
        <trans-unit id="349a4c5870066cd09694037d969de8543ecfc287" translate="yes" xml:space="preserve">
          <source>The version specification makes it straightforward to group a set of features under one major version, for example:</source>
          <target state="translated">バージョン仕様では、例えば、一連の機能を一つのメジャーバージョンの下にグループ化することが簡単にできます。</target>
        </trans-unit>
        <trans-unit id="8bd1d61a79fbe94ca1f6332082364d1be24742ef" translate="yes" xml:space="preserve">
          <source>The vtable consists of:</source>
          <target state="translated">vtableは構成されています。</target>
        </trans-unit>
        <trans-unit id="f3b5820f28d3bae10a6ec27f163ae2a69ac3fe29" translate="yes" xml:space="preserve">
          <source>The way the type of</source>
          <target state="translated">の種類の方法</target>
        </trans-unit>
        <trans-unit id="0fcc6679e5070c2e4f446305491364698920c76a" translate="yes" xml:space="preserve">
          <source>The way to read this is: start with negative meaning that all numbers smaller then the next one are not present in this set (and positive - the contrary). Then switch positive/negative after each number passed from left to right.</source>
          <target state="translated">これを読み解く方法は、次の数字より小さい数字はすべてこの集合には存在しないという意味の負から始まります(正はその逆)。そして、左から右に渡された各数字の後に、正/負を切り替えます。</target>
        </trans-unit>
        <trans-unit id="ee95d5338e2cc507c044af212b980a2ccdb0be06" translate="yes" xml:space="preserve">
          <source>The week that each time point in the range will be.</source>
          <target state="translated">レンジの各時間帯のポイントが当たる週。</target>
        </trans-unit>
        <trans-unit id="cd65d21aaa17290a8030b106efe73434ab04b752" translate="yes" xml:space="preserve">
          <source>The worker threads in this pool will not stop until &lt;code&gt;stop&lt;/code&gt; or &lt;code&gt;finish&lt;/code&gt; is called, even if the main thread has finished already. This may lead to programs that never end. If you do not want this behaviour, you can set &lt;code&gt;isDaemon&lt;/code&gt; to true.</source>
          <target state="translated">このプールのワーカースレッドは、メインスレッドがすでに終了している場合でも、 &lt;code&gt;stop&lt;/code&gt; または &lt;code&gt;finish&lt;/code&gt; が呼び出されるまで停止しません。これは、決して終わらないプログラムにつながる可能性があります。この動作を望まない場合は、 &lt;code&gt;isDaemon&lt;/code&gt; をtrueに設定できます。</target>
        </trans-unit>
        <trans-unit id="ccaf69d731f86b374a2484d6db7113668b98a057" translate="yes" xml:space="preserve">
          <source>The worker treads in the &lt;code&gt;TaskPool&lt;/code&gt; instance returned by the &lt;code&gt;taskPool&lt;/code&gt; property are daemon by default. The worker threads of manually instantiated task pools are non-daemon by default.</source>
          <target state="translated">&lt;code&gt;taskPool&lt;/code&gt; プロパティによって返される &lt;code&gt;TaskPool&lt;/code&gt; インスタンスのワーカートレッドは、デフォルトではデーモンです。手動でインスタンス化されたタスクプールのワーカースレッドは、デフォルトではデーモンではありません。</target>
        </trans-unit>
        <trans-unit id="032848bfda222930e013953265615c3e0ccbd961" translate="yes" xml:space="preserve">
          <source>The working directory for the new process. By default the child process inherits the parent's working directory.</source>
          <target state="translated">新しいプロセスの作業ディレクトリ。デフォルトでは、子プロセスは親プロセスの作業ディレクトリを継承します。</target>
        </trans-unit>
        <trans-unit id="5b0246698510343503660da61604a3af0a5e9947" translate="yes" xml:space="preserve">
          <source>The wrapped statement.</source>
          <target state="translated">ラッピングされた文。</target>
        </trans-unit>
        <trans-unit id="83d3fe39ddb643ccc2434ee8c1b4b3abc6a78d80" translate="yes" xml:space="preserve">
          <source>The wrapped type for which Nullable provides a null value.</source>
          <target state="translated">NullableがNull値を提供するラップ型。</target>
        </trans-unit>
        <trans-unit id="52054c2c6d64acc406d7bd018817d7a8a1e5c5bf" translate="yes" xml:space="preserve">
          <source>The write end of the pipe.</source>
          <target state="translated">パイプの書き込み先。</target>
        </trans-unit>
        <trans-unit id="d72f5499f6b8ab39b36f3e5d6ad25d6e2121747c" translate="yes" xml:space="preserve">
          <source>The year B.C. to set this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;'s year to.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;の年を設定する紀元前の年。</target>
        </trans-unit>
        <trans-unit id="70438f0b3fdbdd369345e88c2fd45090d92cb7e3" translate="yes" xml:space="preserve">
          <source>The year B.C. to set this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;'s year to.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の年を設定する紀元前の年。</target>
        </trans-unit>
        <trans-unit id="744d36d482072547f2d6e876741e0a75ffde2547" translate="yes" xml:space="preserve">
          <source>The year B.C. to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s year to.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の年を設定する紀元前の年。</target>
        </trans-unit>
        <trans-unit id="645eb13622787fa8a0e2f12539a4222d12dcebc3" translate="yes" xml:space="preserve">
          <source>The year inside the ISO 8601 week calendar that this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is in.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;が含まれるISO8601週カレンダー内の年。</target>
        </trans-unit>
        <trans-unit id="6f253f2171ebe80090cc18ce562187b7793a28ea" translate="yes" xml:space="preserve">
          <source>The year of the ISO 8601 week calendar that this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is in.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が含まれるISO8601週カレンダーの年。</target>
        </trans-unit>
        <trans-unit id="90ffac4afd7dedd0db0cf62512494ecd5d03ce9b" translate="yes" xml:space="preserve">
          <source>The year of the day to validate.</source>
          <target state="translated">検証する日の年号。</target>
        </trans-unit>
        <trans-unit id="6a632533914c1a4222f015d798cec051375cb6c9" translate="yes" xml:space="preserve">
          <source>The year portion of the date.</source>
          <target state="translated">日付の年の部分。</target>
        </trans-unit>
        <trans-unit id="674f0ed2625d2fbf8d46e126ee7509b07e39337e" translate="yes" xml:space="preserve">
          <source>The year to set this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;'s year to.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の年を設定する年。</target>
        </trans-unit>
        <trans-unit id="78b3d4944643d10e9690ce8b16f07cee0b861543" translate="yes" xml:space="preserve">
          <source>The year to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s year to.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の年を設定する年。</target>
        </trans-unit>
        <trans-unit id="938c9fb56ce9737aba86f7a255d511c39f3f1219" translate="yes" xml:space="preserve">
          <source>The year to set this Date's year to.</source>
          <target state="translated">この伊達の年に設定する年。</target>
        </trans-unit>
        <trans-unit id="25dac3542e9629d3c6f770b554d3c9420550d89e" translate="yes" xml:space="preserve">
          <source>The year to to be tested.</source>
          <target state="translated">試験を受けるべき年。</target>
        </trans-unit>
        <trans-unit id="6dbbdf11fc9d313a566bcf1e2531faa610eda60f" translate="yes" xml:space="preserve">
          <source>The zip file format version needed to extract this member.</source>
          <target state="translated">このメンバーを抽出するために必要なzipファイル形式のバージョン。</target>
        </trans-unit>
        <trans-unit id="b05a3a1416ac42134535e13e8cceef19ad3efbf2" translate="yes" xml:space="preserve">
          <source>The ~= operator. It can have one of the following operators:</source>
          <target state="translated">演算子は ~=演算子です。次のいずれかの演算子を持つことができます。</target>
        </trans-unit>
        <trans-unit id="483dc9258037e4ea0f71ce99febdf439cc645ac7" translate="yes" xml:space="preserve">
          <source>Then each of the arguments whose type does not match that of the delegate is converted to a delegate.</source>
          <target state="translated">そして、型がデリゲートの型と一致しない引数のそれぞれがデリゲートに変換されます。</target>
        </trans-unit>
        <trans-unit id="51ac7bc32bb46bc23b3538364d227ae9bc701e39" translate="yes" xml:space="preserve">
          <source>Then you can import the package containing the extern C++ declarations as follows:</source>
          <target state="translated">そして、以下のように外部のC++宣言を含むパッケージをインポートします。</target>
        </trans-unit>
        <trans-unit id="4ef903eb9cd7218e2998c6f06dec42c64cb3057d" translate="yes" xml:space="preserve">
          <source>ThenStatement</source>
          <target state="translated">ThenStatement</target>
        </trans-unit>
        <trans-unit id="cffa55acb530a469e1c0e72f460da047941e3e1e" translate="yes" xml:space="preserve">
          <source>There are advantages to storing bookkeeping data separated from the payload (as opposed to e.g. using &lt;code&gt;AffixAllocator&lt;/code&gt; to store metadata together with each allocation). The layout is more compact (overhead is one bit per block), searching for a free block during allocation enjoys better cache locality, and deallocation does not touch memory around the payload being deallocated (which is often cold).</source>
          <target state="translated">ペイロードから分離された簿記データを格納することには利点があります（たとえば、 &lt;code&gt;AffixAllocator&lt;/code&gt; を使用してメタデータを各割り当てと一緒に格納するのとは対照的です）。レイアウトはよりコンパクトになり（オーバーヘッドはブロックごとに1ビット）、割り当て中に空きブロックを検索すると、キャッシュの局所性が向上し、割り当て解除は、割り当て解除されるペイロード（多くの場合、コールド）のメモリに影響しません。</target>
        </trans-unit>
        <trans-unit id="71da829c4cc0769086794220605ec04ef8da0ce9" translate="yes" xml:space="preserve">
          <source>There are eight usable logging level. These level are</source>
          <target state="translated">8つの使用可能なログレベルがあります。これらのレベルは</target>
        </trans-unit>
        <trans-unit id="88bbdd16439c34d51b5285ff9a938ae545ede756" translate="yes" xml:space="preserve">
          <source>There are four kinds of arrays:</source>
          <target state="translated">配列には4種類あります。</target>
        </trans-unit>
        <trans-unit id="e137971ce6d07a865f890bb2bb72e21617522984" translate="yes" xml:space="preserve">
          <source>There are four overloads of this function. The first two take an array of strings, &lt;code&gt;args&lt;/code&gt;, which should contain the program name as the zeroth element and any command-line arguments in subsequent elements. The third and fourth versions are included for convenience, and may be used when there are no command-line arguments. They take a single string, &lt;code&gt;program&lt;/code&gt;, which specifies the program name.</source>
          <target state="translated">この関数には4つのオーバーロードがあります。最初の2つは文字列の配列 &lt;code&gt;args&lt;/code&gt; を受け取ります。これには、0番目の要素としてプログラム名が含まれ、後続の要素にはコマンドライン引数が含まれます。3番目と4番目のバージョンは、便宜上含まれており、コマンドライン引数がない場合に使用できます。これらは、プログラム名を指定する単一の文字列 &lt;code&gt;program&lt;/code&gt; を取ります。</target>
        </trans-unit>
        <trans-unit id="72dc9dd21f6b2060d2cd40a0fb38433822ac81cb" translate="yes" xml:space="preserve">
          <source>There are helper functions in this module which generate common delegates to pass to &lt;code&gt;bwdRange&lt;/code&gt;. Their documentation starts with &quot;Range-generating function,&quot; making them easily searchable.</source>
          <target state="translated">このモジュールには、 &lt;code&gt;bwdRange&lt;/code&gt; に渡す一般的なデリゲートを生成するヘルパー関数があります。ドキュメントは「範囲生成関数」で始まり、簡単に検索できます。</target>
        </trans-unit>
        <trans-unit id="b5dd0af54e988a94be1d9ad088b9582f13489afd" translate="yes" xml:space="preserve">
          <source>There are helper functions in this module which generate common delegates to pass to &lt;code&gt;bwdRange&lt;/code&gt;. Their documentation starts with &quot;Range-generating function,&quot; to make them easily searchable.</source>
          <target state="translated">このモジュールには、 &lt;code&gt;bwdRange&lt;/code&gt; に渡す一般的なデリゲートを生成するヘルパー関数があります。ドキュメントは「範囲生成関数」で始まり、簡単に検索できるようになっています。</target>
        </trans-unit>
        <trans-unit id="7d94c1629b0bd4094ede841815962ed80d0586ef" translate="yes" xml:space="preserve">
          <source>There are helper functions in this module which generate common delegates to pass to &lt;code&gt;fwdRange&lt;/code&gt;. Their documentation starts with &quot;Range-generating function,&quot; making them easily searchable.</source>
          <target state="translated">このモジュールには、 &lt;code&gt;fwdRange&lt;/code&gt; に渡す一般的なデリゲートを生成するヘルパー関数があります。ドキュメントは「範囲生成関数」で始まり、簡単に検索できます。</target>
        </trans-unit>
        <trans-unit id="4b9f6a69e089c92a07a88022f54475869259bbc2" translate="yes" xml:space="preserve">
          <source>There are helper functions in this module which generate common delegates to pass to &lt;code&gt;fwdRange&lt;/code&gt;. Their documentation starts with &quot;Range-generating function,&quot; to make them easily searchable.</source>
          <target state="translated">このモジュールには、 &lt;code&gt;fwdRange&lt;/code&gt; に渡す一般的なデリゲートを生成するヘルパー関数があります。ドキュメントは「範囲生成関数」で始まり、簡単に検索できるようになっています。</target>
        </trans-unit>
        <trans-unit id="fd1414ed61178080af45a1f5ca51914c6e9d26e1" translate="yes" xml:space="preserve">
          <source>There are many articles available that can bolster understanding ranges:</source>
          <target state="translated">理解の幅を広げることができる記事がたくさんあります。</target>
        </trans-unit>
        <trans-unit id="c2d037a1149b17d68159307022f28fe56d8f92d3" translate="yes" xml:space="preserve">
          <source>There are no &lt;code&gt;__cdecl&lt;/code&gt;, &lt;code&gt;__far&lt;/code&gt;, &lt;code&gt;__stdcall&lt;/code&gt;, &lt;a href=&quot;http://www.digitalmars.com/ctg/ctgLanguageImplementation.html#declspec&quot;&gt; &lt;code&gt;__declspec&lt;/code&gt;&lt;/a&gt;, or other such C &lt;a href=&quot;http://www.digitalmars.com/ctg/ctgLanguageImplementation.html#extended&quot;&gt;extended type modifiers&lt;/a&gt; in D. These are handled by &lt;a href=&quot;attribute#linkage&quot;&gt;linkage attributes&lt;/a&gt;, such as &lt;code&gt;extern (C)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__far&lt;/code&gt; には &lt;code&gt;__cdecl&lt;/code&gt; 、&lt;a href=&quot;http://www.digitalmars.com/ctg/ctgLanguageImplementation.html#declspec&quot;&gt; &lt;code&gt;__declspec&lt;/code&gt; &lt;/a&gt; &lt;code&gt;__stdcall&lt;/code&gt; 、__ stdcall、__declspec、またはその他のC &lt;a href=&quot;http://www.digitalmars.com/ctg/ctgLanguageImplementation.html#extended&quot;&gt;拡張型修飾子&lt;/a&gt;はありません。これらは &lt;code&gt;extern (C)&lt;/code&gt; などの&lt;a href=&quot;attribute#linkage&quot;&gt;リンケージ属性&lt;/a&gt;によって処理されます。</target>
        </trans-unit>
        <trans-unit id="6b9f66c209295069e84d0b1adcf2cd5cdb6933de" translate="yes" xml:space="preserve">
          <source>There are no &lt;code&gt;__cdecl&lt;/code&gt;, &lt;code&gt;__far&lt;/code&gt;, &lt;code&gt;__stdcall&lt;/code&gt;, &lt;code&gt;__declspec&lt;/code&gt;, or other such nonstandard C++ extensions in D.</source>
          <target state="translated">&lt;code&gt;__far&lt;/code&gt; には &lt;code&gt;__cdecl&lt;/code&gt; 、 &lt;code&gt;__declspec&lt;/code&gt; &lt;code&gt;__stdcall&lt;/code&gt; 、__ stdcall、__declspec、またはその他の非標準のC ++拡張機能はありません。</target>
        </trans-unit>
        <trans-unit id="b1bbd1ded800fb7f0f4f094477d38ab432c667c3" translate="yes" xml:space="preserve">
          <source>There are no volatile type modifiers in D.</source>
          <target state="translated">Dには揮発性型の修飾子はありません。</target>
        </trans-unit>
        <trans-unit id="bf7de3e93eae097ffa9c0cf65d8e97655fc5a893" translate="yes" xml:space="preserve">
          <source>There are other web resources on regular expressions to help newcomers, and a good &lt;a href=&quot;http://www.regular-expressions.info&quot;&gt;reference with tutorial&lt;/a&gt; can easily be found.</source>
          <target state="translated">初心者を助けるための正規表現に関する他のWebリソースがあり&lt;a href=&quot;http://www.regular-expressions.info&quot;&gt;、チュートリアルの&lt;/a&gt;優れたリファレンスを簡単に見つけることができます。</target>
        </trans-unit>
        <trans-unit id="6c5539350a7f6635346ecf0167abeb30fa2fea73" translate="yes" xml:space="preserve">
          <source>There are several forms of the</source>
          <target state="translated">にはいくつかの形態があります。</target>
        </trans-unit>
        <trans-unit id="6bdc06ec8e2f529ede508fc3fd01087470669fa0" translate="yes" xml:space="preserve">
          <source>There are several things going on here:</source>
          <target state="translated">ここではいくつかのことが起こっています。</target>
        </trans-unit>
        <trans-unit id="06fc1953f9bbd669c6940d581b7a118ebf65b6cd" translate="yes" xml:space="preserve">
          <source>There are several workarounds for this limitation:</source>
          <target state="translated">この制限にはいくつかの回避策があります。</target>
        </trans-unit>
        <trans-unit id="83683e99bdd11374a698bc33993ac450a4156b31" translate="yes" xml:space="preserve">
          <source>There are three categories of functions from the perspective of memory safety:</source>
          <target state="translated">メモリの安全性の観点から、機能を3つに分類しています。</target>
        </trans-unit>
        <trans-unit id="eebb936bce7d3ae26cde36cf7bb35604dacc5791" translate="yes" xml:space="preserve">
          <source>There are three kinds of comments:</source>
          <target state="translated">コメントは3種類あります。</target>
        </trans-unit>
        <trans-unit id="0ec3b7350c3966a7a5f315773f8a0d6461bc2b7c" translate="yes" xml:space="preserve">
          <source>There are two APIs for digests: The template API and the OOP API. The template API uses structs and template helpers like &lt;a href=&quot;#isDigest&quot;&gt;&lt;code&gt;isDigest&lt;/code&gt;&lt;/a&gt;. The OOP API implements digests as classes inheriting the &lt;a href=&quot;#Digest&quot;&gt;&lt;code&gt;Digest&lt;/code&gt;&lt;/a&gt; interface. All digests are named so that the template API struct is called &quot;&lt;b&gt;x&lt;/b&gt;&quot; and the OOP API class is called &quot;&lt;b&gt;x&lt;/b&gt;Digest&quot;. For example we have &lt;code&gt;MD5&lt;/code&gt; &amp;lt;--&amp;gt; &lt;code&gt;MD5Digest&lt;/code&gt;, &lt;code&gt;CRC32&lt;/code&gt; &amp;lt;--&amp;gt; &lt;code&gt;CRC32Digest&lt;/code&gt;, etc.</source>
          <target state="translated">ダイジェストには、テンプレートAPIとOOP APIの2つのAPIがあります。テンプレートAPIは、&lt;a href=&quot;#isDigest&quot;&gt; &lt;code&gt;isDigest&lt;/code&gt; の&lt;/a&gt;ような構造体とテンプレートヘルパーを使用します。 OOP APIは、&lt;a href=&quot;#Digest&quot;&gt; &lt;code&gt;Digest&lt;/code&gt; &lt;/a&gt;インターフェースを継承するクラスとしてダイジェストを実装します。すべてのダイジェストは、テンプレートAPI構造体が &quot; &lt;b&gt;x&lt;/b&gt; &quot;と呼ばれ、OOP APIクラスが &quot; &lt;b&gt;x&lt;/b&gt; Digest&quot; と呼ばれるように名前が付けられています。たとえば、 &lt;code&gt;MD5&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;MD5Digest&lt;/code&gt; 、 &lt;code&gt;CRC32&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;CRC32Digest&lt;/code&gt; などがあります。</target>
        </trans-unit>
        <trans-unit id="f36743287cbe9730e4d00f520be725403f6d9245" translate="yes" xml:space="preserve">
          <source>There are two broad kinds of operations to do on an array - affecting the handle to the array, and affecting the contents of the array.</source>
          <target state="translated">配列に対して行う操作には、大きく分けて 2 種類あります。配列のハンドルに影響を与える操作と、配列の内容に影響を与える操作です。</target>
        </trans-unit>
        <trans-unit id="355137d832c3c393499aa7072985b4778468466a" translate="yes" xml:space="preserve">
          <source>There are two categories of overloads in this template: the first one does a simple compare-and-set, and returns a boolean if the operation happened. The value this is written (&lt;code&gt;writeThis&lt;/code&gt;) can be an rvalue. the second category does a compare-and-swap, or compare-and-exchange, and expects &lt;code&gt;writeThis&lt;/code&gt; to be a pointer type, where the previous value of &lt;code&gt;here&lt;/code&gt; will be written.</source>
          <target state="translated">このテンプレートには2つのカテゴリのオーバーロードがあります。最初のカテゴリは単純な比較と設定を行い、操作が発生した場合はブール値を返します。これが書き込まれる値（ &lt;code&gt;writeThis&lt;/code&gt; ）は右辺値にすることができます。 2番目のカテゴリは、コンペアアンドスワップまたはコンペアアンドエクスチェンジを実行し、 &lt;code&gt;writeThis&lt;/code&gt; がポインタ型であると想定します。 &lt;code&gt;here&lt;/code&gt; 、ここの前の値が書き込まれます。</target>
        </trans-unit>
        <trans-unit id="4d1096c19f131f18fc7530f2ce040303f511bfe2" translate="yes" xml:space="preserve">
          <source>There are two main ways of usage: Extracting files from a zip archive and storing files into a zip archive. These can be mixed though (e.g. read an archive, remove some files, add others and write the new archive).</source>
          <target state="translated">使い方は大きく分けて2つあります。zip アーカイブからファイルを抽出する方法と、zip アーカイブにファイルを保存する方法です。これらは混在させることもできますが (例:アーカイブを読み込んで、いくつかのファイルを削除し、他のファイルを追加し、新しいアーカイブを書き込む)。</target>
        </trans-unit>
        <trans-unit id="2f32e0774371c9709a85def64d98a62e794b8e4d" translate="yes" xml:space="preserve">
          <source>There are two options for handlers. The &lt;code&gt;bool&lt;/code&gt; version is deprecated but will be kept for legacy support. Returning &lt;code&gt;true&lt;/code&gt; from the handler is equivalent to returning &lt;code&gt;UnitTestResult.pass&lt;/code&gt; from the extended version. Returning &lt;code&gt;false&lt;/code&gt; from the handler is equivalent to returning &lt;code&gt;UnitTestResult.fail&lt;/code&gt; from the extended version.</source>
          <target state="translated">ハンドラーには2つのオプションがあります。 &lt;code&gt;bool&lt;/code&gt; バージョンは廃止されましたが、レガシーサポートのために保持されます。戻る &lt;code&gt;true&lt;/code&gt; ハンドラからの復帰は同等です &lt;code&gt;UnitTestResult.pass&lt;/code&gt; を拡張バージョンから。戻る &lt;code&gt;false&lt;/code&gt; ハンドラからの復帰することと等価である &lt;code&gt;UnitTestResult.fail&lt;/code&gt; を拡張バージョンから。</target>
        </trans-unit>
        <trans-unit id="2ba98a9e569b41d605493fc4327d51d93311f773" translate="yes" xml:space="preserve">
          <source>There are two ways of using tilde expansion in a path. One involves using the tilde alone or followed by a path separator. In this case, the tilde will be expanded with the value of the environment variable &lt;code&gt;HOME&lt;/code&gt;. The second way is putting a username after the tilde (i.e. &lt;code&gt;~john/Mail&lt;/code&gt;). Here, the username will be searched for in the user database (i.e. &lt;code&gt;/etc/passwd&lt;/code&gt; on Unix systems) and will expand to whatever path is stored there. The username is considered the string after the tilde ending at the first instance of a path separator.</source>
          <target state="translated">パスでチルダ展開を使用するには2つの方法があります。 1つは、チルダを単独で使用するか、パス区切り文字を続けて使用することです。この場合、チルダは環境変数 &lt;code&gt;HOME&lt;/code&gt; の値で展開されます。 2番目の方法は、チルダの後にユーザー名を置くことです（例： &lt;code&gt;~john/Mail&lt;/code&gt; ）。ここで、ユーザー名はユーザーデータベース（つまり、UNIXシステムでは &lt;code&gt;/etc/passwd&lt;/code&gt; ）で検索され、そこに格納されているパスに展開されます。ユーザー名は、パス区切り記号の最初のインスタンスで終了するチルダの後の文字列と見なされます。</target>
        </trans-unit>
        <trans-unit id="4751b63f33932c16045492e8c9d0524f058f4c0a" translate="yes" xml:space="preserve">
          <source>There are two ways to declarate a symbol as member of a namespace: &lt;code&gt;Nspace&lt;/code&gt; and &lt;code&gt;CPPNamespaceDeclaration&lt;/code&gt;. The former creates a scope for the symbol, and inject them in the parent scope at the same time. The later, this class, has no semantic implications and is only used for mangling. Additionally, this class allows one to use reserved identifiers (D keywords) in the namespace.</source>
          <target state="translated">ネームスペースのメンバーとしてシンボルを宣言するには、 &lt;code&gt;Nspace&lt;/code&gt; と &lt;code&gt;CPPNamespaceDeclaration&lt;/code&gt; の 2つの方法があります。前者はシンボルのスコープを作成し、同時にそれらを親スコープに挿入します。後者のこのクラスには意味上の意味はなく、マングリングにのみ使用されます。さらに、このクラスでは、名前空間で予約済み識別子（Dキーワード）を使用できます。</target>
        </trans-unit>
        <trans-unit id="87bb5bc4a10799fcef3cdb638af33c37c5ac5274" translate="yes" xml:space="preserve">
          <source>There can be any number of unit test functions in a module, including within struct, union and class declarations. They are executed in lexical order.</source>
          <target state="translated">モジュール内には、構造体、ユニオン、クラス宣言内など、ユニットテスト関数がいくつでも存在する可能性があります。これらは語彙順に実行されます。</target>
        </trans-unit>
        <trans-unit id="ed108d2e4ffaebbc3cca03de1cfa2dee10188c4a" translate="yes" xml:space="preserve">
          <source>There can be more than one invariant declared per class or struct.</source>
          <target state="translated">クラスや構造体ごとに複数の不変量を宣言することができます。</target>
        </trans-unit>
        <trans-unit id="07b99c3830a2a4bb0228e8b9b17dd7669ccd56c2" translate="yes" xml:space="preserve">
          <source>There can be multiple documented unittests and they can appear in any order. They will be attached to the last non-unittest declaration:</source>
          <target state="translated">文書化された複数のユニテストがあり、それらは任意の順序で現れることができます。これらは、最後の非ユニテスト宣言に添付されます。</target>
        </trans-unit>
        <trans-unit id="a95e25d0165fbf5408fd68a513879e3e08629026" translate="yes" xml:space="preserve">
          <source>There can be multiple static constructors and static destructors within one module. The static constructors are run in lexical order, the static destructors are run in reverse lexical order.</source>
          <target state="translated">1 つのモジュール内には、複数の静的コンストラクタと静的デストラクタが存在します。静的コンストラクタは語彙順に実行され、静的デストラクタは逆の語彙順に実行されます。</target>
        </trans-unit>
        <trans-unit id="079786d2cc065de51998cade65524ac448945bab" translate="yes" xml:space="preserve">
          <source>There can be only one destructor per class, the destructor does not have any parameters, and has no attributes. It is always virtual.</source>
          <target state="translated">1つのクラスに1つのデストラクタしか存在できず、デストラクタはパラメータを持たず、属性も持ちません。デストラクタは常にバーチャルです。</target>
        </trans-unit>
        <trans-unit id="a32fb137b8708f3a1060842effbe53862ee224b5" translate="yes" xml:space="preserve">
          <source>There can be only zero or one</source>
          <target state="translated">ゼロか一かのどちらかしかない</target>
        </trans-unit>
        <trans-unit id="997178780ab769837ddb59d8efa52d7b04a80956" translate="yes" xml:space="preserve">
          <source>There can only be one such attribute per symbol.</source>
          <target state="translated">このような属性は、1つのシンボルにつき1つしかありません。</target>
        </trans-unit>
        <trans-unit id="e54e87553bcbc89bb92a0dbc881f7633b6a68acf" translate="yes" xml:space="preserve">
          <source>There has been a great deal of discussion in the D newsgroups over this, and several implementations:  &lt;a href=&quot;http://www.digitalmars.com/d/archives/digitalmars/D/announce/signal_slots_library_4825.html&quot;&gt;signal slots library&lt;/a&gt;</source>
          <target state="translated">これに関するDニュースグループでの多くの議論と、いくつかの実装： &lt;a href=&quot;http://www.digitalmars.com/d/archives/digitalmars/D/announce/signal_slots_library_4825.html&quot;&gt;シグナルスロットライブラリ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bb4241af492e556aa6aed9941d820f825c722aec" translate="yes" xml:space="preserve">
          <source>There have been several D implementations of Signals and Slots. This version makes use of several new features in D, which make using it simpler and less error prone. In particular, it is no longer necessary to instrument the slots.</source>
          <target state="translated">シグナルとスロットの D 実装はこれまでにもいくつかありました。このバージョンでは、D のいくつかの新機能を利用しています。特に、スロットをインストルメントする必要がなくなりました。</target>
        </trans-unit>
        <trans-unit id="137e54850bfef26233dbe4876142a62cdeee9d88" translate="yes" xml:space="preserve">
          <source>There is a hierarchy of allocation kinds. When an allocator is implemented for a given combination of flags, it is used. Otherwise, the next down the list is chosen.</source>
          <target state="translated">割り当ての種類には階層があります。与えられたフラグの組み合わせに対してアロケータが実装されている場合、それが使用されます。それ以外の場合は、リストの下の次のものが選ばれます。</target>
        </trans-unit>
        <trans-unit id="fb4bb1493d0166938db3cf214276bbc597f0dc3b" translate="yes" xml:space="preserve">
          <source>There is a rich set of functions for string handling defined in other modules. Functions related to Unicode and ASCII are found in &lt;a href=&quot;std_uni&quot;&gt;&lt;code&gt;std.uni&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;std_ascii&quot;&gt;&lt;code&gt;std.ascii&lt;/code&gt;&lt;/a&gt;, respectively. Other functions that have a wider generality than just strings can be found in &lt;a href=&quot;std_algorithm&quot;&gt;&lt;code&gt;std.algorithm&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;std_range&quot;&gt;&lt;code&gt;std.range&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">他のモジュールで定義された文字列処理のための豊富な関数セットがあります。 UnicodeおよびASCIIに関連する関数は、それぞれ&lt;a href=&quot;std_uni&quot;&gt; &lt;code&gt;std.uni&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;std_ascii&quot;&gt; &lt;code&gt;std.ascii&lt;/code&gt; &lt;/a&gt;にあります。単なる文字列よりも一般性のある他の関数は&lt;a href=&quot;std_algorithm&quot;&gt; &lt;code&gt;std.algorithm&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;std_range&quot;&gt; &lt;code&gt;std.range&lt;/code&gt; にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="567058ffed748f85071d989bbf1a314374e793b2" translate="yes" xml:space="preserve">
          <source>There is a special type of array which acts as a wildcard that can hold arrays of any kind, declared as &lt;code&gt;void[]&lt;/code&gt;. Void arrays are used for low-level operations where some kind of array data is being handled, but the exact type of the array elements are unimportant. The &lt;code&gt;.length&lt;/code&gt; of a void array is the length of the data in bytes, rather than the number of elements in its original type. Array indices in indexing and slicing operations are interpreted as byte indices.</source>
          <target state="translated">&lt;code&gt;void[]&lt;/code&gt; として宣言された、あらゆる種類の配列を保持できるワイルドカードとして機能する特別なタイプの配列があります。Void配列は、ある種の配列データが処理されている低レベルの操作に使用されますが、配列要素の正確なタイプは重要ではありません。void配列の &lt;code&gt;.length&lt;/code&gt; は、元の型の要素数ではなく、バイト単位のデータの長さです。インデックス付けおよびスライス操作の配列インデックスは、バイトインデックスとして解釈されます。</target>
        </trans-unit>
        <trans-unit id="33cea21ca6b34b343eb25bbde6ebec03ec759bdc" translate="yes" xml:space="preserve">
          <source>There is currently only one special token sequence, &lt;code&gt;#line&lt;/code&gt;.</source>
          <target state="translated">現在、特別なトークンシーケンスは &lt;code&gt;#line&lt;/code&gt; のみです。</target>
        </trans-unit>
        <trans-unit id="ef49fac97d8d2e188e2b78d1a813470cc50ed39b" translate="yes" xml:space="preserve">
          <source>There is currently work in progress to make the runtime library free of GC heap allocations, to allow its use in scenarios where the use of GC infrastructure is not possible.</source>
          <target state="translated">現在、GCのインフラストラクチャの使用が不可能なシナリオでの使用を可能にするために、ランタイムライブラリをGCのヒープ割り当てから解放するための作業が進行中です。</target>
        </trans-unit>
        <trans-unit id="4d933b4164fe170e150ab2367873a597423583d2" translate="yes" xml:space="preserve">
          <source>There is no more need to translate error codes into human readable strings, the correct string is generated by the error detection code, not the error recovery code. This also leads to consistent error messages for the same error between applications.</source>
          <target state="translated">エラーコードを人間が読める文字列に変換する必要がなくなり、正しい文字列はエラー回復コードではなくエラー検出コードによって生成されます。これはまた、アプリケーション間で同じエラーに対して一貫したエラーメッセージを生成することにもつながります。</target>
        </trans-unit>
        <trans-unit id="f17b623fe683ff68f6ed189b8d0d74d5452c95d7" translate="yes" xml:space="preserve">
          <source>There is no overload for &lt;code&gt;merge&lt;/code&gt; which takes a &lt;code&gt;NegInfInterval&lt;/code&gt;, because an interval going from negative infinity to positive infinity is not possible.</source>
          <target state="translated">&lt;code&gt;NegInfInterval&lt;/code&gt; を取る &lt;code&gt;merge&lt;/code&gt; のオーバーロードはありません。負の無限大から正の無限大への間隔は不可能だからです。</target>
        </trans-unit>
        <trans-unit id="e26153f4d19858ed80c05ff7d79d4191b5074d49" translate="yes" xml:space="preserve">
          <source>There is no overload for &lt;code&gt;merge&lt;/code&gt; which takes a &lt;code&gt;PosInfInterval&lt;/code&gt;, because an interval going from negative infinity to positive infinity is not possible.</source>
          <target state="translated">&lt;code&gt;PosInfInterval&lt;/code&gt; を取る &lt;code&gt;merge&lt;/code&gt; のオーバーロードはありません。負の無限大から正の無限大への間隔は不可能だからです。</target>
        </trans-unit>
        <trans-unit id="5f100a7a77aee94633ec1e2fffc1096ce477240e" translate="yes" xml:space="preserve">
          <source>There is no overload for &lt;code&gt;span&lt;/code&gt; which takes a &lt;code&gt;NegInfInterval&lt;/code&gt;, because an interval going from negative infinity to positive infinity is not possible.</source>
          <target state="translated">&lt;code&gt;NegInfInterval&lt;/code&gt; を取る &lt;code&gt;span&lt;/code&gt; の過負荷はありません。負の無限大から正の無限大への間隔は不可能だからです。</target>
        </trans-unit>
        <trans-unit id="5ac7b0e8d9f0ebf981b0a2590d75065c28e84b23" translate="yes" xml:space="preserve">
          <source>There is no overload for &lt;code&gt;span&lt;/code&gt; which takes a &lt;code&gt;PosInfInterval&lt;/code&gt;, because an interval going from negative infinity to positive infinity is not possible.</source>
          <target state="translated">&lt;code&gt;PosInfInterval&lt;/code&gt; を取る &lt;code&gt;span&lt;/code&gt; の過負荷はありません。負の無限大から正の無限大への間隔は不可能だからです。</target>
        </trans-unit>
        <trans-unit id="f2973bc2fd6add6e6231856c6dedc987f0924540" translate="yes" xml:space="preserve">
          <source>There is no remove command functionality. Do a &lt;a href=&quot;#clearCommands&quot;&gt;&lt;code&gt;clearCommands&lt;/code&gt;&lt;/a&gt; and set the needed commands instead.</source>
          <target state="translated">削除コマンド機能はありません。やる&lt;a href=&quot;#clearCommands&quot;&gt; &lt;code&gt;clearCommands&lt;/code&gt; を&lt;/a&gt;、代わりに必要なコマンドを設定します。</target>
        </trans-unit>
        <trans-unit id="5030f2329ed730fd9eebd4cf5437fa2be5db1b38" translate="yes" xml:space="preserve">
          <source>There is no remove header functionality. Do a &lt;a href=&quot;#clearRequestHeaders&quot;&gt;&lt;code&gt;clearRequestHeaders&lt;/code&gt;&lt;/a&gt; and set the needed headers instead.</source>
          <target state="translated">ヘッダーの削除機能はありません。やる&lt;a href=&quot;#clearRequestHeaders&quot;&gt; &lt;code&gt;clearRequestHeaders&lt;/code&gt; を&lt;/a&gt;、代わりに必要なヘッダーを設定。</target>
        </trans-unit>
        <trans-unit id="97b11eff895aae8a00d7fa461823417d322a76c8" translate="yes" xml:space="preserve">
          <source>There is no virtual table.</source>
          <target state="translated">仮想テーブルはありません。</target>
        </trans-unit>
        <trans-unit id="5dac0a061658caed895ea08b3637f43c40d7da9d" translate="yes" xml:space="preserve">
          <source>There is no volatile type modifier in D. To declare a C function that uses volatile, just drop the keyword from the declaration.</source>
          <target state="translated">Dにはvolatile型の修飾子はありません。volatileを使用するC関数を宣言するには、宣言からキーワードを削除するだけです。</target>
        </trans-unit>
        <trans-unit id="2434d329704768f135cc60da2cb84c7ba22ac13f" translate="yes" xml:space="preserve">
          <source>There is one exception to the fact that the new type is not related to the old type. &lt;a href=&quot;https://dlang.org/spec/function.html#pseudo-member&quot;&gt;Pseudo-member&lt;/a&gt; functions are usable with the new type; they will be forwarded on to the proxied value.</source>
          <target state="translated">新しいタイプが古いタイプと関連していないという事実には1つの例外があります。&lt;a href=&quot;https://dlang.org/spec/function.html#pseudo-member&quot;&gt;疑似メンバー&lt;/a&gt;関数は新しいタイプで使用できます。それらはプロキシされた値に転送されます。</target>
        </trans-unit>
        <trans-unit id="ba21f8033d033a747c90b386e1729af20f18ceb8" translate="yes" xml:space="preserve">
          <source>There may be multiple invariants in a class. They are applied in lexical order.</source>
          <target state="translated">クラスには複数の不変量が存在する場合があります。これらは語彙順に適用されます。</target>
        </trans-unit>
        <trans-unit id="9a039cc903df4604c54902450e403871fe046481" translate="yes" xml:space="preserve">
          <source>There may be multiple invariants in a struct. They are applied in lexical order.</source>
          <target state="translated">構造体には複数の不変量が存在する場合があります。これらは語彙順に適用されます。</target>
        </trans-unit>
        <trans-unit id="d77d0c2b7a22ee08dcc65faf1983734627d5bea1" translate="yes" xml:space="preserve">
          <source>There may be one or more callable entities (&lt;code&gt;functions&lt;/code&gt; argument) to apply.</source>
          <target state="translated">適用する1つ以上の呼び出し可能エンティティ（ &lt;code&gt;functions&lt;/code&gt; 引数）がある場合があります。</target>
        </trans-unit>
        <trans-unit id="32ca8690590fc77f40e2a27fd064159d0d52468b" translate="yes" xml:space="preserve">
          <source>There must be at least one non-variadic parameter declared.</source>
          <target state="translated">少なくとも1つの非変数パラメータが宣言されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="60b895f637fb0461c08aa3c29c276b9513bb30e3" translate="yes" xml:space="preserve">
          <source>There must be one &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; and it must evaluate at compile time to a function symbol.</source>
          <target state="translated">1つの&lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;が必要で、コンパイル時に関数シンボルに評価される必要があります。</target>
        </trans-unit>
        <trans-unit id="ed59ba7f34618cfcf4f2f62b488d49f3556f524b" translate="yes" xml:space="preserve">
          <source>There must be one &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; and it must evaluate at compile time to a string literal.</source>
          <target state="translated">1つの&lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;が必要であり、コンパイル時に文字列リテラルに評価される必要があります。</target>
        </trans-unit>
        <trans-unit id="9800621b870999653a584633cd52d141e5fbaea7" translate="yes" xml:space="preserve">
          <source>There's only one instance of each module, and it is statically allocated.</source>
          <target state="translated">各モジュールのインスタンスは1つしかなく、静的に割り当てられています。</target>
        </trans-unit>
        <trans-unit id="2acf8c215fcf96c4f44ab4510da81603fd6cc2b3" translate="yes" xml:space="preserve">
          <source>Therefore, it is the programmer's responsibility to ensure that &lt;code&gt;opCmp&lt;/code&gt; and &lt;code&gt;opEquals&lt;/code&gt; are consistent with each other. If &lt;code&gt;opEquals&lt;/code&gt; is not specified, the compiler provides a default version that does member-wise comparison. If this suffices, one may define only &lt;code&gt;opCmp&lt;/code&gt; to customize the behaviour of the inequality operators. But if not, then a custom version of &lt;code&gt;opEquals&lt;/code&gt; should be defined as well, in order to preserve consistent semantics between the two kinds of comparison operators.</source>
          <target state="translated">したがって、 &lt;code&gt;opCmp&lt;/code&gt; と &lt;code&gt;opEquals&lt;/code&gt; が互いに一貫していることを確認するのはプログラマの責任です。 &lt;code&gt;opEquals&lt;/code&gt; が指定されていない場合、コンパイラーは、メンバーごとの比較を行うデフォルトのバージョンを提供します。これで十分であれば、 &lt;code&gt;opCmp&lt;/code&gt; のみを定義して、不等式演算子の動作をカスタマイズできます。ただし、そうでない場合は、2種類の比較演算子の間で一貫したセマンティクスを維持するために、 &lt;code&gt;opEquals&lt;/code&gt; のカスタムバージョンも定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="f6272f7f8273a14bd5544dddbcb1b98032093e68" translate="yes" xml:space="preserve">
          <source>These allow you to construct a &lt;code&gt;Duration&lt;/code&gt; from the given time units with the given length.</source>
          <target state="translated">これらを使用すると、指定された時間単位から指定された長さの &lt;code&gt;Duration&lt;/code&gt; を構築できます。</target>
        </trans-unit>
        <trans-unit id="da7cf3cb33f506c60b3bae2d7621731fe8a25b5a" translate="yes" xml:space="preserve">
          <source>These are a temporary means of providing a GC hook for DLL use. They may be replaced with some other similar functionality later.</source>
          <target state="translated">これらは、DLL 使用のための GC 2011 フックを提供する一時的な手段です。これらは、後で他の類似した機能に置き換えられるかもしれません。</target>
        </trans-unit>
        <trans-unit id="6b408f5f827798e4336b44c606a3a8049fa5f385" translate="yes" xml:space="preserve">
          <source>These are convenience aliases for &lt;a href=&quot;std_digest#digest&quot;&gt;&lt;code&gt;std.digest.digest&lt;/code&gt;&lt;/a&gt; using the SHA implementation.</source>
          <target state="translated">これらは、SHA実装を使用した&lt;a href=&quot;std_digest#digest&quot;&gt; &lt;code&gt;std.digest.digest&lt;/code&gt; の&lt;/a&gt;便利なエイリアスです。</target>
        </trans-unit>
        <trans-unit id="cc11c250252b92e0b68a712fc50db2f954bbf31e" translate="yes" xml:space="preserve">
          <source>These are found in Druntime's &lt;a href=&quot;https://github.com/dlang/druntime/blob/master/src/rt/&quot;&gt;rt/&lt;/a&gt;.</source>
          <target state="translated">これらはDruntimeの&lt;a href=&quot;https://github.com/dlang/druntime/blob/master/src/rt/&quot;&gt;rt /にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d82964c86f7448130324ef200af867ae90f45f65" translate="yes" xml:space="preserve">
          <source>These are mostly undocumented, as documentation for the functions these declarations provide bindings to can be found on external resources.</source>
          <target state="translated">これらの宣言がバインディングを提供する関数のドキュメントは外部のリソースにあるので、これらはほとんどが文書化されていません。</target>
        </trans-unit>
        <trans-unit id="a0b799b4059387b1ffa81eb5e832597a15aaf9ea" translate="yes" xml:space="preserve">
          <source>These are not directly overloadable, but instead are rewritten in terms of the ++</source>
          <target state="translated">これらは直接オーバーロード可能なものではなく、代わりに++のように書き換えられています。</target>
        </trans-unit>
        <trans-unit id="684251477ee92646066796884e053236894cc9d8" translate="yes" xml:space="preserve">
          <source>These are not to be conflated with atomic operations. They do not guarantee any atomicity. This may be provided by coincidence as a result of the instructions used on the target, but this should not be relied on for portable programs. Further, no memory fences are implied by these functions. They should not be used for communication between threads. They may be used to guarantee a write or read cycle occurs at a specified address.</source>
          <target state="translated">これらは原子操作と混同してはいけません。これらは原子性を保証するものではありません。これは、ターゲット上で使用される命令の結果として偶然に提供されるかもしれませんが、ポータブルなプログラムではこれに頼るべきではありません。さらに、これらの関数はメモリフェンスを暗示するものではありません。これらの関数はスレッド間の通信に使用すべきではありません。これらの関数は、指定されたアドレスでの書き込みまたは読み出しサイクルを保証するために使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="ebd50df5a290d3b9f19a683a307dc1ce5e6fed02" translate="yes" xml:space="preserve">
          <source>These are of type &lt;code&gt;bool&lt;/code&gt; and when cast to another integral type become the values 1 and 0, respectively.</source>
          <target state="translated">これらは &lt;code&gt;bool&lt;/code&gt; 型であり、別の整数型にキャストすると、それぞれ値1および0になります。</target>
        </trans-unit>
        <trans-unit id="812c2acf872ebe10657aaa2bbdf1807e2d587d11" translate="yes" xml:space="preserve">
          <source>These are presumably set by the command line as &lt;code&gt;-debug=&lt;/code&gt;</source>
          <target state="translated">これらはおそらくコマンドラインで &lt;code&gt;-debug=&lt;/code&gt; として設定されます</target>
        </trans-unit>
        <trans-unit id="47c1d2e1e32630d5e744bf290c6e49eb16fa04f9" translate="yes" xml:space="preserve">
          <source>These are presumably set by the command line as &lt;code&gt;-version=n&lt;/code&gt; and &lt;code&gt;-version=identifier&lt;/code&gt;.</source>
          <target state="translated">これらはおそらくコマンドラインで &lt;code&gt;-version=n&lt;/code&gt; および &lt;code&gt;-version=identifier&lt;/code&gt; として設定されます。</target>
        </trans-unit>
        <trans-unit id="f2ddfd41f42add825e0e95354286885963260165" translate="yes" xml:space="preserve">
          <source>These are the return codes for the seek callbacks</source>
          <target state="translated">以下はシークコールバックのリターンコードです。</target>
        </trans-unit>
        <trans-unit id="402db899657981891e40b75b734371cded453058" translate="yes" xml:space="preserve">
          <source>These are the same kinds of scenarios where different optimization settings affect the results.</source>
          <target state="translated">これらは、異なる最適化設定が結果に影響を与えるシナリオと同じ種類のものです。</target>
        </trans-unit>
        <trans-unit id="1b6a4816df5dd7b7abf0b558eca9229ade75c78d" translate="yes" xml:space="preserve">
          <source>These arrays are statically allocated when they appear in global scope. Otherwise, they need to be marked with &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;static&lt;/code&gt; storage classes to make them statically allocated arrays.</source>
          <target state="translated">これらの配列は、グローバルスコープに表示されるときに静的に割り当てられます。それ以外の場合は、 &lt;code&gt;const&lt;/code&gt; または &lt;code&gt;static&lt;/code&gt; ストレージクラスでマークして、静的に割り当てられた配列にする必要があります。</target>
        </trans-unit>
        <trans-unit id="89a145122969b840110b2fc3e84b6ee09c611afa" translate="yes" xml:space="preserve">
          <source>These attributes may appear after the formal parameter list, in which case they apply either to a method's &lt;code&gt;this&lt;/code&gt; parameter, or to a free function's first parameter</source>
          <target state="translated">これらの属性は、仮パラメーターリストの後に表示される場合があります。その場合、メソッドの &lt;code&gt;this&lt;/code&gt; パラメーターまたはフリー関数の最初のパラメーターに適用されます。</target>
        </trans-unit>
        <trans-unit id="a7f7fc51e48ac814a4df7b5cf79166bee33de381" translate="yes" xml:space="preserve">
          <source>These attributes may be inferred when the compiler has the function body available, such as with templates.</source>
          <target state="translated">これらの属性は、テンプレートのようにコンパイラが関数本体を利用できる場合に推測されます。</target>
        </trans-unit>
        <trans-unit id="2c92e5f8eec2fac65821b6ee901edef5b0d32346" translate="yes" xml:space="preserve">
          <source>These behaviors may be specified when a mailbox is full.</source>
          <target state="translated">これらの動作は、メールボックスが一杯になったときに指定することができます。</target>
        </trans-unit>
        <trans-unit id="36131b1e9db1f47f4a6ae00babc38af51f8234a5" translate="yes" xml:space="preserve">
          <source>These characters are not normally used in isolation unless they are being described. They include such characters as accents, diacritics, Hebrew points, Arabic vowel signs, and Indic matras.</source>
          <target state="translated">これらの文字は、通常、記述されている場合を除き、単独で使用されることはありません。これらの文字には、アクセント、ダイアクリティック、ヘブライ語のポイント、アラビア語の母音記号、インド語のマトラなどの文字が含まれています。</target>
        </trans-unit>
        <trans-unit id="5af07f8dc23a2ff314c5b53d75ac93fc8390edf4" translate="yes" xml:space="preserve">
          <source>These compound format specifiers may be nested in the case of a nested array argument:</source>
          <target state="translated">これらの複合フォーマット指定子は、ネストされた配列引数の場合にネストされることがあります。</target>
        </trans-unit>
        <trans-unit id="636ef2d434aea6975bee7e2e69eaea244d21ce1f" translate="yes" xml:space="preserve">
          <source>These constraints are addressed by techniques outlined in &lt;a href=&quot;https://wiki.dlang.org/Memory_Management&quot;&gt;Memory Management&lt;/a&gt;, including the mechanisms provided by D to control allocations outside the GC heap.</source>
          <target state="translated">これらの制約は、GCヒープ外の割り当てを制御するためにDが提供するメカニズムを含む、&lt;a href=&quot;https://wiki.dlang.org/Memory_Management&quot;&gt;メモリ管理&lt;/a&gt;で概説されている手法によって対処されます。</target>
        </trans-unit>
        <trans-unit id="ce5525a7da98014873ce5f20228128913e88d54f" translate="yes" xml:space="preserve">
          <source>These declarations are transformed into templates:</source>
          <target state="translated">これらの宣言はテンプレートに変換されます。</target>
        </trans-unit>
        <trans-unit id="cd87aa675633720f30baafcf6365c73aa7dc6850" translate="yes" xml:space="preserve">
          <source>These directories are recognized by some tools, like the Objective-C compiler and linker, to be frameworks. To link with a framework from DMD, use the following flags:</source>
          <target state="translated">これらのディレクトリは、Objective-C コンパイラやリンカなどのツールによってフレームワークとして認識されます。DMD のフレームワークとリンクするには、以下のフラグを使用します。</target>
        </trans-unit>
        <trans-unit id="2db5010283f3eff8277b4bb683d65dd36da0605f" translate="yes" xml:space="preserve">
          <source>These enums are for use with the CURLOPT_HTTP_VERSION option.</source>
          <target state="translated">これらの列挙は、CURLOPT_HTTP_VERSION オプションで使用します。</target>
        </trans-unit>
        <trans-unit id="66b51419f8ca45e5302436f93fca4afec04366fd" translate="yes" xml:space="preserve">
          <source>These enums are for use with the CURLOPT_NETRC option.</source>
          <target state="translated">これらの列挙は、CURLOPT_NETRCオプションで使用します。</target>
        </trans-unit>
        <trans-unit id="792d4e3a997f4a55954321b6a67c17e920eebf88" translate="yes" xml:space="preserve">
          <source>These equivalents hold for most C compilers. The C standard does not pin down the sizes of the types, so some care is needed.</source>
          <target state="translated">これらの等価なものはほとんどのCコンパイラで保持されています。C標準では型のサイズをピンダウンしていないので、多少の注意が必要です。</target>
        </trans-unit>
        <trans-unit id="dd5b42710c6e5261013fdb1ae53fc4cbc41fd9bf" translate="yes" xml:space="preserve">
          <source>These equivalents hold when the D and C++ compilers used are companions on the host platform.</source>
          <target state="translated">これらの同等のものは、使用されているDおよびC++コンパイラがホストプラットフォーム上のコンパニオンである場合に保持されます。</target>
        </trans-unit>
        <trans-unit id="90ade43ed5cb1a3092e67126f0f81a88dfd49b38" translate="yes" xml:space="preserve">
          <source>These extensions can be pretty-printed by &lt;a href=&quot;http://www.digitalmars.com/ctg/obj2asm.html&quot;&gt;obj2asm&lt;/a&gt;. The &lt;a href=&quot;http://ddbg.mainia.de/releases.html&quot;&gt;Ddbg&lt;/a&gt; debugger supports them.</source>
          <target state="translated">これらの拡張は、&lt;a href=&quot;http://www.digitalmars.com/ctg/obj2asm.html&quot;&gt;obj2asm&lt;/a&gt;によってきれいに印刷できます。&lt;a href=&quot;http://ddbg.mainia.de/releases.html&quot;&gt;Ddbgの&lt;/a&gt;デバッガは、それらをサポートしています。</target>
        </trans-unit>
        <trans-unit id="ad13d21d22689769fb2cd4c608e9e8fc232324fc" translate="yes" xml:space="preserve">
          <source>These field were added in CURLVERSION_FOURTH. Same as 'libiconv_version' if built with HAVE_ICONV</source>
          <target state="translated">これらのフィールドは CURLVERSION_FOURTH で追加された。HAVE_ICONVでビルドされた場合は、'libiconv_version'と同じです。</target>
        </trans-unit>
        <trans-unit id="507497a0514f5bd17890a554cbbbf16c831493b7" translate="yes" xml:space="preserve">
          <source>These flags can be bitwise OR-ed together to represent a complex attribute.</source>
          <target state="translated">これらのフラグは、複雑な属性を表現するために、ビット単位で OR 化することができます。</target>
        </trans-unit>
        <trans-unit id="0046ed397526fe785a54f9113f894289f9d20106" translate="yes" xml:space="preserve">
          <source>These flags can be bitwise OR-ed together to represent complex storage class.</source>
          <target state="translated">これらのフラグは、複雑なストレージクラスを表現するために、ビット単位でORしてまとめることができます。</target>
        </trans-unit>
        <trans-unit id="91bde2af8a3dc4b91f2f8c73ebb091513ee7a69a" translate="yes" xml:space="preserve">
          <source>These flags can be set/reset via the functions in &lt;code&gt;core.stdc.fenv&lt;/code&gt;.</source>
          <target state="translated">これらのフラグは、 &lt;code&gt;core.stdc.fenv&lt;/code&gt; の関数を使用して設定/リセットできます。</target>
        </trans-unit>
        <trans-unit id="10b77f7a0eebb3e7a656fbdfd23d4cee9e1bc0e6" translate="yes" xml:space="preserve">
          <source>These flags indicate that an exceptional floating-point condition has occurred. They indicate that a NaN or an infinity has been generated, that a result is inexact, or that a signalling NaN has been encountered. If floating-point exceptions are enabled (unmasked), a hardware exception will be generated instead of setting these flags.</source>
          <target state="translated">これらのフラグは、例外的な浮動小数点状態が発生したことを示します。これらのフラグは、NaN または無限大が生成されたこと、結果が不正確であること、またはシグナリング NaN が発生したことを示します。浮動小数点例外が有効(アンマスク)になっている場合、これらのフラグを設定する代わりにハードウェア例外が生成されます。</target>
        </trans-unit>
        <trans-unit id="e250dcdba1c724b4c5950d43225e8f190c1411c5" translate="yes" xml:space="preserve">
          <source>These functions allow getting and setting the OS scheduling priority of the worker threads in this &lt;code&gt;TaskPool&lt;/code&gt;. They forward to &lt;code&gt;core.thread.Thread.priority&lt;/code&gt;, so a given priority value here means the same thing as an identical priority value in &lt;code&gt;core.thread&lt;/code&gt;.</source>
          <target state="translated">これらの関数を使用すると、この &lt;code&gt;TaskPool&lt;/code&gt; のワーカースレッドのOSスケジューリング優先順位を取得および設定できます。それらは &lt;code&gt;core.thread.Thread.priority&lt;/code&gt; に転送するため、ここで指定された優先度の値は、 &lt;code&gt;core.thread&lt;/code&gt; の同じ優先度の値と同じことを意味します。</target>
        </trans-unit>
        <trans-unit id="563010f17028868ed8865c10ee72ad70b45bdc1f" translate="yes" xml:space="preserve">
          <source>These functions allow the creation of &lt;code&gt;Task&lt;/code&gt; objects on the stack rather than the GC heap. The lifetime of a &lt;code&gt;Task&lt;/code&gt; created by &lt;code&gt;scopedTask&lt;/code&gt; cannot exceed the lifetime of the scope it was created in.</source>
          <target state="translated">これらの関数を使用すると、GCヒープではなくスタックに &lt;code&gt;Task&lt;/code&gt; オブジェクトを作成できます。 &lt;code&gt;scopedTask&lt;/code&gt; によって作成された &lt;code&gt;Task&lt;/code&gt; の存続期間は、それが作成されたスコープの存続期間を超えることはできません。</target>
        </trans-unit>
        <trans-unit id="4c3aa616b64e71a662b37e0ffc58b47e53c7d7a0" translate="yes" xml:space="preserve">
          <source>These functions are defined by</source>
          <target state="translated">これらの関数は</target>
        </trans-unit>
        <trans-unit id="64a3eca56341ef165f9199f2a7eb38f22c9f31d6" translate="yes" xml:space="preserve">
          <source>These functions are only available if &lt;code&gt;hasPeek!T&lt;/code&gt; is true.</source>
          <target state="translated">これらの関数は、 &lt;code&gt;hasPeek!T&lt;/code&gt; がtrueの場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="ca1095cd637088fb9ac4b341f976f96ce873e4a7" translate="yes" xml:space="preserve">
          <source>These functions are only supported on POSIX platforms, as the Windows operating systems do not provide the ability to overwrite the current process image with another. In single-threaded programs it is possible to approximate the effect of &lt;code&gt;execv*&lt;/code&gt; by using &lt;a href=&quot;#spawnProcess&quot;&gt;&lt;code&gt;spawnProcess&lt;/code&gt;&lt;/a&gt; and terminating the current process once the child process has returned. For example:</source>
          <target state="translated">Windowsオペレーティングシステムには現在のプロセスイメージを別のプロセスイメージで上書きする機能がないため、これらの関数はPOSIXプラットフォームでのみサポートされています。シングルスレッドのプログラムでは、の効果に近似することが可能である &lt;code&gt;execv*&lt;/code&gt; 使用して&lt;a href=&quot;#spawnProcess&quot;&gt; &lt;code&gt;spawnProcess&lt;/code&gt; を&lt;/a&gt;し、子プロセスが戻ってきた後、現在のプロセスを終了します。例えば：</target>
        </trans-unit>
        <trans-unit id="536f51437dc16a03b75f3b412228393928fdac5c" translate="yes" xml:space="preserve">
          <source>These functions are recognized by the compiler, and calls to them are guaranteed to not be removed (as dead assignment elimination or presumed to have no effect) or reordered in the same thread.</source>
          <target state="translated">これらの関数はコンパイラによって認識され、これらの関数の呼び出しは、削除されたり(デッドアサイン消去として、または効果がないと推定される)、同じスレッド内で並び替えられたりしないことが保証されています。</target>
        </trans-unit>
        <trans-unit id="1689bc1bc5afab34bd94fef9d049d296d24218eb" translate="yes" xml:space="preserve">
          <source>These functions find the first occurrence of &lt;code&gt;needle&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt; and then split &lt;code&gt;haystack&lt;/code&gt; as follows.</source>
          <target state="translated">これらの関数は、最初の発生を見つける &lt;code&gt;needle&lt;/code&gt; で &lt;code&gt;haystack&lt;/code&gt; 、次に分割 &lt;code&gt;haystack&lt;/code&gt; 次のように。</target>
        </trans-unit>
        <trans-unit id="4b1cfbf3893f882218472af28278eb2e9814bf0e" translate="yes" xml:space="preserve">
          <source>These functions may be used for computing arbitrary extrema by choosing &lt;code&gt;pred&lt;/code&gt; appropriately. For corrrect functioning, &lt;code&gt;pred&lt;/code&gt; must be a strict partial order, i.e. transitive (if &lt;code&gt;pred(a, b) &amp;amp;&amp;amp; pred(b, c)&lt;/code&gt; then &lt;code&gt;pred(a, c)&lt;/code&gt;) and irreflexive (&lt;code&gt;pred(a, a)&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">これらの関数は、 &lt;code&gt;pred&lt;/code&gt; を適切に選択することにより、任意の極値を計算するために使用できます。 corrrect機能するために、 &lt;code&gt;pred&lt;/code&gt; を厳密半順序、すなわち推移（場合でなければならない &lt;code&gt;pred(a, b) &amp;amp;&amp;amp; pred(b, c)&lt;/code&gt; その後 &lt;code&gt;pred(a, c)&lt;/code&gt; （）と非反射 &lt;code&gt;pred(a, a)&lt;/code&gt; である &lt;code&gt;false&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="add0a2e2f51a24f38416d0099f1fae2ea0488394" translate="yes" xml:space="preserve">
          <source>These functions may be used for computing arbitrary extrema by choosing &lt;code&gt;pred&lt;/code&gt; appropriately. For corrrect functioning, &lt;code&gt;pred&lt;/code&gt; must be a strict partial order, i.e. transitive (if &lt;code&gt;pred(a, b) &amp;amp;&amp;amp; pred(b, c)&lt;/code&gt; then &lt;code&gt;pred(a, c)&lt;/code&gt;) and irreflexive (&lt;code&gt;pred(a, a)&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;). The trichotomy property of inequality is not required: these algorithms consider elements &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; equal (for the purpose of counting) if &lt;code&gt;pred&lt;/code&gt; puts them in the same equivalence class, i.e. &lt;code&gt;!pred(a, b) &amp;amp;&amp;amp; !pred(b, a)&lt;/code&gt;.</source>
          <target state="translated">これらの関数は、 &lt;code&gt;pred&lt;/code&gt; を適切に選択することにより、任意の極値を計算するために使用できます。正しく機能するためには、 &lt;code&gt;pred&lt;/code&gt; は厳密な半順序でなければなりません。つまり、推移的（ &lt;code&gt;pred(a, b) &amp;amp;&amp;amp; pred(b, c)&lt;/code&gt; then &lt;code&gt;pred(a, c)&lt;/code&gt; ）および非反射的（ &lt;code&gt;pred(a, a)&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; ）です。不等式の三分法プロパティは必要ありません。これらのアルゴリズムは、 &lt;code&gt;pred&lt;/code&gt; が要素 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; を同じ同値類、つまり &lt;code&gt;!pred(a, b) &amp;amp;&amp;amp; !pred(b, a)&lt;/code&gt; 入れる場合、要素aとbが等しいと見なします（カウントの目的で）。。</target>
        </trans-unit>
        <trans-unit id="e60755fe688a68024196bc269a7db2354557a4c9" translate="yes" xml:space="preserve">
          <source>These functions may be used for computing arbitrary extrema by choosing &lt;code&gt;pred&lt;/code&gt; appropriately. For corrrect functioning, &lt;code&gt;pred&lt;/code&gt; must be a strict partial order, i.e. transitive (if &lt;code&gt;pred(a, b) &amp;amp;&amp;amp; pred(b, c)&lt;/code&gt; then &lt;code&gt;pred(a, c)&lt;/code&gt;) and irreflexive (&lt;code&gt;pred(a, a)&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;). The trichotomy property of inequality is not required: these algoritms consider elements &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; equal (for the purpose of counting) if &lt;code&gt;pred&lt;/code&gt; puts them in the same equivalence class, i.e. &lt;code&gt;!pred(a, b) &amp;amp;&amp;amp; !pred(b, a)&lt;/code&gt;.</source>
          <target state="translated">これらの関数は、 &lt;code&gt;pred&lt;/code&gt; を適切に選択することにより、任意の極値を計算するために使用できます。 corrrect機能するために、 &lt;code&gt;pred&lt;/code&gt; を厳密半順序、すなわち推移（場合でなければならない &lt;code&gt;pred(a, b) &amp;amp;&amp;amp; pred(b, c)&lt;/code&gt; その後 &lt;code&gt;pred(a, c)&lt;/code&gt; （）と非反射 &lt;code&gt;pred(a, a)&lt;/code&gt; である &lt;code&gt;false&lt;/code&gt; ）。不平等のtrichotomyプロパティは必要ありません。これらのalgoritmsは考慮要素と &lt;code&gt;b&lt;/code&gt; は（カウントの目的のために）等しい場合 &lt;code&gt;pred&lt;/code&gt; 同じ等価クラスを入れ、それらを、すなわち &lt;code&gt;!pred(a, b) &amp;amp;&amp;amp; !pred(b, a)&lt;/code&gt; 。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4885c55c8f009fc55e3ded5c636baed4e8b1027a" translate="yes" xml:space="preserve">
          <source>These functions must be defined for any D program linked against this library.</source>
          <target state="translated">これらの関数は、このライブラリにリンクされているすべてのDプログラムに対して定義されなければなりません。</target>
        </trans-unit>
        <trans-unit id="863522dc2f55e2bd3557bec461908ee54bfe9148" translate="yes" xml:space="preserve">
          <source>These functions substitute for dynamic_cast. dynamic_cast does not work on earlier versions of gcc.</source>
          <target state="translated">これらの関数は dynamic_cast の代わりになります。 dynamic_cast は以前のバージョンの gcc では動作しません。</target>
        </trans-unit>
        <trans-unit id="a6f52bdfe03bd9c3b6aa669ea2216cab6aa5652c" translate="yes" xml:space="preserve">
          <source>These functions will, when possible, do the load/store as a single operation. In general, this is possible when the size of the operation is less than or equal to &lt;code&gt;(void*).sizeof&lt;/code&gt;, although some targets may support larger operations. If the load/store cannot be done as a single operation, multiple smaller operations will be used.</source>
          <target state="translated">これらの関数は、可能な場合、ロード/ストアを単一の操作として実行します。一般に、これは、操作のサイズが &lt;code&gt;(void*).sizeof&lt;/code&gt; 以下の場合に可能ですが、一部のターゲットはより大きな操作をサポートしている場合があります。ロード/ストアを単一の操作として実行できない場合、複数の小さな操作が使用されます。</target>
        </trans-unit>
        <trans-unit id="aa2712a3447962365aa53a08ef19b228a050bafc" translate="yes" xml:space="preserve">
          <source>These interfaces are intended to provide virtual function-based wrappers around input ranges with element type E. This is useful where a well-defined binary interface is required, such as when a DLL function or virtual function needs to accept a generic range as a parameter. Note that &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;isInputRange&lt;/a&gt; and friends check for conformance to structural interfaces not for implementation of these &lt;code&gt;interface&lt;/code&gt; types.</source>
          <target state="translated">これらのインターフェイスは、要素タイプEの入力範囲の周りに仮想関数ベースのラッパーを提供することを目的としています。これは、DLL関数または仮想関数がジェネリック範囲をパラメーターとして受け入れる必要がある場合など、明確に定義されたバイナリインターフェイスが必要な場合に役立ちます。 。&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;isInputRange&lt;/a&gt;とその仲間は、これらの &lt;code&gt;interface&lt;/code&gt; タイプの実装ではなく、構造インターフェースへの適合性をチェックすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e7b0ea076cc1a10005c1bfd351e1967a3ff3876c" translate="yes" xml:space="preserve">
          <source>These interfaces are not capable of forwarding &lt;code&gt;ref&lt;/code&gt; access to elements.</source>
          <target state="translated">これらのインターフェイスは、要素への &lt;code&gt;ref&lt;/code&gt; アクセスを転送できません。</target>
        </trans-unit>
        <trans-unit id="8fa26313291d5018e0a3e59f0f8f336286abcb0a" translate="yes" xml:space="preserve">
          <source>These issues also apply to appending arrays with the ~= operator. Concatenation using the ~ operator is not affected since it always reallocates.</source>
          <target state="translated">これらの問題は ~=演算子を使用して配列を追加する場合にも適用されます。演算子を使用した連結は常に再確保されるため、影響を受けません。</target>
        </trans-unit>
        <trans-unit id="b9ff0eb99086639c464f06ffda166431e591559b" translate="yes" xml:space="preserve">
          <source>These members are populated when one of the following functions are called successfully:</source>
          <target state="translated">これらのメンバは、以下の関数のいずれかが正常に呼び出されたときに入力されます。</target>
        </trans-unit>
        <trans-unit id="e69f6a6ea64238818e57857e50d3b4e6fac28582" translate="yes" xml:space="preserve">
          <source>These methods return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これらのメソッドは &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f2f532d1b48edcd9143f50919e4b67ad8068e5c5" translate="yes" xml:space="preserve">
          <source>These policies may be used alone, e.g. &lt;code&gt;Checked!(uint, WithNaN)&lt;/code&gt; defines a &lt;code&gt;uint&lt;/code&gt;-like type that reaches a stable NaN state for all erroneous operations. They may also be &quot;stacked&quot; on top of each other, owing to the property that a checked integral emulates an actual integral, which means another checked integral can be built on top of it. Some combinations of interest include:</source>
          <target state="translated">これらのポリシーは単独で使用できます。たとえば、 &lt;code&gt;Checked!(uint, WithNaN)&lt;/code&gt; は、すべての誤った操作に対して安定したNaN状態に達する &lt;code&gt;uint&lt;/code&gt; のようなタイプを定義します。また、チェックされた積分が実際の積分をエミュレートするという特性により、それらは互いの上に「スタック」される場合があります。つまり、別のチェックされた積分をその上に構築できます。関心のあるいくつかの組み合わせは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7368ecff3f3d439be72be4fcfde0947c1e9f8e58" translate="yes" xml:space="preserve">
          <source>These prefix instructions do not appear in the same statement as the instructions they prefix; they appear in their own statement. For example:</source>
          <target state="translated">これらのプレフィックス命令は、プレフィックスを付ける命令と同じ文の中には現れません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9636b646d702390220bc4fa38bc7bba209069d1d" translate="yes" xml:space="preserve">
          <source>These properties can be used to set and get this &lt;code&gt;Logger&lt;/code&gt;. Every modification to this &lt;code&gt;Logger&lt;/code&gt; will only be visible in the thread the modification has been done from.</source>
          <target state="translated">これらのプロパティを使用して、この &lt;code&gt;Logger&lt;/code&gt; を設定および取得できます。この &lt;code&gt;Logger&lt;/code&gt; へのすべての変更は、変更が行われたスレッドでのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="d0c185c1fb708b1056aa4da779b1949039005b7f" translate="yes" xml:space="preserve">
          <source>These properties control whether the worker threads are daemon threads. A daemon thread is automatically terminated when all non-daemon threads have terminated. A non-daemon thread will prevent a program from terminating as long as it has not terminated.</source>
          <target state="translated">これらのプロパティは、ワーカースレッドがデーモンスレッドであるかどうかを制御します。デーモンスレッドは、すべての非デーモンスレッドが終了したときに自動的に終了します。非デーモンスレッドは、プログラムが終了していない限り、プログラムの終了を防ぎます。</target>
        </trans-unit>
        <trans-unit id="15376758dabe755dcb87d082399d9c18e9269e9e" translate="yes" xml:space="preserve">
          <source>These properties get and set the number of worker threads in the &lt;code&gt;TaskPool&lt;/code&gt; instance returned by &lt;code&gt;taskPool&lt;/code&gt;. The default value is &lt;code&gt;totalCPUs&lt;/code&gt; - 1. Calling the setter after the first call to &lt;code&gt;taskPool&lt;/code&gt; does not changes number of worker threads in the instance returned by &lt;code&gt;taskPool&lt;/code&gt;.</source>
          <target state="translated">これらのプロパティは、 &lt;code&gt;TaskPool&lt;/code&gt; によって返される &lt;code&gt;taskPool&lt;/code&gt; インスタンスのワーカースレッドの数を取得および設定します。デフォルト値は &lt;code&gt;totalCPUs&lt;/code&gt; の最初の呼び出しの後に1がセッターを呼び出す- &lt;code&gt;taskPool&lt;/code&gt; によって返されたインスタンス内のワーカースレッドの数を変更しません &lt;code&gt;taskPool&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="980ecd42d3382da4165c5745d3e514950a686c39" translate="yes" xml:space="preserve">
          <source>These pseudo ops are for inserting raw data directly into the code. &lt;code&gt;db&lt;/code&gt; is for bytes, &lt;code&gt;ds&lt;/code&gt; is for 16 bit words, &lt;code&gt;di&lt;/code&gt; is for 32 bit words, &lt;code&gt;dl&lt;/code&gt; is for 64 bit words, &lt;code&gt;df&lt;/code&gt; is for 32 bit floats, &lt;code&gt;dd&lt;/code&gt; is for 64 bit doubles, and &lt;code&gt;de&lt;/code&gt; is for 80 bit extended reals. Each can have multiple operands. If an operand is a string literal, it is as if there were</source>
          <target state="translated">これらの疑似演算は、生データをコードに直接挿入するためのものです。 &lt;code&gt;db&lt;/code&gt; バイトのためのものである &lt;code&gt;ds&lt;/code&gt; 、16ビット・ワードのためのものである &lt;code&gt;di&lt;/code&gt; 、32ビット・ワードのためのものである &lt;code&gt;dl&lt;/code&gt; 64ビット・ワードのためのものである、 &lt;code&gt;df&lt;/code&gt; 、32ビット浮動小数点数のためのものである &lt;code&gt;dd&lt;/code&gt; は 64ビットの倍精度のためであり、 &lt;code&gt;de&lt;/code&gt; 80ビット実数を拡張するためのものです。それぞれが複数のオペランドを持つことができます。オペランドが文字列リテラルの場合は、</target>
        </trans-unit>
        <trans-unit id="dc738e7762e036039780916cbdd5404d3269d8a0" translate="yes" xml:space="preserve">
          <source>These reordering guarantees are only made with regards to other operations done through these functions; the compiler is free to reorder regular loads/stores with regards to loads/stores done through these functions.</source>
          <target state="translated">これらの再順序付けは、これらの関数で実行される他の操作に対してのみ保証されます。コンパイラは、これらの関数で実行されるロード/ストアに対して、通常のロード/ストアを自由に再順序付けすることができます。</target>
        </trans-unit>
        <trans-unit id="59c337390b522d2f745f8ff19e4af335466b8d80" translate="yes" xml:space="preserve">
          <source>These rules exist to ensure that D source code can be tokenized independently of syntactic or semantic analysis.</source>
          <target state="translated">これらのルールは、Dのソースコードが構文解析や意味解析とは無関係にトークン化されることを保証するために存在します。</target>
        </trans-unit>
        <trans-unit id="0c76e41e867d53b374fa782852a104df9aca82b4" translate="yes" xml:space="preserve">
          <source>These tokens are replaced with other tokens according to the following table:</source>
          <target state="translated">これらのトークンは、以下の表に従って他のトークンに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="d0bdde0a231ee1346d31198eca44ed30c45d180a" translate="yes" xml:space="preserve">
          <source>These two functions are publicly imported by &lt;a href=&quot;std_string&quot;&gt;&lt;code&gt;std.string&lt;/code&gt;&lt;/a&gt; to be easily available.</source>
          <target state="translated">これら2つの関数は、簡単に利用できるように&lt;a href=&quot;std_string&quot;&gt; &lt;code&gt;std.string&lt;/code&gt; &lt;/a&gt;によってパブリックにインポートされます。</target>
        </trans-unit>
        <trans-unit id="d116b35a1d1eb38f8d6deaebff517f7281edce29" translate="yes" xml:space="preserve">
          <source>These two methods set and get the &lt;code&gt;LogLevel&lt;/code&gt; of the used &lt;code&gt;Logger&lt;/code&gt;.</source>
          <target state="translated">これらの2つのメソッドは、使用される &lt;code&gt;Logger&lt;/code&gt; の &lt;code&gt;LogLevel&lt;/code&gt; を設定および取得します。</target>
        </trans-unit>
        <trans-unit id="c31bee48bf9882a765ab31f12d60d8852693f17b" translate="yes" xml:space="preserve">
          <source>These two were added to Bionic in Lollipop.</source>
          <target state="translated">この2つがロリポップのBionicに追加されました。</target>
        </trans-unit>
        <trans-unit id="51b1a7127ec2cda2b11c1f4d950a66756e0a424a" translate="yes" xml:space="preserve">
          <source>These types and operations will be the ones defined for the architecture the compiler is targeting. If a particular CPU family has varying support for vector types, an additional runtime check may be necessary. The compiler does not emit runtime checks; those must be done by the programmer.</source>
          <target state="translated">これらの型と操作は、コンパイラがターゲットとするアーキテクチャ用に定義されているものになります。特定の CPU ファミリでベクター型のサポートが異なる場合、追加のランタイムチェックが必要になることがあります。コンパイラはランタイム・チェックを行いません。</target>
        </trans-unit>
        <trans-unit id="23aa9ed08051d1b26b975da56b7c482018edf989" translate="yes" xml:space="preserve">
          <source>These use the &lt;code&gt;zd&lt;/code&gt; and &lt;code&gt;dt&lt;/code&gt; format specifiers respectively:</source>
          <target state="translated">これらはそれぞれ &lt;code&gt;zd&lt;/code&gt; および &lt;code&gt;dt&lt;/code&gt; 形式指定子を使用します。</target>
        </trans-unit>
        <trans-unit id="6f060e83954cb7bb657a24fc206a36f49a7d93ba" translate="yes" xml:space="preserve">
          <source>These variadic functions have a special local variable declared for them, &lt;code&gt;_argptr&lt;/code&gt;, which is a &lt;code&gt;core.vararg&lt;/code&gt; reference to the first of the variadic arguments. To access the arguments, &lt;code&gt;_argptr&lt;/code&gt; must be used in conjuction with &lt;code&gt;va_arg&lt;/code&gt;:</source>
          <target state="translated">これらの可変個の関数には、特殊なローカル変数 &lt;code&gt;_argptr&lt;/code&gt; が宣言されています。これは、最初の可変個の引数への &lt;code&gt;core.vararg&lt;/code&gt; 参照です。引数にアクセスするには、 &lt;code&gt;_argptr&lt;/code&gt; を &lt;code&gt;va_arg&lt;/code&gt; と組み合わせて使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d8252040edcfa70507497891f3e37c3388deec3b" translate="yes" xml:space="preserve">
          <source>These variadic functions have a special local variable declared for them, &lt;code&gt;_argptr&lt;/code&gt;, which is a &lt;code&gt;core.vararg&lt;/code&gt; reference to the first of the variadic arguments. To access the arguments, &lt;code&gt;_argptr&lt;/code&gt; must be used in conjunction with &lt;code&gt;va_arg&lt;/code&gt;:</source>
          <target state="translated">これらの可変個引数関数には、それらに対して宣言された特別なローカル変数 &lt;code&gt;_argptr&lt;/code&gt; があります。これは、最初の可変個引数への &lt;code&gt;core.vararg&lt;/code&gt; 参照です。引数にアクセスするには、 &lt;code&gt;_argptr&lt;/code&gt; を &lt;code&gt;va_arg&lt;/code&gt; と組み合わせて使用​​する必要があります。</target>
        </trans-unit>
        <trans-unit id="234027e68858253217a4940ca8276de49e1921e6" translate="yes" xml:space="preserve">
          <source>They cannot be accessed directly, but can be when converted to an array type:</source>
          <target state="translated">直接アクセスすることはできませんが、配列型に変換することでアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="221e10b06207df21853c30ac081dc011d76ee4a6" translate="yes" xml:space="preserve">
          <source>Things that are reliable and can be done:</source>
          <target state="translated">頼りになるもの、できるもの。</target>
        </trans-unit>
        <trans-unit id="3c0e4517dcdbca852a34fee2578fdfec0c6193f9" translate="yes" xml:space="preserve">
          <source>This 6-digit (24 bits) hexadecimal number does not show pre-release number, and it is always a greater number in a more recent release. It makes comparisons with greater than and less than work.</source>
          <target state="translated">この6桁(24ビット)の16進数は、リリース前の番号を表示しておらず、より最近のリリースでは常により大きな番号となります。これは、greater than と less than work との比較を行います。</target>
        </trans-unit>
        <trans-unit id="229cd848f340b1059ab841306649066eb2235f02" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_Functions/index.html#//apple_ref/c/func/NSLog&quot;&gt;&lt;code&gt;NSLog&lt;/code&gt;&lt;/a&gt; function prints a message to the System Log facility, i.e. to stderr and Console.</source>
          <target state="translated">この&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_Functions/index.html#//apple_ref/c/func/NSLog&quot;&gt; &lt;code&gt;NSLog&lt;/code&gt; &lt;/a&gt;関数は、システムログ機能、つまりstderrおよびConsoleにメッセージを出力します。</target>
        </trans-unit>
        <trans-unit id="d3784623518bf5135672133e5b2128ce4da1e03a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;Logger&lt;/code&gt; implementation writes log messages to the associated file. The name of the file has to be passed on construction time. If the file is already present new log messages will be append at its end.</source>
          <target state="translated">この &lt;code&gt;Logger&lt;/code&gt; 実装は、ログメッセージを関連ファイルに書き込みます。ファイルの名前は構築時に渡す必要があります。ファイルが既に存在する場合、新しいログメッセージが最後に追加されます。</target>
        </trans-unit>
        <trans-unit id="713e6c7267281da115b32a479fb632b10a4676bf" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;Logger&lt;/code&gt; is called by the free standing log functions. This allows to create thread local redirections and still use the free standing log functions.</source>
          <target state="translated">この &lt;code&gt;Logger&lt;/code&gt; は、独立したログ機能によって呼び出されます。これにより、スレッドローカルリダイレクトを作成し、それでも独立ログ機能を使用できます。</target>
        </trans-unit>
        <trans-unit id="e1905487aa2f3222c1f92ca85d42ee6ef82cec0b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;delegate&lt;/code&gt; is called in case a log message with &lt;code&gt;LogLevel.fatal&lt;/code&gt; gets logged.</source>
          <target state="translated">この &lt;code&gt;delegate&lt;/code&gt; は、 &lt;code&gt;LogLevel.fatal&lt;/code&gt; を含むログメッセージが記録される場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="742a25561151a973ba133d1f0c2d43dea4909a81" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is used as a template argument to functions which compare file names, and determines whether the comparison is case sensitive or not.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、ファイル名を比較する関数のテンプレート引数として使用され、比較で大文字と小文字を区別するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="5b6a1b7ec8e15b4671a0723320a6b157081a9b40" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is used to select the primitives of the range to handle by the &lt;a href=&quot;#handle&quot;&gt;&lt;code&gt;handle&lt;/code&gt;&lt;/a&gt; range wrapper. The values of the &lt;code&gt;enum&lt;/code&gt; can be &lt;code&gt;OR&lt;/code&gt;'d to select multiple primitives to be handled.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、&lt;a href=&quot;#handle&quot;&gt; &lt;code&gt;handle&lt;/code&gt; &lt;/a&gt;範囲ラッパーで処理する範囲のプリミティブを選択するために使用されます。値が &lt;code&gt;enum&lt;/code&gt; することができ &lt;code&gt;OR&lt;/code&gt; 処理されるように、複数のプリミティブを選択するには「D。</target>
        </trans-unit>
        <trans-unit id="60302f8f7437eabfe1118a9f0d4373fe741b982e" translate="yes" xml:space="preserve">
          <source>This &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string op, U)(U rhs)</source>
          <target state="translated">この&lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;（string op、U）（U rhs）</target>
        </trans-unit>
        <trans-unit id="0844f4e216523548601b41cd5d7151c085ad2d4f" translate="yes" xml:space="preserve">
          <source>This Element is stored inside the &lt;code&gt;MultiLogger&lt;/code&gt; and associates a &lt;code&gt;Logger&lt;/code&gt; to a &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">この要素は &lt;code&gt;MultiLogger&lt;/code&gt; 内に格納され、 &lt;code&gt;Logger&lt;/code&gt; を &lt;code&gt;string&lt;/code&gt; 関連付けます。</target>
        </trans-unit>
        <trans-unit id="3f3ba7f1176ff2dafbb0e0f64e80accd29320699" translate="yes" xml:space="preserve">
          <source>This Exception is thrown if something goes wrong when encoding or decoding a URI.</source>
          <target state="translated">この例外は、URIのエンコードやデコードの際に何か問題が発生した場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="808758fad2f8e432c6429e19e97ca8ce38bd7755" translate="yes" xml:space="preserve">
          <source>This UDA is not transitive, and inner scope do not inherit outer scopes' ABI tag. See examples below for how to translate a C++ declaration to D. Also note that entries in this UDA will be automatically sorted alphabetically, hence &lt;code&gt;gnuAbiTag(&quot;c&quot;, &quot;b&quot;, &quot;a&quot;)&lt;/code&gt; will appear as &lt;code&gt;@gnuAbiTag(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)&lt;/code&gt;.</source>
          <target state="translated">このUDAは推移的ではなく、内部スコープは外部スコープのABIタグを継承しません。C ++宣言をDに変換する方法については、以下の例を参照してください。また、このUDAのエントリは自動的にアルファベット順にソートされるため、 &lt;code&gt;gnuAbiTag(&quot;c&quot;, &quot;b&quot;, &quot;a&quot;)&lt;/code&gt; は &lt;code&gt;@gnuAbiTag(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)&lt;/code&gt; ）として表示されます。 、 &quot;b&quot;、 &quot;c&quot;）。</target>
        </trans-unit>
        <trans-unit id="7f52bee84df158d351adbe607d7ed92c29a830ca" translate="yes" xml:space="preserve">
          <source>This access can span multiple nesting levels:</source>
          <target state="translated">このアクセスは複数のネスティングレベルにまたがることができます。</target>
        </trans-unit>
        <trans-unit id="6b73948545ca0a17466100c56872304c05fd8262" translate="yes" xml:space="preserve">
          <source>This advice applies only to static references or references embedded inside other objects. There is not much point for such stored on the stack to be nulled because new stack frames are initialized anyway.</source>
          <target state="translated">このアドバイスは、静的参照や他のオブジェクトの内部に埋め込まれた参照にのみ適用されます。スタックに格納されているこのような参照をヌルにすることはあまり意味がありません。</target>
        </trans-unit>
        <trans-unit id="b180cae02977110add927a1c4e0c64f40292d64f" translate="yes" xml:space="preserve">
          <source>This algorithm is lazy, doing work progressively as elements are pulled off the result.  Time complexity is proportional to the sum of element counts over all inputs.  If all inputs have the same element type and offer it by &lt;code&gt;ref&lt;/code&gt;, output becomes a range with mutable &lt;code&gt;front&lt;/code&gt; (and &lt;code&gt;back&lt;/code&gt; where appropriate) that reflects in the original inputs.  If any of the inputs &lt;code&gt;rs&lt;/code&gt; is infinite so is the result (&lt;code&gt;empty&lt;/code&gt; being always &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">このアルゴリズムはレイジーであり、要素が結果から引き出されるにつれて徐々に作業を行います。時間の複雑さは、すべての入力の要素数の合計に比例します。すべての入力が同じ要素タイプを持ち、それを &lt;code&gt;ref&lt;/code&gt; によって提供する場合、出力は、元の入力に反映される変更可能な &lt;code&gt;front&lt;/code&gt; （および必要に応じて &lt;code&gt;back&lt;/code&gt; ）を持つ範囲になります。入力 &lt;code&gt;rs&lt;/code&gt; のいずれかが無限の場合、結果も &lt;code&gt;empty&lt;/code&gt; になります（emptyは常に &lt;code&gt;false&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="17ac7dad87e44aee326cfad5b437dc8fb209353e" translate="yes" xml:space="preserve">
          <source>This allocator sits on top of &lt;code&gt;ParentAllocator&lt;/code&gt; and quantizes allocation sizes, usually from arbitrary positive numbers to a small set of round numbers (e.g. powers of two, page sizes etc). This technique is commonly used to:</source>
          <target state="translated">このアロケータは &lt;code&gt;ParentAllocator&lt;/code&gt; の上に配置され、通常は任意の正の数から小さな丸め数のセット（2の累乗、ページサイズなど）まで、割り当てサイズを量子化します。この手法は一般的に次の目的で使用されます。</target>
        </trans-unit>
        <trans-unit id="c92308ef13d80d3dc1f8f963c2ddd3981e8c6bde" translate="yes" xml:space="preserve">
          <source>This allows you to construct a &lt;code&gt;TickDuration&lt;/code&gt; from the given time units with the given length.</source>
          <target state="translated">これにより、指定された時間単位と指定された長さから &lt;code&gt;TickDuration&lt;/code&gt; を構築できます。</target>
        </trans-unit>
        <trans-unit id="75add17a5265c1c86eea3c10773eb85a2a082611" translate="yes" xml:space="preserve">
          <source>This also checks if T passes &lt;a href=&quot;#isDigest&quot;&gt;&lt;code&gt;isDigest&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">これは、Tが&lt;a href=&quot;#isDigest&quot;&gt; &lt;code&gt;isDigest&lt;/code&gt; &lt;/a&gt;を通過するかどうかもチェックします</target>
        </trans-unit>
        <trans-unit id="21d1b39871e7f1893df45ac1736d0defe8bdb68b" translate="yes" xml:space="preserve">
          <source>This approach to sorting is akin to the &lt;a href=&quot;http://wikipedia.org/wiki/Schwartzian_transform&quot;&gt;Schwartzian transform&lt;/a&gt;, also known as the decorate-sort-undecorate pattern in Python and Lisp. The complexity is the same as that of the corresponding &lt;code&gt;sort&lt;/code&gt;, but &lt;code&gt;schwartzSort&lt;/code&gt; evaluates &lt;code&gt;transform&lt;/code&gt; only &lt;code&gt;r.length&lt;/code&gt; times (less than half when compared to regular sorting). The usage can be best illustrated with an example.</source>
          <target state="translated">このソート方法は、&lt;a href=&quot;http://wikipedia.org/wiki/Schwartzian_transform&quot;&gt;シュワルツ変換&lt;/a&gt;（PythonおよびLispでは装飾/ソート/非パターン）とも呼ばれる変換に似ています。複雑さは、対応するのと同じであり &lt;code&gt;sort&lt;/code&gt; が、 &lt;code&gt;schwartzSort&lt;/code&gt; の評価するには、 &lt;code&gt;transform&lt;/code&gt; のみ &lt;code&gt;r.length&lt;/code&gt; 倍（通常のソートと比較すると半分以下に）。使用法は例で最もよく説明することができます。</target>
        </trans-unit>
        <trans-unit id="5d88f963aa92f920cdc8aeb7a00bc154db20bbb5" translate="yes" xml:space="preserve">
          <source>This array can be used by a precise GC to avoid false pointers.</source>
          <target state="translated">この配列は、偽ポインタを避けるために精密なGCで使用することができます。</target>
        </trans-unit>
        <trans-unit id="c35154b2193fa21859ceac41f1d4b9a67330be66" translate="yes" xml:space="preserve">
          <source>This attack can also be mitigated via rate limiting and banning IPs which have too many rejected requests. However, this does not completely solve the problem, as the attacker could be in control of a bot net. To fully defend against the timing attack, rate limiting, banning IPs, and using this function should be used together.</source>
          <target state="translated">この攻撃は、レートを制限したり、拒否されたリクエストが多すぎるIPを禁止したりすることでも緩和できます。しかし、これでは攻撃者がボットネットを支配している可能性があるため、完全には解決しません。タイミング攻撃を完全に防御するためには、レート制限、IPの禁止、この機能の利用を併用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a9127e0dd3d0b5214532b99c1123e71d947a773" translate="yes" xml:space="preserve">
          <source>This binary operator returns a narrower, built-in integer type where applicable, according to the following table.</source>
          <target state="translated">このバイナリ演算子は、以下の表に従って、適用可能な場合には、より狭い組み込みの整数型を返します。</target>
        </trans-unit>
        <trans-unit id="37d90ec49bcad1514fffff07ef5725f0a4ce3b52" translate="yes" xml:space="preserve">
          <source>This block contains the info to allow appending.</source>
          <target state="translated">このブロックには、追加を許可するための情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="bf616d2c8bb18a1f79e9b94bb01fac01a9f85e97" translate="yes" xml:space="preserve">
          <source>This block is guaranteed to have a pointer to its base while it is alive. Interior pointers can be safely ignored. This attribute is useful for eliminating false pointers in very large data structures and is only implemented for data structures at least a page in size.</source>
          <target state="translated">このブロックは生きている間、その基底へのポインタを持つことが保証されています。内部ポインタは安全に無視することができます。この属性は、非常に大きなデータ構造における偽ポインタを排除するのに有用であり、少なくとも1ページ以上のサイズのデータ構造に対してのみ実装されます。</target>
        </trans-unit>
        <trans-unit id="bf3bcec7830ceded3b9368b09e74254cb38823f2" translate="yes" xml:space="preserve">
          <source>This breaks a type down into 'simpler' types that can be passed to a function in registers, and returned in registers. It's highly platform dependent.</source>
          <target state="translated">これは、レジスタ内の関数に渡してレジスタ内で返すことができる型を「より単純な」型に分解します。これはプラットフォームに大きく依存します。</target>
        </trans-unit>
        <trans-unit id="c8f37b58b4d0486e147bae447382fe4c40e89ace" translate="yes" xml:space="preserve">
          <source>This breaks a type down into 'simpler' types that can be passed to a function in registers, and returned in registers. This is the implementation for the x86_64 System V ABI (not used for Win64), based on &lt;a href=&quot;https://www.uclibc.org/docs/psABI-x86_64.pdf.&quot;&gt;https://www.uclibc.org/docs/psABI-x86_64.pdf.&lt;/a&gt;</source>
          <target state="translated">これは、型を「レジスター内の関数に渡して、レジスターに戻すことができる」より単純な型に分解します。これは、&lt;a href=&quot;https://www.uclibc.org/docs/psABI-x86_64.pdf.&quot;&gt;https：&lt;/a&gt; //www.uclibc.org/docs/psABI-x86_64.pdfに基づくx86_64 System V ABI（Win64では使用されません）の実装です。</target>
        </trans-unit>
        <trans-unit id="0bd70fd848ca13dea85fa0c9ed45a1bd7458ccab" translate="yes" xml:space="preserve">
          <source>This can be a useful function to place in a chain, after functions that have expensive evaluation, as a lazy alternative to &lt;a href=&quot;std_array#array&quot;&gt;&lt;code&gt;std.array.array&lt;/code&gt;&lt;/a&gt;. In particular, it can be placed after a call to &lt;a href=&quot;#map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;, or before a call &lt;a href=&quot;std_range#filter&quot;&gt;&lt;code&gt;std.range.filter&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;std_range#tee&quot;&gt;&lt;code&gt;std.range.tee&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">これは、&lt;a href=&quot;std_array#array&quot;&gt; &lt;code&gt;std.array.array&lt;/code&gt; の&lt;/a&gt;遅延代替として、評価の高い関数の後にチェーンに配置するのに便利な関数です。特に、&lt;a href=&quot;#map&quot;&gt; &lt;code&gt;map&lt;/code&gt; の&lt;/a&gt;呼び出しの後、または&lt;a href=&quot;std_range#filter&quot;&gt; &lt;code&gt;std.range.filter&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;std_range#tee&quot;&gt; &lt;code&gt;std.range.tee&lt;/code&gt; の&lt;/a&gt;呼び出しの前に配置できます。</target>
        </trans-unit>
        <trans-unit id="6b2e989aa67544fd1198815cd532b63a0f766b8f" translate="yes" xml:space="preserve">
          <source>This can be faster than &lt;code&gt;line = File.readln()&lt;/code&gt; because you can reuse the buffer for each call. Note that reusing the buffer means that you must copy the previous contents if you wish to retain them.</source>
          <target state="translated">呼び出しごとにバッファを再利用できるため、これは &lt;code&gt;line = File.readln()&lt;/code&gt; よりも高速です。バッファを再利用するということは、以前の内容を保持したい場合は、それらをコピーする必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="9135461de3ded4b1c69a8c8663d6dc1b7b1298f3" translate="yes" xml:space="preserve">
          <source>This can be faster than &lt;code&gt;line = readln()&lt;/code&gt; because you can reuse the buffer for each call. Note that reusing the buffer means that you must copy the previous contents if you wish to retain them.</source>
          <target state="translated">呼び出しごとにバッファを再利用できるため、これは &lt;code&gt;line = readln()&lt;/code&gt; よりも高速です。バッファを再利用するということは、以前の内容を保持したい場合は、それらをコピーする必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="0948e8d31ea2c28fe26752cedea06ec0ba1ce2b0" translate="yes" xml:space="preserve">
          <source>This can be generalized to a graph of memory objects interconnected by pointers, where only a single pointer connects to that graph from elsewhere. That single pointer becomes the</source>
          <target state="translated">これは、ポインタによって相互接続されたメモリオブジェクトのグラフに一般化することができます。その単一のポインタは</target>
        </trans-unit>
        <trans-unit id="cffa42c18f8e5280df0dc347c1adc3088bd2e98b" translate="yes" xml:space="preserve">
          <source>This can be mitigated by using type-specific pools:</source>
          <target state="translated">これは、タイプ別プールを使用することで緩和することができます。</target>
        </trans-unit>
        <trans-unit id="a112b2327f090d0fc1bf3af12645c6807ea32f38" translate="yes" xml:space="preserve">
          <source>This can be used to manually allocate arrays. Initial slice size is 0.</source>
          <target state="translated">これを使用して手動で配列を割り当てることができます。初期スライスサイズは0です。</target>
        </trans-unit>
        <trans-unit id="77b164cf465602d02b3ffc40b53faf3928b97c45" translate="yes" xml:space="preserve">
          <source>This can be used to restore the state set by &lt;code&gt;_init&lt;/code&gt; to its original state.</source>
          <target state="translated">これは、 &lt;code&gt;_init&lt;/code&gt; によって設定された状態を元の状態に復元するために使用できます。</target>
        </trans-unit>
        <trans-unit id="fd9b6c28efb844ef78e5e1874ec7103f9aedb900" translate="yes" xml:space="preserve">
          <source>This can be used to restore the state set by &lt;code&gt;builtin_init&lt;/code&gt; to its original state.</source>
          <target state="translated">これを使用して、 &lt;code&gt;builtin_init&lt;/code&gt; によって設定された状態を元の状態に復元できます。</target>
        </trans-unit>
        <trans-unit id="bf855a97cfb23a3029962fde96c07063d751f784" translate="yes" xml:space="preserve">
          <source>This can be used to restore the state set by &lt;code&gt;initDMD&lt;/code&gt; to its original state. Useful if there's a need for multiple sessions of the DMD compiler in the same application.</source>
          <target state="translated">これを使用して、 &lt;code&gt;initDMD&lt;/code&gt; によって設定された状態を元の状態に復元できます。同じアプリケーションでDMDコンパイラーの複数のセッションが必要な場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8b9d5f27029fa9824ee5b1d78b90c2ec7ef5fd1e" translate="yes" xml:space="preserve">
          <source>This can be used to restore the state set by &lt;code&gt;initialize&lt;/code&gt; to its original state.</source>
          <target state="translated">これを使用して、 &lt;code&gt;initialize&lt;/code&gt; によって設定された状態を元の状態に復元できます。</target>
        </trans-unit>
        <trans-unit id="ab6e2c03932762345b65936a6392947f9f7fc40e" translate="yes" xml:space="preserve">
          <source>This causes the array to be reallocated in place, and the existing contents copied over to the new array. If the new array length is shorter, the array is not reallocated, and no data is copied. It is equivalent to slicing the array:</source>
          <target state="translated">これにより、配列はその場で再割り当てされ、既存の内容は新しい配列にコピーされます。新しい配列の長さがより短い場合、配列は再割り当てされず、データはコピーされません。これは、配列をスライスするのと同じことです。</target>
        </trans-unit>
        <trans-unit id="2dc8c51a26f6ef694173726a55aa90d7d6530cc8" translate="yes" xml:space="preserve">
          <source>This class can be considered a mutex in its own right, and is used to negotiate a read lock for the enclosing mutex.</source>
          <target state="translated">このクラスはそれ自体がミューテックスとみなすことができ、それを囲むミューテックスのリードロックをネゴシエートするために使用されます。</target>
        </trans-unit>
        <trans-unit id="c087ce5411ffc17188818ec319892aeaf2de87df" translate="yes" xml:space="preserve">
          <source>This class can be considered a mutex in its own right, and is used to negotiate a write lock for the enclosing mutex.</source>
          <target state="translated">このクラスはそれ自体がミューテックスとみなすことができ、それを囲むミューテックスの書き込みロックをネゴシエートするために使用されます。</target>
        </trans-unit>
        <trans-unit id="e6fa3f3a70f061e4c741e7043e9f128e38434b5c" translate="yes" xml:space="preserve">
          <source>This class contains only static methods, and cannot be instantiated. See below for examples of use.</source>
          <target state="translated">このクラスは静的メソッドのみを含み、インスタンス化することはできません。使用例は以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="e74dd67572321fcf836dd082da1156043102db48" translate="yes" xml:space="preserve">
          <source>This class encapsulates a task queue and a set of worker threads. Its purpose is to efficiently map a large number of &lt;code&gt;Task&lt;/code&gt;s onto a smaller number of threads. A task queue is a FIFO queue of &lt;code&gt;Task&lt;/code&gt; objects that have been submitted to the &lt;code&gt;TaskPool&lt;/code&gt; and are awaiting execution. A worker thread is a thread that executes the &lt;code&gt;Task&lt;/code&gt; at the front of the queue when one is available and sleeps when the queue is empty.</source>
          <target state="translated">このクラスは、タスクキューと一連のワーカースレッドをカプセル化します。その目的は、多数の &lt;code&gt;Task&lt;/code&gt; を少数のスレッドに効率的にマッピングすることです。タスクキューは、 &lt;code&gt;Task&lt;/code&gt; &lt;code&gt;TaskPool&lt;/code&gt; 送信され、実行を待機しているタスクオブジェクトのFIFOキューです。ワーカースレッドは、 &lt;code&gt;Task&lt;/code&gt; が利用可能な場合はキューの前にあるタスクを実行し、キューが空の場合はスリープ状態になるスレッドです。</target>
        </trans-unit>
        <trans-unit id="cb7ed7def5fa337d461b92cc10d68f83905440de" translate="yes" xml:space="preserve">
          <source>This class encapsulates all threading functionality for the D programming language. As thread manipulation is a required facility for garbage collection, all user threads should derive from this class, and instances of this class should never be explicitly deleted. A new thread may be created using either derivation or composition, as in the following example.</source>
          <target state="translated">このクラスは D プログラミング言語のすべてのスレッド機能をカプセル化します。スレッド操作はガベージコレクションに必要な機能であるため、すべてのユーザースレッドはこのクラスから派生し、このクラスのインスタンスは明示的に削除されるべきではありません。新しいスレッドは、次の例のように、派生または合成のいずれかを使用して作成することができます。</target>
        </trans-unit>
        <trans-unit id="060824159317cc2ae0b94150653daf83c3c520fb" translate="yes" xml:space="preserve">
          <source>This class is Windows-Only.</source>
          <target state="translated">このクラスはWindows専用です。</target>
        </trans-unit>
        <trans-unit id="74950bb501f7c21fc01a4eeb41b151e182fd4b25" translate="yes" xml:space="preserve">
          <source>This class is intended to simplify certain common programming techniques.</source>
          <target state="translated">このクラスは、ある種の一般的なプログラミング技術を単純化することを目的としています。</target>
        </trans-unit>
        <trans-unit id="23197b76b4ee940fb447d39ecd365edbbb4617e7" translate="yes" xml:space="preserve">
          <source>This class is the base of every logger. In order to create a new kind of logger a deriving class needs to implement the &lt;code&gt;writeLogMsg&lt;/code&gt; method. By default this is not thread-safe.</source>
          <target state="translated">このクラスはすべてのロガーのベースです。新しい種類のロガーを作成するには、派生クラスで &lt;code&gt;writeLogMsg&lt;/code&gt; メソッドを実装する必要があります。デフォルトでは、これはスレッドセーフではありません。</target>
        </trans-unit>
        <trans-unit id="5087e482a877ae3c12085be27794a8883c7a901f" translate="yes" xml:space="preserve">
          <source>This class provides a cooperative concurrency mechanism integrated with the threading and garbage collection functionality. Calling a fiber may be considered a blocking operation that returns when the fiber yields (via Fiber.yield()). Execution occurs within the context of the calling thread so synchronization is not necessary to guarantee memory visibility so long as the same thread calls the fiber each time. Please note that there is no requirement that a fiber be bound to one specific thread. Rather, fibers may be freely passed between threads so long as they are not currently executing. Like threads, a new fiber thread may be created using either derivation or composition, as in the following example.</source>
          <target state="translated">このクラスは、 スレッディングおよびガベージコレクション機能と統合された協調同時実行メカニズムを提供します。ファイバーを呼び出すことは、 ファイバーが生成されたときに (Fiber.yield()を介して)返されるブロッキング操作とみなすことができます。実行は、呼び出したスレッドのコンテキスト内で行われるため、同じスレッドが毎回ファイバーを呼び出す限り、メモリの可視性を保証するために同期化は必要ありません。ファイバを特定のスレッドにバインドする必要はないことに注意してください。むしろ、現在実行中でない限り、スレッド間で自由にファイバーを渡すことができます。スレッドと同様に、次の例のように、派生または合成を使用して新しいファイバー・スレッドを作成することができます。</target>
        </trans-unit>
        <trans-unit id="82a75ec7718c8b6f47e4366c93dbe98cf77e29de" translate="yes" xml:space="preserve">
          <source>This class represents a barrier across which threads may only travel in groups of a specific size.</source>
          <target state="translated">このクラスは、スレッドが特定のサイズのグループでのみ移動できるバリアを表します。</target>
        </trans-unit>
        <trans-unit id="766ad20f64361ee3b240dfaf608ee851aeb433ae" translate="yes" xml:space="preserve">
          <source>This class represents a condition variable as conceived by C.A.R. Hoare. As per Mesa type monitors however, &quot;signal&quot; has been replaced with &quot;notify&quot; to indicate that control is not transferred to the waiter when a notification is sent.</source>
          <target state="translated">このクラスは、C.A.R.Hoareによって考案された条件変数を表しています。ただし、Mesa型モニターと同様に、&quot;signal &quot;は &quot;notify &quot;に置き換えられており、通知が送られてもウェイターに制御が移されないことを示しています。</target>
        </trans-unit>
        <trans-unit id="4ebd970226df03dbe75e13571a9e96c6ff81d3f8" translate="yes" xml:space="preserve">
          <source>This class represents a general counting semaphore as concieved by Edsger Dijkstra. As per Mesa type monitors however, &quot;signal&quot; has been replaced with &quot;notify&quot; to indicate that control is not transferred to the waiter when a notification is sent.</source>
          <target state="translated">このクラスは、Edsger Dijkstraによって考案された一般的な計数セマフォを表しています。ただし、Mesa型モニターと同様に、&quot;signal &quot;は &quot;notify &quot;に置き換えられており、通知が送られてもウェイターに制御が移されないことを示している。</target>
        </trans-unit>
        <trans-unit id="c8cd845734952865e5a8f06563815740028af34a" translate="yes" xml:space="preserve">
          <source>This class represents a general purpose, recursive mutex.</source>
          <target state="translated">このクラスは、汎用的な再帰的ミューテックスを表します。</target>
        </trans-unit>
        <trans-unit id="59a28f2816234c02947ecfa7c34d28fcd7aff787" translate="yes" xml:space="preserve">
          <source>This class represents a mutex that allows any number of readers to enter, but when a writer enters, all other readers and writers are blocked.</source>
          <target state="translated">このクラスは、何人でもリーダが入ることができますが、ライターが入ると他のすべてのリーダとライターがブロックされるミューテックスを表します。</target>
        </trans-unit>
        <trans-unit id="869079d3acf8bad41ab545f5cd5b6ff38c3d966c" translate="yes" xml:space="preserve">
          <source>This class should usually be used via the global instantiation available via the &lt;a href=&quot;std_parallelism#taskPool&quot;&gt;&lt;code&gt;std.parallelism.taskPool&lt;/code&gt;&lt;/a&gt; property. Occasionally it is useful to explicitly instantiate a &lt;code&gt;TaskPool&lt;/code&gt;:</source>
          <target state="translated">このクラスは通常、&lt;a href=&quot;std_parallelism#taskPool&quot;&gt; &lt;code&gt;std.parallelism.taskPool&lt;/code&gt; &lt;/a&gt;プロパティを介して利用可能なグローバルインスタンス化を介して使用する必要があります。 &lt;code&gt;TaskPool&lt;/code&gt; を明示的にインスタンス化すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="67a778401b8293f4ab050d1d10ec2027dc2c3143" translate="yes" xml:space="preserve">
          <source>This class uses a high-performance counter. On Windows systems, it uses &lt;code&gt;QueryPerformanceCounter&lt;/code&gt;, and on Posix systems, it uses &lt;code&gt;clock_gettime&lt;/code&gt; if available, and &lt;code&gt;gettimeofday&lt;/code&gt; otherwise.</source>
          <target state="translated">このクラスは、高性能カウンターを使用します。Windowsシステムでは &lt;code&gt;QueryPerformanceCounter&lt;/code&gt; を使用し、Posixシステムでは、可能な場合は &lt;code&gt;clock_gettime&lt;/code&gt; を使用し、それ以外の場合は &lt;code&gt;gettimeofday&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="aaa98a68eef2ad7cd1dc56f0e12cad2e4ff0ed1d" translate="yes" xml:space="preserve">
          <source>This code handles backtrace generation using DWARF debug_line section in ELF and Mach-O files for Posix.</source>
          <target state="translated">Posix用のELFやMach-OファイルのDWARFのdebug_line部分を使ってバックトレースを生成するコードです。</target>
        </trans-unit>
        <trans-unit id="6140309682aaa69b6ff498f8a25796d0edfd215e" translate="yes" xml:space="preserve">
          <source>This code handles decoding UTF strings for foreach loops. There are 6 combinations of conversions between char, wchar, and dchar, and 2 of each of those.</source>
          <target state="translated">このコードは、foreachループのためのUTF文字列のデコードを処理します。char,wchar,dchar間の変換の組み合わせは6通りあり、それぞれ2通りあります。</target>
        </trans-unit>
        <trans-unit id="982470496432064145436b3b7c81c481f591fd15" translate="yes" xml:space="preserve">
          <source>This code handles decoding UTF strings for foreach_reverse loops. There are 6 combinations of conversions between char, wchar, and dchar, and 2 of each of those.</source>
          <target state="translated">このコードは、foreach_reverseループのためのUTF文字列のデコードを処理します。char,wchar,dchar間の変換の組み合わせは6通りあり、それぞれ2通りあります。</target>
        </trans-unit>
        <trans-unit id="e76eacdedc4fa73ee336ac22c18ef834f35805af" translate="yes" xml:space="preserve">
          <source>This code reads ELF files and sections using memory mapped IO.</source>
          <target state="translated">このコードは、メモリマップされたIOを使用してELFファイルとセクションを読み込みます。</target>
        </trans-unit>
        <trans-unit id="db89b4b4bb5b2f93ea6d6ff02b4131b5059932ab" translate="yes" xml:space="preserve">
          <source>This combining of the environment and the function is called a</source>
          <target state="translated">この環境と機能の組み合わせを</target>
        </trans-unit>
        <trans-unit id="f04a03c616b5e70e398965fd9e6bb2d3b0919b13" translate="yes" xml:space="preserve">
          <source>This command-line parameter does not affect custom unit test handlers.</source>
          <target state="translated">このコマンドライン パラメータは、カスタム ユニット テスト ハンドラには影響しません。</target>
        </trans-unit>
        <trans-unit id="230aa360bfc55c5cf21e968f489f8b1241790aa2" translate="yes" xml:space="preserve">
          <source>This compile-time flag is &lt;code&gt;true&lt;/code&gt; if logging is not statically disabled.</source>
          <target state="translated">ログが静的に無効になっていない場合、このコンパイル時フラグは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d82eb07cfddf77181a4fa8aca621ce6591fd7ca9" translate="yes" xml:space="preserve">
          <source>This constructor is only called when we figured out which function template to instantiate.</source>
          <target state="translated">このコンストラクタは、どの関数テンプレートをインスタンス化するかがわかったときにのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="aa95214feed626f5e6eebb5c6959ff1d8bcafc67" translate="yes" xml:space="preserve">
          <source>This constructor is the inverse of &lt;a href=&quot;#opCast&quot;&gt;&lt;code&gt;opCast&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このコンストラクタは&lt;a href=&quot;#opCast&quot;&gt; &lt;code&gt;opCast&lt;/code&gt; &lt;/a&gt;の逆です。</target>
        </trans-unit>
        <trans-unit id="a8fcfb06ab6c25d2bbe46e5cfe782e5b576ac2d4" translate="yes" xml:space="preserve">
          <source>This contains the copyright notice. The macro COPYRIGHT is set to the contents of the section when it documents the module declaration. The copyright section only gets this special treatment when it is for the module declaration.</source>
          <target state="translated">ここには、著作権表示が含まれています。マクロcopyrightは、モジュール宣言を文書化するときに、セクションの内容に設定されます。copyrightセクションは、モジュール宣言のためのものであるときだけ、この特別な扱いを受けます。</target>
        </trans-unit>
        <trans-unit id="822ca8d08b221bc29495c95da9984e8cee76c282" translate="yes" xml:space="preserve">
          <source>This convenience method alleviates the need to manually manage decoding buffers.</source>
          <target state="translated">この便利な方法により、デコードバッファを手動で管理する必要性が軽減されます。</target>
        </trans-unit>
        <trans-unit id="cf045283f89baa3e44e42e507f01aa06b96bde31" translate="yes" xml:space="preserve">
          <source>This convenience method alleviates the need to manually manage output buffers.</source>
          <target state="translated">この便利な方法により、出力バッファを手動で管理する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="16b88e43157a2f6f2c5142b90b7d5fe45695bbef" translate="yes" xml:space="preserve">
          <source>This created a new Fiber for the supplied op and adds it to the dispatch list.</source>
          <target state="translated">これにより、供給されたオペアンプ用の新しいファイバーが作成され、ディスパッチリストに追加されます。</target>
        </trans-unit>
        <trans-unit id="fdc94e4392e59112302f3c3212c7174cb2489e38" translate="yes" xml:space="preserve">
          <source>This creates a new Fiber for the supplied op and then starts the dispatcher.</source>
          <target state="translated">これにより、供給されたオペアンプ用の新しいファイバーが作成され、ディスパッチャが起動します。</target>
        </trans-unit>
        <trans-unit id="af45f3f128eb584feb53ad796c2bd75a57d5180c" translate="yes" xml:space="preserve">
          <source>This defines a new type &lt;code&gt;X&lt;/code&gt; which has values &lt;code&gt;X.A=0&lt;/code&gt;, &lt;code&gt;X.B=1&lt;/code&gt;, &lt;code&gt;X.C=2&lt;/code&gt;:</source>
          <target state="translated">これは、値 &lt;code&gt;X.A=0&lt;/code&gt; 、 &lt;code&gt;X.B=1&lt;/code&gt; 、 &lt;code&gt;X.C=2&lt;/code&gt; を持つ新しいタイプ &lt;code&gt;X&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="0d27799b2bf9fed9292a027676e909387c978ddb" translate="yes" xml:space="preserve">
          <source>This definition of mutable functions is more general than the one traditionally employed by pure functional languages because it allows a D pure function to use state mutation, as long as all state is created internally or reachable through its arguments. In particular, a pure function may allocate memory by means of e.g. &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;malloc&lt;/code&gt; without these being special cases. A pure function is allowed to loop indefinitely or terminate the program.</source>
          <target state="translated">この可変関数の定義は、すべての状態が内部で作成されるか、その引数を通じて到達可能である限り、D純粋関数が状態変更を使用できるため、純粋な関数型言語で従来使用されているものよりも一般的です。特に、純粋な関数は、特別な場合を除いて、たとえば &lt;code&gt;new&lt;/code&gt; または &lt;code&gt;malloc&lt;/code&gt; を使用してメモリを割り当てることができます。純関数は無期限にループするか、プログラムを終了することができます。</target>
        </trans-unit>
        <trans-unit id="524100fdceb69609090212fc4caf6a68ca169c00" translate="yes" xml:space="preserve">
          <source>This deletes the key e1 from the associative array e2</source>
          <target state="translated">これは、連想配列 e2 からキー e1 を削除します。</target>
        </trans-unit>
        <trans-unit id="e594f9c668086e01075383fb67708b16f0e2344d" translate="yes" xml:space="preserve">
          <source>This describes the OOP API. To understand when to use the template API and when to use the OOP API, see the module documentation at the top of this page.</source>
          <target state="translated">ここでは OOP API について説明します。テンプレートAPIを使用するタイミングとOOP APIを使用するタイミングについては、このページの上部にあるモジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3007dc64e992f88997b93bf75939ee91b3bf45cf" translate="yes" xml:space="preserve">
          <source>This document describes the &lt;code&gt;x86&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt; implementations of the inline assembler. The inline assembler platform support that a compiler provides is indicated by the &lt;code&gt;D_InlineAsm_X86&lt;/code&gt; and &lt;code&gt;D_InlineAsm_X86_64&lt;/code&gt; version identifiers, respectively.</source>
          <target state="translated">このドキュメントでは、インラインアセンブラの &lt;code&gt;x86&lt;/code&gt; および &lt;code&gt;x86_64&lt;/code&gt; 実装について説明します。コンパイラが提供するインラインアセンブラプラットフォームのサポートは、それぞれ &lt;code&gt;D_InlineAsm_X86&lt;/code&gt; および &lt;code&gt;D_InlineAsm_X86_64&lt;/code&gt; バージョン識別子で示されます。</target>
        </trans-unit>
        <trans-unit id="569cf1450215141639c3396e75fe3e0e30e8cd78" translate="yes" xml:space="preserve">
          <source>This document is the reference manual for the D Programming Language. For more information and other documents, see &lt;a href=&quot;https://dlang.org/&quot;&gt;The D Language Website&lt;/a&gt;.</source>
          <target state="translated">このドキュメントは、Dプログラミング言語のリファレンスマニュアルです。詳細およびその他のドキュメントについては&lt;a href=&quot;https://dlang.org/&quot;&gt;、D言語のWebサイトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0b76c1da48d91edda64500d21af760a6ce3c2286" translate="yes" xml:space="preserve">
          <source>This document specifies how to interface with C++ directly.</source>
          <target state="translated">このドキュメントでは、C++との直接のインターフェイス方法を指定します。</target>
        </trans-unit>
        <trans-unit id="4eaa9b84c7822b2e3e77fa7e5df36263689f6cc9" translate="yes" xml:space="preserve">
          <source>This documents the general structure of a Digest in the template API. All digest implementations should implement the following members and therefore pass the &lt;a href=&quot;#isDigest&quot;&gt;&lt;code&gt;isDigest&lt;/code&gt;&lt;/a&gt; test.</source>
          <target state="translated">これは、テンプレートAPIのダイジェストの一般的な構造を文書化したものです。すべてのダイジェスト実装は、次のメンバーを実装する必要があるため、&lt;a href=&quot;#isDigest&quot;&gt; &lt;code&gt;isDigest&lt;/code&gt; &lt;/a&gt;テストに合格する必要があります。</target>
        </trans-unit>
        <trans-unit id="ac0dd62d84db23b0de6fee189b1020c75493d355" translate="yes" xml:space="preserve">
          <source>This does not assign the pointer of &lt;code&gt;rhs&lt;/code&gt; to this &lt;code&gt;RefRange&lt;/code&gt;. Rather it assigns the range pointed to by &lt;code&gt;rhs&lt;/code&gt; to the range pointed to by this &lt;code&gt;RefRange&lt;/code&gt;. This is because</source>
          <target state="translated">これは &lt;code&gt;rhs&lt;/code&gt; のポインターをこの &lt;code&gt;RefRange&lt;/code&gt; に割り当てません。むしろ、 &lt;code&gt;rhs&lt;/code&gt; が指す範囲を、この &lt;code&gt;RefRange&lt;/code&gt; が指す範囲に割り当てます。それの訳は</target>
        </trans-unit>
        <trans-unit id="e81812302527d63ee87960159e6a1b9dd25fb020" translate="yes" xml:space="preserve">
          <source>This does not include any time during which the StopWatch was stopped but does include</source>
          <target state="translated">これには、ストップウォッチが停止している間の時間は含まれませんが、以下の時間は含まれます。</target>
        </trans-unit>
        <trans-unit id="c432390e6bbf7d9fb981f314323bac09cd4ec391" translate="yes" xml:space="preserve">
          <source>This does not mean, however, that one can change the data:</source>
          <target state="translated">ただし、これはデータを変更できるという意味ではありません。</target>
        </trans-unit>
        <trans-unit id="1d63844eee394540a61e05092a78018f8dcdacad" translate="yes" xml:space="preserve">
          <source>This doesn't include '\n', '\r', \t' and other non-space &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt;. For commonly used less strict semantics see &lt;a href=&quot;#isWhite&quot;&gt;&lt;code&gt;isWhite&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これには、「\ n」、「\ r」、\ t、およびその他の非スペース&lt;a href=&quot;#Character&quot;&gt;文字&lt;/a&gt;は含まれません。一般的に使用されるそれほど厳密ではないセマンティクスについては、&lt;a href=&quot;#isWhite&quot;&gt; &lt;code&gt;isWhite&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b899c5918773ae82ab7898c96cd3e0a68f5b5e5e" translate="yes" xml:space="preserve">
          <source>This doesn't work for TLS memory, though.</source>
          <target state="translated">しかし、これはTLSメモリには効きません。</target>
        </trans-unit>
        <trans-unit id="add950f77c9072c48dcd0ff96facedd547735caa" translate="yes" xml:space="preserve">
          <source>This easy handle has completed. 'result' contains the CURLcode of the transfer</source>
          <target state="translated">このイージーハンドルは完了しました。result' には転送の CURLcode が含まれています。</target>
        </trans-unit>
        <trans-unit id="ef5d8951fd69c70c7d61e2bd1231248df49b6d3e" translate="yes" xml:space="preserve">
          <source>This example creates a DOM (Document Object Model) tree from an XML file.</source>
          <target state="translated">この例では、XML ファイルから DOM (Document Object Model)ツリーを作成します。</target>
        </trans-unit>
        <trans-unit id="74ec60c9c14341e9d9e5373aa773d98804f76f30" translate="yes" xml:space="preserve">
          <source>This example does much the same thing, except that the file is deconstructed and reconstructed by hand. This is more work, but the techniques involved offer vastly more power.</source>
          <target state="translated">この例は、ファイルが分解され、手で再構築されていることを除いて、ほとんど同じことをしています。これはより多くの作業になりますが、関与する技術は非常に多くの力を提供します。</target>
        </trans-unit>
        <trans-unit id="7a4cbb05cb72419e58f855fffb51071ca39f119b" translate="yes" xml:space="preserve">
          <source>This example encodes the input data one byte at a time.</source>
          <target state="translated">この例では、入力データを 1 バイトずつエンコードします。</target>
        </trans-unit>
        <trans-unit id="efc529b5b8a635fe0248f0e1b5570f3e5c62ec50" translate="yes" xml:space="preserve">
          <source>This example encodes the input one line at a time.</source>
          <target state="translated">この例では、入力を一行ずつエンコードしています。</target>
        </trans-unit>
        <trans-unit id="709f6883e08535336d0975187381366956732f0d" translate="yes" xml:space="preserve">
          <source>This example of template foo has a value parameter that is specialized for 10:</source>
          <target state="translated">このテンプレートfooの例では、10に特化した値のパラメータを持っています。</target>
        </trans-unit>
        <trans-unit id="0c7fc0bf8d7d58bae3c653e435da196f5834dccc" translate="yes" xml:space="preserve">
          <source>This example shows decoding one byte at a time.</source>
          <target state="translated">この例では、1 バイトずつデコードしています。</target>
        </trans-unit>
        <trans-unit id="ca9412e6a6a265cc25cdadaa2feca886b99350b4" translate="yes" xml:space="preserve">
          <source>This example shows decoding over a range of input data lines.</source>
          <target state="translated">この例では、入力データラインの範囲にわたってデコードを行っています。</target>
        </trans-unit>
        <trans-unit id="3ca157dc5296c9dbda3b67885000d1a3d169c64b" translate="yes" xml:space="preserve">
          <source>This example uses a mixin to implement a generic Duff's device for an arbitrary statement (in this case, the arbitrary statement is in bold). A nested function is generated as well as a delegate literal, these can be inlined by the compiler:</source>
          <target state="translated">この例では、任意の文(この場合、任意の文は太字で表示されています)のための汎用的なダフのデバイスを実装するためにミキシンを使用しています。入れ子になった関数とデリゲートリテラルが生成されますが、これらはコンパイラでインライン化することができます。</target>
        </trans-unit>
        <trans-unit id="9fd04b9d165e95a5b5d46f431bdbd8794b151b29" translate="yes" xml:space="preserve">
          <source>This example will create an Objective-C string, &lt;code&gt;NSString&lt;/code&gt;, and log the message using &lt;code&gt;NSLog&lt;/code&gt; to stderr.</source>
          <target state="translated">この例では、Objective-C文字列 &lt;code&gt;NSString&lt;/code&gt; を作成し、 &lt;code&gt;NSLog&lt;/code&gt; を使用してメッセージをstderrに記録します。</target>
        </trans-unit>
        <trans-unit id="5b44fd2927053fecf7f02a805bef21a73969e7c8" translate="yes" xml:space="preserve">
          <source>This exception is thrown if an error occurs when parsing a UUID from a string.</source>
          <target state="translated">この例外は、文字列からUUIDを解析する際にエラーが発生した場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="83cf2ca3dac976d4903c104f6cecb54eca32e9c0" translate="yes" xml:space="preserve">
          <source>This exists in order to find where &lt;code&gt;STC.maybescope&lt;/code&gt; is getting turned off.</source>
          <target state="translated">これは、 &lt;code&gt;STC.maybescope&lt;/code&gt; がオフになっている場所を見つけるために存在します。</target>
        </trans-unit>
        <trans-unit id="ec12e985e5f97029a4fdcc178a312496ababfe99" translate="yes" xml:space="preserve">
          <source>This fiber must be in state HOLD.</source>
          <target state="translated">このファイバーはHOLDの状態でなければなりません。</target>
        </trans-unit>
        <trans-unit id="050dfac3109c2719a43b56525c7b1b2f0f5442dd" translate="yes" xml:space="preserve">
          <source>This fiber must be in state TERM or HOLD.</source>
          <target state="translated">この繊維は、TERMまたはHOLDの状態でなければなりません。</target>
        </trans-unit>
        <trans-unit id="8069d75e504b5df60eaae8b05121a6dfce90e592" translate="yes" xml:space="preserve">
          <source>This field has been deprecated. Please use &lt;code&gt;cacheLevels&lt;/code&gt; instead.</source>
          <target state="translated">このフィールドは廃止されました。代わりに &lt;code&gt;cacheLevels&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="a88f12f8698a93effebf4b21ac2fcaaf1ed6557e" translate="yes" xml:space="preserve">
          <source>This field is populated when using &lt;a href=&quot;#csvReader&quot;&gt;&lt;code&gt;csvReader&lt;/code&gt;&lt;/a&gt; but not by &lt;a href=&quot;#csvNextToken&quot;&gt;&lt;code&gt;csvNextToken&lt;/code&gt;&lt;/a&gt; as this data will have already been fed to the output range.</source>
          <target state="translated">このデータは&lt;a href=&quot;#csvNextToken&quot;&gt; &lt;code&gt;csvNextToken&lt;/code&gt; &lt;/a&gt;を使用する場合に入力され&lt;a href=&quot;#csvReader&quot;&gt; &lt;code&gt;csvReader&lt;/code&gt; &lt;/a&gt;が、csvNextTokenでは入力されません。このデータはすでに出力範囲に供給されているためです。</target>
        </trans-unit>
        <trans-unit id="00b3ae505bfa7b5877d4290b9bf62b73f3526eab" translate="yes" xml:space="preserve">
          <source>This field was added in CURLVERSION_THIRD</source>
          <target state="translated">このフィールドは CURLVERSION_THIRD で追加されました。</target>
        </trans-unit>
        <trans-unit id="ded4afb1457e0f04e1bc6ce625b9a154f7bfa729" translate="yes" xml:space="preserve">
          <source>This flag has no effect on &lt;a href=&quot;#spawnProcess&quot;&gt;&lt;code&gt;spawnProcess&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#spawnShell&quot;&gt;&lt;code&gt;spawnShell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このフラグは、&lt;a href=&quot;#spawnProcess&quot;&gt; &lt;code&gt;spawnProcess&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#spawnShell&quot;&gt; &lt;code&gt;spawnShell&lt;/code&gt; に&lt;/a&gt;は影響しません。</target>
        </trans-unit>
        <trans-unit id="0c7a11a8d6d19389f0abbac4fa34ba46bd07ad35" translate="yes" xml:space="preserve">
          <source>This function</source>
          <target state="translated">この関数は</target>
        </trans-unit>
        <trans-unit id="63a837cbc01e12716c2a63542540dfd3d20ec868" translate="yes" xml:space="preserve">
          <source>This function allocates memory.</source>
          <target state="translated">この関数は、メモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="92814a3bf729ba0c96c36e96433e5f0d828849bd" translate="yes" xml:space="preserve">
          <source>This function allows user-defined subclasses of EncodingScheme to be declared in other modules.</source>
          <target state="translated">この関数は、ユーザー定義のEncodingSchemeのサブクラスを他のモジュールで宣言できるようにします。</target>
        </trans-unit>
        <trans-unit id="471f7413c5ebea16f57422410a8bf930e30c75d3" translate="yes" xml:space="preserve">
          <source>This function also decomposes hangul syllables as prescribed by the standard.</source>
          <target state="translated">また、この機能は、標準で規定されているハングルの音節を分解します。</target>
        </trans-unit>
        <trans-unit id="534457dcd59761dcb843df10d6fcec190ed3b4c4" translate="yes" xml:space="preserve">
          <source>This function always allocates memory to hold the resulting path. The variadic overload is guaranteed to only perform a single allocation, as is the range version if &lt;code&gt;paths&lt;/code&gt; is a forward range.</source>
          <target state="translated">この関数は、結果のパスを保持するために常にメモリを割り当てます。 &lt;code&gt;paths&lt;/code&gt; が前方範囲である場合の範囲バージョンと同様に、可変個オーバーロードは単一の割り当てのみを実行することが保証されています。</target>
        </trans-unit>
        <trans-unit id="bd9256b25c3dea2b100b91fc151d4d49aa057003" translate="yes" xml:space="preserve">
          <source>This function always allocates memory to hold the resulting path. Use &lt;a href=&quot;#asNormalizedPath&quot;&gt;&lt;code&gt;asNormalizedPath&lt;/code&gt;&lt;/a&gt; to not allocate memory.</source>
          <target state="translated">この関数は、結果のパスを保持するために常にメモリを割り当てます。&lt;a href=&quot;#asNormalizedPath&quot;&gt; &lt;code&gt;asNormalizedPath&lt;/code&gt; &lt;/a&gt;を使用して、メモリを割り当てません。</target>
        </trans-unit>
        <trans-unit id="187779b43f44c34c6b32550dd282a3cd2f13a1e6" translate="yes" xml:space="preserve">
          <source>This function always allocates memory to hold the resulting path. Use &lt;a href=&quot;#buildNormalizedPath&quot;&gt;&lt;code&gt;buildNormalizedPath&lt;/code&gt;&lt;/a&gt; to allocate memory and return a string.</source>
          <target state="translated">この関数は、結果のパスを保持するために常にメモリを割り当てます。&lt;a href=&quot;#buildNormalizedPath&quot;&gt; &lt;code&gt;buildNormalizedPath&lt;/code&gt; &lt;/a&gt;を使用してメモリを割り当て、文字列を返します。</target>
        </trans-unit>
        <trans-unit id="565ae089ae893ce04d0723fbc06da8efba3b5449" translate="yes" xml:space="preserve">
          <source>This function calls &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa364439%28v=vs.85%29.aspx&quot;&gt;&lt;code&gt;FlushFileBuffers&lt;/code&gt;&lt;/a&gt; on Windows and &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/7908799/xsh/fsync.html&quot;&gt;&lt;code&gt;fsync&lt;/code&gt;&lt;/a&gt; on POSIX for the file handle.</source>
          <target state="translated">この関数は、呼び出した&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa364439%28v=vs.85%29.aspx&quot;&gt; &lt;code&gt;FlushFileBuffers&lt;/code&gt; &lt;/a&gt; Windows上と&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/7908799/xsh/fsync.html&quot;&gt; &lt;code&gt;fsync&lt;/code&gt; を&lt;/a&gt;ファイルハンドルのためのPOSIX上を。</target>
        </trans-unit>
        <trans-unit id="f8c2e50367d22c68b1ef6bf70b530cf16359f88a" translate="yes" xml:space="preserve">
          <source>This function can allocate if the &lt;code&gt;Yes.allocateGC&lt;/code&gt; flag is passed. This has the benefit of have better complexity than the &lt;code&gt;Yes.allocateGC&lt;/code&gt; option. However, this option is only available for ranges whose equality can be determined via each element's &lt;code&gt;toHash&lt;/code&gt; method. If customized equality is needed, then the &lt;code&gt;pred&lt;/code&gt; template parameter can be passed, and the function will automatically switch to the non-allocating algorithm. See &lt;a href=&quot;std_functional#binaryFun&quot;&gt;&lt;code&gt;std.functional.binaryFun&lt;/code&gt;&lt;/a&gt; for more details on how to define &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;Yes.allocateGC&lt;/code&gt; フラグが渡された場合に割り当てることができます。これには、 &lt;code&gt;Yes.allocateGC&lt;/code&gt; オプションよりも複雑になるという利点があります。ただし、このオプションは、各要素の &lt;code&gt;toHash&lt;/code&gt; メソッドを使用して等しいかどうかを判断できる範囲でのみ使用できます。カスタマイズされた同等性が必要な場合は、 &lt;code&gt;pred&lt;/code&gt; テンプレートパラメーターを渡すことができ、関数は自動的に非割り当てアルゴリズムに切り替わります。 &lt;code&gt;pred&lt;/code&gt; の定義方法の詳細については、&lt;a href=&quot;std_functional#binaryFun&quot;&gt; &lt;code&gt;std.functional.binaryFun&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2b1f8d9be7c40727aeac47ccfd7444f517f04172" translate="yes" xml:space="preserve">
          <source>This function can be &lt;code&gt;@trusted&lt;/code&gt; if the corresponding constructor of &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;@safe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; の対応するコンストラクターが &lt;code&gt;@trusted&lt;/code&gt; 場合、この関数は &lt;code&gt;@safe&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="287c25734ab50e3ae9a7c39776861bb5646f4c1c" translate="yes" xml:space="preserve">
          <source>This function can perform a case-sensitive or a case-insensitive comparison. This is controlled through the &lt;code&gt;cs&lt;/code&gt; template parameter which, if not specified, is given by &lt;a href=&quot;#CaseSensitive&quot;&gt;&lt;code&gt;CaseSensitive&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.osDefault&lt;/code&gt;.</source>
          <target state="translated">この関数は、大文字と小文字を区別する、または区別しない比較を実行できます。これは、指定されていない場合は&lt;a href=&quot;#CaseSensitive&quot;&gt; &lt;code&gt;CaseSensitive&lt;/code&gt; &lt;/a&gt; &lt;code&gt;.osDefault&lt;/code&gt; によって指定される &lt;code&gt;cs&lt;/code&gt; テンプレートパラメーターによって制御されます。</target>
        </trans-unit>
        <trans-unit id="5e873b6c5b5805640016d4214ee3463e370b995d" translate="yes" xml:space="preserve">
          <source>This function complies with &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/basename.html&quot;&gt; the POSIX requirements for the 'basename' shell utility&lt;/a&gt; (with suitable adaptations for Windows paths).</source>
          <target state="translated">この関数は&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/basename.html&quot;&gt;、「basename」シェルユーティリティのPOSIX要件に&lt;/a&gt;準拠しています（Windowsパスに適切に調整されています）。</target>
        </trans-unit>
        <trans-unit id="271fe9a4358104e29e9baaf0f70ca7697a626f35" translate="yes" xml:space="preserve">
          <source>This function complies with &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/dirname.html&quot;&gt; the POSIX requirements for the 'dirname' shell utility&lt;/a&gt; (with suitable adaptations for Windows paths).</source>
          <target state="translated">この関数は&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/dirname.html&quot;&gt;、「dirname」シェルユーティリティのPOSIX要件に&lt;/a&gt;準拠しています（Windowsパスに適切に調整されています）。</target>
        </trans-unit>
        <trans-unit id="f911814cd134bf58a8ba7e68aae37ec618511b50" translate="yes" xml:space="preserve">
          <source>This function consumes the input. After each call the input will start with either a delimiter or record break (\n, \r\n, \r) which must be removed for subsequent calls.</source>
          <target state="translated">この関数は入力を消費する。各コールの後、入力はデリミタかレコードブレーク(\n,\r\n,\rr)のいずれかで始まります。</target>
        </trans-unit>
        <trans-unit id="82adca51d2d89c2e52168f23c5014dcf4b09b7e3" translate="yes" xml:space="preserve">
          <source>This function creates a complete DOM (Document Object Model) tree.</source>
          <target state="translated">この関数は、完全な DOM (Document Object Model)ツリーを作成します。</target>
        </trans-unit>
        <trans-unit id="34f7e14685f9dc1d8824f48b2307f8cd989b3e43" translate="yes" xml:space="preserve">
          <source>This function decodes the entities &amp;amp;amp;, &amp;amp;quot;, &amp;amp;apos;, &amp;amp;lt; and &amp;amp;gt, as well as decimal and hexadecimal entities such as &amp;amp;#x20AC;</source>
          <target state="translated">この関数は、エンティティ＆amp;、＆quot;、＆apos;、＆lt;をデコードします。＆gt、および＆＃x20AC;などの10進数および16進数のエンティティ</target>
        </trans-unit>
        <trans-unit id="37bc9985a8792341b2d7a8d50dc7ab55bd1e93ad" translate="yes" xml:space="preserve">
          <source>This function defends against this attack by always comparing every single item in the array if the two arrays are the same length. Therefore, this function is always &amp;Omicron;(&lt;code&gt;n&lt;/code&gt;) for ranges of the same length.</source>
          <target state="translated">この関数は、2つの配列が同じ長さである場合、常に配列内のすべての項目を比較することにより、この攻撃を防ぎます。したがって、この関数は、同じ長さの範囲では常に&amp;Omicron;（ &lt;code&gt;n&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="07fbd70f1f7940fca06c0a8a3c74b8aabe9ac979" translate="yes" xml:space="preserve">
          <source>This function does not provide overloads for wstring and dstring, as there's no clear answer on how that should be implemented. It could be argued, that string, wstring and dstring input should have the same output, but that wouldn't be compatible with Boost, which generates different output for strings and wstrings. It's always possible to pass wstrings and dstrings by using the ubyte[] function overload (but be aware of endianness issues!).</source>
          <target state="translated">この関数はwstringとdstringのオーバーロードを提供していません。文字列、wstring、dstringの入力は同じ出力を持つべきだという議論もあるかもしれませんが、文字列とwstringで異なる出力を生成するBoostとは互換性がありません。ubyte[]関数のオーバーロードを使えば、wstringとdstringを渡すことはいつでも可能です(ただし、エンディアンの問題に注意してください)。</target>
        </trans-unit>
        <trans-unit id="a7eab1a520623d1ac5e68ed2c102542d0c568c2a" translate="yes" xml:space="preserve">
          <source>This function encodes a single code point into one or more code units The code units are stored in a user-supplied fixed-size array, which must be passed by reference.</source>
          <target state="translated">この関数は、1 つのコードポイントを 1 つ以上のコードユニットにエンコードします。 コードユニットは、ユーザが提供する固定サイズの配列に格納され、参照で渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="a4dfecb064dc08682e5d5f6ff6e2a923d6c06c55" translate="yes" xml:space="preserve">
          <source>This function encodes a single code point into one or more code units. It returns a string containing those code units.</source>
          <target state="translated">この関数は、1つのコードポイントを1つ以上のコードユニットにエンコードします。これらのコード単位を含む文字列を返します。</target>
        </trans-unit>
        <trans-unit id="d23af3939d6f49cb27a211fdfb01f49551cd4f68" translate="yes" xml:space="preserve">
          <source>This function encodes a single code point into one or more code units. The code units are passed one at a time to the supplied delegate.</source>
          <target state="translated">この関数は、1 つのコード点を 1 つ以上のコード単位にエンコードします。コード単位は、与えられたデリゲートに一度に一つずつ渡されます。</target>
        </trans-unit>
        <trans-unit id="fd5007482279246870e612a2f7b9d7848a9ec8a9" translate="yes" xml:space="preserve">
          <source>This function encodes a single code point into one or more ubytes. The supplied buffer must be code unit aligned. (For example, UTF-16LE or UTF-16BE must be wchar-aligned, UTF-32LE or UTF-32BE must be dchar-aligned, etc.)</source>
          <target state="translated">この関数は、1 つのコードポイントを 1 つ以上の ﾕｰﾌﾞﾙﾃﾞｰﾄ にエンコードします。与え ら れたバ ッ フ ァ は コ ー ド 単位を揃え る 必要があ り ます (例:UTF-16LE または UTF-16BE は wchar-aligned、UTF-32LE または UTF-32BE は wchar-aligned など)。例えば、UTF-16LE または UTF-16BE は wchar アラインメント、UTF-32LE または UTF-32BE は dchar アラインメントなど)。</target>
        </trans-unit>
        <trans-unit id="5a399e2ee90c7d22546000e946a9cf8427b4a082" translate="yes" xml:space="preserve">
          <source>This function exists to make it easy to convert a &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; to a string for code that does not care what the exact format is - just that it presents the information in a clear manner. It also makes it easy to simply convert a &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; to a string when using functions such as &lt;code&gt;to!string&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;, or &lt;code&gt;writeln&lt;/code&gt; which use toString to convert user-defined types. So, it is unlikely that much code will call toString directly.</source>
          <target state="translated">この関数は、正確な形式を気にしないコードの&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;を文字列に簡単に変換するために存在します-情報を明確に提示するだけです。また、toStringを使用してユーザー定義型を変換する &lt;code&gt;to!string&lt;/code&gt; 、 &lt;code&gt;format&lt;/code&gt; 、または &lt;code&gt;writeln&lt;/code&gt; などの関数を使用する場合、&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;を文字列に簡単に変換することも簡単になります。したがって、多くのコードがtoStringを直接呼び出すことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="1c7ed4f81f0a82e13d48bb2e31cd6ec82cd2b86c" translate="yes" xml:space="preserve">
          <source>This function exists to make it easy to convert a &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; to a string for code that does not care what the exact format is - just that it presents the information in a clear manner. It also makes it easy to simply convert a &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; to a string when using functions such as &lt;code&gt;to!string&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;, or &lt;code&gt;writeln&lt;/code&gt; which use toString to convert user-defined types. So, it is unlikely that much code will call toString directly.</source>
          <target state="translated">この関数は、正確な形式が何であるかを気にしないコードの文字列に&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;を簡単に変換できるようにするために存在します-情報を明確に提示するだけです。また、toStringを使用してユーザー定義型を変換する &lt;code&gt;to!string&lt;/code&gt; 、 &lt;code&gt;format&lt;/code&gt; 、または &lt;code&gt;writeln&lt;/code&gt; などの関数を使用する場合、&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;を文字列に簡単に変換することも簡単になります。したがって、多くのコードがtoStringを直接呼び出すことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="6a64dc24e50c98de86395100f53371f383577cde" translate="yes" xml:space="preserve">
          <source>This function exists to make it easy to convert a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to a string for code that does not care what the exact format is - just that it presents the information in a clear manner. It also makes it easy to simply convert a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to a string when using functions such as &lt;code&gt;to!string&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;, or &lt;code&gt;writeln&lt;/code&gt; which use toString to convert user-defined types. So, it is unlikely that much code will call toString directly.</source>
          <target state="translated">この関数は、正確な形式が何であるかを気にしないコードの文字列に&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;を簡単に変換できるようにするために存在します-明確な方法で情報を提示するだけです。また、toStringを使用してユーザー定義型を変換する &lt;code&gt;to!string&lt;/code&gt; 、 &lt;code&gt;format&lt;/code&gt; 、または &lt;code&gt;writeln&lt;/code&gt; などの関数を使用するときに、&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;を文字列に簡単に変換することも簡単になります。したがって、多くのコードがtoStringを直接呼び出すことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="14f41e253b823f745b15c2cc550803f474f520f9" translate="yes" xml:space="preserve">
          <source>This function exists to make it easy to convert a &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt; to a string for code that does not care what the exact format is - just that it presents the information in a clear manner. It also makes it easy to simply convert a &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt; to a string when using functions such as &lt;code&gt;to!string&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;, or &lt;code&gt;writeln&lt;/code&gt; which use toString to convert user-defined types. So, it is unlikely that much code will call toString directly.</source>
          <target state="translated">この関数は、正確な形式を気にしないコードの&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; &lt;/a&gt;を文字列に簡単に変換するために存在します-情報を明確に提示するだけです。また、toStringを使用してユーザー定義型を変換する &lt;code&gt;to!string&lt;/code&gt; 、 &lt;code&gt;format&lt;/code&gt; 、または &lt;code&gt;writeln&lt;/code&gt; などの関数を使用する場合、&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; &lt;/a&gt;を文字列に簡単に変換することも簡単になります。したがって、多くのコードがtoStringを直接呼び出すことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="1148e69f156783aee95aaac3af378446a842c947" translate="yes" xml:space="preserve">
          <source>This function generates a name based (Version 3) UUID from a namespace UUID and a name. If no namespace UUID was passed, the empty UUID &lt;code&gt;UUID.init&lt;/code&gt; is used.</source>
          <target state="translated">この関数は、名前空間UUIDと名前から名前ベース（バージョン3）のUUIDを生成します。名前空間UUIDが渡されなかった場合、空のUUID &lt;code&gt;UUID.init&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="66eef894e5457f79fe590d4b75d5bdb426faba8d" translate="yes" xml:space="preserve">
          <source>This function generates a name based (Version 5) UUID from a namespace UUID and a name. If no namespace UUID was passed, the empty UUID &lt;code&gt;UUID.init&lt;/code&gt; is used.</source>
          <target state="translated">この関数は、名前空間UUIDと名前から名前ベース（バージョン5）のUUIDを生成します。名前空間UUIDが渡されなかった場合、空のUUID &lt;code&gt;UUID.init&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="ebad38cdc822b58300e9d455ffae98ef3b8355b1" translate="yes" xml:space="preserve">
          <source>This function generates a random number based UUID from a random number generator.</source>
          <target state="translated">この関数は、乱数発生器から乱数ベースのUUIDを生成します。</target>
        </trans-unit>
        <trans-unit id="f6f7c9706e6dcaec3dbc1161d8b30b320ab44ea3" translate="yes" xml:space="preserve">
          <source>This function has high relative accuracy for values of x far from zero. (For values near zero, use erf(x)).</source>
          <target state="translated">この関数は、ゼロから遠く離れたxの値に対して高い相対精度を持ちます。(ゼロに近い値の場合は erf(x))を使用します)。</target>
        </trans-unit>
        <trans-unit id="e015cb774f65ac50bf4cc869720d1f86b5a714ec" translate="yes" xml:space="preserve">
          <source>This function is #1 on the list of functions that eat cpu time. Be very, very careful about slowing it down.</source>
          <target state="translated">この関数は、CPU時間を食う関数のリストの第1位です。遅くすることには非常に、非常に注意してください。</target>
        </trans-unit>
        <trans-unit id="3d30b43ff787a8dfba63ef7540785dda2309b0ec" translate="yes" xml:space="preserve">
          <source>This function is &amp;Omicron;(&lt;code&gt;r.length&lt;/code&gt;).</source>
          <target state="translated">この関数は&amp;Omicron;（ &lt;code&gt;r.length&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="60a203a8ffe09817c002b043b4f7c89faa37bc5d" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;@safe&lt;/code&gt; if the corresponding constructor of &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;@safe&lt;/code&gt;.</source>
          <target state="translated">この関数は、ある &lt;code&gt;@safe&lt;/code&gt; の対応するコンストラクタ場合 &lt;code&gt;T&lt;/code&gt; はある &lt;code&gt;@safe&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21b9e96c1bd954c7d66e5b95c40487111fc7a052" translate="yes" xml:space="preserve">
          <source>This function is POSIX-Only.</source>
          <target state="translated">この関数はPOSIX-Onlyです。</target>
        </trans-unit>
        <trans-unit id="6f04b8551bbda2b81d8696beac9a1b771dca8c71" translate="yes" xml:space="preserve">
          <source>This function is Posix-Only.</source>
          <target state="translated">この機能はPosix-Onlyです。</target>
        </trans-unit>
        <trans-unit id="fbf60467a7efe2e24827c64edfe554cec3d53403" translate="yes" xml:space="preserve">
          <source>This function is Windows-Only.</source>
          <target state="translated">この機能はWindows専用です。</target>
        </trans-unit>
        <trans-unit id="ad2fac1ecb2ded333fe1cd86ddc09c5fee778c2d" translate="yes" xml:space="preserve">
          <source>This function is a public API, exposed in &lt;code&gt;core.runtime&lt;/code&gt;.</source>
          <target state="translated">この関数はパブリックAPIであり、 &lt;code&gt;core.runtime&lt;/code&gt; で公開されています。</target>
        </trans-unit>
        <trans-unit id="103c72135b781967b4b7d6c0026bb26f7259605d" translate="yes" xml:space="preserve">
          <source>This function is also useful in checking for the existence of an environment variable.</source>
          <target state="translated">この関数は、環境変数の存在を確認するのにも便利です。</target>
        </trans-unit>
        <trans-unit id="ff6b0b14fd4304f9c34b27c03cced94d986e4033" translate="yes" xml:space="preserve">
          <source>This function is character-range specific and, contrary to &lt;code&gt;splitter!(std.uni.isWhite)&lt;/code&gt;, runs of whitespace will be merged together (no empty tokens will be produced).</source>
          <target state="translated">この関数は文字範囲固有であり、 &lt;code&gt;splitter!(std.uni.isWhite)&lt;/code&gt; とは異なり、一連の空白はマージされます（空のトークンは生成されません）。</target>
        </trans-unit>
        <trans-unit id="65b5ee7f9fec25cbb593bdce1cbdc98ea5f973e1" translate="yes" xml:space="preserve">
          <source>This function is defined only if both allocators define it, and calls &lt;code&gt;deallocateAll&lt;/code&gt; for them in turn.</source>
          <target state="translated">この関数は、両方のアロケーターで定義されている場合にのみ定義され、deallocateAll を順番に呼び出し &lt;code&gt;deallocateAll&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e12c13033743e308c93ef7b1af47f1c5b48d3a7" translate="yes" xml:space="preserve">
          <source>This function is defined only if both allocators define it, and forwards appropriately depending on &lt;code&gt;b.length&lt;/code&gt;.</source>
          <target state="translated">この関数は、両方のアロケーターで定義されている場合にのみ定義され、 &lt;code&gt;b.length&lt;/code&gt; に応じて適切に転送されます。</target>
        </trans-unit>
        <trans-unit id="ebd4634555bf7b1d8d38cdad8559fbd72f2f0cbb" translate="yes" xml:space="preserve">
          <source>This function is defined only if both allocators define it, and returns the conjunction of &lt;code&gt;empty&lt;/code&gt; calls for the two.</source>
          <target state="translated">この関数は、両方のアロケータで定義されている場合にのみ定義され、2つの &lt;code&gt;empty&lt;/code&gt; 呼び出しの結合を返します。</target>
        </trans-unit>
        <trans-unit id="0fd9509d9dd53b0824e520cb29e4d50f69f4b9cc" translate="yes" xml:space="preserve">
          <source>This function is never used when autodecoding is turned off.</source>
          <target state="translated">オートデコードがオフの場合は、この機能は使用しません。</target>
        </trans-unit>
        <trans-unit id="72987efb86a1c65d967d861a8683d92ed7f13b9d" translate="yes" xml:space="preserve">
          <source>This function is not generally very useful; it's almost always better to use the faster functions nextUp() or nextDown() instead.</source>
          <target state="translated">この関数は一般的にはあまり有用ではありません。</target>
        </trans-unit>
        <trans-unit id="ee8874e9697da79fd0874b41752112f89149a3af" translate="yes" xml:space="preserve">
          <source>This function is not implemented for Digital Mars C runtime.</source>
          <target state="translated">この関数はDigital Mars Cランタイムには実装されていません。</target>
        </trans-unit>
        <trans-unit id="e7e3e7b8bfa4b21481d77f68ea65de0d9b8237c1" translate="yes" xml:space="preserve">
          <source>This function is not supported at compile time.</source>
          <target state="translated">この関数はコンパイル時にはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="1569b54f86e9b2550627b7e8e8f05e326ad676e8" translate="yes" xml:space="preserve">
          <source>This function is not thread-safe!</source>
          <target state="translated">この関数はスレッドセーフではありません!</target>
        </trans-unit>
        <trans-unit id="41af9d14cc682c76550081ea13492c59097f2bca" translate="yes" xml:space="preserve">
          <source>This function is only aware of EncodingSchemes which have been registered with the register() function.</source>
          <target state="translated">この関数は、register()関数で登録されたEncodingSchemesのみを認識します。</target>
        </trans-unit>
        <trans-unit id="290ee1b0991973abcaa58bca7c5f6871e5deb008" translate="yes" xml:space="preserve">
          <source>This function is only implemented to 80 bit precision.</source>
          <target state="translated">この関数は80ビット精度でしか実装されていません。</target>
        </trans-unit>
        <trans-unit id="ee429d1ffe9a170a1a75d5b4a2ff165cd4f65550" translate="yes" xml:space="preserve">
          <source>This function is reentrant against error occurrence. If returns false, all elements of tiargs won't be modified.</source>
          <target state="translated">この関数はエラーが発生した場合に再入力します。falseを返した場合、tiargsの全ての要素は変更されません。</target>
        </trans-unit>
        <trans-unit id="a118a63c84fce3cf7c06f5f8756bac60c7cca3ac" translate="yes" xml:space="preserve">
          <source>This function is reentrant against error occurrence. If returns false, any members of this object won't be modified, and repetition call will reproduce same error.</source>
          <target state="translated">この関数はエラーが発生した場合に再取得します。falseを返した場合、このオブジェクトのメンバは変更されず、繰り返し呼び出しても同じエラーを再現します。</target>
        </trans-unit>
        <trans-unit id="45e502c95c63dd3997ac1ae57545286a53eaf26c" translate="yes" xml:space="preserve">
          <source>This function is supported in CTFE code. Note that error messages caused by a malformed UUID parsed at compile time can be cryptic, but errors are detected and reported at compile time.</source>
          <target state="translated">この関数は CTFE コードでサポートされています。コンパイル時に解析された不正な UUID に起因するエラーメッセージは暗号化されている可能性がありますが、コンパイル時にエラーが検出されて報告されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5bb3aca496547a19019cbfbd46c1d03c7dd418c6" translate="yes" xml:space="preserve">
          <source>This function is tentatively defined as &lt;code&gt;nothrow&lt;/code&gt; to prevent &lt;code&gt;opPostMove&lt;/code&gt; from being defined without &lt;code&gt;nothrow&lt;/code&gt;, which would allow for possibly confusing changes in program flow.</source>
          <target state="translated">この関数は、仮のように定義される &lt;code&gt;nothrow&lt;/code&gt; 防止する &lt;code&gt;opPostMove&lt;/code&gt; をせずに定義されているから &lt;code&gt;nothrow&lt;/code&gt; おそらくプログラムフローの変化を混乱を可能にするであろう。</target>
        </trans-unit>
        <trans-unit id="185d734d5fc912e0041185bf79a2b6f944b2db35" translate="yes" xml:space="preserve">
          <source>This function is used to (re)initialize the digest. It must be called before using the digest and it also works as a 'reset' function if the digest has already processed data.</source>
          <target state="translated">この関数は、ダイジェストを(再)初期化するために使用されます。ダイジェストを使用する前に呼ばれなければなりません。 また、ダイジェストが既にデータを処理している場合には 'リセット' 関数としても動作します。</target>
        </trans-unit>
        <trans-unit id="99071cc1c1c24be1d51b7e6eda1e08791479ed2b" translate="yes" xml:space="preserve">
          <source>This function is used to read the content of DFLAGS. Flags are separated based on spaces and tabs.</source>
          <target state="translated">この関数は、DFLAGS の内容を読み込むために使用します。フラグはスペースとタブで区切られています。</target>
        </trans-unit>
        <trans-unit id="2d39d375bb67b5bea56b7ea75d0a2e4ee34a5fe2" translate="yes" xml:space="preserve">
          <source>This function is useful for maintaining worker-local resources.</source>
          <target state="translated">この関数は、ワーカーローカルのリソースを維持するのに便利です。</target>
        </trans-unit>
        <trans-unit id="c37fe60667a42f9d7da86b803e8b5052d66d498d" translate="yes" xml:space="preserve">
          <source>This function is, in particular, meant to help maintain garbage collector invariants when a lock is not used.</source>
          <target state="translated">この関数は特に、ロックが使用されていない場合にガベージコレクタの不変量を維持するのに役立つことを意図しています。</target>
        </trans-unit>
        <trans-unit id="aa18c6da596117f8b9e11fbedcdfb9a943118fde" translate="yes" xml:space="preserve">
          <source>This function logs data in a &lt;code&gt;printf&lt;/code&gt;-style manner.</source>
          <target state="translated">この関数は、 &lt;code&gt;printf&lt;/code&gt; スタイルの方法でデータを記録します。</target>
        </trans-unit>
        <trans-unit id="77ac69a4b95956005ebe3b90c8e1ca91567efe01" translate="yes" xml:space="preserve">
          <source>This function logs data to the &lt;code&gt;sharedLog&lt;/code&gt; in a &lt;code&gt;printf&lt;/code&gt;-style manner.</source>
          <target state="translated">この関数は、 &lt;code&gt;printf&lt;/code&gt; スタイルの方法でデータを &lt;code&gt;sharedLog&lt;/code&gt; に記録します。</target>
        </trans-unit>
        <trans-unit id="98febaf749a97b9336fc523ba35aa7fdcff34cf1" translate="yes" xml:space="preserve">
          <source>This function logs data to the &lt;code&gt;stdThreadLocalLog&lt;/code&gt;, optionally depending on a condition.</source>
          <target state="translated">この関数は、必要に応じて条件に応じて、データを &lt;code&gt;stdThreadLocalLog&lt;/code&gt; に記録します。</target>
        </trans-unit>
        <trans-unit id="eda414e04cca7c9801e1364601be4f243d02a0be" translate="yes" xml:space="preserve">
          <source>This function logs data to the used &lt;code&gt;Logger&lt;/code&gt; depending on a condition with the &lt;code&gt;LogLevel&lt;/code&gt; of the used &lt;code&gt;Logger&lt;/code&gt; in a &lt;code&gt;printf&lt;/code&gt;-style manner.</source>
          <target state="translated">使用されるこの関数は、ログデータ &lt;code&gt;Logger&lt;/code&gt; との状態に応じ &lt;code&gt;LogLevel&lt;/code&gt; 使用の &lt;code&gt;Logger&lt;/code&gt; で &lt;code&gt;printf&lt;/code&gt; スタイルの方法。</target>
        </trans-unit>
        <trans-unit id="66789021f1f75fa2b910c0e9aaed002765517585" translate="yes" xml:space="preserve">
          <source>This function logs data to the used &lt;code&gt;Logger&lt;/code&gt; depending on a condition.</source>
          <target state="translated">この機能は、条件に応じて、使用した &lt;code&gt;Logger&lt;/code&gt; データを記録します。</target>
        </trans-unit>
        <trans-unit id="ea29ac02cb23a3225768859acfa66ad70cf0ae39" translate="yes" xml:space="preserve">
          <source>This function logs data to the used &lt;code&gt;Logger&lt;/code&gt; depending on a explicitly passed condition with the &lt;code&gt;LogLevel&lt;/code&gt; of the used &lt;code&gt;Logger&lt;/code&gt;.</source>
          <target state="translated">この関数は、使用された &lt;code&gt;Logger&lt;/code&gt; の &lt;code&gt;LogLevel&lt;/code&gt; で明示的に渡された条件に応じて、使用された &lt;code&gt;Logger&lt;/code&gt; にデータを記録します。</target>
        </trans-unit>
        <trans-unit id="c7a8c9b909022c7e8d9e73cb0c216e864ba19a51" translate="yes" xml:space="preserve">
          <source>This function logs data to the used &lt;code&gt;Logger&lt;/code&gt; in a &lt;code&gt;printf&lt;/code&gt;-style manner.</source>
          <target state="translated">この関数は、 &lt;code&gt;printf&lt;/code&gt; スタイルの方法で、使用した &lt;code&gt;Logger&lt;/code&gt; にデータを記録します。</target>
        </trans-unit>
        <trans-unit id="628f5766ea3ce125dda3efbe604aac9ecda078eb" translate="yes" xml:space="preserve">
          <source>This function logs data to the used &lt;code&gt;Logger&lt;/code&gt; with a specific &lt;code&gt;LogLevel&lt;/code&gt; and depending on a condition in a &lt;code&gt;printf&lt;/code&gt;-style manner.</source>
          <target state="translated">この関数は、特定の &lt;code&gt;LogLevel&lt;/code&gt; を使用し、条件に応じて &lt;code&gt;printf&lt;/code&gt; スタイルの方法で、使用した &lt;code&gt;Logger&lt;/code&gt; データを記録します。</target>
        </trans-unit>
        <trans-unit id="f75a8e8d5f3578debc1682e9b8a4e7729b3c532e" translate="yes" xml:space="preserve">
          <source>This function logs data to the used &lt;code&gt;Logger&lt;/code&gt; with a specific &lt;code&gt;LogLevel&lt;/code&gt; in a &lt;code&gt;printf&lt;/code&gt;-style manner.</source>
          <target state="translated">この関数は、 &lt;code&gt;printf&lt;/code&gt; スタイルの方法で、特定の &lt;code&gt;LogLevel&lt;/code&gt; を持つ使用済み &lt;code&gt;Logger&lt;/code&gt; データを記録します。</target>
        </trans-unit>
        <trans-unit id="ca804d9917691f26fc7fe486237e02550749abb2" translate="yes" xml:space="preserve">
          <source>This function logs data to the used &lt;code&gt;Logger&lt;/code&gt; with a specific &lt;code&gt;LogLevel&lt;/code&gt;.</source>
          <target state="translated">この関数は、特定の &lt;code&gt;LogLevel&lt;/code&gt; で使用中の &lt;code&gt;Logger&lt;/code&gt; データを記録します。</target>
        </trans-unit>
        <trans-unit id="3ca01c9755ef83db66052e862db8bfa8416b4a46" translate="yes" xml:space="preserve">
          <source>This function logs data to the used &lt;code&gt;Logger&lt;/code&gt; with the &lt;code&gt;LogLevel&lt;/code&gt; of the used &lt;code&gt;Logger&lt;/code&gt;.</source>
          <target state="translated">使用するには、この関数のログデータ &lt;code&gt;Logger&lt;/code&gt; と &lt;code&gt;LogLevel&lt;/code&gt; 使用の &lt;code&gt;Logger&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32b20bbe0e9053ff439b8531776b44b5d48b2b21" translate="yes" xml:space="preserve">
          <source>This function logs data to the used &lt;code&gt;Logger&lt;/code&gt;.</source>
          <target state="translated">この関数は、使用された &lt;code&gt;Logger&lt;/code&gt; データを記録します。</target>
        </trans-unit>
        <trans-unit id="de4891742f4a098eab831566cf8b20847dcaef47" translate="yes" xml:space="preserve">
          <source>This function logs data.</source>
          <target state="translated">この関数は、データをログに記録します。</target>
        </trans-unit>
        <trans-unit id="f6a6f2512cc3b6d3cec5f7eabcb2475f26f787b9" translate="yes" xml:space="preserve">
          <source>This function modifies &lt;code&gt;inp&lt;/code&gt; and thus &lt;code&gt;inp&lt;/code&gt; must be an L-value.</source>
          <target state="translated">この関数は &lt;code&gt;inp&lt;/code&gt; を変更するため、 &lt;code&gt;inp&lt;/code&gt; はL値でなければなりません。</target>
        </trans-unit>
        <trans-unit id="e7aa3a07169729c5a673fe4e99d00fd959fedfe3" translate="yes" xml:space="preserve">
          <source>This function normally allocates a new string (the possible exception being the case when path is immutable and doesn't already have an extension).</source>
          <target state="translated">この関数は通常、新しい文字列を確保します(例外として、pathが不変で拡張子を持っていない場合があります)。</target>
        </trans-unit>
        <trans-unit id="7c7d082480a49d72cdaa9587898253b55870d5fe" translate="yes" xml:space="preserve">
          <source>This function only handles 1:1 &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; mapping and thus is not sufficient for certain alphabets like German, Greek and few others.</source>
          <target state="translated">この関数は1：1の&lt;a href=&quot;#Code%20point&quot;&gt;コードポイント&lt;/a&gt;マッピングのみを処理するため、ドイツ語、ギリシャ語などの特定のアルファベットでは不十分です。</target>
        </trans-unit>
        <trans-unit id="4d4c84cebd7adfe7f4082a2a17dcc09bc723efd3" translate="yes" xml:space="preserve">
          <source>This function performs several memory allocations.</source>
          <target state="translated">この関数は、複数のメモリの割り当てを行います。</target>
        </trans-unit>
        <trans-unit id="36f6f15315bfa28fc8956871508424ecedf0dc3c" translate="yes" xml:space="preserve">
          <source>This function picks the most suitable regular expression engine depending on the pattern properties.</source>
          <target state="translated">この関数は,パターンのプロパティに応じて最適な正規表現エンジンを選択します.</target>
        </trans-unit>
        <trans-unit id="34bd902809c0b5255b567c50dd18197e0b398a33" translate="yes" xml:space="preserve">
          <source>This function prints the passed &lt;code&gt;Option&lt;/code&gt;s and text in an aligned manner on &lt;code&gt;stdout&lt;/code&gt;.</source>
          <target state="translated">この関数は、渡された &lt;code&gt;Option&lt;/code&gt; とテキストを整列して &lt;code&gt;stdout&lt;/code&gt; に出力します。</target>
        </trans-unit>
        <trans-unit id="770ded5804f61f67694592c9314c6c39ad348096" translate="yes" xml:space="preserve">
          <source>This function removes one or more code units from the end of a string, and returns the decoded code point which those code units represent.</source>
          <target state="translated">この関数は、文字列の末尾から1つ以上のコード単位を削除し、それらのコード単位が表すデコードされたコードポイントを返します。</target>
        </trans-unit>
        <trans-unit id="63d27ce6c5e48781869a5f906f514c111b2ab498" translate="yes" xml:space="preserve">
          <source>This function removes one or more code units from the start of a string, and returns the decoded code point which those code units represent.</source>
          <target state="translated">この関数は、文字列の先頭から1つ以上のコード単位を削除し、それらのコード単位が表すデコードされたコードポイントを返します。</target>
        </trans-unit>
        <trans-unit id="991bbd196cea9f8531404b722484d52c7268693c" translate="yes" xml:space="preserve">
          <source>This function removes one or more ubytes from the start of an array, and returns the decoded code point which those ubytes represent.</source>
          <target state="translated">この関数は,配列の先頭から1つ以上のバイトを削除し,それらのバイトが表すデコードされたコードポイントを返します.</target>
        </trans-unit>
        <trans-unit id="bd8d3ae1218b20b89d6f5e7ab875d1f322ea2c00" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;&quot;cmd.exe&quot;&lt;/code&gt; on Windows, &lt;code&gt;&quot;/bin/sh&quot;&lt;/code&gt; on POSIX, and &lt;code&gt;&quot;/system/bin/sh&quot;&lt;/code&gt; on Android.</source>
          <target state="translated">この関数が返す &lt;code&gt;&quot;cmd.exe&quot;&lt;/code&gt; Windows上で、 &lt;code&gt;&quot;/bin/sh&quot;&lt;/code&gt; POSIX上、および &lt;code&gt;&quot;/system/bin/sh&quot;&lt;/code&gt; Android上。</target>
        </trans-unit>
        <trans-unit id="cfc5056dabba79a946af25fc1dd8feac3fe04895" translate="yes" xml:space="preserve">
          <source>This function returns a pointer to a static copy of the version info struct. See above.</source>
          <target state="translated">この関数は、バージョン情報構造体の静的コピーへのポインタを返します。上記を参照してください。</target>
        </trans-unit>
        <trans-unit id="bb8f6db61ab479424f86bd4d40e2eb70c3733a62" translate="yes" xml:space="preserve">
          <source>This function returns a thread unique &lt;code&gt;Logger&lt;/code&gt;, that by default propergates all data logged to it to the &lt;code&gt;sharedLog&lt;/code&gt;.</source>
          <target state="translated">この関数は、スレッドユニーク返し &lt;code&gt;Logger&lt;/code&gt; デフォルトpropergatesことにより、すべてのデータがにそれにログインしたことを、 &lt;code&gt;sharedLog&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="85a54448d469e795c947752c78a6d4cb2de70c6f" translate="yes" xml:space="preserve">
          <source>This function searches with policy &lt;code&gt;sp&lt;/code&gt; to find the largest right subrange on which &lt;code&gt;pred(value, x)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all &lt;code&gt;x&lt;/code&gt; (e.g., if &lt;code&gt;pred&lt;/code&gt; is &quot;less than&quot;, returns the portion of the range with elements strictly greater than &lt;code&gt;value&lt;/code&gt;). The search schedule and its complexity are documented in &lt;a href=&quot;#SearchPolicy&quot;&gt;&lt;code&gt;SearchPolicy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、ポリシー &lt;code&gt;sp&lt;/code&gt; を使用して検索し、すべての &lt;code&gt;x&lt;/code&gt; &lt;code&gt;pred(value, x)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; である最大の右部分範囲を見つけます（たとえば、 &lt;code&gt;pred&lt;/code&gt; が「より小さい」の場合、 &lt;code&gt;value&lt;/code&gt; よりも厳密に大きい要素を持つ範囲の部分を返します）。検索スケジュールとその複雑さは&lt;a href=&quot;#SearchPolicy&quot;&gt; &lt;code&gt;SearchPolicy&lt;/code&gt; に&lt;/a&gt;文書化されています。</target>
        </trans-unit>
        <trans-unit id="86863ccd0cc5913a3769149726c682b13dc136f9" translate="yes" xml:space="preserve">
          <source>This function sets an association in the multi handle between the given socket and a private pointer of the application. This is (only) useful for curl_multi_socket uses.</source>
          <target state="translated">この関数は、与えられたソケットとアプリケーションのプライベートポインタとの間のマルチハンドルの関連付けを設定します。これは、(curl_multi_socket を使用する場合にのみ)有用です。</target>
        </trans-unit>
        <trans-unit id="45ebc1498e7faf85df00e384f08e7ba59324aaf5" translate="yes" xml:space="preserve">
          <source>This function should be used for expensive functions, as waiting on a condition variable introduces latency, but avoids wasted CPU cycles.</source>
          <target state="translated">条件変数の待ち時間はレイテンシを発生させますが、CPUサイクルの無駄を避けることができるので、この関数は高価な関数に使用するべきです。</target>
        </trans-unit>
        <trans-unit id="1e6634f9a998d963ab6d1c10d0d15ad19ccda248" translate="yes" xml:space="preserve">
          <source>This function should be used when you expect the result of the &lt;code&gt;Task&lt;/code&gt; to be available on a timescale shorter than that of an OS context switch.</source>
          <target state="translated">この関数は、 &lt;code&gt;Task&lt;/code&gt; の結果がOSコンテキストスイッチの結果よりも短いタイムスケールで利用できると予想される場合に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="84d0dda7f69c92e937d2c85cb930b35b5906bc64" translate="yes" xml:space="preserve">
          <source>This function simply returns the &lt;code&gt;Rebindable&lt;/code&gt; object passed in. It's useful in generic programming cases when a given object may be either a regular &lt;code&gt;class&lt;/code&gt; or a &lt;code&gt;Rebindable&lt;/code&gt;.</source>
          <target state="translated">この関数は、渡された &lt;code&gt;Rebindable&lt;/code&gt; オブジェクトを返すだけです。これは、特定のオブジェクトが通常の &lt;code&gt;class&lt;/code&gt; または &lt;code&gt;Rebindable&lt;/code&gt; のいずれかである可能性がある一般的なプログラミングの場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="75bbfb153afd3973808d9088100797f6903e565d" translate="yes" xml:space="preserve">
          <source>This function supercedes &lt;a href=&quot;#toUCSindex&quot;&gt;&lt;code&gt;toUCSindex&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は&lt;a href=&quot;#toUCSindex&quot;&gt; &lt;code&gt;toUCSindex&lt;/code&gt; に優先し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="82566e279c83708bdcc5beef2341e2cb52b9d496" translate="yes" xml:space="preserve">
          <source>This function supersedes &lt;code&gt;std.utf.startsValidDchar()&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;std.utf.startsValidDchar()&lt;/code&gt; に取って代わります。</target>
        </trans-unit>
        <trans-unit id="c8a982375de1de2eaf1b0bfc6ef749e37da8e235" translate="yes" xml:space="preserve">
          <source>This function supersedes std.utf.decode(), however, note that the function codePoints() supersedes it more conveniently.</source>
          <target state="translated">この関数は std.utf.decode()よりも優先されますが、関数 codePoints()の方が便利であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3610464c0d3095b814b50eec2269b0b83ec7dc6a" translate="yes" xml:space="preserve">
          <source>This function supersedes std.utf.decode().</source>
          <target state="translated">この関数は std.utf.decode()に取って代わります。</target>
        </trans-unit>
        <trans-unit id="3ed87f3ac177989d1d591be6e146c6a7ad9b003c" translate="yes" xml:space="preserve">
          <source>This function supersedes std.utf.encode(), however, note that the function codeUnits() supersedes it more conveniently.</source>
          <target state="translated">この関数は std.utf.encode()に取って代わりますが、関数 codeUnits()の方が便利なことに注意してください。</target>
        </trans-unit>
        <trans-unit id="98db0a10ff6e0809060d25a9c9ccbac61cd894c8" translate="yes" xml:space="preserve">
          <source>This function supersedes std.utf.encode().</source>
          <target state="translated">この関数は std.utf.encode()よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="6581afa2c255deba8c9a51b34c12340690fe56e5" translate="yes" xml:space="preserve">
          <source>This function supersedes std.utf.toUTF8(), std.utf.toUTF16() and std.utf.toUTF32() (but note that to!() supersedes it more conveniently).</source>
          <target state="translated">この関数は、 std.utf.toUTF8()、 std.utf.toUTF16()および std.utf.toUTF32()に取って代わるものです (ただし、to!</target>
        </trans-unit>
        <trans-unit id="b48f04fdfd63524d418640a2544c0d752dc1f11b" translate="yes" xml:space="preserve">
          <source>This function supersedes std.utf.toUTFindex().</source>
          <target state="translated">この関数は std.utf.toUTFindex()に取って代わる。</target>
        </trans-unit>
        <trans-unit id="463c192ee5d4e01c6f9684913be662a0a7946d01" translate="yes" xml:space="preserve">
          <source>This function supersedes std.utf.validate(), however note that this function returns a bool indicating whether the input was valid or not, whereas the older function would throw an exception.</source>
          <target state="translated">この関数は std.utf.validate()に取って代わるものですが、この関数は入力が有効かどうかを示す bool を返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b42d760296ed5ca95af88ffb26c20168d2a48b77" translate="yes" xml:space="preserve">
          <source>This function takes a non-scope delegate, meaning it can be used with closures. If you can't allocate a closure due to objects on the stack that have scoped destruction, see &lt;code&gt;scopedTask&lt;/code&gt;, which takes a scope delegate.</source>
          <target state="translated">この関数はスコープではないデリゲートを受け取ります。つまり、クロージャーで使用できます。スコープが破棄されているスタック上のオブジェクトが原因でクロージャーを割り当てることができない場合は、スコープデリゲートを &lt;code&gt;scopedTask&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="df71b7c251663548a0f5121464d05a78978a7d9e" translate="yes" xml:space="preserve">
          <source>This function takes a set of path segments, given as an input range of string elements or as a set of string arguments, and concatenates them with each other. Directory separators are inserted between segments if necessary. If any of the path segments are absolute (as defined by &lt;a href=&quot;#isAbsolute&quot;&gt;&lt;code&gt;isAbsolute&lt;/code&gt;&lt;/a&gt;), the preceding segments will be dropped.</source>
          <target state="translated">この関数は、文字列要素の入力範囲または文字列引数のセットとして指定されたパスセグメントのセットを受け取り、それらを相互に連結します。必要に応じて、ディレクトリ区切り文字がセグメント間に挿入されます。パスセグメントのいずれかが（&lt;a href=&quot;#isAbsolute&quot;&gt; &lt;code&gt;isAbsolute&lt;/code&gt; で&lt;/a&gt;定義されている）絶対パスである場合、先行するセグメントは削除されます。</target>
        </trans-unit>
        <trans-unit id="3df6f1df50a9028bb24157314b57114720f745cc" translate="yes" xml:space="preserve">
          <source>This function template needs be between the compiler and a much older runtime hook that bypassed safety, purity, and throwabilty checks. To prevent breaking existing code, this function template is temporarily declared &lt;code&gt;@trusted pure&lt;/code&gt; until the implementation can be brought up to modern D expectations.</source>
          <target state="translated">この関数テンプレートは、コンパイラーと、安全性、純粋性、およびスローアビリティーのチェックをバイパスしたはるかに古いランタイムフックとの間にある必要があります。既存のコードの破壊を防ぐために、この関数テンプレートは、実装が最新のDの期待に応えられるようになるまで、一時的に &lt;code&gt;@trusted pure&lt;/code&gt; として宣言されます。</target>
        </trans-unit>
        <trans-unit id="c911ca2b3e26ac7f7502675d63ee542618ab2fa0" translate="yes" xml:space="preserve">
          <source>This function template was ported from a much older runtime hook that bypassed safety, purity, and throwabilty checks. To prevent breaking existing code, this function template is temporarily declared &lt;code&gt;@trusted pure nothrow&lt;/code&gt; until the implementation can be brought up to modern D expectations.</source>
          <target state="translated">この関数テンプレートは、安全性、純度、およびスローアビリティのチェックをバイパスした、はるかに古いランタイムフックから移植されました。既存のコードの破壊を防ぐために、この関数テンプレートは、実装が最新のDの期待に応えられるようになるまで、一時的に &lt;code&gt;@trusted pure nothrow&lt;/code&gt; と宣言されます。</target>
        </trans-unit>
        <trans-unit id="9fd88572c57bc63342adb7e4bba717ecc664649b" translate="yes" xml:space="preserve">
          <source>This function template was ported from a much older runtime hook that bypassed safety, purity, and throwabilty checks. To prevent breaking existing code, this function template is temporarily declared &lt;code&gt;@trusted pure&lt;/code&gt; until the implementation can be brought up to modern D expectations.</source>
          <target state="translated">この関数テンプレートは、安全性、純度、およびスローアビリティのチェックをバイパスした、はるかに古いランタイムフックから移植されました。既存のコードの破壊を防ぐために、この関数テンプレートは、実装が最新のDの期待に応えられるようになるまで、一時的に &lt;code&gt;@trusted pure&lt;/code&gt; として宣言されます。</target>
        </trans-unit>
        <trans-unit id="54aa9e4c989c8754e09bfc948cb90d22fd4c28bf" translate="yes" xml:space="preserve">
          <source>This function template was ported from a much older runtime hook that bypassed safety, purity, and throwabilty checks. To prevent breaking existing code, this function template is temporarily declared &lt;code&gt;@trusted&lt;/code&gt; until the implementation can be brought up to modern D expectations.</source>
          <target state="translated">この関数テンプレートは、安全性、純度、およびスローアビリティのチェックをバイパスした、はるかに古いランタイムフックから移植されました。既存のコードの破損を防ぐために、この関数テンプレートは、実装が最新のDの期待に応えられるようになるまで、一時的に &lt;code&gt;@trusted&lt;/code&gt; と宣言されます。</target>
        </trans-unit>
        <trans-unit id="c6faa363e2dc5b5097ffda67002301974586de4b" translate="yes" xml:space="preserve">
          <source>This function transforms &lt;code&gt;decimal&lt;/code&gt; value into a value in the factorial number system stored in &lt;code&gt;fac&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;decimal&lt;/code&gt; 数値を &lt;code&gt;fac&lt;/code&gt; に格納されている階乗数システムの値に変換します。</target>
        </trans-unit>
        <trans-unit id="8756d8490c0c80f8a3d6e17d81badb070e1ac3c5" translate="yes" xml:space="preserve">
          <source>This function uses a search with policy &lt;code&gt;sp&lt;/code&gt; to find the largest left subrange on which &lt;code&gt;pred(x, value)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all &lt;code&gt;x&lt;/code&gt; (e.g., if &lt;code&gt;pred&lt;/code&gt; is &quot;less than&quot;, returns the portion of the range with elements strictly smaller than &lt;code&gt;value&lt;/code&gt;). The search schedule and its complexity are documented in &lt;a href=&quot;#SearchPolicy&quot;&gt;&lt;code&gt;SearchPolicy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、ポリシー &lt;code&gt;sp&lt;/code&gt; での検索を使用して、すべての &lt;code&gt;x&lt;/code&gt; に対して &lt;code&gt;pred(x, value)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; である最大の左部分範囲を見つけます（たとえば、 &lt;code&gt;pred&lt;/code&gt; が「未満」の場合）、値よりも厳密に小さい要素を持つ範囲の部分を返し &lt;code&gt;value&lt;/code&gt; ）。検索スケジュールとその複雑さは&lt;a href=&quot;#SearchPolicy&quot;&gt; &lt;code&gt;SearchPolicy&lt;/code&gt; に&lt;/a&gt;文書化されています。</target>
        </trans-unit>
        <trans-unit id="d4d6e17a7f140767c7776fa94ca98edbcfe8ab26" translate="yes" xml:space="preserve">
          <source>This function will accept an invalidly encoded array as input. If an invalid sequence is found at the start of the string, this function will remove it, and return the value INVALID_SEQUENCE.</source>
          <target state="translated">この関数は、無効にエンコードされた配列を入力として受け付けます。文字列の先頭に無効な配列が見つかった場合、この関数はそれを削除し、INVALID_SEQUENCEという値を返します。</target>
        </trans-unit>
        <trans-unit id="b3cc6b0a88ba3b96758bad3549ef80853faeb94e" translate="yes" xml:space="preserve">
          <source>This function will accept an invalidly encoded string as input. If an invalid sequence is found at the start of the string, this function will remove it, and return the value INVALID_SEQUENCE.</source>
          <target state="translated">この関数は、無効にエンコードされた文字列を入力として受け入れます。文字列の先頭に無効なシーケンスが見つかった場合、この関数はそれを削除し、INVALID_SEQUENCEという値を返します。</target>
        </trans-unit>
        <trans-unit id="b4c790e3c00edf06c3c523e9a96acaa7028222ba" translate="yes" xml:space="preserve">
          <source>This function will also strip &lt;code&gt;\n\r&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;\n\r&lt;/code&gt; も削除します。</target>
        </trans-unit>
        <trans-unit id="e2b84c3cd64925b3bc63cc6da8970f088bb9f6ed" translate="yes" xml:space="preserve">
          <source>This function will be called when an exception is constructed. The user-supplied trace handler will be called if one has been supplied, otherwise no trace will be generated.</source>
          <target state="translated">この関数は、例外が構築されたときに呼び出されます。ユーザが提供したトレースハンドラが提供されている場合は呼び出され、そうでない場合はトレースは生成されません。</target>
        </trans-unit>
        <trans-unit id="5d78c169d84f9e0fc354575058eb3e604cfbfdad" translate="yes" xml:space="preserve">
          <source>This function will be called with elements of &lt;code&gt;inputRange&lt;/code&gt; progressively as iteration proceeds.</source>
          <target state="translated">この関数は、反復が進むにつれて、 &lt;code&gt;inputRange&lt;/code&gt; の要素を使用して段階的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="68ba6b0b259ab19a35f9197082fe2ab6d70f5d70" translate="yes" xml:space="preserve">
          <source>This function will generate a module called &lt;code&gt;__entrypoint&lt;/code&gt;, and set the globals &lt;code&gt;entrypoint&lt;/code&gt; and &lt;code&gt;rootHasMain&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;__entrypoint&lt;/code&gt; と呼ばれるモジュールを生成し、グローバル &lt;code&gt;entrypoint&lt;/code&gt; と &lt;code&gt;rootHasMain&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="dc2b9580fcf2b39177541158722d4ae408a87a59" translate="yes" xml:space="preserve">
          <source>This function works by splitting the range to be reduced into work units, which are slices to be reduced in parallel. Once the results from all work units are computed, a final serial reduction is performed on these results to compute the final answer. Therefore, care must be taken to choose the seed value appropriately.</source>
          <target state="translated">この関数は、削減する範囲を作業単位に分割することで動作します。すべての作業単位からの結果が計算されると、最終的な答えを計算するために、これらの結果に対して最終的な連続削減が実行されます。したがって、シード値を適切に選択するように注意しなければなりません。</target>
        </trans-unit>
        <trans-unit id="85b846fd97be25d80f095623caef21705cf01c55" translate="yes" xml:space="preserve">
          <source>This function writes the passed text and &lt;code&gt;Option&lt;/code&gt; into an output range in the manner described in the documentation of function &lt;code&gt;defaultGetoptPrinter&lt;/code&gt;, unless the style option is used.</source>
          <target state="translated">この関数は、styleオプションが使用されていない限り、関数 &lt;code&gt;defaultGetoptPrinter&lt;/code&gt; のドキュメントに記載されている方法で、渡されたテキストと &lt;code&gt;Option&lt;/code&gt; を出力範囲に書き込みます。</target>
        </trans-unit>
        <trans-unit id="d3aad905401dc04f581b2c6077d97923bbd2a8dd" translate="yes" xml:space="preserve">
          <source>This function writes the passed text and &lt;code&gt;Option&lt;/code&gt; into an output range in the manner described in the documentation of function &lt;code&gt;defaultGetoptPrinter&lt;/code&gt;.</source>
          <target state="translated">この関数は、関数 &lt;code&gt;defaultGetoptPrinter&lt;/code&gt; のドキュメントで説明されている方法で、渡されたテキストと &lt;code&gt;Option&lt;/code&gt; を出力範囲に書き込みます。</target>
        </trans-unit>
        <trans-unit id="055b5453fa39d56b283008b9edaf05dd119fac56" translate="yes" xml:space="preserve">
          <source>This functions is equivalent to &lt;code&gt;max(lower, min(upper,val))&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;max(lower, min(upper,val))&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="3de8acad7b682bb3660ea91b4edba8b390f1f531" translate="yes" xml:space="preserve">
          <source>This functions is used at runtime to determine if a &lt;code&gt;LogLevel&lt;/code&gt; is active. The same previously defined version statements are used to disable certain levels. Again the version statements are associated with a compile unit and can therefore not disable logging in other compile units. pure bool isLoggingEnabled()(LogLevel ll) @safe nothrow @nogc</source>
          <target state="translated">この関数は、実行時に &lt;code&gt;LogLevel&lt;/code&gt; がアクティブかどうかを判別するために使用されます。以前に定義されたものと同じバージョンステートメントが、特定のレベルを無効にするために使用されます。この場合も、バージョンステートメントはコンパイルユニットに関連付けられているため、他のコンパイルユニットでのロギングを無効にすることはできません。純粋なブールisLoggingEnabled（）（LogLevel ll）@safe nothrow @nogc</target>
        </trans-unit>
        <trans-unit id="9f907426d2ef951648d87f5cd993e54c9a2f733d" translate="yes" xml:space="preserve">
          <source>This functions returns a trace handler, allowing to inspect the current stack trace.</source>
          <target state="translated">この関数は、現在のスタックトレースを検査するためのトレースハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="84eb391f18a28223816cf561bff30465c4000886" translate="yes" xml:space="preserve">
          <source>This gets replaced by the number of local bytes in the local stack frame. It is most handy when the &lt;code&gt;naked&lt;/code&gt; is invoked and a custom stack frame is programmed.</source>
          <target state="translated">これは、ローカルスタックフレームのローカルバイト数に置き換えられます。 &lt;code&gt;naked&lt;/code&gt; が呼び出され、カスタムスタックフレームがプログラムされている場合に最も便利です。</target>
        </trans-unit>
        <trans-unit id="e8e4bebddf13552333bc85ebe7b11a4e7247c831" translate="yes" xml:space="preserve">
          <source>This handle is used to specify the process in OS-specific APIs. On POSIX, this function returns a &lt;code&gt;core.sys.posix.sys.types.pid_t&lt;/code&gt; with the same value as &lt;a href=&quot;#Pid.processID&quot;&gt;&lt;code&gt;Pid.processID&lt;/code&gt;&lt;/a&gt;, while on Windows it returns a &lt;code&gt;core.sys.windows.windows.HANDLE&lt;/code&gt;.</source>
          <target state="translated">このハンドルは、OS固有のAPIでプロセスを指定するために使用されます。POSIXでは、この関数は返し &lt;code&gt;core.sys.posix.sys.types.pid_t&lt;/code&gt; と同じ値を持つ&lt;a href=&quot;#Pid.processID&quot;&gt; &lt;code&gt;Pid.processID&lt;/code&gt; を&lt;/a&gt; Windows上でそれを返しながら、 &lt;code&gt;core.sys.windows.windows.HANDLE&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="33c852a0522cad2c2b4928299e850452d227ef5f" translate="yes" xml:space="preserve">
          <source>This handler overrides any legacy module unit tester set by the moduleUnitTester property.</source>
          <target state="translated">このハンドラは、moduleUnitTester プロパティで設定されたレガシーモジュールのユニットテスターを上書きします。</target>
        </trans-unit>
        <trans-unit id="c35e1bd5e0e6a04521fa5520ade57041fbf6240b" translate="yes" xml:space="preserve">
          <source>This hasher is compatible with the &lt;code&gt;Digest&lt;/code&gt; API:</source>
          <target state="translated">このハッシュは &lt;code&gt;Digest&lt;/code&gt; API と互換性があります。</target>
        </trans-unit>
        <trans-unit id="3993e1a9197061dc1bf704959d048cb51b8578f3" translate="yes" xml:space="preserve">
          <source>This implements a standard critical section.</source>
          <target state="translated">これは、標準のクリティカルセクションを実装しています。</target>
        </trans-unit>
        <trans-unit id="e2f62226ce4de7b0f3cba225bd19bb063907d826" translate="yes" xml:space="preserve">
          <source>This initialization is done before any constructors are called.</source>
          <target state="translated">この初期化は、コンストラクタが呼び出される前に行われます。</target>
        </trans-unit>
        <trans-unit id="2e9f56ef2bea3abd9b78b212cb634ac700d5b66a" translate="yes" xml:space="preserve">
          <source>This instance needs an identifier for name mangling purposes. Create one by taking the template declaration name and adding the type signature for it.</source>
          <target state="translated">このインスタンスは、名前のマングリングのために識別子を必要とします。テンプレート宣言名を取得し、それに型署名を追加することで、識別子を作成します。</target>
        </trans-unit>
        <trans-unit id="912f09d79c05dc09ba32bc17497f7cccd43f92de" translate="yes" xml:space="preserve">
          <source>This is a D version 2 compiler</source>
          <target state="translated">これはDバージョン2のコンパイラ</target>
        </trans-unit>
        <trans-unit id="e5c32108063ea48a95f2ccade44899e02af1ccaa" translate="yes" xml:space="preserve">
          <source>This is a best-effort implementation of &lt;code&gt;length&lt;/code&gt; for any kind of range.</source>
          <target state="translated">これは、あらゆる種類の範囲について、 &lt;code&gt;length&lt;/code&gt; ベストエフォートの実装です。</target>
        </trans-unit>
        <trans-unit id="05c823d62e8c286f879871b1e12c6f9007211866" translate="yes" xml:space="preserve">
          <source>This is a compiler magic function - it doesn't behave like regular D functions.</source>
          <target state="translated">これはコンパイラのマジック関数で、通常のD関数のようには動作しません。</target>
        </trans-unit>
        <trans-unit id="b09964b15b26c39a9ce61274e2f775777d6323e9" translate="yes" xml:space="preserve">
          <source>This is a convenience alias for &lt;a href=&quot;std_digest#digest&quot;&gt;&lt;code&gt;std.digest.digest&lt;/code&gt;&lt;/a&gt; using the CRC32 implementation.</source>
          <target state="translated">これは、CRC32実装を使用した&lt;a href=&quot;std_digest#digest&quot;&gt; &lt;code&gt;std.digest.digest&lt;/code&gt; の&lt;/a&gt;便利なエイリアスです。</target>
        </trans-unit>
        <trans-unit id="512068cf15e63810e132140770d7648100089a8e" translate="yes" xml:space="preserve">
          <source>This is a convenience alias for &lt;a href=&quot;std_digest#digest&quot;&gt;&lt;code&gt;std.digest.digest&lt;/code&gt;&lt;/a&gt; using the CRC64-ECMA implementation.</source>
          <target state="translated">これは、ための便利な別名である&lt;a href=&quot;std_digest#digest&quot;&gt; &lt;code&gt;std.digest.digest&lt;/code&gt; &lt;/a&gt; CRC64-ECMA実装を使用します。</target>
        </trans-unit>
        <trans-unit id="b3d4ec4ec88de63e322958e6b0d979a689b11d53" translate="yes" xml:space="preserve">
          <source>This is a convenience alias for &lt;a href=&quot;std_digest#digest&quot;&gt;&lt;code&gt;std.digest.digest&lt;/code&gt;&lt;/a&gt; using the MD5 implementation.</source>
          <target state="translated">これは、MD5実装を使用する&lt;a href=&quot;std_digest#digest&quot;&gt; &lt;code&gt;std.digest.digest&lt;/code&gt; の&lt;/a&gt;便利なエイリアスです。</target>
        </trans-unit>
        <trans-unit id="bd636dcefd273f520355be9a0afa2783ad66dbef" translate="yes" xml:space="preserve">
          <source>This is a convenience alias for &lt;a href=&quot;std_digest#digest&quot;&gt;&lt;code&gt;std.digest.digest&lt;/code&gt;&lt;/a&gt; using the RIPEMD160 implementation.</source>
          <target state="translated">これは、ための便利な別名である&lt;a href=&quot;std_digest#digest&quot;&gt; &lt;code&gt;std.digest.digest&lt;/code&gt; &lt;/a&gt; RIPEMD160の実装を使用しました。</target>
        </trans-unit>
        <trans-unit id="29b73ef07a42490f2884582abd8be259990a85c2" translate="yes" xml:space="preserve">
          <source>This is a convenience alias for &lt;a href=&quot;std_digest_digest#digest&quot;&gt;&lt;code&gt;std.digest.digest.digest&lt;/code&gt;&lt;/a&gt; using the CRC64-ISO implementation.</source>
          <target state="translated">これは、ための便利な別名である&lt;a href=&quot;std_digest_digest#digest&quot;&gt; &lt;code&gt;std.digest.digest.digest&lt;/code&gt; &lt;/a&gt; CRC64-ISO実装を使用します。</target>
        </trans-unit>
        <trans-unit id="69463742eb10b8885c85b63b60e71b70ccfdbb6a" translate="yes" xml:space="preserve">
          <source>This is a convenience function similar to &lt;a href=&quot;#digest&quot;&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/a&gt;, but it returns the string representation of the hash. Every digest passing the &lt;a href=&quot;#isDigest&quot;&gt;&lt;code&gt;isDigest&lt;/code&gt;&lt;/a&gt; test can be used with this function.</source>
          <target state="translated">これは&lt;a href=&quot;#digest&quot;&gt; &lt;code&gt;digest&lt;/code&gt; &lt;/a&gt;に似た便利な関数ですが、ハッシュの文字列表現を返します。&lt;a href=&quot;#isDigest&quot;&gt; &lt;code&gt;isDigest&lt;/code&gt; &lt;/a&gt;テストに合格したすべてのダイジェストは、この関数で使用できます。</target>
        </trans-unit>
        <trans-unit id="d797c320e5f08f4ede0b091329f09c40bcd4c23b" translate="yes" xml:space="preserve">
          <source>This is a convenience function to calculate a hash using the template API. Every digest passing the &lt;a href=&quot;#isDigest&quot;&gt;&lt;code&gt;isDigest&lt;/code&gt;&lt;/a&gt; test can be used with this function.</source>
          <target state="translated">これは、テンプレートAPIを使用してハッシュを計算するための便利な関数です。&lt;a href=&quot;#isDigest&quot;&gt; &lt;code&gt;isDigest&lt;/code&gt; &lt;/a&gt;テストに合格したすべてのダイジェストは、この関数で使用できます。</target>
        </trans-unit>
        <trans-unit id="c5b7feb30ef91eb966259d553831f946792e76d5" translate="yes" xml:space="preserve">
          <source>This is a convenience function to calculate the hash of a value using the OOP API.</source>
          <target state="translated">OOP APIを使って値のハッシュ値を計算する便利な関数です。</target>
        </trans-unit>
        <trans-unit id="3fbe8b98c7fb42d7985a89e6cebbca4b22e50702" translate="yes" xml:space="preserve">
          <source>This is a convenience function which returns an initialized digest, so it's not necessary to call start manually.</source>
          <target state="translated">これは初期化されたダイジェストを返す便利な関数なので、手動でstartを呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="b07fdbfd8e90c114315c0c22212b8f6590899cf6" translate="yes" xml:space="preserve">
          <source>This is a dmd specific setting.</source>
          <target state="translated">これはdmd固有の設定です。</target>
        </trans-unit>
        <trans-unit id="87a04bae60dfddd5f321bbf38e370a4d6f98d8c6" translate="yes" xml:space="preserve">
          <source>This is a full list of Unicode properties accessible through &lt;a href=&quot;#unicode&quot;&gt;&lt;code&gt;unicode&lt;/code&gt;&lt;/a&gt; with specific helpers per category nested within. Consult the &lt;a href=&quot;http://www.unicode.org/cldr/utility/properties.jsp&quot;&gt;CLDR utility&lt;/a&gt; when in doubt about the contents of a particular set.</source>
          <target state="translated">これは、を介してアクセス可能なUnicodeプロパティの完全なリストである&lt;a href=&quot;#unicode&quot;&gt; &lt;code&gt;unicode&lt;/code&gt; &lt;/a&gt;内にネストされたカテゴリごとに特定のヘルパーと。特定のセットの内容について疑問がある場合は、&lt;a href=&quot;http://www.unicode.org/cldr/utility/properties.jsp&quot;&gt;CLDRユーティリティ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3c8f19a42bba7727a8ce8284636a08320c4e65f1" translate="yes" xml:space="preserve">
          <source>This is a general replacement tool that construct a new string by replacing matches of pattern &lt;code&gt;re&lt;/code&gt; in the &lt;code&gt;input&lt;/code&gt;. Unlike the other overload there is no format string instead captures are passed to to a user-defined functor &lt;code&gt;fun&lt;/code&gt; that returns a new string to use as replacement.</source>
          <target state="translated">これは、 &lt;code&gt;input&lt;/code&gt; 内のパターン &lt;code&gt;re&lt;/code&gt; の一致を置き換えることによって新しい文字列を構築する一般的な置き換えツールです。他のオーバーロードとは異なり、フォーマット文字列はありません。代わりに、キャプチャは、置換として使用する新しい文字列を返すユーザー定義のファンクター &lt;code&gt;fun&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="48a52f467fdd89c347f6d4a8f50f81ff656d5562" translate="yes" xml:space="preserve">
          <source>This is a great way to implement simple circular buffers.</source>
          <target state="translated">シンプルな円形バッファを実装するのに最適な方法です。</target>
        </trans-unit>
        <trans-unit id="02adbf08da9a4c46841118c88fd0ba75eb2c489f" translate="yes" xml:space="preserve">
          <source>This is a less strict parser compared to the parser used in the UUID constructor. It enforces the following rules:</source>
          <target state="translated">これは、UUID コンストラクタで使用されるパーサに比べて、より厳格なパーサです。以下のルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="ecac55bd6998bb669ca8527fad92e747f31aecf4" translate="yes" xml:space="preserve">
          <source>This is a low-level messaging API upon which more structured or restrictive APIs may be built. The general idea is that every messageable entity is represented by a common handle type called a Tid, which allows messages to be sent to logical threads that are executing in both the current process and in external processes using the same interface. This is an important aspect of scalability because it allows the components of a program to be spread across available resources with few to no changes to the actual implementation.</source>
          <target state="translated">これは低レベルのメッセージングAPIで、より構造化された、または制限のあるAPIを構築することができます。一般的な考え方は、すべてのメッセージング可能なエンティティが Tid と呼ばれる共通のハンドル型で表現され、現在のプロセスと外部プロセスの両方で同じインターフェイスを使用して実行されている論理スレッドにメッセージを送信することができます。これは、実際の実装にほとんど変更を加えることなく、プログラムのコンポーネントを利用可能なリソースに分散させることができるため、スケーラビリティの重要な側面です。</target>
        </trans-unit>
        <trans-unit id="c99b5a617247c271e1cb66e28acf2ff8127a04e2" translate="yes" xml:space="preserve">
          <source>This is a magic return code for the write callback that, when returned, will signal libcurl to pause receiving on the current transfer.</source>
          <target state="translated">これは、返されると libcurl が現在の転送で受信を一時停止するようにシグナルを送る書き込みコールバックのための魔法のリターンコードです。</target>
        </trans-unit>
        <trans-unit id="8a547f3bc057670af878d63b618663f30d9c888a" translate="yes" xml:space="preserve">
          <source>This is a number that uniquely identifies the process on the operating system, for at least as long as the process is running. Once &lt;a href=&quot;#wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; has been called on the &lt;a href=&quot;#Pid&quot;&gt;&lt;code&gt;Pid&lt;/code&gt;&lt;/a&gt;, this method will return an invalid (negative) process ID.</source>
          <target state="translated">これは、少なくともプロセスが実行されている限り、オペレーティングシステム上のプロセスを一意に識別する番号です。いったん&lt;a href=&quot;#wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;呼び出された&lt;a href=&quot;#Pid&quot;&gt; &lt;code&gt;Pid&lt;/code&gt; &lt;/a&gt;、このメソッドは、無効な（負の）プロセスIDを返します。</target>
        </trans-unit>
        <trans-unit id="2ba143cb17d230b35dd3e77b4d46b42bf59cd667" translate="yes" xml:space="preserve">
          <source>This is a port of &lt;a href=&quot;http://www.boost.org/doc/libs/1_42_0/libs/uuid/uuid.html&quot;&gt; boost.uuid&lt;/a&gt; from the Boost project with some minor additions and API changes for a more D-like API.</source>
          <target state="translated">これは、Boostプロジェクトの&lt;a href=&quot;http://www.boost.org/doc/libs/1_42_0/libs/uuid/uuid.html&quot;&gt;boost.uuidの&lt;/a&gt;ポートであり、いくつかのマイナーな追加と、よりDに似たAPIのためのAPI変更が含まれています。</target>
        </trans-unit>
        <trans-unit id="3639c2b895158186c93cfc3d4a942fd3a8a4bcfc" translate="yes" xml:space="preserve">
          <source>This is a public domain version of qsort.d. All it does is call C's qsort().</source>
          <target state="translated">これは qsort.d のパブリックドメイン版です。</target>
        </trans-unit>
        <trans-unit id="2506c523fc3fb4d236735f105644ec414dfd3b6c" translate="yes" xml:space="preserve">
          <source>This is a return code for the read callback that, when returned, will const signal libcurl to pause sending data on the current transfer.</source>
          <target state="translated">これは、返された場合、現在の転送でデータの送信を一時停止するように libcurl に const シグナルを送る読み取りコールバックのリターンコードです。</target>
        </trans-unit>
        <trans-unit id="a5f3cb2b8bae68d0d790adf6bf0c62982e12ad3f" translate="yes" xml:space="preserve">
          <source>This is a return code for the read callback that, when returned, will signal libcurl to immediately abort the current transfer.</source>
          <target state="translated">これは、返された場合、現在の転送を直ちに中止するように libcurl にシグナルを送る読み取りコールバックのリターンコードです。</target>
        </trans-unit>
        <trans-unit id="0df6a7dff27cb6ce3775bea09f58211a06e0fa4d" translate="yes" xml:space="preserve">
          <source>This is a shell around a back end symbol</source>
          <target state="translated">これは、バックエンドシンボルの周りのシェル</target>
        </trans-unit>
        <trans-unit id="dc048af9db69350bf7d515c9bc813c09c6660d30" translate="yes" xml:space="preserve">
          <source>This is a shell containing a TraitsExp that can be either resolved to a type or to a symbol.</source>
          <target state="translated">これは、型またはシンボルに解決できるTraitsExpを含むシェルです。</target>
        </trans-unit>
        <trans-unit id="5ad2832faed57297a9408dcd8abe79e66f2c28ae" translate="yes" xml:space="preserve">
          <source>This is a simplified declaration of the &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsstring?language=objc&quot;&gt;&lt;code&gt;NSString&lt;/code&gt;&lt;/a&gt; class. The &lt;a href=&quot;https://developer.apple.com/documentation/objectivec/nsobject/1571958-alloc?language=objc&quot;&gt;&lt;code&gt;alloc&lt;/code&gt;&lt;/a&gt; method allocates an instance of the class. The &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsstring/1412128-initwithutf8string?language=objc&quot;&gt;&lt;code&gt;initWithUTF8String:&lt;/code&gt;&lt;/a&gt; method will be used to convert a C string in UTF-8 to an Objective-C string, &lt;code&gt;NSString&lt;/code&gt;. The &lt;a href=&quot;https://developer.apple.com/documentation/objectivec/1418956-nsobject/1571957-release?language=objc&quot;&gt;&lt;code&gt;release&lt;/code&gt;&lt;/a&gt; method is used to release an deallocate the string. Since D doesn't support &lt;a href=&quot;https://developer.apple.com/library/mac/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html&quot;&gt;ARC&lt;/a&gt; it's needed to manually release Objective-C instances.</source>
          <target state="translated">これは、&lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsstring?language=objc&quot;&gt; &lt;code&gt;NSString&lt;/code&gt; &lt;/a&gt;クラスの簡略化された宣言です。&lt;a href=&quot;https://developer.apple.com/documentation/objectivec/nsobject/1571958-alloc?language=objc&quot;&gt; &lt;code&gt;alloc&lt;/code&gt; &lt;/a&gt;方法は、クラスのインスタンスを割り当てます。&lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsstring/1412128-initwithutf8string?language=objc&quot;&gt; &lt;code&gt;initWithUTF8String:&lt;/code&gt; &lt;/a&gt;この方法は、Objective-Cの文字列をUTF-8でC文字列を変換するために使用される &lt;code&gt;NSString&lt;/code&gt; 。&lt;a href=&quot;https://developer.apple.com/documentation/objectivec/1418956-nsobject/1571957-release?language=objc&quot;&gt; &lt;code&gt;release&lt;/code&gt; &lt;/a&gt;メソッドは、割り当て解除に文字列を解放するために使用されます。Dは&lt;a href=&quot;https://developer.apple.com/library/mac/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html&quot;&gt;ARCを&lt;/a&gt;サポートしていないため、Objective-Cインスタンスを手動でリリースする必要があります。</target>
        </trans-unit>
        <trans-unit id="fad6a93ca5b80ae2dfec457b0ce1d7b04f69cf3b" translate="yes" xml:space="preserve">
          <source>This is a special compiler recognized attribute, it has a few requirements, which all will be enforced by the compiler:</source>
          <target state="translated">これはコンパイラに認められた特別な属性で、いくつかの要件を持っています。</target>
        </trans-unit>
        <trans-unit id="9b885a66018a314237093b8fb5cb095cdbb3b8c2" translate="yes" xml:space="preserve">
          <source>This is a special compiler recognized attribute, it has several requirements, which all will be enforced by the compiler:</source>
          <target state="translated">これはコンパイラに認められた特別な属性で、いくつかの要件を持っています。</target>
        </trans-unit>
        <trans-unit id="ae39fd6f553ae7cbf7dc06cf4c01bdb3470af4ef" translate="yes" xml:space="preserve">
          <source>This is a speed optimization, a good guess at the maximum size of the resulting buffer will improve performance by eliminating reallocations and copying.</source>
          <target state="translated">これは速度の最適化であり、結果として得られるバッファの最大サイズをうまく推測することで、再割り当てやコピーを排除してパフォーマンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="35d1d3de86a677e769796c4bc667e5033e36cade" translate="yes" xml:space="preserve">
          <source>This is a strict parser. It only accepts the pattern above. It doesn't support any leading or trailing characters. It only accepts characters used for hex numbers and the string must have hyphens exactly like above.</source>
          <target state="translated">これは厳密なパーサーです。上記のパターンのみを受け付けます。先頭または末尾の文字はサポートしていません。16進数に使用される文字のみを受け付け、文字列には上記のようにハイフンを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="5ae5fdcefc9284313dd41ba3b8a3e36e9a73a45c" translate="yes" xml:space="preserve">
          <source>This is a subclass of ElementParser. Most of the useful functions are documented there.</source>
          <target state="translated">これはElementParserのサブクラスです。便利な関数のほとんどはここで説明されています。</target>
        </trans-unit>
        <trans-unit id="f2e662785d1d5993dfe200ed0cd32d243953366c" translate="yes" xml:space="preserve">
          <source>This is a submodule of &lt;a href=&quot;std_algorithm&quot;&gt;&lt;code&gt;std.algorithm&lt;/code&gt;&lt;/a&gt;. It contains generic algorithms that implement set operations.</source>
          <target state="translated">これは&lt;a href=&quot;std_algorithm&quot;&gt; &lt;code&gt;std.algorithm&lt;/code&gt; の&lt;/a&gt;サブモジュールです。これには、集合演算を実装する一般的なアルゴリズムが含まれています。</target>
        </trans-unit>
        <trans-unit id="e1b41f495bf4c79d2ddcbf0100179c8d893eed73" translate="yes" xml:space="preserve">
          <source>This is a submodule of &lt;a href=&quot;std_algorithm&quot;&gt;&lt;code&gt;std.algorithm&lt;/code&gt;&lt;/a&gt;. It contains generic comparison algorithms.</source>
          <target state="translated">これは&lt;a href=&quot;std_algorithm&quot;&gt; &lt;code&gt;std.algorithm&lt;/code&gt; の&lt;/a&gt;サブモジュールです。一般的な比較アルゴリズムが含まれています。</target>
        </trans-unit>
        <trans-unit id="7b5ed9bdf36ce4d3eb2f4fa31e710341bfe1a347" translate="yes" xml:space="preserve">
          <source>This is a submodule of &lt;a href=&quot;std_algorithm&quot;&gt;&lt;code&gt;std.algorithm&lt;/code&gt;&lt;/a&gt;. It contains generic iteration algorithms.</source>
          <target state="translated">これは&lt;a href=&quot;std_algorithm&quot;&gt; &lt;code&gt;std.algorithm&lt;/code&gt; の&lt;/a&gt;サブモジュールです。一般的な反復アルゴリズムが含まれています。</target>
        </trans-unit>
        <trans-unit id="a1ca49a48babc2bf7a88dc2f9edada29da0b74aa" translate="yes" xml:space="preserve">
          <source>This is a submodule of &lt;a href=&quot;std_algorithm&quot;&gt;&lt;code&gt;std.algorithm&lt;/code&gt;&lt;/a&gt;. It contains generic mutation algorithms.</source>
          <target state="translated">これは&lt;a href=&quot;std_algorithm&quot;&gt; &lt;code&gt;std.algorithm&lt;/code&gt; の&lt;/a&gt;サブモジュールです。一般的な突然変異アルゴリズムが含まれています。</target>
        </trans-unit>
        <trans-unit id="9256c3179b28cb98f2ccafcbf01fa1114c7ffabd" translate="yes" xml:space="preserve">
          <source>This is a submodule of &lt;a href=&quot;std_algorithm&quot;&gt;&lt;code&gt;std.algorithm&lt;/code&gt;&lt;/a&gt;. It contains generic searching algorithms.</source>
          <target state="translated">これは&lt;a href=&quot;std_algorithm&quot;&gt; &lt;code&gt;std.algorithm&lt;/code&gt; の&lt;/a&gt;サブモジュールです。一般的な検索アルゴリズムが含まれています。</target>
        </trans-unit>
        <trans-unit id="d621cd2fb3907321fd3307426e0197b19ae1cd6c" translate="yes" xml:space="preserve">
          <source>This is a submodule of &lt;a href=&quot;std_algorithm&quot;&gt;&lt;code&gt;std.algorithm&lt;/code&gt;&lt;/a&gt;. It contains generic sorting algorithms.</source>
          <target state="translated">これは&lt;a href=&quot;std_algorithm&quot;&gt; &lt;code&gt;std.algorithm&lt;/code&gt; の&lt;/a&gt;サブモジュールです。これには、一般的な並べ替えアルゴリズムが含まれています。</target>
        </trans-unit>
        <trans-unit id="1a6a835a510bef24f9a4d09ad766e6b4789c5a10" translate="yes" xml:space="preserve">
          <source>This is accessible via the ClassData, but since it is frequently needed directly (like for rtti comparisons), make it directly accessible.</source>
          <target state="translated">これはClassDataからアクセスできますが、直接必要になることが多いので(rttiの比較など)、直接アクセスできるようにしてください。</target>
        </trans-unit>
        <trans-unit id="7c814acc56ca032045c3a40a509dc625dc91c4d4" translate="yes" xml:space="preserve">
          <source>This is actually what &lt;a href=&quot;#byLine&quot;&gt;&lt;code&gt;byLine&lt;/code&gt;&lt;/a&gt; does internally, so its usage is recommended if you want to process a complete file.</source>
          <target state="translated">これは実際には&lt;a href=&quot;#byLine&quot;&gt; &lt;code&gt;byLine&lt;/code&gt; &lt;/a&gt;が内部で行うことなので、完全なファイルを処理する場合はその使用をお勧めします。</target>
        </trans-unit>
        <trans-unit id="90cce6858fc6a3ac3c07d99643429177baeef347" translate="yes" xml:space="preserve">
          <source>This is also known as</source>
          <target state="translated">としても知られています。</target>
        </trans-unit>
        <trans-unit id="43e213b7894a106692ed41475e921810e2f2ef96" translate="yes" xml:space="preserve">
          <source>This is an</source>
          <target state="translated">これは</target>
        </trans-unit>
        <trans-unit id="d562af56401d0e00dc584df85564d362806b263a" translate="yes" xml:space="preserve">
          <source>This is an advanced type manipulation necessary e.g. for replacing the placeholder type &lt;code&gt;This&lt;/code&gt; in &lt;a href=&quot;std_variant#Algebraic&quot;&gt;&lt;code&gt;std.variant.Algebraic&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、プレースホルダのタイプの交換のための高度なタイプの操作に必要な例である &lt;code&gt;This&lt;/code&gt; に&lt;a href=&quot;std_variant#Algebraic&quot;&gt; &lt;code&gt;std.variant.Algebraic&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3325f1bf2305c77a1849c9f8a9c2843663095726" translate="yes" xml:space="preserve">
          <source>This is an alias for &lt;code&gt;&lt;a href=&quot;std_digest#WrapperDigest&quot;&gt;std.digest.WrapperDigest&lt;/a&gt;!CRC32&lt;/code&gt;, see there for more information.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;std_digest#WrapperDigest&quot;&gt;std.digest.WrapperDigest&lt;/a&gt;!CRC32&lt;/code&gt; のエイリアスです。詳細については、そこを参照してください。</target>
        </trans-unit>
        <trans-unit id="991e65c6e6968487ccb7bb69ca7320b94e4ca93f" translate="yes" xml:space="preserve">
          <source>This is an alias for &lt;code&gt;&lt;a href=&quot;std_digest#WrapperDigest&quot;&gt;std.digest.WrapperDigest&lt;/a&gt;!MD5&lt;/code&gt;, see there for more information.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;std_digest#WrapperDigest&quot;&gt;std.digest.WrapperDigest&lt;/a&gt;!MD5&lt;/code&gt; のエイリアスです。詳細については、そこを参照してください。</target>
        </trans-unit>
        <trans-unit id="b4ce5ff6ecd05c751170313d80d40096c853a878" translate="yes" xml:space="preserve">
          <source>This is an alias for &lt;code&gt;&lt;a href=&quot;std_digest#WrapperDigest&quot;&gt;std.digest.WrapperDigest&lt;/a&gt;!RIPEMD160&lt;/code&gt;, see there for more information.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;std_digest#WrapperDigest&quot;&gt;std.digest.WrapperDigest&lt;/a&gt;!RIPEMD160&lt;/code&gt; のエイリアスです。詳細については、そこを参照してください。</target>
        </trans-unit>
        <trans-unit id="d9558990a88eaad4533f53210d24e334b473686d" translate="yes" xml:space="preserve">
          <source>This is an alias for &lt;code&gt;&lt;a href=&quot;std_digest#WrapperDigest&quot;&gt;std.digest.WrapperDigest&lt;/a&gt;!SHA1&lt;/code&gt;, see there for more information.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;std_digest#WrapperDigest&quot;&gt;std.digest.WrapperDigest&lt;/a&gt;!SHA1&lt;/code&gt; のエイリアスです。詳細については、そこを参照してください。</target>
        </trans-unit>
        <trans-unit id="57c783fecd68424a831ee827a2afa820a6eb2e72" translate="yes" xml:space="preserve">
          <source>This is an alias for &lt;code&gt;&lt;a href=&quot;std_digest_digest#WrapperDigest&quot;&gt;std.digest.digest.WrapperDigest&lt;/a&gt;!CRC64ECMA&lt;/code&gt;, see there for more information.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;std_digest_digest#WrapperDigest&quot;&gt;std.digest.digest.WrapperDigest&lt;/a&gt;!CRC64ECMA&lt;/code&gt; のエイリアスです。詳細については、そこを参照してください。</target>
        </trans-unit>
        <trans-unit id="c0181596da443b5ba169ba47d5e2dd20f026611e" translate="yes" xml:space="preserve">
          <source>This is an alias for &lt;code&gt;&lt;a href=&quot;std_digest_digest#WrapperDigest&quot;&gt;std.digest.digest.WrapperDigest&lt;/a&gt;!CRC64ISO&lt;/code&gt;, see there for more information.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;std_digest_digest#WrapperDigest&quot;&gt;std.digest.digest.WrapperDigest&lt;/a&gt;!CRC64ISO&lt;/code&gt; のエイリアスです。詳細については、そこを参照してください。</target>
        </trans-unit>
        <trans-unit id="7d3c5e22d15f79f627e001b482acc6838518ff93" translate="yes" xml:space="preserve">
          <source>This is an example Scheduler that mirrors the default scheduling behavior of creating one kernel thread per call to spawn. It is fully functional and may be instantiated and used, but is not a necessary part of the default functioning of this module.</source>
          <target state="translated">これはデフォルトのスケジューラの動作をミラーするスケジューラの例で、spawn の呼び出しごとに 1 つのカーネルスレッドを生成します。これは完全に機能しており、インスタンスを作成して使用することができますが、このモジュールのデフォルトの機能の一部として必要なものではありません。</target>
        </trans-unit>
        <trans-unit id="6ff549d63c3ff212a46a7da946a73dffb4f080d9" translate="yes" xml:space="preserve">
          <source>This is an example scheduler that creates a new Fiber per call to spawn and multiplexes the execution of all fibers within the main thread.</source>
          <target state="translated">これは、スポーンの呼び出しごとに新しいファイバーを作成し、メインスレッド内のすべてのファイバーの実行を多重化するスケジューラの例です。</target>
        </trans-unit>
        <trans-unit id="9b07c47f7921db818ae08b3487fd61d30861252d" translate="yes" xml:space="preserve">
          <source>This is an infinite range, so it is never empty.</source>
          <target state="translated">これは無限の範囲なので、決して空になることはありません。</target>
        </trans-unit>
        <trans-unit id="12f3a1e35d9244804e6a51ca5a2db8f208c379f7" translate="yes" xml:space="preserve">
          <source>This is an interface to the libcurl library.</source>
          <target state="translated">これは libcurl ライブラリへのインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="0ecf41c17b4ddd40e8365245329f080912127dd4" translate="yes" xml:space="preserve">
          <source>This is an overload of &lt;code&gt;translate&lt;/code&gt; which takes an existing buffer to write the contents to.</source>
          <target state="translated">これは、コンテンツの書き込みに既存のバッファを使用する &lt;code&gt;translate&lt;/code&gt; オーバーロードです。</target>
        </trans-unit>
        <trans-unit id="1ecb65db27289cae51fc17448747e90751d9751d" translate="yes" xml:space="preserve">
          <source>This is by design. During construction the &lt;code&gt;Variant&lt;/code&gt; needs static type information about the type being held, so as to store a pointer to function for fast retrieval.</source>
          <target state="translated">これは仕様によるものです。構築中、 &lt;code&gt;Variant&lt;/code&gt; は、保持されている型に関する静的な型情報を必要とします。これにより、高速な検索のために関数へのポインターを格納します。</target>
        </trans-unit>
        <trans-unit id="60ab54d413619310ad332327e4504502f2306f23" translate="yes" xml:space="preserve">
          <source>This is called by TypeInfo.compare(p1, p2). If the struct does not support const objects comparison, it will throw &quot;not implemented&quot; Error in runtime.</source>
          <target state="translated">これは TypeInfo.compare(p1,p2)によって呼び出されます。構造体が const オブジェクトの比較をサポートしていない場合、実行時に &quot;not implemented&quot; エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="c89ac618e64974e5137c2fd8360adb505768057f" translate="yes" xml:space="preserve">
          <source>This is called by TypeInfo.equals(p1, p2). If the struct does not support const objects comparison, it will throw &quot;not implemented&quot; Error in runtime.</source>
          <target state="translated">これは、TypeInfo.equals(p1,p2)によって呼び出されます。構造体が const オブジェクトの比較をサポートしていない場合、実行時に &quot;not implemented&quot; エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="165808d159b6f286bb50d6195dc7d22725a89812" translate="yes" xml:space="preserve">
          <source>This is called for a delete statement where the value being deleted is a pointer to a struct with a destructor but doesn't have an overloaded delete operator.</source>
          <target state="translated">これは、削除される値がデストラクタを持つ構造体へのポインタであり、オーバーロードされた削除演算子を持たない場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="15901451d4d385b73b656d146d0381611e4eadbc" translate="yes" xml:space="preserve">
          <source>This is collectively called an</source>
          <target state="translated">これを総称して</target>
        </trans-unit>
        <trans-unit id="d0a5f292f669550cd589beb4131f8032cf765ed1" translate="yes" xml:space="preserve">
          <source>This is defined to be in exactly the reverse order of static construction. Static destructors for individual modules will only be run if the corresponding static constructor successfully completed.</source>
          <target state="translated">これは、静的なコンストラクタと全く逆の順序で実行されるように定義されています。個々のモジュールの静的デストラクタは、対応する静的コンストラクタが正常に完了した場合にのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="252a57647acdf0a645523b6daf74e75444387572" translate="yes" xml:space="preserve">
          <source>This is designed for efficient memory reuse with some value-semantics structs, eg. &lt;a href=&quot;https://dlang.org/phobos/std_bigint.html#BigInt&quot;&gt;&lt;code&gt;std.bigint.BigInt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、いくつかの値セマンティクス構造体（例：&lt;a href=&quot;https://dlang.org/phobos/std_bigint.html#BigInt&quot;&gt; &lt;code&gt;std.bigint.BigInt&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="06ae0b36fee3b8fd0ea0e39cba211a57066e0aad" translate="yes" xml:space="preserve">
          <source>This is done by matching the C compiler's data types, layouts, and function call/return sequences.</source>
          <target state="translated">これは、C コンパイラのデータ型、レイアウト、関数の呼び出し/返しのシーケンスをマッチングさせることで行われます。</target>
        </trans-unit>
        <trans-unit id="11029a896ea23a30143fb56e21fe3c178f1a4a41" translate="yes" xml:space="preserve">
          <source>This is especially useful for adding/removing attributes to/from types in generic code, where the actual type name cannot be spelt out.</source>
          <target state="translated">これは特に、実際の型名がスペルアウトできないような汎用コードの型に属性を追加したり、型から削除したりするのに便利です。</target>
        </trans-unit>
        <trans-unit id="b13063fd35605a68f66f22b807caf15b21927ce2" translate="yes" xml:space="preserve">
          <source>This is especially useful when used with inheritance. For example, you might want to implement a final base method which returns a derived class type. Typically you would return a base type, but this won't allow you to call or access derived properties of the type:</source>
          <target state="translated">これは、継承と一緒に使用する場合に特に便利です。例えば、派生クラスの型を返す最終的なベースメソッドを実装したいとします。通常はベース型を返しますが、これではその型の派生プロパティを呼び出したりアクセスしたりすることはできません。</target>
        </trans-unit>
        <trans-unit id="33a5219de6733b72248cb459ae3c108de0b27b6d" translate="yes" xml:space="preserve">
          <source>This is for cases where you need a value representing the OS at runtime. If you're doing something which should compile differently on different OSes, then please use &lt;code&gt;version (Windows)&lt;/code&gt;, &lt;code&gt;version (linux)&lt;/code&gt;, etc.</source>
          <target state="translated">これは、実行時にOSを表す値が必要な場合です。異なるOSで異なるコンパイルが必要なことをしている場合は、 &lt;code&gt;version (Windows)&lt;/code&gt; 、 &lt;code&gt;version (linux)&lt;/code&gt; などを使用してください。</target>
        </trans-unit>
        <trans-unit id="9085623d5748a41a60ced02ac9ea7374a5eb5654" translate="yes" xml:space="preserve">
          <source>This is generally fine, and by its very nature, converting from system ticks to any type of seconds (hnsecs, nsecs, etc.) will introduce rounding errors, but if code needs to avoid any of the small rounding errors introduced by conversion, then it needs to use MonoTime's &lt;code&gt;ticks&lt;/code&gt; property and keep all calculations in ticks rather than using &lt;a href=&quot;#Duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは通常は問題なく、システムのティックから任意のタイプの秒数（hnsecs、nsecsなど）に変換すると丸めエラーが発生しますが、コードで変換によって生じる小さな丸めエラーを回避する必要がある場合は、それはMonoTimeの使用する必要 &lt;code&gt;ticks&lt;/code&gt; プロパティをむしろ使用するよりティックすべての計算を保つ&lt;a href=&quot;#Duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="88fe60e9205a837e1c893e74b0d472fd048224ed" translate="yes" xml:space="preserve">
          <source>This is generally the fastest method to convert a floating-point number to an integer. Note that the results from this function depend on the rounding mode, if the fractional part of x is exactly 0.5. If using the default rounding mode (ties round to even integers) lrint(4.5) == 4, lrint(5.5)==6.</source>
          <target state="translated">これは一般的に浮動小数点数を整数に変換する最速の方法です。この関数の結果は丸めモードに依存することに注意してください。デフォルトの丸めモード(偶数の整数に丸める)を使用している場合は lrint(4.5)==4,lrint(5.5)==6 となります。</target>
        </trans-unit>
        <trans-unit id="f53ca66b2923ca36935e7ce2bb35685de87690d9" translate="yes" xml:space="preserve">
          <source>This is intended for cases where you need to deal with endianness at runtime. If you're doing something which should compile differently depending on whether you're compiling on a big endian or little endian machine, then please use &lt;code&gt;version (BigEndian)&lt;/code&gt; and &lt;code&gt;version (LittleEndian)&lt;/code&gt;.</source>
          <target state="translated">これは、実行時にエンディアンを処理する必要がある場合を対象としています。ビッグエンディアンマシンでコンパイルするかリトルエンディアンマシンでコンパイルするかによって異なるコンパイルを行う場合は、 &lt;code&gt;version (BigEndian)&lt;/code&gt; と &lt;code&gt;version (LittleEndian)&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="5b3b92fb9499542d848207397387795d022c0de6" translate="yes" xml:space="preserve">
          <source>This is intended to be called at the start of the program to yield all scheduling to the active Scheduler instance. This is necessary for schedulers that explicitly dispatch threads rather than simply relying on the operating system to do so, and so start should always be called within main() to begin normal program execution.</source>
          <target state="translated">これは、プログラムの開始時に呼び出され、すべてのスケジューリングをアクティブなスケジューラのインスタンスに委ねることを目的としています。これは、単にオペレーティングシステムに依存するのではなく、明示的にスレッドをディスパッチするスケジューラに必要です。</target>
        </trans-unit>
        <trans-unit id="168edfe34c09b55f1deed4c37990e3c71a1ca3c1" translate="yes" xml:space="preserve">
          <source>This is more efficient than testing each bit in a sparsely populated bit set. Note that the first bit in the bit set would be bit 0.</source>
          <target state="translated">これは、まばらに配置されたビットセットで各ビットをテストするよりも効率的です。ビットセットの最初のビットはビット 0 であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8fcde002524d5c331c8548b6dca27a95656e7bce" translate="yes" xml:space="preserve">
          <source>This is most handy when the array indices are given by enums:</source>
          <target state="translated">これは、配列のインデックスが enums で与えられている場合に最も便利です。</target>
        </trans-unit>
        <trans-unit id="c31ac80c96aa26f46ec6ee9192e9e74924da45e0" translate="yes" xml:space="preserve">
          <source>This is needed because AssignExp rewrites CommaExp, hence it needs to trigger the deprecation.</source>
          <target state="translated">AssignExpはCommaExpを書き換えるので、これは必要です。</target>
        </trans-unit>
        <trans-unit id="e7738cc186f07169467da57ea636fc910ff8ff41" translate="yes" xml:space="preserve">
          <source>This is not recursive; it will not search for symbols within symbols such as nested structs or unions.</source>
          <target state="translated">これは再帰的ではなく、ネストされた構造体やユニオンなどのシンボル内のシンボルを検索しません。</target>
        </trans-unit>
        <trans-unit id="79018f9004b6204ff482d1449a187f60021b161a" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;code&gt;takeWhile&lt;/code&gt; in other languages.</source>
          <target state="translated">これは、他の言語の &lt;code&gt;takeWhile&lt;/code&gt; に似ています。</target>
        </trans-unit>
        <trans-unit id="da1506be46b53535dcad92fb4d88063b66606cfa" translate="yes" xml:space="preserve">
          <source>This is so we can slice a TypeTuple</source>
          <target state="translated">これは、TypeTupleをスライスするためのものです。</target>
        </trans-unit>
        <trans-unit id="1ea183190e1a8d4a5c65894e3d7aa69b999c8015" translate="yes" xml:space="preserve">
          <source>This is the D way, and is used consistently in the D runtime library and examples.</source>
          <target state="translated">これはDの方法であり、Dのランタイムライブラリとサンプルで一貫して使用されています。</target>
        </trans-unit>
        <trans-unit id="b87f9cb349c407cc69c74e007c81d9397e42baeb" translate="yes" xml:space="preserve">
          <source>This is the FILE * or void * the regular output should be written to.</source>
          <target state="translated">これは、通常の出力が書き込まれるべき FILE*または void*です。</target>
        </trans-unit>
        <trans-unit id="e03f57cd49f977fe295ada31586860acb7b55e0d" translate="yes" xml:space="preserve">
          <source>This is the argument passed to the socket callback</source>
          <target state="translated">これはソケットコールバックに渡される引数です。</target>
        </trans-unit>
        <trans-unit id="be469fab3c85ca74b768977fadfadf33a82814bf" translate="yes" xml:space="preserve">
          <source>This is the argument passed to the timer callback</source>
          <target state="translated">これはタイマーコールバックに渡される引数です。</target>
        </trans-unit>
        <trans-unit id="47d1ba0ce023e632a01bb533e80836298674478a" translate="yes" xml:space="preserve">
          <source>This is the date and time when the full source package was created. The timestamp is not stored in git, as the timestamp is properly set in the tarballs by the maketgz script.</source>
          <target state="translated">これはフルソースパッケージが作成された日時です。タイムスタンプはmaketgzスクリプトでtarballsにきちんと設定されているので、gitには保存されません。</target>
        </trans-unit>
        <trans-unit id="bcb4b4d07cd24ad03f4d73cf2a834d60bf057434" translate="yes" xml:space="preserve">
          <source>This is the global package copyright</source>
          <target state="translated">これがグローバルパッケージの著作権</target>
        </trans-unit>
        <trans-unit id="00bd1884cd8f1f3700cdc8b2d576c08ba85d63de" translate="yes" xml:space="preserve">
          <source>This is the length in bytes of the hash value which is returned by &lt;a href=&quot;#finish&quot;&gt;&lt;code&gt;finish&lt;/code&gt;&lt;/a&gt;. It's also the required size of a buffer passed to &lt;a href=&quot;#finish&quot;&gt;&lt;code&gt;finish&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;#finish&quot;&gt; &lt;code&gt;finish&lt;/code&gt; &lt;/a&gt;によって返されるハッシュ値のバイト単位の長さです。また、&lt;a href=&quot;#finish&quot;&gt; &lt;code&gt;finish&lt;/code&gt; に&lt;/a&gt;渡される必要なバッファのサイズでもあります。</target>
        </trans-unit>
        <trans-unit id="629c1787bf8dac085ebe6f000afbc79766608202" translate="yes" xml:space="preserve">
          <source>This is the most specific allocation policy: the memory being allocated is thread local, has no indirections at all, and will not be reallocated. Examples of types fitting this description: &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;Tuple!(int, long)&lt;/code&gt;, but not &lt;code&gt;Tuple!(int, string)&lt;/code&gt;, which contains an indirection.</source>
          <target state="translated">これは最も具体的な割り当てポリシーです。割り当てられるメモリはスレッドローカルであり、インダイレクションはまったくなく、再割り当てされません。この説明に適合する型の例： &lt;code&gt;int&lt;/code&gt; 、 &lt;code&gt;double&lt;/code&gt; 、 &lt;code&gt;Tuple!(int, long)&lt;/code&gt; 。ただし、間接参照を含む &lt;code&gt;Tuple!(int, string)&lt;/code&gt; は含まれません。</target>
        </trans-unit>
        <trans-unit id="1d53bdfa25144b5efcd12699a648c0b943568037" translate="yes" xml:space="preserve">
          <source>This is the numeric version of the libcurl version number, meant for easier parsing and comparions by programs. The LIBCURL_VERSION_NUM define will always follow this syntax:</source>
          <target state="translated">これは libcurl のバージョン番号の数値バージョンで、プログラムによる解析や比較を容易にするためのものです。LIBCURL_VERSION_NUM 定義は常にこの構文に従います。</target>
        </trans-unit>
        <trans-unit id="f516424ebe0c21d1c77be3938d4dc4c573211582" translate="yes" xml:space="preserve">
          <source>This is the old ctor sorting algorithm that does not find all cycles.</source>
          <target state="translated">これは、すべてのサイクルを見つけることができない古いCTORソートアルゴリズムです。</target>
        </trans-unit>
        <trans-unit id="0b9ca6f8eacc1a78a90edd54d83160d4086f02d3" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;getTimes&lt;/code&gt; except that it also gives you the file creation time - which isn't possible on POSIX systems.</source>
          <target state="translated">これは &lt;code&gt;getTimes&lt;/code&gt; と同じですが、ファイルの作成時間も表示される点が異なります。これはPOSIXシステムでは不可能です。</target>
        </trans-unit>
        <trans-unit id="6e92c9060948634b2691b12a3f666bd6c1016991" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;getTimes&lt;/code&gt; except that it also gives you the file creation time - which isn't possible on Posix systems.</source>
          <target state="translated">これは &lt;code&gt;getTimes&lt;/code&gt; と同じですが、Posixシステムでは不可能なファイル作成時間も提供されます。</target>
        </trans-unit>
        <trans-unit id="d8bc2540cd8cdfdea3a8a5b982374faccf0dd6c1" translate="yes" xml:space="preserve">
          <source>This is the socket callback function pointer</source>
          <target state="translated">これはソケットコールバック関数のポインタです。</target>
        </trans-unit>
        <trans-unit id="61598e1f6a7ec5d30e11d3aead7284998d0c4762" translate="yes" xml:space="preserve">
          <source>This is the timer callback function pointer</source>
          <target state="translated">これはタイマーコールバック関数のポインタ</target>
        </trans-unit>
        <trans-unit id="c718912a86bcbf8011f76f57098fa90f1498a69a" translate="yes" xml:space="preserve">
          <source>This is the version number of the libcurl package from which this header file origins:</source>
          <target state="translated">これは、このヘッダファイルの元となった libcurl パッケージのバージョン番号です。</target>
        </trans-unit>
        <trans-unit id="a98c5dbd73e5200bae0821dc0199531a02a94575" translate="yes" xml:space="preserve">
          <source>This is to support compiling expressions within the context of a function.</source>
          <target state="translated">これは、関数のコンテキスト内で式をコンパイルすることをサポートするためです。</target>
        </trans-unit>
        <trans-unit id="1f258032a2e34908ad83c367bba4f67f9bf0d8fc" translate="yes" xml:space="preserve">
          <source>This is true even if the</source>
          <target state="translated">であっても、これは当てはまります。</target>
        </trans-unit>
        <trans-unit id="915f3d07336b61352341e4f59f1cdec1c322cabb" translate="yes" xml:space="preserve">
          <source>This is useful for:</source>
          <target state="translated">これは便利です。</target>
        </trans-unit>
        <trans-unit id="fcc8360025ee8f837157968edcf3a60c6d678ceb" translate="yes" xml:space="preserve">
          <source>This is useful in cases where the user is expected to type in one of a known set of strings, and the program will helpfully auto-complete the string once sufficient characters have been entered that uniquely identify it.</source>
          <target state="translated">これは、ユーザーが既知の文字列のセットのいずれかを入力することが予想される場合に有用であり、その文字列を一意に識別するのに十分な文字が入力されると、プログラムはその文字列を自動的に補完します。</target>
        </trans-unit>
        <trans-unit id="e4e34d37acfaa90ff5c5cdca9c0444e2392c7b7c" translate="yes" xml:space="preserve">
          <source>This is useful when dealing with memory-mapped I/O (MMIO) where a store can have an effect other than just writing a value, or where sequential loads with no intervening stores can retrieve different values from the same location due to external stores to the location.</source>
          <target state="translated">これは、ストアが値の書き込み以外の効果を持つことができるメモリマップドI/O(MMIO)を扱う場合や、ストアが介在しないシーケンシャルロードが、その場所への外部ストアによって同じ場所から異なる値を取得することができる場合に便利です。</target>
        </trans-unit>
        <trans-unit id="130a13f443489357f62d68edb3556823f7774c09" translate="yes" xml:space="preserve">
          <source>This is usually the default diagnostic reporter.</source>
          <target state="translated">これは通常、デフォルトの診断レポーターです。</target>
        </trans-unit>
        <trans-unit id="6b8bd52c73d65472e04e60bf842e33bc426a473d" translate="yes" xml:space="preserve">
          <source>This is very useful as a template constraint (see examples)</source>
          <target state="translated">これはテンプレート制約として非常に便利です(例を参照してください)。</target>
        </trans-unit>
        <trans-unit id="c9c38689ba29d74fc53f435aaf473866b312b836" translate="yes" xml:space="preserve">
          <source>This is, however, NOT equivalent to POSIX' &lt;code&gt;execv*&lt;/code&gt;. For one thing, the executed program is started as a separate process, with all this entails. Secondly, in a multithreaded program, other threads will continue to do work while the current thread is waiting for the child process to complete.  A better option may sometimes be to terminate the current program immediately after spawning the child process. This is the behaviour exhibited by the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/431x4c1w.aspx&quot;&gt;&lt;code&gt;__exec&lt;/code&gt;&lt;/a&gt; functions in Microsoft's C runtime library, and it is how D's now-deprecated Windows &lt;code&gt;execv*&lt;/code&gt; functions work. Example:</source>
          <target state="translated">ただし、これはPOSIXの &lt;code&gt;execv*&lt;/code&gt; と同等ではありません。一つには、実行されたプログラムは別のプロセスとして開始され、これにはすべてが伴います。次に、マルチスレッドプログラムでは、現在のスレッドが子プロセスの完了を待機している間、他のスレッドが引き続き機能します。子プロセスを生成した直後に現在のプログラムを終了することが、より適切なオプションになる場合があります。これは、MicrosoftのCランタイムライブラリの&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/431x4c1w.aspx&quot;&gt; &lt;code&gt;__exec&lt;/code&gt; &lt;/a&gt;関数が示す動作であり、Dの非推奨のWindows &lt;code&gt;execv*&lt;/code&gt; 関数が機能する方法です。例：</target>
        </trans-unit>
        <trans-unit id="86cd963d96c400e127b41fb5e1c683fd1645332a" translate="yes" xml:space="preserve">
          <source>This level is used to display information about the program.</source>
          <target state="translated">このレベルは、プログラムに関する情報を表示するために使用されます。</target>
        </trans-unit>
        <trans-unit id="7bd1213d23d1dea834726c3d604226e3f0bd7985" translate="yes" xml:space="preserve">
          <source>This library provides a mechanism whereby other modules may add &lt;a href=&quot;#EncodingScheme&quot;&gt;&lt;code&gt;EncodingScheme&lt;/code&gt;&lt;/a&gt; subclasses for any other encoding.</source>
          <target state="translated">このライブラリは、他のモジュールが他の&lt;a href=&quot;#EncodingScheme&quot;&gt; &lt;code&gt;EncodingScheme&lt;/code&gt; &lt;/a&gt;サブクラスを追加できるメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="a3c0ccf8cf8329e21b5b2e67a76439bedab69306" translate="yes" xml:space="preserve">
          <source>This library provides full Level 1 support* according to &lt;a href=&quot;http://unicode.org/reports/tr18/&quot;&gt;UTS 18&lt;/a&gt;. Specifically:</source>
          <target state="translated">このライブラリは、&lt;a href=&quot;http://unicode.org/reports/tr18/&quot;&gt;UTS 18&lt;/a&gt;に従って完全なレベル1サポート*を提供します。具体的には：</target>
        </trans-unit>
        <trans-unit id="4904626a5781bdaca7da93c6ed4103629917781b" translate="yes" xml:space="preserve">
          <source>This library supplies &lt;a href=&quot;#EncodingScheme&quot;&gt;&lt;code&gt;EncodingScheme&lt;/code&gt;&lt;/a&gt; subclasses for ASCII, ISO-8859-1 (also known as LATIN-1), ISO-8859-2 (LATIN-2), WINDOWS-1250, WINDOWS-1251, WINDOWS-1252, UTF-8, and (on little-endian architectures) UTF-16LE and UTF-32LE; or (on big-endian architectures) UTF-16BE and UTF-32BE.</source>
          <target state="translated">このライブラリ用品&lt;a href=&quot;#EncodingScheme&quot;&gt; &lt;code&gt;EncodingScheme&lt;/code&gt; &lt;/a&gt; ASCIIためのサブクラス、ISO-8859-1、ISO-8859-2（ラテン2）、WINDOWS-1250、WINDOWS-1251、WINDOWS-1252、UTF-8、および（ラテン-1としても知られます） （リトルエンディアンアーキテクチャ上）UTF-16LEおよびUTF-32LE; または（ビッグエンディアンアーキテクチャでは）UTF-16BEおよびUTF-32BE。</target>
        </trans-unit>
        <trans-unit id="2ab23006d99b3e64b2eb41b8a2440b3e86ff5b16" translate="yes" xml:space="preserve">
          <source>This library uses a remarkably common ECMAScript syntax flavor with the following extensions:</source>
          <target state="translated">このライブラリは、以下の拡張子を持つ非常に一般的なECMAScript構文のフレーバーを使用しています。</target>
        </trans-unit>
        <trans-unit id="1d7d527b40f488b0b076be50f2a630625a4b71d6" translate="yes" xml:space="preserve">
          <source>This library will supply your function with a new instance of ElementHandler, which may be used to parse inside the element whose start tag was just found, or to identify the tag attributes of the element, etc.  Note that your function will be called for both start tags and empty tags. That is, we make no distinction between &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; and &amp;lt;br/&amp;gt;.</source>
          <target state="translated">このライブラリは、ElementHandlerの新しいインスタンスを関数に提供します。これは、開始タグが見つかったばかりの要素内の解析、または要素のタグ属性の識別などに使用できます。関数は両方に対して呼び出されることに注意してください。開始タグと空のタグ。つまり、&amp;lt;br&amp;gt; &amp;lt;/br&amp;gt;と&amp;lt;br/&amp;gt;を区別しません。</target>
        </trans-unit>
        <trans-unit id="5bcb738af6294ebb159f7ef50c2f4ed098badaa1" translate="yes" xml:space="preserve">
          <source>This macro below was added in 7.16.3 to push users who recompile to use the new curl_multi_socket_action() instead of the old curl_multi_socket()</source>
          <target state="translated">以下のマクロは、古い curl_multi_socket()の代わりに新しい curl_multi_socket_action()を使用するように再コンパイルしたユーザーをプッシュするために 7.16.3 で追加されました。</target>
        </trans-unit>
        <trans-unit id="05317d0fb9b73229e7a4b236f6860aa4bc992df1" translate="yes" xml:space="preserve">
          <source>This makes the intent clearer, because the first statement can easily be misread as the following code:</source>
          <target state="translated">これにより、最初の文が以下のコードと簡単に読み違えられるため、意図がより明確になります。</target>
        </trans-unit>
        <trans-unit id="4d0a27a35faef1bf1f6ffad88638e7121e05700e" translate="yes" xml:space="preserve">
          <source>This means that pointers to elements of an &lt;code&gt;Array&lt;/code&gt; will become dangling as soon as the element is removed from the &lt;code&gt;Array&lt;/code&gt;. On the other hand the memory allocated by an &lt;code&gt;Array&lt;/code&gt; will be scanned by the GC and GC managed objects referenced from an &lt;code&gt;Array&lt;/code&gt; will be kept alive.</source>
          <target state="translated">これは、要素が &lt;code&gt;Array&lt;/code&gt; から削除されるとすぐに、 &lt;code&gt;Array&lt;/code&gt; 要素へのポインタがぶら下がることを意味します。一方、 &lt;code&gt;Array&lt;/code&gt; によって割り当てられたメモリはGCによってスキャンされ、 &lt;code&gt;Array&lt;/code&gt; から参照されるGC管理対象オブジェクトは存続します。</target>
        </trans-unit>
        <trans-unit id="604c9cc6344fc7f1b954e8b21d2a6ca0c3ac4133" translate="yes" xml:space="preserve">
          <source>This member holds all &lt;code&gt;Logger&lt;/code&gt;s stored in the &lt;code&gt;MultiLogger&lt;/code&gt;.</source>
          <target state="translated">このメンバーは、 &lt;code&gt;MultiLogger&lt;/code&gt; に格納されているすべての &lt;code&gt;Logger&lt;/code&gt; を保持します。</target>
        </trans-unit>
        <trans-unit id="2222d90d3dcd66aaa74b009940ed8d8638bced76" translate="yes" xml:space="preserve">
          <source>This memoizes all values of &lt;code&gt;fact&lt;/code&gt; up to the largest argument. To only cache the final result, move &lt;code&gt;memoize&lt;/code&gt; outside the function as shown below.</source>
          <target state="translated">これは、最大の議論までの &lt;code&gt;fact&lt;/code&gt; すべての価値を記憶しています。最終結果のみをキャッシュするには、以下のように &lt;code&gt;memoize&lt;/code&gt; を関数の外に移動します。</target>
        </trans-unit>
        <trans-unit id="3a167a300836fdd4ab2e0e008d931c833538789e" translate="yes" xml:space="preserve">
          <source>This method allows expansion within the respective bucket range. It succeeds if both &lt;code&gt;b.length&lt;/code&gt; and &lt;code&gt;b.length + delta&lt;/code&gt; fall in a range of the form &lt;code&gt;[min + k * step, min + (k + 1) * step - 1]&lt;/code&gt;.</source>
          <target state="translated">この方法では、それぞれのバケット範囲内で拡張できます。 &lt;code&gt;b.length&lt;/code&gt; と &lt;code&gt;b.length + delta&lt;/code&gt; 両方が &lt;code&gt;[min + k * step, min + (k + 1) * step - 1]&lt;/code&gt; という形式の範囲内にある場合、成功します。</target>
        </trans-unit>
        <trans-unit id="4461edb18d36faaf19bc846025f3b95c67801b6c" translate="yes" xml:space="preserve">
          <source>This method allows forwarding log entries from one logger to another.</source>
          <target state="translated">このメソッドは、1 つのロガーから別のロガーにログ エントリを転送することを可能にします。</target>
        </trans-unit>
        <trans-unit id="3816a6346828017f335a6081c798a8a0dd6de4dd" translate="yes" xml:space="preserve">
          <source>This method allows reallocation within the respective bucket range. If both &lt;code&gt;b.length&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; fall in a range of the form &lt;code&gt;[min + k * step, min + (k + 1) * step - 1]&lt;/code&gt;, then reallocation is in place. Otherwise, reallocation with moving is attempted.</source>
          <target state="translated">この方法では、それぞれのバケット範囲内で再割り当てできます。 &lt;code&gt;b.length&lt;/code&gt; と &lt;code&gt;size&lt;/code&gt; の両方が &lt;code&gt;[min + k * step, min + (k + 1) * step - 1]&lt;/code&gt; という形式の範囲にある場合、再割り当てが行われます。それ以外の場合は、移動を伴う再割り当てが試行されます。</target>
        </trans-unit>
        <trans-unit id="b9a458cd0b30230c45418803529ca936bac85057" translate="yes" xml:space="preserve">
          <source>This method can be more efficient than the one in the previous example because &lt;code&gt;stdin.readln(buf)&lt;/code&gt; reuses (if possible) memory allocated for &lt;code&gt;buf&lt;/code&gt;, whereas &lt;code&gt;line = stdin.readln()&lt;/code&gt; makes a new memory allocation for every line.  For even better performance you can help &lt;code&gt;readln&lt;/code&gt; by passing in a large buffer to avoid memory reallocations. This can be done by reusing the largest buffer returned by &lt;code&gt;readln&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;stdin.readln(buf)&lt;/code&gt; は（可能な場合） &lt;code&gt;buf&lt;/code&gt; に割り当てられたメモリを再利用するため、このメソッドは前の例よりも効率的です。一方、 &lt;code&gt;line = stdin.readln()&lt;/code&gt; は、すべての行に新しいメモリを割り当てます。さらに優れたパフォーマンスを得るには、大きなバッファーを渡してメモリの再割り当てを回避することで、 &lt;code&gt;readln&lt;/code&gt; を支援できます。これは、 &lt;code&gt;readln&lt;/code&gt; によって返された最大のバッファーを再利用することで実行できます。</target>
        </trans-unit>
        <trans-unit id="7f7c9ac03db99dc39088ab7814b92a020b0c3ad1" translate="yes" xml:space="preserve">
          <source>This method inserts a new Logger into the &lt;code&gt;MultiLogger&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、新しいロガーを &lt;code&gt;MultiLogger&lt;/code&gt; に挿入します。</target>
        </trans-unit>
        <trans-unit id="7e456631bd1026dc4c8384262111ee00c2ae6280" translate="yes" xml:space="preserve">
          <source>This method is defined if both allocators define it, and forwards to &lt;code&gt;SmallAllocator&lt;/code&gt; or &lt;code&gt;LargeAllocator&lt;/code&gt; appropriately.</source>
          <target state="translated">このメソッドは、両方のアロケーターが定義する場合に定義され、 &lt;code&gt;SmallAllocator&lt;/code&gt; または &lt;code&gt;LargeAllocator&lt;/code&gt; に適切に転送されます。</target>
        </trans-unit>
        <trans-unit id="29c6c590b7cd5abdf60b16e55a89efa8f2694069" translate="yes" xml:space="preserve">
          <source>This method is defined only if at least one of the allocators defines it, and work similarly to &lt;code&gt;reallocate&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、少なくとも1つのアロケータで定義されている場合にのみ定義され、 &lt;code&gt;reallocate&lt;/code&gt; と同様に機能します。</target>
        </trans-unit>
        <trans-unit id="c403891dca13c06af654365809bbef8d64860536" translate="yes" xml:space="preserve">
          <source>This method is defined only if at least one of the allocators defines it. If &lt;code&gt;SmallAllocator&lt;/code&gt; defines &lt;code&gt;expand&lt;/code&gt; and &lt;code&gt;b.length + delta &amp;lt;= threshold&lt;/code&gt;, the call is forwarded to &lt;code&gt;SmallAllocator&lt;/code&gt;. If &lt;code&gt; LargeAllocator&lt;/code&gt; defines &lt;code&gt;expand&lt;/code&gt; and &lt;code&gt;b.length &amp;gt; threshold&lt;/code&gt;, the call is forwarded to &lt;code&gt;LargeAllocator&lt;/code&gt;. Otherwise, the call returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、少なくとも1つのアロケータが定義している場合にのみ定義されます。 &lt;code&gt;SmallAllocator&lt;/code&gt; が &lt;code&gt;expand&lt;/code&gt; と &lt;code&gt;b.length + delta &amp;lt;= threshold&lt;/code&gt; 定義している場合、呼び出しは &lt;code&gt;SmallAllocator&lt;/code&gt; に転送されます。 &lt;code&gt; LargeAllocator&lt;/code&gt; が &lt;code&gt;expand&lt;/code&gt; と &lt;code&gt;b.length &amp;gt; threshold&lt;/code&gt; 定義している場合、呼び出しは &lt;code&gt;LargeAllocator&lt;/code&gt; に転送されます。それ以外の場合、呼び出しは &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cc308051788a72be786da5419b09693d8595fa4d" translate="yes" xml:space="preserve">
          <source>This method is defined only if at least one of the allocators defines it. If &lt;code&gt;SmallAllocator&lt;/code&gt; defines &lt;code&gt;reallocate&lt;/code&gt; and &lt;code&gt;b.length &amp;lt;= threshold &amp;amp;&amp;amp; s &amp;lt;= threshold&lt;/code&gt;, the call is forwarded to &lt;code&gt; SmallAllocator&lt;/code&gt;. If &lt;code&gt;LargeAllocator&lt;/code&gt; defines &lt;code&gt;expand&lt;/code&gt; and &lt;code&gt; b.length &amp;gt; threshold &amp;amp;&amp;amp; s &amp;gt; threshold&lt;/code&gt;, the call is forwarded to &lt;code&gt; LargeAllocator&lt;/code&gt;. Otherwise, the call returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、少なくとも1つのアロケータが定義している場合にのみ定義されます。 &lt;code&gt;SmallAllocator&lt;/code&gt; が &lt;code&gt;reallocate&lt;/code&gt; および &lt;code&gt;b.length &amp;lt;= threshold &amp;amp;&amp;amp; s &amp;lt;= threshold&lt;/code&gt; 定義している場合、呼び出しは &lt;code&gt; SmallAllocator&lt;/code&gt; に転送されます。 &lt;code&gt;LargeAllocator&lt;/code&gt; が &lt;code&gt;expand&lt;/code&gt; と &lt;code&gt; b.length &amp;gt; threshold &amp;amp;&amp;amp; s &amp;gt; threshold&lt;/code&gt; 定義している場合、コールは &lt;code&gt; LargeAllocator&lt;/code&gt; に転送されます。それ以外の場合、呼び出しは &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="620e46438ddff127931a59ae1ef3a8f250fd07f0" translate="yes" xml:space="preserve">
          <source>This method is defined only if at least one of the allocators defines it. The good allocation size is obtained from &lt;code&gt;SmallAllocator&lt;/code&gt; if &lt;code&gt; s &amp;lt;= threshold&lt;/code&gt;, or &lt;code&gt;LargeAllocator&lt;/code&gt; otherwise. (If one of the allocators does not define &lt;code&gt;goodAllocSize&lt;/code&gt;, the default implementation in this module applies.)</source>
          <target state="translated">このメソッドは、少なくとも1つのアロケータが定義している場合にのみ定義されます。良好な割当てサイズがから得られる &lt;code&gt;SmallAllocator&lt;/code&gt; 場合 &lt;code&gt; s &amp;lt;= threshold&lt;/code&gt; 、又は &lt;code&gt;LargeAllocator&lt;/code&gt; さもなければ。（アロケーターの1つが &lt;code&gt;goodAllocSize&lt;/code&gt; を定義していない場合、このモジュールのデフォルトの実装が適用されます。）</target>
        </trans-unit>
        <trans-unit id="d239e7b226a63994c92bb5f28f2af2cc148e0855" translate="yes" xml:space="preserve">
          <source>This method is defined only if both allocators define it. The call is forwarded to &lt;code&gt;SmallAllocator&lt;/code&gt; if &lt;code&gt;b.length &amp;lt;= threshold&lt;/code&gt;, or &lt;code&gt; LargeAllocator&lt;/code&gt; otherwise.</source>
          <target state="translated">このメソッドは、両方のアロケータで定義されている場合にのみ定義されます。コールがに転送され &lt;code&gt;SmallAllocator&lt;/code&gt; 場合 &lt;code&gt;b.length &amp;lt;= threshold&lt;/code&gt; 、または &lt;code&gt; LargeAllocator&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="b5f2a8f9e894a52f7a4a03fd41c115c5a28e5d48" translate="yes" xml:space="preserve">
          <source>This method is only available if the underlying range is a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt;</source>
          <target state="translated">このメソッドは、基になる範囲が&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前方の範囲で&lt;/a&gt;ある場合にのみ使用できます</target>
        </trans-unit>
        <trans-unit id="8fd044a02e3e694fc797ffa7b6155202b89056a3" translate="yes" xml:space="preserve">
          <source>This method is only available if the underlying range is a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、基になる範囲が&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前方の範囲で&lt;/a&gt;ある場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="832bf9b6aa94575865959f7e42866388acb50190" translate="yes" xml:space="preserve">
          <source>This method is only defined if &lt;code&gt;Allocator&lt;/code&gt; defines &lt;code&gt;deallocate&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;Allocator&lt;/code&gt; がdeallocateを定義する場合にのみ定義され &lt;code&gt;deallocate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d110cb43a292fbf904825bc3d4bb27446be41655" translate="yes" xml:space="preserve">
          <source>This method is only defined if all allocators involved define &lt;code&gt; deallocateAll&lt;/code&gt;, and calls it for each bucket in turn. Returns &lt;code&gt;true&lt;/code&gt; if all allocators could deallocate all.</source>
          <target state="translated">このメソッドは、すべてのアロケータを定義関わっている場合に定義され &lt;code&gt; deallocateAll&lt;/code&gt; を、ひいては各バケットのためにそれを呼び出します。すべてのアロケータがすべての割り当てを解除できる場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="39358dd310cc162f2c05e4b4ad0f8504cf1a91af" translate="yes" xml:space="preserve">
          <source>This method is only defined if all allocators involved define &lt;code&gt; resolveInternalPointer&lt;/code&gt;, and tries it for each bucket in turn.</source>
          <target state="translated">このメソッドは、関係するすべてのアロケーターが &lt;code&gt; resolveInternalPointer&lt;/code&gt; を定義し、バケットごとに順番に試行する場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="9dbdb0a556e3c7305bbb92177faa9a39d0b98a27" translate="yes" xml:space="preserve">
          <source>This method logs data to the used &lt;code&gt;Logger&lt;/code&gt; with the &lt;code&gt;LogLevel&lt;/code&gt; of the this &lt;code&gt;Logger&lt;/code&gt; in a &lt;code&gt;printf&lt;/code&gt;-style manner.</source>
          <target state="translated">使用されるこの方法は、ログデータ &lt;code&gt;Logger&lt;/code&gt; と &lt;code&gt;LogLevel&lt;/code&gt; この &lt;code&gt;Logger&lt;/code&gt; で &lt;code&gt;printf&lt;/code&gt; スタイルの方法。</target>
        </trans-unit>
        <trans-unit id="b6f8a28a408a1ebec1b43e9856020fe703ce80ce" translate="yes" xml:space="preserve">
          <source>This method logs data with the &lt;code&gt;LogLevel&lt;/code&gt; of the used &lt;code&gt;Logger&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、使用された &lt;code&gt;Logger&lt;/code&gt; の &lt;code&gt;LogLevel&lt;/code&gt; でデータを記録します。</target>
        </trans-unit>
        <trans-unit id="3c1dde3d6319c6f9ff98c98c06a035679376bc16" translate="yes" xml:space="preserve">
          <source>This method removes a Logger from the &lt;code&gt;MultiLogger&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;MultiLogger&lt;/code&gt; からロガーを削除します。</target>
        </trans-unit>
        <trans-unit id="2129521b769d915727dcb1e653df38210cfe3143" translate="yes" xml:space="preserve">
          <source>This method takes a &lt;code&gt;bool&lt;/code&gt; as first argument. In order for the data to be processed the &lt;code&gt;bool&lt;/code&gt; must be &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;LogLevel&lt;/code&gt; of the Logger must be greater or equal to the global &lt;code&gt;LogLevel&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、最初の引数として &lt;code&gt;bool&lt;/code&gt; を取ります。データを処理するには、 &lt;code&gt;bool&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; で、ロガーの &lt;code&gt;LogLevel&lt;/code&gt; がグローバル &lt;code&gt;LogLevel&lt;/code&gt; 以上である必要があります。</target>
        </trans-unit>
        <trans-unit id="d0cb43593777a49c6e95ba5b0dcc72f45a57113c" translate="yes" xml:space="preserve">
          <source>This methods get and set the global &lt;code&gt;LogLevel&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、グローバル &lt;code&gt;LogLevel&lt;/code&gt; を取得および設定します。</target>
        </trans-unit>
        <trans-unit id="a7803a9c22a232513790fa103468328fa0b2565b" translate="yes" xml:space="preserve">
          <source>This might affect your application if it has threads that are not suspended during the mark phase of the collection. You can configure the number of additional threads used for marking by GC option &lt;code&gt;parallel&lt;/code&gt;, e.g. by passing &lt;code&gt;--DRT-gcopt=parallel:2&lt;/code&gt; on the command line or embedding the option into the binary via &lt;code&gt;rt_options&lt;/code&gt;. The number of threads actually created is limited to &lt;a href=&quot;https://dlang.org/library/core/cpuid/threads_per_cpu.html&quot;&gt;&lt;code&gt;core.cpuid.threadsPerCPU-1&lt;/code&gt;&lt;/a&gt;. A value of &lt;code&gt;0&lt;/code&gt; disables parallel marking completely.</source>
          <target state="translated">コレクションのマークフェーズ中に中断されていないスレッドがある場合、これはアプリケーションに影響を与える可能性があります。あなたは、GCオプションによるマーキングのために使用する追加スレッド数を設定することができ &lt;code&gt;parallel&lt;/code&gt; 渡すことによって、例えば &lt;code&gt;--DRT-gcopt=parallel:2&lt;/code&gt; コマンドライン上または経由でバイナリにオプションを埋め込む &lt;code&gt;rt_options&lt;/code&gt; を。実際に作成されるスレッドの数は、&lt;a href=&quot;https://dlang.org/library/core/cpuid/threads_per_cpu.html&quot;&gt; &lt;code&gt;core.cpuid.threadsPerCPU-1&lt;/code&gt; に&lt;/a&gt;制限されています。値 &lt;code&gt;0&lt;/code&gt; は、並行マーキングを完全に無効にします。</target>
        </trans-unit>
        <trans-unit id="abf107b5c6e2c3e95aef57b0f00ce4199d6e77e4" translate="yes" xml:space="preserve">
          <source>This module allows content to be iterated by record stored in a struct, class, associative array, or as a range of fields. Upon detection of an error an CSVException is thrown (can be disabled). csvNextToken has been made public to allow for attempted recovery.  Disabling exceptions will lift many restrictions specified above. A quote can appear in a field if the field was not quoted. If in a quoted field any quote by itself, not at the end of a field, will end processing for that field. The field is ended when there is no input, even if the quote was not closed.</source>
          <target state="translated">このモジュールでは、構造体、クラス、連想配列、またはフィールドの範囲に格納されたレコードごとにコンテンツを反復処理することができます。エラーが検出されると CSVException がスローされます (無効にすることもできます)。csvNextToken は復旧を試みることができるように公開されています。例外を無効にすることで、上記で指定した多くの制限が解除されます。フィールドが引用符で囲まれていない場合、フィールド内に引用符が表示されることがあります。引用符で囲まれたフィールドの場合、フィールドの最後ではなく、それ自体が引用符である場合、そのフィールドの処理は終了します。引用符が閉じられていなくても、入力がなければそのフィールドの処理は終了します。</target>
        </trans-unit>
        <trans-unit id="0c12be692d1a1b6196ff193f230f2b2b54e371d1" translate="yes" xml:space="preserve">
          <source>This module and its documentation are inspired by Perl's &lt;a href=&quot;http://%20%20%20%20%20%20%20%20%20%20%20perldoc.perl.org/Getopt/Long.html&quot;&gt;Getopt::Long&lt;/a&gt; module. The syntax of D's &lt;code&gt;getopt&lt;/code&gt; is simpler than its Perl counterpart because &lt;code&gt; getopt&lt;/code&gt; infers the expected parameter types from the static types of the passed-in pointers.</source>
          <target state="translated">このモジュールとそのドキュメントは、Perlの&lt;a href=&quot;http://%20%20%20%20%20%20%20%20%20%20%20perldoc.perl.org/Getopt/Long.html&quot;&gt;Getopt :: Long&lt;/a&gt;モジュールに触発されています。Dの &lt;code&gt;getopt&lt;/code&gt; の構文は、対応するPerlよりも単純です。これは、 &lt;code&gt; getopt&lt;/code&gt; が、渡されたポインターの静的型から予期されるパラメーター型を推測するためです。</target>
        </trans-unit>
        <trans-unit id="e9ef4feea1926afdb50fb401e193258058409682" translate="yes" xml:space="preserve">
          <source>This module and its documentation are inspired by Perl's &lt;a href=&quot;https://perldoc.perl.org/Getopt/Long.html&quot;&gt;Getopt::Long&lt;/a&gt; module. The syntax of D's &lt;code&gt;getopt&lt;/code&gt; is simpler than its Perl counterpart because &lt;code&gt; getopt&lt;/code&gt; infers the expected parameter types from the static types of the passed-in pointers.</source>
          <target state="translated">このモジュールとそのドキュメントは、Perlの&lt;a href=&quot;https://perldoc.perl.org/Getopt/Long.html&quot;&gt;Getopt :: Long&lt;/a&gt;モジュールに触発されています。Dの &lt;code&gt;getopt&lt;/code&gt; の構文は、Perlの対応する構文よりも単純です。これは、 &lt;code&gt; getopt&lt;/code&gt; が、渡されたポインターの静的型から予期されるパラメーター型を推測するためです。</target>
        </trans-unit>
        <trans-unit id="7f09ec381e380d7513f44d1a9c117509cf562d32" translate="yes" xml:space="preserve">
          <source>This module centers around two functions:</source>
          <target state="translated">このモジュールは、2つの機能を中心に構成されています。</target>
        </trans-unit>
        <trans-unit id="20c669a98c4868307d434ad05bfdc4a3a51a1300" translate="yes" xml:space="preserve">
          <source>This module conforms to the APIs defined in &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt;.  This module publicly imports &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt; and can be used as a stand-alone module.</source>
          <target state="translated">このモジュールは、&lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; で&lt;/a&gt;定義されているAPIに準拠しています。このモジュールは&lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; &lt;/a&gt;をパブリックにインポートし、スタンドアロンモジュールとして使用できます。</target>
        </trans-unit>
        <trans-unit id="f7a16008011138e31550b797755a77e5d03cd02e" translate="yes" xml:space="preserve">
          <source>This module conforms to the APIs defined in &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt;. To understand the differences between the template and the OOP API, see &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、&lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; で&lt;/a&gt;定義されているAPIに準拠しています。テンプレートとOOP APIの違いを理解するには、&lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="17ae71bfaa531ddd2da20bee8e617777975ac653" translate="yes" xml:space="preserve">
          <source>This module conforms to the APIs defined in &lt;code&gt;std.digest&lt;/code&gt;. To understand the differences between the template and the OOP API, see &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;std.digest&lt;/code&gt; で定義されているAPIに準拠しています。テンプレートとOOP APIの違いを理解するには、&lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5d23cc75f3120c33113ac064a49eabf3de54b0fa" translate="yes" xml:space="preserve">
          <source>This module consists of the following submodules:</source>
          <target state="translated">このモジュールは以下のサブモジュールで構成されています。</target>
        </trans-unit>
        <trans-unit id="acafb5c32c70d9aae6c63b01f760110057442f4d" translate="yes" xml:space="preserve">
          <source>This module contains UDA's (User Defined Attributes) either used in the runtime or special UDA's recognized by compiler.</source>
          <target state="translated">このモジュールには、ランタイムで使用されるUDA(User Defined Attributes)やコンパイラで認識される特別なUDAが含まれています。</target>
        </trans-unit>
        <trans-unit id="85899b400fb24fe82d032611b825cbfb9b44e4d4" translate="yes" xml:space="preserve">
          <source>This module contains a collection of bit-level operations.</source>
          <target state="translated">このモジュールには、ビットレベルの操作のコレクションが含まれています。</target>
        </trans-unit>
        <trans-unit id="c1389c215e1a5264fea083894c94780e9d38b766" translate="yes" xml:space="preserve">
          <source>This module contains all functions related to an object's lifetime: allocation, resizing, deallocation, and finalization.</source>
          <target state="translated">このモジュールには、オブジェクトの寿命に関連するすべての関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="2e22ee3bb8cbf087613e536d6224ea16946bb6a9" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/assert.h.html&quot;&gt;&lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/assert.h.html&quot;&gt; &lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0790e73d68257f0feac07da73031d54a40efb1ec" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/complex.h.html&quot;&gt;&lt;code&gt;&amp;lt;complex.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/complex.h.html&quot;&gt; &lt;code&gt;&amp;lt;complex.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="977e99994de35a20a0e314dc2374362a82960544" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/ctype.h.html&quot;&gt;&lt;code&gt;&amp;lt;ctype.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/ctype.h.html&quot;&gt; &lt;code&gt;&amp;lt;ctype.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="12b921fc7078621d7eaa8b76c016bec3d37b2ea8" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/errno.h.html&quot;&gt;&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/errno.h.html&quot;&gt; &lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3184aa12179289bb1bc9cc36d8ce4348bfa946fe" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/fenv.h.html&quot;&gt;&lt;code&gt;&amp;lt;fenv.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/fenv.h.html&quot;&gt; &lt;code&gt;&amp;lt;fenv.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8eb2c62940c679e140d89cb9017957cd6a4ba64f" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/float.h.html&quot;&gt;&lt;code&gt;&amp;lt;float.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/float.h.html&quot;&gt; &lt;code&gt;&amp;lt;float.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="82e3f25e60216c815c395312071e29f7c8ca0ddd" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/inttypes.h.html&quot;&gt;&lt;code&gt;&amp;lt;inttypes.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/inttypes.h.html&quot;&gt; &lt;code&gt;&amp;lt;inttypes.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f313b0f4d7c80470b377169af784edeeb810ec9d" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/limits.h.html&quot;&gt;&lt;code&gt;&amp;lt;limits.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/limits.h.html&quot;&gt; &lt;code&gt;&amp;lt;limits.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="889ac9c43694fc79bd24e61dceed4e6fda688b35" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/locale.h.html&quot;&gt;&lt;code&gt;&amp;lt;locale.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/locale.h.html&quot;&gt; &lt;code&gt;&amp;lt;locale.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8bd014e9d5a4fdbad34dcb7fb8420e937c0abc85" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/math.h.html&quot;&gt;&lt;code&gt;&amp;lt;math.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準Cヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/math.h.html&quot;&gt; &lt;code&gt;&amp;lt;math.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fc16180c80d567a16457d88550f7aa27a1b419aa" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/signal.h.html&quot;&gt;&lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/signal.h.html&quot;&gt; &lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5971b6bf8e57282688ff4449029781d4b3a236d4" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdarg.h.html&quot;&gt;&lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdarg.h.html&quot;&gt; &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b580515d9fbf0a4ef7b9e421dec5768897b813d8" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stddef.h.html&quot;&gt;&lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stddef.h.html&quot;&gt; &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="95281628a03db4872107318eb8c99b1bea13ccc2" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdint.h.html&quot;&gt;&lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdint.h.html&quot;&gt; &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="51ba870a61bb5fb732f12f00ebdf0f6bdf33ab08" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdio.h.html&quot;&gt;&lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdio.h.html&quot;&gt; &lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b6d9cbc1fb19908d75c057b6e010d377eada4d77" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdlib.h.html&quot;&gt;&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdlib.h.html&quot;&gt; &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="050d1037c01667ef5f3b8f67c4951211e12ccacf" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/string.h.html&quot;&gt;&lt;code&gt;&amp;lt;string.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/string.h.html&quot;&gt; &lt;code&gt;&amp;lt;string.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f549cd509c6cf2035fd5afdb0920eaa5d4d5e84e" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/tgmath.h.html&quot;&gt;&lt;code&gt;&amp;lt;tgmath.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/tgmath.h.html&quot;&gt; &lt;code&gt;&amp;lt;tgmath.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="62c64533f70dfc4fd8955bc0b3a2834ad07751af" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/time.h.html&quot;&gt;&lt;code&gt;&amp;lt;time.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/time.h.html&quot;&gt; &lt;code&gt;&amp;lt;time.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="92aabdabf0e70387e5a38f4c231411efd14217e3" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/wchar.h.html&quot;&gt;&lt;code&gt;&amp;lt;wchar.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/wchar.h.html&quot;&gt; &lt;code&gt;&amp;lt;wchar.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0ec277ffc9998ff3f0f63d9eedcde3635f0eb758" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/wctype.h.html&quot;&gt;&lt;code&gt;&amp;lt;wctype.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/wctype.h.html&quot;&gt; &lt;code&gt;&amp;lt;wctype.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。これは自動的に生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4332c56ae7f44bffd58f114ac37e892a2b103dd8" translate="yes" xml:space="preserve">
          <source>This module contains compiler support determining equality of dynamic arrays.</source>
          <target state="translated">このモジュールには,動的配列の均等性を判定するためのコンパイラのサポートが含まれています.</target>
        </trans-unit>
        <trans-unit id="a9409989c24e53c52350805b177653fd011bfa05" translate="yes" xml:space="preserve">
          <source>This module contains compiler support for casting dynamic arrays</source>
          <target state="translated">このモジュールには、動的配列をキャストするためのコンパイラのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="98da9476138dd631b9aa80ca4972d86126ed52a1" translate="yes" xml:space="preserve">
          <source>This module contains compiler support for comparing dynamic arrays</source>
          <target state="translated">このモジュールには、動的配列を比較するためのコンパイラのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="ea25ff08ceea8b6974ce0811b1a4d3c03f3a2b61" translate="yes" xml:space="preserve">
          <source>This module contains compiler support for constructing dynamic arrays</source>
          <target state="translated">このモジュールには、動的配列を構築するためのコンパイラのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="130d46533e13acaf0b0f736ae469ff9f68d6ff23" translate="yes" xml:space="preserve">
          <source>This module contains high-level interfaces for interacting with DMD as a library.</source>
          <target state="translated">このモジュールには、ライブラリとしてDMDと対話するための高レベルのインタフェースが含まれています。</target>
        </trans-unit>
        <trans-unit id="7df04f2ddca174e21d081429f9f3c53ebccb78b8" translate="yes" xml:space="preserve">
          <source>This module contains some common utilities used by containers.</source>
          <target state="translated">このモジュールには、コンテナで使用される一般的なユーティリティが含まれています。</target>
        </trans-unit>
        <trans-unit id="dcac3a1b4da6941734058525116d97065268b549" translate="yes" xml:space="preserve">
          <source>This module contains support for controlling dynamic arrays' appending</source>
          <target state="translated">このモジュールには、動的配列の追加を制御するためのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="c49eb9ff2d1c37482fee0bb60748312c2292f298" translate="yes" xml:space="preserve">
          <source>This module contains support for controlling dynamic arrays' capacity and length</source>
          <target state="translated">このモジュールには、動的配列の容量と長さを制御するためのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="5a472e4841c397ed8a20c7da34116a395a9f78db" translate="yes" xml:space="preserve">
          <source>This module contains support for controlling dynamic arrays' concatenation</source>
          <target state="translated">このモジュールには、動的配列の連結を制御するためのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="d58f6f902fb5917dee8fa5b768555a18fd9ff404" translate="yes" xml:space="preserve">
          <source>This module contains the &lt;a href=&quot;#Complex&quot;&gt;&lt;code&gt;Complex&lt;/code&gt;&lt;/a&gt; type, which is used to represent complex numbers, along with related mathematical operations and functions.</source>
          <target state="translated">このモジュールには、関連する数学演算および関数とともに、複素数を表すために使用される&lt;a href=&quot;#Complex&quot;&gt; &lt;code&gt;Complex&lt;/code&gt; &lt;/a&gt;型が含まれています。</target>
        </trans-unit>
        <trans-unit id="1cafe10d55f1a2961b685e59594325a88af3e24c" translate="yes" xml:space="preserve">
          <source>This module contains the &lt;code&gt;Id&lt;/code&gt; struct with a list of predefined symbols the compiler knows about.</source>
          <target state="translated">このモジュールには、コンパイラーが認識している事前定義されたシンボルのリストを含む &lt;code&gt;Id&lt;/code&gt; 構造体が含まれています。</target>
        </trans-unit>
        <trans-unit id="99093b5cfdcc5707f50f9cafa8f212b7442853a6" translate="yes" xml:space="preserve">
          <source>This module contains utilities for TypeInfo implementation.</source>
          <target state="translated">このモジュールには、TypeInfoの実装のためのユーティリティが含まれています。</target>
        </trans-unit>
        <trans-unit id="a058b7e236eb5ab7c537629e84966c190eced743" translate="yes" xml:space="preserve">
          <source>This module contains utility functions to help the implementation of the runtime hook</source>
          <target state="translated">このモジュールには、ランタイムフックの実装を支援するユーティリティ関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="7d6317f5849751724969636691ef1f8625b672f7" translate="yes" xml:space="preserve">
          <source>This module contains various string related functions.</source>
          <target state="translated">このモジュールには、文字列関連の様々な関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="d02a1f1d4e42f0ca255a0d80699556c671a1024b" translate="yes" xml:space="preserve">
          <source>This module declares intrinsics for volatile operations.</source>
          <target state="translated">このモジュールは、揮発性演算の本質を宣言します。</target>
        </trans-unit>
        <trans-unit id="9a531226ad2342a85a7cda80bcc56003e90c7e5a" translate="yes" xml:space="preserve">
          <source>This module defines &lt;code&gt;TypedAllocator&lt;/code&gt;, a statically-typed allocator that aggregates multiple untyped allocators and uses them depending on the static properties of the types allocated. For example, distinct allocators may be used for thread-local vs. thread-shared data, or for fixed-size data (&lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; objects) vs. resizable data (arrays).</source>
          <target state="translated">このモジュールは &lt;code&gt;TypedAllocator&lt;/code&gt; を定義します。これは、複数の型なしアロケーターを集約し、割り当てられた型の静的プロパティに応じてそれらを使用する静的型付きアロケーターです。たとえば、スレッドローカルデータとスレッド共有データ、または固定サイズデータ（ &lt;code&gt;struct&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; オブジェクト）とサイズ変更可能なデータ（配列）には、個別のアロケーターを使用できます。</target>
        </trans-unit>
        <trans-unit id="259e74bca77eb48b491beebe7a35554776cb2efb" translate="yes" xml:space="preserve">
          <source>This module defines a number of primitives that work with graphemes: &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#decodeGrapheme&quot;&gt;&lt;code&gt;decodeGrapheme&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#graphemeStride&quot;&gt;&lt;code&gt;graphemeStride&lt;/code&gt;&lt;/a&gt;. All of them are using</source>
          <target state="translated">このモジュールは、プリミティブの数を定義する作業書記素と：&lt;a href=&quot;#Grapheme&quot;&gt; &lt;code&gt;Grapheme&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#decodeGrapheme&quot;&gt; &lt;code&gt;decodeGrapheme&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#graphemeStride&quot;&gt; &lt;code&gt;graphemeStride&lt;/code&gt; &lt;/a&gt;。それらのすべてが使用しています</target>
        </trans-unit>
        <trans-unit id="99bc02ede476ad853ab518e42294b5202a998289" translate="yes" xml:space="preserve">
          <source>This module defines facilities for efficient checking of integral operations against overflow, casting with loss of precision, unexpected change of sign, etc. The checking (and possibly correction) can be done at operation level, for example &lt;a href=&quot;#opChecked&quot;&gt;&lt;code&gt;opChecked&lt;/code&gt;&lt;/a&gt;&lt;code&gt;!&quot;+&quot;(x, y, overflow)&lt;/code&gt; adds two integrals &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; and sets &lt;code&gt;overflow&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if an overflow occurred. The flag &lt;code&gt;overflow&lt;/code&gt; (a &lt;code&gt;bool&lt;/code&gt; passed by reference) is not touched if the operation succeeded, so the same flag can be reused for a sequence of operations and tested at the end.</source>
          <target state="translated">このモジュールは、オーバーフロー、精度の損失を伴うキャスト、符号の予期しない変更などに対する積分演算の効率的なチェックのための機能を定義します。チェック（および場合によっては修正）は、たとえば&lt;a href=&quot;#opChecked&quot;&gt; &lt;code&gt;opChecked&lt;/code&gt; &lt;/a&gt; &lt;code&gt;!&quot;+&quot;(x, y, overflow)&lt;/code&gt; は、2つの積分 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を加算し、オーバーフローが発生した場合に &lt;code&gt;overflow&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します。フラグ &lt;code&gt;overflow&lt;/code&gt; （参照によって渡される &lt;code&gt;bool&lt;/code&gt; ）は、操作が成功した場合は影響を受けないため、同じフラグを一連の操作に再利用して、最後にテストできます。</target>
        </trans-unit>
        <trans-unit id="8e33eb3468c635b3f1b1bf8d7ab1a84f24b11f39" translate="yes" xml:space="preserve">
          <source>This module defines functions related to exceptions and general error handling. It also defines functions intended to aid in unit testing.</source>
          <target state="translated">本モジュールでは、例外や一般的なエラー処理に関する機能を定義しています。また、ユニットテストを支援するための関数も定義しています。</target>
        </trans-unit>
        <trans-unit id="2f439ece9b3ae412ebb6e407781c8a8d19e803e8" translate="yes" xml:space="preserve">
          <source>This module defines generic containers.</source>
          <target state="translated">このモジュールは、汎用コンテナを定義します。</target>
        </trans-unit>
        <trans-unit id="7716ef353856b8c8fdc336f0f551c1520abef4d6" translate="yes" xml:space="preserve">
          <source>This module defines the notion of a range. Ranges generalize the concept of arrays, lists, or anything that involves sequential access. This abstraction enables the same set of algorithms (see &lt;a href=&quot;std_algorithm&quot;&gt;&lt;code&gt;std.algorithm&lt;/code&gt;&lt;/a&gt;) to be used with a vast variety of different concrete types. For example, a linear search algorithm such as &lt;a href=&quot;std_algorithm_searching#find&quot;&gt;&lt;code&gt;std.algorithm.searching.find&lt;/code&gt;&lt;/a&gt; works not just for arrays, but for linked-lists, input files, incoming network data, etc.</source>
          <target state="translated">このモジュールは、範囲の概念を定義します。範囲は、配列、リスト、またはシーケンシャルアクセスを伴うすべての概念を一般化します。この抽象化により、同じアルゴリズムのセット（&lt;a href=&quot;std_algorithm&quot;&gt; &lt;code&gt;std.algorithm&lt;/code&gt; を&lt;/a&gt;参照）を多種多様な具象タイプで使用できるようになります。たとえば、&lt;a href=&quot;std_algorithm_searching#find&quot;&gt; &lt;code&gt;std.algorithm.searching.find&lt;/code&gt; &lt;/a&gt;などの線形検索アルゴリズムは、配列だけでなく、リンクリスト、入力ファイル、受信ネットワークデータなどでも機能します。</target>
        </trans-unit>
        <trans-unit id="0c2b133a65c34666134047443b875c3c6bf1823e" translate="yes" xml:space="preserve">
          <source>This module describes the digest APIs used in Phobos. All digests follow these APIs. Additionally, this module contains useful helper methods which can be used with every digest type.</source>
          <target state="translated">このモジュールでは、Phobosで使用されるダイジェストAPIについて説明します。すべてのダイジェストはこれらの API に従います。さらに、このモジュールには、すべてのダイジェストタイプで使用できる有用なヘルパーメソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="9eac267b2bca3c4e62e74376d6d1858e8b30f305" translate="yes" xml:space="preserve">
          <source>This module extracts debug info from the currently running Mach-O executable.</source>
          <target state="translated">現在実行中のMach-O実行ファイルからデバッグ情報を抽出します。</target>
        </trans-unit>
        <trans-unit id="2b3bde835b97011d3a24374bdd792ad0a067b596" translate="yes" xml:space="preserve">
          <source>This module has two submodules:</source>
          <target state="translated">このモジュールには2つのサブモジュールがあります。</target>
        </trans-unit>
        <trans-unit id="c364d07bb94ddbade750564cb1b9de747e163c33" translate="yes" xml:space="preserve">
          <source>This module implements a &lt;a href=&quot;http://erdani.org/publications/cuj-04-2002.html&quot;&gt;discriminated union&lt;/a&gt; type (a.k.a. &lt;a href=&quot;http://en.wikipedia.org/wiki/Tagged_union&quot;&gt;tagged union&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Algebraic_data_type&quot;&gt;algebraic type&lt;/a&gt;). Such types are useful for type-uniform binary interfaces, interfacing with scripting languages, and comfortable exploratory programming.</source>
          <target state="translated">このモジュールは、&lt;a href=&quot;http://erdani.org/publications/cuj-04-2002.html&quot;&gt;識別&lt;/a&gt;された共用体型（別名、&lt;a href=&quot;http://en.wikipedia.org/wiki/Tagged_union&quot;&gt;タグ付き共用体&lt;/a&gt;、&lt;a href=&quot;http://en.wikipedia.org/wiki/Algebraic_data_type&quot;&gt;代数型&lt;/a&gt;）を実装します。このような型は、型が統一されたバイナリインターフェイス、スクリプト言語とのインターフェース、快適な探索的プログラミングに役立ちます。</target>
        </trans-unit>
        <trans-unit id="dcf874427a131dcde8af3f16bcfbe7028972cb86" translate="yes" xml:space="preserve">
          <source>This module implements a generic doubly-linked list container. It can be used as a queue, dequeue or stack.</source>
          <target state="translated">このモジュールは、汎用的な二重リンクリストコンテナを実装しています。キュー、デキュー、スタックとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="276f012505f8a462f31b45a6f4a35457a2d35dbc" translate="yes" xml:space="preserve">
          <source>This module implements a red-black tree container.</source>
          <target state="translated">このモジュールは、赤黒い木のコンテナを実装しています。</target>
        </trans-unit>
        <trans-unit id="7870ea3fc10596df955abb619b60da2851a384ad" translate="yes" xml:space="preserve">
          <source>This module implements a singly-linked list container. It can be used as a stack.</source>
          <target state="translated">このモジュールは、シングルリンクのリストコンテナを実装しています。スタックとして使うことができます。</target>
        </trans-unit>
        <trans-unit id="b8ec77e995992fa015630679195d60252ee43e89" translate="yes" xml:space="preserve">
          <source>This module implements a variety of type constructors, i.e., templates that allow construction of new, useful general-purpose types.</source>
          <target state="translated">このモジュールは、様々な型コンストラクタ、すなわち、新しく有用な汎用型の構築を可能にするテンプレートを実装しています。</target>
        </trans-unit>
        <trans-unit id="64f274b864d84b8337845eb1c9cfcbc24ac5038e" translate="yes" xml:space="preserve">
          <source>This module implements experimental additions/modifications to &lt;a href=&quot;std_typecons&quot;&gt;&lt;code&gt;std.typecons&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、&lt;a href=&quot;std_typecons&quot;&gt; &lt;code&gt;std.typecons&lt;/code&gt; &lt;/a&gt;への実験的な追加/変更を実装しています。</target>
        </trans-unit>
        <trans-unit id="eaa4498639b5fb5cabef3038967389ce127f79a8" translate="yes" xml:space="preserve">
          <source>This module implements integral arithmetic primitives that check for out-of-range results.</source>
          <target state="translated">このモジュールは、範囲外の結果をチェックする積分演算プリミティブを実装しています。</target>
        </trans-unit>
        <trans-unit id="19bff9c3e2a27e1a7382004762c10f34a531050a" translate="yes" xml:space="preserve">
          <source>This module implements the formatting functionality for strings and I/O. It's comparable to C99's &lt;code&gt;vsprintf()&lt;/code&gt; and uses a similar format encoding scheme.</source>
          <target state="translated">このモジュールは、文字列とI / Oのフォーマット機能を実装します。これは、C99の &lt;code&gt;vsprintf()&lt;/code&gt; に相当し、同様の形式のエンコードスキームを使用します。</target>
        </trans-unit>
        <trans-unit id="c014fbea053ad61d3a5ae1fc743fb6c3131c1dfb" translate="yes" xml:space="preserve">
          <source>This module is a port of a growing fragment of the numeric header in Alexander Stepanov's &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_Template_Library&quot;&gt;Standard Template Library&lt;/a&gt;, with a few additions.</source>
          <target state="translated">このモジュールは、アレクサンダーステパノフの&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_Template_Library&quot;&gt;標準テンプレートライブラリ&lt;/a&gt;の数値ヘッダーの拡張フラグメントのポートであり、いくつか追加されています。</target>
        </trans-unit>
        <trans-unit id="186b66046159293951af2f7bf5b6d370eaa1c7f1" translate="yes" xml:space="preserve">
          <source>This module is a submodule of &lt;a href=&quot;std_container&quot;&gt;&lt;code&gt;std.container&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは&lt;a href=&quot;std_container&quot;&gt; &lt;code&gt;std.container&lt;/code&gt; の&lt;/a&gt;サブモジュールです。</target>
        </trans-unit>
        <trans-unit id="b888919ea96721208483544ffecc9a20b885369e" translate="yes" xml:space="preserve">
          <source>This module is a submodule of &lt;a href=&quot;std_range&quot;&gt;&lt;code&gt;std.range&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは&lt;a href=&quot;std_range&quot;&gt; &lt;code&gt;std.range&lt;/code&gt; の&lt;/a&gt;サブモジュールです。</target>
        </trans-unit>
        <trans-unit id="66276a22645692b59d3aafb558b5c8800653b392" translate="yes" xml:space="preserve">
          <source>This module is used to manipulate path strings.</source>
          <target state="translated">パス文字列を操作するためのモジュールです。</target>
        </trans-unit>
        <trans-unit id="1fb13153b51d693dc351aaf671b676f52a55b77c" translate="yes" xml:space="preserve">
          <source>This module only supports DWARF 3 and 4.</source>
          <target state="translated">このモジュールはDWARF 3と4のみをサポートしています。</target>
        </trans-unit>
        <trans-unit id="676c0f1d3f6966f52d6837dedf54ff7909b0c357" translate="yes" xml:space="preserve">
          <source>This module provides a &lt;code&gt;BinaryHeap&lt;/code&gt; (aka priority queue) adaptor that makes a binary heap out of any user-provided random-access range.</source>
          <target state="translated">このモジュールは、ユーザーが指定したランダムアクセス範囲からバイナリヒープを作成する &lt;code&gt;BinaryHeap&lt;/code&gt; （別名優先キュー）アダプターを提供します。</target>
        </trans-unit>
        <trans-unit id="71c4856d53f3e5b6efc2d0b1e712b1b6dc800220" translate="yes" xml:space="preserve">
          <source>This module provides a few predefined hooks (below) that add useful behavior to &lt;code&gt;Checked&lt;/code&gt;:</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Checked&lt;/code&gt; に有用な動作を追加するいくつかの事前定義されたフック（下記）を提供します。</target>
        </trans-unit>
        <trans-unit id="b737fcac62cfd177fb2788c39a8e794c75cf3e63" translate="yes" xml:space="preserve">
          <source>This module provides all kinds of functions to create, manipulate or convert arrays:</source>
          <target state="translated">このモジュールは、配列を作成、操作、変換するためのあらゆる種類の関数を提供します。</target>
        </trans-unit>
        <trans-unit id="744c3d7cd21f0164caf9f95d6fbb778bc3ca3903" translate="yes" xml:space="preserve">
          <source>This module provides an &lt;code&gt;Array&lt;/code&gt; type with deterministic memory usage not reliant on the GC, as an alternative to the built-in arrays.</source>
          <target state="translated">このモジュールは、組み込み配列の代わりに、GCに依存しない確定的なメモリ使用量を持つ &lt;code&gt;Array&lt;/code&gt; 型を提供します。</target>
        </trans-unit>
        <trans-unit id="223a76451a573bc8bae5a7f8a3df3aee7f1c9bdf" translate="yes" xml:space="preserve">
          <source>This module provides an interface to the garbage collector used by applications written in the D programming language. It allows the garbage collector in the runtime to be swapped without affecting binary compatibility of applications.</source>
          <target state="translated">このモジュールは、D プログラミング言語で書かれたアプリケーションで使用されるガベージコレクタへのインターフェイスを提供します。これにより、アプリケーションのバイナリ互換性に影響を与えることなく、ランタイムのガベージコレクタをスワップすることができます。</target>
        </trans-unit>
        <trans-unit id="45492b4e65c39718d334c504b40cf5ab9383e9f9" translate="yes" xml:space="preserve">
          <source>This module provides functions for compile time function composition. These functions are helpful when constructing predicates for the algorithms in &lt;a href=&quot;std_algorithm&quot;&gt;&lt;code&gt;std.algorithm&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;std_range&quot;&gt;&lt;code&gt;std.range&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、コンパイル時関数構成のための関数を提供します。これらの関数は、&lt;a href=&quot;std_algorithm&quot;&gt; &lt;code&gt;std.algorithm&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;std_range&quot;&gt; &lt;code&gt;std.range&lt;/code&gt; で&lt;/a&gt;アルゴリズムの述語を作成するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5d2a6ed25bc583d8e01cfa972338639c00d25698" translate="yes" xml:space="preserve">
          <source>This module provides two default implementations of Base64 encoding, &lt;a href=&quot;#Base64&quot;&gt;&lt;code&gt;Base64&lt;/code&gt;&lt;/a&gt; with a standard encoding alphabet, and a variant &lt;a href=&quot;#Base64URL&quot;&gt;&lt;code&gt;Base64URL&lt;/code&gt;&lt;/a&gt; that has a modified encoding alphabet designed to be safe for embedding in URLs and filenames.</source>
          <target state="translated">このモジュールは、2つのデフォルトのBase64エンコーディングの実装、提供&lt;a href=&quot;#Base64&quot;&gt; &lt;code&gt;Base64&lt;/code&gt; で&lt;/a&gt;標準符号化アルファベットと、および変異体&lt;a href=&quot;#Base64URL&quot;&gt; &lt;code&gt;Base64URL&lt;/code&gt; &lt;/a&gt; URLやファイル名に埋め込むために安全であるように設計改変コードアルファベットを有しています。</target>
        </trans-unit>
        <trans-unit id="14ea77a508973ad119aa38dedb9cc8889215b5e7" translate="yes" xml:space="preserve">
          <source>This module publicly imports &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt; and can be used as a stand-alone module.</source>
          <target state="translated">このモジュールは&lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; &lt;/a&gt;をパブリックにインポートし、スタンドアロンモジュールとして使用できます。</target>
        </trans-unit>
        <trans-unit id="821aad4a4d60f837d17e068e658c2b293af2fa2e" translate="yes" xml:space="preserve">
          <source>This module publicly imports &lt;code&gt;std.digest&lt;/code&gt; and can be used as a stand-alone module.</source>
          <target state="translated">このモジュールは &lt;code&gt;std.digest&lt;/code&gt; をパブリックにインポートし、スタンドアロンモジュールとして使用できます。</target>
        </trans-unit>
        <trans-unit id="b024b98a208b935e325d89f7c0523c717e6fc717" translate="yes" xml:space="preserve">
          <source>This module tells the garbage collector about the static data and bss segments, so the GC can scan them for roots. It does not deal with thread local static data.</source>
          <target state="translated">このモジュールは、静的データと bss セグメントについてガベージコレクタに伝え、GC がそれらをスキャンしてルートを探すことができるようにします。スレッドローカルの静的データは扱いません。</target>
        </trans-unit>
        <trans-unit id="0394ab52f6a74bfd6653d7622a7e2f41048f71f6" translate="yes" xml:space="preserve">
          <source>This module uses two main sources for generating human-readable data. First, it uses &lt;code&gt;backtrace_symbols&lt;/code&gt; to obtain the name of the symbols (functions or methods) associated with the addresses. Since the names are mangled, it will also call into &lt;code&gt;core.demangle&lt;/code&gt;, and doesn't need to use any DWARF information for this, however a future extension could make use of the call frame information (See DWARF4 &quot;6.4 Call Frame Information&quot;, PDF page 126).</source>
          <target state="translated">このモジュールは、人間が読めるデータを生成するために2つの主要なソースを使用します。まず、 &lt;code&gt;backtrace_symbols&lt;/code&gt; を使用して、アドレスに関連付けられているシンボル（関数またはメソッド）の名前を取得します。名前が &lt;code&gt;core.demangle&lt;/code&gt; されているため、core.demangleも呼び出され、これにDWARF情報を使用する必要はありませんが、将来の拡張でコールフレーム情報を使用する可能性があります（DWARF4「6.4コールフレーム情報」を参照）。 PDFページ126）。</target>
        </trans-unit>
        <trans-unit id="463dc59b1d8043356600fc31e94afe8ce61592b7" translate="yes" xml:space="preserve">
          <source>This modules defines some utility functions for DMD.</source>
          <target state="translated">このモジュールでは、DMDのユーティリティ機能を定義しています。</target>
        </trans-unit>
        <trans-unit id="43097636fc7721cda69a3011b02706b476fb53a5" translate="yes" xml:space="preserve">
          <source>This modules defines the entry point (main) for DMD, as well as related utilities needed for arguments parsing, path manipulation, etc... This file is not shared with other compilers which use the DMD front-end.</source>
          <target state="translated">このモジュールはDMDのエントリーポイント(メイン)と、引数の解析やパス操作などに必要な関連ユーティリティを定義します。このファイルは DMD フロントエンドを使用する他のコンパイラとは共有されません。</target>
        </trans-unit>
        <trans-unit id="8c5c0a58905cfb5b439b5201a82885c00dee51e2" translate="yes" xml:space="preserve">
          <source>This modules defines the help texts for the CLI options offered by DMD. This file is not shared with other compilers which use the DMD front-end. However, this file will be used to generate the &lt;a href=&quot;https://dlang.org/dmd-linux.html&quot;&gt;online documentation&lt;/a&gt; and MAN pages.</source>
          <target state="translated">このモジュールは、DMDが提供するCLIオプションのヘルプテキストを定義します。このファイルは、DMDフロントエンドを使用する他のコンパイラーと共有されません。ただし、このファイルは、&lt;a href=&quot;https://dlang.org/dmd-linux.html&quot;&gt;オンラインドキュメント&lt;/a&gt;とMANページの生成に使用されます。</target>
        </trans-unit>
        <trans-unit id="d366277495521395d02d0e8919a008889699c8b6" translate="yes" xml:space="preserve">
          <source>This modules implements the serialization of a lambda function. The serialization is computed by visiting the abstract syntax subtree of the given lambda function. The serialization is a string which contains the type of the parameters and the string represantation of the lambda expression.</source>
          <target state="translated">このモジュールはラムダ関数のシリアライズを実装します。シリアライズは、与えられたラムダ関数の抽象構文サブツリーを参照して計算されます。シリアライズは文字列で、パラメータの型とラムダ式の文字列表現を含みます。</target>
        </trans-unit>
        <trans-unit id="4686239dc1c916453ca8175a0c8f0fd5b10fd0f8" translate="yes" xml:space="preserve">
          <source>This mostly means checking that the &lt;a href=&quot;http://www.digitalmars.com/rtl/stdio.html#printf&quot;&gt;printf format specifier&lt;/a&gt; matches the corresponding D data type. Although printf is designed to handle 0 terminated strings, not D dynamic arrays of chars, it turns out that since D dynamic arrays are a length followed by a pointer to the data, the &lt;code&gt;%.*s&lt;/code&gt; format works:</source>
          <target state="translated">これは主に、&lt;a href=&quot;http://www.digitalmars.com/rtl/stdio.html#printf&quot;&gt;printf書式指定子&lt;/a&gt;が対応するDデータ型と一致することを確認することを意味します。printfはDの文字の動的配列ではなく0で終了する文字列を処理するように設計されていますが、Dの動的配列は長さの後にデータへのポインターが続くため、 &lt;code&gt;%.*s&lt;/code&gt; 形式が機能することがわかります。</target>
        </trans-unit>
        <trans-unit id="d2a9ab8f340972eb23caaae774d32f80fccc2570" translate="yes" xml:space="preserve">
          <source>This must be called when a scheduled thread terminates. It tears down the messaging system for the thread and notifies interested parties of the thread's termination.</source>
          <target state="translated">これはスケジュールされたスレッドが終了するときに呼ばれなければなりません。スレッドのメッセージングシステムを破壊し、スレッドの終了を関係者に通知します。</target>
        </trans-unit>
        <trans-unit id="a87fd9a7f939391e41bf76be573f03fa79c258b5" translate="yes" xml:space="preserve">
          <source>This opcode is not supported by the assembler, instead use</source>
          <target state="translated">このオペコードはアセンブラではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="475523109cd4bf257a07dadc9f0c389730bafbbb" translate="yes" xml:space="preserve">
          <source>This operation is both lock-free and atomic.</source>
          <target state="translated">この操作は、ロックフリーとアトミックの両方に対応しています。</target>
        </trans-unit>
        <trans-unit id="5080314419c68e07e9fbf46cb969bb8f7aec2b87" translate="yes" xml:space="preserve">
          <source>This overload converts a character input range to a &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">このオーバーロードは、文字入力範囲を &lt;code&gt;bool&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="d2f77cb81e183ee70aaac158a6010f060479e211" translate="yes" xml:space="preserve">
          <source>This overload of the digest function handles arrays.</source>
          <target state="translated">このダイジェスト関数のオーバーロードは配列を扱います。</target>
        </trans-unit>
        <trans-unit id="5b5704e7eb61d0c1141594f127f54400ac726629" translate="yes" xml:space="preserve">
          <source>This overload of the hexDigest function handles arrays.</source>
          <target state="translated">この hexDigest 関数のオーバーロードは配列を扱います。</target>
        </trans-unit>
        <trans-unit id="9b517602563a0a0437638b7de42771ba24220c9c" translate="yes" xml:space="preserve">
          <source>This override handles the following two cases: static foreach (i, i; [0]) { ... } and static foreach (i; [0]) { enum i = 2; }</source>
          <target state="translated">このオーバーライドは、次の2つのケースを処理します:static foreach (i,i;[0]){...と、static foreach (i;[0]){enum i=2;}です。}</target>
        </trans-unit>
        <trans-unit id="4b5c72b79cb5cdac8aa14be60be09b9790cb2ce2" translate="yes" xml:space="preserve">
          <source>This package also implements untyped composable memory allocators. They are</source>
          <target state="translated">本パッケージは、型なしのコンポーザブルメモリアロケータも実装しています。それらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5b7998033b82c18a421be4c93bdff9f111ea8e70" translate="yes" xml:space="preserve">
          <source>This package implements generic algorithms oriented towards the processing of sequences. Sequences processed by these functions define range-based interfaces. See also &lt;a href=&quot;std_range&quot;&gt;Reference on ranges&lt;/a&gt; and &lt;a href=&quot;http://ddili.org/ders/d.en/ranges.html&quot;&gt;tutorial on ranges&lt;/a&gt;.</source>
          <target state="translated">このパッケージは、シーケンスの処理に向けられた一般的なアルゴリズムを実装します。これらの関数によって処理されるシーケンスは、範囲ベースのインターフェースを定義します。参照&lt;a href=&quot;std_range&quot;&gt;範囲にリファレンスを&lt;/a&gt;し、&lt;a href=&quot;http://ddili.org/ders/d.en/ranges.html&quot;&gt;レンジのチュートリアル&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58c7d9c8a3cee8b3cf80c6b3b4132f86a95f5343" translate="yes" xml:space="preserve">
          <source>This package implements the hash-based message authentication code (HMAC) algorithm as defined in &lt;a href=&quot;http://tools.ietf.org/html/rfc2104&quot;&gt;RFC2104&lt;/a&gt;. See also the corresponding &lt;a href=&quot;http://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;Wikipedia article&lt;/a&gt;.</source>
          <target state="translated">このパッケージは、RFC2104で定義されているハッシュベースのメッセージ認証コード（HMAC）アルゴリズムを&lt;a href=&quot;http://tools.ietf.org/html/rfc2104&quot;&gt;実装し&lt;/a&gt;ます。対応する&lt;a href=&quot;http://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;ウィキペディアの記事&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b54b15a9491f8b22812d70e97f6e30656fbe4637" translate="yes" xml:space="preserve">
          <source>This points to a linked list of headers, struct curl_slist kind</source>
          <target state="translated">これは、ヘッダのリンクされたリスト、構造体 curl_slist kind を指します。</target>
        </trans-unit>
        <trans-unit id="4fa3e3f63776b5b0936a2fb2bebc42c79d485368" translate="yes" xml:space="preserve">
          <source>This points to a linked list of post entries, struct curl_httppost</source>
          <target state="translated">これは、記事エントリのリンクされたリスト、構造体 curl_httppost</target>
        </trans-unit>
        <trans-unit id="4709ade7923d0d8282a3479562e2dbd3f6142a8c" translate="yes" xml:space="preserve">
          <source>This points to a linked list of telnet options</source>
          <target state="translated">これは telnet オプションのリンク先リストを指しています。</target>
        </trans-unit>
        <trans-unit id="2d122d6794084d92dff4c8603b8a998294750f13" translate="yes" xml:space="preserve">
          <source>This pragma must directly precede an &lt;code&gt;extern(C)&lt;/code&gt; function declaration that must take no argument, even default ones. The function this pragma applies to will be inserted in &lt;code&gt;.init_array&lt;/code&gt; or &lt;code&gt;.ctors&lt;/code&gt;, depending on the target and compiler implementation. It is equivalent to GCC's &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-4.7.0/gcc/Function-Attributes.html&quot;&gt;&lt;code&gt;__attribute__((constructor))&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このプラグマは、デフォルトの引数であっても、引数を取ってはならない &lt;code&gt;extern(C)&lt;/code&gt; 関数宣言の直前になければなりません。このプラグマが適用される関数は、ターゲットとコンパイラの実装に応じて、 &lt;code&gt;.init_array&lt;/code&gt; または &lt;code&gt;.ctors&lt;/code&gt; に挿入されます。これは、GCCの&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-4.7.0/gcc/Function-Attributes.html&quot;&gt; &lt;code&gt;__attribute__((constructor))&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="62f59d77929e72a8f25d40e635e0a3a32957778c" translate="yes" xml:space="preserve">
          <source>This predicate must be an equivalence relation, that is, it must be reflexive (&lt;code&gt;pred(x,x)&lt;/code&gt; is always true), symmetric (&lt;code&gt;pred(x,y) == pred(y,x)&lt;/code&gt;), and transitive (&lt;code&gt;pred(x,y) &amp;amp;&amp;amp; pred(y,z)&lt;/code&gt; implies &lt;code&gt;pred(x,z)&lt;/code&gt;). If this is not the case, the range returned by chunkBy may assert at runtime or behave erratically.</source>
          <target state="translated">この述語は同値関係である必要があります。つまり、再帰的（ &lt;code&gt;pred(x,x)&lt;/code&gt; は常にtrue）、対称的（ &lt;code&gt;pred(x,y) == pred(y,x)&lt;/code&gt; ）、および推移的（ &lt;code&gt;pred(x,y) &amp;amp;&amp;amp; pred(y,z)&lt;/code&gt; &lt;code&gt;pred(x,z)&lt;/code&gt; 意味します）。そうでない場合、chunkByによって返される範囲は実行時にアサートするか、不規則に動作する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0a267b44ef886d9c8baf429e8671183b625c8796" translate="yes" xml:space="preserve">
          <source>This program reads standard in and writes it to standard out, pretty-printing any found D mangled names.</source>
          <target state="translated">このプログラムは、標準で読み込んだものを標準アウトに書き出し、見つかったDの変な名前をきれいに印刷します。</target>
        </trans-unit>
        <trans-unit id="afdb5e2e48fdacd7a6c8694592ad8b718667d89f" translate="yes" xml:space="preserve">
          <source>This property is overridden because the local time of the system could change while the program is running and we need to determine it dynamically rather than it being fixed like it would be with most time zones.</source>
          <target state="translated">このプロパティは、プログラムの実行中にシステムのローカル時間が変更される可能性があり、ほとんどのタイムゾーンのように固定されるのではなく、動的に決定する必要があるため、オーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="6d74dd10b5c800dca0bea3aabcacb84d776dbed7" translate="yes" xml:space="preserve">
          <source>This property sets and gets the default &lt;code&gt;Logger&lt;/code&gt;.</source>
          <target state="translated">このプロパティは、デフォルトの &lt;code&gt;Logger&lt;/code&gt; を設定および取得します。</target>
        </trans-unit>
        <trans-unit id="233904e9ff09001991edcef153035ddd2dc72e31" translate="yes" xml:space="preserve">
          <source>This property should not be used, but is supported for legacy purposes.</source>
          <target state="translated">このプロパティは使用すべきではありませんが、レガシー目的でサポートされています。</target>
        </trans-unit>
        <trans-unit id="0c0985b965d550bee9a97d40f84d906e5dd41300" translate="yes" xml:space="preserve">
          <source>This prototype applies to all conversion callbacks</source>
          <target state="translated">このプロトタイプはすべての変換コールバックに適用されます。</target>
        </trans-unit>
        <trans-unit id="362936247c39185758bfe185928298d458cd1898" translate="yes" xml:space="preserve">
          <source>This provides a transition from the non-promoting behavior of unary + - ~ to the C-like integral promotion behavior.</source>
          <target state="translated">これは、単項+-~の非推進動作から、Cのような積分推進動作への移行を提供します。</target>
        </trans-unit>
        <trans-unit id="42fdb37f7871dd64abfac735f6f1948def69313b" translate="yes" xml:space="preserve">
          <source>This provides a way to add functions to a class externally as if they were public final member functions, which enables &lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/component-programming-in-d/240008321&quot;&gt; function chaining and component programming&lt;/a&gt;.</source>
          <target state="translated">これにより、関数をパブリックな最終メンバー関数であるかのように外部でクラスに追加でき、&lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/component-programming-in-d/240008321&quot;&gt;関数の連鎖とコンポーネントのプログラミングが可能になります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b5e3135a675f967dd5c5470ea386f16d7ad31f41" translate="yes" xml:space="preserve">
          <source>This range iterates over fixed-sized chunks of size &lt;code&gt;chunkSize&lt;/code&gt; of a &lt;code&gt;source&lt;/code&gt; range. &lt;code&gt;Source&lt;/code&gt; must be an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;. &lt;code&gt;chunkSize&lt;/code&gt; must be greater than zero.</source>
          <target state="translated">この範囲は、 &lt;code&gt;source&lt;/code&gt; 範囲のサイズ &lt;code&gt;chunkSize&lt;/code&gt; の固定サイズのチャンクを反復処理します。 &lt;code&gt;Source&lt;/code&gt; は&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲で&lt;/a&gt;なければなりません。 &lt;code&gt;chunkSize&lt;/code&gt; はゼロより大きくなければなりません。</target>
        </trans-unit>
        <trans-unit id="ffdad1d5b9cd516ba877128f5377fd43732ba01e" translate="yes" xml:space="preserve">
          <source>This range splits a &lt;code&gt;source&lt;/code&gt; range into &lt;code&gt;chunkCount&lt;/code&gt; chunks of approximately equal length. &lt;code&gt;Source&lt;/code&gt; must be a forward range with known length.</source>
          <target state="translated">この範囲は、 &lt;code&gt;source&lt;/code&gt; 範囲をほぼ同じ長さの &lt;code&gt;chunkCount&lt;/code&gt; チャンクに分割します。 &lt;code&gt;Source&lt;/code&gt; は、長さがわかっている前方範囲である必要があります。</target>
        </trans-unit>
        <trans-unit id="99784cdd841b29b6c6c458a6a98700cdba67e67d" translate="yes" xml:space="preserve">
          <source>This range will be a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; if the underlying data source is at least a forward range.</source>
          <target state="translated">基になるデータソースが少なくとも&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前方の範囲である&lt;/a&gt;場合、この範囲は前方の範囲になります。</target>
        </trans-unit>
        <trans-unit id="87508ea3111ce555c431f5b202f7db1e58a43a32" translate="yes" xml:space="preserve">
          <source>This range will receive elements of &lt;code&gt;inputRange&lt;/code&gt; progressively as iteration proceeds.</source>
          <target state="translated">この範囲は、反復が進むにつれて徐々に &lt;code&gt;inputRange&lt;/code&gt; の要素を受け取ります。</target>
        </trans-unit>
        <trans-unit id="76aba1f55c69e82481c98e4e2c1338584cc1691e" translate="yes" xml:space="preserve">
          <source>This represents the category of &lt;code&gt;Throwable&lt;/code&gt; objects that are &lt;b&gt;not&lt;/b&gt; safe to catch and handle. In principle, one should not catch Error objects, as they represent unrecoverable runtime errors. Certain runtime guarantees may fail to hold when these errors are thrown, making it unsafe to continue execution after catching them.</source>
          <target state="translated">これは、安全にキャッチして処理&lt;b&gt;できない&lt;/b&gt; &lt;code&gt;Throwable&lt;/code&gt; オブジェクトのカテゴリを表します。原則として、エラーオブジェクトは回復できない実行時エラーを表すため、キャッチしないでください。これらのエラーがスローされると、特定の実行時保証が保持に失敗し、エラーをキャッチした後で実行を継続することが危険になる場合があります。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f5f588659c6a58c1ddf047b3a2039449d9c56d1c" translate="yes" xml:space="preserve">
          <source>This returns the evaluation value of performance as the ratio of baseFunc's time over targetFunc's time. If performance is high, this returns a high value.</source>
          <target state="translated">パフォーマンスの評価値を、baseFunc の時間と targetFunc の時間の比で返す。パフォーマンスが高い場合は、高い値を返す。</target>
        </trans-unit>
        <trans-unit id="f6949b897dc88b2038c4de24c6845ff78a726d87" translate="yes" xml:space="preserve">
          <source>This routine allows the runtime to process any special per-thread handling for the GC. This is needed for taking into account any memory that is referenced by non-scanned pointers but is about to be freed. That currently means the array append cache.</source>
          <target state="translated">このルーチンは、ランタイムが GC のための特別なスレッドごとの処理を処理することを可能にします。これは、非スキャンポインタによって参照されるが解放されようとしているメモリを考慮に入れるために必要です。これは現在、配列の追加キャッシュを意味します。</target>
        </trans-unit>
        <trans-unit id="08f408a77465437e08636b8afacc3919eb737cd7" translate="yes" xml:space="preserve">
          <source>This routine does not run thread-local static constructors when called. If full functionality as a D thread is desired, the following function must be called after thread_attachThis:</source>
          <target state="translated">このルーチンは、呼び出されてもスレッドローカルのスタティック・コンストラクタを実行しません。D スレッドとしての完全な機能が必要な場合は、thread_attachThis の後に以下の関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="29f29aed6bb63f2bb71ea82e3247723ea06a2ff1" translate="yes" xml:space="preserve">
          <source>This routine does not run thread-local static destructors when called. If full functionality as a D thread is desired, the following function must be called after thread_detachThis, particularly if the thread is being detached at some indeterminate time before program termination:</source>
          <target state="translated">このルーチンは、呼び出されてもスレッドローカルのスタティック・デストラクタを実行しません。D スレッドとしての完全な機能が望まれる場合、以下の関数は thread_detachThis の後に呼ばれなければなりません、特にプログラム終了前の不確定な時間にスレッドが切り離されている場合には。</target>
        </trans-unit>
        <trans-unit id="e2210ae223e7d7387e02e70f648478605beed923" translate="yes" xml:space="preserve">
          <source>This routine does not run thread-local static destructors when called. If full functionality as a D thread is desired, the following function must be called by the detached thread, particularly if the thread is being detached at some indeterminate time before program termination:</source>
          <target state="translated">このルーチンは、呼び出されてもスレッドローカルのスタティック・デストラクタを実行しません。D スレッドとしての完全な機能が必要な場合、以下の関数は、特にプログラム終了前の不確定な時間にスレッドが切り離されている場合には、切り離されたスレッドによって呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="47826c4895a3860e96fcff125901760f36d390ea" translate="yes" xml:space="preserve">
          <source>This routine is called at various points within concurrency-aware APIs to provide a scheduler a chance to yield execution when using some sort of cooperative multithreading model. If this is not appropriate, such as when each logical thread is backed by a dedicated kernel thread, this routine may be a no-op.</source>
          <target state="translated">このルーチンは、ある種の協調的マルチスレッドモデルを使用している場合に、スケジューラに実行の機会を提供するために、同時実行を意識したAPI内の様々なポイントで呼び出されます。各論理スレッドが専用のカーネルスレッドによってバックアップされている場合など、これが適切でない場合、このルーチンは実行されないかもしれません。</target>
        </trans-unit>
        <trans-unit id="09474f394a8e3b0e692c20bd617ea5e90dedaeea" translate="yes" xml:space="preserve">
          <source>This routine is called by spawn. It is expected to instantiate a new logical thread and run the supplied operation. This thread must call thisInfo.cleanup() when the thread terminates if the scheduled thread is not a kernel thread--all kernel threads will have their ThreadInfo cleaned up automatically by a thread-local destructor.</source>
          <target state="translated">このルーチンは spawn によって呼び出されます。新しい論理スレッドをインスタンス化し、指定された操作を実行することが期待されます。このスレッドは、スケジューリングされたスレッドがカーネルスレッドでない場合、スレッドが終了するときに thisInfo.cleanup()をコールしなければなりません --すべてのカーネルスレッドは、スレッドローカルのデストラクタによって自動的に ThreadInfo がクリーンアップされます。</target>
        </trans-unit>
        <trans-unit id="df7600e8a5ce5c3ece105f6eb175adf2b4921aaa" translate="yes" xml:space="preserve">
          <source>This routine is called by the runtime to run module unit tests on startup. The user-supplied unit tester will be called if one has been set, otherwise all unit tests will be run in sequence.</source>
          <target state="translated">このルーチンは、起動時にモジュールのユニットテストを実行するためにランタイムによって呼び出されます。ユーザが提供したユニットテストが設定されていれば呼び出され、そうでなければすべてのユニットテストが順番に実行されます。</target>
        </trans-unit>
        <trans-unit id="f8232f4d22c940d991cfdba88d087083634996f9" translate="yes" xml:space="preserve">
          <source>This routine may only be called once per thread instance.</source>
          <target state="translated">このルーチンは、スレッドインスタンスごとに一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5878411090cc704550555efc36dc55fc7cf0dd39" translate="yes" xml:space="preserve">
          <source>This routine must be called just prior to resuming all threads.</source>
          <target state="translated">このルーチンは、すべてのスレッドを再開する直前に呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="53cb6dbac5dae389abe55edf28bc4109aaf707d5" translate="yes" xml:space="preserve">
          <source>This routine must be preceded by a call to thread_suspendAll.</source>
          <target state="translated">このルーチンは、thread_suspendAllを呼び出す前に実行しなければなりません。</target>
        </trans-unit>
        <trans-unit id="cb9fbb3e9cb5f0e9bf7804e870b0289aa3f2cc00" translate="yes" xml:space="preserve">
          <source>This rule precludes any associative or commutative reordering of floating point expressions.</source>
          <target state="translated">この規則では、浮動小数点式の連想的な並び替えや可換的な並び替えは禁止されています。</target>
        </trans-unit>
        <trans-unit id="a889c8b355f9d26b9d8f09416cc5c638f19cc1bc" translate="yes" xml:space="preserve">
          <source>This scheduler does no explicit multiplexing, so this is a no-op.</source>
          <target state="translated">このスケジューラは明示的な多重化を行いませんので、これは実行できません。</target>
        </trans-unit>
        <trans-unit id="101357cb2b96f04e1249bc15480608aae10e36fd" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;ANSI_X3.4-1968&quot;, &quot;ANSI_X3.4-1986&quot;, &quot;ASCII&quot;, &quot;IBM367&quot;, &quot;ISO646-US&quot;, &quot;ISO_646.irv:1991&quot;, &quot;US-ASCII&quot;, &quot;cp367&quot;, &quot;csASCII&quot; &quot;iso-ir-6&quot;, &quot;us&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;ANSI_X3.4-1968&quot;,&quot;ANSI_X3.4-1986&quot;,&quot;ASCII&quot;,&quot;IBM367&quot;,&quot;ISO646-US&quot;,&quot;ISO_646.irv:1991&quot;,&quot;US-ASCII&quot;,&quot;cp367&quot;,&quot;csASCII&quot; &quot;iso-ir-6&quot;,&quot;us&quot;。</target>
        </trans-unit>
        <trans-unit id="f19febfbd6afd5a3316429731972510fc66c030b" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;CP819&quot;, &quot;IBM819&quot;, &quot;ISO-8859-1&quot;, &quot;ISO_8859-1&quot;, &quot;ISO_8859-1:1987&quot;, &quot;csISOLatin1&quot;, &quot;iso-ir-100&quot;, &quot;l1&quot;, &quot;latin1&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;CP819&quot;,&quot;IBM819&quot;,&quot;ISO-8859-1&quot;,&quot;ISO_8859-1&quot;,&quot;ISO_8859-1:1987&quot;,&quot;csISOLatin1&quot;,&quot;iso-ir-100&quot;,&quot;l1&quot;,&quot;latin1&quot;</target>
        </trans-unit>
        <trans-unit id="664030e2fd624069f198afd088ac055c78bd6022" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;Latin 2&quot;, &quot;ISO-8859-2&quot;, &quot;ISO_8859-2&quot;, &quot;ISO_8859-2:1999&quot;, &quot;Windows-28592&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;Latin 2&quot;,&quot;ISO-8859-2&quot;,&quot;ISO_8859-2&quot;,&quot;ISO_8859-2:1999&quot;,&quot;Windows-28592&quot;</target>
        </trans-unit>
        <trans-unit id="ade669f4e0479a561d644cf792664ebe8c58b7f3" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;UTF-16LE&quot; (little-endian architecture only) &quot;UTF-16BE&quot; (big-endian architecture only)</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;UTF-16LE」 (リトルエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16LE」 (リトルエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ</target>
        </trans-unit>
        <trans-unit id="270ab7b02be7a6bde21e8c3a620aecc09d063e99" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;UTF-32LE&quot; (little-endian architecture only) &quot;UTF-32BE&quot; (big-endian architecture only)</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;UTF-32LE」(リトルエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32LE」(リトルエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ</target>
        </trans-unit>
        <trans-unit id="bced95f493391cc0c075fc9dc4db4804161c397b" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;UTF-8&quot;</source>
          <target state="translated">このスキームでは、以下の名前を認識します。&quot;UTF-8&quot;</target>
        </trans-unit>
        <trans-unit id="c947e47deb508176a3928ec96e6e69a35c074c39" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;windows-1250&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;windows-1250&quot;</target>
        </trans-unit>
        <trans-unit id="a3402a215c1529c61ece58d5fce0d4798222c23b" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;windows-1251&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;windows-1251&quot;</target>
        </trans-unit>
        <trans-unit id="ded1d5e22b73a1f4af6cf6f2d1b37c6532f710c1" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;windows-1252&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;windows-1252&quot;</target>
        </trans-unit>
        <trans-unit id="d2dfa0f433df9d45239ecc782eb245fb19fd21d2" translate="yes" xml:space="preserve">
          <source>This seed function gives 2^w starting points (the lowest w bits of the value provided will be used). To allow the RNG to be started in any one of its internal states use the seed overload taking an InputRange.</source>
          <target state="translated">この seed 関数は 2^w の開始点を与えます(与えられた値の最下位 w ビットが使用されます)。RNG の内部状態のいずれかで開始できるようにするには,InputRange を引数とするシードオーバーロードを利用します.</target>
        </trans-unit>
        <trans-unit id="94a54cee12f5bd9b51532e5452c5a4a484e54378" translate="yes" xml:space="preserve">
          <source>This sets the current source line number to &lt;a href=&quot;#IntegerLiteral&quot;&gt;&lt;i&gt;IntegerLiteral&lt;/i&gt;&lt;/a&gt;, and optionally the current source file name to &lt;a href=&quot;#Filespec&quot;&gt;&lt;i&gt;Filespec&lt;/i&gt;&lt;/a&gt;, beginning with the next line of source text.</source>
          <target state="translated">これにより、現在のソース行番号が&lt;a href=&quot;#IntegerLiteral&quot;&gt;&lt;i&gt;IntegerLiteral&lt;/i&gt;&lt;/a&gt;に設定され、オプションで現在のソースファイル名がソーステキストの次の行から始まる&lt;a href=&quot;#Filespec&quot;&gt;&lt;i&gt;Filespec&lt;/i&gt;&lt;/a&gt;に設定されます。</target>
        </trans-unit>
        <trans-unit id="4be50da9e108662a57689b8ace75d7581f5375c8" translate="yes" xml:space="preserve">
          <source>This should be used to avoid dead-locks when the init expression waits for the result of another thread that might also call initOnce. Use with care.</source>
          <target state="translated">これは、init式がinitOnceを呼び出す可能性のある別のスレッドの結果を待っているときに、デッドロックを避けるために使用しなければなりません。注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="fe2d190a50345872c262cf5d3029bd911309ce44" translate="yes" xml:space="preserve">
          <source>This simply runs op directly, since no real scheduling is needed by this approach.</source>
          <target state="translated">このアプローチでは実際のスケジューリングは必要ないので、これは単純に op を直接実行します。</target>
        </trans-unit>
        <trans-unit id="c1f36fea04df939005e7ae3b3481769a9d3881d4" translate="yes" xml:space="preserve">
          <source>This software is distributed on an &quot;AS IS&quot; basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.</source>
          <target state="translated">このソフトウェアは「現状有姿」で配布されており、明示または黙示を問わず、いかなる種類の保証もありません。</target>
        </trans-unit>
        <trans-unit id="cce69bf7cc8f89b41a07f3aa1ac572a9417bd871" translate="yes" xml:space="preserve">
          <source>This software is licensed as described in the file COPYING, which you should have received as part of this distribution. The terms are also available at &lt;a href=&quot;http://curl.haxx.se/docs/copyright.html&quot;&gt;http://curl.haxx.se/docs/copyright.html&lt;/a&gt;.</source>
          <target state="translated">このソフトウェアは、COPYINGファイルで説明されているようにライセンスされています。このファイルは、この配布の一部として受け取る必要があります。これらの条件は、&lt;a href=&quot;http://curl.haxx.se/docs/copyright.html&quot;&gt;http://curl.haxx.se/docs/copyright.html&lt;/a&gt;でも入手できます。</target>
        </trans-unit>
        <trans-unit id="5a35b5b2fcea0cd5e1372a50fcdb64c90186c1d8" translate="yes" xml:space="preserve">
          <source>This string mixin generator allows one to create tagged class reference inside structs and classes.</source>
          <target state="translated">この文字列混合生成器を使用すると、構造体やクラスの内部にタグ付きのクラス参照を作成することができます。</target>
        </trans-unit>
        <trans-unit id="89b88529e193e34ffae54fa1436ac384d8a51298" translate="yes" xml:space="preserve">
          <source>This string mixin generator allows one to create tagged pointers inside structs and classes.</source>
          <target state="translated">この文字列混合ジェネレータを使用すると、構造体やクラスの内部にタグ付きポインタを作成することができます。</target>
        </trans-unit>
        <trans-unit id="fa44f8a37539dd0c481f757fd2c6c916db973189" translate="yes" xml:space="preserve">
          <source>This struct encapsulates all functionality related to the underlying runtime module for the calling context.</source>
          <target state="translated">この構造体は、呼び出しコンテキストの基礎となるランタイム・モジュールに関連するすべての機能をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="93192c346919e8c29838bf372e377e45a2bf11e8" translate="yes" xml:space="preserve">
          <source>This struct encapsulates all garbage collection functionality for the D programming language.</source>
          <target state="translated">この構造体は、D プログラミング言語のすべてのガベージコレクション機能をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="c0b4243b7a8d23b55f18ae71ce114f500fc9e037" translate="yes" xml:space="preserve">
          <source>This struct is needed for TemplateInstance to be the key in an associative array. Fixing &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=15812&quot;&gt;https://issues.dlang.org/show_bug.cgi?id=15812&lt;/a&gt; and &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=15813&quot;&gt;https://issues.dlang.org/show_bug.cgi?id=15813&lt;/a&gt; would make it unnecessary.</source>
          <target state="translated">この構造体は、TemplateInstanceが連想配列のキーになるために必要です。&lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=15812&quot;&gt;https://issues.dlang.org/show_bug.cgi?id=15812&lt;/a&gt;および&lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=15813&quot;&gt;https://issues.dlang.org/show_bug.cgi?id=15813&lt;/a&gt;を修正すると、不要になります。</target>
        </trans-unit>
        <trans-unit id="ba71ab789db33d9d41fe31ac671b08fc2ff9a27c" translate="yes" xml:space="preserve">
          <source>This struct is not intended to be created in user code directly; use the &lt;a href=&quot;#decoder&quot;&gt;&lt;code&gt;decoder&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="translated">この構造体は、ユーザーコードで直接作成するためのものではありません。代わりに&lt;a href=&quot;#decoder&quot;&gt; &lt;code&gt;decoder&lt;/code&gt; &lt;/a&gt;機能を使用してください。</target>
        </trans-unit>
        <trans-unit id="c808480f164a9ce60af47373128f270ece2f4c37" translate="yes" xml:space="preserve">
          <source>This struct is not intended to be created in user code directly; use the &lt;a href=&quot;#encoder&quot;&gt;&lt;code&gt;encoder&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="translated">この構造体は、ユーザーコードで直接作成するためのものではありません。代わりに&lt;a href=&quot;#encoder&quot;&gt; &lt;code&gt;encoder&lt;/code&gt; &lt;/a&gt;関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="bf5472fdbac439d01e7f55c549978ae9fe484216" translate="yes" xml:space="preserve">
          <source>This struct takes two ranges, &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;indices&lt;/code&gt;, and creates a view of &lt;code&gt;source&lt;/code&gt; as if its elements were reordered according to &lt;code&gt;indices&lt;/code&gt;. &lt;code&gt;indices&lt;/code&gt; may include only a subset of the elements of &lt;code&gt;source&lt;/code&gt; and may also repeat elements.</source>
          <target state="translated">この構造体は、 &lt;code&gt;source&lt;/code&gt; と &lt;code&gt;indices&lt;/code&gt; 2つの範囲を取り、その要素が &lt;code&gt;indices&lt;/code&gt; に従って並べ替えられているかのように &lt;code&gt;source&lt;/code&gt; ビューを作成します。 &lt;code&gt;indices&lt;/code&gt; は、 &lt;code&gt;source&lt;/code&gt; の要素のサブセットのみを含めることができ、要素を繰り返すこともできます。</target>
        </trans-unit>
        <trans-unit id="321a83cb6c2189fda5f0740151e0077549cc346c" translate="yes" xml:space="preserve">
          <source>This struct uses interior pointers for callbacks. Only allocate it on the stack if you never move or copy it. This also means passing by reference when passing Curl to other functions. Otherwise always allocate on the heap.</source>
          <target state="translated">この構造体は、コールバックに内部ポインタを使用します。移動やコピーを行わない場合はスタック上にのみ確保してください。これは、Curl を他の関数に渡す際に参照で渡すことも意味します。それ以外の場合は、常にヒープ上で確保してください。</target>
        </trans-unit>
        <trans-unit id="9b4fde43b38a0e50f9025a0370a796c10515fd4f" translate="yes" xml:space="preserve">
          <source>This template defines a simple struct to represent bitwise OR combinations of enum values. It can be used if all the enum values are integral constants with a bit count of at most 1, or if the &lt;code&gt;unsafe&lt;/code&gt; parameter is explicitly set to Yes. This is much safer than using the enum itself to store the OR combination, which can produce surprising effects like this:</source>
          <target state="translated">このテンプレートは、列挙値のビットごとのOR組み合わせを表す単純な構造体を定義します。すべての列挙値が最大1のビット数の整数定数である場合、または &lt;code&gt;unsafe&lt;/code&gt; パラメーターが明示的にYesに設定されている場合に使用できます。これは、列挙型自体を使用してORの組み合わせを格納するよりもはるかに安全です。これにより、次のような驚くべき効果が得られます。</target>
        </trans-unit>
        <trans-unit id="ed7a16b135cb8df8ef4a3a540a84c393a96223c7" translate="yes" xml:space="preserve">
          <source>This template evaluates if the passed &lt;code&gt;LogLevel&lt;/code&gt; is active. The previously described version statements are used to decide if the &lt;code&gt;LogLevel&lt;/code&gt; is active. The version statements only influence the compile unit they are used with, therefore this function can only disable logging this specific compile unit.</source>
          <target state="translated">このテンプレートは、渡された &lt;code&gt;LogLevel&lt;/code&gt; がアクティブかどうかを評価します。前述のバージョンステートメントは、 &lt;code&gt;LogLevel&lt;/code&gt; がアクティブかどうかを決定するために使用されます。バージョンステートメントは、それらが使用されるコンパイル単位にのみ影響を与えるため、この関数は、この特定のコンパイル単位のロギングのみを無効にできます。</target>
        </trans-unit>
        <trans-unit id="bf1947986c71233faa898611680a1e6ac855b2d0" translate="yes" xml:space="preserve">
          <source>This template is used instead of &lt;code&gt;cmpTimeUnits&lt;/code&gt; because exceptions can't be thrown at compile time and &lt;code&gt;cmpTimeUnits&lt;/code&gt; must enforce that the strings it's given are valid time unit strings. This template uses a template constraint instead.</source>
          <target state="translated">コンパイル時に例外をスローすることはできず、 &lt;code&gt;cmpTimeUnits&lt;/code&gt; は指定された文字列が有効な時間単位の文字列であることを強制する必要があるため、 &lt;code&gt;cmpTimeUnits&lt;/code&gt; の代わりにこのテンプレートが使用されます。このテンプレートは、代わりにテンプレート制約を使用します。</target>
        </trans-unit>
        <trans-unit id="721049b2d1b7c17de4953e979423c5d9509ce4dc" translate="yes" xml:space="preserve">
          <source>This template provides the global &lt;code&gt;printf&lt;/code&gt;-style log functions with the &lt;code&gt;LogLevel&lt;/code&gt; is encoded in the function name.</source>
          <target state="translated">このテンプレートは、グローバルな &lt;code&gt;printf&lt;/code&gt; スタイルのログ関数を提供し、 &lt;code&gt;LogLevel&lt;/code&gt; は関数名にエンコードされます。</target>
        </trans-unit>
        <trans-unit id="95faefdf67a9c230f11cf5997976bb55047f6e84" translate="yes" xml:space="preserve">
          <source>This template provides the global log functions with the &lt;code&gt;LogLevel&lt;/code&gt; is encoded in the function name.</source>
          <target state="translated">このテンプレートは、 &lt;code&gt;LogLevel&lt;/code&gt; が関数名にエンコードされたグローバルログ関数を提供します。</target>
        </trans-unit>
        <trans-unit id="a660b19c7d186bc39b4f6c265fe64cdd5e100bb7" translate="yes" xml:space="preserve">
          <source>This template provides the log functions for the &lt;code&gt;Logger&lt;/code&gt;&lt;code&gt;class&lt;/code&gt; with the &lt;code&gt;LogLevel&lt;/code&gt; encoded in the function name.</source>
          <target state="translated">このテンプレートは、のログ機能を提供 &lt;code&gt;Logger&lt;/code&gt; &lt;code&gt;class&lt;/code&gt; と &lt;code&gt;LogLevel&lt;/code&gt; 関数名でエンコード。</target>
        </trans-unit>
        <trans-unit id="649dff2094ef00bc31b9858d34965ac9fc9b644e" translate="yes" xml:space="preserve">
          <source>This template returns the &lt;code&gt;LogLevel&lt;/code&gt; named &quot;logLevel&quot; of type &lt;code&gt;LogLevel&lt;/code&gt; defined in a user defined module where the filename has the suffix &quot;loggerconfig.d&quot;. This &lt;code&gt;LogLevel&lt;/code&gt; sets the minimal &lt;code&gt;LogLevel&lt;/code&gt; of the module.</source>
          <target state="translated">このテンプレートは、ユーザー定義のモジュールで定義されたタイプ &lt;code&gt;LogLevel&lt;/code&gt; の「logLevel」という名前の &lt;code&gt;LogLevel&lt;/code&gt; を返します。ファイル名には「loggerconfig.d」というサフィックスが付いています。この &lt;code&gt;LogLevel&lt;/code&gt; は、モジュールの最小 &lt;code&gt;LogLevel&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="965d72a63b18d413b5715e4a973525a9b52a396c" translate="yes" xml:space="preserve">
          <source>This time zone's offset from UTC with west of UTC being negative (it is added to UTC to get the adjusted time).</source>
          <target state="translated">このタイムゾーンのUTCからのオフセットは、UTCの西が負になっています(調整された時間を得るためにUTCに加算されます)。</target>
        </trans-unit>
        <trans-unit id="b7456f76fa17160c9c0587cc7d1c50d1dbf69825" translate="yes" xml:space="preserve">
          <source>This type is only used by the interpreter.</source>
          <target state="translated">この型はインタプリタでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="bfaad68c51bc3ac5b55f9911a6ad3e337bcd2001" translate="yes" xml:space="preserve">
          <source>This type is returned by the module unit test handler to indicate testing results.</source>
          <target state="translated">この型は、モジュールのユニットテストハンドラによって返され、テスト結果を示します。</target>
        </trans-unit>
        <trans-unit id="fe05b2c35b150ac51e9c5a58b58b8bdf4deb8005" translate="yes" xml:space="preserve">
          <source>This uniformly outdents the text as much as possible. Whitespace-only lines are always converted to blank lines.</source>
          <target state="translated">これにより、テキストは可能な限り一様にアウトデントされます。空白のみの行は常に空白行に変換されます。</target>
        </trans-unit>
        <trans-unit id="1b0c762aaeeda93028fb7042712ade026276dad3" translate="yes" xml:space="preserve">
          <source>This unittest verifies that &lt;code&gt;myFunc&lt;/code&gt; contains only &lt;code&gt;@safe&lt;/code&gt;, &lt;code&gt;nothrow&lt;/code&gt; code. Although this can also be accomplished by attaching these attributes to &lt;code&gt;myFunc&lt;/code&gt; itself, that would prevent &lt;code&gt;myFunc&lt;/code&gt; from being instantiated with types &lt;code&gt;T&lt;/code&gt; that have &lt;code&gt;@system&lt;/code&gt; or throwing code in their &lt;code&gt;opAssign&lt;/code&gt; method, or other methods that &lt;code&gt;myFunc&lt;/code&gt; may call. The above idiom allows &lt;code&gt;myFunc&lt;/code&gt; to be instantiated with such types, yet at the same time verify that the &lt;code&gt;@system&lt;/code&gt; and throwing behavior is not introduced by the code within &lt;code&gt;myFunc&lt;/code&gt; itself.</source>
          <target state="translated">このユニットテスト検証 &lt;code&gt;myFunc&lt;/code&gt; というのだけ含まれている &lt;code&gt;@safe&lt;/code&gt; 、 &lt;code&gt;nothrow&lt;/code&gt; コード。これは、これらの属性を &lt;code&gt;myFunc&lt;/code&gt; 自体にアタッチすることでも実現できますが、 &lt;code&gt;myFunc&lt;/code&gt; が含まれる &lt;code&gt;T&lt;/code&gt; 型でmyFuncがインスタンス化されたり、 &lt;code&gt;opAssign&lt;/code&gt; メソッドや &lt;code&gt;myFunc&lt;/code&gt; が呼び出す他のメソッドでコードが &lt;code&gt;@system&lt;/code&gt; たりすることはありません。上記のイディオムを使用すると、 &lt;code&gt;myFunc&lt;/code&gt; をこのようなタイプでインスタンス化できますが、同時に &lt;code&gt;@system&lt;/code&gt; およびスロー動作が &lt;code&gt;myFunc&lt;/code&gt; 自体のコードによって導入されていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="6d997c4734cfeb63e2eb24775621ef1b07f282bd" translate="yes" xml:space="preserve">
          <source>This used to be in druntime, but contained a reference to Dmain which didn't work when druntime was made into a dll and was linked to a program, such as a C++ program, that didn't have a Dmain.</source>
          <target state="translated">これは druntime に含まれていましたが、druntime を dll にして Dmain を持たない C++プログラムなどのプログラムにリンクした場合には動作しない Dmain への参照が含まれていました。</target>
        </trans-unit>
        <trans-unit id="630760402237caac7d04f49e204e2dbcf15d6147" translate="yes" xml:space="preserve">
          <source>This uses the underlying C calls to adjust the time rather than using specific D code based off of system settings to calculate the time such as &lt;a href=&quot;#PosixTimeZone&quot;&gt;&lt;code&gt;PosixTimeZone&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#WindowsTimeZone&quot;&gt;&lt;code&gt;WindowsTimeZone&lt;/code&gt;&lt;/a&gt; do. That also means that it will use whatever the current time zone is on the system, even if the system's time zone changes while the program is running.</source>
          <target state="translated">これは、&lt;a href=&quot;#PosixTimeZone&quot;&gt; &lt;code&gt;PosixTimeZone&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#WindowsTimeZone&quot;&gt; &lt;code&gt;WindowsTimeZone&lt;/code&gt; &lt;/a&gt;などの時間を計算するためにシステム設定に基づく特定のDコードを使用するのではなく、基になるC呼び出しを使用して時間を調整します。これは、プログラムの実行中にシステムのタイムゾーンが変更された場合でも、システム上の現在のタイムゾーンを使用することも意味します。</target>
        </trans-unit>
        <trans-unit id="6c0591e1a6e9bca143fbe15c58217719c4322b5a" translate="yes" xml:space="preserve">
          <source>This value is set at startup time of the application. It's safe to use early in the start process, like in shared module constructors and initialization of the D runtime itself.</source>
          <target state="translated">この値はアプリケーションの起動時に設定されます。共有モジュールのコンストラクタやDランタイム自体の初期化など、起動プロセスの早い段階で使用するのが無難です。</target>
        </trans-unit>
        <trans-unit id="222ffc2d96135317dcd7f4e64432ee48d6b47aca" translate="yes" xml:space="preserve">
          <source>This variable sets the Scheduler behavior within this program. Typically, when setting a Scheduler, scheduler.start() should be called in main. This routine will not return until program execution is complete.</source>
          <target state="translated">この変数は、プログラム内でのスケジューラの動作を設定します。通常、スケジューラを設定する際には、メインでscheduler.start()を呼び出す必要があります。このルーチンは、プログラムの実行が完了するまで戻りません。</target>
        </trans-unit>
        <trans-unit id="350617ff126e41fac846ab28e60173b84f0e36ad" translate="yes" xml:space="preserve">
          <source>This version does a merge even if the deco is already computed. Necessary for types that have a deco, but are not merged.</source>
          <target state="translated">このバージョンでは、デコが既に計算されている場合でもマージを行います。デコを持っていてもマージされない型に必要です。</target>
        </trans-unit>
        <trans-unit id="ca9704bfd218246a881b4d0fdbb145b4f7ed6074" translate="yes" xml:space="preserve">
          <source>This version manages its own read buffer, which means one memory allocation per call. If you are not retaining a reference to the read data, consider the &lt;code&gt;File.readln(buf)&lt;/code&gt; version, which may offer better performance as it can reuse its read buffer.</source>
          <target state="translated">このバージョンは、独自の読み取りバッファーを管理します。つまり、呼び出しごとに1つのメモリが割り当てられます。読み取りデータへの参照を保持しない場合は、 &lt;code&gt;File.readln(buf)&lt;/code&gt; バージョンを検討してください。これにより、読み取りバッファーを再利用できるため、パフォーマンスが向上する可能性があります。</target>
        </trans-unit>
        <trans-unit id="4730e8481a2bf9923ca7e3e571c62d109e3d3d83" translate="yes" xml:space="preserve">
          <source>This version manages its own read buffer, which means one memory allocation per call. If you are not retaining a reference to the read data, consider the &lt;code&gt;readln(buf)&lt;/code&gt; version, which may offer better performance as it can reuse its read buffer.</source>
          <target state="translated">このバージョンは、独自の読み取りバッファーを管理します。つまり、呼び出しごとに1つのメモリが割り当てられます。読み取りデータへの参照を保持しない場合は、読み取りバッファーを再利用できるため、パフォーマンスが向上する &lt;code&gt;readln(buf)&lt;/code&gt; バージョンを検討してください。</target>
        </trans-unit>
        <trans-unit id="5d0ffd1140b6bdea2f557dabf439528af74c3f10" translate="yes" xml:space="preserve">
          <source>This version replaces all of the matches found in &lt;code&gt;input&lt;/code&gt;, see &lt;a href=&quot;#replaceFirst&quot;&gt;&lt;code&gt;replaceFirst&lt;/code&gt;&lt;/a&gt; to replace the first match only.</source>
          <target state="translated">このバージョンは、 &lt;code&gt;input&lt;/code&gt; で見つかったすべての一致を置き換えます。最初の一致のみを置き換えるには、&lt;a href=&quot;#replaceFirst&quot;&gt; &lt;code&gt;replaceFirst&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="58e4144e8bfe93d9e0c64e9b4fdfd2a6a17871d2" translate="yes" xml:space="preserve">
          <source>This version replaces the first match in &lt;code&gt;input&lt;/code&gt;, see &lt;a href=&quot;#replaceAll&quot;&gt;&lt;code&gt;replaceAll&lt;/code&gt;&lt;/a&gt; to replace the all of the matches.</source>
          <target state="translated">このバージョンは &lt;code&gt;input&lt;/code&gt; の最初の一致を置き換えます。すべての一致を置き換えるには&lt;a href=&quot;#replaceAll&quot;&gt; &lt;code&gt;replaceAll&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ff770a07d7fe1b2d8549b2bfe1914ce344e62c1a" translate="yes" xml:space="preserve">
          <source>This way negative spans until 10, then positive until 50, then negative until 60, then positive until 61, and so on. As seen this provides a space-efficient storage of highly redundant data that comes in long runs. A description which Unicode &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; properties fit nicely. The technique itself could be seen as a variation on &lt;a href=&quot;https://en.wikipedia.org/wiki/Run-length_encoding&quot;&gt;RLE encoding&lt;/a&gt;.</source>
          <target state="translated">このようにして、負は10まで、次に50までは正、次に60までは負、次に61までは正、というように続きます。見てわかるように、これは長期的に実行される冗長性の高いデータのスペース効率の良いストレージを提供します。Unicode &lt;a href=&quot;#Character&quot;&gt;文字&lt;/a&gt;プロパティが適切に適合する説明。この手法自体は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Run-length_encoding&quot;&gt;RLEエンコーディングの&lt;/a&gt;バリエーションと見なすことができます。</target>
        </trans-unit>
        <trans-unit id="9d7e80d5423ced31332c30ecab9af5e8333da350" translate="yes" xml:space="preserve">
          <source>This will print a message to the &lt;code&gt;stderr&lt;/code&gt; device. The message will contain the filename, the line number, the name of the surrounding function, the time and the message.  More complex log call can go along the lines like:</source>
          <target state="translated">これにより、メッセージが &lt;code&gt;stderr&lt;/code&gt; デバイスに出力されます。メッセージには、ファイル名、行番号、周囲の関数の名前、時間、メッセージが含まれます。より複雑なログ呼び出しは次のような行に沿って進むことができます：</target>
        </trans-unit>
        <trans-unit id="7bbc11a96caae26edcdd1170876c310429d5242c" translate="yes" xml:space="preserve">
          <source>This wrapper function documents commitment on the part of the caller that the appropriate steps have been taken to avoid whatever conditions may trigger an exception during the evaluation of &lt;code&gt;expr&lt;/code&gt;. If it turns out that the expression</source>
          <target state="translated">このラッパー関数は、 &lt;code&gt;expr&lt;/code&gt; の評価中に例外をトリガーする可能性のある条件を回避するために適切な手順が実行された呼び出し側のコミットメントを文書化します。その式が</target>
        </trans-unit>
        <trans-unit id="e1c33135ff86972a6ed3b9c446ccc19496208487" translate="yes" xml:space="preserve">
          <source>Though any arbitrary D code is allowed in the &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; contract blocks, their only function should be to verify incoming and outgoing data. It is important to ensure that the code has no side effects, and that the release version of the code will not depend on any effects of the code. For a release build of the code, &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; contracts are not inserted.</source>
          <target state="translated">任意のDコードが &lt;code&gt;in&lt;/code&gt; および &lt;code&gt;out&lt;/code&gt; コントラクトブロックで許可されていますが、それらの唯一の機能は、着信および発信データを検証することです。コードに副作用がないこと、およびコードのリリースバージョンがコードの影響に依存しないことを確認することが重要です。コードのリリースビルドの場合、 &lt;code&gt;in&lt;/code&gt; コントラクトと &lt;code&gt;out&lt;/code&gt; コントラクトは挿入されません。</target>
        </trans-unit>
        <trans-unit id="820043383b2d6abecf10763532e4c82a66d9247e" translate="yes" xml:space="preserve">
          <source>Thread &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">スレッド &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="04c6d1513db9ed02d67521add8386801a5b34539" translate="yes" xml:space="preserve">
          <source>Thread &lt;strong id=&quot;thread_attachThis&quot;&gt;thread_attachThis&lt;/strong&gt;();</source>
          <target state="translated">スレッド&lt;strong id=&quot;thread_attachThis&quot;&gt;thread_attachThis&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="1f330e4c64cef67c5a0e2c92e690f07993e4d060" translate="yes" xml:space="preserve">
          <source>Thread Local Redirection</source>
          <target state="translated">スレッドローカルリダイレクション</target>
        </trans-unit>
        <trans-unit id="84f19dfef7c6980d5ce82fb1aaa5685b925bb278" translate="yes" xml:space="preserve">
          <source>Thread creation and management.</source>
          <target state="translated">スレッドの作成と管理。</target>
        </trans-unit>
        <trans-unit id="77ad25b2a19fb9a3d515d2ce54db487fb84795e8" translate="yes" xml:space="preserve">
          <source>Thread-local memory locations</source>
          <target state="translated">スレッドローカルメモリの位置</target>
        </trans-unit>
        <trans-unit id="35ec6af76df19383c52b8f66c7369b7f13dd32d0" translate="yes" xml:space="preserve">
          <source>ThreadError if the resume operation fails for a running thread.</source>
          <target state="translated">実行中のスレッドで再開操作に失敗した場合の ThreadError</target>
        </trans-unit>
        <trans-unit id="9e4b42c8be29f1c6cbd83e3ca1f8a1f5acbf80c3" translate="yes" xml:space="preserve">
          <source>ThreadError if the suspend operation fails for a running thread.</source>
          <target state="translated">実行中のスレッドでサスペンド操作に失敗した場合の ThreadError</target>
        </trans-unit>
        <trans-unit id="2464c0788d3d18de94ad9135c7e0e048ee525f11" translate="yes" xml:space="preserve">
          <source>ThreadException if the operation fails. Any exception not handled by the joined thread.</source>
          <target state="translated">操作に失敗した場合のThreadException。結合されたスレッドで処理されない例外。</target>
        </trans-unit>
        <trans-unit id="988c5cc71109eafcf99c8ab21fce21fe97ec770d" translate="yes" xml:space="preserve">
          <source>ThreadException if the thread fails to start.</source>
          <target state="translated">スレッドの開始に失敗した場合のThreadException</target>
        </trans-unit>
        <trans-unit id="1cf40193fb824b4f6ad8cb26327d035d6a028786" translate="yes" xml:space="preserve">
          <source>ThreadID &lt;code&gt;addr&lt;/code&gt;</source>
          <target state="translated">ThreadID &lt;code&gt;addr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f7ed723eeac4df5e125f2b0678ab67abc0922b8b" translate="yes" xml:space="preserve">
          <source>ThreadID &lt;code&gt;tid&lt;/code&gt;</source>
          <target state="translated">ThreadID &lt;code&gt;tid&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f726da94b243f6df0f10d0a1927ff4f089c0ce2" translate="yes" xml:space="preserve">
          <source>Three Valued Logic on Wikipedia</source>
          <target state="translated">ウィキペディアに掲載されている3つの価値あるロジック</target>
        </trans-unit>
        <trans-unit id="041271075c6e4b6b2987479db37b359cf95b9df5" translate="yes" xml:space="preserve">
          <source>Throw Statement</source>
          <target state="translated">スローステートメント</target>
        </trans-unit>
        <trans-unit id="a99ee7b003bda4ab0516b744e02d6d8979581b73" translate="yes" xml:space="preserve">
          <source>Throw a D object.</source>
          <target state="translated">Dオブジェクトを投げる。</target>
        </trans-unit>
        <trans-unit id="811a07f7fa5dfaadc18e11fed4ce882015f391d7" translate="yes" xml:space="preserve">
          <source>Throw a MailboxFull exception.</source>
          <target state="translated">MailboxFull例外をスローします。</target>
        </trans-unit>
        <trans-unit id="57315ab12c3532377a724ba12831fde623b6e79a" translate="yes" xml:space="preserve">
          <source>ThrowOnError &lt;code&gt;throwOnError&lt;/code&gt;</source>
          <target state="translated">ThrowOnError &lt;code&gt;throwOnError&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8abf11297f412ee4fff55514bb434f634e293565" translate="yes" xml:space="preserve">
          <source>Throwable</source>
          <target state="translated">Throwable</target>
        </trans-unit>
        <trans-unit id="d49a4962de645ce124e96bde4ce448c93911dad9" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;e1&lt;/code&gt;</source>
          <target state="translated">スロー可能な &lt;code&gt;e1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8bea49f69b95bd4c7986b53182b30e586c968d01" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;e2&lt;/code&gt;</source>
          <target state="translated">スロー可能な &lt;code&gt;e2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c3508159ea74e593b1f8f83bb63c996e12b6d4b0" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;e&lt;/code&gt;</source>
          <target state="translated">スローアブル &lt;code&gt;e&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="181dadb1ebd21977fc70a4734b2c296e2903f089" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;ex&lt;/code&gt;</source>
          <target state="translated">スロー可能な &lt;code&gt;ex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bd2954e71e7cefaff13ce8e463c354cbaac4f4d" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;next&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; 投げる</target>
        </trans-unit>
        <trans-unit id="7daca6bf6d530d9a8e0dd28e96710df7d9ed3bc1" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;o&lt;/code&gt;</source>
          <target state="translated">スロー可能な &lt;code&gt;o&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5722462feb7ab62b6beb25519312de887c65befc" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">スロー可能な &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3bf36d01f399602316eb8550fa8ea67915755f2" translate="yes" xml:space="preserve">
          <source>Throwable &lt;strong id=&quot;__dmd_begin_catch&quot;&gt;__dmd_begin_catch&lt;/strong&gt;(_Unwind_Exception* exceptionObject);</source>
          <target state="translated">Throwableを&lt;strong id=&quot;__dmd_begin_catch&quot;&gt;__dmd_begin_catch&lt;/strong&gt;（_Unwind_Exception * exceptionObject）。</target>
        </trans-unit>
        <trans-unit id="ad43afcb02ba70a606fef1b16e48cd558c53facc" translate="yes" xml:space="preserve">
          <source>Throwable &lt;strong id=&quot;_d_newThrowable&quot;&gt;_d_newThrowable&lt;/strong&gt;(const TypeInfo_Class ci);</source>
          <target state="translated">Throwable &lt;strong id=&quot;_d_newThrowable&quot;&gt;_d_newThrowable&lt;/strong&gt;（const TypeInfo_Class ci）;</target>
        </trans-unit>
        <trans-unit id="8b0b716c6a4da9650ea963345d9f03fa5190cefb" translate="yes" xml:space="preserve">
          <source>Throwable &lt;strong id=&quot;bypassedException&quot;&gt;bypassedException&lt;/strong&gt;;</source>
          <target state="translated">スロー可能な&lt;strong id=&quot;bypassedException&quot;&gt;bypassedException&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="aeb265277be0ed46b320d4bee447dd1287a5e503" translate="yes" xml:space="preserve">
          <source>Throwable that is at the start of the chain; null if both &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; are null</source>
          <target state="translated">チェーンの最初にあるスロー可能。 &lt;code&gt;e1&lt;/code&gt; と &lt;code&gt;e2&lt;/code&gt; の両方がnullの場合はnull</target>
        </trans-unit>
        <trans-unit id="329a88fde5ec9ba12b2a662751a9fce532d8dd80" translate="yes" xml:space="preserve">
          <source>Throwable.TraceInfo &lt;strong id=&quot;_d_traceContext&quot;&gt;_d_traceContext&lt;/strong&gt;(void* ptr = null);</source>
          <target state="translated">Throwable.TraceInfo &lt;strong id=&quot;_d_traceContext&quot;&gt;_d_traceContext&lt;/strong&gt;（void * ptr = null）;</target>
        </trans-unit>
        <trans-unit id="d96037e204c51c808042650da8a6d05d2f5c0fd2" translate="yes" xml:space="preserve">
          <source>Throwable.TraceInfo &lt;strong id=&quot;defaultTraceHandler&quot;&gt;defaultTraceHandler&lt;/strong&gt;(void* ptr = null);</source>
          <target state="translated">Throwable.TraceInfo &lt;strong id=&quot;defaultTraceHandler&quot;&gt;defaultTraceHandler&lt;/strong&gt;（void * ptr = null）;</target>
        </trans-unit>
        <trans-unit id="b63ae3eec5f24e1fd1c64ed1289ae0f818654562" translate="yes" xml:space="preserve">
          <source>Thrown during CData constructor</source>
          <target state="translated">CData コンストラクタ中にスローされる</target>
        </trans-unit>
        <trans-unit id="84c89a52cbdc1ec28b439af4dc893b9b91ec7840" translate="yes" xml:space="preserve">
          <source>Thrown during Comment constructor</source>
          <target state="translated">Comment コンストラクタ中にスローされる</target>
        </trans-unit>
        <trans-unit id="35729b43847e49168c803e1563bb3cc31ad4a437" translate="yes" xml:space="preserve">
          <source>Thrown during ProcessingInstruction constructor</source>
          <target state="translated">ProcessingInstruction のコンストラクタ中にスローされる</target>
        </trans-unit>
        <trans-unit id="3f251cad502f4c0805742ab01450a6da94826b64" translate="yes" xml:space="preserve">
          <source>Thrown during Text constructor</source>
          <target state="translated">テキストのコンストラクタ中にスローされる</target>
        </trans-unit>
        <trans-unit id="c92a5bfc11a555b169a0a27ab74990b80319893a" translate="yes" xml:space="preserve">
          <source>Thrown during XMLInstruction constructor</source>
          <target state="translated">XMLInstruction のコンストラクタ中にスローされる</target>
        </trans-unit>
        <trans-unit id="6bb5956cc1d8626088d792baf8b347e8b18e899c" translate="yes" xml:space="preserve">
          <source>Thrown during check()</source>
          <target state="translated">check()の際にスローされる</target>
        </trans-unit>
        <trans-unit id="86110bc7ee50ca60178c35406ca162fd7743b4e8" translate="yes" xml:space="preserve">
          <source>Thrown during decode()</source>
          <target state="translated">decode()の間にスローされます。</target>
        </trans-unit>
        <trans-unit id="c5aba430c55d417364422428a9f362472f91604b" translate="yes" xml:space="preserve">
          <source>Thrown if I/O errors happen.</source>
          <target state="translated">I/O エラーが発生した場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="6372ea6ded1ced271f30bfc67bb4f1080dda6330" translate="yes" xml:space="preserve">
          <source>Thrown if a linked thread has terminated.</source>
          <target state="translated">リンクされたスレッドが終了した場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="91f2c1021f927e931dd4a9bfa5d4cb0938ead33e" translate="yes" xml:space="preserve">
          <source>Thrown if a message was sent to a thread via &lt;a href=&quot;std_concurrency#prioritySend&quot;&gt;&lt;code&gt;std.concurrency.prioritySend&lt;/code&gt;&lt;/a&gt; and the receiver does not have a handler for a message of this type.</source>
          <target state="translated">メッセージが&lt;a href=&quot;std_concurrency#prioritySend&quot;&gt; &lt;code&gt;std.concurrency.prioritySend&lt;/code&gt; を&lt;/a&gt;介してスレッドに送信された場合にスローされますを、レシーバーにこのタイプのメッセージのハンドラーがないます。</target>
        </trans-unit>
        <trans-unit id="6ae8d47d33d71e65b4335fb509b682ebfeb58c62" translate="yes" xml:space="preserve">
          <source>Thrown if comparing with wrong type</source>
          <target state="translated">間違った型と比較すると投げられる</target>
        </trans-unit>
        <trans-unit id="7cf0300c5ba15c42524d147daa6bffbdb893c34b" translate="yes" xml:space="preserve">
          <source>Thrown if errors that set &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx&quot;&gt; &lt;code&gt;GetLastError&lt;/code&gt;&lt;/a&gt; occur.</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx&quot;&gt; &lt;code&gt;GetLastError&lt;/code&gt; &lt;/a&gt;を設定するエラーが発生した場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="be91161c0d8489393a798c2ad672cda178b1f826" translate="yes" xml:space="preserve">
          <source>Thrown if errors that set &lt;code&gt;errno&lt;/code&gt; occur.</source>
          <target state="translated">&lt;code&gt;errno&lt;/code&gt; を設定するエラーが発生した場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="d5a85f8afbd62c38c087ce3656815cdc461fe61e" translate="yes" xml:space="preserve">
          <source>Thrown in three cases:</source>
          <target state="translated">3つのケースで投げた。</target>
        </trans-unit>
        <trans-unit id="a1a94163addf8ed9aeb98b45ad38a50ceb43b8d6" translate="yes" xml:space="preserve">
          <source>Thrown objects derived from</source>
          <target state="translated">から派生したスローオブジェクト</target>
        </trans-unit>
        <trans-unit id="1b617604610b1e1a6d54699cece22c41ffbacef5" translate="yes" xml:space="preserve">
          <source>Thrown on a range error.</source>
          <target state="translated">範囲エラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="b565d21ffa55aff8807f89b443feb9fd6f91d085" translate="yes" xml:space="preserve">
          <source>Thrown on a switch error.</source>
          <target state="translated">スイッチエラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="e2a9b6920e3c3f67cbd3cb688ecd5615035c5221" translate="yes" xml:space="preserve">
          <source>Thrown on a unicode conversion error.</source>
          <target state="translated">unicode変換エラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="7dea37b71e3f163a1d2f5bf641ee7dc124d30397" translate="yes" xml:space="preserve">
          <source>Thrown on an assert error.</source>
          <target state="translated">アサートエラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="86c6bfd21c61151f3be7775d602fc143c1a57943" translate="yes" xml:space="preserve">
          <source>Thrown on an invalid memory operation.</source>
          <target state="translated">無効なメモリ操作でスローされます。</target>
        </trans-unit>
        <trans-unit id="16e3cf208858e40592c9d2d38ed8e64cdeeb978f" translate="yes" xml:space="preserve">
          <source>Thrown on an out of memory error.</source>
          <target state="translated">メモリ切れのエラーで投げられました。</target>
        </trans-unit>
        <trans-unit id="3d00baaee4bcf2f35b15a207e7685eb27dac105f" translate="yes" xml:space="preserve">
          <source>Thrown on calls to &lt;code&gt;receive&lt;/code&gt; if the thread that spawned the receiving thread has terminated and no more messages exist.</source>
          <target state="translated">&lt;code&gt;receive&lt;/code&gt; スレッドを生成したスレッドが終了し、メッセージが存在しない場合にreceiveの呼び出しでスローされます。</target>
        </trans-unit>
        <trans-unit id="2324a54efe11d589ff8d54fcc1b56a073a6a5882" translate="yes" xml:space="preserve">
          <source>Thrown on calls to &lt;code&gt;receiveOnly&lt;/code&gt; if a message other than the type the receiving thread expected is sent.</source>
          <target state="translated">受信スレッドが予期したタイプ以外のメッセージが送信された場合に &lt;code&gt;receiveOnly&lt;/code&gt; の呼び出しでスローされます。</target>
        </trans-unit>
        <trans-unit id="3129f3e1668dc67a58429ffa0cef7d5a14bcbb14" translate="yes" xml:space="preserve">
          <source>Thrown on conversion errors.</source>
          <target state="translated">変換エラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="29878d6640bc6d1eaad971922e0aa1d911c88d3a" translate="yes" xml:space="preserve">
          <source>Thrown on conversion overflow errors.</source>
          <target state="translated">変換オーバーフローエラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="5b47b72e06e1d04f8e2399d1acfde860c151b623" translate="yes" xml:space="preserve">
          <source>Thrown on error.</source>
          <target state="translated">エラーで投げられました。</target>
        </trans-unit>
        <trans-unit id="a4752cf51c73b5b3850abf244753cdd8e6632e42" translate="yes" xml:space="preserve">
          <source>Thrown on finalize error.</source>
          <target state="translated">finalizeエラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="36d88aa95deaa8eb68ccf7623cd01071911543b5" translate="yes" xml:space="preserve">
          <source>Thrown on mailbox crowding if the mailbox is configured with &lt;code&gt;OnCrowding.throwException&lt;/code&gt;.</source>
          <target state="translated">メールボックスが &lt;code&gt;OnCrowding.throwException&lt;/code&gt; で構成されている場合、メールボックスの混雑時にスローされます。</target>
        </trans-unit>
        <trans-unit id="79b810076b73721a41a2673482bdf7baf7ec2c8a" translate="yes" xml:space="preserve">
          <source>Thrown on one of the following conditions:</source>
          <target state="translated">以下のいずれかの条件で投げられる。</target>
        </trans-unit>
        <trans-unit id="5ab114d73446a9ce4d36fd9f522df3a1eebc6c65" translate="yes" xml:space="preserve">
          <source>Thrown when a Tid is missing, e.g. when &lt;code&gt;ownerTid&lt;/code&gt; doesn't find an owner thread.</source>
          <target state="translated">Tidが欠落している場合、たとえば &lt;code&gt;ownerTid&lt;/code&gt; が所有者スレッドを見つけられない場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="1e6ce338b7ac50ade34d3b28700ff70b8d4a7605" translate="yes" xml:space="preserve">
          <source>Thrown when parsing for Tags</source>
          <target state="translated">タグの解析時にスローされる</target>
        </trans-unit>
        <trans-unit id="f3f52f3792a4bcc4f042510f3988510a62c2449d" translate="yes" xml:space="preserve">
          <source>Throws an exception.</source>
          <target state="translated">例外をスローします。</target>
        </trans-unit>
        <trans-unit id="9c1b3e348c5e658c9f04296e21ad3e2315006119" translate="yes" xml:space="preserve">
          <source>Throws:</source>
          <target state="translated">Throws:</target>
        </trans-unit>
        <trans-unit id="ff6fea9d058e3c0f1cc7f0adf3f77f4b9520cb7a" translate="yes" xml:space="preserve">
          <source>Thunks adjust the incoming 'this' pointer by 'offset'.</source>
          <target state="translated">Thunksは、入力された'this'ポインタを'offset'で調整します。</target>
        </trans-unit>
        <trans-unit id="681bc8d0be931a268296c48f3f9e40f73e12b3a8" translate="yes" xml:space="preserve">
          <source>Thus, a static array always has the dimension statically available as part of the type, and so it is implemented like in C. Static arrays and Dynamic arrays can be easily converted back and forth to each other.</source>
          <target state="translated">このように,静的配列は常に静的に利用可能な次元を型の一部として持っているので,C言語のように実装されています.静的配列と動的配列は,簡単に相互に変換して行き来することができます.</target>
        </trans-unit>
        <trans-unit id="8b6a4f79c67e1c0cfc398c2295408f2eb4b88ca9" translate="yes" xml:space="preserve">
          <source>Tibetan</source>
          <target state="translated">Tibetan</target>
        </trans-unit>
        <trans-unit id="62fac526b50cebc251a6af759bfe5d5bd018bff6" translate="yes" xml:space="preserve">
          <source>TickDuration</source>
          <target state="translated">TickDuration</target>
        </trans-unit>
        <trans-unit id="c0d2d45e63dc40fd88c7a14b1c2358a160a7833d" translate="yes" xml:space="preserve">
          <source>TickDuration &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">TickDuration &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ce36a6b212a9b591eeb95689defcb8d1ae88308" translate="yes" xml:space="preserve">
          <source>TickDuration[fun.length] &lt;strong id=&quot;benchmark&quot;&gt;benchmark&lt;/strong&gt;(fun...)(uint n);</source>
          <target state="translated">TickDuration [fun.length] &lt;strong id=&quot;benchmark&quot;&gt;ベンチマーク&lt;/strong&gt;（fun ...）（uint n）;</target>
        </trans-unit>
        <trans-unit id="dc7acc903cfca8ef291e395f7b085edc57885861" translate="yes" xml:space="preserve">
          <source>Tid &lt;code&gt;tid&lt;/code&gt;</source>
          <target state="translated">Tid &lt;code&gt;tid&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1f074e4e94dc8553442f6182f62fea84786f05c" translate="yes" xml:space="preserve">
          <source>Tid &lt;strong id=&quot;locate&quot;&gt;locate&lt;/strong&gt;(string name);</source>
          <target state="translated">TID &lt;strong id=&quot;locate&quot;&gt;見つけて&lt;/strong&gt;（文字列名）。</target>
        </trans-unit>
        <trans-unit id="3e99e02f714335d73cd91fb8d55900b4d5bd1b70" translate="yes" xml:space="preserve">
          <source>Tid &lt;strong id=&quot;spawn&quot;&gt;spawn&lt;/strong&gt;(F, T...)(F fn, T args)</source>
          <target state="translated">Tid &lt;strong id=&quot;spawn&quot;&gt;spawn&lt;/strong&gt;（F、T ...）（F fn、T args）</target>
        </trans-unit>
        <trans-unit id="25d02d5a84c7931ece10b93795e423a694986b38" translate="yes" xml:space="preserve">
          <source>Tid &lt;strong id=&quot;spawnLinked&quot;&gt;spawnLinked&lt;/strong&gt;(F, T...)(F fn, T args)</source>
          <target state="translated">Tid &lt;strong id=&quot;spawnLinked&quot;&gt;spawnLinked&lt;/strong&gt;（F、T ...）（F fn、T args）</target>
        </trans-unit>
        <trans-unit id="5b2248c38faf525d4aa66c5d69e86959be2e64dd" translate="yes" xml:space="preserve">
          <source>Tid &lt;strong id=&quot;threadId&quot;&gt;threadId&lt;/strong&gt;;</source>
          <target state="translated">Tid &lt;strong id=&quot;threadId&quot;&gt;threadId&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="cf46deb14abc3ae4a0180bd680085f5421becb62" translate="yes" xml:space="preserve">
          <source>Tifinagh</source>
          <target state="translated">Tifinagh</target>
        </trans-unit>
        <trans-unit id="bf7505fef58bfd49abbc3421a5a8a317c819906e" translate="yes" xml:space="preserve">
          <source>Time Measurement and Benchmarking</source>
          <target state="translated">時間計測とベンチマーク</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
