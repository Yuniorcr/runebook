<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="be4757e5f7ed594d353a3c4ce7de74c4983ee1bc" translate="yes" xml:space="preserve">
          <source>A custom logger must implement this method in order to work in a &lt;code&gt;MultiLogger&lt;/code&gt; and &lt;code&gt;ArrayLogger&lt;/code&gt;.</source>
          <target state="translated">カスタムロガーが &lt;code&gt;MultiLogger&lt;/code&gt; および &lt;code&gt;ArrayLogger&lt;/code&gt; で機能するには、このメソッドを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="799797c474eb4f64da708eeb1b0ae0ce2ca98b4f" translate="yes" xml:space="preserve">
          <source>A custom predicate may be specified, in which case &lt;code&gt;cmp&lt;/code&gt; performs a three-way lexicographical comparison using &lt;code&gt;pred&lt;/code&gt;. Otherwise the elements are compared using &lt;code&gt;opCmp&lt;/code&gt;.</source>
          <target state="translated">カスタム述語を指定できます。その場合、 &lt;code&gt;cmp&lt;/code&gt; は &lt;code&gt;pred&lt;/code&gt; を使用して3者間辞書編集比較を実行します。それ以外の場合、要素は &lt;code&gt;opCmp&lt;/code&gt; を使用して比較されます。</target>
        </trans-unit>
        <trans-unit id="cd5f14f91830e3b180587500ec130f97919c3090" translate="yes" xml:space="preserve">
          <source>A data structure that describes a back-end compiler and implements compiler-specific actions.</source>
          <target state="translated">バックエンドコンパイラを記述し、コンパイラ固有のアクションを実装したデータ構造体。</target>
        </trans-unit>
        <trans-unit id="8b24734792d48aaa55d8beb949d2173660883a4f" translate="yes" xml:space="preserve">
          <source>A decoded UTF character.</source>
          <target state="translated">デコードされた UTF 文字。</target>
        </trans-unit>
        <trans-unit id="dc144ed1205402bc32e7140dccebc230d0cffdf8" translate="yes" xml:space="preserve">
          <source>A default constructed BitFlags has no value set</source>
          <target state="translated">デフォルトで構築された BitFlags には値が設定されていません。</target>
        </trans-unit>
        <trans-unit id="7241125a45123adb97fae3dc4d79e639b542dd27" translate="yes" xml:space="preserve">
          <source>A delegate can be set to a non-static nested function:</source>
          <target state="translated">デリゲートは、非静的な入れ子になった関数に設定することができます。</target>
        </trans-unit>
        <trans-unit id="d165603cc434a66cb4b67c233b63030eb28be9e8" translate="yes" xml:space="preserve">
          <source>A delegate for accepting possibly piecewise segments of the formatted string.</source>
          <target state="translated">フォーマットされた文字列の断片的なセグメントを受け取るためのデリゲート。</target>
        </trans-unit>
        <trans-unit id="d8451320bfb14fe03d6a64f1077a5de8e98790a3" translate="yes" xml:space="preserve">
          <source>A delegate is initialized analogously to function pointers:</source>
          <target state="translated">デリゲートは、関数ポインタと同様に初期化されます。</target>
        </trans-unit>
        <trans-unit id="3107da21260042db04bf812a226e586a93ae22ae" translate="yes" xml:space="preserve">
          <source>A delegate literal</source>
          <target state="translated">文字通りの代議員</target>
        </trans-unit>
        <trans-unit id="b63c50f651ca90cd0155830bc27dcdbf4106b121" translate="yes" xml:space="preserve">
          <source>A delegate with the context pointer pointing to nothing.</source>
          <target state="translated">コンテキストポインタが何も指していないデリゲート。</target>
        </trans-unit>
        <trans-unit id="e76ab300621498b9abbf6dd2c63acc55f60be015" translate="yes" xml:space="preserve">
          <source>A derived class can be implicitly converted to its base class, but going the other way requires an explicit cast. For example:</source>
          <target state="translated">派生クラスは暗黙のうちにその基底クラスに変換することができますが、逆に変換するには明示的なキャストが必要です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="95991bd69e5da0db53d674c525b393473c76b97c" translate="yes" xml:space="preserve">
          <source>A describing string of the status code</source>
          <target state="translated">ステータスコードの記述文字列</target>
        </trans-unit>
        <trans-unit id="b485b880cb7c20357d55aa1666ab5002c33f7f71" translate="yes" xml:space="preserve">
          <source>A destructor of an object must not access object references within the object. This means that an implementation is free to optimize based on this rule.</source>
          <target state="translated">オブジェクトのデストラクタは、オブジェクト内のオブジェクト参照にアクセスしてはいけません。これは、実装がこのルールに基づいて自由に最適化できることを意味します。</target>
        </trans-unit>
        <trans-unit id="8f2e130bf28fec18f76c5350c6830f3d384e9b8e" translate="yes" xml:space="preserve">
          <source>A detailed description of the flag</source>
          <target state="translated">旗の詳細説明</target>
        </trans-unit>
        <trans-unit id="64e621fdf33353cafd7bb5f388b648c67a616cd2" translate="yes" xml:space="preserve">
          <source>A detailed string describing the given status code</source>
          <target state="translated">与えられたステータスコードを記述する詳細な文字列</target>
        </trans-unit>
        <trans-unit id="49d3e178f25fa306f883ebaa019762236385876f" translate="yes" xml:space="preserve">
          <source>A digest must be a struct (value type) to pass the &lt;a href=&quot;#isDigest&quot;&gt;&lt;code&gt;isDigest&lt;/code&gt;&lt;/a&gt; test.</source>
          <target state="translated">&lt;a href=&quot;#isDigest&quot;&gt; &lt;code&gt;isDigest&lt;/code&gt; &lt;/a&gt;テストに合格するには、ダイジェストは構造体（値タイプ）である必要があります。</target>
        </trans-unit>
        <trans-unit id="9365344124be29b4c5ed190c2b837f534d7b14ed" translate="yes" xml:space="preserve">
          <source>A digest passing the &lt;a href=&quot;#isDigest&quot;&gt;&lt;code&gt;isDigest&lt;/code&gt;&lt;/a&gt; test is always an &lt;code&gt;OutputRange&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;#isDigest&quot;&gt; &lt;code&gt;isDigest&lt;/code&gt; &lt;/a&gt;テストに合格したダイジェストは常に &lt;code&gt;OutputRange&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="f9c1878a38d32ea2675597a3c9b9460fc661094f" translate="yes" xml:space="preserve">
          <source>A digest representation</source>
          <target state="translated">ダイジェスト表現</target>
        </trans-unit>
        <trans-unit id="dc5b8b46429d9769b6b9b3e709cbca2c3e001a8f" translate="yes" xml:space="preserve">
          <source>A disabled default constructor may not have a &lt;a href=&quot;function#FunctionBody&quot;&gt;&lt;i&gt;FunctionBody&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">無効になっているデフォルトのコンストラクターには&lt;a href=&quot;function#FunctionBody&quot;&gt;&lt;i&gt;FunctionBody&lt;/i&gt;&lt;/a&gt;がない場合があります。</target>
        </trans-unit>
        <trans-unit id="267e0978240615ba77986e09fef1791e0fbe71ef" translate="yes" xml:space="preserve">
          <source>A domain literal contains a character that is not allowed</source>
          <target state="translated">ドメインリテラルには、許可されていない文字が含まれています。</target>
        </trans-unit>
        <trans-unit id="ba76d09dbfa5d3c9aca7c8c1b7293cc30ad9aee1" translate="yes" xml:space="preserve">
          <source>A domain or subdomain cannot begin with a hyphen</source>
          <target state="translated">ドメインまたはサブドメインは、ハイフンで始まることはできません。</target>
        </trans-unit>
        <trans-unit id="472b7768887bd46b5b6c5d8a32dbebea7be62447" translate="yes" xml:space="preserve">
          <source>A domain or subdomain cannot end with a hyphen</source>
          <target state="translated">ドメインまたはサブドメインは、ハイフンで終わることはできません。</target>
        </trans-unit>
        <trans-unit id="d3a8a4725317af5767f7fd5f563f6da497b72b8b" translate="yes" xml:space="preserve">
          <source>A dotted expression is evaluated during the compilation and then must either give a constant or indicate a higher level variable that fits in the target register or variable.</source>
          <target state="translated">点線式はコンパイル中に評価され、定数を与えるか、ターゲットレジスタまたは変数に収まる上位レベルの変数を示さなければなりません。</target>
        </trans-unit>
        <trans-unit id="9353d5e0ce9a867f8dd22b89582a4ae92f0c877c" translate="yes" xml:space="preserve">
          <source>A duplicate of the array.</source>
          <target state="translated">配列の複製。</target>
        </trans-unit>
        <trans-unit id="48379b3f4c92aa4ecbe22826de3141967da52b7c" translate="yes" xml:space="preserve">
          <source>A dynamic array &lt;code&gt;T[]&lt;/code&gt; can be implicitly converted to one of the following (&lt;code&gt;U&lt;/code&gt; is a base class of &lt;code&gt;T&lt;/code&gt;):</source>
          <target state="translated">動的配列 &lt;code&gt;T[]&lt;/code&gt; は、暗黙的に次のいずれかに変換できます（ &lt;code&gt;U&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; の基本クラスです）。</target>
        </trans-unit>
        <trans-unit id="f557446cd339782ac911dc86e31dba9820fb2b0f" translate="yes" xml:space="preserve">
          <source>A dynamic array consists of:</source>
          <target state="translated">ダイナミックアレイは、以下のように構成されています。</target>
        </trans-unit>
        <trans-unit id="769645abad5552d5c7ebff94542af817087119b6" translate="yes" xml:space="preserve">
          <source>A dynamic array is declared as:</source>
          <target state="translated">として動的配列を宣言します。</target>
        </trans-unit>
        <trans-unit id="04c7f71668d3f1ebb6df6a9217407ba6b0471d81" translate="yes" xml:space="preserve">
          <source>A dynamic array is safe when:</source>
          <target state="translated">ダイナミックアレイが安全なのは</target>
        </trans-unit>
        <trans-unit id="7ad5fadfec136ac1c906cd770e62df908403c57a" translate="yes" xml:space="preserve">
          <source>A dynamic array of bits. Each bit in a &lt;code&gt;BitArray&lt;/code&gt; can be manipulated individually or by the standard bitwise operators &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and also by other effective member functions; most of them work relative to the &lt;code&gt;BitArray&lt;/code&gt;'s dimension (see &lt;a href=&quot;#dim&quot;&gt;&lt;code&gt;dim&lt;/code&gt;&lt;/a&gt;), instead of its &lt;a href=&quot;#length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ビットの動的配列。 &lt;code&gt;BitArray&lt;/code&gt; の各ビットは個別に、または標準のビットごとの演算子 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; によって操作できます。、 &lt;code&gt;^&lt;/code&gt; 、 &lt;code&gt;~&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 、およびその他の有効なメンバー関数による。それらのほとんどは、その&lt;a href=&quot;#length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;ではなく、 &lt;code&gt;BitArray&lt;/code&gt; の次元（&lt;a href=&quot;#dim&quot;&gt; &lt;code&gt;dim&lt;/code&gt; を&lt;/a&gt;参照）に関連して機能します。</target>
        </trans-unit>
        <trans-unit id="5519eb07d8a7fa9fdb9767cb387a2288cf9b1718" translate="yes" xml:space="preserve">
          <source>A dynamic array, say &lt;code&gt;x&lt;/code&gt;, of a derived class can be implicitly converted to a dynamic array, say &lt;code&gt;y&lt;/code&gt;, of a base class iff elements of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are qualified as being either both &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;both&lt;/code&gt;&lt;code&gt;immutable&lt;/code&gt;.</source>
          <target state="translated">派生クラスの動的配列、たとえば &lt;code&gt;x&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の要素が両方とも &lt;code&gt;const&lt;/code&gt; または &lt;code&gt;both&lt;/code&gt; &lt;code&gt;immutable&lt;/code&gt; 認定されている場合、基本クラスの動的配列、たとえば &lt;code&gt;y&lt;/code&gt; に暗黙的に変換できます。</target>
        </trans-unit>
        <trans-unit id="5a823701b6e24504fe5de92693bf0712360f7176" translate="yes" xml:space="preserve">
          <source>A dynamic array.</source>
          <target state="translated">ダイナミックな配列です。</target>
        </trans-unit>
        <trans-unit id="8d1f86e731d6d3f255aae8cc21f6ea7bd9977c40" translate="yes" xml:space="preserve">
          <source>A factorial number is constructed as: &lt;code&gt;fac[0] * 0! + fac[1] * 1! + ... fac[20] * 20!&lt;/code&gt;</source>
          <target state="translated">階乗数は次のように構成されます： &lt;code&gt;fac[0] * 0! + fac[1] * 1! + ... fac[20] * 20!&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c360c4983c5304316b38ca5a7f80351574611f4d" translate="yes" xml:space="preserve">
          <source>A factory function that instantiates an implementation of the GC interface. In case the instance was allocated on the C heap, it is supposed to free itself upon calling it's destructor.</source>
          <target state="translated">GC インターフェースの実装をインスタンス化するファクトリ関数です。インスタンスが C ヒープ上に確保されていた場合は、デストラクタを呼び出した時点で解放されることになっています。</target>
        </trans-unit>
        <trans-unit id="38b8c02930d83071f30dd3df81a96653346d17eb" translate="yes" xml:space="preserve">
          <source>A fiber may occupy one of three states: HOLD, EXEC, and TERM.</source>
          <target state="translated">ファイバは、3 つの状態のうちの 1 つを占有することができます。HOLD、EXEC、TERMです。</target>
        </trans-unit>
        <trans-unit id="66c6071116b4d2fdb4f7a179bb8e8819e8128bfa" translate="yes" xml:space="preserve">
          <source>A field containing new lines, commas, or double quotes should be enclosed in double quotes (customizable)</source>
          <target state="translated">改行、カンマ、二重引用符を含むフィールドは、二重引用符で囲む必要があります (カスタマイズ可能)</target>
        </trans-unit>
        <trans-unit id="13dba716c7be91345b2e8e05ae52fa557a401474" translate="yes" xml:space="preserve">
          <source>A field initialization may not appear in a loop or after a label.</source>
          <target state="translated">フィールドの初期化は、ループ内やラベルの後に表示されない場合があります。</target>
        </trans-unit>
        <trans-unit id="cb5b8dc7f0df24926cf254a0bfbbc182f8c26034" translate="yes" xml:space="preserve">
          <source>A file may contain only one module.</source>
          <target state="translated">1つのファイルには1つのモジュールのみを含めることができます。</target>
        </trans-unit>
        <trans-unit id="0d09baad5ebafd14b8ebc685e119e0305eb8b677" translate="yes" xml:space="preserve">
          <source>A filename character.</source>
          <target state="translated">ファイル名の文字。</target>
        </trans-unit>
        <trans-unit id="13c45baabf68f0db140e55a83843cebb9e0d0ee6" translate="yes" xml:space="preserve">
          <source>A final record may end with a new line</source>
          <target state="translated">最終的なレコードは改行で終わるかもしれません</target>
        </trans-unit>
        <trans-unit id="691790452cc69aa06a18a55e65d68f00b9dfac22" translate="yes" xml:space="preserve">
          <source>A final switch statement is just like a switch statement, except that:</source>
          <target state="translated">最終的なswitch文は、それ以外はswitch文と同じです。</target>
        </trans-unit>
        <trans-unit id="f2171adbbabe0f5fba4dad2832bc25b6310bc844" translate="yes" xml:space="preserve">
          <source>A finite &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt;</source>
          <target state="translated">有限の&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前方範囲&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da5d20251067de5102646dc808372484964be135" translate="yes" xml:space="preserve">
          <source>A fixed-sized sliding window iteration of size &lt;code&gt;windowSize&lt;/code&gt; over a &lt;code&gt;source&lt;/code&gt; range by a custom &lt;code&gt;stepSize&lt;/code&gt;.</source>
          <target state="translated">サイズの固定サイズのスライディングウィンドウ反復 &lt;code&gt;windowSize&lt;/code&gt; 上 &lt;code&gt;source&lt;/code&gt; カスタムによって範囲 &lt;code&gt;stepSize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ee3853d383c295b0b469963a93bdeac7a047ad1" translate="yes" xml:space="preserve">
          <source>A floating point number is formatted as one digit before the decimal point,</source>
          <target state="translated">浮動小数点数は、小数点の前の1桁としてフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="0fcb6a4bc54f11ec79b0e537d26abd92626762ff" translate="yes" xml:space="preserve">
          <source>A floating point number is formatted in decimal notation. The</source>
          <target state="translated">浮動小数点数は10進法でフォーマットされています。このように、浮動小数点数は10進法でフォーマットされています。</target>
        </trans-unit>
        <trans-unit id="f6219fd3d71d3de6df27296e5476840f4df22efc" translate="yes" xml:space="preserve">
          <source>A floating point number is formatted in either &lt;b&gt;e&lt;/b&gt; or &lt;b&gt;f&lt;/b&gt; format for &lt;b&gt;g&lt;/b&gt;; &lt;b&gt;E&lt;/b&gt; or &lt;b&gt;F&lt;/b&gt; format for &lt;b&gt;G&lt;/b&gt;. The &lt;b&gt;f&lt;/b&gt; format is used if the exponent for an &lt;b&gt;e&lt;/b&gt; format is greater than -5 and less than the</source>
          <target state="translated">浮動小数点数は、&lt;b&gt;gの&lt;/b&gt;&lt;b&gt;e&lt;/b&gt;または&lt;b&gt;fの&lt;/b&gt;いずれかの形式でフォーマットされます。&lt;b&gt;Gの&lt;/b&gt;&lt;b&gt;E&lt;/b&gt;または&lt;b&gt;F&lt;/b&gt;形式。&lt;b&gt;Fの&lt;/b&gt;ための指数場合フォーマットが使用されている&lt;b&gt;Eの&lt;/b&gt;フォーマットがより大きく-5未満であります&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="26a231f9b44b90d5cc01f2a042dd13e9e8f17322" translate="yes" xml:space="preserve">
          <source>A floating point number is formatted in hexadecimal exponential notation 0x</source>
          <target state="translated">浮動小数点数は16進数の指数表記0xでフォーマットされています。</target>
        </trans-unit>
        <trans-unit id="062fc16d5db2ce6c8599ac4365db441cb37d0350" translate="yes" xml:space="preserve">
          <source>A floating point number of type &lt;code&gt;Target&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;Target&lt;/code&gt; の浮動小数点数</target>
        </trans-unit>
        <trans-unit id="901ff63f0a480b571dc07ef5543f235f0f1f0bd3" translate="yes" xml:space="preserve">
          <source>A foreach range statement loops over the specified range.</source>
          <target state="translated">foreach範囲文は、指定された範囲をループします。</target>
        </trans-unit>
        <trans-unit id="e7b91358e238d4fe82d317197a4cd35e24ce70af" translate="yes" xml:space="preserve">
          <source>A format specifier.</source>
          <target state="translated">フォーマット指定子。</target>
        </trans-unit>
        <trans-unit id="8a84c26f1cb79a86b121cd3e356672ea932f998e" translate="yes" xml:space="preserve">
          <source>A format string specifying the output format.</source>
          <target state="translated">出力フォーマットを指定するフォーマット文字列。</target>
        </trans-unit>
        <trans-unit id="7b57d3b4c75d69aaf821093e631e86c701265934" translate="yes" xml:space="preserve">
          <source>A forward range if &lt;code&gt;R&lt;/code&gt; is a range and not auto-decodable, as defined by &lt;a href=&quot;std_traits#isAutodecodableString&quot;&gt;&lt;code&gt;std.traits.isAutodecodableString&lt;/code&gt;&lt;/a&gt;, and if the base range is also a forward range.  Or, if &lt;code&gt;R&lt;/code&gt; is a range and it is auto-decodable and &lt;code&gt;is(ElementEncodingType!typeof(r) == C)&lt;/code&gt;, then the range is passed to &lt;a href=&quot;#byCodeUnit&quot;&gt;&lt;code&gt;byCodeUnit&lt;/code&gt;&lt;/a&gt;.  Otherwise, an input range of characters.</source>
          <target state="translated">場合前進レンジ &lt;code&gt;R&lt;/code&gt; は、によって定義されるように、自己復号可能な範囲ではなく&lt;a href=&quot;std_traits#isAutodecodableString&quot;&gt; &lt;code&gt;std.traits.isAutodecodableString&lt;/code&gt; &lt;/a&gt;基地範囲も前進レンジであれば、そして。または、 &lt;code&gt;R&lt;/code&gt; が範囲であり、自動デコード可能であり、 &lt;code&gt;is(ElementEncodingType!typeof(r) == C)&lt;/code&gt; 場合、範囲は&lt;a href=&quot;#byCodeUnit&quot;&gt; &lt;code&gt;byCodeUnit&lt;/code&gt; に&lt;/a&gt;渡されます。それ以外の場合は、文字の入力範囲。</target>
        </trans-unit>
        <trans-unit id="8d5c4110b87b6e1790814c919c68f884e6275dff" translate="yes" xml:space="preserve">
          <source>A forward range of &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; representing elements of the cartesian product of the given ranges.</source>
          <target state="translated">指定された範囲のデカルト積の要素を表す&lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; の&lt;/a&gt;前方範囲。</target>
        </trans-unit>
        <trans-unit id="a731c9bb046e9313dba3f0fb16b94dd2c654875f" translate="yes" xml:space="preserve">
          <source>A forward range of normalized import paths.</source>
          <target state="translated">正規化されたインポートパスの前方範囲。</target>
        </trans-unit>
        <trans-unit id="117c498681e013c2fb7838228fefa0b3eae46314" translate="yes" xml:space="preserve">
          <source>A forward range with length</source>
          <target state="translated">長さのあるフォワードレンジ</target>
        </trans-unit>
        <trans-unit id="47d88e62a4db7de8d2e3578482fcf85fc5780a85" translate="yes" xml:space="preserve">
          <source>A forward range.</source>
          <target state="translated">前方のレンジ。</target>
        </trans-unit>
        <trans-unit id="07f884d1e3c1a36cba2e5097837570b878e4d182" translate="yes" xml:space="preserve">
          <source>A free function can be called with a syntax that looks as if the function were a member function of its first parameter type.</source>
          <target state="translated">自由な関数は、あたかもその関数が最初のパラメータ型のメンバ関数であるかのような構文で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="c359cd492ba9cf953d5897730484240a34a6f50a" translate="yes" xml:space="preserve">
          <source>A frequent usage pattern occurs in build automation tools such as &lt;a href=&quot;http://gnu.org/software/make&quot;&gt;make&lt;/a&gt; or &lt;a href=&quot;http://%20%20%20%20en.wikipedia.org/wiki/Apache_Ant&quot;&gt;ant&lt;/a&gt;. To check whether file &lt;code&gt; target&lt;/code&gt; must be rebuilt from file &lt;code&gt;source&lt;/code&gt; (i.e., &lt;code&gt;target&lt;/code&gt; is older than &lt;code&gt;source&lt;/code&gt; or does not exist), use the comparison below. The code throws a &lt;a href=&quot;#FileException&quot;&gt;&lt;code&gt;FileException&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;source&lt;/code&gt; does not exist (as it should). On the other hand, the &lt;code&gt;SysTime.min&lt;/code&gt; default makes a non-existing &lt;code&gt;target&lt;/code&gt; seem infinitely old so the test correctly prompts building it.</source>
          <target state="translated">&lt;a href=&quot;http://gnu.org/software/make&quot;&gt;make&lt;/a&gt;や&lt;a href=&quot;http://%20%20%20%20en.wikipedia.org/wiki/Apache_Ant&quot;&gt;ant&lt;/a&gt;などのビルド自動化ツールでは、頻繁に使用パターンが発生します。ファイル &lt;code&gt; target&lt;/code&gt; をファイル &lt;code&gt;source&lt;/code&gt; から再構築する必要があるかどうか（つまり、 &lt;code&gt;target&lt;/code&gt; が &lt;code&gt;source&lt;/code&gt; より古いか、存在しないか）を確認するには、以下の比較を使用します。 &lt;code&gt;source&lt;/code&gt; が存在しない場合（存在する場合）、コードは&lt;a href=&quot;#FileException&quot;&gt; &lt;code&gt;FileException&lt;/code&gt; を&lt;/a&gt;スローします。一方、 &lt;code&gt;SysTime.min&lt;/code&gt; のデフォルトでは、存在しない &lt;code&gt;target&lt;/code&gt; が無限に古くなっているように見えるため、テストはターゲットのビルドを正しく促します。</target>
        </trans-unit>
        <trans-unit id="053e4fcbf054d3263a7fae4e776cf2902753e975" translate="yes" xml:space="preserve">
          <source>A function in a derived class with the same name and parameter types as a function in a base class overrides that function:</source>
          <target state="translated">基底クラスの関数と同じ名前とパラメータ型を持つ派生クラスの関数は、その関数をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="3ccb42bb3e1d42426a86b0e82c04b1f624112e9b" translate="yes" xml:space="preserve">
          <source>A function literal that accesses variables in an outer scope</source>
          <target state="translated">外部スコープの変数にアクセスする関数リテラル</target>
        </trans-unit>
        <trans-unit id="8c83eeb90caf7607d29f499fd7f03aa7947f2985" translate="yes" xml:space="preserve">
          <source>A function or template function (including function literals). New allocators are created by calling &lt;code&gt;factoryFunction(n)&lt;/code&gt; with strictly positive numbers &lt;code&gt;n&lt;/code&gt;. Delegates that capture their enviroment are not created amid concerns regarding garbage creation for the environment. When the factory needs state, a &lt;code&gt;Factory&lt;/code&gt; object should be used.</source>
          <target state="translated">関数またはテンプレート関数（関数リテラルを含む）。厳密に正の数 &lt;code&gt;n&lt;/code&gt; を &lt;code&gt;factoryFunction(n)&lt;/code&gt; を呼び出すことにより、新しいアロケータが作成されます。環境のゴミ作成に関する懸念の中で、環境を把握するデリゲートは作成されません。 &lt;code&gt;Factory&lt;/code&gt; 状態が必要な場合は、Factoryオブジェクトを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5e8f5ab777b478051e69157f24d0dbd61527c2d2" translate="yes" xml:space="preserve">
          <source>A function parameter's default value is not inherited:</source>
          <target state="translated">関数パラメータのデフォルト値は継承されません。</target>
        </trans-unit>
        <trans-unit id="deb5c0bb10643e400b9fb7b5a35e143fdd758a44" translate="yes" xml:space="preserve">
          <source>A function pointer can point to a static nested function:</source>
          <target state="translated">関数ポインタは、静的な入れ子になった関数を指すことができます。</target>
        </trans-unit>
        <trans-unit id="dea991823934c1b1bf0e685fa1b0b65a6d495057" translate="yes" xml:space="preserve">
          <source>A function pointer is safe when it is &lt;code&gt;null&lt;/code&gt; or it refers to a valid function that has the same or a covariant signature.</source>
          <target state="translated">関数ポインタは、 &lt;code&gt;null&lt;/code&gt; であるか、同じまたは共分散のシグネチャを持つ有効な関数を参照している場合に安全です。</target>
        </trans-unit>
        <trans-unit id="a093e881de626962fffef8fdd8f64ab7dd9375e5" translate="yes" xml:space="preserve">
          <source>A function template to compute the square of type</source>
          <target state="translated">型の二乗を計算する関数テンプレート.</target>
        </trans-unit>
        <trans-unit id="61bf2496142474d131fe4b95ef3aecc3b755f8ad" translate="yes" xml:space="preserve">
          <source>A function which calls &lt;code&gt;pred&lt;/code&gt; after reversing the given parameters</source>
          <target state="translated">与えられたパラメータを逆にした後に &lt;code&gt;pred&lt;/code&gt; を呼び出す関数</target>
        </trans-unit>
        <trans-unit id="6d30a8cd44c324808434a45e76f76d6c7b7c032f" translate="yes" xml:space="preserve">
          <source>A function which calls &lt;code&gt;pred&lt;/code&gt; and returns the logical negation of its return value.</source>
          <target state="translated">&lt;code&gt;pred&lt;/code&gt; を呼び出し、その戻り値の論理否定を返す関数。</target>
        </trans-unit>
        <trans-unit id="7867264ad952f6a53a8255bd79dd0b456b5ab3e3" translate="yes" xml:space="preserve">
          <source>A function with a variadic argument is considered less specialized than a function without.</source>
          <target state="translated">可変引数を持つ関数は、引数を持たない関数よりも専門性が低いと考えられています。</target>
        </trans-unit>
        <trans-unit id="0783cd86ad223c78326ce1677f0c3ebd4740e94f" translate="yes" xml:space="preserve">
          <source>A function without an &lt;code&gt;in&lt;/code&gt; contract means that any values of the function parameters are allowed. This implies that if any function in an inheritance hierarchy has no &lt;code&gt;in&lt;/code&gt; contract, then any &lt;code&gt;in&lt;/code&gt; contracts on functions overriding it have no useful effect.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; コントラクトのない関数は、関数パラメーターの任意の値が許可されることを意味します。これは、継承階層のいずれかの機能がある場合は何のことを意味 &lt;code&gt;in&lt;/code&gt; 契約、その後、任意の &lt;code&gt;in&lt;/code&gt; それをオーバーライド機能上の契約は有用な効果を持っていません。</target>
        </trans-unit>
        <trans-unit id="5dcc227a0434c16224da46cefa6b9d0c04511c33" translate="yes" xml:space="preserve">
          <source>A function() dg = (){ return new B(); } // OK if is(B : A) == true</source>
          <target state="translated">A function()dg=(){return new B();}}//is(B:A)==trueならOK</target>
        </trans-unit>
        <trans-unit id="3a930e72e95731438d93e00189652867b0504b0a" translate="yes" xml:space="preserve">
          <source>A generic function &lt;code&gt;rank(v)&lt;/code&gt; in the following example uses this template for finding a member &lt;code&gt;e&lt;/code&gt; in an enumerated type &lt;code&gt;E&lt;/code&gt;.</source>
          <target state="translated">次の例の汎用関数 &lt;code&gt;rank(v)&lt;/code&gt; は、このテンプレートを使用して、列挙型 &lt;code&gt;E&lt;/code&gt; のメンバー &lt;code&gt;e&lt;/code&gt; を検索します。</target>
        </trans-unit>
        <trans-unit id="039eab0dd8d373801833af2f7527af3b2c405678" translate="yes" xml:space="preserve">
          <source>A generous interpretation of what is a match between the argument and format specifier is taken, for example, an unsigned type can be printed with a signed format specifier. Diagnosed incompatibilites are:</source>
          <target state="translated">引数と書式指定子の間に何が一致するかについては寛大な解釈がなされ、例えば、符号なしの型は符号付きの書式指定子で印刷することができます。診断された不適合は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4e17613e86754acf295eeb4ccc8b783f06cdc022" translate="yes" xml:space="preserve">
          <source>A grapheme cluster typically starts with a grapheme base and then extends across any subsequent sequence of nonspacing marks. A grapheme cluster is most directly relevant to text rendering and processes such as cursor placement and text selection in editing, but may also be relevant to comparison and searching.</source>
          <target state="translated">一般的に、書記素群は書記素基底から始まり、その後に続くノンスペーシング・マークの任意のシーケンスにまたがって拡張されます。グレープフィーム・クラスターは、テキスト・レンダリングや、編集中のカーソル配置やテキスト選択などのプロセスに最も直接的に関連しますが、比較や検索にも関連する場合があります。</target>
        </trans-unit>
        <trans-unit id="2cdf5ed23bd7b348665b7817bbf320049b481dbf" translate="yes" xml:space="preserve">
          <source>A handle that corresponds to a spawned process.</source>
          <target state="translated">スポーンされたプロセスに対応するハンドル。</target>
        </trans-unit>
        <trans-unit id="26ae9c727fe1703ac77a626a740de8a752d48a6b" translate="yes" xml:space="preserve">
          <source>A hash of the &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; の&lt;/a&gt;ハッシュ。</target>
        </trans-unit>
        <trans-unit id="a5d811c80289b5aca85dc23dcd5078a5644d6da5" translate="yes" xml:space="preserve">
          <source>A header may be provided as the first record in input</source>
          <target state="translated">ヘッダは入力の最初のレコードとして提供されてもよい。</target>
        </trans-unit>
        <trans-unit id="40407ac5248f258a00141e636d2fabf321c8677e" translate="yes" xml:space="preserve">
          <source>A high-level, dynamically-typed layer (described further down in this module). It consists of an interface called &lt;a href=&quot;#IAllocator&quot;&gt;&lt;code&gt;IAllocator&lt;/code&gt;&lt;/a&gt;, which concrete allocators need to implement. The interface primitives themselves are oblivious to the type of the objects being allocated; they only deal in &lt;code&gt;void[]&lt;/code&gt;, by necessity of the interface being dynamic (as opposed to type-parameterized). Each thread has a current allocator it uses by default, which is a thread-local variable &lt;a href=&quot;#theAllocator&quot;&gt;&lt;code&gt;theAllocator&lt;/code&gt;&lt;/a&gt; of type &lt;a href=&quot;#IAllocator&quot;&gt;&lt;code&gt;IAllocator&lt;/code&gt;&lt;/a&gt;. The process has a global allocator called &lt;a href=&quot;#processAllocator&quot;&gt;&lt;code&gt;processAllocator&lt;/code&gt;&lt;/a&gt;, also of type &lt;a href=&quot;#IAllocator&quot;&gt;&lt;code&gt;IAllocator&lt;/code&gt;&lt;/a&gt;. When a new thread is created, &lt;a href=&quot;#processAllocator&quot;&gt;&lt;code&gt;processAllocator&lt;/code&gt;&lt;/a&gt; is copied into &lt;a href=&quot;#theAllocator&quot;&gt;&lt;code&gt;theAllocator&lt;/code&gt;&lt;/a&gt;. An application can change the objects to which these references point. By default, at application startup, &lt;a href=&quot;#processAllocator&quot;&gt;&lt;code&gt;processAllocator&lt;/code&gt;&lt;/a&gt; refers to an object that uses D's garbage collected heap. This layer also include high-level functions such as &lt;a href=&quot;#make&quot;&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#dispose&quot;&gt;&lt;code&gt;dispose&lt;/code&gt;&lt;/a&gt; that comfortably allocate/create and respectively destroy/deallocate objects. This layer is all needed for most casual uses of allocation primitives.</source>
          <target state="translated">高レベルの動的に型付けされたレイヤー（このモジュールの後半で説明）。これは&lt;a href=&quot;#IAllocator&quot;&gt; &lt;code&gt;IAllocator&lt;/code&gt; &lt;/a&gt;と呼ばれるインターフェースで構成され、具体的なアロケーターが実装する必要があります。インターフェイスプリミティブ自体は、割り当てられるオブジェクトのタイプを認識しません。インターフェースが動的である必要があるため（型パラメーター化とは対照的に）、 &lt;code&gt;void[]&lt;/code&gt; でのみ処理されます。各スレッドは、スレッドローカル変数であり、それはデフォルトで使用する現在の割当有する&lt;a href=&quot;#theAllocator&quot;&gt; &lt;code&gt;theAllocator&lt;/code&gt; &lt;/a&gt;タイプの&lt;a href=&quot;#IAllocator&quot;&gt; &lt;code&gt;IAllocator&lt;/code&gt; を&lt;/a&gt;。プロセスには、同様に&lt;a href=&quot;#IAllocator&quot;&gt; &lt;code&gt;IAllocator&lt;/code&gt; &lt;/a&gt;タイプの&lt;a href=&quot;#processAllocator&quot;&gt; &lt;code&gt;processAllocator&lt;/code&gt; &lt;/a&gt;というグローバルアロケータがあります。新しいスレッドが作成されると、&lt;a href=&quot;#processAllocator&quot;&gt; &lt;code&gt;processAllocator&lt;/code&gt; &lt;/a&gt;が&lt;a href=&quot;#theAllocator&quot;&gt; &lt;code&gt;theAllocator&lt;/code&gt; に&lt;/a&gt;コピーされます。アプリケーションは、これらの参照が指すオブジェクトを変更できます。デフォルトでは、アプリケーションの起動時に、&lt;a href=&quot;#processAllocator&quot;&gt; &lt;code&gt;processAllocator&lt;/code&gt; &lt;/a&gt;はDのガベージコレクションされたヒープを使用するオブジェクトを参照します。この層には、オブジェクトを快適に割り当て/作成し、それぞれ破棄/割り当て解除&lt;a href=&quot;#dispose&quot;&gt; &lt;code&gt;dispose&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#make&quot;&gt; &lt;code&gt;make&lt;/code&gt; &lt;/a&gt;やdisposeなどの高水準関数も含まれています。このレイヤーはすべて、割り当てプリミティブのほとんどのカジュアルな使用に必要です。</target>
        </trans-unit>
        <trans-unit id="5d2bf1ea51e80c4aac6f3473b7f887fdc740c35e" translate="yes" xml:space="preserve">
          <source>A hook for compatibility with original std.regex.</source>
          <target state="translated">オリジナルの std.regex との互換性のためのフック。</target>
        </trans-unit>
        <trans-unit id="653718671cc4db542d90157efcbee7612ef4f130" translate="yes" xml:space="preserve">
          <source>A hook point to supply scope for members. addMember, setScope, importAll, semantic, semantic2 and semantic3 will use this.</source>
          <target state="translated">addMember,setScope,importAll,semantic,semantic2,semantic3はこれを使用します。</target>
        </trans-unit>
        <trans-unit id="328879720920d5ae634a17552898a3a2c1a84c70" translate="yes" xml:space="preserve">
          <source>A label can appear without a following statement at the end of a block.</source>
          <target state="translated">ラベルは、ブロックの最後に次の文がなくても表示することができます。</target>
        </trans-unit>
        <trans-unit id="7b5372fe2a868be3a8291b8259a3add376d70db6" translate="yes" xml:space="preserve">
          <source>A lazy range of strings</source>
          <target state="translated">ゆるやかな弦の範囲</target>
        </trans-unit>
        <trans-unit id="71bf427d84b61d24a8b8a67278a8ab4a8f8f93cb" translate="yes" xml:space="preserve">
          <source>A leading &lt;code&gt;.&lt;/code&gt; causes the identifer to be looked up in the module scope.</source>
          <target state="translated">リーディング &lt;code&gt;.&lt;/code&gt; 識別子がモジュールスコープで検索されるようにします。</target>
        </trans-unit>
        <trans-unit id="78a3635ca139ef9c87ed13b1879a916f250d065a" translate="yes" xml:space="preserve">
          <source>A leading &lt;code&gt;.&lt;/code&gt; causes the identifier to be looked up in the module scope.</source>
          <target state="translated">一流 &lt;code&gt;.&lt;/code&gt; モジュールスコープで識別子が検索されます。</target>
        </trans-unit>
        <trans-unit id="cd618290eeed633444e33da1bdeaf8d34c427135" translate="yes" xml:space="preserve">
          <source>A line-by-line representation of a &lt;a href=&quot;dmd_root_file#File&quot;&gt;&lt;code&gt;dmd.root.file.File&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;dmd_root_file#File&quot;&gt; &lt;code&gt;dmd.root.file.File&lt;/code&gt; の&lt;/a&gt;行ごとの表現。</target>
        </trans-unit>
        <trans-unit id="dc4aec564d06cb4498ed70d9f1e28eb70a8ce833" translate="yes" xml:space="preserve">
          <source>A list of current D documentation generators which use Ddoc can be found on our &lt;a href=&quot;https://wiki.dlang.org/Open_Source_Projects#Documentation_Generators&quot;&gt;wiki page&lt;/a&gt;.</source>
          <target state="translated">Ddocを使用する現在のDドキュメントジェネレーターのリストは、&lt;a href=&quot;https://wiki.dlang.org/Open_Source_Projects#Documentation_Generators&quot;&gt;Wikiページにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ba885a6110bdc794b2075278e4f226a6913b7076" translate="yes" xml:space="preserve">
          <source>A list of currently supported attributes are:</source>
          <target state="translated">現在サポートされている属性のリストは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f00b55c4fe43d41a3c524a8b0bb069f6e70306ac" translate="yes" xml:space="preserve">
          <source>A list of supported opcodes is at the end.</source>
          <target state="translated">サポートされているオペコードのリストは最後にあります。</target>
        </trans-unit>
        <trans-unit id="ca2feebae713824761039107facad4dbea83ba74" translate="yes" xml:space="preserve">
          <source>A list of the types to be aligned, representing fields of an aggregate such as a &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt;.</source>
          <target state="translated">整列される型のリスト。 &lt;code&gt;struct&lt;/code&gt; や &lt;code&gt;class&lt;/code&gt; などの集計のフィールドを表します。</target>
        </trans-unit>
        <trans-unit id="6ef2b927f7e203105a01e238fa3da38d93cba2b3" translate="yes" xml:space="preserve">
          <source>A list of types (and optionally, member names) that the &lt;code&gt;Tuple&lt;/code&gt; contains.</source>
          <target state="translated">&lt;code&gt;Tuple&lt;/code&gt; 含まれるタイプ（およびオプションでメンバー名）のリスト。</target>
        </trans-unit>
        <trans-unit id="c1e04a938052cd01677b42324cc47786cb20be16" translate="yes" xml:space="preserve">
          <source>A list of values that are either the same types as those given by the &lt;code&gt;Types&lt;/code&gt; field of this &lt;code&gt;Tuple&lt;/code&gt;, or can implicitly convert to those types. They must be in the same order as they appear in &lt;code&gt;Types&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Tuple&lt;/code&gt; の &lt;code&gt;Types&lt;/code&gt; フィールドで指定されたものと同じタイプであるか、暗黙的にそれらのタイプに変換できる値のリスト。 &lt;code&gt;Types&lt;/code&gt; に表示されるのと同じ順序である必要があります。</target>
        </trans-unit>
        <trans-unit id="d482941d3ca4453ce50fb97e64179b8d6b13c34a" translate="yes" xml:space="preserve">
          <source>A literal backtick character can be output either as a non-paired ` on a single line or by using the &lt;code&gt;&amp;amp;dollar;(BACKTICK)&lt;/code&gt; macro.</source>
          <target state="translated">リテラルのバックティック文字は、対にならない `として1行で出力するか、 &lt;code&gt;&amp;amp;dollar;(BACKTICK)&lt;/code&gt; マクロを使用して出力できます。</target>
        </trans-unit>
        <trans-unit id="6aed558d39191518507dbd6d399ad58fe0c07785" translate="yes" xml:space="preserve">
          <source>A local name for an import can be given, through which all references to the module's symbols must be qualified with:</source>
          <target state="translated">インポートのローカル名を指定することができ、モジュールのシンボルへのすべての参照はこの名前で修飾されなければなりません。</target>
        </trans-unit>
        <trans-unit id="7f88015250ab3c4000e837f6d91e8ce7469e5233" translate="yes" xml:space="preserve">
          <source>A logical thread is an execution context that has its own stack and which runs asynchronously to other logical threads. These may be preemptively scheduled kernel threads, fibers (cooperative user-space threads), or some other concept with similar behavior.</source>
          <target state="translated">論理スレッドは、それ自身のスタックを持ち、他の論理スレッドと非同期に実行される実行コンテキストです。これらは、先制的にスケジュールされたカーネルスレッド、ファイバー (協調的なユーザ空間スレッド)、または同様の動作をする他の概念であるかもしれません。</target>
        </trans-unit>
        <trans-unit id="d23190506c8632f2a85dd8e50fb58e02e2aafcff" translate="yes" xml:space="preserve">
          <source>A lone double-dash terminates &lt;code&gt;getopt&lt;/code&gt; gathering. It is used to separate program options from other parameters (e.g., options to be passed to another program). Invoking the example above with &lt;code&gt;&quot;--foo -- --bar&quot;&lt;/code&gt; parses foo but leaves &quot;--bar&quot; in &lt;code&gt;args&lt;/code&gt;. The double-dash itself is removed from the argument array unless the &lt;code&gt;std.getopt.config.keepEndOfOptions&lt;/code&gt; directive is given.</source>
          <target state="translated">単一の二重ダッシュは &lt;code&gt;getopt&lt;/code&gt; の収集を終了します。これは、プログラムオプションを他のパラメーター（たとえば、別のプログラムに渡されるオプション）から分離するために使用されます。上記の例を &lt;code&gt;&quot;--foo -- --bar&quot;&lt;/code&gt; で呼び出すと、fooが解析されますが、 &quot;-bar&quot;は &lt;code&gt;args&lt;/code&gt; に残ります。 &lt;code&gt;std.getopt.config.keepEndOfOptions&lt;/code&gt; ディレクティブが指定されていない限り、二重ダッシュ自体は引数配列から削除されます。</target>
        </trans-unit>
        <trans-unit id="458ac700d9aa844741122c6aab2d0b7ccd8355ca" translate="yes" xml:space="preserve">
          <source>A long documentation section can be subdivided by adding headings. A heading is a line of text that starts with one to six &lt;code&gt;#&lt;/code&gt; characters followed by whitespace and then the heading text. The number of &lt;code&gt;#&lt;/code&gt; characters determines the heading level. Headings may optionally end with any number of trailing &lt;code&gt;#&lt;/code&gt; characters.</source>
          <target state="translated">長いドキュメントセクションは、見出しを追加することで細かく分割できます。見出しは、1〜6 個の &lt;code&gt;#&lt;/code&gt; 文字で始まり、その後に空白文字が続き、その後に見出しテキストが続くテキスト行です。 &lt;code&gt;#&lt;/code&gt; 文字の数によって見出しレベルが決まります。見出しは、オプションで任意の数の末尾の &lt;code&gt;#&lt;/code&gt; 文字で終了できます。</target>
        </trans-unit>
        <trans-unit id="806ce325a4f1521812e9d9272c0bf953ac163955" translate="yes" xml:space="preserve">
          <source>A low-level collection of highly generic</source>
          <target state="translated">汎用性の高い</target>
        </trans-unit>
        <trans-unit id="fd10b8251464e1741a850e03d93a6d8cccce965d" translate="yes" xml:space="preserve">
          <source>A machine NaN was generated.</source>
          <target state="translated">機械NaNが生成された。</target>
        </trans-unit>
        <trans-unit id="48bb9311ba54487dcfa6b8a8d2a2646a08b874fd" translate="yes" xml:space="preserve">
          <source>A malloc() failed</source>
          <target state="translated">malloc()が失敗しました。</target>
        </trans-unit>
        <trans-unit id="010a078544787f12778cc94373a480b09ea7d03c" translate="yes" xml:space="preserve">
          <source>A member of the ZipArchive.</source>
          <target state="translated">ZipArchiveのメンバー。</target>
        </trans-unit>
        <trans-unit id="5dc35df4527a6fb4d8c143ba6a6bbe25d63cf41d" translate="yes" xml:space="preserve">
          <source>A memory barrier is guaranteed to be executed after all results are written but before returning so that results produced by all threads are visible in the calling thread.</source>
          <target state="translated">メモリバリアは、すべての結果が書き込まれた後、すべてのスレッドで生成された結果が呼び出し元のスレッドで表示されるように、返す前に実行されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="b99d9090a52d28bb0bb7cf5590c4227b3be984ea" translate="yes" xml:space="preserve">
          <source>A memory location can be temporarily transferred from shared to local if synchronization is used to prevent any other threads from accessing the memory location during the operation.</source>
          <target state="translated">操作中に他のスレッドがメモリ位置にアクセスするのを防ぐために同期が使用されている場合、メモリ位置を一時的に共有からローカルに転送することができます。</target>
        </trans-unit>
        <trans-unit id="79180a978998fb8fc11add776be5adf66604dcbb" translate="yes" xml:space="preserve">
          <source>A memory location can be transferred from shared to immutable or thread-local if there is only one reference to the location.</source>
          <target state="translated">メモリの場所は、その場所への参照が1つしかない場合、共有から不変またはスレッドローカルに転送することができます。</target>
        </trans-unit>
        <trans-unit id="d20951c051d2c0f727490d1f013b8b1bedb4089a" translate="yes" xml:space="preserve">
          <source>A memory location can be transferred from thread-local to immutable or shared if there is only one reference to the location.</source>
          <target state="translated">メモリの場所は、その場所への参照が1つしかない場合、スレッドローカルからイミュータブルに転送されたり、共有されたりします。</target>
        </trans-unit>
        <trans-unit id="48424e7c6638180fc8d589333477c4a060668223" translate="yes" xml:space="preserve">
          <source>A memory safe allocator where sizes are rounded to a multiple of the page size and allocations are satisfied at increasing addresses.</source>
          <target state="translated">サイズがページサイズの倍数に丸められ、アドレスが増えたときに割り当てが満たされるメモリセーフアロケータ。</target>
        </trans-unit>
        <trans-unit id="495055d44ce18ab5dee6edd4039253feb8fc0078" translate="yes" xml:space="preserve">
          <source>A message describing the error.</source>
          <target state="translated">エラーを説明するメッセージ。</target>
        </trans-unit>
        <trans-unit id="fd5218a2e4798262008234d0bc405db13e8f3ee4" translate="yes" xml:space="preserve">
          <source>A mid-level, statically-typed layer for assembling several allocators into one. It uses properties of the type of the objects being created to route allocation requests to possibly specialized allocators. This layer is relatively thin and implemented and documented in the &lt;a href=&quot;std_experimental_allocator_typed&quot;&gt;&lt;code&gt;std.experimental.allocator.typed&lt;/code&gt;&lt;/a&gt; module. It allows an interested user to e.g. use different allocators for arrays versus fixed-sized objects, to the end of better overall performance.</source>
          <target state="translated">複数のアロケーターを1つに組み立てるための静的レベルの中間レベルのレイヤー。これは、作成されるオブジェクトのタイプのプロパティを使用して、割り当て要求を専用のアロケーターにルーティングします。この層は比較的薄く、実装され、&lt;a href=&quot;std_experimental_allocator_typed&quot;&gt; &lt;code&gt;std.experimental.allocator.typed&lt;/code&gt; &lt;/a&gt;モジュールに文書化されています。これにより、関心のあるユーザーは、たとえば、配列と固定サイズのオブジェクトに異なるアロケーターを使用して、全体的なパフォーマンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="d32e0f2daf8ea6fe77b14840a0abd42c3bdc8827" translate="yes" xml:space="preserve">
          <source>A minimal &lt;code&gt;LogLevel&lt;/code&gt; can be defined on a per module basis. In order to define a module &lt;code&gt;LogLevel&lt;/code&gt; a file with a modulename &quot;MODULENAME_loggerconfig&quot; must be found. If no such module exists and the module is a nested module, it is checked if there exists a &quot;PARENT_MODULE_loggerconfig&quot; module with such a symbol. If this module exists and it contains a &lt;code&gt;LogLevel&lt;/code&gt; called logLevel this &lt;code&gt;LogLevel&lt;/code&gt; will be used. This parent lookup is continued until there is no parent module. Then the moduleLogLevel is &lt;code&gt;LogLevel.all&lt;/code&gt;.</source>
          <target state="translated">最小の &lt;code&gt;LogLevel&lt;/code&gt; は、モジュールごとに定義できます。モジュール &lt;code&gt;LogLevel&lt;/code&gt; を定義するには、モジュール名「MODULENAME_loggerconfig」のファイルを見つける必要があります。そのようなモジュールが存在せず、そのモジュールがネストされたモジュールである場合、そのようなシンボルを持つ「PARENT_MODULE_loggerconfig」モジュールが存在するかどうかがチェックされます。このモジュールが存在し、logLevelと呼ばれる &lt;code&gt;LogLevel&lt;/code&gt; が含まれている場合、この &lt;code&gt;LogLevel&lt;/code&gt; が使用されます。この親の検索は、親モジュールがなくなるまで続けられます。その場合、moduleLogLevelは &lt;code&gt;LogLevel.all&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a1d827e0f949b1a248de908def5cd32ff394bdf9" translate="yes" xml:space="preserve">
          <source>A mixin has its own scope, even if a declaration is overridden by the enclosing one:</source>
          <target state="translated">ミキシングは、たとえ宣言がそれを囲むものによってオーバーライドされたとしても、それ自身のスコープを持っています。</target>
        </trans-unit>
        <trans-unit id="f4c00bae4b7dc7ecb086f6d819ea6ceb53a7ae30" translate="yes" xml:space="preserve">
          <source>A module may contain any number of functions annotated with &lt;code&gt;crt_constructor&lt;/code&gt;. The order in which functions are called is undefined and shouldn't be relied upon. A function can be annotated as both &lt;code&gt;crt_constructor&lt;/code&gt; and &lt;code&gt;crt_destructor&lt;/code&gt; (see below). The runtime is not initialized when the function is called. This pragma does not take any argument and can only be applied to a single declaration, so using them in an &lt;a href=&quot;grammar#AttributeSpecifier&quot;&gt;&lt;i&gt;AttributeSpecifier&lt;/i&gt;&lt;/a&gt; is disallowed.</source>
          <target state="translated">モジュールには、 &lt;code&gt;crt_constructor&lt;/code&gt; で注釈が付けられた関数をいくつでも含めることができます。関数が呼び出される順序は未定義であり、信頼すべきではありません。関数には、 &lt;code&gt;crt_constructor&lt;/code&gt; と &lt;code&gt;crt_destructor&lt;/code&gt; の両方として注釈を付けることができます（以下を参照）。関数が呼び出されたときにランタイムが初期化されません。このプラグマは引数をとらず、単一の宣言にのみ適用できるため、&lt;a href=&quot;grammar#AttributeSpecifier&quot;&gt;&lt;i&gt;AttributeSpecifierで&lt;/i&gt;&lt;/a&gt;それらを使用することは許可されていません。</target>
        </trans-unit>
        <trans-unit id="f8ebee3433d158bd90ab55b8f3d9d3abeffc2f30" translate="yes" xml:space="preserve">
          <source>A module may have multiple static constructors and static destructors. The static constructors are run in lexical order, the static destructors are run in reverse lexical order.</source>
          <target state="translated">モジュールは複数の静的コンストラクタと静的デストラクタを持つことができます。静的コンストラクタは語彙順に実行され、静的デストラクタは逆の語彙順に実行されます。</target>
        </trans-unit>
        <trans-unit id="41d1d41b889cc5f0d75263bc9c12e3c332a8897e" translate="yes" xml:space="preserve">
          <source>A monotonic clock is one which always goes forward and never moves backwards, unlike the system's wall clock time (as represented by &lt;a href=&quot;std_datetime#SysTime&quot;&gt;&lt;code&gt;std.datetime.SysTime&lt;/code&gt;&lt;/a&gt;). The system's wall clock time can be adjusted by the user or by the system itself via services such as NTP, so it is unreliable to use the wall clock time for timing. Timers which use the wall clock time could easily end up never going off due to changes made to the wall clock time or otherwise waiting for a different period of time than that specified by the programmer. However, because the monotonic clock always increases at a fixed rate and is not affected by adjustments to the wall clock time, it is ideal for use with timers or anything which requires high precision timing.</source>
          <target state="translated">単調クロックは、システムのウォールクロック時間（&lt;a href=&quot;std_datetime#SysTime&quot;&gt; &lt;code&gt;std.datetime.SysTime&lt;/code&gt; で&lt;/a&gt;表される）とは異なり、常に前進し、後退することはありません。システムのウォールクロック時間はユーザーまたはシステム自体がNTPなどのサービスを介して調整できるため、タイミングにウォールクロック時間を使用することは信頼できません。ウォールクロック時間を使用するタイマーは、ウォールクロック時間に加えられた変更や、プログラマーによって指定された時間とは異なる時間待機するため、簡単に終了することがありません。ただし、単調クロックは常に固定レートで増加し、ウォールクロック時間の調整の影響を受けないため、タイマーまたは高精度のタイミングを必要とするものでの使用に最適です。</target>
        </trans-unit>
        <trans-unit id="229b7dd82c71ab19c4cf75da24484b9963a42fff" translate="yes" xml:space="preserve">
          <source>A mutable, const or immutable argument type can be matched against each corresponding parameter inout type.</source>
          <target state="translated">mutable、const、またはimmutableな引数型は、それぞれの対応するパラメータのinout型に対してマッチさせることができます。</target>
        </trans-unit>
        <trans-unit id="9064ba2eae9e9b47bb158682a4264e615bd9c834" translate="yes" xml:space="preserve">
          <source>A mutex to prevent race conditions</source>
          <target state="translated">レース状態を防ぐためのミューテックス</target>
        </trans-unit>
        <trans-unit id="00f2bad5530d3d28c7c68863d26800de4d656057" translate="yes" xml:space="preserve">
          <source>A named enum member can be implicitly cast to its &lt;a href=&quot;#EnumBaseType&quot;&gt;&lt;i&gt;EnumBaseType&lt;/i&gt;&lt;/a&gt;, but</source>
          <target state="translated">名前付き列挙型メンバーは、その&lt;a href=&quot;#EnumBaseType&quot;&gt;&lt;i&gt;EnumBaseTypeに&lt;/i&gt;&lt;/a&gt;暗黙的にキャストできますが、</target>
        </trans-unit>
        <trans-unit id="f6623d0b1fbb72d5c2e17e47cb1578c616457fe2" translate="yes" xml:space="preserve">
          <source>A namespace corresponding to a C++ namespace. Implies extern(C++).</source>
          <target state="translated">C++の名前空間に対応する名前空間。extern(C++)を意味します。</target>
        </trans-unit>
        <trans-unit id="346700632471b767cd12c634cfc15ff2fa145c55" translate="yes" xml:space="preserve">
          <source>A negative integer if the expression &lt;code&gt;v1 &amp;lt; v2&lt;/code&gt; is true.</source>
          <target state="translated">式 &lt;code&gt;v1 &amp;lt; v2&lt;/code&gt; が真の場合、負の整数。</target>
        </trans-unit>
        <trans-unit id="5db8fed5619f8de0bf708303f486b9261288d5ff" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;Tuple&lt;/code&gt; that is a slice from &lt;code&gt;[from, to)&lt;/code&gt; of the original. It has the same types and values as the range &lt;code&gt;[from, to)&lt;/code&gt; in the original.</source>
          <target state="translated">オリジナルの &lt;code&gt;[from, to)&lt;/code&gt; スライスである新しい &lt;code&gt;Tuple&lt;/code&gt; 。オリジナルの範囲 &lt;code&gt;[from, to)&lt;/code&gt; と同じタイプと値を持っています。</target>
        </trans-unit>
        <trans-unit id="1198461e27aeae97f26fc44ed1d24bbd1f1e6dd2" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;Tuple&lt;/code&gt; with its type inferred from the arguments given.</source>
          <target state="translated">指定された引数から推測された型を持つ新しい &lt;code&gt;Tuple&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f8c22ba5c90fb1ed325dc174a8efa22e43e2077" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;Tuple&lt;/code&gt;.</source>
          <target state="translated">新しい &lt;code&gt;Tuple&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e22c32dd01bb77a6a126af2efc4f6cd32b779b72" translate="yes" xml:space="preserve">
          <source>A new array that is &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;slice&lt;/code&gt; replaced by &lt;code&gt;replacement[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; が &lt;code&gt;replacement[]&lt;/code&gt; 置き換えられた &lt;code&gt;s&lt;/code&gt; である新しい配列。</target>
        </trans-unit>
        <trans-unit id="6a9401b7a768f52b435c2f4f39154c0cf2acebbd" translate="yes" xml:space="preserve">
          <source>A new array which is a concatenation of &lt;code&gt;this&lt;/code&gt; and its argument.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; とその引数を連結した新しい配列。</target>
        </trans-unit>
        <trans-unit id="d9bd6f8da807c91afda455d4fa6a0f2656f1b54a" translate="yes" xml:space="preserve">
          <source>A new array without changing the contents of &lt;code&gt;subject&lt;/code&gt;, or the original array if no match is found.</source>
          <target state="translated">&lt;code&gt;subject&lt;/code&gt; の内容を変更しない新しい配列、または一致が見つからない場合は元の配列。</target>
        </trans-unit>
        <trans-unit id="630ceb2509e7f76ede6d40cdaf6bcd61d0261a1e" translate="yes" xml:space="preserve">
          <source>A new array without changing the contents of &lt;code&gt;subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subject&lt;/code&gt; の内容を変更しない新しい配列。</target>
        </trans-unit>
        <trans-unit id="43ecc65f9a715237080eeb0fb40d3f9446e7b025" translate="yes" xml:space="preserve">
          <source>A new function &lt;code&gt;f(x)&lt;/code&gt; that in turn returns &lt;code&gt;fun[$-1](...fun[1](fun[0](x)))...&lt;/code&gt;.</source>
          <target state="translated">次に &lt;code&gt;fun[$-1](...fun[1](fun[0](x)))...&lt;/code&gt; 返す新しい関数 &lt;code&gt;f(x)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a8b5130321872fbcd4e37985f08ceb7bb696040" translate="yes" xml:space="preserve">
          <source>A new function &lt;code&gt;f(x)&lt;/code&gt; that in turn returns &lt;code&gt;fun[0](fun[1](...(x)))...&lt;/code&gt;.</source>
          <target state="translated">次に &lt;code&gt;fun[0](fun[1](...(x)))...&lt;/code&gt; 返す新しい関数 &lt;code&gt;f(x)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ef82e65d23cc49a814d58985830203c495a58ce" translate="yes" xml:space="preserve">
          <source>A new function which calls &lt;code&gt;fun&lt;/code&gt; and caches its return values.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; を呼び出し、その戻り値をキャッシュする新しい関数。</target>
        </trans-unit>
        <trans-unit id="4d63ef8b0e85bb89b9c6145db9006821ac2a97c5" translate="yes" xml:space="preserve">
          <source>A new function which calls &lt;code&gt;fun&lt;/code&gt; with &lt;code&gt;arg&lt;/code&gt; plus the passed parameters.</source>
          <target state="translated">呼び出す新しい関数 &lt;code&gt;fun&lt;/code&gt; と &lt;code&gt;arg&lt;/code&gt; プラス渡されたパラメータ。</target>
        </trans-unit>
        <trans-unit id="f7ba0f0828fd745d5bc435a766f220e78eb9e813" translate="yes" xml:space="preserve">
          <source>A new function which returns a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt;. Each of the elements of the tuple will be the return values of &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; &lt;/a&gt;を返す新しい関数。タプルの各要素は &lt;code&gt;F&lt;/code&gt; の戻り値になります。</target>
        </trans-unit>
        <trans-unit id="7b4a992b5e6a1e4ed4714d0daf1cc2c2530fd6bf" translate="yes" xml:space="preserve">
          <source>A new scope for local symbols is introduced for the</source>
          <target state="translated">局所的なシンボルのための新しいスコープが導入されました。</target>
        </trans-unit>
        <trans-unit id="90ba492e24974c1e57773164b5a346f710dfb153" translate="yes" xml:space="preserve">
          <source>A new string of the same type as &lt;code&gt;input&lt;/code&gt; with all matches replaced by return values of &lt;code&gt;fun&lt;/code&gt;. If no matches found returns the &lt;code&gt;input&lt;/code&gt; itself.</source>
          <target state="translated">すべての一致が &lt;code&gt;fun&lt;/code&gt; の戻り値で置き換えられた、 &lt;code&gt;input&lt;/code&gt; と同じタイプの新しい文字列。一致するものが見つからない場合は、 &lt;code&gt;input&lt;/code&gt; 自体を返します。</target>
        </trans-unit>
        <trans-unit id="6f903382e43710d4720f573e5ab317741737619f" translate="yes" xml:space="preserve">
          <source>A newly allocated array that contains all the elements from all the arrays in &lt;code&gt;arrs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;arrs&lt;/code&gt; のすべての配列のすべての要素を含む、新しく割り当てられた配列。</target>
        </trans-unit>
        <trans-unit id="0bfc83d5aaa441cc17d963bee4285cbd7132ae42" translate="yes" xml:space="preserve">
          <source>A newly allocated associative array out of elements of the input range, which must be a range of tuples (Key, Value) or a range of keys and a range of values. If given two ranges of unequal lengths after the elements of the shorter are exhausted the remaining elements of the longer will not be considered. Returns a null associative array reference when given an empty range.</source>
          <target state="translated">入力範囲の要素から新たに割り当てられた連想配列。 タプル (Key,Value)の範囲、あるいはキーと値の範囲でなければなりません。長さの異なる 2 つの範囲を指定した場合は、短い方の要素を使い切った後、長い方の要素は考慮されません。空の範囲を指定した場合は null の連想配列参照を返します。</target>
        </trans-unit>
        <trans-unit id="a74b61d6fbaa2ac33e4952e729ce5349769dee81" translate="yes" xml:space="preserve">
          <source>A newly allocated string (free with &lt;code&gt;FileName.free&lt;/code&gt;)</source>
          <target state="translated">新しく割り当てられた文字列（ &lt;code&gt;FileName.free&lt;/code&gt; で無料）</target>
        </trans-unit>
        <trans-unit id="09ea837e65593964e2e726763fa3715afa1b1dc5" translate="yes" xml:space="preserve">
          <source>A newly constructed &lt;code&gt;Rebindable&lt;/code&gt; initialized with the given reference.</source>
          <target state="translated">指定された参照で初期化された、新しく構築された &lt;code&gt;Rebindable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f9d4939fae75b47bf842ea4be909ef69a850fab" translate="yes" xml:space="preserve">
          <source>A newly-allocated &lt;code&gt;char[]&lt;/code&gt; buffer containing the encoded string.</source>
          <target state="translated">エンコードされた文字列を含む、新しく割り当てられた &lt;code&gt;char[]&lt;/code&gt; バッファ。</target>
        </trans-unit>
        <trans-unit id="6737f545d418f5fab0a8cd98756af22ad2345de6" translate="yes" xml:space="preserve">
          <source>A newly-allocated &lt;code&gt;ubyte[]&lt;/code&gt; buffer containing the decoded string.</source>
          <target state="translated">デコードされた文字列を含む、新しく割り当てられた &lt;code&gt;ubyte[]&lt;/code&gt; バッファー。</target>
        </trans-unit>
        <trans-unit id="6cbeaad57c76e13779ce6ac08c1501f2baa2becd" translate="yes" xml:space="preserve">
          <source>A newly-allocated string with '/' turned into backslashes</source>
          <target state="translated">新たに割り当てられた文字列で '/' がバックスラッシュになったもの</target>
        </trans-unit>
        <trans-unit id="b60fe472d4a4f1a026b03539226ba0ee218ca83f" translate="yes" xml:space="preserve">
          <source>A node to represent an &lt;code&gt;extern(C++)&lt;/code&gt; namespace attribute</source>
          <target state="translated">&lt;code&gt;extern(C++)&lt;/code&gt; 名前空間属性を表すノード</target>
        </trans-unit>
        <trans-unit id="5e55243265f23a9ee10b4e314b3e4a0f4faac55c" translate="yes" xml:space="preserve">
          <source>A non-blocking version of &lt;a href=&quot;#wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; の&lt;/a&gt;非ブロッキングバージョン。</target>
        </trans-unit>
        <trans-unit id="f9fd214a621f3383db2974c087d288e90199fcc2" translate="yes" xml:space="preserve">
          <source>A non-final class for &lt;code&gt;BlackHole&lt;/code&gt; to inherit from.</source>
          <target state="translated">&lt;code&gt;BlackHole&lt;/code&gt; が継承する最終クラスではありません。</target>
        </trans-unit>
        <trans-unit id="ab020c90d21a0f96c89bcc047365339b80928561" translate="yes" xml:space="preserve">
          <source>A non-final class for &lt;code&gt;WhiteHole&lt;/code&gt; to inherit from.</source>
          <target state="translated">&lt;code&gt;WhiteHole&lt;/code&gt; が継承する最終でないクラス。</target>
        </trans-unit>
        <trans-unit id="031bc4c9658e80ad8a2cb3ec7b1be591d812424d" translate="yes" xml:space="preserve">
          <source>A non-zero value if the bit was set, and a zero if it was clear.</source>
          <target state="translated">ビットがセットされている場合は0以外の値、クリアされている場合は0。</target>
        </trans-unit>
        <trans-unit id="72542befd9bcdc3c2168bab3212670c01fa60845" translate="yes" xml:space="preserve">
          <source>A normalized number must not be zero, subnormal, infinite nor NAN.</source>
          <target state="translated">正規化された数は、ゼロ、亜正規、無限、NANであってはなりません。</target>
        </trans-unit>
        <trans-unit id="5986225a8c14dd2904ed8727a8c36b4b4ab91e70" translate="yes" xml:space="preserve">
          <source>A null-terminated c-style string.</source>
          <target state="translated">ヌル文字で終端するcスタイルの文字列。</target>
        </trans-unit>
        <trans-unit id="959a6643638b0fd28db46ce451674eab7bd7dc8f" translate="yes" xml:space="preserve">
          <source>A null-terminated copy of the input array.</source>
          <target state="translated">入力配列のヌル文字で終端するコピー.</target>
        </trans-unit>
        <trans-unit id="536bb1120b98fa3166cc23ac5b91ca0fa688e0f6" translate="yes" xml:space="preserve">
          <source>A number of macros are predefined Ddoc, and represent the minimal definitions needed by Ddoc to format and highlight the presentation. The definitions are for simple HTML.</source>
          <target state="translated">多くのマクロは、あらかじめ定義された Ddoc であり、プレゼンテーションをフォーマットして強調表示するために Ddoc が必要とする最小限の定義を表しています。定義は単純なHTMLのためのものです。</target>
        </trans-unit>
        <trans-unit id="b643020affd22d977cdabc7eb97ef1a9351a628e" translate="yes" xml:space="preserve">
          <source>A number of type &lt;code&gt;Target&lt;/code&gt;</source>
          <target state="translated">多数のタイプ &lt;code&gt;Target&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="795b3a9cd51161270d51dd9a6e760416f686b603" translate="yes" xml:space="preserve">
          <source>A one-stop shop for converting values from one type to another.</source>
          <target state="translated">あるタイプの値を別のタイプに変換するためのワンストップショップです。</target>
        </trans-unit>
        <trans-unit id="0f8e16281009488f6e1da73c602696b0e3667c90" translate="yes" xml:space="preserve">
          <source>A package module can be nested inside of a sub-package:</source>
          <target state="translated">パッケージモジュールは、サブパッケージの中に入れ子にすることができます。</target>
        </trans-unit>
        <trans-unit id="58e7943122b890bc3f288bacc424746b3292890b" translate="yes" xml:space="preserve">
          <source>A package module can be used to publicly import other modules, while enabling a simpler import syntax. It enables converting a module into a package of modules, without breaking existing code which uses that module. Example of a set of library modules:</source>
          <target state="translated">パッケージモジュールは、よりシンプルなインポート構文を可能にしながら、他のモジュールを公にインポートするために使用することができます。これにより、そのモジュールを使用する既存のコードを壊すことなく、モジュールをモジュールのパッケージに変換することができます。ライブラリモジュールのセットの例。</target>
        </trans-unit>
        <trans-unit id="a04e110bb022b03d3b922e3695d3e7adc2200bf9" translate="yes" xml:space="preserve">
          <source>A package module can be used to publicly import other modules, while providing a simpler import syntax. This enables the conversion of a module into a package of modules, without breaking existing code which uses that module. Example of a set of library modules:</source>
          <target state="translated">パッケージモジュールは、よりシンプルなインポート構文を提供しながら、他のモジュールを公にインポートするために使用することができます。これにより、そのモジュールを使用する既存のコードを壊すことなく、モジュールをモジュールのパッケージに変換することができます。ライブラリモジュールのセットの例。</target>
        </trans-unit>
        <trans-unit id="6a28f151234dbd8ab64e1c506c2ebc992d6b671b" translate="yes" xml:space="preserve">
          <source>A path name</source>
          <target state="translated">パス名</target>
        </trans-unit>
        <trans-unit id="5f78f753fbaef569a30512bea53d9843ed7dc5c5" translate="yes" xml:space="preserve">
          <source>A path name.</source>
          <target state="translated">パス名です。</target>
        </trans-unit>
        <trans-unit id="ffc7c009898fd927436a7ec2ecfc0bfcdb246d3b" translate="yes" xml:space="preserve">
          <source>A path name. It can be a string, or any random-access range of characters.</source>
          <target state="translated">パス名。文字列、またはランダムにアクセスできる範囲の文字列を指定することができます。</target>
        </trans-unit>
        <trans-unit id="f18094cf1074f7588c613d5faf886aceb62d1fe0" translate="yes" xml:space="preserve">
          <source>A pathname</source>
          <target state="translated">パス名</target>
        </trans-unit>
        <trans-unit id="78a6c683923dd0a32e26b92d91ef3c5d7cf1c473" translate="yes" xml:space="preserve">
          <source>A pointer &lt;code&gt;T*&lt;/code&gt; can be implicitly converted to one of the following:</source>
          <target state="translated">ポインター &lt;code&gt;T*&lt;/code&gt; は、暗黙的に次のいずれかに変換できます。</target>
        </trans-unit>
        <trans-unit id="5fac494e378a0d59414ddbf809746f093e4eb4e5" translate="yes" xml:space="preserve">
          <source>A pointer changes its state when one of these operations is done to it:</source>
          <target state="translated">ポインタは、これらの操作のいずれかが行われると、その状態が変化します。</target>
        </trans-unit>
        <trans-unit id="52f369556afeda28679fa10016a23a737d2fde07" translate="yes" xml:space="preserve">
          <source>A pointer into a GC-managed memory block or null.</source>
          <target state="translated">GC 管理メモリブロックへのポインタ、または null。</target>
        </trans-unit>
        <trans-unit id="d914867fb3ca905d3a50656cdb991f09109768b8" translate="yes" xml:space="preserve">
          <source>A pointer is safe when:</source>
          <target state="translated">ポインタが安全なのは</target>
        </trans-unit>
        <trans-unit id="31247a2ada8205f8fca84735018b60a719fc5ab8" translate="yes" xml:space="preserve">
          <source>A pointer to a char can be generated:</source>
          <target state="translated">charへのポインタを生成することができます。</target>
        </trans-unit>
        <trans-unit id="055c3763e1071d2e75c0c47a34263897e4004558" translate="yes" xml:space="preserve">
          <source>A pointer to a filled-in struct, or NULL if it failed or ran out of structs. It also writes the number of messages left in the queue (after this read) in the integer the second argument points to.</source>
          <target state="translated">埋め込んだ構造体へのポインタ、失敗した場合や構造体が不足している場合はNULL。また、キューに残っている (この読み込み後の)メッセージの数を、第二引数が指す整数に書き込みます。</target>
        </trans-unit>
        <trans-unit id="5c572e2c9272f135a5ecf08d2e312fd017c2e5f0" translate="yes" xml:space="preserve">
          <source>A pointer to a structure of the following type is passed as the first argument to callbacks registered using rtree_geometry_callback().</source>
          <target state="translated">rtree_geometry_callback()で登録したコールバックの第一引数には、以下の型の構造体へのポインタが渡されます。</target>
        </trans-unit>
        <trans-unit id="2b69f01bcd79a9fcae2a82c0144723f65dc4fff6" translate="yes" xml:space="preserve">
          <source>A pointer to a valid memory address or to null.</source>
          <target state="translated">有効なメモリアドレスへのポインタ、またはNULLへのポインタ。</target>
        </trans-unit>
        <trans-unit id="27d73edcee54b9f472f0424d434a1057ab09307f" translate="yes" xml:space="preserve">
          <source>A pointer to a value of type &lt;code&gt;T&lt;/code&gt; to bind this &lt;code&gt;NullableRef&lt;/code&gt; to.</source>
          <target state="translated">この &lt;code&gt;NullableRef&lt;/code&gt; をバインドする &lt;code&gt;T&lt;/code&gt; 型の値へのポインター。</target>
        </trans-unit>
        <trans-unit id="123e3b7f1cada7f7a6b3145330dd24f1a9512379" translate="yes" xml:space="preserve">
          <source>A pointer to a zero-terminated error message.</source>
          <target state="translated">ゼロ終端のエラーメッセージへのポインタ。</target>
        </trans-unit>
        <trans-unit id="585ec4946d7250f1b7959b57a161ea59abc62007" translate="yes" xml:space="preserve">
          <source>A pointer to the &lt;code&gt;Task&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Task&lt;/code&gt; へのポインタ。</target>
        </trans-unit>
        <trans-unit id="e347f97045f86b61abf98fd576817c4ebecc8590" translate="yes" xml:space="preserve">
          <source>A pointer to the base of a valid memory block or to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">有効なメモリブロックのベースまたは &lt;code&gt;null&lt;/code&gt; へのポインタ。</target>
        </trans-unit>
        <trans-unit id="2faece91f379997cc677ac01b800bed5a3226cd8" translate="yes" xml:space="preserve">
          <source>A pointer to the location from which to generate the trace, or null if the trace should be generated from within the trace handler itself.</source>
          <target state="translated">トレースを生成する場所へのポインタ、またはトレースハンドラ自体の中からトレースを生成する場合は null を指定します。</target>
        </trans-unit>
        <trans-unit id="00efafd626de55989df896279388bf417be22e67" translate="yes" xml:space="preserve">
          <source>A pointer to the newly constructed object (which is the same as &lt;code&gt;chunk&lt;/code&gt;).</source>
          <target state="translated">新しく構築されたオブジェクトへのポインター（これは、 &lt;code&gt;chunk&lt;/code&gt; と同じです）。</target>
        </trans-unit>
        <trans-unit id="04e3085788d4355827288e109ddfff2d36415f8d" translate="yes" xml:space="preserve">
          <source>A pointer to the newly constructed object.</source>
          <target state="translated">新しく作成されたオブジェクトへのポインタ。</target>
        </trans-unit>
        <trans-unit id="d3438af629c85e364e264f2d61b1dc6f0cb93d08" translate="yes" xml:space="preserve">
          <source>A pointer to the root of a valid memory block or to null.</source>
          <target state="translated">有効なメモリブロックのルートへのポインタ、またはNULLへのポインタ。</target>
        </trans-unit>
        <trans-unit id="2f9c4397a0e60ae3c610cf4ea9c79c376db9a273" translate="yes" xml:space="preserve">
          <source>A pointer to the root or the interior of a valid memory block or to null.</source>
          <target state="translated">有効なメモリブロックのルートまたは内部へのポインタ、またはnullへのポインタ。</target>
        </trans-unit>
        <trans-unit id="d4f30c23443333be11c3939d5add3300db185c1f" translate="yes" xml:space="preserve">
          <source>A pointer to the start of a garbage collected object need not be maintained if a pointer to the interior of the object exists.</source>
          <target state="translated">ガベージコレクションされたオブジェクトの内部へのポインタが存在する場合、ガベージコレクションされたオブジェクトの開始点へのポインタを保持する必要はありません。</target>
        </trans-unit>
        <trans-unit id="937ad04bc8d27b425122f4ff0e28fe2a6b34aa67" translate="yes" xml:space="preserve">
          <source>A pointer to the wrapped range.</source>
          <target state="translated">ラップされた範囲へのポインタ。</target>
        </trans-unit>
        <trans-unit id="de10b9d1ba8cc9971077f18b65a847c5f66cabd1" translate="yes" xml:space="preserve">
          <source>A pointer to type</source>
          <target state="translated">型へのポインタ</target>
        </trans-unit>
        <trans-unit id="d42c56ec52222e94adff47ed32fddef163a6c3ac" translate="yes" xml:space="preserve">
          <source>A positive integer if the expression &lt;code&gt;v1 &amp;gt; v2&lt;/code&gt; is true.</source>
          <target state="translated">式 &lt;code&gt;v1 &amp;gt; v2&lt;/code&gt; がtrueの場合は正の整数。</target>
        </trans-unit>
        <trans-unit id="555ba288df251c36b028c8f723b06d00e8e1a934" translate="yes" xml:space="preserve">
          <source>A properly-aligned buffer of size &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if request could not be satisfied.</source>
          <target state="translated">サイズ &lt;code&gt;n&lt;/code&gt; の適切に調整されたバッファー、または要求が満たされなかった場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40173a27a21f77300ecbd5eb9b58efd83c3743be" translate="yes" xml:space="preserve">
          <source>A properly-aligned buffer of size &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if request could not be satisfied.</source>
          <target state="translated">サイズ &lt;code&gt;n&lt;/code&gt; の適切に調整されたバッファー、または要求が満たされなかった場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5cd1a3a44f65d015ec06c617a48022629efc0f36" translate="yes" xml:space="preserve">
          <source>A pure function can throw exceptions.</source>
          <target state="translated">純粋な関数は例外を投げることができます。</target>
        </trans-unit>
        <trans-unit id="6e6fdf29b67b71fed1a68f3cfc1cd97f5768fd48" translate="yes" xml:space="preserve">
          <source>A pure function that accepts only parameters without mutable indirections and returns a result that has mutable indirections is called a</source>
          <target state="translated">変形可能な間接要素を持たずにパラメータのみを受け取り、 変形可能な間接要素を持つ結果を返す純粋な関数は、以下のように呼ばれます。</target>
        </trans-unit>
        <trans-unit id="1d7d0a98b06912a5378cb6a8be77b4b02de5f3f8" translate="yes" xml:space="preserve">
          <source>A quote can appear in a field if the field was not quoted.</source>
          <target state="translated">フィールドが引用されていない場合は、フィールドに引用符が表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="dab172d9342291d883cccb31c1f54125707f8122" translate="yes" xml:space="preserve">
          <source>A quoted pair contains a deprecated character</source>
          <target state="translated">引用符で囲まれたペアには、非推奨の文字が含まれています。</target>
        </trans-unit>
        <trans-unit id="3f8b2a78083063455683a768a44d03d55ad12cf1" translate="yes" xml:space="preserve">
          <source>A quoted string contains a character that is not allowed</source>
          <target state="translated">引用符で囲まれた文字列には、許可されていない文字が含まれています。</target>
        </trans-unit>
        <trans-unit id="27a6d12250519ad8403433313356e264b21e4238" translate="yes" xml:space="preserve">
          <source>A quoted string contains a deprecated character</source>
          <target state="translated">引用符で囲まれた文字列には、非推奨の文字が含まれています。</target>
        </trans-unit>
        <trans-unit id="8ce910ff6b6ea039902607e039d976386a6c2bcb" translate="yes" xml:space="preserve">
          <source>A random-access range with length and slicing.</source>
          <target state="translated">長さとスライスのランダムアクセス範囲。</target>
        </trans-unit>
        <trans-unit id="5ab13239b15c05c8a18c866acd5ff508c10f0785" translate="yes" xml:space="preserve">
          <source>A random-number generator has at least the following features:</source>
          <target state="translated">乱数発生器は、少なくとも以下の特徴を有する。</target>
        </trans-unit>
        <trans-unit id="2369c4e0bd127f36f89cb0d18babe9bdf36717a3" translate="yes" xml:space="preserve">
          <source>A range can be obtained from an &lt;code&gt;Interval&lt;/code&gt;, allowing iteration over that interval, with the exact time points which are iterated over depending on the function which generates the range.</source>
          <target state="translated">範囲は &lt;code&gt;Interval&lt;/code&gt; から取得でき、その間隔での反復を可能にし、範囲を生成する関数に応じて繰り返される正確な時点を使用できます。</target>
        </trans-unit>
        <trans-unit id="b639cb4a48b0556049879b0e35d4220ae50b6838" translate="yes" xml:space="preserve">
          <source>A range comprehending the elements after the removed range.</source>
          <target state="translated">削除された範囲の後の要素を含む範囲。</target>
        </trans-unit>
        <trans-unit id="62ecf5f43eeb5ae065f43af3ab053cc44e507e8a" translate="yes" xml:space="preserve">
          <source>A range containing all of the elements of range with offset removed.</source>
          <target state="translated">オフセットを取り除いた範囲のすべての要素を含む範囲.</target>
        </trans-unit>
        <trans-unit id="36203d4512a91c0a9012250f98599f6059425b15" translate="yes" xml:space="preserve">
          <source>A range containing all of the elements that were after the given range.</source>
          <target state="translated">与えられた範囲の後にあったすべての要素を含む範囲。</target>
        </trans-unit>
        <trans-unit id="35fa81f22f65879e22267db3d96f05f95183e05a" translate="yes" xml:space="preserve">
          <source>A range containing only elements &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;range&lt;/code&gt; for which &lt;code&gt;predicate(x)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">要素のみを含む範囲が &lt;code&gt;x&lt;/code&gt; はで &lt;code&gt;range&lt;/code&gt; れる &lt;code&gt;predicate(x)&lt;/code&gt; 返し &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="705afd0dac091e12edaa52a3a62a3d89d56bfb83" translate="yes" xml:space="preserve">
          <source>A range containing only the elements in &lt;code&gt;r&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">内の要素だけを含む範囲 &lt;code&gt;r&lt;/code&gt; れる &lt;code&gt;pred&lt;/code&gt; を返す &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d664b52e0ecc777b7a166cb1e02830ee1347b8c8" translate="yes" xml:space="preserve">
          <source>A range containing the elements of the original range with the extra padding  See Also: &lt;a href=&quot;std_string#leftJustifier&quot;&gt;&lt;code&gt;std.string.leftJustifier&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">追加のパディングを含む元の範囲の要素を含む範囲参照：&lt;a href=&quot;std_string#leftJustifier&quot;&gt; &lt;code&gt;std.string.leftJustifier&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="62492856e552ba212ecf4efe925331778586bd9c" translate="yes" xml:space="preserve">
          <source>A range containing the elements of the original range with the extra padding  See Also: &lt;a href=&quot;std_string#rightJustifier&quot;&gt;&lt;code&gt;std.string.rightJustifier&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">追加のパディングを含む元の範囲の要素を含む範囲参照：&lt;a href=&quot;std_string#rightJustifier&quot;&gt; &lt;code&gt;std.string.rightJustifier&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1af0f8498eec4df1ba0a6407021b24920e00cb16" translate="yes" xml:space="preserve">
          <source>A range containing the intersection of the given ranges.</source>
          <target state="translated">与えられた範囲の交点を含む範囲。</target>
        </trans-unit>
        <trans-unit id="d6eab95de89ff8f3fe4b41997798b90e98a67ead" translate="yes" xml:space="preserve">
          <source>A range containing the union of the given ranges.</source>
          <target state="translated">与えられた範囲の和を含む範囲。</target>
        </trans-unit>
        <trans-unit id="a8928733aac77a4c880de32d0da1f4f597bcc621" translate="yes" xml:space="preserve">
          <source>A range of &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward ranges&lt;/a&gt; sorted by &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="translated">範囲&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前方範囲は&lt;/a&gt;並べ替え &lt;code&gt;less&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="676b20d5eb4486b25e2a3fced3da160eb1954590" translate="yes" xml:space="preserve">
          <source>A range of Char[] with the content of the resource pointer to by the URL</source>
          <target state="translated">URLでリソースポインタの内容を指定したChar[]の範囲</target>
        </trans-unit>
        <trans-unit id="3edcc4322a1c5c6d6faec72af3c489a46046e7da" translate="yes" xml:space="preserve">
          <source>A range of Char[] with the content of the resource pointer to by the URL.</source>
          <target state="translated">URLでリソースポインタの内容を指定したChar[]の範囲。</target>
        </trans-unit>
        <trans-unit id="b3dd828e007455ab645ab3d293799ecfb401e928" translate="yes" xml:space="preserve">
          <source>A range of chunks is returned immediately and the request that fetches the chunks is performed in another thread. If the method or other request properties is to be customized then set the &lt;code&gt;conn&lt;/code&gt; parameter with a HTTP/FTP instance that has these properties set.</source>
          <target state="translated">チャンクの範囲がすぐに返され、チャンクをフェッチする要求が別のスレッドで実行されます。メソッドまたはその他のリクエストプロパティをカスタマイズする場合は、これらのプロパティが設定されているHTTP / FTPインスタンスで &lt;code&gt;conn&lt;/code&gt; パラメータを設定します。</target>
        </trans-unit>
        <trans-unit id="5fe31de01d893564f16647e8c82cd0093cdb8a50" translate="yes" xml:space="preserve">
          <source>A range of chunks is returned when the request is complete. If the method or other request properties is to be customized then set the &lt;code&gt;conn&lt;/code&gt; parameter with a HTTP/FTP instance that has these properties set.</source>
          <target state="translated">リクエストが完了すると、一連のチャンクが返されます。メソッドまたはその他のリクエストプロパティをカスタマイズする場合は、これらのプロパティが設定されているHTTP / FTPインスタンスで &lt;code&gt;conn&lt;/code&gt; パラメータを設定します。</target>
        </trans-unit>
        <trans-unit id="19065c01493532a48f8f0e2835b9e9b99cef94fc" translate="yes" xml:space="preserve">
          <source>A range of elements in the joined range. This will be a forward range if both outer and inner ranges of &lt;code&gt;RoR&lt;/code&gt; are forward ranges; otherwise it will be only an input range. The &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;range bidirectionality&lt;/a&gt; is propagated if no separator is specified.</source>
          <target state="translated">結合された範囲内の要素の範囲。 &lt;code&gt;RoR&lt;/code&gt; の外部範囲と内部範囲の両方が前方範囲である場合、これは前方範囲になります。それ以外の場合は、入力範囲のみになります。&lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;レンジの双方向性は&lt;/a&gt;全くセパレータが指定されていない場合に伝播されます。</target>
        </trans-unit>
        <trans-unit id="0c7fbb83b5b6db95c035ecdd5415d5d39a2b82b8" translate="yes" xml:space="preserve">
          <source>A range of elements of type &lt;code&gt;Tuple!(ElementType!R, uint)&lt;/code&gt;, representing each consecutively unique element and its respective number of occurrences in that run. This will be an input range if &lt;code&gt;R&lt;/code&gt; is an input range, and a forward range in all other cases.</source>
          <target state="translated">&lt;code&gt;Tuple!(ElementType!R, uint)&lt;/code&gt; 型の要素の範囲。連続して一意の各要素と、その実行でのそれぞれの出現回数を表します。 &lt;code&gt;R&lt;/code&gt; が入力範囲の場合、これは入力範囲となり、それ以外の場合はすべて前方範囲となります。</target>
        </trans-unit>
        <trans-unit id="7041641edd4f22e58a1aabcd40e8d1b80ea0a610" translate="yes" xml:space="preserve">
          <source>A range of forward ranges sorted by &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;less&lt;/code&gt; でソートされた前方範囲の範囲。</target>
        </trans-unit>
        <trans-unit id="354db039469e45ae2b597be319b44776f92adc6e" translate="yes" xml:space="preserve">
          <source>A range of lines is returned immediately and the request that fetches the lines is performed in another thread. If the method or other request properties is to be customized then set the &lt;code&gt;conn&lt;/code&gt; parameter with a HTTP/FTP instance that has these properties set.</source>
          <target state="translated">ある範囲の行がすぐに返され、行をフェッチする要求が別のスレッドで実行されます。メソッドまたはその他のリクエストプロパティをカスタマイズする場合は、これらのプロパティが設定されているHTTP / FTPインスタンスで &lt;code&gt;conn&lt;/code&gt; パラメータを設定します。</target>
        </trans-unit>
        <trans-unit id="d9865bd96c9df41311c369964e6070a859743ab6" translate="yes" xml:space="preserve">
          <source>A range of lines is returned when the request is complete. If the method or other request properties is to be customized then set the &lt;code&gt;conn&lt;/code&gt; parameter with a HTTP/FTP instance that has these properties set.</source>
          <target state="translated">リクエストが完了すると、一連の行が返されます。メソッドまたはその他のリクエストプロパティをカスタマイズする場合は、これらのプロパティが設定されているHTTP / FTPインスタンスで &lt;code&gt;conn&lt;/code&gt; パラメータを設定します。</target>
        </trans-unit>
        <trans-unit id="497f1a2a9dd3a36e535388f9ccb222ab636fe2a5" translate="yes" xml:space="preserve">
          <source>A range of ranges sorted by &lt;code&gt;less&lt;/code&gt; to compute the intersection for.</source>
          <target state="translated">交差を計算するために &lt;code&gt;less&lt;/code&gt; でソートされた範囲の範囲。</target>
        </trans-unit>
        <trans-unit id="aa6f78e48001ea4e73b84dd8184f722313a3c338" translate="yes" xml:space="preserve">
          <source>A range of ranges sorted by &lt;code&gt;less&lt;/code&gt; to compute the union for.</source>
          <target state="translated">和集合を計算するために &lt;code&gt;less&lt;/code&gt; でソートされた範囲の範囲。</target>
        </trans-unit>
        <trans-unit id="2f822277f0b8cece8291209a0e727b0089f7fe59" translate="yes" xml:space="preserve">
          <source>A range of the difference of &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r1&lt;/code&gt; と &lt;code&gt;r2&lt;/code&gt; の差の範囲。</target>
        </trans-unit>
        <trans-unit id="a4c1f1bb179a505b7946948972d2dfe2af89e9bf" translate="yes" xml:space="preserve">
          <source>A range of the symmetric difference between &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r1&lt;/code&gt; と &lt;code&gt;r2&lt;/code&gt; の対称差の範囲。</target>
        </trans-unit>
        <trans-unit id="198ede3c7dd9ac9f559cf09844fe07660dbdcfad" translate="yes" xml:space="preserve">
          <source>A range of the union of the ranges in &lt;code&gt;ror&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ror&lt;/code&gt; の範囲の和集合の範囲。</target>
        </trans-unit>
        <trans-unit id="f1c814838fd8af6caf599d08b7f42e5c1c54006c" translate="yes" xml:space="preserve">
          <source>A range of the union of the ranges in &lt;code&gt;ror&lt;/code&gt;.  See also: &lt;a href=&quot;#multiwayMerge&quot;&gt;&lt;code&gt;multiwayMerge&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;ror&lt;/code&gt; の範囲の和集合の範囲。参照：&lt;a href=&quot;#multiwayMerge&quot;&gt; &lt;code&gt;multiwayMerge&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0fd8837e93d6f61035bcdc59926749ad6b1feb5c" translate="yes" xml:space="preserve">
          <source>A range of ubyte[chunkSize] with the content of the resource pointer to by the URL</source>
          <target state="translated">URL で指定したリソースポインタの内容を含む ubyte[chunkSize]の範囲</target>
        </trans-unit>
        <trans-unit id="ac378f9d08628fb197b154924f854d8dbc3d5f7b" translate="yes" xml:space="preserve">
          <source>A range of ubyte[chunkSize] with the content of the resource pointer to by the URL.</source>
          <target state="translated">URL が指すリソースポインタの内容を ubyte[chunkSize]の範囲で指定します。</target>
        </trans-unit>
        <trans-unit id="fa7af0ae297a566e4c920200a8bf4a77c133310b" translate="yes" xml:space="preserve">
          <source>A range over a &lt;code&gt;NegInfInterval&lt;/code&gt;. It is an infinite range.</source>
          <target state="translated">&lt;code&gt;NegInfInterval&lt;/code&gt; の範囲。無限の範囲です。</target>
        </trans-unit>
        <trans-unit id="6c95b6229f5539227d791beda356e4068ac7ef0b" translate="yes" xml:space="preserve">
          <source>A range over a &lt;code&gt;PosInfInterval&lt;/code&gt;. It is an infinite range.</source>
          <target state="translated">&lt;code&gt;PosInfInterval&lt;/code&gt; の範囲。無限の範囲です。</target>
        </trans-unit>
        <trans-unit id="986a6601092a6f8391a77770c02fc14a503a32e1" translate="yes" xml:space="preserve">
          <source>A range over an &lt;a href=&quot;#Interval&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Interval&quot;&gt; &lt;code&gt;Interval&lt;/code&gt; の&lt;/a&gt;範囲。</target>
        </trans-unit>
        <trans-unit id="2c25d66b23660641ba1f4311784dca353a985d38" translate="yes" xml:space="preserve">
          <source>A range spanning the remaining elements in the array that initially were right after &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">最初に &lt;code&gt;r&lt;/code&gt; の直後にあった配列の残りの要素にまたがる範囲。</target>
        </trans-unit>
        <trans-unit id="09405d484cc6a28f47f7c4b04722cc19549c0d0b" translate="yes" xml:space="preserve">
          <source>A range spanning the remaining elements in the container that initially were right after &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">最初は &lt;code&gt;r&lt;/code&gt; の直後であったコンテナ内の残りの要素にまたがる範囲。</target>
        </trans-unit>
        <trans-unit id="1a936c25da463fa2d2374fd1fe45e3701451d69a" translate="yes" xml:space="preserve">
          <source>A range that goes through the numbers &lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;begin + step&lt;/code&gt;, &lt;code&gt;begin + 2 * step&lt;/code&gt;, &lt;code&gt;...&lt;/code&gt;, up to and excluding &lt;code&gt;end&lt;/code&gt;.  The two-argument overloads have &lt;code&gt;step = 1&lt;/code&gt;. If &lt;code&gt;begin &amp;lt; end &amp;amp;&amp;amp; step &amp;lt; 0&lt;/code&gt; or &lt;code&gt;begin &amp;gt; end &amp;amp;&amp;amp; step &amp;gt; 0&lt;/code&gt; or &lt;code&gt;begin == end&lt;/code&gt;, then an empty range is returned. If &lt;code&gt;step == 0&lt;/code&gt; then &lt;code&gt;begin == end&lt;/code&gt; is an error.  For built-in types, the range returned is a random access range. For user-defined types that support &lt;code&gt;++&lt;/code&gt;, the range is an input range.  An integral iota also supports &lt;code&gt;in&lt;/code&gt; operator from the right. It takes the stepping into account, the integral won't be considered contained if it falls between two consecutive values of the range. &lt;code&gt;contains&lt;/code&gt; does the same as in, but from lefthand side.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; 、 &lt;code&gt;begin + step&lt;/code&gt; 、 &lt;code&gt;begin + 2 * step&lt;/code&gt; 、 &lt;code&gt;...&lt;/code&gt; から &lt;code&gt;end&lt;/code&gt; を除いた範囲までの範囲。 2つの引数のオーバーロードには &lt;code&gt;step = 1&lt;/code&gt; ます。場合 &lt;code&gt;begin &amp;lt; end &amp;amp;&amp;amp; step &amp;lt; 0&lt;/code&gt; または &lt;code&gt;begin &amp;gt; end &amp;amp;&amp;amp; step &amp;gt; 0&lt;/code&gt; または &lt;code&gt;begin == end&lt;/code&gt; し、空の範囲が返されます。 &lt;code&gt;step == 0&lt;/code&gt; 場合、 &lt;code&gt;begin == end&lt;/code&gt; はエラーです。組み込み型の場合、返される範囲はランダムアクセス範囲です。 &lt;code&gt;++&lt;/code&gt; をサポートするユーザー定義型の場合、範囲は入力範囲です。統合イオタは &lt;code&gt;in&lt;/code&gt; 右から演算子。ステッピングが考慮され、範囲の2つの連続する値の間にある場合、積分は含まれているとは見なされません。 &lt;code&gt;contains&lt;/code&gt; はinと同じですが、左側からです。</target>
        </trans-unit>
        <trans-unit id="22775f9c0f0725180dca7b39cc29c837bae61c2d" translate="yes" xml:space="preserve">
          <source>A range that iterates over all elements of the array in forward order.</source>
          <target state="translated">配列のすべての要素を順に反復処理する範囲.</target>
        </trans-unit>
        <trans-unit id="0d6042f7ea5471bc7a85b309dc875f808da5fdb9" translate="yes" xml:space="preserve">
          <source>A range that iterates over elements of the array from index &lt;code&gt;i&lt;/code&gt; up to (excluding) index &lt;code&gt;j&lt;/code&gt;.</source>
          <target state="translated">配列の要素をインデックス &lt;code&gt;i&lt;/code&gt; からインデックス &lt;code&gt;j&lt;/code&gt; （を除く）まで反復する範囲。</target>
        </trans-unit>
        <trans-unit id="f4a58ddeaba79d28f8baa264b490e01438d0a73c" translate="yes" xml:space="preserve">
          <source>A range that iterates over elements of the array in forward order.</source>
          <target state="translated">配列の要素を順に反復処理する範囲.</target>
        </trans-unit>
        <trans-unit id="472a84c8abdaf0f66905bcefc155697e1962974e" translate="yes" xml:space="preserve">
          <source>A range that iterates the array between two specified positions.</source>
          <target state="translated">指定した2つの位置の間で配列を反復処理する範囲.</target>
        </trans-unit>
        <trans-unit id="465bdfce8c19fb509380450e3c61584e8279fc41" translate="yes" xml:space="preserve">
          <source>A range that lazily produces a string output escaped to be used inside of a regular expression.</source>
          <target state="translated">正規表現の内部で使用するためにエスケープされた文字列を出力する範囲。</target>
        </trans-unit>
        <trans-unit id="7a843c526c08e5282b2d40ffeb53a32f20073820" translate="yes" xml:space="preserve">
          <source>A range that spans each &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; in this set.</source>
          <target state="translated">このセットの各&lt;a href=&quot;#Code%20point&quot;&gt;コードポイント&lt;/a&gt;にまたがる範囲。</target>
        </trans-unit>
        <trans-unit id="d13659d418fd5667a2a45e0c6e1f23ef28169af7" translate="yes" xml:space="preserve">
          <source>A range type dependent on &lt;code&gt;R1&lt;/code&gt; and &lt;code&gt;R2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;R1&lt;/code&gt; と &lt;code&gt;R2&lt;/code&gt; に依存する範囲タイプ。</target>
        </trans-unit>
        <trans-unit id="aca5fa10af5948aacb0618dcc7659c011b96c280" translate="yes" xml:space="preserve">
          <source>A range with each fun applied to all the elements. If there is more than one fun, the element type will be &lt;code&gt;Tuple&lt;/code&gt; containing one element for each fun.</source>
          <target state="translated">各楽しみがすべての要素に適用される範囲。funが複数ある場合、要素タイプは、funごとに1つの要素を含む &lt;code&gt;Tuple&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="a647974a789216b78223c54f30ddb7dbc6f42bec" translate="yes" xml:space="preserve">
          <source>A reader sub-mutex.</source>
          <target state="translated">リーダーのサブミューテックス。</target>
        </trans-unit>
        <trans-unit id="78aacc289e57898ba520714d51228a88f7785c8a" translate="yes" xml:space="preserve">
          <source>A real number.</source>
          <target state="translated">実数です。</target>
        </trans-unit>
        <trans-unit id="e5279da871ece6d65446e8b83a539f4a46cf9e5b" translate="yes" xml:space="preserve">
          <source>A record has fields separated by a comma (customizable)</source>
          <target state="translated">レコードはカンマで区切られたフィールドを持ちます(カスタマイズ可能</target>
        </trans-unit>
        <trans-unit id="8d0f9f69bb9f8022d38780e473a8ed97e90abb3f" translate="yes" xml:space="preserve">
          <source>A record is separated by a new line (CRLF,LF,CR)</source>
          <target state="translated">レコードは改行(CRLF,LF,CR)で区切られています。</target>
        </trans-unit>
        <trans-unit id="6df43b7e98ec239b05b80ec724f5f279a0b314fe" translate="yes" xml:space="preserve">
          <source>A ref parameter can also be returned by reference - see: &lt;a href=&quot;#return-ref-parameters&quot;&gt;&lt;code&gt;return ref&lt;/code&gt; parameters.&lt;/a&gt;</source>
          <target state="translated">refパラメータは参照によって返すこともできます-参照：&lt;a href=&quot;#return-ref-parameters&quot;&gt; &lt;code&gt;return ref&lt;/code&gt; パラメータを返します。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5838b1b8195e7908693ea69a0ccd678dde645bf2" translate="yes" xml:space="preserve">
          <source>A reference counted struct that wraps the dynamic allocator interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations.</source>
          <target state="translated">動的アロケータインターフェイスをラップする参照カウント型の構造体。これは、さまざまなアロケータ実装をカプセル化するために統一された型が必要な場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="073ff9e700584023c7f918b3c35ddc44ddc93350" translate="yes" xml:space="preserve">
          <source>A reference counted struct that wraps the dynamic shared allocator interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations.</source>
          <target state="translated">動的共有アロケータインターフェイスをラップする参照カウント型の構造体。これは、さまざまなアロケータ実装をカプセル化するために統一された型が必要な場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="42e7f065a5d8231c47d820792cd468e9083d8ea9" translate="yes" xml:space="preserve">
          <source>A reference to &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; への参照。</target>
        </trans-unit>
        <trans-unit id="5eeb6dd68fac30b5064fbb6c8083f183c09787e7" translate="yes" xml:space="preserve">
          <source>A reference to a class, or an interface. We need this when we point to a base class (we must record what the type is).</source>
          <target state="translated">クラスまたはインターフェイスへの参照。基底クラスを指すときに必要になります(型を記録しなければなりません)。</target>
        </trans-unit>
        <trans-unit id="30938b6d6a99ea62f4185cf08673d2059303fed2" translate="yes" xml:space="preserve">
          <source>A reference to a declaration marked with the &lt;code&gt;@disable&lt;/code&gt; attribute causes a compile time error. This can be used to explicitly disallow certain operations or overloads at compile time rather than relying on generating a runtime error.</source>
          <target state="translated">&lt;code&gt;@disable&lt;/code&gt; 属性でマークされた宣言を参照すると、コンパイル時エラーが発生します。これは、ランタイムエラーの生成に依存するのではなく、コンパイル時に特定の操作またはオーバーロードを明示的に禁止するために使用できます。</target>
        </trans-unit>
        <trans-unit id="68e9ca0fa77d6187ddb37422879e54ea57fecf2e" translate="yes" xml:space="preserve">
          <source>A reference to an object, interface, associative array, or an array slice to initialize the &lt;code&gt;Rebindable&lt;/code&gt; with.</source>
          <target state="translated">&lt;code&gt;Rebindable&lt;/code&gt; を初期化するオブジェクト、インターフェイス、連想配列、または配列スライスへの参照。</target>
        </trans-unit>
        <trans-unit id="c12cdfe35d9669562e6c6517387b415345dc5100" translate="yes" xml:space="preserve">
          <source>A reference to the &lt;code&gt;Date&lt;/code&gt; (&lt;code&gt;this&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; への参照（ &lt;code&gt;this&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e807fe0dbc26276ecc9263d30854a040d1f0bceb" translate="yes" xml:space="preserve">
          <source>A reference to the &lt;code&gt;DateTime&lt;/code&gt; (&lt;code&gt;this&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;DateTime&lt;/code&gt; への参照（ &lt;code&gt;this&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5ecb5758110283986b0f628f0dee35b28e439047" translate="yes" xml:space="preserve">
          <source>A reference to the &lt;code&gt;TimeOfDay&lt;/code&gt; (&lt;code&gt;this&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;TimeOfDay&lt;/code&gt; （ &lt;code&gt;this&lt;/code&gt; ）への参照。</target>
        </trans-unit>
        <trans-unit id="3643ec80e8e77b31f829b56e6385e6b5fae1a8bb" translate="yes" xml:space="preserve">
          <source>A reference to the allocated memory on success or &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;sz&lt;/code&gt; is zero or the pointer does not point to the base of an GC allocated memory block.</source>
          <target state="translated">成功時に割り当てられたメモリへの参照、または &lt;code&gt;sz&lt;/code&gt; がゼロであるか、ポインタがGCで割り当てられたメモリブロックのベースを指していない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d5352d81e29a32196c5f56f2bb9ed97b987c1d7" translate="yes" xml:space="preserve">
          <source>A reference to the allocated memory or null if insufficient memory is available.</source>
          <target state="translated">割り当てられたメモリへの参照、またはメモリが不足している場合はNULL。</target>
        </trans-unit>
        <trans-unit id="e37e582469e7c67872dafc3589a5e25b3c66b5ab" translate="yes" xml:space="preserve">
          <source>A reference to the current thread. May be null.</source>
          <target state="translated">現在のスレッドへの参照。nullの場合もあります。</target>
        </trans-unit>
        <trans-unit id="a61f330905217e37d6323303c34b226425d66b17" translate="yes" xml:space="preserve">
          <source>A reference to the digest for convenient chaining.</source>
          <target state="translated">便利な連鎖ダイジェストの参考に。</target>
        </trans-unit>
        <trans-unit id="20e52674df62aed2822a9ce68fb98c50fe7dd734" translate="yes" xml:space="preserve">
          <source>A reference to the initialized variable</source>
          <target state="translated">初期化された変数</target>
        </trans-unit>
        <trans-unit id="1a73c900947644b46c70f39971b466339325ec9c" translate="yes" xml:space="preserve">
          <source>A reference to the library or null on error.</source>
          <target state="translated">ライブラリへの参照、またはエラーの場合はnull。</target>
        </trans-unit>
        <trans-unit id="75039d96df258122331865dd56bd4d83100ff798" translate="yes" xml:space="preserve">
          <source>A reference to the library to unload.</source>
          <target state="translated">アンロードするライブラリへの参照。</target>
        </trans-unit>
        <trans-unit id="d686f93504e54ee14861d429718fa839597a8cdf" translate="yes" xml:space="preserve">
          <source>A reference to the newly created thread.</source>
          <target state="translated">新しく作成されたスレッドへの参照。</target>
        </trans-unit>
        <trans-unit id="c9756cbec24ff837e6d02b449d53fc6cb5a1e5f3" translate="yes" xml:space="preserve">
          <source>A reference to the next error in the list. This is used when a new &lt;code&gt;Throwable&lt;/code&gt; is thrown from inside a &lt;code&gt;catch&lt;/code&gt; block. The originally caught &lt;code&gt;Exception&lt;/code&gt; will be chained to the new &lt;code&gt;Throwable&lt;/code&gt; via this field.</source>
          <target state="translated">リスト内の次のエラーへの参照。これは、新しい &lt;code&gt;Throwable&lt;/code&gt; が &lt;code&gt;catch&lt;/code&gt; ブロック内からスローされるときに使用されます。最初にキャッチされた &lt;code&gt;Exception&lt;/code&gt; は、このフィールドを介して新しい &lt;code&gt;Throwable&lt;/code&gt; にチェーンされます。</target>
        </trans-unit>
        <trans-unit id="ff58948889bb0a36a8abceb97a8a3c148dcf9671" translate="yes" xml:space="preserve">
          <source>A refernce to the &lt;code&gt;Logger&lt;/code&gt; used to create this &lt;code&gt;LogEntry&lt;/code&gt;</source>
          <target state="translated">refernce &lt;code&gt;Logger&lt;/code&gt; は、この作成に使用される &lt;code&gt;LogEntry&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91e4b10e829acb93ce7cd86702882a460a9c1e50" translate="yes" xml:space="preserve">
          <source>A regex engine state, as returned by &lt;code&gt;match&lt;/code&gt; family of functions.</source>
          <target state="translated">関数の &lt;code&gt;match&lt;/code&gt; ファミリによって返される正規表現エンジンの状態。</target>
        </trans-unit>
        <trans-unit id="2539e853fd15604cb6a934d48bc2528e82ab9538" translate="yes" xml:space="preserve">
          <source>A reimplemented interface must implement all the interface functions, it does not inherit them from a super class:</source>
          <target state="translated">再実装されたインタフェースは、すべてのインタフェース関数を実装しなければならず、スーパークラスから継承することはできません。</target>
        </trans-unit>
        <trans-unit id="306cb18355cd21a0060bd8023086f1a746ecc542" translate="yes" xml:space="preserve">
          <source>A relational operator can have &lt;code&gt;NaN&lt;/code&gt; operands. If either or both operands is &lt;code&gt;NaN&lt;/code&gt;, the floating point comparison operation returns as follows:</source>
          <target state="translated">関係演算子は、 &lt;code&gt;NaN&lt;/code&gt; オペランドを持つことができます。一方または両方のオペランドが &lt;code&gt;NaN&lt;/code&gt; の場合、浮動小数点比較演算は次のように返されます。</target>
        </trans-unit>
        <trans-unit id="2fbb01cbf6b15e85576d1bc8dafb5f686611418c" translate="yes" xml:space="preserve">
          <source>A root module is one that will be compiled all the way to object code. This field holds the root module that caused this module to be loaded. If this module is a root module, then it will be set to &lt;code&gt;this&lt;/code&gt;. This is used to determine ownership of template instantiation.</source>
          <target state="translated">ルートモジュールは、オブジェクトコードに至るまでコンパイルされるモジュールです。このフィールドは、このモジュールが読み込まれる原因となったルートモジュールを保持します。このモジュールがルートモジュールの場合は、thisに設定され &lt;code&gt;this&lt;/code&gt; 。これは、テンプレートのインスタンス化の所有権を決定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="bfb6ac8ef8ee222f7c87138ddd6e6d11dddde966" translate="yes" xml:space="preserve">
          <source>A scope block statement introduces a new scope for the &lt;a href=&quot;#BlockStatement&quot;&gt;&lt;i&gt;BlockStatement&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">スコープブロックステートメントは、&lt;a href=&quot;#BlockStatement&quot;&gt;&lt;i&gt;BlockStatementの&lt;/i&gt;&lt;/a&gt;新しいスコープを導入します。</target>
        </trans-unit>
        <trans-unit id="4eca2516e751338cb4cea2d3632121becc1dcc07" translate="yes" xml:space="preserve">
          <source>A scope class is a class with the &lt;code&gt;scope&lt;/code&gt; attribute, as in:</source>
          <target state="translated">スコープクラスは、次のように &lt;code&gt;scope&lt;/code&gt; 属性を持つクラスです。</target>
        </trans-unit>
        <trans-unit id="1726fb56d87e8ffffee60a1adced14592e54f844" translate="yes" xml:space="preserve">
          <source>A scope class reference can only appear as a function local variable. It must be declared as being &lt;code&gt;scope&lt;/code&gt;:</source>
          <target state="translated">スコープクラス参照は、関数ローカル変数としてのみ表示できます。 &lt;code&gt;scope&lt;/code&gt; として宣言する必要があります：</target>
        </trans-unit>
        <trans-unit id="c0af4522df69cbecf3e1a90ca6686769a3cc8194" translate="yes" xml:space="preserve">
          <source>A seed may be passed to &lt;code&gt;sum&lt;/code&gt;. Not only will this seed be used as an initial value, but its type will override all the above, and determine the algorithm and precision used for summation.</source>
          <target state="translated">シードは &lt;code&gt;sum&lt;/code&gt; に渡されます。このシードは初期値として使用されるだけでなく、そのタイプによって上記のすべてがオーバーライドされ、合計に使用されるアルゴリズムと精度が決まります。</target>
        </trans-unit>
        <trans-unit id="2f9fca3d6e02409b85bf8f849854c6284ce6f9bb" translate="yes" xml:space="preserve">
          <source>A seed may be passed to &lt;code&gt;sum&lt;/code&gt;. Not only will this seed be used as an initial value, but its type will override all the above, and determine the algorithm and precision used for summation. If a seed is not passed, one is created with the value of &lt;code&gt;typeof(r.front + r.front)(0)&lt;/code&gt;, or &lt;code&gt;typeof(r.front + r.front).zero&lt;/code&gt; if no constructor exists that takes an int.</source>
          <target state="translated">シードを &lt;code&gt;sum&lt;/code&gt; に渡すことができます。このシードは初期値として使用されるだけでなく、そのタイプは上記のすべてをオーバーライドし、合計に使用されるアルゴリズムと精度を決定します。種子が渡されない場合、一方はの値で作成され &lt;code&gt;typeof(r.front + r.front)(0)&lt;/code&gt; 、または &lt;code&gt;typeof(r.front + r.front).zero&lt;/code&gt; コンストラクタが存在しない場合には、INTをとります。</target>
        </trans-unit>
        <trans-unit id="c8ed8bfa97374dda35f3e6d60a27183df8e3dd7b" translate="yes" xml:space="preserve">
          <source>A seedable random-number generator has the following additional features:</source>
          <target state="translated">種付け可能な乱数発生器は、以下の追加機能を有する。</target>
        </trans-unit>
        <trans-unit id="62eef04deeedb61ec809031e320e402553bde037" translate="yes" xml:space="preserve">
          <source>A semi-lazy parallel map that can be used for pipelining. The map functions are evaluated for the first &lt;code&gt;bufSize&lt;/code&gt; elements and stored in a buffer and made available to &lt;code&gt;popFront&lt;/code&gt;. Meanwhile, in the background a second buffer of the same size is filled. When the first buffer is exhausted, it is swapped with the second buffer and filled while the values from what was originally the second buffer are read. This implementation allows for elements to be written to the buffer without the need for atomic operations or synchronization for each write, and enables the mapping function to be evaluated efficiently in parallel.</source>
          <target state="translated">パイプライン処理に使用できる準遅延並列マップ。マップ関数は最初の &lt;code&gt;bufSize&lt;/code&gt; 要素について評価され、バッファーに格納されて &lt;code&gt;popFront&lt;/code&gt; で使用できるようになります。一方、バックグラウンドでは、同じサイズの2番目のバッファーが満たされます。最初のバッファーが使い果たされると、2番目のバッファーと交換されて、最初に2番目のバッファーであった値が読み取られている間にデータが書き込まれます。この実装により、アトミック操作や書き込みごとの同期を必要とせずに要素をバッファーに書き込むことができ、マッピング関数を効率的に並列評価することができます。</target>
        </trans-unit>
        <trans-unit id="a25d6360214ab107cc5a2690ac6934209de0713e" translate="yes" xml:space="preserve">
          <source>A set of arguments to a function with inout parameters is considered a match if any inout argument types match exactly, or:</source>
          <target state="translated">inoutパラメータを持つ関数の引数のセットは、inout引数の型が正確に一致している場合、または一致しているとみなされます。</target>
        </trans-unit>
        <trans-unit id="51c642f510697a8d846cbe239c05d6e7f4bd433c" translate="yes" xml:space="preserve">
          <source>A set of functions in this module that do the substitution rely on a simple format to guide the process. In particular the table below applies to the &lt;code&gt;format&lt;/code&gt; argument of &lt;a href=&quot;#replaceFirst&quot;&gt;&lt;code&gt;replaceFirst&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#replaceAll&quot;&gt;&lt;code&gt;replaceAll&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">置換を行うこのモジュールの一連の関数は、プロセスをガイドするための単純なフォーマットに依存しています。特に、以下の表は、&lt;a href=&quot;#replaceFirst&quot;&gt; &lt;code&gt;replaceFirst&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#replaceAll&quot;&gt; &lt;code&gt;replaceAll&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;format&lt;/code&gt; 引数に適用されます。</target>
        </trans-unit>
        <trans-unit id="b8a9cfe24fb306eb618c433658da1dfff7fbe905" translate="yes" xml:space="preserve">
          <source>A shell command which is passed verbatim to the command interpreter. (See &lt;a href=&quot;#spawnShell&quot;&gt;&lt;code&gt;spawnShell&lt;/code&gt;&lt;/a&gt; for details.)</source>
          <target state="translated">コマンドインタプリタに逐語的に渡されるシェルコマンド。（詳細については、&lt;a href=&quot;#spawnShell&quot;&gt; &lt;code&gt;spawnShell&lt;/code&gt; &lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="e6e6e41467f1af8066889b7eb3e8cd2ba5db578e" translate="yes" xml:space="preserve">
          <source>A shorthand for creating a custom multi-level fixed Trie from a &lt;code&gt;CodepointSet&lt;/code&gt;. &lt;code&gt;sizes&lt;/code&gt; are numbers of bits per level, with the most significant bits used first.</source>
          <target state="translated">&lt;code&gt;CodepointSet&lt;/code&gt; からカスタムマルチレベル固定Trieを作成するための省略表現。 &lt;code&gt;sizes&lt;/code&gt; はレベルごとのビット数で、最上位ビットが最初に使用されます。</target>
        </trans-unit>
        <trans-unit id="872a8839a08b7a547700d02979804255ca5dda79" translate="yes" xml:space="preserve">
          <source>A signed integer representing the unix time which is equivalent to the given std time.</source>
          <target state="translated">指定された標準時間に相当する unix 時間を表す符号付き整数。</target>
        </trans-unit>
        <trans-unit id="f860d4a0b4e17f8f9f5a52ee6fbbcb2156c9580b" translate="yes" xml:space="preserve">
          <source>A signed integer representing the unix time which is equivalent to this SysTime.</source>
          <target state="translated">この SysTime に相当する unix 時間を表す符号付き整数。</target>
        </trans-unit>
        <trans-unit id="3616b970c3c6ad571e4bcd0ec81882f1b115ec64" translate="yes" xml:space="preserve">
          <source>A simple file cache that can be used to avoid reading the same file multiple times. It stores its cached files as &lt;a href=&quot;#FileAndLines&quot;&gt;&lt;code&gt;FileAndLines&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">同じファイルの複数回の読み取りを回避するために使用できる単純なファイルキャッシュ。キャッシュされたファイルを&lt;a href=&quot;#FileAndLines&quot;&gt; &lt;code&gt;FileAndLines&lt;/code&gt; &lt;/a&gt;として保存します</target>
        </trans-unit>
        <trans-unit id="baa475621014a28514997e0b8ab31fb33db431d4" translate="yes" xml:space="preserve">
          <source>A simple generic copy template would be:</source>
          <target state="translated">シンプルなジェネリックコピーのテンプレートになります。</target>
        </trans-unit>
        <trans-unit id="20b05a6cb1c672b9ef624b2ff448b0500b9047e8" translate="yes" xml:space="preserve">
          <source>A simple property would be:</source>
          <target state="translated">単純な物件であれば</target>
        </trans-unit>
        <trans-unit id="ba136270dcb78a01ac01f425897459708ac2204d" translate="yes" xml:space="preserve">
          <source>A simple wrapper around core.demangle.</source>
          <target state="translated">core.demangle のシンプルなラッパーです。</target>
        </trans-unit>
        <trans-unit id="be6731f2a1c9e7c94bf4c940a35e7396dbfee3d9" translate="yes" xml:space="preserve">
          <source>A single entry point to lookup Unicode &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; sets by name or alias of a block, script or general category.</source>
          <target state="translated">ブロック、スクリプト、または一般カテゴリの名前またはエイリアスでUnicode &lt;a href=&quot;#Code%20point&quot;&gt;コードポイント&lt;/a&gt;セットを検索する単一のエントリポイント。</target>
        </trans-unit>
        <trans-unit id="76e7dd95e4c66490806ddffd8fa0a91f032d99f2" translate="yes" xml:space="preserve">
          <source>A single file or directory inside the archive.</source>
          <target state="translated">アーカイブ内の単一のファイルまたはディレクトリ。</target>
        </trans-unit>
        <trans-unit id="bf119b60a03b0cf9e7805eb2d90dcc3f4a2c95dd" translate="yes" xml:space="preserve">
          <source>A single parameter callable object</source>
          <target state="translated">単一パラメータの呼び出し可能なオブジェクト</target>
        </trans-unit>
        <trans-unit id="79c7939d70d47eaa74b95a0d35217792acd405a3" translate="yes" xml:space="preserve">
          <source>A single random element drawn from the &lt;code&gt;range&lt;/code&gt;. If it can, it will return a &lt;code&gt;ref&lt;/code&gt; to the &lt;code&gt;range element&lt;/code&gt;, otherwise it will return a copy.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; から抽出された単一のランダム要素。可能な場合は、 &lt;code&gt;range element&lt;/code&gt; への &lt;code&gt;ref&lt;/code&gt; を返します。それ以外の場合は、コピーを返します。</target>
        </trans-unit>
        <trans-unit id="660d1f6310c0c87621e9a54e4b08dfcdf5729188" translate="yes" xml:space="preserve">
          <source>A single random variate drawn from the uniform distribution between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, whose type is the common type of these parameters</source>
          <target state="translated">間の一様分布から引き出される単一のランダム変量及び &lt;code&gt;b&lt;/code&gt; 、そのタイプこれらのパラメータの一般的なタイプであります &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0634725ae5a0e7183bfefc294b400ab01233d7f2" translate="yes" xml:space="preserve">
          <source>A single regular expression to match.</source>
          <target state="translated">一致する単一の正規表現。</target>
        </trans-unit>
        <trans-unit id="ec5a41e95c545f5b9ca17c3cce34db77407a6c8d" translate="yes" xml:space="preserve">
          <source>A single unsigned integer seed value, different on each successive call</source>
          <target state="translated">単一の符号なし整数のシード値。</target>
        </trans-unit>
        <trans-unit id="ae4b3bcc6e1cb3e9d2d9a6f88f30cf7fd585afe6" translate="yes" xml:space="preserve">
          <source>A singleton instance of the default random number generator</source>
          <target state="translated">デフォルトの乱数発生器のシングルトンインスタンス</target>
        </trans-unit>
        <trans-unit id="0ef9bc9017937bc2cb5ef8d012679f4242838bf7" translate="yes" xml:space="preserve">
          <source>A slice of &lt;code&gt;path&lt;/code&gt; or &quot;.&quot;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; のスライスまたは「。」。</target>
        </trans-unit>
        <trans-unit id="3a9ec084aa800e4c6f173bd5a1b32479212bf70d" translate="yes" xml:space="preserve">
          <source>A slice of &lt;code&gt;path&lt;/code&gt; or &lt;code&gt;&quot;.&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; のスライスまたは &lt;code&gt;&quot;.&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="211be94b802431a091e4438f74d6d8da155125ad" translate="yes" xml:space="preserve">
          <source>A slice of &lt;code&gt;path&lt;/code&gt; that is the drive, or an empty range if the drive is not specified. In the case of UNC paths, the network share is returned.  Always returns an empty range on POSIX.</source>
          <target state="translated">ドライブである &lt;code&gt;path&lt;/code&gt; のスライス、またはドライブが指定されていない場合は空の範囲。UNCパスの場合、ネットワーク共有が返されます。POSIXでは常に空の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="beac62a1b583a4886c9c1be497e5c0b0348e7cd1" translate="yes" xml:space="preserve">
          <source>A slice of &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; のスライス。</target>
        </trans-unit>
        <trans-unit id="5a44a0058f9c93fc07954a765d5c3b256792c20e" translate="yes" xml:space="preserve">
          <source>A slice of &lt;code&gt;r1&lt;/code&gt; which contains the characters that both ranges start with, if the first argument is a string; otherwise, the same as the result of &lt;code&gt;takeExactly(r1, n)&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the number of elements in the common prefix of both ranges.</source>
          <target state="translated">最初の引数が文字列の場合、両方の範囲が始まる文字を含む &lt;code&gt;r1&lt;/code&gt; のスライス。そうでなければ、結果として同じ &lt;code&gt;takeExactly(r1, n)&lt;/code&gt; 、 &lt;code&gt;n&lt;/code&gt; は両方の範囲の共通のプレフィックスの要素数です。</target>
        </trans-unit>
        <trans-unit id="0ffe788b4fb95a6848324f21f66531a09b889ad4" translate="yes" xml:space="preserve">
          <source>A slice of path without the drive component.</source>
          <target state="translated">ドライブコンポーネントのないパスのスライス。</target>
        </trans-unit>
        <trans-unit id="581b3b4f0e3112a50b079afa9d9199402f78b5ce" translate="yes" xml:space="preserve">
          <source>A slightly more general tool for building fixed &lt;code&gt;Trie&lt;/code&gt; for the Unicode data.</source>
          <target state="translated">Unicodeデータの固定 &lt;code&gt;Trie&lt;/code&gt; を構築するための少し一般的なツール。</target>
        </trans-unit>
        <trans-unit id="4cd1ce7d77a0e891a7fba5fd7dfff37943999a7f" translate="yes" xml:space="preserve">
          <source>A slot is implemented as a delegate. The slot_t is the type of the delegate. The delegate must be to an instance of a class or an interface to a class instance. Delegates to struct instances or nested functions must not be used as slots.</source>
          <target state="translated">スロットはデリゲートとして実装される。slot_tはデリゲートの型です。委任は、クラスのインスタンスまたはクラスのインスタンスへのインターフェイスに対するものでなければなりません。構造体インスタンスや入れ子になった関数へのデリゲートはスロットとして使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="d89edff631bacdade5c431ac87b9ac60108881dd" translate="yes" xml:space="preserve">
          <source>A sockaddr_in as obtained from lower-level API calls such as getifaddrs.</source>
          <target state="translated">getifaddrs のような下位レベルの API コールから取得した sockaddr_in。</target>
        </trans-unit>
        <trans-unit id="7d42edca23e3ad2a39e5d64109da0bfd2ccec746" translate="yes" xml:space="preserve">
          <source>A sockaddr_in6 as obtained from lower-level API calls such as getifaddrs.</source>
          <target state="translated">getifaddrs のような下位レベルの API 呼び出しから得られる sockaddr_in6。</target>
        </trans-unit>
        <trans-unit id="6ea4d279c0d7e6e01846c33d4b612f74d42c15cf" translate="yes" xml:space="preserve">
          <source>A sockaddr_un as obtained from lower-level API calls.</source>
          <target state="translated">下位レベルのAPIコールから取得したsockaddr_un。</target>
        </trans-unit>
        <trans-unit id="ebed80eb86233fab6e2b5379562de9775ffe2e21" translate="yes" xml:space="preserve">
          <source>A span of text wrapped in asterisks (&lt;code&gt;*&lt;/code&gt;) is emphasized, and text wrapped in two asterisks (&lt;code&gt;**&lt;/code&gt;) is strongly emphasized:</source>
          <target state="translated">アスタリスク（ &lt;code&gt;*&lt;/code&gt; ）で囲まれた一連のテキストが強調され、2つのアスタリスク（ &lt;code&gt;**&lt;/code&gt; ）で囲まれたテキストが強く強調されます。</target>
        </trans-unit>
        <trans-unit id="4762ac489724656b1a0c7c273b89622b35dd42e5" translate="yes" xml:space="preserve">
          <source>A static array &lt;code&gt;T[dim]&lt;/code&gt; can be implicitly converted to one of the following:</source>
          <target state="translated">静的配列 &lt;code&gt;T[dim]&lt;/code&gt; は、暗黙的に次のいずれかに変換できます。</target>
        </trans-unit>
        <trans-unit id="503b1cd5041c9f832a5dfa476e07423ac07fe21d" translate="yes" xml:space="preserve">
          <source>A static array constructed from &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">から構成静的アレイ。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0814137d88654413926aef08cf4c06c48470220f" translate="yes" xml:space="preserve">
          <source>A static array is safe when all its elements are safe. Regardless of the element type, a static array with length zero is always safe.</source>
          <target state="translated">静的配列は,すべての要素が安全な場合に安全です.要素の型に関係なく、長さゼロの静的配列は常に安全です。</target>
        </trans-unit>
        <trans-unit id="7a546994264658c0bb6793fa47d07dceb84796aa" translate="yes" xml:space="preserve">
          <source>A static array with a dimension of 0 is allowed, but no space is allocated for it.</source>
          <target state="translated">次元が0の静的配列が許可されていますが、そのためのスペースは確保されていません。</target>
        </trans-unit>
        <trans-unit id="de32ec56a437a2e8fee8b3e9fa249fed676ffd41" translate="yes" xml:space="preserve">
          <source>A static array, say &lt;code&gt;x&lt;/code&gt;, of a derived class can be implicitly converted to a static array, say &lt;code&gt;y&lt;/code&gt;, of a base class iff elements of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are qualified as being either both &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;both&lt;/code&gt;&lt;code&gt;immutable&lt;/code&gt; or both mutable (neither &lt;code&gt;const&lt;/code&gt; nor &lt;code&gt;immutable&lt;/code&gt;).</source>
          <target state="translated">派生クラスの静的配列（たとえば &lt;code&gt;x&lt;/code&gt; ）は、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の要素が両方とも &lt;code&gt;const&lt;/code&gt; または &lt;code&gt;both&lt;/code&gt; &lt;code&gt;immutable&lt;/code&gt; または両方とも可変（ &lt;code&gt;const&lt;/code&gt; でもない）であると認定されている場合、基本クラスの静的配列（たとえば &lt;code&gt;y&lt;/code&gt; ）に暗黙的に変換できます。 &lt;code&gt;immutable&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0ba99ac5c994db50a264f1a8103a1072e41e4bd6" translate="yes" xml:space="preserve">
          <source>A static constructor is a function that performs initializations of thread local data before the &lt;code&gt;main()&lt;/code&gt; function gets control for the main thread, and upon thread startup.</source>
          <target state="translated">静的コンストラクターは、 &lt;code&gt;main()&lt;/code&gt; 関数がメインスレッドの制御を取得する前、およびスレッドの起動時に、スレッドローカルデータの初期化を実行する関数です。</target>
        </trans-unit>
        <trans-unit id="55ddf0925f26b59946dae28233d6fdfaaa7329f1" translate="yes" xml:space="preserve">
          <source>A static destructor gets called on thread termination, but only if the static constructor completed successfully. Static destructors have empty parameter lists. Static destructors get called in the reverse order that the static constructors were called in.</source>
          <target state="translated">静的デストラクタはスレッド終了時に呼び出されますが、静的コンストラクタが正常に完了した場合にのみ呼び出されます。静的デストラクタは空のパラメータリストを持ちます。静的デストラクタは、静的コンストラクタが呼び出された順番とは逆の順番で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ff247e4fd411c5dd8e2c32f15b27c31dc37dd89a" translate="yes" xml:space="preserve">
          <source>A static destructor is defined as a special static function with the syntax &lt;code&gt;static ~this()&lt;/code&gt;.</source>
          <target state="translated">静的デストラクタは、static〜this &lt;code&gt;static ~this()&lt;/code&gt; という構文を持つ特別な静的関数として定義されます。</target>
        </trans-unit>
        <trans-unit id="9ecc434d7bb77f5309d3cbf4ac6a185cf614e319" translate="yes" xml:space="preserve">
          <source>A static import requires the use of a fully qualified name to reference the module's names:</source>
          <target state="translated">スタティックインポートでは、モジュールの名前を参照するために完全修飾名を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="33e2d43ef4615d3925e034bec4d4921e1e6d6425" translate="yes" xml:space="preserve">
          <source>A static instance of the expression, typed as &lt;code&gt;Tint32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Tint32&lt;/code&gt; として型指定された式の静的インスタンス。</target>
        </trans-unit>
        <trans-unit id="623eb6b1870318f1b282239673061459e9ddf2ed" translate="yes" xml:space="preserve">
          <source>A string cannot be printed directly. But &lt;code&gt;%.*s&lt;/code&gt; can be used:</source>
          <target state="translated">文字列を直接印刷することはできません。ただし、 &lt;code&gt;%.*s&lt;/code&gt; は使用できます。</target>
        </trans-unit>
        <trans-unit id="b826ff3a676670f0d088e1cd9b512a0238306126" translate="yes" xml:space="preserve">
          <source>A string containing the path given by &lt;code&gt;path&lt;/code&gt;, but where the extension has been set to &lt;code&gt;ext&lt;/code&gt;.</source>
          <target state="translated">pathで指定された &lt;code&gt;path&lt;/code&gt; を含むが、拡張子が &lt;code&gt;ext&lt;/code&gt; に設定されている文字列。</target>
        </trans-unit>
        <trans-unit id="69c56f08ab57e676746d4e01be6a9cc3952f4ae4" translate="yes" xml:space="preserve">
          <source>A string formatted in the ISO Extended format for dates and times.</source>
          <target state="translated">日付と時刻のISO拡張フォーマットでフォーマットされた文字列。</target>
        </trans-unit>
        <trans-unit id="ef701934bf57ae45596601643b85ee15d3f2485e" translate="yes" xml:space="preserve">
          <source>A string formatted in the ISO Extended format for dates.</source>
          <target state="translated">日付用にISO Extendedフォーマットでフォーマットされた文字列。</target>
        </trans-unit>
        <trans-unit id="2da20ec434f95bb8d5443fe8e314ce1623955145" translate="yes" xml:space="preserve">
          <source>A string formatted in the ISO Extended format for times.</source>
          <target state="translated">ISO拡張フォーマットでフォーマットされた文字列。</target>
        </trans-unit>
        <trans-unit id="a00e008e78aea96cbfa32fcdb23e6a8b450b797c" translate="yes" xml:space="preserve">
          <source>A string formatted in the ISO format for dates and times.</source>
          <target state="translated">日付と時刻をISOフォーマットでフォーマットした文字列。</target>
        </trans-unit>
        <trans-unit id="2a3df60399b45643cd31eb34963073f7812833b6" translate="yes" xml:space="preserve">
          <source>A string formatted in the ISO format for dates.</source>
          <target state="translated">ISOフォーマットでフォーマットされた日付の文字列。</target>
        </trans-unit>
        <trans-unit id="04939a3353d03734d347b05e3ca2729bd9a9341a" translate="yes" xml:space="preserve">
          <source>A string formatted in the ISO format for times.</source>
          <target state="translated">ISOフォーマットでフォーマットされた文字列。</target>
        </trans-unit>
        <trans-unit id="0643f1e9bd52d0a8a25555e18edbd5da7b51bdf5" translate="yes" xml:space="preserve">
          <source>A string formatted in the way that &lt;code&gt;toSimpleString&lt;/code&gt; formats dates and times.</source>
          <target state="translated">&lt;code&gt;toSimpleString&lt;/code&gt; が日付と時刻をフォーマットする方法でフォーマットされた文字列。</target>
        </trans-unit>
        <trans-unit id="f962ea73f49b39339b4922f88a0c238e4ba1325d" translate="yes" xml:space="preserve">
          <source>A string formatted in the way that toSimpleString formats dates and times.</source>
          <target state="translated">toSimpleString が日付や時刻をフォーマットする方法でフォーマットされた文字列。</target>
        </trans-unit>
        <trans-unit id="632ab3df5f88419d1e31f1d1cee5760bbb59e7a9" translate="yes" xml:space="preserve">
          <source>A string formatted in the way that toSimpleString formats dates.</source>
          <target state="translated">toSimpleString で日付をフォーマットする方法でフォーマットされた文字列。</target>
        </trans-unit>
        <trans-unit id="bd3280dc41aa99bf0618b972c678e1b7727cbc29" translate="yes" xml:space="preserve">
          <source>A string is an array of characters. String literals are just an easy way to write character arrays. String literals are immutable (read only).</source>
          <target state="translated">文字列は文字の配列です。文字列リテラルは、文字列の配列を簡単に書く方法にすぎません。文字列リテラルは不変です(読み取り専用)。</target>
        </trans-unit>
        <trans-unit id="4693492ea4f8cc4f79d65fb1c5fff8fc71f5424c" translate="yes" xml:space="preserve">
          <source>A string listing the name of each JSON field. Useful for errors messages.</source>
          <target state="translated">各JSONフィールドの名前を列挙した文字列。エラーメッセージに便利です。</target>
        </trans-unit>
        <trans-unit id="2dfa7f97ca7b310eefa5e44ed45cbd5a9d6fba44" translate="yes" xml:space="preserve">
          <source>A string literal is either a double quoted string, a wysiwyg quoted string, a delimited string, a token string, or a hex string.</source>
          <target state="translated">文字列リテラルは、二重引用符で囲まれた文字列、wysiwygで囲まれた文字列、区切り文字列、トークン文字列、16進数文字列のいずれかです。</target>
        </trans-unit>
        <trans-unit id="91c359df16c8f1e8cc04e86239901e547e4069a7" translate="yes" xml:space="preserve">
          <source>A string of the same type as &lt;code&gt;input&lt;/code&gt; with the all of the matches (if any) replaced. If no match is found returns the input string itself.</source>
          <target state="translated">すべての一致（存在する場合）が置き換えられた、 &lt;code&gt;input&lt;/code&gt; と同じタイプのストリング。一致が見つからない場合は、入力文字列自体を返します。</target>
        </trans-unit>
        <trans-unit id="e2e9744762303d84756cc38d0bb797a1dfb35ea5" translate="yes" xml:space="preserve">
          <source>A string of the same type with the first match (if any) replaced. If no match is found returns the input string itself.</source>
          <target state="translated">同じ型の文字列で、最初にマッチしたものがあればそれを置き換えたもの。一致するものが見つからなかった場合は、入力文字列そのものを返します。</target>
        </trans-unit>
        <trans-unit id="e3572bd9c75fcb62fc2a06156321d1044ce974ae" translate="yes" xml:space="preserve">
          <source>A string or a callable</source>
          <target state="translated">文字列または呼び出し可能な</target>
        </trans-unit>
        <trans-unit id="ade01e08f23d876345b07c46538697febd10cde1" translate="yes" xml:space="preserve">
          <source>A string to be mixed in to an aggregate, such as a &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; や &lt;code&gt;class&lt;/code&gt; など、集約に混合される文字列。</target>
        </trans-unit>
        <trans-unit id="5d73e7649de9a0fce40f5dced1b091b66c878d3f" translate="yes" xml:space="preserve">
          <source>A struct can be prevented from being nested by using the static attribute, but then of course it will not be able to access variables from its enclosing scope.</source>
          <target state="translated">構造体は static 属性を使用することでネストされることを防ぐことができますが、当然のことながら、その構造体はその構造体を囲むスコープから変数にアクセスすることができなくなります。</target>
        </trans-unit>
        <trans-unit id="1f09ef100c2ee69f17128a0533548f020c5d9e4c" translate="yes" xml:space="preserve">
          <source>A struct constructor is called by the name of the struct followed by &lt;a href=&quot;class#Parameters&quot;&gt;&lt;i&gt;Parameters&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">構造体コンストラクタは、構造体の名前とそれに続く&lt;a href=&quot;class#Parameters&quot;&gt;&lt;i&gt;Parameters&lt;/i&gt;&lt;/a&gt;によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0b3db8fb5df89c3340030fb9089c4116c935599b" translate="yes" xml:space="preserve">
          <source>A struct constructor is called by the name of the struct followed by &lt;a href=&quot;function#Parameters&quot;&gt;&lt;i&gt;Parameters&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">構造体コンストラクターは、構造体の名前とそれに続く&lt;a href=&quot;function#Parameters&quot;&gt;&lt;i&gt;パラメーター&lt;/i&gt;&lt;/a&gt;によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="00e185de50d62e9d91d5d52f4d70129a74a374a6" translate="yes" xml:space="preserve">
          <source>A struct declaration can have a storage class of &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt; or &lt;code&gt;shared&lt;/code&gt;. It has an equivalent effect as declaring each member of the struct as &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt; or &lt;code&gt;shared&lt;/code&gt;.</source>
          <target state="translated">構造体宣言には、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;immutable&lt;/code&gt; 、または &lt;code&gt;shared&lt;/code&gt; のストレージクラスを含めることができます。これは、構造体の各メンバーを &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;immutable&lt;/code&gt; または &lt;code&gt;shared&lt;/code&gt; として宣言するのと同等の効果があります。</target>
        </trans-unit>
        <trans-unit id="5e4f169c05b38809d1d31f76423e59d52a2b4315" translate="yes" xml:space="preserve">
          <source>A struct is defined to not have an identity; that is, the implementation is free to make bit copies of the struct as convenient.</source>
          <target state="translated">構造体は同一性を持たないように定義されています。つまり、実装は構造体のビットコピーを便利なように自由に作ることができます。</target>
        </trans-unit>
        <trans-unit id="9bc9847f25ea362b6740a9b93ab804ef00434940" translate="yes" xml:space="preserve">
          <source>A struct literal. &lt;a href=&quot;#Value&quot;&gt;&lt;i&gt;Value&lt;/i&gt;&lt;/a&gt; is repeated &lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt; times.</source>
          <target state="translated">構造体リテラル。&lt;a href=&quot;#Value&quot;&gt;&lt;i&gt;値&lt;/i&gt;&lt;/a&gt;は&lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt;回繰り返されます。</target>
        </trans-unit>
        <trans-unit id="286be268efaafbe7332e602d9baab19f8148f3ca" translate="yes" xml:space="preserve">
          <source>A struct or union is</source>
          <target state="translated">構造体またはユニオンは</target>
        </trans-unit>
        <trans-unit id="306c597a82d5ab4af2135e10c7b985f1b617d325" translate="yes" xml:space="preserve">
          <source>A struct representing an arbitrary precision integer.</source>
          <target state="translated">任意の精度の整数を表す構造体。</target>
        </trans-unit>
        <trans-unit id="526765a5620c1404cef412a5aba1cb550dfea2fe" translate="yes" xml:space="preserve">
          <source>A struct with a disabled default constructor, and no other constructors, cannot be instantiated other than via a &lt;a href=&quot;declaration#VoidInitializer&quot;&gt;&lt;i&gt;VoidInitializer&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトのコンストラクターが無効で他のコンストラクターがない構造体は、&lt;a href=&quot;declaration#VoidInitializer&quot;&gt;&lt;i&gt;VoidInitializerを&lt;/i&gt;&lt;/a&gt;介して以外にインスタンス化できません。</target>
        </trans-unit>
        <trans-unit id="8d49622ffefc7c0f82f7205f52dcf576517ae460" translate="yes" xml:space="preserve">
          <source>A struct/union instance is safe when:</source>
          <target state="translated">struct/unionインスタンスが安全なのは、以下の場合です。</target>
        </trans-unit>
        <trans-unit id="44cac3ef6b0f178c3af52d9fad3a48b33c922f31" translate="yes" xml:space="preserve">
          <source>A structure designed to effectively pack &lt;a href=&quot;#Character&quot;&gt;characters&lt;/a&gt; of a &lt;a href=&quot;#Grapheme%20cluster&quot;&gt;grapheme cluster&lt;/a&gt;.</source>
          <target state="translated">効果的にパックするように設計された構造&lt;a href=&quot;#Character&quot;&gt;の文字&lt;/a&gt;の&lt;a href=&quot;#Grapheme%20cluster&quot;&gt;書記素クラスタを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1dee43ab463ff81471969585aaeb25d27e17a8d5" translate="yes" xml:space="preserve">
          <source>A sub-type of &lt;code&gt;Tuple!()&lt;/code&gt; of the split portions of &lt;code&gt;haystack&lt;/code&gt; (see above for details). This sub-type of &lt;code&gt;Tuple!()&lt;/code&gt; has &lt;code&gt;opCast&lt;/code&gt; defined for &lt;code&gt;bool&lt;/code&gt;. This &lt;code&gt;opCast&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; when the separating &lt;code&gt;needle&lt;/code&gt; was found and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; の分割部分のTuple &lt;code&gt;Tuple!()&lt;/code&gt; のサブタイプ（詳細は上記を参照）。このサブタイプの &lt;code&gt;Tuple!()&lt;/code&gt; してい &lt;code&gt;opCast&lt;/code&gt; がために定義された &lt;code&gt;bool&lt;/code&gt; 。この &lt;code&gt;opCast&lt;/code&gt; は、分離 &lt;code&gt;needle&lt;/code&gt; が見つかった場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8ceb760806d127d92222223abf19d6e9a9a642d1" translate="yes" xml:space="preserve">
          <source>A subset of flags supported on all platforms with getaddrinfo. Specifies option flags for &lt;code&gt;getAddressInfo&lt;/code&gt;.</source>
          <target state="translated">getaddrinfoを使用して、すべてのプラットフォームでサポートされるフラグのサブセット。 &lt;code&gt;getAddressInfo&lt;/code&gt; のオプションフラグを指定します。</target>
        </trans-unit>
        <trans-unit id="5fdcf48534cbb5ac5ca95f825a7e9b13b6291b8b" translate="yes" xml:space="preserve">
          <source>A switch statement goes to one of a collection of case statements depending on the value of the switch expression.</source>
          <target state="translated">スイッチ文は、スイッチ式の値に応じてケース文のコレクションの1つに行きます。</target>
        </trans-unit>
        <trans-unit id="8d52ce29a153bfcaed221e76bcfa3b8652e6334d" translate="yes" xml:space="preserve">
          <source>A switch statement must have a default statement.</source>
          <target state="translated">switch文にはデフォルトの文が必要です。</target>
        </trans-unit>
        <trans-unit id="243f938b3c97b4e1d8eadd9d338c92b666235144" translate="yes" xml:space="preserve">
          <source>A symbol can be declared as an</source>
          <target state="translated">シンボルは</target>
        </trans-unit>
        <trans-unit id="84b715dd42cb515250f3406c66517dd9d7115450" translate="yes" xml:space="preserve">
          <source>A table in the database is locked</source>
          <target state="translated">データベース内のテーブルがロックされている</target>
        </trans-unit>
        <trans-unit id="34955ed2643e3acedc24870a54a36ec54c1a46f3" translate="yes" xml:space="preserve">
          <source>A tagged class reference uses the bits known to be zero in a normal class reference to store extra information. For example, a pointer to an integer must be 4-byte aligned, so there are 2 bits that are always known to be zero. One can store a 2-bit integer there.</source>
          <target state="translated">タグ付きクラス参照は、通常のクラス参照でゼロであることが知られているビットを使用して、余分な情報を格納します。例えば、整数へのポインタは4バイトアラインメントされていなければならないので、常にゼロであることが知られている2ビットが存在します。そこで2ビットの整数を格納することができます。</target>
        </trans-unit>
        <trans-unit id="bec6ca0b9e854ba9b4dc6eeb575b3e2cf1fbdc8a" translate="yes" xml:space="preserve">
          <source>A tagged pointer uses the bits known to be zero in a normal pointer or class reference to store extra information. For example, a pointer to an integer must be 4-byte aligned, so there are 2 bits that are always known to be zero. One can store a 2-bit integer there.</source>
          <target state="translated">タグ付きポインタは、通常のポインタやクラス参照でゼロであることが知られているビットを使用して、余分な情報を格納します。例えば、整数へのポインタは4バイトアラインメントされていなければならないので、常にゼロであることが知られている2ビットがあります。そこで2ビットの整数を格納することができます。</target>
        </trans-unit>
        <trans-unit id="71dbdba1f186a3e3df4f62b2ce30433dcfeb9ff8" translate="yes" xml:space="preserve">
          <source>A template instance that requires IFTI: foo!tiargs(fargs) // foo!tiargs is left until CallExp::semantic() or resolveProperties()</source>
          <target state="translated">IFTI を必要とするテンプレートインスタンス:foo!tiargs(fargs)//foo!tiargs は CallExp::semantic()か resolveProperties()まで残されています。</target>
        </trans-unit>
        <trans-unit id="c487a2a162f74902ff60920af22e2df0fcc4fd2b" translate="yes" xml:space="preserve">
          <source>A template instantiation can be aliased:</source>
          <target state="translated">テンプレートのインスタンス化をエイリアス化することができます。</target>
        </trans-unit>
        <trans-unit id="5ec9a1a961c15a72835c9d805bb9f5cb8a6a13d6" translate="yes" xml:space="preserve">
          <source>A templated &lt;code&gt;struct&lt;/code&gt; can become a nested &lt;code&gt;struct&lt;/code&gt; if it is instantiated with a local symbol passed as an aliased argument:</source>
          <target state="translated">テンプレート &lt;code&gt;struct&lt;/code&gt; 、ネストされたになることができる &lt;code&gt;struct&lt;/code&gt; 、それがエイリアスの引数として渡されたローカルシンボルとインスタンス化されている場合：</target>
        </trans-unit>
        <trans-unit id="286beb1ed5435d657d4bd322969e6d1bee678996" translate="yes" xml:space="preserve">
          <source>A text file of macro definitions can be created, and specified in &lt;code&gt;sc.ini&lt;/code&gt;:</source>
          <target state="translated">マクロ定義のテキストファイルを作成し、 &lt;code&gt;sc.ini&lt;/code&gt; で指定できます。</target>
        </trans-unit>
        <trans-unit id="a2c74bdd28417e72ddc700c54f50c8aefa1946fb" translate="yes" xml:space="preserve">
          <source>A textual representation of the email status</source>
          <target state="translated">メールの状態をテキストで表現したもの</target>
        </trans-unit>
        <trans-unit id="635a851773d8480d1d8ecc449412eec073d321df" translate="yes" xml:space="preserve">
          <source>A tuple consisting of &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y = f(x)&lt;/code&gt; and &lt;code&gt;error = 3 * (absTolerance * fabs(x) + relTolerance)&lt;/code&gt;.  The method used is a combination of golden section search and successive parabolic interpolation. Convergence is never much slower than that for a Fibonacci search.</source>
          <target state="translated">タプルからなる &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y = f(x)&lt;/code&gt; 及び &lt;code&gt;error = 3 * (absTolerance * fabs(x) + relTolerance)&lt;/code&gt; 。使用される方法は、ゴールデンセクション検索と連続放物線補間の組み合わせです。収束は、フィボナッチ検索の場合よりもはるかに遅くなることはありません。</target>
        </trans-unit>
        <trans-unit id="4ef0df844df69a5568d48b91fa199dcc9de56bc7" translate="yes" xml:space="preserve">
          <source>A tuple consisting of two ranges. The first two elements are the range (in &lt;code&gt;x&lt;/code&gt;) of the root, while the second pair of elements are the corresponding function values at those points. If an exact root was found, both of the first two elements will contain the root, and the second pair of elements will be 0.</source>
          <target state="translated">2つの範囲で構成されるタプル。最初の2つの要素はルートの範囲（ &lt;code&gt;x&lt;/code&gt; ）で、2番目の要素のペアはそれらの点での対応する関数値です。正確なルートが見つかった場合、最初の2つの要素の両方にルートが含まれ、2番目の要素のペアは0になります。</target>
        </trans-unit>
        <trans-unit id="6012f9e438732b6c8c1f1bc9808a6995a46a0ce0" translate="yes" xml:space="preserve">
          <source>A tuple containing &lt;code&gt;haystack&lt;/code&gt; positioned to match one of the needles and also the 1-based index of the matching element in &lt;code&gt;needles&lt;/code&gt; (0 if none of &lt;code&gt;needles&lt;/code&gt; matched, 1 if &lt;code&gt;needles[0]&lt;/code&gt; matched, 2 if &lt;code&gt;needles[1]&lt;/code&gt; matched...). The first needle to be found will be the one that matches. If multiple needles are found at the same spot in the range, then the shortest one is the one which matches (if multiple needles of the same length are found at the same spot (e.g &lt;code&gt;&quot;a&quot;&lt;/code&gt; and &lt;code&gt;'a'&lt;/code&gt;), then the left-most of them in the argument list matches).  The relationship between &lt;code&gt;haystack&lt;/code&gt; and &lt;code&gt;needles&lt;/code&gt; simply means that one can e.g. search for individual &lt;code&gt;int&lt;/code&gt;s or arrays of &lt;code&gt;int&lt;/code&gt;s in an array of &lt;code&gt;int&lt;/code&gt;s. In addition, if elements are individually comparable, searches of heterogeneous types are allowed as well: a &lt;code&gt;double[]&lt;/code&gt; can be searched for an &lt;code&gt;int&lt;/code&gt; or a &lt;code&gt;short[]&lt;/code&gt;, and conversely a &lt;code&gt;long&lt;/code&gt; can be searched for a &lt;code&gt;float&lt;/code&gt; or a &lt;code&gt;double[]&lt;/code&gt;. This makes for efficient searches without the need to coerce one side of the comparison into the other's side type.  The complexity of the search is &amp;Omicron;(&lt;code&gt;haystack.length * max(needles.length)&lt;/code&gt;). (For needles that are individual items, length is considered to be 1.) The strategy used in searching several subranges at once maximizes cache usage by moving in &lt;code&gt;haystack&lt;/code&gt; as few times as possible.</source>
          <target state="translated">タプル &lt;code&gt;haystack&lt;/code&gt; 針のいずれかと一致し、また内の一致する要素の1ベースのインデックスに配置 &lt;code&gt;needles&lt;/code&gt; のいずれも場合（0 &lt;code&gt;needles&lt;/code&gt; あれば1、マッチしない &lt;code&gt;needles[0]&lt;/code&gt; 場合は2、整合 &lt;code&gt;needles[1]&lt;/code&gt; 一致します... ）。見つかった最初の針が一致するものになります。範囲内の同じスポットに複数の針が見つかった場合、最も短いものが一致するものです（同じ長さの複数の針が同じスポットにある場合（例： &lt;code&gt;&quot;a&quot;&lt;/code&gt; と &lt;code&gt;'a'&lt;/code&gt; ））、次に左-引数リストのそれらのほとんどが一致します）。 &lt;code&gt;haystack&lt;/code&gt; と &lt;code&gt;needles&lt;/code&gt; の関係単に1は、例えば、個々に検索することができることを意味 &lt;code&gt;int&lt;/code&gt; 型秒かの配列 &lt;code&gt;int&lt;/code&gt; 型の配列での &lt;code&gt;int&lt;/code&gt; 型秒。さらに、要素が個別に比較可能な場合は、異種タイプの検索も許可されます &lt;code&gt;double[]&lt;/code&gt; は &lt;code&gt;int&lt;/code&gt; または &lt;code&gt;short[]&lt;/code&gt; 検索でき、逆に &lt;code&gt;long&lt;/code&gt; は &lt;code&gt;float&lt;/code&gt; または &lt;code&gt;double[]&lt;/code&gt; 検索できます。これにより、比較の片側を他の側の型に強制する必要なく、効率的な検索が可能になります。検索の複雑さは&amp;Omicron; &lt;code&gt;haystack.length * max(needles.length)&lt;/code&gt; ）。（個別のアイテムである針の場合、長さは1と見なされます。）一度に複数の部分範囲を検索するために使用される戦略は、 &lt;code&gt;haystack&lt;/code&gt; をできるだけ少ない回数移動することにより、キャッシュの使用を最大化します。</target>
        </trans-unit>
        <trans-unit id="ded0856f6fc1b75ce8ecf0a9f7b88274ab801b0f" translate="yes" xml:space="preserve">
          <source>A tuple of ParameterStorageClass bits</source>
          <target state="translated">ParameterStorageClass ビットのタプル。</target>
        </trans-unit>
        <trans-unit id="fd35c428724dd8619e23fbf0f2a7e57058b4f08d" translate="yes" xml:space="preserve">
          <source>A tuple with &lt;code&gt;isMutable&lt;/code&gt; and &lt;code&gt;isNotShared&lt;/code&gt; set if the &lt;code&gt;lhsMod&lt;/code&gt; is missing those modifiers (compared to rhs).</source>
          <target state="translated">タプル &lt;code&gt;isMutable&lt;/code&gt; と &lt;code&gt;isNotShared&lt;/code&gt; セット場合 &lt;code&gt;lhsMod&lt;/code&gt; は（RHSと比較して）、これらの修飾子が指定されていません。</target>
        </trans-unit>
        <trans-unit id="925ba630a3a1ee356b2d095a9d23d602a9a88f92" translate="yes" xml:space="preserve">
          <source>A type &lt;code&gt;S&lt;/code&gt; gets compiler-generated &lt;code&gt;opAssign&lt;/code&gt; if it has an elaborate destructor.</source>
          <target state="translated">タイプ &lt;code&gt;S&lt;/code&gt; は、複雑なデストラクタがある場合、コンパイラによって生成された &lt;code&gt;opAssign&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="87f68985da3ea589273931016f24036b553a5f0d" translate="yes" xml:space="preserve">
          <source>A type &lt;code&gt;S&lt;/code&gt; gets compiler-generated &lt;code&gt;opAssign&lt;/code&gt; in case it has an elaborate copy constructor or elaborate destructor.</source>
          <target state="translated">タイプ &lt;code&gt;S&lt;/code&gt; は、複雑なコピーコンストラクターまたは複雑なデストラクタがある場合に、コンパイラー生成の &lt;code&gt;opAssign&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="c2925ba28f3ef4457063b11b5313b546bc942531" translate="yes" xml:space="preserve">
          <source>A type called StaticClassXXXX which defines all the static members.</source>
          <target state="translated">すべてのスタティックメンバを定義するStaticClassXXXXと呼ばれる型です。</target>
        </trans-unit>
        <trans-unit id="4bafd715c2d842fc48782a23197830301ac6594f" translate="yes" xml:space="preserve">
          <source>A typesafe structure for storing combinations of enum values.</source>
          <target state="translated">列挙値の組み合わせを格納するためのタイプセーフ構造体。</target>
        </trans-unit>
        <trans-unit id="19bbabc23db1d89e38664a27a9f383fa929906e5" translate="yes" xml:space="preserve">
          <source>A typical use-case is to perform lazy but thread-safe initialization.</source>
          <target state="translated">典型的なユースケースは、遅延しているがスレッドセーフな初期化を実行することです。</target>
        </trans-unit>
        <trans-unit id="1108e01a71348662d4697940c03ca612a789d5db" translate="yes" xml:space="preserve">
          <source>A typical workaround would be to use array vector operations instead:</source>
          <target state="translated">典型的な回避策は、代わりに配列ベクトル演算を使用することです。</target>
        </trans-unit>
        <trans-unit id="622333820bdb5ef06fbb318f56dcf3f6445745f2" translate="yes" xml:space="preserve">
          <source>A unique hash of the &lt;code&gt;BigInt&lt;/code&gt;'s value suitable for use in a hash table.</source>
          <target state="translated">ハッシュテーブルでの使用に適した &lt;code&gt;BigInt&lt;/code&gt; の値の一意のハッシュ。</target>
        </trans-unit>
        <trans-unit id="2198d4c146bec18fd1ce6760a109cc4921cdd05d" translate="yes" xml:space="preserve">
          <source>A unit test for a function should appear immediately following it.</source>
          <target state="translated">関数のユニットテストは、その直後に表示されなければなりません。</target>
        </trans-unit>
        <trans-unit id="8a517fa6a3c0c868fd6ae7e933059bd47b7df17a" translate="yes" xml:space="preserve">
          <source>A unittest may be attributed with any of the global function attributes. Such unittests are useful in verifying the given attribute(s) on a template function:</source>
          <target state="translated">ユニテストは、グローバル関数の属性のいずれかに帰属させることができます。このようなユニテストは、テンプレート関数上で与えられた属性を検証するのに便利です。</target>
        </trans-unit>
        <trans-unit id="7ae21aa22fe7948e4c729f1540b79f8cd693afe8" translate="yes" xml:space="preserve">
          <source>A unittest which is not documented, or is marked as private will not be used to generate code samples.</source>
          <target state="translated">ドキュメント化されていない、またはプライベートとマークされているユニテストは、コードサンプルの生成には使用されません。</target>
        </trans-unit>
        <trans-unit id="9c1c04f676b35796be10ffb3edecc8f6268e7b22" translate="yes" xml:space="preserve">
          <source>A useful and popular use of algebraic data structures is for defining &lt;a href=&quot;https://google.com/search?btnI=I%27m+Feeling+Lucky&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;q=self-referential%20data%20structures&quot;&gt;self-referential data structures&lt;/a&gt;, i.e. structures that embed references to values of their own type within.  This is achieved with &lt;code&gt;Algebraic&lt;/code&gt; by using &lt;code&gt;This&lt;/code&gt; as a placeholder whenever a reference to the type being defined is needed. The &lt;code&gt;Algebraic&lt;/code&gt; instantiation will perform &lt;a href=&quot;https://en.wikipedia.org/wiki/Name_resolution_(programming_languages)#Alpha_renaming_to_make_name_resolution_trivial&quot;&gt;alpha renaming&lt;/a&gt; on its constituent types, replacing &lt;code&gt;This&lt;/code&gt; with the self-referenced type. The structure of the type involving &lt;code&gt;This&lt;/code&gt; may be arbitrarily complex.</source>
          <target state="translated">代数的データ構造の便利で一般的な使用法は、&lt;a href=&quot;https://google.com/search?btnI=I%27m+Feeling+Lucky&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;q=self-referential%20data%20structures&quot;&gt;自己参照データ構造&lt;/a&gt;、つまり、自身のタイプの値への参照を内部に埋め込む構造を定義することです。これは、定義されている型への参照が必要なときはいつでも &lt;code&gt;This&lt;/code&gt; をプレースホルダーとして使用することにより、 &lt;code&gt;Algebraic&lt;/code&gt; で実現されます。 &lt;code&gt;Algebraic&lt;/code&gt; インスタンスが実行する&lt;a href=&quot;https://en.wikipedia.org/wiki/Name_resolution_(programming_languages)#Alpha_renaming_to_make_name_resolution_trivial&quot;&gt;アルファリネーミングを&lt;/a&gt;置き換え、その構成要素の種類に &lt;code&gt;This&lt;/code&gt; 自己参照型で。 &lt;code&gt;This&lt;/code&gt; を含む型の構造は、任意に複雑になる場合があります。</target>
        </trans-unit>
        <trans-unit id="5cd31092f50e6668ec7962d66b14d97f0b254db8" translate="yes" xml:space="preserve">
          <source>A useful technique for Unicode-aware parsers that perform character classification of encoded &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt; is to avoid unnecassary decoding at all costs. &lt;a href=&quot;#utfMatcher&quot;&gt;&lt;code&gt;utfMatcher&lt;/code&gt;&lt;/a&gt; provides an improvement over the usual workflow of decode-classify-process, combining the decoding and classification steps. By extracting necessary bits directly from encoded &lt;a href=&quot;#Code%20unit&quot;&gt;code units&lt;/a&gt; matchers achieve significant performance improvements. See &lt;a href=&quot;#MatcherConcept&quot;&gt;&lt;code&gt;MatcherConcept&lt;/code&gt;&lt;/a&gt; for the common interface of UTF matchers.</source>
          <target state="translated">エンコードされた&lt;a href=&quot;#Code%20point&quot;&gt;コードポイントの&lt;/a&gt;文字分類を実行するUnicode対応のパーサーに役立つテクニックは、不必要なデコードを絶対に回避することです。&lt;a href=&quot;#utfMatcher&quot;&gt; &lt;code&gt;utfMatcher&lt;/code&gt; &lt;/a&gt;は、デコードと分類のステップを組み合わせて、デコード-分類-プロセスの通常のワークフローを改善します。エンコードされた&lt;a href=&quot;#Code%20unit&quot;&gt;コード単位&lt;/a&gt;から必要なビットを直接抽出することにより、マッチャーは大幅なパフォーマンスの向上を実現します。UTFマッチャーの共通インターフェースについては、&lt;a href=&quot;#MatcherConcept&quot;&gt; &lt;code&gt;MatcherConcept&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9e9a2a2de1ba1fef47986aeaad29546ee2f0c629" translate="yes" xml:space="preserve">
          <source>A user-defined attribute looks like:</source>
          <target state="translated">ユーザー定義の属性は次のようになります。</target>
        </trans-unit>
        <trans-unit id="6ec4f05c1da31924f6c46c6e8eceeade66257fb8" translate="yes" xml:space="preserve">
          <source>A user-defined one can implement the equivalent semantics, but can be more efficient.</source>
          <target state="translated">ユーザー定義のものは、同等のセマンティクスを実装することができますが、より効率的になります。</target>
        </trans-unit>
        <trans-unit id="24ccdd70677c403ccb2a313c4c9c32fa6f8c9c76" translate="yes" xml:space="preserve">
          <source>A user:password in the URL will be ignored. Unless one is set programmatically, the .netrc will be queried.</source>
          <target state="translated">URLに含まれるuser:passwordは無視されます。プログラムで設定されていない限り、.netrcが照会されます。</target>
        </trans-unit>
        <trans-unit id="2c2902f73aa9094938733525713baf7d27f4d32d" translate="yes" xml:space="preserve">
          <source>A user:password in the URL will be preferred to one in the .netrc.</source>
          <target state="translated">URL の user:password は .netrc のものよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="bfd68567162b198b169e63ff6f9ce0abafc592a1" translate="yes" xml:space="preserve">
          <source>A value from &lt;code&gt;input&lt;/code&gt; of type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; の &lt;code&gt;input&lt;/code&gt; からの値</target>
        </trans-unit>
        <trans-unit id="fab34a840eca5f0af3a6adfab162743b8b96ab0f" translate="yes" xml:space="preserve">
          <source>A value of 1 means that no alignment is done; fields are packed together.</source>
          <target state="translated">値が1の場合、アラインメントが行われないことを意味します。</target>
        </trans-unit>
        <trans-unit id="0f087658ff6dd881c1c276fc1abe86c63c82fce4" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;T&lt;/code&gt; to assign to this &lt;code&gt;Nullable&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Nullable&lt;/code&gt; に割り当てるタイプ &lt;code&gt;T&lt;/code&gt; の値。</target>
        </trans-unit>
        <trans-unit id="92fc64d8ff9ab394a43cf1989c0c0f6d5f276117" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;T&lt;/code&gt; to assign to this &lt;code&gt;Nullable&lt;/code&gt;. If it is &lt;code&gt;nullvalue&lt;/code&gt;, then the internal state of this &lt;code&gt;Nullable&lt;/code&gt; will be set to null.</source>
          <target state="translated">この &lt;code&gt;Nullable&lt;/code&gt; に割り当てるタイプ &lt;code&gt;T&lt;/code&gt; の値。 &lt;code&gt;nullvalue&lt;/code&gt; の場合、この &lt;code&gt;Nullable&lt;/code&gt; の内部状態はnullに設定されます。</target>
        </trans-unit>
        <trans-unit id="595ffc8e3de776e07c75f9495e539287bfe40f7d" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;T&lt;/code&gt; to assign to this &lt;code&gt;NullableRef&lt;/code&gt;. If the internal state of this &lt;code&gt;NullableRef&lt;/code&gt; has not been initialized, an error will be thrown in non-release mode.</source>
          <target state="translated">この &lt;code&gt;NullableRef&lt;/code&gt; に割り当てるタイプ &lt;code&gt;T&lt;/code&gt; の値。この &lt;code&gt;NullableRef&lt;/code&gt; の内部状態が初期化されていない場合、非解放モードでエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="0312bacf411c0359c567722d8da661969980e011" translate="yes" xml:space="preserve">
          <source>A variable storing the number of digits of the factorial number stored in &lt;code&gt;fac&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fac&lt;/code&gt; に格納されている階乗数の桁数を格納する変数。</target>
        </trans-unit>
        <trans-unit id="1288e9434e2f0aa83f354b220fc3320a00da2bf3" translate="yes" xml:space="preserve">
          <source>A variadic array of &lt;code&gt;Statement&lt;/code&gt;s, that will copied in this class The entries themselves will not be copied.</source>
          <target state="translated">このクラスにコピーされる &lt;code&gt;Statement&lt;/code&gt; の可変配列。エントリ自体はコピーされません。</target>
        </trans-unit>
        <trans-unit id="f46908d75fb188ea17f0c418cfb5fce0d59b00a5" translate="yes" xml:space="preserve">
          <source>A variant on interfaces is the COM interface. A COM interface is designed to map directly onto a Windows COM object. Any COM object can be represented by a COM interface, and any D object with a COM interface can be used by external COM clients.</source>
          <target state="translated">インターフェイスの一種である COM インターフェイスは、Windows の COM オブジェクトに直接マッピングするように設計されています。COM インターフェースは、Windows COM オブジェクトに直接マッピングするように設計されています。任意の COM オブジェクトは COM インターフェースで表現することができ、COM インターフェースを持つ D オブジェクトは外部 COM クライアントで使用することができます。</target>
        </trans-unit>
        <trans-unit id="74bc7034954daf05645c8bdf69b200a66acd5b8d" translate="yes" xml:space="preserve">
          <source>A variation on &lt;a href=&quot;#replaceAll&quot;&gt;&lt;code&gt;replaceAll&lt;/code&gt;&lt;/a&gt; that instead of allocating a new string on each call outputs the result piece-wise to the &lt;code&gt;sink&lt;/code&gt;. In particular this enables efficient construction of a final output incrementally.</source>
          <target state="translated">&lt;a href=&quot;#replaceAll&quot;&gt; &lt;code&gt;replaceAll&lt;/code&gt; &lt;/a&gt;のバリエーションで、呼び出しごとに新しい文字列を割り当てる代わりに、結果を区分的に &lt;code&gt;sink&lt;/code&gt; 出力します。特に、これにより最終出力を段階的に効率的に構築できます。</target>
        </trans-unit>
        <trans-unit id="558bf167836891063033473ff39e29c40f76a6ae" translate="yes" xml:space="preserve">
          <source>A variation on &lt;a href=&quot;#replaceFirst&quot;&gt;&lt;code&gt;replaceFirst&lt;/code&gt;&lt;/a&gt; that instead of allocating a new string on each call outputs the result piece-wise to the &lt;code&gt;sink&lt;/code&gt;. In particular this enables efficient construction of a final output incrementally.</source>
          <target state="translated">&lt;a href=&quot;#replaceFirst&quot;&gt; &lt;code&gt;replaceFirst&lt;/code&gt; &lt;/a&gt;のバリエーションで、呼び出しごとに新しい文字列を割り当てる代わりに、結果を区分的に &lt;code&gt;sink&lt;/code&gt; 出力します。特に、これにより最終出力を段階的に効率的に構築できます。</target>
        </trans-unit>
        <trans-unit id="fd2627bfee6415d1e46fb27e196853613a72b036" translate="yes" xml:space="preserve">
          <source>A variation on &lt;a href=&quot;#spawnProcess&quot;&gt;&lt;code&gt;spawnProcess&lt;/code&gt;&lt;/a&gt; that runs the given command through the current user's preferred command interpreter (aka. shell).</source>
          <target state="translated">現在のユーザーの優先コマンドインタープリター（別名シェル）を介して特定のコマンドを実行する&lt;a href=&quot;#spawnProcess&quot;&gt; &lt;code&gt;spawnProcess&lt;/code&gt; &lt;/a&gt;のバリエーション。</target>
        </trans-unit>
        <trans-unit id="06c25ac99fc939d88ae07ec02cd1e2eaea8adf25" translate="yes" xml:space="preserve">
          <source>A vector operation is indicated by the slice operator appearing as the left-hand side of an assignment or an op-assignment expression. The right-hand side can be an expression consisting either of an array slice of the same length and type as the left-hand side or a scalar expression of the element type of the left-hand side, in any combination.</source>
          <target state="translated">ベクトル演算は、スライス演算子が代入または演算代入式の左辺として現れることで示されます。右辺は、左辺と同じ長さと型の配列スライスか、左辺の要素型のスカラ式のいずれかからなる式で、任意の組み合わせであることができます。</target>
        </trans-unit>
        <trans-unit id="0201e0884279f412eec70152c95bca634cabe90f" translate="yes" xml:space="preserve">
          <source>A version condition is of the form:</source>
          <target state="translated">バージョン条件とは、このような形式のことです。</target>
        </trans-unit>
        <trans-unit id="036b91c045d7afd669b86e632efdeb65cf70fbe8" translate="yes" xml:space="preserve">
          <source>A version of &lt;a href=&quot;#Appender&quot;&gt;&lt;code&gt;Appender&lt;/code&gt;&lt;/a&gt; that can update an array in-place. It forwards all calls to an underlying appender implementation. Any calls made to the appender also update the pointer to the original array passed in.</source>
          <target state="translated">配列をインプレースで更新できるバージョンの&lt;a href=&quot;#Appender&quot;&gt; &lt;code&gt;Appender&lt;/code&gt; &lt;/a&gt;。すべての呼び出しを基礎となるアペンダー実装に転送します。アペンダーへのすべての呼び出しは、渡された元の配列へのポインターも更新します。</target>
        </trans-unit>
        <trans-unit id="0f69ae09b687c0f70931e5d637c3720fd96bc47f" translate="yes" xml:space="preserve">
          <source>A very important attribute of the Unicode Normalization Forms is that they must remain stable between versions of the Unicode Standard. A Unicode string normalized to a particular Unicode Normalization Form in one version of the standard is guaranteed to remain in that Normalization Form for implementations of future versions of the standard.</source>
          <target state="translated">Unicode正規化形式の非常に重要な属性は、Unicode標準のバージョン間で安定していなければならないということです。あるバージョンの標準規格で特定の Unicode 正規化フォームに正規化された Unicode 文字列は、将来のバージョンの標準規格の実装においても、その正規化フォームのままであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="204a1d9da8aeb4ccbb41074798c36ae598e785cb" translate="yes" xml:space="preserve">
          <source>A visitor to walk entire statements and provides ability to replace any sub-statements.</source>
          <target state="translated">ステートメント全体を閲覧することができ、任意の小ステートメントを置き換える機能を提供します。</target>
        </trans-unit>
        <trans-unit id="ecda6fbd787080a0c71eaf580a2379d0a84fd558" translate="yes" xml:space="preserve">
          <source>A way to construct optimal packed multi-stage tables also known as a special case of &lt;a href=&quot;https://en.wikipedia.org/wiki/Trie&quot;&gt;Trie&lt;/a&gt;. The functions &lt;a href=&quot;#codepointTrie&quot;&gt;&lt;code&gt;codepointTrie&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#codepointSetTrie&quot;&gt;&lt;code&gt;codepointSetTrie&lt;/code&gt;&lt;/a&gt; construct custom tries that map dchar to value. The end result is a fast and predictable &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;) lookup that powers functions like &lt;a href=&quot;#isAlpha&quot;&gt;&lt;code&gt;isAlpha&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#combiningClass&quot;&gt;&lt;code&gt;combiningClass&lt;/code&gt;&lt;/a&gt;, but for user-defined data sets.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Trie&quot;&gt;Trieの&lt;/a&gt;特殊なケースとしても知られる、最適なパックされたマルチステージテーブルを構築する方法。関数&lt;a href=&quot;#codepointTrie&quot;&gt; &lt;code&gt;codepointTrie&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#codepointSetTrie&quot;&gt; &lt;code&gt;codepointSetTrie&lt;/code&gt; &lt;/a&gt;は、dcharを値にマップするカスタム試行を構成します。最終結果は、迅速かつ予測&amp;Omicron;ある（ &lt;code&gt;1&lt;/code&gt; ）ルックアップそのような電力機能&lt;a href=&quot;#isAlpha&quot;&gt; &lt;code&gt;isAlpha&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#combiningClass&quot;&gt; &lt;code&gt;combiningClass&lt;/code&gt; &lt;/a&gt;が、ユーザ定義のデータセットについては。</target>
        </trans-unit>
        <trans-unit id="179d3c78fdb472871d26dca4bbdeaf8b134c8648" translate="yes" xml:space="preserve">
          <source>A word-aligned buffer of &lt;code&gt;n&lt;/code&gt; bytes, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; バイトのワード境界整列バッファ、または &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5bda91bd2eb64cc9ebd789e00ffee28462db953" translate="yes" xml:space="preserve">
          <source>A wrapper &lt;code&gt;struct&lt;/code&gt; that preserves the range interface of &lt;code&gt;input&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; の範囲インターフェースを保持するラッパー &lt;code&gt;struct&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d29ec600e62a50d3d9eec98dae8f8d3e051f7de3" translate="yes" xml:space="preserve">
          <source>A wrapper around a list of allocators which allow for very fast deallocations.</source>
          <target state="translated">非常に高速なデアロケートを可能にするアロケータリストのラッパー。</target>
        </trans-unit>
        <trans-unit id="15c2c153bb71919b5cdec457823f4fd9f8d71bf9" translate="yes" xml:space="preserve">
          <source>A wrapper for whatever the main thread would have done in the absence of a custom scheduler. It will be automatically executed via a call to spawn by the Scheduler.</source>
          <target state="translated">カスタムスケジューラが存在しない場合にメインスレッドが行っていたであろうことのラッパーです。スケジューラのスポーン呼び出しによって自動的に実行されます。</target>
        </trans-unit>
        <trans-unit id="66b2f8e9850db5c9a0ef26a091089e2397efa6e8" translate="yes" xml:space="preserve">
          <source>A wrapper on top of the built-in cast operator that allows one to restrict casting of the original type of the value.</source>
          <target state="translated">組み込みのキャスト演算子の上にあるラッパーで、値の元の型のキャストを制限することができます。</target>
        </trans-unit>
        <trans-unit id="d26b628f187d45bc4e12de9cc9385d4c6d2e0a9b" translate="yes" xml:space="preserve">
          <source>A writer sub-mutex.</source>
          <target state="translated">ライターのサブミューテックス。</target>
        </trans-unit>
        <trans-unit id="74f058625ae51d7f9a4f0234f03e7d2e3133d478" translate="yes" xml:space="preserve">
          <source>A zero was generated by underflow</source>
          <target state="translated">アンダーフローでゼロが発生</target>
        </trans-unit>
        <trans-unit id="ce3098487e1cd9f75cd7cad95483a4b4deb5588e" translate="yes" xml:space="preserve">
          <source>A* &lt;code&gt;arr&lt;/code&gt;</source>
          <target state="translated">* &lt;code&gt;arr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a30240d9b1407524e8eee853f1720d4610565ce4" translate="yes" xml:space="preserve">
          <source>AA &lt;code&gt;aa&lt;/code&gt;</source>
          <target state="translated">AA &lt;code&gt;aa&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76c631f781a8d0368d8a6ea89a0fbce4e43bfbaa" translate="yes" xml:space="preserve">
          <source>AA version for debuggers, bump whenever changing the layout</source>
          <target state="translated">デバッガ用のAA版、レイアウト変更時にバンプする</target>
        </trans-unit>
        <trans-unit id="3e563eabeb4bf3cec4d1e28f9fcc377ee1ff90bd" translate="yes" xml:space="preserve">
          <source>AA* &lt;code&gt;aa&lt;/code&gt;</source>
          <target state="translated">AA * &lt;code&gt;aa&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="feebbf826eefee82f4e7df8a0dfb7c29775241f0" translate="yes" xml:space="preserve">
          <source>ABI tag is an attribute introduced by the GNU C++ compiler. It modifies the mangled name of the symbol to incorporate the tag name, in order to distinguish from an earlier version with a different ABI.</source>
          <target state="translated">ABIタグはGNU C++コンパイラによって導入された属性です。これは、異なる ABI を持つ以前のバージョンと区別するために、タグ名を組み込むようにシンボルの名前を変更します。</target>
        </trans-unit>
        <trans-unit id="a0ab529de7da6070afe29cdd8345d68a47ee6fbe" translate="yes" xml:space="preserve">
          <source>AMD Athlon (K7, K8, K10).</source>
          <target state="translated">AMD Athlon(K7、K8、K10)。</target>
        </trans-unit>
        <trans-unit id="624f7573dca9fe5ebe0a6858283e1c5d9432014a" translate="yes" xml:space="preserve">
          <source>AMD Opcodes</source>
          <target state="translated">AMDオペコード</target>
        </trans-unit>
        <trans-unit id="039721a06435401a74bdd364a8f46ca9309e70c2" translate="yes" xml:space="preserve">
          <source>AMD Opcodes Supported</source>
          <target state="translated">サポートされているAMDオペコード</target>
        </trans-unit>
        <trans-unit id="4ca0a1dafaea5e84f002eb1c3a7a92dd033b7a8c" translate="yes" xml:space="preserve">
          <source>APIs</source>
          <target state="translated">APIs</target>
        </trans-unit>
        <trans-unit id="6b6bf129e90e87f19aebb266c7797207c07f48fe" translate="yes" xml:space="preserve">
          <source>ARM in Thumb mode; use &lt;code&gt;ARM_Thumb&lt;/code&gt; instead</source>
          <target state="translated">ThumbモードのARM。代わりに &lt;code&gt;ARM_Thumb&lt;/code&gt; を使用してください</target>
        </trans-unit>
        <trans-unit id="cb1fdcfffd40402c89d0d4bb3b0d681220235dda" translate="yes" xml:space="preserve">
          <source>ARM in any Thumb mode</source>
          <target state="translated">任意のサムモードでARM</target>
        </trans-unit>
        <trans-unit id="94090230b1f8c256f7ac5dc5a70bd3b20ee4ff15" translate="yes" xml:space="preserve">
          <source>ASCII</source>
          <target state="translated">ASCII</target>
        </trans-unit>
        <trans-unit id="d63aa0860f8ef36562ad0b514274ba63a3eacd6b" translate="yes" xml:space="preserve">
          <source>ASCII (strictly, 7-bit ASCII)</source>
          <target state="translated">アスキー</target>
        </trans-unit>
        <trans-unit id="89174118a4a495c66300fbe7239a480764509b25" translate="yes" xml:space="preserve">
          <source>ASCII i string to capitalize</source>
          <target state="translated">大文字にするASCII i文字列</target>
        </trans-unit>
        <trans-unit id="0f7fc546df38aeee4d77978d5dcfbe350f0e2747" translate="yes" xml:space="preserve">
          <source>ASCII whitespace</source>
          <target state="translated">アスキーホワイトスペース</target>
        </trans-unit>
        <trans-unit id="9ef82a5dc44fd8e8e212aabe32c11cac57294938" translate="yes" xml:space="preserve">
          <source>ASCII-only</source>
          <target state="translated">ASCII-only</target>
        </trans-unit>
        <trans-unit id="6fc55697bc9a0a7e365add2e6ecfcd149e10701c" translate="yes" xml:space="preserve">
          <source>ASCII_Hex_Digit</source>
          <target state="translated">ASCII_Hex_Digit</target>
        </trans-unit>
        <trans-unit id="a579237e1f01010812c214ab27a5b3beb489ff76" translate="yes" xml:space="preserve">
          <source>AST node for &lt;code&gt;EnumDeclaration&lt;/code&gt;&lt;a href=&quot;https://dlang.org/spec/enum.html#EnumDeclaration&quot;&gt;https://dlang.org/spec/enum.html#EnumDeclaration&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;EnumDeclaration&lt;/code&gt; の ASTノード&lt;a href=&quot;https://dlang.org/spec/enum.html#EnumDeclaration&quot;&gt;https://dlang.org/spec/enum.html#EnumDeclaration&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e2e1a886f972c32fded02bd26e8e6b865f2eb255" translate="yes" xml:space="preserve">
          <source>AST node representing a member of an enum. &lt;a href=&quot;https://dlang.org/spec/enum.html#EnumMember&quot;&gt;https://dlang.org/spec/enum.html#EnumMember&lt;/a&gt;&lt;a href=&quot;https://dlang.org/spec/enum.html#AnonymousEnumMember&quot;&gt;https://dlang.org/spec/enum.html#AnonymousEnumMember&lt;/a&gt;</source>
          <target state="translated">列挙型のメンバーを表すASTノード。&lt;a href=&quot;https://dlang.org/spec/enum.html#EnumMember&quot;&gt;https://dlang.org/spec/enum.html#EnumMember &lt;/a&gt;&lt;a href=&quot;https://dlang.org/spec/enum.html#AnonymousEnumMember&quot;&gt;https://dlang.org/spec/enum.html#AnonymousEnumMember&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4856a925a6f71d775d2a2dd67176ae2d0a9e9f77" translate="yes" xml:space="preserve">
          <source>AST.Expression &lt;strong id=&quot;parsePrimaryExp&quot;&gt;parsePrimaryExp&lt;/strong&gt;();</source>
          <target state="translated">AST.Expression &lt;strong id=&quot;parsePrimaryExp&quot;&gt;parsePrimaryExp&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="c3fec866346bd5e2dcb25d972f5a97367df05503" translate="yes" xml:space="preserve">
          <source>AST.Statement &lt;strong id=&quot;parseStatement&quot;&gt;parseStatement&lt;/strong&gt;(int flags, const(char)** endPtr = null, Loc* pEndloc = null);</source>
          <target state="translated">AST.Statement &lt;strong id=&quot;parseStatement&quot;&gt;parseStatement&lt;/strong&gt;（intフラグ、const（char）** endPtr = null、Loc * pEndloc = null）;</target>
        </trans-unit>
        <trans-unit id="debca9f07fb54076426713e9f9bdcd3e1e056b0e" translate="yes" xml:space="preserve">
          <source>AVX Vector instructions are supported</source>
          <target state="translated">AVX ベクトル命令がサポートされています。</target>
        </trans-unit>
        <trans-unit id="44a916ba2993444e910670ef65cccc667bfc068f" translate="yes" xml:space="preserve">
          <source>AVX2 Vector instructions are supported</source>
          <target state="translated">AVX2 ベクトル命令をサポート</target>
        </trans-unit>
        <trans-unit id="fc32691eed408bcffd208331061395fcb95f2539" translate="yes" xml:space="preserve">
          <source>Abb.</source>
          <target state="translated">Abb.</target>
        </trans-unit>
        <trans-unit id="d87c8562414047004383cefab06dde994ab29260" translate="yes" xml:space="preserve">
          <source>Abort due to constraint violation</source>
          <target state="translated">制約違反による中止</target>
        </trans-unit>
        <trans-unit id="28ef1e43dd92ae02027dd18a6bebb7e635d80224" translate="yes" xml:space="preserve">
          <source>Abort the SQL statement with an error</source>
          <target state="translated">エラーでSQL文を中止する</target>
        </trans-unit>
        <trans-unit id="14230c93975c238bf7c790d700013262220823e1" translate="yes" xml:space="preserve">
          <source>Abort the send and return.</source>
          <target state="translated">送信を中止して返送します。</target>
        </trans-unit>
        <trans-unit id="aa41dd8e948e2dab26d97077811c4859daf44a19" translate="yes" xml:space="preserve">
          <source>Above, &lt;code&gt;Foo!().foo&lt;/code&gt; will work just the same as a member function of class &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;Bar!().bar&lt;/code&gt; will work just the same as a nested function within function &lt;code&gt;main()&lt;/code&gt;.</source>
          <target state="translated">上記、 &lt;code&gt;Foo!().foo&lt;/code&gt; クラスのメンバ関数としてだけで同じ動作する &lt;code&gt;C&lt;/code&gt; 、および &lt;code&gt;Bar!().bar&lt;/code&gt; 関数内でネストされた関数とちょうど同じように動作します &lt;code&gt;main()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72be1abc9c41f18cb036851d094c7e5ee1691674" translate="yes" xml:space="preserve">
          <source>Absolute tolerance.</source>
          <target state="translated">絶対的な許容範囲。</target>
        </trans-unit>
        <trans-unit id="5065cb3ac6b52ca94db622cc45ddec46996ff941" translate="yes" xml:space="preserve">
          <source>Abstract base class for XML items</source>
          <target state="translated">XML項目の抽象基底クラス</target>
        </trans-unit>
        <trans-unit id="fa5896f602b41f6e737833e94bdb9dfbf32d9f47" translate="yes" xml:space="preserve">
          <source>Abstract base class of all encoding schemes</source>
          <target state="translated">すべての符号化方式の抽象基底クラス</target>
        </trans-unit>
        <trans-unit id="fd71c6586a6fb20a005525c1ab9479acf96f2316" translate="yes" xml:space="preserve">
          <source>Abstract characters not directly encoded by the Unicode Standard can often be represented by the use of combining character sequences.</source>
          <target state="translated">Unicode 標準で直接符号化されていない抽象的な文字は、しばしば文字列を組み合わせて表現することができます。</target>
        </trans-unit>
        <trans-unit id="c9ce51b5c3d269c08cea6f74d4b2f5fd2e587775" translate="yes" xml:space="preserve">
          <source>Accept an incoming connection. If the socket is blocking, &lt;code&gt;accept&lt;/code&gt; waits for a connection request. Throws &lt;code&gt;SocketAcceptException&lt;/code&gt; if unable to accept. See &lt;code&gt;accepting&lt;/code&gt; for use with derived classes.</source>
          <target state="translated">着信接続を受け入れます。ソケットがブロックしている場合、 &lt;code&gt;accept&lt;/code&gt; は接続要求を待ちます。例外 &lt;code&gt;SocketAcceptException&lt;/code&gt; は受け入れることができない場合。派生クラスでの使用の &lt;code&gt;accepting&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3697222ce3b5ee0c832014446956a71a9e3f9768" translate="yes" xml:space="preserve">
          <source>Accepted units are &lt;code&gt;&quot;days&quot;&lt;/code&gt;, &lt;code&gt;&quot;minutes&quot;&lt;/code&gt;, &lt;code&gt;&quot;hours&quot;&lt;/code&gt;, &lt;code&gt;&quot;minutes&quot;&lt;/code&gt;, &lt;code&gt;&quot;seconds&quot;&lt;/code&gt;, &lt;code&gt;&quot;msecs&quot;&lt;/code&gt;, &lt;code&gt;&quot;usecs&quot;&lt;/code&gt;, and &lt;code&gt;&quot;hnsecs&quot;&lt;/code&gt;.</source>
          <target state="translated">受け入れられる単位は、 &lt;code&gt;&quot;days&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;minutes&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;hours&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;minutes&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;seconds&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;msecs&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;usecs&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;hnsecs&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e4354a6713d7ad0caea954c67b888e32cf0474a8" translate="yes" xml:space="preserve">
          <source>Accepted units are &lt;code&gt;&quot;days&quot;&lt;/code&gt;, &lt;code&gt;&quot;minutes&quot;&lt;/code&gt;, &lt;code&gt;&quot;hours&quot;&lt;/code&gt;, &lt;code&gt;&quot;minutes&quot;&lt;/code&gt;, and &lt;code&gt;&quot;seconds&quot;&lt;/code&gt;.</source>
          <target state="translated">受け入れられる単位は、 &lt;code&gt;&quot;days&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;minutes&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;hours&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;minutes&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;seconds&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5fe93e8eee53666f950c9ca80808bfeb7d041149" translate="yes" xml:space="preserve">
          <source>Accepted units are &lt;code&gt;&quot;hours&quot;&lt;/code&gt;, &lt;code&gt;&quot;minutes&quot;&lt;/code&gt;, and &lt;code&gt;&quot;seconds&quot;&lt;/code&gt;.</source>
          <target state="translated">受け入れられる単位は、 &lt;code&gt;&quot;hours&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;minutes&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;seconds&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2757cba57a7420e39d1261498e6488dd5ac45155" translate="yes" xml:space="preserve">
          <source>Accepts a path to either a file or a directory. In the former case, the basepath (path to the containing directory) will be checked for existence, and created if it does not exists. In the later case, the directory pointed to will be checked for existence and created if needed.</source>
          <target state="translated">ファイルまたはディレクトリへのパスを受け取ります。前者の場合、ベースパス(ディレクトリを含むディレクトリへのパス)が存在するかどうかがチェックされ、存在しなければ作成されます。後者の場合は、指されたディレクトリが存在するかどうかチェックされ、必要に応じて作成されます。</target>
        </trans-unit>
        <trans-unit id="baa49dd84c2f97d1400c5b886e7457901cafa944" translate="yes" xml:space="preserve">
          <source>Access C++ std::type_info's virtual functions from D, being careful to not require linking with libstd++ or interfere with core.stdcpp.typeinfo. So, give it a different name.</source>
          <target state="translated">libstd++とのリンクを必要としたり、core.stdcpp.typeinfo と干渉しないように注意しながら、D から C++std::type_info の仮想関数にアクセスします。ということで、別の名前をつけます。</target>
        </trans-unit>
        <trans-unit id="8cee105dc9286540eb8273e1a66712fc79c398e3" translate="yes" xml:space="preserve">
          <source>Access Control</source>
          <target state="translated">アクセス制御</target>
        </trans-unit>
        <trans-unit id="c1777ced1e09bfb3a20d75e96ad2f4ce23f4f24f" translate="yes" xml:space="preserve">
          <source>Access labels AA from C++ code.</source>
          <target state="translated">C++コードからラベルAAにアクセスします。</target>
        </trans-unit>
        <trans-unit id="cf0ad5ada4db8ecde7f83bac072e7c784cdc3f1f" translate="yes" xml:space="preserve">
          <source>Access permission denied</source>
          <target state="translated">アクセス許可が拒否された</target>
        </trans-unit>
        <trans-unit id="bee6f9fa537ba79f8b898add7fb4d8af609c3d99" translate="yes" xml:space="preserve">
          <source>Access the members of the object e. This type is same as e.type.</source>
          <target state="translated">この型は e.type と同じです。</target>
        </trans-unit>
        <trans-unit id="dd91024887ec34e3b4d4c550ead58d4e228f98e0" translate="yes" xml:space="preserve">
          <source>Access to a large selection of commonly used sets of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt;. &lt;a href=&quot;#Unicode%20properties&quot;&gt;Supported sets&lt;/a&gt; include Script, Block and General Category. The exact contents of a set can be observed in the CLDR utility, on the &lt;a href=&quot;http://www.unicode.org/cldr/utility/properties.jsp&quot;&gt;property index&lt;/a&gt; page of the Unicode website. See &lt;a href=&quot;#unicode&quot;&gt;&lt;code&gt;unicode&lt;/code&gt;&lt;/a&gt; for easy and (optionally) compile-time checked set queries.</source>
          <target state="translated">一般的に使用される&lt;a href=&quot;#Code%20point&quot;&gt;コードポイントの&lt;/a&gt;多くのセットへのアクセス。&lt;a href=&quot;#Unicode%20properties&quot;&gt;サポートされるセットに&lt;/a&gt;は、スクリプト、ブロック、一般カテゴリが含まれます。セットの正確な内容は、Unicode Webサイトの&lt;a href=&quot;http://www.unicode.org/cldr/utility/properties.jsp&quot;&gt;プロパティインデックス&lt;/a&gt;ページのCLDRユーティリティで確認できます。簡単な（オプションで）コンパイル時のチェックセットクエリについては、&lt;a href=&quot;#unicode&quot;&gt; &lt;code&gt;unicode&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7f2d0eae88d66a5fc766687a84f6f7f91d5ae27d" translate="yes" xml:space="preserve">
          <source>Access to class members is controlled using &lt;a href=&quot;attribute#visibility_attributes&quot;&gt; visibility attributes&lt;/a&gt;. The default visibility attribute is &lt;code&gt;public&lt;/code&gt;.</source>
          <target state="translated">クラスメンバーへのアクセスは、&lt;a href=&quot;attribute#visibility_attributes&quot;&gt;可視属性&lt;/a&gt;を使用して制御されます。デフォルトの可視性属性は &lt;code&gt;public&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="307fc632b58de82a174b55210d8d42a94693e17a" translate="yes" xml:space="preserve">
          <source>Access to variadic arguments is done using the standard library module &lt;code&gt;core.stdc.stdarg&lt;/code&gt;.</source>
          <target state="translated">可変引数へのアクセスは、標準ライブラリモジュール &lt;code&gt;core.stdc.stdarg&lt;/code&gt; を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="f6f1467ab57ce45967443e18135c914da7e45a13" translate="yes" xml:space="preserve">
          <source>Accessing C Globals</source>
          <target state="translated">Cグローバルへのアクセス</target>
        </trans-unit>
        <trans-unit id="beb23fe078814adbeacefa1f1f2dfb764f4b3413" translate="yes" xml:space="preserve">
          <source>Accessing Individual Vector Elements</source>
          <target state="translated">個々のベクトル要素へのアクセス</target>
        </trans-unit>
        <trans-unit id="db7fc46962b3e4858cae12b974315033c117901c" translate="yes" xml:space="preserve">
          <source>Accessing variable v. Check for purity and safety violations. Returns true if error occurs.</source>
          <target state="translated">変数 v へのアクセス 純度と安全性の違反をチェックします。エラーが発生した場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="9beb96dac88f56752e0ce800d691ef1a92595d9b" translate="yes" xml:space="preserve">
          <source>Acknowledge</source>
          <target state="translated">Acknowledge</target>
        </trans-unit>
        <trans-unit id="36258baa389d65025807ea4f13eda18ad0dd4bd8" translate="yes" xml:space="preserve">
          <source>Acquire + release barrier. Corresponds to &lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquirerelease&quot;&gt;LLVM AtomicOrdering.AcquireRelease&lt;/a&gt; and C++11/C11 &lt;code&gt;memory_order_acq_rel&lt;/code&gt;.</source>
          <target state="translated">バリアを取得+解放します。対応&lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquirerelease&quot;&gt;LLVM AtomicOrdering.AcquireRelease&lt;/a&gt;およびC ++ 11 / C11の &lt;code&gt;memory_order_acq_rel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d47f537dcb350bf669800548ceb300b34426ee2" translate="yes" xml:space="preserve">
          <source>Acquires a read lock on the enclosing mutex.</source>
          <target state="translated">封入されているミューテックスのリードロックを取得します。</target>
        </trans-unit>
        <trans-unit id="99ed81fec0ff177b818b848aa967a2dc6a60b509" translate="yes" xml:space="preserve">
          <source>Acquires a write lock on the enclosing mutex.</source>
          <target state="translated">囲まれたミューテックスの書き込みロックを取得します。</target>
        </trans-unit>
        <trans-unit id="34be5c3351b113f2cad4cc4a8602e9f1303b4543" translate="yes" xml:space="preserve">
          <source>Adam D. Ruppe</source>
          <target state="translated">アダム・D・ルッペ</target>
        </trans-unit>
        <trans-unit id="6e9e257be9ac18996821b962c7a49ec73c7aba38" translate="yes" xml:space="preserve">
          <source>Adapted with minimal changes from the work of David L. Davis (refer to the &lt;a href=&quot;http://forum.dlang.org/post/cfk7ql&amp;amp;dollar;1p4n&amp;amp;dollar;1@digitaldaemon.com&quot;&gt;original announcement&lt;/a&gt;).</source>
          <target state="translated">David L. Davisの作業からの最小限の変更で適応（&lt;a href=&quot;http://forum.dlang.org/post/cfk7ql&amp;amp;dollar;1p4n&amp;amp;dollar;1@digitaldaemon.com&quot;&gt;最初の発表を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2c5a3264f3bad4a3d08e2dbdc79dc6adf56d9043" translate="yes" xml:space="preserve">
          <source>Add Content To A Dynamic String</source>
          <target state="translated">動的文字列にコンテンツを追加する</target>
        </trans-unit>
        <trans-unit id="783f29b92ccf3cb30aa2e12d525b1971eef1ba41" translate="yes" xml:space="preserve">
          <source>Add Expressions</source>
          <target state="translated">式の追加</target>
        </trans-unit>
        <trans-unit id="1a1ad0f8b610189b63e4cb0f7b4aed4a9b1d3a61" translate="yes" xml:space="preserve">
          <source>Add MODxxxx bits to existing type. We're adding, not replacing, so adding const to a shared type =&amp;gt; &quot;shared const&quot;</source>
          <target state="translated">既存のタイプにMODxxxxビットを追加します。置き換えるのではなく追加するので、共有型にconstを追加します=&amp;gt; &quot;shared const&quot;</target>
        </trans-unit>
        <trans-unit id="2f6598ae97b68f3c9b2eca03bcb16039c37701f3" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;Socket&lt;/code&gt; to the collection. The socket must not already be in the collection.</source>
          <target state="translated">コレクションに &lt;code&gt;Socket&lt;/code&gt; を追加します。ソケットは既にコレクションに含まれていてはなりません。</target>
        </trans-unit>
        <trans-unit id="cf47751bc3702034406ec509e784f3ea1eb6200d" translate="yes" xml:space="preserve">
          <source>Add a command to send to ftp server.</source>
          <target state="translated">ftpサーバに送信するコマンドを追加します。</target>
        </trans-unit>
        <trans-unit id="e665ffb3cdd40a1e58b3bf5dfd0804b5aaf86432" translate="yes" xml:space="preserve">
          <source>Add a header e.g. &quot;X-CustomField: Something is fishy&quot;.</source>
          <target state="translated">ヘッダーを追加して、例えば「X-CustomField.何か怪しい」などのヘッダーを追加します。</target>
        </trans-unit>
        <trans-unit id="9dca982f55af4b03415ddfb96425312211cac1c4" translate="yes" xml:space="preserve">
          <source>Add a member to the archive. The file is compressed on the fly.</source>
          <target state="translated">アーカイブにメンバーを追加します。その場で圧縮されています。</target>
        </trans-unit>
        <trans-unit id="f9b93c9a5ae048bb45d10d62122638eca633993f" translate="yes" xml:space="preserve">
          <source>Add a slot to the list of slots to be called when emit() is called.</source>
          <target state="translated">emit()が呼び出されたときに呼び出されるスロットをリストに追加します。</target>
        </trans-unit>
        <trans-unit id="58e96b8b192b5161f00d42ec478ec85a678ec3b1" translate="yes" xml:space="preserve">
          <source>Add an IP group membership</source>
          <target state="translated">IPグループのメンバーシップを追加する</target>
        </trans-unit>
        <trans-unit id="eaee2d4a639caa6d286ce081d0fec7d81fdd68aa" translate="yes" xml:space="preserve">
          <source>Add an interval [a, b) to this set.</source>
          <target state="translated">この集合に区間[a,b]を追加します。</target>
        </trans-unit>
        <trans-unit id="d58f391b6636a37e4ed4aadaddc8bc0a051e9638" translate="yes" xml:space="preserve">
          <source>Add an user-supplied global identifier to the list</source>
          <target state="translated">ユーザーが提供したグローバル識別子をリストに追加します。</target>
        </trans-unit>
        <trans-unit id="68f594a7d8331d79aa134583b826df0691870790" translate="yes" xml:space="preserve">
          <source>Add an user-supplied identifier to the list of global debug identifiers</source>
          <target state="translated">グローバルデバッグ識別子のリストに、ユーザが提供した識別子を追加します。</target>
        </trans-unit>
        <trans-unit id="ff5f9ed6a9198f29682b6e2fdc1784d631624385" translate="yes" xml:space="preserve">
          <source>Add any global identifier to the list, without checking if it's predefined</source>
          <target state="translated">定義済みかどうかをチェックせずに、任意のグローバル識別子をリストに追加します。</target>
        </trans-unit>
        <trans-unit id="180269a30ba169b4ad5b7a1b7661b30529e56f3a" translate="yes" xml:space="preserve">
          <source>Add de to the archive. The file is compressed on the fly.</source>
          <target state="translated">アーカイブにdeを追加します。その場で圧縮されます。</target>
        </trans-unit>
        <trans-unit id="0795781eaf01631d4376c4aabb0efd2f797184aa" translate="yes" xml:space="preserve">
          <source>Add default &lt;code&gt;version&lt;/code&gt; identifier for dmd, and set the target platform in &lt;code&gt;params&lt;/code&gt;. &lt;a href=&quot;https://dlang.org/spec/version.html#predefined-versions&quot;&gt;https://dlang.org/spec/version.html#predefined-versions&lt;/a&gt;</source>
          <target state="translated">dmdのデフォルトの &lt;code&gt;version&lt;/code&gt; 識別子を追加し、ターゲットプラットフォームを &lt;code&gt;params&lt;/code&gt; に設定します。&lt;a href=&quot;https://dlang.org/spec/version.html#predefined-versions&quot;&gt;https://dlang.org/spec/version.html#predefined-versions&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c84400b54e58a4517104843b16d7336ce756b1a0" translate="yes" xml:space="preserve">
          <source>Add documentation comment to Dsymbol. Ignore NULL comments.</source>
          <target state="translated">Dsymbol にドキュメントコメントを追加します。NULLコメントは無視します。</target>
        </trans-unit>
        <trans-unit id="b821ad6b597b9aa864b5401ed9295cf33f19f5bb" translate="yes" xml:space="preserve">
          <source>Add empty fields for padding to have a total bit length of 8, 16, 32, or 64</source>
          <target state="translated">8、16、32、または64 の合計ビ ッ ト 長にな る よ う に、 パ ッ ド のための空のフ ィ ール ド を追加 し ます。</target>
        </trans-unit>
        <trans-unit id="27e8affa9a2779909d012a0a9e565d5d9c4930bc" translate="yes" xml:space="preserve">
          <source>Add expressions for floating point operands are not associative.</source>
          <target state="translated">浮動小数点演算子が連想ではない場合の式を追加します。</target>
        </trans-unit>
        <trans-unit id="39654cee35d80be4140c48c2f4acb0a4d3eddad1" translate="yes" xml:space="preserve">
          <source>Add import path to the &lt;code&gt;global.path&lt;/code&gt;.</source>
          <target state="translated">インポートパスを &lt;code&gt;global.path&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="9ca0c9e82595b2ff7d12c349025925ae8755eaf0" translate="yes" xml:space="preserve">
          <source>Add import to sd's symbol table.</source>
          <target state="translated">sdのシンボルテーブルにインポートを追加する。</target>
        </trans-unit>
        <trans-unit id="da23c7c2b4b6933ac5908203dac9c52485b7b4dd" translate="yes" xml:space="preserve">
          <source>Add instance ti to TemplateDeclaration's table of instances. Return a handle we can use to later remove it if it fails instantiation.</source>
          <target state="translated">インスタンス ti を TemplateDeclaration のインスタンステーブルに追加します。インスタンス化に失敗した場合に、後でそれを削除するために使用できるハンドルを返します。</target>
        </trans-unit>
        <trans-unit id="4d414082ffd854e8335dc0549b71c84435addf66" translate="yes" xml:space="preserve">
          <source>Add or get a file from the file cache. If the file isn't part of the cache, it will be read from the filesystem. If the file has been read before, the cached file object will be returned</source>
          <target state="translated">ファイルキャッシュからファイルを追加または取得します。ファイルがキャッシュの一部でない場合は、ファイルシステムから読み込まれます。ファイルが以前に読み込まれたことがある場合は、キャッシュされたファイルオブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="a520040bdffe08f3eefdcecf7998ef8840dd4783" translate="yes" xml:space="preserve">
          <source>Add storage class modifiers to type.</source>
          <target state="translated">タイプにストレージクラスの修飾子を追加します。</target>
        </trans-unit>
        <trans-unit id="0dc5179d5d1626885bf2c954280bebcdbc0811f9" translate="yes" xml:space="preserve">
          <source>Add string import path to &lt;code&gt;global.filePath&lt;/code&gt;.</source>
          <target state="translated">文字列インポートパスを &lt;code&gt;global.filePath&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="37089788442ff881d462af2da489fd68f0412cb3" translate="yes" xml:space="preserve">
          <source>Add t to the list of tracked threads if it is not already being tracked.</source>
          <target state="translated">まだ追跡されていないスレッドがある場合は、追跡されているスレッドのリストにtを追加します。</target>
        </trans-unit>
        <trans-unit id="a88d5dd379a53bc3a2adc9fd4af43267e851bf42" translate="yes" xml:space="preserve">
          <source>Add the extension &lt;code&gt;ext&lt;/code&gt; to &lt;code&gt;name&lt;/code&gt;, regardless of the content of &lt;code&gt;name&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; の内容に関係なく、拡張子 &lt;code&gt;ext&lt;/code&gt; をnameに追加し &lt;code&gt;name&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52a02a5e1fb93d0d15ea7fa0332d56723a1247a4" translate="yes" xml:space="preserve">
          <source>Add to precision as necessary so that the first digit of the octal formatting is a '0', even if both the argument and the</source>
          <target state="translated">引数と</target>
        </trans-unit>
        <trans-unit id="66d00d03ee0d2653e725dd73702a2661d7a02c6b" translate="yes" xml:space="preserve">
          <source>Add two signed integers, checking for overflow.</source>
          <target state="translated">2つの符号付き整数を追加し、オーバーフローをチェックします。</target>
        </trans-unit>
        <trans-unit id="66fdaf8b303799ed2eb7e0bf44cbe2a7bcbf9b7d" translate="yes" xml:space="preserve">
          <source>Add two unsigned integers, checking for overflow (aka carry).</source>
          <target state="translated">オーバーフロー(別名キャリー)をチェックしながら、2つの符号なし整数を追加します。</target>
        </trans-unit>
        <trans-unit id="edb4a17762e7e7667165a329429cbc010d27e3c1" translate="yes" xml:space="preserve">
          <source>Add variable to maybes[]. When a maybescope variable &lt;code&gt;v&lt;/code&gt; is assigned to a maybescope variable &lt;code&gt;this&lt;/code&gt;, we cannot determine if &lt;code&gt;this&lt;/code&gt; is actually scope until the semantic analysis for the function is completed. Thus, we save the data until then.</source>
          <target state="translated">変数をmaybes []に追加します。maybescope変数 &lt;code&gt;v&lt;/code&gt; がmaybescope変数 &lt;code&gt;this&lt;/code&gt; に割り当てられている場合、関数のセマンティック分析が完了するまで、 &lt;code&gt;this&lt;/code&gt; が実際にスコープであるかどうかを判断できません。したがって、それまではデータを保存します。</target>
        </trans-unit>
        <trans-unit id="3aaf26753f5eadebbc6849954cfee254c2f15e1d" translate="yes" xml:space="preserve">
          <source>Added Since CV4</source>
          <target state="translated">CV4以降に追加されました。</target>
        </trans-unit>
        <trans-unit id="a4990b86487a33fe06b07471000a0e208027a17e" translate="yes" xml:space="preserve">
          <source>Added to Bionic since Lollipop.</source>
          <target state="translated">ロリポップからBionicに追加されました。</target>
        </trans-unit>
        <trans-unit id="86922b5391f09bc921f8e0e85beb11adcc142c71" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;deallocate&lt;/code&gt; capability to an allocator that lacks it (such as simple regions).</source>
          <target state="translated">&lt;code&gt;deallocate&lt;/code&gt; 機能を持たないアロケータ（単純な領域など）に割り当て解除機能を追加する。</target>
        </trans-unit>
        <trans-unit id="1667d04dd978ce8b93994c5e6826422d13b6b5b0" translate="yes" xml:space="preserve">
          <source>Adding Contracts to Java</source>
          <target state="translated">Javaに契約を追加する</target>
        </trans-unit>
        <trans-unit id="5d4e406e41eeda4c6401647b660b3cce1ffbd218" translate="yes" xml:space="preserve">
          <source>Adding or subtracting a &lt;a href=&quot;#Duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; to/from a MonoTime results in a MonoTime which is adjusted by that amount.</source>
          <target state="translated">MonoTimeとの間で&lt;a href=&quot;#Duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;を加算または減算すると、その量で調整されるMonoTimeになります。</target>
        </trans-unit>
        <trans-unit id="5b8df2ffa33c3a92e63907cf222e7bd23c2fa650" translate="yes" xml:space="preserve">
          <source>Adding your own Garbage Collector</source>
          <target state="translated">ごみ収集器を追加する</target>
        </trans-unit>
        <trans-unit id="5d6556acb18b8662a066437c99c4df78f7b12865" translate="yes" xml:space="preserve">
          <source>Additional &lt;code&gt;Logger&lt;/code&gt; can be created by creating a new instance of the required &lt;code&gt;Logger&lt;/code&gt;.</source>
          <target state="translated">追加の &lt;code&gt;Logger&lt;/code&gt; は、必要な &lt;code&gt;Logger&lt;/code&gt; 新しいインスタンスを作成することによって作成できます。</target>
        </trans-unit>
        <trans-unit id="5d317f4f1de7128a0d4cd8fd921eb8e06ea7ebc6" translate="yes" xml:space="preserve">
          <source>Additional environment variables for the child process.</source>
          <target state="translated">子プロセスのための追加の環境変数。</target>
        </trans-unit>
        <trans-unit id="168245e7982df504f3251c14992ea04ceb75d2cc" translate="yes" xml:space="preserve">
          <source>Additional environment variables for the child process. (See &lt;a href=&quot;#spawnProcess&quot;&gt;&lt;code&gt;spawnProcess&lt;/code&gt;&lt;/a&gt; for details.)</source>
          <target state="translated">子プロセスの追加の環境変数。（詳細については、&lt;a href=&quot;#spawnProcess&quot;&gt; &lt;code&gt;spawnProcess&lt;/code&gt; &lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="e835350d1c68a871d44080439d13025d3be377ee" translate="yes" xml:space="preserve">
          <source>Additionally the following attributes are only valid for non-static member functions:</source>
          <target state="translated">さらに、以下の属性は非静的メンバ関数に対してのみ有効です。</target>
        </trans-unit>
        <trans-unit id="2b561281f4194e9ab383d247564b6fb48d3b460e" translate="yes" xml:space="preserve">
          <source>Additionally, archives are checked for malware attacks and rejected if detected. This includes</source>
          <target state="translated">さらに、アーカイブはマルウェア攻撃がないかチェックされ、検出された場合は拒否されます。これには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="e0f1260010cd19b58b440bfbe6492df580b2aeb8" translate="yes" xml:space="preserve">
          <source>Additionally, this example shows how a new &lt;code&gt;FileLogger&lt;/code&gt; is created. Individual &lt;code&gt;Logger&lt;/code&gt; and the global log functions share commonly named functions to log data.  The names of the functions are as follows:</source>
          <target state="translated">さらに、この例は、新しい &lt;code&gt;FileLogger&lt;/code&gt; が作成される方法を示しています。個々の &lt;code&gt;Logger&lt;/code&gt; とグローバルログ関数は、データをログに記録するための一般的な名前の関数を共有します。関数の名前は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5396764fbaed2adc06323b93051d13670b4bd118" translate="yes" xml:space="preserve">
          <source>Address &lt;code&gt;addr&lt;/code&gt;</source>
          <target state="translated">アドレス &lt;code&gt;addr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a136ff61f84c9c4a7228e88b27550819c0abee84" translate="yes" xml:space="preserve">
          <source>Address &lt;strong id=&quot;address&quot;&gt;address&lt;/strong&gt;;</source>
          <target state="translated">アドレス&lt;strong id=&quot;address&quot;&gt;アドレス&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="b544b7ba62b9aa270da33d07d9f1852fc51631a7" translate="yes" xml:space="preserve">
          <source>Address containing warnings is considered valid, that is, any status code below 16 is considered valid.</source>
          <target state="translated">警告を含むアドレスは有効とみなされ、16以下のステータスコードは有効とみなされます。</target>
        </trans-unit>
        <trans-unit id="5a1be6fc1f7f9662fc7c2b17d5434e70a4a8f2ab" translate="yes" xml:space="preserve">
          <source>Address contains Folding White Space</source>
          <target state="translated">アドレスには折り畳み式のホワイトスペースが含まれています</target>
        </trans-unit>
        <trans-unit id="887781f145aaaf658d75f1517b0fb398589f6ee9" translate="yes" xml:space="preserve">
          <source>Address contains a carriage return that is not followed by a line feed</source>
          <target state="translated">アドレスにキャリッジリターンが含まれており、改行が行われていません。</target>
        </trans-unit>
        <trans-unit id="62b80eb5466f5d5ffa1ab6d5b43626ec70a85c2d" translate="yes" xml:space="preserve">
          <source>Address contains a character that is not allowed</source>
          <target state="translated">アドレスに許可されていない文字が含まれている</target>
        </trans-unit>
        <trans-unit id="92528dcc41ae0f2a64e93d533de3ccfed0b942e5" translate="yes" xml:space="preserve">
          <source>Address contains a comment in a position that is deprecated</source>
          <target state="translated">アドレスには、非推奨の位置にコメントが含まれています。</target>
        </trans-unit>
        <trans-unit id="9c918d7b9e49563c6cbad6a857c4705bf794b76c" translate="yes" xml:space="preserve">
          <source>Address contains a comment or Folding White Space around the @ sign</source>
          <target state="translated">アドレスにはコメントが含まれているか、@記号の周りにホワイトスペースを折りたたんでいます。</target>
        </trans-unit>
        <trans-unit id="65380a42fab34c0f4121362666fdd9910ff2d19a" translate="yes" xml:space="preserve">
          <source>Address contains an obsolete form of Folding White Space</source>
          <target state="translated">アドレスには、折りたたみ式ホワイトスペースの廃止形が含まれています。</target>
        </trans-unit>
        <trans-unit id="381c317957b5ee7582e73884cd558cdbc223631b" translate="yes" xml:space="preserve">
          <source>Address contains comments</source>
          <target state="translated">アドレスにはコメントが含まれています。</target>
        </trans-unit>
        <trans-unit id="a5e2d3cb1fcbce606eb8ccac93ab49310a74b07e" translate="yes" xml:space="preserve">
          <source>Address contains deprecated elements but may still be valid in restricted contexts</source>
          <target state="translated">アドレスには非推奨の要素が含まれていますが、制限されたコンテキストではまだ有効です。</target>
        </trans-unit>
        <trans-unit id="88121f59a17918138d3a99669a4d019180020a55" translate="yes" xml:space="preserve">
          <source>Address contains text after a comment or Folding White Space</source>
          <target state="translated">アドレスにはコメントや折り返しのホワイトスペースの後にテキストが含まれています。</target>
        </trans-unit>
        <trans-unit id="b7efe220560e0d5cd3e5e7d43e3e3fd9aca69e6a" translate="yes" xml:space="preserve">
          <source>Address contains text after a quoted string</source>
          <target state="translated">アドレスには引用符で囲まれた文字列の後にテキストが含まれています。</target>
        </trans-unit>
        <trans-unit id="ee43b6fd8e15e2b41602e256006bcdb0082b3ca4" translate="yes" xml:space="preserve">
          <source>Address family</source>
          <target state="translated">アドレスファミリー</target>
        </trans-unit>
        <trans-unit id="b8ef22713afbe995add506093e861ef3d18ab313" translate="yes" xml:space="preserve">
          <source>Address has no domain part</source>
          <target state="translated">アドレスにはドメイン部分がありません</target>
        </trans-unit>
        <trans-unit id="71bff518935e72def54800521f7700ba45be35d6" translate="yes" xml:space="preserve">
          <source>Address has no local part</source>
          <target state="translated">住所にはローカルパートがありません。</target>
        </trans-unit>
        <trans-unit id="e0517bb692824017669287d8571ea86907ce7eb9" translate="yes" xml:space="preserve">
          <source>Address is RFC 5322 compliant but contains domain characters that are not allowed by DNS</source>
          <target state="translated">アドレスはRFC 5322に準拠していますが、DNSでは許可されていないドメイン文字が含まれています。</target>
        </trans-unit>
        <trans-unit id="d576c3642c5b3b413429d68ea79dca4c6c19abca" translate="yes" xml:space="preserve">
          <source>Address is either considered valid or not, no finer grained error checking is performed. Returned email status code will be either Error or Valid.</source>
          <target state="translated">アドレスは有効かどうかを判断し、細かいエラーチェックは行われません。返されたメールのステータスコードは、エラーまたは有効のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="fbe50a7d373fa45401392dba0d4f4263b57fb794" translate="yes" xml:space="preserve">
          <source>Address is invalid for any purpose</source>
          <target state="translated">住所はいかなる目的であっても無効です</target>
        </trans-unit>
        <trans-unit id="1f1d8cab19a432244d5e438db730dcd5d7cfc3c1" translate="yes" xml:space="preserve">
          <source>Address is marked.</source>
          <target state="translated">住所が記載されています。</target>
        </trans-unit>
        <trans-unit id="056f415145809cf554f197edff3a6210c2a3c84c" translate="yes" xml:space="preserve">
          <source>Address is not managed by the GC.</source>
          <target state="translated">アドレスはGCでは管理されていません。</target>
        </trans-unit>
        <trans-unit id="b276a2a7b3b8082b5205d4f36c48fdb75ab436d5" translate="yes" xml:space="preserve">
          <source>Address is not marked.</source>
          <target state="translated">住所は記載されていません。</target>
        </trans-unit>
        <trans-unit id="00d60928d09249fd5121c82ffadb486ff2af7cda" translate="yes" xml:space="preserve">
          <source>Address is too long</source>
          <target state="translated">アドレスが長すぎる</target>
        </trans-unit>
        <trans-unit id="7114aec6ccd6343782971decf3ba885ed8926cea" translate="yes" xml:space="preserve">
          <source>Address is valid</source>
          <target state="translated">住所は有効です。</target>
        </trans-unit>
        <trans-unit id="8684bf895369a504a173494b46ce79f3bfbff7cd" translate="yes" xml:space="preserve">
          <source>Address is valid but a DNS check was not successful</source>
          <target state="translated">アドレスは有効ですが、DNSチェックが成功しませんでした。</target>
        </trans-unit>
        <trans-unit id="910b30a1f7f08850b97f7aabdcb68e08a1bc037b" translate="yes" xml:space="preserve">
          <source>Address is valid but at a Top Level Domain</source>
          <target state="translated">アドレスは有効ですが、トップレベルドメインで</target>
        </trans-unit>
        <trans-unit id="8be421532761d6177a79b25f6bf4e24d2aa48096" translate="yes" xml:space="preserve">
          <source>Address is valid but at a literal address not a domain</source>
          <target state="translated">アドレスは有効ですが、ドメインではなくリテラルアドレスです。</target>
        </trans-unit>
        <trans-unit id="b2a0d6b7ee4c32f5a2b735044ea5126f1011eba5" translate="yes" xml:space="preserve">
          <source>Address is valid but contains a :: that only elides one zero group</source>
          <target state="translated">アドレスは有効ですが、ゼログループを1つだけ排除した ::が含まれています。</target>
        </trans-unit>
        <trans-unit id="510622562d2c0218e53097ea6e32ac7b80cf235c" translate="yes" xml:space="preserve">
          <source>Address is valid but contains a quoted string</source>
          <target state="translated">アドレスは有効ですが、引用符で囲まれた文字列が含まれています</target>
        </trans-unit>
        <trans-unit id="8c451ae2b8582f3467ec31948cc6b1b82ba98f9e" translate="yes" xml:space="preserve">
          <source>Address is valid but the Top Level Domain begins with a number</source>
          <target state="translated">アドレスは有効ですが、トップレベルドメインは数字で始まります。</target>
        </trans-unit>
        <trans-unit id="5ca2422e194aa478738b3920d49b1d72b4a04751" translate="yes" xml:space="preserve">
          <source>Address is valid for SMTP but has unusual elements</source>
          <target state="translated">アドレスはSMTPでは有効ですが、異常な要素を持っています。</target>
        </trans-unit>
        <trans-unit id="069a8b8d9763d9ed6d488c79b3db6100b19c762d" translate="yes" xml:space="preserve">
          <source>Address is valid within the message but cannot be used unmodified for the envelope</source>
          <target state="translated">アドレスはメッセージ内では有効ですが、エンベロープには変更せずに使用することはできません。</target>
        </trans-unit>
        <trans-unit id="265f5be727c33a8a13245b57c78d571329630167" translate="yes" xml:space="preserve">
          <source>AddressFamily &lt;strong id=&quot;family&quot;&gt;family&lt;/strong&gt;;</source>
          <target state="translated">AddressFamily &lt;strong id=&quot;family&quot;&gt;ファミリー&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="9da00639bb3965aa70738e6a575e509275598a8a" translate="yes" xml:space="preserve">
          <source>AddressInfo[] &lt;strong id=&quot;getAddressInfo&quot;&gt;getAddressInfo&lt;/strong&gt;(T...)(scope const(char)[] node, scope T options);</source>
          <target state="translated">AddressInfo [] &lt;strong id=&quot;getAddressInfo&quot;&gt;getAddressInfo&lt;/strong&gt;（T ...）（scope const（char）[] node、scope T options）;</target>
        </trans-unit>
        <trans-unit id="dffa5b087a5bb8dd265fd7a6cbbd1e0d1d41f678" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;p[0 .. sz]&lt;/code&gt; to the list of memory ranges to be scanned for pointers during a collection. If p is null, no operation is performed.</source>
          <target state="translated">コレクション中にポインタをスキャンするメモリ範囲のリストに &lt;code&gt;p[0 .. sz]&lt;/code&gt; を追加します。pがnullの場合、操作は実行されません。</target>
        </trans-unit>
        <trans-unit id="672314e29bcc5e362e383fbd999c4b5b4410b405" translate="yes" xml:space="preserve">
          <source>Adds a sign bit to allow for signed numbers.</source>
          <target state="translated">符号付き数字を使用できるように符号ビットを追加します。</target>
        </trans-unit>
        <trans-unit id="ee9a206f63997b29125ee641371481b30dee8462" translate="yes" xml:space="preserve">
          <source>Adds a single Element of data without increasing &lt;code&gt;element_count&lt;/code&gt;. Make sure to increase &lt;code&gt;element_count&lt;/code&gt; by &lt;code&gt;Element.sizeof&lt;/code&gt; for each call to &lt;code&gt;putElement&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;element_count&lt;/code&gt; を増やすことなく、データの単一のElementを追加します。増加することを確認し &lt;code&gt;element_count&lt;/code&gt; をすることによって &lt;code&gt;Element.sizeof&lt;/code&gt; をコールするたびに &lt;code&gt;putElement&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7bf698b9f6e73db894b28808fd5abdeb21c41a83" translate="yes" xml:space="preserve">
          <source>Adds an internal root pointing to the GC memory block referenced by p. As a result, the block referenced by p itself and any blocks accessible via it will be considered live until the root is removed again.</source>
          <target state="translated">その結果、ルートが再び削除されるまで、p 自体によって参照されるブロックとそれを介してアクセス可能なブロックは、ライブとみなされます。</target>
        </trans-unit>
        <trans-unit id="ff12c7ce51172ee3fa78ed53b57f7c8617e36d66" translate="yes" xml:space="preserve">
          <source>Adds assignable elements to BidirectionalRange.</source>
          <target state="translated">BidirectionalRangeに代入可能な要素を追加します。</target>
        </trans-unit>
        <trans-unit id="af63794bdee98164b7dedba21a8ddcd815487b81" translate="yes" xml:space="preserve">
          <source>Adds assignable elements to ForwardRange.</source>
          <target state="translated">ForwardRangeに代入可能な要素を追加します。</target>
        </trans-unit>
        <trans-unit id="d86b2ad49209ff010a91b4e8020be86eef38434b" translate="yes" xml:space="preserve">
          <source>Adds assignable elements to InputRange.</source>
          <target state="translated">InputRangeに代入可能な要素を追加します。</target>
        </trans-unit>
        <trans-unit id="2111dba4f281687d624b61c6aeeecb551c0b910b" translate="yes" xml:space="preserve">
          <source>Adds assignable elements to RandomAccessFinite.</source>
          <target state="translated">RandomAccessFiniteに代入可能な要素を追加します。</target>
        </trans-unit>
        <trans-unit id="cea0f0bf07e47c7fb0a04a4c50f0f8d4341a2b7e" translate="yes" xml:space="preserve">
          <source>Adds data to the digester. This function can be called many times in a row after start but before finish.</source>
          <target state="translated">消化器にデータを追加します。この関数は、開始後に何度も連続して呼び出すことができますが、終了前に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="f9a3cbb838535843105d2dbd716177d37c6dc90e" translate="yes" xml:space="preserve">
          <source>Adds or subtracts two &lt;code&gt;TickDuration&lt;/code&gt;s as well as assigning the result to this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">2つの &lt;code&gt;TickDuration&lt;/code&gt; を加算または減算し、結果をこの &lt;code&gt;TickDuration&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="0c16f4ce03396768dfa95982d340781a78324241" translate="yes" xml:space="preserve">
          <source>Adds or subtracts two &lt;code&gt;TickDuration&lt;/code&gt;s.</source>
          <target state="translated">2つの &lt;code&gt;TickDuration&lt;/code&gt; を加算または減算します。</target>
        </trans-unit>
        <trans-unit id="c737e93d31255b859d9ebe8158a9fb5eee5ea8ae" translate="yes" xml:space="preserve">
          <source>Adds or subtracts two durations.</source>
          <target state="translated">2つの持続時間を加算または減算します。</target>
        </trans-unit>
        <trans-unit id="e87760afd0099199ebc5a0eb76c281d30e85cec5" translate="yes" xml:space="preserve">
          <source>Adds the given number of units to this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, mutating it. A negative number will subtract.</source>
          <target state="translated">指定された数のユニットをこの&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;に追加して、変更します。負の数は減算されます。</target>
        </trans-unit>
        <trans-unit id="0f80ac2d800f8ee490ca058f4b673564daf01236" translate="yes" xml:space="preserve">
          <source>Adds the given number of units to this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;, mutating it. A negative number will subtract.</source>
          <target state="translated">指定された数の単位をこの&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;に追加して、変更します。負の数は減算されます。</target>
        </trans-unit>
        <trans-unit id="00a26d0cef5a8a591d36a0308e58ee4701a2e0f7" translate="yes" xml:space="preserve">
          <source>Adds the given number of units to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;. A negative number will subtract.</source>
          <target state="translated">指定された単位数をこの&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; に追加し&lt;/a&gt;ます。負の数は減算されます。</target>
        </trans-unit>
        <trans-unit id="25d7fd9970d15ef947135e621f6d15c4231ff9c0" translate="yes" xml:space="preserve">
          <source>Adds the given number of units to this &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt;, mutating it. A negative number will subtract.</source>
          <target state="translated">指定された数のユニットをこの&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; &lt;/a&gt;に追加して、変更します。負の数は減算されます。</target>
        </trans-unit>
        <trans-unit id="abb4bf42c71674b6c0e872462683cd4dd3560370" translate="yes" xml:space="preserve">
          <source>Adds the given number of years or months to this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, mutating it. A negative number will subtract.</source>
          <target state="translated">指定された年数または月数をこの&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;に追加して、変更します。負の数は減算されます。</target>
        </trans-unit>
        <trans-unit id="17c8fc904e2c9da1e769c06f6205227d30331e48" translate="yes" xml:space="preserve">
          <source>Adds the given number of years or months to this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;, mutating it. A negative number will subtract.</source>
          <target state="translated">指定された年数または月数をこの&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;に追加して、変更します。負の数は減算されます。</target>
        </trans-unit>
        <trans-unit id="cb5ca95f30def8b12993088b8d76ab1dd37d553c" translate="yes" xml:space="preserve">
          <source>Adds the given number of years or months to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;. A negative number will subtract.</source>
          <target state="translated">指定された年数または月数をこの&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; に追加し&lt;/a&gt;ます。負の数は減算されます。</target>
        </trans-unit>
        <trans-unit id="ae45ff9fb528c8b811a4a8b39bb46f4d2af30e79" translate="yes" xml:space="preserve">
          <source>Adds, subtracts or calculates the modulo of two durations as well as assigning the result to this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">2つの期間のモジュロを加算、減算、または計算し、結果をこの &lt;code&gt;Duration&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="7217c4f38fb4c88be899accd3f3c8388ee115acb" translate="yes" xml:space="preserve">
          <source>Adds, subtracts or calculates the modulo of two durations.</source>
          <target state="translated">2つの持続時間のモジュロを加算、減算、または計算します。</target>
        </trans-unit>
        <trans-unit id="190513d30ca7a3e2a999758bba5d14849013dae0" translate="yes" xml:space="preserve">
          <source>Adheres to &lt;a href=&quot;http://www.unicode.org/versions/Unicode7.0.0/ch05.pdf&quot;&gt;Unicode 7.0&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.unicode.org/versions/Unicode7.0.0/ch05.pdf&quot;&gt;Unicode 7.0に&lt;/a&gt;準拠します。</target>
        </trans-unit>
        <trans-unit id="8e6c5c313ae1124d50c20408776fe80d4c2f9549" translate="yes" xml:space="preserve">
          <source>Adjacent separators.</source>
          <target state="translated">隣接するセパレーター。</target>
        </trans-unit>
        <trans-unit id="722ed5201dde06aad85b7457e551331fed6fc5eb" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;n&lt;/code&gt; to a size suitable for allocation (two words or larger, word-aligned).</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; を割り当てに適したサイズに調整します（2ワード以上、ワード境界で整列）。</target>
        </trans-unit>
        <trans-unit id="25ad3e5c0dbbba69ec8c4772c55f2582037c6136" translate="yes" xml:space="preserve">
          <source>Advance the range to the next chunk of encoded data.</source>
          <target state="translated">符号化されたデータの次のチャンクまで範囲を進めます。</target>
        </trans-unit>
        <trans-unit id="53489cea9eb74ca25d0c733e6598d5384d852067" translate="yes" xml:space="preserve">
          <source>Advance to the next decoded byte.</source>
          <target state="translated">次のデコードバイトに進む。</target>
        </trans-unit>
        <trans-unit id="3a3cd74a73d6f0a26c42392d915705fa7dae1cf8" translate="yes" xml:space="preserve">
          <source>Advance to the next element in the input to be decoded.</source>
          <target state="translated">デコードされる入力の次の要素に進む。</target>
        </trans-unit>
        <trans-unit id="6d3634150cc1196e50397ef062eee34b37152811" translate="yes" xml:space="preserve">
          <source>Advance to the next encoded character.</source>
          <target state="translated">次のエンコードされた文字に進みます。</target>
        </trans-unit>
        <trans-unit id="b1dffc8e495ab0f0b08bad1e3f10f588c91ee072" translate="yes" xml:space="preserve">
          <source>Advanced feature - provide direct access to a subset of matcher based a set of known encoding lengths. Lengths are provided in &lt;a href=&quot;#Code%20unit&quot;&gt;code units&lt;/a&gt;. The sub-matcher then may do less operations per any &lt;code&gt;test&lt;/code&gt;/&lt;code&gt;match&lt;/code&gt;.</source>
          <target state="translated">高度な機能-一連の既知のエンコード長に基づいてマッチャーのサブセットに直接アクセスできます。長さは&lt;a href=&quot;#Code%20unit&quot;&gt;コード単位で&lt;/a&gt;提供されます。次に、サブマッチャーは、 &lt;code&gt;test&lt;/code&gt; / &lt;code&gt;match&lt;/code&gt; ごとに実行する操作が少なくなります。</target>
        </trans-unit>
        <trans-unit id="eeb58f4b086c0412e02e6890890553e6dd38d672" translate="yes" xml:space="preserve">
          <source>Advanced updating</source>
          <target state="translated">高度な更新</target>
        </trans-unit>
        <trans-unit id="cf881b5c6e7f1c3b9a2c00554a2646c41d876526" translate="yes" xml:space="preserve">
          <source>Advances &lt;code&gt;r&lt;/code&gt; until it finds the first two adjacent elements &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; that satisfy &lt;code&gt;pred(a, b)&lt;/code&gt;. Performs &amp;Omicron;(&lt;code&gt;r.length&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pred(a, b)&lt;/code&gt; を満たす最初の2つの隣接する要素 &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; が見つかるまで &lt;code&gt;r&lt;/code&gt; を進めます。 &lt;code&gt;pred&lt;/code&gt; の &amp;Omicron;（ &lt;code&gt;r.length&lt;/code&gt; ）評価を実行します。</target>
        </trans-unit>
        <trans-unit id="facf585ea759be8e47863eaecb960e98185ac802" translate="yes" xml:space="preserve">
          <source>Advances &lt;code&gt;seq&lt;/code&gt; by calling &lt;code&gt;seq.popFront&lt;/code&gt; until either &lt;code&gt;find!(pred)(choices, seq.front)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, or &lt;code&gt;seq&lt;/code&gt; becomes empty. Performs &amp;Omicron;(&lt;code&gt;seq.length * choices.length&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;find!(pred)(choices, seq.front)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; になるか、 &lt;code&gt;seq&lt;/code&gt; が空になるまで &lt;code&gt;seq.popFront&lt;/code&gt; を呼び出して &lt;code&gt;seq&lt;/code&gt; を進めます。 &lt;code&gt;pred&lt;/code&gt; の &amp;Omicron;（ &lt;code&gt;seq.length * choices.length&lt;/code&gt; ）評価を実行します。</target>
        </trans-unit>
        <trans-unit id="8f69d337edd3755f38c1707e24fc5346d4e2d44c" translate="yes" xml:space="preserve">
          <source>Advances a given bidirectional range from the right by exactly</source>
          <target state="translated">与えられた双方向の範囲を正確に右から進ませる</target>
        </trans-unit>
        <trans-unit id="19d2eb30ee8dd8c5d7afbff2f9bd7ea8bb2642e3" translate="yes" xml:space="preserve">
          <source>Advances a given bidirectional range from the right by up to</source>
          <target state="translated">指定された双方向の範囲を右から最大で</target>
        </trans-unit>
        <trans-unit id="a1e75744b3b444139cd4f0a58b334b9edf66d830" translate="yes" xml:space="preserve">
          <source>Advances a given range by up exactly</source>
          <target state="translated">指定された範囲を正確に最大まで前進させる</target>
        </trans-unit>
        <trans-unit id="1a622ec23b3321ab3e350f048523f7084cf595eb" translate="yes" xml:space="preserve">
          <source>Advances a given range by up to</source>
          <target state="translated">指定された範囲を最大</target>
        </trans-unit>
        <trans-unit id="78bc54605619ccfaa022076c05ce4d0d5ecf8d2e" translate="yes" xml:space="preserve">
          <source>Advances the generator.</source>
          <target state="translated">ジェネレーターを前進させる。</target>
        </trans-unit>
        <trans-unit id="e7c9ed0ebcf630bc583e7903a2b6d29b7aca3fc7" translate="yes" xml:space="preserve">
          <source>Advances the random sequence.</source>
          <target state="translated">ランダムシーケンスを進めます。</target>
        </trans-unit>
        <trans-unit id="841e5d06644019901743e66d69de7d1976b71c5b" translate="yes" xml:space="preserve">
          <source>Advances to the next element in all controlled ranges.</source>
          <target state="translated">すべての制御された範囲で次の要素に進みます。</target>
        </trans-unit>
        <trans-unit id="cbe9dcb57596ffec1913e83a16abf147d32611b9" translate="yes" xml:space="preserve">
          <source>Aegean Numbers</source>
          <target state="translated">エーゲ数</target>
        </trans-unit>
        <trans-unit id="931eed4d96571bfeae93ef9dcf8c3202ff20b1ad" translate="yes" xml:space="preserve">
          <source>Affects whether functions are inlined or not. If at the declaration level, it affects the functions declared in the block it controls. If inside a function, it affects the function it is enclosed by.</source>
          <target state="translated">関数がインライン化されているかどうかに影響します。宣言レベルであれば、それが制御するブロックで宣言された関数に影響を与えます。関数の内部にある場合は、それが囲む関数に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="442683da146742a25947515455e712ba78a50694" translate="yes" xml:space="preserve">
          <source>Affix access functions offering references to the affixes of a block &lt;code&gt;b&lt;/code&gt; previously allocated with this allocator. &lt;code&gt;b&lt;/code&gt; may not be null. They are defined if and only if the corresponding affix is not &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">このアロケータで以前に割り当てられたブロック &lt;code&gt;b&lt;/code&gt; の接辞への参照を提供する接辞アクセス関数。 &lt;code&gt;b&lt;/code&gt; を nullにすることはできません。これらは、対応する接辞が &lt;code&gt;void&lt;/code&gt; でない場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="c23381a58dcf83131fe33f75a01b801175e69bea" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;typeSemantic&lt;/code&gt; the symbol when &lt;code&gt;exp&lt;/code&gt; doesn't represent a type.</source>
          <target state="translated">&lt;code&gt;typeSemantic&lt;/code&gt; の後、 &lt;code&gt;exp&lt;/code&gt; が型を表さない場合のシンボル。</target>
        </trans-unit>
        <trans-unit id="f58f4b720491f08a3e184b4d93384253d667e81c" translate="yes" xml:space="preserve">
          <source>After a FTP client has been setup and possibly assigned callbacks the &lt;code&gt; perform()&lt;/code&gt; method will start performing the actual communication with the server.</source>
          <target state="translated">FTPクライアントがセットアップされ、コールバックが割り当てられた後、 &lt;code&gt; perform()&lt;/code&gt; メソッドがサーバーとの実際の通信の実行を開始します。</target>
        </trans-unit>
        <trans-unit id="40877a01f3d2d2683d82a5ea2b798c56a293359c" translate="yes" xml:space="preserve">
          <source>After creation, a &lt;code&gt;Task&lt;/code&gt; may be executed in a new thread, or submitted to a &lt;code&gt;TaskPool&lt;/code&gt; for execution. A &lt;code&gt;TaskPool&lt;/code&gt; encapsulates a task queue and its worker threads. Its purpose is to efficiently map a large number of &lt;code&gt;Task&lt;/code&gt;s onto a smaller number of threads. A task queue is a FIFO queue of &lt;code&gt;Task&lt;/code&gt; objects that have been submitted to the &lt;code&gt;TaskPool&lt;/code&gt; and are awaiting execution. A worker thread is a thread that is associated with exactly one task queue. It executes the &lt;code&gt;Task&lt;/code&gt; at the front of its queue when the queue has work available, or sleeps when no work is available. Each task queue is associated with zero or more worker threads. If the result of a &lt;code&gt;Task&lt;/code&gt; is needed before execution by a worker thread has begun, the &lt;code&gt;Task&lt;/code&gt; can be removed from the task queue and executed immediately in the thread where the result is needed.</source>
          <target state="translated">作成後、 &lt;code&gt;Task&lt;/code&gt; は新しいスレッドで実行されるか、実行のために &lt;code&gt;TaskPool&lt;/code&gt; に送信されます。 A &lt;code&gt;TaskPool&lt;/code&gt; というは、タスクキューとそのワーカースレッドをカプセル化します。その目的は、多数の &lt;code&gt;Task&lt;/code&gt; を少数のスレッドに効率的にマッピングすることです。タスクキューは、 &lt;code&gt;Task&lt;/code&gt; &lt;code&gt;TaskPool&lt;/code&gt; 送信され、実行を待機しているタスクオブジェクトのFIFOキューです。ワーカースレッドは、1つのタスクキューに関連付けられたスレッドです。キューに使用可能な作業がある場合はキューの先頭で &lt;code&gt;Task&lt;/code&gt; を実行し、使用可能な作業がない場合はスリープします。各タスクキューは、0個以上のワーカースレッドに関連付けられています。 &lt;code&gt;Task&lt;/code&gt; の結果がワーカースレッドによる実行が開始される前に必要とされ、 &lt;code&gt;Task&lt;/code&gt; タスクキューから削除され、結果が必要とされているスレッドで即座に実行することができます。</target>
        </trans-unit>
        <trans-unit id="fac78fef792ce790d176c70684c125385e59b69f" translate="yes" xml:space="preserve">
          <source>After the HTTP client has been setup and possibly assigned callbacks the &lt;code&gt;perform()&lt;/code&gt; method will start performing the request towards the specified server.</source>
          <target state="translated">HTTPクライアントがセットアップされ、場合によってはコールバックが割り当てられた後、 &lt;code&gt;perform()&lt;/code&gt; メソッドは、指定されたサーバーへの要求の実行を開始します。</target>
        </trans-unit>
        <trans-unit id="3be61943c5e6beb762f765e4ebc8da159c5a9299" translate="yes" xml:space="preserve">
          <source>After this function is finished executing, any exceptions thrown are chained together via &lt;code&gt;Throwable.next&lt;/code&gt; and rethrown. The chaining order is non-deterministic.</source>
          <target state="translated">この関数の実行が終了すると、スローされたすべての例外が &lt;code&gt;Throwable.next&lt;/code&gt; を介してチェーンされ、再スローされます。連鎖順序は非決定的です。</target>
        </trans-unit>
        <trans-unit id="2423ca21e96dd2f33c30a0a22ba75c7e9a97460a" translate="yes" xml:space="preserve">
          <source>Aggregate Templates</source>
          <target state="translated">集計テンプレート</target>
        </trans-unit>
        <trans-unit id="422fc1d404645ddf0fe8822054c49c2df47da791" translate="yes" xml:space="preserve">
          <source>Aggregate Type traits</source>
          <target state="translated">アグリゲートタイプの特徴</target>
        </trans-unit>
        <trans-unit id="5a49d2a80d7f18d6b1f678d37a80f429dee0945d" translate="yes" xml:space="preserve">
          <source>Aggregate literals (AA/string/array/struct)</source>
          <target state="translated">集約リテラル(AA/文字列/配列/構造体</target>
        </trans-unit>
        <trans-unit id="0a01f2f266bf28f3c82d33549ab6734f725b8328" translate="yes" xml:space="preserve">
          <source>AggregateDeclaration &lt;code&gt;ad&lt;/code&gt;</source>
          <target state="translated">AggregateDeclaration &lt;code&gt;ad&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65711c59e3f2ecd6ab45c5a271a40aff4bf044a7" translate="yes" xml:space="preserve">
          <source>AggregateDeclaration &lt;strong id=&quot;isAggregate&quot;&gt;isAggregate&lt;/strong&gt;(Type t);</source>
          <target state="translated">AggregateDeclaration &lt;strong id=&quot;isAggregate&quot;&gt;isAggregate&lt;/strong&gt;（タイプt）;</target>
        </trans-unit>
        <trans-unit id="b026ca73b3ee9e08b16268eb5969c7649a6ada2c" translate="yes" xml:space="preserve">
          <source>AggregateDeclaration &lt;strong id=&quot;isInlinableNestedAggregate&quot;&gt;isInlinableNestedAggregate&lt;/strong&gt;(DeclarationExp e);</source>
          <target state="translated">AggregateDeclaration &lt;strong id=&quot;isInlinableNestedAggregate&quot;&gt;isInlinableNestedAggregate&lt;/strong&gt;（DeclarationExp e）;</target>
        </trans-unit>
        <trans-unit id="deb507c2bab5b6df1dfb7a527622531bee5bbcae" translate="yes" xml:space="preserve">
          <source>Aggregates</source>
          <target state="translated">Aggregates</target>
        </trans-unit>
        <trans-unit id="039a4d9ad09b94c49e1256fa36bbd7145bd6a873" translate="yes" xml:space="preserve">
          <source>Aggregates can be string literals, which can be accessed as char, wchar, or dchar arrays:</source>
          <target state="translated">集約体は文字列リテラルにすることができ、char、wchar、またはdcharの配列としてアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="64215ea928af9a868c37adc98435f865c066cad0" translate="yes" xml:space="preserve">
          <source>Aggregation of GC stats to be exposed via public API</source>
          <target state="translated">パブリック API を通じて公開される GC 2011 の統計情報の集計</target>
        </trans-unit>
        <trans-unit id="95739c27a4231a1ab1768db7918200a659985986" translate="yes" xml:space="preserve">
          <source>Aggregation of current profile information</source>
          <target state="translated">現在のプロフィール情報の集計</target>
        </trans-unit>
        <trans-unit id="960ed8592125f2bc50d2c8d3a223103bb8eab0ce" translate="yes" xml:space="preserve">
          <source>Alchemical Symbols</source>
          <target state="translated">錬金術のシンボル</target>
        </trans-unit>
        <trans-unit id="d5ba6c3d74529cf2db06f24108dd96d14e3a3bf5" translate="yes" xml:space="preserve">
          <source>Algebraic data type restricted to a closed set of possible types. It's an alias for &lt;a href=&quot;#VariantN&quot;&gt;&lt;code&gt;VariantN&lt;/code&gt;&lt;/a&gt; with an appropriately-constructed maximum size. &lt;code&gt;Algebraic&lt;/code&gt; is useful when it is desirable to restrict what a discriminated type could hold to the end of defining simpler and more efficient manipulation.</source>
          <target state="translated">可能なタイプの閉じたセットに制限された代数的データタイプ。これは、適切に構成された最大サイズを持つ&lt;a href=&quot;#VariantN&quot;&gt; &lt;code&gt;VariantN&lt;/code&gt; の&lt;/a&gt;エイリアスです。 &lt;code&gt;Algebraic&lt;/code&gt; は、識別された型が保持できるものを、より単純でより効率的な操作の定義の最後に制限することが望ましい場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="67e15eb99dc0e473c962d6a494d00e048e9f6fc6" translate="yes" xml:space="preserve">
          <source>Algorithms</source>
          <target state="translated">Algorithms</target>
        </trans-unit>
        <trans-unit id="c6f1119d49c8f3cbd3127d86d596eb5ad76abaa0" translate="yes" xml:space="preserve">
          <source>Algorithms are categorized into the following submodules:</source>
          <target state="translated">アルゴリズムは以下のサブモジュールに分類されます。</target>
        </trans-unit>
        <trans-unit id="9d031d2cc1773d432e8d4e5e3e397ff72d33b73a" translate="yes" xml:space="preserve">
          <source>Algorithms should be written to work based on the minimum precision of the calculation. They should not degrade or fail if the actual precision is greater. Float or double types, as opposed to the real (extended) type, should only be used for:</source>
          <target state="translated">アルゴリズムは、計算の最小精度に基づいて動作するように書かれていなければなりません。実際の精度がそれ以上であっても、劣化したり失敗したりしてはいけません。フロート型やダブル型は、実数型(拡張型)とは対照的に、次のような場合にのみ使用すべきです。</target>
        </trans-unit>
        <trans-unit id="6b7d7cc33ac422a7126bf7ca7d4bc41f992588c9" translate="yes" xml:space="preserve">
          <source>Algorithms that work specifically with strings.</source>
          <target state="translated">文字列に特化したアルゴリズム。</target>
        </trans-unit>
        <trans-unit id="88abf47d65eee8406cedefebf1444bde5b352ec5" translate="yes" xml:space="preserve">
          <source>Ali &amp;Ccedil;ehreli's &lt;a href=&quot;http://ddili.org/ders/d.en/ranges.html&quot;&gt;tutorial on ranges&lt;/a&gt; for the basics of working with and creating range-based code.</source>
          <target state="translated">範囲ベースのコードの操作と作成の基本についての、&lt;a href=&quot;http://ddili.org/ders/d.en/ranges.html&quot;&gt;範囲に関する&lt;/a&gt; Ali&amp;Ccedil;ehreliのチュートリアル。</target>
        </trans-unit>
        <trans-unit id="04259816ace1ebe56c853a8763558570c008514a" translate="yes" xml:space="preserve">
          <source>Alias</source>
          <target state="translated">Alias</target>
        </trans-unit>
        <trans-unit id="2b42e13ed23a87356a09e332c7e6e714e6e09e96" translate="yes" xml:space="preserve">
          <source>Alias Declarations</source>
          <target state="translated">エイリアス宣言</target>
        </trans-unit>
        <trans-unit id="77ef2f52299fed56a50f678635e931b47d8d55bb" translate="yes" xml:space="preserve">
          <source>Alias Templates</source>
          <target state="translated">エイリアステンプレート</target>
        </trans-unit>
        <trans-unit id="8e3462f022e547a8b9b81a59c7d09995c97a1575" translate="yes" xml:space="preserve">
          <source>Alias This</source>
          <target state="translated">別名</target>
        </trans-unit>
        <trans-unit id="a6823ce53aa787875a84b73b489aeaa41fb9203a" translate="yes" xml:space="preserve">
          <source>Alias declarations can be used to overload together functions declared in different mixins:</source>
          <target state="translated">エイリアス宣言は、異なるmixinで宣言された関数をオーバーロードするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="9f63972ec70f46c0515cbfc8d099ae2cc95be598" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#VariantN&quot;&gt;&lt;code&gt;VariantN&lt;/code&gt;&lt;/a&gt; instantiated with the largest size of &lt;code&gt;creal&lt;/code&gt;, &lt;code&gt;char[]&lt;/code&gt;, and &lt;code&gt;void delegate()&lt;/code&gt;. This ensures that &lt;code&gt;Variant&lt;/code&gt; is large enough to hold all of D's predefined types unboxed, including all numeric types, pointers, delegates, and class references. You may want to use &lt;code&gt;VariantN&lt;/code&gt; directly with a different maximum size either for storing larger types unboxed, or for saving memory.</source>
          <target state="translated">最大のサイズの &lt;code&gt;creal&lt;/code&gt; 、 &lt;code&gt;char[]&lt;/code&gt; 、および &lt;code&gt;void delegate()&lt;/code&gt; でインスタンス化された&lt;a href=&quot;#VariantN&quot;&gt; &lt;code&gt;VariantN&lt;/code&gt; の&lt;/a&gt;エイリアス。これにより、 &lt;code&gt;Variant&lt;/code&gt; は、すべての数値型、ポインター、デリゲート、およびクラス参照を含む、ボックス化されていないDのすべての事前定義型を保持するのに十分な大きさになります。より大きな型をボックス化せずに格納するため、またはメモリを節約するために、異なる最大サイズで &lt;code&gt;VariantN&lt;/code&gt; を直接使用することができます。</target>
        </trans-unit>
        <trans-unit id="63202ec3a67d85508053325231c6e3a50b705940" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;typeof(Factory()(1))&lt;/code&gt;, i.e. the type of the individual allocators.</source>
          <target state="translated">&lt;code&gt;typeof(Factory()(1))&lt;/code&gt; のエイリアス、つまり個々のアロケータのタイプ。</target>
        </trans-unit>
        <trans-unit id="105407ad1c7568b9c649c50759d11c4e192f57b4" translate="yes" xml:space="preserve">
          <source>Alias parameters can accept both literals and user-defined type symbols, but they are less specialized than the matches to type parameters and value parameters:</source>
          <target state="translated">エイリアスパラメータは、リテラルとユーザ定義の型シンボルの両方を受け入れることができますが、型パラメータや値パラメータへのマッチよりも専門性が低くなります。</target>
        </trans-unit>
        <trans-unit id="d22b74da1f9d782bb61c364a8aadbff84bd13777" translate="yes" xml:space="preserve">
          <source>Alias parameters can also be typed. These parameters will accept symbols of that type:</source>
          <target state="translated">エイリアスパラメータをタイプすることもできます。これらのパラメータは、その型のシンボルを受け入れます。</target>
        </trans-unit>
        <trans-unit id="b917c61ec37f1f84ac7cb387db33687a0c61b1b1" translate="yes" xml:space="preserve">
          <source>Alias parameters enable templates to be parameterized with symbol names or values computed at compile-time. Almost any kind of D symbol can be used, including user-defined type names, global names, local names, module names, template names, and template instance names.</source>
          <target state="translated">エイリアス・パラメータを使用すると、コンパイル時に計算されたシンボル名や値でテンプレートをパラメータ化することができます。ユーザー定義の型名、グローバル名、ローカル名、モジュール名、テンプレート名、テンプレートインスタンス名など、ほぼすべての種類の D シンボルを使用できます。</target>
        </trans-unit>
        <trans-unit id="8515de354ea5c9130e0c481ca51f1addb44b5d02" translate="yes" xml:space="preserve">
          <source>Alias sequence filtering</source>
          <target state="translated">エイリアスシーケンスフィルタリング</target>
        </trans-unit>
        <trans-unit id="cdba1b60c0b760cd04f385300eb523eb54b00054" translate="yes" xml:space="preserve">
          <source>Alias sequence searching</source>
          <target state="translated">エイリアスシーケンス検索</target>
        </trans-unit>
        <trans-unit id="1590720ca74c606d4c9f961020006e51239fec30" translate="yes" xml:space="preserve">
          <source>Alias sequence transformation</source>
          <target state="translated">エイリアスシーケンス変換</target>
        </trans-unit>
        <trans-unit id="5c56d0ae76a47ae72fa8c318d1bfb56034cb27c4" translate="yes" xml:space="preserve">
          <source>Alias sequence type hierarchy</source>
          <target state="translated">エイリアスシーケンス型階層</target>
        </trans-unit>
        <trans-unit id="2ba4b28154b9d6a34808cdcb201b98d061c254fa" translate="yes" xml:space="preserve">
          <source>Alias your own enforce function</source>
          <target state="translated">独自のenforce関数のエイリアス</target>
        </trans-unit>
        <trans-unit id="3677863f140b997e20f4c765fa070bfcd26df047" translate="yes" xml:space="preserve">
          <source>AliasDeclaration</source>
          <target state="translated">AliasDeclaration</target>
        </trans-unit>
        <trans-unit id="07e1c1a8b4a8503f8648ab57227770c6e32ac2e8" translate="yes" xml:space="preserve">
          <source>AliasSeq</source>
          <target state="translated">AliasSeq</target>
        </trans-unit>
        <trans-unit id="a75c4e940b98b3f296d4a0d45ef3c78158d01f9b" translate="yes" xml:space="preserve">
          <source>AliasThis</source>
          <target state="translated">AliasThis</target>
        </trans-unit>
        <trans-unit id="f45e3de29f946da184942d83246da3931f3381ce" translate="yes" xml:space="preserve">
          <source>AliasThis &lt;code&gt;at&lt;/code&gt;</source>
          <target state="translated">AliasThis &lt;code&gt;at&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a6b07ef377e1a1cca3873fdac3f4b419d63ed5c" translate="yes" xml:space="preserve">
          <source>Aliased symbols are useful as a shorthand for a long qualified symbol name, or as a way to redirect references from one symbol to another:</source>
          <target state="translated">エイリアス化されたシンボルは、長い修飾されたシンボル名の短縮形として、あるいはあるシンボルから別のシンボルへの参照をリダイレクトする方法として有用です。</target>
        </trans-unit>
        <trans-unit id="7f8884a25f8de2f7a75d30d9ae86bb0f1f09187b" translate="yes" xml:space="preserve">
          <source>Aliased types are semantically identical to the types they are aliased to. The debugger cannot distinguish between them, and there is no difference as far as function overloading is concerned. For example:</source>
          <target state="translated">エイリアスされた型は、エイリアスされた型と意味的に同じです。デバッガはこれらを区別することができず、関数のオーバーロードに関しては違いはありません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="181e7f0a478bed4e18de65212b24a50ae36262a7" translate="yes" xml:space="preserve">
          <source>Aliases can also &lt;code&gt;import&lt;/code&gt; a set of overloaded functions, that can be overloaded with functions in the current scope:</source>
          <target state="translated">エイリアスは、オーバーロードされた関数のセットを &lt;code&gt;import&lt;/code&gt; することもできます。これは、現在のスコープ内の関数でオーバーロードできます。</target>
        </trans-unit>
        <trans-unit id="daf33e541d4cc1a3ec6daef4974e2cc623107069" translate="yes" xml:space="preserve">
          <source>Aliases cannot be used for expressions:</source>
          <target state="translated">式にエイリアスを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="ebc45702486814ba8ea503fc9c806c260e1435cb" translate="yes" xml:space="preserve">
          <source>Aliases itself to &lt;code&gt;T[0]&lt;/code&gt; if the boolean &lt;code&gt;condition&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and to &lt;code&gt;T[1]&lt;/code&gt; otherwise.</source>
          <target state="translated">自身のエイリアスに &lt;code&gt;T[0]&lt;/code&gt; ブール場合 &lt;code&gt;condition&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; とする &lt;code&gt;T[1]&lt;/code&gt; 別段。</target>
        </trans-unit>
        <trans-unit id="e3937b5ce30f890ad3772d735fbf89d86613c889" translate="yes" xml:space="preserve">
          <source>Aliases the operating-system-specific semaphore type.</source>
          <target state="translated">オペレーティングシステム固有のセマフォのタイプをエイリアスします。</target>
        </trans-unit>
        <trans-unit id="ca83555e7a077f50fe3fcacdc4d3433397f6d741" translate="yes" xml:space="preserve">
          <source>Aliasing can be used to &lt;code&gt;import&lt;/code&gt; a symbol from an import into the current scope:</source>
          <target state="translated">エイリアスを使用して、インポートから現在のスコープにシンボルを &lt;code&gt;import&lt;/code&gt; できます。</target>
        </trans-unit>
        <trans-unit id="3880da17e1bb86f5003addaa85926c1d8378f606" translate="yes" xml:space="preserve">
          <source>AlignAttribute</source>
          <target state="translated">AlignAttribute</target>
        </trans-unit>
        <trans-unit id="c33b72e35015aa610f1d135fb91888616c7312da" translate="yes" xml:space="preserve">
          <source>Aligned allocator using OS-specific primitives, under a uniform API.</source>
          <target state="translated">統一されたAPIの下で、OS固有のプリミティブを使用してアロケータを整列させました。</target>
        </trans-unit>
        <trans-unit id="33c63fc9fbd39c59d281cefd5cb568321a27de38" translate="yes" xml:space="preserve">
          <source>Aligning the start of a loop body can sometimes have a dramatic effect on the execution speed.</source>
          <target state="translated">ループボディの開始位置を揃えると、実行速度に劇的な影響を与えることがあります。</target>
        </trans-unit>
        <trans-unit id="7f8c5176c3f03b97659161923f2b6492f7de7e73" translate="yes" xml:space="preserve">
          <source>Alignment</source>
          <target state="translated">Alignment</target>
        </trans-unit>
        <trans-unit id="631fafc1c69d316d9d50c570d786f73ce03ceecb" translate="yes" xml:space="preserve">
          <source>Alignment is identical to that of the parent.</source>
          <target state="translated">アライメントは親と同じです。</target>
        </trans-unit>
        <trans-unit id="628683da3626c98088bdb745580ccfdd6195c8e9" translate="yes" xml:space="preserve">
          <source>Alignment is page-size and hardcoded to 4096 (even though on certain systems it could be larger).</source>
          <target state="translated">アライメントはページサイズで4096にハードコードされています(特定のシステムではもっと大きくなるかもしれませんが)。</target>
        </trans-unit>
        <trans-unit id="ee7a5f296fba571ed109f22fb62cee377810a13b" translate="yes" xml:space="preserve">
          <source>Alignment offered</source>
          <target state="translated">アライメントの提供</target>
        </trans-unit>
        <trans-unit id="da6f06da696bc1f912e995a3736dfda61d958504" translate="yes" xml:space="preserve">
          <source>Alignment offered is equal to &lt;code&gt;Allocator.alignment&lt;/code&gt;.</source>
          <target state="translated">提供される配置は &lt;code&gt;Allocator.alignment&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="d9fda3b8d79c5ba0e4cb6a973462e579762d4731" translate="yes" xml:space="preserve">
          <source>Alignment offered.</source>
          <target state="translated">アライメントを提供しました。</target>
        </trans-unit>
        <trans-unit id="6a72085653e4c5be8c7640c868ef787cbcf063d1" translate="yes" xml:space="preserve">
          <source>All</source>
          <target state="translated">All</target>
        </trans-unit>
        <trans-unit id="abe24b72722605e6cdd91fc4259456dcc124fc52" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;struct&lt;/code&gt; declarations are an instance of this.</source>
          <target state="translated">すべての &lt;code&gt;struct&lt;/code&gt; 宣言はこのインスタンスです。</target>
        </trans-unit>
        <trans-unit id="a15215d4acb70177c3fa907103d5e4082e2c6ca5" translate="yes" xml:space="preserve">
          <source>All D class objects inherit from Object.</source>
          <target state="translated">DクラスのオブジェクトはすべてObjectを継承しています。</target>
        </trans-unit>
        <trans-unit id="4b8af670ebee67e47b1547dfb583c8778c294941" translate="yes" xml:space="preserve">
          <source>All Linux Systems, except for Android</source>
          <target state="translated">Androidを除くすべてのLinuxシステム</target>
        </trans-unit>
        <trans-unit id="80accc5a7a3759a25495613b953505c2d3f752d2" translate="yes" xml:space="preserve">
          <source>All Linux systems</source>
          <target state="translated">すべてのLinuxシステム</target>
        </trans-unit>
        <trans-unit id="4d974fefbe10142c06ce86c531753f630c736767" translate="yes" xml:space="preserve">
          <source>All Objective-C classes that should be accessible from within D need to be declared with the &lt;a href=&quot;#objc-linkage&quot;&gt;Objective-C linkage&lt;/a&gt;. If the class is declared as &lt;code&gt;extern&lt;/code&gt; (in addition to &lt;code&gt;extern (Objective-C)&lt;/code&gt;) it is expected to be defined externally.</source>
          <target state="translated">D内からアクセスできるすべてのObjective-Cクラスは、&lt;a href=&quot;#objc-linkage&quot;&gt;Objective-Cリンケージ&lt;/a&gt;で宣言する必要があります。クラスは以下のように宣言された場合 &lt;code&gt;extern&lt;/code&gt; （に加えて &lt;code&gt;extern (Objective-C)&lt;/code&gt; ）には、外部定義されることが期待されます。</target>
        </trans-unit>
        <trans-unit id="1cad9880f94b0d69e64ab7ba48ed53970ed3c806" translate="yes" xml:space="preserve">
          <source>All POSIX systems (includes Linux, FreeBSD, OS X, Solaris, etc.)</source>
          <target state="translated">すべての POSIX システム (Linux、FreeBSD、OS X、Solaris などを含む)</target>
        </trans-unit>
        <trans-unit id="573bedde18f09596640b473ee57afdc92f81ce77" translate="yes" xml:space="preserve">
          <source>All algorithms are generalized to accept as input not only sets but also &lt;a href=&quot;http://https//en.wikipedia.org/wiki/Multiset&quot;&gt;multisets&lt;/a&gt;. Each algorithm documents behaviour in the presence of duplicated inputs.</source>
          <target state="translated">すべてのアルゴリズムは、セットだけでなく&lt;a href=&quot;http://https//en.wikipedia.org/wiki/Multiset&quot;&gt;マルチ&lt;/a&gt;セットも入力として受け入れるように一般化されています。各アルゴリズムは、重複した入力がある場合の動作を文書化します。</target>
        </trans-unit>
        <trans-unit id="deb71250ab180a43538a473f83e6182c437126a3" translate="yes" xml:space="preserve">
          <source>All allocators in this module accept and return &lt;code&gt;void[]&lt;/code&gt; (as opposed to &lt;code&gt;shared void[]&lt;/code&gt;). This is because at the time of allocation, deallocation, or reallocation, the memory is effectively not &lt;code&gt;shared&lt;/code&gt; (if it were, it would reveal a bug at the application level).</source>
          <target state="translated">このモジュールのすべてのアロケータは、（ &lt;code&gt;shared void[]&lt;/code&gt; とは対照的に）void []を受け入れて返し &lt;code&gt;void[]&lt;/code&gt; 。これは、割り当て時、割り当て解除時、または再割り当て時に、メモリが効果的に &lt;code&gt;shared&lt;/code&gt; ないためです（共有された場合、アプリケーションレベルでバグが明らかになります）。</target>
        </trans-unit>
        <trans-unit id="5de9c469f53cd882bbe9f78f7b9c7bd22b28c0ee" translate="yes" xml:space="preserve">
          <source>All arithmetic operations are supported, except unsigned shift right (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;). Bitwise operations (&lt;code&gt;|&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;) are supported, and behave as if BigInt was an infinite length 2's complement number.</source>
          <target state="translated">符号なし右シフト（ &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; ）を除くすべての算術演算がサポートされています。ビット単位の演算（ &lt;code&gt;|&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;^&lt;/code&gt; 、 &lt;code&gt;~&lt;/code&gt; ）がサポートされ、BigIntが無限長の2の補数であるかのように動作します。</target>
        </trans-unit>
        <trans-unit id="46dc5bc27e859a39247d5b9a63e991bdb3dcaaa3" translate="yes" xml:space="preserve">
          <source>All arrays that use char, wchar, and their qualified versions are narrow strings. (Those include string and wstring).</source>
          <target state="translated">char、wchar、およびそれらの修飾されたバージョンを使用するすべての配列は、狭い文字列です。(これらにはstringとwstringが含まれます)。</target>
        </trans-unit>
        <trans-unit id="c8a30ad5dcb475c164f90e540d6c2f68890c9e95" translate="yes" xml:space="preserve">
          <source>All changes are temporary. The previous state is restored at the end of the scope.</source>
          <target state="translated">すべての変更は一時的なものです。前の状態はスコープの終了時に復元されます。</target>
        </trans-unit>
        <trans-unit id="21cfae6e750ea0fd4fbc469d1b9c885b7b28182c" translate="yes" xml:space="preserve">
          <source>All character input range conversions using &lt;a href=&quot;#to&quot;&gt;&lt;code&gt;to&lt;/code&gt;&lt;/a&gt; are forwarded to &lt;code&gt;parse&lt;/code&gt; and do not require lvalues.</source>
          <target state="translated">&lt;a href=&quot;#to&quot;&gt; &lt;code&gt;to&lt;/code&gt; &lt;/a&gt;を使用したすべての文字入力範囲変換は &lt;code&gt;parse&lt;/code&gt; 転送され、左辺値は必要ありません。</target>
        </trans-unit>
        <trans-unit id="9cfc0aec4bf30e7871d683d9b8ae2997d4838aa1" translate="yes" xml:space="preserve">
          <source>All characters with non-zero canonical combining class are combining characters, but the reverse is not the case: there are combining characters with a zero combining class.</source>
          <target state="translated">正準合体クラスが0以外の文字はすべて合体文字ですが、その逆ではなく、正準合体クラスが0の合体文字が存在します。</target>
        </trans-unit>
        <trans-unit id="fa3d4a14790c41d5da46c1de2b8b3d0d867f24e5" translate="yes" xml:space="preserve">
          <source>All classes inherit from a super class. If one is not specified, it inherits from &lt;a href=&quot;https://dlang.org/phobos/object.html#Object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;Object&lt;/code&gt; forms the root of the D class inheritance hierarchy.</source>
          <target state="translated">すべてのクラスはスーパークラスから継承します。指定されていない場合は、&lt;a href=&quot;https://dlang.org/phobos/object.html#Object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;から継承します。 &lt;code&gt;Object&lt;/code&gt; は、Dクラスの継承階層のルートを形成します。</target>
        </trans-unit>
        <trans-unit id="cb44cae4675a0a5faf9a4d0a4f28a2e8d6e40ac0" translate="yes" xml:space="preserve">
          <source>All classes inherit from a super class. If one is not specified, it inherits from Object. Object forms the root of the D class inheritance hierarchy.</source>
          <target state="translated">すべてのクラスはスーパークラスを継承します。指定しない場合はObjectから継承します。ObjectはDクラスの継承階層のルートを形成します。</target>
        </trans-unit>
        <trans-unit id="9bdea0dd8fa982a6717a9259d201dcc03dde23b0" translate="yes" xml:space="preserve">
          <source>All containers have reference semantics, which means that after assignment both variables refer to the same underlying data.</source>
          <target state="translated">すべてのコンテナは参照セマンティクスを持っており、これは代入後に両方の変数が同じ基礎となるデータを参照することを意味します。</target>
        </trans-unit>
        <trans-unit id="b52c04d3bf060364790c0c3403f5779dc2a33f11" translate="yes" xml:space="preserve">
          <source>All control characters in the ASCII table (&lt;a href=&quot;https://www.asciitable.com&quot;&gt;source&lt;/a&gt;).</source>
          <target state="translated">ASCIIテーブルのすべての制御文字（&lt;a href=&quot;https://www.asciitable.com&quot;&gt;source&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c22d531bfa3aab4e678dd7f6e2eb1504810b6d16" translate="yes" xml:space="preserve">
          <source>All elements &lt;code&gt;e&lt;/code&gt; in subrange &lt;code&gt;r[0 .. k]&lt;/code&gt; satisfy &lt;code&gt;!less(r[k], e)&lt;/code&gt; (i.e. &lt;code&gt;r[k]&lt;/code&gt; is greater than or equal to each element to its left according to predicate &lt;code&gt;less&lt;/code&gt;)</source>
          <target state="translated">サブ範囲 &lt;code&gt;r[0 .. k]&lt;/code&gt; すべての要素 &lt;code&gt;e&lt;/code&gt; は、 &lt;code&gt;!less(r[k], e)&lt;/code&gt; 満たします（つまり、 &lt;code&gt;r[k]&lt;/code&gt; は、述語 &lt;code&gt;less&lt;/code&gt; に従って、左側の各要素以上です）</target>
        </trans-unit>
        <trans-unit id="4173fedb2ec95e1c7fab071952ccdfb425731d8e" translate="yes" xml:space="preserve">
          <source>All elements &lt;code&gt;e&lt;/code&gt; in subrange &lt;code&gt;r[k .. $]&lt;/code&gt; satisfy &lt;code&gt;!less(e, r[k])&lt;/code&gt; (i.e. &lt;code&gt;r[k]&lt;/code&gt; is less than or equal to each element to its right according to predicate &lt;code&gt;less&lt;/code&gt;)</source>
          <target state="translated">サブ範囲 &lt;code&gt;r[k .. $]&lt;/code&gt; すべての要素 &lt;code&gt;e&lt;/code&gt; は、 &lt;code&gt;!less(e, r[k])&lt;/code&gt; 満たします（つまり、 &lt;code&gt;r[k]&lt;/code&gt; は、述語 &lt;code&gt;less&lt;/code&gt; に従って、その右側の各要素以下です）</target>
        </trans-unit>
        <trans-unit id="38e57ca7163a6985d6201556b7ec2361815962f9" translate="yes" xml:space="preserve">
          <source>All elements of the range are checked to be sorted. The check is performed in O(n) time.</source>
          <target state="translated">範囲のすべての要素がソートされるようにチェックされます。チェックはO(n)時間で行われます。</target>
        </trans-unit>
        <trans-unit id="478b4e7b48496f9b1b20465b5132e0e5432d493b" translate="yes" xml:space="preserve">
          <source>All empty nodes which cannot return new memory, are removed from the list.</source>
          <target state="translated">新しいメモリを返すことができない空のノードはすべてリストから削除されます。</target>
        </trans-unit>
        <trans-unit id="05c11955f5c3b9e526943e8928fc83cd41d0f45c" translate="yes" xml:space="preserve">
          <source>All errors must be dealt with in some way, either by code explicitly written to handle them, or by some system default handling.</source>
          <target state="translated">すべてのエラーは、明示的にエラーを処理するように書かれたコードによって、あるいはシステムのデフォルト処理によって、何らかの方法で処理されなければなりません。</target>
        </trans-unit>
        <trans-unit id="4680cfd395545685306b1b1ceb36045a37266d2f" translate="yes" xml:space="preserve">
          <source>All finer grained error checking is turned on. Address containing errors or warnings is considered invalid. A specific email status code will be returned indicating the error/warning of the address.</source>
          <target state="translated">すべての細かいエラーチェックがオンになっています。エラーや警告を含むアドレスは無効とみなされます。アドレスのエラー/警告を示す特定の電子メールステータスコードが返されます。</target>
        </trans-unit>
        <trans-unit id="de02c4a63acb3a5d4f7f587b7e81e74ed2b0de72" translate="yes" xml:space="preserve">
          <source>All floating point types to all string types.</source>
          <target state="translated">すべての浮動小数点型からすべての文字列型へ</target>
        </trans-unit>
        <trans-unit id="79e88b74a9d4c8b35e8dc0b4507253f67ff5fa01" translate="yes" xml:space="preserve">
          <source>All functions, with the exception of &lt;a href=&quot;#expandTilde&quot;&gt;&lt;code&gt;expandTilde&lt;/code&gt;&lt;/a&gt; (and in some cases &lt;a href=&quot;#absolutePath&quot;&gt;&lt;code&gt;absolutePath&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#relativePath&quot;&gt;&lt;code&gt;relativePath&lt;/code&gt;&lt;/a&gt;), are pure string manipulation functions; they don't depend on any state outside the program, nor do they perform any actual file system actions. This has the consequence that the module does not make any distinction between a path that points to a directory and a path that points to a file, and it does not know whether or not the object pointed to by the path actually exists in the file system. To differentiate between these cases, use &lt;a href=&quot;std_file#isDir&quot;&gt;&lt;code&gt;std.file.isDir&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;std_file#exists&quot;&gt;&lt;code&gt;std.file.exists&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#expandTilde&quot;&gt; &lt;code&gt;expandTilde&lt;/code&gt; &lt;/a&gt;（場合によっては&lt;a href=&quot;#absolutePath&quot;&gt; &lt;code&gt;absolutePath&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#relativePath&quot;&gt; &lt;code&gt;relativePath&lt;/code&gt; &lt;/a&gt;）を除くすべての関数は、純粋な文字列操作関数です。プログラム外の状態に依存せず、実際のファイルシステムアクションも実行しません。これにより、モジュールはディレクトリを指すパスとファイルを指すパスを区別せず、パスが指すオブジェクトが実際にファイルシステムに存在するかどうかがわかりません。 。これらのケースを区別するには、&lt;a href=&quot;std_file#isDir&quot;&gt; &lt;code&gt;std.file.isDir&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;std_file#exists&quot;&gt; &lt;code&gt;std.file.exists&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="897231d543ddd436ff3d6ba5df7aae31b8e08c87" translate="yes" xml:space="preserve">
          <source>All hidden parameters bundled.</source>
          <target state="translated">すべての隠しパラメータがバンドルされています。</target>
        </trans-unit>
        <trans-unit id="8f34602fbc14abc9ba9e2e2916d9e6f9be4a8ff7" translate="yes" xml:space="preserve">
          <source>All implementations must support these, even if by just ignoring them:</source>
          <target state="translated">すべての実装は、無視するだけでも、これらをサポートしなければなりません。</target>
        </trans-unit>
        <trans-unit id="8bbea447a7889fa98476703b1f292c42f34bfb25" translate="yes" xml:space="preserve">
          <source>All information associated with call to log function.</source>
          <target state="translated">ログ関数の呼び出しに関連するすべての情報。</target>
        </trans-unit>
        <trans-unit id="3a29b997591598a8b6cfc336ecadb36fbed66be7" translate="yes" xml:space="preserve">
          <source>All inserts, removes, searches, and any function in general has complexity of &amp;Omicron;(&lt;code&gt;lg(n)&lt;/code&gt;).</source>
          <target state="translated">すべての挿入、削除、検索、および一般的な関数はすべてcomplexity（ &lt;code&gt;lg(n)&lt;/code&gt; ）の複雑さを持っています。</target>
        </trans-unit>
        <trans-unit id="dcba16c11981f392657558a8d07f357ce4272a30" translate="yes" xml:space="preserve">
          <source>All interface functions must be defined in a class that inherits from that interface:</source>
          <target state="translated">すべてのインターフェイス関数は、そのインターフェイスを継承するクラスで定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="91e8b4ee2b5a17486728589fc5f6cd3d4c03e0e9" translate="yes" xml:space="preserve">
          <source>All keys can be removed by using the method &lt;code&gt;clear&lt;/code&gt;.</source>
          <target state="translated">メソッド &lt;code&gt;clear&lt;/code&gt; を使用すると、すべてのキーを削除できます。</target>
        </trans-unit>
        <trans-unit id="cfd5908b4325dd814d160c014614e871bbfd4828" translate="yes" xml:space="preserve">
          <source>All locks are automatically released when the process terminates.</source>
          <target state="translated">プロセスが終了すると、すべてのロックが自動的に解放されます。</target>
        </trans-unit>
        <trans-unit id="9a9b40a952996bdcd13db98ad39be39296434cf8" translate="yes" xml:space="preserve">
          <source>All matches returned by pattern matching functionality in this library are slices of the original input. The notable exception is the &lt;code&gt;replace&lt;/code&gt; family of functions that generate a new string from the input.</source>
          <target state="translated">このライブラリのパターンマッチング機能によって返されるすべての一致は、元の入力のスライスです。注目すべき例外は、入力から新しい文字列を生成する関数の &lt;code&gt;replace&lt;/code&gt; ファミリーです。</target>
        </trans-unit>
        <trans-unit id="c8490a5c1885e9991535da5cae9171b20351f0f9" translate="yes" xml:space="preserve">
          <source>All member functions of synchronized classes are synchronized. A static member function is synchronized on the</source>
          <target state="translated">同期化されたクラスのすべてのメンバ関数が同期化されます。静的なメンバ関数は</target>
        </trans-unit>
        <trans-unit id="0d2e902a58669b4a70fa2a561fe94c27f74e6b8d" translate="yes" xml:space="preserve">
          <source>All methods inside a class declared as &lt;code&gt;extern (Objective-C)&lt;/code&gt; will get implicit Objective-C linkage.</source>
          <target state="translated">&lt;code&gt;extern (Objective-C)&lt;/code&gt; として宣言されたクラス内のすべてのメソッドは、暗黙のObjective-Cリンケージを取得します。</target>
        </trans-unit>
        <trans-unit id="b366095400babb69322d711aa921d268cfb35ea8" translate="yes" xml:space="preserve">
          <source>All numbers in [-&amp;infin;, +&amp;infin;] are ordered the same way as by built-in comparison, with the exception of -0.0, which is less than +0.0;</source>
          <target state="translated">[-&amp;infin;、+&amp;infin;]内のすべての数値は、組み込み比較と同じように順序付けされますが、-0.0は+0.0未満です。</target>
        </trans-unit>
        <trans-unit id="cf2fb5f601f3c7c74aa1d7bc5d26857dd697e304" translate="yes" xml:space="preserve">
          <source>All of its inputs are assumed to be sorted. This can mean that inputs are instances of &lt;a href=&quot;std_range#SortedRange&quot;&gt;&lt;code&gt;std.range.SortedRange&lt;/code&gt;&lt;/a&gt;. Use the result of &lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt;&lt;code&gt; std.algorithm.sorting.sort&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;std_range#assumeSorted&quot;&gt;&lt;code&gt;std.range.assumeSorted&lt;/code&gt;&lt;/a&gt; to merge ranges known to be sorted (show in the example below). Note that there is currently no way of ensuring that two or more instances of &lt;a href=&quot;std_range#SortedRange&quot;&gt;&lt;code&gt; std.range.SortedRange&lt;/code&gt;&lt;/a&gt; are sorted using a specific comparison function &lt;code&gt;pred&lt;/code&gt;. Therefore no checking is done here to assure that all inputs &lt;code&gt;rs&lt;/code&gt; are instances of &lt;a href=&quot;std_range#SortedRange&quot;&gt;&lt;code&gt;std.range.SortedRange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">入力はすべてソートされていると想定されます。これは、入力が&lt;a href=&quot;std_range#SortedRange&quot;&gt; &lt;code&gt;std.range.SortedRange&lt;/code&gt; の&lt;/a&gt;インスタンスであることを意味します。&lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt; &lt;code&gt; std.algorithm.sorting.sort&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;std_range#assumeSorted&quot;&gt; &lt;code&gt;std.range.assumeSorted&lt;/code&gt; &lt;/a&gt;の結果を使用して、ソートされていることがわかっている範囲をマージします（以下の例を参照）。現在、特定の比較関数 &lt;code&gt;pred&lt;/code&gt; を使用して&lt;a href=&quot;std_range#SortedRange&quot;&gt; &lt;code&gt; std.range.SortedRange&lt;/code&gt; の&lt;/a&gt; 2つ以上のインスタンスを確実にソートする方法はありません。したがって、ここではすべての入力 &lt;code&gt;rs&lt;/code&gt; が&lt;a href=&quot;std_range#SortedRange&quot;&gt; &lt;code&gt;std.range.SortedRange&lt;/code&gt; の&lt;/a&gt;インスタンスであることを確認するためのチェックは行われません。</target>
        </trans-unit>
        <trans-unit id="7760c023d07d36fdca08004de575b3be6fcb979d" translate="yes" xml:space="preserve">
          <source>All of the functions in std.ascii accept Unicode characters but effectively ignore them if they're not ASCII. All &lt;code&gt;isX&lt;/code&gt; functions return &lt;code&gt;false&lt;/code&gt; for non-ASCII characters, and all &lt;code&gt;toX&lt;/code&gt; functions do nothing to non-ASCII characters.</source>
          <target state="translated">std.asciiのすべての関数はUnicode文字を受け入れますが、ASCIIでない場合は事実上無視します。すべての &lt;code&gt;isX&lt;/code&gt; 関数は非ASCII文字に対して &lt;code&gt;false&lt;/code&gt; を返し、すべての &lt;code&gt;toX&lt;/code&gt; 関数は非ASCII文字に対しては何もしません。</target>
        </trans-unit>
        <trans-unit id="406700e1b4c5b2a9f03e14707a386766e7ff13f4" translate="yes" xml:space="preserve">
          <source>All of the standard numeric operators are defined for the UUID struct.</source>
          <target state="translated">すべての標準的な数値演算子は、UUID 構造体に対して定義されています。</target>
        </trans-unit>
        <trans-unit id="3100bf25a966348766069acc9d7aec1ceec953c8" translate="yes" xml:space="preserve">
          <source>All of these UUID versions can be read and processed by &lt;code&gt;std.uuid&lt;/code&gt;, but only version 3, 4 and 5 UUIDs can be generated.</source>
          <target state="translated">これらのUUIDバージョンはすべて &lt;code&gt;std.uuid&lt;/code&gt; で読み取って処理できますが、生成できるのはバージョン3、4、および5のUUIDだけです。</target>
        </trans-unit>
        <trans-unit id="502d87114b09889db456bdf9177fc6f3f3031b7f" translate="yes" xml:space="preserve">
          <source>All of these functions come in two varieties: one takes a target element, where the range will be stripped as long as this element can be found. The other takes a lambda predicate, where the range will be stripped as long as the predicate returns true.</source>
          <target state="translated">これらの関数はすべて2種類あります:1つは対象の要素を取り、この要素が見つかる限り範囲は取り除かれます。もう一つはラムダ述語を取り、述語が真を返す限り範囲は削除されます。</target>
        </trans-unit>
        <trans-unit id="821e98543b08c50cacab703f8d367d6710ccef75" translate="yes" xml:space="preserve">
          <source>All other BSDs</source>
          <target state="translated">他のすべてのBSD</target>
        </trans-unit>
        <trans-unit id="525589d86507196876f47dbab5c78a69ecfdd718" translate="yes" xml:space="preserve">
          <source>All other cases of aliasing are considered unsafe.</source>
          <target state="translated">他のすべてのエイリアシングのケースは、安全ではないと考えられています。</target>
        </trans-unit>
        <trans-unit id="cd68fd410f45079b0d7aa364b641219999200191" translate="yes" xml:space="preserve">
          <source>All possible error codes from all sorts of curl functions. Future versions may return other values, stay prepared.</source>
          <target state="translated">あらゆる種類の curl 関数から考えられるすべてのエラーコード。将来のバージョンでは他の値を返すかもしれません。</target>
        </trans-unit>
        <trans-unit id="136fb65faf8ab2a2cf368736fd6aeb99f8c344fd" translate="yes" xml:space="preserve">
          <source>All possible options</source>
          <target state="translated">すべての可能なオプション</target>
        </trans-unit>
        <trans-unit id="b813b3d5035d2aa3a990bcb3215de8f25be6e30e" translate="yes" xml:space="preserve">
          <source>All primitives listed operate on Unicode characters and sets of characters. For functions which operate on ASCII characters and ignore Unicode &lt;a href=&quot;#Character&quot;&gt;characters&lt;/a&gt;, see &lt;a href=&quot;std_ascii&quot;&gt;&lt;code&gt;std.ascii&lt;/code&gt;&lt;/a&gt;. For definitions of Unicode &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt;, &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; and other terms used throughout this module see the &lt;a href=&quot;#Terminology&quot;&gt;terminology&lt;/a&gt; section below.</source>
          <target state="translated">リストされているすべてのプリミティブは、Unicode文字および文字セットで動作します。ASCII文字を操作し、Unicode &lt;a href=&quot;#Character&quot;&gt;文字&lt;/a&gt;を無視する関数については、&lt;a href=&quot;std_ascii&quot;&gt; &lt;code&gt;std.ascii&lt;/code&gt; を&lt;/a&gt;参照してください。このモジュール全体で使用されるUnicode &lt;a href=&quot;#Character&quot;&gt;文字&lt;/a&gt;、&lt;a href=&quot;#Code%20point&quot;&gt;コードポイント&lt;/a&gt;、およびその他の用語の定義については、以下の&lt;a href=&quot;#Terminology&quot;&gt;用語&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6c8a2e2c452533012af5af53a5f2117564ba54d2" translate="yes" xml:space="preserve">
          <source>All programs have to deal with errors. Errors are unexpected conditions that are not part of the normal operation of a program. Examples of common errors are:</source>
          <target state="translated">すべてのプログラムはエラーに対処しなければなりません。エラーとは、プログラムの正常な動作の一部ではない予期せぬ状態のことです。一般的なエラーの例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="c20c0313c3654dcf38a230e6a0ac8e51f952d657" translate="yes" xml:space="preserve">
          <source>All reading from &lt;code&gt;stdin&lt;/code&gt; automatically locks the file globally, and will cause all other threads calling &lt;code&gt;read&lt;/code&gt; to wait until the lock is released.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; からの読み取りはすべて、ファイルを自動的にグローバルにロックし、 &lt;code&gt;read&lt;/code&gt; を呼び出す他のすべてのスレッドがロックが解放されるまで待機します。</target>
        </trans-unit>
        <trans-unit id="f9df267cdc9ad11425ae578a49e8b8411f22249c" translate="yes" xml:space="preserve">
          <source>All sections for the module are combined.</source>
          <target state="translated">モジュールのすべてのセクションが結合されています。</target>
        </trans-unit>
        <trans-unit id="4fe809ffea83f91ee87860fb09bce9898a2380b1" translate="yes" xml:space="preserve">
          <source>All static fields in this struct represents a specific predefined symbol.</source>
          <target state="translated">この構造体のすべての静的フィールドは、特定の定義済みシンボルを表します。</target>
        </trans-unit>
        <trans-unit id="9dfd9dd3cf17f876b6f44df68cf586485cbe563b" translate="yes" xml:space="preserve">
          <source>All stats of the form &lt;code&gt;numXxx&lt;/code&gt; record counts of events occurring, such as calls to functions and specific results. The stats of the form &lt;code&gt;bytesXxx&lt;/code&gt; collect cumulative sizes.</source>
          <target state="translated">&lt;code&gt;numXxx&lt;/code&gt; 形式のすべての統計は、関数の呼び出しや特定の結果など、発生したイベントの数を記録します。 &lt;code&gt;bytesXxx&lt;/code&gt; の形式の統計は、累積サイズを収集します。</target>
        </trans-unit>
        <trans-unit id="3aeac5247fab94056a2fcd9ae2ebfe7ce2a4741c" translate="yes" xml:space="preserve">
          <source>All steps combined look like this:</source>
          <target state="translated">すべてのステップを組み合わせると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="73e1d82508097f721dc5f94481ae54c7c96a5506" translate="yes" xml:space="preserve">
          <source>All symbols from a publicly imported module are also aliased in the importing module. Thus in the above example if C contains the name foo, it will be accessible in A as &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;B.foo&lt;/code&gt; and &lt;code&gt;C.foo&lt;/code&gt;.</source>
          <target state="translated">パブリックにインポートされたモジュールからのすべてのシンボルは、インポートモジュールでもエイリアスされます。したがって、上記の例でCにfooという名前が含まれている場合、Aでは &lt;code&gt;foo&lt;/code&gt; 、 &lt;code&gt;B.foo&lt;/code&gt; 、および &lt;code&gt;C.foo&lt;/code&gt; としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a81b5e33e5d9b6fed4225267f1379628464786b1" translate="yes" xml:space="preserve">
          <source>All symbols within &lt;code&gt;symbol&lt;/code&gt; that have the given UDA &lt;code&gt;attribute&lt;/code&gt;.</source>
          <target state="translated">内のすべてのシンボル &lt;code&gt;symbol&lt;/code&gt; 与えられたUDAの持つ &lt;code&gt;attribute&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20ecb571750aace44511ab3cf936eb97eef093c5" translate="yes" xml:space="preserve">
          <source>All the binary operators work in their assignment version</source>
          <target state="translated">すべてのバイナリ演算子は、その代入バージョンで動作します。</target>
        </trans-unit>
        <trans-unit id="5c26e98bb72bebc86ceca75d9e5603b6bdd8c8eb" translate="yes" xml:space="preserve">
          <source>All the members of the archive can be accessed with a foreach loop:</source>
          <target state="translated">アーカイブの全メンバーにforeachループでアクセスできます。</target>
        </trans-unit>
        <trans-unit id="dd0de63de936b7274b430f7f3c7c61353d4b4b65" translate="yes" xml:space="preserve">
          <source>All the properties of the &lt;a href=&quot;declaration#VectorBaseType&quot;&gt;&lt;i&gt;VectorBaseType&lt;/i&gt;&lt;/a&gt; work.</source>
          <target state="translated">&lt;a href=&quot;declaration#VectorBaseType&quot;&gt;&lt;i&gt;VectorBaseTypeの&lt;/i&gt;&lt;/a&gt;すべてのプロパティが機能します。</target>
        </trans-unit>
        <trans-unit id="97efa5a26947938bb903257f0409a1c26a039cd2" translate="yes" xml:space="preserve">
          <source>All the static constructors for a module are aggregated into a single function, and a pointer to that function is inserted into the ctor member of the ModuleInfo instance for that module.</source>
          <target state="translated">モジュールのすべての静的コンストラクタは 1 つの関数に集約され、その関数へのポインタがそのモジュールの ModuleInfo インスタンスの ctor メンバに挿入されます。</target>
        </trans-unit>
        <trans-unit id="2b0681a718887d97ad7ee984aa0510556a949ead" translate="yes" xml:space="preserve">
          <source>All the static denstructors for a module are aggregated into a single function, and a pointer to that function is inserted into the dtor member of the ModuleInfo instance for that module.</source>
          <target state="translated">モジュールのすべてのスタティック・デンストラクタは 1 つの関数に集約され、その関数へのポインタがそのモジュールの ModuleInfo インスタンスの dtor メンバに挿入されます。</target>
        </trans-unit>
        <trans-unit id="15236deff34ae39943ca5f31e8d24cf0e03855cc" translate="yes" xml:space="preserve">
          <source>All the unit tests for a module are aggregated into a single function, and a pointer to that function is inserted into the unitTest member of the ModuleInfo instance for that module.</source>
          <target state="translated">モジュールのすべてのユニットテストは 1 つの関数に集約され、その関数へのポインタがそのモジュールの ModuleInfo インスタンスの unitTest メンバに挿入されます。</target>
        </trans-unit>
        <trans-unit id="f949da684991e66b76cb0131b05508ca1cb634cb" translate="yes" xml:space="preserve">
          <source>All those destructors freeing memory can become significant when objects are allocated on the stack. For each one, some mechanism must be established so that if an exception happens, the destructors all get called in each frame to release any memory they hold. If the destructors become irrelevant, then there's no need to set up special stack frames to handle exceptions, and the code runs faster.</source>
          <target state="translated">これらのデストラクタがメモリを解放することは、オブジェクトがスタック上に確保されたときに重要になることがあります。それぞれのデストラクタについて、例外が発生した場合には、それぞれのフレームですべてのデストラクタが呼び出されて、保持しているメモリを解放するようなメカニズムを確立しなければなりません。デストラクタが無関係になれば、例外を処理するために特別なスタックフレームを設定する必要はなく、コードはより速く実行されます。</target>
        </trans-unit>
        <trans-unit id="c628520ddca4f269f1a2425393dd896bb6ecd64f" translate="yes" xml:space="preserve">
          <source>All thrown objects must inherit from Throwable. Class &lt;code&gt;Exception&lt;/code&gt;, which derives from this class, represents the category of thrown objects that are safe to catch and handle. In principle, one should not catch Throwable objects that are not derived from &lt;code&gt;Exception&lt;/code&gt;, as they represent unrecoverable runtime errors. Certain runtime guarantees may fail to hold when these errors are thrown, making it unsafe to continue execution after catching them.</source>
          <target state="translated">スローされたすべてのオブジェクトは、Throwableを継承する必要があります。クラスの &lt;code&gt;Exception&lt;/code&gt; このクラスから派生し、キャッチやハンドルに安全で投げられたオブジェクトのカテゴリを表します。原則として、 &lt;code&gt;Exception&lt;/code&gt; から派生していないThrowableオブジェクトは、回復不可能なランタイムエラーを表すため、キャッチしないでください。これらのエラーがスローされると、特定の実行時保証が保持に失敗し、エラーをキャッチした後で実行を継続することが危険になる場合があります。</target>
        </trans-unit>
        <trans-unit id="d57ed726e64ba51ae7c15a7975e045226435204a" translate="yes" xml:space="preserve">
          <source>All writing to &lt;code&gt;stderr&lt;/code&gt; automatically locks the file globally, and will cause all other threads calling &lt;code&gt;write&lt;/code&gt; to wait until the lock is released.</source>
          <target state="translated">&lt;code&gt;stderr&lt;/code&gt; への書き込みはすべて自動的にファイルをグローバルにロックし、 &lt;code&gt;write&lt;/code&gt; を呼び出す他のすべてのスレッドはロックが解放されるまで待機します。</target>
        </trans-unit>
        <trans-unit id="645f93cabf6576decf07a138ca4abf26edcd1dfb" translate="yes" xml:space="preserve">
          <source>All writing to &lt;code&gt;stdout&lt;/code&gt; automatically locks the file globally, and will cause all other threads calling &lt;code&gt;write&lt;/code&gt; to wait until the lock is released.</source>
          <target state="translated">&lt;code&gt;stdout&lt;/code&gt; への書き込みはすべて自動的にファイルをグローバルにロックし、 &lt;code&gt;write&lt;/code&gt; を呼び出す他のすべてのスレッドはロックが解除されるまで待機します。</target>
        </trans-unit>
        <trans-unit id="1b093a504d859edb011aa4c10e43272d307e7616" translate="yes" xml:space="preserve">
          <source>Allocate &lt;code&gt;n&lt;/code&gt; bytes of memory. If &lt;code&gt;n&lt;/code&gt; is eligible for freelist and the freelist is not empty, pops the memory off the free list. In all other cases, uses the parent allocator.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; バイトのメモリを割り当てます。場合は &lt;code&gt;n&lt;/code&gt; 空きリストの対象となり、空きリストが空でない、空きリストオフメモリをポップ。その他の場合はすべて、親アロケータを使用します。</target>
        </trans-unit>
        <trans-unit id="cb204135b1e21acae9320219240e8e87e6f65b6f" translate="yes" xml:space="preserve">
          <source>Allocate a block of size &lt;code&gt;s&lt;/code&gt; with alignment &lt;code&gt;a&lt;/code&gt;. First tries to allocate from the existing list of already-created allocators. If neither can satisfy the request, creates a new allocator by calling &lt;code&gt;make(s + a - 1)&lt;/code&gt; and delegates the request to it. However, if the allocation fresh off a newly created allocator fails, subsequent calls to &lt;code&gt;alignedAllocate&lt;/code&gt; will not cause more calls to &lt;code&gt;make&lt;/code&gt;.</source>
          <target state="translated">サイズ &lt;code&gt;s&lt;/code&gt; のブロックを配置 &lt;code&gt;a&lt;/code&gt; で割り当てます。最初に、すでに作成されているアロケータの既存のリストから割り当てを試みます。どちらも要求を満たすことができない場合は、 &lt;code&gt;make(s + a - 1)&lt;/code&gt; を呼び出して新しいアロケーターを作成し、それに要求を委任します。新しく作成されたアロケータオフ割り当て新鮮に障害が発生した場合は、後続の呼び出し &lt;code&gt;alignedAllocate&lt;/code&gt; は、より多くの呼び出しがすることはありません &lt;code&gt;make&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1b869869fcf623a87d8a6cf55943a9b074f4092" translate="yes" xml:space="preserve">
          <source>Allocate a block of size &lt;code&gt;s&lt;/code&gt;. First tries to allocate from the existing list of already-created allocators. If neither can satisfy the request, creates a new allocator by calling &lt;code&gt;make(s)&lt;/code&gt; and delegates the request to it. However, if the allocation fresh off a newly created allocator fails, subsequent calls to &lt;code&gt;allocate&lt;/code&gt; will not cause more calls to &lt;code&gt; make&lt;/code&gt;.</source>
          <target state="translated">サイズ &lt;code&gt;s&lt;/code&gt; のブロックを割り当てます。最初に、すでに作成されているアロケータの既存のリストから割り当てを試みます。どちらも要求を満たすことができない場合は、 &lt;code&gt;make(s)&lt;/code&gt; を呼び出して新しいアロケーターを作成し、それに要求を委任します。ただし、新しく作成されたアロケータからの新しい割り当てが失敗した場合は、後続の &lt;code&gt;allocate&lt;/code&gt; の呼び出しによって、それ以上 &lt;code&gt; make&lt;/code&gt; が呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="4e3ac4a0a39edc956251dca78db0c555e763550a" translate="yes" xml:space="preserve">
          <source>Allocate a new array of length elements. ti is the type of the resulting array, or pointer to element. (For when the array is initialized to 0)</source>
          <target state="translated">長さの要素を持つ新しい配列を確保します.(配列が0に初期化されている場合)</target>
        </trans-unit>
        <trans-unit id="04a5579ec9d9ea7bf8fd9194782b75e61153d45c" translate="yes" xml:space="preserve">
          <source>Allocate a new uninitialized array of length elements. ti is the type of the resulting array, or pointer to element.</source>
          <target state="translated">ti は,結果として得られる配列の型,あるいは要素へのポインタです.</target>
        </trans-unit>
        <trans-unit id="4addc8952362210dbd4d01899c0184f19033db2f" translate="yes" xml:space="preserve">
          <source>Allocate a new variable via xmalloc that can be added to the global environment. The resulting string will be null-terminated immediately after the end of the array.</source>
          <target state="translated">グローバル環境に追加できる新しい変数を xmalloc 経由で割り当てます。結果として得られる文字列は、配列の終了直後にヌル終端になります。</target>
        </trans-unit>
        <trans-unit id="f5ae03eb0a1a6cb0d88d14fb5a3b4d6ad0ebf542" translate="yes" xml:space="preserve">
          <source>Allocate an exception of type &lt;code&gt;ci&lt;/code&gt; from the exception pool. It has the same interface as &lt;code&gt;rt.lifetime._d_newclass()&lt;/code&gt;. The class type must be Throwable or derived from it, and cannot be a COM or C++ class. The compiler must enforce this.</source>
          <target state="translated">例外プールからタイプ &lt;code&gt;ci&lt;/code&gt; の例外を割り当てます。 &lt;code&gt;rt.lifetime._d_newclass()&lt;/code&gt; と同じインターフェースを持っています。クラスタイプは、Throwableまたはその派生クラスである必要があり、COMまたはC ++クラスにすることはできません。コンパイラはこれを強制する必要があります。</target>
        </trans-unit>
        <trans-unit id="b15ff176dde037c8eec0c32aab20116e3b618dd6" translate="yes" xml:space="preserve">
          <source>Allocate an instance of the class, &lt;code&gt;NSString&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;NSString&lt;/code&gt; のインスタンスを割り当てます。</target>
        </trans-unit>
        <trans-unit id="74612396c30d0c63cc046cd3b14fa2fd0d0f12bd" translate="yes" xml:space="preserve">
          <source>Allocate an uninitialized non-array item. This is an optimization to avoid things needed for arrays like the _arrayPad(size).</source>
          <target state="translated">初期化されていない配列以外の項目を割り当てます。これは、_arrayPad(size)のような配列に必要なものを避けるための最適化です。</target>
        </trans-unit>
        <trans-unit id="690211495bdf02fe74267eebc1c68112cdf01cf1" translate="yes" xml:space="preserve">
          <source>Allocate and fill in ctors[] and tlsctors[]. Modules are inserted into the arrays in the order in which the constructors need to be run.</source>
          <target state="translated">ctors[]とtlsctors[]を割り当てて埋めます。モジュールは、コンストラクタの実行が必要な順番で配列に挿入されます。</target>
        </trans-unit>
        <trans-unit id="546305171dde7bde4a1c7bbf4dee4fc391ed9224" translate="yes" xml:space="preserve">
          <source>Allocate and initialize an ExceptionHeader.</source>
          <target state="translated">ExceptionHeaderを割り当てて初期化します。</target>
        </trans-unit>
        <trans-unit id="152c2032835fcd0df6e709b46cbe62f6b6cd7102" translate="yes" xml:space="preserve">
          <source>Allocate data from the caller's stack frame. This is a 'magic' function that needs help from the compiler to work right, do not change its name, do not call it from other compilers.</source>
          <target state="translated">呼び出し元のスタックフレームからデータを割り当てます。これは正しく動作するためにはコンパイラの助けが必要な「魔法の」関数です。</target>
        </trans-unit>
        <trans-unit id="7bcab4c37e278570affa71300f593890c5082f0a" translate="yes" xml:space="preserve">
          <source>Allocate the array, rely on the caller to do the initialization of the array.</source>
          <target state="translated">配列を確保し、呼び出し元に依存して配列の初期化を行います。</target>
        </trans-unit>
        <trans-unit id="ae51d44518dcf6c4431053abbfb74d465f5558a1" translate="yes" xml:space="preserve">
          <source>Allocated blocks do not hold a size prefix. This is because in D the size information is available in client code at deallocation time.</source>
          <target state="translated">割り当てられたブロックはサイズの接頭辞を保持しません。これは、Dでは、サイズ情報は解放時にクライアントコードで利用可能だからです。</target>
        </trans-unit>
        <trans-unit id="cb1dd4282b618235f704ba742fef6168e8279026" translate="yes" xml:space="preserve">
          <source>Allocates &lt;code&gt;bytes&lt;/code&gt; and returns them, or &lt;code&gt;null&lt;/code&gt; if the region cannot accommodate the request. For efficiency reasons, if &lt;code&gt;bytes == 0&lt;/code&gt; the function returns an empty non-null slice.</source>
          <target state="translated">&lt;code&gt;bytes&lt;/code&gt; を割り当ててバイトを返すか、領域が要求に対応できない場合は &lt;code&gt;null&lt;/code&gt; を返します。効率上の理由から、 &lt;code&gt;bytes == 0&lt;/code&gt; の場合、関数は空の非nullスライスを返します。</target>
        </trans-unit>
        <trans-unit id="dd1ff9ea9b54d782b4a1fa925149d8ee9eefd67e" translate="yes" xml:space="preserve">
          <source>Allocates &lt;code&gt;n&lt;/code&gt; bytes of memory aligned at alignment &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">アライメント &lt;code&gt;a&lt;/code&gt; でアライメントされた &lt;code&gt;n&lt;/code&gt; バイトのメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="a919f47db37669617faab9ea6d5ad732011e85df" translate="yes" xml:space="preserve">
          <source>Allocates &lt;code&gt;n&lt;/code&gt; bytes of memory with specified alignment &lt;code&gt;a&lt;/code&gt;. Implementations that do not support this primitive should always return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">指定された配置 &lt;code&gt;a&lt;/code&gt; で &lt;code&gt;n&lt;/code&gt; バイトのメモリを割り当てます。このプリミティブをサポートしない実装は、常に &lt;code&gt;null&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="3556f444ee3e01e4ff6b4c12964c1a5b8dc14fca" translate="yes" xml:space="preserve">
          <source>Allocates &lt;code&gt;n&lt;/code&gt; bytes of memory.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; バイトのメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="571906ff58f2c345c55fece0c6b4680a0d168821" translate="yes" xml:space="preserve">
          <source>Allocates &lt;code&gt;n&lt;/code&gt; bytes of memory. First consults the free tree, and returns from it if a suitably sized block is found. Otherwise, the parent allocator is tried. If allocation from the parent succeeds, the allocated block is returned. Otherwise, the free tree tries an alternate strategy: If &lt;code&gt; ParentAllocator&lt;/code&gt; defines &lt;code&gt;deallocate&lt;/code&gt;, &lt;code&gt;FreeTree&lt;/code&gt; releases all of its contents and tries again.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; バイトのメモリを割り当てます。最初にフリーツリーを調べ、適切なサイズのブロックが見つかった場合はそこから戻ります。それ以外の場合は、親アロケーターが試行されます。親からの割り当てが成功すると、割り当てられたブロックが返されます。それ以外の場合、フリーツリーは別の方法を試み &lt;code&gt;deallocate&lt;/code&gt; &lt;code&gt; ParentAllocator&lt;/code&gt; 定義している場合、 &lt;code&gt;FreeTree&lt;/code&gt; はその内容をすべて解放して、再試行します。</target>
        </trans-unit>
        <trans-unit id="e2b3a385e46b9ac83e94af9618c4d1619a61f273" translate="yes" xml:space="preserve">
          <source>Allocates &lt;code&gt;n&lt;/code&gt; bytes of memory. The allocation is served by atomically incrementing a pointer which keeps track of the current used space.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; バイトのメモリを割り当てます。割り当ては、現在使用されているスペースを追跡するポインタをアトミックにインクリメントすることによって提供されます。</target>
        </trans-unit>
        <trans-unit id="545e4bfeb16f8477990d8181bb9178281843dd98" translate="yes" xml:space="preserve">
          <source>Allocates &lt;code&gt;n&lt;/code&gt; bytes of memory. The shortest path involves an alignment adjustment (if &lt;code&gt;alignment &amp;gt; 1&lt;/code&gt;), an increment, and a comparison.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; バイトのメモリを割り当てます。最短経路には、アライメント調整（ &lt;code&gt;alignment &amp;gt; 1&lt;/code&gt; 場合）、増分、および比較が含まれます。</target>
        </trans-unit>
        <trans-unit id="2936608c36ed9f5713be515def45d248186393f0" translate="yes" xml:space="preserve">
          <source>Allocates &lt;code&gt;n&lt;/code&gt; bytes. Allocation searches the list of available blocks until a free block with &lt;code&gt;n&lt;/code&gt; or more bytes is found (first fit strategy). The block is split (if larger) and returned.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; バイトを割り当てます。割り当ては、 &lt;code&gt;n&lt;/code&gt; バイト以上の空きブロックが見つかるまで、利用可能なブロックのリストを検索します（最初の適合戦略）。ブロックは分割され（大きい場合）、返されます。</target>
        </trans-unit>
        <trans-unit id="b627f8a5a1e78d575daa227732620caf9398d99d" translate="yes" xml:space="preserve">
          <source>Allocates &lt;code&gt;s&lt;/code&gt; bytes of memory and returns it, or &lt;code&gt;null&lt;/code&gt; if memory could not be allocated.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; バイトのメモリを割り当てて返します。メモリを割り当てることができなかった場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="955f82f1f9371d9a1a5f44a9d6884b1bf06878cf" translate="yes" xml:space="preserve">
          <source>Allocates a &lt;code&gt;class&lt;/code&gt; object right inside the current scope, therefore avoiding the overhead of &lt;code&gt;new&lt;/code&gt;. This facility is unsafe; it is the responsibility of the user to not escape a reference to the object outside the scope.</source>
          <target state="translated">現在のスコープ内に &lt;code&gt;class&lt;/code&gt; オブジェクトを割り当てるため、 &lt;code&gt;new&lt;/code&gt; のオーバーヘッドを回避できます。この機能は安全ではありません。スコープ外のオブジェクトへの参照をエスケープしないことは、ユーザーの責任です。</target>
        </trans-unit>
        <trans-unit id="2d0bc107a98ee07d1d72bbabf6107748dcbf6e02" translate="yes" xml:space="preserve">
          <source>Allocates a block with specified alignment &lt;code&gt;a&lt;/code&gt;. The alignment must be a power of 2. If &lt;code&gt;a &amp;lt;= alignment&lt;/code&gt;, function forwards to &lt;code&gt;allocate&lt;/code&gt;. Otherwise, it attempts to overallocate and then adjust the result for proper alignment. In the worst case the slack memory is around two blocks.</source>
          <target state="translated">指定された位置合わせと割り当てブロック &lt;code&gt;a&lt;/code&gt; 。アラインメントは2の累乗でなければなりません。 &lt;code&gt;a &amp;lt;= alignment&lt;/code&gt; 、関数は &lt;code&gt;allocate&lt;/code&gt; 転送します。それ以外の場合は、割り当てを適切に行い、結果を適切な配置に調整します。最悪の場合、スラックメモリは約2ブロックです。</target>
        </trans-unit>
        <trans-unit id="333f797e4d1750e2dc2dd943bcec484cf81e4464" translate="yes" xml:space="preserve">
          <source>Allocates a multidimensional array of elements of type T.</source>
          <target state="translated">T型の要素の多次元配列を割り当てます。</target>
        </trans-unit>
        <trans-unit id="2ef2526b1e1b8c72e2349064073c5f4e36bc9e05" translate="yes" xml:space="preserve">
          <source>Allocates a new array which is identical to &lt;code&gt;s&lt;/code&gt; except that all of its characters are converted to uppercase (by preforming Unicode uppercase mapping). If none of &lt;code&gt;s&lt;/code&gt; characters were affected, then &lt;code&gt;s&lt;/code&gt; itself is returned if &lt;code&gt;s&lt;/code&gt; is a &lt;code&gt;string&lt;/code&gt;-like type.</source>
          <target state="translated">すべての文字が（Unicode大文字マッピングを実行することによって）大文字に変換されることを除いて、 &lt;code&gt;s&lt;/code&gt; と同じである新しい配列を割り当てます。 &lt;code&gt;s&lt;/code&gt; の文字のどれも影響を受けなかった場合、 &lt;code&gt;s&lt;/code&gt; が &lt;code&gt;string&lt;/code&gt; ような型であれば、 &lt;code&gt;s&lt;/code&gt; 自体が返されます。</target>
        </trans-unit>
        <trans-unit id="a5aaa9a811057230aa95580332ee9fece9148d7e" translate="yes" xml:space="preserve">
          <source>Allocates all memory available to this allocator. If the allocator is empty, returns the entire available block of memory. Otherwise, it still performs a best-effort allocation: if there is no fragmentation (e.g. &lt;code&gt;allocate&lt;/code&gt; has been used but not &lt;code&gt;deallocate&lt;/code&gt;), allocates and returns the only available block of memory.</source>
          <target state="translated">このアロケータが利用できるすべてのメモリを割り当てます。アロケータが空の場合、使用可能なメモリブロック全体を返します。それ以外の場合は、引き続きベストエフォートの割り当てを実行します。フラグメント化がない場合（たとえば、 &lt;code&gt;allocate&lt;/code&gt; が使用されているが、割り当て &lt;code&gt;deallocate&lt;/code&gt; されていない場合）、割り当てられ、使用可能なメモリブロックのみが返されます。</target>
        </trans-unit>
        <trans-unit id="affe2fcdb8093269677afa8f01518ff0ce594273" translate="yes" xml:space="preserve">
          <source>Allocates all memory available with this allocator.</source>
          <target state="translated">このアロケータで利用可能なすべてのメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="457c8670d7db9f415c2c631b04bc7df87f7a8ce8" translate="yes" xml:space="preserve">
          <source>Allocates an array and initializes it with copies of the elements of range &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">配列を割り当て、範囲 &lt;code&gt;r&lt;/code&gt; の要素のコピーで初期化します。</target>
        </trans-unit>
        <trans-unit id="e31ee88595be1a4376af43d499352d1f95ed61d8" translate="yes" xml:space="preserve">
          <source>Allocates and returns all memory available to this allocator. Implementations that do not support this primitive should always return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">このアロケータが利用できるすべてのメモリを割り当てて返します。このプリミティブをサポートしない実装は、常に &lt;code&gt;null&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="1a3681eb538dd63a79378153545a077147ef7123" translate="yes" xml:space="preserve">
          <source>Allocates and returns all memory available to this region.</source>
          <target state="translated">この領域で利用可能なすべてのメモリを割り当てて返します。</target>
        </trans-unit>
        <trans-unit id="2b750fd7da093b1e747e05812152ef8c3fccbd77" translate="yes" xml:space="preserve">
          <source>Allocates in coarse-grained quantas, thus improving performance of reallocations by often reallocating in place. The drawback is higher memory consumption because of allocated and unused memory.</source>
          <target state="translated">粗視化されたクオンタで割り当てを行うため、その場で頻繁に再割り当てを行うことで性能を向上させることができる。欠点は、割り当てられたメモリと使われていないメモリのため、メモリ消費量が多くなることです。</target>
        </trans-unit>
        <trans-unit id="70331dfb1a6e6d60011fcc4d4e71ab51d10775b6" translate="yes" xml:space="preserve">
          <source>Allocates memory either off of the free list or from the parent allocator. If &lt;code&gt;n&lt;/code&gt; is within &lt;code&gt;[min, max]&lt;/code&gt; or if the free list is unchecked (&lt;code&gt;minSize == 0 &amp;amp;&amp;amp; maxSize == size_t.max&lt;/code&gt;), then the free list is consulted first. If not empty (hit), the block at the front of the free list is removed from the list and returned. Otherwise (miss), a new block of &lt;code&gt;max&lt;/code&gt; bytes is allocated, truncated to &lt;code&gt;n&lt;/code&gt; bytes, and returned.</source>
          <target state="translated">空きリストから、または親アロケータからメモリを割り当てます。もし &lt;code&gt;n&lt;/code&gt; の範囲内である &lt;code&gt;[min, max]&lt;/code&gt; またはフリーリストが（未チェックである場合 &lt;code&gt;minSize == 0 &amp;amp;&amp;amp; maxSize == size_t.max&lt;/code&gt; ）、次いで、フリーリストが最初に参照されます。空（ヒット）でない場合、フリーリストの先頭にあるブロックがリストから削除され、返されます。それ以外の場合（ミス）、 &lt;code&gt;max&lt;/code&gt; バイトの新しいブロックが割り当てられ、 &lt;code&gt;n&lt;/code&gt; バイトに切り捨てられて返されます。</target>
        </trans-unit>
        <trans-unit id="22f9e74278651d99027c27c713ac855e8ed1e715" translate="yes" xml:space="preserve">
          <source>Allocates memory trying the primary allocator first. If it returns &lt;code&gt; null&lt;/code&gt;, the fallback allocator is tried.</source>
          <target state="translated">最初にプライマリアロケーターを試すメモリを割り当てます。 &lt;code&gt; null&lt;/code&gt; を返す場合、フォールバックアロケータが試行されます。</target>
        </trans-unit>
        <trans-unit id="b925b0b6c371d9f54077bbba76c9a1da1602d6a9" translate="yes" xml:space="preserve">
          <source>Allocates memory. For management it actually allocates extra memory from the parent.</source>
          <target state="translated">メモリを確保します。管理のために、実際には親から余分なメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="575ca88081327e09f680960a4110bc8ba17a9371" translate="yes" xml:space="preserve">
          <source>Allocates memory; use &lt;a href=&quot;#lineSplitter&quot;&gt;&lt;code&gt;lineSplitter&lt;/code&gt;&lt;/a&gt; for an alternative that does not.</source>
          <target state="translated">メモリを割り当てます。そうでない代替方法には&lt;a href=&quot;#lineSplitter&quot;&gt; &lt;code&gt;lineSplitter&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="ee6c6f7e81d98e5543bf32244a9bf50d0d1defcc" translate="yes" xml:space="preserve">
          <source>Allocates s bytes of memory and returns it, or &lt;code&gt;null&lt;/code&gt; if memory could not be allocated. &lt;code&gt;allocateFresh&lt;/code&gt; behaves just like allocate, the only difference being that this always returns unused(fresh) memory. Although there may still be available space in the &lt;code&gt;BitmappedBlock&lt;/code&gt;, &lt;code&gt;allocateFresh&lt;/code&gt; could still return null, because all the available blocks have been previously deallocated.</source>
          <target state="translated">sバイトのメモリを割り当てて返します。メモリを割り当てることができなかった場合は &lt;code&gt;null&lt;/code&gt; を返します。 &lt;code&gt;allocateFresh&lt;/code&gt; はallocateと同じように動作します。唯一の違いは、これは常に未使用の（新鮮な）メモリを返すことです。 &lt;code&gt;BitmappedBlock&lt;/code&gt; にはまだ使用可能なスペースがあるかもしれませんが、すべての使用可能なブロックが以前に割り当て解除されているため、 &lt;code&gt;allocateFresh&lt;/code&gt; は引き続きnullを返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="40d52c59404ae014d74089cf6166317c2d5cca72" translate="yes" xml:space="preserve">
          <source>Allocates s bytes of memory and returns it, or &lt;code&gt;null&lt;/code&gt; if memory could not be allocated. &lt;code&gt;allocateFresh&lt;/code&gt; behaves just like allocate, the only difference being that this always returns unused(fresh) memory. Although there may still be available space in the &lt;code&gt;SharedBitmappedBlock&lt;/code&gt;, &lt;code&gt;allocateFresh&lt;/code&gt; could still return null, because all the available blocks have been previously deallocated.</source>
          <target state="translated">sバイトのメモリを割り当てて返します。メモリを割り当てることができなかった場合は &lt;code&gt;null&lt;/code&gt; を返します。 &lt;code&gt;allocateFresh&lt;/code&gt; はallocateと同じように動作します。唯一の違いは、これは常に未使用の（新鮮な）メモリを返すことです。 &lt;code&gt;SharedBitmappedBlock&lt;/code&gt; にはまだ使用可能なスペースがあるかもしれませんが、すべての使用可能なブロックが以前に割り当て解除されているため、 &lt;code&gt;allocateFresh&lt;/code&gt; は引き続きnullを返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="34562b2c1efcd9772eb4d939efa35b8757f6170e" translate="yes" xml:space="preserve">
          <source>Allocates the requested &lt;code&gt;bytes&lt;/code&gt; of memory with specified &lt;code&gt;alignment&lt;/code&gt;. Directs the call to either one of the &lt;code&gt;buckets&lt;/code&gt; allocators. Defined only if &lt;code&gt;Allocator&lt;/code&gt; defines &lt;code&gt;alignedAllocate&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;alignment&lt;/code&gt; で要求されたメモリの &lt;code&gt;bytes&lt;/code&gt; を割り当てます。呼び出しを &lt;code&gt;buckets&lt;/code&gt; アロケータのいずれかに転送します。場合にのみ、定義された &lt;code&gt;Allocator&lt;/code&gt; 定義し &lt;code&gt;alignedAllocate&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="fc90ab9b460af01883735fa719d7075b6f64fedd" translate="yes" xml:space="preserve">
          <source>Allocating memory for sharing across threads</source>
          <target state="translated">スレッド間で共有するためのメモリの割り当て</target>
        </trans-unit>
        <trans-unit id="a1483392946af2634ec9da37d8a5eacfc7465700" translate="yes" xml:space="preserve">
          <source>Allocation requests are handled on a first-fit basis. Although linear in complexity, allocation is in practice fast because of the compact bookkeeping representation, use of simple and fast bitwise routines, and caching of the first available block position. A known issue with this general approach is fragmentation, partially mitigated by coalescing. Since &lt;code&gt;BitmappedBlock&lt;/code&gt; does not need to maintain the allocated size, freeing memory implicitly coalesces free blocks together. Also, tuning &lt;code&gt;blockSize&lt;/code&gt; has a considerable impact on both internal and external fragmentation.</source>
          <target state="translated">割り振り要求は、最初の適合ベースで処理されます。複雑さは線形ですが、コンパクトな簿記表現、シンプルで高速なビット単位のルーチンの使用、最初に利用可能なブロック位置のキャッシュにより、割り当ては実際には高速です。この一般的なアプローチの既知の問題は断片化であり、合体によって部分的に軽減されます。以来 &lt;code&gt;BitmappedBlock&lt;/code&gt; が割り当てられたサイズを維持する必要はありません、暗黙的にメモリを解放することは一緒に空きブロックを合体させます。また、 &lt;code&gt;blockSize&lt;/code&gt; の調整は、内部と外部の両方の断片化に大きな影響を与えます。</target>
        </trans-unit>
        <trans-unit id="cbc962bc5b83a88a16f2713a98847658123e8258" translate="yes" xml:space="preserve">
          <source>Allocation requests first search the tree for a buffer of suitable size deallocated in the past. If a match is found, the node is removed from the tree and the memory is returned. Otherwise, the allocation is directed to &lt;code&gt;ParentAllocator&lt;/code&gt;. If at this point &lt;code&gt;ParentAllocator&lt;/code&gt; also fails to allocate, &lt;code&gt;FreeTree&lt;/code&gt; frees everything and then tries the parent allocator again.</source>
          <target state="translated">割り当て要求は、まず、過去に割り当て解除された適切なサイズのバッファをツリーで検索します。一致が見つかると、ノードがツリーから削除され、メモリが返されます。それ以外の場合、割り当ては &lt;code&gt;ParentAllocator&lt;/code&gt; に送信されます。この時点で &lt;code&gt;ParentAllocator&lt;/code&gt; も割り当てに失敗した場合、 &lt;code&gt;FreeTree&lt;/code&gt; はすべてを解放してから、親アロケーターを再試行します。</target>
        </trans-unit>
        <trans-unit id="af0e205e8505bb23310602de5dd4be9af5c6a6d9" translate="yes" xml:space="preserve">
          <source>Allocation-related flags dictated by type characteristics. &lt;code&gt;TypedAllocator&lt;/code&gt; deduces these flags from the type being allocated and uses the appropriate allocator accordingly.</source>
          <target state="translated">タイプの特性によって指示される割り当て関連のフラグ。 &lt;code&gt;TypedAllocator&lt;/code&gt; は、割り当てられている型からこれらのフラグを推定し、それに応じて適切なアロケータを使用します。</target>
        </trans-unit>
        <trans-unit id="fdc44965c2d6c8c8d7c21352e9d968a0c8014291" translate="yes" xml:space="preserve">
          <source>Allocations for sizes smaller than &lt;code&gt;min&lt;/code&gt; or larger than &lt;code&gt;max&lt;/code&gt; are illegal for &lt;code&gt;Bucketizer&lt;/code&gt;. To handle them separately, &lt;code&gt;Segregator&lt;/code&gt; may be of use.</source>
          <target state="translated">&lt;code&gt;Bucketizer&lt;/code&gt; サイズが &lt;code&gt;min&lt;/code&gt; よりも小さいか、 &lt;code&gt;max&lt;/code&gt; よりも大きい場合、割り当ては無効です。それらを個別に処理するために、 &lt;code&gt;Segregator&lt;/code&gt; が役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="cbf9e75065cafb419b19fb5a13dddefb2735eaa6" translate="yes" xml:space="preserve">
          <source>Allocator</source>
          <target state="translated">Allocator</target>
        </trans-unit>
        <trans-unit id="e08b1899abf4a5d12c1969cc846a1ce148364a1f" translate="yes" xml:space="preserve">
          <source>Allocator (currently defined only for Posix and Windows) using &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;mmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://google.com/search?btnI=I%27m+Feeling+Lucky&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;q=munmap&quot;&gt;munmap&lt;/a&gt;&lt;/code&gt; directly (or their Windows equivalents). There is no additional structure: each call to &lt;code&gt;allocate(s)&lt;/code&gt; issues a call to &lt;code&gt;mmap(null, s, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0)&lt;/code&gt;, and each call to &lt;code&gt;deallocate(b)&lt;/code&gt; issues &lt;code&gt;munmap(b.ptr, b.length)&lt;/code&gt;. So &lt;code&gt;MmapAllocator&lt;/code&gt; is usually intended for allocating large chunks to be managed by fine-granular allocators.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;mmap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;https://google.com/search?btnI=I%27m+Feeling+Lucky&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;q=munmap&quot;&gt;munmap&lt;/a&gt;&lt;/code&gt; を直接使用する（現在はPosixとWindowsでのみ定義されている）アロケータ（またはそれらに相当するWindows）。追加の構造がありません：各呼び出しはし &lt;code&gt;allocate(s)&lt;/code&gt; 問題へのコール &lt;code&gt;mmap(null, s, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0)&lt;/code&gt; 、およびへの各呼び出し &lt;code&gt;deallocate(b)&lt;/code&gt; 問題 &lt;code&gt;munmap(b.ptr, b.length)&lt;/code&gt; 。したがって、 &lt;code&gt;MmapAllocator&lt;/code&gt; は通常、細かいアロケータによって管理される大きなチャンクを割り当てることを目的としています。</target>
        </trans-unit>
        <trans-unit id="3353234ce0124f8910aaa38caffee20b71a4f80f" translate="yes" xml:space="preserve">
          <source>Allocator &lt;code&gt;alloc&lt;/code&gt;</source>
          <target state="translated">アロケーターの &lt;code&gt;alloc&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1e6a4ec6000f9e0b7f661da3b6a91cb8ae29132" translate="yes" xml:space="preserve">
          <source>Allocator &lt;strong id=&quot;_parent&quot;&gt;_parent&lt;/strong&gt;;</source>
          <target state="translated">アロケータ&lt;strong id=&quot;_parent&quot;&gt;_parent&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="d69c3c0130d6d25953b8d2d9b80b986133e83dd0" translate="yes" xml:space="preserve">
          <source>Allocator &lt;strong id=&quot;parent&quot;&gt;parent&lt;/strong&gt;;</source>
          <target state="translated">アロケータの&lt;strong id=&quot;parent&quot;&gt;親&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="cadfd13af30b7dd1dff50bada6dc1d562f201deb" translate="yes" xml:space="preserve">
          <source>Allocator API.</source>
          <target state="translated">アロケータAPI。</target>
        </trans-unit>
        <trans-unit id="675049c41d27d311eac5a89bd2e072dfd75d4167" translate="yes" xml:space="preserve">
          <source>Allocator backed by &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sbrk&quot;&gt;sbrk&lt;/a&gt;&lt;/code&gt; for Posix systems. Due to the fact that &lt;code&gt;sbrk&lt;/code&gt; is not thread-safe &lt;a href=&quot;http://lifecs.likai.org/2010/02/sbrk-is-not-thread-safe.html&quot;&gt;by design&lt;/a&gt;, &lt;code&gt;SbrkRegion&lt;/code&gt; uses a mutex internally. This implies that uncontrolled calls to &lt;code&gt;brk&lt;/code&gt; and &lt;code&gt;sbrk&lt;/code&gt; may affect the workings of &lt;code&gt;SbrkRegion&lt;/code&gt; adversely.</source>
          <target state="translated">Posixシステム用の &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sbrk&quot;&gt;sbrk&lt;/a&gt;&lt;/code&gt; が支援するアロケータ。事実によるもの &lt;code&gt;sbrk&lt;/code&gt; のは、スレッドセーフにされていない&lt;a href=&quot;http://lifecs.likai.org/2010/02/sbrk-is-not-thread-safe.html&quot;&gt;設計によって&lt;/a&gt;、 &lt;code&gt;SbrkRegion&lt;/code&gt; は内部的にmutexを使用しています。これは、 &lt;code&gt;brk&lt;/code&gt; および &lt;code&gt;sbrk&lt;/code&gt; への制御されていない呼び出しが &lt;code&gt;SbrkRegion&lt;/code&gt; の動作に悪影響を与える可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="513b82ce13f2dc2be45bd311fabfc658467c99b2" translate="yes" xml:space="preserve">
          <source>Allocator primitives.</source>
          <target state="translated">アロケータ・プリミティブ。</target>
        </trans-unit>
        <trans-unit id="68a0d53209b9f9a4b14c3a76e7ad158b2dca28b9" translate="yes" xml:space="preserve">
          <source>Allocator similar to &lt;code&gt;FreeList&lt;/code&gt; that uses a binary search tree to adaptively store not one, but many free lists.</source>
          <target state="translated">バイナリ検索ツリーを使用して1つではなく多くの空きリストを適応的に格納する &lt;code&gt;FreeList&lt;/code&gt; に似たアロケータ。</target>
        </trans-unit>
        <trans-unit id="d0cc49cc2f10e3277f742185d09b671e886851a2" translate="yes" xml:space="preserve">
          <source>Allocator that adds some extra data before (of type &lt;code&gt;Prefix&lt;/code&gt;) and/or after (of type &lt;code&gt;Suffix&lt;/code&gt;) any allocation made with its parent allocator. This is useful for uses where additional allocation-related information is needed, such as mutexes, reference counts, or walls for debugging memory corruption errors.</source>
          <target state="translated">親アロケーターで行われた割り当ての前（タイプ &lt;code&gt;Prefix&lt;/code&gt; ）および/または後（タイプ &lt;code&gt;Suffix&lt;/code&gt; ）に追加データを追加するアロケーター。これは、ミューテックス、参照カウント、メモリ破損エラーをデバッグするための壁など、追加の割り当て関連情報が必要な用途に役立ちます。</target>
        </trans-unit>
        <trans-unit id="506fd6ecc5980e2993d9b94a51762bcf43b76fb6" translate="yes" xml:space="preserve">
          <source>Allocator that allows and manages allocating extra prefix and/or a suffix bytes for each block allocated.</source>
          <target state="translated">割り当てられたブロックごとに、余分なプレフィックスやサフィックスのバイトの割り当てを許可し、管理するアロケータ。</target>
        </trans-unit>
        <trans-unit id="bfd65030e4aadae8e36c3b33912522b7bfee3263" translate="yes" xml:space="preserve">
          <source>Allocator that collects extra data about allocations. Since each piece of information adds size and time overhead, statistics can be individually enabled or disabled through compile-time &lt;code&gt;flags&lt;/code&gt;.</source>
          <target state="translated">割り当てに関する追加データを収集するアロケータ。各情報にはサイズと時間のオーバーヘッドが加わるため、コンパイル時 &lt;code&gt;flags&lt;/code&gt; を使用して統計を個別に有効または無効にできます。</target>
        </trans-unit>
        <trans-unit id="bc0af3b6f564e9ca229952d612a3550f66061e3a" translate="yes" xml:space="preserve">
          <source>Allocator that collects useful statistics about allocations, both global and per calling point. The statistics collected can be configured statically by choosing combinations of &lt;code&gt;Options&lt;/code&gt; appropriately.</source>
          <target state="translated">グローバルおよび呼び出しポイントごとの両方で、割り当てに関する有用な統計を収集するアロケータ。収集される統計は、 &lt;code&gt;Options&lt;/code&gt; 組み合わせを適切に選択することで静的に構成できます。</target>
        </trans-unit>
        <trans-unit id="14e1947892b24d554e92c80dc9a3054c6f2dbace" translate="yes" xml:space="preserve">
          <source>Allocator that combines two other allocators - primary and fallback. Allocation requests are first tried with primary, and upon failure are passed to the fallback. Useful for small and fast allocators fronting general-purpose ones.</source>
          <target state="translated">プライマリとフォールバックの 2 つのアロケータを組み合わせたアロケータ。割り当て要求は最初にプライマリで試行され、失敗した場合はフォールバックに渡されます。汎用アロケータの前にある小型で高速なアロケータに便利です。</target>
        </trans-unit>
        <trans-unit id="82ae157e1fe07caf7d37c5484581461f1d9f6744" translate="yes" xml:space="preserve">
          <source>Allocator that implements a &lt;a href=&quot;http://wikipedia.org/wiki/Free_list&quot;&gt;free list&lt;/a&gt; on top of any other allocator. The preferred size, tolerance, and maximum elements are configurable at compile- and run time.</source>
          <target state="translated">他のアロケーターの上に&lt;a href=&quot;http://wikipedia.org/wiki/Free_list&quot;&gt;フリーリスト&lt;/a&gt;を実装するアロケーター。推奨サイズ、許容値、最大要素は、コンパイル時および実行時に構成可能です。</target>
        </trans-unit>
        <trans-unit id="92d633faca70f593d2eefae1500ce778644a707a" translate="yes" xml:space="preserve">
          <source>Allocator that uses stack allocation for up to &lt;code&gt;stackSize&lt;/code&gt; bytes and then falls back to &lt;code&gt;Allocator&lt;/code&gt;. Defined as:</source>
          <target state="translated">最大 &lt;code&gt;stackSize&lt;/code&gt; バイトのスタック割り当てを使用し、その後Allocatorにフォールバックする &lt;code&gt;Allocator&lt;/code&gt; 。として定義：</target>
        </trans-unit>
        <trans-unit id="277f2e388687399a48875d2b4c26cd068e3208fa" translate="yes" xml:space="preserve">
          <source>Allocator used for storing bookkeeping data. The size of bookkeeping data is proportional to the number of allocators. If &lt;code&gt;BookkeepingAllocator&lt;/code&gt; is &lt;code&gt;NullAllocator&lt;/code&gt;, then &lt;code&gt;AllocatorList&lt;/code&gt; is &quot;ouroboros-style&quot;, i.e. it keeps the bookkeeping data in memory obtained from the allocators themselves. Note that for ouroboros-style management, the size &lt;code&gt;n&lt;/code&gt; passed to &lt;code&gt;make&lt;/code&gt; will be occasionally different from the size requested by client code.</source>
          <target state="translated">簿記データの保存に使用されるアロケータ。簿記データのサイズは、アロケータの数に比例します。場合 &lt;code&gt;BookkeepingAllocator&lt;/code&gt; がある &lt;code&gt;NullAllocator&lt;/code&gt; 、そして &lt;code&gt;AllocatorList&lt;/code&gt; は、それはアロケータ自身から取得したメモリ内の簿記のデータを保持し、すなわち「ウロボロス・スタイル」です。ouroborosスタイルの管理では、 &lt;code&gt;make&lt;/code&gt; に渡されるサイズ &lt;code&gt;n&lt;/code&gt; が、クライアントコードによって要求されるサイズと異なる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="08bb4c3deb9ae5f24662a76a349c8811c202d3b8" translate="yes" xml:space="preserve">
          <source>Allocator using &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;mmap&lt;/a&gt;&lt;/code&gt; directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;mmap&lt;/a&gt;&lt;/code&gt; を直接使用するアロケータ。</target>
        </trans-unit>
        <trans-unit id="c8e7b4b37828838d0088cc341f2bd349bdd2e0c6" translate="yes" xml:space="preserve">
          <source>Allocator[(max + 1 - min) / step] &lt;strong id=&quot;buckets&quot;&gt;buckets&lt;/strong&gt;;</source>
          <target state="translated">アロケータ[（最大+ 1-最小）/ステップ] &lt;strong id=&quot;buckets&quot;&gt;バケット&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="244757ffcceddee2188dcae6f52360122e5f32b2" translate="yes" xml:space="preserve">
          <source>Allocators are classes that define memory models to be used by some parts of the C++ Standard Library, and most specifically, by STL containers.</source>
          <target state="translated">アロケータは、C++標準ライブラリの一部、特に STL コンテナで使用するメモリ・モデルを定義するクラスです。</target>
        </trans-unit>
        <trans-unit id="cfd42e2cc807e85fba40b31455784b7f9341316f" translate="yes" xml:space="preserve">
          <source>Allocators assembled from the heap building blocks don't need to go through &lt;code&gt;IAllocator&lt;/code&gt; to be usable. They have the same primitives as &lt;code&gt;IAllocator&lt;/code&gt; and they work with &lt;a href=&quot;#make&quot;&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#makeArray&quot;&gt;&lt;code&gt;makeArray&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#dispose&quot;&gt;&lt;code&gt;dispose&lt;/code&gt;&lt;/a&gt; etc. So it suffice to create allocator objects wherever fit and use them appropriately:</source>
          <target state="translated">ヒープビルディングブロックから組み立てられたアロケータは、使用するために &lt;code&gt;IAllocator&lt;/code&gt; を通過する必要はありません。それらは &lt;code&gt;IAllocator&lt;/code&gt; と同じプリミティブを持ち、&lt;a href=&quot;#make&quot;&gt; &lt;code&gt;make&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#makeArray&quot;&gt; &lt;code&gt;makeArray&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#dispose&quot;&gt; &lt;code&gt;dispose&lt;/code&gt; &lt;/a&gt;などで動作します。したがって、適切な場所にアロケーターオブジェクトを作成し、適切に使用すれば十分です。</target>
        </trans-unit>
        <trans-unit id="b1a8b8369433cbedfb9cf80b63c1ab01ecb08d5f" translate="yes" xml:space="preserve">
          <source>Allocators customarily allocate memory in discretely-sized chunks. Therefore, a request for &lt;code&gt;n&lt;/code&gt; bytes may result in a larger allocation. The extra memory allocated goes unused and adds to the so-called &lt;a href=&quot;http://goo.gl/YoKffF&quot;&gt;internal fragmentation&lt;/a&gt;. The function &lt;code&gt;goodAllocSize(n)&lt;/code&gt; returns the actual number of bytes that would be allocated upon a request for &lt;code&gt;n&lt;/code&gt; bytes. This module defines a default implementation that returns &lt;code&gt;n&lt;/code&gt; rounded up to a multiple of the allocator's alignment.</source>
          <target state="translated">アロケータは通常、個別のサイズのチャンクでメモリを割り当てます。したがって、 &lt;code&gt;n&lt;/code&gt; バイトを要求すると、割り当てが大きくなる可能性があります。割り当てられた余分なメモリは使用されず、いわゆる&lt;a href=&quot;http://goo.gl/YoKffF&quot;&gt;内部断片化に&lt;/a&gt;追加されます。関数 &lt;code&gt;goodAllocSize(n)&lt;/code&gt; は、 &lt;code&gt;n&lt;/code&gt; バイトの要求時に割り当てられる実際のバイト数を返します。このモジュールは、アロケーターのアライメントの倍数に切り上げられた &lt;code&gt;n&lt;/code&gt; を返すデフォルトの実装を定義します。</target>
        </trans-unit>
        <trans-unit id="a6e1e46c405b75de5b94f462defa6a8af94b5d44" translate="yes" xml:space="preserve">
          <source>Allow Duration to be used as a boolean.</source>
          <target state="translated">期間をブール値として使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="adac40bfba505bd009304b9376798311375e4e91" translate="yes" xml:space="preserve">
          <source>Allow local reuse of address</source>
          <target state="translated">アドレスのローカル再利用を許可する</target>
        </trans-unit>
        <trans-unit id="8b6333bf17facce373203c2555dce16e5a1895fb" translate="yes" xml:space="preserve">
          <source>Allow the last slide to have fewer elements than windowSize</source>
          <target state="translated">最後のスライドがwindowSizeよりも少ない要素を持つようにする</target>
        </trans-unit>
        <trans-unit id="6ed1bcaf99a3846f70cbca3700192d6c980d8840" translate="yes" xml:space="preserve">
          <source>Allow transmission of broadcast messages</source>
          <target state="translated">ブロードキャストメッセージの送信を許可する</target>
        </trans-unit>
        <trans-unit id="d8fa57446bade27e54bc705df143acdcdd3b1802" translate="yes" xml:space="preserve">
          <source>AllowDayOverflow &lt;code&gt;allowOverflow&lt;/code&gt;</source>
          <target state="translated">AllowDayOverflow &lt;code&gt;allowOverflow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64679db98864f0cda1e9bac90e046d01f23a860d" translate="yes" xml:space="preserve">
          <source>AllowDayOverflow only applies to calculations involving months or years.</source>
          <target state="translated">AllowDayOverflowは、月または年を含む計算にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="25c6d16035cd63a1ba2d0337d85f0862317f57db" translate="yes" xml:space="preserve">
          <source>Allows &lt;code&gt;alias&lt;/code&gt;ing of any single symbol, type or compile-time expression.</source>
          <target state="translated">単一のシンボル、タイプ、またはコンパイル時の式の &lt;code&gt;alias&lt;/code&gt; 許可します。</target>
        </trans-unit>
        <trans-unit id="6f4acd20c1f1294f9371d9a6ba2cfbedb8612aac" translate="yes" xml:space="preserve">
          <source>Allows assignment from a subset algebraic type</source>
          <target state="translated">サブセット代数型からの代入を可能にします。</target>
        </trans-unit>
        <trans-unit id="d7cde2e0711d3681c464aaffee0a4276b1a5dd9a" translate="yes" xml:space="preserve">
          <source>Allows constructing a &lt;a href=&quot;#Duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; from the given time units with the given length.</source>
          <target state="translated">指定された時間単位と指定された長さから&lt;a href=&quot;#Duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;を作成できます。</target>
        </trans-unit>
        <trans-unit id="ee70bbaa43d45797f5f446c5970672b1c530f1ac" translate="yes" xml:space="preserve">
          <source>Allows creating bit fields inside structs and classes.</source>
          <target state="translated">構造体やクラスの内部にビット・フィールドを作成できるようにします。</target>
        </trans-unit>
        <trans-unit id="64ee76f10cd6158b74b7abb63361a7dad9dbd646" translate="yes" xml:space="preserve">
          <source>Allows for custom number of worker threads.</source>
          <target state="translated">ワーカースレッドのカスタム数を設定できます。</target>
        </trans-unit>
        <trans-unit id="328393fd6489bef674280b2b2127dc7cc02ec9c0" translate="yes" xml:space="preserve">
          <source>Allows freely swapping of elements as long as the output satisfies the algorithm's requirements.</source>
          <target state="translated">出力がアルゴリズムの要件を満たす限り、自由に要素を入れ替えることができます。</target>
        </trans-unit>
        <trans-unit id="9a9ded70476d5ecbed5df1b409fabc86f2220dab" translate="yes" xml:space="preserve">
          <source>Allows manipulating the fraction, exponent, and sign parts of a double separately. The definition is:</source>
          <target state="translated">二重の分数、指数、符号部分を別々に操作できるようにします。定義は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="334b65d7fe406c8806cd27978db1e757401c70de" translate="yes" xml:space="preserve">
          <source>Allows manipulating the fraction, exponent, and sign parts of a float separately. The definition is:</source>
          <target state="translated">float の分数、指数、符号部分を別々に操作できるようにします。定義は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="25a3ad747e7b5e32b1dfdc83fe51e1af4607df0d" translate="yes" xml:space="preserve">
          <source>Allows safe construction of &lt;code&gt;Unique&lt;/code&gt;. It creates the resource and guarantees unique ownership of it (unless &lt;code&gt;T&lt;/code&gt; publishes aliases of &lt;code&gt;this&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Unique&lt;/code&gt; を安全に構築できます。リソースを作成し、その固有の所有権を保証します（ &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;this&lt;/code&gt; のエイリアスを公開しない限り）。</target>
        </trans-unit>
        <trans-unit id="b188cff78ffe93b93118a9afb92a5b0ecf425233" translate="yes" xml:space="preserve">
          <source>Allows the storage of &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754-1985#Positive_and_negative_infinity&quot;&gt; IEEE754 infinity&lt;/a&gt; values.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754-1985#Positive_and_negative_infinity&quot;&gt;IEEE754無限大&lt;/a&gt;値の格納を許可します。</target>
        </trans-unit>
        <trans-unit id="d3c7e91d01b82633b7ccef70ff930b3cba01954d" translate="yes" xml:space="preserve">
          <source>Allows the storage of &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;IEEE754 Not a Number&lt;/a&gt; values.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;IEEE754 Not a Number&lt;/a&gt;値の格納を許可します。</target>
        </trans-unit>
        <trans-unit id="82e4b1439e8421bdc9916fd5cc4940cdec7c35ca" translate="yes" xml:space="preserve">
          <source>Allows user code to define custom floating-point formats. These formats are for storage only; all operations on them are performed by first implicitly extracting them to &lt;code&gt;real&lt;/code&gt; first. After the operation is completed the result can be stored in a custom floating-point value via assignment.</source>
          <target state="translated">ユーザーコードでカスタム浮動小数点形式を定義できます。これらのフォーマットはストレージ専用です。それらに対するすべての操作は、最初に暗黙的にそれらを &lt;code&gt;real&lt;/code&gt; 抽出することによって実行されます。操作が完了した後、割り当てを介して結果をカスタム浮動小数点値に保存できます。</target>
        </trans-unit>
        <trans-unit id="a707a85edc66a653109fa80da8910d24c0d7d6d7" translate="yes" xml:space="preserve">
          <source>Alphabetic</source>
          <target state="translated">Alphabetic</target>
        </trans-unit>
        <trans-unit id="c31b9723b74539a236469f5380dbe298e0356511" translate="yes" xml:space="preserve">
          <source>Alphabetic Presentation Forms</source>
          <target state="translated">アルファベット表記のプレゼンテーションフォーム</target>
        </trans-unit>
        <trans-unit id="a4f699c324e0e58a96d3bb16953095da737d92fc" translate="yes" xml:space="preserve">
          <source>Also known as trinary, trivalent, or trilean.</source>
          <target state="translated">3価、3価、または3価とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="3cb12cab0f941ad8314fbcab6c21fb7b159e66aa" translate="yes" xml:space="preserve">
          <source>Also note that while normally the &lt;code&gt;begin&lt;/code&gt; of an interval is included in it and its &lt;code&gt;end&lt;/code&gt; is excluded from it, if &lt;code&gt;dir == Direction.bwd&lt;/code&gt;, then &lt;code&gt;begin&lt;/code&gt; is treated as excluded and &lt;code&gt;end&lt;/code&gt; is treated as included. This allows for the same behavior in both directions. This works because none of &lt;a href=&quot;#Interval&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt;'s functions which care about whether &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; is included or excluded are ever called by &lt;code&gt;IntervalRange&lt;/code&gt;. &lt;code&gt;interval&lt;/code&gt; returns a normal interval, regardless of whether &lt;code&gt;dir == Direction.fwd&lt;/code&gt; or if &lt;code&gt;dir == Direction.bwd&lt;/code&gt;, so any &lt;a href=&quot;#Interval&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt; functions which are called on it which care about whether &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; are included or excluded will treat &lt;code&gt;begin&lt;/code&gt; as included and &lt;code&gt;end&lt;/code&gt; as excluded.</source>
          <target state="translated">また、通常、間隔の &lt;code&gt;begin&lt;/code&gt; は含まれ、その &lt;code&gt;end&lt;/code&gt; は除外されますが、 &lt;code&gt;dir == Direction.bwd&lt;/code&gt; 場合、 &lt;code&gt;begin&lt;/code&gt; は除外され、 &lt;code&gt;end&lt;/code&gt; は含まれるものとして扱われます。これにより、両方向で同じ動作が可能になります。これが機能するのは、 &lt;code&gt;begin&lt;/code&gt; または &lt;code&gt;end&lt;/code&gt; が含まれるか除外されるかを&lt;a href=&quot;#Interval&quot;&gt; &lt;code&gt;Interval&lt;/code&gt; &lt;/a&gt;の関数が &lt;code&gt;IntervalRange&lt;/code&gt; によって呼び出されないためです。 &lt;code&gt;interval&lt;/code&gt; にかかわらずかどうかの戻り正常間隔、 &lt;code&gt;dir == Direction.fwd&lt;/code&gt; 場合、または &lt;code&gt;dir == Direction.bwd&lt;/code&gt; ので、任意の&lt;a href=&quot;#Interval&quot;&gt; &lt;code&gt;Interval&lt;/code&gt; &lt;/a&gt; &lt;code&gt;begin&lt;/code&gt; または &lt;code&gt;end&lt;/code&gt; が含まれるか除外されるかを考慮して呼び出される関数は、 &lt;code&gt;begin&lt;/code&gt; をincludeとして、 &lt;code&gt;end&lt;/code&gt; をexcludeとして扱います。</target>
        </trans-unit>
        <trans-unit id="be0f9f39d5673fb5d350cd6b832b92db8b3eeda0" translate="yes" xml:space="preserve">
          <source>Also note that while normally the &lt;code&gt;end&lt;/code&gt; of an interval is excluded from it, &lt;code&gt;NegInfIntervalRange&lt;/code&gt; treats it as if it were included. This allows for the same behavior as with &lt;code&gt;PosInfIntervalRange&lt;/code&gt;. This works because none of &lt;code&gt;NegInfInterval&lt;/code&gt;'s functions which care about whether &lt;code&gt;end&lt;/code&gt; is included or excluded are ever called by &lt;code&gt;NegInfIntervalRange&lt;/code&gt;. &lt;code&gt;interval&lt;/code&gt; returns a normal interval, so any &lt;code&gt;NegInfInterval&lt;/code&gt; functions which are called on it which care about whether &lt;code&gt;end&lt;/code&gt; is included or excluded will treat &lt;code&gt;end&lt;/code&gt; as excluded.</source>
          <target state="translated">また、通常、間隔の &lt;code&gt;end&lt;/code&gt; はそれから除外されますが、 &lt;code&gt;NegInfIntervalRange&lt;/code&gt; はそれが含まれているかのようにそれを扱うことに注意してください。これにより、 &lt;code&gt;PosInfIntervalRange&lt;/code&gt; と同じ動作が可能になります。これが機能するのは、 &lt;code&gt;end&lt;/code&gt; が含まれるか除外されるかを &lt;code&gt;NegInfInterval&lt;/code&gt; の関数が &lt;code&gt;NegInfIntervalRange&lt;/code&gt; によって呼び出されないためです。 &lt;code&gt;interval&lt;/code&gt; は通常の間隔を返すため、 &lt;code&gt;end&lt;/code&gt; が含まれるか除外されるかを &lt;code&gt;NegInfInterval&lt;/code&gt; して呼び出されるNegInfInterval関数は、 &lt;code&gt;end&lt;/code&gt; を除外されたものとして扱います。</target>
        </trans-unit>
        <trans-unit id="238e333d78d3953efe21f4c8dee91a8052bf6044" translate="yes" xml:space="preserve">
          <source>Also please note, that no spaces are allowed within the string anywhere whether it's a leading, trailing, or embedded space(s), thus they too must be stripped from the string before using this function, or any of the conversion functions.</source>
          <target state="translated">また、文字列のどこかにスペースを入れてはいけないということにも注意してください。</target>
        </trans-unit>
        <trans-unit id="19b283d04d340872863f50c8bc1177319aa2279b" translate="yes" xml:space="preserve">
          <source>Also see: &lt;code&gt;dmd.attrib.ForwardingAttribDeclaration&lt;/code&gt;</source>
          <target state="translated">次も参照してください： &lt;code&gt;dmd.attrib.ForwardingAttribDeclaration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ceee206f7bf1c9c9a3b0facedfafb260135ff34" translate="yes" xml:space="preserve">
          <source>Also, because no decoding occurs, it is possible to use this overload to translate ASCII characters within a proper UTF-8 string without altering the other, non-ASCII characters. It's replacing any code unit greater than &lt;code&gt;127&lt;/code&gt; with another code unit or replacing any code unit with another code unit greater than &lt;code&gt;127&lt;/code&gt; which will cause UTF validation issues.</source>
          <target state="translated">また、デコードは行われないため、このオーバーロードを使用して、他の非ASCII文字を変更せずに、適切なUTF-8文字列内のASCII文字を変換できます。 &lt;code&gt;127&lt;/code&gt; より大きいコードユニットを別のコードユニットに置き換えるか、コードユニットを &lt;code&gt;127&lt;/code&gt; より大きい別のコードユニットに置き換えると、UTF検証の問題が発生します。</target>
        </trans-unit>
        <trans-unit id="cd0ce1c13fb8625991e7b8d7c7f0d7c753bdcd89" translate="yes" xml:space="preserve">
          <source>Also, note that Phobos code assumes that the primitives &lt;code&gt;r.front&lt;/code&gt; and &lt;code&gt;r.empty&lt;/code&gt; are &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;) time complexity wise or &quot;cheap&quot; in terms of running time. &amp;Omicron;() statements in the documentation of range functions are made with this assumption.</source>
          <target state="translated">また、Phobosコードは、プリミティブ &lt;code&gt;r.front&lt;/code&gt; と &lt;code&gt;r.empty&lt;/code&gt; が、実行時間に関して&amp;Omicron;（ &lt;code&gt;1&lt;/code&gt; ）時間の複雑さ、つまり「安価」であると想定していることに注意してください。範囲関数のドキュメンテーションの&amp;Omicron;（）ステートメントは、この仮定で作成されています。</target>
        </trans-unit>
        <trans-unit id="7575757c12c48b07e624443d696165742a7b14f4" translate="yes" xml:space="preserve">
          <source>Also, the IANA time zone database has a lot more time zones than Windows does.</source>
          <target state="translated">また、IANAのタイムゾーンデータベースは、Windowsよりも多くのタイムゾーンを持っています。</target>
        </trans-unit>
        <trans-unit id="4f85c414c696f8d88b637f2931596bd576a74dbf" translate="yes" xml:space="preserve">
          <source>Also, you may wish to utilize the &lt;code&gt;reserve&lt;/code&gt; function to pre-allocate array data to use with the append operator.</source>
          <target state="translated">また、 &lt;code&gt;reserve&lt;/code&gt; 関数を使用して、追加演算子で使用する配列データを事前に割り当てることもできます。</target>
        </trans-unit>
        <trans-unit id="87ea7db4a430030d90185495584807fc225cd906" translate="yes" xml:space="preserve">
          <source>Also:</source>
          <target state="translated">Also:</target>
        </trans-unit>
        <trans-unit id="c3cfd4ccb3c0f4865df49b814eab540d3553f2c1" translate="yes" xml:space="preserve">
          <source>Alternate name for &lt;a href=&quot;#Fields&quot;&gt;&lt;code&gt;Fields&lt;/code&gt;&lt;/a&gt;, kept for legacy compatibility.</source>
          <target state="translated">&lt;a href=&quot;#Fields&quot;&gt; &lt;code&gt;Fields&lt;/code&gt; &lt;/a&gt;代替名。レガシー互換性のために保持されています。</target>
        </trans-unit>
        <trans-unit id="5d62f98b8f8caf5989633e5408f0d403968f08f9" translate="yes" xml:space="preserve">
          <source>Alternate name for &lt;a href=&quot;#ParameterDefaults&quot;&gt;&lt;code&gt;ParameterDefaults&lt;/code&gt;&lt;/a&gt;, kept for legacy compatibility.</source>
          <target state="translated">&lt;a href=&quot;#ParameterDefaults&quot;&gt; &lt;code&gt;ParameterDefaults&lt;/code&gt; の&lt;/a&gt;代替名。レガシー互換性のために保持されています。</target>
        </trans-unit>
        <trans-unit id="8c96b3e17073941a891d0a738663e82616b91e67" translate="yes" xml:space="preserve">
          <source>Alternate name for &lt;a href=&quot;#Parameters&quot;&gt;&lt;code&gt;Parameters&lt;/code&gt;&lt;/a&gt;, kept for legacy compatibility.</source>
          <target state="translated">&lt;a href=&quot;#Parameters&quot;&gt; &lt;code&gt;Parameters&lt;/code&gt; &lt;/a&gt;代替名。レガシー互換性のために保持されています。</target>
        </trans-unit>
        <trans-unit id="d679f53e7924ba2aa8d486d630ba51ae1a168a21" translate="yes" xml:space="preserve">
          <source>Alternate name for &lt;a href=&quot;#isExpressions&quot;&gt;&lt;code&gt;isExpressions&lt;/code&gt;&lt;/a&gt;, kept for legacy compatibility.</source>
          <target state="translated">代替名&lt;a href=&quot;#isExpressions&quot;&gt; &lt;code&gt;isExpressions&lt;/code&gt; は&lt;/a&gt;、レガシー互換性のために保持しました。</target>
        </trans-unit>
        <trans-unit id="88e4f940df16ef30434b16d10b67a7bb93c43df0" translate="yes" xml:space="preserve">
          <source>Alternative sorting method that should be used when comparing keys involves an expensive computation. Instead of using &lt;code&gt;less(a, b)&lt;/code&gt; for comparing elements, &lt;code&gt;schwartzSort&lt;/code&gt; uses &lt;code&gt;less(transform(a), transform(b))&lt;/code&gt;. The values of the &lt;code&gt;transform&lt;/code&gt; function are precomputed in a temporary array, thus saving on repeatedly computing it. Conversely, if the cost of &lt;code&gt;transform&lt;/code&gt; is small compared to the cost of allocating and filling the precomputed array, &lt;code&gt;sort&lt;/code&gt; may be faster and therefore preferable.</source>
          <target state="translated">キーを比較するときに使用する必要がある代替のソート方法には、コストのかかる計算が含まれます。要素の比較に &lt;code&gt;less(a, b)&lt;/code&gt; を使用する代わりに、 &lt;code&gt;schwartzSort&lt;/code&gt; は &lt;code&gt;less(transform(a), transform(b))&lt;/code&gt; ます。 &lt;code&gt;transform&lt;/code&gt; 関数の値は一時配列で事前計算されるため、繰り返し計算する必要がありません。逆に、事前計算された配列を割り当てて埋めるコストに比べて &lt;code&gt;transform&lt;/code&gt; のコストが小さい場合は、 &lt;code&gt;sort&lt;/code&gt; 方が高速であり、したがって好ましい場合があります。</target>
        </trans-unit>
        <trans-unit id="1b074433d0046e94a8541abc9c7fb27718d93f11" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;code&gt;values&lt;/code&gt; can be passed at compile-time, allowing for a more efficient search, but one that only supports matching on equality:</source>
          <target state="translated">または、コンパイル時に &lt;code&gt;values&lt;/code&gt; を渡して、より効率的な検索を可能にすることもできますが、同等のマッチングのみをサポートします。</target>
        </trans-unit>
        <trans-unit id="c34214f7bf412f966f5ee7b7c1e43a0611031a85" translate="yes" xml:space="preserve">
          <source>Alternatively, inside the scope of an aggregate, only the member name is needed:</source>
          <target state="translated">あるいは、アグリゲートのスコープ内では、メンバー名だけが必要です。</target>
        </trans-unit>
        <trans-unit id="5ab148c62e084629eaeb7919a9c875b4ac608894" translate="yes" xml:space="preserve">
          <source>Alternatively, instead of using a single &lt;code&gt;value&lt;/code&gt; to fill the &lt;code&gt;range&lt;/code&gt;, a &lt;code&gt;filter&lt;/code&gt;&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; can be provided. The length of &lt;code&gt;filler&lt;/code&gt; and &lt;code&gt;range&lt;/code&gt; do not need to match, but &lt;code&gt;filler&lt;/code&gt; must not be empty.</source>
          <target state="translated">または、単一の &lt;code&gt;value&lt;/code&gt; を使用して &lt;code&gt;range&lt;/code&gt; を埋める代わりに、 &lt;code&gt;filter&lt;/code&gt; &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前方範囲を指定&lt;/a&gt;できます。 &lt;code&gt;filler&lt;/code&gt; の長さと &lt;code&gt;range&lt;/code&gt; は一致する必要はありませんが、 &lt;code&gt;filler&lt;/code&gt; が空であってはなりません。</target>
        </trans-unit>
        <trans-unit id="3c96dd8d99da646f189f6b06c25b24bb70790d61" translate="yes" xml:space="preserve">
          <source>Alternatively, the non-string form can be used to introduce a scope. Note that the enclosing module already provides a scope for the symbols declared in the namespace. This form does not allow closing and reopening the same namespace with in the same module. That is:</source>
          <target state="translated">あるいは、文字列ではない形式を使用してスコープを導入することもできます。囲むモジュールは、名前空間で宣言されたシンボルのスコープをすでに提供していることに注意してください。この形式では、同じモジュール内で同じ名前空間を閉じたり開いたりすることはできません。つまり</target>
        </trans-unit>
        <trans-unit id="e73c4549c3e37630a06c8e93619aaef72dfec939" translate="yes" xml:space="preserve">
          <source>Alternatively, wysiwyg strings can be enclosed by backquotes, using the ` character.</source>
          <target state="translated">また、wysiwyg 文字列は ` 文字を使ってバッククォートで囲むこともできます。</target>
        </trans-unit>
        <trans-unit id="188d34f7156185437a8f88ec534863d101dd6cd7" translate="yes" xml:space="preserve">
          <source>Alternatively, you can declare a single templated &lt;code&gt;opEquals&lt;/code&gt; function with an &lt;a href=&quot;template#auto-ref-parameters&quot;&gt;auto ref&lt;/a&gt; parameter:</source>
          <target state="translated">または、&lt;a href=&quot;template#auto-ref-parameters&quot;&gt;auto ref&lt;/a&gt;パラメーターを使用して、テンプレート &lt;code&gt;opEquals&lt;/code&gt; た単一のopEquals関数を宣言することもできます。</target>
        </trans-unit>
        <trans-unit id="4d49f83ba69fd5e0ed773bc16674431bab9674cc" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;char[]&lt;/code&gt; and &lt;code&gt;wchar[]&lt;/code&gt; (as well as their qualified versions including &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;wstring&lt;/code&gt;) are arrays, &lt;code&gt;isRandomAccessRange&lt;/code&gt; yields &lt;code&gt;false&lt;/code&gt; for them because they use variable-length encodings (UTF-8 and UTF-16 respectively). These types are bidirectional ranges only.</source>
          <target state="translated">が &lt;code&gt;char[]&lt;/code&gt; と &lt;code&gt;wchar[]&lt;/code&gt; （を含むそれらの修飾バージョン、ならびに &lt;code&gt;string&lt;/code&gt; と &lt;code&gt;wstring&lt;/code&gt; のは）アレイである、 &lt;code&gt;isRandomAccessRange&lt;/code&gt; が生じる &lt;code&gt;false&lt;/code&gt; それらが（それぞれ、UTF-8およびUTF-16）可変長符号化を使用するので、それらのために。これらのタイプは双方向範囲のみです。</target>
        </trans-unit>
        <trans-unit id="ce1b50075d06a3525c670dfdee2303781cd59e16" translate="yes" xml:space="preserve">
          <source>Although D does not currently use a moving garbage collector, by following the rules listed above one can be implemented. No special action is required to pin objects. A moving collector will only move objects for which there are no ambiguous references, and for which it can update those references. All other objects will be automatically pinned.</source>
          <target state="translated">D は現在、移動するガベージコレクタを使用していませんが、上記のルールに従うことで実装することができます。オブジェクトを固定するために特別なアクションは必要ありません。移動するコレクタは、曖昧な参照がなく、それらの参照を更新できるオブジェクトのみを移動します。他のすべてのオブジェクトは自動的に固定されます。</target>
        </trans-unit>
        <trans-unit id="1aee14a59e8527fa460ebbbf449880cdcef580e1" translate="yes" xml:space="preserve">
          <source>Although a struct constructor returns a reference to the instance being constructed, it is treated as form (1).</source>
          <target state="translated">構造体コンストラクタは構築中のインスタンスへの参照を返しますが、フォーム(1)として扱われます。</target>
        </trans-unit>
        <trans-unit id="b2e0f6070914711324b1b22c0acefe2c4d0046f3" translate="yes" xml:space="preserve">
          <source>Although allocations are in theory served in linear searching time, &lt;code&gt;deallocate&lt;/code&gt; calls take &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;) time, by using aligned allocations. &lt;code&gt;ParentAllocator&lt;/code&gt; must implement &lt;code&gt;alignedAllocate&lt;/code&gt; and it must be able to allocate &lt;code&gt;theAlignment&lt;/code&gt; bytes at the same alignment. Each aligned allocation done by &lt;code&gt;ParentAllocator&lt;/code&gt; will contain metadata for an &lt;code&gt;Allocator&lt;/code&gt;, followed by its payload.</source>
          <target state="translated">割り当ては理論的には線形検索時間で処理され &lt;code&gt;deallocate&lt;/code&gt; が、割り当て解除呼び出しは整列割り当てを使用するため、&amp;Omicron;（ &lt;code&gt;1&lt;/code&gt; ）時間かかります。 &lt;code&gt;ParentAllocator&lt;/code&gt; を実装しなければならない &lt;code&gt;alignedAllocate&lt;/code&gt; を、割り当てることができなければならない &lt;code&gt;theAlignment&lt;/code&gt; が同じ配向でバイト。行わ各整列割り当て &lt;code&gt;ParentAllocator&lt;/code&gt; は、メタデータを含むことになる &lt;code&gt;Allocator&lt;/code&gt; そのペイロードが続きます。</target>
        </trans-unit>
        <trans-unit id="ba5576589df037851e2ab68a594e957c64a2217b" translate="yes" xml:space="preserve">
          <source>Although narrow string types (&lt;code&gt;char[]&lt;/code&gt;, &lt;code&gt;wchar[]&lt;/code&gt;, and their qualified derivatives) do define a &lt;code&gt;length&lt;/code&gt; property, &lt;code&gt;hasLength&lt;/code&gt; yields &lt;code&gt;false&lt;/code&gt; for them. This is because a narrow string's length does not reflect the number of characters, but instead the number of encoding units, and as such is not useful with range-oriented algorithms. To use strings as random-access ranges with length, use &lt;a href=&quot;std_string#representation&quot;&gt;&lt;code&gt;std.string.representation&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;std_utf#byCodeUnit&quot;&gt;&lt;code&gt;std.utf.byCodeUnit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ナロー文字列型（ &lt;code&gt;char[]&lt;/code&gt; 、 &lt;code&gt;wchar[]&lt;/code&gt; 、およびそれらの修飾された派生物）は &lt;code&gt;length&lt;/code&gt; プロパティを定義しますが、 &lt;code&gt;hasLength&lt;/code&gt; はそれらに対して &lt;code&gt;false&lt;/code&gt; を生成します。これは、狭い文字列の長さが文字数を反映するのではなく、エンコーディングユニットの数を反映するためです。そのため、範囲指向のアルゴリズムでは役に立ちません。文字列を長さのランダムアクセス範囲として使用するには、&lt;a href=&quot;std_string#representation&quot;&gt; &lt;code&gt;std.string.representation&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;std_utf#byCodeUnit&quot;&gt; &lt;code&gt;std.utf.byCodeUnit&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="751a51b5f3815e4913ea4c1e3d08b8c0587fdc03" translate="yes" xml:space="preserve">
          <source>Although some keywords can be used both as a type qualifier and a storage class, there are some storage classes that cannot be used to construct new types, such as &lt;code&gt;ref&lt;/code&gt;:</source>
          <target state="translated">一部のキーワードは、タイプ修飾子とストレージクラスの両方として使用できますが、 &lt;code&gt;ref&lt;/code&gt; など、新しいタイプの作成に使用できないストレージクラスもあります。</target>
        </trans-unit>
        <trans-unit id="dd93adfa24c055484c1d6ac7b1222125e38dd6c6" translate="yes" xml:space="preserve">
          <source>Although static variable name visibility follows the usual scoping rules, the names of them must be unique within a particular function.</source>
          <target state="translated">静的変数名の可視性は通常のスコープルールに従いますが、その名前は特定の関数内で一意でなければなりません。</target>
        </trans-unit>
        <trans-unit id="8d68e23bc937fb1a750f414f57afc9ba51e4f8a9" translate="yes" xml:space="preserve">
          <source>Although the contents of the padding are often zero, do not rely on that.</source>
          <target state="translated">パディングの内容はゼロになることが多いですが、それに頼らないようにしましょう。</target>
        </trans-unit>
        <trans-unit id="0f6d1d3556d0e4071164ab02759b80b8f87727af" translate="yes" xml:space="preserve">
          <source>Although the data is immutable, the allocator &quot;knows&quot; the underlying memory is mutable, so &lt;code&gt;immutable&lt;/code&gt; is elided for the affix which is independent from the data itself. However, the result is &lt;code&gt;shared&lt;/code&gt; because &lt;code&gt;immutable&lt;/code&gt; is implicitly shareable so multiple threads may access and manipulate the affix for the same data.</source>
          <target state="translated">データは不変ですが、アロケータは基礎となるメモリが可変であることを「認識」しているため、データ自体から独立している接辞では &lt;code&gt;immutable&lt;/code&gt; が省略されます。ただし、 &lt;code&gt;immutable&lt;/code&gt; は暗黙的に共有可能であり、複数のスレッドが同じデータの接辞にアクセスして操作できるため、結果は &lt;code&gt;shared&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="4594a211d07176e71f67f04c76263fc9e17f8056" translate="yes" xml:space="preserve">
          <source>Always &lt;code&gt;false&lt;/code&gt; (random generators are infinite ranges).</source>
          <target state="translated">常に &lt;code&gt;false&lt;/code&gt; （ランダムジェネレーターは無限の範囲です）。</target>
        </trans-unit>
        <trans-unit id="d2317146c4b78429c9fa4a78c82cf701740b74a6" translate="yes" xml:space="preserve">
          <source>Always &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">常に &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4ed0571bb284ff0022a6b18f52dbb495171fb6f8" translate="yes" xml:space="preserve">
          <source>Always a new scope, to use for this &lt;code&gt;DeprecatedDeclaration&lt;/code&gt;'s members.</source>
          <target state="translated">この &lt;code&gt;DeprecatedDeclaration&lt;/code&gt; のメンバーに使用する、常に新しいスコープ。</target>
        </trans-unit>
        <trans-unit id="ecdf7d32ac0560522ba0c167fff3b2a8084d9926" translate="yes" xml:space="preserve">
          <source>Always add new return codes last. Never &lt;em&gt;EVER&lt;/em&gt; remove any. The return codes must remain the same!</source>
          <target state="translated">新しい戻りコードは常に最後に追加してください。決して&lt;em&gt;EVER&lt;/em&gt;いずれかを削除しません。戻りコードは同じままである必要があります！</target>
        </trans-unit>
        <trans-unit id="91aa9903448204ed37d902e02a20b0b8d1775687" translate="yes" xml:space="preserve">
          <source>Always call &lt;a href=&quot;#wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; to wait for a process to complete, even if &lt;code&gt;kill&lt;/code&gt; has been called on it.</source>
          <target state="translated">&lt;code&gt;kill&lt;/code&gt; が呼び出された場合でも、常に&lt;a href=&quot;#wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;を呼び出してプロセスの完了を待ちます。</target>
        </trans-unit>
        <trans-unit id="00efb2c1e297670bc7025d03ccb66d306c20b175" translate="yes" xml:space="preserve">
          <source>Always defined; used as the opposite of &lt;code&gt;none&lt;/code&gt;</source>
          <target state="translated">常に定義されています。 &lt;code&gt;none&lt;/code&gt; の反対として使用</target>
        </trans-unit>
        <trans-unit id="c125fb83f824d4bd1d2beebad9485aed6b09839a" translate="yes" xml:space="preserve">
          <source>Always do checking</source>
          <target state="translated">常にチェックを行う</target>
        </trans-unit>
        <trans-unit id="4e048da15ca2bf279cd35e525737612e720e444c" translate="yes" xml:space="preserve">
          <source>Always inline the functions.</source>
          <target state="translated">必ず機能をインライン化してください。</target>
        </trans-unit>
        <trans-unit id="756f986f9bcdd129940f4871df381abfdb52d4bb" translate="yes" xml:space="preserve">
          <source>Always insert the decimal point and print trailing zeros.</source>
          <target state="translated">常に小数点を挿入し、末尾のゼロを表示します。</target>
        </trans-unit>
        <trans-unit id="e89bec8fb850573de2289bb9dc31383490faf82d" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">常に &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="28625924634a090c91d5b21229f6718ca1949c53" translate="yes" xml:space="preserve">
          <source>Always returns false (unless the given interval is empty) because an interval beginning at negative infinity can never be after any other interval.</source>
          <target state="translated">負の無限大から始まる区間が他の区間の後になることはありえないので、(与えられた区間が空でない限り)常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="bdadc4badca1a50ef408f60afbd76636c86734c4" translate="yes" xml:space="preserve">
          <source>Always returns false (unless the given interval is empty) because an interval going to positive infinity can never be before any other interval.</source>
          <target state="translated">正の無限大に向かう区間が他の区間の前にあることはありえないので、(与えられた区間が空でない限り)常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="94fa66f43e494b57c40dedacad5e8fcc5ed7e45e" translate="yes" xml:space="preserve">
          <source>Always returns false (unless this interval is empty) because a finite interval can never be after an interval going to positive infinity.</source>
          <target state="translated">有限区間は、正の無限大になる区間の後にはありえないので、常にfalseを返します(この区間が空でない限り)。</target>
        </trans-unit>
        <trans-unit id="d882cba308665fda178b09f0755ed0e7ac35509a" translate="yes" xml:space="preserve">
          <source>Always returns false (unless this interval is empty) because a finite interval can never be before an interval beginning at negative infinity.</source>
          <target state="translated">有限区間が負の無限大から始まる区間の前にあることはありえないので、(この区間が空でない限り)常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="839ddfcb8311f35aad2fb0b8e24e88538a023202" translate="yes" xml:space="preserve">
          <source>Always returns false (unless this interval is empty), because an interval beginning at negative infinity can never be contained in a finite interval.</source>
          <target state="translated">負の無限大から始まる区間が有限区間に含まれることはありえないため、常にfalseを返します(この区間が空でない限り)。</target>
        </trans-unit>
        <trans-unit id="3ed45722000fa0537c28f229adeae463146f4016" translate="yes" xml:space="preserve">
          <source>Always returns false (unless this interval is empty), because an interval going to positive infinity can never be contained in a finite interval.</source>
          <target state="translated">正の無限大になる区間が有限区間に含まれることはありえないため、常にfalseを返します(この区間が空でない限り)。</target>
        </trans-unit>
        <trans-unit id="a53924ebd00c5459aa871927c9ec67510a96dd54" translate="yes" xml:space="preserve">
          <source>Always returns false because an interval beginning at negative infinity can never be after any other interval.</source>
          <target state="translated">負の無限大で始まる区間が他の区間の後になることはないので、常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="d9bab92525c979c53e601d84248db55d697093d3" translate="yes" xml:space="preserve">
          <source>Always returns false because an interval beginning at negative infinity can never be after any time point.</source>
          <target state="translated">負の無限大で始まる区間は、任意の時間点の後ではありえないので、常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="829c04d974963809ceb0735be3d487911f2864cf" translate="yes" xml:space="preserve">
          <source>Always returns false because an interval beginning at negative infinity can never be before another interval beginning at negative infinity.</source>
          <target state="translated">負の無限大から始まる区間が、負の無限大から始まる別の区間の前にあることはありえないので、常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="48190dd4a715744e9634474743dcbc604a9ca68f" translate="yes" xml:space="preserve">
          <source>Always returns false because an interval beginning at negative infinity can never contain an interval going to positive infinity.</source>
          <target state="translated">負の無限大から始まる区間には、正の無限大に向かう区間を含むことはできないので、常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="87f5c7255865a6aa09545519f01b0f602d71f734" translate="yes" xml:space="preserve">
          <source>Always returns false because an interval going to positive infinity can never be after another interval going to positive infinity.</source>
          <target state="translated">正の無限大に向かう区間が、正の無限大に向かう別の区間の後になることはありえないので、常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="94b78d489ebc6bd76631339902c007afae618abe" translate="yes" xml:space="preserve">
          <source>Always returns false because an interval going to positive infinity can never be before any other interval.</source>
          <target state="translated">正の無限大に向かう区間が他の区間の前にあることはありえないので、常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="1b622d5187c151cf5715d74c3640dbb076d4394c" translate="yes" xml:space="preserve">
          <source>Always returns false because an interval going to positive infinity can never be before any time point.</source>
          <target state="translated">正の無限大に行く区間は、どの時点よりも前になることはありえないので、常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="46754795cce31e571fe7c4a3849c49251d755cfd" translate="yes" xml:space="preserve">
          <source>Always returns false because an interval going to positive infinity can never contain an interval beginning at negative infinity.</source>
          <target state="translated">正の無限大に向かう区間には、負の無限大から始まる区間を含むことはできないので、常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="51bcc244bd67d8750a4fdd4fbdf0a387caa703aa" translate="yes" xml:space="preserve">
          <source>Always returns false because two intervals beginning at negative infinity can never be adjacent to one another.</source>
          <target state="translated">負の無限大から始まる2つの区間が互いに隣接することはあり得ないため、常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="5de1beefc377ac68c64f67a4b951a1494a514eb5" translate="yes" xml:space="preserve">
          <source>Always returns false because two intervals going to positive infinity can never be adjacent to one another.</source>
          <target state="translated">正の無限大に向かう2つの区間が互いに隣接していることはありえないので、常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="2e5c51adf29d169f29f627d0dc8290c18d19524d" translate="yes" xml:space="preserve">
          <source>Always returns false.</source>
          <target state="translated">常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="9789c7e0f94b9d97c7bb5b256c563654386851c1" translate="yes" xml:space="preserve">
          <source>Always returns true because two intervals beginning at negative infinity always overlap.</source>
          <target state="translated">負の無限大から始まる2つの区間が常に重なっているため、常に真を返します。</target>
        </trans-unit>
        <trans-unit id="6ae3ed1006060103837a55fb96e4df45549bbde7" translate="yes" xml:space="preserve">
          <source>Always returns true because two intervals going to positive infinity always overlap.</source>
          <target state="translated">正の無限大に向かう2つの区間が常に重なるため、常に真を返します。</target>
        </trans-unit>
        <trans-unit id="99690d58d4abd10cd0938a7adcb56ded08ef66ad" translate="yes" xml:space="preserve">
          <source>An</source>
          <target state="translated">An</target>
        </trans-unit>
        <trans-unit id="dcf1c44121ab11079f75ad4f70a75125be5a6a9a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#EmailStatus&quot;&gt;&lt;code&gt;EmailStatus&lt;/code&gt;&lt;/a&gt;, indicating the status of the email address.</source>
          <target state="translated">アン&lt;a href=&quot;#EmailStatus&quot;&gt; &lt;code&gt;EmailStatus&lt;/code&gt; &lt;/a&gt;メールアドレスの状態を示します。</target>
        </trans-unit>
        <trans-unit id="ffe9a34aa0d7b745cc8f891bddd4b51b3279fa26" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#LName&quot;&gt;&lt;i&gt;LName&lt;/i&gt;&lt;/a&gt; is a name preceded by a &lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt; giving the number of characters in the &lt;a href=&quot;#Name&quot;&gt;&lt;i&gt;Name&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">アン&lt;a href=&quot;#LName&quot;&gt;&lt;i&gt;LNAMEは、&lt;/i&gt;&lt;/a&gt;名前の前で&lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;数&lt;/i&gt;&lt;/a&gt;の文字数を与える&lt;a href=&quot;#Name&quot;&gt;&lt;i&gt;名前を&lt;/i&gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b9368e81deb8013394f56e991844ff7d8f9e56b8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;expression#ArrayLiteral&quot;&gt;&lt;i&gt;ArrayLiteral&lt;/i&gt;&lt;/a&gt; is inferred to be a dynamic array type rather than a static array:</source>
          <target state="translated">AN &lt;a href=&quot;expression#ArrayLiteral&quot;&gt;&lt;i&gt;配列リテラルは、&lt;/i&gt;&lt;/a&gt;ダイナミックアレイ・タイプではなく、静的な配列であることが推測されます。</target>
        </trans-unit>
        <trans-unit id="89d876389132db631f40f8472f475c33763a7de8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;expression#AssertExpression&quot;&gt;&lt;i&gt;AssertExpression&lt;/i&gt;&lt;/a&gt; that fails its condition</source>
          <target state="translated">条件に失敗した&lt;a href=&quot;expression#AssertExpression&quot;&gt;&lt;i&gt;AssertExpression&lt;/i&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6590283f72c8bc68a61e26f8207b2166720f88ee" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_meta#AliasSeq&quot;&gt;&lt;code&gt;std.meta.AliasSeq&lt;/code&gt;&lt;/a&gt; with all possible target types of an implicit conversion &lt;code&gt;T&lt;/code&gt;.  If &lt;code&gt;T&lt;/code&gt; is a class derived from &lt;code&gt;Object&lt;/code&gt;, the the result of &lt;a href=&quot;#TransitiveBaseTypeTuple&quot;&gt;&lt;code&gt;TransitiveBaseTypeTuple&lt;/code&gt;&lt;/a&gt; is returned.  If the type is not a built-in value type or a class derived from &lt;code&gt;Object&lt;/code&gt;, the an empty &lt;a href=&quot;std_meta#AliasSeq&quot;&gt;&lt;code&gt;std.meta.AliasSeq&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">&lt;a href=&quot;std_meta#AliasSeq&quot;&gt; &lt;code&gt;std.meta.AliasSeq&lt;/code&gt; &lt;/a&gt;暗黙の変換が可能なすべてのターゲット・タイプと &lt;code&gt;T&lt;/code&gt; 。 &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;Object&lt;/code&gt; から派生したクラスの場合、&lt;a href=&quot;#TransitiveBaseTypeTuple&quot;&gt; &lt;code&gt;TransitiveBaseTypeTuple&lt;/code&gt; &lt;/a&gt;の結果が返されます。型が組み込みの値型または &lt;code&gt;Object&lt;/code&gt; から派生したクラスではない場合、空の&lt;a href=&quot;std_meta#AliasSeq&quot;&gt; &lt;code&gt;std.meta.AliasSeq&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="5357eeb67edd28cef849aec387209e4ff6da64a3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b5ae81b9680ce568443b4c970f3bc5dc366146d8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of &lt;a href=&quot;#DirEntry&quot;&gt;&lt;code&gt;DirEntry&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;の&lt;a href=&quot;#DirEntry&quot;&gt; &lt;code&gt;DirEntry&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f659b816c177344a9a4b993dd7f1f23fa0444745" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of consecutively unique elements in the original range. If &lt;code&gt;r&lt;/code&gt; is also a forward range or bidirectional range, the returned range will be likewise.</source>
          <target state="translated">元の範囲&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;内&lt;/a&gt;の連続して一意の要素の入力範囲。 &lt;code&gt;r&lt;/code&gt; が前方範囲または双方向範囲でもある場合、返される範囲も同様です。</target>
        </trans-unit>
        <trans-unit id="5a3658d6619aac9bf9bbbb396cba995f2c9f0bb3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of elements</source>
          <target state="translated">要素の&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aeb6a5dabc8ee71a80f9364ee1475c7fc12f32a2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of elements to filter.</source>
          <target state="translated">フィルタリングする要素の&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="707d66d0f4a293729b9673f780ebae8dbcfcc3c1" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of elements.</source>
          <target state="translated">要素の&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="33c6aa39a8169309ace06cecc9bf8cd227418643" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of input ranges</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;入力範囲</target>
        </trans-unit>
        <trans-unit id="7e44b358ef6f4995ad58c7e05ef241784818aecf" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of input ranges to be joined.</source>
          <target state="translated">結合する&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;の入力範囲。</target>
        </trans-unit>
        <trans-unit id="db74a7a8ef007cbf994b98f4433445f62a98cc07" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of keys</source>
          <target state="translated">キーの&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="95280f839dfcc7e6fffaf43a757e145f824a67a0" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of segments to assemble the path from.</source>
          <target state="translated">パスをアセンブルするセグメントの&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7b7d7db68f90c0aa95feaeaf3c9f2a490793d047" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of slices of the original range split by whitespace.</source>
          <target state="translated">空白で分割された元の&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;範囲&lt;/a&gt;のスライスの入力範囲。</target>
        </trans-unit>
        <trans-unit id="eb75e1af2690fdd4800075d57086bf1d4208ae4b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of tuples of keys and values.</source>
          <target state="translated">キーと値のタプルの&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="97ff10ecbc90564b57494f893fe51dd077880140" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of values</source>
          <target state="translated">値の&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="133de0070e3c643c203f06c3842a5a65269aacef" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; over the data to be decoded.</source>
          <target state="translated">デコードするデータの&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="05ae651266b6aebe6405ca7d3e9d38d6bbda4a2e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; over the data to be encoded.</source>
          <target state="translated">エンコードするデータの&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="53e90b53eb146e6b34d965149154b8c1b40783a3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; that exposes references to its elements and has assignable elements</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;の要素への参照を公開し、割り当て可能な要素を持っています</target>
        </trans-unit>
        <trans-unit id="ea7d6814c8da44833511f491c47ceb591d626a8d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; that iterates over the bytes of data decoded from a Base64 encoded string.</source>
          <target state="translated">Base64エンコードされた文字列からデコードされたデータのバイトを反復する&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f0e959040d1e17340e8751524e2d4256b8691ac7" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; that iterates over the decoded data of a range of Base64 encodings.</source>
          <target state="translated">Base64エンコーディングの範囲のデコードされたデータを反復する&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="43af4719ff15eb275c1c72c27f3b8376924d9bc1" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; that iterates over the encoded bytes of the given source data.</source>
          <target state="translated">指定されたソースデータのエンコードされたバイトを反復する&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="49c67170189246c824452f09ce0e9b881029c595" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; that iterates over the original range's elements, but ends when the specified predicate becomes true. If the original range is a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; or higher, this range will be a forward range.</source>
          <target state="translated">元の範囲の要素を反復処理するが、指定された述語がtrueになると終了する&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。元の範囲が&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前方範囲&lt;/a&gt;以上の場合、この範囲は前方範囲になります。</target>
        </trans-unit>
        <trans-unit id="f1a22b9c6d64de659aa93282f2a2c09eb16b5f23" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; that iterates over the respective Base64 encodings of a range of data items.</source>
          <target state="translated">データ項目の範囲のそれぞれのBase64エンコードを反復する&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d7f2d0c17c0405fa6b38c89079adc1903c913cb8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to be chunked.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;チャンクします。</target>
        </trans-unit>
        <trans-unit id="c892ebe289689b74313c775aba7569dc3d96121e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; with elements that elements from &lt;code&gt;src&lt;/code&gt; can be moved into.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;からの要素要素と &lt;code&gt;src&lt;/code&gt; が中に移動させることができます。</target>
        </trans-unit>
        <trans-unit id="b62730011ee93bfeac5690d8a28be51290200dce" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; with movable elements.</source>
          <target state="translated">可動要素のある&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="501f3d209c91fc5763279ea66a99a52ae9245f3d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; with the cached values of range</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力レンジ&lt;/a&gt;範囲のキャッシュされた値を持ちます</target>
        </trans-unit>
        <trans-unit id="965b67bd175b57783d700b642e30d67633838585" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;, or any number of implicitly convertible items to insert into &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;、または暗黙的に変換可能な任意の数の項目を挿入する &lt;code&gt;array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="568cafc64895197463cb35df36675af55e4422de" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;output range&lt;/a&gt; which accepts string types, &lt;code&gt;ubyte[]&lt;/code&gt;, individual character types, and individual &lt;code&gt;ubyte&lt;/code&gt;s.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;出力範囲&lt;/a&gt;文字列型、受け付け &lt;code&gt;ubyte[]&lt;/code&gt; 、個々の文字の種類、及び個々 &lt;code&gt;ubyte&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="96659bf0ec2c02c0f163ebb47294be48aeeef57c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_stdio#File&quot;&gt;&lt;code&gt;std.stdio.File&lt;/code&gt;&lt;/a&gt; that allows reading from the child process' standard error stream.</source>
          <target state="translated">子プロセスの標準エラーストリームからの読み取りを可能にする&lt;a href=&quot;std_stdio#File&quot;&gt; &lt;code&gt;std.stdio.File&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="20e84e08d65e61dcd687cc1797aa39066181d9c1" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_stdio#File&quot;&gt;&lt;code&gt;std.stdio.File&lt;/code&gt;&lt;/a&gt; that allows reading from the child process' standard output stream.</source>
          <target state="translated">子プロセスの標準出力ストリームからの読み取りを可能にする&lt;a href=&quot;std_stdio#File&quot;&gt; &lt;code&gt;std.stdio.File&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="53e5c6c6f6f60588aedc9a37247bd45dc00707bc" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std_stdio#File&quot;&gt;&lt;code&gt;std.stdio.File&lt;/code&gt;&lt;/a&gt; that allows writing to the child process' standard input stream.</source>
          <target state="translated">子プロセスの標準入力ストリームへの書き込みを可能にする&lt;a href=&quot;std_stdio#File&quot;&gt; &lt;code&gt;std.stdio.File&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3e9533a6a3d9a4d55816c193bc0f53b935c22f6d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;template#variadic-templates&quot;&gt;expression sequence&lt;/a&gt; of all struct fields - see &lt;a href=&quot;class#class_properties&quot;&gt;Class Properties&lt;/a&gt; for a class-based example.</source>
          <target state="translated">すべての構造体フィールドの&lt;a href=&quot;template#variadic-templates&quot;&gt;式シーケンス&lt;/a&gt; - &lt;a href=&quot;class#class_properties&quot;&gt;クラス&lt;/a&gt;ベースの例については、クラスプロパティを参照してください。</target>
        </trans-unit>
        <trans-unit id="f3a6583818c5f8f234b1ec03cdc9d796a3fa7ebe" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Address&lt;/code&gt; instance representing specified address.</source>
          <target state="translated">指定された &lt;code&gt;Address&lt;/code&gt; 表すAddressインスタンス。</target>
        </trans-unit>
        <trans-unit id="56e2323d99083365dfdf1e12a30b245e969af361" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AliasSeq&lt;/code&gt; containing the values produced by iterating over &lt;code&gt;iter&lt;/code&gt;.</source>
          <target state="translated">AN &lt;code&gt;AliasSeq&lt;/code&gt; を反復することによって生成された値を含む &lt;code&gt;iter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8cfdc9c8275278162fbcaa5be1463495fde71d3" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AliasSeq&lt;/code&gt; filtered by the selected stride.</source>
          <target state="translated">アン &lt;code&gt;AliasSeq&lt;/code&gt; は、選択したストライドで濾過しました。</target>
        </trans-unit>
        <trans-unit id="20aff1a9df323b6df7883ad0a1e714a382dae9ef" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AliasSeq&lt;/code&gt; of &lt;code&gt;args&lt;/code&gt; with &lt;code&gt;out&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt;, and &lt;code&gt;lazy&lt;/code&gt; saved.</source>
          <target state="translated">&lt;code&gt;AliasSeq&lt;/code&gt; の &lt;code&gt;args&lt;/code&gt; を持つ &lt;code&gt;out&lt;/code&gt; 、 &lt;code&gt;ref&lt;/code&gt; 、および &lt;code&gt;lazy&lt;/code&gt; 保存。</target>
        </trans-unit>
        <trans-unit id="94b6f12ba21ae4feae1b40330f4a8aa9e0a73296" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Exception&lt;/code&gt; if all of the ranges are not the same length and &lt;code&gt;sp&lt;/code&gt; is set to &lt;code&gt;StoppingPolicy.requireSameLength&lt;/code&gt;.</source>
          <target state="translated">すべての範囲が同じ長さではなく、 &lt;code&gt;sp&lt;/code&gt; が &lt;code&gt;StoppingPolicy.requireSameLength&lt;/code&gt; に設定されている場合の &lt;code&gt;Exception&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d61cad630058a64dcee11973cf4730e528fa9b3" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Interval&lt;/code&gt; has a starting point and an end point. The interval of time is therefore the time starting at the starting point up to, but not including, the end point. e.g.</source>
          <target state="translated">アン &lt;code&gt;Interval&lt;/code&gt; の開始点と終了点を持っています。したがって、時間間隔は、開始点から開始点までの時間であり、終了点は含みません。例えば</target>
        </trans-unit>
        <trans-unit id="11231347c4e1b61534c1256649e8160ffb845ccb" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;enum&lt;/code&gt; of type &lt;code&gt;Target&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;Target&lt;/code&gt; の &lt;code&gt;enum&lt;/code&gt; 型</target>
        </trans-unit>
        <trans-unit id="5f32443fe48d10edfa532d0732e99edf167154d6" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;extern&lt;/code&gt; declaration can optionally be followed by an &lt;code&gt;extern&lt;/code&gt;&lt;a href=&quot;attribute#linkage&quot;&gt;linkage attribute&lt;/a&gt;. If there is no linkage attribute it defaults to &lt;code&gt;extern(D)&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;extern&lt;/code&gt; 宣言は、必要に応じて続くことができる &lt;code&gt;extern&lt;/code&gt; &lt;a href=&quot;attribute#linkage&quot;&gt;リンケージ属性&lt;/a&gt;。リンケージ属性がない場合は、デフォルトで &lt;code&gt;extern(D)&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="cb13928ebe13144a8f0cde9175549c7ca8ef3240" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; that is 0 if the strings match, &amp;lt;0 if &lt;code&gt;r1&lt;/code&gt; is lexicographically &quot;less&quot; than &lt;code&gt;r2&lt;/code&gt;, &amp;gt;0 if &lt;code&gt;r1&lt;/code&gt; is lexicographically &quot;greater&quot; than &lt;code&gt;r2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 文字列が一致する場合は0であり、&amp;lt;0の場合 &lt;code&gt;r1&lt;/code&gt; 辞書編集である「以下」より &lt;code&gt;r2&lt;/code&gt; 、&amp;gt; 0の場合 &lt;code&gt;r1&lt;/code&gt; 辞書よりも「大きい」であり、 &lt;code&gt;r2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="efb2860a0ceaf8160fc6745198e13de4de19934e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; that is 0 if the strings match, &amp;lt;0 if &lt;code&gt;str1&lt;/code&gt; is lexicographically &quot;less&quot; than &lt;code&gt;str2&lt;/code&gt;, &amp;gt;0 if &lt;code&gt;str1&lt;/code&gt; is lexicographically &quot;greater&quot; than &lt;code&gt;str2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; &amp;lt;0の場合、文字列が一致する場合は0で、 &lt;code&gt;str1&lt;/code&gt; がより辞書順で「小さい」である &lt;code&gt;str2&lt;/code&gt; 、&amp;gt; 0の場合 &lt;code&gt;str1&lt;/code&gt; 辞書順よりも「大きい」です &lt;code&gt;str2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd2a5ae8ac277d08cffcbd8287934b6c72d5390c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;std.typecons.Tuple!(bool, &quot;terminated&quot;, int, &quot;status&quot;)&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;std.typecons.Tuple!(bool, &quot;terminated&quot;, int, &quot;status&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b29fdcb57cf0f2aa50c1917aef7ee2d7326de41" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;std.typecons.Tuple!(int, &quot;status&quot;, string, &quot;output&quot;)&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;std.typecons.Tuple!(int, &quot;status&quot;, string, &quot;output&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44325a188ea9f569f00f25fe1293e0a22a6a319a" translate="yes" xml:space="preserve">
          <source>An Associative Array can be iterated in key/value fashion using a &lt;a href=&quot;statement#ForeachStatement&quot;&gt;foreach statement&lt;/a&gt;. As an example, the number of occurrences of all possible substrings of length 2 (aka 2-mers) in a string will be counted:</source>
          <target state="translated">連想配列は、&lt;a href=&quot;statement#ForeachStatement&quot;&gt;foreachステートメント&lt;/a&gt;を使用してキー/値の形式で反復できます。例として、文字列内のすべての長さ2（別名2 mer）の可能なすべての部分文字列の出現回数がカウントされます。</target>
        </trans-unit>
        <trans-unit id="a90c85005c067a015cf8ee553e7e07506f3cb661" translate="yes" xml:space="preserve">
          <source>An Associative Array defaults to &lt;code&gt;null&lt;/code&gt;, and is constructed upon assigning the first key/value pair. However, once constructed, an associative array has</source>
          <target state="translated">連想配列のデフォルトは &lt;code&gt;null&lt;/code&gt; で、最初のキーと値のペアを割り当てると作成されます。ただし、作成されると、連想配列には</target>
        </trans-unit>
        <trans-unit id="20dacc2ff7dcec50b018c97c25042104ca6d5e2d" translate="yes" xml:space="preserve">
          <source>An N-dimensional array with individual elements of type T.</source>
          <target state="translated">T型の個々の要素を持つN次元配列.</target>
        </trans-unit>
        <trans-unit id="487b65ed273d46d619268b1cf5574bd84b4db939" translate="yes" xml:space="preserve">
          <source>An OutputRange for accepting possibly piecewise segments of the formatted string.</source>
          <target state="translated">フォーマットされた文字列の断片的なセグメントを受け付けるためのOutputRange.</target>
        </trans-unit>
        <trans-unit id="374153a385906e41868a8afe177a5c76f263689c" translate="yes" xml:space="preserve">
          <source>An OutputRange that discards the data it receives.</source>
          <target state="translated">受信したデータを破棄するOutputRange。</target>
        </trans-unit>
        <trans-unit id="e7013471ca7cfba239c38e91976beb8fce0d63dd" translate="yes" xml:space="preserve">
          <source>An abstract character does not necessarily correspond to what a user thinks of as a &amp;ldquo;character&amp;rdquo; and should not be confused with a &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">抽象文字は、ユーザーが「文字」と考えるものに必ずしも対応していないため、&lt;a href=&quot;#Grapheme&quot;&gt; &lt;code&gt;Grapheme&lt;/code&gt; &lt;/a&gt;と混同しないでください。</target>
        </trans-unit>
        <trans-unit id="fdba09e2a7de450eb20cc61c51e59eb62e78cd9a" translate="yes" xml:space="preserve">
          <source>An abstract character has no concrete form and should not be confused with a &lt;a href=&quot;#Glyph&quot;&gt;glyph&lt;/a&gt;.</source>
          <target state="translated">抽象文字には具体的な形式がなく、&lt;a href=&quot;#Glyph&quot;&gt;グリフ&lt;/a&gt;と混同しないでください。</target>
        </trans-unit>
        <trans-unit id="5231e46b8fbe9153560533f1e9c30f8aa007e730" translate="yes" xml:space="preserve">
          <source>An abstract member function must be overridden by a derived class. Only virtual member functions may be declared abstract; non-virtual member functions and free-standing functions cannot be declared abstract.</source>
          <target state="translated">抽象メンバ関数は、派生クラスによってオーバーライドされる必要があります。抽象宣言できるのは仮想メンバ関数のみで、非仮想メンバ関数および自立関数は抽象宣言できません。</target>
        </trans-unit>
        <trans-unit id="4533566ebe9595ef8c3fb7a85a6b2b8cded96094" translate="yes" xml:space="preserve">
          <source>An additional hidden argument with the name &lt;code&gt;_arguments&lt;/code&gt; and type &lt;code&gt;TypeInfo[]&lt;/code&gt; is passed to the function. &lt;code&gt;_arguments&lt;/code&gt; gives the number of arguments and the type of each, enabling type safety to be checked at run time.</source>
          <target state="translated">名前が &lt;code&gt;_arguments&lt;/code&gt; でタイプが &lt;code&gt;TypeInfo[]&lt;/code&gt; の追加の隠し引数が関数に渡されます。 &lt;code&gt;_arguments&lt;/code&gt; は引数の数とそれぞれの型を提供し、実行時に型の安全性をチェックできるようにします。</target>
        </trans-unit>
        <trans-unit id="3b6d0293666de158be3f12d22968c31c56140ac3" translate="yes" xml:space="preserve">
          <source>An adjustor thunk looks like:</source>
          <target state="translated">アジャスターのサンクはこんな感じ。</target>
        </trans-unit>
        <trans-unit id="0847d49328423d89a734c43cd88e9b79a0544a70" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;minAlign&lt;/code&gt;, which must be a valid alignment (nonzero power of 2). The start of the region and all allocation requests will be rounded up to a multiple of the alignment.</source>
          <target state="translated">有効なアライメント（ゼロ以外の2の &lt;code&gt;minAlign&lt;/code&gt; ）でなければならないminAlignのエイリアス。リージョンの開始とすべての割り当てリクエストは、アライメントの倍数に切り上げられます。</target>
        </trans-unit>
        <trans-unit id="9993ac9ea2f6651d34b1aa2a448a3c14badfcb90" translate="yes" xml:space="preserve">
          <source>An alternate form of wysiwyg strings are enclosed by backquotes, the ` character.</source>
          <target state="translated">別形式のwysiwyg文字列はバッククォートで囲まれています。</target>
        </trans-unit>
        <trans-unit id="ffb2ff8aaa0d0c4fff2997632dac364705c0344c" translate="yes" xml:space="preserve">
          <source>An alternative version of curl_multi_perform() that allows the application to pass in one of the file descriptors that have been detected to have &quot;action&quot; on them and let libcurl perform. See man page for details.</source>
          <target state="translated">curl_multi_perform()の代替バージョンで、アプリケーションが「アクション」を持つことが検出されたファイルディスクリプタのいずれかを渡して libcurl に実行させることを可能にします。詳細は man ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="67aef8339b904d4fa6032e3895c0a4baeec8d2c9" translate="yes" xml:space="preserve">
          <source>An anonymous nested class is both defined and instantiated with a</source>
          <target state="translated">匿名のネストされたクラスは、定義されているだけでなく、インスタンス化されているのも</target>
        </trans-unit>
        <trans-unit id="d63365263610e01c1d62435a1eb9cc035af6a065" translate="yes" xml:space="preserve">
          <source>An anonymous struct with the members &lt;code&gt;isoWeekYear&lt;/code&gt; for the resulting year and &lt;code&gt;isoWeek&lt;/code&gt; for the resulting ISO week.</source>
          <target state="translated">メンバーとの匿名の構造体が &lt;code&gt;isoWeekYear&lt;/code&gt; 結果の年とするために &lt;code&gt;isoWeek&lt;/code&gt; たISO週のため。</target>
        </trans-unit>
        <trans-unit id="d6df80b73f182ab7ff7950f3a7e97396adcc2088" translate="yes" xml:space="preserve">
          <source>An arbitrary-precision integer type.</source>
          <target state="translated">任意精度の整数型。</target>
        </trans-unit>
        <trans-unit id="a3c537c68c1280a36448d29d7b84b05b6066936e" translate="yes" xml:space="preserve">
          <source>An argument to a &lt;code&gt;lazy&lt;/code&gt; parameter is not evaluated before the function is called. The argument is only evaluated if/when the parameter is evaluated within the function. Hence, a &lt;code&gt;lazy&lt;/code&gt; argument can be executed 0 or more times.</source>
          <target state="translated">引数 &lt;code&gt;lazy&lt;/code&gt; 関数が呼び出される前に、パラメータが評価されません。引数は、パラメーターが関数内で評価される場合にのみ評価されます。したがって、 &lt;code&gt;lazy&lt;/code&gt; 引数は0回以上実行できます。</target>
        </trans-unit>
        <trans-unit id="ea18ca730a0aa21281c1af9096a60b9ecf44e189" translate="yes" xml:space="preserve">
          <source>An array containing references to all threads currently being tracked by the system. The result of deleting any contained objects is undefined.</source>
          <target state="translated">現在システムが追跡しているすべてのスレッドへの参照を含む配列。含まれるオブジェクトを削除した結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="77815bde2a83a1011d8ecf1e77f89465ef4b38cb" translate="yes" xml:space="preserve">
          <source>An array containing the divided parts of &lt;code&gt;range&lt;/code&gt; (or the words of &lt;code&gt;s&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; の分割された部分（または &lt;code&gt;s&lt;/code&gt; の単語）を含む配列。</target>
        </trans-unit>
        <trans-unit id="daec8cadf3d6935e405e9c172ddf7e64c36f7c31" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;Statement&lt;/code&gt;s, that will referenced by this class</source>
          <target state="translated">このクラスによって参照される &lt;code&gt;Statement&lt;/code&gt; の配列</target>
        </trans-unit>
        <trans-unit id="29fa536473a8fa6b0ec875c2597efa9dce1d5e34" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;T&lt;/code&gt; with &lt;code&gt;I.length&lt;/code&gt; dimensions.</source>
          <target state="translated">配列 &lt;code&gt;T&lt;/code&gt; と &lt;code&gt;I.length&lt;/code&gt; 寸法。</target>
        </trans-unit>
        <trans-unit id="479c220b9bb5c5c461e1a646be4bf0d486b927a9" translate="yes" xml:space="preserve">
          <source>An array of complex numbers representing the transformed data in the frequency domain.</source>
          <target state="translated">周波数領域で変換されたデータを表す複素数の配列.</target>
        </trans-unit>
        <trans-unit id="f0621e8fe8af51735a47c76956cd2a28911a1a9f" translate="yes" xml:space="preserve">
          <source>An array of elements</source>
          <target state="translated">要素の配列</target>
        </trans-unit>
        <trans-unit id="7326b4532e3c0a6987d70e29c99a0d57edd13a68" translate="yes" xml:space="preserve">
          <source>An array of path to D modules</source>
          <target state="translated">D モジュールへのパスの配列</target>
        </trans-unit>
        <trans-unit id="fbfc4f55870a8b45855e77b9502741089e3999c7" translate="yes" xml:space="preserve">
          <source>An array of paths to assemble.</source>
          <target state="translated">アセンブルするパスの配列。</target>
        </trans-unit>
        <trans-unit id="6eeb3c945dc78c366a34ecd56e6cc4c9081dc7db" translate="yes" xml:space="preserve">
          <source>An array of regular expression strings. The resulting &lt;code&gt;Regex&lt;/code&gt; object will match any expression; use &lt;a href=&quot;#whichPattern&quot;&gt;&lt;code&gt;whichPattern&lt;/code&gt;&lt;/a&gt; to know which.</source>
          <target state="translated">正規表現文字列の配列。結果の &lt;code&gt;Regex&lt;/code&gt; オブジェクトは任意の式に一致します。&lt;a href=&quot;#whichPattern&quot;&gt; &lt;code&gt;whichPattern&lt;/code&gt; &lt;/a&gt;を使用して、どれかを確認します。</target>
        </trans-unit>
        <trans-unit id="418fbbabc9dc07ec6379ba1dda3419b4c8dd83da" translate="yes" xml:space="preserve">
          <source>An array of type &lt;code&gt;Target&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;Target&lt;/code&gt; の配列</target>
        </trans-unit>
        <trans-unit id="81574167760f6ba7a1bdd1dc1d384e2cfcd701d9" translate="yes" xml:space="preserve">
          <source>An array or asssociative array literal. &lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt; is the length of the array. &lt;a href=&quot;#Value&quot;&gt;&lt;i&gt;Value&lt;/i&gt;&lt;/a&gt; is repeated &lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt; times for a normal array, and 2 * &lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt; times for an associative array.</source>
          <target state="translated">配列または連想配列リテラル。&lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;数値&lt;/i&gt;&lt;/a&gt;は配列の長さです。&lt;a href=&quot;#Value&quot;&gt;&lt;i&gt;値&lt;/i&gt;&lt;/a&gt;は、通常の配列では&lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt;回繰り返され、連想配列では2 * &lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt;回繰り返されます。</target>
        </trans-unit>
        <trans-unit id="039c70efd683d3e9b93b4df14d2d6d5c5145b436" translate="yes" xml:space="preserve">
          <source>An array that consists of &lt;code&gt;s&lt;/code&gt; repeated &lt;code&gt;n&lt;/code&gt; times. This function allocates, fills, and returns a new array.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; を &lt;code&gt;n&lt;/code&gt; 回繰り返して構成される配列。この関数は、新しい配列を割り当て、入力し、返します。</target>
        </trans-unit>
        <trans-unit id="17d3bd6e24229484523be9a3c75e2496e09c2fce" translate="yes" xml:space="preserve">
          <source>An array which contains the program name as the zeroth element and any command-line arguments in the following elements.</source>
          <target state="translated">0 番目の要素にプログラム名を、次の要素にコマンドライン引数を含む配列。</target>
        </trans-unit>
        <trans-unit id="1ab896a4e586f016dcbd9051e137d42864250451" translate="yes" xml:space="preserve">
          <source>An array which contains the program name as the zeroth element and any command-line arguments in the following elements. (See &lt;a href=&quot;#spawnProcess&quot;&gt;&lt;code&gt;spawnProcess&lt;/code&gt;&lt;/a&gt; for details.)</source>
          <target state="translated">0番目の要素としてプログラム名を含み、次の要素のコマンドライン引数を含む配列。（詳細については、&lt;a href=&quot;#spawnProcess&quot;&gt; &lt;code&gt;spawnProcess&lt;/code&gt; &lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="3b92a8e452fa62db1566192e1dffdc9e80610f68" translate="yes" xml:space="preserve">
          <source>An array with the same element type as &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; と同じ要素型の配列。</target>
        </trans-unit>
        <trans-unit id="598dedc2bf0e9cd988bf5a32f1e674f47e9054d4" translate="yes" xml:space="preserve">
          <source>An asm statement enables the direct use of assembly language instructions. This makes it easy to obtain direct access to special CPU features without resorting to an external assembler. The D compiler will take care of the function calling conventions, stack setup, etc.</source>
          <target state="translated">asm ステートメントは、アセンブリ言語命令の直接使用を可能にします。これにより、外部のアセンブラに頼ることなく、特別なCPU機能に直接アクセスすることが容易になります。D コンパイラは関数の呼び出し規則やスタックの設定などを行います。</target>
        </trans-unit>
        <trans-unit id="8302b7bfc189e1b4c0ac50685a98310945e13267" translate="yes" xml:space="preserve">
          <source>An associative array can be tested to see if an element is in the array:</source>
          <target state="translated">連想配列は、要素が配列の中にあるかどうかを調べることができます。</target>
        </trans-unit>
        <trans-unit id="49ca254b18c53b1fdc472fc9a630aa9f28626fc3" translate="yes" xml:space="preserve">
          <source>An associative array is safe when all its keys and elements are safe.</source>
          <target state="translated">連想配列は、すべてのキーと要素が安全な場合に安全です。</target>
        </trans-unit>
        <trans-unit id="63634bc46188cedd4498192107dab899f5055fcb" translate="yes" xml:space="preserve">
          <source>An associative array mapping elements to weights.</source>
          <target state="translated">要素を重みに対応させた連想配列。</target>
        </trans-unit>
        <trans-unit id="ff67502c32274c3ab17b5bd51317488c7f9e8d17" translate="yes" xml:space="preserve">
          <source>An associative array of type &lt;code&gt;Target&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;Target&lt;/code&gt; の連想配列</target>
        </trans-unit>
        <trans-unit id="956aeaeb58bfe5aa034cd122a587434b8ac88521" translate="yes" xml:space="preserve">
          <source>An attacker wants to send harmful data to your server, which requires a integrity HMAC SHA1 token signed with a secret.</source>
          <target state="translated">攻撃者は有害なデータをサーバに送信しようとしますが、これには秘密で署名された整合性のある HMAC SHA1 トークンが必要です。</target>
        </trans-unit>
        <trans-unit id="be28bdcc45d4da897969c562a4da4fd240bfaeb2" translate="yes" xml:space="preserve">
          <source>An attractive feature of UUIDs when compared to alternatives is their relative small size, of 128 bits, or 16 bytes. Another is that the creation of UUIDs does not require a centralized authority.</source>
          <target state="translated">代替品と比較した場合のUUIDの魅力的な特徴は、128ビット(16バイト)という比較的小さなサイズであることです。もう一つは、UUIDの作成に中央集権的な権限を必要としないことです。</target>
        </trans-unit>
        <trans-unit id="7195e6cce01f1fb7dad70c303c1f8649fcd1f03b" translate="yes" xml:space="preserve">
          <source>An auto function is declared without a return type. If it does not already have a storage class, use the auto storage class.</source>
          <target state="translated">auto関数はreturn型を持たずに宣言されています。既にストレージクラスを持っていない場合は、オートストレージクラスを使用します。</target>
        </trans-unit>
        <trans-unit id="03d538bd3cecd7df878dcb400c90734b77cf2b23" translate="yes" xml:space="preserve">
          <source>An auto ref function template parameter becomes a ref parameter if its corresponding argument is an lvalue, otherwise it becomes a value parameter:</source>
          <target state="translated">auto ref関数のテンプレートパラメータは、対応する引数がlvalueであればrefパラメータになり、そうでなければvalueパラメータになります。</target>
        </trans-unit>
        <trans-unit id="14284ad6c006c28b3ea6130bf5b64152ddb04c86" translate="yes" xml:space="preserve">
          <source>An eager version of &lt;code&gt;splitter&lt;/code&gt; that creates an array with splitted slices of &lt;code&gt;input&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; スライスが &lt;code&gt;splitter&lt;/code&gt; れた配列を作成する、積極的なバージョンのスプリッター。</target>
        </trans-unit>
        <trans-unit id="9d74290ce6e26cbf9d133491fbe882725c8fd224" translate="yes" xml:space="preserve">
          <source>An earlier version of the documentation incorrectly stated that &lt;code&gt;-1&lt;/code&gt; is the only negative value returned and &lt;code&gt;1&lt;/code&gt; is the only positive value returned. Whether that is true depends on the types being compared.</source>
          <target state="translated">以前のバージョンのドキュメントでは、 &lt;code&gt;-1&lt;/code&gt; が唯一の負の値が返され、 &lt;code&gt;1&lt;/code&gt; が唯一の正の値が返されると誤って記述されていました。これが正しいかどうかは、比較される型によって異なります。</target>
        </trans-unit>
        <trans-unit id="564af87619e62a538d43ce07aa464a50505648ac" translate="yes" xml:space="preserve">
          <source>An email status code, indicating if an email address is valid or not. If it is invalid it also indicates why.</source>
          <target state="translated">電子メールのステータスコードで、電子メールアドレスが有効かどうかを示します。無効な場合は、その理由も示します。</target>
        </trans-unit>
        <trans-unit id="57821790126b7d9653db7d5ab96220cb8a8449b5" translate="yes" xml:space="preserve">
          <source>An embedded list builds a most-recently-used strategy: the most recent allocators used in calls to either &lt;code&gt;allocate&lt;/code&gt;, &lt;code&gt;owns&lt;/code&gt; (successful calls only), or &lt;code&gt;deallocate&lt;/code&gt; are tried for new allocations in order of their most recent use. Thus, although core operations take in theory &amp;Omicron;(&lt;code&gt;k&lt;/code&gt;) time for &lt;code&gt;k&lt;/code&gt; allocators in current use, in many workloads the factor is sublinear. Details of the actual strategy may change in future releases.</source>
          <target state="translated">埋め込まれたリストは、最近使用された戦略を構築します &lt;code&gt;allocate&lt;/code&gt; 、 &lt;code&gt;owns&lt;/code&gt; （成功した呼び出しのみ）、または &lt;code&gt;deallocate&lt;/code&gt; のいずれかの呼び出しで使用される最新のアロケーターは、最近の使用順に新しい割り当てに対して試行されます。したがって、コア操作は理論的には現在使用中の &lt;code&gt;k&lt;/code&gt; アロケーターの&amp;Omicron;（ &lt;code&gt;k&lt;/code&gt; ）時間を要しますが、多くのワークロードでは係数は準線形です。実際の戦略の詳細は、将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="7e2d7c3c03945c2979ade27d1766c3427f23af71" translate="yes" xml:space="preserve">
          <source>An empty enum body (For example &lt;code&gt;enum E;&lt;/code&gt;) signifies an opaque enum - the enum members are unknown.</source>
          <target state="translated">空の列挙体（たとえば、 &lt;code&gt;enum E;&lt;/code&gt; ）は不透明な列挙を示します-列挙メンバーは不明です。</target>
        </trans-unit>
        <trans-unit id="182b823f47405fe4bd517067833d2431e24dcb91" translate="yes" xml:space="preserve">
          <source>An empty range.</source>
          <target state="translated">空の範囲。</target>
        </trans-unit>
        <trans-unit id="1b60e63467d1ead57d7b824f987eda3203e244a7" translate="yes" xml:space="preserve">
          <source>An entire program can be written in &lt;b&gt;BetterC&lt;/b&gt; by supplying a C &lt;code&gt;main()&lt;/code&gt; function:</source>
          <target state="translated">Cの &lt;code&gt;main()&lt;/code&gt; 関数を&lt;b&gt;指定&lt;/b&gt;することで、プログラム全体を&lt;b&gt;BetterC&lt;/b&gt;で作成できます。</target>
        </trans-unit>
        <trans-unit id="42f22d22943ec9876daf38f246747335b3206a97" translate="yes" xml:space="preserve">
          <source>An enum can be implicitly converted to its base type, but going the other way requires an explicit conversion. For example:</source>
          <target state="translated">enumは暗黙のうちにベース型に変換することができますが、逆に変換するには明示的な変換が必要です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="20274664503ab2b78599fa35b2c6976d6732af22" translate="yes" xml:space="preserve">
          <source>An enum can have multiple members which have the same value. If you want to use EnumMembers to e.g. generate switch cases at compile-time, you should use the &lt;a href=&quot;std_meta#NoDuplicates&quot;&gt;&lt;code&gt;std.meta.NoDuplicates&lt;/code&gt;&lt;/a&gt; template to avoid generating duplicate switch cases.</source>
          <target state="translated">列挙型には、同じ値を持つ複数のメンバーを含めることができます。EnumMembersを使用して、たとえばコンパイル時にスイッチケースを生成する場合は、&lt;a href=&quot;std_meta#NoDuplicates&quot;&gt; &lt;code&gt;std.meta.NoDuplicates&lt;/code&gt; &lt;/a&gt;テンプレートを使用して、スイッチケースの重複を回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="9ccb5e54934db47a114cb48c08f87f6a9591ebdc" translate="yes" xml:space="preserve">
          <source>An enumerated type. &lt;code&gt;E&lt;/code&gt; may have duplicated values.</source>
          <target state="translated">列挙型。 &lt;code&gt;E&lt;/code&gt; の値が重複している可能性があります。</target>
        </trans-unit>
        <trans-unit id="1735ccd74a7dfbde9ac3516d787c61e34b65fdd9" translate="yes" xml:space="preserve">
          <source>An environment without an operating system (such as Bare-metal targets)</source>
          <target state="translated">OSのない環境(ベアメタルターゲットなど</target>
        </trans-unit>
        <trans-unit id="f809d6288855134dff456bf6ac1c95f894cfd5e3" translate="yes" xml:space="preserve">
          <source>An error message supplied by the user.</source>
          <target state="translated">ユーザーによって提供されたエラーメッセージ。</target>
        </trans-unit>
        <trans-unit id="22b5aeaf7859c416b77cbb971c1f98412c7e91a6" translate="yes" xml:space="preserve">
          <source>An even permutation is one which is produced by swapping an even number of pairs of elements in the original range. The set of</source>
          <target state="translated">偶数並べ替えとは、元の範囲内の要素の偶数のペアを入れ替えて生成されるものです。の集合は</target>
        </trans-unit>
        <trans-unit id="bf3445745f98506a937cbbe828a5f495bdf57758" translate="yes" xml:space="preserve">
          <source>An example Scheduler using Fibers.</source>
          <target state="translated">ファイバーを使ったスケジューラの例</target>
        </trans-unit>
        <trans-unit id="c8895ad0e3d621b831278de48f37930b071bff33" translate="yes" xml:space="preserve">
          <source>An example Scheduler using kernel threads.</source>
          <target state="translated">カーネルスレッドを利用したスケジューラの例</target>
        </trans-unit>
        <trans-unit id="26be4513512b7649f788720ecf8495f76d5a5e27" translate="yes" xml:space="preserve">
          <source>An example using this might be:</source>
          <target state="translated">これを使用した例としては、次のようなものが考えられます。</target>
        </trans-unit>
        <trans-unit id="8a9fd3843ecc8c2de2413f35d41e6dffcb1a7e0f" translate="yes" xml:space="preserve">
          <source>An exception that signals a problem with starting or waiting for a process.</source>
          <target state="translated">プロセスの開始や待ち時間に問題があることを示す例外。</target>
        </trans-unit>
        <trans-unit id="da1bd43b320d9d6951e218332ce5fe294afbcb16" translate="yes" xml:space="preserve">
          <source>An explicit &lt;code&gt;break&lt;/code&gt;/&lt;code&gt;continue&lt;/code&gt; label can be used to avoid this limitation. (Note that &lt;code&gt;static foreach&lt;/code&gt; itself cannot be broken nor continued even if it is explicitly labeled.)</source>
          <target state="translated">明示的な &lt;code&gt;break&lt;/code&gt; / &lt;code&gt;continue&lt;/code&gt; ラベルを使用して、この制限を回避できます。（ &lt;code&gt;static foreach&lt;/code&gt; 自体は、明示的にラベル付けされていても、壊れたり継続したりすることはできません。）</target>
        </trans-unit>
        <trans-unit id="e4c419979ff292482ec7caed76ce12cf20cdff6d" translate="yes" xml:space="preserve">
          <source>An explicit seed may be provided as the first argument. If provided, it is used as the seed for all work units and for the final reduction of results from all work units. Therefore, if it is not the identity value for the operation being performed, results may differ from those generated by &lt;a href=&quot;std_algorithm_iteration#reduce&quot;&gt;&lt;code&gt;std.algorithm.iteration.reduce&lt;/code&gt;&lt;/a&gt; or depending on how many work units are used. The next argument must be the range to be reduced.</source>
          <target state="translated">明示的なシードを最初の引数として提供できます。提供されている場合、すべてのワークユニットのシードとして、およびすべてのワークユニットからの結果の最終的な削減に使用されます。したがって、実行中の操作のID値でない場合、結果は&lt;a href=&quot;std_algorithm_iteration#reduce&quot;&gt; &lt;code&gt;std.algorithm.iteration.reduce&lt;/code&gt; &lt;/a&gt;によって生成されたものとは異なる場合や、使用される作業単位の数によって異なる場合があります。次の引数は、削減する範囲でなければなりません。</target>
        </trans-unit>
        <trans-unit id="813be4ff1857df0549bcdcfd3e08cf103fc4ef9a" translate="yes" xml:space="preserve">
          <source>An explicit work unit size may be specified as the last argument. Specifying too small a work unit size will effectively serialize the reduction, as the final reduction of the result of each work unit will dominate computation time. If &lt;code&gt;TaskPool.size&lt;/code&gt; for this instance is zero, this parameter is ignored and one work unit is used.</source>
          <target state="translated">明示的な作業単位サイズを最後の引数として指定できます。各作業単位の結果の最終的な削減が計算時間を支配するため、小さすぎる作業単位サイズを指定すると、削減が効果的に直列化されます。場合 &lt;code&gt;TaskPool.size&lt;/code&gt; このインスタンスのはゼロであり、このパラメータは無視され、1つの作業ユニットが使用されます。</target>
        </trans-unit>
        <trans-unit id="a0fd613c26e74a1b3f4e55de4f7a9e820062689a" translate="yes" xml:space="preserve">
          <source>An expression is a sequence of operators and operands that specifies an evaluation. The syntax, order of evaluation, and semantics of expressions are as follows.</source>
          <target state="translated">式は、評価を指定する演算子とオペランドのシーケンスです。式の構文、評価の順序、セマンティクスは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="06fe4315b1fb38b822d67e7c040bc5b1f34c50c5" translate="yes" xml:space="preserve">
          <source>An expression may be converted from immutable to mutable if the expression is unique.</source>
          <target state="translated">式が一意である場合、式は不変型から変異型に変換されることがあります。</target>
        </trans-unit>
        <trans-unit id="405b72bbf5cd1ecea0f847f041852bc8f1e21267" translate="yes" xml:space="preserve">
          <source>An expression may be converted from mutable or shared to immutable if the expression is unique and all expressions it transitively refers to are either unique or immutable.</source>
          <target state="translated">式が一意であり、それが透過的に参照するすべての式が一意または不変である場合、式は突然変異可能または共有から不変に変換されることがあります。</target>
        </trans-unit>
        <trans-unit id="038c4cfe80a0e1283f840551b0b9c6235c040703" translate="yes" xml:space="preserve">
          <source>An expression may be converted from mutable to shared if the expression is unique and all expressions it transitively refers to are either unique, immutable, or shared.</source>
          <target state="translated">式が一意であり、それが透過的に参照するすべての式が一意、不変、または共有のいずれかである場合、式は変異可能から共有に変換されます。</target>
        </trans-unit>
        <trans-unit id="1316dd74d7c8ddd73ce90ec6a71f0202d5cfedc3" translate="yes" xml:space="preserve">
          <source>An expression may be converted from shared to mutable if the expression is unique.</source>
          <target state="translated">式が一意であれば、式は共有から変異可能に変換されることがあります。</target>
        </trans-unit>
        <trans-unit id="2ed051b5f24cb3bdb14e7ca6dadf808a8182256e" translate="yes" xml:space="preserve">
          <source>An expression that contains no side effects.</source>
          <target state="translated">副作用を含まない式。</target>
        </trans-unit>
        <trans-unit id="14b91d68f1409c403821f7e2395540ae4efe1e65" translate="yes" xml:space="preserve">
          <source>An expression that discards its result. If the argument is null or not a CommaExp, nothing happens.</source>
          <target state="translated">結果を破棄する式。引数がNULLであるか、CommaExpでない場合は何も起こりません。</target>
        </trans-unit>
        <trans-unit id="2da87c9bf77a96f0a7e8a08472638759b2796da0" translate="yes" xml:space="preserve">
          <source>An identifier that corresponds to each static field in this struct will be placed in the identifier pool.</source>
          <target state="translated">この構造体の各スタティック・フィールドに対応する識別子が、識別子プールに配置されます。</target>
        </trans-unit>
        <trans-unit id="29be0b87cd939460b9a6e031fd7b9746d13400f2" translate="yes" xml:space="preserve">
          <source>An identity assignment overload is required for a struct if one or more of these conditions hold:</source>
          <target state="translated">これらの条件のうち 1 つ以上が満たされている場合、構造体には ID 代入オーバーロードが必要です。</target>
        </trans-unit>
        <trans-unit id="c62cfceef6921debd60c6c989b8a6621704ef9cf" translate="yes" xml:space="preserve">
          <source>An immutable or const type qualifier can be removed with a cast:</source>
          <target state="translated">不変型やconst型の修飾子はキャストで削除することができます。</target>
        </trans-unit>
        <trans-unit id="1978b5c17c98e8bf28acd8b0134128096257bb6e" translate="yes" xml:space="preserve">
          <source>An implementation is free to perform heap compaction and copying so long as no valid GC pointers are invalidated in the process. However, memory allocated with &lt;code&gt;GC.BlkAttr.&lt;a href=&quot;#NO_MOVE&quot;&gt;NO_MOVE&lt;/a&gt;&lt;/code&gt; must not be moved/copied.</source>
          <target state="translated">プロセスで有効なGCポインターが無効にならない限り、実装はヒープの圧縮とコピーを自由に実行できます。ただし、 &lt;code&gt;GC.BlkAttr.&lt;a href=&quot;#NO_MOVE&quot;&gt;NO_MOVE&lt;/a&gt;&lt;/code&gt; 割り当てられたメモリ。NO_MOVEを移動/コピーしてはなりません。</target>
        </trans-unit>
        <trans-unit id="f4a12d968ae65e1a6afdfd511c35a5dc8f841297" translate="yes" xml:space="preserve">
          <source>An implementation may assume that a &lt;code&gt;pure&lt;/code&gt; function that (a) accepts only parameters without mutable indirections, and (b) returns a result without mutable indirections, will have the same effect for all invocation with equivalent arguments, and is allowed to memoize the result of the function under the assumption that equivalent parameters always produce equivalent results. Such functions are termed</source>
          <target state="translated">実装は、と仮定することができる &lt;code&gt;pure&lt;/code&gt; 関数（）可変間接なしパラメータのみを受け入れること、及び（b）は等価引数を持つすべての呼び出しのために同じ効果を有するであろう、可変間接ずに結果を返し、結果をmemoizeさせます同等のパラメーターは常に同等の結果を生成するという仮定の下での関数。そのような機能は</target>
        </trans-unit>
        <trans-unit id="ebe5dd05444d0198f9f66e793ceca70c1980b807" translate="yes" xml:space="preserve">
          <source>An implementation may construct the object or array instance on the stack. Therefore, it is an error to refer to that instance after the variadic function has returned:</source>
          <target state="translated">実装では、オブジェクトや配列のインスタンスをスタック上に構築することができます。そのため、 variadic 関数が戻ってきた後にそのインスタンスを参照するのはエラーです。</target>
        </trans-unit>
        <trans-unit id="74288b66176460a92a66dcc8ea28e93696886600" translate="yes" xml:space="preserve">
          <source>An implementation may perform transformations on floating point computations in order to reduce their strength, i.e. their runtime computation time. Because floating point math does not precisely follow mathematical rules, some transformations are not valid, even though some other programming languages still allow them.</source>
          <target state="translated">実装では、浮動小数点演算の強度、すなわち実行時の計算時間を短縮するために、浮動小数点演算に対して変換を実行することがあります。浮動小数点演算は数学的なルールに正確に従っていないため、他のプログラミング言語では変換が許可されていても、一部の変換は有効ではありません。</target>
        </trans-unit>
        <trans-unit id="3ce778a63881d05f0438cdea7125a850f6f3ff60" translate="yes" xml:space="preserve">
          <source>An implementation may provide a means of overriding the cycle detection abort. A typical method uses the D Runtime switch &lt;code&gt;--DRT-oncycle=...&lt;/code&gt; where the following behaviors are supported:</source>
          <target state="translated">実装は、サイクル検出アボートをオーバーライドする手段を提供する場合があります。一般的な方法では、Dランタイムスイッチ &lt;code&gt;--DRT-oncycle=...&lt;/code&gt; を使用します。ここでは、次の動作がサポートされています。</target>
        </trans-unit>
        <trans-unit id="29f794447dac8202e31e213bb8c23478c8aa558d" translate="yes" xml:space="preserve">
          <source>An implementation may rearrange the evaluation of expressions according to arithmetic associativity and commutativity rules as long as, within that thread of execution, no observable difference is possible.</source>
          <target state="translated">実装は、その実行スレッド内で観察可能な違いがない限り、算術的連想性と可換性のルールに従って式の評価を再配置することができます。</target>
        </trans-unit>
        <trans-unit id="2f7ecd52c6b042334def208ec0513d80f9a2a5ed" translate="yes" xml:space="preserve">
          <source>An import can be explicitly declared</source>
          <target state="translated">インポートは明示的に宣言することができます。</target>
        </trans-unit>
        <trans-unit id="38f4d49a07266de3b15530c1f9a75863df6ff329" translate="yes" xml:space="preserve">
          <source>An improved D function for formatted output is &lt;code&gt;std.stdio.writef()&lt;/code&gt;.</source>
          <target state="translated">フォーマットされた出力用に改善されたD関数は &lt;code&gt;std.stdio.writef()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f9cb97ce4508c3a47fa6274780fa6593ebb6be60" translate="yes" xml:space="preserve">
          <source>An infinity was generated by division by zero</source>
          <target state="translated">ゼロで割ると無限大になる</target>
        </trans-unit>
        <trans-unit id="6890806a1ad6818323e1006abea77b6b3d37709f" translate="yes" xml:space="preserve">
          <source>An infinity was generated by overflow</source>
          <target state="translated">オーバーフローにより無限大が発生</target>
        </trans-unit>
        <trans-unit id="ae9c3bc7805fd7227432d2eaa0eab014f342aca5" translate="yes" xml:space="preserve">
          <source>An initialized &lt;code&gt;RefCounted&lt;/code&gt; containing &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;val&lt;/code&gt; を含む初期化された &lt;code&gt;RefCounted&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87972790a4f1887f61efbff5428d42aa21b25d17" translate="yes" xml:space="preserve">
          <source>An inline comment that is ignored while matching.</source>
          <target state="translated">マッチング中に無視されるインラインコメント。</target>
        </trans-unit>
        <trans-unit id="85da1ce1be9cc229a0d38aa534ff7a6f98704992" translate="yes" xml:space="preserve">
          <source>An input range R as defined by &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;&lt;code&gt;std.range.primitives.isInputRange&lt;/code&gt;&lt;/a&gt;. When &lt;code&gt;Contents&lt;/code&gt; is a struct, class, or an associative array, the element type of R is &lt;code&gt;Contents&lt;/code&gt;, otherwise the element type of R is itself a range with element type &lt;code&gt;Contents&lt;/code&gt;.  If a &lt;code&gt;header&lt;/code&gt; argument is provided, the returned range provides a &lt;code&gt;header&lt;/code&gt; field for accessing the header from the input in array form.</source>
          <target state="translated">定義されるような入力範囲R &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt; &lt;code&gt;std.range.primitives.isInputRange&lt;/code&gt; &lt;/a&gt;。場合 &lt;code&gt;Contents&lt;/code&gt; 構造体、クラス、または連想配列であり、Rの要素タイプは &lt;code&gt;Contents&lt;/code&gt; そうでなければRの要素型は、要素型と範囲自体で、 &lt;code&gt;Contents&lt;/code&gt; 。場合 &lt;code&gt;header&lt;/code&gt; 引数が提供され、返される範囲が提供 &lt;code&gt;header&lt;/code&gt; アレイ状に入力からのヘッダにアクセスするためのフィールド。</target>
        </trans-unit>
        <trans-unit id="8233ac502082d5effa82f80dbc2e0cac66b1db40" translate="yes" xml:space="preserve">
          <source>An input range at minimum. If all of the ranges in &lt;code&gt;rs&lt;/code&gt; provide a range primitive, the returned range will also provide that range primitive.</source>
          <target state="translated">最小入力範囲。 &lt;code&gt;rs&lt;/code&gt; のすべての範囲が範囲プリミティブを提供する場合、返される範囲もその範囲プリミティブを提供します。</target>
        </trans-unit>
        <trans-unit id="e7168e31c32e5919f60149f7ae2d8c075d8657c9" translate="yes" xml:space="preserve">
          <source>An input range of random access ranges</source>
          <target state="translated">ランダムアクセス範囲の入力範囲</target>
        </trans-unit>
        <trans-unit id="e8adc363777a6afb1445324ba10df4840c08d231" translate="yes" xml:space="preserve">
          <source>An input range of the subranges of elements between separators. If &lt;code&gt;r&lt;/code&gt; is a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; or &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;bidirectional range&lt;/a&gt;, the returned range will be likewise. When a range is used a separator, bidirectionality isn't possible.  If an empty range is given, the result is an empty range. If a range with one separator is given, the result is a range with two empty elements.</source>
          <target state="translated">セパレーター間の要素の部分範囲の入力範囲。場合 &lt;code&gt;r&lt;/code&gt; がある&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前進レンジ&lt;/a&gt;又は&lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;双方向範囲&lt;/a&gt;、返される範囲は同様であろう。範囲をセパレータとして使用すると、双方向性は実現できません。空の範囲が指定された場合、結果は空の範囲になります。セパレータが1つの範囲が指定された場合、結果は2つの空の要素を持つ範囲になります。</target>
        </trans-unit>
        <trans-unit id="77fcb0b8936d71a377fcbb398a2e222509a71db3" translate="yes" xml:space="preserve">
          <source>An input range representing the results of the map. This range has a length iff &lt;code&gt;source&lt;/code&gt; has a length.</source>
          <target state="translated">マップの結果を表す入力範囲。この範囲は、 &lt;code&gt;source&lt;/code&gt; 長さがある場合に限り長さがあります。</target>
        </trans-unit>
        <trans-unit id="e3ed7a93b1ad11aa4211044600bdb3f20f6462d6" translate="yes" xml:space="preserve">
          <source>An input range that offers the elements of &lt;code&gt;inputRange&lt;/code&gt;. Regardless of whether &lt;code&gt;inputRange&lt;/code&gt; is a more powerful range (forward, bidirectional etc), the result is always an input range. Reading this causes &lt;code&gt;inputRange&lt;/code&gt; to be iterated and returns its elements in turn. In addition, the same elements will be passed to &lt;code&gt;outputRange&lt;/code&gt; or &lt;code&gt;fun&lt;/code&gt; as well.</source>
          <target state="translated">&lt;code&gt;inputRange&lt;/code&gt; の要素を提供する入力範囲。 &lt;code&gt;inputRange&lt;/code&gt; がより強力な範囲（フォワード、双方向など）であるかどうかに関係なく、結果は常に入力範囲になります。これを &lt;code&gt;inputRange&lt;/code&gt; と、inputRangeが反復され、その要素が順番に返されます。さらに、同じ要素が &lt;code&gt;outputRange&lt;/code&gt; または &lt;code&gt;fun&lt;/code&gt; にも渡されます。</target>
        </trans-unit>
        <trans-unit id="8db0e5d660666f379e5bd5033aea5532a4a6d755" translate="yes" xml:space="preserve">
          <source>An input range, or a single element, to join the ranges on</source>
          <target state="translated">の範囲を結合するための入力範囲、または単一の要素。</target>
        </trans-unit>
        <trans-unit id="53e41ba736cd23d712f10ab5d4286f8a49bbcc4b" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;BoyerMooreFinder&lt;/code&gt; that can be used with &lt;code&gt;find()&lt;/code&gt; to invoke the Boyer-Moore matching algorithm for finding of &lt;code&gt;needle&lt;/code&gt; in a given haystack.</source>
          <target state="translated">指定された &lt;code&gt;BoyerMooreFinder&lt;/code&gt; から &lt;code&gt;needle&lt;/code&gt; を見つけるためのボイヤー・ムーアマッチングアルゴリズムを呼び出す &lt;code&gt;find()&lt;/code&gt; と一緒に使用できるBoyerMooreFinderのインスタンス。</target>
        </trans-unit>
        <trans-unit id="082c7f6d5b0afa12e8dd042a23683a443fd1ed5f" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;RefCounted&lt;/code&gt; is a reference to a structure, which is referred to as the</source>
          <target state="translated">&lt;code&gt;RefCounted&lt;/code&gt; のインスタンスは、構造体への参照です。</target>
        </trans-unit>
        <trans-unit id="81dfbeaffbeddcdca676ca9f6b1f01a2e767b7b5" translate="yes" xml:space="preserve">
          <source>An instance of Class called ClassXXXX.</source>
          <target state="translated">ClassXXXXというクラスのインスタンス。</target>
        </trans-unit>
        <trans-unit id="df7f1cf5303035f4982248b96ae7f8dcd8dbd36d" translate="yes" xml:space="preserve">
          <source>An instance of ModuleInfo is generated into the object file for each compiled module.</source>
          <target state="translated">ModuleInfo のインスタンスは、コンパイルされた各モジュールのオブジェクトファイルに生成されます。</target>
        </trans-unit>
        <trans-unit id="0af1d2f763a9f835d30a298bd5512f1a1ecb310d" translate="yes" xml:space="preserve">
          <source>An instance of Rebindable!T.</source>
          <target state="translated">Rebindable!Tのインスタンス。</target>
        </trans-unit>
        <trans-unit id="f20d76f76289925279727351d584459074c5f577" translate="yes" xml:space="preserve">
          <source>An instance of StaticClassXXXX called StaticXXXX for the static members.</source>
          <target state="translated">StaticClassXXXXのインスタンスで、スタティックメンバのためにStaticXXXXという名前のインスタンスを用意しています。</target>
        </trans-unit>
        <trans-unit id="7588661ba7457b5448344cfc895cdb3b665fc0e3" translate="yes" xml:space="preserve">
          <source>An instance of an interface cannot be created.</source>
          <target state="translated">インターフェイスのインスタンスは作成できません。</target>
        </trans-unit>
        <trans-unit id="0019410ce360e69e8b7f1b0e344a14bdf938e6e9" translate="yes" xml:space="preserve">
          <source>An integer literal may not exceed these values.</source>
          <target state="translated">整数リテラルは、これらの値を超えることはできません。</target>
        </trans-unit>
        <trans-unit id="f9fe6552b2cda57271319df5e41efc135feb5083" translate="yes" xml:space="preserve">
          <source>An integer literal may not exceed those values.</source>
          <target state="translated">整数リテラルは、これらの値を超えることはできません。</target>
        </trans-unit>
        <trans-unit id="3dd1eb0e6607d6d3937d482192de7ee283f310ab" translate="yes" xml:space="preserve">
          <source>An interface is a pointer to a pointer to a vtbl[]. The vtbl[0] entry is a pointer to the corresponding instance of the object.Interface class. The rest of the &lt;code&gt;vtbl[1..$]&lt;/code&gt; entries are pointers to the virtual functions implemented by that interface, in the order that they were declared.</source>
          <target state="translated">インターフェイスは、vtbl []へのポインターへのポインターです。vtbl [0]エントリは、object.Interfaceクラスの対応するインスタンスへのポインタです。残りの &lt;code&gt;vtbl[1..$]&lt;/code&gt; エントリは、宣言された順に、そのインターフェイスによって実装された仮想関数へのポインタです。</target>
        </trans-unit>
        <trans-unit id="f535852beda0178c415bc9fa63dbe96b52f5fffb" translate="yes" xml:space="preserve">
          <source>An interface to a pipe created by the &lt;a href=&quot;#pipe&quot;&gt;&lt;code&gt;pipe&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;#pipe&quot;&gt; &lt;code&gt;pipe&lt;/code&gt; &lt;/a&gt;関数によって作成されたパイプへのインターフェース。</target>
        </trans-unit>
        <trans-unit id="ab4113213830fe7d72486bf84fdb4481ba6c3903" translate="yes" xml:space="preserve">
          <source>An interior pointer to the allocated memory block is sufficient to let the GC know the object is in use; i.e. it is not necessary to maintain a pointer to the</source>
          <target state="translated">割り当てられたメモリブロックへの内部ポインタは、オブジェクトが使用中であることを GC 2011 に知らせるのに十分です。</target>
        </trans-unit>
        <trans-unit id="e468e9d85b8c7d660b637f4814b9ebc7dd018028" translate="yes" xml:space="preserve">
          <source>An interior pointer to the allocated memory block is sufficient to let the GC know the object is in use; i.e. it is not necessary to maintain a pointer to the beginning of the allocated memory.</source>
          <target state="translated">割り当てられたメモリブロックへの内部ポインタは、オブジェクトが使用中であることを GC に知らせるのに十分です。</target>
        </trans-unit>
        <trans-unit id="f380906d548143bc93c92fea41836178dba951d1" translate="yes" xml:space="preserve">
          <source>An invalid IPv4 host address.</source>
          <target state="translated">無効なIPv4ホストアドレスです。</target>
        </trans-unit>
        <trans-unit id="5c151927ff98085446422d3ef9db66acbb3009ff" translate="yes" xml:space="preserve">
          <source>An invalid memory operation error occurs in circumstances when the garbage collector has detected an operation it cannot reliably handle. The default D GC is not re-entrant, so this can happen due to allocations done from within finalizers called during a garbage collection cycle.</source>
          <target state="translated">無効なメモリ操作エラーは、ガベージコレクタが確実に処理できない操作を検出した場合に発生する。デフォルトの D GC はリエントラントではないので、これは、ガベージコレクションサイクル中に呼び出されたファイナライザの中から行われたアロケーションのために起こる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7e1ca0b5740cb0c049a4626d36738a30cd09bcf8" translate="yes" xml:space="preserve">
          <source>An new array with the same element type as &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; と同じ要素型の新しい配列。</target>
        </trans-unit>
        <trans-unit id="b9a13417415c3a89c1b29b77e22f2e53079843b6" translate="yes" xml:space="preserve">
          <source>An object consists of:</source>
          <target state="translated">オブジェクトは構成されています。</target>
        </trans-unit>
        <trans-unit id="4aafa70d4d827025493d92426cb1881df221dd19" translate="yes" xml:space="preserve">
          <source>An object describing the current calling context or null if no handler is supplied.</source>
          <target state="translated">現在の呼び出しコンテキストを記述するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3a620a30bdbf13210b0ac45ebfde607dd57f15dd" translate="yes" xml:space="preserve">
          <source>An object spans a sequence of memory locations which may or may not be contiguous. Its lifetime encompasses construction, destruction, and the period in between. Each object has a type which is determined either statically or by runtime type information. The object's memory locations may include any combination of thread-local, immutable, or shared.</source>
          <target state="translated">オブジェクトは、連続していても連続していなくてもよい一連のメモリロケーションにまたがっています。その寿命は、構築、破壊、そしてその間の期間を含みます。各オブジェクトは、静的に、あるいは実行時の型情報によって決定される型を持っています。オブジェクトのメモリロケーションには、スレッドローカル、不変、共有のいずれかの組み合わせが含まれます。</target>
        </trans-unit>
        <trans-unit id="6ad48c285dfb60c4d3c86eb82873ee83b03c3fe1" translate="yes" xml:space="preserve">
          <source>An object's address is the address of the first byte of the first memory location for that object. Object addresses are distinct unless one object is nested within the other.</source>
          <target state="translated">オブジェクトのアドレスは、そのオブジェクトの最初のメモリ位置の最初のバイトのアドレスです。オブジェクトのアドレスは、1つのオブジェクトが他のオブジェクトの中に入れ子になっていない限り、区別されています。</target>
        </trans-unit>
        <trans-unit id="5be2f170166a5ab81d9f7b1c1bbe46754996b242" translate="yes" xml:space="preserve">
          <source>An object, interface, array slice type, or associative array type.</source>
          <target state="translated">オブジェクト、インターフェイス、配列スライス型、または連想配列型。</target>
        </trans-unit>
        <trans-unit id="46658cef8915a535dc984d5da9a05cb48f404327" translate="yes" xml:space="preserve">
          <source>An opaque type used to represent a logical thread.</source>
          <target state="translated">論理スレッドを表現するために使用される不透明なタイプ。</target>
        </trans-unit>
        <trans-unit id="ac93278e9eecd73148f8d1da8ce3975a03dbd346" translate="yes" xml:space="preserve">
          <source>An operating system handle to the process.</source>
          <target state="translated">プロセスに対するオペレーティングシステムのハンドル。</target>
        </trans-unit>
        <trans-unit id="6f1bf7d22dd547a7812632d87cd15c2924db734c" translate="yes" xml:space="preserve">
          <source>An option can be bound to a function or delegate with the signature &lt;code&gt;void function()&lt;/code&gt;, &lt;code&gt;void function(string option)&lt;/code&gt;, &lt;code&gt;void function(string option, string value)&lt;/code&gt;, or their delegate equivalents.</source>
          <target state="translated">オプションは、シグニチャー &lt;code&gt;void function()&lt;/code&gt; 、 &lt;code&gt;void function(string option)&lt;/code&gt; 、 &lt;code&gt;void function(string option, string value)&lt;/code&gt; 、またはそれらに相当するデリゲートを使用して、関数またはデリゲートにバインドできます。</target>
        </trans-unit>
        <trans-unit id="2b5227e5d32ce42de170098574202aa25566b464" translate="yes" xml:space="preserve">
          <source>An option can be marked as required. If that option is not present in the arguments an exception will be thrown.</source>
          <target state="translated">必要なオプションを指定することができます。そのオプションが引数に存在しない場合は例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="62587f93049001b563bb61577949d667674822d9" translate="yes" xml:space="preserve">
          <source>An option to create &lt;a href=&quot;#FileLogger&quot;&gt;&lt;code&gt;FileLogger&lt;/code&gt;&lt;/a&gt; directory if it is non-existent.</source>
          <target state="translated">&lt;a href=&quot;#FileLogger&quot;&gt; &lt;code&gt;FileLogger&lt;/code&gt; &lt;/a&gt;ディレクトリが存在しない場合に作成するオプション。</target>
        </trans-unit>
        <trans-unit id="64ee06f639f325adeda208d2447a973be665d9e1" translate="yes" xml:space="preserve">
          <source>An optional &lt;code&gt;header&lt;/code&gt; can be provided. The first record will be read in as the header. If &lt;code&gt;Contents&lt;/code&gt; is a struct then the header provided is expected to correspond to the fields in the struct. When &lt;code&gt;Contents&lt;/code&gt; is not a type which can contain the entire record, the &lt;code&gt;header&lt;/code&gt; must be provided in the same order as the input or an exception is thrown.</source>
          <target state="translated">オプションの &lt;code&gt;header&lt;/code&gt; を提供できます。最初のレコードはヘッダーとして読み込まれます。場合 &lt;code&gt;Contents&lt;/code&gt; 構造体であり、次いで設けヘッダは構造体のフィールドに対応することが期待されます。 &lt;code&gt;Contents&lt;/code&gt; がレコード全体を含むことができるタイプではない場合、 &lt;code&gt;header&lt;/code&gt; は入力と同じ順序で提供する必要があります。そうしないと、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="c541908f1a9f1491cf9b9d292e345a7480fb7a54" translate="yes" xml:space="preserve">
          <source>An optional destination buffer.</source>
          <target state="translated">オプションのデスティネーションバッファ。</target>
        </trans-unit>
        <trans-unit id="8208436747ee5979d41650c17a37d3a20bbfe83b" translate="yes" xml:space="preserve">
          <source>An optional list of strings naming each successive field of the &lt;code&gt;Tuple&lt;/code&gt; or a list of types that the elements are being casted to. For a list of names, each name matches up with the corresponding field given by &lt;code&gt;Args&lt;/code&gt;. A name does not have to be provided for every field, but as the names must proceed in order, it is not possible to skip one field and name the next after it. For a list of types, there must be exactly as many types as parameters.</source>
          <target state="translated">&lt;code&gt;Tuple&lt;/code&gt; 連続する各フィールドに名前を付けるオプションの文字列のリスト、または要素がキャストされる型のリスト。名前のリストの場合、各名前は &lt;code&gt;Args&lt;/code&gt; によって指定された対応するフィールドと一致します。すべてのフィールドに名前を付ける必要はありませんが、名前は順番に進む必要があるため、1つのフィールドをスキップして次のフィールドに名前を付けることはできません。タイプのリストの場合、パラメーターと同じ数のタイプが必要です。</target>
        </trans-unit>
        <trans-unit id="301d753d609aee359b108ee54a2daf0751f4373a" translate="yes" xml:space="preserve">
          <source>An optional suffix to be removed from the file name.</source>
          <target state="translated">ファイル名から削除するサフィックスを指定します。</target>
        </trans-unit>
        <trans-unit id="77f5c788c6482dd19248d4d066b4335ce5e940c4" translate="yes" xml:space="preserve">
          <source>An out parameter &lt;code&gt;x&lt;/code&gt; is similar to a ref parameter, except it is initialized with &lt;code&gt;x.init&lt;/code&gt; upon function invocation.</source>
          <target state="translated">outパラメーター &lt;code&gt;x&lt;/code&gt; は、関数の呼び出し時に &lt;code&gt;x.init&lt;/code&gt; で初期化されることを除いて、refパラメーターに似ています。</target>
        </trans-unit>
        <trans-unit id="bbb578323324900d1fe9af43a6b6b06a406772b4" translate="yes" xml:space="preserve">
          <source>An output range for returning the results may be provided as the last argument. If one is not provided, an array of the proper type will be allocated on the garbage collected heap. If one is provided, it must be a random access range with assignable elements, must have reference semantics with respect to assignment to its elements, and must have the same length as the input range. Writing to adjacent elements from different threads must be safe.</source>
          <target state="translated">最後の引数として、結果を返すための出力範囲を指定することができます。1つが提供されない場合、適切な型の配列がガベージコレクションされたヒープに割り当てられます。1つが提供された場合、それは代入可能な要素を持つランダムアクセス範囲でなければならず、その要素への代入に関して参照セマンティクスを持っていなければならず、入力範囲と同じ長さを持っていなければなりません。異なるスレッドからの隣接する要素への書き込みは安全でなければなりません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
