<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="6bfe6a19007538ec5fb08ccab743a444622cb793" translate="yes" xml:space="preserve">
          <source>T[] &lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">T [] &lt;code&gt;array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58134bf5b6f19712d50178d7749ea496b0d8daa3" translate="yes" xml:space="preserve">
          <source>T[] &lt;code&gt;lhs&lt;/code&gt;</source>
          <target state="translated">T [] &lt;code&gt;lhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5628d2ab43a70ae870937d06e7d3037b58e0cf33" translate="yes" xml:space="preserve">
          <source>T[] &lt;code&gt;replacement&lt;/code&gt;</source>
          <target state="translated">T []の &lt;code&gt;replacement&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="57c829d6e8cd9f927bd53d42c0d143e633794f49" translate="yes" xml:space="preserve">
          <source>T[] &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">T [] &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="501f823afa00c9166d3e9cb28fa2878a5b00a78e" translate="yes" xml:space="preserve">
          <source>T[] &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">T [] &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ef449c44efbe8fddbae967e91aa6274a74626ff8" translate="yes" xml:space="preserve">
          <source>T[] &lt;code&gt;slice&lt;/code&gt;</source>
          <target state="translated">T [] &lt;code&gt;slice&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1804b6d6b2c349e294fb0fda2e8153de174d6ad" translate="yes" xml:space="preserve">
          <source>T[] &lt;code&gt;subject&lt;/code&gt;</source>
          <target state="translated">T [] &lt;code&gt;subject&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39d36ff03b89ba5bfa7e455dc369a059c1e6093f" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;connect&quot;&gt;connect&lt;/strong&gt;(T = char)(const(char)[] url, HTTP conn = HTTP())</source>
          <target state="translated">T [] &lt;strong id=&quot;connect&quot;&gt;接続&lt;/strong&gt;（T = char）（const（char）[] url、HTTP conn = HTTP（））</target>
        </trans-unit>
        <trans-unit id="9e84e03dda650697e32dd99a729937cca5635e79" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;(Conn = AutoProtocol, T = char)(const(char)[] url, Conn conn = Conn())</source>
          <target state="translated">T [] &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;（Conn = AutoProtocol、T = char）（const（char）[] url、Conn conn = Conn（））</target>
        </trans-unit>
        <trans-unit id="23707f9ff44ba5ae268af6dda7ba0b79e6271047" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;(T)(size_t length);</source>
          <target state="translated">T [] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;（T）（size_t length）;</target>
        </trans-unit>
        <trans-unit id="2286dc1437b885cda24f9e84258dbd32d8500a9e" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;(T)(size_t length, auto ref T init);</source>
          <target state="translated">T [] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;（T）（size_t length、auto ref T init）;</target>
        </trans-unit>
        <trans-unit id="4cc2d288f77e69c585187c3762094065271e4238" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;(T, Allocator)(auto ref Allocator alloc, size_t length);</source>
          <target state="translated">T [] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;（T、&lt;strong id=&quot;makeArray&quot;&gt;Allocator&lt;/strong&gt;）（auto ref Allocator alloc、size_t length）;</target>
        </trans-unit>
        <trans-unit id="441d57515cdfb2c4d594443d1f59adafce8fb900" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;(T, Allocator)(auto ref Allocator alloc, size_t length, T init);</source>
          <target state="translated">T [] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;（T、&lt;strong id=&quot;makeArray&quot;&gt;Allocator&lt;/strong&gt;）（auto ref Allocator alloc、size_t length、T init）;</target>
        </trans-unit>
        <trans-unit id="7de9c6c9311491f56903128d2dd9fb5d765bb18c" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;(T, Allocator, R)(auto ref Allocator alloc, R range)</source>
          <target state="translated">T [] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;（T、&lt;strong id=&quot;makeArray&quot;&gt;Allocator&lt;/strong&gt;、R）（auto ref Allocator alloc、R range）</target>
        </trans-unit>
        <trans-unit id="8ccab52df8f98925f09cc3d4aae30ea4efdf5ce9" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;(T, R)(R range)</source>
          <target state="translated">T [] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;（T、R）（R範囲）</target>
        </trans-unit>
        <trans-unit id="5d5fd762ffac4fb324635761b8ee3701aab68e05" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;options&quot;&gt;options&lt;/strong&gt;(T = char)(const(char)[] url, HTTP conn = HTTP())</source>
          <target state="translated">T [] &lt;strong id=&quot;options&quot;&gt;オプション&lt;/strong&gt;（T = char）（const（char）[] url、HTTP conn = HTTP（））</target>
        </trans-unit>
        <trans-unit id="f9910bacb7b28cb9aa88edb856c9847168e57f32" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;patch&quot;&gt;patch&lt;/strong&gt;(T = char, PatchUnit)(const(char)[] url, const(PatchUnit)[] patchData, HTTP conn = HTTP())</source>
          <target state="translated">T [] &lt;strong id=&quot;patch&quot;&gt;パッチ&lt;/strong&gt;（T = char、PatchUnit）（const（char）[] url、const（PatchUnit）[] patchData、HTTP conn = HTTP（））</target>
        </trans-unit>
        <trans-unit id="7a3b67182bc94df15db5010b2f5ad18882dfdd00" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;post&quot;&gt;post&lt;/strong&gt;(T = char)(const(char)[] url, string[string] postDict, HTTP conn = HTTP())</source>
          <target state="translated">T [] &lt;strong id=&quot;post&quot;&gt;post&lt;/strong&gt;（T = char）（const（char）[] url、string [string] postDict、HTTP conn = HTTP（））</target>
        </trans-unit>
        <trans-unit id="f3438696601d859117c27da9faa14db225b6ffce" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;post&quot;&gt;post&lt;/strong&gt;(T = char, PostUnit)(const(char)[] url, const(PostUnit)[] postData, HTTP conn = HTTP())</source>
          <target state="translated">T [] &lt;strong id=&quot;post&quot;&gt;post&lt;/strong&gt;（T = char、PostUnit）（const（char）[] url、const（PostUnit）[] postData、HTTP conn = HTTP（））</target>
        </trans-unit>
        <trans-unit id="c81de9d49f0559469a46607c70ad280808942df2" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;(Conn = AutoProtocol, T = char, PutUnit)(const(char)[] url, const(PutUnit)[] putData, Conn conn = Conn())</source>
          <target state="translated">T [] &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;（Conn = AutoProtocol、T = char、PutUnit）（const（char）[] url、const（PutUnit）[] putData、Conn conn = Conn（））</target>
        </trans-unit>
        <trans-unit id="2c18b59a8dad7a9dcf2731ea48247cd6b5e44982" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;rawRead&quot;&gt;rawRead&lt;/strong&gt;(T)(T[] buffer);</source>
          <target state="translated">T [] &lt;strong id=&quot;rawRead&quot;&gt;rawRead&lt;/strong&gt;（T）（T []バッファ）;</target>
        </trans-unit>
        <trans-unit id="5a4cdbd372aee8131ac98774adf20f2ab3c8f5e2" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;replace&quot;&gt;replace&lt;/strong&gt;(T, Range)(T[] subject, size_t from, size_t to, Range stuff)</source>
          <target state="translated">T [] &lt;strong id=&quot;replace&quot;&gt;replace&lt;/strong&gt;（T、Range）（T [] subject、size_t from、size_t to、Range stuff）</target>
        </trans-unit>
        <trans-unit id="29721e59572223e4ecc843236b113543787687cc" translate="yes" xml:space="preserve">
          <source>T[] &lt;strong id=&quot;trace&quot;&gt;trace&lt;/strong&gt;(T = char)(const(char)[] url, HTTP conn = HTTP())</source>
          <target state="translated">T [] &lt;strong id=&quot;trace&quot;&gt;トレース&lt;/strong&gt;（T = char）（const（char）[] url、HTTP conn = HTTP（））</target>
        </trans-unit>
        <trans-unit id="da59e680a9e89d5cf733c59b79b9e33fc313ddfa" translate="yes" xml:space="preserve">
          <source>T[n] &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">T [n] &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6413140250927d3c3028e4b389cd331873b013b" translate="yes" xml:space="preserve">
          <source>T[n] &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt;(T, size_t n)(auto ref T[n] a);</source>
          <target state="translated">T [n] &lt;strong id=&quot;staticArray&quot;&gt;staticArray&lt;/strong&gt;（T、size_t n）（auto ref T [n] a）;</target>
        </trans-unit>
        <trans-unit id="1e17bd5e027f9395f0fbc66fc2872113ef975af6" translate="yes" xml:space="preserve">
          <source>Tab characters are expanded into enough spaces to bring the column number to the next multiple of tabsize. If there are multiple lines in the string, the column number of the last line is returned.</source>
          <target state="translated">タブ文字は、カラム番号がタブサイズの次の倍数になるように十分なスペースに展開されます。文字列の中に複数の行がある場合は、最後の行のカラム番号が返されます。</target>
        </trans-unit>
        <trans-unit id="3fd7f55fffe71e8c3dc62e1b7fa8700d0ebfd5fd" translate="yes" xml:space="preserve">
          <source>Tab columns are &lt;code&gt;tabSize&lt;/code&gt; spaces apart.</source>
          <target state="translated">タブ列は &lt;code&gt;tabSize&lt;/code&gt; のスペースで区切られています。</target>
        </trans-unit>
        <trans-unit id="4c796b0a55684b05bf0ed9597882213077eccf5e" translate="yes" xml:space="preserve">
          <source>Table Name Column Name</source>
          <target state="translated">テーブル名 カラム名</target>
        </trans-unit>
        <trans-unit id="4e7e670649780289d0438a29a3d0ea861c4276d1" translate="yes" xml:space="preserve">
          <source>Table Name Module Name</source>
          <target state="translated">テーブル名 モジュール名</target>
        </trans-unit>
        <trans-unit id="5d11fac764197db4540d89ad29b394fafd9762a3" translate="yes" xml:space="preserve">
          <source>Table Name NULL</source>
          <target state="translated">テーブル名 NULL</target>
        </trans-unit>
        <trans-unit id="a161936c303706124f7c19a878abfd8ff2c93a27" translate="yes" xml:space="preserve">
          <source>Table of Dsymbol's</source>
          <target state="translated">シンボルの表</target>
        </trans-unit>
        <trans-unit id="3eeff86d55fcc208134d68ad71a8213654fc3e35" translate="yes" xml:space="preserve">
          <source>Table of WHERE clause constraints</source>
          <target state="translated">WHERE句の制約の表</target>
        </trans-unit>
        <trans-unit id="193daf137ed8b89de36d47c3df5fd8f66c0e1d14" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="translated">Tables</target>
        </trans-unit>
        <trans-unit id="612331b5145e99bb4f26a3c75fd45f5ee2f15d43" translate="yes" xml:space="preserve">
          <source>Tag &lt;strong id=&quot;tag&quot;&gt;tag&lt;/strong&gt;;</source>
          <target state="translated">タグ&lt;strong id=&quot;tag&quot;&gt;タグ&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="fcf2d565ce96b099f77ff84306963c104e330946" translate="yes" xml:space="preserve">
          <source>Tag name</source>
          <target state="translated">タグ名</target>
        </trans-unit>
        <trans-unit id="45433dd83b3add2fc055c8b55b54bcb84c5efce1" translate="yes" xml:space="preserve">
          <source>Tag types.</source>
          <target state="translated">タグの種類。</target>
        </trans-unit>
        <trans-unit id="ec44347be28a87e8e74c0a208c3212420fd927c4" translate="yes" xml:space="preserve">
          <source>TagType &lt;code&gt;type&lt;/code&gt;</source>
          <target state="translated">TagType &lt;code&gt;type&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07de510038162b6e6f2223208fce3b66b4ed2a21" translate="yes" xml:space="preserve">
          <source>TagType &lt;strong id=&quot;type&quot;&gt;type&lt;/strong&gt;;</source>
          <target state="translated">TagType &lt;strong id=&quot;type&quot;&gt;タイプ&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="68ddd91d0b9671a791224a07e7c4440e749e446a" translate="yes" xml:space="preserve">
          <source>Tagalog</source>
          <target state="translated">Tagalog</target>
        </trans-unit>
        <trans-unit id="d97ec9a0d0dd8012061bd1e25a018f7d246bc720" translate="yes" xml:space="preserve">
          <source>Tagbanwa</source>
          <target state="translated">Tagbanwa</target>
        </trans-unit>
        <trans-unit id="19a746b6a9f44b25060cdd716c403e005d486882" translate="yes" xml:space="preserve">
          <source>Tagging</source>
          <target state="translated">Tagging</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="4b135b3e53c5cc145239c3187b94ca62dbd6cb7b" translate="yes" xml:space="preserve">
          <source>Tai Le</source>
          <target state="translated">泰楽</target>
        </trans-unit>
        <trans-unit id="1db9539327d3176ae71a5b761731fb4af48a8fe9" translate="yes" xml:space="preserve">
          <source>Tai Tham</source>
          <target state="translated">タイサム</target>
        </trans-unit>
        <trans-unit id="d7e1ab091f083eeaf83b355b06db2c427c04167e" translate="yes" xml:space="preserve">
          <source>Tai Viet</source>
          <target state="translated">タイベト</target>
        </trans-unit>
        <trans-unit id="e4265e63ead3083812dc6301eaeef90cd14be23b" translate="yes" xml:space="preserve">
          <source>Tai Xuan Jing Symbols</source>
          <target state="translated">太玄京のシンボル</target>
        </trans-unit>
        <trans-unit id="7ce68ff3f210c997cf191cc3047dad75cfbe97db" translate="yes" xml:space="preserve">
          <source>Tai_Le</source>
          <target state="translated">Tai_Le</target>
        </trans-unit>
        <trans-unit id="30754c9b404b9f791325a342fd0c615c1607ad6a" translate="yes" xml:space="preserve">
          <source>Tai_Tham</source>
          <target state="translated">Tai_Tham</target>
        </trans-unit>
        <trans-unit id="d56a5ea60a6f1aee9d29df15fa3ff172f1ecef8f" translate="yes" xml:space="preserve">
          <source>Tai_Viet</source>
          <target state="translated">Tai_Viet</target>
        </trans-unit>
        <trans-unit id="3a6e9628faafbb48e8084c900458a1167e9901de" translate="yes" xml:space="preserve">
          <source>Take address of an elem.</source>
          <target state="translated">エレムの住所を取る。</target>
        </trans-unit>
        <trans-unit id="7ed2423541f92187f81ba89c0e47dc2169fa6d1b" translate="yes" xml:space="preserve">
          <source>Take address of expression.</source>
          <target state="translated">表現のアドレスを取る。</target>
        </trans-unit>
        <trans-unit id="f3023d6f80703c78f22d59777d1a8edb85e49ba7" translate="yes" xml:space="preserve">
          <source>Take the specified storage class for p, and use the function signature to infer whether STC.scope_ and STC.return_ should be OR'd in. (This will not affect the name mangling.)</source>
          <target state="translated">指定されたストレージクラスをpに取り、関数シグネチャを使用してSTC.scope_とSTC.return_がOR'd inすべきかどうかを推論します。(これは名前のマングリングには影響しません)。</target>
        </trans-unit>
        <trans-unit id="2ae7d68c9a8ce32022cbc269f8e6256fee39b3dd" translate="yes" xml:space="preserve">
          <source>Take!(Repeat!T) &lt;strong id=&quot;repeat&quot;&gt;repeat&lt;/strong&gt;(T)(T value, size_t n);</source>
          <target state="translated">Take！（Repeat！T）&lt;strong id=&quot;repeat&quot;&gt;repeat&lt;/strong&gt;（T）（T value、size_t n）;</target>
        </trans-unit>
        <trans-unit id="6e6b86dc5f1d2d2d57fc97574f2a4df039b4926f" translate="yes" xml:space="preserve">
          <source>Take!R &lt;strong id=&quot;take&quot;&gt;take&lt;/strong&gt;(R)(R input, size_t n)</source>
          <target state="translated">Take！R &lt;strong id=&quot;take&quot;&gt;take&lt;/strong&gt;（R）（R input、size_t n）</target>
        </trans-unit>
        <trans-unit id="ed426f3fc7832efa21a6b239d16998d7c8fcfe33" translate="yes" xml:space="preserve">
          <source>Takes a function of (potentially) many arguments, and returns a function taking one argument and returns a callable taking the rest. f(x, y) == curry(f)(x)(y)</source>
          <target state="translated">(潜在的に)多数の引数を持つ関数を取り、1つの引数を取る関数を返し、残りの引数を取る呼び出し可能な関数を返します。 f(x,y)==curry(f)(x)(y)</target>
        </trans-unit>
        <trans-unit id="c666be996a9eb590eb7e759fbeb5c019d402f50e" translate="yes" xml:space="preserve">
          <source>Takes a path, and escapes '(', ')' and backslashes</source>
          <target state="translated">パスを取り、'(',')' とバックスラッシュをエスケープします。</target>
        </trans-unit>
        <trans-unit id="a768ec454ff2fc5699748e2729d50567f9d815a8" translate="yes" xml:space="preserve">
          <source>Takes a range of &lt;code&gt;ubyte&lt;/code&gt;s and converts the first &lt;code&gt;T.sizeof&lt;/code&gt; bytes to &lt;code&gt;T&lt;/code&gt;. The value returned is converted from the given endianness to the native endianness. The &lt;code&gt;T.sizeof&lt;/code&gt; bytes which are read are consumed from the range.</source>
          <target state="translated">&lt;code&gt;ubyte&lt;/code&gt; の範囲を受け取り、最初の &lt;code&gt;T.sizeof&lt;/code&gt; バイトを &lt;code&gt;T&lt;/code&gt; に変換します。返される値は、指定されたエンディアン方式からネイティブのエンディアン方式に変換されます。 &lt;code&gt;T.sizeof&lt;/code&gt; の読み取られたバイトの範囲から消費されます。</target>
        </trans-unit>
        <trans-unit id="c3eec28def54a57b1683c0b7d90328ed87f45f4b" translate="yes" xml:space="preserve">
          <source>Takes a range of &lt;code&gt;ubyte&lt;/code&gt;s and converts the first &lt;code&gt;T.sizeof&lt;/code&gt; bytes to &lt;code&gt;T&lt;/code&gt;. The value returned is converted from the given endianness to the native endianness. The range is not consumed.</source>
          <target state="translated">&lt;code&gt;ubyte&lt;/code&gt; の範囲を受け取り、最初の &lt;code&gt;T.sizeof&lt;/code&gt; バイトを &lt;code&gt;T&lt;/code&gt; に変換します。返される値は、指定されたエンディアン方式からネイティブのエンディアン方式に変換されます。範囲は消費されません。</target>
        </trans-unit>
        <trans-unit id="c0931566b54e0e12b0cc2d830152964f82a5e6a1" translate="yes" xml:space="preserve">
          <source>Takes a single argument which must evaluate to a function. The result is a &lt;code&gt;ptrdiff_t&lt;/code&gt; containing the index of that function within the vtable of the parent type. If the function passed in is final and does not override a virtual function, &lt;code&gt;-1&lt;/code&gt; is returned instead.</source>
          <target state="translated">関数に評価する必要がある単一の引数を取ります。結果は、親タイプのvtable内のその関数のインデックスを含む &lt;code&gt;ptrdiff_t&lt;/code&gt; です。渡された関数がfinalであり、仮想関数をオーバーライドしない場合は、代わりに &lt;code&gt;-1&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="73485bb17b87f8ff91e94fd45a73f9b37ff413f9" translate="yes" xml:space="preserve">
          <source>Takes a single argument which must evaluate to a symbol. The result is the symbol that is the parent of it.</source>
          <target state="translated">シンボルを評価しなければならない単一の引数を取ります。結果は、その親であるシンボルになります。</target>
        </trans-unit>
        <trans-unit id="68b555869649e369e2a9c66bc322b4d069cde15d" translate="yes" xml:space="preserve">
          <source>Takes a single argument, which must evaluate to either a class type or an expression of class type. The result is of type &lt;code&gt;size_t&lt;/code&gt;, and the value is the number of bytes in the runtime instance of the class type. It is based on the static type of a class, not the polymorphic type.</source>
          <target state="translated">クラス型またはクラス型の式のいずれかに評価される単一の引数を取ります。結果は &lt;code&gt;size_t&lt;/code&gt; 型で、値はクラス型の実行時インスタンスのバイト数です。これは、ポリモーフィック型ではなく、クラスの静的型に基づいています。</target>
        </trans-unit>
        <trans-unit id="2d8031cf5851eb003db968a3a2a2df09d81b77be" translate="yes" xml:space="preserve">
          <source>Takes a single argument, which must evaluate to either a type or an expression of type. A tuple of string literals is returned, each of which is the name of a member of that type combined with all of the members of the base classes (if the type is a class). No name is repeated. Builtin properties are not included.</source>
          <target state="translated">1つの引数を取り、その引数は型または型の式のいずれかに評価されなければなりません。文字列リテラルのタプルが返され、それぞれがその型のメンバの名前と基底クラスのすべてのメンバを組み合わせたものとなります(型がクラスの場合)。名前が繰り返されることはありません。ビルトインプロパティは含まれません。</target>
        </trans-unit>
        <trans-unit id="dd40783a2279d0463b2d5c0633686ce7b34449f6" translate="yes" xml:space="preserve">
          <source>Takes a single argument, which must evaluate to either a type or an expression of type. A tuple of string literals is returned, each of which is the name of a member of that type. No name is repeated. Base class member names are not included. Builtin properties are not included.</source>
          <target state="translated">1つの引数を取り、型または型の式のいずれかを評価する必要があります。文字列リテラルのタプルが返され、それぞれがその型のメンバの名前となります。名前が繰り返されることはありません。基底クラスのメンバ名は含まれません。ビルトイン・プロパティは含まれません。</target>
        </trans-unit>
        <trans-unit id="d5f20921df9fc539092cb622f3740141e759deec" translate="yes" xml:space="preserve">
          <source>Takes a slice by-reference of this &lt;code&gt;Tuple&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Tuple&lt;/code&gt; 参照によるスライスを取得します。</target>
        </trans-unit>
        <trans-unit id="e25d6abbab89b8445585cd2745b5291b0bc5276e" translate="yes" xml:space="preserve">
          <source>Takes a string &lt;code&gt;s&lt;/code&gt; and determines if it represents a number. This function also takes an optional parameter, &lt;code&gt;bAllowSep&lt;/code&gt;, which will accept the separator characters &lt;code&gt;','&lt;/code&gt; and &lt;code&gt;'__'&lt;/code&gt; within the string. But these characters should be stripped from the string before using any of the conversion functions like &lt;code&gt;to!int()&lt;/code&gt;, &lt;code&gt;to!float()&lt;/code&gt;, and etc else an error will occur.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; を受け取り、それが数値を表すかどうかを判断します。この関数は、オプションのパラメーター &lt;code&gt;bAllowSep&lt;/code&gt; も受け取ります。これは、ストリング内の区切り文字 &lt;code&gt;','&lt;/code&gt; および &lt;code&gt;'__'&lt;/code&gt; を受け入れます。ただし、 &lt;code&gt;to!int()&lt;/code&gt; 、 &lt;code&gt;to!float()&lt;/code&gt; などの変換関数を使用する前に、これらの文字を文字列から削除する必要があります。そうしないと、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="ac51856e75b266498c386996a6664e4b6791447a" translate="yes" xml:space="preserve">
          <source>Takes a string made of hexadecimal digits and returns the matching string by converting each pair of digits to a character. The input string can also include white characters, which can be used to keep the literal string readable in the source code.</source>
          <target state="translated">16進数で構成された文字列を受け取り、各桁のペアを文字に変換して一致する文字列を返します。入力文字列には白文字を含めることもできます。これは、ソースコードでリテラル文字列を読みやすくするために使用できます。</target>
        </trans-unit>
        <trans-unit id="b16a8ab6116807bf9a5b760fe03433d82fb6f8c4" translate="yes" xml:space="preserve">
          <source>Takes a string representing an &lt;code&gt;enum&lt;/code&gt; type and returns that type.</source>
          <target state="translated">&lt;code&gt;enum&lt;/code&gt; 型を表す文字列を取り、その型を返します。</target>
        </trans-unit>
        <trans-unit id="80fe0d5034b8dfd00b1ac310a8dc1895ce2c160f" translate="yes" xml:space="preserve">
          <source>Takes a tree of JSON values and returns the serialized string.</source>
          <target state="translated">JSON値のツリーを取得し、シリアライズされた文字列を返します。</target>
        </trans-unit>
        <trans-unit id="b07c2a231c3b1270c1dff6d10774e91b99c52a4f" translate="yes" xml:space="preserve">
          <source>Takes an integral value, converts it to the given endianness, and appends it to the given range of &lt;code&gt;ubyte&lt;/code&gt;s (using &lt;code&gt;put&lt;/code&gt;) as a sequence of &lt;code&gt;T.sizeof&lt;/code&gt;&lt;code&gt;ubyte&lt;/code&gt;s starting at index. &lt;code&gt;hasSlicing!R&lt;/code&gt; must be &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">整数値を &lt;code&gt;ubyte&lt;/code&gt; 、それを指定されたエンディアンに変換し、インデックスから始まる &lt;code&gt;T.sizeof&lt;/code&gt; &lt;code&gt;ubyte&lt;/code&gt; のシーケンスとして（ &lt;code&gt;put&lt;/code&gt; を使用して）指定された範囲のubyteに追加します。 &lt;code&gt;hasSlicing!R&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="9785884790cecbf82ffb0a5c883b32c0d173b2c3" translate="yes" xml:space="preserve">
          <source>Takes an integral value, converts it to the given endianness, and writes it to the given range of &lt;code&gt;ubyte&lt;/code&gt;s as a sequence of &lt;code&gt;T.sizeof&lt;/code&gt;&lt;code&gt;ubyte&lt;/code&gt;s starting at index. &lt;code&gt;hasSlicing!R&lt;/code&gt; must be &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">整数値を &lt;code&gt;ubyte&lt;/code&gt; 、それを指定されたエンディアンに変換し、インデックスで始まる &lt;code&gt;T.sizeof&lt;/code&gt; &lt;code&gt;ubyte&lt;/code&gt; のシーケンスとして、指定された範囲のubyteに書き込みます。 &lt;code&gt;hasSlicing!R&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="a33070f25e55dd5ef7e3c244a5b7a594a908421f" translate="yes" xml:space="preserve">
          <source>Takes multiple functions and adjoins them together.</source>
          <target state="translated">複数の機能を取り、それらを一緒に隣接させます。</target>
        </trans-unit>
        <trans-unit id="ddab590de70993e13bcdedefd109e98917efe98a" translate="yes" xml:space="preserve">
          <source>Takes one argument and returns &lt;code&gt;true&lt;/code&gt; if it's a function declaration marked with &lt;code&gt;@disable&lt;/code&gt;.</source>
          <target state="translated">1つの引数を取り、それが &lt;code&gt;@disable&lt;/code&gt; でマークされた関数宣言で &lt;code&gt;true&lt;/code&gt; 場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="67386c885ba4735db9bc829789113fd7d2afe5a4" translate="yes" xml:space="preserve">
          <source>Takes one argument which is a symbol. To disambiguate between overloads, pass the result of &lt;a href=&quot;#getOverloads&quot;&gt;&lt;i&gt;getOverloads&lt;/i&gt;&lt;/a&gt; with the desired index, to &lt;code&gt;getLocation&lt;/code&gt;. Returns a &lt;code&gt;tuple(string, int, int)&lt;/code&gt; whose entries correspond to the filename, line number and column number where the argument was declared.</source>
          <target state="translated">シンボルである引数を1つ取ります。オーバーロードを明確にするために、目的のインデックスを持つ&lt;a href=&quot;#getOverloads&quot;&gt;&lt;i&gt;getOverloads&lt;/i&gt;&lt;/a&gt;の結果を&lt;i&gt;getLocation&lt;/i&gt;に &lt;code&gt;getLocation&lt;/code&gt; ます。エントリがファイル名、行番号、および引数が宣言された列番号に対応する &lt;code&gt;tuple(string, int, int)&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7c1d6e615645b724c794c3938303d3973c03a63c" translate="yes" xml:space="preserve">
          <source>Takes one argument which must be a type. If the type's &lt;a href=&quot;property#init&quot;&gt;default initializer&lt;/a&gt; is all zero bits then &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">型でなければならない引数を1つ取ります。タイプの&lt;a href=&quot;property#init&quot;&gt;デフォルトの初期化子&lt;/a&gt;がすべて0ビットの場合は &lt;code&gt;true&lt;/code&gt; が返され、それ以外の場合は &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="87bc2cf5ee35cc01493547ac01dad3a717d14b91" translate="yes" xml:space="preserve">
          <source>Takes one argument which must either be a function symbol, function literal, a delegate, or a function pointer. It returns a &lt;code&gt;bool&lt;/code&gt; which is &lt;code&gt;true&lt;/code&gt; if the return value of the function is returned on the stack via a pointer to it passed as a hidden extra parameter to the function.</source>
          <target state="translated">関数シンボル、関数リテラル、デリゲート、または関数ポインターのいずれかでなければならない引数を1つ取ります。それは返す &lt;code&gt;bool&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; 関数の戻り値が関数に隠された追加のパラメータとして渡され、それを指すポインタを経由してスタックに返された場合を。</target>
        </trans-unit>
        <trans-unit id="97621cd19225b41beff6e5155d8b9ca36fc90d28" translate="yes" xml:space="preserve">
          <source>Takes one argument which must either be a function symbol, function literal, or a function pointer. It returns a string tuple of all the attributes of that function &lt;b&gt;excluding&lt;/b&gt; any user-defined attributes (UDAs can be retrieved with the &lt;a href=&quot;#get-attributes&quot;&gt;getAttributes&lt;/a&gt; trait). If no attributes exist it will return an empty tuple.</source>
          <target state="translated">関数シンボル、関数リテラル、または関数ポインターのいずれかでなければならない引数を1つ取ります。ユーザー定義の属性&lt;b&gt;を除く&lt;/b&gt;、その関数のすべての属性の文字列タプルを返します（UDAは&lt;a href=&quot;#get-attributes&quot;&gt;getAttributes&lt;/a&gt;トレイトで取得できます）。属性が存在しない場合は、空のタプルを返します。</target>
        </trans-unit>
        <trans-unit id="39c92455342775a9094aa1d1cdeba48c5cda2b3b" translate="yes" xml:space="preserve">
          <source>Takes one argument which must either be a function symbol, or a type that is a function, delegate or a function pointer. It returns a string identifying the kind of &lt;a href=&quot;function#variadic&quot;&gt;variadic arguments&lt;/a&gt; that are supported.</source>
          <target state="translated">関数シンボル、または関数、デリゲート、または関数ポインターである型のいずれかでなければならない引数を1つ取ります。サポートされている&lt;a href=&quot;function#variadic&quot;&gt;可変個引数&lt;/a&gt;の種類を識別する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="0e8e3f521873e107568842419f21bb4537549307" translate="yes" xml:space="preserve">
          <source>Takes one argument, a symbol of an aggregate (e.g. struct/class/module). The result is a tuple of all the unit test functions of that aggregate. The functions returned are like normal nested static functions, &lt;a href=&quot;https://dlang.org/glossary.html#ctfe&quot;&gt;CTFE&lt;/a&gt; will work and &lt;a href=&quot;attribute#uda&quot;&gt;UDAs&lt;/a&gt; will be accessible.</source>
          <target state="translated">1つの引数、集約のシンボル（たとえば、struct / class / module）を取ります。結果は、その集約のすべての単体テスト関数のタプルです。返される関数は通常のネストされた静的関数のようなもので、&lt;a href=&quot;https://dlang.org/glossary.html#ctfe&quot;&gt;CTFE&lt;/a&gt;が機能し、&lt;a href=&quot;attribute#uda&quot;&gt;UDA&lt;/a&gt;にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e645c3eaf27b6e127c4e64f1c5e718743c0c0f0e" translate="yes" xml:space="preserve">
          <source>Takes one argument, a symbol. Returns a tuple of all attached user-defined attributes. If no UDAs exist it will return an empty tuple.</source>
          <target state="translated">1つの引数(シンボル)を取ります。アタッチされているすべてのユーザー定義属性のタプルを返します。UDAが存在しない場合は空のタプルを返します。</target>
        </trans-unit>
        <trans-unit id="2156779dbfc3bbcd9c3c0f15b3c1104b1d55fa5e" translate="yes" xml:space="preserve">
          <source>Takes one argument, a symbol. Returns the identifier for that symbol as a string literal.</source>
          <target state="translated">1つの引数であるシンボルを取ります。そのシンボルの識別子を文字列リテラルとして返します。</target>
        </trans-unit>
        <trans-unit id="341c32de0417883510f5908fdfb5d1408b6c6386" translate="yes" xml:space="preserve">
          <source>Takes one argument, a type. If the type has &lt;code&gt;alias this&lt;/code&gt; declarations, returns a sequence of the names (as &lt;code&gt;string&lt;/code&gt;s) of the members used in those declarations. Otherwise returns an empty sequence.</source>
          <target state="translated">1つの引数、型を受け取ります。型に &lt;code&gt;alias this&lt;/code&gt; 宣言のエイリアスがある場合、それらの宣言で使用されているメンバーの名前のシーケンスを（ &lt;code&gt;string&lt;/code&gt; として）返します。それ以外の場合は、空のシーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="438ba37cf3e2477c1f85c28f97e1be1e2147103a" translate="yes" xml:space="preserve">
          <source>Takes one argument, which is a declaration symbol, or the type of a function, delegate, pointer to function, struct, class, or interface. Returns a string representing the &lt;a href=&quot;attribute#LinkageAttribute&quot;&gt;LinkageAttribute&lt;/a&gt; of the declaration. The string is one of:</source>
          <target state="translated">1つの引数（宣言記号、または関数、デリゲート、関数へのポインター、構造体、クラス、またはインターフェイス）を取ります。宣言の&lt;a href=&quot;attribute#LinkageAttribute&quot;&gt;LinkageAttribute&lt;/a&gt;を表す文字列を返します。文字列は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="ba131648e1c6eb1f568b6cae116365dae307ac96" translate="yes" xml:space="preserve">
          <source>Takes one argument, which must be a type. It returns &lt;code&gt;true&lt;/code&gt; if the type is a &lt;a href=&quot;https://dlang.org/glossary.html#pod&quot;&gt;POD&lt;/a&gt; type, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">型でなければならない引数を1つ取ります。タイプが&lt;a href=&quot;https://dlang.org/glossary.html#pod&quot;&gt;POD&lt;/a&gt;タイプの場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0441a02e332399ff202e6021026cd897a933b46b" translate="yes" xml:space="preserve">
          <source>Takes one argument. If that argument is a declaration, &lt;code&gt;true&lt;/code&gt; is returned if it is ref, out, or lazy, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">引数を1つ取ります。その引数が宣言の場合、それがref、out、またはlazyの場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1e2989333da89d1f14258e33489aab152f4d814e" translate="yes" xml:space="preserve">
          <source>Takes one argument. If that argument is a final function, &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">引数を1つ取ります。その引数が最終関数の &lt;code&gt;true&lt;/code&gt; はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="ddec073d306dd4ca03018c32b117f3e1e7f2351a" translate="yes" xml:space="preserve">
          <source>Takes one argument. If that argument is a function marked with override, &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">引数を1つ取ります。その引数がオーバーライドでマークされた関数である場合は &lt;code&gt;true&lt;/code&gt; が返され、それ以外の場合は &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="e068a9eb9df6980a9e0034c3f00e31a3c1deea42" translate="yes" xml:space="preserve">
          <source>Takes one argument. If that argument is a static function, meaning it has no context pointer, &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">引数を1つ取ります。その引数が静的関数の場合、つまりコンテキストポインターがない &lt;code&gt;true&lt;/code&gt; はtrueが返され、それ以外の場合は &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="d262441198edcdb862064f2f1b47b17c36638664" translate="yes" xml:space="preserve">
          <source>Takes one argument. If that argument is a symbol that refers to a &lt;a href=&quot;module&quot;&gt;spec/module, module&lt;/a&gt; then &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;. &lt;a href=&quot;module#package-module&quot;&gt;Package modules&lt;/a&gt; are considered to be modules even if they have not been directly imported as modules.</source>
          <target state="translated">引数を1つ取ります。その引数が&lt;a href=&quot;module&quot;&gt;スペック/モジュール&lt;/a&gt;を参照するシンボルである場合、モジュールは &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。&lt;a href=&quot;module#package-module&quot;&gt;パッケージモジュール&lt;/a&gt;は、モジュールとして直接インポートされていなくても、モジュールと見なされます。</target>
        </trans-unit>
        <trans-unit id="e8489b031e8d252fd5210cb21ca32120b6e151d6" translate="yes" xml:space="preserve">
          <source>Takes one argument. If that argument is a symbol that refers to a &lt;a href=&quot;module&quot;&gt;spec/module, package&lt;/a&gt; then &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">引数を1つ取ります。その引数が&lt;a href=&quot;module&quot;&gt;スペック/モジュール&lt;/a&gt;を参照するシンボルである場合、パッケージは &lt;code&gt;true&lt;/code&gt; が返され、それ以外の場合は &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="ae0191e839c839921bd4e31032678c9d66e77c33" translate="yes" xml:space="preserve">
          <source>Takes one argument. If that argument is a template then &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">引数を1つ取ります。その引数がテンプレートの &lt;code&gt;true&lt;/code&gt; はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="7ebe41dcd3dd8de1d463ea4bcbb0107229ca8ba7" translate="yes" xml:space="preserve">
          <source>Takes one argument. If that argument is a virtual function, &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;. Final functions that don't override anything return false.</source>
          <target state="translated">引数を1つ取ります。その引数が仮想関数の &lt;code&gt;true&lt;/code&gt; はtrueが返され、それ以外の場合は &lt;code&gt;false&lt;/code&gt; が返されます。何もオーバーライドしない最終的な関数はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="863c570d92b83c67f55f3e7188a134a725cf3bf6" translate="yes" xml:space="preserve">
          <source>Takes one argument. If that argument is an abstract function, &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">引数を1つ取ります。その引数が抽象関数の &lt;code&gt;true&lt;/code&gt; はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="61eb2f0952d80546e2227df1b6d3e1f066986474" translate="yes" xml:space="preserve">
          <source>Takes one argument. It returns &lt;code&gt;true&lt;/code&gt; if the argument is a nested type which internally stores a context pointer, otherwise it returns &lt;code&gt;false&lt;/code&gt;. Nested types can be &lt;a href=&quot;class#nested&quot;&gt;classes&lt;/a&gt;, &lt;a href=&quot;struct#nested&quot;&gt;structs&lt;/a&gt;, and &lt;a href=&quot;function#variadicnested&quot;&gt;functions&lt;/a&gt;.</source>
          <target state="translated">引数を1つ取ります。引数がコンテキストポインターを内部的に格納するネストされた型である場合は &lt;code&gt;true&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。入れ子になった型には、&lt;a href=&quot;class#nested&quot;&gt;クラス&lt;/a&gt;、&lt;a href=&quot;struct#nested&quot;&gt;構造体&lt;/a&gt;、&lt;a href=&quot;function#variadicnested&quot;&gt;関数を使用&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="3e2a814d0c6c5c43dbdb1aa3794de3e4f7e8cebe" translate="yes" xml:space="preserve">
          <source>Takes one argument. It returns &lt;code&gt;true&lt;/code&gt; if the argument is a symbol marked with the &lt;code&gt;@future&lt;/code&gt; keyword, otherwise &lt;code&gt;false&lt;/code&gt;. Currently, only functions and variable declarations have support for the &lt;code&gt;@future&lt;/code&gt; keyword.</source>
          <target state="translated">引数を1つ取ります。引数が &lt;code&gt;@future&lt;/code&gt; キーワードでマークされたシンボルの場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。現在、 &lt;code&gt;@future&lt;/code&gt; キーワードをサポートしているのは関数と変数の宣言だけです。</target>
        </trans-unit>
        <trans-unit id="b92fd55104f993e0c852b4df6c0429c26903b7ef" translate="yes" xml:space="preserve">
          <source>Takes one argument. It returns &lt;code&gt;true&lt;/code&gt; if the argument is a symbol marked with the &lt;code&gt;deprecated&lt;/code&gt; keyword, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">引数を1つ取ります。引数が &lt;code&gt;deprecated&lt;/code&gt; キーワードでマークされたシンボルで &lt;code&gt;true&lt;/code&gt; 場合はtrueを返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f348e74b9607daf851a06d094877b94982d44164" translate="yes" xml:space="preserve">
          <source>Takes ownership of a store assuming it already was organized as a heap.</source>
          <target state="translated">すでにヒープとして整理されていたと仮定して、店舗の所有権を取得します。</target>
        </trans-unit>
        <trans-unit id="abf275e8fde1a93863fd7e002f7fe18e1771a7d8" translate="yes" xml:space="preserve">
          <source>Takes ownership of a store. After this, manipulating &lt;code&gt;s&lt;/code&gt; may make the heap work incorrectly.</source>
          <target state="translated">ストアの所有権を取得します。この後、 &lt;code&gt;s&lt;/code&gt; を操作すると、ヒープが正しく機能しなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ba241c43b9e67f71ff3c0ddfe5c1f8f084092339" translate="yes" xml:space="preserve">
          <source>Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time.</source>
          <target state="translated">UTC 時間(標準時)での西暦 1 月 1 日午前 0 時からの hnsecs (100 ns)の数を取り、このタイムゾーンの時間に変換します。</target>
        </trans-unit>
        <trans-unit id="4065d089b4e20bd1ee13267e586cbcfef7117537" translate="yes" xml:space="preserve">
          <source>Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is effect in this time zone at the given point in time.</source>
          <target state="translated">UTC時間(標準時)で1月1日午前0時からのhnsecs(100 ns)を取得し、指定された時点でこのタイムゾーンでDSTが有効であるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="848786fb1221dc1ebb6ce572a55838f0543e640b" translate="yes" xml:space="preserve">
          <source>Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is in effect in this time zone at the given point in time.</source>
          <target state="translated">UTC時間(標準時)での1月1日午前0時からのhnsecs(100 ns)を取得し、指定された時点でこのタイムゾーンでDSTが有効かどうかを返します。</target>
        </trans-unit>
        <trans-unit id="a17f6231d4d687b48dc77dac8c8037b006a58d20" translate="yes" xml:space="preserve">
          <source>Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time).</source>
          <target state="translated">このタイムゾーンの時間で、西暦1月1日午前0時からの hnsecs (100 ns)を取り、UTC (標準時)に変換します。</target>
        </trans-unit>
        <trans-unit id="b91b3f492592d4dd757b6ee3c4c2c67f1195b458" translate="yes" xml:space="preserve">
          <source>Takes two arguments and returns bool &lt;code&gt;true&lt;/code&gt; if they are the same symbol, &lt;code&gt;false&lt;/code&gt; if not.</source>
          <target state="translated">2つの引数を取り、それらが同じシンボルの場合はブール値 &lt;code&gt;true&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1fd6b734070147ebd7e778bead2ddc672a61abd2" translate="yes" xml:space="preserve">
          <source>Takes two arguments, the second must be a string. The result is an expression formed from the first argument, followed by a &amp;lsquo;.&amp;rsquo;, followed by the second argument as an identifier.</source>
          <target state="translated">2つの引数を取ります。2番目は文字列でなければなりません。結果は、最初の引数とそれに続く「。」、および識別子としての2番目の引数からなる式です。</target>
        </trans-unit>
        <trans-unit id="6091a04c8d0ceed563c5ac0a0c00d4d331dce18d" translate="yes" xml:space="preserve">
          <source>Takes two arguments. The first must be a symbol or expression. The second is a symbol, such as an alias to a member of the first argument. The result is the second argument interpreted with its &lt;code&gt;this&lt;/code&gt; context set to the value of the first argument.</source>
          <target state="translated">2つの引数を取ります。最初はシンボルまたは式でなければなりません。2番目は、最初の引数のメンバーのエイリアスなどの記号です。結果は、 &lt;code&gt;this&lt;/code&gt; コンテキストが最初の引数の値に設定されて解釈された2番目の引数です。</target>
        </trans-unit>
        <trans-unit id="d2d8ce9f86ea0164b3d45e729c421e562a767a2b" translate="yes" xml:space="preserve">
          <source>Takes two arguments. The first must either be a function symbol, or a type that is a function, delegate or a function pointer. The second is an integer identifying which parameter, where the first parameter is 0. It returns a tuple of strings representing the storage classes of that parameter.</source>
          <target state="translated">2つの引数を取ります。最初の引数は関数シンボルか、関数、デリゲート、関数ポインタのいずれかの型でなければなりません。2番目の引数は、どのパラメータかを識別する整数で、最初のパラメータは0です。 これは、そのパラメータのストレージクラスを表す文字列のタプルを返します。</target>
        </trans-unit>
        <trans-unit id="088b6ccbc4dc304c0a15b65acceb41e52684a26d" translate="yes" xml:space="preserve">
          <source>Taking a 2-level Trie as an example the principle of operation is as follows. Split the number of bits in a key (code point, 21 bits) into 2 components (e.g. 15 and 8). The first is the number of bits in the index of the trie and the other is number of bits in each page of the trie. The layout of the trie is then an array of size 2^^bits-of-index followed an array of memory chunks of size 2^^bits-of-page/bits-per-element.</source>
          <target state="translated">2レベルのTrieを例にとると、動作原理は以下のようになります。鍵(コードポイント、21ビット)のビット数を2つの要素(例えば15と8)に分割する。1つはトリのインデックスに含まれるビット数、もう1つはトリの各ページに含まれるビット数です。ト リ のレ イ ア ウ ト は、 サイズ 2^^bits-of-index の配列に続いて、 サイズ 2^^bits-of-page/bits-per-element の メ モ リ チャンクの配列にな り ます。</target>
        </trans-unit>
        <trans-unit id="cdebdf3e1f27466bf5788aea765d124954770adc" translate="yes" xml:space="preserve">
          <source>Taking a &lt;code&gt;ubyte[n]&lt;/code&gt; helps prevent accidentally using a swapped value as a regular one (and in the case of floating point values, it's necessary, because the FPU will mess up any swapped floating point values. So, you can't actually have swapped floating point values as floating point values).</source>
          <target state="translated">&lt;code&gt;ubyte[n]&lt;/code&gt; を取得すると、スワップされた値を誤って通常の値として使用することを防ぐことができます（浮動小数点値の場合は、FPUがスワップされた浮動小数点値を混乱させるため、これが必要です。したがって、実際には浮動小数点値として交換された浮動小数点値）。</target>
        </trans-unit>
        <trans-unit id="12c7df23cc8d75b166a89e7a81c239e1eaa5fc9d" translate="yes" xml:space="preserve">
          <source>Taking the address of (i.e. making a delegate to) a nested function that accesses variables in an outer scope</source>
          <target state="translated">外部スコープ内の変数にアクセスする入れ子の関数のアドレスを取得します。</target>
        </trans-unit>
        <trans-unit id="4f571f8c15567583b37693f78ef5f80a807f7cd4" translate="yes" xml:space="preserve">
          <source>Taking the address of a local variable or function parameter.</source>
          <target state="translated">ローカル変数または関数のパラメータのアドレスを取ります。</target>
        </trans-unit>
        <trans-unit id="3d44d06fda277fec8865be5e542736e38ae54f97" translate="yes" xml:space="preserve">
          <source>Takri</source>
          <target state="translated">Takri</target>
        </trans-unit>
        <trans-unit id="86c2b6275f076b31c4be9812e835dab2a6f07ccf" translate="yes" xml:space="preserve">
          <source>Tamil</source>
          <target state="translated">Tamil</target>
        </trans-unit>
        <trans-unit id="61ad50a9b9189cc3cf1874568e35e7901ff4c982" translate="yes" xml:space="preserve">
          <source>Target</source>
          <target state="translated">Target</target>
        </trans-unit>
        <trans-unit id="e2ae5bcbc5b7ffd68695f52a7585c89c8969aab3" translate="yes" xml:space="preserve">
          <source>Target &lt;strong id=&quot;parse&quot;&gt;parse&lt;/strong&gt;(Target, Source)(ref Source s)</source>
          <target state="translated">ターゲット&lt;strong id=&quot;parse&quot;&gt;解析&lt;/strong&gt;（ターゲット、ソース）（ref Source s）</target>
        </trans-unit>
        <trans-unit id="b514ae24a3aa7e92170dd30b3670d799fc2ddaa0" translate="yes" xml:space="preserve">
          <source>Target &lt;strong id=&quot;parse&quot;&gt;parse&lt;/strong&gt;(Target, Source)(ref Source s, dchar lbracket = '[', dchar rbracket = ']', dchar comma = ',')</source>
          <target state="translated">ターゲット&lt;strong id=&quot;parse&quot;&gt;解析&lt;/strong&gt;（ターゲット、ソース）（refソースs、dchar lbracket = '['、dchar rbracket = ']'、dcharコンマ= '、'）</target>
        </trans-unit>
        <trans-unit id="88b8c449e785e82ac31d743cbd6ec6d0cecb908c" translate="yes" xml:space="preserve">
          <source>Target &lt;strong id=&quot;parse&quot;&gt;parse&lt;/strong&gt;(Target, Source)(ref Source s, dchar lbracket = '[', dchar rbracket = ']', dchar keyval = ':', dchar comma = ',')</source>
          <target state="translated">ターゲット&lt;strong id=&quot;parse&quot;&gt;解析&lt;/strong&gt;（ターゲット、ソース）（refソースs、dchar lbracket = '['、dchar rbracket = ']'、dchar keyval = '：'、dcharコンマ= '、'）</target>
        </trans-unit>
        <trans-unit id="ababb58bd98453af215c7078c2bf13ec699efd22" translate="yes" xml:space="preserve">
          <source>Target &lt;strong id=&quot;parse&quot;&gt;parse&lt;/strong&gt;(Target, Source)(ref Source source)</source>
          <target state="translated">ターゲット&lt;strong id=&quot;parse&quot;&gt;解析&lt;/strong&gt;（ターゲット、ソース）（refソースソース）</target>
        </trans-unit>
        <trans-unit id="6e89e3cf2e5369ad578243ee86873fbe19e0d25b" translate="yes" xml:space="preserve">
          <source>Target &lt;strong id=&quot;parse&quot;&gt;parse&lt;/strong&gt;(Target, Source)(ref Source source, uint radix)</source>
          <target state="translated">ターゲット&lt;strong id=&quot;parse&quot;&gt;解析&lt;/strong&gt;（ターゲット、ソース）（参照ソースソース、uint基数）</target>
        </trans-unit>
        <trans-unit id="d5afbc0e9237897788f0f2a802fb65dde3d350c3" translate="yes" xml:space="preserve">
          <source>Target &lt;strong id=&quot;target&quot;&gt;target&lt;/strong&gt;;</source>
          <target state="translated">ターゲット&lt;strong id=&quot;target&quot;&gt;ターゲット&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="ad45e9e6809eb415ba34b6b16cb00ee54f97882b" translate="yes" xml:space="preserve">
          <source>TargetOS &lt;code&gt;os&lt;/code&gt;</source>
          <target state="translated">TargetOS &lt;code&gt;os&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d43f3dda84c1737bbb2ff924a8ba890d1d06511" translate="yes" xml:space="preserve">
          <source>TargetOS &lt;strong id=&quot;os&quot;&gt;os&lt;/strong&gt;;</source>
          <target state="translated">TargetOS &lt;strong id=&quot;os&quot;&gt;os&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="6c4ef0b4f99b87e3c1020b8cae3d6c26c8e6f085" translate="yes" xml:space="preserve">
          <source>TargetRange &lt;code&gt;target&lt;/code&gt;</source>
          <target state="translated">TargetRange &lt;code&gt;target&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb6a59f9131000cf28fe97282bcb28c63b9e4757" translate="yes" xml:space="preserve">
          <source>TargetRange &lt;strong id=&quot;copy&quot;&gt;copy&lt;/strong&gt;(SourceRange, TargetRange)(SourceRange source, TargetRange target)</source>
          <target state="translated">TargetRange &lt;strong id=&quot;copy&quot;&gt;copy&lt;/strong&gt;（SourceRange、TargetRange）（SourceRange source、TargetRange target）</target>
        </trans-unit>
        <trans-unit id="0ac7d0e93a32f99695c525a23b3d79466599bc63" translate="yes" xml:space="preserve">
          <source>Tarr &lt;code&gt;arr&lt;/code&gt;</source>
          <target state="translated">ター・ &lt;code&gt;arr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cbc5a0ebe859225371131257cf9afaa28a3ac017" translate="yes" xml:space="preserve">
          <source>Tarr &lt;code&gt;arrs&lt;/code&gt;</source>
          <target state="translated">ターの &lt;code&gt;arrs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a3f39998ffdb8d442c80697d22b06e7ac5f3819d" translate="yes" xml:space="preserve">
          <source>Tarr &lt;code&gt;from&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; タール</target>
        </trans-unit>
        <trans-unit id="cf87ba10bfa3c6aec9ccdfb8418fb56c922287f3" translate="yes" xml:space="preserve">
          <source>Tarr &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">ター &lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="44ca406f8c2b438a9883f43dbecea26d13faa9c5" translate="yes" xml:space="preserve">
          <source>Tarr &lt;code&gt;px&lt;/code&gt;</source>
          <target state="translated">タール &lt;code&gt;px&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c66f7fbc59602165b2e59871d84a099eca281157" translate="yes" xml:space="preserve">
          <source>Tarr &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">ター &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15764660dbf51678e961f9da7c77d238282a048f" translate="yes" xml:space="preserve">
          <source>Tarr &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">タール &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="953418f76b8ef3144338e8d854335c95fd12fbea" translate="yes" xml:space="preserve">
          <source>Tarr &lt;code&gt;y&lt;/code&gt;</source>
          <target state="translated">ター &lt;code&gt;y&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2de521eff8a440c1a72d2890be1048326ca20663" translate="yes" xml:space="preserve">
          <source>Technically the memoized function should be pure because &lt;code&gt;memoize&lt;/code&gt; assumes it will always return the same result for a given tuple of arguments. However, &lt;code&gt;memoize&lt;/code&gt; does not enforce that because sometimes it is useful to memoize an impure function, too.</source>
          <target state="translated">技術的には、メモ化された関数は純粋である必要があります。メモ化では、指定された引数のタプルに対して常に同じ結果が返されると想定しているため &lt;code&gt;memoize&lt;/code&gt; 。ただし、不純な関数をメモすることも役立つ場合があるため、 &lt;code&gt;memoize&lt;/code&gt; はそれを強制しません。</target>
        </trans-unit>
        <trans-unit id="1e1d246b5e426f01e5402235b114a3eca1d4204f" translate="yes" xml:space="preserve">
          <source>Tells whether a type &lt;code&gt;T&lt;/code&gt; is statically allowed for storage inside a &lt;code&gt;VariantN&lt;/code&gt; object by looking &lt;code&gt;T&lt;/code&gt; up in &lt;code&gt;AllowedTypes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VariantN&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; を検索することにより、型 &lt;code&gt;T&lt;/code&gt; がVariantNオブジェクト内のストレージで静的に許可されているかどうかを &lt;code&gt;AllowedTypes&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="ea6c03461dc3a543514f149ca6bb793d0a9e158a" translate="yes" xml:space="preserve">
          <source>Telugu</source>
          <target state="translated">Telugu</target>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="e6f1ec42ae0af9f2599a77525cba82e65dfc5e18" translate="yes" xml:space="preserve">
          <source>Template API</source>
          <target state="translated">テンプレートAPI</target>
        </trans-unit>
        <trans-unit id="e522f15415ec8661bc2e6e1609fc4f30a391c0b7" translate="yes" xml:space="preserve">
          <source>Template API CRC32 implementation. See &lt;code&gt;std.digest&lt;/code&gt; for differences between template and OOP API.</source>
          <target state="translated">テンプレートAPI CRC32実装。テンプレートとOOP APIの違いについては、 &lt;code&gt;std.digest&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8437ae9d6af39ff3da2624003e6f14a20f425560" translate="yes" xml:space="preserve">
          <source>Template API CRC64-ECMA implementation. See &lt;code&gt;std.digest.digest&lt;/code&gt; for differences between template and OOP API.</source>
          <target state="translated">テンプレートAPI CRC64-ECMA実装。テンプレートとOOP APIの違いについては、 &lt;code&gt;std.digest.digest&lt;/code&gt; をご覧ください。</target>
        </trans-unit>
        <trans-unit id="8e42beabacb6072d0abaf212b35f9041a76331e7" translate="yes" xml:space="preserve">
          <source>Template API CRC64-ECMA implementation. See &lt;code&gt;std.digest&lt;/code&gt; for differences between template and OOP API.</source>
          <target state="translated">テンプレートAPICRC64-ECMAの実装。テンプレートと &lt;code&gt;std.digest&lt;/code&gt; の違いについては、std.digestを参照してください。</target>
        </trans-unit>
        <trans-unit id="c9cf433918e6809484068ba2a4633144d8783e12" translate="yes" xml:space="preserve">
          <source>Template API CRC64-ISO implementation. See &lt;code&gt;std.digest.digest&lt;/code&gt; for differences between template and OOP API.</source>
          <target state="translated">テンプレートAPI CRC64-ISO実装。テンプレートとOOP APIの違いについては、 &lt;code&gt;std.digest.digest&lt;/code&gt; をご覧ください。</target>
        </trans-unit>
        <trans-unit id="90d0a62e41df3264404eee56347b930553948824" translate="yes" xml:space="preserve">
          <source>Template API CRC64-ISO implementation. See &lt;code&gt;std.digest&lt;/code&gt; for differences between template and OOP API.</source>
          <target state="translated">テンプレートAPICRC64-ISOの実装。テンプレートと &lt;code&gt;std.digest&lt;/code&gt; の違いについては、std.digestを参照してください。</target>
        </trans-unit>
        <trans-unit id="377ef92c355bfb9804e95e132cfdf2caf2a2cf42" translate="yes" xml:space="preserve">
          <source>Template API HMAC implementation.  This implements an HMAC over the digest H. If H doesn't provide information about the block size, it can be supplied explicitly using the second overload.  This type conforms to &lt;a href=&quot;std_digest#isDigest&quot;&gt;&lt;code&gt;std.digest.isDigest&lt;/code&gt;&lt;/a&gt;.  Compute HMAC over an input string</source>
          <target state="translated">テンプレートAPI HMAC実装。これは、ダイジェストHにHMACを実装します。Hがブロックサイズに関する情報を提供しない場合は、2番目のオーバーロードを使用して明示的に指定できます。このタイプは&lt;a href=&quot;std_digest#isDigest&quot;&gt; &lt;code&gt;std.digest.isDigest&lt;/code&gt; に&lt;/a&gt;準拠しています。入力文字列でHMACを計算する</target>
        </trans-unit>
        <trans-unit id="80c37626c0104765b3f472dfcf7c74d67406698a" translate="yes" xml:space="preserve">
          <source>Template API MD5 implementation. See &lt;code&gt;std.digest&lt;/code&gt; for differences between template and OOP API.</source>
          <target state="translated">テンプレートAPI MD5実装。テンプレートとOOP APIの違いについては、 &lt;code&gt;std.digest&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9baa26a4e441be15d1a0026335d4968924c76983" translate="yes" xml:space="preserve">
          <source>Template API RIPEMD160 implementation. See &lt;code&gt;std.digest&lt;/code&gt; for differences between template and OOP API.</source>
          <target state="translated">テンプレートAPI RIPEMD160の実装。テンプレートとOOP APIの違いについては、 &lt;code&gt;std.digest&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3b1b330b49ad8ca244de89c95f975aa04b55c181" translate="yes" xml:space="preserve">
          <source>Template API SHA1/SHA2 implementation. Supports: SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 and SHA-512/256.</source>
          <target state="translated">テンプレートAPI SHA1/SHA2の実装。サポート:SHA-1、SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256。</target>
        </trans-unit>
        <trans-unit id="f62ed7169159e611b14c3e7949b6b6e1a7e655cd" translate="yes" xml:space="preserve">
          <source>Template Alias Parameters</source>
          <target state="translated">テンプレートエイリアスのパラメータ</target>
        </trans-unit>
        <trans-unit id="d18303084ca65e4a94354ae1840dc40df28605aa" translate="yes" xml:space="preserve">
          <source>Template Constraints</source>
          <target state="translated">テンプレート制約</target>
        </trans-unit>
        <trans-unit id="fb7a9c95d4ed67c8b1553e4381f99167b917a11f" translate="yes" xml:space="preserve">
          <source>Template Constructors</source>
          <target state="translated">テンプレートコンストラクタ</target>
        </trans-unit>
        <trans-unit id="38e266fe765270ed7c964e156080fde6579d7894" translate="yes" xml:space="preserve">
          <source>Template Instance Names have the types and values of its parameters encoded into it:</source>
          <target state="translated">テンプレートインスタンス名には、そのパラメータの型と値がエンコードされています。</target>
        </trans-unit>
        <trans-unit id="30f85684a878aa9af8afa40283325beae87c4aa0" translate="yes" xml:space="preserve">
          <source>Template Mixins</source>
          <target state="translated">テンプレート ミキシン</target>
        </trans-unit>
        <trans-unit id="bc3b3525b364d27d5b3900862241bda1d3596e67" translate="yes" xml:space="preserve">
          <source>Template Parameter Default Values</source>
          <target state="translated">テンプレートパラメータのデフォルト値</target>
        </trans-unit>
        <trans-unit id="eb06de1f01f060cf9430e79280ee0699d4203e25" translate="yes" xml:space="preserve">
          <source>Template Sequence Parameters</source>
          <target state="translated">テンプレートシーケンスパラメータ</target>
        </trans-unit>
        <trans-unit id="e7ca209f8d14b1abb05f80fa798822ceaa811571" translate="yes" xml:space="preserve">
          <source>Template This Parameters</source>
          <target state="translated">テンプレート このパラメータ</target>
        </trans-unit>
        <trans-unit id="82084cfe35a73bcd4625e0721e2f57a23701a271" translate="yes" xml:space="preserve">
          <source>Template Type Parameters</source>
          <target state="translated">テンプレートタイプのパラメータ</target>
        </trans-unit>
        <trans-unit id="779713d88fde73c5e64b672f1774ec90dca0ab03" translate="yes" xml:space="preserve">
          <source>Template Value Parameters</source>
          <target state="translated">テンプレート値パラメータ</target>
        </trans-unit>
        <trans-unit id="26171c395cd3bc136eb63e6249860cab45283f92" translate="yes" xml:space="preserve">
          <source>Template arguments not implicitly deduced can have default values:</source>
          <target state="translated">暗黙的に推論されないテンプレート引数は、デフォルト値を持つことができます。</target>
        </trans-unit>
        <trans-unit id="8d14578ab93cdc97bb3a362ef20b3ffe126a7918" translate="yes" xml:space="preserve">
          <source>Template arguments.</source>
          <target state="translated">テンプレートの引数。</target>
        </trans-unit>
        <trans-unit id="19c8f3dce2a89300350e2d7666fb3e86f4a6b7f2" translate="yes" xml:space="preserve">
          <source>Template constraints can be used with aggregate types (structs, classes, unions). Constraints are effectively used with library module &quot;std.traits&quot;:</source>
          <target state="translated">テンプレート制約は、集約型(構造体、クラス、組合)と一緒に使用することができます。制約は、ライブラリモジュール &quot;std.trits &quot;で有効に利用できます。</target>
        </trans-unit>
        <trans-unit id="bf64bd05317e164be7848210935f1949fa7269a4" translate="yes" xml:space="preserve">
          <source>Template constraints can be used with aggregate types (structs, classes, unions). Constraints are effectively used with library module &lt;a href=&quot;https://dlang.org/phobos/std_traits.html&quot;&gt;&lt;code&gt;std.traits&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">テンプレート制約は、集計タイプ（構造体、クラス、共用体）で使用できます。制約は、ライブラリモジュール&lt;a href=&quot;https://dlang.org/phobos/std_traits.html&quot;&gt; &lt;code&gt;std.traits&lt;/code&gt; で&lt;/a&gt;効果的に使用されます。</target>
        </trans-unit>
        <trans-unit id="1691afafe951d535cce0c8181934e0f030a369a1" translate="yes" xml:space="preserve">
          <source>Template features can be combined to produce some interesting effects, such as compile time evaluation of non-trivial functions. For example, a factorial template can be written:</source>
          <target state="translated">テンプレート機能を組み合わせることで、自明ではない関数のコンパイル時評価など、興味深い効果を生み出すことができます。例えば、階乗テンプレートを書くことができます。</target>
        </trans-unit>
        <trans-unit id="2ba9b580c30519089e0945b54f1c0ea578e0a06a" translate="yes" xml:space="preserve">
          <source>Template for implementing Base64 encoding and decoding.</source>
          <target state="translated">Base64エンコーディングとデコーディングを実装するためのテンプレート。</target>
        </trans-unit>
        <trans-unit id="f6c583c1ff7413acce9779ce3bde7a23b883e82e" translate="yes" xml:space="preserve">
          <source>Template functions are useful for avoiding code duplication - instead of writing several copies of a function, each with a different parameter type, a single function template can be sufficient. For example:</source>
          <target state="translated">テンプレート関数はコードの重複を避けるために便利です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ce9ed1b4180abeab3ceea25b15bb1a299cbee42c" translate="yes" xml:space="preserve">
          <source>Template functions, auto functions, nested functions and lambdas can deduce the &lt;code&gt;return scope&lt;/code&gt; attribute.</source>
          <target state="translated">テンプレート関数、自動関数、ネストされた関数、ラムダは、 &lt;code&gt;return scope&lt;/code&gt; 属性を推定できます。</target>
        </trans-unit>
        <trans-unit id="a5e7b8c0a5e4e1f334cd544200e05d17c0c0f0ab" translate="yes" xml:space="preserve">
          <source>Template functions, auto functions, nested functions and lambdas can deduce the &lt;code&gt;return&lt;/code&gt; attribute.</source>
          <target state="translated">テンプレート関数、自動関数、ネストされた関数、およびラムダは、 &lt;code&gt;return&lt;/code&gt; 属性を推定できます。</target>
        </trans-unit>
        <trans-unit id="25478b27ac38cf28dffdb029b491087b8937cf14" translate="yes" xml:space="preserve">
          <source>Template implementation.</source>
          <target state="translated">テンプレートの実装。</target>
        </trans-unit>
        <trans-unit id="dae7857caeb9fd343ac0c8dc8bd3c01ab768ee59" translate="yes" xml:space="preserve">
          <source>Template instance names</source>
          <target state="translated">テンプレートインスタンス名</target>
        </trans-unit>
        <trans-unit id="4498c6e2d0d9903363598d28a52a34b1e0d3c903" translate="yes" xml:space="preserve">
          <source>Template instantiation</source>
          <target state="translated">テンプレートのインスタンス化</target>
        </trans-unit>
        <trans-unit id="e148426eaf0fc75b319929a7514c305716d2cf43" translate="yes" xml:space="preserve">
          <source>Template names</source>
          <target state="translated">テンプレート名</target>
        </trans-unit>
        <trans-unit id="93a56d0fe88789d1d0c70b3ee943a36512557c8d" translate="yes" xml:space="preserve">
          <source>Template parameter defaults are the value or type to use for the</source>
          <target state="translated">テンプレートパラメータのデフォルトは</target>
        </trans-unit>
        <trans-unit id="c042a73bca6c8bc4a4a5a2fd8b459e9ee19ba60f" translate="yes" xml:space="preserve">
          <source>Template parameter specializations constrain the values or types the</source>
          <target state="translated">テンプレートのパラメータの特殊化は、その値や型を制限します。</target>
        </trans-unit>
        <trans-unit id="f1b7c3f55de7f3a6405e167ee5a977c3f7b9a92e" translate="yes" xml:space="preserve">
          <source>Template parameter; the type of the allocated buffer, and the type returned. Defaults to &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">テンプレートパラメータ。割り当てられたバッファのタイプ、および返されたタイプ デフォルトは &lt;code&gt;string&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a5585272334e1084961cfa161efdc30cdbc9f449" translate="yes" xml:space="preserve">
          <source>Template parameters can be types, values, symbols, or sequences. Types can be any type. Value parameters must be of an integral type, floating point type, or string type and specializations for them must resolve to an integral constant, floating point constant, null, or a string literal. Symbols can be any non-local symbol. Sequences can contain zero or more types, values or symbols.</source>
          <target state="translated">テンプレートのパラメータには、型、値、シンボル、シーケンスのいずれかを指定することができます。型は任意の型を使用できます。値パラメータは、積分型、浮動小数点型、文字列型のいずれかでなければならず、それらの特殊化は積分定数、浮動小数点定数、NULL、文字列リテラルに解決する必要があります。記号は非局所的な記号を使用することができます。シーケンスには、ゼロ以上の型、値、またはシンボルを含めることができます。</target>
        </trans-unit>
        <trans-unit id="3053d10b710a4345e1d2a806a5a0d892919d438c" translate="yes" xml:space="preserve">
          <source>Template parameters.</source>
          <target state="translated">テンプレートのパラメータ。</target>
        </trans-unit>
        <trans-unit id="f2eaecce2004457caafb0a566e6258478e0c81e3" translate="yes" xml:space="preserve">
          <source>Template predicates</source>
          <target state="translated">テンプレート述語</target>
        </trans-unit>
        <trans-unit id="3c6f35922df22ba3979c846bfb66fd5f925df11c" translate="yes" xml:space="preserve">
          <source>Template value parameter types can be any type which can be statically initialized at compile time. Template value arguments can be integer values, floating point values, nulls, string values, array literals of template value arguments, associative array literals of template value arguments, or struct literals of template value arguments.</source>
          <target state="translated">テンプレート値パラメータの型には、コンパイル時に静的に初期化できる任意の型を指定できます。テンプレート値引数には、整数値、浮動小数点値、ヌル、文字列値、テンプレート値引数の配列リテラル、テンプレート値引数の連想配列リテラル、テンプレート値引数の構造体リテラルを指定できます。</target>
        </trans-unit>
        <trans-unit id="a4f76ae41610f265b87249bfa826fc772c21ffbd" translate="yes" xml:space="preserve">
          <source>Template with arity smaller than or equal to Template</source>
          <target state="translated">テンプレート以下のアリティを持つテンプレート</target>
        </trans-unit>
        <trans-unit id="3db96bd3c4b157efb5c6bcf06af65bf6679fe917" translate="yes" xml:space="preserve">
          <source>TemplateArgumentList</source>
          <target state="translated">TemplateArgumentList</target>
        </trans-unit>
        <trans-unit id="a6a7d2669effca80a1c7fac717de9a8b2a82ba1a" translate="yes" xml:space="preserve">
          <source>TemplateDeclaration</source>
          <target state="translated">TemplateDeclaration</target>
        </trans-unit>
        <trans-unit id="9029a1aca4f28b513baec9b6439e6636b063cf0c" translate="yes" xml:space="preserve">
          <source>TemplateDeclaration &lt;strong id=&quot;getFuncTemplateDecl&quot;&gt;getFuncTemplateDecl&lt;/strong&gt;(Dsymbol s);</source>
          <target state="translated">TemplateDeclaration &lt;strong id=&quot;getFuncTemplateDecl&quot;&gt;getFuncTemplateDecl&lt;/strong&gt;（Dsymbol s）;</target>
        </trans-unit>
        <trans-unit id="6517815fe52a5a1aa2089d12b1bbf085f56454ad" translate="yes" xml:space="preserve">
          <source>TemplateInstance</source>
          <target state="translated">TemplateInstance</target>
        </trans-unit>
        <trans-unit id="3d1fc910d66b4cf59b41a83bd1f011148439a47f" translate="yes" xml:space="preserve">
          <source>TemplateInstance &lt;code&gt;ti&lt;/code&gt;</source>
          <target state="translated">TemplateInstance &lt;code&gt;ti&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="32f6a07ecefd7064d208c91c6d529d1eabf6fae0" translate="yes" xml:space="preserve">
          <source>TemplateInstance &lt;strong id=&quot;addInstance&quot;&gt;addInstance&lt;/strong&gt;(TemplateInstance ti);</source>
          <target state="translated">TemplateInstance &lt;strong id=&quot;addInstance&quot;&gt;addInstance&lt;/strong&gt;（TemplateInstance ti）;</target>
        </trans-unit>
        <trans-unit id="5626cce6b123c95bbf147668ea277a06194dbd7b" translate="yes" xml:space="preserve">
          <source>TemplateInstance &lt;strong id=&quot;findExistingInstance&quot;&gt;findExistingInstance&lt;/strong&gt;(TemplateInstance tithis, Expressions* fargs);</source>
          <target state="translated">TemplateInstance &lt;strong id=&quot;findExistingInstance&quot;&gt;findExistingInstance&lt;/strong&gt;（TemplateInstance tithis、Expressions * fargs）;</target>
        </trans-unit>
        <trans-unit id="fdcd96c0f2459103878b2413ec2c601fc1498f4a" translate="yes" xml:space="preserve">
          <source>TemplateMixin</source>
          <target state="translated">TemplateMixin</target>
        </trans-unit>
        <trans-unit id="b981d77c6daa310cf9f7bc1dffb15d121423d2f9" translate="yes" xml:space="preserve">
          <source>TemplateMixinDeclaration</source>
          <target state="translated">TemplateMixinDeclaration</target>
        </trans-unit>
        <trans-unit id="1098903e5f4fc2ff49f206b24ec3f9c1c949a0da" translate="yes" xml:space="preserve">
          <source>TemplateParameter</source>
          <target state="translated">TemplateParameter</target>
        </trans-unit>
        <trans-unit id="6b0a43baab11f444c6db7f8fbb993842fcd75ba0" translate="yes" xml:space="preserve">
          <source>TemplateParameter &lt;code&gt;tp&lt;/code&gt;</source>
          <target state="translated">TemplateParameter &lt;code&gt;tp&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a724f289f948ed94a3864202a97f7192ac4bdd96" translate="yes" xml:space="preserve">
          <source>TemplateParameterList</source>
          <target state="translated">TemplateParameterList</target>
        </trans-unit>
        <trans-unit id="583de77cc39af83d745b866a4f4097143e9876ee" translate="yes" xml:space="preserve">
          <source>TemplateParameters* &lt;code&gt;parameters&lt;/code&gt;</source>
          <target state="translated">TemplateParameters * &lt;code&gt;parameters&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1918bba11e5a6f5b4fc7ad6ef48b8652a0887d7" translate="yes" xml:space="preserve">
          <source>TemplateParameters* &lt;code&gt;tparams&lt;/code&gt;</source>
          <target state="translated">TemplateParameters * &lt;code&gt;tparams&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d9b2f66638d335347804a4c0613b67636525619" translate="yes" xml:space="preserve">
          <source>TemplateSequenceParameter</source>
          <target state="translated">TemplateSequenceParameter</target>
        </trans-unit>
        <trans-unit id="991a882d2c6a34560908a425e97dee08f5240a1c" translate="yes" xml:space="preserve">
          <source>TemplateThisParameter</source>
          <target state="translated">TemplateThisParameter</target>
        </trans-unit>
        <trans-unit id="fa08af40a67e00ef14408a29a123247531c65448" translate="yes" xml:space="preserve">
          <source>TemplateTupleParameter &lt;strong id=&quot;isVariadic&quot;&gt;isVariadic&lt;/strong&gt;();</source>
          <target state="translated">TemplateTupleParameter &lt;strong id=&quot;isVariadic&quot;&gt;isVariadic&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="d492087ea67943dc74c840e6365eee707931cb08" translate="yes" xml:space="preserve">
          <source>Templates are D's approach to generic programming. Templates are defined with a</source>
          <target state="translated">テンプレートは、汎用的なプログラミングに対するDのアプローチです。テンプレートは</target>
        </trans-unit>
        <trans-unit id="0831437711dff1dd4780cf1794113d3fdb3f80b9" translate="yes" xml:space="preserve">
          <source>Templates are explicitly instantiated with:</source>
          <target state="translated">テンプレートは明示的にインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="feb605d755d6a50ca7339b029a5943f74ea943f9" translate="yes" xml:space="preserve">
          <source>Templates can be used to form constructors for classes and structs.</source>
          <target state="translated">テンプレートを使用して、クラスや構造体のコンストラクタを形成することができます。</target>
        </trans-unit>
        <trans-unit id="70f39a950e78ed5adbca12f692738cfb53d2d504" translate="yes" xml:space="preserve">
          <source>Templates cannot be used to add non-static fields or virtual functions to classes or interfaces. For example:</source>
          <target state="translated">テンプレートを使用して、クラスやインターフェイスに非静的フィールドや仮想関数を追加することはできません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1f6b57f6b00b0efba650f385fe51544b694a5cc2" translate="yes" xml:space="preserve">
          <source>Templates may be specialized for particular types of arguments by following the template parameter identifier with a : and the specialized type. For example:</source>
          <target state="translated">テンプレートは、テンプレートのパラメータ識別子に:と特殊な型をつけることで、特定の型の引数に特化することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="245b3c3a28c4f221260e8b2fc590aa377be27a3f" translate="yes" xml:space="preserve">
          <source>Templates to manipulate &lt;a href=&quot;https://dlang.org/spec/template.html#variadic-templates&quot;&gt;template parameter sequences&lt;/a&gt; (also known as</source>
          <target state="translated">&lt;a href=&quot;https://dlang.org/spec/template.html#variadic-templates&quot;&gt;テンプレートパラメータシーケンス&lt;/a&gt;を操作するためのテンプレート（別名</target>
        </trans-unit>
        <trans-unit id="78e0050e55634b09275bdf582f1537bb23a50bfb" translate="yes" xml:space="preserve">
          <source>Templates which extract information about types and symbols at compile time.</source>
          <target state="translated">コンパイル時に型やシンボルの情報を抽出するテンプレート。</target>
        </trans-unit>
        <trans-unit id="76d1df55eaac0e27ead23332cd68424965e0b265" translate="yes" xml:space="preserve">
          <source>Temporary closure variable.</source>
          <target state="translated">一時的な閉鎖変数。</target>
        </trans-unit>
        <trans-unit id="a030983d955bce3f66592d4d8fed011c5c3f0b4f" translate="yes" xml:space="preserve">
          <source>Temporary hack to initialize a dt_t* for C.</source>
          <target state="translated">Cのdt_t*を初期化するための一時的なハック。</target>
        </trans-unit>
        <trans-unit id="c4ebc55b69363bbb720e6062538fba3f91d7cabe" translate="yes" xml:space="preserve">
          <source>Temporary variable to enable / disable deprecation of comma expression depending on the context. Since most constructor calls are rewritting, the only place where false will be passed will be from the parser.</source>
          <target state="translated">コンテキストに応じてカンマ式の非推奨を有効/無効にするための一時変数です。ほとんどのコンストラクタ呼び出しは書き換えを行うので、Falseが渡されるのはパーサからだけです。</target>
        </trans-unit>
        <trans-unit id="c88ab2b908a10ea30dbe26e3cf3a97fa4e5eb4bd" translate="yes" xml:space="preserve">
          <source>Terminal_Punctuation</source>
          <target state="translated">Terminal_Punctuation</target>
        </trans-unit>
        <trans-unit id="aa9f431bdd778a9da48093314c8721383c9ae18d" translate="yes" xml:space="preserve">
          <source>Terminate list package.</source>
          <target state="translated">リストパッケージを終了します。</target>
        </trans-unit>
        <trans-unit id="265d2f5524a2ac16dca5c32fabd93e669260517c" translate="yes" xml:space="preserve">
          <source>Terminate use of druntime.</source>
          <target state="translated">ドランタイムの使用を終了します。</target>
        </trans-unit>
        <trans-unit id="41856428796ae48815fa332eab1db153dc019979" translate="yes" xml:space="preserve">
          <source>Terminates the runtime. This call is to be used in instances where the standard program termination process will not be not executed. This is most often in shared libraries or in libraries linked to a C program. If the runtime was not successfully initialized the function returns false.</source>
          <target state="translated">ランタイムを終了する。この呼び出しは、標準プログラムの終了処理が実行されない場合に使用されます。これは、共有ライブラリやCプログラムにリンクされたライブラリでよく見られます。ランタイムが正常に初期化されなかった場合、この関数はFalseを返す。</target>
        </trans-unit>
        <trans-unit id="56cb46ccab827174a1e1b86effcb3d5d6cefbd35" translate="yes" xml:space="preserve">
          <source>Terminates the thread module. No other thread routine may be called afterwards.</source>
          <target state="translated">スレッドモジュールを終了します。その後、他のスレッドルーチンを呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="b932645dfbe2f4cc7e54421fac789485495785ed" translate="yes" xml:space="preserve">
          <source>Termination of lifetime of temporaries does not obey the customary scoping rules and is defined as follows:</source>
          <target state="translated">テンポラリーのライフタイムの終了は、慣習的なスコープルールに従わず、以下のように定義されています。</target>
        </trans-unit>
        <trans-unit id="54b9edf1c19c21867b1c6f5a0d516af236d00cc3" translate="yes" xml:space="preserve">
          <source>Terminator &lt;code&gt;terminator&lt;/code&gt;</source>
          <target state="translated">ターミネーター &lt;code&gt;terminator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="e7d472b76d10887c103dda92fc35b9bb978b5299" translate="yes" xml:space="preserve">
          <source>Ternary &lt;strong id=&quot;empty&quot;&gt;empty&lt;/strong&gt;();</source>
          <target state="translated">3成分が&lt;strong id=&quot;empty&quot;&gt;空&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="5408a6547343b9801c7549a99e5188840858fa05" translate="yes" xml:space="preserve">
          <source>Ternary &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string s)(Ternary rhs)</source>
          <target state="translated">三元&lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;（文字列s）（三元RHS）</target>
        </trans-unit>
        <trans-unit id="61a734dfd14bc5bb5ac25f18ac9cb8682858064c" translate="yes" xml:space="preserve">
          <source>Ternary &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string s)(bool rhs)</source>
          <target state="translated">三元&lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;（文字列s）（ブール値RHS）</target>
        </trans-unit>
        <trans-unit id="abd25e300e86acc270bc7f7f32a0f16e698447aa" translate="yes" xml:space="preserve">
          <source>Ternary &lt;strong id=&quot;opUnary&quot;&gt;opUnary&lt;/strong&gt;(string s)()</source>
          <target state="translated">三項&lt;strong id=&quot;opUnary&quot;&gt;opUnary&lt;/strong&gt;（文字列s）（）</target>
        </trans-unit>
        <trans-unit id="380135dec6752a5219efd128ceee397c71493e97" translate="yes" xml:space="preserve">
          <source>Ternary &lt;strong id=&quot;owns&quot;&gt;owns&lt;/strong&gt;(void[] b);</source>
          <target state="translated">Ternary &lt;strong id=&quot;owns&quot;&gt;は所有します&lt;/strong&gt;（void [] b）;</target>
        </trans-unit>
        <trans-unit id="5fe840824f09b55cc8873c5c40f4982d7db99dfc" translate="yes" xml:space="preserve">
          <source>Ternary &lt;strong id=&quot;owns&quot;&gt;owns&lt;/strong&gt;(void[]);</source>
          <target state="translated">Ternary &lt;strong id=&quot;owns&quot;&gt;は所有します&lt;/strong&gt;（void []）;</target>
        </trans-unit>
        <trans-unit id="c9e4ebe582a67a767403a28daa93cef99c8de556" translate="yes" xml:space="preserve">
          <source>Ternary &lt;strong id=&quot;resolveInternalPointer&quot;&gt;resolveInternalPointer&lt;/strong&gt;(const void* p, ref void[] result);</source>
          <target state="translated">三元&lt;strong id=&quot;resolveInternalPointer&quot;&gt;resolveInternalPointer&lt;/strong&gt;（CONSTボイド* P、REFボイド[]結果）。</target>
        </trans-unit>
        <trans-unit id="807671195e85d5bec2aa478b814e406eda646d28" translate="yes" xml:space="preserve">
          <source>Ternary type with three truth values:</source>
          <target state="translated">3つの真理値を持つ3項式。</target>
        </trans-unit>
        <trans-unit id="640ab2bae07bedc4c163f679a746f7ab7fb5d1fa" translate="yes" xml:space="preserve">
          <source>Test</source>
          <target state="translated">Test</target>
        </trans-unit>
        <trans-unit id="a76dd0a3dd495aa45fe2a39614c44782afcb01ca" translate="yes" xml:space="preserve">
          <source>Test For Auto-Commit Mode</source>
          <target state="translated">自動コミットモードのテスト</target>
        </trans-unit>
        <trans-unit id="c05597ed0dba53dda21d6b294858039879f34b2b" translate="yes" xml:space="preserve">
          <source>Test To See If The Library Is Threadsafe</source>
          <target state="translated">ライブラリがスレッドセーフかどうかのテスト</target>
        </trans-unit>
        <trans-unit id="f4260e1148419ceb90540c404dc73c9d27bb1bb8" translate="yes" xml:space="preserve">
          <source>Test an enum with default (consecutive) values</source>
          <target state="translated">デフォルト(連続した)値を持つ列挙型をテストする</target>
        </trans-unit>
        <trans-unit id="7c6eb409a640870d68be20ffb89dc0f97c36f86b" translate="yes" xml:space="preserve">
          <source>Test an enum with non-integral values</source>
          <target state="translated">非積分値を持つ列挙型をテストする</target>
        </trans-unit>
        <trans-unit id="f4b150c2686c8f7e7ab220003a574d693a5d95e2" translate="yes" xml:space="preserve">
          <source>Test if &lt;code&gt;M&lt;/code&gt; is an UTF Matcher for ranges of &lt;code&gt;Char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;M&lt;/code&gt; が &lt;code&gt;Char&lt;/code&gt; の範囲のUTFマッチャーであるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="b5df7066b55b0c74120435614aa37ac6677d2d60" translate="yes" xml:space="preserve">
          <source>Test if Rng is a random-number generator. The overload taking a ElementType also makes sure that the Rng generates values of that type.</source>
          <target state="translated">Rngが乱数発生器であるかどうかをテストします。ElementTypeを取るオーバーロードは、Rngがその型の値を生成することも確認します。</target>
        </trans-unit>
        <trans-unit id="c36e2d0840f1f824df374ea5595d9aff6c4e947f" translate="yes" xml:space="preserve">
          <source>Test if Rng is seedable. The overload taking a SeedType also makes sure that the Rng can be seeded with SeedType.</source>
          <target state="translated">Rngがシード可能かどうかをテストします。また、SeedTypeを取るオーバーロードは、RngがSeedTypeでシード可能かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="771271d8873c3b21a601bf2c675f90a9ccc0ffc3" translate="yes" xml:space="preserve">
          <source>Test if expression is a binary array op.</source>
          <target state="translated">式がバイナリ配列 op.</target>
        </trans-unit>
        <trans-unit id="172aaae7f6f97929a4cfc47c9d74eb4946f350af" translate="yes" xml:space="preserve">
          <source>Test if expression is a binary assignment array op.</source>
          <target state="translated">式がバイナリ代入配列であるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="9300c8ec9a186273606279dfa9449d5d455cf04a" translate="yes" xml:space="preserve">
          <source>Test if expression is a unary array op.</source>
          <target state="translated">式が単項配列であるかどうかをテストします op.</target>
        </trans-unit>
        <trans-unit id="0d5244f0d0c7df2a1da58431bfc78e379751a7b9" translate="yes" xml:space="preserve">
          <source>Test if operand is a valid array op operand.</source>
          <target state="translated">オペランドが有効な配列オペランドであるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="875918357eabc46eb0a1c92bac320980adb8c720" translate="yes" xml:space="preserve">
          <source>Test if this match object is empty.</source>
          <target state="translated">このマッチオブジェクトが空であるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="df4149695689c92ee359aa248e67d88ff5ec18df" translate="yes" xml:space="preserve">
          <source>Test if this object doesn't contain any compiled pattern.</source>
          <target state="translated">このオブジェクトにコンパイルされたパターンが含まれていないかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="3a1ea05315421beb7c90d273402899ae913a7b04" translate="yes" xml:space="preserve">
          <source>Test to see if two reals are the same. Regard NaN's as equivalent. Regard +0 and -0 as different.</source>
          <target state="translated">2つのリアルが同じかどうかをテストします。NaNを等価とみなす。0と-0を異なるものとみなす。</target>
        </trans-unit>
        <trans-unit id="c6494d0db23bcdb573d84113943853295de919f8" translate="yes" xml:space="preserve">
          <source>Test whether &lt;code&gt;this&lt;/code&gt; is equal to &lt;code&gt;o&lt;/code&gt;. The default implementation only compares by identity (using the &lt;code&gt;is&lt;/code&gt; operator). Generally, overrides for &lt;code&gt;opEquals&lt;/code&gt; should attempt to compare objects by their contents.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; が &lt;code&gt;o&lt;/code&gt; と等しいかどうかをテストします。デフォルトの実装は、アイデンティティによってのみ比較されます（ &lt;code&gt;is&lt;/code&gt; 演算子を使用）。一般に、 &lt;code&gt;opEquals&lt;/code&gt; のオーバーライドは、オブジェクトをその内容で比較しようとします。</target>
        </trans-unit>
        <trans-unit id="5e332eb1e9dbd61d5d3e51a56d3c413e1056f0ba" translate="yes" xml:space="preserve">
          <source>Test whether the type is &lt;code&gt;JSONType.null_&lt;/code&gt;</source>
          <target state="translated">タイプが &lt;code&gt;JSONType.null_&lt;/code&gt; かどうかをテストします</target>
        </trans-unit>
        <trans-unit id="32dc0f341af79e76ca913dc9eb0ce7bac1d243c2" translate="yes" xml:space="preserve">
          <source>Test. The range is left unaffected regardless of the result of test.</source>
          <target state="translated">テストを行います。テストの結果に関わらず、範囲は影響を受けないままになります。</target>
        </trans-unit>
        <trans-unit id="f97153344fc6b5fd92539a5489c67be660fa5094" translate="yes" xml:space="preserve">
          <source>Tested type, if null, returns false.</source>
          <target state="translated">テストされた型で、nullの場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="c5d38ba7cbc400f9b209719e16e540214a64776c" translate="yes" xml:space="preserve">
          <source>Testing Interface</source>
          <target state="translated">テストインタフェース</target>
        </trans-unit>
        <trans-unit id="525b0e690ec5250557a58b08a062c12274d2c8b7" translate="yes" xml:space="preserve">
          <source>Testing Membership</source>
          <target state="translated">メンバーシップのテスト</target>
        </trans-unit>
        <trans-unit id="25a68a83b7176082f5e2ba19053a23bf236d5547" translate="yes" xml:space="preserve">
          <source>Testing that the compiler does this correctly is normally hackish and awkward, this enables efficient, direct, and simple testing.</source>
          <target state="translated">コンパイラがこれを正しく行うことをテストすることは、通常、ハックで厄介なことですが、これにより、効率的で直接的で簡単なテストが可能になります。</target>
        </trans-unit>
        <trans-unit id="1c56215ea968cf5b1786a762d8686e735aad09cd" translate="yes" xml:space="preserve">
          <source>Tests and complements the bit.</source>
          <target state="translated">ビットをテストして補完します。</target>
        </trans-unit>
        <trans-unit id="e5215a5973bd1ea3d7098ee9d049ca3355401493" translate="yes" xml:space="preserve">
          <source>Tests and resets (sets to 0) the bit.</source>
          <target state="translated">ビットをテストしてリセット(0に設定)します。</target>
        </trans-unit>
        <trans-unit id="2075b541b1f6f9a0cf3777e52df712b18587a41c" translate="yes" xml:space="preserve">
          <source>Tests and sets the bit.</source>
          <target state="translated">ビットをテストして設定します。</target>
        </trans-unit>
        <trans-unit id="20b58f47c6fc10d3a84014b226d9ef1a294ea115" translate="yes" xml:space="preserve">
          <source>Tests for this functionality can be found in test/profile/src/profilegc.d</source>
          <target state="translated">この機能のテストは test/profile/src/profilegc.d にあります。</target>
        </trans-unit>
        <trans-unit id="9449703c24169141bbb52227e05dcb6756b6aff1" translate="yes" xml:space="preserve">
          <source>Tests have proven that 20K is a very bad buffer size for uploads on Windows, while 16K for some odd reason performed a lot better. We do the ifndef check to allow this value to easier be changed at build time for those who feel adventurous. The practical minimum is about 400 bytes since libcurl uses a buffer of this size as a scratch area (unrelated to network send operations).</source>
          <target state="translated">Windows でのテストでは、20K はアップロードのバッファサイズとしては非常に悪いことが証明されていますが、奇妙な理由で 16K の方がはるかに良いパフォーマンスを示しています。私たちは ifndef チェックを行い、冒険心を感じる人のためにビルド時にこの値を簡単に変更できるようにしています。libcurl はこのサイズのバッファをスクラッチ領域 (ネットワーク送信操作とは無関係)として使用するため、実用的な最小値は約 400 バイトです。</target>
        </trans-unit>
        <trans-unit id="7b9ef0e0de0e0d2ca2aef3f77f084bb252817141" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;T&lt;/code&gt; is a pair of integers that implicitly convert to &lt;code&gt;V&lt;/code&gt;. The following code must compile for any pair &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が暗黙的に &lt;code&gt;V&lt;/code&gt; に変換される整数のペアであるかどうかをテストします。次のコードは、任意のペア &lt;code&gt;T&lt;/code&gt; に対してコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="8c8c256b6a901137e3b17d0d394473f1bf0010ea" translate="yes" xml:space="preserve">
          <source>Tests if T is some kind a set of code points. Intended for template constraints.</source>
          <target state="translated">Tがある種のコード点の集合であるかどうかをテストします。テンプレート制約のために意図されています。</target>
        </trans-unit>
        <trans-unit id="411bf491c2bca7ef9ade77af4f87a2c548c0bdbb" translate="yes" xml:space="preserve">
          <source>Tests if a given range has the &lt;code&gt;length&lt;/code&gt; attribute.</source>
          <target state="translated">指定された範囲に &lt;code&gt;length&lt;/code&gt; 属性があるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="c1e815d9ade99ef4137d6edf65d9041c8257f49b" translate="yes" xml:space="preserve">
          <source>Tests if a given range is an</source>
          <target state="translated">与えられた範囲が</target>
        </trans-unit>
        <trans-unit id="bde4f156e05ca670bc0e67e4a240e0963bde7076" translate="yes" xml:space="preserve">
          <source>Tests if a given range supports the array slicing operation &lt;code&gt; R[x .. y]&lt;/code&gt;.</source>
          <target state="translated">指定された範囲が配列スライス操作 &lt;code&gt; R[x .. y]&lt;/code&gt; サポートするかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="ad84d76bbe9e61a1d8ded8b282719c6188de299e" translate="yes" xml:space="preserve">
          <source>Tests if a given range's elements can be moved around using the primitives &lt;code&gt;moveFront&lt;/code&gt;, &lt;code&gt;moveBack&lt;/code&gt;, or &lt;code&gt;moveAt&lt;/code&gt;.</source>
          <target state="translated">プリミティブ &lt;code&gt;moveFront&lt;/code&gt; 、 &lt;code&gt;moveBack&lt;/code&gt; 、または &lt;code&gt;moveAt&lt;/code&gt; を使用して、指定された範囲の要素を移動できるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="8d793f3a6e7c2e95eb378beac167385719ab59f4" translate="yes" xml:space="preserve">
          <source>Tests if a range is a forward range with elements that can be passed by reference and have their address taken.</source>
          <target state="translated">範囲が、参照で渡すことができ、そのアドレスを持つ要素を持つ順方向の範囲であるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="e6eb69ba4d2881e64e415a05071a9f103fe521a9" translate="yes" xml:space="preserve">
          <source>Tests if a range is a forward range with mutable elements.</source>
          <target state="translated">範囲が変異可能な要素を持つ前方の範囲であるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="3514cf116bc5ed9d238a3b0f2c416cbf1406ecde" translate="yes" xml:space="preserve">
          <source>Tests if a range is a forward range with swappable elements.</source>
          <target state="translated">範囲がスワップ可能な要素を持つ前方の範囲であるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="7f3207abc4ab79cdb9c483585f3e941b9bfaa437" translate="yes" xml:space="preserve">
          <source>Tests if dchar &lt;code&gt;ch&lt;/code&gt; is always allowed (Quick_Check=YES) in normalization form &lt;code&gt;norm&lt;/code&gt;.</source>
          <target state="translated">正規化形式 &lt;code&gt;norm&lt;/code&gt; で dchar &lt;code&gt;ch&lt;/code&gt; が常に許可されている（Quick_Check = YES）かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="befffce91c09f40925fffacf854b40c946df8776" translate="yes" xml:space="preserve">
          <source>Tests if something is a</source>
          <target state="translated">何かが</target>
        </trans-unit>
        <trans-unit id="8d6f89518da90279816a90c9471e395bd384796c" translate="yes" xml:space="preserve">
          <source>Tests if something is an</source>
          <target state="translated">何かが</target>
        </trans-unit>
        <trans-unit id="0e1c0aed1d62ba9121fe6b94c90661bd5940a3af" translate="yes" xml:space="preserve">
          <source>Tests the bit. (No longer an intrisic - the compiler recognizes the patterns in the body.)</source>
          <target state="translated">ビットをテストします。(もはやイントリシックではない-コンパイラはボディのパターンを認識する)。</target>
        </trans-unit>
        <trans-unit id="f4f4ed66a37a54d3a46278ee76a6c98108f32780" translate="yes" xml:space="preserve">
          <source>Tests the presence of code point &lt;code&gt;val&lt;/code&gt; in this set.</source>
          <target state="translated">このセット内のコードポイント &lt;code&gt;val&lt;/code&gt; の存在をテストします。</target>
        </trans-unit>
        <trans-unit id="de8256fe3c8079a8a7b38b1ce5150ffcc1923b62" translate="yes" xml:space="preserve">
          <source>Tests the presence of codepoint &lt;code&gt;ch&lt;/code&gt; in this set, the same as &lt;a href=&quot;#opIndex&quot;&gt;&lt;code&gt;opIndex&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このセット内のコードポイント &lt;code&gt;ch&lt;/code&gt; の存在をテストします&lt;a href=&quot;#opIndex&quot;&gt; &lt;code&gt;opIndex&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="3f2f444fc7b5cd93b5daa924863d3256099d8d1c" translate="yes" xml:space="preserve">
          <source>Tests wether a key can be found in an object.</source>
          <target state="translated">オブジェクトの中にキーがあるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="5596cf2178863d7426683848832032923843383b" translate="yes" xml:space="preserve">
          <source>Tests whether all given items satisfy a template predicate, i.e. evaluates to &lt;code&gt;F!(T[0]) &amp;amp;&amp;amp; F!(T[1]) &amp;amp;&amp;amp; ... &amp;amp;&amp;amp; F!(T[$ - 1])&lt;/code&gt;.</source>
          <target state="translated">指定されたすべてのアイテムがテンプレート述語を満たすかどうかをテストします。つまり、 &lt;code&gt;F!(T[0]) &amp;amp;&amp;amp; F!(T[1]) &amp;amp;&amp;amp; ... &amp;amp;&amp;amp; F!(T[$ - 1])&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="0596e9e3cf69628efa950fe1bab0382b0dcf95bf" translate="yes" xml:space="preserve">
          <source>Tests whether any given items satisfy a template predicate, i.e. evaluates to &lt;code&gt;F!(T[0]) || F!(T[1]) || ... || F!(T[$ - 1])&lt;/code&gt;.</source>
          <target state="translated">特定のアイテムがテンプレート述語を満たすかどうかをテストします。つまり、 &lt;code&gt;F!(T[0]) || F!(T[1]) || ... || F!(T[$ - 1])&lt;/code&gt; 評価します|| F！（T [1]）|| ... || F！（T [$-1]）。</target>
        </trans-unit>
        <trans-unit id="686a7f263d59c9bc77e08d103e41e6b6097dc4c3" translate="yes" xml:space="preserve">
          <source>Tests whether the range &lt;code&gt;R&lt;/code&gt; has lvalue elements. These are defined as elements that can be passed by reference and have their address taken. The following code should compile for any range with lvalue elements.</source>
          <target state="translated">範囲 &lt;code&gt;R&lt;/code&gt; に左辺値要素があるかどうかをテストします。これらは、参照によって渡すことができ、アドレスが取得される要素として定義されます。次のコードは、lvalue要素を含むすべての範囲に対してコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="8bb780b7b4639e513de207eee9ca6ebb52198df1" translate="yes" xml:space="preserve">
          <source>Tests whether this thread is running.</source>
          <target state="translated">このスレッドが実行されているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="6949ea6aea1405f5da836774097338b86c14cca4" translate="yes" xml:space="preserve">
          <source>Tests whether this thread is the main thread, i.e. the thread that initialized the runtime</source>
          <target state="translated">このスレッドがメインスレッド、つまりランタイムを初期化したスレッドであるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="d1687cd16c0f03bc3b975bceb7e1a93532d5c303" translate="yes" xml:space="preserve">
          <source>Text &lt;code&gt;item&lt;/code&gt;</source>
          <target state="translated">テキスト &lt;code&gt;item&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cfc7e26dd5428580328070e7a06fd7ebcbd47226" translate="yes" xml:space="preserve">
          <source>Text Emphasis</source>
          <target state="translated">テキストの強調</target>
        </trans-unit>
        <trans-unit id="9740ffa930b7e0e5dc6d8da6cefed313549c2227" translate="yes" xml:space="preserve">
          <source>Text files: Either zero, or a value returned by &lt;a href=&quot;#tell&quot;&gt;&lt;code&gt;tell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テキストファイル：ゼロ、または&lt;a href=&quot;#tell&quot;&gt; &lt;code&gt;tell&lt;/code&gt; から&lt;/a&gt;返された値。</target>
        </trans-unit>
        <trans-unit id="4e0ff0523679bae8dae7ddd108d53202236baa1a" translate="yes" xml:space="preserve">
          <source>Text files: Shall necessarily be &lt;a href=&quot;core_stdc_stdio#SEEK_SET&quot;&gt;SEEK_SET&lt;/a&gt;.</source>
          <target state="translated">テキストファイル：&lt;a href=&quot;core_stdc_stdio#SEEK_SET&quot;&gt;SEEK_SETで&lt;/a&gt;ある必要があります。</target>
        </trans-unit>
        <trans-unit id="110569c98af1b7ca83bf2a55e559b2c9de2f1d74" translate="yes" xml:space="preserve">
          <source>Text inside these sections will be escaped according to the rules described above, then wrapped in a &lt;code&gt;&amp;amp;dollar;(DDOC_BACKQUOTED)&lt;/code&gt; macro. By default, this macro expands to be displayed as an inline text span, formatted as code.</source>
          <target state="translated">これらのセクション内のテキストは、上記のルールに従ってエスケープされ、 &lt;code&gt;&amp;amp;dollar;(DDOC_BACKQUOTED)&lt;/code&gt; マクロでラップされます。デフォルトでは、このマクロは展開され、コードとしてフォーマットされたインラインテキストスパンとして表示されます。</target>
        </trans-unit>
        <trans-unit id="550f1724580a5ba0d175052f9a3cc57e962a9a42" translate="yes" xml:space="preserve">
          <source>Text[] &lt;strong id=&quot;texts&quot;&gt;texts&lt;/strong&gt;;</source>
          <target state="translated">Text [] &lt;strong id=&quot;texts&quot;&gt;texts&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="02878ee8de0350d99773d9bfa9119f737b2c432e" translate="yes" xml:space="preserve">
          <source>Tgt</source>
          <target state="translated">Tgt</target>
        </trans-unit>
        <trans-unit id="2f72bba0ea07edaf4c51d66fc5bb6bab86a6ccd2" translate="yes" xml:space="preserve">
          <source>Thaana</source>
          <target state="translated">Thaana</target>
        </trans-unit>
        <trans-unit id="c32767e0541fe7038ff8d87e7b8aed17f49474f8" translate="yes" xml:space="preserve">
          <source>Thai</source>
          <target state="translated">Thai</target>
        </trans-unit>
        <trans-unit id="2b049d162a2da7d605f5f60c67f0b2c875a54367" translate="yes" xml:space="preserve">
          <source>That means a particular care should be taken when passing an array of a type different than &lt;code&gt;size_t&lt;/code&gt;, firstly because its length should be a multiple of &lt;code&gt;size_t.sizeof&lt;/code&gt;, and secondly because how the bits are mapped:</source>
          <target state="translated">つまり、 &lt;code&gt;size_t&lt;/code&gt; とは異なる型の配列を渡すときは、特に長さが &lt;code&gt;size_t.sizeof&lt;/code&gt; の倍数である必要があるため、次にビットがどのようにマップされるかによって、特に注意が必要です。</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="841034a66867088852b691ee577602f956ee6d30" translate="yes" xml:space="preserve">
          <source>The &quot;default&quot;, &quot;favorite&quot;, &quot;suggested&quot; random number generator type on the current platform. It is an alias for one of the previously-defined generators. You may want to use it if (1) you need to generate some nice random numbers, and (2) you don't care for the minutiae of the method being used.</source>
          <target state="translated">現在のプラットフォームにおける「デフォルト」、「お気に入り」、「推奨」の乱数発生器のタイプ。これは、以前に定義されたジェネレータのエイリアスです。</target>
        </trans-unit>
        <trans-unit id="b0187c6c3cc333e3b63fdd6f3f40abbfebecf5ce" translate="yes" xml:space="preserve">
          <source>The 'CURLVERSION_NOW' is the symbolic name meant to be used by basically all programs ever that want to get version information. It is meant to be a built-in version number for what kind of struct the caller expects. If the struct ever changes, we redefine the NOW to another enum from above.</source>
          <target state="translated">CURLVERSION_NOW' は、基本的にすべてのプログラムでバージョン情報を取得するために使用されるシンボリック名です。これは、呼び出し元がどのような構造体を期待しているかについての組み込みのバージョン番号であることを意味しています。構造体が変更された場合は、NOW を上から別の enum に再定義します。</target>
        </trans-unit>
        <trans-unit id="d1f8d29986e592eb2309b74e7ba9f1ad07481d10" translate="yes" xml:space="preserve">
          <source>The 'op=' versions of the above overloaded operators.</source>
          <target state="translated">上記のオーバーロードされた演算子の'op='バージョン。</target>
        </trans-unit>
        <trans-unit id="3a976ead2fa957aa078bdc5c148ef317d271794a" translate="yes" xml:space="preserve">
          <source>The 'path' in -conf=path, which is the path to the config file to use</source>
          <target state="translated">conf=path の 'path' は、使用する設定ファイルへのパスです。</target>
        </trans-unit>
        <trans-unit id="31c7a95d829cacee9ae6a883506beeedd2134baa" translate="yes" xml:space="preserve">
          <source>The -unittest flag needs to be passed to the compiler. If the flag is not passed &lt;code&gt;__traits(getUnitTests)&lt;/code&gt; will always return an empty tuple.</source>
          <target state="translated">-unittestフラグをコンパイラーに渡す必要があります。フラグが渡されない場合、 &lt;code&gt;__traits(getUnitTests)&lt;/code&gt; は常に空のタプルを返します。</target>
        </trans-unit>
        <trans-unit id="723454678858263ffe8d6a6ec7de6d5f571a19fc" translate="yes" xml:space="preserve">
          <source>The .netrc will never be read. This is the default.</source>
          <target state="translated">.netrcは決して読み込まれません。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="5fc56dfb80dd68bb355d005695826ac631cdc022" translate="yes" xml:space="preserve">
          <source>The 16-bit Windows system directory.</source>
          <target state="translated">16ビットWindowsのシステムディレクトリ。</target>
        </trans-unit>
        <trans-unit id="5aed8640844a3d20118fd4844ea5d066ae035774" translate="yes" xml:space="preserve">
          <source>The 32-bit Windows system directory.</source>
          <target state="translated">32ビットWindowsのシステムディレクトリ。</target>
        </trans-unit>
        <trans-unit id="3822c06d82d04b0602bcb4a74379105b3119d9a8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#Address&quot;&gt;&lt;code&gt;Address&lt;/code&gt;&lt;/a&gt; to associate this socket with.</source>
          <target state="translated">&lt;a href=&quot;#Address&quot;&gt; &lt;code&gt;Address&lt;/code&gt; &lt;/a&gt;でこのソケットを関連付けます。</target>
        </trans-unit>
        <trans-unit id="34d87623f07a3df5b3f286e1571b6960ff3c3a80" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; to subtract from this one.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;から差し引く日付。</target>
        </trans-unit>
        <trans-unit id="5ea785f46b5e279a5fe31d9bcbc3fe5daaf562c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; to subtract from this one.</source>
          <target state="translated">&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;この1から減算します。</target>
        </trans-unit>
        <trans-unit id="d0e37d9857c458a95dd085ddb2d77157413d4e72" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#DirEntry&quot;&gt;&lt;code&gt;DirEntry&lt;/code&gt;&lt;/a&gt; to remove</source>
          <target state="translated">&lt;a href=&quot;#DirEntry&quot;&gt; &lt;code&gt;DirEntry&lt;/code&gt; &lt;/a&gt;削除するには</target>
        </trans-unit>
        <trans-unit id="34c1a1f06a34f8fc1a3c2e67067eaacabd34869e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#EmailStatusCode&quot;&gt;&lt;code&gt;EmailStatusCode&lt;/code&gt;&lt;/a&gt; to read</source>
          <target state="translated">&lt;a href=&quot;#EmailStatusCode&quot;&gt; &lt;code&gt;EmailStatusCode&lt;/code&gt; &lt;/a&gt;読み取りへ</target>
        </trans-unit>
        <trans-unit id="78ee8056a7cc493671dbfe1dc57a34b10deb9e1b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#EnumBaseType&quot;&gt;&lt;i&gt;EnumBaseType&lt;/i&gt;&lt;/a&gt; of named enums must support comparison in order to compute the &lt;code&gt;.max&lt;/code&gt; and &lt;code&gt;.min&lt;/code&gt; properties.</source>
          <target state="translated">名前付き列挙型の&lt;a href=&quot;#EnumBaseType&quot;&gt;&lt;i&gt;EnumBaseType&lt;/i&gt;&lt;/a&gt;は、 &lt;code&gt;.max&lt;/code&gt; および &lt;code&gt;.min&lt;/code&gt; プロパティを計算するために比較をサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="b5f3720a1adb0f3176194f3917579d377aa449f9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#Initializer&quot;&gt;&lt;i&gt;Initializer&lt;/i&gt;&lt;/a&gt; for a global or static variable must be evaluatable at compile time. Runtime initialization is done with static constructors.</source>
          <target state="translated">グローバル変数または静的変数の&lt;a href=&quot;#Initializer&quot;&gt;&lt;i&gt;初期化子&lt;/i&gt;&lt;/a&gt;は、コンパイル時に評価可能でなければなりません。ランタイムの初期化は、静的コンストラクターで行われます。</target>
        </trans-unit>
        <trans-unit id="80545d65ce3ac684ca91f02582517a26ef753e16" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#Interval&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt; to assign to this one.</source>
          <target state="translated">これに割り当てる&lt;a href=&quot;#Interval&quot;&gt; &lt;code&gt;Interval&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f7647e4b267ecf7e3a76571ada3fdacd698012ed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#Pid&quot;&gt;&lt;code&gt;Pid&lt;/code&gt;&lt;/a&gt; of the child process.</source>
          <target state="translated">子プロセスの&lt;a href=&quot;#Pid&quot;&gt; &lt;code&gt;Pid&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a7d45e276c1157a48db1764d13a939e845c33bc9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ScopeStatementList&quot;&gt;&lt;i&gt;ScopeStatementList&lt;/i&gt;&lt;/a&gt; introduces a new scope.</source>
          <target state="translated">&lt;a href=&quot;#ScopeStatementList&quot;&gt;&lt;i&gt;ScopeStatementListは、&lt;/i&gt;&lt;/a&gt;新しいスコープを導入しています。</target>
        </trans-unit>
        <trans-unit id="66ec6d2fcb103334da9a8b894f800e0431548606" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#StaticAssert&quot;&gt;&lt;i&gt;StaticAssert&lt;/i&gt;&lt;/a&gt; can be used to issue errors at compilation time for branches of the conditional compilation that are errors.</source>
          <target state="translated">&lt;a href=&quot;#StaticAssert&quot;&gt;&lt;i&gt;StaticAssertは&lt;/i&gt;&lt;/a&gt;エラーである条件付きコンパイルの枝のためのコンパイル時に問題がエラーに使用することができます。</target>
        </trans-unit>
        <trans-unit id="06e17380102c60dcb03f8837a22d0093ff7cde88" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to assign to this one.</source>
          <target state="translated">これに割り当てる&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="207dd1b8a4f95c054bf6246935ea41770d996fac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to convert.</source>
          <target state="translated">&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="8a4c34034a2cb8149059ccb52e1b31889b6ee383" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to subtract from this one.</source>
          <target state="translated">&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;この1から減算します。</target>
        </trans-unit>
        <trans-unit id="cff9eb5299e33a3aaa4866e20fa3a6deb4e87d8b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; which is returned is in UTC.</source>
          <target state="translated">&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;返されるUTCです。</target>
        </trans-unit>
        <trans-unit id="2c089e8236fdabd8d9be544307b70b1cf9caaa13" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#Tid&quot;&gt;&lt;code&gt;Tid&lt;/code&gt;&lt;/a&gt; of the caller's thread.</source>
          <target state="translated">呼び出し元のスレッドの&lt;a href=&quot;#Tid&quot;&gt; &lt;code&gt;Tid&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="13239abac4fc6f880e927488a37426d1988f0906" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt; to subtract from this one.</source>
          <target state="translated">&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; &lt;/a&gt;この1から減算します。</target>
        </trans-unit>
        <trans-unit id="5568c800d11447839caafcd858afac1c90ab999a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#Type&quot;&gt;&lt;i&gt;Type&lt;/i&gt;&lt;/a&gt; above is the type of a variable or the return type of a function. This is never a &lt;a href=&quot;#TypeFunction&quot;&gt;&lt;i&gt;TypeFunction&lt;/i&gt;&lt;/a&gt;, as the latter can only be bound to a value via a pointer to a function or a delegate.</source>
          <target state="translated">&lt;a href=&quot;#Type&quot;&gt;&lt;i&gt;タイプは、&lt;/i&gt;&lt;/a&gt;上記の変数または関数の戻り型のタイプです。&lt;a href=&quot;#TypeFunction&quot;&gt;&lt;i&gt;TypeFunction&lt;/i&gt;&lt;/a&gt;は、関数またはデリゲートへのポインターを介してのみ値にバインドできるため、決して&lt;i&gt;TypeFunction&lt;/i&gt;にはなりません。</target>
        </trans-unit>
        <trans-unit id="582962af3aa815ce568eaa34305272d8bb55ca09" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#selector-attribute&quot;&gt;&lt;code&gt;@selector&lt;/code&gt;&lt;/a&gt; attribute indicates which Objective-C selector should be used when calling this method. This attribute needs to be attached to all methods with the &lt;code&gt;Objective-C&lt;/code&gt; linkage.</source>
          <target state="translated">&lt;a href=&quot;#selector-attribute&quot;&gt; &lt;code&gt;@selector&lt;/code&gt; の&lt;/a&gt;属性は、このメソッドを呼び出すときに使用されるべきであるObjective-Cのセレクタを示します。この属性は、 &lt;code&gt;Objective-C&lt;/code&gt; リンケージを使用するすべてのメソッドに関連付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="1e4dae8c55a4019bd019df8cbf97d7672b905097" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#static_struct_init&quot;&gt;static initializer syntax&lt;/a&gt; can also be used to initialize non-static variables. The initializer need not be evaluable at compile time.</source>
          <target state="translated">&lt;a href=&quot;#static_struct_init&quot;&gt;静的初期化子の構文は&lt;/a&gt;、非静的変数を初期化するために使用することができます。初期化子はコンパイル時に評価可能である必要はありません。</target>
        </trans-unit>
        <trans-unit id="8169d1266bc065db8156bf51397ae1c6ddebcd45" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;core_time#ClockType&quot;&gt;&lt;code&gt;core.time.ClockType&lt;/code&gt;&lt;/a&gt; indicates which system clock to use to get the current time. Very few programs need to use anything other than the default.</source>
          <target state="translated">&lt;a href=&quot;core_time#ClockType&quot;&gt; &lt;code&gt;core.time.ClockType&lt;/code&gt; は、&lt;/a&gt;現在の時刻を取得するために使用するシステムクロックを示します。ほとんどのプログラムは、デフォルト以外のものを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="bd3bdabdeefd481383f96f2a3801bfd145044b4a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; to add to or subtract from this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;に追加したり、これから減算する&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75b962fb808beadc99e9b25a573d63d541dd58e9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; to add to or subtract from this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;に追加したり、これから減算する&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1d75eebdd136326278ed1ff54a462d66c8152ff9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; to add to or subtract from this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;に追加または削除する&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="802357de02f2910abfaab4969e438b3d74aa6db1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; to add to or subtract from this &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;に加算または減算する&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a6a5b45b3146e53f75b07950ca620f3168d2deba" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;declaration#VectorBaseType&quot;&gt;&lt;i&gt;VectorBaseType&lt;/i&gt;&lt;/a&gt; must be a &lt;a href=&quot;https://dlang.org/arrays.html#static-arrays&quot;&gt;Static Array&lt;/a&gt;. The &lt;a id=&quot;VectorElementType&quot;&gt;VectorElementType&lt;/a&gt; is the unqualified element type of the static array. The dimension of the static array is the number of elements in the vector.</source>
          <target state="translated">&lt;a href=&quot;declaration#VectorBaseType&quot;&gt;&lt;i&gt;VectorBaseTypeが&lt;/i&gt;&lt;/a&gt;でなければならない&lt;a href=&quot;https://dlang.org/arrays.html#static-arrays&quot;&gt;静的な配列&lt;/a&gt;。&lt;a id=&quot;VectorElementType&quot;&gt;VectorElementTypeは、&lt;/a&gt;静的配列の修飾されていない要素型です。静的配列の次元は、ベクトルの要素の数です。</target>
        </trans-unit>
        <trans-unit id="effa6c75295cbc49f2bd14a0813e7c7b20ad36aa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;expression#InExpression&quot;&gt;&lt;i&gt;InExpression&lt;/i&gt;&lt;/a&gt; yields a pointer to the value if the key is in the associative array, or &lt;code&gt;null&lt;/code&gt; if not:</source>
          <target state="translated">&lt;a href=&quot;expression#InExpression&quot;&gt;&lt;i&gt;InExpressionは、&lt;/i&gt;&lt;/a&gt;キーが連想配列である場合、または値へのポインタを与える &lt;code&gt;null&lt;/code&gt; なりません。</target>
        </trans-unit>
        <trans-unit id="d10d2c3a02c91a9eaadda4648e8839a3ba8463c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://ddili.org/ders/d.en/files.html&quot;&gt;official tutorial&lt;/a&gt; for an introduction to working with files in D, module &lt;a href=&quot;std_stdio&quot;&gt;&lt;code&gt;std.stdio&lt;/code&gt;&lt;/a&gt; for opening files and manipulating them via handles, and module &lt;a href=&quot;std_path&quot;&gt;&lt;code&gt;std.path&lt;/code&gt;&lt;/a&gt; for manipulating path strings.</source>
          <target state="translated">&lt;a href=&quot;http://ddili.org/ders/d.en/files.html&quot;&gt;公式チュートリアル&lt;/a&gt; D内のファイルを扱うに導入するために、モジュール&lt;a href=&quot;std_stdio&quot;&gt; &lt;code&gt;std.stdio&lt;/code&gt; &lt;/a&gt;ファイルを開くと、ハンドルを経由して、それらを操作するための、およびモジュール&lt;a href=&quot;std_path&quot;&gt; &lt;code&gt;std.path&lt;/code&gt; &lt;/a&gt;パス文字列を操作するため。</target>
        </trans-unit>
        <trans-unit id="7f10e36fd0934caf1d07c4486428d20fe9704f09" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://digitalmars.com/d/1.0/operatoroverloading.html&quot;&gt;D1 operator overload mechanisms&lt;/a&gt; are deprecated.</source>
          <target state="translated">&lt;a href=&quot;http://digitalmars.com/d/1.0/operatoroverloading.html&quot;&gt;D1オペレータ過負荷機構は&lt;/a&gt;推奨されません。</target>
        </trans-unit>
        <trans-unit id="8aed6127995bd75e76ecf6bfc0fe20f221a52ef0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Julian_day&quot;&gt;Julian day&lt;/a&gt; for this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; at noon (since the Julian day changes at noon).</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Julian_day&quot;&gt;ユリウス日&lt;/a&gt;、このため&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;正午（ユリウス日は正午に変化するので）。</target>
        </trans-unit>
        <trans-unit id="6f9693a97556000512811c0be3654e4711f8c9f3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Julian_day&quot;&gt;Julian day&lt;/a&gt; for this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; at the given time. For example, prior to noon, 1996-03-31 would be the Julian day number 2_450_173, so this function returns 2_450_173, while from noon onward, the julian day number would be 2_450_174, so this function returns 2_450_174.</source>
          <target state="translated">指定された時間におけるこの&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;http://en.wikipedia.org/wiki/Julian_day&quot;&gt;ユリウス日&lt;/a&gt;。たとえば、正午より前では、1996-03-31はユリウス日番号2_450_173であるため、この関数は2_450_173を返し、正午以降は、ユリウス日番号は2_450_174になるため、この関数は2_450_174を返します。</target>
        </trans-unit>
        <trans-unit id="9ebaf21b57e868005b0da3f2c282e36d7b90e06c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Julian_day&quot;&gt;Julian day&lt;/a&gt; for this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; at the given time. For example, prior to noon, 1996-03-31 would be the Julian day number 2_450_173, so this function returns 2_450_173, while from noon onward, the Julian day number would be 2_450_174, so this function returns 2_450_174.</source>
          <target state="translated">指定された時刻のこの&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;http://en.wikipedia.org/wiki/Julian_day&quot;&gt;ユリウス日&lt;/a&gt;。たとえば、正午より前では、1996-03-31はユリウス日番号2_450_173であるため、この関数は2_450_173を返し、正午以降は、ユリウス日番号は2_450_174になるため、この関数は2_450_174を返します。</target>
        </trans-unit>
        <trans-unit id="f1315c501ab7c8abc5b3669ec5fc148fef194077" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;endianness&lt;/a&gt; (byte order) of the layout of the data will conform to the endianness of the target machine. The Intel x86 CPUs are</source>
          <target state="translated">データのレイアウトの&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;エンディアン&lt;/a&gt;（バイト順）は、ターゲットマシンのエンディアンに準拠します。Intel x86 CPUは</target>
        </trans-unit>
        <trans-unit id="38e38f26969116e49ca5ad61cb9c0c6b7110d3e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Mersenne_Twister&quot;&gt;Mersenne Twister&lt;/a&gt; generator.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Mersenne_Twister&quot;&gt;メルセンヌツイスター&lt;/a&gt;発生装置。</target>
        </trans-unit>
        <trans-unit id="c9f82d023b95ffa80b2f699e9e809a3c89a026b0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std%20format_#formattedWrite&quot;&gt;format string&lt;/a&gt;. When passed as a compile-time argument, the string will be statically checked against the argument types passed.</source>
          <target state="translated">&lt;a href=&quot;std%20format_#formattedWrite&quot;&gt;フォーマット文字列&lt;/a&gt;。コンパイル時の引数として渡されると、文字列は渡された引数の型に対して静的にチェックされます。</target>
        </trans-unit>
        <trans-unit id="481e9a24c24efd34a009264a7e75b75ffae8d4de" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_container_array&quot;&gt;&lt;code&gt;std.container.array&lt;/code&gt;&lt;/a&gt; module provides an array type with deterministic control of memory, not reliant on the GC unlike built-in arrays.</source>
          <target state="translated">&lt;a href=&quot;std_container_array&quot;&gt; &lt;code&gt;std.container.array&lt;/code&gt; &lt;/a&gt;モジュール内蔵アレイとは異なり、GCに依存しないメモリの確定的制御を有する配列型を提供します。</target>
        </trans-unit>
        <trans-unit id="dfa5a280cf90a28fa7e0eef541fa14d62e72889f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_container_binaryheap&quot;&gt;&lt;code&gt;std.container.binaryheap&lt;/code&gt;&lt;/a&gt; module provides a binary heap implementation that can be applied to any user-provided random-access range.</source>
          <target state="translated">&lt;a href=&quot;std_container_binaryheap&quot;&gt; &lt;code&gt;std.container.binaryheap&lt;/code&gt; &lt;/a&gt;モジュールは、ユーザが提供するランダムアクセス範囲に適用することができるバイナリヒープ実装を提供します。</target>
        </trans-unit>
        <trans-unit id="2119b8da972da345ec79612705fb31e169986f77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_container_dlist&quot;&gt;&lt;code&gt;std.container.dlist&lt;/code&gt;&lt;/a&gt; module provides a doubly-linked list implementation.</source>
          <target state="translated">&lt;a href=&quot;std_container_dlist&quot;&gt; &lt;code&gt;std.container.dlist&lt;/code&gt; &lt;/a&gt;モジュールは、二重リンクリストの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="f5fb0146d19f80ce350def73e46817f3153f1ed2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_container_rbtree&quot;&gt;&lt;code&gt;std.container.rbtree&lt;/code&gt;&lt;/a&gt; module implements red-black trees.</source>
          <target state="translated">&lt;a href=&quot;std_container_rbtree&quot;&gt; &lt;code&gt;std.container.rbtree&lt;/code&gt; &lt;/a&gt;モジュール実装は、赤黒木。</target>
        </trans-unit>
        <trans-unit id="e298b015d33d43064046aea1f114005ecd3146c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_container_slist&quot;&gt;&lt;code&gt;std.container.slist&lt;/code&gt;&lt;/a&gt; module implements singly-linked lists.</source>
          <target state="translated">&lt;a href=&quot;std_container_slist&quot;&gt; &lt;code&gt;std.container.slist&lt;/code&gt; &lt;/a&gt;モジュールを実装単一リンクリスト。</target>
        </trans-unit>
        <trans-unit id="93d548eb67721f59514b3a9fcf6295da94bb0b20" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_container_util&quot;&gt;&lt;code&gt;std.container.util&lt;/code&gt;&lt;/a&gt; module contains some generic tools commonly used by container implementations.</source>
          <target state="translated">&lt;a href=&quot;std_container_util&quot;&gt; &lt;code&gt;std.container.util&lt;/code&gt; &lt;/a&gt;モジュールは、一般的に、コンテナの実装によって使用されるいくつかの一般的なツールが含まれています。</target>
        </trans-unit>
        <trans-unit id="25369d56bc9c24a5642f926b4c95112802f3c450" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt; to use to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s internal std time. As &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt; has no concept of time zone, tz is used as its time zone.</source>
          <target state="translated">&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; は、&lt;/a&gt;この設定に使用する&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の内部STD時間を。以下のよう&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; は、&lt;/a&gt;タイムゾーンの概念がない、TZは、そのタイムゾーンとして使用されています。</target>
        </trans-unit>
        <trans-unit id="40b6cce9339f7a4c6635b21b800c941d34791b3b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_datetime_date#DateTime&quot;&gt;&lt;code&gt;std.datetime.date.DateTime&lt;/code&gt;&lt;/a&gt; to use to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s internal std time. As &lt;a href=&quot;std_datetime_date#DateTime&quot;&gt;&lt;code&gt;std.datetime.date.DateTime&lt;/code&gt;&lt;/a&gt; has no concept of time zone, tz is used as its time zone.</source>
          <target state="translated">&lt;a href=&quot;std_datetime_date#DateTime&quot;&gt; &lt;code&gt;std.datetime.date.DateTime&lt;/code&gt; は、&lt;/a&gt;この設定に使用する&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の内部STD時間を。以下のよう&lt;a href=&quot;std_datetime_date#DateTime&quot;&gt; &lt;code&gt;std.datetime.date.DateTime&lt;/code&gt; は、&lt;/a&gt;タイムゾーンの概念がない、TZは、そのタイムゾーンとして使用されています。</target>
        </trans-unit>
        <trans-unit id="6e43d0d7ff46bcb20c2dae1597b0a93ebe575980" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_datetime_date#TimeOfDay&quot;&gt;&lt;code&gt;std.datetime.date.TimeOfDay&lt;/code&gt;&lt;/a&gt; to set this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;'s time portion to.</source>
          <target state="translated">&lt;a href=&quot;std_datetime_date#TimeOfDay&quot;&gt; &lt;code&gt;std.datetime.date.TimeOfDay&lt;/code&gt; は、&lt;/a&gt;この設定する&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;までの時間部分を。</target>
        </trans-unit>
        <trans-unit id="1ca7e1a66704d1b5289d51285f4b82f1cff387b1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_datetime_timezone#TimeZone&quot;&gt;&lt;code&gt;std.datetime.timezone.TimeZone&lt;/code&gt;&lt;/a&gt; to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s time zone to.</source>
          <target state="translated">&lt;a href=&quot;std_datetime_timezone#TimeZone&quot;&gt; &lt;code&gt;std.datetime.timezone.TimeZone&lt;/code&gt; &lt;/a&gt;この設定する&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;へのタイムゾーンを。</target>
        </trans-unit>
        <trans-unit id="81c02825b5b14c0f10a52b089c01fa05ef0129bb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_datetime_timezone#TimeZone&quot;&gt;&lt;code&gt;std.datetime.timezone.TimeZone&lt;/code&gt;&lt;/a&gt; to use for this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;. If null, &lt;a href=&quot;std_datetime_timezone#LocalTime&quot;&gt;&lt;code&gt;std.datetime.timezone.LocalTime&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="translated">この&lt;a href=&quot;std_datetime_timezone#TimeZone&quot;&gt; &lt;code&gt;std.datetime.timezone.TimeZone&lt;/code&gt; &lt;/a&gt;に使用する&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;。nullの場合、&lt;a href=&quot;std_datetime_timezone#LocalTime&quot;&gt; &lt;code&gt;std.datetime.timezone.LocalTime&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="5ddd6c581df9a07885fdff9c9d57f3a0dd8af7cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_datetime_timezone#TimeZone&quot;&gt;&lt;code&gt;std.datetime.timezone.TimeZone&lt;/code&gt;&lt;/a&gt; to use for this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;. If null, &lt;a href=&quot;std_datetime_timezone#LocalTime&quot;&gt;&lt;code&gt;std.datetime.timezone.LocalTime&lt;/code&gt;&lt;/a&gt; will be used. The given &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt; is assumed to be in the given time zone.</source>
          <target state="translated">この&lt;a href=&quot;std_datetime_timezone#TimeZone&quot;&gt; &lt;code&gt;std.datetime.timezone.TimeZone&lt;/code&gt; &lt;/a&gt;に使用する&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;。nullの場合、&lt;a href=&quot;std_datetime_timezone#LocalTime&quot;&gt; &lt;code&gt;std.datetime.timezone.LocalTime&lt;/code&gt; &lt;/a&gt;が使用されます。指定された&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; &lt;/a&gt;は、指定されたタイムゾーンにあると見なされます。</target>
        </trans-unit>
        <trans-unit id="1fcfa02211ca223ce042227e6e460db112358e19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_datetime_timezone#TimeZone&quot;&gt;&lt;code&gt;std.datetime.timezone.TimeZone&lt;/code&gt;&lt;/a&gt; to use for this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;. If null, &lt;a href=&quot;std_datetime_timezone#LocalTime&quot;&gt;&lt;code&gt;std.datetime.timezone.LocalTime&lt;/code&gt;&lt;/a&gt; will be used. The given &lt;a href=&quot;std_datetime_date#DateTime&quot;&gt;&lt;code&gt;std.datetime.date.DateTime&lt;/code&gt;&lt;/a&gt; is assumed to be in the given time zone.</source>
          <target state="translated">この&lt;a href=&quot;std_datetime_timezone#TimeZone&quot;&gt; &lt;code&gt;std.datetime.timezone.TimeZone&lt;/code&gt; &lt;/a&gt;に使用する&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;。nullの場合、&lt;a href=&quot;std_datetime_timezone#LocalTime&quot;&gt; &lt;code&gt;std.datetime.timezone.LocalTime&lt;/code&gt; &lt;/a&gt;が使用されます。指定された&lt;a href=&quot;std_datetime_date#DateTime&quot;&gt; &lt;code&gt;std.datetime.date.DateTime&lt;/code&gt; &lt;/a&gt;は、指定されたタイムゾーンにあると見なされます。</target>
        </trans-unit>
        <trans-unit id="08defa52d0f78153c4cad926f82b67c861f1be23" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_format#FormatSpec&quot;&gt;&lt;code&gt;std.format.FormatSpec&lt;/code&gt;&lt;/a&gt; defining how to write the value.</source>
          <target state="translated">&lt;a href=&quot;std_format#FormatSpec&quot;&gt; &lt;code&gt;std.format.FormatSpec&lt;/code&gt; は&lt;/a&gt;値を書き込む方法を定義します。</target>
        </trans-unit>
        <trans-unit id="da7dc5894bf45c46b28c38bfbe1e06829d7ea9b4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_format#formattedWrite&quot;&gt;format string&lt;/a&gt;. When passed as a compile-time argument, the string will be statically checked against the argument types passed.</source>
          <target state="translated">&lt;a href=&quot;std_format#formattedWrite&quot;&gt;フォーマット文字列&lt;/a&gt;。コンパイル時の引数として渡されると、文字列は渡された引数の型に対して静的にチェックされます。</target>
        </trans-unit>
        <trans-unit id="996e3f7bfd240f0b6638a423c48f3771a90ccfd7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_parallelism#task&quot;&gt;&lt;code&gt;std.parallelism.task&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;std_parallelism#scopedTask&quot;&gt;&lt;code&gt;std.parallelism.scopedTask&lt;/code&gt;&lt;/a&gt; functions can be used to create an instance of this struct. See &lt;code&gt;task&lt;/code&gt; for usage examples.</source>
          <target state="translated">&lt;a href=&quot;std_parallelism#task&quot;&gt; &lt;code&gt;std.parallelism.task&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;std_parallelism#scopedTask&quot;&gt; &lt;code&gt;std.parallelism.scopedTask&lt;/code&gt; &lt;/a&gt;関数は、この構造体のインスタンスを作成するために使用することができます。使用例については、 &lt;code&gt;task&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="17a7dba8fb267a6bf56ea097ca9bbf1d8c9db713" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives&quot;&gt;&lt;code&gt;std.range.primitives&lt;/code&gt;&lt;/a&gt; submodule provides basic range functionality. It defines several templates for testing whether a given object is a range, what kind of range it is, and provides some common range operations.  The &lt;a href=&quot;std_range_interfaces&quot;&gt;&lt;code&gt;std.range.interfaces&lt;/code&gt;&lt;/a&gt; submodule provides object-based interfaces for working with ranges via runtime polymorphism.  The remainder of this module provides a rich set of range creation and composition templates that let you construct new ranges out of existing ranges:</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives&quot;&gt; &lt;code&gt;std.range.primitives&lt;/code&gt; の&lt;/a&gt;サブモジュールは、基本的な範囲の機能を提供します。特定のオブジェクトが範囲であるかどうか、どのような範囲であるかをテストするためのいくつかのテンプレートを定義し、いくつかの一般的な範囲操作を提供します。&lt;a href=&quot;std_range_interfaces&quot;&gt; &lt;code&gt;std.range.interfaces&lt;/code&gt; の&lt;/a&gt;サブモジュールは、ランタイム多型を介して範囲を操作するためのオブジェクトベースのインタフェースを提供します。このモジュールの残りの部分では、既存の範囲から新しい範囲を構築できるようにする範囲作成および構成テンプレートの豊富なセットを提供します。</target>
        </trans-unit>
        <trans-unit id="8bc9200c08dfc6228f7d505663f83af0f17d9fbb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;bidirectional range&lt;/a&gt; to check.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;双方向の範囲&lt;/a&gt;チェックします。</target>
        </trans-unit>
        <trans-unit id="b431ca8d283d375b7c8a22210b546a6efef61b11" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; to move forward.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前進レンジ&lt;/a&gt;前進します。</target>
        </trans-unit>
        <trans-unit id="369ec9042a7546e2cad9bbf6e6a080f3772b0c25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; to search for.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前方の範囲&lt;/a&gt;を検索します。</target>
        </trans-unit>
        <trans-unit id="8ec17c85557100072993cd5c068790742349c464" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; to search in.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前進レンジ&lt;/a&gt;で検索します。</target>
        </trans-unit>
        <trans-unit id="b8760be6cdf077df34f28a96eae1b9c765d650e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; to search.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前進レンジ&lt;/a&gt;検索します。</target>
        </trans-unit>
        <trans-unit id="15ac7337e01f1d9ab183d6ae25d5a20a312c2083" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; searched in.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲は、&lt;/a&gt;で検索しました。</target>
        </trans-unit>
        <trans-unit id="7eb60916c92bf64de177162de8e5c1050d35606a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to be counted.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;カウントします。</target>
        </trans-unit>
        <trans-unit id="54ec01abf5c0ea4698d52f36cd4ccc451206d4dd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to be mapped. If &lt;code&gt;source&lt;/code&gt; is not random access it will be lazily buffered to an array of size &lt;code&gt;bufSize&lt;/code&gt; before the map function is evaluated. (For an exception to this rule, see Notes.)</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力レンジ&lt;/a&gt;マッピングします。 &lt;code&gt;source&lt;/code&gt; がランダムアクセスでない場合、マップ関数が評価される前に、サイズが &lt;code&gt;bufSize&lt;/code&gt; の配列に遅延バッファリングされます。（このルールの例外については、注を参照してください。）</target>
        </trans-unit>
        <trans-unit id="7fcb4bb2ee90251c35487c12566eec5095d57613" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to be split. Must support slicing and &lt;code&gt;.length&lt;/code&gt; or be a narrow string type.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲は&lt;/a&gt;分割されます。スライスと &lt;code&gt;.length&lt;/code&gt; をサポートするか、狭い文字列型である必要があります。</target>
        </trans-unit>
        <trans-unit id="952eb645f806f4e8722eb0d2cd942129dfd0ddf5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to count.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲は&lt;/a&gt;カウントします。</target>
        </trans-unit>
        <trans-unit id="2c3f0a3ca624d2dffa57f0bed2a0b2870eb60a2e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to decode.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;復号します。</target>
        </trans-unit>
        <trans-unit id="4e73a5f21eb9f220fe4a413efefe2e08d57d2486" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to encode.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力レンジ&lt;/a&gt;符号化します。</target>
        </trans-unit>
        <trans-unit id="8d96bd41d136cd6247adb3fa26dee3b86c4089e3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to iterate over.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;にわたり反復します。</target>
        </trans-unit>
        <trans-unit id="dbb5a95b7ba0669a172e47e1723f9cfc7c2ea498" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to search.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;検索に。</target>
        </trans-unit>
        <trans-unit id="8c359e89eaa705ac18cac67cf8b6402278719d14" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input ranges&lt;/a&gt; representing the prefix of &lt;code&gt;r1&lt;/code&gt; to skip over.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;の接頭辞表す &lt;code&gt;r1&lt;/code&gt; はスキップします。</target>
        </trans-unit>
        <trans-unit id="c37be58cc17319441d46aeb5f1996c8581894cf3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;output range&lt;/a&gt; to store the decoded result.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;出力範囲&lt;/a&gt;復号結果を格納します。</target>
        </trans-unit>
        <trans-unit id="c13c7cb92037b15fc161b95f9af9172d148b4a5e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;output range&lt;/a&gt; to store the encoded result.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;出力範囲は、&lt;/a&gt;符号化された結果を格納します。</target>
        </trans-unit>
        <trans-unit id="77c0f3bce9137a040efd3771cfb0616a86cd7cd5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;output range&lt;/a&gt; to write to.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;出力範囲&lt;/a&gt;への書き込みに。</target>
        </trans-unit>
        <trans-unit id="49142d8fd68c9b3c53741f925ebe20a7b56a8f58" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;%d&lt;/b&gt; format is used.</source>
          <target state="translated">&lt;b&gt;％d個の&lt;/b&gt;形式が使用されています。</target>
        </trans-unit>
        <trans-unit id="51044429589e6e99a3db526e744ad9e76e4f0d6d" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;%g&lt;/b&gt; format is used.</source>
          <target state="translated">&lt;b&gt;％のGの&lt;/b&gt;フォーマットが使用されます。</target>
        </trans-unit>
        <trans-unit id="6011bed86258fb25beea867d98c6c8f61613da53" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;M&lt;/b&gt; means that the symbol is a function that requires a &lt;code&gt;this&lt;/code&gt; pointer. Class or struct fields are mangled without &lt;b&gt;M&lt;/b&gt;. To disambiguate &lt;b&gt;M&lt;/b&gt; from being a &lt;a href=&quot;#Parameter&quot;&gt;&lt;i&gt;Parameter&lt;/i&gt;&lt;/a&gt; with modifier &lt;code&gt;scope&lt;/code&gt;, the following type needs to be checked for being a &lt;a href=&quot;#TypeFunction&quot;&gt;&lt;i&gt;TypeFunction&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;Mは&lt;/b&gt;シンボルが必要とする関数であることを意味し &lt;code&gt;this&lt;/code&gt; ポインタを。クラスまたは構造体フィールドは&lt;b&gt;M&lt;/b&gt;なしでマングルされます。&lt;b&gt;M&lt;/b&gt;が修飾子 &lt;code&gt;scope&lt;/code&gt; 持つ&lt;a href=&quot;#Parameter&quot;&gt;&lt;i&gt;パラメーター&lt;/i&gt;&lt;/a&gt;であることを明確にするために、次の型が&lt;a href=&quot;#TypeFunction&quot;&gt;&lt;i&gt;TypeFunction&lt;/i&gt;&lt;/a&gt;であることを確認する必要があります。&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="8b62ad940fbeb2c5789e6f8cc722fdbfa7da5ba7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!in&lt;/code&gt; expression is the logical negation of the &lt;code&gt;in&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;!in&lt;/code&gt; 式は、の論理否定である &lt;code&gt;in&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="949f738dd41deb163c516ad01a068ab33816218e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.funcptr&lt;/code&gt; property of a delegate will return the</source>
          <target state="translated">&lt;code&gt;.funcptr&lt;/code&gt; デリゲートのプロパティが返されます</target>
        </trans-unit>
        <trans-unit id="a927ff60b0c832aca1d0deb1c1d68c1daa79dc5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.idup&lt;/code&gt; property is a convenient way to create an immutable copy of an array:</source>
          <target state="translated">&lt;code&gt;.idup&lt;/code&gt; プロパティは配列の不変のコピーを作成するための便利な方法です。</target>
        </trans-unit>
        <trans-unit id="cd8b8d3fc90c04cca56a82b84eb7386d0bdfe47f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.init&lt;/code&gt; property of an enum type is the value of the first member of that enum. This is also the default initializer for the enum type.</source>
          <target state="translated">列挙型の &lt;code&gt;.init&lt;/code&gt; プロパティは、その列挙の最初のメンバーの値です。これは、列挙型のデフォルトの初期化子でもあります。</target>
        </trans-unit>
        <trans-unit id="3859b962f71ebd6e5c9c1b0719a79ab297661c17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.length&lt;/code&gt; property of a dynamic array can be set as the left-hand side of an = operator:</source>
          <target state="translated">動的配列の &lt;code&gt;.length&lt;/code&gt; プロパティは、=演算子の左側として設定できます。</target>
        </trans-unit>
        <trans-unit id="6aa34068a5d22ab8aa9bd9b191c719d0f01d956d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.length&lt;/code&gt;, &lt;code&gt;.size&lt;/code&gt;, &lt;code&gt;.sizeof&lt;/code&gt;, &lt;code&gt;.offsetof&lt;/code&gt; and &lt;code&gt;.alignof&lt;/code&gt; properties will be of type &lt;code&gt;size_t&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.length&lt;/code&gt; 、 &lt;code&gt;.size&lt;/code&gt; 、 &lt;code&gt;.sizeof&lt;/code&gt; 、 &lt;code&gt;.offsetof&lt;/code&gt; と &lt;code&gt;.alignof&lt;/code&gt; 特性は型であろう &lt;code&gt;size_t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4fdbd1b27908707173a1edaf4525112b28d20cd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.offsetof&lt;/code&gt; property gives the offset in bytes of the field from the beginning of the class instantiation. &lt;code&gt;.offsetof&lt;/code&gt; is not available for fields of &lt;code&gt;extern(Objective-C)&lt;/code&gt; classes due to their fields having a dynamic offset. &lt;code&gt;.offsetof&lt;/code&gt; can only be applied to expressions which produce the type of the field itself, not the class type:</source>
          <target state="translated">&lt;code&gt;.offsetof&lt;/code&gt; プロパティは、クラスのインスタンス化の初めからフィールドのバイト単位のオフセットを与えます。 &lt;code&gt;.offsetof&lt;/code&gt; は、フィールドに動的オフセットがあるため、 &lt;code&gt;extern(Objective-C)&lt;/code&gt; クラスのフィールドでは使用できません。 &lt;code&gt;.offsetof&lt;/code&gt; は、クラスタイプではなく、フィールド自体のタイプを生成する式にのみ適用できます。</target>
        </trans-unit>
        <trans-unit id="95c8eacd4f051efc8e34b0ec28e0fb9f11aa27b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.ptr&lt;/code&gt; property of a delegate will return the</source>
          <target state="translated">&lt;code&gt;.ptr&lt;/code&gt; デリゲートのプロパティが返されます</target>
        </trans-unit>
        <trans-unit id="1724903b9c0188aab384fe5f52257faa0acb7527" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.tupleof&lt;/code&gt; property is an &lt;a href=&quot;template#variadic-templates&quot;&gt;expression sequence&lt;/a&gt; of all the fields in the class, excluding the hidden fields and the fields in the base class. &lt;code&gt;.tupleof&lt;/code&gt; is not available for &lt;code&gt;extern(Objective-C)&lt;/code&gt; classes due to their fields having a dynamic offset.</source>
          <target state="translated">&lt;code&gt;.tupleof&lt;/code&gt; プロパティがある&lt;a href=&quot;template#variadic-templates&quot;&gt;発現配列&lt;/a&gt;非表示フィールドと、基本クラスのフィールドを除く、クラス内のすべてのフィールドの。 &lt;code&gt;.tupleof&lt;/code&gt; は、フィールドに動的オフセットがあるため、 &lt;code&gt;extern(Objective-C)&lt;/code&gt; クラスでは使用できません。</target>
        </trans-unit>
        <trans-unit id="c137d6dcdc8a762b857eac8c07b0096c836f30d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@nogc&lt;/code&gt; and &lt;code&gt;nothrow&lt;/code&gt; attributes cannot be inferred for the &lt;code&gt;Zip&lt;/code&gt; struct because &lt;a href=&quot;#StoppingPolicy&quot;&gt;&lt;code&gt;StoppingPolicy&lt;/code&gt;&lt;/a&gt; can vary at runtime. This limitation is not shared by the anonymous range returned by the &lt;code&gt;zip&lt;/code&gt; function when not given an explicit &lt;code&gt;StoppingPolicy&lt;/code&gt; as an argument.</source>
          <target state="translated">&lt;a href=&quot;#StoppingPolicy&quot;&gt; &lt;code&gt;StoppingPolicy&lt;/code&gt; &lt;/a&gt;は実行時に変化する可能性があるため、 &lt;code&gt;Zip&lt;/code&gt; 構造体の &lt;code&gt;@nogc&lt;/code&gt; および &lt;code&gt;nothrow&lt;/code&gt; 属性は推測できません。この制限は、引数として明示的な &lt;code&gt;StoppingPolicy&lt;/code&gt; が指定されていない場合、 &lt;code&gt;zip&lt;/code&gt; 関数によって返される匿名の範囲とは共有されません。</target>
        </trans-unit>
        <trans-unit id="6e96abc33603d8bc05abf167e42cc4e98db8045c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@selector&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;@selector&lt;/code&gt; の属性</target>
        </trans-unit>
        <trans-unit id="f6c9ba4e329884202e2c96c75ddebb8190fe3bde" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@selector&lt;/code&gt; attribute is a compiler recognized &lt;a href=&quot;attribute#uda&quot;&gt;UDA&lt;/a&gt;. It is used to tell the compiler which selector to use when calling an Objective-C method.</source>
          <target state="translated">&lt;code&gt;@selector&lt;/code&gt; の属性が認識コンパイラです&lt;a href=&quot;attribute#uda&quot;&gt;UDA&lt;/a&gt;。これは、Objective-Cメソッドを呼び出すときに使用するセレクターをコンパイラーに指示するために使用されます。</target>
        </trans-unit>
        <trans-unit id="752216458653e1cbb6c9e963c946448d7d235321" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AliasThis&lt;/code&gt; object to check</source>
          <target state="translated">&lt;code&gt;AliasThis&lt;/code&gt; チェックするオブジェクト</target>
        </trans-unit>
        <trans-unit id="fa92561e469bdb1ad4026066da03e96fe41ac12f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BigInt&lt;/code&gt; to convert to a decimal &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BigInt&lt;/code&gt; は小数に変換する &lt;code&gt;string&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="762bae96b280038efb5744e1f69ff2a9b9fe8924" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BigInt&lt;/code&gt; to convert to a hexadecimal &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BigInt&lt;/code&gt; は進に変換する &lt;code&gt;string&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09048bfa6c458cec6891287f0bfdf5fb775fc807" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Contents&lt;/code&gt; of the input can be provided if all the records are the same type such as all integer data:</source>
          <target state="translated">入力の &lt;code&gt;Contents&lt;/code&gt; は、すべてのレコードがすべての整数データなどの同じタイプである場合に提供できます。</target>
        </trans-unit>
        <trans-unit id="c5b29392956ba29c0adb988c34e23412ed24102e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;D_ObjectiveC&lt;/code&gt; Version Identifier</source>
          <target state="translated">&lt;code&gt;D_ObjectiveC&lt;/code&gt; バージョン識別子</target>
        </trans-unit>
        <trans-unit id="3bdc294730714ec15d2e01301a3e08098956d705" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;D_ObjectiveC&lt;/code&gt; version identifier is a predefined version identifier. It is enabled if Objective-C support is available for the target.</source>
          <target state="translated">&lt;code&gt;D_ObjectiveC&lt;/code&gt; のバージョン識別子は、事前定義されたバージョン識別子です。ターゲットでObjective-Cサポートが利用可能な場合に有効になります。</target>
        </trans-unit>
        <trans-unit id="9652b1793eda4a74a34bea7d01c1ae4dc455d00a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Direction&lt;/code&gt; that this range iterates in.</source>
          <target state="translated">&lt;code&gt;Direction&lt;/code&gt; 、この範囲がで繰り返し処理していること。</target>
        </trans-unit>
        <trans-unit id="f23dc3e300f8de1a7b5dc2f858ee4c1f0c10fa66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FILETIME&lt;/code&gt; struct to convert.</source>
          <target state="translated">&lt;code&gt;FILETIME&lt;/code&gt; の構造体を変換します。</target>
        </trans-unit>
        <trans-unit id="f223850e7d1f3a227dbc68e1f6ccb4db9d2a70e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;File&lt;/code&gt; log messages are written to.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; ログメッセージが書かれています。</target>
        </trans-unit>
        <trans-unit id="9505f486ff94c8cc96955cd21faa5ea522c0488b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;File&lt;/code&gt; passed must be open for all the log call to the &lt;code&gt;FileLogger&lt;/code&gt;. If the &lt;code&gt;File&lt;/code&gt; gets closed, using the &lt;code&gt;FileLogger&lt;/code&gt; for logging will result in undefined behaviour.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 渡されたにすべてのログ呼び出しのために開いている必要があり &lt;code&gt;FileLogger&lt;/code&gt; 。 &lt;code&gt;File&lt;/code&gt; が閉じた場合、ロギングに &lt;code&gt;FileLogger&lt;/code&gt; を使用すると、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="1adc74023b21a71faedb9fb2198865c8c868c0b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FreeTree&lt;/code&gt; is word aligned.</source>
          <target state="translated">&lt;code&gt;FreeTree&lt;/code&gt; はワード境界です。</target>
        </trans-unit>
        <trans-unit id="5a599fec73312b1e2c7a29eeb97f84d65ba31e02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IntervalRange&lt;/code&gt; to assign to this one.</source>
          <target state="translated">これに割り当てる &lt;code&gt;IntervalRange&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bae87f67fc76bb340f7ddbd109d8144f57f7a78f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LogLevel&lt;/code&gt; determines if the log call are processed or dropped by the &lt;code&gt;Logger&lt;/code&gt;. In order for the log call to be processed the &lt;code&gt;LogLevel&lt;/code&gt; of the log call must be greater or equal to the &lt;code&gt;LogLevel&lt;/code&gt; of the &lt;code&gt;logger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LogLevel&lt;/code&gt; 、ログの呼び出しが処理されるかによってドロップされたかどうかを判断 &lt;code&gt;Logger&lt;/code&gt; 。処理されるログ呼び出しのために、 &lt;code&gt;LogLevel&lt;/code&gt; ログコールを大きくなければならないか等しい &lt;code&gt;LogLevel&lt;/code&gt; の &lt;code&gt;logger&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="189baec1a3c41b98e162f7ebced93220628a714a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LogLevel&lt;/code&gt; for the &lt;code&gt;FileLogger&lt;/code&gt;. By default the</source>
          <target state="translated">&lt;code&gt;LogLevel&lt;/code&gt; について &lt;code&gt;FileLogger&lt;/code&gt; 。デフォルトでは</target>
        </trans-unit>
        <trans-unit id="d018b0b265c186bb486a9c743eef113b007d5db9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LogLevel&lt;/code&gt; for the &lt;code&gt;FileLogger&lt;/code&gt;. By default the &lt;code&gt;LogLevel&lt;/code&gt; for &lt;code&gt;FileLogger&lt;/code&gt; is &lt;code&gt;LogLevel.all&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LogLevel&lt;/code&gt; について &lt;code&gt;FileLogger&lt;/code&gt; 。デフォルトでは、 &lt;code&gt;LogLevel&lt;/code&gt; のため &lt;code&gt;FileLogger&lt;/code&gt; がある &lt;code&gt;LogLevel.all&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae9ecb75d6ace04d1eacabcc1bcd9b6183ff7cad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LogLevel&lt;/code&gt; for the &lt;code&gt;MultiLogger&lt;/code&gt;. By default the &lt;code&gt; LogLevel&lt;/code&gt; is &lt;code&gt;all&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LogLevel&lt;/code&gt; について &lt;code&gt;MultiLogger&lt;/code&gt; 。デフォルトでは、 &lt;code&gt; LogLevel&lt;/code&gt; は &lt;code&gt;all&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="641b844c924242bfa7b7f12639ba8204d0cf1b18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LogLevel&lt;/code&gt; for the &lt;code&gt;MultiLogger&lt;/code&gt;. By default the &lt;code&gt;LogLevel&lt;/code&gt; for &lt;code&gt;MultiLogger&lt;/code&gt; is &lt;code&gt;LogLevel.all&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LogLevel&lt;/code&gt; について &lt;code&gt;MultiLogger&lt;/code&gt; 。デフォルトでは、 &lt;code&gt;LogLevel&lt;/code&gt; のため &lt;code&gt;MultiLogger&lt;/code&gt; がある &lt;code&gt;LogLevel.all&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3603b7e77aae4ad9627a9afeed3ce61445cb60ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LogLevel&lt;/code&gt; for the &lt;code&gt;NullLogger&lt;/code&gt;. By default the &lt;code&gt;LogLevel&lt;/code&gt; for &lt;code&gt;NullLogger&lt;/code&gt; is &lt;code&gt;LogLevel.all&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LogLevel&lt;/code&gt; について &lt;code&gt;NullLogger&lt;/code&gt; 。デフォルトでは、 &lt;code&gt;LogLevel&lt;/code&gt; のため &lt;code&gt;NullLogger&lt;/code&gt; がある &lt;code&gt;LogLevel.all&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2af39a6062628b2e279264f9a73f14181c2c5ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LogLevel&lt;/code&gt; of a log call can be defined in two ways. The first is by calling &lt;code&gt;log&lt;/code&gt; and passing the &lt;code&gt;LogLevel&lt;/code&gt; explicitly as the first argument. The second way of setting the &lt;code&gt;LogLevel&lt;/code&gt; of a log call, is by calling either &lt;code&gt;trace&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;critical&lt;/code&gt;, or &lt;code&gt;fatal&lt;/code&gt;. The log call will then have the respective &lt;code&gt;LogLevel&lt;/code&gt;. If no &lt;code&gt;LogLevel&lt;/code&gt; is defined the log call will use the current &lt;code&gt;LogLevel&lt;/code&gt; of the used &lt;code&gt;Logger&lt;/code&gt;. If data is logged with &lt;code&gt;LogLevel&lt;/code&gt;&lt;code&gt;fatal&lt;/code&gt; by default an &lt;code&gt;Error&lt;/code&gt; will be thrown. This behaviour can be modified by using the member &lt;code&gt;fatalHandler&lt;/code&gt; to assign a custom delegate to handle log call with &lt;code&gt;LogLevel&lt;/code&gt;&lt;code&gt;fatal&lt;/code&gt;.</source>
          <target state="translated">ログ呼び出しの &lt;code&gt;LogLevel&lt;/code&gt; は、2つの方法で定義できます。 1つ目は、 &lt;code&gt;log&lt;/code&gt; を呼び出し、最初の引数として &lt;code&gt;LogLevel&lt;/code&gt; を明示的に渡すことです。ログコールの &lt;code&gt;LogLevel&lt;/code&gt; を設定する2番目の方法は、 &lt;code&gt;trace&lt;/code&gt; 、 &lt;code&gt;info&lt;/code&gt; 、 &lt;code&gt;warning&lt;/code&gt; 、 &lt;code&gt;critical&lt;/code&gt; 、または &lt;code&gt;fatal&lt;/code&gt; のいずれかを呼び出すことです。ログ呼び出しには、それぞれの &lt;code&gt;LogLevel&lt;/code&gt; が含まれます。 &lt;code&gt;LogLevel&lt;/code&gt; が定義されていない場合、ログの呼び出しでは、使用されている &lt;code&gt;Logger&lt;/code&gt; の現在の &lt;code&gt;LogLevel&lt;/code&gt; が使用されます。データがデフォルトで &lt;code&gt;LogLevel&lt;/code&gt; &lt;code&gt;fatal&lt;/code&gt; でログに記録されている場合、 &lt;code&gt;Error&lt;/code&gt; 投げられます。この動作を変更するには、メンバー &lt;code&gt;fatalHandler&lt;/code&gt; を使用して、 &lt;code&gt;LogLevel&lt;/code&gt; &lt;code&gt;fatal&lt;/code&gt; でのログ呼び出しを処理するカスタムデリゲートを割り当てます。</target>
        </trans-unit>
        <trans-unit id="0a0d434e25b47fdaafcef338f132ea275bc847f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LogLevel&lt;/code&gt; used by this log call.</source>
          <target state="translated">&lt;code&gt;LogLevel&lt;/code&gt; このログの呼び出しで使用されます。</target>
        </trans-unit>
        <trans-unit id="8892f147c371745dae355ae476344696ac6a8bd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Logger&lt;/code&gt; to insert.</source>
          <target state="translated">&lt;code&gt;Logger&lt;/code&gt; 挿入します。</target>
        </trans-unit>
        <trans-unit id="80178593879baa963d3ea8ccb8419d3049b3fd6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NegInfInterval&lt;/code&gt; to assign to this one.</source>
          <target state="translated">これに割り当てる &lt;code&gt;NegInfInterval&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="45d1956c384b5b3fb5b0e73f346cf797ea06f1fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NegInfIntervalRange&lt;/code&gt; to assign to this one.</source>
          <target state="translated">これに割り当てる &lt;code&gt;NegInfIntervalRange&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="80594f56560776213c82536e7c5835856110de27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NullLogger&lt;/code&gt; will not process any log messages.</source>
          <target state="translated">&lt;code&gt;NullLogger&lt;/code&gt; は、任意のログメッセージを処理しません。</target>
        </trans-unit>
        <trans-unit id="a481e02ed96f28efe58cf2e89023a7611a07a100" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Option&lt;/code&gt; extracted from the &lt;code&gt;getopt&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;Option&lt;/code&gt; から抽出された &lt;code&gt;getopt&lt;/code&gt; のパラメータ。</target>
        </trans-unit>
        <trans-unit id="af853ab18e8359e92cea25ba5f1faea6ad6630ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ParentAllocator&lt;/code&gt; type parameter is the type of the allocator used to allocate the memory chunk underlying the &lt;code&gt;KRRegion&lt;/code&gt; object. Choosing the default (&lt;code&gt;NullAllocator&lt;/code&gt;) means the user is responsible for passing a buffer at construction (and for deallocating it if necessary). Otherwise, &lt;code&gt;KRRegion&lt;/code&gt; automatically deallocates the buffer during destruction. For that reason, if &lt;code&gt;ParentAllocator&lt;/code&gt; is not &lt;code&gt;NullAllocator&lt;/code&gt;, then &lt;code&gt;KRRegion&lt;/code&gt; is not copyable.</source>
          <target state="translated">&lt;code&gt;ParentAllocator&lt;/code&gt; の型パラメータは、基礎となるメモリチャンク割り当てに使用されるアロケータの一種である &lt;code&gt;KRRegion&lt;/code&gt; のオブジェクト。デフォルト（ &lt;code&gt;NullAllocator&lt;/code&gt; ）を選択すると、ユーザーは構築時にバッファーを渡す（そして必要に応じて割り当てを解除する）責任があります。それ以外の場合、 &lt;code&gt;KRRegion&lt;/code&gt; は破棄時にバッファーを自動的に割り当て解除します。そのため、 &lt;code&gt;ParentAllocator&lt;/code&gt; がNullAllocatorでない &lt;code&gt;NullAllocator&lt;/code&gt; 、 &lt;code&gt;KRRegion&lt;/code&gt; はコピーできません。</target>
        </trans-unit>
        <trans-unit id="9458766e7479b6cf51af26d50b9dd02e20ae49ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PosInfInterval&lt;/code&gt; to assign to this one.</source>
          <target state="translated">これに割り当てる &lt;code&gt;PosInfInterval&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34136f36fcc4fdb9d0545b5f2dc626ce604274eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PosInfIntervalRange&lt;/code&gt; to assign to this one.</source>
          <target state="translated">これに割り当てる &lt;code&gt;PosInfIntervalRange&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f8c2b1b9fe06bcd45111f1a16dae6ec3e0c641b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SYSTEMTIME&lt;/code&gt; struct to convert.</source>
          <target state="translated">&lt;code&gt;SYSTEMTIME&lt;/code&gt; の構造体を変換します。</target>
        </trans-unit>
        <trans-unit id="55a36b01203d0bdffacc2ecd4ebaccb88912f8ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SYSTEMTIME&lt;/code&gt; which is returned will be set using the given &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s time zone, so to get the &lt;code&gt;SYSTEMTIME&lt;/code&gt; in UTC, set the &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s time zone to UTC.</source>
          <target state="translated">&lt;code&gt;SYSTEMTIME&lt;/code&gt; 返された特定の使用して設定されます&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;「そう取得するには、sの時間帯を &lt;code&gt;SYSTEMTIME&lt;/code&gt; を UTCに設定&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; UTCにsのタイムゾーンを」。</target>
        </trans-unit>
        <trans-unit id="17d66eac131ebc5a304d01033bb87ca88a11dafd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedBitmappedBlock&lt;/code&gt; cannot allocate more than the given block size. Allocations are satisfied by searching the first unset bit in the bitmap, and atomically setting it. In rare memory pressure scenarios, the allocation could fail.</source>
          <target state="translated">&lt;code&gt;SharedBitmappedBlock&lt;/code&gt; は、与えられたブロックサイズよりも多く割り当てることはできません。割り当ては、ビットマップの最初の未設定ビットを検索し、それをアトミックに設定することで満たされます。まれなメモリ不足のシナリオでは、割り当てが失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7f50e878b8609c1691f2dd746d7c582ae1ecc004" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Source&lt;/code&gt; range must be at least a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;ForwardRange&lt;/a&gt; and the &lt;code&gt;windowSize&lt;/code&gt; must be greater than zero.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; 範囲は、少なくともなければならない&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;ForwardRange&lt;/a&gt;と &lt;code&gt;windowSize&lt;/code&gt; がゼロより大きくなければなりません。</target>
        </trans-unit>
        <trans-unit id="c577f5db0ed86295cccdd2e366fd7fb31e9735fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StdForwardLogger&lt;/code&gt; will always forward anything to the sharedLog.</source>
          <target state="translated">&lt;code&gt;StdForwardLogger&lt;/code&gt; sharedLogに常に前方に何もなります。</target>
        </trans-unit>
        <trans-unit id="38094d128287502d265daa3f32ff92398be4f485" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StdForwardLogger&lt;/code&gt; will not throw if data is logged with &lt;code&gt;LogLevel.fatal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;StdForwardLogger&lt;/code&gt; は、データが記録された場合にスローされません &lt;code&gt;LogLevel.fatal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28d0dc72c49b2f56027f834e227217c1c2c52a44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Throwable&lt;/code&gt; to test for.</source>
          <target state="translated">&lt;code&gt;Throwable&lt;/code&gt; のためのテストへ。</target>
        </trans-unit>
        <trans-unit id="aa29abc0b02ca4a75f09d69735038e1ca2f9e6e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TickDuration&lt;/code&gt; to add to or subtract from this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;TickDuration&lt;/code&gt; に追加または削除する &lt;code&gt;TickDuration&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="591dfa55a54985010905ae5e062c1737f6d7dd60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TickDuration&lt;/code&gt; to add to this &lt;code&gt;Duration&lt;/code&gt; or to subtract this &lt;code&gt;Duration&lt;/code&gt; from.</source>
          <target state="translated">&lt;code&gt;TickDuration&lt;/code&gt; これに追加する &lt;code&gt;Duration&lt;/code&gt; や、この減算する &lt;code&gt;Duration&lt;/code&gt; から。</target>
        </trans-unit>
        <trans-unit id="b9bc2f1c8ad28754bf0913173be3fcf66000ab29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tuple&lt;/code&gt; to compare against. It must meet the criteria for comparison between &lt;code&gt;Tuple&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;Tuple&lt;/code&gt; と比較します。 &lt;code&gt;Tuple&lt;/code&gt; 間の比較基準を満たしている必要があります。</target>
        </trans-unit>
        <trans-unit id="ae3d87816f53e10c3340c3a534bb4bebe8efe634" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tuple&lt;/code&gt; to compare against. It must meeting the criteria for comparison between &lt;code&gt;Tuple&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;Tuple&lt;/code&gt; と比較します。 &lt;code&gt;Tuple&lt;/code&gt; 間の比較基準を満たしている必要があります。</target>
        </trans-unit>
        <trans-unit id="71d8abf8af5ee26843c72e0eca8e058ef93a5a47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tuple&lt;/code&gt; to concatenate with</source>
          <target state="translated">&lt;code&gt;Tuple&lt;/code&gt; 連結すると</target>
        </trans-unit>
        <trans-unit id="db6b88026ed5f84aaeb159851306acbc0805b6fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tuple&lt;/code&gt; to copy.</source>
          <target state="translated">&lt;code&gt;Tuple&lt;/code&gt; コピーへ。</target>
        </trans-unit>
        <trans-unit id="cdd1176cdf3efa8b361fda3a58ad58a8bc166a3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\0&lt;/code&gt; terminated string which is the combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; and a valid path.</source>
          <target state="translated">&lt;code&gt;\0&lt;/code&gt; の組み合わせで終了する文字列 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; と有効なパス。</target>
        </trans-unit>
        <trans-unit id="6a8b6a5ff2de1aee07ec0a045bd35434cd690030" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__ctfe&lt;/code&gt; boolean pseudo-variable, which evaluates to true in CTFE, but false otherwise, can be used to provide an alternative execution path to avoid operations which are forbidden in CTFE. Every usage of &lt;code&gt;__ctfe&lt;/code&gt; is evaluated before code generation and therefore has no run-time cost, even if no optimizer is used.</source>
          <target state="translated">&lt;code&gt;__ctfe&lt;/code&gt; CTFEで真、そうでなければ偽と評価ブール擬似変数は、CTFEに禁止されている回避操作に代替実行パスを提供するために使用することができます。 &lt;code&gt;__ctfe&lt;/code&gt; の使用はすべてコード生成前に評価されるため、オプティマイザを使用していなくても、実行時のコストはかかりません。</target>
        </trans-unit>
        <trans-unit id="56395a2d3e5a7a87d6c397c8da676b69152f6f63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;args&lt;/code&gt;/&lt;code&gt;program&lt;/code&gt;/&lt;code&gt;command&lt;/code&gt;, &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; parameters are forwarded straight to the underlying spawn functions, and we refer to their documentation for details.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; / &lt;code&gt;program&lt;/code&gt; / &lt;code&gt;command&lt;/code&gt; 、 &lt;code&gt;env&lt;/code&gt; や &lt;code&gt;config&lt;/code&gt; パラメータは、基礎となるスポーン機能に直接転送され、そして私たちは、詳細については、そのマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="7314f1cfec56db10eb004f9f77fe84c2b7324dc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auto&lt;/code&gt; attribute is used when there are no other attributes and type inference is desired.</source>
          <target state="translated">&lt;code&gt;auto&lt;/code&gt; 他の属性が存在しない場合、属性を使用し、型推論が望まれています。</target>
        </trans-unit>
        <trans-unit id="ea97c5895efda9e921b7a4dc07c8ee96fea88239" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoInit&lt;/code&gt; option makes the object ensure the store is automatically initialized. Leaving &lt;code&gt;autoInit == RefCountedAutoInitialize.yes&lt;/code&gt; (the default option) is convenient but has the cost of a test whenever the payload is accessed. If &lt;code&gt;autoInit == RefCountedAutoInitialize.no&lt;/code&gt;, user code must call either &lt;code&gt;refCountedStore.isInitialized&lt;/code&gt; or &lt;code&gt;refCountedStore.ensureInitialized&lt;/code&gt; before attempting to access the payload. Not doing so results in null pointer dereference.</source>
          <target state="translated">&lt;code&gt;autoInit&lt;/code&gt; オプションは、オブジェクトがストアが自動的に初期化されていることを確認します。 &lt;code&gt;autoInit == RefCountedAutoInitialize.yes&lt;/code&gt; （デフォルトオプション）のままにしておくと便利ですが、ペイロードにアクセスするたびにテストのコストがかかります。 &lt;code&gt;autoInit == RefCountedAutoInitialize.no&lt;/code&gt; 場合、ユーザーコードは、ペイロードにアクセスする前に &lt;code&gt;refCountedStore.isInitialized&lt;/code&gt; または &lt;code&gt;refCountedStore.ensureInitialized&lt;/code&gt; を呼び出す必要があります。そうしないと、nullポインター逆参照が発生します。</target>
        </trans-unit>
        <trans-unit id="69bb3e95d96c480cf1bef8a9a3edaddbb9f73b6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bringToFront&lt;/code&gt; function can rotate elements in one buffer left or right, swap buffers of equal length, and even move elements across disjoint buffers of different types and different lengths.</source>
          <target state="translated">&lt;code&gt;bringToFront&lt;/code&gt; 関数は、1つのバッファ内の要素を回転させることができる左または右、等しい長さのスワップバッファを、さらに異なるタイプおよび異なる長さの互いに素なバッファ横切る要素を移動させます。</target>
        </trans-unit>
        <trans-unit id="cd8ac112f697888bd40d877ce34ac401e4af6717" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bringToFront&lt;/code&gt; function treats strings at the code unit level and it is not concerned with Unicode character integrity. &lt;code&gt;bringToFront&lt;/code&gt; is designed as a function for moving elements in ranges, not as a string function.</source>
          <target state="translated">&lt;code&gt;bringToFront&lt;/code&gt; のコード単位レベルでの機能の扱い文字列と、それをUnicode文字の整合性に関係していません。 &lt;code&gt;bringToFront&lt;/code&gt; は、文字列関数としてではなく、範囲内で要素を移動するための関数として設計されています。</target>
        </trans-unit>
        <trans-unit id="b8d8753eda77a47c9e419e9821af6545c1329322" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char[]&lt;/code&gt; buffer to store the encoded result.</source>
          <target state="translated">&lt;code&gt;char[]&lt;/code&gt; 符号化結果を格納するバッファ。</target>
        </trans-unit>
        <trans-unit id="33f594b9c5df8cb09804ec69586a77bc07cf37cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;choices&lt;/code&gt; needs to be composed of function or delegate handlers that accept one argument. There can also be a choice that accepts zero arguments. That choice will be invoked if the &lt;code&gt; switchObject&lt;/code&gt; is null.</source>
          <target state="translated">&lt;code&gt;choices&lt;/code&gt; 一つの引数を受け入れる関数やデリゲートのハンドラで構成する必要があります。ゼロ引数を受け入れる選択も可能です。この選択は、 &lt;code&gt; switchObject&lt;/code&gt; がnullの場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a7c187f05ee2ebdce065cbd4f9fb2247ea951270" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; to search.</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; または &lt;code&gt;interface&lt;/code&gt; を検索します。</target>
        </trans-unit>
        <trans-unit id="861b0eb3583fe72750b180c107e9a74e26b3d067" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;const&lt;/code&gt; attribute changes the type of the declared symbol from &lt;code&gt;T&lt;/code&gt; to &lt;code&gt;const(T)&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the type specified (or inferred) for the introduced symbol in the absence of &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 属性から宣言されたシンボルの種類変更 &lt;code&gt;T&lt;/code&gt; へ &lt;code&gt;const(T)&lt;/code&gt; 、 &lt;code&gt;T&lt;/code&gt; は、の非存在下で導入されたシンボルの種類が指定された（または推測される）を &lt;code&gt;const&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d7fc3d859d8514b14477602cc68bff5574b689c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deallocate&lt;/code&gt; method only works (and returns &lt;code&gt;true&lt;/code&gt;) on systems that support reducing the break address (i.e. accept calls to &lt;code&gt;sbrk&lt;/code&gt; with negative offsets). OSX does not accept such. In addition the argument must be the last block allocated.</source>
          <target state="translated">&lt;code&gt;deallocate&lt;/code&gt; 方法はのみ動作（戻り &lt;code&gt;true&lt;/code&gt; （すなわちするコールを受け入れる）のサポートは、ブレークアドレスを削減することをシステム上 &lt;code&gt;sbrk&lt;/code&gt; 負のオフセットで）。OSXはこれを受け付けません。さらに、引数は割り当てられた最後のブロックでなければなりません。</target>
        </trans-unit>
        <trans-unit id="3a71092d77b054a66bd8e1792beb78410bdbbbd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deallocateAll&lt;/code&gt; method only works (and returns &lt;code&gt;true&lt;/code&gt;) on systems that support reducing the break address (i.e. accept calls to &lt;code&gt;sbrk&lt;/code&gt; with negative offsets). OSX does not accept such.</source>
          <target state="translated">&lt;code&gt;deallocateAll&lt;/code&gt; の方法は、のみ動作（戻り &lt;code&gt;true&lt;/code&gt; サポートは、ブレークアドレスを削減することをシステム上）（すなわちの呼び出し受け入れる &lt;code&gt;sbrk&lt;/code&gt; 負のオフセットとを）。OSXはこれを受け付けません。</target>
        </trans-unit>
        <trans-unit id="48410e02dc31153d6c2f0d60374f83b8eb37aa64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debug (&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;debug (&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="315ad37794f53bbab85663b01e324e6f7bf74c8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debug&lt;/code&gt; condition is satisfied when the &lt;code&gt;-debug&lt;/code&gt; switch is passed to the compiler or when the debug level is &amp;gt;= 1.</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; 際に条件が満たされる &lt;code&gt;-debug&lt;/code&gt; のスイッチがコンパイラに渡さ又はデバッグレベルが&amp;gt; = 1れます。</target>
        </trans-unit>
        <trans-unit id="6bda4710254bb8ebb3470f77de80d7eaa7a4b247" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete&lt;/code&gt; keyword allowed to free GC-allocated memory. As this is inherently not &lt;code&gt;@safe&lt;/code&gt;, it has been deprecated. This function has been added to provide an easy transition from &lt;code&gt;delete&lt;/code&gt;. It performs the same functionality as the former &lt;code&gt;delete&lt;/code&gt; keyword.</source>
          <target state="translated">GCによって割り当てられたメモリを解放するための &lt;code&gt;delete&lt;/code&gt; キーワード。これは本質的に &lt;code&gt;@safe&lt;/code&gt; ではないため、廃止されました。この関数は、 &lt;code&gt;delete&lt;/code&gt; から簡単に移行できるように追加されました。以前の &lt;code&gt;delete&lt;/code&gt; キーワードと同じ機能を実行します。</target>
        </trans-unit>
        <trans-unit id="c34a0df7e835662fcb397ba5e97c59daf56aaba4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expand&lt;/code&gt; method may only succeed if the argument is the last block allocated. In that case, &lt;code&gt;expand&lt;/code&gt; attempts to push the break pointer to the right.</source>
          <target state="translated">引数が割り当てられた最後のブロックである場合にのみ、 &lt;code&gt;expand&lt;/code&gt; メソッドは成功します。その場合、 &lt;code&gt;expand&lt;/code&gt; はブレークポインタを右に押し出そうとします。</target>
        </trans-unit>
        <trans-unit id="cd7ee8c32dffef3320d0fa27b6f6cd2136b61369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extern (C)&lt;/code&gt; and &lt;code&gt;extern (D)&lt;/code&gt; calling convention matches the C calling convention used by the supported C compiler on the host system. Except that the extern (D) calling convention for Windows x86 is described here.</source>
          <target state="translated">&lt;code&gt;extern (C)&lt;/code&gt; と &lt;code&gt;extern (D)&lt;/code&gt; 呼び出し規約は、ホストシステム上でサポートされているCコンパイラが使用するC呼び出し規約と一致します。ここでは、Windows x86のextern（D）呼び出し規約について説明します。</target>
        </trans-unit>
        <trans-unit id="4519ff29f42d0f82fe2fe7d0d145b74eddd798f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;front&lt;/code&gt; range may actually &quot;step over&quot; the &lt;code&gt;back&lt;/code&gt; range. This is very useful with forward ranges that cannot compute comfortably right-bounded subranges like &lt;code&gt;arr[0 .. 4]&lt;/code&gt; above. In the example below, &lt;code&gt;r2&lt;/code&gt; is a right subrange of &lt;code&gt;r1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;front&lt;/code&gt; 範囲も、実際に「オーバーステップ」 &lt;code&gt;back&lt;/code&gt; 範囲。これは、上記の &lt;code&gt;arr[0 .. 4]&lt;/code&gt; ように右境界のサブ範囲を快適に計算できない前方範囲で非常に役立ちます。以下の例では、 &lt;code&gt;r2&lt;/code&gt; は &lt;code&gt;r1&lt;/code&gt; の正しい部分範囲です。</target>
        </trans-unit>
        <trans-unit id="a422bf2058400dcd9c56ae2c4fe51eb12fcec1c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getopt&lt;/code&gt; function takes a reference to the command line (as received by &lt;code&gt;main&lt;/code&gt;) as its first argument, and an unbounded number of pairs of strings and pointers. Each string is an option meant to &quot;fill&quot; the value referenced by the pointer to its right (the &quot;bound&quot; pointer). The option string in the call to &lt;code&gt;getopt&lt;/code&gt; should not start with a dash.  In all cases, the command-line options that were parsed and used by &lt;code&gt;getopt&lt;/code&gt; are removed from &lt;code&gt;args&lt;/code&gt;. Whatever in the arguments did not look like an option is left in &lt;code&gt;args&lt;/code&gt; for further processing by the program. Values that were unaffected by the options are not touched, so a common idiom is to initialize options to their defaults and then invoke &lt;code&gt;getopt&lt;/code&gt;. If a command-line argument is recognized as an option with a parameter and the parameter cannot be parsed properly (e.g., a number is expected but not present), a &lt;code&gt;ConvException&lt;/code&gt; exception is thrown. If &lt;code&gt;std.getopt.config.passThrough&lt;/code&gt; was not passed to &lt;code&gt;getopt&lt;/code&gt; and an unrecognized command-line argument is found, a &lt;code&gt;GetOptException&lt;/code&gt; is thrown.  Depending on the type of the pointer being bound, &lt;code&gt;getopt&lt;/code&gt; recognizes the following kinds of options:</source>
          <target state="translated">&lt;code&gt;getopt&lt;/code&gt; 関数は、（ASによって受信されたコマンドラインを参照かかる &lt;code&gt;main&lt;/code&gt; 最初の引数として）、および文字列とポインタのペアの無制限数。各文字列は、その右へのポインタ（「バインドされた」ポインタ）によって参照される値を「埋める」ことを意図したオプションです。 &lt;code&gt;getopt&lt;/code&gt; の呼び出しのオプション文字列は、ダッシュで始めてはなりません。すべての場合において、 &lt;code&gt;getopt&lt;/code&gt; によって解析および使用されたコマンドラインオプションは、 &lt;code&gt;args&lt;/code&gt; から削除されます。引数の中でオプションのように見えなかったものは &lt;code&gt;args&lt;/code&gt; 、プログラムによるその後の処理のためにargsに残されます。オプションの影響を受けなかった値は変更されないため、一般的なイディオムはオプションをデフォルトに初期化してから呼び出すことです &lt;code&gt;getopt&lt;/code&gt; 。コマンドライン引数がパラメーター付きのオプションとして認識され、パラメーターが適切に解析できない場合（たとえば、数値が予期されているが存在しない場合）、 &lt;code&gt;ConvException&lt;/code&gt; 例外がスローされます。場合 &lt;code&gt;std.getopt.config.passThrough&lt;/code&gt; がに渡されていなかった &lt;code&gt;getopt&lt;/code&gt; と認識されないコマンドライン引数が発見され、 &lt;code&gt;GetOptException&lt;/code&gt; がスローされます。バインドされているポインターのタイプに応じて、 &lt;code&gt;getopt&lt;/code&gt; は次の種類のオプションを認識します。</target>
        </trans-unit>
        <trans-unit id="7b73bb7244dae978ce076efe98de379e4d338f0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;immutable&lt;/code&gt; attribute modifies the type from &lt;code&gt;T&lt;/code&gt; to &lt;code&gt;immutable(T)&lt;/code&gt;, the same way as &lt;code&gt;const&lt;/code&gt; does.</source>
          <target state="translated">&lt;code&gt;immutable&lt;/code&gt; 属性からタイプを変更 &lt;code&gt;T&lt;/code&gt; に &lt;code&gt;immutable(T)&lt;/code&gt; と同様、 &lt;code&gt;const&lt;/code&gt; ありません。</target>
        </trans-unit>
        <trans-unit id="0664217c953262d37218988e224b35fd637e53a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; blocks or expressions of a function declaration specify the pre- and post-conditions of the function. They are used in &lt;a href=&quot;contracts&quot;&gt;Contract Programming&lt;/a&gt;. The code inside these blocks should not have any side-effects, including modifying function parameters and/or return values.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 及び &lt;code&gt;out&lt;/code&gt; のブロックまたは関数宣言の式は関数の前後の条件を指定します。それらは&lt;a href=&quot;contracts&quot;&gt;契約プログラミングで&lt;/a&gt;使用されます。これらのブロック内のコードには、関数のパラメーターや戻り値の変更などの副作用がありません。</target>
        </trans-unit>
        <trans-unit id="6872874b153fc0effbd03e646763ee703dd8bc2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; expression has the same precedence as the relational expressions &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;, etc. The return value of the</source>
          <target state="translated">の &lt;code&gt;in&lt;/code&gt; 発現は、関係式と同じ優先順位有する &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; 、などの戻り値</target>
        </trans-unit>
        <trans-unit id="b4eb3584bffc0aa6958eaab390a905eaa7fcc692" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inout&lt;/code&gt; attribute modifies the type from &lt;code&gt;T&lt;/code&gt; to &lt;code&gt;inout(T)&lt;/code&gt;, the same way as &lt;code&gt;const&lt;/code&gt; does.</source>
          <target state="translated">&lt;code&gt;inout&lt;/code&gt; 属性の修正からタイプ &lt;code&gt;T&lt;/code&gt; に &lt;code&gt;inout(T)&lt;/code&gt; 、同じよう &lt;code&gt;const&lt;/code&gt; ありません。</target>
        </trans-unit>
        <trans-unit id="968551598c2a43f06e8bf24ad9377e47b780c3d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inout&lt;/code&gt; qualifier may be applied to the copy constructor parameter in order to specify that mutable, &lt;code&gt;const&lt;/code&gt;, or &lt;code&gt;immutable&lt;/code&gt; types are treated the same:</source>
          <target state="translated">の &lt;code&gt;inout&lt;/code&gt; 修飾子はその可変、指定するために、コピーコンストラクタのパラメータに適用することができる &lt;code&gt;const&lt;/code&gt; として、または &lt;code&gt;immutable&lt;/code&gt; 種類が同じように扱われています。</target>
        </trans-unit>
        <trans-unit id="22a687fc90a97249a3ef72c2d4b1df43d3df5e8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instance&lt;/code&gt; singleton is defined if and only if the parent allocator has no state and defines its own &lt;code&gt;it&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;instance&lt;/code&gt; シングルトンが定義されている場合は、親アロケータがない状態を有していない、独自定義した場合にのみ &lt;code&gt;it&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="ec8dde286332c5aa08ae3177ee5fc7a106f040a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is&lt;/code&gt; compares for identity. To compare for nonidentity, use &lt;code&gt;e1 !is e2&lt;/code&gt;. The type of the result is &lt;code&gt;bool&lt;/code&gt;. The operands undergo the &lt;a href=&quot;type#usual-arithmetic-conversions&quot;&gt;Usual Arithmetic Conversions&lt;/a&gt; to bring them to a common type before comparison.</source>
          <target state="translated">&lt;code&gt;is&lt;/code&gt; アイデンティティのために比較されます。非同一性を比較するには、 &lt;code&gt;e1 !is e2&lt;/code&gt; 使用します。結果のタイプは &lt;code&gt;bool&lt;/code&gt; です。オペランドは&lt;a href=&quot;type#usual-arithmetic-conversions&quot;&gt;通常の算術変換&lt;/a&gt;を受けて、比較前に共通の型に変換されます。</target>
        </trans-unit>
        <trans-unit id="9ae177266bdeb39f87e4a184c6c378055487c7b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main()&lt;/code&gt; function to be written in D, to ensure that the required runtime library support is properly initialized.</source>
          <target state="translated">&lt;code&gt;main()&lt;/code&gt; 関数は、必要なランタイムライブラリのサポートが適切に初期化されることを保証するために、Dに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="891cbd158fc64142d63f3931abe9b04d4c81c222" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;minAlign&lt;/code&gt; parameter establishes alignment. If &lt;code&gt;minAlign &amp;gt; 1&lt;/code&gt;, the sizes of all allocation requests are rounded up to a multiple of &lt;code&gt;minAlign&lt;/code&gt;. Applications aiming at maximum speed may want to choose &lt;code&gt;minAlign = 1&lt;/code&gt; and control alignment externally.</source>
          <target state="translated">&lt;code&gt;minAlign&lt;/code&gt; パラメーター確立アラインメント。 &lt;code&gt;minAlign &amp;gt; 1&lt;/code&gt; 場合、すべての割り当てリクエストのサイズは、以下の倍数に切り上げられます &lt;code&gt;minAlign&lt;/code&gt; のます。最高速度を目標とするアプリケーションでは、 &lt;code&gt;minAlign = 1&lt;/code&gt; を選択し、外部から配置を制御する必要があります。</target>
        </trans-unit>
        <trans-unit id="ed92125a36b5eb56c36761322b3938f1b464f6a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;node&lt;/code&gt; parameter passed to &lt;code&gt;getAddressInfo&lt;/code&gt; must be a numeric string. This will suppress any potentially lengthy network host address lookups.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; に渡されたパラメータ &lt;code&gt;getAddressInfo&lt;/code&gt; は数値文字列でなければなりません。これにより、潜在的に時間がかかるネットワークホストアドレスの検索が抑制されます。</target>
        </trans-unit>
        <trans-unit id="23d6155dbf6f6df9508b72a12de4d979d7730735" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;octal&lt;/code&gt; facility provides a means to declare a number in base 8. Using &lt;code&gt;octal!177&lt;/code&gt; or &lt;code&gt;octal!&quot;177&quot;&lt;/code&gt; for 127 represented in octal (same as 0177 in C).</source>
          <target state="translated">&lt;code&gt;octal&lt;/code&gt; 施設は、使用ベース8の数を宣言するための手段を提供 &lt;code&gt;octal!177&lt;/code&gt; または &lt;code&gt;octal!&quot;177&quot;&lt;/code&gt; 8進数で表される127のために（Cで0177と同じ）。</target>
        </trans-unit>
        <trans-unit id="129480b440f262e2ead128e12ea6c5cdcf95c4b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;override&lt;/code&gt; attribute applies to virtual functions. It means that the function must override a function with the same name and parameters in a base class. The override attribute is useful for catching errors when a base class's member function gets its parameters changed, and all derived classes need to have their overriding functions updated.</source>
          <target state="translated">の &lt;code&gt;override&lt;/code&gt; 属性は、仮想関数に適用されます。つまり、関数は、基本クラスの同じ名前とパラメーターを持つ関数をオーバーライドする必要があります。オーバーライド属性は、基本クラスのメンバー関数がパラメーターを変更し、すべての派生クラスがオーバーライド関数を更新する必要がある場合にエラーをキャッチするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="4c39c9bb95cd597c07eafdff4f38811d99e1f3d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; keyword is actually a delegate to the super class' corresponding member function. [&lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=2540&quot;&gt;Bugzilla 2540&lt;/a&gt;]</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; キーワードは、実際には、スーパークラスの対応するメンバ関数へのデリゲートです。[&lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=2540&quot;&gt; Bugzilla 2540&lt;/a&gt;】</target>
        </trans-unit>
        <trans-unit id="5345bebedd7933fe7e2ab3bb75fb53c48ea8dd27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parse&lt;/code&gt; family of functions works quite like the &lt;code&gt;to&lt;/code&gt; family, except that:</source>
          <target state="translated">関数の &lt;code&gt;parse&lt;/code&gt; ファミリは、 &lt;code&gt;to&lt;/code&gt; ファミリーとが、次の点が異なります。</target>
        </trans-unit>
        <trans-unit id="53d890775a2e90ce1cd5bfe92ca5bcf1994e918a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;printf&lt;/code&gt; format string literal in the example doesn't end with &lt;code&gt;'\0'&lt;/code&gt;. This is because string literals, when they are not part of an initializer to a larger data structure, have a &lt;code&gt;'\0'&lt;/code&gt; character helpfully stored after the end of them.</source>
          <target state="translated">この例の &lt;code&gt;printf&lt;/code&gt; 形式の文字列リテラルは、 &lt;code&gt;'\0'&lt;/code&gt; 終わっていません。これは、文字列リテラルがより大きなデータ構造の初期化子の一部ではない場合、文字列リテラルの末尾の後に &lt;code&gt;'\0'&lt;/code&gt; 文字が格納されているためです。</target>
        </trans-unit>
        <trans-unit id="c2194ef1e4ad8716f788317053d9495fb71b6327" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;printf&lt;/code&gt;-style string.</source>
          <target state="translated">&lt;code&gt;printf&lt;/code&gt; の文字列スタイル。</target>
        </trans-unit>
        <trans-unit id="645634d091eae4e17c9ec0b97603c409a84aae33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pure&lt;/code&gt;, &lt;code&gt;@safe&lt;/code&gt;, &lt;code&gt;@nogc&lt;/code&gt;, or &lt;code&gt;nothrow&lt;/code&gt; attributes cannot be inferred for &lt;code&gt;lockstep&lt;/code&gt; iteration. &lt;a href=&quot;#zip&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt; can infer the first two due to a different implementation.</source>
          <target state="translated">&lt;code&gt;pure&lt;/code&gt; 、 &lt;code&gt;@safe&lt;/code&gt; 、 &lt;code&gt;@nogc&lt;/code&gt; 、または &lt;code&gt;nothrow&lt;/code&gt; の属性がために推論することができない &lt;code&gt;lockstep&lt;/code&gt; の繰り返し。実装が異なるため、&lt;a href=&quot;#zip&quot;&gt; &lt;code&gt;zip&lt;/code&gt; &lt;/a&gt;は最初の2つを推測できます。</target>
        </trans-unit>
        <trans-unit id="2882b6054016e631f0c09f82c6edaf8c162ba826" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;range&lt;/code&gt; must be a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt;. The separator can be a value of the same type as the elements in &lt;code&gt;range&lt;/code&gt; or it can be another forward &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; は&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前方&lt;/a&gt;の範囲でなければなりません。セパレータは、 &lt;code&gt;range&lt;/code&gt; の要素と同じタイプの値にすることも、別の前方にすることもできます &lt;code&gt;range&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="796a30adc82abcfecaf4ae7e5c2930fc3ed789ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;schwartzSort&lt;/code&gt; function might require less temporary data and be faster than the Perl idiom or the decorate-sort-undecorate idiom present in Python and Lisp. This is because sorting is done in-place and only minimal extra data (one array of transformed elements) is created.  To check whether an array was sorted and benefit of the speedup of Schwartz sorting, a function &lt;code&gt;schwartzIsSorted&lt;/code&gt; is not provided because the effect can be achieved by calling &lt;code&gt;isSorted!less(map!transform(r))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;schwartzSort&lt;/code&gt; の機能は以下の一時的なデータを必要とし、より高速なPerlのイディオムやPythonとLispで飾るソート-undecorateイディオムの存在よりもあるかもしれません。これは、並べ替えがその場で行われ、最小限の追加データ（変換された要素の1つの配列）のみが作成されるためです。配列がソートされたかどうか、およびシュワルツソートの高速化の利点を確認するために、 &lt;code&gt;isSorted!less(map!transform(r))&lt;/code&gt; を呼び出すことで効果が得られるため、関数 &lt;code&gt;schwartzIsSorted&lt;/code&gt; は提供されていません。です。</target>
        </trans-unit>
        <trans-unit id="2fddaad8a8ed56f77847f6655dad35e2662c33eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scope&lt;/code&gt; attribute is used for local variables and for class declarations. For class declarations, the &lt;code&gt;scope&lt;/code&gt; attribute creates a</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; 属性は、ローカル変数とクラスの宣言に使用されます。クラス宣言の場合、 &lt;code&gt;scope&lt;/code&gt; 属性は</target>
        </trans-unit>
        <trans-unit id="3fa8f7d1b74d1a9ee8b770bcbe3131eb50e5e608" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scope&lt;/code&gt; storage class on the</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; ストレージクラス</target>
        </trans-unit>
        <trans-unit id="7e245aa06638dcfada88df8c50a10a266377829d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;seg&lt;/code&gt; means load the segment number that the symbol is in. This is not relevant for flat model code. Instead, do a move from the relevant segment register.</source>
          <target state="translated">&lt;code&gt;seg&lt;/code&gt; 手段はシンボルであるとセグメント番号をロードする。これは、フラットモデルコードに関連しません。代わりに、関連するセグメントレジスタから移動してください。</target>
        </trans-unit>
        <trans-unit id="f1165047c539bab5d19432fe9cd8e8d0c00bd8b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shared&lt;/code&gt; attribute modifies the type from &lt;code&gt;T&lt;/code&gt; to &lt;code&gt;shared(T)&lt;/code&gt;, the same way as &lt;code&gt;const&lt;/code&gt; does.</source>
          <target state="translated">&lt;code&gt;shared&lt;/code&gt; 属性からタイプを変更 &lt;code&gt;T&lt;/code&gt; に &lt;code&gt;shared(T)&lt;/code&gt; と同様、 &lt;code&gt;const&lt;/code&gt; ありません。</target>
        </trans-unit>
        <trans-unit id="1e208afb75193f3bc51ca510ccfe04a767a6a006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stat&lt;/code&gt; struct gotten from calling &lt;code&gt;stat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stat&lt;/code&gt; 構造体は、呼び出しから得 &lt;code&gt;stat&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ee90ec4fd6fa01114c3ec0cf16e2c2fffb84458" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;static&lt;/code&gt; attribute applies to functions and data. It means that the declaration does not apply to a particular instance of an object, but to the type of the object. In other words, it means there is no &lt;code&gt;this&lt;/code&gt; reference. &lt;code&gt;static&lt;/code&gt; is ignored when applied to other declarations.</source>
          <target state="translated">&lt;code&gt;static&lt;/code&gt; 属性は、関数やデータに適用されます。つまり、宣言はオブジェクトの特定のインスタンスではなく、オブジェクトのタイプに適用されます。つまり、 &lt;code&gt;this&lt;/code&gt; 参照がないことを意味します。 &lt;code&gt;static&lt;/code&gt; は、他の宣言に適用されると無視されます。</target>
        </trans-unit>
        <trans-unit id="a7bd38d68869d8f5055deb4d9c87d32c72ed47d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;static&lt;/code&gt; in the static constructor declaration is not an attribute, it must appear immediately before the &lt;code&gt;this&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;static&lt;/code&gt; 静的コンストラクタ宣言では、直前に表示される必要があり、属性ではありません &lt;code&gt;this&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="78a76bba5ffa9cb0f5429288aefeb29752e20041" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;static&lt;/code&gt; in the static destructor declaration is not an attribute, it must appear immediately before the &lt;code&gt;~this&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;static&lt;/code&gt; 静的デストラクタの宣言では、直前に表示される必要があり、属性ではありません &lt;code&gt;~this&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6bca96c9851b526872a5466004ed8fbfdad08557" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;std.uni&lt;/code&gt; module provides an implementation of fundamental Unicode algorithms and data structures. This doesn't include UTF encoding and decoding primitives, see &lt;a href=&quot;std_utf#decode&quot;&gt;&lt;code&gt;std.utf.decode&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;std_utf#encode&quot;&gt;&lt;code&gt;std.utf.encode&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;std_utf&quot;&gt;&lt;code&gt;std.utf&lt;/code&gt;&lt;/a&gt; for this functionality.</source>
          <target state="translated">&lt;code&gt;std.uni&lt;/code&gt; モジュールは、基本Unicodeのアルゴリズムとデータ構造の実装を提供します。これは、UTFエンコードとデコードプリミティブを含ま見えない&lt;a href=&quot;std_utf#decode&quot;&gt; &lt;code&gt;std.utf.decode&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;std_utf#encode&quot;&gt; &lt;code&gt;std.utf.encode&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;std_utf&quot;&gt; &lt;code&gt;std.utf&lt;/code&gt; を&lt;/a&gt;この機能のために。</target>
        </trans-unit>
        <trans-unit id="e752dcef30e45214ff3e8ec23bf1ea7507c8d89b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdName&lt;/code&gt; for this time zone.</source>
          <target state="translated">&lt;code&gt;stdName&lt;/code&gt; このタイムゾーン。</target>
        </trans-unit>
        <trans-unit id="050f0ed338278e2be6b6c047057d2f449c86d2d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stripLeft&lt;/code&gt; function will strip the &lt;code&gt;front&lt;/code&gt; of the range, the &lt;code&gt;stripRight&lt;/code&gt; function will strip the &lt;code&gt;back&lt;/code&gt; of the range, while the &lt;code&gt;strip&lt;/code&gt; function will strip both the &lt;code&gt;front&lt;/code&gt; and &lt;code&gt;back&lt;/code&gt; of the range.</source>
          <target state="translated">&lt;code&gt;stripLeft&lt;/code&gt; を取り除くであろう機能 &lt;code&gt;front&lt;/code&gt; 範囲は、 &lt;code&gt;stripRight&lt;/code&gt; の機能は、ストリップう &lt;code&gt;back&lt;/code&gt; しながら、範囲を &lt;code&gt;strip&lt;/code&gt; 関数は、両方のストリップう &lt;code&gt;front&lt;/code&gt; 及び &lt;code&gt;back&lt;/code&gt; 範囲を。</target>
        </trans-unit>
        <trans-unit id="839ed0bb56b103a8eece57297954fc01f25ea05d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;synchronized&lt;/code&gt; attribute can only be applied to classes, structs cannot be marked to be synchronized.</source>
          <target state="translated">&lt;code&gt;synchronized&lt;/code&gt; 属性はクラスのみに適用することができ、構造体を同期させるためにマークすることはできません。</target>
        </trans-unit>
        <trans-unit id="9011fa2589704334e3e103c4c208b6c05b6bc3a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; of this &lt;code&gt;SysTime&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 本の &lt;code&gt;SysTime&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="771910a8002a7122d3a609081a9732bd40452d54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; parameter for methods or nested functions.</source>
          <target state="translated">メソッドまたはネストされた関数の &lt;code&gt;this&lt;/code&gt; パラメータ。</target>
        </trans-unit>
        <trans-unit id="86abf02caae05395778f7a7acd623fbca99d9de9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;to&lt;/code&gt; template converts a value from one type to another. The source type is deduced and the target type must be specified, for example the expression &lt;code&gt;to!int(42.0)&lt;/code&gt; converts the number 42 from &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;int&lt;/code&gt;. The conversion is &quot;safe&quot;, i.e., it checks for overflow; &lt;code&gt;to!int(4.2e10)&lt;/code&gt; would throw the &lt;code&gt;ConvOverflowException&lt;/code&gt; exception. Overflow checks are only inserted when necessary, e.g., &lt;code&gt;to!double(42)&lt;/code&gt; does not do any checking because any &lt;code&gt;int&lt;/code&gt; fits in a &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">テンプレートは、ある型から別の型の値を変換します。ソースタイプが推定され、ターゲットタイプを指定する必要があります。たとえば、式 &lt;code&gt;to!int(42.0)&lt;/code&gt; は数値42を &lt;code&gt;double&lt;/code&gt; から &lt;code&gt;int&lt;/code&gt; に変換します。変換は「安全」です。つまり、オーバーフローをチェックします。 &lt;code&gt;to!int(4.2e10)&lt;/code&gt; は &lt;code&gt;ConvOverflowException&lt;/code&gt; 例外をスローします。必要なときにオーバーフローのチェックがのみ挿入され、例えば、 &lt;code&gt;to!double(42)&lt;/code&gt; 任意のため、すべてのチェックを行いません &lt;code&gt;int&lt;/code&gt; 型に収まる &lt;code&gt;double&lt;/code&gt; &lt;code&gt;to&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c72681bce14ab24a3265bfe0c7fc387d069da68a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;upTo&lt;/code&gt; parameter is useful to &quot;cut the losses&quot; in case the interest is in seeing whether the range has at least some number of elements. If the parameter &lt;code&gt;upTo&lt;/code&gt; is specified, stops if &lt;code&gt;upTo&lt;/code&gt; steps have been taken and returns &lt;code&gt;upTo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;upTo&lt;/code&gt; パラメータは、対象範囲は、要素の少なくともいくつかの番号を持っているかどうかを見ている場合は、「損失を削減」することが有用です。パラメータ場合 &lt;code&gt;upTo&lt;/code&gt; 指定されている場合などに停止 &lt;code&gt;upTo&lt;/code&gt; 手順がとられていると返し &lt;code&gt;upTo&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec39fe5b28d95636f3cf30df0999156fd8536f9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;version(unittest)&lt;/code&gt; is satisfied if and only if the code is compiled with unit tests enabled (the &lt;a href=&quot;https://dlang.org/dmd.html#switch-unittest&quot;&gt;&lt;em&gt;-unittest&lt;/em&gt;&lt;/a&gt; option on &lt;em&gt;dmd&lt;/em&gt;).</source>
          <target state="translated">&lt;code&gt;version(unittest)&lt;/code&gt; コードはユニットテストは、（有効でコンパイルされる場合にのみ満たされる&lt;a href=&quot;https://dlang.org/dmd.html#switch-unittest&quot;&gt;&lt;em&gt;-unittest&lt;/em&gt;&lt;/a&gt;上のオプション&lt;em&gt;DMD&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="a777caaefbb263c6a96ad677845f9139788a6836" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with&lt;/code&gt; statement is a way to simplify repeated references to the same object.</source>
          <target state="translated">文は、同じオブジェクトへの参照の繰り返しを簡略化する方法です。 &lt;code&gt;with&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b5c453abc4924350428091525f5adaaf66e0085f" translate="yes" xml:space="preserve">
          <source>The AA indicating which characters to replace and what to replace them with.</source>
          <target state="translated">どの文字を何に置き換えるかを示すAA。</target>
        </trans-unit>
        <trans-unit id="3cd598fe8a3a2f9cbd7fd135237f3d6a48d2526a" translate="yes" xml:space="preserve">
          <source>The ARM &lt;code&gt;hardfp&lt;/code&gt; floating point ABI</source>
          <target state="translated">ARM &lt;code&gt;hardfp&lt;/code&gt; 浮動小数点ABI</target>
        </trans-unit>
        <trans-unit id="080cd6006fb8edfc56cbc88495f7c0f1e4064bf0" translate="yes" xml:space="preserve">
          <source>The ARM &lt;code&gt;soft&lt;/code&gt; floating point ABI</source>
          <target state="translated">ARM &lt;code&gt;soft&lt;/code&gt; 浮動小数点ABI</target>
        </trans-unit>
        <trans-unit id="4315576cc7f55930516266d81e5293d6035553b5" translate="yes" xml:space="preserve">
          <source>The ARM &lt;code&gt;softfp&lt;/code&gt; floating point ABI</source>
          <target state="translated">ARM &lt;code&gt;softfp&lt;/code&gt; 浮動小数点ABI</target>
        </trans-unit>
        <trans-unit id="1aee526a398ffb0d8989324764e692631fcec3dc" translate="yes" xml:space="preserve">
          <source>The ARM architecture (32-bit) (AArch32 et al)</source>
          <target state="translated">ARMアーキテクチャ(32ビット)(AArch32他)</target>
        </trans-unit>
        <trans-unit id="140d76b4f076d2fb8060abf8ae55a752d2839ebb" translate="yes" xml:space="preserve">
          <source>The ASTBase family defines a family of AST nodes appropriate for parsing with no semantic information. It defines all the AST nodes that the parser needs and also all the conveniance methods and variables. The resulting AST can be visited with the strict, permissive and transitive visitors. The ASTBase family is used to instantiate the parser in the parser library.</source>
          <target state="translated">ASTBaseファミリは、意味情報を持たない解析に適したASTノードのファミリを定義します。パーサが必要とするすべてのASTノードと、すべてのconvenianceメソッドと変数を定義しています。結果として得られるASTは、strict、permissive、transitiveの3種類の訪問者を使って訪問することができます。ASTBaseファミリは、パーサライブラリでパーサのインスタンスを作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c3be1c951cff3d8aa070819c54cb8919e689dc11" translate="yes" xml:space="preserve">
          <source>The Advanced RISC Machine architecture (64-bit)</source>
          <target state="translated">先進のRISCマシンアーキテクチャ(64ビット)</target>
        </trans-unit>
        <trans-unit id="7ad070d4c966b73f1a0e81ee952f683fc75493b1" translate="yes" xml:space="preserve">
          <source>The Alpha architecture</source>
          <target state="translated">アルファアーキテクチャ</target>
        </trans-unit>
        <trans-unit id="75879c280e92f1cb9eedc61a237d7ab029b22e63" translate="yes" xml:space="preserve">
          <source>The Alpha hard float ABI</source>
          <target state="translated">アルファハードフロートABI</target>
        </trans-unit>
        <trans-unit id="62c77bede3b6cdc2acf3c10062577e4523986150" translate="yes" xml:space="preserve">
          <source>The Alpha soft float ABI</source>
          <target state="translated">アルファソフトフロートABI</target>
        </trans-unit>
        <trans-unit id="c01dada0c094f9d64c05e42515804aed98403159" translate="yes" xml:space="preserve">
          <source>The Android platform</source>
          <target state="translated">Androidプラットフォーム</target>
        </trans-unit>
        <trans-unit id="6f8a189af46fa6b0fd80d35f5b80e9c56ef0f48e" translate="yes" xml:space="preserve">
          <source>The C ABI referred to in this specification means the C Application Binary Interface of the target system. C and D code should be freely linkable together, in particular, D code shall have access to the entire C ABI runtime library.</source>
          <target state="translated">本仕様書でいう C ABI とは、ターゲットシステムの C Application Binary Interface を意味する。C と D のコードは自由にリンク可能でなければならず、特に D のコードは C ABI ランタイムライブラリ全体にアクセス可能でなければならない。</target>
        </trans-unit>
        <trans-unit id="b31779cdd7255c8710f71ffcb42a8c3c176e037b" translate="yes" xml:space="preserve">
          <source>The C function must be declared and given a calling convention, most likely the &quot;C&quot; calling convention, for example:</source>
          <target state="translated">C関数は宣言されていなければならず、呼び出し規約を与えなければなりません。</target>
        </trans-unit>
        <trans-unit id="b73111d71bd053626a250414ea9482ee128f3a9d" translate="yes" xml:space="preserve">
          <source>The C heap allocator, a.k.a. &lt;code&gt;malloc&lt;/code&gt;/&lt;code&gt;realloc&lt;/code&gt;/&lt;code&gt;free&lt;/code&gt;. Use sparingly and only for code that is unlikely to leak.</source>
          <target state="translated">Cヒープアロケーター、別名 &lt;code&gt;malloc&lt;/code&gt; / &lt;code&gt;realloc&lt;/code&gt; / &lt;code&gt;free&lt;/code&gt; 。リークの可能性が低いコードに対してのみ、控えめに使用してください。</target>
        </trans-unit>
        <trans-unit id="9bcae0904b97d122e7ac2cf8f770976e290fa9d4" translate="yes" xml:space="preserve">
          <source>The C heap allocator.</source>
          <target state="translated">Cヒープアロケータです。</target>
        </trans-unit>
        <trans-unit id="d3d9a3eb3d745c74b8f9c5ffaed6de680eef5f7e" translate="yes" xml:space="preserve">
          <source>The C standard does not specify the representation of time_t, so it is implementation defined. On POSIX systems, unix time is equivalent to time_t, but that's not necessarily true on other systems (e.g. it is not true for the Digital Mars C runtime). So, be careful when using unix time with C functions on non-POSIX systems.</source>
          <target state="translated">C標準ではtime_tの表現は指定されていないので、実装で定義されている。POSIXシステムでは、unix timeはtime_tと同等ですが、それ以外のシステムでは必ずしもそうとは限りません(例:Digital MarsのCランタイムではそうとは限りません)。そのため、POSIXシステム以外のシステムでCの関数でunix timeを使う場合は注意が必要です。</target>
        </trans-unit>
        <trans-unit id="268d31350a547e3c72b722824c24bd316ded8af7" translate="yes" xml:space="preserve">
          <source>The C style syntax for declaring pointers to functions is deprecated:</source>
          <target state="translated">関数へのポインタを宣言する C スタイルの構文は非推奨です。</target>
        </trans-unit>
        <trans-unit id="fe2a0b7eccecf9a4981d7246d1ba9612d79f4687" translate="yes" xml:space="preserve">
          <source>The C++ calling convention is the default convention for its member functions, rather than the D calling convention.</source>
          <target state="translated">C++の呼び出し規約は、そのメンバ関数の既定の規約であり、D の呼び出し規約ではありません。</target>
        </trans-unit>
        <trans-unit id="8e79898d7d2dc499b7d995326a3a49d8e19d01cf" translate="yes" xml:space="preserve">
          <source>The C++ code to access it looks like:</source>
          <target state="translated">それにアクセスするためのC++コードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="744ee5429ee5de2789ebe3998584f1507a9905e0" translate="yes" xml:space="preserve">
          <source>The C++ end looks like:</source>
          <target state="translated">C++エンドはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="fd9a5a8084540da9e33cf1c4a0dafe5ab694bd12" translate="yes" xml:space="preserve">
          <source>The C++ version of D's ExceptionHeader wrapper</source>
          <target state="translated">D の ExceptionHeader ラッパーの C++版</target>
        </trans-unit>
        <trans-unit id="8095ddeea5e0e04c215a664a1828938a9f629b34" translate="yes" xml:space="preserve">
          <source>The CApath directory used to validate the peer certificate this option is used only if SSL_VERIFYPEER is true</source>
          <target state="translated">ピア証明書を検証するために使われる CApath ディレクトリ このオプションは SSL_VERIFYPEER が true の場合にのみ使われます。</target>
        </trans-unit>
        <trans-unit id="0f5b63bc94368c961989a6c61e45ef163a38eec9" translate="yes" xml:space="preserve">
          <source>The CApath or CAfile used to validate the peer certificate this option is used only if SSL_VERIFYPEER is true</source>
          <target state="translated">このオプションは SSL_VERIFYPEER が真の場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="2735c767df771513d95177efb3609e6484a0ab5e" translate="yes" xml:space="preserve">
          <source>The CLI flag without leading &lt;code&gt;-&lt;/code&gt;, e.g. &lt;code&gt;color&lt;/code&gt;</source>
          <target state="translated">先行なしのCLIフラグ &lt;code&gt;-&lt;/code&gt; 、例えば &lt;code&gt;color&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="204d490b010260c1f0d9da99a97fcbf057fe1425" translate="yes" xml:space="preserve">
          <source>The ClassKind enum is used in AggregateDeclaration AST nodes to specify the linkage type of the struct/class/interface or if it is an anonymous class. If the class is anonymous it is also considered to be a D class.</source>
          <target state="translated">ClassKind enumは、構造体/クラス/インタフェースのリンクタイプを指定するために、AggregateDeclaration ASTノードで使用されます。匿名クラスの場合はDクラスとみなされます。</target>
        </trans-unit>
        <trans-unit id="19b53b7f22b6ad230e9b7d3050f57e3d9ed3e6a2" translate="yes" xml:space="preserve">
          <source>The Cygwin environment</source>
          <target state="translated">Cygwinの環境</target>
        </trans-unit>
        <trans-unit id="4cedce22f0215a765398ea9fe9f300cfe9ad0637" translate="yes" xml:space="preserve">
          <source>The D &lt;b&gt;dchar&lt;/b&gt; type is represented by the special primitive type 0x78.</source>
          <target state="translated">D &lt;b&gt;dchar&lt;/b&gt;タイプは、特別なプリミティブタイプ0x78で表されます。</target>
        </trans-unit>
        <trans-unit id="c3537395621b252f9ec47bd7365cace4c8165f58" translate="yes" xml:space="preserve">
          <source>The D Error Handling Solution</source>
          <target state="translated">Dエラー処理ソリューション</target>
        </trans-unit>
        <trans-unit id="981d02056effa5ba62bb1118da0c8017aedaaf90" translate="yes" xml:space="preserve">
          <source>The D compiler is free to rearrange the order of fields in a class to optimally pack them in an implementation-defined manner. Consider the fields much like the local variables in a function - the compiler assigns some to registers and shuffles others around all to get the optimal stack frame layout. This frees the code designer to organize the fields in a manner that makes the code more readable rather than being forced to organize it according to machine optimization rules. Explicit control of field layout is provided by struct/union types, not classes.</source>
          <target state="translated">D コンパイラは、クラス内のフィールドの順序を自由に変更して、実装定義された方法で最適に配置することができます。フィールドを関数内のローカル変数とよく似ていると考えてください。これにより、コード設計者は、マシンの最適化ルールに基づいてフィールドを整理することを強制されるのではなく、コードをより読みやすくする方法でフィールドを整理することができます。フィールドレイアウトの明示的な制御は、クラスではなく struct/union 型によって行われます。</target>
        </trans-unit>
        <trans-unit id="66c7fe3af0cd825203fe720c8fa067ea0a5678d5" translate="yes" xml:space="preserve">
          <source>The D implementation is a direct translation of the ANSI C implementation by Antoon Bosselaers.</source>
          <target state="translated">Dの実装は、Antoon BosselaersによるANSI Cの実装を直訳したものです。</target>
        </trans-unit>
        <trans-unit id="0eb8727502196b9e0eeb264d99cb49da0fe24a5d" translate="yes" xml:space="preserve">
          <source>The D programming language enables embedding both contracts and test code along side the actual code, which helps to keep them all consistent with each other. One thing lacking is the documentation, as ordinary comments are usually unsuitable for automated extraction and formatting into manual pages. Embedding the user documentation into the source code has important advantages, such as not having to write the documentation twice, and the likelihood of the documentation staying consistent with the code.</source>
          <target state="translated">Dプログラミング言語は、契約書とテストコードの両方を実際のコードと一緒に埋め込むことができるので、すべてのコードをお互いに整合性のあるものに保つのに役立ちます。不足しているのはドキュメントです。通常のコメントは、手動のページに自動抽出してフォーマットするのには不向きです。ソースコードにユーザードキュメントを埋め込むことは、ドキュメントを二度書く必要がないことや、ドキュメントがコードと一貫性を保つ可能性が高いことなど、重要な利点があります。</target>
        </trans-unit>
        <trans-unit id="802c45703e5b78c2f572e30e6188af81443e60af" translate="yes" xml:space="preserve">
          <source>The D runtime library to be linked in, because many features of the core language require runtime library support.</source>
          <target state="translated">コア言語の多くの機能がランタイムライブラリのサポートを必要とするため、リンクするDランタイムライブラリ。</target>
        </trans-unit>
        <trans-unit id="5618198d08f630b6e32a4e2871006e5750e7b402" translate="yes" xml:space="preserve">
          <source>The DDoc description &lt;code&gt;ddoxText&lt;/code&gt; is only available when compiled with &lt;code&gt;-version=DdocOptions&lt;/code&gt;.</source>
          <target state="translated">DDocの説明 &lt;code&gt;ddoxText&lt;/code&gt; は、 &lt;code&gt;-version=DdocOptions&lt;/code&gt; を指定してコンパイルした場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="7fb61f59ea8c90dd27a6926b8a592e6ead829fcc" translate="yes" xml:space="preserve">
          <source>The DLang Tour's &lt;a href=&quot;http://tour.dlang.org/tour/en/basics/ranges&quot;&gt;chapter on ranges&lt;/a&gt; for an interactive introduction.</source>
          <target state="translated">インタラクティブな紹介のための&lt;a href=&quot;http://tour.dlang.org/tour/en/basics/ranges&quot;&gt;範囲に関する&lt;/a&gt; DLangツアーの章。</target>
        </trans-unit>
        <trans-unit id="cf140ab3f9e536cec445868430509f0cac2d46fc" translate="yes" xml:space="preserve">
          <source>The DNS check is currently not implemented.</source>
          <target state="translated">DNSチェックは現在実施されていません。</target>
        </trans-unit>
        <trans-unit id="56d9ffa8426e25e0a3a48c7232e3304c44908db1" translate="yes" xml:space="preserve">
          <source>The DOS file time to convert.</source>
          <target state="translated">変換するDOSファイルの時間。</target>
        </trans-unit>
        <trans-unit id="15ae789bb8d9a2910a1013b01a8410a64b26b8d3" translate="yes" xml:space="preserve">
          <source>The Darwin operating system; use &lt;code&gt;OSX&lt;/code&gt; instead</source>
          <target state="translated">Darwinオペレーティングシステム。使用 &lt;code&gt;OSX&lt;/code&gt; 代わりに</target>
        </trans-unit>
        <trans-unit id="0c5d193fbc258ff579f3a37e19e9cc2430e7b7ab" translate="yes" xml:space="preserve">
          <source>The Date to set this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;'s date portion to.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の日付部分を設定する日付。</target>
        </trans-unit>
        <trans-unit id="00fdc9fbd5322b30129c9d99ab189c9c104eb677" translate="yes" xml:space="preserve">
          <source>The Digest interface is the base interface which is implemented by all digests.</source>
          <target state="translated">ダイジェストインタフェースは、すべてのダイジェストによって実装される基本インタフェースです。</target>
        </trans-unit>
        <trans-unit id="2ce0bb02d358ab6addf0222f9fba8a86b6896e28" translate="yes" xml:space="preserve">
          <source>The EH table entries are placed into the following special segments, which are concatenated by the linker.</source>
          <target state="translated">EHテーブルのエントリは、リンカによって連結された以下の特別なセグメントに配置されます。</target>
        </trans-unit>
        <trans-unit id="89d37e362d131df02b90f0756029490076b33ab7" translate="yes" xml:space="preserve">
          <source>The EXEC state will be set for any fiber that is currently executing.</source>
          <target state="translated">現在実行中のファイバーに対してEXEC状態が設定されます。</target>
        </trans-unit>
        <trans-unit id="1ccc5057903fdcfbcc510be952b9d5d37edada1d" translate="yes" xml:space="preserve">
          <source>The Emscripten platform</source>
          <target state="translated">Emscripten プラットフォーム</target>
        </trans-unit>
        <trans-unit id="b55fb20708d967172c74318116b38ef62263da2d" translate="yes" xml:space="preserve">
          <source>The Epiphany architecture</source>
          <target state="translated">エピファニーの建築</target>
        </trans-unit>
        <trans-unit id="40b8a913038e25b6c9bffa97642d1772e1aab6db" translate="yes" xml:space="preserve">
          <source>The Error Handling Problem</source>
          <target state="translated">エラー処理の問題</target>
        </trans-unit>
        <trans-unit id="eaf7066f86536efb6667615a8c705264f2359588" translate="yes" xml:space="preserve">
          <source>The Executable and Linkable Format v1</source>
          <target state="translated">実行およびリンク可能なフォーマット v1</target>
        </trans-unit>
        <trans-unit id="a8995e2abee214cdd0937cb4114af84984101e63" translate="yes" xml:space="preserve">
          <source>The Executable and Linkable Format v2</source>
          <target state="translated">実行およびリンク可能なフォーマット v2</target>
        </trans-unit>
        <trans-unit id="b797d89bcc3a1d38587d03c438f6923075c38d2a" translate="yes" xml:space="preserve">
          <source>The FE_INEXACT and FE_OVERFLOW exceptions will be raised if x is finite and the function result is infinite. The FE_INEXACT and FE_UNDERFLOW exceptions will be raised if the function value is subnormal, and x is not equal to y.</source>
          <target state="translated">xが有限で、関数の結果が無限の場合、FE_INEXACTとFE_OVERFLOWの例外が発生します。関数値が亜正規値で、xがyと等しくない場合、FE_INEXACTおよびFE_UNDERFLOW例外が発生します。</target>
        </trans-unit>
        <trans-unit id="2cc30ae8daa2c51e73b2400207e079f98f496883" translate="yes" xml:space="preserve">
          <source>The FPU control word must be preserved across function calls.</source>
          <target state="translated">FPU 制御ワードは、関数呼び出しに渡って保存されなければなりません。</target>
        </trans-unit>
        <trans-unit id="fa883c84fbc6dfcd4baaa0ba51f4b62fb823c921" translate="yes" xml:space="preserve">
          <source>The FPU stack must be empty when calling a function.</source>
          <target state="translated">関数を呼び出す際には、FPUスタックは空でなければなりません。</target>
        </trans-unit>
        <trans-unit id="66be60482d61ed5145b549ed903a83bb0c71ea95" translate="yes" xml:space="preserve">
          <source>The FQDN corresponding to this &lt;code&gt;Address&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if the host name did not resolve.</source>
          <target state="translated">この &lt;code&gt;Address&lt;/code&gt; に対応するFQDN 。ホスト名が解決されなかった場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d41f60329bdc4eca1fcd11caa66e4edfbd09ff0" translate="yes" xml:space="preserve">
          <source>The FQDN corresponding to this &lt;code&gt;InternetAddress&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if the host name did not resolve.</source>
          <target state="translated">この &lt;code&gt;InternetAddress&lt;/code&gt; に対応するFQDN 。ホスト名が解決されなかった場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d604d40fa57017daad3764bad77115c1ca0fdd67" translate="yes" xml:space="preserve">
          <source>The Free Tree allocator, stackable on top of any other allocator, bears similarity with the free list allocator. Instead of a singly-linked list of previously freed blocks, it maintains a binary search tree. This allows the Free Tree allocator to manage blocks of arbitrary lengths and search them efficiently.</source>
          <target state="translated">自由木アロケータは、他のアロケータの上に積み重ねることができ、自由リストアロケータと似ています。以前に解放されたブロックの単一リンクされたリストの代わりに、バイナリ検索ツリーを保持します。これにより、自由木アロケータは任意の長さのブロックを管理し、効率的に検索することができます。</target>
        </trans-unit>
        <trans-unit id="66f9b21030c9cfea4f858014e8954ebf1f3aae2a" translate="yes" xml:space="preserve">
          <source>The GC does not know about threads that were created by directly calling the OS/C runtime thread creation APIs and D threads that were detached from the D runtime after creation. Such threads will not be paused for a GC collection, and the GC might not detect references to GC allocated data held by them. This can cause memory corruption. There are several ways to resolve this issue:</source>
          <target state="translated">GC は、OS/C ランタイムのスレッド作成 API を直接呼び出して作成されたスレッドや、作成後に D ランタイムから切り離された D スレッドを知りません。そのようなスレッドは、GC コレクションのために一時停止されることはなく、GC はそれらによって保持された GC 割り当てデータへの参照を検出しない場合があります。これは、メモリの破損を引き起こす可能性があります。この問題を解決する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="09265af251af541f24fa02df354e6c627eeab43b" translate="yes" xml:space="preserve">
          <source>The GC is a conservative mark-and-sweep collector. It only runs a collection cycle when an allocation is requested of it, never otherwise. Hence, if the program is not doing allocations, there will be no GC collection pauses. The pauses occur because all threads the GC knows about are halted so the threads' stacks and registers can be scanned for references to GC allocated data.</source>
          <target state="translated">GC は保守的なマークアンドスイープコレクタです。GC は、アロケーションが要求されたときのみコレクションサイクルを実行し、それ以外のときは決して実行しません。したがって、プログラムがアロケーションを行っていない場合、GC コレクションの一時停止は発生しません。一時停止は、GC が知っているすべてのスレッドが停止しているために発生し、スレッドのスタッ クとレジスタが GC 割り当てデータへの参照のためにスキャンされます。</target>
        </trans-unit>
        <trans-unit id="3621ad3c024741748106435d6839670def09513e" translate="yes" xml:space="preserve">
          <source>The GC works by:</source>
          <target state="translated">GCの仕事は</target>
        </trans-unit>
        <trans-unit id="01be7ac14383dc55322950a93747b509b1d25d34" translate="yes" xml:space="preserve">
          <source>The Gamma function, &amp;Gamma;(x)</source>
          <target state="translated">ガンマ関数、&amp;Gamma;（x）</target>
        </trans-unit>
        <trans-unit id="7f9dd1ba3610a4fa3692ac332748a174db7a2c97" translate="yes" xml:space="preserve">
          <source>The General Idea</source>
          <target state="translated">一般的な考え方</target>
        </trans-unit>
        <trans-unit id="09c260551ce83481dd94ee562ae20c29d2cbfbcd" translate="yes" xml:space="preserve">
          <source>The HOLD state applies to any fiber that is suspended and ready to be called.</source>
          <target state="translated">HOLD状態は、中断されて呼び出し可能な状態になっているファイバーに適用されます。</target>
        </trans-unit>
        <trans-unit id="f79c18f74d62562ad1f7c03592165873d3b1261e" translate="yes" xml:space="preserve">
          <source>The HP PA-RISC architecture, 32-bit</source>
          <target state="translated">HP PA-RISCアーキテクチャ、32ビット</target>
        </trans-unit>
        <trans-unit id="7286f6510b88f99f7add4a6c2608a7eee35a2efd" translate="yes" xml:space="preserve">
          <source>The HP PA-RISC architecture, 64-bit</source>
          <target state="translated">HP PA-RISCアーキテクチャ、64ビット</target>
        </trans-unit>
        <trans-unit id="5270e504f2e810bcb80b698fc095abb55c5262a9" translate="yes" xml:space="preserve">
          <source>The HTTP status code</source>
          <target state="translated">HTTPステータスコード</target>
        </trans-unit>
        <trans-unit id="00d3a26093b532d414271679dbec9e6e2a73f34f" translate="yes" xml:space="preserve">
          <source>The HTTP status code.</source>
          <target state="translated">HTTPステータスコードです。</target>
        </trans-unit>
        <trans-unit id="7122ee727a4a9c43a0c4b374f8af52b6a3d4cb29" translate="yes" xml:space="preserve">
          <source>The Haiku operating system</source>
          <target state="translated">俳句のオペレーティングシステム</target>
        </trans-unit>
        <trans-unit id="754ea5395a39abae7ed60f21d5519e88e6165ab7" translate="yes" xml:space="preserve">
          <source>The IPv4 address to resolve, in host byte order.</source>
          <target state="translated">解決するIPv4アドレス。</target>
        </trans-unit>
        <trans-unit id="0b97447540254f088f748027ca72f36ef505114e" translate="yes" xml:space="preserve">
          <source>The IPv6 address contains an illegal group of characters</source>
          <target state="translated">IPv6アドレスに不正な文字列が含まれています。</target>
        </trans-unit>
        <trans-unit id="939c03178f2358d0df8918d3f727b4b5275338a9" translate="yes" xml:space="preserve">
          <source>The IPv6 address has too many groups</source>
          <target state="translated">IPv6アドレスはグループが多すぎる</target>
        </trans-unit>
        <trans-unit id="b524ba697022923dfd3280c242c2f5c008ed3014" translate="yes" xml:space="preserve">
          <source>The IPv6 literal address contains the wrong number of groups</source>
          <target state="translated">IPv6リテラルアドレスに誤ったグループ数が含まれている</target>
        </trans-unit>
        <trans-unit id="e504cc6edc640db7967795f40b8ee6b3c54fc358" translate="yes" xml:space="preserve">
          <source>The IPv6 literal address contains too many :: sequences</source>
          <target state="translated">IPv6 リテラルアドレスには多すぎる ::シーケンスが含まれています。</target>
        </trans-unit>
        <trans-unit id="4484ea847d299a869e106746e76b93aab4ed4c63" translate="yes" xml:space="preserve">
          <source>The ISO 8601 week and year of the year that this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is in.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;が含まれるISO8601の週と年。</target>
        </trans-unit>
        <trans-unit id="32301a3821496f197f80c8f798e0ea4f8cc4adc2" translate="yes" xml:space="preserve">
          <source>The ISO 8601 week of the year that this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is in.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;が含まれる、ISO 8601での年間通算週。</target>
        </trans-unit>
        <trans-unit id="f553bfd947d975047033c96897725e1b54f28cb8" translate="yes" xml:space="preserve">
          <source>The ISO 8601 week of the year that this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is in.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が含まれるISO 8601の年間通算週。</target>
        </trans-unit>
        <trans-unit id="609c718075ac3c5f30e12392b88a12278c90c113" translate="yes" xml:space="preserve">
          <source>The ISO 8601 week of the year that this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; is in.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;が存在するISO 8601の1年の週。</target>
        </trans-unit>
        <trans-unit id="5d4b2d1662b082964162c97fb5d0dcbe255cddc9" translate="yes" xml:space="preserve">
          <source>The Intel mappings are:</source>
          <target state="translated">インテルのマッピングは</target>
        </trans-unit>
        <trans-unit id="4e12f496455b58ad8f60123b3271f9b244d4d784" translate="yes" xml:space="preserve">
          <source>The Itanium architecture (64-bit)</source>
          <target state="translated">Itanium アーキテクチャ (64 ビット)</target>
        </trans-unit>
        <trans-unit id="eafe9f7a037c5e67f3da70a6b91c37b61b30b815" translate="yes" xml:space="preserve">
          <source>The LARGE version of the standard POSTFIELDSIZE option</source>
          <target state="translated">標準 POSTFIELDSIZE オプションの LARGE バージョン。</target>
        </trans-unit>
        <trans-unit id="9134d1977034f57d1f687c818551bb851d95680b" translate="yes" xml:space="preserve">
          <source>The MIPS &lt;code&gt;hard-float&lt;/code&gt; ABI</source>
          <target state="translated">MIPS &lt;code&gt;hard-float&lt;/code&gt; ABI</target>
        </trans-unit>
        <trans-unit id="0886aaa5bcac19d0d348397019786e1f00a24cbe" translate="yes" xml:space="preserve">
          <source>The MIPS &lt;code&gt;soft-float&lt;/code&gt; ABI</source>
          <target state="translated">MIPS &lt;code&gt;soft-float&lt;/code&gt; ABI</target>
        </trans-unit>
        <trans-unit id="3c9add972d2d135b53fbf340e836225309a3b85b" translate="yes" xml:space="preserve">
          <source>The MIPS EABI</source>
          <target state="translated">MIPS EABI</target>
        </trans-unit>
        <trans-unit id="61483ec276697778dec9b8f31845f4c0b43841b3" translate="yes" xml:space="preserve">
          <source>The MIPS N32 ABI</source>
          <target state="translated">MIPS N32 ABI</target>
        </trans-unit>
        <trans-unit id="e879e3a8741fac0b79bfe9a6fa792af183d21455" translate="yes" xml:space="preserve">
          <source>The MIPS N64 ABI</source>
          <target state="translated">MIPS N64 ABIの</target>
        </trans-unit>
        <trans-unit id="d4e8f04e3b51f7a111a0b6bd1b36a079abe2873b" translate="yes" xml:space="preserve">
          <source>The MIPS O32 ABI</source>
          <target state="translated">MIPS O32 ABI</target>
        </trans-unit>
        <trans-unit id="bef14bbb878c09e8ee5dc32d3da00729ccb93501" translate="yes" xml:space="preserve">
          <source>The MIPS O64 ABI</source>
          <target state="translated">MIPS O64 ABI</target>
        </trans-unit>
        <trans-unit id="0fc57735dcd8256e5e59ac6395a31b083346ff43" translate="yes" xml:space="preserve">
          <source>The MIPS architecture, 32-bit</source>
          <target state="translated">MIPSアーキテクチャ、32ビット</target>
        </trans-unit>
        <trans-unit id="17e1b519534bdd70840a0f61f4f110bf2c163b10" translate="yes" xml:space="preserve">
          <source>The MIPS architecture, 64-bit</source>
          <target state="translated">MIPSアーキテクチャ、64ビット</target>
        </trans-unit>
        <trans-unit id="c3e4c70686693b89b9dd6f86ff1c297d3c0e0be4" translate="yes" xml:space="preserve">
          <source>The MSP430 architecture</source>
          <target state="translated">MSP430のアーキテクチャ</target>
        </trans-unit>
        <trans-unit id="356126ab1aa2384bb41e6bc4ebe8dbef50cceecb" translate="yes" xml:space="preserve">
          <source>The MinGW environment</source>
          <target state="translated">MinGWの環境</target>
        </trans-unit>
        <trans-unit id="0f46aebab81731ecc7971e216c920d74155e16b2" translate="yes" xml:space="preserve">
          <source>The Mutex that will be associated with this condition. It will be locked prior to any operation on the condition, and so in some cases a Scheduler may need to hold this reference and unlock the mutex before yielding execution to another logical thread.</source>
          <target state="translated">この条件に関連付けられるミューテックスです。このミューテックスは、条件に対する操作を行う前にロックされているため、スケジューラがこの参照を保持し、他の論理スレッドに実行を委ねる前にミューテックスのロックを解除する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="a87cbf0b095ac8eab76a631ffec330584de63e97" translate="yes" xml:space="preserve">
          <source>The N parameter indicate the size of the hash in bits. The parameter P specify the polynomial to be used for reduction.</source>
          <target state="translated">Nパラメータはハッシュのサイズをビット単位で指定します。パラメータPは削減に使用する多項式を指定します。</target>
        </trans-unit>
        <trans-unit id="e2508e2f024c9fbc95d61d6996efa639c0414a7f" translate="yes" xml:space="preserve">
          <source>The Nvidia Parallel Thread Execution (PTX) architecture, 32-bit</source>
          <target state="translated">Nvidia Parallel Thread Execution(PTX)アーキテクチャ、32ビット</target>
        </trans-unit>
        <trans-unit id="43afd253995cf155cd46e72aca1c4d14f27edda9" translate="yes" xml:space="preserve">
          <source>The Nvidia Parallel Thread Execution (PTX) architecture, 64-bit</source>
          <target state="translated">Nvidia Parallel Thread Execution (PTX)アーキテクチャ、64ビット</target>
        </trans-unit>
        <trans-unit id="6b89001c9eee7cbf1eb78ebd06f2cdba52573b8f" translate="yes" xml:space="preserve">
          <source>The ODBC library itself not a part of the &lt;code&gt;dmd&lt;/code&gt; distribution (and typically not a part of the distribution packages of other compilers such as &lt;code&gt;gdc&lt;/code&gt; and &lt;code&gt;ldc&lt;/code&gt;). To use ODBC, install it per the vendor- and platform-specific instructions and then use the appropriate command-line flags (e.g. for dmd, &lt;code&gt;-L-lodbc&lt;/code&gt; on Posix and &lt;code&gt;-Lodbc32.lib&lt;/code&gt; on Windows) to link with the ODBC library. On Windows, using &lt;code&gt;pragma(lib, &quot;odbc32&quot;)&lt;/code&gt; in D code at top level is also appropriate.</source>
          <target state="translated">ODBCライブラリ自体は、 &lt;code&gt;dmd&lt;/code&gt; ディストリビューションの一部ではありません（通常、 &lt;code&gt;gdc&lt;/code&gt; や &lt;code&gt;ldc&lt;/code&gt; などの他のコンパイラのディストリビューションパッケージの一部ではありません）。ODBCを使用するには、ベンダー固有およびプラットフォーム固有の手順に従ってインストールし、適切なコマンドラインフラグ（Posix では &lt;code&gt;-L-lodbc&lt;/code&gt; &lt;code&gt;-Lodbc32.lib&lt;/code&gt; 、Windowsでは-Lodbc32.libなど）を使用して、ODBCライブラリとリンクします。Windowsでは、最上位のDコードで &lt;code&gt;pragma(lib, &quot;odbc32&quot;)&lt;/code&gt; することも適切です。</target>
        </trans-unit>
        <trans-unit id="3cfee8a3cdd0f5ece05fc4719284d9ca35cb1ece" translate="yes" xml:space="preserve">
          <source>The ORDER BY clause</source>
          <target state="translated">ORDER BY句</target>
        </trans-unit>
        <trans-unit id="e14ee41921816523befa01909d94c5e1726b3657" translate="yes" xml:space="preserve">
          <source>The OS that the program was compiled for.</source>
          <target state="translated">プログラムがコンパイルされたOS。</target>
        </trans-unit>
        <trans-unit id="acb9d25ece84bce22fb8212a22f84954077a7a34" translate="yes" xml:space="preserve">
          <source>The ObjectiveC interface recognizes &lt;code&gt;@property&lt;/code&gt; setter functions as special and modifies them accordingly.</source>
          <target state="translated">ObjectiveCインターフェイスは、 &lt;code&gt;@property&lt;/code&gt; セッター関数を特別なものとして認識し、それに応じて変更します。</target>
        </trans-unit>
        <trans-unit id="9d3e4b21e5a04eb6fbe9f2397109b2139a475f5c" translate="yes" xml:space="preserve">
          <source>The POSIX &lt;code&gt;tempDir&lt;/code&gt; algorithm is inspired by Python's &lt;a href=&quot;http://docs.python.org/library/tempfile.html#tempfile.tempdir&quot;&gt;&lt;code&gt;tempfile.tempdir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">POSIX &lt;code&gt;tempDir&lt;/code&gt; アルゴリズムは、Pythonの&lt;a href=&quot;http://docs.python.org/library/tempfile.html#tempfile.tempdir&quot;&gt; &lt;code&gt;tempfile.tempdir&lt;/code&gt; に&lt;/a&gt;着想を得ています。</target>
        </trans-unit>
        <trans-unit id="31d8872f92578235b233b51b76c476d7fea1f8da" translate="yes" xml:space="preserve">
          <source>The PermissiveVisitor overrides the root AST nodes with empty visiting methods.</source>
          <target state="translated">PermissiveVisitorは、空の訪問メソッドを持つルートASTノードをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="b4f6f3e26f3ff3126b16496a184e46c78d9cba02" translate="yes" xml:space="preserve">
          <source>The PlayStation 4 platform</source>
          <target state="translated">プレイステーション4のプラットフォーム</target>
        </trans-unit>
        <trans-unit id="70399824984e6ff6449a6e9c505ed7dd24f48905" translate="yes" xml:space="preserve">
          <source>The PlayStation platform</source>
          <target state="translated">プレイステーションのプラットフォーム</target>
        </trans-unit>
        <trans-unit id="cc67c3f1b66652b129c77acf7df61ddd9416b905" translate="yes" xml:space="preserve">
          <source>The PowerPC architecture, 32-bit</source>
          <target state="translated">PowerPCアーキテクチャ、32ビット</target>
        </trans-unit>
        <trans-unit id="11d7c845ab07a5d6a42e06f125f4373f5e764a25" translate="yes" xml:space="preserve">
          <source>The PowerPC architecture, 64-bit</source>
          <target state="translated">PowerPCアーキテクチャ、64ビット</target>
        </trans-unit>
        <trans-unit id="75f5b736eefcd29872adaf37d46e108c07f8ec67" translate="yes" xml:space="preserve">
          <source>The PowerPC hard float ABI</source>
          <target state="translated">PowerPCのハードフロートABI</target>
        </trans-unit>
        <trans-unit id="2c60a35ae353caf4915f17f56e813cbc9a9912c4" translate="yes" xml:space="preserve">
          <source>The PowerPC soft float ABI</source>
          <target state="translated">PowerPCソフトフロートABI</target>
        </trans-unit>
        <trans-unit id="5435e45bdc0c51d8e23529dc87ba62fac99d8b9a" translate="yes" xml:space="preserve">
          <source>The RISC-V architecture, 32-bit</source>
          <target state="translated">RISC-Vアーキテクチャ、32ビット</target>
        </trans-unit>
        <trans-unit id="b9fe578ae2efbaf9e508542e117f5ee508458c96" translate="yes" xml:space="preserve">
          <source>The RISC-V architecture, 64-bit</source>
          <target state="translated">RISC-Vアーキテクチャ、64ビット</target>
        </trans-unit>
        <trans-unit id="90ccc79b25ba88c383a0b919bf25a08cc0fc464c" translate="yes" xml:space="preserve">
          <source>The RTSP session identifier</source>
          <target state="translated">RTSP セッション識別子</target>
        </trans-unit>
        <trans-unit id="23b016dcf33e16db8ffaf83deb1005e7587906e4" translate="yes" xml:space="preserve">
          <source>The RTSP stream URI</source>
          <target state="translated">RTSP ストリーム URI</target>
        </trans-unit>
        <trans-unit id="cd04b56dd323b56cf68cf7a1c2c623b5bbf96a33" translate="yes" xml:space="preserve">
          <source>The Range to permute. The original ordering will be lost.</source>
          <target state="translated">パーマするレンジ。元の注文が無くなります。</target>
        </trans-unit>
        <trans-unit id="781a90481fca7ce8311f6dc9aaa241c6dbb23d12" translate="yes" xml:space="preserve">
          <source>The SPARC architecture, 32-bit</source>
          <target state="translated">SPARCアーキテクチャ、32ビット</target>
        </trans-unit>
        <trans-unit id="1034834d5e21d8f03f302305ed4219d634887791" translate="yes" xml:space="preserve">
          <source>The SPARC architecture, 64-bit</source>
          <target state="translated">SPARCアーキテクチャ、64ビット</target>
        </trans-unit>
        <trans-unit id="5f5c3aba9207be74c2868dc1673d5d4051edce52" translate="yes" xml:space="preserve">
          <source>The SPARC hard float ABI</source>
          <target state="translated">SPARCハードフロートABI</target>
        </trans-unit>
        <trans-unit id="c02e4fc0e65c5858009152aee0c28acf93d5875b" translate="yes" xml:space="preserve">
          <source>The SPARC soft float ABI</source>
          <target state="translated">SPARCソフトフロートABI</target>
        </trans-unit>
        <trans-unit id="f49a391f9f9d3680aaef70c1a255c3dd843e400b" translate="yes" xml:space="preserve">
          <source>The SPARC v8+ ABI</source>
          <target state="translated">SPARC v8+ABIは</target>
        </trans-unit>
        <trans-unit id="51f88ae48e3d052b49fccac8f3b93fc0fdc92beb" translate="yes" xml:space="preserve">
          <source>The SkyOS operating system</source>
          <target state="translated">SkyOSオペレーティングシステム</target>
        </trans-unit>
        <trans-unit id="2332cfeec9b82b4c089b42655778df17ede056d5" translate="yes" xml:space="preserve">
          <source>The Soundex algorithm converts a word into 4 characters based on how the word sounds phonetically. The idea is that two spellings that sound alike will have the same Soundex value, which means that Soundex can be used for fuzzy matching of names.</source>
          <target state="translated">Soundexアルゴリズムは、その単語が音声的にどのように聞こえるかに基づいて、単語を4文字に変換します。これは、同じように聞こえる2つの綴りが同じSoundex値を持つことを意味しており、Soundexは名前のファジーマッチングに使用することができます。</target>
        </trans-unit>
        <trans-unit id="268f1657c076d3627d3dea23877501be858e04fe" translate="yes" xml:space="preserve">
          <source>The StopWatch can be reset while it's running, and resetting it while it's running will not cause it to stop.</source>
          <target state="translated">ストップウォッチは動作中にリセットすることができ、動作中にリセットしても停止することはありません。</target>
        </trans-unit>
        <trans-unit id="ef49511070e620b95e825c1c86d96261c9c95a00" translate="yes" xml:space="preserve">
          <source>The StopWatch does not have to be stopped for setTimeElapsed to be called, nor will calling it cause the StopWatch to stop.</source>
          <target state="translated">setTimeElapsedが呼び出されるためにStopWatchが停止している必要はありませんし、それを呼び出すことでStopWatchが停止することもありません。</target>
        </trans-unit>
        <trans-unit id="b0a9b6a2bbd967f7e916f635e74331784867ef32" translate="yes" xml:space="preserve">
          <source>The StrictVisitor asserts 0 an all visiting functions in order to make sure that all the nodes are visited.</source>
          <target state="translated">StrictVisitor は、すべてのノードが訪問されていることを確認するために、すべての訪問関数に対して 0 をアサートします。</target>
        </trans-unit>
        <trans-unit id="38a628b9d86064e9b5321ad3bcd830e114572d5b" translate="yes" xml:space="preserve">
          <source>The SuperH architecture, 32-bit</source>
          <target state="translated">SuperHアーキテクチャ、32ビット</target>
        </trans-unit>
        <trans-unit id="766bcffdaef3f631903919b1d19fc7f6bbe507ed" translate="yes" xml:space="preserve">
          <source>The System Z architecture, 64-bit</source>
          <target state="translated">システムZアーキテクチャ、64ビット</target>
        </trans-unit>
        <trans-unit id="60329427da56af2758e2ca1d40d12d8553a7de59" translate="yes" xml:space="preserve">
          <source>The System/390 architecture, 32-bit</source>
          <target state="translated">システム/390アーキテクチャ、32ビット</target>
        </trans-unit>
        <trans-unit id="4b2f7d9d9f4c13907ce79769575d22c87fc28c16" translate="yes" xml:space="preserve">
          <source>The System/390X architecture</source>
          <target state="translated">システム/390Xアーキテクチャ</target>
        </trans-unit>
        <trans-unit id="f3602277188b5a4b62cb2b9c0bc9fd8221ea73de" translate="yes" xml:space="preserve">
          <source>The TERM state is set when a fiber terminates. Once a fiber terminates, it must be reset before it may be called again.</source>
          <target state="translated">TERM 状態は、ファイバが終端するときに設定されます。ファイバが終端すると、再度呼び出す前にリセットしなければなりません。</target>
        </trans-unit>
        <trans-unit id="cf15cedd50ebb05ffc304f6b6e9727e5f84f91f4" translate="yes" xml:space="preserve">
          <source>The TZ Database files and Windows' time zone information frequently do not match. Windows has many errors with regards to when DST switches occur (especially for historical dates). Also, the TZ Database files include far more time zones than Windows does. So, for accurate time zone information, use the TZ Database files with &lt;a href=&quot;#PosixTimeZone&quot;&gt;&lt;code&gt;PosixTimeZone&lt;/code&gt;&lt;/a&gt; rather than &lt;code&gt;WindowsTimeZone&lt;/code&gt;. However, because &lt;code&gt;WindowsTimeZone&lt;/code&gt; uses Windows system calls to deal with the time, it's far more likely to match the behavior of other Windows programs. Be aware of the differences when selecting a method.</source>
          <target state="translated">TZデータベースファイルとWindowsのタイムゾーン情報が一致しないことがよくあります。Windowsには、DSTスイッチがいつ発生するか（特に過去の日付）に関する多くのエラーがあります。また、TZデータベースファイルには、Windowsよりもはるかに多くのタイムゾーンが含まれています。したがって、正確なタイムゾーン情報を&lt;a href=&quot;#PosixTimeZone&quot;&gt; &lt;code&gt;PosixTimeZone&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;WindowsTimeZone&lt;/code&gt; ではなくPosixTimeZoneでTZデータベースファイルを使用してください。ただし、 &lt;code&gt;WindowsTimeZone&lt;/code&gt; はWindowsシステムコールを使用して時間を処理するため、他のWindowsプログラムの動作と一致する可能性がはるかに高くなります。メソッドを選択するときは、違いに注意してください。</target>
        </trans-unit>
        <trans-unit id="748abfca6b1790f0685eea195232448ad41a5fc1" translate="yes" xml:space="preserve">
          <source>The TZ Database name of the desired time zone</source>
          <target state="translated">希望するタイムゾーンのTZデータベース名</target>
        </trans-unit>
        <trans-unit id="132cc31d74b99e25b094510d883e3a16e5485de5" translate="yes" xml:space="preserve">
          <source>The TZ Database name of the desired time zone.</source>
          <target state="translated">希望するタイムゾーンのTZデータベース名。</target>
        </trans-unit>
        <trans-unit id="00d89e73108126666266d03f62559f8c79154621" translate="yes" xml:space="preserve">
          <source>The Tag at the start of the element being parsed. You can read this to determine the tag's name and attributes.</source>
          <target state="translated">解析される要素の先頭にあるタグ。これを読むことで、タグの名前や属性を判断することができます。</target>
        </trans-unit>
        <trans-unit id="3bca6c83fc63fdf211790976e397694f0843b940" translate="yes" xml:space="preserve">
          <source>The Throwable hierarchy uses a toString overload that takes a sink delegate to avoid GC allocations, which cannot be performed in certain error situations. Override this &lt;code&gt; toString&lt;/code&gt; method to customize the error message.</source>
          <target state="translated">Throwable階層は、シンクデリゲートをとるtoStringオーバーロードを使用して、特定のエラー状況では実行できないGC割り当てを回避します。この &lt;code&gt; toString&lt;/code&gt; メソッドをオーバーライドして、エラーメッセージをカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="3c9d356da0ae96a0d8c3d76a7a7ffe030a9facc8" translate="yes" xml:space="preserve">
          <source>The TickDuration to convert</source>
          <target state="translated">変換するTickDuration</target>
        </trans-unit>
        <trans-unit id="9077c94c094dacf17fb2adfb8e0611d26cac59ad" translate="yes" xml:space="preserve">
          <source>The Tid of the thread for which this limit should be set.</source>
          <target state="translated">このリミットを設定すべきスレッドのTid。</target>
        </trans-unit>
        <trans-unit id="273ec04a5b49ef584d98bd13fd62b3b6a4d686b4" translate="yes" xml:space="preserve">
          <source>The TransitiveVisitor implements the AST traversal logic for all AST nodes.</source>
          <target state="translated">TransitiveVisitorは、すべてのASTノードに対してAST探索ロジックを実装します。</target>
        </trans-unit>
        <trans-unit id="375aa2306db2f0ad24248c06c7fd81f749f9b2fc" translate="yes" xml:space="preserve">
          <source>The Transport: header to use in RTSP requests</source>
          <target state="translated">RTSP リクエストで使用する Transport:ヘッダ</target>
        </trans-unit>
        <trans-unit id="1e2dcc313af4acaeeb4cf0d38aa3925c59b78d65" translate="yes" xml:space="preserve">
          <source>The TypeInfo instance for the object that failed finalization.</source>
          <target state="translated">最終化に失敗したオブジェクトの TypeInfo インスタンス。</target>
        </trans-unit>
        <trans-unit id="e267c9583ddc10478f4a6152d7e5f3bb902c9328" translate="yes" xml:space="preserve">
          <source>The URL to specify the location of the resource.</source>
          <target state="translated">リソースの場所を指定するURLです。</target>
        </trans-unit>
        <trans-unit id="6e8939f6e58f5cd6da0eecfd60bdd7601fb2d72d" translate="yes" xml:space="preserve">
          <source>The UTC time for which to get the offset from UTC for this time zone.</source>
          <target state="translated">このタイムゾーンのUTCからのオフセットを取得するためのUTC時間。</target>
        </trans-unit>
        <trans-unit id="baa72debfc3513a96e5ab531e18bfe7afe12a6e6" translate="yes" xml:space="preserve">
          <source>The UTC time that needs to be adjusted to this time zone's time.</source>
          <target state="translated">このタイムゾーンの時間に合わせる必要があるUTC時間。</target>
        </trans-unit>
        <trans-unit id="f66b265ec18c3d9162f9d2f9c326e937acb66094" translate="yes" xml:space="preserve">
          <source>The UTC time that needs to be checked for DST in this time zone.</source>
          <target state="translated">この時間帯のDSTをチェックする必要があるUTC時間。</target>
        </trans-unit>
        <trans-unit id="d87edef215a8752e6ecf907380fee61fdf55f0b6" translate="yes" xml:space="preserve">
          <source>The Unicode Standard specifies four normalization forms. Informally, two of these forms are defined by maximal decomposition of equivalent sequences, and two of these forms are defined by maximal</source>
          <target state="translated">Unicode標準では、4つの正規化形式が規定されています。非公式には、これらの形式のうち2つは等価配列の最大分解によって定義され、これらの形式のうち2つは最大</target>
        </trans-unit>
        <trans-unit id="33f138b95a9dfb5155c8e0a90293fab0aba64c92" translate="yes" xml:space="preserve">
          <source>The Unicode code space is the range of code points [0x000000,0x10FFFF] except the UTF-16 surrogate pairs in the range [0xD800,0xDFFF]</source>
          <target state="translated">Unicode コード空間は、コードポイントの範囲 [0x000000,0x10FFFF]であり、UTF-16 サロゲートペアの範囲 [0xD800,0xDFFF]を除きます。</target>
        </trans-unit>
        <trans-unit id="b8ad7131caaca8a595f3745023534a437f4e5026" translate="yes" xml:space="preserve">
          <source>The Unicode standard describes a set of algorithms that depend on having the ability to quickly look up various properties of a code point. Given the the codespace of about 1 million &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt;, it is not a trivial task to provide a space-efficient solution for the multitude of properties.</source>
          <target state="translated">Unicode標準は、コードポイントのさまざまなプロパティをすばやく検索する機能に依存する一連のアルゴリズムについて説明しています。約100万の&lt;a href=&quot;#Code%20point&quot;&gt;コードポイントのコード&lt;/a&gt;スペースを考えると、多数のプロパティに対してスペース効率の良いソリューションを提供することは簡単な作業ではありません。</target>
        </trans-unit>
        <trans-unit id="632f1d4d9869b7133b4ab86d451bf673c847817f" translate="yes" xml:space="preserve">
          <source>The WebAssembly System Interface</source>
          <target state="translated">WebAssemblyシステムのインターフェース</target>
        </trans-unit>
        <trans-unit id="ffe88cf3bb8bf5313b7bf6ff81667f38d4331b4a" translate="yes" xml:space="preserve">
          <source>The WebAssembly virtual ISA (instruction set architecture), 32-bit</source>
          <target state="translated">WebAssembly仮想ISA(命令セットアーキテクチャ)、32ビット</target>
        </trans-unit>
        <trans-unit id="7218859784e706d4ce7421f54be346d3a0c8a1e1" translate="yes" xml:space="preserve">
          <source>The Windows convention is distinct from the C convention only on Win32 platforms, where it is equivalent to the &lt;a href=&quot;https://en.wikipedia.org/wiki/X86_calling_conventions&quot;&gt;stdcall&lt;/a&gt; convention.</source>
          <target state="translated">Windowsの規則は、Win32プラットフォームでのみCの規則とは異なり、&lt;a href=&quot;https://en.wikipedia.org/wiki/X86_calling_conventions&quot;&gt;stdcallの&lt;/a&gt;規則と同等です。</target>
        </trans-unit>
        <trans-unit id="49f93641b1c1925cc9dd3d11b2fd5da7bb48b174" translate="yes" xml:space="preserve">
          <source>The Windows directory.</source>
          <target state="translated">Windowsディレクトリ。</target>
        </trans-unit>
        <trans-unit id="c2f11ed3900be0870fe44d5da590840874b32a51" translate="yes" xml:space="preserve">
          <source>The Xth day of the Gregorian Calendar that the constructed &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; will be for.</source>
          <target state="translated">作成された&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;となるグレゴリオ暦のX日目。</target>
        </trans-unit>
        <trans-unit id="078b1c7105fbdd3c92634660aca6a999419f2df5" translate="yes" xml:space="preserve">
          <source>The Xth day of the Gregorian Calendar that this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;が存在するグレゴリオ暦のX日目。</target>
        </trans-unit>
        <trans-unit id="6a538d97dc5e4f2c73e76335c5f71bdb3a58dff3" translate="yes" xml:space="preserve">
          <source>The Xth day of the Gregorian Calendar that this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が存在するグレゴリオ暦のX日目。</target>
        </trans-unit>
        <trans-unit id="35dba2f96bb894868d65591da08ba057a166fba5" translate="yes" xml:space="preserve">
          <source>The Xth day of the Gregorian Calendar that this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is on. Setting this property does not affect the time portion of &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が存在するグレゴリオ暦のX日目。このプロパティを設定しても、&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; の&lt;/a&gt;時刻部分には影響しません。</target>
        </trans-unit>
        <trans-unit id="fc06a78f3518f5838e5230bd6dc9922cf974ff7b" translate="yes" xml:space="preserve">
          <source>The Xth day of the Gregorian Calendar that this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;が存在するグレゴリオ暦のX日目。</target>
        </trans-unit>
        <trans-unit id="4075f06941052a1ee790fc11b1f2d7e20edf61db" translate="yes" xml:space="preserve">
          <source>The Xth day of the Gregorian Calendar that this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; is on. Setting this property does not affect the time portion of &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;が存在するグレゴリオ暦のX日目。このプロパティを設定しても、&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; の&lt;/a&gt;時間部分には影響しません。</target>
        </trans-unit>
        <trans-unit id="ad98437030654ff114036805bc5d6ac8a441a5fb" translate="yes" xml:space="preserve">
          <source>The [] is shorthand for a slice of the entire array. For example, the assignments to b:</source>
          <target state="translated">[]は配列全体のスライスを表す略記法です。例えば、bへの代入は</target>
        </trans-unit>
        <trans-unit id="9b28a421f1b16c658e8f7a2c5614f59f19a2b533" translate="yes" xml:space="preserve">
          <source>The abbreviation for the time zone during DST.</source>
          <target state="translated">DST中の時間帯の略。</target>
        </trans-unit>
        <trans-unit id="0c94ff584e3706234c838771e26f1f43c96e3d6d" translate="yes" xml:space="preserve">
          <source>The abbreviation for the time zone during std time.</source>
          <target state="translated">標準時の時間帯の略。</target>
        </trans-unit>
        <trans-unit id="0a6c7a99e42d574e059c43a16588f2b20bec46f2" translate="yes" xml:space="preserve">
          <source>The ability to cast away immutable-correctness is necessary in some cases where the static typing is incorrect and not fixable, such as when referencing code in a library one cannot change. Casting is, as always, a blunt and effective instrument, and when using it to cast away immutable-correctness, one must assume the responsibility to ensure the immutability of the data, as the compiler will no longer be able to statically do so.</source>
          <target state="translated">不変性をキャストする機能は、ライブラリ内のコードを参照していて変更できない場合など、静的な型付けが不正確で修正できない場合に必要になります。キャストはいつものように、鈍くて効果的な道具です。キャストを使って不変性を排除する場合は、コンパイラが静的にできなくなるので、データの不変性を保証する責任を負わなければなりません。</target>
        </trans-unit>
        <trans-unit id="a174b7c1633f2b2750afdacf56529479a613162e" translate="yes" xml:space="preserve">
          <source>The above allocation can also be written as:</source>
          <target state="translated">上記の割り当ては、次のようにも書くことができます。</target>
        </trans-unit>
        <trans-unit id="680ec1f70249732d24260b5f89033a1cd3b8827b" translate="yes" xml:space="preserve">
          <source>The above outputs something along the lines of:</source>
          <target state="translated">のようなものを出力します。</target>
        </trans-unit>
        <trans-unit id="0d7dd549d6036f484842f3fd47adff55e907a5d5" translate="yes" xml:space="preserve">
          <source>The above will generate the following documentation:</source>
          <target state="translated">以上で以下のようなドキュメントが生成されます。</target>
        </trans-unit>
        <trans-unit id="4bf0047ab0e970e724128a48338bb914be2e1061" translate="yes" xml:space="preserve">
          <source>The above would generate the following output:</source>
          <target state="translated">上記の場合、以下のような出力が発生します。</target>
        </trans-unit>
        <trans-unit id="208ff0335cf2cb5e612c95ae6f246572f3c94853" translate="yes" xml:space="preserve">
          <source>The absence of a read method means that the property is write-only. The absence of a write method means that the property is read-only. Multiple write methods can exist; the correct one is selected using the usual function overloading rules.</source>
          <target state="translated">readメソッドがないということは、そのプロパティがwrite-onlyであることを意味します。書き込みメソッドがない場合は、そのプロパティが読み取り専用であることを意味します。複数の書き込みメソッドが存在する可能性があり、通常の関数のオーバーロード・ルールを使用して正しいものが選択されます。</target>
        </trans-unit>
        <trans-unit id="bbd1050f43721b458863affe5a5a5e861a667b8a" translate="yes" xml:space="preserve">
          <source>The absolute value (or modulus) of &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;z&lt;/code&gt; の絶対値（または係数）。</target>
        </trans-unit>
        <trans-unit id="fe0c6e37bd2f8400a5d77c17be3e831a3fea0f03" translate="yes" xml:space="preserve">
          <source>The absolute value of the number. If floating-point or integral, the return type will be the same as the input.</source>
          <target state="translated">数値の絶対値。浮動小数点または積分の場合、戻り値の型は入力と同じになります。</target>
        </trans-unit>
        <trans-unit id="d56c6a5e3d224c87e43181c1736dec49b0ab78e1" translate="yes" xml:space="preserve">
          <source>The absolute value of the number. If floating-point or integral, the return type will be the same as the input;</source>
          <target state="translated">数値の絶対値。浮動小数点または積分の場合、戻り値の型は入力と同じになります。</target>
        </trans-unit>
        <trans-unit id="3188af20fea3638f7caeebf06aec7601348a4f70" translate="yes" xml:space="preserve">
          <source>The absolute value of x.</source>
          <target state="translated">xの絶対値。</target>
        </trans-unit>
        <trans-unit id="9f934ce1770ad6d4aa496d65f6bc75a1edc1d979" translate="yes" xml:space="preserve">
          <source>The abstract characters encoded (see Encoded character) are known as Unicode abstract characters.</source>
          <target state="translated">エンコードされた抽象文字(「エンコードされた文字」を参照)は、ユニコード抽象文字として知られています。</target>
        </trans-unit>
        <trans-unit id="6c9de70b08239cfc0c4a2733279e0d13dac73829" translate="yes" xml:space="preserve">
          <source>The accepted formats for time zone offsets are +HH, -HH, +HH:MM, and -HH:MM.</source>
          <target state="translated">タイムゾーンオフセットのフォーマットは、+HHH、-HHH、+HH:MM、-HH:MMです。</target>
        </trans-unit>
        <trans-unit id="dd25098e5d82952dd16830d9163303d08a3443ae" translate="yes" xml:space="preserve">
          <source>The accepted formats for time zone offsets are +HH, -HH, +HHMM, and -HHMM.</source>
          <target state="translated">タイムゾーンオフセットのフォーマットは、+HH、-HH、+HHMM、-HHMMです。</target>
        </trans-unit>
        <trans-unit id="2d7573dbe1c2c2ccc6dca31634fec877c6b4f215" translate="yes" xml:space="preserve">
          <source>The accumulated result as a single value for single function and as a tuple of values for multiple functions</source>
          <target state="translated">1つの関数の1つの値としての累積結果と、複数の関数の値のタプルとしての累積結果</target>
        </trans-unit>
        <trans-unit id="4db4cabffe5c361c6e601148a12482be66dbf628" translate="yes" xml:space="preserve">
          <source>The actual format specifier, &lt;code&gt;'s'&lt;/code&gt; by default.</source>
          <target state="translated">実際のフォーマット指定子、デフォルトでは &lt;code&gt;'s'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f5f83ea5a9cae8cf7d4f8c99a06116a8136c6d2a" translate="yes" xml:space="preserve">
          <source>The actual number of bytes reserved or zero on error.</source>
          <target state="translated">実際に予約されているバイト数、またはエラー時にゼロ。</target>
        </trans-unit>
        <trans-unit id="c94429a916344c916935b70d1849630909c5126c" translate="yes" xml:space="preserve">
          <source>The actual type returned by finish depends on the digest implementation. &lt;code&gt;ubyte[16]&lt;/code&gt; is just used as an example. It is guaranteed that the type is a static array of ubytes.</source>
          <target state="translated">finishが返す実際の型は、ダイジェストの実装によって異なります。 &lt;code&gt;ubyte[16]&lt;/code&gt; は単なる例として使用されています。タイプがubytesの静的配列であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="f965eddb5678c40e85f299ebf4bff7ff25ff635d" translate="yes" xml:space="preserve">
          <source>The additional letterCase parameter can be used to specify the case of the output data. By default the output is in upper case. To change it to the lower case pass LetterCase.lower as a parameter.</source>
          <target state="translated">追加のletterCaseパラメータを使用して、出力データの大文字小文字を指定することができます。デフォルトでは、出力は大文字になっています。小文字に変更するには、LetterCase.lowerをパラメータとして渡します。</target>
        </trans-unit>
        <trans-unit id="a85f612c9ea70b654d6d0689b427262b594b828d" translate="yes" xml:space="preserve">
          <source>The additional order parameter can be used to specify the order of the input data. By default the data is processed in increasing order, starting at index 0. To process it in the opposite order, pass Order.decreasing as a parameter.</source>
          <target state="translated">追加の order パラメータを使用して、入力データの順序を指定することができます。デフォルトでは、データはインデックス0から順に処理されます。逆の順序で処理するには、パラメータとして Order.decrease を渡します。</target>
        </trans-unit>
        <trans-unit id="5957f81d5474beefa7065939b0cc1473131ad62e" translate="yes" xml:space="preserve">
          <source>The address cannot end with a backslash</source>
          <target state="translated">アドレスの末尾にバックスラッシュを付けることはできません。</target>
        </trans-unit>
        <trans-unit id="884473b76201e4868789c53f5ad5333ae6e63e04" translate="yes" xml:space="preserve">
          <source>The address contains a character that is not allowed in a quoted pair</source>
          <target state="translated">アドレスには、引用符で囲まれたペアでは使用できない文字が含まれています。</target>
        </trans-unit>
        <trans-unit id="8c9a5ff6c7f32f248ada10269768a9f567d3a6d9" translate="yes" xml:space="preserve">
          <source>The address is only valid according to the broad definition of RFC 5322. It is otherwise invalid</source>
          <target state="translated">このアドレスはRFC 5322の広い定義に従ってのみ有効です。それ以外の場合は無効です。</target>
        </trans-unit>
        <trans-unit id="612f02a9ea5a91c0f5d3bab0d248e35b8e08d288" translate="yes" xml:space="preserve">
          <source>The address may not contain consecutive dots</source>
          <target state="translated">アドレスには連続したドットが含まれていない場合があります。</target>
        </trans-unit>
        <trans-unit id="f2ec315916ee72c713d94760053a490c4200261c" translate="yes" xml:space="preserve">
          <source>The address of the destination variable.</source>
          <target state="translated">宛先変数のアドレスです。</target>
        </trans-unit>
        <trans-unit id="eb5d226a327a58219779ec6f85c14805039c0902" translate="yes" xml:space="preserve">
          <source>The address of the stack bottom.</source>
          <target state="translated">スタックボトムのアドレスです。</target>
        </trans-unit>
        <trans-unit id="6d486d434e5db9fa409133a5d2911ad3ba926ad2" translate="yes" xml:space="preserve">
          <source>The address of the stack top.</source>
          <target state="translated">スタックトップのアドレスです。</target>
        </trans-unit>
        <trans-unit id="573e0fdfafaaaa6327f4d3ad798c62e0ac496505" translate="yes" xml:space="preserve">
          <source>The address of the value to compare, and receives the prior value of &lt;code&gt;here&lt;/code&gt; as output.</source>
          <target state="translated">比較する値のアドレス。 &lt;code&gt;here&lt;/code&gt; の以前の値を出力として受け取ります。</target>
        </trans-unit>
        <trans-unit id="100ae837312c2864dadfce5bae741844606a1fdc" translate="yes" xml:space="preserve">
          <source>The aggregate it is a member of, or null.</source>
          <target state="translated">それがメンバーである集合体、または null。</target>
        </trans-unit>
        <trans-unit id="99842dfccac0d88c0dc49fd2be32200c326ae7be" translate="yes" xml:space="preserve">
          <source>The aggregate itself must not be resized, reallocated, free'd, reassigned or destructed while the foreach is iterating over the elements.</source>
          <target state="translated">foreachが要素を繰り返し処理している間は、集合体自体のサイズ変更、再割り当て、解放、再割り当て、破棄を行ってはいけません。</target>
        </trans-unit>
        <trans-unit id="6dd852d4a388be331d9744743f8822707966e7c3" translate="yes" xml:space="preserve">
          <source>The aggregate must be loop invariant, meaning that elements to the aggregate cannot be added or removed from it in the &lt;a href=&quot;#NoScopeNonEmptyStatement&quot;&gt;&lt;i&gt;NoScopeNonEmptyStatement&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">集計はループ不変である必要があります。つまり、集計の要素を&lt;a href=&quot;#NoScopeNonEmptyStatement&quot;&gt;&lt;i&gt;NoScopeNonEmptyStatement&lt;/i&gt;&lt;/a&gt;で追加または削除することはできません。</target>
        </trans-unit>
        <trans-unit id="72fbef103c621727ad68ac10218864ed5c7ca8cf" translate="yes" xml:space="preserve">
          <source>The aggregate type or module to search</source>
          <target state="translated">検索する集約タイプまたはモジュール</target>
        </trans-unit>
        <trans-unit id="a40360593993a6e7d8a1dd4dee1078680e89ae6d" translate="yes" xml:space="preserve">
          <source>The aggregate type to search</source>
          <target state="translated">検索する集約型</target>
        </trans-unit>
        <trans-unit id="be4d7abfbf6a487ccbcd0c016363e65c1e7e3e7f" translate="yes" xml:space="preserve">
          <source>The aggregate/range bounds are evaluated at compile time and turned into a sequence of compile-time entities by evaluating corresponding code with a &lt;a href=&quot;statement#ForeachStatement&quot;&gt;&lt;i&gt;ForeachStatement&lt;/i&gt;&lt;/a&gt;/&lt;a href=&quot;statement#ForeachRangeStatement&quot;&gt;&lt;i&gt;ForeachRangeStatement&lt;/i&gt;&lt;/a&gt; at compile time. The body of the &lt;code&gt;static foreach&lt;/code&gt; is then copied a number of times that corresponds to the number of elements of the sequence. Within the i-th copy, the name of the &lt;code&gt;static foreach&lt;/code&gt; variable is bound to the i-th entry of the sequence, either as an &lt;code&gt;enum&lt;/code&gt; variable declaration (for constants) or an &lt;code&gt;alias&lt;/code&gt; declaration (for symbols). (In particular, &lt;code&gt;static foreach&lt;/code&gt; variables are never runtime variables.)</source>
          <target state="translated">集計/範囲の境界はコンパイル時に評価され、コンパイル時に&lt;a href=&quot;statement#ForeachStatement&quot;&gt;&lt;i&gt;ForeachStatement&lt;/i&gt;&lt;/a&gt; / &lt;a href=&quot;statement#ForeachRangeStatement&quot;&gt;&lt;i&gt;ForeachRangeStatement&lt;/i&gt;&lt;/a&gt;で対応するコードを評価することにより、一連のコンパイル時エンティティに&lt;i&gt;変換さ&lt;/i&gt;れます。次に、 &lt;code&gt;static foreach&lt;/code&gt; の本体が、シーケンスの要素の数に対応する回数コピーされます。 i番目のコピー内で、 &lt;code&gt;static foreach&lt;/code&gt; 変数の名前は、 &lt;code&gt;enum&lt;/code&gt; 変数宣言（定数の場合）または &lt;code&gt;alias&lt;/code&gt; 宣言（シンボルの場合）として、シーケンスのi番目のエントリにバインドされます。 （特に、 &lt;code&gt;static foreach&lt;/code&gt; 変数は実行時変数ではありません。）</target>
        </trans-unit>
        <trans-unit id="7524e87df0e2bd2478aea3589a41e1a028d60509" translate="yes" xml:space="preserve">
          <source>The algorithm was designed by Hans Dobbertin, Antoon Bosselaers, and Bart Preneel.</source>
          <target state="translated">アルゴリズムは、ハンス・ドベルタン、アントーン・ボッセラース、バート・プレニールによって設計された。</target>
        </trans-unit>
        <trans-unit id="4c2bfa97d67b17e650534b7eef10e7ad4c0bcc79" translate="yes" xml:space="preserve">
          <source>The algorithm works as follows:</source>
          <target state="translated">アルゴリズムは次のように動作します。</target>
        </trans-unit>
        <trans-unit id="48a9b12ecf15252f0b5157732b6ca9173b4931d2" translate="yes" xml:space="preserve">
          <source>The aliases are:</source>
          <target state="translated">別名は</target>
        </trans-unit>
        <trans-unit id="81631da16100dd8478c92e814bda7bbba00ac288" translate="yes" xml:space="preserve">
          <source>The aliases following this template create the public names of the log functions.</source>
          <target state="translated">このテンプレートに続くエイリアスは、ログ関数の公開名を作成します。</target>
        </trans-unit>
        <trans-unit id="bcbe81e1130e17fc3109bc8509350a184b24f288" translate="yes" xml:space="preserve">
          <source>The aliases following this template create the public names of these log functions.</source>
          <target state="translated">このテンプレートに続くエイリアスは、これらのログ関数の公開名を作成します。</target>
        </trans-unit>
        <trans-unit id="c567df7009dd19d930ebcb716790130e92399528" translate="yes" xml:space="preserve">
          <source>The alignment for the fields of an aggregate does not affect the alignment of the aggregate itself - that is affected by the alignment setting outside of the aggregate.</source>
          <target state="translated">アグリゲートのフィールドのアラインメントは、アグリゲート自体のアラインメントには影響しません。</target>
        </trans-unit>
        <trans-unit id="f093103ea9ccde93c26257d52a8ebe06d2563d51" translate="yes" xml:space="preserve">
          <source>The alignment is a static constant equal to &lt;code&gt;platformAlignment&lt;/code&gt;, which ensures proper alignment for any D data type.</source>
          <target state="translated">配置は、 &lt;code&gt;platformAlignment&lt;/code&gt; と等しい静的定数であり、これにより、すべてのDデータ型に対して適切な配置が保証されます。</target>
        </trans-unit>
        <trans-unit id="15ebd1ca8e45d31f001b9c11ace8a2913c42cd0b" translate="yes" xml:space="preserve">
          <source>The alignment offered is the minimum of the two allocators' alignment.</source>
          <target state="translated">提供されるアライメントは、2つのアロケータのアライメントの最小値である。</target>
        </trans-unit>
        <trans-unit id="98d787b597dca14b1cd2aa32405fb6769c33f39f" translate="yes" xml:space="preserve">
          <source>The alignment offered is the same as &lt;code&gt;Allocator.alignment&lt;/code&gt;.</source>
          <target state="translated">提供される配置は、 &lt;code&gt;Allocator.alignment&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="2d9bcfc1fe50fa247260c84039c4e52f5cc8339c" translate="yes" xml:space="preserve">
          <source>The alignment offered is user-configurable statically through parameter &lt;code&gt;theAlignment&lt;/code&gt;, defaulted to &lt;code&gt;platformAlignment&lt;/code&gt;.</source>
          <target state="translated">提供される配置は、デフォルトで &lt;code&gt;platformAlignment&lt;/code&gt; に設定されているパラメータ &lt;code&gt;theAlignment&lt;/code&gt; を介して静的にユーザー設定可能です。</target>
        </trans-unit>
        <trans-unit id="55ae38068c659d6482341d5f2a9544d2084b247f" translate="yes" xml:space="preserve">
          <source>The alignment offered.</source>
          <target state="translated">提供されたアライメント。</target>
        </trans-unit>
        <trans-unit id="0f037bbde370840fb51ae0cd55e297a5ad94c4c1" translate="yes" xml:space="preserve">
          <source>The alignment that is guaranteed to accommodate any D object allocation on the current platform.</source>
          <target state="translated">現在のプラットフォーム上の任意のDオブジェクトの割り当てに対応することが保証されているアライメント。</target>
        </trans-unit>
        <trans-unit id="ffaeeba22bc74fcd6590cff49e1181655746149d" translate="yes" xml:space="preserve">
          <source>The allocated block looks like this for blocks &amp;lt; PAGESIZE:</source>
          <target state="translated">割り当てられたブロックは、ブロック&amp;lt;PAGESIZEの場合、次のようになります。</target>
        </trans-unit>
        <trans-unit id="1e6e16df97f3afd43394873bd1850208370d0247" translate="yes" xml:space="preserve">
          <source>The allocated block, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">割り当てられたブロック、または &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d585ec1807a2dc496ab963634c47b6fc38f63ce" translate="yes" xml:space="preserve">
          <source>The allocated memory is aligned to the specified alignment &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">割り当てられたメモリは、指定された配置 &lt;code&gt;a&lt;/code&gt; に配置されます。</target>
        </trans-unit>
        <trans-unit id="26fd1cc82ed45b7bca2ff3a406ac59e252c10871" translate="yes" xml:space="preserve">
          <source>The allocator used for getting the needed memory. It may be an object implementing the static interface for allocators, or an &lt;code&gt;IAllocator&lt;/code&gt; reference.</source>
          <target state="translated">必要なメモリを取得するために使用されるアロケータ。アロケータの静的インターフェイスを実装するオブジェクト、または &lt;code&gt;IAllocator&lt;/code&gt; 参照の場合があります。</target>
        </trans-unit>
        <trans-unit id="7a162642b55adf8c70cb72e78e6a91ca645573ee" translate="yes" xml:space="preserve">
          <source>The amount of time (as a &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;) that it took to call each function &lt;code&gt;n&lt;/code&gt; times. The first value is the length of time that it took to call &lt;code&gt;fun[0]&lt;/code&gt;&lt;code&gt;n&lt;/code&gt; times. The second value is the length of time it took to call &lt;code&gt;fun[1]&lt;/code&gt;&lt;code&gt;n&lt;/code&gt; times. Etc.</source>
          <target state="translated">各関数を &lt;code&gt;n&lt;/code&gt; 回呼び出すのにかかった時間（&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;として）。最初の値は、 &lt;code&gt;fun[0]&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; 回呼び出すのにかかった時間の長さです。 2番目の値は、 &lt;code&gt;fun[1]&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; 回呼び出すのにかかった時間の長さです。等。</target>
        </trans-unit>
        <trans-unit id="679e02f2df98ca53eb58d9358d749fc6899efa4f" translate="yes" xml:space="preserve">
          <source>The amount of time (as a &lt;a href=&quot;core_time#TickDuration&quot;&gt;&lt;code&gt;core.time.TickDuration&lt;/code&gt;&lt;/a&gt;) that it took to call each function &lt;code&gt;n&lt;/code&gt; times. The first value is the length of time that it took to call &lt;code&gt;fun[0]&lt;/code&gt;&lt;code&gt;n&lt;/code&gt; times. The second value is the length of time it took to call &lt;code&gt;fun[1]&lt;/code&gt;&lt;code&gt;n&lt;/code&gt; times. Etc.  Note that casting the TickDurations to &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;s will make the results easier to deal with (and it may change in the future that benchmark will return an array of Durations rather than TickDurations).</source>
          <target state="translated">各関数を &lt;code&gt;n&lt;/code&gt; 回呼び出すのにかかった時間（&lt;a href=&quot;core_time#TickDuration&quot;&gt; &lt;code&gt;core.time.TickDuration&lt;/code&gt; &lt;/a&gt;として）。最初の値は、 &lt;code&gt;fun[0]&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; 回呼び出すのにかかった時間の長さです。2番目の値は、 &lt;code&gt;fun[1]&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; 回呼び出すのにかかった時間の長さです。その他TickDurationsを&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; に&lt;/a&gt;キャストすると、結果の処理が簡単になることに注意してください（将来、ベンチマークがTickDurationsではなくDurationの配列を返すようになる可能性があります）。</target>
        </trans-unit>
        <trans-unit id="5f2ab544dd26a15cec91af6687d533c4df3410af" translate="yes" xml:space="preserve">
          <source>The amount of time the offset from UTC is (negative is west of UTC, positive is east).</source>
          <target state="translated">UTCからのオフセットの時間量は(マイナスはUTCの西、プラスは東)。</target>
        </trans-unit>
        <trans-unit id="0de54a6c1586b1ff3ca3aeac336a823fab853f7c" translate="yes" xml:space="preserve">
          <source>The analysis assumes no exceptions are thrown.</source>
          <target state="translated">解析では例外が発生しないことを前提としています。</target>
        </trans-unit>
        <trans-unit id="e47e36cb20f66676952eedf4d640b1eab6c9c3bb" translate="yes" xml:space="preserve">
          <source>The archive comment. Must be less than 65536 bytes in length.</source>
          <target state="translated">アーカイブのコメント。長さ65536バイト以下でなければなりません。</target>
        </trans-unit>
        <trans-unit id="6ca92b99392b2201548ac94076929186c2729bd5" translate="yes" xml:space="preserve">
          <source>The argument</source>
          <target state="translated">引数</target>
        </trans-unit>
        <trans-unit id="95ad1044a61a4a355c884ad9c8beb68fea8cbf9e" translate="yes" xml:space="preserve">
          <source>The argument (or phase) of &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;z&lt;/code&gt; の引数（またはフェーズ）。</target>
        </trans-unit>
        <trans-unit id="c58aecc00ef7e3c30bc80ddf70bce576b8c7b76a" translate="yes" xml:space="preserve">
          <source>The argument count.</source>
          <target state="translated">引数の数です。</target>
        </trans-unit>
        <trans-unit id="d38f16231ac42e003a0a7d9c3c817f7a78c027ca" translate="yes" xml:space="preserve">
          <source>The argument is a symbol. The result is a string giving its protection level: &quot;public&quot;, &quot;private&quot;, &quot;protected&quot;, &quot;export&quot;, or &quot;package&quot;.</source>
          <target state="translated">引数はシンボルです。結果は、その保護レベルを示す文字列です。&quot;public&quot;、&quot;private&quot;、&quot;protected&quot;、&quot;export&quot;、または &quot;package&quot;。</target>
        </trans-unit>
        <trans-unit id="f839ff49cca61a7255e899d71e5de5d86a208b6a" translate="yes" xml:space="preserve">
          <source>The argument is a symbol. The result is a tuple of strings, possibly empty, that correspond to the namespaces the symbol resides in.</source>
          <target state="translated">引数はシンボルです。結果は、シンボルが存在する名前空間に対応する文字列のタプル(おそらく空)です。</target>
        </trans-unit>
        <trans-unit id="ce7b440e5dab60852de91e6b031523ab897d0a94" translate="yes" xml:space="preserve">
          <source>The argument is a type. If it is a struct with a copy constructor, returns &lt;code&gt;true&lt;/code&gt;. Otherwise, return &lt;code&gt;false&lt;/code&gt;. Note that a copy constructor is distinct from a postblit.</source>
          <target state="translated">引数は型です。コピーコンストラクターを持つ構造体の場合、 &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は、 &lt;code&gt;false&lt;/code&gt; を返します。コピーコンストラクターはポストブリットとは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c52932bea1c79c41627f35fa183681937db58518" translate="yes" xml:space="preserve">
          <source>The argument is a type. If it is a struct with a postblit, returns &lt;code&gt;true&lt;/code&gt;. Otherwise, return &lt;code&gt;false&lt;/code&gt;. Note a postblit is distinct from a copy constructor.</source>
          <target state="translated">引数は型です。ポストブリットのある構造体の場合、 &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は、 &lt;code&gt;false&lt;/code&gt; を返します。ポストブリットはコピーコンストラクターとは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b7bee920123d48f748fd063723855b9cdf7fc70e" translate="yes" xml:space="preserve">
          <source>The argument is a type. The result is an array of &lt;code&gt;size_t&lt;/code&gt; describing the memory used by an instance of the given type.</source>
          <target state="translated">引数は型です。結果は、指定されたタイプのインスタンスによって使用されるメモリを説明する &lt;code&gt;size_t&lt;/code&gt; の配列です。</target>
        </trans-unit>
        <trans-unit id="b2ad70160d7b242b67aa98a2d5cf38772a405118" translate="yes" xml:space="preserve">
          <source>The argument must be an lvalue, which will be passed by reference and initialized upon function entry with the default value (&lt;code&gt;T.init&lt;/code&gt;) of its type</source>
          <target state="translated">引数は左辺値である必要があります。左辺値は参照によって渡され、関数の入力時にそのタイプのデフォルト値（ &lt;code&gt;T.init&lt;/code&gt; ）で初期化されます。</target>
        </trans-unit>
        <trans-unit id="46d2fa2d1e3a9c3efc618f0f297d3295d7b93652" translate="yes" xml:space="preserve">
          <source>The argument pointer type.</source>
          <target state="translated">引数ポインタの型。</target>
        </trans-unit>
        <trans-unit id="bd0d0e4c2f22549c04310e29901bafb6d89f2cbb" translate="yes" xml:space="preserve">
          <source>The argument to &lt;code&gt;dg&lt;/code&gt; is &lt;code&gt;scope&lt;/code&gt;. To keep the data around after &lt;code&gt;dg&lt;/code&gt; exits, one has to copy it.</source>
          <target state="translated">&lt;code&gt;dg&lt;/code&gt; の引数は &lt;code&gt;scope&lt;/code&gt; です。 &lt;code&gt;dg&lt;/code&gt; の終了後もデータを保持するには、データをコピーする必要があります。</target>
        </trans-unit>
        <trans-unit id="d6506a51a0d81317d36c0b3931580ed4ae34e0c1" translate="yes" xml:space="preserve">
          <source>The arguments as a C array of strings.</source>
          <target state="translated">引数を文字列のC配列として指定します。</target>
        </trans-unit>
        <trans-unit id="9a539cbbe8582d8d5d90be89210dc5f77ab9a858" translate="yes" xml:space="preserve">
          <source>The arguments supplied when this process was started.</source>
          <target state="translated">このプロセスが開始されたときに与えられた引数。</target>
        </trans-unit>
        <trans-unit id="afc42ff1b01f9fdceb0afc9990aeafdba8561cdc" translate="yes" xml:space="preserve">
          <source>The arguments the function was called with. Changes to &lt;code&gt;out&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt; arguments will be visible here.</source>
          <target state="translated">関数が呼び出された引数。 &lt;code&gt;out&lt;/code&gt; および &lt;code&gt;ref&lt;/code&gt; 引数への変更はここに表示されます。</target>
        </trans-unit>
        <trans-unit id="63025a0e656a03617731632fd0d058123f82e206" translate="yes" xml:space="preserve">
          <source>The array generated by &lt;code&gt;makeTransTable&lt;/code&gt; is &lt;code&gt;256&lt;/code&gt; elements long such that the index is equal to the ASCII character being replaced and the value is equal to the character that it's being replaced with. Note that translate does not decode any of the characters, so you can actually pass it Extended ASCII characters if you want to (ASCII only actually uses &lt;code&gt;128&lt;/code&gt; characters), but be warned that Extended ASCII characters are not valid Unicode and therefore will result in a &lt;code&gt;UTFException&lt;/code&gt; being thrown from most other Phobos functions.</source>
          <target state="translated">&lt;code&gt;makeTransTable&lt;/code&gt; によって生成される配列は &lt;code&gt;256&lt;/code&gt; エレメント長であり、インデックスは置き換えられるASCII文字と等しく、値は置き換えられる文字と等しくなります。変換は文字をデコードしないため、必要に応じて実際に拡張ASCII文字を渡すことができます（ASCIIは実際には &lt;code&gt;128&lt;/code&gt; 文字のみを使用します）が、拡張ASCII文字は有効なUnicodeではないため、他のほとんどのPhobos関数から &lt;code&gt;UTFException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="1e36bd34216b4fb890e4b17cc00a08b3fe10bf73" translate="yes" xml:space="preserve">
          <source>The array indexing and slicing operators are overloaded by implementing the &lt;code&gt;opIndex&lt;/code&gt;, &lt;code&gt;opSlice&lt;/code&gt;, and &lt;code&gt;opDollar&lt;/code&gt; methods. These may be combined to implement multidimensional arrays.</source>
          <target state="translated">配列のインデックス付けとスライスの演算子は、 &lt;code&gt;opIndex&lt;/code&gt; 、 &lt;code&gt;opSlice&lt;/code&gt; 、および &lt;code&gt;opDollar&lt;/code&gt; メソッドを実装することによってオーバーロードされます。これらを組み合わせて、多次元配列を実装できます。</target>
        </trans-unit>
        <trans-unit id="1b2a7128d2d832c1302cb48d5006b21f210a2eeb" translate="yes" xml:space="preserve">
          <source>The array of &lt;code&gt;Statements&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if no flattening necessary</source>
          <target state="translated">配列 &lt;code&gt;Statements&lt;/code&gt; 、または &lt;code&gt;null&lt;/code&gt; ない平坦化必要に応じて</target>
        </trans-unit>
        <trans-unit id="45a797de9ee37043ed5d9c3044ead0d769c8dfec" translate="yes" xml:space="preserve">
          <source>The array of allocators is publicly available for e.g. initialization and inspection.</source>
          <target state="translated">アロケータの配列は、初期化や検査などのために公開されています。</target>
        </trans-unit>
        <trans-unit id="78465f24447e3c88a59d9835a9423a9e3ebd4f18" translate="yes" xml:space="preserve">
          <source>The array of bits to iterate over</source>
          <target state="translated">反復するビットの配列</target>
        </trans-unit>
        <trans-unit id="4ca952de23045dd7d8a84c57a2dc3a2d3b262893" translate="yes" xml:space="preserve">
          <source>The array that &lt;code&gt;stuff&lt;/code&gt; will be inserted into.</source>
          <target state="translated">&lt;code&gt;stuff&lt;/code&gt; が挿入される配列。</target>
        </trans-unit>
        <trans-unit id="4321c353e1c32d604816547a52f50f3db51eff04" translate="yes" xml:space="preserve">
          <source>The array to cast to immutable.</source>
          <target state="translated">不変体にキャストする配列。</target>
        </trans-unit>
        <trans-unit id="c1207d2a97f985ed8f1d6e838bce196b8c261949" translate="yes" xml:space="preserve">
          <source>The array to store the factorial number. The array is of size 21 as &lt;code&gt;ulong.max&lt;/code&gt; requires 21 digits in the factorial number system.</source>
          <target state="translated">階乗数を格納する配列。配列はサイズ21です &lt;code&gt;ulong.max&lt;/code&gt; は階乗数システムで21桁を必要とするためです。</target>
        </trans-unit>
        <trans-unit id="2e58d1006cb20d5f3840c703c981f56532e89433" translate="yes" xml:space="preserve">
          <source>The array type to simulate</source>
          <target state="translated">シミュレートする配列の型</target>
        </trans-unit>
        <trans-unit id="5eff91e039ba4d6d8d23f84bae72af3efca47e6c" translate="yes" xml:space="preserve">
          <source>The asm.js intermediate programming language</source>
          <target state="translated">中間的なプログラミング言語であるasm.js</target>
        </trans-unit>
        <trans-unit id="9e1495896a8171a6a847812d0360c297c1cf65a4" translate="yes" xml:space="preserve">
          <source>The assembled path.</source>
          <target state="translated">組み立てられたパス。</target>
        </trans-unit>
        <trans-unit id="1e2b85b82e92a3856a1e1c2b72d37fa265091420" translate="yes" xml:space="preserve">
          <source>The assertion is independent from -release, by abort()ing. Regular assertions throw an AssertError and thus require an initialized GC, which might not be the case (yet or anymore) for the startup/shutdown code in this package (called by CRT ctors/dtors etc.).</source>
          <target state="translated">アサーションは、abort()ing によって -release から独立しています。通常のアサーションは AssertError を投げるため、初期化された GC を必要としますが、これはこのパッケージのスタートアップ/シャットダウンコード (CRT ctors/dtors などによって呼び出される)の場合には (まだそうではないかもしれませんし、今はそうではないかもしれません)。</target>
        </trans-unit>
        <trans-unit id="dd468c6bd7b4f24fe4681661a1f4c1bf9f53f209" translate="yes" xml:space="preserve">
          <source>The assignment character used in options with parameters (default '=').</source>
          <target state="translated">パラメータを持つオプションで使用される代入文字(デフォルトは '=')。</target>
        </trans-unit>
        <trans-unit id="d1cc08d2be4a1f3b1bcdb0c1a5ad7e06c61f4a9a" translate="yes" xml:space="preserve">
          <source>The assignment operator &lt;code&gt;=&lt;/code&gt; can be overloaded if the left hand side is a struct aggregate, and &lt;code&gt;opAssign&lt;/code&gt; is a member function of that aggregate.</source>
          <target state="translated">代入演算子 &lt;code&gt;=&lt;/code&gt; は、左側が構造体集計であり、 &lt;code&gt;opAssign&lt;/code&gt; がその集計のメンバー関数である場合、オーバーロードされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="9ca96b2dca99020e1c9332c4a525410f5467c7f8" translate="yes" xml:space="preserve">
          <source>The associated Tid or Tid.init if name is not registered.</source>
          <target state="translated">名前が登録されていない場合は、関連するTidまたはTid.init。</target>
        </trans-unit>
        <trans-unit id="d2c138793e6130d41176963ee803d482cbf6ac55" translate="yes" xml:space="preserve">
          <source>The associative array to iterate over.</source>
          <target state="translated">反復処理を行う連想配列。</target>
        </trans-unit>
        <trans-unit id="3f8e903e0ceb75b15c10ccad54194376c61bbba7" translate="yes" xml:space="preserve">
          <source>The associative array.</source>
          <target state="translated">連想配列です。</target>
        </trans-unit>
        <trans-unit id="7878f31bd1a31b1a2cfd5e7a52ffdc7c9ecd24a9" translate="yes" xml:space="preserve">
          <source>The assumption is that &lt;code&gt;first&lt;/code&gt; comes before &lt;code&gt;second&lt;/code&gt; in the original text, usually meaning that the first is a starter.</source>
          <target state="translated">仮定は、 &lt;code&gt;first&lt;/code&gt; テキストが最初のテキストの &lt;code&gt;second&lt;/code&gt; 前に来るということです。通常、最初のテキストがスターターであることを意味します。</target>
        </trans-unit>
        <trans-unit id="61806db12d64abe42691b62a374e038f9ecaadda" translate="yes" xml:space="preserve">
          <source>The atomic module provides basic support for lock-free concurrent programming.</source>
          <target state="translated">atomic モジュールは、ロックのない並行プログラミングの基本的なサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="75eef2eb2a8bfe31e731a278f35f0ceb7c55d5e5" translate="yes" xml:space="preserve">
          <source>The attack happens as follows:</source>
          <target state="translated">攻撃は以下のように起こります。</target>
        </trans-unit>
        <trans-unit id="f7c54a735163e7d571809eeacaa1471999099ee3" translate="yes" xml:space="preserve">
          <source>The attribute can only be attached once to a method</source>
          <target state="translated">属性はメソッドに一度だけアタッチすることができます。</target>
        </trans-unit>
        <trans-unit id="be7f7827649a01848c8244186acaf8539a9b85f0" translate="yes" xml:space="preserve">
          <source>The attribute can only be attached to an &lt;code&gt;extern(C++)&lt;/code&gt; symbol (&lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, function, and their templated counterparts).</source>
          <target state="translated">この属性は、 &lt;code&gt;extern(C++)&lt;/code&gt; シンボル（ &lt;code&gt;struct&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; 、 &lt;code&gt;enum&lt;/code&gt; 、function、およびそれらのテンプレート化された対応物）にのみアタッチできます。</target>
        </trans-unit>
        <trans-unit id="79ccd1c77d9bb55894eeaf0ddb5f8bb5f1442f97" translate="yes" xml:space="preserve">
          <source>The attribute can only be attached to methods or constructors which have Objective-C linkage. That is, a method or a constructor in a class or interface declared as</source>
          <target state="translated">この属性は、Objective-C リンクを持つメソッドまたはコンストラクタにのみアタッチできます。つまり、以下のように宣言されたクラスまたはインターフェイスのメソッドまたはコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="9e6a8c7917aafe6dd89c5b3da037ce8ce791dcd0" translate="yes" xml:space="preserve">
          <source>The attribute can only be attached to methods with Objective-C linkage</source>
          <target state="translated">属性は、Objective-C リンケージを持つメソッドにのみアタッチできます。</target>
        </trans-unit>
        <trans-unit id="200c85ea31972c691820bf6057378a72c8b709b9" translate="yes" xml:space="preserve">
          <source>The attribute cannot be applied to C++ namespaces. This is to prevent confusion with the C++ semantic, which allows it to be applied to namespaces.</source>
          <target state="translated">この属性は、C++の名前空間には適用できません。これは、名前空間に適用できる C++セマンティックとの混同を防ぐためです。</target>
        </trans-unit>
        <trans-unit id="0cc4b73eb5ab20f789654491f3d1669a5a798998" translate="yes" xml:space="preserve">
          <source>The attribute cannot be attached to a template method</source>
          <target state="translated">属性をテンプレート・メソッドにアタッチすることはできません。</target>
        </trans-unit>
        <trans-unit id="c3e58f213e4368a17eae0f25fdb580af5f953648" translate="yes" xml:space="preserve">
          <source>The attribute is defined in druntime in &lt;a href=&quot;https://dlang.org/phobos/core_attribute.html&quot;&gt;&lt;code&gt;core.attribute&lt;/code&gt;&lt;/a&gt; and aliased in &lt;a href=&quot;https://dlang.org/phobos/object.html&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt;, meaning it will be implicitly imported. The attribute is only defined when the version identifier &lt;a href=&quot;#objc-version-identifier&quot;&gt;&lt;code&gt;D_ObjectiveC&lt;/code&gt;&lt;/a&gt; is enabled.</source>
          <target state="translated">属性は、core.attributeのdruntimeで定義され、&lt;a href=&quot;https://dlang.org/phobos/core_attribute.html&quot;&gt; &lt;code&gt;core.attribute&lt;/code&gt; &lt;/a&gt;でエイリアスされ&lt;a href=&quot;https://dlang.org/phobos/object.html&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt;。つまり、暗黙的にインポートされます。この属性は、バージョン識別子&lt;a href=&quot;#objc-version-identifier&quot;&gt; &lt;code&gt;D_ObjectiveC&lt;/code&gt; &lt;/a&gt;が有効な場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="1be7aa83910532921b956bd7ed61bdd6a250dfb0" translate="yes" xml:space="preserve">
          <source>The attribute is defined in druntime in &lt;a href=&quot;https://dlang.org/phobos/core_attribute.html&quot;&gt;&lt;code&gt;core.attribute&lt;/code&gt;&lt;/a&gt;. The attribute is only defined when the version identifier &lt;a href=&quot;#objc-version-identifier&quot;&gt;&lt;code&gt;D_ObjectiveC&lt;/code&gt;&lt;/a&gt; is enabled.</source>
          <target state="translated">属性はでdruntimeに定義されている&lt;a href=&quot;https://dlang.org/phobos/core_attribute.html&quot;&gt; &lt;code&gt;core.attribute&lt;/code&gt; &lt;/a&gt;。この属性は、バージョン識別子&lt;a href=&quot;#objc-version-identifier&quot;&gt; &lt;code&gt;D_ObjectiveC&lt;/code&gt; &lt;/a&gt;が有効になっている場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="96eac9336921a98926c132d1b4d9806462791d58" translate="yes" xml:space="preserve">
          <source>The attribute of the type name is not the same as the attribute of the variable:</source>
          <target state="translated">型名の属性と変数の属性は同じではありません。</target>
        </trans-unit>
        <trans-unit id="24cd99fe8bbe482a8a5a81e7f4b51e39455ae56f" translate="yes" xml:space="preserve">
          <source>The attributes (g, i, m, s and x accepted)</source>
          <target state="translated">属性(g,i,m,s,xが受け入れられた)</target>
        </trans-unit>
        <trans-unit id="4ee39b3b86f5106a3fdc7e1ea7775bb7c85ac176" translate="yes" xml:space="preserve">
          <source>The attributes of the &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; are applied where the default expression is used.</source>
          <target state="translated">&lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;の属性は、デフォルトの式が使用される場所に適用されます。</target>
        </trans-unit>
        <trans-unit id="06da5fd89d1e09344f5502c88832d0079ac5062c" translate="yes" xml:space="preserve">
          <source>The attributes of the file as a &lt;code&gt;uint&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;uint&lt;/code&gt; としてのファイルの属性。</target>
        </trans-unit>
        <trans-unit id="ab103bac227f27736507e49db9f68f7e1c3bdf17" translate="yes" xml:space="preserve">
          <source>The background thread will buffer up to transmitBuffers number of chunks before is stops receiving data from network. When the main thread reads the chunks from the range it frees up buffers and allows for the background thread to receive more data from the network.</source>
          <target state="translated">バックグラウンドスレッドは、ネットワークからのデータ受信を停止する前に、最大送信バッファ数までのチャンクをバッファリングします。メインスレッドが範囲からチャンクを読み込むと、バッファが解放され、バックグラウンドスレッドがネットワークからより多くのデータを受信できるようになります。</target>
        </trans-unit>
        <trans-unit id="2f49fc1ac2fa753eb385adebbde8c5e3739e3eb5" translate="yes" xml:space="preserve">
          <source>The background thread will buffer up to transmitBuffers number of lines before it stops receiving data from network. When the main thread reads the lines from the range it frees up buffers and allows for the background thread to receive more data from the network.</source>
          <target state="translated">バックグラウンドスレッドは、ネットワークからのデータ受信を停止する前に、最大ライン数の transmitBuffers までバッファリングします。メインスレッドが範囲内の行を読み込むと、バッファが解放され、バックグラウンドスレッドがネットワークからより多くのデータを受信できるようになります。</target>
        </trans-unit>
        <trans-unit id="df002316032ff2e092a1cc3a410d04df468eda1d" translate="yes" xml:space="preserve">
          <source>The backslash character is not treated specially inside &lt;a href=&quot;#Filespec&quot;&gt;&lt;i&gt;Filespec&lt;/i&gt;&lt;/a&gt; strings.</source>
          <target state="translated">バックスラッシュ文字は、&lt;a href=&quot;#Filespec&quot;&gt;&lt;i&gt;Filespec&lt;/i&gt;&lt;/a&gt;文字列内では特別に扱われません。</target>
        </trans-unit>
        <trans-unit id="a707c2f980ce4edb81a7e52be4d3486a20f75970" translate="yes" xml:space="preserve">
          <source>The barrier module provides a primitive for synchronizing the progress of a group of threads.</source>
          <target state="translated">バリアモジュールは、スレッドグループの進行状況を同期させるためのプリミティブを提供します。</target>
        </trans-unit>
        <trans-unit id="0f16b21bd145c48ee38391d193636c622ee32ed4" translate="yes" xml:space="preserve">
          <source>The base address of the memory block referenced by p or null on error.</source>
          <target state="translated">pによって参照されるメモリブロックのベースアドレス、エラーの場合はnull。</target>
        </trans-unit>
        <trans-unit id="202abe43b53a16dc33ac200ec72cb69c866674c7" translate="yes" xml:space="preserve">
          <source>The base class for exceptions thrown by this module</source>
          <target state="translated">このモジュールがスローする例外の基底クラス</target>
        </trans-unit>
        <trans-unit id="1a2d8f5221992ec16fa6b9228ee8706ba1b5f8a3" translate="yes" xml:space="preserve">
          <source>The base class of all AST nodes.</source>
          <target state="translated">すべてのASTノードの基底クラスです.</target>
        </trans-unit>
        <trans-unit id="2c62b6527d85866989d96fc04ef66293021bf4e4" translate="yes" xml:space="preserve">
          <source>The base class of all errors that are safe to catch and handle.</source>
          <target state="translated">キャッチしても安全に扱える全てのエラーの基底クラス。</target>
        </trans-unit>
        <trans-unit id="3d510f9f0a1f647c90ed3c0e84e9bc68e62fbef9" translate="yes" xml:space="preserve">
          <source>The base class of all thrown objects.</source>
          <target state="translated">すべてのスローされたオブジェクトの基底クラス。</target>
        </trans-unit>
        <trans-unit id="f59893c50b7d9f6fccbb634dce991efa1ec27e2a" translate="yes" xml:space="preserve">
          <source>The base class of all unrecoverable runtime errors.</source>
          <target state="translated">すべての回復不可能なランタイムエラーの基底クラス。</target>
        </trans-unit>
        <trans-unit id="2ae564b78fab59c5ea57c135e5d25f9a2f2f9e56" translate="yes" xml:space="preserve">
          <source>The base path to construct the relative path from.</source>
          <target state="translated">相対パスを構築するためのベースパス。</target>
        </trans-unit>
        <trans-unit id="7b8c780a7aaf44d0ec25e2d71c9d91275146dbb5" translate="yes" xml:space="preserve">
          <source>The base ptr in this struct can be cleared asynchronously by the GC, so any use of the returned BlkInfo should copy it and then check the base ptr of the copy before actually using it.</source>
          <target state="translated">この構造体のベース ptr は、GC によって非同期的にクリアすることができるので、返された BlkInfo の使用は、それをコピーし、実際にそれを使用する前にコピーのベース ptr をチェックする必要があります。</target>
        </trans-unit>
        <trans-unit id="8690f4437635a1d2bf0002da1660f73ae69c67e5" translate="yes" xml:space="preserve">
          <source>The base type.</source>
          <target state="translated">ベースとなるタイプです。</target>
        </trans-unit>
        <trans-unit id="dbcf092daafa8f2354629e2a622f62afa3a72b3b" translate="yes" xml:space="preserve">
          <source>The basetype must be one of: byte[16],ubyte[16],short[8],ushort[8],int[4],uint[4],long[2],ulong[2],float[4],double[2] For AVX: byte[32],ubyte[32],short[16],ushort[16],int[8],uint[8],long[4],ulong[4],float[8],double[4]</source>
          <target state="translated">ベース型は次のいずれかでなければなりません:byte[16],ubyte[16],short[8],ushort[8],int[4],uint[4],long[2],ulong[2],float[4],double[2]AVX の場合:byte[32],ubyte[32],short[16],ushort[16],int[8],uint[8],long[4],ulong[4],float[8],double[4]のいずれかです。</target>
        </trans-unit>
        <trans-unit id="399482d1c370eb1ac5e16d0aa1eed3cdd1c42d74" translate="yes" xml:space="preserve">
          <source>The basic architecture of this module is that there are standalone functions, classes for constructing an XML document from scratch (Tag, Element and Document), and also classes for parsing a pre-existing XML file (ElementParser and DocumentParser). The parsing classes</source>
          <target state="translated">このモジュールの基本的なアーキテクチャは、スタンドアロン関数、ゼロからXMLドキュメントを構築するためのクラス(Tag、Element、Document)、そして既存のXMLファイルを解析するためのクラス(ElementParserとDocumentParser)があります。解析クラス</target>
        </trans-unit>
        <trans-unit id="bd83f1731835a7762685d9b1b4c80ae22caa482b" translate="yes" xml:space="preserve">
          <source>The basic syntax shouldn't surprise experienced users of regular expressions. For an introduction to &lt;code&gt;std.regex&lt;/code&gt; see a &lt;a href=&quot;http://dlang.org/regular-expression.html&quot;&gt;short tour&lt;/a&gt; of the module API and its abilities.</source>
          <target state="translated">基本的な構文は、正規表現の経験豊富なユーザーを驚かせるべきではありません。概要について &lt;code&gt;std.regex&lt;/code&gt; 参照&lt;a href=&quot;http://dlang.org/regular-expression.html&quot;&gt;短いツアー&lt;/a&gt;モジュールのAPIとその能力のを。</target>
        </trans-unit>
        <trans-unit id="234f6e28893085e219de1f945a7e3dc32736e80c" translate="yes" xml:space="preserve">
          <source>The behavior executed when a message is sent to a full mailbox.</source>
          <target state="translated">メッセージがフルメールボックスに送信されたときに実行される動作。</target>
        </trans-unit>
        <trans-unit id="ab5c4600b299e121274047c9c50598443a05a652" translate="yes" xml:space="preserve">
          <source>The behavior when a</source>
          <target state="translated">をしたときの動作</target>
        </trans-unit>
        <trans-unit id="10d232650e9a8e91839d30ef0b07aa3a7812c3ee" translate="yes" xml:space="preserve">
          <source>The behavior when the invariant does not hold is typically the same as for when &lt;a href=&quot;expression#AssertExpression&quot;&gt;&lt;i&gt;AssertExpression&lt;/i&gt;&lt;/a&gt;s fail.</source>
          <target state="translated">不変条件が成立しない場合の動作は、通常&lt;a href=&quot;expression#AssertExpression&quot;&gt;&lt;i&gt;AssertExpression&lt;/i&gt;&lt;/a&gt;が失敗した場合と同じです。</target>
        </trans-unit>
        <trans-unit id="32c253b8b8075fafad7db46ce9573fe20079099e" translate="yes" xml:space="preserve">
          <source>The best way is to use std.stdio.writefln, which can handle D strings:</source>
          <target state="translated">最良の方法は、D文字列を扱える std.stdio.writefln を使うことです。</target>
        </trans-unit>
        <trans-unit id="074a4ed5e1cf5284566f4613af5758030a468edf" translate="yes" xml:space="preserve">
          <source>The beta function is defined as</source>
          <target state="translated">ベータ関数は次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="776df6b9101ffe92329a9ec86d4f259d56f6f5cd" translate="yes" xml:space="preserve">
          <source>The binary heap induces structure over the underlying store such that accessing the largest element (by using the &lt;code&gt;front&lt;/code&gt; property) is a &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;) operation and extracting it (by using the &lt;code&gt;removeFront()&lt;/code&gt; method) is done fast in &amp;Omicron;(&lt;code&gt;log n&lt;/code&gt;) time.</source>
          <target state="translated">バイナリヒープは、（ &lt;code&gt;front&lt;/code&gt; プロパティを使用して）最大の要素へのアクセスが&amp;Omicron;（ &lt;code&gt;1&lt;/code&gt; ）操作であり、（ &lt;code&gt;removeFront()&lt;/code&gt; メソッドを使用して）要素の抽出が&amp;Omicron;（ &lt;code&gt;log n&lt;/code&gt; ）で高速に実行されるように、基になるストアに構造を誘導します時間。</target>
        </trans-unit>
        <trans-unit id="4c8ec4e4b9635f6e100188d75e888fd06cd8e192" translate="yes" xml:space="preserve">
          <source>The binary operator involved, e.g. &lt;code&gt;/&lt;/code&gt;</source>
          <target state="translated">関連する二項演算子、例えば &lt;code&gt;/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d68c85a934ba6bb56625f3815258575a45ac4309" translate="yes" xml:space="preserve">
          <source>The binary operator ~ is the</source>
          <target state="translated">二進演算子〜は</target>
        </trans-unit>
        <trans-unit id="97c48bbd4c951e34df677fdb5ba8d5cff4f6b9ee" translate="yes" xml:space="preserve">
          <source>The binary predicate to compare the elements of the two ranges.</source>
          <target state="translated">2つの範囲の要素を比較するための2値述語。</target>
        </trans-unit>
        <trans-unit id="c0f1385da3c1b4c526f08c5b626218775066160e" translate="yes" xml:space="preserve">
          <source>The bit number of the first bit set. The return value is undefined if v is zero.</source>
          <target state="translated">最初に設定されたビットのビット番号。vが0の場合、戻り値は未定義です。</target>
        </trans-unit>
        <trans-unit id="f465b8408295f09e1e80dc77dc9289f124c8a06a" translate="yes" xml:space="preserve">
          <source>The bitwise OR of the equivalent &lt;a href=&quot;#ParameterStorageClass&quot;&gt;&lt;code&gt;ParameterStorageClass&lt;/code&gt;&lt;/a&gt;&lt;code&gt;enum&lt;/code&gt;s.</source>
          <target state="translated">同等の&lt;a href=&quot;#ParameterStorageClass&quot;&gt; &lt;code&gt;ParameterStorageClass&lt;/code&gt; &lt;/a&gt; &lt;code&gt;enum&lt;/code&gt; のビット単位OR 。</target>
        </trans-unit>
        <trans-unit id="4fdcc0b7027ad4b488f80691f340dd0dc77ff487" translate="yes" xml:space="preserve">
          <source>The block statement form is:</source>
          <target state="translated">ブロック文の形式は</target>
        </trans-unit>
        <trans-unit id="dd4bbefc576334b8b13692b8e44bc6ee98e6f364" translate="yes" xml:space="preserve">
          <source>The body of the</source>
          <target state="translated">の本体は</target>
        </trans-unit>
        <trans-unit id="96cd6fd8f2e0864106740818ab2710f9f6ce82f8" translate="yes" xml:space="preserve">
          <source>The body of the constructor is executed.</source>
          <target state="translated">コンストラクタの本体が実行されます。</target>
        </trans-unit>
        <trans-unit id="6863a629a6b6532a62dd2be0fcf0c83cbe0ecc4b" translate="yes" xml:space="preserve">
          <source>The bool type is a byte-size type that can only hold the value &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">bool型は、値 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; のみを保持できるバイトサイズ型です。</target>
        </trans-unit>
        <trans-unit id="595a315b8710f1cdf54c5c5a89b18ff6fdc7c01a" translate="yes" xml:space="preserve">
          <source>The bound being violated</source>
          <target state="translated">縛られていることに違反している</target>
        </trans-unit>
        <trans-unit id="58bf9949e91d1f67475ea8dd8dc1479acb9a7b6c" translate="yes" xml:space="preserve">
          <source>The buffer to store decoded result.</source>
          <target state="translated">デコード結果を格納するバッファ。</target>
        </trans-unit>
        <trans-unit id="cbd8e18ccd6c72e47f49142b87596eb0b37a2753" translate="yes" xml:space="preserve">
          <source>The buffer to write to</source>
          <target state="translated">書き込み先のバッファ</target>
        </trans-unit>
        <trans-unit id="d4158bf50efe732ca75d7c0746df60cf6a107caa" translate="yes" xml:space="preserve">
          <source>The built in properties &lt;code&gt;.sizeof&lt;/code&gt;, &lt;code&gt;.alignof&lt;/code&gt;, and &lt;code&gt;.mangleof&lt;/code&gt; may not be declared as fields or methods in structs, unions, classes or enums.</source>
          <target state="translated">組み込みのプロパティ &lt;code&gt;.sizeof&lt;/code&gt; 、 &lt;code&gt;.alignof&lt;/code&gt; 、および &lt;code&gt;.mangleof&lt;/code&gt; は、構造体、共用体、クラス、または列挙型のフィールドまたはメソッドとして宣言できません。</target>
        </trans-unit>
        <trans-unit id="cb37eb5828bb8f76b215ba701695af10297cc319" translate="yes" xml:space="preserve">
          <source>The built-in address-of operator (unary &lt;code&gt;&amp;amp;&lt;/code&gt;) may only be applied to lvalues.</source>
          <target state="translated">組み込みのアドレス演算子（単項 &lt;code&gt;&amp;amp;&lt;/code&gt; ）は左辺値にのみ適用できます。</target>
        </trans-unit>
        <trans-unit id="01d529a280bedf8d2329f923f87f28d6d2414970" translate="yes" xml:space="preserve">
          <source>The built-in char types are any of &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;wchar&lt;/code&gt; or &lt;code&gt;dchar&lt;/code&gt;, with or without qualifiers.</source>
          <target state="translated">組み込みのchar型は、修飾子の有無にかかわらず、 &lt;code&gt;char&lt;/code&gt; 、 &lt;code&gt;wchar&lt;/code&gt; 、または &lt;code&gt;dchar&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="26447929ba19118cb6719911318de883e533656a" translate="yes" xml:space="preserve">
          <source>The built-in string types are &lt;code&gt;Char[]&lt;/code&gt;, where &lt;code&gt;Char&lt;/code&gt; is any of &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;wchar&lt;/code&gt; or &lt;code&gt;dchar&lt;/code&gt;, with or without qualifiers.</source>
          <target state="translated">組み込みの文字列型は &lt;code&gt;Char[]&lt;/code&gt; 。ここで、 &lt;code&gt;Char&lt;/code&gt; は、修飾子の有無にかかわらず、 &lt;code&gt;char&lt;/code&gt; 、 &lt;code&gt;wchar&lt;/code&gt; 、または &lt;code&gt;dchar&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="985d41f10ebe09bea42e87e43e676a34b5b701c9" translate="yes" xml:space="preserve">
          <source>The call &lt;code&gt;gapWeightedSimilarity(s, t, 1)&lt;/code&gt; simply counts all of these matches and adds them up, returning 7.</source>
          <target state="translated">呼び出し &lt;code&gt;gapWeightedSimilarity(s, t, 1)&lt;/code&gt; は、これらの一致をすべてカウントし、それらを合計して7を返します。</target>
        </trans-unit>
        <trans-unit id="9504202f5ac0a1e1b308309ee50027e163c8c607" translate="yes" xml:space="preserve">
          <source>The call above eliminated the gapped matches (&lt;code&gt;&quot;Hello&quot;, &quot;new&quot;&lt;/code&gt;), (&lt;code&gt;&quot;Hello&quot;, &quot;world&quot;&lt;/code&gt;), and (&lt;code&gt;&quot;Hello&quot;, &quot;new&quot;, &quot;world&quot;&lt;/code&gt;) from the tally. That leaves only 4 matches.</source>
          <target state="translated">上記の呼び出しにより、ギャップのある一致（ &lt;code&gt;&quot;Hello&quot;, &quot;new&quot;&lt;/code&gt; ）、（ &lt;code&gt;&quot;Hello&quot;, &quot;world&quot;&lt;/code&gt; ）、および（ &lt;code&gt;&quot;Hello&quot;, &quot;new&quot;, &quot;world&quot;&lt;/code&gt; ）が集計から除外されました。それはたった4つのマッチを残します。</target>
        </trans-unit>
        <trans-unit id="a0a65d3fa68c14100a930ea8ba7a95c4b2425c75" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;func()&lt;/code&gt; is ambiguous because Foo.func and Bar.func are in different scopes.</source>
          <target state="translated">Foo.funcとBar.funcのスコープが異なるため、 &lt;code&gt;func()&lt;/code&gt; の呼び出しはあいまいです。</target>
        </trans-unit>
        <trans-unit id="e538f3dd7f1bdd1b474917678b37be623289cdfe" translate="yes" xml:space="preserve">
          <source>The call will duplicate the array appropriately.  Note that checking for uniqueness during compilation is possible in certain cases, especially when a function is marked as a pure function. The following example does not need to call assumeUnique because the compiler can infer the uniqueness of the array in the pure function:</source>
          <target state="translated">この呼び出しは配列を適切に複製します。コンパイル中に一意性をチェックすることは、特に関数が純粋な関数としてマークされている場合には可能であることに注意してください。次の例では、純粋な関数の配列の一意性をコンパイラが推測できるので、 assumeUnique を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="242f08d2b1a1a758366f7a48d7e4dad847e662cb" translate="yes" xml:space="preserve">
          <source>The callable that is called when a handled primitive throws a &lt;code&gt;Throwable&lt;/code&gt; of type &lt;code&gt;E&lt;/code&gt;. The handler must accept arguments of the form &lt;code&gt;E, ref IRange&lt;/code&gt; and its return value is used as the primitive's return value whenever &lt;code&gt;E&lt;/code&gt; is thrown. For &lt;code&gt;opIndex&lt;/code&gt;, the handler can optionally recieve a third argument; the index that caused the exception.</source>
          <target state="translated">処理されたプリミティブがタイプ &lt;code&gt;E&lt;/code&gt; の &lt;code&gt;Throwable&lt;/code&gt; をスローしたときに呼び出される呼び出し可能オブジェクト。ハンドラーは &lt;code&gt;E, ref IRange&lt;/code&gt; 形式の引数を受け入れる必要があり、その戻り値は、 &lt;code&gt;E&lt;/code&gt; がスローされるたびにプリミティブの戻り値として使用されます。ため &lt;code&gt;opIndex&lt;/code&gt; 、ハンドラは、必要に応じて第三の引数を受け取ることができます。例外を引き起こしたインデックス。</target>
        </trans-unit>
        <trans-unit id="8595a4fb5e8942c865e60e579f4bc97ae9361768" translate="yes" xml:space="preserve">
          <source>The callable to apply on create.</source>
          <target state="translated">作成時に適用する呼び出し可能なもの。</target>
        </trans-unit>
        <trans-unit id="9e7cb4c784340dbcc9223bb09fc5bd0008d15a78" translate="yes" xml:space="preserve">
          <source>The callable to apply on update.</source>
          <target state="translated">更新時に適用される呼び出し可能な</target>
        </trans-unit>
        <trans-unit id="47f8d3d3341c2f3859f008d663d7d39abed383a3" translate="yes" xml:space="preserve">
          <source>The callback returns the incoming bytes read. If not the entire array is the request will abort. The special value .pauseRequest can be returned in order to pause the current request.</source>
          <target state="translated">コールバックは、読み込まれた着信バイトを返します。配列全体が読み込まれていない場合は、リクエストは中止されます。現在のリクエストを一時停止するために、特別な値 .pauseRequest を返すことができます。</target>
        </trans-unit>
        <trans-unit id="7ff970a770b2ff7a8a51d3f9664a81966555d9c0" translate="yes" xml:space="preserve">
          <source>The callback returns the incoming bytes read. If not the entire array is the request will abort. The special value HTTP.pauseRequest can be returned in order to pause the current request.</source>
          <target state="translated">コールバックは、読み込まれた着信バイトを返します。配列全体が読み込まれていない場合は、リクエストは中止されます。現在のリクエストを一時停止するために、特別な値 HTTP.pauseRequest を返すことができます。</target>
        </trans-unit>
        <trans-unit id="8e149c07dded4d56d5080da41c572390f4d5c4e3" translate="yes" xml:space="preserve">
          <source>The callback returns the number of elements in the buffer that have been filled and are ready to send. The special value &lt;code&gt;.abortRequest&lt;/code&gt; can be returned in order to abort the current request. The special value &lt;code&gt;.pauseRequest&lt;/code&gt; can be returned in order to pause the current request.</source>
          <target state="translated">コールバックは、満たされて送信の準備ができているバッファ内の要素の数を返します。現在のリクエストを中止するために、特別な値 &lt;code&gt;.abortRequest&lt;/code&gt; を返すことができます。現在のリクエストを一時停止するために、特別な値 &lt;code&gt;.pauseRequest&lt;/code&gt; を返すことができます。</target>
        </trans-unit>
        <trans-unit id="2137ada3ae84929eb868bf721851f3520aa621f8" translate="yes" xml:space="preserve">
          <source>The callback returns the number of elements in the buffer that have been filled and are ready to send. The special value &lt;code&gt;Curl.abortRequest&lt;/code&gt; can be returned in order to abort the current request. The special value &lt;code&gt;Curl.pauseRequest&lt;/code&gt; can be returned in order to pause the current request.</source>
          <target state="translated">コールバックは、満たされて送信の準備ができているバッファ内の要素の数を返します。現在のリクエストを中止するために、特別な値 &lt;code&gt;Curl.abortRequest&lt;/code&gt; を返すことができます。現在のリクエストを一時停止するために、特別な値 &lt;code&gt;Curl.pauseRequest&lt;/code&gt; を返すことができます。</target>
        </trans-unit>
        <trans-unit id="559652851d8e835ca6e4e25200037a9b2b88d7e9" translate="yes" xml:space="preserve">
          <source>The callback returns the success state of the seeking &lt;a href=&quot;etc_c_curl#CurlSeek&quot;&gt;&lt;code&gt;etc.c.curl.CurlSeek&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">コールバックは、シークなどの成功状態を返します&lt;a href=&quot;etc_c_curl#CurlSeek&quot;&gt; &lt;code&gt;etc.c.curl.CurlSeek&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4f77b46c5f5f6357c24d9647b815993a85d323b8" translate="yes" xml:space="preserve">
          <source>The callback should return zero.</source>
          <target state="translated">コールバックはゼロを返します。</target>
        </trans-unit>
        <trans-unit id="bf29eeac01c5a4dd86a6df695ab4b58778a8d6c6" translate="yes" xml:space="preserve">
          <source>The callback will receive a header field key, value as parameter. The &lt;code&gt;const(char)[]&lt;/code&gt; arrays are not valid after the delegate has returned.</source>
          <target state="translated">コールバックは、ヘッダーフィールドのキーと値をパラメーターとして受け取ります。 &lt;code&gt;const(char)[]&lt;/code&gt; 代理人が戻った後にアレイが有効ではありません。</target>
        </trans-unit>
        <trans-unit id="0479a0d5e5b9b6df459258bae677881c90ce0ee0" translate="yes" xml:space="preserve">
          <source>The callee cleans the stack.</source>
          <target state="translated">呼び出し人はスタックを掃除します。</target>
        </trans-unit>
        <trans-unit id="969d6b1248484a0e1ba90ba5ae45f38dfe225ca5" translate="yes" xml:space="preserve">
          <source>The caller guarantees that there are no other live pointers to the passed memory block, still it might not be freed immediately by &lt;code&gt;realloc&lt;/code&gt;. The garbage collector can reclaim the memory block in a later collection if it is unused. If allocation fails, this function will throw an &lt;code&gt;OutOfMemoryError&lt;/code&gt;.</source>
          <target state="translated">呼び出し元は、渡されたメモリブロックへのライブポインタが他にないことを保証しますが、それでも &lt;code&gt;realloc&lt;/code&gt; によってすぐには解放されない可能性があります。ガベージコレクタは、未使用のメモリブロックを後のコレクションで再利用できます。割り当てが失敗した場合、この関数は &lt;code&gt;OutOfMemoryError&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="42c8382f8ef7fb6520cb3687eb152b34b852d9fc" translate="yes" xml:space="preserve">
          <source>The caller is expected to clean the stack. &lt;code&gt;_argptr&lt;/code&gt; is not passed, it is computed by the callee.</source>
          <target state="translated">呼び出し元はスタックをクリーンアップする必要があります。 &lt;code&gt;_argptr&lt;/code&gt; は渡されず、呼び出し先によって計算されます。</target>
        </trans-unit>
        <trans-unit id="71f4f46b73c55f9c109f0c80b9ef8abbb104d1fb" translate="yes" xml:space="preserve">
          <source>The calling thread must be attached to the runtime.</source>
          <target state="translated">呼び出し側のスレッドがランタイムにアタッチされている必要があります。</target>
        </trans-unit>
        <trans-unit id="958f07aa30dc8c63baec5ad6b7a6ab8de498d71d" translate="yes" xml:space="preserve">
          <source>The canonical name is returned in &lt;code&gt;canonicalName&lt;/code&gt; member in the first &lt;code&gt;AddressInfo&lt;/code&gt;.</source>
          <target state="translated">正規名は、最初の &lt;code&gt;AddressInfo&lt;/code&gt; の &lt;code&gt;canonicalName&lt;/code&gt; メンバーで返されます。</target>
        </trans-unit>
        <trans-unit id="5578f20f728ef7ea894f9c8485dc8375879fa1eb" translate="yes" xml:space="preserve">
          <source>The capacity of a slice may be impacted by operations on other slices.</source>
          <target state="translated">スライスの容量は、他のスライスの操作によって影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="107b78d2e608ef92e8a7f001aab1e580890d2636" translate="yes" xml:space="preserve">
          <source>The capitalized string.</source>
          <target state="translated">大文字の文字列です。</target>
        </trans-unit>
        <trans-unit id="a02d900e092203fe7acb10d7253e6c7295d71b57" translate="yes" xml:space="preserve">
          <source>The case expressions cannot evaluate to a run time initialized value.</source>
          <target state="translated">case 式は、実行時に初期化された値を評価できません。</target>
        </trans-unit>
        <trans-unit id="c660de992148409122dcd32983da08c9290b863c" translate="yes" xml:space="preserve">
          <source>The case expressions must all evaluate to a constant value or array, or a runtime initialized const or immutable variable of integral type. They must be implicitly convertible to the type of the switch &lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">ケース式はすべて、定数値または配列、またはランタイムで初期化された整数型のconstまたは不変変数に評価される必要があります。これらは暗黙的にスイッチ&lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;式の&lt;/i&gt;&lt;/a&gt;タイプに変換可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="5f4e6b9553e729310217386d882aa9d464ad3e08" translate="yes" xml:space="preserve">
          <source>The case expressions, &lt;a href=&quot;expression#ArgumentList&quot;&gt;&lt;i&gt;ArgumentList&lt;/i&gt;&lt;/a&gt;, are a comma separated list of expressions.</source>
          <target state="translated">ケース式&lt;a href=&quot;expression#ArgumentList&quot;&gt;&lt;i&gt;ArgumentList&lt;/i&gt;&lt;/a&gt;は、コンマで区切られた式のリストです。</target>
        </trans-unit>
        <trans-unit id="ed530c7eb728f8fa72fe143a48d1125946f28cef" translate="yes" xml:space="preserve">
          <source>The cast to &lt;code&gt;int&lt;/code&gt; is required.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; へのキャストが必要です。</target>
        </trans-unit>
        <trans-unit id="5c065923e841d97029a1a1a23e3c446aaf97b033" translate="yes" xml:space="preserve">
          <source>The character that terminates a line</source>
          <target state="translated">行を終了させる文字</target>
        </trans-unit>
        <trans-unit id="629001ed0c4dadc576ebea811f98cc1aed6e90df" translate="yes" xml:space="preserve">
          <source>The character to represent a comma in the specification</source>
          <target state="translated">仕様書中のカンマを表す文字</target>
        </trans-unit>
        <trans-unit id="ec12026df227efabbda621551d1564e02d496853" translate="yes" xml:space="preserve">
          <source>The character to represent a quote in the specification</source>
          <target state="translated">仕様の中で引用を表す文字</target>
        </trans-unit>
        <trans-unit id="ed980b4c59776662298660727d4c9f56b2f99259" translate="yes" xml:space="preserve">
          <source>The character to test.</source>
          <target state="translated">テストするキャラクター。</target>
        </trans-unit>
        <trans-unit id="f806bb97e00ae2a4d1965414bf699f20536e139e" translate="yes" xml:space="preserve">
          <source>The character to use for filling excess space in the field</source>
          <target state="translated">フィールドの余剰スペースを埋めるために使用する文字</target>
        </trans-unit>
        <trans-unit id="7954bf846b49b756c8f7adbc1f7bb59d31d8fe0f" translate="yes" xml:space="preserve">
          <source>The character-based range to be split. Must be a string, or a random-access range of character types.</source>
          <target state="translated">分割する文字ベースの範囲。文字列か、文字型のランダムアクセス範囲でなければなりません。</target>
        </trans-unit>
        <trans-unit id="da430ad7582915a68166d7b59e0099addfd5c754" translate="yes" xml:space="preserve">
          <source>The characters to remove from the string.</source>
          <target state="translated">文字列から削除する文字。</target>
        </trans-unit>
        <trans-unit id="0bc92faf6490d5bb1265aa7a3286ff3cc0386eb8" translate="yes" xml:space="preserve">
          <source>The characters to replace with.</source>
          <target state="translated">置き換える文字。</target>
        </trans-unit>
        <trans-unit id="b24b1e6a036609d0af960c16ec68d51a3e145307" translate="yes" xml:space="preserve">
          <source>The characters to replace.</source>
          <target state="translated">入れ替える文字。</target>
        </trans-unit>
        <trans-unit id="da530bf40507c33ab0ce7b6f55c2e0bfe50af65c" translate="yes" xml:space="preserve">
          <source>The choice of the normalization form depends on the particular use case. NFC is the best form for general text, since it's more compatible with strings converted from legacy encodings. NFKC is the preferred form for identifiers, especially where there are security concerns. NFD and NFKD are the most useful for internal processing.</source>
          <target state="translated">正規化形式の選択は、特定のユースケースに依存します。それはレガシーエンコーディングから変換された文字列とより互換性があるからです。NFKC は識別子、特にセキュリティ上の懸念がある場合に好ましい形式です。NFD と NFKD は内部処理に最も有用です。</target>
        </trans-unit>
        <trans-unit id="f5c734e10fd22e90551eca30f40d587d99f0c42a" translate="yes" xml:space="preserve">
          <source>The class allocator is not called if the instance is created on the stack.</source>
          <target state="translated">スタック上にインスタンスが作成されている場合、クラスアロケータは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="888d63439c91bbcddad644e4c7db9438fc2745dc" translate="yes" xml:space="preserve">
          <source>The class declaration this belongs to.</source>
          <target state="translated">これが属するクラス宣言。</target>
        </trans-unit>
        <trans-unit id="9821e074c45da0757bbe913fb06d396a19d66ece" translate="yes" xml:space="preserve">
          <source>The class definition:</source>
          <target state="translated">クラスの定義。</target>
        </trans-unit>
        <trans-unit id="6cd8612310d940ff26e5edb5b4fcdb1ec41c2ab8" translate="yes" xml:space="preserve">
          <source>The class destructor will be called when the result of &lt;code&gt;scoped()&lt;/code&gt; is itself destroyed.</source>
          <target state="translated">クラスデストラクタは、 &lt;code&gt;scoped()&lt;/code&gt; の結果自体が破棄されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c93c7a1d79db5f0e6fcfb2d97ac7ab27199857e4" translate="yes" xml:space="preserve">
          <source>The code above is equivalent to:</source>
          <target state="translated">上記のコードがそれに相当します。</target>
        </trans-unit>
        <trans-unit id="5b07f3ff2ae08c1115f9318187e98dfad8b61d12" translate="yes" xml:space="preserve">
          <source>The code below defines a scalable allocator consisting of 1 MB (or larger) blocks fetched from the garbage-collected heap. Each block is organized as a KR-style heap. More blocks are allocated and freed on a need basis.  This is the closest example to the allocator introduced in the K&amp;amp;R book. It should perform slightly better because instead of searching through one large free list, it searches through several shorter lists in LRU order. Also, it actually returns memory to the operating system when possible.</source>
          <target state="translated">以下のコードは、ガベージコレクションされたヒープからフェッチされた1 MB（またはそれ以上）のブロックで構成されるスケーラブルなアロケーターを定義しています。各ブロックは、KRスタイルのヒープとして編成されます。より多くのブロックが割り当てられ、必要に応じて解放されます。これは、K＆Rブックで紹介されているアロケータに最も近い例です。1つの大きな空きリストを検索する代わりに、LRUの順序でいくつかの短いリストを検索するため、パフォーマンスは若干向上します。また、可能な場合は実際にメモリをオペレーティングシステムに返します。</target>
        </trans-unit>
        <trans-unit id="12ac0fdde9cbd45bcf0987afae5cbf0bd1ef3d0f" translate="yes" xml:space="preserve">
          <source>The code example below shows a simple implementation of a 2-dimensional array with overloaded indexing and slicing operators. The explanations of the various constructs employed are given in the sections following.</source>
          <target state="translated">以下のコード例は,オーバーロードされたインデックスとスライシング演算子を持つ2次元配列の簡単な実装です.採用されている様々な構文については,以下のセクションで説明します.</target>
        </trans-unit>
        <trans-unit id="0ef6a79ff5d24e866faf6946cbbd2a6330b8fc2c" translate="yes" xml:space="preserve">
          <source>The code generated by these three functions is identical. To indicate that these can be one function, the inout type constructor is employed:</source>
          <target state="translated">これら3つの関数によって生成されるコードは同じです。これらが1つの関数であることを示すために、inout型のコンストラクタが採用されています。</target>
        </trans-unit>
        <trans-unit id="a7b0bdcbeba131b0b10ad17da0e5e625fbde9d3f" translate="yes" xml:space="preserve">
          <source>The code in the invariant may not call any public non-static members of the class or struct, either directly or indirectly. Doing so will result in a stack overflow, as the invariant will wind up being called in an infinitely recursive manner.</source>
          <target state="translated">不変体のコードは、クラスまたは構造体のパブリックな非静的メンバを直接または間接的に呼び出すことはできません。そうすると、無限に再帰的な方法で不変体が呼び出されることになり、スタックオーバーフローが発生します。</target>
        </trans-unit>
        <trans-unit id="5567d3893a01342e1a0bc105518655a6faaaab38" translate="yes" xml:space="preserve">
          <source>The code that detects an error knows more about the error than the code that must recover from the error.</source>
          <target state="translated">エラーを検出したコードは、エラーから回復しなければならないコードよりも、エラーについての知識が豊富です。</target>
        </trans-unit>
        <trans-unit id="820bb6ee9e6aba52c669ddd54299d0ca78f94c71" translate="yes" xml:space="preserve">
          <source>The code to implement this API is not available in the public release of SQLite.</source>
          <target state="translated">このAPIを実装するコードは、SQLiteのパブリックリリースでは利用できません。</target>
        </trans-unit>
        <trans-unit id="0b173c608e91ac1dd9ab1e2ebbf859ba8dcba5c7" translate="yes" xml:space="preserve">
          <source>The comment form must match the D language comments.</source>
          <target state="translated">コメントフォームはD言語のコメントと一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="2a6df46d142eee7bea5f31e6c40f2872f6843d42" translate="yes" xml:space="preserve">
          <source>The common use case for printing a stack trace is when &lt;code&gt;toString&lt;/code&gt; is called on a &lt;code&gt;Throwable&lt;/code&gt; (see &lt;code&gt;object.d&lt;/code&gt;). It will iterate on what is likely to be the default trace handler (see &lt;code&gt;core.runtime : defaultTraceHandler&lt;/code&gt;). The class returned by &lt;code&gt;defaultTraceHandler&lt;/code&gt; is what ends up calling into this module, through the use of &lt;code&gt;core.internal.traits : externDFunc&lt;/code&gt;.</source>
          <target state="translated">スタックトレースを出力する一般的なユースケースは、 &lt;code&gt;toString&lt;/code&gt; が &lt;code&gt;Throwable&lt;/code&gt; で呼び出される場合です（ &lt;code&gt;object.d&lt;/code&gt; を参照）。デフォルトのトレースハンドラーになる可能性が高いものを繰り返し処理します（ &lt;code&gt;core.runtime : defaultTraceHandler&lt;/code&gt; 参照）。 &lt;code&gt;defaultTraceHandler&lt;/code&gt; によって返されるクラスは、 &lt;code&gt;core.internal.traits : externDFunc&lt;/code&gt; 使用して、このモジュールを呼び出すことになります。</target>
        </trans-unit>
        <trans-unit id="c27e68ae34b416356827d090284f419f63369dc7" translate="yes" xml:space="preserve">
          <source>The communication domain used to resolve an address.</source>
          <target state="translated">アドレスの解決に使用する通信ドメイン。</target>
        </trans-unit>
        <trans-unit id="a8ad0e630b8b0da66aee6c7edb8a63daad73619d" translate="yes" xml:space="preserve">
          <source>The comparison predicate</source>
          <target state="translated">比較述語</target>
        </trans-unit>
        <trans-unit id="8236e0769cfa2f3f369ae0002ca893f3e532ba5d" translate="yes" xml:space="preserve">
          <source>The comparison to use.</source>
          <target state="translated">使うための比較です。</target>
        </trans-unit>
        <trans-unit id="5dabbbc6b85984f7c631dd31a40e4692958581a7" translate="yes" xml:space="preserve">
          <source>The comparison value.</source>
          <target state="translated">比較値です。</target>
        </trans-unit>
        <trans-unit id="1884ff0398391fb51645ddf67a895753f5f23bb8" translate="yes" xml:space="preserve">
          <source>The compile time length of &lt;code&gt;arr&lt;/code&gt; if it's known.</source>
          <target state="translated">既知の場合、 &lt;code&gt;arr&lt;/code&gt; のコンパイル時間の長さ。</target>
        </trans-unit>
        <trans-unit id="20e21ca3ed0c66cb684853be4c9050ce61bc28b7" translate="yes" xml:space="preserve">
          <source>The compiler is free to assume the assert expression is true and optimize subsequent code accordingly.</source>
          <target state="translated">コンパイラはアサート式が真であると仮定して、それに応じて後続のコードを最適化します。</target>
        </trans-unit>
        <trans-unit id="7c2be101920c07dfed2a3b2ae4e783a017a150b5" translate="yes" xml:space="preserve">
          <source>The compiler lowers expressions of &lt;code&gt;cast(TTo[])TFrom[]&lt;/code&gt; to this implementation.</source>
          <target state="translated">コンパイラーは、 &lt;code&gt;cast(TTo[])TFrom[]&lt;/code&gt; をこの実装に下げます。</target>
        </trans-unit>
        <trans-unit id="3119e558dc9b76ce9fd8e624bacd61cca8100ec6" translate="yes" xml:space="preserve">
          <source>The compiler makes the decision whether to inline a function or not. This decision may be controlled by &lt;a href=&quot;pragma#inline&quot;&gt;&lt;code&gt;pragma(inline)&lt;/code&gt;&lt;/a&gt;, assuming that the compiler implements it, which is not mandatory.</source>
          <target state="translated">コンパイラーは、関数をインライン化するかどうかを決定します。この決定は、コンパイラがそれを実装することを前提として、&lt;a href=&quot;pragma#inline&quot;&gt; &lt;code&gt;pragma(inline)&lt;/code&gt; &lt;/a&gt;によって制御される場合がありますが、これは必須ではありません。</target>
        </trans-unit>
        <trans-unit id="291025563ce73c7bc11eafe0442e20ca4b9ab725" translate="yes" xml:space="preserve">
          <source>The compiler performs the following checks to enforce the correct usage of the &lt;code&gt;@selector&lt;/code&gt; attribute:</source>
          <target state="translated">コンパイラーは次のチェックを実行して、 &lt;code&gt;@selector&lt;/code&gt; 属性の正しい使用法を適用します。</target>
        </trans-unit>
        <trans-unit id="634747431ffe30a4862ec872dad71a6eb253993f" translate="yes" xml:space="preserve">
          <source>The compiler will not give an error if the hidden function is disjoint, as far as overloading is concerned, from all the other virtual functions is the inheritance hierarchy.</source>
          <target state="translated">隠れた関数がオーバーロードに関する限り、他のすべての仮想関数からの継承階層が不連続である場合、コンパイラはエラーを与えません。</target>
        </trans-unit>
        <trans-unit id="7e55718066f0afe8bf9a0cce63044c7450d60879" translate="yes" xml:space="preserve">
          <source>The compiler will then know to use the symbols from std.datetime.stopwatch rather than the deprecated ones from std.datetime.package.</source>
          <target state="translated">そうすると、コンパイラは std.datetime.package の非推奨シンボルではなく、 std.datetime.stopwatch のシンボルを使うことを知ることになります。</target>
        </trans-unit>
        <trans-unit id="1213489b3c94adf580de8081b13190aa4c164fbb" translate="yes" xml:space="preserve">
          <source>The complex base 10 logarithm of &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の複素数の10を底とする対数</target>
        </trans-unit>
        <trans-unit id="4bb19e5db380a52dd063f45e3673e8d6790eab39" translate="yes" xml:space="preserve">
          <source>The complex base e exponential of &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の複素基数e指数</target>
        </trans-unit>
        <trans-unit id="473d434a9b1e1fa3c3fa95983b0cf370022ebc41" translate="yes" xml:space="preserve">
          <source>The complex conjugate of &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;z&lt;/code&gt; の複素共役。</target>
        </trans-unit>
        <trans-unit id="6139a83329c7e8e7601513a9054b1b269eca88d9" translate="yes" xml:space="preserve">
          <source>The complex natural logarithm of &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の複雑な自然対数</target>
        </trans-unit>
        <trans-unit id="0c3998eac6614ebf21d49abc1e3b482249568f18" translate="yes" xml:space="preserve">
          <source>The complex number with the given modulus and argument.</source>
          <target state="translated">与えられた係数と引数を持つ複素数。</target>
        </trans-unit>
        <trans-unit id="ffd55f19d01437a4948ba1ff58d0011690958c82" translate="yes" xml:space="preserve">
          <source>The concepts of &lt;a href=&quot;#Canonical%20equivalent&quot;&gt;canonical equivalent&lt;/a&gt; or &lt;a href=&quot;#Compatibility%20equivalent&quot;&gt;compatibility equivalent&lt;/a&gt; characters in the Unicode Standard make it necessary to have a full, formal definition of equivalence for Unicode strings. String equivalence is determined by a process called normalization, whereby strings are converted into forms which are compared directly for identity. This is the primary goal of the normalization process, see the function &lt;a href=&quot;#normalize&quot;&gt;&lt;code&gt;normalize&lt;/code&gt;&lt;/a&gt; to convert into any of the four defined forms.</source>
          <target state="translated">Unicode標準における&lt;a href=&quot;#Canonical%20equivalent&quot;&gt;正規の同等&lt;/a&gt;または&lt;a href=&quot;#Compatibility%20equivalent&quot;&gt;互換性のある同等の&lt;/a&gt;文字の概念により、Unicode文字列の同等の完全かつ正式な定義が必要になります。文字列の等価性は、正規化と呼ばれるプロセスによって決定されます。これにより、文字列は、IDと直接比較される形式に変換されます。これが正規化プロセスの主要な目標です。関数&lt;a href=&quot;#normalize&quot;&gt; &lt;code&gt;normalize&lt;/code&gt; &lt;/a&gt;を参照して、定義された4つの形式のいずれかに変換してください。</target>
        </trans-unit>
        <trans-unit id="2abedb352be4b4cad8d77bc09501301df20a32a4" translate="yes" xml:space="preserve">
          <source>The condition is satisfied if</source>
          <target state="translated">条件は次の場合に成立します。</target>
        </trans-unit>
        <trans-unit id="2f916d19cc4604e724f8fa53e2900b77b6ea76e6" translate="yes" xml:space="preserve">
          <source>The condition is satisfied if &lt;code&gt;Type&lt;/code&gt; is semantically correct (it must be syntactically correct regardless).</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; が意味的に正しい場合（条件に関係なく構文的に正しい必要があります）、条件が満たされます。</target>
        </trans-unit>
        <trans-unit id="e653b278fd905a7f3ea022f157c287cd4a9f01c9" translate="yes" xml:space="preserve">
          <source>The condition module provides a primitive for synchronized condition checking.</source>
          <target state="translated">condition モジュールは、同期化された条件チェックのためのプリミティブを提供します。</target>
        </trans-unit>
        <trans-unit id="6ccd24f12a395f85abd20793c28ab1014d198ff2" translate="yes" xml:space="preserve">
          <source>The condition must be &lt;code&gt;true&lt;/code&gt; for the data to be logged.</source>
          <target state="translated">データをログに記録するには、条件が &lt;code&gt;true&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="7f67746204d06208bb04d7be048bff0edfd1312d" translate="yes" xml:space="preserve">
          <source>The conditions for the two-range case are as follows:</source>
          <target state="translated">2レンジの場合の条件は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9db8141e8da442e0a29cf9a7252671c3c3646d9b" translate="yes" xml:space="preserve">
          <source>The config module contains utility routines and configuration information specific to this package.</source>
          <target state="translated">config モジュールには、このパッケージに固有のユーティリティルーチンと設定情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="25247015a813aa1799daef3d9f06262e98658698" translate="yes" xml:space="preserve">
          <source>The connection to use e.g. HTTP or FTP.</source>
          <target state="translated">HTTP や FTP など、使用する接続。</target>
        </trans-unit>
        <trans-unit id="150a6335aad7ff29ac857e269ddb2bcb66d82956" translate="yes" xml:space="preserve">
          <source>The constructed &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">に構築さ &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76163a15ff5da4a6811b7d818ac307640ccf574e" translate="yes" xml:space="preserve">
          <source>The constructor does not initialize the attributes. To initialize the attributes, you access the &lt;b&gt;attr&lt;/b&gt; member variable.</source>
          <target state="translated">コンストラクターは属性を初期化しません。属性を初期化するには、&lt;b&gt;attr&lt;/b&gt;メンバー変数にアクセスします。</target>
        </trans-unit>
        <trans-unit id="bca7fb1c9668c6b5381caf14aec377df51a6a261" translate="yes" xml:space="preserve">
          <source>The constructor leaves the digest in an initialized state, so that this method only needs to be called if an unfinished digest is to be reused.</source>
          <target state="translated">コンストラクタは初期化された状態でダイジェストを残します。</target>
        </trans-unit>
        <trans-unit id="70a470b379ed3334099897b9dc79f34ba48d24b6" translate="yes" xml:space="preserve">
          <source>The content length in bytes of the ftp data.</source>
          <target state="translated">ftpデータのコンテンツ長をバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="d2356d15b14610202018dcbb7e4c8229b54b1b8a" translate="yes" xml:space="preserve">
          <source>The content length in bytes when using request that has content e.g. POST/PUT and not using chunked transfer. Is set as the &quot;Content-Length&quot; header. Set to ulong.max to reset to chunked transfer.</source>
          <target state="translated">POST/PUTなどのコンテンツを持つリクエストを使用し、チャンク転送を使用しない場合のコンテンツの長さをバイト単位で指定します。Content-Length &quot;ヘッダとして設定されます。ulong.maxに設定するとチャンク転送にリセットされます。</target>
        </trans-unit>
        <trans-unit id="c5718211c764df7e99cb685b897ebad52a7de67a" translate="yes" xml:space="preserve">
          <source>The content of &lt;code&gt;buffer&lt;/code&gt; is reused across calls. In the example above, &lt;code&gt;buffer.length&lt;/code&gt; is 4096 for all iterations, except for the last one, in which case &lt;code&gt;buffer.length&lt;/code&gt; may be less than 4096 (but always greater than zero).  In case of an I/O error, an &lt;code&gt;StdioException&lt;/code&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; の内容は、呼び出し間で再利用されます。上記の例では、 &lt;code&gt;buffer.length&lt;/code&gt; はケースた最後のを除いて、全ての反復のために4096で &lt;code&gt;buffer.length&lt;/code&gt; が未満4096（しかし常にゼロより大きい）であってもよいです。I / Oエラーの場合、 &lt;code&gt;StdioException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="2138553c63d001080b141495fda74a55a8794df5" translate="yes" xml:space="preserve">
          <source>The content of an environment variable</source>
          <target state="translated">環境変数の内容</target>
        </trans-unit>
        <trans-unit id="1b303287508120b2a69f862e57e4ac40cec3a22f" translate="yes" xml:space="preserve">
          <source>The content of the extra data field for this member. See &lt;a href=&quot;https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT&quot;&gt; original documentation&lt;/a&gt; for a description of the general format of this data. May contain undocumented 3rd-party data.</source>
          <target state="translated">このメンバーの追加データフィールドの内容。このデータの一般的な形式の説明については、&lt;a href=&quot;https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT&quot;&gt;元のドキュメント&lt;/a&gt;を参照してください。文書化されていないサードパーティのデータが含まれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="5e9be2c8175e2abe02a707a8002878697ac86dfd" translate="yes" xml:space="preserve">
          <source>The contents of strings and comments are not tokenized. Consequently, comment openings occurring within a string do not begin a comment, and string delimiters within a comment do not affect the recognition of comment closings and nested &lt;code&gt;/+&lt;/code&gt; comment openings. With the exception of &lt;code&gt;/+&lt;/code&gt; occurring within a &lt;code&gt;/+&lt;/code&gt; comment, comment openings within a comment are ignored.</source>
          <target state="translated">文字列とコメントの内容はトークン化されません。その結果、文字列内で発生するコメントの開始はコメントを開始せず、コメント内の文字列区切り文字はコメントの終了およびネストされた &lt;code&gt;/+&lt;/code&gt; コメントの開始の認識に影響しません。 &lt;code&gt;/+&lt;/code&gt; コメント内で発生する &lt;code&gt;/+&lt;/code&gt; を除いて、コメント内のコメント開始は無視されます。</target>
        </trans-unit>
        <trans-unit id="acc47ba92e60a8eb6a7f0995cfd09e1266cb2c0b" translate="yes" xml:space="preserve">
          <source>The convenient digest template allows for quick hashing of any data.</source>
          <target state="translated">便利なダイジェストテンプレートは、あらゆるデータを素早くハッシュすることができます。</target>
        </trans-unit>
        <trans-unit id="9df1871b1d5b6cf09ccc48d6467fcecce1d269f6" translate="yes" xml:space="preserve">
          <source>The converted associative array initializer or ErrorExp if &lt;code&gt;ai&lt;/code&gt; is not an associative array initializer.</source>
          <target state="translated">変換された連想配列初期化子、または &lt;code&gt;ai&lt;/code&gt; が連想配列初期化子でない場合はErrorExp 。</target>
        </trans-unit>
        <trans-unit id="f43effea59b8beccdd892ba167ecb555ed8c79da" translate="yes" xml:space="preserve">
          <source>The copy constructor can be overloaded with different qualifiers applied to the parameter (copying from a qualified source) or to the copy constructor itself (copying to a qualified destination):</source>
          <target state="translated">コピーコンストラクタは、パラメータに異なる修飾子を適用してオーバーロードすることができます(修飾されたソースからのコピー)。</target>
        </trans-unit>
        <trans-unit id="190d6795cdd5f40388f14ac3afa87aeffbee0f68" translate="yes" xml:space="preserve">
          <source>The copy constructor is type checked as a normal constructor.</source>
          <target state="translated">コピーコンストラクタは通常のコンストラクタと同様に型チェックを行います。</target>
        </trans-unit>
        <trans-unit id="8ce4fd58f0ef3f442e38a96e86e12b71ac036747" translate="yes" xml:space="preserve">
          <source>The corresponding argument is formatted in a manner consistent with its type:</source>
          <target state="translated">対応する引数は、その型と一致する方法でフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="48e51bdf1a95a79ac6426f7eff677cbb11ecae43" translate="yes" xml:space="preserve">
          <source>The corresponding argument must be a character type.</source>
          <target state="translated">対応する引数は文字型でなければなりません。</target>
        </trans-unit>
        <trans-unit id="0274ce33cba3929bfbdf7475c2fd6fc9d51d564e" translate="yes" xml:space="preserve">
          <source>The corresponding argument must be an integral type and is formatted as an integer. If the argument is a signed type and the</source>
          <target state="translated">対応する引数は整数型でなければなりません。引数が符号付き型で</target>
        </trans-unit>
        <trans-unit id="0178a031a9f0514977acc39575ef4aaa0e2662a0" translate="yes" xml:space="preserve">
          <source>The corresponding lowercase letter, if &lt;code&gt;c&lt;/code&gt; is an uppercase ASCII character, otherwise &lt;code&gt;c&lt;/code&gt; itself.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; が大文字のASCII文字の場合、対応する小文字。それ以外の場合は &lt;code&gt;c&lt;/code&gt; 自体。</target>
        </trans-unit>
        <trans-unit id="69cee4c45eeccc903fcf47055f5f19036cae6663" translate="yes" xml:space="preserve">
          <source>The corresponding unsigned numeric type for &lt;code&gt;T&lt;/code&gt; with the same type qualifiers.  If &lt;code&gt;T&lt;/code&gt; is not a integral or vector, a compile-time error is given.</source>
          <target state="translated">同じ型修飾子を持つ &lt;code&gt;T&lt;/code&gt; に対応する符号なし数値型。 &lt;code&gt;T&lt;/code&gt; が整数またはベクトルでない場合、コンパイル時エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="65ac2725a8076a2b686ff66848f84c573dbad022" translate="yes" xml:space="preserve">
          <source>The corresponding uppercase letter, if &lt;code&gt;c&lt;/code&gt; is a lowercase ASCII character, otherwise &lt;code&gt;c&lt;/code&gt; itself.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; が小文字のASCII文字の場合、対応する大文字。それ以外の場合は &lt;code&gt;c&lt;/code&gt; 自体。</target>
        </trans-unit>
        <trans-unit id="c9ce88bd48ff277e4bfb8bb20fde5641ab64da29" translate="yes" xml:space="preserve">
          <source>The coverage callback.</source>
          <target state="translated">カバレッジコールバックです。</target>
        </trans-unit>
        <trans-unit id="fe4e5d3b2725d57149f74ea4401dddd72e356025" translate="yes" xml:space="preserve">
          <source>The created GC instance or &lt;code&gt;null&lt;/code&gt; if no factory for that name was registered</source>
          <target state="translated">作成されたGCインスタンス、またはその名前のファクトリが登録されていない場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="25c75bcefa05f1c507f7f1fc6ff9cd42539bbd75" translate="yes" xml:space="preserve">
          <source>The curl_easy_pause function pauses or unpauses transfers. Select the new state by setting the bitmask, use the convenience defines below.</source>
          <target state="translated">curl_easy_pause 関数は、転送を一時停止または一時停止解除します。ビットマスクを設定して新しい状態を選択します。</target>
        </trans-unit>
        <trans-unit id="153bfd2d6b2d30ac140c40feedadba5366f389ef" translate="yes" xml:space="preserve">
          <source>The curl_easy_strerror function may be used to turn a CURLcode value into the equivalent human readable error string. This is useful for printing meaningful error messages.</source>
          <target state="translated">curl_easy_strerror 関数を使用して、CURLcode 値を同等の人間が読めるエラー文字列に変換することができます。これは意味のあるエラーメッセージを印刷するのに便利です。</target>
        </trans-unit>
        <trans-unit id="e7d8cb9ade20ed61c82c1a60ebe359477845f192" translate="yes" xml:space="preserve">
          <source>The curl_multi_strerror function may be used to turn a CURLMcode value into the equivalent human readable error string. This is useful for printing meaningful error messages.</source>
          <target state="translated">curl_multi_strerror 関数を使用して、CURLMcode 値を同等の人間が読めるエラー文字列に変換することができます。これは、意味のあるエラーメッセージを印刷するのに便利です。</target>
        </trans-unit>
        <trans-unit id="8ac8c7edec906e82e20cff95e57160d4c2ae8742" translate="yes" xml:space="preserve">
          <source>The curl_share_strerror function may be used to turn a CURLSHcode value into the equivalent human readable error string. This is useful for printing meaningful error messages.</source>
          <target state="translated">curl_share_strerror 関数を使用して、CURLSHcode 値を同等の人間が読めるエラー文字列に変換することができます。これは意味のあるエラーメッセージを印刷するのに便利です。</target>
        </trans-unit>
        <trans-unit id="12b95a210f2fd732ae6323a477ee3db950ce1e48" translate="yes" xml:space="preserve">
          <source>The current capacity of this &lt;code&gt;SocketSet&lt;/code&gt;. The exact meaning of the return value varies from platform to platform.</source>
          <target state="translated">この &lt;code&gt;SocketSet&lt;/code&gt; の現在の容量。戻り値の正確な意味は、プラットフォームによって異なります。</target>
        </trans-unit>
        <trans-unit id="b7e8d20bcf3e91b443f49906cb7f9c26202d7b33" translate="yes" xml:space="preserve">
          <source>The current chunk of encoded data.</source>
          <target state="translated">符号化されたデータの現在のチャンク。</target>
        </trans-unit>
        <trans-unit id="5f09ff18e0bf3e3a50451c990acfd44da2f4d0cf" translate="yes" xml:space="preserve">
          <source>The current collect handler or null if none has been set.</source>
          <target state="translated">現在のコレクトハンドラ、または設定されていない場合はnull。</target>
        </trans-unit>
        <trans-unit id="ff00e2ec15ad157fa0acd49db009126af4219c9c" translate="yes" xml:space="preserve">
          <source>The current day of the week.</source>
          <target state="translated">現在の曜日。</target>
        </trans-unit>
        <trans-unit id="5445bb4bc1730b9d0cce5b36844644b773e9edcb" translate="yes" xml:space="preserve">
          <source>The current decoded byte.</source>
          <target state="translated">現在のデコードされたバイト。</target>
        </trans-unit>
        <trans-unit id="d4f2882db12d78c2fc4e970047ad93065891fe53" translate="yes" xml:space="preserve">
          <source>The current directory for the parent process.</source>
          <target state="translated">親プロセスのカレントディレクトリ。</target>
        </trans-unit>
        <trans-unit id="62615ccff9de65abffb1ae1e70b58ec0562e8494" translate="yes" xml:space="preserve">
          <source>The current encoded character.</source>
          <target state="translated">現在のエンコードされた文字。</target>
        </trans-unit>
        <trans-unit id="2bcc037a390d8689344ebfd625c83c159bbdaa3a" translate="yes" xml:space="preserve">
          <source>The current implementation is contained in and defined by &lt;a href=&quot;https://github.com/dlang/druntime/blob/master/src/rt/aaA.d&quot;&gt;rt/aaA.d&lt;/a&gt;.</source>
          <target state="translated">現在の実装は&lt;a href=&quot;https://github.com/dlang/druntime/blob/master/src/rt/aaA.d&quot;&gt;rt / aaA.dに&lt;/a&gt;含まれており、これによって定義されています。</target>
        </trans-unit>
        <trans-unit id="135564ffafda532e35fa0b7d48812ffee033cd42" translate="yes" xml:space="preserve">
          <source>The current implementation is optimized for little endian architectures. It will exhibit different results on big endian architectures and a slightly less uniform distribution.</source>
          <target state="translated">現在の実装は、リトルエンディアンアーキテクチャ用に最適化されています。大きなエンディアン・アーキテクチャでは異なる結果が得られ、分布の均一性が若干低下します。</target>
        </trans-unit>
        <trans-unit id="5d6f2623d60fb655268313ce604e66563648e710" translate="yes" xml:space="preserve">
          <source>The current implementation makes use of the zlib compression library.</source>
          <target state="translated">現在の実装では zlib 圧縮ライブラリを利用しています。</target>
        </trans-unit>
        <trans-unit id="225274ac2b2419e7addd684159bba23d3f813f5d" translate="yes" xml:space="preserve">
          <source>The current implementation mostly conforms to &lt;a href=&quot;https://www.iso.org/standard/60101.html&quot;&gt;ISO/IEC 21320-1:2015&lt;/a&gt;, which means,</source>
          <target state="translated">現在の実装は、ほとんど&lt;a href=&quot;https://www.iso.org/standard/60101.html&quot;&gt;ISO / IEC 21320-1：2015&lt;/a&gt;に準拠しています。つまり、</target>
        </trans-unit>
        <trans-unit id="8b386bdee0746666a56a36200a693020a21530e4" translate="yes" xml:space="preserve">
          <source>The current legacy module unit tester handler or null if none has been set.</source>
          <target state="translated">現在のレガシー・モジュール・ユニット・テスター・ハンドラ、または設定されていない場合はNULL。</target>
        </trans-unit>
        <trans-unit id="8ef65e94b9168b0ff7203f6b263d0e8b2bd6eeac" translate="yes" xml:space="preserve">
          <source>The current module unit tester handler or null if none has been set.</source>
          <target state="translated">現在のモジュール・ユニット・テスター・ハンドラ、または何も設定されていない場合はNULL。</target>
        </trans-unit>
        <trans-unit id="6f8938955ef3df10335744a73b91094b9fffec70" translate="yes" xml:space="preserve">
          <source>The current month of the year.</source>
          <target state="translated">その年の現在の月のこと。</target>
        </trans-unit>
        <trans-unit id="67943f85151903b71f2ef45fecfce18f374500bf" translate="yes" xml:space="preserve">
          <source>The current system tick. The number of ticks per second varies from system to system. &lt;code&gt;currSystemTick&lt;/code&gt; uses a monotonic clock, so it's intended for precision timing by comparing relative time values, not for getting the current system time.</source>
          <target state="translated">現在のシステムティック。1秒あたりのティック数は、システムによって異なります。 &lt;code&gt;currSystemTick&lt;/code&gt; は単調クロックを使用するため、現在のシステム時刻を取得するためではなく、相対時刻値を比較して正確なタイミングを実現することを目的としています。</target>
        </trans-unit>
        <trans-unit id="222a86bbae85929301dc215f9e9c008965d24955" translate="yes" xml:space="preserve">
          <source>The current time of the system's monotonic clock. This has no relation to the wall clock time, as the wall clock time can be adjusted (e.g. by NTP), whereas the monotonic clock always moves forward. The source of the monotonic time is system-specific.</source>
          <target state="translated">システムの単調時計の現在時刻。これは壁時計の時間とは関係がありません。壁時計の時間は(NTPなどで)調整できるのに対し、モノトニック時計は常に前進しているからです。モノトニック時計のソースはシステム固有のものです。</target>
        </trans-unit>
        <trans-unit id="6d131b2d67d2e2d0708dd4d35e46ff7bb470d695" translate="yes" xml:space="preserve">
          <source>The current time zone of this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;. It's internal time is always kept in UTC, so there are no conversion issues between time zones due to DST. Functions which return all or part of the time - such as hours - adjust the time to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s time zone before returning.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の現在のタイムゾーン。内部時刻は常にUTCで保持されるため、DSTによるタイムゾーン間の変換の問題はありません。時間など、時間のすべてまたは一部を返す関数は、戻る前にこの&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;のタイムゾーンに時間を調整します。</target>
        </trans-unit>
        <trans-unit id="92e4138ca0558ee1a8d76b41157b476bc178803c" translate="yes" xml:space="preserve">
          <source>The current time zone of this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;. Its internal time is always kept in UTC, so there are no conversion issues between time zones due to DST. Functions which return all or part of the time - such as hours - adjust the time to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s time zone before returning.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の現在のタイムゾーン。その内部時刻は常にUTCで保持されるため、DSTによるタイムゾーン間の変換の問題はありません。時間など、時間のすべてまたは一部を返す関数は、戻る前にこの&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;のタイムゾーンに時間を調整します。</target>
        </trans-unit>
        <trans-unit id="73b94772e416a8ec2451e84a4f045bcf0b0bd2f8" translate="yes" xml:space="preserve">
          <source>The current trace handler or null if none has been set.</source>
          <target state="translated">現在のトレースハンドラ、または何も設定されていない場合はnull。</target>
        </trans-unit>
        <trans-unit id="1168fa07ec5310179d0a7d8dd293fdee5d851995" translate="yes" xml:space="preserve">
          <source>The current version is MurmurHash3, which yields a 32-bit or 128-bit hash value. The older MurmurHash 1 and 2 are currently not supported.</source>
          <target state="translated">現在のバージョンはMurmurHash3で、32ビットまたは128ビットのハッシュ値を生成します。古いMurmurHash 1と2は現在サポートされていません。</target>
        </trans-unit>
        <trans-unit id="f46d4edbe0670620eb95290f8f2a6487face97bc" translate="yes" xml:space="preserve">
          <source>The data caches. If there are fewer than 5 physical caches levels, the remaining levels are set to size_t.max (== entire memory space)</source>
          <target state="translated">データキャッシュです。物理キャッシュレベルが5未満の場合、残りのレベルはsize_t.max(==メモリ空間全体)に設定されます。</target>
        </trans-unit>
        <trans-unit id="a6ef57ac8d9ec9aa6eaa6d13ed88211ab558ef56" translate="yes" xml:space="preserve">
          <source>The data is NOT copied by the library. Content-Type will default to application/octet-stream. Data is not converted or encoded by this method.</source>
          <target state="translated">データはライブラリによってコピーされません。Content-Typeのデフォルトはapplication/octet-streamになります。この方法ではデータは変換されず、エンコードされません。</target>
        </trans-unit>
        <trans-unit id="6bcbd37c2c2ac85eb1356e64319455a6bd36b26b" translate="yes" xml:space="preserve">
          <source>The data is NOT copied by the library. Content-Type will default to text/plain. Data is not converted or encoded by this method.</source>
          <target state="translated">データはライブラリによってコピーされません。Content-Typeのデフォルトはtext/plainです。この方法ではデータは変換されず、エンコードされません。</target>
        </trans-unit>
        <trans-unit id="cce9ef674e018900e5c73c744a07e56499cc18a7" translate="yes" xml:space="preserve">
          <source>The data is always shareable across threads. Even if the data is &lt;code&gt;const&lt;/code&gt;, the affix is modifiable by the same reasoning as for &lt;code&gt;immutable&lt;/code&gt;.</source>
          <target state="translated">データは常にスレッド間で共有できます。データが &lt;code&gt;const&lt;/code&gt; であっても、 &lt;code&gt;immutable&lt;/code&gt; と同じ理由で接辞を変更できます。</target>
        </trans-unit>
        <trans-unit id="493973138a3d3f979064d5411c98ae5301a703dd" translate="yes" xml:space="preserve">
          <source>The data that is to be logged.</source>
          <target state="translated">記録されるデータです。</target>
        </trans-unit>
        <trans-unit id="ca2344350b8df2bdd7d03df57b987d64c46b085c" translate="yes" xml:space="preserve">
          <source>The data that should be logged.</source>
          <target state="translated">記録すべきデータです。</target>
        </trans-unit>
        <trans-unit id="78b3f17895b8c6a1ec55d26a5815c6b3e2f691ad" translate="yes" xml:space="preserve">
          <source>The database disk image is malformed</source>
          <target state="translated">データベースのディスクイメージに異常がある</target>
        </trans-unit>
        <trans-unit id="99b3c2c49461425bf6cff4391127f75d483d0614" translate="yes" xml:space="preserve">
          <source>The database file is locked</source>
          <target state="translated">データベースファイルがロックされている</target>
        </trans-unit>
        <trans-unit id="5e44b1ae3d4ce260d0b6e54dfe79b9e83c8a047e" translate="yes" xml:space="preserve">
          <source>The database schema changed</source>
          <target state="translated">データベーススキーマが変更されました</target>
        </trans-unit>
        <trans-unit id="8c85f90f34182d4804f085ae127ba5dcaa363aac" translate="yes" xml:space="preserve">
          <source>The date portion of &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の日付部分。</target>
        </trans-unit>
        <trans-unit id="afe331c3b8358f5c9f6aa03d6d996e549edd7dd9" translate="yes" xml:space="preserve">
          <source>The day of the Gregorian Calendar to set this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; to.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;を設定するグレゴリオ暦の日。</target>
        </trans-unit>
        <trans-unit id="4ae0c452a064fb3ca47b7a7c9701724ac4dce1ca" translate="yes" xml:space="preserve">
          <source>The day of the Gregorian Calendar to set this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; to.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;に設定するグレゴリオ暦の日。</target>
        </trans-unit>
        <trans-unit id="bd19a7c8e8386d921c721461757d18c3618278c9" translate="yes" xml:space="preserve">
          <source>The day of the Gregorian Calendar to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;を設定するグレゴリオ暦の日。</target>
        </trans-unit>
        <trans-unit id="0b0bd119a12bf4f397ebf472b36184d281c6821c" translate="yes" xml:space="preserve">
          <source>The day of the month to set this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;'s day to.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;の日を設定する月の日。</target>
        </trans-unit>
        <trans-unit id="5240ff1dc8c3d7350efab2ccc0dcbc8c48902add" translate="yes" xml:space="preserve">
          <source>The day of the month to set this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;'s day to.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の日を設定する月の日。</target>
        </trans-unit>
        <trans-unit id="54dc94925cf86835f631cdafa18de7d7060f146b" translate="yes" xml:space="preserve">
          <source>The day of the month to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s day to.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の日を設定する月の日。</target>
        </trans-unit>
        <trans-unit id="f06065ad9961deec3076217123d1f3724a43ad9e" translate="yes" xml:space="preserve">
          <source>The day of the week is ignored beyond verifying that it's a valid day of the week, as the day of the week can be inferred from the date. It is not checked whether the given day of the week matches the actual day of the week of the given date (though it is technically invalid per the spec if the day of the week doesn't match the actual day of the week of the given date).</source>
          <target state="translated">曜日は日付から推測できるので、有効な曜日であることを確認する以上は無視されます。指定された曜日が指定された日付の実際の曜日と一致するかどうかはチェックされません (ただし、曜日が指定された日付の実際の曜日と一致しない場合は仕様上無効となります)。</target>
        </trans-unit>
        <trans-unit id="5e854e19e24462bd8df16bbd3e656946dc758006" translate="yes" xml:space="preserve">
          <source>The day of the week to get the number of days to.</source>
          <target state="translated">までの日数を取得するための曜日。</target>
        </trans-unit>
        <trans-unit id="9b2b14b5c754fd8843dde38b4959242869b20add" translate="yes" xml:space="preserve">
          <source>The day of the year to set which day of the year this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">年間通算日で、この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;がその年の何曜日であるかを設定します。</target>
        </trans-unit>
        <trans-unit id="ccf6b0017db205f1a9b8b83cdf38246cf64f3b0f" translate="yes" xml:space="preserve">
          <source>The day of the year to set which day of the year this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が存在する年間通算日を設定する年間通算日。</target>
        </trans-unit>
        <trans-unit id="8dcb327ec830e9013bbcabf4579c3b122dd13db5" translate="yes" xml:space="preserve">
          <source>The day of the year to set which day of the year this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;がオンになる年間の日を設定する年間通算日。</target>
        </trans-unit>
        <trans-unit id="1ca7f565ccafa6d910e84ff93887a8b0d0bb5eea" translate="yes" xml:space="preserve">
          <source>The day portion of the date.</source>
          <target state="translated">日付の日の部分。</target>
        </trans-unit>
        <trans-unit id="5ad71e8507c7301863c1c60659bd8b3c6b7f0dc6" translate="yes" xml:space="preserve">
          <source>The day to validate.</source>
          <target state="translated">検証する日です。</target>
        </trans-unit>
        <trans-unit id="99ff0048fa491b367eccc6b67cb9b69f2ad2defa" translate="yes" xml:space="preserve">
          <source>The decimal value to convert into the factorial number system.</source>
          <target state="translated">階乗数システムに変換する10進数の値。</target>
        </trans-unit>
        <trans-unit id="112d499aea5e8fc601570782799d1151e557b4de" translate="yes" xml:space="preserve">
          <source>The declarations in a mixin are placed in a nested scope and then &amp;lsquo;imported&amp;rsquo; into the surrounding scope. If the name of a declaration in a mixin is the same as a declaration in the surrounding scope, the surrounding declaration overrides the mixin one:</source>
          <target state="translated">ミックスイン内の宣言はネストされたスコープに配置され、周囲のスコープに「インポート」されます。ミックスインの宣言の名前が周囲のスコープの宣言と同じである場合、周囲の宣言がミックスインの宣言をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="1c2cdcf3cf79afdc906fde394e5c2b865521f41b" translate="yes" xml:space="preserve">
          <source>The decoded string</source>
          <target state="translated">復号化された文字列</target>
        </trans-unit>
        <trans-unit id="945488b25e8ef473c0f2b20f9c6b8b8c99511eb5" translate="yes" xml:space="preserve">
          <source>The decoding of the current element in the input.</source>
          <target state="translated">入力中の現在の要素のデコード。</target>
        </trans-unit>
        <trans-unit id="4f67de430c432c552831b7793db0a2c0326b2d16" translate="yes" xml:space="preserve">
          <source>The deduced type parameter for dynamic array and pointer arguments has an unqualified head:</source>
          <target state="translated">動的配列およびポインタ引数の推論型パラメータには、修飾されていない先頭があります。</target>
        </trans-unit>
        <trans-unit id="dc7258b7cd7137907e6fca7bf0fc234fc2e2ce18" translate="yes" xml:space="preserve">
          <source>The default &quot;User-Agent&quot; value send with a request. It has the form &quot;Phobos-std.net.curl/</source>
          <target state="translated">デフォルトの &quot;User-Agent &quot;の値はリクエストと一緒に送信されます。これは、&quot;Phobos-std.net.curl/&quot;というフォームを持っています。</target>
        </trans-unit>
        <trans-unit id="c3a368bff4f38586882207610a2dc73a031ba862" translate="yes" xml:space="preserve">
          <source>The default (or most common) setting for the current platform. That is, &lt;code&gt;no&lt;/code&gt; on Windows and Mac OS X, and &lt;code&gt;yes&lt;/code&gt; on all POSIX systems except Darwin (Linux, *BSD, etc.).</source>
          <target state="translated">現在のプラットフォームのデフォルト（または最も一般的な）設定。それは、ありません &lt;code&gt;no&lt;/code&gt; WindowsとMac OS X上で、そして &lt;code&gt;yes&lt;/code&gt; ダーウィン（Linuxでは、* BSDなど）を除くすべてのPOSIXシステム上。</target>
        </trans-unit>
        <trans-unit id="7a46984a3f96d58aec5d4d9868c2110f34d995ba" translate="yes" xml:space="preserve">
          <source>The default (or most common) setting for the current platform. That is, &lt;code&gt;no&lt;/code&gt; on Windows and Mac OS X, and &lt;code&gt;yes&lt;/code&gt; on all POSIX systems except OS X (Linux, *BSD, etc.).</source>
          <target state="translated">現在のプラットフォームのデフォルト（または最も一般的な）設定。つまり、WindowsおよびMac OS Xでは &lt;code&gt;no&lt;/code&gt; 、OS X（Linux、* BSDなど）を除くすべてのPOSIXシステムでは &lt;code&gt;yes&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="87b0a2695d56ceaeb7eb9433e1d06841db861c10" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;Logger&lt;/code&gt; will by default log to &lt;code&gt;stderr&lt;/code&gt; and has a default &lt;code&gt;LogLevel&lt;/code&gt; of &lt;code&gt;LogLevel.all&lt;/code&gt;. The default Logger can be accessed by using the property called &lt;code&gt;sharedLog&lt;/code&gt;. This property is a reference to the current default &lt;code&gt;Logger&lt;/code&gt;. This reference can be used to assign a new default &lt;code&gt;Logger&lt;/code&gt;.</source>
          <target state="translated">デフォルトの &lt;code&gt;Logger&lt;/code&gt; はデフォルトで &lt;code&gt;stderr&lt;/code&gt; にログを記録し、デフォルトの &lt;code&gt;LogLevel&lt;/code&gt; は &lt;code&gt;LogLevel.all&lt;/code&gt; です。デフォルトのLoggerには、 &lt;code&gt;sharedLog&lt;/code&gt; というプロパティを使用してアクセスできます。このプロパティは、現在のデフォルトの &lt;code&gt;Logger&lt;/code&gt; への参照です。この参照を使用して、新しいデフォルトの &lt;code&gt;Logger&lt;/code&gt; を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="b72f9c3623b76d776ddcc9d314e5ca75b551f9a9" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;alignedReallocate&lt;/code&gt; function first attempts to use &lt;code&gt;expand&lt;/code&gt;. If &lt;code&gt;Allocator.expand&lt;/code&gt; is not defined or returns &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;alignedReallocate&lt;/code&gt; allocates a new block of memory of appropriate size and copies data from the old block to the new block. Finally, if &lt;code&gt;Allocator&lt;/code&gt; defines &lt;code&gt;deallocate&lt;/code&gt;, &lt;code&gt;alignedReallocate&lt;/code&gt; uses it to free the old memory block.</source>
          <target state="translated">デフォルトの &lt;code&gt;alignedReallocate&lt;/code&gt; 関数は、最初に &lt;code&gt;expand&lt;/code&gt; を使用しようとします。場合 &lt;code&gt;Allocator.expand&lt;/code&gt; が定義または返すされていない &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;alignedReallocate&lt;/code&gt; は、新しいブロックに古いブロックから適切なサイズとコピーデータのメモリの新しいブロックを割り当てます。場合は最後に、 &lt;code&gt;Allocator&lt;/code&gt; 定義されて &lt;code&gt;deallocate&lt;/code&gt; 、 &lt;code&gt;alignedReallocate&lt;/code&gt; は、古いメモリブロックを解放するためにそれを使用しています。</target>
        </trans-unit>
        <trans-unit id="11d5f052dd46a2986ac861f2bb2c8694b1113749" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;reallocate&lt;/code&gt; function first attempts to use &lt;code&gt;expand&lt;/code&gt;. If &lt;code&gt;Allocator.expand&lt;/code&gt; is not defined or returns &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;reallocate&lt;/code&gt; allocates a new block of memory of appropriate size and copies data from the old block to the new block. Finally, if &lt;code&gt;Allocator&lt;/code&gt; defines &lt;code&gt;deallocate&lt;/code&gt;, &lt;code&gt;reallocate&lt;/code&gt; uses it to free the old memory block.</source>
          <target state="translated">デフォルトの &lt;code&gt;reallocate&lt;/code&gt; 関数は、最初に &lt;code&gt;expand&lt;/code&gt; を使用しようとします。 &lt;code&gt;Allocator.expand&lt;/code&gt; が定義されていないか &lt;code&gt;false&lt;/code&gt; を返す場合、 &lt;code&gt;reallocate&lt;/code&gt; は適切なサイズの新しいメモリブロックを割り当て、古いブロックから新しいブロックにデータをコピーします。最後に、場合 &lt;code&gt;Allocator&lt;/code&gt; 定義 &lt;code&gt;deallocate&lt;/code&gt; 、 &lt;code&gt;reallocate&lt;/code&gt; 古いメモリブロックを解放するためにそれを使用しています。</target>
        </trans-unit>
        <trans-unit id="b4b278f4d2972020f4ba9b115cb1013b58d050b9" translate="yes" xml:space="preserve">
          <source>The default alignment is &lt;code&gt;platformAlignment&lt;/code&gt;.</source>
          <target state="translated">デフォルトの配置は &lt;code&gt;platformAlignment&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="86db8edf378862e012fa8f8fcf58a7d5108946ce" translate="yes" xml:space="preserve">
          <source>The default allocator.</source>
          <target state="translated">デフォルトのアロケータです。</target>
        </trans-unit>
        <trans-unit id="84034aca41f128da43b408ac2e8f9758bed62159" translate="yes" xml:space="preserve">
          <source>The default constructor for the &lt;code&gt;NullLogger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NullLogger&lt;/code&gt; のデフォルトのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="60dfda69676fc480f5f6faa42faf083636619c98" translate="yes" xml:space="preserve">
          <source>The default constructor for the &lt;code&gt;StdForwardLogger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;StdForwardLogger&lt;/code&gt; のデフォルトのコンストラクター。</target>
        </trans-unit>
        <trans-unit id="44546e235ac407a00aa0d819574df31ac96d3e13" translate="yes" xml:space="preserve">
          <source>The default directory where the TZ Database files are stored. It's empty for Windows, since Windows doesn't have them. You can also use the TZDatabaseDir version to pass an arbitrary path at compile-time, rather than hard-coding it here. Android concatenates all time zone data into a single file called tzdata and stores it in the directory below.</source>
          <target state="translated">TZ Databaseファイルが保存されているデフォルトのディレクトリです。Windowsでは空のディレクトリです。TZDatabaseDirバージョンを使って、コンパイル時に任意のパスを渡すこともできます。Android はすべてのタイムゾーンデータを tzdata という一つのファイルに連結し、以下のディレクトリに保存します。</target>
        </trans-unit>
        <trans-unit id="8df16f51964aeebfe4bc3a051bf58dca3ecbc7ca" translate="yes" xml:space="preserve">
          <source>The default extension to use.</source>
          <target state="translated">使用するデフォルトの拡張子。</target>
        </trans-unit>
        <trans-unit id="85ad9abd95b264167c92cdc2a1adee2b573ef599" translate="yes" xml:space="preserve">
          <source>The default good size allocation is deduced as &lt;code&gt;n&lt;/code&gt; rounded up to the allocator's alignment.</source>
          <target state="translated">デフォルトの適切なサイズの割り当ては、 &lt;code&gt;n&lt;/code&gt; がアロケータの配置に切り上げられると推定されます。</target>
        </trans-unit>
        <trans-unit id="1b0fe911bc214b516e59012b05dd0e28695378c4" translate="yes" xml:space="preserve">
          <source>The default initializer is evaluated at compile time.</source>
          <target state="translated">デフォルトのイニシャライザはコンパイル時に評価されます。</target>
        </trans-unit>
        <trans-unit id="09875c3ec3c0432a38d2825c4ab0b5b1b8a97473" translate="yes" xml:space="preserve">
          <source>The default initializers are evaluated at compile time.</source>
          <target state="translated">デフォルトのイニシャライザはコンパイル時に評価されます。</target>
        </trans-unit>
        <trans-unit id="b315cb15ffa0ca81f8d98d7b66d415e4aa5dc1b4" translate="yes" xml:space="preserve">
          <source>The default initializers may not contain references to mutable data.</source>
          <target state="translated">デフォルトのイニシャライザには、変異可能なデータへの参照が含まれていない場合があります。</target>
        </trans-unit>
        <trans-unit id="198b7d1107c41684b20ca53736c0025d3ab9b73c" translate="yes" xml:space="preserve">
          <source>The default inline behavior is typically selectable with a compiler switch such as &lt;a href=&quot;https://dlang.org/dmd.html#switch-inline&quot;&gt;&lt;em&gt;-inline&lt;/em&gt;.&lt;/a&gt;</source>
          <target state="translated">デフォルトのインライン動作は通常、&lt;a href=&quot;https://dlang.org/dmd.html#switch-inline&quot;&gt;&lt;em&gt;-inline&lt;/em&gt;&lt;/a&gt;などのコンパイラスイッチで選択できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d4be45be08a1c8c22dbb96c12305596159d25e0b" translate="yes" xml:space="preserve">
          <source>The default layout of the fields of a struct is an exact match with the</source>
          <target state="translated">構造体のフィールドのデフォルトのレイアウトは</target>
        </trans-unit>
        <trans-unit id="2f337be32b3aefecfcb4859e625057b7bd434d30" translate="yes" xml:space="preserve">
          <source>The default linkage for member functions of COM classes is &lt;code&gt;extern(System)&lt;/code&gt;.  Note that if you want to implement or override any base-class methods of D interfaces or classes (ones which do not inherit from &lt;code&gt;IUnknown&lt;/code&gt;), you have to explicitly mark them as having the &lt;code&gt;extern(D)&lt;/code&gt; linkage:</source>
          <target state="translated">COMクラスのメンバー関数のデフォルトのリンケージは &lt;code&gt;extern(System)&lt;/code&gt; です。Dインターフェイスまたはクラス（ &lt;code&gt;IUnknown&lt;/code&gt; から継承しないもの）の基本クラスメソッドを実装またはオーバーライドする場合は、それらに &lt;code&gt;extern(D)&lt;/code&gt; リンケージがあることを明示的にマークする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7f4262f95c707a983226fca6d9fb6bf885e79c8c" translate="yes" xml:space="preserve">
          <source>The default namespaces (&lt;a href=&quot;#dnsNamespace&quot;&gt;&lt;code&gt;dnsNamespace&lt;/code&gt;&lt;/a&gt;, ...) defined by this module should be used when appropriate.</source>
          <target state="translated">このモジュールで定義されているデフォルトの名前空間（&lt;a href=&quot;#dnsNamespace&quot;&gt; &lt;code&gt;dnsNamespace&lt;/code&gt; &lt;/a&gt;、...）は、適切な場合に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c2f98d39df30add62dee5880988c4ddc9def3c49" translate="yes" xml:space="preserve">
          <source>The default scheduling priority that is set for a thread. On systems where multiple scheduling policies are defined, this value represents the default priority for the scheduling policy of the process.</source>
          <target state="translated">スレッドに設定されるデフォルトのスケジューリング優先度。複数のスケジューリングポリシーが定義されているシステムでは、この値はプロセスのスケジューリングポリシーのデフォルトの優先度を表します。</target>
        </trans-unit>
        <trans-unit id="39cb60f50514180fcf08c0496a2e6d58784782d0" translate="yes" xml:space="preserve">
          <source>The default seed value.</source>
          <target state="translated">デフォルトのシード値。</target>
        </trans-unit>
        <trans-unit id="cd5dbb92220cc6a8e8b2d5783ecebaacc60df5fc" translate="yes" xml:space="preserve">
          <source>The default value of a &lt;code&gt;Checked!(X, WithNaN)&lt;/code&gt; is its NaN value, so care must be taken that all variables are explicitly initialized. Any arithmetic and logic operation involving at least on NaN becomes NaN itself. All of &lt;code&gt;a == b&lt;/code&gt;, &lt;code&gt;a &amp;lt; b&lt;/code&gt;, &lt;code&gt;a &amp;gt; b&lt;/code&gt;, &lt;code&gt;a &amp;lt;= b&lt;/code&gt;, &lt;code&gt;a &amp;gt;= b&lt;/code&gt; yield &lt;code&gt;false&lt;/code&gt; if at least one of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is NaN.</source>
          <target state="translated">&lt;code&gt;Checked!(X, WithNaN)&lt;/code&gt; のデフォルト値はそのNaN値なので、すべての変数が明示的に初期化されるように注意する必要があります。少なくともNaNを含む算術および論理演算はすべてNaNになります。すべての &lt;code&gt;a == b&lt;/code&gt; 、 &lt;code&gt;a &amp;lt; b&lt;/code&gt; 、 &lt;code&gt;a &amp;gt; b&lt;/code&gt; 、 &lt;code&gt;a &amp;lt;= b&lt;/code&gt; 、 &lt;code&gt;a &amp;gt;= b&lt;/code&gt; 収率の &lt;code&gt;false&lt;/code&gt; の少なくとも1つが及び &lt;code&gt;b&lt;/code&gt; は NaNです。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60336805f352e76f45059516632dd3aebf2bb4c8" translate="yes" xml:space="preserve">
          <source>The default value used for values not explicitly initialized. It is the NaN value, i.e. &lt;code&gt;T.min&lt;/code&gt; for signed integrals and &lt;code&gt;T.max&lt;/code&gt; for unsigned integrals.</source>
          <target state="translated">明示的に初期化されていない値に使用されるデフォルト値。これは、NaN値、すなわちある &lt;code&gt;T.min&lt;/code&gt; 署名積分用と &lt;code&gt;T.max&lt;/code&gt; 符号なしの積分のために。</target>
        </trans-unit>
        <trans-unit id="175f9e59ae6d8d45a5ecbc8d3bf95ccec9b46335" translate="yes" xml:space="preserve">
          <source>The default value.</source>
          <target state="translated">デフォルト値です。</target>
        </trans-unit>
        <trans-unit id="5298372926ef4a5550bf5eba62d1b79774021d32" translate="yes" xml:space="preserve">
          <source>The default way to configure the runtime is by passing command line arguments starting with &lt;code&gt;--DRT-&lt;/code&gt; and followed by the option name, e.g. &lt;code&gt;--DRT-gcopt&lt;/code&gt; to configure the GC. When command line parsing is enabled, command line options starting with &lt;code&gt;--DRT-&lt;/code&gt; are filtered out before calling main, so the program will not see them. They are still available via &lt;code&gt;rt_args()&lt;/code&gt;.</source>
          <target state="translated">ランタイムを構成するデフォルトの方法は、 &lt;code&gt;--DRT-&lt;/code&gt; で始まり、オプション名が続くコマンドライン引数を渡すことです。たとえば、 &lt;code&gt;--DRT-gcopt&lt;/code&gt; を使用してGCを構成します。コマンドライン解析が有効な場合、 &lt;code&gt;--DRT-&lt;/code&gt; 始まるコマンドラインオプションはmainを呼び出す前に除外されるため、プログラムはそれらを認識しません。それらは、 &lt;code&gt;rt_args()&lt;/code&gt; を介して引き続き利用できます。</target>
        </trans-unit>
        <trans-unit id="ba1df5a4c503e2e5ff553646b53232a4dc9fad0b" translate="yes" xml:space="preserve">
          <source>The delegate or function having the currently held value as parameter is called with &lt;code&gt;variant&lt;/code&gt;'s current value. Visiting handlers are passed in the template parameter list. It is statically ensured that all held types of &lt;code&gt;variant&lt;/code&gt; are handled across all handlers. &lt;code&gt;visit&lt;/code&gt; allows delegates and static functions to be passed as parameters.</source>
          <target state="translated">現在保持されている値をパラメーターとして持つデリゲートまたは関数は、 &lt;code&gt;variant&lt;/code&gt; の現在の値で呼び出されます。訪問ハンドラは、テンプレートパラメータリストで渡されます。保持されているすべての種類の &lt;code&gt;variant&lt;/code&gt; がすべてのハンドラで処理されることが静的に保証されます。 &lt;code&gt;visit&lt;/code&gt; は、デリゲートと静的関数をパラメーターとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="a9153a9a54229a058c01d02e777396fe2144ca6b" translate="yes" xml:space="preserve">
          <source>The delegate the fiber should call</source>
          <target state="translated">ファイバーのデリゲートは</target>
        </trans-unit>
        <trans-unit id="2b6e50abb4f0914ce14cb54a228ba5c564bcd73a" translate="yes" xml:space="preserve">
          <source>The delegate to be called if the value evaluates to false.</source>
          <target state="translated">値が false と評価された場合に呼び出されるデリゲート。</target>
        </trans-unit>
        <trans-unit id="95f480c7d2ae51400206ecb9e084d35ded98b8d3" translate="yes" xml:space="preserve">
          <source>The demangle module converts mangled D symbols to a representation similar to what would have existed in code.</source>
          <target state="translated">DEMANGLE モジュールは、変形した D のシンボルを、コード内に存在するであろうものと同じような表現に変換します。</target>
        </trans-unit>
        <trans-unit id="48b3f69fad23d9b2d8c32fdb445562e4fbbe9924" translate="yes" xml:space="preserve">
          <source>The demangled name or the original string if the name is not a mangled D name.</source>
          <target state="translated">デマングされた名前、またはマングされたD名でない場合は元の文字列。</target>
        </trans-unit>
        <trans-unit id="0cc17d9f531c72835705e440a701b890a1903124" translate="yes" xml:space="preserve">
          <source>The demangled type name or the original string if the name is not a mangled D type.</source>
          <target state="translated">デマングルされたD型の名前、またはマングルされたD型でない場合は元の文字列。</target>
        </trans-unit>
        <trans-unit id="60c01151d0f392e7605b5a47b38d319dce929d2b" translate="yes" xml:space="preserve">
          <source>The description of this option</source>
          <target state="translated">このオプションの説明</target>
        </trans-unit>
        <trans-unit id="f84ede836de109cb779bab9fc0b1fd8d408f2a87" translate="yes" xml:space="preserve">
          <source>The desired &lt;a href=&quot;#FunctionAttribute&quot;&gt;&lt;code&gt;FunctionAttribute&lt;/code&gt;&lt;/a&gt;s of the result type.</source>
          <target state="translated">結果タイプの目的の&lt;a href=&quot;#FunctionAttribute&quot;&gt; &lt;code&gt;FunctionAttribute&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="23d72f95e07dcbef384a7cb27da3b8ccb18812f3" translate="yes" xml:space="preserve">
          <source>The desired allocation size in bytes.</source>
          <target state="translated">希望する割り当てサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="9a65e8347e92f2a998eac03474e781c85ca96f7b" translate="yes" xml:space="preserve">
          <source>The desired extension size in bytes.</source>
          <target state="translated">希望する拡張子のサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="af2fe61e437d6dfeba930d32d765dbac31989651" translate="yes" xml:space="preserve">
          <source>The desired linkage of the result type.</source>
          <target state="translated">結果タイプの希望する連結。</target>
        </trans-unit>
        <trans-unit id="59cf426293fa685ffeb3c9d3c020fed48d5397c1" translate="yes" xml:space="preserve">
          <source>The desired size in bytes.</source>
          <target state="translated">希望するサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="ac522378c8d7addb4cb9d53d5b7d048c9264b788" translate="yes" xml:space="preserve">
          <source>The destructor automatically closes the file as soon as no &lt;code&gt;File&lt;/code&gt; object refers to it anymore.</source>
          <target state="translated">デストラクタは、 &lt;code&gt;File&lt;/code&gt; オブジェクトがそれを参照しなくなるとすぐに、ファイルを自動的に閉じます。</target>
        </trans-unit>
        <trans-unit id="8c331e4eecbd8270b0e4ce21fab87b6858ba74cc" translate="yes" xml:space="preserve">
          <source>The destructor for the super class automatically gets called when the destructor ends. There is no way to call the super destructor explicitly.</source>
          <target state="translated">スーパークラスのデストラクタは、デストラクタが終了すると自動的に呼び出されます。スーパークラスのデストラクタを明示的に呼び出す方法はありません。</target>
        </trans-unit>
        <trans-unit id="f6330e2ba0f0050af5f9f70cf0eec4389de5eb4b" translate="yes" xml:space="preserve">
          <source>The destructor is expected to release any resources held by the object.</source>
          <target state="translated">デストラクタは、オブジェクトが保持するリソースを解放することが期待されます。</target>
        </trans-unit>
        <trans-unit id="7159cd12fe27172c0a0982e4b8092e7e75f8821b" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. For instance, rolling a &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; one year's worth of days gets the exact same &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。たとえば、1年分の&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;ロールすると、まったく同じ&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;が取得されます。</target>
        </trans-unit>
        <trans-unit id="b7c404d040d8fd24e8c117abcb04c6ad2d048280" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. For instance, rolling a &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; one year's worth of days gets the exact same &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。たとえば、&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; を&lt;/a&gt; 1年分ロールすると、まったく同じ&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が取得されます。</target>
        </trans-unit>
        <trans-unit id="b3c3c9ee3f68d7a39533f5e98688e28838282e6b" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. For instance, rolling a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; one year's worth of days gets the exact same &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。たとえば、&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; を&lt;/a&gt; 1年分ロールすると、まったく同じ&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; が取得され&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="24751c549ef6022fb5253fa2ab74c9f98d81a539" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. For instance, rolling a &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt; one hours's worth of minutes gets the exact same &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。たとえば、&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; を&lt;/a&gt; 1時間分の分だけロールすると、まったく同じ&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; が取得され&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e8c7039887bf08601f56a0509005c2c5688e3ba7" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. Rolling a &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; 12 months gets the exact same &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;. However, the days can still be affected due to the differing number of days in each month.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 12か月ロールすると、まったく同じ&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;ます。ただし、月によって日数が異なるため、日数は影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="4c92275a7e175bacd3ce746d6adc1eff5f6f35c0" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. Rolling a &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; 12 months gets the exact same &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;. However, the days can still be affected due to the differing number of days in each month.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。12か月の&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; を&lt;/a&gt;ローリングしても、まったく同じ&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が得られます。ただし、月によって日数が異なるため、日数は影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="bd425db182cd0598846f2e904965692d4bd6f1e2" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. Rolling a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; 12 months gets the exact same &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;. However, the days can still be affected due to the differing number of days in each month.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; を&lt;/a&gt; 12か月間ローリングしても、まったく同じ&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;が得られます。ただし、月によって日数が異なるため、日数は影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="9607cb254c58607b6f72a2ec85c44f16a7c46305" translate="yes" xml:space="preserve">
          <source>The difference between this version of &lt;code&gt;everyDuration&lt;/code&gt; and the version which just takes a &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; is that this one also takes the number of years and months (along with an &lt;code&gt;AllowDayOverflow&lt;/code&gt; to indicate whether adding years and months should allow the days to overflow).</source>
          <target state="translated">このバージョンの差 &lt;code&gt;everyDuration&lt;/code&gt; だけかかりバージョン&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; は、&lt;/a&gt;この1つはまた、（一緒に年と月の数を取ることである &lt;code&gt;AllowDayOverflow&lt;/code&gt; 追加年と月オーバーフロー日を可能にすべきかどうかを示します） 。</target>
        </trans-unit>
        <trans-unit id="448504c864d4f8f6a21520c51c1f3e9b8a81d617" translate="yes" xml:space="preserve">
          <source>The digamma function is the logarithmic derivative of the gamma function.</source>
          <target state="translated">ジガンマ関数は、ガンマ関数の対数微分です。</target>
        </trans-unit>
        <trans-unit id="df031407b714e9d3fe5339c97f81f1b5df587638" translate="yes" xml:space="preserve">
          <source>The direction and magnitude of the 1st shift. Positive means left, negative means right.</source>
          <target state="translated">第1シフトの方向と大きさ。正は左、負は右を意味します。</target>
        </trans-unit>
        <trans-unit id="ac46a68fb5f59b21b538d08a263d443a6d4a88ba" translate="yes" xml:space="preserve">
          <source>The direction and magnitude of the 2nd shift. Positive means left, negative means right.</source>
          <target state="translated">第2シフトの方向と大きさ。正は左、負は右を意味します。</target>
        </trans-unit>
        <trans-unit id="2f490894285820c4987bf19f75fcde524a0fa198" translate="yes" xml:space="preserve">
          <source>The direction and magnitude of the 3rd shift. Positive means left, negative means right.</source>
          <target state="translated">第3シフトの方向と大きさ。正は左、負は右を意味します。</target>
        </trans-unit>
        <trans-unit id="3c5a37562720e9b61ecfa6b8583112dc5d6824cf" translate="yes" xml:space="preserve">
          <source>The direction in time to expand the interval.</source>
          <target state="translated">間隔を広げるための時間内の方向。</target>
        </trans-unit>
        <trans-unit id="52fc8addeaa24de333c4f04db15ff317feeb8f10" translate="yes" xml:space="preserve">
          <source>The direction to iterate in. If passing the return value to &lt;code&gt;fwdRange&lt;/code&gt;, use &lt;code&gt;Direction.fwd&lt;/code&gt;. If passing it to &lt;code&gt;bwdRange&lt;/code&gt;, use &lt;code&gt;Direction.bwd&lt;/code&gt;.</source>
          <target state="translated">反復する方向。戻り値を &lt;code&gt;fwdRange&lt;/code&gt; に渡す場合は、 &lt;code&gt;Direction.fwd&lt;/code&gt; を使用します。 &lt;code&gt;bwdRange&lt;/code&gt; に渡す場合は、 &lt;code&gt;Direction.bwd&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ae829e1bef022f58af3dfe6292cdbc4a3e16363d" translate="yes" xml:space="preserve">
          <source>The directories listed in the PATH environment variable.</source>
          <target state="translated">環境変数PATHにリストされているディレクトリ。</target>
        </trans-unit>
        <trans-unit id="745a52fd17585cda122240a437ff94eb24ff53ba" translate="yes" xml:space="preserve">
          <source>The directory from which the application loaded.</source>
          <target state="translated">アプリケーションがロードされたディレクトリ。</target>
        </trans-unit>
        <trans-unit id="c70ca0dd7d389cc0f66b4748ce2158d5f654afbf" translate="yes" xml:space="preserve">
          <source>The directory given by the &lt;code&gt;TEMP&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;TEMP&lt;/code&gt; 環境変数で指定されたディレクトリ。</target>
        </trans-unit>
        <trans-unit id="9ae0bd7ea20121e71f355b6ae61308dbc4fc4a8d" translate="yes" xml:space="preserve">
          <source>The directory given by the &lt;code&gt;TMP&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;TMP&lt;/code&gt; 環境変数で指定されたディレクトリ。</target>
        </trans-unit>
        <trans-unit id="daef8bc56ebc827befeb7f02e13c0987eaa60ed2" translate="yes" xml:space="preserve">
          <source>The directory given by the &lt;code&gt;TMPDIR&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;TMPDIR&lt;/code&gt; 環境変数で指定されたディレクトリ。</target>
        </trans-unit>
        <trans-unit id="d4eec1b6c0603738af374e4a976caa00a506fd85" translate="yes" xml:space="preserve">
          <source>The directory to iterate over. If empty, the current directory will be iterated.</source>
          <target state="translated">反復処理を行うディレクトリを指定します。空の場合は、カレントディレクトリを反復処理します。</target>
        </trans-unit>
        <trans-unit id="98b1c4850f41f23860e357cb3645bbbb143947fc" translate="yes" xml:space="preserve">
          <source>The directory where the TZ Database files are located.</source>
          <target state="translated">TZ データベースファイルが置かれているディレクトリです。</target>
        </trans-unit>
        <trans-unit id="5185a0b5ceb9f32e8b2ce8a938cb585e46dedffd" translate="yes" xml:space="preserve">
          <source>The directory where the TZ Database files are located. Because these files are not located on Windows systems, provide them and give their location here to use &lt;a href=&quot;#PosixTimeZone&quot;&gt;&lt;code&gt;PosixTimeZone&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">TZデータベースファイルが配置されているディレクトリ。これらのファイルはWindowsシステムに配置されていないため、&lt;a href=&quot;#PosixTimeZone&quot;&gt; &lt;code&gt;PosixTimeZone&lt;/code&gt; &lt;/a&gt;を使用するためにそれらを提供し、ここにその場所を指定します。</target>
        </trans-unit>
        <trans-unit id="1b936f38c2f1aa54bd76a7cc62b14148166a642a" translate="yes" xml:space="preserve">
          <source>The disadvantages of &lt;code&gt;ContiguousFreeList&lt;/code&gt; over &lt;code&gt;FreeList&lt;/code&gt; are its pay upfront model (as opposed to &lt;code&gt;FreeList&lt;/code&gt;'s pay-as-you-go approach), and a hard limit on the number of nodes in the list. Thus, a large number of long- lived objects may occupy the entire block, making it unavailable for serving allocations from the free list. However, an absolute cap on the free list size may be beneficial.</source>
          <target state="translated">欠点 &lt;code&gt;ContiguousFreeList&lt;/code&gt; 以上の &lt;code&gt;FreeList&lt;/code&gt; その有料先行モデル（とは対照的に、ある &lt;code&gt;FreeList&lt;/code&gt; の支払ようあなたゴーアプローチ）、およびリスト内のノードの数にハードリミット。したがって、多数の長期間存続するオブジェクトがブロック全体を占有する可能性があり、フリーリストからの割り当てに使用できなくなります。ただし、フリーリストのサイズに絶対的な上限を設定すると効果的です。</target>
        </trans-unit>
        <trans-unit id="3b64019a956fdeb2b48af242389c7dfaf52e1521" translate="yes" xml:space="preserve">
          <source>The distinction is made in the semantic analysis pass.</source>
          <target state="translated">意味分析パスで区別しています。</target>
        </trans-unit>
        <trans-unit id="d29faf2564401dd940d152dda18be8c2fa0d07a8" translate="yes" xml:space="preserve">
          <source>The document comment is a series of</source>
          <target state="translated">文書コメントは、一連の</target>
        </trans-unit>
        <trans-unit id="e57c999ce3911b8c1791d1a7eb04e0490e4fee0b" translate="yes" xml:space="preserve">
          <source>The documentation comment processor includes a simple macro text preprocessor. When a &amp;amp;dollar;(</source>
          <target state="translated">ドキュメントコメントプロセッサには、単純なマクロテキストプリプロセッサが含まれています。＆dollar;（</target>
        </trans-unit>
        <trans-unit id="0f835ee5f6e2ea0040d44210ead7dc160306901a" translate="yes" xml:space="preserve">
          <source>The documentation comments can themselves be commented using the &amp;amp;dollar;&lt;code&gt;(DDOC_COMMENT comment text)&lt;/code&gt; syntax. These comments do not nest.</source>
          <target state="translated">ドキュメントのコメント自体は、＆dollar;を使用してコメントを付けることができます。 &lt;code&gt;(DDOC_COMMENT comment text)&lt;/code&gt; 構文。これらのコメントはネストされません。</target>
        </trans-unit>
        <trans-unit id="ad9fa243a6cd23895dc3ad60e16a76e4b15cce21" translate="yes" xml:space="preserve">
          <source>The domain literal is not a valid RFC 5321 address literal</source>
          <target state="translated">ドメインリテラルは有効なRFC 5321アドレスリテラルではありません。</target>
        </trans-unit>
        <trans-unit id="e9bc2306173e1f523fc346c3259e214855410cc4" translate="yes" xml:space="preserve">
          <source>The domain literal is not a valid RFC 5321 address literal and it contains obsolete characters</source>
          <target state="translated">ドメインリテラルは有効なRFC 5321アドレスリテラルではなく、時代遅れの文字を含んでいます。</target>
        </trans-unit>
        <trans-unit id="9635c78033f40ef6473df58ddae1875249393348" translate="yes" xml:space="preserve">
          <source>The domain of definition is 0 &amp;lt;= x &amp;lt;= 1. In this implementation a and b are restricted to positive values. The integral from x to 1 may be obtained by the symmetry relation</source>
          <target state="translated">定義域は0 &amp;lt;= x &amp;lt;= 1です。この実装では、aおよびbは正の値に制限されています。xから1までの積分は、対称関係によって取得できます。</target>
        </trans-unit>
        <trans-unit id="7630f4b6e086656f20c44179d8d49a08885c5ad0" translate="yes" xml:space="preserve">
          <source>The domain part contains an element that is too long</source>
          <target state="translated">ドメイン部分には長すぎる要素が含まれています。</target>
        </trans-unit>
        <trans-unit id="f9e782a18f0e80044819c477465949e037991e2b" translate="yes" xml:space="preserve">
          <source>The domain part is too long</source>
          <target state="translated">ドメイン部分が長すぎる</target>
        </trans-unit>
        <trans-unit id="b4015656a3a26966f5bb779ad625cb099b930b1f" translate="yes" xml:space="preserve">
          <source>The domain part of the email address, that is, the part after the @ sign.</source>
          <target state="translated">メールアドレスのドメイン部分、つまり@記号の後の部分。</target>
        </trans-unit>
        <trans-unit id="bc43c1b6acb6b3f1be54a397e4365b408708f795" translate="yes" xml:space="preserve">
          <source>The drain of the data read.</source>
          <target state="translated">読み込んだデータのドレイン。</target>
        </trans-unit>
        <trans-unit id="d6c5fc3ceb4e2b528f0297088355338c6c888969" translate="yes" xml:space="preserve">
          <source>The duration from the starting point to the end point.</source>
          <target state="translated">開始点から終了点までの期間。</target>
        </trans-unit>
        <trans-unit id="13e96de5799e2b95c36e302f2857b76d002475c9" translate="yes" xml:space="preserve">
          <source>The duration to add to or subtract from this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; に&lt;/a&gt;加算または減算する期間。</target>
        </trans-unit>
        <trans-unit id="5de9a67b89b5b7a6e94e2e5ed705920f06e257b1" translate="yes" xml:space="preserve">
          <source>The duration to add to or subtract from this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に加算または減算するDuration。</target>
        </trans-unit>
        <trans-unit id="045eb63ee5246a358977769376ebbddf4f7e79de" translate="yes" xml:space="preserve">
          <source>The duration to add to the time point passed to the delegate.</source>
          <target state="translated">代議員に渡されたタイムポイントに追加する期間。</target>
        </trans-unit>
        <trans-unit id="f712fda6f39835e50109819b59fa2e17d776d88d" translate="yes" xml:space="preserve">
          <source>The duration to divide this &lt;code&gt;Duration&lt;/code&gt; by.</source>
          <target state="translated">この期間を分割する &lt;code&gt;Duration&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ebebf2b9a88fc743bbefdf245fe1996fed62b5d4" translate="yes" xml:space="preserve">
          <source>The duration to expand the interval by.</source>
          <target state="translated">インターバルを拡大するための期間です。</target>
        </trans-unit>
        <trans-unit id="6b8d59a6b4eb6f151c22d18ab315e8905cbca345" translate="yes" xml:space="preserve">
          <source>The duration to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s fractional seconds to.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の端数秒を設定する期間。</target>
        </trans-unit>
        <trans-unit id="10a00cd16c4e11d477797057c8547364622ecc0c" translate="yes" xml:space="preserve">
          <source>The duration to shift the interval by.</source>
          <target state="translated">間隔をずらすための持続時間。</target>
        </trans-unit>
        <trans-unit id="b1c624813bb3a1615cc85c1ae1a0262dd3e649d6" translate="yes" xml:space="preserve">
          <source>The duration which separates each successive time point in the range.</source>
          <target state="translated">範囲内の各連続した時間点を区切る持続時間。</target>
        </trans-unit>
        <trans-unit id="4aceca3575bedab7bdf950c54d8f75f4cd974c6c" translate="yes" xml:space="preserve">
          <source>The effect of this function, as well as the meaning of &lt;code&gt;codeOrSignal&lt;/code&gt;, is highly platform dependent. Details are given below. Common to all platforms is that this function only</source>
          <target state="translated">この関数の効果と &lt;code&gt;codeOrSignal&lt;/code&gt; の意味は、プラットフォームに大きく依存します。詳細は以下の通りです。すべてのプラットフォームに共通するのは、この機能のみ</target>
        </trans-unit>
        <trans-unit id="b949a7d4d40b96549035bb1b9cabaaf6d915fa2c" translate="yes" xml:space="preserve">
          <source>The effect on &lt;code&gt;inp&lt;/code&gt; depends on the kind of function called:</source>
          <target state="translated">&lt;code&gt;inp&lt;/code&gt; への影響は、呼び出される関数の種類によって異なります。</target>
        </trans-unit>
        <trans-unit id="562dbad759d6f2a80acd12d273fe89562ff6f2e0" translate="yes" xml:space="preserve">
          <source>The element (or range) to be treated as the separator between range segments to be split.</source>
          <target state="translated">分割する範囲セグメント間の区切りとして扱う要素(または範囲)。</target>
        </trans-unit>
        <trans-unit id="67f3be77d3c98017b171a56f0b2ef27d5b2a4614" translate="yes" xml:space="preserve">
          <source>The element at offset &lt;code&gt;1&lt;/code&gt; has been removed and the rest of the elements have shifted up to fill its place, however, the original array remains of the same length. This is because all functions in &lt;code&gt;std.algorithm&lt;/code&gt; only change</source>
          <target state="translated">オフセット &lt;code&gt;1&lt;/code&gt; の要素は削除され、残りの要素はその位置を埋めるために上に移動しましたが、元の配列は同じ長さのままです。これは、 &lt;code&gt;std.algorithm&lt;/code&gt; のすべての関数が変更されるだけだからです。</target>
        </trans-unit>
        <trans-unit id="889dab60cf01b0f7421719ab37f1b28c9311efa0" translate="yes" xml:space="preserve">
          <source>The element corresponding with a left (opening) parenthesis.</source>
          <target state="translated">左(開)括弧に対応する要素。</target>
        </trans-unit>
        <trans-unit id="0932ed8af54392d39cf0d92fcbcc4890a1724cbd" translate="yes" xml:space="preserve">
          <source>The element corresponding with a right (closing) parenthesis.</source>
          <target state="translated">右括弧(閉じ)に対応する要素。</target>
        </trans-unit>
        <trans-unit id="dedbb295326b4d3eda9e5e759f27bfe1c5ac6bc2" translate="yes" xml:space="preserve">
          <source>The element is assumed to contain text</source>
          <target state="translated">要素にはテキストが含まれているものとします。</target>
        </trans-unit>
        <trans-unit id="8312cc74e186b12d4ed20f4003b6c04acdd49b6e" translate="yes" xml:space="preserve">
          <source>The element or a reference to the element at the specified index.</source>
          <target state="translated">指定されたインデックスの要素または要素への参照。</target>
        </trans-unit>
        <trans-unit id="7131957f7eb94e306d342b5195eb84dc3e1e781f" translate="yes" xml:space="preserve">
          <source>The element or sub-range to count in the &lt;code&gt;haystack&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; でカウントする要素またはサブ範囲。</target>
        </trans-unit>
        <trans-unit id="7a38c4dc1b72acf54e9b103de60a08c5dad1c7f0" translate="yes" xml:space="preserve">
          <source>The element removed.</source>
          <target state="translated">要素が削除されました。</target>
        </trans-unit>
        <trans-unit id="f20b1e66abf934338028bfca19daea068ac238b3" translate="yes" xml:space="preserve">
          <source>The element searched for.</source>
          <target state="translated">検索した要素。</target>
        </trans-unit>
        <trans-unit id="3af3bbcb06a3c010f8dd6e115df00414b2ef76c3" translate="yes" xml:space="preserve">
          <source>The element to match.</source>
          <target state="translated">マッチする要素。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
