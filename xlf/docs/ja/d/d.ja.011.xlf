<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="d40ce990af068b3c71010d67caa21db2834cb09f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Note&lt;/b&gt;: Class allocators are deprecated in D2.</source>
          <target state="translated">&lt;b&gt;注&lt;/b&gt;：クラスアロケーターはD2では非推奨です。</target>
        </trans-unit>
        <trans-unit id="f93f5adf4b30f43d7d62fd38e387804c8e645009" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Note&lt;/b&gt;: Class deallocators and the delete operator are deprecated in D2. Use the &lt;code&gt;destroy&lt;/code&gt; function to finalize an object by calling its destructor. The memory of the object is &lt;b&gt;not&lt;/b&gt; immediately deallocated, instead the GC will collect the memory of the object at an undetermined point after finalization:</source>
          <target state="translated">&lt;b&gt;注&lt;/b&gt;：クラスデアロケータと削除演算子は、D2では非推奨です。 &lt;code&gt;destroy&lt;/code&gt; 関数を使用して、デストラクタを呼び出してオブジェクトをファイナライズします。オブジェクトのメモリはすぐには割り当て解除され&lt;b&gt;ません&lt;/b&gt;。代わりに、GCはファイナライズ後の不確定なポイントでオブジェクトのメモリを収集します。</target>
        </trans-unit>
        <trans-unit id="9c8ad03548f82f24ad4b75a67c0a4d728d4adbe2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Note&lt;/b&gt;: Scope classes have been &lt;a href=&quot;https://dlang.org/deprecate.html#scope%20for%20allocating%20classes%20on%20the%20stack&quot;&gt;recommended for deprecation&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;注&lt;/b&gt;：&lt;a href=&quot;https://dlang.org/deprecate.html#scope%20for%20allocating%20classes%20on%20the%20stack&quot;&gt;廃止予定の&lt;/a&gt;スコープクラスが推奨されています。</target>
        </trans-unit>
        <trans-unit id="d53713f6937f05e4d8970589733b29eb11ce4a5d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;OEM Identifier&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;OEM識別子&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="2eea9ef8dd4241f879dbdab01cc2139e89e1b289" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Operating System&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;オペレーティング・システム&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="906bf6412db853303f530b0e5f95ab9ef9ba36b7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Operator&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Operator&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8011cb26042ea5488cf9411ae3b244d6dfd3323a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Params:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Params:&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="32e9bddb62158688bf737f89d64756efed2e768e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Postfix&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Postfix&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a1c3d88108550cb22782ef52b061ed2342e8e1f0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Property&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Property&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d164c8cbf50415c7fde88bbfb591144bd7282c83" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Purpose&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Purpose&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="2e3deed80037255d9155daf896205a963ef2005d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Relation&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Relation&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="af83fae29da019932eec5e72b73733db5c87f17b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Replaced with&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;交換された&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6f89e54f1e33f9ddae90a88c42a4baa3bbb5ea6d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Returns:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Returns:&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="845b8dfc2f7c033fd4840c08c81fc208e8e369df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Returns&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Returns&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f0a732bdaf6fb546775a060e0fbfa347bf903d65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;S&lt;/b&gt;&lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Value&quot;&gt;&lt;i&gt;Value&lt;/i&gt;&lt;/a&gt;...</source>
          <target state="translated">&lt;b&gt;S&lt;/b&gt;&lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Value&quot;&gt;&lt;i&gt;Value&lt;/i&gt;&lt;/a&gt;...</target>
        </trans-unit>
        <trans-unit id="f494783e67f0eaa33b1b2d2f81a5829b26d0af6a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Scripts&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Scripts&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7a7cb10682ef85747a77eceea81834acebe04141" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;See_Also:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;See_Also:&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="14f06c2ec17469ab765e2d868387dedaa520e6d1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Segment Name&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;セグメント名&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6bf241743de06285978cc928445566f5d79dbd3d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Sequence&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Sequence&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4142117ec53bdf3d908601110796fab2e0c6853f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Special Token&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;特別トークン&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a1719297e35044c002eb18b849cf54b310c10133" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Standards:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Standards:&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="709e2e434f1b74b99572ea271f6bb8e79af5c0ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Storage Class&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;ストレージクラス&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="29aacd028c1628c0773bae6594ca2d238836dfb5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Symbol examples:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;シンボルの例：&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a95c6333a37b5c7f6443ebfefedfaaef351fb8ab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Syntax&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Syntax&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8fe9d94bfb4af734aea93257bfbb2de6c45217e8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;The length calculated at compile time&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;コンパイル時に計算された長さ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="08e99e7802f33b31a028ebbe3c58b69040a10491" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Throws:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Throws:&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f26822c9a2949628cb45d97790447f12f25d1ff1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Type Name&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;タイプ名&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0cb06cc51c91d3b4ba9d8023172074b9a6668f58" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Type&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Type&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="893f5338f5332b258c080cda171f5abba05836c7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Typedef&lt;/b&gt; allows the creation of a unique type which is based on an existing type. Unlike the &lt;code&gt;alias&lt;/code&gt; feature, &lt;b&gt;Typedef&lt;/b&gt; ensures the two types are not considered as equals.</source>
          <target state="translated">&lt;b&gt;Typedefを&lt;/b&gt;使用すると、既存のタイプに基づく一意のタイプを作成できます。 &lt;code&gt;alias&lt;/code&gt; 機能とは異なり、&lt;b&gt;Typedef&lt;/b&gt;は2つの型が等しいと見なされないようにします。</target>
        </trans-unit>
        <trans-unit id="28db5eb20af95b469dee7d2611434a60b480ea03" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;:</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：</target>
        </trans-unit>
        <trans-unit id="0119b13ccfb2c782afe74d033cdfb9ffe3141c03" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: Adjusting the pointer to point before or after the element whose address is returned, and then dereferencing it.</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：アドレスが返される要素の前または後を指すようにポインターを調整してから、それを逆参照します。</target>
        </trans-unit>
        <trans-unit id="bb08b63af221d992c6a01e02035b8bf423b95dbc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: Allowing multiple threads to access a thread-local memory location results in undefined behavior.  &lt;b&gt;Undefined Behavior&lt;/b&gt;: Writing to an immutable memory location during its lifetime results in undefined behavior.  &lt;b&gt;Undefined Behavior&lt;/b&gt;: Writing to a shared memory location in one thread while one or more additional threads read from or write to the same location is undefined behavior unless all of the reads and writes are synchronized.</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：複数のスレッドがスレッドローカルメモリの場所にアクセスできるようにすると、未定義の動作が発生します。&lt;b&gt;未定義の動作&lt;/b&gt;：存続期間中に不変のメモリ位置に書き込むと、未定義の動作が発生します。&lt;b&gt;未定義の動作&lt;/b&gt;：1つのスレッド内の共有メモリの場所への書き込み中に、同じ場所からの読み取りまたは同じ場所への書き込みを行う1つ以上の追加のスレッドは、すべての読み取りと書き込みが同期されていない限り、未定義の動作です。</target>
        </trans-unit>
        <trans-unit id="d64ff1c35d817adfdef4c6ccf768addc392ec34a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: An out of bounds memory access will cause undefined behavior, therefore array bounds check is normally enabled in &lt;code&gt;@safe&lt;/code&gt; functions. The runtime behavior is part of the language semantics.</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：範囲外のメモリアクセスは未定義の動作を引き起こすため、通常、配列の境界チェックは &lt;code&gt;@safe&lt;/code&gt; 関数で有効になります。実行時の動作は、言語のセマンティクスの一部です。</target>
        </trans-unit>
        <trans-unit id="b76bc01cb09f1b01cdbd63b0e8825b1b5a0d4ada" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: If a void initialized variable's value is used before it is set, the behavior is undefined.</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：void初期化変数の値が設定前に使用された場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="33556aba627d73918dc7bb36c4a4996150ce5fab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: If any pointers and references to GC allocated objects are not aligned on &lt;code&gt;size_t&lt;/code&gt; byte boundaries.</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：GCで割り当てられたオブジェクトへのポインタと参照が &lt;code&gt;size_t&lt;/code&gt; バイト境界に整列されていない場合。</target>
        </trans-unit>
        <trans-unit id="2f57ad0c417b1587e2b858a8a6dae086261af7c8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: If either operand is a reference type and one of the following:</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：いずれかのオペランドが参照型であり、次のいずれかである場合：</target>
        </trans-unit>
        <trans-unit id="41a591b4dae01afc5d8b706c64a2ade4208ac16a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: Once in an</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：一度に</target>
        </trans-unit>
        <trans-unit id="8799edf6faa1e8d367d751d6e1abad11f16a67d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: Since these checks are bypassed, it is up to the programmer to ensure the code is correct. For example, throwing an exception in a &lt;code&gt;nothrow&lt;/code&gt; function is undefined behavior.   &lt;b&gt;Best Practices:&lt;/b&gt; This enables the easy insertion of code to provide debugging help, by bypassing the otherwise stringent attribute checks. Never ship release code that has</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：これらのチェックはバイパスされるため、コードが正しいことを確認するのはプログラマの責任です。たとえば、 &lt;code&gt;nothrow&lt;/code&gt; 関数で例外をスローすることは、未定義の動作です。 &lt;b&gt;ベストプラクティス：&lt;/b&gt;これにより、コードを簡単に挿入して、デバッグのヘルプを提供できます。あるリリースコードを決して出荷しないでください</target>
        </trans-unit>
        <trans-unit id="1aa0bfce6ad9450c6c59b2b709c170f979e60259" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: The subsequent execution of the program after an assert contract is false.</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：アサートコントラクト後のプログラムの後続の実行はfalseです。</target>
        </trans-unit>
        <trans-unit id="2ad7bfc71818d4c192d44fb736185b47b2bb4f85" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: Writes to string literals cannot always be detected, but cause undefined behavior.</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：文字列リテラルへの書き込みは常に検出できるわけではありませんが、未定義の動作を引き起こします。</target>
        </trans-unit>
        <trans-unit id="5b13df1d4d4209bcbbc27510e78dea8d6d990476" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: happens if the invariant does not hold and execution continues.  &lt;b&gt;Implementation Defined&lt;/b&gt;:</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：不変条件が成立せず、実行が継続すると発生します。 &lt;b&gt;定義された実装&lt;/b&gt;：</target>
        </trans-unit>
        <trans-unit id="f4ac68cbb7d205df018f9677e6a8068079990ba4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Undefined Behavior&lt;/b&gt;: is exhibited if they are encountered during run time. &lt;a href=&quot;https://dlang.org/phobos/core_checkedint.html&quot;&gt;&lt;code&gt;core.checkedint&lt;/code&gt;&lt;/a&gt; can be used to check for them and select a defined behavior.</source>
          <target state="translated">&lt;b&gt;未定義の動作&lt;/b&gt;：実行時に発生した場合に表示されます。&lt;a href=&quot;https://dlang.org/phobos/core_checkedint.html&quot;&gt; &lt;code&gt;core.checkedint&lt;/code&gt; &lt;/a&gt;を使用して、それらをチェックし、定義された動作を選択できます。</target>
        </trans-unit>
        <trans-unit id="123877887086f28ee4ef3c5d16980f55b0d9a0a8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Value examples:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;値の例：&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e6d43a832b9dd59bbb8506b0d845a71d7600c06f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Value&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Value&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e2602acb456f80c7ff6cb6664201bcbe49df60c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Version Identifier&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;バージョン識別子&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a210aeafefae30b41125dcb110e06384ab76b800" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Version:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Version:&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6a6afbb0627877935e792779ff9e94f4b1aa8729" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Windows only:&lt;/b&gt; As of version 2.075, the DATA (global shared data) and TLS segment (thread local data) of an executable or DLL can be configured to be scanned precisely by the garbage collector instead of conservatively. This takes advantage of information emitted by the compiler to identify possible mutable pointers inside these segments. Immutable pointers &lt;a href=&quot;const3#immutable_storage_class&quot;&gt;with initializers&lt;/a&gt; are excluded from scanning, too, as they can only point to preallocated memory.</source>
          <target state="translated">&lt;b&gt;Windowsのみ：&lt;/b&gt;バージョン2.075以降、実行可能ファイルまたはDLLのDATA（グローバル共有データ）およびTLSセグメント（スレッドローカルデータ）は、保守的にではなく、ガベージコレクターによって正確にスキャンされるように構成できます。これは、コンパイラーによって出力された情報を利用して、これらのセグメント内の変更可能なポインターを特定します。&lt;a href=&quot;const3#immutable_storage_class&quot;&gt;イニシャライザ&lt;/a&gt;を備えた不変のポインタも、事前に割り当てられたメモリのみを指すことができるため、スキャンから除外されます。</target>
        </trans-unit>
        <trans-unit id="0933936b93df5b9032aa6798ce647c5730e2b4b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;access&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;access&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a8d47141a9b52a04c7d2c548c5e630985de6ff6f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;alias type for &lt;i&gt;Identifier&lt;/i&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&lt;i&gt;識別子の&lt;/i&gt;エイリアスタイプ&lt;i&gt;&lt;/i&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="150a7380dcbfbd33e6e45e4aaf4800fda2370d2c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;bool&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;bool&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8067b48846336c23912b82c211c762d98d37cc41" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;byte16&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;byte16&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="dec6aa86c8aac8dc813d90af2c562aa69d1b8885" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;byte32&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;byte32&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8bd98d9fb39664bc018e278b1ce66c199024de78" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;c&lt;/b&gt;&lt;a href=&quot;#HexFloat&quot;&gt;&lt;i&gt;HexFloat&lt;/i&gt;&lt;/a&gt;&lt;b&gt;c&lt;/b&gt;&lt;a href=&quot;#HexFloat&quot;&gt;&lt;i&gt;HexFloat&lt;/i&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;b&gt;c&lt;/b&gt;&lt;a href=&quot;#HexFloat&quot;&gt;&lt;i&gt;HexFloat&lt;/i&gt;&lt;/a&gt;&lt;b&gt;c&lt;/b&gt;&lt;a href=&quot;#HexFloat&quot;&gt;&lt;i&gt;HexFloat&lt;/i&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cb6b1f61c1b99c296683bcbb747b5333fb013683" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;code generation&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;コード生成&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="9504089adb7a38db69a7d2577bd0c0d0f495d895" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;comments&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;comments&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1aa931a80df0fb2fa6ab00334ac54f1ae83ce9fb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;comparison&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;comparison&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="db04f070c23e95f489c684e65d0de07ceae3125f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;contents&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;contents&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="545048814ceb9974be39174cc0e9f846b5fce3ee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;description&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;description&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7a77f4de2fe33afb01cf7fd07e8f172dbc368c43" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;double2&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;double2&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4bf280f6a3b93fa0cc52d13eb09688384c90aa55" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;double4&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;double4&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a10a1af550473a30fcc90822fad9f82ba4619fa0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;e&lt;/b&gt;&lt;a href=&quot;#HexFloat&quot;&gt;&lt;i&gt;HexFloat&lt;/i&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;b&gt;e&lt;/b&gt;&lt;a href=&quot;#HexFloat&quot;&gt;&lt;i&gt;HexFloat&lt;/i&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f8443dbadc5210151166b0ab9d30268eb5143293" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;example&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;example&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="74885e8f9ebb1fd877bca06c59112a2081c100de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;field&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;field&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ad16bb5332dbd98d17721f4890cd541cf6cd67dc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;float4&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;float4&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5c41788876d62581563203f1f92a47628ef49d40" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;float8&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;float8&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="222abaa1d1a7839d10a4cfee33fdc9501a1cc3a0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;from&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;from&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d3e6ae69b13e2402776d8b038adce6e0282a9b1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;gcc Equivalent&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;同等のgcc&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="be5729f436c0f2f6f830148d70ac830e905df2f9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;i&lt;/b&gt;&lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;b&gt;i&lt;/b&gt;&lt;a href=&quot;#Number&quot;&gt;&lt;i&gt;Number&lt;/i&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1fdfea5033fea9e6a512bd225101cbfda1aeff4a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int4&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;int4&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6eb83bdeacbc683c48cd46fa8c78709c87f5c6e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int8&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;int8&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0bc5c42eb664068361d3e2bbc2960242bd85d74b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;keyword&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;keyword&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3b9e4bd665940376fedb5c229b6879e66e25b129" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;kind&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;kind&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="39874f9381dfd5125b3dc75af7a4807bddc23602" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;lexical analysis&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;字句解析&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="60cb138dd66d9b1cea2cf1f5b4bd36ee7ac47180" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;libweb/client.d:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;libweb/client.d:&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="75eebb7236eb3aa32c6dc795bfed2a8d86d951e3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;libweb/package.d:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;libweb/package.d:&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="56e429a57597934579d15405784f8b67f7cc03cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;libweb/server.d:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;libweb/server.d:&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="17043ff939f0a4d5aa83327a00043cf0e170b24f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;libweb/utils/package.d:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;libweb/utils/package.d:&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="94101c8a81ea933dc5fe9c5f4fa029879581936c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;locality&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;locality&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="79de8a252f3b8296225e83ed7108cd637d70a477" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;long2&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;long2&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="30347d665ca86f231e2df3cb086f8b88462effde" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;long4&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;long4&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ddfb91165ad865d8237032c7afaf6d8ce0c7ac1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;n&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;n&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1fee7dc0a20b6d874a56c2d0b86c4cc5d8b57ae4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;num indices&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;numインデックス&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6496c7e7c4bec23654f7a5bb3df81748f05b7ca7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;offset&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;offset&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="06bfb906e8762b446a59a8cbf8b2275f7051d05f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;optimization&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;optimization&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="25b59a877580563a729d892f5a673eb16a77e781" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;property&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;property&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6f5464b43bbaecac5c913e0786a739f28573a242" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;recOEM&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;recOEM&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5cd2dc7ff7a80db85f72138e3cda8c958131fc1e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;result&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;result&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f34d5555301381a812b8cf40c1629a72d2b5a99b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;rewrite 1&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;書き換え1&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1b8d7df792dfa36a9ba8a406912753452f1b8759" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;rewrite 2&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;書き換え2&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d01b17e5b387a974fb541eb4d6aee320bd90be5e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;script line&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;スクリプト行&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1ec805147dbc1a6c96d4c4890d2a1d36e134d0c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;semantic analysis&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;セマンティック分析&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="39185722ec687d6398c10760183f1a8a7c946c16" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;short16&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;short16&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="331218862d2c0cc4114357876e1c6aab4e7c97d2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;short8&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;short8&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="19c7aa78c143d0cda3e321b08d3b851686f7c884" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;size&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;size&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="40c918b147d545d46767b6b640e40fe9e57ecb0e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;source character set&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;ソース文字セット&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6df6bbab98fdd51b7b4d00b71d342406d5e8fe68" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;syntax analysis&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;構文分析&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f3c6733f39cdd7a9e8621428971a6e56e7acffa4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;test.d:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;test.d:&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0d24e82b92b971a8bcc7f67b709d52e3453e1098" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;to&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;to&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5baa61f483637ac5899c306b1f2cd344e3fb2e1d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;transformation&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;transformation&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ff1a31b0c2563249b2d8482a3b794f210b6e124d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;type index&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;タイプインデックス&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="2ca9cdb144a3b03da7c2246df004461cf1a14926" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ubyte16&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;ubyte16&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="42f7de6b8374369101f797a088885fff3c76c783" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ubyte32&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;ubyte32&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4f467489c4d041333165be8da10f1be6549a5f16" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;uint4&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;uint4&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="08863c66b1da554575c1c3284f58524b547459f8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;uint8&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;uint8&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a3606b1022fbd8c072a4e873fe9277c82347261d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ulong2&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;ulong2&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1b18d2fb08ab825308c7b45488ab9efe0e32c3bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ulong4&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;ulong4&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e9b9b6937b917876163161b430b6959ac30267f3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ushort16&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;ushort16&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c99bf9bca7e059672660f7e98cd1be42241f0514" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ushort8&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;ushort8&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="61bacdf1f48f1d936407dc6074b0e45fc43810b2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;void16&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;void16&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a5422ec2a1c10c4479e71743298351157043d09a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;void32&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;void32&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c20077a29e599915f41b1e175f47e4fdb5d50ed4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;writeFetch&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;writeFetch&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="08fbf87e0e966c600cff0671bfc78bc01d9cb068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;cppRuntimeLibrary&quot;&lt;/code&gt; - The C++ runtime library affinity for this toolchain</source>
          <target state="translated">&lt;code&gt;&quot;cppRuntimeLibrary&quot;&lt;/code&gt; -このツールチェーンのC ++ランタイムライブラリアフィニティ</target>
        </trans-unit>
        <trans-unit id="bd853af5509f93ff9e6a43dadc4835581d3279f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;floatAbi&quot;&lt;/code&gt; - Floating point ABI; may be &lt;code&gt;&quot;hard&quot;&lt;/code&gt;, &lt;code&gt;&quot;soft&quot;&lt;/code&gt;, or &lt;code&gt;&quot;softfp&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;floatAbi&quot;&lt;/code&gt; -浮動小数点ABI; かもしれ &lt;code&gt;&quot;hard&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;soft&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;softfp&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="74851dd38fd93446fd7732603f0d38c8e0f7a0d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;nsecs&quot;&lt;/code&gt; is accepted by split, but &lt;code&gt;&quot;years&quot;&lt;/code&gt; and &lt;code&gt;&quot;months&quot;&lt;/code&gt; are not.</source>
          <target state="translated">&lt;code&gt;&quot;nsecs&quot;&lt;/code&gt; は分割で受け入れられますが、 &lt;code&gt;&quot;years&quot;&lt;/code&gt; と &lt;code&gt;&quot;months&quot;&lt;/code&gt; 」は受け入れられません。</target>
        </trans-unit>
        <trans-unit id="b8516c0d0a6ab337eb757368f9822bd55aaca147" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;nsecs&quot;&lt;/code&gt; is not considered a valid unit of time. Nothing in std.datetime can handle precision greater than hnsecs, and the few functions in core.time which deal with &quot;nsecs&quot; deal with it explicitly.</source>
          <target state="translated">&lt;code&gt;&quot;nsecs&quot;&lt;/code&gt; は有効な時間単位とは見なされません。std.datetimeの何もhnsecsを超える精度を処理できず、core.timeの「nsecs」を扱ういくつかの関数はそれを明示的に扱います。</target>
        </trans-unit>
        <trans-unit id="ae2740b26a8bc9a21a01bfad11940cfcc6533f5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;objectFormat&quot;&lt;/code&gt; - Target object format</source>
          <target state="translated">&lt;code&gt;&quot;objectFormat&quot;&lt;/code&gt; -ターゲットオブジェクトの形式</target>
        </trans-unit>
        <trans-unit id="d1389937ce4aec811485a500d92bce3e9367a1e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac44cdde7a4309b7ec8cfb74a8dde8f573366d3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt;$D(euro;). See &lt;a href=&quot;entity#NamedCharacterEntity&quot;&gt;&lt;i&gt;NamedCharacterEntity&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; $ D（ユーロ;）。&lt;a href=&quot;entity#NamedCharacterEntity&quot;&gt;&lt;i&gt;NamedCharacterEntityを&lt;/i&gt;&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0e53a5b7ba9737cc3fe4ccfb3c80c0384c9c3177" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3958503a584f5923c53a365e8416542c23f78839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt;=</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt;=</target>
        </trans-unit>
        <trans-unit id="f398556003232e6b8c82be05607d67585d76b9cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="54f8ced1abd619e968232335d212d3b4a5b3885a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b8ef2fda6bef4225fce98f2f1a768cb76822621a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1407373b43004cda1d8c1d2aaf08f988c49587e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dec18c41670087a443f485e56ddb67fcf7bb9225" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt; 0&lt;/code&gt; if &lt;code&gt;a &amp;lt; b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;a == b&lt;/code&gt;, and &lt;code&gt;&amp;gt; 0&lt;/code&gt; if &lt;code&gt;a &amp;gt; b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt; 0&lt;/code&gt; であれば &lt;code&gt;a &amp;lt; b&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; なら &lt;code&gt;a == b&lt;/code&gt; 、及び &lt;code&gt;&amp;gt; 0&lt;/code&gt; であれば &lt;code&gt;a &amp;gt; b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d960d71c8ad6cb23cf55077cd4184f48019c5533" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt; 0&lt;/code&gt; if &lt;code&gt;filename1 &amp;lt; filename2&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;filename1 == filename2&lt;/code&gt; and &lt;code&gt;&amp;gt; 0&lt;/code&gt; if &lt;code&gt;filename1 &amp;gt; filename2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt; 0&lt;/code&gt; 場合は &lt;code&gt;filename1 &amp;lt; filename2&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; であれば &lt;code&gt;filename1 == filename2&lt;/code&gt; 及び &lt;code&gt;&amp;gt; 0&lt;/code&gt; 場合は &lt;code&gt;filename1 &amp;gt; filename2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6087007a54c59e3a946fc72a09e238e44c46e800" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8cf4f97182bd11f758e1c3d6be7426bf8fdfa094" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; is a left shift. &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is a signed right shift. &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is an unsigned right shift.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; 左シフトです。 &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 符号付き右シフトです。 &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 符号なし右シフトです。</target>
        </trans-unit>
        <trans-unit id="e7249a5c1a593b3ce165dd68eae0bb3425e21a3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3288fa6008c0378c34f18d5113fe9c3e8c6c76d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="122586fc5fa324741645aeef49e2bf8b3aaf2594" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'\uFFFE'&lt;/code&gt; and &lt;code&gt;'\uFFFF'&lt;/code&gt; are considered valid by &lt;code&gt;isValidDchar&lt;/code&gt;, as they are permitted for internal use by an application, but they are not allowed for interchange by the Unicode standard.</source>
          <target state="translated">&lt;code&gt;'\uFFFE'&lt;/code&gt; および &lt;code&gt;'\uFFFF'&lt;/code&gt; は、アプリケーションによる内部使用が許可されているが、Unicode標準による交換は許可されていないため、 &lt;code&gt;isValidDchar&lt;/code&gt; によって有効と見なされます。</target>
        </trans-unit>
        <trans-unit id="f60e033c2072c35ccd5e717641020108f1c2041b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;a href=&quot;lex#Identifier&quot;&gt;&lt;i&gt;Identifier&lt;/i&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;a href=&quot;lex#Identifier&quot;&gt;&lt;i&gt;Identifier&lt;/i&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a08cf564c650ee367e12a53c5693ab287b4205f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(new A()).castSwitch((A a)=&amp;gt;1,(B b)=&amp;gt;2)&lt;/code&gt; returns &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;(new A()).castSwitch((A a)=&amp;gt;1,(B b)=&amp;gt;2)&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5084a193ecf41e338c076c0c17db9011e1830d3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;))&lt;/code&gt; fails to compile, the legacy rewrite &lt;code&gt;opSliceAssign(c,&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;))&lt;/code&gt; コンパイルに失敗し、レガシーは &lt;code&gt;opSliceAssign(c,&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0837c7282cf26b93c696de19c537766158e0843c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;))&lt;/code&gt;, and &lt;code&gt;a[] = c&lt;/code&gt; as &lt;code&gt;a.opIndexAssign(c)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;))&lt;/code&gt; 、および &lt;code&gt;a[] = c&lt;/code&gt; &lt;code&gt;a.opIndexAssign(c)&lt;/code&gt; として。</target>
        </trans-unit>
        <trans-unit id="11e6e41966a2741f6eda239699f5a89fe68d2b17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;)&lt;/code&gt; condition is satisfied when the debug identifier matches</source>
          <target state="translated">&lt;code&gt;)&lt;/code&gt; デバッグ識別子が一致したときに条件が満たされます</target>
        </trans-unit>
        <trans-unit id="8fa45ebcfa13cbab71d496a27f9fbb9f9afcba8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;)&lt;/code&gt; condition is satisfied when the debug level is &lt;code&gt;&amp;gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;)&lt;/code&gt; デバッグレベルが &lt;code&gt;&amp;gt;=&lt;/code&gt; のときに条件が満たされます</target>
        </trans-unit>
        <trans-unit id="aa4b0d2797ed2e918bd432feb2fcec6c9f3fb73f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;)&lt;/code&gt; creates C++ declarations that reside in C++ namespaces. The</source>
          <target state="translated">&lt;code&gt;)&lt;/code&gt; C ++名前空間にあるC ++宣言を作成します。の</target>
        </trans-unit>
        <trans-unit id="9925093c94a8b2d6b68305707b4c9b14bbfe8a78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;)&lt;/code&gt; is used instead.</source>
          <target state="translated">&lt;code&gt;)&lt;/code&gt; 代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="f1b41032db3326fa1cb5496cde41eaf9cdb01448" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;)&lt;/code&gt; when applied to an lvalue.</source>
          <target state="translated">&lt;code&gt;)&lt;/code&gt; 左辺値に適用した場合。</target>
        </trans-unit>
        <trans-unit id="b1de402a83a45114ff0faf7e6d0aeedf6bbc5326" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;)&lt;/code&gt; with two arguments, respectively. This only applies for one-dimensional slicing, and dates from when D did not have full support for multidimensional arrays. This usage of &lt;code&gt;opSlice&lt;/code&gt; is discouraged.</source>
          <target state="translated">&lt;code&gt;)&lt;/code&gt; それぞれ2つの引数を使用します。これは、1次元スライスにのみ適用され、Dが多次元配列を完全にサポートしていなかった日付です。この &lt;code&gt;opSlice&lt;/code&gt; の使用はお勧めしません。</target>
        </trans-unit>
        <trans-unit id="206712b8f8db89befea06a21ffb6c96d5634437b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;**double asterisks**&lt;/code&gt; is rendered as &lt;strong&gt;double asterisks&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;**double asterisks**&lt;/code&gt; は&lt;strong&gt;二重アスタリスク&lt;/strong&gt;としてレンダリングされ&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6185639dc48e1b078578c025762b660d95e30ad2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*single asterisks*&lt;/code&gt; is rendered as &lt;em&gt;single asterisks&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;*single asterisks*&lt;/code&gt; は&lt;em&gt;単一のアスタリスク&lt;/em&gt;としてレンダリングされ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a889907639d280d7bcce02cbbea7d7fae19a44f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;++&lt;/code&gt; and Postdecrement</source>
          <target state="translated">&lt;code&gt;++&lt;/code&gt; およびポストデクリメント</target>
        </trans-unit>
        <trans-unit id="e4b39a750f8d4f75d6b1d22cfdf811ebaf9481db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;+1&lt;/code&gt; is the same as the value of the previous</source>
          <target state="translated">&lt;code&gt;+1&lt;/code&gt; は前の値と同じです</target>
        </trans-unit>
        <trans-unit id="94aeafa98cf3b84e505daf5f3afc0bc7809c2780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;+1&lt;/code&gt;. If the value of the previous</source>
          <target state="translated">&lt;code&gt;+1&lt;/code&gt; 。以前の値の場合</target>
        </trans-unit>
        <trans-unit id="e5d93e3086b69015c0f32e6de990de14dd909214" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;,&lt;/code&gt; ...&lt;code&gt;]&lt;/code&gt;, two steps are needed. First, the expressions of the form</source>
          <target state="translated">&lt;code&gt;,&lt;/code&gt; ... &lt;code&gt;]&lt;/code&gt; 、2つのステップが必要です。まず、形の表現</target>
        </trans-unit>
        <trans-unit id="ce47578d0683bbc3a7759581717d39518e3bd074" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;,&lt;/code&gt;&amp;hellip;&lt;code&gt;}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;,&lt;/code&gt;&amp;hellip;&lt;code&gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99588c23695c0ee55194ee8a309e79b3bf5cee4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;,&lt;/code&gt;&lt;a href=&quot;template#TemplateParameterList&quot;&gt;&lt;i&gt;TemplateParameterList&lt;/i&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;,&lt;/code&gt;&lt;a href=&quot;template#TemplateParameterList&quot;&gt;&lt;i&gt;TemplateParameterList&lt;/i&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="099853a8e9fedf93d291e0d176049a446c7c73d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;,&lt;/code&gt;&lt;a href=&quot;template#TemplateParameterList&quot;&gt;&lt;i&gt;TemplateParameterList&lt;/i&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;  More complex types can be pattern matched; the &lt;a href=&quot;template#TemplateParameterList&quot;&gt;&lt;i&gt;TemplateParameterList&lt;/i&gt;&lt;/a&gt; declares symbols based on the parts of the pattern that are matched, analogously to the way implied template parameters are matched.</source>
          <target state="translated">&lt;code&gt;,&lt;/code&gt; &lt;a href=&quot;template#TemplateParameterList&quot;&gt;&lt;i&gt;TemplateParameterList&lt;/i&gt;&lt;/a&gt; &lt;code&gt;)&lt;/code&gt; より複雑なタイプをパターンマッチングできます。&lt;a href=&quot;template#TemplateParameterList&quot;&gt;&lt;i&gt;TemplateParameterListは&lt;/i&gt;&lt;/a&gt;同様に暗黙のテンプレートパラメータが一致している途中に、一致しているパターンの一部に基づいてシンボルを宣言します。</target>
        </trans-unit>
        <trans-unit id="7d285d5f941ddf4b338ad50a32ea2c0191fae56b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--&lt;/code&gt; Operators</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; オペレーター</target>
        </trans-unit>
        <trans-unit id="7bd2725afa85bcfddda64b0eb7c49fdbfb09a6b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.alignof&lt;/code&gt; gives the aligned size of an expression or type. For example, an aligned size of 1 means that it is aligned on a byte boundary, 4 means it is aligned on a 32 bit boundary.</source>
          <target state="translated">&lt;code&gt;.alignof&lt;/code&gt; は、式または型の整列されたサイズを示します。たとえば、アラインされたサイズが1の場合はバイト境界に配置されることを意味し、4の場合は32ビット境界に配置されることを意味します。</target>
        </trans-unit>
        <trans-unit id="e5196b62974b3d8f215e2d910f7f52f6922146ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.classinfo&lt;/code&gt; applied to an interface gives the information for the interface, not the class it might be an instance of.</source>
          <target state="translated">&lt;code&gt;.classinfo&lt;/code&gt; 適用された.classinfoは、インターフェースである可能性のあるクラスではなく、インターフェースの情報を提供します。</target>
        </trans-unit>
        <trans-unit id="63b0f429d2b2e3c16f17ed1cdb76e7cacdca4946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.classinfo&lt;/code&gt; provides information about the dynamic type of a class object. It returns a reference to type &lt;a href=&quot;https://dlang.org/phobos/object.html&quot;&gt;&lt;code&gt;object.TypeInfo_Class&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.classinfo&lt;/code&gt; は、クラスオブジェクトの動的な型に関する情報を提供します。タイプ&lt;a href=&quot;https://dlang.org/phobos/object.html&quot;&gt; &lt;code&gt;object.TypeInfo_Class&lt;/code&gt; &lt;/a&gt;への参照を返します。</target>
        </trans-unit>
        <trans-unit id="b456dd1c2f9c0d10f1789cad30a16c60fc51af38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.init&lt;/code&gt; produces a constant expression that is the default initializer. If applied to a type, it is the default initializer for that type. If applied to a variable or field, it is the default initializer for that variable or field's type.</source>
          <target state="translated">&lt;code&gt;.init&lt;/code&gt; は、デフォルトの初期化子である定数式を生成します。タイプに適用される場合、それはそのタイプのデフォルトの初期化子です。変数またはフィールドに適用される場合、それはその変数またはフィールドのタイプのデフォルトの初期化子です。</target>
        </trans-unit>
        <trans-unit id="f56bc5ae2b4045d3d6ac97ffcf098f910b771e8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.sizeof&lt;/code&gt; applied to a class object returns the size of the class reference, not the class instantiation.</source>
          <target state="translated">&lt;code&gt;.sizeof&lt;/code&gt; クラスオブジェクトに.sizeofを適用すると、クラスのインスタンス化ではなく、クラス参照のサイズが返されます。</target>
        </trans-unit>
        <trans-unit id="56191db3ac0b73d97dbb68e4b586da74f6c27ddb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.stringof&lt;/code&gt; produces a constant string that is the source representation of its prefix. If applied to a type, it is the string for that type. If applied to an expression, it is the source representation of that expression. The expression will not be evaluated.</source>
          <target state="translated">&lt;code&gt;.stringof&lt;/code&gt; は、接頭辞のソース表現である定数文字列を生成します。タイプに適用される場合、それはそのタイプの文字列です。式に適用される場合、それはその式のソース表現です。式は評価されません。</target>
        </trans-unit>
        <trans-unit id="32a0616dfbfe5a9ba4aea5d2a2f3d043257aeb30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; is being shifted left by a negative value, or shifted right by a large positive value</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; &lt;code&gt;lhs&lt;/code&gt; が負の値で左にシフトされている場合、または大きな正の値で右にシフトされている場合は0</target>
        </trans-unit>
        <trans-unit id="cd0f13cb35b0f6cfcff43bbaff7453822c3899ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0&lt;/code&gt; if the ranges compare equal. A negative value if &lt;code&gt;r1&lt;/code&gt; is a prefix of &lt;code&gt;r2&lt;/code&gt; or the first differing element of &lt;code&gt;r1&lt;/code&gt; is less than the corresponding element of &lt;code&gt;r2&lt;/code&gt; according to &lt;code&gt;pred&lt;/code&gt;. A positive value if &lt;code&gt;r2&lt;/code&gt; is a prefix of &lt;code&gt;r1&lt;/code&gt; or the first differing element of &lt;code&gt;r2&lt;/code&gt; is less than the corresponding element of &lt;code&gt;r1&lt;/code&gt; according to &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; 範囲が等しい場合は0。場合は負の値 &lt;code&gt;r1&lt;/code&gt; がプレフィックスである &lt;code&gt;r2&lt;/code&gt; または第異なる要素 &lt;code&gt;r1&lt;/code&gt; 以下の対応する要素よりも &lt;code&gt;r2&lt;/code&gt; に従って &lt;code&gt;pred&lt;/code&gt; 。場合は正の値 &lt;code&gt;r2&lt;/code&gt; がプレフィックスである &lt;code&gt;r1&lt;/code&gt; または第異なる要素 &lt;code&gt;r2&lt;/code&gt; 以下の対応する要素よりも &lt;code&gt;r1&lt;/code&gt; に従って &lt;code&gt;pred&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f5fa0e4f4c4640464fdf6df63f5ca41e5095594b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;2.predSwitch(1, &quot;one&quot;, 2, &quot;two&quot;, 3, &quot;three&quot;)&lt;/code&gt; returns &lt;code&gt;&quot;two&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;2.predSwitch(1, &quot;one&quot;, 2, &quot;two&quot;, 3, &quot;three&quot;)&lt;/code&gt; は &lt;code&gt;&quot;two&quot;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="89e0c97d25cdfc5fbaa32647daa1dc8abaab5615" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; および &lt;code&gt;!=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="945e03d010c2450da457899882fa6887ba75a11f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@disable&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;@disable&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="668de6cdeed818fd05f519609a55e3f17f5419d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@nogc&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;@nogc&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="bbf50b7d4a9c14b6324016a55b2e05c9b2b3304e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@nogc&lt;/code&gt; affects the type of the function. A &lt;code&gt;@nogc&lt;/code&gt; function is covariant with a non-&lt;code&gt;@nogc&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;@nogc&lt;/code&gt; は関数のタイプに影響します。 &lt;code&gt;@nogc&lt;/code&gt; 機能は、非付き共変である &lt;code&gt;@nogc&lt;/code&gt; 機能。</target>
        </trans-unit>
        <trans-unit id="35e398484da7da2b70be396e858ccb202fbfc291" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@property&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;@property&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="e9dda840d85606d23c926d0fc958fba3c05a42b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@property&lt;/code&gt; are mangled differently, meaning that &lt;code&gt;@property&lt;/code&gt; must be consistently used across different compilation units.</source>
          <target state="translated">&lt;code&gt;@property&lt;/code&gt; は異なる方法で &lt;code&gt;@property&lt;/code&gt; されます。つまり、@ propertyは、異なるコンパイルユニット間で一貫して使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="65432aebdccf8c92f41a4bc846f3193e0c1a00f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@property&lt;/code&gt; functions can only have zero, one or two parameters.</source>
          <target state="translated">&lt;code&gt;@property&lt;/code&gt; 関数は、0、1、または2つのパラメーターのみを持つことができます。</target>
        </trans-unit>
        <trans-unit id="59321333ece34441ee987512696709e6c8398415" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@property&lt;/code&gt; functions cannot be overloaded with non-&lt;code&gt;@property&lt;/code&gt; functions with the same name.</source>
          <target state="translated">&lt;code&gt;@property&lt;/code&gt; 関数は、同じ名前の非 &lt;code&gt;@property&lt;/code&gt; 関数でオーバーロードできません。</target>
        </trans-unit>
        <trans-unit id="1899b0354c680094e6ce0955a619b11401875aac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@property&lt;/code&gt; functions cannot have variadic parameters.</source>
          <target state="translated">&lt;code&gt;@property&lt;/code&gt; 関数は可変引数を持つことはできません。</target>
        </trans-unit>
        <trans-unit id="76380ecaf01afb85f0044254a7d4b66358545c56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@safe&lt;/code&gt; functions have a number of restrictions on what they may do and are intended to disallow operations that may cause memory corruption. See &lt;a href=&quot;function#safe-functions&quot;&gt;&lt;code&gt;@safe&lt;/code&gt; functions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@safe&lt;/code&gt; 関数には、実行できる内容にいくつかの制限があり、メモリの破損を引き起こす可能性のある操作を禁止することを目的としています。&lt;a href=&quot;function#safe-functions&quot;&gt; &lt;code&gt;@safe&lt;/code&gt; 関数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9256c91d32406bfdf38800a20bf913361e88031e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@safe&lt;/code&gt;, &lt;code&gt;@trusted&lt;/code&gt;, and &lt;code&gt;@system&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;@safe&lt;/code&gt; 、 &lt;code&gt;@trusted&lt;/code&gt; 、および &lt;code&gt;@system&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="63252c0535bac17f08c817b75c5f13428fdb17d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@system&lt;/code&gt; functions may perform any operation legal from the perspective of the language including inherently memory unsafe operations like returning pointers to expired stackframes. These functions may not be called directly from &lt;code&gt;@safe&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;@system&lt;/code&gt; 関数は、有効期限が切れたスタックフレームへのポインタを返すなど、本質的にメモリの安全でない操作を含め、言語の観点から正当な操作を実行できます。これらの関数は、 &lt;code&gt;@safe&lt;/code&gt; 関数から直接呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="1e802eb587afd93d2f6c4d83fb8f23730a64dd76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@trusted&lt;/code&gt; functions have all the capabilities of &lt;code&gt;@system&lt;/code&gt; functions but may be called from &lt;code&gt;@safe&lt;/code&gt; functions. For this reason they should be very limited in the scope of their use. Typical uses of &lt;code&gt;@trusted&lt;/code&gt; functions include wrapping system calls that take buffer pointer and length arguments separately so that @safe` functions may call them with arrays.</source>
          <target state="translated">&lt;code&gt;@trusted&lt;/code&gt; 関数は@system関数のすべての機能を &lt;code&gt;@system&lt;/code&gt; ますが、 &lt;code&gt;@safe&lt;/code&gt; 関数から呼び出すことができます。このため、それらの使用範囲は非常に制限されます。 &lt;code&gt;@trusted&lt;/code&gt; 関数の一般的な用途としては、@ safe`関数が配列を使用してそれらを呼び出すことができるように、バッファーポインターと長さの引数を個別に取るシステムコールのラップが挙げられます。</target>
        </trans-unit>
        <trans-unit id="7b7b2ec22a078014319be45b79df08258bb74f13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;A.foo()&lt;/code&gt; and &lt;code&gt;A.foo(long)&lt;/code&gt; form an overload set. A different module can also define functions with the same name:</source>
          <target state="translated">&lt;code&gt;A.foo()&lt;/code&gt; と &lt;code&gt;A.foo(long)&lt;/code&gt; はオーバーロードセットを形成します。別のモジュールでも同じ名前の関数を定義できます。</target>
        </trans-unit>
        <trans-unit id="0494fa5e8697863931a268f56a7e313b15fa7bc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Address&lt;/code&gt; is an abstract class for representing a socket addresses.</source>
          <target state="translated">&lt;code&gt;Address&lt;/code&gt; は、ソケットアドレスを表すための抽象クラスです。</target>
        </trans-unit>
        <trans-unit id="63f8e6c905b185a2e61cdd95f261d361df08a36c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AddressException&lt;/code&gt; on error, or &lt;code&gt;SocketFeatureException&lt;/code&gt; if host name lookup for this address family is not available on the current system.</source>
          <target state="translated">&lt;code&gt;AddressException&lt;/code&gt; エラー、または上の &lt;code&gt;SocketFeatureException&lt;/code&gt; このアドレスファミリのホスト名の検索が現在のシステムで利用できない場合。</target>
        </trans-unit>
        <trans-unit id="2f961238680f01eeda9c0208d72d9a727592f0e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AddressException&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;AddressException&lt;/code&gt; エラー時のAddressException。</target>
        </trans-unit>
        <trans-unit id="5ebe362c761732ab62a4361ba380d53bd21d7194" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AddressException&lt;/code&gt; on failure, or &lt;code&gt;SocketFeatureException&lt;/code&gt; if address retrieval for this address family is not available on the current system.</source>
          <target state="translated">&lt;code&gt;AddressException&lt;/code&gt; 失敗、または上の &lt;code&gt;SocketFeatureException&lt;/code&gt; このアドレスファミリのアドレス検索が現在のシステムで利用できない場合。</target>
        </trans-unit>
        <trans-unit id="f40e1758855b4027e53355680b270fb2100d0ae4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AddressException&lt;/code&gt; on failure, or &lt;code&gt;SocketFeatureException&lt;/code&gt; if port number retrieval for this address family is not available on the current system.</source>
          <target state="translated">&lt;code&gt;AddressException&lt;/code&gt; 失敗、または上の &lt;code&gt;SocketFeatureException&lt;/code&gt; このアドレスファミリのポート番号検索は現在のシステムで利用できない場合。</target>
        </trans-unit>
        <trans-unit id="a0f47e28a240c095ac0652696954b5953fcbc0a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AddressException&lt;/code&gt; on failure, or &lt;code&gt;SocketFeatureException&lt;/code&gt; if service name lookup for this address family is not available on the current system.</source>
          <target state="translated">&lt;code&gt;AddressException&lt;/code&gt; 失敗した場合、または &lt;code&gt;SocketFeatureException&lt;/code&gt; はこのアドレスファミリのサービス名ルックアップは、現在のシステムで利用できない場合。</target>
        </trans-unit>
        <trans-unit id="b5828f821b8aea42c299b3e9109f069f9c37a828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AddressFamily&lt;/code&gt; - address family to filter by</source>
          <target state="translated">&lt;code&gt;AddressFamily&lt;/code&gt; -フィルターに使用するアドレスファミリー</target>
        </trans-unit>
        <trans-unit id="64ad3aa38a4e1cf80b2339b1f85a40825b728d1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AddressInfoFlags&lt;/code&gt; - option flags</source>
          <target state="translated">&lt;code&gt;AddressInfoFlags&lt;/code&gt; -オプションフラグ</target>
        </trans-unit>
        <trans-unit id="7dc4a85ea5727659d699df6d8c458e28309faed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AlignedBlockList&lt;/code&gt; represents a wrapper around a chain of allocators, allowing for fast deallocations and preserving a low degree of fragmentation by means of aligned allocations.</source>
          <target state="translated">&lt;code&gt;AlignedBlockList&lt;/code&gt; は、アロケーターのチェーンのラッパーを表します。これにより、高速な割り当て解除が可能になり、割り当てられた割り当てにより、断片化の程度を低く抑えることができます。</target>
        </trans-unit>
        <trans-unit id="2aac4ff89a1251fffc9ea676fd3d3a75e327c061" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AlignedBlockList&lt;/code&gt; represents a wrapper around a chain of allocators, allowing for fast deallocations and preserving a low degree of fragmentation. The allocator holds internally a doubly linked list of &lt;code&gt;Allocator&lt;/code&gt; objects, which will serve allocations in a most-recently-used fashion. Most recent allocators used for &lt;code&gt;allocate&lt;/code&gt; calls, will be moved to the front of the list.</source>
          <target state="translated">&lt;code&gt;AlignedBlockList&lt;/code&gt; は、アロケーターのチェーンのラッパーを表し、高速な割り当て解除を可能にし、断片化の程度を低く抑えます。アロケーターは、 &lt;code&gt;Allocator&lt;/code&gt; オブジェクトの二重にリンクされたリストを内部的に保持します。これは、最近使用された方法で割り当てを提供します。 &lt;code&gt;allocate&lt;/code&gt; 呼び出しに使用される最新のアロケーターは、リストの先頭に移動されます。</target>
        </trans-unit>
        <trans-unit id="13e555da2052e32dcab37e698e860002bf9cfb74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AllocFlag&lt;/code&gt; combination</source>
          <target state="translated">&lt;code&gt;AllocFlag&lt;/code&gt; の組み合わせ</target>
        </trans-unit>
        <trans-unit id="2d0e2d98007fbd8a78591eed210eee8ac8b3c6a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AllocatorList&lt;/code&gt; is primarily intended for coarse-grained handling of allocators, i.e. the number of allocators in the list is expected to be relatively small compared to the number of allocations handled by each allocator. However, the per-allocator overhead is small so using &lt;code&gt;AllocatorList&lt;/code&gt; with a large number of allocators should be satisfactory as long as the most-recently-used strategy is fast enough for the application.</source>
          <target state="translated">&lt;code&gt;AllocatorList&lt;/code&gt; は、主にアロケータの粗粒度の処理を目的としています。つまり、リスト内のアロケータの数は、各アロケータが処理する割り当ての数に比べて比較的少ないと予想されます。ただし、アロケータごとのオーバーヘッドは小さいため、最近使用された戦略がアプリケーションに対して十分高速である限り、 &lt;code&gt;AllocatorList&lt;/code&gt; を多数のアロケータとともに使用しても問題ありません。</target>
        </trans-unit>
        <trans-unit id="2a9263569f31d6f21ef7c6064d7d886d4088e71e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AllocatorList&lt;/code&gt; makes an effort to return allocated memory back when no longer used. It does so by destroying empty allocators. However, in order to avoid thrashing (excessive creation/destruction of allocators under certain use patterns), it keeps unused allocators for a while.</source>
          <target state="translated">&lt;code&gt;AllocatorList&lt;/code&gt; は、使用されなくなったときに割り当てられたメモリを返すように努力します。空のアロケータを破棄することでそれを行います。ただし、スラッシング（特定の使用パターンでのアロケーターの過剰な作成/破棄）を回避するために、しばらくの間未使用のアロケーターを保持します。</target>
        </trans-unit>
        <trans-unit id="5d071eb9976a79b4a2500d3fbf6dab04761c67f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; must not have unshared aliasing.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; は非共有エイリアスを設定できません。</target>
        </trans-unit>
        <trans-unit id="3d6c9e4352fe5c3f5c6acaa10eb2b6833c10d2c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array!bool&lt;/code&gt; packs together values efficiently by allocating one bit per element</source>
          <target state="translated">&lt;code&gt;Array!bool&lt;/code&gt; は、要素ごとに1ビットを割り当てることにより、値を効率的にまとめます</target>
        </trans-unit>
        <trans-unit id="705c9b8cd80c0abcd241a8704a8e03e6c9084b57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AscendingPageAllocator&lt;/code&gt; is a fast and safe allocator that rounds all allocations to multiples of the system's page size. It reserves a range of virtual addresses (using &lt;code&gt;mmap&lt;/code&gt; on Posix and &lt;code&gt;VirtualAlloc&lt;/code&gt; on Windows) and allocates memory at consecutive virtual addresses.</source>
          <target state="translated">&lt;code&gt;AscendingPageAllocator&lt;/code&gt; は、すべての割り当てをシステムのページサイズの倍数に丸める高速で安全なアロケーターです。一連の仮想アドレスを予約し（Posix では &lt;code&gt;mmap&lt;/code&gt; 、Windowsでは &lt;code&gt;VirtualAlloc&lt;/code&gt; を使用）、連続する仮想アドレスにメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="04218a7012508fe4191b10a87336cc6b1273cc13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AssertError&lt;/code&gt; if the given &lt;code&gt;Throwable&lt;/code&gt; is not thrown.</source>
          <target state="translated">&lt;code&gt;AssertError&lt;/code&gt; 指定された &lt;code&gt;Throwable&lt;/code&gt; がスローされない場合はAssertError。</target>
        </trans-unit>
        <trans-unit id="79a5a3ac59900685640330cfc081e2b319714288" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AssertError&lt;/code&gt; if the given &lt;code&gt;Throwable&lt;/code&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;AssertError&lt;/code&gt; 指定された &lt;code&gt;Throwable&lt;/code&gt; がスローされた場合はAssertError。</target>
        </trans-unit>
        <trans-unit id="48065955e3cbf0f918e5b84c93a8195ee5d56267" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AssignExp&lt;/code&gt; or &lt;code&gt;CatAssignExp&lt;/code&gt; to check for any pointers to the stack</source>
          <target state="translated">&lt;code&gt;AssignExp&lt;/code&gt; スタックへのポインターをチェックするためのAssignExpまたは &lt;code&gt;CatAssignExp&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b546397158fafebfd9a66a9cae2f9c303cb63883" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AutoImplement&lt;/code&gt; automatically implements (by default) all abstract member functions in the class or interface &lt;code&gt;Base&lt;/code&gt; in specified way.</source>
          <target state="translated">&lt;code&gt;AutoImplement&lt;/code&gt; は、クラスまたはインターフェイス &lt;code&gt;Base&lt;/code&gt; のすべての抽象メンバー関数を指定された方法で（デフォルトで）自動的に実装します。</target>
        </trans-unit>
        <trans-unit id="21bb1733c4ce14ff9de978726113c04a3401771e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Base64Exception&lt;/code&gt; If invoked when &lt;a href=&quot;#Base64Impl.Encoder.empty&quot;&gt;`empty`&lt;/a&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Base64Exception&lt;/code&gt; &lt;a href=&quot;#Base64Impl.Encoder.empty&quot;&gt;`empty`&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を返したときに呼び出された場合。</target>
        </trans-unit>
        <trans-unit id="ebced38d3d013a303994fc7294831ec443f6b2c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Base64Exception&lt;/code&gt; If invoked when &lt;a href=&quot;#Base64Impl.Encoder.empty.2&quot;&gt;` empty`&lt;/a&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Base64Exception&lt;/code&gt; &lt;a href=&quot;#Base64Impl.Encoder.empty.2&quot;&gt;`empty`&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を返したときに呼び出された場合。</target>
        </trans-unit>
        <trans-unit id="500444657b554197a2e7e1e88e444620d4ec0295" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Base64Exception&lt;/code&gt; if invoked when &lt;a href=&quot;#Base64Impl.Decoder.empty&quot;&gt;` empty`&lt;/a&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Base64Exception&lt;/code&gt; &lt;a href=&quot;#Base64Impl.Decoder.empty&quot;&gt;`empty`&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を返したときにBase64Exceptionが呼び出された場合。</target>
        </trans-unit>
        <trans-unit id="7cb7869f728c8d6d25945c2b87f5bcbca9b27844" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Base64Exception&lt;/code&gt; if source contains characters outside the base alphabet of the current Base64 encoding scheme.</source>
          <target state="translated">&lt;code&gt;Base64Exception&lt;/code&gt; ソースに現在のBase64エンコードスキームのベースアルファベット以外の文字が含まれている場合、Base64Exception。</target>
        </trans-unit>
        <trans-unit id="a386e95823d58783ccfcf9ed4858920237676d35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BinaryHeap&lt;/code&gt; implements the standard input range interface, allowing lazy iteration of the underlying range in descending order.</source>
          <target state="translated">&lt;code&gt;BinaryHeap&lt;/code&gt; は標準の入力範囲インターフェイスを実装しており、基になる範囲を降順で遅延して反復できます。</target>
        </trans-unit>
        <trans-unit id="39e18f0659912331e89425afd9610294f5efef67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BitmappedBlock&lt;/code&gt; implements a simple heap consisting of one contiguous area of memory organized in blocks, each of size &lt;code&gt;theBlockSize&lt;/code&gt;. A block is a unit of allocation. A bitmap serves as bookkeeping data, more precisely one bit per block indicating whether that block is currently allocated or not.</source>
          <target state="translated">&lt;code&gt;BitmappedBlock&lt;/code&gt; は、それぞれがサイズ &lt;code&gt;theBlockSize&lt;/code&gt; のブロックに編成された1つの連続したメモリ領域で構成される単純なヒープを実装します。ブロックは割り当ての単位です。ビットマップは簿記データとして機能します。より正確には、ブロックが現在割り当てられているかどうかを示すブロックごとに1ビットです。</target>
        </trans-unit>
        <trans-unit id="933f016b603e800d31983480a5c372706d49a5e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BlackHole!Base&lt;/code&gt; is a subclass of &lt;code&gt;Base&lt;/code&gt; which automatically implements all abstract member functions in &lt;code&gt;Base&lt;/code&gt; as do-nothing functions. Each auto-implemented function just returns the default value of the return type without doing anything.</source>
          <target state="translated">&lt;code&gt;BlackHole!Base&lt;/code&gt; のサブクラスで &lt;code&gt;Base&lt;/code&gt; を自動的にすべての抽象メンバ関数を実装 &lt;code&gt;Base&lt;/code&gt; がdo-nothing機能として。自動実装された各関数は、何もせずに戻り値の型のデフォルト値を返すだけです。</target>
        </trans-unit>
        <trans-unit id="43ce84cda21371df91482f18480d181e60b4d348" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BoyerMooreFinder&lt;/code&gt; allocates GC memory.</source>
          <target state="translated">&lt;code&gt;BoyerMooreFinder&lt;/code&gt; はGCメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="ad37dbabc0225dbe91d779a5c2478ebbe06c13bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bucketizer&lt;/code&gt; holds a fixed-size array of allocators and dispatches calls to them appropriately. The size of the array is &lt;code&gt;(max + 1 - min) / step&lt;/code&gt;, which must be an exact division.</source>
          <target state="translated">&lt;code&gt;Bucketizer&lt;/code&gt; は、アロケーターの固定サイズの配列を保持し、それらへの呼び出しを適切にディスパッチします。配列のサイズは &lt;code&gt;(max + 1 - min) / step&lt;/code&gt; で、正確な除算でなければなりません。</target>
        </trans-unit>
        <trans-unit id="d7e5303aaec3d1918d07f980b6ff3c717de278f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Captures&lt;/code&gt; object contains submatches captured during a call to &lt;code&gt;match&lt;/code&gt; or iteration over &lt;code&gt;RegexMatch&lt;/code&gt; range.</source>
          <target state="translated">&lt;code&gt;Captures&lt;/code&gt; オブジェクトには、 &lt;code&gt;RegexMatch&lt;/code&gt; 範囲での &lt;code&gt;match&lt;/code&gt; または反復の呼び出し中にキャプチャされたサブ一致が含まれます。</target>
        </trans-unit>
        <trans-unit id="309893639b24ac675f2672438e92cfb6821b443e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CheckFailure&lt;/code&gt; if the comparison is mathematically erroneous.</source>
          <target state="translated">&lt;code&gt;CheckFailure&lt;/code&gt; 比較が数学的に誤っている場合は、CheckFailure。</target>
        </trans-unit>
        <trans-unit id="ccdb30bb454730e08beb8407ef654f2c4fc02f5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Checked&lt;/code&gt; has customizable behavior with the help of a second type parameter, &lt;code&gt;Hook&lt;/code&gt;. Depending on what methods &lt;code&gt;Hook&lt;/code&gt; defines, core operations on the underlying integral may be verified for overflow or completely redefined. If &lt;code&gt;Hook&lt;/code&gt; defines no method at all and carries no state, there is no change in behavior, i.e. &lt;code&gt;Checked!(int, void)&lt;/code&gt; is a wrapper around &lt;code&gt;int&lt;/code&gt; that adds no customization at all.</source>
          <target state="translated">&lt;code&gt;Checked&lt;/code&gt; には、2番目の型パラメーター &lt;code&gt;Hook&lt;/code&gt; を使用してカスタマイズ可能な動作があります。 &lt;code&gt;Hook&lt;/code&gt; 定義するメソッドに応じて、基礎となる積分のコア操作は、オーバーフローについて検証されるか、完全に再定義されます。 &lt;code&gt;Hook&lt;/code&gt; がメソッドをまったく定義せず、状態も伝達しない場合、動作に変化はありません。つまり、 &lt;code&gt;Checked!(int, void)&lt;/code&gt; は、カスタマイズをまったく追加しない &lt;code&gt;int&lt;/code&gt; のラッパーです。</target>
        </trans-unit>
        <trans-unit id="b33f2fe31af4e020ff9efa1c941efd75f784be56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ClockType.normal&lt;/code&gt;, &lt;code&gt;ClockType.coarse&lt;/code&gt;, and &lt;code&gt;ClockType.precise&lt;/code&gt; work with both &lt;code&gt;Clock.currTime&lt;/code&gt; and &lt;a href=&quot;#MonoTimeImpl&quot;&gt;&lt;code&gt;MonoTimeImpl&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;ClockType.second&lt;/code&gt; only works with &lt;code&gt;Clock.currTime&lt;/code&gt;. The others only work with &lt;a href=&quot;#MonoTimeImpl&quot;&gt;&lt;code&gt;MonoTimeImpl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ClockType.normal&lt;/code&gt; 、 &lt;code&gt;ClockType.coarse&lt;/code&gt; 、および &lt;code&gt;ClockType.precise&lt;/code&gt; は、 &lt;code&gt;Clock.currTime&lt;/code&gt; と&lt;a href=&quot;#MonoTimeImpl&quot;&gt; &lt;code&gt;MonoTimeImpl&lt;/code&gt; の&lt;/a&gt;両方で機能します。 &lt;code&gt;ClockType.second&lt;/code&gt; はClock.currTimeでのみ機能し &lt;code&gt;Clock.currTime&lt;/code&gt; 。他のものは&lt;a href=&quot;#MonoTimeImpl&quot;&gt; &lt;code&gt;MonoTimeImpl&lt;/code&gt; で&lt;/a&gt;のみ機能します。</target>
        </trans-unit>
        <trans-unit id="3bd546dd377a5ca9a91504338ed3d12c7a06c162" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Complex&lt;/code&gt; instance with real and imaginary parts set to the values provided as input. If neither &lt;code&gt;re&lt;/code&gt; nor &lt;code&gt;im&lt;/code&gt; are floating-point numbers, the return type will be &lt;code&gt;Complex!double&lt;/code&gt;. Otherwise, the return type is deduced using &lt;code&gt;std.traits.CommonType!(R, I)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Complex&lt;/code&gt; 入力として提供された値に設定された実数部と虚数部を持つ複雑なインスタンス。 &lt;code&gt;re&lt;/code&gt; も &lt;code&gt;im&lt;/code&gt; も浮動小数点数でない場合、戻り値の型は &lt;code&gt;Complex!double&lt;/code&gt; になります。それ以外の場合、戻り値の型は &lt;code&gt;std.traits.CommonType!(R, I)&lt;/code&gt; を使用して推定されます。</target>
        </trans-unit>
        <trans-unit id="4f1981cf0c5b9aacc8c3e1f9ea526f149b5b37a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ConstRange&lt;/code&gt; is a variant with &lt;code&gt;const&lt;/code&gt; elements. &lt;code&gt;ImmutableRange&lt;/code&gt; is a variant with &lt;code&gt;immutable&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;ConstRange&lt;/code&gt; は、 &lt;code&gt;const&lt;/code&gt; 要素を持つバリアントです。 &lt;code&gt;ImmutableRange&lt;/code&gt; は &lt;code&gt;immutable&lt;/code&gt; 要素を持つバリアントです。</target>
        </trans-unit>
        <trans-unit id="9f0a285a64a257a738ddc8215c5d1f4b1ea5f630" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ContiguousFreeList&lt;/code&gt; has most advantages of &lt;code&gt;FreeList&lt;/code&gt; but fewer disadvantages. It has better cache locality because items are closer to one another. It imposes less fragmentation on its parent allocator.</source>
          <target state="translated">&lt;code&gt;ContiguousFreeList&lt;/code&gt; には &lt;code&gt;FreeList&lt;/code&gt; のほとんどの利点がありますが、欠点はほとんどありません。アイテムが互いに近いため、キャッシュの局所性が向上します。親アロケータの断片化が少なくなります。</target>
        </trans-unit>
        <trans-unit id="5fdcd2f0664be754d421f0e8e94106531175532e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CurlException&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;CurlException&lt;/code&gt; エラー時にCurlException。</target>
        </trans-unit>
        <trans-unit id="c207e7eb5b1c2a73f8ac5ffe36b3bcc018bf05ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DList&lt;/code&gt; uses reference semantics.</source>
          <target state="translated">&lt;code&gt;DList&lt;/code&gt; は参照セマンティクスを使用します。</target>
        </trans-unit>
        <trans-unit id="56d091bff1aace57a8798a77c763e1d6bc36b169" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Date&lt;/code&gt; uses the Proleptic Gregorian Calendar, so it assumes the Gregorian leap year calculations for its entire length. As per &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;, it treats 1 B.C. as year 0, i.e. 1 B.C. is 0, 2 B.C. is -1, etc. Use &lt;a href=&quot;#yearBC&quot;&gt;&lt;code&gt;yearBC&lt;/code&gt;&lt;/a&gt; to use B.C. as a positive integer with 1 B.C. being the year prior to 1 A.D.</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; はProleptic Gregorian Calendarを使用しているため、グレゴリオ暦のうるう年の計算はその全体の長さを想定しています。あたりとして&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;、それは年0と1つのBCを扱い、すなわち1つのBCが0で、2 BCは-1、などの使用&lt;a href=&quot;#yearBC&quot;&gt; &lt;code&gt;yearBC&lt;/code&gt; &lt;/a&gt; 1つのBCは、前1つのADの年であることを正の整数としてBCを使用します</target>
        </trans-unit>
        <trans-unit id="7bfc68ccb2a4e22e418742b095af915878cf89fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErrnoException&lt;/code&gt; if the file could not be opened.</source>
          <target state="translated">&lt;code&gt;ErrnoException&lt;/code&gt; ファイルを開けなかった場合はErrnoException。</target>
        </trans-unit>
        <trans-unit id="493ee8438d3cfa33971d7dccea919872285bce11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErrnoException&lt;/code&gt; if the file is not opened or if the call to &lt;code&gt;fwrite&lt;/code&gt; fails.</source>
          <target state="translated">&lt;code&gt;ErrnoException&lt;/code&gt; -ファイルが開かれていない場合、または &lt;code&gt;fwrite&lt;/code&gt; の呼び出しが失敗した場合。</target>
        </trans-unit>
        <trans-unit id="07b5a06c5039124b8ad1df2dc89969b320d534d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErrnoException&lt;/code&gt; in case of error.</source>
          <target state="translated">&lt;code&gt;ErrnoException&lt;/code&gt; エラーの場合はErrnoException。</target>
        </trans-unit>
        <trans-unit id="8b930e092cece6fadf6f6900420461e2d20e336e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErrnoException&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;ErrnoException&lt;/code&gt; エラー時のErrnoException。</target>
        </trans-unit>
        <trans-unit id="dd239e85060d6e26ab1980f40e672ff73bfb0858" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErrnoException&lt;/code&gt; on failure if closing the file.</source>
          <target state="translated">&lt;code&gt;ErrnoException&lt;/code&gt; ファイルを閉じる場合、失敗するとErrnoException。</target>
        </trans-unit>
        <trans-unit id="37e046750496d7d91c0e7d494f6853286088255f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if &lt;code&gt;buffer&lt;/code&gt; is empty. &lt;code&gt;ErrnoException&lt;/code&gt; if the file is not opened or the call to &lt;code&gt;fread&lt;/code&gt; fails.  &lt;code&gt;rawRead&lt;/code&gt; always reads in binary mode on Windows.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; &lt;code&gt;buffer&lt;/code&gt; が空の場合は例外。 &lt;code&gt;ErrnoException&lt;/code&gt; -ファイルが開かれていない場合、または &lt;code&gt;fread&lt;/code&gt; の呼び出しが失敗した場合。 &lt;code&gt;rawRead&lt;/code&gt; は、Windowsでは常にバイナリモードで読み取ります。</target>
        </trans-unit>
        <trans-unit id="5357a482b6af648bdfdae7c4c52ac903a4330a1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if &lt;code&gt;r&lt;/code&gt; is empty</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; &lt;code&gt;r&lt;/code&gt; が空の場合は例外</target>
        </trans-unit>
        <trans-unit id="c39a22e167279d617a0fc36daa4eccdae4e0b8a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if &lt;code&gt;r&lt;/code&gt; is not a range extracted from this array.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; &lt;code&gt;r&lt;/code&gt; がこの配列から抽出された範囲でない場合の例外。</target>
        </trans-unit>
        <trans-unit id="2d3c1830fcba55441c8b8708ac54ee0a65f17621" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if &lt;code&gt;r&lt;/code&gt; is not a valid range extracted from this array.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; &lt;code&gt;r&lt;/code&gt; がこの配列から抽出された有効な範囲でない場合の例外。</target>
        </trans-unit>
        <trans-unit id="6eea76a1ffc828fd53a324818d486f97cad280bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if &lt;code&gt;range.empty&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; &lt;code&gt;range.empty&lt;/code&gt; の場合は例外。</target>
        </trans-unit>
        <trans-unit id="9a3c6b353ef2f15072975ede8bc10964dd5ce9b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if newlength is greater than the current array length.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; newlengthが現在の配列の長さより大きい場合は例外です。</target>
        </trans-unit>
        <trans-unit id="5dfec39555f552ab3cc5ab1e7f2d9d9d48f01214" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if the InputRange didn't provide enough elements to seed the generator. The number of elements required is the 'n' template parameter of the MersenneTwisterEngine struct.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; InputRangeがジェネレータをシードするのに十分な要素を提供しなかった場合の例外。必要な要素の数は、MersenneTwisterEngine構造体の「n」テンプレートパラメータです。</target>
        </trans-unit>
        <trans-unit id="865428949f240b5fee7e83d1edb9e3fe9d25cc8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if the array is empty.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; 配列が空の場合は例外です。</target>
        </trans-unit>
        <trans-unit id="24bffc299c874cdf767b7647906bba79e926a8eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if the file is not opened or if the OS call fails.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; ファイルが開かれていない場合、またはOS呼び出しが失敗した場合の例外。</target>
        </trans-unit>
        <trans-unit id="1425ed7cd12f20780c89a15069d569df2ac8153d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if the file is not opened or if the call to &lt;code&gt;fflush&lt;/code&gt; fails.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; ファイルが開かれていない場合、または &lt;code&gt;fflush&lt;/code&gt; の呼び出しが失敗した場合の例外。</target>
        </trans-unit>
        <trans-unit id="4d278807b320706797dc5f37c056c614e9ab56c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if the file is not opened.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; ファイルが開かれていない場合は例外です。</target>
        </trans-unit>
        <trans-unit id="12ff2eb3e485817238b511a24e61f4e5651047c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if the file is not opened. &lt;code&gt;ErrnoException&lt;/code&gt; if the call to &lt;code&gt;fseek&lt;/code&gt; fails.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; ファイルが開かれていない場合は例外です。 &lt;code&gt;fseek&lt;/code&gt; の呼び出しが失敗した場合は &lt;code&gt;ErrnoException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92e2886b83c958de5c8cbfe39732479fc0881ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if the file is not opened. &lt;code&gt;ErrnoException&lt;/code&gt; if the call to &lt;code&gt;ftell&lt;/code&gt; fails.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; ファイルが開かれていない場合は例外です。 &lt;code&gt;ErrnoException&lt;/code&gt; の呼び出しが失敗した場合は &lt;code&gt;ftell&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c058e1025053f932c8cbe059de6e6a45a7ade6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if the file is not opened. &lt;code&gt;ErrnoException&lt;/code&gt; if the call to &lt;code&gt;setvbuf&lt;/code&gt; fails.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; ファイルが開かれていない場合は例外です。 &lt;code&gt;ErrnoException&lt;/code&gt; - &lt;code&gt;setvbuf&lt;/code&gt; の呼び出しが失敗した場合。</target>
        </trans-unit>
        <trans-unit id="9f59183ade2749bbcd85be7bdd7539cc2dde8f91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if the file is not opened. &lt;code&gt;ErrnoException&lt;/code&gt; on an error writing to the file.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; ファイルが開かれていない場合は例外です。ファイルへの書き込みエラー時の &lt;code&gt;ErrnoException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="880297ec9e517b1658e861861ad15bb2e8e8065e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if the format string is malformed. Also, throws &lt;code&gt;Exception&lt;/code&gt; if any of the lines in the file are not fully consumed by the call to &lt;a href=&quot;std_format#formattedRead&quot;&gt;&lt;code&gt;std.format.formattedRead&lt;/code&gt;&lt;/a&gt;. Meaning that no empty lines or lines with extra characters are allowed.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; 書式文字列の形式が正しくない場合は例外です。また、ファイル内のいずれかの行が&lt;a href=&quot;std_format#formattedRead&quot;&gt; &lt;code&gt;std.format.formattedRead&lt;/code&gt; &lt;/a&gt;の呼び出しによって完全に消費されない場合は、 &lt;code&gt;Exception&lt;/code&gt; スローします。つまり、空の行や余分な文字を含む行は許可されません。</target>
        </trans-unit>
        <trans-unit id="de0a5fbad1ac6efb5fd9baf8351d9afcefe62cb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt; if the specified base directory is not absolute.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; 指定されたベースディレクトリが絶対ディレクトリでない場合は例外です。</target>
        </trans-unit>
        <trans-unit id="f6df157c4a7711890860c9639006d090861c8052" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Expression&lt;/code&gt; created, &lt;code&gt;null&lt;/code&gt; if cannot, &lt;code&gt;ErrorExp&lt;/code&gt; for other errors</source>
          <target state="translated">&lt;code&gt;Expression&lt;/code&gt; 作成されました。作成できない場合は &lt;code&gt;null&lt;/code&gt; 、その他のエラーの場合は &lt;code&gt;ErrorExp&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebd4302c37b74c7523edd170489c26935f44df7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&lt;/code&gt; must not have any unshared aliasing as defined by &lt;a href=&quot;std_traits#hasUnsharedAliasing&quot;&gt;&lt;code&gt;std.traits.hasUnsharedAliasing&lt;/code&gt;&lt;/a&gt;. This means it may not be an unshared delegate or a non-shared class or struct with overloaded &lt;code&gt;opCall&lt;/code&gt;. This also precludes accepting template alias parameters.</source>
          <target state="translated">&lt;code&gt;F&lt;/code&gt; には、&lt;a href=&quot;std_traits#hasUnsharedAliasing&quot;&gt; &lt;code&gt;std.traits.hasUnsharedAliasing&lt;/code&gt; で&lt;/a&gt;定義されている非共有エイリアスがあってはなりません。これは、非共有のデリゲート、非共有のクラス、またはオーバーロードされた &lt;code&gt;opCall&lt;/code&gt; を持つ構造体ではない可能性があることを意味します。これにより、テンプレートエイリアスパラメータを受け入れることもできなくなります。</target>
        </trans-unit>
        <trans-unit id="4417b447d6e34a9b6a9d00ab903bf61ae7b12316" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FILETIME&lt;/code&gt;s are always in UTC.</source>
          <target state="translated">&lt;code&gt;FILETIME&lt;/code&gt; は常にUTCです。</target>
        </trans-unit>
        <trans-unit id="9ad36e002f703b7a77a7d8759412e0073c140460" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FTP&lt;/code&gt; struct for advanced usage</source>
          <target state="translated">&lt;code&gt;FTP&lt;/code&gt; 高度な使用法のためのFTP構造体</target>
        </trans-unit>
        <trans-unit id="53f59d90a4d9a81fffddf93c0be659170d389f60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FallbackAllocator&lt;/code&gt; is the allocator equivalent of an &quot;or&quot; operator in algebra. An allocation request is first attempted with the &lt;code&gt;Primary&lt;/code&gt; allocator. If that returns &lt;code&gt;null&lt;/code&gt;, the request is forwarded to the &lt;code&gt;Fallback&lt;/code&gt; allocator. All other requests are dispatched appropriately to one of the two allocators.</source>
          <target state="translated">&lt;code&gt;FallbackAllocator&lt;/code&gt; は、代数の「or」演算子に相当するアロケータです。最初に、 &lt;code&gt;Primary&lt;/code&gt; アロケータを使用して割り当て要求が試行されます。それが &lt;code&gt;null&lt;/code&gt; を返す場合、リクエストは &lt;code&gt;Fallback&lt;/code&gt; ロケーターに転送されます。他のすべての要求は、2つのアロケータの1つに適切にディスパッチされます。</target>
        </trans-unit>
        <trans-unit id="30b00ee005e62aee06d690c21d13b91062908c24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FallbackAllocator&lt;/code&gt; is useful for fast, special-purpose allocators backed up by general-purpose allocators. The example below features a stack region backed up by the &lt;code&gt;GCAllocator&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FallbackAllocator&lt;/code&gt; は、汎用アロケータによってバックアップされた高速の専用アロケータに役立ちます。以下の例は、 &lt;code&gt;GCAllocator&lt;/code&gt; によってバックアップされたスタック領域を示しています。</target>
        </trans-unit>
        <trans-unit id="12059211a1f2cd4c2168c76ad92a90e7719491a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FallbackAllocator&lt;/code&gt; offers &lt;code&gt;alignedAllocate&lt;/code&gt; iff at least one of the allocators also offers it. It attempts to allocate using either or both.</source>
          <target state="translated">&lt;code&gt;FallbackAllocator&lt;/code&gt; は、アロケータの少なくとも1つでも提供される場合に、 &lt;code&gt;alignedAllocate&lt;/code&gt; を提供します。いずれかまたは両方を使用して割り当てを試みます。</target>
        </trans-unit>
        <trans-unit id="d37b29b23fa316d94fdcad5c8166e439cc28f457" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileException&lt;/code&gt; if it fails to read from disk.</source>
          <target state="translated">&lt;code&gt;FileException&lt;/code&gt; ディスクからの読み取りに失敗した場合はFileException。</target>
        </trans-unit>
        <trans-unit id="188634dda23bd46b447ec8ec1668b156fc7d14b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Final&lt;/code&gt; can also be used to create read-only data fields without using transitive immutability:</source>
          <target state="translated">&lt;code&gt;Final&lt;/code&gt; は、推移的不変性を使用せずに読み取り専用データフィールドを作成するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="889460128c963ae0b50d3b48964b85c59fa375e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Final&lt;/code&gt; can be used to create class references which cannot be rebound:</source>
          <target state="translated">&lt;code&gt;Final&lt;/code&gt; を使用して、再バインドできないクラス参照を作成できます。</target>
        </trans-unit>
        <trans-unit id="478f5e1ecc311901ec2b0e13063c90a9401676ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FreeTree&lt;/code&gt; rounds up small allocations to at least &lt;code&gt;4 * size_t.sizeof&lt;/code&gt;, which on 64-bit system is one cache line size. If very small objects need to be efficiently allocated, the &lt;code&gt;FreeTree&lt;/code&gt; should be fronted with an appropriate small object allocator.</source>
          <target state="translated">&lt;code&gt;FreeTree&lt;/code&gt; は、小さな割り当てを少なくとも &lt;code&gt;4 * size_t.sizeof&lt;/code&gt; 。これは、64ビットシステムでは1つのキャッシュラインサイズです。非常に小さなオブジェクトを効率的に割り当てる必要がある場合は、 &lt;code&gt;FreeTree&lt;/code&gt; の前に適切な小さなオブジェクトアロケータを配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="d77d6371df752392d6a3dc05802d163d4563983a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FuncDeclaration&lt;/code&gt; to mangle</source>
          <target state="translated">&lt;code&gt;FuncDeclaration&lt;/code&gt; するFuncDeclaration</target>
        </trans-unit>
        <trans-unit id="534218dc2a9eff64b3a6d0dd395079c920a853c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GetLastError&lt;/code&gt;'s return value.</source>
          <target state="translated">&lt;code&gt;GetLastError&lt;/code&gt; の戻り値。</target>
        </trans-unit>
        <trans-unit id="fe0e872c807344ef938e77fe62dbcc2ee42252f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Grapheme&lt;/code&gt; has value semantics so 2 copies of a &lt;code&gt;Grapheme&lt;/code&gt; always refer to distinct objects. In most actual scenarios a &lt;code&gt;Grapheme&lt;/code&gt; fits on the stack and avoids memory allocation overhead for all but quite long clusters.</source>
          <target state="translated">&lt;code&gt;Grapheme&lt;/code&gt; には値のセマンティクスがあるため、 &lt;code&gt;Grapheme&lt;/code&gt; の 2つのコピーは常に異なるオブジェクトを参照します。ほとんどの実際のシナリオでは、 &lt;code&gt;Grapheme&lt;/code&gt; はスタックに適合し、非常に長いクラスタを除くすべてのメモリ割り当てオーバーヘッドを回避します。</target>
        </trans-unit>
        <trans-unit id="a47bfdb3d233e9007f4d4e19f342cf063fcacfb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HTTP&lt;/code&gt; struct for advanced usage</source>
          <target state="translated">&lt;code&gt;HTTP&lt;/code&gt; 高度な使用法のためのHTTP構造体</target>
        </trans-unit>
        <trans-unit id="283f10bc662194860ed924948e7ca2b00bc64cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hook&lt;/code&gt; member</source>
          <target state="translated">&lt;code&gt;Hook&lt;/code&gt; メンバー</target>
        </trans-unit>
        <trans-unit id="3528ef07a2db59ecdda7c525258080250b32a27c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Implementation Note:&lt;/code&gt; Compilers should attempt to detect array bounds errors at compile time, for example:</source>
          <target state="translated">&lt;code&gt;Implementation Note:&lt;/code&gt; コンパイラは、コンパイル時に配列境界エラーを検出しようとする必要があります。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="e55f857cc1242d132c8a00873c15908f891e0a9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Implementation Note:&lt;/code&gt; The compiler should have a switch specifying if &lt;code&gt;deprecated&lt;/code&gt; should be ignored, cause a warning, or cause an error during compilation.</source>
          <target state="translated">&lt;code&gt;Implementation Note:&lt;/code&gt; コンパイラには、 &lt;code&gt;deprecated&lt;/code&gt; を無視するか、警告を発生させるか、コンパイル中にエラーを発生させるかを指定するスイッチが必要です。</target>
        </trans-unit>
        <trans-unit id="561dda1be5a110b61fe901643d2776b6422899b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Implementation Note:&lt;/code&gt; The compiler's code generator may assume that the case statements are sorted by frequency of use, with the most frequent appearing first and the least frequent last. Although this is irrelevant as far as program correctness is concerned, it is of performance interest.</source>
          <target state="translated">&lt;code&gt;Implementation Note:&lt;/code&gt; コンパイラーのコードジェネレーターは、caseステートメントが使用頻度でソートされ、最も頻度が高いものが最初に出現し、頻度が最も低いものを最後に想定している場合があります。プログラムの正確性に関する限り、これは重要ではありませんが、パフォーマンスに影響します。</target>
        </trans-unit>
        <trans-unit id="450a1b223ad68d4502564215cf64c6560e8a199b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InSituRegion&lt;/code&gt; is a convenient region that carries its storage within itself (in the form of a statically-sized array).</source>
          <target state="translated">&lt;code&gt;InSituRegion&lt;/code&gt; は、内部に（静的サイズの配列の形式で）ストレージを運ぶ便利な領域です。</target>
        </trans-unit>
        <trans-unit id="72722ed0146cefed0b01dfb5c3c45d47c9f4bbfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Initializer&lt;/code&gt; AST node</source>
          <target state="translated">&lt;code&gt;Initializer&lt;/code&gt; ASTノード</target>
        </trans-unit>
        <trans-unit id="f7a41aecd6b56da1cad754e3be715002c57e3b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Initializer&lt;/code&gt; with completed semantic analysis, &lt;code&gt;ErrorInitializer&lt;/code&gt; if errors were encountered</source>
          <target state="translated">&lt;code&gt;Initializer&lt;/code&gt; 完成意味解析、と &lt;code&gt;ErrorInitializer&lt;/code&gt; エラーが発生した場合</target>
        </trans-unit>
        <trans-unit id="f00d758a57b29aab9fb23c7584ece328b1a47384" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InputRange&lt;/code&gt; of &lt;code&gt;ElementType&lt;/code&gt; implicitly convertible to &lt;code&gt;ubyte&lt;/code&gt;, &lt;code&gt;ubyte[]&lt;/code&gt; or &lt;code&gt;ubyte[num]&lt;/code&gt; or one or more arrays of any type.</source>
          <target state="translated">&lt;code&gt;InputRange&lt;/code&gt; &lt;code&gt;ElementType&lt;/code&gt; のInputRangeは、暗黙的に &lt;code&gt;ubyte&lt;/code&gt; 、 &lt;code&gt;ubyte[]&lt;/code&gt; 、 &lt;code&gt;ubyte[num]&lt;/code&gt; または任意のタイプの1つ以上の配列に変換できます。</target>
        </trans-unit>
        <trans-unit id="23ce00df7053058cd95cf5976c1008a23c0c4613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Internet6Address&lt;/code&gt; encapsulates an IPv6 (Internet Protocol version 6) socket address.</source>
          <target state="translated">&lt;code&gt;Internet6Address&lt;/code&gt; は、IPv6（インターネットプロトコルバージョン6）ソケットアドレスをカプセル化します。</target>
        </trans-unit>
        <trans-unit id="929d7b4c4cc9a8637b6ae8f312d62876e111741b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InternetAddress&lt;/code&gt; encapsulates an IPv4 (Internet Protocol version 4) socket address.</source>
          <target state="translated">&lt;code&gt;InternetAddress&lt;/code&gt; は、IPv4（インターネットプロトコルバージョン4）ソケットアドレスをカプセル化します。</target>
        </trans-unit>
        <trans-unit id="b4014cd878c2c4218d0565b355de1af14ef65088" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InternetHost&lt;/code&gt; is a class for resolving IPv4 addresses.</source>
          <target state="translated">&lt;code&gt;InternetHost&lt;/code&gt; は、IPv4アドレスを解決するためのクラスです。</target>
        </trans-unit>
        <trans-unit id="303b79b6697c06325ef20861d3893a0348a6c9bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IntervalRange&lt;/code&gt; is only ever constructed by &lt;a href=&quot;#Interval&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt;. However, when it is constructed, it is given a function, &lt;code&gt;func&lt;/code&gt;, which is used to generate the time points which are iterated over. &lt;code&gt;func&lt;/code&gt; takes a time point and returns a time point of the same type. For instance, to iterate over all of the days in the interval &lt;code&gt;Interval!Date&lt;/code&gt;, pass a function to &lt;a href=&quot;#Interval&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt;'s &lt;code&gt;fwdRange&lt;/code&gt; where that function took a &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt; and returned a &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt; which was one day later. That function would then be used by &lt;code&gt;IntervalRange&lt;/code&gt;'s &lt;code&gt;popFront&lt;/code&gt; to iterate over the &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt;s in the interval.</source>
          <target state="translated">&lt;code&gt;IntervalRange&lt;/code&gt; がしかすることによって構築される&lt;a href=&quot;#Interval&quot;&gt; &lt;code&gt;Interval&lt;/code&gt; &lt;/a&gt;。ただし、作成されると、関数 &lt;code&gt;func&lt;/code&gt; が与えられます。これは、反復される時間点を生成するために使用されます。 &lt;code&gt;func&lt;/code&gt; は時間点を取り、同じタイプの時間点を返します。たとえば、間隔 &lt;code&gt;Interval!Date&lt;/code&gt; のすべての日を反復処理するには、関数を&lt;a href=&quot;#Interval&quot;&gt; &lt;code&gt;Interval&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;fwdRange&lt;/code&gt; に渡します。この関数は&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; を受け取り&lt;/a&gt;、1であった&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; &lt;/a&gt;を返しました。翌日。次に、その関数を &lt;code&gt;IntervalRange&lt;/code&gt; の &lt;code&gt;popFront&lt;/code&gt; で使用して、&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; &lt;/a&gt;間隔内の std.datetime.date.Date s。</target>
        </trans-unit>
        <trans-unit id="42f5f38819dff3129805052506f09ab99038900b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InversionList&lt;/code&gt; is a set of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt; represented as an array of open-right [a, b) intervals (see &lt;a href=&quot;#CodepointInterval&quot;&gt;&lt;code&gt;CodepointInterval&lt;/code&gt;&lt;/a&gt; above). The name comes from the way the representation reads left to right. For instance a set of all values [10, 50), [80, 90), plus a singular value 60 looks like this:</source>
          <target state="translated">&lt;code&gt;InversionList&lt;/code&gt; は、open-right [a、b）間隔の配列として表される&lt;a href=&quot;#Code%20point&quot;&gt;コードポイントの&lt;/a&gt;セットです（上記の&lt;a href=&quot;#CodepointInterval&quot;&gt; &lt;code&gt;CodepointInterval&lt;/code&gt; を&lt;/a&gt;参照）。名前は、表現が左から右に読む方法に由来しています。たとえば、すべての値のセット[10、50）、[80、90）、および特異値60は次のようになります。</target>
        </trans-unit>
        <trans-unit id="37d4eb6c709e9700de66fdc10c8e540d20a7e4b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; for read access if &lt;code&gt;this.type&lt;/code&gt; is not &lt;code&gt;JSONType.true_&lt;/code&gt; or &lt;code&gt;JSONType.false_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; 読み取りアクセス用の場合 &lt;code&gt;this.type&lt;/code&gt; はない &lt;code&gt;JSONType.true_&lt;/code&gt; か &lt;code&gt;JSONType.false_&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a9df16fb53d7d19ae3457b20afe88f508b70112" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; for read access if &lt;code&gt;type&lt;/code&gt; is not &lt;code&gt;JSONType.array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; 読み取りアクセス用の場合は &lt;code&gt;type&lt;/code&gt; ない &lt;code&gt;JSONType.array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="374fc56bce7b34d2d4fb37271f341137a55bd7f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; for read access if &lt;code&gt;type&lt;/code&gt; is not &lt;code&gt;JSONType.float_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; 読み取りアクセス用の場合は &lt;code&gt;type&lt;/code&gt; ない &lt;code&gt;JSONType.float_&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d02dc7a78830e793dd620b25cd54dc82c0b138c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; for read access if &lt;code&gt;type&lt;/code&gt; is not &lt;code&gt;JSONType.integer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; 読み取りアクセス用の場合は &lt;code&gt;type&lt;/code&gt; ない &lt;code&gt;JSONType.integer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28e63f5ce8b66a0b7464a33759d365eb7b21a25f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; for read access if &lt;code&gt;type&lt;/code&gt; is not &lt;code&gt;JSONType.object&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; 読み取りアクセス用の場合は &lt;code&gt;type&lt;/code&gt; ない &lt;code&gt;JSONType.object&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d471f0121d68cc1a9cbef2f94fe907eced15162" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; for read access if &lt;code&gt;type&lt;/code&gt; is not &lt;code&gt;JSONType.string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; 読み取りアクセス用の場合は &lt;code&gt;type&lt;/code&gt; ない &lt;code&gt;JSONType.string&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b58c34a2444a67e9977423cf25f961b52bddb51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; for read access if &lt;code&gt;type&lt;/code&gt; is not &lt;code&gt;JSONType.uinteger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; 読み取りアクセス用の場合は &lt;code&gt;type&lt;/code&gt; ない &lt;code&gt;JSONType.uinteger&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="671c21d33b5b19b3056188af6ccf3a56d8023f13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; cannot hold the contents of this &lt;code&gt;JSONValue&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; 場合 &lt;code&gt;T&lt;/code&gt; は、この内容を保持することはできません &lt;code&gt;JSONValue&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="924a316d93ba1266b4a2524f7d5f0279e50f3486" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; if &lt;code&gt;type&lt;/code&gt; is not &lt;code&gt;JSONType.array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; &lt;code&gt;type&lt;/code&gt; がJSONType.arrayでない場合は &lt;code&gt;JSONType.array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="288bfc2188bff0897b8c9f679a97e076b2f6137e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; if &lt;code&gt;type&lt;/code&gt; is not &lt;code&gt;JSONType.object&lt;/code&gt; or &lt;code&gt;JSONType.null_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; あれば &lt;code&gt;type&lt;/code&gt; ないです &lt;code&gt;JSONType.object&lt;/code&gt; か &lt;code&gt;JSONType.null_&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f353747ce5b1603415e719ffa2e430d1926bd101" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; if &lt;code&gt;type&lt;/code&gt; is not &lt;code&gt;JSONType.object&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; &lt;code&gt;type&lt;/code&gt; がJSONType.objectでない場合は &lt;code&gt;JSONType.object&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9086cd140a77112c308b7aa75d5b636b32089093" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONException&lt;/code&gt; if the right hand side argument &lt;code&gt;JSONType&lt;/code&gt; is not &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONException&lt;/code&gt; 右側の引数場合 &lt;code&gt;JSONType&lt;/code&gt; がされていない &lt;code&gt;object&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6bbca7de6c016dd7eb089e3687fc9b8bc4ab9f11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KRRegion&lt;/code&gt; = &lt;code&gt;Region&lt;/code&gt; + Kernighan-Ritchie Allocator</source>
          <target state="translated">&lt;code&gt;KRRegion&lt;/code&gt; = &lt;code&gt;Region&lt;/code&gt; + Kernighan-Ritchie Allocator</target>
        </trans-unit>
        <trans-unit id="f321db249483bbe4363807ada55b49818b58ef95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KRRegion&lt;/code&gt; draws inspiration from the &lt;a href=&quot;std_experimental_allocator_building_blocks_region&quot;&gt;region allocation strategy&lt;/a&gt; and also the &lt;a href=&quot;http://stackoverflow.com/questions/13159564/explain-this-implementation-of-malloc-from-the-kr-book&quot;&gt;famed allocator&lt;/a&gt; described by Brian Kernighan and Dennis Ritchie in section 8.7 of the book &lt;a href=&quot;http://amazon.com/exec/obidos/ASIN/0131103628/classicempire&quot;&gt;&quot;The C Programming Language&quot;&lt;/a&gt;, Second Edition, Prentice Hall, 1988.</source>
          <target state="translated">&lt;code&gt;KRRegion&lt;/code&gt; は、&lt;a href=&quot;std_experimental_allocator_building_blocks_region&quot;&gt;領域割り当て戦略&lt;/a&gt;と、ブライアンカーニハン氏とデニスリッチー氏が著書&lt;a href=&quot;http://amazon.com/exec/obidos/ASIN/0131103628/classicempire&quot;&gt;「Cプログラミング言語」&lt;/a&gt;第2版​​、プレンティスホール、1988年のセクション8.7で説明した&lt;a href=&quot;http://stackoverflow.com/questions/13159564/explain-this-implementation-of-malloc-from-the-kr-book&quot;&gt;有名なアロケーター&lt;/a&gt;からインスピレーションを得ています。</target>
        </trans-unit>
        <trans-unit id="db7d6e394e1f58df812747633f0d7ada9be95b40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KRRegion&lt;/code&gt; is preferable to &lt;code&gt;Region&lt;/code&gt; as a front for a general-purpose allocator if &lt;code&gt;deallocate&lt;/code&gt; is needed, yet the actual deallocation traffic is relatively low. The example below shows a &lt;code&gt;KRRegion&lt;/code&gt; using stack storage fronting the GC allocator.</source>
          <target state="translated">&lt;code&gt;KRRegion&lt;/code&gt; は、 &lt;code&gt;deallocate&lt;/code&gt; が必要であるにもかかわらず、実際の割り当て解除トラフィックが比較的少ない場合、 &lt;code&gt;Region&lt;/code&gt; よりも汎用アロケーターのフロントとして推奨されます。以下の例は、GCアロケーターの前にスタックストレージを使用する &lt;code&gt;KRRegion&lt;/code&gt; を示しています。</target>
        </trans-unit>
        <trans-unit id="407854dafd56dc695bff6d9f8c5ac2000bd997b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KeepTerminator&lt;/code&gt;&lt;code&gt;keepTerm&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;KeepTerminator&lt;/code&gt;&lt;code&gt;keepTerm&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66af2d9115e5fccdf0825879dc694b6243dc0999" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LINK&lt;/code&gt; to use for &lt;code&gt;extern(System)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LINK&lt;/code&gt; &lt;code&gt;extern(System)&lt;/code&gt; に使用するリンク</target>
        </trans-unit>
        <trans-unit id="eb1fb7a2d30c4bb9ff4f302703eea931bc144e7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Lhs.max&lt;/code&gt; if &lt;code&gt;rhs &amp;gt;= 0&lt;/code&gt;, &lt;code&gt;Lhs.min&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;Lhs.max&lt;/code&gt; 場合 &lt;code&gt;rhs &amp;gt;= 0&lt;/code&gt; 、 &lt;code&gt;Lhs.min&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="9419d1db36082b226ab787fbc5117f1ef86ba81b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Lhs.max&lt;/code&gt; if the result overflows in the positive direction, on division by &lt;code&gt;0&lt;/code&gt;, or on shifting right by a negative value</source>
          <target state="translated">&lt;code&gt;Lhs.max&lt;/code&gt; ( &lt;code&gt;0&lt;/code&gt; による除算、または負の値による右シフトで、結果が正の方向にオーバーフローする場合）</target>
        </trans-unit>
        <trans-unit id="9867d599d3360d2166c727451bf5ed485b43771d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Lhs.min&lt;/code&gt; if the result overflows in the negative direction</source>
          <target state="translated">&lt;code&gt;Lhs.min&lt;/code&gt; (結果が負の方向にオーバーフローする場合）</target>
        </trans-unit>
        <trans-unit id="e1f2a80c67e78e54a24eb42ee38cb80badfaf8a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Loc&lt;/code&gt; of the expression triggering the access to &lt;code&gt;at&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Loc&lt;/code&gt; へのアクセストリガー式の &lt;code&gt;at&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dae9c9a060f568e240a1c42e1af07db039cffb81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LogLevel&lt;/code&gt; for tracing the execution of the program.</source>
          <target state="translated">&lt;code&gt;LogLevel&lt;/code&gt; プログラムの実行をトレースするためのLogLevel。</target>
        </trans-unit>
        <trans-unit id="15d5c9fe039a45ff10bfb3fcf4c6a78d808c24c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LogLevel&lt;/code&gt; to use for this &lt;code&gt;Logger&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;LogLevel&lt;/code&gt; この &lt;code&gt;Logger&lt;/code&gt; インスタンスに使用するLogLevel。</target>
        </trans-unit>
        <trans-unit id="e1150e0e8c50b4644e9b3ad3ca52da419b7c609f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MessageMismatch&lt;/code&gt; if a message of types other than &lt;code&gt;T&lt;/code&gt; is received.</source>
          <target state="translated">&lt;code&gt;MessageMismatch&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; 以外のタイプのメッセージが受信された場合、MessageMismatch。</target>
        </trans-unit>
        <trans-unit id="65c7de08109ea54efe1649a109bfcb32d09b34bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ModuleInfo&lt;/code&gt; is supported. Evaluates to &lt;code&gt;false&lt;/code&gt; when compiling with command line switch &lt;a href=&quot;https://dlang.org/dmd.html#switch-betterC&quot;&gt;&lt;em&gt;-betterC&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;ModuleInfo&lt;/code&gt; がサポートされています。コマンドラインスイッチ&lt;a href=&quot;https://dlang.org/dmd.html#switch-betterC&quot;&gt;&lt;em&gt;-betterCで&lt;/em&gt;&lt;/a&gt;コンパイルすると &lt;code&gt;false&lt;/code&gt; と評価されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="88d77c659174b60bf4b59f2ff6bb6d3cc340de4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MurmurHash3!(128, 32)&lt;/code&gt; and &lt;code&gt;MurmurHash3!(128, 64)&lt;/code&gt; produce different values.</source>
          <target state="translated">&lt;code&gt;MurmurHash3!(128, 32)&lt;/code&gt; と &lt;code&gt;MurmurHash3!(128, 64)&lt;/code&gt; は異なる値を生成します。</target>
        </trans-unit>
        <trans-unit id="52bcc9f7af8f6f12630050db8b23eb2e2e49e448" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MurmurHash3!(128, 32)&lt;/code&gt; produces a 128-bit value and is optimized for 32-bit architectures</source>
          <target state="translated">&lt;code&gt;MurmurHash3!(128, 32)&lt;/code&gt; は128ビット値を生成し、32ビットアーキテクチャ用に最適化されています</target>
        </trans-unit>
        <trans-unit id="f32ddff3d6f4849c7478516798a4ac1b52282d34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MurmurHash3!(128, 64)&lt;/code&gt; produces a 128-bit value and is optimized for 64-bit architectures</source>
          <target state="translated">&lt;code&gt;MurmurHash3!(128, 64)&lt;/code&gt; は128ビット値を生成し、64ビットアーキテクチャ用に最適化されています</target>
        </trans-unit>
        <trans-unit id="0bd9dfe00b1b4ab2b4da44c82f7641cfaac9239b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MurmurHash3!32&lt;/code&gt; produces a 32-bit value and is optimized for 32-bit architectures</source>
          <target state="translated">&lt;code&gt;MurmurHash3!32&lt;/code&gt; は32ビット値を生成し、32ビットアーキテクチャ用に最適化されています</target>
        </trans-unit>
        <trans-unit id="4474b7d5c23fed4796fe3c267e522c992cd94904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mutex.lock&lt;/code&gt; does not throw, but a class derived from Mutex can throw. Use &lt;code&gt;lock_nothrow&lt;/code&gt; in &lt;code&gt;nothrow @nogc&lt;/code&gt; code.</source>
          <target state="translated">&lt;code&gt;Mutex.lock&lt;/code&gt; はスローしませんが、Mutexから派生したクラスはスローできます。使用 &lt;code&gt;lock_nothrow&lt;/code&gt; で &lt;code&gt;nothrow @nogc&lt;/code&gt; コード。</target>
        </trans-unit>
        <trans-unit id="19fbb5f989c0af04c8b083d15c647d76145e30b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mutex.tryLock&lt;/code&gt; does not throw, but a class derived from Mutex can throw. Use &lt;code&gt;tryLock_nothrow&lt;/code&gt; in &lt;code&gt;nothrow @nogc&lt;/code&gt; code.</source>
          <target state="translated">&lt;code&gt;Mutex.tryLock&lt;/code&gt; はスローしませんが、Mutexから派生したクラスはスローできます。使用 &lt;code&gt;tryLock_nothrow&lt;/code&gt; で &lt;code&gt;nothrow @nogc&lt;/code&gt; コード。</target>
        </trans-unit>
        <trans-unit id="7c0ef9f513fc9d530a91bc805078e6a6099ffd49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mutex.unlock&lt;/code&gt; does not throw, but a class derived from Mutex can throw. Use &lt;code&gt;unlock_nothrow&lt;/code&gt; in &lt;code&gt;nothrow @nogc&lt;/code&gt; code.</source>
          <target state="translated">&lt;code&gt;Mutex.unlock&lt;/code&gt; はスローしませんが、Mutexから派生したクラスはスローできます。使用 &lt;code&gt;unlock_nothrow&lt;/code&gt; で &lt;code&gt;nothrow @nogc&lt;/code&gt; コード。</target>
        </trans-unit>
        <trans-unit id="0f1eca57de65dba2657112d5d3b43e02e51f2136" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NegInfIntervalRange&lt;/code&gt; is only ever constructed by &lt;code&gt;NegInfInterval&lt;/code&gt;. However, when it is constructed, it is given a function, &lt;code&gt;func&lt;/code&gt;, which is used to generate the time points which are iterated over. &lt;code&gt;func&lt;/code&gt; takes a time point and returns a time point of the same type. For instance, to iterate over all of the days in the interval &lt;code&gt;NegInfInterval!Date&lt;/code&gt;, pass a function to &lt;code&gt;NegInfInterval&lt;/code&gt;'s &lt;code&gt;bwdRange&lt;/code&gt; where that function took a &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt; and returned a &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt; which was one day earlier. That function would then be used by &lt;code&gt;NegInfIntervalRange&lt;/code&gt;'s &lt;code&gt;popFront&lt;/code&gt; to iterate over the &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt;s in the interval - though obviously, since the range is infinite, use a function such as &lt;code&gt;std.range.take&lt;/code&gt; with it rather than iterating over</source>
          <target state="translated">&lt;code&gt;NegInfIntervalRange&lt;/code&gt; は、常に &lt;code&gt;NegInfInterval&lt;/code&gt; によって構築されます。ただし、作成されると、関数 &lt;code&gt;func&lt;/code&gt; が与えられます。これは、反復される時間点を生成するために使用されます。 &lt;code&gt;func&lt;/code&gt; は時間点を取り、同じタイプの時間点を返します。たとえば、間隔 &lt;code&gt;NegInfInterval!Date&lt;/code&gt; のすべての日を反復処理するには、関数を &lt;code&gt;NegInfInterval&lt;/code&gt; の &lt;code&gt;bwdRange&lt;/code&gt; に渡します。この関数は&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; を受け取り&lt;/a&gt;、1であった&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; &lt;/a&gt;を返しました。前日。次に、その関数は &lt;code&gt;NegInfIntervalRange&lt;/code&gt; の &lt;code&gt;popFront&lt;/code&gt; によって使用されます。間隔内で&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; &lt;/a&gt;を繰り返すには-明らかに、範囲は無限なので、繰り返しではなく、 &lt;code&gt;std.range.take&lt;/code&gt; などの関数を使用します</target>
        </trans-unit>
        <trans-unit id="20f1388bdae9c724328768c67e2bf74ccf100c75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Note:&lt;/code&gt; If a finally clause executes a throw out of the finally clause, the break target is never reached.</source>
          <target state="translated">&lt;code&gt;Note:&lt;/code&gt; finally節がfinally節からスローを実行すると、ブレークターゲットに到達することはありません。</target>
        </trans-unit>
        <trans-unit id="c45e10577dee6f4cb71de927dc8836b2f1ac9a27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Note:&lt;/code&gt; If a finally clause executes a throw out of the finally clause, the continue target is never reached.</source>
          <target state="translated">&lt;code&gt;Note:&lt;/code&gt; finally節がfinally節からスローアウトを実行すると、継続ターゲットに到達することはありません。</target>
        </trans-unit>
        <trans-unit id="21edd622bef9e1c578cfde461f5374945dff73cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NullAllocator&lt;/code&gt; advertises a relatively large alignment equal to 64 KB. This is because &lt;code&gt;NullAllocator&lt;/code&gt; never actually needs to honor this alignment and because composite allocators using &lt;code&gt;NullAllocator&lt;/code&gt; shouldn't be unnecessarily constrained.</source>
          <target state="translated">&lt;code&gt;NullAllocator&lt;/code&gt; は、64 KBに等しい比較的大きなアライメントをアドバタイズします。これは、 &lt;code&gt;NullAllocator&lt;/code&gt; が実際にこのアラインメントを &lt;code&gt;NullAllocator&lt;/code&gt; 必要がなく、NullAllocatorを使用する複合アロケータが不必要に制約されるべきではないためです。</target>
        </trans-unit>
        <trans-unit id="fde2a7522ff25f76c62d43d840e184a9693bf37b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NullAllocator&lt;/code&gt; is an emphatically empty implementation of the allocator interface. Although it has no direct use, it is useful as a &quot;terminator&quot; in composite allocators.</source>
          <target state="translated">&lt;code&gt;NullAllocator&lt;/code&gt; は、アロケーターインターフェースの空の実装です。直接使用するわけではありませんが、複合アロケータの「ターミネータ」として役立ちます。</target>
        </trans-unit>
        <trans-unit id="26af361fb937ce89c2ffa3c9c2d6a1257d185c4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OutBuffer&lt;/code&gt; to write the mangled function signature to</source>
          <target state="translated">&lt;code&gt;OutBuffer&lt;/code&gt; れた関数シグネチャを書き込むOutBuffer</target>
        </trans-unit>
        <trans-unit id="3fe9a99db1ee4d687b3f8bd5d0c960a952d9bdc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OutOfMemoryError&lt;/code&gt; on allocation failure.</source>
          <target state="translated">&lt;code&gt;OutOfMemoryError&lt;/code&gt; 割り当て失敗時のOutOfMemoryError。</target>
        </trans-unit>
        <trans-unit id="d50b7d457eec0ba1f8877d663f932cf82639bd11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PosInfIntervalRange&lt;/code&gt; is only ever constructed by &lt;code&gt;PosInfInterval&lt;/code&gt;. However, when it is constructed, it is given a function, &lt;code&gt;func&lt;/code&gt;, which is used to generate the time points which are iterated over. &lt;code&gt;func&lt;/code&gt; takes a time point and returns a time point of the same type. For instance, to iterate over all of the days in the interval &lt;code&gt;PosInfInterval!Date&lt;/code&gt;, pass a function to &lt;code&gt;PosInfInterval&lt;/code&gt;'s &lt;code&gt;fwdRange&lt;/code&gt; where that function took a &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt; and returned a &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt; which was one day later. That function would then be used by &lt;code&gt;PosInfIntervalRange&lt;/code&gt;'s &lt;code&gt;popFront&lt;/code&gt; to iterate over the &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt;s in the interval - though obviously, since the range is infinite, use a function such as &lt;code&gt;std.range.take&lt;/code&gt; with it rather than iterating over</source>
          <target state="translated">&lt;code&gt;PosInfIntervalRange&lt;/code&gt; はPosInfIntervalによってのみ構築され &lt;code&gt;PosInfInterval&lt;/code&gt; 。ただし、作成されると、関数 &lt;code&gt;func&lt;/code&gt; が与えられます。これは、反復される時間点を生成するために使用されます。 &lt;code&gt;func&lt;/code&gt; は時間点を取り、同じタイプの時間点を返します。例えば、区間内の日のすべての反復処理する &lt;code&gt;PosInfInterval!Date&lt;/code&gt; 、に関数を渡す &lt;code&gt;PosInfInterval&lt;/code&gt; の &lt;code&gt;fwdRange&lt;/code&gt; その関数がかかった&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; を&lt;/a&gt;返さ&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; &lt;/a&gt; 1でした翌日。次に、その関数は &lt;code&gt;PosInfIntervalRange&lt;/code&gt; の &lt;code&gt;popFront&lt;/code&gt; によって使用されます。間隔内で&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; &lt;/a&gt;を繰り返すには-明らかに、範囲は無限なので、繰り返しではなく、 &lt;code&gt;std.range.take&lt;/code&gt; などの関数を使用します</target>
        </trans-unit>
        <trans-unit id="cb8dc60d5bc32b6bcdebce52b394fac49414cf48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ProperCompare&lt;/code&gt; fixes the comparison operators ==, !=, &amp;lt;, &amp;lt;=, &amp;gt;, and &amp;gt;= to return correct results</source>
          <target state="translated">&lt;code&gt;ProperCompare&lt;/code&gt; は、比較演算子==、！=、&amp;lt;、&amp;lt;=、&amp;gt;、および&amp;gt; =を修正して正しい結果を返します</target>
        </trans-unit>
        <trans-unit id="c20b8bd63e178e519036e1081ea692a599a4c8fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Protocol&lt;/code&gt; is a class for retrieving protocol information.</source>
          <target state="translated">&lt;code&gt;Protocol&lt;/code&gt; は、プロトコル情報を取得するためのクラスです。</target>
        </trans-unit>
        <trans-unit id="bb48bdc418739c506d179ce3cbcd0758cea6acca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ProtocolType&lt;/code&gt; - protocol to filter by</source>
          <target state="translated">&lt;code&gt;ProtocolType&lt;/code&gt; -フィルターに使用するプロトコル</target>
        </trans-unit>
        <trans-unit id="5cb5a15effd4c34f04b113fc0b80aca348b723c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;R&lt;/code&gt; accepts some form of string or character. put will transcode the character &lt;code&gt;e&lt;/code&gt; accordingly.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; は、何らかの形式の文字列または文字を受け入れます。putは、それに応じて文字 &lt;code&gt;e&lt;/code&gt; をトランスコードします。</target>
        </trans-unit>
        <trans-unit id="780b6e42b49937b33d3acf041f9f55b645a2cc51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;R&lt;/code&gt; specifically accepts an &lt;code&gt;E&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; は特に &lt;code&gt;E&lt;/code&gt; を受け入れます。</target>
        </trans-unit>
        <trans-unit id="0c66441bc26ad454d0cc3d154df2f83c7aaac35f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;R&lt;/code&gt; specifically accepts an &lt;code&gt;E[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; は特に &lt;code&gt;E[]&lt;/code&gt; 受け入れます。</target>
        </trans-unit>
        <trans-unit id="75cde118348c0e71fa950e422d9c9e78ae88ab95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RangePrimitive.access&lt;/code&gt; is a shortcut for the access primitives; &lt;code&gt;front&lt;/code&gt;, &lt;code&gt;back&lt;/code&gt; and &lt;code&gt;opIndex&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RangePrimitive.access&lt;/code&gt; は、アクセスプリミティブのショートカットです。 &lt;code&gt;front&lt;/code&gt; 、 &lt;code&gt;back&lt;/code&gt; 、 &lt;code&gt;opIndex&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f762138a599689e87a282296107b6b29b6a13874" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RangePrimitive.pop&lt;/code&gt; is a shortcut for the mutating primitives; &lt;code&gt;popFront&lt;/code&gt; and &lt;code&gt;popBack&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RangePrimitive.pop&lt;/code&gt; は、変化するプリミティブのショートカットです。 &lt;code&gt;popFront&lt;/code&gt; および &lt;code&gt;popBack&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="030771000e0ceb8354a01647408b24878dcaca4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Rebindable!(T)&lt;/code&gt; is a simple, efficient wrapper that behaves just like an object of type &lt;code&gt;T&lt;/code&gt;, except that you can reassign it to refer to another object. For completeness, &lt;code&gt;Rebindable!(T)&lt;/code&gt; aliases itself away to &lt;code&gt;T&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a non-const object type.</source>
          <target state="translated">&lt;code&gt;Rebindable!(T)&lt;/code&gt; は単純で効率的なラッパーで、別のオブジェクトを参照するように再割り当てできることを除いて、 &lt;code&gt;T&lt;/code&gt; 型のオブジェクトと同じように動作します。完全のために、 &lt;code&gt;Rebindable!(T)&lt;/code&gt; エイリアス自体離れに &lt;code&gt;T&lt;/code&gt; 場合 &lt;code&gt;T&lt;/code&gt; は非constオブジェクト型です。</target>
        </trans-unit>
        <trans-unit id="b00a9e0b0a644fd8087968f990c22c18c90edf0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RefCounted&lt;/code&gt; is unsafe and should be used with care. No references to the payload should be escaped outside the &lt;code&gt;RefCounted&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;RefCounted&lt;/code&gt; は安全ではないため、注意して使用する必要があります。ペイロードへの参照は、 &lt;code&gt;RefCounted&lt;/code&gt; オブジェクトの外でエスケープしてはなりません。</target>
        </trans-unit>
        <trans-unit id="d88ab8258f37733765c1601e808462b33b8aee2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RefCounted&lt;/code&gt; storage implementation.</source>
          <target state="translated">&lt;code&gt;RefCounted&lt;/code&gt; ストレージの実装。</target>
        </trans-unit>
        <trans-unit id="9bee36718af73e578a30bbaedc2c37541d5e249f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Regex&lt;/code&gt; object holds regular expression pattern in compiled form.</source>
          <target state="translated">&lt;code&gt;Regex&lt;/code&gt; オブジェクトは、コンパイルされた形式で正規表現パターンを保持します。</target>
        </trans-unit>
        <trans-unit id="87d4168f1bbd4eac219801b43c6bc243bfc23d42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Regex&lt;/code&gt; object that works on inputs having the same character width as &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Regex&lt;/code&gt; &lt;code&gt;pattern&lt;/code&gt; と同じ文字幅の入力で機能するRegexオブジェクト。</target>
        </trans-unit>
        <trans-unit id="471e1b858b0c776c473a1871b9341b72606ac29f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegexException&lt;/code&gt; if there were any errors during compilation.</source>
          <target state="translated">&lt;code&gt;RegexException&lt;/code&gt; コンパイル中にエラーが発生した場合はRegexException。</target>
        </trans-unit>
        <trans-unit id="a53adf2cbff9ae2891543c9eacc87e202aff05df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReplaceType&lt;/code&gt; aliases itself to the type(s) that result after replacement.</source>
          <target state="translated">&lt;code&gt;ReplaceType&lt;/code&gt; は、置換後のタイプに自分自身をエイリアスします。</target>
        </trans-unit>
        <trans-unit id="2f1f6bbeb799dd234e6f795209127f34ac65e265" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;S&lt;/code&gt; defines at least one direct member that has a copy constructor, and that member is not overlapped (by means of &lt;code&gt;union&lt;/code&gt;) with any other member.</source>
          <target state="translated">&lt;code&gt;S&lt;/code&gt; は、コピーコンストラクターを持つ少なくとも1つの直接メンバーを定義し、そのメンバーは他のメンバーと（ &lt;code&gt;union&lt;/code&gt; によって）オーバーラップされません。</target>
        </trans-unit>
        <trans-unit id="75630199841be5d37303401849758dd2a43984da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;S&lt;/code&gt; does not explicitly declare any copy constructors;</source>
          <target state="translated">&lt;code&gt;S&lt;/code&gt; は、コピーコンストラクターを明示的に宣言しません。</target>
        </trans-unit>
        <trans-unit id="78494e20fa7de6742095448d88b655fd51d08a41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SList&lt;/code&gt; uses reference semantics.</source>
          <target state="translated">&lt;code&gt;SList&lt;/code&gt; は参照セマンティクスを使用します。</target>
        </trans-unit>
        <trans-unit id="c56058ec16a4fa994151ef298e8adc161ce878c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SMTP&lt;/code&gt; struct for advanced usage</source>
          <target state="translated">&lt;code&gt;SMTP&lt;/code&gt; 高度な使用法のためのSMTP構造体</target>
        </trans-unit>
        <trans-unit id="7e9d8cf3e45f79f3c4e342d8fae899fb65e16630" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Saturate&lt;/code&gt; stops at an overflow</source>
          <target state="translated">&lt;code&gt;Saturate&lt;/code&gt; オーバーフローで飽和が止まる</target>
        </trans-unit>
        <trans-unit id="2f7486cdf10bdc5b58b2b22311800e044e643d8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scope&lt;/code&gt; of the expression (deprecations do not trigger in deprecated scopes)</source>
          <target state="translated">&lt;code&gt;Scope&lt;/code&gt; 式のスコープ（非推奨は非推奨のスコープではトリガーされません）</target>
        </trans-unit>
        <trans-unit id="332dd805aa714f4c9de1b65f527e6f2f95a4b450" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ScopedAllocator&lt;/code&gt; delegates all allocation requests to &lt;code&gt;ParentAllocator&lt;/code&gt;. When destroyed, the &lt;code&gt;ScopedAllocator&lt;/code&gt; object automatically calls &lt;code&gt;deallocate&lt;/code&gt; for all memory allocated through its lifetime. (The &lt;code&gt;deallocateAll&lt;/code&gt; function is also implemented with the same semantics.)</source>
          <target state="translated">&lt;code&gt;ScopedAllocator&lt;/code&gt; の代表者へのすべての割り振り要求 &lt;code&gt;ParentAllocator&lt;/code&gt; 。破棄されると、 &lt;code&gt;ScopedAllocator&lt;/code&gt; オブジェクトは、存続期間中に割り当てられたすべてのメモリに対してdeallocateを自動的に呼び出し &lt;code&gt;deallocate&lt;/code&gt; 。（ &lt;code&gt;deallocateAll&lt;/code&gt; 関数も同じセマンティクスで実装されています。）</target>
        </trans-unit>
        <trans-unit id="68e3c30a95c281a86363341aaa246fbc3330c338" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sequence&lt;/code&gt; is similar to &lt;code&gt;Recurrence&lt;/code&gt; except that iteration is presented in the so-called &lt;a href=&quot;http://en.wikipedia.org/wiki/Closed_form&quot;&gt; closed form&lt;/a&gt;. This means that the &lt;code&gt;n&lt;/code&gt;th element in the series is computable directly from the initial values and &lt;code&gt;n&lt;/code&gt; itself. This implies that the interface offered by &lt;code&gt;Sequence&lt;/code&gt; is a random-access range, as opposed to the regular &lt;code&gt;Recurrence&lt;/code&gt;, which only offers forward iteration.</source>
          <target state="translated">&lt;code&gt;Sequence&lt;/code&gt; に似て &lt;code&gt;Recurrence&lt;/code&gt; 反復は、いわゆるに提示されていることを除いて&lt;a href=&quot;http://en.wikipedia.org/wiki/Closed_form&quot;&gt;閉じた形&lt;/a&gt;。つまり、系列の &lt;code&gt;n&lt;/code&gt; 番目の要素は、初期値と &lt;code&gt;n&lt;/code&gt; 自体から直接計算できます。これは、前方反復のみを提供する通常の &lt;code&gt;Recurrence&lt;/code&gt; とは対照的に、 &lt;code&gt;Sequence&lt;/code&gt; によって提供されるインターフェースがランダムアクセス範囲であることを意味します。</target>
        </trans-unit>
        <trans-unit id="1f74cfffb73a2e53c60382547eeaff4ebf62277d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Service&lt;/code&gt; is a class for retrieving service information.</source>
          <target state="translated">&lt;code&gt;Service&lt;/code&gt; は、サービス情報を取得するためのクラスです。</target>
        </trans-unit>
        <trans-unit id="5dd3d87bf4379ada60681ae524288a8b96bcde1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedAlignedBlockList&lt;/code&gt; is the threadsafe version of &lt;code&gt;AlignedBlockList&lt;/code&gt;. The &lt;code&gt;Allocator&lt;/code&gt; template parameter must refer a shared allocator. Also, &lt;code&gt;ParentAllocator&lt;/code&gt; must be a shared allocator, supporting &lt;code&gt;alignedAllocate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SharedAlignedBlockList&lt;/code&gt; は、のスレッドセーフバージョンです &lt;code&gt;AlignedBlockList&lt;/code&gt; 。 &lt;code&gt;Allocator&lt;/code&gt; テンプレートパラメータは、共有アロケータを参照する必要があります。また、 &lt;code&gt;ParentAllocator&lt;/code&gt; はサポートし、共有アロケータでなければなりません &lt;code&gt;alignedAllocate&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="746754b2aa00bad45fb2be52daaa182ac49c6430" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedAscendingPageAllocator&lt;/code&gt; is the threadsafe version of &lt;code&gt;AscendingPageAllocator&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SharedAscendingPageAllocator&lt;/code&gt; は、スレッドセーフバージョンの &lt;code&gt;AscendingPageAllocator&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c6efd4b35b5ba7aadd42b05cb7b5432c9aa7ea3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Socket&lt;/code&gt; is a class that creates a network communication endpoint using the Berkeley sockets interface.</source>
          <target state="translated">&lt;code&gt;Socket&lt;/code&gt; は、Berkeleyソケットインターフェイスを使用してネットワーク通信エンドポイントを作成するクラスです。</target>
        </trans-unit>
        <trans-unit id="87fa4417125d3cac79e8cb411aa1e3d62379087e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SocketException&lt;/code&gt; if creation of the sockets fails.</source>
          <target state="translated">&lt;code&gt;SocketException&lt;/code&gt; ソケットの作成が失敗した場合はSocketException。</target>
        </trans-unit>
        <trans-unit id="b78b331409d25e66115d26e36b7a7111d4712e46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SocketException&lt;/code&gt; if setting the options fails.</source>
          <target state="translated">&lt;code&gt;SocketException&lt;/code&gt; オプションの設定に失敗した場合はSocketException。</target>
        </trans-unit>
        <trans-unit id="62fb2c297f48546eaf7d5c402b4d6de00e5102d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SocketException&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;SocketException&lt;/code&gt; エラー時にSocketException。</target>
        </trans-unit>
        <trans-unit id="76dfb042cff82ec649174071c6f90d7f55b3bb47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SocketException&lt;/code&gt; on failure.</source>
          <target state="translated">&lt;code&gt;SocketException&lt;/code&gt; 失敗時のSocketException。</target>
        </trans-unit>
        <trans-unit id="6a0ac3e53834af046f515ebd06d9bdfc272be3ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SocketOSException&lt;/code&gt; if setting the options fails, or &lt;code&gt;SocketFeatureException&lt;/code&gt; if setting keep-alive parameters is unsupported on the current platform.</source>
          <target state="translated">&lt;code&gt;SocketOSException&lt;/code&gt; 失敗オプションを設定する場合、または &lt;code&gt;SocketFeatureException&lt;/code&gt; キープアライブパラメータを設定すると、現在のプラットフォームでサポートされていない場合。</target>
        </trans-unit>
        <trans-unit id="7a0981fb867b9d1010fb7e98f0f42f113299e19e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SocketOSException&lt;/code&gt; on failure, or &lt;code&gt;SocketFeatureException&lt;/code&gt; if this functionality is not available on the current system.</source>
          <target state="translated">&lt;code&gt;SocketOSException&lt;/code&gt; 失敗した場合、または &lt;code&gt;SocketFeatureException&lt;/code&gt; は、この機能は、現在のシステムで利用できない場合。</target>
        </trans-unit>
        <trans-unit id="3eb13bd8112aca0871aae534a7fb63f8bff6f0ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SocketOSException&lt;/code&gt; on failure.</source>
          <target state="translated">&lt;code&gt;SocketOSException&lt;/code&gt; 失敗した場合はSocketOSException。</target>
        </trans-unit>
        <trans-unit id="533fe63858ca229c5548c18bba5c935275d9786a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SocketSet&lt;/code&gt; wraps the platform &lt;code&gt;fd_set&lt;/code&gt; type. However, unlike &lt;code&gt;fd_set&lt;/code&gt;, &lt;code&gt;SocketSet&lt;/code&gt; is not statically limited to &lt;code&gt;FD_SETSIZE&lt;/code&gt; or any other limit, and grows as needed.</source>
          <target state="translated">&lt;code&gt;SocketSet&lt;/code&gt; は、プラットフォームの &lt;code&gt;fd_set&lt;/code&gt; タイプをラップします。ただし、 &lt;code&gt;fd_set&lt;/code&gt; とは異なり、 &lt;code&gt;SocketSet&lt;/code&gt; は静的に &lt;code&gt;FD_SETSIZE&lt;/code&gt; やその他の制限に制限されず、必要に応じて大きくなります。</target>
        </trans-unit>
        <trans-unit id="6292666f1fd27e364014781db58d7c9f3d224716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SocketType&lt;/code&gt; - socket type to filter by</source>
          <target state="translated">&lt;code&gt;SocketType&lt;/code&gt; -フィルターに使用するソケットタイプ</target>
        </trans-unit>
        <trans-unit id="c787eccd1cfe254a883d5baa6dbc853ad90fc0c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SortedRange&lt;/code&gt; could accept ranges weaker than random-access, but it is unable to provide interesting functionality for them. Therefore, &lt;code&gt;SortedRange&lt;/code&gt; is currently restricted to random-access ranges.  No copy of the original range is ever made. If the underlying range is changed concurrently with its corresponding &lt;code&gt;SortedRange&lt;/code&gt; in ways that break its sorted-ness, &lt;code&gt;SortedRange&lt;/code&gt; will work erratically.</source>
          <target state="translated">&lt;code&gt;SortedRange&lt;/code&gt; はランダムアクセスよりも弱い範囲を受け入れることができますが、興味深い機能を提供することはできません。したがって、 &lt;code&gt;SortedRange&lt;/code&gt; は現在、ランダムアクセス範囲に制限されています。元の範囲のコピーは作成されません。基になる範囲が対応する &lt;code&gt;SortedRange&lt;/code&gt; と同時に変更されて、並べ替えが &lt;code&gt;SortedRange&lt;/code&gt; 場合、SortedRangeは不規則に機能します。</target>
        </trans-unit>
        <trans-unit id="5b9ca29b38b1f15d8973e1ced47848fd1d2dba6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Source&lt;/code&gt; must be a random access range. The returned range will be bidirectional or random-access if &lt;code&gt;Indices&lt;/code&gt; is bidirectional or random-access, respectively.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; はランダムアクセス範囲である必要があります。 &lt;code&gt;Indices&lt;/code&gt; が双方向またはランダムアクセスの場合、返される範囲はそれぞれ双方向またはランダムアクセスになります。</target>
        </trans-unit>
        <trans-unit id="4c0feeb1ff674d28575106f12aafb6a73cdd4968" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StdioException&lt;/code&gt; on I/O error, or &lt;code&gt;UnicodeException&lt;/code&gt; on Unicode conversion error.</source>
          <target state="translated">&lt;code&gt;StdioException&lt;/code&gt; I / Oエラーの場合はStdioException、Unicode変換エラーの場合は &lt;code&gt;UnicodeException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a895bd9ca37148b0bedbdaf72160091894b81f68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StopWatch&lt;/code&gt; measures time as precisely as possible.</source>
          <target state="translated">&lt;code&gt;StopWatch&lt;/code&gt; は時間を可能な限り正確に測定します。</target>
        </trans-unit>
        <trans-unit id="6a66ba194c1af962c95944ee31d9e398b9989bf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SysTime&lt;/code&gt; is the type used to get the current time from the system or doing anything that involves time zones. Unlike &lt;a href=&quot;std_datetime_date#DateTime&quot;&gt;&lt;code&gt;std.datetime.date.DateTime&lt;/code&gt;&lt;/a&gt;, the time zone is an integral part of &lt;code&gt;SysTime&lt;/code&gt; (though for local time applications, time zones can be ignored and it will work, since it defaults to using the local time zone). It holds its internal time in std time (hnsecs since midnight, January 1st, 1 A.D. UTC), so it interfaces well with the system time. However, that means that, unlike &lt;a href=&quot;std_datetime_date#DateTime&quot;&gt;&lt;code&gt;std.datetime.date.DateTime&lt;/code&gt;&lt;/a&gt;, it is not optimized for calendar-based operations, and getting individual units from it such as years or days is going to involve conversions and be less efficient.</source>
          <target state="translated">&lt;code&gt;SysTime&lt;/code&gt; は、システムから現在の時刻を取得したり、タイムゾーンに関連する処理を実行したりするために使用されるタイプです。&lt;a href=&quot;std_datetime_date#DateTime&quot;&gt; &lt;code&gt;std.datetime.date.DateTime&lt;/code&gt; &lt;/a&gt;とは異なり、タイムゾーンは &lt;code&gt;SysTime&lt;/code&gt; の不可欠な部分です（ローカルタイムアプリケーションの場合、タイムゾーンは無視でき、デフォルトではローカルタイムゾーンを使用するため、機能します）。内部時刻を標準時刻（1月1日の午前0時からの時間（秒）、AD UTC 1時）で保持するため、システム時刻とうまく連動します。ただし、これは、&lt;a href=&quot;std_datetime_date#DateTime&quot;&gt; &lt;code&gt;std.datetime.date.DateTime&lt;/code&gt; &lt;/a&gt;とは異なり、カレンダーベースの操作には最適化されておらず、年や日などの個々の単位を取得すると、変換が必要になり、効率が低下することを意味します。</target>
        </trans-unit>
        <trans-unit id="ac0c6b1810b24c03416add46f5ae8e5d1b27562a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SysTime&lt;/code&gt;'s range is from approximately 29,000 B.C. to approximately 29,000 A.D.</source>
          <target state="translated">&lt;code&gt;SysTime&lt;/code&gt; の範囲は、約BC 29,000からAD約29,000です。</target>
        </trans-unit>
        <trans-unit id="1560fdd6bd013e33db93a67a5ff30678da0891a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; must define a &lt;code&gt;opBinary&lt;/code&gt; for subtraction which accepts &lt;code&gt;T&lt;/code&gt; and returns &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; は、定義しなければならない &lt;code&gt;opBinary&lt;/code&gt; 受け付け減算するための &lt;code&gt;T&lt;/code&gt; 戻る&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="91628f7ac20b93970362b69b9450bc20627b98eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; must define a &lt;code&gt;opBinary&lt;/code&gt; for subtraction which accepts &lt;code&gt;T&lt;/code&gt; and returns returns &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; を受け入れて戻り値を返す減算の &lt;code&gt;opBinary&lt;/code&gt; を定義する必要があります&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4d2c6bca96e673afe06d9e325d4acc343fd20d60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; must define a static property named &lt;code&gt;max&lt;/code&gt; which is the largest value of &lt;code&gt;T&lt;/code&gt; as &lt;code&gt;Unqual!T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; の最大値である &lt;code&gt;max&lt;/code&gt; という名前の静的プロパティを &lt;code&gt;Unqual!T&lt;/code&gt; として定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="f294feb51e2d2f00db976416287ad63fee9f66c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; must define a static property named &lt;code&gt;min&lt;/code&gt; which is the smallest value of &lt;code&gt;T&lt;/code&gt; as &lt;code&gt;Unqual!T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; という最小値である &lt;code&gt;min&lt;/code&gt; という静的プロパティを &lt;code&gt;Unqual!T&lt;/code&gt; として定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="53e8de8dac2a8691b4bdd0087daafbe6712c0f2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; must define an &lt;code&gt;opBinary&lt;/code&gt; for addition and subtraction that accepts &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; and returns &lt;code&gt;Unqual!T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; は定義する必要があります &lt;code&gt;opBinary&lt;/code&gt; を受け入れ、足し算と引き算のため&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; を&lt;/a&gt;して返す &lt;code&gt;Unqual!T&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fab6f337372fb064f170e2a181317eb9e44fc5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; must define an &lt;code&gt;opOpAssign&lt;/code&gt; for addition and subtraction that accepts &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; and returns &lt;code&gt;ref Unqual!T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; は定義する必要があります &lt;code&gt;opOpAssign&lt;/code&gt; 受け入れ加算と減算のための&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;とリターンを &lt;code&gt;ref Unqual!T&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e5a544e1bd186a2a67b6a67ef05e99600fe89c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; with the &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;shared&lt;/code&gt; qualifiers added.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; に &lt;code&gt;const&lt;/code&gt; および &lt;code&gt;shared&lt;/code&gt; 修飾子が追加されました。</target>
        </trans-unit>
        <trans-unit id="31ec721d20b2801e5d346700c80f678793d1c0e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; with the &lt;code&gt;const&lt;/code&gt; qualifier added.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; に &lt;code&gt;const&lt;/code&gt; 修飾子を追加したもの。</target>
        </trans-unit>
        <trans-unit id="186a43c969a1f6b869085813b17231ea61972375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; with the &lt;code&gt;immutable&lt;/code&gt; qualifier added.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; との &lt;code&gt;immutable&lt;/code&gt; 修飾子が追加されました。</target>
        </trans-unit>
        <trans-unit id="0f4a39908568cd6d472669bdc7cd96a13cb06098" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; with the &lt;code&gt;inout&lt;/code&gt; and &lt;code&gt;shared&lt;/code&gt; qualifiers added.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; と &lt;code&gt;inout&lt;/code&gt; と &lt;code&gt;shared&lt;/code&gt; 修飾子を加えます。</target>
        </trans-unit>
        <trans-unit id="470204d231d8939583648e7203f7b1cd2a937dff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; with the &lt;code&gt;inout&lt;/code&gt; qualifier added.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; と &lt;code&gt;inout&lt;/code&gt; の修飾子が追加されました。</target>
        </trans-unit>
        <trans-unit id="3275cab2586883588d212e6312445a72995e25af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; with the &lt;code&gt;shared&lt;/code&gt; qualifier added.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; との &lt;code&gt;shared&lt;/code&gt; を追加修飾子。</target>
        </trans-unit>
        <trans-unit id="0108d5739821b102796437e45f235d8ce482969a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Task&lt;/code&gt; objects created using &lt;code&gt;scopedTask&lt;/code&gt; will automatically call &lt;code&gt;Task.yieldForce&lt;/code&gt; in their destructor if necessary to ensure the &lt;code&gt;Task&lt;/code&gt; is complete before the stack frame they reside on is destroyed.</source>
          <target state="translated">&lt;code&gt;Task&lt;/code&gt; 使用して作成されたオブジェクト &lt;code&gt;scopedTask&lt;/code&gt; を自動的に呼び出します &lt;code&gt;Task.yieldForce&lt;/code&gt; を必要に応じて確保するために彼らのデストラクタで &lt;code&gt;Task&lt;/code&gt; 、彼らが上に存在するスタックフレームが破棄される前に完了しています。</target>
        </trans-unit>
        <trans-unit id="2832ad7b33aebd000a73dcb20f507e685a655947" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Task&lt;/code&gt; represents the fundamental unit of work. A &lt;code&gt;Task&lt;/code&gt; may be executed in parallel with any other &lt;code&gt;Task&lt;/code&gt;. Using this struct directly allows future/promise parallelism. In this paradigm, a function (or delegate or other callable) is executed in a thread other than the one it was called from. The calling thread does not block while the function is being executed. A call to &lt;code&gt;workForce&lt;/code&gt;, &lt;code&gt;yieldForce&lt;/code&gt;, or &lt;code&gt;spinForce&lt;/code&gt; is used to ensure that the &lt;code&gt;Task&lt;/code&gt; has finished executing and to obtain the return value, if any. These functions and &lt;code&gt;done&lt;/code&gt; also act as full memory barriers, meaning that any memory writes made in the thread that executed the &lt;code&gt;Task&lt;/code&gt; are guaranteed to be visible in the calling thread after one of these functions returns.</source>
          <target state="translated">&lt;code&gt;Task&lt;/code&gt; は、作業の基本単位を表します。 A &lt;code&gt;Task&lt;/code&gt; 他のと並行して実行することができる &lt;code&gt;Task&lt;/code&gt; 。この構造体を直接使用すると、将来/約束の並列処理が可能になります。このパラダイムでは、関数（またはデリゲートまたは他の呼び出し可能）は、呼び出し元のスレッド以外のスレッドで実行されます。関数の実行中、呼び出しスレッドはブロックしません。呼び出し &lt;code&gt;workForce&lt;/code&gt; 、 &lt;code&gt;yieldForce&lt;/code&gt; 、又は &lt;code&gt;spinForce&lt;/code&gt; はことを保証するために使用されている &lt;code&gt;Task&lt;/code&gt; あれば、実行を終了したと戻り値を得ました。これらの機能と &lt;code&gt;done&lt;/code&gt; も、任意のメモリへの書き込みが実行スレッドで行われたことを意味し、完全なメモリバリアとして機能し &lt;code&gt;Task&lt;/code&gt; これらの関数のいずれかが戻った後、呼び出しスレッドで表示されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="82cd55fb0d006768136f2c5c0b4fcccab522c36f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TcpSocket&lt;/code&gt; is a shortcut class for a TCP Socket.</source>
          <target state="translated">&lt;code&gt;TcpSocket&lt;/code&gt; は、TCPソケットのショートカットクラスです。</target>
        </trans-unit>
        <trans-unit id="38f55edede4991a3cf116d69d68fc1d676b1f44d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ternary.no&lt;/code&gt; for &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Ternary.no&lt;/code&gt; for &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2869c4358399eebb5142dbe39568cc4e025e08d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ternary.unknown&lt;/code&gt; as an unknown state</source>
          <target state="translated">&lt;code&gt;Ternary.unknown&lt;/code&gt; 未知の状態としてのTernary.unknown</target>
        </trans-unit>
        <trans-unit id="69476aeb136d8de7d30539eb5cacebe2d2d3358d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ternary.yes&lt;/code&gt; for &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Ternary.yes&lt;/code&gt; for &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46a182d3e8c1d404cdf9f37047a9ee60a7e8b3cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ternary.yes&lt;/code&gt; if one allocator was found to return &lt;code&gt;Ternary.yes&lt;/code&gt;, &lt;code&gt;Ternary.no&lt;/code&gt; if all component allocators returned &lt;code&gt;Ternary.no&lt;/code&gt;, and &lt;code&gt;Ternary.unknown&lt;/code&gt; if no allocator returned &lt;code&gt;Ternary.yes&lt;/code&gt; and at least one returned &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ternary.yes&lt;/code&gt; 1つのアロケータを返すことが判明した場合 &lt;code&gt;Ternary.yes&lt;/code&gt; 、 &lt;code&gt;Ternary.no&lt;/code&gt; をすべてのコンポーネントアロケータが返した場合 &lt;code&gt;Ternary.no&lt;/code&gt; 、及び &lt;code&gt;Ternary.unknown&lt;/code&gt; を全くアロケータが返されない場合 &lt;code&gt;Ternary.yes&lt;/code&gt; の少なくとも1つが返さ &lt;code&gt;Ternary.unknown&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="7599544c003fc14111a32d44931860cfa0dd0ec1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ternary.yes&lt;/code&gt; if owned by this allocator and &lt;code&gt;Ternary.no&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;Ternary.yes&lt;/code&gt; このアロケータとが所有している場合 &lt;code&gt;Ternary.no&lt;/code&gt; そう</target>
        </trans-unit>
        <trans-unit id="4ad19c9b06c6c6a7d61bae14eea7ed48e0a9b259" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ternary.yes&lt;/code&gt; if the allocator is empty, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. Never returns &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ternary.yes&lt;/code&gt; アロケータが空の場合、 &lt;code&gt;Ternary.no&lt;/code&gt; そうでありません。 &lt;code&gt;Ternary.unknown&lt;/code&gt; を返しません。</target>
        </trans-unit>
        <trans-unit id="f1b49c13e674e31d46bece718af98b61034636b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Throw&lt;/code&gt; fails every incorrect operation by throwing an exception</source>
          <target state="translated">&lt;code&gt;Throw&lt;/code&gt; 例外をスローすることによって、すべての間違った操作を失敗しました</target>
        </trans-unit>
        <trans-unit id="5697669daea1d2edaa6375d26bbad9518d5edafa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TimeException&lt;/code&gt; if an attempt to divide by &lt;code&gt;0&lt;/code&gt; is made.</source>
          <target state="translated">&lt;code&gt;TimeException&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; で除算しようとした場合はTimeException。</target>
        </trans-unit>
        <trans-unit id="2dc0d79c91d4e0597dd2ceebdb751a34fe72f1a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TimeException&lt;/code&gt; if it fails to get the time.</source>
          <target state="translated">&lt;code&gt;TimeException&lt;/code&gt; 時間の取得に失敗した場合はTimeException。</target>
        </trans-unit>
        <trans-unit id="c70993b8aed1eb03ef954291b34693b20ea0b2c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Transposed&lt;/code&gt; currently defines &lt;code&gt;save&lt;/code&gt;, but does not work as a forward range. Consuming a copy made with &lt;code&gt;save&lt;/code&gt; will consume all copies, even the original sub-ranges fed into &lt;code&gt;Transposed&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Transposed&lt;/code&gt; 現在、転置は &lt;code&gt;save&lt;/code&gt; を定義していますが、前方範囲としては機能しません。 &lt;code&gt;save&lt;/code&gt; で作成されたコピーを使用すると、元のサブ範囲が &lt;code&gt;Transposed&lt;/code&gt; に供給された場合でも、すべてのコピーが消費されます。</target>
        </trans-unit>
        <trans-unit id="34644096ee359c9f543613726d2a575c3df43b36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tuple&lt;/code&gt; members can be named. It is legal to mix named and unnamed members. The method above is still applicable to all fields.</source>
          <target state="translated">&lt;code&gt;Tuple&lt;/code&gt; メンバーに名前を付けることができます。名前付きメンバーと名前なしメンバーを混在させることは合法です。上記の方法は、引き続きすべてのフィールドに適用できます。</target>
        </trans-unit>
        <trans-unit id="22855b22d24613edb4797b3b3082b40e8bf9bd08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; that represents &lt;code&gt;va_list&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; を表し &lt;code&gt;va_list&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5995b12e3c639fd0ac9edd39fe711f66a051c4a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; to use for parameter &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; パラメータ &lt;code&gt;p&lt;/code&gt; に使用するタイプ。</target>
        </trans-unit>
        <trans-unit id="9b7e28bca0b07d1e1da65763c6214f44c548470e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; with completed semantic analysis, &lt;code&gt;Terror&lt;/code&gt; if errors were encountered</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; 意味解析が完了したタイプ、エラーが発生した場合は &lt;code&gt;Terror&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="03eaa064f1e4b2fb2c72e1d6e5d83085754ab33e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypeIdentifier&lt;/code&gt; corresponding to &lt;code&gt;object.Throwable&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TypeIdentifier&lt;/code&gt; 対応する &lt;code&gt;object.Throwable&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="897ecbae7f27f97ae3e90420e022adc7dd2fbbd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypedAllocator&lt;/code&gt; acts like a chassis on which several specialized allocators can be assembled. To let the system make a choice about a particular kind of allocation, use &lt;code&gt;Default&lt;/code&gt; for the respective parameters.</source>
          <target state="translated">&lt;code&gt;TypedAllocator&lt;/code&gt; は、いくつかの特殊なアロケータを組み立てることができるシャーシのように機能します。システムが特定の種類の割り当てについて選択できるようにするには、それぞれのパラメーターに &lt;code&gt;Default&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="6b1f38ae7efe6d59115175c5fdcc377f07580928" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTC&lt;/code&gt; is a singleton class. &lt;code&gt;UTC&lt;/code&gt; returns its only instance.</source>
          <target state="translated">&lt;code&gt;UTC&lt;/code&gt; はシングルトンクラスです。 &lt;code&gt;UTC&lt;/code&gt; はその唯一のインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="007930a39a0f2faab8c8e4ee31d60aa7baf6481f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTFException&lt;/code&gt; if &lt;code&gt;c&lt;/code&gt; is not a valid UTF code point.</source>
          <target state="translated">&lt;code&gt;UTFException&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; が有効なUTFコードポイントでない場合はUTFException。</target>
        </trans-unit>
        <trans-unit id="2e62d6eb9384d3f58094d2720a94e28aae93a734" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTFException&lt;/code&gt; if &lt;code&gt;str&lt;/code&gt; is not well-formed.</source>
          <target state="translated">&lt;code&gt;UTFException&lt;/code&gt; &lt;code&gt;str&lt;/code&gt; が整形式でない場合はUTFException。</target>
        </trans-unit>
        <trans-unit id="48154d7617896cbf8fe055991ffd39b7696db20e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTFException&lt;/code&gt; if invalid UTF sequence and &lt;code&gt;useReplacementDchar&lt;/code&gt; is set to &lt;code&gt;UseReplacementDchar.yes&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UTFException&lt;/code&gt; 無効なUTFシーケンスと場合 &lt;code&gt;useReplacementDchar&lt;/code&gt; がに設定されている &lt;code&gt;UseReplacementDchar.yes&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0dfa2e2d6c82d1a56c3f65f1ee4bf18752205a6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UdpSocket&lt;/code&gt; is a shortcut class for a UDP Socket.</source>
          <target state="translated">&lt;code&gt;UdpSocket&lt;/code&gt; は、UDPソケットのショートカットクラスです。</target>
        </trans-unit>
        <trans-unit id="5182d8d27ca95d277c11a3764eae17a180358ab4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnixAddress&lt;/code&gt; encapsulates an address for a Unix domain socket (&lt;code&gt;AF_UNIX&lt;/code&gt;), i.e. a socket bound to a path name in the file system. Available only on supported systems.</source>
          <target state="translated">&lt;code&gt;UnixAddress&lt;/code&gt; は、Unixドメインソケット（ &lt;code&gt;AF_UNIX&lt;/code&gt; ）のアドレス、つまりファイルシステムのパス名にバインドされたソケットをカプセル化します。サポートされているシステムでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="570cc7188794ad606227ced38f371e5a4e45af02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnknownAddress&lt;/code&gt; encapsulates an unknown socket address.</source>
          <target state="translated">&lt;code&gt;UnknownAddress&lt;/code&gt; は、不明なソケットアドレスをカプセル化します。</target>
        </trans-unit>
        <trans-unit id="9f804467942c17845726358bd0a49138438d2921" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnknownAddressReference&lt;/code&gt; encapsulates a reference to an arbitrary socket address.</source>
          <target state="translated">&lt;code&gt;UnknownAddressReference&lt;/code&gt; は、任意のソケットアドレスへの参照をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="86d81bb175d8331c17abee4394d7ff9941e66945" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VariantN&lt;/code&gt; is a discriminated union type parameterized with the largest size of the types stored (&lt;code&gt;maxDataSize&lt;/code&gt;) and with the list of allowed types (&lt;code&gt;AllowedTypes&lt;/code&gt;). If the list is empty, then any type up of size up to &lt;code&gt; maxDataSize&lt;/code&gt; (rounded up for alignment) can be stored in a &lt;code&gt;VariantN&lt;/code&gt; object without being boxed (types larger than this will be boxed).</source>
          <target state="translated">&lt;code&gt;VariantN&lt;/code&gt; は判別組合（保存されたタイプの最大サイズでパラメータタイプで &lt;code&gt;maxDataSize&lt;/code&gt; ）と許可されたタイプのリスト（と &lt;code&gt;AllowedTypes&lt;/code&gt; ）。リストが空の場合、 &lt;code&gt; maxDataSize&lt;/code&gt; までのサイズの型（整列のために切り上げ）は、ボックス化されずに &lt;code&gt;VariantN&lt;/code&gt; オブジェクトに格納できます（これより大きい型はボックス化されます）。</target>
        </trans-unit>
        <trans-unit id="e1cd77bcc0cf1f030ae7901413fc0caacad7cb4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WhiteHole!Base&lt;/code&gt; is a subclass of &lt;code&gt;Base&lt;/code&gt; which automatically implements all abstract member functions as functions that always fail. These functions simply throw an &lt;code&gt;Error&lt;/code&gt; and never return. &lt;code&gt;Whitehole&lt;/code&gt; is useful for trapping the use of class member functions that haven't been implemented.</source>
          <target state="translated">&lt;code&gt;WhiteHole!Base&lt;/code&gt; は、常に失敗する関数としてすべての抽象メンバー関数を自動的に実装する &lt;code&gt;Base&lt;/code&gt; のサブクラスです。これらの関数は単に &lt;code&gt;Error&lt;/code&gt; をスローし、戻ることはありません。 &lt;code&gt;Whitehole&lt;/code&gt; は、実装されていないクラスメンバー関数の使用をトラップするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="88dc88b6a51b76108d5dab31380ce314448dfd5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WindowsTimeZone&lt;/code&gt; does not exist on Posix systems.</source>
          <target state="translated">&lt;code&gt;WindowsTimeZone&lt;/code&gt; はPosixシステムには存在しません。</target>
        </trans-unit>
        <trans-unit id="b4dc9fa60360bfc14db34f4ba777455add3c797a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WithNaN&lt;/code&gt; has a special &quot;Not a Number&quot; (NaN) value akin to the homonym value reserved for floating-point values</source>
          <target state="translated">&lt;code&gt;WithNaN&lt;/code&gt; には、浮動小数点値用に予約された同音異義語のような特別な「Not a Number」（NaN）値があります</target>
        </trans-unit>
        <trans-unit id="75932668cda7d1c138194cb2dc0ebce2d67618fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Yes.allocateGC&lt;/code&gt;/&lt;code&gt;No.allocateGC&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Yes.allocateGC&lt;/code&gt;/&lt;code&gt;No.allocateGC&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37096fcbb3223cda99b6350080a7ac8758291a16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Yes.caseSensitive&lt;/code&gt; (default) or &lt;code&gt;No.caseSensitive&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Yes.caseSensitive&lt;/code&gt; （デフォルト）または &lt;code&gt;No.caseSensitive&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa4e1929badc6e0a53755ba0d2f8f6d82478fac6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Yes.caseSensitive&lt;/code&gt; or &lt;code&gt;No.caseSensitive&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Yes.caseSensitive&lt;/code&gt; または &lt;code&gt;No.caseSensitive&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="acde99d49e2a347fbbea03032397e4d04b670d2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Yes.each&lt;/code&gt; if the entire range was iterated, &lt;code&gt;No.each&lt;/code&gt; in case of early stopping.</source>
          <target state="translated">&lt;code&gt;Yes.each&lt;/code&gt; 全体の範囲は、反復された場合 &lt;code&gt;No.each&lt;/code&gt; を早期に停止した場合には。</target>
        </trans-unit>
        <trans-unit id="1a0894a8a8a7fcd48b48f86aff52d4085ed4d7ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Yes.keepTerminator&lt;/code&gt; signals that the line terminator should be returned as part of the lines in the range.</source>
          <target state="translated">&lt;code&gt;Yes.keepTerminator&lt;/code&gt; は、ラインターミネータが範囲内のラインの一部として返されることを示します。</target>
        </trans-unit>
        <trans-unit id="0e9225c219b029fb33b9467a4723c8b934677c56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Yes.multiblock&lt;/code&gt; to support allocations spanning across multiple blocks and &lt;code&gt;No.multiblock&lt;/code&gt; to support single block allocations. Although limited by single block allocations, &lt;code&gt;No.multiblock&lt;/code&gt; will generally provide higher performance.</source>
          <target state="translated">&lt;code&gt;Yes.multiblock&lt;/code&gt; 複数のブロックにまたがる割り当てをサポートするためのYes.multiblockおよび単一のブロック割り当てをサポートするための &lt;code&gt;No.multiblock&lt;/code&gt; 単一ブロックの割り当てによって制限されますが、 &lt;code&gt;No.multiblock&lt;/code&gt; は通常、より高いパフォーマンスを提供します。</target>
        </trans-unit>
        <trans-unit id="4e26adb07aa94d1c5cf3ef86c050cd4d263aafe0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[1, 2].substitute(1, 0.1)&lt;/code&gt; returns &lt;code&gt;[0.1, 2]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[1, 2].substitute(1, 0.1)&lt;/code&gt; は &lt;code&gt;[0.1, 2]&lt;/code&gt; 0.1、2]を返します。</target>
        </trans-unit>
        <trans-unit id="0473657586b4b2fbdfc343d365146a98334ec2c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;] = c&lt;/code&gt; are rewritten as &lt;code&gt;a.opIndexAssign(c,&lt;/code&gt;&lt;code&gt;a.opSlice(&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;] = c&lt;/code&gt; は、 &lt;code&gt;a.opIndexAssign(c,&lt;/code&gt; &lt;code&gt;a.opSlice(&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9bd65cd7b31f1495857902ae8fd7a208acd1507" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;]&lt;/code&gt; as &lt;code&gt;a.opIndexAssign(a.opSlice(&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;]&lt;/code&gt; as &lt;code&gt;a.opIndexAssign(a.opSlice(&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53d36c336609c242959efe9929c29b979ffec086" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;]&lt;/code&gt; can also be overloaded by implementing &lt;code&gt;opSlice()&lt;/code&gt; with no arguments and &lt;code&gt;opSlice(&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;]&lt;/code&gt; は、引数なしで &lt;code&gt;opSlice()&lt;/code&gt; を実装し、 &lt;code&gt;opSlice(&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f97d7e3a93902ed9c6d203a821119d9132a3f3b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;]&lt;/code&gt;, where the expressions inside the square brackets contain slice expressions of the form</source>
          <target state="translated">&lt;code&gt;]&lt;/code&gt; 、角括弧内の式には、次の形式のスライス式が含まれます。</target>
        </trans-unit>
        <trans-unit id="49268134baf72802931b8c3948cac60b86dde66e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_&lt;/code&gt;arguments</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt;arguments</target>
        </trans-unit>
        <trans-unit id="e31497ca3e9899507e5c69f4846b4a071560e54b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__FILE_FULL_PATH__&lt;/code&gt; expands to the absolute source file name at the point of instantiation.</source>
          <target state="translated">&lt;code&gt;__FILE_FULL_PATH__&lt;/code&gt; は、インスタンス化の時点での絶対ソースファイル名に展開されます。</target>
        </trans-unit>
        <trans-unit id="80a25cf93923c63ad8518f587ae90ca9069798a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__FILE__&lt;/code&gt; and &lt;code&gt;__LINE__&lt;/code&gt; expand to the source file name and line number at the point of instantiation. The path of the source file is left up to the compiler.</source>
          <target state="translated">&lt;code&gt;__FILE__&lt;/code&gt; および &lt;code&gt;__LINE__&lt;/code&gt; は、インスタンス化の時点でソースファイル名と行番号に展開されます。ソースファイルのパスはコンパイラに任されています。</target>
        </trans-unit>
        <trans-unit id="ed588f6dcc2cb7aa7133ee1f40685cad687bdaf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__FUNCTION__&lt;/code&gt; expands to the fully qualified name of the function at the point of instantiation.</source>
          <target state="translated">&lt;code&gt;__FUNCTION__&lt;/code&gt; は、インスタンス化の時点で関数の完全修飾名に展開されます。</target>
        </trans-unit>
        <trans-unit id="2359fdfddc3fc8d10e8fe72822341452b6bf1b38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__MODULE__&lt;/code&gt; expands to the module name at the point of instantiation.</source>
          <target state="translated">&lt;code&gt;__MODULE__&lt;/code&gt; は、インスタンス化の時点でモジュール名に展開されます。</target>
        </trans-unit>
        <trans-unit id="eca932952e18272728a561301fa1405e49487c48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__PRETTY_FUNCTION__&lt;/code&gt; is similar to &lt;code&gt;__FUNCTION__&lt;/code&gt;, but also expands the function return type, its parameter types, and its attributes.</source>
          <target state="translated">&lt;code&gt;__PRETTY_FUNCTION__&lt;/code&gt; は__FUNCTION__に似てい &lt;code&gt;__FUNCTION__&lt;/code&gt; が、関数の戻り値の型、パラメーターの型、および属性も拡張されています。</target>
        </trans-unit>
        <trans-unit id="79b8a8782b10376be103a1b46f17d41a7ce95fde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__deh_eh&lt;/code&gt;, &lt;code&gt;__DATA&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;__deh_eh&lt;/code&gt; 、 &lt;code&gt;__DATA&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16b9bfc2a738412fd0d279ded1128b5343a9e21f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__gshared&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;__gshared&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="64d15ca2a1aa87d72f7c89826d3003d8d24ce658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__gshared&lt;/code&gt; is disallowed in safe mode.</source>
          <target state="translated">&lt;code&gt;__gshared&lt;/code&gt; はセーフモードでは許可されていません。</target>
        </trans-unit>
        <trans-unit id="067be2526e301e788923402f587a4884fcca8cbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__gshared&lt;/code&gt; may also be applied to member variables and local variables. In these cases, &lt;code&gt;__gshared&lt;/code&gt; is equivalent to &lt;code&gt;static&lt;/code&gt;, except that the variable is shared by all threads rather than being thread local.</source>
          <target state="translated">&lt;code&gt;__gshared&lt;/code&gt; は、メンバー変数とローカル変数にも適用できます。これらの場合、 &lt;code&gt;__gshared&lt;/code&gt; は &lt;code&gt;static&lt;/code&gt; と同等ですが、変数はスレッドローカルではなくすべてのスレッドで共有されます。</target>
        </trans-unit>
        <trans-unit id="da5929d8792a5bf4d5a1a5e20ebb3b7545142b09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_argptr&lt;/code&gt; and &lt;code&gt;_arguments&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;_argptr&lt;/code&gt; および &lt;code&gt;_arguments&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="927a35ea306e7d9e1a9c8f224e1e1f44cc56f803" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_trailing&lt;/code&gt; contains the rest of the format string.</source>
          <target state="translated">&lt;code&gt;_trailing&lt;/code&gt; には、残りのフォーマット文字列が含まれています。</target>
        </trans-unit>
        <trans-unit id="c23d4c448b30b7e5762e3b9f50f1b38c92addc3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a.opCmp(b)&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a.opCmp(b)&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="83aca5e23ffe5179da8d2a164f7e4d0b65a4c6c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a.opCmp(b)&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;= 0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a.opCmp(b)&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;= 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="181857568295d56eba9a6a198de27c754dd04414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a.opCmp(b)&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a.opCmp(b)&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85dd9503032ce2e1a2b3998f9b3f43ee7645078a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a.opCmp(b)&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;= 0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a.opCmp(b)&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;= 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e146d9bd2ea897b3e719a63d2a74b59414f2e3d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a0&lt;/code&gt;, &lt;code&gt;a1&lt;/code&gt;, &amp;hellip;: arguments passed to the function;</source>
          <target state="translated">&lt;code&gt;a0&lt;/code&gt; 、 &lt;code&gt;a1&lt;/code&gt; 、&amp;hellip;：関数に渡される引数。</target>
        </trans-unit>
        <trans-unit id="b8067ead0423db1cae0ce0fbdd233161504053f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; without evaluating &lt;code&gt;b&lt;/code&gt; if &lt;code&gt;cond&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Otherwise, returns &lt;code&gt;b&lt;/code&gt; without evaluating &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;cond&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、bを評価しません。それ以外の場合は、返す &lt;code&gt;b&lt;/code&gt; 評価せず。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a080773255c341a2088ee851b7f90e5bac4bd5d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3f340a48cc5ef4b2a7c3fb270ef208c519320ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;= b&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;= b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c47794bafd1b854eee29c6dd3c8d0a62f9c6390" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;b&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7e18871ebac940afccefd06288a22599af4a142" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;= b&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;= b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4394b6408820c3ccbeb907463762684a0db34545" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;b&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="481e0e3279ea55db4490b4e12b497bb7796185c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abort&lt;/code&gt; The default behavior. The normal behavior as described in the previous section</source>
          <target state="translated">&lt;code&gt;abort&lt;/code&gt; デフォルトの動作。前のセクションで説明した通常の動作</target>
        </trans-unit>
        <trans-unit id="10e5737466046b47f8828601e1ebc2dfb80a8b5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abort&lt;/code&gt; The default behavior. The normal behavior as described in the previous section.</source>
          <target state="translated">&lt;code&gt;abort&lt;/code&gt; デフォルトの動作。前のセクションで説明した通常の動作。</target>
        </trans-unit>
        <trans-unit id="862ebc26b834e571d93df7218de8a3cf6a0a6944" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;absTolerance&lt;/code&gt; shall be normal positive real no less then &lt;code&gt;T.epsilon*2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;absTolerance&lt;/code&gt; は &lt;code&gt;T.epsilon*2&lt;/code&gt; 以上の通常の正の実数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="069bc530f0c192a689ee8804bab426dafd2e186a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abstract&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;abstract&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="dea734aca244e1fa75a85bf8024a6dda064dd51f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;align&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;align&lt;/code&gt; 属性の整列</target>
        </trans-unit>
        <trans-unit id="2bbda70a12b1dfb683a3d0eeefb4b0af80992840" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;align&lt;/code&gt; by itself sets it to the default, which matches the default member alignment of the companion C compiler.</source>
          <target state="translated">&lt;code&gt;align&lt;/code&gt; は、それ自体をデフォルトに設定します。これは、コンパニオンCコンパイラーのデフォルトのメンバーアライメントと一致します。</target>
        </trans-unit>
        <trans-unit id="96c65851d0dfae10224f2b4c30d382fe864e2e13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alignedReallocate&lt;/code&gt; does not attempt to use &lt;code&gt;Allocator.reallocate&lt;/code&gt; even if defined. This is deliberate so allocators may use it internally within their own implementation of &lt;code&gt;reallocate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;alignedReallocate&lt;/code&gt; は、使用しようとしていません &lt;code&gt;Allocator.reallocate&lt;/code&gt; を定義した場合でも。これは意図的なものであるため、アロケータは独自の &lt;code&gt;reallocate&lt;/code&gt; の実装内で内部的に使用できます。</target>
        </trans-unit>
        <trans-unit id="920656092b134a330263b0a718fccea2594e0c24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all!&quot;a &amp;gt; 0&quot;([1, 2, 3, 4])&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; because all elements are positive</source>
          <target state="translated">&lt;code&gt;all!&quot;a &amp;gt; 0&quot;([1, 2, 3, 4])&lt;/code&gt; は、すべての要素が正で &lt;code&gt;true&lt;/code&gt; ためtrueを返します</target>
        </trans-unit>
        <trans-unit id="e1ec3a1b62b705508abcddac095e37129e263fa2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all&lt;/code&gt; can also be used without a predicate, if its items can be evaluated to true or false in a conditional statement. This can be a convenient way to quickly evaluate that</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; 条件付きステートメントでその項目をtrueまたはfalseに評価できる場合は、すべて述語なしでも使用できます。これは、それをすばやく評価するのに便利な方法です。</target>
        </trans-unit>
        <trans-unit id="40bf88a393461716b9db758c2a860087764c87d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;any!&quot;a &amp;gt; 0&quot;([1, 2, -3, -4])&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; because at least one element is positive</source>
          <target state="translated">&lt;code&gt;any!&quot;a &amp;gt; 0&quot;([1, 2, -3, -4])&lt;/code&gt; は、少なくとも1つの要素が正で &lt;code&gt;true&lt;/code&gt; ため、trueを返します</target>
        </trans-unit>
        <trans-unit id="75c0218f1f4dc4fd6870ad5899d4a2555db6aab3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;any&lt;/code&gt; can also be used without a predicate, if its items can be evaluated to true or false in a conditional statement. &lt;code&gt;!any&lt;/code&gt; can be a convenient way to quickly test that</source>
          <target state="translated">&lt;code&gt;any&lt;/code&gt; また、条件付きステートメントで項目をtrueまたはfalseに評価できる場合、述語なしでanyを使用することもできます。 &lt;code&gt;!any&lt;/code&gt; は、それをすばやくテストする便利な方法です。</target>
        </trans-unit>
        <trans-unit id="920ac1cf35f2ec8de62ed4ca28b101cde7e08da0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;args&lt;/code&gt; must not have unshared aliasing. In other words, all arguments to &lt;code&gt;fn&lt;/code&gt; must either be &lt;code&gt;shared&lt;/code&gt; or &lt;code&gt;immutable&lt;/code&gt; or have no pointer indirection. This is necessary for enforcing isolation among threads.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; に非共有エイリアスを設定することはできません。言い換えると、 &lt;code&gt;fn&lt;/code&gt; へのすべての引数は、 &lt;code&gt;shared&lt;/code&gt; か &lt;code&gt;immutable&lt;/code&gt; か、ポインタの間接指定がない必要があります。これは、スレッド間の分離を強制するために必要です。</target>
        </trans-unit>
        <trans-unit id="bb52ec3e03bf0cb8732949695494b891c652b1e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;args&lt;/code&gt;: a tuple of the arguments;</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; ：引数のタプル。</target>
        </trans-unit>
        <trans-unit id="d04beebd234d53b9bd69f97edc333bfcb532821c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assert&lt;/code&gt; failures are directed to the C runtime library</source>
          <target state="translated">&lt;code&gt;assert&lt;/code&gt; エラーはCランタイムライブラリに送信されます</target>
        </trans-unit>
        <trans-unit id="fa92f6e99c1b6ea8acd4d7c57031128038c6661d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;auto&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="cbe5e5a31e6057e02bc7e46eae1f3fee6b097927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ax&lt;/code&gt; and &lt;code&gt;bx&lt;/code&gt; shall be finite reals.</source>
          <target state="translated">&lt;code&gt;ax&lt;/code&gt; と &lt;code&gt;bx&lt;/code&gt; は有限の実数です。</target>
        </trans-unit>
        <trans-unit id="785b2818320935ab9035e9ed41b00039824ad4ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b !is null&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; must have been allocated with this allocator.</source>
          <target state="translated">&lt;code&gt;b !is null&lt;/code&gt; あり、 &lt;code&gt;b&lt;/code&gt; はこのアロケータで割り当てられている必要があります。</target>
        </trans-unit>
        <trans-unit id="9d8ade1d9189252415ea271c17ad1402ce7018c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b is null&lt;/code&gt;. This is because there is no other possible legitimate input.</source>
          <target state="translated">&lt;code&gt;b is null&lt;/code&gt; です。これは、他に考えられる正当な入力がないためです。</target>
        </trans-unit>
        <trans-unit id="9b3bbb98cab24e06860664bbf90aad4fd5a0f595" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b.opCmp(a)&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;b.opCmp(a)&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="29bcab357223ee6c8c5f67694f47a5d3c9e64fff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b.opCmp(a)&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;= 0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;b.opCmp(a)&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;= 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="593c76dfe41796a74b9d56ecfa87752e9ea806a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b.opCmp(a)&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;b.opCmp(a)&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80e0464eea74b423d0de6d015b3d002ecf879c9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b.opCmp(a)&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;= 0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;b.opCmp(a)&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;= 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b75c3b04355d5b293310910e92a79197b5586c14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b&lt;/code&gt; has been allocated with this allocator, or is &lt;code&gt; null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; はこのアロケータで割り当てられているか、 &lt;code&gt; null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6fc256c493430315b6eed935052cb72d6e6aef3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;balancedParens(&quot;((1 + 1) / 2)&quot;)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; because the string has balanced parentheses.</source>
          <target state="translated">&lt;code&gt;balancedParens(&quot;((1 + 1) / 2)&quot;)&lt;/code&gt; は、文字列が括弧で囲まれているため、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="67d7a26d3b5511855f2e0c34eb245328c333d854" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bool&lt;/code&gt;s are formatted as &lt;code&gt;&quot;true&quot;&lt;/code&gt; or &lt;code&gt;&quot;false&quot;&lt;/code&gt; with &lt;code&gt;%s&lt;/code&gt; and as &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; with integral-specific format specs.</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; は、 &lt;code&gt;%s&lt;/code&gt; &lt;code&gt;&quot;false&quot;&lt;/code&gt; &lt;code&gt;&quot;true&quot;&lt;/code&gt; または「false」、整数固有のフォーマット仕様では &lt;code&gt;1&lt;/code&gt; または &lt;code&gt;0&lt;/code&gt; としてフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="390010a9f4152663f8a44b82b6304798c4206cbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; して &lt;code&gt;continue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aec8b12c63c29d1b55fc273193e84c10d1c29428" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; exits the innermost enclosing while, for, foreach, do, or switch statement, resuming execution at the statement following it.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; は、最も内側の囲んでいるwhile、for、foreach、do、またはswitchステートメントを終了し、その後のステートメントで実行を再開します。</target>
        </trans-unit>
        <trans-unit id="ad7d5b04e91ed51a96a115cccedf9bf33d34abd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bringToFront&lt;/code&gt; takes two ranges &lt;code&gt;front&lt;/code&gt; and &lt;code&gt;back&lt;/code&gt;, which may be of different types. Considering the concatenation of &lt;code&gt;front&lt;/code&gt; and &lt;code&gt;back&lt;/code&gt; one unified range, &lt;code&gt;bringToFront&lt;/code&gt; rotates that unified range such that all elements in &lt;code&gt;back&lt;/code&gt; are brought to the beginning of the unified range. The relative ordering of elements in &lt;code&gt;front&lt;/code&gt; and &lt;code&gt;back&lt;/code&gt;, respectively, remains unchanged.</source>
          <target state="translated">&lt;code&gt;bringToFront&lt;/code&gt; は、 &lt;code&gt;front&lt;/code&gt; と &lt;code&gt;back&lt;/code&gt; の 2つの範囲を取得します。これらは、タイプが異なる場合があります。 &lt;code&gt;front&lt;/code&gt; と &lt;code&gt;back&lt;/code&gt; 1つの統合された範囲の連結を考慮して、 &lt;code&gt;bringToFront&lt;/code&gt; はその統合された範囲を回転させ、 &lt;code&gt;back&lt;/code&gt; すべての要素が統合された範囲の先頭に移動するようにします。それぞれ &lt;code&gt;front&lt;/code&gt; および &lt;code&gt;back&lt;/code&gt; の要素の相対的な順序は変更されていません。</target>
        </trans-unit>
        <trans-unit id="927abef211407b2f445dd66eacc6dd89aa442eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;byChunk(&quot;dlang.org&quot;, 10)&lt;/code&gt; returns a range of ubyte[10] containing the dlang.org web page.</source>
          <target state="translated">&lt;code&gt;byChunk(&quot;dlang.org&quot;, 10)&lt;/code&gt; は、dlang.org Webページを含むubyte [10]の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="63eabee68fef61a3ee33534d563febf1004d637d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;byChunkAsync(&quot;dlang.org&quot;, 10)&lt;/code&gt; returns a range of ubyte[10] containing the dlang.org web page asynchronously.</source>
          <target state="translated">&lt;code&gt;byChunkAsync(&quot;dlang.org&quot;, 10)&lt;/code&gt; は、dlang.org Webページを非同期で含むubyte [10]の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="e07e59b1a940539cf55688cd2653347c4d8fe2d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;byCodeUnit&lt;/code&gt; does no Unicode decoding</source>
          <target state="translated">&lt;code&gt;byCodeUnit&lt;/code&gt; はUnicodeデコードを行いません</target>
        </trans-unit>
        <trans-unit id="e7bacd8ab0219c831357aa6d37c67a75166cc2af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;byCodeUnit&lt;/code&gt; exposes a &lt;code&gt;source&lt;/code&gt; property when wrapping narrow strings.</source>
          <target state="translated">&lt;code&gt;byCodeUnit&lt;/code&gt; は、狭い文字列をラップするときに &lt;code&gt;source&lt;/code&gt; プロパティを公開します。</target>
        </trans-unit>
        <trans-unit id="09c9aa4121d7ea220de3b1140939386f7ed28379" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;byLine(&quot;dlang.org&quot;)&lt;/code&gt; returns a range of char[] containing the dlang.org web page.</source>
          <target state="translated">&lt;code&gt;byLine(&quot;dlang.org&quot;)&lt;/code&gt; は、dlang.org Webページを含むchar []の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="51878799bbf07b2664da8a52401f39df0b2ac581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;byLineAsync(&quot;dlang.org&quot;)&lt;/code&gt; returns a range of char[] containing the dlang.org web page asynchronously.</source>
          <target state="translated">&lt;code&gt;byLineAsync(&quot;dlang.org&quot;)&lt;/code&gt; は、dlang.org Webページを含むchar []の範囲を非同期で返します。</target>
        </trans-unit>
        <trans-unit id="304cd505e182bc2c4f64cc2e2693038a437eeb75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cache&lt;/code&gt; does not provide random access primitives, as &lt;code&gt;cache&lt;/code&gt; would be unable to cache the random accesses. If &lt;code&gt;Range&lt;/code&gt; provides slicing primitives, then &lt;code&gt;cache&lt;/code&gt; will provide the same slicing primitives, but &lt;code&gt;hasSlicing!Cache&lt;/code&gt; will not yield true (as the &lt;a href=&quot;std_range_primitives#hasSlicing&quot;&gt;&lt;code&gt;std.range.primitives.hasSlicing&lt;/code&gt;&lt;/a&gt; trait also checks for random access).</source>
          <target state="translated">&lt;code&gt;cache&lt;/code&gt; として、ランダム・アクセス・プリミティブを提供していない &lt;code&gt;cache&lt;/code&gt; ランダムアクセスをキャッシュすることができないであろう。 &lt;code&gt;Range&lt;/code&gt; がスライスプリミティブを提供する場合、 &lt;code&gt;cache&lt;/code&gt; は同じスライスプリミティブを提供しますが、 &lt;code&gt;hasSlicing!Cache&lt;/code&gt; はtrueを生成しません（&lt;a href=&quot;std_range_primitives#hasSlicing&quot;&gt; &lt;code&gt;std.range.primitives.hasSlicing&lt;/code&gt; &lt;/a&gt;トレイトもランダムアクセスをチェックするため）。</target>
        </trans-unit>
        <trans-unit id="f606f9f15aaebf711d9bba631df12df0a788678b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cache&lt;/code&gt; eagerly evaluates &lt;a href=&quot;std_range_primitives#front&quot;&gt;front&lt;/a&gt; of &lt;code&gt;range&lt;/code&gt; on each construction or call to &lt;a href=&quot;std_range_primitives#popFront&quot;&gt;popFront&lt;/a&gt;, to store the result in a cache. The result is then directly returned when &lt;a href=&quot;std_range_primitives#front&quot;&gt;front&lt;/a&gt; is called, rather than re-evaluated.</source>
          <target state="translated">&lt;code&gt;cache&lt;/code&gt; は、各構築で &lt;code&gt;range&lt;/code&gt; &lt;a href=&quot;std_range_primitives#front&quot;&gt;最前面&lt;/a&gt;を&lt;a href=&quot;std_range_primitives#popFront&quot;&gt;積極的&lt;/a&gt;に評価するか、popFrontを呼び出して、結果をキャッシュに格納します。結果は、再評価されるのではなく、&lt;a href=&quot;std_range_primitives#front&quot;&gt;front&lt;/a&gt;が呼び出されたときに直接返されます。</target>
        </trans-unit>
        <trans-unit id="e14e0b9f44b3e89356c7590fdf0f91e4eeaa0a59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cache&lt;/code&gt; may provide &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;bidirectional range&lt;/a&gt; iteration if needed, but since this comes at an increased cost, it must be explicitly requested via the call to &lt;code&gt;cacheBidirectional&lt;/code&gt;. Furthermore, a bidirectional cache will evaluate the &quot;center&quot; element twice, when there is only one element left in the range.</source>
          <target state="translated">&lt;code&gt;cache&lt;/code&gt; は、必要に応じて&lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;双方向の範囲&lt;/a&gt;反復を提供する場合がありますが、これにはコストがかかるため、 &lt;code&gt;cacheBidirectional&lt;/code&gt; の呼び出しを介して明示的に要求する必要があります。さらに、範囲内に要素が1つだけ残っている場合、双方向キャッシュは「center」要素を2回評価します。</target>
        </trans-unit>
        <trans-unit id="410f8af0117e2ba07fd5bc8bff4390d619dd775a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;canFind(&quot;hello world&quot;, &quot;or&quot;)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;canFind(&quot;hello world&quot;, &quot;or&quot;)&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ff2c61cde18123e357fe1a8f2663dce97f508b69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cast()&lt;/code&gt; and &lt;code&gt;cast(&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;cast()&lt;/code&gt; および &lt;code&gt;cast(&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60ae09af485be0ac7cd9b6f70f585c2dbee91ecd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cast(U)&lt;/code&gt; expressions applied to lvalues of type &lt;code&gt;T&lt;/code&gt; when &lt;code&gt;T*&lt;/code&gt; is implicitly convertible to &lt;code&gt;U*&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;cast(U)&lt;/code&gt; 式は、式の左辺値に適用される &lt;code&gt;T&lt;/code&gt; 場合 &lt;code&gt;T*&lt;/code&gt; に暗黙的に変換可能な &lt;code&gt;U*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b89b8e9c45bb4feabdacbf66c526326b90e2d994" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;castSwitch&lt;/code&gt; can only be used with object types.</source>
          <target state="translated">&lt;code&gt;castSwitch&lt;/code&gt; はオブジェクトタイプでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="3d916f0dc7c1e1eec21981dac40ca5db26d4906f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;char&lt;/code&gt; (chars are unsigned in D)</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; （charはDでは符号なし）</target>
        </trans-unit>
        <trans-unit id="fb295624198dc0f8123396e13dc59dba2a6dfa32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;char&lt;/code&gt;, &lt;code&gt;wchar&lt;/code&gt;, &lt;code&gt;dchar&lt;/code&gt; to a string type.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 、 &lt;code&gt;wchar&lt;/code&gt; 、 &lt;code&gt;dchar&lt;/code&gt; を文字列型に変換します。</target>
        </trans-unit>
        <trans-unit id="c8e47cbd8e35276af4679f6e7b5bda73ed1d9d62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;char&lt;/code&gt;, &lt;code&gt;wchar&lt;/code&gt;, or &lt;code&gt;dchar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 、 &lt;code&gt;wchar&lt;/code&gt; 、または &lt;code&gt;dchar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e2a921f6a1d6d0ef8009fc307e0b2d445b1297e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;char[]&lt;/code&gt; strings are in UTF-8 format. &lt;code&gt;wchar[]&lt;/code&gt; strings are in UTF-16 format. &lt;code&gt;dchar[]&lt;/code&gt; strings are in UTF-32 format.</source>
          <target state="translated">&lt;code&gt;char[]&lt;/code&gt; 文字列はUTF-8形式です。 &lt;code&gt;wchar[]&lt;/code&gt; 文字列はUTF-16形式です。 &lt;code&gt;dchar[]&lt;/code&gt; 文字列はUTF-32形式です。</target>
        </trans-unit>
        <trans-unit id="f2bd0519659f995011158dca0a093bc2a43687cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;choices&lt;/code&gt; needs to be composed of pairs of test expressions and return expressions. Each test-expression is compared with &lt;code&gt;switchExpression&lt;/code&gt; using &lt;code&gt;pred&lt;/code&gt;(&lt;code&gt;switchExpression&lt;/code&gt; is the first argument) and if that yields true - the return expression is returned.</source>
          <target state="translated">&lt;code&gt;choices&lt;/code&gt; は、テスト式と戻り式のペアで構成する必要があります。各test-expressionは、 &lt;code&gt;pred&lt;/code&gt; （ &lt;code&gt;switchExpression&lt;/code&gt; が最初の引数です）を使用して &lt;code&gt;switchExpression&lt;/code&gt; と比較され、trueが返される場合は、戻り式が返されます。</target>
        </trans-unit>
        <trans-unit id="ce5b206c240b5efd37495766481c140fd6dd85f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chooseAtRuntime&lt;/code&gt; is a compile-time constant of type &lt;code&gt;size_t&lt;/code&gt; that several parameterized structures in this module recognize to mean deferral to runtime of the exact value. For example, &lt;code&gt;BitmappedBlock!(Allocator, 4096)&lt;/code&gt; (described in detail below) defines a block allocator with block size of 4096 bytes, whereas &lt;code&gt;BitmappedBlock!(Allocator, chooseAtRuntime)&lt;/code&gt; defines a block allocator that has a field storing the block size, initialized by the user.</source>
          <target state="translated">&lt;code&gt;chooseAtRuntime&lt;/code&gt; は、 &lt;code&gt;size_t&lt;/code&gt; 型のコンパイル時定数であり、このモジュールのいくつかのパラメーター化された構造は、正確な値のランタイムへの遅延を意味すると認識しています。たとえば、 &lt;code&gt;BitmappedBlock!(Allocator, 4096)&lt;/code&gt; （以下で詳細に説明）は、4096バイトのブロックサイズのブロックアロケーターを定義しますが、 &lt;code&gt;BitmappedBlock!(Allocator, chooseAtRuntime)&lt;/code&gt; は、ブロックサイズを格納するフィールドを持つブロックアロケーターを定義します。ユーザー。</target>
        </trans-unit>
        <trans-unit id="4566f06b914a580f926d5a0099020d085b440b14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chunk&lt;/code&gt; must be at least as large as &lt;code&gt;T&lt;/code&gt; needs and should have an alignment multiple of &lt;code&gt;T&lt;/code&gt;'s alignment.</source>
          <target state="translated">&lt;code&gt;chunk&lt;/code&gt; は少なくとも &lt;code&gt;T&lt;/code&gt; が必要とする大きさでなければならず、 &lt;code&gt;T&lt;/code&gt; のアラインメントの倍数のアラインメントを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="455127cdf62cc10f2c9d34b7dba0f57d384c5937" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chunk&lt;/code&gt; must be at least as large as &lt;code&gt;T&lt;/code&gt; needs and should have an alignment multiple of &lt;code&gt;T&lt;/code&gt;'s alignment. (The size of a &lt;code&gt;class&lt;/code&gt; instance is obtained by using &lt;code&gt;_traits(classInstanceSize, T)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;chunk&lt;/code&gt; は少なくとも &lt;code&gt;T&lt;/code&gt; が必要とする大きさでなければならず、 &lt;code&gt;T&lt;/code&gt; のアラインメントの倍数のアラインメントを持つ必要があります。（ &lt;code&gt;class&lt;/code&gt; インスタンスのサイズは &lt;code&gt;_traits(classInstanceSize, T)&lt;/code&gt; を使用して取得されます）。</target>
        </trans-unit>
        <trans-unit id="5bf1191081aa876778470c09b21f3b6c55852ee1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chunkBy!((a,b) =&amp;gt; a[1] == b[1])([[1, 1], [1, 2], [2, 2], [2, 1]])&lt;/code&gt; returns a range containing 3 subranges: the first with just &lt;code&gt;[1, 1]&lt;/code&gt;; the second with the elements &lt;code&gt;[1, 2]&lt;/code&gt; and &lt;code&gt;[2, 2]&lt;/code&gt;; and the third with just &lt;code&gt;[2, 1]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;chunkBy!((a,b) =&amp;gt; a[1] == b[1])([[1, 1], [1, 2], [2, 2], [2, 1]])&lt;/code&gt; はaを返します3つのサブ範囲を含む範囲：最初は &lt;code&gt;[1, 1]&lt;/code&gt; 。2番目の要素は &lt;code&gt;[1, 2]&lt;/code&gt; および &lt;code&gt;[2, 2]&lt;/code&gt; です。そして3番目は &lt;code&gt;[2, 1]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6b9a3a8566809a020c68aaea90acac74e5efb03e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chunkCount&lt;/code&gt; must not be zero, unless &lt;code&gt;source&lt;/code&gt; is also empty.</source>
          <target state="translated">&lt;code&gt;chunkCount&lt;/code&gt; &lt;code&gt;source&lt;/code&gt; も空でない限り、chunkCountはゼロであってはなりません。</target>
        </trans-unit>
        <trans-unit id="e4fa67ca853568548d80d9ea722ce341af284387" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clamp(1, 3, 6)&lt;/code&gt; returns &lt;code&gt;3&lt;/code&gt;. &lt;code&gt;clamp(4, 3, 6)&lt;/code&gt; returns &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;clamp(1, 3, 6)&lt;/code&gt; は &lt;code&gt;3&lt;/code&gt; を返します。 &lt;code&gt;clamp(4, 3, 6)&lt;/code&gt; は &lt;code&gt;4&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0e931bbc6e887a57f25ca3ea62a185b1d52c88ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmp(&quot;abc&quot;, &quot;abcd&quot;)&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;cmp(&quot;abc&quot;, &quot;aba&quot;)&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, and &lt;code&gt;cmp(&quot;abc&quot;, &quot;abc&quot;)&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cmp(&quot;abc&quot;, &quot;abcd&quot;)&lt;/code&gt; は &lt;code&gt;-1&lt;/code&gt; 、 &lt;code&gt;cmp(&quot;abc&quot;, &quot;aba&quot;)&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;cmp(&quot;abc&quot;, &quot;abc&quot;)&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="35e6384e8ce379e258f83b09389948c49d161e83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commonPrefix(&quot;parakeet&quot;, &quot;parachute&quot;)&lt;/code&gt; returns &lt;code&gt;&quot;para&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;commonPrefix(&quot;parakeet&quot;, &quot;parachute&quot;)&lt;/code&gt; は &lt;code&gt;&quot;para&quot;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="df5d8088e316cfde0b98978a7ef3c894646eb3bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt; (= c)</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; （= c）</target>
        </trans-unit>
        <trans-unit id="93ad55dd726f30a8bd9799af2132fb43bcfaf1f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="b0a59a87faddcc9b5e518c4dc18b7892c90c80c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt; applies to data that cannot be changed by the const reference to that data. It may, however, be changed by another reference to that same data. Const finds applications in passing data through interfaces that promise not to modify them.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; は、そのデータへのconst参照によって変更できないデータに適用されます。ただし、同じデータへの別の参照によって変更される場合があります。Constは、アプリケーションがデータを変更しないことを約束するインターフェースを介してデータを渡すことを発見します。</target>
        </trans-unit>
        <trans-unit id="4d9a6e876791ac6f810114009c11949947079c7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt; keyword</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; キーワード</target>
        </trans-unit>
        <trans-unit id="e4ba079ff031a5bee8e6a39743aec55c4c5aff36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt;, &lt;code&gt;inout&lt;/code&gt;, &lt;code&gt;shared&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;immutable&lt;/code&gt; 、 &lt;code&gt;inout&lt;/code&gt; 、 &lt;code&gt;shared&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a3bf9d93abb5e5cd019144ad24a88a584006df22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt;. When a postblit is qualified with &lt;code&gt;const&lt;/code&gt; as in &lt;code&gt;this(this) const;&lt;/code&gt; or &lt;code&gt;const this(this);&lt;/code&gt; then the postblit is succesfully called on mutable (unqualified), &lt;code&gt;const&lt;/code&gt;, and &lt;code&gt;immutable&lt;/code&gt; objects, but the postblit cannot modify the object because it regards it as &lt;code&gt;const&lt;/code&gt;; hence &lt;code&gt;const&lt;/code&gt; postblits are of limited usefulness. Example:</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 。 &lt;code&gt;this(this) const;&lt;/code&gt; ように、ポストブリットが &lt;code&gt;const&lt;/code&gt; で修飾されている場合。または &lt;code&gt;const this(this);&lt;/code&gt; 次に、postblitは変更可能な（修飾されていない）、 &lt;code&gt;const&lt;/code&gt; 、および &lt;code&gt;immutable&lt;/code&gt; オブジェクトで正常に呼び出されますが、postblitはオブジェクトを &lt;code&gt;const&lt;/code&gt; と見なすため、オブジェクトを変更できません。したがって、 &lt;code&gt;const&lt;/code&gt; postblitsの有用性は限られています。例：</target>
        </trans-unit>
        <trans-unit id="90a00751a35d1958486d3b1d0457ff55bf6d108b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt;. When a postblit is qualified with &lt;code&gt;const&lt;/code&gt; as in &lt;code&gt;this(this) const;&lt;/code&gt; or &lt;code&gt;const this(this);&lt;/code&gt; then the postblit is successfully called on mutable (unqualified), &lt;code&gt;const&lt;/code&gt;, and &lt;code&gt;immutable&lt;/code&gt; objects, but the postblit cannot modify the object because it regards it as &lt;code&gt;const&lt;/code&gt;; hence &lt;code&gt;const&lt;/code&gt; postblits are of limited usefulness. Example:</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 。postblitが &lt;code&gt;this(this) const;&lt;/code&gt; ように &lt;code&gt;const&lt;/code&gt; で修飾されている場合。または &lt;code&gt;const this(this);&lt;/code&gt; 次に、postblitは、可変（非修飾）、 &lt;code&gt;const&lt;/code&gt; 、および &lt;code&gt;immutable&lt;/code&gt; オブジェクトで正常に呼び出されますが、postblitはオブジェクトを &lt;code&gt;const&lt;/code&gt; と見なすため、オブジェクトを変更できません。したがって、 &lt;code&gt;const&lt;/code&gt; のpostblitsは、限られた有用性です。例：</target>
        </trans-unit>
        <trans-unit id="cc47342e29e943cc96416253c9cc4dfa61c2b6da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;continue&lt;/code&gt; aborts the current iteration of its enclosing loop statement, and starts the next iteration.</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; は、それを囲むループステートメントの現在の反復を中止し、次の反復を開始します。</target>
        </trans-unit>
        <trans-unit id="f55d3c51867037260ee7b3bb73eed621d681d3b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;coshisinh&lt;/code&gt; is included here for convenience and for easy migration of code that uses &lt;a href=&quot;std_math#coshisinh&quot;&gt;&lt;code&gt;std.math.coshisinh&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;coshisinh&lt;/code&gt; は、利便性と&lt;a href=&quot;std_math#coshisinh&quot;&gt; &lt;code&gt;std.math.coshisinh&lt;/code&gt; &lt;/a&gt;を使用するコードの簡単な移行のためにここに含まれています。</target>
        </trans-unit>
        <trans-unit id="d1277651af9ed4847d53f958b7b6b0f575807634" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;coshisinh&lt;/code&gt; is included here for convenience and for easy migration of code.</source>
          <target state="translated">&lt;code&gt;coshisinh&lt;/code&gt; は、便利でコードの移行を容易にするためにここに含まれています。</target>
        </trans-unit>
        <trans-unit id="8e42ad99a10dd7cd20a1b4ee231d4706ca8c339d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;countUntil(a, b)&lt;/code&gt; returns the number of steps taken in &lt;code&gt;a&lt;/code&gt; to reach &lt;code&gt;b&lt;/code&gt;; for example, &lt;code&gt;countUntil(&quot;hello!&quot;, &quot;o&quot;)&lt;/code&gt; returns &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;countUntil(a, b)&lt;/code&gt; 中取られるステップの数戻り到達するために &lt;code&gt;b&lt;/code&gt; 、たとえば、 &lt;code&gt;countUntil(&quot;hello!&quot;, &quot;o&quot;)&lt;/code&gt; は &lt;code&gt;4&lt;/code&gt; を返します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1099e0131a1be1ee68a51b72c3e4f76d8d578cc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crt_constructor&lt;/code&gt; and &lt;code&gt;crt_destructor&lt;/code&gt; were implemented in &lt;a href=&quot;https://dlang.org/changelog/2.078.0.html&quot;&gt;v2.078.0 (2018-01-01)&lt;/a&gt;. Some compilers exposed non-standard, compiler-specific mechanism before.</source>
          <target state="translated">&lt;code&gt;crt_constructor&lt;/code&gt; と &lt;code&gt;crt_destructor&lt;/code&gt; は&lt;a href=&quot;https://dlang.org/changelog/2.078.0.html&quot;&gt;v2.078.0（2018-01-01）で&lt;/a&gt;実装されました。一部のコンパイラは、以前は非標準のコンパイラ固有のメカニズムを公開していました。</target>
        </trans-unit>
        <trans-unit id="c628f95698b35b08f15cc1f377f06aeb25415331" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cumulativeFold!((a, b) =&amp;gt; a + b)([1, 2, 3, 4])&lt;/code&gt; returns a lazily-evaluated range containing the successive reduced values &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt;, &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cumulativeFold!((a, b) =&amp;gt; a + b)([1, 2, 3, 4])&lt;/code&gt; 、連続する減少値を含むレイジー、評価範囲返し &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;3&lt;/code&gt; 、 &lt;code&gt;6&lt;/code&gt; 、 &lt;code&gt;10&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b182a1591e1ea15b6088bb533ef38a0b3dfe450" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deallocate&lt;/code&gt; is also supported, which is where most implementation effort and overhead of &lt;code&gt;ScopedAllocator&lt;/code&gt; go. If &lt;code&gt;deallocate&lt;/code&gt; is not needed, a simpler design combining &lt;code&gt;AllocatorList&lt;/code&gt; with &lt;code&gt;Region&lt;/code&gt; is recommended.</source>
          <target state="translated">&lt;code&gt;deallocate&lt;/code&gt; また、オーバーヘッドのほとんどの実装作業場所である、サポートされています &lt;code&gt;ScopedAllocator&lt;/code&gt; が行きます。場合は &lt;code&gt;deallocate&lt;/code&gt; 必要とされていない、組み合わせるシンプルなデザイン &lt;code&gt;AllocatorList&lt;/code&gt; をして &lt;code&gt;Region&lt;/code&gt; お勧めします。</target>
        </trans-unit>
        <trans-unit id="c3a273cc82ac96180bffd6bc28ee735da5c11187" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deallocate&lt;/code&gt; is defined if and only if at least one of the allocators define &lt;code&gt;deallocate&lt;/code&gt;. It works as follows. If &lt;code&gt;primary.owns(b)&lt;/code&gt;, then the request is forwarded to &lt;code&gt;primary.deallocate&lt;/code&gt; if it is defined, or is a no-op otherwise. If &lt;code&gt;primary&lt;/code&gt; does not own &lt;code&gt;b&lt;/code&gt;, then the request is forwarded to &lt;code&gt;fallback.deallocate&lt;/code&gt; if it is defined, or is a no-op otherwise.</source>
          <target state="translated">&lt;code&gt;deallocate&lt;/code&gt; は、少なくとも1つのアロケータがdeallocateを定義する場合にのみ定義され &lt;code&gt;deallocate&lt;/code&gt; 。次のように動作します。 &lt;code&gt;primary.owns(b)&lt;/code&gt; の場合、要求は、定義されている場合は &lt;code&gt;primary.deallocate&lt;/code&gt; に転送され、それ以外の場合は何も行われません。 &lt;code&gt;primary&lt;/code&gt; が &lt;code&gt;b&lt;/code&gt; を所有していない場合、要求は、定義されている場合は &lt;code&gt;fallback.deallocate&lt;/code&gt; に転送され、それ以外の場合は何も行われません。</target>
        </trans-unit>
        <trans-unit id="74accc0b79c91cd3ea11df6f90b09a6dd01837e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decodeBack&lt;/code&gt; is a variant of &lt;a href=&quot;#decode&quot;&gt;&lt;code&gt;decode&lt;/code&gt;&lt;/a&gt; which specifically decodes the last code point. Unlike &lt;a href=&quot;#decode&quot;&gt;&lt;code&gt;decode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;decodeBack&lt;/code&gt; accepts any bidirectional range of code units (rather than just a string or random access range). It also takes the range by &lt;code&gt;ref&lt;/code&gt; and pops off the elements as it decodes them. If &lt;code&gt;numCodeUnits&lt;/code&gt; is passed in, it gets set to the number of code units which were in the code point which was decoded.</source>
          <target state="translated">&lt;code&gt;decodeBack&lt;/code&gt; は、最後のコードポイントを明確にデコードする、&lt;a href=&quot;#decode&quot;&gt; &lt;code&gt;decode&lt;/code&gt; の&lt;/a&gt;バリアントです。異なり&lt;a href=&quot;#decode&quot;&gt; &lt;code&gt;decode&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;decodeBack&lt;/code&gt; は、コード単位の任意の双方向範囲（というだけの文字列またはランダムアクセス範囲より）を受け付けます。また、 &lt;code&gt;ref&lt;/code&gt; によって範囲を取得し、要素をデコードするときに要素をポップします。場合 &lt;code&gt;numCodeUnits&lt;/code&gt; が渡され、それが復号されたコード・ポイントにあったコード単位の数に設定されます。</target>
        </trans-unit>
        <trans-unit id="67288590e0efb2949e43eabd6c7c73a4328806ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decodeFront&lt;/code&gt; is a variant of &lt;a href=&quot;#decode&quot;&gt;&lt;code&gt;decode&lt;/code&gt;&lt;/a&gt; which specifically decodes the first code point. Unlike &lt;a href=&quot;#decode&quot;&gt;&lt;code&gt;decode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;decodeFront&lt;/code&gt; accepts any &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of code units (rather than just a string or random access range). It also takes the range by &lt;code&gt;ref&lt;/code&gt; and pops off the elements as it decodes them. If &lt;code&gt;numCodeUnits&lt;/code&gt; is passed in, it gets set to the number of code units which were in the code point which was decoded.</source>
          <target state="translated">&lt;code&gt;decodeFront&lt;/code&gt; は、最初のコードポイントを明確にデコードする、&lt;a href=&quot;#decode&quot;&gt; &lt;code&gt;decode&lt;/code&gt; の&lt;/a&gt;バリアントです。異なり&lt;a href=&quot;#decode&quot;&gt; &lt;code&gt;decode&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;decodeFront&lt;/code&gt; は任意受け付ける&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;（というだけの文字列またはランダムアクセス範囲より）コード単位を。また、 &lt;code&gt;ref&lt;/code&gt; によって範囲を取得し、要素をデコードするときに要素をポップします。場合 &lt;code&gt;numCodeUnits&lt;/code&gt; が渡され、それが復号されたコード・ポイントにあったコード単位の数に設定されます。</target>
        </trans-unit>
        <trans-unit id="a8839f0e531d17486dee499042f1d0072c16f817" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delimiter&lt;/code&gt;, then it is returned unchanged.</source>
          <target state="translated">&lt;code&gt;delimiter&lt;/code&gt; の場合、変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="c3ad863d355559bfb72ddf6d9a50a94c65161a75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deprecate&lt;/code&gt; This functions just like &lt;code&gt;abort&lt;/code&gt;, but upon cycle detection the runtime will use a flawed pre-2.072 algorithm to determine if the cycle was previously detected. If no cycles are detected in the old algorithm, execution continues, but a deprecation message is printed.</source>
          <target state="translated">&lt;code&gt;deprecate&lt;/code&gt; これは &lt;code&gt;abort&lt;/code&gt; と同じように機能しますが、サイクルが検出されると、ランタイムは欠陥のある2.072以前のアルゴリズムを使用して、サイクルが以前に検出されたかどうかを判断します。古いアルゴリズムでサイクルが検出されない場合、実行は続行されますが、非推奨メッセージが出力されます。</target>
        </trans-unit>
        <trans-unit id="1f9c21e1d57414719507e47fdb63481c3d746122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deprecate&lt;/code&gt; This works just like &lt;code&gt;abort&lt;/code&gt;, but upon cycle detection the runtime will use a flawed pre-2.072 algorithm to determine if the cycle was previously detected. If no cycles are detected in the old algorithm, execution continues, but a deprecation message is printed.</source>
          <target state="translated">&lt;code&gt;deprecate&lt;/code&gt; これは &lt;code&gt;abort&lt;/code&gt; と同じように機能しますが、サイクルが検出されると、ランタイムは欠陥のある2.072より前のアルゴリズムを使用して、サイクルが以前に検出されたかどうかを判断します。古いアルゴリズムでサイクルが検出されない場合、実行は続行されますが、非推奨メッセージが出力されます。</target>
        </trans-unit>
        <trans-unit id="d18f1ba74723b3d893b7f7c2730705de22bb0d19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deprecated&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;deprecated&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="6805fd5312efcc0ca879f765f2e0c19218cf93e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dg&lt;/code&gt; - custom delegate that return a string and is only called if an exception occurred</source>
          <target state="translated">&lt;code&gt;dg&lt;/code&gt; -文字列を返し、例外が発生した場合にのみ呼び出されるカスタムデリゲート</target>
        </trans-unit>
        <trans-unit id="3f6badc39b215958c8978f7765441eb5e2a2f607" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;double.init&lt;/code&gt; if &lt;code&gt;lhs == WitnNaN.defaultValue!Lhs&lt;/code&gt;, &lt;code&gt;-1.0&lt;/code&gt; if &lt;code&gt; lhs &amp;lt; rhs&lt;/code&gt;, &lt;code&gt;0.0&lt;/code&gt; if &lt;code&gt;lhs == rhs&lt;/code&gt;, &lt;code&gt;1.0&lt;/code&gt; if &lt;code&gt;lhs &amp;gt; rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;double.init&lt;/code&gt; if &lt;code&gt;lhs == WitnNaN.defaultValue!Lhs&lt;/code&gt; 、 &lt;code&gt;-1.0&lt;/code&gt; if &lt;code&gt; lhs &amp;lt; rhs&lt;/code&gt; 、 &lt;code&gt;0.0&lt;/code&gt; if &lt;code&gt;lhs == rhs&lt;/code&gt; 、 &lt;code&gt;1.0&lt;/code&gt; if &lt;code&gt;lhs &amp;gt; rhs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6287d5a0a715e9fe34f9a5e926b06c464979322" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;download(&quot;ftp.digitalmars.com/sieve.ds&quot;, &quot;/tmp/downloaded-ftp-file&quot;)&lt;/code&gt; downloads file from URL to file system.</source>
          <target state="translated">&lt;code&gt;download(&quot;ftp.digitalmars.com/sieve.ds&quot;, &quot;/tmp/downloaded-ftp-file&quot;)&lt;/code&gt; 、URLからファイルシステムにファイルをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="ae45f410eafadc75e7784e0049dfaa9348862102" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drop&lt;/code&gt; and &lt;code&gt;dropBack&lt;/code&gt; will only pop</source>
          <target state="translated">&lt;code&gt;drop&lt;/code&gt; とドロップ &lt;code&gt;dropBack&lt;/code&gt; はポップするだけです</target>
        </trans-unit>
        <trans-unit id="92678e10b01739e363a145cad7231efe25dc368f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dropBack&lt;/code&gt; provides the same functionality but instead calls &lt;a href=&quot;std_range_primitives#popBackN&quot;&gt;&lt;code&gt;std.range.primitives.popBackN&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(range, n)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;dropBack&lt;/code&gt; は同じ機能を提供しますが、代わりに&lt;a href=&quot;std_range_primitives#popBackN&quot;&gt; &lt;code&gt;std.range.primitives.popBackN&lt;/code&gt; &lt;/a&gt; &lt;code&gt;(range, n)&lt;/code&gt; 呼び出します</target>
        </trans-unit>
        <trans-unit id="b3dfad69b0fc743d45dfe5be856a302f4f3b612f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dropBackOne&lt;/code&gt; provides the same functionality but instead calls &lt;code&gt;range.popBack()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dropBackOne&lt;/code&gt; は同じ機能を提供しますが、代わりに &lt;code&gt;range.popBack()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3cad355e345c645ef7c2bc148a0241cff87d3380" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dur!&quot;msecs&quot;(5)&lt;/code&gt; or &lt;code&gt;5.msecs()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;dur!&quot;msecs&quot;(5)&lt;/code&gt; または &lt;code&gt;5.msecs()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c772ef4b91d8eb5af7e6be3a8a3eaa78551b8465" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;duration.&lt;/code&gt;&lt;a href=&quot;std_conv#to&quot;&gt;&lt;code&gt;to&lt;/code&gt;&lt;/a&gt;&lt;code&gt;!TickDuration()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;duration.&lt;/code&gt;&lt;a href=&quot;std_conv#to&quot;&gt;&lt;code&gt;to&lt;/code&gt;&lt;/a&gt;&lt;code&gt;!TickDuration()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d36e7aa6c21b2266b972c062e2002da654f12f35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e.sizeof&lt;/code&gt; gives the size in bytes of the expression &lt;code&gt;e&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;e.sizeof&lt;/code&gt; は、式 &lt;code&gt;e&lt;/code&gt; のサイズをバイト単位で示します。</target>
        </trans-unit>
        <trans-unit id="1ddf110e0236e48f69127ea061fd64414c28dbfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt; is an lvalue, and keep it as an lvalue since it is an argument to a &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;out&lt;/code&gt; parameter, or the operand of &lt;code&gt;&amp;amp;&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; は左辺値であり、 &lt;code&gt;ref&lt;/code&gt; または &lt;code&gt;out&lt;/code&gt; パラメータへの引数、または &lt;code&gt;&amp;amp;&lt;/code&gt; 演算子のオペランドであるため、左辺値として保持します。</target>
        </trans-unit>
        <trans-unit id="63a03c99efc9c30d70d73137984321acf547459a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt; must be semantically valid expression. In other words, it should not contain any &lt;code&gt;ErrorExp&lt;/code&gt;s in it. But, CTFE interpretation will cross over functions and may invoke a function that contains &lt;code&gt;ErrorStatement&lt;/code&gt; in its body. If that, the &quot;CTFE failed because of previous errors&quot; error is raised.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; は意味的に有効な式でなければなりません。つまり、その中に &lt;code&gt;ErrorExp&lt;/code&gt; が含まれていてはいけません。ただし、CTFE解釈は関数をクロスオーバーし、本体に &lt;code&gt;ErrorStatement&lt;/code&gt; を含む関数を呼び出す場合があります。その場合、「以前のエラーのためにCTFEが失敗しました」というエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="ea2dad0d2c560452981a079bdac2e97b675022d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;each!writeln([1, 2, 3])&lt;/code&gt; eagerly prints the numbers &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; on their own lines.</source>
          <target state="translated">&lt;code&gt;each!writeln([1, 2, 3])&lt;/code&gt; 熱心番号印刷 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;2&lt;/code&gt; 及び &lt;code&gt;3&lt;/code&gt; は、独自の行に。</target>
        </trans-unit>
        <trans-unit id="53d24af0626c7733c499592c9ff5e9fdd21ecce3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;each&lt;/code&gt; also supports &lt;code&gt;opApply&lt;/code&gt;-based types, so it works with e.g. &lt;a href=&quot;std_parallelism#parallel&quot;&gt;&lt;code&gt;std.parallelism.parallel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;each&lt;/code&gt; が &lt;code&gt;opApply&lt;/code&gt; ベースの型もサポートしているため、たとえば&lt;a href=&quot;std_parallelism#parallel&quot;&gt; &lt;code&gt;std.parallelism.parallel&lt;/code&gt; &lt;/a&gt;で動作します。</target>
        </trans-unit>
        <trans-unit id="931465da1e8dfbf1b466d2cd0faeeaffaad9464a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;each&lt;/code&gt; works with iterable objects which provide an index variable, along with each element</source>
          <target state="translated">&lt;code&gt;each&lt;/code&gt; 、各要素とともに、インデックス変数を提供する反復可能なオブジェクトで動作します</target>
        </trans-unit>
        <trans-unit id="d01f390bdbeb84b4919e65d81c8a05dd73291482" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;empty&lt;/code&gt; is defined if both allocators also define it.</source>
          <target state="translated">&lt;code&gt;empty&lt;/code&gt; は、両方のアロケーターも定義する場合に定義されます。</target>
        </trans-unit>
        <trans-unit id="04ffa2fab19caa7316bc21ce23c836375fc7e74f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endsWith(&quot;rocks&quot;, &quot;ks&quot;)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;endsWith(&quot;rocks&quot;, &quot;ks&quot;)&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="039258fd2a7b4225b13e358a4b74a589a22f1909" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enforce&lt;/code&gt; is used to throw exceptions and is therefore intended to aid in error handling. It is</source>
          <target state="translated">&lt;code&gt;enforce&lt;/code&gt; は例外をスローするために使用されるため、エラー処理を支援することを目的としています。です</target>
        </trans-unit>
        <trans-unit id="8fafbf8d3403f46d7862dbd4e094c44bc49345fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enum&lt;/code&gt;s are formatted like their base value</source>
          <target state="translated">&lt;code&gt;enum&lt;/code&gt; はベース値のようにフォーマットされます</target>
        </trans-unit>
        <trans-unit id="32d81ab5c5f77a48742ebf127f581f59d3e8d4ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etc.c.odbc.sql&lt;/code&gt; is the the main include for ODBC v3.0+ Core functions, corresponding to the &lt;code&gt;sql.h&lt;/code&gt; C header file. It &lt;code&gt;import&lt;/code&gt;s &lt;code&gt;public&lt;/code&gt;ly &lt;code&gt;etc.c.odbc.sqltypes&lt;/code&gt; for conformity with the C header.</source>
          <target state="translated">&lt;code&gt;etc.c.odbc.sql&lt;/code&gt; は、 &lt;code&gt;sql.h&lt;/code&gt; Cヘッダーファイルに対応する、ODBC v3.0 +コア関数のメインインクルードです。それ &lt;code&gt;import&lt;/code&gt; S &lt;code&gt;public&lt;/code&gt; LY &lt;code&gt;etc.c.odbc.sqltypes&lt;/code&gt; Cヘッダに準拠するため。</target>
        </trans-unit>
        <trans-unit id="493dd95c88ebdea7f9d7904c3fee52bfa826a845" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etc.c.odbc.sqlext.d&lt;/code&gt; corresponds to the &lt;code&gt;sqlext.h&lt;/code&gt; C header file.</source>
          <target state="translated">&lt;code&gt;etc.c.odbc.sqlext.d&lt;/code&gt; は、 &lt;code&gt;sqlext.h&lt;/code&gt; Cヘッダーファイルに対応します。</target>
        </trans-unit>
        <trans-unit id="486a71d42d523c21eb5f4c5e3cefa083fc33dd21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etc.c.odbc.sqlext&lt;/code&gt; corresponds to the &lt;code&gt;sqlext.h&lt;/code&gt; C header file.</source>
          <target state="translated">&lt;code&gt;etc.c.odbc.sqlext&lt;/code&gt; は、 &lt;code&gt;sqlext.h&lt;/code&gt; Cヘッダーファイルに対応します。</target>
        </trans-unit>
        <trans-unit id="91b33b7c7cdf5a354414e128e0689849615d7b78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etc.c.odbc.sqlucode&lt;/code&gt; corresponds to the &lt;code&gt;sqlucode.h&lt;/code&gt; C include file.</source>
          <target state="translated">&lt;code&gt;etc.c.odbc.sqlucode&lt;/code&gt; は、 &lt;code&gt;sqlucode.h&lt;/code&gt; Cインクルードファイルに対応します。</target>
        </trans-unit>
        <trans-unit id="454779ffb1ce2972a948b6bf53de77b10d82170e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ethis2&lt;/code&gt; if successful, null otherwise</source>
          <target state="translated">&lt;code&gt;ethis2&lt;/code&gt; 成功した場合はethis2、それ以外の場合はnull</target>
        </trans-unit>
        <trans-unit id="8e284d610007241b05a4495262aca884af842da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ex&lt;/code&gt; - custom exception to be thrown. It is &lt;code&gt;lazy&lt;/code&gt; and is only created if an exception occurred</source>
          <target state="translated">&lt;code&gt;ex&lt;/code&gt; -スローされるカスタム例外。それは &lt;code&gt;lazy&lt;/code&gt; と例外が発生した場合にのみ作成されます</target>
        </trans-unit>
        <trans-unit id="9005151b0602951785e8ba2fbc90642894270124" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;executeShell&lt;/code&gt; start a new process using &lt;a href=&quot;#spawnProcess&quot;&gt;&lt;code&gt;spawnProcess&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#spawnShell&quot;&gt;&lt;code&gt;spawnShell&lt;/code&gt;&lt;/a&gt;, respectively, and wait for the process to complete before returning. The functions capture what the child process prints to both its standard output and standard error streams, and return this together with its exit code.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; および &lt;code&gt;executeShell&lt;/code&gt; は、それぞれ&lt;a href=&quot;#spawnProcess&quot;&gt; &lt;code&gt;spawnProcess&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#spawnShell&quot;&gt; &lt;code&gt;spawnShell&lt;/code&gt; &lt;/a&gt;を使用して新しいプロセスを開始し、プロセスが完了するのを待ってから戻ります。関数は、子プロセスが標準出力と標準エラーストリームの両方に出力するものをキャプチャし、これを終了コードと一緒に返します。</target>
        </trans-unit>
        <trans-unit id="25a408e63ee5fdc008f0667d1e3f2484f161de72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expand&lt;/code&gt; is defined if and only if at least one of the allocators defines &lt;code&gt;expand&lt;/code&gt;. It works as follows. If &lt;code&gt;primary.owns(b)&lt;/code&gt;, then the request is forwarded to &lt;code&gt;primary.expand&lt;/code&gt; if it is defined, or fails (returning &lt;code&gt;false&lt;/code&gt;) otherwise. If &lt;code&gt;primary&lt;/code&gt; does not own &lt;code&gt;b&lt;/code&gt;, then the request is forwarded to &lt;code&gt;fallback.expand&lt;/code&gt; if it is defined, or fails (returning &lt;code&gt;false&lt;/code&gt;) otherwise.</source>
          <target state="translated">&lt;code&gt;expand&lt;/code&gt; 定義されている場合と定義はアロケータの場合にのみ少なくとも一つの &lt;code&gt;expand&lt;/code&gt; 。次のように動作します。 &lt;code&gt;primary.owns(b)&lt;/code&gt; の場合、要求は、それが定義されている場合は &lt;code&gt;primary.expand&lt;/code&gt; に転送され、そうでない場合は失敗（ &lt;code&gt;false&lt;/code&gt; を返す）されます。 &lt;code&gt;primary&lt;/code&gt; が &lt;code&gt;b&lt;/code&gt; を所有していない場合、要求は、定義されている場合は &lt;code&gt;fallback.expand&lt;/code&gt; に転送され、そうでない場合は失敗（ &lt;code&gt;false&lt;/code&gt; を返す）されます。</target>
        </trans-unit>
        <trans-unit id="a03fad7c1bd9e067282b6a7ecbfb7d33e094a76a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expand&lt;/code&gt; is defined to forward to &lt;code&gt;ParentAllocator.expand&lt;/code&gt; (it must be also &lt;code&gt;shared&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;expand&lt;/code&gt; は、 &lt;code&gt;ParentAllocator.expand&lt;/code&gt; に転送するように定義されています（ &lt;code&gt;shared&lt;/code&gt; する必要もあります）。</target>
        </trans-unit>
        <trans-unit id="47816e4a2ec9a59899e059a111251af1df09db1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expi&lt;/code&gt; is included here for convenience and for easy migration of code that uses &lt;a href=&quot;std_math#expi&quot;&gt;&lt;code&gt;std.math.expi&lt;/code&gt;&lt;/a&gt;. Unlike &lt;a href=&quot;std_math#expi&quot;&gt;&lt;code&gt;std.math.expi&lt;/code&gt;&lt;/a&gt;, which uses the x87</source>
          <target state="translated">&lt;code&gt;expi&lt;/code&gt; は、&lt;a href=&quot;std_math#expi&quot;&gt; &lt;code&gt;std.math.expi&lt;/code&gt; &lt;/a&gt;を使用するコードを簡単に移行できるように含まれています。x87を使用する&lt;a href=&quot;std_math#expi&quot;&gt; &lt;code&gt;std.math.expi&lt;/code&gt; &lt;/a&gt;とは異なり</target>
        </trans-unit>
        <trans-unit id="0376c72df3e8c7973981ff4a9f918671f6c51160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expi&lt;/code&gt; is included here for convenience and for easy migration of code.</source>
          <target state="translated">&lt;code&gt;expi&lt;/code&gt; は、利便性とコードの簡単な移行のためにここに含まれています。</target>
        </trans-unit>
        <trans-unit id="a666fac0e544127bb5b87071b0c4108b7442235d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;export&lt;/code&gt; means that any code outside the executable can access the member. &lt;code&gt;export&lt;/code&gt; is analogous to exporting definitions from a DLL.</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; は、実行可能ファイルの外部のすべてのコードがメンバーにアクセスできることを意味します。 &lt;code&gt;export&lt;/code&gt; は、DLLから定義をエクスポートすることに似ています。</target>
        </trans-unit>
        <trans-unit id="33ba0fa9a8ac23d86d958946a9de87c65b515928" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extern (C++)&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;extern (C++)&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="ca577828af2e02c109ac54927bd1b37db6478559" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extern (C++)&lt;/code&gt; interface</source>
          <target state="translated">&lt;code&gt;extern (C++)&lt;/code&gt; インターフェース</target>
        </trans-unit>
        <trans-unit id="574b3c7b37c3e1a7f05898210e2609d55a7c9966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extern (C++)&lt;/code&gt; struct</source>
          <target state="translated">&lt;code&gt;extern (C++)&lt;/code&gt; 構造体</target>
        </trans-unit>
        <trans-unit id="305317a6dc1998948f72a8a8641a7ab92acd7d65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extern (C++)&lt;/code&gt; structs do not support virtual functions but can be used to map C++ value types.</source>
          <target state="translated">&lt;code&gt;extern (C++)&lt;/code&gt; 構造体は仮想関数をサポートしていませんが、C ++値型をマップするために使用できます。</target>
        </trans-unit>
        <trans-unit id="4a7ada48bd1641fc57878ac99f8bcffbe1293181" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extern(C++, class)&lt;/code&gt; and &lt;code&gt;extern(C++, struct)&lt;/code&gt; can be combined with C++ namespaces:</source>
          <target state="translated">&lt;code&gt;extern(C++, class)&lt;/code&gt; および &lt;code&gt;extern(C++, struct)&lt;/code&gt; は、C ++名前空間と組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="d25d14d0478f1342bfec27af6b28e317ef69344e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;far ptr&lt;/code&gt; is not relevant for flat model code.</source>
          <target state="translated">&lt;code&gt;far ptr&lt;/code&gt; はフラットモデルコードには関係ありません。</target>
        </trans-unit>
        <trans-unit id="110d7c73996e6e69d6712009dfbc60270710cca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; may not end with a space (&lt;code&gt;' '&lt;/code&gt;) or a period (&lt;code&gt;'.'&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; 末尾にスペース（ &lt;code&gt;' '&lt;/code&gt; ）またはピリオド（ &lt;code&gt;'.'&lt;/code&gt; ）を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="d6462d8d6673fc8802f5508b14756158d5b1d44d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; must not contain any characters whose integer representation is in the range 0-31.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; には、整数表現が0〜31の範囲の文字を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="4bc53882af8209667748fb8ea2bac1b8f7a1d6a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; must not contain any of the following</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; には次のいずれも含めないでください</target>
        </trans-unit>
        <trans-unit id="3e6b6d43bf7966ade005e73afc8d7220b233e99c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter!(a =&amp;gt; a &amp;gt; 0)([1, -1, 2, 0, -3])&lt;/code&gt; iterates over elements &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filter!(a =&amp;gt; a &amp;gt; 0)([1, -1, 2, 0, -3])&lt;/code&gt; -1、2、0 、-3]）は、要素 &lt;code&gt;1&lt;/code&gt; および &lt;code&gt;2&lt;/code&gt; を反復します。</target>
        </trans-unit>
        <trans-unit id="d65e8f52696c79f08f41c7e99ceb95631c8309a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter!(predicate)(range)&lt;/code&gt; returns a new range containing only elements &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;range&lt;/code&gt; for which &lt;code&gt;predicate(x)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filter!(predicate)(range)&lt;/code&gt; のみの要素を含む新しい範囲を返す &lt;code&gt;x&lt;/code&gt; は中 &lt;code&gt;range&lt;/code&gt; いる &lt;code&gt;predicate(x)&lt;/code&gt; 返す &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59d9557c846c7dfb5f62fc519414fe5786287fd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find(&quot;hello world&quot;, &quot;or&quot;)&lt;/code&gt; returns &lt;code&gt;&quot;orld&quot;&lt;/code&gt; using linear search. (For binary search refer to &lt;a href=&quot;std_range#SortedRange&quot;&gt;&lt;code&gt;std.range.SortedRange&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;find(&quot;hello world&quot;, &quot;or&quot;)&lt;/code&gt; は、線形検索を使用して &lt;code&gt;&quot;orld&quot;&lt;/code&gt; を返します。（バイナリ検索については、&lt;a href=&quot;std_range#SortedRange&quot;&gt; &lt;code&gt;std.range.SortedRange&lt;/code&gt; を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="463012de765d32105b8129513c2f76e386958d86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find(&quot;hello world&quot;, boyerMooreFinder(&quot;or&quot;))&lt;/code&gt; returns &lt;code&gt;&quot;orld&quot;&lt;/code&gt; using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm&quot;&gt; Boyer-Moore algorithm&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;find(&quot;hello world&quot;, boyerMooreFinder(&quot;or&quot;))&lt;/code&gt; は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm&quot;&gt;Boyer-Mooreアルゴリズム&lt;/a&gt;を使用して &lt;code&gt;&quot;orld&quot;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="aceb824dc701623af00fdfc39b0050aa1cc5ca45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&lt;/code&gt; behaves similar to &lt;code&gt;dropWhile&lt;/code&gt; in other languages.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; は、他の言語では &lt;code&gt;dropWhile&lt;/code&gt; と同様に動作します。</target>
        </trans-unit>
        <trans-unit id="5b74ba9237918431c22bb8a7b4f43c4a503d1135" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&lt;/code&gt; performs &amp;Omicron;(&lt;code&gt;walkLength(haystack)&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;. There are specializations that improve performance by taking advantage of &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;bidirectional&lt;/a&gt; or &lt;a href=&quot;std_range_primitives#isRandomAccess&quot;&gt;random access&lt;/a&gt; ranges (where possible).</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; は、 &lt;code&gt;pred&lt;/code&gt; の &amp;Omicron;（ &lt;code&gt;walkLength(haystack)&lt;/code&gt; （haystack））評価を実行します。&lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;双方向&lt;/a&gt;または&lt;a href=&quot;std_range_primitives#isRandomAccess&quot;&gt;ランダムアクセス&lt;/a&gt;範囲（可能な場合）を利用してパフォーマンスを向上させる特殊化があります。</target>
        </trans-unit>
        <trans-unit id="3a741cc4590b1272b88f9debbbf9dcbe5bc2eb5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findAdjacent([1, 2, 3, 3, 4])&lt;/code&gt; returns the subrange starting with two equal adjacent elements, i.e. &lt;code&gt;[3, 3, 4]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;findAdjacent([1, 2, 3, 3, 4])&lt;/code&gt; は、2つの等しい隣接する要素で始まる部分範囲、つまり &lt;code&gt;[3, 3, 4]&lt;/code&gt; 3、3、4]を返します。</target>
        </trans-unit>
        <trans-unit id="4954a80a8d1e2b0bd00aa0e1771015ac0a0a59b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findAmong(&quot;abcd&quot;, &quot;qcx&quot;)&lt;/code&gt; returns &lt;code&gt;&quot;cd&quot;&lt;/code&gt; because &lt;code&gt;'c'&lt;/code&gt; is among &lt;code&gt;&quot;qcx&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;findAmong(&quot;abcd&quot;, &quot;qcx&quot;)&lt;/code&gt; は、 &lt;code&gt;'c'&lt;/code&gt; が &lt;code&gt;&quot;qcx&quot;&lt;/code&gt; の中にあるため、 &lt;code&gt;&quot;cd&quot;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="16451c18369e0d82460ebf3cbe0f6d69e643b0d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findSplit(&quot;abcdefg&quot;, &quot;de&quot;)&lt;/code&gt; returns the three ranges &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, &lt;code&gt;&quot;de&quot;&lt;/code&gt;, and &lt;code&gt;&quot;fg&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;findSplit(&quot;abcdefg&quot;, &quot;de&quot;)&lt;/code&gt; は、3つの範囲 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;de&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;fg&quot;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="25c36cb151505618abe7889bcca004fa70004ac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findSplit&lt;/code&gt; returns a tuple &lt;code&gt;result&lt;/code&gt; containing</source>
          <target state="translated">&lt;code&gt;findSplit&lt;/code&gt; は以下を含むタプルの &lt;code&gt;result&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="dea2a901faeede8850674e82df6d24827cef5045" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findSplitAfter(&quot;abcdefg&quot;, &quot;de&quot;)&lt;/code&gt; returns the two ranges &lt;code&gt;&quot;abcde&quot;&lt;/code&gt; and &lt;code&gt;&quot;fg&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;findSplitAfter(&quot;abcdefg&quot;, &quot;de&quot;)&lt;/code&gt; は、2つの範囲 &lt;code&gt;&quot;abcde&quot;&lt;/code&gt; と &lt;code&gt;&quot;fg&quot;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7a5a332327a9e6ea3836154ccab37e65fe922147" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findSplitAfter&lt;/code&gt; returns a tuple &lt;code&gt;result&lt;/code&gt; containing two ranges. &lt;code&gt;result[0]&lt;/code&gt; is the portion of &lt;code&gt;haystack&lt;/code&gt; up to and including the match, and &lt;code&gt;result[1]&lt;/code&gt; is the balance of &lt;code&gt;haystack&lt;/code&gt; starting after the match. If &lt;code&gt;needle&lt;/code&gt; was not found, &lt;code&gt;result[0]&lt;/code&gt; is empty and &lt;code&gt;result[1]&lt;/code&gt; is &lt;code&gt;haystack&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;findSplitAfter&lt;/code&gt; は、2つの範囲を含むタプルの &lt;code&gt;result&lt;/code&gt; を返します。 &lt;code&gt;result[0]&lt;/code&gt; は、マッチまでの &lt;code&gt;haystack&lt;/code&gt; の部分です。result &lt;code&gt;result[1]&lt;/code&gt; は、マッチの後に始まる &lt;code&gt;haystack&lt;/code&gt; のバランスです。 &lt;code&gt;needle&lt;/code&gt; が見つからなかった場合、 &lt;code&gt;result[0]&lt;/code&gt; は空で、 &lt;code&gt;result[1]&lt;/code&gt; は &lt;code&gt;haystack&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dbd528c44f7da153b86040e16bf3eb34ac8884af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findSplitBefore(&quot;abcdefg&quot;, &quot;de&quot;)&lt;/code&gt; returns the two ranges &lt;code&gt;&quot;abc&quot;&lt;/code&gt; and &lt;code&gt;&quot;defg&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;findSplitBefore(&quot;abcdefg&quot;, &quot;de&quot;)&lt;/code&gt; は、2つの範囲 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; と &lt;code&gt;&quot;defg&quot;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8aa1b48a6404736eb0e5593fc1439a4e0704881d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findSplitBefore&lt;/code&gt; returns a tuple &lt;code&gt;result&lt;/code&gt; containing two ranges. &lt;code&gt;result[0]&lt;/code&gt; is the portion of &lt;code&gt;haystack&lt;/code&gt; before &lt;code&gt;needle&lt;/code&gt;, and &lt;code&gt;result[1]&lt;/code&gt; is the balance of &lt;code&gt;haystack&lt;/code&gt; starting with the match. If &lt;code&gt;needle&lt;/code&gt; was not found, &lt;code&gt;result[0]&lt;/code&gt; comprehends &lt;code&gt;haystack&lt;/code&gt; entirely and &lt;code&gt;result[1]&lt;/code&gt; is empty.</source>
          <target state="translated">&lt;code&gt;findSplitBefore&lt;/code&gt; はタプルを返します &lt;code&gt;result&lt;/code&gt; 2つの範囲を含む結果を。 &lt;code&gt;result[0]&lt;/code&gt; の部分であり、 &lt;code&gt;haystack&lt;/code&gt; 前 &lt;code&gt;needle&lt;/code&gt; 、および &lt;code&gt;result[1]&lt;/code&gt; のバランスである &lt;code&gt;haystack&lt;/code&gt; 一致始まります。 &lt;code&gt;needle&lt;/code&gt; が見つからなかった場合、 &lt;code&gt;result[0]&lt;/code&gt; &lt;code&gt;haystack&lt;/code&gt; を完全に理解し、 &lt;code&gt;result[1]&lt;/code&gt; は空です。</target>
        </trans-unit>
        <trans-unit id="2a17297b469e0d45acc481afe01915097c421c8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold!((a, b) =&amp;gt; a + b)([1, 2, 3, 4])&lt;/code&gt; returns &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fold!((a, b) =&amp;gt; a + b)([1, 2, 3, 4])&lt;/code&gt; は &lt;code&gt;10&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="348e97cd2ed7107060d1b3285fa4dbc81dd2cffb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold&lt;/code&gt; is functionally equivalent to &lt;a href=&quot;#reduce&quot;&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt; except the range parameter comes first and there is no need to use &lt;a href=&quot;std_typecons#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt; for multiple seeds.</source>
          <target state="translated">&lt;code&gt;fold&lt;/code&gt; は機能的には&lt;a href=&quot;#reduce&quot;&gt; &lt;code&gt;reduce&lt;/code&gt; &lt;/a&gt;と同等ですが、範囲パラメーターが最初に来て、複数のシードに&lt;a href=&quot;std_typecons#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;を使用する必要がありません。</target>
        </trans-unit>
        <trans-unit id="1c5d9f4eccff4639d1f58c3663f02fcb0724c0e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreach&lt;/code&gt; iteration uses opApply, since one delegate call per loop iteration is faster than three virtual function calls.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; 反復はopApplyを使用します。これは、ループ反復ごとの1つのデリゲート呼び出しが3つの仮想関数呼び出しよりも高速であるためです。</target>
        </trans-unit>
        <trans-unit id="110a86b489c1c1a0ba5523c061f671f89d25d3ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forwardMsg&lt;/code&gt; will ensure proper synchronization and then call &lt;code&gt;writeLogMsg&lt;/code&gt;. This is an API for implementing your own loggers and should not be called by normal user code. A notable difference from other logging functions is that the &lt;code&gt;globalLogLevel&lt;/code&gt; wont be evaluated again since it is assumed that the caller already checked that.</source>
          <target state="translated">&lt;code&gt;forwardMsg&lt;/code&gt; は適切な同期を確保してから、 &lt;code&gt;writeLogMsg&lt;/code&gt; を呼び出します。これは、独自のロガーを実装するためのAPIであり、通常のユーザーコードから呼び出すことはできません。他のロギング関数との顕著な違いは、呼び出し元がすでにチェックしていると想定されているため、 &lt;code&gt;globalLogLevel&lt;/code&gt; が再度評価されないことです。</target>
        </trans-unit>
        <trans-unit id="d65fa22650a0b8a3eb196a6250ab4fff48eaa821" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from&lt;/code&gt; reinterpreted as &lt;code&gt;TTo[]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; ように再解釈 &lt;code&gt;TTo[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0a306783b5406bdc03554e654b13fe88160475b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fun(t.get).nullable&lt;/code&gt; if &lt;code&gt;!t.isNull&lt;/code&gt;, else &lt;code&gt;Nullable.init&lt;/code&gt;.  See also: &lt;a href=&quot;https://en.wikipedia.org/wiki/Monad_(functional_programming)#The_Maybe_monad&quot;&gt;The &lt;code&gt;Maybe&lt;/code&gt; monad&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;fun(t.get).nullable&lt;/code&gt; &lt;code&gt;!t.isNull&lt;/code&gt; t.isNullの場合、それ以外は &lt;code&gt;Nullable.init&lt;/code&gt; 。参照してください：&lt;a href=&quot;https://en.wikipedia.org/wiki/Monad_(functional_programming)#The_Maybe_monad&quot;&gt; &lt;code&gt;Maybe&lt;/code&gt; &lt;/a&gt;モナドを</target>
        </trans-unit>
        <trans-unit id="a038dd88a5733c8b2a2fa8c9ddcfa7967abb774f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fun&lt;/code&gt; must be @safe or @trusted.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; は@safeまたは@trustedでなければなりません。</target>
        </trans-unit>
        <trans-unit id="9b954ea7606d866416b11b50a60545717b5a9a21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fun&lt;/code&gt; must not return by reference.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; は参照によって返ってはなりません。</target>
        </trans-unit>
        <trans-unit id="47805b817580eb31fc0ac75d4b6cb18c9ae0d5b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;func&lt;/code&gt; takes a template parameter &lt;code&gt;T&lt;/code&gt; and a runtime parameter, &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;T&lt;/code&gt; is a placeholder identifier that can accept any type. In this case &lt;code&gt;T&lt;/code&gt; can be inferred from the runtime argument type.</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; は、テンプレートパラメータ &lt;code&gt;T&lt;/code&gt; とランタイムパラメータ &lt;code&gt;x&lt;/code&gt; を受け取ります。 &lt;code&gt;T&lt;/code&gt; は、任意のタイプを受け入れることができるプレースホルダーIDです。この場合、 &lt;code&gt;T&lt;/code&gt; はランタイム引数の型から推測できます。</target>
        </trans-unit>
        <trans-unit id="a5a1dd63a3ea288980aa5f1118ceb9e3611d769f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gapWeightedSimilarity&lt;/code&gt; is useful wherever a smooth similarity measure between sequences allowing for approximate matches is needed. The examples above are given with words, but any sequences with elements comparable for equality are allowed, e.g. characters or numbers. &lt;code&gt;gapWeightedSimilarity&lt;/code&gt; uses a highly optimized dynamic programming implementation that needs &lt;code&gt;16 * min(s.length, t.length)&lt;/code&gt; extra bytes of memory and &amp;Omicron;(&lt;code&gt;s.length * t.length&lt;/code&gt;) time to complete.</source>
          <target state="translated">&lt;code&gt;gapWeightedSimilarity&lt;/code&gt; は、近似一致を可能にするシーケンス間の滑らかな類似性測定が必要な場合に便利です。上記の例では単語を使用していますが、文字や数字など、同等の要素を含むシーケンスを使用できます。 &lt;code&gt;gapWeightedSimilarity&lt;/code&gt; は、高度に最適化された動的プログラミング実装を使用します。この実装には、 &lt;code&gt;16 * min(s.length, t.length)&lt;/code&gt; 追加バイトのメモリと&amp;Omicron;（ &lt;code&gt;s.length * t.length&lt;/code&gt; ）の時間が必要です。</target>
        </trans-unit>
        <trans-unit id="3959a0b351f7ec8406be31ce94953a1866110474" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get(&quot;dlang.org&quot;)&lt;/code&gt; returns a char[] containing the dlang.org web page.</source>
          <target state="translated">&lt;code&gt;get(&quot;dlang.org&quot;)&lt;/code&gt; は、dlang.org Webページを含むchar []を返します。</target>
        </trans-unit>
        <trans-unit id="5e9e6f3319f03a2f023ac7b33c656ba598442179" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;goto&lt;/code&gt; transfers to the statement labeled with</source>
          <target state="translated">&lt;code&gt;goto&lt;/code&gt; は、ラベルが付いたステートメントに転送します</target>
        </trans-unit>
        <trans-unit id="efdd57ae0124db505495be1ff22bae5b4ccb4fad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;group([5, 2, 2, 3, 3])&lt;/code&gt; returns a range containing the tuples &lt;code&gt;tuple(5, 1)&lt;/code&gt;, &lt;code&gt;tuple(2, 2)&lt;/code&gt;, and &lt;code&gt;tuple(3, 2)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;group([5, 2, 2, 3, 3])&lt;/code&gt; 5、2、2、3、3 ]）は、タプル &lt;code&gt;tuple(5, 1)&lt;/code&gt; 5、1 ）、 &lt;code&gt;tuple(2, 2)&lt;/code&gt; 、および &lt;code&gt;tuple(3, 2)&lt;/code&gt; ）を含む範囲を返します。</target>
        </trans-unit>
        <trans-unit id="06dafad0eef61a654d008ef7ea92cffe8261aeee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;haystack&lt;/code&gt; advanced such that &lt;code&gt;needle&lt;/code&gt; is a prefix of it (if no such position exists, returns &lt;code&gt;haystack&lt;/code&gt; advanced to termination).</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; ように前進 &lt;code&gt;needle&lt;/code&gt; （そのような位置が存在しない場合に戻ると、それの接頭辞である &lt;code&gt;haystack&lt;/code&gt; 終了に進みます）。</target>
        </trans-unit>
        <trans-unit id="1342092e3ae92bd56e1008e1700f839172dc6d62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;haystack&lt;/code&gt; advanced such that the front element is the one searched for; that is, until &lt;code&gt;binaryFun!pred(haystack.front, needle)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. If no such position exists, returns an empty &lt;code&gt;haystack&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; は、前の要素が検索されるように進化しました。つまり、 &lt;code&gt;binaryFun!pred(haystack.front, needle)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; になるまでです。そのような位置が存在しない場合は、空の &lt;code&gt;haystack&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3a7709f5444c09b2db5958f871fde3a58239214d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;helpWanted&lt;/code&gt; is set if the option &lt;code&gt;--help&lt;/code&gt; or &lt;code&gt;-h&lt;/code&gt; was passed to the option parser.</source>
          <target state="translated">&lt;code&gt;helpWanted&lt;/code&gt; オプション &lt;code&gt;--help&lt;/code&gt; または &lt;code&gt;-h&lt;/code&gt; がオプションパーサーに渡された場合、helpWantedが設定されます。</target>
        </trans-unit>
        <trans-unit id="90b47fb385002d5be035355df9fcf1c2d63722b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;high &amp;gt;= min&lt;/code&gt;, or &lt;code&gt;minSize == chooseAtRuntime&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; has not yet been initialized. Also &lt;code&gt;high &amp;gt;= (void*).sizeof&lt;/code&gt;. Also, no allocation has been yet done with this allocator.</source>
          <target state="translated">&lt;code&gt;high &amp;gt;= min&lt;/code&gt; 、または &lt;code&gt;minSize == chooseAtRuntime&lt;/code&gt; あり、 &lt;code&gt;min&lt;/code&gt; はまだ初期化されていません。 &lt;code&gt;high &amp;gt;= (void*).sizeof&lt;/code&gt; も高い。また、このアロケーターではまだ割り当てが行われていません。</target>
        </trans-unit>
        <trans-unit id="0aa929a94bde73d993953027e9e45983b2a25faf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hook&lt;/code&gt; is a member variable if it has state, or an alias for &lt;code&gt;Hook&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;hook&lt;/code&gt; は、状態がある場合はメンバー変数、それ以外の場合は &lt;code&gt;Hook&lt;/code&gt; エイリアスです。</target>
        </trans-unit>
        <trans-unit id="e30039c28096c73c13dc10d17a63e8d65082ed94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ignore&lt;/code&gt; Do not abort execution or print any cycles. When cycles are present, order of static construction is implementation defined, and not guaranteed to be valid.</source>
          <target state="translated">&lt;code&gt;ignore&lt;/code&gt; 実行を中止したり、サイクルを出力したりしません。サイクルが存在する場合、静的構築の順序は実装によって定義され、有効であるとは限りません。</target>
        </trans-unit>
        <trans-unit id="d02d2cb04d754aaf48c7f36b075cbbae661c89a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ignore&lt;/code&gt; Do not abort execution or print any cycles. When cycles are present, the order of static construction is implementation defined, and not guaranteed to be valid.</source>
          <target state="translated">&lt;code&gt;ignore&lt;/code&gt; 実行を中止したり、サイクルを出力したりしないでください。サイクルが存在する場合、静的構築の順序は実装によって定義され、有効であるとは限りません。</target>
        </trans-unit>
        <trans-unit id="2900fa2143c8a9554a50e42157ae7de4e9a10d57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;immutable&lt;/code&gt; (= i)</source>
          <target state="translated">&lt;code&gt;immutable&lt;/code&gt; （= i）</target>
        </trans-unit>
        <trans-unit id="71481ed3d36e92db19dd7c5a87a5f2c82034d7cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;immutable&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;immutable&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="4492f625b3c03c9e03748ad120820e2cb2e70cc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;immutable&lt;/code&gt; applies to data that cannot change. Immutable data values, once constructed, remain the same for the duration of the program's execution. Immutable data can be placed in ROM (Read Only Memory) or in memory pages marked by the hardware as read only. Since immutable data does not change, it enables many opportunities for program optimization, and has applications in functional style programming.</source>
          <target state="translated">&lt;code&gt;immutable&lt;/code&gt; は、変更できないデータに適用されます。不変のデータ値は、いったん構築されると、プログラムの実行中は同じままです。不変データは、ROM（読み取り専用メモリ）またはハードウェアによって読み取り専用としてマークされたメモリページに配置できます。不変データは変更されないため、プログラムを最適化する多くの機会が得られ、関数型プログラミングのアプリケーションがあります。</target>
        </trans-unit>
        <trans-unit id="436d66a299b3ac0c65e6f16abd43ab92f216596e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;immutable&lt;/code&gt; keyword</source>
          <target state="translated">&lt;code&gt;immutable&lt;/code&gt; キーワード</target>
        </trans-unit>
        <trans-unit id="c2df067ae666f1bc5a565ba7a7986dc9010e82b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;immutable&lt;/code&gt;. When a postblit is qualified with &lt;code&gt;immutable&lt;/code&gt; as in &lt;code&gt;this(this) immutable&lt;/code&gt; or &lt;code&gt;immutable this(this)&lt;/code&gt; the code is ill-formed. The &lt;code&gt;immutable&lt;/code&gt; postblit passes the compilation phase but cannot be invoked. Example:</source>
          <target state="translated">&lt;code&gt;immutable&lt;/code&gt; 。 &lt;code&gt;this(this) immutable&lt;/code&gt; または &lt;code&gt;immutable this(this)&lt;/code&gt; のようにポストブリットが &lt;code&gt;immutable&lt;/code&gt; で修飾されている場合、コードの形式が正しくありません。 &lt;code&gt;immutable&lt;/code&gt; postblitは、コンパイルフェーズを渡すが、呼び出すことはできません。例：</target>
        </trans-unit>
        <trans-unit id="ad0072c6746bc27e24f45537eafcbb149a3d4312" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;in&lt;/code&gt; operator. Check to see if the given element exists in the container.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; オペレータ。指定された要素がコンテナに存在するかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="7d4ac1474ebbc013c1575aa6087d0b3803471556" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;in&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;out&lt;/code&gt; and &lt;code&gt;lazy&lt;/code&gt; are mutually exclusive. The first three are used to denote input, input/output, and output parameters, respectively. For example:</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 、 &lt;code&gt;ref&lt;/code&gt; 、 &lt;code&gt;out&lt;/code&gt; 、 &lt;code&gt;lazy&lt;/code&gt; は相互に排他的です。最初の3つは、それぞれ入力、入力/出力、および出力パラメーターを示すために使用されます。例えば：</target>
        </trans-unit>
        <trans-unit id="a9f30f56c33bc12f05c33f96f90e1facd80a129f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;include&lt;/code&gt; can be called multiple times, but a &lt;code&gt;static foreach&lt;/code&gt; should be expanded at most once. Achieved by caching the result of the first call. We need both &lt;code&gt;cached&lt;/code&gt; and &lt;code&gt;cache&lt;/code&gt;, because &lt;code&gt;null&lt;/code&gt; is a valid value for &lt;code&gt;cache&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; は複数回呼び出すことができますが、 &lt;code&gt;static foreach&lt;/code&gt; は最大で1回拡張する必要があります。最初の呼び出しの結果をキャッシュすることで達成されました。 &lt;code&gt;null&lt;/code&gt; は &lt;code&gt;cache&lt;/code&gt; の有効な値であるため、 &lt;code&gt;cached&lt;/code&gt; と &lt;code&gt;cache&lt;/code&gt; の両方が必要です。</target>
        </trans-unit>
        <trans-unit id="44ae195465b408cf88051622b07be00d82f8e415" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inout const&lt;/code&gt; (= wc)</source>
          <target state="translated">&lt;code&gt;inout const&lt;/code&gt; （= wc）</target>
        </trans-unit>
        <trans-unit id="550f2068280d8918c09f917242e8703c16af0b11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inout ref&lt;/code&gt; parameters imply the &lt;code&gt;return&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;inout ref&lt;/code&gt; パラメーターは、 &lt;code&gt;return&lt;/code&gt; 属性を意味します。</target>
        </trans-unit>
        <trans-unit id="8ff88e48057de7710ee582351fabcc94618d3e37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inout&lt;/code&gt; (= w)</source>
          <target state="translated">&lt;code&gt;inout&lt;/code&gt; （= w）</target>
        </trans-unit>
        <trans-unit id="efb4702b3ddeb95b18625f1d83639e13135ca271" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inout&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;inout&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="5081215deaf6187f6bbf3fd090202c23c801d59e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;input&lt;/code&gt; and the returned value will share the same tail (see &lt;a href=&quot;std_array#sameTail&quot;&gt;&lt;code&gt;std.array.sameTail&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; と戻り値は同じテールを共有します（&lt;a href=&quot;std_array#sameTail&quot;&gt; &lt;code&gt;std.array.sameTail&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="dfe4937f2a62392719a9715f9ba67a8b5935be9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;input&lt;/code&gt; stripped of leading whitespace or characters specified in the second argument.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; 2番目の引数で指定された先頭の空白または文字を取り除いた入力</target>
        </trans-unit>
        <trans-unit id="f7c4a45e70d8feffbee29baa015d55bb36b53552" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inputPath&lt;/code&gt; with the tilde expanded, or just &lt;code&gt;inputPath&lt;/code&gt; if it could not be expanded. For Windows, &lt;code&gt;expandTilde&lt;/code&gt; merely returns its argument &lt;code&gt;inputPath&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;inputPath&lt;/code&gt; チルダとは、単に拡大し、または &lt;code&gt;inputPath&lt;/code&gt; が展開できなかった場合。Windowsの場合、 &lt;code&gt;expandTilde&lt;/code&gt; は単に引数 &lt;code&gt;inputPath&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="084278a1724aad084c8a91d99892ec68cf516c2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is&lt;/code&gt; and &lt;code&gt;!is&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;is&lt;/code&gt; 、 &lt;code&gt;!is&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6071e4e2b023d8249ec4ccd3e337fffdf3c94c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isAssignable&lt;/code&gt; returns whether both an lvalue and rvalue can be assigned.</source>
          <target state="translated">&lt;code&gt;isAssignable&lt;/code&gt; は、左辺値と右辺値の両方を割り当てることができるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="66879705a4dc657173ac2d5753a2cb2b985201d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isNarrowString&lt;/code&gt; to be converted to an array of &lt;code&gt;dchar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;isNarrowString&lt;/code&gt; の配列に &lt;code&gt;dchar&lt;/code&gt; されるisNarrowString</target>
        </trans-unit>
        <trans-unit id="ecb92a876691a04ff916735fdb76c540fac9e376" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isNull&lt;/code&gt; must be &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;isNull&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="c9fe38cab0466125758effcc8010350c52973f9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isPartitioned!&quot;a &amp;lt; 0&quot;([-1, -2, 1, 0, 2])&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; because the predicate is &lt;code&gt;true&lt;/code&gt; for a portion of the range and &lt;code&gt;false&lt;/code&gt; afterwards.</source>
          <target state="translated">&lt;code&gt;isPartitioned!&quot;a &amp;lt; 0&quot;([-1, -2, 1, 0, 2])&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。これは、範囲の一部で述語が &lt;code&gt;true&lt;/code&gt; になり、その後 &lt;code&gt;false&lt;/code&gt; になるためです。</target>
        </trans-unit>
        <trans-unit id="dddbca49d1d853191ca6e06fd51d81def37636c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isPermutation([1, 2], [2, 1])&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;isPermutation([1, 2], [2, 1])&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5ede47dcbc7a2deb630d825388c29438f3a2f9bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isSameLength([1, 2, 3], [4, 5, 6])&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;isSameLength([1, 2, 3], [4, 5, 6])&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="22dbb64f1eb66960d30cdd0d045a91b4bebc460a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isSorted([1, 1, 2, 3])&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;isSorted([1, 1, 2, 3])&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="95020a0d026466773d6e7d2d4a1d82c17a6cdd7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isStrictlyMonotonic([1, 1, 2, 3])&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;isStrictlyMonotonic([1, 1, 2, 3])&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e139cb4c8e4b1cc92d499904e7985ee32759ecff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;joiner([&quot;hello&quot;, &quot;world!&quot;], &quot;; &quot;)&lt;/code&gt; returns a range that iterates over the characters &lt;code&gt;&quot;hello; world!&quot;&lt;/code&gt;. No new string is created - the existing inputs are iterated.</source>
          <target state="translated">&lt;code&gt;joiner([&quot;hello&quot;, &quot;world!&quot;], &quot;; &quot;)&lt;/code&gt; は、文字 &lt;code&gt;&quot;hello; world!&quot;&lt;/code&gt; を反復する範囲を返します 。新しい文字列は作成されません-既存の入力が繰り返されます。</target>
        </trans-unit>
        <trans-unit id="3e315f86bc48178511e8543de42af5b89ad43fa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;levenshteinDistance(&quot;kitten&quot;, &quot;sitting&quot;)&lt;/code&gt; returns &lt;code&gt;3&lt;/code&gt; by using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt; Levenshtein distance algorithm&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;levenshteinDistance(&quot;kitten&quot;, &quot;sitting&quot;)&lt;/code&gt; は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;レーベンシュタイン距離アルゴリズム&lt;/a&gt;を使用して &lt;code&gt;3&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9909ab215a345d0b27a717c33e2385edf613ac2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;levenshteinDistanceAndPath(&quot;kitten&quot;, &quot;sitting&quot;)&lt;/code&gt; returns &lt;code&gt;tuple(3, &quot;snnnsni&quot;)&lt;/code&gt; by using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt; Levenshtein distance algorithm&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;levenshteinDistanceAndPath(&quot;kitten&quot;, &quot;sitting&quot;)&lt;/code&gt; は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;レーベンシュタイン距離アルゴリズム&lt;/a&gt;を使用して &lt;code&gt;tuple(3, &quot;snnnsni&quot;)&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="043c4ef9c5504856de8db336671697c62d26de91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; must be mutable. If &lt;code&gt;T&lt;/code&gt; is a struct or union, then its fields must also all be (recursively) mutable.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; は変更可能でなければなりません。場合 &lt;code&gt;T&lt;/code&gt; は、構造体または共用体で、そのフィールドは、すべての（再帰的に）変更可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="4fa27a482d0b37131f1db39d8bafd63dbc0f62a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;linearRemove&lt;/code&gt; functions as &lt;code&gt;remove&lt;/code&gt;, but also accepts ranges that are result the of a &lt;code&gt;take&lt;/code&gt; operation. This is a convenient way to remove a fixed amount of elements from the range.</source>
          <target state="translated">&lt;code&gt;linearRemove&lt;/code&gt; は &lt;code&gt;remove&lt;/code&gt; として機能しますが、 &lt;code&gt;take&lt;/code&gt; 操作の結果である範囲も受け入れます。これは、範囲から一定量の要素を削除する便利な方法です。</target>
        </trans-unit>
        <trans-unit id="7ee71cc6858f0c96f71361219decb26e2942e05d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock&lt;/code&gt;, &lt;code&gt;rep&lt;/code&gt;, &lt;code&gt;repe&lt;/code&gt;, &lt;code&gt;repne&lt;/code&gt;, &lt;code&gt;repnz&lt;/code&gt;, &lt;code&gt;repz&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; 、 &lt;code&gt;rep&lt;/code&gt; 、 &lt;code&gt;repe&lt;/code&gt; 、 &lt;code&gt;repne&lt;/code&gt; 、 &lt;code&gt;repnz&lt;/code&gt; 、 &lt;code&gt;repz&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0608ab6000f01a8274d98d95b81bd6b9a45d923b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;long&lt;/code&gt; (or &lt;code&gt;long long&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; （または &lt;code&gt;long long&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="25eeae832d72ed3ac287745a8b11538f1c57ec70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;low &amp;lt;= max&lt;/code&gt;, or &lt;code&gt;maxSize == chooseAtRuntime&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; has not yet been initialized. Also, no allocation has been yet done with this allocator.</source>
          <target state="translated">&lt;code&gt;low &amp;lt;= max&lt;/code&gt; 、または &lt;code&gt;maxSize == chooseAtRuntime&lt;/code&gt; あり、 &lt;code&gt;max&lt;/code&gt; がまだ初期化されていません。また、このアロケーターではまだ割り当てが行われていません。</target>
        </trans-unit>
        <trans-unit id="fb726eb349abf2e37154eb8736f944062867db87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main()&lt;/code&gt; Function</source>
          <target state="translated">&lt;code&gt;main()&lt;/code&gt; 関数</target>
        </trans-unit>
        <trans-unit id="129c758d4ac6dd6b6924ab4249d29cb61ded7cad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;makeIndex&lt;/code&gt; overwrites its second argument with the result, but never reallocates it.</source>
          <target state="translated">&lt;code&gt;makeIndex&lt;/code&gt; は2番目の引数を結果で上書きしますが、再割り当てすることはありません。</target>
        </trans-unit>
        <trans-unit id="b7b59ca16aed965bf946f9a2c80d7fa247a48e12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mangledName&lt;/code&gt; is the same as builtin &lt;code&gt;.mangleof&lt;/code&gt; property, but might be more convenient in generic code, e.g. as a template argument when invoking staticMap.</source>
          <target state="translated">&lt;code&gt;mangledName&lt;/code&gt; は組み込みの &lt;code&gt;.mangleof&lt;/code&gt; プロパティと同じですが、たとえばstaticMapを呼び出すときのテンプレート引数としてなど、汎用コードではより便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="c544143563e1f74a6c402ca380463fcaef1fbc2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map!(a =&amp;gt; a * 2)([1, 2, 3])&lt;/code&gt; lazily returns a range with the numbers &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map!(a =&amp;gt; a * 2)([1, 2, 3])&lt;/code&gt; レイジー番号と範囲を返し &lt;code&gt;2&lt;/code&gt; 、 &lt;code&gt;4&lt;/code&gt; 、 &lt;code&gt;6&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4761b7dc7f583a3d31830f3e09d1438fb71453b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; has more overhead than the simpler procedure used by &lt;code&gt;amap&lt;/code&gt; but avoids the need to keep all results in memory simultaneously and works with non-random access ranges.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; は、 &lt;code&gt;amap&lt;/code&gt; が使用する単純な手順よりもオーバーヘッドが大きくなりますが、すべての結果を同時にメモリに保持する必要がなく、ランダムでないアクセス範囲で機能します。</target>
        </trans-unit>
        <trans-unit id="ad50cff4e88d0799e190aa7ade21aa72c4ee06e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max(3, 4, 2)&lt;/code&gt; returns &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;max(3, 4, 2)&lt;/code&gt; は &lt;code&gt;4&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="15bb7ee8875811b3baf41488e3c96e099c2a02b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxCount([2, 4, 1, 4, 1])&lt;/code&gt; returns &lt;code&gt;tuple(4, 2)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;maxCount([2, 4, 1, 4, 1])&lt;/code&gt; は &lt;code&gt;tuple(4, 2)&lt;/code&gt; 4、2）を返します。</target>
        </trans-unit>
        <trans-unit id="655f2b7c21e23c123906923a24f5c793344bba90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxPos([2, 3, 1, 3, 4, 1])&lt;/code&gt; returns the subrange &lt;code&gt;[4, 1]&lt;/code&gt;, i.e., positions the range at the first occurrence of its maximal element.</source>
          <target state="translated">&lt;code&gt;maxPos([2, 3, 1, 3, 4, 1])&lt;/code&gt; は、サブ範囲 &lt;code&gt;[4, 1]&lt;/code&gt; 4、1]を返します。つまり、最大要素が最初に出現する位置に範囲を配置します。</target>
        </trans-unit>
        <trans-unit id="1071e9ef737014048e3bccf0ff565f1f954f2ccf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min(3, 4, 2)&lt;/code&gt; returns &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;min(3, 4, 2)&lt;/code&gt; は &lt;code&gt;2&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6fff40f5a24451779daba8933602d60ed7ce2faf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minCount([2, 1, 1, 4, 1])&lt;/code&gt; returns &lt;code&gt;tuple(1, 3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;minCount([2, 1, 1, 4, 1])&lt;/code&gt; は &lt;code&gt;tuple(1, 3)&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="b8ef619f4e0a49816b959045c7488e102ae84ae5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minPos([2, 3, 1, 3, 4, 1])&lt;/code&gt; returns the subrange &lt;code&gt;[1, 3, 4, 1]&lt;/code&gt;, i.e., positions the range at the first occurrence of its minimal element.</source>
          <target state="translated">&lt;code&gt;minPos([2, 3, 1, 3, 4, 1])&lt;/code&gt; は、サブ範囲 &lt;code&gt;[1, 3, 4, 1]&lt;/code&gt; 1、3、4、1]を返します。つまり、最小要素が最初に出現する位置に範囲を配置します。</target>
        </trans-unit>
        <trans-unit id="ebb26ab5e762f1a839431b369278827700f15efa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mismatch(&quot;oh hi&quot;, &quot;ohayo&quot;)&lt;/code&gt; returns &lt;code&gt;tuple(&quot; hi&quot;, &quot;ayo&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mismatch(&quot;oh hi&quot;, &quot;ohayo&quot;)&lt;/code&gt; は &lt;code&gt;tuple(&quot; hi&quot;, &quot;ayo&quot;)&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="ad172e35f10a277274b0ed5b3fbcd82e3bbfd231" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mixin(x ~ &quot;lhs&quot;)&lt;/code&gt; for unary, &lt;code&gt;mixin(&quot;lhs&quot; ~ x ~ &quot;rhs&quot;)&lt;/code&gt; for binary</source>
          <target state="translated">&lt;code&gt;mixin(x ~ &quot;lhs&quot;)&lt;/code&gt; 単項のための &lt;code&gt;mixin(&quot;lhs&quot; ~ x ~ &quot;rhs&quot;)&lt;/code&gt; バイナリについて</target>
        </trans-unit>
        <trans-unit id="17739b82698658d46a9e5259c44de548d2101630" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mixin&lt;/code&gt; expressions if and only if the compilation of the expression resulting from compiling the argument(s) to &lt;code&gt;mixin&lt;/code&gt; is an lvalue;</source>
          <target state="translated">&lt;code&gt;mixin&lt;/code&gt; 引数を &lt;code&gt;mixin&lt;/code&gt; にコンパイルした結果の式のコンパイルが左辺値である場合にのみ、mixin式。</target>
        </trans-unit>
        <trans-unit id="6da6e8146acef891595f833e9c41c8d7f16194fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mixin&lt;/code&gt; statement</source>
          <target state="translated">&lt;code&gt;mixin&lt;/code&gt; ステートメント</target>
        </trans-unit>
        <trans-unit id="bcf9e8ea748e70f1cc770bfd4e8fdf662e551518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;move(a, b)&lt;/code&gt; moves &lt;code&gt;a&lt;/code&gt; into &lt;code&gt;b&lt;/code&gt;. &lt;code&gt;move(a)&lt;/code&gt; reads &lt;code&gt;a&lt;/code&gt; destructively when necessary.</source>
          <target state="translated">&lt;code&gt;move(a, b)&lt;/code&gt; は &lt;code&gt;a&lt;/code&gt; を &lt;code&gt;b&lt;/code&gt; に移動します。 &lt;code&gt;move(a)&lt;/code&gt; は、必要に応じ &lt;code&gt;a&lt;/code&gt; 破壊的に読み取ります。</target>
        </trans-unit>
        <trans-unit id="6319ed7e079aa5cdd6b26c22ceb64f71bfdb61d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt; - error message as a &lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; - &lt;code&gt;string&lt;/code&gt; としてのエラーメッセージ</target>
        </trans-unit>
        <trans-unit id="aed62f47a9973b1a8fbc6a93da9d4ae885be19f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; elements but will stop if the range is empty first. In other languages this is sometimes called &lt;code&gt;skip&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 要素。ただし、範囲が最初に空の場合は停止します。他の言語では、これは &lt;code&gt;skip&lt;/code&gt; と呼ばれることもあります。</target>
        </trans-unit>
        <trans-unit id="8f82b80e4b107c5455404b0aa2d60f7e17d0658e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;dstName&lt;/code&gt; are always the empty string since this time zone has no DST, and while it may be meant to represent a time zone which is in the TZ Database, obviously it's not likely to be following the exact rules of any of the time zones in the TZ Database, so it makes no sense to set it.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; このタイムゾーンにはDSTがないため、nameと &lt;code&gt;dstName&lt;/code&gt; は常に空の文字列です。TZデータベースにあるタイムゾーンを表すことを意図している場合がありますが、明らかに、どのタイムゾーンの正確なルールにも従うことはありません。 TZデータベースでは、設定しても意味がありません。</target>
        </trans-unit>
        <trans-unit id="3d6734e2e3e13b6908442f1d4b994b0564c1e1b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nothrow&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;nothrow&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="7a4ae3472c64b73ed1017173116c41279dd3cadb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; if &lt;code&gt;e&lt;/code&gt; is not an aggregate or if it is an aggregate that doesn't permit inlining, and the aggregate otherwise.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; &lt;code&gt;e&lt;/code&gt; が集合体でない場合、またはインライン化を許可しない集合体の場合はnull、それ以外の場合は集合体。</target>
        </trans-unit>
        <trans-unit id="342db145b5532dfeb4960769e8d2ac17e8ca5092" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; if not an operator overload, otherwise the lowered expression</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 演算子のオーバーロードでない場合はnull、それ以外の場合は下げられた式</target>
        </trans-unit>
        <trans-unit id="09a5f97c5f824bf4bb328e3511556aa409edc0ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; literal is formatted as &lt;code&gt;&quot;null&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; リテラルは &lt;code&gt;&quot;null&quot;&lt;/code&gt; としてフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="7148866e024541832be10dd624dc857d377ef474" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; on failure or if the requested size exceeds the remaining capacity.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 失敗した場合、または要求されたサイズが残りの容量を超えた場合はnull。</target>
        </trans-unit>
        <trans-unit id="13d3a4d132e79d8c89a8051d12f32981ae7abc4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; or &lt;code&gt;this&lt;/code&gt; expression when this declaration is a field</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; この宣言がフィールドの場合はnullまたは &lt;code&gt;this&lt;/code&gt; 式</target>
        </trans-unit>
        <trans-unit id="a15765a5e2096039162ed69d34289b746d72ae10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; represents the null value for pointers, pointers to functions, delegates, dynamic arrays, associative arrays, and class objects. If it has not already been cast to a type, it is given the singular type &lt;code&gt;typeof(null)&lt;/code&gt; and it is an exact conversion to convert it to the null value for pointers, pointers to functions, delegates, etc. After it is cast to a type, such conversions are implicit, but no longer exact.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; は、ポインター、関数へのポインター、デリゲート、動的配列、連想配列、およびクラスオブジェクトのnull値を表します。型にまだキャストされていない場合は、特異型 &lt;code&gt;typeof(null)&lt;/code&gt; が与えられ、ポインター、関数へのポインター、デリゲートなどのnull値に変換するのは正確な変換です。タイプ、そのような変換は暗黙的ですが、もはや正確ではありません。</target>
        </trans-unit>
        <trans-unit id="6c9fcd375cb2635f126aa8c4382fed567cda668c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;obj&lt;/code&gt; must not already have a monitor.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; はすでにモニターを持っていてはなりません。</target>
        </trans-unit>
        <trans-unit id="53265aa7a3308ec880f4e25e7bc1b18c458fed7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;obj&lt;/code&gt; without any modification.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 変更なしのobj。</target>
        </trans-unit>
        <trans-unit id="9a972bce84feda7e286dd14976860b2837b979c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;op&lt;/code&gt; is one of: TOK.lessThan, TOK.lessOrEqual, TOK.greaterThan, TOK.greaterOrEqual</source>
          <target state="translated">&lt;code&gt;op&lt;/code&gt; は次のいずれかです。TOK.lessThan、TOK.lessOrEqual、TOK.greaterThan、TOK.greaterOrEqual</target>
        </trans-unit>
        <trans-unit id="e03743facb1bd4fbbad5c7ae7e1be25ba907b2ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;opPostMove&lt;/code&gt; will be called if defined:</source>
          <target state="translated">&lt;code&gt;opPostMove&lt;/code&gt; は、定義されている場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7cac9e13dbedf038b706359b0b3bfdddbff1e67a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ordered(1, 1, 2, 3)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ordered(1, 1, 2, 3)&lt;/code&gt; 1、1、2、3 ）は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fe01c087c1137c8c50eb31f65e4b2c604b452370" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ordered&lt;/code&gt; allows repeated values, e.g. &lt;code&gt;ordered(1, 1, 2)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. To verify that the values are ordered strictly monotonically, use &lt;code&gt;strictlyOrdered&lt;/code&gt;; &lt;code&gt;strictlyOrdered(1, 1, 2)&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ordered&lt;/code&gt; は繰り返し値を許可します。例えば、 &lt;code&gt;ordered(1, 1, 2)&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; ）はtrueです。値が単調に厳しく命じていることを確認するために、使用が &lt;code&gt;strictlyOrdered&lt;/code&gt; 。 &lt;code&gt;strictlyOrdered(1, 1, 2)&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b12543d0da000d301a7cdd42e12a263ec8080c59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;outer&lt;/code&gt; Property</source>
          <target state="translated">&lt;code&gt;outer&lt;/code&gt; プロパティ</target>
        </trans-unit>
        <trans-unit id="6a5e0ca2626efd372513012144aeeb5aa2c60756" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;override&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;override&lt;/code&gt; 属性を上書き</target>
        </trans-unit>
        <trans-unit id="6863469fa5d3953fc0cab9dedf798bbbdc3091fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;owns&lt;/code&gt; is defined if and only if both allocators define &lt;code&gt;owns&lt;/code&gt;. Returns &lt;code&gt;primary.owns(b) | fallback.owns(b)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;owns&lt;/code&gt; 、両方のアロケータを定義した場合にのみが定義されている場合 &lt;code&gt;owns&lt;/code&gt; 。 &lt;code&gt;primary.owns(b) | fallback.owns(b)&lt;/code&gt; 返します| fallback.owns（b）。</target>
        </trans-unit>
        <trans-unit id="5c036498ea7ccc88df0ddae88726f48b50505edc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;package&lt;/code&gt; extends private so that package members can be accessed from code in other modules that are in the same package. If no identifier is provided, this applies to the innermost package only, or defaults to &lt;code&gt;private&lt;/code&gt; if a module is not nested in a package.</source>
          <target state="translated">&lt;code&gt;package&lt;/code&gt; はプライベートに拡張されるため、同じパッケージ内にある他のモジュールのコードからパッケージメンバーにアクセスできます。識別子が指定されていない場合、これは最も内側のパッケージにのみ適用されます。モジュールがパッケージにネストされていない場合は、デフォルトで &lt;code&gt;private&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="99e9b5e43e5735f74de8ff7517e6dcba640ff75d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;package&lt;/code&gt; may have an optional parameter in the form of a dot-separated identifier list which is resolved as the qualified package name. The package must be either the module's parent package or one of its anscestors. If this optional parameter is present, the symbol will be visible in the specified package and all of its descendants.</source>
          <target state="translated">&lt;code&gt;package&lt;/code&gt; は、修飾されたパッケージ名として解決されるドットで区切られた識別子リストの形式でオプションのパラメーターを含めることができます。パッケージは、モジュールの親パッケージまたはその先祖のいずれかでなければなりません。このオプションパラメータが存在する場合、シンボルは指定されたパッケージとそのすべての子孫で表示されます。</target>
        </trans-unit>
        <trans-unit id="8b16f6c70937381d9273f435f11d2e00eea7e2d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parent&lt;/code&gt; field returns a lexically enclosing scope symbol this is a member of.</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; フィールドは、これがメンバーである字句的に囲まれたスコープシンボルを返します。</target>
        </trans-unit>
        <trans-unit id="785ee288b8022b3dbdd08f20aaed022d962e94ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parent&lt;/code&gt;: an alias to the overridden function (if any).</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; ：オーバーライドされた関数（存在する場合）のエイリアス。</target>
        </trans-unit>
        <trans-unit id="e089e7b3b9b73809abfb92ef56b5e3c884a692a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pastMixin&lt;/code&gt; returns the enclosing symbol if this is a template mixin.</source>
          <target state="translated">&lt;code&gt;pastMixin&lt;/code&gt; これがテンプレートミックスインの場合、pastMixinは囲み記号を返します。</target>
        </trans-unit>
        <trans-unit id="2b80008427b9535aedf9b70afeb14098e58d8e4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pastMixinAndNspace&lt;/code&gt; does likewise, additionally skipping over Nspaces that are mangleOnly.</source>
          <target state="translated">&lt;code&gt;pastMixinAndNspace&lt;/code&gt; も同様に、mangleOnlyのNspacesをスキップします。</target>
        </trans-unit>
        <trans-unit id="c82c59282aaf3a7e7db645460bd099ce8ee421b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipeProcess&lt;/code&gt; and &lt;code&gt;pipeShell&lt;/code&gt; are convenient wrappers around &lt;a href=&quot;#spawnProcess&quot;&gt;&lt;code&gt;spawnProcess&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#spawnShell&quot;&gt;&lt;code&gt;spawnShell&lt;/code&gt;&lt;/a&gt;, respectively, and automate the task of redirecting one or more of the child process' standard streams through pipes. Like the functions they wrap, these functions return immediately, leaving the child process to execute in parallel with the invoking process. It is recommended to always call &lt;a href=&quot;#wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; on the returned &lt;a href=&quot;#ProcessPipes.pid&quot;&gt;&lt;code&gt;ProcessPipes.pid&lt;/code&gt;&lt;/a&gt;, as detailed in the documentation for &lt;code&gt;wait&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pipeProcess&lt;/code&gt; および &lt;code&gt;pipeShell&lt;/code&gt; は、それぞれ&lt;a href=&quot;#spawnProcess&quot;&gt; &lt;code&gt;spawnProcess&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#spawnShell&quot;&gt; &lt;code&gt;spawnShell&lt;/code&gt; の&lt;/a&gt;便利なラッパーであり、パイプを介して1つ以上の子プロセスの標準ストリームをリダイレクトするタスクを自動化します。ラップする関数と同様に、これらの関数は即座に戻り、子プロセスを呼び出しプロセスと並行して実行します。常にコールに推奨される&lt;a href=&quot;#wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;返さ上&lt;a href=&quot;#ProcessPipes.pid&quot;&gt; &lt;code&gt;ProcessPipes.pid&lt;/code&gt; &lt;/a&gt;のドキュメントで説明するように、 &lt;code&gt;wait&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ebf87651ef2f151be369c9174cb3ac21dab708d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popBackExactly&lt;/code&gt; will behave the same but instead removes elements from the back of the (bidirectional) range instead of the front.</source>
          <target state="translated">&lt;code&gt;popBackExactly&lt;/code&gt; は同じように動作しますが、代わりに要素を（双方向）範囲の前面ではなく背面から削除します。</target>
        </trans-unit>
        <trans-unit id="765c4bc07ddeed29065f2acfd024ee4fc027cdf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popBackN&lt;/code&gt; behaves the same as &lt;code&gt;popFrontN&lt;/code&gt; but instead removes elements from the back of the (bidirectional) range instead of the front.</source>
          <target state="translated">&lt;code&gt;popBackN&lt;/code&gt; はpopFrontNと同じように動作し &lt;code&gt;popFrontN&lt;/code&gt; が、代わりに（双方向）範囲の前面からではなく背面から要素を削除します。</target>
        </trans-unit>
        <trans-unit id="be6ef5b9245c320746a5e716e6554a963c6f5b9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popFrontN&lt;/code&gt; eagerly advances &lt;code&gt;r&lt;/code&gt; itself (not a copy) up to &lt;code&gt;n&lt;/code&gt; times (by calling &lt;code&gt;r.popFront&lt;/code&gt;). &lt;code&gt;popFrontN&lt;/code&gt; takes &lt;code&gt;r&lt;/code&gt; by &lt;code&gt;ref&lt;/code&gt;, so it mutates the original range. Completes in &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;) steps for ranges that support slicing and have length. Completes in &amp;Omicron;(&lt;code&gt;n&lt;/code&gt;) time for all other ranges.</source>
          <target state="translated">&lt;code&gt;popFrontN&lt;/code&gt; は、r.popFrontを呼び出すことにより、 &lt;code&gt;r&lt;/code&gt; 自体（コピーではない）を最大 &lt;code&gt;n&lt;/code&gt; 回まで &lt;code&gt;r.popFront&lt;/code&gt; ます。 &lt;code&gt;popFrontN&lt;/code&gt; は &lt;code&gt;ref&lt;/code&gt; によって &lt;code&gt;r&lt;/code&gt; を取るため、元の範囲を変更します。スライスをサポートし、長さを持つ範囲の場合、&amp;Omicron;（ &lt;code&gt;1&lt;/code&gt; ）ステップで完了します。他のすべての範囲では、&amp;Omicron;（ &lt;code&gt;n&lt;/code&gt; ）時間で完了します。</target>
        </trans-unit>
        <trans-unit id="5e43d3f60830438c35b679ac8111772b9fd759ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;post(&quot;dlang.org&quot;, &quot;Hi&quot;)&lt;/code&gt; returns a char[] containing the dlang.org web page. after a HTTP POST of &quot;hi&quot;</source>
          <target state="translated">&lt;code&gt;post(&quot;dlang.org&quot;, &quot;Hi&quot;)&lt;/code&gt; は、dlang.org Webページを含むchar []を返します。「hi」のHTTP POSTの後</target>
        </trans-unit>
        <trans-unit id="4840c8407aac759fce17a784a6e123a8332f3ba8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pragma(printf)&lt;/code&gt; applied to declarations that are not functions are ignored. In particular, it has no effect on the declaration of a pointer to function type.</source>
          <target state="translated">&lt;code&gt;pragma(printf)&lt;/code&gt; 関数ではない宣言に適用されたプラグマ（printf）は無視されます。特に、関数型へのポインタの宣言には影響しません。</target>
        </trans-unit>
        <trans-unit id="7b25f5866df90dc2976e65a12ab5ea937351a00a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pragma(printf)&lt;/code&gt; specifies that a function declaration is a printf-like function, meaning it is an &lt;code&gt;extern (C)&lt;/code&gt; or &lt;code&gt;extern (C++)&lt;/code&gt; function with a &lt;code&gt;format&lt;/code&gt; parameter accepting a pointer to a 0-terminated &lt;code&gt;char&lt;/code&gt; string conforming to the C99 Standard 7.19.6.1, immediately followed by either a &lt;code&gt;...&lt;/code&gt; variadic argument list or a parameter of type &lt;code&gt;va_list&lt;/code&gt; as the last parameter.</source>
          <target state="translated">&lt;code&gt;pragma(printf)&lt;/code&gt; は、関数宣言がprintfに似た関数であることを指定します。つまり、C99標準7.19に準拠する0で終了する &lt;code&gt;char&lt;/code&gt; 文字列へのポインターを受け入れる &lt;code&gt;format&lt;/code&gt; パラメーターを持つ &lt;code&gt;extern (C)&lt;/code&gt; または &lt;code&gt;extern (C++)&lt;/code&gt; 関数です。 .6.1の直後に、最後のパラメーターとして &lt;code&gt;...&lt;/code&gt; variadic引数リストまたは &lt;code&gt;va_list&lt;/code&gt; タイプのパラメーターが続きます。</target>
        </trans-unit>
        <trans-unit id="29cf76cf57aaed8270976cd32898cfd9768bc723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pragma(scanf)&lt;/code&gt; applied to declarations that are not functions are ignored. In particular, it has no effect on the declaration of a pointer to function type.</source>
          <target state="translated">&lt;code&gt;pragma(scanf)&lt;/code&gt; 関数ではない宣言に適用されたプラグマ（scanf）は無視されます。特に、関数型へのポインタの宣言には影響しません。</target>
        </trans-unit>
        <trans-unit id="65dbae320420d78cf7666b6a5b9e46949e03b748" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pragma(scanf)&lt;/code&gt; specifies that a function declaration is a scanf-like function, meaning it is an &lt;code&gt;extern (C)&lt;/code&gt; or &lt;code&gt;extern (C++)&lt;/code&gt; function with a &lt;code&gt;format&lt;/code&gt; parameter accepting a pointer to a 0-terminated &lt;code&gt;char&lt;/code&gt; string conforming to the C99 Standard 7.19.6.2, immediately followed by either a &lt;code&gt;...&lt;/code&gt; variadic argument list or a parameter of type &lt;code&gt;va_list&lt;/code&gt; as the last parameter.</source>
          <target state="translated">&lt;code&gt;pragma(scanf)&lt;/code&gt; は、関数宣言がscanfに似た関数であることを指定します。つまり、C99標準7.19に準拠する0で終了する &lt;code&gt;char&lt;/code&gt; 文字列へのポインターを受け入れる &lt;code&gt;format&lt;/code&gt; パラメーターを持つ &lt;code&gt;extern (C)&lt;/code&gt; または &lt;code&gt;extern (C++)&lt;/code&gt; 関数です。 .6.2、直後に &lt;code&gt;...&lt;/code&gt; variadic引数リストまたは最後のパラメーターとしてタイプ &lt;code&gt;va_list&lt;/code&gt; のパラメーターが続きます。</target>
        </trans-unit>
        <trans-unit id="3b56c571dc782994b2ad8a9de2f9c60b84c8d58e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pragma&lt;/code&gt; argument</source>
          <target state="translated">&lt;code&gt;pragma&lt;/code&gt; 引数</target>
        </trans-unit>
        <trans-unit id="9de19508347bbfe1195e8d606a362d1a2fc4ac3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;print&lt;/code&gt; Print all cycles detected, but do not abort execution. When cycles are present, order of static construction is implementation defined, and not guaranteed to be valid.</source>
          <target state="translated">&lt;code&gt;print&lt;/code&gt; 全てのサイクルを印刷検出されたが、実行途中で止まることはありません。サイクルが存在する場合、静的構築の順序は実装によって定義され、有効であるとは限りません。</target>
        </trans-unit>
        <trans-unit id="c3d7713c3de49e3fe902234eebbdb3fb5446bd4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;print&lt;/code&gt; Print all cycles detected, but do not abort execution. When cycles are present, the order of static construction is implementation defined, and not guaranteed to be valid.</source>
          <target state="translated">&lt;code&gt;print&lt;/code&gt; 検出されたすべてのサイクルを印刷しますが、実行を中止しません。サイクルが存在する場合、静的構築の順序は実装によって定義され、有効であるとは限りません。</target>
        </trans-unit>
        <trans-unit id="a6c36e16798b3bee716e3c7d1bfa395fccf04885" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;printf()&lt;/code&gt; is a C function and is not part of D. &lt;code&gt;printf()&lt;/code&gt; will print C strings, which are 0 terminated. There are two ways to use &lt;code&gt;printf()&lt;/code&gt; with D strings. The first is to add a terminating 0, and cast the result to a char*:</source>
          <target state="translated">&lt;code&gt;printf()&lt;/code&gt; はC関数であり、Dの一部ではありません &lt;code&gt;printf()&lt;/code&gt; は、0で終了するC文字列を出力します。D文字列で &lt;code&gt;printf()&lt;/code&gt; を使用するには2つの方法があります。1つ目は、終了0を追加し、結果をchar *にキャストすることです。</target>
        </trans-unit>
        <trans-unit id="f939edc6c8655926f74b8082476cd427a22ec450" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;printf&lt;/code&gt; can be directly called from D code:</source>
          <target state="translated">&lt;code&gt;printf&lt;/code&gt; は、Dコードから直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="488905e8f4a52ab8407ce99c0ae3f45037dd9f96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;printf&lt;/code&gt; format validation</source>
          <target state="translated">&lt;code&gt;printf&lt;/code&gt; 形式の検証</target>
        </trans-unit>
        <trans-unit id="885eaccdd6ff3a7f55587c62f3e2ef120742b0cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protected&lt;/code&gt; only applies inside classes (and templates as they can be mixed in) and means that a symbol can only be seen by members of the same module, or by a derived class. If accessing a protected instance member through a derived class member function, that member can only be accessed for the object instance which can be implicitly cast to the same type as &amp;lsquo;this&amp;rsquo;. &lt;code&gt;protected&lt;/code&gt; module members are illegal.</source>
          <target state="translated">&lt;code&gt;protected&lt;/code&gt; は、クラス（およびそれらを混在させることができるテンプレート）の内部にのみ適用され、同じモジュールのメンバーまたは派生クラスのみがシンボルを表示できることを意味します。派生クラスメンバー関数を介して保護されたインスタンスメンバーにアクセスする場合、そのメンバーには、暗黙的に 'this'と同じ型にキャストできるオブジェクトインスタンスに対してのみアクセスできます。 &lt;code&gt;protected&lt;/code&gt; モジュールメンバーは違法です。</target>
        </trans-unit>
        <trans-unit id="58104d24c97eca4573f45c0f775fb78ad6fc3db1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ptrdiff_t&lt;/code&gt; is an alias to the signed integral basic type the same size as &lt;code&gt;size_t&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ptrdiff_t&lt;/code&gt; は、 &lt;code&gt;size_t&lt;/code&gt; と同じサイズの符号付き整数基本型のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="c0c955a9b07864cb44d663b9a3edf65f6d23651e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;public&lt;/code&gt; means that any code within the executable can see the member. It is the default visibility attribute.</source>
          <target state="translated">&lt;code&gt;public&lt;/code&gt; は、実行可能ファイル内のすべてのコードがメンバーを見ることができることを意味します。これはデフォルトの可視属性です。</target>
        </trans-unit>
        <trans-unit id="79e8d813b3487dee878c4257552cc6b79a81eafa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pure&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;pure&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="2e7f09449d458ea8e9e57a7ac854cfb05b1ff2a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pure&lt;/code&gt;, &lt;code&gt;nothrow&lt;/code&gt;, &lt;code&gt;@nogc&lt;/code&gt;, &lt;code&gt;@property&lt;/code&gt;, &lt;code&gt;@system&lt;/code&gt;, &lt;code&gt;@trusted&lt;/code&gt;, &lt;code&gt;@safe&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;@live&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;pure&lt;/code&gt; 、 &lt;code&gt;nothrow&lt;/code&gt; 、 &lt;code&gt;@nogc&lt;/code&gt; 、 &lt;code&gt;@property&lt;/code&gt; 、 &lt;code&gt;@system&lt;/code&gt; 、 &lt;code&gt;@trusted&lt;/code&gt; 、 &lt;code&gt;@safe&lt;/code&gt; 、 &lt;code&gt;ref&lt;/code&gt; 、 &lt;code&gt;@live&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="355e1b792f5254a4df82ea4a1c4c52dbe2ca371f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pure&lt;/code&gt;, &lt;code&gt;nothrow&lt;/code&gt;, &lt;code&gt;@nogc&lt;/code&gt;, &lt;code&gt;@property&lt;/code&gt;, &lt;code&gt;@system&lt;/code&gt;, &lt;code&gt;@trusted&lt;/code&gt;, &lt;code&gt;@safe&lt;/code&gt;, and &lt;code&gt;ref&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;pure&lt;/code&gt; 、 &lt;code&gt;nothrow&lt;/code&gt; 、 &lt;code&gt;@nogc&lt;/code&gt; 、 &lt;code&gt;@property&lt;/code&gt; 、 &lt;code&gt;@system&lt;/code&gt; 、 &lt;code&gt;@trusted&lt;/code&gt; 、 &lt;code&gt;@safe&lt;/code&gt; 、および &lt;code&gt;ref&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37a05e6ea71c58e0ecc8b8f22dc710971b6a30f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;put(&quot;dlang.org&quot;, &quot;Hi&quot;)&lt;/code&gt; returns a char[] containing the dlang.org web page. after a HTTP PUT of &quot;hi&quot;</source>
          <target state="translated">&lt;code&gt;put(&quot;dlang.org&quot;, &quot;Hi&quot;)&lt;/code&gt; は、dlang.org Webページを含むchar []を返します。「hi」のHTTP PUTの後</target>
        </trans-unit>
        <trans-unit id="ad07519f507b3041d07e3c20f839ab72ee2e1e99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;put&lt;/code&gt; should</source>
          <target state="translated">&lt;code&gt;put&lt;/code&gt; べき</target>
        </trans-unit>
        <trans-unit id="9a592372b6a5ac856e36481ab0ba287c9445c4e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;put&lt;/code&gt; treats dynamic arrays as array slices, and will call &lt;code&gt;popFront&lt;/code&gt; on the slice after an element has been copied.  Be sure to save the position of the array before calling &lt;code&gt;put&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;put&lt;/code&gt; は動的配列を配列スライスとして扱い、要素がコピーされた後にスライスで &lt;code&gt;popFront&lt;/code&gt; を呼び出します。 &lt;code&gt;put&lt;/code&gt; を呼び出す前に、必ず配列の位置を保存してください。</target>
        </trans-unit>
        <trans-unit id="9193340cac39846b4cfea0d1c78fc84d0f2f893f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r.back&lt;/code&gt; returns (possibly a reference to) the last element in the range. Calling &lt;code&gt;r.back&lt;/code&gt; is allowed only if calling &lt;code&gt;r.empty&lt;/code&gt; has, or would have, returned &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r.back&lt;/code&gt; は、範囲内の最後の要素（おそらく参照）を返します。呼び出し &lt;code&gt;r.back&lt;/code&gt; 呼び出す場合にのみ許可されている &lt;code&gt;r.empty&lt;/code&gt; があり、または、返さなければなら &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13af710cd09013b2e064b363bf36b6cbc35fcbef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r.empty&lt;/code&gt; evaluated multiple times, without calling &lt;code&gt;r.popFront&lt;/code&gt;, or otherwise mutating the range object or the underlying data, yields the same result for every evaluation.</source>
          <target state="translated">&lt;code&gt;r.empty&lt;/code&gt; を呼び出さずにr.emptyを複数回評価したり、範囲オブジェクトや基になるデータを &lt;code&gt;r.popFront&lt;/code&gt; したりせずに、すべての評価で同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="9e47c532ad11f99cc48c6a97a263483fe2fb84ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r.empty&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; if and only if there is more data available in the range.</source>
          <target state="translated">&lt;code&gt;r.empty&lt;/code&gt; は、範囲内に利用可能なデータがまだある場合にのみ &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="33a82d6bd254c8ddeec0ab5cce7440aeb3a26b7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r.front&lt;/code&gt; can be legally evaluated if and only if evaluating &lt;code&gt;r.empty&lt;/code&gt; has, or would have, equaled &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r.front&lt;/code&gt; は、 &lt;code&gt;r.empty&lt;/code&gt; の評価が &lt;code&gt;false&lt;/code&gt; であるか、またはfalseに等しい場合にのみ合法的に評価できます。</target>
        </trans-unit>
        <trans-unit id="70a4ae757d1f6b79696d48604892d6f38fdeb2b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r.front&lt;/code&gt; evaluated multiple times, without calling &lt;code&gt;r.popFront&lt;/code&gt;, or otherwise mutating the range object or the underlying data, yields the same result for every evaluation.</source>
          <target state="translated">&lt;code&gt;r.front&lt;/code&gt; を呼び出さ &lt;code&gt;r.popFront&lt;/code&gt; 、または範囲オブジェクトまたは基になるデータを変更せずに、r.frontが複数回評価されると、すべての評価で同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="988cf166f117ce8d9c9381f74cc01ac3753e3cf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r.front&lt;/code&gt; returns the current element in the range. It may return by value or by reference.</source>
          <target state="translated">&lt;code&gt;r.front&lt;/code&gt; は、範囲内の現在の要素を返します。値または参照によって返される場合があります。</target>
        </trans-unit>
        <trans-unit id="6d03a5433bfb6e8943880060c7a7f6081694bfa9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r.opIndex(n)&lt;/code&gt; returns a reference to the &lt;code&gt;n&lt;/code&gt;th element in the range.</source>
          <target state="translated">&lt;code&gt;r.opIndex(n)&lt;/code&gt; は、範囲内の &lt;code&gt;n&lt;/code&gt; 番目の要素への参照を返します。</target>
        </trans-unit>
        <trans-unit id="49c07d736b9df0517fbba6cc7e05a9eafafd0457" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r.popFront&lt;/code&gt; advances to the next element in the range.</source>
          <target state="translated">&lt;code&gt;r.popFront&lt;/code&gt; は、範囲内の次の要素に進みます。</target>
        </trans-unit>
        <trans-unit id="03e39f666e8ff147ad6b6dc8a0ff7c40edcf747a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r.popFront&lt;/code&gt; can be called if and only if evaluating &lt;code&gt;r.empty&lt;/code&gt; has, or would have, equaled &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r.popFront&lt;/code&gt; は、 &lt;code&gt;r.empty&lt;/code&gt; の評価が &lt;code&gt;false&lt;/code&gt; に等しいか、そうである場合にのみ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="45425e928901d43b7c9007bba36a4e02162c3a42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r&lt;/code&gt; advanced to the first occurrence of two adjacent elements that satisfy the given predicate. If there are no such two elements, returns &lt;code&gt;r&lt;/code&gt; advanced until empty.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; は、指定された述部を満たす2つの隣接する要素の最初の出現に進みました。そのような2つの要素がない場合は、空になるまで &lt;code&gt;r&lt;/code&gt; advancedを返します。</target>
        </trans-unit>
        <trans-unit id="11bb7f38ea0c23dd1df658dfc6cfd544881c52c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r&lt;/code&gt; must be a random-access range with length. &lt;code&gt;n&lt;/code&gt; must be less than or equal to &lt;code&gt;r.length&lt;/code&gt;. If no RNG is specified, &lt;code&gt;rndGen&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; は、長さのランダムアクセス範囲でなければなりません。 &lt;code&gt;n&lt;/code&gt; は &lt;code&gt;r.length&lt;/code&gt; 以下でなければなりません。RNGが指定されていない場合は、 &lt;code&gt;rndGen&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="da6cb3cc16e9187eebb9753b8301da3699b87ada" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r[pivot]&lt;/code&gt; is swapped to &lt;code&gt;r[k]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;r[pivot]&lt;/code&gt; は &lt;code&gt;r[k]&lt;/code&gt; スワップされます</target>
        </trans-unit>
        <trans-unit id="75528cc8ea4ca3059d520e5cbbdcdb8078984b9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;range&lt;/code&gt; with &lt;code&gt;n&lt;/code&gt; elements dropped</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; を有する &lt;code&gt;n&lt;/code&gt; 個の要素は、ドロップ</target>
        </trans-unit>
        <trans-unit id="47ab73990ea3858b873e813654c0700f917d618a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;range&lt;/code&gt; with up to &lt;code&gt;n&lt;/code&gt; elements dropped</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; 最大 &lt;code&gt;n&lt;/code&gt; 個の要素がドロップされた範囲</target>
        </trans-unit>
        <trans-unit id="51de97b8f207a648c1f4d661babb19e96cb91a05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawWrite&lt;/code&gt; always writes in binary mode on Windows.</source>
          <target state="translated">&lt;code&gt;rawWrite&lt;/code&gt; は、Windowsでは常にバイナリモードで書き込みます。</target>
        </trans-unit>
        <trans-unit id="7e01cc52b2fb39cae323fcbb92dd524e80347e92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;re&lt;/code&gt; parameter can be one of three types:</source>
          <target state="translated">&lt;code&gt;re&lt;/code&gt; パラメータは、次の3つのタイプのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="9f5e9e6d00cc09a02683bc78dffa8ff6fb85f34f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;real&lt;/code&gt; is not supported, because its size is implementation-dependent and therefore could vary from machine to machine (which could make it unusable if you tried to transfer it to another machine).</source>
          <target state="translated">&lt;code&gt;real&lt;/code&gt; そのサイズは実装に依存しているため、マシンごとに異なる可能性があるため、実数はサポートされていません（別のマシンに転送しようとした場合に使用できなくなる可能性があります）。</target>
        </trans-unit>
        <trans-unit id="8c40895248f80db003f0fbe8781e5e9f4a2a0773" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reallocate&lt;/code&gt; does not attempt to use &lt;code&gt;Allocator.reallocate&lt;/code&gt; even if defined. This is deliberate so allocators may use it internally within their own implementation of &lt;code&gt;reallocate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reallocate&lt;/code&gt; は、定義されていても &lt;code&gt;Allocator.reallocate&lt;/code&gt; の使用を試みません。これは意図的なものであるため、アロケータは独自の &lt;code&gt;reallocate&lt;/code&gt; の実装内で内部的に使用できます。</target>
        </trans-unit>
        <trans-unit id="9dd5860f115951d36e1f86e186eb1c5079118b9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reallocate&lt;/code&gt; works as follows. If &lt;code&gt;primary.owns(b)&lt;/code&gt;, then &lt;code&gt; primary.reallocate(b, newSize)&lt;/code&gt; is attempted. If it fails, an attempt is made to move the allocation from &lt;code&gt;primary&lt;/code&gt; to &lt;code&gt;fallback&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reallocate&lt;/code&gt; は次のように機能します。場合 &lt;code&gt;primary.owns(b)&lt;/code&gt; は、その後、 &lt;code&gt; primary.reallocate(b, newSize)&lt;/code&gt; 試みられています。失敗した場合、割り当てを &lt;code&gt;primary&lt;/code&gt; から &lt;code&gt;fallback&lt;/code&gt; に移動する試みが行われます。</target>
        </trans-unit>
        <trans-unit id="e269b93fff7df8dc53d3774c6da5a14d7fb8db6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduce!((a, b) =&amp;gt; a + b)([1, 2, 3, 4])&lt;/code&gt; returns &lt;code&gt;10&lt;/code&gt;. This is the old implementation of &lt;code&gt;fold&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reduce!((a, b) =&amp;gt; a + b)([1, 2, 3, 4])&lt;/code&gt; は &lt;code&gt;10&lt;/code&gt; を返します。これは &lt;code&gt;fold&lt;/code&gt; の古い実装です。</target>
        </trans-unit>
        <trans-unit id="71c273ae8de7dc1231647f39241604ef79ab6c96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ref&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="a6f5f10cc217e4f1cac077c32c1493718928e341" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ref&lt;/code&gt; argument through which &lt;code&gt;arg&lt;/code&gt; may be assigned</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; &lt;code&gt;arg&lt;/code&gt; を割り当てることができる参照引数</target>
        </trans-unit>
        <trans-unit id="204baff180e7e3a468a1f9c56b74a65a751e70cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ref&lt;/code&gt; can be used to update the original elements:</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; を使用して、元の要素を更新できます。</target>
        </trans-unit>
        <trans-unit id="e8269973bbdb978f0397e67fc8a6355eb51b2130" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ref&lt;/code&gt; can not be applied to the index values.</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; はインデックス値に適用できません。</target>
        </trans-unit>
        <trans-unit id="932eeb15c70bdcc684754cbc9bc11f2688ddcc81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;relTolerance&lt;/code&gt; shall be normal positive real.</source>
          <target state="translated">&lt;code&gt;relTolerance&lt;/code&gt; は通常の正の実数です。</target>
        </trans-unit>
        <trans-unit id="1076698319f98e76706f3fc28826ddcc4b9b7224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove(key)&lt;/code&gt; does nothing if the given</source>
          <target state="translated">&lt;code&gt;remove(key)&lt;/code&gt; 指定された場合、remove（key）は何もしません</target>
        </trans-unit>
        <trans-unit id="cef283158d0f1a50261d4f80c63bd68c62f99e27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remquo&lt;/code&gt; and &lt;code&gt;remainder&lt;/code&gt; not supported on Windows.</source>
          <target state="translated">&lt;code&gt;remquo&lt;/code&gt; および &lt;code&gt;remainder&lt;/code&gt; はWindowsではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="2ecbc7094325c066ef8cdf3361653dbbfc37ce1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rename&lt;/code&gt; uses the passed &lt;code&gt;names&lt;/code&gt; and returns a new &lt;a href=&quot;#Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt; using these names, with the content unchanged. If fewer names are passed than there are members of the &lt;a href=&quot;#Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt; then those trailing members are unchanged. An empty string will remove the name for that member. It is an compile-time error to pass more names than there are members of the &lt;a href=&quot;#Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;rename&lt;/code&gt; は渡された &lt;code&gt;names&lt;/code&gt; を使用し、これらの名前を使用してコンテンツを変更せずに新しい&lt;a href=&quot;#Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt;を返します。&lt;a href=&quot;#Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt;メンバーよりも少ない名前が渡される場合、それらの末尾のメンバーは変更されません。空の文字列は、そのメンバーの名前を削除します。&lt;a href=&quot;#Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; の&lt;/a&gt;メンバーよりも多くの名前を渡すと、コンパイル時エラーになります。</target>
        </trans-unit>
        <trans-unit id="f5cb9eecaf9f022d0a8470e17dd2137035c24912" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolveInternalPointer&lt;/code&gt; is defined if and only if both allocators define it.</source>
          <target state="translated">&lt;code&gt;resolveInternalPointer&lt;/code&gt; は、両方のアロケータで定義されている場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="cc87f8f1d317e08f1002d55d8c9053664da7610a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return scope&lt;/code&gt; can be applied to the &lt;code&gt;this&lt;/code&gt; of class and interface member functions.</source>
          <target state="translated">&lt;code&gt;return scope&lt;/code&gt; は、クラスおよびインターフェイスメンバー関数の &lt;code&gt;this&lt;/code&gt; に適用できます。</target>
        </trans-unit>
        <trans-unit id="0a098ce0d05675d45db864ce47dfe56507839992" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 属性を返す</target>
        </trans-unit>
        <trans-unit id="4c4e55e29e207e9b091c1a308208acc22bbe6d2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; exits the current function and supplies its return value.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; は現在の関数を終了し、その戻り値を提供します。</target>
        </trans-unit>
        <trans-unit id="0d1e4e7673cd67124b7c2117ce90a093529e4757" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; indicates that either the return value of the function or the first parameter is a pointer derived from the &lt;code&gt;return&lt;/code&gt; parameter or any other parameters also marked &lt;code&gt;return&lt;/code&gt;. For constructors, &lt;code&gt;return&lt;/code&gt; applies to the (implicitly returned) &lt;code&gt;this&lt;/code&gt; reference. For void functions, &lt;code&gt;return&lt;/code&gt; applies to the first parameter</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; は、関数の戻り値または最初のパラメーターのいずれかが、 &lt;code&gt;return&lt;/code&gt; パラメーターまたは &lt;code&gt;return&lt;/code&gt; とマークされた他のパラメーターから派生したポインターであることを示します。コンストラクターの場合、 &lt;code&gt;return&lt;/code&gt; は（暗黙的に返される） &lt;code&gt;this&lt;/code&gt; 参照に適用されます。 void関数の場合、 &lt;code&gt;return&lt;/code&gt; は最初のパラメーターに適用されます</target>
        </trans-unit>
        <trans-unit id="b4d1e67726ee639f9a5c7f346530a61fa00f8ba1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;roundRobin(r1, r2, r3)&lt;/code&gt; yields &lt;code&gt;r1.front&lt;/code&gt;, then &lt;code&gt;r2.front&lt;/code&gt;, then &lt;code&gt;r3.front&lt;/code&gt;, after which it pops off one element from each and continues again from &lt;code&gt;r1&lt;/code&gt;. For example, if two ranges are involved, it alternately yields elements off the two ranges. &lt;code&gt;roundRobin&lt;/code&gt; stops after it has consumed all ranges (skipping over the ones that finish early).</source>
          <target state="translated">&lt;code&gt;roundRobin(r1, r2, r3)&lt;/code&gt; は、 &lt;code&gt;r1.front&lt;/code&gt; 、次に &lt;code&gt;r2.front&lt;/code&gt; 、次に &lt;code&gt;r3.front&lt;/code&gt; を生成します。その後、各要素から1つの要素をポップオフし、 &lt;code&gt;r1&lt;/code&gt; から再開します。たとえば、2つの範囲が関係している場合、2つの範囲から要素が交互に生成されます。 &lt;code&gt;roundRobin&lt;/code&gt; は、すべての範囲を消費した後に停止します（早期に終了する範囲をスキップします）。</target>
        </trans-unit>
        <trans-unit id="0f5bb74811faa1591cdad4c836be024aee1e88e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;roundingFunction(n) &amp;gt;= n&lt;/code&gt; for all &lt;code&gt;n&lt;/code&gt; of type &lt;code&gt;size_t&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;roundingFunction(n) &amp;gt;= n&lt;/code&gt; 全てについて &lt;code&gt;n&lt;/code&gt; 型の &lt;code&gt;size_t&lt;/code&gt; の、</target>
        </trans-unit>
        <trans-unit id="308b72cef8c5b530189638ec876ae903345922ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;roundingFunction&lt;/code&gt; must be &lt;code&gt;nothrow&lt;/code&gt;, &lt;code&gt;@safe&lt;/code&gt;, &lt;code&gt;@nogc&lt;/code&gt; and &lt;code&gt;pure&lt;/code&gt;, i.e. always return the same value for a given &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;roundingFunction&lt;/code&gt; は &lt;code&gt;nothrow&lt;/code&gt; 、 &lt;code&gt;@safe&lt;/code&gt; 、 &lt;code&gt;@nogc&lt;/code&gt; 、および &lt;code&gt;pure&lt;/code&gt; でなければなりません。つまり、指定された &lt;code&gt;n&lt;/code&gt; に対して常に同じ値を返します。</target>
        </trans-unit>
        <trans-unit id="109cdbe06887b34b6b16365fe723cf15c4d1291a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;roundingFunction&lt;/code&gt; must be monotonically increasing, i.e. &lt;code&gt;roundingFunction(n1) &amp;lt;= roundingFunction(n2)&lt;/code&gt; for all &lt;code&gt;n1 &amp;lt; n2&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;roundingFunction&lt;/code&gt; は単調増加でなければなりません。つまり、すべての &lt;code&gt;n1 &amp;lt; n2&lt;/code&gt; に対して、 &lt;code&gt;roundingFunction(n1) &amp;lt;= roundingFunction(n2)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d2742c8e141b08b59565abb12504e62ecd5fa332" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;roundingFunction&lt;/code&gt; must satisfy three constraints. These are not enforced (save for the use of &lt;code&gt;assert&lt;/code&gt;) for the sake of efficiency.</source>
          <target state="translated">&lt;code&gt;roundingFunction&lt;/code&gt; は3つの制約を満たさなければなりません。これらは、効率化のために強制されていません（ &lt;code&gt;assert&lt;/code&gt; の使用のために保存されています）。</target>
        </trans-unit>
        <trans-unit id="c8420b0329603c1302842ffb196fac98e4ea5918" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; turned into an expression, &lt;code&gt;ErrorExp&lt;/code&gt; if an error occurred</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; は式に &lt;code&gt;ErrorExp&lt;/code&gt; 、エラーが発生した場合はErrorExp</target>
        </trans-unit>
        <trans-unit id="dd6c5560263e9d7106d8390afa95f09a9dcd7c46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save&lt;/code&gt; works as normal and operates on a new range, so if &lt;code&gt;save&lt;/code&gt; is ever called on the &lt;code&gt;RefRange&lt;/code&gt;, then no operations on the saved range will affect the original.</source>
          <target state="translated">&lt;code&gt;save&lt;/code&gt; は通常どおりに動作し、新しい範囲で動作するため、 &lt;code&gt;RefRange&lt;/code&gt; で &lt;code&gt;save&lt;/code&gt; が呼び出された場合、保存された範囲での操作は元の範囲に影響しません。</target>
        </trans-unit>
        <trans-unit id="c1856b9100bdac38994d4cdb68f1848445200c7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="605b97283af3bfaf0042af48044ab3db174a5e7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt; cannot be applied to globals, statics, data members, ref or out parameters. Arrays of &lt;code&gt;scope&lt;/code&gt;s are not allowed, and &lt;code&gt;scope&lt;/code&gt; function return values are not allowed. Assignment to a &lt;code&gt;scope&lt;/code&gt;, other than initialization, is not allowed. &lt;code&gt;Rationale:&lt;/code&gt; These restrictions may get relaxed in the future if a compelling reason to appears.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; は、グローバル、静的、データメンバー、参照または出力パラメーターに適用できません。 &lt;code&gt;scope&lt;/code&gt; の配列は許可されていません。また、 &lt;code&gt;scope&lt;/code&gt; 関数の戻り値は許可されていません。初期化以外の &lt;code&gt;scope&lt;/code&gt; への割り当ては許可されていません。 &lt;code&gt;Rationale:&lt;/code&gt; やむを得ない理由が現れた場合、これらの制限は将来緩和されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="de58cba1b63566938adce3e13bef6a93cbd5e801" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt; ensures that no references to the pointed-to object are retained, in global variables or pointers passed to the function (and recursively to other functions called in the function), as a result of calling the function. Variables in the function body and parameter list that are &lt;code&gt;scope&lt;/code&gt; may have their allocations elided as a result.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; は、関数を呼び出した結果として、関数に渡されたグローバル変数またはポインター（および関数内で呼び出された他の関数に再帰的に）で、指し示されたオブジェクトへの参照が保持されないようにします。 &lt;code&gt;scope&lt;/code&gt; である関数本体およびパラメーターリストの変数は、結果として割り当てが省略される場合があります。</target>
        </trans-unit>
        <trans-unit id="7e11f308a204e081f111ee3bf2a5a482b9381e79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scopedTask&lt;/code&gt; might be preferred over &lt;code&gt;task&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;scopedTask&lt;/code&gt; は &lt;code&gt;task&lt;/code&gt; よりも優先される場合があります。</target>
        </trans-unit>
        <trans-unit id="6408fb12bc31b661581f337ae2267afe0bfc681c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self&lt;/code&gt;: an alias to the function itself;</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; ：関数自体のエイリアス。</target>
        </trans-unit>
        <trans-unit id="f05d3272cc81781898ada7fb162b5d7951fba66d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seq&lt;/code&gt; advanced to the first matching element, or until empty if there are no matching elements.</source>
          <target state="translated">&lt;code&gt;seq&lt;/code&gt; は最初に一致する要素に進みます。一致する要素がない場合は空になるまで進みます。</target>
        </trans-unit>
        <trans-unit id="06257616c41cacb4ce31abd296b3a46dd70958b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shared&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;shared&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="9b6ab6f176994589d27d564332f0146fa64462d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shared&lt;/code&gt;. When a postblit is qualified with &lt;code&gt;shared&lt;/code&gt; as in &lt;code&gt;this(this) shared&lt;/code&gt; or &lt;code&gt;shared this(this)&lt;/code&gt; solely &lt;code&gt;shared&lt;/code&gt; objects may invoke the postblit; attempts of postbliting unshared objects will result in compile time errors:</source>
          <target state="translated">&lt;code&gt;shared&lt;/code&gt; 。 &lt;code&gt;this(this) shared&lt;/code&gt; または &lt;code&gt;shared this(this)&lt;/code&gt; のようにpostblitがsharedで修飾 &lt;code&gt;shared&lt;/code&gt; れている場合、 &lt;code&gt;shared&lt;/code&gt; オブジェクトのみがpostblitを呼び出すことができます。非共有オブジェクトをポストブリットしようとすると、コンパイル時にエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="e79d49bb12749d54349a7e1da24c925d0a9c9b5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sharedLog&lt;/code&gt; is only thread-safe if the the used &lt;code&gt;Logger&lt;/code&gt; is thread-safe. The default &lt;code&gt;Logger&lt;/code&gt; is thread-safe.</source>
          <target state="translated">&lt;code&gt;sharedLog&lt;/code&gt; は、使用される &lt;code&gt;Logger&lt;/code&gt; がスレッドセーフである場合にのみスレッドセーフです。デフォルトの &lt;code&gt;Logger&lt;/code&gt; はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="223c9c7bd3e5173b52c93ac3449e4ed7df37d6c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size_t&lt;/code&gt; 0 for end of file, otherwise number of characters read</source>
          <target state="translated">&lt;code&gt;size_t&lt;/code&gt; ファイルの終わりはsize_t 0、それ以外の場合は読み込まれる文字数</target>
        </trans-unit>
        <trans-unit id="af795f4bf44eb535dac720ea8eb18ebdff49cd50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size_t&lt;/code&gt; and &lt;code&gt;ptrdiff_t&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;size_t&lt;/code&gt; および &lt;code&gt;ptrdiff_t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="481bc787f0b1a627493311fd994efbba2ed4cc7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size_t&lt;/code&gt; is an alias to one of the unsigned integral basic types, and represents a type that is large enough to represent an offset into all addressable memory.</source>
          <target state="translated">&lt;code&gt;size_t&lt;/code&gt; は、符号なし整数基本型の1つの別名であり、すべてのアドレス可能なメモリへのオフセットを表すのに十分な大きさの型を表します。</target>
        </trans-unit>
        <trans-unit id="df033de8837c1e0c009462fae21291df75580008" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sort&lt;/code&gt; returns a &lt;a href=&quot;std_range#SortedRange&quot;&gt;&lt;code&gt;std.range.SortedRange&lt;/code&gt;&lt;/a&gt; over the original range, allowing functions that can take advantage of sorted data to know that the range is sorted and adjust accordingly. The &lt;a href=&quot;std_range#SortedRange&quot;&gt;&lt;code&gt;std.range.SortedRange&lt;/code&gt;&lt;/a&gt; is a wrapper around the original range, so both it and the original range are sorted. Other functions can't know that the original range has been sorted, but they</source>
          <target state="translated">&lt;code&gt;sort&lt;/code&gt; は、元の範囲に対して&lt;a href=&quot;std_range#SortedRange&quot;&gt; &lt;code&gt;std.range.SortedRange&lt;/code&gt; &lt;/a&gt;を返します。これにより、ソートされたデータを利用できる関数は、範囲がソートされていることを認識し、それに応じて調整できます。&lt;a href=&quot;std_range#SortedRange&quot;&gt; &lt;code&gt;std.range.SortedRange&lt;/code&gt; は&lt;/a&gt;それと元の範囲の両方がソートされるように、元の範囲のラッパーです。他の関数は、元の範囲が並べ替えられたことを認識できませんが、</target>
        </trans-unit>
        <trans-unit id="e4c6ea564f371d9ede380d1ded149063253741d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startsWith(&quot;hello, world&quot;, &quot;hello&quot;)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;startsWith(&quot;hello, world&quot;, &quot;hello&quot;)&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="069e9e4c4fa70b43d41f1efd77f832e5ed569318" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static foreach&lt;/code&gt; supports multiple variables in cases where the corresponding &lt;code&gt;foreach&lt;/code&gt; statement supports them. (In this case, &lt;code&gt;static foreach&lt;/code&gt; generates a compile-time sequence of tuples, and the tuples are subsequently unpacked during iteration).</source>
          <target state="translated">&lt;code&gt;static foreach&lt;/code&gt; は、対応する &lt;code&gt;foreach&lt;/code&gt; ステートメントが複数の変数をサポートしている場合に複数の変数をサポートします。（この場合、 &lt;code&gt;static foreach&lt;/code&gt; はタプルのコンパイル時シーケンスを生成し、その後、反復中にタプルが解凍されます）。</target>
        </trans-unit>
        <trans-unit id="9b479c5ce0a7bcc0a387d731c3bea31274eb3618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static foreach&lt;/code&gt; supports multiple variables in cases where the corresponding &lt;code&gt;foreach&lt;/code&gt; statement supports them. (In this case, &lt;code&gt;static foreach&lt;/code&gt; generates a compile-time sequence of tuples, and the tuples are subsequently unpacked during iteration.)</source>
          <target state="translated">&lt;code&gt;static foreach&lt;/code&gt; は、対応する &lt;code&gt;foreach&lt;/code&gt; ステートメントがそれらをサポートする場合に、複数の変数をサポートします。（この場合、 &lt;code&gt;static foreach&lt;/code&gt; はタプルのコンパイル時シーケンスを生成し、その後、タプルは反復中にアンパックされます。）</target>
        </trans-unit>
        <trans-unit id="6f937f4e1c8d330cfe36aa5a7dac2283a0e18588" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static opCall&lt;/code&gt; also works as expected for a function call operator with type names.</source>
          <target state="translated">&lt;code&gt;static opCall&lt;/code&gt; は、型名を持つ関数呼び出し演算子でも期待どおりに機能します。</target>
        </trans-unit>
        <trans-unit id="58e93a06ab727109993d9039f8909c7568769569" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;static&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="f861a00c2c4e8f4a3c18c76a83270bfdfb229222" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static&lt;/code&gt; cannot be used with selective imports.</source>
          <target state="translated">&lt;code&gt;static&lt;/code&gt; は、選択的インポートでは使用できません。</target>
        </trans-unit>
        <trans-unit id="0c05b4bf3a0823e983b650821a7fea25264f6966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;staticArray&lt;/code&gt; returns by value, so expressions involving large arrays may be inefficient.</source>
          <target state="translated">&lt;code&gt;staticArray&lt;/code&gt; は値によって返されるため、大きな配列を含む式は非効率的です。</target>
        </trans-unit>
        <trans-unit id="d186527edac8a16bdcca857733d1babbfdb6d0fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std.parallelism&lt;/code&gt; implements high-level primitives for SMP parallelism. These include parallel foreach, parallel reduce, parallel eager map, pipelining and future/promise parallelism. &lt;code&gt;std.parallelism&lt;/code&gt; is recommended when the same operation is to be executed in parallel on different data, or when a function is to be executed in a background thread and its result returned to a well-defined main thread. For communication between arbitrary threads, see &lt;code&gt;std.concurrency&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std.parallelism&lt;/code&gt; は、SMP並列処理のための高レベルのプリミティブを実装します。これらには、並列foreach、並列削減、並列eagerマップ、パイプライン処理、未来/約束並列処理が含まれます。 &lt;code&gt;std.parallelism&lt;/code&gt; は、同じ操作を異なるデータに対して並列で実行する場合、または関数をバックグラウンドスレッドで実行してその結果を明確に定義されたメインスレッドに返す場合に推奨されます。任意のスレッド間の通信については、 &lt;code&gt;std.concurrency&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e539f2e5797833bc4d4c570169e4fef76e97deff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std.parallelism&lt;/code&gt; is based on the concept of a &lt;code&gt;Task&lt;/code&gt;. A &lt;code&gt;Task&lt;/code&gt; is an object that represents the fundamental unit of work in this library and may be executed in parallel with any other &lt;code&gt;Task&lt;/code&gt;. Using &lt;code&gt;Task&lt;/code&gt; directly allows programming with a future/promise paradigm. All other supported parallelism paradigms (parallel foreach, map, reduce, pipelining) represent an additional level of abstraction over &lt;code&gt;Task&lt;/code&gt;. They automatically create one or more &lt;code&gt;Task&lt;/code&gt; objects, or closely related types that are conceptually identical but not part of the public API.</source>
          <target state="translated">&lt;code&gt;std.parallelism&lt;/code&gt; は &lt;code&gt;Task&lt;/code&gt; の概念に基づいています。A &lt;code&gt;Task&lt;/code&gt; このライブラリの作業の基本単位を表し、他のと並行して実行することができるオブジェクトである &lt;code&gt;Task&lt;/code&gt; 。使用する &lt;code&gt;Task&lt;/code&gt; 直接、将来/約束のパラダイムを使用してプログラミングすることができます。サポートされている他のすべての並列処理パラダイム（並列foreach、map、reduce、パイプライン）は、 &lt;code&gt;Task&lt;/code&gt; よりも高いレベルの抽象化を表しています。これらは自動的に1つ以上の &lt;code&gt;Task&lt;/code&gt; オブジェクト、または概念的には同じであるがパブリックAPIの一部ではない密接に関連するタイプを作成します。</target>
        </trans-unit>
        <trans-unit id="d51ba1cf1d887be72a4c35b6e027f3b0b776e392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strictlyOrdered(1, 1, 2, 3)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strictlyOrdered(1, 1, 2, 3)&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b18ef91248deb0535ed182732bf3a2e7452fccd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stride&lt;/code&gt; will only analyze the first &lt;code&gt;str[index]&lt;/code&gt; element. It will not fully verify the validity of the UTF sequence, nor even verify the presence of the sequence: it will not actually guarantee that &lt;code&gt;index + stride(str, index) &amp;lt;= str.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stride&lt;/code&gt; は最初の &lt;code&gt;str[index]&lt;/code&gt; 要素のみを分析します。UTFシーケンスの有効性を完全に検証することも、シーケンスの存在を検証することもありません。実際には、 &lt;code&gt;index + stride(str, index) &amp;lt;= str.length&lt;/code&gt; ことを保証しません。</target>
        </trans-unit>
        <trans-unit id="3524e11e2cd1a4bae8c339623913a2a68d9caf67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strideBack&lt;/code&gt; will only analyze the element at &lt;code&gt;str[index - 1]&lt;/code&gt; element. It will not fully verify the validity of the UTF sequence, nor even verify the presence of the sequence: it will not actually guarantee that &lt;code&gt;strideBack(str, index) &amp;lt;= index&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strideBack&lt;/code&gt; は &lt;code&gt;str[index - 1]&lt;/code&gt; 要素の要素のみを分析します。UTFシーケンスの有効性を完全に検証することも、シーケンスの存在を検証することもありません。実際には、 &lt;code&gt;strideBack(str, index) &amp;lt;= index&lt;/code&gt; ことを保証しません。</target>
        </trans-unit>
        <trans-unit id="815abb2cb935d9d225a7cd705522e3fbcba850f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; - service name or port number</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; -サービス名またはポート番号</target>
        </trans-unit>
        <trans-unit id="70ead95fb34de5f02a9f1b5d84525c2ccc28179b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;union&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, and &lt;code&gt;interface&lt;/code&gt; are formatted by calling &lt;code&gt;toString&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 、 &lt;code&gt;union&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; 、および &lt;code&gt;interface&lt;/code&gt; は、 &lt;code&gt;toString&lt;/code&gt; を呼び出すことによってフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="6b94224ee093a8b123c1a890be96840068352cc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stuff&lt;/code&gt; can be a value convertible to &lt;code&gt;T&lt;/code&gt; or a range of objects convertible to &lt;code&gt;T&lt;/code&gt;. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">&lt;code&gt;stuff&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; に変換可能な値、または &lt;code&gt;T&lt;/code&gt; に変換可能なオブジェクトの範囲です。安定版は同じように動作しますが、コンテナを反復する範囲が無効化されないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="12300e292a3239ecad42ff3d93d0648b61fb7834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super&lt;/code&gt; is identical to &lt;code&gt;this&lt;/code&gt;, except that it is cast to &lt;code&gt;this&lt;/code&gt;'s base class. It is an error if there is no base class. It is an error to use &lt;code&gt;super&lt;/code&gt; within a struct member function. (Only class &lt;code&gt;Object&lt;/code&gt; has no base class.) If a member function is called with an explicit reference to &lt;code&gt;super&lt;/code&gt;, a non-virtual call is made.</source>
          <target state="translated">&lt;code&gt;super&lt;/code&gt; と同じです &lt;code&gt;this&lt;/code&gt; それがキャストされていることを除いて、 &lt;code&gt;this&lt;/code&gt; の基本クラス。基本クラスがない場合はエラーになります。構造体メンバー関数内で &lt;code&gt;super&lt;/code&gt; を使用するとエラーになります。（クラス &lt;code&gt;Object&lt;/code&gt; にのみ基本クラスはありません。）メンバー関数が &lt;code&gt;super&lt;/code&gt; への明示的な参照で呼び出されると、非仮想呼び出しが行われます。</target>
        </trans-unit>
        <trans-unit id="5d3e225f1cfb66733f5c5c3a82747e4de13d407e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; with strings</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 文字列で切り替える</target>
        </trans-unit>
        <trans-unit id="e1ab526b163fcaca146d0f4387c01f84d9d8e8ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synchronized&lt;/code&gt; and &lt;a href=&quot;https://dlang.org/phobos/core_sync.html&quot;&gt;&lt;code&gt;core.sync&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;synchronized&lt;/code&gt; 、&lt;a href=&quot;https://dlang.org/phobos/core_sync.html&quot;&gt; &lt;code&gt;core.sync&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c2ae5b48daba2a435390a96fc178a22c54b9103e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target&lt;/code&gt; shall have enough room to accommodate the entirety of &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; は、 &lt;code&gt;source&lt;/code&gt; 全体を収容するのに十分なスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="4b618d9a887c9286570dc763d1956279cd9a67d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; inside &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;union&lt;/code&gt; member functions;</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; は &lt;code&gt;struct&lt;/code&gt; と &lt;code&gt;union&lt;/code&gt; メンバー関数の内部です。</target>
        </trans-unit>
        <trans-unit id="1dd7c7da4f2db512c36ff60aea324bbf46d7f1eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="cdd590867d10eda8e591ba3c504661cc4d5c524a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tickDuration.&lt;/code&gt;&lt;a href=&quot;std_conv#to&quot;&gt;&lt;code&gt;to&lt;/code&gt;&lt;/a&gt;&lt;code&gt;!Duration()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tickDuration.&lt;/code&gt;&lt;a href=&quot;std_conv#to&quot;&gt;&lt;code&gt;to&lt;/code&gt;&lt;/a&gt;&lt;code&gt;!Duration()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0bd3c31ca7c7f29752ad58a8ef9e6ff27520e91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toHash&lt;/code&gt; is rarely directly invoked; it is implicitly used when BigInt is used as the key of an associative array.</source>
          <target state="translated">&lt;code&gt;toHash&lt;/code&gt; が直接呼び出されることはほとんどありません。BigIntが連想配列のキーとして使用される場合、暗黙的に使用されます。</target>
        </trans-unit>
        <trans-unit id="82ec7686ea934cd2f18c7f60e28371c82c9f447d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toParent()&lt;/code&gt; returns a logically enclosing scope symbol this is a member of. It skips over TemplateMixin's.</source>
          <target state="translated">&lt;code&gt;toParent()&lt;/code&gt; は、これがメンバーである論理的に囲まれたスコープシンボルを返します。TemplateMixinをスキップします。</target>
        </trans-unit>
        <trans-unit id="0083bc7cd319ebdfebdf2e1edfc6c99f806fcb76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toParent2()&lt;/code&gt; returns an enclosing scope symbol this is living at runtime. It skips over both TemplateInstance's and TemplateMixin's. It's used when looking for the 'this' pointer of the enclosing function/class.</source>
          <target state="translated">&lt;code&gt;toParent2()&lt;/code&gt; は、これが実行時に存在する囲みスコープシンボルを返します。TemplateInstanceとTemplateMixinの両方をスキップします。囲んでいる関数/クラスの「this」ポインタを探すときに使用されます。</target>
        </trans-unit>
        <trans-unit id="73cfc104297a470e42637ccf91c2c36ee3245422" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toParentDecl()&lt;/code&gt; similar to &lt;code&gt;toParent2()&lt;/code&gt; but always follows the template declaration scope instead of the instantiation scope.</source>
          <target state="translated">&lt;code&gt;toParentDecl()&lt;/code&gt; に類似 &lt;code&gt;toParent2()&lt;/code&gt; が、常にテンプレート宣言スコープの代わりにインスタンス化範囲に従います。</target>
        </trans-unit>
        <trans-unit id="a94d9760694ab57714a8a469c5e5cfc3daa57828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toParentLocal()&lt;/code&gt; similar to &lt;code&gt;toParentDecl()&lt;/code&gt; but follows the instantiation scope if a template declaration is non-local i.e. global or static.</source>
          <target state="translated">&lt;code&gt;toParentLocal()&lt;/code&gt; に似て &lt;code&gt;toParentDecl()&lt;/code&gt; が、テンプレート宣言は、非ローカルすなわちグローバルまたは静的なものである場合、インスタンスのスコープに従います。</target>
        </trans-unit>
        <trans-unit id="1390a2eb1c2e28916c37115c0998c8521c9afee8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString&lt;/code&gt; is rarely directly invoked; the usual way of using it is via &lt;a href=&quot;std_format#format&quot;&gt;&lt;code&gt;std.format.format&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;toString&lt;/code&gt; が直接呼び出されることはほとんどありません。それを使用する通常の方法は&lt;a href=&quot;std_format#format&quot;&gt; &lt;code&gt;std.format.format&lt;/code&gt; &lt;/a&gt;を介してです：</target>
        </trans-unit>
        <trans-unit id="3bfea05b95eb98e11a8adc4ee7aed975ec8509c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString&lt;/code&gt; should have one of the following signatures:</source>
          <target state="translated">&lt;code&gt;toString&lt;/code&gt; には、次のいずれかの署名が必要です。</target>
        </trans-unit>
        <trans-unit id="005990d2619465a8e0eb37195710b4753844c21d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toUTF16z&lt;/code&gt; is a convenience function for &lt;code&gt;toUTFz!(const(wchar)*)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;toUTF16z&lt;/code&gt; は、 &lt;code&gt;toUTFz!(const(wchar)*)&lt;/code&gt; の便利な関数です。</target>
        </trans-unit>
        <trans-unit id="3034b52ad5e2b666f9d4ac76c8767f747dbc8719" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toUTFz&lt;/code&gt; accepts any type of string and is templated on the type of character pointer that you wish to convert to. It will avoid allocating a new string if it can, but there's a decent chance that it will end up having to allocate a new string - particularly when dealing with character types other than &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;toUTFz&lt;/code&gt; は任意のタイプの文字列を受け入れ、変換先の文字ポインターのタイプにテンプレート化されています。可能であれば新しい文字列の割り当てを回避しますが、特に &lt;code&gt;char&lt;/code&gt; 以外の文字タイプを処理する場合は、新しい文字列を割り当てる必要が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7b0fb0a2af81d4622c3f0ca12fdc722369079377" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tr&lt;/code&gt; is based on &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/tr.html&quot;&gt;Posix's tr&lt;/a&gt;, though it doesn't do everything that the Posix utility does.</source>
          <target state="translated">&lt;code&gt;tr&lt;/code&gt; は&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/tr.html&quot;&gt;Posixのtrに&lt;/a&gt;基づいていますが、Posixユーティリティが行うすべてのことを行うわけではありません。</target>
        </trans-unit>
        <trans-unit id="588c5db26f0574479497abcc48d3bf48bfbf6db3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;S&lt;/code&gt; can be copied. &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;S&lt;/code&gt; をコピーできる場合はtrue。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fcf3589ad960d9be2578a5d3a446eecbfb4e6104" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;Seq&lt;/code&gt; is sorted; otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;Seq&lt;/code&gt; がソートされている場合はtrue。そうでなければ &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7f2a6e0d185693da342465248f1cdf7eba4f160a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a class nested inside another, with the conditions described above; &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; が上記の条件で別のクラスの中にネストされたクラスである場合はtrue。そうでなければ &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08a01985c40be7b92a7f5350b980124535abdb46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a file handle, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; がファイルハンドルの場合はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8567cd36d9c50f8238ab4ae84132dbf24c80defb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;X&lt;/code&gt; is a function, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;X&lt;/code&gt; が関数の場合はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9aa819b66833bb0b0171317b2e1ce1b3bea60f99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;X&lt;/code&gt; is a type, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;X&lt;/code&gt; が型の場合はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e058cf11ca944763bc20d7e2edd7c761ca2be574" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;X&lt;/code&gt; is final, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;X&lt;/code&gt; がfinalの場合はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4803b0700c5c007902d1debfefc0c159c43d6fab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;b&lt;/code&gt; has been allocated with this region, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; がこの領域で割り当てられている場合はtrue、そうでない場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48ffa31f7ed81bcabcb75c22bb37eed8da935d1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;func&lt;/code&gt; is &lt;code&gt;@safe&lt;/code&gt; or &lt;code&gt;@trusted&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;func&lt;/code&gt; がある &lt;code&gt;@safe&lt;/code&gt; か &lt;code&gt;@trusted&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a649d64ab71bc5584e6c4abd2b0fcb8c1a771fe4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;func&lt;/code&gt; is &lt;code&gt;@system&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;func&lt;/code&gt; がある &lt;code&gt;@system&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="95d0ce1a4c8d33c8a989eafdbe862e7a941b8f3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs.ptr == rhs.ptr&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;lhs.ptr == rhs.ptr&lt;/code&gt; 場合はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db55e28196a1c212f4b61f6ad375a9336bc44dc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;name&lt;/code&gt;'s extension is &lt;code&gt;ext&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; の拡張子が &lt;code&gt;ext&lt;/code&gt; の場合はtrue</target>
        </trans-unit>
        <trans-unit id="736ca71e45580c10aa2d52cf7f053eaba4c25c73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;r&lt;/code&gt; is partitioned according to predicate &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;r&lt;/code&gt; が述語 &lt;code&gt;pred&lt;/code&gt; に従って分割されている場合はtrue。</target>
        </trans-unit>
        <trans-unit id="ee04fb6edad869ab006abfb10ae6248745a92500" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;s1 == s2&lt;/code&gt; regardless of case</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; /小文字に関係なく &lt;code&gt;s1 == s2&lt;/code&gt; 場合はtrue</target>
        </trans-unit>
        <trans-unit id="4716ee2fbb535862a27757ab1941b9ff0cb859bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;'s representation embeds a pointer that points to &lt;code&gt;target&lt;/code&gt;'s representation or somewhere inside it.  If &lt;code&gt;source&lt;/code&gt; is or contains a dynamic array, then, then these functions will check if there is overlap between the dynamic array and &lt;code&gt;target&lt;/code&gt;'s representation.  If &lt;code&gt;source&lt;/code&gt; is a class, then it will be handled as a pointer.  If &lt;code&gt;target&lt;/code&gt; is a pointer, a dynamic array or a class, then these functions will only check if &lt;code&gt;source&lt;/code&gt; points to &lt;code&gt;target&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;source&lt;/code&gt; の表現が &lt;code&gt;target&lt;/code&gt; の表現またはその内部のどこかを指すポインターを埋め込む場合はtrue。 &lt;code&gt;source&lt;/code&gt; が動的配列であるか動的配列を含む場合、これらの関数は動的配列と &lt;code&gt;target&lt;/code&gt; の表現の間に重複がないかどうかをチェックします。場合は &lt;code&gt;source&lt;/code&gt; クラスである、それはポインタとして扱われます。場合 &lt;code&gt;target&lt;/code&gt; ポインタ、動的配列またはクラスであり、これらの機能は、場合にのみチェックする &lt;code&gt;source&lt;/code&gt; にポイントを &lt;code&gt;target&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="a621c3bce2014ebc9f189445ee0ff0753e181c01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; is approximately equal to &lt;code&gt;reference&lt;/code&gt; under either criterium. It is sufficient, when &lt;code&gt;value &lt;/code&gt; satisfies one of the two criteria.  If one item is a range, and the other is a single value, then the result is the logical and-ing of calling &lt;code&gt;approxEqual&lt;/code&gt; on each element of the ranged item against the single item. If both items are ranges, then &lt;code&gt;approxEqual&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if and only if the ranges have the same number of elements and if &lt;code&gt;approxEqual&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt; for each pair of elements.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 場合に &lt;code&gt;value&lt;/code&gt; ほぼ等しい &lt;code&gt;reference&lt;/code&gt; のいずれか判断基準の下で。 &lt;code&gt;value &lt;/code&gt; が2つの基準のいずれかを満たす場合は、それで十分です。一方のアイテムが範囲で、もう一方が単一の値である場合、結果は、単一のアイテムに対して範囲アイテムの各要素で &lt;code&gt;approxEqual&lt;/code&gt; を呼び出す論理積になります。両方の項目が範囲である場合、範囲に同じ数の要素があり、 &lt;code&gt;approxEqual&lt;/code&gt; が要素の各ペアに対して &lt;code&gt;true&lt;/code&gt; と評価された場合にのみ、 &lt;code&gt;approxEqual&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="aed899d348bc31c47364d7bcccc68dfd78bd3781" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is a NaN, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; がNaNの場合はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e909c65ed2d088f338774b25ee5916d6c6a31a6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is an integer power of two.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; が2の整数乗である場合はtrue。</target>
        </trans-unit>
        <trans-unit id="01576b38e53f760d7fa441f81b6a38331a755a90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if R is an input range, &lt;code&gt;false&lt;/code&gt; if not</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; Rが入力範囲の場合はtrue、そうでない場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="22105968f4bd62f765fe40f641d7369b250d9b52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if all of the elements in &lt;code&gt;r1&lt;/code&gt; appear the same number of times in &lt;code&gt;r2&lt;/code&gt;. Otherwise, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;r1&lt;/code&gt; のすべての要素が &lt;code&gt;r2&lt;/code&gt; に同じ回数出現する場合はtrue。それ以外の場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="647b425da501748cddce279a9e4a6ef7b9ff0896" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;c&lt;/code&gt; is a valid Unicode code point</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; が有効なUnicodeコードポイントである場合にのみtrue</target>
        </trans-unit>
        <trans-unit id="4521edc34e50fd3161666a50db965c80b72349ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;filename&lt;/code&gt; is not empty, not too long, and does not contain invalid characters.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;filename&lt;/code&gt; が空でなく、長すぎず、無効な文字が含まれていない場合にのみtrue。</target>
        </trans-unit>
        <trans-unit id="6c8531dd442dde642df6adb3732b3ac0bcdbd097" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the array has no elements.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 配列に要素がない場合にのみtrue。</target>
        </trans-unit>
        <trans-unit id="df8b9d49f1b0ad4418768e972f5ff8f26e3eb90f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the two ranges compare equal element for element, according to binary predicate &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; バイナリ述語 &lt;code&gt;pred&lt;/code&gt; に従って、2つの範囲が要素の等しい要素を比較する場合にのみtrue。</target>
        </trans-unit>
        <trans-unit id="43da0fcd50fb3e44bc97d1779a5a0585c003578b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if any elements escaped</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 要素がエスケープした場合はtrue</target>
        </trans-unit>
        <trans-unit id="fd062df197246c3fbf8d28beb36028005e887a34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if any errors occurred during lexing or parsing.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 字句解析または解析中にエラーが発生した場合はtrue。</target>
        </trans-unit>
        <trans-unit id="1d8f7f146e54740a0d8df7019b35493c9329a523" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if assignment to &lt;code&gt;firstArg&lt;/code&gt; would cause an error</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;firstArg&lt;/code&gt; への割り当てによりエラーが発生する場合はtrue</target>
        </trans-unit>
        <trans-unit id="4bf38a0de72bf9a9960cb44c7ba18e39cf09405b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if both arrays are the same length and &lt;code&gt;lhs.ptr == rhs.ptr&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 両方の配列は同じ長さであり、場合 &lt;code&gt;lhs.ptr == rhs.ptr&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="9ac3764e3160f18d1bccd835c289cdb2330d2c25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if both ranges have the same length, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 両方の範囲の長さが同じ場合はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36ceac4ce50650aac661ae00a2ba169845655943" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if both representations are equal, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 両方の表現が等しい場合はtrue、そうでない場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39ff04c17f38cc82afededf77e72dd30164a69f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if construction would cause an escaping reference error</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 構築によってエスケープ参照エラーが発生する場合はtrue</target>
        </trans-unit>
        <trans-unit id="303af4808ad2baecce90c36afc6560330e3d32c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if errors have been diagnosed</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; エラーが診断されている場合はtrue</target>
        </trans-unit>
        <trans-unit id="c5afd4cd9e62983cefa444c2a133f0d9bf5e1e04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if function is really nested within other function.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 関数が実際に他の関数内にネストされている場合はtrue。</target>
        </trans-unit>
        <trans-unit id="3ea300fe97ac7f51e74b492d018077cf50054e6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if it does</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; もしそうなら真</target>
        </trans-unit>
        <trans-unit id="2cbf067aba4bdad738328a3ce75e53fb26ca7370" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if it is special</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 特別な場合はtrue</target>
        </trans-unit>
        <trans-unit id="4d04befd9f2d20f70003eb9aafeba4dd0a334180" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if it received a message and &lt;code&gt;false&lt;/code&gt; if it timed out waiting for one.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; メッセージを受信した場合はtrue、メッセージの待機中にタイムアウトした場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d307d51918d914c77ec41a0e6892c2e4866f78ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if no errors</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; エラーがない場合はtrue</target>
        </trans-unit>
        <trans-unit id="d1f8d85b30851e65377e6627837464bf19f191dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if normalization completed normally, &lt;code&gt;false&lt;/code&gt; if all elements in &lt;code&gt;range&lt;/code&gt; were zero or if &lt;code&gt;range&lt;/code&gt; is empty.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 正規化が正常に完了した場合はtrue、 &lt;code&gt;range&lt;/code&gt; すべての要素がゼロの場合、または &lt;code&gt;range&lt;/code&gt; が空の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aed7c27f1c7731761f2c1cd71c40b58e2f287d79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if pattern matches path, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; パターンがパスと一致する場合はtrue、そうでない場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="461691066f4a233761207873a6c1a5621c8a2fe4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if pointers to the stack can escape</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; スタックへのポインタがエスケープできる場合はtrue</target>
        </trans-unit>
        <trans-unit id="eac3e452588356a664a212ed933cbc90570f8f52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if pointers to the stack can escape via assignment</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; スタックへのポインタが割り当てによってエスケープできる場合はtrue</target>
        </trans-unit>
        <trans-unit id="60ca524063ed35647335cc75fabf9b2110a7e50f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if references to the stack can escape</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; スタックへの参照がエスケープできる場合はtrue</target>
        </trans-unit>
        <trans-unit id="f3f56d935c90d3b16b4684a1b5724de202629d96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if special</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 特別なら真</target>
        </trans-unit>
        <trans-unit id="caf43bf9888cecf7cf63ded7f3c6d3b0af21f554" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if statement 'comes from' somewhere else, like a goto</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; if文は後藤のように、どこか別の場所「から来ています」</target>
        </trans-unit>
        <trans-unit id="67a3b1de444a60f32cca1d083e46bbcd443d7ec7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if statement has executable code.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; ステートメントに実行可能コードがある場合はtrue。</target>
        </trans-unit>
        <trans-unit id="96444596e9cdaa5283ccaf2d66fcfbb0199200ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if statement uses exception handling</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; ステートメントが例外処理を使用する場合はtrue</target>
        </trans-unit>
        <trans-unit id="1da5b3b9b2f6758b8600858d63d6845c211c848a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if successful</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 成功した場合はtrue</target>
        </trans-unit>
        <trans-unit id="60bfef6717d458b4089bebf93690bce834609c26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the 2 lambda functions are equal, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 2つのラムダ関数が等しい場合はtrue、そうでない場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2c94ffbb5fbd44461e4bc55c729fb41009d2ec9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the character is in the Alphabetic, Nd, Nl, or No Unicode categories</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 文字がアルファベット、Nd、Nl、またはUnicodeなしのカテゴリにある場合はtrue</target>
        </trans-unit>
        <trans-unit id="975530ebe416c50fa316849689c1b9c84bdce985" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the directory exists or was successfully created</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; ディレクトリが存在するか、正常に作成された場合はtrue</target>
        </trans-unit>
        <trans-unit id="e43f48b191a968d2108ef45b3265b47e07417128" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the event is in signaled state, &lt;code&gt;false&lt;/code&gt; if the event is uninitialized or another error occured</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; イベントがシグナル状態の場合はtrue、イベントが初期化されていないか別のエラーが発生した場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2f1569e1846ee1e5ca37b0ee2af6741e1637451e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the event is in signaled state, &lt;code&gt;false&lt;/code&gt; if the event was nonsignaled for the given time or the event is uninitialized or another error occured</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; イベントが通知された状態の場合はtrue、指定された時間イベントが通知されなかった場合、またはイベントが初期化されていないか、別のエラーが発生した場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="113e77a108be9ae1dd3293e6b6a5943dc6e2977d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given character is a valid mangled character</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 指定された文字が有効なマングル文字である場合はtrue</target>
        </trans-unit>
        <trans-unit id="c2f775f774908575cdf4ce197a32c1161ffd8cd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the last socket operation failed because the socket was in non-blocking mode and the operation would have blocked, or if the socket is in blocking mode and set a SNDTIMEO or RCVTIMEO, and the operation timed out.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; ソケットが非ブロックモードになっていたし、操作がブロックされ、またはソケットがブロックモードである場合とSNDTIMEOまたはRCVTIMEOを設定し、操作がタイムアウトしてしまうので、最後のソケット操作が失敗した場合。</target>
        </trans-unit>
        <trans-unit id="bd39a6a2f186a6cc7017a4e5cb92a04e3ba80c2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the last socket operation failed because the socket was in non-blocking mode and the operation would have blocked.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; ソケットが非ブロッキングモードであり、操作がブロックされたために最後のソケット操作が失敗した場合はtrue。</target>
        </trans-unit>
        <trans-unit id="c88d13eb3e3221036fb4aac2edb3a5f74da225b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the lock was successful, and &lt;code&gt;false&lt;/code&gt; if the specified file segment was already locked.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; ロックが成功した場合はtrue、指定されたファイルセグメントがすでにロックされている場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c391a399880ca8ac7ebb20fbb88f6087244d9d1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the needle was found, in which case &lt;code&gt;haystack&lt;/code&gt; is positioned after the end of the first occurrence of &lt;code&gt;needle&lt;/code&gt;; otherwise &lt;code&gt;false&lt;/code&gt;, leaving &lt;code&gt;haystack&lt;/code&gt; untouched. If no needle is provided, it returns the number of times &lt;code&gt;pred(haystack.front)&lt;/code&gt; returned true.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 針が見つかった場合はtrue。この場合、 &lt;code&gt;haystack&lt;/code&gt; は、最初に発生した &lt;code&gt;needle&lt;/code&gt; の終了後に配置されます。それ以外の場合は &lt;code&gt;false&lt;/code&gt; で、 &lt;code&gt;haystack&lt;/code&gt; そのままです。針が提供されない場合、 &lt;code&gt;pred(haystack.front)&lt;/code&gt; がtrueを返した回数を返します。</target>
        </trans-unit>
        <trans-unit id="a175ce1d936dfebd42507cfbe21c8b2e7b23d9de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the prefix of &lt;code&gt;haystack&lt;/code&gt; matches any range of &lt;code&gt;needles&lt;/code&gt; fully or &lt;code&gt;pred&lt;/code&gt; evaluates to true, and &lt;code&gt;haystack&lt;/code&gt; has been advanced to the point past this segment; otherwise false, and &lt;code&gt;haystack&lt;/code&gt; is left in its original position.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; の接頭場合 &lt;code&gt;haystack&lt;/code&gt; 、任意の範囲と一致する &lt;code&gt;needles&lt;/code&gt; 完全に又は &lt;code&gt;pred&lt;/code&gt; が真と評価し、そして &lt;code&gt;haystack&lt;/code&gt; このセグメント過去の時点に進められています。それ以外の場合はfalseで、 &lt;code&gt;haystack&lt;/code&gt; は元の位置に残ります。</target>
        </trans-unit>
        <trans-unit id="4c24804d7d89da4dbfceb2e23da57e0da329b035" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the range is sorted, false otherwise. &lt;code&gt;isSorted&lt;/code&gt; allows duplicates, &lt;code&gt;isStrictlyMonotonic&lt;/code&gt; not.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 範囲がソートされている場合はtrue、そうでない場合はfalse。 &lt;code&gt;isSorted&lt;/code&gt; は重複を許可しますが、 &lt;code&gt;isStrictlyMonotonic&lt;/code&gt; は許可しません。</target>
        </trans-unit>
        <trans-unit id="83d1f2aff5b95cbd92a0fce194d4b5a2cbf7071c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the reference count is greater than &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; when it hits &lt;code&gt;0&lt;/code&gt;. For stateless allocators, it always returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 参照カウントがより大きければ &lt;code&gt;0&lt;/code&gt; と &lt;code&gt;false&lt;/code&gt; それがヒットしたときに &lt;code&gt;0&lt;/code&gt; を。ステートレスアロケータの場合、常に &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="90eac6476595c502fd3275f7a9821859015a444f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the thread was created by &lt;code&gt;createLowLevelThread&lt;/code&gt; and is still running.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; スレッドが &lt;code&gt;createLowLevelThread&lt;/code&gt; によって作成され、まだ実行されている場合はtrue。</target>
        </trans-unit>
        <trans-unit id="ccd328eef72a7bff331437c901f6ecfa74aa6c6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the two items are approximately equal under either criterium. If one item is a range, and the other is a single value, then the result is the logical and-ing of calling &lt;code&gt;approxEqual&lt;/code&gt; on each element of the ranged item against the single item. If both items are ranges, then &lt;code&gt;approxEqual&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if and only if the ranges have the same number of elements and if &lt;code&gt;approxEqual&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt; for each pair of elements.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 2つの項目がいずれかの基準でほぼ等しい場合はtrue。1つの項目が範囲であり、もう1つの項目が単一の値である場合、結果は、単一の項目に対して範囲指定された項目の各要素で &lt;code&gt;approxEqual&lt;/code&gt; を呼び出す論理AND演算です。両方のアイテムが範囲である場合、範囲の要素数が同じで、要素の各ペアに対して &lt;code&gt;approxEqual&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; と評価された場合にのみ、 &lt;code&gt;approxEqual&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a6cf98975a25f37367926296bb4d2bc4e641412e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the two items are approximately equal under either criterium. It is sufficient, when &lt;code&gt;value &lt;/code&gt; satisfies one of the two criteria.  If one item is a range, and the other is a single value, then the result is the logical and-ing of calling &lt;code&gt;isClose&lt;/code&gt; on each element of the ranged item against the single item. If both items are ranges, then &lt;code&gt;isClose&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if and only if the ranges have the same number of elements and if &lt;code&gt;isClose&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt; for each pair of elements.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 2つの項目がどちらかの基準でほぼ等しい場合はtrue。 &lt;code&gt;value &lt;/code&gt; が2つの基準のいずれかを満たす場合は、それで十分です。一方のアイテムが範囲で、もう一方が単一の値である場合、結果は論理的であり、単一のアイテムに対して範囲アイテムの各要素で &lt;code&gt;isClose&lt;/code&gt; を呼び出すことです。両方の項目が範囲である場合、範囲に同じ数の要素があり、 &lt;code&gt;isClose&lt;/code&gt; が要素の各ペアに対して &lt;code&gt;true&lt;/code&gt; と評価された場合にのみ、 &lt;code&gt;isClose&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7bca98b9828324a100c5c2bf450aba6fec922fc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the values are ordered; &lt;code&gt;ordered&lt;/code&gt; allows for duplicates, &lt;code&gt;strictlyOrdered&lt;/code&gt; does not.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 値が順序付けられている場合はtrue。 &lt;code&gt;ordered&lt;/code&gt; は重複を許可しますが、 &lt;code&gt;strictlyOrdered&lt;/code&gt; はできません。</target>
        </trans-unit>
        <trans-unit id="e52eb334eccf7af84905903e88bbc2ee4e2362a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Declaration&lt;/code&gt; is &lt;code&gt;@disable&lt;/code&gt;d, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; この &lt;code&gt;Declaration&lt;/code&gt; が &lt;code&gt;@disable&lt;/code&gt; dの場合はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea21e9fc593db78397da9a076ce8abbf1795e14e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this class is a metaclass.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このクラスがメタクラスである場合はtrue。</target>
        </trans-unit>
        <trans-unit id="3b23821093362e8fee7cf930fb569f2afa7dccae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this class is externally defined.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このクラスが外部で定義されている場合はtrue。</target>
        </trans-unit>
        <trans-unit id="b6c35c42020228b2903355d9cbb57558c69b2b25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this duration is non-zero.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; この期間がゼロ以外の場合はtrue。</target>
        </trans-unit>
        <trans-unit id="19e69c3151c77c41b315753ae89fb38727bd2d21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if warnings have been diagnosed</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 警告が診断されている場合はtrue</target>
        </trans-unit>
        <trans-unit id="be3d6f4970bb17847deff217df6bcc9c3542ea2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if x is &amp;plusmn;&amp;infin;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; xが&amp;plusmn;&amp;infin;の場合はtrue。</target>
        </trans-unit>
        <trans-unit id="a2e10729efeca8adc0d5e6c2e9608120e2e73efe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if x is Nan.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; xがNanの場合はtrue。</target>
        </trans-unit>
        <trans-unit id="392a8f18d3aafeb3b757fe74ab32cf1c8d68ff76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if x is a denormal number.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; xが非正規数の場合はtrue。</target>
        </trans-unit>
        <trans-unit id="5c80c7160cf5bcaed5afcbc690d5e1ce55fce1ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if x is finite.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; xが有限の場合はtrue。</target>
        </trans-unit>
        <trans-unit id="70b59e8a6fb2a9a46b8b33eef61ecbe8e59ffb8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if x is normalized.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; xが正規化されている場合はtrue。</target>
        </trans-unit>
        <trans-unit id="5e2e042678636c0e2dc5b38da9c0df243832199c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;member&lt;/code&gt; exists and is static.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;member&lt;/code&gt; が存在し、静的です。</target>
        </trans-unit>
        <trans-unit id="873cb5b33a579701b5fe0d3c103392dc3bf3a28d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; iff all types &lt;code&gt;T&lt;/code&gt; are the same.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; すべてのタイプ &lt;code&gt;T&lt;/code&gt; が同じである場合にtrue。</target>
        </trans-unit>
        <trans-unit id="a6b6da9695a900a242b2f7d02cd85c2472b5dfc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; iff ready to call &lt;code&gt;dmd.statementsem.makeTupleForeach&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;dmd.statementsem.makeTupleForeach&lt;/code&gt; を呼び出す準備ができている場合はtrue。</target>
        </trans-unit>
        <trans-unit id="1351a06c681ea01bec618f6884bbd34de37b7523" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; iff the type &lt;code&gt;T&lt;/code&gt; can be tested in an &lt;code&gt; if&lt;/code&gt;-expression, that is if &lt;code&gt;if (pred(T.init)) {}&lt;/code&gt; is compilable.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; タイプ &lt;code&gt;T&lt;/code&gt; がif式でテストできる &lt;code&gt; if&lt;/code&gt; 、つまり &lt;code&gt;if (pred(T.init)) {}&lt;/code&gt; がコンパイル可能である場合はtrue。</target>
        </trans-unit>
        <trans-unit id="cbc3cedfb1abd592f57b3f79cdab586da17c3d3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; in case the permutation worked, &lt;code&gt;false&lt;/code&gt; in case &lt;code&gt;perm&lt;/code&gt; had more digits in the factorial number system than range had elements. This case must not occur as this would lead to out of range accesses.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 順列が機能する場合はtrue、 &lt;code&gt;perm&lt;/code&gt; が階乗数システムで範囲が要素よりも多い桁数を持つ場合は &lt;code&gt;false&lt;/code&gt; 。これが範囲外のアクセスにつながるため、このケースは発生してはなりません。</target>
        </trans-unit>
        <trans-unit id="fd7e986aa9a43e1d6abe499e7204cd25c3bfab21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; on success and &lt;code&gt;false&lt;/code&gt; on failure</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 成功した場合はtrue、失敗した場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="849941da8f86be5e40746a14f2e59a072ae48a82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; upon success, &lt;code&gt;false&lt;/code&gt; if memory could not be allocated. In the latter case &lt;code&gt;array&lt;/code&gt; is left unaffected.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 成功し &lt;code&gt;false&lt;/code&gt; 場合はtrue、メモリを割り当てられなかった場合はfalse。後者の場合、 &lt;code&gt;array&lt;/code&gt; は影響を受けません。</target>
        </trans-unit>
        <trans-unit id="10732ac56ce3f0e5bd6f2a954e9827563a8258a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; upon success, &lt;code&gt;false&lt;/code&gt; if memory could not be reallocated. In the latter case &lt;code&gt;arr[$ - delta .. $]&lt;/code&gt; is left with default-initialized elements.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 成功し &lt;code&gt;false&lt;/code&gt; 場合はtrue、メモリを再割り当てできなかった場合はfalse。後者の場合、 &lt;code&gt;arr[$ - delta .. $]&lt;/code&gt; はデフォルトで初期化された要素が残ります。</target>
        </trans-unit>
        <trans-unit id="01b642e31c66a686661a487c4cef012c4988d3b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; upon success, &lt;code&gt;false&lt;/code&gt; if memory could not be reallocated. In the latter case, the slice &lt;code&gt;array[$ - delta .. $]&lt;/code&gt; is left with default-initialized elements.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 成功し &lt;code&gt;false&lt;/code&gt; 場合はtrue、メモリを再割り当てできなかった場合はfalse。後者の場合、スライス &lt;code&gt;array[$ - delta .. $]&lt;/code&gt; はデフォルトで初期化された要素が残ります。</target>
        </trans-unit>
        <trans-unit id="1599a1c8f77f5355dd6f302974ae6e748423331a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt;, if the function has the list of attributes attached and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 関数に属性のリストがアタッチされている場合はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e74013817c4f54e852c614b55224f04ed73cb603" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof(return)&lt;/code&gt; will, when inside a function scope, give the return type of that function.</source>
          <target state="translated">&lt;code&gt;typeof(return)&lt;/code&gt; は、関数スコープ内にある場合、その関数の戻り型を提供します。</target>
        </trans-unit>
        <trans-unit id="401c131af329fb39ea8b1f78929613004978cd51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof(this)&lt;/code&gt; will generate the type of what &lt;code&gt;this&lt;/code&gt; would be in a non-static member function, even if not in a member function.</source>
          <target state="translated">&lt;code&gt;typeof(this)&lt;/code&gt; は、メンバー関数内にない場合でも、 &lt;code&gt;this&lt;/code&gt; が非静的メンバー関数内にある型を生成します。</target>
        </trans-unit>
        <trans-unit id="779537377c86a249b1949eb047163a4ef1e9694b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ubyte&lt;/code&gt; becomes &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt; becomes &lt;code&gt;wchar&lt;/code&gt; and &lt;code&gt;uint&lt;/code&gt; becomes &lt;code&gt;dchar&lt;/code&gt;. Type qualifiers are preserved.</source>
          <target state="translated">&lt;code&gt;ubyte&lt;/code&gt; は &lt;code&gt;char&lt;/code&gt; になり、 &lt;code&gt;ushort&lt;/code&gt; は &lt;code&gt;wchar&lt;/code&gt; になり、 &lt;code&gt;uint&lt;/code&gt; は &lt;code&gt;dchar&lt;/code&gt; になります。タイプ修飾子は保持されます。</target>
        </trans-unit>
        <trans-unit id="0f181d063de1eccb82f86b6c3b7003e8848e5b01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unbounded&lt;/code&gt; is a compile-time constant of type &lt;code&gt;size_t&lt;/code&gt; that several parameterized structures in this module recognize to mean &quot;infinite&quot; bounds for the parameter. For example, &lt;code&gt;Freelist&lt;/code&gt; (described in detail below) accepts a &lt;code&gt;maxNodes&lt;/code&gt; parameter limiting the number of freelist items. If &lt;code&gt;unbounded&lt;/code&gt; is passed for &lt;code&gt;maxNodes&lt;/code&gt;, then there is no limit and no checking for the number of nodes.</source>
          <target state="translated">&lt;code&gt;unbounded&lt;/code&gt; は、 &lt;code&gt;size_t&lt;/code&gt; 型のコンパイル時定数であり、このモジュールのいくつかのパラメーター化された構造は、パラメーターの「無限」の境界を意味すると認識しています。例えば、 &lt;code&gt;Freelist&lt;/code&gt; （詳細は後述）を受け入れ &lt;code&gt;maxNodes&lt;/code&gt; を空きリストアイテムの数を制限するパラメータ。場合は &lt;code&gt;unbounded&lt;/code&gt; ために渡され &lt;code&gt;maxNodes&lt;/code&gt; 、その後、何の制限と、ノード数のチェックはありません。</target>
        </trans-unit>
        <trans-unit id="8bc437caf54a4442736a6c2461d4505138f55f91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uniform01&lt;/code&gt; offers a faster generation of random variates than the equivalent &lt;code&gt;uniform!&quot;[)&quot;(0.0, 1.0)&lt;/code&gt; and so may be preferred for some applications.</source>
          <target state="translated">&lt;code&gt;uniform01&lt;/code&gt; は、同等の &lt;code&gt;uniform!&quot;[)&quot;(0.0, 1.0)&lt;/code&gt; 0.0、1.0）よりもランダムな変量の生成が高速であるため、一部のアプリケーションでは推奨される場合があります。</target>
        </trans-unit>
        <trans-unit id="5f1669e35822ad6d7a8ef7e1190d0d0a8687f82d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned long&lt;/code&gt; (or &lt;code&gt;unsigned long long&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;unsigned long&lt;/code&gt; （または &lt;code&gt;unsigned long long&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a511ddc689072ede3fe30ef960085644f7eca030" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unwrap&lt;/code&gt; can be used to extract objects which have been wrapped by &lt;code&gt;wrap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unwrap&lt;/code&gt; は、 &lt;code&gt;wrap&lt;/code&gt; によってラップされたオブジェクトを抽出するために使用できます。</target>
        </trans-unit>
        <trans-unit id="45acfa21317d0063756937f5ee8baff7f58f6535" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upload(&quot;/tmp/downloaded-ftp-file&quot;, &quot;ftp.digitalmars.com/sieve.ds&quot;);&lt;/code&gt; uploads file from file system to URL.</source>
          <target state="translated">&lt;code&gt;upload(&quot;/tmp/downloaded-ftp-file&quot;, &quot;ftp.digitalmars.com/sieve.ds&quot;);&lt;/code&gt; ファイルシステムからURLにファイルをアップロードします。</target>
        </trans-unit>
        <trans-unit id="3d60e080a176215c5a1b49107f6911976cc162b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;, if &lt;code&gt;cast(bool) value&lt;/code&gt; is true. Otherwise, &lt;code&gt;new ErrnoException(msg)&lt;/code&gt; is thrown. It is assumed that the last operation set &lt;code&gt;errno&lt;/code&gt; to an error code corresponding with the failed condition.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 、場合 &lt;code&gt;cast(bool) value&lt;/code&gt; 真です。それ以外の場合は、 &lt;code&gt;new ErrnoException(msg)&lt;/code&gt; がスローされます。最後の操作で、 &lt;code&gt;errno&lt;/code&gt; が失敗した状態に対応するエラーコードに設定されたと想定されます。</target>
        </trans-unit>
        <trans-unit id="a27040952215ed3b860dd4df6cc49b621ae01b6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;, if &lt;code&gt;cast(bool) value&lt;/code&gt; is true. Otherwise, depending on the chosen overload, &lt;code&gt;new Exception(msg)&lt;/code&gt;, &lt;code&gt;dg()&lt;/code&gt; or &lt;code&gt;ex&lt;/code&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 、場合 &lt;code&gt;cast(bool) value&lt;/code&gt; 真です。それ以外の場合は、選択したオーバーロードに応じて、 &lt;code&gt;new Exception(msg)&lt;/code&gt; 、 &lt;code&gt;dg()&lt;/code&gt; または &lt;code&gt;ex&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="89ce2b9510af56abd276e49fc0c6896c8c2ee1ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void __aggrPostblit()&lt;/code&gt;. If a struct has an explicitly defined postblit and at least 1 struct member that has a postblit (explicit or implicit) an aggregated postblit is generated which calls &lt;code&gt;__fieldPostblit&lt;/code&gt; first and then &lt;code&gt;__postblit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;void __aggrPostblit()&lt;/code&gt; 。構造体に明示的に定義されたポストブリットと、ポストブリット（明示的または暗黙的）を持つ少なくとも1つの構造体メンバーがある場合、最初に &lt;code&gt;__fieldPostblit&lt;/code&gt; を呼び出し、次に &lt;code&gt;__postblit&lt;/code&gt; を呼び出す集約ポストブリットが生成されます。</target>
        </trans-unit>
        <trans-unit id="a7d412974083659735c5bf3a9a43ad6ac9e004c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void __fieldPostblit()&lt;/code&gt;. If a struct &lt;code&gt;X&lt;/code&gt; has at least one &lt;code&gt;struct&lt;/code&gt; member that in turn defines (explicitly or implicitly) a postblit, then a field postblit is generated for &lt;code&gt;X&lt;/code&gt; that calls all the underlying postblits of the struct fields in declaration order.</source>
          <target state="translated">&lt;code&gt;void __fieldPostblit()&lt;/code&gt; 。構造体の場合 &lt;code&gt;X&lt;/code&gt; は、少なくとも一つを有する &lt;code&gt;struct&lt;/code&gt; ターン定義（明示的または暗黙的に）postblitで、次にフィールドpostblitのために生成されるメンバー &lt;code&gt;X&lt;/code&gt; 宣言順に構造体フィールドのすべての基礎となるpostblitsを呼び出します。</target>
        </trans-unit>
        <trans-unit id="43cee24221eb62cef3e2c687882ab5a08633aff2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void __postblit()&lt;/code&gt;. The compiler assigns this name to the explicitly defined postblit &lt;code&gt;this(this)&lt;/code&gt; so that it can be treated exactly as a normal function. Note that if a struct defines a postblit, it cannot define a function named &lt;code&gt;__postblit&lt;/code&gt; - no matter the signature - as this would result in a compilation error due to the name conflict.</source>
          <target state="translated">&lt;code&gt;void __postblit()&lt;/code&gt; 。コンパイラーは、明示的に定義されたポストブリット &lt;code&gt;this(this)&lt;/code&gt; にこの名前を割り当てて、通常の関数として正確に処理できるようにします。構造体がポストブリットを定義している場合、シグネチャに関係なく、 &lt;code&gt;__postblit&lt;/code&gt; という名前の関数を定義できないことに注意してください。これにより、名前の競合が原因でコンパイルエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="dc6d1a9f79c3a9d7761e5aff58d0729c99ffc5b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void __xpostblit()&lt;/code&gt;. The field and aggregated postblits, although generated for a struct, are not actual struct members. In order to be able to call them, the compiler internally creates an alias, called &lt;code&gt;__xpostblit&lt;/code&gt; which is a member of the struct and which points to the generated postblit that is the most inclusive.</source>
          <target state="translated">&lt;code&gt;void __xpostblit()&lt;/code&gt; 。フィールドと集約ポストブリットは、構造体に対して生成されますが、実際の構造体のメンバーではありません。それらを呼び出すことができるようにするために、コンパイラーは、構造体のメンバーであり、最も包括的な生成されたポストブリットを指す &lt;code&gt;__xpostblit&lt;/code&gt; と呼ばれるエイリアスを内部的に作成します。</target>
        </trans-unit>
        <trans-unit id="25815dc372c3c73661b0a266b38876dd6894ac4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void*&lt;/code&gt;, catch handler code</source>
          <target state="translated">&lt;code&gt;void*&lt;/code&gt; 、キャッチハンドラコード</target>
        </trans-unit>
        <trans-unit id="18c0cd3b31df7367a71c75205c8ae819cf902d5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void[]&lt;/code&gt; is formatted like &lt;code&gt;ubyte[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;void[]&lt;/code&gt; は &lt;code&gt;ubyte[]&lt;/code&gt; ようにフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="879559c0d4c10d9f1613c9c2ea4e1ebd13338b46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;walkLength(src) &amp;lt;= walkLength(tgt)&lt;/code&gt;. This precondition will be asserted. If you cannot ensure there is enough room in &lt;code&gt;tgt&lt;/code&gt; to accommodate all of &lt;code&gt;src&lt;/code&gt; use &lt;a href=&quot;#moveSome&quot;&gt;&lt;code&gt;moveSome&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;walkLength(src) &amp;lt;= walkLength(tgt)&lt;/code&gt; 。この前提条件がアサートされます。 &lt;code&gt;tgt&lt;/code&gt; にすべての &lt;code&gt;src&lt;/code&gt; を収容するのに十分なスペースがないことを確認できない場合は、代わりに&lt;a href=&quot;#moveSome&quot;&gt; &lt;code&gt;moveSome&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="9fa5adcc8bbbe8c7dbc689f02b582cfbdc6e2b7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wchar_t&lt;/code&gt; (when &lt;code&gt;sizeof(wchar_t)&lt;/code&gt; is 2)</source>
          <target state="translated">&lt;code&gt;wchar_t&lt;/code&gt; （ &lt;code&gt;sizeof(wchar_t)&lt;/code&gt; が2の場合）</target>
        </trans-unit>
        <trans-unit id="4068d60126f19ea07b4c62829deefe17a30c0b36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wchar_t&lt;/code&gt; (when &lt;code&gt;sizeof(wchar_t)&lt;/code&gt; is 4)</source>
          <target state="translated">&lt;code&gt;wchar_t&lt;/code&gt; （ &lt;code&gt;sizeof(wchar_t)&lt;/code&gt; が4の場合）</target>
        </trans-unit>
        <trans-unit id="2b068e31aeae500c9824222981eba3a5720d1923" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x86_64&lt;/code&gt; adds these additional registers.</source>
          <target state="translated">&lt;code&gt;x86_64&lt;/code&gt; はこれらの追加のレジスタを追加します。</target>
        </trans-unit>
        <trans-unit id="b6d76e9fe781554f99a436ffd78dc25571c081a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; raised to the power of &lt;code&gt;n&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; を &lt;code&gt;n&lt;/code&gt; の累乗</target>
        </trans-unit>
        <trans-unit id="65ad3e1a76ad32463dc9020237a5d914d2d31a09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; rounded to an integer value</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; を整数値に丸める</target>
        </trans-unit>
        <trans-unit id="1a8b8f719d68c5db31ae5c5b532606293873c9f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; to the power &lt;code&gt;n&lt;/code&gt;, modulo &lt;code&gt;m&lt;/code&gt;. The return type is the largest of &lt;code&gt;x&lt;/code&gt;'s and &lt;code&gt;m&lt;/code&gt;'s type.  The function requires that all values have unsigned types.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 電源に &lt;code&gt;n&lt;/code&gt; 、モジュロ &lt;code&gt;m&lt;/code&gt; 。戻り値の型は、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;m&lt;/code&gt; の型の中で最大のものです。この関数では、すべての値に符号なしの型が必要です。</target>
        </trans-unit>
        <trans-unit id="0e686541fe57b2168e56e244f0084aaa748f4a2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; with bytes swapped</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; バイトが交換されたx</target>
        </trans-unit>
        <trans-unit id="b0a4cffb76a02e21c3feea7c78cbcb8a08519c85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zip&lt;/code&gt; is powerful - the following code sorts two arrays in parallel:</source>
          <target state="translated">&lt;code&gt;zip&lt;/code&gt; は強力です。次のコードは2つの配列を並列に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="459db4250d5bf26b0be3b8f2acabeedcdb7411ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zip&lt;/code&gt; is similar to &lt;a href=&quot;#lockstep&quot;&gt;&lt;code&gt;lockstep&lt;/code&gt;&lt;/a&gt;, but &lt;code&gt;lockstep&lt;/code&gt; doesn't bundle its elements and uses the &lt;code&gt;opApply&lt;/code&gt; protocol. &lt;code&gt;lockstep&lt;/code&gt; allows reference access to the elements in &lt;code&gt;foreach&lt;/code&gt; iterations.</source>
          <target state="translated">&lt;code&gt;zip&lt;/code&gt; 同様である&lt;a href=&quot;#lockstep&quot;&gt; &lt;code&gt;lockstep&lt;/code&gt; &lt;/a&gt;が、 &lt;code&gt;lockstep&lt;/code&gt; 、その要素と用途をバンドルしない &lt;code&gt;opApply&lt;/code&gt; のプロトコル。 &lt;code&gt;lockstep&lt;/code&gt; は、 &lt;code&gt;foreach&lt;/code&gt; 反復の要素への参照アクセスを許可します。</target>
        </trans-unit>
        <trans-unit id="1ef6339fb889601443d9770b014f952cfe5e025f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a7b5c722aed22925a460482c6466ebf4260e520" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Access &lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Access &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bc30681a7eae3ef70207f0d141b2a462299b888b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Algorithms &amp;amp; ranges&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; アルゴリズムと範囲&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c095a8951c487c309f82861a4f4ba04ba2d45500" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Array manipulation&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; 配列操作&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d0bc0ed5b74d5a0db56a0d91a4a4797dbf06a96d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Capacity &lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Capacity &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0b8d298cf54c59ef00375c100cdfb8d6246ef00c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Containers&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Containers&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="94395c48227e3036d6b3e6673878c713799d0dc8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Data formats&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; データフォーマット&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="92ffb86b899cbe82077812e59698e2b2dac9aa46" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Data integrity&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; データの整合性&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fc68b0afd4817d6d1bd5753f9fce96373cab87a4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Date &amp;amp; time&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; 日付時刻&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8b2d246f9ef73764d6765ea2cf5aff25de8a3b56" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Exception handling&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; 例外処理&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b6c2a4f16f0034306a7ee08545b129367c57d55b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; External library bindings&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; 外部ライブラリバインディング&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e6c17ec0940f424ec5767e37367bc5ed3d9144b6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Functions&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Functions&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e3cec7e3fb7e40acf8687eb1f9231ecb635e5486" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; High level&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; 高いレベル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6c816329c6776a07d0287baa6e3483feaede6b41" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; I/O &amp;amp; File system&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; I / O＆ファイルシステム&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f75118f780d0ae77b25ca4b32d07c19523d14214" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Interoperability&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Interoperability&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a93e169344d9e4b578679263af9c3ac09d6ee1ea" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Iteration &lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Iteration &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0fa3d22678c42ecb9ef7abc360e4b4f19eb19127" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Low level &lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; 低レベル &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dccbd3fd9070ee1b3641cbf486f64a3b2200d84b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Memory management&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; メモリ管理&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="09a5c6f5efe26853892ad44c63201a6603c81a23" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Metaprogramming&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Metaprogramming&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1e883194753e4ca161843ed4c9237dabce84b58e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Modifiers &lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Modifiers &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="847ecfd8ae03468bd0625c64f67549550880f970" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Multitasking&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Multitasking&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6d0d417d2ad372e46c5080908386cd9255303ad7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Networking&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Networking&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="38eae575d1a7828c72f73af9d9797c05a26ddbb6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Numeric&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Numeric&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="33af9b4935b253ac84014f9f785f136db3c78d1f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Operations &lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Operations &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6a477843bafc9ce02245ad5f41eddd8012f73621" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Paradigms&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Paradigms&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c499ab97bed7f2f3212ddbef25a6f926b3a369dd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Publicly imported functions&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; 公的にインポートされた関数&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="84f09ad7796ccc3798e30ab53b927446ab2753a4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Runtime utilities&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; ランタイムユーティリティ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53e9f46dc618afd51e3c2220ffc47610b3bd4e7d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; String manipulation&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; 文字列操作&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="146cea4c54149c952b53a0477e6ff85e0e29beb6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Type manipulations&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; タイプ操作&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb940b2b4b3bd08198a84bc673ba50b694c644b7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Types&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; Types&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4ae4efd4b54d81f463d5fd325dc5a206f87e9a2c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Vector programming&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; ベクトルプログラミング&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="783ba461fe8c666b24948cbe429f77043b171614" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Digest&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Digest&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="84f1bd19e3ec4781ade0f748a2af4b8c1dcda431" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Enable support for backticks, tildes and other code languages with the &lt;code&gt;-preview=markdown&lt;/code&gt; compiler flag.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;-preview=markdown&lt;/code&gt; コンパイラフラグを使用して、バックティック、チルド、およびその他のコード言語のサポートを有効にします。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1b14bb400fad8a7fda4989cb98829046ab5883e6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Enable this feature with the &lt;code&gt;-preview=markdown&lt;/code&gt; compiler flag.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;-preview=markdown&lt;/code&gt; コンパイラフラグでこの機能を有効にします。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cad9826a40d7cac0dd92d79018b3a425cec01f08" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ILLEGAL&lt;/em&gt; http version</source>
          <target state="translated">&lt;em&gt;不正な&lt;/em&gt; httpバージョン</target>
        </trans-unit>
        <trans-unit id="84d700f33fd199df90a3b8e291da9156478a48b4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;MD5&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;MD5&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8d1994dff12ffcd867055351a399ba2eff31ce9d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;MD5Digest&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;MD5Digest&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed4f96e25a72b758be38a8a066ce0bd22cfaee2b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;RIPEMD160&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;RIPEMD160&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="99519fd2ab2e235270c1d71519b6d68c3fdb2e11" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;RIPEMD160Digest&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;RIPEMD160Digest&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="294dfbe626cd1401cd15424ac601518cbfe69a29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;SHA1&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;SHA1&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="091d02fc9acad31c2d4e52ba53a8bf23e8c3403e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;SHA1Digest&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;SHA1Digest&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="274ac3a3f91608d104539ec7c821c012efd92d78" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;aaa&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;aaa&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7588babd4f0b2b7ae02e8880206eb18207292a1d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;aad&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;aad&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4df783b6d180de03478089805a881105f3cadd42" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;aam&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;aam&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8d02f41518030b8787ab09bbea0a8d67d8426530" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;aas&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;aas&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="df4a4818708fc3de9efbe8d2eb2f496a975c1a29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;adc&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;adc&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6c5258bbe828a82728cc4ed33fa5b2a769a9f041" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;add&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;add&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="669607c013d13851e9589948d41c8ff14803f058" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;addpd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;addpd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d4555a11aa4a3dc0d73314fed52e2c5863033ff0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;addps&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;addps&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="603663458993a35a03f85b569f99582519b45931" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;addsd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;addsd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d640f13a3f982b14dfddae136cc30f4cc82defea" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;addss&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;addss&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="171f846452747ed33bb422ca28d951e546292754" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;addsubpd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;addsubpd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8fb1f304ece6367db702ee1a1bd5e2e4ab270e78" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;addsubps&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;addsubps&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="692844e1de9cbe71308e5612ae3e4cfc42de8708" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;and&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;and&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f1f43e4d115e5a8a4c15ca434debeead3baab0d6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;andnpd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;andnpd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8ab94df34718b1bba3e84a58a1097218a1c7daf4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;andnps&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;andnps&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="348d3191a05390d9cbad6ec44be415d8a1f0c000" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;andpd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;andpd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aae24f7e7b696be2067e4ada439be0d551196469" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;andps&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;andps&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e829bd0db8a8d33136116a19e0cb91efb0b02804" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;arpl&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;arpl&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5db72c532589bf65d9ff177f7cd70a982f45a812" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;bound&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;bound&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f2be76e7e30b8c49dd60bf29e87be13fdcab0454" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;bsf&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;bsf&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b797add93629d108f13ec585c788c0765e24409" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;bsr&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;bsr&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="09941d8edc03eb4f1479d6812e75a5f9cb78a645" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;bswap&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;bswap&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ef6ed5d5231a531322255b844105cc5a57b1bc9c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;bt&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;bt&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="741afc5feebc49fac328e2d55f1a5c6ebff8d914" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;btc&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;btc&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="72c37b8037304d3804e9927a88808a7c2f3ff260" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;btr&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;btr&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e9e6ff86043a18a24c45d6aa76459fca75c116f6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;bts&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;bts&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a052cef3cc75f4db6315362acf22bfb2a0ffc8de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;call&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;call&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bc4e83871d6ca7b2eae6ae34476224eb2a912d01" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;capitalize&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;capitalize&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8e0a35bbbcb6c86e72803d7111f1104aec236e63" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cbw&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cbw&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b00bd98a17914276ba79dc6cd2f88a2474947cf1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cdq&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cdq&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e411be14fa5b56d5473617085fb4f0f4e3f7f36a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;clc&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;clc&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c00b6efa8c41835d737883544aa4bd41a660c9cb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cld&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cld&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="848176d9242b520847d62dab0614e19f0dfb838d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;clflush&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;clflush&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c42d55ab12598b1bf7aca3776823b3d972284753" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cli&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cli&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="21eb9e5400447b8eed598b33915f4edb69478f62" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;clts&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;clts&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b92aae5a57b2d06a48ce9e2daee0b70462c3965b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmc&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmc&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c6598c355738b0e360ba72ab86a54034892e816e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmova&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmova&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b03d2c951078153df871053f41018e8a7b055cb5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovae&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovae&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4129bdf5c54904383733140a3007452ccb97565a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovb&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovb&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1cc9172ddde5c38ce8c9f2fc625d0972979daa82" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovbe&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovbe&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="111e40dc4dfb04ec36c00e42a1a4469348f82e4f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovc&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovc&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4f78f56f5202094d19c9cfdf6728e9c684c46595" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmove&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmove&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="28441e770e85047a6c2abde03c02dc4bcae4d746" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovg&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovg&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e0760d8c0f127239224a2bd5f35590ec8219bac3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovge&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovge&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3a27e2c4593e0d03a1930313afc14818fa014fbb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovl&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovl&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2989760e44dd4610b656a586a38b758185a79da7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovle&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovle&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7eb8390f413a550cb5f26327a8b3e97227e986e1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovna&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovna&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6e0dce8da3413b2fff4db97f460ea86bb850160d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovnae&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovnae&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8108b390f996ade5bee82f21813712772e3e5150" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovnb&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovnb&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="961409e858105693ff6e506a9fe09ddb85a1d9f1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovnbe&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovnbe&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8ec2f5e6988d878bdcf0aa1f9abc88741d0e360" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovnc&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovnc&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="50bf45bb0404fc35cdd05e6a8f1086df7950ac47" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovne&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovne&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="06f747ed13ab2f2758ef319eb71920fd8f9a07fd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovng&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovng&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="233166e6f6cc3f3c42e69dc03585a77158547670" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovnge&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovnge&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d5f5c1e1d55eaf8f6555c0b6ebd01408d4014b24" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovnl&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovnl&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d80091b5d9155625d0b4637ebae7a5e79c8718c3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovnle&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovnle&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f809a792dade42d8e9aca29d939269d6acc0c33a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovno&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovno&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5c5ae7612eee3a042ecfba8dd4d5201ef4709701" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovnp&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovnp&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b93a97c2d6edfa89df3b90ad343d54aa44d58c51" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovns&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovns&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="064baaadd28f66c9a3583b8b61cd1a7f6b7bb720" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovnz&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovnz&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c2ebd1a04852a74a4bf46bbe4d0242d136cd7fd9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovo&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovo&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c342c00f9155332857d93ef6805653ed9bacce09" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovp&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovp&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="97bac93bf4acbf2b992e27a64f08e567f0a113d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovpe&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovpe&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="86916e0031a3000ceff8db848b020b20ecd5a05c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovpo&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovpo&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bb9ce11f371fd4b2affd007558aa4e5e625ff8a0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovs&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovs&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a9604d101d312f98cbe257cccd691e5a0c31b2d7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmovz&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmovz&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6fd90bd9e4d1a433718ea1b68a8bb195571a7696" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmp&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmp&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1cee5d7e8fcf38f1e3f065e891ae4cd9e8bd5be8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmppd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmppd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1e272176453fec8068368eed364102b1d225e7cd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmpps&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmpps&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6ce8db169aeeb9c89c2500e9b0b80e227974e6d6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmps&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmps&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6599c4c2d9ecb33f234e07c89bd4905d1b51e2b6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmpsb&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmpsb&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="730f8126d0cf3675bf5b4c23998d30b19da1b487" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmpsd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmpsd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2b21cb9e8933715b3ccd4d7a20e199590cec3818" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmpss&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmpss&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fc0ad81c58c54c0d21ff0bdd053a7938368acdd4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmpsw&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmpsw&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e487c5f81006bc807e464143803badf158e6eddd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmpxchg16b&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmpxchg16b&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f611050434a367a257b162eac17b4e2ef228d77" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmpxchg8b&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmpxchg8b&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d498a2a43552a13063aa8894b9d1f17bee883670" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmpxchg&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cmpxchg&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cf58d302adc914b53e05998342d1661e161682e4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;comisd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;comisd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1bcf4cdf2222de470f5e2d9fbec06f695b7015d3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;comiss&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;comiss&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="696f1015ca54a71bb83a44adebeed3728fe79275" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cpuid&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cpuid&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b23c8423a7464aa9f278e00c526c0e7e149025c2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtdq2pd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtdq2pd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="efb02186e74b91308bd79679c50c0efa595d5497" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtdq2ps&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtdq2ps&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4e84b87118765de1da2fa66f186ffce7dfa9bbcb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtpd2dq&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtpd2dq&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="60a3c073c2f273460c2e57ce0c75760b5b3c4513" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtpd2pi&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtpd2pi&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4a3174aa806386b4d63772a7779fd8d2723df2a1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtpd2ps&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtpd2ps&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7519f3e2217487943b6c7c5106e4b943fa6e93b9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtpi2pd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtpi2pd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="edc02a38a5b509554a8e0c90958e2209fd2e47be" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtpi2ps&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtpi2ps&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="57148a528d5075133b7af32f7eb1dfc6c9b78f23" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtps2dq&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtps2dq&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3c263f20996de047aa56dd524d8fb912231403d6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtps2pd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtps2pd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ab7b2f1525535e426d09536867a145d357aec9c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtps2pi&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtps2pi&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f1e2cc4b6ab4ccaf4a17041f6fa7b19209c229c3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtsd2si&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtsd2si&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0753b31c2ebb6c699cf5ebbbe000f08b2c5ab6e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtsd2ss&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtsd2ss&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="653583a9827218258f05df8e578f57daef9c87e5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtsi2sd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtsi2sd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="874dea0f119c5edefcbe663654becb7e467bacf7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtsi2ss&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtsi2ss&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="91322f99d4ac646d89b3f3f22c92d063f1d9d9d8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtss2sd&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtss2sd&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f308c1714555cde3135a09c2eac0944e1976a186" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvtss2si&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvtss2si&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b5810df70b4d9fabb0959e092847b418ae89d42" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cvttpd2dq&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;cvttpd2dq&lt;/em&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
