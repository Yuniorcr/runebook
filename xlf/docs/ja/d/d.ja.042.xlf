<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="f5987829769c7652dfd3039ae72a72bc0e76f364" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_arraybounds&quot;&gt;_d_arraybounds&lt;/strong&gt;(string file, uint line);</source>
          <target state="translated">void &lt;strong id=&quot;_d_arraybounds&quot;&gt;_d_arraybounds&lt;/strong&gt;（string file、uint line）;</target>
        </trans-unit>
        <trans-unit id="5d5186b68c9f4ca139ba29cb34858d520c9b5cf2" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_arrayboundsp&quot;&gt;_d_arrayboundsp&lt;/strong&gt;(immutable(char*) file, uint line);</source>
          <target state="translated">void &lt;strong id=&quot;_d_arrayboundsp&quot;&gt;_d_arrayboundsp&lt;/strong&gt;（immutable（char *）file、uint line）;</target>
        </trans-unit>
        <trans-unit id="241f32e6ce7c905368f0f3d0ecddd2d0b16305ee" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_arrayshrinkfit&quot;&gt;_d_arrayshrinkfit&lt;/strong&gt;(const TypeInfo ti, void[] arr);</source>
          <target state="translated">void &lt;strong id=&quot;_d_arrayshrinkfit&quot;&gt;_d_arrayshrinkfit&lt;/strong&gt;（const TypeInfo ti、void [] arr）;</target>
        </trans-unit>
        <trans-unit id="adbe6e8aa780c8627ba8005f50056fb3854c6c9c" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_assert&quot;&gt;_d_assert&lt;/strong&gt;(string file, uint line);</source>
          <target state="translated">void &lt;strong id=&quot;_d_assert&quot;&gt;_d_assert&lt;/strong&gt;（文字列ファイル、uint行）;</target>
        </trans-unit>
        <trans-unit id="433d9317cc855cb9baf2537e10f867d3b6605dbc" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_assert_msg&quot;&gt;_d_assert_msg&lt;/strong&gt;(string msg, string file, uint line);</source>
          <target state="translated">void &lt;strong id=&quot;_d_assert_msg&quot;&gt;_d_assert_msg&lt;/strong&gt;（string msg、string file、uint line）;</target>
        </trans-unit>
        <trans-unit id="a057eb76ac35b4f170d279b1c374cf1ebf805480" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_assertp&quot;&gt;_d_assertp&lt;/strong&gt;(immutable(char)* file, uint line);</source>
          <target state="translated">void &lt;strong id=&quot;_d_assertp&quot;&gt;_d_assertp&lt;/strong&gt;（immutable（char）* file、uint line）;</target>
        </trans-unit>
        <trans-unit id="13a5aa35417f752e89cda6ab771b83eca50f59a5" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_callfinalizer&quot;&gt;_d_callfinalizer&lt;/strong&gt;(void* p);</source>
          <target state="translated">void &lt;strong id=&quot;_d_callfinalizer&quot;&gt;_d_callfinalizer&lt;/strong&gt;（void * p）;</target>
        </trans-unit>
        <trans-unit id="1c732c9d9b72b0d845cca8d3a6a626b8df1b79b5" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_callinterfacefinalizer&quot;&gt;_d_callinterfacefinalizer&lt;/strong&gt;(void* p);</source>
          <target state="translated">void &lt;strong id=&quot;_d_callinterfacefinalizer&quot;&gt;_d_callinterfacefinalizer&lt;/strong&gt;（void * p）;</target>
        </trans-unit>
        <trans-unit id="f0025fe618ad410eb39b7dc7e6798f78f285630d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_cover_register2&quot;&gt;_d_cover_register2&lt;/strong&gt;(string filename, size_t[] valid, uint[] data, ubyte minPercent);</source>
          <target state="translated">void &lt;strong id=&quot;_d_cover_register2&quot;&gt;_d_cover_register2&lt;/strong&gt;（string filename、size_t [] valid、uint [] data、ubyte minPercent）;</target>
        </trans-unit>
        <trans-unit id="fa2c363199d92ac96e13a82caf2097b78f725455" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_delarray_t&quot;&gt;_d_delarray_t&lt;/strong&gt;(void[]* p, const TypeInfo_Struct ti);</source>
          <target state="translated">void &lt;strong id=&quot;_d_delarray_t&quot;&gt;_d_delarray_t&lt;/strong&gt;（void [] * p、const TypeInfo_Struct ti）;</target>
        </trans-unit>
        <trans-unit id="d2cf0e4b70a7166c11040d7b8f7760a260051e9e" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_delclass&quot;&gt;_d_delclass&lt;/strong&gt;(Object* p);</source>
          <target state="translated">void &lt;strong id=&quot;_d_delclass&quot;&gt;_d_delclass&lt;/strong&gt;（Object * p）;</target>
        </trans-unit>
        <trans-unit id="9883af7a0bbef17df847e50fe57962dc2874fc95" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_delinterface&quot;&gt;_d_delinterface&lt;/strong&gt;(void** p);</source>
          <target state="translated">void &lt;strong id=&quot;_d_delinterface&quot;&gt;_d_delinterface&lt;/strong&gt;（void ** p）;</target>
        </trans-unit>
        <trans-unit id="a6f48d6d7b28cbee6eb6c46adbb8f59080ff5f8a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_delmemory&quot;&gt;_d_delmemory&lt;/strong&gt;(void** p);</source>
          <target state="translated">void &lt;strong id=&quot;_d_delmemory&quot;&gt;_d_delmemory&lt;/strong&gt;（void ** p）;</target>
        </trans-unit>
        <trans-unit id="64084c9040af97b701e353d8637eea7627254098" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_delstruct&quot;&gt;_d_delstruct&lt;/strong&gt;(void** p, TypeInfo_Struct inf);</source>
          <target state="translated">void &lt;strong id=&quot;_d_delstruct&quot;&gt;_d_delstruct&lt;/strong&gt;（void ** p、TypeInfo_Struct inf）;</target>
        </trans-unit>
        <trans-unit id="8b40db9b36306c1c6f9cd413896fd527a776118e" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_invariant&quot;&gt;_d_invariant&lt;/strong&gt;(Object o);</source>
          <target state="translated">void &lt;strong id=&quot;_d_invariant&quot;&gt;_d_invariant&lt;/strong&gt;（Object o）;</target>
        </trans-unit>
        <trans-unit id="b71bf7b9d0282ac7cb6e88eb2c9f4b84525e1a5d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_throwc&quot;&gt;_d_throwc&lt;/strong&gt;(Throwable h);</source>
          <target state="translated">void &lt;strong id=&quot;_d_throwc&quot;&gt;_d_throwc&lt;/strong&gt;（&lt;strong id=&quot;_d_throwc&quot;&gt;スロー可能な&lt;/strong&gt; h）;</target>
        </trans-unit>
        <trans-unit id="ab36400fcf8c138e82e898e501b98d54be940805" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_throwdwarf&quot;&gt;_d_throwdwarf&lt;/strong&gt;(Throwable o);</source>
          <target state="translated">void &lt;strong id=&quot;_d_throwdwarf&quot;&gt;_d_throwdwarf&lt;/strong&gt;（Throwable o）;</target>
        </trans-unit>
        <trans-unit id="4d755cac81d0585c0eddd77549a59e30096fb3cd" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_unittest&quot;&gt;_d_unittest&lt;/strong&gt;(string file, uint line);</source>
          <target state="translated">void &lt;strong id=&quot;_d_unittest&quot;&gt;_d_unittest&lt;/strong&gt;（文字列ファイル、uint行）;</target>
        </trans-unit>
        <trans-unit id="995e5d47f5cc6c92d405b5ca5fd18ee4ab6f2a02" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_unittest_msg&quot;&gt;_d_unittest_msg&lt;/strong&gt;(string msg, string file, uint line);</source>
          <target state="translated">void &lt;strong id=&quot;_d_unittest_msg&quot;&gt;_d_unittest_msg&lt;/strong&gt;（string msg、string file、uint line）;</target>
        </trans-unit>
        <trans-unit id="6c776a4d93dba2a24af556dbae28838ef24530cc" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_d_unittestp&quot;&gt;_d_unittestp&lt;/strong&gt;(immutable(char)* file, uint line);</source>
          <target state="translated">void &lt;strong id=&quot;_d_unittestp&quot;&gt;_d_unittestp&lt;/strong&gt;（immutable（char）* file、uint line）;</target>
        </trans-unit>
        <trans-unit id="fe9ae9729e817df61fd5285a2514e3e71318c86b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;_init&quot;&gt;_init&lt;/strong&gt;(ref const Param params);</source>
          <target state="translated">void &lt;strong id=&quot;_init&quot;&gt;_init&lt;/strong&gt;（ref const Param params）;</target>
        </trans-unit>
        <trans-unit id="d6f7f4bdf3338a65ceec38d248d63d27080907d8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;accept&quot;&gt;accept&lt;/strong&gt;(Visitor v);</source>
          <target state="translated">void &lt;strong id=&quot;accept&quot;&gt;accept&lt;/strong&gt;（Visitor v）;</target>
        </trans-unit>
        <trans-unit id="e9e44d581bee79b012ae9be6c5b186abaa68f205" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;acquire&quot;&gt;acquire&lt;/strong&gt;(Store s, size_t initialSize = size_t.max);</source>
          <target state="translated">void &lt;strong id=&quot;acquire&quot;&gt;取得&lt;/strong&gt;（ストアs、size_t initialSize = size_t.max）;</target>
        </trans-unit>
        <trans-unit id="364d312e47b0bdd27186ae4224455c9b02ae34e2" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;addCommand&quot;&gt;addCommand&lt;/strong&gt;(const(char)[] command);</source>
          <target state="translated">void &lt;strong id=&quot;addCommand&quot;&gt;addCommand&lt;/strong&gt;（const（char）[] command）;</target>
        </trans-unit>
        <trans-unit id="d7a17147a014d80acf04712168560358a9919c29" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;addComment&quot;&gt;addComment&lt;/strong&gt;(const(char)* comment);</source>
          <target state="translated">void &lt;strong id=&quot;addComment&quot;&gt;addComment&lt;/strong&gt;（const（char）*コメント）;</target>
        </trans-unit>
        <trans-unit id="d2162e324f8f0f0dc69f2f4928061665d68637e4" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;addDefaultVersionIdentifiers&quot;&gt;addDefaultVersionIdentifiers&lt;/strong&gt;(ref const Param params);</source>
          <target state="translated">void &lt;strong id=&quot;addDefaultVersionIdentifiers&quot;&gt;addDefaultVersionIdentifiers&lt;/strong&gt;（ref const Param params）;</target>
        </trans-unit>
        <trans-unit id="9f92b4f2afd5e1e1b9091236224b20d8b79e6572" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;addImport&quot;&gt;addImport&lt;/strong&gt;(const(char)[] path);</source>
          <target state="translated">void &lt;strong id=&quot;addImport&quot;&gt;addImport&lt;/strong&gt;（const（char）[] path）;</target>
        </trans-unit>
        <trans-unit id="a4c137493b912a06ff117ef5ff3b3ae8a4f2c690" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;addMember&quot;&gt;addMember&lt;/strong&gt;(Scope* sc, ScopeDsymbol sd);</source>
          <target state="translated">void &lt;strong id=&quot;addMember&quot;&gt;addMember&lt;/strong&gt;（Scope * sc、ScopeDsymbol sd）;</target>
        </trans-unit>
        <trans-unit id="ce27ac0406d2366fcbc3514a98989dcce5563eb5" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;addMember&quot;&gt;addMember&lt;/strong&gt;(Scope* sc, ScopeDsymbol sds);</source>
          <target state="translated">void &lt;strong id=&quot;addMember&quot;&gt;addMember&lt;/strong&gt;（Scope * sc、ScopeDsymbol sds）;</target>
        </trans-unit>
        <trans-unit id="37293d295aee8c081dc91b4036ae836a3520516d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;addRequestHeader&quot;&gt;addRequestHeader&lt;/strong&gt;(const(char)[] name, const(char)[] value);</source>
          <target state="translated">void &lt;strong id=&quot;addRequestHeader&quot;&gt;addRequestHeader&lt;/strong&gt;（const（char）[] name、const（char）[] value）;</target>
        </trans-unit>
        <trans-unit id="00bdd1c8a45243a64c2374b610b545edb3603d2a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;addStringImport&quot;&gt;addStringImport&lt;/strong&gt;(const(char)[] path);</source>
          <target state="translated">void &lt;strong id=&quot;addStringImport&quot;&gt;addStringImport&lt;/strong&gt;（const（char）[] path）;</target>
        </trans-unit>
        <trans-unit id="5b26d8a443b23ca77387280bbd24c9e762389a49" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;append&quot;&gt;append&lt;/strong&gt;(R)(R name, const void[] buffer)</source>
          <target state="translated">void &lt;strong id=&quot;append&quot;&gt;append&lt;/strong&gt;（R）（R name、const void [] buffer）</target>
        </trans-unit>
        <trans-unit id="704f34da23ceee69f8529342fc8b898907afb6e7" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;append&quot;&gt;append&lt;/strong&gt;(R)(auto ref R name, const void[] buffer)</source>
          <target state="translated">void &lt;strong id=&quot;append&quot;&gt;append&lt;/strong&gt;（R）（auto ref R name、const void [] buffer）</target>
        </trans-unit>
        <trans-unit id="8c6bef81881b5936aaddd07376d7d8c24b149a5d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;append&quot;&gt;append&lt;/strong&gt;(T, Endian endianness = Endian.bigEndian, R)(R range, const T value)</source>
          <target state="translated">void &lt;strong id=&quot;append&quot;&gt;append&lt;/strong&gt;（T、Endian endianness = Endian.bigEndian、R）（R range、const T value）</target>
        </trans-unit>
        <trans-unit id="d36644362afe9b81a8efece9960f15f8b061096e" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;argExpTypesToCBuffer&quot;&gt;argExpTypesToCBuffer&lt;/strong&gt;(OutBuffer* buf, Expressions* arguments);</source>
          <target state="translated">void &lt;strong id=&quot;argExpTypesToCBuffer&quot;&gt;argExpTypesToCBuffer&lt;/strong&gt;（OutBuffer * buf、Expressions * arguments）;</target>
        </trans-unit>
        <trans-unit id="4a6a1e76e01d38a92e953c8d63017147ee12bd01" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;assertThrown&quot;&gt;assertThrown&lt;/strong&gt;(T : Throwable = Exception, E)(lazy E expression, string msg = null, string file = __FILE__, size_t line = __LINE__);</source>
          <target state="translated">void &lt;strong id=&quot;assertThrown&quot;&gt;assertThrown&lt;/strong&gt;（T：Throwable = Exception、E）（lazy E expression、string msg = null、string file = __FILE__、size_t line = __LINE__）;</target>
        </trans-unit>
        <trans-unit id="c6e5694f6ed491165f920d8d07f7694d6d64f641" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;assignInPlace&quot;&gt;assignInPlace&lt;/strong&gt;(Expression dest, Expression src);</source>
          <target state="translated">void &lt;strong id=&quot;assignInPlace&quot;&gt;assignInPlace&lt;/strong&gt;（Expression dest、Expression src）;</target>
        </trans-unit>
        <trans-unit id="cbe87d1a258dc51fe86ceedb8f64badf7de48059" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;assume&quot;&gt;assume&lt;/strong&gt;(Store s, size_t initialSize = size_t.max);</source>
          <target state="translated">void &lt;strong id=&quot;assume&quot;&gt;assume&lt;/strong&gt;（Store s、size_t initialSize = size_t.max）;</target>
        </trans-unit>
        <trans-unit id="e009c05668d34dcf2bbbac9c115ee362a3b8abe8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;attributesApply&quot;&gt;attributesApply&lt;/strong&gt;(const TypeFunction tf, void delegate(string) dg, TRUSTformat trustFormat = TRUSTformatDefault);</source>
          <target state="translated">void &lt;strong id=&quot;attributesApply&quot;&gt;attributesApply&lt;/strong&gt;（const TypeFunction tf、void delegate（string）dg、TRUSTformat trustFormat = TRUSTformatDefault）;</target>
        </trans-unit>
        <trans-unit id="6c773371065eb06d6c92245361e5f8507ec716ba" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;backend_init&quot;&gt;backend_init&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;backend_init&quot;&gt;backend_init&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="57101cf1c5c9ed344ea45ab3df24f3b502ff896b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;backend_term&quot;&gt;backend_term&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;backend_term&quot;&gt;backend_term&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="77d644ebc788482c97867dfaba0e68eb20f12e88" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;browse&quot;&gt;browse&lt;/strong&gt;(scope const(char)[] url);</source>
          <target state="translated">void &lt;strong id=&quot;browse&quot;&gt;browse&lt;/strong&gt;（scope const（char）[] url）;</target>
        </trans-unit>
        <trans-unit id="1b37da6dacff90719f0024bec5871c125b97d8e5" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;buildCapture&quot;&gt;buildCapture&lt;/strong&gt;(FuncDeclaration fd);</source>
          <target state="translated">void &lt;strong id=&quot;buildCapture&quot;&gt;buildCapture&lt;/strong&gt;（FuncDeclaration fd）;</target>
        </trans-unit>
        <trans-unit id="7bb8d03b4c36733a4ffd6a84003ec818027df88c" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;buildClosure&quot;&gt;buildClosure&lt;/strong&gt;(FuncDeclaration fd, IRState* irs);</source>
          <target state="translated">void &lt;strong id=&quot;buildClosure&quot;&gt;buildClosure&lt;/strong&gt;（FuncDeclaration fd、IRState * irs）;</target>
        </trans-unit>
        <trans-unit id="29a02bf1a20fd652a3a8d09acf737c0da7c2d643" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;builtinDeinitialize&quot;&gt;builtinDeinitialize&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;builtinDeinitialize&quot;&gt;builtinDeinitialize&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="9f2e6865505805612aaf5c38b18864ab563ed784" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;cantExp&quot;&gt;cantExp&lt;/strong&gt;(out UnionExp ue);</source>
          <target state="translated">void &lt;strong id=&quot;cantExp&quot;&gt;cantExp&lt;/strong&gt;（UnionExp ueを除く）;</target>
        </trans-unit>
        <trans-unit id="d16c69b125027b3382d624525cec83f952486793" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;chdir&quot;&gt;chdir&lt;/strong&gt;(R)(R pathname)</source>
          <target state="translated">void &lt;strong id=&quot;chdir&quot;&gt;chdir&lt;/strong&gt;（R）（Rパス名）</target>
        </trans-unit>
        <trans-unit id="bed9905d7ba9777311a469ed8b1fe3934556aafa" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;chdir&quot;&gt;chdir&lt;/strong&gt;(R)(auto ref R pathname)</source>
          <target state="translated">void &lt;strong id=&quot;chdir&quot;&gt;chdir&lt;/strong&gt;（R）（auto ref R pathname）</target>
        </trans-unit>
        <trans-unit id="e11c34d41a926bf8420154bafd69381446e0f2de" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;checkDeprecated&quot;&gt;checkDeprecated&lt;/strong&gt;(ref const Loc loc, Scope* sc);</source>
          <target state="translated">void &lt;strong id=&quot;checkDeprecated&quot;&gt;checkDeprecated&lt;/strong&gt;（ref const Loc loc、Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="e996d8dc4b6d8ffbdcefdfd0fce5bdbe6fd2acce" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;cleanup&quot;&gt;cleanup&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;cleanup&quot;&gt;cleanup&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="a8c7ce7da3697dc7b32beced5069f84abc67592b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;clear&quot;&gt;clear&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;clear&quot;&gt;clear&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="171e8bded9d01bcb5ad13d1bba500940d177c13e" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;clear&quot;&gt;clear&lt;/strong&gt;(CurlOption option);</source>
          <target state="translated">void &lt;strong id=&quot;clear&quot;&gt;clear&lt;/strong&gt;（CurlOptionオプション）;</target>
        </trans-unit>
        <trans-unit id="6f412dc2c1b374719651f9e8d90992556bdee936" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;clear&quot;&gt;clear&lt;/strong&gt;(T : Value[Key], Value, Key)(T aa);</source>
          <target state="translated">void &lt;strong id=&quot;clear&quot;&gt;clear&lt;/strong&gt;（T：Value [Key]、Value、Key）（T aa）;</target>
        </trans-unit>
        <trans-unit id="46a79b1fdf702b2c22513e0be7f4673dfeff822a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;clear&quot;&gt;clear&lt;/strong&gt;(Value, Key)(Value[Key] aa);</source>
          <target state="translated">void &lt;strong id=&quot;clear&quot;&gt;clear&lt;/strong&gt;(Value, Key)(Value[Key] aa);</target>
        </trans-unit>
        <trans-unit id="810117e1c1b44b06eccbeef997557cbaed3bb615" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;clearAllCookies&quot;&gt;clearAllCookies&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;clearAllCookies&quot;&gt;clearAllCookies&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="cf65c027b1733623503a98626eae2cfe34fb5b30" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;clearCommands&quot;&gt;clearCommands&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;clearCommands&quot;&gt;clearCommands&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="75587177275eb72b67e46588e9b142f3c0750642" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;clearIfSupported&quot;&gt;clearIfSupported&lt;/strong&gt;(CurlOption option);</source>
          <target state="translated">void &lt;strong id=&quot;clearIfSupported&quot;&gt;clearIfSupported&lt;/strong&gt;（CurlOptionオプション）;</target>
        </trans-unit>
        <trans-unit id="f8783571f9d2207c9965cbb9bd6ec1b67d3f91ec" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;clearRequestHeaders&quot;&gt;clearRequestHeaders&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;clearRequestHeaders&quot;&gt;clearRequestHeaders&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="51d8f2412331b905f33355c802bf8dde9c3a2793" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;clearSessionCookies&quot;&gt;clearSessionCookies&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;clearSessionCookies&quot;&gt;clearSessionCookies&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="c7669c61e9aeb8e877dce87988b7704e4db83fcc" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;clearStringTab&quot;&gt;clearStringTab&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;clearStringTab&quot;&gt;clearStringTab&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="373e7d1a231d657d9f1a73d1e8c121ab9eab57b3" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;completeSort&quot;&gt;completeSort&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, SwapStrategy ss = SwapStrategy.unstable, Lhs, Rhs)(SortedRange!(Lhs, less) lhs, Rhs rhs)</source>
          <target state="translated">void &lt;strong id=&quot;completeSort&quot;&gt;completeSort&lt;/strong&gt;（エイリアスless = &quot;a &amp;lt;b&quot;、SwapStrategy ss = SwapStrategy.unstable、Lhs、Rhs）（SortedRange！（Lhs、less）lhs、Rhs rhs）</target>
        </trans-unit>
        <trans-unit id="ef29ac18c2092b4feb9eb4919fdf8b65c6953495" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;copy&quot;&gt;copy&lt;/strong&gt;(RF, RT)(RF from, RT to, PreserveAttributes preserve = preserveAttributesDefault)</source>
          <target state="translated">void &lt;strong id=&quot;copy&quot;&gt;copy&lt;/strong&gt;（RF、RT）（RF from、RT to、PreserveAttributes preserve = preserveAttributesDefault）</target>
        </trans-unit>
        <trans-unit id="38084dd2d127bb2b919ee190d9a025e337108b97" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;copy&quot;&gt;copy&lt;/strong&gt;(RF, RT)(auto ref RF from, auto ref RT to, PreserveAttributes preserve = preserveAttributesDefault)</source>
          <target state="translated">void &lt;strong id=&quot;copy&quot;&gt;copy&lt;/strong&gt;（RF、RT）（auto ref RF from、auto ref RT to、PreserveAttributes preserve = preserveAttributesDefault）</target>
        </trans-unit>
        <trans-unit id="37bcb32fcb4dcae9a34ed1c037e75db61712685b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;cpp_delete&quot;&gt;cpp_delete&lt;/strong&gt;(T)(T instance)</source>
          <target state="translated">void &lt;strong id=&quot;cpp_delete&quot;&gt;cpp_delete&lt;/strong&gt;（T）（Tインスタンス）</target>
        </trans-unit>
        <trans-unit id="302ae7185f523e9c63100ed12ceba23276f40c48" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;cpp_delete&quot;&gt;cpp_delete&lt;/strong&gt;(T)(T* ptr)</source>
          <target state="translated">void &lt;strong id=&quot;cpp_delete&quot;&gt;cpp_delete&lt;/strong&gt;(T)(T* ptr)</target>
        </trans-unit>
        <trans-unit id="b05699dad0bc07b34dc50bd85df4fe72e9fb0f9a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;cpp_type_info_ptr_toDt&quot;&gt;cpp_type_info_ptr_toDt&lt;/strong&gt;(ClassDeclaration cd, ref DtBuilder dtb);</source>
          <target state="translated">void &lt;strong id=&quot;cpp_type_info_ptr_toDt&quot;&gt;cpp_type_info_ptr_toDt&lt;/strong&gt;（ClassDeclaration cd、ref DtBuilder dtb）;</target>
        </trans-unit>
        <trans-unit id="a24f7c1fac1dd43ee1928950acd378f612e5d58c" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;csvNextToken&quot;&gt;csvNextToken&lt;/strong&gt;(Range, Malformed ErrorLevel = Malformed.throwException, Separator, Output)(ref Range input, ref Output ans, Separator sep, Separator quote, bool startQuoted = false)</source>
          <target state="translated">void &lt;strong id=&quot;csvNextToken&quot;&gt;csvNextToken&lt;/strong&gt;（Range、Malformed ErrorLevel = Malformed.throwException、Separator、Output）（ref Range input、ref Output ans、Separator sep、Separator quote、bool startQuoted = false）</target>
        </trans-unit>
        <trans-unit id="fe95aa2ab0f6592939d011c3bc4f116332b04fb9" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;curl_easy_cleanup&quot;&gt;curl_easy_cleanup&lt;/strong&gt;(CURL* curl);</source>
          <target state="translated">void &lt;strong id=&quot;curl_easy_cleanup&quot;&gt;curl_easy_cleanup&lt;/strong&gt;（CURL * curl）;</target>
        </trans-unit>
        <trans-unit id="55a119a929e75539b33f36a9b366a849ac49d145" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;curl_easy_reset&quot;&gt;curl_easy_reset&lt;/strong&gt;(CURL* curl);</source>
          <target state="translated">void &lt;strong id=&quot;curl_easy_reset&quot;&gt;curl_easy_reset&lt;/strong&gt;（CURL * curl）;</target>
        </trans-unit>
        <trans-unit id="4ed9dfaf5a3138e5de098ac10d262cc6657a2bd0" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;curl_formfree&quot;&gt;curl_formfree&lt;/strong&gt;(curl_httppost* form);</source>
          <target state="translated">void &lt;strong id=&quot;curl_formfree&quot;&gt;curl_formfree&lt;/strong&gt;（curl_httppost * form）;</target>
        </trans-unit>
        <trans-unit id="f4917a9c4e272f613cd9f27ab4427050f1691fc1" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;curl_free&quot;&gt;curl_free&lt;/strong&gt;(void* p);</source>
          <target state="translated">void &lt;strong id=&quot;curl_free&quot;&gt;curl_free&lt;/strong&gt;（void * p）;</target>
        </trans-unit>
        <trans-unit id="a5b2f3f8ca68a03f0a8f6c27e96002fc74185320" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;curl_global_cleanup&quot;&gt;curl_global_cleanup&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;curl_global_cleanup&quot;&gt;curl_global_cleanup&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="68d7040ca8627e8df54f6389576459e1a7bf1ef3" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;curl_slist_free_all&quot;&gt;curl_slist_free_all&lt;/strong&gt;(curl_slist*);</source>
          <target state="translated">void &lt;strong id=&quot;curl_slist_free_all&quot;&gt;curl_slist_free_all&lt;/strong&gt;（curl_slist *）;</target>
        </trans-unit>
        <trans-unit id="61687865d8af1349baa4f1d1017e60ecc8c4fe52" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;defaultGetoptFormatter&quot;&gt;defaultGetoptFormatter&lt;/strong&gt;(Output)(Output output, string text, Option[] opt);</source>
          <target state="translated">void &lt;strong id=&quot;defaultGetoptFormatter&quot;&gt;defaultGetoptFormatter&lt;/strong&gt;（出力）（出力出力、文字列テキスト、Option [] opt）;</target>
        </trans-unit>
        <trans-unit id="7e43fa7eb3761c1820ee640f0e6def8f9b8e1fa5" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;defaultGetoptFormatter&quot;&gt;defaultGetoptFormatter&lt;/strong&gt;(Output)(Output output, string text, Option[] opt, string style = &quot;%*s %*s%*s%s\x0a&quot;);</source>
          <target state="translated">void &lt;strong id=&quot;defaultGetoptFormatter&quot;&gt;defaultGetoptFormatter&lt;/strong&gt;(Output)(Output output, string text, Option[] opt, string style = &quot;%*s %*s%*s%s\x0a&quot;);</target>
        </trans-unit>
        <trans-unit id="84465d586f333b0e03da72ef3c852170088de1b1" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;defaultGetoptPrinter&quot;&gt;defaultGetoptPrinter&lt;/strong&gt;(string text, Option[] opt);</source>
          <target state="translated">void &lt;strong id=&quot;defaultGetoptPrinter&quot;&gt;defaultGetoptPrinter&lt;/strong&gt;（string text、Option [] opt）;</target>
        </trans-unit>
        <trans-unit id="ebfd1461f35bf51b39bd2f6d7faa35a7f00cc87f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;deinitialize&quot;&gt;deinitialize&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;deinitialize&quot;&gt;deinitialize&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="acdcad95991bc98949f2cc0063b145b0d822bf83" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;deinitializeDMD&quot;&gt;deinitializeDMD&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;deinitializeDMD&quot;&gt;deinitializeDMD&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="0b80f965972d819187da84664bfd227918285e03" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;del&quot;&gt;del&lt;/strong&gt;(Conn = AutoProtocol)(const(char)[] url, Conn conn = Conn())</source>
          <target state="translated">void &lt;strong id=&quot;del&quot;&gt;del&lt;/strong&gt;（Conn = AutoProtocol）（const（char）[] url、Conn conn = Conn（））</target>
        </trans-unit>
        <trans-unit id="f6387fedd59438a538eb79925118c1a37c686ee6" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;destroy&quot;&gt;destroy&lt;/strong&gt;(bool initialize = true, T : U[n], U, size_t n)(ref T obj)</source>
          <target state="translated">void &lt;strong id=&quot;destroy&quot;&gt;destroy&lt;/strong&gt;（bool initialize = true、T：U [n]、U、size_t n）（ref T obj）</target>
        </trans-unit>
        <trans-unit id="d9ef68514d02f31025117870fb2ea64db26d10b8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;destroy&quot;&gt;destroy&lt;/strong&gt;(bool initialize = true, T)(T obj)</source>
          <target state="translated">void &lt;strong id=&quot;destroy&quot;&gt;destroy&lt;/strong&gt;（bool initialize = true、T）（T obj）</target>
        </trans-unit>
        <trans-unit id="b9e0b227ec9a133c4a7e6f2ac28a621dafb64b19" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;destroy&quot;&gt;destroy&lt;/strong&gt;(bool initialize = true, T)(ref T obj)</source>
          <target state="translated">void &lt;strong id=&quot;destroy&quot;&gt;destroy&lt;/strong&gt;（bool initialize = true、T）（ref T obj）</target>
        </trans-unit>
        <trans-unit id="292f9de23ae0e5d4bd7a7915e875d526ce209344" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;(A, T)(auto ref A alloc, auto ref T p)</source>
          <target state="translated">void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;（A、T）（auto ref A alloc、auto ref T p）</target>
        </trans-unit>
        <trans-unit id="8aa244fcab82b32f62e0b6f66917c8f635489711" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;(A, T)(auto ref A alloc, auto ref T* p);</source>
          <target state="translated">void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;（A、T）（auto ref A alloc、auto ref T * p）;</target>
        </trans-unit>
        <trans-unit id="646ab53dddfcea0facd3717d1bc6f620e3ba99e1" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;(A, T)(auto ref A alloc, auto ref T[] array);</source>
          <target state="translated">void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;（A、T）（auto ref A alloc、auto ref T [] array）;</target>
        </trans-unit>
        <trans-unit id="7c4b6cc6f79100bbbe431b2d04c58d9f1df50bca" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;(T)(T p)</source>
          <target state="translated">void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;（T）（T p）</target>
        </trans-unit>
        <trans-unit id="1af20024cd9a7392eb05ba39f75751829b14e265" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;(T)(T* p);</source>
          <target state="translated">void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;（T）（T * p）;</target>
        </trans-unit>
        <trans-unit id="5f17b1f7a3d89461ebd78e151fee516eff41230a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;(T)(T[] array);</source>
          <target state="translated">void &lt;strong id=&quot;dispose&quot;&gt;dispose&lt;/strong&gt;（T）（T [] array）;</target>
        </trans-unit>
        <trans-unit id="f710e0bb1ccc5db2a38c3f10a258723ebd6b068f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;disposeMultidimensionalArray&quot;&gt;disposeMultidimensionalArray&lt;/strong&gt;(T, Allocator)(auto ref Allocator alloc, auto ref T[] array);</source>
          <target state="translated">void &lt;strong id=&quot;disposeMultidimensionalArray&quot;&gt;disposeMultidimensionalArray&lt;/strong&gt;（T、&lt;strong id=&quot;disposeMultidimensionalArray&quot;&gt;Allocator&lt;/strong&gt;）（auto ref Allocator alloc、auto ref T [] array）;</target>
        </trans-unit>
        <trans-unit id="770c820efa7454fb42b372c1fbb2526e886982dd" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dmd_coverDestPath&quot;&gt;dmd_coverDestPath&lt;/strong&gt;(string path);</source>
          <target state="translated">void &lt;strong id=&quot;dmd_coverDestPath&quot;&gt;dmd_coverDestPath&lt;/strong&gt;（string path）;</target>
        </trans-unit>
        <trans-unit id="90bd31b512a9cfb3d37755b90c8714328b8c4d1b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dmd_coverDestPath&quot;&gt;dmd_coverDestPath&lt;/strong&gt;(string pathname);</source>
          <target state="translated">void &lt;strong id=&quot;dmd_coverDestPath&quot;&gt;dmd_coverDestPath&lt;/strong&gt;（string pathname）;</target>
        </trans-unit>
        <trans-unit id="2ffb0042578afb8a83b078f1da8f4053a06d015b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dmd_coverSetMerge&quot;&gt;dmd_coverSetMerge&lt;/strong&gt;(bool flag);</source>
          <target state="translated">void &lt;strong id=&quot;dmd_coverSetMerge&quot;&gt;dmd_coverSetMerge&lt;/strong&gt;（ブールフラグ）;</target>
        </trans-unit>
        <trans-unit id="bd2573ab8cf7f2bca3ddd02e8c52210bc4080c99" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dmd_coverSourcePath&quot;&gt;dmd_coverSourcePath&lt;/strong&gt;(string path);</source>
          <target state="translated">void &lt;strong id=&quot;dmd_coverSourcePath&quot;&gt;dmd_coverSourcePath&lt;/strong&gt;（string path）;</target>
        </trans-unit>
        <trans-unit id="a0ed4520bfa6d4821e29d9c64ffd86818e54725a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dmd_coverSourcePath&quot;&gt;dmd_coverSourcePath&lt;/strong&gt;(string pathname);</source>
          <target state="translated">void &lt;strong id=&quot;dmd_coverSourcePath&quot;&gt;dmd_coverSourcePath&lt;/strong&gt;（string pathname）;</target>
        </trans-unit>
        <trans-unit id="33d07b279e991e8f564717d3113221cce70813ee" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;download&quot;&gt;download&lt;/strong&gt;(Conn = AutoProtocol)(const(char)[] url, string saveToPath, Conn conn = Conn())</source>
          <target state="translated">void &lt;strong id=&quot;download&quot;&gt;ダウンロード&lt;/strong&gt;（Conn = AutoProtocol）（const（char）[] url、string saveToPath、Conn conn = Conn（））</target>
        </trans-unit>
        <trans-unit id="c13b8c1ef20ebffa6828b51efc7dab88050dd23f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;dsymbolSemantic&quot;&gt;dsymbolSemantic&lt;/strong&gt;(Dsymbol dsym, Scope* sc);</source>
          <target state="translated">void &lt;strong id=&quot;dsymbolSemantic&quot;&gt;dsymbolSemantic&lt;/strong&gt;（Dsymbol dsym、Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="6e5447b59ac7c0eb20c9fb5351c1016f21a05c27" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;eliminateMaybeScopes&quot;&gt;eliminateMaybeScopes&lt;/strong&gt;(VarDeclaration[] array);</source>
          <target state="translated">ボイド&lt;strong id=&quot;eliminateMaybeScopes&quot;&gt;eliminateMaybeScopes&lt;/strong&gt;（VarDeclaration []配列）。</target>
        </trans-unit>
        <trans-unit id="3f4cad2ed35ce35b9ffa32b413ad244cd12d7330" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;encode&quot;&gt;encode&lt;/strong&gt;(E)(dchar c, void delegate(E) dg);</source>
          <target state="translated">void &lt;strong id=&quot;encode&quot;&gt;エンコード&lt;/strong&gt;（E）（dchar c、void delegate（E）dg）;</target>
        </trans-unit>
        <trans-unit id="2f61750d7a1f1fe2c02919470025cbec40d391ea" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;ensureInitialized&quot;&gt;ensureInitialized&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;ensureInitialized&quot;&gt;EnsureInitialized&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="3604bbe6534cf4f396493437baf08902f751886d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;ensurePathToNameExists&quot;&gt;ensurePathToNameExists&lt;/strong&gt;(Loc loc, const(char)[] name);</source>
          <target state="translated">void &lt;strong id=&quot;ensurePathToNameExists&quot;&gt;EnsurePathToNameExists&lt;/strong&gt;（Loc loc、const（char）[] name）;</target>
        </trans-unit>
        <trans-unit id="33b6a9cfd52c33c7942f775fb5c6d1730166b615" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;escapeDdocString&quot;&gt;escapeDdocString&lt;/strong&gt;(OutBuffer* buf, size_t start);</source>
          <target state="translated">void &lt;strong id=&quot;escapeDdocString&quot;&gt;escapeDdocString&lt;/strong&gt;（OutBuffer * buf、size_t start）;</target>
        </trans-unit>
        <trans-unit id="9da874c6302e3dd55fcea4d6af14a488c8481a64" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;escapePath&quot;&gt;escapePath&lt;/strong&gt;(OutBuffer* buf, const(char)* fname);</source>
          <target state="translated">void &lt;strong id=&quot;escapePath&quot;&gt;escapePath&lt;/strong&gt;（OutBuffer * buf、const（char）* fname）;</target>
        </trans-unit>
        <trans-unit id="3af356d4992a1864e6d92fcb62539195d2049847" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;except_fillInEHTable&quot;&gt;except_fillInEHTable&lt;/strong&gt;(Symbol* s);</source>
          <target state="translated">void &lt;strong id=&quot;except_fillInEHTable&quot;&gt;except_fillInEHTable&lt;/strong&gt;（Symbol * s）;</target>
        </trans-unit>
        <trans-unit id="9ddafc68ae82246a703c38bfce15c3b19c1f5611" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt;(T)(T years, T months = 0, AllowDayOverflow allowOverflow = AllowDayOverflow.yes)</source>
          <target state="translated">void &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt;（T）（T年、Tヶ月= 0、AllowDayOverflow allowOverflow = AllowDayOverflow.yes）</target>
        </trans-unit>
        <trans-unit id="5f7062094a9b93fc5792378c1c1f6d37edbf9e81" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt;(T)(T years, T months = 0, AllowDayOverflow allowOverflow = AllowDayOverflow.yes, Direction dir = Direction.both)</source>
          <target state="translated">void &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt;（T）（T年、Tヶ月= 0、AllowDayOverflow allowOverflow = AllowDayOverflow.yes、Direction dir = Direction.both）</target>
        </trans-unit>
        <trans-unit id="a9bf6b2dff52e4365413f2b3b2dc7a5c2e6364df" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;expandTuples&quot;&gt;expandTuples&lt;/strong&gt;(Expressions* exps);</source>
          <target state="translated">void &lt;strong id=&quot;expandTuples&quot;&gt;expandTuples&lt;/strong&gt;（Expressions * exps）;</target>
        </trans-unit>
        <trans-unit id="651dad101f0ee637d45c9a1029cc04527f9e6d09" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;fft&quot;&gt;fft&lt;/strong&gt;(Ret, R)(R range, Ret buf);</source>
          <target state="translated">void &lt;strong id=&quot;fft&quot;&gt;fft&lt;/strong&gt;（Ret、R）（R range、Ret buf）;</target>
        </trans-unit>
        <trans-unit id="2127058557a14caa3b99fb448869d1c7d6ff799d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;fill&quot;&gt;fill&lt;/strong&gt;()(auto ref const(T) value);</source>
          <target state="translated">void &lt;strong id=&quot;fill&quot;&gt;fill&lt;/strong&gt;（）（auto ref const（T）value）;</target>
        </trans-unit>
        <trans-unit id="7cb6a9e5688a125a33e27fe220f5e0e900d02913" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;fill&quot;&gt;fill&lt;/strong&gt;(InputRange, ForwardRange)(InputRange range, ForwardRange filler)</source>
          <target state="translated">void &lt;strong id=&quot;fill&quot;&gt;fill&lt;/strong&gt;（InputRange、ForwardRange）（InputRange range、ForwardRangeフィラー）</target>
        </trans-unit>
        <trans-unit id="cbe3fcd14a7458a4346fef73829c0e05716f82f6" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;fill&quot;&gt;fill&lt;/strong&gt;(Range, Value)(auto ref Range range, auto ref Value value)</source>
          <target state="translated">void &lt;strong id=&quot;fill&quot;&gt;fill&lt;/strong&gt;（Range、Value）（auto ref Range range、auto ref Value value）</target>
        </trans-unit>
        <trans-unit id="5026a1a799e38d515689eb72efdc5e762b002a59" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;findAllOuterAccessedVariables&quot;&gt;findAllOuterAccessedVariables&lt;/strong&gt;(FuncDeclaration fd, VarDeclarations* vars);</source>
          <target state="translated">void &lt;strong id=&quot;findAllOuterAccessedVariables&quot;&gt;findAllOuterAccessedVariables&lt;/strong&gt;（FuncDeclaration fd、VarDeclarations * vars）;</target>
        </trans-unit>
        <trans-unit id="52fa68d10ac5e7cc2f1d7e6712e70478b163f32a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;fix16997&quot;&gt;fix16997&lt;/strong&gt;(Scope* sc, UnaExp ue);</source>
          <target state="translated">void &lt;strong id=&quot;fix16997&quot;&gt;fix16997&lt;/strong&gt;（Scope * sc、UnaExp ue）;</target>
        </trans-unit>
        <trans-unit id="da376122fd5e47264b2f02f311f5f3ce37f62232" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;flip&quot;&gt;flip&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;flip&quot;&gt;flip&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="d6bedad30e961f9a3d1dec0a9b4ee1e4dbf9d44d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;flip&quot;&gt;flip&lt;/strong&gt;(size_t i);</source>
          <target state="translated">void &lt;strong id=&quot;flip&quot;&gt;flip&lt;/strong&gt;（size_t i）;</target>
        </trans-unit>
        <trans-unit id="55818cb46c9ab901fad4ff4aa5c6f6d9b71b80a2" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;flushCookieJar&quot;&gt;flushCookieJar&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;flushCookieJar&quot;&gt;flushCookieJar&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="6e39c2808070fe3cf6aded914457dc7e8d614a31" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;flushMixins&quot;&gt;flushMixins&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;flushMixins&quot;&gt;flushMixins&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="12d72912dd829606c9b2f53cb36d7f3ab846b874" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;foreachDsymbol&quot;&gt;foreachDsymbol&lt;/strong&gt;(Dsymbols* symbols, scope void delegate(Dsymbol) dg);</source>
          <target state="translated">void &lt;strong id=&quot;foreachDsymbol&quot;&gt;foreachDsymbol&lt;/strong&gt;（Dsymbols *シンボル、スコープvoid delegate（Dsymbol）dg）;</target>
        </trans-unit>
        <trans-unit id="0b0b26b6deb29b26cdb331bc58f6d7ad9ef10e29" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;formatValue&quot;&gt;formatValue&lt;/strong&gt;(Writer, T, Char)(auto ref Writer w, auto ref T val, ref scope const FormatSpec!Char f);</source>
          <target state="translated">void &lt;strong id=&quot;formatValue&quot;&gt;formatValue&lt;/strong&gt;（Writer、T、Char）（auto ref Writer w、auto ref T val、ref scope const FormatSpec！Char f）;</target>
        </trans-unit>
        <trans-unit id="ff3e1ec02702d3b6bca7e9a3e32caa1c0e84f53f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;fullSemantic&quot;&gt;fullSemantic&lt;/strong&gt;(Module m);</source>
          <target state="translated">void &lt;strong id=&quot;fullSemantic&quot;&gt;fullSemantic&lt;/strong&gt;（モジュールm）;</target>
        </trans-unit>
        <trans-unit id="531eb492556da923f0ab82ae63b3ca4744534130" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;fullyQualifiedName&quot;&gt;fullyQualifiedName&lt;/strong&gt;(ref OutBuffer buf);</source>
          <target state="translated">void &lt;strong id=&quot;fullyQualifiedName&quot;&gt;fullyQualifiedName&lt;/strong&gt;（ref OutBuffer buf）;</target>
        </trans-unit>
        <trans-unit id="72645c240b0f62519be399baf06476aefe416d14" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;functionResolve&quot;&gt;functionResolve&lt;/strong&gt;(ref MatchAccumulator m, Dsymbol dstart, Loc loc, Scope* sc, Objects* tiargs, Type tthis, Expressions* fargs, const(char)** pMessage = null);</source>
          <target state="translated">void &lt;strong id=&quot;functionResolve&quot;&gt;functionResolve&lt;/strong&gt;（ref MatchAccumulator m、Dsymbol dstart、Loc loc、Scope * sc、Objects * tiargs、Type tthis、Expressions * fargs、const（char）** pMessage = null）;</target>
        </trans-unit>
        <trans-unit id="df11071c42325e42c515e8aa76706455a24a4555" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;gc_clrProxy&quot;&gt;gc_clrProxy&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;gc_clrProxy&quot;&gt;gc_clrProxy&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="45160a4237457d80188fc867d73e48457ab20057" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;gc_setProxy&quot;&gt;gc_setProxy&lt;/strong&gt;(void* p);</source>
          <target state="translated">void &lt;strong id=&quot;gc_setProxy&quot;&gt;gc_setProxy&lt;/strong&gt;（void * p）;</target>
        </trans-unit>
        <trans-unit id="8099792910f2fff889f994794fc371ed3d5af85b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;genObjFile&quot;&gt;genObjFile&lt;/strong&gt;(Module m, bool multiobj);</source>
          <target state="translated">void &lt;strong id=&quot;genObjFile&quot;&gt;genObjFile&lt;/strong&gt;（モジュールm、bool &lt;strong id=&quot;genObjFile&quot;&gt;multiobj&lt;/strong&gt;）;</target>
        </trans-unit>
        <trans-unit id="41db5b2e3ebce91b62b275d2ff04b097f4f2e9f2" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;genTypeInfo&quot;&gt;genTypeInfo&lt;/strong&gt;(Loc loc, Type torig, Scope* sc);</source>
          <target state="translated">void &lt;strong id=&quot;genTypeInfo&quot;&gt;genTypeInfo&lt;/strong&gt;（Loc loc、Type torig、Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="be0777cc5a7cf5aa336bbdbfa27fee8aabba2e40" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;gendocfile&quot;&gt;gendocfile&lt;/strong&gt;(Module m);</source>
          <target state="translated">void &lt;strong id=&quot;gendocfile&quot;&gt;gendocfile&lt;/strong&gt;（モジュールm）;</target>
        </trans-unit>
        <trans-unit id="28eafe7c980c9fa9e80414a241086ccffb13cb8c" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;getTimes&quot;&gt;getTimes&lt;/strong&gt;(R)(R name, out SysTime accessTime, out SysTime modificationTime)</source>
          <target state="translated">void &lt;strong id=&quot;getTimes&quot;&gt;getTimes&lt;/strong&gt;（R）（R name、out SysTime accessTime、out SysTime modifierTime）</target>
        </trans-unit>
        <trans-unit id="ca644dc8552f7f5f1a5cfbca6c4055b839c6c0bd" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;getTimes&quot;&gt;getTimes&lt;/strong&gt;(R)(auto ref R name, out SysTime accessTime, out SysTime modificationTime)</source>
          <target state="translated">void &lt;strong id=&quot;getTimes&quot;&gt;getTimes&lt;/strong&gt;（R）（auto ref R name、out SysTime accessTime、out SysTime modifierTime）</target>
        </trans-unit>
        <trans-unit id="b9c98932631222187667f34e5497509d3ad78101" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;getTimesWin&quot;&gt;getTimesWin&lt;/strong&gt;(R)(R name, out SysTime fileCreationTime, out SysTime fileAccessTime, out SysTime fileModificationTime)</source>
          <target state="translated">void &lt;strong id=&quot;getTimesWin&quot;&gt;getTimesWin&lt;/strong&gt;（R）（R name、out SysTime fileCreationTime、out SysTime fileAccessTime、out SysTime fileModificationTime）</target>
        </trans-unit>
        <trans-unit id="eb197da558f837df96dc4909342d80222772ec0f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;getenv_setargv&quot;&gt;getenv_setargv&lt;/strong&gt;(const(char)* envvalue, Strings* args);</source>
          <target state="translated">void &lt;strong id=&quot;getenv_setargv&quot;&gt;getenv_setargv&lt;/strong&gt;（const（char）* envvalue、Strings * args）;</target>
        </trans-unit>
        <trans-unit id="39349e4fb0186cfaa1695b9ff22038f77f2aa496" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;hookOpOpAssign&quot;&gt;hookOpOpAssign&lt;/strong&gt;(string x, L, R)(ref L lhs, R rhs);</source>
          <target state="translated">void &lt;strong id=&quot;hookOpOpAssign&quot;&gt;hookOpOpAssign&lt;/strong&gt;（string x、L、R）（ref L lhs、R rhs）;</target>
        </trans-unit>
        <trans-unit id="72b0a479b9b73024a4ecb6479e2dc7dcd78714f8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;initialize&quot;&gt;initialize&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;initialize&quot;&gt;initialize&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="15b7be14c644b23a2ba25e248d60dc8b929f5991" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;initializeAll&quot;&gt;initializeAll&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">void &lt;strong id=&quot;initializeAll&quot;&gt;initializeAll&lt;/strong&gt;（Range）（Range range）</target>
        </trans-unit>
        <trans-unit id="be8dfc979210b6fab7e88211212dc3a12a43ef46" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;inlineScanModule&quot;&gt;inlineScanModule&lt;/strong&gt;(Module m);</source>
          <target state="translated">void &lt;strong id=&quot;inlineScanModule&quot;&gt;inlineScanModule&lt;/strong&gt;（Module m）;</target>
        </trans-unit>
        <trans-unit id="1da9107346f062c196c7aa5d4959b8c2364990c3" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;insertFinallyBlockCalls&quot;&gt;insertFinallyBlockCalls&lt;/strong&gt;(block* startblock);</source>
          <target state="translated">void &lt;strong id=&quot;insertFinallyBlockCalls&quot;&gt;insertFinallyBlockCalls&lt;/strong&gt;（block * startblock）;</target>
        </trans-unit>
        <trans-unit id="6be21c922e7b6c86841e73a23bf50ca37f9c08a8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;insertFinallyBlockGotos&quot;&gt;insertFinallyBlockGotos&lt;/strong&gt;(block* startblock);</source>
          <target state="translated">void &lt;strong id=&quot;insertFinallyBlockGotos&quot;&gt;insertFinallyBlockGotos&lt;/strong&gt;（block * startblock）;</target>
        </trans-unit>
        <trans-unit id="36965fa919a2864bc8bec05cd779eb5264b82f7a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;insertInPlace&quot;&gt;insertInPlace&lt;/strong&gt;(T, U...)(ref T[] array, size_t pos, U stuff)</source>
          <target state="translated">void &lt;strong id=&quot;insertInPlace&quot;&gt;insertInPlace&lt;/strong&gt;（T、U ...）（ref T [] array、size_t pos、U stuff）</target>
        </trans-unit>
        <trans-unit id="d99e5ec7907aa670da7d93532c8a9cab1225b684" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;insertLabel&quot;&gt;insertLabel&lt;/strong&gt;(Statement s, Label* label);</source>
          <target state="translated">void &lt;strong id=&quot;insertLabel&quot;&gt;insertLabel&lt;/strong&gt;（Statement s、Label * label）;</target>
        </trans-unit>
        <trans-unit id="98f531262c5b92cd76b41954653b0d189938e1b6" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;inverseFft&quot;&gt;inverseFft&lt;/strong&gt;(Ret, R)(R range, Ret buf);</source>
          <target state="translated">void &lt;strong id=&quot;inverseFft&quot;&gt;reverseFft&lt;/strong&gt;（Ret、R）（R range、Ret buf）;</target>
        </trans-unit>
        <trans-unit id="c5669b58a0dd80bb3589ded19d84a213de28916d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;kill&quot;&gt;kill&lt;/strong&gt;(Pid pid);</source>
          <target state="translated">void &lt;strong id=&quot;kill&quot;&gt;kill&lt;/strong&gt;（Pid pid）;</target>
        </trans-unit>
        <trans-unit id="0311664bedf71f450e976e4324fc0c509921219a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;kill&quot;&gt;kill&lt;/strong&gt;(Pid pid, int codeOrSignal);</source>
          <target state="translated">void &lt;strong id=&quot;kill&quot;&gt;kill&lt;/strong&gt;（Pid pid、int codeOrSignal）;</target>
        </trans-unit>
        <trans-unit id="1ef3f2c20e173f9e2523292ad9db1dc8a7befa7c" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;largestPartialIntersection&quot;&gt;largestPartialIntersection&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, RangeOfRanges, Range)(RangeOfRanges ror, Range tgt, SortOutput sorted = No.sortOutput);</source>
          <target state="translated">void &lt;strong id=&quot;largestPartialIntersection&quot;&gt;maximumPartialIntersection&lt;/strong&gt;（エイリアスless = &quot;a &amp;lt;b&quot;、RangeOfRanges、Range）（RangeOfRanges ror、Range tgt、SortOutputソート済み= No.sortOutput）;</target>
        </trans-unit>
        <trans-unit id="613a1016d818ef8348431d525c9d4e3118ba0560" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;largestPartialIntersectionWeighted&quot;&gt;largestPartialIntersectionWeighted&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, RangeOfRanges, Range, WeightsAA)(RangeOfRanges ror, Range tgt, WeightsAA weights, SortOutput sorted = No.sortOutput);</source>
          <target state="translated">void &lt;strong id=&quot;largestPartialIntersectionWeighted&quot;&gt;maximumPartialIntersectionWeighted&lt;/strong&gt;（エイリアスless = &quot;a &amp;lt;b&quot;、RangeOfRanges、Range、WeightsAA）（RangeOfRanges ror、Range tgt、WeightsAA weights、SortOutputソート済み= No.sortOutput）;</target>
        </trans-unit>
        <trans-unit id="1d841fcf14f54dea9266b90385ae494c40dff6af" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;lock&quot;&gt;lock&lt;/strong&gt;(LockType lockType = LockType.readWrite, ulong start = 0, ulong length = 0);</source>
          <target state="translated">void &lt;strong id=&quot;lock&quot;&gt;lock&lt;/strong&gt;（LockType lockType = LockType.readWrite、ulong start = 0、ulong length = 0）;</target>
        </trans-unit>
        <trans-unit id="9f352d55e9a201ebf4cdaff9595dec357a797865" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;(T)(const LogLevel ll, lazy T args, int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__);</source>
          <target state="translated">void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;（T）（const LogLevel ll、lazy T args、int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__）;</target>
        </trans-unit>
        <trans-unit id="f279311d71e7c9aaa029152702820e2a8d20e999" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;(T)(lazy T arg, int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__);</source>
          <target state="translated">void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;（T）（lazy T arg、int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__）;</target>
        </trans-unit>
        <trans-unit id="e956c5833f0386d919a782f1c99ee74e2b8069e7" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;(T)(lazy bool condition, lazy T args, int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__);</source>
          <target state="translated">void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;（T）（lazy bool condition、lazy T args、int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__）;</target>
        </trans-unit>
        <trans-unit id="7dc7ea37bea05728357f6fd2fc2484c0a118fdf4" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;(T, string moduleName = __MODULE__)(const LogLevel ll, lazy T arg, int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__);</source>
          <target state="translated">void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;（T、string moduleName = __MODULE __）（const LogLevel ll、lazy T arg、int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__）;</target>
        </trans-unit>
        <trans-unit id="f9e3728f3c44eba35243a202cf3afb3b5f5fbb56" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;(T, string moduleName = __MODULE__)(const LogLevel ll, lazy bool condition, lazy T arg, int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__);</source>
          <target state="translated">void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;（T、string moduleName = __MODULE __）（const LogLevel ll、lazy bool condition、lazy T arg、int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__）;</target>
        </trans-unit>
        <trans-unit id="332dbda4dc1ee4fc075e4f31d03c46bbbbb55a4f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;(T, string moduleName = __MODULE__)(const LogLevel ll, lazy bool condition, lazy T args, int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__);</source>
          <target state="translated">void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;（T、string moduleName = __MODULE __）（const LogLevel ll、lazy bool condition、lazy T args、int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__）;</target>
        </trans-unit>
        <trans-unit id="dd309c3097c8fcaf7c426a28087ff054edd44404" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;(T, string moduleName = __MODULE__)(lazy bool condition, lazy T arg, int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__);</source>
          <target state="translated">void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;（T、string moduleName = __MODULE __）（lazy bool condition、lazy T arg、int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__）;</target>
        </trans-unit>
        <trans-unit id="8d6c4f6be00e6e76018db948c2e973bbf1cd1d67" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(const LogLevel ll, lazy A args)</source>
          <target state="translated">void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（const LogLevel ll、lazy A args）</target>
        </trans-unit>
        <trans-unit id="8b7ce2f1c769ac880f4e23263d1aa1bcd78a2ed7" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(const LogLevel ll, lazy bool condition, lazy A args)</source>
          <target state="translated">void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（const LogLevel ll、lazy bool条件、lazy A args）</target>
        </trans-unit>
        <trans-unit id="9f026970eee5165a6d1fd4fe5d7a4d2910898e09" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy A args)</source>
          <target state="translated">void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（lazy A args）</target>
        </trans-unit>
        <trans-unit id="0b00e70c830a48a7b68c404c2933bcc61f8b8bb8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy bool condition, lazy A args)</source>
          <target state="translated">void &lt;strong id=&quot;log&quot;&gt;log&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（lazy bool条件、lazy A args）</target>
        </trans-unit>
        <trans-unit id="658b6043e3301dd87ccafcb8d40ec47d9de98247" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;logImpl&quot;&gt;logImpl&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy A args)</source>
          <target state="translated">void &lt;strong id=&quot;logImpl&quot;&gt;logImpl&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（lazy A args）</target>
        </trans-unit>
        <trans-unit id="d54a526efb51727ff21bf96a1c436d2b68bc73a0" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;logImpl&quot;&gt;logImpl&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy bool condition, lazy A args);</source>
          <target state="translated">void &lt;strong id=&quot;logImpl&quot;&gt;logImpl&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（lazy bool condition、lazy A args）;</target>
        </trans-unit>
        <trans-unit id="db9c094e60b1c7fb07ea34b295d2c325480fa455" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;logImplf&quot;&gt;logImplf&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy bool condition, lazy string msg, lazy A args);</source>
          <target state="translated">void &lt;strong id=&quot;logImplf&quot;&gt;logImplf&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（lazy bool condition、lazy string msg、lazy A args）;</target>
        </trans-unit>
        <trans-unit id="525cdfb8d04fa93d6b67cc896e17f28ebdeb395e" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;logImplf&quot;&gt;logImplf&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy string msg, lazy A args);</source>
          <target state="translated">void &lt;strong id=&quot;logImplf&quot;&gt;logImplf&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（lazy string msg、lazy A args）;</target>
        </trans-unit>
        <trans-unit id="13f64a98b7bac16469f3ea9a566a9bb5fc1a87db" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;logf&quot;&gt;logf&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(const LogLevel ll, lazy bool condition, lazy string msg, lazy A args);</source>
          <target state="translated">void &lt;strong id=&quot;logf&quot;&gt;logf&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（const LogLevel ll、lazy bool condition、lazy string msg、lazy A args） ;</target>
        </trans-unit>
        <trans-unit id="befc8f7c47fb29ec6e2815ca95113392e66dddc2" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;logf&quot;&gt;logf&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(const LogLevel ll, lazy string msg, lazy A args);</source>
          <target state="translated">void &lt;strong id=&quot;logf&quot;&gt;logf&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（const LogLevel ll、lazy string msg、lazy A args）;</target>
        </trans-unit>
        <trans-unit id="5d503f5c419ddae345403dff743b0d1fb3498135" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;logf&quot;&gt;logf&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy bool condition, lazy string msg, lazy A args);</source>
          <target state="translated">void &lt;strong id=&quot;logf&quot;&gt;logf&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（lazy bool condition、lazy string msg、lazy A args）;</target>
        </trans-unit>
        <trans-unit id="1028b49262b45371ffee539a70573c98ed602b4e" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;logf&quot;&gt;logf&lt;/strong&gt;(int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__, string moduleName = __MODULE__, A...)(lazy string msg, lazy A args);</source>
          <target state="translated">void &lt;strong id=&quot;logf&quot;&gt;logf&lt;/strong&gt;（int line = __LINE__、string file = __FILE__、string funcName = __FUNCTION__、string prettyFuncName = __PRETTY_FUNCTION__、string moduleName = __MODULE__、A ...）（lazy string msg、lazy A args）;</target>
        </trans-unit>
        <trans-unit id="3c07004c9257e9b3727976f64a7e7bf18c94604f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;mailTo&quot;&gt;mailTo&lt;/strong&gt;()(const(char)[][] recipients...);</source>
          <target state="translated">void &lt;strong id=&quot;mailTo&quot;&gt;mailTo&lt;/strong&gt;（）（const（char）[] []受信者...）;</target>
        </trans-unit>
        <trans-unit id="ae2f24545c5a670c3c45e571f7dfc0eec873ff8a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;makeIndex&quot;&gt;makeIndex&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range, RangeIndex)(Range r, RangeIndex index)</source>
          <target state="translated">void &lt;strong id=&quot;makeIndex&quot;&gt;makeIndex&lt;/strong&gt;（別名less = &quot;a &amp;lt;b&quot;、SwapStrategy ss = SwapStrategy.unstable、Range、RangeIndex）（Range r、RangeIndex index）</target>
        </trans-unit>
        <trans-unit id="95add738c3861328e7a23098584495c2beed0ead" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;mangleToFuncSignature&quot;&gt;mangleToFuncSignature&lt;/strong&gt;(ref OutBuffer buf, FuncDeclaration fd);</source>
          <target state="translated">void &lt;strong id=&quot;mangleToFuncSignature&quot;&gt;mangleToFuncSignature&lt;/strong&gt;（ref OutBuffer buf、FuncDeclaration fd）;</target>
        </trans-unit>
        <trans-unit id="899a1c860b4bb0d2360274cd7425a91a4a72dd5b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;minimize&quot;&gt;minimize&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;minimize&quot;&gt;最小化&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="0ec740b5ed15bbb9300cf2ce82a88552c5499b8f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;mkdir&quot;&gt;mkdir&lt;/strong&gt;(R)(R pathname)</source>
          <target state="translated">void &lt;strong id=&quot;mkdir&quot;&gt;mkdir&lt;/strong&gt;（R）（Rパス名）</target>
        </trans-unit>
        <trans-unit id="86e48f78ed5775c565f5722cdc40eaa1f42c9be1" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;mkdir&quot;&gt;mkdir&lt;/strong&gt;(R)(auto ref R pathname)</source>
          <target state="translated">void &lt;strong id=&quot;mkdir&quot;&gt;mkdir&lt;/strong&gt;（R）（auto ref R pathname）</target>
        </trans-unit>
        <trans-unit id="6dda99189be4539fad00a6e5365b2c07adc6ed27" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;modifiersApply&quot;&gt;modifiersApply&lt;/strong&gt;(const TypeFunction tf, void delegate(string) dg);</source>
          <target state="translated">void &lt;strong id=&quot;modifiersApply&quot;&gt;modifiersApply&lt;/strong&gt;（const TypeFunction tf、void delegate（string）dg）;</target>
        </trans-unit>
        <trans-unit id="b7a5619101d93f6060efa7aa9d73219127aa37bf" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;modifyReturns&quot;&gt;modifyReturns&lt;/strong&gt;(Scope* sc, Type tret);</source>
          <target state="translated">void &lt;strong id=&quot;modifyReturns&quot;&gt;modifyReturns&lt;/strong&gt;（Scope * sc、Type tret）;</target>
        </trans-unit>
        <trans-unit id="23f39830af61fabad3a74e520312db9ee55fc8c6" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;moduleToBuffer&quot;&gt;moduleToBuffer&lt;/strong&gt;(OutBuffer* buf, Module m);</source>
          <target state="translated">void &lt;strong id=&quot;moduleToBuffer&quot;&gt;moduleToBuffer&lt;/strong&gt;（OutBuffer * buf、Module m）;</target>
        </trans-unit>
        <trans-unit id="77846a58e27068e4314da7155a9f4f8325b53bf0" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;move&quot;&gt;move&lt;/strong&gt;(T)(ref T source, ref T target);</source>
          <target state="translated">void &lt;strong id=&quot;move&quot;&gt;move&lt;/strong&gt;（T）（ref Tソース、ref Tターゲ​​ット）;</target>
        </trans-unit>
        <trans-unit id="d2f6f4bfba23829993d3c3de0947ef8c11adff0a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;notMaybeScope&quot;&gt;notMaybeScope&lt;/strong&gt;(VarDeclaration v);</source>
          <target state="translated">void &lt;strong id=&quot;notMaybeScope&quot;&gt;notMaybeScope&lt;/strong&gt;（VarDeclaration v）;</target>
        </trans-unit>
        <trans-unit id="7409536015357f0092769e146b86243680633ca9" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;notify&quot;&gt;notify&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;notify&quot;&gt;通知&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="a2fcd985c8f16e9135bdd61a53e7fce73211ba17" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;notify&quot;&gt;notify&lt;/strong&gt;(this Q)(bool _unused_)</source>
          <target state="translated">void &lt;strong id=&quot;notify&quot;&gt;notify&lt;/strong&gt;(this Q)(bool _unused_)</target>
        </trans-unit>
        <trans-unit id="399192a66a87052c9f8df5f94c05bcfedd36e11b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;notifyAll&quot;&gt;notifyAll&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;notifyAll&quot;&gt;notifyAll&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="cb2d3578967b6f8beda70636d637efcdd40324d5" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;notifyAll&quot;&gt;notifyAll&lt;/strong&gt;(this Q)(bool _unused_)</source>
          <target state="translated">void &lt;strong id=&quot;notifyAll&quot;&gt;notifyAll&lt;/strong&gt;(this Q)(bool _unused_)</target>
        </trans-unit>
        <trans-unit id="0f35a68463606b8e0b0f9daccc75bfd6018e8f98" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;nullify&quot;&gt;nullify&lt;/strong&gt;()();</source>
          <target state="translated">void &lt;strong id=&quot;nullify&quot;&gt;nullify&lt;/strong&gt;（）（）;</target>
        </trans-unit>
        <trans-unit id="49457146687df446d5015544dc2819d92c47b648" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;()(T value)</source>
          <target state="translated">void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;（）（T value）</target>
        </trans-unit>
        <trans-unit id="4786064775a1e0fd96e19ff7f12143edd399df1b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;()(T value);</source>
          <target state="translated">void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;（）（T value）;</target>
        </trans-unit>
        <trans-unit id="0526b002bbbf1261a793a692cd247f413a2bf266" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;(T rhs);</source>
          <target state="translated">void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;（T rhs）;</target>
        </trans-unit>
        <trans-unit id="1a491ca17e32eb84f77cd75669f9c57b9b63c429" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;(U)(U rhs)</source>
          <target state="translated">void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;（U）（U rhs）</target>
        </trans-unit>
        <trans-unit id="47eb6c56f0538bec76dc7fa94f0c2ad3a54fcb40" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;(U)(Unique!U u)</source>
          <target state="translated">void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;（U）（Unique！U u）</target>
        </trans-unit>
        <trans-unit id="1e35453ade469142af1b1637d897821c4efc3c1a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;(typeof(null) rhs);</source>
          <target state="translated">void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;（typeof（null）rhs）;</target>
        </trans-unit>
        <trans-unit id="e214019253f2986d6b60dbcd1e6ef35d11b2aec5" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;(typeof(this) rhs);</source>
          <target state="translated">void &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;（typeof（this）rhs）;</target>
        </trans-unit>
        <trans-unit id="6333f37b1af1762cc0e85ddd0971b2caae7da270" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opDispatch&quot;&gt;opDispatch&lt;/strong&gt;(string fn, Args...)(Args args)</source>
          <target state="translated">void &lt;strong id=&quot;opDispatch&quot;&gt;opDispatch&lt;/strong&gt;（string fn、&lt;strong id=&quot;opDispatch&quot;&gt;Args&lt;/strong&gt; ...）（&lt;strong id=&quot;opDispatch&quot;&gt;Args&lt;/strong&gt; args）</target>
        </trans-unit>
        <trans-unit id="812abb06513958d05523a3bd6f54fa72f8b8abb1" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;(E val, size_t index);</source>
          <target state="translated">void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;（E val、size_t index）;</target>
        </trans-unit>
        <trans-unit id="632252f70dc4b21bd6c246d1a352a80160a06804" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;(E val, size_t n);</source>
          <target state="translated">void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;（E val、size_t n）;</target>
        </trans-unit>
        <trans-unit id="fd6297e267ea4cfb41dedc309176ec78f5a3b905" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;(ElementType v, size_t n);</source>
          <target state="translated">void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;（ElementType v、size_t n）;</target>
        </trans-unit>
        <trans-unit id="8fba32483d7303c0888a09b5d7fd667673a94d68" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;(ElementType val, size_t n);</source>
          <target state="translated">void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;（ElementType val、size_t n）;</target>
        </trans-unit>
        <trans-unit id="81a435ef2af84721ebae1d2597fbd17729c763f0" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;(ElementType!R val, size_t n);</source>
          <target state="translated">void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;（ElementType！R val、size_t n）;</target>
        </trans-unit>
        <trans-unit id="00bbcadb42df407ed39133a95aae09e9933e3d66" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;(T value, size_t i);</source>
          <target state="translated">void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;（T value、size_t i）;</target>
        </trans-unit>
        <trans-unit id="6a29db296d27299971b50493ae64e52a1c0d72e8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;(T)(auto ref T value, string key);</source>
          <target state="translated">void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;(T)(auto ref T value, string key);</target>
        </trans-unit>
        <trans-unit id="7706a09492b72569a0b853d07cf21b6ea932434c" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;(bool value, size_t i);</source>
          <target state="translated">void &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;（bool value、size_t i）;</target>
        </trans-unit>
        <trans-unit id="88808ee721e71c5a817a250e76fa2612af9b5543" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opIndexOpAssign&quot;&gt;opIndexOpAssign&lt;/strong&gt;(string op)(bool value, size_t i);</source>
          <target state="translated">void &lt;strong id=&quot;opIndexOpAssign&quot;&gt;opIndexOpAssign&lt;/strong&gt;（string op）（bool value、size_t i）;</target>
        </trans-unit>
        <trans-unit id="bf127fd1990c27934f3c8a469e1a165c1a12ac83" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opOpAssign&quot;&gt;opOpAssign&lt;/strong&gt;(string op : &quot;~&quot;, U)(U rhs)</source>
          <target state="translated">void &lt;strong id=&quot;opOpAssign&quot;&gt;opOpAssign&lt;/strong&gt;（string op： &quot;〜&quot;、U）（U rhs）</target>
        </trans-unit>
        <trans-unit id="f47c855ba3b34376a12c9a3cb2dc81fea52e133d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opOpAssign&quot;&gt;opOpAssign&lt;/strong&gt;(string op, Stuff)(auto ref Stuff stuff)</source>
          <target state="translated">void &lt;strong id=&quot;opOpAssign&quot;&gt;opOpAssign&lt;/strong&gt;（string op、Stuff）（auto ref Stuff stuff）</target>
        </trans-unit>
        <trans-unit id="1ab0a16090086879f9f78c8be81dc5f3faf296ff" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opSliceAssign&quot;&gt;opSliceAssign&lt;/strong&gt;(T value);</source>
          <target state="translated">void &lt;strong id=&quot;opSliceAssign&quot;&gt;opSliceAssign&lt;/strong&gt;（T値）;</target>
        </trans-unit>
        <trans-unit id="12a65334b4a3e38eddbed62b6c51e667b9cc7219" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opSliceAssign&quot;&gt;opSliceAssign&lt;/strong&gt;(T value, size_t i, size_t j);</source>
          <target state="translated">void &lt;strong id=&quot;opSliceAssign&quot;&gt;opSliceAssign&lt;/strong&gt;（T value、size_t i、size_t j）;</target>
        </trans-unit>
        <trans-unit id="596321003faa6b599f47bc80ec030f95e6fdd7e7" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opSliceAssign&quot;&gt;opSliceAssign&lt;/strong&gt;(bool val);</source>
          <target state="translated">void &lt;strong id=&quot;opSliceAssign&quot;&gt;opSliceAssign&lt;/strong&gt;（bool val）;</target>
        </trans-unit>
        <trans-unit id="e4b3a0563ee7a9336229eff2f411e9c6280d137a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opSliceAssign&quot;&gt;opSliceAssign&lt;/strong&gt;(bool val, size_t start, size_t end);</source>
          <target state="translated">void &lt;strong id=&quot;opSliceAssign&quot;&gt;opSliceAssign&lt;/strong&gt;（bool val、size_t start、size_t end）;</target>
        </trans-unit>
        <trans-unit id="d8730b38b69b668c59212b86841c49489c9d7b31" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opSliceOpAssign&quot;&gt;opSliceOpAssign&lt;/strong&gt;(string op)(T value);</source>
          <target state="translated">void &lt;strong id=&quot;opSliceOpAssign&quot;&gt;opSliceOpAssign&lt;/strong&gt;（string op）（T value）;</target>
        </trans-unit>
        <trans-unit id="1dd905bdbddf93075c20281982f605994f0807a2" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opSliceOpAssign&quot;&gt;opSliceOpAssign&lt;/strong&gt;(string op)(T value, size_t i, size_t j);</source>
          <target state="translated">void &lt;strong id=&quot;opSliceOpAssign&quot;&gt;opSliceOpAssign&lt;/strong&gt;（string op）（T value、size_t i、size_t j）;</target>
        </trans-unit>
        <trans-unit id="6c56fbf745dd292e6c3dcbd8a14eecac4cb579ce" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opSliceUnary&quot;&gt;opSliceUnary&lt;/strong&gt;(string op)()</source>
          <target state="translated">void &lt;strong id=&quot;opSliceUnary&quot;&gt;opSliceUnary&lt;/strong&gt;（string op）（）</target>
        </trans-unit>
        <trans-unit id="20dcdfb15276b2fe33668a1e360c7842c4f90de8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;opSliceUnary&quot;&gt;opSliceUnary&lt;/strong&gt;(string op)(size_t i, size_t j)</source>
          <target state="translated">void &lt;strong id=&quot;opSliceUnary&quot;&gt;opSliceUnary&lt;/strong&gt;（string op）（size_t i、size_t j）</target>
        </trans-unit>
        <trans-unit id="b09a1f45a97511eb53b0e534e45f2a24f64a78e6" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;parse&quot;&gt;parse&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;parse&quot;&gt;parse&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="bd78ba89c55795d0072d9eca426eaf74f764c783" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;parseConfFile&quot;&gt;parseConfFile&lt;/strong&gt;(ref StringTable environment, const(char)[] filename, const(char)[] path, const(ubyte)[] buffer, const(Strings)* sections);</source>
          <target state="translated">void &lt;strong id=&quot;parseConfFile&quot;&gt;parseConfFile&lt;/strong&gt;（ref StringTable環境、const（char）[] filename、const（char）[] path、const（ubyte）[] buffer、const（Strings）*セクション）;</target>
        </trans-unit>
        <trans-unit id="627d209bcffbe9c21193542c583beb56a44982e9" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;parseSections&quot;&gt;parseSections&lt;/strong&gt;(const(char)* comment);</source>
          <target state="translated">void &lt;strong id=&quot;parseSections&quot;&gt;parseSections&lt;/strong&gt;（const（char）*コメント）;</target>
        </trans-unit>
        <trans-unit id="b2af155eca4695d10ffc473419cafb2ca3785b15" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;partialSort&quot;&gt;partialSort&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range)(Range r, size_t n)</source>
          <target state="translated">void &lt;strong id=&quot;partialSort&quot;&gt;partialSort&lt;/strong&gt;（エイリアスless = &quot;a &amp;lt;b&quot;、SwapStrategy ss = SwapStrategy.unstable、Range）（Range r、size_t n）</target>
        </trans-unit>
        <trans-unit id="659dcd34ebaedf2036cc6b5a6327e0f5804f7f95" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;partialSort&quot;&gt;partialSort&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range1, Range2)(Range1 r1, Range2 r2)</source>
          <target state="translated">void &lt;strong id=&quot;partialSort&quot;&gt;partialSort&lt;/strong&gt;（別名less = &quot;a &amp;lt;b&quot;、SwapStrategy ss = SwapStrategy.unstable、Range1、Range2）（Range1 r1、Range2 r2）</target>
        </trans-unit>
        <trans-unit id="8dff98cbec7d9d3af2e6f23e96d8869b2af163ae" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;pause&quot;&gt;pause&lt;/strong&gt;(bool sendingPaused, bool receivingPaused);</source>
          <target state="translated">void &lt;strong id=&quot;pause&quot;&gt;pause&lt;/strong&gt;（boolendingPaused、boolreceiveingPaused）;</target>
        </trans-unit>
        <trans-unit id="2d54180b2ff5b53e7433b76a84535e3d2f874706" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;popBack&quot;&gt;popBack&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;popBack&quot;&gt;popBack&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="ee606b2870841c46300cd46a44d6b54a2dd6eec1" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;popBackExactly&quot;&gt;popBackExactly&lt;/strong&gt;(Range)(ref Range r, size_t n)</source>
          <target state="translated">void &lt;strong id=&quot;popBackExactly&quot;&gt;popBackExactly&lt;/strong&gt;（Range）（ref Range r、size_t n）</target>
        </trans-unit>
        <trans-unit id="4b2f4d7fcf7062666a416c2eb7c3bda73a001390" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;popFirstOf&quot;&gt;popFirstOf&lt;/strong&gt;(ref Range r);</source>
          <target state="translated">void &lt;strong id=&quot;popFirstOf&quot;&gt;popFirstOf&lt;/strong&gt;（ref Range r）;</target>
        </trans-unit>
        <trans-unit id="ced4ee0c996aed63187986ed597f34ea68da6990" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;popFront&quot;&gt;popFront&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;popFront&quot;&gt;popFront&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="4d493b1ae6c3cdeb0b518691bfa4b73dee648d04" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;popFrontExactly&quot;&gt;popFrontExactly&lt;/strong&gt;(Range)(ref Range r, size_t n)</source>
          <target state="translated">void &lt;strong id=&quot;popFrontExactly&quot;&gt;popFrontExactly&lt;/strong&gt;（Range）（ref Range r、size_t n）</target>
        </trans-unit>
        <trans-unit id="1e0972cf30a0db16b5ab87b42bdd764d852a82af" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;popLastOf&quot;&gt;popLastOf&lt;/strong&gt;(ref Range r);</source>
          <target state="translated">void &lt;strong id=&quot;popLastOf&quot;&gt;popLastOf&lt;/strong&gt;（参照範囲r）;</target>
        </trans-unit>
        <trans-unit id="1acb4d7cf968bfc2791abe3316a43124703e30fe" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;pop_back&quot;&gt;pop_back&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;pop_back&quot;&gt;pop_back&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="1764ccc637f61f8997e0fda2c4e8de7c05497c3a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;prefetch&quot;&gt;prefetch&lt;/strong&gt;(bool writeFetch, ubyte locality)(const(void)* address);</source>
          <target state="translated">void &lt;strong id=&quot;prefetch&quot;&gt;prefetch&lt;/strong&gt;（bool writeFetch、ubyte locality）（const（void）* address）;</target>
        </trans-unit>
        <trans-unit id="a035b089dc5e8203e85a9e8d0e829e7bb478fd73" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;prepare&quot;&gt;prepare&lt;/strong&gt;(Scope* sc);</source>
          <target state="translated">void &lt;strong id=&quot;prepare&quot;&gt;prepare&lt;/strong&gt;（Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="7473cb63e043fdfdc27d39abeabfc7fc76d19756" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;printAST&quot;&gt;printAST&lt;/strong&gt;(Expression e, int indent = 0);</source>
          <target state="translated">void &lt;strong id=&quot;printAST&quot;&gt;printAST&lt;/strong&gt;（式e、int indent = 0）;</target>
        </trans-unit>
        <trans-unit id="d309564eb4d8498d6b03c00a70e77126b78548e8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;printInternalFailure&quot;&gt;printInternalFailure&lt;/strong&gt;(FILE* stream);</source>
          <target state="translated">void &lt;strong id=&quot;printInternalFailure&quot;&gt;printInternalFailure&lt;/strong&gt;（FILE * stream）;</target>
        </trans-unit>
        <trans-unit id="477ee4beeb2cd07e29305b63acb245f95cd47740" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;prioritySend&quot;&gt;prioritySend&lt;/strong&gt;(T...)(Tid tid, T vals);</source>
          <target state="translated">void &lt;strong id=&quot;prioritySend&quot;&gt;prioritySend&lt;/strong&gt;（T ...）（Tid tid、T vals）;</target>
        </trans-unit>
        <trans-unit id="712c1e76e017d926b56a6920fed285d3c7517cc5" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;profilegc_setlogfilename&quot;&gt;profilegc_setlogfilename&lt;/strong&gt;(string name);</source>
          <target state="translated">void &lt;strong id=&quot;profilegc_setlogfilename&quot;&gt;profilegc_setlogfilename&lt;/strong&gt;（文字列名）;</target>
        </trans-unit>
        <trans-unit id="224fd72cb98b35b82d97e65f19705b79dd484e19" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;purityLevel&quot;&gt;purityLevel&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;purityLevel&quot;&gt;PurityLevel&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="43d58d3b0f3a8f8f17945bddb4585eff524f67ff" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;push&quot;&gt;push&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;push&quot;&gt;push&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="71d57348cf5a3e083b3b830ccaafb0823103d639" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;(E);</source>
          <target state="translated">void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;（E）;</target>
        </trans-unit>
        <trans-unit id="62f7385dd2721d5d910e3909d2730677e0dce101" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;(R, E)(ref R r, E e);</source>
          <target state="translated">void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;（R、E）（ref R r、E e）;</target>
        </trans-unit>
        <trans-unit id="e897f4dfdb7d94568437695404e30cc525f0ab99" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;(Range)(Range items)</source>
          <target state="translated">void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;（Range）（Range items）</target>
        </trans-unit>
        <trans-unit id="185186c7fcf98f32fde9b522ce226b767f97b37f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;(U)(U item)</source>
          <target state="translated">void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;（U）（Uアイテム）</target>
        </trans-unit>
        <trans-unit id="7279292270ffe4c70a504f164d0bbefefbe1dfe4" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;(alias fun, Args...)(Task!(fun, Args)* task)</source>
          <target state="translated">void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;（エイリアスfun、Args ...）（Task！（fun、Args）* task）</target>
        </trans-unit>
        <trans-unit id="6e6044f647e34f8e4fcb33e57f0c26ccbcacd4dd" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;(alias fun, Args...)(ref Task!(fun, Args) task)</source>
          <target state="translated">void &lt;strong id=&quot;put&quot;&gt;put&lt;/strong&gt;（エイリアスfun、Args ...）（ref Task！（fun、Args）task）</target>
        </trans-unit>
        <trans-unit id="c73651adfcc6c83cee96a90cbe5fb411625b0800" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rawWrite&quot;&gt;rawWrite&lt;/strong&gt;(T)(in T[] buffer);</source>
          <target state="translated">void &lt;strong id=&quot;rawWrite&quot;&gt;rawWrite&lt;/strong&gt;（T）（in T [] buffer）;</target>
        </trans-unit>
        <trans-unit id="6191916a82a6ecbaad7e78c1a7bba4b84cbf1334" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;receive&quot;&gt;receive&lt;/strong&gt;(T...)(T ops);</source>
          <target state="translated">void &lt;strong id=&quot;receive&quot;&gt;receive&lt;/strong&gt;（T ...）（T ops）;</target>
        </trans-unit>
        <trans-unit id="8a13963991dc763c624cf193e93a7de1fd95cda5" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;register&quot;&gt;register&lt;/strong&gt;(Klass : EncodingScheme)();</source>
          <target state="translated">void &lt;strong id=&quot;register&quot;&gt;register&lt;/strong&gt;（Klass：EncodingScheme）（）;</target>
        </trans-unit>
        <trans-unit id="722abc164cc5a2a2780f54ac4a3fd07757fddd6e" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(R)(R name)</source>
          <target state="translated">void &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;（R）（R name）</target>
        </trans-unit>
        <trans-unit id="861acb35edbc4556fc216843ee53901199c9bf08" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(R)(auto ref R name)</source>
          <target state="translated">void &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;（R）（auto ref R name）</target>
        </trans-unit>
        <trans-unit id="3a440c6be5c424ebb39e6b5dd284ede37348d209" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;removeBack&quot;&gt;removeBack&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;removeBack&quot;&gt;removeBack&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="707325b4c2c58855657e7fa4c04b51c9a270e82d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;removeFront&quot;&gt;removeFront&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;removeFront&quot;&gt;removeFront&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="9f311b09338aed4a18e218bb7d58d78b48e9561b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;removeInstance&quot;&gt;removeInstance&lt;/strong&gt;(TemplateInstance ti);</source>
          <target state="translated">void &lt;strong id=&quot;removeInstance&quot;&gt;removeInstance&lt;/strong&gt;（TemplateInstance ti）;</target>
        </trans-unit>
        <trans-unit id="85a4bae4bc08ca13583106973891a9a857c58715" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rename&quot;&gt;rename&lt;/strong&gt;(RF, RT)(RF from, RT to)</source>
          <target state="translated">void &lt;strong id=&quot;rename&quot;&gt;rename&lt;/strong&gt;（RF、RT）（RF from、RT to）</target>
        </trans-unit>
        <trans-unit id="92704e77f877a37e6caa31c8949faff6f35912b9" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rename&quot;&gt;rename&lt;/strong&gt;(RF, RT)(auto ref RF from, auto ref RT to)</source>
          <target state="translated">void &lt;strong id=&quot;rename&quot;&gt;rename&lt;/strong&gt;（RF、RT）（auto ref RF from、auto ref RT to）</target>
        </trans-unit>
        <trans-unit id="16864b6e52478e058bcc0231dc9e07b39f9fe3f8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;replaceFront&quot;&gt;replaceFront&lt;/strong&gt;(ElementType!Store value);</source>
          <target state="translated">void &lt;strong id=&quot;replaceFront&quot;&gt;replaceFront&lt;/strong&gt;（ElementType！Store value）;</target>
        </trans-unit>
        <trans-unit id="f36bf5c4824e624ce22187959a910a9cb54762ca" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;replaceInPlace&quot;&gt;replaceInPlace&lt;/strong&gt;(T, Range)(ref T[] array, size_t from, size_t to, Range stuff)</source>
          <target state="translated">void &lt;strong id=&quot;replaceInPlace&quot;&gt;replaceInPlace&lt;/strong&gt;（T、Range）（ref T [] array、size_t from、size_t to、Range stuff）</target>
        </trans-unit>
        <trans-unit id="d0c39e2d6ba9c2ba0a5b9eae9751cc9c8f61856c" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;replaceInto&quot;&gt;replaceInto&lt;/strong&gt;(E, Sink, R1, R2)(Sink sink, E[] subject, R1 from, R2 to)</source>
          <target state="translated">void &lt;strong id=&quot;replaceInto&quot;&gt;replaceInto&lt;/strong&gt;（E、Sink、R1、R2）（Sink sink、E [] subject、R1 from、R2 to）</target>
        </trans-unit>
        <trans-unit id="4782e450fff3a125252b2e68740df4055319b400" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;reportPerCallStatistics&quot;&gt;reportPerCallStatistics&lt;/strong&gt;(R)(auto ref R output);</source>
          <target state="translated">void &lt;strong id=&quot;reportPerCallStatistics&quot;&gt;reportPerCallStatistics&lt;/strong&gt;（R）（auto ref R output）;</target>
        </trans-unit>
        <trans-unit id="13b09bd2e71c8468e971e069c9d4f1ed7244d7b1" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;reportStatistics&quot;&gt;reportStatistics&lt;/strong&gt;(R)(auto ref R output);</source>
          <target state="translated">void &lt;strong id=&quot;reportStatistics&quot;&gt;reportStatistics&lt;/strong&gt;（R）（auto ref R output）;</target>
        </trans-unit>
        <trans-unit id="0381e226914a85df658171e9ebc906de9ca9078a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;reserve&quot;&gt;reserve&lt;/strong&gt;(size_t e);</source>
          <target state="translated">void &lt;strong id=&quot;reserve&quot;&gt;reserve&lt;/strong&gt;（size_t e）;</target>
        </trans-unit>
        <trans-unit id="002e173e58d9a6c26967ed58331bd481273a4aca" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;reserve&quot;&gt;reserve&lt;/strong&gt;(size_t elements);</source>
          <target state="translated">void &lt;strong id=&quot;reserve&quot;&gt;予約&lt;/strong&gt;（size_t要素）;</target>
        </trans-unit>
        <trans-unit id="422b1f9874cab568ba53757d0a114b5fcfd620ad" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;reserve&quot;&gt;reserve&lt;/strong&gt;(size_t newCapacity);</source>
          <target state="translated">void &lt;strong id=&quot;reserve&quot;&gt;reserve&lt;/strong&gt;（size_t newCapacity）;</target>
        </trans-unit>
        <trans-unit id="742df0e71166614b7db9166c3777addf418e76db" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;reserve&quot;&gt;reserve&lt;/strong&gt;(size_type _Newcap = 0);</source>
          <target state="translated">ボイド&lt;strong id=&quot;reserve&quot;&gt;リザーブ&lt;/strong&gt;（size_type _Newcap = 0）;</target>
        </trans-unit>
        <trans-unit id="772397c8e032906c4ca453f12e81510304c22431" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;resolve&quot;&gt;resolve&lt;/strong&gt;(Type mt, ref const Loc loc, Scope* sc, Expression* pe, Type* pt, Dsymbol* ps, bool intypeid = false);</source>
          <target state="translated">void &lt;strong id=&quot;resolve&quot;&gt;resolve&lt;/strong&gt;（Type mt、ref const Loc loc、Scope * sc、Expression * pe、Type * pt、Dsymbol * ps、bool intypeid = false）;</target>
        </trans-unit>
        <trans-unit id="2716e02d0f645335df90fb2cbb47a2acb3765e26" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;restoreEnvVars&quot;&gt;restoreEnvVars&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;restoreEnvVars&quot;&gt;restoreEnvVars&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="45ab12c5b77a321fa323bf494719a120a91fa201" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;reverse&quot;&gt;reverse&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;reverse&quot;&gt;reverse&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="be638c6c1da8cd0db20a359c5dd0a3f7a07bb7b4" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rmdir&quot;&gt;rmdir&lt;/strong&gt;(R)(R pathname)</source>
          <target state="translated">void &lt;strong id=&quot;rmdir&quot;&gt;rmdir&lt;/strong&gt;（R）（Rパス名）</target>
        </trans-unit>
        <trans-unit id="c0cc33d895c51673fe1ee040233dcd7a2c0d8730" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rmdir&quot;&gt;rmdir&lt;/strong&gt;(R)(auto ref R pathname)</source>
          <target state="translated">void &lt;strong id=&quot;rmdir&quot;&gt;rmdir&lt;/strong&gt;（R）（auto ref R pathname）</target>
        </trans-unit>
        <trans-unit id="238bf9ad4e34a93bfda255d720cb2eacf4309be2" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rmdirRecurse&quot;&gt;rmdirRecurse&lt;/strong&gt;(DirEntry de);</source>
          <target state="translated">void &lt;strong id=&quot;rmdirRecurse&quot;&gt;rmdirRecurse&lt;/strong&gt;（DirEntry de）;</target>
        </trans-unit>
        <trans-unit id="7b71102f5dacffc2804ca038ec988c660dc55423" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rmdirRecurse&quot;&gt;rmdirRecurse&lt;/strong&gt;(ref DirEntry de);</source>
          <target state="translated">void &lt;strong id=&quot;rmdirRecurse&quot;&gt;rmdirRecurse&lt;/strong&gt;（参照DirEntry de）;</target>
        </trans-unit>
        <trans-unit id="f83822c1af82f65237925c3c4fc0dd90c5f0599b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rmdirRecurse&quot;&gt;rmdirRecurse&lt;/strong&gt;(scope const(char)[] pathname);</source>
          <target state="translated">void &lt;strong id=&quot;rmdirRecurse&quot;&gt;rmdirRecurse&lt;/strong&gt;（スコープconst（char）[]パス名）;</target>
        </trans-unit>
        <trans-unit id="b57fe8bfcd6789e4e719bf668396add1e16d8fd8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rt_moduleCtor&quot;&gt;rt_moduleCtor&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;rt_moduleCtor&quot;&gt;rt_moduleCtor&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="e475076d3e6c6f686c36482472539a95dd36e926" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rt_moduleDtor&quot;&gt;rt_moduleDtor&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;rt_moduleDtor&quot;&gt;rt_moduleDtor&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="eb95d2310c8f3688f1aceec8923d71b35bc5f103" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rt_moduleTlsCtor&quot;&gt;rt_moduleTlsCtor&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;rt_moduleTlsCtor&quot;&gt;rt_moduleTlsCtor&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="7ddfe818c11157f06606b1aabe2a131ec827a699" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rt_moduleTlsDtor&quot;&gt;rt_moduleTlsDtor&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;rt_moduleTlsDtor&quot;&gt;rt_moduleTlsDtor&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="798eabe928bb6605f70819a0be8d3cfdc5080a71" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rt_setCollectHandler&quot;&gt;rt_setCollectHandler&lt;/strong&gt;(CollectHandler h);</source>
          <target state="translated">void &lt;strong id=&quot;rt_setCollectHandler&quot;&gt;rt_setCollectHandler&lt;/strong&gt;（CollectHandler h）;</target>
        </trans-unit>
        <trans-unit id="7fea34aa16e0479694067bf44876ffdde1d8b326" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;rt_setTraceHandler&quot;&gt;rt_setTraceHandler&lt;/strong&gt;(TraceHandler h);</source>
          <target state="translated">void &lt;strong id=&quot;rt_setTraceHandler&quot;&gt;rt_setTraceHandler&lt;/strong&gt;（TraceHandler h）;</target>
        </trans-unit>
        <trans-unit id="9decce263d5a7843681c1620f0439508571a9070" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;runModuleFuncs&quot;&gt;runModuleFuncs&lt;/strong&gt;(alias getfp)(const(immutable(ModuleInfo)*)[] modules);</source>
          <target state="translated">void &lt;strong id=&quot;runModuleFuncs&quot;&gt;runModuleFuncs&lt;/strong&gt;（エイリアスgetfp）（const（immutable（ModuleInfo）*）[] modules）;</target>
        </trans-unit>
        <trans-unit id="841d6560e2685b9899be722e48f3e20a6d770dd9" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;scanElfObjModule&quot;&gt;scanElfObjModule&lt;/strong&gt;(void delegate(const(char)[] name, int pickAny) pAddSymbol, const(ubyte)[] base, const(char)* module_name, Loc loc);</source>
          <target state="translated">void &lt;strong id=&quot;scanElfObjModule&quot;&gt;scanElfObjModule&lt;/strong&gt;（void delegate（const（char）[] name、int pickAny）pAddSymbol、const（ubyte）[] base、const（char）* module_name、Loc loc）;</target>
        </trans-unit>
        <trans-unit id="c1617f4e4ddbb5c339555ee5847d26fea5f851ee" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;seed&quot;&gt;seed&lt;/strong&gt;(T)(T range)</source>
          <target state="translated">ボイド&lt;strong id=&quot;seed&quot;&gt;シード&lt;/strong&gt;（T）（T範囲）</target>
        </trans-unit>
        <trans-unit id="ba59582cdb53982dea6c32a7bfd41f13182e5226" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;semantic2&quot;&gt;semantic2&lt;/strong&gt;(Dsymbol dsym, Scope* sc);</source>
          <target state="translated">void &lt;strong id=&quot;semantic2&quot;&gt;semantic2&lt;/strong&gt;（Dsymbol dsym、Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="1b1f1d2360162f5934ac132b5c06fe0f922d97e9" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;semantic3&quot;&gt;semantic3&lt;/strong&gt;(Dsymbol dsym, Scope* sc);</source>
          <target state="translated">void &lt;strong id=&quot;semantic3&quot;&gt;semantic3&lt;/strong&gt;（Dsymbol dsym、Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="db0043712955a7c4ea174d5f7c21b0b60b79093a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;semanticTypeInfo&quot;&gt;semanticTypeInfo&lt;/strong&gt;(Scope* sc, Type t);</source>
          <target state="translated">void &lt;strong id=&quot;semanticTypeInfo&quot;&gt;semanticTypeInfo&lt;/strong&gt;（Scope * sc、Type t）;</target>
        </trans-unit>
        <trans-unit id="d99fb0c61453838fe71b257dd984c6d5f48ba9e4" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;send&quot;&gt;send&lt;/strong&gt;(T...)(Tid tid, T vals);</source>
          <target state="translated">void &lt;strong id=&quot;send&quot;&gt;send&lt;/strong&gt;（T ...）（Tid tid、T vals）;</target>
        </trans-unit>
        <trans-unit id="39e9b1e53d7fcab967624170778e60c4818ed74f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;set&quot;&gt;set&lt;/strong&gt;(CurlOption option, const(char)[] value);</source>
          <target state="translated">void &lt;strong id=&quot;set&quot;&gt;set&lt;/strong&gt;（CurlOptionオプション、const（char）[] value）;</target>
        </trans-unit>
        <trans-unit id="82bbfc23d67993312aab92f8c42379cc486e139a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;set&quot;&gt;set&lt;/strong&gt;(CurlOption option, long value);</source>
          <target state="translated">void &lt;strong id=&quot;set&quot;&gt;セット&lt;/strong&gt;（CurlOptionオプション、長い値）;</target>
        </trans-unit>
        <trans-unit id="e2392a3e693209f4e9cffb6ee7e4b0165125341f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;set&quot;&gt;set&lt;/strong&gt;(CurlOption option, void* value);</source>
          <target state="translated">void &lt;strong id=&quot;set&quot;&gt;セット&lt;/strong&gt;（CurlOptionオプション、void *値）;</target>
        </trans-unit>
        <trans-unit id="12d35a456ad28358c8a5f57a017a9be45c880e42" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setAttributes&quot;&gt;setAttributes&lt;/strong&gt;(R)(R name, uint attributes)</source>
          <target state="translated">void &lt;strong id=&quot;setAttributes&quot;&gt;setAttributes&lt;/strong&gt;（R）（R name、uint attributes）</target>
        </trans-unit>
        <trans-unit id="0b5b0ea457eee5ceb82dccaa63cea349732f57ce" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setAttributes&quot;&gt;setAttributes&lt;/strong&gt;(R)(auto ref R name, uint attributes)</source>
          <target state="translated">void &lt;strong id=&quot;setAttributes&quot;&gt;setAttributes&lt;/strong&gt;（R）（auto ref R name、uint attributes）</target>
        </trans-unit>
        <trans-unit id="96fb67934b93a8853393ea6f67341afd5b08b2b2" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setAuthentication&quot;&gt;setAuthentication&lt;/strong&gt;(const(char)[] username, const(char)[] password, const(char)[] domain = &quot;&quot;);</source>
          <target state="translated">void &lt;strong id=&quot;setAuthentication&quot;&gt;setAuthentication&lt;/strong&gt;（const（char）[] username、const（char）[] password、const（char）[] domain = &quot;&quot;）;</target>
        </trans-unit>
        <trans-unit id="0c8c988f1d9c5ab51e8529559bbb3f3d6f7845a8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setBounds&quot;&gt;setBounds&lt;/strong&gt;(size_t newMin, size_t newMax);</source>
          <target state="translated">void &lt;strong id=&quot;setBounds&quot;&gt;setBounds&lt;/strong&gt;（size_t newMin、size_t newMax）;</target>
        </trans-unit>
        <trans-unit id="63ea7f55996a9c9a0541827b135c7c7ca1dfe32c" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setClosureVarOffset&quot;&gt;setClosureVarOffset&lt;/strong&gt;(FuncDeclaration fd);</source>
          <target state="translated">void &lt;strong id=&quot;setClosureVarOffset&quot;&gt;setClosureVarOffset&lt;/strong&gt;（FuncDeclaration fd）;</target>
        </trans-unit>
        <trans-unit id="55281c016f15440f8637add90f5da7ed2dc25c51" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setCodeUnit&quot;&gt;setCodeUnit&lt;/strong&gt;(size_t i, dchar c);</source>
          <target state="translated">void &lt;strong id=&quot;setCodeUnit&quot;&gt;setCodeUnit&lt;/strong&gt;（size_t i、dchar c）;</target>
        </trans-unit>
        <trans-unit id="03d416a872202b2e268cbd91b82e7ddfac246bd1" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setCookie&quot;&gt;setCookie&lt;/strong&gt;(const(char)[] cookie);</source>
          <target state="translated">void &lt;strong id=&quot;setCookie&quot;&gt;setCookie&lt;/strong&gt;（const（char）[] cookie）;</target>
        </trans-unit>
        <trans-unit id="d449a60bb48d7d476ddecfd4d29160cb11de3695" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setCookieJar&quot;&gt;setCookieJar&lt;/strong&gt;(const(char)[] path);</source>
          <target state="translated">void &lt;strong id=&quot;setCookieJar&quot;&gt;setCookieJar&lt;/strong&gt;（const（char）[] path）;</target>
        </trans-unit>
        <trans-unit id="91bda042fb27293df7ee92aedab630de10cde8c6" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setMaxMailboxSize&quot;&gt;setMaxMailboxSize&lt;/strong&gt;(Tid tid, size_t messages, bool function(Tid) onCrowdingDoThis);</source>
          <target state="translated">void &lt;strong id=&quot;setMaxMailboxSize&quot;&gt;setMaxMailboxSize&lt;/strong&gt;（Tid tid、size_t messages、bool function（Tid）onCrowdingDoThis）;</target>
        </trans-unit>
        <trans-unit id="9140d82282e6219d53586ee0aca74b2172bc6731" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setPostData&quot;&gt;setPostData&lt;/strong&gt;(const(void)[] data, string contentType);</source>
          <target state="translated">void &lt;strong id=&quot;setPostData&quot;&gt;setPostData&lt;/strong&gt;（const（void）[] data、string contentType）;</target>
        </trans-unit>
        <trans-unit id="e5f6825b20ac50bf6a3464090d227c91586121eb" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setProxyAuthentication&quot;&gt;setProxyAuthentication&lt;/strong&gt;(const(char)[] username, const(char)[] password);</source>
          <target state="translated">void &lt;strong id=&quot;setProxyAuthentication&quot;&gt;setProxyAuthentication&lt;/strong&gt;（const（char）[] username、const（char）[] password）;</target>
        </trans-unit>
        <trans-unit id="a063619390be44d6c5b9ffb8cede22714e710db3" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setScope&quot;&gt;setScope&lt;/strong&gt;(Scope* sc);</source>
          <target state="translated">void &lt;strong id=&quot;setScope&quot;&gt;setScope&lt;/strong&gt;（Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="7cf4e697d34e444119def01b09921d32df50d8d7" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setTarget&quot;&gt;setTarget&lt;/strong&gt;(ref Param params);</source>
          <target state="translated">void &lt;strong id=&quot;setTarget&quot;&gt;setTarget&lt;/strong&gt;（ref Param params）;</target>
        </trans-unit>
        <trans-unit id="18f2bced8656ee975b3bdf6bb88768a2ab2c6f14" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setTimeCondition&quot;&gt;setTimeCondition&lt;/strong&gt;(HTTP.TimeCond cond, SysTime timestamp);</source>
          <target state="translated">void &lt;strong id=&quot;setTimeCondition&quot;&gt;setTimeCondition&lt;/strong&gt;（HTTP.TimeCond cond、SysTime timestamp）;</target>
        </trans-unit>
        <trans-unit id="cc366493844fcedcb0f4d128a68b0106dca6947d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setTimes&quot;&gt;setTimes&lt;/strong&gt;(R)(R name, SysTime accessTime, SysTime modificationTime)</source>
          <target state="translated">void &lt;strong id=&quot;setTimes&quot;&gt;setTimes&lt;/strong&gt;（R）（R name、SysTime accessTime、SysTime modifierTime）</target>
        </trans-unit>
        <trans-unit id="be0262c5882bb5fbd57c0e3e1094611de5afc43e" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setTimes&quot;&gt;setTimes&lt;/strong&gt;(R)(auto ref R name, SysTime accessTime, SysTime modificationTime)</source>
          <target state="translated">void &lt;strong id=&quot;setTimes&quot;&gt;setTimes&lt;/strong&gt;（R）（auto ref R name、SysTime accessTime、SysTime modifierTime）</target>
        </trans-unit>
        <trans-unit id="c6ded43739ddf62b209b752008139298ecbfff7a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;setUserAgent&quot;&gt;setUserAgent&lt;/strong&gt;(const(char)[] userAgent);</source>
          <target state="translated">void &lt;strong id=&quot;setUserAgent&quot;&gt;setUserAgent&lt;/strong&gt;（const（char）[] userAgent）;</target>
        </trans-unit>
        <trans-unit id="d753165b8b35d5f260072a7d3b856dbe920b53c7" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;shift&quot;&gt;shift&lt;/strong&gt;(T)(T years, T months = 0, AllowDayOverflow allowOverflow = AllowDayOverflow.yes)</source>
          <target state="translated">void &lt;strong id=&quot;shift&quot;&gt;shift&lt;/strong&gt;（T）（T年、Tヶ月= 0、AllowDayOverflow allowOverflow = AllowDayOverflow.yes）</target>
        </trans-unit>
        <trans-unit id="05a20f28facfd2df16e195d7a1169ad767775d1c" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;shrink_to_fit&quot;&gt;shrink_to_fit&lt;/strong&gt;();</source>
          <target state="translated">ボイド&lt;strong id=&quot;shrink_to_fit&quot;&gt;shrink_to_fit&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="4e5d9c3707ae681b6901192d1f6e79abd4627c47" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;shutdown&quot;&gt;shutdown&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;shutdown&quot;&gt;shutdown&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="99effd3b54ce4d5c603b8576d212eb082e8d5941" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;sortCtors&quot;&gt;sortCtors&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;sortCtors&quot;&gt;sortCtors&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="ef775522e359dddeb7659bf8a58bd8fec35dd151" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;sortCtors&quot;&gt;sortCtors&lt;/strong&gt;(string cycleHandling);</source>
          <target state="translated">void &lt;strong id=&quot;sortCtors&quot;&gt;sortCtors&lt;/strong&gt;（string cycleHandling）;</target>
        </trans-unit>
        <trans-unit id="faf97bb1fbff975cb06b31eb7ec1add594556b9b" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;spawn&quot;&gt;spawn&lt;/strong&gt;(void delegate() op);</source>
          <target state="translated">void &lt;strong id=&quot;spawn&quot;&gt;spawn&lt;/strong&gt;（void delegate（）op）;</target>
        </trans-unit>
        <trans-unit id="883d886a1b3230102f5f4e5bfb1ecf1ddec0e8d5" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;start&quot;&gt;start&lt;/strong&gt;(void delegate() op);</source>
          <target state="translated">void &lt;strong id=&quot;start&quot;&gt;start&lt;/strong&gt;（void delegate（）op）;</target>
        </trans-unit>
        <trans-unit id="820ea68fae9f0f37143bcec3841148bdb4b90ed7" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;swap&quot;&gt;swap&lt;/strong&gt;(T)(ref T lhs, ref T rhs)</source>
          <target state="translated">void &lt;strong id=&quot;swap&quot;&gt;swap&lt;/strong&gt;（T）（ref T lhs、ref T rhs）</target>
        </trans-unit>
        <trans-unit id="c448a6e788587b9a664157e0dc67570cec6546a2" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;swap&quot;&gt;swap&lt;/strong&gt;(ref basic_string _Right);</source>
          <target state="translated">void &lt;strong id=&quot;swap&quot;&gt;swap&lt;/strong&gt;(ref basic_string _Right);</target>
        </trans-unit>
        <trans-unit id="d4dc85fe13ddc9bafabbc713dd0160530198fc99" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;swapAt&quot;&gt;swapAt&lt;/strong&gt;(R)(auto ref R r, size_t i1, size_t i2);</source>
          <target state="translated">void &lt;strong id=&quot;swapAt&quot;&gt;swapAt&lt;/strong&gt;（R）（auto ref R r、size_t i1、size_t i2）;</target>
        </trans-unit>
        <trans-unit id="804a022d397e7c9e61526349aae68e9b6021f0dd" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;switchToFreeList&quot;&gt;switchToFreeList&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;switchToFreeList&quot;&gt;switchToFreeList&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="98a759cb83524eaeb874fb7197fdc12a4b1e3871" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;symlink&quot;&gt;symlink&lt;/strong&gt;(RO, RL)(RO original, RL link)</source>
          <target state="translated">void &lt;strong id=&quot;symlink&quot;&gt;シンボリックリンク&lt;/strong&gt;（RO、RL）（ROオリジナル、RLリンク）</target>
        </trans-unit>
        <trans-unit id="45688cfddccb3422d7cdc0da7d90e3f96953fa58" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;thread_detachByAddr&quot;&gt;thread_detachByAddr&lt;/strong&gt;(ThreadID addr);</source>
          <target state="translated">void &lt;strong id=&quot;thread_detachByAddr&quot;&gt;thread_detachByAddr&lt;/strong&gt;（ThreadID addr）;</target>
        </trans-unit>
        <trans-unit id="9f31bd42f8148f65428c9b560210c6f1fa1da889" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;thread_joinAll&quot;&gt;thread_joinAll&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;thread_joinAll&quot;&gt;thread_joinAll&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="0e3dfeb570841d55e9607c075ef4f03686811106" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;toDebug&quot;&gt;toDebug&lt;/strong&gt;(EnumDeclaration ed);</source>
          <target state="translated">void &lt;strong id=&quot;toDebug&quot;&gt;toDebug&lt;/strong&gt;（EnumDeclaration ed）;</target>
        </trans-unit>
        <trans-unit id="229292549f50a1617e39f1678e6a26c2ab32cf22" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;toFile&quot;&gt;toFile&lt;/strong&gt;(T)(T data, string fileName)</source>
          <target state="translated">void &lt;strong id=&quot;toFile&quot;&gt;toFile&lt;/strong&gt;（T）（T data、string fileName）</target>
        </trans-unit>
        <trans-unit id="734f478c5d75fd63fcebfa381122ce7566cbf794" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;toJSON&quot;&gt;toJSON&lt;/strong&gt;(Out)(auto ref Out json, ref const JSONValue root, in bool pretty = false, in JSONOptions options = JSONOptions.none)</source>
          <target state="translated">void &lt;strong id=&quot;toJSON&quot;&gt;toJSON&lt;/strong&gt;(Out)(auto ref Out json, ref const JSONValue root, in bool pretty = false, in JSONOptions options = JSONOptions.none)</target>
        </trans-unit>
        <trans-unit id="846b0a43f80a7c14ee489eb73898109fe7f305a1" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;toString&quot;&gt;toString&lt;/strong&gt;(W)(ref W writer, ref scope const FormatSpec!char fmt)</source>
          <target state="translated">void &lt;strong id=&quot;toString&quot;&gt;toString&lt;/strong&gt;（W）（ref W writer、ref scope const FormatSpec！char fmt）</target>
        </trans-unit>
        <trans-unit id="a13ca2fd02f5e14312a801bf3ed4f473e971efee" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;toString&quot;&gt;toString&lt;/strong&gt;(Writer)(scope Writer sink, ref scope const FormatSpec!char fmt);</source>
          <target state="translated">void &lt;strong id=&quot;toString&quot;&gt;toString&lt;/strong&gt;（Writer）（scope Writer sink、ref scope const FormatSpec！char fmt）;</target>
        </trans-unit>
        <trans-unit id="241be6a30d2f0a43dd69c4b9017ce36ee1ebcabd" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;toString&quot;&gt;toString&lt;/strong&gt;(scope void delegate(const(char)[]) sink);</source>
          <target state="translated">void &lt;strong id=&quot;toString&quot;&gt;toString&lt;/strong&gt;（スコープvoid delegate（const（char）[]）シンク）;</target>
        </trans-unit>
        <trans-unit id="3bd3caba47bc02fa94e2d71dec13ac418962e951" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;toString&quot;&gt;toString&lt;/strong&gt;(this T, W)(ref W writer, ref scope const FormatSpec!char fmt)</source>
          <target state="translated">void &lt;strong id=&quot;toString&quot;&gt;toString&lt;/strong&gt;（this T、W）（ref W writer、ref scope const FormatSpec！char fmt）</target>
        </trans-unit>
        <trans-unit id="060e4059f2d74cde47402d1ee79a35efed64c544" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;toTraceGC&quot;&gt;toTraceGC&lt;/strong&gt;(IRState* irs, elem* e, ref const Loc loc);</source>
          <target state="translated">void &lt;strong id=&quot;toTraceGC&quot;&gt;toTraceGC&lt;/strong&gt;（IRState * irs、elem * e、ref const Loc loc）;</target>
        </trans-unit>
        <trans-unit id="41010e72fa7b14052c5b2f8967ac5bb3f8b1df15" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;topNIndex&quot;&gt;topNIndex&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range, RangeIndex)(Range r, RangeIndex index, SortOutput sorted = No.sortOutput)</source>
          <target state="translated">void &lt;strong id=&quot;topNIndex&quot;&gt;topNIndex&lt;/strong&gt;（エイリアスless = &quot;a &amp;lt;b&quot;、SwapStrategy ss = SwapStrategy.unstable、Range、RangeIndex）（Range r、RangeIndex index、SortOutputソート= No.sortOutput）</target>
        </trans-unit>
        <trans-unit id="278d1a0556d72810a4ecac150b5a7795691232eb" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;trace_setdeffilename&quot;&gt;trace_setdeffilename&lt;/strong&gt;(string name);</source>
          <target state="translated">void &lt;strong id=&quot;trace_setdeffilename&quot;&gt;trace_setdeffilename&lt;/strong&gt;（string name）;</target>
        </trans-unit>
        <trans-unit id="eb8fa03f669fd7271a3ac02b2bcc08a57c447983" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;trace_setlogfilename&quot;&gt;trace_setlogfilename&lt;/strong&gt;(string name);</source>
          <target state="translated">void &lt;strong id=&quot;trace_setlogfilename&quot;&gt;trace_setlogfilename&lt;/strong&gt;（string name）;</target>
        </trans-unit>
        <trans-unit id="96155f596f9596a14c90378db0cfbe44425014f0" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;transcode&quot;&gt;transcode&lt;/strong&gt;(Src, Dst)(Src[] s, out Dst[] r);</source>
          <target state="translated">void &lt;strong id=&quot;transcode&quot;&gt;transcode&lt;/strong&gt;（Src、Dst）（Src [] s、out Dst [] r）;</target>
        </trans-unit>
        <trans-unit id="a1f441c2ae6d03292eaa862269eb1bb58b987555" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;translate&quot;&gt;translate&lt;/strong&gt;(C1, C2 = immutable(char), Buffer)(const(C1)[] str, in dchar[dchar] transTable, const(C2)[] toRemove, Buffer buffer)</source>
          <target state="translated">void &lt;strong id=&quot;translate&quot;&gt;translate&lt;/strong&gt;（C1、C2 = immutable（char）、Buffer）（const（C1）[] str、in dchar [dchar] transTable、const（C2）[] toRemove、Buffer buffer）</target>
        </trans-unit>
        <trans-unit id="43e019fce6de5845dd9cf863664d0e7167324457" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;translate&quot;&gt;translate&lt;/strong&gt;(C1, S, C2 = immutable(char), Buffer)(C1[] str, in S[dchar] transTable, const(C2)[] toRemove, Buffer buffer)</source>
          <target state="translated">void &lt;strong id=&quot;translate&quot;&gt;translate&lt;/strong&gt;（C1、S、C2 = immutable（char）、Buffer）（C1 [] str、in S [dchar] transTable、const（C2）[] toRemove、Buffer buffer）</target>
        </trans-unit>
        <trans-unit id="813489ccc559860062c784ec70c8b8af4212aedf" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;unSpeculative&quot;&gt;unSpeculative&lt;/strong&gt;(Scope* sc, RootObject o);</source>
          <target state="translated">void &lt;strong id=&quot;unSpeculative&quot;&gt;unSpeculative&lt;/strong&gt;（Scope * sc、RootObject o）;</target>
        </trans-unit>
        <trans-unit id="5ab9dca64b12147c92ed4a121674a8e7191ff44d" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;uninitializedFill&quot;&gt;uninitializedFill&lt;/strong&gt;(Range, Value)(Range range, Value value)</source>
          <target state="translated">void &lt;strong id=&quot;uninitializedFill&quot;&gt;uninitializedFill&lt;/strong&gt;（Range、Value）（Range range、Value value）</target>
        </trans-unit>
        <trans-unit id="5c6de979ca032ca5d6a21ea968a51295c71424f3" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;unlock&quot;&gt;unlock&lt;/strong&gt;(ulong start = 0, ulong length = 0);</source>
          <target state="translated">void &lt;strong id=&quot;unlock&quot;&gt;unlock&lt;/strong&gt;（長い開始= 0、長い長さ= 0）;</target>
        </trans-unit>
        <trans-unit id="af09a3f5c2a23014e3961ea133fc702e1e699fa5" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;update&quot;&gt;update&lt;/strong&gt;(K, V, C, U)(ref V[K] aa, K key, scope C create, scope U &lt;strong id=&quot;update&quot;&gt;update&lt;/strong&gt;)</source>
          <target state="translated">void &lt;strong id=&quot;update&quot;&gt;update&lt;/strong&gt;（K、V、C、U）（ref V [K] aa、K key、scope C create、scope U &lt;strong id=&quot;update&quot;&gt;update&lt;/strong&gt;）</target>
        </trans-unit>
        <trans-unit id="afb108d74f72ff18b12fa309e45699ba06af7a60" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;updateRealEnvironment&quot;&gt;updateRealEnvironment&lt;/strong&gt;(ref StringTable environment);</source>
          <target state="translated">void &lt;strong id=&quot;updateRealEnvironment&quot;&gt;updateRealEnvironment&lt;/strong&gt;（ref StringTable環境）;</target>
        </trans-unit>
        <trans-unit id="1ed07c14e085b23d2775a39286d2ae7bd7dd1312" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;upload&quot;&gt;upload&lt;/strong&gt;(Conn = AutoProtocol)(string loadFromPath, const(char)[] url, Conn conn = Conn())</source>
          <target state="translated">void &lt;strong id=&quot;upload&quot;&gt;upload&lt;/strong&gt;（Conn = AutoProtocol）（string loadFromPath、const（char）[] url、Conn conn = Conn（））</target>
        </trans-unit>
        <trans-unit id="9a9d5325f8ef31d4a9cc6a930e5527cf96ce033a" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;va_arg&quot;&gt;va_arg&lt;/strong&gt;()(ref va_list ap, TypeInfo ti, void* parmn);</source>
          <target state="translated">void &lt;strong id=&quot;va_arg&quot;&gt;va_arg&lt;/strong&gt;()(ref va_list ap, TypeInfo ti, void* parmn);</target>
        </trans-unit>
        <trans-unit id="0a6de0be1dd48175d1a7bace3bff8ca69dbf6087" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;va_arg&quot;&gt;va_arg&lt;/strong&gt;()(va_list apx, TypeInfo ti, void* parmn);</source>
          <target state="translated">void &lt;strong id=&quot;va_arg&quot;&gt;va_arg&lt;/strong&gt;（）（va_list apx、TypeInfo ti、void * parmn）;</target>
        </trans-unit>
        <trans-unit id="015a1200cdb989b4a87c3c8fbecccebe8b697eac" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;va_arg&quot;&gt;va_arg&lt;/strong&gt;(T)(ref va_list ap, ref T parmn);</source>
          <target state="translated">void &lt;strong id=&quot;va_arg&quot;&gt;va_arg&lt;/strong&gt;(T)(ref va_list ap, ref T parmn);</target>
        </trans-unit>
        <trans-unit id="0b211813bf396cefe38b7a67640e332bb8f00ff4" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;va_arg&quot;&gt;va_arg&lt;/strong&gt;(T)(va_list apx, ref T parmn);</source>
          <target state="translated">void &lt;strong id=&quot;va_arg&quot;&gt;va_arg&lt;/strong&gt;（T）（va_list apx、ref T parmn）;</target>
        </trans-unit>
        <trans-unit id="5621fa520c0c4b23e179ef42a4277bc9765475a9" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;va_start&quot;&gt;va_start&lt;/strong&gt;(T)(out va_list ap, ref T parmn);</source>
          <target state="translated">void &lt;strong id=&quot;va_start&quot;&gt;va_start&lt;/strong&gt;（T）（out va_list ap、ref T parmn）;</target>
        </trans-unit>
        <trans-unit id="6d910653e2522ffc99a1e78b21927cbe9d59ad56" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;wait&quot;&gt;wait&lt;/strong&gt;();</source>
          <target state="translated">void &lt;strong id=&quot;wait&quot;&gt;wait&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="cadb7bb4964731c151e87de0acf1dbc3d17dacba" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;wait&quot;&gt;wait&lt;/strong&gt;(this Q)(bool _unused_)</source>
          <target state="translated">void &lt;strong id=&quot;wait&quot;&gt;wait&lt;/strong&gt;(this Q)(bool _unused_)</target>
        </trans-unit>
        <trans-unit id="3648368e2b93890dacfc3536a80223fa48a856db" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;windowsHandleOpen&quot;&gt;windowsHandleOpen&lt;/strong&gt;(HANDLE handle, scope const(char)[] stdioOpenmode);</source>
          <target state="translated">void &lt;strong id=&quot;windowsHandleOpen&quot;&gt;windowsHandleOpen&lt;/strong&gt;（HANDLEハンドル、スコープconst（char）[] stdioOpenmode）;</target>
        </trans-unit>
        <trans-unit id="5a8b6be12e7976a830553aa024a44101af4909b1" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;write&quot;&gt;write&lt;/strong&gt;(R)(R name, const void[] buffer)</source>
          <target state="translated">void &lt;strong id=&quot;write&quot;&gt;write&lt;/strong&gt;（R）（R name、const void [] buffer）</target>
        </trans-unit>
        <trans-unit id="f8161b91bdc7c63310f6611612969abdaf76a5d9" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;write&quot;&gt;write&lt;/strong&gt;(R)(auto ref R name, const void[] buffer)</source>
          <target state="translated">void &lt;strong id=&quot;write&quot;&gt;write&lt;/strong&gt;（R）（auto ref R name、const void [] buffer）</target>
        </trans-unit>
        <trans-unit id="7df1325d2eddff06b51e9175232ea736ce05635f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;write&quot;&gt;write&lt;/strong&gt;(S...)(S args);</source>
          <target state="translated">void &lt;strong id=&quot;write&quot;&gt;write&lt;/strong&gt;（S ...）（S args）;</target>
        </trans-unit>
        <trans-unit id="08a8a36b1a150e392c054e3b49d2e1b601fa31ff" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;write&quot;&gt;write&lt;/strong&gt;(T, Endian endianness = Endian.bigEndian, R)(R range, const T value, size_t index)</source>
          <target state="translated">void &lt;strong id=&quot;write&quot;&gt;write&lt;/strong&gt;（T、Endian endianness = Endian.bigEndian、R）（R range、const T value、size_t index）</target>
        </trans-unit>
        <trans-unit id="bc4a625e77dcfc608af15918839df9850eede869" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;write&quot;&gt;write&lt;/strong&gt;(T, Endian endianness = Endian.bigEndian, R)(R range, const T value, size_t* index)</source>
          <target state="translated">void &lt;strong id=&quot;write&quot;&gt;write&lt;/strong&gt;（T、Endian endianness = Endian.bigEndian、R）（R range、const T value、size_t * index）</target>
        </trans-unit>
        <trans-unit id="3331138f9057b46984c170a7aac17b61bba381a1" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;write&quot;&gt;write&lt;/strong&gt;(T...)(T args)</source>
          <target state="translated">void &lt;strong id=&quot;write&quot;&gt;書き込み&lt;/strong&gt;（T ...）（T args）</target>
        </trans-unit>
        <trans-unit id="28b453fe68ebab906b11350635370d987d4b9b50" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;writeFile&quot;&gt;writeFile&lt;/strong&gt;(Loc loc, const(char)[] filename, const void[] data);</source>
          <target state="translated">void &lt;strong id=&quot;writeFile&quot;&gt;writeFile&lt;/strong&gt;（Loc loc、const（char）[] filename、const void [] data）;</target>
        </trans-unit>
        <trans-unit id="07e4d5735b20d643d7737a3d90248428c8bc4ed6" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;write_instance_pointers&quot;&gt;write_instance_pointers&lt;/strong&gt;(Type type, Symbol* s, uint offset);</source>
          <target state="translated">void &lt;strong id=&quot;write_instance_pointers&quot;&gt;write_instance_pointers&lt;/strong&gt;（Type type、Symbol * s、uint offset）;</target>
        </trans-unit>
        <trans-unit id="a94dd4a7835210bc71ce5bd4ca98e2d8943390c7" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;write_pointers&quot;&gt;write_pointers&lt;/strong&gt;(Type type, Symbol* s, uint offset);</source>
          <target state="translated">void &lt;strong id=&quot;write_pointers&quot;&gt;write_pointers&lt;/strong&gt;（Type type、Symbol * s、uint offset）;</target>
        </trans-unit>
        <trans-unit id="2686f0eb6a2c418fb3f0d26026427d41d4fe6143" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;writef&quot;&gt;writef&lt;/strong&gt;(Char, A...)(in Char[] fmt, A args);</source>
          <target state="translated">void &lt;strong id=&quot;writef&quot;&gt;writef&lt;/strong&gt;（Char、A ...）（Char [] fmt、A args）;</target>
        </trans-unit>
        <trans-unit id="b9b50281a6ba47348dc9d9da19bb65bc905115d8" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;writef&quot;&gt;writef&lt;/strong&gt;(Char, A...)(scope const(Char)[] fmt, A args);</source>
          <target state="translated">void &lt;strong id=&quot;writef&quot;&gt;writef&lt;/strong&gt;（Char、A ...）（scope const（Char）[] fmt、A args）;</target>
        </trans-unit>
        <trans-unit id="f2c59a833901dcfa919847fc5ab52c4c75eb00bd" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;writef&quot;&gt;writef&lt;/strong&gt;(alias fmt, A...)(A args)</source>
          <target state="translated">void &lt;strong id=&quot;writef&quot;&gt;writef&lt;/strong&gt;（エイリアスfmt、A ...）（A args）</target>
        </trans-unit>
        <trans-unit id="46028c1d5ce0d4fdc7e684c1934f0190254dd77e" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;writefln&quot;&gt;writefln&lt;/strong&gt;(Char, A...)(in Char[] fmt, A args);</source>
          <target state="translated">void &lt;strong id=&quot;writefln&quot;&gt;writefln&lt;/strong&gt;（Char、A ...）（Char [] fmt、A args）;</target>
        </trans-unit>
        <trans-unit id="48ebeecdd73b16b3756560464f620cc2f6c77577" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;writefln&quot;&gt;writefln&lt;/strong&gt;(Char, A...)(scope const(Char)[] fmt, A args);</source>
          <target state="translated">void &lt;strong id=&quot;writefln&quot;&gt;writefln&lt;/strong&gt;（Char、A ...）（scope const（Char）[] fmt、A args）;</target>
        </trans-unit>
        <trans-unit id="5dd9a2c8023a160fb92dddd9d875d0dab8a7060e" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;writefln&quot;&gt;writefln&lt;/strong&gt;(alias fmt, A...)(A args)</source>
          <target state="translated">void &lt;strong id=&quot;writefln&quot;&gt;writefln&lt;/strong&gt;（エイリアスfmt、A ...）（A args）</target>
        </trans-unit>
        <trans-unit id="9079a087353ea1b0bb68c8c66aaf1afbe9d9442c" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;writeln&quot;&gt;writeln&lt;/strong&gt;(S...)(S args);</source>
          <target state="translated">void &lt;strong id=&quot;writeln&quot;&gt;writeln&lt;/strong&gt;（S ...）（S args）;</target>
        </trans-unit>
        <trans-unit id="055a580a6b06504089f8f708cdf60af41a92fc96" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;writeln&quot;&gt;writeln&lt;/strong&gt;(T...)(T args);</source>
          <target state="translated">void &lt;strong id=&quot;writeln&quot;&gt;writeln&lt;/strong&gt;（T ...）（T args）;</target>
        </trans-unit>
        <trans-unit id="9c56dcb79e6d671848427fface768090bb3cf32f" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;yield&quot;&gt;yield&lt;/strong&gt;(T)(T value);</source>
          <target state="translated">void &lt;strong id=&quot;yield&quot;&gt;yield&lt;/strong&gt;（T）（T value）;</target>
        </trans-unit>
        <trans-unit id="077a42f7ea72672ea7945d791614c9240d3c04eb" translate="yes" xml:space="preserve">
          <source>void &lt;strong id=&quot;yield&quot;&gt;yield&lt;/strong&gt;(T)(ref T value);</source>
          <target state="translated">void &lt;strong id=&quot;yield&quot;&gt;yield&lt;/strong&gt;（T）（ref T value）;</target>
        </trans-unit>
        <trans-unit id="409a178932f075b1d2d340a227483580345f78cc" translate="yes" xml:space="preserve">
          <source>void delegate() &lt;code&gt;dg&lt;/code&gt;</source>
          <target state="translated">void delegate（） &lt;code&gt;dg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="953f4543d2f1c60f8edc195c3e17f366c621eccc" translate="yes" xml:space="preserve">
          <source>void delegate() &lt;code&gt;op&lt;/code&gt;</source>
          <target state="translated">void delegate（） &lt;code&gt;op&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40dc6494350b46ec613cf80ec2b2e21496a78d75" translate="yes" xml:space="preserve">
          <source>void delegate() nothrow &lt;code&gt;cbDllUnload&lt;/code&gt;</source>
          <target state="translated">void delegate（）nothrow &lt;code&gt;cbDllUnload&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="54fde564565afe9a91e2b13f0b6da5ffe2b25cce" translate="yes" xml:space="preserve">
          <source>void delegate() nothrow &lt;code&gt;dg&lt;/code&gt;</source>
          <target state="translated">void delegate（）nothrow &lt;code&gt;dg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce105f9fb18f16de18b4bcf9a7a6189b6ae914c1" translate="yes" xml:space="preserve">
          <source>void delegate(Dsymbol) &lt;code&gt;dg&lt;/code&gt;</source>
          <target state="translated">void delegate（Dsymbol） &lt;code&gt;dg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84c9a41eae4b2eaa78e048800f3f323a8293e128" translate="yes" xml:space="preserve">
          <source>void delegate(E)&lt;code&gt;dg&lt;/code&gt;</source>
          <target state="translated">void delegate（E） &lt;code&gt;dg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="362d4851dbaf880e98e6663eda44b204174ee193" translate="yes" xml:space="preserve">
          <source>void delegate(const(char)[] name, int pickAny) &lt;code&gt;pAddSymbol&lt;/code&gt;</source>
          <target state="translated">void delegate（const（char）[] name、int pickAny） &lt;code&gt;pAddSymbol&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abcb2864c49588b8affcaff4279d8078c9f9b381" translate="yes" xml:space="preserve">
          <source>void delegate(const(char)[]) &lt;code&gt;sink&lt;/code&gt;</source>
          <target state="translated">void delegate（const（char）[]） &lt;code&gt;sink&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2dfc28d7b8bba9008e28d75de4cac4441ce96af8" translate="yes" xml:space="preserve">
          <source>void delegate(in char[]) &lt;code&gt;callback&lt;/code&gt;</source>
          <target state="translated">void delegate（in char []） &lt;code&gt;callback&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66559756b71d7b9d6c26bd007080e375527c99f0" translate="yes" xml:space="preserve">
          <source>void expression that calls the invariant</source>
          <target state="translated">不変</target>
        </trans-unit>
        <trans-unit id="889e0bb4620d6764158e5f3ad55b65d35f696973" translate="yes" xml:space="preserve">
          <source>void function() &lt;code&gt;fn&lt;/code&gt;</source>
          <target state="translated">void function（） &lt;code&gt;fn&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9455fb8fafe5fa30c7434a093e5e516c35378e11" translate="yes" xml:space="preserve">
          <source>void function(void*) &lt;strong id=&quot;xDelUser&quot;&gt;xDelUser&lt;/strong&gt;;</source>
          <target state="translated">void function（void *）&lt;strong id=&quot;xDelUser&quot;&gt;xDelUser&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="98e0475df65996a4b773272454ce891b7587fcd4" translate="yes" xml:space="preserve">
          <source>void function(void*) &lt;strong id=&quot;xFree&quot;&gt;xFree&lt;/strong&gt;;</source>
          <target state="translated">void function（void *）&lt;strong id=&quot;xFree&quot;&gt;xFree&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="742e2f3f81b62ec057683c8da7fd8a49d9c22e10" translate="yes" xml:space="preserve">
          <source>void function(void*) &lt;strong id=&quot;xShutdown&quot;&gt;xShutdown&lt;/strong&gt;;</source>
          <target state="translated">void function（void *）&lt;strong id=&quot;xShutdown&quot;&gt;xShutdown&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="14a1d3af3b77b43bea893572b5e2897027eea46e" translate="yes" xml:space="preserve">
          <source>void* &lt;code&gt;address&lt;/code&gt;</source>
          <target state="translated">void * &lt;code&gt;address&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a82a78da083b32a2dafa11f14c9ffa78aeaf86f1" translate="yes" xml:space="preserve">
          <source>void* &lt;code&gt;dest&lt;/code&gt;</source>
          <target state="translated">void * &lt;code&gt;dest&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d3be549b7b350f5d25ea9216a3a6307077fab83" translate="yes" xml:space="preserve">
          <source>void* &lt;code&gt;newContext&lt;/code&gt;</source>
          <target state="translated">void * &lt;code&gt;newContext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7407ed15b3ca34646fefec18868e20f72a98a851" translate="yes" xml:space="preserve">
          <source>void* &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">void * &lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0024d5524869ed8c91a5f8f52fce6ac510171c25" translate="yes" xml:space="preserve">
          <source>void* &lt;code&gt;param&lt;/code&gt;</source>
          <target state="translated">void * &lt;code&gt;param&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="466e8195d5ff2e90465cfa1922a13f6b0b04c4a0" translate="yes" xml:space="preserve">
          <source>void* &lt;code&gt;pkey&lt;/code&gt;</source>
          <target state="translated">void * &lt;code&gt;pkey&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="942e24ab5d1a7c8cf35c810146dee0b01c63bcdf" translate="yes" xml:space="preserve">
          <source>void* &lt;code&gt;ptr&lt;/code&gt;</source>
          <target state="translated">void *型 &lt;code&gt;ptr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1669303ab1fec11733c848e2bcdd9ab5695506e1" translate="yes" xml:space="preserve">
          <source>void* &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">void * &lt;code&gt;value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ccaafe13a2d8fbd3893062dd9f5c07f4e6e4bd13" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;__alloca&quot;&gt;__alloca&lt;/strong&gt;(int nbytes);</source>
          <target state="translated">void * &lt;strong id=&quot;__alloca&quot;&gt;__alloca&lt;/strong&gt;（int nbytes）;</target>
        </trans-unit>
        <trans-unit id="d7806cde9c5dd5bd7a8e3518da08d78885a9d56f" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_aaGetX&quot;&gt;_aaGetX&lt;/strong&gt;(AA* aa, const TypeInfo_AssociativeArray ti, const size_t valsz, scope const void* pkey, out bool found);</source>
          <target state="translated">void* &lt;strong id=&quot;_aaGetX&quot;&gt;_aaGetX&lt;/strong&gt;(AA* aa, const TypeInfo_AssociativeArray ti, const size_t valsz, scope const void* pkey, out bool found);</target>
        </trans-unit>
        <trans-unit id="70a0568c3aeaa42e63afd0492606c49aa4fa7fb7" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_aaGetX&quot;&gt;_aaGetX&lt;/strong&gt;(AA* aa, const TypeInfo_AssociativeArray ti, in size_t valsz, in void* pkey, out bool found);</source>
          <target state="translated">void * &lt;strong id=&quot;_aaGetX&quot;&gt;_aaGetX&lt;/strong&gt;（AA * aa、const TypeInfo_AssociativeArray ti、in size_t valsz、in void * pkey、out bool found）;</target>
        </trans-unit>
        <trans-unit id="d8f7c4e71787b31fff521c236d89cfeb767f854f" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_aaGetY&quot;&gt;_aaGetY&lt;/strong&gt;(AA* aa, const TypeInfo_AssociativeArray ti, const size_t valsz, scope const void* pkey);</source>
          <target state="translated">void* &lt;strong id=&quot;_aaGetY&quot;&gt;_aaGetY&lt;/strong&gt;(AA* aa, const TypeInfo_AssociativeArray ti, const size_t valsz, scope const void* pkey);</target>
        </trans-unit>
        <trans-unit id="542a82ad1b11b02d58df8d6e5563399def371642" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_aaGetY&quot;&gt;_aaGetY&lt;/strong&gt;(AA* aa, const TypeInfo_AssociativeArray ti, in size_t valsz, in void* pkey);</source>
          <target state="translated">void * &lt;strong id=&quot;_aaGetY&quot;&gt;_aaGetY&lt;/strong&gt;（AA * aa、const TypeInfo_AssociativeArray ti、in size_t valsz、in void * pkey）;</target>
        </trans-unit>
        <trans-unit id="246465cf3189f3dcb6d7b7f0d04a103878f3a451" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_d_allocmemory&quot;&gt;_d_allocmemory&lt;/strong&gt;(size_t sz);</source>
          <target state="translated">void * &lt;strong id=&quot;_d_allocmemory&quot;&gt;_d_allocmemory&lt;/strong&gt;（size_t sz）;</target>
        </trans-unit>
        <trans-unit id="04163ff8f866359bace8bc0f983bf32023c09b83" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_d_arrayliteralTX&quot;&gt;_d_arrayliteralTX&lt;/strong&gt;(const TypeInfo ti, size_t length);</source>
          <target state="translated">void * &lt;strong id=&quot;_d_arrayliteralTX&quot;&gt;_d_arrayliteralTX&lt;/strong&gt;（const TypeInfo ti、size_t length）;</target>
        </trans-unit>
        <trans-unit id="ca1d16c3fd2d5ef97ac40a3163403a87514de11e" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_d_arraysetassign&quot;&gt;_d_arraysetassign&lt;/strong&gt;(void* p, void* value, int count, TypeInfo ti);</source>
          <target state="translated">void * &lt;strong id=&quot;_d_arraysetassign&quot;&gt;_d_arraysetassign&lt;/strong&gt;（void * p、void * value、int count、TypeInfo ti）;</target>
        </trans-unit>
        <trans-unit id="ce4275c723e9d985723ae525c6370a6cdc6f0737" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_d_arraysetctor&quot;&gt;_d_arraysetctor&lt;/strong&gt;(void* p, void* value, int count, TypeInfo ti);</source>
          <target state="translated">void * &lt;strong id=&quot;_d_arraysetctor&quot;&gt;_d_arraysetctor&lt;/strong&gt;（void * p、void * value、int count、TypeInfo ti）;</target>
        </trans-unit>
        <trans-unit id="e83375ddf56d811b87dd7e71d15f2ed453b61f7b" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_d_interface_cast&quot;&gt;_d_interface_cast&lt;/strong&gt;(void* p, ClassInfo c);</source>
          <target state="translated">void * &lt;strong id=&quot;_d_interface_cast&quot;&gt;_d_interface_cast&lt;/strong&gt;（void * p、ClassInfo c）;</target>
        </trans-unit>
        <trans-unit id="a3e07244183d79649319e3ab5e5aae1a240478ef" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_d_newitemT&quot;&gt;_d_newitemT&lt;/strong&gt;(in TypeInfo _ti);</source>
          <target state="translated">void * &lt;strong id=&quot;_d_newitemT&quot;&gt;_d_newitemT&lt;/strong&gt;（TypeInfo _ti）;</target>
        </trans-unit>
        <trans-unit id="59c2a4a3c83f002ae403552c7e42f4f85addd681" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_d_newitemU&quot;&gt;_d_newitemU&lt;/strong&gt;(in TypeInfo _ti);</source>
          <target state="translated">void * &lt;strong id=&quot;_d_newitemU&quot;&gt;_d_newitemU&lt;/strong&gt;（TypeInfo _ti）;</target>
        </trans-unit>
        <trans-unit id="8ef6540238e8336e200bfe0966a7af15c3e3dea8" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;_d_newitemiT&quot;&gt;_d_newitemiT&lt;/strong&gt;(in TypeInfo _ti);</source>
          <target state="translated">void * &lt;strong id=&quot;_d_newitemiT&quot;&gt;_d_newitemiT&lt;/strong&gt;（TypeInfo _ti）;</target>
        </trans-unit>
        <trans-unit id="ea2a20356bcc717123ab5f53a92844d26837676c" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;gc_getProxy&quot;&gt;gc_getProxy&lt;/strong&gt;();</source>
          <target state="translated">void * &lt;strong id=&quot;gc_getProxy&quot;&gt;gc_getProxy&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="747cc03718cd7fe3bc5f7aa659a4c845105cd8ae" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;getCppPtrToThrownObject&quot;&gt;getCppPtrToThrownObject&lt;/strong&gt;(_Unwind_Exception* exceptionObject, CppTypeInfo sti);</source>
          <target state="translated">void * &lt;strong id=&quot;getCppPtrToThrownObject&quot;&gt;getCppPtrToThrownObject&lt;/strong&gt;（_Unwind_Exception * exceptionObject、CppTypeInfo sti）;</target>
        </trans-unit>
        <trans-unit id="0855a80af622e12d9c4fcdc5036fd8fbb485b6c6" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;loadLibrary&quot;&gt;loadLibrary&lt;/strong&gt;()(scope const char[] name);</source>
          <target state="translated">void * &lt;strong id=&quot;loadLibrary&quot;&gt;loadLibrary&lt;/strong&gt;（）（scope const char [] name）;</target>
        </trans-unit>
        <trans-unit id="e4bbccb77368703eaa9c6d7b71fa4f006ee64696" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;pAppData&quot;&gt;pAppData&lt;/strong&gt;;</source>
          <target state="translated">void * &lt;strong id=&quot;pAppData&quot;&gt;pAppData&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="d0d2c4bfee0589db3b02e5e69b2a84812f2b76a1" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;pContext&quot;&gt;pContext&lt;/strong&gt;;</source>
          <target state="translated">void * &lt;strong id=&quot;pContext&quot;&gt;pContext&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="31b202342cf16b9c1c12c0209ce687d47cace651" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;pUser&quot;&gt;pUser&lt;/strong&gt;;</source>
          <target state="translated">void * &lt;strong id=&quot;pUser&quot;&gt;pUser&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="5e3c0d0c449d0db95fd2b5728317e40fd85a7be5" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;rt_loadLibrary&quot;&gt;rt_loadLibrary&lt;/strong&gt;(const char* name);</source>
          <target state="translated">void * &lt;strong id=&quot;rt_loadLibrary&quot;&gt;rt_loadLibrary&lt;/strong&gt;（const char * name）;</target>
        </trans-unit>
        <trans-unit id="a7c5a32e161525ec0ff180dca81df9b4524266c0" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;userp&quot;&gt;userp&lt;/strong&gt;;</source>
          <target state="translated">void * &lt;strong id=&quot;userp&quot;&gt;userp&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="951c171bc1bc544be175f7b2c3f8fbbf60c25bee" translate="yes" xml:space="preserve">
          <source>void* &lt;strong id=&quot;whatever&quot;&gt;whatever&lt;/strong&gt;;</source>
          <target state="translated">void * &lt;strong id=&quot;whatever&quot;&gt;何でも&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="f3bbf89b462a57b4502e2b70261cc5f89e0c1399" translate="yes" xml:space="preserve">
          <source>void* function(int) &lt;strong id=&quot;xMalloc&quot;&gt;xMalloc&lt;/strong&gt;;</source>
          <target state="translated">void * function（int）&lt;strong id=&quot;xMalloc&quot;&gt;xMalloc&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="24d7a4a6ebca521eaa370822725e64b6d11f7ee5" translate="yes" xml:space="preserve">
          <source>void* function(void*, int) &lt;strong id=&quot;xRealloc&quot;&gt;xRealloc&lt;/strong&gt;;</source>
          <target state="translated">void * function（void *、int）&lt;strong id=&quot;xRealloc&quot;&gt;xRealloc&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="c5bb1f284c6e28cbae045b5bd6eeffe2d86edb3f" translate="yes" xml:space="preserve">
          <source>void* int int</source>
          <target state="translated">空虚*int int</target>
        </trans-unit>
        <trans-unit id="f89f95f4aa02d569f64634e0c5d82bafa9d1e405" translate="yes" xml:space="preserve">
          <source>void*, int nByte, int min</source>
          <target state="translated">void*,int nByte,int min</target>
        </trans-unit>
        <trans-unit id="fe36ac4dd7de5cc71da077ef7e5b725ce1ce8e43" translate="yes" xml:space="preserve">
          <source>void*, int sz, int N</source>
          <target state="translated">void*,int sz,int N</target>
        </trans-unit>
        <trans-unit id="868acf0b8d0cf898772cc612ad861594835c7e57" translate="yes" xml:space="preserve">
          <source>void*[] &lt;strong id=&quot;vtbl&quot;&gt;vtbl&lt;/strong&gt;;</source>
          <target state="translated">void * [] &lt;strong id=&quot;vtbl&quot;&gt;vtbl&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="32dccdadf082dd85a0151e5ee6238a39eec079f5" translate="yes" xml:space="preserve">
          <source>void16</source>
          <target state="translated">void16</target>
        </trans-unit>
        <trans-unit id="b45fcec83edec691c696aaf1614f638c9fc0b12b" translate="yes" xml:space="preserve">
          <source>void32</source>
          <target state="translated">void32</target>
        </trans-unit>
        <trans-unit id="280d0f6e49c93ebf8a0ef405da1a830ce3ad47fd" translate="yes" xml:space="preserve">
          <source>void[] &lt;code&gt;b&lt;/code&gt;</source>
          <target state="translated">void [] &lt;code&gt;b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ef3d702a8e756dda5674cc3c928c22bc13e92428" translate="yes" xml:space="preserve">
          <source>void[] &lt;code&gt;block&lt;/code&gt;</source>
          <target state="translated">void [] &lt;code&gt;block&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="547da5cdad806c1ffec2955060c12c8d48e2b49d" translate="yes" xml:space="preserve">
          <source>void[] &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="translated">void [] &lt;code&gt;buffer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac7f1a551a87b615d68ae9a6695fcee03be187dd" translate="yes" xml:space="preserve">
          <source>void[] &lt;code&gt;data&lt;/code&gt;</source>
          <target state="translated">void [] &lt;code&gt;data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30a2ec378207abc26c851a6e31a466a384aa5d35" translate="yes" xml:space="preserve">
          <source>void[] &lt;code&gt;segment&lt;/code&gt;</source>
          <target state="translated">void [] &lt;code&gt;segment&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee1b84aad15e8940fc8ba526fd1a302e0465cd61" translate="yes" xml:space="preserve">
          <source>void[] &lt;code&gt;v&lt;/code&gt;</source>
          <target state="translated">void [] &lt;code&gt;v&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c3fde836ac4dbc32f3f94d31916013a49dbf6a89" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_arrayappendT&quot;&gt;_d_arrayappendT&lt;/strong&gt;(const TypeInfo ti, ref byte[] x, byte[] y);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_arrayappendT&quot;&gt;_d_arrayappendT&lt;/strong&gt;（const TypeInfo ti、ref byte [] x、byte [] y）;</target>
        </trans-unit>
        <trans-unit id="035d387232e62f1266ae09dc59b3c683cd8f2705" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_arrayappendcd&quot;&gt;_d_arrayappendcd&lt;/strong&gt;(ref byte[] x, dchar c);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_arrayappendcd&quot;&gt;_d_arrayappendcd&lt;/strong&gt;（ref byte [] x、dchar c）;</target>
        </trans-unit>
        <trans-unit id="6a5b248a61468e1408dd6a2faced2bea4d0cf402" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_arrayappendwd&quot;&gt;_d_arrayappendwd&lt;/strong&gt;(ref byte[] x, dchar c);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_arrayappendwd&quot;&gt;_d_arrayappendwd&lt;/strong&gt;（ref byte [] x、dchar c）;</target>
        </trans-unit>
        <trans-unit id="26dc57890a82f231c780343e7b327b34b9afab8e" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_arrayassign&quot;&gt;_d_arrayassign&lt;/strong&gt;(TypeInfo ti, void[] from, void[] to);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_arrayassign&quot;&gt;_d_arrayassign&lt;/strong&gt;（TypeInfo ti、void [] from、void [] to）;</target>
        </trans-unit>
        <trans-unit id="cfdbb553b13c3bcce2fd7e8de3b554e9ec0384a5" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_arrayassign_l&quot;&gt;_d_arrayassign_l&lt;/strong&gt;(TypeInfo ti, void[] src, void[] dst, void* ptmp);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_arrayassign_l&quot;&gt;_d_arrayassign_l&lt;/strong&gt;（TypeInfo ti、void [] src、void [] dst、void * ptmp）;</target>
        </trans-unit>
        <trans-unit id="12e087f41d72a8028de6a2e34ef92683c43f4517" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_arrayassign_r&quot;&gt;_d_arrayassign_r&lt;/strong&gt;(TypeInfo ti, void[] src, void[] dst, void* ptmp);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_arrayassign_r&quot;&gt;_d_arrayassign_r&lt;/strong&gt;（TypeInfo ti、void [] src、void [] dst、void * ptmp）;</target>
        </trans-unit>
        <trans-unit id="0d2bda4050ea8708c2e205e1fa419779ab25ad9f" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_arraycatnTX&quot;&gt;_d_arraycatnTX&lt;/strong&gt;(const TypeInfo ti, byte[][] arrs);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_arraycatnTX&quot;&gt;_d_arraycatnTX&lt;/strong&gt;（const TypeInfo ti、byte [] [] arrs）;</target>
        </trans-unit>
        <trans-unit id="4bb443dd2b528b85c9c85ccaab33419dcab70503" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_arrayctor&quot;&gt;_d_arrayctor&lt;/strong&gt;(TypeInfo ti, void[] from, void[] to);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_arrayctor&quot;&gt;_d_arrayctor&lt;/strong&gt;（TypeInfo ti、void [] from、void [] to）;</target>
        </trans-unit>
        <trans-unit id="5b750ebc8ca64a3b342bf5a6fd7e063f17f4ca11" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_arraysetlengthT&quot;&gt;_d_arraysetlengthT&lt;/strong&gt;(const TypeInfo ti, size_t newlength, void[]* p);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_arraysetlengthT&quot;&gt;_d_arraysetlengthT&lt;/strong&gt;（const TypeInfo ti、size_t newlength、void [] * p）;</target>
        </trans-unit>
        <trans-unit id="cb68cfea42217ada28a1b20610c22412e2e6db65" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_arraysetlengthiT&quot;&gt;_d_arraysetlengthiT&lt;/strong&gt;(const TypeInfo ti, size_t newlength, void[]* p);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_arraysetlengthiT&quot;&gt;_d_arraysetlengthiT&lt;/strong&gt;（const TypeInfo ti、size_t newlength、void [] * p）;</target>
        </trans-unit>
        <trans-unit id="1155d736236c13bd782072a2d1f635eeaed28912" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_newarrayOpT&quot;&gt;_d_newarrayOpT&lt;/strong&gt;(alias op)(const TypeInfo ti, size_t[] dims);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_newarrayOpT&quot;&gt;_d_newarrayOpT&lt;/strong&gt;（エイリアスop）（const TypeInfo ti、size_t [] dims）;</target>
        </trans-unit>
        <trans-unit id="f48df75452ab2e1c2b95ad47071546e766813306" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_newarraymTX&quot;&gt;_d_newarraymTX&lt;/strong&gt;(const TypeInfo ti, size_t[] dims);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_newarraymTX&quot;&gt;_d_newarraymTX&lt;/strong&gt;（const TypeInfo ti、size_t [] dims）;</target>
        </trans-unit>
        <trans-unit id="81549d390a32c1af4f250176f1dd8b081726c09d" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;_d_newarraymiTX&quot;&gt;_d_newarraymiTX&lt;/strong&gt;(const TypeInfo ti, size_t[] dims);</source>
          <target state="translated">void [] &lt;strong id=&quot;_d_newarraymiTX&quot;&gt;_d_newarraymiTX&lt;/strong&gt;（const TypeInfo ti、size_t [] dims）;</target>
        </trans-unit>
        <trans-unit id="8143333a9447d6686f0490c6ee03281a122744e5" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;alignedAllocate&quot;&gt;alignedAllocate&lt;/strong&gt;(size_t bytes, uint alignment);</source>
          <target state="translated">void [] &lt;strong id=&quot;alignedAllocate&quot;&gt;alignedAllocate&lt;/strong&gt;（size_tバイト、uint配置）;</target>
        </trans-unit>
        <trans-unit id="a1ed3c2681918c121a21ee26c98fedea57a101da" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;alignedAllocate&quot;&gt;alignedAllocate&lt;/strong&gt;(size_t n, uint a);</source>
          <target state="translated">void [] &lt;strong id=&quot;alignedAllocate&quot;&gt;alignedAllocate&lt;/strong&gt;（size_t n、uint a）;</target>
        </trans-unit>
        <trans-unit id="63424ccb5b9a23e9f9a2a63127c4fcfb753d424b" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;alignedAllocate&quot;&gt;alignedAllocate&lt;/strong&gt;(size_t s, uint a);</source>
          <target state="translated">void [] &lt;strong id=&quot;alignedAllocate&quot;&gt;alignedAllocate&lt;/strong&gt;（size_t s、uint a）;</target>
        </trans-unit>
        <trans-unit id="6962b18225981421a4332bf0dcbc5b8bb0c80851" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;alignedAllocate&quot;&gt;alignedAllocate&lt;/strong&gt;(size_t s, uint theAlignment);</source>
          <target state="translated">void [] &lt;strong id=&quot;alignedAllocate&quot;&gt;alignedAllocate&lt;/strong&gt;（size_t s、uint theAlignment）;</target>
        </trans-unit>
        <trans-unit id="e3411e317b669bc454a5b9a08cb49e310463a183" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;alignedAllocate&quot;&gt;alignedAllocate&lt;/strong&gt;(size_t, uint);</source>
          <target state="translated">void [] &lt;strong id=&quot;alignedAllocate&quot;&gt;alignedAllocate&lt;/strong&gt;（size_t、uint）;</target>
        </trans-unit>
        <trans-unit id="6d02ed2724837adc6042a7add8d34585ae6c2da2" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;allocate&quot;&gt;allocate&lt;/strong&gt;(size_t bytes);</source>
          <target state="translated">void [] &lt;strong id=&quot;allocate&quot;&gt;allocate&lt;/strong&gt;（size_t bytes）;</target>
        </trans-unit>
        <trans-unit id="515c443a0b76356e5fbe5cd1a2c40622da8ffed7" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;allocate&quot;&gt;allocate&lt;/strong&gt;(size_t n);</source>
          <target state="translated">void [] &lt;strong id=&quot;allocate&quot;&gt;allocate&lt;/strong&gt;（size_t n）;</target>
        </trans-unit>
        <trans-unit id="909567186e8061cf3d91ac855f07ffe279e1a4c2" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;allocate&quot;&gt;allocate&lt;/strong&gt;(size_t s);</source>
          <target state="translated">void [] &lt;strong id=&quot;allocate&quot;&gt;allocate&lt;/strong&gt;（size_t s）;</target>
        </trans-unit>
        <trans-unit id="fd2e139bd534186c12e224c4c8c6cc6152b8def4" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;allocate&quot;&gt;allocate&lt;/strong&gt;(size_t s, TypeInfo ti = null);</source>
          <target state="translated">void [] &lt;strong id=&quot;allocate&quot;&gt;allocate&lt;/strong&gt;（size_t s、TypeInfo ti = null）;</target>
        </trans-unit>
        <trans-unit id="259520a3df67e725ea759cb83109e7fb4d581754" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;allocate&quot;&gt;allocate&lt;/strong&gt;(size_t);</source>
          <target state="translated">void [] &lt;strong id=&quot;allocate&quot;&gt;allocate&lt;/strong&gt;（size_t）;</target>
        </trans-unit>
        <trans-unit id="db867c9b0132d77e585e4bcb7ff9a0dbb06179b4" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;allocateAll&quot;&gt;allocateAll&lt;/strong&gt;();</source>
          <target state="translated">void [] &lt;strong id=&quot;allocateAll&quot;&gt;allocateAll&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="93a68ef059675a61c0d35ea7df4b5e258fc2959b" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;flush&quot;&gt;flush&lt;/strong&gt;();</source>
          <target state="translated">void [] &lt;strong id=&quot;flush&quot;&gt;flush&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="ec1cf4b2c67cd3d553ff300000143696b200d1be" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;flush&quot;&gt;flush&lt;/strong&gt;(int mode = Z_FINISH);</source>
          <target state="translated">void [] &lt;strong id=&quot;flush&quot;&gt;flush&lt;/strong&gt;（intモード= Z_FINISH）;</target>
        </trans-unit>
        <trans-unit id="061c40eed97fa03089c229181d5ad5cd264fa071" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;();</source>
          <target state="translated">void [] &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="9e68519c7da45039ccd017113cbd40dda2cf412a" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(ulong i1, ulong i2);</source>
          <target state="translated">void [] &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（ulong i1、ulong i2）;</target>
        </trans-unit>
        <trans-unit id="70d936638ed5801292c17757052ceb53a39739ed" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;read&quot;&gt;read&lt;/strong&gt;(R)(R name, size_t upTo = size_t.max)</source>
          <target state="translated">void [] &lt;strong id=&quot;read&quot;&gt;read&lt;/strong&gt;（R）（R name、size_t upTo = size_t.max）</target>
        </trans-unit>
        <trans-unit id="660a9cfce962414ddb93d25259958aa80c936c5d" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;read&quot;&gt;read&lt;/strong&gt;(R)(auto ref R name, size_t upTo = size_t.max)</source>
          <target state="translated">void [] &lt;strong id=&quot;read&quot;&gt;read&lt;/strong&gt;（R）（auto ref R name、size_t upTo = size_t.max）</target>
        </trans-unit>
        <trans-unit id="81fb11cb0a9025a79182aabadca4a832499db727" translate="yes" xml:space="preserve">
          <source>void[] &lt;strong id=&quot;uncompress&quot;&gt;uncompress&lt;/strong&gt;(const(void)[] srcbuf, size_t destlen = 0u, int winbits = 15);</source>
          <target state="translated">void [] &lt;strong id=&quot;uncompress&quot;&gt;uncompress&lt;/strong&gt;（const（void）[] srcbuf、size_t destlen = 0u、int winbits = 15）;</target>
        </trans-unit>
        <trans-unit id="68d0c60da4561ca06ec6b76b15a304e92da2eedd" translate="yes" xml:space="preserve">
          <source>vptrs for any interfaces implemented by this class in left to right, most to least derived, order</source>
          <target state="translated">このクラスで実装されている任意のインターフェイスの vptrs を、左から右、最も派生したものから最も派生していないものへと順に並べています。</target>
        </trans-unit>
        <trans-unit id="847dd100d6b26b5d04ddd9e09b5ad5c6734ed2d6" translate="yes" xml:space="preserve">
          <source>vtable to use</source>
          <target state="translated">使用するテーブル</target>
        </trans-unit>
        <trans-unit id="b7194d9ec4601ab2891fc26d12a29f2ff756c2e4" translate="yes" xml:space="preserve">
          <source>vtbl if !=NULL, fill it in newinstance !=0 means all entries must be filled in by members of cd, not members of any base classes of cd.</source>
          <target state="translated">vtbl !=NULLならば、それを埋める newinstance !=0 ならば、すべてのエントリは cd のメンバによって埋められなければならず、 cd のどの基底クラスのメンバによっても埋められないことを意味します。</target>
        </trans-unit>
        <trans-unit id="aff024fe4ab0fece4091de044c58c9ae4233383a" translate="yes" xml:space="preserve">
          <source>w</source>
          <target state="translated">w</target>
        </trans-unit>
        <trans-unit id="383fd7bf84aa027bdc40159c5d7c5805664a8eb2" translate="yes" xml:space="preserve">
          <source>warning</source>
          <target state="translated">warning</target>
        </trans-unit>
        <trans-unit id="dd1ffe12e2d9c411af13390b5d998ec80ab9b2dd" translate="yes" xml:space="preserve">
          <source>warnings about the program should be displayed with this level.</source>
          <target state="translated">プログラムに関する警告は、このレベルで表示する必要があります。</target>
        </trans-unit>
        <trans-unit id="9b8e8fbffff979ab309cdf98036cbdfcbf81c81f" translate="yes" xml:space="preserve">
          <source>watchOS</source>
          <target state="translated">watchOS</target>
        </trans-unit>
        <trans-unit id="146b5dae12284acb165c37a9e39cd9753cbc537e" translate="yes" xml:space="preserve">
          <source>wc</source>
          <target state="translated">wc</target>
        </trans-unit>
        <trans-unit id="a9591f88e52f917132216ae0478bd81088ba9dcf" translate="yes" xml:space="preserve">
          <source>wchar (16bit - 2x ubyte)</source>
          <target state="translated">wchar (16bit-2xubyte)</target>
        </trans-unit>
        <trans-unit id="2e7747b81dc655f1c44b7e65beec97e914e41aea" translate="yes" xml:space="preserve">
          <source>we want to write the mixin expansion file also on error, but there are too many ways to terminate dmd (e.g. fatal() which calls exit(EXIT_FAILURE)), so we can't rely on scope(exit) ... in tryMain() actually being executed so we add atexit(&amp;amp;flushMixins); for those fatal exits (with the GC still valid)</source>
          <target state="translated">エラー時にもミックスイン拡張ファイルを書きたいのですが、dmdを終了する方法が多すぎるため（exit（EXIT_FAILURE）を呼び出すfatal（）など）、try（）でscope（exit）...に依存できません（）実際に実行されているので、atexit（＆flushMixins）;を追加します。それらの致命的な出口（GCはまだ有効）</target>
        </trans-unit>
        <trans-unit id="a110e6b9a361653a042e3f5dfbac4c6105693789" translate="yes" xml:space="preserve">
          <source>what</source>
          <target state="translated">what</target>
        </trans-unit>
        <trans-unit id="9285d94ed6a7cfd976b182e0be75e27727174df4" translate="yes" xml:space="preserve">
          <source>what &lt;code&gt;target&lt;/code&gt; references.  If &lt;code&gt;source&lt;/code&gt; is or contains a union or &lt;code&gt;void[n]&lt;/code&gt;, then there may be either false positives or false negatives:  &lt;code&gt;doesPointTo&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt; if it is absolutely certain &lt;code&gt;source&lt;/code&gt; points to &lt;code&gt;target&lt;/code&gt;. It may produce false negatives, but never false positives. This function should be prefered when trying to validate input data.  &lt;code&gt;mayPointTo&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; if it is absolutely certain &lt;code&gt;source&lt;/code&gt; does not point to &lt;code&gt;target&lt;/code&gt;. It may produce false positives, but never false negatives. This function should be prefered for defensively choosing a code path.</source>
          <target state="translated">どの &lt;code&gt;target&lt;/code&gt; 参照するか。 &lt;code&gt;source&lt;/code&gt; がユニオンまたは &lt;code&gt;void[n]&lt;/code&gt; であるか、それを含む場合、誤 &lt;code&gt;doesPointTo&lt;/code&gt; または誤検知のいずれかが発生する可能性があります。 &lt;code&gt;target&lt;/code&gt; への絶対に特定の &lt;code&gt;source&lt;/code&gt; ポイントである場合、doesPointToは &lt;code&gt;true&lt;/code&gt; を返します。誤検知が発生する可能性がありますが、誤検知は発生しません。この関数は、入力データを検証しようとするときに優先する必要があります。 &lt;code&gt;source&lt;/code&gt; が &lt;code&gt;target&lt;/code&gt; 指していないことが絶対に確実な場合、 &lt;code&gt;mayPointTo&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; を返します。誤検知が発生する可能性がありますが、誤検知は発生しません。この関数は、コードパスを防御的に選択するために優先する必要があります。</target>
        </trans-unit>
        <trans-unit id="3c9af3500efd11c1a4b6436d52d32ef16d386233" translate="yes" xml:space="preserve">
          <source>what &lt;code&gt;target&lt;/code&gt; references.  If &lt;code&gt;source&lt;/code&gt; is or contains a union, then there may be either false positives or false negatives:  &lt;code&gt;doesPointTo&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt; if it is absolutely certain &lt;code&gt;source&lt;/code&gt; points to &lt;code&gt;target&lt;/code&gt;. It may produce false negatives, but never false positives. This function should be prefered when trying to validate input data.  &lt;code&gt;mayPointTo&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; if it is absolutely certain &lt;code&gt;source&lt;/code&gt; does not point to &lt;code&gt;target&lt;/code&gt;. It may produce false positives, but never false negatives. This function should be prefered for defensively choosing a code path.</source>
          <target state="translated">どの &lt;code&gt;target&lt;/code&gt; 参照するか。場合は &lt;code&gt;source&lt;/code&gt; あるか、組合が含まれている場合、偽陽性または偽陰性のいずれかがあるかもしれません： &lt;code&gt;doesPointTo&lt;/code&gt; が返され &lt;code&gt;true&lt;/code&gt; それは絶対に確かである場合は &lt;code&gt;source&lt;/code&gt; にポイント &lt;code&gt;target&lt;/code&gt; 。偽陰性を生成する可能性がありますが、偽陽性はありません。この関数は、入力データを検証するときに推奨されます。 &lt;code&gt;mayPointTo&lt;/code&gt; は、 &lt;code&gt;source&lt;/code&gt; が &lt;code&gt;target&lt;/code&gt; 指していないことが確実である場合に &lt;code&gt;false&lt;/code&gt; を返します。誤検知が発生する可能性がありますが、誤検知は発生しません。この機能は、コードパスを防御的に選択するために推奨されます。</target>
        </trans-unit>
        <trans-unit id="aa377031c07ad545902198ff99fd1bfe2d557dff" translate="yes" xml:space="preserve">
          <source>what @P will expand to</source>
          <target state="translated">何を展開するのか</target>
        </trans-unit>
        <trans-unit id="c12469ebcaed79baeb4f3295c3a156e5c2a55364" translate="yes" xml:space="preserve">
          <source>what array to append to, taken as a reference</source>
          <target state="translated">どの配列に追加するか</target>
        </trans-unit>
        <trans-unit id="5a66ceb8916f1b98aa2c7c91df3928371cd5405d" translate="yes" xml:space="preserve">
          <source>what array to initialize</source>
          <target state="translated">何の配列を初期化するか</target>
        </trans-unit>
        <trans-unit id="d5b790026cb89e743a44b22b9f18c055816c31c1" translate="yes" xml:space="preserve">
          <source>what data the array should be initialized with</source>
          <target state="translated">配列をどのようなデータで初期化するか</target>
        </trans-unit>
        <trans-unit id="bf89cb8db3d44ce8232b5852d61713a4327f73c7" translate="yes" xml:space="preserve">
          <source>what data to construct the array with</source>
          <target state="translated">どのようなデータで配列を構築するか</target>
        </trans-unit>
        <trans-unit id="0d7d2e4153564b15feb81f16b681b5e3c82dd19a" translate="yes" xml:space="preserve">
          <source>what module the hook is located in</source>
          <target state="translated">フックがどのモジュールにあるか</target>
        </trans-unit>
        <trans-unit id="722f96e0084af4639a08d3bd8d83044d9617da3e" translate="yes" xml:space="preserve">
          <source>what should be appended</source>
          <target state="translated">添えるべきもの</target>
        </trans-unit>
        <trans-unit id="c71dae3d7f1b2ee2726dcaecd6e604badecf9f19" translate="yes" xml:space="preserve">
          <source>what the hook does</source>
          <target state="translated">フックが何をするか</target>
        </trans-unit>
        <trans-unit id="4e12f8991c35ae14fd8bf73683f412df8f67f4c5" translate="yes" xml:space="preserve">
          <source>what this message means</source>
          <target state="translated">このメッセージの意味</target>
        </trans-unit>
        <trans-unit id="2e8105da539277e8e1b5362e641c405d5509b9ef" translate="yes" xml:space="preserve">
          <source>when found, the &lt;code&gt;const(JSONValue)*&lt;/code&gt; that matches to the key, otherwise &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">見つかった場合、キーに一致する &lt;code&gt;const(JSONValue)*&lt;/code&gt; 。それ以外の場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e34c2eaae5e1d7f1a2695fe6bd52902a8790d000" translate="yes" xml:space="preserve">
          <source>when speed is more important than accuracy</source>
          <target state="translated">速さよりも精度を重視する場合</target>
        </trans-unit>
        <trans-unit id="46148cc3b4d2b3ac8073f14b0cba7f25ffff54bd" translate="yes" xml:space="preserve">
          <source>where</source>
          <target state="translated">where</target>
        </trans-unit>
        <trans-unit id="e0f00f5e2afb8ef93b9459b5c11c26a00cf88913" translate="yes" xml:space="preserve">
          <source>where &lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt; evaluates to a class reference or struct instance. Within the with body the referenced object is searched first for identifier symbols.</source>
          <target state="translated">どこ&lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;発現は&lt;/i&gt;&lt;/a&gt;クラス参照または構造体のインスタンスに評価されます。with body内では、参照されるオブジェクトが最初にIDシンボルを検索されます。</target>
        </trans-unit>
        <trans-unit id="24d9e510e612f8773cb23940931fbf36e70a24b3" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;&amp;lt;Framework&amp;gt;&lt;/code&gt; is the name of the framework to link with, without the &lt;code&gt;.framework&lt;/code&gt; extension. The two &lt;code&gt;-L&lt;/code&gt; flags are required because the linker expects a space between the &lt;code&gt;-framework&lt;/code&gt; flag and the name of the framework. DMD cannot handle this and will instead interpret the name of the framework as a separate flag.</source>
          <target state="translated">ここで、 &lt;code&gt;&amp;lt;Framework&amp;gt;&lt;/code&gt; は、 &lt;code&gt;.framework&lt;/code&gt; 拡張子を付けずにリンクするフレームワークの名前です。リンカは &lt;code&gt;-framework&lt;/code&gt; フラグとフレームワークの名前の間にスペースを想定しているため、2つの &lt;code&gt;-L&lt;/code&gt; フラグが必要です。DMDはこれを処理できず、代わりにフレームワークの名前を別個のフラグとして解釈します。</target>
        </trans-unit>
        <trans-unit id="a1d602d806b2751baeaf4da7bdf5e0ffaec9c575" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;n&lt;/code&gt; will be the index of the current value, and &lt;code&gt;state&lt;/code&gt; will be an opaque state vector that can be indexed with array-indexing notation &lt;code&gt;state[i]&lt;/code&gt;, where valid values of &lt;code&gt;i&lt;/code&gt; range from &lt;code&gt;(n - 1)&lt;/code&gt; to &lt;code&gt;(n - State.length)&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;n&lt;/code&gt; は現在の値のインデックスであり、 &lt;code&gt;state&lt;/code&gt; は不透明な状態ベクトルであり、配列インデックス表記 &lt;code&gt;state[i]&lt;/code&gt; でインデックスを付けることができます。ここで、 &lt;code&gt;i&lt;/code&gt; の有効な値の範囲は &lt;code&gt;(n - 1)&lt;/code&gt; 〜 &lt;code&gt;(n - State.length)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92c734a2903353c9b61c67378312a9c9a59c9279" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;opAssign&lt;/code&gt; is a member function of S:</source>
          <target state="translated">ここで、 &lt;code&gt;opAssign&lt;/code&gt; はSのメンバー関数です。</target>
        </trans-unit>
        <trans-unit id="1548b7ba587c51d3bce52a48cb96b8cf111c72e3" translate="yes" xml:space="preserve">
          <source>where elem0 starts 16 bytes after the first byte.</source>
          <target state="translated">ここで elem0 は最初のバイトの後 16 バイトから始まります。</target>
        </trans-unit>
        <trans-unit id="e5ac85bf2edfab1e42f35865fd998750bc983a62" translate="yes" xml:space="preserve">
          <source>where the &lt;code&gt;is&lt;/code&gt; fields are</source>
          <target state="translated">どこ &lt;code&gt;is&lt;/code&gt; フィールドがあります</target>
        </trans-unit>
        <trans-unit id="7eb34603eb8f204c96d23894374197202047cbe9" translate="yes" xml:space="preserve">
          <source>where the initial function call to &lt;code&gt;getArray&lt;/code&gt; is only executed once.</source>
          <target state="translated">&lt;code&gt;getArray&lt;/code&gt; への最初の関数呼び出しは1回だけ実行されます。</target>
        </trans-unit>
        <trans-unit id="3cf5eb280609e647fcd7f1c020e9aea244ab3aed" translate="yes" xml:space="preserve">
          <source>where the return goes</source>
          <target state="translated">帰り道</target>
        </trans-unit>
        <trans-unit id="cf581f3c9fb4a8a7d2ebcda4f2916aefd16c304e" translate="yes" xml:space="preserve">
          <source>where to start looking for the enclosing function</source>
          <target state="translated">どこから囲い関数を探せばいいのか</target>
        </trans-unit>
        <trans-unit id="408472c0d00d1fa0ee7df5631f850fea42f8f0e8" translate="yes" xml:space="preserve">
          <source>where to store result</source>
          <target state="translated">結果の格納場所</target>
        </trans-unit>
        <trans-unit id="a286fd5871cc17a7f998d89622d4726a12ec1659" translate="yes" xml:space="preserve">
          <source>where to store the assignment expressions</source>
          <target state="translated">代入式を格納する場所</target>
        </trans-unit>
        <trans-unit id="f7770dc5d640ae26abcced4aa248ce041de99ba0" translate="yes" xml:space="preserve">
          <source>where to write it</source>
          <target state="translated">かきかた</target>
        </trans-unit>
        <trans-unit id="365862a50c0682caa8baa6f30edca76e3e5f81ed" translate="yes" xml:space="preserve">
          <source>where:</source>
          <target state="translated">where:</target>
        </trans-unit>
        <trans-unit id="94a20b0333fcbe85f74be6ea6bfb5ca5067a6119" translate="yes" xml:space="preserve">
          <source>whereas a static array is declared as:</source>
          <target state="translated">と宣言されているのに対し、静的配列は</target>
        </trans-unit>
        <trans-unit id="d9f0a41407164c6aa08d6e4f75d7e83302f57ec1" translate="yes" xml:space="preserve">
          <source>whether a leading underscore is added to a symbol</source>
          <target state="translated">先頭のアンダースコアが記号に追加されるかどうか</target>
        </trans-unit>
        <trans-unit id="9432592ccca59321589a2a32083acc6817868197" translate="yes" xml:space="preserve">
          <source>whether delimiter is included or not in the results</source>
          <target state="translated">区切り文字が結果に含まれているかどうか</target>
        </trans-unit>
        <trans-unit id="e91f9df855d75fcec87227fd8156cf7f6c87c11c" translate="yes" xml:space="preserve">
          <source>whether filespec comparisons are sensitive or not; defaults to &lt;code&gt;CaseSensitive.osDefault&lt;/code&gt;</source>
          <target state="translated">filespec比較が機密かどうか; デフォルトは &lt;code&gt;CaseSensitive.osDefault&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ef32780a85420180b9db91c81aaf7f3d321df693" translate="yes" xml:space="preserve">
          <source>whether the feature is still in use</source>
          <target state="translated">機能がまだ使われているかどうか</target>
        </trans-unit>
        <trans-unit id="250696d47f381932ab5774f2279cfafd42bca3b2" translate="yes" xml:space="preserve">
          <source>whether to fully qualify types.</source>
          <target state="translated">型を完全に修飾するかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="334b37613b8eee3e70b08d5c22bbbd68184f56fc" translate="yes" xml:space="preserve">
          <source>whether to preserve the file attributes</source>
          <target state="translated">ファイルの属性を保存するかどうか</target>
        </trans-unit>
        <trans-unit id="99ce5ffa45569b238d710e7d224317ec9e17d988" translate="yes" xml:space="preserve">
          <source>whether to throw an exception or return a CurlCode on error</source>
          <target state="translated">エラー時に例外をスローするか、CurlCodeを返すか。</target>
        </trans-unit>
        <trans-unit id="718f6c25add18ea8d3a6370c0e4b87efa4e4e465" translate="yes" xml:space="preserve">
          <source>which aggregate this is for</source>
          <target state="translated">どっちのためのものか</target>
        </trans-unit>
        <trans-unit id="b0f71a54271423cdfb97ba9623995c3201868657" translate="yes" xml:space="preserve">
          <source>which element(s) to remove</source>
          <target state="translated">どの要素を削除するか</target>
        </trans-unit>
        <trans-unit id="29d644819c70d4b13b5e4fbbb8a910a95e752d8c" translate="yes" xml:space="preserve">
          <source>which gives the output:</source>
          <target state="translated">これは出力を与えます。</target>
        </trans-unit>
        <trans-unit id="b766f7c57df56536532cef0e4fb1de4379e14cb0" translate="yes" xml:space="preserve">
          <source>which is 0x1.99999ap-3. Using the hex constant:</source>
          <target state="translated">これは 0x1.99999ap-3 です。16進数を使って</target>
        </trans-unit>
        <trans-unit id="53ea0a0c64a37183693d42aa40e1f97cdc12c154" translate="yes" xml:space="preserve">
          <source>which is a scope or</source>
          <target state="translated">どれが範囲であるか</target>
        </trans-unit>
        <trans-unit id="cc81a06a417041080d93a2378641c20ac0ef4865" translate="yes" xml:space="preserve">
          <source>which is equivalent to:</source>
          <target state="translated">に相当する。</target>
        </trans-unit>
        <trans-unit id="7a3fb5dcb6f736c1868d9f3097bc477bff88c400" translate="yes" xml:space="preserve">
          <source>which is meant to correspond with the following C++ declaration:</source>
          <target state="translated">これは、以下の C++宣言に対応することを意味します。</target>
        </trans-unit>
        <trans-unit id="fc5b4c2d4274daff9a2f2b13e4f1b75bc5f9eaea" translate="yes" xml:space="preserve">
          <source>which language threw the exception</source>
          <target state="translated">何語</target>
        </trans-unit>
        <trans-unit id="e7413c496e200ec5db0b260243050798c7726415" translate="yes" xml:space="preserve">
          <source>which must be large enough to hold the result.</source>
          <target state="translated">は、結果を保持するのに十分な大きさでなければなりません。</target>
        </trans-unit>
        <trans-unit id="99c16e7d13d5e5df076271fc43ca71919374d7b2" translate="yes" xml:space="preserve">
          <source>which prints:</source>
          <target state="translated">印刷される。</target>
        </trans-unit>
        <trans-unit id="19f9cb38df72b65d126cfd4ad2f033fea6056ad0" translate="yes" xml:space="preserve">
          <source>which produces the same result.</source>
          <target state="translated">を使っても同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="f6eb8eea32e21427b88dc26260f0981ba8972730" translate="yes" xml:space="preserve">
          <source>which range to choose, must be less than the number of ranges</source>
          <target state="translated">どの範囲を選択するかは、範囲の数よりも小さくなければなりません。</target>
        </trans-unit>
        <trans-unit id="0ad4d54ef876c60ed4df6ac213894d9e56fe7754" translate="yes" xml:space="preserve">
          <source>which range to choose: &lt;code&gt;r1&lt;/code&gt; if &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;r2&lt;/code&gt; otherwise</source>
          <target state="translated">選択する範囲： &lt;code&gt;true&lt;/code&gt; の場合は &lt;code&gt;r1&lt;/code&gt; 、それ以外の場合は &lt;code&gt;r2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e4699f5cdbf5495200a9a0c742c57fca77d7f29b" translate="yes" xml:space="preserve">
          <source>which target to compile for (set by &lt;code&gt;setTarget()&lt;/code&gt;)</source>
          <target state="translated">コンパイルするターゲット（ &lt;code&gt;setTarget()&lt;/code&gt; で設定）</target>
        </trans-unit>
        <trans-unit id="848c145e7caccc5794c2d2291d310f5214e93767" translate="yes" xml:space="preserve">
          <source>which would print:</source>
          <target state="translated">が印刷されます。</target>
        </trans-unit>
        <trans-unit id="ce4915cc37d16a346ed5de7c5311cb2ad84fc9a6" translate="yes" xml:space="preserve">
          <source>whose elements consist entirely of types is called a type sequence or</source>
          <target state="translated">の要素がすべて型で構成されているものを型シーケンスと呼びます。</target>
        </trans-unit>
        <trans-unit id="3f4efbb562e6b8ecc5f9d46a6cb44cb1be990b43" translate="yes" xml:space="preserve">
          <source>whose elements consist entirely of values is called a value sequence or</source>
          <target state="translated">の要素がすべて値で構成されているものを値列と呼びます。</target>
        </trans-unit>
        <trans-unit id="37d41699bdee4fcb969ca499eb0f8b82c60d59cc" translate="yes" xml:space="preserve">
          <source>will</source>
          <target state="translated">will</target>
        </trans-unit>
        <trans-unit id="83a66ae5119b2291aa7f32a94d711cf85e1c0282" translate="yes" xml:space="preserve">
          <source>will all refer to the same instantiation. For example:</source>
          <target state="translated">はすべて同じインスタンス化を参照します。例えば</target>
        </trans-unit>
        <trans-unit id="e2aad0812de6d367e5b9eb5e14b45fe16458d653" translate="yes" xml:space="preserve">
          <source>will print 0. A non-const static variable's value cannot be propagated at compile time, so:</source>
          <target state="translated">const ではない静的変数の値はコンパイル時には伝搬されません。</target>
        </trans-unit>
        <trans-unit id="1a52222d47f2bc7448ce5894167f3ce4399e32d1" translate="yes" xml:space="preserve">
          <source>will print 2.98023e-09. Hex floating point constants can also be used when specific floating point bit patterns are needed that are unaffected by rounding. To find the hex value of 0.2f:</source>
          <target state="translated">は 2.98023e-09 と表示されます。16進浮動小数点定数は、丸めの影響を受けない特定の浮動小数点ビットパターンが必要な場合にも使用できます。0.2fの16進数値を求めるには、次のようになります。</target>
        </trans-unit>
        <trans-unit id="cc67bea7eae03fd4176045bad5bc9ff09dbc217b" translate="yes" xml:space="preserve">
          <source>will work, it will be inefficient. A more practical approach would be to minimize the number of resizes:</source>
          <target state="translated">が機能するかどうかはわかりませんが、非効率的なものになります。より現実的なアプローチは、リサイズの数を最小限にすることでしょう。</target>
        </trans-unit>
        <trans-unit id="1d4443a81793d57d8d9174085a8d9cd51922833e" translate="yes" xml:space="preserve">
          <source>with &lt;a href=&quot;statement#foreach-statement&quot;&gt;Foreach Statements&lt;/a&gt; or &lt;a href=&quot;statement#ForeachRangeStatement&quot;&gt;Foreach Range Statements&lt;/a&gt;. Foreach loops are easier to understand, less prone to error, and easier to refactor.</source>
          <target state="translated">&lt;a href=&quot;statement#foreach-statement&quot;&gt;foreachステートメント&lt;/a&gt;または&lt;a href=&quot;statement#ForeachRangeStatement&quot;&gt;foreachの範囲文&lt;/a&gt;。Foreachループは理解しやすく、エラーが発生しにくく、リファクタリングが容易です。</target>
        </trans-unit>
        <trans-unit id="02bbfc0f54f3913f169c4bd701906ea59677ffbb" translate="yes" xml:space="preserve">
          <source>with [</source>
          <target state="translated">と</target>
        </trans-unit>
        <trans-unit id="6f56568c31da2a2a5b1743af306c7a670878f24e" translate="yes" xml:space="preserve">
          <source>with all the Targets interfaces; i.e. it must provide concrete methods with compatible signatures of those in Targets.</source>
          <target state="translated">つまり、Targets のインターフェイスと互換性のあるシグネチャを持つ具体的なメソッドを提供しなければなりません。</target>
        </trans-unit>
        <trans-unit id="86d65834083e211553d0257bc107eeb3730a7393" translate="yes" xml:space="preserve">
          <source>with base &lt;code&gt;lambda&lt;/code&gt;. This means that an ungapped match adds 1 to the return value; a match with one gap in either string adds &lt;code&gt;lambda&lt;/code&gt; to the return value; ...; a match with a total of &lt;code&gt;n&lt;/code&gt; gaps in both strings adds &lt;code&gt;pow(lambda, n)&lt;/code&gt; to the return value. In the example above, we have 4 matches without gaps, 2 matches with one gap, and 1 match with three gaps. The latter match is (&lt;code&gt;&quot;Hello&quot;, &quot;world&quot;&lt;/code&gt;), which has two gaps in the first string and one gap in the second string, totaling to three gaps. Summing these up we get &lt;code&gt;4 + 2 * lambda + pow(lambda, 3)&lt;/code&gt;.</source>
          <target state="translated">ベース &lt;code&gt;lambda&lt;/code&gt; 。これは、ギャップのない一致が戻り値に1を追加することを意味します。どちらかの文字列に1つのギャップがあると、戻り値に &lt;code&gt;lambda&lt;/code&gt; が追加されます。 ...; 両方の文字列に合計 &lt;code&gt;n&lt;/code&gt; 個のギャップがある一致は、 &lt;code&gt;pow(lambda, n)&lt;/code&gt; を戻り値に追加します。上記の例では、ギャップのない4つの一致、1つのギャップのある2つの一致、3つのギャップのある1つの一致があります。後者の一致は（ &lt;code&gt;&quot;Hello&quot;, &quot;world&quot;&lt;/code&gt; ）で、最初の文字列に2つのギャップがあり、2番目の文字列に1つのギャップがあり、合計で3つのギャップになります。これらを合計すると、 &lt;code&gt;4 + 2 * lambda + pow(lambda, 3)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="0c303466efe4cbf12a616af1540bc1eb7aaeaf47" translate="yes" xml:space="preserve">
          <source>with the</source>
          <target state="translated">と一緒に</target>
        </trans-unit>
        <trans-unit id="515a934490674ed3d4af653e16d13f6c51562faa" translate="yes" xml:space="preserve">
          <source>with the data and known to the allocator. The table below documents the type of &lt;code&gt;preffix(b)&lt;/code&gt; and &lt;code&gt;affix(b)&lt;/code&gt; depending on the type of &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">データとアロケータに知られています。ドキュメント以下の表のタイプ &lt;code&gt;preffix(b)&lt;/code&gt; と &lt;code&gt;affix(b)&lt;/code&gt; の種類に応じて &lt;code&gt;b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f15a67ea5efce3ba356bb77f9d28b0bbf71ee207" translate="yes" xml:space="preserve">
          <source>with the obvious semantics. Any generated temporaries get cleaned up by the garbage collector (or by using &lt;code&gt;alloca()&lt;/code&gt;). Not only that, this works with any array not just a special String array.</source>
          <target state="translated">明らかなセマンティクスで。生成された一時ファイルは、ガベージコレクターによって（または &lt;code&gt;alloca()&lt;/code&gt; を使用して）クリーンアップされます。それだけでなく、これは特別なString配列だけでなく、どの配列でも機能します。</target>
        </trans-unit>
        <trans-unit id="4915759ae8ba217729f7a8c50d067b64342975ea" translate="yes" xml:space="preserve">
          <source>with the proviso that &lt;code&gt;T&lt;/code&gt; cannot be a static array.</source>
          <target state="translated">ただし、 &lt;code&gt;T&lt;/code&gt; を静的配列にすることはできません。</target>
        </trans-unit>
        <trans-unit id="09ba675e61f88627cae3376e568eb399ec50566a" translate="yes" xml:space="preserve">
          <source>with the same</source>
          <target state="translated">同じように</target>
        </trans-unit>
        <trans-unit id="efd918cb11380d50143ae4c90640d4fc202a52f7" translate="yes" xml:space="preserve">
          <source>with two parts:</source>
          <target state="translated">2つのパーツで</target>
        </trans-unit>
        <trans-unit id="d0b68688c8746db9503ac96319f0d0c603b6aa63" translate="yes" xml:space="preserve">
          <source>with type T2, i.e. it is an error if T1 is the same type as or a base class of T2.</source>
          <target state="translated">つまり、T1がT2と同じ型、またはT2の基底クラスである場合はエラーとなります。</target>
        </trans-unit>
        <trans-unit id="5d378606d5880ba3d47807a08549a6cb530ec32e" translate="yes" xml:space="preserve">
          <source>withPartial only has an effect if last element in the range doesn't have the full size</source>
          <target state="translated">withPartial は、範囲内の最後の要素がフルサイズでない場合にのみ効果があります。</target>
        </trans-unit>
        <trans-unit id="2ab5f28a09db67bb79b22bc2146960a1772d5977" translate="yes" xml:space="preserve">
          <source>within the &lt;code&gt;[ ]&lt;/code&gt; of an array declaration:</source>
          <target state="translated">配列宣言の &lt;code&gt;[ ]&lt;/code&gt; 内：</target>
        </trans-unit>
        <trans-unit id="0d4e654c613ea68bffeeab1587b7dbac44826c2b" translate="yes" xml:space="preserve">
          <source>without</source>
          <target state="translated">without</target>
        </trans-unit>
        <trans-unit id="8bd9292bb8976f84281c4c2b01d699aaa641f5e3" translate="yes" xml:space="preserve">
          <source>without a</source>
          <target state="translated">なくても</target>
        </trans-unit>
        <trans-unit id="613f706c3cd5fda1bb9ebe20de5aaa4e520b2fe8" translate="yes" xml:space="preserve">
          <source>work with Unicode. It exists as an optimization for the cases where Unicode processing is not necessary.</source>
          <target state="translated">は Unicode で動作します。Unicode処理が不要な場合の最適化として存在します。</target>
        </trans-unit>
        <trans-unit id="1c5ff97885b4f11341f269a68b6843a8ae1feb42" translate="yes" xml:space="preserve">
          <source>works, but:</source>
          <target state="translated">働きますが、しかし。</target>
        </trans-unit>
        <trans-unit id="c5ce11c73c3632bade72cca2e627d01bf4e88ac8" translate="yes" xml:space="preserve">
          <source>worst</source>
          <target state="translated">worst</target>
        </trans-unit>
        <trans-unit id="2ac833e592c040c0b8b091b01e3e206430f8c652" translate="yes" xml:space="preserve">
          <source>wrap creates an internal wrapper class which implements the interfaces in &lt;code&gt;Targets&lt;/code&gt; using the methods of &lt;code&gt;src&lt;/code&gt;, then returns a GC-allocated instance of it.</source>
          <target state="translated">wrapは、 &lt;code&gt;src&lt;/code&gt; のメソッドを使用して &lt;code&gt;Targets&lt;/code&gt; のインターフェースを実装する内部ラッパークラスを作成し、GCで割り当てられたインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="30fb47c8fe8d46d131be0f380dac534b5b9692aa" translate="yes" xml:space="preserve">
          <source>wrap does not support interfaces which take their own type as either a parameter type or return type in any of its methods.</source>
          <target state="translated">wrap は、パラメータ型や戻り値の型として独自の型を取るインターフェースをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="ab81327465418bea80ef462fe05947d4d51802b8" translate="yes" xml:space="preserve">
          <source>wrapper object returned by &lt;a href=&quot;#wrap&quot;&gt;&lt;code&gt;wrap&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#wrap&quot;&gt; &lt;code&gt;wrap&lt;/code&gt; が&lt;/a&gt;返すラッパーオブジェクト</target>
        </trans-unit>
        <trans-unit id="1b1c4a825d02a1bd02ff72e94203806a190d51d8" translate="yes" xml:space="preserve">
          <source>write pointer references for typed data to the object file a class type is considered to mean a reference to a class instance</source>
          <target state="translated">型付きデータのポインタ参照をオブジェクトファイルに書き込む クラスの型は、クラスインスタンスへの参照を意味すると考えられます。</target>
        </trans-unit>
        <trans-unit id="fd5d73697622811e5a90ebe2becaaba1fe36276b" translate="yes" xml:space="preserve">
          <source>write pointer references for typed data to the object file a class type is considered to mean the instance, not a reference</source>
          <target state="translated">型付きデータのポインタ参照をオブジェクトファイルに書き込む クラスの型は、参照ではなくインスタンスを意味すると考えられています。</target>
        </trans-unit>
        <trans-unit id="136dfaec68d2119709bac3db0fcf338dea78fc5b" translate="yes" xml:space="preserve">
          <source>writeFetch</source>
          <target state="translated">writeFetch</target>
        </trans-unit>
        <trans-unit id="aa10e46a8f242956b06948e80d202f63a5467d1c" translate="yes" xml:space="preserve">
          <source>writes:</source>
          <target state="translated">writes:</target>
        </trans-unit>
        <trans-unit id="147fcb518bc92661555014e11ae927000732adf1" translate="yes" xml:space="preserve">
          <source>wrongly spelled word</source>
          <target state="translated">誤字</target>
        </trans-unit>
        <trans-unit id="fcee4bb5a4856fa378463fcda1a6f7e7fd27ff40" translate="yes" xml:space="preserve">
          <source>wstring &lt;strong id=&quot;toUTF16&quot;&gt;toUTF16&lt;/strong&gt;(S)(S s)</source>
          <target state="translated">wstring &lt;strong id=&quot;toUTF16&quot;&gt;toUTF16&lt;/strong&gt;（S）（S s）</target>
        </trans-unit>
        <trans-unit id="057a4ea39155e66a2f323223550b59716a7108db" translate="yes" xml:space="preserve">
          <source>wstring &lt;strong id=&quot;wtext&quot;&gt;wtext&lt;/strong&gt;(T...)(T args)</source>
          <target state="translated">wstring &lt;strong id=&quot;wtext&quot;&gt;wtext&lt;/strong&gt;（T ...）（T args）</target>
        </trans-unit>
        <trans-unit id="332785d7a6b38bd27b1ff0c8b826ef18bb22063c" translate="yes" xml:space="preserve">
          <source>www mmm dd hh:mm:ss yyyy</source>
          <target state="translated">wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww</target>
        </trans-unit>
        <trans-unit id="11f6ad8ec52a2984abaafd7c3b516503785c2072" translate="yes" xml:space="preserve">
          <source>x</source>
          <target state="translated">x</target>
        </trans-unit>
        <trans-unit id="ffe7881cbe4afcfc468cdef5bb669ef024b81aab" translate="yes" xml:space="preserve">
          <source>x &amp;gt; y</source>
          <target state="translated">x&amp;gt; y</target>
        </trans-unit>
        <trans-unit id="6de0af04270d8dccf3a43d7ce200bfe8db3a5f10" translate="yes" xml:space="preserve">
          <source>x &amp;lt;= y</source>
          <target state="translated">x &amp;lt;= y</target>
        </trans-unit>
        <trans-unit id="4b28fb6d85a99e8114e6548054168ceef6339290" translate="yes" xml:space="preserve">
          <source>x - y</source>
          <target state="translated">X-Y</target>
        </trans-unit>
        <trans-unit id="6f71465182938dee928f347242f55a2773057ef5" translate="yes" xml:space="preserve">
          <source>x is &lt;code&gt;in&lt;/code&gt;, y is &lt;code&gt;out&lt;/code&gt;, z is &lt;code&gt;ref&lt;/code&gt;, and q is none.</source>
          <target state="translated">xは &lt;code&gt;in&lt;/code&gt; 、yは &lt;code&gt;out&lt;/code&gt; 、zは &lt;code&gt;ref&lt;/code&gt; 、qはnoneです。</target>
        </trans-unit>
        <trans-unit id="c8915f97226fb071430c0019c0a280b58a11d1b5" translate="yes" xml:space="preserve">
          <source>x raised to the power of n. If n is negative the result is 1 / pow(x, -n), which is calculated as integer division with remainder. This may result in a division by zero error.  If both x and n are 0, the result is 1.</source>
          <target state="translated">n が負の場合、結果は 1/pow(x,-n)となり、これは剰余を含む整数除算として計算されます。これは0の誤差による除算になることがあります。x と n の両方が 0 の場合、結果は 1 となります。</target>
        </trans-unit>
        <trans-unit id="9f9f6769827ae1eb0ac2b7b114fdae5bd0f41026" translate="yes" xml:space="preserve">
          <source>x, y</source>
          <target state="translated">XY</target>
        </trans-unit>
        <trans-unit id="108d15ce958095a8520d37bd28b6b4f27690bd1c" translate="yes" xml:space="preserve">
          <source>x.re ST3 x.im ST2 y.re ST1 y.im ST0</source>
          <target state="translated">x.re ST3 x.im ST2 y.re ST1 y.im ST0</target>
        </trans-unit>
        <trans-unit id="4bc10d2c6c7a50a4de88e32a5a286362025d3a02" translate="yes" xml:space="preserve">
          <source>xFunc, void*</source>
          <target state="translated">xFunc,void*.</target>
        </trans-unit>
        <trans-unit id="6117cfe59759a73fa895617f28f9903bbf5a3274" translate="yes" xml:space="preserve">
          <source>xSqllog, void*</source>
          <target state="translated">xSqllog,void*.</target>
        </trans-unit>
        <trans-unit id="95cb0bfd2977c761298d9624e4b4d4c72a39974a" translate="yes" xml:space="preserve">
          <source>y</source>
          <target state="translated">y</target>
        </trans-unit>
        <trans-unit id="a2cff1a839b46f9a3da5bb0f76726dbfa81710a0" translate="yes" xml:space="preserve">
          <source>yaneurao, Walter Bright, Stewart Gordon</source>
          <target state="translated">yaneurao,ウォルター・ブライト,スチュワート・ゴードン</target>
        </trans-unit>
        <trans-unit id="77345d4d3d2847bf9869c527df6848dc6c82909e" translate="yes" xml:space="preserve">
          <source>years since 1900</source>
          <target state="translated">1900年</target>
        </trans-unit>
        <trans-unit id="fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0" translate="yes" xml:space="preserve">
          <source>yes</source>
          <target state="translated">yes</target>
        </trans-unit>
        <trans-unit id="1e1d0446effb4936f20a06a26e4ddeab24927139" translate="yes" xml:space="preserve">
          <source>yet terminated, this function differs from &lt;code&gt;wait&lt;/code&gt; in that does not wait for this to happen, but instead returns immediately. The &lt;code&gt;terminated&lt;/code&gt; field of the returned tuple will then be set to &lt;code&gt;false&lt;/code&gt;, while the &lt;code&gt;status&lt;/code&gt; field will always be 0 (zero). &lt;code&gt;wait&lt;/code&gt; or &lt;code&gt;tryWait&lt;/code&gt; should then be called again on the same &lt;code&gt;Pid&lt;/code&gt; at some later time; not only to get the exit code, but also to avoid the process becoming a &quot;zombie&quot; when it finally terminates. (See &lt;a href=&quot;#wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; for details).</source>
          <target state="translated">まだ終了しているが、この関数は、これが発生するのを待たずに、すぐに戻るという点で、 &lt;code&gt;wait&lt;/code&gt; とは異なります。返されたタプルの &lt;code&gt;terminated&lt;/code&gt; フィールドは &lt;code&gt;false&lt;/code&gt; に設定され、 &lt;code&gt;status&lt;/code&gt; フィールドは常に0（ゼロ）になります。その後、しばらくしてから同じ &lt;code&gt;Pid&lt;/code&gt; で &lt;code&gt;wait&lt;/code&gt; または &lt;code&gt;tryWait&lt;/code&gt; を再度呼び出す必要があります。終了コードを取得するだけでなく、プロセスが最終的に終了したときにプロセスが「ゾンビ」にならないようにします。（詳細については、&lt;a href=&quot;#wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="d8530abdbcc7d063acdc700df4d9f71fd4ca187c" translate="yes" xml:space="preserve">
          <source>yields 4</source>
          <target state="translated">収穫量4</target>
        </trans-unit>
        <trans-unit id="33acef415f20760e5ff41aa9a1bd7450915d7652" translate="yes" xml:space="preserve">
          <source>yields 4 (because 3 is an int)</source>
          <target state="translated">4が得られます(3はintなので</target>
        </trans-unit>
        <trans-unit id="5d3ebefbea1f4a866e49d14e323c4a231f266bd4" translate="yes" xml:space="preserve">
          <source>yields the floating point nan (Not A Number) value</source>
          <target state="translated">浮動小数点数の nan (Not A Number)値が得られます。</target>
        </trans-unit>
        <trans-unit id="f387a5d616a52f94913b8c0d5f986f2721c7c85a" translate="yes" xml:space="preserve">
          <source>yields the floating point nan value</source>
          <target state="translated">は浮動小数点数の nan 値を生成します。</target>
        </trans-unit>
        <trans-unit id="37c729243a45edbd78dee9faf80ac6d53530cb59" translate="yes" xml:space="preserve">
          <source>yields the string &quot;1 + 2&quot;</source>
          <target state="translated">は文字列 &quot;1+2&quot; を生成します。</target>
        </trans-unit>
        <trans-unit id="5e3357e75e2f5a0a08401318392cf816110afebf" translate="yes" xml:space="preserve">
          <source>yields the string &quot;i&quot;</source>
          <target state="translated">は文字列 &quot;i&quot; を生成します。</target>
        </trans-unit>
        <trans-unit id="19ac6011bb50fefe8ebb1cc38e81509bb479f369" translate="yes" xml:space="preserve">
          <source>yields the string &quot;int&quot;</source>
          <target state="translated">は文字列 &quot;int&quot; を返します。</target>
        </trans-unit>
        <trans-unit id="2ed6b8e8ba145da8cccbd9f2fbed1eda981690fc" translate="yes" xml:space="preserve">
          <source>zero terminated string for pass on to the FTP server when asked for &quot;account&quot; info</source>
          <target state="translated">account&quot; 情報を求められたときに FTP サーバーに渡すための終端文字列をゼロにします。</target>
        </trans-unit>
        <trans-unit id="39d23766c92b4aa019ae3e211d61618299c5c0f0" translate="yes" xml:space="preserve">
          <source>zip archives that contain overlapping records</source>
          <target state="translated">重複するレコードを含む zip アーカイブ</target>
        </trans-unit>
        <trans-unit id="5fbd1ece2c67912e4a86923f6812d932e9be1e72" translate="yes" xml:space="preserve">
          <source>{n,m}</source>
          <target state="translated">{n,m}</target>
        </trans-unit>
        <trans-unit id="e17f8daafc956debd4e1e5d2cd9d77a70cfb701c" translate="yes" xml:space="preserve">
          <source>{n,m}?</source>
          <target state="translated">{n,m}?</target>
        </trans-unit>
        <trans-unit id="9673ab1da205dc59b0b8a0775a2930156296900d" translate="yes" xml:space="preserve">
          <source>{n,}</source>
          <target state="translated">{n,}</target>
        </trans-unit>
        <trans-unit id="8b47bac8524bbe108b32a1df0a1bbdc6a865c32f" translate="yes" xml:space="preserve">
          <source>{n,}?</source>
          <target state="translated">{n,}?</target>
        </trans-unit>
        <trans-unit id="411c9b42c13c917634dfc49494d1c642dcdef1e1" translate="yes" xml:space="preserve">
          <source>{n}</source>
          <target state="translated">{n}</target>
        </trans-unit>
        <trans-unit id="3eb416223e9e69e6bb8ee19793911ad1ad2027d8" translate="yes" xml:space="preserve">
          <source>|</source>
          <target state="translated">|</target>
        </trans-unit>
        <trans-unit id="ef6eff7b85fad231201794bcb63e5c36d88d4354" translate="yes" xml:space="preserve">
          <source>| &amp;lt; 1.0</source>
          <target state="translated">| &amp;lt;1.0</target>
        </trans-unit>
        <trans-unit id="9f8614f89c242c99d3bfb1858b0acd7bf9f730ad" translate="yes" xml:space="preserve">
          <source>| Name | D Escape Sequence | Unicode Code Point | |---------------------|-------------------|--------------------| | Line feed | &lt;code&gt;\n&lt;/code&gt; | &lt;code&gt;U+000A&lt;/code&gt; | | Line tabulation | &lt;code&gt;\v&lt;/code&gt; | &lt;code&gt;U+000B&lt;/code&gt; | | Form feed | &lt;code&gt;\f&lt;/code&gt; | &lt;code&gt;U+000C&lt;/code&gt; | | Carriage return | &lt;code&gt;\r&lt;/code&gt; | &lt;code&gt;U+000D&lt;/code&gt; | | Next line | | &lt;code&gt;U+0085&lt;/code&gt; | | Line separator | | &lt;code&gt;U+2028&lt;/code&gt; | | Paragraph separator | | &lt;code&gt;U+2029&lt;/code&gt; |</source>
          <target state="translated">| 名前| Dエスケープシーケンス| Unicodeコードポイント| | --------------------- | ------------------- | ------- ------------- | | 改行| &lt;code&gt;\n&lt;/code&gt; | &lt;code&gt;U+000A&lt;/code&gt; | | ライン集計| &lt;code&gt;\v&lt;/code&gt; | &lt;code&gt;U+000B&lt;/code&gt; | | フォームフィード| &lt;code&gt;\f&lt;/code&gt; | &lt;code&gt;U+000C&lt;/code&gt; | | キャリッジリターン| &lt;code&gt;\r&lt;/code&gt; | &lt;code&gt;U+000D&lt;/code&gt; | | 次の行| | &lt;code&gt;U+0085&lt;/code&gt; | | 行区切り| | &lt;code&gt;U+2028&lt;/code&gt; | | 段落区切り| | &lt;code&gt;U+2029&lt;/code&gt; |</target>
        </trans-unit>
        <trans-unit id="44fd9a1d8a0f81ab0685e80398db95b625dadcc5" translate="yes" xml:space="preserve">
          <source>|=</source>
          <target state="translated">|=</target>
        </trans-unit>
        <trans-unit id="060d24a54ce076caf1eee50a1f2e93c5b61055c5" translate="yes" xml:space="preserve">
          <source>|N*elemsize|padding|elem0|elem1|...|elemN-1|emptyspace|sentinelbyte|</source>
          <target state="translated">|N*elemsize|padding|elem0|elem1|...|elemN-1|emptyspace|sentinelbyte|</target>
        </trans-unit>
        <trans-unit id="cd969fc4d774cac6dc44cfac60b67e832b218612" translate="yes" xml:space="preserve">
          <source>|elem0|elem1|elem2|...|elemN-1|emptyspace|N*elemsize|</source>
          <target state="translated">|elem0|elem1|elem2|...|elemN-1|emptyspace|N*elemsize|</target>
        </trans-unit>
        <trans-unit id="ec5bd99a9e496694fd83b3896f14dab5d547d06e" translate="yes" xml:space="preserve">
          <source>|x|</source>
          <target state="translated">|x|</target>
        </trans-unit>
        <trans-unit id="8b8dc84b4f03abb71b4afedb19c9306a744ed459" translate="yes" xml:space="preserve">
          <source>|x| &amp;gt; 1</source>
          <target state="translated">| x | &amp;gt; 1</target>
        </trans-unit>
        <trans-unit id="369d335ed8414816c12810585d038251d5e969ba" translate="yes" xml:space="preserve">
          <source>|x| &amp;lt; 1</source>
          <target state="translated">| x | &amp;lt;1</target>
        </trans-unit>
        <trans-unit id="fb3c6e4de85bd9eae26fdc63e75f10a7f39e850e" translate="yes" xml:space="preserve">
          <source>~</source>
          <target state="translated">~</target>
        </trans-unit>
        <trans-unit id="3af51ed593899ba2f4345e83a99fcb232cae0245" translate="yes" xml:space="preserve">
          <source>✔</source>
          <target state="translated">✔</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
