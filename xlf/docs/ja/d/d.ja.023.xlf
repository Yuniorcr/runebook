<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="c47fc2f4dad35c7e07dd9ed3c2d29ef84ea7cc74" translate="yes" xml:space="preserve">
          <source>Operand swap</source>
          <target state="translated">オペランドスワップ</target>
        </trans-unit>
        <trans-unit id="a2b8c4621b34e3c27498c6c8832719e530f09634" translate="yes" xml:space="preserve">
          <source>Operands</source>
          <target state="translated">Operands</target>
        </trans-unit>
        <trans-unit id="27ca5c239713ff8f578577200fe8706af71773d3" translate="yes" xml:space="preserve">
          <source>Operates on all threads currently being tracked by the system. The result of deleting any Thread object is undefined. Note that threads passed to the callback might no longer run (see &lt;code&gt;Thread.&lt;/code&gt;&lt;a href=&quot;#isRunning&quot;&gt;&lt;code&gt;isRunning&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">現在システムによって追跡されているすべてのスレッドで動作します。Threadオブジェクトを削除した結果は未定義です。コールバックに渡されたスレッドがもはや（参照実行可能性があることを注意 &lt;code&gt;Thread.&lt;/code&gt; &lt;a href=&quot;#isRunning&quot;&gt; &lt;code&gt;isRunning&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1ceccd51e36cd099776635232a115dbf0c8ddbbd" translate="yes" xml:space="preserve">
          <source>Operates on all threads currently tracked by this object.</source>
          <target state="translated">このオブジェクトによって現在追跡されているすべてのスレッドを操作します。</target>
        </trans-unit>
        <trans-unit id="5fab1578993e130d7e185a769a8e7d10165a4ce2" translate="yes" xml:space="preserve">
          <source>Operating system error code.</source>
          <target state="translated">オペレーティングシステムのエラーコード。</target>
        </trans-unit>
        <trans-unit id="8f5dbd7c97b01eae443b983fcb062faa3e56f50c" translate="yes" xml:space="preserve">
          <source>Operating system.</source>
          <target state="translated">オペレーティングシステム。</target>
        </trans-unit>
        <trans-unit id="5cc46d2eac1c8b0a848f98a788fe90ffd7043281" translate="yes" xml:space="preserve">
          <source>Operation NULL</source>
          <target state="translated">操作NULL</target>
        </trans-unit>
        <trans-unit id="7c206b387173fa63aaa15f71f0e946eceea43069" translate="yes" xml:space="preserve">
          <source>Operation Savepoint Name</source>
          <target state="translated">オペレーション・セイブポイント名</target>
        </trans-unit>
        <trans-unit id="dc2db8ab152ae696d77bdc87d45929deb94de5dc" translate="yes" xml:space="preserve">
          <source>Operation terminated by sqlite3_interrupt()</source>
          <target state="translated">sqlite3_interrupt()で処理を終了しました。</target>
        </trans-unit>
        <trans-unit id="d0e687b079fb70f2208d1f8d2c75d64d74925496" translate="yes" xml:space="preserve">
          <source>Operator</source>
          <target state="translated">Operator</target>
        </trans-unit>
        <trans-unit id="b2c30e50457298624b96ccb9dc57c58e04b9cd54" translate="yes" xml:space="preserve">
          <source>Operator &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; support.</source>
          <target state="translated">演算子 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; サポート。</target>
        </trans-unit>
        <trans-unit id="c056556bd6106804af09418fad3513c58dd3ce25" translate="yes" xml:space="preserve">
          <source>Operator &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; support.</source>
          <target state="translated">演算子 &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; サポート。</target>
        </trans-unit>
        <trans-unit id="f299c884a708c75ca75144e361f0c5cf282b235f" translate="yes" xml:space="preserve">
          <source>Operator Overloading</source>
          <target state="translated">オペレータのオーバーロード</target>
        </trans-unit>
        <trans-unit id="658fcb31752209aa14d15f945731a7c73323992e" translate="yes" xml:space="preserve">
          <source>Operator overload. Check for operator overload, if so, replace with function call.</source>
          <target state="translated">演算子のオーバーロード。演算子のオーバーロードをチェックし、オーバーロードしている場合は関数呼び出しに置き換えます。</target>
        </trans-unit>
        <trans-unit id="0881519d8f6e3133862fd99cd3f26c97bd8c5241" translate="yes" xml:space="preserve">
          <source>Operator overloading for a number of operators can be done at the same time. For example, if only the + or - operators are supported:</source>
          <target state="translated">複数の演算子に対する演算子のオーバーロードは、同時に行うことができます。例えば、+または-演算子のみをサポートしている場合などです。</target>
        </trans-unit>
        <trans-unit id="a79cd265a6b171f4cb1a52d3f639986ca2f05ce4" translate="yes" xml:space="preserve">
          <source>Operator overloading is accomplished by rewriting operators whose operands are class or struct objects into calls to specially named members. No additional syntax is used.</source>
          <target state="translated">演算子のオーバーロードは、オペランドがクラスまたは構造体オブジェクトである演算子を、特別に命名されたメンバへの呼び出しに書き換えることで達成されます。追加の構文は使用されません。</target>
        </trans-unit>
        <trans-unit id="eacd76902a11d7e0e3df7b94d293ad81fec39f59" translate="yes" xml:space="preserve">
          <source>Operator sets &lt;code&gt;value&lt;/code&gt; for element of JSON object by &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">演算子は、JSONオブジェクトの要素の &lt;code&gt;value&lt;/code&gt; を &lt;code&gt;key&lt;/code&gt; で設定します。</target>
        </trans-unit>
        <trans-unit id="942d310c4eece12c0b6eb787bdd18914ed43a921" translate="yes" xml:space="preserve">
          <source>Operators not listed are not supported at all.</source>
          <target state="translated">記載されていないオペレータは全くサポートされていません。</target>
        </trans-unit>
        <trans-unit id="105f14774b9dc4fd12fb78b69309a3c1d98f98f5" translate="yes" xml:space="preserve">
          <source>Optical Character Recognition</source>
          <target state="translated">光学式文字認識</target>
        </trans-unit>
        <trans-unit id="4635b8a94bf8d2a8157ac8f48eae6326d6299a58" translate="yes" xml:space="preserve">
          <source>Optimisation hints for assembly code.</source>
          <target state="translated">アセンブリコードの最適化のヒント。</target>
        </trans-unit>
        <trans-unit id="6c185f29401844f73973bbf456cd1a89e77f21fa" translate="yes" xml:space="preserve">
          <source>Optimization is an optional pass that attempts to rewrite the program in a semantically equivalent, more performant, version.</source>
          <target state="translated">最適化はオプションのパスで、意味的に等価な、よりパフォーマンスの高いバージョンにプログラムを書き換えようとします。</target>
        </trans-unit>
        <trans-unit id="2a03d18f56e01d18b8faf1e7c5daa696b62b96a8" translate="yes" xml:space="preserve">
          <source>Optimization is an optional pass that tries to rewrite the program in a semantically equivalent, but faster executing, version.</source>
          <target state="translated">最適化はオプションのパスで、意味的には同等だが実行速度が速いバージョンにプログラムを書き換えようとします。</target>
        </trans-unit>
        <trans-unit id="e7750f07400d449f606de01fdfb52aae1fd21fce" translate="yes" xml:space="preserve">
          <source>Optimize common special case alignSize(2)</source>
          <target state="translated">共通の特殊ケースを最適化 alignSize(2)</target>
        </trans-unit>
        <trans-unit id="af308e3b0590ac25521d185bafdd2fc15fc1c44b" translate="yes" xml:space="preserve">
          <source>Optimize common special case alignSize(4)</source>
          <target state="translated">共通の特殊ケースを最適化 alignSize(4)</target>
        </trans-unit>
        <trans-unit id="e4a193f0de6267241861c2d42d5a4c6cc2a9b046" translate="yes" xml:space="preserve">
          <source>Option[] &lt;code&gt;opt&lt;/code&gt;</source>
          <target state="translated">Option [] &lt;code&gt;opt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d1a750a57d5ed1164a68ce6fe48eb75219856e9" translate="yes" xml:space="preserve">
          <source>Option[] &lt;strong id=&quot;options&quot;&gt;options&lt;/strong&gt;;</source>
          <target state="translated">Option [] &lt;strong id=&quot;options&quot;&gt;オプション&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="7d85f397e20f87376d5a77c0d5a7c922b7e4be12" translate="yes" xml:space="preserve">
          <source>Optional 4 char array to put the resulting Soundex characters into. If null, the return value buffer will be allocated on the heap.</source>
          <target state="translated">オプションで、結果として得られるSoundex文字を入れる4文字配列。null の場合、戻り値バッファはヒープ上に確保されます。</target>
        </trans-unit>
        <trans-unit id="d00ac75ec10fc459fe79ad686a447767b4094900" translate="yes" xml:space="preserve">
          <source>Optional Parentheses</source>
          <target state="translated">オプションの括弧</target>
        </trans-unit>
        <trans-unit id="038e563ee642144905db080ffd8ae1bf79d33e01" translate="yes" xml:space="preserve">
          <source>Optional arguments used for initializing the created object. If not present, the object is default constructed.</source>
          <target state="translated">作成されたオブジェクトの初期化に使用されるオプションの引数。存在しない場合、オブジェクトはデフォルトで構築されます。</target>
        </trans-unit>
        <trans-unit id="fdcdde29a4f281b516f2ccc0b86b05e8a9f79eaa" translate="yes" xml:space="preserve">
          <source>Optional initial value for the new type.</source>
          <target state="translated">オプションで、新しいタイプの初期値を指定します。</target>
        </trans-unit>
        <trans-unit id="6d59ad8cf4d8ef8301a7aaf80bd895b2ba04a3f4" translate="yes" xml:space="preserve">
          <source>Optional message to output on test failure.</source>
          <target state="translated">テスト失敗時に出力するオプションのメッセージ。</target>
        </trans-unit>
        <trans-unit id="f30ef832425c5a7898fe008b0347b287bbe11286" translate="yes" xml:space="preserve">
          <source>Optional message to output on test failure. If msg is empty, and the thrown exception has a non-empty msg field, the exception's msg field will be output on test failure.</source>
          <target state="translated">テスト失敗時に出力するオプションのメッセージ。msgが空で、スローされた例外に空でないmsgフィールドがある場合、例外のmsgフィールドはテスト失敗時に出力されます。</target>
        </trans-unit>
        <trans-unit id="e22e0e7dfcab51210e2c1324ad28b24761a1cc15" translate="yes" xml:space="preserve">
          <source>Optional parentheses are not applied to delegates or function pointers.</source>
          <target state="translated">オプションの括弧は、デリゲートや関数ポインタには適用されません。</target>
        </trans-unit>
        <trans-unit id="092c132b404aff7b3204e00316cdb117ca456851" translate="yes" xml:space="preserve">
          <source>Optional string with wildcards, such as  &quot;*.d&quot;. When present, it is used to filter the results by their file name. The supported wildcard strings are described under &lt;a href=&quot;std_path#globMatch&quot;&gt;&lt;code&gt; std.path.globMatch&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">「* .d」などのワイルドカードを含むオプションの文字列。存在する場合は、ファイル名で結果をフィルタリングするために使用されます。サポートされるワイルドカード文字列は、&lt;a href=&quot;std_path#globMatch&quot;&gt; &lt;code&gt; std.path.globMatch&lt;/code&gt; で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="5003de64d53361cf50d9ac6aa9cf977dcc7c6c5a" translate="yes" xml:space="preserve">
          <source>Optional, used to create multiple unique types which are based on the same origin type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">オプション、同じ起点タイプ &lt;code&gt;T&lt;/code&gt; に基づく複数の一意のタイプを作成するために使用されます</target>
        </trans-unit>
        <trans-unit id="d4544162ebd3cc17060bab5af2189803c9093909" translate="yes" xml:space="preserve">
          <source>Optionally a string literal or manifest constant can be used to provide additional information in the deprecation message.</source>
          <target state="translated">オプションで、文字列リテラルまたはマニフェスト定数を使用して、非推奨メッセージの追加情報を提供することができます。</target>
        </trans-unit>
        <trans-unit id="3fcf22d9a17be7e076745071fa3d0b3148122d91" translate="yes" xml:space="preserve">
          <source>Options Terminator</source>
          <target state="translated">オプションターミネーター</target>
        </trans-unit>
        <trans-unit id="e7e6cd13772f7d3104b04440c2ae1e1e64c992b1" translate="yes" xml:space="preserve">
          <source>Options for &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt; ranges (below).</source>
          <target state="translated">&lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; &lt;/a&gt;範囲のオプション（下記）。</target>
        </trans-unit>
        <trans-unit id="84ad00011b95818e19ed121e47fc0a5a9da924de" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;StatsCollector&lt;/code&gt; defined below. Each enables during compilation one specific counter, statistic, or other piece of information.</source>
          <target state="translated">以下に定義する &lt;code&gt;StatsCollector&lt;/code&gt; のオプション。それぞれが、コンパイル中に1つの特定のカウンター、統計、またはその他の情報を有効にします。</target>
        </trans-unit>
        <trans-unit id="2c3004f998d37dff4cdd5bfe04bd588d9585293d" translate="yes" xml:space="preserve">
          <source>Options for the &lt;a href=&quot;#FrontTransversal&quot;&gt;&lt;code&gt;FrontTransversal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Transversal&quot;&gt;&lt;code&gt;Transversal&lt;/code&gt;&lt;/a&gt; ranges (below).</source>
          <target state="translated">&lt;a href=&quot;#FrontTransversal&quot;&gt; &lt;code&gt;FrontTransversal&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#Transversal&quot;&gt; &lt;code&gt;Transversal&lt;/code&gt; &lt;/a&gt;範囲のオプション（下記）。</target>
        </trans-unit>
        <trans-unit id="e73dd1bfc6de45893094d39a0b8c52fd15136773" translate="yes" xml:space="preserve">
          <source>Options regarding auto-initialization of a &lt;code&gt;RefCounted&lt;/code&gt; object (see the definition of &lt;code&gt;RefCounted&lt;/code&gt; below).</source>
          <target state="translated">&lt;code&gt;RefCounted&lt;/code&gt; オブジェクトの自動初期化に関するオプション（以下の &lt;code&gt;RefCounted&lt;/code&gt; の定義を参照）。</target>
        </trans-unit>
        <trans-unit id="fa0185ff06c2b5e2963d7b06c5172c58d05f4dc8" translate="yes" xml:space="preserve">
          <source>Options supported by -check</source>
          <target state="translated">チェックでサポートされているオプション</target>
        </trans-unit>
        <trans-unit id="d52742178e23e949c60c1d5e040ad60b9387322e" translate="yes" xml:space="preserve">
          <source>Options supported by -checkaction=</source>
          <target state="translated">checkaction=でサポートされているオプション</target>
        </trans-unit>
        <trans-unit id="363dac403a2a83e25797a3d9c9ee22f4611eaac4" translate="yes" xml:space="preserve">
          <source>Options supported by -extern-std</source>
          <target state="translated">EXTERN-STD でサポートされているオプション</target>
        </trans-unit>
        <trans-unit id="60f84bb401de02d865a716cc0a5e1289035f7821" translate="yes" xml:space="preserve">
          <source>Options with multiple names</source>
          <target state="translated">複数の名前を持つオプション</target>
        </trans-unit>
        <trans-unit id="19c159a25d07edf6bd220009e32de0cdee356e75" translate="yes" xml:space="preserve">
          <source>Options[] &lt;strong id=&quot;opts&quot;&gt;opts&lt;/strong&gt;;</source>
          <target state="translated">オプション[] &lt;strong id=&quot;opts&quot;&gt;opts&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="edace25305092565e308d9146174a0a2938df434" translate="yes" xml:space="preserve">
          <source>Or Expressions</source>
          <target state="translated">または表現</target>
        </trans-unit>
        <trans-unit id="4f2ce19ebdea19c7f2e73deccf0f96bba95a0a64" translate="yes" xml:space="preserve">
          <source>OrOr Expressions</source>
          <target state="translated">OrOr式</target>
        </trans-unit>
        <trans-unit id="2386e5c9e2c936e53415bc77759add97d38ae88d" translate="yes" xml:space="preserve">
          <source>OrOrExpression</source>
          <target state="translated">OrOrExpression</target>
        </trans-unit>
        <trans-unit id="7845f6223be30b5297bf59f283a22a525e6c7aca" translate="yes" xml:space="preserve">
          <source>Order Of Evaluation</source>
          <target state="translated">評価の順序</target>
        </trans-unit>
        <trans-unit id="972733ae150ac5a0d4141ce4b0e555b5149be952" translate="yes" xml:space="preserve">
          <source>Order did not match that found in the input</source>
          <target state="translated">入力された順序と一致しませんでした</target>
        </trans-unit>
        <trans-unit id="15526c521fbddfecba053d2b9bd9f4f2d40a4fcf" translate="yes" xml:space="preserve">
          <source>Order of Static Construction</source>
          <target state="translated">静的施工の順番</target>
        </trans-unit>
        <trans-unit id="c3fec94dee877456604b578bf17a9f503a832939" translate="yes" xml:space="preserve">
          <source>Order of Static Construction within a Module</source>
          <target state="translated">モジュール内の静的構造の順序</target>
        </trans-unit>
        <trans-unit id="b07e4919a91d40cd506173a6c238d70b4d2b5a5c" translate="yes" xml:space="preserve">
          <source>Order of Static Destruction</source>
          <target state="translated">静的破壊順序</target>
        </trans-unit>
        <trans-unit id="03669ae8e7b2e4ca8ca78be6c322b755b43c766a" translate="yes" xml:space="preserve">
          <source>Order of Unit tests</source>
          <target state="translated">ユニットテストの順番</target>
        </trans-unit>
        <trans-unit id="c478a3b39efae7d0d0a63d69e6666965308c26b2" translate="yes" xml:space="preserve">
          <source>Order the provided members to minimize size while preserving alignment. Alignment is not always optimal for 80-bit reals, nor for structs declared as align(1).</source>
          <target state="translated">アラインメントを維持しながらサイズを最小化するために、提供されたメンバを順序付けします。アライメントは、80 ビットの実数や align(1)として宣言された構造体では必ずしも最適ではありません。</target>
        </trans-unit>
        <trans-unit id="c3d3d13178dc609ab5facd250c988ab12f4ba7bb" translate="yes" xml:space="preserve">
          <source>Ordering comparison used by the &quot;&amp;lt;&quot;, &quot;&amp;lt;=&quot;, &quot;&amp;gt;&quot;, and &quot;&amp;gt;=&quot; operators. In case comparison is not sensible between the held value and &lt;code&gt;rhs&lt;/code&gt;, an exception is thrown.</source>
          <target state="translated">&quot;&amp;lt;&quot;、 &quot;&amp;lt;=&quot;、 &quot;&amp;gt;&quot;、および &quot;&amp;gt; =&quot;演算子で使用される順序比較。保持された値と &lt;code&gt;rhs&lt;/code&gt; の比較が適切でない場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="483f66f6d26b7cb776d522769f431003c3f9bfb5" translate="yes" xml:space="preserve">
          <source>Organizes one contiguous chunk of memory in equal-size blocks and tracks allocation status at the cost of one bit per block.</source>
          <target state="translated">メモリの1つの連続したチャンクを同じサイズのブロックに整理し、1ブロックあたり1ビットのコストで割り当て状況を追跡します。</target>
        </trans-unit>
        <trans-unit id="0111ae8997cfd3379765a4a4e0e5efb36400d9f8" translate="yes" xml:space="preserve">
          <source>OriginalType!E &lt;strong id=&quot;asOriginalType&quot;&gt;asOriginalType&lt;/strong&gt;(E)(E value)</source>
          <target state="translated">OriginalType！E &lt;strong id=&quot;asOriginalType&quot;&gt;asOriginalType&lt;/strong&gt;（E）（E value）</target>
        </trans-unit>
        <trans-unit id="c10643b85fbfbd4fbb63e61c52588993e2ffbfa5" translate="yes" xml:space="preserve">
          <source>Oriya</source>
          <target state="translated">Oriya</target>
        </trans-unit>
        <trans-unit id="42cb2600c161bf7bf85310fb50b63266488059bf" translate="yes" xml:space="preserve">
          <source>Osmanya</source>
          <target state="translated">Osmanya</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="9aaa73eee9cf49714bdd9258a2956f335d4eeec0" translate="yes" xml:space="preserve">
          <source>Other &lt;a href=&quot;https://python.org/sigs/doc-sig/otherlangs.html&quot;&gt;documentation tools&lt;/a&gt;</source>
          <target state="translated">その他の&lt;a href=&quot;https://python.org/sigs/doc-sig/otherlangs.html&quot;&gt;ドキュメントツール&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bd6313338475c9071259ef3238ae97dbbd791a4d" translate="yes" xml:space="preserve">
          <source>Other Posix Systems</source>
          <target state="translated">その他のポシックスシステム</target>
        </trans-unit>
        <trans-unit id="5e7b0a895f475b6f28b441a465421ad29d8e0322" translate="yes" xml:space="preserve">
          <source>Other date types</source>
          <target state="translated">その他の日付タイプ</target>
        </trans-unit>
        <trans-unit id="26fa36aba9abb20b0516eee338a081a64cf71284" translate="yes" xml:space="preserve">
          <source>Other early CPUs (Nx586, AMD K5, K6, Centaur C3, Transmeta, Cyrix, Rise) were mostly in-order.</source>
          <target state="translated">他の初期のCPU(Nx586、AMD K5、K6、Centaur C3、Transmeta、Cyrix、Rise)はほぼ順当だった。</target>
        </trans-unit>
        <trans-unit id="b65c561a3ed0f4f2558514b426246a99c9d341a5" translate="yes" xml:space="preserve">
          <source>Other functionality</source>
          <target state="translated">その他の機能</target>
        </trans-unit>
        <trans-unit id="f3ce46edeed2ba5081d15973ee7b8fd78b33a5e9" translate="yes" xml:space="preserve">
          <source>Other non-binary properties (once supported) follow the same notation - &lt;code&gt;unicode.propertyName.propertyValue&lt;/code&gt; for compile-time checked access and &lt;code&gt;unicode.propertyName(propertyValue)&lt;/code&gt; for run-time checked one.</source>
          <target state="translated">（一度サポート）その他の非バイナリのプロパティは、同様の表記に従ってください- &lt;code&gt;unicode.propertyName.propertyValue&lt;/code&gt; コンパイル時にアクセスしてチェックするために &lt;code&gt;unicode.propertyName(propertyValue)&lt;/code&gt; 1をチェックし、実行時のために。</target>
        </trans-unit>
        <trans-unit id="315b2283e70ed5c9b3a32d956573fa52bcf2327a" translate="yes" xml:space="preserve">
          <source>Other_Alphabetic</source>
          <target state="translated">Other_Alphabetic</target>
        </trans-unit>
        <trans-unit id="3576c30ed2a7456b454a6df0f1d356a6a5b81854" translate="yes" xml:space="preserve">
          <source>Other_Default_Ignorable_Code_Point</source>
          <target state="translated">Other_Default_Ignorable_Code_Point</target>
        </trans-unit>
        <trans-unit id="b8a4e9e3315108565913f1214d70e6ab06305fea" translate="yes" xml:space="preserve">
          <source>Other_Grapheme_Extend</source>
          <target state="translated">Other_Grapheme_Extend</target>
        </trans-unit>
        <trans-unit id="1eafede4d641ad77c5e7696525a5726a3b1e25e2" translate="yes" xml:space="preserve">
          <source>Other_ID_Continue</source>
          <target state="translated">Other_ID_Continue</target>
        </trans-unit>
        <trans-unit id="20de61891c461dc1d0740d06823ad7c655241aae" translate="yes" xml:space="preserve">
          <source>Other_ID_Start</source>
          <target state="translated">Other_ID_Start</target>
        </trans-unit>
        <trans-unit id="28d3f28453d83a9d4de7288e2adc6832cacb17eb" translate="yes" xml:space="preserve">
          <source>Other_Letter</source>
          <target state="translated">Other_Letter</target>
        </trans-unit>
        <trans-unit id="01c4b64406b7699bf365d87632f6ecac32fc9e72" translate="yes" xml:space="preserve">
          <source>Other_Lowercase</source>
          <target state="translated">Other_Lowercase</target>
        </trans-unit>
        <trans-unit id="85b8947a3c801b69f490df8abb132c7f38d3815e" translate="yes" xml:space="preserve">
          <source>Other_Math</source>
          <target state="translated">Other_Math</target>
        </trans-unit>
        <trans-unit id="05fb43438f8add5bc5e520c7162cafcff5568073" translate="yes" xml:space="preserve">
          <source>Other_Number</source>
          <target state="translated">Other_Number</target>
        </trans-unit>
        <trans-unit id="6a6c035052d2fcea5bd0994c7e06947db784b476" translate="yes" xml:space="preserve">
          <source>Other_Punctuation</source>
          <target state="translated">Other_Punctuation</target>
        </trans-unit>
        <trans-unit id="ecc700e8bf50c329823e4432669e2e0f13941414" translate="yes" xml:space="preserve">
          <source>Other_Symbol</source>
          <target state="translated">Other_Symbol</target>
        </trans-unit>
        <trans-unit id="8f9fafd248962959d08eb0fc0b6409cc5836d1a0" translate="yes" xml:space="preserve">
          <source>Other_Uppercase</source>
          <target state="translated">Other_Uppercase</target>
        </trans-unit>
        <trans-unit id="45d9c732939826aeca03102c6b35f994d91fb0c2" translate="yes" xml:space="preserve">
          <source>Others will be added as they make sense and new implementations appear.</source>
          <target state="translated">他にも意味のあるものや新しい実装が出てくるので追加していきます。</target>
        </trans-unit>
        <trans-unit id="1b108b5414366434a06640c1cfb85f59ec1fb998" translate="yes" xml:space="preserve">
          <source>Otherwise if set to &lt;code&gt;CheckDns.yes&lt;/code&gt;, isEmail performs DNS checking.</source>
          <target state="translated">それ以外の場合、CheckDns.yesに設定する &lt;code&gt;CheckDns.yes&lt;/code&gt; 、isEmailはDNSチェックを実行します。</target>
        </trans-unit>
        <trans-unit id="4feb189ac05b2fa8c8a6112ed39f3df4fa83a432" translate="yes" xml:space="preserve">
          <source>Otherwise if set to &lt;code&gt;OpenRight.no&lt;/code&gt;, then the interval is closed to the right (last element included).</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;OpenRight.no&lt;/code&gt; に設定すると、間隔は右に閉じます（最後の要素が含まれます）。</target>
        </trans-unit>
        <trans-unit id="631af2017187f4c3448d0a2a40a3b795c4cc9643" translate="yes" xml:space="preserve">
          <source>Otherwise if set to &lt;code&gt;SortOutput.yes&lt;/code&gt;, the output should be sorted.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;SortOutput.yes&lt;/code&gt; に設定すると、出力がソートされます。</target>
        </trans-unit>
        <trans-unit id="49e81a26951cdd4a294c1a637fe5c96588287a18" translate="yes" xml:space="preserve">
          <source>Otherwise the expressions &lt;code&gt;a.opEquals(b)&lt;/code&gt; and &lt;code&gt;b.opEquals(a)&lt;/code&gt; are tried. If both resolve to the same &lt;code&gt;opEquals&lt;/code&gt; function, then the expression is rewritten to be &lt;code&gt;a.opEquals(b)&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合は、式 &lt;code&gt;a.opEquals(b)&lt;/code&gt; および &lt;code&gt;b.opEquals(a)&lt;/code&gt; が試行されます。両方が同じ &lt;code&gt;opEquals&lt;/code&gt; 関数に解決される場合、式は &lt;code&gt;a.opEquals(b)&lt;/code&gt; に書き換えられます。</target>
        </trans-unit>
        <trans-unit id="fad059114d46d5cf546ef929c09cba6cc729966b" translate="yes" xml:space="preserve">
          <source>Otherwise, a &lt;a href=&quot;expression#CastExpression&quot;&gt;&lt;i&gt;CastExpression&lt;/i&gt;&lt;/a&gt; can be used to force a conversion when an implicit version is disallowed, but this cannot be done in &lt;code&gt;@safe&lt;/code&gt; code, and the correctness of it must be verified by the user.</source>
          <target state="translated">そうでない場合、&lt;a href=&quot;expression#CastExpression&quot;&gt;&lt;i&gt;CastExpression&lt;/i&gt;&lt;/a&gt;を使用して、暗黙的なバージョンが許可されていないときに変換を強制できますが、これは &lt;code&gt;@safe&lt;/code&gt; コードでは実行できず、ユーザーが正しいことを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="e27183018d554dc439f94eb91f969f3c9943015f" translate="yes" xml:space="preserve">
          <source>Otherwise, a new memory block of size &lt;code&gt;sz&lt;/code&gt; will be allocated as if by a call to &lt;code&gt;malloc&lt;/code&gt;, or the implementation may instead resize or shrink the memory block in place. The contents of the new memory block will be the same as the contents of the old memory block, up to the lesser of the new and old sizes.</source>
          <target state="translated">それ以外の場合、サイズ &lt;code&gt;sz&lt;/code&gt; の新しいメモリブロックは、 &lt;code&gt;malloc&lt;/code&gt; の呼び出しによるかのように割り当てられます。そうでない場合、実装は代わりにメモリブロックのサイズを変更または縮小します。新しいメモリブロックの内容は、新しいサイズと古いサイズの小さい方まで、古いメモリブロックの内容と同じになります。</target>
        </trans-unit>
        <trans-unit id="20322615ab9d65b2f51081694c4503aec51c6ded" translate="yes" xml:space="preserve">
          <source>Otherwise, an error results.</source>
          <target state="translated">そうでない場合はエラーになります。</target>
        </trans-unit>
        <trans-unit id="e0dc160c40a7011aff692c332c1e49596e1e4b69" translate="yes" xml:space="preserve">
          <source>Otherwise, append &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;base&lt;/code&gt; and return the result. If &lt;code&gt;base&lt;/code&gt; is not specified, the current working directory is used.</source>
          <target state="translated">それ以外の場合は、 &lt;code&gt;base&lt;/code&gt; &lt;code&gt;path&lt;/code&gt; を追加して結果を返します。 &lt;code&gt;base&lt;/code&gt; が指定されていない場合、現在の作業ディレクトリが使用されます。</target>
        </trans-unit>
        <trans-unit id="4cd7b69fd1f55506fef8b49f409733c40cf8d99e" translate="yes" xml:space="preserve">
          <source>Otherwise, append &lt;code&gt;path&lt;/code&gt; to the current working directory, which allocates memory.</source>
          <target state="translated">それ以外の場合は、メモリを割り当てる現在の作業ディレクトリへの &lt;code&gt;path&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="93d2d0917f1e44edec12baf0dd8089b83f8b9dfd" translate="yes" xml:space="preserve">
          <source>Otherwise, are formatted just as their type name.</source>
          <target state="translated">それ以外の場合は、そのタイプ名と同じようにフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="d3b40053dd280e0bf88f12f740348b76f024645a" translate="yes" xml:space="preserve">
          <source>Otherwise, both constructors are defined. The &lt;code&gt;data&lt;/code&gt;-based constructor assumes memory has been allocated with the parent allocator. The &lt;code&gt;capacity&lt;/code&gt;-based constructor uses &lt;code&gt;ParentAllocator&lt;/code&gt; to allocate an appropriate contiguous hunk of memory. Regardless of the constructor used, the destructor releases the memory by using &lt;code&gt;ParentAllocator.deallocate&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合は、両方のコンストラクタが定義されます。 &lt;code&gt;data&lt;/code&gt; ベースのコンストラクタは、メモリが親アロケータで割り当てられている前提としています。 &lt;code&gt;capacity&lt;/code&gt; ベースのコンストラクタは使用 &lt;code&gt;ParentAllocator&lt;/code&gt; をメモリの適切な連続塊を割り当てます。使用されるコンストラクターに関係なく、デストラクターは &lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; を使用してメモリーを解放します。</target>
        </trans-unit>
        <trans-unit id="98265553c41f7942d874dfa06e7085c989a0b6c9" translate="yes" xml:space="preserve">
          <source>Otherwise, elements are moved incrementally towards the front of &lt;code&gt;range&lt;/code&gt;; a given element is never moved several times, but more elements are moved than in the previous cases.</source>
          <target state="translated">それ以外の場合、要素は &lt;code&gt;range&lt;/code&gt; の先頭に向かって段階的に移動します。特定の要素が数回移動されることはありませんが、以前の場合よりも多くの要素が移動されます。</target>
        </trans-unit>
        <trans-unit id="d7b4269e42ae4fd84359bf3507bfdbea02d65c5e" translate="yes" xml:space="preserve">
          <source>Otherwise, if &lt;code&gt;S&lt;/code&gt; defines a postblit, the generated code for &lt;code&gt;opAssign&lt;/code&gt; is:</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;S&lt;/code&gt; がポストブリットを定義すると、opAssignの生成コードは &lt;code&gt;opAssign&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="34d83f38a3798f99d8cf552fcbf4e3fb59e56355" translate="yes" xml:space="preserve">
          <source>Otherwise, if &lt;code&gt;s == SwapStrategy.unstable &amp;amp;&amp;amp; isBidirectionalRange!Range &amp;amp;&amp;amp; hasLength!Range &amp;amp;&amp;amp; hasLvalueElements!Range&lt;/code&gt;, then elements are still moved from the end of the range, but time is spent on advancing between slots by repeated calls to &lt;code&gt;range.popFront&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;s == SwapStrategy.unstable &amp;amp;&amp;amp; isBidirectionalRange!Range &amp;amp;&amp;amp; hasLength!Range &amp;amp;&amp;amp; hasLvalueElements!Range&lt;/code&gt; 場合、要素は範囲の最後から移動されますが、 &lt;code&gt;range.popFront&lt;/code&gt; への繰り返しの呼び出しにより、スロット間の前進に時間が費やされます。</target>
        </trans-unit>
        <trans-unit id="ba7fb1afa41d072823200e973c8318d1043c883c" translate="yes" xml:space="preserve">
          <source>Otherwise, if set to &lt;code&gt;AllowDayOverflow.yes&lt;/code&gt;, then day overflow is allowed.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;AllowDayOverflow.yes&lt;/code&gt; に設定すると、日のオーバーフローが許可されます。</target>
        </trans-unit>
        <trans-unit id="be83c3911232bf57584017e6a89fc54168a20468" translate="yes" xml:space="preserve">
          <source>Otherwise, if set to &lt;code&gt;AutoStart.yes&lt;/code&gt;, then the StopWatch is started when it is constructed.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;AutoStart.yes&lt;/code&gt; に設定すると、ストップウォッチは構築時に開始されます。</target>
        </trans-unit>
        <trans-unit id="d43b8e9c68a2b3e8bf2cef3f5678116c8f717c33" translate="yes" xml:space="preserve">
          <source>Otherwise, if set to &lt;code&gt;AutoStart.yes&lt;/code&gt;, then the stopwatch is started when it is constructed.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;AutoStart.yes&lt;/code&gt; に設定すると、ストップウォッチは作成時に開始されます。</target>
        </trans-unit>
        <trans-unit id="10c743c1cc7b3a7cf0661dbb3eeb470fb9ca7f88" translate="yes" xml:space="preserve">
          <source>Otherwise, if set to &lt;code&gt;PopFirst.yes&lt;/code&gt;, then popFront is called before returning the range.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;PopFirst.yes&lt;/code&gt; に設定すると、範囲を返す前にpopFrontが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1dea9b190a18c52440448cc36e1cc9a993d73f06" translate="yes" xml:space="preserve">
          <source>Otherwise, set &lt;code&gt;overflow&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and return an unspecified value</source>
          <target state="translated">それ以外の場合は、 &lt;code&gt;overflow&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定し、未指定の値を返します</target>
        </trans-unit>
        <trans-unit id="d7ea80b1a0955b07a0a71599fa3c435b5c6f752e" translate="yes" xml:space="preserve">
          <source>Otherwise, set summarize to true, and runMain to false.</source>
          <target state="translated">それ以外の場合は、summaryizeをtrueに、runMainをfalseに設定します。</target>
        </trans-unit>
        <trans-unit id="df4b2321350bd78d5e59c9f4b65b664ab9f798a6" translate="yes" xml:space="preserve">
          <source>Otherwise, the garbage collector is called to immediately free the memory allocated for the class instance or struct instance.</source>
          <target state="translated">そうでなければ、ガベージコレクタが呼び出され、クラスインスタンスまたは構造体インスタンスに割り当てられたメモリを即座に解放します。</target>
        </trans-unit>
        <trans-unit id="51f2bf5052af0a341395b6e5f55714745316c9a3" translate="yes" xml:space="preserve">
          <source>Otherwise, the matching delimiter is the same as the delimiter character:</source>
          <target state="translated">そうでなければ、一致するデリミタはデリミタ文字と同じです。</target>
        </trans-unit>
        <trans-unit id="5e12d941f654871ede52074458d874bcdb81f831" translate="yes" xml:space="preserve">
          <source>Otherwise, the objects are formatted as input range.</source>
          <target state="translated">それ以外の場合は、オブジェクトは入力範囲としてフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="96b3aee374e1357ece2d5f44dff187e4382dceae" translate="yes" xml:space="preserve">
          <source>Otherwise, the operator first evaluates &lt;code&gt;auto result = opBinary!op(payload, rhs).payload&lt;/code&gt;, which is subject to the hooks in &lt;code&gt;opBinary&lt;/code&gt;. Then, if &lt;code&gt;result&lt;/code&gt; is less than &lt;code&gt;Checked!(T, Hook).min&lt;/code&gt; and if &lt;code&gt;Hook&lt;/code&gt; defines &lt;code&gt;onLowerBound&lt;/code&gt;, the payload is assigned from &lt;code&gt; hook.onLowerBound(result, min)&lt;/code&gt;. If &lt;code&gt;result&lt;/code&gt; is greater than &lt;code&gt;Checked!(T, Hook).max&lt;/code&gt; and if &lt;code&gt;Hook&lt;/code&gt; defines &lt;code&gt;onUpperBound&lt;/code&gt;, the payload is assigned from &lt;code&gt;hook.onUpperBound(result, min)&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合、オペレーターは最初に &lt;code&gt;auto result = opBinary!op(payload, rhs).payload&lt;/code&gt; を &lt;code&gt;opBinary&lt;/code&gt; ます。これはopBinaryのフックの影響を受けます。場合、 &lt;code&gt;result&lt;/code&gt; 以下で &lt;code&gt;Checked!(T, Hook).min&lt;/code&gt; 場合 &lt;code&gt;Hook&lt;/code&gt; 定義は &lt;code&gt;onLowerBound&lt;/code&gt; 、ペイロードから割り当てられ &lt;code&gt; hook.onLowerBound(result, min)&lt;/code&gt; 。場合 &lt;code&gt;result&lt;/code&gt; より大きい &lt;code&gt;Checked!(T, Hook).max&lt;/code&gt; 及び場合 &lt;code&gt;Hook&lt;/code&gt; 定義は &lt;code&gt;onUpperBound&lt;/code&gt; 、ペイロードから割り当てられ &lt;code&gt;hook.onUpperBound(result, min)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48528efcc3f9a77bb45e05946e171bb9ab922461" translate="yes" xml:space="preserve">
          <source>Otherwise, they are formatted like &lt;code&gt;Type(field1, filed2, ...)&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合は、 &lt;code&gt;Type(field1, filed2, ...)&lt;/code&gt; ようにフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="a6ad8c0de5c848abc87bb5a19ad55877fbb13f5f" translate="yes" xml:space="preserve">
          <source>Otherwise, walks the range through its length and returns the number of elements seen. Performes &amp;Omicron;(&lt;code&gt;n&lt;/code&gt;) evaluations of &lt;code&gt;range.empty&lt;/code&gt; and &lt;code&gt;range.popFront()&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the effective length of &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合は、範囲をその長さにわたってウォークし、表示された要素の数を返します。Performes&amp;Omicron;（ &lt;code&gt;n&lt;/code&gt; 個）の評価 &lt;code&gt;range.empty&lt;/code&gt; と &lt;code&gt;range.popFront()&lt;/code&gt; 、 &lt;code&gt;n&lt;/code&gt; 個の有効長である &lt;code&gt;range&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff8db6ada06f83227eed246c83cc3693d4063c57" translate="yes" xml:space="preserve">
          <source>Our label symbol, with vector to keep track of forward references.</source>
          <target state="translated">私たちのラベルシンボル、前方参照を追跡するためのベクター付き。</target>
        </trans-unit>
        <trans-unit id="84996582614366aed96d409996a95b59874ed607" translate="yes" xml:space="preserve">
          <source>Out of disk space.</source>
          <target state="translated">ディスクの空き容量がない</target>
        </trans-unit>
        <trans-unit id="8287615f2ac89aad252242dec878907206c5210b" translate="yes" xml:space="preserve">
          <source>Out of memory.</source>
          <target state="translated">記憶がない</target>
        </trans-unit>
        <trans-unit id="4ec60c716ead5ac12059fc839ab1f661a44d5058" translate="yes" xml:space="preserve">
          <source>OutBuffer &lt;code&gt;buf&lt;/code&gt;</source>
          <target state="translated">OutBuffer &lt;code&gt;buf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f0ab7a95451a4e0b671e325269d07a5d314844a6" translate="yes" xml:space="preserve">
          <source>OutBuffer provides a way to build up an array of bytes out of raw data. It is useful for things like preparing an array of bytes to write out to a file. OutBuffer's byte order is the format native to the computer. To control the byte order (endianness), use a class derived from OutBuffer. OutBuffer's internal buffer is allocated with the GC. Pointers stored into the buffer are scanned by the GC, but you have to ensure proper alignment, e.g. by using alignSize((void*).sizeof).</source>
          <target state="translated">OutBufferは、生データからバイトの配列を構築する方法を提供します。これは、ファイルに書き出すためにバイトの配列を準備するような場合に便利です。OutBufferのバイト順は、コンピュータのネイティブフォーマットです。バイトオーダー(エンディアン)を制御するには、OutBufferから派生したクラスを使用します。OutBuffer の内部バッファは GC で割り当てられます。バッファに格納されたポインタは GC によってスキャンされますが、例えば alignSize((void*).sizeof)を使用して適切な配置を確保する必要があります。</target>
        </trans-unit>
        <trans-unit id="d15970d277dc3b3ea6e3907fe5ae14f4e7d68498" translate="yes" xml:space="preserve">
          <source>OutBuffer* &lt;code&gt;buf&lt;/code&gt;</source>
          <target state="translated">OutBuffer * &lt;code&gt;buf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52d9787a72c9469cdbcb944e5fe679a9d46f4b4d" translate="yes" xml:space="preserve">
          <source>OutOfMemoryError on allocation failure.</source>
          <target state="translated">割り当て失敗でOutOfMemoryErrorが発生しました。</target>
        </trans-unit>
        <trans-unit id="7e451bc39b00e365a897773c4075f46ce2440988" translate="yes" xml:space="preserve">
          <source>Outbuffer &lt;strong id=&quot;objbuf&quot;&gt;objbuf&lt;/strong&gt;;</source>
          <target state="translated">アウトバッファ&lt;strong id=&quot;objbuf&quot;&gt;objbuf&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="2c747a01339ff37505e527737a9546e3714554ca" translate="yes" xml:space="preserve">
          <source>Output &lt;code&gt;ans&lt;/code&gt;</source>
          <target state="translated">出力 &lt;code&gt;ans&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d14ab80d73c6910ed8c82cf0b5de89687b958ffe" translate="yes" xml:space="preserve">
          <source>Output &lt;code&gt;output&lt;/code&gt;</source>
          <target state="translated">出力 &lt;code&gt;output&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e311d4b15d04097b72fdbeebaf0cb4db252e1942" translate="yes" xml:space="preserve">
          <source>Output is sent to this writer. Typical output writers include &lt;a href=&quot;std_array#Appender!string&quot;&gt;&lt;code&gt;std.array.Appender!string&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;std_stdio#LockingTextWriter&quot;&gt;&lt;code&gt;std.stdio.LockingTextWriter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">出力はこのライターに送信されます。典型的な出力ライターには&lt;a href=&quot;std_array#Appender!string&quot;&gt; &lt;code&gt;std.array.Appender!string&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;std_stdio#LockingTextWriter&quot;&gt; &lt;code&gt;std.stdio.LockingTextWriter&lt;/code&gt; があり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="9a955eff9acd789cc5203dc93f25956ae2aba50f" translate="yes" xml:space="preserve">
          <source>Output range which locks the file when created, and unlocks the file when it goes out of scope.</source>
          <target state="translated">作成時にファイルをロックし、範囲外になるとロックを解除する出力範囲。</target>
        </trans-unit>
        <trans-unit id="feaa8d97ca89d32a72e3374b3d9efe87224820f5" translate="yes" xml:space="preserve">
          <source>Output range.</source>
          <target state="translated">出力範囲。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="bd2c85794fdb242bd898f477b91a4d9ddc3f1715" translate="yes" xml:space="preserve">
          <source>OutputRange &lt;code&gt;writer&lt;/code&gt;</source>
          <target state="translated">OutputRange &lt;code&gt;writer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f87baece393f11d2ebd7d34364434c48c4a02484" translate="yes" xml:space="preserve">
          <source>OutputRange or writeable array at least 36 entries long</source>
          <target state="translated">OutputRange または書き込み可能な配列で、少なくとも 36 エントリの長さがあります。</target>
        </trans-unit>
        <trans-unit id="13e210f0c6fb1ed7f5c6dbe5107c577b2e60ca5f" translate="yes" xml:space="preserve">
          <source>OutputRangeObject!(R, E) &lt;strong id=&quot;outputRangeObject&quot;&gt;outputRangeObject&lt;/strong&gt;(R)(R range);</source>
          <target state="translated">OutputRangeObject！（R、E）&lt;strong id=&quot;outputRangeObject&quot;&gt;outputRangeObject&lt;/strong&gt;（R）（R range）;</target>
        </trans-unit>
        <trans-unit id="e85d6164bf319f351741910ab97e716a962afc3a" translate="yes" xml:space="preserve">
          <source>Outputs &lt;code&gt;e&lt;/code&gt; to &lt;code&gt;r&lt;/code&gt;. The exact effect is dependent upon the two types. Several cases are accepted, as described below. The code snippets are attempted in order, and the first to compile &quot;wins&quot; and gets evaluated.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; を &lt;code&gt;r&lt;/code&gt; に出力します。正確な効果は2つのタイプに依存します。以下に説明するように、いくつかのケースが受け入れられます。コードスニペットは順番に試行され、最初に「勝利」をコンパイルして評価されます。</target>
        </trans-unit>
        <trans-unit id="a1bb1dbd2d84148a196dd74f5ae5a0467c419f1c" translate="yes" xml:space="preserve">
          <source>Outputs element &lt;code&gt;e&lt;/code&gt; to a range.</source>
          <target state="translated">要素 &lt;code&gt;e&lt;/code&gt; を範囲に出力します。</target>
        </trans-unit>
        <trans-unit id="4da7bc9200c71949eae8135d4a25bb5b299cf7cc" translate="yes" xml:space="preserve">
          <source>Overflow</source>
          <target state="translated">Overflow</target>
        </trans-unit>
        <trans-unit id="cf31b736962d25ed4317259b0c7493d64da74b0f" translate="yes" xml:space="preserve">
          <source>Overlapping Copying</source>
          <target state="translated">重複コピー</target>
        </trans-unit>
        <trans-unit id="1df91417e6e2a1e93fd773916d0eacc3cee16a1e" translate="yes" xml:space="preserve">
          <source>Overlapping copies are an error:</source>
          <target state="translated">重複コピーはエラーです。</target>
        </trans-unit>
        <trans-unit id="26c78f2170e31758038f3bb0a52b3d4d222f938f" translate="yes" xml:space="preserve">
          <source>Overload A Function For A Virtual Table</source>
          <target state="translated">仮想テーブルの関数をオーバーロード</target>
        </trans-unit>
        <trans-unit id="158045726a48723e8e24b0a391a82a31e3194519" translate="yes" xml:space="preserve">
          <source>Overload Set</source>
          <target state="translated">オーバーロードセット</target>
        </trans-unit>
        <trans-unit id="8886e8c38f58ad0262aa71aa1b3e45c6e90e8134" translate="yes" xml:space="preserve">
          <source>Overload Sets</source>
          <target state="translated">過負荷セット</target>
        </trans-unit>
        <trans-unit id="67ecd6530cb09f0a6a1016e4b467ebf1b14e8282" translate="yes" xml:space="preserve">
          <source>Overload existing TemplateDeclaration 'this' with the new one 's'. Return true if successful; i.e. no conflict.</source>
          <target state="translated">既存の TemplateDeclaration 'this' を新しい TemplateDeclaration 's' でオーバーロードします。成功した場合は true を返します。</target>
        </trans-unit>
        <trans-unit id="eae487bc2f0194066ba0b4a013c5fcf7636c06a2" translate="yes" xml:space="preserve">
          <source>Overload of &lt;a href=&quot;#rename&quot;&gt;&lt;code&gt;rename&lt;/code&gt;&lt;/a&gt; that takes an associative array &lt;code&gt;translate&lt;/code&gt; as a template parameter, where the keys are either the names or indices of the members to be changed and the new names are the corresponding values. Every key in &lt;code&gt;translate&lt;/code&gt; must be the name of a member of the &lt;a href=&quot;#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;. The same rules for empty strings apply as for the variadic template overload of &lt;a href=&quot;#rename&quot;&gt;&lt;code&gt;rename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">連想配列をテンプレートパラメータとして &lt;code&gt;translate&lt;/code&gt; &lt;a href=&quot;#rename&quot;&gt; &lt;code&gt;rename&lt;/code&gt; &lt;/a&gt;オーバーロード。キーは変更するメンバーの名前またはインデックスであり、新しい名前は対応する値です。 &lt;code&gt;translate&lt;/code&gt; すべてのキーは、&lt;a href=&quot;#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;メンバーの名前でなければなりません。空の文字列に対する同じルールが、&lt;a href=&quot;#rename&quot;&gt; &lt;code&gt;rename&lt;/code&gt; の&lt;/a&gt;可変個引数テンプレートのオーバーロードと同じように適用されます。</target>
        </trans-unit>
        <trans-unit id="bb1730cb64cea0f7fd90a729f4e52146c5ec87e6" translate="yes" xml:space="preserve">
          <source>Overload of HMAC to be used if H doesn't provide information about its block size.</source>
          <target state="translated">Hがブロックサイズに関する情報を提供しない場合に使用されるHMACのオーバーロード。</target>
        </trans-unit>
        <trans-unit id="d69b02266b4564b8b1a2868be5966a7c16753f43" translate="yes" xml:space="preserve">
          <source>Overload sets can be merged with an alias declaration:</source>
          <target state="translated">オーバーロードセットはエイリアス宣言でマージすることができます。</target>
        </trans-unit>
        <trans-unit id="0dfd02f023aa40beb746d9cc077ec573c5ad785e" translate="yes" xml:space="preserve">
          <source>Overload taking &lt;code&gt;CodepointSet&lt;/code&gt;s will naturally convert only to bool mapping &lt;code&gt;Trie&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;CodepointSet&lt;/code&gt; を取得するオーバーロードは、当然、ブールマッピング &lt;code&gt;Trie&lt;/code&gt; のみに変換されます。</target>
        </trans-unit>
        <trans-unit id="c42a6c022fe7418d8db213b725de386aa93c918b" translate="yes" xml:space="preserve">
          <source>Overload this FuncDeclaration with the new one f. Return true if successful; i.e. no conflict.</source>
          <target state="translated">この FuncDeclaration を新しいもの f でオーバーロードします。成功した場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="c5ecac5efe300a95c2fed1c87f55f61b868e7be6" translate="yes" xml:space="preserve">
          <source>Overloadable Binary Operators</source>
          <target state="translated">オーバーロード可能なバイナリ演算子</target>
        </trans-unit>
        <trans-unit id="0c91984df423d8adc0ea28e04634eb6436d66740" translate="yes" xml:space="preserve">
          <source>Overloadable Index Unary Operators</source>
          <target state="translated">オーバーロード可能なインデックス単項演算子</target>
        </trans-unit>
        <trans-unit id="40c29eefdaaea03e00d053015d5c30e435d99ba5" translate="yes" xml:space="preserve">
          <source>Overloadable Op Assignment Operators</source>
          <target state="translated">オーバーロード可能な光学割り当てオペレータ</target>
        </trans-unit>
        <trans-unit id="868004b3cb4783ac2e0f7bbd6f12e4efe1b9741d" translate="yes" xml:space="preserve">
          <source>Overloadable Slice Unary Operators</source>
          <target state="translated">オーバーロード可能なスライス単項演算子</target>
        </trans-unit>
        <trans-unit id="187c02a81ab8dd7735cd108b2d2d5d80603a58c8" translate="yes" xml:space="preserve">
          <source>Overloadable Unary Operators</source>
          <target state="translated">オーバーロード可能な単項演算子</target>
        </trans-unit>
        <trans-unit id="0c7d142daaca9406f218da735b2626a59df3fc79" translate="yes" xml:space="preserve">
          <source>Overloading &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; のオーバーロード</target>
        </trans-unit>
        <trans-unit id="82107b43f4305c149a257571647eee584e5a427e" translate="yes" xml:space="preserve">
          <source>Overloading &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;gt;=&lt;/code&gt; のオーバーロード</target>
        </trans-unit>
        <trans-unit id="ba3190914d282ad78492c1e46480b8bf4e1649b2" translate="yes" xml:space="preserve">
          <source>Overloading &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; および &lt;code&gt;!=&lt;/code&gt; のオーバーロード</target>
        </trans-unit>
        <trans-unit id="d9bb19726f9a0a8594fcdb690b64ba87e32bcce1" translate="yes" xml:space="preserve">
          <source>Overloading Index Unary Operators</source>
          <target state="translated">オーバーロードインデックス単項演算子</target>
        </trans-unit>
        <trans-unit id="452176c507c63d99fdcd25f67549f4401bd31c52" translate="yes" xml:space="preserve">
          <source>Overloading Slice Unary Operators</source>
          <target state="translated">スライス単項演算子のオーバーロード</target>
        </trans-unit>
        <trans-unit id="04d7d655cce557095f8ad6c19c35e3d39b26d4ac" translate="yes" xml:space="preserve">
          <source>Overloading the Comparison Operators</source>
          <target state="translated">比較演算子のオーバーロード</target>
        </trans-unit>
        <trans-unit id="343733174446e2662ee66d02bbdff2d89203838e" translate="yes" xml:space="preserve">
          <source>Overloading the slicing operator means overloading expressions like &lt;code&gt;a[]&lt;/code&gt; or &lt;code&gt;a[&lt;/code&gt;</source>
          <target state="translated">スライス演算子のオーバーロードは、 &lt;code&gt;a[]&lt;/code&gt; や &lt;code&gt;a[&lt;/code&gt; ような式のオーバーロードを意味します</target>
        </trans-unit>
        <trans-unit id="28e9f60b000902c4ad6c539ce60cae3d5517be74" translate="yes" xml:space="preserve">
          <source>Override so it can work even if semantic() hasn't yet been run.</source>
          <target state="translated">semantic()がまだ実行されていなくても動作するようにオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="1225901c0967c3137622abc4eda5e2ca4282d06d" translate="yes" xml:space="preserve">
          <source>Override to use a derived class. The returned socket's handle must not be set.</source>
          <target state="translated">派生クラスを使用するためにオーバーライドします。返されるソケットのハンドルを設定してはいけません。</target>
        </trans-unit>
        <trans-unit id="7b278a3abe635e243893eb9ee9520d47934c806e" translate="yes" xml:space="preserve">
          <source>Overrides &lt;code&gt;Object.toString&lt;/code&gt; and returns the error message. Internally this forwards to the &lt;code&gt;toString&lt;/code&gt; overload that takes a sink delegate.</source>
          <target state="translated">&lt;code&gt;Object.toString&lt;/code&gt; をオーバーライドし、エラーメッセージを返します。内部的には、これはシンクデリゲートを &lt;code&gt;toString&lt;/code&gt; オーバーロードに転送されます。</target>
        </trans-unit>
        <trans-unit id="434b5085b3ba9a70b1f949c6e9087acb372b2be9" translate="yes" xml:space="preserve">
          <source>Overrides the default collect hander with a user-supplied version. This routine will be called for each resource object that is finalized in a non-deterministic manner--typically during a garbage collection cycle. If the supplied routine returns true then the object's dtor will called as normal, but if the routine returns false than the dtor will not be called. The default behavior is for all object dtors to be called.</source>
          <target state="translated">デフォルトのコレクトハンドラを、ユーザが提供したバージョンで上書きします。このルーチンは、非決定論的な方法で確定された各リソース・オブジェクトに対して呼び出されます。提供されたルーチンが true を返す場合、オブジェクトの dtor は通常通り呼び出されますが、ルーチンが false を返す場合は dtor は呼び出されません。デフォルトの動作は、すべてのオブジェクトの dtor が呼び出されることです。</target>
        </trans-unit>
        <trans-unit id="c2a6071ecd521a52b7d732960a323e428b0a4624" translate="yes" xml:space="preserve">
          <source>Overrides the default mangling for a symbol.</source>
          <target state="translated">シンボルのデフォルトのマングリングをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="bf25c93e3d705c28b6d8ec638ddf35dc53074d1e" translate="yes" xml:space="preserve">
          <source>Overrides the default module unit tester with a user-supplied version. This routine will be called once on program initialization. The return value of this routine indicates to the runtime whether the tests ran without error.</source>
          <target state="translated">デフォルトのモジュール・ユニット・テスターを、ユーザーが提供したバージョンで上書きします。このルーチンは、プログラムの初期化時に一度だけ呼び出されます。このルーチンの戻り値は、テストがエラーなく実行されたかどうかをランタイムに示します。</target>
        </trans-unit>
        <trans-unit id="e40ec95fc8ad1ad3aefaa28bd8731b6a04320d70" translate="yes" xml:space="preserve">
          <source>Overrides the default trace hander with a user-supplied version.</source>
          <target state="translated">デフォルトのトレースハンダを、ユーザーが提供したバージョンで上書きします。</target>
        </trans-unit>
        <trans-unit id="cf266c19b70edb5e7f009d3790d662d578ec4941" translate="yes" xml:space="preserve">
          <source>Overrides the default trace mechanism with a user-supplied version. A trace represents the context from which an exception was thrown, and the trace handler will be called when this occurs. The pointer supplied to this routine indicates the base address from which tracing should occur. If the supplied pointer is null then the trace routine should determine an appropriate calling context from which to begin the trace.</source>
          <target state="translated">デフォルトのトレースメカニズムを、ユーザーが提供するバージョンで上書きします。トレースは例外がスローされたコンテキストを表し、これが発生したときにトレースハンドラが呼び出されます。このルーチンに供給されるポインタは、トレースが発生するべきベース・アドレスを示します。ポインタが NULL の場合、トレース・ルーチンはトレースを開始するための適切な呼び出しコンテキストを決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="89ff31225c5f042fff61e92ec8cf80e417a7140c" translate="yes" xml:space="preserve">
          <source>Owner</source>
          <target state="translated">Owner</target>
        </trans-unit>
        <trans-unit id="f4d48b875c14540f7cebd9c7470e1acc8e3b934a" translate="yes" xml:space="preserve">
          <source>Ownership/Borrowing</source>
          <target state="translated">Ownership/Borrowing</target>
        </trans-unit>
        <trans-unit id="74feeb6178fa5b23446dfd16c8978129d74b1bd2" translate="yes" xml:space="preserve">
          <source>Owns a (rmem-managed) file buffer.</source>
          <target state="translated">(rmemem-managed)ファイルバッファを所有しています。</target>
        </trans-unit>
        <trans-unit id="511993d3c99719e38a6779073019dacd7178ddb9" translate="yes" xml:space="preserve">
          <source>P</source>
          <target state="translated">P</target>
        </trans-unit>
        <trans-unit id="16309e2b3bedf0b1c2ca1cd681b84c8d2ee0bc98" translate="yes" xml:space="preserve">
          <source>PARC Universal Packet Protocol</source>
          <target state="translated">PARCユニバーサルパケットプロトコル</target>
        </trans-unit>
        <trans-unit id="11850638f643ba7850d11f7ddcec0964d655b890" translate="yes" xml:space="preserve">
          <source>PARC Universal Packet Protocol level</source>
          <target state="translated">PARCユニバーサルパケットプロトコルレベル</target>
        </trans-unit>
        <trans-unit id="328336a5067c796e3099da705902a551e91ac694" translate="yes" xml:space="preserve">
          <source>PHOBOS_VERSION</source>
          <target state="translated">PHOBOS_VERSION</target>
        </trans-unit>
        <trans-unit id="bd6d55722c91f9838a18dc678fa82fff08090ff7" translate="yes" xml:space="preserve">
          <source>PIException if the segment body is illegal (contains &quot;?&amp;gt;&quot;)</source>
          <target state="translated">セグメント本体が不正（「？&amp;gt;」を含む）の場合はPIException</target>
        </trans-unit>
        <trans-unit id="b79d0f29fffcde427896ae2e08789531e1def379" translate="yes" xml:space="preserve">
          <source>POD is defined as:</source>
          <target state="translated">PODとは、以下のように定義されています。</target>
        </trans-unit>
        <trans-unit id="fec3b8a0dd6b51f5966e330783d67a4a5db1cc08" translate="yes" xml:space="preserve">
          <source>POSIX specific</source>
          <target state="translated">POSIX固有</target>
        </trans-unit>
        <trans-unit id="5920724eeffca91f7f6adab2e15742b13168e721" translate="yes" xml:space="preserve">
          <source>POST static input fields.</source>
          <target state="translated">POST静的入力フィールド。</target>
        </trans-unit>
        <trans-unit id="9111ca243bfe057abc22f66b97b7e326a80a3a08" translate="yes" xml:space="preserve">
          <source>POST volatile input fields.</source>
          <target state="translated">POST 揮発性の入力フィールド。</target>
        </trans-unit>
        <trans-unit id="536eb8d5f513c1dccc601b700a5bc1cf4cff7823" translate="yes" xml:space="preserve">
          <source>PREC[TOK.max_] &lt;strong id=&quot;precedence&quot;&gt;precedence&lt;/strong&gt;;</source>
          <target state="translated">PREC [TOK.max_] &lt;strong id=&quot;precedence&quot;&gt;優先順位&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="9b655813c0be05ad826fd70e726125de35fc2f50" translate="yes" xml:space="preserve">
          <source>PUBLIC FUNCTIONS</source>
          <target state="translated">公共機能</target>
        </trans-unit>
        <trans-unit id="6edd3b1108776883868715a89627fccc1922179c" translate="yes" xml:space="preserve">
          <source>Package &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">パッケージ &lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe45845b0cf0e4b5ad1d088d74ee6c6714a4e668" translate="yes" xml:space="preserve">
          <source>Package &lt;code&gt;pkg&lt;/code&gt;</source>
          <target state="translated">パッケージ &lt;code&gt;pkg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c1c83923c5bf4fb42b6715d534ec4a4410b11428" translate="yes" xml:space="preserve">
          <source>Package &lt;strong id=&quot;resolveIsPackage&quot;&gt;resolveIsPackage&lt;/strong&gt;(Dsymbol sym);</source>
          <target state="translated">パッケージ&lt;strong id=&quot;resolveIsPackage&quot;&gt;resolveIsPackage&lt;/strong&gt;（Dsymbol sym）;</target>
        </trans-unit>
        <trans-unit id="2f81d5fc2134a962ec93de8ce6eebd789d867168" translate="yes" xml:space="preserve">
          <source>Package Module</source>
          <target state="translated">パッケージモジュール</target>
        </trans-unit>
        <trans-unit id="0a999012ffb87b3edac99adbdfc498b12831a1e2" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">Packages</target>
        </trans-unit>
        <trans-unit id="5bf83a475305a8a5e5f13b2d29274d98303c1d0f" translate="yes" xml:space="preserve">
          <source>Packing and Alignment</source>
          <target state="translated">パッキングとアライメント</target>
        </trans-unit>
        <trans-unit id="527b6c0dc92a4c896664b2f08b6671179844b2cb" translate="yes" xml:space="preserve">
          <source>Pads a range to a specified length by adding a given element to the front of the range. Is lazy if the range has a known length.</source>
          <target state="translated">指定された要素を範囲の先頭に追加することで、指定された長さに範囲をパッドします。範囲の長さが既知の場合は遅延します。</target>
        </trans-unit>
        <trans-unit id="1a3fe2a8ab75f618f4a19bf2dac2c84e666392b1" translate="yes" xml:space="preserve">
          <source>Pairs of test expressions and return expressions. The test expressions will be the second argument for the predicate, and the return expression will be returned if the predicate yields true with &lt;code&gt;switchExpression&lt;/code&gt; and the test expression as arguments. May also have a default return expression, that needs to be the last expression without a test expression before it. A return expression may be of void type only if it always throws.</source>
          <target state="translated">テスト式と戻り式のペア。テスト式は述語の2番目の引数になり、述語が &lt;code&gt;switchExpression&lt;/code&gt; とテスト式を引数としてtrueを返す場合、戻り式が返されます。また、デフォルトの戻り式がある場合があります。これは、その前にテスト式がない最後の式である必要があります。return式は、常にスローする場合にのみvoid型になる場合があります。</target>
        </trans-unit>
        <trans-unit id="5a59f0eb1f60143691b85b6c69dd1f1a53159158" translate="yes" xml:space="preserve">
          <source>Paragraph_Separator</source>
          <target state="translated">Paragraph_Separator</target>
        </trans-unit>
        <trans-unit id="e32c4eb3da79aeddb942c05de64aaff19b75096a" translate="yes" xml:space="preserve">
          <source>Parallel marking</source>
          <target state="translated">パラレルマーキング</target>
        </trans-unit>
        <trans-unit id="acc6f793dede04624d00eb05042ec34065c433d0" translate="yes" xml:space="preserve">
          <source>Parallel reduce on a random access range. Except as otherwise noted, usage is similar to &lt;a href=&quot;std_algorithm_iteration#reduce&quot;&gt;&lt;code&gt;std.algorithm.iteration.reduce&lt;/code&gt;&lt;/a&gt;. There is also &lt;a href=&quot;#fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; which does the same thing with a different parameter order.</source>
          <target state="translated">ランダムアクセス範囲の並列削減。特に明記しない限り、使用方法は&lt;a href=&quot;std_algorithm_iteration#reduce&quot;&gt; &lt;code&gt;std.algorithm.iteration.reduce&lt;/code&gt; &lt;/a&gt;と同様です。異なるパラメーターの順序で同じことを行う&lt;a href=&quot;#fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; &lt;/a&gt;もあります。</target>
        </trans-unit>
        <trans-unit id="64c0a305b25b3c5cd3ace12be0a7a18b3ad03f48" translate="yes" xml:space="preserve">
          <source>Parallel reduce supports multiple functions, like &lt;code&gt;std.algorithm.reduce&lt;/code&gt;.</source>
          <target state="translated">並列削減は、 &lt;code&gt;std.algorithm.reduce&lt;/code&gt; などの複数の関数をサポートします。</target>
        </trans-unit>
        <trans-unit id="7564a5560d76d7619eabad0cf5b241d011ae8e5e" translate="yes" xml:space="preserve">
          <source>ParallelForeach!R &lt;strong id=&quot;parallel&quot;&gt;parallel&lt;/strong&gt;(R)(R range);</source>
          <target state="translated">ParallelForeach！R &lt;strong id=&quot;parallel&quot;&gt;パラレル&lt;/strong&gt;（R）（R範囲）;</target>
        </trans-unit>
        <trans-unit id="706e0f72ea7909cb27d89524808db6808cb50661" translate="yes" xml:space="preserve">
          <source>ParallelForeach!R &lt;strong id=&quot;parallel&quot;&gt;parallel&lt;/strong&gt;(R)(R range, size_t workUnitSize);</source>
          <target state="translated">ParallelForeach！R &lt;strong id=&quot;parallel&quot;&gt;parallel&lt;/strong&gt;（R）（R range、size_t workUnitSize）;</target>
        </trans-unit>
        <trans-unit id="c65074d6db6bccb661f4773c38d3324964921272" translate="yes" xml:space="preserve">
          <source>Param &lt;code&gt;params&lt;/code&gt;</source>
          <target state="translated">パラメータ &lt;code&gt;params&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19f29f198f4dec4eb5c8f9b8be59082811067ae8" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">パラメータ &lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b71e169e1a186fb6f6f76028af43dfbd5d2d9bc" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;par&lt;/code&gt;</source>
          <target state="translated">パラメータ &lt;code&gt;par&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84083975aaa4d13fa2983979d72578766d2ff82b" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;parameter&lt;/code&gt;</source>
          <target state="translated">パラメータ &lt;code&gt;parameter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="23c85a1fcaf0a5cf78d51f0fe59e5d98d3c0a372" translate="yes" xml:space="preserve">
          <source>Parameter Storage Classes</source>
          <target state="translated">パラメータ保存クラス</target>
        </trans-unit>
        <trans-unit id="db82d68363ec6e38305dc78db53ba4671015a864" translate="yes" xml:space="preserve">
          <source>Parameter may be returned or copied to the first parameter, but otherwise does not escape from the function. Such copies are required not to outlive the argument(s) they were derived from. Ignored for parameters with no references. See &lt;a href=&quot;memory-safe-d#scope-return-params&quot;&gt;Scope Parameters&lt;/a&gt;.</source>
          <target state="translated">パラメータは最初のパラメータに返されるか、コピーされますが、それ以外の場合は関数からエスケープされません。そのようなコピーは、それらが由来した議論を長引かせないように要求されます。参照のないパラメーターでは無視されます。&lt;a href=&quot;memory-safe-d#scope-return-params&quot;&gt;スコープパラメータを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1a8ada0f324dda2754e9706db00c66db9f30cac7" translate="yes" xml:space="preserve">
          <source>Parameter storage classes are &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;out&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;lazy&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt;, &lt;code&gt;shared&lt;/code&gt;, &lt;code&gt;inout&lt;/code&gt; or &lt;code&gt;scope&lt;/code&gt;. For example:</source>
          <target state="translated">パラメータストレージクラスは &lt;code&gt;in&lt;/code&gt; 、 &lt;code&gt;out&lt;/code&gt; 、 &lt;code&gt;ref&lt;/code&gt; 、 &lt;code&gt;lazy&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;immutable&lt;/code&gt; 、 &lt;code&gt;shared&lt;/code&gt; 、 &lt;code&gt;inout&lt;/code&gt; 、または &lt;code&gt;scope&lt;/code&gt; です。例えば：</target>
        </trans-unit>
        <trans-unit id="004e5a295e2f487773343c35732d9eecbd50322f" translate="yes" xml:space="preserve">
          <source>Parameter storage classes are &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;out&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;lazy&lt;/code&gt;, &lt;code&gt;scope&lt;/code&gt; and &lt;code&gt;inout&lt;/code&gt;. Parameters can also take the type constructors &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt; and &lt;code&gt;shared&lt;/code&gt;.</source>
          <target state="translated">パラメータストレージクラスは &lt;code&gt;in&lt;/code&gt; 、 &lt;code&gt;out&lt;/code&gt; 、 &lt;code&gt;ref&lt;/code&gt; 、 &lt;code&gt;lazy&lt;/code&gt; 、 &lt;code&gt;scope&lt;/code&gt; 、 &lt;code&gt;inout&lt;/code&gt; です。パラメータは、型コンストラクタ &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;immutable&lt;/code&gt; 、 &lt;code&gt;shared&lt;/code&gt; を取ることもできます。</target>
        </trans-unit>
        <trans-unit id="a71c366db210cd4901a72bb5ff201e1d4ea42b76" translate="yes" xml:space="preserve">
          <source>Parameter to compare with</source>
          <target state="translated">比較するパラメータ</target>
        </trans-unit>
        <trans-unit id="4bef6f8918d2b6dbb2184051845a0c285876469b" translate="yes" xml:space="preserve">
          <source>Parameter* nth Parameter NULL not found, *pn gets incremented by the number of Parameters</source>
          <target state="translated">パラメータ*n 番目のパラメータが NULL で見つからなかった場合、*pn はパラメータの数だけインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="acdf35da4c553e1dfc2210109486c37c589cbf86" translate="yes" xml:space="preserve">
          <source>ParameterList</source>
          <target state="translated">ParameterList</target>
        </trans-unit>
        <trans-unit id="dc69505d72ec1dc997f6344835bf90cc49a5fc7d" translate="yes" xml:space="preserve">
          <source>ParameterList &lt;code&gt;pl&lt;/code&gt;</source>
          <target state="translated">ParameterList &lt;code&gt;pl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="e23226b56e57669c7eee387e75bb0eeb4eacb099" translate="yes" xml:space="preserve">
          <source>Parameters are always pushed as multiples of 4 bytes, rounding upwards, so the stack is always aligned on 4 byte boundaries. They are pushed most significant first. &lt;b&gt;out&lt;/b&gt; and &lt;b&gt;ref&lt;/b&gt; are passed as pointers. Static arrays are passed as pointers to their first element. On Windows, a real is pushed as a 10 byte quantity, a creal is pushed as a 20 byte quantity. On Linux, a real is pushed as a 12 byte quantity, a creal is pushed as two 12 byte quantities. The extra two bytes of pad occupy the &amp;lsquo;most significant&amp;rsquo; position.</source>
          <target state="translated">パラメータは常に4バイトの倍数としてプッシュされ、切り上げられるため、スタックは常に4バイトの境界に揃えられます。それらは最初に最も重要です。&lt;b&gt;out&lt;/b&gt;と&lt;b&gt;ref&lt;/b&gt;はポインタとして渡されます。静的配列は、最初の要素へのポインタとして渡されます。Windowsでは、実数は10バイトの量としてプッシュされ、実数は20バイトの量としてプッシュされます。Linuxでは、実数は12バイトの量としてプッシュされ、実数は2つの12バイトの量としてプッシュされます。追加の2バイトのパッドは、「最上位」の位置を占めます。</target>
        </trans-unit>
        <trans-unit id="2788d7232604fa7de143f891d6677fee828b587d" translate="yes" xml:space="preserve">
          <source>Parameters for the generator.</source>
          <target state="translated">ジェネレーターのパラメータ。</target>
        </trans-unit>
        <trans-unit id="d306b7545fffdce649df065d88dd5bff37d729ec" translate="yes" xml:space="preserve">
          <source>Parameters marked as &lt;code&gt;ref return scope&lt;/code&gt; come in two forms:</source>
          <target state="translated">&lt;code&gt;ref return scope&lt;/code&gt; としてマークされたパラメーターには、2つの形式があります。</target>
        </trans-unit>
        <trans-unit id="9cbfd0370d2df7813205bb7b748f4a1db07a858e" translate="yes" xml:space="preserve">
          <source>Parameters marked as &lt;code&gt;return scope&lt;/code&gt; that contain indirections can only escape those indirections via the function's return value.</source>
          <target state="translated">間接参照を含む &lt;code&gt;return scope&lt;/code&gt; としてマークされたパラメーターは、関数の戻り値を介してそれらの間接参照をエスケープすることしかできません。</target>
        </trans-unit>
        <trans-unit id="502a49319f9747d485d0e90ac781bf4a89a3c3b9" translate="yes" xml:space="preserve">
          <source>Parameters passed to SQL geom function</source>
          <target state="translated">SQL geom関数に渡されるパラメータ</target>
        </trans-unit>
        <trans-unit id="25ba1dff4c429f0d3704cf2f68f66eb3b3ee6f38" translate="yes" xml:space="preserve">
          <source>Parameters that will be used to call &lt;code&gt;Hook&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Hook&lt;/code&gt; 呼び出しに使用されるパラメーター</target>
        </trans-unit>
        <trans-unit id="069dcf15e5fa7ccfab22c19c69c59b0dc2aac4bf" translate="yes" xml:space="preserve">
          <source>Parameters!Hook &lt;code&gt;parameters&lt;/code&gt;</source>
          <target state="translated">パラメータ！フック &lt;code&gt;parameters&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="dc124689c7040d627a2c6490eec999443990ba30" translate="yes" xml:space="preserve">
          <source>Params</source>
          <target state="translated">Params</target>
        </trans-unit>
        <trans-unit id="4ed743af9079012d0a99ea8273ea7148ae91ca44" translate="yes" xml:space="preserve">
          <source>Parent allocator. For construction from stateless allocators, use their &lt;code&gt;instance&lt;/code&gt; static member.</source>
          <target state="translated">親アロケーター。ステートレスアロケーターから構築するには、 &lt;code&gt;instance&lt;/code&gt; 静的メンバーを使用します。</target>
        </trans-unit>
        <trans-unit id="d4de297e82ffd6596306e4e19bbc9ab418447bf3" translate="yes" xml:space="preserve">
          <source>Parent in hierarchy</source>
          <target state="translated">階層内の親</target>
        </trans-unit>
        <trans-unit id="a02d47ba7fa60fd2ab7f1a415fe78a36422c1536" translate="yes" xml:space="preserve">
          <source>ParentAllocator</source>
          <target state="translated">ParentAllocator</target>
        </trans-unit>
        <trans-unit id="5208ea3f897cc37caf351c89b3fed673268fa9dc" translate="yes" xml:space="preserve">
          <source>ParentAllocator &lt;code&gt;parent&lt;/code&gt;</source>
          <target state="translated">ParentAllocator &lt;code&gt;parent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0ef7ffe567a6538a14ef66b4087f755c7083c14" translate="yes" xml:space="preserve">
          <source>ParentAllocator &lt;strong id=&quot;parent&quot;&gt;parent&lt;/strong&gt;;</source>
          <target state="translated">ParentAllocator &lt;strong id=&quot;parent&quot;&gt;親&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="20cf2e4a28aece4982d86333c6a7c89937b5f638" translate="yes" xml:space="preserve">
          <source>Parse a Type or an Expression</source>
          <target state="translated">型または式を解析する</target>
        </trans-unit>
        <trans-unit id="0e5ba08ab31df24d5fcda076622754be8a9e95a4" translate="yes" xml:space="preserve">
          <source>Parse a UUID from its canonical string form. An UUID in its canonical form looks like this: 8ab3060e-2cba-4f23-b74c-b52db3bdfb46</source>
          <target state="translated">UUID を正規の文字列形式から解析します。正規形の UUID は次のようになります。8ab3060e-2cba-4f23-b74c-b52db3bdfb46</target>
        </trans-unit>
        <trans-unit id="b51f894038d0008dfbaa74d81a6b8df2bd125491" translate="yes" xml:space="preserve">
          <source>Parse a module from a string.</source>
          <target state="translated">文字列からモジュールをパースします。</target>
        </trans-unit>
        <trans-unit id="b116297c1a492c7acb3eb37d11ee586ead05b0ff" translate="yes" xml:space="preserve">
          <source>Parse an IPv4 address string in the dotted-decimal form</source>
          <target state="translated">IPv4 アドレスの文字列を 10 進数形式でパースします。</target>
        </trans-unit>
        <trans-unit id="67d488bcba9b3f579efe720c5d6e269019c76b78" translate="yes" xml:space="preserve">
          <source>Parse an IPv6 host address string as described in RFC 2373, and return the address.</source>
          <target state="translated">RFC 2373に記載されているようにIPv6ホストアドレス文字列を解析し、アドレスを返す。</target>
        </trans-unit>
        <trans-unit id="0c6ef6ffd6736f6311741aad939e47729e152363" translate="yes" xml:space="preserve">
          <source>Parse an XML element.</source>
          <target state="translated">XML要素を解析します。</target>
        </trans-unit>
        <trans-unit id="89da31932d3708e3b7f3503b77f46c37056d3caf" translate="yes" xml:space="preserve">
          <source>Parse and remove command line options from a string array.</source>
          <target state="translated">文字列配列からコマンドラインオプションを解析して削除します。</target>
        </trans-unit>
        <trans-unit id="e78dfe1951ae384f0bb186772bb44b9d1b41fc31" translate="yes" xml:space="preserve">
          <source>Parse and run semantic analysis on a GccAsmStatement.</source>
          <target state="translated">GccAsmStatement を解析し、セマンティック解析を実行します。</target>
        </trans-unit>
        <trans-unit id="d6a83ca7d0d7d4947b1a0c1ec0d979ee479df908" translate="yes" xml:space="preserve">
          <source>Parse command line arguments for the last instance of -conf=path.</source>
          <target state="translated">conf=path の最後のインスタンスのコマンドライン引数をパースします。</target>
        </trans-unit>
        <trans-unit id="3da392b34053839507509c2ba69da833f60b469e" translate="yes" xml:space="preserve">
          <source>Parse command line arguments for the last instance of -m32, -m64 or -m32mscoff to detect the desired architecture.</source>
          <target state="translated">m32、-m64、または-m32mscoffの最後のインスタンスのコマンドライン引数をパースして、希望するアーキテクチャを検出します。</target>
        </trans-unit>
        <trans-unit id="16dac6c4d17dadf18f0e007b7333e3ad86945a6a" translate="yes" xml:space="preserve">
          <source>Parse command line arguments.</source>
          <target state="translated">コマンドライン引数を解析します。</target>
        </trans-unit>
        <trans-unit id="76560b479dcbd840417cf615a5d133fe4aeeebec" translate="yes" xml:space="preserve">
          <source>Parse escapes of the form: /c/string/ where c is a single character. Multiple escapes can be separated by whitespace and/or commas.</source>
          <target state="translated">形式のエスケープを解析します。/c は一文字です。複数のエスケープは、空白やカンマで区切ることができます。</target>
        </trans-unit>
        <trans-unit id="94b991a478ac4b7e91a93538b4ab0b1f64db972e" translate="yes" xml:space="preserve">
          <source>Parse macros out of Macros: section. Macros are of the form: name1 = value1</source>
          <target state="translated">Macros:セクションのマクロを解析します。マクロは次のような形式になります。</target>
        </trans-unit>
        <trans-unit id="ae17436f43a711859e6e5f23964c5153a1bfdd8e" translate="yes" xml:space="preserve">
          <source>Parse next paragraph out of *pcomment. Update *pcomment to point past paragraph. Returns NULL if no more paragraphs. If paragraph ends in 'identifier:', then (*pcomment)[0 .. idlen] is the identifier.</source>
          <target state="translated">pcomment の次の段落を解析します。pcommentを過去の段落を指すように更新します。これ以上の段落がない場合は、NULLを返します。段落が 'identifier:' で終わっている場合は、(*pcomment)[0 ...idlen]が識別子となります。</target>
        </trans-unit>
        <trans-unit id="450dba0c77946e5c69e86c55b859d9b21735d00b" translate="yes" xml:space="preserve">
          <source>Parse the given &lt;code&gt;fieldName&lt;/code&gt; and return its corresponding JsonFieldFlags value.</source>
          <target state="translated">指定された &lt;code&gt;fieldName&lt;/code&gt; を解析し、対応するJsonFieldFlags値を返します。</target>
        </trans-unit>
        <trans-unit id="7f72edc0b8c3b6f31c38aaff9b2735f81dc8dd93" translate="yes" xml:space="preserve">
          <source>Parse unicode codepoint set from given &lt;code&gt;range&lt;/code&gt; using standard regex syntax '[...]'. The range is advanced skiping over regex set definition. &lt;code&gt;casefold&lt;/code&gt; parameter determines if the set should be casefolded - that is include both lower and upper case versions for any letters in the set.</source>
          <target state="translated">標準の正規表現構文「[...]」を使用して、指定された &lt;code&gt;range&lt;/code&gt; からUnicodeコードポイントセットを解析します。範囲は、正規表現セットの定義をスキップして高度です。 &lt;code&gt;casefold&lt;/code&gt; パラメータは、セットを大文字にするかどうかを決定します。つまり、セット内のすべての文字の小文字バージョンと大文字バージョンの両方が含まれます。</target>
        </trans-unit>
        <trans-unit id="a01a2b8150c64549e9cd4c96ee16b8a26bcdaaf2" translate="yes" xml:space="preserve">
          <source>ParserHandler[string] &lt;strong id=&quot;onStartTag&quot;&gt;onStartTag&lt;/strong&gt;;</source>
          <target state="translated">ParserHandler [string] &lt;strong id=&quot;onStartTag&quot;&gt;onStartTag&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="8b0d0e766dced46908a81c9cd127077bfd46fd30" translate="yes" xml:space="preserve">
          <source>Parses a &lt;code&gt;dmd.conf&lt;/code&gt; or &lt;code&gt;ldc2.conf&lt;/code&gt; config file and returns defined import paths.</source>
          <target state="translated">&lt;code&gt;dmd.conf&lt;/code&gt; または &lt;code&gt;ldc2.conf&lt;/code&gt; 構成ファイルを解析し、定義されたインポートパスを返します。</target>
        </trans-unit>
        <trans-unit id="f512da601d22b0ee2b2cf1c48af79181f827811e" translate="yes" xml:space="preserve">
          <source>Parses a character &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to an integral value.</source>
          <target state="translated">文字&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;を整数値に解析します。</target>
        </trans-unit>
        <trans-unit id="2fd2971a74ccde0fbdc27f87fc034b74ba2c4cde" translate="yes" xml:space="preserve">
          <source>Parses a character range to a floating point number.</source>
          <target state="translated">文字範囲を浮動小数点数に変換します。</target>
        </trans-unit>
        <trans-unit id="9e8db731dd580734da1b87439d32c23c6c0b87c3" translate="yes" xml:space="preserve">
          <source>Parses a serialized string and returns a tree of JSON values.</source>
          <target state="translated">シリアライズされた文字列をパースし、JSON 値のツリーを返します。</target>
        </trans-unit>
        <trans-unit id="010c8d1e4fe323ec58d09feb50b1819dc73f74ee" translate="yes" xml:space="preserve">
          <source>Parses an array from a string given the left bracket (default &lt;code&gt; '['&lt;/code&gt;), right bracket (default &lt;code&gt;']'&lt;/code&gt;), and element separator (by default &lt;code&gt;','&lt;/code&gt;). A trailing separator is allowed.</source>
          <target state="translated">左角かっこ（デフォルトは &lt;code&gt; '['&lt;/code&gt; ）、右大かっこ（デフォルトは &lt;code&gt;']'&lt;/code&gt; ）、および要素セパレータ（デフォルトは &lt;code&gt;','&lt;/code&gt; ）が指定された文字列から配列を解析します。末尾の区切り文字を使用できます。</target>
        </trans-unit>
        <trans-unit id="fea81b03a9b6108256fd6dbd49ffa4e506987c1b" translate="yes" xml:space="preserve">
          <source>Parses an associative array from a string given the left bracket (default &lt;code&gt; '['&lt;/code&gt;), right bracket (default &lt;code&gt;']'&lt;/code&gt;), key-value separator (default &lt;code&gt; ':'&lt;/code&gt;), and element seprator (by default &lt;code&gt;','&lt;/code&gt;).</source>
          <target state="translated">左大括弧（デフォルトは &lt;code&gt; '['&lt;/code&gt; ）、右大括弧（デフォルトは &lt;code&gt;']'&lt;/code&gt; ）、キーと値の区切り記号（デフォルトは &lt;code&gt; ':'&lt;/code&gt; ）、および要素区切り記号（デフォルトは &lt;code&gt;','&lt;/code&gt; ）を指定して、ストリングから連想配列を解析します</target>
        </trans-unit>
        <trans-unit id="29a5987ba0d6709de3c0fabafe685ca0830538a2" translate="yes" xml:space="preserve">
          <source>Parses an environment variable containing command-line flags and append them to &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">コマンドラインフラグを含む環境変数を解析し、それらを &lt;code&gt;args&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="7294d33710169103141018bfcb0ee5ad3daa81e2" translate="yes" xml:space="preserve">
          <source>Parsing</source>
          <target state="translated">Parsing</target>
        </trans-unit>
        <trans-unit id="01fb58e60a8182fb22f2e27607c68467bfc3bdb1" translate="yes" xml:space="preserve">
          <source>Parsing - documentation comments are associated with specific declarations and combined.</source>
          <target state="translated">構文解析-ドキュメントのコメントは、特定の宣言に関連付けられ、結合されます。</target>
        </trans-unit>
        <trans-unit id="671420d39349223d076271ea629f4c237238047b" translate="yes" xml:space="preserve">
          <source>Parsing UUIDs</source>
          <target state="translated">UUID のパース</target>
        </trans-unit>
        <trans-unit id="c3a20404291f5cb0bb0fa13bb84a38c285e4f8ae" translate="yes" xml:space="preserve">
          <source>Parsing a character range to &lt;code&gt;typeof(null)&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt; if the range spells &lt;code&gt;&quot;null&quot;&lt;/code&gt;. This function is case insensitive.</source>
          <target state="translated">文字範囲を &lt;code&gt;typeof(null)&lt;/code&gt; に解析すると、その範囲が &lt;code&gt;&quot;null&quot;&lt;/code&gt; の場合は &lt;code&gt;null&lt;/code&gt; が返されます。この関数は大文字と小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="acb8728b53850d44b474cf8209395699a79a166a" translate="yes" xml:space="preserve">
          <source>Parsing of command-line arguments.</source>
          <target state="translated">コマンドライン引数のパース</target>
        </trans-unit>
        <trans-unit id="2e18e65dcec5e7545a8602e57cc211ae0081392b" translate="yes" xml:space="preserve">
          <source>Parsing one character off a range returns the first element and calls &lt;code&gt;popFront&lt;/code&gt;.</source>
          <target state="translated">範囲外の1文字を解析すると、最初の要素が返され、 &lt;code&gt;popFront&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2dad0714188f44cd45907047ae561e99a63a08c9" translate="yes" xml:space="preserve">
          <source>Parsing will continue until the end of the current element. Any items encountered for which a handler has been registered will invoke that handler.</source>
          <target state="translated">解析は現在の要素の最後まで続きます。ハンドラが登録されている項目に遭遇した場合は、そのハンドラが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a46e9f47f04b2771004f9c356a6d8ef5ab1cf5ec" translate="yes" xml:space="preserve">
          <source>Part of the compiler implementation of the &lt;a href=&quot;http://www.dlang.org&quot;&gt;D programming language&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.dlang.org&quot;&gt;Dプログラミング言語&lt;/a&gt;のコンパイラ実装の一部。</target>
        </trans-unit>
        <trans-unit id="2c7d58db405da47a0ea70ef1084b0193adb3b219" translate="yes" xml:space="preserve">
          <source>Partial initialization is done for types with indirections, for preservation of memory safety. Note that elements will only be initialized to 0, but not necessarily the element type's &lt;code&gt;.init&lt;/code&gt;.</source>
          <target state="translated">メモリーの安全性を維持するために、間接的な型の部分的な初期化が行われます。要素は0にのみ初期化されることに注意してください。必ずしも要素タイプの &lt;code&gt;.init&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="e5c165ff2135d9bd04e4f69754b1ce23000c2a39" translate="yes" xml:space="preserve">
          <source>Partial instantiation</source>
          <target state="translated">部分的なインスタンス化</target>
        </trans-unit>
        <trans-unit id="552793e4d3491d3b039b2e499862419408241568" translate="yes" xml:space="preserve">
          <source>Partially shuffles the elements of &lt;code&gt;r&lt;/code&gt; such that upon returning &lt;code&gt;r[0 .. n]&lt;/code&gt; is a random subset of &lt;code&gt;r&lt;/code&gt; and is randomly ordered. &lt;code&gt;r[n .. r.length]&lt;/code&gt; will contain the elements not in &lt;code&gt;r[0 .. n]&lt;/code&gt;. These will be in an undefined order, but will not be random in the sense that their order after &lt;code&gt;partialShuffle&lt;/code&gt; returns will not be independent of their order before &lt;code&gt;partialShuffle&lt;/code&gt; was called.</source>
          <target state="translated">一部の要素をシャッフル &lt;code&gt;r&lt;/code&gt; 復帰時ように &lt;code&gt;r[0 .. n]&lt;/code&gt; ランダムサブセットであり &lt;code&gt;r&lt;/code&gt; 及びランダム順序付けされます。 &lt;code&gt;r[n .. r.length]&lt;/code&gt; には、 &lt;code&gt;r[0 .. n]&lt;/code&gt; ない要素が含まれます。これらは未定義の順序になりますが、 &lt;code&gt;partialShuffle&lt;/code&gt; が返された後の順序は、 &lt;code&gt;partialShuffle&lt;/code&gt; が呼び出される前の順序から独立していないという意味ではランダムではありません。</target>
        </trans-unit>
        <trans-unit id="6deb7e3f7b32019949732214ec87ba853c993108" translate="yes" xml:space="preserve">
          <source>Particular keys in an associative array can be removed with the &lt;code&gt;remove&lt;/code&gt; function:</source>
          <target state="translated">連想配列の特定のキーは、関数 &lt;code&gt;remove&lt;/code&gt; で削除できます。</target>
        </trans-unit>
        <trans-unit id="4d8d29c37cfa9d2ee47bae5429be39d9f989f27b" translate="yes" xml:space="preserve">
          <source>Partitioning</source>
          <target state="translated">Partitioning</target>
        </trans-unit>
        <trans-unit id="b04b13ef82480fe65f509b932faa4e4d3aa51b27" translate="yes" xml:space="preserve">
          <source>Partitions &lt;code&gt;r&lt;/code&gt; around &lt;code&gt;pivot&lt;/code&gt; using comparison function &lt;code&gt;less&lt;/code&gt;, algorithm akin to &lt;a href=&quot;https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme&quot;&gt;Hoare partition&lt;/a&gt;. Specifically, permutes elements of &lt;code&gt;r&lt;/code&gt; and returns an index &lt;code&gt;k &amp;lt; r.length&lt;/code&gt; such that:</source>
          <target state="translated">パーティションは &lt;code&gt;r&lt;/code&gt; の周りに &lt;code&gt;pivot&lt;/code&gt; 比較関数を使用して、 &lt;code&gt;less&lt;/code&gt; にアルゴリズム類似、&lt;a href=&quot;https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme&quot;&gt;Hoareのパーティション&lt;/a&gt;。具体的には、 &lt;code&gt;r&lt;/code&gt; の要素を並べ替え、次のようなインデックス &lt;code&gt;k &amp;lt; r.length&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f79755d9888b3272c0008f26ee250ed68d156755" translate="yes" xml:space="preserve">
          <source>Partitions a range according to a binary predicate in three parts (less than, equal, greater than the given pivot). Pivot is not given as an index, but instead as an element independent from the range's content.</source>
          <target state="translated">二項述語に従って範囲を3つの部分(与えられたピボットより小さい、等しい、大きい)に分割します。ピボットはインデックスとしてではなく、範囲の内容から独立した要素として与えられます。</target>
        </trans-unit>
        <trans-unit id="93b7b53fcf2afd03f0b9c28b1730d679f111ebc2" translate="yes" xml:space="preserve">
          <source>Partitions a range according to a binary predicate in two parts: less than or equal, and greater than or equal to the given pivot, passed as an index in the range.</source>
          <target state="translated">範囲内のインデックスとして渡された2値述語に従って、範囲を2つの部分に分割します:範囲内のインデックスとして渡された、指定されたピボット以下と、指定されたピボット以上に分割します。</target>
        </trans-unit>
        <trans-unit id="ac2a297ca539adc310f95ab7029aa05a0e235c5d" translate="yes" xml:space="preserve">
          <source>Partitions a range according to a unary predicate.</source>
          <target state="translated">単項述語に従って範囲を分割します。</target>
        </trans-unit>
        <trans-unit id="f25bf3d69c2aa505fafd2a2553231a4df6e4f1b8" translate="yes" xml:space="preserve">
          <source>Partitions a range in two using the given &lt;code&gt;predicate&lt;/code&gt;. Specifically, reorders the range &lt;code&gt;r = [left, right)&lt;/code&gt; using &lt;code&gt;swap&lt;/code&gt; such that all elements &lt;code&gt;i&lt;/code&gt; for which &lt;code&gt;predicate(i)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; come before all elements &lt;code&gt;j&lt;/code&gt; for which &lt;code&gt;predicate(j)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;predicate&lt;/code&gt; を使用して、範囲を2つに分割します。具体的には、範囲の並べ替え &lt;code&gt;r = [left, right)&lt;/code&gt; 使用して &lt;code&gt;swap&lt;/code&gt; すべての要素ように、 &lt;code&gt;i&lt;/code&gt; れる &lt;code&gt;predicate(i)&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; すべての要素の前に来る &lt;code&gt;j&lt;/code&gt; いる &lt;code&gt;predicate(j)&lt;/code&gt; 返し &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f75fc950076ea23262b37e57dc6555e4d8852e7" translate="yes" xml:space="preserve">
          <source>Pass a long set to 1 to get the date of the requested document (if possible)! Pass a zero to shut it off.</source>
          <target state="translated">長いセットを 1 に渡すと、要求された文書の日付を取得できます (可能であれば)。ゼロを渡すとシャットダウンされます。</target>
        </trans-unit>
        <trans-unit id="3f5674a1b58ad7659cf778d1abbfee0c9e1ed868" translate="yes" xml:space="preserve">
          <source>Pass a pointer to string of the output using full variable-replacement as described elsewhere.</source>
          <target state="translated">他の場所で説明されているように、完全な変数置換を使用して出力の文字列へのポインタを渡します。</target>
        </trans-unit>
        <trans-unit id="52eba02333e380244052de14b336d30251cdb44e" translate="yes" xml:space="preserve">
          <source>Pass a range by reference. Both the original range and the RefRange will always have the exact same elements. Any operation done on one will affect the other.</source>
          <target state="translated">参照で範囲を渡します。元の範囲とRefRangeの両方とも、常に全く同じ要素を持ちます。一方で行われた操作は、他方に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="ac35e3c93500b335f934dc933300ae8ca4d024c6" translate="yes" xml:space="preserve">
          <source>Pass unrecognized arguments through</source>
          <target state="translated">認識されていない引数を</target>
        </trans-unit>
        <trans-unit id="44bd5cb378ee1ee4f1228ce102d89ccec6984f72" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;NullAllocator&lt;/code&gt; as &lt;code&gt;ParentAllocator&lt;/code&gt; (the default) means user code manages allocation of the memory block from the outside; in that case &lt;code&gt;BitmappedBlock&lt;/code&gt; must be constructed with a &lt;code&gt;ubyte[]&lt;/code&gt; preallocated block and has no responsibility regarding the lifetime of its support underlying storage. If another allocator type is passed, &lt;code&gt;BitmappedBlock&lt;/code&gt; defines a destructor that uses the parent allocator to release the memory block. That makes the combination of &lt;code&gt;AllocatorList&lt;/code&gt;, &lt;code&gt;BitmappedBlock&lt;/code&gt;, and a back-end allocator such as &lt;code&gt;MmapAllocator&lt;/code&gt; a simple and scalable solution for memory allocation.</source>
          <target state="translated">通過 &lt;code&gt;NullAllocator&lt;/code&gt; として &lt;code&gt;ParentAllocator&lt;/code&gt; （デフォルト）ユーザコードは、外部からのメモリブロックの割り当てを管理する手段と その場合、 &lt;code&gt;BitmappedBlock&lt;/code&gt; は、事前に割り当てられた &lt;code&gt;ubyte[]&lt;/code&gt; ブロックを使用して構築する必要があり、サポートの基になるストレージの存続期間に関する責任はありません。別のアロケータタイプが渡された場合、 &lt;code&gt;BitmappedBlock&lt;/code&gt; は、親アロケータを使用してメモリブロックを解放するデストラクタを定義します。すなわち、の組み合わせになり &lt;code&gt;AllocatorList&lt;/code&gt; 、 &lt;code&gt;BitmappedBlock&lt;/code&gt; 、及びバックエンドアロケータなど &lt;code&gt;MmapAllocator&lt;/code&gt; メモリ割り当てのための単純かつスケーラブルなソリューションを。</target>
        </trans-unit>
        <trans-unit id="5d0b17b99c1c31f95b843582b717ee3647838d67" translate="yes" xml:space="preserve">
          <source>Passing D Array Arguments to C Functions</source>
          <target state="translated">D配列の引数をC関数に渡す</target>
        </trans-unit>
        <trans-unit id="eab9975f41d5c74a2370c8f84743e69843a5e474" translate="yes" xml:space="preserve">
          <source>Passing unrecognized options through</source>
          <target state="translated">認識されていないオプションを通過させる</target>
        </trans-unit>
        <trans-unit id="245e083e1de3b281962953ef4c8bba890cc16972" translate="yes" xml:space="preserve">
          <source>Path separator string. A colon under POSIX, a semicolon under Windows.</source>
          <target state="translated">パスの区切り文字列。POSIXではコロン、Windowsではセミコロン。</target>
        </trans-unit>
        <trans-unit id="8a0630dfd701136ea97bb93baa3f48f2f71f6dea" translate="yes" xml:space="preserve">
          <source>Path to append the extension to</source>
          <target state="translated">拡張機能を追加するパス</target>
        </trans-unit>
        <trans-unit id="7879e48604fb8a9352e65e81497109347fdf13ce" translate="yes" xml:space="preserve">
          <source>Path to append to</source>
          <target state="translated">追加するパス</target>
        </trans-unit>
        <trans-unit id="871b729292ecc14b245e2db0bdadacebeffad0e9" translate="yes" xml:space="preserve">
          <source>Path to escape</source>
          <target state="translated">脱出への道</target>
        </trans-unit>
        <trans-unit id="ee9a42a975678be8d750fa1e306adc2573e3c20e" translate="yes" xml:space="preserve">
          <source>Path to file</source>
          <target state="translated">ファイルへのパス</target>
        </trans-unit>
        <trans-unit id="d5c2c7b442d98245aa2f83265a1b4bf791a5b2fe" translate="yes" xml:space="preserve">
          <source>Path to the output file. Empty means stdout.</source>
          <target state="translated">出力ファイルへのパス。空の場合は標準出力を意味します。</target>
        </trans-unit>
        <trans-unit id="ead499111ecd4dc6ec4cbcffe1b1a34907e01dae" translate="yes" xml:space="preserve">
          <source>Pattern element</source>
          <target state="translated">パターン要素</target>
        </trans-unit>
        <trans-unit id="bc76225c74f5799424ec5c0bcc1a8bb1758d6b49" translate="yes" xml:space="preserve">
          <source>Pattern syntax</source>
          <target state="translated">パターン構文</target>
        </trans-unit>
        <trans-unit id="ae34ebfd21aa731bd17545dfb65562d51ef9cefc" translate="yes" xml:space="preserve">
          <source>Pattern_Syntax</source>
          <target state="translated">Pattern_Syntax</target>
        </trans-unit>
        <trans-unit id="fa2b00d38cc48111285d15ff11e6749be9586681" translate="yes" xml:space="preserve">
          <source>Pattern_White_Space</source>
          <target state="translated">Pattern_White_Space</target>
        </trans-unit>
        <trans-unit id="2773f73c1260fdec728435d456edb08be91eaf8e" translate="yes" xml:space="preserve">
          <source>Pausing and continuing transfers.</source>
          <target state="translated">転送の一時停止と継続。</target>
        </trans-unit>
        <trans-unit id="a9825d613366c20e6809b1ce3e60e5a34a14dd1a" translate="yes" xml:space="preserve">
          <source>Pavel &quot;EvilOne&quot; Minayev, Alex R&amp;oslash;nne Petersen, Johannes Pfau</source>
          <target state="translated">Pavel &quot;EvilOne&quot; Minayev、AlexR&amp;oslash;nnePetersen、Johannes Pfau</target>
        </trans-unit>
        <trans-unit id="fa22cd0363497002cc358c8b4b6ff84f5941b5c4" translate="yes" xml:space="preserve">
          <source>Pc</source>
          <target state="translated">Pc</target>
        </trans-unit>
        <trans-unit id="76a62826607c85765e35f282cd82db5a3e6bbe06" translate="yes" xml:space="preserve">
          <source>Pd</source>
          <target state="translated">Pd</target>
        </trans-unit>
        <trans-unit id="b5034c4cb6e7781f4f1616341f8f6731b9bca6e2" translate="yes" xml:space="preserve">
          <source>Pe</source>
          <target state="translated">Pe</target>
        </trans-unit>
        <trans-unit id="737b6ba72b87c53c37d0b001c2aa00d7d1551419" translate="yes" xml:space="preserve">
          <source>Peek at the amount of time that the the StopWatch has been running.</source>
          <target state="translated">ストップウォッチが実行されている時間を覗いてみましょう。</target>
        </trans-unit>
        <trans-unit id="ba8e29927006e6152b4f643044adfec962f7e76c" translate="yes" xml:space="preserve">
          <source>Peek at the amount of time which has passed since the stop watch was started.</source>
          <target state="translated">ストップウォッチを開始してからの経過時間を覗く。</target>
        </trans-unit>
        <trans-unit id="c291bbfff282d82d34ba5468ffd4ea28a98b87c3" translate="yes" xml:space="preserve">
          <source>Pentium 4 (Prescott) Opcodes Supported</source>
          <target state="translated">サポートされているPentium 4 (Prescott)オペコード</target>
        </trans-unit>
        <trans-unit id="0a5cbdbd4ebf4f323d8c911e71d85e0d86957bd0" translate="yes" xml:space="preserve">
          <source>Pentium 4 Opcodes</source>
          <target state="translated">Pentium 4オペコード</target>
        </trans-unit>
        <trans-unit id="9704c847ebabc174a51703f8d46bb87c126e50e9" translate="yes" xml:space="preserve">
          <source>Per the C99 Standard, extra arguments are ignored.</source>
          <target state="translated">C99 標準では、余分な引数は無視されます。</target>
        </trans-unit>
        <trans-unit id="b95531d61182885c855fd4e357f3a17ac6875cfe" translate="yes" xml:space="preserve">
          <source>Per thread record to store thread associated data for garbage collection.</source>
          <target state="translated">スレッドレコードごとに、ガベージコレクションのためのスレッド関連データを格納します。</target>
        </trans-unit>
        <trans-unit id="03a06ad8bd49d2e4b75d4adff803a56ee9bba6c2" translate="yes" xml:space="preserve">
          <source>Perform &lt;code&gt;static foreach&lt;/code&gt; lowerings that are necessary in order to finally expand the &lt;code&gt;static foreach&lt;/code&gt; using &lt;code&gt;dmd.statementsem.makeTupleForeach&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dmd.statementsem.makeTupleForeach&lt;/code&gt; を使用して &lt;code&gt;static foreach&lt;/code&gt; を最終的に拡張するために必要な &lt;code&gt;static foreach&lt;/code&gt; 低下を実行します。</target>
        </trans-unit>
        <trans-unit id="6881379825244d35d3e8d9a76db4341cbfb7cf3b" translate="yes" xml:space="preserve">
          <source>Perform a http request.</source>
          <target state="translated">httpリクエストを実行します。</target>
        </trans-unit>
        <trans-unit id="9e8bf93c00f6d0187fa920c5e2e73b433a1a8816" translate="yes" xml:space="preserve">
          <source>Perform a semantic equivalent 2 operations: decoding a &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; at front of &lt;code&gt;inp&lt;/code&gt; and testing if it belongs to the set of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt; of this matcher.</source>
          <target state="translated">セマンティック同等の2つの操作を実行し&lt;a href=&quot;#Code%20point&quot;&gt;ます&lt;/a&gt; &lt;code&gt;inp&lt;/code&gt; 前のコードポイントをデコードし、それがこの正規表現エンジンの&lt;a href=&quot;#Code%20point&quot;&gt;コードポイント&lt;/a&gt;のセットに属しているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="270a7cd4b73a5b4c8e1329fbcbf3a7a8d8f1d4a2" translate="yes" xml:space="preserve">
          <source>Perform buffered I/O.</source>
          <target state="translated">バッファ付きI/Oを実行します。</target>
        </trans-unit>
        <trans-unit id="3dce937804704adcedb8a3097f48c2d0bc2d294f" translate="yes" xml:space="preserve">
          <source>Perform semantic analysis and CTFE on expressions to produce a string.</source>
          <target state="translated">式に対して意味解析やCTFEを行い、文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="a3329e2a22d0cffbeb60b029314ab72b31e6cebc" translate="yes" xml:space="preserve">
          <source>Perform semantic analysis on InlineAsmStatement.</source>
          <target state="translated">InlineAsmStatementのセマンティック分析を実行します。</target>
        </trans-unit>
        <trans-unit id="9770620faed7403bb8c0ecc06d0e36a7f5251164" translate="yes" xml:space="preserve">
          <source>Perform semantic analysis on a type.</source>
          <target state="translated">型の意味解析を行います。</target>
        </trans-unit>
        <trans-unit id="a7f660ada612d7566103025f0017720a6ab15950" translate="yes" xml:space="preserve">
          <source>Perform semantic analysis on init.</source>
          <target state="translated">initでセマンティック解析を実行します。</target>
        </trans-unit>
        <trans-unit id="f3bec592477a6e10ca8657fca997d67349936f34" translate="yes" xml:space="preserve">
          <source>Perform semantic() on an array of Expressions.</source>
          <target state="translated">式の配列に対して semantic()を実行します。</target>
        </trans-unit>
        <trans-unit id="d80d3e557db27f6dafd2b8a5e1f5d0b5a1124a0a" translate="yes" xml:space="preserve">
          <source>Perform the &quot;inline copying&quot; of a default argument for a function parameter.</source>
          <target state="translated">関数パラメータのデフォルト引数の「インラインコピー」を実行します。</target>
        </trans-unit>
        <trans-unit id="69cc04c0fc19d1f6ca88e58a0f4c875dd2042d44" translate="yes" xml:space="preserve">
          <source>Perform the operation in infinite precision</source>
          <target state="translated">無限の精度で操作を行う</target>
        </trans-unit>
        <trans-unit id="dbb33629b27f400be6080e4a52ca1b7eeddba75f" translate="yes" xml:space="preserve">
          <source>Performance is optimized for numbers below ~1000 decimal digits. For X86 machines, highly optimised assembly routines are used.</source>
          <target state="translated">パフォーマンスは、~1000桁以下の10進数で最適化されています。X86マシンでは、高度に最適化されたアセンブリルーチンが使用されます。</target>
        </trans-unit>
        <trans-unit id="0fcaad6a9538475080af9cc6d30bbac007d9ec46" translate="yes" xml:space="preserve">
          <source>Performing parallel reductions with an imperative, as opposed to functional, programming style. In this case, it's useful to treat &lt;code&gt;WorkerLocalStorageStorage&lt;/code&gt; as local to each thread for only the parallel portion of an algorithm.</source>
          <target state="translated">関数型プログラミングスタイルではなく、命令型を使用して並列削減を実行する。この場合、アルゴリズムの並列部分でのみ、 &lt;code&gt;WorkerLocalStorageStorage&lt;/code&gt; を各スレッドのローカルとして扱うと便利です。</target>
        </trans-unit>
        <trans-unit id="a79e877a4a8d751b334bc1205fab1f501d2da5e7" translate="yes" xml:space="preserve">
          <source>Performs &amp;Omicron;(&lt;code&gt;max(front.length, back.length)&lt;/code&gt;) evaluations of &lt;code&gt;swap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;swap&lt;/code&gt; の &amp;Omicron;（ &lt;code&gt;max(front.length, back.length)&lt;/code&gt; ）評価を実行します。</target>
        </trans-unit>
        <trans-unit id="27b39dff0e45fd8fe7d05db83b932261b700cb97" translate="yes" xml:space="preserve">
          <source>Performs &amp;Omicron;(&lt;code&gt;r.length&lt;/code&gt;) (if unstable or semistable) or &amp;Omicron;(&lt;code&gt;r.length * log(r.length)&lt;/code&gt;) (if stable) evaluations of &lt;code&gt;less&lt;/code&gt; and &lt;code&gt;swap&lt;/code&gt;. The unstable version computes the minimum possible evaluations of &lt;code&gt;swap&lt;/code&gt; (roughly half of those performed by the semistable version).</source>
          <target state="translated">&amp;Omicron;（ &lt;code&gt;r.length&lt;/code&gt; ）（不安定または準安定の場合）または&amp;Omicron;（ &lt;code&gt;r.length * log(r.length)&lt;/code&gt; ）（安定の場合） &lt;code&gt;less&lt;/code&gt; および &lt;code&gt;swap&lt;/code&gt; の評価を実行します。不安定版は、 &lt;code&gt;swap&lt;/code&gt; 可能な最小の評価を計算します（準安定版で実行される評価の約半分）。</target>
        </trans-unit>
        <trans-unit id="7049fba4f4d6daf9ed4727bd1cf2d991410e1334" translate="yes" xml:space="preserve">
          <source>Performs a &lt;a href=&quot;https://en.wikipedia.org/wiki/Exponential_search&quot;&gt; galloping search algorithm&lt;/a&gt;, i.e. searches with a step that doubles every time, (1, 2, 4, 8, ...) leading to an exponential search schedule (indexes tried are 0, 1, 3, 7, 15, 31, 63,...) Once the search overshoots its target, the remaining interval is searched using binary search. A value is found in &amp;Omicron;(&lt;code&gt;log(n)&lt;/code&gt;) time.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Exponential_search&quot;&gt;ギャロッピング検索アルゴリズムを&lt;/a&gt;実行します。つまり、毎回倍になるステップ（1、2、4、8、...）で検索し、指数検索スケジュールを導きます（試行されるインデックスは0、1、3、7、15、31です） 、63、...）検索がターゲットをオーバーシュートすると、残りの間隔がバイナリ検索を使用して検索されます。 value（ &lt;code&gt;log(n)&lt;/code&gt; ）時間で値が見つかります。</target>
        </trans-unit>
        <trans-unit id="a4b95a2b7c7b269fa91631feadfef7e99a6021a5" translate="yes" xml:space="preserve">
          <source>Performs a lexicographical comparison on two &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input ranges&lt;/a&gt;. Iterating &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; in lockstep, &lt;code&gt;cmp&lt;/code&gt; compares each element &lt;code&gt;e1&lt;/code&gt; of &lt;code&gt;r1&lt;/code&gt; with the corresponding element &lt;code&gt;e2&lt;/code&gt; in &lt;code&gt;r2&lt;/code&gt;. If one of the ranges has been finished, &lt;code&gt;cmp&lt;/code&gt; returns a negative value if &lt;code&gt;r1&lt;/code&gt; has fewer elements than &lt;code&gt;r2&lt;/code&gt;, a positive value if &lt;code&gt;r1&lt;/code&gt; has more elements than &lt;code&gt;r2&lt;/code&gt;, and &lt;code&gt;0&lt;/code&gt; if the ranges have the same number of elements.</source>
          <target state="translated">2つの&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲で&lt;/a&gt;辞書式比較を実行します。反復 &lt;code&gt;r1&lt;/code&gt; と &lt;code&gt;r2&lt;/code&gt; ロックステップでは、 &lt;code&gt;cmp&lt;/code&gt; 各要素と比較 &lt;code&gt;e1&lt;/code&gt; の &lt;code&gt;r1&lt;/code&gt; 対応する要素と &lt;code&gt;e2&lt;/code&gt; で &lt;code&gt;r2&lt;/code&gt; 。範囲のいずれかが終了した場合、 &lt;code&gt;cmp&lt;/code&gt; あれば負の値を返し &lt;code&gt;r1&lt;/code&gt; より少ない要素持つ &lt;code&gt;r2&lt;/code&gt; あれば、正の値を &lt;code&gt;r1&lt;/code&gt; より多くの要素有し &lt;code&gt;r2&lt;/code&gt; 、そして &lt;code&gt;0&lt;/code&gt; 範囲は同じ数の要素を持っている場合。</target>
        </trans-unit>
        <trans-unit id="932aa4f60fe6023c69792e4a248e389ddc01276a" translate="yes" xml:space="preserve">
          <source>Performs either compare-and-set or compare-and-swap (or exchange).</source>
          <target state="translated">比較・設定または比較・スワップ(または交換)を実行します。</target>
        </trans-unit>
        <trans-unit id="125bedfc6490366279c7f8e529677bc639cfff43" translate="yes" xml:space="preserve">
          <source>Performs read-modify-write operation at specified index into the container.</source>
          <target state="translated">コンテナに指定されたインデックスで読み込み・変更・書き込み操作を行います。</target>
        </trans-unit>
        <trans-unit id="a3373eec995027ee6a7bacd42ba54d403267caec" translate="yes" xml:space="preserve">
          <source>Performs semantic on TemplateParameter AST nodes.</source>
          <target state="translated">TemplateParameter ASTノードのセマンティックを行います。</target>
        </trans-unit>
        <trans-unit id="2c7b10877a602224a5ce8fabad8229c99d42b2b7" translate="yes" xml:space="preserve">
          <source>Performs the binary operation 'op' on val using 'mod' as the modifier.</source>
          <target state="translated">mod' を修飾子として使用して、val のバイナリ演算 'op' を実行します。</target>
        </trans-unit>
        <trans-unit id="8fb9c991fb0173deed6c7ec1a030027befb93171" translate="yes" xml:space="preserve">
          <source>Performs the ftp request as it has been configured.</source>
          <target state="translated">設定された通りに ftp リクエストを実行します。</target>
        </trans-unit>
        <trans-unit id="49a882c0eaebe773b4d43b5c1340a25d26b54f1a" translate="yes" xml:space="preserve">
          <source>Performs the lookup of set of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt; with compile-time correctness checking. This short-cut version combines 3 searches: across blocks, scripts, and common binary properties.</source>
          <target state="translated">コンパイル時の正当性チェックで&lt;a href=&quot;#Code%20point&quot;&gt;コードポイント&lt;/a&gt;のセットのルックアップを実行します。このショートカットバージョンは、ブロック全体、スクリプト、および一般的なバイナリプロパティの3つの検索を組み合わせています。</target>
        </trans-unit>
        <trans-unit id="adceff9860a6c21999e0bdf69ad270c04b8f427c" translate="yes" xml:space="preserve">
          <source>Performs the request as configured.</source>
          <target state="translated">構成通りに要求を実行します。</target>
        </trans-unit>
        <trans-unit id="45a792110f052e24be5dc1e7a32ab8481f32dde5" translate="yes" xml:space="preserve">
          <source>Performs the same task as &lt;a href=&quot;#buildPath&quot;&gt;&lt;code&gt;buildPath&lt;/code&gt;&lt;/a&gt;, while at the same time resolving current/parent directory symbols (&lt;code&gt;&quot;.&quot;&lt;/code&gt; and &lt;code&gt;&quot;..&quot;&lt;/code&gt;) and removing superfluous directory separators. It will return &quot;.&quot; if the path leads to the starting directory. On Windows, slashes are replaced with backslashes.</source>
          <target state="translated">&lt;a href=&quot;#buildPath&quot;&gt; &lt;code&gt;buildPath&lt;/code&gt; &lt;/a&gt;と同じタスクを実行すると同時に、現在/親ディレクトリシンボル（ &lt;code&gt;&quot;.&quot;&lt;/code&gt; および &lt;code&gt;&quot;..&quot;&lt;/code&gt; ）を解決し、余分なディレクトリセパレータを削除します。「。」を返します。パスが開始ディレクトリにつながる場合。Windowsでは、スラッシュはバックスラッシュに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="2d95c20aebc021d83537913ab5e8c2caaa3c4c7f" translate="yes" xml:space="preserve">
          <source>Performs tilde expansion in paths on POSIX systems. On Windows, this function does nothing.</source>
          <target state="translated">POSIX システム上のパスでチルダ展開を実行します。Windowsでは、この関数は何もしません。</target>
        </trans-unit>
        <trans-unit id="1a08bc377528194036561375e26f9d9fa5984f3c" translate="yes" xml:space="preserve">
          <source>Period is &lt;code&gt;2 ^^ nbits - 1&lt;/code&gt; except for a legacy 192-bit uint version (see note below).</source>
          <target state="translated">期間は &lt;code&gt;2 ^^ nbits - 1&lt;/code&gt; ですが、レガシーの192ビットuintバージョンは除きます（下記の注を参照）。</target>
        </trans-unit>
        <trans-unit id="171c5560fc34e8a8a4af348c5e5f4ecdb2765fc4" translate="yes" xml:space="preserve">
          <source>Permission used when creating new files and directories on the remote server for protocols that support it, SFTP/SCP/FILE</source>
          <target state="translated">SFTP/SCP/FILE/FILE をサポートするプロトコルで、リモートサーバー上に新しいファイルやディレクトリを作成する際に使用される許可</target>
        </trans-unit>
        <trans-unit id="20240c4f510895ba885486432888b65c0241d82d" translate="yes" xml:space="preserve">
          <source>PermissiveVisitor overrides all the visit methods in the parent class that assert(0) in order to facilitate the traversal of subsets of the AST. It does not implement any visiting logic.</source>
          <target state="translated">PermissiveVisitorは、ASTのサブセットの探索を容易にするために、親クラスのassert(0)のすべての訪問メソッドをオーバーライドします。これは訪問ロジックを実装していません。</target>
        </trans-unit>
        <trans-unit id="f4f192f4cb2e3ed05cc4e9839c0ce15a34e4dec6" translate="yes" xml:space="preserve">
          <source>Permutations!Range &lt;strong id=&quot;permutations&quot;&gt;permutations&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">順列！範囲&lt;strong id=&quot;permutations&quot;&gt;順列&lt;/strong&gt;（範囲）（範囲r）</target>
        </trans-unit>
        <trans-unit id="9814ff21659d24b67c90ccf4b1670f3530e3e4ea" translate="yes" xml:space="preserve">
          <source>Permutes &lt;code&gt;range&lt;/code&gt; in-place to the next lexicographically greater</source>
          <target state="translated">順列 &lt;code&gt;range&lt;/code&gt; 、インプレースで次の辞書編集的に大きな範囲に及びます</target>
        </trans-unit>
        <trans-unit id="47d68c1d1d8f096dc79c29a375f3002be6a50e66" translate="yes" xml:space="preserve">
          <source>Permutes &lt;code&gt;range&lt;/code&gt; in-place to the next lexicographically greater permutation.</source>
          <target state="translated">順列 &lt;code&gt;range&lt;/code&gt; 、インプレースで次の辞書編集的に大きい順列の範囲です。</target>
        </trans-unit>
        <trans-unit id="bc4059a2c730084630f46b548fe60ee6f2f7260d" translate="yes" xml:space="preserve">
          <source>Permutes &lt;code&gt;range&lt;/code&gt; into the &lt;code&gt;perm&lt;/code&gt; permutation. The algorithm has a constant runtime complexity with respect to the number of permutations created. Due to the number of unique values of &lt;code&gt;ulong&lt;/code&gt; only the first 21 elements of &lt;code&gt;range&lt;/code&gt; can be permuted. The rest of the range will therefore not be permuted. This algorithm uses the &lt;a href=&quot;http://en.wikipedia.org/wiki/Lehmer_code&quot;&gt;Lehmer Code&lt;/a&gt;.</source>
          <target state="translated">並べ替えるには、 &lt;code&gt;range&lt;/code&gt; に &lt;code&gt;perm&lt;/code&gt; 順列。このアルゴリズムは、作成された順列の数に関して一定の実行時の複雑さを持っています。 &lt;code&gt;ulong&lt;/code&gt; の一意の値の数により、 &lt;code&gt;range&lt;/code&gt; 最初の21個の要素のみを並べ替えることができます。したがって、残りの範囲は並べ替えられません。このアルゴリズムは、&lt;a href=&quot;http://en.wikipedia.org/wiki/Lehmer_code&quot;&gt;レーマーコードを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="a622b04f0075ee8f74f7b83a671a79ee4cbd7fc0" translate="yes" xml:space="preserve">
          <source>Permutes &lt;code&gt;range&lt;/code&gt; into the &lt;code&gt;perm&lt;/code&gt; permutation. The algorithm has a constant runtime complexity with respect to the number of permutations created. Due to the number of unique values of &lt;code&gt;ulong&lt;/code&gt; only the first 21 elements of &lt;code&gt;range&lt;/code&gt; can be permuted. The rest of the range will therefore not be permuted. This algorithm uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Lehmer_code&quot;&gt;Lehmer Code&lt;/a&gt;.</source>
          <target state="translated">並べ替えるには、 &lt;code&gt;range&lt;/code&gt; に &lt;code&gt;perm&lt;/code&gt; 順列。アルゴリズムには、作成される順列の数に関して一定の実行時の複雑さがあります。 &lt;code&gt;ulong&lt;/code&gt; の一意の値の数により、 &lt;code&gt;range&lt;/code&gt; 最初の21要素のみを並べ替えることができます。したがって、残りの範囲は並べ替えられません。このアルゴリズムは&lt;a href=&quot;https://en.wikipedia.org/wiki/Lehmer_code&quot;&gt;レーマー符号を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="40d6660e437b349bdcacf2f3e77734577c86a86d" translate="yes" xml:space="preserve">
          <source>Pf</source>
          <target state="translated">Pf</target>
        </trans-unit>
        <trans-unit id="0b8800ca3abc78cb24f838a046a98f359b8f828e" translate="yes" xml:space="preserve">
          <source>Phags-pa</source>
          <target state="translated">Phags-pa</target>
        </trans-unit>
        <trans-unit id="a1fbe41a1fd16bc593d390402b8a1d609687aad4" translate="yes" xml:space="preserve">
          <source>Phags_Pa</source>
          <target state="translated">Phags_Pa</target>
        </trans-unit>
        <trans-unit id="690f59d7fc7811f820e457a94560e3193f08fc84" translate="yes" xml:space="preserve">
          <source>Phaistos Disc</source>
          <target state="translated">ファイストスディスク</target>
        </trans-unit>
        <trans-unit id="2f8d593b2f2f827f8bfaa4cd70608d331d03efeb" translate="yes" xml:space="preserve">
          <source>Phases of Compilation</source>
          <target state="translated">コンパイルのフェーズ</target>
        </trans-unit>
        <trans-unit id="2de5476a4ccc050377fe5448cfcedc724b906da9" translate="yes" xml:space="preserve">
          <source>Phases of Processing</source>
          <target state="translated">処理の段階</target>
        </trans-unit>
        <trans-unit id="75f01355c8572c29448739b8c1da01c02b9b2517" translate="yes" xml:space="preserve">
          <source>Phobos Runtime Library</source>
          <target state="translated">Phobos ランタイムライブラリ</target>
        </trans-unit>
        <trans-unit id="4bf0ae86028cd4735fa6d30d00b782060cf1c131" translate="yes" xml:space="preserve">
          <source>Phobos is the standard runtime library that comes with the D language compiler.</source>
          <target state="translated">PhobosはD言語コンパイラに付属の標準ランタイムライブラリです。</target>
        </trans-unit>
        <trans-unit id="2f182fe170adaf16b14bcef0b9bb20b231bf94f0" translate="yes" xml:space="preserve">
          <source>Phobos provides the following functionality for time:    This functionality is separated into the following modules</source>
          <target state="translated">Phobosは、時間に関する以下の機能を提供しています。この機能は以下のモジュールに分かれています。</target>
        </trans-unit>
        <trans-unit id="6908ab9bda0e225ecfd064a3d987f42cfc69e74c" translate="yes" xml:space="preserve">
          <source>Phoenician</source>
          <target state="translated">Phoenician</target>
        </trans-unit>
        <trans-unit id="39ead51340b227e68cc17352e9842e3846b38635" translate="yes" xml:space="preserve">
          <source>Phonetic Extensions</source>
          <target state="translated">音声拡張子</target>
        </trans-unit>
        <trans-unit id="652915d71b26e32e7a6a196e8ba77ddfdb77afcf" translate="yes" xml:space="preserve">
          <source>Phonetic Extensions Supplement</source>
          <target state="translated">音声拡張子の補足</target>
        </trans-unit>
        <trans-unit id="a13438854aceabf5a965c5bd61f9c40684610db5" translate="yes" xml:space="preserve">
          <source>Pi</source>
          <target state="translated">Pi</target>
        </trans-unit>
        <trans-unit id="f398c7e78f56808cbcbff7a50fe6e2ac8277c2b8" translate="yes" xml:space="preserve">
          <source>Pick off one of the storage classes from stc, and return a string representation of it. stc is reduced by the one picked.</source>
          <target state="translated">stcからストレージクラスの1つをピックオフし、それを文字列で表現したものを返します。</target>
        </trans-unit>
        <trans-unit id="8244da7920c1ba38d0c027418ea1aae6493f1225" translate="yes" xml:space="preserve">
          <source>Picking a good initial guess is an art, but you usually can pick a value covering 99% of the cases. For example, when gathering user input from the console - it's unlikely to be longer than 80.</source>
          <target state="translated">最初の良い推測を選ぶのは芸術ですが、通常は99%のケースをカバーする値を選ぶことができます。例えば、コンソールからユーザーの入力を収集する場合、80以上の長さになることはまずありません。</target>
        </trans-unit>
        <trans-unit id="e53f69a39919b0a915ebc9873dad685de7a8a9ff" translate="yes" xml:space="preserve">
          <source>Picks one value in an unspecified position in the container, removes it from the container, and returns it. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">コンテナ内の指定されていない位置にある1つの値をピックしてコンテナから削除し、それを返します。安定版の動作は同じですが、コンテナを反復する範囲が無効にならないことが保証されています。</target>
        </trans-unit>
        <trans-unit id="ff2655a1a6e1bb2c64ceacb981dca367486334be" translate="yes" xml:space="preserve">
          <source>Piotr Szturmaj, Kai Nacke, Johannes Pfau</source>
          <target state="translated">ピョートル・ストゥルマーイ、カイ・ナッケ、ヨハネス・プファウ</target>
        </trans-unit>
        <trans-unit id="56cdfa6aa8a28243be7e1b4e2cea18c6dba33f79" translate="yes" xml:space="preserve">
          <source>Pipes can, for example, be used for interprocess communication by spawning a new process and passing one end of the pipe to the child, while the parent uses the other end. (See also &lt;a href=&quot;#pipeProcess&quot;&gt;&lt;code&gt;pipeProcess&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pipeShell&quot;&gt;&lt;code&gt;pipeShell&lt;/code&gt;&lt;/a&gt; for an easier way of doing this.)</source>
          <target state="translated">たとえば、パイプは、新しいプロセスを生成し、パイプの一端を子に渡し、親が他端を使用することにより、プロセス間通信に使用できます。（これを行う簡単な方法については、&lt;a href=&quot;#pipeProcess&quot;&gt; &lt;code&gt;pipeProcess&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#pipeShell&quot;&gt; &lt;code&gt;pipeShell&lt;/code&gt; &lt;/a&gt;も参照してください。）</target>
        </trans-unit>
        <trans-unit id="f1162801a99a1678f4365b1437f7ee26e2b17365" translate="yes" xml:space="preserve">
          <source>Pipes functions in sequence. Offers the same functionality as &lt;code&gt; compose&lt;/code&gt;, but with functions specified in reverse order. This may lead to more readable code in some situation because the order of execution is the same as lexical order.</source>
          <target state="translated">関数を順番にパイプします。 &lt;code&gt; compose&lt;/code&gt; と同じ機能を提供しますが、関数を逆の順序で指定します。これにより、実行順序が字句順序と同じになるため、状況によってはコードが読みやすくなる場合があります。</target>
        </trans-unit>
        <trans-unit id="dc1a73c3606a15a51213cdf1942786e4857d3599" translate="yes" xml:space="preserve">
          <source>Place a member (mem) into an aggregate (agg), which can be a struct, union or class</source>
          <target state="translated">メンバ (mem)を構造体、ユニオン、クラスのいずれかである集約体 (agg)に配置します。</target>
        </trans-unit>
        <trans-unit id="695bd0b5f8fdfe3e3a5361a7c79d6090a91b51df" translate="yes" xml:space="preserve">
          <source>Places &lt;code&gt;b&lt;/code&gt; into the free tree.</source>
          <target state="translated">配置し &lt;code&gt;b&lt;/code&gt; 自由に木に。</target>
        </trans-unit>
        <trans-unit id="e0d23f9eee6541877d2307c6f58578451428b4f6" translate="yes" xml:space="preserve">
          <source>Places the values as a message at the back of tid's message queue.</source>
          <target state="translated">値をメッセージとして tid のメッセージキューの後ろに配置します。</target>
        </trans-unit>
        <trans-unit id="a5b257314e0f4709f60ae804ac7e7f2b742ae21e" translate="yes" xml:space="preserve">
          <source>Places the values as a message on the front of tid's message queue.</source>
          <target state="translated">値をメッセージとして tid のメッセージキューの先頭に配置します。</target>
        </trans-unit>
        <trans-unit id="94226d2878e7c617f3b3f1f3719eb4bde4fad02b" translate="yes" xml:space="preserve">
          <source>Plain Old Data</source>
          <target state="translated">プレーン・オールド・データ</target>
        </trans-unit>
        <trans-unit id="a1493d685490e2464f09fa1850399f813e512165" translate="yes" xml:space="preserve">
          <source>Plain string(s), in which case it's compiled to bytecode before matching.</source>
          <target state="translated">この場合、マッチする前にバイトコードにコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="cb23ee720e4a8686c2c10bf8539ba0643cdd0071" translate="yes" xml:space="preserve">
          <source>Platform-specific error code.</source>
          <target state="translated">プラットフォーム固有のエラーコード。</target>
        </trans-unit>
        <trans-unit id="027a81920a729c2258e1d82d39649acdc7dffe11" translate="yes" xml:space="preserve">
          <source>Playing Cards</source>
          <target state="translated">トランプ</target>
        </trans-unit>
        <trans-unit id="03706f3dc028771782bc46899efa2883e38b6817" translate="yes" xml:space="preserve">
          <source>Please note that this mutex is not recursive and is intended to guard access to data only. Also, no deadlock checking is in place because doing so would require dynamic memory allocation, which would reduce performance by an unacceptable amount. As a result, any attempt to recursively acquire this mutex may well deadlock the caller, particularly if a write lock is acquired while holding a read lock, or vice-versa. In practice, this should not be an issue however, because it is uncommon to call deeply into unknown code while holding a lock that simply protects data.</source>
          <target state="translated">このミューテックスは再帰的ではなく、データへのアクセスのみを保護することを意図していることに注意してください。また、デッドロック・チェックは行われていませんが、これは動的なメモリ割り当てを必要とするため、許容できない量のパフォーマンスを低下させることになります。その結果、このミューテックスを再帰的に取得しようとすると、特にリードロックを保持している間にライトロックが取得された場合や、その逆の場合、呼び出し元がデッドロックになる可能性があります。データを保護するだけのロックを保持している間に未知のコードを深く呼び出すことはめったにないので、実際にはこれは問題にはなりません。</target>
        </trans-unit>
        <trans-unit id="5d56891bc4466df536e092c37941f4065e37d9b8" translate="yes" xml:space="preserve">
          <source>Please see the documentation of function &lt;a href=&quot;#formattedWrite&quot;&gt;&lt;code&gt;formattedWrite&lt;/code&gt;&lt;/a&gt; for a description of the format string.</source>
          <target state="translated">フォーマット文字列の説明については、&lt;a href=&quot;#formattedWrite&quot;&gt; &lt;code&gt;formattedWrite&lt;/code&gt; &lt;/a&gt;関数のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1cddd8e6f160f9c012ad14047eb479084fe64ddb" translate="yes" xml:space="preserve">
          <source>Po</source>
          <target state="translated">Po</target>
        </trans-unit>
        <trans-unit id="98c8146cc9957cbbd6191153319b7d3f7d45b96d" translate="yes" xml:space="preserve">
          <source>Pointer Arithmetic</source>
          <target state="translated">ポインタ演算</target>
        </trans-unit>
        <trans-unit id="e6a2fdb11c42c1ae52e79abd0552ecd4e047a046" translate="yes" xml:space="preserve">
          <source>Pointer Conversions</source>
          <target state="translated">ポインタの変換</target>
        </trans-unit>
        <trans-unit id="856c91ff14adec92ce2bc660c71d5eac79f08ca9" translate="yes" xml:space="preserve">
          <source>Pointer State Transitions</source>
          <target state="translated">ポインタの状態遷移</target>
        </trans-unit>
        <trans-unit id="149c3d09326d64bbad62958afe8efc64374edd93" translate="yes" xml:space="preserve">
          <source>Pointer States</source>
          <target state="translated">ポインター国家</target>
        </trans-unit>
        <trans-unit id="969e7d33b963ce1f275892b62721d3ce0b9f1543" translate="yes" xml:space="preserve">
          <source>Pointer comparisons between independent memory blocks will generate a compile-time error, unless two such comparisons are combined using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt;&lt;code&gt;|&lt;/code&gt; to yield a result which is independent of the ordering of memory blocks. Each comparison must consist of two pointer expressions compared with &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;, and may optionally be negated with &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; または &lt;code&gt;|&lt;/code&gt; を使用して2つの比較を組み合わせない限り、独立したメモリブロック間のポインター比較はコンパイル時エラーを生成します。 &lt;code&gt;|&lt;/code&gt; メモリブロックの順序に依存しない結果を生成します。各比較は、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、または &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; と比較される2つのポインタ式で構成されている必要があり、オプションで &lt;code&gt;!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d8ba274f62726cd16cfdb74920784e055bc3fed" translate="yes" xml:space="preserve">
          <source>Pointer operations</source>
          <target state="translated">ポインタ演算</target>
        </trans-unit>
        <trans-unit id="f73f4002533a013222fe5260f3358d17ac5e821c" translate="yes" xml:space="preserve">
          <source>Pointer to an array. Must not be null.</source>
          <target state="translated">配列へのポインタ.null であってはなりません。</target>
        </trans-unit>
        <trans-unit id="5076bca24670e24c6621a2cb89582af335d5f43f" translate="yes" xml:space="preserve">
          <source>Pointer to command string to send if USER/PASS fails.</source>
          <target state="translated">USER/PASSが失敗した場合に送信するコマンド文字列へのポインタ。</target>
        </trans-unit>
        <trans-unit id="06f9d51c1c7abebe17ab3977ba3899554ca3ab4c" translate="yes" xml:space="preserve">
          <source>Pointer to freeing function for the data pointer (use FPNULL if none)</source>
          <target state="translated">データポインタの解放関数へのポインタ (ない場合は FPNULL を使用)</target>
        </trans-unit>
        <trans-unit id="dc0cefd5a5a7541421f720b0bffc14b9f52d1fb1" translate="yes" xml:space="preserve">
          <source>Pointer to list to free</source>
          <target state="translated">フリーへのリストへのポインタ</target>
        </trans-unit>
        <trans-unit id="9190dc9c093562a49c468d28217d7e00753efdb2" translate="yes" xml:space="preserve">
          <source>Pointer to string conversions convert the pointer to a &lt;code&gt;size_t&lt;/code&gt; value. If pointer is &lt;code&gt;char*&lt;/code&gt;, treat it as C-style strings. In that case, this function is &lt;code&gt;@system&lt;/code&gt;.</source>
          <target state="translated">ポインタから文字列への変換は、ポインタを &lt;code&gt;size_t&lt;/code&gt; 値に変換します。ポインタが &lt;code&gt;char*&lt;/code&gt; 場合は、Cスタイルの文字列として扱います。その場合、この関数は &lt;code&gt;@system&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="68f4cf9a19016a952bc2822c32f67d451b70e07f" translate="yes" xml:space="preserve">
          <source>Pointer to string conversions prints the pointer as a &lt;code&gt;size_t&lt;/code&gt; value. If pointer is &lt;code&gt;char*&lt;/code&gt;, treat it as C-style strings. In that case, this function is &lt;code&gt;@system&lt;/code&gt;.</source>
          <target state="translated">文字列変換へのポインタは、ポインタを &lt;code&gt;size_t&lt;/code&gt; 値として出力します。ポインタが &lt;code&gt;char*&lt;/code&gt; 場合、Cスタイルの文字列として扱います。その場合、この関数は &lt;code&gt;@system&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c5b722fc5ad9faac57dfe90f51b7e6e51ad5a968" translate="yes" xml:space="preserve">
          <source>Pointers</source>
          <target state="translated">Pointers</target>
        </trans-unit>
        <trans-unit id="ff4be6e4f9b5590ddf9dfe02916964c4f8ab7d67" translate="yes" xml:space="preserve">
          <source>Pointers and object references will increase in size from 4 bytes to 8 bytes going from 32 to 64 bit code.</source>
          <target state="translated">ポインタとオブジェクト参照のサイズは、32ビットから64ビットのコードでは4バイトから8バイトに増加します。</target>
        </trans-unit>
        <trans-unit id="7f833d9959f6dc21eb0139b1e1d09ff93afcd672" translate="yes" xml:space="preserve">
          <source>Pointers and the Garbage Collector</source>
          <target state="translated">ポインターとゴミ収集機</target>
        </trans-unit>
        <trans-unit id="b62503261da1d0e85d8812c54a796b3826868e30" translate="yes" xml:space="preserve">
          <source>Pointers are 32 bits, but words are still 64 bits (x32 ABI) (This can be defined in parallel to &lt;code&gt;X86_64&lt;/code&gt;)</source>
          <target state="translated">ポインターは32ビットですが、ワードは依然として64ビット（x32 ABI）です（これは &lt;code&gt;X86_64&lt;/code&gt; と並行して定義できます）</target>
        </trans-unit>
        <trans-unit id="ee00272ddc3bae06ffd868c358f7dc324ab87c5e" translate="yes" xml:space="preserve">
          <source>Pointers are 64 bits (command line switch &lt;a href=&quot;https://dlang.org/dmd.html#switch-m64&quot;&gt;&lt;em&gt;-m64&lt;/em&gt;&lt;/a&gt;). (Do not confuse this with C's LP64 model)</source>
          <target state="translated">ポインターは64ビットです（コマンドラインスイッチ&lt;a href=&quot;https://dlang.org/dmd.html#switch-m64&quot;&gt;&lt;em&gt;-m64&lt;/em&gt;&lt;/a&gt;）。（これをCのLP64モデルと混同しないでください）</target>
        </trans-unit>
        <trans-unit id="8299cb78e9d5361ffb94a50c6be3064ecd777f86" translate="yes" xml:space="preserve">
          <source>Pointers are formatted as hex integers.</source>
          <target state="translated">ポインタは16進整数でフォーマットされています。</target>
        </trans-unit>
        <trans-unit id="81beea5be49de828523c7b83cb83e263a8c723ad" translate="yes" xml:space="preserve">
          <source>Pointers are initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">ポインタは &lt;code&gt;null&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="b564720393e1a126ee7c19e9b2ab29ecee13c4aa" translate="yes" xml:space="preserve">
          <source>Pointers are permitted in CTFE, provided they are used safely:</source>
          <target state="translated">CTFEでは、ポインターを安全に使用することを条件に、ポインターを使用することができます。</target>
        </trans-unit>
        <trans-unit id="33b50f6cb0549c10f645097a33ea92d4e40b3b8e" translate="yes" xml:space="preserve">
          <source>Pointers in D can be broadly divided into two categories: Those that point to garbage collected memory, and those that do not. Examples of the latter are pointers created by calls to C's malloc(), pointers received from C library routines, pointers to static data, pointers to objects on the stack, etc. For those pointers, anything that is legal in C can be done with them.</source>
          <target state="translated">D のポインタは大きく分けて 2 つのカテゴリに分けることができます。ガベージコレクションされたメモリを指すものと、そうでないものです。後者の例としては、C の malloc()の呼び出しによって生成されたポインタ、C のライブラリルーチンから受け取ったポインタ、スタティックデータへのポインタ、スタック上のオブジェクトへのポインタなどがあります。これらのポインタについては、C言語で合法的なことは何でもできます。</target>
        </trans-unit>
        <trans-unit id="07f1578da80dda793e1b2a12af8d61bddaecaaca" translate="yes" xml:space="preserve">
          <source>Pointers to data</source>
          <target state="translated">データへのポインタ</target>
        </trans-unit>
        <trans-unit id="3e95a08c7f10554dbb4f1d987f31459800a05579" translate="yes" xml:space="preserve">
          <source>Pointers to functions are declared using the &lt;code&gt;function&lt;/code&gt; keyword:</source>
          <target state="translated">関数へのポインタは &lt;code&gt;function&lt;/code&gt; キーワードを使用して宣言されます。</target>
        </trans-unit>
        <trans-unit id="ba2ae989bf15107b84383ac16b45e244a6749266" translate="yes" xml:space="preserve">
          <source>Points in Time</source>
          <target state="translated">時の流れの中でのポイント</target>
        </trans-unit>
        <trans-unit id="8d61184962dda249c7c096096c40ff46b825f4a7" translate="yes" xml:space="preserve">
          <source>Policies</source>
          <target state="translated">Policies</target>
        </trans-unit>
        <trans-unit id="af58401ee9469729541dac0b751cce965eea718d" translate="yes" xml:space="preserve">
          <source>Policy &lt;code&gt;policy&lt;/code&gt;</source>
          <target state="translated">ポリシー &lt;code&gt;policy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc91f995ebb93a2f7e56c21f73e82fc61f5b2a4c" translate="yes" xml:space="preserve">
          <source>Policy used with the searching primitives &lt;code&gt;lowerBound&lt;/code&gt;, &lt;code&gt; upperBound&lt;/code&gt;, and &lt;code&gt;equalRange&lt;/code&gt; of &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt; below.</source>
          <target state="translated">検索プリミティブで使用されるポリシーは &lt;code&gt;lowerBound&lt;/code&gt; 、 &lt;code&gt; upperBound&lt;/code&gt; 、そして &lt;code&gt;equalRange&lt;/code&gt; の&lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; &lt;/a&gt;以下。</target>
        </trans-unit>
        <trans-unit id="3a08168a4a6e709754913e5ffddfbc3155fa15c7" translate="yes" xml:space="preserve">
          <source>Pop and return top of chained exception stack.</source>
          <target state="translated">チェーンされた例外スタックの先頭をポップして返します。</target>
        </trans-unit>
        <trans-unit id="e3b2083d9073caa149a44c741a28f14a49836e82" translate="yes" xml:space="preserve">
          <source>PopFirst &lt;code&gt;popFirst&lt;/code&gt;</source>
          <target state="translated">ポップ &lt;code&gt;popFirst&lt;/code&gt; ポップファースト</target>
        </trans-unit>
        <trans-unit id="39b1331a2764ebac317450573122cb14748e0954" translate="yes" xml:space="preserve">
          <source>Pops &lt;code&gt;front&lt;/code&gt; from the range, using &lt;code&gt;func&lt;/code&gt; to generate the next time point in the range.</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; を使用して範囲の次の時点を生成し、範囲から &lt;code&gt;front&lt;/code&gt; ポップします。</target>
        </trans-unit>
        <trans-unit id="dcdc71ebe929973a390e8aff45bb2f4747f7dcd1" translate="yes" xml:space="preserve">
          <source>Pops &lt;code&gt;front&lt;/code&gt; from the range, using &lt;code&gt;func&lt;/code&gt; to generate the next time point in the range. If the generated time point is beyond the edge of the range, then &lt;code&gt;front&lt;/code&gt; is set to that edge, and the range is then empty. So, if iterating forwards, and the generated time point is greater than the interval's &lt;code&gt;end&lt;/code&gt;, then &lt;code&gt;front&lt;/code&gt; is set to &lt;code&gt;end&lt;/code&gt;. If iterating backwards, and the generated time point is less than the interval's &lt;code&gt;begin&lt;/code&gt;, then &lt;code&gt;front&lt;/code&gt; is set to &lt;code&gt;begin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; を使用して範囲の次の時点を生成し、範囲から &lt;code&gt;front&lt;/code&gt; ポップします。生成された時点が範囲の端を超えている場合、 &lt;code&gt;front&lt;/code&gt; はその端に設定され、範囲は空になります。前方反復、および生成された時点は間隔のよりも大きいのであれば、 &lt;code&gt;end&lt;/code&gt; 、その後、 &lt;code&gt;front&lt;/code&gt; に設定されて &lt;code&gt;end&lt;/code&gt; 。後方反復、および生成された時点する区間のが未満の場合 &lt;code&gt;begin&lt;/code&gt; 、その後、 &lt;code&gt;front&lt;/code&gt; に設定され &lt;code&gt;begin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9bd2debd0b1b27ed7de52611ae792c23ffd10295" translate="yes" xml:space="preserve">
          <source>Populates the identifier pool with all predefined symbols.</source>
          <target state="translated">定義済みのすべてのシンボルで識別子プールを埋めます。</target>
        </trans-unit>
        <trans-unit id="f5507f8b7f675f44d3633ef363280afbef63c166" translate="yes" xml:space="preserve">
          <source>Port number to connect to, if other than default.</source>
          <target state="translated">デフォルト以外の場合、接続先のポート番号。</target>
        </trans-unit>
        <trans-unit id="5c5ce787a818b8d8650eac948c2f4482fe2163c4" translate="yes" xml:space="preserve">
          <source>Port of the proxy, can be set in the proxy string as well with: &lt;code&gt;[host]:[port]&lt;/code&gt;</source>
          <target state="translated">プロキシのポート。プロキシ文字列でも設定できます。 &lt;code&gt;[host]:[port]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b307b88c84327b1804aee227595be53342245965" translate="yes" xml:space="preserve">
          <source>Portability</source>
          <target state="translated">Portability</target>
        </trans-unit>
        <trans-unit id="5fc28461e5419ac5858beeeb37e698425c2fea75" translate="yes" xml:space="preserve">
          <source>PosInfInterval &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="translated">PosInfInterval &lt;code&gt;interval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d5085fcde3a9c261b3b04bd4f501bcfa1288c06" translate="yes" xml:space="preserve">
          <source>PosInfInterval &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">PosInfInterval &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="129a356d8768561b072b73ccccbf992888bea8b7" translate="yes" xml:space="preserve">
          <source>PosInfInterval!TP &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="translated">PosInfInterval！TP &lt;code&gt;interval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd0df76a280f9a11a50dd203f053db771fafee40" translate="yes" xml:space="preserve">
          <source>PosInfIntervalRange &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">PosInfIntervalRange &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9877fc3f2623b3f50c8f3184bd7c3fe011d61d3" translate="yes" xml:space="preserve">
          <source>Position Independent Code (command line switch &lt;a href=&quot;https://dlang.org/dmd-linux.html#switch-fPIC&quot;&gt;&lt;em&gt;-fPIC&lt;/em&gt;&lt;/a&gt;) is being generated</source>
          <target state="translated">位置独立コード（コマンドラインスイッチ&lt;a href=&quot;https://dlang.org/dmd-linux.html#switch-fPIC&quot;&gt;&lt;em&gt;-fPIC&lt;/em&gt;&lt;/a&gt;）が生成されています</target>
        </trans-unit>
        <trans-unit id="94ff21187708025ec06734808a8ffcba3f1255a0" translate="yes" xml:space="preserve">
          <source>Position in source file</source>
          <target state="translated">ソースファイル内の位置</target>
        </trans-unit>
        <trans-unit id="1c7d2a41182aaf6cac883c7a26f3e0458f6613a7" translate="yes" xml:space="preserve">
          <source>Positive and negative zeroes are distinct.</source>
          <target state="translated">正のゼロと負のゼロは区別されています。</target>
        </trans-unit>
        <trans-unit id="0d9f8a6fbaa2f747fe41cdbb5779f42c76054a43" translate="yes" xml:space="preserve">
          <source>Possible to cast to one type while painting to another type</source>
          <target state="translated">1種類のタイプにキャストしながら、別のタイプにペイントすることが可能</target>
        </trans-unit>
        <trans-unit id="a595496b70e4ac0dcaad132b95d982296d4ece9c" translate="yes" xml:space="preserve">
          <source>Postblits</source>
          <target state="translated">Postblits</target>
        </trans-unit>
        <trans-unit id="b67cda929c621b7238e8e7b18624e89e3d600ab4" translate="yes" xml:space="preserve">
          <source>Postblits cannot be overloaded. If two or more postblits are defined, even if the signatures differ, the compiler assigns the &lt;code&gt;__postblit&lt;/code&gt; name to both and later issues a conflicting function name error:</source>
          <target state="translated">Postblitsはオーバーロードできません。2つ以上のポストブリットが定義されている場合、シグニチャーが異なっていても、コンパイラーは &lt;code&gt;__postblit&lt;/code&gt; 名を両方に割り当て、後で競合する関数名エラーを発行します。</target>
        </trans-unit>
        <trans-unit id="03b0a5668a78a6c73799b480ad3c40d5053795e5" translate="yes" xml:space="preserve">
          <source>Postcondition</source>
          <target state="translated">Postcondition</target>
        </trans-unit>
        <trans-unit id="fd99975cb3b791e05b83de3f8d3df7dec73b171c" translate="yes" xml:space="preserve">
          <source>Postcondition checks (out contract).</source>
          <target state="translated">ポストコンディションチェック(アウト契約)。</target>
        </trans-unit>
        <trans-unit id="82ecf35c1a8706936b0e8617bb976a01dca6b88c" translate="yes" xml:space="preserve">
          <source>Postconditions</source>
          <target state="translated">Postconditions</target>
        </trans-unit>
        <trans-unit id="040b4a736abe1da53bd8406f166c0e2e85d95807" translate="yes" xml:space="preserve">
          <source>Postfix Expressions</source>
          <target state="translated">Postfix の表現</target>
        </trans-unit>
        <trans-unit id="da4d207f33d1c8c4edafd10628aaf54446134448" translate="yes" xml:space="preserve">
          <source>Postfix Operator Rewrites</source>
          <target state="translated">Postfix オペレータの書き換え</target>
        </trans-unit>
        <trans-unit id="b4dbcceb0733332ed7b3413421a4224fc70b00ed" translate="yes" xml:space="preserve">
          <source>PostfixExpression</source>
          <target state="translated">PostfixExpression</target>
        </trans-unit>
        <trans-unit id="18a58057ccb77e5dd8b91625ed5dc6fc94061fa7" translate="yes" xml:space="preserve">
          <source>Postincrement</source>
          <target state="translated">Postincrement</target>
        </trans-unit>
        <trans-unit id="bf82bfcd8a75fe25a9a0c5cbb6104e08332d21e4" translate="yes" xml:space="preserve">
          <source>Postincrement &lt;i&gt;e&lt;/i&gt;&lt;code&gt;++&lt;/code&gt; and Postdecrement &lt;i&gt;e&lt;/i&gt;&lt;code&gt;--&lt;/code&gt; Operators</source>
          <target state="translated">ポストインクリメント&lt;i&gt;E &lt;/i&gt; &lt;code&gt;++&lt;/code&gt; ポストデクリメントの&lt;i&gt;電子&lt;/i&gt; &lt;code&gt;--&lt;/code&gt; 演算子</target>
        </trans-unit>
        <trans-unit id="0df8c37cc9a164b7729795ce2b2b74064c3959ba" translate="yes" xml:space="preserve">
          <source>Pow Expressions</source>
          <target state="translated">パウ式</target>
        </trans-unit>
        <trans-unit id="b53ac0458a706a39c9484ec5fec9c84db97eddcc" translate="yes" xml:space="preserve">
          <source>PowExpression</source>
          <target state="translated">PowExpression</target>
        </trans-unit>
        <trans-unit id="aa445acda25547a9330f5709468bd87dd13af4d6" translate="yes" xml:space="preserve">
          <source>Practical Example</source>
          <target state="translated">実践例</target>
        </trans-unit>
        <trans-unit id="3e092163716f376bb86566aa4ec6fc840c95baff" translate="yes" xml:space="preserve">
          <source>Practically &lt;code&gt;Nullable!T&lt;/code&gt; stores a &lt;code&gt;T&lt;/code&gt; and a &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">Practically &lt;code&gt;Nullable!T&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; と &lt;code&gt;bool&lt;/code&gt; を格納します。</target>
        </trans-unit>
        <trans-unit id="38f93d32853eca4603a582eb7a404079e10b855d" translate="yes" xml:space="preserve">
          <source>Pragma</source>
          <target state="translated">Pragma</target>
        </trans-unit>
        <trans-unit id="4228470908b356987cf1925969b1a8dc591738f4" translate="yes" xml:space="preserve">
          <source>Pragma Name 1st arg or NULL</source>
          <target state="translated">プラグマ名 第1引数またはNULL</target>
        </trans-unit>
        <trans-unit id="fa87f38bf7181908ef6bd8c17c24a2033e6d6d85" translate="yes" xml:space="preserve">
          <source>Pragma Statement</source>
          <target state="translated">プラグマステートメント</target>
        </trans-unit>
        <trans-unit id="d857c4a3cba6bb11f909b140e46311890f7f21c4" translate="yes" xml:space="preserve">
          <source>Pragmas</source>
          <target state="translated">Pragmas</target>
        </trans-unit>
        <trans-unit id="6100c56545314ca2ea6d26d66d469384e927114e" translate="yes" xml:space="preserve">
          <source>Pragmas are a way to pass special information to the compiler and to add vendor specific extensions to D. Pragmas can be used by themselves terminated with a &amp;lsquo;;&amp;rsquo;, they can influence a statement, a block of statements, a declaration, or a block of declarations.</source>
          <target state="translated">プラグマは、特別な情報をコンパイラーに渡し、ベンダー固有の拡張機能をDに追加する方法です。プラグマは、「;」で終了する単独で使用でき、ステートメント、ステートメントのブロック、宣言、またはブロックに影響を与えることができます宣言の。</target>
        </trans-unit>
        <trans-unit id="f20744406e393916e9a8767156242954d148dbd7" translate="yes" xml:space="preserve">
          <source>Pragmas can appear as either declarations,</source>
          <target state="translated">プラグマは宣言としても出現することができます。</target>
        </trans-unit>
        <trans-unit id="8561ddc56be7aa47f035e75aa500fe4607b514ed" translate="yes" xml:space="preserve">
          <source>Pre and Post Contracts</source>
          <target state="translated">契約前と契約後</target>
        </trans-unit>
        <trans-unit id="2e4d2b399ceb179d2394b94e69e13a5a0cfc7116" translate="yes" xml:space="preserve">
          <source>Pre and post contracts can be written either in expression form (feature introduced in DMD 2.081.0), with a syntax similar to &lt;b&gt;assert&lt;/b&gt;, or as block statements containing arbitrary code.</source>
          <target state="translated">事前契約と事後契約は、表明形式（DMD 2.081.0で導入された機能）、&lt;b&gt;assert&lt;/b&gt;に類似した構文、または任意のコードを含むブロックステートメントとして記述できます。</target>
        </trans-unit>
        <trans-unit id="baaef1b79330fb3733e1029bb05c865b513dfa63" translate="yes" xml:space="preserve">
          <source>Preallocate more memory than requested such that later on, when reallocation is needed (e.g. to grow an array), expansion can be done quickly in place. Reallocation to smaller sizes is also fast (in-place) when the new size requested is within the same quantum as the existing size. Code that's reallocation-heavy can therefore benefit from fronting a generic allocator with a &lt;code&gt;Quantizer&lt;/code&gt;. These advantages are present even if &lt;code&gt;ParentAllocator&lt;/code&gt; does not support reallocation at all.</source>
          <target state="translated">要求よりも多くのメモリを事前に割り当てて、後で再割り当てが必要になったときに（たとえば、配列を拡張するため）、拡張をすばやく適切に実行できるようにします。要求された新しいサイズが既存のサイズと同じクォンタム内にある場合、より小さいサイズへの再割り当ても高速（インプレース）です。したがって、再割り当てが多いコードは、一般的なアロケーターの前に &lt;code&gt;Quantizer&lt;/code&gt; を配置することでメリットを得られます。これらの利点は、 &lt;code&gt;ParentAllocator&lt;/code&gt; が再割り当てをまったくサポートしていなくても存在します。</target>
        </trans-unit>
        <trans-unit id="5b802de09c547c0729edb51e5e2e3cebfb6707e5" translate="yes" xml:space="preserve">
          <source>Preallocate nbytes more to the size of the internal buffer.</source>
          <target state="translated">内部バッファのサイズに合わせて nbytes を多めに確保します。</target>
        </trans-unit>
        <trans-unit id="67791177460b7a42d60af39e539c1ca510749619" translate="yes" xml:space="preserve">
          <source>Precise Heap Scanning</source>
          <target state="translated">正確なヒープスキャン</target>
        </trans-unit>
        <trans-unit id="1ddcbf2bc07417bcf100ff586767615466b08676" translate="yes" xml:space="preserve">
          <source>Precise Scanning of the DATA and TLS segment</source>
          <target state="translated">DATAとTLSセグメントの正確なスキャニング</target>
        </trans-unit>
        <trans-unit id="825cff2fca8c64366258f1a1ce51f8e555e73a45" translate="yes" xml:space="preserve">
          <source>Precise scanning can be enabled with the D runtime option &quot;scanDataSeg&quot;. Possible option values are &quot;conservative&quot; (default) and &quot;precise&quot;. As with the GC options, it can be specified on the command line, in the environment or embedded into the executable, e.g.</source>
          <target state="translated">精密スキャンは、Dランタイムオプション &quot;scanDataSeg &quot;で有効にすることができます。可能なオプション値は、&quot;保守的&quot;(デフォルト)と &quot;精密 &quot;です。GC 2011 のオプションと同様に、コマンドライン、環境、または実行ファイルに埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="3dd4db5ce7ea626f59e720f0c27096a22aa1ecd0" translate="yes" xml:space="preserve">
          <source>Precision</source>
          <target state="translated">Precision</target>
        </trans-unit>
        <trans-unit id="ddb5cb78dc037fe6c2aeded0e6b974e03a4651fe" translate="yes" xml:space="preserve">
          <source>Precision. Its semantics depends on the argument type. For floating point numbers, precision dictates the number of decimals printed.</source>
          <target state="translated">精度。このセマンティクスは、引数の型によって異なります。浮動小数点数の場合、精度は印刷される小数の数を決定します。</target>
        </trans-unit>
        <trans-unit id="646ad9740d80073615a87f1e15d4c39112839036" translate="yes" xml:space="preserve">
          <source>Precondition</source>
          <target state="translated">Precondition</target>
        </trans-unit>
        <trans-unit id="030e7d448ce8d11254c73a2fd0da828600bdd8f4" translate="yes" xml:space="preserve">
          <source>Precondition checks (in contract).</source>
          <target state="translated">前提条件のチェック(契約中)。</target>
        </trans-unit>
        <trans-unit id="eec67145e07c78272a2a8e16aa54643dd652ed96" translate="yes" xml:space="preserve">
          <source>Preconditions</source>
          <target state="translated">Preconditions</target>
        </trans-unit>
        <trans-unit id="69c23fde13319243d13a72e36ae957a78f698a9e" translate="yes" xml:space="preserve">
          <source>Predefined Formatting Macros</source>
          <target state="translated">定義済みの書式設定マクロ</target>
        </trans-unit>
        <trans-unit id="f574f2822e5c3af2cfb42d326ba7b141732bc4e6" translate="yes" xml:space="preserve">
          <source>Predefined Macros</source>
          <target state="translated">定義済みマクロ</target>
        </trans-unit>
        <trans-unit id="ba0569b596744d1ce75b051b455ee817f31fc211" translate="yes" xml:space="preserve">
          <source>Predefined Pragmas</source>
          <target state="translated">事前に定義されているプラグマ</target>
        </trans-unit>
        <trans-unit id="f694c553eb504db7a181a57928a8f49aff6fc3c5" translate="yes" xml:space="preserve">
          <source>Predefined Version Identifiers</source>
          <target state="translated">定義済みのバージョン識別子</target>
        </trans-unit>
        <trans-unit id="650eab2526d17b9e8d42a3dbc822ea4d5cc1cab0" translate="yes" xml:space="preserve">
          <source>Predefined Version Identifiers (deprecated)</source>
          <target state="translated">定義済みバージョン識別子 (非推奨)</target>
        </trans-unit>
        <trans-unit id="db1fc02b034fcc8cf516995fb58bfacb21d666ee" translate="yes" xml:space="preserve">
          <source>Predefined Versions</source>
          <target state="translated">定義済みのバージョン</target>
        </trans-unit>
        <trans-unit id="6d6fa6ffb57b4fc430272a48656dc44e4d33384e" translate="yes" xml:space="preserve">
          <source>Predefined how-policies for &lt;code&gt;AutoImplement&lt;/code&gt;. These templates are also used by &lt;code&gt;BlackHole&lt;/code&gt; and &lt;code&gt;WhiteHole&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;code&gt;AutoImplement&lt;/code&gt; の定義済みの方法ポリシー。これらのテンプレートは、それぞれ &lt;code&gt;BlackHole&lt;/code&gt; および &lt;code&gt;WhiteHole&lt;/code&gt; でも使用されます。</target>
        </trans-unit>
        <trans-unit id="18360332b07be143cc4f1da02b06ba76ff2987a0" translate="yes" xml:space="preserve">
          <source>Predefined macros.</source>
          <target state="translated">定義済みのマクロ。</target>
        </trans-unit>
        <trans-unit id="d210d4faef2ed863019beead1daefcae8123fa30" translate="yes" xml:space="preserve">
          <source>Predicate for determining equivalence between range elements.</source>
          <target state="translated">範囲要素間の等価性を決定するための述語。</target>
        </trans-unit>
        <trans-unit id="f19fd9d32d5055cf82846584da77887fff117d42" translate="yes" xml:space="preserve">
          <source>Predicate for determining equivalence.</source>
          <target state="translated">同等性を決定するための述語。</target>
        </trans-unit>
        <trans-unit id="a93b98110ad3e2b516ed91d743153796a0e28ab9" translate="yes" xml:space="preserve">
          <source>Predicate that returns a &amp;gt; b. Correctly compares signed and unsigned integers, ie. 2U &amp;gt; -1.</source>
          <target state="translated">a&amp;gt; bを返す述語。符号付き整数と符号なし整数を正しく比較します。2U&amp;gt; -1。</target>
        </trans-unit>
        <trans-unit id="2247c29ba644eef54ffa265596621906f85bd2d2" translate="yes" xml:space="preserve">
          <source>Predicate that returns a &amp;lt; b. Correctly compares signed and unsigned integers, ie. -1 &amp;lt; 2U.</source>
          <target state="translated">a &amp;lt;bを返す述語。符号付き整数と符号なし整数を正しく比較します。-1 &amp;lt;2U。</target>
        </trans-unit>
        <trans-unit id="26756cd5052d3a034d5614a5454264ad1e804a2e" translate="yes" xml:space="preserve">
          <source>Predicate that returns a == b. Correctly compares signed and unsigned integers, ie. !(-1 == ~0U).</source>
          <target state="translated">符号付き整数と符号なし整数を正しく比較します。</target>
        </trans-unit>
        <trans-unit id="aec40ac3dd710bdedb7c27ab3c63cbe9f18eca0e" translate="yes" xml:space="preserve">
          <source>Predicate that reverses the order of its arguments.</source>
          <target state="translated">引数の順序を反転させる述語。</target>
        </trans-unit>
        <trans-unit id="16636ca0b74fb2ab0a70fb6627626ffc2cf1d0e7" translate="yes" xml:space="preserve">
          <source>Predicate the given ranges are sorted by.</source>
          <target state="translated">与えられた範囲がソートされます。</target>
        </trans-unit>
        <trans-unit id="1a38d124cb8a3b1e47307840e450ae91589d602f" translate="yes" xml:space="preserve">
          <source>Predicate the range should be sorted by.</source>
          <target state="translated">範囲をソートするための述語です。</target>
        </trans-unit>
        <trans-unit id="b2a7231686de07e79eb8b0d9844880c7ef14cedf" translate="yes" xml:space="preserve">
          <source>Predicate to determine when to stop.</source>
          <target state="translated">停止するタイミングを決定するための述語。</target>
        </trans-unit>
        <trans-unit id="546312872400f2b7fe55f05c3ab6277445097f85" translate="yes" xml:space="preserve">
          <source>Predicate to use for comparing needle against haystack.</source>
          <target state="translated">干し草と針を比較するために使用する述語。</target>
        </trans-unit>
        <trans-unit id="70a5a11e1d7c6f98b55a8869acfad5cf195cf8e4" translate="yes" xml:space="preserve">
          <source>Predicate to use in comparing the elements of the haystack and the needle(s). Mandatory if no needles are given.</source>
          <target state="translated">干し草の山と針の要素を比較する際に使用する述語。針が与えられていない場合は必須。</target>
        </trans-unit>
        <trans-unit id="3412ea0e9183eafcad5437bc1beda80c905fce06" translate="yes" xml:space="preserve">
          <source>Predicate used for comparison. Without a predicate specified the ordering implied by &lt;code&gt;opCmp&lt;/code&gt; is used.</source>
          <target state="translated">比較に使用される述語。述語が指定されていない場合、 &lt;code&gt;opCmp&lt;/code&gt; によって暗黙的に指定された順序が使用されます。</target>
        </trans-unit>
        <trans-unit id="bb58a86d3182e26b59f94be7cbbda2124f6c452f" translate="yes" xml:space="preserve">
          <source>Predicate used to compare elements.</source>
          <target state="translated">要素を比較するために使用される述語。</target>
        </trans-unit>
        <trans-unit id="b0cca7e5cdbdfdcfacaf2626d35398cb9ce852dc" translate="yes" xml:space="preserve">
          <source>Prefix Sum</source>
          <target state="translated">プレフィックスサム</target>
        </trans-unit>
        <trans-unit id="4440f6ead8de15bb428fb83460c2f9fb1d3d6664" translate="yes" xml:space="preserve">
          <source>Prefix positive numbers in a signed conversion with a +. It overrides any</source>
          <target state="translated">符号付き変換の正の数の前に+を付けます。これは</target>
        </trans-unit>
        <trans-unit id="9d20134bf9ae9a5a55d77e7c52ee03334b676050" translate="yes" xml:space="preserve">
          <source>Prefix positive numbers in a signed conversion with a space.</source>
          <target state="translated">符号付き変換の正の数の前にスペースを付けます。</target>
        </trans-unit>
        <trans-unit id="4b62ff682f634c873eaf7673a8c2dfbc17ca9e6e" translate="yes" xml:space="preserve">
          <source>Prepare a string with as many &lt;code&gt;../&lt;/code&gt; or &lt;code&gt;..\&lt;/code&gt; as necessary to reach the common root from base path.</source>
          <target state="translated">ベースパスから共通ルートに到達するために必要なだけ &lt;code&gt;../&lt;/code&gt; または &lt;code&gt;..\&lt;/code&gt; を含む文字列を準備します。</target>
        </trans-unit>
        <trans-unit id="415f781b04702ed4c2fb18fdbfc0c62c0bfdfc34" translate="yes" xml:space="preserve">
          <source>Prepare for generating obj file.</source>
          <target state="translated">objファイルを生成する準備をします。</target>
        </trans-unit>
        <trans-unit id="2f5da103100b3440f26c60eb3e05807f62717d70" translate="yes" xml:space="preserve">
          <source>Prepared Statement Status</source>
          <target state="translated">作成されたステートメントの状況</target>
        </trans-unit>
        <trans-unit id="8a00f68e210aed91d87587585896acbb4f68a3e9" translate="yes" xml:space="preserve">
          <source>Prepend integer item to list.</source>
          <target state="translated">整数の項目をリストに追加します。</target>
        </trans-unit>
        <trans-unit id="2bc658c404b7b5169d7e796d80f53ca674f8dbcd" translate="yes" xml:space="preserve">
          <source>Prepend ptr to *plist.</source>
          <target state="translated">ptrを*plistに前置します。</target>
        </trans-unit>
        <trans-unit id="a7e0dfaf80613ad95f56924d0ddc7d620003b7ee" translate="yes" xml:space="preserve">
          <source>Preserve the relative ordering of elements to the largest extent allowed by the algorithm's requirements.</source>
          <target state="translated">アルゴリズムの要件によって許容される最大の範囲で、要素の相対的な順序を保持します。</target>
        </trans-unit>
        <trans-unit id="7d7712a544e0581dd899ab39e86edb57d9684fe7" translate="yes" xml:space="preserve">
          <source>PreserveAttributes &lt;code&gt;preserve&lt;/code&gt;</source>
          <target state="translated">PreserveAttributes &lt;code&gt;preserve&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2f9b1f72e64b514a1faab078b4c60a83aa1be354" translate="yes" xml:space="preserve">
          <source>PreserveAttributes &lt;strong id=&quot;preserveAttributesDefault&quot;&gt;preserveAttributesDefault&lt;/strong&gt;;</source>
          <target state="translated">PreserveAttributes &lt;strong id=&quot;preserveAttributesDefault&quot;&gt;preserveAttributesDefault&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="3625fc12c04fb48d484d9798778432e4646c44a6" translate="yes" xml:space="preserve">
          <source>Pretty advanced function for building multi-part formposts. Each invoke adds one part that together construct a full post. Then use CURLOPT_HTTPPOST to send it off to libcurl.</source>
          <target state="translated">マルチパートのポストを構築するためのかなり高度な関数です。それぞれの呼び出しは、一つの部分を追加し、それらを組み合わせて完全なポストを構築します。そして CURLOPT_HTTPPOST を使用して libcurl に送信します。</target>
        </trans-unit>
        <trans-unit id="7c6267ddd51b4b8a86f5124efee427639efeca08" translate="yes" xml:space="preserve">
          <source>Pretty print a module.</source>
          <target state="translated">モジュールをきれいに印刷します。</target>
        </trans-unit>
        <trans-unit id="000bfc178c61f018242fa09e44055036aac73316" translate="yes" xml:space="preserve">
          <source>Pretty print function parameter.</source>
          <target state="translated">プリティプリント機能のパラメータ。</target>
        </trans-unit>
        <trans-unit id="446abdf27012e485e2e624c0190dfffb42d444b3" translate="yes" xml:space="preserve">
          <source>Pretty print function parameters.</source>
          <target state="translated">プリティプリント関数のパラメータ。</target>
        </trans-unit>
        <trans-unit id="adf658a27711e59b6f616cbc30d0286f5d85f134" translate="yes" xml:space="preserve">
          <source>Pretty printed module as string.</source>
          <target state="translated">モジュールを文字列としてきれいに印刷します。</target>
        </trans-unit>
        <trans-unit id="bbe02dc8d90c522cd731d7f77d7a60e956659ce7" translate="yes" xml:space="preserve">
          <source>Previous versions of &lt;code&gt;XorshiftEngine&lt;/code&gt; did not provide any mechanism to specify the directions of the shifts, taking each shift as an unsigned magnitude. For backwards compatibility, because three shifts in the same direction cannot result in a full-period XorshiftEngine, when all three of &lt;code&gt;sa&lt;/code&gt;, &lt;code&gt;sb&lt;/code&gt;, &lt;code&gt;sc, are positive &lt;/code&gt;XorshiftEngine` treats them as unsigned magnitudes and uses shift directions to match the old behavior of &lt;code&gt;XorshiftEngine&lt;/code&gt;.  Not every set of shifts results in a full-period xorshift generator. The template does not currently at compile-time perform a full check for maximum period but in a future version might reject parameters resulting in shorter periods.</source>
          <target state="translated">&lt;code&gt;XorshiftEngine&lt;/code&gt; の以前のバージョンでは、各シフトを符号なしの大きさとみなして、シフトの方向を指定するメカニズムが提供されていませんでした。下位互換性のために、同じ方向の3つのシフトは全期間のXorshiftEngineになり得ないため、 &lt;code&gt;sa&lt;/code&gt; 、 &lt;code&gt;sb&lt;/code&gt; 、 &lt;code&gt;sc, are positive &lt;/code&gt; 3つすべてが正の場合、 XorshiftEngine`はそれらを符号なしの大きさとして扱い、シフト方向を使用して &lt;code&gt;XorshiftEngine&lt;/code&gt; の古い動作に一致させます。すべてのシフトセットが全期間のxorshiftジェネレーターになるわけではありません。現在、テンプレートはコンパイル時に最大期間の完全なチェックを実行しませんが、将来のバージョンではパラメーターが拒否され、期間が短くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="3499b7593c8190fb7c47376aee73c9e820543602" translate="yes" xml:space="preserve">
          <source>Primary &lt;strong id=&quot;primary&quot;&gt;primary&lt;/strong&gt;;</source>
          <target state="translated">プライマリ&lt;strong id=&quot;primary&quot;&gt;プライマリ&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="b3a2f356577f35c5a2c27fdf8b798609c666a3cb" translate="yes" xml:space="preserve">
          <source>Primary Expressions</source>
          <target state="translated">主な表現</target>
        </trans-unit>
        <trans-unit id="4e8f8df8afc826ac060bfb0d62e551d0ff99da1a" translate="yes" xml:space="preserve">
          <source>PrimaryAllocator</source>
          <target state="translated">PrimaryAllocator</target>
        </trans-unit>
        <trans-unit id="d857a8da372b74a1cc781b95e1edf9b095a2c086" translate="yes" xml:space="preserve">
          <source>Primitive flow analysis for constructors</source>
          <target state="translated">コンストラクタのためのプリミティブフロー解析</target>
        </trans-unit>
        <trans-unit id="e444e1937adba3a1cfd5d90963ca115ff04f5ee0" translate="yes" xml:space="preserve">
          <source>Print AST data structure in a nice format.</source>
          <target state="translated">ASTデータ構造体をきれいな形式で印刷します。</target>
        </trans-unit>
        <trans-unit id="52d58b69adddcbb01a0d9fb00892b30fc79f820b" translate="yes" xml:space="preserve">
          <source>Print DMD's logo with more debug information and error-reporting pointers.</source>
          <target state="translated">デバッグ情報とエラー報告用のポインタを追加したDMDのロゴを印刷します。</target>
        </trans-unit>
        <trans-unit id="741a8cf16a2a94a93e81f8799e908f88729eaa78" translate="yes" xml:space="preserve">
          <source>Print a deprecation message, may increase the global warning or error count depending on whether deprecations are ignored.</source>
          <target state="translated">非推奨のメッセージを表示し、非推奨が無視されているかどうかに応じて、グローバルな警告やエラーカウントを増やすことができます。</target>
        </trans-unit>
        <trans-unit id="781d287d963aa57ac1be0813cd2b7893ed3e2f42" translate="yes" xml:space="preserve">
          <source>Print a tip message with the prefix and highlighting.</source>
          <target state="translated">接頭辞とハイライト表示でチップメッセージを印刷します。</target>
        </trans-unit>
        <trans-unit id="5c7e6858b23f26e525078100ff725440333b762c" translate="yes" xml:space="preserve">
          <source>Print a verbose message. Doesn't prefix or highlight messages.</source>
          <target state="translated">冗長なメッセージを印刷します。メッセージの接頭辞や強調表示はしません。</target>
        </trans-unit>
        <trans-unit id="939daf2f0bcc7e74350bd013cf922548480474bd" translate="yes" xml:space="preserve">
          <source>Print a warning message, increasing the global warning count.</source>
          <target state="translated">警告メッセージを表示し、グローバル警告数を増やします。</target>
        </trans-unit>
        <trans-unit id="a5099c933532cca0e3d4637739e21ce65a47b1f3" translate="yes" xml:space="preserve">
          <source>Print additional details about a deprecation message. Doesn't increase the error count, or print an additional deprecation prefix.</source>
          <target state="translated">非推奨メッセージの詳細を表示します。エラーカウントを増やしたり、追加の deprecation プレフィックスを表示したりすることはありません。</target>
        </trans-unit>
        <trans-unit id="0133338c129646ea634be83fd6cd4d3657feeeb0" translate="yes" xml:space="preserve">
          <source>Print additional details about a warning message. Doesn't increase the warning count or print an additional warning prefix.</source>
          <target state="translated">警告メッセージの詳細を表示します。警告数を増やしたり、追加の警告プレフィックスを表示したりすることはありません。</target>
        </trans-unit>
        <trans-unit id="33c24f38922d7036946f23bec89d0ce87ce561bc" translate="yes" xml:space="preserve">
          <source>Print additional details about an error message. Doesn't increase the error count or print an additional error prefix.</source>
          <target state="translated">エラーメッセージに関する追加の詳細を表示します。エラーカウントを増やしたり、追加のエラー接頭辞を表示したりすることはありません。</target>
        </trans-unit>
        <trans-unit id="058c115cad6e2e81008fb7ad2950801f7eec7c85" translate="yes" xml:space="preserve">
          <source>Print an error message, increasing the global error count.</source>
          <target state="translated">エラーメッセージを表示し、グローバルエラー数を増やします。</target>
        </trans-unit>
        <trans-unit id="32c85c57b0adc1c6b315e954d6c08dd2ae33e959" translate="yes" xml:space="preserve">
          <source>Print error message about invalid array operation.</source>
          <target state="translated">無効な配列操作に関するエラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="2134fe32d9505f6bba77dbd00ce388244749ad04" translate="yes" xml:space="preserve">
          <source>Print out debugging information.</source>
          <target state="translated">デバッグ情報を印刷します。</target>
        </trans-unit>
        <trans-unit id="8057a71a3d3cdf62ae7ce1600345941a68ef4657" translate="yes" xml:space="preserve">
          <source>Printf Style Logging</source>
          <target state="translated">プリントフスタイルロギング</target>
        </trans-unit>
        <trans-unit id="301a2e2f71f4f27f14ddfdaf8e1d9264bd94293c" translate="yes" xml:space="preserve">
          <source>Printing values works as it does in C:</source>
          <target state="translated">値の印刷はC言語と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="a4ad095c527676644a2ddd8b5dfe7833cc2fa256" translate="yes" xml:space="preserve">
          <source>Prints message(s) if there are errors.</source>
          <target state="translated">エラーが発生した場合、メッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="53bea7b855c92761fc53db7e7e657329722ff553" translate="yes" xml:space="preserve">
          <source>Prints:</source>
          <target state="translated">Prints:</target>
        </trans-unit>
        <trans-unit id="200585a082f7fe89384cf8d9108f15dc9692123d" translate="yes" xml:space="preserve">
          <source>Private Use Area</source>
          <target state="translated">私的使用領域</target>
        </trans-unit>
        <trans-unit id="e67d49b8486a78488c9fa13a7655377f61af5ded" translate="yes" xml:space="preserve">
          <source>Private_Use</source>
          <target state="translated">Private_Use</target>
        </trans-unit>
        <trans-unit id="0588b71974aef4ab5b2e1fdf75767f0460174967" translate="yes" xml:space="preserve">
          <source>Process handling</source>
          <target state="translated">プロセスハンドリング</target>
        </trans-unit>
        <trans-unit id="81e395fd50ec55eed1a5348cc557a1f4263ca816" translate="yes" xml:space="preserve">
          <source>Processing of command line options.</source>
          <target state="translated">コマンドラインオプションの処理</target>
        </trans-unit>
        <trans-unit id="79ead62511e5ad3925246bd4a8ac726a0bf71b22" translate="yes" xml:space="preserve">
          <source>ProcessingInstruction &lt;code&gt;item&lt;/code&gt;</source>
          <target state="translated">処理指示 &lt;code&gt;item&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2f47028d237ad837b8d24f2b1944ca76172bb96" translate="yes" xml:space="preserve">
          <source>ProcessingInstruction[] &lt;strong id=&quot;pis&quot;&gt;pis&lt;/strong&gt;;</source>
          <target state="translated">ProcessingInstruction [] &lt;strong id=&quot;pis&quot;&gt;pis&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="c489df222ae40007dc782a56c157e5129ac37a34" translate="yes" xml:space="preserve">
          <source>Processor type (vendor-dependent). This should be visible ONLY for display purposes.</source>
          <target state="translated">プロセッサの種類(ベンダー依存)。これは表示目的のためだけに表示されるべきです。</target>
        </trans-unit>
        <trans-unit id="1eed910bf79a6d98b77187f35780c01e434b332a" translate="yes" xml:space="preserve">
          <source>Produce a grayscale image of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mandelbrot_set&quot;&gt;Mandelbrot set&lt;/a&gt; in binary &lt;a href=&quot;https://en.wikipedia.org/wiki/Netpbm_format&quot;&gt;Netpbm format&lt;/a&gt; to standard output.</source>
          <target state="translated">バイナリ&lt;a href=&quot;https://en.wikipedia.org/wiki/Netpbm_format&quot;&gt;Netpbm形式で&lt;/a&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mandelbrot_set&quot;&gt;設定さ&lt;/a&gt;れたマンデルブロのグレースケールイメージを標準出力に生成します。</target>
        </trans-unit>
        <trans-unit id="3862ac3aed81b0f225a849a90d5cc5f40be9aa3c" translate="yes" xml:space="preserve">
          <source>Produce elem which increments the usage count for a particular line. Sets corresponding bit in bitmap &lt;code&gt;m.covb[linnum]&lt;/code&gt;. Used to implement -cov switch (coverage analysis).</source>
          <target state="translated">特定の行の使用カウントを増やすelemを生成します。ビットマップ &lt;code&gt;m.covb[linnum]&lt;/code&gt; 対応するビットを設定します。-covスイッチ（カバレッジ分析）の実装に使用されます。</target>
        </trans-unit>
        <trans-unit id="2ee701351b350f0300426cd783822031fe44f5fb" translate="yes" xml:space="preserve">
          <source>Programmers accustomed to explicitly managing memory allocation and deallocation will likely be skeptical of the benefits and efficacy of garbage collection. Experience both with new projects written with garbage collection in mind, and converting existing projects to garbage collection shows that:</source>
          <target state="translated">メモリの割り当てと解放を明示的に管理することに慣れているプログラマーは、ガベージコレクションの利点と有効性に懐疑的になるでしょう。ガベージコレクションを念頭に置いて書かれた新しいプロジェクトと、既存のプロジェクトをガベージコレクションに変換した経験の両方が、そのことを示しています。</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="dd387eddd2291f436a15934f732eb070c13f983c" translate="yes" xml:space="preserve">
          <source>Properties are functions that can be syntactically treated as if they were fields or variables. Properties can be read from or written to. A property is read by calling a method or function with no arguments; a property is written by calling a method or function with its argument being the value it is set to.</source>
          <target state="translated">プロパティは、あたかもフィールドや変数であるかのように構文的に扱うことができる関数です。プロパティは、読み出すことも書き出すこともできます。プロパティは、引数のないメソッドまたは関数を呼び出すことで読み込まれ、プロパティは、その引数に設定されている値を持つメソッドまたは関数を呼び出すことで書き込まれます。</target>
        </trans-unit>
        <trans-unit id="6d46d3190705bb371f9868ed9bf90c5d4d753b97" translate="yes" xml:space="preserve">
          <source>Properties for All Types</source>
          <target state="translated">全てのタイプの物件</target>
        </trans-unit>
        <trans-unit id="272b8921ce7d353cb8f3cf4775d9f488ee2f569c" translate="yes" xml:space="preserve">
          <source>Properties for Class Types</source>
          <target state="translated">クラス型のプロパティ</target>
        </trans-unit>
        <trans-unit id="895079fe34a3fbf080ac0e62bf915acb42b2bc99" translate="yes" xml:space="preserve">
          <source>Properties for Floating Point Types</source>
          <target state="translated">浮動小数点型のプロパティ</target>
        </trans-unit>
        <trans-unit id="fc0bfcb689361cebbe86638a9e8cd2b0d58550ef" translate="yes" xml:space="preserve">
          <source>Properties for Integral Types</source>
          <target state="translated">積分型のプロパティ</target>
        </trans-unit>
        <trans-unit id="7c12bf8aa65674a95589ff691b3585505400d756" translate="yes" xml:space="preserve">
          <source>Properties for associative arrays are:</source>
          <target state="translated">連想配列のプロパティは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ebb627686689409a93bdc19fa3a749dd5b3039f5" translate="yes" xml:space="preserve">
          <source>Properties for getting (and possibly setting) the approximate maximum length of a shared freelist.</source>
          <target state="translated">共有フリーリストのおおよその最大長を取得する (あるいは設定する)ためのプロパティ。</target>
        </trans-unit>
        <trans-unit id="d8ca5bf11ef59c3e8e3df9efe7fd4dd627f9d892" translate="yes" xml:space="preserve">
          <source>Properties for getting (and possibly setting) the bounds. Setting bounds is allowed only once , and before any allocation takes place. Otherwise, the primitives have the same semantics as those of &lt;code&gt;FreeList&lt;/code&gt;.</source>
          <target state="translated">境界を取得する（場合によっては設定する）ためのプロパティ。境界の設定は、割り当てが行われる前に1回だけ許可されます。それ以外の場合、プリミティブは &lt;code&gt;FreeList&lt;/code&gt; と同じセマンティクスを持っています。</target>
        </trans-unit>
        <trans-unit id="2b393346b666625fd355fd7149a1980f7d9e6881" translate="yes" xml:space="preserve">
          <source>Property Examples</source>
          <target state="translated">物件例</target>
        </trans-unit>
        <trans-unit id="14fa0a936b7797ccd49640d8abe1784758e3862e" translate="yes" xml:space="preserve">
          <source>Property Functions</source>
          <target state="translated">プロパティ機能</target>
        </trans-unit>
        <trans-unit id="5dbcb2d0cc6ae723ca2eccf347d83251ccd8b303" translate="yes" xml:space="preserve">
          <source>Property returning &lt;code&gt;true&lt;/code&gt; if and only if the array has no elements.</source>
          <target state="translated">配列に要素がない場合にのみ、プロパティが &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="065210cf38be02dc39be511bd0b3551ba9de6228" translate="yes" xml:space="preserve">
          <source>Property returning &lt;code&gt;true&lt;/code&gt; if and only if the container has no elements.</source>
          <target state="translated">コンテナーに要素がない場合にのみ、プロパティは &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="40a7205dce63e4d8a540ba5fc2d7d36f2cc7edd8" translate="yes" xml:space="preserve">
          <source>Property that indicates if this is a valid, alive socket.</source>
          <target state="translated">有効なアライブソケットであるかどうかを示すプロパティ。</target>
        </trans-unit>
        <trans-unit id="aafe895a0026094ff428b9d225a89af65181ecb4" translate="yes" xml:space="preserve">
          <source>Prot &lt;code&gt;protection&lt;/code&gt;</source>
          <target state="translated">タンパク質 &lt;code&gt;protection&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ed77c3f7ffc41a33eadccef5727dc7c97079235" translate="yes" xml:space="preserve">
          <source>Protocol</source>
          <target state="translated">Protocol</target>
        </trans-unit>
        <trans-unit id="07c6a3380801fe033fe48fab273c8c480f2ce675" translate="yes" xml:space="preserve">
          <source>ProtocolType &lt;strong id=&quot;protocol&quot;&gt;protocol&lt;/strong&gt;;</source>
          <target state="translated">ProtocolType &lt;strong id=&quot;protocol&quot;&gt;プロトコル&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="1acbf21228a87baaefe83afa17793b9744907136" translate="yes" xml:space="preserve">
          <source>ProtocolType &lt;strong id=&quot;type&quot;&gt;type&lt;/strong&gt;;</source>
          <target state="translated">ProtocolType &lt;strong id=&quot;type&quot;&gt;タイプ&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="7c56749d7bcd9cdca2934b133e033e63522d618f" translate="yes" xml:space="preserve">
          <source>Provide a CURLShare for mutexing non-ts data</source>
          <target state="translated">非tsデータをミューテックスするためのCURLShareを提供します。</target>
        </trans-unit>
        <trans-unit id="1929edddaabf41eee663a24b280cada674c28d3e" translate="yes" xml:space="preserve">
          <source>Provide a human readable representation</source>
          <target state="translated">人間が読みやすい表現を提供する</target>
        </trans-unit>
        <trans-unit id="e164562de1900a7450845d929e5ec99bafad7e86" translate="yes" xml:space="preserve">
          <source>Provide out-of-band access to the original C argc/argv passed to this program via main(argc,argv).</source>
          <target state="translated">main(argc,argv)を介して、このプログラムに渡されたオリジナルの C の argc/argv への帯域外アクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="b0d43391e49e267e8e9c3011757825bb2e5aba5c" translate="yes" xml:space="preserve">
          <source>Provide the .dup array property.</source>
          <target state="translated">.dup 配列プロパティを提供します。</target>
        </trans-unit>
        <trans-unit id="884cd93143fb3cc6d0b5ce44736f5e3b20a102a8" translate="yes" xml:space="preserve">
          <source>Provide the .idup array property.</source>
          <target state="translated">.idup 配列プロパティを提供します。</target>
        </trans-unit>
        <trans-unit id="f41856ba90560f011a0a6b5a85e291fe656f3fca" translate="yes" xml:space="preserve">
          <source>Provided Logger</source>
          <target state="translated">提供ロガー</target>
        </trans-unit>
        <trans-unit id="e1a88ee373473fd057a8492c11452ee411c1a4f5" translate="yes" xml:space="preserve">
          <source>Provided for de-allocation in the same translation unit that did the allocation. Added in libcurl 7.10</source>
          <target state="translated">割り当てを行ったのと同じ翻訳ユニットでの割り当て解除のために提供されました。libcurl 7.10 で追加</target>
        </trans-unit>
        <trans-unit id="1f2030ef991f6e1b4bbd9b294ac641d24cefdf25" translate="yes" xml:space="preserve">
          <source>Provides a list of all threads currently being tracked by the system. Note that threads in the returned array might no longer run (see &lt;code&gt;Thread.&lt;/code&gt;&lt;a href=&quot;#isRunning&quot;&gt;&lt;code&gt;isRunning&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">現在システムによって追跡されているすべてのスレッドのリストを提供します。返される配列内のスレッドは、もはや（参照実行可能性があることを注意 &lt;code&gt;Thread.&lt;/code&gt; &lt;a href=&quot;#isRunning&quot;&gt; &lt;code&gt;isRunning&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="4c7af553837fa20372e82bd10fd1fbdacc0fefe6" translate="yes" xml:space="preserve">
          <source>Provides a new scope with &lt;code&gt;STC.deprecated_&lt;/code&gt; and &lt;code&gt;Scope.depdecl&lt;/code&gt; set</source>
          <target state="translated">&lt;code&gt;STC.deprecated_&lt;/code&gt; および &lt;code&gt;Scope.depdecl&lt;/code&gt; が設定された新しいスコープを提供します</target>
        </trans-unit>
        <trans-unit id="8bf9f03cd2cf31405fbc05f388ba616c27769697" translate="yes" xml:space="preserve">
          <source>Provides a reference to the calling fiber or null if no fiber is currently active.</source>
          <target state="translated">呼び出し中のファイバーへの参照を提供するか、現在アクティブなファイバーがない場合は null を指定します。</target>
        </trans-unit>
        <trans-unit id="23bb9371df7b9c17559203a212a9ba678642eb9a" translate="yes" xml:space="preserve">
          <source>Provides a reference to the calling thread.</source>
          <target state="translated">呼び出し元のスレッドへの参照を提供します。</target>
        </trans-unit>
        <trans-unit id="ee41bee9bb183a410298e4abe02e56b8aa459d71" translate="yes" xml:space="preserve">
          <source>Provides an explanation for and corrective action to take if the associated declaration is marked as deprecated.</source>
          <target state="translated">関連する宣言が非推奨とマークされている場合の説明と是正措置を提供します。</target>
        </trans-unit>
        <trans-unit id="7acadd30bb0f6451e04d1ebd324866714956a1be" translate="yes" xml:space="preserve">
          <source>Provides convenient access to date and time representations.</source>
          <target state="translated">日付と時間の表現への便利なアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="2e43a7b7c99235aea804390e292b91087037668d" translate="yes" xml:space="preserve">
          <source>Provides indexed access into the container. The index type is container-defined. A container may define several index types (and consequently overloaded indexing).</source>
          <target state="translated">コンテナへのインデックス付きアクセスを提供します。インデックスタイプはコンテナ定義です。コンテナは複数のインデックスタイプを定義することができます(結果としてオーバーロードされたインデックス)。</target>
        </trans-unit>
        <trans-unit id="6421abde57ae539842411bf094700ed30d80091f" translate="yes" xml:space="preserve">
          <source>Provides protocol-independent parsing of network addresses. Does not attempt name resolution. Uses &lt;code&gt;getAddressInfo&lt;/code&gt; with &lt;code&gt;AddressInfoFlags.NUMERICHOST&lt;/code&gt; if the current system supports it, and &lt;code&gt;InternetAddress&lt;/code&gt; otherwise.</source>
          <target state="translated">プロトコルに依存しないネットワークアドレスの解析を提供します。名前解決を試みません。使用 &lt;code&gt;getAddressInfo&lt;/code&gt; をして &lt;code&gt;AddressInfoFlags.NUMERICHOST&lt;/code&gt; 現在のシステムがそれをサポートしている場合、および &lt;code&gt;InternetAddress&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="31663ee024ce588c5fc30aa3c89a97bcb8794f25" translate="yes" xml:space="preserve">
          <source>Provides protocol-independent translation from host names to socket addresses. If advanced functionality is not required, consider using &lt;code&gt;getAddress&lt;/code&gt; for compatibility with older systems.</source>
          <target state="translated">ホスト名からソケットアドレスへのプロトコルに依存しない変換を提供します。高度な機能が必要ない場合は、古いシステムとの互換性のために &lt;code&gt;getAddress&lt;/code&gt; の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="35232085e7ae211b046c3d788222344964d18067" translate="yes" xml:space="preserve">
          <source>Provides protocol-independent translation from host names to socket addresses. Uses &lt;code&gt;getAddressInfo&lt;/code&gt; if the current system supports it, and &lt;code&gt;InternetHost&lt;/code&gt; otherwise.</source>
          <target state="translated">ホスト名からソケットアドレスへのプロトコルに依存しない変換を提供します。現在のシステムでサポートされている場合は &lt;code&gt;getAddressInfo&lt;/code&gt; を使用し、サポートされていない場合は &lt;code&gt;InternetHost&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="a49a0184f0557159ebb6d84a10307308b1e09f15" translate="yes" xml:space="preserve">
          <source>Provides the conversions between the IANA time zone database time zone names (which POSIX systems use) and the time zone names that Windows uses.</source>
          <target state="translated">IANAタイムゾーンデータベースのタイムゾーン名(POSIXシステムが使用する)とWindowsが使用するタイムゾーン名との間の変換を提供します。</target>
        </trans-unit>
        <trans-unit id="c0979b8d4efc2e480740645f6f1ca0dee4fd8c8b" translate="yes" xml:space="preserve">
          <source>Providing a sub-name narrows down the list of time zones (which can number in the thousands). For example, passing in &quot;America&quot; as the sub-name returns only the time zones which begin with &quot;America&quot;.</source>
          <target state="translated">サブネームを指定することで、タイムゾーンのリストを絞り込むことができます(数千にも及ぶ可能性があります)。例えば、サブネームに &quot;America &quot;を指定すると、&quot;America &quot;で始まるタイムゾーンのみが返されます。</target>
        </trans-unit>
        <trans-unit id="9db0b745b6fa2951c35528cc5a431b74d851a2e8" translate="yes" xml:space="preserve">
          <source>Proxies</source>
          <target state="translated">Proxies</target>
        </trans-unit>
        <trans-unit id="d1cea344353e26ba6f1565ed661d94f610ce9e4f" translate="yes" xml:space="preserve">
          <source>Proxy</source>
          <target state="translated">Proxy</target>
        </trans-unit>
        <trans-unit id="b9644c1f78e0b772779a500097a7b6c2cd225a38" translate="yes" xml:space="preserve">
          <source>Proxy port</source>
          <target state="translated">プロキシポート</target>
        </trans-unit>
        <trans-unit id="8ee0476a1b3f68f2a8b1652de253e3231c5a30a9" translate="yes" xml:space="preserve">
          <source>Proxy type</source>
          <target state="translated">プロキシ型</target>
        </trans-unit>
        <trans-unit id="b269c29253f44a590c2375615bb821fb27b24ed8" translate="yes" xml:space="preserve">
          <source>Pruning and Filling</source>
          <target state="translated">剪定・充填</target>
        </trans-unit>
        <trans-unit id="7e4b062c9df92c18899e0d640bf2c977c25ac1c4" translate="yes" xml:space="preserve">
          <source>Ps</source>
          <target state="translated">Ps</target>
        </trans-unit>
        <trans-unit id="bfec143c19b8a7da8ef2986bfdff976c6539b3dc" translate="yes" xml:space="preserve">
          <source>Pseudo-Random Number Generator</source>
          <target state="translated">擬似乱数発生器</target>
        </trans-unit>
        <trans-unit id="2275514eead6bd6a3b3aecc0fd0641f0d282d668" translate="yes" xml:space="preserve">
          <source>Pseudo-random number generators.</source>
          <target state="translated">擬似乱数発生器。</target>
        </trans-unit>
        <trans-unit id="1d68a19c2870443aa0522030150bb71ec07a7c22" translate="yes" xml:space="preserve">
          <source>Public API enums for RTSP requests</source>
          <target state="translated">RTSP リクエストのためのパブリック API enums</target>
        </trans-unit>
        <trans-unit id="c0ddaff13e39f258c8525deac888ae91ddab69de" translate="yes" xml:space="preserve">
          <source>Public Imports</source>
          <target state="translated">公共の輸入品</target>
        </trans-unit>
        <trans-unit id="3bc0e9d0786bebb377ec905ced131e92536f610b" translate="yes" xml:space="preserve">
          <source>Public or exported non-static member functions cannot be called from within an invariant.</source>
          <target state="translated">パブリック・メンバ関数またはエクスポートされた非スタティック・メンバ関数は、インバリアント内から呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="68fc7bd4bc44e3818645b5f17ee1089ffb95b680" translate="yes" xml:space="preserve">
          <source>Punctuation</source>
          <target state="translated">Punctuation</target>
        </trans-unit>
        <trans-unit id="531399b1b6f34aa45ee64387cb3aca5b2ccb7f93" translate="yes" xml:space="preserve">
          <source>Punctuation Escapes</source>
          <target state="translated">句読点エスケープ</target>
        </trans-unit>
        <trans-unit id="84cc29a9cb3f424e51bf299820cc87ee23488159" translate="yes" xml:space="preserve">
          <source>Pure Constructors</source>
          <target state="translated">ピュアコンストラクタ</target>
        </trans-unit>
        <trans-unit id="ea63ccb580688f825b1a702a02a1126819fcc769" translate="yes" xml:space="preserve">
          <source>Pure Functions</source>
          <target state="translated">ピュアファンクション</target>
        </trans-unit>
        <trans-unit id="315b76c64c484cf690522b3a45fd3980c19e88bf" translate="yes" xml:space="preserve">
          <source>Pure destructors do not benefit of special elision.</source>
          <target state="translated">純粋なデストラクタは特殊エリシオンの恩恵を受けない。</target>
        </trans-unit>
        <trans-unit id="6dfc0292d2db1992a61938a7d5118720b35feada" translate="yes" xml:space="preserve">
          <source>Pure functions are functions that cannot directly access global or static mutable state. &lt;code&gt;pure&lt;/code&gt; guarantees that a pure function call won't access or modify any implicit state in the program.</source>
          <target state="translated">純粋な関数は、グローバルまたは静的な可変状態に直接アクセスできない関数です。 &lt;code&gt;pure&lt;/code&gt; は、純粋な関数呼び出しがプログラム内の暗黙的な状態にアクセスまたは変更しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="117c6cb152c7552d6af480d72545b235ac1e0db2" translate="yes" xml:space="preserve">
          <source>Pure real FFTs are automatically detected and the relevant optimizations are performed.</source>
          <target state="translated">純粋な実数FFTが自動的に検出され、関連する最適化が実行されます。</target>
        </trans-unit>
        <trans-unit id="dc905a4c2483255a5cc6406f4bafbb5f6c6e5b25" translate="yes" xml:space="preserve">
          <source>Pure variants of C's memory allocation functions &lt;code&gt;malloc&lt;/code&gt;, &lt;code&gt;calloc&lt;/code&gt;, and &lt;code&gt;realloc&lt;/code&gt; and deallocation function &lt;code&gt;free&lt;/code&gt;.</source>
          <target state="translated">Cのメモリ割り当て関数のピュアバリアント &lt;code&gt;malloc&lt;/code&gt; 関数、 &lt;code&gt;calloc&lt;/code&gt; 、および &lt;code&gt;realloc&lt;/code&gt; のと解放関数 &lt;code&gt;free&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5338b2491e024cedccb4669dda5e88c429cbc759" translate="yes" xml:space="preserve">
          <source>Push this onto stack of chained exceptions.</source>
          <target state="translated">これを連鎖した例外のスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="6c8ff93bbe2e1f6cd06cf16810831791e43f1aba" translate="yes" xml:space="preserve">
          <source>Pushes an array of elements at once. It is more efficient to push as much data as possible in a single call. On platforms that do not support unaligned reads (MIPS or old ARM chips), the compiler may produce slower code to ensure correctness.</source>
          <target state="translated">要素の配列を一度にプッシュします。1回の呼び出しで可能な限り多くのデータをプッシュする方が効率的です。アンアラインメントリードをサポートしていないプラットフォーム(MIPSや古いARMチップ)では、正確性を確保するためにコンパイラがより遅いコードを生成する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f02cd2c1d42500d205a7a9f6e31677df9e57402e" translate="yes" xml:space="preserve">
          <source>Put a &lt;code&gt;Task&lt;/code&gt; object on the back of the task queue. The &lt;code&gt;Task&lt;/code&gt; object may be passed by pointer or reference.</source>
          <target state="translated">&lt;code&gt;Task&lt;/code&gt; オブジェクトをタスクキューの後ろに置きます。 &lt;code&gt;Task&lt;/code&gt; オブジェクトは、ポインタまたは参照によって渡されてもよいです。</target>
        </trans-unit>
        <trans-unit id="8aff8881ff753eff33815e662bf18604194c6243" translate="yes" xml:space="preserve">
          <source>Put remainder bytes. This must be called only once after &lt;code&gt;putElement&lt;/code&gt; and before &lt;code&gt;finalize&lt;/code&gt;.</source>
          <target state="translated">残りのバイトを入れます。これは &lt;code&gt;putElement&lt;/code&gt; の後と &lt;code&gt;finalize&lt;/code&gt; の前に一度だけ呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="13df9524e7a06f1a5560da8f072fec09f3ee42e5" translate="yes" xml:space="preserve">
          <source>Put with data senders:</source>
          <target state="translated">データ送信者と一緒に入れます。</target>
        </trans-unit>
        <trans-unit id="7c24540773c24c1085b8ed53542711eb6b9d88cc" translate="yes" xml:space="preserve">
          <source>Puts the formatting result into a preallocated array.</source>
          <target state="translated">フォーマットの結果を、事前に割り当てられた配列に入れます。</target>
        </trans-unit>
        <trans-unit id="c3156e00d3c2588c639e0d3cf6821258b05761c7" translate="yes" xml:space="preserve">
          <source>Q</source>
          <target state="translated">Q</target>
        </trans-unit>
        <trans-unit id="fbeba94c4e9b16a43991c5615fab8c4406d33231" translate="yes" xml:space="preserve">
          <source>Qt</source>
          <target state="translated">Qt</target>
        </trans-unit>
        <trans-unit id="0648eeac65ea5d646b0dae2aea4416b279c9f6d0" translate="yes" xml:space="preserve">
          <source>QualifiedIdentifier</source>
          <target state="translated">QualifiedIdentifier</target>
        </trans-unit>
        <trans-unit id="e1acf66aec4ab7e4378cf35aa85b3c0a8f0caa32" translate="yes" xml:space="preserve">
          <source>Qualifier Groups</source>
          <target state="translated">クオリファイアグループ</target>
        </trans-unit>
        <trans-unit id="e3dc7b91ec0fe4c470a2d5bf2412ad40efa0845e" translate="yes" xml:space="preserve">
          <source>Qualifying an entire struct as &lt;code&gt;shared&lt;/code&gt; correctly propagates the attribute to the generated postblits:</source>
          <target state="translated">構造体全体を &lt;code&gt;shared&lt;/code&gt; として修飾すると、生成されたポストブリットに属性が正しく反映されます。</target>
        </trans-unit>
        <trans-unit id="6078532ab203b30b0c8e32bb799fd87d65f55236" translate="yes" xml:space="preserve">
          <source>Quantifiers</source>
          <target state="translated">Quantifiers</target>
        </trans-unit>
        <trans-unit id="325b570b7ef26f5fe5603d9f1c6c1cfed0baf35b" translate="yes" xml:space="preserve">
          <source>Queries the GC whether the current thread is running object finalization as part of a GC collection, or an explicit call to runFinalizers.</source>
          <target state="translated">現在のスレッドが GC 2011 のコレクションの一部としてオブジェクトの最終化を実行しているか、または runFinalizers への明示的な呼び出しを実行しているかを取得します。</target>
        </trans-unit>
        <trans-unit id="aa41452b81cfc8871bafa9d988f53a1bb4ce356d" translate="yes" xml:space="preserve">
          <source>Queries whether &lt;code&gt;b&lt;/code&gt; has been allocated with this region.</source>
          <target state="translated">この領域で &lt;code&gt;b&lt;/code&gt; が割り当てられているかどうかを問い合わせます。</target>
        </trans-unit>
        <trans-unit id="57517f03e9aaf59c82ec84806650edb8f5d7492d" translate="yes" xml:space="preserve">
          <source>Queries whether a &lt;code&gt;Checked!(T, WithNaN)&lt;/code&gt; object is not a number (NaN).</source>
          <target state="translated">&lt;code&gt;Checked!(T, WithNaN)&lt;/code&gt; オブジェクトが数値（NaN）ではないかどうかを照会します。</target>
        </trans-unit>
        <trans-unit id="625af40606e435d60c7571eb3eaed21802aa70ee" translate="yes" xml:space="preserve">
          <source>Query Progress Callbacks</source>
          <target state="translated">クエリ プログレス コールバック</target>
        </trans-unit>
        <trans-unit id="e1fe6e5e1618fc5d36b948e04dffddb60ff1e31e" translate="yes" xml:space="preserve">
          <source>Query the text for a Windows error code, as returned by &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx&quot;&gt; &lt;code&gt;GetLastError&lt;/code&gt;&lt;/a&gt;, as a D string.</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx&quot;&gt; &lt;code&gt;GetLastError&lt;/code&gt; &lt;/a&gt;によって返されたWindowsエラーコードのテキストをD文字列としてクエリします。</target>
        </trans-unit>
        <trans-unit id="67ae067d4b34a9534ef6fc12c8532dc45490f123" translate="yes" xml:space="preserve">
          <source>Query the text for a Windows error code, as returned by &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx&quot;&gt; &lt;code&gt;GetLastError&lt;/code&gt;&lt;/a&gt;, as a D string.</source>
          <target state="translated">&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx&quot;&gt; &lt;code&gt;GetLastError&lt;/code&gt; &lt;/a&gt;によって返されるWindowsエラーコードのテキストをD文字列としてクエリします。</target>
        </trans-unit>
        <trans-unit id="be0224eb0002c0644b5fe076b5840980c58dd4dc" translate="yes" xml:space="preserve">
          <source>Queueing all unreachable memory that needs destructors to run.</source>
          <target state="translated">デストラクタを実行する必要がある到達不可能なメモリをすべてキューに入れます。</target>
        </trans-unit>
        <trans-unit id="a56dc6a151cbc05cb8609d8f932b0767b30f6d0e" translate="yes" xml:space="preserve">
          <source>Quick and dirty code need not write any error handling code at all, and don't need to check for errors. The errors will be caught, an appropriate message displayed, and the program gracefully shut down all by default.</source>
          <target state="translated">クイックでダーティなコードは、エラー処理のコードを全く書く必要がなく、エラーをチェックする必要もありません。エラーはキャッチされ、適切なメッセージが表示され、プログラムはデフォルトですべてを優雅にシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="f833b1b092080445c51762180493fddf5376651b" translate="yes" xml:space="preserve">
          <source>Quick and dirty programs are not worth writing tedious error handling code for, and so such utilities tend to be like using a table saw with no blade guards.</source>
          <target state="translated">迅速かつ汚いプログラムは、のための退屈なエラー処理コードを書く価値がないので、そのようなユーティリティは、ブレードガードなしでテーブルののこぎりを使用しているような傾向があります。</target>
        </trans-unit>
        <trans-unit id="3c8b0af5874919bbda28b1f5afc70b825a7fdc39" translate="yes" xml:space="preserve">
          <source>Quotation_Mark</source>
          <target state="translated">Quotation_Mark</target>
        </trans-unit>
        <trans-unit id="7b0257ce75add65485cb879a8ababbebc2270b68" translate="yes" xml:space="preserve">
          <source>Quotes</source>
          <target state="translated">Quotes</target>
        </trans-unit>
        <trans-unit id="8cf3dc59ab6c635606edde6eb01c2303741881c7" translate="yes" xml:space="preserve">
          <source>Quotes a command-line argument in a manner conforming to the behavior of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/bb776391(v=vs.85).aspx&quot;&gt;CommandLineToArgvW&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/bb776391(v=vs.85).aspx&quot;&gt;CommandLineToArgvW&lt;/a&gt;の動作に準拠した方法でコマンドライン引数を引用します。</target>
        </trans-unit>
        <trans-unit id="514d330f764abab7f39f80f5e6630ad5cf282d09" translate="yes" xml:space="preserve">
          <source>Quotes a command-line argument in a manner conforming to the behavior of &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/bb776391(v=vs.85).aspx&quot;&gt;CommandLineToArgvW&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/bb776391(v=vs.85).aspx&quot;&gt;CommandLineToArgvW&lt;/a&gt;の動作に準拠した方法でコマンドライン引数を引用します。</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="46b2a3379a4b9c621f2cae3cf633f16ef00c9de0" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;choices&lt;/code&gt;</source>
          <target state="translated">Rの &lt;code&gt;choices&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7266e22ca42368c5ac28f6cdad79f6a1c7516362" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;fax&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;fax&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e25e4996cd19545180422dc753d9814e4b846890" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;fbx&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;fbx&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e55fb466207612f43c06a1f232ada1085268cc4e" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;haystack&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;haystack&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="424b7c75c63229e3fcc721a2f15ae19e6dbfa620" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;input&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;input&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71188bd33ad186c201291e74f2ea18f5a3641f40" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;name&lt;/code&gt;</source>
          <target state="translated">Rの &lt;code&gt;name&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13640b2ef57c08e53edacc90554f201319c4bd93" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;path&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;path&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cfca0b9b62f6dec32b0f106ee7bd90408f6db66d" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;pathname&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;pathname&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebe092c47cea2696cd458501faa3c0952875efca" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;r&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;r&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab468fbdc306faaa419a93d0688406232175b4c8" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;range&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e695ad661c9be1e85180c63d44f9ddf593365841" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;re&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;re&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97fe6c090c86e02140df1df65d1dc3a2d3f9a4bd" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4452828287fae2c2221b85f0d6fd57783e9416bf" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;sep&lt;/code&gt;</source>
          <target state="translated">9 &lt;code&gt;sep&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d10d6d4b9dfbf3470b6476d9b518976a16168f99" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50863302124895c67709c985bbc8750a0dc5ed66" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;drop&quot;&gt;drop&lt;/strong&gt;(R)(R range, size_t n)</source>
          <target state="translated">R &lt;strong id=&quot;drop&quot;&gt;ドロップ&lt;/strong&gt;（R）（R範囲、size_t n）</target>
        </trans-unit>
        <trans-unit id="fb325cd844a163a42462ecda91c85f8764d32e50" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;dropBack&quot;&gt;dropBack&lt;/strong&gt;(R)(R range, size_t n)</source>
          <target state="translated">R &lt;strong id=&quot;dropBack&quot;&gt;ドロップバック&lt;/strong&gt;（R）（R範囲、size_t n）</target>
        </trans-unit>
        <trans-unit id="1a4956e36adf7f6c345474abdad19d0416fb6771" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;dropBackExactly&quot;&gt;dropBackExactly&lt;/strong&gt;(R)(R range, size_t n)</source>
          <target state="translated">R &lt;strong id=&quot;dropBackExactly&quot;&gt;dropBackExactly&lt;/strong&gt;（R）（R range、size_t n）</target>
        </trans-unit>
        <trans-unit id="5636cd7e75f55155f0813afda029b296c014e5f0" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;dropBackOne&quot;&gt;dropBackOne&lt;/strong&gt;(R)(R range)</source>
          <target state="translated">R &lt;strong id=&quot;dropBackOne&quot;&gt;dropBackOne&lt;/strong&gt;（R）（Rレンジ）</target>
        </trans-unit>
        <trans-unit id="85883c8c957d5efc82ef442a74c58c532150dd43" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;dropExactly&quot;&gt;dropExactly&lt;/strong&gt;(R)(R range, size_t n)</source>
          <target state="translated">R &lt;strong id=&quot;dropExactly&quot;&gt;dropExactly&lt;/strong&gt;（R）（R range、size_t n）</target>
        </trans-unit>
        <trans-unit id="f9cad92fc189a821863e6343ed3112c5c45f7ef5" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;dropOne&quot;&gt;dropOne&lt;/strong&gt;(R)(R range)</source>
          <target state="translated">R &lt;strong id=&quot;dropOne&quot;&gt;dropOne&lt;/strong&gt;（R）（Rレンジ）</target>
        </trans-unit>
        <trans-unit id="11e2a417124b25e85e961d2746bff4dcf2ee0fa8" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(String)(String i)</source>
          <target state="translated">R &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;（文字列）（文字列i）</target>
        </trans-unit>
        <trans-unit id="e8c816cd865443df3fb58bfeee9cf533972311c0" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;replace&quot;&gt;replace&lt;/strong&gt;(alias fun, R, RegEx)(R input, RegEx re)</source>
          <target state="translated">R &lt;strong id=&quot;replace&quot;&gt;置換&lt;/strong&gt;（別名fun、R、RegEx）（R入力、RegEx re）</target>
        </trans-unit>
        <trans-unit id="366f82d7690e508f3f12c24c9b5263e1348fd152" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;replace&quot;&gt;replace&lt;/strong&gt;(alias scheme = match, R, C, RegEx)(R input, RegEx re, const(C)[] format)</source>
          <target state="translated">R &lt;strong id=&quot;replace&quot;&gt;置換&lt;/strong&gt;（エイリアススキーム=一致、R、C、RegEx）（R入力、RegEx re、const（C）[]形式）</target>
        </trans-unit>
        <trans-unit id="7d01ce94655a4a56f469c103c1d6a5369ff08a56" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt;(R, C, RegEx)(R input, RegEx re, const(C)[] format)</source>
          <target state="translated">R &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt;（R、C、RegEx）（R入力、RegEx re、const（C）[]形式）</target>
        </trans-unit>
        <trans-unit id="20a08fddc23874fdd02d8fa4d8a4a5267450724d" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt;(alias fun, R, RegEx)(R input, RegEx re)</source>
          <target state="translated">R &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt;（エイリアスfun、R、RegEx）（R入力、RegEx re）</target>
        </trans-unit>
        <trans-unit id="067f32da0babc4ff738d19aab110dc4b8e9152a3" translate="yes" xml:space="preserve">
          <source>R r</source>
          <target state="translated">R r</target>
        </trans-unit>
        <trans-unit id="8a02cd9a7652426a1cc33b70edf17e072b64bb13" translate="yes" xml:space="preserve">
          <source>R* &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">R * &lt;code&gt;range&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3c006177515d161711463dc36ea326d00dd6c50" translate="yes" xml:space="preserve">
          <source>R-03371-37637</source>
          <target state="translated">R-03371-37637</target>
        </trans-unit>
        <trans-unit id="ed224262865068e4e98f69898960d0c04f8bcdf2" translate="yes" xml:space="preserve">
          <source>R-37514-35566</source>
          <target state="translated">R-37514-35566</target>
        </trans-unit>
        <trans-unit id="aa18ab4548b06f1904b620f598aa53d4dd7a5133" translate="yes" xml:space="preserve">
          <source>R-51971-34154</source>
          <target state="translated">R-51971-34154</target>
        </trans-unit>
        <trans-unit id="791a7d0746cccccb32d298c2a7ae029256ba4f41" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;from&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; R1</target>
        </trans-unit>
        <trans-unit id="a50f0d4d22cfd7772851244d5316a7272acc327a" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;haystack&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;haystack&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d30d08fbaf4f299a6ce6f18a5caaa4b5e3a4bc8" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;inputRange&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;inputRange&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="56e3536a8b44d4a1bd8b6852808418db9282c982" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;path&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;path&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8ce974c87042be5646c37a9d903e4dc28ffe45da" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;r1&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;r1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f79e33e37a7032419b3c7f02e2aeab2ab3a99cb8" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;range1&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;range1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b7bb559e01e420d7f99325c9034331e25d0feda" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;source&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cec38db6f44458a89fca4706fe9db3eeb0925121" translate="yes" xml:space="preserve">
          <source>R1 &lt;strong id=&quot;find&quot;&gt;find&lt;/strong&gt;(alias pred = &quot;a == b&quot;, R1, R2)(R1 haystack, scope R2 needle)</source>
          <target state="translated">R1 &lt;strong id=&quot;find&quot;&gt;find&lt;/strong&gt;（エイリアスpred = &quot;a == b&quot;、R1、R2）（R1 haystack、scope R2 needle）</target>
        </trans-unit>
        <trans-unit id="416e9ded6d684411bfae7ab98068a6cf65ed7a00" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;base&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;base&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d762f078c8aae67290247417557af653d4c9d42" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;buffer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e17c192b2f05c757416a29ee552d3ef90c36764" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;needle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8a873ced34d741501067e5dbac4f4230c5409e3" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;outputRange&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;outputRange&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd423d90d919393604a7c9af9f9e726e3ee924bf" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;r2&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;r2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="712752c9f8be3668be2612d41bc3fc1045f791e0" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;range2&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;range2&lt;/code&gt; 2</target>
        </trans-unit>
        <trans-unit id="10ae534e9e912c0a565bb612503cd04d4b6c3d8e" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;range&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33874d4fed4fab1462ae102319663b9a069aac22" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c90742e8cb6203dd2bfb9d9c4ee46c6e76e62bea" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;withThis&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;withThis&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78316945c53052fc58821336460ed4634e4ff00a" translate="yes" xml:space="preserve">
          <source>RAII (yes, it can work without exceptions)</source>
          <target state="translated">RAII(はい、例外なく動くことができます。</target>
        </trans-unit>
        <trans-unit id="09dca383176e1e45e99b3ee60b7d74333cc1901f" translate="yes" xml:space="preserve">
          <source>RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;allocatorObject&lt;/strong&gt;(A)(A* pa);</source>
          <target state="translated">RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;allocatorObject&lt;/strong&gt;（A）（A * pa）;</target>
        </trans-unit>
        <trans-unit id="91d7fa94c935a86a5398825578e63ee422be5ec3" translate="yes" xml:space="preserve">
          <source>RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;allocatorObject&lt;/strong&gt;(A)(auto ref A a)</source>
          <target state="translated">RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;allocatorObject&lt;/strong&gt;（A）（自動参照A a）</target>
        </trans-unit>
        <trans-unit id="7fcf7b01d91c0309ab3dab25512ada436e2044db" translate="yes" xml:space="preserve">
          <source>RCISharedAllocator &lt;strong id=&quot;sharedAllocatorObject&quot;&gt;sharedAllocatorObject&lt;/strong&gt;(A)(A* pa);</source>
          <target state="translated">RCISharedAllocator &lt;strong id=&quot;sharedAllocatorObject&quot;&gt;sharedAllocatorObject&lt;/strong&gt;（A）（A * pa）;</target>
        </trans-unit>
        <trans-unit id="9a0b08a17aafe0f3eeef32e8158e597e5049b0db" translate="yes" xml:space="preserve">
          <source>REM is the value of x - y * n, where n is the integer nearest the exact value of x / y. If |n - x / y| == 0.5, n is even. If the result is zero, it has the same sign as x. Otherwise, the sign of the result is the sign of x / y. Precision mode has no effect on the remainder functions.</source>
          <target state="translated">REM は x-y*n の値で、n は x/y の正確な値に最も近い整数です。それ以外の場合、結果の符号は x/y の符号となります。</target>
        </trans-unit>
        <trans-unit id="8c1185861af34828e57540e154679254cc1de862" translate="yes" xml:space="preserve">
          <source>RET &lt;strong id=&quot;retStyle&quot;&gt;retStyle&lt;/strong&gt;(TypeFunction tf, bool needsThis);</source>
          <target state="translated">RET &lt;strong id=&quot;retStyle&quot;&gt;retStyle&lt;/strong&gt;（TypeFunction tf、bool needsThis）;</target>
        </trans-unit>
        <trans-unit id="d19cf5985fafdd0a13c43f47452c23390522b7bc" translate="yes" xml:space="preserve">
          <source>RET.stack if return value from function is on the stack, RET.regs otherwise</source>
          <target state="translated">関数の戻り値がスタック上にある場合はRET.stack、そうでない場合はRET.regs</target>
        </trans-unit>
        <trans-unit id="f3ae8b4785072e6df524d9714369c48076e4136a" translate="yes" xml:space="preserve">
          <source>RF &lt;code&gt;from&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; RF</target>
        </trans-unit>
        <trans-unit id="cf48f3d5bf7ea08ce5e6f45d9f362f9581e8b3b2" translate="yes" xml:space="preserve">
          <source>RFC 3986</source>
          <target state="translated">RFC3986</target>
        </trans-unit>
        <trans-unit id="49e1bc88b1068da52ec405c6f119b166edb798fc" translate="yes" xml:space="preserve">
          <source>RFC 4122</source>
          <target state="translated">RFC41222</target>
        </trans-unit>
        <trans-unit id="bc2b02e103b8e9f27fd35f47002cfdd117ae54d6" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different UUID versions. The version shows how a UUID was generated, e.g. a version 4 UUID was generated from a random number, a version 3 UUID from an MD5 hash of a name.</source>
          <target state="translated">RFC 4122では、異なるUUIDのバージョンを定義している。例えば、バージョン4のUUIDは乱数から、バージョン3のUUIDは名前のMD5ハッシュから生成されています。</target>
        </trans-unit>
        <trans-unit id="5bd1d852604ecbde96eb1630eca7b030029c114a" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different UUID versions. The version shows how a UUID was generated, e.g. a version 4 UUID was generated from a random number, a version 3 UUID from an MD5 hash of a name. Returns the version used by this UUID.</source>
          <target state="translated">RFC 4122では、異なるUUIDのバージョンを定義している。例えば、バージョン4のUUIDは乱数から生成されたもので、バージョン3のUUIDは名前のMD5ハッシュから生成されたものです。この UUID が使用しているバージョンを返します。</target>
        </trans-unit>
        <trans-unit id="573781f662bff5ee3bf9c4d12104558f4082fb6a" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different internal data layouts for UUIDs. Returns the format used by this UUID.</source>
          <target state="translated">RFC 4122では、UUIDの異なる内部データレイアウトを定義しています。このUUIDで使用されているフォーマットを返します。</target>
        </trans-unit>
        <trans-unit id="2a95bd082af00e19a4610e5ef939415c5ce11021" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different internal data layouts for UUIDs. These are the UUID formats supported by this module. It's possible to read, compare and use all these Variants, but UUIDs generated by this module will always be in rfc4122 format.</source>
          <target state="translated">RFC 4122 は、UUID の異なる内部データレイアウトを定義しています。これらは、このモジュールがサポートする UUID フォーマットです。これらのすべてのバリアントを読み取ったり、比較したり、使用したりすることは可能ですが、このモジュールによって生成されたUUIDは常にrfc4122形式になります。</target>
        </trans-unit>
        <trans-unit id="0cc5b6f4e8fb3030bdcc57b4e95bb25566697f85" translate="yes" xml:space="preserve">
          <source>RFC 4122 isn't very clear on how UUIDs should be generated from names. It is possible that different implementations return different UUIDs for the same input, so be warned. The implementation for UTF-8 strings and byte arrays used by &lt;code&gt;std.uuid&lt;/code&gt; is compatible with Boost's implementation. &lt;code&gt;std.uuid&lt;/code&gt; guarantees that the same input to this function will generate the same output at any time, on any system (this especially means endianness doesn't matter).</source>
          <target state="translated">RFC 4122は、名前からUUIDを生成する方法についてあまり明確ではありません。異なる実装が同じ入力に対して異なるUUIDを返す可能性があるため、警告されます。 &lt;code&gt;std.uuid&lt;/code&gt; で使用されるUTF-8文字列とバイト配列の実装は、Boostの実装と互換性があります。 &lt;code&gt;std.uuid&lt;/code&gt; は、この関数への同じ入力がいつでも、どのシステムでも同じ出力を生成することを保証します（これは特にエンディアンが問題ではないことを意味します）。</target>
        </trans-unit>
        <trans-unit id="2c7a893b503cfc38ba16ceb5692dcd724ac88416" translate="yes" xml:space="preserve">
          <source>RFC 4122 recommends to use Version 5 UUIDs (SHA-1) instead of Version 3 UUIDs (MD5) for new applications.</source>
          <target state="translated">RFC 4122では、新しいアプリケーションではバージョン3のUUID(MD5)の代わりにバージョン5のUUID(SHA-1)を使用することを推奨しています。</target>
        </trans-unit>
        <trans-unit id="1a2e2c899753e0a3c51ae9565a6de46bc63deb6f" translate="yes" xml:space="preserve">
          <source>RFC 4648 - The Base16, Base32, and Base64 Data Encodings</source>
          <target state="translated">RFC 4648-Base16、Base32、および Base64 データエンコーディング</target>
        </trans-unit>
        <trans-unit id="aa203fcac8070f03e3861b552ee96fa7f237bae2" translate="yes" xml:space="preserve">
          <source>RFC 5321</source>
          <target state="translated">RFC5321</target>
        </trans-unit>
        <trans-unit id="17c58504badf8c1787c4ac4f95c466fc696f2e50" translate="yes" xml:space="preserve">
          <source>RFC 5322</source>
          <target state="translated">RFC53222</target>
        </trans-unit>
        <trans-unit id="735daace003912b5fecc445075fdfb455d272749" translate="yes" xml:space="preserve">
          <source>RFC 822 was the original spec (hence the function's name), whereas RFC 5322 is the current spec.</source>
          <target state="translated">RFC 822 は元々の仕様 (それがこの関数の名前の由来)であり、RFC 5322 は現在の仕様です。</target>
        </trans-unit>
        <trans-unit id="34df16ec4e939a336be88d7c573d53bfe4242745" translate="yes" xml:space="preserve">
          <source>RFC2616</source>
          <target state="translated">RFC2616</target>
        </trans-unit>
        <trans-unit id="3b6ff39841eb9f66194b85cd2a429c407a8477ca" translate="yes" xml:space="preserve">
          <source>RFC2616 Section 14.25</source>
          <target state="translated">RFC2616 セクション14.25</target>
        </trans-unit>
        <trans-unit id="bb23083cf84c9e20bfaaa1a7cafd26ba2c9a83c9" translate="yes" xml:space="preserve">
          <source>RFC2821</source>
          <target state="translated">RFC2821</target>
        </trans-unit>
        <trans-unit id="42ae0d93633168fee4fb705fef08465852bd57ff" translate="yes" xml:space="preserve">
          <source>RFC2822</source>
          <target state="translated">RFC2822</target>
        </trans-unit>
        <trans-unit id="3a9c7d888d2bed3deb431ff0cc9d29e832520d5d" translate="yes" xml:space="preserve">
          <source>RFC959</source>
          <target state="translated">RFC959</target>
        </trans-unit>
        <trans-unit id="2266413cb2b4c8845ed65b52f018ce1dc3aa89f6" translate="yes" xml:space="preserve">
          <source>RL &lt;code&gt;link&lt;/code&gt;</source>
          <target state="translated">RL &lt;code&gt;link&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a27ea486b7c697c55d2af33caf990409623e9366" translate="yes" xml:space="preserve">
          <source>RNG &lt;code&gt;randomGen&lt;/code&gt;</source>
          <target state="translated">RNG &lt;code&gt;randomGen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="938b07b987d5d15811806534d8bfeeabeb06c72a" translate="yes" xml:space="preserve">
          <source>RO &lt;code&gt;original&lt;/code&gt;</source>
          <target state="translated">RO &lt;code&gt;original&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39d1aa776b7a255f3d807b5b8897d1bed0511d44" translate="yes" xml:space="preserve">
          <source>RR &lt;code&gt;otherRanges&lt;/code&gt;</source>
          <target state="translated">RR &lt;code&gt;otherRanges&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a850436297b1d82629832bb29adfcf30f1fc1cd8" translate="yes" xml:space="preserve">
          <source>RR &lt;code&gt;ranges&lt;/code&gt;</source>
          <target state="translated">RR &lt;code&gt;ranges&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16de3e81671885dc0f6c6bce4baf66346a366ed5" translate="yes" xml:space="preserve">
          <source>RSA Data Security, Inc. MD5 Message-Digest Algorithm</source>
          <target state="translated">RSA Data Security,Inc.MD5 メッセージダイジェストアルゴリズム</target>
        </trans-unit>
        <trans-unit id="b8f6115b2e975b7d1e3bf5fac034e18302031d6e" translate="yes" xml:space="preserve">
          <source>RT &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">RT &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd5f8a5117f61c39a5204172f35f9cae1983e553" translate="yes" xml:space="preserve">
          <source>RTSP request method (OPTIONS, SETUP, PLAY, etc...)</source>
          <target state="translated">RTSPリクエスト方法(OPTIONS、SETUP、PLAYなど)。</target>
        </trans-unit>
        <trans-unit id="371bf1c52e812b6b49ae51cbb46d07593674f96f" translate="yes" xml:space="preserve">
          <source>Radical</source>
          <target state="translated">Radical</target>
        </trans-unit>
        <trans-unit id="204a8eb40a4bd8af4678da109de683c6a1f65eb0" translate="yes" xml:space="preserve">
          <source>Rainer Schuetze</source>
          <target state="translated">ライナー・シュエッツェ</target>
        </trans-unit>
        <trans-unit id="d019a6997366fd64d4e2e18529510a7f45eb8edb" translate="yes" xml:space="preserve">
          <source>Raises an error if a version identifier is reserved.</source>
          <target state="translated">バージョン識別子が予約されている場合にエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="4dc5d6b0d4a5b8f3e3b4cbc848f0214ae661809b" translate="yes" xml:space="preserve">
          <source>Random access range with slicing and everything</source>
          <target state="translated">ランダムアクセス範囲にスライシングやなんでもあり</target>
        </trans-unit>
        <trans-unit id="daf87088c3240e4a9a9584a1049d3548474219fc" translate="yes" xml:space="preserve">
          <source>Random number generators for internal usage.</source>
          <target state="translated">内部で使用するための乱数発生器。</target>
        </trans-unit>
        <trans-unit id="a894f9ef66fee642a62aec7c8de8b1d7ab1bb2ee" translate="yes" xml:space="preserve">
          <source>Random variate drawn from the index values [0, ... &lt;code&gt;proportions.length&lt;/code&gt; - 1], with the probability of getting an individual index value &lt;code&gt;i&lt;/code&gt; being proportional to &lt;code&gt;proportions[i]&lt;/code&gt;.</source>
          <target state="translated">インデックス値[0、... &lt;code&gt;proportions.length&lt;/code&gt; -1] から抽出されたランダムな変量。個々のインデックス値 &lt;code&gt;i&lt;/code&gt; を得る確率は、 &lt;code&gt;proportions[i]&lt;/code&gt; に比例します。</target>
        </trans-unit>
        <trans-unit id="fe974058f76f0bd197fe8cd84da0586782e2e9ca" translate="yes" xml:space="preserve">
          <source>Random variate drawn from the uniform distribution across all possible values of the integral, character or enum type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">整数、文字、または列挙型 &lt;code&gt;T&lt;/code&gt; のすべての可能な値にわたる均一分布から抽出されたランダム変量。</target>
        </trans-unit>
        <trans-unit id="9c0ab3c4414e6a52d0de45047951538395311a24" translate="yes" xml:space="preserve">
          <source>Random-access primitive. It is offered if &lt;code&gt; isRandomAccessRange!RangeOfRanges &amp;amp;&amp;amp; (opt == TransverseOptions.assumeNotJagged || opt == TransverseOptions.enforceNotJagged)&lt;/code&gt;.</source>
          <target state="translated">ランダムアクセスプリミティブ。 &lt;code&gt; isRandomAccessRange!RangeOfRanges &amp;amp;&amp;amp; (opt == TransverseOptions.assumeNotJagged || opt == TransverseOptions.enforceNotJagged)&lt;/code&gt; 場合に提供されます。</target>
        </trans-unit>
        <trans-unit id="a5f170f45a67325667fa9e118360d9450236d377" translate="yes" xml:space="preserve">
          <source>Random-access range over Grapheme's &lt;a href=&quot;#Character&quot;&gt;characters&lt;/a&gt;.</source>
          <target state="translated">書記素の&lt;a href=&quot;#Character&quot;&gt;キャラクターの&lt;/a&gt;ランダムアクセス範囲。</target>
        </trans-unit>
        <trans-unit id="05605c8f58501d21613f455df459e82081c3cdc7" translate="yes" xml:space="preserve">
          <source>RandomAccessFinite!E &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t, size_t);</source>
          <target state="translated">RandomAccessFinite！E &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（size_t、size_t）;</target>
        </trans-unit>
        <trans-unit id="2558f9c390a433acd2a5f9d5a6cda985cdc6b00a" translate="yes" xml:space="preserve">
          <source>RandomAccessRange &lt;code&gt;haystack&lt;/code&gt;</source>
          <target state="translated">RandomAccessRange &lt;code&gt;haystack&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36786d6240b8deeb5c7ce659046f8b88c692e5ce" translate="yes" xml:space="preserve">
          <source>RandomAccessRange &lt;strong id=&quot;find&quot;&gt;find&lt;/strong&gt;(RandomAccessRange, alias pred, InputRange)(RandomAccessRange haystack, scope BoyerMooreFinder!(pred, InputRange) needle);</source>
          <target state="translated">RandomAccessRange &lt;strong id=&quot;find&quot;&gt;find&lt;/strong&gt;（RandomAccessRange、alias pred、InputRange）（RandomAccessRange haystack、scope BoyerMooreFinder！（pred、InputRange）needle）;</target>
        </trans-unit>
        <trans-unit id="222ef9f907f129a56ec254183f3ff4dc6d45278d" translate="yes" xml:space="preserve">
          <source>RandomGen &lt;code&gt;gen&lt;/code&gt;</source>
          <target state="translated">RandomGen &lt;code&gt;gen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b77d02793d6a139d9a2b3d2d97494bc2270ca425" translate="yes" xml:space="preserve">
          <source>RandomGen &lt;code&gt;urng&lt;/code&gt;</source>
          <target state="translated">RandomGen &lt;code&gt;urng&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a16c5bbe4bf996740f257aa1e81bd57e4c52c8dd" translate="yes" xml:space="preserve">
          <source>Range</source>
          <target state="translated">Range</target>
        </trans-unit>
        <trans-unit id="bdc00a10e731625034468db23e692559a5ae1f69" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;doesThisEnd&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;doesThisEnd&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6459a8a608d380da143d17584f95660d532fc6d" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;doesThisStart&lt;/code&gt;</source>
          <target state="translated">範囲はこの &lt;code&gt;doesThisStart&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ae8a55dd9bb3b7d6c3722fe1726f400b996eba3" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;filename&lt;/code&gt;</source>
          <target state="translated">範囲の &lt;code&gt;filename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b893bf3e72d1de5c2698b1bf1165ebf7ba8ea021" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;haystack&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;haystack&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fab70957ac55da835b218bcbb7da119da5da0694" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;input&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;input&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b449f4abbe52b829a268a0611f72dbd66bf08520" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;items&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;items&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a7401fad972256451b5418dea7bd2245fc501ba" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;magnitude&lt;/code&gt;</source>
          <target state="translated">範囲の &lt;code&gt;magnitude&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc112cfba33c9e26d641dc22c4809b4b608180e3" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;needle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1e47737bbac3975754a3eca700ddd881c3a70e7" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;path&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;path&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="765b7acfeb236a5d946cff8513b18b77080f38e3" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;r&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;r&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b8cb3e3f4922e3ac872f84f7fbe039683f1fc007" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;range&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7730cf02532e3c48c2cc95f48183a04b086e350b" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c59c250a7f0c3582bafe2d7cc9507cd1bfb2b4c" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;segments&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;segments&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="98caacb48def81b9a800ce6e242ac737eae9b7e6" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;source&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b223975eedc441a181b2d83e0a620e372555573" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;str&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;str&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="942c1c1d42b71f9968f58bccd5c762229b58a106" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;stuff&lt;/code&gt;</source>
          <target state="translated">レンジの &lt;code&gt;stuff&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="958dc324f88870b31b40c243dd1ecf447384d41c" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;tgt&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;tgt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd6d020deb1cc093e6b3d4f3f4c6acba70a62219" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chomp&quot;&gt;chomp&lt;/strong&gt;(Range)(Range str)</source>
          <target state="translated">Range &lt;strong id=&quot;chomp&quot;&gt;chomp&lt;/strong&gt;（Range）（Range str）</target>
        </trans-unit>
        <trans-unit id="958a969c8d619dd2e21dd942e24dc74bfc9137eb" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chomp&quot;&gt;chomp&lt;/strong&gt;(Range, C2)(Range str, const(C2)[] delimiter)</source>
          <target state="translated">Range &lt;strong id=&quot;chomp&quot;&gt;chomp&lt;/strong&gt;（Range、C2）（Range str、const（C2）[] delimiter）</target>
        </trans-unit>
        <trans-unit id="387b549e3439c27c5968eadec0e4210d080a7d80" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chompPrefix&quot;&gt;chompPrefix&lt;/strong&gt;(Range, C2)(Range str, const(C2)[] delimiter)</source>
          <target state="translated">Range &lt;strong id=&quot;chompPrefix&quot;&gt;chompPrefix&lt;/strong&gt;（Range、C2）（Range str、const（C2）[] delimiter）</target>
        </trans-unit>
        <trans-unit id="7d750d9399cda1002cbc697092da98fe61feb3fa" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chop&quot;&gt;chop&lt;/strong&gt;(Range)(Range str)</source>
          <target state="translated">レンジ&lt;strong id=&quot;chop&quot;&gt;チョップ&lt;/strong&gt;（Range）（Range str）</target>
        </trans-unit>
        <trans-unit id="5374aa394be302873be7b9e5f298b412424fd0c2" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;findAdjacent&quot;&gt;findAdjacent&lt;/strong&gt;(alias pred = &quot;a == b&quot;, Range)(Range r)</source>
          <target state="translated">範囲&lt;strong id=&quot;findAdjacent&quot;&gt;findAdjacent&lt;/strong&gt;（エイリアスpred = &quot;a == b&quot;、Range）（範囲r）</target>
        </trans-unit>
        <trans-unit id="c61e9a986955ab73c7c51b7c6290309881a726d0" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;linearRemove&quot;&gt;linearRemove&lt;/strong&gt;(Range r);</source>
          <target state="translated">範囲&lt;strong id=&quot;linearRemove&quot;&gt;線形削除&lt;/strong&gt;（範囲r）;</target>
        </trans-unit>
        <trans-unit id="8a4737705e7cd61fe5be23dbe69e47363f785ea9" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;linearRemove&quot;&gt;linearRemove&lt;/strong&gt;(Take!Range r);</source>
          <target state="translated">レンジ&lt;strong id=&quot;linearRemove&quot;&gt;linearRemove&lt;/strong&gt;（！範囲Rを取ります）。</target>
        </trans-unit>
        <trans-unit id="483463cf9312055d259a327156d9725d80165b39" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;lowerBound&quot;&gt;lowerBound&lt;/strong&gt;(Elem e);</source>
          <target state="translated">範囲&lt;strong id=&quot;lowerBound&quot;&gt;lowerBound&lt;/strong&gt;（要素e）;</target>
        </trans-unit>
        <trans-unit id="daf2b8c4e51410249a2cddb780dde47dfd56c9f2" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;maxPos&quot;&gt;maxPos&lt;/strong&gt;(alias pred = &quot;a &amp;lt; b&quot;, Range)(Range range)</source>
          <target state="translated">範囲&lt;strong id=&quot;maxPos&quot;&gt;maxPos&lt;/strong&gt;（エイリアスpred = &quot;a &amp;lt;b&quot;、Range）（範囲の範囲）</target>
        </trans-unit>
        <trans-unit id="8d001c4e9b0a367012727ac2d8a9eff83c387f7b" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;minPos&quot;&gt;minPos&lt;/strong&gt;(alias pred = &quot;a &amp;lt; b&quot;, Range)(Range range)</source>
          <target state="translated">範囲&lt;strong id=&quot;minPos&quot;&gt;minPos&lt;/strong&gt;（エイリアスpred = &quot;a &amp;lt;b&quot;、Range）（範囲の範囲）</target>
        </trans-unit>
        <trans-unit id="d284bc77e731a0b9a6d12df2a5238c3a06464947" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;();</source>
          <target state="translated">範囲&lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="bc2a5d0466c36ffd67337b24e664ae0f79c874ca" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t a, size_t b);</source>
          <target state="translated">範囲&lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（size_t a、size_t b）;</target>
        </trans-unit>
        <trans-unit id="c11b4e7b6b47c28df5004fd6ddf7a545a426ca49" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t i, size_t j);</source>
          <target state="translated">範囲&lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（size_t i、size_t j）;</target>
        </trans-unit>
        <trans-unit id="39f32596eb8aca6da2ab14245d948d6847ce050e" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t low, size_t high);</source>
          <target state="translated">範囲&lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（size_t低、size_t高）;</target>
        </trans-unit>
        <trans-unit id="d42de6f1841b39c620b9c8a2ea05d1f76c726764" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partialShuffle&quot;&gt;partialShuffle&lt;/strong&gt;(Range)(Range r, in size_t n)</source>
          <target state="translated">Range &lt;strong id=&quot;partialShuffle&quot;&gt;partialShuffle&lt;/strong&gt;（Range）（Range r、in size_t n）</target>
        </trans-unit>
        <trans-unit id="6903f88dabb579ebb843ddd5140458c35c9704e5" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partialShuffle&quot;&gt;partialShuffle&lt;/strong&gt;(Range, RandomGen)(Range r, in size_t n, ref RandomGen gen)</source>
          <target state="translated">Range &lt;strong id=&quot;partialShuffle&quot;&gt;partialShuffle&lt;/strong&gt;（Range、RandomGen）（Range r、in size_t n、ref RandomGen gen）</target>
        </trans-unit>
        <trans-unit id="9142d2d0e717f4080c77ae59566752d24bd34d36" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partition&quot;&gt;partition&lt;/strong&gt;(alias predicate, SwapStrategy ss = SwapStrategy.unstable, Range)(Range r)</source>
          <target state="translated">範囲&lt;strong id=&quot;partition&quot;&gt;パーティション&lt;/strong&gt;（エイリアス述語、SwapStrategy ss = SwapStrategy.unstable、Range）（Range r）</target>
        </trans-unit>
        <trans-unit id="3bcc5c63d8cc77c95d8df1c024b2432266bd79b7" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partition&quot;&gt;partition&lt;/strong&gt;(alias predicate, SwapStrategy ss, Range)(Range r)</source>
          <target state="translated">範囲&lt;strong id=&quot;partition&quot;&gt;パーティション&lt;/strong&gt;（エイリアス述語、SwapStrategy ss、Range）（範囲r）</target>
        </trans-unit>
        <trans-unit id="341436ba0e810d212a6a1812137bb20b5c206fc6" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;randomShuffle&quot;&gt;randomShuffle&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">範囲&lt;strong id=&quot;randomShuffle&quot;&gt;randomShuffle&lt;/strong&gt;（Range）（Range r）</target>
        </trans-unit>
        <trans-unit id="9bfa4950aa7b637010c51a6ca464ea0c1b28b280" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;randomShuffle&quot;&gt;randomShuffle&lt;/strong&gt;(Range, RandomGen)(Range r, ref RandomGen gen)</source>
          <target state="translated">範囲&lt;strong id=&quot;randomShuffle&quot;&gt;randomShuffle&lt;/strong&gt;（Range、RandomGen）（Range r、ref RandomGen gen）</target>
        </trans-unit>
        <trans-unit id="be8785c63fd8f14c56f2f13abbae759e756c0a19" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(Range r);</source>
          <target state="translated">範囲&lt;strong id=&quot;remove&quot;&gt;削除&lt;/strong&gt;（範囲r）;</target>
        </trans-unit>
        <trans-unit id="e2981773ba184620c192e5177874cbcd5df9d535" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(SwapStrategy s = SwapStrategy.stable, Range, Offset...)(Range range, Offset offset)</source>
          <target state="translated">範囲の&lt;strong id=&quot;remove&quot;&gt;削除&lt;/strong&gt;（SwapStrategy s = SwapStrategy.stable、Range、Offset ...）（Range range、Offset offset）</target>
        </trans-unit>
        <trans-unit id="f70143fb0f43c9d5f880ec91b1b8e94d2535149a" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(Take!Range r);</source>
          <target state="translated">範囲&lt;strong id=&quot;remove&quot;&gt;削除&lt;/strong&gt;（Take！Range r）;</target>
        </trans-unit>
        <trans-unit id="dc8629ec9f5b7067218b999012871cedb67cee47" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(alias pred, SwapStrategy s = SwapStrategy.stable, Range)(Range range);</source>
          <target state="translated">範囲の&lt;strong id=&quot;remove&quot;&gt;削除&lt;/strong&gt;（エイリアスpred、SwapStrategy s = SwapStrategy.stable、Range）（範囲の範囲）;</target>
        </trans-unit>
        <trans-unit id="59fdc553edeb4d0d3d3ac64cb93ae52f0640a2d9" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;reverse&quot;&gt;reverse&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">レンジ&lt;strong id=&quot;reverse&quot;&gt;反転&lt;/strong&gt;（Range）（Range r）</target>
        </trans-unit>
        <trans-unit id="1f67ade8615231c9e6f1eceec74eb881945beec1" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;strip&quot;&gt;strip&lt;/strong&gt;(Range, E)(Range range, E element)</source>
          <target state="translated">レンジ&lt;strong id=&quot;strip&quot;&gt;ストリップ&lt;/strong&gt;（レンジ、E）（レンジレンジ、Eエレメント）</target>
        </trans-unit>
        <trans-unit id="1fb46d0c90f5b292ffca7c031b1dc38906b51867" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;strip&quot;&gt;strip&lt;/strong&gt;(alias pred, Range)(Range range)</source>
          <target state="translated">レンジ&lt;strong id=&quot;strip&quot;&gt;ストリップ&lt;/strong&gt;（エイリアスプレド、レンジ）（レンジレンジ）</target>
        </trans-unit>
        <trans-unit id="3614af376bd06ba88949586c27df5bf9080807f7" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;(Range, E)(Range range, E element)</source>
          <target state="translated">Range &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;（Range、E）（Range range、E element）</target>
        </trans-unit>
        <trans-unit id="6885e77726b545d7302e685cf148f4d98fbe84a1" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;(alias pred, Range)(Range range)</source>
          <target state="translated">Range &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;（エイリアスpred、Range）（範囲の範囲）</target>
        </trans-unit>
        <trans-unit id="ce33d5d4abc1be9b6b923d9319b04bb93b60e3b9" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;(Range, E)(Range range, E element)</source>
          <target state="translated">Range &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;（Range、E）（Range range、E element）</target>
        </trans-unit>
        <trans-unit id="22cc986d97351e10d1dbeeba473b9aeec680758f" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;(alias pred, Range)(Range range)</source>
          <target state="translated">Range &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;（エイリアスpred、Range）（範囲の範囲）</target>
        </trans-unit>
        <trans-unit id="8922aa2733c368de22e8bfd1b73084f8c48c862f" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;upperBound&quot;&gt;upperBound&lt;/strong&gt;(Elem e);</source>
          <target state="translated">範囲&lt;strong id=&quot;upperBound&quot;&gt;上限&lt;/strong&gt;（&lt;strong id=&quot;upperBound&quot;&gt;要素&lt;/strong&gt; e）;</target>
        </trans-unit>
        <trans-unit id="4e07b5b6833aaedcc15663d77743676b9312f065" translate="yes" xml:space="preserve">
          <source>Range Y</source>
          <target state="translated">レンジ Y</target>
        </trans-unit>
        <trans-unit id="f48019e5bf7ec363745690f4e315480b20a5136a" translate="yes" xml:space="preserve">
          <source>Range error?</source>
          <target state="translated">レンジエラー?</target>
        </trans-unit>
        <trans-unit id="7fe97179ce97a6e49548e8ed3307493377b319d0" translate="yes" xml:space="preserve">
          <source>Range for Lists.</source>
          <target state="translated">リストの範囲。</target>
        </trans-unit>
        <trans-unit id="eba68d314890b6f6a70e36a43c74d5ce32405e46" translate="yes" xml:space="preserve">
          <source>Range for blocks.</source>
          <target state="translated">ブロックの範囲</target>
        </trans-unit>
        <trans-unit id="c89a73bed4c8cbf35f6dcfd9a40f20e25db682af" translate="yes" xml:space="preserve">
          <source>Range from which the chunks will be selected</source>
          <target state="translated">チャンクが選択される範囲</target>
        </trans-unit>
        <trans-unit id="817d0998dd4c5bb46a7e6021d86c9c99c245a844" translate="yes" xml:space="preserve">
          <source>Range from which the slide will be selected</source>
          <target state="translated">スライドを選択する範囲</target>
        </trans-unit>
        <trans-unit id="a0f235889bbcb32d2a6ce4f5c086ecc8aaff6b64" translate="yes" xml:space="preserve">
          <source>Range functions</source>
          <target state="translated">レンジ機能</target>
        </trans-unit>
        <trans-unit id="985230fe57670eee6d480371e5539885e9d2193e" translate="yes" xml:space="preserve">
          <source>Range interface.</source>
          <target state="translated">レンジインターフェース。</target>
        </trans-unit>
        <trans-unit id="581a55513996060c488e2dcd565e8b46f3a2b154" translate="yes" xml:space="preserve">
          <source>Range of all sliding windows with propagated bi-directionality, forwarding, random access, and slicing.</source>
          <target state="translated">伝搬型双方向性、転送、ランダムアクセス、スライシングを備えたすべてのスライディングウィンドウの範囲。</target>
        </trans-unit>
        <trans-unit id="137cc21ae1fc638dcb51e74df73a2d56e1f9c67b" translate="yes" xml:space="preserve">
          <source>Range of chunks.</source>
          <target state="translated">チャンクの範囲。</target>
        </trans-unit>
        <trans-unit id="a7a76727b30bcd8da9b8a6edd30afc51c870bcb3" translate="yes" xml:space="preserve">
          <source>Range of ranges</source>
          <target state="translated">範囲の範囲</target>
        </trans-unit>
        <trans-unit id="5555dfd39b2edc98ced9f7334c9a6392f14cf52b" translate="yes" xml:space="preserve">
          <source>Range or string specifying the directory name</source>
          <target state="translated">ディレクトリ名を指定する範囲または文字列</target>
        </trans-unit>
        <trans-unit id="a1ddf1e045360a472de28705a5205e74f1573574" translate="yes" xml:space="preserve">
          <source>Range over bit set. Each element is the bit number that is set.</source>
          <target state="translated">セットされたビットの範囲。各要素は設定されているビット番号です。</target>
        </trans-unit>
        <trans-unit id="77e67487e9cb8bf2a5778f171bf816c7161b5db1" translate="yes" xml:space="preserve">
          <source>Range primitives</source>
          <target state="translated">レンジプリミティブ</target>
        </trans-unit>
        <trans-unit id="3c31ca8b15dc9b218b4e66fc66e0b896406fabf3" translate="yes" xml:space="preserve">
          <source>Range primitives are carried over to the returned range if all of the ranges provide them</source>
          <target state="translated">すべての範囲が範囲プリミティブを提供している場合、範囲プリミティブは返される範囲に持ち越されます。</target>
        </trans-unit>
        <trans-unit id="b16f736ad7fe0991fb122f8c903cf0a4cbbbe6fb" translate="yes" xml:space="preserve">
          <source>Range primitives for worker-local storage. The purpose of this is to access results produced by each worker thread from a single thread once you are no longer using the worker-local storage from multiple threads. Do not use this struct in the parallel portion of your algorithm.</source>
          <target state="translated">ワーカーローカルストレージ用のレンジプリミティブです。これの目的は、複数のスレッドからワーカローカル ストレージを使用しなくなったら、各ワーカースレッドが生成した結果に単一のスレッドからアクセスすることです。アルゴリズムの並列部分ではこの構造体を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="31dcddbb1c2c353cd8249a666fee5a2f0432234f" translate="yes" xml:space="preserve">
          <source>Range primitives may throw &lt;code&gt;StdioException&lt;/code&gt; on I/O error.</source>
          <target state="translated">範囲プリミティブは、I / Oエラー時に &lt;code&gt;StdioException&lt;/code&gt; をスローする場合があります。</target>
        </trans-unit>
        <trans-unit id="5386fccbcb76f4112f36ee49b1376281ebad0cc7" translate="yes" xml:space="preserve">
          <source>Range primitives.</source>
          <target state="translated">レンジプリミティブ。</target>
        </trans-unit>
        <trans-unit id="a23d722689f8ff7700f014fabb7100a7edace801" translate="yes" xml:space="preserve">
          <source>Range r</source>
          <target state="translated">範囲 r</target>
        </trans-unit>
        <trans-unit id="a188ed7de729e7ba08e4510d12d5fbc93676c14c" translate="yes" xml:space="preserve">
          <source>Range sampling</source>
          <target state="translated">レンジサンプリング</target>
        </trans-unit>
        <trans-unit id="bdb3b810511da6b4ebbfc639e29a1653d7944da1" translate="yes" xml:space="preserve">
          <source>Range that iterates the indices of the set bits in &lt;code&gt;value&lt;/code&gt;. Index 0 corresponds to the least significant bit. For signed integers, the highest index corresponds to the sign bit.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; に設定されたビットのインデックスを反復する範囲。インデックス0は最下位ビットに対応します。符号付き整数の場合、最大のインデックスは符号ビットに対応します。</target>
        </trans-unit>
        <trans-unit id="2cd92460ddb1556aa3ff68a514d0c6002ee43410" translate="yes" xml:space="preserve">
          <source>Range to get, specified as an ASCII string.</source>
          <target state="translated">取得する範囲をASCII文字列で指定します。</target>
        </trans-unit>
        <trans-unit id="707606956aa2aad968b9a1b08feec62ccba19236" translate="yes" xml:space="preserve">
          <source>Range whose elements consist of a randomly selected subset of the elements of &lt;code&gt;r&lt;/code&gt;, in the same order as these elements appear in &lt;code&gt;r&lt;/code&gt; itself. Will be a forward range if both &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;rng&lt;/code&gt; are forward ranges, an input range otherwise.  &lt;code&gt;RandomSample&lt;/code&gt; implements Jeffrey Scott Vitter's Algorithm D (see Vitter &lt;a href=&quot;http://dx.doi.org/10.1145/358105.893&quot;&gt;1984&lt;/a&gt;, &lt;a href=&quot;http://dx.doi.org/10.1145/23002.23003&quot;&gt;1987&lt;/a&gt;), which selects a sample of size &lt;code&gt;n&lt;/code&gt; in O(n) steps and requiring O(n) random variates, regardless of the size of the data being sampled. The exception to this is if traversing k elements on the input range is itself an O(k) operation (e.g. when sampling lines from an input file), in which case the sampling calculation will inevitably be of O(total).  RandomSample will throw an exception if &lt;code&gt;total&lt;/code&gt; is verifiably less than the total number of elements available in the input, or if &lt;code&gt;n &amp;gt; total&lt;/code&gt;.  If no random number generator is passed to &lt;code&gt;randomSample&lt;/code&gt;, the thread-global RNG rndGen will be used internally.</source>
          <target state="translated">要素が &lt;code&gt;r&lt;/code&gt; の要素のランダムに選択されたサブセットで構成される範囲。これらの要素は &lt;code&gt;r&lt;/code&gt; に現れるのと同じ順序です。自体にです。 &lt;code&gt;r&lt;/code&gt; と &lt;code&gt;rng&lt;/code&gt; の両方が前方範囲の場合は前方範囲になり、そうでない場合は入力範囲になります。 &lt;code&gt;RandomSample&lt;/code&gt; 実装ジェフリー・スコットVitterのアルゴリズムD（Vitter参照&lt;a href=&quot;http://dx.doi.org/10.1145/358105.893&quot;&gt;1984&lt;/a&gt;、&lt;a href=&quot;http://dx.doi.org/10.1145/23002.23003&quot;&gt;1987&lt;/a&gt;サイズのサンプルを選択する）、 &lt;code&gt;n&lt;/code&gt; はサンプリングされるデータのサイズに関係なく、O（n）ステップでO（n）ランダム変量を必要とします。これの例外は、入力範囲のk要素のトラバース自体がO（k）操作である場合（たとえば、入力ファイルからラインをサンプリングする場合）、その場合、サンプリング計算は必然的にO（合計）になります。 RandomSampleは、 &lt;code&gt;total&lt;/code&gt; が入力で使用可能な要素の総数よりも確実に少ない場合、または &lt;code&gt;n &amp;gt; total&lt;/code&gt; 場合に例外をスローします。 &lt;code&gt;randomSample&lt;/code&gt; に乱数ジェネレータが渡されない場合、スレッドグローバルRNG rndGenが内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="42b101d7dca383ee220afe442b88458be2e50a7f" translate="yes" xml:space="preserve">
          <source>Range whose elements consist of a randomly selected subset of the elements of &lt;code&gt;r&lt;/code&gt;, in the same order as these elements appear in &lt;code&gt;r&lt;/code&gt; itself. Will be a forward range if both &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;rng&lt;/code&gt; are forward ranges, an input range otherwise.  &lt;code&gt;RandomSample&lt;/code&gt; implements Jeffrey Scott Vitter's Algorithm D (see Vitter &lt;a href=&quot;https://dx.doi.org/10.1145/358105.893&quot;&gt;1984&lt;/a&gt;, &lt;a href=&quot;https://dx.doi.org/10.1145/23002.23003&quot;&gt;1987&lt;/a&gt;), which selects a sample of size &lt;code&gt;n&lt;/code&gt; in O(n) steps and requiring O(n) random variates, regardless of the size of the data being sampled. The exception to this is if traversing k elements on the input range is itself an O(k) operation (e.g. when sampling lines from an input file), in which case the sampling calculation will inevitably be of O(total).  RandomSample will throw an exception if &lt;code&gt;total&lt;/code&gt; is verifiably less than the total number of elements available in the input, or if &lt;code&gt;n &amp;gt; total&lt;/code&gt;.  If no random number generator is passed to &lt;code&gt;randomSample&lt;/code&gt;, the thread-global RNG rndGen will be used internally.</source>
          <target state="translated">これらの要素が &lt;code&gt;r&lt;/code&gt; 自体に現れるのと同じ順序で、要素が &lt;code&gt;r&lt;/code&gt; の要素のランダムに選択されたサブセットで構成される範囲。 &lt;code&gt;r&lt;/code&gt; と &lt;code&gt;rng&lt;/code&gt; の両方が順方向範囲である場合は順方向範囲になり、それ以外の場合は入力範囲になります。 &lt;code&gt;RandomSample&lt;/code&gt; 実装ジェフリー・スコットVitterのアルゴリズムD（Vitter参照&lt;a href=&quot;https://dx.doi.org/10.1145/358105.893&quot;&gt;1984&lt;/a&gt;、&lt;a href=&quot;https://dx.doi.org/10.1145/23002.23003&quot;&gt;1987&lt;/a&gt;サイズのサンプルを選択する）、 &lt;code&gt;n&lt;/code&gt; はサンプリングされるデータのサイズに関係なく、O（n）ステップで、O（n）ランダム変量が必要です。これの例外は、入力範囲でk個の要素をトラバースすること自体がO（k）操作である場合（たとえば、入力ファイルから行をサンプリングする場合）です。この場合、サンプリング計算は必然的にO（合計）になります。 &lt;code&gt;total&lt;/code&gt; が入力で使用可能な要素の総数よりも検証可能に少ない場合、または &lt;code&gt;n &amp;gt; total&lt;/code&gt; 場合、RandomSampleは例外をスローします。 &lt;code&gt;randomSample&lt;/code&gt; に乱数ジェネレーターが渡されない場合、スレッドグローバルRNGrndGenが内部で使用されます。</target>
        </trans-unit>
        <trans-unit id="da898b85342ec8bed1bcedc57734a9570d8506e9" translate="yes" xml:space="preserve">
          <source>Range whose elements consist of the elements of &lt;code&gt;r&lt;/code&gt;, in random order. Will be a forward range if both &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;rng&lt;/code&gt; are forward ranges, an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; otherwise.</source>
          <target state="translated">要素がの要素で構成される範囲 &lt;code&gt;r&lt;/code&gt; ランダムな順序 r。 &lt;code&gt;r&lt;/code&gt; と &lt;code&gt;rng&lt;/code&gt; の両方が前方範囲の場合は前方範囲になり、そうでない場合は&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5e28d7706622cb0ade852ece3b071a320897761a" translate="yes" xml:space="preserve">
          <source>Range with &lt;code&gt;path&lt;/code&gt;'s extension (if any) replaced with &lt;code&gt;ext&lt;/code&gt;. The element encoding type of the returned range will be the same as &lt;code&gt;path&lt;/code&gt;'s.</source>
          <target state="translated">範囲 &lt;code&gt;path&lt;/code&gt; の拡張子（存在する場合）が &lt;code&gt;ext&lt;/code&gt; に置き換えられた。返される範囲の要素エンコーディングタイプは、 &lt;code&gt;path&lt;/code&gt; と同じになります。</target>
        </trans-unit>
        <trans-unit id="116ac105826a244bad9f22ac660f735b392e1f85" translate="yes" xml:space="preserve">
          <source>Range-checking integral arithmetic primitives.</source>
          <target state="translated">積分演算プリミティブのレンジチェック。</target>
        </trans-unit>
        <trans-unit id="63b0dce7a81bbf27d07ec74cffd13b62bccbd329" translate="yes" xml:space="preserve">
          <source>Range-generating function.</source>
          <target state="translated">レンジ生成機能。</target>
        </trans-unit>
        <trans-unit id="776b24fc4d7da279e8b47ad2f5463b819a8f755a" translate="yes" xml:space="preserve">
          <source>Range1 &lt;code&gt;filename1&lt;/code&gt;</source>
          <target state="translated">範囲1 &lt;code&gt;filename1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="47df8501644cae0437fd342841ac8295a7fd91e1" translate="yes" xml:space="preserve">
          <source>Range1 &lt;code&gt;r1&lt;/code&gt;</source>
          <target state="translated">Range1 &lt;code&gt;r1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0980e211f154684c7c46a51fe24ce8151e9f12d8" translate="yes" xml:space="preserve">
          <source>Range1 &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">範囲1 &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="530d96382074b2a96b8d2dbeb5513c5515282c2c" translate="yes" xml:space="preserve">
          <source>Range2 &lt;code&gt;filename2&lt;/code&gt;</source>
          <target state="translated">範囲2 &lt;code&gt;filename2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="146251698eace2c34854524a27ab059a70e0d910" translate="yes" xml:space="preserve">
          <source>Range2 &lt;code&gt;r2&lt;/code&gt;</source>
          <target state="translated">Range2 &lt;code&gt;r2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71efb0fda574fd881c8571530c85ca491f3c5777" translate="yes" xml:space="preserve">
          <source>Range2 &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">範囲2 &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b36f6cc426c7e4986d8d9dc005e3e53da9e0cf17" translate="yes" xml:space="preserve">
          <source>RangeElementType &lt;code&gt;seed&lt;/code&gt;</source>
          <target state="translated">RangeElementType &lt;code&gt;seed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ee35853bdc357f54f009f3a254a4c03179806f1" translate="yes" xml:space="preserve">
          <source>RangeIndex &lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">RangeIndex &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9cf9b28262ece92730f8184b32499cd27d72d4c2" translate="yes" xml:space="preserve">
          <source>RangeOfRanges &lt;code&gt;ror&lt;/code&gt;</source>
          <target state="translated">RangeOfRanges &lt;code&gt;ror&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b442bcb1aa8cfdb401a404b0f481728a04ecf1b4" translate="yes" xml:space="preserve">
          <source>RangeOfRanges &lt;code&gt;rr&lt;/code&gt;</source>
          <target state="translated">RangeOfRanges &lt;code&gt;rr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b53699547b38575c831f9690dd54cd38036de3a0" translate="yes" xml:space="preserve">
          <source>Ranges &lt;code&gt;needles&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;needles&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d1121f255b3ef8af7acd07bdf41b901a70672ba" translate="yes" xml:space="preserve">
          <source>Ranges &lt;code&gt;ranges&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;ranges&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2480f843b2cebe904b4544aa5e115caedcfbd07f" translate="yes" xml:space="preserve">
          <source>Ranges &lt;code&gt;rs&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;rs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af1fe47aab0c9297bebfe22698519fd0f658a583" translate="yes" xml:space="preserve">
          <source>Ranges whose elements are sorted afford better efficiency with certain operations. For this, the &lt;a href=&quot;#assumeSorted&quot;&gt;&lt;code&gt;assumeSorted&lt;/code&gt;&lt;/a&gt; function can be used to construct a &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt; from a pre-sorted range. The &lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt;&lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt;&lt;/a&gt; function also conveniently returns a &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt; objects provide some additional range operations that take advantage of the fact that the range is sorted.</source>
          <target state="translated">要素が並べ替えられている範囲は、特定の操作で効率を向上させます。このため、&lt;a href=&quot;#assumeSorted&quot;&gt; &lt;code&gt;assumeSorted&lt;/code&gt; &lt;/a&gt;関数を使用して、事前にソートされた範囲から&lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; &lt;/a&gt;を構築できます。&lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt; &lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt; の&lt;/a&gt;機能も便利返し&lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; を&lt;/a&gt;。&lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; &lt;/a&gt;オブジェクトは、範囲がソートされているという事実を利用するいくつかの追加の範囲操作を提供します。</target>
        </trans-unit>
        <trans-unit id="4740ea44823bfbe9405519b4bac22e0e17b64f14" translate="yes" xml:space="preserve">
          <source>Raw IP packet level</source>
          <target state="translated">生のIPパケットレベル</target>
        </trans-unit>
        <trans-unit id="dbbd161ce31773e9cd7b945bc7c7210cbae7218a" translate="yes" xml:space="preserve">
          <source>Raw IP packets</source>
          <target state="translated">生のIPパケット</target>
        </trans-unit>
        <trans-unit id="e4b566448bd7650313465965b6cfafb1bb7cafcb" translate="yes" xml:space="preserve">
          <source>Raw protocol access</source>
          <target state="translated">生のプロトコルアクセス</target>
        </trans-unit>
        <trans-unit id="dd5b5b23b8ce8fa52896e2ac4a4a4e0047ad5df9" translate="yes" xml:space="preserve">
          <source>Re-initializes a CURL handle to the default values. This puts back the handle to the same state as it was in when it was just created.</source>
          <target state="translated">CURLハンドルをデフォルト値に再初期化します。これは、ハンドルを作成時と同じ状態に戻します。</target>
        </trans-unit>
        <trans-unit id="0204268fc36b05e74ba6d24bf32f0f7225031176" translate="yes" xml:space="preserve">
          <source>Read Comma Separated Values and its variants from an input range of &lt;code&gt;dchar&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dchar&lt;/code&gt; の入力範囲からカンマ区切り値とそのバリアントを読み取ります。</target>
        </trans-unit>
        <trans-unit id="7bf4a534bd19935da933046f9a9ff7be5b6a7965" translate="yes" xml:space="preserve">
          <source>Read Data From A BLOB Incrementally</source>
          <target state="translated">BLOBからのデータの読み込みを段階的に行う</target>
        </trans-unit>
        <trans-unit id="2a6216eecafd2c0e1689cf072f1f9d4d4eff5c9c" translate="yes" xml:space="preserve">
          <source>Read Only</source>
          <target state="translated">読み取り専用</target>
        </trans-unit>
        <trans-unit id="f13b46f1bcaa3336f76a4bb1c927333935e045b8" translate="yes" xml:space="preserve">
          <source>Read Only: 0 since multi-disk zip archives are not supported</source>
          <target state="translated">読み取り専用。0 マルチディスク zip アーカイブはサポートされていないため</target>
        </trans-unit>
        <trans-unit id="daeb93574c14c16e847fb4873cf6dd9d978f1654" translate="yes" xml:space="preserve">
          <source>Read Only: 0 since multi-disk zip archives are not supported.</source>
          <target state="translated">読み取り専用。マルチディスクの zip アーカイブはサポートされていないため、0。</target>
        </trans-unit>
        <trans-unit id="aeb6efe451bea0c8d7d3781b81b4f628fe0b1d54" translate="yes" xml:space="preserve">
          <source>Read Only: array indexed by the name of each member of the archive. All the members of the archive can be accessed with a foreach loop:</source>
          <target state="translated">Read Only:アーカイブの各メンバーの名前でインデックスを付けた配列。アーカイブのすべてのメンバーは、foreach ループでアクセスできます。</target>
        </trans-unit>
        <trans-unit id="941b068be2efd168f5138f0b0c523d28d89195f0" translate="yes" xml:space="preserve">
          <source>Read Only: array representing the entire contents of the archive.</source>
          <target state="translated">Read Only:アーカイブの全内容を表す配列。</target>
        </trans-unit>
        <trans-unit id="c707160f130f3d61727e553912479baa11023fa3" translate="yes" xml:space="preserve">
          <source>Read Only: cyclic redundancy check (CRC) value</source>
          <target state="translated">読み取り専用:周期的冗長検査(CRC)値</target>
        </trans-unit>
        <trans-unit id="37523ba068074fb34f80a786c59f0949a0bd4bfe" translate="yes" xml:space="preserve">
          <source>Read Only: data of member in compressed form.</source>
          <target state="translated">読み取り専用:圧縮された形でのメンバーのデータ。</target>
        </trans-unit>
        <trans-unit id="f7d00fd7a00060d6f384892e8759fd7504161cf5" translate="yes" xml:space="preserve">
          <source>Read Only: number of ArchiveMembers in the directory.</source>
          <target state="translated">Read Only:ディレクトリ内の ArchiveMembers の数。</target>
        </trans-unit>
        <trans-unit id="500f35484e9abbf530f32db5d83ac4f5091547c0" translate="yes" xml:space="preserve">
          <source>Read Only: should be 0.</source>
          <target state="translated">読み取り専用:0でなければなりません。</target>
        </trans-unit>
        <trans-unit id="76fa98f53d73cc0c406390c18045e7868350c349" translate="yes" xml:space="preserve">
          <source>Read Only: size of data of member in compressed form.</source>
          <target state="translated">読み取り専用:メンバーのデータのサイズを圧縮したもの。</target>
        </trans-unit>
        <trans-unit id="65f6768887290d477790036287a9bbef818da0b4" translate="yes" xml:space="preserve">
          <source>Read Only: size of data of member in expanded form.</source>
          <target state="translated">読み取り専用:メンバーのデータのサイズを展開したもの。</target>
        </trans-unit>
        <trans-unit id="bcb56aa9801ff39c7c5c53b9416551690e5ddef9" translate="yes" xml:space="preserve">
          <source>Read and analyze .ini file. Write the entries into environment as well as any entries in one of the specified section(s).</source>
          <target state="translated">.ini ファイルを読み込んで解析します。指定されたセクションのいずれかのエントリと同様に、環境にエントリを書き込みます。</target>
        </trans-unit>
        <trans-unit id="6482d751184571d336715e5ce98ca71e679af2fb" translate="yes" xml:space="preserve">
          <source>Read and extract information from the LSDA (aka gcc_except_table section). The dmd Call Site Table is structurally different from other implementations. It is organized as nested ranges, and one ip can map to multiple ranges. The most nested candidate is selected when searched. Other implementations have one candidate per ip.</source>
          <target state="translated">LSDA(別名gcc_except_tableセクション)から情報を読み込んで抽出します。dmd コールサイトテーブルは他の実装とは構造的に異なります。それはネストされた範囲として構成されており、1つのIPが複数の範囲にマッピングすることができます。検索されると、最もネストした候補が選択されます。他の実装では ip ごとに 1 つの候補があります。</target>
        </trans-unit>
        <trans-unit id="21fc65d288482d1e8b6dd9c97e5b05c7bbbb91fa" translate="yes" xml:space="preserve">
          <source>Read and write data in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Zip_%28file_format%29&quot;&gt;zip archive&lt;/a&gt; format.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Zip_%28file_format%29&quot;&gt;zipアーカイブ&lt;/a&gt;形式でデータを読み書きします。</target>
        </trans-unit>
        <trans-unit id="1ca36a6d1a8024ba4e6382a71d1b05bf29a17256" translate="yes" xml:space="preserve">
          <source>Read and write memory mapped files.</source>
          <target state="translated">メモリマップされたファイルを読み書きします。</target>
        </trans-unit>
        <trans-unit id="b5129a39480a3d2b242d64db6d87355e637b5720" translate="yes" xml:space="preserve">
          <source>Read compression method used for this member</source>
          <target state="translated">このメンバーに使用されている圧縮方法を読み取る</target>
        </trans-unit>
        <trans-unit id="a11dbc73850fcef58bf265b2adb7abd5a96fb618" translate="yes" xml:space="preserve">
          <source>Read data of member in uncompressed form.</source>
          <target state="translated">メンバーのデータを非圧縮で読み込みます。</target>
        </trans-unit>
        <trans-unit id="15e729183b6bbb3c96de02707732c85d58fc57e3" translate="yes" xml:space="preserve">
          <source>Read entire contents of file &lt;code&gt;name&lt;/code&gt; and returns it as an untyped array. If the file size is larger than &lt;code&gt;upTo&lt;/code&gt;, only &lt;code&gt;upTo&lt;/code&gt; bytes are read.</source>
          <target state="translated">ファイル &lt;code&gt;name&lt;/code&gt; 内容全体を読み取り、型なし配列として返します。ファイルサイズが &lt;code&gt;upTo&lt;/code&gt; よりも大きい場合、 &lt;code&gt;upTo&lt;/code&gt; バイトのみが読み取られます。</target>
        </trans-unit>
        <trans-unit id="e50a3835e7ed3805683e79e2f0b67243a73a025e" translate="yes" xml:space="preserve">
          <source>Read existing file</source>
          <target state="translated">既存のファイルの読み込み</target>
        </trans-unit>
        <trans-unit id="d2bd0cb4091355445f011133c7426913211afbad" translate="yes" xml:space="preserve">
          <source>Read file with UTF-8 text.</source>
          <target state="translated">UTF-8テキストでファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="7255add54c8b431c5ee373b24cdada7d3a659620" translate="yes" xml:space="preserve">
          <source>Read from environment, looking for cached value first.</source>
          <target state="translated">環境から読み込み、最初にキャッシュされた値を探します。</target>
        </trans-unit>
        <trans-unit id="a47b81ebcf1543263ad72fe2f768ac67a71b73dc" translate="yes" xml:space="preserve">
          <source>Read line from &lt;code&gt;stdin&lt;/code&gt; and write it to buf[], including terminating character.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; から行を読み取り、終了文字を含めてbuf []に書き込みます。</target>
        </trans-unit>
        <trans-unit id="d8f811ca8b7536e2bd18e121930035ea9d87e604" translate="yes" xml:space="preserve">
          <source>Read line from &lt;code&gt;stdin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; から行を読み取ります。</target>
        </trans-unit>
        <trans-unit id="7167a92897a624e8504adb4cd2a5a34e4de7474b" translate="yes" xml:space="preserve">
          <source>Read line from the file handle and return it as a specified type.</source>
          <target state="translated">ファイルハンドルから行を読み込み、指定した型で返す。</target>
        </trans-unit>
        <trans-unit id="3626936104de340f9dc657d57e3e205a91742a48" translate="yes" xml:space="preserve">
          <source>Read line from the file handle and write it to &lt;code&gt;buf[]&lt;/code&gt;, including terminating character.</source>
          <target state="translated">ファイルハンドルから行を読み取り、それを終了文字を含めて &lt;code&gt;buf[]&lt;/code&gt; 書き込みます。</target>
        </trans-unit>
        <trans-unit id="f126d6e5ba18f6b69cd4a89774a06f3c5bbdb803" translate="yes" xml:space="preserve">
          <source>Read only column &quot;b&quot;</source>
          <target state="translated">列 &quot;b &quot;のみを読み取る</target>
        </trans-unit>
        <trans-unit id="3bdb33401fe4b455f64f2355674da6381ea3dcf1" translate="yes" xml:space="preserve">
          <source>Read the full content of a file.</source>
          <target state="translated">ファイルの全内容を読む。</target>
        </trans-unit>
        <trans-unit id="fe36e093f9131fcd50814e2c651fcef59428379e" translate="yes" xml:space="preserve">
          <source>Read while rearranging the columns by specifying a header with a different order&quot;</source>
          <target state="translated">順番の違うヘッダーを指定して列を並べ替えながら読む&quot;</target>
        </trans-unit>
        <trans-unit id="be7bf71bf64bf5ca7c3921558df8d8639ad9a2a3" translate="yes" xml:space="preserve">
          <source>Read-only property returning the file mode.</source>
          <target state="translated">ファイルモードを返す読み取り専用のプロパティです。</target>
        </trans-unit>
        <trans-unit id="54fbc1f4a81c75722e5054ba2699b77b89eb33d4" translate="yes" xml:space="preserve">
          <source>Read/Write</source>
          <target state="translated">Read/Write</target>
        </trans-unit>
        <trans-unit id="793ac345cad21d2b3a829536767f3b084b7fcb7b" translate="yes" xml:space="preserve">
          <source>Read/Write existing file, copy on write</source>
          <target state="translated">既存のファイルの読み込み/書き込み、書き込み時のコピー</target>
        </trans-unit>
        <trans-unit id="571a60bf0099eb1f30ed179832005e81ec663545" translate="yes" xml:space="preserve">
          <source>Read/Write existing file, create if not existing</source>
          <target state="translated">既存のファイルの読み書き、既存のファイルがなければ作成</target>
        </trans-unit>
        <trans-unit id="7fe06b399c58642e4de81a3f82d07fbe4afe74a1" translate="yes" xml:space="preserve">
          <source>Read/Write: Usually the file name of the archive member; it is used to index the archive directory for the member. Each member must have a unique name[]. Do not change without removing member from the directory first.</source>
          <target state="translated">読み取り/書き込み。通常は、アーカイブ・メンバーのファイル名です。各メンバーは一意の名前[]を持つ必要があります。最初にディレクトリからメンバーを削除しない限り、変更しないでください。</target>
        </trans-unit>
        <trans-unit id="3a008a6fccbdd299dfd851251b1534db30fd0f3e" translate="yes" xml:space="preserve">
          <source>Read/Write: comment associated with this member.</source>
          <target state="translated">Read/Write:このメンバーに関連付けられたコメント。</target>
        </trans-unit>
        <trans-unit id="d383128b0f051fe35d791444c1d6fe4cd41e3c05" translate="yes" xml:space="preserve">
          <source>Read/Write: extra data for this member.</source>
          <target state="translated">Read/Write:このメンバーのための余分なデータ。</target>
        </trans-unit>
        <trans-unit id="98a17bcae0cd7700026db1303aefc632686b92aa" translate="yes" xml:space="preserve">
          <source>Read/Write: normally set to 0</source>
          <target state="translated">読み取り/書き込み:通常は0に設定</target>
        </trans-unit>
        <trans-unit id="3a672fd0925e6494dab48c64aa0ff9efb8bb8842" translate="yes" xml:space="preserve">
          <source>Read/Write: the archive comment. Must be less than 65536 bytes in length.</source>
          <target state="translated">Read/Write:アーカイブのコメント。長さ65536バイト以下でなければなりません。</target>
        </trans-unit>
        <trans-unit id="a34abcab13dc3b37844a4a869596072b4312f7c5" translate="yes" xml:space="preserve">
          <source>Read/write data in JSON format.</source>
          <target state="translated">JSON形式のデータを読み書きします。</target>
        </trans-unit>
        <trans-unit id="2d37d83a47a9d418dccdd946b1e2fcc90f05a71a" translate="yes" xml:space="preserve">
          <source>Read/write data in XML format.</source>
          <target state="translated">XML形式のデータを読み書きします。</target>
        </trans-unit>
        <trans-unit id="8c46f78031b7950f9e7d9673ba0df2dfe13afc98" translate="yes" xml:space="preserve">
          <source>Read/write data in the &lt;a href=&quot;http://www.info-zip.org&quot;&gt;zip archive&lt;/a&gt; format. Makes use of the etc.c.zlib compression library.</source>
          <target state="translated">&lt;a href=&quot;http://www.info-zip.org&quot;&gt;zipアーカイブ&lt;/a&gt;形式でデータを読み書きします。etc.c.zlib圧縮ライブラリを使用します。</target>
        </trans-unit>
        <trans-unit id="bcb7a7d852fe72a0b67997abe377c1452bcf06c2" translate="yes" xml:space="preserve">
          <source>Read/write data in the ZIP archive format.</source>
          <target state="translated">ZIPアーカイブ形式のデータを読み書きします。</target>
        </trans-unit>
        <trans-unit id="896a8af6369e03daade58ae0948e0a69e86551d9" translate="yes" xml:space="preserve">
          <source>Read/write value from/to the memory location indicated by ptr.</source>
          <target state="translated">ptr で示されるメモリ位置からの読み書き値です。</target>
        </trans-unit>
        <trans-unit id="29320f79883d1853fbce071c212f5c5744be2f6e" translate="yes" xml:space="preserve">
          <source>Readers get preference. This may starve writers.</source>
          <target state="translated">読者が優先される。これは作家を飢えさせるかもしれない。</target>
        </trans-unit>
        <trans-unit id="cffa2af0a3a67cf2123e3411d020161abc01fc05" translate="yes" xml:space="preserve">
          <source>Reading</source>
          <target state="translated">Reading</target>
        </trans-unit>
        <trans-unit id="1d920fff58ef0d0f937aa8908a1de256cc4799ab" translate="yes" xml:space="preserve">
          <source>Readonly</source>
          <target state="translated">Readonly</target>
        </trans-unit>
        <trans-unit id="18d8a220aa279e4eb04bfb2f9eda0af845a3d548" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;stdin&lt;/code&gt; and writes it to &lt;code&gt;stdout&lt;/code&gt; with a argument counter.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; を読み取り、それを引数カウンターとともに &lt;code&gt;stdout&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="26b3984875d670d5e743016573bc157db0855be6" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;stdin&lt;/code&gt; and writes it to &lt;code&gt;stdout&lt;/code&gt; with an argument counter.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; を読み取り、それを引数カウンターとともに &lt;code&gt;stdout&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="c03ee569a80e822a17cdfa9040b93b3d08ce8229" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;stdin&lt;/code&gt; and writes it to &lt;code&gt;stdout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; を読み取り、それを &lt;code&gt;stdout&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="d108f6e16abea10d9fb4947ccc236e24041d31dd" translate="yes" xml:space="preserve">
          <source>Reads I/O port at port_address.</source>
          <target state="translated">port_addressでI/Oポートを読み込みます。</target>
        </trans-unit>
        <trans-unit id="49cb4212fc28223325da7d9c58c5aaefd148c02c" translate="yes" xml:space="preserve">
          <source>Reads a file line by line and parses the line into a single value or a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; of values depending on the length of &lt;code&gt;Types&lt;/code&gt;. The lines are parsed using the specified format string. The format string is passed to &lt;a href=&quot;std_format#formattedRead&quot;&gt;&lt;code&gt;std.format.formattedRead&lt;/code&gt;&lt;/a&gt;, and therefore must conform to the format string specification outlined in &lt;a href=&quot;std_format&quot;&gt;&lt;code&gt;std.format&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルを1行&lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; &lt;/a&gt;読み取り、その行を解析して、 &lt;code&gt;Types&lt;/code&gt; の長さに応じて、単一の値またはstd.typecons.Tupleの値にします。行は、指定されたフォーマット文字列を使用して解析されます。フォーマット文字列は&lt;a href=&quot;std_format#formattedRead&quot;&gt; &lt;code&gt;std.format.formattedRead&lt;/code&gt; &lt;/a&gt;に渡されるため、&lt;a href=&quot;std_format&quot;&gt; &lt;code&gt;std.format&lt;/code&gt; で&lt;/a&gt;概説されているフォーマット文字列仕様に準拠する必要があります。</target>
        </trans-unit>
        <trans-unit id="f40a973dcb25e5ede27e5aac103cea1b0db87b35" translate="yes" xml:space="preserve">
          <source>Reads a file, terminate the program on error</source>
          <target state="translated">ファイルを読み込んで、エラーでプログラムを終了する</target>
        </trans-unit>
        <trans-unit id="d8bb597f2dda425a5e5ea130e0bc100fab704034" translate="yes" xml:space="preserve">
          <source>Reads a value from the given input range according to spec and returns it as type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">仕様に従って指定された入力範囲から値を読み取り、タイプ &lt;code&gt;T&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="fe9af776ce0213a2d633f3fe45cfb534ec9ac7fb" translate="yes" xml:space="preserve">
          <source>Reads an object module from base[] and passes the names of any exported symbols to (*pAddSymbol)().</source>
          <target state="translated">base[]からオブジェクトモジュールを読み込み、エクスポートされたシンボルの名前を(*pAddSymbol)に渡します。</target>
        </trans-unit>
        <trans-unit id="a9a36b275679d0e70daad4cad40c7a7d537f1582" translate="yes" xml:space="preserve">
          <source>Reads and validates (using &lt;a href=&quot;std_utf#validate&quot;&gt;&lt;code&gt;std.utf.validate&lt;/code&gt;&lt;/a&gt;) a text file. S can be an array of any character type. However, no width or endian conversions are performed. So, if the width or endianness of the characters in the given file differ from the width or endianness of the element type of S, then validation will fail.</source>
          <target state="translated">（&lt;a href=&quot;std_utf#validate&quot;&gt; &lt;code&gt;std.utf.validate&lt;/code&gt; &lt;/a&gt;を使用して）テキストファイルを読み取り、検証します。Sは任意の文字型の配列です。ただし、幅またはエンディアンの変換は実行されません。したがって、指定されたファイル内の文字の幅またはエンディアンが、要素タイプSの幅またはエンディアンと異なる場合、検証は失敗します。</target>
        </trans-unit>
        <trans-unit id="9873cf676e4ad0a9b2f4951a3e2128cef4ddc619" translate="yes" xml:space="preserve">
          <source>Reads characters from &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;&lt;code&gt;r&lt;/code&gt;, converts them according to &lt;code&gt;fmt&lt;/code&gt;, and writes them to &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt; &lt;code&gt;r&lt;/code&gt; から文字を読み取り、 &lt;code&gt;fmt&lt;/code&gt; に従って文字を変換し、 &lt;code&gt;args&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="72a110505374f57a1f54b6f7fdd1bd89dff1480a" translate="yes" xml:space="preserve">
          <source>Reads formatted data from &lt;code&gt;stdin&lt;/code&gt; using &lt;a href=&quot;std_format#formattedRead&quot;&gt;&lt;code&gt;std.format.formattedRead&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_format#formattedRead&quot;&gt; &lt;code&gt;std.format.formattedRead&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;stdin&lt;/code&gt; からフォーマット済みデータを読み取ります。</target>
        </trans-unit>
        <trans-unit id="f0b3e3d070da32ebbebc915ce449f0f887bdc340" translate="yes" xml:space="preserve">
          <source>Reads formatted data from the file using &lt;a href=&quot;std_format#formattedRead&quot;&gt;&lt;code&gt;std.format.formattedRead&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_format#formattedRead&quot;&gt; &lt;code&gt;std.format.formattedRead&lt;/code&gt; &lt;/a&gt;を使用して、ファイルからフォーマット済みデータを読み取ります。</target>
        </trans-unit>
        <trans-unit id="b8de846f2f646cdf61597148ce44078d0aec9ef3" translate="yes" xml:space="preserve">
          <source>Reads one full grapheme cluster from an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of dchar &lt;code&gt;inp&lt;/code&gt;.</source>
          <target state="translated">dchar &lt;code&gt;inp&lt;/code&gt; の&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;から1つの完全な書記素クラスターを読み取ります。</target>
        </trans-unit>
        <trans-unit id="63176e821ee6fb97ffd79dbfd971c2e359909db2" translate="yes" xml:space="preserve">
          <source>Reads the file from &lt;code&gt;srcfile&lt;/code&gt; and loads the source buffer.</source>
          <target state="translated">&lt;code&gt;srcfile&lt;/code&gt; からファイルを読み取り、ソースバッファをロードします。</target>
        </trans-unit>
        <trans-unit id="d66adb30a59f74a0595960a81c8fa1185e3cac95" translate="yes" xml:space="preserve">
          <source>Reads values according to the format string from an InputRange.</source>
          <target state="translated">InputRangeからフォーマット文字列に従って値を読み込みます。</target>
        </trans-unit>
        <trans-unit id="fab1e24f991774bddf40367f9e156ce01d7843b7" translate="yes" xml:space="preserve">
          <source>Ready-made predicate functions to compare two values.</source>
          <target state="translated">2つの値を比較するためのレディメイドの述語関数。</target>
        </trans-unit>
        <trans-unit id="cab51a15bffa042cbc4510d8ab0c3275285bc68c" translate="yes" xml:space="preserve">
          <source>Reallocates &lt;code&gt;b&lt;/code&gt; to new size &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; を新しいサイズ &lt;code&gt;s&lt;/code&gt; に再割り当てします。</target>
        </trans-unit>
        <trans-unit id="23686a2e44a73b949efd61ec6a53e06f541eaa5e" translate="yes" xml:space="preserve">
          <source>Reallocates &lt;code&gt;b&lt;/code&gt; to size &lt;code&gt;s&lt;/code&gt;, possibly moving memory around. &lt;code&gt;b&lt;/code&gt; must be &lt;code&gt;null&lt;/code&gt; or a buffer allocated with the same allocator. If reallocation was successful, &lt;code&gt;reallocate&lt;/code&gt; changes &lt;code&gt;b&lt;/code&gt; appropriately and returns &lt;code&gt;true&lt;/code&gt;. Upon failure, the call effects no change upon the allocator object, leaves &lt;code&gt;b&lt;/code&gt; unchanged, and returns &lt;code&gt;false&lt;/code&gt;. An allocator should implement &lt;code&gt;reallocate&lt;/code&gt; if it can derive some advantage from doing so; otherwise, this module defines a &lt;code&gt;reallocate&lt;/code&gt; free function implemented in terms of &lt;code&gt;expand&lt;/code&gt;, &lt;code&gt;allocate&lt;/code&gt;, and &lt;code&gt;deallocate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; をサイズ &lt;code&gt;s&lt;/code&gt; に再割り当てし、メモリを移動する可能性があります。 &lt;code&gt;b&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; または同じアロケータで割り当てられたバッファでなければなりません。再割り当てが成功した場合、変更 &lt;code&gt;b&lt;/code&gt; を適切に &lt;code&gt;reallocate&lt;/code&gt; し、 &lt;code&gt;true&lt;/code&gt; を返します。失敗した場合、呼び出しはアロケータオブジェクトに変更を加えず、 &lt;code&gt;b&lt;/code&gt; を変更せずに &lt;code&gt;false&lt;/code&gt; を返します。アロケーターは、そうすることからいくつかの利点を引き出すことができる場合、 &lt;code&gt;reallocate&lt;/code&gt; を実装する必要があります。それ以外の場合、このモジュールは、 &lt;code&gt;expand&lt;/code&gt; 、 &lt;code&gt;allocate&lt;/code&gt; 、およびに関して実装された &lt;code&gt;reallocate&lt;/code&gt; free関数を定義します &lt;code&gt;deallocate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d23aabd138f3b9a3380f8a3c9397aa4757a27130" translate="yes" xml:space="preserve">
          <source>Reallocates a block previously allocated with &lt;code&gt;alignedAllocate&lt;/code&gt;. Contractions do not occur in place.</source>
          <target state="translated">以前に &lt;code&gt;alignedAllocate&lt;/code&gt; 割り当てられたブロックを再割り当てします。収縮は行われません。</target>
        </trans-unit>
        <trans-unit id="e0477ffd1001aa8fef0b44f8b7b7bfdbdd0f52b7" translate="yes" xml:space="preserve">
          <source>Reallocates a memory block with specified alignment.</source>
          <target state="translated">指定されたアラインメントでメモリブロックを再確保します。</target>
        </trans-unit>
        <trans-unit id="bb582920b89e35f47891a53d95ae14c32e375aab" translate="yes" xml:space="preserve">
          <source>Reallocates a memory block.</source>
          <target state="translated">メモリブロックを再割り当てします。</target>
        </trans-unit>
        <trans-unit id="255724aaef111ccd96dea7a8cd7a8bf558ede2b3" translate="yes" xml:space="preserve">
          <source>Reallocates a previously-allocated block. Contractions occur in place.</source>
          <target state="translated">以前に割り当てられたブロックを再割り当てします。縮退はその場で発生します。</target>
        </trans-unit>
        <trans-unit id="8f515dad658f77a733680500f8d84e939a8562c8" translate="yes" xml:space="preserve">
          <source>Rearranges elements in &lt;code&gt;r&lt;/code&gt; in three adjacent ranges and returns them. The first and leftmost range only contains elements in &lt;code&gt;r&lt;/code&gt; less than &lt;code&gt;pivot&lt;/code&gt;. The second and middle range only contains elements in &lt;code&gt;r&lt;/code&gt; that are equal to &lt;code&gt;pivot&lt;/code&gt;. Finally, the third and rightmost range only contains elements in &lt;code&gt;r&lt;/code&gt; that are greater than &lt;code&gt;pivot&lt;/code&gt;. The less-than test is defined by the binary function &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; の要素を3つの隣接する範囲に再配置して返します。最初と左端の範囲には、 &lt;code&gt;pivot&lt;/code&gt; よりも小さい &lt;code&gt;r&lt;/code&gt; の要素のみが含まれます。2番目と中間の範囲には、 &lt;code&gt;pivot&lt;/code&gt; と等しい &lt;code&gt;r&lt;/code&gt; の要素のみが含まれます。最後に、右から3番目の範囲には、 &lt;code&gt;pivot&lt;/code&gt; よりも大きい &lt;code&gt;r&lt;/code&gt; の要素のみが含まれます。小なりテストは、バイナリ関数 &lt;code&gt;less&lt;/code&gt; によって定義されます。</target>
        </trans-unit>
        <trans-unit id="028e13bd0298376bf31316a3db976d1f8d73160a" translate="yes" xml:space="preserve">
          <source>Reason &lt;strong id=&quot;reason&quot;&gt;reason&lt;/strong&gt;;</source>
          <target state="translated">理由&lt;strong id=&quot;reason&quot;&gt;理由&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="38a2132f7d06a3de3c8f482a30348e738425b184" translate="yes" xml:space="preserve">
          <source>Rebindable!T &lt;code&gt;obj&lt;/code&gt;</source>
          <target state="translated">再バインド可能！T &lt;code&gt;obj&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7dfd63b70a6c7e705a4445213f0cca37c1792b78" translate="yes" xml:space="preserve">
          <source>Rebindable!T &lt;strong id=&quot;rebindable&quot;&gt;rebindable&lt;/strong&gt;(T)(Rebindable!T obj);</source>
          <target state="translated">Rebindable！T &lt;strong id=&quot;rebindable&quot;&gt;rebindable&lt;/strong&gt;（T）（Rebindable！T obj）;</target>
        </trans-unit>
        <trans-unit id="1bc1917f2d07d2c9a111dd45e98efe3841e1c509" translate="yes" xml:space="preserve">
          <source>Rebindable!T &lt;strong id=&quot;rebindable&quot;&gt;rebindable&lt;/strong&gt;(T)(T obj)</source>
          <target state="translated">Rebindable！T &lt;strong id=&quot;rebindable&quot;&gt;rebindable&lt;/strong&gt;（T）（T obj）</target>
        </trans-unit>
        <trans-unit id="d331e630b2896b20a876047a4c30e580c4e0b158" translate="yes" xml:space="preserve">
          <source>Receive a message from another thread, or block if no messages of the specified types are available. This function works by pattern matching a message against a set of delegates and executing the first match found.</source>
          <target state="translated">他のスレッドからのメッセージを受信するか、指定したタイプのメッセージが利用できない場合はブロックします。この関数は、メッセージをデリゲートのセットに対してパターンマッチさせ、最初に見つかったマッチを実行することで動作します。</target>
        </trans-unit>
        <trans-unit id="6905aea09db96a1168eed83db3ff77aad0c4651b" translate="yes" xml:space="preserve">
          <source>Receive a message from another thread, or block until &lt;code&gt;duration&lt;/code&gt; exceeds, if no messages of the specified types are available. This function works by pattern matching a message against a set of delegates and executing the first match found.</source>
          <target state="translated">別のスレッドからメッセージを受信するか、指定されたタイプのメッセージが使用できない場合は、 &lt;code&gt;duration&lt;/code&gt; が超過するまでブロックします。この関数は、一連のデリゲートに対してメッセージをパターンマッチングし、最初に見つかった一致を実行することによって機能します。</target>
        </trans-unit>
        <trans-unit id="9965bf28e85415bb8f63bacd2e9f47d2c22ec76b" translate="yes" xml:space="preserve">
          <source>Receive buffer size</source>
          <target state="translated">受信バッファサイズ</target>
        </trans-unit>
        <trans-unit id="8b1387a64dcd22aaaab5eec91298777b523da5ea" translate="yes" xml:space="preserve">
          <source>Receive data and get the remote endpoint &lt;code&gt;Address&lt;/code&gt;. If the socket is blocking, &lt;code&gt;receiveFrom&lt;/code&gt; waits until there is data to be received.</source>
          <target state="translated">データを受信し、リモートエンドポイントの &lt;code&gt;Address&lt;/code&gt; を取得します。ソケットがブロックしている場合、 &lt;code&gt;receiveFrom&lt;/code&gt; は受信するデータがあるまで待機します。</target>
        </trans-unit>
        <trans-unit id="1d55cf19e7769478d5e838fbbb6306259dd64f58" translate="yes" xml:space="preserve">
          <source>Receive data on the connection. If the socket is blocking, &lt;code&gt;receive&lt;/code&gt; waits until there is data to be received.</source>
          <target state="translated">接続でデータを受信します。ソケットがブロックしている場合、 &lt;code&gt;receive&lt;/code&gt; は受信するデータがあるまで待機します。</target>
        </trans-unit>
        <trans-unit id="84f50b3ba0f36e6f16be3df90ac3abf9c5a37ad4" translate="yes" xml:space="preserve">
          <source>Receive out-of-band data in band</source>
          <target state="translated">バンド内の帯域外データを受信する</target>
        </trans-unit>
        <trans-unit id="e48814461f501b48cd0f2672a164a1c8547c1c5a" translate="yes" xml:space="preserve">
          <source>Receive timeout</source>
          <target state="translated">受信タイムアウト</target>
        </trans-unit>
        <trans-unit id="1de54dc910afb04eede004cd1e30c3c21ae9c402" translate="yes" xml:space="preserve">
          <source>Receives a message from another thread and gives up if no match arrives within a specified duration.</source>
          <target state="translated">他のスレッドからのメッセージを受信し、指定された期間内にマッチするものが到着しなかった場合は諦めます。</target>
        </trans-unit>
        <trans-unit id="c8c96dab7a595e26ee5bfe55d132ef127b4461ed" translate="yes" xml:space="preserve">
          <source>Receives a message from another thread.</source>
          <target state="translated">他のスレッドからのメッセージを受信する。</target>
        </trans-unit>
        <trans-unit id="1ef50d47b70da48b55093a57f6ce6bbce8de63f5" translate="yes" xml:space="preserve">
          <source>Receives a string key as argument. The result is an expression describing the requested target information.</source>
          <target state="translated">引数として文字列キーを受け取ります。結果は、要求された対象情報を記述した式です。</target>
        </trans-unit>
        <trans-unit id="7e73f9083a3fcdc41737d365f5ca155b818a6aec" translate="yes" xml:space="preserve">
          <source>Receives data from the connected socket. Use after successful curl_easy_perform() with CURLOPT_CONNECT_ONLY option.</source>
          <target state="translated">接続されたソケットからデータを受信します。CURLOPT_CONNECT_ONLY オプションで curl_easy_perform()に成功した後に使用します。</target>
        </trans-unit>
        <trans-unit id="583529bfc00d6827dec4ffe687631f874fe53d08" translate="yes" xml:space="preserve">
          <source>Receives only messages with arguments of the specified types.</source>
          <target state="translated">指定された型の引数を持つメッセージのみを受信します。</target>
        </trans-unit>
        <trans-unit id="033c316ca5ee67eb25d34d41cddc41a48f5386f5" translate="yes" xml:space="preserve">
          <source>Receives only messages with arguments of types &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 型の引数を持つメッセージのみを受信します。</target>
        </trans-unit>
        <trans-unit id="347a8e34dcdfe0c261bbae1b232251ad673cf4a9" translate="yes" xml:space="preserve">
          <source>Record debugging information</source>
          <target state="translated">デバッグ情報の記録</target>
        </trans-unit>
        <trans-unit id="1f96545aca9f95a449dc3f5d1c56c54871ec8af3" translate="yes" xml:space="preserve">
          <source>Record separator</source>
          <target state="translated">レコードセパレータ</target>
        </trans-unit>
        <trans-unit id="b867c7900a8ddf139368afe948cced43cd8de4b0" translate="yes" xml:space="preserve">
          <source>Rectangular Arrays</source>
          <target state="translated">長方形配列</target>
        </trans-unit>
        <trans-unit id="6e974f9bd66c81587b1db5a9b54ad777181a0b76" translate="yes" xml:space="preserve">
          <source>Recurrence!(fun, CommonType!State, State.length) &lt;strong id=&quot;recurrence&quot;&gt;recurrence&lt;/strong&gt;(alias fun, State...)(State initial);</source>
          <target state="translated">Recurrence！（fun、CommonType！State、State.length）&lt;strong id=&quot;recurrence&quot;&gt;recurrence&lt;/strong&gt;（alias fun、State ...）（State initial）;</target>
        </trans-unit>
        <trans-unit id="4a622afbcf711dd746ebf0dc2eb33902db5a905a" translate="yes" xml:space="preserve">
          <source>Recursive Templates</source>
          <target state="translated">再帰的なテンプレート</target>
        </trans-unit>
        <trans-unit id="fd645005541e35822634b62f9cf07c4841702213" translate="yes" xml:space="preserve">
          <source>Recursively calls the &lt;code&gt;opPostMove&lt;/code&gt; callbacks of a struct and its members if they're defined.</source>
          <target state="translated">定義されている場合は、構造体とそのメンバーの &lt;code&gt;opPostMove&lt;/code&gt; コールバックを再帰的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="f7ddc39eecf352c1e235c0728bb6fd43812d50da" translate="yes" xml:space="preserve">
          <source>Recursively look at every module this module imports, return true if it imports m. Can be used to detect circular imports.</source>
          <target state="translated">このモジュールがインポートするすべてのモジュールを再帰的に調べ、m をインポートしている場合は true を返します。</target>
        </trans-unit>
        <trans-unit id="9c08948c7f09d89104efa65883fc39648db73808" translate="yes" xml:space="preserve">
          <source>Recursively scanning all allocated memory pointed to by roots looking for more pointers into GC allocated memory.</source>
          <target state="translated">GC の割り当てられたメモリへのより多くのポインタを探すために、ルーツが指すすべての割り当てられたメモリを再帰的にスキャンします。</target>
        </trans-unit>
        <trans-unit id="c1a0c000cb1b2ae85456d0a51e79e682d551f1f8" translate="yes" xml:space="preserve">
          <source>Recycling temporary buffers across iterations of a parallel foreach loop.</source>
          <target state="translated">並列foreachループの反復に渡る一時的なバッファをリサイクルします。</target>
        </trans-unit>
        <trans-unit id="8dcc8f0ea09d6b329c32ee33bce8b233e4de04a7" translate="yes" xml:space="preserve">
          <source>Redirect &lt;code&gt;redirect&lt;/code&gt;</source>
          <target state="translated">リダイレクト &lt;code&gt;redirect&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e46b7f03c259fa26e24f1d796394f5dca85e2df6" translate="yes" xml:space="preserve">
          <source>Redirect all three streams. This is equivalent to &lt;code&gt;Redirect.stdin | Redirect.stdout | Redirect.stderr&lt;/code&gt;.</source>
          <target state="translated">3つのストリームすべてをリダイレクトします。これは、 &lt;code&gt;Redirect.stdin | Redirect.stdout | Redirect.stderr&lt;/code&gt; と同等です。Redirect.stdout | Redirect.stderr。</target>
        </trans-unit>
        <trans-unit id="9845ed195b026191f64bea3adcb719aff1093dda" translate="yes" xml:space="preserve">
          <source>Redirect the standard error stream into the standard output stream. This can not be combined with &lt;code&gt;Redirect.stderr&lt;/code&gt;.</source>
          <target state="translated">標準エラーストリームを標準出力ストリームにリダイレクトします。これは &lt;code&gt;Redirect.stderr&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="42baec091b8bacb781758c8fc0c08592e8ffddc3" translate="yes" xml:space="preserve">
          <source>Redirect the standard input, output or error streams, respectively.</source>
          <target state="translated">標準入力、標準出力、エラーストリームをそれぞれリダイレクトする。</target>
        </trans-unit>
        <trans-unit id="80fbb398850ffc67d552f8c380bb4aa84a0ac302" translate="yes" xml:space="preserve">
          <source>Redirect the standard output stream into the standard error stream. This can not be combined with &lt;code&gt;Redirect.stdout&lt;/code&gt;.</source>
          <target state="translated">標準出力ストリームを標準エラーストリームにリダイレクトします。これは &lt;code&gt;Redirect.stdout&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="9ced0df5f00cdd338d0d1abe97f8c296ab289eda" translate="yes" xml:space="preserve">
          <source>Reduces the length of the &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;bidirectional range&lt;/a&gt;&lt;code&gt;range&lt;/code&gt; by removing elements that satisfy &lt;code&gt;pred&lt;/code&gt;. If &lt;code&gt;s = SwapStrategy.unstable&lt;/code&gt;, elements are moved from the right end of the range over the elements to eliminate. If &lt;code&gt;s = SwapStrategy.stable&lt;/code&gt; (the default), elements are moved progressively to front such that their relative order is preserved. Returns the filtered range.</source>
          <target state="translated">&lt;code&gt;pred&lt;/code&gt; を満たす要素を削除することにより、&lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;双方向範囲の&lt;/a&gt; &lt;code&gt;range&lt;/code&gt; 長さを短くします。 &lt;code&gt;s = SwapStrategy.unstable&lt;/code&gt; 場合、要素は範囲の右端から削除する要素の上に移動します。場合 &lt;code&gt;s = SwapStrategy.stable&lt;/code&gt; （デフォルト）、要素は、それらの相対的順序が保存されるフロントように漸進的に移動されます。フィルタリングされた範囲を返します。</target>
        </trans-unit>
        <trans-unit id="a38ed0ebd88e5865ccf3df6d0f1c1a6214e613a7" translate="yes" xml:space="preserve">
          <source>Ref Functions</source>
          <target state="translated">参照機能</target>
        </trans-unit>
        <trans-unit id="93a3795b3f7bea3488bc980a00ebb42b7f194f23" translate="yes" xml:space="preserve">
          <source>Ref Return Scope Parameters</source>
          <target state="translated">参照 リターンスコープパラメータ</target>
        </trans-unit>
        <trans-unit id="2adad0226b3a33fb57b1f7508d1353c72a0c3052" translate="yes" xml:space="preserve">
          <source>Ref and Out Parameters</source>
          <target state="translated">参照および出力パラメータ</target>
        </trans-unit>
        <trans-unit id="ffb8735c2880ff82932bdca464eb4f0ca4ed037e" translate="yes" xml:space="preserve">
          <source>Ref functions allow functions to return by reference. This is analogous to ref function parameters.</source>
          <target state="translated">ref関数は、関数が参照によって返すことを可能にします。これは ref 関数のパラメータと類似しています。</target>
        </trans-unit>
        <trans-unit id="218cfb31767f23e1b298ff28247fa438c5c3eba2" translate="yes" xml:space="preserve">
          <source>RefAppender!(E[]) &lt;strong id=&quot;appender&quot;&gt;appender&lt;/strong&gt;(P : E[]*, E)(P arrayPtr);</source>
          <target state="translated">！RefAppender（E []）&lt;strong id=&quot;appender&quot;&gt;アペンダ&lt;/strong&gt;（P：E [] *、E）（P arrayPtr）。</target>
        </trans-unit>
        <trans-unit id="2e3d9fdbfb40928983e19824181527eeea7cd51c" translate="yes" xml:space="preserve">
          <source>RefCounted!(T, RefCountedAutoInitialize.no) &lt;strong id=&quot;refCounted&quot;&gt;refCounted&lt;/strong&gt;(T)(T val);</source>
          <target state="translated">RefCounted！（T、RefCountedAutoInitialize.no）&lt;strong id=&quot;refCounted&quot;&gt;refCounted&lt;/strong&gt;（T）（T val）;</target>
        </trans-unit>
        <trans-unit id="c7095fa996b8aea93416332641555e8ef550acca" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;std_uni&quot;&gt;&lt;code&gt;std.uni&lt;/code&gt;&lt;/a&gt; docs for a reference on Unicode terminology.  For a range that iterates by grapheme cluster (written character) see &lt;a href=&quot;std_uni#byGrapheme&quot;&gt;&lt;code&gt;std.uni.byGrapheme&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Unicode用語のリファレンスについては、&lt;a href=&quot;std_uni&quot;&gt; &lt;code&gt;std.uni&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。書記素クラスタ（書き込まれた文字）で反復する範囲については、&lt;a href=&quot;std_uni#byGrapheme&quot;&gt; &lt;code&gt;std.uni.byGrapheme&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5c95d85c5af695bcdab44f180e8c12e772a641c9" translate="yes" xml:space="preserve">
          <source>Refer to the page for &lt;a href=&quot;lex&quot;&gt;lexical syntax&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;lex&quot;&gt;字句構文&lt;/a&gt;については、ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="b526c61314d0201e1fe9face79911a4659cd51ac" translate="yes" xml:space="preserve">
          <source>Reference Links</source>
          <target state="translated">参考リンク</target>
        </trans-unit>
        <trans-unit id="5f8843090009dc1b1594827e9439fcc612a46af4" translate="yes" xml:space="preserve">
          <source>Reference Types</source>
          <target state="translated">リファレンスタイプ</target>
        </trans-unit>
        <trans-unit id="bda0985509ec7a10650d2f5fca41cb601751ac0d" translate="yes" xml:space="preserve">
          <source>Reference counting is a common solution to solve explicit memory allocation problems. The code to implement the increment and decrement operations whenever assignments are made is one source of slowdown. Hiding it behind smart pointer classes doesn't help the speed. (Reference counting methods are not a general solution anyway, as circular references never get deleted.)</source>
          <target state="translated">参照カウントは、明示的なメモリ割り当て問題を解決するための一般的な解決策です。割り当てが行われるたびにインクリメントとデクリメント演算を実装するコードは、速度低下の原因の1つです。これをスマートポインタクラスの後ろに隠しても、速度の改善にはなりません。(参照カウントメソッドは、循環参照が削除されることがないので、いずれにせよ一般的な解決策ではありません)。</target>
        </trans-unit>
        <trans-unit id="3795199e8f73e2699416b487db6aaeec12a18d75" translate="yes" xml:space="preserve">
          <source>Reference definitions start with a label in square brackets, followed by a colon, a URL and an optional title wrapped in single or double quotes, or in parentheses. If a reference label would match both a D symbol and a reference definition then the reference definition is used.</source>
          <target state="translated">参照定義は、角括弧内のラベルで始まり、その後にコロン、URL、およびオプションのタイトルが一重引用符または二重引用符で、または括弧で囲まれています。参照ラベルが D シンボルと参照定義の両方に一致する場合は、参照定義が使用されます。</target>
        </trans-unit>
        <trans-unit id="54b77a25f697c22c19da5ef6e50539b70edbf0ba" translate="yes" xml:space="preserve">
          <source>Reference implementation</source>
          <target state="translated">リファレンス実装</target>
        </trans-unit>
        <trans-unit id="df573c8374802ff7828171ecfa830069f2e20d19" translate="yes" xml:space="preserve">
          <source>Reference semantics</source>
          <target state="translated">リファレンスセマンティクス</target>
        </trans-unit>
        <trans-unit id="4cf6bd8acab3ec3e28f9007df34a799a3db2218a" translate="yes" xml:space="preserve">
          <source>Reference to the value to modify.</source>
          <target state="translated">修正する値への参照。</target>
        </trans-unit>
        <trans-unit id="1e3df644b1a1f905d3fe996f46169357b5db04a5" translate="yes" xml:space="preserve">
          <source>Reference type demonstration</source>
          <target state="translated">リファレンスタイプのデモ</target>
        </trans-unit>
        <trans-unit id="f6a204f70b64ec3f8579cf4b86c716eaafd78572" translate="yes" xml:space="preserve">
          <source>Reference value.</source>
          <target state="translated">基準値。</target>
        </trans-unit>
        <trans-unit id="4d8843c1f2464c8fbd8ab73886eb0b41d1123f3b" translate="yes" xml:space="preserve">
          <source>Reference-style links enclose a reference label in square brackets. They may optionally be preceded by some link text, also enclosed in square brackets.</source>
          <target state="translated">参照スタイルのリンクは、参照ラベルを角括弧で囲みます。これらのリンクは、オプションでリンクテキストの前に角括弧で囲まれたリンクテキストを付けることができます。</target>
        </trans-unit>
        <trans-unit id="9c7eb20a38241775d11ec59ff96fa6049a5057e8" translate="yes" xml:space="preserve">
          <source>Reference-style links enclose a reference label in square brackets. They may optionally be preceeded by some link text, also enclosed in square brackets.</source>
          <target state="translated">参照スタイルのリンクは、参照ラベルを角括弧で囲みます。これらのリンクは、オプションでリンクテキストの前に角括弧で囲まれたリンクテキストを付けることができます。</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="c04696f070001bb45d8888b617ed2619a4af2b35" translate="yes" xml:space="preserve">
          <source>References are returned as pointers in EAX.</source>
          <target state="translated">EAXでは、参照はポインタとして返されます。</target>
        </trans-unit>
        <trans-unit id="8d0e6a6826b7d67307b20fb43d95d4dff93aa1ec" translate="yes" xml:space="preserve">
          <source>References cannot be upcast to the enclosing class object, nor can they be downcast to a derived interface.</source>
          <target state="translated">参照先を囲むクラス・オブジェクトにアップキャストしたり、派生インターフェイスにダウンキャストしたりすることはできません。</target>
        </trans-unit>
        <trans-unit id="6669ef424ffa4627fac553bacbabacd10635aac0" translate="yes" xml:space="preserve">
          <source>References cannot be upcast to the enclosing class object, nor can they be downcast to a derived interface. To accomplish this, an appropriate &lt;code&gt;QueryInterface()&lt;/code&gt; would have to be implemented for that interface in standard COM fashion.</source>
          <target state="translated">参照は、それを囲むクラスオブジェクトにアップキャストすることも、派生インターフェースにダウンキャストすることもできません。これを実現するには、適切な &lt;code&gt;QueryInterface()&lt;/code&gt; を標準のCOM方式でそのインターフェースに実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="4adc5738020ba312244b8258df3427e9630d5d4e" translate="yes" xml:space="preserve">
          <source>References to qualified objects can be implicitly converted according to the following rules:</source>
          <target state="translated">資格のあるオブジェクトへの参照は、以下のルールに従って暗黙のうちに変換することができます。</target>
        </trans-unit>
        <trans-unit id="f33780efd6728fcd99948641510ca4e234624e70" translate="yes" xml:space="preserve">
          <source>Referring to data that has been the operand of &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; のオペランドであったデータを参照する。</target>
        </trans-unit>
        <trans-unit id="aaf0bd26771aff6f50e1ae9c308ad3ffcf6e4371" translate="yes" xml:space="preserve">
          <source>RegEx &lt;code&gt;pat&lt;/code&gt;</source>
          <target state="translated">RegEx &lt;code&gt;pat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="848bb51730ef072173b58615dfd1973ad43dc475" translate="yes" xml:space="preserve">
          <source>RegEx &lt;code&gt;re&lt;/code&gt;</source>
          <target state="translated">RegEx &lt;code&gt;re&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69be2807346525566191c968086f61243d7e70d6" translate="yes" xml:space="preserve">
          <source>Regardless of the overload, &lt;code&gt;count&lt;/code&gt; will not accept infinite ranges for &lt;code&gt;haystack&lt;/code&gt;.</source>
          <target state="translated">過負荷に関係なく、 &lt;code&gt;count&lt;/code&gt; は &lt;code&gt;haystack&lt;/code&gt; の無限範囲を受け入れません。</target>
        </trans-unit>
        <trans-unit id="47288da0c24aadd7ef41246fbb262ce667ca883e" translate="yes" xml:space="preserve">
          <source>Regardless of the type of the operands, floating point constant folding is done in &lt;code&gt;real&lt;/code&gt; or greater precision. It is always done following IEEE 754 rules and round-to-nearest is used.</source>
          <target state="translated">オペランドのタイプに関係なく、浮動小数点定数の畳み込みは &lt;code&gt;real&lt;/code&gt; またはそれ以上の精度で行われます。これは常にIEEE 754規則に従って行われ、最近傍への丸めが使用されます。</target>
        </trans-unit>
        <trans-unit id="a6a1edfebd5a70df8537ef07e2e286ead2d3f845" translate="yes" xml:space="preserve">
          <source>Regex flags</source>
          <target state="translated">正規表現フラグ</target>
        </trans-unit>
        <trans-unit id="6d1ba653d653ecbd9c15e355d9133be994f123db" translate="yes" xml:space="preserve">
          <source>Regex string to extract UUIDs from text.</source>
          <target state="translated">テキストからUUIDを抽出するためのリージェックス文字列。</target>
        </trans-unit>
        <trans-unit id="12b60328a2fd45d355e7273c8c9ae9964c151e58" translate="yes" xml:space="preserve">
          <source>Regex!char (wchar/dchar) that contains a pattern in the form of compiled bytecode.</source>
          <target state="translated">コンパイルされたバイトコードの形でパターンを含む Regex!char (wchar/dchar)。</target>
        </trans-unit>
        <trans-unit id="85d320fbafaf5ef943535d080c82dd16ad56fafb" translate="yes" xml:space="preserve">
          <source>Region allocator organizes a chunk of memory as a simple bump-the-pointer allocator.</source>
          <target state="translated">領域アロケータは、単純なバンプ・ザ・ポインタ・アロケータとしてメモリの塊を整理します。</target>
        </trans-unit>
        <trans-unit id="79beea57b62dcf23132f27bfe4b48bf4320df97d" translate="yes" xml:space="preserve">
          <source>Region holding its own allocation, most often on the stack. Has statically-determined size.</source>
          <target state="translated">独自の割り当てを保持する領域で、多くの場合スタック上にあります。静的に決定されたサイズを持っています。</target>
        </trans-unit>
        <trans-unit id="66ecfb00e68a58fbfcd954a0645b5e8762c0c475" translate="yes" xml:space="preserve">
          <source>Region using &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sbrk&quot;&gt;sbrk&lt;/a&gt;&lt;/code&gt; for allocating memory.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sbrk&quot;&gt;sbrk&lt;/a&gt;&lt;/code&gt; を使用してメモリを割り当てる領域。</target>
        </trans-unit>
        <trans-unit id="16168729e57b855923c7a71a802959676ea3a2be" translate="yes" xml:space="preserve">
          <source>Register A Callback To Handle SQLITE_BUSY Errors</source>
          <target state="translated">SQLITE_BUSY エラーを処理するためのコールバックの登録</target>
        </trans-unit>
        <trans-unit id="d7ada71741a5c5efe7fce5b9acb6e7cf75421e75" translate="yes" xml:space="preserve">
          <source>Register A Virtual Table Implementation</source>
          <target state="translated">仮想テーブルの実装を登録する</target>
        </trans-unit>
        <trans-unit id="dec56350bae0a4e19968f3a800e057cd6e40fed8" translate="yes" xml:space="preserve">
          <source>Register Conventions</source>
          <target state="translated">登録規約</target>
        </trans-unit>
        <trans-unit id="d6a9176e21963e771db7ce035be039cfe634a245" translate="yes" xml:space="preserve">
          <source>Register a GC factory under the given &lt;code&gt;name&lt;/code&gt;. This function must be called from a C constructor before druntime is initialized.</source>
          <target state="translated">指定された &lt;code&gt;name&lt;/code&gt; でGCファクトリを登録します。この関数は、druntimeを初期化する前にCコンストラクターから呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="27e9d001ff844d0976d90d94aa0606ae2ed35c58" translate="yes" xml:space="preserve">
          <source>Register a geometry callback named zGeom that can be used as part of an R-Tree geometry query as follows:</source>
          <target state="translated">R-Tree ジオメトリクエリの一部として使用できる zGeom という名前のジオメトリコールバックを以下のように登録します。</target>
        </trans-unit>
        <trans-unit id="f7cd9ee60c35e855fd66e1ccd4c6ccf8e5a9a9d2" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a character data segment is encountered.</source>
          <target state="translated">文字データセグメントに遭遇したときに呼び出されるハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="3f86fc9f835fccf504415dd945037249586048b2" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a comment is encountered.</source>
          <target state="translated">コメントに遭遇したときに呼び出されるハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="5f49cc41b1a6ebd2be84f56709ff95c463e05d78" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a processing instruction is encountered.</source>
          <target state="translated">処理命令に遭遇したときに呼び出されるハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="53ed0b4171eece2331ed206c51947ec94b63e3db" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a start tag is encountered which matches the specified name. You can also pass null as the name, in which case the handler will be called for any unmatched start tag.</source>
          <target state="translated">指定された名前にマッチする開始タグがあった場合に呼び出されるハンドラを登録します。名前にはnullを渡すこともできますが、その場合は一致しない開始タグに対してハンドラが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e39c563e7a313c1ade7ea45c931c9334285e8ae0" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever an XML instruction is encountered.</source>
          <target state="translated">XML命令に遭遇したときに呼び出されるハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="efed3344dfe3f1bba75833c0811baa022c7151ab" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever an end tag is encountered which matches the specified name. You can also pass null as the name, in which case the handler will be called for any unmatched end tag.</source>
          <target state="translated">指定した名前に一致するエンドタグが見つかった場合に呼び出されるハンドラを登録します。名前にはnullを渡すこともできますが、その場合は一致しないエンドタグに対してハンドラが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3cae7781266253f344125f060ac6212ca49c80d9" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever text is encountered.</source>
          <target state="translated">テキストに遭遇したときに呼び出されるハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="6955c69b515fc5975384fa61e641237d355e91b3" translate="yes" xml:space="preserve">
          <source>Register an alternative handler which will be called whenever text is encountered. This differs from onText in that onText will decode the text, whereas onTextRaw will not. This allows you to make design choices, since onText will be more accurate, but slower, while onTextRaw will be faster, but less accurate. Of course, you can still call decode() within your handler, if you want, but you'd probably want to use onTextRaw only in circumstances where you know that decoding is unnecessary.</source>
          <target state="translated">テキストに遭遇したときに呼び出される代替ハンドラを登録します。これは onText とは異なり、onText はテキストをデコードしますが、onTextRaw はデコードしません。これにより、設計上の選択が可能になります。 onText はより正確になりますが遅くなり、一方 onTextRaw はより高速になりますが正確性は低くなります。もちろん、必要であればハンドラ内で decode()を呼び出すこともできますが、おそらく onTextRaw を使用したいのは、デコードが不要であることがわかっている状況でのみでしょう。</target>
        </trans-unit>
        <trans-unit id="6a0a5ccb889da412cbc873c52366af12314ec3cd" translate="yes" xml:space="preserve">
          <source>Register an event handler that gets called to inform of upload/download progress.</source>
          <target state="translated">アップロード/ダウンロードの進捗状況を通知するために呼び出されるイベントハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="ff1854677201186d9c9212f2b4e865b72f837176" translate="yes" xml:space="preserve">
          <source>Register save state.</source>
          <target state="translated">保存状態を登録します。</target>
        </trans-unit>
        <trans-unit id="01d6516676cc4761c62be5bf5476c1abfdd730cf" translate="yes" xml:space="preserve">
          <source>Register the thread with the GC using &lt;a href=&quot;core_thread#thread_attachThis&quot;&gt;&lt;code&gt;core.thread.thread_attachThis&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;core_thread#thread_detachThis&quot;&gt;&lt;code&gt;core.thread.thread_detachThis&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用したGCとスレッドの登録&lt;a href=&quot;core_thread#thread_attachThis&quot;&gt; &lt;code&gt;core.thread.thread_attachThis&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;core_thread#thread_detachThis&quot;&gt; &lt;code&gt;core.thread.thread_detachThis&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="edea0b832f387410c45fe6d1c0257549b09c8463" translate="yes" xml:space="preserve">
          <source>Register/unregister such data with calls to &lt;a href=&quot;#addRoot&quot;&gt;&lt;code&gt;addRoot&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#removeRoot&quot;&gt;&lt;code&gt;removeRoot&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#addRange&quot;&gt;&lt;code&gt;addRange&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#removeRange&quot;&gt;&lt;code&gt;removeRange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#addRoot&quot;&gt; &lt;code&gt;addRoot&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#removeRoot&quot;&gt; &lt;code&gt;removeRoot&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#addRange&quot;&gt; &lt;code&gt;addRange&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#removeRange&quot;&gt; &lt;code&gt;removeRange&lt;/code&gt; &lt;/a&gt;を呼び出して、このようなデータを登録/登録解除します。</target>
        </trans-unit>
        <trans-unit id="b897a95101b262c6489ef352de771c8b1571a339" translate="yes" xml:space="preserve">
          <source>Registering the pointer with the garbage collector using the &lt;code&gt;core.memory.GC.addRoot&lt;/code&gt; or &lt;code&gt;core.memory.GC.addRange&lt;/code&gt; functions.</source>
          <target state="translated">使用ガベージコレクタとポインタ登録 &lt;code&gt;core.memory.GC.addRoot&lt;/code&gt; 又は &lt;code&gt;core.memory.GC.addRange&lt;/code&gt; 機能します。</target>
        </trans-unit>
        <trans-unit id="9456a7585dbba6618e38e2cf0c1b40317705af1f" translate="yes" xml:space="preserve">
          <source>Registering the pointer with the garbage collector with the  &lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRoot&quot;&gt;std.gc.addRoot()&lt;/a&gt; or  &lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRange&quot;&gt;std.gc.addRange()&lt;/a&gt; calls.</source>
          <target state="translated">&lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRoot&quot;&gt;std.gc.addRoot（）&lt;/a&gt;または &lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRange&quot;&gt;std.gc.addRange（）&lt;/a&gt;呼び出しでガベージコレクターにポインターを登録します 。</target>
        </trans-unit>
        <trans-unit id="90bf4d614bb16f0559935e0886c7ffb4188be7a3" translate="yes" xml:space="preserve">
          <source>Registers a subclass of EncodingScheme.</source>
          <target state="translated">EncodingScheme のサブクラスを登録します。</target>
        </trans-unit>
        <trans-unit id="b7e857971158f12b16058966ec09aca7b8486cbc" translate="yes" xml:space="preserve">
          <source>Registers the calling thread for use with the D Runtime. If this routine is called for a thread which is already registered, no action is performed.</source>
          <target state="translated">D ランタイムで使用するために、呼び出したスレッドを登録します。既に登録されているスレッドに対してこのルーチンが呼び出された場合、アクションは実行されません。</target>
        </trans-unit>
        <trans-unit id="0d807038b92eb05d2d4d996579e00a6bf77015a3" translate="yes" xml:space="preserve">
          <source>Registers, the stack, and any other memory locations added through the &lt;code&gt;GC.&lt;a href=&quot;#addRange&quot;&gt;addRange&lt;/a&gt;&lt;/code&gt; function are always scanned conservatively. This means that even if a variable is e.g. of type &lt;code&gt;float&lt;/code&gt;, it will still be scanned for possible GC pointers. And, if the word-interpreted representation of the variable matches a GC-managed memory block's address, that memory block is considered live.</source>
          <target state="translated">レジスタ、スタック、および &lt;code&gt;GC.&lt;a href=&quot;#addRange&quot;&gt;addRange&lt;/a&gt;&lt;/code&gt; を通じて追加されたその他のメモリの場所。addRange関数は常に保守的にスキャンされます。つまり、変数のタイプが &lt;code&gt;float&lt;/code&gt; などの場合でも、GCポインターの可能性がないかスキャンされます。また、変数のワード解釈表現がGC管理のメモリブロックのアドレスと一致する場合、そのメモリブロックはライブと見なされます。</target>
        </trans-unit>
        <trans-unit id="5b77408c10909bc0e4a1441a15652a3747f0e210" translate="yes" xml:space="preserve">
          <source>Regular &lt;code&gt;const&lt;/code&gt; object references cannot be reassigned.</source>
          <target state="translated">通常の &lt;code&gt;const&lt;/code&gt; オブジェクト参照は再割り当てできません。</target>
        </trans-unit>
        <trans-unit id="cdfc76a8a310b7e8a9f6d61d4031ccd974b4fe97" translate="yes" xml:space="preserve">
          <source>Regular expression</source>
          <target state="translated">正規表現</target>
        </trans-unit>
        <trans-unit id="088c8e28a39e0058c13e1b8ee79195564f351b32" translate="yes" xml:space="preserve">
          <source>Regular expressions.</source>
          <target state="translated">正規表現。</target>
        </trans-unit>
        <trans-unit id="fd6d66abf1a8ee45e161caa22d14d8ff00b9253c" translate="yes" xml:space="preserve">
          <source>Rehash AA</source>
          <target state="translated">リハッシュAA</target>
        </trans-unit>
        <trans-unit id="06c2ca43698227e0fcb6a7292c225e67ef6b66a5" translate="yes" xml:space="preserve">
          <source>Reimplement the C++ code in the other language.</source>
          <target state="translated">他の言語のC++コードを再実装します。</target>
        </trans-unit>
        <trans-unit id="84b24ec52a5a43fadddf1e2db347899274e99845" translate="yes" xml:space="preserve">
          <source>Reinitializes the digest, making it ready for reuse.</source>
          <target state="translated">ダイジェストを再初期化し、再利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="317e3bbd4de02d1f0fdb5403ae3e2fd76d3e03bc" translate="yes" xml:space="preserve">
          <source>Reinterpretation of overlapped fields in a Union is not permitted.</source>
          <target state="translated">ユニオン内で重複するフィールドの再解釈は許されません。</target>
        </trans-unit>
        <trans-unit id="13bed85e379f26741bf756020202c97a912d20f5" translate="yes" xml:space="preserve">
          <source>Rejang</source>
          <target state="translated">Rejang</target>
        </trans-unit>
        <trans-unit id="57b70c2469abaef03dad4e83ea9bb219f9fc54a1" translate="yes" xml:space="preserve">
          <source>Relational Expressions</source>
          <target state="translated">関係性のある表現</target>
        </trans-unit>
        <trans-unit id="150f549109a3258102c45788bb4ad19927962624" translate="yes" xml:space="preserve">
          <source>Relative tolerance.</source>
          <target state="translated">相対的な許容範囲。</target>
        </trans-unit>
        <trans-unit id="319ce06e27d0813f037c481a41b87a9a39ab0a62" translate="yes" xml:space="preserve">
          <source>Release and deallocate the string.</source>
          <target state="translated">文字列を解放して解放します。</target>
        </trans-unit>
        <trans-unit id="12ce12c0a47c490c07a3f2a6fc77a3c4d085937a" translate="yes" xml:space="preserve">
          <source>Releases a read lock on the enclosing mutex.</source>
          <target state="translated">封入されているミューテックスのリードロックを解除します。</target>
        </trans-unit>
        <trans-unit id="407ba71dd655b8bec16ad1bb13ead45c2966e1d4" translate="yes" xml:space="preserve">
          <source>Releases a write lock on the enclosing mutex.</source>
          <target state="translated">封入されているミューテックスの書き込みロックを解除します。</target>
        </trans-unit>
        <trans-unit id="77b301bef933459296e302975b05bd47a1ea9666" translate="yes" xml:space="preserve">
          <source>Releases the controlled range and returns it.</source>
          <target state="translated">制御されている範囲を解放し、それを返します。</target>
        </trans-unit>
        <trans-unit id="fe5cc4d52ac22fbad50329229957a797b645b197" translate="yes" xml:space="preserve">
          <source>Reliably-delivered message datagrams</source>
          <target state="translated">確実に配信されたメッセージデータグラム</target>
        </trans-unit>
        <trans-unit id="d7020f448aaf8aacc8b4d63537e375e865fff9d8" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Remarks</target>
        </trans-unit>
        <trans-unit id="b685a7378dfdac22312b42db0dd99b4c40578868" translate="yes" xml:space="preserve">
          <source>Remote endpoint &lt;code&gt;Address&lt;/code&gt;.</source>
          <target state="translated">リモートエンドポイント &lt;code&gt;Address&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6b863d8a2db82afa5de2c971ac69ebf4948e3391" translate="yes" xml:space="preserve">
          <source>Remove TemplateInstance from table of instances.</source>
          <target state="translated">インスタンスのテーブルからTemplateInstanceを削除します。</target>
        </trans-unit>
        <trans-unit id="911efbaa270338e46274d0437cfd895711d3b921" translate="yes" xml:space="preserve">
          <source>Remove Unnecessary Virtual Table Implementations</source>
          <target state="translated">不要な仮想テーブルの実装を削除する</target>
        </trans-unit>
        <trans-unit id="b9f1335d8dabb3f2ac77dc497547d4995b437d34" translate="yes" xml:space="preserve">
          <source>Remove a slot from the list of slots to be called when emit() is called.</source>
          <target state="translated">emit()が呼び出されたときに呼び出されるスロットのリストからスロットを削除します。</target>
        </trans-unit>
        <trans-unit id="75c75293ff88caf368db2e508c8e1161c864acea" translate="yes" xml:space="preserve">
          <source>Remove all elements from AA.</source>
          <target state="translated">AAからすべての要素を削除します。</target>
        </trans-unit>
        <trans-unit id="eb8a35f077465bebcc48319892d3eb238d336255" translate="yes" xml:space="preserve">
          <source>Remove an element from the container and return its value.</source>
          <target state="translated">コンテナから要素を削除し、その値を返します。</target>
        </trans-unit>
        <trans-unit id="2ef8e1749b1fc437ff3dd8997a6863e34ef9b467" translate="yes" xml:space="preserve">
          <source>Remove current item from the target.</source>
          <target state="translated">ターゲットから現在のアイテムを削除します。</target>
        </trans-unit>
        <trans-unit id="ef520f86e83572f8100d972f9ff0fca73044fe5b" translate="yes" xml:space="preserve">
          <source>Remove directory &lt;code&gt;pathname&lt;/code&gt;.</source>
          <target state="translated">ディレクトリ &lt;code&gt;pathname&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="fc42c333904a152e0371e3be4d6f7919bec779ea" translate="yes" xml:space="preserve">
          <source>Remove directory and all of its content and subdirectories, recursively.</source>
          <target state="translated">ディレクトリとそのすべてのコンテンツとサブディレクトリを再帰的に削除します。</target>
        </trans-unit>
        <trans-unit id="631a5717be79d54a0f16f3bed5d4ad090c4d25b3" translate="yes" xml:space="preserve">
          <source>Remove extension from path.</source>
          <target state="translated">パスから拡張子を削除します。</target>
        </trans-unit>
        <trans-unit id="cd762caea3eabb789e6ab4d0e09af278ebb8a90b" translate="yes" xml:space="preserve">
          <source>Remove first element in list pointed to by *plist.</source>
          <target state="translated">リストの最初の要素を削除します。</target>
        </trans-unit>
        <trans-unit id="a1d96d78926d702cadc6baa739e5e800797a01cf" translate="yes" xml:space="preserve">
          <source>Remove ptr from the list pointed to by *plist.</source>
          <target state="translated">plistが指すリストからptrを削除します。</target>
        </trans-unit>
        <trans-unit id="0c6e9538ea69883d3ecf28f9d62eeee3a4133338" translate="yes" xml:space="preserve">
          <source>Remove the back element from the container.</source>
          <target state="translated">容器からバックエレメントを取り外します。</target>
        </trans-unit>
        <trans-unit id="5f6f354b54c230d18d3298b80d72e9218a763a5c" translate="yes" xml:space="preserve">
          <source>Remove the front element from the container.</source>
          <target state="translated">フロントエレメントを容器から取り外します。</target>
        </trans-unit>
        <trans-unit id="6900d371c19fc14c228483aaf602f3b566bac1e3" translate="yes" xml:space="preserve">
          <source>Remove this &lt;code&gt;Socket&lt;/code&gt; from the collection. Does nothing if the socket is not in the collection already.</source>
          <target state="translated">この &lt;code&gt;Socket&lt;/code&gt; をコレクションから削除します。ソケットがまだコレクションにない場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="d805766d2be060b325c570e416be292b8eacdf84" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;inout&lt;/code&gt; and &lt;code&gt;immutable&lt;/code&gt; qualifiers, if any, from type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;inout&lt;/code&gt; 、および &lt;code&gt;immutable&lt;/code&gt; 修飾子がある場合は、タイプ &lt;code&gt;T&lt;/code&gt; から削除します。</target>
        </trans-unit>
        <trans-unit id="e3559a0d3d649dde4006e69577d56dd5d58334be" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;howMany&lt;/code&gt; values at the front or back of the container. Unlike the unparameterized versions above, these functions do not throw if they could not remove &lt;code&gt;howMany&lt;/code&gt; elements. Instead, if &lt;code&gt;howMany &amp;gt; n&lt;/code&gt;, all elements are removed. The returned value is the effective number of elements removed. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">コンテナの前面または背面の &lt;code&gt;howMany&lt;/code&gt; 値を削除します。上記のパラメーター化されていないバージョンとは異なり、これらの関数は、 &lt;code&gt;howMany&lt;/code&gt; 要素を削除できなかった場合にスローされません。代わりに、 &lt;code&gt;howMany &amp;gt; n&lt;/code&gt; 、すべての要素が削除されます。戻り値は、削除された要素の有効数です。安定版は同じように動作しますが、コンテナを反復する範囲が無効化されないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="fd9a9235e5cccef072272c7923dca8d8b8f07aae" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;howMany&lt;/code&gt; values from the back of the array. Unlike the unparameterized versions above, these functions do not throw if they could not remove &lt;code&gt;howMany&lt;/code&gt; elements. Instead, if &lt;code&gt;howMany &amp;gt; n&lt;/code&gt;, all elements are removed. The returned value is the effective number of elements removed. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated.</source>
          <target state="translated">配列の後ろから &lt;code&gt;howMany&lt;/code&gt; 値を削除します。上記のパラメーター化されていないバージョンとは異なり、これらの関数は、 &lt;code&gt;howMany&lt;/code&gt; 要素を削除できなかった場合にスローされません。代わりに、 &lt;code&gt;howMany &amp;gt; n&lt;/code&gt; 、すべての要素が削除されます。戻り値は、削除された要素の有効数です。安定バージョンと非安定バージョンの両方が同じように動作し、配列を反復する範囲が無効化されないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="addb914fa84c3dfd2a72159ee45446c0b9555156" translate="yes" xml:space="preserve">
          <source>Removes a &lt;code&gt;Take!Range&lt;/code&gt; from the list in linear time.</source>
          <target state="translated">リストから &lt;code&gt;Take!Range&lt;/code&gt; を線形時間で削除します。</target>
        </trans-unit>
        <trans-unit id="dc8eb20e88cf67b206b1391540476e846637572f" translate="yes" xml:space="preserve">
          <source>Removes a range from the list in linear time.</source>
          <target state="translated">リニアタイムでリストから範囲を削除します。</target>
        </trans-unit>
        <trans-unit id="1a9007b9058ef9a3903e0d1fb414c46ab4c82ff7" translate="yes" xml:space="preserve">
          <source>Removes adjacent duplicates in the replaced characters</source>
          <target state="translated">置換された文字の隣接する重複を削除します。</target>
        </trans-unit>
        <trans-unit id="82e07e864b86b15ec0cc3fba83690f2c78c43614" translate="yes" xml:space="preserve">
          <source>Removes all contents from the &lt;code&gt;DList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DList&lt;/code&gt; からすべてのコンテンツを削除します。</target>
        </trans-unit>
        <trans-unit id="8175fe2e2ec533fb2f3ea71d6a45a80e5440f359" translate="yes" xml:space="preserve">
          <source>Removes all contents from the &lt;code&gt;SList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SList&lt;/code&gt; からすべてのコンテンツを削除します。</target>
        </trans-unit>
        <trans-unit id="75a0a6b20196bebd245c2ff665536f61dadef567" translate="yes" xml:space="preserve">
          <source>Removes all elements belonging to &lt;code&gt;r&lt;/code&gt;, which must be a range obtained originally from this array.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; に属するすべての要素を削除します。これは、この配列から最初に取得された範囲でなければなりません。</target>
        </trans-unit>
        <trans-unit id="0e97a7143be5fd7ae56f54b099fdd911c66752ab" translate="yes" xml:space="preserve">
          <source>Removes all elements belonging to &lt;code&gt;r&lt;/code&gt;, which must be a range obtained originally from this container.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; に属するすべての要素を削除します。これは、このコンテナから最初に取得された範囲でなければなりません。</target>
        </trans-unit>
        <trans-unit id="074271442d6e43c7b52454c97a1ae8585ac07608" translate="yes" xml:space="preserve">
          <source>Removes all elements from the container.</source>
          <target state="translated">コンテナからすべての要素を削除します。</target>
        </trans-unit>
        <trans-unit id="cfe7abf427175ea51be638f2e8dcfba88e79ecb6" translate="yes" xml:space="preserve">
          <source>Removes all elements in &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; のすべての要素を削除します。</target>
        </trans-unit>
        <trans-unit id="1820e48ea8075f93dbc2ec4a43a2a49c33ceea08" translate="yes" xml:space="preserve">
          <source>Removes all qualifiers, if any, from type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; からすべての修飾子を削除します。</target>
        </trans-unit>
        <trans-unit id="fd8f4dfcc1465521c65a643873e1ea126d72af99" translate="yes" xml:space="preserve">
          <source>Removes all remaining keys and values from an associative array.</source>
          <target state="translated">残りのすべてのキーと値を連想配列から削除します。</target>
        </trans-unit>
        <trans-unit id="be15e0fe1f9b54312d80c112a03dc732d3756fc0" translate="yes" xml:space="preserve">
          <source>Removes all remaining keys and values from an associative array. The array is not rehashed after removal, to allow for the existing storage to be reused. This will affect all references to the same instance and is not equivalent to &lt;code&gt;destroy(aa)&lt;/code&gt; which only sets the current reference to &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">連想配列から残りのすべてのキーと値を削除します。既存のストレージを再利用できるようにするために、アレイは削除後に再ハッシュされません。これは、同じインスタンスへのすべての参照に影響し、現在の参照を &lt;code&gt;null&lt;/code&gt; に設定するだけの &lt;code&gt;destroy(aa)&lt;/code&gt; と同等ではありません</target>
        </trans-unit>
        <trans-unit id="2539889e4a74104395775fc90c686d35222e93f9" translate="yes" xml:space="preserve">
          <source>Removes all the elements from the array and releases allocated memory.</source>
          <target state="translated">配列からすべての要素を削除し、割り当てられたメモリを解放します。</target>
        </trans-unit>
        <trans-unit id="47e7efc48f66745492317dd0c9d48a2d48b3f8e8" translate="yes" xml:space="preserve">
          <source>Removes an element from &lt;code&gt;c&lt;/code&gt; by using its key &lt;code&gt;k&lt;/code&gt;. The key's type is defined by the container.</source>
          <target state="translated">キー &lt;code&gt;k&lt;/code&gt; を使用して &lt;code&gt;c&lt;/code&gt; から要素を削除します。キーのタイプはコンテナによって定義されます。</target>
        </trans-unit>
        <trans-unit id="dae543f0af9eec290f3eb7fdbbc40f6e017b4fb3" translate="yes" xml:space="preserve">
          <source>Removes elements from a range in-place, and returns the shortened range.</source>
          <target state="translated">範囲内の要素を削除し、短縮された範囲を返します。</target>
        </trans-unit>
        <trans-unit id="c493f84cfc3c4feee7c79564596fe7fdcb5c63bf" translate="yes" xml:space="preserve">
          <source>Removes elements from the container that are equal to the given values according to the less comparator. One element is removed for each value given which is in the container. If &lt;code&gt;allowDuplicates&lt;/code&gt; is true, duplicates are removed only if duplicate values are given.</source>
          <target state="translated">lessコンパレーターに従って、指定された値に等しい要素をコンテナーから削除します。コンテナ内にある指定された値ごとに1つの要素が削除されます。場合 &lt;code&gt;allowDuplicates&lt;/code&gt; が真で、重複が重複する値が与えられている場合にのみ削除されます。</target>
        </trans-unit>
        <trans-unit id="d3a3a979612bf67fc2aa4b68f4c12df6bbd7d178" translate="yes" xml:space="preserve">
          <source>Removes first element of &lt;code&gt;r&lt;/code&gt;, wich must be a range obtained originally from this container, from both DList instance and range &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; の最初の要素を削除します。これは、DListインスタンスと範囲 &lt;code&gt;r&lt;/code&gt; の両方から、このコンテナから最初に取得した範囲でなければなりません。</target>
        </trans-unit>
        <trans-unit id="95935f8457aff7b5a968195ed76aa4bcc48a8f64" translate="yes" xml:space="preserve">
          <source>Removes last element of &lt;code&gt;r&lt;/code&gt;, wich must be a range obtained originally from this container, from both DList instance and range &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; の最後の要素を削除します。これは、DListインスタンスと範囲 &lt;code&gt;r&lt;/code&gt; の両方から、このコンテナから最初に取得された範囲でなければなりません。</target>
        </trans-unit>
        <trans-unit id="6684e70de240c57633f3587686dfebd4c3d3a9a9" translate="yes" xml:space="preserve">
          <source>Removes matching characters with no corresponding replacement in &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">なしで交換を対応する文字にマッチ削除し &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a36e8bc52f0cb7fc5c28528b40cbb5d9beca0a7" translate="yes" xml:space="preserve">
          <source>Removes one level of indentation from a multi-line string.</source>
          <target state="translated">複数行の文字列から1レベルのインデントを削除します。</target>
        </trans-unit>
        <trans-unit id="c9ac994ea3d66d3ae9bb1c1409c6a95c45a3430a" translate="yes" xml:space="preserve">
          <source>Removes one level of indentation from an array of single-line strings.</source>
          <target state="translated">単一行文字列の配列から1レベルのインデントを削除します。</target>
        </trans-unit>
        <trans-unit id="8d03d645309a888edd15ae678f3a8f2547f961ab" translate="yes" xml:space="preserve">
          <source>Removes range &lt;code&gt;r&lt;/code&gt; from &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; から範囲 &lt;code&gt;r&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="c41329deed9a4efcf10b2176fe664a54a868889b" translate="yes" xml:space="preserve">
          <source>Removes some element from &lt;code&gt;c&lt;/code&gt; and returns it.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; から要素を削除して返します。</target>
        </trans-unit>
        <trans-unit id="795d2a2abe70d609076ec29434081e4af8f7996d" translate="yes" xml:space="preserve">
          <source>Removes t from the list of tracked threads. No operation will be performed if t is not currently being tracked by this object.</source>
          <target state="translated">追跡されているスレッドのリストから t を削除します。t が現在このオブジェクトによって追跡されていない場合、操作は実行されません。</target>
        </trans-unit>
        <trans-unit id="70aedbf39f8f6fcd708877752a1af453718e4db0" translate="yes" xml:space="preserve">
          <source>Removes the</source>
          <target state="translated">を削除します。</target>
        </trans-unit>
        <trans-unit id="13848bdb3a5c4c945e8d9cbbcd02b78456d6dbbc" translate="yes" xml:space="preserve">
          <source>Removes the back element of a bidirectional range.</source>
          <target state="translated">双方向範囲のバックエレメントを削除します。</target>
        </trans-unit>
        <trans-unit id="9b25f64637087f5bc835983e78f87843694c7284" translate="yes" xml:space="preserve">
          <source>Removes the element at the front of &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; の前の要素を削除します。</target>
        </trans-unit>
        <trans-unit id="fca4fdd739d47d6c1b34541a0791727eff309f4b" translate="yes" xml:space="preserve">
          <source>Removes the environment variable with the given &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;name&lt;/code&gt; 環境変数を削除します。</target>
        </trans-unit>
        <trans-unit id="6324e03d9ca2678306eaf46ea102878a3613739d" translate="yes" xml:space="preserve">
          <source>Removes the first occurence of an element from the list in linear time.</source>
          <target state="translated">リストから要素の最初の出現を線形時間で削除します。</target>
        </trans-unit>
        <trans-unit id="652d4bcd6c0fc440c5d0b59e40bce2ada610fab1" translate="yes" xml:space="preserve">
          <source>Removes the front element of a range.</source>
          <target state="translated">範囲のフロントエレメントを削除します。</target>
        </trans-unit>
        <trans-unit id="31c8ae15c1926b56286e17a3190d64eeb4f25b68" translate="yes" xml:space="preserve">
          <source>Removes the given &lt;code&gt;Take!Range&lt;/code&gt; from the container</source>
          <target state="translated">コンテナから指定された &lt;code&gt;Take!Range&lt;/code&gt; を削除します</target>
        </trans-unit>
        <trans-unit id="c383d74900ae2bcccad5a644d221fce85c312a43" translate="yes" xml:space="preserve">
          <source>Removes the given range from the container.</source>
          <target state="translated">指定した範囲をコンテナから削除します。</target>
        </trans-unit>
        <trans-unit id="86c9b1ac5622dfeb8165992599f02a61fa32e5d6" translate="yes" xml:space="preserve">
          <source>Removes the largest element from the heap and returns a copy of it. The element still resides in the heap's store. For performance reasons you may want to use &lt;code&gt;removeFront&lt;/code&gt; with heaps of objects that are expensive to copy.</source>
          <target state="translated">ヒープから最大の要素を削除し、そのコピーを返します。要素はまだヒープのストアにあります。パフォーマンス上の理由から、コピーにコストがかかるオブジェクトのヒープで &lt;code&gt;removeFront&lt;/code&gt; を使用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="472ee9cd76c07924e78135a137e5d8d96adefe30" translate="yes" xml:space="preserve">
          <source>Removes the largest element from the heap.</source>
          <target state="translated">ヒープから最大の要素を削除します。</target>
        </trans-unit>
        <trans-unit id="8b4b3acb6c78ef961701e3874973b44eb7f03d0b" translate="yes" xml:space="preserve">
          <source>Removes the last element from the array and returns it. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated.</source>
          <target state="translated">配列から最後の要素を削除して返します。安定版と非安定版のどちらも同じ動作をし、配列を反復する範囲が決して無効にならないことを保証します。</target>
        </trans-unit>
        <trans-unit id="cbfc6a524cbf983c49e24e9a353029ae2447c16d" translate="yes" xml:space="preserve">
          <source>Removes the lock over the specified file segment.</source>
          <target state="translated">指定したファイルセグメントのロックを解除します。</target>
        </trans-unit>
        <trans-unit id="9f480d4e378340c1a84ecb186d38dcd03da28157" translate="yes" xml:space="preserve">
          <source>Removes the memory block referenced by p from an internal list of roots to be scanned during a collection. If p is null or is not a value previously passed to addRoot() then no operation is performed.</source>
          <target state="translated">コレクション中にスキャンされるルートの内部リストから p で参照されるメモリブロックを削除します。p が NULL であるか、以前に addRoot()に渡された値でない場合は、操作は実行されません。</target>
        </trans-unit>
        <trans-unit id="39ee0e4eeade1b792b1844870c943280497316dc" translate="yes" xml:space="preserve">
          <source>Removes the memory mapping causing all physical memory to be decommited and the virtual address space to be reclaimed.</source>
          <target state="translated">メモリマッピングを削除して、すべての物理メモリがデコミッションされ、仮想アドレス空間が再生されるようにします。</target>
        </trans-unit>
        <trans-unit id="ba9c920fa73d4e35936a77ebc5bf0f649f228b82" translate="yes" xml:space="preserve">
          <source>Removes the memory range starting at p from an internal list of ranges to be scanned during a collection. If p is null or does not represent a value previously passed to addRange() then no operation is performed.</source>
          <target state="translated">コレクション中にスキャンされる範囲の内部リストから p から始まるメモリ範囲を削除します。p が NULL であるか、以前に addRange()に渡された値を表していない場合は、操作は実行されません。</target>
        </trans-unit>
        <trans-unit id="81d852ce25ceb246e735f784209b6e858afa3347" translate="yes" xml:space="preserve">
          <source>Removes the registered name associated with a tid.</source>
          <target state="translated">tidに関連付けられた登録名を削除します。</target>
        </trans-unit>
        <trans-unit id="0c60420ccfdbfc083a2df49308225876e57a8c42" translate="yes" xml:space="preserve">
          <source>Removes the value at the back of &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; の後ろの値を削除します。</target>
        </trans-unit>
        <trans-unit id="c9a77b02f79effe6f57835d97c27484ed5fcbae5" translate="yes" xml:space="preserve">
          <source>Removes the value at the front of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">コンテナの先頭にある値を削除します。安定版の動作は同じですが、コンテナを反復する範囲が決して無効にならないことを保証します。</target>
        </trans-unit>
        <trans-unit id="eadd2b6a6ae0fdbbe767f971e4e3f148b99d9df6" translate="yes" xml:space="preserve">
          <source>Removes the value at the front/back of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">コンテナの前後の値を削除します。安定版の動作は同じですが、コンテナを反復する範囲が決して無効にならないことを保証します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
