<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="86db8edf378862e012fa8f8fcf58a7d5108946ce" translate="yes" xml:space="preserve">
          <source>The default allocator.</source>
          <target state="translated">デフォルトのアロケータです。</target>
        </trans-unit>
        <trans-unit id="84034aca41f128da43b408ac2e8f9758bed62159" translate="yes" xml:space="preserve">
          <source>The default constructor for the &lt;code&gt;NullLogger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NullLogger&lt;/code&gt; のデフォルトのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="60dfda69676fc480f5f6faa42faf083636619c98" translate="yes" xml:space="preserve">
          <source>The default constructor for the &lt;code&gt;StdForwardLogger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;StdForwardLogger&lt;/code&gt; のデフォルトのコンストラクター。</target>
        </trans-unit>
        <trans-unit id="44546e235ac407a00aa0d819574df31ac96d3e13" translate="yes" xml:space="preserve">
          <source>The default directory where the TZ Database files are stored. It's empty for Windows, since Windows doesn't have them. You can also use the TZDatabaseDir version to pass an arbitrary path at compile-time, rather than hard-coding it here. Android concatenates all time zone data into a single file called tzdata and stores it in the directory below.</source>
          <target state="translated">TZ Databaseファイルが保存されているデフォルトのディレクトリです。Windowsでは空のディレクトリです。TZDatabaseDirバージョンを使って、コンパイル時に任意のパスを渡すこともできます。Android はすべてのタイムゾーンデータを tzdata という一つのファイルに連結し、以下のディレクトリに保存します。</target>
        </trans-unit>
        <trans-unit id="8df16f51964aeebfe4bc3a051bf58dca3ecbc7ca" translate="yes" xml:space="preserve">
          <source>The default extension to use.</source>
          <target state="translated">使用するデフォルトの拡張子。</target>
        </trans-unit>
        <trans-unit id="85ad9abd95b264167c92cdc2a1adee2b573ef599" translate="yes" xml:space="preserve">
          <source>The default good size allocation is deduced as &lt;code&gt;n&lt;/code&gt; rounded up to the allocator's alignment.</source>
          <target state="translated">デフォルトの適切なサイズの割り当ては、 &lt;code&gt;n&lt;/code&gt; がアロケータの配置に切り上げられると推定されます。</target>
        </trans-unit>
        <trans-unit id="1b0fe911bc214b516e59012b05dd0e28695378c4" translate="yes" xml:space="preserve">
          <source>The default initializer is evaluated at compile time.</source>
          <target state="translated">デフォルトのイニシャライザはコンパイル時に評価されます。</target>
        </trans-unit>
        <trans-unit id="09875c3ec3c0432a38d2825c4ab0b5b1b8a97473" translate="yes" xml:space="preserve">
          <source>The default initializers are evaluated at compile time.</source>
          <target state="translated">デフォルトのイニシャライザはコンパイル時に評価されます。</target>
        </trans-unit>
        <trans-unit id="b315cb15ffa0ca81f8d98d7b66d415e4aa5dc1b4" translate="yes" xml:space="preserve">
          <source>The default initializers may not contain references to mutable data.</source>
          <target state="translated">デフォルトのイニシャライザには、変異可能なデータへの参照が含まれていない場合があります。</target>
        </trans-unit>
        <trans-unit id="198b7d1107c41684b20ca53736c0025d3ab9b73c" translate="yes" xml:space="preserve">
          <source>The default inline behavior is typically selectable with a compiler switch such as &lt;a href=&quot;https://dlang.org/dmd.html#switch-inline&quot;&gt;&lt;em&gt;-inline&lt;/em&gt;.&lt;/a&gt;</source>
          <target state="translated">デフォルトのインライン動作は通常、&lt;a href=&quot;https://dlang.org/dmd.html#switch-inline&quot;&gt;&lt;em&gt;-inline&lt;/em&gt;&lt;/a&gt;などのコンパイラスイッチで選択できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d4be45be08a1c8c22dbb96c12305596159d25e0b" translate="yes" xml:space="preserve">
          <source>The default layout of the fields of a struct is an exact match with the</source>
          <target state="translated">構造体のフィールドのデフォルトのレイアウトは</target>
        </trans-unit>
        <trans-unit id="2f337be32b3aefecfcb4859e625057b7bd434d30" translate="yes" xml:space="preserve">
          <source>The default linkage for member functions of COM classes is &lt;code&gt;extern(System)&lt;/code&gt;.  Note that if you want to implement or override any base-class methods of D interfaces or classes (ones which do not inherit from &lt;code&gt;IUnknown&lt;/code&gt;), you have to explicitly mark them as having the &lt;code&gt;extern(D)&lt;/code&gt; linkage:</source>
          <target state="translated">COMクラスのメンバー関数のデフォルトのリンケージは &lt;code&gt;extern(System)&lt;/code&gt; です。Dインターフェイスまたはクラス（ &lt;code&gt;IUnknown&lt;/code&gt; から継承しないもの）の基本クラスメソッドを実装またはオーバーライドする場合は、それらに &lt;code&gt;extern(D)&lt;/code&gt; リンケージがあることを明示的にマークする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7f4262f95c707a983226fca6d9fb6bf885e79c8c" translate="yes" xml:space="preserve">
          <source>The default namespaces (&lt;a href=&quot;#dnsNamespace&quot;&gt;&lt;code&gt;dnsNamespace&lt;/code&gt;&lt;/a&gt;, ...) defined by this module should be used when appropriate.</source>
          <target state="translated">このモジュールで定義されているデフォルトの名前空間（&lt;a href=&quot;#dnsNamespace&quot;&gt; &lt;code&gt;dnsNamespace&lt;/code&gt; &lt;/a&gt;、...）は、適切な場合に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c2f98d39df30add62dee5880988c4ddc9def3c49" translate="yes" xml:space="preserve">
          <source>The default scheduling priority that is set for a thread. On systems where multiple scheduling policies are defined, this value represents the default priority for the scheduling policy of the process.</source>
          <target state="translated">スレッドに設定されるデフォルトのスケジューリング優先度。複数のスケジューリングポリシーが定義されているシステムでは、この値はプロセスのスケジューリングポリシーのデフォルトの優先度を表します。</target>
        </trans-unit>
        <trans-unit id="39cb60f50514180fcf08c0496a2e6d58784782d0" translate="yes" xml:space="preserve">
          <source>The default seed value.</source>
          <target state="translated">デフォルトのシード値。</target>
        </trans-unit>
        <trans-unit id="cd5dbb92220cc6a8e8b2d5783ecebaacc60df5fc" translate="yes" xml:space="preserve">
          <source>The default value of a &lt;code&gt;Checked!(X, WithNaN)&lt;/code&gt; is its NaN value, so care must be taken that all variables are explicitly initialized. Any arithmetic and logic operation involving at least on NaN becomes NaN itself. All of &lt;code&gt;a == b&lt;/code&gt;, &lt;code&gt;a &amp;lt; b&lt;/code&gt;, &lt;code&gt;a &amp;gt; b&lt;/code&gt;, &lt;code&gt;a &amp;lt;= b&lt;/code&gt;, &lt;code&gt;a &amp;gt;= b&lt;/code&gt; yield &lt;code&gt;false&lt;/code&gt; if at least one of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is NaN.</source>
          <target state="translated">&lt;code&gt;Checked!(X, WithNaN)&lt;/code&gt; のデフォルト値はそのNaN値なので、すべての変数が明示的に初期化されるように注意する必要があります。少なくともNaNを含む算術および論理演算はすべてNaNになります。すべての &lt;code&gt;a == b&lt;/code&gt; 、 &lt;code&gt;a &amp;lt; b&lt;/code&gt; 、 &lt;code&gt;a &amp;gt; b&lt;/code&gt; 、 &lt;code&gt;a &amp;lt;= b&lt;/code&gt; 、 &lt;code&gt;a &amp;gt;= b&lt;/code&gt; 収率の &lt;code&gt;false&lt;/code&gt; の少なくとも1つが及び &lt;code&gt;b&lt;/code&gt; は NaNです。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60336805f352e76f45059516632dd3aebf2bb4c8" translate="yes" xml:space="preserve">
          <source>The default value used for values not explicitly initialized. It is the NaN value, i.e. &lt;code&gt;T.min&lt;/code&gt; for signed integrals and &lt;code&gt;T.max&lt;/code&gt; for unsigned integrals.</source>
          <target state="translated">明示的に初期化されていない値に使用されるデフォルト値。これは、NaN値、すなわちある &lt;code&gt;T.min&lt;/code&gt; 署名積分用と &lt;code&gt;T.max&lt;/code&gt; 符号なしの積分のために。</target>
        </trans-unit>
        <trans-unit id="175f9e59ae6d8d45a5ecbc8d3bf95ccec9b46335" translate="yes" xml:space="preserve">
          <source>The default value.</source>
          <target state="translated">デフォルト値です。</target>
        </trans-unit>
        <trans-unit id="5298372926ef4a5550bf5eba62d1b79774021d32" translate="yes" xml:space="preserve">
          <source>The default way to configure the runtime is by passing command line arguments starting with &lt;code&gt;--DRT-&lt;/code&gt; and followed by the option name, e.g. &lt;code&gt;--DRT-gcopt&lt;/code&gt; to configure the GC. When command line parsing is enabled, command line options starting with &lt;code&gt;--DRT-&lt;/code&gt; are filtered out before calling main, so the program will not see them. They are still available via &lt;code&gt;rt_args()&lt;/code&gt;.</source>
          <target state="translated">ランタイムを構成するデフォルトの方法は、 &lt;code&gt;--DRT-&lt;/code&gt; で始まり、オプション名が続くコマンドライン引数を渡すことです。たとえば、 &lt;code&gt;--DRT-gcopt&lt;/code&gt; を使用してGCを構成します。コマンドライン解析が有効な場合、 &lt;code&gt;--DRT-&lt;/code&gt; 始まるコマンドラインオプションはmainを呼び出す前に除外されるため、プログラムはそれらを認識しません。それらは、 &lt;code&gt;rt_args()&lt;/code&gt; を介して引き続き利用できます。</target>
        </trans-unit>
        <trans-unit id="ba1df5a4c503e2e5ff553646b53232a4dc9fad0b" translate="yes" xml:space="preserve">
          <source>The delegate or function having the currently held value as parameter is called with &lt;code&gt;variant&lt;/code&gt;'s current value. Visiting handlers are passed in the template parameter list. It is statically ensured that all held types of &lt;code&gt;variant&lt;/code&gt; are handled across all handlers. &lt;code&gt;visit&lt;/code&gt; allows delegates and static functions to be passed as parameters.</source>
          <target state="translated">現在保持されている値をパラメーターとして持つデリゲートまたは関数は、 &lt;code&gt;variant&lt;/code&gt; の現在の値で呼び出されます。訪問ハンドラは、テンプレートパラメータリストで渡されます。保持されているすべての種類の &lt;code&gt;variant&lt;/code&gt; がすべてのハンドラで処理されることが静的に保証されます。 &lt;code&gt;visit&lt;/code&gt; は、デリゲートと静的関数をパラメーターとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="a9153a9a54229a058c01d02e777396fe2144ca6b" translate="yes" xml:space="preserve">
          <source>The delegate the fiber should call</source>
          <target state="translated">ファイバーのデリゲートは</target>
        </trans-unit>
        <trans-unit id="2b6e50abb4f0914ce14cb54a228ba5c564bcd73a" translate="yes" xml:space="preserve">
          <source>The delegate to be called if the value evaluates to false.</source>
          <target state="translated">値が false と評価された場合に呼び出されるデリゲート。</target>
        </trans-unit>
        <trans-unit id="95f480c7d2ae51400206ecb9e084d35ded98b8d3" translate="yes" xml:space="preserve">
          <source>The demangle module converts mangled D symbols to a representation similar to what would have existed in code.</source>
          <target state="translated">DEMANGLE モジュールは、変形した D のシンボルを、コード内に存在するであろうものと同じような表現に変換します。</target>
        </trans-unit>
        <trans-unit id="48b3f69fad23d9b2d8c32fdb445562e4fbbe9924" translate="yes" xml:space="preserve">
          <source>The demangled name or the original string if the name is not a mangled D name.</source>
          <target state="translated">デマングされた名前、またはマングされたD名でない場合は元の文字列。</target>
        </trans-unit>
        <trans-unit id="0cc17d9f531c72835705e440a701b890a1903124" translate="yes" xml:space="preserve">
          <source>The demangled type name or the original string if the name is not a mangled D type.</source>
          <target state="translated">デマングルされたD型の名前、またはマングルされたD型でない場合は元の文字列。</target>
        </trans-unit>
        <trans-unit id="60c01151d0f392e7605b5a47b38d319dce929d2b" translate="yes" xml:space="preserve">
          <source>The description of this option</source>
          <target state="translated">このオプションの説明</target>
        </trans-unit>
        <trans-unit id="f84ede836de109cb779bab9fc0b1fd8d408f2a87" translate="yes" xml:space="preserve">
          <source>The desired &lt;a href=&quot;#FunctionAttribute&quot;&gt;&lt;code&gt;FunctionAttribute&lt;/code&gt;&lt;/a&gt;s of the result type.</source>
          <target state="translated">結果タイプの目的の&lt;a href=&quot;#FunctionAttribute&quot;&gt; &lt;code&gt;FunctionAttribute&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="23d72f95e07dcbef384a7cb27da3b8ccb18812f3" translate="yes" xml:space="preserve">
          <source>The desired allocation size in bytes.</source>
          <target state="translated">希望する割り当てサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="9a65e8347e92f2a998eac03474e781c85ca96f7b" translate="yes" xml:space="preserve">
          <source>The desired extension size in bytes.</source>
          <target state="translated">希望する拡張子のサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="af2fe61e437d6dfeba930d32d765dbac31989651" translate="yes" xml:space="preserve">
          <source>The desired linkage of the result type.</source>
          <target state="translated">結果タイプの希望する連結。</target>
        </trans-unit>
        <trans-unit id="59cf426293fa685ffeb3c9d3c020fed48d5397c1" translate="yes" xml:space="preserve">
          <source>The desired size in bytes.</source>
          <target state="translated">希望するサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="ac522378c8d7addb4cb9d53d5b7d048c9264b788" translate="yes" xml:space="preserve">
          <source>The destructor automatically closes the file as soon as no &lt;code&gt;File&lt;/code&gt; object refers to it anymore.</source>
          <target state="translated">デストラクタは、 &lt;code&gt;File&lt;/code&gt; オブジェクトがそれを参照しなくなるとすぐに、ファイルを自動的に閉じます。</target>
        </trans-unit>
        <trans-unit id="8c331e4eecbd8270b0e4ce21fab87b6858ba74cc" translate="yes" xml:space="preserve">
          <source>The destructor for the super class automatically gets called when the destructor ends. There is no way to call the super destructor explicitly.</source>
          <target state="translated">スーパークラスのデストラクタは、デストラクタが終了すると自動的に呼び出されます。スーパークラスのデストラクタを明示的に呼び出す方法はありません。</target>
        </trans-unit>
        <trans-unit id="f6330e2ba0f0050af5f9f70cf0eec4389de5eb4b" translate="yes" xml:space="preserve">
          <source>The destructor is expected to release any resources held by the object.</source>
          <target state="translated">デストラクタは、オブジェクトが保持するリソースを解放することが期待されます。</target>
        </trans-unit>
        <trans-unit id="7159cd12fe27172c0a0982e4b8092e7e75f8821b" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. For instance, rolling a &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; one year's worth of days gets the exact same &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。たとえば、1年分の&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;ロールすると、まったく同じ&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;が取得されます。</target>
        </trans-unit>
        <trans-unit id="b7c404d040d8fd24e8c117abcb04c6ad2d048280" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. For instance, rolling a &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; one year's worth of days gets the exact same &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。たとえば、&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; を&lt;/a&gt; 1年分ロールすると、まったく同じ&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が取得されます。</target>
        </trans-unit>
        <trans-unit id="b3c3c9ee3f68d7a39533f5e98688e28838282e6b" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. For instance, rolling a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; one year's worth of days gets the exact same &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。たとえば、&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; を&lt;/a&gt; 1年分ロールすると、まったく同じ&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; が取得され&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="24751c549ef6022fb5253fa2ab74c9f98d81a539" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. For instance, rolling a &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt; one hours's worth of minutes gets the exact same &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。たとえば、&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; を&lt;/a&gt; 1時間分の分だけロールすると、まったく同じ&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; が取得され&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e8c7039887bf08601f56a0509005c2c5688e3ba7" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. Rolling a &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; 12 months gets the exact same &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;. However, the days can still be affected due to the differing number of days in each month.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 12か月ロールすると、まったく同じ&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;ます。ただし、月によって日数が異なるため、日数は影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="4c92275a7e175bacd3ce746d6adc1eff5f6f35c0" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. Rolling a &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; 12 months gets the exact same &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;. However, the days can still be affected due to the differing number of days in each month.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。12か月の&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; を&lt;/a&gt;ローリングしても、まったく同じ&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が得られます。ただし、月によって日数が異なるため、日数は影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="bd425db182cd0598846f2e904965692d4bd6f1e2" translate="yes" xml:space="preserve">
          <source>The difference between rolling and adding is that rolling does not affect larger units. Rolling a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; 12 months gets the exact same &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;. However, the days can still be affected due to the differing number of days in each month.</source>
          <target state="translated">ローリングと追加の違いは、ローリングは大きなユニットには影響しないということです。&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; を&lt;/a&gt; 12か月間ローリングしても、まったく同じ&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;が得られます。ただし、月によって日数が異なるため、日数は影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="9607cb254c58607b6f72a2ec85c44f16a7c46305" translate="yes" xml:space="preserve">
          <source>The difference between this version of &lt;code&gt;everyDuration&lt;/code&gt; and the version which just takes a &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; is that this one also takes the number of years and months (along with an &lt;code&gt;AllowDayOverflow&lt;/code&gt; to indicate whether adding years and months should allow the days to overflow).</source>
          <target state="translated">このバージョンの差 &lt;code&gt;everyDuration&lt;/code&gt; だけかかりバージョン&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; は、&lt;/a&gt;この1つはまた、（一緒に年と月の数を取ることである &lt;code&gt;AllowDayOverflow&lt;/code&gt; 追加年と月オーバーフロー日を可能にすべきかどうかを示します） 。</target>
        </trans-unit>
        <trans-unit id="448504c864d4f8f6a21520c51c1f3e9b8a81d617" translate="yes" xml:space="preserve">
          <source>The digamma function is the logarithmic derivative of the gamma function.</source>
          <target state="translated">ジガンマ関数は、ガンマ関数の対数微分です。</target>
        </trans-unit>
        <trans-unit id="df031407b714e9d3fe5339c97f81f1b5df587638" translate="yes" xml:space="preserve">
          <source>The direction and magnitude of the 1st shift. Positive means left, negative means right.</source>
          <target state="translated">第1シフトの方向と大きさ。正は左、負は右を意味します。</target>
        </trans-unit>
        <trans-unit id="ac46a68fb5f59b21b538d08a263d443a6d4a88ba" translate="yes" xml:space="preserve">
          <source>The direction and magnitude of the 2nd shift. Positive means left, negative means right.</source>
          <target state="translated">第2シフトの方向と大きさ。正は左、負は右を意味します。</target>
        </trans-unit>
        <trans-unit id="2f490894285820c4987bf19f75fcde524a0fa198" translate="yes" xml:space="preserve">
          <source>The direction and magnitude of the 3rd shift. Positive means left, negative means right.</source>
          <target state="translated">第3シフトの方向と大きさ。正は左、負は右を意味します。</target>
        </trans-unit>
        <trans-unit id="3c5a37562720e9b61ecfa6b8583112dc5d6824cf" translate="yes" xml:space="preserve">
          <source>The direction in time to expand the interval.</source>
          <target state="translated">間隔を広げるための時間内の方向。</target>
        </trans-unit>
        <trans-unit id="52fc8addeaa24de333c4f04db15ff317feeb8f10" translate="yes" xml:space="preserve">
          <source>The direction to iterate in. If passing the return value to &lt;code&gt;fwdRange&lt;/code&gt;, use &lt;code&gt;Direction.fwd&lt;/code&gt;. If passing it to &lt;code&gt;bwdRange&lt;/code&gt;, use &lt;code&gt;Direction.bwd&lt;/code&gt;.</source>
          <target state="translated">反復する方向。戻り値を &lt;code&gt;fwdRange&lt;/code&gt; に渡す場合は、 &lt;code&gt;Direction.fwd&lt;/code&gt; を使用します。 &lt;code&gt;bwdRange&lt;/code&gt; に渡す場合は、 &lt;code&gt;Direction.bwd&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ae829e1bef022f58af3dfe6292cdbc4a3e16363d" translate="yes" xml:space="preserve">
          <source>The directories listed in the PATH environment variable.</source>
          <target state="translated">環境変数PATHにリストされているディレクトリ。</target>
        </trans-unit>
        <trans-unit id="745a52fd17585cda122240a437ff94eb24ff53ba" translate="yes" xml:space="preserve">
          <source>The directory from which the application loaded.</source>
          <target state="translated">アプリケーションがロードされたディレクトリ。</target>
        </trans-unit>
        <trans-unit id="c70ca0dd7d389cc0f66b4748ce2158d5f654afbf" translate="yes" xml:space="preserve">
          <source>The directory given by the &lt;code&gt;TEMP&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;TEMP&lt;/code&gt; 環境変数で指定されたディレクトリ。</target>
        </trans-unit>
        <trans-unit id="9ae0bd7ea20121e71f355b6ae61308dbc4fc4a8d" translate="yes" xml:space="preserve">
          <source>The directory given by the &lt;code&gt;TMP&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;TMP&lt;/code&gt; 環境変数で指定されたディレクトリ。</target>
        </trans-unit>
        <trans-unit id="daef8bc56ebc827befeb7f02e13c0987eaa60ed2" translate="yes" xml:space="preserve">
          <source>The directory given by the &lt;code&gt;TMPDIR&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;TMPDIR&lt;/code&gt; 環境変数で指定されたディレクトリ。</target>
        </trans-unit>
        <trans-unit id="d4eec1b6c0603738af374e4a976caa00a506fd85" translate="yes" xml:space="preserve">
          <source>The directory to iterate over. If empty, the current directory will be iterated.</source>
          <target state="translated">反復処理を行うディレクトリを指定します。空の場合は、カレントディレクトリを反復処理します。</target>
        </trans-unit>
        <trans-unit id="98b1c4850f41f23860e357cb3645bbbb143947fc" translate="yes" xml:space="preserve">
          <source>The directory where the TZ Database files are located.</source>
          <target state="translated">TZ データベースファイルが置かれているディレクトリです。</target>
        </trans-unit>
        <trans-unit id="5185a0b5ceb9f32e8b2ce8a938cb585e46dedffd" translate="yes" xml:space="preserve">
          <source>The directory where the TZ Database files are located. Because these files are not located on Windows systems, provide them and give their location here to use &lt;a href=&quot;#PosixTimeZone&quot;&gt;&lt;code&gt;PosixTimeZone&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">TZデータベースファイルが配置されているディレクトリ。これらのファイルはWindowsシステムに配置されていないため、&lt;a href=&quot;#PosixTimeZone&quot;&gt; &lt;code&gt;PosixTimeZone&lt;/code&gt; &lt;/a&gt;を使用するためにそれらを提供し、ここにその場所を指定します。</target>
        </trans-unit>
        <trans-unit id="1b936f38c2f1aa54bd76a7cc62b14148166a642a" translate="yes" xml:space="preserve">
          <source>The disadvantages of &lt;code&gt;ContiguousFreeList&lt;/code&gt; over &lt;code&gt;FreeList&lt;/code&gt; are its pay upfront model (as opposed to &lt;code&gt;FreeList&lt;/code&gt;'s pay-as-you-go approach), and a hard limit on the number of nodes in the list. Thus, a large number of long- lived objects may occupy the entire block, making it unavailable for serving allocations from the free list. However, an absolute cap on the free list size may be beneficial.</source>
          <target state="translated">欠点 &lt;code&gt;ContiguousFreeList&lt;/code&gt; 以上の &lt;code&gt;FreeList&lt;/code&gt; その有料先行モデル（とは対照的に、ある &lt;code&gt;FreeList&lt;/code&gt; の支払ようあなたゴーアプローチ）、およびリスト内のノードの数にハードリミット。したがって、多数の長期間存続するオブジェクトがブロック全体を占有する可能性があり、フリーリストからの割り当てに使用できなくなります。ただし、フリーリストのサイズに絶対的な上限を設定すると効果的です。</target>
        </trans-unit>
        <trans-unit id="3b64019a956fdeb2b48af242389c7dfaf52e1521" translate="yes" xml:space="preserve">
          <source>The distinction is made in the semantic analysis pass.</source>
          <target state="translated">意味分析パスで区別しています。</target>
        </trans-unit>
        <trans-unit id="d29faf2564401dd940d152dda18be8c2fa0d07a8" translate="yes" xml:space="preserve">
          <source>The document comment is a series of</source>
          <target state="translated">文書コメントは、一連の</target>
        </trans-unit>
        <trans-unit id="e57c999ce3911b8c1791d1a7eb04e0490e4fee0b" translate="yes" xml:space="preserve">
          <source>The documentation comment processor includes a simple macro text preprocessor. When a &amp;amp;dollar;(</source>
          <target state="translated">ドキュメントコメントプロセッサには、単純なマクロテキストプリプロセッサが含まれています。＆dollar;（</target>
        </trans-unit>
        <trans-unit id="0f835ee5f6e2ea0040d44210ead7dc160306901a" translate="yes" xml:space="preserve">
          <source>The documentation comments can themselves be commented using the &amp;amp;dollar;&lt;code&gt;(DDOC_COMMENT comment text)&lt;/code&gt; syntax. These comments do not nest.</source>
          <target state="translated">ドキュメントのコメント自体は、＆dollar;を使用してコメントを付けることができます。 &lt;code&gt;(DDOC_COMMENT comment text)&lt;/code&gt; 構文。これらのコメントはネストされません。</target>
        </trans-unit>
        <trans-unit id="ad9fa243a6cd23895dc3ad60e16a76e4b15cce21" translate="yes" xml:space="preserve">
          <source>The domain literal is not a valid RFC 5321 address literal</source>
          <target state="translated">ドメインリテラルは有効なRFC 5321アドレスリテラルではありません。</target>
        </trans-unit>
        <trans-unit id="e9bc2306173e1f523fc346c3259e214855410cc4" translate="yes" xml:space="preserve">
          <source>The domain literal is not a valid RFC 5321 address literal and it contains obsolete characters</source>
          <target state="translated">ドメインリテラルは有効なRFC 5321アドレスリテラルではなく、時代遅れの文字を含んでいます。</target>
        </trans-unit>
        <trans-unit id="9635c78033f40ef6473df58ddae1875249393348" translate="yes" xml:space="preserve">
          <source>The domain of definition is 0 &amp;lt;= x &amp;lt;= 1. In this implementation a and b are restricted to positive values. The integral from x to 1 may be obtained by the symmetry relation</source>
          <target state="translated">定義域は0 &amp;lt;= x &amp;lt;= 1です。この実装では、aおよびbは正の値に制限されています。xから1までの積分は、対称関係によって取得できます。</target>
        </trans-unit>
        <trans-unit id="7630f4b6e086656f20c44179d8d49a08885c5ad0" translate="yes" xml:space="preserve">
          <source>The domain part contains an element that is too long</source>
          <target state="translated">ドメイン部分には長すぎる要素が含まれています。</target>
        </trans-unit>
        <trans-unit id="f9e782a18f0e80044819c477465949e037991e2b" translate="yes" xml:space="preserve">
          <source>The domain part is too long</source>
          <target state="translated">ドメイン部分が長すぎる</target>
        </trans-unit>
        <trans-unit id="b4015656a3a26966f5bb779ad625cb099b930b1f" translate="yes" xml:space="preserve">
          <source>The domain part of the email address, that is, the part after the @ sign.</source>
          <target state="translated">メールアドレスのドメイン部分、つまり@記号の後の部分。</target>
        </trans-unit>
        <trans-unit id="bc43c1b6acb6b3f1be54a397e4365b408708f795" translate="yes" xml:space="preserve">
          <source>The drain of the data read.</source>
          <target state="translated">読み込んだデータのドレイン。</target>
        </trans-unit>
        <trans-unit id="d6c5fc3ceb4e2b528f0297088355338c6c888969" translate="yes" xml:space="preserve">
          <source>The duration from the starting point to the end point.</source>
          <target state="translated">開始点から終了点までの期間。</target>
        </trans-unit>
        <trans-unit id="13e96de5799e2b95c36e302f2857b76d002475c9" translate="yes" xml:space="preserve">
          <source>The duration to add to or subtract from this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; に&lt;/a&gt;加算または減算する期間。</target>
        </trans-unit>
        <trans-unit id="5de9a67b89b5b7a6e94e2e5ed705920f06e257b1" translate="yes" xml:space="preserve">
          <source>The duration to add to or subtract from this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に加算または減算するDuration。</target>
        </trans-unit>
        <trans-unit id="045eb63ee5246a358977769376ebbddf4f7e79de" translate="yes" xml:space="preserve">
          <source>The duration to add to the time point passed to the delegate.</source>
          <target state="translated">代議員に渡されたタイムポイントに追加する期間。</target>
        </trans-unit>
        <trans-unit id="f712fda6f39835e50109819b59fa2e17d776d88d" translate="yes" xml:space="preserve">
          <source>The duration to divide this &lt;code&gt;Duration&lt;/code&gt; by.</source>
          <target state="translated">この期間を分割する &lt;code&gt;Duration&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ebebf2b9a88fc743bbefdf245fe1996fed62b5d4" translate="yes" xml:space="preserve">
          <source>The duration to expand the interval by.</source>
          <target state="translated">インターバルを拡大するための期間です。</target>
        </trans-unit>
        <trans-unit id="6b8d59a6b4eb6f151c22d18ab315e8905cbca345" translate="yes" xml:space="preserve">
          <source>The duration to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s fractional seconds to.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の端数秒を設定する期間。</target>
        </trans-unit>
        <trans-unit id="10a00cd16c4e11d477797057c8547364622ecc0c" translate="yes" xml:space="preserve">
          <source>The duration to shift the interval by.</source>
          <target state="translated">間隔をずらすための持続時間。</target>
        </trans-unit>
        <trans-unit id="b1c624813bb3a1615cc85c1ae1a0262dd3e649d6" translate="yes" xml:space="preserve">
          <source>The duration which separates each successive time point in the range.</source>
          <target state="translated">範囲内の各連続した時間点を区切る持続時間。</target>
        </trans-unit>
        <trans-unit id="4aceca3575bedab7bdf950c54d8f75f4cd974c6c" translate="yes" xml:space="preserve">
          <source>The effect of this function, as well as the meaning of &lt;code&gt;codeOrSignal&lt;/code&gt;, is highly platform dependent. Details are given below. Common to all platforms is that this function only</source>
          <target state="translated">この関数の効果と &lt;code&gt;codeOrSignal&lt;/code&gt; の意味は、プラットフォームに大きく依存します。詳細は以下の通りです。すべてのプラットフォームに共通するのは、この機能のみ</target>
        </trans-unit>
        <trans-unit id="b949a7d4d40b96549035bb1b9cabaaf6d915fa2c" translate="yes" xml:space="preserve">
          <source>The effect on &lt;code&gt;inp&lt;/code&gt; depends on the kind of function called:</source>
          <target state="translated">&lt;code&gt;inp&lt;/code&gt; への影響は、呼び出される関数の種類によって異なります。</target>
        </trans-unit>
        <trans-unit id="562dbad759d6f2a80acd12d273fe89562ff6f2e0" translate="yes" xml:space="preserve">
          <source>The element (or range) to be treated as the separator between range segments to be split.</source>
          <target state="translated">分割する範囲セグメント間の区切りとして扱う要素(または範囲)。</target>
        </trans-unit>
        <trans-unit id="67f3be77d3c98017b171a56f0b2ef27d5b2a4614" translate="yes" xml:space="preserve">
          <source>The element at offset &lt;code&gt;1&lt;/code&gt; has been removed and the rest of the elements have shifted up to fill its place, however, the original array remains of the same length. This is because all functions in &lt;code&gt;std.algorithm&lt;/code&gt; only change</source>
          <target state="translated">オフセット &lt;code&gt;1&lt;/code&gt; の要素は削除され、残りの要素はその位置を埋めるために上に移動しましたが、元の配列は同じ長さのままです。これは、 &lt;code&gt;std.algorithm&lt;/code&gt; のすべての関数が変更されるだけだからです。</target>
        </trans-unit>
        <trans-unit id="889dab60cf01b0f7421719ab37f1b28c9311efa0" translate="yes" xml:space="preserve">
          <source>The element corresponding with a left (opening) parenthesis.</source>
          <target state="translated">左(開)括弧に対応する要素。</target>
        </trans-unit>
        <trans-unit id="0932ed8af54392d39cf0d92fcbcc4890a1724cbd" translate="yes" xml:space="preserve">
          <source>The element corresponding with a right (closing) parenthesis.</source>
          <target state="translated">右括弧(閉じ)に対応する要素。</target>
        </trans-unit>
        <trans-unit id="dedbb295326b4d3eda9e5e759f27bfe1c5ac6bc2" translate="yes" xml:space="preserve">
          <source>The element is assumed to contain text</source>
          <target state="translated">要素にはテキストが含まれているものとします。</target>
        </trans-unit>
        <trans-unit id="8312cc74e186b12d4ed20f4003b6c04acdd49b6e" translate="yes" xml:space="preserve">
          <source>The element or a reference to the element at the specified index.</source>
          <target state="translated">指定されたインデックスの要素または要素への参照。</target>
        </trans-unit>
        <trans-unit id="7131957f7eb94e306d342b5195eb84dc3e1e781f" translate="yes" xml:space="preserve">
          <source>The element or sub-range to count in the &lt;code&gt;haystack&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; でカウントする要素またはサブ範囲。</target>
        </trans-unit>
        <trans-unit id="7a38c4dc1b72acf54e9b103de60a08c5dad1c7f0" translate="yes" xml:space="preserve">
          <source>The element removed.</source>
          <target state="translated">要素が削除されました。</target>
        </trans-unit>
        <trans-unit id="f20b1e66abf934338028bfca19daea068ac238b3" translate="yes" xml:space="preserve">
          <source>The element searched for.</source>
          <target state="translated">検索した要素。</target>
        </trans-unit>
        <trans-unit id="3af3bbcb06a3c010f8dd6e115df00414b2ef76c3" translate="yes" xml:space="preserve">
          <source>The element to match.</source>
          <target state="translated">マッチする要素。</target>
        </trans-unit>
        <trans-unit id="bfcc76451138cf6e179bded66babeafecdbfe06a" translate="yes" xml:space="preserve">
          <source>The element to stop at.</source>
          <target state="translated">で止まる要素。</target>
        </trans-unit>
        <trans-unit id="b80bff8085fdd511cb9c4d9e05da48019bf3dd74" translate="yes" xml:space="preserve">
          <source>The element type for 32-bit implementation.</source>
          <target state="translated">32ビット実装用の要素タイプです。</target>
        </trans-unit>
        <trans-unit id="218ef2dcaf3b3057dc646bab34be48640fa2fc83" translate="yes" xml:space="preserve">
          <source>The element type for the range will be &lt;code&gt;Char[]&lt;/code&gt;. Range primitives may throw &lt;code&gt;StdioException&lt;/code&gt; on I/O error.</source>
          <target state="translated">範囲の要素タイプは &lt;code&gt;Char[]&lt;/code&gt; ます。範囲プリミティブは、I / Oエラー時に &lt;code&gt;StdioException&lt;/code&gt; をスローする場合があります。</target>
        </trans-unit>
        <trans-unit id="c8e0ad7d182f093115b2321024fb0d43eeab8ccb" translate="yes" xml:space="preserve">
          <source>The element type for the range will be &lt;code&gt;ubyte[]&lt;/code&gt;. Range primitives may throw &lt;code&gt;StdioException&lt;/code&gt; on I/O error.</source>
          <target state="translated">範囲の要素タイプは &lt;code&gt;ubyte[]&lt;/code&gt; ます。範囲プリミティブは、I / Oエラー時に &lt;code&gt;StdioException&lt;/code&gt; をスローする場合があります。</target>
        </trans-unit>
        <trans-unit id="146f6e63904487c6bc88a456ffe5bb5d872efab2" translate="yes" xml:space="preserve">
          <source>The element type of &lt;code&gt;R&lt;/code&gt;. &lt;code&gt;R&lt;/code&gt; does not have to be a range. The element type is determined as the type yielded by &lt;code&gt;r.front&lt;/code&gt; for an object &lt;code&gt;r&lt;/code&gt; of type &lt;code&gt;R&lt;/code&gt;. For example, &lt;code&gt;ElementType!(T[])&lt;/code&gt; is &lt;code&gt;T&lt;/code&gt; if &lt;code&gt;T[]&lt;/code&gt; isn't a narrow string; if it is, the element type is &lt;code&gt;dchar&lt;/code&gt;. If &lt;code&gt;R&lt;/code&gt; doesn't have &lt;code&gt;front&lt;/code&gt;, &lt;code&gt;ElementType!R&lt;/code&gt; is &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; の要素タイプ。 &lt;code&gt;R&lt;/code&gt; は範囲である必要はありません。要素タイプは、タイプ &lt;code&gt;R&lt;/code&gt; のオブジェクト &lt;code&gt;r&lt;/code&gt; に対して &lt;code&gt;r.front&lt;/code&gt; によって生成されるタイプとして決定されます。たとえば、 &lt;code&gt;T[]&lt;/code&gt; が狭い文字列でない場合、 &lt;code&gt;ElementType!(T[])&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; です。そうである場合、要素タイプは &lt;code&gt;dchar&lt;/code&gt; です。 &lt;code&gt;R&lt;/code&gt; に &lt;code&gt;front&lt;/code&gt; がない場合、 &lt;code&gt;ElementType!R&lt;/code&gt; は &lt;code&gt;void&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="242b60e2b158a7060db8baf4f6cc26e6d87af9f3" translate="yes" xml:space="preserve">
          <source>The element's CData items</source>
          <target state="translated">要素のCData項目</target>
        </trans-unit>
        <trans-unit id="c3b9d2b70df47460f19754a079e90ba32c948935" translate="yes" xml:space="preserve">
          <source>The element's child elements</source>
          <target state="translated">要素の子要素</target>
        </trans-unit>
        <trans-unit id="a931fa1a5c6e1ac62a1fb67480e5e8ac09b9bdb7" translate="yes" xml:space="preserve">
          <source>The element's comments</source>
          <target state="translated">要素のコメント</target>
        </trans-unit>
        <trans-unit id="a2b54c10854bacd9d44680700556c9e99d65c27d" translate="yes" xml:space="preserve">
          <source>The element's items</source>
          <target state="translated">要素の項目</target>
        </trans-unit>
        <trans-unit id="585ede5c120291a9643e02011ada89b79cd9d6f7" translate="yes" xml:space="preserve">
          <source>The element's processing instructions</source>
          <target state="translated">要素の処理命令</target>
        </trans-unit>
        <trans-unit id="eb70f51eec72df5d60ca23b74395601f21da9c66" translate="yes" xml:space="preserve">
          <source>The element's text items</source>
          <target state="translated">要素のテキスト項目</target>
        </trans-unit>
        <trans-unit id="e5bc2ae39e4f9e29954c5367c1c69157fdd19e00" translate="yes" xml:space="preserve">
          <source>The email address to check</source>
          <target state="translated">チェックするメールアドレス</target>
        </trans-unit>
        <trans-unit id="48e5305233fe3d75b0443ee1f50818a6d648fd6c" translate="yes" xml:space="preserve">
          <source>The email status code</source>
          <target state="translated">メールのステータスコード</target>
        </trans-unit>
        <trans-unit id="4346e3e9e5e3a95198a31c78de02c8e03150e933" translate="yes" xml:space="preserve">
          <source>The encoded string</source>
          <target state="translated">エンコードされた文字列</target>
        </trans-unit>
        <trans-unit id="381ff9274ef41642af8e81eebffce945d9f4f6ee" translate="yes" xml:space="preserve">
          <source>The encoding element type of &lt;code&gt;R&lt;/code&gt;. For narrow strings (&lt;code&gt;char[]&lt;/code&gt;, &lt;code&gt;wchar[]&lt;/code&gt; and their qualified variants including &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;wstring&lt;/code&gt;), &lt;code&gt;ElementEncodingType&lt;/code&gt; is the character type of the string. For all other types, &lt;code&gt;ElementEncodingType&lt;/code&gt; is the same as &lt;code&gt;ElementType&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; のエンコーディング要素タイプ。狭い文字列（ &lt;code&gt;char[]&lt;/code&gt; 、 &lt;code&gt;wchar[]&lt;/code&gt; 、および &lt;code&gt;string&lt;/code&gt; と &lt;code&gt;wstring&lt;/code&gt; を含むそれらの修飾されたバリアント）の場合、 &lt;code&gt;ElementEncodingType&lt;/code&gt; は文字列の文字タイプです。他のすべてのタイプの場合、 &lt;code&gt;ElementEncodingType&lt;/code&gt; は &lt;code&gt;ElementType&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="8ddaa2a73311c2a472b8bde0c140d7d16072aef8" translate="yes" xml:space="preserve">
          <source>The end point of the interval. It is excluded from the interval.</source>
          <target state="translated">インターバルの終点。インターバルから除外されます。</target>
        </trans-unit>
        <trans-unit id="3045098b74bc924c86c93e1e08406b98332239d1" translate="yes" xml:space="preserve">
          <source>The endianness that the bytes are assumed to be in.</source>
          <target state="translated">バイトが入っていることを前提としたエンディアン性。</target>
        </trans-unit>
        <trans-unit id="d625680f2f5053e8d89e9dc8332e606f7d3ff5c0" translate="yes" xml:space="preserve">
          <source>The endianness that the program was compiled for.</source>
          <target state="translated">プログラムがコンパイルされていたエンディアン性。</target>
        </trans-unit>
        <trans-unit id="2c31e59fa05bc473d51ba9ff8b1fbea71679f185" translate="yes" xml:space="preserve">
          <source>The endianness to write the bytes in.</source>
          <target state="translated">バイトを書き込むエンディアン。</target>
        </trans-unit>
        <trans-unit id="4b673a6e15bd55d6aa4a35d2bd69a88952502624" translate="yes" xml:space="preserve">
          <source>The entire contents of the archive.</source>
          <target state="translated">アーカイブの全内容。</target>
        </trans-unit>
        <trans-unit id="598292bc5270606189fdedc665ef492ceced68f0" translate="yes" xml:space="preserve">
          <source>The entire random number library architecture is derived from the excellent &lt;a href=&quot;http://open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2461.pdf&quot;&gt;C++0X&lt;/a&gt; random number facility proposed by Jens Maurer and contributed to by researchers at the Fermi laboratory (excluding Xorshift).</source>
          <target state="translated">乱数ライブラリアーキテクチャ全体は、Jens Maurerによって提案された優れた&lt;a href=&quot;http://open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2461.pdf&quot;&gt;C ++ 0X&lt;/a&gt;乱数機能から派生し、Fermi研究所の研究者（Xorshiftを除く）によって提供されました。</target>
        </trans-unit>
        <trans-unit id="694779fd846cde08f1b1e4968157c26de84e61a0" translate="yes" xml:space="preserve">
          <source>The entry point of this module is &lt;code&gt;traceHandlerOpApplyImpl&lt;/code&gt;, and the only really &quot;public&quot; symbol (since all &lt;code&gt;rt&lt;/code&gt; symbols are private). In the future, this implementation should probably be made idiomatic, so that it can for example work with attributes.</source>
          <target state="translated">このモジュールのエントリポイントは &lt;code&gt;traceHandlerOpApplyImpl&lt;/code&gt; であり、実際には「パブリック」シンボルのみです（すべての &lt;code&gt;rt&lt;/code&gt; シンボルがプライベートであるため）。将来的には、この実装はおそらく慣用的なものにして、たとえば属性を操作できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="888201d962022c79856dc1d83803a781978d38cd" translate="yes" xml:space="preserve">
          <source>The equality and inequality operators are treated separately because while practically all user-defined types can be compared for equality, only a subset of types have a meaningful ordering. For example, while it makes sense to determine if two RGB color vectors are equal, it is not meaningful to say that one color is greater than another, because colors do not have an ordering. Thus, one would define &lt;code&gt;opEquals&lt;/code&gt; for a &lt;code&gt;Color&lt;/code&gt; type, but not &lt;code&gt;opCmp&lt;/code&gt;.</source>
          <target state="translated">等価演算子と不等価演算子は別々に扱われます。これは、実質的にすべてのユーザー定義型を比較して同等かどうかを確認できる一方で、型のサブセットのみが意味のある順序を持っているためです。たとえば、2つのRGBカラーベクトルが等しいかどうかを判断することは理にかなっていますが、色には順序がないため、ある色が別の色よりも大きいと言っても意味がありません。したがって、 &lt;code&gt;Color&lt;/code&gt; タイプには &lt;code&gt;opEquals&lt;/code&gt; を定義しますが、opCmpは定義しませ &lt;code&gt;opCmp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b1ab6f47e6e402fb3a24bfb9f554e1d0036e9f7" translate="yes" xml:space="preserve">
          <source>The equivalent of member function pointers can be constructed using anonymous lambda functions:</source>
          <target state="translated">メンバ関数ポインタに相当するものは、匿名ラムダ関数を使用して構築することができます。</target>
        </trans-unit>
        <trans-unit id="b934e5ce8d172dbc9fefc885ad8f4ba875129f8a" translate="yes" xml:space="preserve">
          <source>The error message incase &lt;code&gt;version != D_TypeInfo&lt;/code&gt;</source>
          <target state="translated">エラーメッセージincase &lt;code&gt;version != D_TypeInfo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="74494fb82c47edd9793007790b8ec76ed5efb325" translate="yes" xml:space="preserve">
          <source>The error message to put in the exception if it is thrown.</source>
          <target state="translated">例外がスローされた場合のエラーメッセージ。</target>
        </trans-unit>
        <trans-unit id="ac179c7a25f054b9a84b196608bf4de9e907b671" translate="yes" xml:space="preserve">
          <source>The error number.</source>
          <target state="translated">エラー番号です。</target>
        </trans-unit>
        <trans-unit id="bb2bfcd8d277ad988cd58683c68c61867529b4d8" translate="yes" xml:space="preserve">
          <source>The escape sequences listed in &lt;a href=&quot;#EscapeSequence&quot;&gt;&lt;i&gt;EscapeSequence&lt;/i&gt;&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;#EscapeSequence&quot;&gt;&lt;i&gt;EscapeSequenceに&lt;/i&gt;&lt;/a&gt;リストされているエスケープシーケンスは&lt;i&gt;次のとおり&lt;/i&gt;です。</target>
        </trans-unit>
        <trans-unit id="813068399b629e54556fe2331c136edacd43967a" translate="yes" xml:space="preserve">
          <source>The escapes section is a series of substitutions which replace special characters with a string. It's useful when the output format requires escaping of certain characters, for example in HTML &lt;b&gt;&amp;amp;&lt;/b&gt; should be escaped with &lt;b&gt;&amp;amp;amp;&lt;/b&gt;.</source>
          <target state="translated">エスケープセクションは、特殊文字を文字列に置き換える一連の置換です。出力形式はHTMLで、たとえば、特定の文字のエスケープが必要な場合に便利です&lt;b&gt;＆&lt;/b&gt;でエスケープする必要があります&lt;b&gt;＆＃038; &lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="75a80775312b743d79dc5f0458ad6638745e66ff" translate="yes" xml:space="preserve">
          <source>The event handler that gets called to inform of upload/download progress.</source>
          <target state="translated">アップロード/ダウンロードの進捗状況を通知するために呼び出されるイベントハンドラ。</target>
        </trans-unit>
        <trans-unit id="28ee4bbd0a86e9401b5c283e4626c6777888197c" translate="yes" xml:space="preserve">
          <source>The event handler that gets called when data is needed for sending.</source>
          <target state="translated">データを送信するためにデータが必要なときに呼び出されるイベントハンドラです。</target>
        </trans-unit>
        <trans-unit id="ec0b1eb03ea092eed8857727c86d04dbd3bf6621" translate="yes" xml:space="preserve">
          <source>The event handler that gets called when data is needed for sending. The length of the &lt;code&gt;void[]&lt;/code&gt; specifies the maximum number of bytes that can be sent.</source>
          <target state="translated">送信にデータが必要なときに呼び出されるイベントハンドラー。 &lt;code&gt;void[]&lt;/code&gt; の長さは、送信できる最大バイト数を指定します。</target>
        </trans-unit>
        <trans-unit id="c126a38e12f3ea900a6ea7dfdda2e34138f69566" translate="yes" xml:space="preserve">
          <source>The event handler that gets called when the curl backend needs to seek the data to be sent.</source>
          <target state="translated">curl バックエンドが送信するデータをシークする必要があるときに呼び出されるイベント ハンドラ。</target>
        </trans-unit>
        <trans-unit id="c7e1c85c7ca7e98c1826ed981521b324453ed7c7" translate="yes" xml:space="preserve">
          <source>The event handler that gets called when the net socket has been created but a &lt;code&gt;connect()&lt;/code&gt; call has not yet been done. This makes it possible to set misc. socket options.</source>
          <target state="translated">ネットソケットが作成されたが、 &lt;code&gt;connect()&lt;/code&gt; 呼び出しがまだ行われていないときに呼び出されるイベントハンドラー。これにより、その他を設定できます。ソケットオプション。</target>
        </trans-unit>
        <trans-unit id="02f312ca0b7e961f5a4f5917e4aa7edb41e07360" translate="yes" xml:space="preserve">
          <source>The event handler that receives incoming data.</source>
          <target state="translated">受信データを受信するイベントハンドラ。</target>
        </trans-unit>
        <trans-unit id="b87e0289d3effbf7cf04a5f7cfbfced82cc1d3d4" translate="yes" xml:space="preserve">
          <source>The event handler that receives incoming data. Be sure to copy the incoming ubyte[] since it is not guaranteed to be valid after the callback returns.</source>
          <target state="translated">受信データを受信するイベントハンドラ。コールバックが戻ってきても有効であることが保証されていないため、必ず受信した ubyte[]をコピーするようにしてください。</target>
        </trans-unit>
        <trans-unit id="4c604b49f0361c7bde910df7da9e4d17ed0e24e3" translate="yes" xml:space="preserve">
          <source>The event handler that receives incoming headers for protocols that uses headers.</source>
          <target state="translated">ヘッダを使用するプロトコルの着信ヘッダを受信するイベントハンドラ。</target>
        </trans-unit>
        <trans-unit id="52a6be95e3d2f965951f9ddade7c43108c67742d" translate="yes" xml:space="preserve">
          <source>The event module provides a primitive for lightweight signaling of other threads (emulating Windows events on Posix)</source>
          <target state="translated">イベントモジュールは、他のスレッドへの軽量なシグナル伝達のためのプリミティブを提供します (Posix 上の Windows イベントをエミュレートします)。</target>
        </trans-unit>
        <trans-unit id="76cbd20f024df6b80d67a632d5c0a1a01fd91d83" translate="yes" xml:space="preserve">
          <source>The exact format is exactly as described in &lt;code&gt;toISOExtString&lt;/code&gt; except that trailing zeroes are permitted - including having fractional seconds with all zeroes. However, a decimal point with nothing following it is invalid. Also, while &lt;a href=&quot;#toISOExtString&quot;&gt;&lt;code&gt;toISOExtString&lt;/code&gt;&lt;/a&gt; will never generate a string with more than 7 digits in the fractional seconds (because that's the limit with hecto-nanosecond precision), it will allow more than 7 digits in order to read strings from other sources that have higher precision (however, any digits beyond 7 will be truncated).</source>
          <target state="translated">正確な形式は、末尾のゼロが許可されることを除いて、 &lt;code&gt;toISOExtString&lt;/code&gt; で説明されているとおりです（すべてゼロの小数秒を含む）。ただし、小数点のないものは無効です。また、&lt;a href=&quot;#toISOExtString&quot;&gt; &lt;code&gt;toISOExtString&lt;/code&gt; &lt;/a&gt;は小数秒に7桁を超える文字列を生成しませんが（これはヘクトナノ秒の精度の制限であるため）、より精度の高い他のソースから文字列を読み取るために7桁を超えることができます（ただし、7を超える桁は切り捨てられます）。</target>
        </trans-unit>
        <trans-unit id="dbfdac6af98f1a47c12d787fa314f16848732e36" translate="yes" xml:space="preserve">
          <source>The exact format is exactly as described in &lt;code&gt;toISOString&lt;/code&gt; except that trailing zeroes are permitted - including having fractional seconds with all zeroes. However, a decimal point with nothing following it is invalid. Also, while &lt;a href=&quot;#toISOString&quot;&gt;&lt;code&gt;toISOString&lt;/code&gt;&lt;/a&gt; will never generate a string with more than 7 digits in the fractional seconds (because that's the limit with hecto-nanosecond precision), it will allow more than 7 digits in order to read strings from other sources that have higher precision (however, any digits beyond 7 will be truncated).</source>
          <target state="translated">正確な形式は、末尾のゼロが許可されることを除いて、 &lt;code&gt;toISOString&lt;/code&gt; で説明されているとおりです（すべてゼロの小数秒を含む）。ただし、小数点のないものは無効です。また、&lt;a href=&quot;#toISOString&quot;&gt; &lt;code&gt;toISOString&lt;/code&gt; &lt;/a&gt;は小数秒に7桁を超える文字列を生成しませんが（これはヘクトナノ秒の精度の制限であるため）、より精度の高い他のソースから文字列を読み取るために7桁を超えることができます（ただし、7を超える桁は切り捨てられます）。</target>
        </trans-unit>
        <trans-unit id="8035aabeb60ff48fad9d3507168fac10a852f522" translate="yes" xml:space="preserve">
          <source>The exact format is exactly as described in &lt;code&gt;toSimpleString&lt;/code&gt; except that trailing zeroes are permitted - including having fractional seconds with all zeroes. However, a decimal point with nothing following it is invalid. Also, while &lt;a href=&quot;#toSimpleString&quot;&gt;&lt;code&gt;toSimpleString&lt;/code&gt;&lt;/a&gt; will never generate a string with more than 7 digits in the fractional seconds (because that's the limit with hecto-nanosecond precision), it will allow more than 7 digits in order to read strings from other sources that have higher precision (however, any digits beyond 7 will be truncated).</source>
          <target state="translated">正確な形式は、末尾のゼロが許可されることを除いて、 &lt;code&gt;toSimpleString&lt;/code&gt; で説明されているとおりです（すべてゼロの小数秒を含む）。ただし、小数点のないものは無効です。また、&lt;a href=&quot;#toSimpleString&quot;&gt; &lt;code&gt;toSimpleString&lt;/code&gt; &lt;/a&gt;は小数秒に7桁を超える文字列を生成しませんが（これはヘクトナノ秒の精度の制限であるため）、より高い精度を持つ他のソースから文字列を読み取るために7桁を超えることができます（ただし、7を超える桁は切り捨てられます）。</target>
        </trans-unit>
        <trans-unit id="65836ccc655a37d33dfc806f525851b4dc381228" translate="yes" xml:space="preserve">
          <source>The example above creates a tagged pointer in the struct A. The pointer is of type &lt;code&gt;uint*&lt;/code&gt; as specified by the first argument, and is named x, as specified by the second argument.</source>
          <target state="translated">上記の例では、構造体Aにタグ付きポインターを作成します。ポインターは、最初の引数で指定されている &lt;code&gt;uint*&lt;/code&gt; 型で、2番目の引数で指定されているxという名前です。</target>
        </trans-unit>
        <trans-unit id="a8289a8de27bbcdd9e4b7b9885e6899b4349a782" translate="yes" xml:space="preserve">
          <source>The example above creates a tagged reference to an Object in the struct A. This expects the same parameters as &lt;code&gt;taggedPointer&lt;/code&gt;, except the first argument which must be a class type instead of a pointer type.</source>
          <target state="translated">上記の例では、構造体Aのオブジェクトへのタグ付き参照を作成します。これは、ポインター型ではなくクラス型でなければならない最初の引数を除いて、 &lt;code&gt;taggedPointer&lt;/code&gt; と同じパラメーターを想定しています。</target>
        </trans-unit>
        <trans-unit id="95c0102684861c4577b62ad69eb70ff34b2390d6" translate="yes" xml:space="preserve">
          <source>The example above wreaks havoc on client code because it is modifying arrays that callers considered immutable. To obtain an immutable array from the writable array &lt;code&gt;buffer&lt;/code&gt;, replace the last line with:</source>
          <target state="translated">上記の例は、呼び出し元が不変であると見なした配列を変更するため、クライアントコードに大混乱をもたらします。書き込み可能な配列 &lt;code&gt;buffer&lt;/code&gt; から不変の配列を取得するには、最後の行を次のように置き換えます。</target>
        </trans-unit>
        <trans-unit id="399a22d99c9e7b3b5ee30ddef81ec062aec6bdce" translate="yes" xml:space="preserve">
          <source>The example below features an allocator modeled after &lt;a href=&quot;http://goo.gl/m7329l&quot;&gt;jemalloc&lt;/a&gt;, which uses a battery of free-list allocators spaced so as to keep internal fragmentation to a minimum. The &lt;code&gt;FList&lt;/code&gt; definitions specify no bounds for the freelist because the &lt;code&gt;Segregator&lt;/code&gt; does all size selection in advance.</source>
          <target state="translated">以下の例は、内部の断片化を最小限に抑えるために間隔を空けて配置された一連のフリーリストアロケータを使用する&lt;a href=&quot;http://goo.gl/m7329l&quot;&gt;jemallocを&lt;/a&gt;モデルにしたアロケータを特徴としています。 &lt;code&gt;FList&lt;/code&gt; ための定義は、空きリストのための境界を指定しない &lt;code&gt;Segregator&lt;/code&gt; は、事前にすべてのサイズの選択を行います。</target>
        </trans-unit>
        <trans-unit id="e7e36cfec3178137ce69212f870f1fab248ea421" translate="yes" xml:space="preserve">
          <source>The example below features an allocator modeled after &lt;a href=&quot;https://goo.gl/m7329l&quot;&gt;jemalloc&lt;/a&gt;, which uses a battery of free-list allocators spaced so as to keep internal fragmentation to a minimum. The &lt;code&gt;FList&lt;/code&gt; definitions specify no bounds for the freelist because the &lt;code&gt;Segregator&lt;/code&gt; does all size selection in advance.</source>
          <target state="translated">以下の例は、&lt;a href=&quot;https://goo.gl/m7329l&quot;&gt;jemallocを&lt;/a&gt;モデルにしたアロケーターを特徴としています。これは、内部の断片化を最小限に抑えるように間隔を空けて配置されたフリーリストアロケーターのバッテリーを使用します。 &lt;code&gt;FList&lt;/code&gt; ための定義は、空きリストのための境界を指定しない &lt;code&gt;Segregator&lt;/code&gt; は、事前にすべてのサイズの選択を行います。</target>
        </trans-unit>
        <trans-unit id="03c82011a176c73b7fd2e55e8d4ca5d5e5bc2671" translate="yes" xml:space="preserve">
          <source>The example sets a new &lt;code&gt;FileLogger&lt;/code&gt; as new &lt;code&gt;sharedLog&lt;/code&gt;.  If at some point you want to use the original default logger again, you can use &lt;code&gt;sharedLog = null;&lt;/code&gt;. This will put back the original.</source>
          <target state="translated">この例では、新しい &lt;code&gt;FileLogger&lt;/code&gt; を新しい &lt;code&gt;sharedLog&lt;/code&gt; として設定します。ある時点で元のデフォルトのロガーを再び使用したい場合は、 &lt;code&gt;sharedLog = null;&lt;/code&gt; 使用できます。。これで元に戻ります。</target>
        </trans-unit>
        <trans-unit id="ad582bc954e72accfcbe7e749d32e98547d0b17c" translate="yes" xml:space="preserve">
          <source>The exception module defines all system-level exceptions and provides a mechanism to alter system-level error handling.</source>
          <target state="translated">例外モジュールは、すべてのシステムレベルの例外を定義し、システムレベルのエラー処理を変更するメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="7a6c8dd2c388cd128d91f81fff3c160065b3f34b" translate="yes" xml:space="preserve">
          <source>The exception thrown during finalization.</source>
          <target state="translated">確定処理中にスローされた例外。</target>
        </trans-unit>
        <trans-unit id="9e6c1b1caa6f537b3b32ae230a3319f2a84949f0" translate="yes" xml:space="preserve">
          <source>The exception to throw if the value evaluates to false.</source>
          <target state="translated">値が false と評価された場合に投げる例外。</target>
        </trans-unit>
        <trans-unit id="10d46feeb5a300f1f28f6d3818a7a14193d2059d" translate="yes" xml:space="preserve">
          <source>The expanded data.</source>
          <target state="translated">拡張されたデータ。</target>
        </trans-unit>
        <trans-unit id="cbc3d84209a76290f33343978e317c76e214fa4c" translate="yes" xml:space="preserve">
          <source>The exponent is negative and the factor is one, i.e., output[j] := sum[ exp(-2 PI i j k / N) input[k] ].</source>
          <target state="translated">指数が負で係数が1の場合、すなわち、output[j]:=sum[exp(-2 PI i j k/N)input[k]]となります。</target>
        </trans-unit>
        <trans-unit id="08786360cdc12838546c00b5767cf2cab959b50c" translate="yes" xml:space="preserve">
          <source>The exponent is positive and the factor is 1/N, i.e., output[j] := (1 / N) sum[ exp(+2 PI i j k / N) input[k] ].</source>
          <target state="translated">指数は正で、因子は1/N、すなわち、output[j]:=(1/N)sum[exp(+2 PI i j k/N)input[k]]である。</target>
        </trans-unit>
        <trans-unit id="c871c5d07aafe7ec6925f7e7fae1500b032e2b52" translate="yes" xml:space="preserve">
          <source>The expression and the errorHandler must have a common type they can both be implicitly casted to, and that type will be the type of the compound expression.</source>
          <target state="translated">式とerrorHandlerは、両方とも暗黙的にキャストできる共通の型を持つ必要があり、その型が複合式の型になります。</target>
        </trans-unit>
        <trans-unit id="34375c5ee3f5635a2e38da6b0e76fc609894c573" translate="yes" xml:space="preserve">
          <source>The expression asserted not to throw.</source>
          <target state="translated">投げないことを主張した表現。</target>
        </trans-unit>
        <trans-unit id="940dd3375faca27ce190b8fb03def99092a3aab1" translate="yes" xml:space="preserve">
          <source>The expression form is:</source>
          <target state="translated">表現形式です。</target>
        </trans-unit>
        <trans-unit id="cc54de17f165e5e9a2ba7fa962f4eecaa39f90b2" translate="yes" xml:space="preserve">
          <source>The expression is evaluated.</source>
          <target state="translated">式が評価されます。</target>
        </trans-unit>
        <trans-unit id="22a556158ebfbc64522a677428ab0391c34f8183" translate="yes" xml:space="preserve">
          <source>The expression that copy constructs or moves the value.</source>
          <target state="translated">コピーする式は、値を構築したり移動させたりします。</target>
        </trans-unit>
        <trans-unit id="91f707cf0e8e3128051036fb96ff3b7693733b1d" translate="yes" xml:space="preserve">
          <source>The expression to resolve as type or symbol.</source>
          <target state="translated">型や記号として解決する式。</target>
        </trans-unit>
        <trans-unit id="29c4204e99277952fc7a54ab66543bc42d61a803" translate="yes" xml:space="preserve">
          <source>The expression to run and return its result.</source>
          <target state="translated">実行して結果を返す式。</target>
        </trans-unit>
        <trans-unit id="92d0bb2bd94dd52b7503e678d48be02f028860ef" translate="yes" xml:space="preserve">
          <source>The expression to test.</source>
          <target state="translated">テストするための表現。</target>
        </trans-unit>
        <trans-unit id="3ba5f3fe8e3c4ad3783ea96faee9ce1e4526ddb4" translate="yes" xml:space="preserve">
          <source>The expression which may throw an exception.</source>
          <target state="translated">例外を投げる可能性のある式。</target>
        </trans-unit>
        <trans-unit id="646fe39033d4569a34021185a6750173a3852965" translate="yes" xml:space="preserve">
          <source>The expression:</source>
          <target state="translated">表現です。</target>
        </trans-unit>
        <trans-unit id="24968438ed1fc3f9aa123f08e882cf9dcb629a30" translate="yes" xml:space="preserve">
          <source>The extension part of a file name, including the dot.  If there is no extension, &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="translated">ドットを含む、ファイル名の拡張子部分。拡張子がない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="001c41a8faed92276e0710e5f77bacf1f43befe9" translate="yes" xml:space="preserve">
          <source>The extra *'s and +'s on the comment opening, closing and left margin are ignored and are not part of the embedded documentation. Comments not following one of those forms are not documentation comments.</source>
          <target state="translated">コメントの開始、終了、左マージンにある余分な*と+は無視され、埋め込まれたドキュメントの一部ではありません。これらのフォームのいずれかに従っていないコメントはドキュメントのコメントではありません。</target>
        </trans-unit>
        <trans-unit id="60cbf9a8b6c782eeaf3b240238aaad4006024e93" translate="yes" xml:space="preserve">
          <source>The factory should print an error and abort the program if it cannot successfully initialize the GC instance.</source>
          <target state="translated">ファクトリーは、GC インスタンスを正常に初期化できない場合、エラーを表示してプログラムを中止する必要があります。</target>
        </trans-unit>
        <trans-unit id="f5a2d7b1faf4a00e391206a0b6d040b1dd55f507" translate="yes" xml:space="preserve">
          <source>The fallback allocator.</source>
          <target state="translated">フォールバックアロケータです。</target>
        </trans-unit>
        <trans-unit id="6444c34b4999b63334e3fe1c10565688c176440d" translate="yes" xml:space="preserve">
          <source>The fiber function.</source>
          <target state="translated">ファイバー機能です。</target>
        </trans-unit>
        <trans-unit id="c0e4569946778edcb0cfe73790a6deb0f483408e" translate="yes" xml:space="preserve">
          <source>The fiber module provides OS-indepedent lightweight threads aka fibers.</source>
          <target state="translated">ファイバーモジュールは、OSインデペンデントの軽量スレッド、別名ファイバーを提供します。</target>
        </trans-unit>
        <trans-unit id="4ebf4ba0f41676101df65de78d14565377976d26" translate="yes" xml:space="preserve">
          <source>The fiber object representing the calling fiber or null if no fiber is currently active within this thread. The result of deleting this object is undefined.</source>
          <target state="translated">呼び出し中のファイバーを表すファイバー・オブジェクト、またはこのスレッド内で現在アクティブなファイバーがない場合は null。このオブジェクトを削除した結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="7163e2b220c5c73c7ee35da99996a1282317d054" translate="yes" xml:space="preserve">
          <source>The field is ended when there is no input, even if the quote was not closed.</source>
          <target state="translated">引用符が閉じられていなくても、入力がなかった場合はフィールドが終了します。</target>
        </trans-unit>
        <trans-unit id="779d09c98e4cfcdaab8d2edfcd062b2bc1c5fe62" translate="yes" xml:space="preserve">
          <source>The fields below this were added in CURLVERSION_SECOND</source>
          <target state="translated">これ以下のフィールドはCURLVERSION_SECONDで追加されました。</target>
        </trans-unit>
        <trans-unit id="7fb4d8eebf35f6bbc1f833a412d5cc7420dea229" translate="yes" xml:space="preserve">
          <source>The file (or directory) to get a DirEntry for.</source>
          <target state="translated">DirEntry を取得するファイル (またはディレクトリ)。</target>
        </trans-unit>
        <trans-unit id="40dabb9eb8e81154153036d71178601514e1f7f3" translate="yes" xml:space="preserve">
          <source>The file and line of the call.</source>
          <target state="translated">呼び出しのファイルと行を指定します。</target>
        </trans-unit>
        <trans-unit id="e2f6f4f187fd62357491cbe8478aa3ae4cefb31e" translate="yes" xml:space="preserve">
          <source>The file attributes or 0 if the file attributes were encoded for an incompatible OS (Windows vs. POSIX).</source>
          <target state="translated">ファイルの属性、またはファイルの属性が互換性のないOS(Windows vs.POSIX)用にエンコードされている場合は0。</target>
        </trans-unit>
        <trans-unit id="2587d80da404ef88f56c1d45c26f059538ee948c" translate="yes" xml:space="preserve">
          <source>The file attributes or 0 if the file attributes were encoded for an incompatible OS (Windows vs. Posix).</source>
          <target state="translated">ファイルの属性、またはファイルの属性が互換性のないOS(Windows vs.Posix)用にエンコードされている場合は0。</target>
        </trans-unit>
        <trans-unit id="f357296885e979c9eb815032610719a979731bd8" translate="yes" xml:space="preserve">
          <source>The file attributes.</source>
          <target state="translated">ファイルの属性です。</target>
        </trans-unit>
        <trans-unit id="f692a5a95eb19a88be916cc17fd3a299fdb0b4c2" translate="yes" xml:space="preserve">
          <source>The file data in compressed form.</source>
          <target state="translated">ファイルデータを圧縮したもの。</target>
        </trans-unit>
        <trans-unit id="11cc9842d65b87247a394d2db23ff2854dbd2625" translate="yes" xml:space="preserve">
          <source>The file data.</source>
          <target state="translated">ファイルデータです。</target>
        </trans-unit>
        <trans-unit id="21cf4d39fea8701f9ccea1f6e9c33a8dca629be0" translate="yes" xml:space="preserve">
          <source>The file name of the D source code corresponding with where the error was thrown from.</source>
          <target state="translated">エラーがスローされた場所に対応するDソースコードのファイル名。</target>
        </trans-unit>
        <trans-unit id="b64522363b929d137710605ff07b8daf334bc620" translate="yes" xml:space="preserve">
          <source>The file name to show. If not set, the actual file name will be used (if this is a file part)</source>
          <target state="translated">表示するファイル名。設定されていない場合は、実際のファイル名が使用されます (これがファイルの一部である場合)。</target>
        </trans-unit>
        <trans-unit id="bf8ad1ee8706b576c3d861ca4c35b04004625b5d" translate="yes" xml:space="preserve">
          <source>The file names for packages and modules should also be composed of the ASCII characters lower case letters, digits or &lt;code&gt;_&lt;/code&gt; and should not be a &lt;a href=&quot;lex#Keyword&quot;&gt;&lt;i&gt;Keyword&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">パッケージおよびモジュールのファイル名も、ASCII文字の小文字、数字、または &lt;code&gt;_&lt;/code&gt; で構成する必要があります。&lt;a href=&quot;lex#Keyword&quot;&gt;&lt;i&gt;キーワードにする&lt;/i&gt;&lt;/a&gt;ことはできません。</target>
        </trans-unit>
        <trans-unit id="568163d3852e8f82e9cc9864a262f9868cd7a80a" translate="yes" xml:space="preserve">
          <source>The file names for packages and modules should be composed only of the ASCII lower case letters, digits, and &lt;code&gt;_&lt;/code&gt;s, and should not be a &lt;a href=&quot;lex#Keyword&quot;&gt;&lt;i&gt;Keyword&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">パッケージとモジュールのファイル名は、ASCIIの小文字、数字、および &lt;code&gt;_&lt;/code&gt; のみで構成する必要があり、&lt;a href=&quot;lex#Keyword&quot;&gt;&lt;i&gt;キーワードであって&lt;/i&gt;&lt;/a&gt;はなりません。</target>
        </trans-unit>
        <trans-unit id="27e521d84e71e057af31f6b16036a8dda6098775" translate="yes" xml:space="preserve">
          <source>The file that is being linked. This is the target path that's stored in the symlink. A relative path is relative to the created symlink.</source>
          <target state="translated">リンクされているファイル。シンボリックリンクに格納されているターゲットパスです。相対パスは、作成されたシンボリックリンクからの相対パスです。</target>
        </trans-unit>
        <trans-unit id="a48d130bf6ed7fe001b9b68c13bd4356b06eb640" translate="yes" xml:space="preserve">
          <source>The file that the &lt;a href=&quot;#DateTimeException&quot;&gt;&lt;code&gt;DateTimeException&lt;/code&gt;&lt;/a&gt; will list if thrown.</source>
          <target state="translated">スローされた場合に&lt;a href=&quot;#DateTimeException&quot;&gt; &lt;code&gt;DateTimeException&lt;/code&gt; &lt;/a&gt;がリストするファイル。</target>
        </trans-unit>
        <trans-unit id="886ddc5df982fa3a52b4dae1cc5e097e3fae8531" translate="yes" xml:space="preserve">
          <source>The file to get the attributes of.</source>
          <target state="translated">の属性を取得するファイルです。</target>
        </trans-unit>
        <trans-unit id="c5856ac3b9ed35958ce9f401bbff0c265bcd66da" translate="yes" xml:space="preserve">
          <source>The file to get the symbolic link attributes of.</source>
          <target state="translated">シンボリックリンク属性を取得するファイル。</target>
        </trans-unit>
        <trans-unit id="d5a902223a6a641c14dbfbc008db96721d6af330" translate="yes" xml:space="preserve">
          <source>The file used for logging.</source>
          <target state="translated">ロギングに使用するファイルです。</target>
        </trans-unit>
        <trans-unit id="f7969ce864cdb7d64da59da6dfc8b40cf28ba7bb" translate="yes" xml:space="preserve">
          <source>The file where the error occurred.</source>
          <target state="translated">エラーが発生したファイル。</target>
        </trans-unit>
        <trans-unit id="3ff1fcb05fd162b545299ba30ad59377c1eb86a5" translate="yes" xml:space="preserve">
          <source>The file where the error occurred. Defaults to &lt;code&gt;__FILE__&lt;/code&gt;.</source>
          <target state="translated">エラーが発生したファイル。デフォルトは &lt;code&gt;__FILE__&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9a7b4c097e4526bdecb31861d25a87231f1a612b" translate="yes" xml:space="preserve">
          <source>The file where the exception occurred.</source>
          <target state="translated">例外が発生したファイル。</target>
        </trans-unit>
        <trans-unit id="2a8a857ec47a034acf4c2fcaed0de229c31869d5" translate="yes" xml:space="preserve">
          <source>The filename of the &lt;code&gt;File&lt;/code&gt; log messages are written to.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; ログメッセージのファイル名が書き込まれます。</target>
        </trans-unit>
        <trans-unit id="37dc45c1af7cba50c135f406c906822e95a5938d" translate="yes" xml:space="preserve">
          <source>The filename of the output file of the &lt;code&gt;FileLogger&lt;/code&gt;. If that file can not be opened for writting an exception will be thrown.</source>
          <target state="translated">&lt;code&gt;FileLogger&lt;/code&gt; の出力ファイルのファイル名。書き込みのためにそのファイルを開くことができない場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="3910614447549528bc2d2fc1be565210c1526e11" translate="yes" xml:space="preserve">
          <source>The finish function returns the final hash sum and resets the Digest.</source>
          <target state="translated">finish関数は最終的なハッシュサムを返し、ダイジェストをリセットします。</target>
        </trans-unit>
        <trans-unit id="133d5dd83ff02e493d05a0e47c1deb319a8252d7" translate="yes" xml:space="preserve">
          <source>The finish function returns the hash value. It takes an optional buffer to copy the data into. If a buffer is passed, it must be at least &lt;a href=&quot;#length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; bytes big.</source>
          <target state="translated">finish関数はハッシュ値を返します。データのコピー先となるオプションのバッファが必要です。バッファが渡される場合、それは少なくとも&lt;a href=&quot;#length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;バイトの大きさでなければなりません。</target>
        </trans-unit>
        <trans-unit id="22bbeb22c4ba0a11e694a3fb88ce4ce66c1aa8c4" translate="yes" xml:space="preserve">
          <source>The finish function returns the hash value. It takes an optional buffer to copy the data into. If a buffer is passed, it must have a length at least &lt;a href=&quot;#length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; bytes.</source>
          <target state="translated">finish関数はハッシュ値を返します。データのコピー先となるオプションのバッファが必要です。バッファが渡される場合、バッファには少なくとも&lt;a href=&quot;#length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;バイトの長さが必要です。</target>
        </trans-unit>
        <trans-unit id="957dc77c438abefa8c77eaf7563108a790ce4d94" translate="yes" xml:space="preserve">
          <source>The first</source>
          <target state="translated">最初の</target>
        </trans-unit>
        <trans-unit id="fb47524b87677bd448123bb56b7daf118be97145" translate="yes" xml:space="preserve">
          <source>The first &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; is evaluated at compile time, and converted to a boolean value. If the value is true, the static assert is ignored. If the value is false, an error diagnostic is issued and the compile fails.</source>
          <target state="translated">最初の&lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;はコンパイル時に評価され、ブール値に変換されます。値がtrueの場合、静的アサートは無視されます。値がfalseの場合、エラー診断が発行され、コンパイルは失敗します。</target>
        </trans-unit>
        <trans-unit id="a33576b80d4f4e8bd604397c308091bd4d49eeac" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;Exception&lt;/code&gt; which was bypassed when this Error was thrown, or &lt;code&gt;null&lt;/code&gt; if no &lt;code&gt;Exception&lt;/code&gt;s were pending.</source>
          <target state="translated">このエラーがスローされたときにバイパスされた最初の &lt;code&gt;Exception&lt;/code&gt; 。保留中の &lt;code&gt;Exception&lt;/code&gt; がない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="83bd533ac7ce9ad8a841e8cf9ee5bfbb37b7a8f6" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;v1&lt;/code&gt; for which &lt;code&gt;v1 &amp;gt; v2&lt;/code&gt; is true determines the result. This could lead to unexpected behaviour.</source>
          <target state="translated">&lt;code&gt;v1 &amp;gt; v2&lt;/code&gt; が真である最初の &lt;code&gt;v1&lt;/code&gt; が結果を決定します。これにより、予期しない動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ba9501cbc71e13c8461adcfc7cfb46ad49a3228f" translate="yes" xml:space="preserve">
          <source>The first argument for the predicate.</source>
          <target state="translated">述語の第一引数。</target>
        </trans-unit>
        <trans-unit id="d76b59c9568cb4d5adeddeb8e61ac34ba34641de" translate="yes" xml:space="preserve">
          <source>The first argument is a class type or an expression of class type. The second argument is a string that matches the name of one of the functions of that class. The result is a tuple of the virtual overloads of that function. It does not include final functions that do not override anything.</source>
          <target state="translated">第 1 引数は、クラス型またはクラス型の式です。第二引数は、そのクラスの関数名にマッチする文字列です。結果は、その関数の仮想オーバーロードのタプルとなります。何もオーバーライドしない最終関数は含まれません。</target>
        </trans-unit>
        <trans-unit id="dd726d5af5bf0120b5bd49b63370601b230f8cd3" translate="yes" xml:space="preserve">
          <source>The first argument is a type that has members, or is an expression of a type that has members. The second argument is a string. If the string is a valid property of the type, &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">最初の引数は、メンバーを持つ型、またはメンバーを持つ型の式です。2番目の引数は文字列です。文字列が型の有効なプロパティである &lt;code&gt;true&lt;/code&gt; はtrueが返され、それ以外の場合は &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="1a43e4ec8b9b76809401c1e8287827f1c5ded36c" translate="yes" xml:space="preserve">
          <source>The first argument is an aggregate (e.g. struct/class/module). The second argument is a &lt;code&gt;string&lt;/code&gt; that matches the name of the member(s) to return. The third argument is a &lt;code&gt;bool&lt;/code&gt;, and is optional. If &lt;code&gt;true&lt;/code&gt;, the result will also include template overloads. The result is a tuple of all the overloads of the supplied name.</source>
          <target state="translated">最初の引数は集約です（例：struct / class / module）。2番目の引数は、返すメンバーの名前と一致する &lt;code&gt;string&lt;/code&gt; です。3番目の引数は &lt;code&gt;bool&lt;/code&gt; で、オプションです。場合は &lt;code&gt;true&lt;/code&gt; 、結果はまた、テンプレートのオーバーロードが含まれます。結果は、指定された名前のすべてのオーバーロードのタプルです。</target>
        </trans-unit>
        <trans-unit id="2a174554ed3bb0d11c52209ee3ed7c598d6bcaa6" translate="yes" xml:space="preserve">
          <source>The first argument of &lt;code&gt;Checked&lt;/code&gt;, e.g. &lt;code&gt;int&lt;/code&gt; if the left-hand side of the operator is &lt;code&gt;Checked!int&lt;/code&gt;</source>
          <target state="translated">最初の引数 &lt;code&gt;Checked&lt;/code&gt; 例えば、 &lt;code&gt;int&lt;/code&gt; 型演算子の左側がされた場合に &lt;code&gt;Checked!int&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8841f05f16f8289043fb3adb8a0d9f6c62e9f3bb" translate="yes" xml:space="preserve">
          <source>The first argument that passes the test &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">テスト &lt;code&gt;pred&lt;/code&gt; に合格する最初の引数。</target>
        </trans-unit>
        <trans-unit id="6f69babce0033893a00ba9dd4fdded8c5d91d428" translate="yes" xml:space="preserve">
          <source>The first argument to apply to &lt;code&gt;fun&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; に適用する最初の引数</target>
        </trans-unit>
        <trans-unit id="5e0881d9245470375fca9c2a63d7fd75c1ab511d" translate="yes" xml:space="preserve">
          <source>The first array to compare</source>
          <target state="translated">比較する最初の配列</target>
        </trans-unit>
        <trans-unit id="6402ea9c3911f868771a9ad2ee306a3ff47b76c7" translate="yes" xml:space="preserve">
          <source>The first choice that &lt;code&gt;switchObject&lt;/code&gt; can be casted to the type of argument it accepts will be called with &lt;code&gt;switchObject&lt;/code&gt; casted to that type, and the value it'll return will be returned by &lt;code&gt;castSwitch&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;switchObject&lt;/code&gt; が受け入れる引数の型にキャストできる最初の選択肢は、その型にキャストされた &lt;code&gt;switchObject&lt;/code&gt; で呼び出され、返される値は &lt;code&gt;castSwitch&lt;/code&gt; によって返されます。</target>
        </trans-unit>
        <trans-unit id="8c0a3698b1be7dcab735cd7cac7d279e510c1569" translate="yes" xml:space="preserve">
          <source>The first element of the array is the size of the type (for classes it is the &lt;a href=&quot;#classInstanceSize&quot;&gt;&lt;i&gt;classInstanceSize&lt;/i&gt;&lt;/a&gt;).</source>
          <target state="translated">配列の最初の要素は型のサイズです（クラスの場合は&lt;a href=&quot;#classInstanceSize&quot;&gt;&lt;i&gt;classInstanceSizeです&lt;/i&gt;&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d156d92ea93ea0bd49c4929ebca8565a10591e92" translate="yes" xml:space="preserve">
          <source>The first element of the array.</source>
          <target state="translated">配列の最初の要素。</target>
        </trans-unit>
        <trans-unit id="d8e16b70885d5121ddc9494a6960e6bb4c96cb43" translate="yes" xml:space="preserve">
          <source>The first expression is converted to &lt;code&gt;bool&lt;/code&gt;, and is evaluated.</source>
          <target state="translated">最初の式は &lt;code&gt;bool&lt;/code&gt; に変換され、評価されます。</target>
        </trans-unit>
        <trans-unit id="cf9e5f533fce6e846463f393ddd35d42bb1f1cd6" translate="yes" xml:space="preserve">
          <source>The first field in the input</source>
          <target state="translated">入力の最初のフィールド</target>
        </trans-unit>
        <trans-unit id="d4d950398e4d3043c7b4cad357808ae2f4342dfd" translate="yes" xml:space="preserve">
          <source>The first form attaches the &lt;code&gt;return&lt;/code&gt; to the &lt;code&gt;scope&lt;/code&gt;, and has &lt;a href=&quot;#return-scope-parameters&quot;&gt;return scope parameter&lt;/a&gt; semantics for the value of the &lt;code&gt;ref&lt;/code&gt; parameter.</source>
          <target state="translated">最初の形態は添付 &lt;code&gt;return&lt;/code&gt; に &lt;code&gt;scope&lt;/code&gt; 、そして有する&lt;a href=&quot;#return-scope-parameters&quot;&gt;リターン範囲パラメータ&lt;/a&gt;の値のセマンティクス &lt;code&gt;ref&lt;/code&gt; パラメータ。</target>
        </trans-unit>
        <trans-unit id="8b1ce77e77b315411f0f72483fe564f04bb631f4" translate="yes" xml:space="preserve">
          <source>The first function</source>
          <target state="translated">最初の関数</target>
        </trans-unit>
        <trans-unit id="f3024cc5ecfa3c08bdbe44b263a51764ec97fd6f" translate="yes" xml:space="preserve">
          <source>The first member of the &lt;code&gt;vtbl[]&lt;/code&gt; is not the pointer to the &lt;code&gt;Interface&lt;/code&gt;, but the first virtual function pointer.</source>
          <target state="translated">&lt;code&gt;vtbl[]&lt;/code&gt; の最初のメンバーは、 &lt;code&gt;Interface&lt;/code&gt; へのポインターではなく、最初の仮想関数ポインターです。</target>
        </trans-unit>
        <trans-unit id="847d6d02e0c1f522b786c8972c9a6146a642fa90" translate="yes" xml:space="preserve">
          <source>The first member of the &lt;code&gt;vtbl[]&lt;/code&gt; is not the pointer to the InterfaceInfo, but the first virtual function pointer.</source>
          <target state="translated">&lt;code&gt;vtbl[]&lt;/code&gt; の最初のメンバーは、InterfaceInfoへのポインターではなく、最初の仮想関数ポインターです。</target>
        </trans-unit>
        <trans-unit id="c2d2ce897245ef2180a0c50b1783471cf2be4244" translate="yes" xml:space="preserve">
          <source>The first overload exists only if &lt;code&gt;autoInit == RefCountedAutoInitialize.yes&lt;/code&gt;. So if &lt;code&gt;autoInit == RefCountedAutoInitialize.no&lt;/code&gt; or called for a constant or immutable object, then &lt;code&gt;refCountedPayload&lt;/code&gt; will also be qualified as safe and nothrow (but will still assert if not initialized).</source>
          <target state="translated">最初のオーバーロードは、 &lt;code&gt;autoInit == RefCountedAutoInitialize.yes&lt;/code&gt; 場合にのみ存在します。したがって、 &lt;code&gt;autoInit == RefCountedAutoInitialize.no&lt;/code&gt; 呼び出されるか、定数または不変オブジェクトに対して呼び出された場合、 &lt;code&gt;refCountedPayload&lt;/code&gt; も安全かつ非スローとして修飾されます（ただし、初期化されていない場合でもアサートされます）。</target>
        </trans-unit>
        <trans-unit id="dfd8266058456fb8b44a614fe1b78098bba5c6d8" translate="yes" xml:space="preserve">
          <source>The first overload of &lt;code&gt;makeIndex&lt;/code&gt; writes to a range containing pointers, and the second writes to a range containing offsets. The first overload requires &lt;code&gt;Range&lt;/code&gt; to be a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt;, and the latter requires it to be a random-access range.</source>
          <target state="translated">&lt;code&gt;makeIndex&lt;/code&gt; の最初のオーバーロードはポインターを含む範囲に書き込み、2番目のオーバーロードはオフセットを含む範囲に書き込みます。最初のオーバーロードでは &lt;code&gt;Range&lt;/code&gt; が&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt;である必要があり、後者はランダムアクセス範囲である必要があります。</target>
        </trans-unit>
        <trans-unit id="2797f8bab40930285c67d69e0f78f4ff6b12f672" translate="yes" xml:space="preserve">
          <source>The first overload of this function will return &lt;code&gt;T.init&lt;/code&gt; if the range is empty. However, the second overload will return &lt;code&gt;seed&lt;/code&gt; on empty ranges.</source>
          <target state="translated">この関数の最初のオーバーロードは、範囲が空の場合に &lt;code&gt;T.init&lt;/code&gt; を返します。ただし、2番目のオーバーロードは空の範囲で &lt;code&gt;seed&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fa15d56dc093902b6572dae74b23ea12e4df8659" translate="yes" xml:space="preserve">
          <source>The first part is done automatically by the language, the second part is done if a postblit function is defined for the struct. The postblit has access only to the destination struct object, not the source. Its job is to &amp;lsquo;fix up&amp;rsquo; the destination as necessary, such as making copies of referenced data, incrementing reference counts, etc. For example:</source>
          <target state="translated">最初の部分は言語によって自動的に行われ、2番目の部分は構造体にポストブリット関数が定義されている場合に行われます。postblitは、ソースではなく、宛先の構造体オブジェクトにのみアクセスできます。その仕事は、参照データのコピーの作成、参照カウントの増分など、必要に応じて宛先を「修正」することです。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="b6a25e3471beef6bed20eb948a4b0de3cefb170f" translate="yes" xml:space="preserve">
          <source>The first part of the desired time zones.</source>
          <target state="translated">希望する時間帯の最初の部分。</target>
        </trans-unit>
        <trans-unit id="f479a5f1dc2ec5b3e8f93d2c246a61132b592fa7" translate="yes" xml:space="preserve">
          <source>The first range</source>
          <target state="translated">最初の範囲</target>
        </trans-unit>
        <trans-unit id="978014a33cbc746b950a93b0f0736f4203ea8def" translate="yes" xml:space="preserve">
          <source>The first range to be compared.</source>
          <target state="translated">最初に比較する範囲。</target>
        </trans-unit>
        <trans-unit id="ca9cc691843153958d1dfce3f9f135428053bc03" translate="yes" xml:space="preserve">
          <source>The first range.</source>
          <target state="translated">最初のレンジ。</target>
        </trans-unit>
        <trans-unit id="376b0679101f4b59ef8dcfe360d9831914d2f062" translate="yes" xml:space="preserve">
          <source>The first section is the</source>
          <target state="translated">最初のセクションは</target>
        </trans-unit>
        <trans-unit id="0a2ac8281c00878fb6aeb93d4c1aa8543d1c7cdd" translate="yes" xml:space="preserve">
          <source>The first template argument is the size of the region and the second is the needed alignment. Depending on the alignment requested and platform details, the actual available storage may be smaller than the compile-time parameter. To make sure that at least &lt;code&gt;n&lt;/code&gt; bytes are available in the region, use &lt;code&gt;InSituRegion!(n + a - 1, a)&lt;/code&gt;.</source>
          <target state="translated">最初のテンプレート引数は領域のサイズで、2番目は必要な配置です。要求されたアライメントとプラットフォームの詳細に応じて、実際に使用可能なストレージはコンパイル時パラメーターよりも小さくなる場合があります。リージョンで少なくとも &lt;code&gt;n&lt;/code&gt; バイトが使用可能であることを確認するには、 &lt;code&gt;InSituRegion!(n + a - 1, a)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f09dcfe52dd359d217c384efcd5e2b579c11d4d5" translate="yes" xml:space="preserve">
          <source>The first thing a catch handler does is call this.</source>
          <target state="translated">キャッチハンドラが最初にすることは、これを呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="06bc16353a0bd43b921f8f9a4d6fe2a9b273859a" translate="yes" xml:space="preserve">
          <source>The first time point in the range.</source>
          <target state="translated">範囲内で初めてのタイムポイント。</target>
        </trans-unit>
        <trans-unit id="ee856ba33815edde83d3ab4573c1bb58ec0e2ba8" translate="yes" xml:space="preserve">
          <source>The first two overloads throw only if &lt;code&gt;alloc&lt;/code&gt;'s primitives do. The overloads that involve copy initialization deallocate memory and propagate the exception if the copy operation throws.</source>
          <target state="translated">最初の2つのオーバーロードは、 &lt;code&gt;alloc&lt;/code&gt; のプリミティブが行う場合にのみスローされます。コピーの初期化を伴うオーバーロードは、メモリの割り当てを解除し、コピー操作がスローされた場合に例外を伝達します。</target>
        </trans-unit>
        <trans-unit id="333231d0183ec9a4310007ffcf10aa12ccaa5deb" translate="yes" xml:space="preserve">
          <source>The first two overloads throw only if the used allocator's primitives do. The overloads that involve copy initialization deallocate memory and propagate the exception if the copy operation throws.</source>
          <target state="translated">最初の 2 つのオーバーロードは、使用されているアロケータのプリミティブがスローされた場合にのみスローされます。コピー初期化を含むオーバーロードはメモリを解放し、コピー操作がスローされた場合に例外を伝播します。</target>
        </trans-unit>
        <trans-unit id="8adbee74bf4af885c51ba2cdd7ef319e8a5ccd70" translate="yes" xml:space="preserve">
          <source>The first type to receive the type name for</source>
          <target state="translated">のタイプ名を最初に受け取るタイプは</target>
        </trans-unit>
        <trans-unit id="24a327b5e33473298dc52e8aa179b1270880d206" translate="yes" xml:space="preserve">
          <source>The first version counts the number of elements &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;r&lt;/code&gt; for which &lt;code&gt;pred(x, value)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;pred&lt;/code&gt; defaults to equality. Performs &amp;Omicron;(&lt;code&gt;haystack.length&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">最初のバージョンは、要素の数はカウント &lt;code&gt;x&lt;/code&gt; はで &lt;code&gt;r&lt;/code&gt; れる &lt;code&gt;pred(x, value)&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 。 &lt;code&gt;pred&lt;/code&gt; のデフォルトは等価です。 &lt;code&gt;pred&lt;/code&gt; の &amp;Omicron;（ &lt;code&gt;haystack.length&lt;/code&gt; ）評価を実行します。</target>
        </trans-unit>
        <trans-unit id="c9816b3b28ee2e6c5406da992bb1cbb42be32059" translate="yes" xml:space="preserve">
          <source>The first way is to use a literal that is already immutable, such as string literals. String literals are always immutable.</source>
          <target state="translated">最初の方法は、文字列リテラルなど、すでに不変であるリテラルを使用することです。文字列リテラルは常に不変です。</target>
        </trans-unit>
        <trans-unit id="b05e9e189cc2bf7e6e8a6f344ff95d0591fc3a0f" translate="yes" xml:space="preserve">
          <source>The first will queue writers until no readers hold the mutex, then pass the writers through one at a time. If a reader acquires the mutex while there are still writers queued, the reader will take precedence.</source>
          <target state="translated">最初のものは、ミューテックスを保持している読者がいなくなるまでライターをキューに入れ、その後ライターを一度に一人ずつ通過させます。まだ待ち行列に並んでいるライターがいる間に、あるリーダーがミューテックスを取得した場合は、そのリーダーが優先されます。</target>
        </trans-unit>
        <trans-unit id="1b1951cc36673198c26cd910de69ac59cf5f6d05" translate="yes" xml:space="preserve">
          <source>The focus of this module is the core needs of developing Unicode-aware applications. To that effect it provides the following optimized primitives:</source>
          <target state="translated">このモジュールの焦点は、Unicode対応アプリケーションを開発するための中核的なニーズです。そのために、以下の最適化されたプリミティブを提供します。</target>
        </trans-unit>
        <trans-unit id="6fa1fe0d7308c90108a99d43bd343885cf39b2f7" translate="yes" xml:space="preserve">
          <source>The following IEEE 'real' formats are currently supported:</source>
          <target state="translated">現在、以下の IEEE 'リアル' フォーマットがサポートされています。</target>
        </trans-unit>
        <trans-unit id="fd79ad5ff3bdc8ea5cc9c7e973de1494e808a075" translate="yes" xml:space="preserve">
          <source>The following algorithm is used:</source>
          <target state="translated">以下のアルゴリズムを使用しています。</target>
        </trans-unit>
        <trans-unit id="3781d7d912eacb6b194d6abe4908fafb2e1b7d5d" translate="yes" xml:space="preserve">
          <source>The following algorithms are currently implemented:</source>
          <target state="translated">現在、以下のアルゴリズムが実装されています。</target>
        </trans-unit>
        <trans-unit id="d55ceaf72919876c8f40561d12b134a3ea66a2f7" translate="yes" xml:space="preserve">
          <source>The following alias declarations are valid:</source>
          <target state="translated">以下のエイリアス宣言が有効です。</target>
        </trans-unit>
        <trans-unit id="3cfdc04ab915c01ce32c8d0e68bf6bc781aec0c7" translate="yes" xml:space="preserve">
          <source>The following are all embedded documentation comments:</source>
          <target state="translated">以下は、すべての組み込みドキュメントのコメントです。</target>
        </trans-unit>
        <trans-unit id="98d73aa2fbdeacfd5d17519697402797329a5e39" translate="yes" xml:space="preserve">
          <source>The following are rules of input ranges are assumed to hold true in all Phobos code. These rules are not checkable at compile-time, so not conforming to these rules when writing ranges or range based code will result in undefined behavior.</source>
          <target state="translated">以下の入力範囲のルールは、すべてのPhobosコードで真であると仮定されています。これらのルールはコンパイル時にはチェックできないので、範囲や範囲ベースのコードを書くときにこれらのルールに従わないと、未定義の動作になります。</target>
        </trans-unit>
        <trans-unit id="eabfe29dc68817824868f2b1cc59ea44b7368f75" translate="yes" xml:space="preserve">
          <source>The following are what the Unicode standard considers as line terminators:</source>
          <target state="translated">ユニコード標準では、以下のように考えられています。</target>
        </trans-unit>
        <trans-unit id="21052e7f487ea1e8da6a5dfd837062e0257bbb6f" translate="yes" xml:space="preserve">
          <source>The following binary operators are overloadable:</source>
          <target state="translated">以下のバイナリ演算子はオーバーロード可能です。</target>
        </trans-unit>
        <trans-unit id="85cad5d1bff24fce98bfd578ab9c72fa9869b15d" translate="yes" xml:space="preserve">
          <source>The following code compares the use of &lt;code&gt;formatValue&lt;/code&gt; and &lt;code&gt;formattedWrite&lt;/code&gt;.</source>
          <target state="translated">次のコードは、 &lt;code&gt;formatValue&lt;/code&gt; と &lt;code&gt;formattedWrite&lt;/code&gt; の使用を比較しています。</target>
        </trans-unit>
        <trans-unit id="36006625c3fb62c010db1770cfe9a955d1abc844" translate="yes" xml:space="preserve">
          <source>The following code does a full unzip</source>
          <target state="translated">以下のコードは完全な解凍を行います。</target>
        </trans-unit>
        <trans-unit id="707a5e8dae71e24794f64d11490781d72f147427" translate="yes" xml:space="preserve">
          <source>The following code should compile for any forward range.</source>
          <target state="translated">以下のコードは、任意の前方範囲に対してコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="b75b3b21bc4ed533a6d7d4185c0635676c150be0" translate="yes" xml:space="preserve">
          <source>The following describes the behavior of the qualified postblit definitions:</source>
          <target state="translated">以下、修飾ポストブリット定義の動作について説明します。</target>
        </trans-unit>
        <trans-unit id="cc1ef4d0137291a52b36237f0a56da4b9479ab3e" translate="yes" xml:space="preserve">
          <source>The following describes the specific implementation of the vector types for the X86 and X86_64 architectures.</source>
          <target state="translated">以下に、X86 および X86_64 アーキテクチャ用のベクタ型の具体的な実装について説明します。</target>
        </trans-unit>
        <trans-unit id="105f7db9c11f1b737bfecc2ad34e6e665b2f7c19" translate="yes" xml:space="preserve">
          <source>The following divide or modulus integral operands:</source>
          <target state="translated">次の分割またはモジュラス積分オペランド。</target>
        </trans-unit>
        <trans-unit id="f4a4096a1a2c3a608e01b521d07c483d3463c6b6" translate="yes" xml:space="preserve">
          <source>The following elements describe the locations of GC managed pointers within the memory occupied by an instance of the type. For type T, there are &lt;code&gt;T.sizeof / size_t.sizeof&lt;/code&gt; possible pointers represented by the bits of the array values.</source>
          <target state="translated">次の要素は、型のインスタンスによって占有されるメモリ内のGC管理ポインターの場所を記述します。タイプTには、配列値のビットで表される &lt;code&gt;T.sizeof / size_t.sizeof&lt;/code&gt; 可能なポインターがあります。</target>
        </trans-unit>
        <trans-unit id="64e995a24781ca67ad26542b15d464819ff2f49a" translate="yes" xml:space="preserve">
          <source>The following example shows binding of a pure virtual function, its implementation in a derived class, a non-virtual member function, and a member field:</source>
          <target state="translated">以下の例では、純粋な仮想関数のバインディング、派生クラスでの実装、非仮想メンバ関数、およびメンバフィールドを示しています。</target>
        </trans-unit>
        <trans-unit id="7394f4cff4af73de38cdcc123f9d9cc433c49d32" translate="yes" xml:space="preserve">
          <source>The following expression must be true for &lt;code&gt;hasSlicing&lt;/code&gt; to be &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;hasSlicing&lt;/code&gt; をtrueにするには、次の式がtrueである必要があり &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9182b2bc4da6786571366018715b092f896d0a9d" translate="yes" xml:space="preserve">
          <source>The following flag from DMD can be used to add a new path in which to search for frameworks:</source>
          <target state="translated">DMDからの以下のフラグを使用して、フレームワークを検索するための新しいパスを追加することができます。</target>
        </trans-unit>
        <trans-unit id="f255eea7299aed827ce99b1b18680817e56fa6aa" translate="yes" xml:space="preserve">
          <source>The following forms of slice expression can be convertible to a static array type:</source>
          <target state="translated">スライス式の以下の形式は、静的配列型に変換することができます。</target>
        </trans-unit>
        <trans-unit id="b112356e7e4259c722c195a6e095476ecaa2fdb9" translate="yes" xml:space="preserve">
          <source>The following functions are publicly imported:</source>
          <target state="translated">以下の機能が公開インポートされています。</target>
        </trans-unit>
        <trans-unit id="37498d7cc50ed898202c2748c98849d1a32c6302" translate="yes" xml:space="preserve">
          <source>The following identifiers are defined, but are deprecated:</source>
          <target state="translated">以下の識別子が定義されていますが、非推奨です。</target>
        </trans-unit>
        <trans-unit id="4b758467388bb94c690cea1fb26de17875ff1787" translate="yes" xml:space="preserve">
          <source>The following information might be of help with choosing the appropriate block size. Actual allocation occurs in sizes multiple of the block size. Allocating one block is the fastest because only one 0 bit needs to be found in the metadata. Allocating 2 through 64 blocks is the next cheapest because it affects a maximum of two &lt;code&gt;ulong&lt;/code&gt; in the metadata. Allocations greater than 64 blocks require a multiword search through the metadata.</source>
          <target state="translated">次の情報は、適切なブロックサイズの選択に役立つ場合があります。実際の割り当ては、ブロックサイズの倍数のサイズで行われます。メタデータで0ビットを1つだけ見つける必要があるため、1つのブロックを割り当てるのが最も高速です。 &lt;code&gt;ulong&lt;/code&gt; ブロックの割り当ては、メタデータで最大2つのulongに影響を与えるため、次に安価です。64ブロックを超える割り当てでは、メタデータによるマルチワード検索が必要です。</target>
        </trans-unit>
        <trans-unit id="3576cbb0f30565829c9a8b467650fa45b457f446" translate="yes" xml:space="preserve">
          <source>The following is a list of important Unicode notions and definitions. Any conventions used specifically in this module alone are marked as such. The descriptions are based on the formal definition as found in &lt;a href=&quot;http://www.unicode.org/versions/Unicode6.2.0/ch03.pdf&quot;&gt; chapter three of The Unicode Standard Core Specification.&lt;/a&gt;</source>
          <target state="translated">以下は、重要なUnicodeの概念と定義のリストです。このモジュールのみで具体的に使用されているすべての規則は、そのようにマークされています。説明は、&lt;a href=&quot;http://www.unicode.org/versions/Unicode6.2.0/ch03.pdf&quot;&gt;Unicode標準コア仕様の第3章に&lt;/a&gt;記載されている正式な定義に基づいています。</target>
        </trans-unit>
        <trans-unit id="ce914524ba4b9740fa3dd3403eb5305729b98aee" translate="yes" xml:space="preserve">
          <source>The following is a list of important Unicode notions and definitions. Any conventions used specifically in this module alone are marked as such. The descriptions are based on the formal definition as found in &lt;a href=&quot;https://www.unicode.org/versions/Unicode6.2.0/ch03.pdf&quot;&gt; chapter three of The Unicode Standard Core Specification.&lt;/a&gt;</source>
          <target state="translated">以下は、重要なUnicodeの概念と定義のリストです。このモジュールだけで特に使用される規則は、そのようにマークされています。説明は、&lt;a href=&quot;https://www.unicode.org/versions/Unicode6.2.0/ch03.pdf&quot;&gt;Unicode標準コア仕様の第3章&lt;/a&gt;にある正式な定義に基づいています。</target>
        </trans-unit>
        <trans-unit id="ee35f7e05bf101609042076d8164187dce2ce440" translate="yes" xml:space="preserve">
          <source>The following methods are defined if &lt;code&gt;Allocator&lt;/code&gt; defines them, and forward to it: &lt;code&gt;deallocateAll&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;owns&lt;/code&gt;.</source>
          <target state="translated">次のメソッドは、 &lt;code&gt;Allocator&lt;/code&gt; が定義している場合に定義され、それに転送されます &lt;code&gt;deallocateAll&lt;/code&gt; 、 &lt;code&gt;empty&lt;/code&gt; 、 &lt;code&gt;owns&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91a10c7b038d71ce23d47d4e91b5d6d57a0c0ec0" translate="yes" xml:space="preserve">
          <source>The following methods are defined if &lt;code&gt;ParentAllocator&lt;/code&gt; defines them, and forward to it: &lt;code&gt;allocateAll&lt;/code&gt;, &lt;code&gt;expand&lt;/code&gt;, &lt;code&gt;owns&lt;/code&gt;, &lt;code&gt;reallocate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ParentAllocator&lt;/code&gt; が定義している場合は、次のメソッドが定義されて転送されます： &lt;code&gt;allocateAll&lt;/code&gt; 、 &lt;code&gt;expand&lt;/code&gt; 、 &lt;code&gt;owns&lt;/code&gt; 、 &lt;code&gt;reallocate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14685afb8641a641e101312bd747ad3ce716f779" translate="yes" xml:space="preserve">
          <source>The following methods are defined if &lt;code&gt;ParentAllocator&lt;/code&gt; defines them, and forward to it: &lt;code&gt;expand&lt;/code&gt;, &lt;code&gt;owns&lt;/code&gt;, &lt;code&gt;reallocate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ParentAllocator&lt;/code&gt; が定義している場合は、次のメソッドが定義され、それに転送されます： &lt;code&gt;expand&lt;/code&gt; 、 &lt;code&gt;owns&lt;/code&gt; 、 &lt;code&gt;reallocate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5e999922ed0b2b38ea541add7eceec13e307896" translate="yes" xml:space="preserve">
          <source>The following methods are forwarded to the parent allocator if present: &lt;code&gt;allocateAll&lt;/code&gt;, &lt;code&gt;owns&lt;/code&gt;, &lt;code&gt;deallocateAll&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;.</source>
          <target state="translated">次のメソッドは、存在する場合は親アロケーターに転送されます： &lt;code&gt;allocateAll&lt;/code&gt; 、 &lt;code&gt;owns&lt;/code&gt; 、 &lt;code&gt;deallocateAll&lt;/code&gt; 、 &lt;code&gt;empty&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="90832fc606780913417ad9424b5b78d805e2f1c9" translate="yes" xml:space="preserve">
          <source>The following must not compile:</source>
          <target state="translated">以下はコンパイルしてはいけません。</target>
        </trans-unit>
        <trans-unit id="151cf7cc11e7e2474415594512b78561ff78c2e4" translate="yes" xml:space="preserve">
          <source>The following op assignment operators are overloadable:</source>
          <target state="translated">以下のオペ代入演算子はオーバーロード可能です。</target>
        </trans-unit>
        <trans-unit id="1686f8bc7687029bb8df07eb18087ba36d800516" translate="yes" xml:space="preserve">
          <source>The following operations are not allowed in safe functions:</source>
          <target state="translated">安全な関数では、以下の操作はできません。</target>
        </trans-unit>
        <trans-unit id="74510166d7dbf32dd076c82ed552fa55a6bbe522" translate="yes" xml:space="preserve">
          <source>The following part &lt;code&gt;=&amp;gt;&lt;/code&gt;</source>
          <target state="translated">次の部分 &lt;code&gt;=&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f46ca3cf008a6a798269fad6d3b26dd55f13657" translate="yes" xml:space="preserve">
          <source>The following registers are supported. Register names are always in upper case.</source>
          <target state="translated">以下のレジスタがサポートされています。レジスタ名は常に大文字です。</target>
        </trans-unit>
        <trans-unit id="747c928a756931b0ee0b7f4bfca0b996d4e0288f" translate="yes" xml:space="preserve">
          <source>The following restrictions apply to class construction:</source>
          <target state="translated">クラス構築には以下の制限があります。</target>
        </trans-unit>
        <trans-unit id="b257030ef10af45e49786ee89d857d61ed4e94b9" translate="yes" xml:space="preserve">
          <source>The following restrictions apply to struct construction:</source>
          <target state="translated">構造物の施工には以下の制限があります。</target>
        </trans-unit>
        <trans-unit id="35dabc106beeab4a557770a611849cc8c36d5347" translate="yes" xml:space="preserve">
          <source>The following restrictions apply:</source>
          <target state="translated">以下の制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="2f5e979077d2f3caabdbb4640da99e0c00a00749" translate="yes" xml:space="preserve">
          <source>The following steps happen:</source>
          <target state="translated">次のようなことが起こります。</target>
        </trans-unit>
        <trans-unit id="b441496fc086e7e8d354986714d6c04ebf32cc29" translate="yes" xml:space="preserve">
          <source>The following table compactly summarises the different process creation functions and how they relate to each other:</source>
          <target state="translated">以下の表は、さまざまなプロセス作成機能と、それらが互いにどのように関係しているかをコンパクトにまとめたものです。</target>
        </trans-unit>
        <trans-unit id="05b248b2126c26cb91a89762582c19941d257e43" translate="yes" xml:space="preserve">
          <source>The following table is a quick reference guide for which Phobos modules to use for a given category of functionality. Note that some modules may appear in more than one category, as some Phobos modules are quite generic and can be applied in a variety of situations.</source>
          <target state="translated">以下の表は、ある機能のカテゴリにどのPhobosモジュールを使用するかのクイックリファレンスガイドです。Phobosモジュールの中には、非常に汎用的で様々な状況に適用できるものもあるため、モジュールによっては複数のカテゴリに分類されることもあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a2cf73cb06dd66656b8e69a1d451407dbc663bbe" translate="yes" xml:space="preserve">
          <source>The following table lists all the possibilities of grouping qualifiers for a postblit associated with the type of object that needs to be used in order to succesfully invoke the postblit:</source>
          <target state="translated">次の表は、ポストブリットをうまく呼び出すために使用する必要のあるオブジェクトのタイプに関連して、ポストブリットのための修飾子をグループ化するすべての可能性を示しています。</target>
        </trans-unit>
        <trans-unit id="45f0025d65c3c173c7ccd0fb97c1cf0de30e0385" translate="yes" xml:space="preserve">
          <source>The following table lists all the possibilities of grouping qualifiers for a postblit associated with the type of object that needs to be used in order to successfully invoke the postblit:</source>
          <target state="translated">次の表は、ポストブリットを正常に起動するために使用する必要があるオブジェクトのタイプに関連付けられたポストブリットのための修飾子をグループ化するすべての可能性を示しています。</target>
        </trans-unit>
        <trans-unit id="824da93e42b4013db578b67b46a78528e680f556" translate="yes" xml:space="preserve">
          <source>The following transformations of floating point expressions are not allowed because under IEEE rules they could produce different results.</source>
          <target state="translated">IEEEのルールでは、浮動小数点式の以下の変換は、異なる結果を生成する可能性があるため、許可されていません。</target>
        </trans-unit>
        <trans-unit id="a206952bbb005ee76451476eb55d6acde4281a6d" translate="yes" xml:space="preserve">
          <source>The following typedef's are signatures of malloc, free, realloc, strdup and calloc respectively. Function pointers of these types can be passed to the curl_global_init_mem() function to set user defined memory management callback routines.</source>
          <target state="translated">以下の型定義は、それぞれ malloc、free、realloc、strdup および calloc のシグネチャです。これらの型の関数ポインタは、ユーザー定義のメモリ管理コールバック ルーチンを設定するために curl_global_init_mem()関数に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="6266d602387c0c2612f1f18ac8c95fc02fe3bb5d" translate="yes" xml:space="preserve">
          <source>The format &lt;code&gt;inner&lt;/code&gt; is applied the expanded &lt;code&gt;Tuple&lt;/code&gt;, so it may contain as many formats as the &lt;code&gt;Tuple&lt;/code&gt; has fields.</source>
          <target state="translated">フォーマットの &lt;code&gt;inner&lt;/code&gt; は拡張された &lt;code&gt;Tuple&lt;/code&gt; が適用されるため、 &lt;code&gt;Tuple&lt;/code&gt; フィールドと同じ数のフォーマットを含めることができます。</target>
        </trans-unit>
        <trans-unit id="d91cc2eaba6a476564c6ddbd8124208fde7d92fe" translate="yes" xml:space="preserve">
          <source>The format &lt;code&gt;inner&lt;/code&gt; is one format, that is applied on all fields of the &lt;code&gt;Tuple&lt;/code&gt;. The inner format must be compatible to all of them.</source>
          <target state="translated">&lt;code&gt;inner&lt;/code&gt; 形式は1つの形式で、 &lt;code&gt;Tuple&lt;/code&gt; すべてのフィールドに適用されます。内部形式は、それらすべてと互換性がある必要があります。</target>
        </trans-unit>
        <trans-unit id="b804a9979bb24328a2b2b5b25616b3fc268adff1" translate="yes" xml:space="preserve">
          <source>The format of the data to read.</source>
          <target state="translated">読み取るデータのフォーマットです。</target>
        </trans-unit>
        <trans-unit id="0a7a62414c21f47b50a1e92c766dda1b08a5910c" translate="yes" xml:space="preserve">
          <source>The format of the date should follow this template:</source>
          <target state="translated">日付の書式はこのテンプレートに従ってください。</target>
        </trans-unit>
        <trans-unit id="659e106c79a7ed685e316895f1b36b5ece514b7f" translate="yes" xml:space="preserve">
          <source>The format of the instructions is, of course, highly dependent on the native instruction set of the target CPU, and so is &lt;a href=&quot;iasm&quot;&gt;implementation defined&lt;/a&gt;. But, the format will follow the following conventions:</source>
          <target state="translated">もちろん、命令の形式は、ターゲットCPUのネイティブ命令セットに大きく依存しているため、&lt;a href=&quot;iasm&quot;&gt;実装で定義され&lt;/a&gt;ます。ただし、形式は次の規則に従います。</target>
        </trans-unit>
        <trans-unit id="d00ef203b4bd1ca0d23b1201e668116dd138801d" translate="yes" xml:space="preserve">
          <source>The format of the string is purposefully unspecified, and code that cares about the format of the string should use &lt;code&gt;toISOString&lt;/code&gt;, &lt;code&gt;toISOExtString&lt;/code&gt;, &lt;code&gt;toSimpleString&lt;/code&gt;, or some other custom formatting function that explicitly generates the format that the code needs. The reason is that the code is then clear about what format it's using, making it less error-prone to maintain the code and interact with other software that consumes the generated strings. It's for this same reason &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; has no &lt;code&gt;fromString&lt;/code&gt; function, whereas it does have &lt;code&gt;fromISOString&lt;/code&gt;, &lt;code&gt;fromISOExtString&lt;/code&gt;, and &lt;code&gt;fromSimpleString&lt;/code&gt;.</source>
          <target state="translated">文字列の形式は意図的に指定されて &lt;code&gt;toISOString&lt;/code&gt; 、文字列の形式を考慮するコードでは、toISOString、 &lt;code&gt;toISOExtString&lt;/code&gt; 、 &lt;code&gt;toSimpleString&lt;/code&gt; 、またはコードが必要とする形式を明示的に生成するその他のカスタム形式関数を使用する必要があります。その理由は、コードがどのフォーマットを使用しているかが明確になり、コードを保守したり、生成された文字列を消費する他のソフトウェアとやり取りしたりするときにエラーが発生しにくくなるためです。これと同じ理由で、&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; に&lt;/a&gt;は &lt;code&gt;fromString&lt;/code&gt; 関数がありませんが、 &lt;code&gt;fromISOString&lt;/code&gt; 、 &lt;code&gt;fromISOExtString&lt;/code&gt; 、および &lt;code&gt;fromSimpleString&lt;/code&gt; はあります。</target>
        </trans-unit>
        <trans-unit id="7e82eb1994e0d2ee7e98c5b8f8c20cfd78e8b067" translate="yes" xml:space="preserve">
          <source>The format of the string is purposefully unspecified, and code that cares about the format of the string should use &lt;code&gt;toISOString&lt;/code&gt;, &lt;code&gt;toISOExtString&lt;/code&gt;, &lt;code&gt;toSimpleString&lt;/code&gt;, or some other custom formatting function that explicitly generates the format that the code needs. The reason is that the code is then clear about what format it's using, making it less error-prone to maintain the code and interact with other software that consumes the generated strings. It's for this same reason that &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; has no &lt;code&gt;fromString&lt;/code&gt; function, whereas it does have &lt;code&gt;fromISOString&lt;/code&gt;, &lt;code&gt;fromISOExtString&lt;/code&gt;, and &lt;code&gt;fromSimpleString&lt;/code&gt;.</source>
          <target state="translated">文字列の形式は意図的に指定されて &lt;code&gt;toISOString&lt;/code&gt; 、文字列の形式を考慮するコードでは、toISOString、 &lt;code&gt;toISOExtString&lt;/code&gt; 、 &lt;code&gt;toSimpleString&lt;/code&gt; 、またはコードが必要とする形式を明示的に生成するその他のカスタム形式関数を使用する必要があります。その理由は、コードがどのフォーマットを使用しているかが明確になり、コードを保守したり、生成された文字列を消費する他のソフトウェアとやり取りしたりするときにエラーが発生しにくくなるためです。これは、こと、この同じ理由だ&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; のは&lt;/a&gt;全く持っていない &lt;code&gt;fromString&lt;/code&gt; のそれは持っていないのに対し、機能を &lt;code&gt;fromISOString&lt;/code&gt; 、 &lt;code&gt;fromISOExtString&lt;/code&gt; 、および &lt;code&gt;fromSimpleString&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="96cf4abaa3ec73526e49a27860bcadf20906a190" translate="yes" xml:space="preserve">
          <source>The format of the string is purposefully unspecified, and code that cares about the format of the string should use &lt;code&gt;toISOString&lt;/code&gt;, &lt;code&gt;toISOExtString&lt;/code&gt;, &lt;code&gt;toSimpleString&lt;/code&gt;, or some other custom formatting function that explicitly generates the format that the code needs. The reason is that the code is then clear about what format it's using, making it less error-prone to maintain the code and interact with other software that consumes the generated strings. It's for this same reason that &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; has no &lt;code&gt;fromString&lt;/code&gt; function, whereas it does have &lt;code&gt;fromISOString&lt;/code&gt;, &lt;code&gt;fromISOExtString&lt;/code&gt;, and &lt;code&gt;fromSimpleString&lt;/code&gt;.</source>
          <target state="translated">文字列の形式は意図的に指定されて &lt;code&gt;toISOString&lt;/code&gt; 、文字列の形式を考慮するコードでは、toISOString、 &lt;code&gt;toISOExtString&lt;/code&gt; 、 &lt;code&gt;toSimpleString&lt;/code&gt; 、またはコードが必要とする形式を明示的に生成するその他のカスタム形式関数を使用する必要があります。その理由は、コードがどのフォーマットを使用しているかが明確になり、コードを保守したり、生成された文字列を消費する他のソフトウェアとやり取りしたりするときにエラーが発生しにくくなるためです。これと同じ理由で、&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; に&lt;/a&gt;は &lt;code&gt;fromString&lt;/code&gt; 関数がありませんが、 &lt;code&gt;fromISOString&lt;/code&gt; 、 &lt;code&gt;fromISOExtString&lt;/code&gt; 、および &lt;code&gt;fromSimpleString&lt;/code&gt; はあります。</target>
        </trans-unit>
        <trans-unit id="02a7f64095e841cf54dadcac2f9cbc728022a8d4" translate="yes" xml:space="preserve">
          <source>The format of the string is purposefully unspecified, and code that cares about the format of the string should use &lt;code&gt;toISOString&lt;/code&gt;, &lt;code&gt;toISOExtString&lt;/code&gt;, or some other custom formatting function that explicitly generates the format that the code needs. The reason is that the code is then clear about what format it's using, making it less error-prone to maintain the code and interact with other software that consumes the generated strings. It's for this same reason that &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt; has no &lt;code&gt;fromString&lt;/code&gt; function, whereas it does have &lt;code&gt;fromISOString&lt;/code&gt; and &lt;code&gt;fromISOExtString&lt;/code&gt;.</source>
          <target state="translated">文字列の形式は意図的に指定されて &lt;code&gt;toISOString&lt;/code&gt; 、文字列の形式を考慮するコードは、 &lt;code&gt;toISOExtString&lt;/code&gt; 、toISOExtString、またはコードが必要とする形式を明示的に生成する他のカスタム書式設定関数を使用する必要があります。その理由は、コードがどのフォーマットを使用しているかが明確になり、コードを保守したり、生成された文字列を消費する他のソフトウェアとやり取りしたりするときにエラーが発生しにくくなるためです。これと同じ理由で、&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; に&lt;/a&gt;は &lt;code&gt;fromString&lt;/code&gt; 関数がないのに対し、 &lt;code&gt;fromISOString&lt;/code&gt; と &lt;code&gt;fromISOExtString&lt;/code&gt; があるのです。</target>
        </trans-unit>
        <trans-unit id="ffca9618faa656329893915994f22e9af2d88357" translate="yes" xml:space="preserve">
          <source>The format returned by toString may or may not change in the future.</source>
          <target state="translated">toStringが返すフォーマットは、将来的に変更される可能性がありますし、変更されない可能性があります。</target>
        </trans-unit>
        <trans-unit id="03b68c7b67ac69b6f5b3f857c44f365ee971e450" translate="yes" xml:space="preserve">
          <source>The format specifier contained a &lt;code&gt;' '&lt;/code&gt; (&lt;code&gt;printf&lt;/code&gt; compatibility).</source>
          <target state="translated">フォーマット指定子に &lt;code&gt;' '&lt;/code&gt; （ &lt;code&gt;printf&lt;/code&gt; 互換）が含まれていました。</target>
        </trans-unit>
        <trans-unit id="f06eba7969af19af6a609393b286c72694c125a1" translate="yes" xml:space="preserve">
          <source>The format specifier contained a &lt;code&gt;'#'&lt;/code&gt; (&lt;code&gt;printf&lt;/code&gt; compatibility).</source>
          <target state="translated">書式指定子に &lt;code&gt;'#'&lt;/code&gt; （ &lt;code&gt;printf&lt;/code&gt; 互換）が含まれていました。</target>
        </trans-unit>
        <trans-unit id="2b3efef6165630dae7b0c5941cb57f0ff6fb2723" translate="yes" xml:space="preserve">
          <source>The format specifier contained a &lt;code&gt;'+'&lt;/code&gt; (&lt;code&gt;printf&lt;/code&gt; compatibility).</source>
          <target state="translated">書式指定子に &lt;code&gt;'+'&lt;/code&gt; （ &lt;code&gt;printf&lt;/code&gt; 互換）が含まれていました。</target>
        </trans-unit>
        <trans-unit id="6460ee5bc9ce27cd4f9cfd713bf8f2494817b14f" translate="yes" xml:space="preserve">
          <source>The format specifier contained a &lt;code&gt;','&lt;/code&gt;</source>
          <target state="translated">フォーマット指定子に &lt;code&gt;','&lt;/code&gt; 含まれています</target>
        </trans-unit>
        <trans-unit id="962882364923635b105d5f54d8d7565b59680ac3" translate="yes" xml:space="preserve">
          <source>The format specifier contained a &lt;code&gt;'-'&lt;/code&gt; (&lt;code&gt;printf&lt;/code&gt; compatibility).</source>
          <target state="translated">書式指定子に &lt;code&gt;'-'&lt;/code&gt; （ &lt;code&gt;printf&lt;/code&gt; 互換）が含まれていました。</target>
        </trans-unit>
        <trans-unit id="d34bdd42fd319223df703e24b238ea323c66c17e" translate="yes" xml:space="preserve">
          <source>The format specifier contained a &lt;code&gt;'0'&lt;/code&gt; (&lt;code&gt;printf&lt;/code&gt; compatibility).</source>
          <target state="translated">フォーマット指定子に &lt;code&gt;'0'&lt;/code&gt; （ &lt;code&gt;printf&lt;/code&gt; 互換）が含まれていました。</target>
        </trans-unit>
        <trans-unit id="4e47d83ed9645d662de3546c090652b44c5fa2bb" translate="yes" xml:space="preserve">
          <source>The format string can be checked at compile-time (see &lt;a href=&quot;#format&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; for details):</source>
          <target state="translated">フォーマット文字列は、コンパイル時に確認できます（詳細については、&lt;a href=&quot;#format&quot;&gt; &lt;code&gt;format&lt;/code&gt; &lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="bd749ebde47823b6d49d60691dec84566b639bf8" translate="yes" xml:space="preserve">
          <source>The format string can reference parts of match using the following notation.</source>
          <target state="translated">フォーマット文字列は、以下の記法を使用してマッチの部分を参照することができます。</target>
        </trans-unit>
        <trans-unit id="2d3aec5d983c44f1af503ee811b2266d3dca8cd3" translate="yes" xml:space="preserve">
          <source>The format string has the following grammar:</source>
          <target state="translated">フォーマット文字列には以下の文法があります。</target>
        </trans-unit>
        <trans-unit id="0625c7ec1018d088678495be9b57d04b31498a03" translate="yes" xml:space="preserve">
          <source>The format string supports the formatting of array and nested array elements via the grouping format specifiers &lt;b&gt;%(&lt;/b&gt; and &lt;b&gt;%)&lt;/b&gt;. Each matching pair of &lt;b&gt;%(&lt;/b&gt; and &lt;b&gt;%)&lt;/b&gt; corresponds with a single array argument. The enclosed sub-format string is applied to individual array elements. The trailing portion of the sub-format string following the conversion specifier for the array element is interpreted as the array delimiter, and is therefore omitted following the last array element. The &lt;b&gt;%|&lt;/b&gt; specifier may be used to explicitly indicate the start of the delimiter, so that the preceding portion of the string will be included following the last array element. (See below for explicit examples.)</source>
          <target state="translated">フォーマット文字列は、グループ化フォーマット指定子&lt;b&gt;％（&lt;/b&gt;および&lt;b&gt;％）を&lt;/b&gt;介して、配列およびネストされた配列要素のフォーマットをサポートします。&lt;b&gt;％（&lt;/b&gt;と&lt;b&gt;％）の&lt;/b&gt;一致する各ペアは、単一の配列引数に対応します。囲まれたサブフォーマット文字列は、個々の配列要素に適用されます。配列要素の変換指定子に続くサブフォーマット文字列の後続部分は、配列区切り文字として解釈されるため、最後の配列要素に続く部分は省略されます。&lt;b&gt;％|&lt;/b&gt;指定子を使用して区切り文字の開始を明示的に示すことができるため、文字列の前の部分が最後の配列要素の後に含まれます。 （明示的な例については、以下を参照してください。）</target>
        </trans-unit>
        <trans-unit id="693a71e5dd0ab926d97018418f98a27b3e174029" translate="yes" xml:space="preserve">
          <source>The format string used for this log call.</source>
          <target state="translated">このログ呼び出しに使用されるフォーマット文字列。</target>
        </trans-unit>
        <trans-unit id="9fa2fc4abd1b83aca1055ee06f982cdb131c59e5" translate="yes" xml:space="preserve">
          <source>The formatting flag is applied individually to each value, for example:</source>
          <target state="translated">書式化フラグは、例えば、値ごとに個別に適用されます。</target>
        </trans-unit>
        <trans-unit id="d26ac44ffe5a86909c11c81e0ef71d3888da5c4c" translate="yes" xml:space="preserve">
          <source>The forms of the</source>
          <target state="translated">の形をしています。</target>
        </trans-unit>
        <trans-unit id="38e88fa7315be494a88a395eb056b9ace726e37c" translate="yes" xml:space="preserve">
          <source>The four character array with the Soundex result in it. Returns null if there is no Soundex representation for the string.</source>
          <target state="translated">Soundex の結果を含む 4 文字の配列。文字列に Soundex 表現がない場合は null を返します。</target>
        </trans-unit>
        <trans-unit id="0480c3df77ed33fc07e614d2d8de8fc045910624" translate="yes" xml:space="preserve">
          <source>The four character array with the Soundex result in it. The array has zero's in it if there is no Soundex representation for the string.</source>
          <target state="translated">Soundex の結果を含む 4 文字の配列。文字列のSoundex表現がない場合、配列には0が入ります。</target>
        </trans-unit>
        <trans-unit id="5766013bffb3825b0abbe1d083667aa11616b979" translate="yes" xml:space="preserve">
          <source>The fourth form, &lt;code&gt;goto case&lt;/code&gt;&lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt;&lt;code&gt;;&lt;/code&gt;, transfers to the &lt;a href=&quot;#CaseStatement&quot;&gt;&lt;i&gt;CaseStatement&lt;/i&gt;&lt;/a&gt; of the innermost enclosing &lt;a href=&quot;#SwitchStatement&quot;&gt;&lt;i&gt;SwitchStatement&lt;/i&gt;&lt;/a&gt; with a matching &lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">4番目の形式、 &lt;code&gt;goto case&lt;/code&gt; &lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;式&lt;/i&gt;&lt;/a&gt; &lt;code&gt;;&lt;/code&gt; 、一致する&lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt;で最も内側の&lt;a href=&quot;#CaseStatement&quot;&gt;&lt;i&gt;外側&lt;/i&gt;&lt;/a&gt;の&lt;a href=&quot;#SwitchStatement&quot;&gt;&lt;i&gt;SwitchStatementの&lt;/i&gt;&lt;/a&gt;&lt;i&gt;CaseStatement&lt;/i&gt;に転送します。&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="13efbc5e672643becc355867b63d8f22b9e474d7" translate="yes" xml:space="preserve">
          <source>The fourth version counts the number of elements in a range. It is an optimization for the third version: if the given range has the &lt;code&gt;length&lt;/code&gt; property the count is returned right away, otherwise performs &amp;Omicron;(&lt;code&gt;haystack.length&lt;/code&gt;) to walk the range.</source>
          <target state="translated">4番目のバージョンは、範囲内の要素の数をカウントします。これは3番目のバージョンの最適化です。指定された範囲に &lt;code&gt;length&lt;/code&gt; プロパティがある場合、カウントはすぐに返されます。それ以外の場合は、&amp;Omicron;（ &lt;code&gt;haystack.length&lt;/code&gt; ）を実行して範囲をウォークします。</target>
        </trans-unit>
        <trans-unit id="48edc0798b06f223cb1ddbda6fdb31f83f4e14ab" translate="yes" xml:space="preserve">
          <source>The fractional part of x.</source>
          <target state="translated">xの分数部分。</target>
        </trans-unit>
        <trans-unit id="afaeb9378608c5260a3259e8f02e82dbd938d6f1" translate="yes" xml:space="preserve">
          <source>The fractional seconds portion of the time.</source>
          <target state="translated">端数秒の部分です。</target>
        </trans-unit>
        <trans-unit id="a033f1a65da2c07804aca3b53ca406684bb91d81" translate="yes" xml:space="preserve">
          <source>The free list is circular, with the last node pointing back to the first.</source>
          <target state="translated">自由なリストは円形で、最後のノードが最初のノードを指すようになっています。</target>
        </trans-unit>
        <trans-unit id="c4517bc5d244bf2185e9745bb334e09ef6af1ee0" translate="yes" xml:space="preserve">
          <source>The free tree has special handling of duplicates (a singly-linked list per node) in anticipation of large number of duplicates. Allocation time from the free tree is expected to be &amp;Omicron;(&lt;code&gt;log n&lt;/code&gt;) where &lt;code&gt;n&lt;/code&gt; is the number of distinct sizes (not total nodes) kept in the free tree.</source>
          <target state="translated">フリーツリーでは、多数の重複が予想されるため、重複（ノードごとに単一リンクリスト）を特別に処理します。フリーツリーからの割り当て時間は&amp;Omicron;（ &lt;code&gt;log n&lt;/code&gt; ）であると予想されます。ここで、 &lt;code&gt;n&lt;/code&gt; はフリーツリーに保持される個別のサイズ（ノード全体ではない）の数です。</target>
        </trans-unit>
        <trans-unit id="ee4d09c6e55b89fcf5b3563176298a96aa717ff4" translate="yes" xml:space="preserve">
          <source>The freelist is maintained in increasing address order, which makes coalescing easy.</source>
          <target state="translated">フリーリストはアドレス順に維持されているので、合体が簡単にできます。</target>
        </trans-unit>
        <trans-unit id="8fea8f11f99f1f8b366c244a4de1a614fd67b29c" translate="yes" xml:space="preserve">
          <source>The front element in the container</source>
          <target state="translated">コンテナ内のフロントエレメント</target>
        </trans-unit>
        <trans-unit id="13da137fb2ab48bf4928214ec4fc5ac7d9dd7e0b" translate="yes" xml:space="preserve">
          <source>The full URL to get/put</source>
          <target state="translated">get/putするための完全なURL</target>
        </trans-unit>
        <trans-unit id="bdda625bfb1430028e4b6006d0968612c21121d6" translate="yes" xml:space="preserve">
          <source>The full list of named character entities from the &lt;a href=&quot;https://w3.org/TR/html5/syntax.html#named-character-references&quot;&gt;HTML 5 Spec&lt;/a&gt; is supported except for the named entities which contain multiple code points. Below is a</source>
          <target state="translated">複数のコードポイントを含む名前付きエンティティを除き、&lt;a href=&quot;https://w3.org/TR/html5/syntax.html#named-character-references&quot;&gt;HTML 5仕様&lt;/a&gt;の名前付き文字エンティティの完全なリストがサポートされています。以下は</target>
        </trans-unit>
        <trans-unit id="53abcf6f821b2e7ec7e516af58f09e5bd8d1aff5" translate="yes" xml:space="preserve">
          <source>The full module system</source>
          <target state="translated">フルモジュールシステム</target>
        </trans-unit>
        <trans-unit id="ee63124c4c066661e689e48b06ebee05399673e5" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the symbol.</source>
          <target state="translated">シンボルの完全修飾名。</target>
        </trans-unit>
        <trans-unit id="4d00150ca0468a4f7743a4f3a38c13aec942337c" translate="yes" xml:space="preserve">
          <source>The fully-qualified names of both types if the two type names are not the same, or the unqualified names of both types if the two type names are the same.</source>
          <target state="translated">2つのタイプ名が同じでない場合は両方のタイプの完全修飾名、2つのタイプ名が同じである場合は両方のタイプの非修飾名。</target>
        </trans-unit>
        <trans-unit id="38a1580a58c3012db59e4a8a700c45c0c6b1674d" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;fd&lt;/code&gt; is added to the nested references of the newly created variable such that a closure is made for the variable when the address of &lt;code&gt;fd&lt;/code&gt; is taken.</source>
          <target state="translated">関数 &lt;code&gt;fd&lt;/code&gt; は、新しく作成された変数のネストされた参照に追加され、 &lt;code&gt;fd&lt;/code&gt; のアドレスが取得されたときに変数に対してクロージャーが作成されます。</target>
        </trans-unit>
        <trans-unit id="1bc8d00dffc62265a3b988178c4153a69f61f3ec" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;remove&lt;/code&gt; works on bidirectional ranges that have assignable lvalue elements. The moving strategy is (listed from fastest to slowest):</source>
          <target state="translated">関数 &lt;code&gt;remove&lt;/code&gt; は、割り当て可能な左辺値要素を持つ双方向範囲で機能します。移動戦略は次のとおりです（最も速いものから最も遅いものへとリストされています）。</target>
        </trans-unit>
        <trans-unit id="dfdecb6a33548c2c3a57ed9788619ffcbcd64fcd" translate="yes" xml:space="preserve">
          <source>The function allocates memory if and only if it gets to the third stage of this algorithm.</source>
          <target state="translated">この関数は、このアルゴリズムの第3段階に到達した場合にのみ、メモリを確保します。</target>
        </trans-unit>
        <trans-unit id="59d7ef7bccfe8628462077a719a53074c919f8fa" translate="yes" xml:space="preserve">
          <source>The function call operator, &lt;code&gt;()&lt;/code&gt;, can be overloaded by declaring a function named &lt;code&gt;opCall&lt;/code&gt;:</source>
          <target state="translated">関数呼び出し演算子 &lt;code&gt;()&lt;/code&gt; は、 &lt;code&gt;opCall&lt;/code&gt; という名前の関数を宣言することでオーバーロードできます。</target>
        </trans-unit>
        <trans-unit id="75414fa30a8eeadba0f9df43d9a81faffe1eb302" translate="yes" xml:space="preserve">
          <source>The function declaration makes it clear what the inputs and outputs to the function are.</source>
          <target state="translated">関数宣言では、関数への入力と出力が何であるかを明確にしています。</target>
        </trans-unit>
        <trans-unit id="36bd72a87a6fb51210593d16c9d3850d26ad2813" translate="yes" xml:space="preserve">
          <source>The function generated tests if the &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; passed belongs to this set or not. The result is to be used with string mixin. The intended usage area is aggressive optimization via meta programming in parser generators and the like.</source>
          <target state="translated">生成された関数は、渡された&lt;a href=&quot;#Code%20point&quot;&gt;コードポイント&lt;/a&gt;がこのセットに属しているかどうかをテストします。結果は文字列ミックスインで使用されます。使用目的は、パーサージェネレーターなどでのメタプログラミングによる積極的な最適化です。</target>
        </trans-unit>
        <trans-unit id="98e31cd639a66b786829a51b07b196c9eb02f441" translate="yes" xml:space="preserve">
          <source>The function is doing something impure, so mark it as impure. If there's a purity error, return true.</source>
          <target state="translated">この関数は何か不純なことをしているので、それを不純とマークします。純度エラーがあった場合は true を返します。</target>
        </trans-unit>
        <trans-unit id="78716a8e02a777fde55cd9f5bd9506b86f2cd433" translate="yes" xml:space="preserve">
          <source>The function is doing something that may allocate with the GC, so mark it as not nogc (not no-how).</source>
          <target state="translated">この関数はGCで割り当てられそうなことをしているので、nogcではない(ノーハウではない)とマークしておきます。</target>
        </trans-unit>
        <trans-unit id="1582435911618910fd1cebd4a56e5bade73d2f42" translate="yes" xml:space="preserve">
          <source>The function is doing something unsafe, so mark it as unsafe. If there's a safe error, return true.</source>
          <target state="translated">この関数は何か安全でないことをしているので、安全でないとマークします。安全なエラーの場合は true を返します。</target>
        </trans-unit>
        <trans-unit id="185793595bc4f7b5898c63f905d91abe291e2c5e" translate="yes" xml:space="preserve">
          <source>The function is explicitly annotated &lt;code&gt;@nogc&lt;/code&gt; because inference could fail, see &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=17084&quot;&gt;issue 17084&lt;/a&gt;.</source>
          <target state="translated">推論が失敗する可能性があるため、関数には明示的に &lt;code&gt;@nogc&lt;/code&gt; アノテーションが付けられています。&lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=17084&quot;&gt;問題17084を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="94377b90d447230e8a5ccf1a52d33d616f20136c" translate="yes" xml:space="preserve">
          <source>The function is intended to replace the hexadecimal literal strings starting with &lt;code&gt;'x'&lt;/code&gt;, which could be removed to simplify the core language.</source>
          <target state="translated">この関数は、 &lt;code&gt;'x'&lt;/code&gt; で始まる16進リテラル文字列を置き換えることを目的としています。これを削除すると、コア言語を簡略化できます。</target>
        </trans-unit>
        <trans-unit id="408608d2bfc199a6a551d83606a62872252fdf6d" translate="yes" xml:space="preserve">
          <source>The function overloads returning a string allocate their return values using the GC. The versions returning static arrays use pass-by-value for the return value, effectively avoiding dynamic allocation.</source>
          <target state="translated">文字列を返す関数のオーバーロードは、GC を使用して戻り値を割り当てます。静的配列を返すバージョンでは、動的な割り当てを効果的に回避するため、戻り値にパスバイ値を使用します。</target>
        </trans-unit>
        <trans-unit id="7b0e25cbd51eccc8cf3fde77bb9a906902973f49" translate="yes" xml:space="preserve">
          <source>The function parameter attributes &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;scope&lt;/code&gt; are used to track what happens to low-level pointers passed to functions. Such pointers include: raw pointers, arrays, &lt;code&gt;this&lt;/code&gt;, classes, &lt;code&gt;ref&lt;/code&gt; parameters, delegate/lazy parameters, and aggregates containing a pointer.</source>
          <target state="translated">関数パラメーター属性の &lt;code&gt;return&lt;/code&gt; と &lt;code&gt;scope&lt;/code&gt; は、関数に渡された低レベルポインターの動作を追跡するために使用されます。このようなポインターには、生のポインター、配列、 &lt;code&gt;this&lt;/code&gt; 、クラス、 &lt;code&gt;ref&lt;/code&gt; パラメーター、デリゲート/レイジーパラメーター、およびポインターを含む集計が含まれます。</target>
        </trans-unit>
        <trans-unit id="6e994bfc1a839ed290d4129f0f5733e981d5373e" translate="yes" xml:space="preserve">
          <source>The function returns a range containing the consecutive reduced values. If there is more than one &lt;code&gt;fun&lt;/code&gt;, the element type will be &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt; std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; containing one element for each &lt;code&gt;fun&lt;/code&gt;.</source>
          <target state="translated">この関数は、連続する削減された値を含む範囲を返します。 &lt;code&gt;fun&lt;/code&gt; が複数ある場合、要素タイプは、各 &lt;code&gt;fun&lt;/code&gt; に 1つの要素を含む&lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt; std.typecons.Tuple&lt;/code&gt; &lt;/a&gt;になります。</target>
        </trans-unit>
        <trans-unit id="f1de9581bb40aa0605e1d4f2b900b32c62cf6dcb" translate="yes" xml:space="preserve">
          <source>The function returns immediately, leaving the child process to execute in parallel with its parent. It is recommended to always call &lt;a href=&quot;#wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; on the returned &lt;a href=&quot;#Pid&quot;&gt;&lt;code&gt;Pid&lt;/code&gt;&lt;/a&gt; unless the process was spawned with &lt;code&gt;Config.detached&lt;/code&gt; flag, as detailed in the documentation for &lt;code&gt;wait&lt;/code&gt;.</source>
          <target state="translated">関数はすぐに戻り、子プロセスは親プロセスと並行して実行されます。それは、常にコールに推奨される&lt;a href=&quot;#wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;返さ上&lt;a href=&quot;#Pid&quot;&gt; &lt;code&gt;Pid&lt;/code&gt; &lt;/a&gt;プロセスが起動されていない限り &lt;code&gt;Config.detached&lt;/code&gt; のドキュメントで説明するように、フラグを &lt;code&gt;wait&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d1462ec35dc456ac6ff3045ecdc8148b89412c36" translate="yes" xml:space="preserve">
          <source>The function source code must be available to the compiler. Functions which exist in the source code only as extern declarations cannot be executed in CTFE.</source>
          <target state="translated">関数のソースコードは、コンパイラが利用可能である必要があります。ソースコード内に外部宣言としてしか存在しない関数は、CTFEでは実行できません。</target>
        </trans-unit>
        <trans-unit id="c99c9ccaa6aadf1ddb21d118ac9a2b39a2936c1d" translate="yes" xml:space="preserve">
          <source>The function that wants to measure speed.</source>
          <target state="translated">スピードを測りたい機能</target>
        </trans-unit>
        <trans-unit id="411ac38391245e7bd9f2d61489a0679e909d3705" translate="yes" xml:space="preserve">
          <source>The function to become the base of the speed.</source>
          <target state="translated">スピードのベースとなる機能。</target>
        </trans-unit>
        <trans-unit id="ca30c519a6a156f76c6573e841573612bc2aad51" translate="yes" xml:space="preserve">
          <source>The function to execute.</source>
          <target state="translated">実行する機能です。</target>
        </trans-unit>
        <trans-unit id="38560d673ec14174a5201f65e942b10ff886f6eb" translate="yes" xml:space="preserve">
          <source>The function to execute. This may be the actual function passed by the user to spawn itself, or may be a wrapper function.</source>
          <target state="translated">実行する関数。これは、ユーザーがスポーンするために渡された実際の関数であったり、ラッパー関数であったりします。</target>
        </trans-unit>
        <trans-unit id="67a64604c4717ec6e34e3f3a6e53ee63c3039ae1" translate="yes" xml:space="preserve">
          <source>The function used to check if &lt;code&gt;addr&lt;/code&gt; is marked.</source>
          <target state="translated">&lt;code&gt;addr&lt;/code&gt; がマークされているかどうかを確認するために使用される関数。</target>
        </trans-unit>
        <trans-unit id="a4a8105c562ae246a8ce7c12b0a3320ba9511dc7" translate="yes" xml:space="preserve">
          <source>The function used to generate the next time point in the range.</source>
          <target state="translated">範囲内の次の時間点を生成するために使用される関数です。</target>
        </trans-unit>
        <trans-unit id="dc715bdc2551fef5137debdc9a1fe82c19568021" translate="yes" xml:space="preserve">
          <source>The function used to generate the time points of the range over the interval.</source>
          <target state="translated">間隔上の範囲の時間点を生成するために使用される関数です。</target>
        </trans-unit>
        <trans-unit id="f3d2158936e817ae5d4b5a34d016e49a32ca1146" translate="yes" xml:space="preserve">
          <source>The function will not return if any enclosing finally clause does a return, goto or throw that exits the finally clause.</source>
          <target state="translated">この関数は、囲み込みの最終節が return,goto,throw で最終節を終了した場合には戻りません。</target>
        </trans-unit>
        <trans-unit id="46f3e02eaaa99bc9ca72c46c606ddf965d307189" translate="yes" xml:space="preserve">
          <source>The functionality closely follows the IEEE754-2008 standard for floating-point arithmetic, including the use of camelCase names rather than C99-style lower case names. All of these functions behave correctly when presented with an infinity or NaN.</source>
          <target state="translated">この機能は、C99スタイルの小文字の名前ではなく、キャメルケースの名前を使用するなど、浮動小数点演算のIEEE754-2008規格に忠実に従っています。これらの関数はすべて、無限大またはNaNが提示されたときに正しく動作します。</target>
        </trans-unit>
        <trans-unit id="a8b49dde8278905e1da61afa2345291851916bc1" translate="yes" xml:space="preserve">
          <source>The functionally is based on &lt;a href=&quot;http://curl.haxx.se/libcurl&quot;&gt;libcurl&lt;/a&gt;. LibCurl is licensed under an MIT/X derivative license.</source>
          <target state="translated">機能的には&lt;a href=&quot;http://curl.haxx.se/libcurl&quot;&gt;libcurlに&lt;/a&gt;基づいています。LibCurlはMIT / X派生ライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="2ff1dde920de616d6287f3db648daa34cd769c38" translate="yes" xml:space="preserve">
          <source>The functionally is based on &lt;a href=&quot;https://curl.haxx.se/libcurl&quot;&gt;libcurl&lt;/a&gt;. LibCurl is licensed under an MIT/X derivative license.</source>
          <target state="translated">機能的には&lt;a href=&quot;https://curl.haxx.se/libcurl&quot;&gt;libcurlに&lt;/a&gt;基づいています。LibCurlは、MIT / X派生ライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="4e9193abd91f293a360c49af75182f625a029338" translate="yes" xml:space="preserve">
          <source>The functions &lt;a href=&quot;#formatValue&quot;&gt;&lt;code&gt;formatValue&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unformatValue&quot;&gt;&lt;code&gt;unformatValue&lt;/code&gt;&lt;/a&gt; are used for the plumbing.</source>
          <target state="translated">関数&lt;a href=&quot;#formatValue&quot;&gt; &lt;code&gt;formatValue&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#unformatValue&quot;&gt; &lt;code&gt;unformatValue&lt;/code&gt; &lt;/a&gt;は、配管に使用されます。</target>
        </trans-unit>
        <trans-unit id="09d84b61f63134826318f5b038f0d9e7c6a89164" translate="yes" xml:space="preserve">
          <source>The functions &lt;a href=&quot;#multiwayMerge&quot;&gt;&lt;code&gt;multiwayMerge&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiwayUnion&quot;&gt;&lt;code&gt;multiwayUnion&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#setDifference&quot;&gt;&lt;code&gt;setDifference&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#setIntersection&quot;&gt;&lt;code&gt;setIntersection&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#setSymmetricDifference&quot;&gt;&lt;code&gt;setSymmetricDifference&lt;/code&gt;&lt;/a&gt; expect a range of sorted ranges as input.</source>
          <target state="translated">機能&lt;a href=&quot;#multiwayMerge&quot;&gt; &lt;code&gt;multiwayMerge&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#multiwayUnion&quot;&gt; &lt;code&gt;multiwayUnion&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#setDifference&quot;&gt; &lt;code&gt;setDifference&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#setIntersection&quot;&gt; &lt;code&gt;setIntersection&lt;/code&gt; は&lt;/a&gt;、&lt;a href=&quot;#setSymmetricDifference&quot;&gt; &lt;code&gt;setSymmetricDifference&lt;/code&gt; &lt;/a&gt;入力としてソート範囲の範囲を期待します。</target>
        </trans-unit>
        <trans-unit id="4fde7de03cdc04e15dde2a51577db6987e675d9f" translate="yes" xml:space="preserve">
          <source>The functions can use &lt;code&gt;@trusted&lt;/code&gt; instead of &lt;code&gt;@safe&lt;/code&gt;.</source>
          <target state="translated">関数が使用できる &lt;code&gt;@trusted&lt;/code&gt; の代わり &lt;code&gt;@safe&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="30a160975f83d4201f4fd65daf1113007bc807be" translate="yes" xml:space="preserve">
          <source>The gamma and related functions, and the error function are crucial for mathematical statistics. The Bessel and related functions arise in problems involving wave propagation (especially in optics). Other major categories of special functions include the elliptic integrals (related to the arc length of an ellipse), and the hypergeometric functions.</source>
          <target state="translated">ガンマ関数と関連関数、誤差関数は数学統計学にとって重要なものである。ベッセル関数とその関連関数は,波動伝搬の問題(特に光学)で用いられる.その他の特殊関数としては,楕円積分(楕円の円弧の長さに関係する),双幾何学関数などがあります.</target>
        </trans-unit>
        <trans-unit id="447281d1324337b15482dcfc848c6a78d28256cf" translate="yes" xml:space="preserve">
          <source>The gapped similarity at the current match length (initially 1, grows with each call to &lt;code&gt;popFront&lt;/code&gt;).</source>
          <target state="translated">現在の一致の長さでギャップのある類似性（最初は1、 &lt;code&gt;popFront&lt;/code&gt; を呼び出すたびに大きくなります）。</target>
        </trans-unit>
        <trans-unit id="05176e7bf5bf611688f908ea258370d40d6b3039" translate="yes" xml:space="preserve">
          <source>The garbage collector calls the destructor function when the object is deleted. The syntax is:</source>
          <target state="translated">ガベージコレクタは、オブジェクトが削除されたときにデストラクタ関数を呼び出します。構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8162594fc1e13b54530b98ac255177e2a9d2ab78" translate="yes" xml:space="preserve">
          <source>The garbage collector does not scan non-pointer fields for GC pointers.</source>
          <target state="translated">ガベージコレクタは、GC ポインタのためにポインタ以外のフィールドをスキャンしない。</target>
        </trans-unit>
        <trans-unit id="bace0715c82c9b149257399e18cc90537b20fbf1" translate="yes" xml:space="preserve">
          <source>The garbage collector does not scan the stacks of threads not created by the D Thread interface. Nor does it scan the data segments of other DLLs, etc.</source>
          <target state="translated">ガベージコレクタは、Dスレッドインターフェイスで作成されていないスレッドのスタックをスキャンしません。また、他のDLLなどのデータセグメントもスキャンしません。</target>
        </trans-unit>
        <trans-unit id="679912e5f590d3f8f03034fbcabdaff8e29c8cba" translate="yes" xml:space="preserve">
          <source>The garbage collector does not scan the stacks of threads not registered with the D runtime, nor does it scan the data segments of shared libraries that aren't registered with the D runtime.</source>
          <target state="translated">ガベージコレクタは、Dランタイムに登録されていないスレッドのスタックをスキャンしたり、Dランタイムに登録されていない共有ライブラリのデータセグメントをスキャンしたりしません。</target>
        </trans-unit>
        <trans-unit id="248f5f617e65210251e2aceaf897cfac6784a5ad" translate="yes" xml:space="preserve">
          <source>The garbage collector is not guaranteed to run the destructor for all unreferenced objects. Furthermore, the order in which the garbage collector calls destructors for unreferenced objects is not specified. This means that when the garbage collector calls a destructor for an object of a class that has members which are references to garbage collected objects, those references may no longer be valid. This means that destructors cannot reference sub objects. This rule does not apply to auto objects or objects destructed with &lt;a href=&quot;https://dlang.org/phobos/object.html#destroy&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt;, as the destructor is not being run by the garbage collector, meaning all references are valid.</source>
          <target state="translated">ガベージコレクターは、参照されていないすべてのオブジェクトに対してデストラクターを実行することは保証されていません。さらに、ガベージコレクターが参照されていないオブジェクトのデストラクタを呼び出す順序は指定されていません。つまり、ガベージコレクターが、ガベージコレクションされたオブジェクトへの参照であるメンバーを持つクラスのオブジェクトのデストラクタを呼び出すと、それらの参照は無効になる可能性があります。つまり、デストラクタはサブオブジェクトを参照できません。デストラクターはガベージコレクターによって実行されていない&lt;a href=&quot;https://dlang.org/phobos/object.html#destroy&quot;&gt; &lt;code&gt;destroy&lt;/code&gt; &lt;/a&gt;、すべての参照が有効であるため、このルールは自動オブジェクトまたはdestroyで破棄されたオブジェクトには適用されません。</target>
        </trans-unit>
        <trans-unit id="7ed0a2988d2028482af5b70f4886f714e874cd68" translate="yes" xml:space="preserve">
          <source>The garbage collector looks for roots in:</source>
          <target state="translated">ゴミ収集家は根っこの部分を探します。</target>
        </trans-unit>
        <trans-unit id="a61608c994e8531817d927f16b69cb4ec2652687" translate="yes" xml:space="preserve">
          <source>The general usage guideline is to keep regex complexity on the side of simplicity, as its capabilities reside in purely character-level manipulation. As such it's ill-suited for tasks involving higher level invariants like matching an integer number &lt;em&gt;bounded&lt;/em&gt; in an [a,b] interval. Checks of this sort of are better addressed by additional post-processing.</source>
          <target state="translated">一般的な使用方法のガイドラインは、その機能が純粋に文字レベルの操作にあるため、単純化の側で正規表現の複雑さを維持することです。そのため、[a、b]間隔で&lt;em&gt;区切ら&lt;/em&gt;れた整数の照合など、より高いレベルの不変条件を伴うタスクには適していません。この種のチェックは、追加の後処理によってより適切に対処されます。</target>
        </trans-unit>
        <trans-unit id="587ae2153e1cd24d01fed6ce88e2ec32ff8c2014" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;opAssign&lt;/code&gt; function has the following signature:</source>
          <target state="translated">生成された &lt;code&gt;opAssign&lt;/code&gt; 関数には、次のシグネチャがあります。</target>
        </trans-unit>
        <trans-unit id="e40de6a32624f7e6b5379975d2cd46fa3f2fa94f" translate="yes" xml:space="preserve">
          <source>The generated links to D symbols are relative if they have the same root package as the module being documented. If not, their URLs are preceded by a &lt;code&gt;&amp;amp;dollar;(DDOC_ROOT_pkg)&lt;/code&gt; macro, where &lt;code&gt;pkg&lt;/code&gt; is the root package of the symbol being linked to. Links to D symbols are generated with a &lt;code&gt;&amp;amp;dollar;(DOC_EXTENSION)&lt;/code&gt; macro after the module name. So the generated URL for &lt;code&gt;[Object]&lt;/code&gt; in the above example is as if you had written:</source>
          <target state="translated">生成されたDシンボルへのリンクは、ドキュメント化されているモジュールと同じルートパッケージを持っている場合、相対的です。そうでない場合、それらのURLの前には &lt;code&gt;&amp;amp;dollar;(DDOC_ROOT_pkg)&lt;/code&gt; マクロが付きます。ここで、 &lt;code&gt;pkg&lt;/code&gt; はリンク先のシンボルのルートパッケージです。Dシンボルへのリンクは、モジュール名の後に &lt;code&gt;&amp;amp;dollar;(DOC_EXTENSION)&lt;/code&gt; マクロを使用して生成されます。したがって、上記の例で生成された &lt;code&gt;[Object]&lt;/code&gt; のURLは、次のように記述した場合と同じです。</target>
        </trans-unit>
        <trans-unit id="b65a1da736509a9381ee000758f5d850e508e3e2" translate="yes" xml:space="preserve">
          <source>The generated links to D symbols are relative if they have the same root package as the module being documented. If not, their URLs are preceeded by a &lt;code&gt;&amp;amp;dollar;(DDOC_ROOT_pkg)&lt;/code&gt; macro, where &lt;code&gt;pkg&lt;/code&gt; is the root package of the symbol being linked to. Links to D symbols are generated with a &lt;code&gt;&amp;amp;dollar;(DOC_EXTENSION)&lt;/code&gt; macro after the module name. So the generated URL for &lt;code&gt;[Object]&lt;/code&gt; in the above example is as if you had written:</source>
          <target state="translated">ドキュメント化されているモジュールと同じルートパッケージがある場合、Dシンボルへの生成されたリンクは相対的です。そうでない場合は、URLの前に &lt;code&gt;&amp;amp;dollar;(DDOC_ROOT_pkg)&lt;/code&gt; マクロが付けられます。ここで、 &lt;code&gt;pkg&lt;/code&gt; はリンクされているシンボルのルートパッケージです。 Dシンボルへのリンクは、モジュール名の後に &lt;code&gt;&amp;amp;dollar;(DOC_EXTENSION)&lt;/code&gt; マクロを使用して生成されます。したがって、上記の例で &lt;code&gt;[Object]&lt;/code&gt; に対して生成されたURL は、次のように記述されています。</target>
        </trans-unit>
        <trans-unit id="adc505580a3e3a25fed9b9c63e6f0745b68f08fa" translate="yes" xml:space="preserve">
          <source>The getopt module implements a &lt;code&gt;getopt&lt;/code&gt; function, which adheres to the POSIX syntax for command line options. GNU extensions are supported in the form of long options introduced by a double dash (&quot;--&quot;). Support for bundling of command line options, as was the case with the more traditional single-letter approach, is provided but not enabled by default.</source>
          <target state="translated">getoptモジュールは、コマンドラインオプションのPOSIX構文に準拠する &lt;code&gt;getopt&lt;/code&gt; 関数を実装します。GNU拡張機能は、2つのダッシュ（ &quot;-&quot;）によって導入される長いオプションの形式でサポートされます。コマンドラインオプションのバンドルのサポートは、従来の1文字のアプローチと同様に提供されていますが、デフォルトでは有効になっていません。</target>
        </trans-unit>
        <trans-unit id="38436bf13581d96cda14b3d712a9839eef76ade6" translate="yes" xml:space="preserve">
          <source>The given HMAC token is compared with the expected token using the &lt;code&gt;==&lt;/code&gt; string comparison, which returns &lt;code&gt;false&lt;/code&gt; as soon as the first wrong element is found. If a wrong element is found, then a rejection is sent back to the sender.</source>
          <target state="translated">指定されたHMACトークンは、 &lt;code&gt;==&lt;/code&gt; 文字列比較を使用して予期されるトークンと比較されます。これは、最初の誤った要素が見つかるとすぐに &lt;code&gt;false&lt;/code&gt; を返します。間違った要素が見つかると、拒否が送信者に送り返されます。</target>
        </trans-unit>
        <trans-unit id="262b74b064f7ed4973ae2acf3633f01634ced6b1" translate="yes" xml:space="preserve">
          <source>The given array exposed to a standard D array.</source>
          <target state="translated">与えられた配列が標準のD配列に晒される。</target>
        </trans-unit>
        <trans-unit id="8bc950de5698dccabc99a10c52424998aec0c7a6" translate="yes" xml:space="preserve">
          <source>The given array of &lt;code&gt;char&lt;/code&gt; or random-access range of &lt;code&gt;char&lt;/code&gt; or &lt;code&gt;ubyte&lt;/code&gt; is expected to be in the format specified in &lt;a href=&quot;http://tools.ietf.org/html/rfc5322&quot;&gt;RFC 5322&lt;/a&gt; section 3.3 with the grammar rule</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; の指定された配列、または &lt;code&gt;char&lt;/code&gt; または &lt;code&gt;ubyte&lt;/code&gt; のランダムアクセス範囲は、&lt;a href=&quot;http://tools.ietf.org/html/rfc5322&quot;&gt;RFC 5322&lt;/a&gt;セクション3.3で指定されている形式であり、文法規則であることが期待されます。</target>
        </trans-unit>
        <trans-unit id="8e4b65ce211d4254d0e9eed3b78782f1021e49fe" translate="yes" xml:space="preserve">
          <source>The given array of &lt;code&gt;char&lt;/code&gt; or random-access range of &lt;code&gt;char&lt;/code&gt; or &lt;code&gt;ubyte&lt;/code&gt; is expected to be in the format specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc5322&quot;&gt;RFC 5322&lt;/a&gt; section 3.3 with the grammar rule</source>
          <target state="translated">指定された &lt;code&gt;char&lt;/code&gt; の配列、または &lt;code&gt;char&lt;/code&gt; または &lt;code&gt;ubyte&lt;/code&gt; のランダムアクセス範囲は、RFC5322セクション3.3で文法規則で指定された形式であることが期待され&lt;a href=&quot;https://tools.ietf.org/html/rfc5322&quot;&gt;ます。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="12501a73a540c686a37f4823a66a820dabde2f39" translate="yes" xml:space="preserve">
          <source>The glob pattern</source>
          <target state="translated">グローブパターン</target>
        </trans-unit>
        <trans-unit id="496ff2fc921b0a5cf99d9a4227ed4bf96d90c632" translate="yes" xml:space="preserve">
          <source>The grapheme cluster represents a horizontally segmentable unit of text, consisting of some grapheme base (which may consist of a Korean syllable) together with any number of nonspacing marks applied to it.</source>
          <target state="translated">この場合、その中には韓国語の音節で構成されている場合もありますが、それに適用されている任意の数のノンスペーシングマークが含まれています。</target>
        </trans-unit>
        <trans-unit id="37af0a5e629675000a6dfa7103d088d3ddd62dac" translate="yes" xml:space="preserve">
          <source>The greatest common divisor of the given arguments.</source>
          <target state="translated">与えられた引数の最大公約数。</target>
        </trans-unit>
        <trans-unit id="8b3e1c284ef7e8df3ea6a61551c667aeed265141" translate="yes" xml:space="preserve">
          <source>The hack for bugzilla 4820 case is still questionable. Perhaps would have to handle a delegate expression with 'null' context properly in front-end.</source>
          <target state="translated">bugzilla 4820 の場合のハックはまだ疑問が残ります。おそらく、フロントエンドで 'null' コンテキストを持つデリゲート式を適切に処理しなければならないでしょう。</target>
        </trans-unit>
        <trans-unit id="38f5b63c8a583d4d295cf756159c50490e54c13e" translate="yes" xml:space="preserve">
          <source>The handle to an array is specified by naming the array, as in p, s or a:</source>
          <target state="translated">配列のハンドルは、配列の名前を指定することで指定します。</target>
        </trans-unit>
        <trans-unit id="06b9457ea3f4fa7b2cb019db8602c7584d3ac0a3" translate="yes" xml:space="preserve">
          <source>The handler to run if the expression throwed.</source>
          <target state="translated">式がスローされた場合に実行されるハンドラ。</target>
        </trans-unit>
        <trans-unit id="bb782c4330787617d4fce577aae35ea8ac20fb68" translate="yes" xml:space="preserve">
          <source>The hash function RIPEMD-160</source>
          <target state="translated">ハッシュ関数RIPEMD-160</target>
        </trans-unit>
        <trans-unit id="1a548321e03af2d162f5b6fb8172e4e75095c3be" translate="yes" xml:space="preserve">
          <source>The hashBlockSize and digestSize are in bits. However, it's likely easier to simply use the convenience aliases: SHA1, SHA224, SHA256, SHA384, SHA512, SHA512_224 and SHA512_256.</source>
          <target state="translated">hashBlockSize と digestSize はビット単位です。しかし、単純に便利なエイリアスを使った方が簡単そうです。SHA1、SHA224、SHA256、SHA384、SHA512、SHA512_224、SHA512_256です。</target>
        </trans-unit>
        <trans-unit id="71c022924374f373de8247c9ee1154db2efdf429" translate="yes" xml:space="preserve">
          <source>The header can also be left empty if the input contains a header row and all columns should be iterated. The header from the input can always be accessed from the &lt;code&gt;header&lt;/code&gt; field.</source>
          <target state="translated">入力にヘッダー行が含まれ、すべての列を反復する必要がある場合は、ヘッダーを空のままにすることもできます。入力のヘッダーには、常に &lt;code&gt;header&lt;/code&gt; フィールドからアクセスできます。</target>
        </trans-unit>
        <trans-unit id="23806478590a3d73211d3f9cfeab9ec2c30f42f5" translate="yes" xml:space="preserve">
          <source>The header of &lt;a href=&quot;std_range&quot;&gt;&lt;code&gt;std.range&lt;/code&gt;&lt;/a&gt; for tutorials on ranges.</source>
          <target state="translated">範囲に関するチュートリアルの&lt;a href=&quot;std_range&quot;&gt; &lt;code&gt;std.range&lt;/code&gt; &lt;/a&gt;のヘッダー。</target>
        </trans-unit>
        <trans-unit id="a73e614d706951342951d40aeeb01697424cadb7" translate="yes" xml:space="preserve">
          <source>The headers read from a successful response.</source>
          <target state="translated">成功したレスポンスから読み込まれたヘッダ。</target>
        </trans-unit>
        <trans-unit id="1ba658c4da138d5aa67105b1d7cc27b3cfde13e6" translate="yes" xml:space="preserve">
          <source>The highlighting macros start with &lt;code&gt;DDOC_&lt;/code&gt;. They control the formatting of individual parts of the presentation.</source>
          <target state="translated">強調表示マクロは &lt;code&gt;DDOC_&lt;/code&gt; で始まります。プレゼンテーションの個々の部分のフォーマットを制御します。</target>
        </trans-unit>
        <trans-unit id="7850bd95e95bab4d64e3c6d1c398982e32639f37" translate="yes" xml:space="preserve">
          <source>The hook to wrap</source>
          <target state="translated">包み込むフック</target>
        </trans-unit>
        <trans-unit id="8f90c58c05f3db77fe848d30cab0798e3f6b00e3" translate="yes" xml:space="preserve">
          <source>The hook's members are looked up statically in a Design by Introspection manner and are all optional. The table below illustrates the members that a hook type may define and their influence over the behavior of the &lt;code&gt;Checked&lt;/code&gt; type using it. In the table, &lt;code&gt;hook&lt;/code&gt; is an alias for &lt;code&gt;Hook&lt;/code&gt; if the type &lt;code&gt;Hook&lt;/code&gt; does not introduce any state, or an object of type &lt;code&gt;Hook&lt;/code&gt; otherwise.</source>
          <target state="translated">フックのメンバーは、イントロスペクションによってデザインで静的に検索され、すべてオプションです。以下の表は、フックタイプが定義できるメンバーと、それを使用する &lt;code&gt;Checked&lt;/code&gt; タイプの動作への影響を示しています。表では、 &lt;code&gt;hook&lt;/code&gt; は、タイプ &lt;code&gt;Hook&lt;/code&gt; が状態を導入しない場合は &lt;code&gt;Hook&lt;/code&gt; エイリアスであり、それ以外の場合はタイプ &lt;code&gt;Hook&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="c351eba3d013581a191d3a885a49968be29fd469" translate="yes" xml:space="preserve">
          <source>The hour of the day to set this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;'s hour to.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の時間を設定する日の時間。</target>
        </trans-unit>
        <trans-unit id="66136c779346b036c2def79ac7f0dfb73004b7bb" translate="yes" xml:space="preserve">
          <source>The hour of the day to set this &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt;'s hour to.</source>
          <target state="translated">この&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; &lt;/a&gt;の時間を設定する日の時間。</target>
        </trans-unit>
        <trans-unit id="a6a4e60304c50d5e98aa115b78722f98c55537a4" translate="yes" xml:space="preserve">
          <source>The hour portion of the time;</source>
          <target state="translated">時間の部分です。</target>
        </trans-unit>
        <trans-unit id="ae576aa7ec4954f0a9eb6186b74173801d58e446" translate="yes" xml:space="preserve">
          <source>The hours to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s hour to.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の時間を設定する時間。</target>
        </trans-unit>
        <trans-unit id="dc9947af90e8e00095ff57d0a5f1abb3e951dbc5" translate="yes" xml:space="preserve">
          <source>The idea being these are compatible with C structs.</source>
          <target state="translated">これらはC構造体と互換性があります。</target>
        </trans-unit>
        <trans-unit id="1355f078be2cb8440aa75f9a09689cdae9f0217b" translate="yes" xml:space="preserve">
          <source>The idea of a contract is simple - it's just an expression that must evaluate to true. If it does not, the contract is broken, and by definition, the program has a bug in it. Contracts form part of the specification for a program, moving it from the documentation to the code itself. And as every programmer knows, documentation tends to be incomplete, out of date, wrong, or non-existent. Moving the contracts into the code makes them verifiable against the program.</source>
          <target state="translated">契約の考え方は単純で、真に評価されなければならない式です。もしそうでなければ、契約は破棄され、定義上、そのプログラムにはバグがあることになります。契約はプログラムの仕様の一部を形成し、ドキュメントからコードそのものへと移行します。そして、すべてのプログラマが知っているように、ドキュメントは不完全であったり、古いものであったり、間違っていたり、存在しないものである傾向があります。契約書をコードに移すことで、プログラムとの照合が可能になります。</target>
        </trans-unit>
        <trans-unit id="f6757769fd791ee402dbfe3e43c1aa10845db21c" translate="yes" xml:space="preserve">
          <source>The identity operator &lt;code&gt;is&lt;/code&gt; cannot be overloaded.</source>
          <target state="translated">アイデンティティ演算子 &lt;code&gt;is&lt;/code&gt; オーバーロードできません。</target>
        </trans-unit>
        <trans-unit id="1a6dd428d8629e97cfcace7f86b78f24c85c36c4" translate="yes" xml:space="preserve">
          <source>The imaginary part of the number.</source>
          <target state="translated">数の虚数部。</target>
        </trans-unit>
        <trans-unit id="1ac7f7e21c56da918de0900c242a59f862e477cf" translate="yes" xml:space="preserve">
          <source>The immutable applies to the type within the following parentheses. So, while &lt;code&gt;s&lt;/code&gt; can be assigned new values, the contents of &lt;code&gt;s[]&lt;/code&gt; cannot be:</source>
          <target state="translated">不変は、次の括弧内のタイプに適用されます。したがって、 &lt;code&gt;s&lt;/code&gt; には新しい値を割り当てることができますが、 &lt;code&gt;s[]&lt;/code&gt; 内容を次のようにすることはできません。</target>
        </trans-unit>
        <trans-unit id="b076480db50c8a69f17ceccfb8074a2146342dec" translate="yes" xml:space="preserve">
          <source>The immutable array.</source>
          <target state="translated">不変の配列。</target>
        </trans-unit>
        <trans-unit id="d4da7504d70ac035ecf312cd124c3e9b875475b7" translate="yes" xml:space="preserve">
          <source>The implementation exploits properties of types and operations to minimize additional work.</source>
          <target state="translated">この実装では、型と操作のプロパティを利用して、追加作業を最小限に抑えます。</target>
        </trans-unit>
        <trans-unit id="94333a362aef71aa736007c1291437cf4a5d5675" translate="yes" xml:space="preserve">
          <source>The implementation guarantees that all threads simultaneously calling initOnce with the same var argument block until var is fully initialized. All side-effects of init are globally visible afterwards.</source>
          <target state="translated">実装は、var が完全に初期化されるまで、同じ var 引数ブロックで initOnce をすべてのスレッドが同時に呼び出すことを保証します。initのすべての副作用は、その後グローバルに表示されます。</target>
        </trans-unit>
        <trans-unit id="2e2b0dbd8c35c5a1541392596f49b59f590b7d4b" translate="yes" xml:space="preserve">
          <source>The implementation is available as a public member.</source>
          <target state="translated">実装は公開会員として利用可能です。</target>
        </trans-unit>
        <trans-unit id="61a0fdac2dd135b95e81234f7a42c96423c9eb12" translate="yes" xml:space="preserve">
          <source>The implementation is based on the pseudocode in Fig. 4 of the paper &lt;a href=&quot;http://jmlr.csail.mit.edu/papers/volume6/rousu05a/rousu05a.pdf&quot;&gt;&quot;Efﬁcient Computation of Gapped Substring Kernels on Large Alphabets&quot;&lt;/a&gt; by Rousu et al., with additional algorithmic and systems-level optimizations.</source>
          <target state="translated">実装は、Rousuらによる論文&lt;a href=&quot;http://jmlr.csail.mit.edu/papers/volume6/rousu05a/rousu05a.pdf&quot;&gt;「大きなアルファベットのギャップ付き部分文字列カーネルの効率的な計算」の&lt;/a&gt;図4の疑似コードに基づいており、アルゴリズムとシステムレベルの最適化が追加されています。</target>
        </trans-unit>
        <trans-unit id="c3c79f00444b1a8f6b8dd0d247228e66376bb4b5" translate="yes" xml:space="preserve">
          <source>The implementation may handle the case of the first</source>
          <target state="translated">の場合を処理してもよい。</target>
        </trans-unit>
        <trans-unit id="3f62d25116bc0232c42a3fb96db6f12be7eef293" translate="yes" xml:space="preserve">
          <source>The implementations of all predefined macros are implementation-defined. The reference implementation's macro definitions can be found &lt;a href=&quot;https://github.com/dlang/dmd/blob/master/res/default_ddoc_theme.ddoc&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">すべての定義済みマクロの実装は実装定義です。リファレンス実装のマクロ定義は&lt;a href=&quot;https://github.com/dlang/dmd/blob/master/res/default_ddoc_theme.ddoc&quot;&gt;ここにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ce44ea558c01cd44607fe7bfdaba1c3db8da7616" translate="yes" xml:space="preserve">
          <source>The implicit conversions of built-in scalar types can be explicitly represented by using function call syntax. For example:</source>
          <target state="translated">組み込みのスカラ型の暗黙の変換は,関数呼び出し構文を用いて明示的に表現することができます.例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8663ba6f06eeb782a371db21df4acbb1af0c444b" translate="yes" xml:space="preserve">
          <source>The importance of component programming (properties, signals and slots, etc)</source>
          <target state="translated">コンポーネントプログラミングの重要性(プロパティ、信号、スロットなど</target>
        </trans-unit>
        <trans-unit id="c5712d89ed6b6b5326913e6635b003b614c7a5c4" translate="yes" xml:space="preserve">
          <source>The imports are looked up to satisfy any unresolved symbols at that scope. Imported symbols may hide symbols from outer scopes.</source>
          <target state="translated">インポートされたシンボルは、そのスコープで未解決のシンボルを満たすように検索されます。インポートされたシンボルは、外部スコープからシンボルを隠すことができます。</target>
        </trans-unit>
        <trans-unit id="28c93ed79edf143da68c0f3519f73741ba79046d" translate="yes" xml:space="preserve">
          <source>The index of the element that should be in sorted position after the function is done.</source>
          <target state="translated">関数が実行された後、ソートされた位置にあるべき要素のインデックス。</target>
        </trans-unit>
        <trans-unit id="7b8cbc4deacf04830f34d38905f8ffd00330c728" translate="yes" xml:space="preserve">
          <source>The index of the first encounter of the maximum in &lt;code&gt;range&lt;/code&gt;. If the &lt;code&gt;range&lt;/code&gt; is empty, -1 is returned.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; の最大値の最初の遭遇のインデックス。 &lt;code&gt;range&lt;/code&gt; が空の場合、-1が返されます。</target>
        </trans-unit>
        <trans-unit id="1a84eb9548c30b563a95a1fcfb270886bdd52d9e" translate="yes" xml:space="preserve">
          <source>The index of the first encounter of the minimum element in &lt;code&gt;range&lt;/code&gt;. If the &lt;code&gt;range&lt;/code&gt; is empty, -1 is returned.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; 最小要素の最初の遭遇のインデックス。 &lt;code&gt;range&lt;/code&gt; が空の場合、-1が返されます。</target>
        </trans-unit>
        <trans-unit id="33a0038a0fcaf095d5057aead72f83713739fc8b" translate="yes" xml:space="preserve">
          <source>The index of the last occurrence of &lt;code&gt;c&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt;. If &lt;code&gt;c&lt;/code&gt; is not found, then &lt;code&gt;-1&lt;/code&gt; is returned. The &lt;code&gt;startIdx&lt;/code&gt; slices &lt;code&gt;s&lt;/code&gt; in the following way &lt;code&gt;s[0 .. startIdx]&lt;/code&gt;. &lt;code&gt;startIdx&lt;/code&gt; represents a codeunit index in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 内の最後の &lt;code&gt;c&lt;/code&gt; のインデックス。 &lt;code&gt;c&lt;/code&gt; が見つからない場合は、 &lt;code&gt;-1&lt;/code&gt; が返されます。 &lt;code&gt;startIdx&lt;/code&gt; のスライス &lt;code&gt;s&lt;/code&gt; 次の方法で &lt;code&gt;s[0 .. startIdx]&lt;/code&gt; 。 &lt;code&gt;startIdx&lt;/code&gt; は、 &lt;code&gt;s&lt;/code&gt; のコードユニットインデックスを表します。</target>
        </trans-unit>
        <trans-unit id="c2e5baf3f6abe9b83760e32cef1632ac5f67ea47" translate="yes" xml:space="preserve">
          <source>The index of the pivot for partitioning, must be less than &lt;code&gt;r.length&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;r.length&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">パーティショニングのためのピボットの指標は、以下でなければならない &lt;code&gt;r.length&lt;/code&gt; 又は &lt;code&gt;0&lt;/code&gt; 場合 &lt;code&gt;r.length&lt;/code&gt; である &lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f4e8d4da6e42c851e373823697d10ed8eae4adf3" translate="yes" xml:space="preserve">
          <source>The index of the type among &lt;code&gt;AllowedTypesParam&lt;/code&gt;, zero-based.</source>
          <target state="translated">0 から &lt;code&gt;AllowedTypesParam&lt;/code&gt; 間の型のインデックス。</target>
        </trans-unit>
        <trans-unit id="6f4d7d5591308d1987c179c707865f7263b2522b" translate="yes" xml:space="preserve">
          <source>The index of this archive member within the archive.</source>
          <target state="translated">アーカイブ内のこのアーカイブメンバーのインデックス。</target>
        </trans-unit>
        <trans-unit id="6bca3732803cf0cac5bd51a87fe2e1e77dd22909" translate="yes" xml:space="preserve">
          <source>The index of this archive member within the archive. Set this to a different value for reordering the members of an archive.</source>
          <target state="translated">アーカイブ内のこのアーカイブメンバーのインデックス。アーカイブ内のメンバーを並べ替える場合は、これを別の値に設定します。</target>
        </trans-unit>
        <trans-unit id="9b3efb64d9c8c3a8462cc2762d6a92ac26c24dcc" translate="yes" xml:space="preserve">
          <source>The index starts at &lt;code&gt;start&lt;/code&gt; and is incremented by one on every iteration.</source>
          <target state="translated">インデックスは &lt;code&gt;start&lt;/code&gt; から始まり、反復ごとに1ずつ増加します。</target>
        </trans-unit>
        <trans-unit id="86fe7372a9779ec608c645bda74b3617bd2f68d1" translate="yes" xml:space="preserve">
          <source>The index to start reading from (instead of starting at the front). If index is a pointer, then it is updated to the index after the bytes read. The overloads with index are only available if &lt;code&gt;hasSlicing!R&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">（先頭から開始するのではなく）読み取りを開始するインデックス。インデックスがポインタの場合、バイトが読み込まれた後にインデックスに更新されます。インデックス付きのオーバーロードは、 &lt;code&gt;hasSlicing!R&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="3b0d5226f25947ab0cd2172717539dced2cf1ca0" translate="yes" xml:space="preserve">
          <source>The index to start writing to. If index is a pointer, then it is updated to the index after the bytes read.</source>
          <target state="translated">書き込みを開始するインデックス。indexがポインタの場合は、バイトが読み込まれた後にインデックスに更新されます。</target>
        </trans-unit>
        <trans-unit id="4dd9df4788f29de75fb62d913aea700844f5ed25" translate="yes" xml:space="preserve">
          <source>The index.</source>
          <target state="translated">インデックス。</target>
        </trans-unit>
        <trans-unit id="f9ffb074b766c5938ff8b7357963618eaf462bcb" translate="yes" xml:space="preserve">
          <source>The indexed range. If rs consists of only one range, the return type is an alias of that range's type.</source>
          <target state="translated">インデックス化された範囲。rsが1つの範囲のみで構成されている場合、戻り値の型はその範囲の型のエイリアスとなります。</target>
        </trans-unit>
        <trans-unit id="619765ffdaa0071187a8f77abd362e7dda091d2c" translate="yes" xml:space="preserve">
          <source>The inference is done by determining if the function body follows the rules of the particular attribute.</source>
          <target state="translated">推論は、関数本体が特定の属性のルールに従っているかどうかを判断することで行われます。</target>
        </trans-unit>
        <trans-unit id="44470f7ce0660d4121c31a312118ccb100fd5b58" translate="yes" xml:space="preserve">
          <source>The initial count for the semaphore.</source>
          <target state="translated">セマフォの初期カウント。</target>
        </trans-unit>
        <trans-unit id="8c9e853ca955ba71f49e1626fd9e59d97a172b5c" translate="yes" xml:space="preserve">
          <source>The initial range wrapped as a &lt;code&gt;SortedRange&lt;/code&gt; with its predicates converted to an equivalent single predicate.</source>
          <target state="translated">述語が同等の単一述語に変換された &lt;code&gt;SortedRange&lt;/code&gt; としてラップされた初期範囲。</target>
        </trans-unit>
        <trans-unit id="47bf51e4f2c2e73e2360a982a3dcd26ed977c3bb" translate="yes" xml:space="preserve">
          <source>The initial range wrapped as a &lt;code&gt;SortedRange&lt;/code&gt; with the predicate &lt;code&gt;(a, b) =&amp;gt; binaryFun!less(transform(a), transform(b))&lt;/code&gt;.</source>
          <target state="translated">述語 &lt;code&gt;(a, b) =&amp;gt; binaryFun!less(transform(a), transform(b))&lt;/code&gt; &lt;code&gt;SortedRange&lt;/code&gt; としてラップされた初期範囲。</target>
        </trans-unit>
        <trans-unit id="ae187df68ec47146dca1715d3e3c373579beb355" translate="yes" xml:space="preserve">
          <source>The initial range wrapped as a &lt;code&gt;SortedRange&lt;/code&gt; with the predicate &lt;code&gt;binaryFun!less&lt;/code&gt;.</source>
          <target state="translated">ラップ初期範囲 &lt;code&gt;SortedRange&lt;/code&gt; 述語で &lt;code&gt;binaryFun!less&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="80d1aad4ad1e534532ce1e885f47d8eb7c78b11f" translate="yes" xml:space="preserve">
          <source>The initial size of each buffer. If &lt;code&gt;next&lt;/code&gt; takes its array by reference, it may resize the buffers.</source>
          <target state="translated">各バッファーの初期サイズ。場合は &lt;code&gt;next&lt;/code&gt; 参照によりその配列を受け取り、それはバッファのサイズを変更することがあります。</target>
        </trans-unit>
        <trans-unit id="06bcd9aed8f8362952958dfe41f57dcc25fe7b79" translate="yes" xml:space="preserve">
          <source>The initialization expression for the type.</source>
          <target state="translated">型の初期化式。</target>
        </trans-unit>
        <trans-unit id="ef4a846934e7e3a7c6fada2c58784a67e938dc53" translate="yes" xml:space="preserve">
          <source>The initializer for a manifest constant is evaluated using compile time function evaluation.</source>
          <target state="translated">マニフェスト定数のイニシャライザは、コンパイル時の関数評価を使用して評価されます。</target>
        </trans-unit>
        <trans-unit id="4866f78cdd0450f210abe845a0008dc25126137c" translate="yes" xml:space="preserve">
          <source>The initializer for a non-local immutable declaration must be evaluatable at compile time:</source>
          <target state="translated">非ローカル不変宣言のイニシャライザは、コンパイル時に評価可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="c3ff76d4230d39e88bec6a17e3fa23c6428b640f" translate="yes" xml:space="preserve">
          <source>The initializer for a non-static local immutable declaration is evaluated at run time:</source>
          <target state="translated">非静的ローカル不変宣言のイニシャライザは、実行時に評価されます。</target>
        </trans-unit>
        <trans-unit id="8f27ed7b518832024e3d6a15cbe377f8e47f39ab" translate="yes" xml:space="preserve">
          <source>The initializer for a static variable must be evaluatable at compile time, and they are initialized upon the start of the thread (or the start of the program for &lt;code&gt;__gshared&lt;/code&gt;). There are no static constructors or static destructors for static local variables.</source>
          <target state="translated">静的変数の初期化子はコンパイル時に評価可能である必要があり、スレッドの開始時（または &lt;code&gt;__gshared&lt;/code&gt; のプログラムの開始時）に初期化されます。静的ローカル変数には、静的コンストラクターや静的デストラクターはありません。</target>
        </trans-unit>
        <trans-unit id="56398784568892251b9dcc7b9a121fdad0fc1209" translate="yes" xml:space="preserve">
          <source>The inout forms a wildcard that stands in for any of mutable, const, immutable, inout, or inout const. When the function is called, the inout of the return type is changed to whatever the mutable, const, immutable, inout, or inout const status of the argument type to the parameter inout was.</source>
          <target state="translated">inoutは、mutable、const、immutable、inout、またはinout constのいずれかの代わりになるワイルドカードを形成します。関数が呼び出されると、戻り値の型の inout は、パラメータ inout に対する引数型の状態が mutable,const,immutable,inout,inout const の何れであったかに変更されます。</target>
        </trans-unit>
        <trans-unit id="47e39fe3c6321bc48452728017762afb10e65931" translate="yes" xml:space="preserve">
          <source>The inout in the return type is then rewritten to be the inout matched qualifiers:</source>
          <target state="translated">そして、リターン型のinoutは、inoutにマッチした修飾子に書き換えられます。</target>
        </trans-unit>
        <trans-unit id="894e5ecc4ff73411cc66384f9e949e3263a04d5e" translate="yes" xml:space="preserve">
          <source>The input data is too long (There's no guarantee the first part of the data is valid)</source>
          <target state="translated">入力データが長すぎる(データの最初の部分が有効である保証はありません</target>
        </trans-unit>
        <trans-unit id="37721cea9b7ff856cc5a0d72da55bfcef8342f2c" translate="yes" xml:space="preserve">
          <source>The input elements. If there are less elements than the specified length of the static array, the rest of it is default-initialized. If there are more than specified, the first elements up to the specified length are used.</source>
          <target state="translated">入力された要素。静的配列の指定された長さよりも少ない要素があれば、それ以外の要素はデフォルトで初期化されます。指定された長さ以上の要素がある場合は、指定された長さまでの最初の要素が使用されます。</target>
        </trans-unit>
        <trans-unit id="4b42c37fa56b476654b6a22d064c38aab28dcdfc" translate="yes" xml:space="preserve">
          <source>The input is returned.</source>
          <target state="translated">入力が返されます。</target>
        </trans-unit>
        <trans-unit id="fb78206bd59b576b51359aab6e37d1fe64780809" translate="yes" xml:space="preserve">
          <source>The input may have originated from &lt;code&gt;U[]&lt;/code&gt; or &lt;code&gt;immutable(U)[]&lt;/code&gt;, so it may be actually shared or not. Returning an unqualified affix may result in race conditions, whereas returning a &lt;code&gt;shared&lt;/code&gt; affix may result in inadvertent sharing of mutable thread-local data across multiple threads. So the returned type is conservatively &lt;code&gt;ref const&lt;/code&gt;.</source>
          <target state="translated">入力は &lt;code&gt;U[]&lt;/code&gt; または &lt;code&gt;immutable(U)[]&lt;/code&gt; から発生した可能性があるため、実際に共有されているかどうかは不明です。修飾されていない接辞を返すと競合状態が発生する可能性がありますが、 &lt;code&gt;shared&lt;/code&gt; 接辞を返すと、複数のスレッド間で変更可能なスレッドローカルデータが誤って共有される可能性があります。したがって、返される型は控えめに &lt;code&gt;ref const&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ab7802e78bae021ec9f77bb19cdbefc46c138fde" translate="yes" xml:space="preserve">
          <source>The input range being passed through.</source>
          <target state="translated">通過している入力範囲です。</target>
        </trans-unit>
        <trans-unit id="c0225247a221452c012002a0bc4a76423e77fd6b" translate="yes" xml:space="preserve">
          <source>The input range must not be empty.</source>
          <target state="translated">入力範囲は空であってはなりません。</target>
        </trans-unit>
        <trans-unit id="786f6ba29b51fa6818ec422c83e424f885e18b3d" translate="yes" xml:space="preserve">
          <source>The input range set up to parse one line at a time into a record tuple.</source>
          <target state="translated">1行ずつレコードタプルにパースするための入力範囲を設定します。</target>
        </trans-unit>
        <trans-unit id="4c83aa414329fad18718e6fa488a3b442df22d1b" translate="yes" xml:space="preserve">
          <source>The input range to check.</source>
          <target state="translated">チェックする入力範囲です。</target>
        </trans-unit>
        <trans-unit id="4dd476cc824391e088069cbddbb750e2eef61f40" translate="yes" xml:space="preserve">
          <source>The input text string s is formed into a paragraph by breaking it up into a sequence of lines, delineated by \n, such that the number of columns is not exceeded on each line. The last line is terminated with a \n.</source>
          <target state="translated">入力された文字列sは、列数が各行を超えないように、\nで区切られた一連の行に分割されて、段落になる。最後の行は、&quot;\n &quot;で終了する。</target>
        </trans-unit>
        <trans-unit id="93424042a1977cf3da75467c8916a2a7eddec8a8" translate="yes" xml:space="preserve">
          <source>The input to this function MUST be a valid code point.</source>
          <target state="translated">この関数への入力は有効なコードポイントでなければなりません(MUST)。</target>
        </trans-unit>
        <trans-unit id="44b890bb7f50ef5e291775cda4bfde289081100b" translate="yes" xml:space="preserve">
          <source>The input to this function MUST be a valid code point. This is enforced by the function's in-contract.</source>
          <target state="translated">この関数への入力は有効なコードポイントでなければなりません(MUST)。これは、この関数の契約書によって強制されます。</target>
        </trans-unit>
        <trans-unit id="c67615e6ffc16592b049d69cbff653f9fe85f2f3" translate="yes" xml:space="preserve">
          <source>The input to this function MUST be valid XML. This is enforced by DocumentParser's in contract.</source>
          <target state="translated">この関数への入力は有効なXMLでなければなりません(MUST)。これはDocumentParserの契約で強制されます。</target>
        </trans-unit>
        <trans-unit id="4bb4a25af5340195ef134855f808d1711e956a9a" translate="yes" xml:space="preserve">
          <source>The input to this function MUST be valid XML. This is enforced by the function's in contract.</source>
          <target state="translated">この関数への入力は有効なXMLでなければなりません(MUST)。これは、この関数のインコントラクトによって強制されます。</target>
        </trans-unit>
        <trans-unit id="323b8c9102f07dbc17e6156b32bdb18e8608c8b5" translate="yes" xml:space="preserve">
          <source>The input to this function MUST be validly encoded.</source>
          <target state="translated">この関数への入力は有効にエンコードされなければならない[MUST]。</target>
        </trans-unit>
        <trans-unit id="d4a76f46d20716b9c53fd13981afb49f20693850" translate="yes" xml:space="preserve">
          <source>The input to this function MUST be validly encoded. This is enforced by the function's in-contract.</source>
          <target state="translated">この関数への入力は有効にエンコードされなければなりません(MUST)。これは、この関数の契約書によって強制されます。</target>
        </trans-unit>
        <trans-unit id="52bc0973d7be9145a7f9c10120f8ee1522aa2643" translate="yes" xml:space="preserve">
          <source>The instantiated template.</source>
          <target state="translated">インスタンス化されたテンプレート。</target>
        </trans-unit>
        <trans-unit id="caa69ad6f2cd188077c7e982e4e11f26b6cdf5a4" translate="yes" xml:space="preserve">
          <source>The integral and floating type sizes should be considered as minimums. Algorithms should be designed to continue to work properly if the type size increases.</source>
          <target state="translated">積分型と浮動型のサイズは最小値と考えるべきです。アルゴリズムは、型のサイズが大きくなっても正しく動作するように設計されるべきです。</target>
        </trans-unit>
        <trans-unit id="bfaa650f603081ed06b593e3b4e5c458c3260e28" translate="yes" xml:space="preserve">
          <source>The integral is</source>
          <target state="translated">積分は</target>
        </trans-unit>
        <trans-unit id="d07416a83435e11558037f6cda4d47f4d33fe73e" translate="yes" xml:space="preserve">
          <source>The integral is evaluated by a continued fraction expansion or, when b * x is small, by a power series.</source>
          <target state="translated">積分は分数展開を続けて評価するか、b*xが小さい場合は乗数級数で評価します。</target>
        </trans-unit>
        <trans-unit id="4502af3e801c133bfaf7193afbee4f48610ef881" translate="yes" xml:space="preserve">
          <source>The integral type to convert the first &lt;code&gt;T.sizeof&lt;/code&gt; bytes to.</source>
          <target state="translated">最初の &lt;code&gt;T.sizeof&lt;/code&gt; バイトを変換する整数型。</target>
        </trans-unit>
        <trans-unit id="51127e20341aada7d08b3905487eaefce7dd284a" translate="yes" xml:space="preserve">
          <source>The integral value to return the absolute value of.</source>
          <target state="translated">の絶対値を返す積分値。</target>
        </trans-unit>
        <trans-unit id="54f14afee26358f556f656a70b82a5a8901a5411" translate="yes" xml:space="preserve">
          <source>The intent of this function is to provide an allocation-less way to call a C function using a D slice. The function internally allocates a buffer if needed, but frees it on exit.</source>
          <target state="translated">この関数の意図は、Dスライスを使用してC関数を呼び出すためのアロケーションレスな方法を提供することです。この関数は必要に応じて内部的にバッファを確保しますが、終了時にはバッファを解放します。</target>
        </trans-unit>
        <trans-unit id="aa32bace5214cedb20ff140ded35da64a7980bf0" translate="yes" xml:space="preserve">
          <source>The intention is that &lt;code&gt;opDollar!i&lt;/code&gt; should return the length of the array along its &lt;code&gt;i&lt;/code&gt;'th dimension, or a user-defined object representing the end of the array along that dimension, that is understood by &lt;code&gt;opSlice&lt;/code&gt; and &lt;code&gt;opIndex&lt;/code&gt;.</source>
          <target state="translated">その意図は、 &lt;code&gt;opDollar!i&lt;/code&gt; がその &lt;code&gt;i&lt;/code&gt; 番目の次元に沿った配列の長さ、またはその次元に沿った配列の終わりを表すユーザー定義のオブジェクトを &lt;code&gt;opSlice&lt;/code&gt; 、 &lt;code&gt;opIndex&lt;/code&gt; とopIndexによって理解されることです。</target>
        </trans-unit>
        <trans-unit id="7ed569bfceb9bac4ccf7954c87c2cc7395c8f770" translate="yes" xml:space="preserve">
          <source>The intention is that &lt;code&gt;opSlice!i&lt;/code&gt; should return a user-defined object that represents an interval of indices along the &lt;code&gt;i&lt;/code&gt;'th dimension of the array. This object is then passed to &lt;code&gt;opIndex&lt;/code&gt; to perform the actual slicing operation. If only one-dimensional slicing is desired, &lt;code&gt;opSlice&lt;/code&gt; may be declared without the compile-time parameter &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">その意図は、 &lt;code&gt;opSlice!i&lt;/code&gt; が配列の &lt;code&gt;i&lt;/code&gt; 番目の次元に沿ったインデックスの間隔を表すユーザー定義のオブジェクトを返すことです。次に、このオブジェクトを &lt;code&gt;opIndex&lt;/code&gt; に渡して、実際のスライス操作を実行します。1次元のスライスのみが必要な場合は、コンパイル時パラメーター &lt;code&gt;i&lt;/code&gt; なしで &lt;code&gt;opSlice&lt;/code&gt; を宣言できます。</target>
        </trans-unit>
        <trans-unit id="cf6066b8690ba4fa47007edd6d83a6b71547ae35" translate="yes" xml:space="preserve">
          <source>The interface to the virtual-table mechanism defined above (back up to a comment remarkably similar to this one) is currently considered to be experimental. The interface might change in incompatible ways. If this is a problem for you, do not use the interface at this time.</source>
          <target state="translated">上で定義された仮想テーブル機構へのインタフェース(これと著しく類似したコメントへのバックアップ)は、現在のところ実験的なものであると考えられています。インターフェースは互換性のない方法で変更されるかもしれません。もしこれがあなたにとって問題であるならば、現時点ではこのインターフェースを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="6250bca0465ce111dcc80945b2149f4168412958" translate="yes" xml:space="preserve">
          <source>The interface to the virtual-table mechanism is currently considered to be experimental. The interface might change in incompatible ways. If this is a problem for you, do not use the interface at this time.</source>
          <target state="translated">仮想テーブル機構のインターフェースは、現在のところ実験的なものと考えられています。インターフェースは互換性のない方法で変更される可能性があります。もしこれが問題になるようであれば、現時点ではインターフェースを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="8d2e293904f5395fe014c79325ed5dca620f1643" translate="yes" xml:space="preserve">
          <source>The interface to this is found in Druntime's &lt;a href=&quot;https://github.com/dlang/druntime/blob/master/src/gc/gcinterface.d&quot;&gt;gc/gcinterface.d&lt;/a&gt;.</source>
          <target state="translated">これへのインターフェースはDruntimeの&lt;a href=&quot;https://github.com/dlang/druntime/blob/master/src/gc/gcinterface.d&quot;&gt;gc / gcinterface.dにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="70ba1bd45dceaea5f1daa9192d952a7efda4639e" translate="yes" xml:space="preserve">
          <source>The interval that this &lt;code&gt;IntervalRange&lt;/code&gt; currently covers.</source>
          <target state="translated">この &lt;code&gt;IntervalRange&lt;/code&gt; が現在カバーしている間隔。</target>
        </trans-unit>
        <trans-unit id="b1b8b6efa0b6085f29ca02a503001474bd874de3" translate="yes" xml:space="preserve">
          <source>The interval that this range currently covers.</source>
          <target state="translated">この範囲が現在カバーしている間隔。</target>
        </trans-unit>
        <trans-unit id="99ed0102a151474509c2f50c80c6a8fd9abde664" translate="yes" xml:space="preserve">
          <source>The interval to check against this interval.</source>
          <target state="translated">この間隔と照らし合わせてチェックする間隔。</target>
        </trans-unit>
        <trans-unit id="e9709ec7167a6294d35ca54cb0db7b761b6bd4bb" translate="yes" xml:space="preserve">
          <source>The interval to check for against this interval.</source>
          <target state="translated">この間隔に対してチェックする間隔。</target>
        </trans-unit>
        <trans-unit id="c93a05b54bf8db01ca44894e1b6574520f0f25cd" translate="yes" xml:space="preserve">
          <source>The interval to check for inclusion in this interval.</source>
          <target state="translated">このインターバルに含まれるかどうかをチェックするインターバル。</target>
        </trans-unit>
        <trans-unit id="7af5c560175f78550b8fa16520f8bceb2478bd1e" translate="yes" xml:space="preserve">
          <source>The interval to check for intersection with this interval.</source>
          <target state="translated">この間隔との交点をチェックする間隔。</target>
        </trans-unit>
        <trans-unit id="758e2e8521e78873ca075d9d09978b3e79b23a85" translate="yes" xml:space="preserve">
          <source>The interval to check whether its adjecent to this interval.</source>
          <target state="translated">この間隔に隣接しているかどうかを確認するための間隔。</target>
        </trans-unit>
        <trans-unit id="ec8c525abec811d6fafbe3af351dcf7c933228a1" translate="yes" xml:space="preserve">
          <source>The interval to create a span together with this interval.</source>
          <target state="translated">この間隔と一緒にスパンを作成する間隔です。</target>
        </trans-unit>
        <trans-unit id="ffa8edd7fe1af9b169dddd595e3c77f03e44244d" translate="yes" xml:space="preserve">
          <source>The interval to intersect with this interval.</source>
          <target state="translated">この間隔と交差する間隔。</target>
        </trans-unit>
        <trans-unit id="450cf7fb1673450b11d1c6b4254176a2488c262a" translate="yes" xml:space="preserve">
          <source>The interval to merge with this interval.</source>
          <target state="translated">このインターバルとマージするインターバル。</target>
        </trans-unit>
        <trans-unit id="6dd87bff580699a73195a62f3312346bd1ffd61d" translate="yes" xml:space="preserve">
          <source>The invariant can be checked with an &lt;code&gt;assert()&lt;/code&gt; expression:</source>
          <target state="translated">インバリアントは、 &lt;code&gt;assert()&lt;/code&gt; 式で確認できます。</target>
        </trans-unit>
        <trans-unit id="3d1bc4f7a43b5f2dfbf63c4d45e4f9ad2787305a" translate="yes" xml:space="preserve">
          <source>The invariant is a contract saying that the &lt;code&gt;assert&lt;/code&gt;s must hold true. The invariant is checked when a class or struct constructor completes, and at the start of the class or struct destructor. For public or exported functions, the order of execution is:</source>
          <target state="translated">不変条件とは、 &lt;code&gt;assert&lt;/code&gt; が真でなければならないという契約です。クラスまたは構造体コンストラクターが完了したとき、およびクラスまたは構造体デストラクターの開始時に不変条件がチェックされます。パブリック関数またはエクスポートされた関数の場合、実行の順序は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="db3237f4b413cd2d050f8846cd6a9cf6b11b5b9b" translate="yes" xml:space="preserve">
          <source>The invariant is in the form of a &lt;code&gt;const&lt;/code&gt; member function. The invariant is defined to</source>
          <target state="translated">不変条件は、 &lt;code&gt;const&lt;/code&gt; メンバー関数の形式です。インバリアントは、</target>
        </trans-unit>
        <trans-unit id="4013ec9a85db3fcab85de75b73cedbcdfe5398d3" translate="yes" xml:space="preserve">
          <source>The invariant is not checked if the class or struct is implicitly constructed using the default &lt;code&gt;.init&lt;/code&gt; value.</source>
          <target state="translated">クラスまたは構造体がデフォルトの &lt;code&gt;.init&lt;/code&gt; 値を使用して暗黙的に構築されている場合、不変条件はチェックされません。</target>
        </trans-unit>
        <trans-unit id="b006ea59664dde8c9966b0ba37f0d9de49867d7b" translate="yes" xml:space="preserve">
          <source>The invariant need not hold if the class instance is implicitly constructed using the default &lt;code&gt;.init&lt;/code&gt; value.</source>
          <target state="translated">クラスインスタンスがデフォルトの &lt;code&gt;.init&lt;/code&gt; 値を使用して暗黙的に構築されている場合、不変条件は保持する必要はありません。</target>
        </trans-unit>
        <trans-unit id="90d62a6c20b7727a896f3c7231e895bd333ec112" translate="yes" xml:space="preserve">
          <source>The invariant need not hold if the struct instance is implicitly constructed using the default &lt;code&gt;.init&lt;/code&gt; value.</source>
          <target state="translated">構造体インスタンスがデフォルトの &lt;code&gt;.init&lt;/code&gt; 値を使用して暗黙的に構築されている場合、不変条件は保持する必要はありません。</target>
        </trans-unit>
        <trans-unit id="ae2f7e963cff5e59d45cd356ad6b537b6f9c2bbf" translate="yes" xml:space="preserve">
          <source>The isMarked callback function.</source>
          <target state="translated">isMarkedコールバック関数です。</target>
        </trans-unit>
        <trans-unit id="b53b0d99e692dbe7d750a9e3a8ec485970e1fe1a" translate="yes" xml:space="preserve">
          <source>The issue remains of calling &lt;code&gt;a.deallocate(b)&lt;/code&gt; from a different thread than the one that allocated &lt;code&gt;b&lt;/code&gt;. It follows that both threads must have access to the same instance &lt;code&gt;a&lt;/code&gt; of the respective allocator type. By definition of D, this is possible only if &lt;code&gt;a&lt;/code&gt; has the &lt;code&gt;shared&lt;/code&gt; qualifier. It follows that the allocator type must implement &lt;code&gt;allocate&lt;/code&gt; and &lt;code&gt;deallocate&lt;/code&gt; as &lt;code&gt;shared&lt;/code&gt; methods. That way, the allocator commits to allowing usable &lt;code&gt;shared&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; を割り当てたスレッドとは別のスレッドから &lt;code&gt;a.deallocate(b)&lt;/code&gt; を呼び出す場合の問題が残っています。したがって、両方のスレッドは、それぞれのアロケータタイプの同じインスタンス &lt;code&gt;a&lt;/code&gt; にアクセスできる必要があります。Dの定義により、これは &lt;code&gt;a&lt;/code&gt; が &lt;code&gt;shared&lt;/code&gt; 修飾子を持っている場合にのみ可能です。したがって、アロケータ型は、 &lt;code&gt;allocate&lt;/code&gt; と &lt;code&gt;deallocate&lt;/code&gt; を &lt;code&gt;shared&lt;/code&gt; メソッドとして実装する必要があります。このようにして、アロケータは使用可能な &lt;code&gt;shared&lt;/code&gt; インスタンスを許可することを約束します。</target>
        </trans-unit>
        <trans-unit id="f906deb3cb569875f4c530161fd80e93b9be746c" translate="yes" xml:space="preserve">
          <source>The key is the IANA time zone database name, and the value is a list of Windows time zone names which are close (usually only one, but it could be multiple).</source>
          <target state="translated">キーはIANAタイムゾーンデータベース名で、値は近いWindowsタイムゾーン名のリストです(通常は1つだけですが、複数の場合もあります)。</target>
        </trans-unit>
        <trans-unit id="0cdd5bd88b6b5b8af271fba7af0cd3f24ac411a0" translate="yes" xml:space="preserve">
          <source>The key is the Windows time zone name, and the value is a list of IANA TZ database names which are close (currently only ever one, but it allows for multiple in case it's ever necessary).</source>
          <target state="translated">キーはWindowsのタイムゾーン名で、値は近いIANA TZデータベース名のリストです(現在は1つだけですが、必要に応じて複数を指定することができます)。</target>
        </trans-unit>
        <trans-unit id="07021616652b4190834cc6f5cd3d6a99828ab34d" translate="yes" xml:space="preserve">
          <source>The key.</source>
          <target state="translated">肝心なのは</target>
        </trans-unit>
        <trans-unit id="a80046e2f9e469e161e9b64d7a84ab6bec7ee185" translate="yes" xml:space="preserve">
          <source>The keyword &lt;code&gt;do&lt;/code&gt; can be used to announce the function body. Although any number of pre or post contracts of any form may follow each other, &lt;code&gt;do&lt;/code&gt; is required only when the last contract before the body is a block statement. (Before the acceptance of &lt;a href=&quot;https://github.com/dlang/DIPs/blob/master/DIPs/accepted/DIP1003.md&quot;&gt;DIP1003&lt;/a&gt;, the keyword &lt;code&gt;body&lt;/code&gt; was required instead of &lt;code&gt;do&lt;/code&gt;, and may still be encountered in old code bases. In the long term, &lt;code&gt;body&lt;/code&gt; may be deprecated, but for now it's allowed both as a keyword in this context and as an identifier elsewhere, although &lt;code&gt;do&lt;/code&gt; is preferred.)</source>
          <target state="translated">キーワード &lt;code&gt;do&lt;/code&gt; を使用して、関数本体を通知できます。任意の形式の事前または事後の契約のいずれかの数が互いに続くかもしれないが、 &lt;code&gt;do&lt;/code&gt; ボディ前の最後の契約はブロック文である場合にのみ必要です。（&lt;a href=&quot;https://github.com/dlang/DIPs/blob/master/DIPs/accepted/DIP1003.md&quot;&gt;DIP1003&lt;/a&gt;が承認される前は、キーワード &lt;code&gt;body&lt;/code&gt; が &lt;code&gt;do&lt;/code&gt; ではなく必須でしたが、古いコードベースでは引き続き発生する可能性があります。長期的には、 &lt;code&gt;body&lt;/code&gt; は非推奨になる可能性がありますが、現時点では、このコンテキストのキーワードとしても、他の場所の識別子 &lt;code&gt;do&lt;/code&gt; が、推奨されます。）</target>
        </trans-unit>
        <trans-unit id="d0cf199fa5ede60a30e00df7068d936c5578eb01" translate="yes" xml:space="preserve">
          <source>The kind of pragma it is determined by the</source>
          <target state="translated">によって、それがどのようなプラグマであるかが決定されます。</target>
        </trans-unit>
        <trans-unit id="8c29b92f234fc529a35e51b203804649a01ac419" translate="yes" xml:space="preserve">
          <source>The lambda function arguments must not have a template instantiation as an explicit argument type. Any other argument types (basic, user-defined, template) are supported.</source>
          <target state="translated">ラムダ関数の引数は、明示的な引数タイプとしてテンプレートのインスタンスを持ってはいけません。他の引数型(基本型、ユーザー定義型、テンプレート)はすべてサポートされています。</target>
        </trans-unit>
        <trans-unit id="bdcf91e0f4f606e17a112c301f88ad8c5b2c10fe" translate="yes" xml:space="preserve">
          <source>The lambda function body must contain a single expression (no return statement) which contains only numeric values, manifest constants, enum values, function arguments and function calls. If the expression contains local variables or return statements, the function is considered incomparable.</source>
          <target state="translated">ラムダ関数本体には、数値、マニフェスト定数、列挙値、関数引数、関数呼び出しのみを含む単一の式(戻り文なし)を含める必要があります。式にローカル変数や戻り値文が含まれている場合、その関数は互換性がないとみなされます。</target>
        </trans-unit>
        <trans-unit id="95be9f6bb557ebac60c617f8309a121bd86960bc" translate="yes" xml:space="preserve">
          <source>The last day in the month that this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is in.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;が含まれる月の最後の日。</target>
        </trans-unit>
        <trans-unit id="7a278dbcde6702c093900cb5053e8bf5709be9d8" translate="yes" xml:space="preserve">
          <source>The last day in the month that this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is in.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が含まれる月の最後の日。</target>
        </trans-unit>
        <trans-unit id="49136c9e4ea103b38fd972475d00bbb19f727989" translate="yes" xml:space="preserve">
          <source>The last day in the month that this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; is in.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;が存在する月の最後の日。</target>
        </trans-unit>
        <trans-unit id="a7a9289af76d268aef34222393a4318b6b13e368" translate="yes" xml:space="preserve">
          <source>The last element in the container</source>
          <target state="translated">コンテナの最後の要素</target>
        </trans-unit>
        <trans-unit id="6a4a00d2337afbe6c2df52717b98e8e13215bd50" translate="yes" xml:space="preserve">
          <source>The last element of the array.</source>
          <target state="translated">配列の最後の要素。</target>
        </trans-unit>
        <trans-unit id="9093baea1e3cf86fea0c4e3a6b9e58ab2a97f5a2" translate="yes" xml:space="preserve">
          <source>The last modification time in DosFileFormat.</source>
          <target state="translated">DosFileFormatの最終修正時間。</target>
        </trans-unit>
        <trans-unit id="bdc0ac79d31e7752c2d29a6d8b9bf43609b17c83" translate="yes" xml:space="preserve">
          <source>The last parameter is passed in EAX rather than being pushed on the stack if the following conditions are met:</source>
          <target state="translated">最後のパラメータは、以下の条件が満たされている場合、スタックにプッシュされるのではなく、EAXで渡されます。</target>
        </trans-unit>
        <trans-unit id="746b4bdff136b3fa913bf1eeb63d7355bf56ba56" translate="yes" xml:space="preserve">
          <source>The last template parameter if it's a &lt;code&gt;TemplateTupleParameter&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TemplateTupleParameter&lt;/code&gt; の場合、最後のテンプレートパラメータ</target>
        </trans-unit>
        <trans-unit id="81aad1de98ee0f65f497fb989a25778e1871d9df" translate="yes" xml:space="preserve">
          <source>The lazy initializer value</source>
          <target state="translated">怠惰なイニシャライザの値</target>
        </trans-unit>
        <trans-unit id="ea4b5c8a99ea43d9dec4f2b203a2486705eaedf1" translate="yes" xml:space="preserve">
          <source>The lazy variadic delegate solution is preferable to using a lazy variadic array, because each array index would evaluate every element:</source>
          <target state="translated">遅延バリアディックデリゲートソリューションは、遅延バリアディック配列を使用するよりも、各配列インデックスがすべての要素を評価するため、遅延バリアディック配列を使用する方が好ましいです。</target>
        </trans-unit>
        <trans-unit id="421c4166a84b43c53a129a72090df266fc5436fb" translate="yes" xml:space="preserve">
          <source>The least significant bit in any &lt;code&gt;size_t&lt;/code&gt; unit is the starting bit of this unit, and the most significant bit is the last bit of this unit. Therefore, passing e.g. an array of &lt;code&gt;int&lt;/code&gt;s may result in a different &lt;code&gt;BitArray&lt;/code&gt; depending on the processor's endianness.</source>
          <target state="translated">いずれにおいても、最下位ビット &lt;code&gt;size_t&lt;/code&gt; のユニットはこのユニットの開始ビットであり、最上位ビットは、このユニットの最後のビットです。したがって、たとえば &lt;code&gt;int&lt;/code&gt; の配列を渡すと、プロセッサのエンディアンに応じて異なる &lt;code&gt;BitArray&lt;/code&gt; が生成される可能性があります。</target>
        </trans-unit>
        <trans-unit id="eeb9274b7abe5ec5313e249b7496b6be61a66b8b" translate="yes" xml:space="preserve">
          <source>The left operand of the &lt;code&gt;,&lt;/code&gt; is evaluated, then the right operand is evaluated. The type of the expression is the type of the right operand, and the result is the result of the right operand. Using the result of comma expressions isn't allowed.</source>
          <target state="translated">左オペランドが &lt;code&gt;,&lt;/code&gt; 右オペランドは評価され、評価されます。式のタイプは右のオペランドのタイプであり、結果は右のオペランドの結果です。コンマ式の結果を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="f0716ee491b6b3f2e07375f7797e5c102ad33bdc" translate="yes" xml:space="preserve">
          <source>The left-hand side (or sole) argument</source>
          <target state="translated">左側(または単独)の引数</target>
        </trans-unit>
        <trans-unit id="4d310cf569bfdf7161ed54cffc976e1b48e7851c" translate="yes" xml:space="preserve">
          <source>The left-hand side of the comparison (&lt;code&gt;Lhs&lt;/code&gt; is the first argument to &lt;code&gt;Checked&lt;/code&gt;)</source>
          <target state="translated">比較の左側（ &lt;code&gt;Lhs&lt;/code&gt; は &lt;code&gt;Checked&lt;/code&gt; の最初の引数です）</target>
        </trans-unit>
        <trans-unit id="204d5f370e11576f0fecb8929fdcdb88b117af5c" translate="yes" xml:space="preserve">
          <source>The left-hand side of the comparison (&lt;code&gt;T&lt;/code&gt; is the first argument to &lt;code&gt;Checked&lt;/code&gt;)</source>
          <target state="translated">比較の左側（ &lt;code&gt;T&lt;/code&gt; は &lt;code&gt;Checked&lt;/code&gt; の最初の引数です）</target>
        </trans-unit>
        <trans-unit id="4fefd353c917f9a3bb60b52cf3d51cddee41a3f3" translate="yes" xml:space="preserve">
          <source>The left-hand side of the comparison for equality</source>
          <target state="translated">平等のための比較の左側</target>
        </trans-unit>
        <trans-unit id="2b109cf29bece1affa9b23e640454252b8ecd16d" translate="yes" xml:space="preserve">
          <source>The left-hand side of the comparison for ordering</source>
          <target state="translated">注文時の比較の左側</target>
        </trans-unit>
        <trans-unit id="ae7fc7c90c99a250cd16f28bd7d7dbc3b81e86a8" translate="yes" xml:space="preserve">
          <source>The left-hand side of the operator</source>
          <target state="translated">オペレーターの左側</target>
        </trans-unit>
        <trans-unit id="b4517c6bf6d758579387be92cded7d53dd545722" translate="yes" xml:space="preserve">
          <source>The left-hand side of the operator (&lt;code&gt;Lhs&lt;/code&gt; is the first argument to &lt;code&gt;Checked&lt;/code&gt;)</source>
          <target state="translated">演算子の左側（ &lt;code&gt;Lhs&lt;/code&gt; は &lt;code&gt;Checked&lt;/code&gt; の最初の引数です）</target>
        </trans-unit>
        <trans-unit id="1d155e4a7561179c70fb7012ae70744e878991c7" translate="yes" xml:space="preserve">
          <source>The left-hand side operand</source>
          <target state="translated">左側のオペランド</target>
        </trans-unit>
        <trans-unit id="56ecf39f32678f6ba12fdb543c053bc2a2538cfe" translate="yes" xml:space="preserve">
          <source>The left-hand side operand (&lt;code&gt;Lhs&lt;/code&gt; is the first argument to &lt;code&gt;Checked&lt;/code&gt;)</source>
          <target state="translated">左側のオペランド（ &lt;code&gt;Lhs&lt;/code&gt; は &lt;code&gt;Checked&lt;/code&gt; の最初の引数です）</target>
        </trans-unit>
        <trans-unit id="fdc93a0d76b637886498906e463f3074234e7249" translate="yes" xml:space="preserve">
          <source>The leftmost side of the inheritance graph of the interfaces all share their vptrs, this is the single inheritance model. Every time the inheritance graph forks (for multiple inheritance) a new vptr is created and stored in the class' instance. Every time a virtual method is overridden, a new vtbl[] must be created with the updated method pointers in it.</source>
          <target state="translated">インターフェースの継承グラフの一番左端は、すべてのインターフェースの vptr を共有しており、これが単一継承モデルです。継承グラフがフォークするたびに (複数継承の場合)新しい vptr が作成され、クラスのインスタンスに格納されます。仮想メソッドがオーバーライドされるたびに、更新されたメソッドポインタを含む新しい vtbl[]が作成されなければなりません。</target>
        </trans-unit>
        <trans-unit id="f8ab85ff43a9b405f7f858dd6bd44661050bcbfb" translate="yes" xml:space="preserve">
          <source>The leftover portion of &lt;code&gt;tgt&lt;/code&gt; after all elements from &lt;code&gt;src&lt;/code&gt; have been moved.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; のすべての要素が移動された後の &lt;code&gt;tgt&lt;/code&gt; の残りの部分。</target>
        </trans-unit>
        <trans-unit id="ff1f6ec0205e886692fcbf4cdbd24c49883d76fd" translate="yes" xml:space="preserve">
          <source>The leftover portions of the two ranges after one or the other of the ranges have been exhausted.</source>
          <target state="translated">つのレンジのうち、一方または他方のレンジを使い切った後の残りの部分。</target>
        </trans-unit>
        <trans-unit id="4aa5bf288555be6562c9b8eb71a2ee00b9edbaea" translate="yes" xml:space="preserve">
          <source>The legal types of arithmetic for &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; using this operator are</source>
          <target state="translated">この演算子を使用する&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;の算術の正当なタイプは次のとおりです</target>
        </trans-unit>
        <trans-unit id="06d117fb1568b3c185b1dd70cf5e4111bec8c49d" translate="yes" xml:space="preserve">
          <source>The legal types of arithmetic for &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; using this operator are</source>
          <target state="translated">この演算子を使用した&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の算術の正当なタイプは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="31c5da3679aa5d6d97a971e899c7a8329e3f0d92" translate="yes" xml:space="preserve">
          <source>The legal types of arithmetic for &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; using this operator are</source>
          <target state="translated">この演算子を使用する&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の算術の正当なタイプは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1d00a55c762fc066020331efbb630b4cfc23721c" translate="yes" xml:space="preserve">
          <source>The legal types of arithmetic for &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt; using this operator are</source>
          <target state="translated">この演算子を使用した&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; &lt;/a&gt;の計算の正当なタイプは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e029991ebf163a2ec03f499fc47cd21941b26f69" translate="yes" xml:space="preserve">
          <source>The legal types of arithmetic for &lt;code&gt;Duration&lt;/code&gt; using this operator are</source>
          <target state="translated">この演算子を使用した &lt;code&gt;Duration&lt;/code&gt; の計算の正当なタイプは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2131ddc8b843bbfb7a2f56781e6183f4a90599d7" translate="yes" xml:space="preserve">
          <source>The legal types of arithmetic for &lt;code&gt;Duration&lt;/code&gt; using this operator overload are</source>
          <target state="translated">この演算子のオーバーロードを使用した &lt;code&gt;Duration&lt;/code&gt; の計算の正当なタイプは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5584f88d5b275ee008fabf19cf9bf9477c6ef1e2" translate="yes" xml:space="preserve">
          <source>The legal types of arithmetic for &lt;code&gt;TickDuration&lt;/code&gt; using this operator are</source>
          <target state="translated">この演算子を使用した &lt;code&gt;TickDuration&lt;/code&gt; の計算の正当なタイプは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c5479006c238183b17f8e4535d66092bdb92a1fe" translate="yes" xml:space="preserve">
          <source>The legal types of arithmetic for &lt;code&gt;TickDuration&lt;/code&gt; using this operator overload are</source>
          <target state="translated">この演算子オーバーロードを使用した &lt;code&gt;TickDuration&lt;/code&gt; の正当な算術タイプは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0bd23cc00d282f158f381c5c9ffe519dc3f30f3b" translate="yes" xml:space="preserve">
          <source>The length dimension(s) of the resulting array</source>
          <target state="translated">結果として得られる配列の長さ寸法.</target>
        </trans-unit>
        <trans-unit id="44d89bfdd05d1a58a582eeedae0d9a14e3912d91" translate="yes" xml:space="preserve">
          <source>The length of a Base64 encoding of an array of the given length.</source>
          <target state="translated">指定された長さの配列のBase64エンコーディングの長さ。</target>
        </trans-unit>
        <trans-unit id="a5db64910ec8c3458fc1370fda6dd6afe4df6242" translate="yes" xml:space="preserve">
          <source>The length of the Base64 encoding.</source>
          <target state="translated">Base64 エンコーディングの長さ。</target>
        </trans-unit>
        <trans-unit id="a6c0235529e0d9db5d811993877bcc8428ae8800" translate="yes" xml:space="preserve">
          <source>The length of the decoded string corresponding to a Base64 encoding of length sourceLength.</source>
          <target state="translated">sourceLength の長さの Base64 エンコーディングに対応するデコードされた文字列の長さ。</target>
        </trans-unit>
        <trans-unit id="11a141a49e0a68aaa17cb7bd6222ca0a80676913" translate="yes" xml:space="preserve">
          <source>The length of the initial segment of &lt;code&gt;r&lt;/code&gt; to sort.</source>
          <target state="translated">ソートする &lt;code&gt;r&lt;/code&gt; の最初のセグメントの長さ。</target>
        </trans-unit>
        <trans-unit id="79633e883a28c37fc7cd1efc3c868307222fbc17" translate="yes" xml:space="preserve">
          <source>The length of the resulting range is the sum of all lengths of the ranges passed as input. This means that all elements (duplicates included) are transferred to the resulting range.</source>
          <target state="translated">結果の範囲の長さは、入力として渡された範囲のすべての長さの合計です。これは、すべての要素(重複を含む)が結果の範囲に転送されることを意味します。</target>
        </trans-unit>
        <trans-unit id="e1ae840eb910889a7516866d4d199999a725e819" translate="yes" xml:space="preserve">
          <source>The length of the token is known to be 40 characters long due to its format, so the attacker first sends &lt;code&gt;&quot;0000000000000000000000000000000000000000&quot;&lt;/code&gt;, then &lt;code&gt;&quot;1000000000000000000000000000000000000000&quot;&lt;/code&gt;, and so on.</source>
          <target state="translated">トークンの長さは、その形式により40文字であることがわかっているため、攻撃者は最初に &lt;code&gt;&quot;0000000000000000000000000000000000000000&quot;&lt;/code&gt; を送信し、次に &lt;code&gt;&quot;1000000000000000000000000000000000000000&quot;&lt;/code&gt; を送信します。</target>
        </trans-unit>
        <trans-unit id="1987089f20ee0b5d2ec2f8112d140a36df239f5b" translate="yes" xml:space="preserve">
          <source>The level at which a socket option is defined.</source>
          <target state="translated">ソケットオプションを定義するレベル。</target>
        </trans-unit>
        <trans-unit id="b86bd023c662d4e208c258be711aadc0b1b2efae" translate="yes" xml:space="preserve">
          <source>The level at which a socket option is defined:</source>
          <target state="translated">ソケットオプションを定義するレベル。</target>
        </trans-unit>
        <trans-unit id="2ae0654a2a0ebe273a0d01c5f266e55c0eaa1eb7" translate="yes" xml:space="preserve">
          <source>The lexical analysis is independent of the syntax parsing and the semantic analysis. The lexical analyzer splits the source text up into tokens. The lexical grammar describes the syntax of these tokens. The grammar is designed to be suitable for high speed scanning and to make it easy to write a correct scanner. It has a minimum of special case rules and there is only one phase of translation.</source>
          <target state="translated">語彙解析は、構文解析や意味解析とは独立しています。語彙解析は、原文をトークンに分割します。辞書文法は、これらのトークンの構文を記述します。この文法は、高速スキャンに適しており、正しいスキャナを簡単に書けるように設計されています。最小限の特殊な大文字小文字の規則を持ち、翻訳には1つの段階しかありません。</target>
        </trans-unit>
        <trans-unit id="f491d891c138db3f9bceff46473b495e216f49dc" translate="yes" xml:space="preserve">
          <source>The lexical analysis is independent of the syntax parsing and the semantic analysis. The lexical analyzer splits the source text up into tokens. The lexical grammar describes the syntax of those tokens. The grammar is designed to be suitable for high speed scanning and to make it easy to write a correct scanner for it. It has a minimum of special case rules and there is only one phase of translation.</source>
          <target state="translated">語彙解析は、構文解析や意味解析とは独立しています。語彙解析は、原文をトークンに分割します。辞書文法は、それらのトークンの構文を記述します。この文法は、高速スキャンに適しており、それに適した正しいスキャナを簡単に書けるように設計されています。最小限の特殊なケースルールを持ち、翻訳のフェーズは1つしかありません。</target>
        </trans-unit>
        <trans-unit id="64fc62f1647f32635083b06c594d00bb08d6c211" translate="yes" xml:space="preserve">
          <source>The lexical order of the attributes &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, and &lt;code&gt;scope&lt;/code&gt; is not significant.</source>
          <target state="translated">属性 &lt;code&gt;ref&lt;/code&gt; 、 &lt;code&gt;return&lt;/code&gt; 、および &lt;code&gt;scope&lt;/code&gt; の字句順序は重要ではありません。</target>
        </trans-unit>
        <trans-unit id="ecb003b0d2de026222073a3d8a4296c476e97462" translate="yes" xml:space="preserve">
          <source>The lifetime of a Borrowed or Readonly pointer value starts when it is assigned a value from an Owner or another Borrowed pointer, and ends at the last read of that value.</source>
          <target state="translated">借用ポインタまたは読み出し専用ポインタの値の寿命は、所有者または別の借用ポインタから値が代入されたときに始まり、その値の最後の読み取り時に終了します。</target>
        </trans-unit>
        <trans-unit id="f68c7b698966b101a1a595982c2044cc2a404192" translate="yes" xml:space="preserve">
          <source>The line number information from where the call originates</source>
          <target state="translated">発信元の回線番号情報</target>
        </trans-unit>
        <trans-unit id="630ea807f4230ab332463ca98ac961bf9f44e6d5" translate="yes" xml:space="preserve">
          <source>The line number of the D source code corresponding with where the error was thrown from.</source>
          <target state="translated">エラーがスローされた場所に対応するDソースコードの行番号。</target>
        </trans-unit>
        <trans-unit id="229e0a2bdd93317a19e4a68e09629b3b6f154aca" translate="yes" xml:space="preserve">
          <source>The line number of the caller.</source>
          <target state="translated">発信者の回線番号です。</target>
        </trans-unit>
        <trans-unit id="0ad55de99f59d99a8ffdf4bac1fdfeed484559cb" translate="yes" xml:space="preserve">
          <source>The line number on which this error occurred.</source>
          <target state="translated">このエラーが発生した行番号。</target>
        </trans-unit>
        <trans-unit id="b99341808eb5c2aeef537e3bc3ba23e7d2391ae4" translate="yes" xml:space="preserve">
          <source>The line number that the &lt;a href=&quot;#DateTimeException&quot;&gt;&lt;code&gt;DateTimeException&lt;/code&gt;&lt;/a&gt; will list if thrown.</source>
          <target state="translated">スローされた場合に&lt;a href=&quot;#DateTimeException&quot;&gt; &lt;code&gt;DateTimeException&lt;/code&gt; &lt;/a&gt;がリストする行番号。</target>
        </trans-unit>
        <trans-unit id="f269870f6d1360520fe00512e2c2e3c4c0c50b6e" translate="yes" xml:space="preserve">
          <source>The line number where the exception occurred.</source>
          <target state="translated">例外が発生した行番号。</target>
        </trans-unit>
        <trans-unit id="f737b0208cdb15cf160156fb11b96cdbc64efed4" translate="yes" xml:space="preserve">
          <source>The line terminator (&lt;code&gt;'\n'&lt;/code&gt; by default) is part of the string read (it could be missing in the last line of the file). Several types are supported for &lt;code&gt;line&lt;/code&gt;, and the behavior of &lt;code&gt;lines&lt;/code&gt; changes accordingly:</source>
          <target state="translated">行末記号（デフォルトでは &lt;code&gt;'\n'&lt;/code&gt; ）は読み取られた文字列の一部です（ファイルの最後の行にない場合があります）。 &lt;code&gt;line&lt;/code&gt; ではいくつかのタイプがサポートされており、それに応じて &lt;code&gt;lines&lt;/code&gt; の動作が変更されます。</target>
        </trans-unit>
        <trans-unit id="4223574eefbbf292923ac805daa2d742c2ceff1c" translate="yes" xml:space="preserve">
          <source>The line that was read, including the line terminator character.</source>
          <target state="translated">行終端文字を含む、読み込まれた行。</target>
        </trans-unit>
        <trans-unit id="0c791857d998bbf0bb74dbde8821e8c09defc3d6" translate="yes" xml:space="preserve">
          <source>The line where the error occurred.</source>
          <target state="translated">エラーが発生した行。</target>
        </trans-unit>
        <trans-unit id="5ba806293f71618709ac5ca5570d100d47098201" translate="yes" xml:space="preserve">
          <source>The line where the error occurred. Defaults to &lt;code&gt;__LINE__&lt;/code&gt;.</source>
          <target state="translated">エラーが発生した行。デフォルトは &lt;code&gt;__LINE__&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c9ec5dcfd170a3e54aa2b0486e8b3a659ecba856" translate="yes" xml:space="preserve">
          <source>The linkage form &lt;code&gt;extern (C++, &lt;/code&gt;</source>
          <target state="translated">リンケージ形式 &lt;code&gt;extern (C++, &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a68509fefd64796f7d1a07f49a259470873e621" translate="yes" xml:space="preserve">
          <source>The linkage is recognized on all platforms but will issue a compile error if it is used on a platform where Objective-C support is not available. This allows to easily hide Objective-C declarations from platforms where it is not available using the &lt;a href=&quot;version#version&quot;&gt;&lt;code&gt;version&lt;/code&gt;&lt;/a&gt; statement, without resorting to string mixins or other workarounds.</source>
          <target state="translated">リンケージはすべてのプラットフォームで認識されますが、Objective-Cサポートを利用できないプラットフォームで使用すると、コンパイルエラーが発生します。これにより、&lt;a href=&quot;version#version&quot;&gt; &lt;code&gt;version&lt;/code&gt; &lt;/a&gt;ステートメントを使用して利用できないプラットフォームからObjective-C宣言を簡単に隠すことができます。文字列のミックスインや他の回避策に頼る必要はありません。</target>
        </trans-unit>
        <trans-unit id="ee2dc34efb622f40653a49dbfe76ceb8d1ee0eff" translate="yes" xml:space="preserve">
          <source>The list of allowed types. If empty, any type is allowed.</source>
          <target state="translated">許可される型のリスト。空の場合は、任意の型が許可されます。</target>
        </trans-unit>
        <trans-unit id="7d752b3e0c165ac9972ad67362f39567c19601ad" translate="yes" xml:space="preserve">
          <source>The literal may not exceed the range of the type. The literal is rounded to fit into the significant digits of the type.</source>
          <target state="translated">リテラルは型の範囲を超えてはいけません。リテラルは、型の有効桁数に収まるように丸められます。</target>
        </trans-unit>
        <trans-unit id="cfda6f32ee8182b11470321e18429ff54847d85e" translate="yes" xml:space="preserve">
          <source>The local part is in a deprecated form</source>
          <target state="translated">ローカル部分は非推奨の形式になっています。</target>
        </trans-unit>
        <trans-unit id="6f51eadb663d2759618c2c7f55ed73ce81e81662" translate="yes" xml:space="preserve">
          <source>The local part of the address is too long</source>
          <target state="translated">アドレスのローカル部分が長すぎる</target>
        </trans-unit>
        <trans-unit id="d43703ab62f0fdfb0730decc44b9accfe993fc48" translate="yes" xml:space="preserve">
          <source>The local part of the email address, that is, the part before the @ sign.</source>
          <target state="translated">メールアドレスのローカル部分、つまり@記号の前の部分。</target>
        </trans-unit>
        <trans-unit id="fb2b16bfeb403dd9d23822ef47a96282d2506733" translate="yes" xml:space="preserve">
          <source>The logger used by the logging function as reference.</source>
          <target state="translated">ロギング機能が参照として使用するロガー。</target>
        </trans-unit>
        <trans-unit id="9dc35ce16bcd5e0f3997b30f4a3a933ead8e2be7" translate="yes" xml:space="preserve">
          <source>The long</source>
          <target state="translated">長い</target>
        </trans-unit>
        <trans-unit id="cdce859b555eda9a366f161871fcdb633ee5b0eb" translate="yes" xml:space="preserve">
          <source>The long symbol for this option</source>
          <target state="translated">このオプションのロングシンボル</target>
        </trans-unit>
        <trans-unit id="eb826857f96e2fa8c72d4f984e7520701feb3d3d" translate="yes" xml:space="preserve">
          <source>The loop is correctly written:</source>
          <target state="translated">ループが正しく書かれています。</target>
        </trans-unit>
        <trans-unit id="80cd3f025f71ab9fb6d037c50456d7fb59577d15" translate="yes" xml:space="preserve">
          <source>The lower bound of the clamp.</source>
          <target state="translated">クランプの下界。</target>
        </trans-unit>
        <trans-unit id="c3ba355fcfd258cdc3b0962e2c92c7fd02aec3ad" translate="yes" xml:space="preserve">
          <source>The macro &quot;##&quot; is ISO C, we assume pre-ISO C doesn't support it.</source>
          <target state="translated">マクロ「##」はISO Cなので、プリISO Cはサポートしていないと仮定しています。</target>
        </trans-unit>
        <trans-unit id="4493cedee574dfabffbc81a40e14a5b6a3a6b77b" translate="yes" xml:space="preserve">
          <source>The macros section follows the same syntax as the &lt;b&gt;Params:&lt;/b&gt; section. It's a series of</source>
          <target state="translated">マクロセクションは、&lt;b&gt;Params：&lt;/b&gt;セクションと同じ構文に従います。それはのシリーズです</target>
        </trans-unit>
        <trans-unit id="cf6c8468c449f6bacda719f4e15ba7d61861d0e7" translate="yes" xml:space="preserve">
          <source>The magnitude is an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of unsigned integers that satisfies either &lt;a href=&quot;std_range_primitives#hasLength&quot;&gt;&lt;code&gt;std.range.primitives.hasLength&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;&lt;code&gt;std.range.primitives.isForwardRange&lt;/code&gt;&lt;/a&gt;. The first (leftmost) element of the magnitude is considered the most significant.</source>
          <target state="translated">大きさは、&lt;a href=&quot;std_range_primitives#hasLength&quot;&gt; &lt;code&gt;std.range.primitives.hasLength&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt; &lt;code&gt;std.range.primitives.isForwardRange&lt;/code&gt; の&lt;/a&gt;いずれかを満たす符号なし整数の&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;です。大きさの最初の（左端の）要素が最も重要であると見なされます。</target>
        </trans-unit>
        <trans-unit id="7ae8a3b1299a2612db122fcc08bc88452fa0e22f" translate="yes" xml:space="preserve">
          <source>The magnitude of x is limited to about 106.56 for IEEE 80-bit arithmetic; 1 or -1 is returned outside this range.</source>
          <target state="translated">x の大きさは IEEE 80 ビット演算で約 106.56 に制限されており、1 または -1 はこの範囲外で返されます。</target>
        </trans-unit>
        <trans-unit id="327523b3c0bae538d6dd857c0b63c542d4c2e3ff" translate="yes" xml:space="preserve">
          <source>The main &lt;a href=&quot;std_range&quot;&gt;&lt;code&gt;std.range&lt;/code&gt;&lt;/a&gt; module provides template-based tools for working with ranges, but sometimes an object-based interface for ranges is needed, such as when runtime polymorphism is required. For this purpose, this submodule provides a number of object and &lt;code&gt;interface&lt;/code&gt; definitions that can be used to wrap around range objects created by the &lt;a href=&quot;std_range&quot;&gt;&lt;code&gt;std.range&lt;/code&gt;&lt;/a&gt; templates.</source>
          <target state="translated">メインの&lt;a href=&quot;std_range&quot;&gt; &lt;code&gt;std.range&lt;/code&gt; &lt;/a&gt;モジュールは、範囲を操作するためのテンプレートベースのツールを提供しますが、ランタイムのポリモーフィズムが必要な場合など、範囲のオブジェクトベースのインターフェイスが必要になる場合があります。この目的のために、このサブモジュールは、&lt;a href=&quot;std_range&quot;&gt; &lt;code&gt;std.range&lt;/code&gt; &lt;/a&gt;テンプレートによって作成された範囲オブジェクトをラップするために使用できる多数のオブジェクトおよび &lt;code&gt;interface&lt;/code&gt; 定義を提供します。</target>
        </trans-unit>
        <trans-unit id="3c02f05cd38724c7e8cb17756e9c5152cd9c1060" translate="yes" xml:space="preserve">
          <source>The main entry point for garbage collection. The supplied delegate will be passed ranges representing both stack and register values.</source>
          <target state="translated">ガベージコレクションのメインエントリーポイントです。与えられたデリゲートには、スタック値とレジスタ値の両方を表す範囲が渡されます。</target>
        </trans-unit>
        <trans-unit id="70a5f20578712db84e71fcdbe8fd245260ba0674" translate="yes" xml:space="preserve">
          <source>The main reasons that a program might need to use ticks directly is if the system clock has higher precision than hnsecs, and the program needs that higher precision, or if the program needs to avoid the rounding errors caused by converting to hnsecs.</source>
          <target state="translated">プログラムが目盛りを直接使用する必要がある主な理由は、システムクロックの精度がhnsecsよりも高く、プログラムがその精度を必要としている場合や、hnsecsへの変換による丸め誤差を避ける必要がある場合などです。</target>
        </trans-unit>
        <trans-unit id="99346c9361ee044918b5692d75d84b05203809b4" translate="yes" xml:space="preserve">
          <source>The main uses cases for &lt;code&gt;WorkerLocalStorageStorage&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;WorkerLocalStorageStorage&lt;/code&gt; の主な使用例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="37721286eae1f656c81db469ea0c2aa0407bd201" translate="yes" xml:space="preserve">
          <source>The major 32-bit x86 microarchitecture 'dynasties' have been:</source>
          <target state="translated">主な32ビットx86マイクロアーキテクチャの「王朝」はこれまでにもありました。</target>
        </trans-unit>
        <trans-unit id="982a1e7c4fc73fa370e90c954afb1f355930cd55" translate="yes" xml:space="preserve">
          <source>The managed array.</source>
          <target state="translated">管理されている配列です。</target>
        </trans-unit>
        <trans-unit id="24b3c10fb402cc3696f43a7e032402872866e5ae" translate="yes" xml:space="preserve">
          <source>The mangled name for a function with function pointer type T and the given fully qualified name.</source>
          <target state="translated">関数ポインタの型がTで、与えられた完全修飾名を持つ関数のためのマングルされた名前。</target>
        </trans-unit>
        <trans-unit id="2222f24e9ff7ad414fdd6df5db1a3a27354c9552" translate="yes" xml:space="preserve">
          <source>The mangled name for a symbols of type T and the given fully qualified name.</source>
          <target state="translated">T型の記号と与えられた完全修飾名を揶揄したもの。</target>
        </trans-unit>
        <trans-unit id="582a49c9af38036e1960cd170f7932701e0fb6f3" translate="yes" xml:space="preserve">
          <source>The mangled name with deduplicated identifiers</source>
          <target state="translated">重複排除された識別子を使った揶揄された名前</target>
        </trans-unit>
        <trans-unit id="08774dd4c4d75e3bd42a748ee71506481a4f0a1b" translate="yes" xml:space="preserve">
          <source>The mangled string representing the type</source>
          <target state="translated">型を表す文字列</target>
        </trans-unit>
        <trans-unit id="40a84060f0327e9db3cfd8bbb21dc9782f40397c" translate="yes" xml:space="preserve">
          <source>The manner in which to display the output of each &lt;code&gt;Option.&lt;/code&gt;</source>
          <target state="translated">各 &lt;code&gt;Option.&lt;/code&gt; 出力を表示する方法。</target>
        </trans-unit>
        <trans-unit id="aa7ae029a5326a80d32c23d17dde2c45ccbc8321" translate="yes" xml:space="preserve">
          <source>The mapping of package and module identifiers to directory and file names.</source>
          <target state="translated">パッケージやモジュールの識別子をディレクトリやファイル名にマッピングします。</target>
        </trans-unit>
        <trans-unit id="43effc8161287353136863e8d2f53a67a4ef703b" translate="yes" xml:space="preserve">
          <source>The max aliases are the largest integral types:</source>
          <target state="translated">maxエイリアスは最大の積分型です。</target>
        </trans-unit>
        <trans-unit id="986ee926972449f806f769e32d7dd4ba24b84874" translate="yes" xml:space="preserve">
          <source>The maximal element of the passed-in range.</source>
          <target state="translated">搬入範囲の最大要素。</target>
        </trans-unit>
        <trans-unit id="ae723b7ad52bbfa1e17cf08fd49aa1b7abbdc458" translate="yes" xml:space="preserve">
          <source>The maximum allowed nesting level.</source>
          <target state="translated">最大許容ネスティングレベル。</target>
        </trans-unit>
        <trans-unit id="c15b5870b72ff9ade8671f564f3ad47e5d8703b2" translate="yes" xml:space="preserve">
          <source>The maximum guarantee of &lt;code&gt;pure&lt;/code&gt; is called &quot;strong purity&quot;. It can enable optimizations based on the fact that a function is guaranteed to not mutate anything which isn't passed to it. For cases where the compiler can guarantee that a pure function cannot alter its arguments, it can enable full, functional purity (i.e. the guarantee that the function will always return the same result for the same arguments). To that end, a pure function:</source>
          <target state="translated">&lt;code&gt;pure&lt;/code&gt; の最大保証は「強い純度」と呼ばれます。関数に渡されないものは変更されないことが保証されているという事実に基づいて、最適化を有効にすることができます。コンパイラーが純粋な関数がその引数を変更できないことを保証できる場合は、完全な機能的純粋性を有効にすることができます（つまり、関数が常に同じ引数に対して同じ結果を返すことが保証されます）。そのために、純粋な関数：</target>
        </trans-unit>
        <trans-unit id="c855c6313f529356306d651f3e145813bb160323" translate="yes" xml:space="preserve">
          <source>The maximum length of &lt;code&gt;filename&lt;/code&gt; is given by the constant &lt;code&gt;core.stdc.stdio.FILENAME_MAX&lt;/code&gt;. (On Windows, this number is defined as the maximum number of UTF-16 code points, and the test will therefore only yield strictly correct results when &lt;code&gt;filename&lt;/code&gt; is a string of &lt;code&gt;wchar&lt;/code&gt;s.)</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; の最大長は、定数 &lt;code&gt;core.stdc.stdio.FILENAME_MAX&lt;/code&gt; によって指定されます。（Windowsでは、この数はUTF-16コードポイントの最大数として定義されているため、 &lt;code&gt;filename&lt;/code&gt; が &lt;code&gt;wchar&lt;/code&gt; の文字列である場合、テストは厳密に正しい結果のみを生成します。）</target>
        </trans-unit>
        <trans-unit id="05e735a756b3fa2f43497424f8b3020883222ceb" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes of output that should be captured.</source>
          <target state="translated">キャプチャすべき出力の最大バイト数。</target>
        </trans-unit>
        <trans-unit id="f3e3e4f751fc559f30cd92f8522a3febd435ec99" translate="yes" xml:space="preserve">
          <source>The maximum number of elements the array can store without reallocating memory and invalidating iterators upon insertion.</source>
          <target state="translated">メモリを再確保したり,挿入時にイテレータを無効にしたりすることなく,配列が格納できる要素の最大数を指定します.</target>
        </trans-unit>
        <trans-unit id="ff490f34a5e2c376eac774681e1598898ac5391d" translate="yes" xml:space="preserve">
          <source>The maximum number of messages or zero if no limit.</source>
          <target state="translated">メッセージの最大数、制限がない場合はゼロ。</target>
        </trans-unit>
        <trans-unit id="23ffb3d6838b02986026c5eeb543b889e4e64af2" translate="yes" xml:space="preserve">
          <source>The maximum of the passed-in args. The type of the returned value is the type among the passed arguments that is able to store the largest value.</source>
          <target state="translated">渡された引数の最大値。返される値の型は、渡された引数の中で最大値を格納できる型です。</target>
        </trans-unit>
        <trans-unit id="e3f981b26c63cbef1dde8cf88e0c6fd5a78eba99" translate="yes" xml:space="preserve">
          <source>The maximum of the passed-in values. The type of the returned value is the type among the passed arguments that is able to store the largest value. If at least one of the arguments is NaN, the result is an unspecified value. See &lt;a href=&quot;std_algorithm_searching#maxElement&quot;&gt;&lt;code&gt;std.algorithm.searching.maxElement&lt;/code&gt;&lt;/a&gt; for examples on how to cope with NaNs.</source>
          <target state="translated">渡された値の最大値。戻り値のタイプは、渡された引数の中で最大の値を格納できるタイプです。引数の少なくとも1つがNaNの場合、結果は不特定の値になります。NaNに対処する方法の例については、&lt;a href=&quot;std_algorithm_searching#maxElement&quot;&gt; &lt;code&gt;std.algorithm.searching.maxElement&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7eb2470a27937a3494cee9a54b8062f651c54299" translate="yes" xml:space="preserve">
          <source>The maximum scheduling priority that may be set for a thread. On systems where multiple scheduling policies are defined, this value represents the maximum valid priority for the scheduling policy of the process.</source>
          <target state="translated">スレッドに設定できる最大のスケジューリング優先度。複数のスケジューリングポリシーが定義されているシステムでは、この値はプロセスのスケジューリングポリシーの最大有効優先度を表します。</target>
        </trans-unit>
        <trans-unit id="f397747108afabbaad398b1bbfbbdd699e4c5ce8" translate="yes" xml:space="preserve">
          <source>The maximum size of the GC buffer to hold the return values</source>
          <target state="translated">戻り値を保持するGCバッファーの最大サイズ</target>
        </trans-unit>
        <trans-unit id="075c481912178c8ac79090ee5b3669c3def2fbb2" translate="yes" xml:space="preserve">
          <source>The maximum value representable is &lt;code&gt;T.max&lt;/code&gt; for signed integrals, &lt;code&gt; T.max - 1&lt;/code&gt; for unsigned integrals. The minimum value representable is &lt;code&gt; T.min + 1&lt;/code&gt; for signed integrals, &lt;code&gt;0&lt;/code&gt; for unsigned integrals.</source>
          <target state="translated">最大値の表現である &lt;code&gt;T.max&lt;/code&gt; 署名された積分のために、 &lt;code&gt; T.max - 1&lt;/code&gt; 符号なし積分のために。表現可能な最小値は、符号付き積分の場合 &lt;code&gt; T.min + 1&lt;/code&gt; 、符号なし積分の場合 &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4957d9a3700ae6f7d93e51da85b7d5a4964d27b2" translate="yes" xml:space="preserve">
          <source>The mean of &lt;code&gt;r&lt;/code&gt; when &lt;code&gt;r&lt;/code&gt; is non-empty.</source>
          <target state="translated">平均 &lt;code&gt;r&lt;/code&gt; &lt;code&gt;r&lt;/code&gt; は非空です。</target>
        </trans-unit>
        <trans-unit id="c587177906e3358831db8b1c6944ffdb24226077" translate="yes" xml:space="preserve">
          <source>The members are completely hidden to the user, and so the only operations on those types are ones that do not require any knowledge of the contents of those types. For example:</source>
          <target state="translated">メンバーはユーザには完全に隠されているので、それらの型に対する操作は、それらの型の内容についての知識を必要としないものだけです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="00dd946dd7ec09c0536b1658fc7e8ead520e7c8e" translate="yes" xml:space="preserve">
          <source>The memory is obtained from &lt;code&gt;SmallAllocator&lt;/code&gt; if &lt;code&gt;s &amp;lt;= threshold&lt;/code&gt;, or &lt;code&gt;LargeAllocator&lt;/code&gt; otherwise.</source>
          <target state="translated">メモリから得られる &lt;code&gt;SmallAllocator&lt;/code&gt; もし &lt;code&gt;s &amp;lt;= threshold&lt;/code&gt; 、又は &lt;code&gt;LargeAllocator&lt;/code&gt; さもなければ。</target>
        </trans-unit>
        <trans-unit id="f8c96911fea13cb1c02d9f105c0c295fa2deb239" translate="yes" xml:space="preserve">
          <source>The memory location of different memory blocks is not defined. Ordered comparison (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;) between two pointers is permitted when both pointers point to the same array, or when at least one pointer is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">異なるメモリブロックのメモリ位置は定義されていません。2つのポインター間の順序付き比較（ &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;=&lt;/code&gt; ）は、両方のポインターが同じ配列を指す場合、または少なくとも1つのポインターが &lt;code&gt;null&lt;/code&gt; の場合に許可されます。</target>
        </trans-unit>
        <trans-unit id="fe0b84897743c23c53a5e9577a10299a7a7b020c" translate="yes" xml:space="preserve">
          <source>The memory usage of this implementation is guaranteed to be constant in &lt;code&gt;range.length&lt;/code&gt;.</source>
          <target state="translated">この実装のメモリ使用量は、 &lt;code&gt;range.length&lt;/code&gt; で一定であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="7609ac8f3cf653b1ce0270fa8139880a547a9eea" translate="yes" xml:space="preserve">
          <source>The message for the exception.</source>
          <target state="translated">例外のメッセージ。</target>
        </trans-unit>
        <trans-unit id="4c338cd37584d6e6e69bd4c24d1ae2acb50b8634" translate="yes" xml:space="preserve">
          <source>The message that was sent.</source>
          <target state="translated">というメッセージが送られてきました。</target>
        </trans-unit>
        <trans-unit id="68d612f02557a1940b9b2866c12015c2578745a2" translate="yes" xml:space="preserve">
          <source>The message to include in the &lt;code&gt;AssertError&lt;/code&gt; if the assumption turns out to be false.</source>
          <target state="translated">仮定が偽であることが判明した場合に &lt;code&gt;AssertError&lt;/code&gt; に含めるメッセージ。</target>
        </trans-unit>
        <trans-unit id="488aa84d557c1a01800a687e8f424ca1dc36fdd6" translate="yes" xml:space="preserve">
          <source>The message to include in the &lt;code&gt;ErrnoException&lt;/code&gt; if it is thrown.</source>
          <target state="translated">スローされた場合に &lt;code&gt;ErrnoException&lt;/code&gt; に含めるメッセージ。</target>
        </trans-unit>
        <trans-unit id="79b8f8765c27119a953cd29d5a9f80179e617637" translate="yes" xml:space="preserve">
          <source>The metaclass of this class.</source>
          <target state="translated">このクラスのメタクラス。</target>
        </trans-unit>
        <trans-unit id="93cc36b0067843c6450f0911a4ca8b3ad0ea0493" translate="yes" xml:space="preserve">
          <source>The method used to enable or disable the unit tests. Use of a compiler switch such as &lt;a href=&quot;https://dlang.org/dmd.html#switch-unittest&quot;&gt;&lt;b&gt;-unittest&lt;/b&gt;&lt;/a&gt; to enable them is suggested.</source>
          <target state="translated">単体テストを有効または無効にする方法。&lt;a href=&quot;https://dlang.org/dmd.html#switch-unittest&quot;&gt;&lt;b&gt;-unittest&lt;/b&gt;&lt;/a&gt;などのコンパイラスイッチを使用してそれらを有効にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c6a75cd2237917d2ed85214e205b4f1cf25efd9f" translate="yes" xml:space="preserve">
          <source>The minimal element of the passed-in range.</source>
          <target state="translated">渡した範囲の最小要素。</target>
        </trans-unit>
        <trans-unit id="ab6714e3fe053113da2960956c8eb82b3e5bbc67" translate="yes" xml:space="preserve">
          <source>The minimal number of edits to transform s into t.  Does not allocate GC memory.</source>
          <target state="translated">s を t に変換するための最小編集数。</target>
        </trans-unit>
        <trans-unit id="10a4be4f3adcabd3abe79325f2076e9b9a100888" translate="yes" xml:space="preserve">
          <source>The minimum duration the calling thread should be suspended.</source>
          <target state="translated">呼び出したスレッドが中断される最小の時間。</target>
        </trans-unit>
        <trans-unit id="28711c27ca983081eb31b72306fa4a118f39be3b" translate="yes" xml:space="preserve">
          <source>The minimum extension size in bytes.</source>
          <target state="translated">拡張子の最小サイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="c06ab7e4e215252c3c928d52e3071658c4a68764" translate="yes" xml:space="preserve">
          <source>The minimum of the passed-in values.</source>
          <target state="translated">投入された値の最小値。</target>
        </trans-unit>
        <trans-unit id="edffbb1612aecedbb9b2455ef9f7bc186445862c" translate="yes" xml:space="preserve">
          <source>The minimum of the passed-in values. The type of the returned value is the type among the passed arguments that is able to store the smallest value. If at least one of the arguments is NaN, the result is an unspecified value. See &lt;a href=&quot;std_algorithm_searching#minElement&quot;&gt;&lt;code&gt;std.algorithm.searching.minElement&lt;/code&gt;&lt;/a&gt; for examples on how to cope with NaNs.</source>
          <target state="translated">渡された値の最小値。戻り値のタイプは、渡された引数の中で最小値を格納できるタイプです。引数の少なくとも1つがNaNの場合、結果は不特定の値になります。NaNに対処する方法の例については、&lt;a href=&quot;std_algorithm_searching#minElement&quot;&gt; &lt;code&gt;std.algorithm.searching.minElement&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="95346b92b5307b71b43fcd27332d111b5c7b81cb" translate="yes" xml:space="preserve">
          <source>The minimum scheduling priority that may be set for a thread. On systems where multiple scheduling policies are defined, this value represents the minimum valid priority for the scheduling policy of the process.</source>
          <target state="translated">スレッドに設定できる最小のスケジューリング優先度。複数のスケジューリングポリシーが定義されているシステムでは、この値はプロセスのスケジューリングポリシーの有効な最小優先度を表します。</target>
        </trans-unit>
        <trans-unit id="91d9db5c5ad3a0f6b05ff83250575799825e9e6d" translate="yes" xml:space="preserve">
          <source>The minimum, respectively maximum element of a range together with the number it occurs in the range.</source>
          <target state="translated">範囲の最小要素,最大要素を,その範囲内で発生する数とともに指定します.</target>
        </trans-unit>
        <trans-unit id="4776ba2a4d44664c280371c94d75db0a68aa7f47" translate="yes" xml:space="preserve">
          <source>The minute portion of the time;</source>
          <target state="translated">分の部分です。</target>
        </trans-unit>
        <trans-unit id="804dde72e3fca52bb6fee9e6c9a891f7a218393e" translate="yes" xml:space="preserve">
          <source>The minute to set this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;'s minute to.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の分を設定する分。</target>
        </trans-unit>
        <trans-unit id="fd8186f6e2f846fa308524ef0f64113f0d7289dd" translate="yes" xml:space="preserve">
          <source>The minute to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s minute to.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の分を設定する分。</target>
        </trans-unit>
        <trans-unit id="80d86d248f3ac806d407ff7069134427130713b0" translate="yes" xml:space="preserve">
          <source>The minute to set this &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt;'s minute to.</source>
          <target state="translated">この&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; &lt;/a&gt;の分を設定する分。</target>
        </trans-unit>
        <trans-unit id="de600cb5888514e99355f24b957b0d7134a283a8" translate="yes" xml:space="preserve">
          <source>The mode must be compatible with the mode of the file descriptor.</source>
          <target state="translated">モードは、ファイル記述子のモードと互換性がなければなりません。</target>
        </trans-unit>
        <trans-unit id="204cac3357eeb22cb6ce425410ebf52a7b2c34ef" translate="yes" xml:space="preserve">
          <source>The mode the memory mapped file is opened with.</source>
          <target state="translated">メモリマップされたファイルを開くときのモード。</target>
        </trans-unit>
        <trans-unit id="973816115210d9c45eb2bc6fdd4a572e4108483e" translate="yes" xml:space="preserve">
          <source>The modified &lt;a href=&quot;http://en.wikipedia.org/wiki/Julian_day&quot;&gt;Julian day&lt;/a&gt; for any time on this date (since, the modified Julian day changes at midnight).</source>
          <target state="translated">この日付のいつでも修正された&lt;a href=&quot;http://en.wikipedia.org/wiki/Julian_day&quot;&gt;ユリウス日&lt;/a&gt;（修正されたユリウス日は午前0時に変更されるため）。</target>
        </trans-unit>
        <trans-unit id="d6cf19189a246f4659acb849b3f0cc1663f9b978" translate="yes" xml:space="preserve">
          <source>The modified &lt;a href=&quot;https://en.wikipedia.org/wiki/Julian_day&quot;&gt;Julian day&lt;/a&gt; for any time on this date (since, the modified Julian day changes at midnight).</source>
          <target state="translated">修正&lt;a href=&quot;https://en.wikipedia.org/wiki/Julian_day&quot;&gt;ユリウス日&lt;/a&gt;、この日の任意の時間（以降、修正ユリウス日は深夜に変更）のために。</target>
        </trans-unit>
        <trans-unit id="860d6be9b0cf54ee441891db4a2fd6202c776fe2" translate="yes" xml:space="preserve">
          <source>The modifier to apply.</source>
          <target state="translated">適用する修飾子。</target>
        </trans-unit>
        <trans-unit id="124f2941f2e52ecf62ccffc3b7646e3953931e7d" translate="yes" xml:space="preserve">
          <source>The modifiers of the &lt;code&gt;lhsMod&lt;/code&gt; mismatching the ones with the &lt;code&gt;rhsMod&lt;/code&gt; are printed, i.e. lhs(shared) vs. rhs() prints &quot;&lt;code&gt;shared&lt;/code&gt;&quot;, wheras lhs() vs rhs(shared) prints &quot;non-shared&quot;.</source>
          <target state="translated">改質 &lt;code&gt;lhsMod&lt;/code&gt; 有するものミスマッチ &lt;code&gt;rhsMod&lt;/code&gt; に印刷されている、すなわち、LHS（共有）対RHS（）は、「印刷 &lt;code&gt;shared&lt;/code&gt; RHS対LHS（）は（共有）wheras」、「非共有」印刷します。</target>
        </trans-unit>
        <trans-unit id="95523edab7d804c0b6ab6eed37c8c3cadada1694" translate="yes" xml:space="preserve">
          <source>The module edges as found in the &lt;code&gt;importedModules&lt;/code&gt; member of each ModuleInfo. Generated in sortCtors.</source>
          <target state="translated">各ModuleInfoの &lt;code&gt;importedModules&lt;/code&gt; されたモジュールメンバーにあるモジュールエッジ。sortCtorsで生成されます。</target>
        </trans-unit>
        <trans-unit id="47af20b56ee3955f4fd47d6c7951eb2d036d5a4c" translate="yes" xml:space="preserve">
          <source>The module for this virtual table</source>
          <target state="translated">この仮想テーブルのモジュール</target>
        </trans-unit>
        <trans-unit id="cab05c206d3bb715fd01c040c88f5fe361c942e4" translate="yes" xml:space="preserve">
          <source>The modulus</source>
          <target state="translated">弾性率</target>
        </trans-unit>
        <trans-unit id="82131155f810a5f75ba3764eb1563b749deb3cf3" translate="yes" xml:space="preserve">
          <source>The monotonic clock has no relation to wall clock time. Rather, it holds its time as the number of ticks of the clock which have occurred since the clock started (typically when the system booted up). So, to determine how much time has passed between two points in time, one monotonic time is subtracted from the other to determine the number of ticks which occurred between the two points of time, and those ticks are divided by the number of ticks that occur every second (as represented by MonoTime.ticksPerSecond) to get a meaningful duration of time. Normally, MonoTime does these calculations for the programmer, but the &lt;code&gt;ticks&lt;/code&gt; and &lt;code&gt;ticksPerSecond&lt;/code&gt; properties are provided for those who require direct access to the system ticks. The normal way that MonoTime would be used is</source>
          <target state="translated">単調時計は壁時計時間とは関係ありません。むしろ、その時間は、クロックが開始されてから（通常、システムが起動したとき）発生したクロックのティック数として保持されます。したがって、2つの時点の間にどれだけの時間が経過したかを判断するには、1つの単調な時間をもう一方の時間から差し引いて、2つの時点の間に発生したティックの数を決定し、それらのティックを発生したティックの数で割ります。毎秒（MonoTime.ticksPerSecondで表される）、意味のある期間を取得します。通常、MonoTimeはプログラマーのためにこれらの計算を行いますが、 &lt;code&gt;ticks&lt;/code&gt; および &lt;code&gt;ticksPerSecond&lt;/code&gt; プロパティは、システムティックに直接アクセスする必要があるユーザーのために提供されています。 MonoTimeが使用される通常の方法は</target>
        </trans-unit>
        <trans-unit id="d74977e8496820ecedeff19e20ade1b05de3e4b6" translate="yes" xml:space="preserve">
          <source>The month of the day to validate (January is 1).</source>
          <target state="translated">検証日の月(1月は1日)。</target>
        </trans-unit>
        <trans-unit id="6ebaf2163e939c5ad1bf15c5f8dae4f8a043e786" translate="yes" xml:space="preserve">
          <source>The month of the day to validate.</source>
          <target state="translated">検証する日の月。</target>
        </trans-unit>
        <trans-unit id="d4d21752a92d87f995da2fa4e777f8856076f4d2" translate="yes" xml:space="preserve">
          <source>The month of the year to get the number of months to.</source>
          <target state="translated">までの月数を取得することができます。</target>
        </trans-unit>
        <trans-unit id="3b03ba6279034200ca13bdea73b6dd032c6515f6" translate="yes" xml:space="preserve">
          <source>The month portion of the date (January is 1).</source>
          <target state="translated">日付の月の部分(1月は1日)です。</target>
        </trans-unit>
        <trans-unit id="e6fd335018a8476e0b61c3352fc0e3562dbfcc53" translate="yes" xml:space="preserve">
          <source>The month that each time point in the range will be in (January is 1).</source>
          <target state="translated">範囲内の各時間点が属する月(1月は1)。</target>
        </trans-unit>
        <trans-unit id="3a058535cdaf9aa70980ff68790ecdb70d352df1" translate="yes" xml:space="preserve">
          <source>The month to set this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;'s month to.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;の月を設定する月。</target>
        </trans-unit>
        <trans-unit id="b85e045063e5ffa8ef021269a9798226e87028d9" translate="yes" xml:space="preserve">
          <source>The month to set this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;'s month to.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の月を設定する月。</target>
        </trans-unit>
        <trans-unit id="a9daf4d7ebc51fc3e649125b409fa21bb86aa474" translate="yes" xml:space="preserve">
          <source>The month to set this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;'s month to.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の月を設定する月。</target>
        </trans-unit>
        <trans-unit id="cf6b4f0b397f7fd7fb57c763984e8789cb54772a" translate="yes" xml:space="preserve">
          <source>The most basic contract is the &lt;a href=&quot;expression#AssertExpression&quot;&gt;&lt;i&gt;AssertExpression&lt;/i&gt;&lt;/a&gt;. An &lt;b&gt;assert&lt;/b&gt; declares an expression that must evaluate to true, with an optional failure string as a second argument:</source>
          <target state="translated">最も基本的なコントラクトは&lt;a href=&quot;expression#AssertExpression&quot;&gt;&lt;i&gt;AssertExpression&lt;/i&gt;&lt;/a&gt;です。&lt;b&gt;アサートは、&lt;/b&gt;第二引数としてオプションの失敗の文字列で、trueに評価されなければならない式を宣言します。</target>
        </trans-unit>
        <trans-unit id="8a6bd68f79c5b13e9b7d8eaf7293f850cd2e0e6d" translate="yes" xml:space="preserve">
          <source>The most conservative/general allocation: memory may be shared, deallocated in a different thread, may or may not be resized, and may embed references.</source>
          <target state="translated">最も保守的/一般的な割り当て:メモリは共有され、別のスレッドで解放され、リサイズされても、されなくてもよく、参照を埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="1f6880935884c96d8b2634bfd6b4fbc9dbe4652c" translate="yes" xml:space="preserve">
          <source>The most interesting case is when gapped matches still participate in the result, but not as strongly as ungapped matches. The result will be a smooth, fine-grained similarity measure between the input strings. This is where values of &lt;code&gt;lambda&lt;/code&gt; between 0 and 1 enter into play: gapped matches are</source>
          <target state="translated">最も興味深いケースは、ギャップのある一致がまだ結果に含まれているが、ギャップのない一致ほど強くない場合です。結果は、入力文字列間の滑らかで細かい類似性測定になります。これは、0と1の間の &lt;code&gt;lambda&lt;/code&gt; 値が作用する場所です。ギャップのあるマッチは</target>
        </trans-unit>
        <trans-unit id="9317ec6cdc50605b3f7ad3a0a9efb80f09d16bb9" translate="yes" xml:space="preserve">
          <source>The mutex associated with this condition.</source>
          <target state="translated">この状態に関連するミューテックス。</target>
        </trans-unit>
        <trans-unit id="8402314bcd0aba6dacdd48ffde4057ad88f89bec" translate="yes" xml:space="preserve">
          <source>The mutex module provides a primitive for maintaining mutually exclusive access.</source>
          <target state="translated">mutex モジュールは、相互に排他的なアクセスを維持するためのプリミティブを提供します。</target>
        </trans-unit>
        <trans-unit id="437cb228e7e76ab9ff7feb1b0fb4ca0971be7ae2" translate="yes" xml:space="preserve">
          <source>The mutex with which this condition will be associated.</source>
          <target state="translated">この条件が関連付けられるミューテックス。</target>
        </trans-unit>
        <trans-unit id="4d5ce17987e89e660e90474cca14f7f4718221ad" translate="yes" xml:space="preserve">
          <source>The name &lt;code&gt;string&lt;/code&gt; is aliased to &lt;code&gt;immutable(char)[]&lt;/code&gt;, so the above declarations could be equivalently written as:</source>
          <target state="translated">名前 &lt;code&gt;string&lt;/code&gt; は &lt;code&gt;immutable(char)[]&lt;/code&gt; にエイリアスされているため、上記の宣言は次のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="abdfc7dd54ebeb228e02bc4ac46894950c3ebbee" translate="yes" xml:space="preserve">
          <source>The name came from &lt;a href=&quot;http://search.cpan.org/~mschwern/Class-WhiteHole-0.04/lib/Class/WhiteHole.pm&quot;&gt;Class::WhiteHole&lt;/a&gt; Perl module by Michael G Schwern.</source>
          <target state="translated">名前は、Michael G Schwernによる&lt;a href=&quot;http://search.cpan.org/~mschwern/Class-WhiteHole-0.04/lib/Class/WhiteHole.pm&quot;&gt;Class :: WhiteHole&lt;/a&gt; Perlモジュールに由来しています。</target>
        </trans-unit>
        <trans-unit id="173aa229bfebb13b14fcecd5dd6654d108541499" translate="yes" xml:space="preserve">
          <source>The name came from &lt;a href=&quot;http://search.cpan.org/~sburke/Class-BlackHole-0.04/lib/Class/BlackHole.pm&quot;&gt;Class::BlackHole&lt;/a&gt; Perl module by Sean M. Burke.</source>
          <target state="translated">名前はSean M. Burkeによる&lt;a href=&quot;http://search.cpan.org/~sburke/Class-BlackHole-0.04/lib/Class/BlackHole.pm&quot;&gt;Class :: BlackHole&lt;/a&gt; Perlモジュールに由来しています。</target>
        </trans-unit>
        <trans-unit id="ba677412cf6055cfe046fa4f2b82702d23be25af" translate="yes" xml:space="preserve">
          <source>The name if the &lt;code&gt;Logger&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Logger&lt;/code&gt; 場合の名前</target>
        </trans-unit>
        <trans-unit id="b2072d20b70963efec270cc1f87503a1f3984cd8" translate="yes" xml:space="preserve">
          <source>The name last used to initialize this this file, or &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">このファイルを初期化するために最後に使用された名前、またはそれ以外の場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef45a06b2c7cb94d26e3df83157cd1f979d10e1a" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;Logger&lt;/code&gt; to insert.</source>
          <target state="translated">挿入する &lt;code&gt;Logger&lt;/code&gt; の名前。</target>
        </trans-unit>
        <trans-unit id="dd55ce2538ac752361cbfd21c951f733e9d094b0" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;Logger&lt;/code&gt; to remove. If the &lt;code&gt;Logger&lt;/code&gt; is not found &lt;code&gt;null&lt;/code&gt; will be returned. Only the first occurrence of a &lt;code&gt;Logger&lt;/code&gt; with the given name will be removed.</source>
          <target state="translated">削除する &lt;code&gt;Logger&lt;/code&gt; の名前。 &lt;code&gt;Logger&lt;/code&gt; が見つからない場合は、 &lt;code&gt;null&lt;/code&gt; が返されます。指定された名前を持つ &lt;code&gt;Logger&lt;/code&gt; 最初の出現のみが削除されます。</target>
        </trans-unit>
        <trans-unit id="cc826e0e638f15943c2d93a5fc1dee8020c30510" translate="yes" xml:space="preserve">
          <source>The name of the archive member; it is used to index the archive directory for the member. Each member must have a unique name. Do not change without removing member from the directory first.</source>
          <target state="translated">アーカイブ・メンバーの名前です。各メンバーは一意の名前を持つ必要があります。最初にディレクトリからメンバーを削除しない限り、変更しないでください。</target>
        </trans-unit>
        <trans-unit id="9ee544165e4b0ac751c5682d99380143dea28b21" translate="yes" xml:space="preserve">
          <source>The name of the coverage file.</source>
          <target state="translated">カバレッジファイルの名前です。</target>
        </trans-unit>
        <trans-unit id="8ede299dc9f0c5729961ad67f198075314269cda" translate="yes" xml:space="preserve">
          <source>The name of the dynamic library to load.</source>
          <target state="translated">ロードする動的ライブラリの名前。</target>
        </trans-unit>
        <trans-unit id="eb57c5ab9b22c7728fcb5026ae94a8f672f4064a" translate="yes" xml:space="preserve">
          <source>The name of the file in the path name, without any leading directory and with an optional suffix chopped off.  If &lt;code&gt;suffix&lt;/code&gt; is specified, it will be compared to &lt;code&gt;path&lt;/code&gt; using &lt;code&gt;filenameCmp!cs&lt;/code&gt;, where &lt;code&gt;cs&lt;/code&gt; is an optional template parameter determining whether the comparison is case sensitive or not. See the &lt;a href=&quot;#filenameCmp&quot;&gt;&lt;code&gt;filenameCmp&lt;/code&gt;&lt;/a&gt; documentation for details.</source>
          <target state="translated">パス名に含まれるファイルの名前。先頭のディレクトリはなく、省略されたオプションのサフィックスは省略されます。場合 &lt;code&gt;suffix&lt;/code&gt; 指定され、それが比較される &lt;code&gt;path&lt;/code&gt; 使用 &lt;code&gt;filenameCmp!cs&lt;/code&gt; 、 &lt;code&gt;cs&lt;/code&gt; 比較は大文字と小文字を区別するかどうかを決定するパラメータで、オプションのテンプレートです。詳細については、&lt;a href=&quot;#filenameCmp&quot;&gt; &lt;code&gt;filenameCmp&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="300f2fc600e9d7ddc4bfc394a66a2e870cf5e607" translate="yes" xml:space="preserve">
          <source>The name of the file that signaled this error.</source>
          <target state="translated">このエラーを通知したファイル名。</target>
        </trans-unit>
        <trans-unit id="c3104c1d832397234efa203c02c8d138f5d9f9fd" translate="yes" xml:space="preserve">
          <source>The name of the file to get the modification time for.</source>
          <target state="translated">修正時間を取得するファイル名です。</target>
        </trans-unit>
        <trans-unit id="e8109b9ee879cd4547f4e2ca59c0889a944b8289" translate="yes" xml:space="preserve">
          <source>The name of the time zone.</source>
          <target state="translated">タイムゾーンの名前です。</target>
        </trans-unit>
        <trans-unit id="f27bf1b63b731926e3cb9f283408921e662cdceb" translate="yes" xml:space="preserve">
          <source>The name of the time zone. Exactly how the time zone name is formatted depends on the derived class. In the case of &lt;a href=&quot;#PosixTimeZone&quot;&gt;&lt;code&gt;PosixTimeZone&lt;/code&gt;&lt;/a&gt;, it's the TZ Database name, whereas with &lt;a href=&quot;#WindowsTimeZone&quot;&gt;&lt;code&gt;WindowsTimeZone&lt;/code&gt;&lt;/a&gt;, it's the name that Windows chose to give the registry key for that time zone (typically the name that they give &lt;a href=&quot;#stdTime&quot;&gt;&lt;code&gt;stdTime&lt;/code&gt;&lt;/a&gt; if the OS is in English). For other time zone types, what it is depends on how they're implemented.</source>
          <target state="translated">タイムゾーンの名前。タイムゾーン名の正確な形式は、派生クラスによって異なります。以下の場合&lt;a href=&quot;#PosixTimeZone&quot;&gt; &lt;code&gt;PosixTimeZone&lt;/code&gt; &lt;/a&gt;、それが持つのに対し、TZデータベース名です&lt;a href=&quot;#WindowsTimeZone&quot;&gt; &lt;code&gt;WindowsTimeZone&lt;/code&gt; &lt;/a&gt;、それはWindowsがそのタイムゾーンのレジストリキー（彼らは与えることを一般的に名前与えることを選んだ名前だ&lt;a href=&quot;#stdTime&quot;&gt; &lt;code&gt;stdTime&lt;/code&gt; &lt;/a&gt; OSが英語である場合には）。他のタイムゾーンタイプの場合、それがどのように実装されているかによって異なります。</target>
        </trans-unit>
        <trans-unit id="7356c9b705dbe74fbd4051d488c2e6132abcd4c9" translate="yes" xml:space="preserve">
          <source>The name of this thread.</source>
          <target state="translated">このスレッドの名前。</target>
        </trans-unit>
        <trans-unit id="c1776179bbf96730aef0ae7bbd1e4946315a478b" translate="yes" xml:space="preserve">
          <source>The name to associate with tid.</source>
          <target state="translated">チッドから連想する名前。</target>
        </trans-unit>
        <trans-unit id="6450e623e92fd399a84552aa61d8d22ade4cc69a" translate="yes" xml:space="preserve">
          <source>The name to locate within the registry.</source>
          <target state="translated">レジストリ内で検索する名前。</target>
        </trans-unit>
        <trans-unit id="2b6764cf8c6facb0fec9b546a291b7a2d4a5f2ee" translate="yes" xml:space="preserve">
          <source>The name to unregister.</source>
          <target state="translated">登録解除する名前です。</target>
        </trans-unit>
        <trans-unit id="237ed33d70031f44c43457be931f956373047992" translate="yes" xml:space="preserve">
          <source>The names of the &lt;code&gt;Tuple&lt;/code&gt;'s components. Unnamed fields have empty names.</source>
          <target state="translated">&lt;code&gt;Tuple&lt;/code&gt; のコンポーネントの名前。名前のないフィールドの名前は空です。</target>
        </trans-unit>
        <trans-unit id="3ad8dfc5a740c084b53b8cdd123ef24e70479c04" translate="yes" xml:space="preserve">
          <source>The names of the fields that are to be aligned.</source>
          <target state="translated">整列させるフィールドの名前です。</target>
        </trans-unit>
        <trans-unit id="32748ca9205b0eda60d1a2b3377d67735262b73b" translate="yes" xml:space="preserve">
          <source>The natural alignment of an aggregate is the maximum alignment of its fields. It can be overridden by setting the alignment outside of the aggregate.</source>
          <target state="translated">集合体の自然な整列は、そのフィールドの最大整列です。これは、アグリゲートの外側にアラインメントを設定することで上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="4d205145a6dee0cb48fa4896fcd5718737412eec" translate="yes" xml:space="preserve">
          <source>The necessity of &lt;code&gt;FPTemporary&lt;/code&gt; stems from the optimized floating-point operations and registers present in virtually all processors. When adding numbers in the example above, the addition may in fact be done in &lt;code&gt;real&lt;/code&gt; precision internally. In that case, storing the intermediate &lt;code&gt;result&lt;/code&gt; in &lt;code&gt;double format&lt;/code&gt; is not only less precise, it is also (surprisingly) slower, because a conversion from &lt;code&gt;real&lt;/code&gt; to &lt;code&gt;double&lt;/code&gt; is performed every pass through the loop. This being a lose-lose situation, &lt;code&gt;FPTemporary!F&lt;/code&gt; has been defined as the</source>
          <target state="translated">&lt;code&gt;FPTemporary&lt;/code&gt; の必要性は、最適化された浮動小数点演算と実質的にすべてのプロセッサに存在するレジスターから生じます。上記の例で数値を加算する場合、加算は実際には内部で &lt;code&gt;real&lt;/code&gt; 精度で行われる場合があります。その場合、中間 &lt;code&gt;result&lt;/code&gt; を &lt;code&gt;double format&lt;/code&gt; で保存すると、精度が低下するだけでなく、（驚くほど）低速になります。これは、 &lt;code&gt;real&lt;/code&gt; から &lt;code&gt;double&lt;/code&gt; 型への変換がループのすべてのパスで実行されるためです。これは負け負けの状況であり、 &lt;code&gt;FPTemporary!F&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="ce69a83fa824acdbab753bf226be620b99f45d75" translate="yes" xml:space="preserve">
          <source>The needles against which the range is to be checked, which may be individual elements or input ranges of elements.</source>
          <target state="translated">範囲をチェックするための針で、個々の要素または要素の入力範囲である場合があります。</target>
        </trans-unit>
        <trans-unit id="bfdb89ae3952e0ebbdb470ec1b2208c20a477858" translate="yes" xml:space="preserve">
          <source>The needles to check against, which may be single elements, or bidirectional ranges of elements.</source>
          <target state="translated">チェックするための針であって、それは単一の要素であってもよいし、要素の双方向の範囲であってもよい。</target>
        </trans-unit>
        <trans-unit id="aadc952b806bed5663dabd85a1e647a24a59b7a9" translate="yes" xml:space="preserve">
          <source>The network interface to use in form of the the IP of the interface.</source>
          <target state="translated">インターフェイスのIPの形で使用するネットワークインターフェイス。</target>
        </trans-unit>
        <trans-unit id="d0400083bef2e7ef7cc46b24ddfeddfeb8ab8c14" translate="yes" xml:space="preserve">
          <source>The new GC is added to the list of available garbage collectors that can be selected via the usual configuration options, e.g. by embedding &lt;code&gt;rt_options&lt;/code&gt; into the binary:</source>
          <target state="translated">新しいGCは、たとえば &lt;code&gt;rt_options&lt;/code&gt; をバイナリに埋め込むことによって、通常の構成オプションを介して選択できる利用可能なガベージコレクターのリストに追加されます。</target>
        </trans-unit>
        <trans-unit id="9669eec52fe11c4d6bad1a51de754d4e92f468df" translate="yes" xml:space="preserve">
          <source>The new capacity of the array (which may be larger than the requested capacity).</source>
          <target state="translated">アレイの新しい容量(要求された容量よりも大きくなる可能性がある)。</target>
        </trans-unit>
        <trans-unit id="1cf6198accddd14ad946cf8a5d9d64fbb23a0e02" translate="yes" xml:space="preserve">
          <source>The new collect handler. Set to null to use the default handler.</source>
          <target state="translated">新しいコレクトハンドラ。nullに設定するとデフォルトのハンドラを使用します。</target>
        </trans-unit>
        <trans-unit id="0c74f8b0b947d138316f600a118f4af837db2c6f" translate="yes" xml:space="preserve">
          <source>The new daemon status for this thread.</source>
          <target state="translated">このスレッドの新しいデーモンのステータスです。</target>
        </trans-unit>
        <trans-unit id="cc66954b4cb782475e75068053434548b84f648b" translate="yes" xml:space="preserve">
          <source>The new extension</source>
          <target state="translated">新しいエクステンション</target>
        </trans-unit>
        <trans-unit id="6c6fed22d3bfa6cee371ded07b99f5fc419355ad" translate="yes" xml:space="preserve">
          <source>The new handle will have all options set as the one it was duplicated from. An exception to this is that all options that cannot be shared across threads are reset thereby making it safe to use the duplicate in a new thread.</source>
          <target state="translated">新しいハンドルには、すべてのオプションが複製元のものと同じように設定されます。例外として、スレッド間で共有できないすべてのオプションはリセットされ、 新しいスレッドで複製を使用しても安全になります。</target>
        </trans-unit>
        <trans-unit id="acc5bddfa65365c1a41f6c814bd0b6ebf529b8b6" translate="yes" xml:space="preserve">
          <source>The new length of the array</source>
          <target state="translated">配列の新しい長さ</target>
        </trans-unit>
        <trans-unit id="44a43ff11b1752259ff91b328a916debf3f4639d" translate="yes" xml:space="preserve">
          <source>The new name of this thread.</source>
          <target state="translated">このスレッドの新しい名前</target>
        </trans-unit>
        <trans-unit id="06d8bda027bfab1541ebec46a9bfa9f862174683" translate="yes" xml:space="preserve">
          <source>The new path name.</source>
          <target state="translated">新しいパス名です。</target>
        </trans-unit>
        <trans-unit id="69ac0b91bb8b9e837548ad9dd2ea12af0f0c91cd" translate="yes" xml:space="preserve">
          <source>The new position of the pivot</source>
          <target state="translated">ピボットの新しい位置</target>
        </trans-unit>
        <trans-unit id="66818226d4d8e1db31b172237309a1e18f4a385a" translate="yes" xml:space="preserve">
          <source>The new scheduling priority of this thread.</source>
          <target state="translated">このスレッドの新しいスケジューリング優先度。</target>
        </trans-unit>
        <trans-unit id="bd1e49caf2a8a204c7259f45e5e91918594335cb" translate="yes" xml:space="preserve">
          <source>The new trace handler. Set to null to use the default handler.</source>
          <target state="translated">新しいトレース・ハンドラ。null に設定すると、デフォルトのハンドラを使用します。</target>
        </trans-unit>
        <trans-unit id="ef32f36ed520dab3a13bb8e95c2b955f22dc9b02" translate="yes" xml:space="preserve">
          <source>The new type supports all operations that the underlying type does, including all operators such as &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, etc.</source>
          <target state="translated">新しい型は、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;--&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;[]&lt;/code&gt; などのすべての演算子を含む、基になる型が行うすべての操作をサポートします。</target>
        </trans-unit>
        <trans-unit id="4c2af0bb285d74b0268707c20367567927c3ffc7" translate="yes" xml:space="preserve">
          <source>The new unit tester. Set both to null to use the default unit tester.</source>
          <target state="translated">新しいユニットテスターです。両方をnullに設定して、デフォルトのユニットテスターを使用します。</target>
        </trans-unit>
        <trans-unit id="6444785f7ab11942d704329e47346be10efdb756" translate="yes" xml:space="preserve">
          <source>The new value of &lt;code&gt;px&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;px&lt;/code&gt; の新しい値</target>
        </trans-unit>
        <trans-unit id="a51d15a8fa704020915ee450c5caa4010f6aa779" translate="yes" xml:space="preserve">
          <source>The new value of &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の新しい値</target>
        </trans-unit>
        <trans-unit id="e4e6a0eafbf606dbc06607e9b4455a1bb56b0445" translate="yes" xml:space="preserve">
          <source>The new-style generator objects hold their own state so they are immune of threading issues. The generators feature a number of well-known and well-documented methods of generating random numbers. An overall fast and reliable means to generate random numbers is the Mt19937 generator, which derives its name from &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mersenne_Twister&quot;&gt;Mersenne Twister&lt;/a&gt; with a period of 2 to the power of 19937&quot;. In memory-constrained situations, &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_congruential_generator&quot;&gt;linear congruential generators&lt;/a&gt; such as &lt;code&gt;MinstdRand0&lt;/code&gt; and &lt;code&gt;MinstdRand&lt;/code&gt; might be useful. The standard library provides an alias Random for whichever generator it considers the most fit for the target environment.</source>
          <target state="translated">新しいスタイルのジェネレーターオブジェクトは独自の状態を保持するため、スレッド化の問題の影響を受けません。ジェネレータは、乱数を生成する多くのよく知られており、文書化された方法を備えています。乱数を生成するための全体的に高速で信頼性の高い手段は、Mt19937ジェネレーターです。この名前は、「周期が2 の19937乗の&lt;a href=&quot;https://en.wikipedia.org/wiki/Mersenne_Twister&quot;&gt;メルセンヌツイスター&lt;/a&gt;」に由来しています。メモリに制約がある状況では、 &lt;code&gt;MinstdRand0&lt;/code&gt; や &lt;code&gt;MinstdRand&lt;/code&gt; などの&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_congruential_generator&quot;&gt;線形合同ジェネレーター&lt;/a&gt;が役立つ場合があります。標準ライブラリは、ターゲット環境に最も適していると考えるジェネレータのエイリアスRandomを提供します。</target>
        </trans-unit>
        <trans-unit id="6e04d5ec9d8b3f77749de3ac5300639b2dab8407" translate="yes" xml:space="preserve">
          <source>The newline following the opening identifier is not part of the string, but the last newline before the closing identifier is part of the string. The closing identifier must be placed on its own line at the leftmost column.</source>
          <target state="translated">開き識別子に続く改行は文字列の一部ではありませんが、閉じ識別子の前の最後の改行は文字列の一部となります。終了識別子は、最左端の列のそれ自身の行に置かなければなりません。</target>
        </trans-unit>
        <trans-unit id="51929efa4bba26701d3e4c3aa50f3e9c95ba7e57" translate="yes" xml:space="preserve">
          <source>The newly constructed object.</source>
          <target state="translated">新たに構築されたオブジェクト。</target>
        </trans-unit>
        <trans-unit id="c4d7c48e5f93c9ad9f6d35527dbfa50a57849838" translate="yes" xml:space="preserve">
          <source>The newly-created array, or &lt;code&gt;null&lt;/code&gt; if either &lt;code&gt;length&lt;/code&gt; was &lt;code&gt;0&lt;/code&gt; or allocation failed.</source>
          <target state="translated">新しく作成された配列、または &lt;code&gt;length&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; であるか割り当てが失敗した場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b81ee0139f4bf3ca132aff416b4badbbfb8df40c" translate="yes" xml:space="preserve">
          <source>The next unnamed section is the</source>
          <target state="translated">次の無名区間は</target>
        </trans-unit>
        <trans-unit id="4c1d1956fd234c462fed35c0d040ec6b5d07b95f" translate="yes" xml:space="preserve">
          <source>The non-static data members of a struct are called</source>
          <target state="translated">構造体の非静的データ・メンバは</target>
        </trans-unit>
        <trans-unit id="604fdea6e74692fe9e13e9f5a58a3d2b1b6ac2cf" translate="yes" xml:space="preserve">
          <source>The normal (or Gaussian, or bell-shaped) distribution is defined as:</source>
          <target state="translated">正規分布(またはガウス分布、またはベル型分布)は次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="eff21418db566bf6deaa5b9e66141af90f3d37fd" translate="yes" xml:space="preserve">
          <source>The normal flow of program logic is performance critical.</source>
          <target state="translated">プログラムロジックの通常の流れは、パフォーマンスが重要です。</target>
        </trans-unit>
        <trans-unit id="7d10d0ff78a75299a167b0002f609034c9aaa171" translate="yes" xml:space="preserve">
          <source>The nth &lt;code&gt;ulong&lt;/code&gt; in the representation of this &lt;code&gt;BigInt&lt;/code&gt;.</source>
          <target state="translated">n番目の &lt;code&gt;ulong&lt;/code&gt; この表現で &lt;code&gt;BigInt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb3057bb9b7c5b0a70e9ce3b421bd111159e0bc0" translate="yes" xml:space="preserve">
          <source>The nth number to retrieve. Must be less than &lt;a href=&quot;#ulongLength&quot;&gt;&lt;code&gt;ulongLength&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#uintLength&quot;&gt;&lt;code&gt;uintLength&lt;/code&gt;&lt;/a&gt; with respect to &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">取得するn番目の数値。 &lt;code&gt;T&lt;/code&gt; に関して、&lt;a href=&quot;#ulongLength&quot;&gt; &lt;code&gt;ulongLength&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#uintLength&quot;&gt; &lt;code&gt;uintLength&lt;/code&gt; &lt;/a&gt;未満でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b76d5847a278447b3f3920d9aa794bc68c09f466" translate="yes" xml:space="preserve">
          <source>The null value which denotes the null state of this &lt;code&gt;Nullable&lt;/code&gt;. Must be of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Nullable&lt;/code&gt; の null状態を示すnull値。タイプ &lt;code&gt;T&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="199b0fb0977641f832ecd7a38d40b0a14f3dad41" translate="yes" xml:space="preserve">
          <source>The number of &lt;code&gt;Tgt&lt;/code&gt; elements written.</source>
          <target state="translated">書き込まれた &lt;code&gt;Tgt&lt;/code&gt; 要素の数。</target>
        </trans-unit>
        <trans-unit id="95368522e59bb86a89704bd4d6738e476908f01e" translate="yes" xml:space="preserve">
          <source>The number of bits of state of this generator. This must be a positive multiple of the size in bits of UIntType. If nbits is large this struct may occupy slightly more memory than this so it can use a circular counter instead of shifting the entire array.</source>
          <target state="translated">このジェネレータの状態のビット数。これは UIntType のビット単位のサイズの正の倍数でなければなりません。nbitsが大きい場合、この構造体は、配列全体をシフトする代わりに円形カウンタを使用することができるように、これよりもわずかに多くのメモリを占有する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ed0599417ff90656d7b8a7db044e9965e3ca5970" translate="yes" xml:space="preserve">
          <source>The number of buffers to cycle through when calling &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; を呼び出すときに循環するバッファの数。</target>
        </trans-unit>
        <trans-unit id="30308060113660277e7be67f08fdce3f91011c41" translate="yes" xml:space="preserve">
          <source>The number of bytes actually received, &lt;code&gt;0&lt;/code&gt; if the remote side has closed the connection, or &lt;code&gt;Socket.ERROR&lt;/code&gt; on failure.</source>
          <target state="translated">実際に受信したバイト数。リモート側が接続を閉じた場合は &lt;code&gt;0&lt;/code&gt; 、失敗した場合は &lt;code&gt;Socket.ERROR&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52771a2599e853e22c9997ae74caf507a27e6674" translate="yes" xml:space="preserve">
          <source>The number of bytes actually sent, or &lt;code&gt;Socket.ERROR&lt;/code&gt; on failure.</source>
          <target state="translated">実際に送信されたバイト数。失敗した場合は &lt;code&gt;Socket.ERROR&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb4925770f917957f95841228cf7a081251584ac" translate="yes" xml:space="preserve">
          <source>The number of bytes written to &lt;code&gt;result&lt;/code&gt;. The length, in bytes, of the actual result - very different from getsockopt()</source>
          <target state="translated">&lt;code&gt;result&lt;/code&gt; 書き込まれたバイト数。実際の結果の長さ（バイト単位）-getsockopt（）とは非常に異なります</target>
        </trans-unit>
        <trans-unit id="18e0b014069c5b9a5015fd8266605137eb19d431" translate="yes" xml:space="preserve">
          <source>The number of cache levels in the CPU.</source>
          <target state="translated">CPUのキャッシュレベルの数。</target>
        </trans-unit>
        <trans-unit id="4e1a5c7628d25ca94f5309da0ccfd2a5e3544707" translate="yes" xml:space="preserve">
          <source>The number of chunks buffered asynchronously</source>
          <target state="translated">非同期的にバッファリングされたチャンクの数</target>
        </trans-unit>
        <trans-unit id="d794552fb711e9d13296816f458408c772152acf" translate="yes" xml:space="preserve">
          <source>The number of code units in &lt;code&gt;input&lt;/code&gt; when encoded to &lt;code&gt;C&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; にエンコードされたときの &lt;code&gt;input&lt;/code&gt; のコード単位の数</target>
        </trans-unit>
        <trans-unit id="4af8e22ffe4686545114fe30d8267cec1e21b38c" translate="yes" xml:space="preserve">
          <source>The number of code units in the UTF sequence. For UTF-8, this is a value between 1 and 4 (as per &lt;a href=&quot;http://tools.ietf.org/html/rfc3629#section-3&quot;&gt;RFC 3629, section 3&lt;/a&gt;). For UTF-16, it is either 1 or 2. For UTF-32, it is always 1.</source>
          <target state="translated">UTFシーケンスのコード単位の数。UTF-8の場合、これは1から4までの値です（&lt;a href=&quot;http://tools.ietf.org/html/rfc3629#section-3&quot;&gt;RFC 3629、セクション3&lt;/a&gt;に従って）。UTF-16の場合は1または2です。UTF-32の場合は常に1です。</target>
        </trans-unit>
        <trans-unit id="9b086774b97ab095e92a7ab074a4a0747c6a4cdd" translate="yes" xml:space="preserve">
          <source>The number of code units in the UTF sequence. For UTF-8, this is a value between 1 and 4 (as per &lt;a href=&quot;https://tools.ietf.org/html/rfc3629#section-3&quot;&gt;RFC 3629, section 3&lt;/a&gt;). For UTF-16, it is either 1 or 2. For UTF-32, it is always 1.</source>
          <target state="translated">UTFシーケンス内のコードユニットの数。UTF-8の場合、これは1から4までの値です（&lt;a href=&quot;https://tools.ietf.org/html/rfc3629#section-3&quot;&gt;RFC 3629、セクション3による&lt;/a&gt;）。UTF-16の場合は1または2です。UTF-32の場合は常に1です。</target>
        </trans-unit>
        <trans-unit id="5eb0aafa3d3443973bc7f248675786f305586655" translate="yes" xml:space="preserve">
          <source>The number of colons in the selector needs to match the number of parameters the method is declared with</source>
          <target state="translated">セレクタのコロンの数は、メソッドが</target>
        </trans-unit>
        <trans-unit id="cf1a54117f4160455c190793bfbc5f270d3ef431" translate="yes" xml:space="preserve">
          <source>The number of colons in the string need to match the number of arguments the method accept.</source>
          <target state="translated">文字列中のコロンの数は、メソッドが受け入れる引数の数と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="74867ebd8619c3c9f54bb7be26778ccc990cfd33" translate="yes" xml:space="preserve">
          <source>The number of days to add to this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;に追加する日数。</target>
        </trans-unit>
        <trans-unit id="17519ebe025dfa827b2543290a321667b7bbfac2" translate="yes" xml:space="preserve">
          <source>The number of elements brought to the front, i.e., the length of &lt;code&gt;back&lt;/code&gt;.</source>
          <target state="translated">前に持ってきた要素の数、つまり &lt;code&gt;back&lt;/code&gt; の長さ。</target>
        </trans-unit>
        <trans-unit id="30c9197d75a0a694e962a609bbc59e4ba11be6f0" translate="yes" xml:space="preserve">
          <source>The number of elements in an</source>
          <target state="translated">の要素数は</target>
        </trans-unit>
        <trans-unit id="0419481cf5884d86b99e61181cced8b51e95c26d" translate="yes" xml:space="preserve">
          <source>The number of elements in the array.</source>
          <target state="translated">配列の要素数。</target>
        </trans-unit>
        <trans-unit id="325aeffb680232bb5eba0a4534994930400a1165" translate="yes" xml:space="preserve">
          <source>The number of elements inserted</source>
          <target state="translated">挿入されている要素の数</target>
        </trans-unit>
        <trans-unit id="4f13d3392d3b50fea45a81fe242fa67f3021e8e8" translate="yes" xml:space="preserve">
          <source>The number of elements inserted.</source>
          <target state="translated">挿入されている要素の数。</target>
        </trans-unit>
        <trans-unit id="c6d6d4be5d1980bfa9a3ce44b333a124372b6ae3" translate="yes" xml:space="preserve">
          <source>The number of elements removed</source>
          <target state="translated">削除された要素の数</target>
        </trans-unit>
        <trans-unit id="20396f56c8e3a0c13e5e36b7f2622f3b64ae5d64" translate="yes" xml:space="preserve">
          <source>The number of elements removed.</source>
          <target state="translated">削除された要素の数。</target>
        </trans-unit>
        <trans-unit id="a147df2d8f03d61a2cbd49ca985ab3c09c4946c0" translate="yes" xml:space="preserve">
          <source>The number of elements to evaluate in a single &lt;code&gt;Task&lt;/code&gt;. Must be less than or equal to &lt;code&gt;bufSize&lt;/code&gt;, and should be a fraction of &lt;code&gt;bufSize&lt;/code&gt; such that all worker threads can be used. If the default of size_t.max is used, workUnitSize will be set to the pool-wide default.</source>
          <target state="translated">1つの &lt;code&gt;Task&lt;/code&gt; で評価する要素の数。以下に等しくなければなりません &lt;code&gt;bufSize&lt;/code&gt; 、との一部でなければなりません &lt;code&gt;bufSize&lt;/code&gt; すべてのワーカースレッドが利用できるようになっています。デフォルトのsize_t.maxが使用されている場合、workUnitSizeはプール全体のデフォルトに設定されます。</target>
        </trans-unit>
        <trans-unit id="9de93b8e68b06f4138b723f65ba57f9135fbd680" translate="yes" xml:space="preserve">
          <source>The number of elements which must be popped from the front of &lt;code&gt;haystack&lt;/code&gt; before reaching an element for which &lt;code&gt;startsWith!pred(haystack, needles)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;startsWith!pred(haystack, needles)&lt;/code&gt; is not &lt;code&gt;true&lt;/code&gt; for any element in &lt;code&gt;haystack&lt;/code&gt;, then &lt;code&gt;-1&lt;/code&gt; is returned. If only &lt;code&gt;pred&lt;/code&gt; is provided, &lt;code&gt;pred(haystack)&lt;/code&gt; is tested for each element.</source>
          <target state="translated">正面からポップされなければならない要素の数 &lt;code&gt;haystack&lt;/code&gt; れる要素に到達する前 &lt;code&gt;startsWith!pred(haystack, needles)&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; 。場合 &lt;code&gt;startsWith!pred(haystack, needles)&lt;/code&gt; ないが &lt;code&gt;true&lt;/code&gt; 内の任意の要素のために &lt;code&gt;haystack&lt;/code&gt; 、そして、 &lt;code&gt;-1&lt;/code&gt; が返されます。場合にのみ、 &lt;code&gt;pred&lt;/code&gt; をが提供され、 &lt;code&gt;pred(haystack)&lt;/code&gt; 、各要素について試験されます。</target>
        </trans-unit>
        <trans-unit id="11ccb90c9b9e42a2c399f8ec744f0b51f68401b5" translate="yes" xml:space="preserve">
          <source>The number of files in this archive.</source>
          <target state="translated">このアーカイブのファイル数。</target>
        </trans-unit>
        <trans-unit id="495bce27f099960a19a7f2777229fe07b08dc353" translate="yes" xml:space="preserve">
          <source>The number of hnsecs since January 1st, 1 A.D. UTC.</source>
          <target state="translated">西暦1月1日からのhnsecsの数。</target>
        </trans-unit>
        <trans-unit id="0128cf9b280876e985f5bc63b3c33b05eec8b671" translate="yes" xml:space="preserve">
          <source>The number of hnsecs since midnight, January 1st, 1 A.D. UTC.</source>
          <target state="translated">1月1日西暦1月1日午前0時からのhnsecsの数。</target>
        </trans-unit>
        <trans-unit id="dfa696143d106fe9221db705fdd3a015ad40f3ab" translate="yes" xml:space="preserve">
          <source>The number of lines buffered asynchronously</source>
          <target state="translated">非同期的にバッファリングされた行数</target>
        </trans-unit>
        <trans-unit id="9bd6f12f8ce1f299c0d0263b77bcc143be77d073" translate="yes" xml:space="preserve">
          <source>The number of months or years to add to this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;に追加する月または年の数。</target>
        </trans-unit>
        <trans-unit id="b9c39f066ee7dbe68f94fd81f8c5f3cf00396747" translate="yes" xml:space="preserve">
          <source>The number of months or years to add to this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;に追加する月数または年数。</target>
        </trans-unit>
        <trans-unit id="57340a14727c652a36c1e1fc1ba3e2830bbfa123" translate="yes" xml:space="preserve">
          <source>The number of months or years to add to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;に追加する月数または年数。</target>
        </trans-unit>
        <trans-unit id="02485194b1dc362bace73e65c9372da46a13c61b" translate="yes" xml:space="preserve">
          <source>The number of months to add to the time point passed to the delegate.</source>
          <target state="translated">代議員に渡されたタイムポイントに加算する月数。</target>
        </trans-unit>
        <trans-unit id="aca30d94828d21a4c6a8ef3a42e227aa33b46f16" translate="yes" xml:space="preserve">
          <source>The number of months to expand the interval by.</source>
          <target state="translated">間隔を広げる月数です。</target>
        </trans-unit>
        <trans-unit id="4f7751ef3f5968bb794d3b81c43237882d9d52ee" translate="yes" xml:space="preserve">
          <source>The number of months to shift the interval by.</source>
          <target state="translated">間隔をずらす月数です。</target>
        </trans-unit>
        <trans-unit id="63a68d030d7307514d07c50786c06b3b1b3f26d9" translate="yes" xml:space="preserve">
          <source>The number of pages is variable (but not less then 1) unlike the number of entries in the index. The slots of the index all have to contain a number of a page that is present. The lookup is then just a couple of operations - slice the upper bits, lookup an index for these, take a page at this index and use the lower bits as an offset within this page.</source>
          <target state="translated">インデックスのエントリ数とは異なり、ページ数は可変である(ただし、1以下ではない)。インデックスのスロットはすべて、存在するページの番号を含まなければなりません。ルックアップは、上位ビットをスライスし、インデックスをルックアップし、このインデックスのページを取り、下位ビットをこのページ内のオフセットとして使用するという、2つの操作を行うだけです。</target>
        </trans-unit>
        <trans-unit id="a4a9d929861b7f4540e0616b20649c026af1b75f" translate="yes" xml:space="preserve">
          <source>The number of positions in the &lt;code&gt;haystack&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returned true.</source>
          <target state="translated">位置の数 &lt;code&gt;haystack&lt;/code&gt; れる &lt;code&gt;pred&lt;/code&gt; trueを返し。</target>
        </trans-unit>
        <trans-unit id="e5d60a9e70df9e4591b2299d06f99ccc91195edd" translate="yes" xml:space="preserve">
          <source>The number of sockets with status changes, &lt;code&gt;0&lt;/code&gt; on timeout, or &lt;code&gt;-1&lt;/code&gt; on interruption. If the return value is greater than &lt;code&gt;0&lt;/code&gt;, the &lt;code&gt;SocketSets&lt;/code&gt; are updated to only contain the sockets having status changes. For a connecting socket, a write status change means the connection is established and it's able to send. For a listening socket, a read status change means there is an incoming connection request and it's able to accept.  &lt;code&gt;SocketSet&lt;/code&gt;'s updated to include only those sockets which an event occured. For a &lt;code&gt;connect()&lt;/code&gt;ing socket, writeability means connected. For a &lt;code&gt;listen()&lt;/code&gt;ing socket, readability means listening &lt;code&gt;Winsock&lt;/code&gt;; possibly internally limited to 64 sockets per set.</source>
          <target state="translated">ステータスが変化したソケットの数。タイムアウトの場合は &lt;code&gt;0&lt;/code&gt; 、割り込みの場合は &lt;code&gt;-1&lt;/code&gt; 。戻り値が &lt;code&gt;0&lt;/code&gt; より大きい場合、 &lt;code&gt;SocketSets&lt;/code&gt; はステータスが変更されたソケットのみを含むように更新されます。接続ソケットの場合、書き込みステータスの変更は、接続が確立されて送信できることを意味します。リスニングソケットの場合、読み取りステータスの変化は、着信接続要求があり、それを受け入れることができることを意味します。 &lt;code&gt;SocketSet&lt;/code&gt; は、イベントが発生したソケットのみを含むように更新されました。以下のために &lt;code&gt;connect()&lt;/code&gt; INGソケット、書き込み可能手段が接続されています。以下のため &lt;code&gt;listen()&lt;/code&gt; INGのソケット、リスニング可読性手段 &lt;code&gt;Winsock&lt;/code&gt; ; 内部的には、セットあたり64ソケットに制限される可能性があります。</target>
        </trans-unit>
        <trans-unit id="92623bd7d09398f80bbab3bb0f5f2ef38d3da421" translate="yes" xml:space="preserve">
          <source>The number of system ticks in this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;TickDuration&lt;/code&gt; 内のシステムティックの数。</target>
        </trans-unit>
        <trans-unit id="7611dde88762f088b010293dbcd7b4751f9ec60a" translate="yes" xml:space="preserve">
          <source>The number of the disk where this member can be found.</source>
          <target state="translated">このメンバーが存在するディスクの番号。</target>
        </trans-unit>
        <trans-unit id="8f11ee7d7d27eb3d41061b45eac584df0b5f1cfe" translate="yes" xml:space="preserve">
          <source>The number of ticks in the TickDuration.</source>
          <target state="translated">TickDurationに含まれるダニの数。</target>
        </trans-unit>
        <trans-unit id="c3535c21516c22bad36e4ae79f60e710279eebd0" translate="yes" xml:space="preserve">
          <source>The number of ticks in the monotonic time.</source>
          <target state="translated">単調な時間の刻み数。</target>
        </trans-unit>
        <trans-unit id="133c2247d181f5eb459c19f2950580ed684e418a" translate="yes" xml:space="preserve">
          <source>The number of ticks that MonoTime has per second - i.e. the resolution or frequency of the system's monotonic clock.</source>
          <target state="translated">MonoTimeが1秒あたりに持っている目盛りの数、つまりシステムの単調クロックの分解能または周波数。</target>
        </trans-unit>
        <trans-unit id="8271982f8f2afc20c964508f18ca6b32767857e7" translate="yes" xml:space="preserve">
          <source>The number of ticks that the system clock has in one second.</source>
          <target state="translated">システムクロックが1秒間に持っている目盛りの数。</target>
        </trans-unit>
        <trans-unit id="8b51266ea49a500bd86819d90d5f5babd9fda252" translate="yes" xml:space="preserve">
          <source>The number of times each function is to be executed.</source>
          <target state="translated">各関数の実行回数を指定します。</target>
        </trans-unit>
        <trans-unit id="f1050ae226927365357fc51efba9b81760d7056b" translate="yes" xml:space="preserve">
          <source>The number of times the output range's &lt;code&gt;put&lt;/code&gt; method was invoked.</source>
          <target state="translated">出力範囲の &lt;code&gt;put&lt;/code&gt; メソッドが呼び出された回数。</target>
        </trans-unit>
        <trans-unit id="4d82522805f2ebbbf559fec74a61f5c7cb9cc3a6" translate="yes" xml:space="preserve">
          <source>The number of units in the &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; の単位数。</target>
        </trans-unit>
        <trans-unit id="794f084381c766ea0ff9fffa3e14bba305b1eb34" translate="yes" xml:space="preserve">
          <source>The number of units in the &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TickDuration&lt;/code&gt; のユニット数。</target>
        </trans-unit>
        <trans-unit id="22c3d0c8685c468fadcdccd79c29727ddf2e7e9a" translate="yes" xml:space="preserve">
          <source>The number of units to add to this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;に追加する単位の数。</target>
        </trans-unit>
        <trans-unit id="9b148446ca97774856b435f40497b3469e8ca6ab" translate="yes" xml:space="preserve">
          <source>The number of units to add to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;に追加するユニットの数。</target>
        </trans-unit>
        <trans-unit id="b3b24aff6aba1d0b2f312ff80d7560f7feabc059" translate="yes" xml:space="preserve">
          <source>The number of units to add to this &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#TimeOfDay&quot;&gt; &lt;code&gt;TimeOfDay&lt;/code&gt; &lt;/a&gt;に追加する単位の数。</target>
        </trans-unit>
        <trans-unit id="37c2540cc1f38510b5307fd0d898532d4c17f0e5" translate="yes" xml:space="preserve">
          <source>The number of units to multiply this &lt;code&gt;Duration&lt;/code&gt; by.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に乗算する単位の数。</target>
        </trans-unit>
        <trans-unit id="5f6b34534215487ddb13229d1e9eb704abfb659b" translate="yes" xml:space="preserve">
          <source>The number of values inserted.</source>
          <target state="translated">挿入されている値の数です。</target>
        </trans-unit>
        <trans-unit id="d14be6e779a48d8faa82f80e4dc078722606651d" translate="yes" xml:space="preserve">
          <source>The number of waiting threads to release in unison.</source>
          <target state="translated">一致団結してリリースするための待機スレッドの数です。</target>
        </trans-unit>
        <trans-unit id="365cb2c08dafe42960332e827da68e53b00a9bd8" translate="yes" xml:space="preserve">
          <source>The number of years to add to the time point passed to the delegate.</source>
          <target state="translated">代議員に渡されたタイムポイントに加算する年数。</target>
        </trans-unit>
        <trans-unit id="fcc2e5d2212e8d8be70b8d4677e493fc3848a020" translate="yes" xml:space="preserve">
          <source>The number of years to expand the interval by.</source>
          <target state="translated">間隔を何年で広げるか。</target>
        </trans-unit>
        <trans-unit id="2241ab252f8a5484883abb33a8af4a6dad25eb69" translate="yes" xml:space="preserve">
          <source>The number of years to shift the interval by.</source>
          <target state="translated">年単位で間隔をずらすことができます。</target>
        </trans-unit>
        <trans-unit id="ab33e33805a08eda08dd986381c2b8f8b862f93b" translate="yes" xml:space="preserve">
          <source>The number to validate.</source>
          <target state="translated">検証する番号です。</target>
        </trans-unit>
        <trans-unit id="b28803e23c2f1bebd73a4d48e79b273e730f7db3" translate="yes" xml:space="preserve">
          <source>The numeric literals &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; can be implicitly converted to the &lt;code&gt;bool&lt;/code&gt; values &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt;, respectively. Casting an expression to &lt;code&gt;bool&lt;/code&gt; means testing for &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;!=0&lt;/code&gt; for arithmetic types, and &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;!=null&lt;/code&gt; for pointers or references.</source>
          <target state="translated">数値リテラル &lt;code&gt;0&lt;/code&gt; および &lt;code&gt;1&lt;/code&gt; は、それぞれ暗黙的に &lt;code&gt;bool&lt;/code&gt; 値 &lt;code&gt;false&lt;/code&gt; および &lt;code&gt;true&lt;/code&gt; に変換できます。式を &lt;code&gt;bool&lt;/code&gt; にキャストするということは、算術型の場合は &lt;code&gt;0&lt;/code&gt; または &lt;code&gt;!=0&lt;/code&gt; をテストし、ポインターまたは参照の場合は &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;!=null&lt;/code&gt; をテストすることを意味します。</target>
        </trans-unit>
        <trans-unit id="fe0da3c8ef7d3c766ce89becdf0b23671a0397f9" translate="yes" xml:space="preserve">
          <source>The numeric version number is also available &quot;in parts&quot; by using these constants</source>
          <target state="translated">数値バージョン番号は、以下の定数を使用することで「部品単位」でも利用可能です。</target>
        </trans-unit>
        <trans-unit id="126529265bda77a1ffa31840d1614e6dc6547606" translate="yes" xml:space="preserve">
          <source>The object to throw.</source>
          <target state="translated">投げられる対象物。</target>
        </trans-unit>
        <trans-unit id="917127d4e18a9f0f96c8fddb70a363dd7f1bb7b1" translate="yes" xml:space="preserve">
          <source>The object-oriented features of D all come from classes. The class hierarchy has as its root the class Object. Object defines a minimum level of functionality that each derived class has, and a default implementation for that functionality.</source>
          <target state="translated">D のオブジェクト指向の機能はすべてクラスから来ています。クラス階層には、ルートとして Object というクラスがあります。Object は、各派生クラスが持つ最低限の機能と、その機能のデフォルト実装を定義します。</target>
        </trans-unit>
        <trans-unit id="83450785309cc6865682ad266cad8f967bd48d27" translate="yes" xml:space="preserve">
          <source>The old benchmarking functionality in std.datetime (which uses &lt;a href=&quot;core_time#TickDuration&quot;&gt;&lt;code&gt;core.time.TickDuration&lt;/code&gt;&lt;/a&gt;) has been deprecated. Use what's in std.datetime.stopwatch instead. It uses &lt;a href=&quot;core_time#MonoTime&quot;&gt;&lt;code&gt;core.time.MonoTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;. Note that comparingBenchmark has not been ported over, because it's a trivial wrapper around benchmark. See &lt;a href=&quot;std_datetime_stopwatch#benchmark&quot;&gt;&lt;code&gt;std.datetime.stopwatch.benchmark&lt;/code&gt;&lt;/a&gt;. This symbol will be removed from the documentation in October 2018 and fully removed from Phobos in October 2019.</source>
          <target state="translated">（使用していますstd.datetimeの古いベンチマーク機能&lt;a href=&quot;core_time#TickDuration&quot;&gt; &lt;code&gt;core.time.TickDuration&lt;/code&gt; は&lt;/a&gt;）廃止されました。代わりにstd.datetime.stopwatchにあるものを使用してください。&lt;a href=&quot;core_time#MonoTime&quot;&gt; &lt;code&gt;core.time.MonoTime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; を&lt;/a&gt;使用します。ベンチマークの簡単なラッパーであるため、compareingBenchmarkは移植されていません。&lt;a href=&quot;std_datetime_stopwatch#benchmark&quot;&gt; &lt;code&gt;std.datetime.stopwatch.benchmark&lt;/code&gt; を&lt;/a&gt;参照してください。このシンボルは、2018年10月にドキュメントから削除され、2019年10月にフォボスから完全に削除されます。</target>
        </trans-unit>
        <trans-unit id="efeb1eab4dde5b659a31f85b9f2c2ca05099ac2d" translate="yes" xml:space="preserve">
          <source>The old benchmarking functionality in std.datetime (which uses &lt;a href=&quot;core_time#TickDuration&quot;&gt;&lt;code&gt;core.time.TickDuration&lt;/code&gt;&lt;/a&gt;) has been deprecated. Use what's in std.datetime.stopwatch instead. It uses &lt;a href=&quot;core_time#MonoTime&quot;&gt;&lt;code&gt;core.time.MonoTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;. Note that measureTime has not been ported over, because it's a trivial wrapper around StopWatch. See &lt;a href=&quot;std_datetime_stopwatch#StopWatch&quot;&gt;&lt;code&gt;std.datetime.stopwatch.StopWatch&lt;/code&gt;&lt;/a&gt;. This symbol will be removed from the documentation in October 2018 and fully removed from Phobos in October 2019.</source>
          <target state="translated">（使用していますstd.datetimeの古いベンチマーク機能&lt;a href=&quot;core_time#TickDuration&quot;&gt; &lt;code&gt;core.time.TickDuration&lt;/code&gt; は&lt;/a&gt;）廃止されました。代わりにstd.datetime.stopwatchにあるものを使用してください。&lt;a href=&quot;core_time#MonoTime&quot;&gt; &lt;code&gt;core.time.MonoTime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; を&lt;/a&gt;使用します。これはStopWatchの簡単なラッパーであるため、measureTimeは移植されていません。&lt;a href=&quot;std_datetime_stopwatch#StopWatch&quot;&gt; &lt;code&gt;std.datetime.stopwatch.StopWatch&lt;/code&gt; を&lt;/a&gt;参照してください。このシンボルは、2018年10月にドキュメントから削除され、2019年10月にフォボスから完全に削除されます。</target>
        </trans-unit>
        <trans-unit id="8251e06b859fc1bf7834e47982a51786233d653a" translate="yes" xml:space="preserve">
          <source>The old benchmarking functionality in std.datetime (which uses &lt;a href=&quot;core_time#TickDuration&quot;&gt;&lt;code&gt;core.time.TickDuration&lt;/code&gt;&lt;/a&gt;) has been deprecated. Use what's in std.datetime.stopwatch instead. It uses &lt;a href=&quot;core_time#MonoTime&quot;&gt;&lt;code&gt;core.time.MonoTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;std_datetime_stopwatch#AutoStart&quot;&gt;&lt;code&gt;std.datetime.stopwatch.AutoStart&lt;/code&gt;&lt;/a&gt;. This symbol will be removed from the documentation in October 2018 and fully removed from Phobos in October 2019.</source>
          <target state="translated">（使用していますstd.datetimeの古いベンチマーク機能&lt;a href=&quot;core_time#TickDuration&quot;&gt; &lt;code&gt;core.time.TickDuration&lt;/code&gt; は&lt;/a&gt;）廃止されました。代わりにstd.datetime.stopwatchにあるものを使用してください。&lt;a href=&quot;core_time#MonoTime&quot;&gt; &lt;code&gt;core.time.MonoTime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; を&lt;/a&gt;使用します。&lt;a href=&quot;std_datetime_stopwatch#AutoStart&quot;&gt; &lt;code&gt;std.datetime.stopwatch.AutoStart&lt;/code&gt; を&lt;/a&gt;参照してください。このシンボルは、2018年10月にドキュメントから削除され、2019年10月にフォボスから完全に削除されます。</target>
        </trans-unit>
        <trans-unit id="3836851ebe09983822b4948475513fd0ffdb5b68" translate="yes" xml:space="preserve">
          <source>The old benchmarking functionality in std.datetime (which uses &lt;a href=&quot;core_time#TickDuration&quot;&gt;&lt;code&gt;core.time.TickDuration&lt;/code&gt;&lt;/a&gt;) has been deprecated. Use what's in std.datetime.stopwatch instead. It uses &lt;a href=&quot;core_time#MonoTime&quot;&gt;&lt;code&gt;core.time.MonoTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;std_datetime_stopwatch#StopWatch&quot;&gt;&lt;code&gt;std.datetime.stopwatch.StopWatch&lt;/code&gt;&lt;/a&gt;. This symbol will be removed from the documentation in October 2018 and fully removed from Phobos in October 2019.</source>
          <target state="translated">（使用していますstd.datetimeの古いベンチマーク機能&lt;a href=&quot;core_time#TickDuration&quot;&gt; &lt;code&gt;core.time.TickDuration&lt;/code&gt; は&lt;/a&gt;）廃止されました。代わりにstd.datetime.stopwatchにあるものを使用してください。&lt;a href=&quot;core_time#MonoTime&quot;&gt; &lt;code&gt;core.time.MonoTime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; を&lt;/a&gt;使用します。&lt;a href=&quot;std_datetime_stopwatch#StopWatch&quot;&gt; &lt;code&gt;std.datetime.stopwatch.StopWatch&lt;/code&gt; を&lt;/a&gt;参照してください。このシンボルは、2018年10月にドキュメントから削除され、2019年10月にフォボスから完全に削除されます。</target>
        </trans-unit>
        <trans-unit id="852cd69a4d8476a6740350b9e4fa04e022f147f2" translate="yes" xml:space="preserve">
          <source>The old benchmarking functionality in std.datetime (which uses &lt;a href=&quot;core_time#TickDuration&quot;&gt;&lt;code&gt;core.time.TickDuration&lt;/code&gt;&lt;/a&gt;) has been deprecated. Use what's in std.datetime.stopwatch instead. It uses &lt;a href=&quot;core_time#MonoTime&quot;&gt;&lt;code&gt;core.time.MonoTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;std_datetime_stopwatch#benchmark&quot;&gt;&lt;code&gt;std.datetime.stopwatch.benchmark&lt;/code&gt;&lt;/a&gt;. This symbol will be removed from the documentation in October 2018 and fully removed from Phobos in October 2019.</source>
          <target state="translated">（使用していますstd.datetimeの古いベンチマーク機能&lt;a href=&quot;core_time#TickDuration&quot;&gt; &lt;code&gt;core.time.TickDuration&lt;/code&gt; は&lt;/a&gt;）廃止されました。代わりにstd.datetime.stopwatchにあるものを使用してください。&lt;a href=&quot;core_time#MonoTime&quot;&gt; &lt;code&gt;core.time.MonoTime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; を&lt;/a&gt;使用します。&lt;a href=&quot;std_datetime_stopwatch#benchmark&quot;&gt; &lt;code&gt;std.datetime.stopwatch.benchmark&lt;/code&gt; を&lt;/a&gt;参照してください。このシンボルは、2018年10月にドキュメントから削除され、2019年10月にフォボスから完全に削除されます。</target>
        </trans-unit>
        <trans-unit id="e2b766119f4b2cc6bf40fa4a91668ec3bf749415" translate="yes" xml:space="preserve">
          <source>The one area in which this function violates RFC 5322 is that it accepts &lt;code&gt;&quot;\n&quot;&lt;/code&gt; in folding whitespace in the place of &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt;, because the HTTP spec requires it.</source>
          <target state="translated">この関数がRFC 5322に違反する1つの領域は、HTTP仕様で要求されているため、 &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; 代わりに空白を折りたたんで &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 受け入れることです。</target>
        </trans-unit>
        <trans-unit id="1e2e3dd788c39da352fad71950c0b91387508356" translate="yes" xml:space="preserve">
          <source>The one shared instance.</source>
          <target state="translated">1つの共有インスタンス。</target>
        </trans-unit>
        <trans-unit id="c72b10055e71a8b6b107b05c7231e9b97b023ff1" translate="yes" xml:space="preserve">
          <source>The only accepted units are &lt;code&gt;&quot;days&quot;&lt;/code&gt;.</source>
          <target state="translated">受け入れられる単位は &lt;code&gt;&quot;days&quot;&lt;/code&gt; のみです。</target>
        </trans-unit>
        <trans-unit id="c5649b3ae07a628e1e89097ca2f1b006efdc1767" translate="yes" xml:space="preserve">
          <source>The only operators that can accept operands of type bool are: &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;^=&lt;/code&gt;, !, &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;, and &lt;code&gt;?:&lt;/code&gt;.</source>
          <target state="translated">bool型のオペランドを受け入れることができる唯一の事業者は、次のとおりです。 &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; 、 &lt;code&gt;^&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;^=&lt;/code&gt; 、！ ＆ &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; 、および &lt;code&gt;?:&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8437a6599312b98a4f8ede285a1950b78c0b6f0d" translate="yes" xml:space="preserve">
          <source>The only operators that can accept operands of type bool are: &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;&lt;code&gt;^&lt;/code&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;&lt;code&gt;^=&lt;/code&gt; ! &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;&lt;code&gt;?:&lt;/code&gt;.</source>
          <target state="translated">bool型のオペランドを受け入れることができる唯一の事業者は、次のとおりです。 &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; &lt;code&gt;^=&lt;/code&gt; ！ &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;?:&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1537443715ac19491a620a6f1ab8a8c13f12a2ec" translate="yes" xml:space="preserve">
          <source>The only pointers that are tracked are those declared in the &lt;code&gt;@live&lt;/code&gt; function as &lt;code&gt;this&lt;/code&gt;, function parameters or local variables. Variables from other functions are not tracked, even &lt;code&gt;@live&lt;/code&gt; ones, as the analysis of interactions with other functions depends entirely on that function signature, not its internals. Parameters that are &lt;code&gt;const&lt;/code&gt; are not tracked.</source>
          <target state="translated">追跡されるポインターは、 &lt;code&gt;@live&lt;/code&gt; 関数で &lt;code&gt;this&lt;/code&gt; 、関数パラメーター、またはローカル変数として宣言されているものだけです。他の関数との相互作用の分析は、その内部ではなく、その関数のシグネチャに完全に依存するため、他の関数からの変数は、 &lt;code&gt;@live&lt;/code&gt; ものであっても、追跡されません。 &lt;code&gt;const&lt;/code&gt; であるパラメーターは追跡されません。</target>
        </trans-unit>
        <trans-unit id="984e1c71edfda04f82606405d232f57e26747587" translate="yes" xml:space="preserve">
          <source>The only reason to have a max limit for this is to avoid the risk of a bad server feeding libcurl with a never-ending header that will cause reallocs infinitely</source>
          <target state="translated">このために最大の制限を持つ唯一の理由は、悪いサーバが reallocs を無限に発生させる終わりのないヘッダで libcurl を供給するリスクを避けるためです。</target>
        </trans-unit>
        <trans-unit id="6b3469bf6885e1dc5e98c3245a18dbbf237d2baa" translate="yes" xml:space="preserve">
          <source>The opAssign function will be built for a struct &lt;code&gt;S&lt;/code&gt; if the following constraints are met:</source>
          <target state="translated">opAssign関数は、次の制約が満たされている場合、構造体 &lt;code&gt;S&lt;/code&gt; に対して構築されます。</target>
        </trans-unit>
        <trans-unit id="7e056906d7315529b66ec021904f0bc134465c13" translate="yes" xml:space="preserve">
          <source>The operand syntax more or less follows the Intel CPU documentation conventions. In particular, the convention is that for two operand instructions the source is the right operand and the destination is the left operand. The syntax differs from that of Intel's in order to be compatible with the D language tokenizer and to simplify parsing.</source>
          <target state="translated">オペランドの構文は、インテル CPU のドキュメントの規約にほぼ従っています。特に、2つのオペランド命令の場合、ソースは右オペランド、デスティネーションは左オペランドとなります。この構文は、D 言語のトークナイザーとの互換性と、解析を簡単にするために、インテルのそれとは異なります。</target>
        </trans-unit>
        <trans-unit id="73d4a21766587b932de571c9748f396e770947d7" translate="yes" xml:space="preserve">
          <source>The operands are AND'd together.</source>
          <target state="translated">オペランドは一緒にANDされます。</target>
        </trans-unit>
        <trans-unit id="8d68364ecd5a5efc98bbefe2167cf9e02f879955" translate="yes" xml:space="preserve">
          <source>The operands are OR'd together.</source>
          <target state="translated">オペランドは一緒にORされます。</target>
        </trans-unit>
        <trans-unit id="164b0a5deb7171b65940816115319c8c761747b7" translate="yes" xml:space="preserve">
          <source>The operands are XOR'd together.</source>
          <target state="translated">オペランドは一緒にXORされます。</target>
        </trans-unit>
        <trans-unit id="efb02cff4c27dc22b01308f5fbd88aaf28eb4b20" translate="yes" xml:space="preserve">
          <source>The operands must be arithmetic types. They undergo the &lt;a href=&quot;type#usual-arithmetic-conversions&quot;&gt;Usual Arithmetic Conversions&lt;/a&gt;.</source>
          <target state="translated">オペランドは算術型でなければなりません。彼らは&lt;a href=&quot;type#usual-arithmetic-conversions&quot;&gt;通常の算術変換&lt;/a&gt;を受けます。</target>
        </trans-unit>
        <trans-unit id="1d66ba90561dbdef784a715ae4ab9b7cee0e0776" translate="yes" xml:space="preserve">
          <source>The operands must be integral types, and undergo the &lt;a href=&quot;type#integer-promotions&quot;&gt;Integer Promotions&lt;/a&gt;. The result type is the type of the left operand after the promotions. The result value is the result of shifting the bits by the right operand's value.</source>
          <target state="translated">オペランドは整数型である必要があり、&lt;a href=&quot;type#integer-promotions&quot;&gt;整数プロモーション&lt;/a&gt;を受けます。結果の型は、昇格後の左のオペランドの型です。結果値は、ビットを右のオペランドの値だけシフトした結果です。</target>
        </trans-unit>
        <trans-unit id="194f20d5a432fe368709d99fb1ac7743c7e38bcc" translate="yes" xml:space="preserve">
          <source>The operation takes time proportional to the number of adjacent free blocks at the front of the free list. These blocks get coalesced, whether &lt;code&gt;allocateAll&lt;/code&gt; succeeds or fails due to fragmentation.</source>
          <target state="translated">操作には、フリーリストの先頭にある隣接するフリーブロックの数に比例して時間がかかります。これらのブロックは、 &lt;code&gt;allocateAll&lt;/code&gt; が成功したか、断片化が原因で失敗したかにかかわらず、合体します。</target>
        </trans-unit>
        <trans-unit id="f1c4e404ec78b75726373485d13f7546b584f7c2" translate="yes" xml:space="preserve">
          <source>The operator involved</source>
          <target state="translated">関係するオペレーター</target>
        </trans-unit>
        <trans-unit id="56d4f8f0aeb6a713fa59381e88345eb1ab065529" translate="yes" xml:space="preserve">
          <source>The operator involved (without the &lt;code&gt;&quot;=&quot;&lt;/code&gt;, e.g. &lt;code&gt;&quot;+&quot;&lt;/code&gt; for &lt;code&gt;&quot;+=&quot;&lt;/code&gt; etc)</source>
          <target state="translated">（なしの関係演算子 &lt;code&gt;&quot;=&quot;&lt;/code&gt; 、例えば &lt;code&gt;&quot;+&quot;&lt;/code&gt; のための &lt;code&gt;&quot;+=&quot;&lt;/code&gt; など）</target>
        </trans-unit>
        <trans-unit id="141e2b7ce22914ac93e27f77aab194720297a6c0" translate="yes" xml:space="preserve">
          <source>The operator involved in the &lt;code&gt;opAssign&lt;/code&gt; operation</source>
          <target state="translated">&lt;code&gt;opAssign&lt;/code&gt; 操作に関与するオペレーター</target>
        </trans-unit>
        <trans-unit id="c70edf6dccf2f2bcea3add3cefb68aaf253c7966" translate="yes" xml:space="preserve">
          <source>The operator symbol</source>
          <target state="translated">演算子記号</target>
        </trans-unit>
        <trans-unit id="a647036ebf74c7864e90900632a3906ffefe590e" translate="yes" xml:space="preserve">
          <source>The operator symbol (without the &lt;code&gt;=&lt;/code&gt;)</source>
          <target state="translated">演算子記号（ &lt;code&gt;=&lt;/code&gt; なし）</target>
        </trans-unit>
        <trans-unit id="e53e52b5f08d1bbd687148f6992aae7c464c1b9d" translate="yes" xml:space="preserve">
          <source>The operator, e.g. &lt;code&gt;-&lt;/code&gt;</source>
          <target state="translated">オペレーター、例えば &lt;code&gt;-&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="638907907a566c0abcca8d70105d1f419f1a935d" translate="yes" xml:space="preserve">
          <source>The option &quot;--Foo&quot; is rejected due to &lt;code&gt;std.getopt.config.caseSensitive&lt;/code&gt;, but not &quot;--Bar&quot;, &quot;--bAr&quot; etc. because the directive &lt;code&gt;std.getopt.config.caseInsensitive&lt;/code&gt; turned sensitivity off before option &quot;bar&quot; was parsed.</source>
          <target state="translated">オプション「--fooは、」原因に拒否され &lt;code&gt;std.getopt.config.caseSensitive&lt;/code&gt; はなく、「--Bar」、「--bAr」などディレクティブので &lt;code&gt;std.getopt.config.caseInsensitive&lt;/code&gt; は、オプションの前にオフ感度を回しました」バー」が解析されました。</target>
        </trans-unit>
        <trans-unit id="ca52d0f89f2c76dbc26910f2e62e7d1ae6cb85b2" translate="yes" xml:space="preserve">
          <source>The option character (default '-').</source>
          <target state="translated">オプション文字(デフォルトは '-')。</target>
        </trans-unit>
        <trans-unit id="18b9f1ce4c729b2ded7edcf5db48cd7ab36a842d" translate="yes" xml:space="preserve">
          <source>The optional</source>
          <target state="translated">オプションの</target>
        </trans-unit>
        <trans-unit id="2c9d42a79cf23316432c06818064db7b0873ce86" translate="yes" xml:space="preserve">
          <source>The optional arguments &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; may be used to assign arbitrary &lt;a href=&quot;std_stdio#File&quot;&gt;&lt;code&gt;std.stdio.File&lt;/code&gt;&lt;/a&gt; objects as the standard input, output and error streams, respectively, of the child process. The former must be opened for reading, while the latter two must be opened for writing. The default is for the child process to inherit the standard streams of its parent.</source>
          <target state="translated">オプションの引数 &lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、および &lt;code&gt;stderr&lt;/code&gt; を使用して、任意の&lt;a href=&quot;std_stdio#File&quot;&gt; &lt;code&gt;std.stdio.File&lt;/code&gt; &lt;/a&gt;オブジェクトを、それぞれ子プロセスの標準入力、出力、およびエラーストリームとして割り当てることができます。前者は読み取り用に開き、後者2つは書き込み用に開く必要があります。デフォルトでは、子プロセスはその親の標準ストリームを継承します。</target>
        </trans-unit>
        <trans-unit id="fa35856038ac4a3b33d6b7f25cf0f4d58ca154fb" translate="yes" xml:space="preserve">
          <source>The optional identifier in either type of &lt;code&gt;out&lt;/code&gt; contract is set to the return value of the function.</source>
          <target state="translated">いずれかのタイプの &lt;code&gt;out&lt;/code&gt; コントラクトのオプションの識別子は、関数の戻り値に設定されます。</target>
        </trans-unit>
        <trans-unit id="2a198d0d9bb81399553ce901d094fc3b34485c1e" translate="yes" xml:space="preserve">
          <source>The optional parameters &lt;code&gt;sSelfSim&lt;/code&gt; and &lt;code&gt;tSelfSim&lt;/code&gt; are meant for avoiding duplicate computation. Many applications may have already computed &lt;code&gt;gapWeightedSimilarity(s, s, lambda)&lt;/code&gt; and/or &lt;code&gt;gapWeightedSimilarity(t, t, lambda)&lt;/code&gt;. In that case, they can be passed as &lt;code&gt;sSelfSim&lt;/code&gt; and &lt;code&gt;tSelfSim&lt;/code&gt;, respectively.</source>
          <target state="translated">オプションのパラメーター &lt;code&gt;sSelfSim&lt;/code&gt; および &lt;code&gt;tSelfSim&lt;/code&gt; は、重複した計算を回避するためのものです。多くのアプリケーションでは、すでに &lt;code&gt;gapWeightedSimilarity(s, s, lambda)&lt;/code&gt; および/または &lt;code&gt;gapWeightedSimilarity(t, t, lambda)&lt;/code&gt; 計算されている場合があります。その場合、それらはそれぞれ &lt;code&gt;sSelfSim&lt;/code&gt; および &lt;code&gt;tSelfSim&lt;/code&gt; として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="5c87a0f28ba13b43a3c29d6c4b297e44986adfc3" translate="yes" xml:space="preserve">
          <source>The optional second &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; can be used to supply additional information, such as a text string, that will be printed out along with the error diagnostic.</source>
          <target state="translated">オプションの2 &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;番目のAssignExpression&lt;/i&gt;&lt;/a&gt;を使用して、テキスト文字列など、エラー診断とともに出力される追加情報を提供できます。</target>
        </trans-unit>
        <trans-unit id="c53af2790b7d2658a475ec200743c6decbbbabb1" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;minSize == unbounded&lt;/code&gt; and &lt;code&gt;maxSize == unbounded&lt;/code&gt; are not available for &lt;code&gt;ContiguousFreeList&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;minSize == unbounded&lt;/code&gt; および &lt;code&gt;maxSize == unbounded&lt;/code&gt; は、 &lt;code&gt;ContiguousFreeList&lt;/code&gt; では使用できません。</target>
        </trans-unit>
        <trans-unit id="908f73a8a6b26eae214ea14d01c95ac8e585a696" translate="yes" xml:space="preserve">
          <source>The options corresponding to the statistics collected.</source>
          <target state="translated">収集した統計情報に対応するオプションです。</target>
        </trans-unit>
        <trans-unit id="9f44bfb42bea099b410e3ae043b64bf941a3d3a9" translate="yes" xml:space="preserve">
          <source>The order in which</source>
          <target state="translated">順番は</target>
        </trans-unit>
        <trans-unit id="b05eb5dee9e8e5735c1321572abe7fba26d328c8" translate="yes" xml:space="preserve">
          <source>The order in which modules are called to run their unit tests.</source>
          <target state="translated">モジュールがユニットテストを実行するために呼び出される順序。</target>
        </trans-unit>
        <trans-unit id="ded62be1138c956a50d03fffedad7ec44e6f9533" translate="yes" xml:space="preserve">
          <source>The order in which modules are imported does not affect the semantics.</source>
          <target state="translated">モジュールをインポートする順番はセマンティクスに影響しません。</target>
        </trans-unit>
        <trans-unit id="506073a2cdf721a37f43310020509dea0ea03bee" translate="yes" xml:space="preserve">
          <source>The order in which the array elements are computed is implementation defined, and may even occur in parallel. An application must not depend on this order.</source>
          <target state="translated">配列の要素が計算される順序は実装で定義されており,並列に行われることもあります.アプリケーションはこの順序に依存してはいけません.</target>
        </trans-unit>
        <trans-unit id="fae272dd73f8d57ce9c199e28861d6ffb1d9af6c" translate="yes" xml:space="preserve">
          <source>The order in which the strings appear in the result is not defined.</source>
          <target state="translated">結果に表示される文字列の順序は定義されていません。</target>
        </trans-unit>
        <trans-unit id="ce7e17de4cb24469d3444a40e36096efcb9cbfd4" translate="yes" xml:space="preserve">
          <source>The order is defined as follows:</source>
          <target state="translated">順番は以下のように定義されています。</target>
        </trans-unit>
        <trans-unit id="29a373653e2bfc1cca0d961f259da0c1298ecbea" translate="yes" xml:space="preserve">
          <source>The order of evaluation of function arguments for functions with linkage other than &lt;code&gt;extern (D)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extern (D)&lt;/code&gt; 以外のリンケージがある関数の関数引数の評価順序。</target>
        </trans-unit>
        <trans-unit id="a021fc1e222d6a27aea27e4b5f97128841b9a128" translate="yes" xml:space="preserve">
          <source>The order of evaluation of the operands of &lt;a href=&quot;#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;のオペランドの評価順序。</target>
        </trans-unit>
        <trans-unit id="2d093662468f96c13ae9c5b9d6116c7cabff1635" translate="yes" xml:space="preserve">
          <source>The order of execution within a function is controlled by &lt;a href=&quot;#Statement&quot;&gt;&lt;i&gt;Statement&lt;/i&gt;&lt;/a&gt;s. A function's body consists of a sequence of zero or more</source>
          <target state="translated">関数内での実行の順序は、&lt;a href=&quot;#Statement&quot;&gt;&lt;i&gt;Statement&lt;/i&gt;&lt;/a&gt;によって制御されます。関数の本体は0個以上のシーケンスで構成されています</target>
        </trans-unit>
        <trans-unit id="86b67a2b0c6a048e601645470c096d4bbf2604b6" translate="yes" xml:space="preserve">
          <source>The order of static initialization is implicitly determined by the</source>
          <target state="translated">静的な初期化の順序は、暗黙のうちに</target>
        </trans-unit>
        <trans-unit id="24e23dd7191b5b1c5bce0de2b67d0f3911ebed53" translate="yes" xml:space="preserve">
          <source>The ordering predicate to use to determine the extremum (minimum or maximum) element.</source>
          <target state="translated">極端(最小または最大)要素を決定するために使用する順序述語。</target>
        </trans-unit>
        <trans-unit id="15fe5b10e5755a86213c0dc1ab135ad913a77ba2" translate="yes" xml:space="preserve">
          <source>The ordering predicate to use to determine the extremum (minimum or maximum).</source>
          <target state="translated">極値(最小値または最大値)を決定するために使用する順序述語。</target>
        </trans-unit>
        <trans-unit id="15cad23161bf9aec9c429568dd291ae988b53252" translate="yes" xml:space="preserve">
          <source>The ordering predicate to use to determine the maximum element.</source>
          <target state="translated">最大要素を決定するために使用する順序述語。</target>
        </trans-unit>
        <trans-unit id="c31f591c19316494ae227e4269b1bc55d8071c12" translate="yes" xml:space="preserve">
          <source>The ordering predicate to use to determine the minimum element.</source>
          <target state="translated">最小要素を決定するために使用する順序述語。</target>
        </trans-unit>
        <trans-unit id="c29760283ce7793aa4d7bc71616456fe1b03fbb5" translate="yes" xml:space="preserve">
          <source>The ordering to be used to determine lexicographical ordering of the permutations.</source>
          <target state="translated">順列の辞書的順序を決定するために使用される順序。</target>
        </trans-unit>
        <trans-unit id="e1d7ba6a0bf70661c8825f1616095c8946712ba1" translate="yes" xml:space="preserve">
          <source>The original input string which should have been parsed.</source>
          <target state="translated">解析されるべき元の入力文字列。</target>
        </trans-unit>
        <trans-unit id="d69e475dd9b96313d02abbca4307d1659af41d28" translate="yes" xml:space="preserve">
          <source>The original range.</source>
          <target state="translated">オリジナルの範囲です。</target>
        </trans-unit>
        <trans-unit id="8724db772d60fec4013f34182f1e847ecec76068" translate="yes" xml:space="preserve">
          <source>The original string.</source>
          <target state="translated">元の文字列。</target>
        </trans-unit>
        <trans-unit id="59de85bb0dd2a62ce448e919359e8b24cc7a90ea" translate="yes" xml:space="preserve">
          <source>The osthread module provides low-level, OS-dependent code for thread creation and management.</source>
          <target state="translated">osthreadモジュールは、スレッドの作成と管理のための低レベルのOS依存のコードを提供します。</target>
        </trans-unit>
        <trans-unit id="2c0e83de5dd344b677213345fa51e9db2eed3ab8" translate="yes" xml:space="preserve">
          <source>The other &lt;code&gt;ClockType&lt;/code&gt;s are provided so that other clocks provided by the underlying C, system calls can be used with &lt;a href=&quot;#MonoTimeImpl&quot;&gt;&lt;code&gt;MonoTimeImpl&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;std.datetime.Clock.currTime&lt;/code&gt; without having to use the C API directly.</source>
          <target state="translated">他の &lt;code&gt;ClockType&lt;/code&gt; は、基になるCシステムコールによって提供される他のクロックが&lt;a href=&quot;#MonoTimeImpl&quot;&gt; &lt;code&gt;MonoTimeImpl&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;std.datetime.Clock.currTime&lt;/code&gt; で使用できるように提供されています。CAPIを直接使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="c97e71bfcc50324ba20390fc9837bc308a37f3b9" translate="yes" xml:space="preserve">
          <source>The other piece of data used is the DWARF &lt;code&gt;.debug_line&lt;/code&gt; section, which contains the line informations of a program, necessary to associate the instruction address with its (file, line) information.  Since debug lines informations are quite large, they are encoded using a program that is to be fed to a finite state machine. See &lt;code&gt;runStateMachine&lt;/code&gt; and &lt;code&gt;readLineNumberProgram&lt;/code&gt; for more details.</source>
          <target state="translated">使用されるもう1つのデータは、DWARF &lt;code&gt;.debug_line&lt;/code&gt; セクションです。このセクションには、プログラムの行情報が含まれており、命令アドレスをその（ファイル、行）情報に関連付けるために必要です。デバッグラインの情報は非常に大きいため、有限状態マシンに供給されるプログラムを使用してエンコードされます。詳細については、 &lt;code&gt;runStateMachine&lt;/code&gt; および &lt;code&gt;readLineNumberProgram&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b74ff8ee45b0b8f3cea227a5cb8b0ca2512e0fa1" translate="yes" xml:space="preserve">
          <source>The output is:</source>
          <target state="translated">出力されます。</target>
        </trans-unit>
        <trans-unit id="a69373623c7518d00fa36ea24366f398f8ce8bad" translate="yes" xml:space="preserve">
          <source>The output of the code above is:</source>
          <target state="translated">上のコードの出力は</target>
        </trans-unit>
        <trans-unit id="515b77d0f9f95e74d1d9b053ac5339be1c82aca5" translate="yes" xml:space="preserve">
          <source>The output range used to write the help information.</source>
          <target state="translated">ヘルプ情報の書き込みに使用する出力範囲です。</target>
        </trans-unit>
        <trans-unit id="708e6e32f4bb4d910b35568c24af1ecbdd8ae5b7" translate="yes" xml:space="preserve">
          <source>The overflow indicator (assigned &lt;code&gt;true&lt;/code&gt; in case there's an error)</source>
          <target state="translated">オーバーフローインジケーター（エラーが発生した場合に &lt;code&gt;true&lt;/code&gt; が割り当てられます）</target>
        </trans-unit>
        <trans-unit id="49d360d20fd79e75a1f6f41c1f5efdbc589a5b18" translate="yes" xml:space="preserve">
          <source>The overflow is sticky, meaning a sequence of operations can be done and overflow need only be checked at the end.</source>
          <target state="translated">オーバーフローは粘着性があり、一連の操作を行うことができ、オーバーフローは最後にチェックする必要があるだけであることを意味します。</target>
        </trans-unit>
        <trans-unit id="ef93ac8e948c5ada2f00084b4ec036473c66f367" translate="yes" xml:space="preserve">
          <source>The overlapping portion of the two arrays.</source>
          <target state="translated">2つの配列の重なり部分。</target>
        </trans-unit>
        <trans-unit id="fae150090ecb0366b43d58bfc4a6f3010da8d11c" translate="yes" xml:space="preserve">
          <source>The overload which accepts function arguments takes integral types in the order that the time unit strings were given, and those integers are passed by &lt;code&gt;ref&lt;/code&gt;. split assigns the values for the units to each corresponding integer. Any integral type may be used, but no attempt is made to prevent integer overflow, so don't use small integral types in circumstances where the values for those units aren't likely to fit in an integral type that small.</source>
          <target state="translated">関数の引数を受け入れるオーバーロードは、時間単位の文字列が指定された順序で整数型を取り、それらの整数は &lt;code&gt;ref&lt;/code&gt; によって渡されます。splitは、対応する各整数に単位の値を割り当てます。任意の整数型を使用できますが、整数オーバーフローを防止する試みは行われないため、これらの単位の値がそれほど小さい整数型に適合しない可能性がある状況では、小さい整数型を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="8a27d36415963d11bb0a2a74d725380e58b5b81a" translate="yes" xml:space="preserve">
          <source>The overload with no arguments returns the values for the units in a struct with members whose names are the same as the given time unit strings. The members are all &lt;code&gt;long&lt;/code&gt;s. This overload will also work with no time strings being given, in which case</source>
          <target state="translated">引数なしのオーバーロードは、指定された時間単位文字列と同じ名前のメンバーを持つ構造体の単位の値を返します。メンバーはみな &lt;code&gt;long&lt;/code&gt; です。このオーバーロードは、タイムストリングが指定されていなくても機能します。その場合、</target>
        </trans-unit>
        <trans-unit id="36651e7ea0b89af408ad5149a0f7f1de2f23e2a1" translate="yes" xml:space="preserve">
          <source>The owner is the sole pointer to a memory object graph. An Owner pointer normally does not have a &lt;code&gt;scope&lt;/code&gt; attribute. If a pointer with the &lt;code&gt;scope&lt;/code&gt; attribute is initialized with an expression not derived from a tracked pointer, it is an Owner.  If an Owner pointer is assigned to another Owner pointer, the former enters the Undefined state.</source>
          <target state="translated">所有者は、メモリオブジェクトグラフへの唯一のポインタです。通常、所有者ポインタには &lt;code&gt;scope&lt;/code&gt; 属性がありません。ポインタならば &lt;code&gt;scope&lt;/code&gt; 属性を追跡ポインタから派生したものではない表現で初期化され、それが所有者です。所有者ポインターが別の所有者ポインターに割り当てられている場合、前者は未定義状態になります。</target>
        </trans-unit>
        <trans-unit id="260af145e3cbda28a26f16fe1989f4e1c8d1a0d0" translate="yes" xml:space="preserve">
          <source>The package module can then be imported with the standard module import declaration:</source>
          <target state="translated">パッケージモジュールは、標準のモジュールインポート宣言でインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="5512330e5fcd74efc6dbc5aca616099f51685035" translate="yes" xml:space="preserve">
          <source>The package module must have the file name &lt;code&gt;package.d&lt;/code&gt;. The module name is declared to be the fully qualified name of the package. Package modules can be imported just like any other modules:</source>
          <target state="translated">パッケージモジュールのファイル名は &lt;code&gt;package.d&lt;/code&gt; にする必要があります。モジュール名は、パッケージの完全修飾名として宣言されています。パッケージモジュールは、他のモジュールと同じようにインポートできます。</target>
        </trans-unit>
        <trans-unit id="e03b2152cc1b6a58ba8032733b5d2def3eb73480" translate="yes" xml:space="preserve">
          <source>The package module's file name must be &lt;code&gt;package.d&lt;/code&gt;. The module name is declared to be the fully qualified name of the package. Package modules can be imported just like any other modules:</source>
          <target state="translated">パッケージモジュールのファイル名は &lt;code&gt;package.d&lt;/code&gt; である必要があります。モジュール名は、パッケージの完全修飾名であると宣言されています。パッケージモジュールは、他のモジュールと同じようにインポートできます。</target>
        </trans-unit>
        <trans-unit id="136770d3c4f96881a7cd83ac52b3b200de071989" translate="yes" xml:space="preserve">
          <source>The padding data can be accessed, but its contents are undefined.</source>
          <target state="translated">パディングデータにはアクセスできますが、その内容は未定義です。</target>
        </trans-unit>
        <trans-unit id="c23637ad29e92d690ee7e91ffa4bbac52dae1105" translate="yes" xml:space="preserve">
          <source>The parameter &lt;code&gt;level&lt;/code&gt; indicates the number of trie levels to use, allowed values are: 1, 2, 3 or 4. Levels represent different trade-offs speed-size wise.</source>
          <target state="translated">パラメータ &lt;code&gt;level&lt;/code&gt; は、使用するトライレベルの数を示します。使用できる値は、1、2、3、または4です。レベルは、速度とサイズの異なるトレードオフを表します。</target>
        </trans-unit>
        <trans-unit id="0ee7ae2b2ebe38b1747e38029361876a0bcd2e42" translate="yes" xml:space="preserve">
          <source>The parameter is an</source>
          <target state="translated">パラメータは</target>
        </trans-unit>
        <trans-unit id="14dbb4daa817a9a1b69f1e2b66e17c6c825d9628" translate="yes" xml:space="preserve">
          <source>The parameter is an input to the function. Input parameters behaves as if they have the &lt;code&gt;const scope&lt;/code&gt; storage classes. Input parameters may be passed by reference by the compiler. Unlike &lt;code&gt;ref&lt;/code&gt; parameters, &lt;code&gt;in&lt;/code&gt; parameters can bind to both lvalues and rvalues (such as literals). Types that would trigger a side effect if passed by value (such as types with postblit, copy constructor, or destructor), and types which cannot be copied, e.g. if their copy constructor is marked as &lt;code&gt;@disable&lt;/code&gt;, will always be passed by reference. Dynamic arrays, classes, associative arrays, function pointers, and delegates will always be passed by value, to allow for covariance. If the type of the parameter does not fall in one of those categories, whether or not it is passed by reference is implementation defined, and the backend is free to choose the method that will best fit the ABI of the platform. Note: This requires the &lt;code&gt;-preview=in&lt;/code&gt; switch, available in v2.094.0 or higher.</source>
          <target state="translated">パラメータは関数への入力です。入力パラメーターは、 &lt;code&gt;const scope&lt;/code&gt; ストレージクラスがあるかのように動作します。入力パラメーターは、コンパイラーによる参照によって渡される場合があります。 &lt;code&gt;ref&lt;/code&gt; パラメーターとは異なり、 &lt;code&gt;in&lt;/code&gt; パラメーターは左辺値と右辺値（リテラルなど）の両方にバインドできます。値で渡された場合に副作用を引き起こすタイプ（postblit、コピーコンストラクタ、またはデストラクタを含むタイプなど）、およびコピーできないタイプ（コピーコンストラクタが &lt;code&gt;@disable&lt;/code&gt; としてマークされている場合など）、は常に参照によって渡されます。動的配列、クラス、連想配列、関数ポインター、およびデリゲートは、共分散を可能にするために、常に値によって渡されます。パラメータのタイプがこれらのカテゴリのいずれにも該当しない場合、参照によって渡されるかどうかは実装で定義され、バックエンドはプラットフォームのABIに最適な方法を自由に選択できます。注：これには、v2.094.0以降で使用可能な &lt;code&gt;-preview=in&lt;/code&gt; スイッチが必要です。</target>
        </trans-unit>
        <trans-unit id="0758911fe007939762ea0a98ab73ee500552cb01" translate="yes" xml:space="preserve">
          <source>The parameter may be a number (as shown in the example above) dictating the size of each chunk. Alternatively, &lt;code&gt;byChunk&lt;/code&gt; accepts a user-provided buffer that it uses directly.</source>
          <target state="translated">パラメータは、各チャンクのサイズを示す数値（上記の例に示されている）にすることができます。または、 &lt;code&gt;byChunk&lt;/code&gt; は、直接使用するユーザー指定のバッファーを受け入れます。</target>
        </trans-unit>
        <trans-unit id="3a7b9fcbdd08c7e12be96a35248bec20128f934f" translate="yes" xml:space="preserve">
          <source>The parameter must not escape the function call (e.g. by being assigned to a global variable). Ignored for any parameter that is not a reference type.</source>
          <target state="translated">パラメータは、関数呼び出しをエスケープしてはいけません(グローバル変数に代入されるなど)。参照型でないパラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="da7a5827114de776669ef80597ccf4da04a43fa6" translate="yes" xml:space="preserve">
          <source>The parameter will be a mutable copy of its argument</source>
          <target state="translated">パラメータは、その引数の変更可能なコピーになります。</target>
        </trans-unit>
        <trans-unit id="c903948dffd2abfd68770b5195aac5d542b83003" translate="yes" xml:space="preserve">
          <source>The parameters of this distribution. The random number is x = (x * multipler + increment) % modulus.</source>
          <target state="translated">この分布のパラメータです。乱数は x=(x*multipler+increment)%モジュラスです。</target>
        </trans-unit>
        <trans-unit id="2c7bb35e4246e498ccd1516d5c0a045c041414c6" translate="yes" xml:space="preserve">
          <source>The parameters to the non-variadic function:</source>
          <target state="translated">非可変関数へのパラメータです。</target>
        </trans-unit>
        <trans-unit id="8c00f330278c8a3688d755f58c6ef387d6c281e7" translate="yes" xml:space="preserve">
          <source>The parameters to the variadic function:</source>
          <target state="translated">可変関数のパラメータです。</target>
        </trans-unit>
        <trans-unit id="5ebad486f6049114c19bd433cacf524aaf10fabc" translate="yes" xml:space="preserve">
          <source>The parameters with which to instantiate the template.</source>
          <target state="translated">テンプレートのインスタンスを作成するためのパラメータ。</target>
        </trans-unit>
        <trans-unit id="4fbe12ec5cf422714865a37fd1864dec27719969" translate="yes" xml:space="preserve">
          <source>The parent allocator is publicly accessible either as a direct member if it holds state, or as an alias to &lt;code&gt;Allocator.instance&lt;/code&gt; otherwise. One may use it for making calls that won't count toward statistics collection.</source>
          <target state="translated">親アロケーターは、状態を保持している場合は直接メンバーとして、そうでない場合は &lt;code&gt;Allocator.instance&lt;/code&gt; のエイリアスとして、パブリックにアクセスできます。統計収集にカウントされない呼び出しを行うためにそれを使用できます。</target>
        </trans-unit>
        <trans-unit id="a7916e9fe1cbcecc9e5b2265b50cee59f409bc09" translate="yes" xml:space="preserve">
          <source>The parent allocator. Depending on whether &lt;code&gt;ParentAllocator&lt;/code&gt; holds state or not, this is a member variable or an alias for &lt;code&gt;ParentAllocator.instance&lt;/code&gt;.</source>
          <target state="translated">親アロケーター。 &lt;code&gt;ParentAllocator&lt;/code&gt; が状態を保持しているかどうかに応じて、これは &lt;code&gt;ParentAllocator.instance&lt;/code&gt; のメンバー変数またはエイリアスです。</target>
        </trans-unit>
        <trans-unit id="6a766f10bdfc11306f72dafd5b728bd7317c675f" translate="yes" xml:space="preserve">
          <source>The parser initially sets it to TOK.concatenateAssign, and semantic() later decides which of the three it will be set to.</source>
          <target state="translated">パーサーは最初に TOK.concatenateAssign に設定し、後に semantic()はこの 3 つのうちのどれに設定するかを決定します。</target>
        </trans-unit>
        <trans-unit id="8ca59cb5bd26311e5307aeb5f44c313335ea3580" translate="yes" xml:space="preserve">
          <source>The passed in input was correct, but more input was expected.</source>
          <target state="translated">パスされた入力は正しかったが、より多くの入力が期待されていた。</target>
        </trans-unit>
        <trans-unit id="04a94fe6ab7793bd68edc946edd3c4d4f906c623" translate="yes" xml:space="preserve">
          <source>The passed text will be printed first, followed by a newline, then the short and long version of every option will be printed. The short and long version will be aligned to the longest option of every &lt;code&gt;Option&lt;/code&gt; passed. If the option is required, then &quot;Required:&quot; will be printed after the long version of the &lt;code&gt;Option&lt;/code&gt;. If a help message is present it will be printed next. The format is illustrated by this code:</source>
          <target state="translated">渡されたテキストが最初に印刷され、その後に改行が続き、次にすべてのオプションの短いバージョンと長いバージョンが印刷されます。短いバージョンと長いバージョンは、渡されたすべての &lt;code&gt;Option&lt;/code&gt; 最も長いオプションに揃えられます。オプションが必要な場合、長いバージョンの &lt;code&gt;Option&lt;/code&gt; 後に「必須：」が印刷されます。ヘルプメッセージが存在する場合は、次に表示されます。形式は次のコードで示されています。</target>
        </trans-unit>
        <trans-unit id="ae0176808c4338a2b32bdc055054955a47109b3c" translate="yes" xml:space="preserve">
          <source>The path given by &lt;code&gt;path&lt;/code&gt;, with the extension given by &lt;code&gt;ext&lt;/code&gt; appended if the path doesn't already have one.  Including the dot in the extension is optional.  This function always allocates a new string, except in the case when path is immutable and already has an extension.</source>
          <target state="translated">pathで指定された &lt;code&gt;path&lt;/code&gt; 。パスにパスがない場合は、 &lt;code&gt;ext&lt;/code&gt; で指定された拡張子が追加されます。拡張子にドットを含めることはオプションです。この関数は、パスが不変であり、すでに拡張子がある場合を除いて、常に新しい文字列を割り当てます。</target>
        </trans-unit>
        <trans-unit id="9978fd2b7b1c58a32b59d2d933a84ff2eeb9cad1" translate="yes" xml:space="preserve">
          <source>The path name to expand.</source>
          <target state="translated">展開するパス名。</target>
        </trans-unit>
        <trans-unit id="dba74006c9911dd825361c79175c3816c02f4fd6" translate="yes" xml:space="preserve">
          <source>The path of the executable as a &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; としての実行可能ファイルのパス。</target>
        </trans-unit>
        <trans-unit id="8c35dcd32a0cd2b956596caddc202c46a4ae3354" translate="yes" xml:space="preserve">
          <source>The path to be matched against</source>
          <target state="translated">対してマッチングされるパス</target>
        </trans-unit>
        <trans-unit id="a5d7f6c37fe93af27b88af304f713208b3e7e43a" translate="yes" xml:space="preserve">
          <source>The path to the file.</source>
          <target state="translated">ファイルのパスです。</target>
        </trans-unit>
        <trans-unit id="b9caa4476a8447e566c7b52e6155891828512bf8" translate="yes" xml:space="preserve">
          <source>The path to the shell to use to run the specified program. By default this is &lt;a href=&quot;#nativeShell&quot;&gt;&lt;code&gt;nativeShell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定したプログラムの実行に使用するシェルへのパス。デフォルトでは、これは&lt;a href=&quot;#nativeShell&quot;&gt; &lt;code&gt;nativeShell&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="a791a6dee2401c3ac563dc595efe14cc5ee858e9" translate="yes" xml:space="preserve">
          <source>The permutation to permutate &lt;code&gt;range&lt;/code&gt; to.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; を置換する置換。</target>
        </trans-unit>
        <trans-unit id="3bf6df59e4efc6178ad86ce4d172dd74e35f57bc" translate="yes" xml:space="preserve">
          <source>The permuted range.</source>
          <target state="translated">パームされた範囲。</target>
        </trans-unit>
        <trans-unit id="b51b8abc388ed1faa0574f36244673bca9d03127" translate="yes" xml:space="preserve">
          <source>The pivot element.</source>
          <target state="translated">ピボットエレメント。</target>
        </trans-unit>
        <trans-unit id="2141dbd9249b3127ee2311abb3285ea6f62646d8" translate="yes" xml:space="preserve">
          <source>The plan is to support all of the above except throwing D exceptions directly in C++ code (but they will be throwable indirectly by calling into a D function with C++ linkage).</source>
          <target state="translated">C++のコードで直接Dの例外を投げる以外はすべてサポートする予定です(ただし、C++連携でD関数に呼び出すことで間接的に投げられるようになります)。</target>
        </trans-unit>
        <trans-unit id="5e9fcc91fd47a551fe2c3ec3018788e0626a6afc" translate="yes" xml:space="preserve">
          <source>The platform-specific native shell path.</source>
          <target state="translated">プラットフォーム固有のネイティブシェルパス。</target>
        </trans-unit>
        <trans-unit id="c744ae6de5a0c2342c1ec26c71bf9d84af5482c5" translate="yes" xml:space="preserve">
          <source>The point is to allow AliasDeclarationY to use &lt;code&gt;__traits()&lt;/code&gt;, see issue 7804.</source>
          <target state="translated">重要なのは、AliasDeclarationYが &lt;code&gt;__traits()&lt;/code&gt; を使用できるようにすることです。問題7804を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b4bb95d6a8d2b3e99a53954eaab5d58c7eb10b4" translate="yes" xml:space="preserve">
          <source>The pointer</source>
          <target state="translated">ポインタ</target>
        </trans-unit>
        <trans-unit id="cf7acba2bb0e0c6f04c4c0cb72022cca37ae2438" translate="yes" xml:space="preserve">
          <source>The pointer is in an invalid state. Dereferencing such a pointer is an error.</source>
          <target state="translated">そのポインタは無効な状態にあります。このようなポインタの参照を解除するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="fd5b5206507758892b71f3f58e5e23e1c1f7f65c" translate="yes" xml:space="preserve">
          <source>The pointer, dynamic array, or reference is set to &lt;code&gt;null&lt;/code&gt; after the delete is performed. Any attempt to reference the data after the deletion via another reference to it will result in undefined behavior.</source>
          <target state="translated">削除が実行された後、ポインター、動的配列、または参照が &lt;code&gt;null&lt;/code&gt; に設定されます。削除後に別の参照を介してデータを参照しようとすると、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="594f71d424c88492080e5062a3ecf8853308a43e" translate="yes" xml:space="preserve">
          <source>The pointer-based version returns a &lt;code&gt;SortedRange&lt;/code&gt; wrapper over index, of type &lt;code&gt;SortedRange!(RangeIndex, (a, b) =&amp;gt; binaryFun!less(*a, *b))&lt;/code&gt; thus reflecting the ordering of the index. The index-based version returns &lt;code&gt;void&lt;/code&gt; because the ordering relation involves not only &lt;code&gt;index&lt;/code&gt; but also &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">ポインタベースのバージョンは、 &lt;code&gt;SortedRange&lt;/code&gt; &lt;code&gt;SortedRange!(RangeIndex, (a, b) =&amp;gt; binaryFun!less(*a, *b))&lt;/code&gt; タイプのインデックスのSortedRangeラッパーを返すため、インデックスの順序が反映されます。順序付け関係には &lt;code&gt;index&lt;/code&gt; だけでなく &lt;code&gt;r&lt;/code&gt; も含まれるため、インデックスベースのバージョンは &lt;code&gt;void&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4c0b6520bd81ff00673e639fb3748bb290589c44" translate="yes" xml:space="preserve">
          <source>The policy to use.</source>
          <target state="translated">利用する方針。</target>
        </trans-unit>
        <trans-unit id="5bfa0d8b059a39ab26c6f284f964719eecf94f69" translate="yes" xml:space="preserve">
          <source>The policy used by this mutex.</source>
          <target state="translated">このミューテックスで使用されるポリシー。</target>
        </trans-unit>
        <trans-unit id="8629893a44c9c276074edd00bae067e6b519cbda" translate="yes" xml:space="preserve">
          <source>The position in &lt;code&gt;array&lt;/code&gt; to insert the &lt;code&gt;stuff&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stuff&lt;/code&gt; を挿入する &lt;code&gt;array&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="e9eb86610993ddd6856217e1e6d70c91e6f75dbc" translate="yes" xml:space="preserve">
          <source>The position in the input string where the error occurred.</source>
          <target state="translated">入力文字列の中でエラーが発生した位置。</target>
        </trans-unit>
        <trans-unit id="f421096d1588c50f7ea09d98220627162688c28b" translate="yes" xml:space="preserve">
          <source>The position of the minimum (respectively maximum) element of forward range &lt;code&gt;range&lt;/code&gt;, i.e. a subrange of &lt;code&gt;range&lt;/code&gt; starting at the position of its smallest (respectively largest) element and with the same ending as &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="translated">前方範囲 &lt;code&gt;range&lt;/code&gt; の最小（それぞれ最大）要素の位置。つまり、その最小（それぞれ最大）要素の位置から始まり、 &lt;code&gt;range&lt;/code&gt; と同じ末尾を持つ &lt;code&gt;range&lt;/code&gt; のサブ範囲。</target>
        </trans-unit>
        <trans-unit id="51fc654e8d5c11108a73d4836e9e77c133dfb257" translate="yes" xml:space="preserve">
          <source>The possible states of the &lt;code&gt;Ternary&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Ternary&lt;/code&gt; の可能な状態</target>
        </trans-unit>
        <trans-unit id="76c6cabbb86643a051bf73c292aa98533c672138" translate="yes" xml:space="preserve">
          <source>The possible targets are computed more conservatively than the language allows, eliminating all dangerous conversions. For example, &lt;code&gt;ImplicitConversionTargets!double&lt;/code&gt; does not include &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">可能なターゲットは言語が許容するよりも保守的に計算され、すべての危険な変換を排除します。たとえば、 &lt;code&gt;ImplicitConversionTargets!double&lt;/code&gt; には &lt;code&gt;float&lt;/code&gt; は含まれません。</target>
        </trans-unit>
        <trans-unit id="11d29604df18454624b74cfa89078e0417260306" translate="yes" xml:space="preserve">
          <source>The possible values for units are &lt;code&gt;&quot;weeks&quot;&lt;/code&gt;, &lt;code&gt;&quot;days&quot;&lt;/code&gt;, &lt;code&gt;&quot;hours&quot;&lt;/code&gt;, &lt;code&gt;&quot;minutes&quot;&lt;/code&gt;, &lt;code&gt;&quot;seconds&quot;&lt;/code&gt;, &lt;code&gt;&quot;msecs&quot;&lt;/code&gt; (milliseconds), &lt;code&gt;&quot;usecs&quot;&lt;/code&gt;, (microseconds), &lt;code&gt;&quot;hnsecs&quot;&lt;/code&gt; (hecto-nanoseconds, i.e. 100 ns), and &lt;code&gt;&quot;nsecs&quot;&lt;/code&gt;.</source>
          <target state="translated">単位の可能な値は、 &lt;code&gt;&quot;weeks&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;days&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;hours&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;minutes&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;seconds&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;msecs&quot;&lt;/code&gt; （ミリ秒）、 &lt;code&gt;&quot;usecs&quot;&lt;/code&gt; 、（マイクロ秒）、 &lt;code&gt;&quot;hnsecs&quot;&lt;/code&gt; （ヘクトナノ秒、つまり100 ns）、および &lt;code&gt;&quot;nsecs&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c4f82ffde3ae1f423f2307932836a1e645ef668" translate="yes" xml:space="preserve">
          <source>The postblits &lt;code&gt;__fieldPostblit&lt;/code&gt; and &lt;code&gt;__aggrPostblit&lt;/code&gt; are generated without any implicit qualifiers and are not considered struct members. This leads to the situation where qualifying an entire struct declaration with &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;immutable&lt;/code&gt; does not have any impact on the above-mentioned postblits. However, since &lt;code&gt;__xpostblit&lt;/code&gt; is a member of the struct and an alias of one of the other postblits, the qualifiers applied to the struct will affect the aliased postblit.</source>
          <target state="translated">postblits &lt;code&gt;__fieldPostblit&lt;/code&gt; および &lt;code&gt;__aggrPostblit&lt;/code&gt; は、暗黙の修飾子なしで生成され、構造体メンバーとは見なされません。これは、構造体宣言全体を &lt;code&gt;const&lt;/code&gt; または &lt;code&gt;immutable&lt;/code&gt; で修飾しても、上記のポストブリットに影響を与えない状況につながります。ただし、 &lt;code&gt;__xpostblit&lt;/code&gt; は構造体のメンバーであり、他のポストブリットの1つのエイリアスであるため、構造体に適用された修飾子はエイリアス化されたポストブリットに影響します。</target>
        </trans-unit>
        <trans-unit id="d47161252adc52b1f430344a53bb4997710446f2" translate="yes" xml:space="preserve">
          <source>The power modulus value of (base ^ exponent) % modulus.</source>
          <target state="translated">(基数 ^ 指数)%モジュラスの力率の値。</target>
        </trans-unit>
        <trans-unit id="309c3d73f76b800f2ba5fd6059ce5bcf824a5c98" translate="yes" xml:space="preserve">
          <source>The pre contracts specify the preconditions before a statement is executed. The most typical use of this would be in validating the parameters to a function. The post contracts validate the result of the statement. The most typical use of this would be in validating the return value of a function and of any side effects it has. In D, pre contracts begin with &lt;code&gt;in&lt;/code&gt;, and post contracts begin with &lt;code&gt;out&lt;/code&gt;. They come at the end of the function signature and before the opening brace of the function body.</source>
          <target state="translated">事前契約は、ステートメントが実行される前の前提条件を指定します。これの最も一般的な用途は、関数のパラメーターを検証することです。ポスト契約は、ステートメントの結果を検証します。これの最も一般的な使用法は、関数とその副作用の戻り値を検証することです。Dでは、事前契約は &lt;code&gt;in&lt;/code&gt; で始まり、事後契約は &lt;code&gt;out&lt;/code&gt; で始まります。それらは、関数シグニチャーの終わりで、関数本体の開始ブレースの前に来ます。</target>
        </trans-unit>
        <trans-unit id="bad3757e2d3ea8e03615372cc42932fa498e0342" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;less&lt;/code&gt; defines the lexicographical ordering to be used on the range.</source>
          <target state="translated">述語 &lt;code&gt;less&lt;/code&gt; は、範囲で使用される辞書式順序を定義します。</target>
        </trans-unit>
        <trans-unit id="75eafad6126e4b32c7a8770becfcb1f1b009b4fa" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;pred&lt;/code&gt; needs to accept an element of &lt;code&gt;r&lt;/code&gt; and the separator &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">述語 &lt;code&gt;pred&lt;/code&gt; は &lt;code&gt;r&lt;/code&gt; の要素とセパレータ &lt;code&gt;s&lt;/code&gt; を受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="73639f6f297aaeaa7398fc5473b39c5c235bf984" translate="yes" xml:space="preserve">
          <source>The predicate for comparing each element with the needle, defaulting to equality &lt;code&gt;&quot;a == b&quot;&lt;/code&gt;. The negated predicate &lt;code&gt;&quot;a != b&quot;&lt;/code&gt; can be used to search instead for the first element</source>
          <target state="translated">各要素を針と比較するための述語。デフォルトは等値 &lt;code&gt;&quot;a == b&quot;&lt;/code&gt; です。否定述語 &lt;code&gt;&quot;a != b&quot;&lt;/code&gt; を使用して、代わりに最初の要素を検索できます</target>
        </trans-unit>
        <trans-unit id="ad19c283f2ff0ef86cf40f35fd842064c7bd010d" translate="yes" xml:space="preserve">
          <source>The predicate for comparing each element with the separator, defaulting to &lt;code&gt;&quot;a == b&quot;&lt;/code&gt;.</source>
          <target state="translated">各要素をセパレーターと比較するための述部。デフォルトは &lt;code&gt;&quot;a == b&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c5a87643179e233709de5c2f1a144d80a09a77b5" translate="yes" xml:space="preserve">
          <source>The predicate for deciding where to split the range when no separator is passed</source>
          <target state="translated">セパレータが渡されていない場合に、範囲をどこで分割するかを決定するための述語</target>
        </trans-unit>
        <trans-unit id="e35b33251882d624f933a2c1b64ccb5eb65ade7b" translate="yes" xml:space="preserve">
          <source>The predicate for determining when to stop counting.</source>
          <target state="translated">カウントを停止するタイミングを決定するための述語。</target>
        </trans-unit>
        <trans-unit id="0c33296dd22cd76b6c27b1beb8636640e4665dda" translate="yes" xml:space="preserve">
          <source>The predicate is expected to satisfy certain rules in order for &lt;code&gt;sort&lt;/code&gt; to behave as expected - otherwise, the program may fail on certain inputs (but not others) when not compiled in release mode, due to the cursory &lt;code&gt;assumeSorted&lt;/code&gt; check. Specifically, &lt;code&gt;sort&lt;/code&gt; expects &lt;code&gt;less(a,b) &amp;amp;&amp;amp; less(b,c)&lt;/code&gt; to imply &lt;code&gt;less(a,c)&lt;/code&gt; (transitivity), and, conversely, &lt;code&gt;!less(a,b) &amp;amp;&amp;amp; !less(b,c)&lt;/code&gt; to imply &lt;code&gt;!less(a,c)&lt;/code&gt;. Note that the default predicate (&lt;code&gt;&quot;a &amp;lt; b&quot;&lt;/code&gt;) does not always satisfy these conditions for floating point types, because the expression will always be &lt;code&gt;false&lt;/code&gt; when either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; is NaN. Use &lt;a href=&quot;std_math#cmp&quot;&gt;&lt;code&gt;std.math.cmp&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">述語は、 &lt;code&gt;sort&lt;/code&gt; が期待どおりに動作するために特定のルールを満たすことが期待されています。そうでない場合、リリースモードでコンパイルされていない場合、プログラムは、大雑把な &lt;code&gt;assumeSorted&lt;/code&gt; チェックにより、特定の入力で失敗する可能性があります。具体的には、 &lt;code&gt;sort&lt;/code&gt; は &lt;code&gt;less(a,b) &amp;amp;&amp;amp; less(b,c)&lt;/code&gt; が &lt;code&gt;less(a,c)&lt;/code&gt; （推移性）を意味し、逆に &lt;code&gt;!less(a,b) &amp;amp;&amp;amp; !less(b,c)&lt;/code&gt; が意味することを期待しています &lt;code&gt;!less(a,c)&lt;/code&gt; 。デフォルトの述語（ことに注意してください &lt;code&gt;&quot;a &amp;lt; b&quot;&lt;/code&gt; 式が常になりますので）常に、浮動小数点型のため、これらの条件を満たしていない &lt;code&gt;false&lt;/code&gt; ときのいずれかまたは &lt;code&gt;b&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; NaNです。代わりに&lt;a href=&quot;std_math#cmp&quot;&gt; &lt;code&gt;std.math.cmp&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="27f1015c9d3c968b66e69f35344a3e7b0807ccce" translate="yes" xml:space="preserve">
          <source>The predicate is passed to &lt;a href=&quot;std_functional#binaryFun&quot;&gt;&lt;code&gt;std.functional.binaryFun&lt;/code&gt;&lt;/a&gt; and accepts any callable function that can be executed via &lt;code&gt;pred(element, s)&lt;/code&gt;.</source>
          <target state="translated">述語は&lt;a href=&quot;std_functional#binaryFun&quot;&gt; &lt;code&gt;std.functional.binaryFun&lt;/code&gt; に&lt;/a&gt;渡され、 &lt;code&gt;pred(element, s)&lt;/code&gt; 介して実行できる呼び出し可能な関数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="2040ad77d27bfa42d579b0732a628553443b56b4" translate="yes" xml:space="preserve">
          <source>The predicate is passed to &lt;a href=&quot;std_functional#binaryFun&quot;&gt;&lt;code&gt;std.functional.binaryFun&lt;/code&gt;&lt;/a&gt;, and can either accept a string, or any callable that can be executed via &lt;code&gt;pred(element, element)&lt;/code&gt;.</source>
          <target state="translated">述語は&lt;a href=&quot;std_functional#binaryFun&quot;&gt; &lt;code&gt;std.functional.binaryFun&lt;/code&gt; &lt;/a&gt;に渡され、文字列、または &lt;code&gt;pred(element, element)&lt;/code&gt; 介して実行できる任意の呼び出し可能オブジェクトを受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="c1cc6d6782bb5ddbb272e878b0a97cd35ebd9643" translate="yes" xml:space="preserve">
          <source>The predicate is passed to &lt;a href=&quot;std_functional#unaryFun&quot;&gt;&lt;code&gt;std.functional.unaryFun&lt;/code&gt;&lt;/a&gt;, and can either accept a string, or any callable that can be executed via &lt;code&gt;pred(element)&lt;/code&gt;.</source>
          <target state="translated">述語は&lt;a href=&quot;std_functional#unaryFun&quot;&gt; &lt;code&gt;std.functional.unaryFun&lt;/code&gt; &lt;/a&gt;に渡され、文字列、または &lt;code&gt;pred(element)&lt;/code&gt; を介して実行できる任意の呼び出し可能オブジェクトを受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="30b49793439ff4c8d008cc1bf8471d003e4d8abc" translate="yes" xml:space="preserve">
          <source>The predicate that determines whether elements from each respective range match. Defaults to equality &lt;code&gt;&quot;a == b&quot;&lt;/code&gt;.</source>
          <target state="translated">それぞれの範囲の要素が一致するかどうかを決定する述語。デフォルトは等号 &lt;code&gt;&quot;a == b&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="11c0e0e174294f0d039166c9a6e153edb402dcf7" translate="yes" xml:space="preserve">
          <source>The predicate that the range should be partitioned by.</source>
          <target state="translated">範囲を分割する述語。</target>
        </trans-unit>
        <trans-unit id="efb36bba668de1092c1769f6aab990aa0cb00922" translate="yes" xml:space="preserve">
          <source>The predicate the ranges are sorted by.</source>
          <target state="translated">範囲がソートされる述語。</target>
        </trans-unit>
        <trans-unit id="87bdd1f3ad180a36d78f0b0a9fe20115fabf7d4e" translate="yes" xml:space="preserve">
          <source>The predicate to evaluate.</source>
          <target state="translated">評価する述語。</target>
        </trans-unit>
        <trans-unit id="793b27dece0d99ba7788014f7bf7dd0fb1085592" translate="yes" xml:space="preserve">
          <source>The predicate to partition by.</source>
          <target state="translated">で仕切る述語。</target>
        </trans-unit>
        <trans-unit id="d5491576ad03ca04a8526c028f920296327ac77a" translate="yes" xml:space="preserve">
          <source>The predicate to satisfy.</source>
          <target state="translated">満たす述語。</target>
        </trans-unit>
        <trans-unit id="c929e818343f11140b434407d7b74c242dda71fa" translate="yes" xml:space="preserve">
          <source>The predicate to sort by.</source>
          <target state="translated">ソートする述語。</target>
        </trans-unit>
        <trans-unit id="1d648ec381e9cf43fb0241bd298676f64d9af32e" translate="yes" xml:space="preserve">
          <source>The predicate to sort the transformed elements by.</source>
          <target state="translated">変換された要素を並べ替える述語。</target>
        </trans-unit>
        <trans-unit id="04024868be7f287d2663bbef1dbf103a8da3cc6b" translate="yes" xml:space="preserve">
          <source>The predicate to use for comparing elements between the range and the needle(s).</source>
          <target state="translated">範囲と針(s)の間の要素を比較するために使用する述語。</target>
        </trans-unit>
        <trans-unit id="28f32071ce8ed6579de4bc0673c1fb09d434c803" translate="yes" xml:space="preserve">
          <source>The predicate to use for comparing elements.</source>
          <target state="translated">要素の比較に使用する述語。</target>
        </trans-unit>
        <trans-unit id="8e5598b5509b9c6eafc0eab8a5a91702947d0e63" translate="yes" xml:space="preserve">
          <source>The predicate to use for determining a match.</source>
          <target state="translated">一致を決定するために使用する述語。</target>
        </trans-unit>
        <trans-unit id="89fd4b4f61967cf71a560e54be19f8d76cbb1cde" translate="yes" xml:space="preserve">
          <source>The predicate to use for the rearrangement.</source>
          <target state="translated">再配置に使用する述語。</target>
        </trans-unit>
        <trans-unit id="aafedf7f211b6bcd89cdb1a78ec67451cd224b87" translate="yes" xml:space="preserve">
          <source>The predicate to use in comparing elements for commonality. Defaults to equality &lt;code&gt;&quot;a == b&quot;&lt;/code&gt;.</source>
          <target state="translated">要素の共通性を比較する際に使用する述語。デフォルトは等号 &lt;code&gt;&quot;a == b&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0d6ef6e2289f7e8b2fa887a80d23adf75d1641e1" translate="yes" xml:space="preserve">
          <source>The predicate used for comparison, modeled as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings&quot;&gt; strict weak ordering&lt;/a&gt; (irreflexive, antisymmetric, transitive, and implying a transitive equivalence)</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings&quot;&gt;厳密な弱い順序付け&lt;/a&gt;としてモデル化された、比較に使用される述語（非再帰的、反対称的、推移的、および推移的等価を意味する）</target>
        </trans-unit>
        <trans-unit id="7f8c0f3692256237f756958104cf2f7dfb39d06e" translate="yes" xml:space="preserve">
          <source>The predicate used to compare the values.</source>
          <target state="translated">値を比較するために使用される述語。</target>
        </trans-unit>
        <trans-unit id="97370c26d71acf94352a17fb62d152e3830e5289" translate="yes" xml:space="preserve">
          <source>The predicates are evaluated from left to right, aborting evaluation in a short-cut manner if a false result is encountered, in which case the latter instantiations do not need to compile.</source>
          <target state="translated">述語は左から右へと評価され、偽の結果が発生した場合はショートカットで評価を中止します。</target>
        </trans-unit>
        <trans-unit id="1d7464c6a5c260ac34ab99c016228d6b560c3e52" translate="yes" xml:space="preserve">
          <source>The predicates are evaluated from left to right, aborting evaluation in a short-cut manner if a true result is encountered, in which case the latter instantiations do not need to compile.</source>
          <target state="translated">述語は左から右へと評価され、真の結果が出た場合はショートカットで評価を中止します。</target>
        </trans-unit>
        <trans-unit id="c330fdecec36e8afd7824dda6b681cda50cda735" translate="yes" xml:space="preserve">
          <source>The preferred way to do memory management in Objective-C is to use Automatic Reference Counting, &lt;a href=&quot;https://developer.apple.com/library/mac/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html&quot;&gt;ARC&lt;/a&gt;. This is not supported in D, therefore manual memory management is required to be used instead. This is achieved by calling &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Protocols/NSObject_Protocol/index.html#//apple_ref/occ/intfm/NSObject/release&quot;&gt;&lt;code&gt;release&lt;/code&gt;&lt;/a&gt; on an Objective-C instance, like in the old days of Objective-C.</source>
          <target state="translated">Objective-Cでメモリ管理を行うための推奨される方法は、自動参照カウント&lt;a href=&quot;https://developer.apple.com/library/mac/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html&quot;&gt;ARC&lt;/a&gt;を使用することです。これはDではサポートされていないため、代わりに手動のメモリ管理を使用する必要があります。これは、Objective-Cの昔のように、Objective-Cインスタンスで&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Protocols/NSObject_Protocol/index.html#//apple_ref/occ/intfm/NSObject/release&quot;&gt; &lt;code&gt;release&lt;/code&gt; &lt;/a&gt;を呼び出すことによって実現されます。</target>
        </trans-unit>
        <trans-unit id="9c5a92eca5579a36fc2d0481a3b2f7e8a916467c" translate="yes" xml:space="preserve">
          <source>The presentation of unit test results to the user.</source>
          <target state="translated">ユニットテストの結果をユーザーに提示すること。</target>
        </trans-unit>
        <trans-unit id="8662f0b9530b0402d97b53b894f53167be45df40" translate="yes" xml:space="preserve">
          <source>The previous exception in the chain of exceptions, if any.</source>
          <target state="translated">例外の連鎖の中に例外がある場合は、その前の例外。</target>
        </trans-unit>
        <trans-unit id="279b676cef017bbf61d78e4700dc992f1809ccb0" translate="yes" xml:space="preserve">
          <source>The previous exception in the chain of exceptions.</source>
          <target state="translated">例外の連鎖の中の前の例外。</target>
        </trans-unit>
        <trans-unit id="e3fc0517fe6d8889b123aa839a1f6e19c03962c2" translate="yes" xml:space="preserve">
          <source>The primary allocator.</source>
          <target state="translated">プライマリアロケータです。</target>
        </trans-unit>
        <trans-unit id="4f0154c15aa8860cab6cca5d166473b2dfba4c14" translate="yes" xml:space="preserve">
          <source>The primary range of a container</source>
          <target state="translated">コンテナの一次範囲</target>
        </trans-unit>
        <trans-unit id="ab5e84bf7b0a53be5c65c8499a656cc503de367a" translate="yes" xml:space="preserve">
          <source>The primary range type associated with the container.</source>
          <target state="translated">コンテナに関連付けられたプライマリレンジタイプ。</target>
        </trans-unit>
        <trans-unit id="33a169f7cc45c68212a77c63178f168570e503e4" translate="yes" xml:space="preserve">
          <source>The primary usefulness of</source>
          <target state="translated">の第一の有用性</target>
        </trans-unit>
        <trans-unit id="6d1a3cd0b06a0c49d350401e273d786a65d53304" translate="yes" xml:space="preserve">
          <source>The primary way that programs should time how long something takes is to do</source>
          <target state="translated">プログラムが何かにかかる時間を計測する第一の方法は、以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c12de0da440bbe44b6cbc2ce06649502cfbb1a15" translate="yes" xml:space="preserve">
          <source>The process ID number.</source>
          <target state="translated">プロセスID番号です。</target>
        </trans-unit>
        <trans-unit id="57ea5f74d898ca9f45c60b0cceb17881be0464f6" translate="yes" xml:space="preserve">
          <source>The process of compiling is divided into multiple phases. Each phase has no dependence on subsequent phases. For example, the scanner is not perturbed by the semantic analyzer. This separation of the passes makes language tools like syntax directed editors relatively easy to produce. It also is possible to compress D source by storing it in &amp;lsquo;tokenized&amp;rsquo; form.</source>
          <target state="translated">コンパイルのプロセスは、複数のフェーズに分かれています。各フェーズは、後続のフェーズに依存しません。たとえば、スキャナはセマンティックアナライザによって混乱しません。このパスの分離により、構文指向エディターなどの言語ツールを比較的簡単に作成できます。Dのソースを「トークン化された」形式で保存することで圧縮することもできます。</target>
        </trans-unit>
        <trans-unit id="ea34e4c27e6af1bb0e75da5e0e23701dae05bbf4" translate="yes" xml:space="preserve">
          <source>The process of compiling is divided into multiple phases. Each phase is independent of subsequent phases. For example, the scanner is not affected by the semantic analyzer. This separation of passes makes language tools like syntax-directed editors relatively easy to create. It is also possible to compress D source by storing it in &amp;lsquo;tokenized&amp;rsquo; form.</source>
          <target state="translated">コンパイルのプロセスは、複数のフェーズに分かれています。各フェーズは、後続のフェーズから独立しています。たとえば、スキャナーはセマンティックアナライザーの影響を受けません。このパスの分離により、構文指向エディターなどの言語ツールを比較的簡単に作成できます。Dソースを「トークン化」形式で保存して圧縮することもできます。</target>
        </trans-unit>
        <trans-unit id="28114859ca08917818ce7134f60ebbc9ff108b7d" translate="yes" xml:space="preserve">
          <source>The process of constructing a trie is more involved and is hidden from the user in a form of the convenience functions &lt;a href=&quot;#codepointTrie&quot;&gt;&lt;code&gt;codepointTrie&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#codepointSetTrie&quot;&gt;&lt;code&gt;codepointSetTrie&lt;/code&gt;&lt;/a&gt; and the even more convenient &lt;a href=&quot;#toTrie&quot;&gt;&lt;code&gt;toTrie&lt;/code&gt;&lt;/a&gt;. In general a set or built-in AA with &lt;code&gt;dchar&lt;/code&gt; type can be turned into a trie. The trie object in this module is read-only (immutable); it's effectively frozen after construction.</source>
          <target state="translated">トライを作成するプロセスはより複雑で、便利な関数&lt;a href=&quot;#codepointTrie&quot;&gt; &lt;code&gt;codepointTrie&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#codepointSetTrie&quot;&gt; &lt;code&gt;codepointSetTrie&lt;/code&gt; &lt;/a&gt;、およびさらに便利な&lt;a href=&quot;#toTrie&quot;&gt; &lt;code&gt;toTrie&lt;/code&gt; の&lt;/a&gt;形式でユーザーから隠されています。一般に、 &lt;code&gt;dchar&lt;/code&gt; タイプのセットまたは組み込みのAAは、トライに変換できます。このモジュールのトライオブジェクトは読み取り専用です（不変）。建設後は効果的に凍結されます。</target>
        </trans-unit>
        <trans-unit id="d2a069ebee0eb3fc705692f747a2a23547f8a461" translate="yes" xml:space="preserve">
          <source>The process of deducing template type parameters from function arguments is called Implicit Function Template Instantiation (IFTI).</source>
          <target state="translated">関数引数からテンプレート型パラメータを推論するプロセスは、暗黙の関数テンプレートインスタンス化(IFTI)と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="a65917e549f3ee7bf2fcc111ebfc87ae282e8929" translate="yes" xml:space="preserve">
          <source>The process will be &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms686714%28v=vs.100%29.aspx&quot;&gt;forcefully and abruptly terminated&lt;/a&gt;. If &lt;code&gt;codeOrSignal&lt;/code&gt; is specified, it must be a nonnegative number which will be used as the exit code of the process. If not, the process wil exit with code 1. Do not use &lt;code&gt;codeOrSignal = 259&lt;/code&gt;, as this is a special value (aka. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms683189.aspx&quot;&gt;STILL_ACTIVE&lt;/a&gt;) used by Windows to signal that a process has in fact</source>
          <target state="translated">プロセスは&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms686714%28v=vs.100%29.aspx&quot;&gt;強制的かつ突然終了します&lt;/a&gt;。 &lt;code&gt;codeOrSignal&lt;/code&gt; を指定する場合は、プロセスの終了コードとして使用される負でない数である必要があります。そうでない場合、プロセスはコード1で終了します &lt;code&gt;codeOrSignal = 259&lt;/code&gt; は使用しないでください。これは、プロセスが実際に持っていることを通知するためにWindowsが使用する特別な値（別名&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms683189.aspx&quot;&gt;STILL_ACTIVE&lt;/a&gt;）であるためです。</target>
        </trans-unit>
        <trans-unit id="4c66fd47d6b0ea9f7f298e0ac3d4710fb98aca07" translate="yes" xml:space="preserve">
          <source>The process will be &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686714%28v=vs.100%29.aspx&quot;&gt;forcefully and abruptly terminated&lt;/a&gt;. If &lt;code&gt;codeOrSignal&lt;/code&gt; is specified, it must be a nonnegative number which will be used as the exit code of the process. If not, the process wil exit with code 1. Do not use &lt;code&gt;codeOrSignal = 259&lt;/code&gt;, as this is a special value (aka. &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms683189.aspx&quot;&gt;STILL_ACTIVE&lt;/a&gt;) used by Windows to signal that a process has in fact</source>
          <target state="translated">プロセスは&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686714%28v=vs.100%29.aspx&quot;&gt;強制的かつ突然終了します&lt;/a&gt;。 &lt;code&gt;codeOrSignal&lt;/code&gt; を指定する場合は、プロセスの終了コードとして使用される負でない数値である必要があります。そうでない場合、プロセスはコード1で終了します &lt;code&gt;codeOrSignal = 259&lt;/code&gt; は、プロセスが実際に持っていることを通知するためにWindowsによって使用される特別な値（別名&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms683189.aspx&quot;&gt;STILL_ACTIVE&lt;/a&gt;）であるため、使用しないでください。</target>
        </trans-unit>
        <trans-unit id="a52379dcfb4fdf54c286085a8d7b935d4c3bf51f" translate="yes" xml:space="preserve">
          <source>The program can explicitly inform the garbage collector that an object is no longer referred to with &lt;a href=&quot;https://dlang.org/phobos/object.html#destroy&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt;, and then the garbage collector calls the destructor immediately. The destructor is guaranteed to never be called twice.</source>
          <target state="translated">プログラムは、オブジェクトが&lt;a href=&quot;https://dlang.org/phobos/object.html#destroy&quot;&gt; &lt;code&gt;destroy&lt;/code&gt; &lt;/a&gt;で参照されなくなったことをガベージコレクターに明示的に通知し、ガベージコレクターはデストラクタをすぐに呼び出します。デストラクタは2度呼び出されないことが保証されています。</target>
        </trans-unit>
        <trans-unit id="da8f18e43875ff3b21ffb3a65f1d74da9627baee" translate="yes" xml:space="preserve">
          <source>The program name,</source>
          <target state="translated">プログラム名です。</target>
        </trans-unit>
        <trans-unit id="75fd342f2dff09b71b21a32efe312806ee1c88b1" translate="yes" xml:space="preserve">
          <source>The projection of &lt;code&gt;z&lt;/code&gt; onto the Riemann sphere.</source>
          <target state="translated">リーマン球への &lt;code&gt;z&lt;/code&gt; の射影。</target>
        </trans-unit>
        <trans-unit id="212a3b865b9d39089a835e861cd51456362e9629" translate="yes" xml:space="preserve">
          <source>The proper way to instantiate this object is to call &lt;code&gt;WorkerLocalStorage.toRange&lt;/code&gt;. Once instantiated, this object behaves as a finite random-access range with assignable, lvalue elements and a length equal to the number of worker threads in the &lt;code&gt;TaskPool&lt;/code&gt; that created it plus 1.</source>
          <target state="translated">このオブジェクトをインスタンス化する適切な方法は、 &lt;code&gt;WorkerLocalStorage.toRange&lt;/code&gt; を呼び出すことです。インスタンス化されると、このオブジェクトは、割り当て可能なlvalue要素と、それを作成した &lt;code&gt;TaskPool&lt;/code&gt; のワーカースレッドの数に1を加えた長さに等しい有限ランダムアクセス範囲として動作します。</target>
        </trans-unit>
        <trans-unit id="06cb3e37f16148a51f8965d4f1cdc4ea883f0365" translate="yes" xml:space="preserve">
          <source>The properties &lt;code&gt;.__vptr&lt;/code&gt; and &lt;code&gt;.__monitor&lt;/code&gt; give access to the class object's vtbl[] and monitor, respectively, but should not be used in user code.</source>
          <target state="translated">プロパティ &lt;code&gt;.__vptr&lt;/code&gt; および &lt;code&gt;.__monitor&lt;/code&gt; は、それぞれクラスオブジェクトのvtbl []およびモニターへのアクセスを提供しますが、ユーザーコードでは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="465978af9e7d0929cd7aec7d44ae79ba13368247" translate="yes" xml:space="preserve">
          <source>The property &lt;code&gt;.outer&lt;/code&gt; used in a nested class gives the &lt;code&gt;this&lt;/code&gt; pointer to its enclosing class. If there is no enclosing class context, &lt;code&gt;.outer&lt;/code&gt; would return a pointer to enclosing function frame with &lt;code&gt;void*&lt;/code&gt;.</source>
          <target state="translated">ネストされたクラスで使用されるプロパティ &lt;code&gt;.outer&lt;/code&gt; は、 &lt;code&gt;this&lt;/code&gt; ポインタを、それを囲むクラスに提供します。 &lt;code&gt;.outer&lt;/code&gt; クラスコンテキストがない場合、.outerは &lt;code&gt;void*&lt;/code&gt; で外側の関数フレームへのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="18230b4e21a7c31cb0b0a527787c1242f4f98838" translate="yes" xml:space="preserve">
          <source>The proxied value must be an &lt;b&gt;lvalue&lt;/b&gt;.</source>
          <target state="translated">プロキシされる値は&lt;b&gt;左辺&lt;/b&gt;値でなければなりません。</target>
        </trans-unit>
        <trans-unit id="2aa3e8b16a5d628661af4b4300a9494770cb4fda" translate="yes" xml:space="preserve">
          <source>The ptr aliases are integral types guaranteed to be large enough to hold a pointer without losing bits:</source>
          <target state="translated">ptr エイリアスは、ビットを失うことなくポインタを保持するのに十分な大きさが保証された積分型です。</target>
        </trans-unit>
        <trans-unit id="5110028f04b358ea03cfe31d14fda076a20fecde" translate="yes" xml:space="preserve">
          <source>The purpose is to bypass the special case decoding that &lt;a href=&quot;std_range_primitives#front&quot;&gt;&lt;code&gt;std.range.primitives.front&lt;/code&gt;&lt;/a&gt; does to character arrays. As a result, using ranges with &lt;code&gt;byCodeUnit&lt;/code&gt; can be &lt;code&gt;nothrow&lt;/code&gt; while &lt;a href=&quot;std_range_primitives#front&quot;&gt;&lt;code&gt;std.range.primitives.front&lt;/code&gt;&lt;/a&gt; throws when it encounters invalid Unicode sequences.</source>
          <target state="translated">その目的は、&lt;a href=&quot;std_range_primitives#front&quot;&gt; &lt;code&gt;std.range.primitives.front&lt;/code&gt; &lt;/a&gt;が文字配列に対して行う特殊なケースのデコードをバイパスすることです。その結果、 &lt;code&gt;byCodeUnit&lt;/code&gt; が無効なUnicodeシーケンスを&lt;a href=&quot;std_range_primitives#front&quot;&gt; &lt;code&gt;std.range.primitives.front&lt;/code&gt; &lt;/a&gt;場合にスローする一方で、byCodeUnitで範囲を使用することはできませ &lt;code&gt;nothrow&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c265a2d12f1e7e5cd63d17026023fdb0d5f3f129" translate="yes" xml:space="preserve">
          <source>The purpose of this is so that continue will go to the next of the statements, and break will go to the end of the statements.</source>
          <target state="translated">これは、continueが文の次に行き、breakが文の最後に行くようにするためです。</target>
        </trans-unit>
        <trans-unit id="1651c6e27b3326d67f792a155dd955abdff9b39f" translate="yes" xml:space="preserve">
          <source>The qualifier template from the given type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">指定されたタイプ &lt;code&gt;T&lt;/code&gt; の修飾子テンプレート</target>
        </trans-unit>
        <trans-unit id="e09036cabacde1d4e95f44667e0017f4b4c08158" translate="yes" xml:space="preserve">
          <source>The qualifiers of the affix are not always the same as the qualifiers of the argument. This is because the affixes are not part of the data itself, but instead are just</source>
          <target state="translated">アフィックスの修飾子は、引数の修飾子と同じとは限りません。これは、アフィックスがデータそのものの一部ではなく、代わりに単に</target>
        </trans-unit>
        <trans-unit id="0c6a006eb9560342bd14cc8557e22fb25a226fd2" translate="yes" xml:space="preserve">
          <source>The random-access range to partition.</source>
          <target state="translated">パーティショニングするランダムアクセス範囲。</target>
        </trans-unit>
        <trans-unit id="97092cfd186fb5b900f835cf73b9eb2468215664" translate="yes" xml:space="preserve">
          <source>The random-access range to rearrange.</source>
          <target state="translated">再配置するランダムアクセス範囲。</target>
        </trans-unit>
        <trans-unit id="e4ce54dd9a7b88e5f2bf201fe3fb2e94f16d9fa9" translate="yes" xml:space="preserve">
          <source>The random-access range to reorder.</source>
          <target state="translated">並び替えを行うランダムアクセス範囲。</target>
        </trans-unit>
        <trans-unit id="9759b91222e0376d244c7fe53ea2166dd785b989" translate="yes" xml:space="preserve">
          <source>The range API is supported for both encoding and decoding:</source>
          <target state="translated">range APIはエンコードとデコードの両方に対応しています。</target>
        </trans-unit>
        <trans-unit id="f827934761dc7cbd89045f8928d650c1c6adfe0d" translate="yes" xml:space="preserve">
          <source>The range being partitioned</source>
          <target state="translated">分割されている範囲</target>
        </trans-unit>
        <trans-unit id="ff34249e986a29860f6c5d437ad8145efcb4a0b9" translate="yes" xml:space="preserve">
          <source>The range primitives that the resulting range provides depends whether or not &lt;code&gt;r&lt;/code&gt; provides them. Except the functions &lt;code&gt;back&lt;/code&gt; and &lt;code&gt;popBack&lt;/code&gt;, which also require the range to have a length as well as &lt;code&gt;back&lt;/code&gt; and &lt;code&gt;popBack&lt;/code&gt;</source>
          <target state="translated">結果の範囲が提供する範囲プリミティブは、 &lt;code&gt;r&lt;/code&gt; がそれらを提供するかどうかによって異なります。関数 &lt;code&gt;back&lt;/code&gt; と &lt;code&gt;popBack&lt;/code&gt; を除きます。これには、範囲の長さと、 &lt;code&gt;back&lt;/code&gt; および &lt;code&gt;popBack&lt;/code&gt; も必要です。</target>
        </trans-unit>
        <trans-unit id="3e867771f52adb05da2dc3c29c4eccce7ead17be" translate="yes" xml:space="preserve">
          <source>The range to append to.</source>
          <target state="translated">追加する範囲を指定します。</target>
        </trans-unit>
        <trans-unit id="b8f92036ba2322967a7c304f2680091886c10a9f" translate="yes" xml:space="preserve">
          <source>The range to check.</source>
          <target state="translated">チェックする範囲。</target>
        </trans-unit>
        <trans-unit id="92faab42363803d3ec822fdd1af0c67c9ba8588a" translate="yes" xml:space="preserve">
          <source>The range to count.</source>
          <target state="translated">数える範囲。</target>
        </trans-unit>
        <trans-unit id="2a5042de5707ed27e3cd38336bffdd36cd0572c7" translate="yes" xml:space="preserve">
          <source>The range to handle.</source>
          <target state="translated">扱う範囲。</target>
        </trans-unit>
        <trans-unit id="e058b4d6c31bc35cf580da1ebefcc71d18f5d1ca" translate="yes" xml:space="preserve">
          <source>The range to index.</source>
          <target state="translated">インデックスにする範囲。</target>
        </trans-unit>
        <trans-unit id="80d973acf722de6a5268aeaa4c8fc9646330d9bc" translate="yes" xml:space="preserve">
          <source>The range to permute.</source>
          <target state="translated">パーマチュアする範囲。</target>
        </trans-unit>
        <trans-unit id="804c985240d645660c7de05e2788995416dc345a" translate="yes" xml:space="preserve">
          <source>The range to read from.</source>
          <target state="translated">読み取る範囲を指定します。</target>
        </trans-unit>
        <trans-unit id="8b4ec9a859bd18ea04f9de73b722dd789467f7e7" translate="yes" xml:space="preserve">
          <source>The range to search.</source>
          <target state="translated">検索する範囲。</target>
        </trans-unit>
        <trans-unit id="121036e1b0b497292221a25f49b6dd27cc53e9e1" translate="yes" xml:space="preserve">
          <source>The range to sort.</source>
          <target state="translated">ソートする範囲。</target>
        </trans-unit>
        <trans-unit id="cc147be5451f6cfb0b41f5b2277bb929ce23d7db" translate="yes" xml:space="preserve">
          <source>The range to subtract from &lt;code&gt;r1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r1&lt;/code&gt; から差し引く範囲。</target>
        </trans-unit>
        <trans-unit id="49d274ac9ff8b631f4dc3f4b09f1138c62b7ffc0" translate="yes" xml:space="preserve">
          <source>The range to write to.</source>
          <target state="translated">書き込み先の範囲です。</target>
        </trans-unit>
        <trans-unit id="49360fcd22b248a482a8ca2592193dd9241be2ca" translate="yes" xml:space="preserve">
          <source>The range type</source>
          <target state="translated">レンジタイプ</target>
        </trans-unit>
        <trans-unit id="802ba550fbcee32bf81ae1613d2bfa286e1456a5" translate="yes" xml:space="preserve">
          <source>The range types for &lt;code&gt;RedBlackTree&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;RedBlackTree&lt;/code&gt; の範囲タイプ</target>
        </trans-unit>
        <trans-unit id="a11d808dfbdf148bbb169a6a95255aca3179a47b" translate="yes" xml:space="preserve">
          <source>The range's &lt;code&gt;front&lt;/code&gt; is the interval's &lt;code&gt;begin&lt;/code&gt;. func is used to generate the next &lt;code&gt;front&lt;/code&gt; when &lt;code&gt;popFront&lt;/code&gt; is called. If popFirst is &lt;code&gt;PopFirst.yes&lt;/code&gt;, then &lt;code&gt;popFront&lt;/code&gt; is called before the range is returned (so that &lt;code&gt;front&lt;/code&gt; is a time point which func would generate).</source>
          <target state="translated">範囲の &lt;code&gt;front&lt;/code&gt; は、間隔の &lt;code&gt;begin&lt;/code&gt; です。funcは、 &lt;code&gt;popFront&lt;/code&gt; が呼び出されたときに次の &lt;code&gt;front&lt;/code&gt; を生成するために使用されます。popFirstである場合 &lt;code&gt;PopFirst.yes&lt;/code&gt; 、次いで &lt;code&gt;popFront&lt;/code&gt; は（ように範囲が返される前に呼び出される &lt;code&gt;front&lt;/code&gt; funcが生成する時点です）。</target>
        </trans-unit>
        <trans-unit id="2230a6c9d63e9a6e8252220108f18931ca810d49" translate="yes" xml:space="preserve">
          <source>The range's &lt;code&gt;front&lt;/code&gt; is the interval's &lt;code&gt;end&lt;/code&gt;. func is used to generate the next &lt;code&gt;front&lt;/code&gt; when &lt;code&gt;popFront&lt;/code&gt; is called. If popFirst is &lt;code&gt;PopFirst.yes&lt;/code&gt;, then &lt;code&gt;popFront&lt;/code&gt; is called before the range is returned (so that &lt;code&gt;front&lt;/code&gt; is a time point which func would generate).</source>
          <target state="translated">範囲の &lt;code&gt;front&lt;/code&gt; は、間隔の &lt;code&gt;end&lt;/code&gt; です。funcは、 &lt;code&gt;popFront&lt;/code&gt; が呼び出されたときに次の &lt;code&gt;front&lt;/code&gt; を生成するために使用されます。popFirstである場合 &lt;code&gt;PopFirst.yes&lt;/code&gt; 、次いで &lt;code&gt;popFront&lt;/code&gt; は（ように範囲が返される前に呼び出される &lt;code&gt;front&lt;/code&gt; funcが生成する時点です）。</target>
        </trans-unit>
        <trans-unit id="bc87d893530544a1088c66c1a3ebadf8aa8d14c3" translate="yes" xml:space="preserve">
          <source>The ranges may be different, but they must have compatible element types (i.e. &lt;code&gt;CommonType&lt;/code&gt; must exist for the two element types). The result is a range that offers the weakest capabilities of the two (e.g. &lt;code&gt;ForwardRange&lt;/code&gt; if &lt;code&gt;R1&lt;/code&gt; is a random-access range and &lt;code&gt;R2&lt;/code&gt; is a forward range).</source>
          <target state="translated">範囲は異なる場合がありますが、それらには互換性のある要素タイプが必要です（つまり、2つの要素タイプには &lt;code&gt;CommonType&lt;/code&gt; が存在する必要があります）。結果は、2つのうち最も弱い機能を提供する範囲です（たとえば、 &lt;code&gt;R1&lt;/code&gt; がランダムアクセス範囲で &lt;code&gt;R2&lt;/code&gt; が前方範囲の場合は &lt;code&gt;ForwardRange&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3f573b0cbf92f973f94497f03f6ff76a63fec72f" translate="yes" xml:space="preserve">
          <source>The ranges may be different, but they must have compatible element types. The result is a range that offers the weakest capabilities of all &lt;code&gt;Ranges&lt;/code&gt;.</source>
          <target state="translated">範囲は異なる場合がありますが、それらには互換性のある要素タイプが必要です。その結果、すべての &lt;code&gt;Ranges&lt;/code&gt; 中で最も弱い機能を提供するRangeになります。</target>
        </trans-unit>
        <trans-unit id="b730db3bfe83c0cd05e43737d06094aae7960b40" translate="yes" xml:space="preserve">
          <source>The ranges to compute the intersection for.</source>
          <target state="translated">の交点を計算するための範囲です。</target>
        </trans-unit>
        <trans-unit id="46baca537890237a1942208ed4eade3a2e0fe13d" translate="yes" xml:space="preserve">
          <source>The ranges to compute the union for.</source>
          <target state="translated">和を計算するための範囲です。</target>
        </trans-unit>
        <trans-unit id="5497d81d16c2927140f25a4c1006f37fea2563ca" translate="yes" xml:space="preserve">
          <source>The raw data is statically initialized using the values provided in the class definition. The pointer to the vtbl[] (the array of pointers to virtual functions) is assigned. Constructors are passed fully formed objects for which virtual functions can be called. This operation is equivalent to doing a memory copy of a static version of the object onto the newly allocated one.</source>
          <target state="translated">生データは、クラス定義で指定された値を使用して静的に初期化されます。vtbl[](仮想関数へのポインタの配列)へのポインタが代入されます。コンストラクタには、仮想関数を呼び出すことができる完全に形成されたオブジェクトが渡されます。この操作は、新しく割り当てられたオブジェクトの上に静的バージョンのオブジェクトのメモリコピーを行うのと同じです。</target>
        </trans-unit>
        <trans-unit id="fcae8af2965ab59e0bb8589c5d279780cbfa5e92" translate="yes" xml:space="preserve">
          <source>The raw data is statically initialized using the values provided in the struct definition. This operation is equivalent to doing a memory copy of a static version of the object onto the newly allocated one.</source>
          <target state="translated">生データは、構造体の定義で指定された値を使用して静的に初期化されます。この操作は、新しく割り当てられたオブジェクトに静的バージョンのオブジェクトのメモリ・コピーを行うことと同等です。</target>
        </trans-unit>
        <trans-unit id="b86128a6bd2767acc00fa6def304105cbf1e478d" translate="yes" xml:space="preserve">
          <source>The read end of the pipe.</source>
          <target state="translated">パイプのリードエンド。</target>
        </trans-unit>
        <trans-unit id="13a2374af67fe26dbb9c14a59fb5ce5f9e9d781a" translate="yes" xml:space="preserve">
          <source>The read/write mutex module provides a primitive for maintaining shared read access and mutually exclusive write access.</source>
          <target state="translated">読み取り/書き込みミューテックスモジュールは、共有の読み取りアクセスと相互に排他的な書き込みアクセスを維持するためのプリミティブを提供します。</target>
        </trans-unit>
        <trans-unit id="1ea37ce134dc82d56b80e1186c5f0aadafbf2545" translate="yes" xml:space="preserve">
          <source>The real part of the number.</source>
          <target state="translated">数字の実数部分。</target>
        </trans-unit>
        <trans-unit id="d84af79636d58f1538ce03a4ef706cc4269fc0ca" translate="yes" xml:space="preserve">
          <source>The reason why local symbols are not considered by UFCS, is to avoid unexpected name conflicts. See below problematic examples.</source>
          <target state="translated">UFCSでローカルシンボルを考慮しない理由は、予期せぬ名前の衝突を避けるためです。以下の問題のある例を参照してください。</target>
        </trans-unit>
        <trans-unit id="6e1a9e9d57c1e11e3c0d69a36fca45727647f054" translate="yes" xml:space="preserve">
          <source>The reason why parsing the UUID string failed (if known)</source>
          <target state="translated">UUID 文字列の解析に失敗した理由 (わかっている場合)</target>
        </trans-unit>
        <trans-unit id="444ce1c54b9e6e4aeb187c02bb491ead21cc3157" translate="yes" xml:space="preserve">
          <source>The received message. If &lt;code&gt;T.length&lt;/code&gt; is greater than one, the message will be packed into a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">受信したメッセージ。 &lt;code&gt;T.length&lt;/code&gt; が1より大きい場合、メッセージは&lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; に&lt;/a&gt;パックされます。</target>
        </trans-unit>
        <trans-unit id="ca01b3f617c720041b0621fa546228daeb7a4c84" translate="yes" xml:space="preserve">
          <source>The received message. If &lt;code&gt;T&lt;/code&gt; has more than one entry, the message will be packed into a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">受信したメッセージ。場合 &lt;code&gt;T&lt;/code&gt; は、複数のエントリを持っている、メッセージがにパックされます&lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="629439e6d0394e525c1da0e460386c227bde37f1" translate="yes" xml:space="preserve">
          <source>The recommended default type for set of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt;. For details, see the current implementation: &lt;a href=&quot;#InversionList&quot;&gt;&lt;code&gt;InversionList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Code%20point&quot;&gt;コードポイントの&lt;/a&gt;セットに推奨されるデフォルトのタイプ。詳細については、現在の実装：&lt;a href=&quot;#InversionList&quot;&gt; &lt;code&gt;InversionList&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a1dc42bd6a98f128cb04e650caf0c66b2c441a15" translate="yes" xml:space="preserve">
          <source>The recommended solution (see Unicode Implementation Guidelines) is using multi-stage tables that are an implementation of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Trie&quot;&gt;Trie&lt;/a&gt; data structure with integer keys and a fixed number of stages. For the remainder of the section this will be called a fixed trie. The following describes a particular implementation that is aimed for the speed of access at the expense of ideal size savings.</source>
          <target state="translated">推奨されるソリューション（Unicode実装ガイドラインを参照）は、整数キーと固定数のステージを持つ&lt;a href=&quot;http://en.wikipedia.org/wiki/Trie&quot;&gt;Trie&lt;/a&gt;データ構造の実装であるマルチステージテーブルを使用することです。このセクションの残りの部分では、これを固定トライと呼びます。以下では、理想的なサイズの節約を犠牲にしてアクセスの速度を目的とする特定の実装について説明します。</target>
        </trans-unit>
        <trans-unit id="3ed788139c7014abe2c559b9a334cb4611135a55" translate="yes" xml:space="preserve">
          <source>The recommended solution (see Unicode Implementation Guidelines) is using multi-stage tables that are an implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Trie&quot;&gt;Trie&lt;/a&gt; data structure with integer keys and a fixed number of stages. For the remainder of the section this will be called a fixed trie. The following describes a particular implementation that is aimed for the speed of access at the expense of ideal size savings.</source>
          <target state="translated">推奨される解決策（Unicode実装ガイドラインを参照）は、整数キーと固定数のステージを持つ&lt;a href=&quot;https://en.wikipedia.org/wiki/Trie&quot;&gt;Trie&lt;/a&gt;データ構造の実装であるマルチステージテーブルを使用することです。セクションの残りの部分では、これは固定トライと呼ばれます。以下では、理想的なサイズの節約を犠牲にしてアクセスの速度を目的とした特定の実装について説明します。</target>
        </trans-unit>
        <trans-unit id="64d2cded1f6173c486fb7ad21ff19a0763451581" translate="yes" xml:space="preserve">
          <source>The recommended type of &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; to represent [a, b) intervals of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt;. As used in &lt;a href=&quot;#InversionList&quot;&gt;&lt;code&gt;InversionList&lt;/code&gt;&lt;/a&gt;. Any interval type should pass &lt;a href=&quot;#isIntegralPair&quot;&gt;&lt;code&gt;isIntegralPair&lt;/code&gt;&lt;/a&gt; trait.</source>
          <target state="translated">[a、b）&lt;a href=&quot;#Code%20point&quot;&gt;コードポイントの&lt;/a&gt;間隔を表すために推奨される&lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; の&lt;/a&gt;タイプ。&lt;a href=&quot;#InversionList&quot;&gt; &lt;code&gt;InversionList&lt;/code&gt; で&lt;/a&gt;使用されます。どの間隔タイプでも&lt;a href=&quot;#isIntegralPair&quot;&gt; &lt;code&gt;isIntegralPair&lt;/code&gt; &lt;/a&gt;トレイトを渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="859ae610f623e658d3afadb3f75618929c558560" translate="yes" xml:space="preserve">
          <source>The recommended use of &lt;code&gt;KRRegion&lt;/code&gt; is as a</source>
          <target state="translated">&lt;code&gt;KRRegion&lt;/code&gt; の推奨される使用法は、</target>
        </trans-unit>
        <trans-unit id="388d2ad6c415253a61a360bde9d489b23f6dc8d0" translate="yes" xml:space="preserve">
          <source>The ref-ness of a function is determined from all &lt;a href=&quot;statement#ReturnStatement&quot;&gt;&lt;i&gt;ReturnStatement&lt;/i&gt;&lt;/a&gt;s in the function body:</source>
          <target state="translated">関数のref-nessは、関数本体のすべての&lt;a href=&quot;statement#ReturnStatement&quot;&gt;&lt;i&gt;ReturnStatement&lt;/i&gt;&lt;/a&gt;から決定されます。</target>
        </trans-unit>
        <trans-unit id="3b502b2fed948d53834e6a08aa36762dc04287b2" translate="yes" xml:space="preserve">
          <source>The reference label must match a reference defined elsewhere. This may be a D symbol in scope of the source code being documented, like &lt;code&gt;[Object]&lt;/code&gt; in the example above, or it may be an explicit reference that is defined in the same documentation comment, like &lt;code&gt;[ref]&lt;/code&gt; in the example above. In the example both instances of &lt;code&gt;[ref]&lt;/code&gt; in item &lt;code&gt;1.&lt;/code&gt; will be replaced with the URL and title text from the matching definition at the bottom of the example. The first link will read &lt;code&gt;reference link&lt;/code&gt; and the second will read &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="translated">参照ラベルは、他の場所で定義された参照と一致する必要があります。これは、上記の例の &lt;code&gt;[Object]&lt;/code&gt; のように、ドキュメント化されているソースコードの範囲内のDシンボルである場合と、上記の例の &lt;code&gt;[ref]&lt;/code&gt; のように、同じドキュメントコメントで定義されている明示的な参照である場合があります。この例では、項目 &lt;code&gt;1.&lt;/code&gt; &lt;code&gt;[ref]&lt;/code&gt; の両方のインスタンスが、例の下部にある一致する定義のURLとタイトルテキストに置き換えられます。最初のリンクは &lt;code&gt;reference link&lt;/code&gt; リンクを読み取り、2番目のリンクは &lt;code&gt;ref&lt;/code&gt; を読み取ります。</target>
        </trans-unit>
        <trans-unit id="c7f3a52223d62265f3e1ec0b1d084d2cc36a6550" translate="yes" xml:space="preserve">
          <source>The region only stores three pointers, corresponding to the current position in the store and the limits. One allocation entails rounding up the allocation size for alignment purposes, bumping the current pointer, and comparing it against the limit.</source>
          <target state="translated">領域は、ストア内の現在位置と限界値に対応する 3 つのポインタのみを格納します。1回のアロケーションでは、アラインメントのためにアロケーションサイズを丸め、現在のポインタをバンプし、リミットと比較します。</target>
        </trans-unit>
        <trans-unit id="8dfea884780d568afe3690e3e3875bf9d38d17dd" translate="yes" xml:space="preserve">
          <source>The registry does not perform synchronization, as registration is assumed to be executed serially, as is the case for C constructors.</source>
          <target state="translated">レジストリは、Cのコンストラクタの場合と同様、登録はシリアルに実行されることを前提としているため、同期を行いません。</target>
        </trans-unit>
        <trans-unit id="323d86762a22443df4223066c5d79a8182348cc7" translate="yes" xml:space="preserve">
          <source>The rehashed associative array.</source>
          <target state="translated">蒸し返された連想配列。</target>
        </trans-unit>
        <trans-unit id="2287a637460b49ec8f0775da73953a50ae5c2dbd" translate="yes" xml:space="preserve">
          <source>The relative path.</source>
          <target state="translated">相対パス。</target>
        </trans-unit>
        <trans-unit id="6288b454d7838d0a858531ccb0a8c1a5187d7261" translate="yes" xml:space="preserve">
          <source>The removed &lt;code&gt;Logger&lt;/code&gt;.</source>
          <target state="translated">削除された &lt;code&gt;Logger&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c0fe435252d4242a9ba6f628f9c2050e5381799" translate="yes" xml:space="preserve">
          <source>The replacement text is recursively scanned for more macros. If a macro is recursively encountered, with no argument or with the same argument text as the enclosing macro, it is replaced with no text. Macro invocations that cut across replacement text boundaries are not expanded. If the macro name is undefined, the replacement text has no characters in it. If a &amp;amp;dollar;(NAME) is desired to exist in the output without being macro expanded, the &amp;amp;dollar; should be &lt;a href=&quot;#punctuation_escapes&quot;&gt; backslash-escaped&lt;/a&gt;: &lt;code&gt;\$&lt;/code&gt;.</source>
          <target state="translated">置換テキストは再帰的にスキャンされ、より多くのマクロが検索されます。マクロが再帰的に検出され、引数がないか、囲んでいるマクロと同じ引数のテキストがある場合、そのマクロはテキストなしで置き換えられます。置換テキストの境界を越えるマクロ呼び出しは拡張されません。マクロ名が未定義の場合、置換テキストには文字が含まれていません。＆dollar;（NAME）をマクロ展開せずに出力に含める場合、＆dollar; &lt;a href=&quot;#punctuation_escapes&quot;&gt;バックスラッシュでエスケープする&lt;/a&gt;必要があります： &lt;code&gt;\$&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00c0559f793b29523699536174f193f79d1404f9" translate="yes" xml:space="preserve">
          <source>The representation of the passed string.</source>
          <target state="translated">渡された文字列の表現。</target>
        </trans-unit>
        <trans-unit id="541a2ee308f80899ed39d343b6df8bc566dc23af" translate="yes" xml:space="preserve">
          <source>The requested type. The currently stored value must implicitly convert to the requested type, in fact &lt;code&gt;DecayStaticToDynamicArray!T&lt;/code&gt;. If an implicit conversion is not possible, throws a &lt;code&gt;VariantException&lt;/code&gt;.</source>
          <target state="translated">要求されたタイプ。現在格納されている値は、要求された型、実際には &lt;code&gt;DecayStaticToDynamicArray!T&lt;/code&gt; に暗黙的に変換する必要があります。暗黙的な変換が不可能な場合は、 &lt;code&gt;VariantException&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="5eb7b072c5ec5c51e2bc9f0c47309355a93d189e" translate="yes" xml:space="preserve">
          <source>The required value.</source>
          <target state="translated">必要な値です。</target>
        </trans-unit>
        <trans-unit id="2b92c124327023d2112fc02de9225ba21a0e356f" translate="yes" xml:space="preserve">
          <source>The rest of the EH data can be placed anywhere, it is immutable.</source>
          <target state="translated">残りのEHデータはどこにでも配置でき、不変です。</target>
        </trans-unit>
        <trans-unit id="bc76ec74ecd985115be5a95df44e330a29c95a31" translate="yes" xml:space="preserve">
          <source>The result cannot be represented exactly, so rounding occurred.</source>
          <target state="translated">結果を正確に表すことができないため、丸めが発生しました。</target>
        </trans-unit>
        <trans-unit id="ab324d21f7bc55d7dd8b6c95008f59bdf991ab91" translate="yes" xml:space="preserve">
          <source>The result is &lt;code&gt;&quot;true&quot;&lt;/code&gt; or &lt;code&gt;&quot;false&quot;&lt;/code&gt;.</source>
          <target state="translated">結果は &lt;code&gt;&quot;true&quot;&lt;/code&gt; または &lt;code&gt;&quot;false&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b4130bb4d8bac0fbef0c07bb06c97970f537d8b6" translate="yes" xml:space="preserve">
          <source>The result is [s&lt;sub&gt;0&lt;/sub&gt;, s&lt;sub&gt;1&lt;/sub&gt;, ...] where s&lt;sub&gt;n&lt;/sub&gt; is the nth element formatted with the default format.</source>
          <target state="translated">結果は[s &lt;sub&gt;0&lt;/sub&gt;、s &lt;sub&gt;1&lt;/sub&gt;、...]です。ここで、s &lt;sub&gt;n&lt;/sub&gt;はデフォルトのフォーマットでフォーマットされたn番目の要素です。</target>
        </trans-unit>
        <trans-unit id="2b142e927d8266a5d73b4c96f242e530946b4181" translate="yes" xml:space="preserve">
          <source>The result is reasonable even if the programmer fails to check for errors.</source>
          <target state="translated">プログラマがエラーチェックに失敗しても結果は妥当です。</target>
        </trans-unit>
        <trans-unit id="e6fee708ae88c1f8ca73e67b83e15b2edc455c01" translate="yes" xml:space="preserve">
          <source>The result is reasonable result even if the programmer fails to check for errors.</source>
          <target state="translated">プログラマがエラーチェックに失敗しても、妥当な結果が得られます。</target>
        </trans-unit>
        <trans-unit id="5df04c97a049ab6feec7de9282693846423b4f8b" translate="yes" xml:space="preserve">
          <source>The result is the equivalent of what the initializer would look like for the contents of the associative array, e.g.: [&quot;red&quot; : 10, &quot;blue&quot; : 20].</source>
          <target state="translated">この結果は、連想配列の内容を初期化したものと同等のものとなります。[&quot;red&quot;:10,&quot;blue&quot;:20].</target>
        </trans-unit>
        <trans-unit id="08ac164a7aed36036f9bcf755150a74df3d7b24f" translate="yes" xml:space="preserve">
          <source>The result is the string converted to UTF-8. A</source>
          <target state="translated">結果は文字列をUTF-8に変換したものです。A</target>
        </trans-unit>
        <trans-unit id="1509a90746b95e562f0978b9e4493748f60d91cb" translate="yes" xml:space="preserve">
          <source>The result is the string returned from the class instance's &lt;b&gt;.toString()&lt;/b&gt; method. A</source>
          <target state="translated">結果は、クラスインスタンスの&lt;b&gt;.toString（）&lt;/b&gt;メソッドから返された文字列です。あ</target>
        </trans-unit>
        <trans-unit id="778aba0a364d09c18b371bc8036e82626d093a0a" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;takeExactly&lt;/code&gt; is identical to that of &lt;a href=&quot;#take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; in cases where the original range defines &lt;code&gt;length&lt;/code&gt; or is infinite.</source>
          <target state="translated">&lt;code&gt;takeExactly&lt;/code&gt; の結果は、元の範囲が &lt;code&gt;length&lt;/code&gt; 定義するか無限である場合の&lt;a href=&quot;#take&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt;の結果と同じです。</target>
        </trans-unit>
        <trans-unit id="07564cb52ad1e727fc81a3311ff06a2d773285ae" translate="yes" xml:space="preserve">
          <source>The result of a call to getAttr after the specified bits have been cleared.</source>
          <target state="translated">指定されたビットがクリアされた後に getAttr を呼び出した結果。</target>
        </trans-unit>
        <trans-unit id="f30cfdc760b36139b0f53b5d0be507ea3d824ed7" translate="yes" xml:space="preserve">
          <source>The result of a call to getAttr after the specified bits have been set.</source>
          <target state="translated">指定されたビットが設定された後に getAttr を呼び出した結果。</target>
        </trans-unit>
        <trans-unit id="445b97c22b054bdd6ff54c4dae46c9df7f4357c6" translate="yes" xml:space="preserve">
          <source>The result of the &lt;code&gt;getopt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;getopt&lt;/code&gt; 関数の結果。</target>
        </trans-unit>
        <trans-unit id="c4e35be57e8c5a96f93fd5bad1cb28bc557187a1" translate="yes" xml:space="preserve">
          <source>The result of the cast operation.</source>
          <target state="translated">キャスト操作の結果です。</target>
        </trans-unit>
        <trans-unit id="83715d44bc2b7900f8b6419b6c4fbc003acad08e" translate="yes" xml:space="preserve">
          <source>The result of the comparison (negative if &lt;code&gt;lhs &amp;lt; rhs&lt;/code&gt;, positive if &lt;code&gt; lhs &amp;gt; rhs&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; if the values are equal)</source>
          <target state="translated">比較の結果（負の場合 &lt;code&gt;lhs &amp;lt; rhs&lt;/code&gt; 、正なら &lt;code&gt; lhs &amp;gt; rhs&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; の値が等しい場合）</target>
        </trans-unit>
        <trans-unit id="b2ab3e5031cd5a46b28a9645ebcd2ff7f110159a" translate="yes" xml:space="preserve">
          <source>The result of the comparison, &lt;code&gt;true&lt;/code&gt; if the values are equal</source>
          <target state="translated">比較の結果。値が等しい場合は &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c6e42e7ac37e1c83ed4b193d1c4849e41daad91" translate="yes" xml:space="preserve">
          <source>The result of the comparison.</source>
          <target state="translated">比較した結果です。</target>
        </trans-unit>
        <trans-unit id="6c6d52fd3aff83619b0b5496c6e3c7be89c2a3aa" translate="yes" xml:space="preserve">
          <source>The result of the expression if no exception is thrown.</source>
          <target state="translated">例外がスローされなかった場合の式の結果。</target>
        </trans-unit>
        <trans-unit id="0c56ce95759c8e42c05e176cc9b231a6a3180930" translate="yes" xml:space="preserve">
          <source>The result of the operation, which is the same as the built-in operator</source>
          <target state="translated">演算結果は、組み込みの演算子と同じ</target>
        </trans-unit>
        <trans-unit id="5b1c264300cd8b658cc8b4e315b7758a06a23af7" translate="yes" xml:space="preserve">
          <source>The result of the operation.</source>
          <target state="translated">操作の結果です。</target>
        </trans-unit>
        <trans-unit id="9d8e130938ba904bc8f047659f58c659ed670a0b" translate="yes" xml:space="preserve">
          <source>The result of this expression will be discarded. Print error messages if the operation has no side effects (and hence is meaningless).</source>
          <target state="translated">この式の結果は破棄されます。操作が副作用を伴わない(したがって意味がない)場合は、エラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="2a7cfc7639682da470adfb6b183264f1a3b8552c" translate="yes" xml:space="preserve">
          <source>The result type of an</source>
          <target state="translated">の結果タイプは</target>
        </trans-unit>
        <trans-unit id="4056040f4fa407b267fad8cbca77b5fc61b11543" translate="yes" xml:space="preserve">
          <source>The resulting addresses will be used in a call to &lt;code&gt;Socket.bind&lt;/code&gt;.</source>
          <target state="translated">結果のアドレスは、 &lt;code&gt;Socket.bind&lt;/code&gt; の呼び出しで使用されます。</target>
        </trans-unit>
        <trans-unit id="3b20f209f4a7f010b51d8af08450b0f594e3ca06" translate="yes" xml:space="preserve">
          <source>The resulting center-justified string. The returned string is GC-allocated. To avoid GC allocation, use &lt;a href=&quot;#centerJustifier&quot;&gt;&lt;code&gt;centerJustifier&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">結果の中央揃え文字列。返される文字列は、GCによって割り当てられます。GCの割り当てを回避するには、代わりに&lt;a href=&quot;#centerJustifier&quot;&gt; &lt;code&gt;centerJustifier&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="6de191dd7ab6e3535ad839e47c65dfd4fc76b1d8" translate="yes" xml:space="preserve">
          <source>The resulting index.</source>
          <target state="translated">結果のインデックス。</target>
        </trans-unit>
        <trans-unit id="3934e1c05473de8755d2bda617c6973f102e169c" translate="yes" xml:space="preserve">
          <source>The return code of the operation. The value stored in val should be used only if the return value is &lt;code&gt;etc.c.curl.CurlInfo.ok&lt;/code&gt;.</source>
          <target state="translated">操作の戻りコード。valに格納されている値は、戻り値が &lt;code&gt;etc.c.curl.CurlInfo.ok&lt;/code&gt; の場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="1da37adfbfe4961b78a217ba2c3b5022d249608b" translate="yes" xml:space="preserve">
          <source>The return expression associated with the first test expression that made the predicate yield true, or the default return expression if no test expression matched.</source>
          <target state="translated">述語を真にした最初のテスト式に関連付けられた戻り値の式、または一致するテスト式がない場合のデフォルトの戻り値の式。</target>
        </trans-unit>
        <trans-unit id="96d68b6363dece3bf1b664aecfe8cf00504e56f0" translate="yes" xml:space="preserve">
          <source>The return type (int or long). It defaults to time_t, which is normally 32 bits on a 32-bit system and 64 bits on a 64-bit system.</source>
          <target state="translated">戻り値の型(intまたはlong)。デフォルトはtime_tで、通常32ビットシステムでは32ビット、64ビットシステムでは64ビットです。</target>
        </trans-unit>
        <trans-unit id="205ac1a8649e05600dd566c06cc715bf690a04c6" translate="yes" xml:space="preserve">
          <source>The return type must not have unshared aliasing unless &lt;code&gt;fun&lt;/code&gt; is &lt;code&gt;pure&lt;/code&gt; or the &lt;code&gt;Task&lt;/code&gt; is executed via &lt;code&gt;executeInNewThread&lt;/code&gt; instead of using a &lt;code&gt;TaskPool&lt;/code&gt;.</source>
          <target state="translated">しない限り、戻り値の型は非共有エイリアシングを持っていなければなら &lt;code&gt;fun&lt;/code&gt; ある &lt;code&gt;pure&lt;/code&gt; または &lt;code&gt;Task&lt;/code&gt; 介して実行される &lt;code&gt;executeInNewThread&lt;/code&gt; 代わりに使用するのでは &lt;code&gt;TaskPool&lt;/code&gt; というの。</target>
        </trans-unit>
        <trans-unit id="0e9168599ed0b4047c1160546ea0dbeb54368257" translate="yes" xml:space="preserve">
          <source>The return type of the error handler.</source>
          <target state="translated">エラーハンドラの戻り値の型。</target>
        </trans-unit>
        <trans-unit id="97a463467304a89d6cd8cb9cc6d419fcfa020151" translate="yes" xml:space="preserve">
          <source>The return type of the function called by this &lt;code&gt;Task&lt;/code&gt;. This can be &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Task&lt;/code&gt; によって呼び出される関数の戻りの型。これは &lt;code&gt;void&lt;/code&gt; なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f5cb9f689236bc6a0892c16310f01988eb2264f8" translate="yes" xml:space="preserve">
          <source>The return type of tryVisit is deduced from the visiting functions and must be the same across all overloads.</source>
          <target state="translated">tryVisitの戻り値の型は訪問関数から推測され、すべてのオーバーロードで同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="1337a5d1a9830872413420563b85bf03297ab386" translate="yes" xml:space="preserve">
          <source>The return type of visit is deduced from the visiting functions and must be the same across all overloads.</source>
          <target state="translated">訪問の戻り値のタイプは訪問関数から推測され、すべてのオーバーロードで同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="1ae63b720e25e931777a9598eac602b1cc909af8" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; の戻り値</target>
        </trans-unit>
        <trans-unit id="463c16879da8ce6d09697a58e7475146e16150d1" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;__traits(getParameterStorageClasses)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;__traits(getParameterStorageClasses)&lt;/code&gt; の戻り値</target>
        </trans-unit>
        <trans-unit id="c060f61f5611e03952bbbab3e92b4fea17da134a" translate="yes" xml:space="preserve">
          <source>The return value of the function is cached, so the procedures described below will only be performed the first time the function is called. All subsequent runs will return the same string, regardless of whether environment variables and directory structures have changed in the meantime.</source>
          <target state="translated">関数の戻り値はキャッシュされているので、以下に説明する手順は、その関数が最初に呼び出された時にのみ実行されます。それ以降のすべての実行は、その間に環境変数やディレクトリ構造が変更されたかどうかに関わらず、同じ文字列を返します。</target>
        </trans-unit>
        <trans-unit id="1adffc51f8315eaf8be8bf12efa55eccecc130de" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;#File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; wraps &lt;a href=&quot;core_stdc_stdio#stderr&quot;&gt;&lt;code&gt;core.stdc.stdio.stderr&lt;/code&gt;&lt;/a&gt;, and is therefore thread global. Reassigning &lt;code&gt;stderr&lt;/code&gt; to a different &lt;code&gt;File&lt;/code&gt; must be done in a single-threaded or locked context in order to avoid race conditions.</source>
          <target state="translated">返される&lt;a href=&quot;#File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;core_stdc_stdio#stderr&quot;&gt; &lt;code&gt;core.stdc.stdio.stderr&lt;/code&gt; を&lt;/a&gt;ラップするため、スレッドグローバルです。 &lt;code&gt;stderr&lt;/code&gt; を別の &lt;code&gt;File&lt;/code&gt; 再割り当てするには、競合状態を回避するために、シングルスレッドまたはロックされたコンテキストで実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="25646bf2b751680fc9f348ccd8f6fea18202d8c1" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;#File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; wraps &lt;a href=&quot;core_stdc_stdio#stdin&quot;&gt;&lt;code&gt;core.stdc.stdio.stdin&lt;/code&gt;&lt;/a&gt;, and is therefore thread global. Reassigning &lt;code&gt;stdin&lt;/code&gt; to a different &lt;code&gt;File&lt;/code&gt; must be done in a single-threaded or locked context in order to avoid race conditions.</source>
          <target state="translated">返される&lt;a href=&quot;#File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;core_stdc_stdio#stdin&quot;&gt; &lt;code&gt;core.stdc.stdio.stdin&lt;/code&gt; を&lt;/a&gt;ラップするため、スレッドグローバルです。 &lt;code&gt;stdin&lt;/code&gt; の別の &lt;code&gt;File&lt;/code&gt; への再割り当ては、競合状態を回避するために、シングルスレッドまたはロックされたコンテキストで実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="70b78c3af2ae7539b55d9cf5b58f2854c458dd90" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;#File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; wraps &lt;a href=&quot;core_stdc_stdio#stdout&quot;&gt;&lt;code&gt;core.stdc.stdio.stdout&lt;/code&gt;&lt;/a&gt;, and is therefore thread global. Reassigning &lt;code&gt;stdout&lt;/code&gt; to a different &lt;code&gt;File&lt;/code&gt; must be done in a single-threaded or locked context in order to avoid race conditions.</source>
          <target state="translated">返される&lt;a href=&quot;#File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;core_stdc_stdio#stdout&quot;&gt; &lt;code&gt;core.stdc.stdio.stdout&lt;/code&gt; を&lt;/a&gt;ラップするため、スレッドグローバルです。 &lt;code&gt;stdout&lt;/code&gt; を別の &lt;code&gt;File&lt;/code&gt; 再割り当てするには、競合状態を回避するために、シングルスレッドまたはロックされたコンテキストで実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="818fa28d06533d229f1e780afce11dd92bba71cd" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;#File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; wraps &lt;a href=&quot;core_stdio#stderr&quot;&gt;&lt;code&gt;core.stdio.stderr&lt;/code&gt;&lt;/a&gt;, and is therefore thread global. Reassigning &lt;code&gt;stderr&lt;/code&gt; to a different &lt;code&gt;File&lt;/code&gt; must be done in a single-threaded or locked context in order to avoid race conditions.</source>
          <target state="translated">返される&lt;a href=&quot;#File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;core_stdio#stderr&quot;&gt; &lt;code&gt;core.stdio.stderr&lt;/code&gt; を&lt;/a&gt;ラップするため、スレッドグローバルです。 &lt;code&gt;stderr&lt;/code&gt; を別の &lt;code&gt;File&lt;/code&gt; 再割り当てするには、競合状態を回避するために、シングルスレッドまたはロックされたコンテキストで行う必要があります。</target>
        </trans-unit>
        <trans-unit id="c5c6e553a95738c70b1b18bed8de44ea5bcf8eb1" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;#File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; wraps &lt;a href=&quot;core_stdio#stdin&quot;&gt;&lt;code&gt;core.stdio.stdin&lt;/code&gt;&lt;/a&gt;, and is therefore thread global. Reassigning &lt;code&gt;stdin&lt;/code&gt; to a different &lt;code&gt;File&lt;/code&gt; must be done in a single-threaded or locked context in order to avoid race conditions.</source>
          <target state="translated">返される&lt;a href=&quot;#File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;core_stdio#stdin&quot;&gt; &lt;code&gt;core.stdio.stdin&lt;/code&gt; を&lt;/a&gt;ラップするため、スレッドグローバルです。 &lt;code&gt;stdin&lt;/code&gt; を別の &lt;code&gt;File&lt;/code&gt; 再割り当てするには、競合状態を回避するために、シングルスレッドまたはロックされたコンテキストで行う必要があります。</target>
        </trans-unit>
        <trans-unit id="58bd0e7417109f330774ab518ccd7daa1f03d122" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;#File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; wraps &lt;a href=&quot;core_stdio#stdout&quot;&gt;&lt;code&gt;core.stdio.stdout&lt;/code&gt;&lt;/a&gt;, and is therefore thread global. Reassigning &lt;code&gt;stdout&lt;/code&gt; to a different &lt;code&gt;File&lt;/code&gt; must be done in a single-threaded or locked context in order to avoid race conditions.</source>
          <target state="translated">返される&lt;a href=&quot;#File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;core_stdio#stdout&quot;&gt; &lt;code&gt;core.stdio.stdout&lt;/code&gt; を&lt;/a&gt;ラップするため、スレッドグローバルです。 &lt;code&gt;stdout&lt;/code&gt; を別の &lt;code&gt;File&lt;/code&gt; 再割り当てするには、競合状態を回避するために、シングルスレッドまたはロックされたコンテキストで行う必要があります。</target>
        </trans-unit>
        <trans-unit id="ac381e0220e927fc50320b0674e141c6fbd265c5" translate="yes" xml:space="preserve">
          <source>The returned object additionally supports &lt;a href=&quot;#unwrap&quot;&gt;&lt;code&gt;unwrap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返されたオブジェクトはさらに&lt;a href=&quot;#unwrap&quot;&gt; &lt;code&gt;unwrap&lt;/code&gt; を&lt;/a&gt;サポートします。</target>
        </trans-unit>
        <trans-unit id="6492e8cd4172777485864f95c54fa9ab563046c6" translate="yes" xml:space="preserve">
          <source>The returned path is relative to &lt;code&gt;base&lt;/code&gt;, which is by default taken to be the current working directory. If specified, &lt;code&gt;base&lt;/code&gt; must be an absolute path, and it is always assumed to refer to a directory. If &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;base&lt;/code&gt; refer to the same directory, the function returns &lt;code&gt;.&lt;/code&gt;.</source>
          <target state="translated">返されるパスは &lt;code&gt;base&lt;/code&gt; からの相対パスで、デフォルトでは現在の作業ディレクトリと見なされます。指定する場合、 &lt;code&gt;base&lt;/code&gt; は絶対パスである必要があり、常にディレクトリを参照すると見なされます。 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;base&lt;/code&gt; が同じディレクトリを参照している場合、関数はを返します &lt;code&gt;.&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="27a61535d29f02d1215deba5ffbffddc1e97e7db" translate="yes" xml:space="preserve">
          <source>The returned path is relative to &lt;code&gt;base&lt;/code&gt;, which is usually the current working directory. &lt;code&gt;base&lt;/code&gt; must be an absolute path, and it is always assumed to refer to a directory. If &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;base&lt;/code&gt; refer to the same directory, the function returns &lt;code&gt;'.'&lt;/code&gt;.</source>
          <target state="translated">返されるパスは &lt;code&gt;base&lt;/code&gt; からの相対パスです。これは通常、現在の作業ディレクトリです。 &lt;code&gt;base&lt;/code&gt; は絶対パスである必要があり、常にディレクトリを参照すると見なされます。 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;base&lt;/code&gt; が同じディレクトリを参照している場合、関数は &lt;code&gt;'.'&lt;/code&gt; 返します。。</target>
        </trans-unit>
        <trans-unit id="e221dcc2a55e6ae3990cde11462a83ddb8c59e57" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;a href=&quot;#ticksToNSecs&quot;&gt;&lt;code&gt;ticksToNSecs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ticksToNSecs&quot;&gt; &lt;code&gt;ticksToNSecs&lt;/code&gt; &lt;/a&gt;の逆です。</target>
        </trans-unit>
        <trans-unit id="c6ea2f4408254d943e5179ee3bbfade7f366fbe9" translate="yes" xml:space="preserve">
          <source>The right part of &lt;code&gt;r&lt;/code&gt; after partitioning.  If &lt;code&gt;ss == SwapStrategy.stable&lt;/code&gt;, &lt;code&gt;partition&lt;/code&gt; preserves the relative ordering of all elements &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; in &lt;code&gt;r&lt;/code&gt; for which &lt;code&gt;predicate(a) == predicate(b)&lt;/code&gt;. If &lt;code&gt;ss == SwapStrategy.semistable&lt;/code&gt;, &lt;code&gt;partition&lt;/code&gt; preserves the relative ordering of all elements &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; in the left part of &lt;code&gt;r&lt;/code&gt; for which &lt;code&gt;predicate(a) == predicate(b)&lt;/code&gt;.</source>
          <target state="translated">分割後の &lt;code&gt;r&lt;/code&gt; の右側の部分。場合 &lt;code&gt;ss == SwapStrategy.stable&lt;/code&gt; 、 &lt;code&gt;partition&lt;/code&gt; すべての要素の相対的な順序を保存、 &lt;code&gt;b&lt;/code&gt; における &lt;code&gt;r&lt;/code&gt; れる &lt;code&gt;predicate(a) == predicate(b)&lt;/code&gt; 。場合 &lt;code&gt;ss == SwapStrategy.semistable&lt;/code&gt; 、 &lt;code&gt;partition&lt;/code&gt; すべての要素の相対的な順序を保存、 &lt;code&gt;b&lt;/code&gt; の左側に &lt;code&gt;r&lt;/code&gt; れる &lt;code&gt;predicate(a) == predicate(b)&lt;/code&gt; 。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="74483ebbb544d307348c8757c03b1bb648258bec" translate="yes" xml:space="preserve">
          <source>The right-hand side of the comparison</source>
          <target state="translated">比較の右側</target>
        </trans-unit>
        <trans-unit id="0e9a080e28a8d91db65b56c19e48812d639eb325" translate="yes" xml:space="preserve">
          <source>The right-hand side of the comparison for equality</source>
          <target state="translated">平等のための比較の右側</target>
        </trans-unit>
        <trans-unit id="82b77c8515d584392179571806e80acab0df8e0e" translate="yes" xml:space="preserve">
          <source>The right-hand side of the comparison for ordering</source>
          <target state="translated">注文時の比較の右側</target>
        </trans-unit>
        <trans-unit id="ce77342cf014dfbdd37bba884529bb7b1ea8eb76" translate="yes" xml:space="preserve">
          <source>The right-hand side of the operator</source>
          <target state="translated">演算子の右側</target>
        </trans-unit>
        <trans-unit id="9e41eb8c1a87bc5b03b6c14f9d03728097407757" translate="yes" xml:space="preserve">
          <source>The right-hand side of the operator (left-hand side is &lt;code&gt;this&lt;/code&gt;)</source>
          <target state="translated">演算子の右側（左側は &lt;code&gt;this&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="44c8baae8e4b1cafc92c8edb1f1a4bc6398dfd3a" translate="yes" xml:space="preserve">
          <source>The right-hand side operand</source>
          <target state="translated">右側のオペランド</target>
        </trans-unit>
        <trans-unit id="ac11224128b70935424423a8a77fd6fd68210ba1" translate="yes" xml:space="preserve">
          <source>The right-hand side operand (&lt;code&gt;Rhs&lt;/code&gt; is the first argument to &lt;code&gt;Checked&lt;/code&gt;)</source>
          <target state="translated">右側のオペランド（ &lt;code&gt;Rhs&lt;/code&gt; は &lt;code&gt;Checked&lt;/code&gt; の最初の引数です）</target>
        </trans-unit>
        <trans-unit id="0295cf674c21bae7e541254ba48b44bd641bdb8f" translate="yes" xml:space="preserve">
          <source>The right-hand side type in the assignment, after the operation has been computed</source>
          <target state="translated">演算が計算された後の代入の右側のタイプ</target>
        </trans-unit>
        <trans-unit id="718e1f58f1f55d464000d479f6fd938c33906894" translate="yes" xml:space="preserve">
          <source>The right-hand side type in the operator</source>
          <target state="translated">演算子の右側のタイプ</target>
        </trans-unit>
        <trans-unit id="a73d548c23060689342ba25b61016e797895c8bb" translate="yes" xml:space="preserve">
          <source>The right-hand side type involved in the operator</source>
          <target state="translated">演算子に関与する右側型</target>
        </trans-unit>
        <trans-unit id="e3fed9dabe35a6b8579a8bd12124493c72510d8b" translate="yes" xml:space="preserve">
          <source>The right-hand side value in the assignment, after the operator has been evaluated</source>
          <target state="translated">演算子が評価された後の代入の右側の値</target>
        </trans-unit>
        <trans-unit id="cd88512e1e583ed536b72443b9651f20abee0041" translate="yes" xml:space="preserve">
          <source>The routine called when a message is sent to a full mailbox.</source>
          <target state="translated">メッセージがフルメールボックスに送信されたときに呼び出されるルーチン。</target>
        </trans-unit>
        <trans-unit id="b66d87a6c0e08abdd807f5a483f6da0a435298a3" translate="yes" xml:space="preserve">
          <source>The routines and algorithms are derived from the</source>
          <target state="translated">ルーチンやアルゴリズムは</target>
        </trans-unit>
        <trans-unit id="89f0c0488274c89f59fab106ec127c844449805c" translate="yes" xml:space="preserve">
          <source>The rules for strings are the usual for literals: If it can fit in an &lt;code&gt;int&lt;/code&gt;, it is an &lt;code&gt;int&lt;/code&gt;. Otherwise, it is a &lt;code&gt;long&lt;/code&gt;. But, if the user specifically asks for a &lt;code&gt;long&lt;/code&gt; with the &lt;code&gt;L&lt;/code&gt; suffix, always give the &lt;code&gt;long&lt;/code&gt;. Give an unsigned iff it is asked for with the &lt;code&gt;U&lt;/code&gt; or &lt;code&gt;u&lt;/code&gt; suffix. Octals created from integers preserve the type of the passed-in integral.</source>
          <target state="translated">文字列のルールはリテラルの通常のものです。それが &lt;code&gt;int&lt;/code&gt; に収まる場合、それは &lt;code&gt;int&lt;/code&gt; です。そうでなければ、それは &lt;code&gt;long&lt;/code&gt; です。ただし、ユーザーが特に &lt;code&gt;L&lt;/code&gt; サフィックス付きの &lt;code&gt;long&lt;/code&gt; を要求する場合は、常に &lt;code&gt;long&lt;/code&gt; を指定します。 &lt;code&gt;U&lt;/code&gt; または &lt;code&gt;u&lt;/code&gt; のサフィックスを付けて要求された無署名のiffを指定します。整数から作成された8進数は、渡された積分の型を保持します。</target>
        </trans-unit>
        <trans-unit id="e32ff39ea4f694316ee9d2d062e0ec9da6e2270f" translate="yes" xml:space="preserve">
          <source>The runtime might have been terminated and not be usable anymore when the destructors are called. Otherwise, usage and requirements of &lt;code&gt;crt_destructor&lt;/code&gt; are similar to those of &lt;code&gt;crt_constructor&lt;/code&gt;.</source>
          <target state="translated">ランタイムが終了し、デストラクタが呼び出されたときに使用できなくなった可能性があります。それ以外の &lt;code&gt;crt_destructor&lt;/code&gt; は、crt_destructorの使用法と要件はcrt_constructorのものと同様 &lt;code&gt;crt_constructor&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e0dffdc084b14542b868ac2c2fcdcfbf771ea55f" translate="yes" xml:space="preserve">
          <source>The runtime module exposes information specific to the D runtime code.</source>
          <target state="translated">ランタイムモジュールは、Dランタイムコードに固有の情報を公開します。</target>
        </trans-unit>
        <trans-unit id="1e0c7d670da430e1c2fcc83076d681bba14efcaf" translate="yes" xml:space="preserve">
          <source>The safety level of this function is faked. It shows itself as &lt;code&gt;@trusted pure nothrow&lt;/code&gt; to not break existing code.</source>
          <target state="translated">この機能の安全レベルは偽物です。これは、既存のコードを壊さないように、 &lt;code&gt;@trusted pure nothrow&lt;/code&gt; として現れます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
