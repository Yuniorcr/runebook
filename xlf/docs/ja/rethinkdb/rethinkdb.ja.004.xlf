<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rethinkdb">
    <body>
      <group id="rethinkdb">
        <trans-unit id="d4ed5fd76817542a76355cd4b4f991608b7c9797" translate="yes" xml:space="preserve">
          <source>Return the elements of a sequence within the specified range.</source>
          <target state="translated">指定した範囲内のシーケンスの要素を返します。</target>
        </trans-unit>
        <trans-unit id="e2d16cca3af2640562e11239c5e1cb70f24e2040" translate="yes" xml:space="preserve">
          <source>Return the hour in a time object as a number between 0 and 23.</source>
          <target state="translated">時間オブジェクト内の時間を0から23までの数値で返します。</target>
        </trans-unit>
        <trans-unit id="6a27edb7435efd0748ac618d8f95b6d80fc2510a" translate="yes" xml:space="preserve">
          <source>Return the maximum number comments per post.</source>
          <target state="translated">1投稿あたりの最大コメント数を返します。</target>
        </trans-unit>
        <trans-unit id="1f0c62205fb575cc337651b85a3c80c4c42e9b98" translate="yes" xml:space="preserve">
          <source>Return the minute in a time object as a number between 0 and 59.</source>
          <target state="translated">時間オブジェクト内の分を、0から59の間の数値として返します。</target>
        </trans-unit>
        <trans-unit id="b204d98d48eba1077a862d07b71af3333275043c" translate="yes" xml:space="preserve">
          <source>Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.</source>
          <target state="translated">時間オブジェクトの月を、1から12の間の数値で返します。便宜上、r.january,r.februaryなどの用語が定義されており、適切な整数にマップされています。</target>
        </trans-unit>
        <trans-unit id="7c290219ba6cddea6fd8ee62f62fd68fb04cbe8e" translate="yes" xml:space="preserve">
          <source>Return the number of comments for all posts.</source>
          <target state="translated">全投稿のコメント数を返します。</target>
        </trans-unit>
        <trans-unit id="e316ab849a4c0fd165af196f49cfa9c7888f04b2" translate="yes" xml:space="preserve">
          <source>Return the number of seconds elapsed since the beginning of the day stored in the time object.</source>
          <target state="translated">timeオブジェクトに格納されている日の始まりからの経過秒数を返します。</target>
        </trans-unit>
        <trans-unit id="c308fc928c3ca38906101a5971935fa2b23267d8" translate="yes" xml:space="preserve">
          <source>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</source>
          <target state="translated">時間オブジェクトの秒数を、0~59.999(倍精度)の間の数値として返します。</target>
        </trans-unit>
        <trans-unit id="2ca2261d31fada3154fe610f41e3f36f34f50104" translate="yes" xml:space="preserve">
          <source>Return the status of a table.</source>
          <target state="translated">テーブルの状態を返します。</target>
        </trans-unit>
        <trans-unit id="ee8f6ace073116dd4cee2823f8ec775a63ec6e3c" translate="yes" xml:space="preserve">
          <source>Return the timezone of the time object.</source>
          <target state="translated">時間オブジェクトのタイムゾーンを返します。</target>
        </trans-unit>
        <trans-unit id="a16f2cc87a2424696c4c7c72d81f1b8443ca04e0" translate="yes" xml:space="preserve">
          <source>Return the year of a time object.</source>
          <target state="translated">時間オブジェクトの年を返します。</target>
        </trans-unit>
        <trans-unit id="7251e5ca9210a35e0349f287619f236690248620" translate="yes" xml:space="preserve">
          <source>Return whether a time is between two other times.</source>
          <target state="translated">時間が他の2つの時間の間にあるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="7df890bcefe8759cfa2f24768eb854401e46e8ce" translate="yes" xml:space="preserve">
          <source>Returning a ReQL query as a string</source>
          <target state="translated">ReQL クエリを文字列として返す</target>
        </trans-unit>
        <trans-unit id="6549cc77b11e26ba920d62def1da169519c38689" translate="yes" xml:space="preserve">
          <source>Returning specific fields of a document</source>
          <target state="translated">ドキュメントの特定のフィールドを返す</target>
        </trans-unit>
        <trans-unit id="97c5eeaf29f67ee72247c15972aaba739a353910" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&quot;SELECTION&amp;lt;OBJECT&amp;gt;&quot;&lt;/code&gt;. (Yes, the type of the &lt;code&gt;typeOf&lt;/code&gt; command is &lt;code&gt;&quot;STRING&quot;&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;&quot;SELECTION&amp;lt;OBJECT&amp;gt;&quot;&lt;/code&gt; 返します。（はい、 &lt;code&gt;typeOf&lt;/code&gt; コマンドのタイプは &lt;code&gt;&quot;STRING&quot;&lt;/code&gt; です。）</target>
        </trans-unit>
        <trans-unit id="14fe7627b67a0185a8f04483dd7d16235707fb12" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;'domain.com'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;'domain.com'&lt;/code&gt; 返します</target>
        </trans-unit>
        <trans-unit id="643e18161845e0ecb05d553ae30ebf927d10f3ce" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; when called on an empty sequence.</source>
          <target state="translated">空のシーケンスで呼び出されると &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c46d32827e2a7131ff1d77a2f7291e55fe3cc2c1" translate="yes" xml:space="preserve">
          <source>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with &lt;a href=&quot;../zip/index&quot;&gt;zip&lt;/a&gt; to combine the left and right results.</source>
          <target state="translated">2つのシーケンスの左外部結合を返します。返されるシーケンスは、左側のシーケンスと右側のシーケンスの和集合を表します。左側のシーケンスのすべてのドキュメントが返されます。それぞれが述語条件を満たす場合、右側のシーケンスのドキュメントと一致します。ほとんどの場合、結合を&lt;a href=&quot;../zip/index&quot;&gt;zipで&lt;/a&gt;追跡して、左と右の結果を結合します。</target>
        </trans-unit>
        <trans-unit id="ab1565069e4a0e57be6a5a52da760fcbbfc29ef0" translate="yes" xml:space="preserve">
          <source>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with &lt;a href=&quot;zip/index&quot;&gt;zip&lt;/a&gt; to combine the left and right results.</source>
          <target state="translated">2つのシーケンスの左外部結合を返します。返されるシーケンスは、左側のシーケンスと右側のシーケンスの和集合を表します。左側のシーケンスのすべてのドキュメントが返されます。それぞれが述語条件を満たす場合、右側のシーケンスのドキュメントと一致します。ほとんどの場合、結合を&lt;a href=&quot;zip/index&quot;&gt;zipで&lt;/a&gt;追跡して、左と右の結果を結合します。</target>
        </trans-unit>
        <trans-unit id="71e616c4f0779291525e7a3daecba278fcf11b08" translate="yes" xml:space="preserve">
          <source>Returns an inner join of two sequences.</source>
          <target state="translated">2つのシーケンスの内側結合を返します。</target>
        </trans-unit>
        <trans-unit id="c830f78dec23684142dbe486cecbd1eb26631348" translate="yes" xml:space="preserve">
          <source>Returns the currently visited document.</source>
          <target state="translated">現在訪問しているドキュメントを返します。</target>
        </trans-unit>
        <trans-unit id="63c93a91670215210d58774851527a985d56583c" translate="yes" xml:space="preserve">
          <source>Returns the following result:</source>
          <target state="translated">以下の結果を返します。</target>
        </trans-unit>
        <trans-unit id="3243ea249cfe8eb0c3119088a6a8fe5d63da9ba4" translate="yes" xml:space="preserve">
          <source>Rich command-set</source>
          <target state="translated">リッチコマンドセット</target>
        </trans-unit>
        <trans-unit id="57223975ae6497ffb734052c257297523d6a53df" translate="yes" xml:space="preserve">
          <source>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value&amp;rsquo;s floor).</source>
          <target state="translated">指定された値を切り捨てて、指定された値（値の下限）以下の最大の整数値を返します。</target>
        </trans-unit>
        <trans-unit id="1055a67da6f244655ae05b937e997675ab32f267" translate="yes" xml:space="preserve">
          <source>Rounds the given value to the nearest whole integer.</source>
          <target state="translated">指定された値を最も近い整数に丸めます。</target>
        </trans-unit>
        <trans-unit id="42e7a006f535f03176759ec87c52257b285ebc2f" translate="yes" xml:space="preserve">
          <source>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value&amp;rsquo;s ceiling).</source>
          <target state="translated">指定された値を切り上げ、指定された値（値の上限）以上の最小の整数値を返します。</target>
        </trans-unit>
        <trans-unit id="b217e98c3bf70f3cf4633a5447d6587eea974ba1" translate="yes" xml:space="preserve">
          <source>Ruby</source>
          <target state="translated">Ruby</target>
        </trans-unit>
        <trans-unit id="91667aa4fbc722508d6b30787e8e791fb64f62f5" translate="yes" xml:space="preserve">
          <source>Ruby driver</source>
          <target state="translated">ルビドライバ</target>
        </trans-unit>
        <trans-unit id="b853e9265c2ef8705439ae2bf2b5eaf811a08fef" translate="yes" xml:space="preserve">
          <source>Ruby libraries</source>
          <target state="translated">Ruby ライブラリ</target>
        </trans-unit>
        <trans-unit id="73569b1cb680b4a4ed18b11d5df9a172d7172552" translate="yes" xml:space="preserve">
          <source>Ruby with EventMachine</source>
          <target state="translated">RubyとEventMachine</target>
        </trans-unit>
        <trans-unit id="079aca0608b19eda84bb36e7a085f9aa4e9ee427" translate="yes" xml:space="preserve">
          <source>Run a query on a connection. The callback will get either an error, a single JSON result, or a cursor, depending on the query.</source>
          <target state="translated">接続上でクエリを実行します。コールバックは、クエリに応じて、エラー、単一の JSON 結果、またはカーソルのいずれかを取得します。</target>
        </trans-unit>
        <trans-unit id="c8219c1f62102cbb2bc5e0e9dd3b930cf610805d" translate="yes" xml:space="preserve">
          <source>Run some queries</source>
          <target state="translated">いくつかのクエリを実行する</target>
        </trans-unit>
        <trans-unit id="d44ebe98717661727e47dcc676b5bed62a1bcda9" translate="yes" xml:space="preserve">
          <source>Run the publisher and corresponding subscribers in different terminal windows, so the output doesn&amp;rsquo;t run together. For example, to run the publisher for the regex demo:</source>
          <target state="translated">パブリッシャーと対応するサブスクライバーを異なるターミナルウィンドウで実行して、出力が一緒に実行されないようにします。たとえば、正規表現デモのパブリッシャーを実行するには：</target>
        </trans-unit>
        <trans-unit id="ce872fe41a13ab76827629aca0160e3532cba67b" translate="yes" xml:space="preserve">
          <source>Running a proxy node</source>
          <target state="translated">プロキシノードの実行</target>
        </trans-unit>
        <trans-unit id="e0d0a896f47bbfa4aa812a58dd924904235834c4" translate="yes" xml:space="preserve">
          <source>Running multiple instances of RethinkDB on the same server may be desirable for isolating databases for separate applications running on the same server, or for testing purposes. (There is no performance gain from running multiple nodes of the same cluster on the same physical machine.)</source>
          <target state="translated">同じサーバー上でRethinkDBの複数のインスタンスを実行することは、同じサーバー上で実行されている別々のアプリケーションのデータベースを分離したり、テスト目的のために望ましい場合があります。(同一物理マシン上で同一クラスタの複数ノードを実行してもパフォーマンスは向上しません)。</target>
        </trans-unit>
        <trans-unit id="a4942c26d0735947d8a22a2fbe2735a12e381808" translate="yes" xml:space="preserve">
          <source>SELECT</source>
          <target state="translated">SELECT</target>
        </trans-unit>
        <trans-unit id="a2469c47824560f8054ab9e6c0cc7613158a31d8" translate="yes" xml:space="preserve">
          <source>SEND</source>
          <target state="translated">SEND</target>
        </trans-unit>
        <trans-unit id="2064cb643caa8d9e1de12eea7f3e143ca9f8680d" translate="yes" xml:space="preserve">
          <source>SQL</source>
          <target state="translated">SQL</target>
        </trans-unit>
        <trans-unit id="94dbfc935bc4110b42a7479845ebaaf6831417c0" translate="yes" xml:space="preserve">
          <source>SQL and RethinkDB share very similar terminology. Below is a table of terms and concepts in the two systems.</source>
          <target state="translated">SQLとRethinkDBは非常に似た用語を共有しています。以下に、2つのシステムにおける用語と概念の表を示します。</target>
        </trans-unit>
        <trans-unit id="2d9ba3ea6a8f0fa4cc2e912557eb633510807715" translate="yes" xml:space="preserve">
          <source>SQL to ReQL cheat sheet</source>
          <target state="translated">SQLからReQLへのチートシート</target>
        </trans-unit>
        <trans-unit id="93660706dc5c1a232c7b857cae33b1f219f3ce07" translate="yes" xml:space="preserve">
          <source>SSH access</source>
          <target state="translated">SSHアクセス</target>
        </trans-unit>
        <trans-unit id="2913b792a0b75101deedbaa4f460c87e0b282d9f" translate="yes" xml:space="preserve">
          <source>SSH tunneling lets you connect directly to the virtual private network of your RethinkDB cluster. This is more complicated to set up, but lets you work with the hosted RethinkDB instance the same way you&amp;rsquo;d work with a local installation, and it can work with any community RethinkDB driver. After your RethinkDB deployment is created, the admin console will give you the host and port information that you need to use to set up the SSH tunnel.</source>
          <target state="translated">SSHトンネリングを使用すると、RethinkDBクラスターの仮想プライベートネットワークに直接接続できます。これはセットアップがより複雑ですが、ホストされているRethinkDBインスタンスをローカルインストールと同じように操作でき、どのコミュニティRethinkDBドライバーでも動作します。RethinkDBデプロイメントが作成された後、管理コンソールは、SSHトンネルのセットアップに使用する必要があるホストとポートの情報を提供します。</target>
        </trans-unit>
        <trans-unit id="0c37f79b7f9adfb0fadf4cb243f264c3d81acde8" translate="yes" xml:space="preserve">
          <source>Safari 6.02 or higher</source>
          <target state="translated">Safari 6.02以上</target>
        </trans-unit>
        <trans-unit id="7b7e70bcf209a5323526033a9cbf768a3ae70c2c" translate="yes" xml:space="preserve">
          <source>Scala</source>
          <target state="translated">Scala</target>
        </trans-unit>
        <trans-unit id="f1af3da47cd6f0772dc9bc865e617198fa0a2bb1" translate="yes" xml:space="preserve">
          <source>Scaling considerations</source>
          <target state="translated">スケーリングの考慮事項</target>
        </trans-unit>
        <trans-unit id="56711ed4f6ac142f89dade8ba9b9c93a04023164" translate="yes" xml:space="preserve">
          <source>Scaling, sharding and replication</source>
          <target state="translated">スケーリング、シャーディング、レプリケーション</target>
        </trans-unit>
        <trans-unit id="c23540e5fb551edff0ac95649a1d551f9736d55e" translate="yes" xml:space="preserve">
          <source>Scopes</source>
          <target state="translated">Scopes</target>
        </trans-unit>
        <trans-unit id="c3647743e6f9e273cffde9b95098045e446733a9" translate="yes" xml:space="preserve">
          <source>Scripting ReQL</source>
          <target state="translated">スクリプトのReQL</target>
        </trans-unit>
        <trans-unit id="5ea96a2371f2e2dcc3e4681dca2cd5e276968843" translate="yes" xml:space="preserve">
          <source>Scripting is also the only way to access some advanced features such as server tags, which let you group servers together for replication purposes (such as associating them with physical data centers). For more information, read the &amp;ldquo;Advanced configuration&amp;rdquo; section of &lt;a href=&quot;../sharding-and-replication/index&quot;&gt;Sharding and replication&lt;/a&gt;.</source>
          <target state="translated">スクリプトは、サーバータグなどのいくつかの高度な機能にアクセスする唯一の方法でもあり、サーバーを物理的なデータセンターに関連付けるなど、レプリケーションの目的でサーバーをグループ化できます。詳細については、&lt;a href=&quot;../sharding-and-replication/index&quot;&gt;シャーディングとレプリケーション&lt;/a&gt;の「詳細設定」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="e0672c0c8416fc438be3b303ceef330bdab976b4" translate="yes" xml:space="preserve">
          <source>Seagate Nytro WarpDrive BLP4-1600 storage</source>
          <target state="translated">シーゲイトNytro WarpDrive BLP4-1600ストレージ</target>
        </trans-unit>
        <trans-unit id="d0fdab3c7cf84c4001e23486595c30f75a5024ad" translate="yes" xml:space="preserve">
          <source>Secondary indexes are data structures that improve the speed of many read queries at the slight cost of increased storage space and decreased write performance.</source>
          <target state="translated">セカンダリインデックスは、ストレージスペースの増加と書き込みパフォーマンスの低下を多少犠牲にしても、多くの読み取りクエリの速度を向上させるデータ構造です。</target>
        </trans-unit>
        <trans-unit id="0f0154e442879b8c7dbf4b13bbd9085b222aaf7d" translate="yes" xml:space="preserve">
          <source>Secondary indexes can be used in extremely powerful ways with &lt;code&gt;between&lt;/code&gt; and other commands; read the full article on &lt;a href=&quot;../../../docs/secondary-indexes/index&quot;&gt;secondary indexes&lt;/a&gt; for examples using boolean operations, &lt;code&gt;contains&lt;/code&gt; and more.</source>
          <target state="translated">セカンダリインデックスは、 &lt;code&gt;between&lt;/code&gt; コマンドや他のコマンドで非常に強力な方法で使用できます。ブール演算、 &lt;code&gt;contains&lt;/code&gt; などを使用した例については、&lt;a href=&quot;../../../docs/secondary-indexes/index&quot;&gt;セカンダリインデックス&lt;/a&gt;に関する記事全体をお読みください。</target>
        </trans-unit>
        <trans-unit id="8c7224c2e5fff28a7f3c317eb4d8793a788ef45a" translate="yes" xml:space="preserve">
          <source>Secondary indexes can be used in extremely powerful ways with &lt;code&gt;between&lt;/code&gt; and other commands; read the full article on &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;secondary indexes&lt;/a&gt; for examples using boolean operations, &lt;code&gt;contains&lt;/code&gt; and more.</source>
          <target state="translated">セカンダリインデックスは &lt;code&gt;between&lt;/code&gt; と他のコマンド間で非常に強力な方法で使用できます。ブール演算、 &lt;code&gt;contains&lt;/code&gt; などを使用した例については、&lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;セカンダリインデックス&lt;/a&gt;に関する記事全体をお読みください。</target>
        </trans-unit>
        <trans-unit id="284d4e82ce02238feb9d3f5c2b52b25f61c8a2b2" translate="yes" xml:space="preserve">
          <source>Secondary indexes can be used in extremely powerful ways with &lt;code&gt;getAll&lt;/code&gt; and other commands; read the full article on &lt;a href=&quot;../../../docs/secondary-indexes/index&quot;&gt;secondary indexes&lt;/a&gt; for examples using boolean operations, &lt;code&gt;contains&lt;/code&gt; and more.</source>
          <target state="translated">セカンダリインデックスは、 &lt;code&gt;getAll&lt;/code&gt; およびその他のコマンドで非常に強力な方法で使用できます。ブール演算、 &lt;code&gt;contains&lt;/code&gt; などを使用した例については、&lt;a href=&quot;../../../docs/secondary-indexes/index&quot;&gt;セカンダリインデックス&lt;/a&gt;に関する記事全体をお読みください。</target>
        </trans-unit>
        <trans-unit id="4eba5ab82d78a89eda9fb209fef681f5287e83f5" translate="yes" xml:space="preserve">
          <source>Secondary indexes can be used in extremely powerful ways with &lt;code&gt;getAll&lt;/code&gt; and other commands; read the full article on &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;secondary indexes&lt;/a&gt; for examples using boolean operations, &lt;code&gt;contains&lt;/code&gt; and more.</source>
          <target state="translated">セカンダリインデックスは、 &lt;code&gt;getAll&lt;/code&gt; やその他のコマンドで非常に強力な方法で使用できます。ブール演算、 &lt;code&gt;contains&lt;/code&gt; などを使用した例については、&lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;セカンダリインデックス&lt;/a&gt;に関する記事全体をお読みください。</target>
        </trans-unit>
        <trans-unit id="7982e9ee250aad3eb15a6e1fa6db7cfdc26cb2f8" translate="yes" xml:space="preserve">
          <source>Secondary indexes will not store &lt;code&gt;null&lt;/code&gt; values or objects. Thus, the results of a command such as:</source>
          <target state="translated">セカンダリインデックスは &lt;code&gt;null&lt;/code&gt; 値またはオブジェクトを格納しません。したがって、次のようなコマンドの結果：</target>
        </trans-unit>
        <trans-unit id="8244783aa1946897f99cef0c73eb2f5a4dfb4197" translate="yes" xml:space="preserve">
          <source>Secure your cluster</source>
          <target state="translated">クラスタの安全性を確保する</target>
        </trans-unit>
        <trans-unit id="b8c1351559faf4d2f8b669b12ea7d407f5666309" translate="yes" xml:space="preserve">
          <source>Securing the driver port</source>
          <target state="translated">ドライバポートの確保</target>
        </trans-unit>
        <trans-unit id="a1d993407c8376c1672bf0c5a4284232354399e2" translate="yes" xml:space="preserve">
          <source>Securing your cluster</source>
          <target state="translated">クラスタの保護</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="69a94e079c6f72dd821a2916438daf4debbe798b" translate="yes" xml:space="preserve">
          <source>Security options</source>
          <target state="translated">セキュリティオプション</target>
        </trans-unit>
        <trans-unit id="6b8e42cb98e4e465a60e20b63d2bd2161876bca6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../../docs/external-api-access/index&quot;&gt;the tutorial&lt;/a&gt; on &lt;code&gt;r.http&lt;/code&gt; for more examples on how to use this command.</source>
          <target state="translated">このコマンドの使用方法の例について&lt;a href=&quot;../../../docs/external-api-access/index&quot;&gt;は&lt;/a&gt;、 &lt;code&gt;r.http&lt;/code&gt; のチュートリアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="2b99ffebc80bfe3b34e15d2ac5f938bedd9c52f7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../install-drivers/index&quot;&gt;driver install instructions&lt;/a&gt; for your language.</source>
          <target state="translated">ご使用の言語用の&lt;a href=&quot;../install-drivers/index&quot;&gt;ドライバーのインストール手順&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e659a7b1fb270abb215eabd50ddcef317a46e407" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://rethinkdb.com/install&quot;&gt;server install instructions&lt;/a&gt; for your platform.</source>
          <target state="translated">ご使用のプラットフォームの&lt;a href=&quot;https://rethinkdb.com/install&quot;&gt;サーバーインストール手順&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4fdf7b2ad01bc194f00eacfd1ee38e4d3b63dcb2" translate="yes" xml:space="preserve">
          <source>See cat pictures shared on Instagram in real time.</source>
          <target state="translated">インスタグラムでシェアされた猫の写真をリアルタイムで見ることができます。</target>
        </trans-unit>
        <trans-unit id="0c2ba2a4f667941be3cc9b497e222e28d10a7c74" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../data-types/index&quot;&gt;data type documentation&lt;/a&gt; for more detail about streams.</source>
          <target state="translated">ストリームの詳細については、&lt;a href=&quot;../../data-types/index&quot;&gt;データ型のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9c48c84da1b5e5392c19334e8b0bbaa319e703a8" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../index_status/index&quot;&gt;indexStatus&lt;/a&gt; documentation for a description of the field values.</source>
          <target state="translated">フィールド値の説明については、&lt;a href=&quot;../index_status/index&quot;&gt;indexStatusの&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="bde140c936811da044b952e743be8767f0ecb2cc" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../status/index&quot;&gt;status&lt;/a&gt; command for an explanation of the objects returned in the &lt;code&gt;old_val&lt;/code&gt; and &lt;code&gt;new_val&lt;/code&gt; fields.</source>
          <target state="translated">&lt;code&gt;old_val&lt;/code&gt; および &lt;code&gt;new_val&lt;/code&gt; フィールドで返されるオブジェクトの説明については、&lt;a href=&quot;../status/index&quot;&gt;status&lt;/a&gt;コマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="629e4746d16af85c9b3fd8d43b27fa95f2889be7" translate="yes" xml:space="preserve">
          <source>See the code &amp;raquo;</source>
          <target state="translated">コードを見る&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="dcd7ebe20b693b22889b95a15eca49030584ea07" translate="yes" xml:space="preserve">
          <source>See the source &amp;raquo;</source>
          <target state="translated">ソースを見る&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="ab287e3400037660977c93949d06c8794701e08d" translate="yes" xml:space="preserve">
          <source>Select &amp;ldquo;RethinkDB.&amp;rdquo;</source>
          <target state="translated">「RethinkDB」を選択します。</target>
        </trans-unit>
        <trans-unit id="49ff71acb246cc6a63a1ed20135722e307015e4a" translate="yes" xml:space="preserve">
          <source>Select &lt;strong&gt;Custom TCP rule&lt;/strong&gt;.</source>
          <target state="translated">[ &lt;strong&gt;カスタムTCPルール]を&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="77ed0e41cf00adc048443a4c59a481c886d9dcf2" translate="yes" xml:space="preserve">
          <source>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</source>
          <target state="translated">一様なランダム分布を持つ配列から与えられた数の要素を選択する。選択は置換せずに行われる。</target>
        </trans-unit>
        <trans-unit id="cdf1371e4dd147b3db77a3f68e9797466ae68a9a" translate="yes" xml:space="preserve">
          <source>Select the &lt;strong&gt;1-Click Launch&lt;/strong&gt; tab, select the size of the instance you wish to configure, and click on the &lt;strong&gt;Launch with 1-Click&lt;/strong&gt; button on the right.</source>
          <target state="translated">[ &lt;strong&gt;ワンクリックで起動&lt;/strong&gt; ]タブを選択し、構成するインスタンスのサイズを選択して、右側の&lt;strong&gt;[ワンクリックで&lt;/strong&gt;起動]ボタンを&lt;strong&gt;クリックし&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="24ef151114580dc0d68467e5ab448d8c09efd89c" translate="yes" xml:space="preserve">
          <source>Select the security group that your instances belong to and open the &lt;strong&gt;Inbound&lt;/strong&gt; tab in the bottom half of the page.</source>
          <target state="translated">インスタンスが属するセキュリティグループを選択し、ページの下半分にある[ &lt;strong&gt;受信&lt;/strong&gt; ]タブを開きます。</target>
        </trans-unit>
        <trans-unit id="af912eddd3068889909f441f05cc66e7d588440d" translate="yes" xml:space="preserve">
          <source>Selecting Data</source>
          <target state="translated">データの選択</target>
        </trans-unit>
        <trans-unit id="cfe3f3de9a7d6d7478e815f2c854155e18ec593b" translate="yes" xml:space="preserve">
          <source>Selecting data</source>
          <target state="translated">データの選択</target>
        </trans-unit>
        <trans-unit id="01e78f2f17937f1b67c1972da29be60ea26dacdb" translate="yes" xml:space="preserve">
          <source>Selecting workloads and hardware</source>
          <target state="translated">ワークロードとハードウェアの選択</target>
        </trans-unit>
        <trans-unit id="0e06550e71b1bb97d074f86a8f3eff781b17db2b" translate="yes" xml:space="preserve">
          <source>Selections: &lt;code&gt;between&lt;/code&gt;, &lt;code&gt;get_all&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;</source>
          <target state="translated">選択： &lt;code&gt;between&lt;/code&gt; 、 &lt;code&gt;get_all&lt;/code&gt; 、 &lt;code&gt;filter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c274dc21c7abbd576e80808d73c6a883b8fc67d" translate="yes" xml:space="preserve">
          <source>Semantic command</source>
          <target state="translated">セマンティックコマンド</target>
        </trans-unit>
        <trans-unit id="5340a0e3ba910c6ba58f50f0b02149f97571010b" translate="yes" xml:space="preserve">
          <source>Send the authorization key as an ASCII string. &lt;em&gt;If there is no authorization key, skip this step.&lt;/em&gt;</source>
          <target state="translated">認証キーをASCII文字列として送信します。&lt;em&gt;認証キーがない場合は、この手順をスキップしてください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="740b49c8e2030bbb3b6d6adfaf0a7f11772bbe3d" translate="yes" xml:space="preserve">
          <source>Send the following data to the server:</source>
          <target state="translated">以下のデータをサーバに送信します。</target>
        </trans-unit>
        <trans-unit id="efa93b393c3d5d51c8ab31aa67430179ff81d156" translate="yes" xml:space="preserve">
          <source>Send the length of the authorization key, as a 32-bit little-endian integer (4 bytes). Send &lt;code&gt;0&lt;/code&gt; if there is no authorization key.</source>
          <target state="translated">認証キーの長さを32ビットのリトルエンディアン整数（4バイト）として送信します。認証キーがない場合は &lt;code&gt;0&lt;/code&gt; を送信します。</target>
        </trans-unit>
        <trans-unit id="05226713ff51e987c345dc09ac55543399794d44" translate="yes" xml:space="preserve">
          <source>Send the message</source>
          <target state="translated">メッセージを送る</target>
        </trans-unit>
        <trans-unit id="4da6808722e9c55a13e5d55b1b3fcad59e4b38ad" translate="yes" xml:space="preserve">
          <source>Send the protocol type, as a 32-bit little-endian integer (4 bytes). Protocol types are defined in the &lt;code&gt;Protocol&lt;/code&gt; enum in &lt;code&gt;ql2.proto&lt;/code&gt;. New drivers should use JSON, &lt;code&gt;0x7e6970c7&lt;/code&gt;.</source>
          <target state="translated">プロトコルタイプを32ビットリトルエンディアン整数（4バイト）として送信します。プロトコルタイプは、 &lt;code&gt;ql2.proto&lt;/code&gt; の &lt;code&gt;Protocol&lt;/code&gt; 列挙で定義されています。新しいドライバーはJSON、 &lt;code&gt;0x7e6970c7&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d87012444da097dfb39f95359e77788d4b8c6f34" translate="yes" xml:space="preserve">
          <source>Send the protocol version, as a 32-bit little-endian integer (4 bytes). &lt;em&gt;Note:&lt;/em&gt; All instructions below assume a protocol of &lt;code&gt;V0_3&lt;/code&gt; or higher. The current protocol as of RethinkDB 2.0 is &lt;code&gt;V0_4&lt;/code&gt;.</source>
          <target state="translated">プロトコルバージョンを32ビットのリトルエンディアン整数（4バイト）として送信します。&lt;em&gt;注：&lt;/em&gt;以下のすべての手順は、 &lt;code&gt;V0_3&lt;/code&gt; 以上のプロトコルを想定しています。RethinkDB 2.0の現在のプロトコルは &lt;code&gt;V0_4&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0edc082b63c1cd873d382eccbdf135d9f6ac595b" translate="yes" xml:space="preserve">
          <source>Sending a query to the server takes the following steps:</source>
          <target state="translated">サーバーにクエリを送信するには、以下の手順が必要です。</target>
        </trans-unit>
        <trans-unit id="d443e709debab14709d7be0d682a089ecefe0676" translate="yes" xml:space="preserve">
          <source>Sending queries</source>
          <target state="translated">クエリの送信</target>
        </trans-unit>
        <trans-unit id="e46be1417c76343bc1c3aa2b1e53190674bcf776" translate="yes" xml:space="preserve">
          <source>Serialize the query</source>
          <target state="translated">クエリをシリアライズする</target>
        </trans-unit>
        <trans-unit id="2a0b4e570611bbb4fac2919e233436966085b203" translate="yes" xml:space="preserve">
          <source>Serialize the query as UTF8-encoded JSON</source>
          <target state="translated">クエリをUTF8エンコードされたJSONとしてシリアライズします。</target>
        </trans-unit>
        <trans-unit id="22560a188183eb4938827af6f2ba7b1b011ef57a" translate="yes" xml:space="preserve">
          <source>Serialize the result as the function body</source>
          <target state="translated">結果を関数本体としてシリアライズする</target>
        </trans-unit>
        <trans-unit id="e801f1e48565ad9f05ad5d47ade5d22a1e958713" translate="yes" xml:space="preserve">
          <source>Serializing BINARY</source>
          <target state="translated">BINARYのシリアライズ</target>
        </trans-unit>
        <trans-unit id="dd029cb1a0d313fcf58a06341f2e7bdf14cdb24d" translate="yes" xml:space="preserve">
          <source>Serializing FUNCALL (r.do)</source>
          <target state="translated">連載FUNCALL (r.do)</target>
        </trans-unit>
        <trans-unit id="6f6ea3f30e1c4a9dd85cfbac7843347f0e57f7af" translate="yes" xml:space="preserve">
          <source>Serializing IMPLICIT_VAR (r.row)</source>
          <target state="translated">IMPLICIT_VAR(r.row)のシリアライズ</target>
        </trans-unit>
        <trans-unit id="9362048d7a1ed20573c1df7d6139cfc0122f7c7f" translate="yes" xml:space="preserve">
          <source>Serializing functions depends heavily on your driver&amp;rsquo;s language. The JavaScript driver does it this way:</source>
          <target state="translated">関数のシリアル化は、ドライバーの言語に大きく依存します。JavaScriptドライバーは次のように実行します。</target>
        </trans-unit>
        <trans-unit id="097cf93c17b852922e8cd146b12ffe5341e6bbc2" translate="yes" xml:space="preserve">
          <source>Serializing queries</source>
          <target state="translated">クエリのシリアライズ</target>
        </trans-unit>
        <trans-unit id="b4269c5c84242504fd47a52d752db994a859d003" translate="yes" xml:space="preserve">
          <source>Server name options</source>
          <target state="translated">サーバー名のオプション</target>
        </trans-unit>
        <trans-unit id="71dcf72bf9cc6e1c264c8103df146d0cb981e165" translate="yes" xml:space="preserve">
          <source>Server tags</source>
          <target state="translated">サーバータグ</target>
        </trans-unit>
        <trans-unit id="92d0a01058b90937ea648c34a5eafe7e961cb37e" translate="yes" xml:space="preserve">
          <source>Server-side execution</source>
          <target state="translated">サーバーサイド実行</target>
        </trans-unit>
        <trans-unit id="052415886e7845a7d8c9677f78a612cf9388c2e4" translate="yes" xml:space="preserve">
          <source>Service options</source>
          <target state="translated">サービスオプション</target>
        </trans-unit>
        <trans-unit id="787ea64c257fea9081ea48830032783bdd035b44" translate="yes" xml:space="preserve">
          <source>Set User/Group options</source>
          <target state="translated">ユーザー/グループオプションの設定</target>
        </trans-unit>
        <trans-unit id="11b1bdd58898b94a3331dd7009df636000e030ca" translate="yes" xml:space="preserve">
          <source>Set a user account and password for your application</source>
          <target state="translated">アプリケーションのユーザーアカウントとパスワードを設定します。</target>
        </trans-unit>
        <trans-unit id="3720b938334b35818a908635b19bf42e1dc3cfc4" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;Label&lt;/code&gt; key value to the name of the file (e.g., &lt;code&gt;com.rethinkdb.server2.plist&lt;/code&gt;).</source>
          <target state="translated">設定する &lt;code&gt;Label&lt;/code&gt; ファイルの名前（例えば、キーに値を &lt;code&gt;com.rethinkdb.server2.plist&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bf4ec08a934fec647917f8442a9eb64a83b5273a" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;ProgramArguments&lt;/code&gt; key to a new configuration file (e.g., &lt;code&gt;/etc/rethinkdb2.conf&lt;/code&gt;).</source>
          <target state="translated">設定し &lt;code&gt;ProgramArguments&lt;/code&gt; の新しい設定ファイル（例えば、キーに &lt;code&gt;/etc/rethinkdb2.conf&lt;/code&gt; を）。</target>
        </trans-unit>
        <trans-unit id="8f3c03334a02bba0274f2e4013da9aefe549f42d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;StandardOutPath&lt;/code&gt; and &lt;code&gt;StandardErrorPath&lt;/code&gt; keys to a new log file.</source>
          <target state="translated">設定し &lt;code&gt;StandardOutPath&lt;/code&gt; と &lt;code&gt;StandardErrorPath&lt;/code&gt; 新しいログファイルにキーを。</target>
        </trans-unit>
        <trans-unit id="049d191886309580e64950b88aef06ddc12854ad" translate="yes" xml:space="preserve">
          <source>Set the number of shards and replicas you would like.</source>
          <target state="translated">希望する破片やレプリカの数を設定します。</target>
        </trans-unit>
        <trans-unit id="259bb4847964abaa06f8a09e3bf87cfbfe2f039f" translate="yes" xml:space="preserve">
          <source>Set this file to be owned by the &lt;code&gt;root&lt;/code&gt; user:</source>
          <target state="translated">このファイルを &lt;code&gt;root&lt;/code&gt; ユーザーが所有するように設定します。</target>
        </trans-unit>
        <trans-unit id="cecc1451471c6dc4e411816df91796a89ad85083" translate="yes" xml:space="preserve">
          <source>Sets the write hook on a table or overwrites it if one already exists.</source>
          <target state="translated">テーブルの書き込みフックを設定します。</target>
        </trans-unit>
        <trans-unit id="484f40f1ca8f5abf97858ccdf6eaece611f3121b" translate="yes" xml:space="preserve">
          <source>Setting up VPC security groups</source>
          <target state="translated">VPCセキュリティグループの設定</target>
        </trans-unit>
        <trans-unit id="72717ced9f39074f0e308322cf67ec080b85f4cd" translate="yes" xml:space="preserve">
          <source>Setting up high availability</source>
          <target state="translated">高可用性の設定</target>
        </trans-unit>
        <trans-unit id="c7f73bb54d928922c3838bb789ee9fb8a5b1eb37" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="translated">Settings</target>
        </trans-unit>
        <trans-unit id="b40f8c6b312aa78981283ac7bcf07d39753f5f58" translate="yes" xml:space="preserve">
          <source>Sharding</source>
          <target state="translated">Sharding</target>
        </trans-unit>
        <trans-unit id="8b825f365b5f5094480702aedaba3f3404b88156" translate="yes" xml:space="preserve">
          <source>Sharding and replication</source>
          <target state="translated">シャーディングとレプリケーション</target>
        </trans-unit>
        <trans-unit id="9675bc0d332a6ee2cdd0a92eee926c14735851f9" translate="yes" xml:space="preserve">
          <source>Sharding and replication can be controlled through the &lt;code&gt;table_config&lt;/code&gt; table, along with the more advanced settings of write acknowledgements and durability. Tables can also be renamed by modifying their rows. A typical row in the &lt;code&gt;table_config&lt;/code&gt; table will look like this:</source>
          <target state="translated">シャーディングとレプリケーションは、書き込み確認と耐久性のより高度な設定とともに、 &lt;code&gt;table_config&lt;/code&gt; テーブルを通じて制御できます。テーブルは、行を変更することによって名前を変更することもできます。 &lt;code&gt;table_config&lt;/code&gt; テーブルの一般的な行は次のようになります。</target>
        </trans-unit>
        <trans-unit id="65fdb932a6e83c2148674a2aebcd5a18d8e5feee" translate="yes" xml:space="preserve">
          <source>Sharding and replication is configured through &lt;em&gt;table configurations,&lt;/em&gt; which let you simply specify the number of shards and replicas per table or for all tables within a database. Users do not need to manually associate servers with tables. RethinkDB uses a set of heuristics to attempt to satisfy table configurations in an optimal way. It will copy data for new replicas from an available server, evenly distribute replicas of the data across the cluster, try to distribute the load evenly, and so on.</source>
          <target state="translated">シャーディングとレプリケーションは&lt;em&gt;テーブル&lt;/em&gt;構成を介して&lt;em&gt;構成されます。&lt;/em&gt;これにより、&lt;em&gt;テーブル&lt;/em&gt;ごとまたはデータベース内のすべてのテーブルのシャードとレプリカの数を簡単に指定できます。ユーザーは手動でサーバーをテーブルに関連付ける必要はありません。RethinkDBは、ヒューリスティックのセットを使用して、最適な方法でテーブル構成を満たすことを試みます。利用可能なサーバーから新しいレプリカのデータをコピーし、データのレプリカをクラスター全体に均等に分散し、負荷を均等に分散しようとします。</target>
        </trans-unit>
        <trans-unit id="ca374faf5075c1fff58817a8737a9b8341f7b444" translate="yes" xml:space="preserve">
          <source>Sharding and replication via ReQL</source>
          <target state="translated">ReQLによるシャーディングとレプリケーション</target>
        </trans-unit>
        <trans-unit id="4675658ba485e5ab233faf96f4b4bd60bdbc1d69" translate="yes" xml:space="preserve">
          <source>Sharding and replication via the web console</source>
          <target state="translated">ウェブコンソールを介したシャーディングとレプリケーション</target>
        </trans-unit>
        <trans-unit id="0f61896f7a3a3b22c994b7290ce915514b2ffb18" translate="yes" xml:space="preserve">
          <source>Similarly, you can use the &lt;code&gt;r.or&lt;/code&gt; command to filter based on one of many conditions.</source>
          <target state="translated">同様に、 &lt;code&gt;r.or&lt;/code&gt; コマンドを使用して、多くの条件の1つに基づいてフィルタリングできます。</target>
        </trans-unit>
        <trans-unit id="4ead99c11dfb522b4ed24272cb8935d1b0c95297" translate="yes" xml:space="preserve">
          <source>Simple creation and insertion</source>
          <target state="translated">簡単な作成と挿入</target>
        </trans-unit>
        <trans-unit id="b49b76d7f46024bae079a561e12707a34bb17cda" translate="yes" xml:space="preserve">
          <source>Simple indexes</source>
          <target state="translated">シンプルなインデックス</target>
        </trans-unit>
        <trans-unit id="b9b59b87ad4c0b4b1b2c1e4f4e9e461f32d5aa30" translate="yes" xml:space="preserve">
          <source>Simple queries on a superheroes dataset.</source>
          <target state="translated">スーパーヒーローのデータセットの簡単なクエリ。</target>
        </trans-unit>
        <trans-unit id="f9e72abc4ccbeabab6d891f4fb04960cf410c43e" translate="yes" xml:space="preserve">
          <source>Simple usage</source>
          <target state="translated">簡単な使い方</target>
        </trans-unit>
        <trans-unit id="8ba0e1b4f1c2ba72682c0924cd3042f72176d882" translate="yes" xml:space="preserve">
          <source>Simply specify the field using the &lt;code&gt;row&lt;/code&gt; command instead of a string.</source>
          <target state="translated">文字列の代わりに &lt;code&gt;row&lt;/code&gt; コマンドを使用してフィールドを指定するだけです。</target>
        </trans-unit>
        <trans-unit id="e78ef142771d107595b0bc8cf20eb66722ed8ac8" translate="yes" xml:space="preserve">
          <source>Simulates a mixed read/write workload with equally many writes as reads</source>
          <target state="translated">読み取りと書き込みの混在したワークロードを、読み取りと書き込みが同じくらいの数でシミュレートします。</target>
        </trans-unit>
        <trans-unit id="1fdb1c708a30ef631fc8da75683628bb2d960c6a" translate="yes" xml:space="preserve">
          <source>Simulates a read-only workload</source>
          <target state="translated">読み取り専用のワークロードをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="3f5ef2e223d333ea61560c000796e68942bc4eab" translate="yes" xml:space="preserve">
          <source>Sinatra</source>
          <target state="translated">Sinatra</target>
        </trans-unit>
        <trans-unit id="b19b761fc2db7f1d9136da17083f2446b67beb3a" translate="yes" xml:space="preserve">
          <source>Since NoBrainer&amp;rsquo;s &lt;code&gt;has_many&lt;/code&gt; associations are read-only, handling nested resources changes a little bit. For example, if &lt;code&gt;Comments&lt;/code&gt; are nested in &lt;code&gt;Articles&lt;/code&gt;, the comment form in the Article view would look like this:</source>
          <target state="translated">NoBrainerの &lt;code&gt;has_many&lt;/code&gt; アソシエーションは読み取り専用であるため、ネストされたリソースの処理は少し変更されます。たとえば、 &lt;code&gt;Comments&lt;/code&gt; が &lt;code&gt;Articles&lt;/code&gt; にネストされている場合、Articleビューのコメントフォームは次のようになります。</target>
        </trans-unit>
        <trans-unit id="dea68530ec6917cefc65a58fb3ef6ae8d193b4ea" translate="yes" xml:space="preserve">
          <source>Since automatic failover requires a majority of servers for a table to be available, it requires a minimum of three servers to be involved. In a two-machine cluster, automatic failover will never occur, and tables will lose availability for writes if either machine loses connectivity. In this case, if the machine cannot be reconnected, you must fix the problem manually using the emergency repair option of &lt;code&gt;reconfigure&lt;/code&gt;.</source>
          <target state="translated">自動フェイルオーバーでは、テーブルを使用できるようにするために大多数のサーバーが必要になるため、最低3台のサーバーが関与する必要があります。2台のマシンのクラスターでは、自動フェイルオーバーは発生せず、いずれかのマシンが接続を失うと、テーブルは書き込みの可用性を失います。この場合、マシンを再接続できない場合は、 &lt;code&gt;reconfigure&lt;/code&gt; の緊急修復オプションを使用して手動で問題を修正する必要があります。</target>
        </trans-unit>
        <trans-unit id="c04f4c8a74a44e7cb0a881e32ee9d07a7e1b6956" translate="yes" xml:space="preserve">
          <source>Since changefeeds are unidirectional with no acknowledgement returned from clients, they cannot guarantee delivery. If you need real-time updating with delivery guarantees, consider using a model that distributes to the clients through a message broker such as &lt;a href=&quot;../../rabbitmq/javascript/index&quot;&gt;RabbitMQ&lt;/a&gt;.</source>
          <target state="translated">変更フィードは一方向であり、クライアントから返される確認応答がないため、配信を保証することはできません。配信保証付きのリアルタイム更新が必要な場合は、&lt;a href=&quot;../../rabbitmq/javascript/index&quot;&gt;RabbitMQ&lt;/a&gt;などのメッセージブローカーを介してクライアントに配布するモデルの使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="cfa008fce6f7f4612e2eead0a4d7c799cf0ca174" translate="yes" xml:space="preserve">
          <source>Since it&amp;rsquo;s available online, you can import our sample data set just by creating a table and importing it with &lt;a href=&quot;../http/index&quot;&gt;http&lt;/a&gt;. Just execute these commands directly in the Data Explorer.</source>
          <target state="translated">オンラインで利用できるので、テーブルを作成して&lt;a href=&quot;../http/index&quot;&gt;httpで&lt;/a&gt;インポートするだけで、サンプルデータセットをインポートできます。これらのコマンドをデータエクスプローラーで直接実行するだけです。</target>
        </trans-unit>
        <trans-unit id="28e09663b14b74fc50bbdf52af54ef70c8ff5d0a" translate="yes" xml:space="preserve">
          <source>Since primary keys are unique, the &lt;code&gt;get&lt;/code&gt; command returns a single document. This way we can retrieve the document directly without converting a cursor to an array.</source>
          <target state="translated">主キーは一意である &lt;code&gt;get&lt;/code&gt; 、getコマンドは単一のドキュメントを返します。このようにして、カーソルを配列に変換せずにドキュメントを直接取得できます。</target>
        </trans-unit>
        <trans-unit id="eded6ab1c8bba9391d0bc0efe3fde1c3a7029bd5" translate="yes" xml:space="preserve">
          <source>Since the backup process uses client drivers, it takes advantage of RethinkDB&amp;rsquo;s concurrency. While it will use some cluster resources, it won&amp;rsquo;t lock out any clients, and it can be safely run on a live cluster.</source>
          <target state="translated">バックアッププロセスはクライアントドライバーを使用するため、RethinkDBの同時実行性を利用します。一部のクラスターリソースを使用しますが、クライアントをロックアウトすることはなく、稼働中のクラスターで安全に実行できます。</target>
        </trans-unit>
        <trans-unit id="646f2ddb07a63e77664dbfdf8026cf82e89c96af" translate="yes" xml:space="preserve">
          <source>Since the table might contain a large number of documents, the database returns a cursor object. As you iterate through the cursor, the server will send documents to the client in batches as they are requested. We only have three documents in our example, so we can safely retrieve all the documents at once. The &lt;code&gt;toArray&lt;/code&gt; function automatically iterates through the cursor and puts the documents into a JavaScript array.</source>
          <target state="translated">テーブルには多数のドキュメントが含まれる可能性があるため、データベースはカーソルオブジェクトを返します。カーソルを反復処理すると、サーバーは要求に応じてドキュメントをバッチでクライアントに送信します。この例では3つのドキュメントしかないため、一度にすべてのドキュメントを安全に取得できます。 &lt;code&gt;toArray&lt;/code&gt; の機能は自動的にカーソルを反復処理し、JavaScriptの配列にドキュメントを置きます。</target>
        </trans-unit>
        <trans-unit id="461e45707281cf6856842c50c790ea612c5a6862" translate="yes" xml:space="preserve">
          <source>Since this query is pure ReQL, the entire query will be distributed efficiently over the cluster without any computation being done on the client.</source>
          <target state="translated">このクエリは純粋なReQLなので、クライアント上で計算を行うことなく、クエリ全体がクラスタ上に効率的に分散されます。</target>
        </trans-unit>
        <trans-unit id="d08c9e61a015681b5d3f9c65c2e3d1116acb06fd" translate="yes" xml:space="preserve">
          <source>Since we changed three documents, the result should look like this:</source>
          <target state="translated">3つのドキュメントを変更したので、結果は以下のようになるはずです。</target>
        </trans-unit>
        <trans-unit id="de5b0b24c773e307562dc43accdfc9204b771ec8" translate="yes" xml:space="preserve">
          <source>Since we have two authors with less than two posts, the result is:</source>
          <target state="translated">投稿数が2件以下の作者が2人いるので、結果的には</target>
        </trans-unit>
        <trans-unit id="8922e181eb91cb6fa5246f74862ea665af4e7901" translate="yes" xml:space="preserve">
          <source>Since we only updated one document, we get back this object:</source>
          <target state="translated">1つのドキュメントを更新しただけなので、このオブジェクトが返ってきます。</target>
        </trans-unit>
        <trans-unit id="eeaf9297d721b8e99b43d24aa5fc70dd66377540" translate="yes" xml:space="preserve">
          <source>Since you&amp;rsquo;ll be doing more manipulation on the data, you might want to store the results of an API call in the database. Let&amp;rsquo;s create a table &lt;code&gt;stargazers&lt;/code&gt; and insert the RethinkDB stargazers into this table:</source>
          <target state="translated">データをさらに操作するので、API呼び出しの結果をデータベースに保存したい場合があります。テーブル &lt;code&gt;stargazers&lt;/code&gt; を作成し、RethinkDBスターゲイザーをこのテーブルに挿入します。</target>
        </trans-unit>
        <trans-unit id="b9140d15368b4c6388b91b301bb59e02a57255f2" translate="yes" xml:space="preserve">
          <source>Skip a number of elements from the head of the sequence.</source>
          <target state="translated">シーケンスの先頭からいくつかの要素をスキップします。</target>
        </trans-unit>
        <trans-unit id="11669c94403e009f8888a5f31c24059deacb9444" translate="yes" xml:space="preserve">
          <source>Small documents of no more than 250 bytes (including encoding overhead) are stored &amp;ldquo;in line&amp;rdquo; in the primary index tree. Many such documents can share a single 4 KB block.</source>
          <target state="translated">250バイト以下の小さなドキュメント（エンコードのオーバーヘッドを含む）は、プライマリインデックスツリーに「インライン」で格納されます。このようなドキュメントの多くは、1つの4 KBブロックを共有できます。</target>
        </trans-unit>
        <trans-unit id="66e287db281bba04ed3fbc4687e72ca03b461a59" translate="yes" xml:space="preserve">
          <source>Smaller result sets can be turned into an array directly, with native language constructs in Python and Ruby (&lt;code&gt;list(players)&lt;/code&gt; and &lt;code&gt;players.to_a&lt;/code&gt; respectively) or ReQL commands in JavaScript and Java (&lt;code&gt;players.toArray()&lt;/code&gt; and &lt;code&gt;players.toList()&lt;/code&gt; respectively; see &lt;a href=&quot;../../api/javascript/to_array/index&quot;&gt;toArray&lt;/a&gt; and &lt;a href=&quot;https://rethinkdb.com/api/java/to_array/&quot;&gt;toList&lt;/a&gt; documentation).</source>
          <target state="translated">小さな結果セットは、PythonとRubyでネイティブ言語構造（と、直接配列に変換することができ &lt;code&gt;list(players)&lt;/code&gt; と &lt;code&gt;players.to_a&lt;/code&gt; JavaScriptとJava（登録でそれぞれ）またはReQLコマンド &lt;code&gt;players.toArray()&lt;/code&gt; と &lt;code&gt;players.toList()&lt;/code&gt; それぞれ; &lt;a href=&quot;../../api/javascript/to_array/index&quot;&gt;toArray&lt;/a&gt;および&lt;a href=&quot;https://rethinkdb.com/api/java/to_array/&quot;&gt;toListの&lt;/a&gt;ドキュメントを参照してください）。</target>
        </trans-unit>
        <trans-unit id="0d0c98658c204f1e54e4cbe7f13aa85d03ebbf38" translate="yes" xml:space="preserve">
          <source>So far we&amp;rsquo;ve seen only simple queries without conditions. ReQL supports a familiar syntax for building more advanced queries:</source>
          <target state="translated">これまでのところ、条件のない単純なクエリのみを見てきました。ReQLは、より高度なクエリを構築するための使い慣れた構文をサポートしています。</target>
        </trans-unit>
        <trans-unit id="679b56c74eaec9a82e1ba0243df0e7b84b448cc7" translate="yes" xml:space="preserve">
          <source>So we can see IMDb&amp;rsquo;s number one movie with &lt;code&gt;filter({rank: 1})&lt;/code&gt;:</source>
          <target state="translated">したがって、 &lt;code&gt;filter({rank: 1})&lt;/code&gt; 付きのIMDbのナンバー1ムービーを見ることができます（{rank：1}）：</target>
        </trans-unit>
        <trans-unit id="a2233aa4b211f8f385bb078bd9f37203992d460f" translate="yes" xml:space="preserve">
          <source>So, for example, if we wanted to send a notification that Batman and the Joker had a fight, we might publish with the tags &lt;code&gt;#superhero&lt;/code&gt;, &lt;code&gt;#fight&lt;/code&gt;, and &lt;code&gt;#supervillain&lt;/code&gt;:</source>
          <target state="translated">したがって、たとえば、バットマンとジョーカーの戦いがあったという通知を送信したい場合は、 &lt;code&gt;#fight&lt;/code&gt; &lt;code&gt;#superhero&lt;/code&gt; 、#fight、および &lt;code&gt;#supervillain&lt;/code&gt; というタグを付けて公開します。</target>
        </trans-unit>
        <trans-unit id="eba8326cc93ad5c924b37021c049a63bed74a15f" translate="yes" xml:space="preserve">
          <source>So, our initial example query of:</source>
          <target state="translated">ということで、最初の例のクエリは</target>
        </trans-unit>
        <trans-unit id="2c2be06fa2bad03ab6e4aac214b80b94243e8bb0" translate="yes" xml:space="preserve">
          <source>So, the data we send to the server is as follows:</source>
          <target state="translated">そこで、サーバーに送るデータは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="925f0ecb819a75da4d24fd9a6b368e3d9d210d0c" translate="yes" xml:space="preserve">
          <source>Socks host: &lt;code&gt;localhost&lt;/code&gt;</source>
          <target state="translated">靴下ホスト： &lt;code&gt;localhost&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f3d2add8cfb71350f0a21731bae9a1fcd1c6f911" translate="yes" xml:space="preserve">
          <source>Some commands (&lt;code&gt;orderBy&lt;/code&gt; and &lt;code&gt;between&lt;/code&gt;) return a data type similar to a selection called a &lt;strong&gt;table_slice&lt;/strong&gt;. In most cases a table_slice behaves identically to a selection, but &lt;code&gt;between&lt;/code&gt; can only be called on a table or a table_slice, not any other kind of selection.</source>
          <target state="translated">一部のコマンド（ &lt;code&gt;orderBy&lt;/code&gt; および &lt;code&gt;between&lt;/code&gt; ）は、&lt;strong&gt;table_slice&lt;/strong&gt;と呼ばれる選択に類似したデータ型を&lt;strong&gt;返し&lt;/strong&gt;ます。ほとんどの場合、table_sliceは、選択に同じように動作しますが、 &lt;code&gt;between&lt;/code&gt; 専用テーブルまたはtable_slice、選択のない他の種類で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="920b523b3dbbdb44d9018758c80fc8718d1fcd73" translate="yes" xml:space="preserve">
          <source>Some native ReQL data types have no direct JSON representations. These are implemented as &lt;em&gt;pseudo types,&lt;/em&gt; JSON objects with the special key &lt;code&gt;$reql_type$&lt;/code&gt;. The three official ReQL drivers convert date and binary types to pseudo types.</source>
          <target state="translated">一部のネイティブReQLデータ型には、直接のJSON表現がありません。これらは、特別なキー &lt;code&gt;$reql_type$&lt;/code&gt; 持つJSONオブジェクトである&lt;em&gt;疑似タイプ&lt;/em&gt;として実装されます。 3つの公式ReQLドライバーは、日付型とバイナリ型を疑似型に変換します。</target>
        </trans-unit>
        <trans-unit id="45727d8558702b8e8e6821036bedae3a955e8e75" translate="yes" xml:space="preserve">
          <source>Some other map-reduce implementations, like Hadoop&amp;rsquo;s, use the mapping step to perform grouping as well; RethinkDB&amp;rsquo;s implementation explicitly separates them. This is sometimes referred to as &amp;ldquo;group-map-reduce,&amp;rdquo; or GMR. RethinkDB distributes GMR queries over tables and shards efficiently. You write GMR queries with the &lt;a href=&quot;https://rethinkdb.com/api/python/group/&quot;&gt;group&lt;/a&gt;, &lt;a href=&quot;https://rethinkdb.com/api/python/map/&quot;&gt;map&lt;/a&gt; and &lt;a href=&quot;https://rethinkdb.com/api/python/reduce/&quot;&gt;reduce&lt;/a&gt; commands, although as we&amp;rsquo;ll see in our examples, many ReQL commands compile to GMR queries behind the scenes&amp;mdash;many common map-reduce cases can be accomplished in one or two lines of ReQL.</source>
          <target state="translated">Hadoopのような他のmap-reduce実装では、マッピング手順を使用してグループ化も実行します。 RethinkDBの実装は、それらを明示的に分離します。これは、「group-map-reduce」またはGMRと呼ばれることもあります。 RethinkDBは、GMRクエリをテーブルとシャードに効率的に分散します。&lt;a href=&quot;https://rethinkdb.com/api/python/group/&quot;&gt;group&lt;/a&gt;、&lt;a href=&quot;https://rethinkdb.com/api/python/map/&quot;&gt;map&lt;/a&gt;、&lt;a href=&quot;https://rethinkdb.com/api/python/reduce/&quot;&gt;reduce&lt;/a&gt;コマンドを使用してGMRクエリを記述しますが、例でわかるように、多くのReQLコマンドはバックグラウンドでGMRクエリにコンパイルされます。多くの一般的なmap-reduceケースは、ReQLの1行または2行で実行できます。 。</target>
        </trans-unit>
        <trans-unit id="38976f19ca7ba6bdfba5c08f5a088ab5d7765537" translate="yes" xml:space="preserve">
          <source>Some system tables are read-only. System tables which allow writing require specific document schema, described below.</source>
          <target state="translated">システムテーブルの中には、読み取り専用のものもあります。書き込みが可能なシステムテーブルは、後述する特定のドキュメントスキーマを必要とします。</target>
        </trans-unit>
        <trans-unit id="297bafdbd8b010b58a31c04b9e3f52472f0b3473" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to write a ReQL document with a dynamic key&amp;mdash;the field name is stored in a variable. You can do this with the &lt;code&gt;object&lt;/code&gt; command, which takes a list of keys and values (&lt;code&gt;(key, value, key, value ...)&lt;/code&gt;) and returns an object from them.</source>
          <target state="translated">動的キーを使用してReQLドキュメントを記述したい場合があります。フィールド名は変数に格納されます。これを行うには、キーと値（ &lt;code&gt;(key, value, key, value ...)&lt;/code&gt; ）のリストを受け取り、それらからオブジェクトを返す &lt;code&gt;object&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="377d3d6f2c79ecc7905a44e35d7263f6d55bd8b0" translate="yes" xml:space="preserve">
          <source>Sort the sequence by document values of the given key(s). To specify the ordering, wrap the attribute with either &lt;code&gt;r.asc&lt;/code&gt; or &lt;code&gt;r.desc&lt;/code&gt; (defaults to ascending).</source>
          <target state="translated">指定されたキーのドキュメント値でシーケンスをソートします。順序を指定するには、属性を &lt;code&gt;r.asc&lt;/code&gt; または &lt;code&gt;r.desc&lt;/code&gt; （デフォルトは昇順）でラップします。</target>
        </trans-unit>
        <trans-unit id="7901d66f07cf332523d69e3f926ea835572d11fb" translate="yes" xml:space="preserve">
          <source>Sorting functions passed to &lt;code&gt;orderBy&lt;/code&gt; must be deterministic. You cannot, for instance, order rows using the &lt;a href=&quot;../random/index&quot;&gt;random&lt;/a&gt; command. Using a non-deterministic function with &lt;code&gt;orderBy&lt;/code&gt; will raise a &lt;code&gt;ReqlQueryLogicError&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;orderBy&lt;/code&gt; に渡される並べ替え関数は確定的でなければなりません。たとえば、&lt;a href=&quot;../random/index&quot;&gt;random&lt;/a&gt;コマンドを使用して行を並べ替えることはできません。 &lt;code&gt;orderBy&lt;/code&gt; で非決定的関数を使用すると、 &lt;code&gt;ReqlQueryLogicError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="ea8a4b203c7a70438b72d257427b2cfcb7f268ca" translate="yes" xml:space="preserve">
          <source>Sorting order</source>
          <target state="translated">並び替え順</target>
        </trans-unit>
        <trans-unit id="32a551a57e6bc51cc9ed96916dccb05595a33553" translate="yes" xml:space="preserve">
          <source>Sorting without an index requires the server to hold the sequence in memory, and is limited to 100,000 documents (or the setting of the &lt;code&gt;arrayLimit&lt;/code&gt; option for &lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt;). Sorting with an index can be done on arbitrarily large tables, or after a &lt;a href=&quot;../between/index&quot;&gt;between&lt;/a&gt; command using the same index. This applies to both secondary indexes and the primary key (e.g., &lt;code&gt;{index: 'id'}&lt;/code&gt;).</source>
          <target state="translated">インデックスなしで並べ替えるには、サーバーがシーケンスをメモリに保持する必要があり、100,000ドキュメント（または&lt;a href=&quot;../run/index&quot;&gt;runの&lt;/a&gt; &lt;code&gt;arrayLimit&lt;/code&gt; オプションの設定）に制限されます。インデックスを使用した並べ替えは、任意の大きなテーブルで実行することも、同じインデックスを使用する&lt;a href=&quot;../between/index&quot;&gt;between&lt;/a&gt;コマンドの後に実行することもできます。これは、セカンダリインデックスとプライマリキーの両方に適用されます（例 &lt;code&gt;{index: 'id'}&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="dab5e101e385b9bc90149afad6561250f3d14abf" translate="yes" xml:space="preserve">
          <source>Sorting without an index requires the server to hold the sequence in memory, and is limited to 100,000 documents (or the setting of the &lt;code&gt;arrayLimit&lt;/code&gt; option for &lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt;). Sorting with an index can be done on arbitrarily large tables, or after a &lt;a href=&quot;../between/index&quot;&gt;between&lt;/a&gt; command using the same index. This applies to both secondary indexes and the primary key (e.g., &lt;code&gt;{index:'id'}&lt;/code&gt;).</source>
          <target state="translated">インデックスなしでソートする場合、サーバーはシーケンスをメモリに保持する必要があり、100,000ドキュメント（または&lt;a href=&quot;../run/index&quot;&gt;runの&lt;/a&gt; &lt;code&gt;arrayLimit&lt;/code&gt; オプションの設定）に制限されます。インデックスでソートする任意の大きさのテーブルに、または後に行うことができる&lt;a href=&quot;../between/index&quot;&gt;との間の&lt;/a&gt;同じインデックスを使用してコマンド。これは、セカンダリインデックスとプライマリキーの両方に適用されます（例 &lt;code&gt;{index:'id'}&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="eb6ec6ac44dc07a6b156451cfaf45f72f2ae2b6e" translate="yes" xml:space="preserve">
          <source>Specify &lt;code&gt;emergencyRepair&lt;/code&gt; with one of two string options:</source>
          <target state="translated">次の2つの文字列オプションのいずれかを使用して、 &lt;code&gt;emergencyRepair&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="5e2ea144bfd6964140019a1eb9ee087345b4db18" translate="yes" xml:space="preserve">
          <source>Split points will not automatically be changed after table creation, which means that if the primary keys are unevenly distributed, shards may become unbalanced. However, the user can manually rebalance shards when necessary, as well as reconfigure tables with new sharding and replication settings. Users cannot set split points for shards manually.</source>
          <target state="translated">テーブル作成後にスプリットポイントが自動的に変更されることはありませんので、主キーが不均等に分散されている場合、シャードが不均衡になる可能性があります。しかし、ユーザーは必要に応じて手動でシャードをリバランスしたり、新しいシャーディングとレプリケーションの設定でテーブルを再構成したりすることができます。ユーザーが手動でシャードのスプリットポイントを設定することはできません。</target>
        </trans-unit>
        <trans-unit id="b1c84e3e4d99951fca9f0d1fa4ec08eae18ef655" translate="yes" xml:space="preserve">
          <source>Splits a string into substrings. Splits on whitespace when called with no arguments. When called with a separator, splits on that separator. When called with a separator and a maximum number of splits, splits on that separator at most &lt;code&gt;max_splits&lt;/code&gt; times. (Can be called with &lt;code&gt;null&lt;/code&gt; as the separator if you want to split on whitespace while still specifying &lt;code&gt;max_splits&lt;/code&gt;.)</source>
          <target state="translated">文字列を部分文字列に分割します。引数なしで呼び出されると、空白で分割されます。セパレーター付きで呼び出されると、そのセパレーターで分割されます。区切り文字と最大数の分割で呼び出された場合、最大で &lt;code&gt;max_splits&lt;/code&gt; 回、その区切り文字で分割されます。（ &lt;code&gt;max_splits&lt;/code&gt; を指定したまま空白で分割する場合は、セパレーターとして &lt;code&gt;null&lt;/code&gt; を使用して呼び出すことができます。）</target>
        </trans-unit>
        <trans-unit id="aad90813842550742d376854c4564d0e0ee6d4e7" translate="yes" xml:space="preserve">
          <source>Start RethinkDB at system startup</source>
          <target state="translated">システム起動時にRethinkDBを起動する</target>
        </trans-unit>
        <trans-unit id="f9f2f9177a8d7e05be7d153da2578fcbfbc850a7" translate="yes" xml:space="preserve">
          <source>Start a RethinkDB server</source>
          <target state="translated">RethinkDBサーバの起動</target>
        </trans-unit>
        <trans-unit id="95486e29d0190c040fcd314d3f50c1dbcf3ab1a4" translate="yes" xml:space="preserve">
          <source>Start monitoring the changefeed in one client:</source>
          <target state="translated">1つのクライアントでチェンジフィードの監視を開始します。</target>
        </trans-unit>
        <trans-unit id="d43ccd49e58bb91b7b4cdd2c2060dd0955232eae" translate="yes" xml:space="preserve">
          <source>Start on system startup</source>
          <target state="translated">システム起動時の起動</target>
        </trans-unit>
        <trans-unit id="2fbe3f947d63c8589e6302b2e97c70001429bf28" translate="yes" xml:space="preserve">
          <source>Start the server</source>
          <target state="translated">サーバーを起動する</target>
        </trans-unit>
        <trans-unit id="9f8bb9939a14cfff47edd8071834d58be0a0cbf9" translate="yes" xml:space="preserve">
          <source>Start the server from a terminal window.</source>
          <target state="translated">ターミナルウィンドウからサーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="78a3bbf31dc69529206cdcb865e33f6e461a23d6" translate="yes" xml:space="preserve">
          <source>Start the server from the Windows command prompt.</source>
          <target state="translated">Windowsのコマンドプロンプトからサーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="2d4af8c2a3172fa7ad4ba56655af4716e0c909b4" translate="yes" xml:space="preserve">
          <source>Starting RethinkDB instances</source>
          <target state="translated">RethinkDBインスタンスの起動</target>
        </trans-unit>
        <trans-unit id="c3c304eb5e15271a98ffd09a1430e6b519336201" translate="yes" xml:space="preserve">
          <source>Starting RethinkDB with the &lt;code&gt;proxy&lt;/code&gt; command turns a server into a &lt;em&gt;proxy node,&lt;/em&gt; which acts as a query router. This increases cluster performance by reducing intracluster traffic and, if you&amp;rsquo;re using changefeeds, de-duplicating feed messages.</source>
          <target state="translated">&lt;code&gt;proxy&lt;/code&gt; コマンドでRethinkDBを起動すると、サーバーが&lt;em&gt;プロキシノード&lt;/em&gt;になり、&lt;em&gt;プロキシノード&lt;/em&gt;がクエリルーターとして機能します。これにより、クラスター内のトラフィックが減少し、変更フィードを使用している場合はフィードメッセージの重複がなくなるため、クラスターのパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="11477333db87f433e59f65e30ba16cd581824f79" translate="yes" xml:space="preserve">
          <source>Starting a cluster on multiple machines or VMs is even easier than starting it on a single machine, because you don&amp;rsquo;t have to worry about port and directory conflicts.</source>
          <target state="translated">複数のマシンまたはVMでクラスターを起動する方が、単一のマシンで起動するよりも簡単です。ポートとディレクトリの競合を心配する必要がないためです。</target>
        </trans-unit>
        <trans-unit id="317d49bb0215c341c0bb18c9da4c9a7908ce3acf" translate="yes" xml:space="preserve">
          <source>Starting the server</source>
          <target state="translated">サーバーの起動</target>
        </trans-unit>
        <trans-unit id="b64fe618441e29b37149058f1a7d34872564ed83" translate="yes" xml:space="preserve">
          <source>Starting with RethinkDB 1.16, the earlier concept of &amp;ldquo;data centers&amp;rdquo; has been replaced by server tags, described above. Servers in a given data center could all be given a tag such as &lt;code&gt;us_east&lt;/code&gt; or &lt;code&gt;us_west&lt;/code&gt;, and a table can be configured to have replicas associated with specific server tags (e.g., 2 replicas on servers tagged with &lt;code&gt;us_east&lt;/code&gt; and 3 on servers tagged with &lt;code&gt;us_west&lt;/code&gt;).</source>
          <target state="translated">RethinkDB 1.16以降、前述の「データセンター」の概念はサーバータグに置き換えられました。与えられたデータセンタ内のサーバは、すべてのようなタグを与えることができる &lt;code&gt;us_east&lt;/code&gt; 又は &lt;code&gt;us_west&lt;/code&gt; 、及びテーブルは、特定のサーバタグ（例えば、サーバ上の2つのレプリカがでタグ付けに関連したレプリカを有するように構成することができる &lt;code&gt;us_east&lt;/code&gt; およびサーバ上の3でタグ付け &lt;code&gt;us_west&lt;/code&gt; ） 。</target>
        </trans-unit>
        <trans-unit id="2942d3a5f8afc6539a606fe55996f2f85ba8fb2d" translate="yes" xml:space="preserve">
          <source>Starting with RethinkDB 2.0 (&lt;code&gt;V0_4&lt;/code&gt;), the server will process multiple queries in parallel rather than sequentially, and there is no guarantee that a read following a write on the same connection will &amp;ldquo;see&amp;rdquo; the results of the write as long as it&amp;rsquo;s successful. (Previous versions of the server would process multiple queries on the same connection sequentially.)</source>
          <target state="translated">RethinkDB 2.0（ &lt;code&gt;V0_4&lt;/code&gt; ）以降、サーバーは複数のクエリを順次ではなく並行して処理します。同じ接続での書き込みに続く読み取りが成功する限り、書き込みの結果を「確認」できる保証はありません。 （以前のバージョンのサーバーは、同じ接続で複数のクエリを順番に処理していました。）</target>
        </trans-unit>
        <trans-unit id="cae18c7a46307f1b219e7a8b004e55b6126e7374" translate="yes" xml:space="preserve">
          <source>Starting with RethinkDB 2.2, state documents will &lt;em&gt;only&lt;/em&gt; be sent if the &lt;code&gt;includeStates&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;, even on point changefeeds. Initial values will only be sent if &lt;code&gt;includeInitial&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;includeStates&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;includeInitial&lt;/code&gt; is false, the first document on the feed will be &lt;code&gt;{state: 'ready'}&lt;/code&gt;.</source>
          <target state="translated">RethinkDB 2.2以降、状態ドキュメントは、ポイント変更フィードであっても、 &lt;code&gt;includeStates&lt;/code&gt; オプションが &lt;code&gt;true&lt;/code&gt; の場合に&lt;em&gt;のみ&lt;/em&gt;送信されます。初期値は、 &lt;code&gt;includeInitial&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合にのみ送信されます。場合 &lt;code&gt;includeStates&lt;/code&gt; があり &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;includeInitial&lt;/code&gt; が偽である、フィード上の最初の文書は次のようになります &lt;code&gt;{state: 'ready'}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c961f51ddf6e3a1960d4006dbd241d5e425cac28" translate="yes" xml:space="preserve">
          <source>Starting with RethinkDB 2.2, state documents will &lt;em&gt;only&lt;/em&gt; be sent if the &lt;code&gt;includeStates&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;, even on point changefeeds. Initial values will only be sent if &lt;code&gt;includeInitial&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;includeStates&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;includeInitial&lt;/code&gt; is false, the first document on the feed will be &lt;code&gt;{state:'ready'}&lt;/code&gt;.</source>
          <target state="translated">RethinkDB 2.2以降では、ポイントの変更フィードでも、 &lt;code&gt;includeStates&lt;/code&gt; オプションが &lt;code&gt;true&lt;/code&gt; の場合に&lt;em&gt;のみ&lt;/em&gt;状態ドキュメントが送信されます。 &lt;code&gt;includeInitial&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合のみ、初期値が送信されます。場合 &lt;code&gt;includeStates&lt;/code&gt; があり &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;includeInitial&lt;/code&gt; が偽である、フィード上の最初の文書は次のようになります &lt;code&gt;{state:'ready'}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1aa3213c8e5b544991124ed5c55d376f49994e0a" translate="yes" xml:space="preserve">
          <source>Starting with version 1.16, RethinkDB maintains special &lt;em&gt;system tables&lt;/em&gt; that contain configuration and status information about servers, databases, individual tables, and issues with the cluster. Querying system tables returns information about the status of the cluster and current objects (such as servers and tables) within the cluster. By inserting or deleting records and updating fields in these tables, the configuration of the objects they represent can be modified.</source>
          <target state="translated">バージョン1.16から、RethinkDBはサーバー、データベース、個々のテーブル、およびクラスターの問題に関する構成およびステータス情報を含む特別な&lt;em&gt;システムテーブル&lt;/em&gt;を維持します。システムテーブルにクエリを実行すると、クラスターのステータスとクラスター内の現在のオブジェクト（サーバーやテーブルなど）に関する情報が返されます。これらのテーブルのレコードを挿入または削除し、フィールドを更新することにより、それらが表すオブジェクトの構成を変更できます。</target>
        </trans-unit>
        <trans-unit id="081c1e1e4da3f29bf8bb20597a5735c3791932d3" translate="yes" xml:space="preserve">
          <source>Starting with version 2.3, RethinkDB offers the ability to secure connections between servers, between servers and clients, and to the web UI using &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;TLS&lt;/a&gt; encryption (the successor to SSL). Securing RethinkDB in this fashion is similar to securing a web site with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Self-signed_certificate&quot;&gt;self-signed SSL certificate&lt;/a&gt;: create a private key and a certificate, then tell the server to use them.</source>
          <target state="translated">バージョン2.3以降、RethinkDBはサーバー間、サーバーとクライアント間、および&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;TLS&lt;/a&gt;暗号化（SSLの後継）を使用してWeb UIへの接続を保護する機能を提供します。この方法でRethinkDBを保護することは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Self-signed_certificate&quot;&gt;自己署名SSL証明書で&lt;/a&gt; Webサイトを保護することに似ています。秘密鍵と証明書を作成し、それらを使用するようにサーバーに指示します。</target>
        </trans-unit>
        <trans-unit id="628d8665c0efb2b1546a9290b8d06a906ef6f696" translate="yes" xml:space="preserve">
          <source>Startup as a Windows service</source>
          <target state="translated">Windowsサービスとしての起動</target>
        </trans-unit>
        <trans-unit id="a14ca71f5de11ac16b741f2895038968e30fa95f" translate="yes" xml:space="preserve">
          <source>Startup with init.d</source>
          <target state="translated">init.dで起動</target>
        </trans-unit>
        <trans-unit id="ea9b605703b9aa1d999b8932d0180fd06fb42587" translate="yes" xml:space="preserve">
          <source>Startup with launchd (OS X)</source>
          <target state="translated">launchd(OS X)で起動</target>
        </trans-unit>
        <trans-unit id="f4e43708be29e49c1ec1aa4189305be5e1934e28" translate="yes" xml:space="preserve">
          <source>Startup with systemd</source>
          <target state="translated">systemdでの起動</target>
        </trans-unit>
        <trans-unit id="2086b21f8f49274138c38d476bee317a84a8aecc" translate="yes" xml:space="preserve">
          <source>Statistics</source>
          <target state="translated">Statistics</target>
        </trans-unit>
        <trans-unit id="f1b89f18db10edb807e2bb4dbf71b7f25ac69016" translate="yes" xml:space="preserve">
          <source>Status tables</source>
          <target state="translated">ステータステーブル</target>
        </trans-unit>
        <trans-unit id="dc416e1088e4bf094dfc9abe0210e0288f5a169e" translate="yes" xml:space="preserve">
          <source>Step</source>
          <target state="translated">Step</target>
        </trans-unit>
        <trans-unit id="15679a4a26f9a6ba3a691493d6beeae10a421041" translate="yes" xml:space="preserve">
          <source>Stopping a Handler</source>
          <target state="translated">ハンドラーの停止</target>
        </trans-unit>
        <trans-unit id="cbffd52d681c0a57ba768a7b13d045efc1626e9c" translate="yes" xml:space="preserve">
          <source>Stores queries and their results, and displays them from a web interface.</source>
          <target state="translated">クエリとその結果を保存し、Web インターフェースから表示します。</target>
        </trans-unit>
        <trans-unit id="051adf2dce81e4edeb3804a2a2cc5362ddbcbd3a" translate="yes" xml:space="preserve">
          <source>Storing and enriching API data</source>
          <target state="translated">APIデータの保存と充実</target>
        </trans-unit>
        <trans-unit id="0c202e6f4f3c0ecb61addbe0a44f03640e49acaf" translate="yes" xml:space="preserve">
          <source>Storing binary objects</source>
          <target state="translated">バイナリオブジェクトの保存</target>
        </trans-unit>
        <trans-unit id="f99d2614f3e61769cb31cbb3d64230a0bf9792bd" translate="yes" xml:space="preserve">
          <source>Storing timestamps and JSON date strings as Time data types</source>
          <target state="translated">タイムスタンプとJSONの日付文字列をTimeデータ型として保存する</target>
        </trans-unit>
        <trans-unit id="421ed75a3333e9d8c5cea75e785430b7939cdab5" translate="yes" xml:space="preserve">
          <source>Storing uploaded files in the database</source>
          <target state="translated">アップロードされたファイルをデータベースに保存する</target>
        </trans-unit>
        <trans-unit id="36dda565904ac283e012045f6d9e7daf872d0a13" translate="yes" xml:space="preserve">
          <source>Storing user avatars</source>
          <target state="translated">ユーザーアバターの保存</target>
        </trans-unit>
        <trans-unit id="37fcd98b3c8b91061836eba59a7019ed4b18d372" translate="yes" xml:space="preserve">
          <source>Streams and feeds are lazily-computed sequences, and return a &lt;code&gt;ResponseType&lt;/code&gt; of &lt;code&gt;SUCCESS_PARTIAL&lt;/code&gt; (&lt;code&gt;3&lt;/code&gt;), with currently available data in the &lt;code&gt;r&lt;/code&gt; array. When the driver receives a feed or stream, it should return a cursor (or an object with a cursor-like interface). &lt;em&gt;N.B.:&lt;/em&gt;&lt;code&gt;SUCCESS_SEQUENCE&lt;/code&gt; and &lt;code&gt;SUCCESS_PARTIAL&lt;/code&gt; responses should be both be represented as cursors. Depending on the size of the query results and the time it takes to return them, you may receive either one &lt;code&gt;SUCCESS_SEQUENCE&lt;/code&gt; result, or one or more &lt;code&gt;SUCCESS_PARTIAL&lt;/code&gt; results followed by a final &lt;code&gt;SUCCESS_SEQUENCE&lt;/code&gt; result.</source>
          <target state="translated">ストリームおよびフィードはレイジーに計算する配列であり、戻り &lt;code&gt;ResponseType&lt;/code&gt; の &lt;code&gt;SUCCESS_PARTIAL&lt;/code&gt; （ &lt;code&gt;3&lt;/code&gt; において現在利用可能なデータを用いて、） &lt;code&gt;r&lt;/code&gt; 個のアレイ。ドライバーは、フィードまたはストリームを受け取ると、カーソル（またはカーソルのようなインターフェースを持つオブジェクト）を返す必要があります。&lt;em&gt;注意：&lt;/em&gt; &lt;code&gt;SUCCESS_SEQUENCE&lt;/code&gt; と &lt;code&gt;SUCCESS_PARTIAL&lt;/code&gt; の応答はどちらもカーソルとして表す必要があります。クエリ結果のサイズとそれらを返すのにかかる時間に応じて、1つの &lt;code&gt;SUCCESS_SEQUENCE&lt;/code&gt; 結果、または1つ以上の &lt;code&gt;SUCCESS_PARTIAL&lt;/code&gt; 結果に続いて最後の &lt;code&gt;SUCCESS_SEQUENCE&lt;/code&gt; 結果を受け取る場合があります。</target>
        </trans-unit>
        <trans-unit id="cb6c4efeac903a0003cef92ddf354bd1374cf2f1" translate="yes" xml:space="preserve">
          <source>Streams use &amp;ldquo;lazy loading,&amp;rdquo; a concept you may have run across in other database interfaces. Instead of returning an entire result set from a query, streams return an &lt;a href=&quot;http://en.wikipedia.org/wiki/Iterator&quot;&gt;iterator&lt;/a&gt; referred to as a &amp;ldquo;cursor,&amp;rdquo; a pointer into the data set.</source>
          <target state="translated">ストリームは「遅延読み込み」を使用します。これは、他のデータベースインターフェースで遭遇した概念です。クエリから結果セット全体を返す代わりに、ストリームは「カーソル」と呼ばれる&lt;a href=&quot;http://en.wikipedia.org/wiki/Iterator&quot;&gt;イテレータを&lt;/a&gt;返し、データセットへのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="bdd49f40eb94b20bc3d437ca36ad5830377fda8e" translate="yes" xml:space="preserve">
          <source>String Manipulation</source>
          <target state="translated">文字列の操作</target>
        </trans-unit>
        <trans-unit id="411f94c6ca34e4478bca225615707da562686a1d" translate="yes" xml:space="preserve">
          <source>String manipulation</source>
          <target state="translated">文字列操作</target>
        </trans-unit>
        <trans-unit id="7c8cf84261f17414d41a19324152deb0638ecb13" translate="yes" xml:space="preserve">
          <source>Subcommands</source>
          <target state="translated">Subcommands</target>
        </trans-unit>
        <trans-unit id="bbd17ca7716d1959474368eb0c63e1ad9ad957be" translate="yes" xml:space="preserve">
          <source>Subqueries</source>
          <target state="translated">Subqueries</target>
        </trans-unit>
        <trans-unit id="98e916c3bddbbc175b04c5eaa8de99d155cbe03c" translate="yes" xml:space="preserve">
          <source>Subqueries can be abstracted in variables, which allows for modular programming in the same way as done by most other modern programming languages.</source>
          <target state="translated">副問い合わせは変数で抽象化することができ、他のほとんどの最新のプログラミング言語で行われているのと同じ方法でモジュラープログラミングを行うことができます。</target>
        </trans-unit>
        <trans-unit id="e97aae2f87eb9b6796d483ee8974c03c1e5ba9e2" translate="yes" xml:space="preserve">
          <source>Subscribe to a feed by calling &lt;a href=&quot;../../../api/javascript/changes/index&quot;&gt;changes&lt;/a&gt; on a table:</source>
          <target state="translated">テーブルの&lt;a href=&quot;../../../api/javascript/changes/index&quot;&gt;変更&lt;/a&gt;を呼び出して、フィードを購読します。</target>
        </trans-unit>
        <trans-unit id="cf8a466677b83f4e1f4df6f8b69bf7ba43beb2b7" translate="yes" xml:space="preserve">
          <source>Subscribe to the &lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#!forum/rethinkdb-dev&quot;&gt;RethinkDB driver developers group&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#!forum/rethinkdb-dev&quot;&gt;RethinkDBドライバー開発者グループに&lt;/a&gt;登録してください。</target>
        </trans-unit>
        <trans-unit id="395d7a75e1ae0564bdd8d6d6363f8537be3bc1c5" translate="yes" xml:space="preserve">
          <source>Subscribers create a changefeed on the &lt;code&gt;Exchange&lt;/code&gt;&amp;rsquo;s table, filtering for changes that mention documents matching their topic queries.</source>
          <target state="translated">サブスクライバーは、 &lt;code&gt;Exchange&lt;/code&gt; のテーブルに変更フィードを作成し、トピッククエリに一致するドキュメントに言及する変更をフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="7b2a790bdd19b116e81ba00ed519edb942e324e3" translate="yes" xml:space="preserve">
          <source>Subscribing to changefeeds</source>
          <target state="translated">changefeedsを購読する</target>
        </trans-unit>
        <trans-unit id="6a4dd28a2000f4de189f22a02e6a44d6093e120e" translate="yes" xml:space="preserve">
          <source>Subscribing to hierarchical topics</source>
          <target state="translated">階層化されたトピックへのサブスクライブ</target>
        </trans-unit>
        <trans-unit id="a6e859ee0a008ef4fd60b3c46f2e406a1c004727" translate="yes" xml:space="preserve">
          <source>Subscribing to topics using regex</source>
          <target state="translated">正規表現を使用したトピックの購読</target>
        </trans-unit>
        <trans-unit id="0128e284e80f24203df15083d6d063f8f03c858d" translate="yes" xml:space="preserve">
          <source>Subscribing to topics using tags</source>
          <target state="translated">タグを使ってトピックを購読する</target>
        </trans-unit>
        <trans-unit id="9dd600d816401a97bb7171cf8a4a1a7bf7c906c0" translate="yes" xml:space="preserve">
          <source>Subtract two numbers.</source>
          <target state="translated">2つの数字を引き算します。</target>
        </trans-unit>
        <trans-unit id="4efe5ba11913e60899922a574c9310ce44547cf0" translate="yes" xml:space="preserve">
          <source>Sum two or more numbers, or concatenate two or more strings or arrays.</source>
          <target state="translated">2つ以上の数値を合計したり、2つ以上の文字列や配列を連結したりします。</target>
        </trans-unit>
        <trans-unit id="3c265c2ec47c266f4eddd985a602248cf1492e23" translate="yes" xml:space="preserve">
          <source>Sums all the elements of a sequence. If called with a field name, sums all the values of that field in the sequence, skipping elements of the sequence that lack that field. If called with a function, calls that function on every element of the sequence and sums the results, skipping elements of the sequence where that function returns &lt;code&gt;null&lt;/code&gt; or a non-existence error.</source>
          <target state="translated">シーケンスのすべての要素を合計します。フィールド名を指定して呼び出された場合、シーケンス内のそのフィールドのすべての値を合計し、そのフィールドがないシーケンスの要素をスキップします。関数で呼び出された場合、シーケンスのすべての要素でその関数を呼び出し、結果を合計します。その関数が &lt;code&gt;null&lt;/code&gt; または存在しないエラーを返すシーケンスの要素はスキップされます。</target>
        </trans-unit>
        <trans-unit id="d8b6182e4e1fbdaf3ea143a384f18f88f4f511f0" translate="yes" xml:space="preserve">
          <source>Superheroes tutorial</source>
          <target state="translated">スーパーヒーローのチュートリアル</target>
        </trans-unit>
        <trans-unit id="89bc1824e398cf96683dfbc223ebb34785115277" translate="yes" xml:space="preserve">
          <source>Supported options</source>
          <target state="translated">サポートされているオプション</target>
        </trans-unit>
        <trans-unit id="0e292d899e02633c2e04b35d5deb85171e7578e3" translate="yes" xml:space="preserve">
          <source>Suppose a data set that lists top movies, ranked by user vote. You&amp;rsquo;d like to get the total votes and the average age of the top 25 movies: the &lt;code&gt;avg()&lt;/code&gt; of the &lt;code&gt;year&lt;/code&gt; column and the &lt;code&gt;sum()&lt;/code&gt; of the &lt;code&gt;votes&lt;/code&gt; column, ordered by the &lt;code&gt;rank&lt;/code&gt; column to get the range 1&amp;ndash;25.</source>
          <target state="translated">ユーザーの投票によってランク付けされた上位の映画をリストするデータセットを想定します。上位25の映画の総投票数と平均年齢を取得したいと思います。 &lt;code&gt;year&lt;/code&gt; 列の &lt;code&gt;avg()&lt;/code&gt; と &lt;code&gt;votes&lt;/code&gt; 列の &lt;code&gt;sum()&lt;/code&gt; を、 &lt;code&gt;rank&lt;/code&gt; 列で1〜25の範囲で並べ替えます。</target>
        </trans-unit>
        <trans-unit id="8b899c315ce40799000302d06bdb519d66498dd3" translate="yes" xml:space="preserve">
          <source>Suppose each post has a field &lt;code&gt;tags&lt;/code&gt; that maps to an array of tags. The schema of the table &lt;code&gt;posts&lt;/code&gt; would be something like:</source>
          <target state="translated">各投稿に、 &lt;code&gt;tags&lt;/code&gt; の配列にマップするフィールドタグがあるとします。テーブル &lt;code&gt;posts&lt;/code&gt; のスキーマは次のようになります。</target>
        </trans-unit>
        <trans-unit id="482306a03a24119b4b1e772995e3616816ebe2c3" translate="yes" xml:space="preserve">
          <source>Suppose its output is as follows:</source>
          <target state="translated">その出力が以下のようになっているとします。</target>
        </trans-unit>
        <trans-unit id="305076c03efbc539dfa0aa5fe524a8ad5027bba7" translate="yes" xml:space="preserve">
          <source>Suppose on the blog in the last example, you&amp;rsquo;d like to retrieve the number of posts &lt;em&gt;per category.&lt;/em&gt; A map-reduce query to perform this operation would consist of the following steps:</source>
          <target state="translated">前の例のブログで、&lt;em&gt;カテゴリごと&lt;/em&gt;の投稿数を取得するとし&lt;em&gt;ます。&lt;/em&gt;この操作を実行するmap-reduceクエリは、次の手順で構成されます。</target>
        </trans-unit>
        <trans-unit id="9fc193e9aee3048beb3caf5658d764b058365ee8" translate="yes" xml:space="preserve">
          <source>Suppose that our data model for the employees stores a company name instead of a company id:</source>
          <target state="translated">従業員のデータモデルには、会社IDではなく会社名が格納されているとします。</target>
        </trans-unit>
        <trans-unit id="ba7f91272a3804d75a6598e1f3bad96058fabbf5" translate="yes" xml:space="preserve">
          <source>Suppose that the table &lt;code&gt;games2&lt;/code&gt; has the following data:</source>
          <target state="translated">テーブル &lt;code&gt;games2&lt;/code&gt; に次のデータがあるとします。</target>
        </trans-unit>
        <trans-unit id="d618567de8457f4e1f435d12d614a8fa312d9700" translate="yes" xml:space="preserve">
          <source>Suppose that the table &lt;code&gt;games&lt;/code&gt; has the following data:</source>
          <target state="translated">テーブル &lt;code&gt;games&lt;/code&gt; に次のデータがあるとします。</target>
        </trans-unit>
        <trans-unit id="06104ac359e508ccef4ef32dfaf2a4fdca0b82b0" translate="yes" xml:space="preserve">
          <source>Suppose that you want to keep the &lt;code&gt;id&lt;/code&gt; field of the employee, but not the one of the company. You can do it by removing the field &lt;code&gt;right.id&lt;/code&gt;, then calling the &lt;code&gt;zip&lt;/code&gt; command.</source>
          <target state="translated">会社の &lt;code&gt;id&lt;/code&gt; フィールドではなく、従業員のIDフィールドを保持したいとします。これを行うには、フィールド &lt;code&gt;right.id&lt;/code&gt; を削除してから、 &lt;code&gt;zip&lt;/code&gt; コマンドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="27c97e208254d412ff656573ce4566923a071cae" translate="yes" xml:space="preserve">
          <source>Suppose the players table contains these documents:</source>
          <target state="translated">プレイヤーテーブルにこれらの文書が含まれているとします。</target>
        </trans-unit>
        <trans-unit id="55d631d358f622eb48a20000ddcdf5a71d5d16d0" translate="yes" xml:space="preserve">
          <source>Suppose the table &lt;code&gt;marks&lt;/code&gt; stores the marks of every students per course:</source>
          <target state="translated">テーブル &lt;code&gt;marks&lt;/code&gt; コースごとのすべての学生のマークを格納するとします。</target>
        </trans-unit>
        <trans-unit id="863abd28999d7a33805cde5f619af1857cb2ffb2" translate="yes" xml:space="preserve">
          <source>Suppose we have a table &lt;code&gt;posts&lt;/code&gt; that links posts to authors via an &lt;code&gt;author_id&lt;/code&gt; field. If we&amp;rsquo;ve created a secondary index on &lt;code&gt;author_id&lt;/code&gt; and want to retrieve all the posts where &lt;code&gt;author_id&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, or &lt;code&gt;3&lt;/code&gt;, we can use the &lt;code&gt;getAll&lt;/code&gt; command to do it as follows:</source>
          <target state="translated">&lt;code&gt;author_id&lt;/code&gt; フィールドを介して投稿を作成者にリンクするテーブルの &lt;code&gt;posts&lt;/code&gt; とします。我々は上のセカンダリインデックス作成した場合 &lt;code&gt;author_id&lt;/code&gt; し、すべてのポスト取得したい &lt;code&gt;author_id&lt;/code&gt; ある &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;2&lt;/code&gt; 、または &lt;code&gt;3&lt;/code&gt; を、我々は使用することができる &lt;code&gt;getAll&lt;/code&gt; 次のようにそれを行うには、コマンドを：</target>
        </trans-unit>
        <trans-unit id="dd69d64d9d90f1021ac7cab49f4dced356698803" translate="yes" xml:space="preserve">
          <source>Suppose we have a table &lt;code&gt;users&lt;/code&gt; with documents of the following form:</source>
          <target state="translated">次の形式のドキュメントを持つテーブル &lt;code&gt;users&lt;/code&gt; があるとします。</target>
        </trans-unit>
        <trans-unit id="b1f14a9832b9f642f0b36d37ee55787766eea3b7" translate="yes" xml:space="preserve">
          <source>Suppose we have ten documents in a single category in a sharded table. Four of the documents are on shard 1; six are on shard 2. When the incorrect query is executed, this is its path:</source>
          <target state="translated">1つのカテゴリに10個の文書があるとします。ドキュメントのうち4つはシャード1にあり、6つはシャード2にあります。不正確なクエリが実行されたとき、これがそのパスです。</target>
        </trans-unit>
        <trans-unit id="ecab01432f8dcfd29db07faed3306d03f5f21cc7" translate="yes" xml:space="preserve">
          <source>Suppose we want to rename the field &lt;code&gt;id&lt;/code&gt; to &lt;code&gt;idUser&lt;/code&gt; when retrieving documents from the table &lt;code&gt;users&lt;/code&gt;. In the subquery, we can use &lt;code&gt;merge&lt;/code&gt; to add a new field with the existing field&amp;rsquo;s value, then &lt;code&gt;without&lt;/code&gt; to delete the old field:</source>
          <target state="translated">テーブル &lt;code&gt;users&lt;/code&gt; からドキュメントを取得するときに、フィールド &lt;code&gt;id&lt;/code&gt; の名前を &lt;code&gt;idUser&lt;/code&gt; に変更するとします。サブクエリでは、 &lt;code&gt;merge&lt;/code&gt; を使用して既存のフィールドの値で新しいフィールドを追加し、次に古いフィールドを削除する必要はあり &lt;code&gt;without&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd8284b9c5ecd12c0da7cb055be040ad759da9ca" translate="yes" xml:space="preserve">
          <source>Suppose we&amp;rsquo;d like to to retrieve all the posts in the table &lt;code&gt;post&lt;/code&gt; and also return an additional field, &lt;code&gt;comments&lt;/code&gt;, which is an array of all the comments for the relevant post retrieved from the &lt;code&gt;comments&lt;/code&gt; table. We could do this using a subquery:</source>
          <target state="translated">テーブル &lt;code&gt;post&lt;/code&gt; 内のすべての投稿を取得し、 &lt;code&gt;comments&lt;/code&gt; テーブルから取得した関連投稿のすべてのコメントの配列である追加の &lt;code&gt;comments&lt;/code&gt; も返したいとします。これはサブクエリを使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="efa9d5fab76e05214df4eea4580738c57dea1f05" translate="yes" xml:space="preserve">
          <source>Suppose we&amp;rsquo;d like to trim down our database and delete every document with less than three posts (sorry Laura and Jean-Luc):</source>
          <target state="translated">データベースを縮小して、投稿が3つ未満のすべてのドキュメントを削除したいとします（申し訳ありませんが、LauraとJean-Luc）。</target>
        </trans-unit>
        <trans-unit id="d9835b16eff20fd64f058bf8e513bffb08e5156e" translate="yes" xml:space="preserve">
          <source>Suppose you are running a blog and would like to retrieve the number of posts. A map-reduce query to perform this operation would consist of the following steps:</source>
          <target state="translated">ブログを運営していて、投稿数を取得したいとします。この操作を実行するためのMap-reduceクエリは、以下のステップで構成されています。</target>
        </trans-unit>
        <trans-unit id="6cc205fe6a19e66a7e73ca9c5922fd6934973caf" translate="yes" xml:space="preserve">
          <source>Suppose you have a chat application with multiple clients posting messages to different chat rooms. You can create feeds that subscribe to messages posted to a specific room:</source>
          <target state="translated">複数のクライアントが異なるチャットルームにメッセージを投稿するチャットアプリケーションがあるとします。特定のチャットルームに投稿されたメッセージを購読するフィードを作成することができます。</target>
        </trans-unit>
        <trans-unit id="4768ff13957450b6b322ffdb25a724ae46b0c89e" translate="yes" xml:space="preserve">
          <source>Suppose you want to retrieve all the posts whose date field is between January 1st, 2012 (included) and January 1st, 2013 (excluded). You could do:</source>
          <target state="translated">2012年1月1日(含む)から2013年1月1日(除く)までの間の日付フィールドを持つすべての投稿を取得したいとします。このようにすることができます。</target>
        </trans-unit>
        <trans-unit id="9216a7cff4538f532284ba814135bf0e53d98d0a" translate="yes" xml:space="preserve">
          <source>Suppose you wanted to paginate through a set of users, 25 at a time. You could get the first 25 records efficiently just with &lt;code&gt;limit&lt;/code&gt;.</source>
          <target state="translated">一度に25人のユーザーのセットをページ分割したいとします。 &lt;code&gt;limit&lt;/code&gt; を設けるだけで、最初の25レコードを効率的に取得できます。</target>
        </trans-unit>
        <trans-unit id="95b01a971703b06e82b48250dccd360ac1fa7f30" translate="yes" xml:space="preserve">
          <source>Suppose you&amp;rsquo;d like to select all posts where the author&amp;rsquo;s name is &amp;ldquo;Michel&amp;rdquo; and the category is &amp;ldquo;Geek&amp;rdquo;. You can do it as follows:</source>
          <target state="translated">著者名が「Michel」で、カテゴリが「Geek」であるすべての投稿を選択するとします。次のようにして行うことができます。</target>
        </trans-unit>
        <trans-unit id="112ab020698e5fc0f4baecd7821a512d8c419a69" translate="yes" xml:space="preserve">
          <source>Swift</source>
          <target state="translated">Swift</target>
        </trans-unit>
        <trans-unit id="743511a74be1661649c25f5e4f7c29ad8a83ec91" translate="yes" xml:space="preserve">
          <source>Synced with Redux</source>
          <target state="translated">Reduxと同期</target>
        </trans-unit>
        <trans-unit id="c7754a0126d0aaf46fbebc210b5eb50440b996eb" translate="yes" xml:space="preserve">
          <source>System current issues table</source>
          <target state="translated">システムの現在の問題表</target>
        </trans-unit>
        <trans-unit id="a79086ea99038c78fcb10e82dc0b55ccbabff535" translate="yes" xml:space="preserve">
          <source>System jobs table</source>
          <target state="translated">システムジョブ表</target>
        </trans-unit>
        <trans-unit id="53fde7d284da785ea8c756a4755a1cf1a647fc31" translate="yes" xml:space="preserve">
          <source>System statistics table</source>
          <target state="translated">システム統計表</target>
        </trans-unit>
        <trans-unit id="a79611699266ef0b5f43b2792f98671886bdc4f7" translate="yes" xml:space="preserve">
          <source>System tables</source>
          <target state="translated">システムテーブル</target>
        </trans-unit>
        <trans-unit id="4722f1e7452b133171f8fe49038f80cb4d543dc4" translate="yes" xml:space="preserve">
          <source>TABLE and DATABASE manipulation</source>
          <target state="translated">テーブルとデータベースの操作</target>
        </trans-unit>
        <trans-unit id="a8de37891fde68bb5a0ec54a33871e33ff0b04f7" translate="yes" xml:space="preserve">
          <source>TLS options</source>
          <target state="translated">TLS オプション</target>
        </trans-unit>
        <trans-unit id="ffc959723a236b0cc6de0f357ad16f5a6da878a5" translate="yes" xml:space="preserve">
          <source>Table availability issues</source>
          <target state="translated">テーブルの可用性の問題</target>
        </trans-unit>
        <trans-unit id="d6bb93a216207f4b9e299da1815f37b802ab7b33" translate="yes" xml:space="preserve">
          <source>Table joins in RethinkDB</source>
          <target state="translated">RethinkDBでのテーブル結合</target>
        </trans-unit>
        <trans-unit id="49276d64118baef926d34027bbab4e81079248fe" translate="yes" xml:space="preserve">
          <source>Tables will be available for writing when the command returns.</source>
          <target state="translated">コマンドが戻ると、テーブルが書き込めるようになります。</target>
        </trans-unit>
        <trans-unit id="1d7222b89a2e8be0d6d59f735ee4900bd39725c7" translate="yes" xml:space="preserve">
          <source>Tables with unevenly distributed primary keys, such as incrementing integers</source>
          <target state="translated">整数のインクリメントなど、主キーが不均等に分布しているテーブル</target>
        </trans-unit>
        <trans-unit id="3daa2b71e58a54876d28ede052b3a2e246f8ecd2" translate="yes" xml:space="preserve">
          <source>Take the &lt;code&gt;do&lt;/code&gt; command:</source>
          <target state="translated">テイク &lt;code&gt;do&lt;/code&gt; コマンドを：</target>
        </trans-unit>
        <trans-unit id="38f1d76bf20f6fcdc6d187bbc76cd6436670d3f9" translate="yes" xml:space="preserve">
          <source>Take the function:</source>
          <target state="translated">関数を取る。</target>
        </trans-unit>
        <trans-unit id="cea65d922ed277d1704ab2878b724b53c61de751" translate="yes" xml:space="preserve">
          <source>Takes a grouped stream or grouped data and turns it into an array of objects representing the groups. Any commands chained after &lt;code&gt;ungroup&lt;/code&gt; will operate on this array, rather than operating on each group individually. This is useful if you want to e.g. order the groups by the value of their reduction.</source>
          <target state="translated">グループ化されたストリームまたはグループ化されたデータを受け取り、それをグループを表すオブジェクトの配列に変換します。 &lt;code&gt;ungroup&lt;/code&gt; 後にチェーンされたコマンドは、各グループを個別に操作するのではなく、このアレイを操作します。これは、たとえば、削減の値でグループを並べ替える場合に便利です。</target>
        </trans-unit>
        <trans-unit id="5d5c093f525fdc79a9ecef536f2adf23e1bcd059" translate="yes" xml:space="preserve">
          <source>Takes a stream and partitions it into multiple groups based on the fields or functions provided.</source>
          <target state="translated">ストリームを取得し、提供されたフィールドや関数に基づいて複数のグループに分割します。</target>
        </trans-unit>
        <trans-unit id="4be37be90bfccb09eab627d2a5d3f9b1c85287e5" translate="yes" xml:space="preserve">
          <source>Technical details</source>
          <target state="translated">技術的な詳細</target>
        </trans-unit>
        <trans-unit id="b3009d114dbbdc48b07c50727c55f8923baa1735" translate="yes" xml:space="preserve">
          <source>Telling RethinkDB to use your certificate</source>
          <target state="translated">証明書を使用するようにRethinkDBに指示する</target>
        </trans-unit>
        <trans-unit id="e86033a1c268fcd57c5544ec342f884426872fe2" translate="yes" xml:space="preserve">
          <source>Ten-minute guide</source>
          <target state="translated">10分ガイド</target>
        </trans-unit>
        <trans-unit id="62bdf5b0f1b1c7afa76df4a0ec827e816d32887c" translate="yes" xml:space="preserve">
          <source>Ten-minute guide with RethinkDB and JavaScript</source>
          <target state="translated">RethinkDBとJavaScriptを使った10分ガイド</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="580faa9f93143659082ee75418784f7ed233bc25" translate="yes" xml:space="preserve">
          <source>Test if a sequence is empty.</source>
          <target state="translated">シーケンスが空かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="296fed50cb31e21915661693ea1b41c564ed266a" translate="yes" xml:space="preserve">
          <source>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object &lt;code&gt;{'a': 1,'b': 2,'c': null}&lt;/code&gt; has the fields &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">オブジェクトに1つ以上のフィールドがあるかどうかをテストします。オブジェクトにそのキーがあり、キーにnull以外の値がある場合、オブジェクトにはフィールドがあります。たとえば、オブジェクト &lt;code&gt;{'a': 1,'b': 2,'c': null}&lt;/code&gt; は、フィールド &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="2b712c0d5fab5555a5ee001f73a9eae6fd7e22ee" translate="yes" xml:space="preserve">
          <source>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object &lt;code&gt;{'a':1,'b':2,'c':null}&lt;/code&gt; has the fields &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">オブジェクトに1つ以上のフィールドがあるかどうかをテストします。キーがあり、キーにnull以外の値がある場合、オブジェクトにはフィールドがあります。たとえば、オブジェクト &lt;code&gt;{'a':1,'b':2,'c':null}&lt;/code&gt; にはフィールド &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="a4c77a6841ba72ffccbbcea87b18fbf2a42ef680" translate="yes" xml:space="preserve">
          <source>Test if two or more values are equal.</source>
          <target state="translated">2つ以上の値が等しいかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="e87a117ac7aa25ab290c4818f470f3ebbcce0e19" translate="yes" xml:space="preserve">
          <source>Test if two or more values are not equal.</source>
          <target state="translated">2つ以上の値が等しくないかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="a5a0b0052fc126b71716d72a6f07f95c3595919b" translate="yes" xml:space="preserve">
          <source>Tests the response time for analytic MapReduce queries involving string operations</source>
          <target state="translated">文字列操作を含むMapReduceの解析クエリの応答時間をテストする</target>
        </trans-unit>
        <trans-unit id="bcb4d0c346b77ce8d2b0806c1febeba5bff03f3d" translate="yes" xml:space="preserve">
          <source>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, &lt;code&gt;includes&lt;/code&gt; acts as a &lt;a href=&quot;../filter/index&quot;&gt;filter&lt;/a&gt;, returning a sequence of objects from the sequence that include the argument.</source>
          <target state="translated">ジオメトリオブジェクトが別のオブジェクトに完全に含まれているかどうかをテストします。ジオメトリ・オブジェクトの配列に適用されるとき、 &lt;code&gt;includes&lt;/code&gt; として作用する&lt;a href=&quot;../filter/index&quot;&gt;フィルタ&lt;/a&gt;引数を含む配列からオブジェクトの配列を返します。</target>
        </trans-unit>
        <trans-unit id="32ad66b24a210fe5fb7c74854564c5c2404f940b" translate="yes" xml:space="preserve">
          <source>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, &lt;code&gt;includes&lt;/code&gt; acts as a &lt;a href=&quot;filter/index&quot;&gt;filter&lt;/a&gt;, returning a sequence of objects from the sequence that include the argument.</source>
          <target state="translated">ジオメトリオブジェクトが別のオブジェクトに完全に含まれているかどうかをテストします。ジオメトリ・オブジェクトの配列に適用されるとき、 &lt;code&gt;includes&lt;/code&gt; として作用する&lt;a href=&quot;filter/index&quot;&gt;フィルタ&lt;/a&gt;引数を含む配列からオブジェクトの配列を返します。</target>
        </trans-unit>
        <trans-unit id="76bc89a4bdfcbe6b5eb162678644e978de9e8662" translate="yes" xml:space="preserve">
          <source>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, &lt;code&gt;intersects&lt;/code&gt; acts as a &lt;a href=&quot;../filter/index&quot;&gt;filter&lt;/a&gt;, returning a sequence of objects from the sequence that intersect with the argument.</source>
          <target state="translated">2つのジオメトリオブジェクトが相互に交差するかどうかをテストします。ジオメトリオブジェクトのシーケンスに適用すると、 &lt;code&gt;intersects&lt;/code&gt; は&lt;a href=&quot;../filter/index&quot;&gt;フィルタ&lt;/a&gt;として機能し、引数と交差するシーケンスからオブジェクトのシーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="4f96ec5473cb3c525e604de3ef69ef3872d90917" translate="yes" xml:space="preserve">
          <source>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, &lt;code&gt;intersects&lt;/code&gt; acts as a &lt;a href=&quot;filter/index&quot;&gt;filter&lt;/a&gt;, returning a sequence of objects from the sequence that intersect with the argument.</source>
          <target state="translated">2つのジオメトリオブジェクトが相互に交差するかどうかをテストします。ジオメトリオブジェクトのシーケンスに適用すると、 &lt;code&gt;intersects&lt;/code&gt; は&lt;a href=&quot;filter/index&quot;&gt;フィルタ&lt;/a&gt;として機能し、引数と交差するシーケンスからオブジェクトのシーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="8bf2f9529e3017d5406fa32ca8a2854fd68af8da" translate="yes" xml:space="preserve">
          <source>That will preserve &lt;code&gt;city&lt;/code&gt; and other existing fields. But to replace the entire &lt;code&gt;data&lt;/code&gt; document with a new object, use &lt;code&gt;literal&lt;/code&gt;.</source>
          <target state="translated">それは &lt;code&gt;city&lt;/code&gt; と他の既存のフィールドを保護します。ただし、 &lt;code&gt;data&lt;/code&gt; ドキュメント全体を新しいオブジェクトに置き換えるには、 &lt;code&gt;literal&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="21ae0e5519ad676ec6cffc66040385b181bd25f7" translate="yes" xml:space="preserve">
          <source>The 8-byte unique query token</source>
          <target state="translated">8 バイトのユニークなクエリトークン</target>
        </trans-unit>
        <trans-unit id="d60bee9b6432ef97dc1ad43b46670489d6ce7524" translate="yes" xml:space="preserve">
          <source>The 8-byte unique query token the response corresponds to</source>
          <target state="translated">レスポンスが対応する 8 バイトのユニークなクエリトークン</target>
        </trans-unit>
        <trans-unit id="14e7b9dd7173a6825a4fbe67852ce2c6c8b61b25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../api/javascript/changes/index&quot;&gt;changes&lt;/a&gt; command API reference</source>
          <target state="translated">&lt;a href=&quot;../../../api/javascript/changes/index&quot;&gt;変更&lt;/a&gt;コマンドAPIリファレンスを</target>
        </trans-unit>
        <trans-unit id="b689a67f47be5478bbcb1a5da019f30befb69c45" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../api/javascript/slice/index&quot;&gt;slice&lt;/a&gt; command returns a range from a given start value through but not including a given end value. This makes it easy to use as a &lt;code&gt;skip&lt;/code&gt;/&lt;code&gt;limit&lt;/code&gt; replacement: the start value is the first item to retrieve, and the end value is the first item plus the limit. To retrieve posts 11-20 from the database using &lt;code&gt;slice&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../../api/javascript/slice/index&quot;&gt;スライス&lt;/a&gt;コマンドは、指定された開始値から所定の最終値などを介してではなく、範囲を返します。これにより、 &lt;code&gt;skip&lt;/code&gt; / &lt;code&gt;limit&lt;/code&gt; 置換として簡単に使用できます。開始値は最初に取得する項目であり、終了値は最初の項目に制限を加えたものです。 &lt;code&gt;slice&lt;/code&gt; を使用してデータベースから投稿11〜20を取得するには、次の手順に従います。</target>
        </trans-unit>
        <trans-unit id="3fa14532ba532bad5e0a0fe4d1aafde94747bcac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../docs/administration-tools/index&quot;&gt;web UI&lt;/a&gt; (and the &lt;a href=&quot;../info/index&quot;&gt;info&lt;/a&gt; command) can be used to tell you when a table&amp;rsquo;s shards need to be rebalanced.</source>
          <target state="translated">&lt;a href=&quot;../../../docs/administration-tools/index&quot;&gt;ウェブUI&lt;/a&gt;（及び&lt;a href=&quot;../info/index&quot;&gt;情報&lt;/a&gt;コマンド）は、テーブルの破片をリバランスする必要がある場合、あなたに伝えるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="0b88a496bd9a54b173bbc02e5f424502c1760079" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../docs/data-types/index&quot;&gt;data type&lt;/a&gt; of a primary key is usually a string (like a UUID) or a number, but it can also be a time, binary object, boolean or an array. Data types can be mixed in the primary key field, but all values must be unique. Using an array as a primary key causes the primary key to behave like a compound index; read the documentation on &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index#compound-indexes&quot;&gt;compound secondary indexes&lt;/a&gt; for more information, as it applies to primary keys as well. (Note that the primary index still only covers a single field, while compound secondary indexes can cover multiple fields in a single index.) Primary keys cannot be objects.</source>
          <target state="translated">主キーの&lt;a href=&quot;../../../docs/data-types/index&quot;&gt;データ型&lt;/a&gt;は通常、文字列（UUIDなど）または数値ですが、時刻、バイナリオブジェクト、ブール値、または配列にすることもできます。主キーフィールドではデータタイプを混在させることができますが、すべての値は一意である必要があります。配列を主キーとして使用すると、主キーは複合インデックスのように動作します。主キーにも適用されるため、詳細については&lt;a href=&quot;../../../docs/secondary-indexes/javascript/index#compound-indexes&quot;&gt;複合セカンダリインデックス&lt;/a&gt;に関するドキュメントをご覧ください。（プライマリインデックスは単一のフィールドのみをカバーしますが、複合セカンダリインデックスは単一のインデックスの複数のフィールドをカバーできることに注意してください。）プライマリキーはオブジェクトにすることはできません。</target>
        </trans-unit>
        <trans-unit id="eea447ec8762465807261e23874776e14f996671" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../api/javascript/filter/index&quot;&gt;filter&lt;/a&gt; operation is performed in parallel on each shard of the &lt;code&gt;users&lt;/code&gt; table.</source>
          <target state="translated">&lt;a href=&quot;../../api/javascript/filter/index&quot;&gt;フィルタ&lt;/a&gt;操作は、各シャード上で並列に実行される &lt;code&gt;users&lt;/code&gt; テーブル。</target>
        </trans-unit>
        <trans-unit id="175363b1926f54cd38dc31893d76c1b6b52b1f68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../cookbook/javascript/index&quot;&gt;cookbook section&lt;/a&gt; for common queries and example snippets.</source>
          <target state="translated">一般的なクエリとサンプルスニペットの&lt;a href=&quot;../cookbook/javascript/index&quot;&gt;クックブックセクション&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4b211f6281d4b87c0697e2e20fe532338e2e0ab9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Publish-subscribe&quot;&gt;publish-subscribe pattern&lt;/a&gt; is a powerful way to decouple applications that need to communicate. RethinkDB &lt;a href=&quot;../../changefeeds/index&quot;&gt;changefeeds&lt;/a&gt; allow us to implement publish-subscribe with the database acting as a message exchange. We&amp;rsquo;ve built a small example library called &lt;a href=&quot;https://github.com/rethinkdb/example-pubsub/tree/master/javascript&quot;&gt;repubsub&lt;/a&gt; implementing the pattern for use in JavaScript applications.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Publish-subscribe&quot;&gt;パブリッシュ・サブスクライブ・パターンは&lt;/a&gt;、必要に通信することをデカップルアプリケーションに強力な方法です。 RethinkDBチェンジ&lt;a href=&quot;../../changefeeds/index&quot;&gt;フィードを&lt;/a&gt;使用すると、データベースをメッセージ交換として機能するパブリッシュ/サブスクライブを実装できます。JavaScriptアプリケーションで使用するパターンを実装する&lt;a href=&quot;https://github.com/rethinkdb/example-pubsub/tree/master/javascript&quot;&gt;repubsub&lt;/a&gt;という小さなサンプルライブラリを作成しました。</target>
        </trans-unit>
        <trans-unit id="f2c42c7b4a58d5425ef38d8bc03d53c63ea6af30" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Publish-subscribe&quot;&gt;publish-subscribe pattern&lt;/a&gt; is a powerful way to decouple applications that need to communicate. RethinkDB &lt;a href=&quot;../../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt; allow us to implement publish-subscribe with the database acting as a message exchange. We&amp;rsquo;ve built a small example library called &lt;a href=&quot;https://github.com/rethinkdb/example-pubsub/tree/master/javascript&quot;&gt;repubsub&lt;/a&gt; implementing the pattern for use in JavaScript applications.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Publish-subscribe&quot;&gt;パブリッシュ・サブスクライブ・パターンは&lt;/a&gt;、必要に通信することをデカップルアプリケーションに強力な方法です。RethinkDB &lt;a href=&quot;../../changefeeds/javascript/index&quot;&gt;changefeedsを&lt;/a&gt;使用すると、メッセージ交換として機能するデータベースでパブリッシュ/サブスクライブを実装できます。JavaScriptアプリケーションで使用するためのパターンを実装する&lt;a href=&quot;https://github.com/rethinkdb/example-pubsub/tree/master/javascript&quot;&gt;repubsub&lt;/a&gt;と呼ばれる小さなサンプルライブラリを作成しました。</target>
        </trans-unit>
        <trans-unit id="d91058933c549ee7f1fa7e049d7f4cf89934dd2a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://nobrainer.io/&quot;&gt;NoBrainer documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://nobrainer.io/&quot;&gt;NoBrainerドキュメント&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c7d392cdc77f861f51667a3ca36284f5b8708f0a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/mfenniak/rethinkdb-net/graphs/contributors&quot;&gt;rethinkdb-net team&lt;/a&gt; (C#/.NET): &lt;a href=&quot;https://github.com/mfenniak/rethinkdb-net&quot;&gt;https://github.com/mfenniak/rethinkdb-net&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/mfenniak/rethinkdb-net/graphs/contributors&quot;&gt;rethinkdbネットチーム&lt;/a&gt;（C＃/。NET）：&lt;a href=&quot;https://github.com/mfenniak/rethinkdb-net&quot;&gt;https://github.com/mfenniak/rethinkdb-net&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="444bed1a060381b627b7444756e334ab88f212cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/rethinkdb/YCSB/tree/a15e249d6b10147e615ddfaf03672bad35e85e7f&quot;&gt;RethinkDB port of YCSB&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rethinkdb/YCSB/tree/a15e249d6b10147e615ddfaf03672bad35e85e7f&quot;&gt;YCSBのRethinkDBポート&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a819fbe9a1937b1797d9c6a1ec035e0b9abad4d6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb-example-sinatra-pastie&quot;&gt;Sinatra example application&lt;/a&gt; for a different style of a Ruby web app using RethinkDB.</source>
          <target state="translated">RethinkDBを使用したRuby Webアプリの異なるスタイルの&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb-example-sinatra-pastie&quot;&gt;Sinatraサンプルアプリケーション&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="551d89155ea50718c64be4d84e790dfe4aa6d142" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rethinkdb.com/api/python/rebalance&quot;&gt;rebalance&lt;/a&gt; command will rebalance table shards.</source>
          <target state="translated">&lt;a href=&quot;https://rethinkdb.com/api/python/rebalance&quot;&gt;リバランスの&lt;/a&gt;コマンドは、テーブルの破片のバランスを再調整します。</target>
        </trans-unit>
        <trans-unit id="ebcc07dce1d9d2212f7f4ffb39f9574068495311" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rethinkdb.com/api/python/reconfigure&quot;&gt;reconfigure&lt;/a&gt; command can change the values for &lt;code&gt;shards&lt;/code&gt; and &lt;code&gt;replicas&lt;/code&gt; for an existing table.</source>
          <target state="translated">&lt;a href=&quot;https://rethinkdb.com/api/python/reconfigure&quot;&gt;再構成&lt;/a&gt;コマンドは、の値に変更することができ &lt;code&gt;shards&lt;/code&gt; や &lt;code&gt;replicas&lt;/code&gt; 既存のテーブルのために。</target>
        </trans-unit>
        <trans-unit id="9ce883ec8777da2140767df9008bd415119ca86b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rethinkdb.com/api/python/table_create&quot;&gt;table_create&lt;/a&gt; (or &lt;a href=&quot;../../api/javascript/table_create/index&quot;&gt;tableCreate&lt;/a&gt;) command can specify initial values for &lt;code&gt;shards&lt;/code&gt; and &lt;code&gt;replicas&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://rethinkdb.com/api/python/table_create&quot;&gt;table_create&lt;/a&gt;（または&lt;a href=&quot;../../api/javascript/table_create/index&quot;&gt;tableCreate&lt;/a&gt;）コマンドがの初期値を指定することができ &lt;code&gt;shards&lt;/code&gt; と &lt;code&gt;replicas&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6803c1ac084369b6f0438e238c22cc29c63583d9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rethinkdb.com/api/ruby&quot;&gt;ReQL API docs&lt;/a&gt; for information on RethinkDB commands.</source>
          <target state="translated">&lt;a href=&quot;https://rethinkdb.com/api/ruby&quot;&gt;ReQLのAPIドキュメント&lt;/a&gt; RethinkDBコマンドの詳細について。</target>
        </trans-unit>
        <trans-unit id="1bec986688114356ebaf7e0856bb503f1a7aaed2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;()&lt;/code&gt; command also accepts integer arguments as array offsets, like the &lt;a href=&quot;../nth/index&quot;&gt;nth&lt;/a&gt; command.</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; コマンドも同様に、アレイのオフセットとして整数の引数を受け取り&lt;a href=&quot;../nth/index&quot;&gt;、n番目の&lt;/a&gt;コマンド。</target>
        </trans-unit>
        <trans-unit id="0035a462582333656fdc80527201e302fa8b879a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--bind&lt;/code&gt; option controls the default behavior for all RethinkDB ports. If it&amp;rsquo;s specified, the &lt;code&gt;--bind-http&lt;/code&gt;, &lt;code&gt;--bind-cluster&lt;/code&gt; and &lt;code&gt;--bind-driver&lt;/code&gt; options will override that behavior for a specific port. So:</source>
          <target state="translated">&lt;code&gt;--bind&lt;/code&gt; オプションは、すべてのRethinkDBポートのデフォルトの動作を制御します。指定されている場合、-- &lt;code&gt;--bind-http&lt;/code&gt; 、-- &lt;code&gt;--bind-cluster&lt;/code&gt; 、および &lt;code&gt;--bind-driver&lt;/code&gt; オプションは、特定のポートの動作をオーバーライドします。そう：</target>
        </trans-unit>
        <trans-unit id="f34a64af8039dab4ccf4ac61fc48463c1783f86e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-r&lt;/code&gt; options are similar to other &lt;code&gt;rethinkdb&lt;/code&gt; options, specifying the cluster host and port (defaulting to &lt;code&gt;localhost:28015&lt;/code&gt;) and either a database or a table to rebuild. The &lt;code&gt;-n&lt;/code&gt; option specifies the number of rebuilds that will be performed concurrently (defaulting to 1).</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; および &lt;code&gt;-r&lt;/code&gt; オプションは、他に類似している &lt;code&gt;rethinkdb&lt;/code&gt; のクラスタホストおよびポートを指定するオプション、（をデフォルト &lt;code&gt;localhost:28015&lt;/code&gt; 、データベースまたはテーブルのいずれかを再構築します）。 &lt;code&gt;-n&lt;/code&gt; オプションは、（1不履行）、同時に実行される再構築の数を指定します。</target>
        </trans-unit>
        <trans-unit id="1fbb463da8944345c9e3056ecf777aa6bf848ac4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.conf&lt;/code&gt; file includes a number of options exclusively for the init script. The rest of the options are exactly the same as the ones that go on the command line to the RethinkDB server. For more details about these options run &lt;code&gt;rethinkdb help&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.conf&lt;/code&gt; ののファイルには、専用のinitスクリプトのオプションが多数含まれています。残りのオプションは、コマンドラインでRethinkDBサーバーに送信するオプションとまったく同じです。これらのオプションの詳細については、 &lt;code&gt;rethinkdb help&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="7a6abd3a5fbe78c6d61d78af2204c22ef572c884" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IMPLICIT_VAR&lt;/code&gt; term is equivalent to the &lt;a href=&quot;https://rethinkdb.com/api/python/row&quot;&gt;row&lt;/a&gt; command in the official JavaScript and Python drivers. It&amp;rsquo;s useful for languages where anonymous functions are too verbose.</source>
          <target state="translated">&lt;code&gt;IMPLICIT_VAR&lt;/code&gt; の用語は同等です&lt;a href=&quot;https://rethinkdb.com/api/python/row&quot;&gt;行の&lt;/a&gt;公式のJavaScriptとPythonのドライバでコマンド。これは、無名関数が冗長すぎる言語に役立ちます。</target>
        </trans-unit>
        <trans-unit id="a39d2fb859670be092655eed63f6837d95943b3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Response&lt;/code&gt; object will have the following fields:</source>
          <target state="translated">&lt;code&gt;Response&lt;/code&gt; オブジェクトは、次のフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="7bc2e812e0c496d5d932fcb76cd7cce4a59cbee5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;add&lt;/code&gt; command can be called in either prefix or infix form; both forms are equivalent. Note that ReQL will not perform type coercion. You cannot, for example, &lt;code&gt;add&lt;/code&gt; a string and a number together.</source>
          <target state="translated">&lt;code&gt;add&lt;/code&gt; コマンドは、いずれかのプレフィックスまたは中置形で呼び出すことができます。両方の形式は同等です。ReQLは型強制を実行しないことに注意してください。たとえば、文字列と数値を一緒に &lt;code&gt;add&lt;/code&gt; することはできません。</target>
        </trans-unit>
        <trans-unit id="e770bd3be8c4d7f1305a9eb98af4ed57229b1ce6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;and&lt;/code&gt; command can be used as an infix operator after its first argument (&lt;code&gt;r.expr(true).and(false)&lt;/code&gt;) or given all of its arguments as parameters (&lt;code&gt;r.and(true,false)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; コマンドは、最初の引数（後中置演算子として使用することができる &lt;code&gt;r.expr(true).and(false)&lt;/code&gt; ）またはパラメータ（としてのすべての引数が与え &lt;code&gt;r.and(true,false)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ef981f82d6968bc5dd9c7afb548228c07b5c7260" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authors&lt;/code&gt; table contains a document for each author. Each document contains information about the relevant author and a field &lt;code&gt;posts&lt;/code&gt; with an array of posts for that author. In this case the query to retrieve all authors with their posts is simple:</source>
          <target state="translated">&lt;code&gt;authors&lt;/code&gt; テーブルには、各著者のドキュメントが含まれています。各ドキュメントには、関連する著者に関する情報と、その著者の投稿の配列を含むフィールド &lt;code&gt;posts&lt;/code&gt; が含まれています。この場合、すべての著者とその投稿を取得するクエリは簡単です。</target>
        </trans-unit>
        <trans-unit id="91ad3b24d7068e67089ba95cdcdfb53d11c31611" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;between&lt;/code&gt; command works with secondary indexes on date fields, but will not work with unindexed date fields. To test whether a date value is between two other dates, use the &lt;a href=&quot;../during/index&quot;&gt;during&lt;/a&gt; command, not &lt;code&gt;between&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;between&lt;/code&gt; コマンドは、日付フィールド上のセカンダリインデックスで動作しますが、インデックスなし日付フィールドでは動作しません。日付の値が他の二つの日付の間にあるかどうかをテストするために、使用&lt;a href=&quot;../during/index&quot;&gt;時に&lt;/a&gt;、コマンドない &lt;code&gt;between&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6ed8d702f0da3117561443df7630dac12b3151f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind=all&lt;/code&gt; option is a security risk if your machine is open to the internet, and you should take steps to prevent unauthorized access. See the &lt;a href=&quot;../security/index&quot;&gt;security page&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;bind=all&lt;/code&gt; マシンがインターネットに開かれている場合、このオプションは、セキュリティ上のリスクがある、とあなたは不正なアクセスを防止するための措置をとる必要があります。詳細については、&lt;a href=&quot;../security/index&quot;&gt;セキュリティページ&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="4e4783dc55f18018622aa7131000c8b4f0bf95e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;branch&lt;/code&gt; command takes 2n+1 arguments: pairs of conditional expressions and commands to be executed if the conditionals return any value but &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; (i.e., &amp;ldquo;truthy&amp;rdquo; values), with a final &amp;ldquo;else&amp;rdquo; command to be evaluated if all of the conditionals are &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;branch&lt;/code&gt; 命令は、2N + 1つの引数を取ります。条件式とコマンドのペアが実行される条件文は任意の値ではなく、返す場合 &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; の全ての場合、最終的な「他の」コマンドが評価されると、（つまり、「truthy」値）条件は &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="27792a7b391552685c9bade24559d7d53432ae8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;calendar&lt;/code&gt; table inherits &lt;code&gt;read: true&lt;/code&gt; from the database level, but specifies &lt;code&gt;write: false&lt;/code&gt; to make the table ready-only for &lt;code&gt;notesapp&lt;/code&gt;. The &lt;code&gt;supervisor_only&lt;/code&gt; table overrides both read and write access. The &lt;code&gt;notesapp&lt;/code&gt; account has read and write access to all other tables in the &lt;code&gt;field_notes&lt;/code&gt; database, but no ability to create and drop indexes or change any table&amp;rsquo;s cluster configuration.</source>
          <target state="translated">&lt;code&gt;calendar&lt;/code&gt; テーブル継承 &lt;code&gt;read: true&lt;/code&gt; 、データベース・レベルから、しかし指定は &lt;code&gt;write: false&lt;/code&gt; のためのテーブルには専用の準備をして &lt;code&gt;notesapp&lt;/code&gt; 。 &lt;code&gt;supervisor_only&lt;/code&gt; 表には、読み取りと書き込みの両方のアクセスを無効にします。 &lt;code&gt;notesapp&lt;/code&gt; のアカウントが読み込まれず、内の他のすべてのテーブルへの書き込みアクセスしている &lt;code&gt;field_notes&lt;/code&gt; のデータベースが、任意のテーブルのクラスタ構成を作成し、インデックスを削除または変更する能力。</target>
        </trans-unit>
        <trans-unit id="0e991e5c86a7f1c8aeeaa978efd7dd967c0ddf10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ceil&lt;/code&gt; command can also be chained after an expression.</source>
          <target state="translated">&lt;code&gt;ceil&lt;/code&gt; コマンドはまた、発現後に連鎖させることができます。</target>
        </trans-unit>
        <trans-unit id="1d21c90bc0aeeb16b2b47ca5f016691b2b52825c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changes&lt;/code&gt; command returns a cursor (like the &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt; commands do). You can iterate through its contents using ReQL. Unlike other cursors, the output of &lt;code&gt;changes&lt;/code&gt; is infinite: the cursor will block until more elements are available. Every time you make a change to the table or document the &lt;code&gt;changes&lt;/code&gt; feed is monitoring, a new object will be returned to the cursor. For example, if you insert a user &lt;code&gt;{id: 1, name: Slava, age: 31}&lt;/code&gt; into the &lt;code&gt;users&lt;/code&gt; table, RethinkDB will post this document to changefeeds subscribed to &lt;code&gt;users&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;changes&lt;/code&gt; （のようなカーソル返すコマンド &lt;code&gt;table&lt;/code&gt; や &lt;code&gt;filter&lt;/code&gt; 行うコマンド）。 ReQLを使用して、その内容を反復処理できます。他のカーソルとは異なり、 &lt;code&gt;changes&lt;/code&gt; の出力は無限です。カーソルは、より多くの要素が使用可能になるまでブロックされます。テーブルに変更を &lt;code&gt;changes&lt;/code&gt; か、変更フィードが監視しているドキュメントを作成するたびに、新しいオブジェクトがカーソルに返されます。たとえば、ユーザー &lt;code&gt;{id: 1, name: Slava, age: 31}&lt;/code&gt; を &lt;code&gt;users&lt;/code&gt; テーブルに挿入すると、RethinkDBはこのドキュメントをusersにサブスクライブしているchangefeedsに投稿し &lt;code&gt;users&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a18180e46d884ec86288be9f1179b764c0543cf4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changes&lt;/code&gt; command returns a cursor (like the &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt; commands do). You can iterate through its contents using ReQL. Unlike other cursors, the output of &lt;code&gt;changes&lt;/code&gt; is infinite: the cursor will block until more elements are available. Every time you make a change to the table or document the &lt;code&gt;changes&lt;/code&gt; feed is monitoring, a new object will be returned to the cursor. For example, if you insert a user &lt;code&gt;{id:1,name:Slava,age:31}&lt;/code&gt; into the &lt;code&gt;users&lt;/code&gt; table, RethinkDB will post this document to changefeeds subscribed to &lt;code&gt;users&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;changes&lt;/code&gt; （のようなカーソル返すコマンド &lt;code&gt;table&lt;/code&gt; や &lt;code&gt;filter&lt;/code&gt; 行うコマンド）。ReQLを使用してコンテンツを反復処理できます。他のカーソルとは異なり、 &lt;code&gt;changes&lt;/code&gt; の出力は無限です。カーソルは、より多くの要素が利用可能になるまでブロックします。テーブルまたはドキュメントに &lt;code&gt;changes&lt;/code&gt; 、変更フィードが監視しているときに、新しいオブジェクトがカーソルに返されます。たとえば、ユーザー &lt;code&gt;{id:1,name:Slava,age:31}&lt;/code&gt; を &lt;code&gt;users&lt;/code&gt; テーブルに挿入すると、RethinkDBはこのドキュメントを投稿して、ユーザーに登録されているchangefeedsに送信し &lt;code&gt;users&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c71ebc6710e993abe3e242cc002398d0e04115b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chmod&lt;/code&gt; for the two files should be 644 (&lt;code&gt;chmod 644 &amp;lt;file&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;chmod&lt;/code&gt; の二つのファイルについては、644（する必要があり &lt;code&gt;chmod 644 &amp;lt;file&amp;gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b1746e0f4ec2b3cbd9ee6e45b008169437cd2080" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; command can optionally take a callback, which will receive an error if one occurs, or return a promise which will be resolved when the connection is closed.</source>
          <target state="translated">&lt;code&gt;close&lt;/code&gt; コマンドは、必要に応じて1つが発生した場合、エラーが表示されるコールバックを取る、または接続が閉じられたときに解決される約束を返すことができます。</target>
        </trans-unit>
        <trans-unit id="8de72741c99cbbd0f718cde70c80b9b736a0601d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cluster_config&lt;/code&gt; table contains only one row. Documents cannot be inserted into or deleted from this table.</source>
          <target state="translated">&lt;code&gt;cluster_config&lt;/code&gt; テーブルは、1つの行が含ま。ドキュメントをこのテーブルに挿入したり、このテーブルから削除したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="97a00f39b10088ac3fc7162f96d2aed96ec5e4cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;config&lt;/code&gt; command is a shorthand way to access the &lt;code&gt;table_config&lt;/code&gt; or &lt;code&gt;db_config&lt;/code&gt;&lt;a href=&quot;../../../docs/system-tables/index#configuration-tables&quot;&gt;System tables&lt;/a&gt;. It will return the single row from the system that corresponds to the database or table configuration, as if &lt;a href=&quot;../get/index&quot;&gt;get&lt;/a&gt; had been called on the system table with the UUID of the database or table in question.</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; コマンドは、アクセスするための速記の方法です &lt;code&gt;table_config&lt;/code&gt; または &lt;code&gt;db_config&lt;/code&gt; &lt;a href=&quot;../../../docs/system-tables/index#configuration-tables&quot;&gt;システムテーブルを&lt;/a&gt;。問題のデータベースまたはテーブルのUUIDを使用してシステムテーブルで&lt;a href=&quot;../get/index&quot;&gt;get&lt;/a&gt;が呼び出されたかのように、データベースまたはテーブル構成に対応するシステムから単一の行を返します。</target>
        </trans-unit>
        <trans-unit id="f8da9493de79adac421fcb25c1f5650dc9b6547f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;count&lt;/code&gt; command returns the size of the array.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; コマンドは、配列のサイズを返します。</target>
        </trans-unit>
        <trans-unit id="d848d8e92a343bd1e1ee7712c5160da92d5ac9ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; field is a Base64-encoded string of the binary object.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; フィールドは、バイナリオブジェクトのBase64でエンコードされた文字列です。</target>
        </trans-unit>
        <trans-unit id="ea8d1ca1b2a77edf32c2a4590df21ed431ecff04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;db&lt;/code&gt; command is optional. If it is not present in a query, the query will run against the default database for the connection, specified in the &lt;code&gt;db&lt;/code&gt; argument to &lt;a href=&quot;../connect/index&quot;&gt;connect&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;db&lt;/code&gt; コマンドはオプションです。クエリに存在しない場合、クエリは接続のデフォルトのデータベースに対して実行され、 &lt;code&gt;db&lt;/code&gt; 引数で&lt;a href=&quot;../connect/index&quot;&gt;connectに&lt;/a&gt;指定されます。</target>
        </trans-unit>
        <trans-unit id="4ad37eacb273de6461d7f78364b2740a5284a171" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;distinct&lt;/code&gt; command can be called on any sequence or table with an index.</source>
          <target state="translated">&lt;code&gt;distinct&lt;/code&gt; コマンドは、インデックスを持つ任意のシーケンスまたはテーブルの上に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="cdbdf15e337cc4a8b690ca59921a9c3a8e7640aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;durability&lt;/code&gt; argument on writes is ignored for system tables.</source>
          <target state="translated">システムテーブルの場合、書き込みの &lt;code&gt;durability&lt;/code&gt; 引数は無視されます。</target>
        </trans-unit>
        <trans-unit id="ea7c8b836aba9d6c0c4b7b00901b656aa824e964" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;durability&lt;/code&gt; setting for a table controls when writes are committed. In &lt;code&gt;hard&lt;/code&gt; durability mode, writes are committed to disk before acknowledgements are sent; in &lt;code&gt;soft&lt;/code&gt; mode, writes are acknowledged immediately upon receipt. The &lt;code&gt;soft&lt;/code&gt; mode is faster but slightly less resilient to failure.</source>
          <target state="translated">テーブルの &lt;code&gt;durability&lt;/code&gt; 設定は、書き込みがいつコミットされるかを制御します。では &lt;code&gt;hard&lt;/code&gt; 耐久性モードでは、書き込みが確認応答が送信される前にディスクにコミットされています。で &lt;code&gt;soft&lt;/code&gt; モード、書き込みは受信時にすぐに認めています。 &lt;code&gt;soft&lt;/code&gt; モードでは、より高速で少し少ない弾力性の障害にあります。</target>
        </trans-unit>
        <trans-unit id="e3a148d5481c3b62ef42c8cb3568f88ca4842c72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;em_run&lt;/code&gt; command returns a &lt;code&gt;QueryHandle&lt;/code&gt; instance. The &lt;code&gt;QueryHandle&lt;/code&gt; will be closed when all results have been received, or when EventMachine stops running. You can explicitly close it with the &lt;code&gt;close&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;em_run&lt;/code&gt; のコマンドが返す &lt;code&gt;QueryHandle&lt;/code&gt; のインスタンスを。 &lt;code&gt;QueryHandle&lt;/code&gt; は、すべての結果が受信された時に閉鎖される、またはEventMachineは実行を停止したとき。 &lt;code&gt;close&lt;/code&gt; メソッドで明示的に閉じることができます。</target>
        </trans-unit>
        <trans-unit id="e8854e7d74db852ed391856ffbb13339def8f064" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;emergencyRepair&lt;/code&gt; argument is effectively a different command; when it is specified, no other arguments to &lt;code&gt;reconfigure&lt;/code&gt; are allowed except for &lt;code&gt;dryRun&lt;/code&gt;. When it&amp;rsquo;s executed, each shard of the table is examined and classified into one of three categories:</source>
          <target state="translated">&lt;code&gt;emergencyRepair&lt;/code&gt; の引数には、効果的に異なるコマンドです。指定されている場合、 &lt;code&gt;dryRun&lt;/code&gt; を除いて、 &lt;code&gt;reconfigure&lt;/code&gt; する他の引数は許可されません。実行されると、テーブルの各シャードが調べられ、次の3つのカテゴリのいずれかに分類されます。</target>
        </trans-unit>
        <trans-unit id="ce8009e94a95dd349ffe642ad6a2659550bbd18c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;epoch_time&lt;/code&gt; field is a Unix timestamp, the number of seconds since January 1st, 1970, with millisecond precision. The &lt;code&gt;timezone&lt;/code&gt; field is a string in the format &lt;code&gt;[+-]HH:MM&lt;/code&gt;, indicating the offset from UTC. UTC is &lt;code&gt;+00:00&lt;/code&gt;; PST is &lt;code&gt;-08:00&lt;/code&gt;; and so on.</source>
          <target state="translated">&lt;code&gt;epoch_time&lt;/code&gt; のフィールドは、ミリ秒の精度でのUnixタイムスタンプ、1970年1月1日からの秒数、です。 &lt;code&gt;timezone&lt;/code&gt; フィールドの形式の文字列である &lt;code&gt;[+-]HH:MM&lt;/code&gt; は、UTCからのオフセットを示します。UTCは &lt;code&gt;+00:00&lt;/code&gt; です。PSTは &lt;code&gt;-08:00&lt;/code&gt; です。等々。</target>
        </trans-unit>
        <trans-unit id="dd58d2675dc0248d66b49c9c9903627922ec7a35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eq&lt;/code&gt; command returns &lt;code&gt;true&lt;/code&gt; if two values are equal (in this case, the field &lt;code&gt;name&lt;/code&gt; and the string &lt;code&gt;William Adama&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;eq&lt;/code&gt; コマンド戻る &lt;code&gt;true&lt;/code&gt; 二つの値場合は、同じである（この場合、フィールド &lt;code&gt;name&lt;/code&gt; と列 &lt;code&gt;William Adama&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5aca7815d3874f89ac128aa8778fdf468fd56814" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;floor&lt;/code&gt; command can also be chained after an expression.</source>
          <target state="translated">&lt;code&gt;floor&lt;/code&gt; コマンドはまた、発現後に連鎖させることができます。</target>
        </trans-unit>
        <trans-unit id="c8b1d4d04e7b06c1b0cb459dbe1a9f20bb0817d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; can be an anonymous function with the signature &lt;code&gt;(context: object, oldVal: object, newVal: object) -&amp;gt; object&lt;/code&gt; or a binary representation obtained from the &lt;code&gt;function&lt;/code&gt; field of &lt;a href=&quot;../get_write_hook/index&quot;&gt;getWriteHook&lt;/a&gt;. The function must be deterministic, and so cannot use a subquery or the &lt;code&gt;r.js&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 署名付き匿名関数とすることができる &lt;code&gt;(context: object, oldVal: object, newVal: object) -&amp;gt; object&lt;/code&gt; 又はから得られるバイナリ表現 &lt;code&gt;function&lt;/code&gt; のフィールド&lt;a href=&quot;../get_write_hook/index&quot;&gt;getWriteHook&lt;/a&gt;。関数は決定論的である必要があるため、サブクエリまたは &lt;code&gt;r.js&lt;/code&gt; コマンドを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="f77c788b5a294382223b2adfd5c9b3695d014916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; can be an anonymous function with the signature &lt;code&gt;(context: object, oldVal: object, newVal: object) -&amp;gt; object&lt;/code&gt; or a binary representation obtained from the &lt;code&gt;function&lt;/code&gt; field of &lt;a href=&quot;get_write_hook/index&quot;&gt;getWriteHook&lt;/a&gt;. The function must be deterministic, and so cannot use a subquery or the &lt;code&gt;r.js&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 署名付き匿名関数とすることができる &lt;code&gt;(context: object, oldVal: object, newVal: object) -&amp;gt; object&lt;/code&gt; 又はから得られるバイナリ表現 &lt;code&gt;function&lt;/code&gt; のフィールド&lt;a href=&quot;get_write_hook/index&quot;&gt;getWriteHook&lt;/a&gt;。関数は決定論的である必要があるため、サブクエリまたは &lt;code&gt;r.js&lt;/code&gt; コマンドを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="c2c1feeb5fb90500506597611ab61b06ab509f62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; field is a binary object containing an opaque representation of the secondary index (including the &lt;code&gt;multi&lt;/code&gt; argument if specified). It can be passed as the second argument to &lt;a href=&quot;../index_create/index&quot;&gt;indexCreate&lt;/a&gt; to create a new index with the same function; see &lt;code&gt;indexCreate&lt;/code&gt; for more information.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; フィールドは、（を含む二次インデックスの不透明な表現を含むバイナリオブジェクトである &lt;code&gt;multi&lt;/code&gt; 指定した場合引数）。これを&lt;a href=&quot;../index_create/index&quot;&gt;indexCreate&lt;/a&gt;の2番目の引数として渡して、同じ関数で新しいインデックスを作成できます。詳細については、 &lt;code&gt;indexCreate&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="4946559a625e3e8a1a801b2936ef820db204b2d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;grant&lt;/code&gt; command returns an object of the following form:</source>
          <target state="translated">&lt;code&gt;grant&lt;/code&gt; コマンドは、次の形式のオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="0dc08e6a902a4c96c1bd71bf6dc00101fd253b31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;granted&lt;/code&gt; field will always be &lt;code&gt;1&lt;/code&gt;, and the &lt;code&gt;permissions_changes&lt;/code&gt; list will have one object, describing the new permissions values and the old values they were changed from (which may be &lt;code&gt;null&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;granted&lt;/code&gt; フィールドは常になります &lt;code&gt;1&lt;/code&gt; 、および &lt;code&gt;permissions_changes&lt;/code&gt; のリストは、新たな権限値と（かもしれそれらはから変更された古い値記述し、一つのオブジェクトを持つことになり &lt;code&gt;null&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="80d81ca6649abafda23e1ea30713e22d76b2657a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gt&lt;/code&gt; command returns &lt;code&gt;true&lt;/code&gt; if a value is greater than the specified value (in this case, if the number of posts is greater than two).</source>
          <target state="translated">&lt;code&gt;gt&lt;/code&gt; コマンドを返し &lt;code&gt;true&lt;/code&gt; 値が規定値よりも大きい場合（この場合には、ポストの数が2より大きい場合）。</target>
        </trans-unit>
        <trans-unit id="f3b0ff93f0028dedb7d088ecb0bfabd1b04c1ae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;header&lt;/code&gt; field will be a parsed version of the header with fields lowercased, like so:</source>
          <target state="translated">&lt;code&gt;header&lt;/code&gt; フィールドがそうように、小文字のフィールドを持つヘッダの解析されたバージョンになります。</target>
        </trans-unit>
        <trans-unit id="33748724c059e842b140ab3cebc0157906f31f2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;htpasswd&lt;/code&gt; tool will prompt for your new password.</source>
          <target state="translated">&lt;code&gt;htpasswd&lt;/code&gt; ののツールは、新しいパスワードの入力を求められます。</target>
        </trans-unit>
        <trans-unit id="9ab9c4300a5d1a171fddf197c761d335fc5e9a5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includeStates&lt;/code&gt; optional argument to &lt;code&gt;changes&lt;/code&gt; allows you to receive extra &amp;ldquo;status&amp;rdquo; documents in changefeed streams. These can allow your application to distinguish between initial values returned at the start of a stream and subsequent changes. Read the &lt;a href=&quot;../../../api/javascript/changes/index&quot;&gt;changes&lt;/a&gt; API documentation for a full explanation and example.</source>
          <target state="translated">&lt;code&gt;changes&lt;/code&gt; に対する &lt;code&gt;includeStates&lt;/code&gt; オプション引数を使用すると、追加の「ステータス」ドキュメントを変更フィードストリームで受け取ることができます。これらにより、アプリケーションはストリームの開始時に返される初期値とその後の変更を区別できます。完全な説明と例については、&lt;a href=&quot;../../../api/javascript/changes/index&quot;&gt;changes&lt;/a&gt; APIドキュメントをお読みください。</target>
        </trans-unit>
        <trans-unit id="868052f78a577f27a08e87e2dc0bb1b9048f59fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includeTypes&lt;/code&gt; optional argument adds a third field, &lt;code&gt;type&lt;/code&gt;, to each result sent. The string values for &lt;code&gt;type&lt;/code&gt; are largely self-explanatory:</source>
          <target state="translated">&lt;code&gt;includeTypes&lt;/code&gt; オプションの引数は、第3のフィールド、追加 &lt;code&gt;type&lt;/code&gt; 各結果て送信します。 &lt;code&gt;type&lt;/code&gt; の文字列値は、大部分が自明です。</target>
        </trans-unit>
        <trans-unit id="8d6a2fe819501f70843ca93b461a8f2fab096d7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includes&lt;/code&gt; command cannot take advantage of a geospatial &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;secondary index&lt;/a&gt;. If you&amp;rsquo;re working with large data sets, consider using an index and &lt;a href=&quot;../get_intersecting/index&quot;&gt;getIntersecting&lt;/a&gt; before &lt;code&gt;includes&lt;/code&gt; to narrow down the initial result set.</source>
          <target state="translated">&lt;code&gt;includes&lt;/code&gt; コマンドは、地理空間を利用することはできません&lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;セカンダリインデックス&lt;/a&gt;。大きなデータセットを使用している場合は、 &lt;code&gt;includes&lt;/code&gt; 前にインデックスと&lt;a href=&quot;../get_intersecting/index&quot;&gt;getIntersecting&lt;/a&gt;を使用して、初期結果セットを絞り込むことを検討してください。</target>
        </trans-unit>
        <trans-unit id="8b3a7d962ba66d9269511623889e1a2dd7b32c96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; argument is mandatory. Optional arguments are:</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 引数は必須です。オプションの引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ad770288c26a5de2145131cdaacd5a9d83f4d136" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; argument is mandatory. This command returns the same results as &lt;code&gt;table.filter(r.row('index').intersects(geometry))&lt;/code&gt;. The total number of results is limited to the array size limit which defaults to 100,000, but can be changed with the &lt;code&gt;arrayLimit&lt;/code&gt; option to &lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 引数は必須です。このコマンドは、 &lt;code&gt;table.filter(r.row('index').intersects(geometry))&lt;/code&gt; と同じ結果を返します。結果の総数はデフォルト100,000アレイのサイズ制限に限定されるが、で変更することができ &lt;code&gt;arrayLimit&lt;/code&gt; のためのオプション&lt;a href=&quot;../run/index&quot;&gt;を実行します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd743e36733d09c9da01000c0b88c5292d0cc3d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indexFunction&lt;/code&gt; can be an anonymous function or a binary representation obtained from the &lt;code&gt;function&lt;/code&gt; field of &lt;a href=&quot;../index_status/index&quot;&gt;indexStatus&lt;/a&gt;. The function must be deterministic, and so cannot use a subquery or the &lt;code&gt;r.js&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;indexFunction&lt;/code&gt; は匿名関数またはから得られるバイナリ表現することができる &lt;code&gt;function&lt;/code&gt; のフィールド&lt;a href=&quot;../index_status/index&quot;&gt;indexStatus&lt;/a&gt;。関数は確定的でなければならないため、サブクエリや &lt;code&gt;r.js&lt;/code&gt; コマンドを使用できません。</target>
        </trans-unit>
        <trans-unit id="b43ceb3b85c6c373b0ae4ee4be93296ef3fea882" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;insert&lt;/code&gt; command accepts a single document or an array of documents if you want to batch inserts. We use an array in this query instead of running three separate &lt;code&gt;insert&lt;/code&gt; commands for each document.</source>
          <target state="translated">&lt;code&gt;insert&lt;/code&gt; あなたはバッチ挿入する場合は、コマンドは、単一のドキュメントやドキュメントの配列を受け入れます。各ドキュメントに対して3つの個別の &lt;code&gt;insert&lt;/code&gt; コマンドを実行する代わりに、このクエリで配列を使用します。</target>
        </trans-unit>
        <trans-unit id="d6621021a52f95d192cf8605e58bf7280b4c773c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;intersects&lt;/code&gt; command cannot take advantage of a geospatial &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;secondary index&lt;/a&gt;. If you&amp;rsquo;re working with large data sets, you should consider using an index and the &lt;a href=&quot;../get_intersecting/index&quot;&gt;getIntersecting&lt;/a&gt; command instead of &lt;code&gt;intersects&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;intersects&lt;/code&gt; コマンドは、地理空間を利用することはできません&lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;セカンダリインデックス&lt;/a&gt;。大きなデータセットを使用している場合は、 &lt;code&gt;intersects&lt;/code&gt; ではなく、インデックスと&lt;a href=&quot;../get_intersecting/index&quot;&gt;getIntersecting&lt;/a&gt;コマンドの使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="c4139db0f544e285139cf6c660044e153973d181" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jobs&lt;/code&gt; table provides information about tasks running within the RethinkDB cluster, including queries, disk compaction, and index construction, and allows you to kill query jobs by deleting them from the table. For details, read the &lt;a href=&quot;../system-jobs/index&quot;&gt;System jobs table&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; テーブル、クエリ、ディスクの圧縮、およびインデックスの構築など、RethinkDBクラスタ内で実行中のタスクに関する情報を提供し、あなたがテーブルからそれらを削除することにより、クエリジョブを殺すことができます。詳細については、&lt;a href=&quot;../system-jobs/index&quot;&gt;システムジョブテーブルの&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="02ce76979f5d4e08895a24ed209616d935ad93fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lambda&lt;/code&gt; expression is executed only once on the client. Internally, the driver passes a special object to the &lt;code&gt;lambda&lt;/code&gt; function which allows constructing a representation of the query. This representation is then sent to the server over the network and evaluated on the cluster.</source>
          <target state="translated">&lt;code&gt;lambda&lt;/code&gt; 式は、クライアント上で一度だけ実行されます。内部的に、ドライバーは特別なオブジェクトを &lt;code&gt;lambda&lt;/code&gt; 関数に渡し、クエリの表現を構築できるようにします。この表現は、ネットワークを介してサーバーに送信され、クラスター上で評価されます。</target>
        </trans-unit>
        <trans-unit id="8db687d26d281f53ab2937b362050f18086c0100" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;logs&lt;/code&gt; table supports changefeeds. Only messages being &lt;em&gt;written to the logs table&lt;/em&gt; will generate changefeed events.</source>
          <target state="translated">&lt;code&gt;logs&lt;/code&gt; テーブルのサポートのchangefeedsを。&lt;em&gt;ログテーブル&lt;/em&gt;に&lt;em&gt;書き込まれている&lt;/em&gt;メッセージのみがchangefeedイベントを生成します。</target>
        </trans-unit>
        <trans-unit id="747a7670afb696b207114aaef7ea26c0638477d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;match&lt;/code&gt; command does not support backreferences.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; コマンドは、後方参照をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="7fecdd1e7503897b3b0389a10c6271bc84fd03f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max&lt;/code&gt; command can be called with:</source>
          <target state="translated">&lt;code&gt;max&lt;/code&gt; コマンドがで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="a61970042a7f09b4c61acb3dfc28139c2a94bdaa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;min&lt;/code&gt; command can be called with:</source>
          <target state="translated">&lt;code&gt;min&lt;/code&gt; コマンドがで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b21b8958d38631f71f563c6d778bb5c3c1ffc323" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;multi&lt;/code&gt; field will be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on whether this index was created as a multi index; the &lt;code&gt;geo&lt;/code&gt; field will be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on whether this index was created as a geospatial index. See &lt;a href=&quot;../index_create/index&quot;&gt;indexCreate&lt;/a&gt; for details. The &lt;code&gt;outdated&lt;/code&gt; field will be true if the index is outdated in the current version of RethinkDB and needs to be rebuilt. The &lt;code&gt;progress&lt;/code&gt; field is a float between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, indicating how far along the server is in constructing indexes after the most recent change to the table that would affect them. (&lt;code&gt;0&lt;/code&gt; indicates no such indexes have been constructed; &lt;code&gt;1&lt;/code&gt; indicates all of them have.)</source>
          <target state="translated">&lt;code&gt;multi&lt;/code&gt; フィールドは次のようになります &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; このインデックスは、マルチ指標として作成されたかどうかに応じて、このインデックスが地理空間インデックスとして作成されたかどうかに応じて、 &lt;code&gt;geo&lt;/code&gt; フィールドは &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; になります。詳細については、&lt;a href=&quot;../index_create/index&quot;&gt;indexCreate&lt;/a&gt;を参照してください。 &lt;code&gt;outdated&lt;/code&gt; インデックスがRethinkDBの現在のバージョンで古いし、再構築する必要がある場合、このフィールドはtrueになります。 &lt;code&gt;progress&lt;/code&gt; フィールドが間にフロートで &lt;code&gt;0&lt;/code&gt; と &lt;code&gt;1&lt;/code&gt; どこまでサーバーに沿って、それらに影響を与えるテーブルに最新の変更後にインデックスを構築する上であることを示します、。 （ &lt;code&gt;0&lt;/code&gt; そのようなインデックスが構築されていないことを示します。 &lt;code&gt;1&lt;/code&gt; はそれらすべてが持っていることを示します。）</target>
        </trans-unit>
        <trans-unit id="5593aa4baf9fd61785d48ac139c9d79b76a0b29f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; field, if present, will be an array of one or more &lt;code&gt;ResponseNote&lt;/code&gt; values, giving further information about the kind of the stream being returned. These will be numeric values, corresponding to the notes in &lt;code&gt;ql2.proto&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 個のフィールドは、存在する場合、一の以上の配列になり &lt;code&gt;ResponseNote&lt;/code&gt; に返されるストリームの種類に関するさらなる情報を与え、値。これらは &lt;code&gt;ql2.proto&lt;/code&gt; のメモに対応する数値になります。</target>
        </trans-unit>
        <trans-unit id="233fb265ce401f5e6ef81eb6bf82b04d5b9bd910" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;or&lt;/code&gt; command can be used as an infix operator after its first argument (&lt;code&gt;r.expr(true).or(false)&lt;/code&gt;) or given all of its arguments as parameters (&lt;code&gt;r.or(true,false)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; コマンドは、最初の引数（後中置演算子として使用することができる &lt;code&gt;r.expr(true).or(false)&lt;/code&gt; ）またはパラメータ（としてのすべての引数が与え &lt;code&gt;r.or(true,false)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="86115daaac62e6d67b2f25326871b6408003fe0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;orderBy&lt;/code&gt; operation is performed on the query server.</source>
          <target state="translated">&lt;code&gt;orderBy&lt;/code&gt; 操作は、クエリサーバー上で実行されます。</target>
        </trans-unit>
        <trans-unit id="0f69c272f5a8902ee9b15471e9f21b729c73065c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;page&lt;/code&gt; argument takes the type of pagination mechanism used by the API. In this case GitHub uses the standard link header mechanism &lt;code&gt;link-next&lt;/code&gt;, but you can also specify custom pagination schemes for unusual APIs. The &lt;code&gt;page-limit&lt;/code&gt; argument specifies the number of pages you&amp;rsquo;d like to get. See the &lt;a href=&quot;../../api/javascript/http/index&quot;&gt;API reference&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;page&lt;/code&gt; 引数は、APIが使用する改ページメカニズムの型を取ります。この場合、GitHubは標準のリンクヘッダーメカニズム &lt;code&gt;link-next&lt;/code&gt; を使用しますが、通常とは異なるAPIのカスタムページネーションスキームを指定することもできます。 &lt;code&gt;page-limit&lt;/code&gt; 引数は、あなたが取得したいページ数を指定します。詳細については、&lt;a href=&quot;../../api/javascript/http/index&quot;&gt;APIリファレンス&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="95bcd53724b946ca9ed7f295c7ce42629507b3c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;page&lt;/code&gt; function may return a string corresponding to the next URL to request, &lt;code&gt;null&lt;/code&gt; indicating that there is no more to get, or an object of the format:</source>
          <target state="translated">&lt;code&gt;page&lt;/code&gt; 機能は、要求に次のURLに対応する文字列を返すことが &lt;code&gt;null&lt;/code&gt; 得るためにこれ以上は存在しないことを示す、またはフォーマットのオブジェクト：</target>
        </trans-unit>
        <trans-unit id="8eac2c2eafcc25e69c439c981a9a43c9505640b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;password&lt;/code&gt; field is simply a boolean indicating whether a password is set or not. There is no way to read a password from the database.</source>
          <target state="translated">&lt;code&gt;password&lt;/code&gt; フィールドは、単純にパスワードが設定されているかどうかを示すブール値です。データベースからパスワードを読み取る方法はありません。</target>
        </trans-unit>
        <trans-unit id="9eb572facbb41488fe72b8fa9f65c8b6e60f804a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pluck&lt;/code&gt; command also supports selecting nested fields in a document. For example, suppose we&amp;rsquo;d like to select the fields &lt;code&gt;phone&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; from the following document:</source>
          <target state="translated">&lt;code&gt;pluck&lt;/code&gt; コマンドは、文書内のネストされたフィールドの選択をサポートします。たとえば、次のドキュメントから &lt;code&gt;phone&lt;/code&gt; と &lt;code&gt;email&lt;/code&gt; のフィールドを選択するとします。</target>
        </trans-unit>
        <trans-unit id="ded41df3cb008f7a94136d4d3d523c133ad429cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ql2.proto&lt;/code&gt; file is well-commented, showing arguments and output for each command.</source>
          <target state="translated">&lt;code&gt;ql2.proto&lt;/code&gt; のファイルには、各コマンドの引数と出力を示す、よくコメントしています。</target>
        </trans-unit>
        <trans-unit id="1cde22a6f27e7d9521847d08386006eb67987ad7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;r.do()&lt;/code&gt; command is serialized with the &lt;code&gt;FUNCALL&lt;/code&gt; term.</source>
          <target state="translated">&lt;code&gt;r.do()&lt;/code&gt; コマンドがでシリアライズされ &lt;code&gt;FUNCALL&lt;/code&gt; 用語。</target>
        </trans-unit>
        <trans-unit id="2df58bc197cc0396ab3dc29565ebeae49124d81c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;r.http&lt;/code&gt; command will issue a request to &lt;code&gt;www.google.com&lt;/code&gt; directly from the database and return a string with the source of Google&amp;rsquo;s homepage.</source>
          <target state="translated">&lt;code&gt;r.http&lt;/code&gt; のコマンドはにリクエストを発行します &lt;code&gt;www.google.com&lt;/code&gt; データベースから直接Googleのホームページのソースで文字列を返します。</target>
        </trans-unit>
        <trans-unit id="36decc9f51cb514925634d8bff79ad911b6257f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; permissions can be specified on three scopes, from most granular to least:</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 、 &lt;code&gt;write&lt;/code&gt; 、および &lt;code&gt;config&lt;/code&gt; の権限は最も粒状から少なくともに、3つのスコープに指定することができます。</target>
        </trans-unit>
        <trans-unit id="49b42e69bb9c54f130efd1a3ec27a3df710af6ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rebalance&lt;/code&gt; command operates by measuring the distribution of primary keys within a table and picking split points that will give each shard approximately the same number of documents. It won&amp;rsquo;t change the number of shards within a table, or change any other configuration aspect for the table or the database.</source>
          <target state="translated">&lt;code&gt;rebalance&lt;/code&gt; コマンドは、テーブル内の主キーの分布を測定し、各シャードにドキュメントのほぼ同じ数を与えるスプリットポイントを選ぶことによって動作します。テーブル内のシャードの数を変更したり、テーブルやデータベースの他の構成を変更したりすることはありません。</target>
        </trans-unit>
        <trans-unit id="554d2dc3c9db959ecfadca51c84bf63b31fddb75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replace&lt;/code&gt; command can be used to both insert and delete documents. If the &amp;ldquo;replaced&amp;rdquo; document has a primary key that doesn&amp;rsquo;t exist in the table, the document will be inserted; if an existing document is replaced with &lt;code&gt;null&lt;/code&gt;, the document will be deleted. Since &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; operations are performed atomically, this allows atomic inserts and deletes as well.</source>
          <target state="translated">&lt;code&gt;replace&lt;/code&gt; コマンドは、挿入、削除、文書の両方に使用することができます。「置換された」ドキュメントにテーブルに存在しない主キーがある場合、ドキュメントが挿入されます。既存のドキュメントが &lt;code&gt;null&lt;/code&gt; に置き換えられた場合、ドキュメントは削除されます。以来 &lt;code&gt;update&lt;/code&gt; と &lt;code&gt;replace&lt;/code&gt; 操作がアトミックに実行され、これは同様に、原子の挿入および削除を可能にします。</target>
        </trans-unit>
        <trans-unit id="69061fb9a85edfcdb4797cccceab5987fcbbd1bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restore&lt;/code&gt; subcommand has most of the the same options and defaults as the &lt;code&gt;dump&lt;/code&gt; command, although there are a few extra commands for controlling how data is imported.</source>
          <target state="translated">&lt;code&gt;restore&lt;/code&gt; サブコマンドと同じオプションとデフォルトのほとんど持って &lt;code&gt;dump&lt;/code&gt; データのインポート方法を制御するためのいくつかの余分なコマンドがありますが、コマンドを。</target>
        </trans-unit>
        <trans-unit id="3732c751628619f7fe5223ea3a55cd9b025f5625" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restore&lt;/code&gt; subcommand will reload a backup an archive into your cluster.</source>
          <target state="translated">&lt;code&gt;restore&lt;/code&gt; サブコマンドは、クラスタへのバックアップにアーカイブをリロードします。</target>
        </trans-unit>
        <trans-unit id="5290e332ab7fca15808af2f086fca3b9fe419cf1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rethinkdb&lt;/code&gt; utility includes an &lt;code&gt;import&lt;/code&gt; command to load existing data into RethinkDB databases. It can read JSON files, organized in one of two formats described below, or comma-separated value (CSV) files (including ones with other delimiters such as tab characters). The utility runs under the &lt;code&gt;admin&lt;/code&gt; user account (see &lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;Permissions and user accounts&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;rethinkdb&lt;/code&gt; のユーティリティが含まれて &lt;code&gt;import&lt;/code&gt; RethinkDBデータベースに既存のデータをロードするコマンドを。以下で説明する2つの形式のいずれかで構成されたJSONファイル、またはコンマ区切り値（CSV）ファイル（タブ文字などの他の区切り文字を含むもの）を読み取ることができます。ユーティリティは、 &lt;code&gt;admin&lt;/code&gt; ユーザーアカウントで実行されます（&lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;権限とユーザーアカウントを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="23ff9bbe25c8004989f8850322279724e1a217cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;round&lt;/code&gt; command can also be chained after an expression.</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; コマンドはまた、発現後に連鎖させることができます。</target>
        </trans-unit>
        <trans-unit id="be5dd85bcc132fcce01c6a0bdf9d6ad96e28c77c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rowProcess&lt;/code&gt; callback receives the row as its first argument; it may also take an optional second argument, which is a callback function to be executed after each row has been processed.</source>
          <target state="translated">&lt;code&gt;rowProcess&lt;/code&gt; のコールバックは、最初の引数として列を受信します。また、オプションの2番目の引数を取ることもできます。これは、各行が処理された後に実行されるコールバック関数です。</target>
        </trans-unit>
        <trans-unit id="ab1dfcd0ac2e8005e1671ad7646473bea948e6f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server&lt;/code&gt; command returns either two or three fields:</source>
          <target state="translated">&lt;code&gt;server&lt;/code&gt; コマンドが返す2つのまたは3フィールド：</target>
        </trans-unit>
        <trans-unit id="02c5611afbdf2371b84ac8989750ab9372b63d9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stats&lt;/code&gt; table provides statistics about server read/write throughput, client connections, and memory usage. For details, read the &lt;a href=&quot;../system-stats/index&quot;&gt;System stats table&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;code&gt;stats&lt;/code&gt; 表は、サーバーの読み取り/書き込みスループット、クライアント接続、およびメモリの使用状況に関する統計情報を提供します。詳細については、&lt;a href=&quot;../system-stats/index&quot;&gt;システム統計表の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="dcbcbb3b476cec86770a7e8508c7d7f14fd0f096" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;table&lt;/code&gt; command returns a cursor; use the &lt;a href=&quot;../../../api/javascript/next/index&quot;&gt;next&lt;/a&gt; or &lt;a href=&quot;../../../api/javascript/each/index&quot;&gt;each&lt;/a&gt; command to iterate through the result set, or &lt;a href=&quot;../../../api/javascript/to_array/index&quot;&gt;toArray&lt;/a&gt; to retrieve the set as an array.</source>
          <target state="translated">&lt;code&gt;table&lt;/code&gt; コマンドは、カーソルを返します。&lt;a href=&quot;../../../api/javascript/next/index&quot;&gt;next&lt;/a&gt;または&lt;a href=&quot;../../../api/javascript/each/index&quot;&gt;each&lt;/a&gt;コマンドを使用して結果セットを反復処理するか、&lt;a href=&quot;../../../api/javascript/to_array/index&quot;&gt;toArray&lt;/a&gt;を使用してセットを配列として取得します。</target>
        </trans-unit>
        <trans-unit id="8555ee1c59461069384b1231faf6ed2e10256a2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeOf&lt;/code&gt; command can be appended to any ReQL command to display what data type that command will returns. For instance (in JavaScript):</source>
          <target state="translated">&lt;code&gt;typeOf&lt;/code&gt; コマンドは、どのようなデータ型のコマンドが戻りますことを、ディスプレイに任意のReQLコマンドに追加することができます。たとえば（JavaScriptの場合）：</target>
        </trans-unit>
        <trans-unit id="e2c3fbf52c0a0225e096a3e3f50430c6f20043c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update&lt;/code&gt; command allows changing existing fields in the document, as well as values inside of arrays. Let&amp;rsquo;s suppose Star Trek archaeologists unearthed a new speech by Jean-Luc Picard that we&amp;rsquo;d like to add to his posts:</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; コマンドは、同様の配列の内部値として、文書内の既存のフィールドを変更することができます。スタートレックの考古学者が、ジャンリュックピカードによる新しいスピーチを発掘したとしましょう。</target>
        </trans-unit>
        <trans-unit id="f5c71b707545ed0fdcaeabb3a5aac3886c06f220" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update&lt;/code&gt; command lets you to overwrite fields, but not delete them. If you want to delete a field, use the &lt;code&gt;replace&lt;/code&gt; command. The &lt;code&gt;replace&lt;/code&gt; command replaces your entire document with the new document you pass as an argument. For example, if you want to delete the field &lt;code&gt;author&lt;/code&gt; of the blog post with the id &lt;code&gt;1&lt;/code&gt;, you would use:</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; コマンドは、上書きフィールドにあなたをすることができますが、それらを削除しません。フィールドを削除する場合は、 &lt;code&gt;replace&lt;/code&gt; コマンドを使用します。 &lt;code&gt;replace&lt;/code&gt; コマンドは、引数として渡す新しい文書を使用して文書全体を置き換えます。たとえば、ID &lt;code&gt;1&lt;/code&gt; のブログ投稿の作成 &lt;code&gt;author&lt;/code&gt; を削除する場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="25a4c3fb12182407ba2e67e16e8bc153a3fc6a94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update&lt;/code&gt; command supports RethinkDB&amp;rsquo;s &lt;a href=&quot;../../../docs/nested-fields/javascript/index&quot;&gt;nested field&lt;/a&gt; syntax to update subdocuments. Consider a user table with contact information in this format:</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; コマンドはRethinkDBのサポート&lt;a href=&quot;../../../docs/nested-fields/javascript/index&quot;&gt;、ネストされたフィールドの&lt;/a&gt;更新サブ文書の構文を。次の形式の連絡先情報を持つユーザーテーブルについて考えてみます。</target>
        </trans-unit>
        <trans-unit id="9709ed7ac5a3ccdb5608327426c040efa46a575b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;users&lt;/code&gt; table contains one document for each user in the system, each with two key/value pairs: a unique &lt;code&gt;id&lt;/code&gt; and a &lt;code&gt;password&lt;/code&gt; field. The &lt;code&gt;id&lt;/code&gt; is the account name. The &lt;code&gt;password&lt;/code&gt; field behaves differently on writes than on reads; you can change an account&amp;rsquo;s password by writing a value to this field (or remove the password by writing &lt;code&gt;false&lt;/code&gt;), but the password cannot be read. Instead, on a read operation &lt;code&gt;password&lt;/code&gt; will be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, indicating whether the account has a password or not.</source>
          <target state="translated">&lt;code&gt;users&lt;/code&gt; ユニーク：テーブルは、システム内のユーザーごとに1つの文書、2のキー/値ペアを持つ各含まれ &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;password&lt;/code&gt; フィールドを。 &lt;code&gt;id&lt;/code&gt; アカウント名です。 &lt;code&gt;password&lt;/code&gt; フィールドは読み込みよりも書き込み時に動作が異なります。このフィールドに値を書き込んで（または &lt;code&gt;false&lt;/code&gt; を書き込んでパスワードを削除して）、アカウントのパスワードを変更できますが、パスワードを読み取ることはできません。代わりに、読み取り操作では、 &lt;code&gt;password&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; になり、アカウントにパスワードがあるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="01c8bf644a4f9030d7ad2577d422c0cd9a38c6cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wait&lt;/code&gt; command takes two optional arguments:</source>
          <target state="translated">&lt;code&gt;wait&lt;/code&gt; コマンドは、2つのオプションの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="e2eaaabe02ee4500dead731d18d5ec0e845f4d2e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;map&lt;/strong&gt; step from above.</source>
          <target state="translated">&lt;strong&gt;上&lt;/strong&gt;からの&lt;strong&gt;地図&lt;/strong&gt;ステップ。</target>
        </trans-unit>
        <trans-unit id="2889c83235362d653b025be4c1c424ba1ce7d91e" translate="yes" xml:space="preserve">
          <source>The CSV delimiter defaults to the comma, but this can be overridden with the &lt;code&gt;--delimiter&lt;/code&gt; option. Use &lt;code&gt;--delimiter '\t'&lt;/code&gt; for a tab-delimited file.</source>
          <target state="translated">CSV区切り文字のデフォルトはカンマですが、これは &lt;code&gt;--delimiter&lt;/code&gt; オプションでオーバーライドできます。タブ区切りファイルには &lt;code&gt;--delimiter '\t'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4c6c8ae6aa468752854d01d185af510f328007df" translate="yes" xml:space="preserve">
          <source>The Data Explorer in the web administration UI is itself a JavaScript REPL, with syntax highlighting and history. (The article on &lt;a href=&quot;../reql-data-exploration/index&quot;&gt;ReQL data exploration&lt;/a&gt; goes into some detail on how to use the Data Explorer.) The advantage of scripting languages with ReQL comes into play when writing administration scripts.</source>
          <target state="translated">Web管理UIのデータエクスプローラーは、それ自体がJavaScript REPLであり、構文の強調表示と履歴があります。（&lt;a href=&quot;../reql-data-exploration/index&quot;&gt;ReQLデータ探索&lt;/a&gt;に関する記事では、データエクスプローラーの使用方法について詳しく説明しています。）管理スクリプトを作成する際には、ReQLを使用したスクリプト言語の利点が発揮されます。</target>
        </trans-unit>
        <trans-unit id="2921a82497eb6c2b10a8bb44faddbdf034525af2" translate="yes" xml:space="preserve">
          <source>The Data Explorer will return information about the inserted rows.</source>
          <target state="translated">データ エクスプローラーは、挿入された行に関する情報を返します。</target>
        </trans-unit>
        <trans-unit id="17f8232887e712c610ded4c3b1ca09822b2f7852" translate="yes" xml:space="preserve">
          <source>The JSON-encoded &lt;code&gt;Response&lt;/code&gt; object</source>
          <target state="translated">JSONエンコードされた &lt;code&gt;Response&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="ae581c711fdded915ec6331d2e6201dc801ce45f" translate="yes" xml:space="preserve">
          <source>The JSON-encoded response</source>
          <target state="translated">JSONエンコードされたレスポンス</target>
        </trans-unit>
        <trans-unit id="401226b470a193230b4f51fd65ea09e28b5975e5" translate="yes" xml:space="preserve">
          <source>The JavaScript and Python drivers support a convenience command, &lt;code&gt;row()&lt;/code&gt;, which simply returns the currently selected document for use with other ReQL functions in the query. However, &lt;code&gt;row&lt;/code&gt; won&amp;rsquo;t work within nested queries. The solution to this error is to rewrite the &lt;code&gt;row&lt;/code&gt; clause as an anonymous function. So the following:</source>
          <target state="translated">JavaScriptおよびPythonドライバーは、便利なコマンド &lt;code&gt;row()&lt;/code&gt; をサポートしています。これは、現在選択されているドキュメントを単に返し、クエリ内の他のReQL関数で使用できるようにします。ただし、 &lt;code&gt;row&lt;/code&gt; はネストされたクエリ内では機能しません。このエラーの解決策は、無名関数として &lt;code&gt;row&lt;/code&gt; 句を書き換えることです。したがって、次のようになります。</target>
        </trans-unit>
        <trans-unit id="d93cb88766b967f3d6c02e56c626c06eefa41694" translate="yes" xml:space="preserve">
          <source>The JavaScript driver currently works with Node.js versions 0.10.0 and above. You can check your node version as follows:</source>
          <target state="translated">JavaScriptドライバは現在、Node.jsのバージョン0.10.0以上で動作します。ノードのバージョンは以下のように確認できます。</target>
        </trans-unit>
        <trans-unit id="e74f35f90936d1e818634cc6a9b8cc53ac18e27c" translate="yes" xml:space="preserve">
          <source>The NoBrainer generator automatically includes the &lt;a href=&quot;http://nobrainer.io/docs/timestamps&quot;&gt;TimeStamps&lt;/a&gt; mixin that adds the fields &lt;code&gt;created_on&lt;/code&gt; and &lt;code&gt;updated_on&lt;/code&gt;. You&amp;rsquo;ll also notice this created a simple secondary index on the &lt;code&gt;name&lt;/code&gt; field. In order to add the index to the database, you can use the Rake task:</source>
          <target state="translated">NoBrainerジェネレーターには、フィールド &lt;code&gt;created_on&lt;/code&gt; および &lt;code&gt;updated_on&lt;/code&gt; を追加する&lt;a href=&quot;http://nobrainer.io/docs/timestamps&quot;&gt;TimeStamps&lt;/a&gt;ミックスインが自動的に含まれます。これにより、 &lt;code&gt;name&lt;/code&gt; フィールドに単純なセカンダリインデックスが作成されたことにも気付くでしょう。データベースにインデックスを追加するには、Rakeタスクを使用できます。</target>
        </trans-unit>
        <trans-unit id="f78507d39aba2403ee6f13a4ffbdf2b02ac49261" translate="yes" xml:space="preserve">
          <source>The ReQL &lt;a href=&quot;../../api/javascript/grant/index&quot;&gt;grant&lt;/a&gt; command is used to grant and revoke permissions for users. The scope is selected by chaining &lt;code&gt;grant&lt;/code&gt; after &lt;code&gt;db&lt;/code&gt; (for database scope), &lt;code&gt;table&lt;/code&gt; (for table scope), or calling it directly (for global scope).</source>
          <target state="translated">ReQL &lt;a href=&quot;../../api/javascript/grant/index&quot;&gt;grant&lt;/a&gt;コマンドは、ユーザーの権限を付与および取り消すために使用されます。スコープは、 &lt;code&gt;db&lt;/code&gt; （データベーススコープの場合）、 &lt;code&gt;table&lt;/code&gt; （テーブルスコープの場合）の後に &lt;code&gt;grant&lt;/code&gt; をチェーンするか、または直接（グローバルスコープの場合）呼び出すことによって選択されます。</target>
        </trans-unit>
        <trans-unit id="3deef836c1824d07b0b55b81f06b31f6cc374b4d" translate="yes" xml:space="preserve">
          <source>The RethinkDB AMI is preconfigured with the following options:</source>
          <target state="translated">RethinkDB AMIには、以下のオプションがあらかじめ設定されています。</target>
        </trans-unit>
        <trans-unit id="f68f0cac323d8bd865cffdbd7126de4c860b2528" translate="yes" xml:space="preserve">
          <source>The RethinkDB Python driver integrates with both the &lt;a href=&quot;http://www.tornadoweb.org/&quot;&gt;Tornado web framework&lt;/a&gt; and the &lt;a href=&quot;http://twistedmatrix.com/&quot;&gt;Twisted networking engine&lt;/a&gt;. By using the &lt;a href=&quot;https://rethinkdb.com/api/python/set_loop_type&quot;&gt;set_loop_type&lt;/a&gt; command, you can select either the &lt;code&gt;'tornado'&lt;/code&gt; or &lt;code&gt;'twisted'&lt;/code&gt; event loop model, returning Tornado &lt;code&gt;Future&lt;/code&gt; objects or Twisted &lt;code&gt;Deferred&lt;/code&gt; objects respectively.</source>
          <target state="translated">RethinkDB Pythonドライバーは、&lt;a href=&quot;http://www.tornadoweb.org/&quot;&gt;Tornado Webフレームワーク&lt;/a&gt;と&lt;a href=&quot;http://twistedmatrix.com/&quot;&gt;Twistedネットワークエンジンの&lt;/a&gt;両方と統合されます。&lt;a href=&quot;https://rethinkdb.com/api/python/set_loop_type&quot;&gt;set_loop_type&lt;/a&gt;コマンドを使用して、 &lt;code&gt;'tornado'&lt;/code&gt; または &lt;code&gt;'twisted'&lt;/code&gt; イベントループモデルを選択し、トルネード &lt;code&gt;Future&lt;/code&gt; オブジェクトまたはツイスト &lt;code&gt;Deferred&lt;/code&gt; オブジェクトをそれぞれ返すことができます。</target>
        </trans-unit>
        <trans-unit id="d1887d58aefbe9cd201c7569b6def6f9b46a2192" translate="yes" xml:space="preserve">
          <source>The RethinkDB Ruby driver adds a new ReQL command, &lt;a href=&quot;https://rethinkdb.com/api/ruby/em_run&quot;&gt;em_run&lt;/a&gt;, designed to work with &lt;a href=&quot;http://rubyeventmachine.com&quot;&gt;EventMachine&lt;/a&gt;. In addition, it provides a superclass, &lt;code&gt;RethinkDB::Handler&lt;/code&gt;, with event-specific methods (e.g., &lt;code&gt;on_open&lt;/code&gt;, &lt;code&gt;on_close&lt;/code&gt;) that may be overridden by a class your application defines and passes to &lt;code&gt;em_run&lt;/code&gt;.</source>
          <target state="translated">RethinkDB Rubyドライバーは新しいReQLコマンド、追加&lt;a href=&quot;https://rethinkdb.com/api/ruby/em_run&quot;&gt;em_run&lt;/a&gt;で動作するように設計された、&lt;a href=&quot;http://rubyeventmachine.com&quot;&gt;EventMachineを&lt;/a&gt;。さらに、アプリケーションが定義して &lt;code&gt;em_run&lt;/code&gt; に渡すクラスによってオーバーライドされる可能性のあるイベント固有のメソッド（例： &lt;code&gt;on_open&lt;/code&gt; 、 &lt;code&gt;on_close&lt;/code&gt; ）を &lt;code&gt;RethinkDB::Handler&lt;/code&gt; たスーパークラスRethinkDB :: Handlerを提供します。</target>
        </trans-unit>
        <trans-unit id="cb928e983992a16cf85ee7c757c4a76ce7b98a95" translate="yes" xml:space="preserve">
          <source>The RethinkDB command line utility allows you to easily take hot backups on a live cluster with the &lt;code&gt;dump&lt;/code&gt; and &lt;code&gt;restore&lt;/code&gt; subcommands. The utility runs under the &lt;code&gt;admin&lt;/code&gt; user account (see &lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;Permissions and user accounts&lt;/a&gt;).</source>
          <target state="translated">RethinkDBコマンドラインユーティリティでは、 &lt;code&gt;dump&lt;/code&gt; および &lt;code&gt;restore&lt;/code&gt; サブコマンドを使用して、ライブクラスターでホットバックアップを簡単に実行できます。ユーティリティは、 &lt;code&gt;admin&lt;/code&gt; ユーザーアカウントで実行されます（&lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;権限とユーザーアカウントを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="56cccb51dd81c41e2a73448104ab42e75c1bf07f" translate="yes" xml:space="preserve">
          <source>The Tables</source>
          <target state="translated">テーブル</target>
        </trans-unit>
        <trans-unit id="b73116bcd937f8234ed2fae850b17a96ef62cc32" translate="yes" xml:space="preserve">
          <source>The above structure is functionally identical to:</source>
          <target state="translated">上記構造は、機能的には同一である。</target>
        </trans-unit>
        <trans-unit id="7be08bdb688785dbc0b51a07a4d14e27d4297a6f" translate="yes" xml:space="preserve">
          <source>The admin account</source>
          <target state="translated">管理者アカウント</target>
        </trans-unit>
        <trans-unit id="bd4b50bb6475112f6456711fd2e86904fd04ed69" translate="yes" xml:space="preserve">
          <source>The admin user</source>
          <target state="translated">管理者ユーザ</target>
        </trans-unit>
        <trans-unit id="c49266cd9dfe06ccf934b0d6a03045039f4b9596" translate="yes" xml:space="preserve">
          <source>The asynchronous database API allows you to handle multiple changefeeds simultaneously by running multiple background tasks. As an example, consider this changefeed handler:</source>
          <target state="translated">非同期データベースAPIを使用すると、複数のバックグラウンドタスクを実行することで、複数の変更フィードを同時に処理することができます。例として、次のようなチェンジフィードハンドラを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="74d2dd939eb0d6439399f983d97cb288040a44ea" translate="yes" xml:space="preserve">
          <source>The asynchronous database API allows you to handle multiple changefeeds simultaneously by scheduling background coroutines. As an example, consider this changefeed handler:</source>
          <target state="translated">非同期データベースAPIでは、バックグラウンドのコルーチンをスケジューリングすることで、複数のチェンジフィードを同時に処理することができます。例として、次のようなチェンジフィードハンドラを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="519ebcd651eb55bc4130940c4263b3c1d13577fa" translate="yes" xml:space="preserve">
          <source>The automatically chosen cache size ensures a reliable operation in most scenarios, but the cache size can be tuned manually to accommodate increased memory usage by other processes or to maximize query performance. A larger cache improves the database&amp;rsquo;s performance, but you must consider other sources of memory consumption to avoid out of memory conditions.</source>
          <target state="translated">自動的に選択されたキャッシュサイズは、ほとんどのシナリオで信頼できる操作を保証しますが、キャッシュサイズは、他のプロセスによるメモリ使用量の増加に対応するか、クエリのパフォーマンスを最大化するために手動で調整できます。キャッシュを大きくすると、データベースのパフォーマンスが向上しますが、メモリ不足の状態を回避するために、他のメモリ消費の原因を考慮する必要があります。</target>
        </trans-unit>
        <trans-unit id="01e374f6277f44b97e1222377bc67dde6a9c6976" translate="yes" xml:space="preserve">
          <source>The backtrace from the crash, if it&amp;rsquo;s available in the logs.</source>
          <target state="translated">クラッシュからのバックトレース（ログで利用可能な場合）。</target>
        </trans-unit>
        <trans-unit id="713ad2f29426066c8fb98399dc92a553f0434ed4" translate="yes" xml:space="preserve">
          <source>The basic rule is:</source>
          <target state="translated">基本中の基本です。</target>
        </trans-unit>
        <trans-unit id="a4675c5be848d511ac96d9c2063be8e951d3254f" translate="yes" xml:space="preserve">
          <source>The basic setup is complete&amp;mdash;&lt;strong&gt;you&amp;rsquo;ve now got a working server!&lt;/strong&gt;</source>
          <target state="translated">基本的なセットアップが完了しました&lt;strong&gt;。これでサーバーが機能しました。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa6fd40233d0f51b4739f7f3b630ae6b5e237c7d" translate="yes" xml:space="preserve">
          <source>The best way to secure a RethinkDB cluster is to run it on a protected network that doesn&amp;rsquo;t allow access from the outside world. However, this may not always be feasible. For example, cloud deployments often require access from wide area networks.</source>
          <target state="translated">RethinkDBクラスターを保護する最良の方法は、外部からのアクセスを許可しない保護されたネットワーク上で実行することです。ただし、これは常に可能であるとは限りません。たとえば、クラウドの導入では、ワイドエリアネットワークからのアクセスが必要になることがよくあります。</target>
        </trans-unit>
        <trans-unit id="8a6a0b311a15c9d3de4c39c35a42e039d165be26" translate="yes" xml:space="preserve">
          <source>The body of every &lt;a href=&quot;../filter/index&quot;&gt;filter&lt;/a&gt; is wrapped in an implicit &lt;code&gt;.default(false)&lt;/code&gt;. You can overwrite the value &lt;code&gt;false&lt;/code&gt; with the &lt;code&gt;default&lt;/code&gt; option.</source>
          <target state="translated">すべての&lt;a href=&quot;../filter/index&quot;&gt;フィルター&lt;/a&gt;の本体は、暗黙の &lt;code&gt;.default(false)&lt;/code&gt; でラップされています。 &lt;code&gt;default&lt;/code&gt; オプションで値 &lt;code&gt;false&lt;/code&gt; を上書きできます。</target>
        </trans-unit>
        <trans-unit id="fe5a7c4ac68bb0098f4c7acbfa8d3521ed65b4f3" translate="yes" xml:space="preserve">
          <source>The calls above only return a few dozen stargazers while RethinkDB has thousands. Most APIs paginate large result sets and GitHub is no exception. The &lt;code&gt;r.http&lt;/code&gt; command has built-in support for pagination via the &lt;code&gt;page&lt;/code&gt; and &lt;code&gt;pageLimit&lt;/code&gt; arguments. Let&amp;rsquo;s get ten pages of stargazers from GitHub instead of one:</source>
          <target state="translated">上記の呼び出しは数十のスターゲイザーのみを返しますが、RethinkDBには数千があります。ほとんどのAPIは大きな結果セットにページ番号を付けますが、GitHubも例外ではありません。 &lt;code&gt;r.http&lt;/code&gt; のコマンドが組み込まれているページネーションのためのサポートを経由して &lt;code&gt;page&lt;/code&gt; と &lt;code&gt;pageLimit&lt;/code&gt; 引数。GitHubから1ページではなく10ページのスターゲイザーを取得しましょう。</target>
        </trans-unit>
        <trans-unit id="c66da8d1fa6ce80f3799528d078f5270ec96090d" translate="yes" xml:space="preserve">
          <source>The center may be specified either by two floating point numbers, the latitude (&amp;minus;90 to 90) and longitude (&amp;minus;180 to 180) of the point on a perfect sphere (see &lt;a href=&quot;../../../docs/geo-support/javascript/index&quot;&gt;Geospatial support&lt;/a&gt; for more information on ReQL&amp;rsquo;s coordinate system), or by a point object. The radius is a floating point number whose units are meters by default, although that may be changed with the &lt;code&gt;unit&lt;/code&gt; argument.</source>
          <target state="translated">中心は、2つの浮動小数点数、完全な球体上の点の緯度（-90〜90）および経度（-180〜180）（ReQLの座標系の詳細については&lt;a href=&quot;../../../docs/geo-support/javascript/index&quot;&gt;地理空間のサポート&lt;/a&gt;を参照）、またはポイントオブジェクト。半径は浮動小数点数で、単位はデフォルトでメートルですが、これは &lt;code&gt;unit&lt;/code&gt; 引数で変更できます。</target>
        </trans-unit>
        <trans-unit id="e51cfd64d4a242d067b7d8103f85064dab48e6f1" translate="yes" xml:space="preserve">
          <source>The classic chat with Node.js.</source>
          <target state="translated">Node.jsを使った定番のチャット。</target>
        </trans-unit>
        <trans-unit id="4a08ba537a6bb6b6e0207beb1bd8c225b336d162" translate="yes" xml:space="preserve">
          <source>The client drivers do a lot of work to inspect the code and convert it to an efficient ReQL query that will be executed on the server:</source>
          <target state="translated">クライアントドライバは、コードを検査し、サーバ上で実行される効率的なReQLクエリに変換するために多くの作業を行います。</target>
        </trans-unit>
        <trans-unit id="fd0e48d480584e226bdbfe1b39b400ad644d5c44" translate="yes" xml:space="preserve">
          <source>The client sends the &amp;ldquo;magic number&amp;rdquo; (&lt;code&gt;0x34c2bdc3&lt;/code&gt;) for the protocol version, as a 32-bit little-endian integer (4 bytes).</source>
          <target state="translated">クライアントは、プロトコルバージョンの「マジックナンバー」（ &lt;code&gt;0x34c2bdc3&lt;/code&gt; ）を32ビットのリトルエンディアン整数（4バイト）として送信します。</target>
        </trans-unit>
        <trans-unit id="a0cfe67e46bd1330804a94bb469638f0249ededc" translate="yes" xml:space="preserve">
          <source>The client sends the null-terminated JSON &amp;ldquo;client-final-message&amp;rdquo; with the same nonce and the ClientProof computed as specified by the RFC.</source>
          <target state="translated">クライアントは、同じナンスとRFCで指定されたように計算されたClientProofを使用して、ヌルで終了するJSON「client-final-message」を送信します。</target>
        </trans-unit>
        <trans-unit id="02a49fdc9855f3f674aee23d74d2e1ea07fdd5ec" translate="yes" xml:space="preserve">
          <source>The client sends the protocol version, authentication method, and authentication as a null-terminated JSON response. RethinkDB currently supports only one authentication method, &lt;code&gt;SCRAM-SHA-256&lt;/code&gt;, as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc7677&quot;&gt;IETF RFC 7677&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc5802&quot;&gt;RFC 5802&lt;/a&gt;. The RFC is followed with the exception of error handling (RethinkDB uses its own higher level error reporting rather than the &lt;code&gt;e=&lt;/code&gt; field). RethinkDB does not support channel binding and clients should not request this. The value of &lt;code&gt;&quot;authentication&quot;&lt;/code&gt; is the &amp;ldquo;client-first-message&amp;rdquo; specified in RFC 5802 (the channel binding flag, optional SASL authorization identity, username (&lt;code&gt;n=&lt;/code&gt;), and random nonce (&lt;code&gt;r=&lt;/code&gt;).</source>
          <target state="translated">クライアントは、プロトコルバージョン、認証方法、および認証をnullで終了するJSON応答として送信します。 RethinkDBは現在、&lt;a href=&quot;https://tools.ietf.org/html/rfc7677&quot;&gt;IETF RFC 7677&lt;/a&gt;および&lt;a href=&quot;https://tools.ietf.org/html/rfc5802&quot;&gt;RFC 5802で&lt;/a&gt;指定されているように、 &lt;code&gt;SCRAM-SHA-256&lt;/code&gt; の 1つの認証方法のみをサポートしています。エラー処理を除いて、RFCに従います（RethinkDBは、 &lt;code&gt;e=&lt;/code&gt; フィールドではなく、独自の高レベルのエラー報告を使用します）。 RethinkDBはチャネルバインディングをサポートしていないため、クライアントはこれを要求しないでください。 &lt;code&gt;&quot;authentication&quot;&lt;/code&gt; の値は、RFC 5802で指定されている「client-first-message」です（チャネルバインディングフラグ、オプションのSASL認可ID、ユーザー名（ &lt;code&gt;n=&lt;/code&gt; ）、ランダムナンス（ &lt;code&gt;r=&lt;/code&gt; ））。</target>
        </trans-unit>
        <trans-unit id="0a84a6d65e8a3295aa13f3589f630b727d114e51" translate="yes" xml:space="preserve">
          <source>The cluster configuration is &lt;em&gt;not&lt;/em&gt; exported in backup. After a full restore, it will need to be manually reconfigured.</source>
          <target state="translated">クラスター構成はバックアップでエクスポートされ&lt;em&gt;ません&lt;/em&gt;。完全な復元後、手動で再構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="3780ae988b6b36953e49487d4455ef2b6bdb38c3" translate="yes" xml:space="preserve">
          <source>The cluster must have three or more servers</source>
          <target state="translated">クラスタには3台以上のサーバーが必要です。</target>
        </trans-unit>
        <trans-unit id="632b0a977c5ac1169440868320737c67d0be367c" translate="yes" xml:space="preserve">
          <source>The configuration file&amp;rsquo;s location depends on the startup system your distribution uses. A configuration file may also be specified on the command line with the &lt;code&gt;--config-file&lt;/code&gt; option.</source>
          <target state="translated">構成ファイルの場所は、ディストリビューションが使用する起動システムによって異なります。コマンドラインで &lt;code&gt;--config-file&lt;/code&gt; オプションを使用して設定ファイルを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="8d57968bb10f1a8ee059f9f4fabbd5506039b2ce" translate="yes" xml:space="preserve">
          <source>The conflicting field is &lt;code&gt;id&lt;/code&gt;. If you directly use the &lt;code&gt;zip&lt;/code&gt; command, the &lt;code&gt;id&lt;/code&gt; field of the result will be the one from the company. There are three ways to resolve potential field conflicts.</source>
          <target state="translated">競合するフィールドは &lt;code&gt;id&lt;/code&gt; です。 &lt;code&gt;zip&lt;/code&gt; コマンドを直接使用する場合、結果の &lt;code&gt;id&lt;/code&gt; フィールドは会社からのフィールドになります。潜在的なフィールドの競合を解決するには、3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="41a66fdd8d9de0bac5ea2260645056298020b2b8" translate="yes" xml:space="preserve">
          <source>The contact information is &lt;em&gt;nested,&lt;/em&gt; like paths in a file system.</source>
          <target state="translated">連絡先情報は、ファイルシステムのパスのように&lt;em&gt;ネストされ&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="46e1e4bcb0e4603cd6cff58253ffb59a537fc94c" translate="yes" xml:space="preserve">
          <source>The core file, if it was dumped on crash</source>
          <target state="translated">コアファイルがクラッシュ時にダンプされた場合</target>
        </trans-unit>
        <trans-unit id="ba97166dc1556a5cdbc1fb0a9720d0a77462db53" translate="yes" xml:space="preserve">
          <source>The current issues table is one of the &lt;a href=&quot;../system-tables/index&quot;&gt;system tables&lt;/a&gt; added in version 1.16 of RethinkDB. Querying it returns problems detected within the cluster; in normal, error-free operation, it will remain empty. The table is read-only.</source>
          <target state="translated">現在の問題のテーブルは、RethinkDBのバージョン1.16で追加された&lt;a href=&quot;../system-tables/index&quot;&gt;システムテーブルの&lt;/a&gt; 1つです。クエリを実行すると、クラスター内で検出された問題が返されます。通常のエラーのない操作では、空のままになります。テーブルは読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="9e81558969cd0f2524d236b46d01319070689378" translate="yes" xml:space="preserve">
          <source>The data files if RethinkDB cannot restart&amp;sup1;</source>
          <target state="translated">RethinkDBが再起動できない場合のデータファイル&amp;sup1;</target>
        </trans-unit>
        <trans-unit id="25aadde4cb61338d8bafe72ae41695aff82a3946" translate="yes" xml:space="preserve">
          <source>The data is often colocated on disk. If you have a dataset that doesn&amp;rsquo;t fit into RAM, data is loaded from disk faster.</source>
          <target state="translated">多くの場合、データはディスク上に配置されます。RAMに収まらないデータセットがある場合、データはディスクからより速く読み込まれます。</target>
        </trans-unit>
        <trans-unit id="432d68834696a4171c465fcdf29cc3b60b18ac02" translate="yes" xml:space="preserve">
          <source>The data is organized into B-Trees, and stored on disk using a log-structured storage engine built specifically for RethinkDB and inspired by the architecture of BTRFS. The storage engine has a number of benefits over other available options, including an incremental, fully concurrent garbage compactor, low CPU overhead and very efficient multicore operation, a number of SSD optimizations, instantaneous recovery after power failure, full data consistency in case of failures, and support for multiversion concurrency control.</source>
          <target state="translated">データはBツリーに整理され、RethinkDB用に特別に構築され、BTRFSのアーキテクチャにインスパイアされたログ構造化ストレージエンジンを使用してディスクに保存されます。このストレージエンジンは、インクリメンタルで完全同時実行型のガベージコンパクタ、低いCPUオーバーヘッドと非常に効率的なマルチコア動作、多くのSSD最適化、電源障害後の即時リカバリ、障害発生時の完全なデータ一貫性、マルチバージョン同時実行制御のサポートなど、他の利用可能なオプションと比較して多くの利点を持っています。</target>
        </trans-unit>
        <trans-unit id="ca3fd25b569c562f5c89d32cc20220b1580eb52d" translate="yes" xml:space="preserve">
          <source>The data set generated by YCSB consists of 25 million documents, sized at 1 KB each. All data fits into the server cache in this scenario.</source>
          <target state="translated">YCSBによって生成されたデータセットは、各1KBのサイズの2500万文書で構成されています。このシナリオでは、すべてのデータがサーバーキャッシュに収まります。</target>
        </trans-unit>
        <trans-unit id="d6f5c132a6c8fcdd7afd1c8bae8bfba8ab30a7d1" translate="yes" xml:space="preserve">
          <source>The default security group opens 4 ports:</source>
          <target state="translated">デフォルトのセキュリティグループは4つのポートを開きます。</target>
        </trans-unit>
        <trans-unit id="f19e6a7695718d0586846f66bc593da2a988d29b" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is with the &lt;code&gt;openssl&lt;/code&gt; command line tool. (Under Linux and OS X, this is already installed; for Windows, you may be able to find &lt;a href=&quot;https://wiki.openssl.org/index.php/Binaries&quot;&gt;precompiled binaries&lt;/a&gt; from the list on the OpenSSL wiki.)</source>
          <target state="translated">これを行う最も簡単な方法は、 &lt;code&gt;openssl&lt;/code&gt; コマンドラインツールを使用することです。（LinuxおよびOS Xでは、これはすでにインストールされています。Windowsの場合、OpenSSL wikiのリストから&lt;a href=&quot;https://wiki.openssl.org/index.php/Binaries&quot;&gt;プリコンパイルされたバイナリ&lt;/a&gt;を見つけることができる場合があります。）</target>
        </trans-unit>
        <trans-unit id="f6f1812991e1cc3c581617dbd4daebc446ccc185" translate="yes" xml:space="preserve">
          <source>The easiest way to rename a database is to use the &lt;a href=&quot;../../../api/javascript/config/index&quot;&gt;config&lt;/a&gt; command to access the &lt;code&gt;db_config&lt;/code&gt;&lt;a href=&quot;../../system-tables/index&quot;&gt;system table&lt;/a&gt;, and then simply use the &lt;code&gt;update&lt;/code&gt; command.</source>
          <target state="translated">データベースの名前を変更する最も簡単な方法は、&lt;a href=&quot;../../../api/javascript/config/index&quot;&gt;config&lt;/a&gt;コマンドを使用して &lt;code&gt;db_config&lt;/code&gt; &lt;a href=&quot;../../system-tables/index&quot;&gt;システムテーブル&lt;/a&gt;にアクセスし、次に &lt;code&gt;update&lt;/code&gt; コマンドを使用することです。</target>
        </trans-unit>
        <trans-unit id="89bd55fcff5767ef7274bfe1e8ce0c5c79f0d4ff" translate="yes" xml:space="preserve">
          <source>The easiest way to use RethinkDB with EventMachine is simply by passing a block to &lt;code&gt;em_run&lt;/code&gt;. If RethinkDB returns a sequence (including a stream), the block will be called once with each element of the sequence. Otherwise, the block will be called just once with the returned value.</source>
          <target state="translated">EventMachineでRethinkDBを使用する最も簡単な方法は、ブロックを &lt;code&gt;em_run&lt;/code&gt; に渡すことです。RethinkDBがシーケンス（ストリームを含む）を返す場合、ブロックはシーケンスの各要素で一度呼び出されます。それ以外の場合、ブロックは戻り値とともに一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e8f5bff35a4c9660e74c3c9c467c02d19d234371" translate="yes" xml:space="preserve">
          <source>The entire query on the exchange is:</source>
          <target state="translated">取引所のクエリ全体は</target>
        </trans-unit>
        <trans-unit id="7872f9fb3324da93dd0fa2f2d9cad699581f3968" translate="yes" xml:space="preserve">
          <source>The equivalent query with the &lt;code&gt;each&lt;/code&gt; command would be:</source>
          <target state="translated">&lt;code&gt;each&lt;/code&gt; コマンドを使用した同等のクエリは次のようになります。</target>
        </trans-unit>
        <trans-unit id="97251998b6e48bd65cb3a5f03d2385e3f4ad6124" translate="yes" xml:space="preserve">
          <source>The essential tradeoff exposed by the CAP theorem is this: in case of network partitioning, does the system maintain availability or data consistency? (Jumping ahead, RethinkDB chooses to maintain data consistency).</source>
          <target state="translated">CAP定理が示す本質的なトレードオフは次のようなものです:ネットワーク・パーティショニングの場合、システムは可用性を維持するのか、それともデータの一貫性を維持するのか?(先に飛びますが、RethinkDBはデータの一貫性を維持することを選択します)。</target>
        </trans-unit>
        <trans-unit id="ffdbbb7e20b2915b198b1869df59132f308dec83" translate="yes" xml:space="preserve">
          <source>The example documentation includes a &lt;a href=&quot;https://github.com/rethinkdb/example-pubsub/blob/master/javascript/demo.js'&quot;&gt;demo script&lt;/a&gt; that shows off the three topic patterns described above. The script implements both a publisher and a subscriber with each pattern type. You can use this script to try out multiple publishers and multiple subscribers to test out how it works.</source>
          <target state="translated">サンプルドキュメントには、上記の3つのトピックパターンを示す&lt;a href=&quot;https://github.com/rethinkdb/example-pubsub/blob/master/javascript/demo.js'&quot;&gt;デモスクリプト&lt;/a&gt;が含まれています。スクリプトは、パブリッシャーとサブスクライバーの両方を各パターンタイプで実装します。このスクリプトを使用して、複数のパブリッシャーと複数のサブスクライバーを試して、動作をテストできます。</target>
        </trans-unit>
        <trans-unit id="9edfaf70b3165d1edeb4b2ca333e0e5c7f12d86f" translate="yes" xml:space="preserve">
          <source>The field &lt;code&gt;left&lt;/code&gt; contains the information from the left table in the query (in this case, the employee)</source>
          <target state="translated">&lt;code&gt;left&lt;/code&gt; のフィールドには、クエリの左側のテーブルからの情報（この場合は従業員）が含まれています</target>
        </trans-unit>
        <trans-unit id="9c8dc7c54d50cbb27b2e5e50ed222c7c1bcabb6f" translate="yes" xml:space="preserve">
          <source>The field &lt;code&gt;right&lt;/code&gt; contains the information from the right table in the query (in this case, the company)</source>
          <target state="translated">&lt;code&gt;right&lt;/code&gt; のフィールドには、クエリの右側のテーブルからの情報が含まれます（この場合は会社）。</target>
        </trans-unit>
        <trans-unit id="5ca20f66475f57f24716ce5a447518106f391982" translate="yes" xml:space="preserve">
          <source>The field name can be determined entirely on the server, too. For instance, to update a field whose name is drawn from the value of another field:</source>
          <target state="translated">フィールド名はサーバー上で完全に決定することもできます。例えば、別のフィールドの値から名前が引き出されたフィールドを更新することができます。</target>
        </trans-unit>
        <trans-unit id="58a69ccf3b964eb9485bcdd26e8c05306cda5c74" translate="yes" xml:space="preserve">
          <source>The file system it&amp;rsquo;s using</source>
          <target state="translated">使用しているファイルシステム</target>
        </trans-unit>
        <trans-unit id="26add78546ea5b911c7f22338e8d01f8bc519e6c" translate="yes" xml:space="preserve">
          <source>The file uses a simple format of &lt;code&gt;key=value&lt;/code&gt;, with one key specified per line. A simple configuration file that uses the default ports, assigns a server to a virtual group using server tags and joins an existing cluster might be:</source>
          <target state="translated">このファイルは &lt;code&gt;key=value&lt;/code&gt; の単純な形式を使用しており、1行に1つのキーが指定されています。デフォルトのポートを使用し、サーバータグを使用してサーバーを仮想グループに割り当て、既存のクラスターに参加する単純な構成ファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="967d896d236ec1fb0a5af483a32f7ac64a4a217d" translate="yes" xml:space="preserve">
          <source>The final reduction step is executed to combine the values of the two shards. Instead of computing &lt;code&gt;4 + 6&lt;/code&gt;, the query executes &lt;code&gt;4 + 1&lt;/code&gt;.</source>
          <target state="translated">2つの破片の値を組み合わせるために、最後の削減ステップが実行されます。 &lt;code&gt;4 + 6&lt;/code&gt; を計算する代わりに、クエリは &lt;code&gt;4 + 1&lt;/code&gt; 実行します。</target>
        </trans-unit>
        <trans-unit id="06a69ef2f78978540f8142d1df127e4cad310aea" translate="yes" xml:space="preserve">
          <source>The first argument, &lt;code&gt;context&lt;/code&gt;, is a ReQL object containing the following properties:</source>
          <target state="translated">最初の引数 &lt;code&gt;context&lt;/code&gt; は、次のプロパティを含むReQLオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="21c10050daac2ef80e360f5105e9b0c7210bb045" translate="yes" xml:space="preserve">
          <source>The first function increments the accumulator each time it&amp;rsquo;s called, starting at &lt;code&gt;0&lt;/code&gt;; the second function, the emitting function, alternates between returning a single-item list containing the current row or an empty list. The &lt;code&gt;fold&lt;/code&gt; command will return a concatenated list of each emitted value.</source>
          <target state="translated">最初の関数は、呼び出されるたびにアキュムレータを &lt;code&gt;0&lt;/code&gt; からインクリメントします。2番目の関数である放出関数は、現在の行を含む単一項目リストまたは空のリストを交互に返します。 &lt;code&gt;fold&lt;/code&gt; コマンドは、各放射された値の連結リストを返します。</target>
        </trans-unit>
        <trans-unit id="c8fd60f1adeaf3727bc4bf3fdd3883868eaa6238" translate="yes" xml:space="preserve">
          <source>The first layer implements the distributed infrastructure, placing copies of data on specific servers, routing queries, etc.</source>
          <target state="translated">第1層は分散型インフラストラクチャを実装し、データのコピーを特定のサーバーに配置したり、クエリをルーティングしたりします。</target>
        </trans-unit>
        <trans-unit id="11ba98d6b6cd3aa5da8ea438eaebfebb10f6c61a" translate="yes" xml:space="preserve">
          <source>The first time you call an &lt;code&gt;EventEmitter&lt;/code&gt; method, the cursor or feed will emit data just after the I/O events callbacks and before &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; callbacks.</source>
          <target state="translated">初めて &lt;code&gt;EventEmitter&lt;/code&gt; メソッドを呼び出すとき、カーソルまたはフィードは、I / Oイベントコールバックの直後、 &lt;code&gt;setTimeout&lt;/code&gt; および &lt;code&gt;setInterval&lt;/code&gt; コールバックの前にデータを発行します。</target>
        </trans-unit>
        <trans-unit id="9d3e834a06be3d4a966b74e6eddbe6ce25aed60f" translate="yes" xml:space="preserve">
          <source>The first, required function passed to &lt;code&gt;eachAsync&lt;/code&gt; takes either one or two functions as arguments. The first is a callback to process each row as it is emitted; the second is an optional callback which will be executed when all row processing is completed.</source>
          <target state="translated">&lt;code&gt;eachAsync&lt;/code&gt; に渡される最初の必須関数は、1つまたは2つの関数を引数として受け取ります。1つ目は、発行された各行を処理するためのコールバックです。2番目は、すべての行処理が完了したときに実行されるオプションのコールバックです。</target>
        </trans-unit>
        <trans-unit id="f77e0ba8b65283ab2e514276f940a158831a2d01" translate="yes" xml:space="preserve">
          <source>The following browsers are supported and known to work with the web UI:</source>
          <target state="translated">以下のブラウザがサポートされており、Web UI と連携することが知られています。</target>
        </trans-unit>
        <trans-unit id="3df000274781b42d95e5cd8f246c23c4e2ddf8e2" translate="yes" xml:space="preserve">
          <source>The following command will output the contents of &lt;em&gt;all&lt;/em&gt; the configuration/status tables as well as the most recent 50 lines of the &lt;code&gt;logs&lt;/code&gt; table:</source>
          <target state="translated">次のコマンドは、&lt;em&gt;すべて&lt;/em&gt;の構成/ステータステーブルの内容と、 &lt;code&gt;logs&lt;/code&gt; テーブルの最新の50行を出力します。</target>
        </trans-unit>
        <trans-unit id="e980e576b3cf9e71a983706b28a74a69507c5ca2" translate="yes" xml:space="preserve">
          <source>The following commands can be distributed across shards:</source>
          <target state="translated">以下のコマンドは、シャード全体に分散させることができます。</target>
        </trans-unit>
        <trans-unit id="23607390bcdf5106a17d091ec59afc6366ef93aa" translate="yes" xml:space="preserve">
          <source>The following fields are always present in this object:</source>
          <target state="translated">このオブジェクトには、以下のフィールドが常に存在します。</target>
        </trans-unit>
        <trans-unit id="4fa7d560043390f25c44226fb5ceef0d02b7d4e2" translate="yes" xml:space="preserve">
          <source>The format of the array returned by &lt;code&gt;ungroup&lt;/code&gt; is the same as the default native format of grouped data in the javascript driver and data explorer.</source>
          <target state="translated">&lt;code&gt;ungroup&lt;/code&gt; によって返される配列の形式は、JavaScriptドライバーとデータエクスプローラーのグループ化されたデータのデフォルトのネイティブ形式と同じです。</target>
        </trans-unit>
        <trans-unit id="6ea8b9bda562c3a2c267fd13344c22561590ebae" translate="yes" xml:space="preserve">
          <source>The full list of &lt;code&gt;QueryType&lt;/code&gt; values is as follows:</source>
          <target state="translated">&lt;code&gt;QueryType&lt;/code&gt; 値の完全なリストは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="475b97f4658238ce4d91f9f9f592b520513498e2" translate="yes" xml:space="preserve">
          <source>The full output from &lt;code&gt;rethinkdb --version&lt;/code&gt;, something like:</source>
          <target state="translated">&lt;code&gt;rethinkdb --version&lt;/code&gt; からの完全な出力。</target>
        </trans-unit>
        <trans-unit id="14769e9184ffc530cac63e2fae1484534e1ee52b" translate="yes" xml:space="preserve">
          <source>The full output from &lt;code&gt;uname -a&lt;/code&gt;, something like:</source>
          <target state="translated">&lt;code&gt;uname -a&lt;/code&gt; からの完全な出力：</target>
        </trans-unit>
        <trans-unit id="69129d2da31b2f07b7562ea61774addc8ca3fc5c" translate="yes" xml:space="preserve">
          <source>The full query execution process is fairly complex and nuanced. For example, some operations cannot be parallelized, some queries cannot be executed lazily (which has implications on runtime and RAM usage), and implementations of some operations could be significantly improved. We will be adding tools to help visualize and understand query execution in a user-friendly way, but at the moment the best way to learn more about it is to ask us or to look at the code.</source>
          <target state="translated">クエリの実行プロセス全体はかなり複雑で微妙なものです。例えば、いくつかの操作は並列化できませんし、いくつかのクエリは怠惰に実行できません(これはランタイムやRAMの使用量に影響を与えます)。今後、クエリの実行をユーザーフレンドリーな方法で可視化して理解するためのツールを追加していく予定ですが、今のところは、私たちに質問するか、コードを見るのが一番の方法です。</target>
        </trans-unit>
        <trans-unit id="c162ed1ca38301acb854f2294b911ec17da79f31" translate="yes" xml:space="preserve">
          <source>The full syntax for the &lt;code&gt;import&lt;/code&gt; command is as follows:</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; コマンドの完全な構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="deca2cf2857457188d6ef69f7a463144da27b999" translate="yes" xml:space="preserve">
          <source>The function would be serialized as:</source>
          <target state="translated">この関数は次のようにシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="5f7cae79892fe7f333ad65e3b8f50bdbc5bee557" translate="yes" xml:space="preserve">
          <source>The function you give to &lt;code&gt;indexCreate&lt;/code&gt; must be deterministic. In practice this means that that you cannot use a function that contains a sub-query or the &lt;code&gt;r.js&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;indexCreate&lt;/code&gt; に指定する関数は確定的でなければなりません。実際には、これは、 &lt;code&gt;r.js&lt;/code&gt; またはr.jsコマンドを含む関数を使用できないことを意味します。</target>
        </trans-unit>
        <trans-unit id="21bb40f02c679aca148c3514604ac102d9df5cab" translate="yes" xml:space="preserve">
          <source>The games table contains these documents:</source>
          <target state="translated">ゲームテーブルには、これらのドキュメントが含まれています。</target>
        </trans-unit>
        <trans-unit id="c9fda65faa054c03a06f17658d0df4a9e5f090ac" translate="yes" xml:space="preserve">
          <source>The geospatial functions are implemented through a set of new geometric object data types:</source>
          <target state="translated">地理空間機能は、一連の新しい幾何学的オブジェクトデータ型を通して実装されています。</target>
        </trans-unit>
        <trans-unit id="66bf76a1e568737c42ee060cb4a10d8649ca86a7" translate="yes" xml:space="preserve">
          <source>The grant command</source>
          <target state="translated">グラントコマンド</target>
        </trans-unit>
        <trans-unit id="c5cc776f379421f9e0176920e32ec32956ce0ba2" translate="yes" xml:space="preserve">
          <source>The index must either be the primary key or have been previously created with &lt;a href=&quot;../index_create/index&quot;&gt;indexCreate&lt;/a&gt;.</source>
          <target state="translated">インデックスは主キーであるか、以前に&lt;a href=&quot;../index_create/index&quot;&gt;indexCreateで&lt;/a&gt;作成されている必要があります。</target>
        </trans-unit>
        <trans-unit id="2495353fe68162175193be062922febe81792444" translate="yes" xml:space="preserve">
          <source>The index must have been previously created with &lt;a href=&quot;../index_create/index&quot;&gt;indexCreate&lt;/a&gt;.</source>
          <target state="translated">インデックスは、&lt;a href=&quot;../index_create/index&quot;&gt;indexCreateで&lt;/a&gt;事前に作成されている必要があります。</target>
        </trans-unit>
        <trans-unit id="ca41c024d3d03398ad932fa456e6f47678274ff4" translate="yes" xml:space="preserve">
          <source>The init.d script supports starting multiple instances on the same server via multiple &lt;code&gt;.conf&lt;/code&gt; files in &lt;code&gt;/etc/rethinkdb/instances.d&lt;/code&gt;. This may be desirable for isolating databases for separate applications running on the same server, or for testing purposes. (There is no performance gain from running multiple nodes of the same cluster on the same physical machine.)</source>
          <target state="translated">複数の経由で同じサーバー上に複数のインスタンスを起動するのinit.dスクリプトのサポート &lt;code&gt;.conf&lt;/code&gt; 内のファイル &lt;code&gt;/etc/rethinkdb/instances.d&lt;/code&gt; 。これは、同じサーバー上で実行されている個別のアプリケーションのデータベースを分離する場合、またはテストの目的で望ましい場合があります。（同じ物理マシンで同じクラスターの複数のノードを実行してもパフォーマンスは向上しません。）</target>
        </trans-unit>
        <trans-unit id="8ebf19d589643ec5b145f9f4331ef50a76004e07" translate="yes" xml:space="preserve">
          <source>The inner &lt;code&gt;map&lt;/code&gt; function is just being used to iterate through the items in each order. At this point, our query will return a list of objects, each object with three fields: &lt;code&gt;item_id&lt;/code&gt;, &lt;code&gt;quantity&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">内部 &lt;code&gt;map&lt;/code&gt; 関数は、各注文のアイテムを反復処理するために使用されています。この時点で、クエリはオブジェクトのリストを返します。各オブジェクトには、 &lt;code&gt;item_id&lt;/code&gt; 、 &lt;code&gt;quantity&lt;/code&gt; 、 &lt;code&gt;count&lt;/code&gt; の 3つのフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="3d932f3d62c38556feefc878504c15decd242c35" translate="yes" xml:space="preserve">
          <source>The inner &lt;code&gt;sum&lt;/code&gt; adds the scores by match within each document; the outer &lt;code&gt;sum&lt;/code&gt; adds those results together for a total across all the documents.</source>
          <target state="translated">内部 &lt;code&gt;sum&lt;/code&gt; は、各ドキュメント内の一致ごとにスコアを追加します。外側の &lt;code&gt;sum&lt;/code&gt; はそれらの結果を合計して、すべてのドキュメントの合計になります。</target>
        </trans-unit>
        <trans-unit id="a30db86d4cd4223f11f528b78e8eaa37d415543e" translate="yes" xml:space="preserve">
          <source>The intracluster port will be accessible from within the local network where you run RethinkDB nodes, but will not be accessible from the outside world.</source>
          <target state="translated">クラスター内ポートは、RethinkDBノードを実行しているローカルネットワーク内からはアクセスできますが、外部からはアクセスできません。</target>
        </trans-unit>
        <trans-unit id="c6e6220488f98ca8b4a9e1814cfe64c223d59c09" translate="yes" xml:space="preserve">
          <source>The jobs table is one of the &lt;a href=&quot;../system-tables/index&quot;&gt;system tables&lt;/a&gt; added in version 1.16 of RethinkDB. It provides information about tasks running within the RethinkDB cluster, including queries, disk compaction, and index construction, and allows you to kill query jobs by deleting them from the table.</source>
          <target state="translated">ジョブテーブルは、RethinkDBのバージョン1.16で追加された&lt;a href=&quot;../system-tables/index&quot;&gt;システムテーブルの&lt;/a&gt; 1つです。クエリ、ディスクの圧縮、インデックスの構築など、RethinkDBクラスター内で実行されているタスクに関する情報を提供し、クエリジョブをテーブルから削除することでそれらを強制終了できます。</target>
        </trans-unit>
        <trans-unit id="41b9718b6370d6926103658ff4576ee577670375" translate="yes" xml:space="preserve">
          <source>The keys in a multi index can be single values, compound values or even arbitrary expressions. (See the section below for more detail on indexes using functions.)</source>
          <target state="translated">マルチインデックスのキーは、単一の値、複合値、または任意の式にすることができます。(関数を使用したインデックスの詳細については、以下のセクションを参照してください)。</target>
        </trans-unit>
        <trans-unit id="9b7f2cfd798e26bbcde1c1d824995a743bdbcfa4" translate="yes" xml:space="preserve">
          <source>The keys in a multi index can be single values, compound values or even arbitrary expressions. (See the section below for more detail on indexes using functions.) What matters is that the &amp;ldquo;multi-value&amp;rdquo; that gets indexed is an &lt;em&gt;array&lt;/em&gt;: the document will be referenced in the index multiple times, one for each element of this array.</source>
          <target state="translated">マルチインデックスのキーは、単一の値、複合値、または任意の式にすることができます。（関数を使用したインデックスの詳細については、以下のセクションを参照してください。）重要なのは、インデックスが作成される「複数値」が&lt;em&gt;配列であるということ&lt;/em&gt;です。ドキュメントは、この配列の要素ごとに1つずつ、インデックスで複数回参照されます。</target>
        </trans-unit>
        <trans-unit id="82f9d489b67d40b5391cfe80f91d791cb7c19663" translate="yes" xml:space="preserve">
          <source>The language is easy to learn, read, and modify.</source>
          <target state="translated">言語の習得、読解、修正が容易である。</target>
        </trans-unit>
        <trans-unit id="9d43b4d8b1ab557e528e7e44276c5ff362b9edeb" translate="yes" xml:space="preserve">
          <source>The last argument to &lt;code&gt;do&lt;/code&gt; (or, in some forms, the only argument) is an expression or an anonymous function which receives values from either the previous arguments or from prefixed commands chained before &lt;code&gt;do&lt;/code&gt;. The &lt;code&gt;do&lt;/code&gt; command is essentially a single-element &lt;a href=&quot;../map/index&quot;&gt;map&lt;/a&gt;, letting you map a function over just one document. This allows you to bind a query result to a local variable within the scope of &lt;code&gt;do&lt;/code&gt;, letting you compute the result just once and reuse it in a complex expression or in a series of ReQL commands.</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; の最後の引数（または、一部の形式では、唯一の引数）は、前の引数または &lt;code&gt;do&lt;/code&gt; の前にチェーンされた接頭辞付きコマンドから値を受け取る式または無名関数です。 &lt;code&gt;do&lt;/code&gt; コマンドは、本質的に単一要素のある&lt;a href=&quot;../map/index&quot;&gt;マップ&lt;/a&gt;あなただけの1文書を超える機能をマッピングさせます。これにより、クエリ結果を &lt;code&gt;do&lt;/code&gt; のスコープ内のローカル変数にバインドして、結果を1回だけ計算し、それを複雑な式または一連のReQLコマンドで再利用できます。</target>
        </trans-unit>
        <trans-unit id="e1b83f2f20d6e27211b3484dd80a4271132f9fba" translate="yes" xml:space="preserve">
          <source>The length of the response, as a 4-byte little-endian integer</source>
          <target state="translated">レスポンスの長さ (4 バイトのリトルエンディアン整数)</target>
        </trans-unit>
        <trans-unit id="9d6f0d5641c4868545fe88e3f18cccf39a6677f5" translate="yes" xml:space="preserve">
          <source>The linearizability guarantee is for &lt;em&gt;atomic operations,&lt;/em&gt; not for &lt;em&gt;queries.&lt;/em&gt; A single RethinkDB query will not necessarily execute as a single atomic operation. It&amp;rsquo;s possible that the query:</source>
          <target state="translated">線形化可能性の保証は、&lt;em&gt;クエリ&lt;/em&gt;&lt;em&gt;で&lt;/em&gt;はなく&lt;em&gt;アトミック操作&lt;/em&gt;用&lt;em&gt;です。&lt;/em&gt;単一のRethinkDBクエリは、必ずしも単一のアトミック操作として実行されるとは限りません。次のクエリが可能です。</target>
        </trans-unit>
        <trans-unit id="be6c7b03ecee10bbdd3ecd94feb9326cf807aea0" translate="yes" xml:space="preserve">
          <source>The listener is the other side of the interaction: it connects to RabbitMQ, signs up to be notified of messages it&amp;rsquo;s interested in, and does something when it receives a message.</source>
          <target state="translated">リスナーは対話の反対側です。RabbitMQに接続し、関心のあるメッセージの通知を受けるようにサインアップし、メッセージを受信すると何かを行います。</target>
        </trans-unit>
        <trans-unit id="915fce30152336842eeda671dad0b27dec31599e" translate="yes" xml:space="preserve">
          <source>The log file&amp;rsquo;s location is dependent on your system configuration and how you started RethinkDB.</source>
          <target state="translated">ログファイルの場所は、システム構成とRethinkDBの起動方法によって異なります。</target>
        </trans-unit>
        <trans-unit id="2e78ae1df38b4c0eccc0c5010b454cb2411fca09" translate="yes" xml:space="preserve">
          <source>The log may give you information as to what caused the crash.</source>
          <target state="translated">ログを見れば、クラッシュの原因についての情報が得られるかもしれません。</target>
        </trans-unit>
        <trans-unit id="4917584586a9ba5841c6d9996a82f13e2383ec57" translate="yes" xml:space="preserve">
          <source>The message &lt;code&gt;received invalid clustering header&lt;/code&gt; means there is a port mismatch, and something is connecting to the wrong port. For example, it&amp;rsquo;s common to get this message if you accidentally point the browser or connect the client drivers to the intracluster traffic port.</source>
          <target state="translated">&lt;code&gt;received invalid clustering header&lt;/code&gt; メッセージは、ポートの不一致があり、何かが間違ったポートに接続していることを意味します。たとえば、誤ってブラウザーをポイントしたり、クライアントドライバーをクラスター内トラフィックポートに接続したりすると、このメッセージが表示されるのが一般的です。</target>
        </trans-unit>
        <trans-unit id="e9b96017ac9340db22343a25f56da2ed0e933cf4" translate="yes" xml:space="preserve">
          <source>The metadata in the system tables applies to the RethinkDB cluster as a whole. Each server in a cluster maintains its own copy of the system tables. Whenever a system table on a server changes, the changes are synced across all the servers.</source>
          <target state="translated">システムテーブルのメタデータは、RethinkDBクラスタ全体に適用されます。クラスタ内の各サーバは、システムテーブルの独自のコピーを保持しています。サーバー上のシステムテーブルが変更されるたびに、その変更はすべてのサーバーで同期されます。</target>
        </trans-unit>
        <trans-unit id="34aae6139df043314fa6079b6b69c72abcd122fb" translate="yes" xml:space="preserve">
          <source>The most important field of this object is &lt;code&gt;errors&lt;/code&gt;. Generally speaking, if no exceptions are thrown and &lt;code&gt;errors&lt;/code&gt; is 0 then the write did what it was supposed to. (RethinkDB throws an exception when it isn&amp;rsquo;t even able to access the table; it sets the &lt;code&gt;errors&lt;/code&gt; field if it can access the table but an error occurs during the write. This convention exists so that batched writes don&amp;rsquo;t abort halfway through when they encounter an error.)</source>
          <target state="translated">このオブジェクトの最も重要なフィールドは &lt;code&gt;errors&lt;/code&gt; です。一般的に言えば、例外がスローされず、 &lt;code&gt;errors&lt;/code&gt; が0の場合、書き込みは想定どおりに行われていました。（RethinkDBは、テーブルにアクセスできない場合でも例外をスローします。テーブルにアクセスできる場合は &lt;code&gt;errors&lt;/code&gt; フィールドを設定しますが、書き込み中にエラーが発生します。この規則は、バッチ書き込みが途中で中止されないようにするために存在しますエラーが発生します。）</target>
        </trans-unit>
        <trans-unit id="52054d4689c88c2dd563c71fc3d4622fe9e37e26" translate="yes" xml:space="preserve">
          <source>The most important things for you to provide for us are:</source>
          <target state="translated">あなたが提供してくれるものの中で一番大切なものは</target>
        </trans-unit>
        <trans-unit id="7d9fb82f35843a166df27094da516f937f5cd76f" translate="yes" xml:space="preserve">
          <source>The next section will explain how to build complex queries. For now, we will just send the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt; (&lt;code&gt;r.expr(&quot;foo&quot;)&lt;/code&gt;) to the server.</source>
          <target state="translated">次のセクションでは、複雑なクエリの作成方法について説明します。ここでは、文字列 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; （ &lt;code&gt;r.expr(&quot;foo&quot;)&lt;/code&gt; ）をサーバーに送信します。</target>
        </trans-unit>
        <trans-unit id="850ad84f52970e1d319ea7e6979fbb8fb61b332c" translate="yes" xml:space="preserve">
          <source>The next section will go into more detail, but in our example the &lt;code&gt;QueryType&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; (or &lt;code&gt;START&lt;/code&gt;, as we&amp;rsquo;ll see later), the &lt;code&gt;query&lt;/code&gt; is simply the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt; and there are no options.</source>
          <target state="translated">次のセクションで詳しく説明しますが、この例では、 &lt;code&gt;QueryType&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; （または後で説明するように &lt;code&gt;START&lt;/code&gt; ）であり、 &lt;code&gt;query&lt;/code&gt; は単に文字列 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; であり、オプションはありません。</target>
        </trans-unit>
        <trans-unit id="1ae3c52cd36f26bb22cf875ccd87448c4be30f8e" translate="yes" xml:space="preserve">
          <source>The number of documents on shard 1 is computed. The query returns the value &lt;code&gt;4&lt;/code&gt; for the shard.</source>
          <target state="translated">シャード1のドキュメント数が計算されます。クエリは、シャードの値 &lt;code&gt;4&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b27530ba359fc44b511a6ec9376acbc82fc3b7d1" translate="yes" xml:space="preserve">
          <source>The number of documents on shard 2 is computed. The query returns the value &lt;code&gt;6&lt;/code&gt; for the shard.</source>
          <target state="translated">シャード2のドキュメント数が計算されます。クエリはシャードの値 &lt;code&gt;6&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="17ded22e16e26949d0a41162bebffb07408ae4b0" translate="yes" xml:space="preserve">
          <source>The opposite of pluck; takes an object or a sequence of objects, and returns them with the specified paths removed.</source>
          <target state="translated">pluck の反対語で、オブジェクトまたは一連のオブジェクトを取り、指定したパスを削除して返します。</target>
        </trans-unit>
        <trans-unit id="efdd31a108ade64161256b161e030637f32003ab" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;interleave&lt;/code&gt; argument controls how the sequences will be merged:</source>
          <target state="translated">オプションの &lt;code&gt;interleave&lt;/code&gt; 引数は、シーケンスのマージ方法を制御します。</target>
        </trans-unit>
        <trans-unit id="3e541b9a29bd1d84a6fc76c8fea0e5e43910a115" translate="yes" xml:space="preserve">
          <source>The optional arguments are:</source>
          <target state="translated">オプションの引数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7639f7478ac816294a9ebad71d1188e73a7903a1" translate="yes" xml:space="preserve">
          <source>The options can be:</source>
          <target state="translated">オプションは可能です。</target>
        </trans-unit>
        <trans-unit id="c9c6dbe2e2ebb18556376a0edc038dbb53b9d23d" translate="yes" xml:space="preserve">
          <source>The order in which callbacks are called in the &lt;code&gt;EventMachine.run&lt;/code&gt; block is not guaranteed; in the sample output above, &lt;code&gt;[:array, [1, 2, 3]]&lt;/code&gt; might have printed first.</source>
          <target state="translated">&lt;code&gt;EventMachine.run&lt;/code&gt; ブロックでコールバックが呼び出される順序は保証されていません。上記の出力例では、 &lt;code&gt;[:array, [1, 2, 3]]&lt;/code&gt; が最初に出力された可能性があります。</target>
        </trans-unit>
        <trans-unit id="a80bb124c4d721554e30b34eefc7bc2457ea017a" translate="yes" xml:space="preserve">
          <source>The order in which you chain ReQL commands can affect performance. For an example, imagine combining the previous two queries to return an ordered list of names of admin users. The &lt;code&gt;filter&lt;/code&gt; operation can be distributed across shards, but the &lt;code&gt;orderBy&lt;/code&gt; operation cannot. So this query:</source>
          <target state="translated">ReQLコマンドをチェーンする順序は、パフォーマンスに影響を与える可能性があります。たとえば、前の2つのクエリを組み合わせて、管理者ユーザーの名前の順序付きリストを返すことを想像してください。 &lt;code&gt;filter&lt;/code&gt; 操作は破片に分散することができますが、 &lt;code&gt;orderBy&lt;/code&gt; 操作はできません。したがって、このクエリ：</target>
        </trans-unit>
        <trans-unit id="e126ffbf5f64034b05b6cc9873b4d6e9ac47fdda" translate="yes" xml:space="preserve">
          <source>The output format of a point changefeed is identical to a table changefeed.</source>
          <target state="translated">ポイント変更フィードの出力形式は、テーブル変更フィードと同じです。</target>
        </trans-unit>
        <trans-unit id="52544879000b4070f7c1ec53be285dedc81e74e4" translate="yes" xml:space="preserve">
          <source>The output of &lt;code&gt;rethinkdb&lt;/code&gt; on startup</source>
          <target state="translated">起動時の &lt;code&gt;rethinkdb&lt;/code&gt; の出力</target>
        </trans-unit>
        <trans-unit id="db1df362b12f7161c6f9dfe2a13f7a5f148cea5f" translate="yes" xml:space="preserve">
          <source>The output of the &lt;code&gt;changes&lt;/code&gt; query adheres to the following protocol:</source>
          <target state="translated">&lt;code&gt;changes&lt;/code&gt; クエリの出力は、次のプロトコルに準拠しています。</target>
        </trans-unit>
        <trans-unit id="9adcae7e13d1ddedbed6b9d9a4afd7aa5562ddd7" translate="yes" xml:space="preserve">
          <source>The output will be in this format:</source>
          <target state="translated">このような形式で出力されます。</target>
        </trans-unit>
        <trans-unit id="4edfaeb420dd2cad843364eade6bfcc6103ac8f2" translate="yes" xml:space="preserve">
          <source>The parameters are represented as values &lt;code&gt;&amp;lt;p1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p2&amp;gt;&lt;/code&gt;, etc.; the values are arbitrary, but must be unique per query to avoid collisions. Within the function body the values are referred to with the query term &lt;code&gt;VAR&lt;/code&gt;, defined as &lt;code&gt;10&lt;/code&gt; in &lt;code&gt;ql2.proto&lt;/code&gt;. So the value of parameter &lt;code&gt;1&lt;/code&gt; is retrieved with &lt;code&gt;[10, [1]]&lt;/code&gt;.</source>
          <target state="translated">パラメータは、値 &lt;code&gt;&amp;lt;p1&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;p2&amp;gt;&lt;/code&gt; などとして表されます。値は任意ですが、衝突を避けるためにクエリごとに一意である必要があります。関数本体内の値は、クエリ用語と呼ばれる &lt;code&gt;VAR&lt;/code&gt; として定義され、 &lt;code&gt;10&lt;/code&gt; で &lt;code&gt;ql2.proto&lt;/code&gt; 。したがって、パラメーター &lt;code&gt;1&lt;/code&gt; の値は &lt;code&gt;[10, [1]]&lt;/code&gt; 取得されます。</target>
        </trans-unit>
        <trans-unit id="709d9935fbae98edda7024d5c1ad7e0e1365088d" translate="yes" xml:space="preserve">
          <source>The part of a secondary index key that&amp;rsquo;s used for fast lookups depends on the length of the primary key (which must be 127 bytes or less). The length of this part is 238&amp;minus;&lt;em&gt;PK&lt;/em&gt;, where &lt;em&gt;PK&lt;/em&gt; is the primary key length; if the primary key length is a 36-character GUID, for instance, this means that 202 characters in the secondary index will be significant. If a table has multiple entries where the first 238&amp;minus;&lt;em&gt;PK&lt;/em&gt; characters are identical, lookup performance will be sharply degraded, as RethinkDB will have to perform a linear search to find the correct entries.</source>
          <target state="translated">高速検索に使用されるセカンダリインデックスキーの部分は、プライマリキーの長さ（127バイト以下である必要があります）によって異なります。この部分の長さは238&amp;minus; &lt;em&gt;PKです&lt;/em&gt;。ここで、&lt;em&gt;PK&lt;/em&gt;は主キーの長さです。たとえば、主キーの長さが36文字のGUIDの場合、これは、セカンダリインデックスの202文字が重要であることを意味します。テーブルに複数のエントリがあり、最初の238- &lt;em&gt;PK&lt;/em&gt;文字が同一である場合、正しいエントリを見つけるためにRethinkDBが線形検索を実行する必要があるため、ルックアップパフォーマンスが大幅に低下します。</target>
        </trans-unit>
        <trans-unit id="6f542c8db24de1f389e353c09cdcf7abaa8b6fdb" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;{age: 30}&lt;/code&gt; selects documents in the &lt;code&gt;users&lt;/code&gt; table with an &lt;code&gt;age&lt;/code&gt; field whose value is &lt;code&gt;30&lt;/code&gt;. Documents with an &lt;code&gt;age&lt;/code&gt; field set to any other value &lt;em&gt;or&lt;/em&gt; with no &lt;code&gt;age&lt;/code&gt; field present are skipped.</source>
          <target state="translated">述語 &lt;code&gt;{age: 30}&lt;/code&gt; は、値が &lt;code&gt;30&lt;/code&gt; である &lt;code&gt;age&lt;/code&gt; フィールドを持つ &lt;code&gt;users&lt;/code&gt; テーブル内のドキュメントを選択します。 &lt;code&gt;age&lt;/code&gt; フィールドが他の値に設定されているドキュメント、&lt;em&gt;または&lt;/em&gt; &lt;code&gt;age&lt;/code&gt; フィールドが存在しないドキュメントはスキップされます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a85fd7e773e98525a057dee410b910ff3a9a2c35" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;{age:30}&lt;/code&gt; selects documents in the &lt;code&gt;users&lt;/code&gt; table with an &lt;code&gt;age&lt;/code&gt; field whose value is &lt;code&gt;30&lt;/code&gt;. Documents with an &lt;code&gt;age&lt;/code&gt; field set to any other value &lt;em&gt;or&lt;/em&gt; with no &lt;code&gt;age&lt;/code&gt; field present are skipped.</source>
          <target state="translated">述語 &lt;code&gt;{age:30}&lt;/code&gt; は、値が &lt;code&gt;30&lt;/code&gt; である &lt;code&gt;age&lt;/code&gt; フィールドを持つ &lt;code&gt;users&lt;/code&gt; テーブル内のドキュメントを選択します。ドキュメント &lt;code&gt;age&lt;/code&gt; フィールドの任意の値に設定&lt;em&gt;または&lt;/em&gt;なしで &lt;code&gt;age&lt;/code&gt; フィールドの存在はスキップされます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ab592fecf2d641277abe2dc185bc11bf61ae10da" translate="yes" xml:space="preserve">
          <source>The primary index of a table can be used in any ReQL command that uses a secondary index.</source>
          <target state="translated">テーブルのプライマリ インデックスは、セカンダリ インデックスを使用する任意の ReQL コマンドで使用できます。</target>
        </trans-unit>
        <trans-unit id="169a155070f84ee6fa928b40cd22b933ed483d0c" translate="yes" xml:space="preserve">
          <source>The primary key of each document is used by RethinkDB to place the document into an appropriate shard, and index it within that shard using a B-Tree data structure. Querying documents by primary key is extremely efficient, because the query can immediately be routed to the right shard and the document can be looked up in the B-Tree.</source>
          <target state="translated">各ドキュメントの主キーは、RethinkDBがドキュメントを適切なシャードに配置し、B-Treeデータ構造を使用してそのシャード内にインデックスを作成するために使用されます。主キーでドキュメントをクエリすると、クエリはすぐに適切なシャードにルーティングされ、B-Treeでドキュメントを調べることができるため、非常に効率的です。</target>
        </trans-unit>
        <trans-unit id="8b50e856dfd19b785cfb1ae6817c08f87c06cd84" translate="yes" xml:space="preserve">
          <source>The primary way to administer a RethinkDB AMI is through the web UI. Advanced tasks can be performed with ReQL administration commands, using the Data Explorer interactively or scripting through any RethinkDB driver. Read &lt;a href=&quot;../administration-tools/index&quot;&gt;Administration tools&lt;/a&gt; for more details about scripting administration tasks.</source>
          <target state="translated">RethinkDB AMIを管理する主な方法は、Web UIを使用することです。高度なタスクは、データエクスプローラーをインタラクティブに使用するか、任意のRethinkDBドライバーを介してスクリプトを使用して、ReQL管理コマンドで実行できます。スクリプト管理タスクの詳細については、&lt;a href=&quot;../administration-tools/index&quot;&gt;管理ツール&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="56486ac3e6a0cff408514c32848848251b792543" translate="yes" xml:space="preserve">
          <source>The programmer can also mark a read query to be ok with out-of-date data. In this mode, the query isn&amp;rsquo;t necessarily routed to the shard&amp;rsquo;s primary, but is likely to be routed to its closest replica. Out-of-date queries are likely to have lower latency and have stronger availability guarantees, but don&amp;rsquo;t necessarily return the latest version of the data to the client.</source>
          <target state="translated">プログラマは、読み取りクエリに古いデータで問題がないことを示すマークを付けることもできます。このモードでは、クエリは必ずしもシャードのプライマリにルーティングされるわけではありませんが、最も近いレプリカにルーティングされる可能性があります。古くなったクエリは、レイテンシが低くなり、可用性が保証される可能性が高くなりますが、必ずしも最新バージョンのデータをクライアントに返すとは限りません。</target>
        </trans-unit>
        <trans-unit id="43f06ecd9db4c427f5c01e559845b1558afef7ab" translate="yes" xml:space="preserve">
          <source>The proxy node can do some query processing itself, reducing CPU load on database servers.</source>
          <target state="translated">プロキシノードは、いくつかのクエリ処理を自分で行うことができ、データベースサーバのCPU負荷を軽減することができます。</target>
        </trans-unit>
        <trans-unit id="03aeb45cfefab1e6845737436e42c4ae921ad3f3" translate="yes" xml:space="preserve">
          <source>The proxy will send queries directly to the correct machines, reducing intracluster traffic.</source>
          <target state="translated">プロキシは正しいマシンに直接クエリを送信し、クラスタ内のトラフィックを削減します。</target>
        </trans-unit>
        <trans-unit id="36fbbe7526681119c7192d6053c30c4b1b91f8d9" translate="yes" xml:space="preserve">
          <source>The queries are efficiently transported to the server (via protocol buffers), and evaluated in the cluster.</source>
          <target state="translated">クエリは(プロトコルバッファを介して)サーバに効率的に転送され、クラスタ内で評価されます。</target>
        </trans-unit>
        <trans-unit id="03c9e234b8601cd8cefabab2a66ae0491cf2637c" translate="yes" xml:space="preserve">
          <source>The queries linking the data between the authors and their posts tend to be more complicated.</source>
          <target state="translated">著者と投稿者の間のデータをリンクするクエリは、より複雑になる傾向があります。</target>
        </trans-unit>
        <trans-unit id="2f2e5494893b9508bc4d620ee6c352443bb70976" translate="yes" xml:space="preserve">
          <source>The query is sent to a server for execution.</source>
          <target state="translated">クエリはサーバに送信されて実行されます。</target>
        </trans-unit>
        <trans-unit id="d418228ef09faaa1d551875cd4899ad068afb495" translate="yes" xml:space="preserve">
          <source>The query types are defined in &lt;code&gt;ql2.proto&lt;/code&gt;. When a query is first sent to the server, it will be sent with a &lt;code&gt;QueryType&lt;/code&gt; of &lt;code&gt;START&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt;). The options (sometimes referred to as &amp;ldquo;global optargs&amp;rdquo;) are options passed to the &lt;code&gt;run&lt;/code&gt; command itself; see the &lt;a href=&quot;https://rethinkdb.com/api/python/run&quot;&gt;run documentation&lt;/a&gt; for a complete list. (Commands sent to the server are snake_case, not camelCase.)</source>
          <target state="translated">クエリタイプは &lt;code&gt;ql2.proto&lt;/code&gt; で定義されています。クエリが最初にサーバーに送信されるとき、クエリの &lt;code&gt;QueryType&lt;/code&gt; は &lt;code&gt;START&lt;/code&gt; （ &lt;code&gt;1&lt;/code&gt; ）で送信されます。オプション（「グローバルoptargs」と呼ばれることもあります）は、 &lt;code&gt;run&lt;/code&gt; コマンド自体に渡されるオプションです。完全なリストについては、&lt;a href=&quot;https://rethinkdb.com/api/python/run&quot;&gt;実行ドキュメント&lt;/a&gt;を参照してください。（サーバーに送信されるコマンドは、camelCaseではなくsnake_caseです。）</target>
        </trans-unit>
        <trans-unit id="c3ed5416cb9cfab926b34e7082c8a35489e21a3b" translate="yes" xml:space="preserve">
          <source>The query would look like this:</source>
          <target state="translated">クエリは次のようになります。</target>
        </trans-unit>
        <trans-unit id="49093f36439602ded586cf0ea033178761fb4a63" translate="yes" xml:space="preserve">
          <source>The reduction function can be called on the results of two previous reductions because the &lt;code&gt;reduce&lt;/code&gt; command is distributed and parallelized across shards and CPU cores. A common mistaken when using the &lt;code&gt;reduce&lt;/code&gt; command is to suppose that the reduction is executed from left to right. Read the &lt;a href=&quot;../../../docs/map-reduce/index&quot;&gt;map-reduce in RethinkDB&lt;/a&gt; article to see an example.</source>
          <target state="translated">&lt;code&gt;reduce&lt;/code&gt; コマンドはシャードとCPUコア全体に分散および並列化されるため、前の2つの削減の結果に対して削減関数を呼び出すことができます。 &lt;code&gt;reduce&lt;/code&gt; コマンドを使用するときによくある間違いは、左から右に削減が実行されると想定することです。読み取り&lt;a href=&quot;../../../docs/map-reduce/index&quot;&gt;地図削減RethinkDBの中で&lt;/a&gt;例を見て記事を。</target>
        </trans-unit>
        <trans-unit id="2eaef544cfa01e61b0600b7381d8e28d53266a21" translate="yes" xml:space="preserve">
          <source>The reduction function can be called on:</source>
          <target state="translated">還元関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="118a3751802c0d2d297d092376f59ad08a2671d1" translate="yes" xml:space="preserve">
          <source>The repubsub library has three classes:</source>
          <target state="translated">repubsubライブラリには3つのクラスがあります。</target>
        </trans-unit>
        <trans-unit id="4c34de0c47665e2093b16d6e8c6cc2dafe60ac91" translate="yes" xml:space="preserve">
          <source>The result is an array containing one object for each table index:</source>
          <target state="translated">結果は、各テーブルインデックスに対して1つのオブジェクトを含む配列となります。</target>
        </trans-unit>
        <trans-unit id="05697956ca1c2b261267f1b15b9b31d091e913b4" translate="yes" xml:space="preserve">
          <source>The result is an array of the three previously inserted documents, along with the generated &lt;code&gt;id&lt;/code&gt; values.</source>
          <target state="translated">結果は、以前に挿入された3つのドキュメントの配列と、生成された &lt;code&gt;id&lt;/code&gt; 値です。</target>
        </trans-unit>
        <trans-unit id="96b9393100a8f012abd44d66848a45d8492c36be" translate="yes" xml:space="preserve">
          <source>The result is an array where for each index, there will be an object like this one:</source>
          <target state="translated">結果は配列となり、各インデックスにはこのようなオブジェクトが存在します。</target>
        </trans-unit>
        <trans-unit id="348e1c53bcf414975d4e88512994c35382165db3" translate="yes" xml:space="preserve">
          <source>The result is returned to the client.</source>
          <target state="translated">結果はクライアントに返されます。</target>
        </trans-unit>
        <trans-unit id="a4f25bd6541b97b8d992950d6d5f5fc101f8780b" translate="yes" xml:space="preserve">
          <source>The result look like:</source>
          <target state="translated">結果は次のようになります。</target>
        </trans-unit>
        <trans-unit id="f460bc9b91b03b6b76aa3c9f4052058e662787ad" translate="yes" xml:space="preserve">
          <source>The result of the &lt;code&gt;filter&lt;/code&gt; is sent from the shards to the query server and combined.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; の結果は、シャードからクエリサーバーに送信され、結合されます。</target>
        </trans-unit>
        <trans-unit id="26ef6ad9412c9be209139ccf22acdf6ab7306819" translate="yes" xml:space="preserve">
          <source>The result of this query is a stream of documents that includes every post written by every author in our database:</source>
          <target state="translated">このクエリの結果は、データベース内のすべての著者によって書かれたすべての投稿を含むドキュメントのストリームです。</target>
        </trans-unit>
        <trans-unit id="4cd3b3018feec184d2a352c9581848323673f755" translate="yes" xml:space="preserve">
          <source>The result set of &lt;code&gt;eqJoin&lt;/code&gt; is a stream or array of objects. Each object in the returned set will be an object of the form &lt;code&gt;{ left: &amp;lt;left-document&amp;gt;, right: &amp;lt;right-document&amp;gt; }&lt;/code&gt;, where the values of &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; will be the joined documents. Use the &lt;code&gt;&lt;a href=&quot;../zip/index&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; command to merge the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; fields together.</source>
          <target state="translated">&lt;code&gt;eqJoin&lt;/code&gt; の結果セットは、オブジェクトのストリームまたは配列です。返されるセット内の各オブジェクトは、 &lt;code&gt;{ left: &amp;lt;left-document&amp;gt;, right: &amp;lt;right-document&amp;gt; }&lt;/code&gt; の形式のオブジェクトになります。ここで、 &lt;code&gt;left&lt;/code&gt; と &lt;code&gt;right&lt;/code&gt; の値は結合されたドキュメントになります。 &lt;code&gt;&lt;a href=&quot;../zip/index&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; コマンドを使用して、 &lt;code&gt;left&lt;/code&gt; フィールドと &lt;code&gt;right&lt;/code&gt; フィールドをマージします。</target>
        </trans-unit>
        <trans-unit id="4166859a2337b060599ebba8ff3782b1a2dac997" translate="yes" xml:space="preserve">
          <source>The result set of &lt;code&gt;eqJoin&lt;/code&gt; is a stream or array of objects. Each object in the returned set will be an object of the form &lt;code&gt;{left:&amp;lt;left-document&amp;gt;,right:&amp;lt;right-document&amp;gt;}&lt;/code&gt;, where the values of &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; will be the joined documents. Use the &lt;code&gt;&lt;a href=&quot;../zip/index&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; command to merge the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; fields together.</source>
          <target state="translated">&lt;code&gt;eqJoin&lt;/code&gt; の結果セットは、オブジェクトのストリームまたは配列です。返されたセット内の各オブジェクトは、形式 &lt;code&gt;{left:&amp;lt;left-document&amp;gt;,right:&amp;lt;right-document&amp;gt;}&lt;/code&gt; オブジェクトになり、 &lt;code&gt;left&lt;/code&gt; と &lt;code&gt;right&lt;/code&gt; の値は結合されたドキュメントになります。使用し &lt;code&gt;&lt;a href=&quot;../zip/index&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; マージするコマンドを &lt;code&gt;left&lt;/code&gt; と &lt;code&gt;right&lt;/code&gt; 一緒にフィールドを。</target>
        </trans-unit>
        <trans-unit id="bcacb4ffc1428a1e7537a1b530d77ec1be49f08c" translate="yes" xml:space="preserve">
          <source>The result will be</source>
          <target state="translated">結果は次のようになります。</target>
        </trans-unit>
        <trans-unit id="4e00afb986323ba904efea3a982c45371e5a241e" translate="yes" xml:space="preserve">
          <source>The result will be:</source>
          <target state="translated">結果が出てきます。</target>
        </trans-unit>
        <trans-unit id="7ee33cf492c99cfb381b58051e0acd3d936534d2" translate="yes" xml:space="preserve">
          <source>The result will have two fields &lt;code&gt;old_val&lt;/code&gt; and &lt;code&gt;new_val&lt;/code&gt;.</source>
          <target state="translated">結果には、 &lt;code&gt;old_val&lt;/code&gt; と &lt;code&gt;new_val&lt;/code&gt; の 2つのフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="68fb37359dd75ef2553cd05e4a92ef63fdf9fab7" translate="yes" xml:space="preserve">
          <source>The result will look like:</source>
          <target state="translated">結果は次のようになります。</target>
        </trans-unit>
        <trans-unit id="2762176fdb80307d4542fb97295cbd05e50ef387" translate="yes" xml:space="preserve">
          <source>The result will now include a &lt;code&gt;changes&lt;/code&gt; field:</source>
          <target state="translated">結果には &lt;code&gt;changes&lt;/code&gt; フィールドが含まれます。</target>
        </trans-unit>
        <trans-unit id="580d6c3b8e7791206b60fdc3fbc9d93f7725d9aa" translate="yes" xml:space="preserve">
          <source>The results from &lt;code&gt;eqJoin&lt;/code&gt; are, by default, not ordered. The optional &lt;code&gt;ordered: true&lt;/code&gt; parameter will cause &lt;code&gt;eqJoin&lt;/code&gt; to order the output based on the left side input stream. (If there are multiple matches on the right side for a document on the left side, their order is not guaranteed even if &lt;code&gt;ordered&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.) Requiring ordered results can significantly slow down &lt;code&gt;eqJoin&lt;/code&gt;, and in many circumstances this ordering will not be required. (See the first example, in which ordered results are obtained by using &lt;code&gt;orderBy&lt;/code&gt; after &lt;code&gt;eqJoin&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;eqJoin&lt;/code&gt; の結果は、デフォルトでは順序付けされていません。オプションの &lt;code&gt;ordered: true&lt;/code&gt; パラメーターは、 &lt;code&gt;eqJoin&lt;/code&gt; に左側の入力ストリームに基づいて出力を並べ替えさせます。 （左側のドキュメントに対して右側に複数の一致がある場合、 &lt;code&gt;ordered&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; であっても、それらの順序は保証されません。）順序付けされた結果を要求すると、 &lt;code&gt;eqJoin&lt;/code&gt; が大幅に遅くなる可能性があり、多くの場合、この順序付けは不要です。 （順序付けされた結果が &lt;code&gt;orderBy&lt;/code&gt; 後に &lt;code&gt;eqJoin&lt;/code&gt; を使用して取得される最初の例を参照してください。）</target>
        </trans-unit>
        <trans-unit id="d9451368182bf51f88eb6d06ba8ad24bd4eea60c" translate="yes" xml:space="preserve">
          <source>The results of which might look something like:</source>
          <target state="translated">その結果は次のようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="0fb83e527b8a750c6dbf5105d1252ab390a7c46c" translate="yes" xml:space="preserve">
          <source>The results will be:</source>
          <target state="translated">結果が出ます。</target>
        </trans-unit>
        <trans-unit id="f8c631d950204e251a618f771c764d482aaa3e66" translate="yes" xml:space="preserve">
          <source>The return value is an object consisting of a single field, &lt;code&gt;ready&lt;/code&gt;. The value is an integer indicating the number of tables waited for. It will always be &lt;code&gt;1&lt;/code&gt; when &lt;code&gt;wait&lt;/code&gt; is called on a table, and the total number of tables when called on a database.</source>
          <target state="translated">戻り値は、単一のフィールド &lt;code&gt;ready&lt;/code&gt; で構成されるオブジェクトです。値は、待機しているテーブルの数を示す整数です。テーブルで &lt;code&gt;wait&lt;/code&gt; が呼び出された場合は常に &lt;code&gt;1&lt;/code&gt; になり、データベースで呼び出された場合はテーブルの合計数になります。</target>
        </trans-unit>
        <trans-unit id="36faca8c0d371071eae4e811f7ff0155ed872784" translate="yes" xml:space="preserve">
          <source>The return value is an object providing information about the table&amp;rsquo;s shards, replicas and replica readiness states. For a more complete discussion of the object fields, read about the &lt;code&gt;table_status&lt;/code&gt; table in &lt;a href=&quot;../../../docs/system-tables/index#status-tables&quot;&gt;System tables&lt;/a&gt;.</source>
          <target state="translated">戻り値は、テーブルのシャード、レプリカ、レプリカの準備状態に関する情報を提供するオブジェクトです。オブジェクトフィールドの詳細については、&lt;a href=&quot;../../../docs/system-tables/index#status-tables&quot;&gt;システムテーブルの&lt;/a&gt; &lt;code&gt;table_status&lt;/code&gt; テーブルをご覧ください。</target>
        </trans-unit>
        <trans-unit id="8664182ddca74a0afbba7d649d8e66f1228d49e5" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;rebalance&lt;/code&gt; is an object with two fields:</source>
          <target state="translated">&lt;code&gt;rebalance&lt;/code&gt; の戻り値は、2つのフィールドを持つオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="c84ffcb32dd5cb8354ded3859b763e4a6e87665d" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;reconfigure&lt;/code&gt; in emergency repair mode is the same as before. Examine the &lt;code&gt;config_changes&lt;/code&gt; field to see the old and new configuration settings for the table. As in the normal mode, if you specify &lt;code&gt;emergencyRepair&lt;/code&gt; with &lt;code&gt;dryRun: true&lt;/code&gt;, the table will not actually be reconfigured.</source>
          <target state="translated">緊急修復モードでの &lt;code&gt;reconfigure&lt;/code&gt; の戻り値は、以前と同じです。調べ &lt;code&gt;config_changes&lt;/code&gt; のテーブルのために古いものと新しい構成設定を確認するためにフィールドを。通常モードと &lt;code&gt;dryRun: true&lt;/code&gt; 、dryRun：trueで &lt;code&gt;emergencyRepair&lt;/code&gt; を指定した場合、テーブルは実際には再構成されません。</target>
        </trans-unit>
        <trans-unit id="e02204eda362a94ed3590b8243708f0a55205484" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;reconfigure&lt;/code&gt; is an object with three fields:</source>
          <target state="translated">&lt;code&gt;reconfigure&lt;/code&gt; の戻り値は、3つのフィールドを持つオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="df4414ccb8e627a46e90684b9df9a10e46fc51d3" translate="yes" xml:space="preserve">
          <source>The return value on success will be an object of the format &lt;code&gt;{renamed: 1}&lt;/code&gt;, or &lt;code&gt;{renamed: 0}&lt;/code&gt; if the old and new names are the same.</source>
          <target state="translated">成功した場合の戻り値は、 &lt;code&gt;{renamed: 1}&lt;/code&gt; 、または古い名前と新しい名前が同じ場合は &lt;code&gt;{renamed: 0}&lt;/code&gt; の形式のオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="4a42d23931413086f7413742cda1659b0e61d53c" translate="yes" xml:space="preserve">
          <source>The return value on success will be an object of the format &lt;code&gt;{renamed:1}&lt;/code&gt;, or &lt;code&gt;{renamed:0}&lt;/code&gt; if the old and new names are the same.</source>
          <target state="translated">成功した場合の戻り値は、形式が &lt;code&gt;{renamed:1}&lt;/code&gt; のオブジェクト、または古い名前と新しい名前が同じ場合は &lt;code&gt;{renamed:0}&lt;/code&gt; のオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="a37da5d84e981e0bb315cf13e3a7994a4aa1e0e0" translate="yes" xml:space="preserve">
          <source>The return value will be an array of two-item objects with the keys &lt;code&gt;dist&lt;/code&gt; and &lt;code&gt;doc&lt;/code&gt;, set to the distance between the specified point and the document (in the units specified with &lt;code&gt;unit&lt;/code&gt;, defaulting to meters) and the document itself, respectively. The array will be sorted by the values of &lt;code&gt;dist&lt;/code&gt;.</source>
          <target state="translated">戻り値は、キー &lt;code&gt;dist&lt;/code&gt; と &lt;code&gt;doc&lt;/code&gt; を持つ2項目オブジェクトの配列で、それぞれ指定されたポイントとドキュメント（unitで指定された &lt;code&gt;unit&lt;/code&gt; 、デフォルトはメートル）とドキュメント自体の間の距離に設定されます。配列は &lt;code&gt;dist&lt;/code&gt; の値でソートされます。</target>
        </trans-unit>
        <trans-unit id="e759e1229ecea9bbd7516da914692287ca680f57" translate="yes" xml:space="preserve">
          <source>The return value, array or stream, will be the same type as the input.</source>
          <target state="translated">戻り値は、配列またはストリームで、入力と同じ型になります。</target>
        </trans-unit>
        <trans-unit id="35b77488a9f7525c41b844e121f9bdfb17349d0d" translate="yes" xml:space="preserve">
          <source>The returned connection object will have two properties on it containing the connection&amp;rsquo;s port and address:</source>
          <target state="translated">返される接続オブジェクトには、接続のポートとアドレスを含む2つのプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="4fec44479d0d10c75421c13f42fbeec52349083e" translate="yes" xml:space="preserve">
          <source>The returned sequence represents an intersection of the left-hand sequence and the right-hand sequence: each row of the left-hand sequence will be compared with each row of the right-hand sequence to find all pairs of rows which satisfy the predicate. Each matched pair of rows of both sequences are combined into a result row. In most cases, you will want to follow the join with &lt;a href=&quot;../zip/index&quot;&gt;zip&lt;/a&gt; to combine the left and right results.</source>
          <target state="translated">返されたシーケンスは、左側のシーケンスと右側のシーケンスの共通部分を表します。左側のシーケンスの各行が右側のシーケンスの各行と比較され、述語を満たすすべての行のペアが検索されます。両方のシーケンスの一致した行の各ペアは、結果の行に結合されます。ほとんどの場合、結合を&lt;a href=&quot;../zip/index&quot;&gt;zipで&lt;/a&gt;追跡して、左と右の結果を結合します。</target>
        </trans-unit>
        <trans-unit id="ac5cc5666ad8aa8ef95292cf77a92d9802649f93" translate="yes" xml:space="preserve">
          <source>The same is true for &lt;code&gt;single&lt;/code&gt; write mode and &lt;code&gt;soft&lt;/code&gt; durability mode. In normal operation these produce the same results as &lt;code&gt;majority&lt;/code&gt; and &lt;code&gt;hard&lt;/code&gt;, but in the event of a network or server failure, recent write operations that were run using these modes might be lost.</source>
          <target state="translated">同じことは、 &lt;code&gt;single&lt;/code&gt; 書き込みモードと &lt;code&gt;soft&lt;/code&gt; 耐久モードにも当てはまります。通常の操作では、これらは &lt;code&gt;majority&lt;/code&gt; および &lt;code&gt;hard&lt;/code&gt; と同じ結果になりますが、ネットワークまたはサーバーに障害が発生した場合、これらのモードを使用して実行された最近の書き込み操作が失われる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b4c323e945ed7f27785d054b5f8f97e0e237757c" translate="yes" xml:space="preserve">
          <source>The second comment can be deleted by using &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;deleteAt&lt;/code&gt; together.</source>
          <target state="translated">2番目のコメントは、 &lt;code&gt;update&lt;/code&gt; と &lt;code&gt;deleteAt&lt;/code&gt; を一緒に使用して削除できます。</target>
        </trans-unit>
        <trans-unit id="202097410423eb99aa6ecf467119bc01a4f749f3" translate="yes" xml:space="preserve">
          <source>The second layer builds on the first and implements various automation mechanisms (e.g. automatically determining how to split shards, where to place copies of the data, automatically picking optimal primary replicas, etc.) This is the layer that compiles goals specified by the user into blueprints.</source>
          <target state="translated">2 番目のレイヤーは、1 番目のレイヤーを構築し、さまざまな自動化メカニズムを実装します(例:シャードの分割方法の自動決定、データのコピーをどこに配置するかの自動決定、最適なプライマリレプリカの自動選択など)。</target>
        </trans-unit>
        <trans-unit id="114be4a5ece50c916bc47741e3a7d572735f0817" translate="yes" xml:space="preserve">
          <source>The server sends a null-terminated JSON response with a &lt;code&gt;&quot;success&quot;&lt;/code&gt; value of either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. On &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;&quot;authentication&quot;&lt;/code&gt; will contain the &amp;ldquo;server-final-message&amp;rdquo; with the ServerSignature value. The client should compute a ServerSignature as specified in the RFC and verify the values are identical.</source>
          <target state="translated">サーバーは、 &lt;code&gt;&quot;success&quot;&lt;/code&gt; 値が &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; の nullで終了するJSON応答を送信します。で &lt;code&gt;true&lt;/code&gt; 、その後、 &lt;code&gt;&quot;authentication&quot;&lt;/code&gt; ServerSignature値を持つ「サーバー・ファイナル・メッセージ」を含んでいます。クライアントは、RFCで指定されているようにServerSignatureを計算し、値が同じであることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="edb1a2704ae24a6e1303f7d8a6f62db3e8042205" translate="yes" xml:space="preserve">
          <source>The server sends a null-terminated JSON response with a &lt;code&gt;&quot;success&quot;&lt;/code&gt; value of either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. On &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;&quot;authentication&quot;&lt;/code&gt; will contain the &amp;ldquo;server-first-message&amp;rdquo; containing the iteration count (&lt;code&gt;i=&lt;/code&gt;), salt (&lt;code&gt;s=&lt;/code&gt;) and a concatenation of the client nonce with its own nonce.</source>
          <target state="translated">サーバーは、 &lt;code&gt;&quot;success&quot;&lt;/code&gt; 値が &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; の nullで終了するJSON応答を送信します。で &lt;code&gt;true&lt;/code&gt; 、その後、 &lt;code&gt;&quot;authentication&quot;&lt;/code&gt; の繰り返し回数（含む「サーバー・ファースト・メッセージ」が含まれます &lt;code&gt;i=&lt;/code&gt; ）、塩（ &lt;code&gt;s=&lt;/code&gt; ）と、独自のナンスと、クライアントのナンスの連結を。</target>
        </trans-unit>
        <trans-unit id="f585ded5cf8cfbbeb9c1f07d18ba8a91cefb4bcd" translate="yes" xml:space="preserve">
          <source>The server should return an object with zero errors and three inserted documents. We didn&amp;rsquo;t specify any primary keys (by default, each table uses the &lt;code&gt;id&lt;/code&gt; attribute for primary keys), so RethinkDB generated them for us. The generated keys are returned via the &lt;code&gt;generated_keys&lt;/code&gt; attribute.</source>
          <target state="translated">サーバーは、ゼロのエラーと3つの挿入されたドキュメントを持つオブジェクトを返す必要があります。主キーを指定しなかったため（デフォルトでは、各テーブルは主キーの &lt;code&gt;id&lt;/code&gt; 属性を使用します）、RethinkDBが生成します。生成されたキーは、 &lt;code&gt;generated_keys&lt;/code&gt; 属性を介して返されます。</target>
        </trans-unit>
        <trans-unit id="b03cc06b72c959f4268900082b840ad51ced3fd1" translate="yes" xml:space="preserve">
          <source>The server will buffer up to &lt;code&gt;changefeedQueueSize&lt;/code&gt; elements (default 100,000). If the buffer limit is hit, early changes will be discarded, and the client will receive an object of the form &lt;code&gt;{error: &quot;Changefeed cache over array size limit, skipped X elements.&quot;}&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is the number of elements skipped.</source>
          <target state="translated">サーバーは、 &lt;code&gt;changefeedQueueSize&lt;/code&gt; 要素（デフォルトは100,000）までバッファリングします。バッファ制限に達した場合、初期の変更は破棄され、クライアントは &lt;code&gt;{error: &quot;Changefeed cache over array size limit, skipped X elements.&quot;}&lt;/code&gt; の形式のオブジェクトを受け取ります。ここで、 &lt;code&gt;X&lt;/code&gt; はスキップされた要素の数です。</target>
        </trans-unit>
        <trans-unit id="98b6dd8a48a32954f5cb12942416a3c37cb847e5" translate="yes" xml:space="preserve">
          <source>The server will buffer up to &lt;code&gt;changefeedQueueSize&lt;/code&gt; elements (default 100,000). If the buffer limit is hit, early changes will be discarded, and the client will receive an object of the form &lt;code&gt;{error:&quot;Changefeed cache over array size limit, skipped X elements.&quot;}&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is the number of elements skipped.</source>
          <target state="translated">サーバーは、最大 &lt;code&gt;changefeedQueueSize&lt;/code&gt; 要素（デフォルトは100,000）までバッファリングします。バッファ制限に &lt;code&gt;{error:&quot;Changefeed cache over array size limit, skipped X elements.&quot;}&lt;/code&gt; と、初期の変更は破棄され、クライアントは{error： &quot;Changefeed cache over array size limit、skipped X elements。&quot;}という形式のオブジェクトを受け取ります。ここで、 &lt;code&gt;X&lt;/code&gt; はスキップされた要素の数です。</target>
        </trans-unit>
        <trans-unit id="8ecf2cc5495ccd280e597b73766b3eb352486850" translate="yes" xml:space="preserve">
          <source>The server will respond with a &lt;code&gt;null&lt;/code&gt;-terminated ASCII string describing the result of the handshake. If the string is &lt;code&gt;&quot;SUCCESS&quot;&lt;/code&gt;, the client may proceed to stage 2 and begin sending queries. Any other string indicates an error. The server will close the connection, and the driver should report this error to the user.</source>
          <target state="translated">サーバーは、ハンドシェイクの結果を説明する &lt;code&gt;null&lt;/code&gt; で終了するASCII文字列で応答します。文字列が &lt;code&gt;&quot;SUCCESS&quot;&lt;/code&gt; の場合、クライアントはステージ2に進み、クエリの送信を開始できます。その他の文字列はエラーを示します。サーバーは接続を閉じ、ドライバーはこのエラーをユーザーに報告する必要があります。</target>
        </trans-unit>
        <trans-unit id="6c542284a396addc364ea26c76effd4f38655282" translate="yes" xml:space="preserve">
          <source>The service sets the locations of the configuration file and the &lt;code&gt;rethinkdb.exe&lt;/code&gt; binary on installation. If you move either of those, you&amp;rsquo;ll need to remove the service and re-install it.</source>
          <target state="translated">このサービスは、インストール &lt;code&gt;rethinkdb.exe&lt;/code&gt; 構成ファイルとrethinkdb.exeバイナリの場所を設定します。これらのいずれかを移動する場合は、サービスを削除して再インストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="bb34c0eeb39d264cfac8ec323a32cd73fea9d45f" translate="yes" xml:space="preserve">
          <source>The service will be installed under the name &lt;code&gt;rethinkdb_default&lt;/code&gt;, and will automatically be started after installation. You can use the Services tab in Task Manager to monitor, stop, and restart the service. By default, REthinkDB is set to automatically start on system startup.</source>
          <target state="translated">このサービスは &lt;code&gt;rethinkdb_default&lt;/code&gt; という名前でインストールされ、インストール後に自動的に開始されます。タスクマネージャの[サービス]タブを使用して、サービスを監視、停止、および再起動できます。デフォルトでは、REthinkDBはシステムの起動時に自動的に起動するように設定されています。</target>
        </trans-unit>
        <trans-unit id="01511cc2b5cf35c2db85f41272ca8094df7742c9" translate="yes" xml:space="preserve">
          <source>The short answer is no. The longer answer is that the clustering system is designed with three main principles in mind:</source>
          <target state="translated">短い答えは「いいえ」です。長い答えは、クラスタリングシステムは3つの主要な原則を念頭に置いて設計されているということです。</target>
        </trans-unit>
        <trans-unit id="122b514199aca38b1e64f978120a76550d5f8df4" translate="yes" xml:space="preserve">
          <source>The short answer: you can&amp;rsquo;t. Use &lt;code&gt;Time&lt;/code&gt; objects instead.</source>
          <target state="translated">簡単に言えば、それはできません。代わりに &lt;code&gt;Time&lt;/code&gt; オブジェクトを使用してください。</target>
        </trans-unit>
        <trans-unit id="3b9453d9082351eda5683faedd71864622103978" translate="yes" xml:space="preserve">
          <source>The simplest case is publishing a message with a string for a topic. This lends itself to using regexes for filtering.</source>
          <target state="translated">最も単純なケースは、トピックの文字列を含むメッセージを公開することです。これは、フィルタリングのために正規表現を使用するのに適しています。</target>
        </trans-unit>
        <trans-unit id="bb3e9cfc183b68887a93814d02362733592ff536" translate="yes" xml:space="preserve">
          <source>The size of the JSON-encoded response, as a 4-byte little-endian integer</source>
          <target state="translated">JSON でエンコードされたレスポンスのサイズを 4 バイトのリトルエンディアン整数で指定します。</target>
        </trans-unit>
        <trans-unit id="74b63d6fbff9efcdad47927189bdc3fb30c297b0" translate="yes" xml:space="preserve">
          <source>The size of the JSON-serialized, UTF8-encoded query, as a 4-byte little-endian integer</source>
          <target state="translated">JSON でシリアライズされ、UTF8 でエンコードされたクエリのサイズを 4 バイトのリトルエンディアン整数で指定します。</target>
        </trans-unit>
        <trans-unit id="57d388ed7a0a12386d59b691694b54aade3412a2" translate="yes" xml:space="preserve">
          <source>The size of the JSON-serialized, UTF8-encoded wrapped query, as a 4-byte little-endian integer</source>
          <target state="translated">JSON でシリアライズされ、UTF8 でエンコードされたラップドクエリのサイズを 4 バイトのリトルエンディアン整数で指定します。</target>
        </trans-unit>
        <trans-unit id="9317ef5264324276eb78c8a1c900602db1085bdc" translate="yes" xml:space="preserve">
          <source>The slightly longer answer: there&amp;rsquo;s only one native &lt;code&gt;time&lt;/code&gt; data type in RethinkDB. When a language supports more than one kind of date/time object, we think it&amp;rsquo;s better to explicitly support one and only one of them in the client driver to avoid confusion. Otherwise, you might insert a &lt;code&gt;DateTime&lt;/code&gt; object and get a &lt;code&gt;Time&lt;/code&gt; object back.</source>
          <target state="translated">少し長い答え：RethinkDBにはネイティブの &lt;code&gt;time&lt;/code&gt; データ型が1つしかありません。言語が複数の種類の日付/時刻オブジェクトをサポートする場合、混乱を避けるために、クライアントドライバーでそれらのうちの1つだけを明示的にサポートする方が良いと思います。それ以外の場合は、 &lt;code&gt;DateTime&lt;/code&gt; オブジェクトを挿入して、 &lt;code&gt;Time&lt;/code&gt; オブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="b7c32a92c25b9cee33b2f71bfb7a043ec405b0db" translate="yes" xml:space="preserve">
          <source>The smallest recommended instance type is &lt;code&gt;t2.small&lt;/code&gt;. However, &lt;code&gt;t2.micro&lt;/code&gt; works for simple tests. Follow these instructions to set up an AMI:</source>
          <target state="translated">最小の推奨インスタンスタイプは &lt;code&gt;t2.small&lt;/code&gt; です。ただし、 &lt;code&gt;t2.micro&lt;/code&gt; は単純なテストで機能します。以下の手順に従って、AMIをセットアップします。</target>
        </trans-unit>
        <trans-unit id="fe9f9991bad143f14ee5c65aadc6ca48be3371b7" translate="yes" xml:space="preserve">
          <source>The solution is to add a &lt;code&gt;default&lt;/code&gt; to the &lt;code&gt;row&lt;/code&gt; command that always evaluates to something other than what you&amp;rsquo;re testing for, so it will return &lt;code&gt;false&lt;/code&gt; if the field doesn&amp;rsquo;t exist:</source>
          <target state="translated">解決策は、常にテスト対象以外のものに評価される &lt;code&gt;default&lt;/code&gt; を &lt;code&gt;row&lt;/code&gt; コマンドに追加することです。そのため、フィールドが存在しない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5b36db4e47fc826603ad3fcc1fa591fc90ce4a59" translate="yes" xml:space="preserve">
          <source>The stats table is one of the &lt;a href=&quot;../system-tables/index&quot;&gt;system tables&lt;/a&gt; added in version 1.16 of RethinkDB. It provides statistics about server read/write throughput, client connections, and memory usage.</source>
          <target state="translated">統計テーブルは、RethinkDBのバージョン1.16で追加された&lt;a href=&quot;../system-tables/index&quot;&gt;システムテーブルの&lt;/a&gt; 1つです。サーバーの読み取り/書き込みスループット、クライアント接続、メモリ使用量に関する統計を提供します。</target>
        </trans-unit>
        <trans-unit id="84f5d2d101fc423bc118fd0bc79f68807e1dd7f3" translate="yes" xml:space="preserve">
          <source>The steps necessary for migrating data to current RethinkDB versions from previous ones depend on which version you&amp;rsquo;re migrating from.</source>
          <target state="translated">以前のバージョンから現在のRethinkDBバージョンにデータを移行するために必要な手順は、移行元のバージョンによって異なります。</target>
        </trans-unit>
        <trans-unit id="ac277ab708b96fe6dc91bf3cd9a94437f7706c40" translate="yes" xml:space="preserve">
          <source>The storage engine is used in conjunction with a custom, B-Tree-aware caching engine which allows file sizes many orders of magnitude greater than the amount of available memory. RethinkDB can operate on a terabyte of data with about ten gigabytes of free RAM.</source>
          <target state="translated">このストレージエンジンは、B-Treeを意識したカスタムのキャッシングエンジンと組み合わせて使用され、使用可能なメモリ量よりも何桁も大きいファイルサイズを実現します。RethinkDBは、約10ギガバイトの空きRAMで1テラバイトのデータを操作できます。</target>
        </trans-unit>
        <trans-unit id="d8396b8f23f4763e864595f49d22dca2ab9cdfe5" translate="yes" xml:space="preserve">
          <source>The table created has six fields: an automatically generated primary key (&lt;code&gt;id&lt;/code&gt;), &lt;code&gt;rank&lt;/code&gt; (the IMDb rank, 1&amp;ndash;250), &lt;code&gt;rating&lt;/code&gt; (on a 1&amp;ndash;10 scale), &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;votes&lt;/code&gt;, and &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="translated">作成されたテーブルには6つのフィールドがあります。自動生成された主キー（ &lt;code&gt;id&lt;/code&gt; ）、 &lt;code&gt;rank&lt;/code&gt; （IMDbランク、1〜250）、 &lt;code&gt;rating&lt;/code&gt; （1〜10のスケール）、 &lt;code&gt;title&lt;/code&gt; 、 &lt;code&gt;votes&lt;/code&gt; 、 &lt;code&gt;year&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3bee24f1a9444db1641572680398af8a1e9f5a02" translate="yes" xml:space="preserve">
          <source>The table must be configured to have three or more replicas</source>
          <target state="translated">テーブルは3つ以上のレプリカを持つように設定されている必要があります。</target>
        </trans-unit>
        <trans-unit id="4be6c448f38373c6d6cf5f4315ebc31efcf470d8" translate="yes" xml:space="preserve">
          <source>The table stores a maximum of 1000 messages per server. The changefeed will not deliver events for log entries when they are removed.</source>
          <target state="translated">テーブルには、サーバーごとに最大1000のメッセージが保存されます。changefeedはログエントリが削除されてもイベントを配信しません。</target>
        </trans-unit>
        <trans-unit id="67c77aec7a677d740204db26286743a08de27d11" translate="yes" xml:space="preserve">
          <source>The table&amp;rsquo;s primary key is the &lt;code&gt;id&lt;/code&gt; field, and the keys are always arrays. The first element in the array is always a string indicating the object type being queried (i.e., &lt;code&gt;&quot;table&quot;&lt;/code&gt;, &lt;code&gt;&quot;server&quot;&lt;/code&gt;, etc.); for all objects but the cluster (which has only one document in the &lt;code&gt;stats&lt;/code&gt; table), the second element is the UUID of the object being queried.</source>
          <target state="translated">テーブルの主キーは &lt;code&gt;id&lt;/code&gt; フィールドであり、キーは常に配列です。配列の最初の要素は常に、照会されるオブジェクトのタイプを示す文字列です（つまり、 &lt;code&gt;&quot;table&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;server&quot;&lt;/code&gt; など）。クラスター（ &lt;code&gt;stats&lt;/code&gt; テーブルにドキュメントが1つしかない）を除くすべてのオブジェクトの場合、2番目の要素は、照会されるオブジェクトのUUIDです。</target>
        </trans-unit>
        <trans-unit id="4af84b2b5658b67fb03036b287f81c0ea4dc3b25" translate="yes" xml:space="preserve">
          <source>The table&amp;rsquo;s primary key is the &lt;code&gt;id&lt;/code&gt; field, and the keys are always arrays. The first element in the array is always a string indicating the type of job (e.g., &lt;code&gt;&quot;query&quot;&lt;/code&gt;, &lt;code&gt;&quot;disk_compaction&quot;&lt;/code&gt;, etc.); the second element is the UUID of the job. The type of job is also given in the &lt;code&gt;type&lt;/code&gt; field.</source>
          <target state="translated">テーブルの主キーは &lt;code&gt;id&lt;/code&gt; フィールドであり、キーは常に配列です。配列の最初の要素は常にジョブのタイプを示す文字列です（例： &lt;code&gt;&quot;query&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;disk_compaction&quot;&lt;/code&gt; など）。2番目の要素はジョブのUUIDです。ジョブのタイプも &lt;code&gt;type&lt;/code&gt; フィールドに表示されます。</target>
        </trans-unit>
        <trans-unit id="45cd12e06348bca2dd80568fa923b95cdcd2c00d" translate="yes" xml:space="preserve">
          <source>The third layers builds on the previous two and provides the user with command line and web-based tools to control the cluster.</source>
          <target state="translated">第3のレイヤーは、前の2つのレイヤーをベースに構築されており、クラスターを制御するためのコマンドラインとWebベースのツールをユーザーに提供しています。</target>
        </trans-unit>
        <trans-unit id="f6d1631967f3c75d8b045a65b29120cdf51ee7e5" translate="yes" xml:space="preserve">
          <source>The token is a unique integer per connection. Keeping a counter per connection is a simple way to implement it.</source>
          <target state="translated">トークンは接続ごとに一意の整数です。接続ごとにカウンタを保持することは、それを実装するための簡単な方法です。</target>
        </trans-unit>
        <trans-unit id="466d055f41cbd22991febcdb9bc74645f65ffa5e" translate="yes" xml:space="preserve">
          <source>The top-level ReQL namespace.</source>
          <target state="translated">トップレベルの ReQL 名前空間。</target>
        </trans-unit>
        <trans-unit id="b41045caf64cf3a3c5b73e63bfcd20c490c63cbe" translate="yes" xml:space="preserve">
          <source>The two most important aspects of the execution engine is that every query is completely parallelized across the cluster, and that queries are evaluated lazily. For instance, if the client requests only one document, RethinkDB will try to do just enough work to return this document, and will not process every shard in its entirety. This allows for large, complicated queries to execute in a very efficient way.</source>
          <target state="translated">実行エンジンの2つの最も重要な点は、すべてのクエリがクラスタ全体で完全に並列化されていることと、クエリが怠惰に評価されていることです。例えば、クライアントが1つのドキュメントだけを要求した場合、RethinkDBはこのドキュメントを返すのに十分なだけの作業をしようとし、すべてのシャードをまるごと処理することはありません。これにより、大規模で複雑なクエリを非常に効率的に実行することができます。</target>
        </trans-unit>
        <trans-unit id="cf5d5fdab91cb54e7ea1d05ea3a02e8164908734" translate="yes" xml:space="preserve">
          <source>The type of data &lt;code&gt;binary&lt;/code&gt; accepts depends on the client language. In JavaScript, it expects a &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt;&lt;code&gt;Buffer&lt;/code&gt;. Using a &lt;code&gt;Buffer&lt;/code&gt; object within a query implies the use of &lt;code&gt;binary&lt;/code&gt; and the ReQL driver will automatically perform the coercion.</source>
          <target state="translated">&lt;code&gt;binary&lt;/code&gt; 受け入れるデータのタイプは、クライアントの言語によって異なります。 JavaScriptでは、&lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js &lt;/a&gt; &lt;code&gt;Buffer&lt;/code&gt; です。クエリ内で &lt;code&gt;Buffer&lt;/code&gt; オブジェクトを使用すると、 &lt;code&gt;binary&lt;/code&gt; が使用され、ReQLドライバーが自動的に強制変換を実行します。</target>
        </trans-unit>
        <trans-unit id="7cf930814fe3eaac8532459ad55f2f6375a3b9e8" translate="yes" xml:space="preserve">
          <source>The type will be returned as a string:</source>
          <target state="translated">型は文字列として返されます。</target>
        </trans-unit>
        <trans-unit id="5bbbb2de3860c2f10b7d816ad7baeb36022c1e11" translate="yes" xml:space="preserve">
          <source>The update command will go through every row and issue an API request to the GitHub URL for the given user, grab the relevant data, and update the user information with that data!</source>
          <target state="translated">update コマンドは、すべての行を調べて GitHub の URL に API リクエストを発行し、関連するデータを取得し、そのデータでユーザー情報を更新します。</target>
        </trans-unit>
        <trans-unit id="d6834cea4439bc5555fa593bfe010a1c4b3e8728" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;iterations&lt;/code&gt; is a tradeoff between performance and security against brute force attacks. If connections are slow, consider lowering the number of iterations. Raising the number of iterations will make it harder to use a brute force attack, but will increase the CPU usage on clients while establishing a connection.</source>
          <target state="translated">&lt;code&gt;iterations&lt;/code&gt; の価値は、ブルートフォース攻撃に対するパフォーマンスとセキュリティのトレードオフです。接続が遅い場合は、反復回数を減らすことを検討してください。反復回数を増やすと、ブルートフォース攻撃の使用が難しくなりますが、接続を確立している間、クライアントのCPU使用率が増加します。</target>
        </trans-unit>
        <trans-unit id="c8f4326f44c3a4e70aa078a4d1ef6136197b6c59" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;connection&lt;/code&gt; is now initialized and we can run queries.</source>
          <target state="translated">変数 &lt;code&gt;connection&lt;/code&gt; が初期化され、クエリを実行できます。</target>
        </trans-unit>
        <trans-unit id="ae352b30a0ea50d1839336defec725fd2135db8a" translate="yes" xml:space="preserve">
          <source>The various &lt;code&gt;on_*&lt;/code&gt; methods provide fallbacks for one another:</source>
          <target state="translated">さまざまな &lt;code&gt;on_*&lt;/code&gt; メソッドが相互にフォールバックを提供します。</target>
        </trans-unit>
        <trans-unit id="8a205ac1eb38bfbb096a68973349763844c85250" translate="yes" xml:space="preserve">
          <source>The web UI only affects servers with the &lt;code&gt;default&lt;/code&gt; tag. If you remove the &lt;code&gt;default&lt;/code&gt; tag from a server or start it without that tag, it will not be used for tables configured through the web UI.</source>
          <target state="translated">Web UIは、 &lt;code&gt;default&lt;/code&gt; タグを持つサーバーにのみ影響します。サーバーから &lt;code&gt;default&lt;/code&gt; タグを削除するか、そのタグなしで開始すると、Web UIを介して構成されたテーブルには使用されません。</target>
        </trans-unit>
        <trans-unit id="46633f21ecb5a76f2aebb7bf842e88c3bda5f0fe" translate="yes" xml:space="preserve">
          <source>The web UI requires &lt;code&gt;DataView&lt;/code&gt; and &lt;code&gt;Uint8Array&lt;/code&gt; JavaScript features to be supported by your browser.</source>
          <target state="translated">Web UIを使用するには、 &lt;code&gt;Uint8Array&lt;/code&gt; &lt;code&gt;DataView&lt;/code&gt; およびUint8Array JavaScript機能をサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="19c6c96199f3171355430a94a64a0f33d4759d04" translate="yes" xml:space="preserve">
          <source>The web UI supports creation and deletion of simple secondary indexes. In the table list, click on the table &lt;code&gt;users&lt;/code&gt;. You can manipulate indexes through the secondary index panel in the table view.</source>
          <target state="translated">Web UIは、単純なセカンダリインデックスの作成と削除をサポートしています。テーブルリストで、テーブル &lt;code&gt;users&lt;/code&gt; をクリックします。テーブルビューのセカンダリインデックスパネルからインデックスを操作できます。</target>
        </trans-unit>
        <trans-unit id="835e5ac2124d7adb55a81eefe9733c24756faad2" translate="yes" xml:space="preserve">
          <source>The web administration UI always connects as if it were the &lt;code&gt;admin&lt;/code&gt; user, and skips the authentication process (i.e., the password is not used for this connection). While the web UI cannot be password-protected, you can limit the addresses it will accept connections on using the &lt;code&gt;--bind-http&lt;/code&gt; command line option. For more details on this, review &lt;a href=&quot;../security/index#securing-the-web-interface&quot;&gt;Secure your cluster&lt;/a&gt;.</source>
          <target state="translated">Web管理UIは常に &lt;code&gt;admin&lt;/code&gt; ユーザーであるかのように接続し、認証プロセスをスキップします（つまり、この接続ではパスワードは使用されません）。ウェブUIをパスワードで保護することはできませんが、 &lt;code&gt;--bind-http&lt;/code&gt; コマンドラインオプションを使用して、接続を受け入れるアドレスを制限できます。これについて詳しくは&lt;a href=&quot;../security/index#securing-the-web-interface&quot;&gt;、クラスターの保護を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="c23b44b5fa92781014237ab0b6407a8b0dec1e43" translate="yes" xml:space="preserve">
          <source>The web interface</source>
          <target state="translated">ウェブインタフェース</target>
        </trans-unit>
        <trans-unit id="e76bb2e6186f4296fdc2ce7806daa233e0129060" translate="yes" xml:space="preserve">
          <source>The wrapped query message (QueryType, serialized query and options)</source>
          <target state="translated">ラップされたクエリメッセージ (QueryType、シリアライズされたクエリ、オプション)</target>
        </trans-unit>
        <trans-unit id="5a9dd02e0e3fec7b03eb0481b5b9083049419d70" translate="yes" xml:space="preserve">
          <source>The wrapped query message sent to the server is an array of three elements:</source>
          <target state="translated">サーバに送信されるラッピングされたクエリメッセージは、3つの要素の配列です。</target>
        </trans-unit>
        <trans-unit id="11526202a4159cbc549e507781f630a99b427910" translate="yes" xml:space="preserve">
          <source>The write acknowledgement setting for a table controls when the cluster acknowledges a write request as fulfilled. There are two possible settings:</source>
          <target state="translated">テーブルの書き込み確認設定は、クラスタが書き込み要求が満たされたことを確認するかどうかを制御します。設定には二つの可能性があります。</target>
        </trans-unit>
        <trans-unit id="47a108c7b7e30ffc4e3685e98ee4b64f37fa6b38" translate="yes" xml:space="preserve">
          <source>Then as before, we map each post to the number &lt;code&gt;1&lt;/code&gt;. Commands after the &lt;code&gt;group&lt;/code&gt; command will be applied to each grouped set.</source>
          <target state="translated">次に、以前と同様に、各投稿を数値 &lt;code&gt;1&lt;/code&gt; にマッピングします。 &lt;code&gt;group&lt;/code&gt; コマンドの後のコマンドは、グループ化された各セットに適用されます。</target>
        </trans-unit>
        <trans-unit id="373f73812762c7dc46fcca04a15315b885d341a8" translate="yes" xml:space="preserve">
          <source>Then make sure to move or delete the old RethinkDB data directory (&lt;code&gt;rethinkdb_data&lt;/code&gt; by default), since the new version will not be able to read the old file.</source>
          <target state="translated">新しいバージョンでは古いファイルを読み取ることができないため、古いRethinkDBデータディレクトリ（デフォルトでは &lt;code&gt;rethinkdb_data&lt;/code&gt; ）を移動または削除してください。</target>
        </trans-unit>
        <trans-unit id="85735e42e3c49d21bec18736a350e53f8ef64177" translate="yes" xml:space="preserve">
          <source>Then open your browser:</source>
          <target state="translated">その後、ブラウザを開きます。</target>
        </trans-unit>
        <trans-unit id="20dc328e896c46407854b85c49918fd88856739d" translate="yes" xml:space="preserve">
          <source>Then start RethinkDB on the second machine:</source>
          <target state="translated">その後、2台目のマシンでRethinkDBを起動します。</target>
        </trans-unit>
        <trans-unit id="9ce7ae846f2cf6cc97bda9b94cb8e931f27b32f8" translate="yes" xml:space="preserve">
          <source>Then the query selecting posts about &lt;code&gt;&quot;fun&quot;&lt;/code&gt;, by &lt;code&gt;&quot;John&quot;&lt;/code&gt;, and posted between &lt;code&gt;120&lt;/code&gt; and &lt;code&gt;130&lt;/code&gt;, would be:</source>
          <target state="translated">次いで、約ポスト選択クエリ &lt;code&gt;&quot;fun&quot;&lt;/code&gt; ことで、 &lt;code&gt;&quot;John&quot;&lt;/code&gt; との間に掲載さ &lt;code&gt;120&lt;/code&gt; および &lt;code&gt;130&lt;/code&gt; は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="cf05db71c2c2b82022a19f45d7550290ae72ac9b" translate="yes" xml:space="preserve">
          <source>Then you can use that index in the &lt;code&gt;group&lt;/code&gt; function. This query would return the highest-value invoice for each day.</source>
          <target state="translated">次に、そのインデックスを &lt;code&gt;group&lt;/code&gt; 関数で使用できます。このクエリは、毎日の最高額の請求書を返します。</target>
        </trans-unit>
        <trans-unit id="777999d7676c59ebd630e109f25af12b28bcb677" translate="yes" xml:space="preserve">
          <source>Then you&amp;rsquo;ll need to create the RethinkDB data directory.</source>
          <target state="translated">次に、RethinkDBデータディレクトリを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="61bfdd81f4b7a5981123dcfefee521c9149dc1b8" translate="yes" xml:space="preserve">
          <source>Then, copy the sample configuration file and use the &lt;a href=&quot;../config-file/index&quot;&gt;configuration file&lt;/a&gt; documentation as a guide to customize it. (If you don&amp;rsquo;t have the sample &lt;code&gt;.conf&lt;/code&gt; file, you can download it &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample&quot;&gt;here&lt;/a&gt;.)</source>
          <target state="translated">次に、サンプル構成ファイルをコピーし、&lt;a href=&quot;../config-file/index&quot;&gt;構成ファイルの&lt;/a&gt;ドキュメントをガイドとして使用してカスタマイズします。（サンプルの &lt;code&gt;.conf&lt;/code&gt; ファイルがない場合は、&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample&quot;&gt;ここから&lt;/a&gt;ダウンロードできます。）</target>
        </trans-unit>
        <trans-unit id="a3fb4e7ad8aef52a7890cc49ca8ea407afa881ff" translate="yes" xml:space="preserve">
          <source>Then, enable the service:</source>
          <target state="translated">その後、サービスを有効にします。</target>
        </trans-unit>
        <trans-unit id="11bdef9943474cec9139375264eb2ce91de1c8ea" translate="yes" xml:space="preserve">
          <source>Then, generate a certificate, &lt;code&gt;cert.pem&lt;/code&gt;, from that key:</source>
          <target state="translated">次に、そのキーから証明書 &lt;code&gt;cert.pem&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="f5ea72c2d37c2b1c37bd8b7ebe6736cad9811c2e" translate="yes" xml:space="preserve">
          <source>Then, import the RethinkDB driver:</source>
          <target state="translated">次に、RethinkDBドライバをインポートします。</target>
        </trans-unit>
        <trans-unit id="ee598540a861f6fcc6ac7ae1337575b517fbede7" translate="yes" xml:space="preserve">
          <source>Then, restart the service:</source>
          <target state="translated">その後、サービスを再起動します。</target>
        </trans-unit>
        <trans-unit id="e11ea22ba5fd48e949819f8d6852dd06f4fcead4" translate="yes" xml:space="preserve">
          <source>Then, start RethinkDB with its default options.</source>
          <target state="translated">そして、デフォルトのオプションでRethinkDBを起動します。</target>
        </trans-unit>
        <trans-unit id="0dc97a274d3921d7624f9e93eda6738f45944317" translate="yes" xml:space="preserve">
          <source>Then, subscribers could listen for messages with any combination of tags:</source>
          <target state="translated">その後、加入者はタグを任意の組み合わせでメッセージを聞くことができるようになりました。</target>
        </trans-unit>
        <trans-unit id="a0ff0e7a5afdd6b7af8306c4a3ef8b9cdf8beb45" translate="yes" xml:space="preserve">
          <source>Then, there are two functions for retrieving files: one to retrieve a directory of a user&amp;rsquo;s uploaded files (&lt;code&gt;getUserFileIDs&lt;/code&gt;) and one to retrieve the actual file itself (&lt;code&gt;getFile&lt;/code&gt;). We don&amp;rsquo;t have to use &lt;code&gt;binary&lt;/code&gt; again here; the ReQL driver will return the proper data type for the &lt;code&gt;file&lt;/code&gt; field in our object.</source>
          <target state="translated">次に、ファイルを取得するための2つの関数があります。1つはユーザーがアップロードしたファイルのディレクトリを取得する関数（ &lt;code&gt;getUserFileIDs&lt;/code&gt; ）で、もう1つは実際のファイル自体を取得する &lt;code&gt;getFile&lt;/code&gt; （getFile）です。ここで再び &lt;code&gt;binary&lt;/code&gt; を使用する必要はありません。ReQLドライバーは、オブジェクトの &lt;code&gt;file&lt;/code&gt; フィールドの適切なデータ型を返します。</target>
        </trans-unit>
        <trans-unit id="3296464e11028ef43904be0c240bf019c7b106a0" translate="yes" xml:space="preserve">
          <source>Then, to listen to messages, just provide a callback to the &lt;code&gt;.subscribe()&lt;/code&gt; method on the queue:</source>
          <target state="translated">次に、メッセージをリッスンするには、キューの &lt;code&gt;.subscribe()&lt;/code&gt; メソッドへのコールバックを提供します。</target>
        </trans-unit>
        <trans-unit id="c41f2ba74cf07c786c81edddddb4f3b2805474be" translate="yes" xml:space="preserve">
          <source>Then, we add the &lt;code&gt;tableCreate&lt;/code&gt; command to create the actual table.</source>
          <target state="translated">次に、 &lt;code&gt;tableCreate&lt;/code&gt; コマンドを追加して実際のテーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="fb8c1b60653312846c75686a1276635b4ed825ca" translate="yes" xml:space="preserve">
          <source>There are a couple of things to note about this query:</source>
          <target state="translated">このクエリについて注意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="a23dd3c8cb9731a3fd1112c01afc115df9338b76" translate="yes" xml:space="preserve">
          <source>There are currently two states:</source>
          <target state="translated">現在は2つの州があります。</target>
        </trans-unit>
        <trans-unit id="50ea354dfdde1a79f1cc524cc5796f0426d4d12f" translate="yes" xml:space="preserve">
          <source>There are different publish-subscribe variations, so here we&amp;rsquo;ll describe the type using a central topic exchange. In this model, publishers connect to the central exchange and broadcast a message with a given topic. When subscribers connect, they notify the exchange about what kinds of messages they&amp;rsquo;re interested in. The exchange is then responsible for filtering messages.</source>
          <target state="translated">パブリッシュ/サブスクライブにはさまざまなバリエーションがあるため、ここでは、中心的なトピック交換を使用してタイプについて説明します。このモデルでは、パブリッシャーは中央取引所に接続し、特定のトピックを含むメッセージをブロードキャストします。サブスクライバーが接続すると、関心のあるメッセージの種類についてエクスチェンジに通知されます。その後、エクスチェンジはメッセージのフィルター処理を行います。</target>
        </trans-unit>
        <trans-unit id="5e6a261f4a90188d0d21308eb4518c242c3ee55a" translate="yes" xml:space="preserve">
          <source>There are four different permissions that can be granted to a user:</source>
          <target state="translated">ユーザーに付与できる権限は4つあります。</target>
        </trans-unit>
        <trans-unit id="32c898affbf2b04845b19d3ef8037b56ffc7b0d6" translate="yes" xml:space="preserve">
          <source>There are four different permissions that can be granted to an account:</source>
          <target state="translated">アカウントに付与できる権限は4つあります。</target>
        </trans-unit>
        <trans-unit id="52482533c49305cf3ba538f7607584d817448f16" translate="yes" xml:space="preserve">
          <source>There are four kinds of jobs. The document schema is consistent between them, with job-specific data appearing in the &lt;code&gt;info&lt;/code&gt; field.</source>
          <target state="translated">仕事は4種類あります。ドキュメントスキーマはそれらの間で一貫しており、ジョブ固有のデータが &lt;code&gt;info&lt;/code&gt; フィールドに表示されます。</target>
        </trans-unit>
        <trans-unit id="886bf75dd348fa061a7ef813ce2b2a8d5e1d33e4" translate="yes" xml:space="preserve">
          <source>There are more options than what we&amp;rsquo;ve covered here. Run &lt;code&gt;rethinkdb help import&lt;/code&gt; for a full list of parameters and examples.</source>
          <target state="translated">ここで説明した以外にも多くのオプションがあります。パラメータと例の完全なリストについては、 &lt;code&gt;rethinkdb help import&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="cb609b83989bc8962ca574f2727ce880206e9583" translate="yes" xml:space="preserve">
          <source>There are multiple subscriptions we could have set up that would receive this news:</source>
          <target state="translated">このニュースを受信できるように複数の購読を設定することができました。</target>
        </trans-unit>
        <trans-unit id="c38856d11ec968183c07a941fbd374de03ae8440" translate="yes" xml:space="preserve">
          <source>There are multiple ways to paginate results in RethinkDB. The most straightforward way is using &lt;code&gt;skip&lt;/code&gt; and &lt;code&gt;limit&lt;/code&gt; (similar to the way SQL&amp;rsquo;s &lt;code&gt;OFFSET&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt; work), but that&amp;rsquo;s also the least efficient. It&amp;rsquo;s more efficient to use &lt;code&gt;slice&lt;/code&gt;, and even more efficient to use &lt;code&gt;between&lt;/code&gt; with a secondary index.</source>
          <target state="translated">RethinkDBで結果をページ分割する方法は複数あります。最も簡単な方法は、 &lt;code&gt;skip&lt;/code&gt; と &lt;code&gt;limit&lt;/code&gt; を使用することです（SQLの &lt;code&gt;OFFSET&lt;/code&gt; と &lt;code&gt;LIMIT&lt;/code&gt; が機能する方法に似ています）が、これも最も効率的ではありません。 &lt;code&gt;slice&lt;/code&gt; を使用する方が効率的であり、セカンダリインデックスとの &lt;code&gt;between&lt;/code&gt; で使用する方がさらに効率的です。</target>
        </trans-unit>
        <trans-unit id="e3d0701e5c4ffb4f00017a0efde2655267d62238" translate="yes" xml:space="preserve">
          <source>There are only three useful things you can do with a time: modify it, compare it to another time, or retrieve a portion of it.</source>
          <target state="translated">時間を使ってできる便利なことは、修正する、別の時間と比較する、またはその一部を取り出す、の3つだけです。</target>
        </trans-unit>
        <trans-unit id="20d0f3c1694126ef828f7b9c9046e4cd07be046f" translate="yes" xml:space="preserve">
          <source>There are six optional arguments to &lt;code&gt;changes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;changes&lt;/code&gt; は6つのオプションの引数があります。</target>
        </trans-unit>
        <trans-unit id="3dbdf1c4e79d2810c4de37e0b75ee18a93c58c48" translate="yes" xml:space="preserve">
          <source>There are some limitations and caveats on chaining with changefeeds.</source>
          <target state="translated">チェンジフィードを使ったチェイニングには、いくつかの制限と注意点があります。</target>
        </trans-unit>
        <trans-unit id="9e894103cc8b90a96e8dfc7a000aa22e6638f5e5" translate="yes" xml:space="preserve">
          <source>There are three major sources of memory use in RethinkDB:</source>
          <target state="translated">RethinkDBでメモリを使用する主なソースは3つあります。</target>
        </trans-unit>
        <trans-unit id="6109eedf0d15d10946505da2e66b0a1f37da67ab" translate="yes" xml:space="preserve">
          <source>There are three primary commands for changing sharding and replication in ReQL. In addition, there are lower-level values that can be changed by manipulating &lt;a href=&quot;../system-tables/index&quot;&gt;system tables&lt;/a&gt;.</source>
          <target state="translated">ReQLのシャーディングとレプリケーションを変更するための3つの主要なコマンドがあります。さらに、&lt;a href=&quot;../system-tables/index&quot;&gt;システムテーブルを&lt;/a&gt;操作して変更できる下位レベルの値もあります。</target>
        </trans-unit>
        <trans-unit id="75c7501f6c75b26a129e17d9ac77b7c99d5158a9" translate="yes" xml:space="preserve">
          <source>There are two main methods RethinkDB provides for securing the cluster: TLS encryption for connections, and binding the ports the server uses to specific IP addresses to limit outside connections.</source>
          <target state="translated">RethinkDBがクラスタの安全性を確保するために提供する方法は主に2つあります。接続のためのTLS暗号化と、サーバが使用するポートを特定のIPアドレスにバインドして外部からの接続を制限する方法です。</target>
        </trans-unit>
        <trans-unit id="f665401e538bf2bfb28ca2c473bf66cdb74afaf6" translate="yes" xml:space="preserve">
          <source>There are two optional arguments.</source>
          <target state="translated">2つのオプションの引数があります。</target>
        </trans-unit>
        <trans-unit id="0b88a8c857155f74745bbba8371ea96ca0e6acb6" translate="yes" xml:space="preserve">
          <source>There are two ways a write operation can fail. If a write fails &lt;strong&gt;definitively,&lt;/strong&gt; no read will ever see it, even in the weaker read modes. If it fails &lt;strong&gt;indeterminately,&lt;/strong&gt; reads run in &lt;code&gt;single&lt;/code&gt; or &lt;code&gt;outdated&lt;/code&gt; modes might see it, but when the network failure or crash that caused the problem is resolved the write might or might not be rolled back. In general, writes will fail indeterminately if they were running at the exact moment when the network or server issue first happened. Both of these failures will generate errors, and you can examine the error message to see whether the failure was definitive or indeterminate.</source>
          <target state="translated">書き込み操作が失敗する理由は2つあります。書き込みが&lt;strong&gt;確実に&lt;/strong&gt;失敗した場合、弱い読み取りモードであっても、読み取りはそれを認識しません。&lt;strong&gt;不確定&lt;/strong&gt;に失敗した場合、 &lt;code&gt;single&lt;/code&gt; モードまたは &lt;code&gt;outdated&lt;/code&gt; モードで実行された読み取りで表示されることがありますが、問題の原因となったネットワーク障害またはクラッシュが解決されると、書き込みがロールバックされる場合とされない場合があります。通常、書き込みは、ネットワークまたはサーバーの問題が最初に発生したまさにその時に実行されていた場合、不確定に失敗します。これらの障害はどちらもエラーを生成します。エラーメッセージを調べて、障害が決定的であるか不確定であるかを確認できます。</target>
        </trans-unit>
        <trans-unit id="500288a5784a07d1f133215bca8ff9857c28adf3" translate="yes" xml:space="preserve">
          <source>There are two ways to model relationships between documents in RethinkDB:</source>
          <target state="translated">RethinkDBでドキュメント間のリレーションシップをモデル化するには、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="d694c51ef35209adcd08ccf24e3a25d1dad7f109" translate="yes" xml:space="preserve">
          <source>There is little to no chance of security issues that arise from string injection attacks.</source>
          <target state="translated">文字列インジェクション攻撃でセキュリティ上の問題が発生する可能性はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="40f84b9a87e9e02fe596b7aede64a1239440fef1" translate="yes" xml:space="preserve">
          <source>There is no limitation on the number of posts, so this approach is more suitable for large amounts of data.</source>
          <target state="translated">投稿数に制限はありませんので、大量のデータにはこの方法の方が適しています。</target>
        </trans-unit>
        <trans-unit id="95ebbd6e44279cc8790e0813ade721a8b8cfd992" translate="yes" xml:space="preserve">
          <source>There is no new syntax or new commands for complex queries. Once you understand the composition principle you can write new queries without learning anything else.</source>
          <target state="translated">複雑なクエリのための新しい構文や新しいコマンドはありません。構成原理を理解してしまえば、何も学ばなくても新しいクエリを書くことができます。</target>
        </trans-unit>
        <trans-unit id="539a61fd005fdf182e291c26a8ea7bd3dde87263" translate="yes" xml:space="preserve">
          <source>There is very comprehensive documentation of &lt;a href=&quot;http://nobrainer.io/docs/querying/&quot;&gt;NoBrainer&amp;rsquo;s query language&lt;/a&gt;, and its capabilities. NoBrainer&amp;rsquo;s language is built on top of ReQL, so if you know how to do something in ReQL, it should be straightforward to translate it.</source>
          <target state="translated">&lt;a href=&quot;http://nobrainer.io/docs/querying/&quot;&gt;NoBrainerのクエリ言語&lt;/a&gt;とその機能に関する非常に包括的なドキュメントがあります。NoBrainerの言語はReQLの上に構築されているため、ReQLで何かを行う方法を知っている場合は、それを翻訳するのは簡単です。</target>
        </trans-unit>
        <trans-unit id="00d2e8b7a043983bb177eb54e69c2f80686e3d2a" translate="yes" xml:space="preserve">
          <source>There may be cases where you may trust your users (a mobile Admin tool for RethinkDB, say) and have a driver for it, and directly connect to your server. But in most cases, a webserver is faster, more reliable and way safer.</source>
          <target state="translated">ユーザーを信頼して(例えばRethinkDB用のモバイル管理ツール)、それ用のドライバを用意して、自分のサーバーに直接接続するケースもあるかもしれません。しかし、ほとんどの場合、ウェブサーバの方が速く、信頼性が高く、安全です。</target>
        </trans-unit>
        <trans-unit id="df2ddd5eb9c85f2c5d0c2cdef8e0ff78782ff6a5" translate="yes" xml:space="preserve">
          <source>There will be one issue per name in conflict.</source>
          <target state="translated">1つの名前につき、1つの課題が競合することになります。</target>
        </trans-unit>
        <trans-unit id="65f37cec946cc13932c02805b52c0981c77aac29" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a separate article, &lt;a href=&quot;../table-joins/index&quot;&gt;Table joins in RethinkDB&lt;/a&gt;, with much more information about the multiple-table approach, including how to do the ReQL equivalents of inner, outer and cross joins. If you aren&amp;rsquo;t sure which schema to use, ask us on &lt;a href=&quot;http://stackoverflow.com/questions/ask&quot;&gt;Stack Overflow&lt;/a&gt; or join the &lt;code&gt;#rethinkdb&lt;/code&gt; IRC channel on &lt;a href=&quot;http://www.freenode.org/&quot;&gt;Freenode&lt;/a&gt;.</source>
          <target state="translated">別の記事「&lt;a href=&quot;../table-joins/index&quot;&gt;RethinkDB&lt;/a&gt;でのテーブル結合」があり、内部結合、外部結合、クロス結合のReQLと同等の方法を含む、複数テーブルのアプローチに関する詳細情報があります。使用するスキーマがわからない場合は、&lt;a href=&quot;http://stackoverflow.com/questions/ask&quot;&gt;Stack Overflow&lt;/a&gt;で質問するか、&lt;a href=&quot;http://www.freenode.org/&quot;&gt;Freenodeの&lt;/a&gt; &lt;code&gt;#rethinkdb&lt;/code&gt; IRCチャネルに参加してください。</target>
        </trans-unit>
        <trans-unit id="255b3e7dcb8b478414bde749509dfb707e256261" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also the &lt;a href=&quot;../../../api/javascript/during/index&quot;&gt;during&lt;/a&gt; command, which can check whether a time is in a particular range of times.</source>
          <target state="translated">時刻が特定の時刻範囲にあるかどうかを確認できる&lt;a href=&quot;../../../api/javascript/during/index&quot;&gt;during&lt;/a&gt;コマンドもあります。</target>
        </trans-unit>
        <trans-unit id="309e4b22505e880972a173dadd6710f8768bb239" translate="yes" xml:space="preserve">
          <source>These can be executed in the Data Explorer to try out RethinkDB&amp;rsquo;s geospatial support.</source>
          <target state="translated">これらをデータエクスプローラーで実行して、RethinkDBの地理空間サポートを試すことができます。</target>
        </trans-unit>
        <trans-unit id="e8c3ca286bcb01488ff4b1b7840f17718d02289a" translate="yes" xml:space="preserve">
          <source>These drivers have been updated to use the JSON driver protocol and at least RethinkDB 2.0 ReQL.</source>
          <target state="translated">これらのドライバは、JSONドライバのプロトコルと、少なくともRethinkDB 2.0 ReQLを使用するように更新されています。</target>
        </trans-unit>
        <trans-unit id="7390fee221f918304e3f706816a48b3e50189077" translate="yes" xml:space="preserve">
          <source>These drivers may not support all of RethinkDB 2.0's ReQL. However, if you wish to work with one of these languages, they may provide a good starting point.</source>
          <target state="translated">これらのドライバは、RethinkDB 2.0のReQLのすべてをサポートしているわけではありません。しかし、これらの言語のいずれかを使用したい場合は、これらのドライバが良い出発点になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="b8830b150e94f8e0e7316103afc9f8c34e10bcc8" translate="yes" xml:space="preserve">
          <source>These entries represent queries issued by a specific client.</source>
          <target state="translated">これらのエントリは、特定のクライアントによって発行されたクエリを表します。</target>
        </trans-unit>
        <trans-unit id="27d43bcbccbfa2aa21ba9dc356bde61777eca619" translate="yes" xml:space="preserve">
          <source>These evaluate to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これらは &lt;code&gt;false&lt;/code&gt; と評価されます。</target>
        </trans-unit>
        <trans-unit id="7dd8a76f2353c0d03a4bba453817d515bf5b73aa" translate="yes" xml:space="preserve">
          <source>These examples use Python, but there&amp;rsquo;s equivalent functionality in Ruby, and any other scripting language with a RethinkDB driver updated for version 1.16 or later. Read the API documentation for more information on specific commands along with descriptions of their return values.</source>
          <target state="translated">これらの例ではPythonを使用していますが、Rubyには同等の機能があり、RethinkDBドライバーがバージョン1.16以降に更新された他のスクリプト言語もあります。特定のコマンドの詳細とその戻り値の説明については、APIドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="bb99d9acc915cf6020285f96009c8736af483471" translate="yes" xml:space="preserve">
          <source>These may be specified as startup options to &lt;code&gt;rethinkdb&lt;/code&gt; or in the configuration file.</source>
          <target state="translated">これらは、 &lt;code&gt;rethinkdb&lt;/code&gt; の起動オプションとして、または構成ファイルで指定できます。</target>
        </trans-unit>
        <trans-unit id="dd1553d3431a9387915caf2bdf00cc7d8566a157" translate="yes" xml:space="preserve">
          <source>These options can be passed to the &lt;code&gt;rethinkdb&lt;/code&gt; server on the command line on startup. Many of these options can also be set in the configuration file; read &lt;a href=&quot;../config-file/index&quot;&gt;Configuration file options&lt;/a&gt; for a detailed list.</source>
          <target state="translated">これらのオプションは、起動時にコマンドラインで &lt;code&gt;rethinkdb&lt;/code&gt; サーバーに渡すことができます。これらのオプションの多くは、構成ファイルでも設定できます。詳細なリストについては、&lt;a href=&quot;../config-file/index&quot;&gt;構成ファイルのオプション&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="defbae41e4dfdca69a6819f0816da9b76a0d3ef9" translate="yes" xml:space="preserve">
          <source>These tasks cannot be performed through the web interface.</source>
          <target state="translated">これらの作業は、Web インターフェイスを介して実行することはできません。</target>
        </trans-unit>
        <trans-unit id="98980261bf21bdc07626834d6ab2bd419f725534" translate="yes" xml:space="preserve">
          <source>These tasks construct secondary indexes in the background. The &lt;code&gt;progress&lt;/code&gt; field is a number between 0 and 1 indicating how far along the index construction task is.</source>
          <target state="translated">これらのタスクは、バックグラウンドでセカンダリインデックスを構築します。 &lt;code&gt;progress&lt;/code&gt; フィールドは0から1までの数値で、インデックス構築タスクの進行状況を示します。</target>
        </trans-unit>
        <trans-unit id="fa32730d8deba25793d975fc9ca7bd1549b1e9a2" translate="yes" xml:space="preserve">
          <source>These will be numeric values, corresponding to the types in &lt;code&gt;ql2.proto&lt;/code&gt;.</source>
          <target state="translated">これらは、 &lt;code&gt;ql2.proto&lt;/code&gt; のタイプに対応する数値になります。</target>
        </trans-unit>
        <trans-unit id="86ea5ad3004c53aee816959f875903b54616b1e0" translate="yes" xml:space="preserve">
          <source>They allow clients to receive changes on a table, a single document, or even the results from a specific query as they happen. Nearly any ReQL query can be turned into a changefeed.</source>
          <target state="translated">これにより、クライアントはテーブル、単一のドキュメント、または特定のクエリの結果の変更を、発生した時点で受け取ることができます。ほぼすべてのReQLクエリをチェンジフィードに変えることができます。</target>
        </trans-unit>
        <trans-unit id="a73949fe5d7b6f10bad43de1b54b4ab3f1ca5501" translate="yes" xml:space="preserve">
          <source>Third-party admin tools</source>
          <target state="translated">サードパーティの管理ツール</target>
        </trans-unit>
        <trans-unit id="b72113e83e7d2971aadeb613ad353fd5b1504f55" translate="yes" xml:space="preserve">
          <source>Third-party administration tools</source>
          <target state="translated">サードパーティ管理ツール</target>
        </trans-unit>
        <trans-unit id="48032cfdd12c4e4801fb63f5130f887114e864cd" translate="yes" xml:space="preserve">
          <source>Third-party deployment tools</source>
          <target state="translated">サードパーティ製のデプロイメントツール</target>
        </trans-unit>
        <trans-unit id="cd38f46529ac3ba0f37dc5014c00e6b8d7818624" translate="yes" xml:space="preserve">
          <source>Third-party libraries</source>
          <target state="translated">サードパーティライブラリ</target>
        </trans-unit>
        <trans-unit id="9fe57a3efac3522bd52f774f6fbbf29694109b1a" translate="yes" xml:space="preserve">
          <source>Thirty-second quickstart</source>
          <target state="translated">30秒クイックスタート</target>
        </trans-unit>
        <trans-unit id="6904ea0735b3e37923321c865579d4c8314dc798" translate="yes" xml:space="preserve">
          <source>Thirty-second quickstart with RethinkDB</source>
          <target state="translated">RethinkDBの30秒クイックスタート</target>
        </trans-unit>
        <trans-unit id="1a3e4a37762f6f18b5db37b31335d439c9579506" translate="yes" xml:space="preserve">
          <source>This allows the &lt;code&gt;user_data&lt;/code&gt; field to contain any legal JSON value, while &lt;code&gt;name&lt;/code&gt; must still be a valid string.</source>
          <target state="translated">これにより、 &lt;code&gt;user_data&lt;/code&gt; フィールドに有効なJSON値を含めることができますが、 &lt;code&gt;name&lt;/code&gt; は有効な文字列である必要があります。</target>
        </trans-unit>
        <trans-unit id="f21998ea5369dd7c67fc23e4127c7487fa1fb7d8" translate="yes" xml:space="preserve">
          <source>This article will explain how to use repubsub, as well as describe how it&amp;rsquo;s implemented on top of changefeeds. If your application needs asynchronous broadcast notifications, this may be a good fit.</source>
          <target state="translated">この記事では、repubsubの使用方法と、変更フィード上での実装方法について説明します。アプリケーションで非同期ブロードキャスト通知が必要な場合は、これが適している可能性があります。</target>
        </trans-unit>
        <trans-unit id="4ab295b90534ae1ba62c82bb793079aab7adfbee" translate="yes" xml:space="preserve">
          <source>This asserts that a topic exchange named &amp;ldquo;rethinkdb&amp;rdquo; exists, and that it&amp;rsquo;s set to be non-durable. If the exchange doesn&amp;rsquo;t exist, it&amp;rsquo;ll be created. If it does exist and has different properties, an exception will occur. Being non-durable means it won&amp;rsquo;t persist across RabbitMQ restarts (this is the default).</source>
          <target state="translated">これは、「rethinkdb」という名前のトピック交換が存在し、永続的でないように設定されていることを示しています。エクスチェンジが存在しない場合は作成されます。存在し、プロパティが異なる場合は、例外が発生します。非耐久性であることは、RabbitMQの再起動後も持続しないことを意味します（これがデフォルトです）。</target>
        </trans-unit>
        <trans-unit id="b512cd11bbaeb824c3cf95df0ce1530e7c842ef2" translate="yes" xml:space="preserve">
          <source>This behavior is similar to any other safe database system. Below is a number of steps you can take to speed up insert performance in RethinkDB. Most of these guidelines will also apply to other database systems.</source>
          <target state="translated">この動作は、他の安全なデータベースシステムと同様です。以下に、RethinkDBでの挿入パフォーマンスを高速化するためのいくつかのステップを示します。これらのガイドラインのほとんどは、他のデータベースシステムにも適用されます。</target>
        </trans-unit>
        <trans-unit id="82fcad98e3ebc81b03b92fbcbc2a0eb46d0e10a1" translate="yes" xml:space="preserve">
          <source>This behavior may change in the future. See &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/3992&quot;&gt;Github issue #3992&lt;/a&gt; to track the discussion.</source>
          <target state="translated">この動作は将来変更される可能性があります。ディスカッションを追跡するには、&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/3992&quot;&gt;Github issue＃3992&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7d333bc0db0fbff976dd318e4e97606ee1df8cf3" translate="yes" xml:space="preserve">
          <source>This can also be used to implement a check-and-set register. The following query will atomically check whether the &lt;code&gt;check&lt;/code&gt; field is equal to &lt;code&gt;old_value&lt;/code&gt; and change it to &lt;code&gt;new_value&lt;/code&gt; if so:</source>
          <target state="translated">これは、チェックアンドセットレジスタの実装にも使用できます。次のクエリは、 &lt;code&gt;check&lt;/code&gt; フィールドが &lt;code&gt;old_value&lt;/code&gt; と等しいかどうかをアトミックにチェックし、等しい場合はそれを &lt;code&gt;new_value&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="136a95a3ef0f44b9424d790086bf559ff51f2e02" translate="yes" xml:space="preserve">
          <source>This can be accomplished with &lt;a href=&quot;../has_fields/index&quot;&gt;hasFields&lt;/a&gt; rather than &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;default&lt;/code&gt; ではなく&lt;a href=&quot;../has_fields/index&quot;&gt;hasFields&lt;/a&gt;で実現できます。</target>
        </trans-unit>
        <trans-unit id="2b17f23ecff1b552fca7bbe53044ccbc70aab57b" translate="yes" xml:space="preserve">
          <source>This can be useful for diagnostic purposes, as well as for filing bug reports. The easiest way to do this is with ReQL administration commands. Any individual table can be examined with &lt;code&gt;r.db('rethinkdb').table(&amp;lt;tablename&amp;gt;)&lt;/code&gt;.</source>
          <target state="translated">これは、診断目的だけでなく、バ​​グレポートの提出にも役立ちます。これを行う最も簡単な方法は、ReQL管理コマンドを使用することです。個々のテーブルは &lt;code&gt;r.db('rethinkdb').table(&amp;lt;tablename&amp;gt;)&lt;/code&gt; で調べることができます。</target>
        </trans-unit>
        <trans-unit id="7b760ab6137a0cc22bc121651c12690aaf060622" translate="yes" xml:space="preserve">
          <source>This can be useful if you want to search documents by multiple criteria at the same time, like messages posted in a forum that should be identifiable by:</source>
          <target state="translated">これは、フォーラムに投稿されたメッセージのように、複数の条件で同時に文書を検索したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="1a7170a0990392d256fa8b900732204b463019e8" translate="yes" xml:space="preserve">
          <source>This change won&amp;rsquo;t take effect until you reboot. You can change it while the system is still running, also:</source>
          <target state="translated">この変更は、再起動するまで有効になりません。システムの実行中に変更することもできます。</target>
        </trans-unit>
        <trans-unit id="25b50bdea1677bf9f3cc6cf1c8fe6526f3ee4558" translate="yes" xml:space="preserve">
          <source>This command will export all your data to a &lt;code&gt;tar.gz&lt;/code&gt; file named &lt;code&gt;rethinkdb_dump_&amp;lt;timestamp&amp;gt;.tar.gz&lt;/code&gt; (this may vary depending on your platform).</source>
          <target state="translated">このコマンドは、すべてのデータを &lt;code&gt;rethinkdb_dump_&amp;lt;timestamp&amp;gt;.tar.gz&lt;/code&gt; という名前の &lt;code&gt;tar.gz&lt;/code&gt; ファイルにエクスポートします（これはプラットフォームによって異なる場合があります）。</target>
        </trans-unit>
        <trans-unit id="de554f35b082125ac3ff33b85f9132341445f97f" translate="yes" xml:space="preserve">
          <source>This document describes how to start RethinkDB from the command line in several configurations, from a single instance on one machine to multiple instances on multiple machines.</source>
          <target state="translated">このドキュメントでは、1台のマシンに1つのインスタンスから複数のマシンに複数のインスタンスまで、いくつかの構成でコマンドラインからRethinkDBを起動する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="884a0999d1995cf78ebbbf8b08f0bb1e21cc671c" translate="yes" xml:space="preserve">
          <source>This document explains how to set up RethinkDB to run as a system service on supported operating systems, automatically launching on boot. For general instructions on starting RethinkDB, see &lt;a href=&quot;../start-a-server/index&quot;&gt;Start a RethinkDB server&lt;/a&gt;.</source>
          <target state="translated">このドキュメントでは、サポートされているオペレーティングシステムでシステムサービスとして実行され、ブート時に自動的に起動するようにRethinkDBを設定する方法について説明します。RethinkDBを&lt;a href=&quot;../start-a-server/index&quot;&gt;起動する&lt;/a&gt;一般的な手順については、「RethinkDBサーバーを起動する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5e112ab270acffb2e520b045d4086e0a4758065b" translate="yes" xml:space="preserve">
          <source>This example in the Data Explorer demonstrates sorting mixed types:</source>
          <target state="translated">データ エクスプローラのこの例では、混合型のソートを実演しています。</target>
        </trans-unit>
        <trans-unit id="f60ec41c0244bc4bf79f1ba740c162008674fd3a" translate="yes" xml:space="preserve">
          <source>This example renames the field &lt;code&gt;id&lt;/code&gt; to &lt;code&gt;userId&lt;/code&gt; when retrieving documents from the table &lt;code&gt;users&lt;/code&gt;.</source>
          <target state="translated">この例では、テーブル &lt;code&gt;users&lt;/code&gt; からドキュメントを取得するときに、フィールド &lt;code&gt;id&lt;/code&gt; 名前を &lt;code&gt;userId&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="05d221d0dc27530f067ff5358c8a277dc571c798" translate="yes" xml:space="preserve">
          <source>This grant can only be given on a global level.</source>
          <target state="translated">この助成金は、世界レベルでのみ与えられます。</target>
        </trans-unit>
        <trans-unit id="badcd4b2105b2f046863005ef03daa5e931fc0ec" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;required&lt;/em&gt; if you&amp;rsquo;re upgrading from versions before 1.16; in those cases, you&amp;rsquo;ll need to upgrade to version 2.0.5 first. (You can download 2.0.5 and other older versions at RethinkDB&amp;rsquo;s &lt;a href=&quot;http://download.rethinkdb.com&quot;&gt;download archive&lt;/a&gt;). If you&amp;rsquo;re upgrading from RethinkDB version 1.16 or later, you can move to 2.2 or higher directly.</source>
          <target state="translated">これはされて&lt;em&gt;必要な&lt;/em&gt;あなたが1.16より前のバージョンからのアップグレードをしている場合。そのような場合は、まずバージョン2.0.5にアップグレードする必要があります。（RethinkDBの&lt;a href=&quot;http://download.rethinkdb.com&quot;&gt;ダウンロードアーカイブ&lt;/a&gt;で2.0.5およびその他の古いバージョンをダウンロードできます）。RethinkDBバージョン1.16以降からアップグレードする場合は、直接2.2以降に移行できます。</target>
        </trans-unit>
        <trans-unit id="5d7cb5b5a818dc9d4e6d2f3dc0e2a0e00187499d" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;required&lt;/em&gt; if you&amp;rsquo;re upgrading from versions before 1.16; in those cases, you&amp;rsquo;ll need to upgrade to version 2.0.5 first. (You can download 2.0.5 and other older versions at RethinkDB&amp;rsquo;s &lt;a href=&quot;https://download.rethinkdb.com&quot;&gt;download archive&lt;/a&gt;). If you&amp;rsquo;re upgrading from RethinkDB version 1.16 or later, you can move to 2.2 or higher directly.</source>
          <target state="translated">これはされて&lt;em&gt;必要な&lt;/em&gt;あなたが1.16より前のバージョンからのアップグレードをしている場合。そのような場合は、最初にバージョン2.0.5にアップグレードする必要があります。（2.0.5およびその他の古いバージョンはRethinkDBの&lt;a href=&quot;https://download.rethinkdb.com&quot;&gt;ダウンロードアーカイブでダウンロードできます&lt;/a&gt;）。RethinkDBバージョン1.16以降からアップグレードする場合は、2.2以降に直接移行できます。</target>
        </trans-unit>
        <trans-unit id="7690a03a80d488dfd784992d260be51267e9cf4b" translate="yes" xml:space="preserve">
          <source>This is a list of commands for updating data in the database.</source>
          <target state="translated">データベース内のデータを更新するためのコマンドの一覧です。</target>
        </trans-unit>
        <trans-unit id="4094879dcd891fd3d505701f441b8c1edcdeb065" translate="yes" xml:space="preserve">
          <source>This is a list of queries for creating and dropping tables and databases.</source>
          <target state="translated">テーブルやデータベースを作成・削除するためのクエリの一覧です。</target>
        </trans-unit>
        <trans-unit id="66b57e4c31062f253f74d06daaee496d81b79de2" translate="yes" xml:space="preserve">
          <source>This is a list of queries for deleting data from the database.</source>
          <target state="translated">データベースからデータを削除するためのクエリの一覧です。</target>
        </trans-unit>
        <trans-unit id="9db9a6dffeb553d1c76935d872aff66778ce1499" translate="yes" xml:space="preserve">
          <source>This is a list of queries for inserting data into a database.</source>
          <target state="translated">データベースにデータを挿入するためのクエリの一覧です。</target>
        </trans-unit>
        <trans-unit id="24cb2d221d2ccf3805e7df7390075b15277b1ff8" translate="yes" xml:space="preserve">
          <source>This is a list of queries for performing data aggregation.</source>
          <target state="translated">データ集計を行うためのクエリの一覧です。</target>
        </trans-unit>
        <trans-unit id="57255ff40e07d35053520b96ede5ad2090e4b64c" translate="yes" xml:space="preserve">
          <source>This is a list of queries for performing joins between multiple tables.</source>
          <target state="translated">複数のテーブル間の結合を実行するためのクエリのリストです。</target>
        </trans-unit>
        <trans-unit id="61a4e6ed605b06ae73e9999bd507404c4f0f7b89" translate="yes" xml:space="preserve">
          <source>This is a list of queries for selecting data out of a database.</source>
          <target state="translated">データベースからデータを選択するためのクエリの一覧です。</target>
        </trans-unit>
        <trans-unit id="c950bfcba327ffdf5a9d2f1ecf0f9730e6174c18" translate="yes" xml:space="preserve">
          <source>This is a typical document schema for a server connected to the host server&amp;mdash;that is, the server the client&amp;rsquo;s connecting to when they query the &lt;code&gt;server_status&lt;/code&gt; table.</source>
          <target state="translated">これは、ホストサーバーに接続されたサーバー（つまり、クライアントが &lt;code&gt;server_status&lt;/code&gt; テーブルを照会するときにクライアントが接続するサーバー）の典型的なドキュメントスキーマです。</target>
        </trans-unit>
        <trans-unit id="495c13e74882e8a9b4dbc7d70144d347e8f36bb0" translate="yes" xml:space="preserve">
          <source>This is an ongoing task on each server, compacting RethinkDB&amp;rsquo;s storage space in the background. The &lt;code&gt;duration_sec&lt;/code&gt; field will always be &lt;code&gt;null&lt;/code&gt;, and there is no extra information metadata.</source>
          <target state="translated">これは各サーバーで進行中のタスクであり、バックグラウンドでRethinkDBのストレージスペースを圧縮します。 &lt;code&gt;duration_sec&lt;/code&gt; フィールドは常になり &lt;code&gt;null&lt;/code&gt; 、および余分な情報のメタデータがありません。</target>
        </trans-unit>
        <trans-unit id="744bd55da05671572fd0681cdeaea849a2d47d17" translate="yes" xml:space="preserve">
          <source>This is an overview of the system. For more details, consult the API documentation for individual geospatial commands.</source>
          <target state="translated">これはシステムの概要です。詳細については、個々の地理空間コマンドのAPIドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9df7168c66a6de94c891ac3113c4fa363d86ea95" translate="yes" xml:space="preserve">
          <source>This is analogous to using &lt;strong&gt;apply&lt;/strong&gt; in JavaScript. (However, note that &lt;code&gt;args&lt;/code&gt; evaluates all its arguments before passing them into the parent term, even if the parent term otherwise allows lazy evaluation.)</source>
          <target state="translated">これは、JavaScriptでの&lt;strong&gt;applyの&lt;/strong&gt;使用に似ています。（ただし、親の項で遅延評価が許可されている場合でも、 &lt;code&gt;args&lt;/code&gt; は引数をすべて親の項に渡す前にその引数を評価することに注意してください。）</target>
        </trans-unit>
        <trans-unit id="e6bc537c2149375b9bb8ea0948f4cb1e620a73ea" translate="yes" xml:space="preserve">
          <source>This is based on an example from &lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/map-reduce-examples/&quot;&gt;MongoDB&lt;/a&gt;. Imagine a table of orders, with each document in the table structured like this:</source>
          <target state="translated">これは、&lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/map-reduce-examples/&quot;&gt;MongoDBの&lt;/a&gt;例に基づいています。注文のテーブルを想像してください。テーブル内の各ドキュメントは次のように構成されています。</target>
        </trans-unit>
        <trans-unit id="55687884bd6d8ee24ca5745c354a05190fdf9d33" translate="yes" xml:space="preserve">
          <source>This is equivalent to calling &lt;code&gt;SELECT name, age FROM users&lt;/code&gt; in SQL.</source>
          <target state="translated">これは、SQLで &lt;code&gt;SELECT name, age FROM users&lt;/code&gt; を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="7fda8e7fa70fba551ec9a5ec7d7a2bfb32969507" translate="yes" xml:space="preserve">
          <source>This is equivalent to using the &lt;code&gt;db&lt;/code&gt; command to specify the database:</source>
          <target state="translated">これは、 &lt;code&gt;db&lt;/code&gt; コマンドを使用してデータベースを指定するのと同じです。</target>
        </trans-unit>
        <trans-unit id="d3bb2a306948c13f0ac184c0266661dd1de824fb" translate="yes" xml:space="preserve">
          <source>This is the alphabetical order of their type name as returned by the &lt;code&gt;typeOf()&lt;/code&gt; command. (Binary objects, geometry objects and times are &amp;ldquo;pseudotypes,&amp;rdquo; and return &lt;code&gt;PTYPE&amp;lt;BINARY&amp;gt;&lt;/code&gt;, &lt;code&gt;PTYPE&amp;lt;GEOMETRY&amp;gt;&lt;/code&gt; and &lt;code&gt;PTYPE&amp;lt;TIME&amp;gt;&lt;/code&gt;, respectively.)</source>
          <target state="translated">これは、 &lt;code&gt;typeOf()&lt;/code&gt; コマンドによって返されるタイプ名のアルファベット順です。（バイナリオブジェクト、ジオメトリオブジェクト、および時間は「 &lt;code&gt;PTYPE&amp;lt;BINARY&amp;gt;&lt;/code&gt; 」であり、それぞれPTYPE &amp;lt;BINARY&amp;gt;、 &lt;code&gt;PTYPE&amp;lt;GEOMETRY&amp;gt;&lt;/code&gt; および &lt;code&gt;PTYPE&amp;lt;TIME&amp;gt;&lt;/code&gt; を返します。）</target>
        </trans-unit>
        <trans-unit id="e85848e3ad69e8a64cb4101d0c2be64cba8259e9" translate="yes" xml:space="preserve">
          <source>This is the equivalent of the following:</source>
          <target state="translated">に相当します。</target>
        </trans-unit>
        <trans-unit id="3c3b90ecc4bbe7e0c4ecc1bb9f83e2950a385f51" translate="yes" xml:space="preserve">
          <source>This issue will appear at most once for each server.</source>
          <target state="translated">この問題は、各サーバーごとに最大1回発生します。</target>
        </trans-unit>
        <trans-unit id="77ccacb7783df82d612f51e347348c7a7db7d8ce" translate="yes" xml:space="preserve">
          <source>This issue will appear at most once for each table.</source>
          <target state="translated">この問題は、各テーブルごとに最大1回表示されます。</target>
        </trans-unit>
        <trans-unit id="747341dedcda6a869995253b4dbc7ba5a4018242" translate="yes" xml:space="preserve">
          <source>This issue will only appear in the &lt;code&gt;current_issues&lt;/code&gt; table once&amp;mdash;check the &lt;code&gt;info&lt;/code&gt; field for the tables and indexes it affects.</source>
          <target state="translated">この問題は、 &lt;code&gt;current_issues&lt;/code&gt; テーブルで1回だけ発生します。影響を受けるテーブルとインデックスの &lt;code&gt;info&lt;/code&gt; フィールドを確認してください。</target>
        </trans-unit>
        <trans-unit id="5ebc8aa4d2f21780ed5017f2917975404a143a19" translate="yes" xml:space="preserve">
          <source>This just creates a new &lt;code&gt;Comment&lt;/code&gt; and associates it with the current &lt;code&gt;Article&lt;/code&gt;, rather than using the &lt;code&gt;build&lt;/code&gt; method.</source>
          <target state="translated">これは、 &lt;code&gt;build&lt;/code&gt; メソッドを使用するのではなく、新しい &lt;code&gt;Comment&lt;/code&gt; を作成して現在の &lt;code&gt;Article&lt;/code&gt; に関連付けるだけです。</target>
        </trans-unit>
        <trans-unit id="0461d690717cd0e6df210318899cac20104d6444" translate="yes" xml:space="preserve">
          <source>This may also be specified in the &lt;a href=&quot;http://rethinkdb.com/docs/cluster-on-startup/&quot;&gt;config file&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;http://rethinkdb.com/docs/cluster-on-startup/&quot;&gt;設定ファイル&lt;/a&gt;でも指定できます。</target>
        </trans-unit>
        <trans-unit id="2227c47b8b5a4f6a718999ee7cef861b0123236c" translate="yes" xml:space="preserve">
          <source>This may show you messages similar to this:</source>
          <target state="translated">これと似たようなメッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="26ab6e368431d7927f2a04b793ec9f220536744c" translate="yes" xml:space="preserve">
          <source>This means that every read will see every previous successful write, and no read will ever see a definitively failed write. (See note about definitively failed vs. indeterminate writes below.)</source>
          <target state="translated">これは、すべての読み出しには、以前に成功した書き込みがすべて表示され、どの読み出しにも決定的に失敗した書き込みは表示されないことを意味します。(後述する、決定的に失敗した書き込みと不確定な書き込みについての注意事項を参照してください)。</target>
        </trans-unit>
        <trans-unit id="6116a33e3ee4eebf769e234ae37a3a28895b7e1c" translate="yes" xml:space="preserve">
          <source>This message indicates there are currently servers that cannot see every server in the cluster. This may cause table availability issues. It can be resolved by restoring full connectivity.</source>
          <target state="translated">このメッセージは、現在クラスタ内のすべてのサーバーを見ることができないサーバーがあることを示しています。これにより、テーブルの可用性の問題が発生する可能性があります。完全な接続性を復元することで解決できます。</target>
        </trans-unit>
        <trans-unit id="b6c5c2546366708a269614bdd6393853b3b25fd1" translate="yes" xml:space="preserve">
          <source>This message is a warning that a &lt;a href=&quot;https://en.wikipedia.org/wiki/Paging&quot;&gt;page fault&lt;/a&gt; has occurred on a RethinkDB server and swap space is being used. Under Linux, this message will only appear if a RethinkDB process has started paging memory; under OS X, it will appear when &lt;em&gt;any&lt;/em&gt; process is paging. The Windows version of RethinkDB cannot detect when paging occurs.</source>
          <target state="translated">このメッセージは、RethinkDBサーバーで&lt;a href=&quot;https://en.wikipedia.org/wiki/Paging&quot;&gt;ページ違反&lt;/a&gt;が発生し、スワップ領域が使用されていることを示す警告です。Linuxでは、このメッセージはRethinkDBプロセスがメモリのページングを開始した場合にのみ表示されます。OS Xでは、プロセスがページングしているときに表示され&lt;em&gt;ます&lt;/em&gt;。WindowsバージョンのRethinkDBでは、ページングが発生したことを検出できません。</target>
        </trans-unit>
        <trans-unit id="5d4bf8bcc88e1e23ef0b9f22469b4f4fd3e521e9" translate="yes" xml:space="preserve">
          <source>This mode is &lt;strong&gt;not as safe&lt;/strong&gt; as the default hard durability mode. If you&amp;rsquo;re writing using soft durability, a few seconds worth of data might be lost in case of power failure.</source>
          <target state="translated">このモードは、デフォルトのハード耐久性モード&lt;strong&gt;ほど安全で&lt;/strong&gt;はあり&lt;strong&gt;ません&lt;/strong&gt;。ソフト耐久性を使用して書き込みを行っている場合、停電が発生すると数秒分のデータが失われる可能性があります。</target>
        </trans-unit>
        <trans-unit id="03bae79890f9931111f7596cfde45eef26137817" translate="yes" xml:space="preserve">
          <source>This object is not a connection, but a cursor. To retrieve the results, you can call &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;each&lt;/code&gt; or &lt;code&gt;toArray&lt;/code&gt; on this object.</source>
          <target state="translated">このオブジェクトは接続ではなく、カーソルです。結果を取得するには、このオブジェクトで &lt;code&gt;next&lt;/code&gt; 、 &lt;code&gt;each&lt;/code&gt; 、または &lt;code&gt;toArray&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3c94199271f50662dc6a036ee949c151bf137f34" translate="yes" xml:space="preserve">
          <source>This opens up the possibility of notifying client applications immediately when a change occurs in a table. For real-time applications, this push behavior is essential.</source>
          <target state="translated">これにより、テーブルに変更が発生したときにクライアントアプリケーションに即座に通知することが可能になります。リアルタイムアプリケーションでは、このプッシュ動作が不可欠です。</target>
        </trans-unit>
        <trans-unit id="003d171c060f2713ec6326d898756333da62b72f" translate="yes" xml:space="preserve">
          <source>This option creates a random password for that server&amp;rsquo;s &lt;code&gt;admin&lt;/code&gt; account. Once that server is synchronized with the cluster, the random password will be overwritten by the &lt;code&gt;admin&lt;/code&gt; password, preventing the exploit described above.</source>
          <target state="translated">このオプションは、そのサーバーの &lt;code&gt;admin&lt;/code&gt; アカウントのランダムなパスワードを作成します。そのサーバーがクラスターと同期されると、ランダムパスワードは &lt;code&gt;admin&lt;/code&gt; パスワードによって上書きされ、上記の悪用が防止されます。</target>
        </trans-unit>
        <trans-unit id="35f047d23d5560efaf4283d83fa25adfdafd890c" translate="yes" xml:space="preserve">
          <source>This particular example simply returns the error message, so it isn&amp;rsquo;t very useful. But it would be possible to change the default value based on the specific error message thrown.</source>
          <target state="translated">この特定の例はエラーメッセージを返すだけなので、あまり役に立ちません。ただし、スローされた特定のエラーメッセージに基づいてデフォルト値を変更することは可能です。</target>
        </trans-unit>
        <trans-unit id="713c8d0837ca1d19105b3bc382212f39c5333371" translate="yes" xml:space="preserve">
          <source>This query can be rewritten with the &lt;code&gt;each&lt;/code&gt; command:</source>
          <target state="translated">このクエリは、 &lt;code&gt;each&lt;/code&gt; コマンドで書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="bd2d49b6729659af5432ba9236e6221e72845b7c" translate="yes" xml:space="preserve">
          <source>This query joins the &lt;code&gt;company_id&lt;/code&gt; of the employee table with the primary key of the company table. It returns a sequence of documents where each document contains two fields&amp;mdash;the employee information and the company information:</source>
          <target state="translated">このクエリは、employeeテーブルの &lt;code&gt;company_id&lt;/code&gt; をcompanyテーブルの主キーと結合します。一連のドキュメントを返します。各ドキュメントには、従業員情報と会社情報の2つのフィールドが含まれています。</target>
        </trans-unit>
        <trans-unit id="612f4e9545d8bc014df5735c54ea0dbe678cc103" translate="yes" xml:space="preserve">
          <source>This query looks just like any other Python code you would normally write. Note that RethinkDB will execute this query on the server, and it doesn&amp;rsquo;t execute native Python code.</source>
          <target state="translated">このクエリは、通常作成する他のPythonコードと同じように見えます。RethinkDBはサーバー上でこのクエリを実行し、ネイティブPythonコードは実行しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="dd03b43a9a0662e67f4621af412284eaccf6bc7d" translate="yes" xml:space="preserve">
          <source>This query makes a call to GitHub and returns an array of JSON documents. RethinkDB natively operates on JSON, and what&amp;rsquo;s really convenient about &lt;code&gt;r.http&lt;/code&gt; is that its output is no different from any other query. You can use ReQL commands to perform operations on the output of &lt;code&gt;r.http&lt;/code&gt;, just like on a standard RethinkDB table!</source>
          <target state="translated">このクエリはGitHubを呼び出し、JSONドキュメントの配列を返します。RethinkDBはJSONでネイティブに動作します。r.httpの本当に便利な &lt;code&gt;r.http&lt;/code&gt; は、その出力が他のクエリと変わらないことです。ReQLコマンドを使用して、標準のRethinkDBテーブルと同様に、 &lt;code&gt;r.http&lt;/code&gt; の出力に対して操作を実行できます。</target>
        </trans-unit>
        <trans-unit id="c1ed5db3f58d8d8a4a7b6fd0156d19d27037316d" translate="yes" xml:space="preserve">
          <source>This query pulls out &lt;code&gt;new_val&lt;/code&gt; from the changefeed, and passes just the topic field from the new value down to the subscriber&amp;rsquo;s function.</source>
          <target state="translated">このクエリは、 &lt;code&gt;new_val&lt;/code&gt; からnew_valを引き出し、トピックフィールドだけを新しい値からサブスクライバーの関数に渡します。</target>
        </trans-unit>
        <trans-unit id="0504572bb7932c5f61e74e74594395b17470a17e" translate="yes" xml:space="preserve">
          <source>This query returns a cursor with one document&amp;mdash;the record for William Adama. The &lt;code&gt;filter&lt;/code&gt; command evaluates the provided condition for every row in the table, and returns only the relevant rows. Here&amp;rsquo;s the new commands we used to construct the condition above:</source>
          <target state="translated">このクエリは、1つのドキュメント（William Adamaのレコード）を含むカーソルを返します。 &lt;code&gt;filter&lt;/code&gt; コマンドは、テーブルのすべての行のために提供条件を評価し、そしてのみ関連する行を返します。上記の条件を作成するために使用した新しいコマンドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d6039c10afb25b25847b1d9787b22376a9ca0b91" translate="yes" xml:space="preserve">
          <source>This range includes all compound keys:</source>
          <target state="translated">この範囲には、すべての複合キーが含まれています。</target>
        </trans-unit>
        <trans-unit id="7b1dd23beb1a551a08393d66db64399a66756207" translate="yes" xml:space="preserve">
          <source>This report describes a recent effort that the RethinkDB team took to measure our database product, RethinkDB, under different workloads and in different clustering configurations. We seek to provide a general overview of RethinkDB&amp;rsquo;s performance metrics for a variety of workloads and potential use cases. In this report some of the questions we&amp;rsquo;ll address include:</source>
          <target state="translated">このレポートでは、RethinkDBチームがデータベース製品RethinkDBをさまざまなワークロードとさまざまなクラスタリング構成で測定するために行った最近の取り組みについて説明します。さまざまなワークロードと潜在的な使用例に対するRethinkDBのパフォーマンスメトリックの一般的な概要を提供することを目指しています。このレポートでは、以下の質問に対応します。</target>
        </trans-unit>
        <trans-unit id="dbf7d676994679d10fb326236fe98c7d7b06ae4d" translate="yes" xml:space="preserve">
          <source>This table returns information about the status and availability of servers within a RethinkDB cluster. A single document is created for each server that connects to the cluster. If a server loses its connection to the cluster, it will be removed from the &lt;code&gt;server_status&lt;/code&gt; table.</source>
          <target state="translated">このテーブルは、RethinkDBクラスター内のサーバーのステータスと可用性に関する情報を返します。クラスターに接続するサーバーごとに1つのドキュメントが作成されます。サーバーがクラスターへの接続を失うと、サーバーは &lt;code&gt;server_status&lt;/code&gt; テーブルから削除されます。</target>
        </trans-unit>
        <trans-unit id="8b1ac2a2ea0485ae1d2247b1c116a2c2f4acddb6" translate="yes" xml:space="preserve">
          <source>This table shows problems that have been detected within the RethinkDB cluster. For details, read the &lt;a href=&quot;../system-issues/index&quot;&gt;System current issues table&lt;/a&gt; documentation.</source>
          <target state="translated">この表は、RethinkDBクラスター内で検出された問題を示しています。詳細については、&lt;a href=&quot;../system-issues/index&quot;&gt;システムの現在の問題の表の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="9a58322ca86137de68e645fd6b69456345f7a1c8" translate="yes" xml:space="preserve">
          <source>This table stores information about table availability. There is one document per table (not counting system tables).</source>
          <target state="translated">このテーブルには、テーブルの利用可能性に関する情報が格納されています。テーブルごとに1つのドキュメントがあります(システムテーブルはカウントされません)。</target>
        </trans-unit>
        <trans-unit id="700035ba5743d362d312992febe3cdb4c2d32eca" translate="yes" xml:space="preserve">
          <source>This table stores the log files of the cluster. One row is added to the table for each log message generated by &lt;em&gt;each&lt;/em&gt; server that&amp;rsquo;s connected to the cluster. A maximum of 1000 entries will be stored for each server.</source>
          <target state="translated">このテーブルには、クラスターのログファイルが格納されます。クラスターに接続されている&lt;em&gt;各&lt;/em&gt;サーバーによって生成されたログメッセージごとに、テーブルに1行が追加されます。サーバーごとに最大1000のエントリが保存されます。</target>
        </trans-unit>
        <trans-unit id="7d26d8d3a47febb845fda047336c8a95a95ed440" translate="yes" xml:space="preserve">
          <source>This table stores the names of servers along with their &lt;em&gt;tags.&lt;/em&gt; Server tags organize servers into logical groups: servers could be tagged by usage (database, application, etc.), or by data center location (&amp;ldquo;us_west,&amp;rdquo; &amp;ldquo;us_east,&amp;rdquo; &amp;ldquo;london,&amp;rdquo; and so on). For more about server tags, read &lt;a href=&quot;../sharding-and-replication/index&quot;&gt;Sharding and replication&lt;/a&gt;.</source>
          <target state="translated">このテーブルには、サーバーの名前とその&lt;em&gt;タグ&lt;/em&gt;が格納され&lt;em&gt;ます。&lt;/em&gt;サーバータグは、サーバーを論理グループに編成します。サーバーは、使用法（データベース、アプリケーションなど）またはデータセンターの場所（「us_west」、「us_east」、「london」など）でタグ付けできます。サーバータグの詳細については、&lt;a href=&quot;../sharding-and-replication/index&quot;&gt;シャーディングとレプリケーションをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b24cf5174181e90b5c8aafe2f4e0730440af51a1" translate="yes" xml:space="preserve">
          <source>This technology has limitations. While most operations allow you to write familiar code, you can&amp;rsquo;t use native language&amp;rsquo;s operations that have side effects (such as &lt;code&gt;print&lt;/code&gt;) or control blocks (such as &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt;). Instead, you have to use alternative ReQL commands:</source>
          <target state="translated">このテクノロジーには制限があります。ほとんどの操作で使い慣れたコードを記述できますが、副作用（ &lt;code&gt;print&lt;/code&gt; など）や制御ブロック（ &lt;code&gt;if&lt;/code&gt; や &lt;code&gt;for&lt;/code&gt; など）を持つネイティブ言語の操作は使用できません。代わりに、代替のReQLコマンドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="645d6109bf848329c6f455ed5bcf791cd5d05962" translate="yes" xml:space="preserve">
          <source>This will bind the HTTP and driver ports on all available interfaces, while the cluster port will only be bound on the loopback interface and &lt;code&gt;192.168.0.1&lt;/code&gt;.</source>
          <target state="translated">これにより、利用可能なすべてのインターフェースでHTTPポートとドライバーポートがバインドされますが、クラスターポートはループバックインターフェースと &lt;code&gt;192.168.0.1&lt;/code&gt; でのみバインドされます。</target>
        </trans-unit>
        <trans-unit id="7be68a47df33c85c24d05535e067d92117013277" translate="yes" xml:space="preserve">
          <source>This will create the following model for comments:</source>
          <target state="translated">これにより、以下のようなコメント用のモデルが作成されます。</target>
        </trans-unit>
        <trans-unit id="bd972f0112cecc4dacfc67ccb7c54818c2630b9e" translate="yes" xml:space="preserve">
          <source>This will deserialize the change message, and pretty print it, along with a short description of what kind of change it is.</source>
          <target state="translated">これは、変更メッセージをデシリアライズし、それがどのような変更であるかの簡単な説明とともに、それをきれいに印刷します。</target>
        </trans-unit>
        <trans-unit id="2da799672b875bde58a2e844c9e9c6c18c1febf6" translate="yes" xml:space="preserve">
          <source>This will fail if the &lt;code&gt;notes&lt;/code&gt; field does not exist in the document. To perform this as an &amp;ldquo;upsert&amp;rdquo; (update or insert), use the &lt;a href=&quot;../default/index&quot;&gt;default&lt;/a&gt; command to ensure the field is initialized as an empty list.</source>
          <target state="translated">ドキュメントに &lt;code&gt;notes&lt;/code&gt; フィールドが存在しない場合、これは失敗します。これを「アップサート」（更新または挿入）として実行するには、&lt;a href=&quot;../default/index&quot;&gt;デフォルトの&lt;/a&gt;コマンドを使用して、フィールドが空のリストとして初期化されるようにします。</target>
        </trans-unit>
        <trans-unit id="d6dd0bebb08581cc718c11f050b164f60dd94ee5" translate="yes" xml:space="preserve">
          <source>This will override the &lt;code&gt;write: true&lt;/code&gt; permissions granted in the first example, but for this table only. Other tables in the &lt;code&gt;users&lt;/code&gt; database will inherit from the database permissions.</source>
          <target state="translated">これにより、最初の例で許可された &lt;code&gt;write: true&lt;/code&gt; 権限が上書きされますが、このテーブルのみが対象です。 &lt;code&gt;users&lt;/code&gt; データベースの他のテーブルは、データベースのアクセス許可を継承します。</target>
        </trans-unit>
        <trans-unit id="7a527a2cb141bcf68e0849631dd72491cfe72328" translate="yes" xml:space="preserve">
          <source>This will return a result set such as the following:</source>
          <target state="translated">これは、以下のような結果セットを返します。</target>
        </trans-unit>
        <trans-unit id="7974561d2e44ebf7a89c5cbd490575ef1cd12a6b" translate="yes" xml:space="preserve">
          <source>This will return a result similar to:</source>
          <target state="translated">と似たような結果が返ってきます。</target>
        </trans-unit>
        <trans-unit id="7b09d7bf2c5573de92a708dc2698ffe91aec72af" translate="yes" xml:space="preserve">
          <source>This workload exclusively performs read operations to retrieve individual documents from the database (YCSB workload C). In this workload, we use the same setup and data set as workload A above. Reads are also performed identically using 8 client servers with 128 concurrent connections per database server in the cluster.</source>
          <target state="translated">このワークロードは、データベースから個々の文書を取得するための読み取り操作のみを行う(YCSBワークロードC)。この作業負荷では、上記の作業負荷Aと同じセットアップとデータセットを使用します。また、クラスタ内のデータベースサーバごとに128の同時接続を持つ8台のクライアントサーバを使用して、同じように読み取りを実行しています。</target>
        </trans-unit>
        <trans-unit id="a4bd35123774d38b8d8be019e793af6044040d9c" translate="yes" xml:space="preserve">
          <source>This would be an example document representing a posted message:</source>
          <target state="translated">これは、投稿されたメッセージを表す文書の例となります。</target>
        </trans-unit>
        <trans-unit id="15a00ec912a3416fb1d64828fe342fae918688b8" translate="yes" xml:space="preserve">
          <source>This would be serialized as:</source>
          <target state="translated">として連載されることになります。</target>
        </trans-unit>
        <trans-unit id="c0a2cb70deba71b04f648c048262a358d25fe6fc" translate="yes" xml:space="preserve">
          <source>This yields the following model in &lt;code&gt;app/models/article.rb&lt;/code&gt;:</source>
          <target state="translated">これにより、 &lt;code&gt;app/models/article.rb&lt;/code&gt; に次のモデルが生成されます。</target>
        </trans-unit>
        <trans-unit id="743fc98678fa343fac71fe0aeddfa10f7343ab41" translate="yes" xml:space="preserve">
          <source>Three or more &lt;a href=&quot;../point/index&quot;&gt;Point&lt;/a&gt; objects specifying the polygon&amp;rsquo;s vertices.</source>
          <target state="translated">ポリゴンの頂点を指定する3つ以上の&lt;a href=&quot;../point/index&quot;&gt;Point&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="8060e8f9e58e7d9250d13fd0e26c17e27cbffa62" translate="yes" xml:space="preserve">
          <source>Three or more &lt;a href=&quot;point/index&quot;&gt;Point&lt;/a&gt; objects specifying the polygon&amp;rsquo;s vertices.</source>
          <target state="translated">ポリゴンの頂点を指定する3つ以上の&lt;a href=&quot;point/index&quot;&gt;Point&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="c6910e95d75d06c9f63a498f4fb6811b580000e6" translate="yes" xml:space="preserve">
          <source>Three or more two-item arrays, specifying latitude and longitude numbers of the polygon&amp;rsquo;s vertices;</source>
          <target state="translated">ポリゴンの頂点の緯度と経度の数を指定する3つ以上の2項目配列。</target>
        </trans-unit>
        <trans-unit id="16a9f47918b7ae16f0a1bea2bdc77c1f72578e59" translate="yes" xml:space="preserve">
          <source>Three settings control consistency and durability in RethinkDB: write acknowledgements and durability per table, and the query read mode.</source>
          <target state="translated">RethinkDBの一貫性と耐久性を制御する3つの設定:テーブルごとの書き込み確認応答と耐久性、およびクエリの読み取りモードです。</target>
        </trans-unit>
        <trans-unit id="9c56bf83063cedaf9e42b20360c4e018d13f5da0" translate="yes" xml:space="preserve">
          <source>Throw a runtime error. If called with no arguments inside the second argument to &lt;code&gt;default&lt;/code&gt;, re-throw the current error.</source>
          <target state="translated">実行時エラーをスローします。 &lt;code&gt;default&lt;/code&gt; への2番目の引数内に引数なしで呼び出された場合、現在のエラーを再スローします。</target>
        </trans-unit>
        <trans-unit id="7f35dd2cbf5aff9146859bee96606edf5a8c2413" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;on_val&lt;/code&gt; acts a &amp;ldquo;catch-all&amp;rdquo; for any data that is not handled by a more specific method.</source>
          <target state="translated">したがって、 &lt;code&gt;on_val&lt;/code&gt; は、より具体的なメソッドで処理されないデータに対して「キャッチオール」として機能します。</target>
        </trans-unit>
        <trans-unit id="5f35a7ab78049f5c0c80564c4ff28263d078b176" translate="yes" xml:space="preserve">
          <source>Thus, this is how our previous query is represented:</source>
          <target state="translated">このように、前回のクエリはこのように表現されます。</target>
        </trans-unit>
        <trans-unit id="51ba744d18b1aed2282b3fb904045b5795d7ea41" translate="yes" xml:space="preserve">
          <source>Times are considered equal when their epoch (UTC) time values are equal, &lt;strong&gt;regardless of what time zone they&amp;rsquo;re in&lt;/strong&gt;. This is true for both comparisons and indexed operations. Times are compared in floating point with millisecond precision.</source>
          <target state="translated">エポック（UTC）時間値が等しい場合、&lt;strong&gt;それらがどのタイムゾーンにあるか&lt;/strong&gt;に&lt;strong&gt;関係なく&lt;/strong&gt;、時間は等しいと見なさ&lt;strong&gt;れ&lt;/strong&gt;ます。これは、比較とインデックス付き操作の両方に当てはまります。時間は浮動小数点でミリ秒の精度で比較されます。</target>
        </trans-unit>
        <trans-unit id="b52eb4d78ab2e73e97cd1b17559ff603ae360f2a" translate="yes" xml:space="preserve">
          <source>Times are only compared with millisecond precision:</source>
          <target state="translated">時間はミリ秒単位の精度でしか比較できません。</target>
        </trans-unit>
        <trans-unit id="e9b98a635c118c1528261bfcaaf55c53e6b5de88" translate="yes" xml:space="preserve">
          <source>Times are stored on the server as seconds since epoch (UTC) with millisecond precision plus a time zone. Currently the only available time zones are minute-precision time offsets from UTC, but we may add support for DST-aware time zones in the future. Time zones are strings as specified by ISO</source>
          <target state="translated">時刻は、ミリ秒単位の精度でエポック(UTC)からの秒数とタイムゾーンとしてサーバーに保存されます。現在利用可能なタイムゾーンはUTCからの分精度のタイムオフセットのみですが、将来的にはDSTを意識したタイムゾーンのサポートを追加する可能性があります。タイムゾーンは、ISO</target>
        </trans-unit>
        <trans-unit id="63dd97c999febb3940f6b2aba7d4800126874dbd" translate="yes" xml:space="preserve">
          <source>Times are stored on the server as seconds since epoch (UTC) with millisecond precision plus a time zone. Currently the only available time zones are minute-precision time offsets from UTC, but we may add support for DST-aware time zones in the future. Time zones are strings as specified by ISO 8601. Note that the JavaScript driver strips time zone information due to limitations with the &lt;code&gt;Date&lt;/code&gt; object, although you can retrieve time zone data via the raw ReQL time object. (See below.)</source>
          <target state="translated">時刻は、ミリ秒の精度のあるエポック（UTC）からの秒数とタイムゾーンでサーバーに保存されます。現在使用可能なタイムゾーンはUTCからの分精度の時間オフセットのみですが、将来的にはDST対応のタイムゾーンのサポートが追加される可能性があります。タイムゾーンは、ISO 8601で指定されている文字列です。JavaScriptドライバーは、 &lt;code&gt;Date&lt;/code&gt; オブジェクトの制限によりタイムゾーン情報を取り除きますが、未加工のReQL時間オブジェクトを介してタイムゾーンデータを取得できます。（下記参照。）</target>
        </trans-unit>
        <trans-unit id="15603cced6ce07ab8236ca3d48ec34b3d1fb78d0" translate="yes" xml:space="preserve">
          <source>Times may be used as the primary key for a table. Two times are considered equal if they have the same number of milliseconds since epoch (UTC), regardless of time zone.</source>
          <target state="translated">時刻は、テーブルの主キーとして使用することができます。タイムゾーンに関係なく、エポック(UTC)からのミリ秒数が同じであれば、2つの時間は等しいとみなされます。</target>
        </trans-unit>
        <trans-unit id="247e90e993b0c5c79c181125b4d97813d3a93755" translate="yes" xml:space="preserve">
          <source>To actually install the RethinkDB service, execute:</source>
          <target state="translated">実際にRethinkDBサービスをインストールするには、実行します。</target>
        </trans-unit>
        <trans-unit id="9b9188703b28defc378651fb275e83b6e977aec9" translate="yes" xml:space="preserve">
          <source>To add or overwrite a field, you can use the &lt;code&gt;update&lt;/code&gt; command. For instance, if you would like to add the field &lt;code&gt;author&lt;/code&gt; with the value &amp;ldquo;Michel&amp;rdquo; for all of the documents in the table &lt;code&gt;posts&lt;/code&gt;, you would use:</source>
          <target state="translated">フィールドを追加または上書きするには、 &lt;code&gt;update&lt;/code&gt; コマンドを使用できます。たとえば、テーブル &lt;code&gt;posts&lt;/code&gt; 内のすべてのドキュメントに対して、フィールド作成 &lt;code&gt;author&lt;/code&gt; 「Michel」という値を追加する場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="f483b4eeb3105dade2c40cdd94f2d80f3d322ddf" translate="yes" xml:space="preserve">
          <source>To buffer messages that the subscriber hasn&amp;rsquo;t consumed yet (this buffering is actually done in the database server)</source>
          <target state="translated">サブスクライバがまだ使用していないメッセージをバッファリングする（このバッファリングは実際にはデータベースサーバーで行われます）</target>
        </trans-unit>
        <trans-unit id="cb12f935e01637a6bb4fce40c83665d86ec98cc9" translate="yes" xml:space="preserve">
          <source>To change the password used to access the web UI, log in over SSH and run the following command:</source>
          <target state="translated">Web UIへのアクセスに使用するパスワードを変更するには、SSHでログインして以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="feb7113ba6e90ec2431b889d30d86a37bc3c8f95" translate="yes" xml:space="preserve">
          <source>To change these settings for a table:</source>
          <target state="translated">テーブルのこれらの設定を変更するには</target>
        </trans-unit>
        <trans-unit id="b482256206d6e96941c63a16517331684e1bb28d" translate="yes" xml:space="preserve">
          <source>To close a cursor and stop receiving data from the stream or feed, send a query with a &lt;code&gt;QueryType&lt;/code&gt; of &lt;code&gt;STOP&lt;/code&gt; on the same connection with the same token.</source>
          <target state="translated">カーソルを閉じて、ストリームまたはフィードからのデータの受信を &lt;code&gt;STOP&lt;/code&gt; には、同じトークンを使用して、同じ接続で &lt;code&gt;QueryType&lt;/code&gt; がSTOPのクエリを送信します。</target>
        </trans-unit>
        <trans-unit id="54f3a65cc4d17eb7acb7f0b3fbfc5ccdee0afcbf" translate="yes" xml:space="preserve">
          <source>To configure our river, we need to create a type called &lt;code&gt;rethinkdb&lt;/code&gt; in the &lt;code&gt;_river&lt;/code&gt; index. Then we need to insert a document with the id &lt;code&gt;_meta&lt;/code&gt; into that type. Elasticsearch lets us create the document and the type in one go with a &lt;code&gt;PUT&lt;/code&gt; request:</source>
          <target state="translated">リバーを構成するには、 &lt;code&gt;_river&lt;/code&gt; インデックスに &lt;code&gt;rethinkdb&lt;/code&gt; というタイプを作成する必要があります。次に、IDが &lt;code&gt;_meta&lt;/code&gt; のドキュメントをそのタイプに挿入する必要があります。Elasticsearchを使用すると、 &lt;code&gt;PUT&lt;/code&gt; リクエストでドキュメントとタイプを一度に作成できます。</target>
        </trans-unit>
        <trans-unit id="6d4e23954b31922795c6068d267ad1ca0a01598c" translate="yes" xml:space="preserve">
          <source>To connect to your instance over SSH, log in as the user &lt;code&gt;ubuntu&lt;/code&gt;. Use the private key you chose during the installation process and the public hostname of the instance. For example:</source>
          <target state="translated">SSH経由でインスタンスに接続するには、ユーザー &lt;code&gt;ubuntu&lt;/code&gt; としてログインします。インストールプロセス中に選択した秘密鍵とインスタンスのパブリックホスト名を使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="4e84477f8fc3e9974738da45f0d2b5d08603632e" translate="yes" xml:space="preserve">
          <source>To create indexes on fields containing geometry objects, you simply use the standard &lt;a href=&quot;../../../api/javascript/index_create/index&quot;&gt;indexCreate&lt;/a&gt; command, setting the &lt;code&gt;geo&lt;/code&gt; optional argument to &lt;code&gt;true&lt;/code&gt;. In JavaScript, this would be:</source>
          <target state="translated">ジオメトリオブジェクトを含むフィールドにインデックスを作成するには、標準の&lt;a href=&quot;../../../api/javascript/index_create/index&quot;&gt;indexCreate&lt;/a&gt;コマンドを使用して、 &lt;code&gt;geo&lt;/code&gt; オプション引数を &lt;code&gt;true&lt;/code&gt; に設定します。JavaScriptでは、これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="e383099f5bc1d4fa7940f0d449f15522b3fe3f50" translate="yes" xml:space="preserve">
          <source>To delete documents, select the documents you&amp;rsquo;d like to delete and use the &lt;code&gt;delete&lt;/code&gt; command. For example, let&amp;rsquo;s delete all posts with the author &amp;ldquo;Michel&amp;rdquo;:</source>
          <target state="translated">ドキュメントを削除するには、削除するドキュメントを選択し、 &lt;code&gt;delete&lt;/code&gt; コマンドを使用します。たとえば、作成者が「Michel」であるすべての投稿を削除してみましょう。</target>
        </trans-unit>
        <trans-unit id="950e075f5afb40521c4507c103d6c51dff9e0c44" translate="yes" xml:space="preserve">
          <source>To efficiently perform concurrent query execution RethinkDB implements block-level multiversion concurrency control (MVCC). Whenever a write operation occurs while there is an ongoing read, RethinkDB takes a snapshot of the B-Tree for each relevant shard and temporarily maintains different versions of the blocks in order to execute read and write operations concurrently. From the perspective of the applications written on top of RethinkDB, the system is essentially lock-free&amp;mdash; you can run an hour-long analytics query on a live system without blocking any real-time reads or writes.</source>
          <target state="translated">同時クエリ実行を効率的に実行するために、RethinkDBはブロックレベルのマルチバージョン同時実行制御（MVCC）を実装しています。読み取りが進行中に書き込み操作が発生すると、RethinkDBは関連するシャードごとにBツリーのスナップショットを取得し、読み取り操作と書き込み操作を同時に実行するために、ブロックの異なるバージョンを一時的に維持します。RethinkDBの上に作成されたアプリケーションの観点からは、システムは基本的にロックフリーです。リアルタイムの読み取りまたは書き込みをブロックせずに、ライブシステムで1時間の分析クエリを実行できます。</target>
        </trans-unit>
        <trans-unit id="b5e4b8665d86162d6ee0499ed85653c5815afb9a" translate="yes" xml:space="preserve">
          <source>To export your data, use &lt;code&gt;rethinkdb dump&lt;/code&gt;:</source>
          <target state="translated">データをエクスポートするには、 &lt;code&gt;rethinkdb dump&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="a5cfc170270329b9655e380eece96e7561697147" translate="yes" xml:space="preserve">
          <source>To filter messages from the &lt;code&gt;Exchange&lt;/code&gt; by their &lt;code&gt;Topic&lt;/code&gt; (again, the server does this filtering)</source>
          <target state="translated">以下からのメッセージフィルタする &lt;code&gt;Exchange&lt;/code&gt; 自分で &lt;code&gt;Topic&lt;/code&gt; （再び、サーバはこのフィルタリングを行います）</target>
        </trans-unit>
        <trans-unit id="b9e67fa6a41c04fe151b7928d066cb31b3fea779" translate="yes" xml:space="preserve">
          <source>To gain more precise control, write a class that inherits from &lt;code&gt;RethinkDB::Handler&lt;/code&gt; and override the event handling methods, then pass an instance of that class to &lt;code&gt;em_run&lt;/code&gt;.</source>
          <target state="translated">より正確に制御するには、 &lt;code&gt;RethinkDB::Handler&lt;/code&gt; を継承するクラスを記述し、イベント処理メソッドをオーバーライドしてから、そのクラスのインスタンスを &lt;code&gt;em_run&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="ecb986ccee4f137068ef2d566f7031789cf5f9b2" translate="yes" xml:space="preserve">
          <source>To get a specific document by ID, use &lt;code&gt;get&lt;/code&gt;:</source>
          <target state="translated">IDで特定のドキュメントを取得するには、 &lt;code&gt;get&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="32c34afe39f590eccd4f302451652c9d5db80b83" translate="yes" xml:space="preserve">
          <source>To get all documents in a table, simply use the &lt;code&gt;table&lt;/code&gt; command:</source>
          <target state="translated">テーブル内のすべてのドキュメントを取得するには、単に &lt;code&gt;table&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="de40767187d55c844372554d913cfb17c30ac121" translate="yes" xml:space="preserve">
          <source>To get the list without duplicates, we can simply leave off &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">重複のないリストを取得するには、単純に &lt;code&gt;count&lt;/code&gt; を省略します。</target>
        </trans-unit>
        <trans-unit id="88d921b59c0f75df156b7448a630f25ee63f52bf" translate="yes" xml:space="preserve">
          <source>To group servers together in data centers, RethinkDB uses &lt;a href=&quot;#server-tags&quot;&gt;Server tags&lt;/a&gt;. Servers can be &amp;ldquo;tagged&amp;rdquo; with one or more group names on startup:</source>
          <target state="translated">データセンターでサーバーをグループ化するために、RethinkDBは&lt;a href=&quot;#server-tags&quot;&gt;サーバータグを&lt;/a&gt;使用します。サーバーは、起動時に1つ以上のグループ名で「タグ付け」できます。</target>
        </trans-unit>
        <trans-unit id="7c8c09feafb751ddc9987a1f0769b5852c6515f6" translate="yes" xml:space="preserve">
          <source>To import repubsub and create a connection to an exchange:</source>
          <target state="translated">repubsubをインポートして取引所への接続を作成するには</target>
        </trans-unit>
        <trans-unit id="c1f91e358f2a76534d12cdf146988fdd67d454fb" translate="yes" xml:space="preserve">
          <source>To import the file &lt;code&gt;users.json&lt;/code&gt; into the table &lt;code&gt;test.users&lt;/code&gt;, you would use:</source>
          <target state="translated">ファイル &lt;code&gt;users.json&lt;/code&gt; をテーブル &lt;code&gt;test.users&lt;/code&gt; にインポートするには、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="366e39a918bb090b9526809d87179174180378d0" translate="yes" xml:space="preserve">
          <source>To import your data, use &lt;code&gt;rethinkdb restore&lt;/code&gt;:</source>
          <target state="translated">データをインポートするには、 &lt;code&gt;rethinkdb restore&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="86d61c074af286c312f7bf0ff03e2e2f22db6204" translate="yes" xml:space="preserve">
          <source>To install the river, we&amp;rsquo;ll use the &lt;code&gt;plugin&lt;/code&gt; program that comes with Elasticsearch. On most platforms the program is named &lt;code&gt;plugin&lt;/code&gt;, but it&amp;rsquo;s sometimes called &lt;code&gt;elasticsearch-plugin&lt;/code&gt;:</source>
          <target state="translated">Riverをインストールするには、Elasticsearchに付属する &lt;code&gt;plugin&lt;/code&gt; プログラムを使用します。ほとんどのプラットフォームでは、プログラムの名前は &lt;code&gt;plugin&lt;/code&gt; ですが、 &lt;code&gt;elasticsearch-plugin&lt;/code&gt; と呼ばれることもあります。</target>
        </trans-unit>
        <trans-unit id="07ccf555ea9bbb6b48936787543c2086779b895e" translate="yes" xml:space="preserve">
          <source>To learn more, read about &lt;a href=&quot;../data-modeling/index&quot;&gt;data modeling in RethinkDB&lt;/a&gt;. For detailed information, take a look at the API documentation for the join commands:</source>
          <target state="translated">詳細について&lt;a href=&quot;../data-modeling/index&quot;&gt;は、RethinkDBでのデータモデリング&lt;/a&gt;についてお読みください。詳細については、joinコマンドのAPIドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="9c4bd5fe842d7531560f3120d9e845234d3e63a7" translate="yes" xml:space="preserve">
          <source>To make report processing easier, please consider the following:</source>
          <target state="translated">報告書の処理を簡単にするために、次のようなことを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="6400029759c584c7be4cecaa7c0efc09877f5ffb" translate="yes" xml:space="preserve">
          <source>To perform automatic failover for a table, the following requirements must be met:</source>
          <target state="translated">テーブルの自動フェイルオーバーを実行するには、以下の要件を満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="d9ec4446461d0874e4e3707aaa37881f8f5364dd" translate="yes" xml:space="preserve">
          <source>To perform this, &lt;a href=&quot;../../../api/javascript/map/index&quot;&gt;map&lt;/a&gt; the first 25 movies into a new result set, adding a &lt;code&gt;count&lt;/code&gt; column, then &lt;a href=&quot;../../../api/javascript/reduce/index&quot;&gt;reduce&lt;/a&gt; each row of the mapped result set into a total for each field (&lt;code&gt;votes&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;). Then use &lt;a href=&quot;../../../api/javascript/do/index&quot;&gt;do&lt;/a&gt; to return a result set with the total votes and the average year, computed by dividing the sum of the years by their count.</source>
          <target state="translated">これを実行するには、最初の25本の映画を新しい結果セットに&lt;a href=&quot;../../../api/javascript/map/index&quot;&gt;マップ&lt;/a&gt;し、 &lt;code&gt;count&lt;/code&gt; 列を追加してから、マップされた結果セットの各行を各フィールドの合計（ &lt;code&gt;votes&lt;/code&gt; 、 &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;column&lt;/code&gt; ）に&lt;a href=&quot;../../../api/javascript/reduce/index&quot;&gt;減らし&lt;/a&gt;ます。次に、&lt;a href=&quot;../../../api/javascript/do/index&quot;&gt;do&lt;/a&gt;を使用して、総投票数と平均年を含む結果セットを返します。年の合計をそれらの数で割ることによって計算されます。</target>
        </trans-unit>
        <trans-unit id="a0ff8e79026cbc6c21f05b4a17f993ecb68823c4" translate="yes" xml:space="preserve">
          <source>To publish a message to the exchange, create a topic:</source>
          <target state="translated">交換所にメッセージを公開するには、トピックを作成します。</target>
        </trans-unit>
        <trans-unit id="b02d7fe7e4c8253f0f26c381301a861cc87b02c6" translate="yes" xml:space="preserve">
          <source>To put these into a new table, wrap that query with &lt;code&gt;insert&lt;/code&gt;. We&amp;rsquo;ll get new IDs generated automatically. This is also an example of using subqueries with ReQL: it&amp;rsquo;s easy to pass the results of one query into another. (One of ReQL&amp;rsquo;s other nice properties, which we&amp;rsquo;ve already seen, is command chaining: the input of one command is often the output of the command before it, similar to Unix piping.)</source>
          <target state="translated">これらを新しいテーブルに入れるには、そのクエリを &lt;code&gt;insert&lt;/code&gt; でラップします。新しいIDが自動的に生成されます。これは、ReQLでサブクエリを使用する例でもあります。あるクエリの結果を別のクエリに渡すのは簡単です。（ReQLの他の優れたプロパティの1つは、すでに説明したとおり、コマンドチェーンです。1つのコマンドの入力は、多くの場合、その前のコマンドの出力であり、Unixパイピングと同様です。）</target>
        </trans-unit>
        <trans-unit id="aeaa752cf337e6eca87d3929b1caf4bdac7d936a" translate="yes" xml:space="preserve">
          <source>To recap, sending a query to the server takes the following steps:</source>
          <target state="translated">要約すると、サーバーにクエリを送信するには、以下の手順が必要です。</target>
        </trans-unit>
        <trans-unit id="85f19992e8bf6c08c0bc6c8efb74c60dd624f683" translate="yes" xml:space="preserve">
          <source>To retrieve all documents from the table &lt;code&gt;authors&lt;/code&gt;, we can simply run the query &lt;code&gt;r.table('authors')&lt;/code&gt;:</source>
          <target state="translated">テーブル &lt;code&gt;authors&lt;/code&gt; からすべてのドキュメントを取得するには、クエリ &lt;code&gt;r.table('authors')&lt;/code&gt; を実行するだけです。</target>
        </trans-unit>
        <trans-unit id="3a5f4a8eb4db8e8ab545aa8109b844e626df95c5" translate="yes" xml:space="preserve">
          <source>To retrieve documents by the value of a specific &lt;a href=&quot;../../secondary-indexes/javascript/index&quot;&gt;index&lt;/a&gt;, use &lt;code&gt;getAll&lt;/code&gt;:</source>
          <target state="translated">特定の&lt;a href=&quot;../../secondary-indexes/javascript/index&quot;&gt;インデックスの&lt;/a&gt;値でドキュメントを取得するには、 &lt;code&gt;getAll&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="fbb0258d07691baeefb2b68816f6b95a63456b10" translate="yes" xml:space="preserve">
          <source>To retrieve documents by the value of a specific field, use &lt;code&gt;filter&lt;/code&gt;:</source>
          <target state="translated">特定のフィールドの値でドキュメントを取得するには、 &lt;code&gt;filter&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ed3be06592db0d57713ac35e99b8a2f3ebf7ea85" translate="yes" xml:space="preserve">
          <source>To retrieve more data for the cursor, the driver should send a query with a &lt;code&gt;QueryType&lt;/code&gt; of &lt;code&gt;CONTINUE&lt;/code&gt;&lt;em&gt;on the same connection with the same token.&lt;/em&gt; As with other queries, this must be sent with the query token, the size of the query, and the query itself, simply &lt;code&gt;[2]&lt;/code&gt;.</source>
          <target state="translated">カーソルのデータをさらに取得するには、ドライバーは&lt;em&gt;、同じ接続で同じトークンを&lt;/em&gt;使用して、 &lt;code&gt;QueryType&lt;/code&gt; が &lt;code&gt;CONTINUE&lt;/code&gt; のクエリを送信する必要があります&lt;em&gt;。&lt;/em&gt;他のクエリと同様に、これはクエリトークン、クエリのサイズ、およびクエリ自体と一緒に送信する必要があります。単純に &lt;code&gt;[2]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="594e344aa121fcd72ce614816e06800232731f0c" translate="yes" xml:space="preserve">
          <source>To return the status on a specific table, you can use the &lt;a href=&quot;https://rethinkdb.com/api/python/status&quot;&gt;status&lt;/a&gt; command.</source>
          <target state="translated">特定のテーブルのステータスを返すには、&lt;a href=&quot;https://rethinkdb.com/api/python/status&quot;&gt;status&lt;/a&gt;コマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="0f2544d8217895f115ddbfac5ce0427076385ac7" translate="yes" xml:space="preserve">
          <source>To run a proxy node, simply use the &lt;code&gt;proxy&lt;/code&gt; command line option on startup.</source>
          <target state="translated">プロキシノードを実行するには、起動時に &lt;code&gt;proxy&lt;/code&gt; コマンドラインオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="7ad487668453bf9cfe5420133fd62d266a6f19fb" translate="yes" xml:space="preserve">
          <source>To secure the cluster port, bind it to a specific IP address using the &lt;code&gt;--bind-cluster&lt;/code&gt;&lt;a href=&quot;../cli-options/index&quot;&gt;command line option&lt;/a&gt; or the corresponding &lt;a href=&quot;../config-file/index&quot;&gt;configuration file option&lt;/a&gt;. Bind it to an IP address that is only accessible from within your local network.</source>
          <target state="translated">クラスターポートを保護するには、--bind &lt;code&gt;--bind-cluster&lt;/code&gt; &lt;a href=&quot;../cli-options/index&quot;&gt;コマンドラインオプション&lt;/a&gt;または対応する&lt;a href=&quot;../config-file/index&quot;&gt;設定ファイルオプション&lt;/a&gt;を使用して、ポートを特定のIPアドレスにバインドします。ローカルネットワーク内からのみアクセス可能なIPアドレスにバインドします。</target>
        </trans-unit>
        <trans-unit id="63abc14b3a39ce86c3ddac5a6216b4527d3e45bd" translate="yes" xml:space="preserve">
          <source>To secure your instance more tightly, we recommend that you perform the following steps:</source>
          <target state="translated">インスタンスをより強固に固定するには、以下の手順を実行することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ad6055491136bc9a98781e119b4821f59b1ddbf8" translate="yes" xml:space="preserve">
          <source>To solve this, specify the canonical address explicitly by using the &lt;code&gt;--canonical-address&lt;/code&gt; argument.</source>
          <target state="translated">これを解決するには、 &lt;code&gt;--canonical-address&lt;/code&gt; 引数を使用して、正規アドレスを明示的に指定します。</target>
        </trans-unit>
        <trans-unit id="d72bc2454fca47c2c0ab0269659e7cf093c4a3e6" translate="yes" xml:space="preserve">
          <source>To specify the permissions described above for Bob, you would execute the following ReQL commands:</source>
          <target state="translated">上記のようにBobのパーミッションを指定するには、以下のReQLコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="1cb6d614ff621abfe0d6a335ad8d264a853e0544" translate="yes" xml:space="preserve">
          <source>To start RethinkDB, use &lt;code&gt;launchctl&lt;/code&gt;:</source>
          <target state="translated">RethinkDBを起動するには、launchctlを使用し &lt;code&gt;launchctl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2dad878292712b7f558426d349ed880e4af7a108" translate="yes" xml:space="preserve">
          <source>To start a feed, open a new terminal and open a new RethinkDB connection. Then, run the following query:</source>
          <target state="translated">フィードを開始するには、新しいターミナルを開き、新しいRethinkDB接続を開きます。そして、以下のクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="9c11c7d34e1946579e4adcbac994f885acb15b11" translate="yes" xml:space="preserve">
          <source>To start the first RethinkDB instance, run this command in your terminal:</source>
          <target state="translated">最初のRethinkDBインスタンスを起動するには、ターミナルでこのコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="c3e5329f2856e1b30fd4b56a003d3db2b1ded724" translate="yes" xml:space="preserve">
          <source>To summarize all of the above in code:</source>
          <target state="translated">上記のことをすべてコードでまとめると</target>
        </trans-unit>
        <trans-unit id="a1466cba731633b29d2f080ac2ba32ca88bc29e7" translate="yes" xml:space="preserve">
          <source>To test a configuration file before using it, start RethinkDB manually, specifying the configuration with the &lt;code&gt;--config-file&lt;/code&gt; flag:</source>
          <target state="translated">構成ファイルを使用する前にテストするには、RethinkDBを手動で起動し、-config &lt;code&gt;--config-file&lt;/code&gt; フラグを使用して構成を指定します。</target>
        </trans-unit>
        <trans-unit id="3abbd29486099a34e7f40b5a4cddbe4b9cf10916" translate="yes" xml:space="preserve">
          <source>To understand the number of blocks used by a given data set, we must first distinguish two different modes of how a document can be stored.</source>
          <target state="translated">与えられたデータセットで使用されるブロックの数を理解するためには、まず、文書がどのように保存されるかについて、2つの異なるモードを区別する必要があります。</target>
        </trans-unit>
        <trans-unit id="f0f9dad2d6cdcc7eacf224d626d3f9f091cf0c85" translate="yes" xml:space="preserve">
          <source>To use TLS connections between servers in the cluster:</source>
          <target state="translated">クラスタ内のサーバー間でTLS接続を使用するには</target>
        </trans-unit>
        <trans-unit id="b133e48e0d2e81b55fd18918ab28e9f2c17723e7" translate="yes" xml:space="preserve">
          <source>To use TLS connections with client drivers, specify:</source>
          <target state="translated">クライアントドライバでTLS接続を使用するには、指定します。</target>
        </trans-unit>
        <trans-unit id="bb0309d21645559c49035d639aedb79fa72fcc44" translate="yes" xml:space="preserve">
          <source>Todo list 1</source>
          <target state="translated">全リスト1</target>
        </trans-unit>
        <trans-unit id="c0d571fb15bd5004e86b86da5d5fd2117fc978b4" translate="yes" xml:space="preserve">
          <source>Todo list 2</source>
          <target state="translated">全リスト2</target>
        </trans-unit>
        <trans-unit id="8ec3b42250ed256519f611273d212bc6a9381982" translate="yes" xml:space="preserve">
          <source>Todo list in Backbone</source>
          <target state="translated">BackboneのToDoリスト</target>
        </trans-unit>
        <trans-unit id="9b709f53299c781ad6cfe792699295be55f8b558" translate="yes" xml:space="preserve">
          <source>Todo list in Ember.js</source>
          <target state="translated">Ember.jsのTodoリスト</target>
        </trans-unit>
        <trans-unit id="132a9e5e92ca13cc63a8881214eed35704933a05" translate="yes" xml:space="preserve">
          <source>Todo list with Angular and Express</source>
          <target state="translated">AngularとExpressを使ったToDoリスト</target>
        </trans-unit>
        <trans-unit id="bea627f8ee28519a09b024254b900d47c7456046" translate="yes" xml:space="preserve">
          <source>Tornado</source>
          <target state="translated">Tornado</target>
        </trans-unit>
        <trans-unit id="bd22935ae208296740b8d45826f737f20bba80b9" translate="yes" xml:space="preserve">
          <source>Transform each element of one or more sequences by applying a mapping function to them. If &lt;code&gt;map&lt;/code&gt; is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</source>
          <target state="translated">マッピング関数を適用して、1つ以上のシーケンスの各要素を変換します。 &lt;code&gt;map&lt;/code&gt; が2つ以上のシーケンスで実行される場合、最短のシーケンスにあるのと同じ数の項目に対して反復します。</target>
        </trans-unit>
        <trans-unit id="d685ad7c59aeb1945ef867b52857539b62c1b81c" translate="yes" xml:space="preserve">
          <source>Transformations</source>
          <target state="translated">Transformations</target>
        </trans-unit>
        <trans-unit id="e2bc0fa55c343cd8ae1a2849f02567a3cbc8198c" translate="yes" xml:space="preserve">
          <source>Transformations are applied before changes are calculated.</source>
          <target state="translated">変形は、変更が計算される前に適用されます。</target>
        </trans-unit>
        <trans-unit id="636b384f08584381fd6ed01329683547509c1d32" translate="yes" xml:space="preserve">
          <source>Transmitted</source>
          <target state="translated">Transmitted</target>
        </trans-unit>
        <trans-unit id="10756c57fa929e54d2fbfddbd05bebea58ee3730" translate="yes" xml:space="preserve">
          <source>Transmitted bytes</source>
          <target state="translated">送信バイト数</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="a366c709db27bd15c4dfe9c2cf45f4723cc61549" translate="yes" xml:space="preserve">
          <source>Troubleshooting FAQ</source>
          <target state="translated">トラブルシューティングFAQ</target>
        </trans-unit>
        <trans-unit id="37980a44c517087463e129eca0240643f5c25de3" translate="yes" xml:space="preserve">
          <source>Troubleshooting common RethinkDB problems</source>
          <target state="translated">一般的なRethinkDBの問題のトラブルシューティング</target>
        </trans-unit>
        <trans-unit id="9beec1d3517a419360a6ad6fb2b7d53d1d3521a5" translate="yes" xml:space="preserve">
          <source>Trusted Docker build and instructions for deploying a RethinkDB cluster.</source>
          <target state="translated">信頼できるDockerビルドとRethinkDBクラスタをデプロイするための手順。</target>
        </trans-unit>
        <trans-unit id="cbe5413cca0e1a50a658098a3df98dcd9a0f8b94" translate="yes" xml:space="preserve">
          <source>Try out the repubsub demo</source>
          <target state="translated">repubsubデモを試してみる</target>
        </trans-unit>
        <trans-unit id="e3ca01cb076f183ec2cf707e0ea65c9829a4435d" translate="yes" xml:space="preserve">
          <source>Trying to access &lt;code&gt;user1&lt;/code&gt; in ReQL will cause a nesting depth error.</source>
          <target state="translated">ReQLで &lt;code&gt;user1&lt;/code&gt; にアクセスしようとすると、ネスト深度エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="53664f1e2f0e6eb2b0c4bce0be6d2549297e9871" translate="yes" xml:space="preserve">
          <source>Turn a query into a changefeed, an infinite stream of objects representing changes to the query&amp;rsquo;s results as they occur. A changefeed may return changes to a table or an individual document (a &amp;ldquo;point&amp;rdquo; changefeed). Commands such as &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;map&lt;/code&gt; may be used before the &lt;code&gt;changes&lt;/code&gt; command to transform or filter the output, and many commands that operate on sequences can be chained after &lt;code&gt;changes&lt;/code&gt;.</source>
          <target state="translated">クエリをchangefeedに変換します。これは、発生したクエリの結果に対する変更を表すオブジェクトの無限のストリームです。変更フィードは、表または個々のドキュメントへの変更を返す場合があります（「ポイント」変更フィード）。 &lt;code&gt;filter&lt;/code&gt; や &lt;code&gt;map&lt;/code&gt; などのコマンドは、 &lt;code&gt;changes&lt;/code&gt; コマンドの前に使用して出力を変換またはフィルタリングできます。また、シーケンスを操作する多くのコマンドは、 &lt;code&gt;changes&lt;/code&gt; の後にチェーンできます。</target>
        </trans-unit>
        <trans-unit id="4b79156b13c38a60392112dbdf81a9d0a27fcf63" translate="yes" xml:space="preserve">
          <source>Twisted</source>
          <target state="translated">Twisted</target>
        </trans-unit>
        <trans-unit id="6446b1c8d77fa2cd9100709887d91f9bbff92d94" translate="yes" xml:space="preserve">
          <source>Two (latitude and longitude). Elevation is not supported.</source>
          <target state="translated">2つ(緯度・経度)です。標高は対応していません。</target>
        </trans-unit>
        <trans-unit id="1fa1c3c9ce84fdece536b61347999037fad2354c" translate="yes" xml:space="preserve">
          <source>Two events can be emitted, &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; と &lt;code&gt;error&lt;/code&gt; の 2つのイベントを発行できます。</target>
        </trans-unit>
        <trans-unit id="c6b5482647136d8564d88c44675609c8ed6bdba4" translate="yes" xml:space="preserve">
          <source>Two or more &lt;a href=&quot;../point/index&quot;&gt;Point&lt;/a&gt; objects specifying the line&amp;rsquo;s vertices.</source>
          <target state="translated">線の頂点を指定する2つ以上の&lt;a href=&quot;../point/index&quot;&gt;Point&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="1b1a580c0ac47b78a0704236a77398259abc1c6b" translate="yes" xml:space="preserve">
          <source>Two or more &lt;a href=&quot;point/index&quot;&gt;Point&lt;/a&gt; objects specifying the line&amp;rsquo;s vertices.</source>
          <target state="translated">線の頂点を指定する2つ以上の&lt;a href=&quot;point/index&quot;&gt;Point&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="bbdcc944716c5615a236baa9e2fc33d539a9105d" translate="yes" xml:space="preserve">
          <source>Two or more two-item arrays, specifying latitude and longitude numbers of the line&amp;rsquo;s vertices;</source>
          <target state="translated">ラインの頂点の緯度と経度の数を指定する2つ以上の2項目配列。</target>
        </trans-unit>
        <trans-unit id="4ba1815eb2917359deeac9d397d5812c0b4b098a" translate="yes" xml:space="preserve">
          <source>Two settings for tables, write acknowledgements and write durability, cannot be set through either the web interface or the &lt;code&gt;reconfigure&lt;/code&gt; command. They must be set by modifying the &lt;code&gt;table_config&lt;/code&gt; table for individual tables.</source>
          <target state="translated">テーブルの2つの設定、書き込み確認と書き込み耐久性は、Webインターフェースまたは &lt;code&gt;reconfigure&lt;/code&gt; コマンドのいずれからも設定できません。個々のテーブルの &lt;code&gt;table_config&lt;/code&gt; テーブルを変更して設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6c7e8c4768d6d89677c79690c60c193c74ddcb13" translate="yes" xml:space="preserve">
          <source>Typically, this indicates that a JSON object with subdocuments is too deeply nested:</source>
          <target state="translated">通常、これはサブドキュメントを持つJSONオブジェクトが深く入れ子になっていることを示しています。</target>
        </trans-unit>
        <trans-unit id="52c6c1812015585dc1092393a1f244f60d68c60a" translate="yes" xml:space="preserve">
          <source>UPDATE</source>
          <target state="translated">UPDATE</target>
        </trans-unit>
        <trans-unit id="364270ef7d2c546a581298054e0fe3b7afbbe2ac" translate="yes" xml:space="preserve">
          <source>US election analysis</source>
          <target state="translated">べいせんきょぶんせき</target>
        </trans-unit>
        <trans-unit id="a1c366cacdc2e4f2ca5e9f514afccf66ad1dfa3e" translate="yes" xml:space="preserve">
          <source>Ubuntu</source>
          <target state="translated">Ubuntu</target>
        </trans-unit>
        <trans-unit id="a6812ddf0974dcae6abd3a14c32af9a9161c78a9" translate="yes" xml:space="preserve">
          <source>Ubuntu 14.04</source>
          <target state="translated">Ubuntu 14.04</target>
        </trans-unit>
        <trans-unit id="9fa17002e5897edadc0072042bcef127cb475076" translate="yes" xml:space="preserve">
          <source>Ubuntu Server 12.04 LTS</source>
          <target state="translated">Ubuntu Server 12.04 LTS</target>
        </trans-unit>
        <trans-unit id="2fcd95479f339b189b1b91af8268bb81bf5e8c84" translate="yes" xml:space="preserve">
          <source>Under OS X, the system versions of Python and Ruby link to old versions of OpenSSL which do not support RethinkDB&amp;rsquo;s defaults for TLS. To use those drivers under OS X, the server must specify:</source>
          <target state="translated">OS Xでは、PythonとRubyのシステムバージョンは、TLSのRethinkDBのデフォルトをサポートしていない古いバージョンのOpenSSLにリンクしています。OS Xでこれらのドライバーを使用するには、サーバーで次の項目を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8c637e03237e3de5320d47b31840684831855946" translate="yes" xml:space="preserve">
          <source>Under most circumstances, it is easier to manipulate the &lt;code&gt;permissions&lt;/code&gt; table by using the &lt;a href=&quot;../../api/javascript/grant/index&quot;&gt;grant&lt;/a&gt; command.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;../../api/javascript/grant/index&quot;&gt;grant&lt;/a&gt;コマンドを使用すると、 &lt;code&gt;permissions&lt;/code&gt; テーブルを操作するのが簡単になります。</target>
        </trans-unit>
        <trans-unit id="0d4479e111cf225a452266879c7640ba144cf369" translate="yes" xml:space="preserve">
          <source>Under normal circumstances the system will prevent name collisions, but a collision could occur due to a race condition&amp;mdash;for instance, two clients trying to create tables with the same name on different servers simultaneously. This is a critical error, as a name collision on a table or database makes it impossible to read or write from that table or from tables in that database.</source>
          <target state="translated">通常の状況では、システムは名前の衝突を防ぎますが、競合が発生する可能性があります。たとえば、2つのクライアントが異なるサーバー上に同じ名前のテーブルを同時に作成しようとした場合などです。テーブルまたはデータベースでの名前の衝突により、そのテーブルまたはそのデータベース内のテーブルからの読み取りまたは書き込みが不可能になるため、これは重大なエラーです。</target>
        </trans-unit>
        <trans-unit id="44b2aafb6bac3c1c7dac049c5af91f953afa5c68" translate="yes" xml:space="preserve">
          <source>Understanding RethinkDB memory requirements</source>
          <target state="translated">RethinkDBのメモリ要件を理解する</target>
        </trans-unit>
        <trans-unit id="e843f3bbb1a4125dd9a299d4d68c73b5d88c19db" translate="yes" xml:space="preserve">
          <source>Understanding how RethinkDB parallelizes queries can improve the performance of your applications&amp;mdash;sometimes significantly.</source>
          <target state="translated">RethinkDBがクエリを並列化する方法を理解すると、アプリケーションのパフォーマンスが向上する場合があります。</target>
        </trans-unit>
        <trans-unit id="ce00816d4a4fa8b4c822b510eb10cc24e4557eab" translate="yes" xml:space="preserve">
          <source>Ungrouping</source>
          <target state="translated">Ungrouping</target>
        </trans-unit>
        <trans-unit id="f6eabc3d4ce5084fa933d9e3e40b1a62a4408c35" translate="yes" xml:space="preserve">
          <source>Ungrouping is useful e.g. for ordering grouped data, or for inserting grouped data into a table.</source>
          <target state="translated">グループ化の解除は、グループ化されたデータの順序付けや、グループ化されたデータをテーブルに挿入する場合などに便利です。</target>
        </trans-unit>
        <trans-unit id="f217805f771e930edb43d7bf7bca94dcb4d337f2" translate="yes" xml:space="preserve">
          <source>Unlike a relational database, RethinkDB doesn&amp;rsquo;t enforce types, so NoBrainer&amp;rsquo;s type annotations on the field are validators that are run just before a document is saved to the database. If you don&amp;rsquo;t want to specify the type for a field, you can use the dummy type &lt;code&gt;object&lt;/code&gt;:</source>
          <target state="translated">リレーショナルデータベースとは異なり、RethinkDBは型を強制しないため、フィールドに対するNoBrainerの型注釈は、ドキュメントがデータベースに保存される直前に実行されるバリデーターです。フィールドのタイプを指定したくない場合は、ダミータイプ &lt;code&gt;object&lt;/code&gt; 使用できます。</target>
        </trans-unit>
        <trans-unit id="ac7e8952b13e5acdc4da0cec2cf13463f8f61d32" translate="yes" xml:space="preserve">
          <source>Unlike most NoSQL languages, you can use ReQL to build queries of arbitrary complexity.</source>
          <target state="translated">多くのNoSQL言語とは異なり、ReQLを使用して任意の複雑なクエリを構築することができます。</target>
        </trans-unit>
        <trans-unit id="c16226abce85df018665b20883ae7e6e4b1e5e95" translate="yes" xml:space="preserve">
          <source>Unlike the script that pushes data into Rabbit, to listen we need to create a &lt;em&gt;queue&lt;/em&gt;. Queues are basically mailboxes. You go to an exchange and sign up a queue for different topics from that exchange:</source>
          <target state="translated">Rabbitにデータをプッシュするスクリプトとは異なり、リッスンするには&lt;em&gt;キュー&lt;/em&gt;を作成する必要があり&lt;em&gt;ます&lt;/em&gt;。キューは基本的にメールボックスです。取引所に行き、その取引所のさまざまなトピックのキューにサインアップします。</target>
        </trans-unit>
        <trans-unit id="fdeb266883f342263bdad04080658322848b0916" translate="yes" xml:space="preserve">
          <source>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</source>
          <target state="translated">テーブル内のJSONドキュメントを更新します。JSON ドキュメント、ReQL 式、またはその組み合わせを受け取ります。</target>
        </trans-unit>
        <trans-unit id="886df39f252cb5160cd6c67abc34816e8e74dfa5" translate="yes" xml:space="preserve">
          <source>Update documents</source>
          <target state="translated">ドキュメントの更新</target>
        </trans-unit>
        <trans-unit id="889a7dd9a4b654d699b56a7a2065ecff1fbc5e44" translate="yes" xml:space="preserve">
          <source>Update returns an object that contains the following attributes:</source>
          <target state="translated">Update は、以下の属性を含むオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="78a05a6a04989744e749ac1bebf7d5f706cbd978" translate="yes" xml:space="preserve">
          <source>Updating nested fields</source>
          <target state="translated">入れ子になったフィールドの更新</target>
        </trans-unit>
        <trans-unit id="46d2ffec68a2c34115384d62c30e25333d59d0dc" translate="yes" xml:space="preserve">
          <source>Updating the state of a cluster is a surprisingly difficult problem in distributed systems. At any given point different (and potentially) conflicting configurations can be selected on different sides of a netsplit, different configurations can reach different nodes in the cluster at unpredictable times, etc.</source>
          <target state="translated">クラスタの状態を更新することは、分散システムでは驚くほど難しい問題です。任意の時点で、ネットスプリットの異なる側で異なる (そして潜在的に)相反する構成が選択されていたり、異なる構成が予測できない時間にクラスタ内の異なるノードに到達したりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="80fd74f545706363781bafd9b9b926b0120f411a" translate="yes" xml:space="preserve">
          <source>Upgrade RethinkDB to a new version</source>
          <target state="translated">RethinkDBを新しいバージョンにアップグレードする</target>
        </trans-unit>
        <trans-unit id="ebbd9e0c3ed2ca872f91fb9e343b590ec4bc9217" translate="yes" xml:space="preserve">
          <source>Upgrading RethinkDB</source>
          <target state="translated">RethinkDBのアップグレード</target>
        </trans-unit>
        <trans-unit id="449ffb29ddf3b7b7d07cbf671ea03550c293da3a" translate="yes" xml:space="preserve">
          <source>Upgrading from RethinkDB versions 1.6 or earlier has &lt;em&gt;not&lt;/em&gt; been tested with RethinkDB 2.1 and higher. However, you should be able to use the deprecated &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/tree/02b4f29e1e7f15b3edffcb68bf015578ec5783ab/scripts/migration&quot;&gt;migration script&lt;/a&gt;.</source>
          <target state="translated">RethinkDBバージョン1.6以前からのアップグレードは、RethinkDB 2.1以降ではテストされて&lt;em&gt;いません&lt;/em&gt;。ただし、非推奨の&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/tree/02b4f29e1e7f15b3edffcb68bf015578ec5783ab/scripts/migration&quot;&gt;移行スクリプト&lt;/a&gt;を使用できるはずです。</target>
        </trans-unit>
        <trans-unit id="23ae55bbf764d16d108fec022f1450aafee2eec8" translate="yes" xml:space="preserve">
          <source>Uppercases a string.</source>
          <target state="translated">文字列を大文字にします。</target>
        </trans-unit>
        <trans-unit id="659680921b67aa2e7a75e1c65027d91f2d9c5555" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://rethinkdb.com/api/python/index_status/&quot;&gt;index_status&lt;/a&gt; to retrieve a binary representation of the existing secondary index (whether it is simple, compound, multi, or based on an expression)</source>
          <target state="translated">使用&lt;a href=&quot;https://rethinkdb.com/api/python/index_status/&quot;&gt;index_status&lt;/a&gt;既存の二次インデックスのバイナリ表現を取得するために（それは単純な、化合物、マルチ、または式に基づいているかどうか）</target>
        </trans-unit>
        <trans-unit id="0a6475c00b0900ae4e541e3bb4fa60e368eea9b9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;default&lt;/code&gt; to ensure that if the &lt;code&gt;count&lt;/code&gt; field doesn&amp;rsquo;t already exist in the document, it&amp;rsquo;s added correctly, rather than letting &lt;code&gt;add&lt;/code&gt; throw an error.</source>
          <target state="translated">使用 &lt;code&gt;default&lt;/code&gt; 場合のことを確実にする &lt;code&gt;count&lt;/code&gt; フィールドがすでに文書には存在しません、それはむしろさせるよりも、正常に追加されます &lt;code&gt;add&lt;/code&gt; エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="95f978d6b1722fef203b1e9a1db06789e0fa0612" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;polygon2&lt;/code&gt; to &amp;ldquo;punch out&amp;rdquo; a hole in &lt;code&gt;polygon1&lt;/code&gt;. &lt;code&gt;polygon2&lt;/code&gt; must be completely contained within &lt;code&gt;polygon1&lt;/code&gt; and must have no holes itself (it must not be the output of &lt;code&gt;polygonSub&lt;/code&gt; itself).</source>
          <target state="translated">&lt;code&gt;polygon2&lt;/code&gt; を使用して、polygon1の穴を「パンチアウト」し &lt;code&gt;polygon1&lt;/code&gt; 。 &lt;code&gt;polygon2&lt;/code&gt; は完全に &lt;code&gt;polygon1&lt;/code&gt; 内に含まれている必要があり、それ自体に穴があってはなりません（ &lt;code&gt;polygonSub&lt;/code&gt; 自体の出力であってはなりません）。</target>
        </trans-unit>
        <trans-unit id="828e6b81f935582a6801e7c26c4473219515b699" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rethinkdb help &amp;lt;command&amp;gt;&lt;/code&gt; for a list of options. For more details, see &lt;a href=&quot;../backup/index&quot;&gt;Backing up your data&lt;/a&gt;.</source>
          <target state="translated">オプションのリストについては、 &lt;code&gt;rethinkdb help &amp;lt;command&amp;gt;&lt;/code&gt; を使用してください。詳しくは、&lt;a href=&quot;../backup/index&quot;&gt;データのバックアップを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="a3315d5d9a9dfeca99bc7ea7f478442bf8813cad" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rethinkdb restore --help&lt;/code&gt; to see the complete list of options for importing your data. Again, for more details, see &lt;a href=&quot;../backup/index&quot;&gt;Backing up your data&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;rethinkdb restore --help&lt;/code&gt; を使用して、データをインポートするためのオプションの完全なリストを表示します。繰り返しますが、詳細については、&lt;a href=&quot;../backup/index&quot;&gt;データのバックアップを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="409daa75fdb8287421baffc1e21a8ba0992f8262" translate="yes" xml:space="preserve">
          <source>Use RethinkDB as session store with Express 4.x framework. Adapted from connect-rethinkdb.</source>
          <target state="translated">Express 4.xフレームワークでセッションストアとしてRethinkDBを使用する。connect-rethinkdbからの転載です。</target>
        </trans-unit>
        <trans-unit id="f97f9ac1ace574e46eab8167a8178383052e916d" translate="yes" xml:space="preserve">
          <source>Use a multi index and a mapping function to speed getAll/contains</source>
          <target state="translated">マルチインデックスとマッピング関数を使用して getAll/contains を高速化します。</target>
        </trans-unit>
        <trans-unit id="de530dec747170ad04d3fec909d0a402b92305f1" translate="yes" xml:space="preserve">
          <source>Use clear and expressive subject</source>
          <target state="translated">明確で表現力のある主語を使う</target>
        </trans-unit>
        <trans-unit id="1a5e2238f6aaa1ef54f93db2748355c0cdf7ae64" translate="yes" xml:space="preserve">
          <source>Use emergency repair mode to reconfigure the table</source>
          <target state="translated">緊急修復モードを使用してテーブルを再構成します。</target>
        </trans-unit>
        <trans-unit id="fa6c78a4797a701376427269a923c2b9c592d55a" translate="yes" xml:space="preserve">
          <source>Use simple indexes to efficiently retrieve and order documents by the value of a single field.</source>
          <target state="translated">シンプルなインデックスを使用して、単一のフィールドの値によって効率的にドキュメントを検索し、順序付けします。</target>
        </trans-unit>
        <trans-unit id="03df0bd73e277e326500f2baf39c368061042c3e" translate="yes" xml:space="preserve">
          <source>Use the &amp;ldquo;Run&amp;rdquo; button or Shift+Enter to run the query. Now, let&amp;rsquo;s insert some JSON documents into the table:</source>
          <target state="translated">「実行」ボタンまたはShift + Enterを使用してクエリを実行します。次に、JSONドキュメントをテーブルに挿入します。</target>
        </trans-unit>
        <trans-unit id="2876eba68994921e941ce6ae6a34c2ef904b9ec2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;dump&lt;/code&gt; subcommand from the command line to create an archive of data from the cluster. This creates a &lt;strong&gt;tar.gz&lt;/strong&gt; file consisting of JSON documents and additional table metadata.</source>
          <target state="translated">コマンドラインから &lt;code&gt;dump&lt;/code&gt; サブコマンドを使用して、クラスターからデータのアーカイブを作成します。これにより、JSONドキュメントと追加のテーブルメタデータで構成される&lt;strong&gt;tar.gz&lt;/strong&gt;ファイルが作成されます。</target>
        </trans-unit>
        <trans-unit id="eb50f3d35b929185e801b877f1b0751aa34d4633" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;dump&lt;/code&gt; subcommand to create an archive of data from the cluster. This creates a &lt;strong&gt;tar.gz&lt;/strong&gt; file consisting of JSON documents and additional table metadata.</source>
          <target state="translated">&lt;code&gt;dump&lt;/code&gt; サブコマンドを使用して、クラスターからデータのアーカイブを作成します。これにより、JSONドキュメントと追加のテーブルメタデータで構成される&lt;strong&gt;tar.gz&lt;/strong&gt;ファイルが作成されます。</target>
        </trans-unit>
        <trans-unit id="8bbfd294af31d640ef3ad7e899852587e4a1d8cb" translate="yes" xml:space="preserve">
          <source>Use the commands &lt;code&gt;toEpochTime&lt;/code&gt; and &lt;code&gt;toISO8601&lt;/code&gt; to convert back.</source>
          <target state="translated">&lt;code&gt;toEpochTime&lt;/code&gt; および &lt;code&gt;toISO8601&lt;/code&gt; コマンドを使用して、元に戻します。</target>
        </trans-unit>
        <trans-unit id="25c8ead3ef495e865b02517c55d36f6c25cd0800" translate="yes" xml:space="preserve">
          <source>Use the intracluster port (&lt;code&gt;29015&lt;/code&gt; by default) to connect other nodes in the cluster to this node.</source>
          <target state="translated">クラスター内ポート（デフォルトでは &lt;code&gt;29015&lt;/code&gt; ）を使用して、クラスター内の他のノードをこのノードに接続します。</target>
        </trans-unit>
        <trans-unit id="868d9b6e254a3d9e47e5e1742d8635d9345c6ee1" translate="yes" xml:space="preserve">
          <source>Used to &amp;lsquo;zip&amp;rsquo; up the result of a join by merging the &amp;lsquo;right&amp;rsquo; fields into &amp;lsquo;left&amp;rsquo; fields of each member of the sequence.</source>
          <target state="translated">シーケンスの各メンバーの「右」フィールドを「左」フィールドにマージして、結合の結果を「圧縮」するために使用されます。</target>
        </trans-unit>
        <trans-unit id="272780d74a89aee8464a61459eba3e0fe818429a" translate="yes" xml:space="preserve">
          <source>Useful RethinkDB commands for exploring data</source>
          <target state="translated">データの探索に便利なRethinkDBコマンド</target>
        </trans-unit>
        <trans-unit id="cc9b2237413a1771afb24378d67abbf13359869d" translate="yes" xml:space="preserve">
          <source>User account tables</source>
          <target state="translated">ユーザーアカウントテーブル</target>
        </trans-unit>
        <trans-unit id="57f2b181d0a5e79a147ea1cdf41457f58dbbb3c9" translate="yes" xml:space="preserve">
          <source>Users</source>
          <target state="translated">Users</target>
        </trans-unit>
        <trans-unit id="fe239a4bde23258d27dc84379a4d908f81c05df7" translate="yes" xml:space="preserve">
          <source>Users are created by &lt;a href=&quot;../../api/javascript/insert/index&quot;&gt;inserting&lt;/a&gt; documents into the &lt;code&gt;users&lt;/code&gt;&lt;a href=&quot;../system-tables/index&quot;&gt;system table&lt;/a&gt;. Every user has an account name in the &lt;code&gt;id&lt;/code&gt; field, and an optional password.</source>
          <target state="translated">ユーザーを作成するには、 &lt;code&gt;users&lt;/code&gt; &lt;a href=&quot;../system-tables/index&quot;&gt;システムテーブルに&lt;/a&gt;ドキュメントを&lt;a href=&quot;../../api/javascript/insert/index&quot;&gt;挿入し&lt;/a&gt;ます。すべてのユーザーの &lt;code&gt;id&lt;/code&gt; フィールドにアカウント名があり、オプションのパスワードがあります。</target>
        </trans-unit>
        <trans-unit id="b0856eda2a019e0b5196369667b10a81678fe41e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;update&lt;/code&gt; to modify the &lt;code&gt;data&lt;/code&gt; field will normally merge the nested documents:</source>
          <target state="translated">通常、 &lt;code&gt;update&lt;/code&gt; を使用して &lt;code&gt;data&lt;/code&gt; フィールドを変更すると、ネストされたドキュメントがマージされます。</target>
        </trans-unit>
        <trans-unit id="cb923ef24fa89505954667a416ebf08a8cef2954" translate="yes" xml:space="preserve">
          <source>Using GeoJSON</source>
          <target state="translated">GeoJSONの使用</target>
        </trans-unit>
        <trans-unit id="2ee0b45d99570088519a4ae6ac622316e2428e8c" translate="yes" xml:space="preserve">
          <source>Using JSON data:</source>
          <target state="translated">JSONデータを使用しています。</target>
        </trans-unit>
        <trans-unit id="5193e9d892132533665ae3d20fb4b221c445f6b7" translate="yes" xml:space="preserve">
          <source>Using RethinkDB with Ruby on Rails</source>
          <target state="translated">Ruby on RailsでRethinkDBを使う</target>
        </trans-unit>
        <trans-unit id="809b510f6074ebbf8930f56b4cd49a32dc1aa406" translate="yes" xml:space="preserve">
          <source>Using RethinkDB::Handler</source>
          <target state="translated">RethinkDB::Handlerの使用</target>
        </trans-unit>
        <trans-unit id="c87acab6bd223d4993d03d1b63847d6484fd3d19" translate="yes" xml:space="preserve">
          <source>Using SSH tunneling</source>
          <target state="translated">SSH トンネリングの利用</target>
        </trans-unit>
        <trans-unit id="f2ecfece0838a81fdbbc9c35122066e4be35b348" translate="yes" xml:space="preserve">
          <source>Using SSL with RethinkDB requires proxy software on the server, such as &lt;a href=&quot;http://nginx.org/&quot;&gt;Nginx&lt;/a&gt;, &lt;a href=&quot;http://www.haproxy.org/&quot;&gt;HAProxy&lt;/a&gt; or an SSL tunnel. RethinkDB will encrypt traffic and verify the CA certification to prevent &lt;a href=&quot;http://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;man-in-the-middle&lt;/a&gt; attacks. Consult your proxy&amp;rsquo;s documentation for more details.</source>
          <target state="translated">RethinkDBでSSLを使用するには、サーバーに&lt;a href=&quot;http://nginx.org/&quot;&gt;Nginx&lt;/a&gt;、&lt;a href=&quot;http://www.haproxy.org/&quot;&gt;HAProxy&lt;/a&gt;、SSLトンネルなどのプロキシソフトウェアが必要です。RethinkDBはトラフィックを暗号化し、CA証明書を検証して&lt;a href=&quot;http://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;中間者&lt;/a&gt;攻撃を防ぎます。詳細については、プロキシのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="686d16463ab8470f47e9807e2c221cf7aa81ac78" translate="yes" xml:space="preserve">
          <source>Using TLS</source>
          <target state="translated">TLSの使用</target>
        </trans-unit>
        <trans-unit id="1a44d475de27bf8ecc5a4143d17cb29cc4787e26" translate="yes" xml:space="preserve">
          <source>Using a REPL</source>
          <target state="translated">REPLを使用して</target>
        </trans-unit>
        <trans-unit id="2d512428ae050cca4f30e03acaad3f9aabd9be07" translate="yes" xml:space="preserve">
          <source>Using a RethinkDB configuration file</source>
          <target state="translated">RethinkDBの設定ファイルを使用する</target>
        </trans-unit>
        <trans-unit id="d81aacd9868a292e3578d159e7ed1f613ef3b61d" translate="yes" xml:space="preserve">
          <source>Using a function, you can also group by date on a ReQL &lt;a href=&quot;../../../docs/dates-and-times/javascript/index&quot;&gt;date field&lt;/a&gt;.</source>
          <target state="translated">関数を使用して、ReQL &lt;a href=&quot;../../../docs/dates-and-times/javascript/index&quot;&gt;日付フィールドの&lt;/a&gt;日付でグループ化することもできます。</target>
        </trans-unit>
        <trans-unit id="5b9ec5caa02a4c07b8f2e3c0442f8ca0f1179a72" translate="yes" xml:space="preserve">
          <source>Using a similar technique to the last recipe, we can use &lt;code&gt;branch&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; to maintain a document&amp;rsquo;s &lt;code&gt;updated_at&lt;/code&gt; and &lt;code&gt;created_at&lt;/code&gt; fields by either inserting a new document or updating one depending on whether a document with a specified ID exists.</source>
          <target state="translated">最後のレシピと同様の手法を使用して、 &lt;code&gt;branch&lt;/code&gt; と &lt;code&gt;replace&lt;/code&gt; を使用して、指定されたIDのドキュメントが存在するかどうかに応じて、新しいドキュメントを挿入するか更新して、ドキュメントの &lt;code&gt;updated_at&lt;/code&gt; フィールドと &lt;code&gt;created_at&lt;/code&gt; フィールドを維持できます。</target>
        </trans-unit>
        <trans-unit id="6faf0ceb9a6f33df301c462b697d88b9951a190c" translate="yes" xml:space="preserve">
          <source>Using dynamic keys in ReQL commands</source>
          <target state="translated">ReQLコマンドでダイナミックキーを使用する</target>
        </trans-unit>
        <trans-unit id="237f42b300a70240761ddbdf32a86cce7ecb363c" translate="yes" xml:space="preserve">
          <source>Using embedded arrays</source>
          <target state="translated">埋め込み配列の使用</target>
        </trans-unit>
        <trans-unit id="97a6a1a45f47d0216453781940f9099c52dec943" translate="yes" xml:space="preserve">
          <source>Using form-encoded data:</source>
          <target state="translated">フォームエンコードされたデータを使用しています。</target>
        </trans-unit>
        <trans-unit id="67bce4759a1cb93217026e515d5d3cc2b3774b9a" translate="yes" xml:space="preserve">
          <source>Using indexes: &lt;a href=&quot;../../../api/javascript/get_all/index&quot;&gt;getAll&lt;/a&gt;, &lt;a href=&quot;../../../api/javascript/between/index&quot;&gt;between&lt;/a&gt;, &lt;a href=&quot;../../../api/javascript/eq_join/index&quot;&gt;eqJoin&lt;/a&gt; and &lt;a href=&quot;../../../api/javascript/order_by/index&quot;&gt;orderBy&lt;/a&gt;</source>
          <target state="translated">インデックスの使用：&lt;a href=&quot;../../../api/javascript/get_all/index&quot;&gt;getAll&lt;/a&gt;、&lt;a href=&quot;../../../api/javascript/between/index&quot;&gt;between&lt;/a&gt;、&lt;a href=&quot;../../../api/javascript/eq_join/index&quot;&gt;eqJoin&lt;/a&gt;、&lt;a href=&quot;../../../api/javascript/order_by/index&quot;&gt;orderBy&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a8c903deddf1788950d2da6460df95c1c59112ce" translate="yes" xml:space="preserve">
          <source>Using multi indexes and arbitrary expressions together</source>
          <target state="translated">複数のインデックスと任意の式を一緒に使う</target>
        </trans-unit>
        <trans-unit id="3d5fe0f0b3e1de4f6909c894b998f50d44a3a243" translate="yes" xml:space="preserve">
          <source>Using one Handler with multiple queries</source>
          <target state="translated">1 つのハンドラを複数のクエリで使用する</target>
        </trans-unit>
        <trans-unit id="e4d9b622d71e22f8696e9db216e36591b73d21e4" translate="yes" xml:space="preserve">
          <source>Using primary keys</source>
          <target state="translated">主キーの使用</target>
        </trans-unit>
        <trans-unit id="6b170d9f14648ef984442f6e5e63898213d065c9" translate="yes" xml:space="preserve">
          <source>Using repubsub</source>
          <target state="translated">REPUBSUBの使用</target>
        </trans-unit>
        <trans-unit id="1cec89010b614aeb7357b2820307b3ae5393bd2f" translate="yes" xml:space="preserve">
          <source>Using secondary indexes</source>
          <target state="translated">二次インデックスの使用</target>
        </trans-unit>
        <trans-unit id="5eca378782b329a4026fe26cdc21aac26acd3ebe" translate="yes" xml:space="preserve">
          <source>Using secondary indexes in RethinkDB</source>
          <target state="translated">RethinkDBでセカンダリインデックスを使用する</target>
        </trans-unit>
        <trans-unit id="84d838889946a0fac40a5de13ea1a2f43bfbcbdc" translate="yes" xml:space="preserve">
          <source>Using subqueries</source>
          <target state="translated">副問い合わせを使用する</target>
        </trans-unit>
        <trans-unit id="729c7823bfb90d234bb84656173de344c20bea56" translate="yes" xml:space="preserve">
          <source>Using subqueries to return additional fields</source>
          <target state="translated">追加フィールドを返すためのサブクエリの使用</target>
        </trans-unit>
        <trans-unit id="43a6ea12e91af64b785f205dfed680f0218707a4" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;emergency_repair&lt;/code&gt; option on a table will invalidate all the guarantees.</source>
          <target state="translated">テーブルで &lt;code&gt;emergency_repair&lt;/code&gt; オプションを使用すると、すべての保証が無効になります。</target>
        </trans-unit>
        <trans-unit id="5722bcd22448ac79f109bb697058f2d47ce09231" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;multi&lt;/code&gt; option we can group data by match A, B or C.</source>
          <target state="translated">&lt;code&gt;multi&lt;/code&gt; オプションを使用して、マッチA、B、またはCでデータをグループ化できます。</target>
        </trans-unit>
        <trans-unit id="705d0b4e12cf0053e511acba4552bde444eb041e" translate="yes" xml:space="preserve">
          <source>Using the RethinkDB authentication system</source>
          <target state="translated">RethinkDB認証システムの使用</target>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="7b90cb504c43b2a2a9b990be53f6df122a25af9b" translate="yes" xml:space="preserve">
          <source>Values and predicates may be mixed freely in the argument list.</source>
          <target state="translated">引数リストでは、値と述語を自由に混在させることができます。</target>
        </trans-unit>
        <trans-unit id="926d89b38c0fd681c3af2ba8930446b8e5f7318c" translate="yes" xml:space="preserve">
          <source>Values in CSV imports will always be imported as strings. If you want to convert those fields after import to the &lt;code&gt;number&lt;/code&gt; data type, run an &lt;code&gt;update&lt;/code&gt; query that does the conversion. An example runnable in the Data Explorer:</source>
          <target state="translated">CSVインポートの値は常に文字列としてインポートされます。インポート後にこれらのフィールドを &lt;code&gt;number&lt;/code&gt; データ型に変換する場合は、変換を行う &lt;code&gt;update&lt;/code&gt; クエリを実行します。データエクスプローラーで実行可能な例：</target>
        </trans-unit>
        <trans-unit id="15016d3c7c10ecd1c9597a5f34d435ed31333cb0" translate="yes" xml:space="preserve">
          <source>Venturing into the river</source>
          <target state="translated">川への進出</target>
        </trans-unit>
        <trans-unit id="f0bcbe1a75a85e68f5324b0bd200d85161e476dd" translate="yes" xml:space="preserve">
          <source>Version V1_0</source>
          <target state="translated">バージョン V1_0</target>
        </trans-unit>
        <trans-unit id="cfc78243db15552d9f29c3a8e82edc038370e606" translate="yes" xml:space="preserve">
          <source>Version migration</source>
          <target state="translated">バージョンの移行</target>
        </trans-unit>
        <trans-unit id="8dccbe2184e054027478456d942eb37b74c436b7" translate="yes" xml:space="preserve">
          <source>Versions V0_3 and V0_4</source>
          <target state="translated">バージョン V0_3 と V0_4</target>
        </trans-unit>
        <trans-unit id="0ee85caf439b8d9ca0edb97fdd328b72c5f720aa" translate="yes" xml:space="preserve">
          <source>Versions of RethinkDB prior to 2.3 allowed &lt;code&gt;wait&lt;/code&gt; to be called without a table or database specified. This is no longer valid; &lt;code&gt;wait&lt;/code&gt; requires explicit selection of a database or table.</source>
          <target state="translated">2.3より前のバージョンのRethinkDBでは、テーブルまたはデータベースを指定せずに &lt;code&gt;wait&lt;/code&gt; を呼び出すことができました。これはもはや有効ではありません。 &lt;code&gt;wait&lt;/code&gt; は、データベースまたはテーブルを明示的に選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="8348559cdda119c179112149d26acad5abced44c" translate="yes" xml:space="preserve">
          <source>Via a SOCKS proxy</source>
          <target state="translated">SOCKSのプロキシ経由で</target>
        </trans-unit>
        <trans-unit id="3869ea92f6e4c30ec5a50a43581bcd31fb6f5b45" translate="yes" xml:space="preserve">
          <source>Via a reverse proxy</source>
          <target state="translated">リバースプロキシ経由</target>
        </trans-unit>
        <trans-unit id="c18668323ee175259b4d33e74c3e8421bb9608b5" translate="yes" xml:space="preserve">
          <source>Vulnerabilities</source>
          <target state="translated">Vulnerabilities</target>
        </trans-unit>
        <trans-unit id="ca93ec4753d7491bad344f9646edd9948b4a7923" translate="yes" xml:space="preserve">
          <source>Vulnerability is a cyber-security term that refers to a flaw in a system that can leave it open to attack. The vulnerability may also refer to any type of weakness in a computer system itself, in a set of procedures, or in anything that leaves information security exposed to a threat. - by &lt;a href=&quot;techopedia.com/definition/13484/vulnerability/index&quot;&gt;techopedia&lt;/a&gt;</source>
          <target state="translated">脆弱性とは、システムを攻撃にさらす可能性のあるシステムの欠陥を指すサイバーセキュリティ用語です。この脆弱性は、コンピュータシステム自体、一連の手順、または情報セキュリティを脅威にさらしたままにするあらゆる種類の脆弱性を指す場合もあります。-によって&lt;a href=&quot;techopedia.com/definition/13484/vulnerability/index&quot;&gt;techopedia&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="975a1001ef5a5de638f5bda5e81a0529a895c359" translate="yes" xml:space="preserve">
          <source>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The &lt;code&gt;wait&lt;/code&gt; command blocks until the given table (or database) is fully up to date.</source>
          <target state="translated">データベース内のテーブルまたはすべてのテーブルの準備ができるまで待ちます。テーブルは、作成、再調整、または再構成した後、一時的に使用できなくなる場合があります。 &lt;code&gt;wait&lt;/code&gt; 与えられたテーブル（またはデータベース）まで、コマンド・ブロックが完全に最新の状態です。</target>
        </trans-unit>
        <trans-unit id="261d399f3036a71cf61c5c84dd87512ac2888ee9" translate="yes" xml:space="preserve">
          <source>Wait for the instance to initialize.</source>
          <target state="translated">インスタンスが初期化されるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="d0c1959b0ecb2f56be0b9936d450f3112ec53c98" translate="yes" xml:space="preserve">
          <source>Wait for the specified indexes on this table to be ready, or for all indexes on this table to be ready if no indexes are specified.</source>
          <target state="translated">このテーブル上の指定されたインデックスが準備ができるまで待つか、インデックスが指定されていない場合はこのテーブル上のすべてのインデックスが準備ができるまで待つ。</target>
        </trans-unit>
        <trans-unit id="72ca0cead14e5f62674072d67d6d08760af08beb" translate="yes" xml:space="preserve">
          <source>We also let you slice the time into the date and the current time of day (a time and a duration, respectively):</source>
          <target state="translated">また、時間を日付と現在の時間(それぞれ時間と期間)にスライスさせることもできます。</target>
        </trans-unit>
        <trans-unit id="7776b91d96b28a68efde88ac27af064591f79f60" translate="yes" xml:space="preserve">
          <source>We also recently contracted Kyle Kingsbury, known to the Internet as &lt;a href=&quot;https://twitter.com/aphyr&quot;&gt;@aphyr&lt;/a&gt;, as an independent researcher to evaluate RethinkDB. He wrote &lt;a href=&quot;https://aphyr.com/tags/RethinkDB&quot;&gt;a pair of blog posts&lt;/a&gt; on how he tested and confirmed RethinkDB clustering and consistency guarantees.</source>
          <target state="translated">また、最近、インターネットで&lt;a href=&quot;https://twitter.com/aphyr&quot;&gt;@aphyr&lt;/a&gt;として知られているカイルキングズベリー氏を、RethinkDBを評価する独立した研究者として契約しました。彼は&lt;a href=&quot;https://aphyr.com/tags/RethinkDB&quot;&gt;、&lt;/a&gt; RethinkDBのクラスタリングと一貫性の保証をどのようにテストおよび確認したかについて、2組のブログ投稿を書きました。</target>
        </trans-unit>
        <trans-unit id="6d342d6dbf43f23b7c55cc56df79901ba303f19e" translate="yes" xml:space="preserve">
          <source>We always welcome suggestions on how to improve our documentation, or specific ReQL questions.</source>
          <target state="translated">ドキュメントを改善する方法や、特定のReQLに関する質問などのご提案をいつでもお待ちしています。</target>
        </trans-unit>
        <trans-unit id="9f7018091e8774b88423f84671a497d40e60360f" translate="yes" xml:space="preserve">
          <source>We can also efficiently retrieve documents by their primary key using the &lt;code&gt;get&lt;/code&gt; command. We can use one of the ids generated in the previous example:</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; コマンドを使用して、主キーによってドキュメントを効率的に取得することもできます。前の例で生成されたIDの1つを使用できます。</target>
        </trans-unit>
        <trans-unit id="64de53529b50a2fdc1bd84d07e544b9a92f93299" translate="yes" xml:space="preserve">
          <source>We can also specify more in-depth validation on fields. We can modify the &lt;code&gt;Article&lt;/code&gt; model in a few ways to ensure the data has the properties we expect:</source>
          <target state="translated">フィールドに対してより詳細な検証を指定することもできます。いくつかの方法で &lt;code&gt;Article&lt;/code&gt; モデルを変更して、期待するプロパティがデータに含まれるようにします。</target>
        </trans-unit>
        <trans-unit id="c63294a56bafc0eef492fd77b1e4ed5da84b133b" translate="yes" xml:space="preserve">
          <source>We can chain the &lt;code&gt;zip&lt;/code&gt; command at the end of the query to merge the two fields into a single document. For example, the following query:</source>
          <target state="translated">クエリの最後に &lt;code&gt;zip&lt;/code&gt; コマンドをチェーンして、2つのフィールドを1つのドキュメントにマージできます。たとえば、次のクエリ：</target>
        </trans-unit>
        <trans-unit id="13f934be941448b5e9e200ea54513a21677bf61d" translate="yes" xml:space="preserve">
          <source>We can create a secondary index on the &lt;code&gt;company&lt;/code&gt; field of the &lt;code&gt;companies&lt;/code&gt; table, and perform our query by taking advantage of the secondary index:</source>
          <target state="translated">私たちは、上のセカンダリインデックスを作成することができ &lt;code&gt;company&lt;/code&gt; の分野 &lt;code&gt;companies&lt;/code&gt; テーブルを、セカンダリインデックスを利用することにより、当社のクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="421ccb395f490935893503fb8285f8416b351dd1" translate="yes" xml:space="preserve">
          <source>We can join the two tables as follows:</source>
          <target state="translated">以下のように2つのテーブルを結合することができます。</target>
        </trans-unit>
        <trans-unit id="238cbcbb68c7b2e609fdf95cbb4c9da849d12481" translate="yes" xml:space="preserve">
          <source>We can model the relationship between authors and posts by using embedded arrays as follows. Consider this example document in the table &lt;code&gt;authors&lt;/code&gt;:</source>
          <target state="translated">次のように埋め込み配列を使用して、著者と投稿の関係をモデル化できます。テーブル &lt;code&gt;authors&lt;/code&gt; の次のサンプルドキュメントについて考えます。</target>
        </trans-unit>
        <trans-unit id="64689a843a25c01b96b2b56aefbb1e9ab53997e6" translate="yes" xml:space="preserve">
          <source>We can now filter based on these times:</source>
          <target state="translated">これらの時代を踏まえたフィルタリングができるようになりました。</target>
        </trans-unit>
        <trans-unit id="a8b638b442b219f731f46422f2827d1aa6301062" translate="yes" xml:space="preserve">
          <source>We can now sort the stargazers by the number of their followers!</source>
          <target state="translated">スターゲイザーのフォロワー数でソートできるようになりました!</target>
        </trans-unit>
        <trans-unit id="c67d818e11b259fa9a1add1ae55aba6b19cb3598" translate="yes" xml:space="preserve">
          <source>We can rewrite the previous query with &lt;code&gt;r.branch&lt;/code&gt; too.</source>
          <target state="translated">前のクエリを &lt;code&gt;r.branch&lt;/code&gt; で書き換えることもできます。</target>
        </trans-unit>
        <trans-unit id="5d13a4948443772b564d9f81fd28607546884e82" translate="yes" xml:space="preserve">
          <source>We can schedule it on the Tornado IO loop with this code:</source>
          <target state="translated">このコードを使ってTornado IOループでスケジュールすることができます。</target>
        </trans-unit>
        <trans-unit id="44a3bc4b8cc860b147fafd28edacfcceffded305" translate="yes" xml:space="preserve">
          <source>We can schedule it on the Twisted &lt;code&gt;reactor&lt;/code&gt; with this code:</source>
          <target state="translated">次のコードを使用して、Twisted &lt;code&gt;reactor&lt;/code&gt; でスケジュールできます。</target>
        </trans-unit>
        <trans-unit id="937a9712d9866bbe0eeb7d1ad3b0b2515f02e6ff" translate="yes" xml:space="preserve">
          <source>We can use the following syntax:</source>
          <target state="translated">以下のような構文を使うことができます。</target>
        </trans-unit>
        <trans-unit id="749984b3d67df427b6d7089de846645a0b19255b" translate="yes" xml:space="preserve">
          <source>We compose the query on the client and call &lt;code&gt;run&lt;/code&gt; only once. Remember to call &lt;code&gt;run&lt;/code&gt; only once on the complex query when you&amp;rsquo;re ready for it to be executed.</source>
          <target state="translated">クライアントでクエリを作成し、 &lt;code&gt;run&lt;/code&gt; を 1回だけ呼び出します。 &lt;code&gt;run&lt;/code&gt; 準備ができたら、複雑なクエリでrunを 1回だけ呼び出すことを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="7fc2949011d5056e98a8b39f265e81ae5fa84b31" translate="yes" xml:space="preserve">
          <source>We define &lt;code&gt;r.monday...r.sunday&lt;/code&gt; and &lt;code&gt;r.january...r.december&lt;/code&gt; for convenience:</source>
          <target state="translated">便宜上、 &lt;code&gt;r.monday...r.sunday&lt;/code&gt; と &lt;code&gt;r.january...r.december&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="745b28655c36626ee40e3202ef17f3821beb6747" translate="yes" xml:space="preserve">
          <source>We felt that performing automatic maintenance operations on the cluster (such as adding shards) is a higher-level component, and that it&amp;rsquo;s crucial to have a really good implementation of the lower-level components done first. As a result, the clustering system is organized into three layers:</source>
          <target state="translated">クラスターでの自動保守操作（シャードの追加など）は上位レベルのコンポーネントであり、最初に下位レベルコンポーネントの本当に優れた実装を行うことが重要であると感じました。その結果、クラスタリングシステムは3つの層に編成されます。</target>
        </trans-unit>
        <trans-unit id="05c0c11e81d4866e9926eff039590fc5082fe2af" translate="yes" xml:space="preserve">
          <source>We first tested this workload in the &lt;a href=&quot;https://www.rethinkdb.com/api/javascript/run/&quot;&gt;default configuration for RethinkDB which forbids stale reads&lt;/a&gt;. In this configuration, RethinkDB is able to perform 134.7K QPS on a single server. While the overhead of network communication between the servers becomes visible when increasing the cluster size from one to two servers, adding further servers to the cluster demonstrates the near-linear scalability of RethinkDB, up to over 500K QPS on 16 servers.</source>
          <target state="translated">最初に、この&lt;a href=&quot;https://www.rethinkdb.com/api/javascript/run/&quot;&gt;読み取りを、古い読み取りを禁止するRethinkDB&lt;/a&gt;のデフォルト構成でテストしました。この構成では、RethinkDBは1台のサーバーで134.7K QPSを実行できます。クラスタサイズを1台から2台に増やすと、サーバー間のネットワーク通信のオーバーヘッドが見えてきますが、クラスタにサーバーを追加すると、16台のサーバーで最大500K QPSまでのRethinkDBのほぼ線形のスケーラビリティが示されます。</target>
        </trans-unit>
        <trans-unit id="b3bfcc94969b31f058be9abcc163977af2f5f363" translate="yes" xml:space="preserve">
          <source>We found that in a mixed read/write workload, RethinkDB with two servers was able to perform nearly 16K queries per second (QPS) and scaled to almost 120K QPS while in a 16-node cluster. Under a read only workload and synchronous read settings, RethinkDB was able to scale from about 150K QPS on a single node up to over 550K QPS on 16 nodes. Under the same workload, in an asynchronous &amp;ldquo;outdated read&amp;rdquo; setting, RethinkDB went from 150K QPS on one server to 1.3M in a 16-node cluster.</source>
          <target state="translated">読み取り/書き込みの混合ワークロードでは、2台のサーバーを備えたRethinkDBは、1秒あたり約16Kのクエリ（QPS）を実行でき、16ノードのクラスター内で約120KのQPSにスケーリングできることがわかりました。 RethinkDBは、読み取り専用のワークロードと同期読み取り設定の下で、単一ノードでの約150K QPSから16ノードでの550K QPSまで拡張できました。同じワークロードの下で、非同期の「古い読み取り」設定では、RethinkDBは1つのサーバーの150K QPSから16ノードクラスターの1.3Mになりました。</target>
        </trans-unit>
        <trans-unit id="dbff981f6fd069bd5c8d8cf7eb708cfb69dba1bf" translate="yes" xml:space="preserve">
          <source>We pass the &lt;code&gt;lastName&lt;/code&gt; saved from the previous set to &lt;code&gt;between&lt;/code&gt; as the start index. For the end index, we pass &lt;code&gt;null&lt;/code&gt; to return documents from the start index to the table&amp;rsquo;s end. The &lt;code&gt;leftBound&lt;/code&gt; parameter tells &lt;code&gt;between&lt;/code&gt; not to include the first record, since it was already returned as part of the previous page.</source>
          <target state="translated">前のセットから保存された &lt;code&gt;lastName&lt;/code&gt; を開始インデックスとして &lt;code&gt;between&lt;/code&gt; に渡します。終了インデックスについては、 &lt;code&gt;null&lt;/code&gt; を渡して、開始インデックスからテーブルの最後までドキュメントを返します。 &lt;code&gt;leftBound&lt;/code&gt; のパラメータが伝え &lt;code&gt;between&lt;/code&gt; 、それはすでに、前のページの一部として返されたため、最初のレコードを含みません。</target>
        </trans-unit>
        <trans-unit id="5e4ab3e8535ad86d1930d6966ac3b697d68d7c2d" translate="yes" xml:space="preserve">
          <source>We run one query at a time. Results show the average over five runs.</source>
          <target state="translated">一度に1つのクエリを実行します。結果は、5回の実行での平均値を示しています。</target>
        </trans-unit>
        <trans-unit id="0cfdf1121b09e1f9602550a8e25484415b81e4d7" translate="yes" xml:space="preserve">
          <source>We run this query five times for every cluster size and then calculate the average runtime. The results table below shows these averages.</source>
          <target state="translated">このクエリをクラスタサイズごとに5回実行し、平均実行時間を計算します。下の結果表にこれらの平均値を示します。</target>
        </trans-unit>
        <trans-unit id="2f9e5f655eaf28e2126ba52b421344bdf3a5d0a2" translate="yes" xml:space="preserve">
          <source>We should get back an object that looks like this:</source>
          <target state="translated">こんな感じのオブジェクトが返ってくるはずです。</target>
        </trans-unit>
        <trans-unit id="196493c218ffa561ad6e0835430dcfa5bcdcb59b" translate="yes" xml:space="preserve">
          <source>We use Github for issue tracking: &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues&quot;&gt;https://github.com/rethinkdb/rethinkdb/issues&lt;/a&gt;. If you want to report a suspected bug in RethinkDB, open an issue there.</source>
          <target state="translated">問題の追跡にはGithubを使用します：&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues&quot;&gt;https&lt;/a&gt; : //github.com/rethinkdb/rethinkdb/issues。RethinkDBのバグの疑いを報告する場合は、そこで問題をオープンしてください。</target>
        </trans-unit>
        <trans-unit id="2572dfb8bb2188aed94b74fdd625ca4d557e9b76" translate="yes" xml:space="preserve">
          <source>We use the ISO 8601 definition of a week, which starts with Monday, represented as &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; として表される、月曜日から始まる週のISO 8601定義を使用します。</target>
        </trans-unit>
        <trans-unit id="665c5f87426678ac0c4134325d4f37ee25bde4ef" translate="yes" xml:space="preserve">
          <source>We used a port of YCSB based on our official Java driver and intend to submit a pull request for it in the near future. &lt;a href=&quot;https://github.com/rethinkdb/ycsb&quot;&gt;Our fork is available for review here&lt;/a&gt;.</source>
          <target state="translated">私たちは公式のJavaドライバーに基づいてYCSBのポートを使用し、近い将来にそのプルリクエストを送信する予定です。&lt;a href=&quot;https://github.com/rethinkdb/ycsb&quot;&gt;フォークはこちらで確認できます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="18dd2c5b2e52082a2c22b308916628b31080863f" translate="yes" xml:space="preserve">
          <source>We wanted to provide a reasonably comprehensive RethinkDB test that covers a variety of different workloads. We chose to use the YCSB testing framework as a reliable and community-approved means of conducting rigorous testing on our database. We saw that all of the tests resulted in near-linear scalability as we moved from a single RethinkDB instance to a 16 node cluster. Although most of the tests resulted in performance metrics that suggest horizontal scalability, we know that there are plenty of improvements to make as the database evolves.</source>
          <target state="translated">私たちは、さまざまなワークロードをカバーする合理的に包括的なRethinkDBテストを提供したいと考えていました。私たちは、信頼性が高くコミュニティに認められているYCSBテストフレームワークを、データベースの厳密なテストを実施する手段として使用することを選択しました。1つのRethinkDBインスタンスから16ノードのクラスタに移行すると、すべてのテストでほぼ直線的なスケーラビリティが得られることがわかりました。ほとんどのテストでは、水平方向のスケーラビリティを示唆するパフォーマンス指標が得られましたが、データベースの進化に合わせて改善すべき点がたくさんあることがわかりました。</target>
        </trans-unit>
        <trans-unit id="f96b69538b15b08a373ab863833264fbb5d412fa" translate="yes" xml:space="preserve">
          <source>We were fortunate enough to receive free credits from Rackspace to perform the majority of these tests and are very grateful for their contributions to open source software. All of &lt;a href=&quot;https://www.rackspace.com/cloud/servers/onmetal&quot;&gt;Rackspace&amp;rsquo;s OnMetal offerings can be found here&lt;/a&gt;.</source>
          <target state="translated">これらのテストの大部分を実行するために、Rackspaceから無料のクレジットを受け取ることができて幸運であり、オープンソースソフトウェアへの貢献に非常に感謝しています。&lt;a href=&quot;https://www.rackspace.com/cloud/servers/onmetal&quot;&gt;Rackspaceの&lt;/a&gt;すべてのOnMetalオファリングはここにあります。</target>
        </trans-unit>
        <trans-unit id="164561a49c5ec1d8b8043aa717cadb49a0004f16" translate="yes" xml:space="preserve">
          <source>We won&amp;rsquo;t need a &lt;strong&gt;group&lt;/strong&gt; step for this example.</source>
          <target state="translated">この例では、&lt;strong&gt;グループ&lt;/strong&gt;ステップは必要ありません。</target>
        </trans-unit>
        <trans-unit id="5adda084a6c0ad257b70d2264a1e0d1c00f337fa" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;d love to answer any questions you have about these tests. Come join us at &lt;a href=&quot;http://slack.rethinkdb.com&quot;&gt;http://slack.rethinkdb.com&lt;/a&gt; and feel free to ask more specific questions we don&amp;rsquo;t answer here by pinging @danielmewes or @dalanmiller.</source>
          <target state="translated">これらのテストについてご不明な点がございましたら、お気軽にお問い合わせください。&lt;a href=&quot;http://slack.rethinkdb.com&quot;&gt;http://slack.rethinkdb.comに&lt;/a&gt;参加して、@ danielmewesまたは@dalanmillerにpingを送信して、ここで答えられない具体的な質問をしてください。</target>
        </trans-unit>
        <trans-unit id="60cf0d58afd9a9633a947183c3b149f711f93f0f" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll attempt to answer these questions by using workloads from the YCSB benchmark suite. You can &lt;a href=&quot;https://labs.yahoo.com/news/yahoo-cloud-serving-benchmark&quot;&gt;learn more about YCSB here&lt;/a&gt;, and &lt;a href=&quot;https://github.com/rethinkdb/ycsb&quot;&gt;review the source code here&lt;/a&gt;. Expanding beyond the YCSB workloads we selected, we created an additional test which investigates scalability for analytic workloads.</source>
          <target state="translated">YCSBベンチマークスイートのワークロードを使用して、これらの質問への回答を試みます。あなたはできます&lt;a href=&quot;https://labs.yahoo.com/news/yahoo-cloud-serving-benchmark&quot;&gt;ここYCSBについての詳細を学び&lt;/a&gt;、そして&lt;a href=&quot;https://github.com/rethinkdb/ycsb&quot;&gt;ここでソースコードを確認します&lt;/a&gt;。選択したYCSBワークロードを超えて、分析ワークロードのスケーラビリティを調査する追加のテストを作成しました。</target>
        </trans-unit>
        <trans-unit id="353d7cec36aac636b04e7dd7fdc90d2f15428252" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll go over the other two sources in more detail.</source>
          <target state="translated">他の2つのソースについて詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="85193fc8eeecb00e53dca414ff426e4d326bd9f6" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll sign an NDA if necessary, and can set up an FTP server for you to transfer the file to if it&amp;rsquo;s large.</source>
          <target state="translated">必要に応じてNDAに署名し、ファイルが大きい場合にファイルを転送するFTPサーバーを設定できます。</target>
        </trans-unit>
        <trans-unit id="66df9144e5385962d5f6afd0a4d7f84e1cf0c9a6" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re exploring best practices to determine whether it&amp;rsquo;s possible to build a really good general purpose automation layer that controls the cluster by automatically enforcing user-specified rules (such as resharding the system when the shard balance drops below a certain threshold).</source>
          <target state="translated">ユーザー指定のルール（シャードのバランスが特定のしきい値を下回ったときにシステムを再シャーディングするなど）を自動的に適用することでクラスターを制御する非常に優れた汎用オートメーションレイヤーを構築できるかどうかを判断するためのベストプラクティスを調査しています。</target>
        </trans-unit>
        <trans-unit id="a538ffd70620351939ce46ac034c5da4165359af" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re working on an easier syntax for performing multiple aggregations after &lt;code&gt;group&lt;/code&gt; commands. Follow &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/1725&quot;&gt;issue 1725&lt;/a&gt; to track progress on this.</source>
          <target state="translated">&lt;code&gt;group&lt;/code&gt; コマンドの後に複数の集計を実行するためのより簡単な構文に取り組んでいます。これに関する進捗状況を追跡するには、&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/1725&quot;&gt;問題1725&lt;/a&gt;に従ってください。</target>
        </trans-unit>
        <trans-unit id="bf8c4b29bb88f8bd8bcd0cf73f362e495df9a83a" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve just inserted two rows into the &lt;code&gt;tv_shows&lt;/code&gt; table. Let&amp;rsquo;s verify the number of rows inserted:</source>
          <target state="translated">&lt;code&gt;tv_shows&lt;/code&gt; テーブルに2つの行を挿入しました。挿入された行数を確認しましょう：</target>
        </trans-unit>
        <trans-unit id="0701e0f428cf7608aac0acb0258957e688e4a72b" translate="yes" xml:space="preserve">
          <source>Web frontend written in PHP to create/rename/update/delete RethinkDB databases/tables/docs and run ReQL queries in PHP.</source>
          <target state="translated">PHP で書かれた Web フロントエンドは、RethinkDB データベース/テーブル/docs を作成/改名/更新/削除し、PHP で ReQL クエリを実行します。</target>
        </trans-unit>
        <trans-unit id="7a6ea1d18d178d755c66b826316925c783a2b7a2" translate="yes" xml:space="preserve">
          <source>Web options</source>
          <target state="translated">ウェブオプション</target>
        </trans-unit>
        <trans-unit id="bc84915ab33bd5e1a1327bf7c2b3bb4fd9f8f422" translate="yes" xml:space="preserve">
          <source>WebGL</source>
          <target state="translated">WebGL</target>
        </trans-unit>
        <trans-unit id="38dbec004299870c0658d95152cb99afac826447" translate="yes" xml:space="preserve">
          <source>Wercker box for RethinkDB, by &lt;a href=&quot;https://github.com/mies&quot;&gt;@mies&lt;/a&gt;.</source>
          <target state="translated">@miesによる&lt;a href=&quot;https://github.com/mies&quot;&gt;RethinkDBのWercker&lt;/a&gt;ボックス。</target>
        </trans-unit>
        <trans-unit id="04042d6ae7f7ec89f3280cedaa0c0eacdb0730a2" translate="yes" xml:space="preserve">
          <source>What CAP theorem tradeoffs are made in RethinkDB?</source>
          <target state="translated">RethinkDBではどのようなCAP定理のトレードオフが行われているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="3ef0a4b65de6f3a94060b4fcb91fcc42ad42201d" translate="yes" xml:space="preserve">
          <source>What Elasticsearch does</source>
          <target state="translated">Elasticsearchができること</target>
        </trans-unit>
        <trans-unit id="c9d3e613df197c31b8cbb198ef82019567e7ac08" translate="yes" xml:space="preserve">
          <source>What are availability and performance impacts of sharding and replication?</source>
          <target state="translated">シャーディングとレプリケーションの可用性とパフォーマンスへの影響は?</target>
        </trans-unit>
        <trans-unit id="64c26d1ad1ec301943108eaa27899279ef7ac1fd" translate="yes" xml:space="preserve">
          <source>What does &amp;lsquo;received invalid clustering header&amp;rsquo; mean?</source>
          <target state="translated">「無効なクラスタリングヘッダーを受信した」とはどういう意味ですか？</target>
        </trans-unit>
        <trans-unit id="2a9c3f058de7e47106c818dfd4d4338f9cdd8f8d" translate="yes" xml:space="preserve">
          <source>What does it mean to be inefficient here? When operating on grouped data rather than a grouped stream, &lt;em&gt;all&lt;/em&gt; of the data has to be available on the node processing the query. This means that the operation will only use one server&amp;rsquo;s resources, and will require memory proportional to the size of the grouped data it&amp;rsquo;s operating on. (In the case of the &lt;a href=&quot;../order_by/index&quot;&gt;orderBy&lt;/a&gt; in the inefficient example, that means memory proportional &lt;strong&gt;to the size of the table&lt;/strong&gt;.) The array limit is also enforced for grouped data, so the &lt;code&gt;orderBy&lt;/code&gt; example would fail for tables with more than 100,000 rows without changing the &lt;code&gt;arrayLimit&lt;/code&gt; option to &lt;code&gt;run&lt;/code&gt;.</source>
          <target state="translated">ここで非効率だとはどういう意味ですか？グループ化されたストリームではなくグループ化されたデータを操作する場合、クエリを処理するノードで&lt;em&gt;すべて&lt;/em&gt;のデータを使用できる必要があります。つまり、操作では1つのサーバーのリソースのみが使用され、操作対象のグループ化されたデータのサイズに比例したメモリが必要になります。 （非効率的な例の&lt;a href=&quot;../order_by/index&quot;&gt;orderBy&lt;/a&gt;の場合、これはメモリ&lt;strong&gt;がテーブルのサイズに&lt;/strong&gt;比例&lt;strong&gt;する&lt;/strong&gt;ことを意味&lt;strong&gt;します&lt;/strong&gt;。）配列の制限はグループ化されたデータにも適用されるため、 &lt;code&gt;orderBy&lt;/code&gt; の例は、100,000を超える行があるテーブルでは失敗します。 &lt;code&gt;run&lt;/code&gt; &lt;code&gt;arrayLimit&lt;/code&gt; オプション。</target>
        </trans-unit>
        <trans-unit id="04e01954d9f8d8e77895e864b870472fafc1d2fc" translate="yes" xml:space="preserve">
          <source>What governs the location of shards and replicas in the cluster?</source>
          <target state="translated">クラスタ内のシャードとレプリカの位置はどうなっているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="aeecbe039cd869cf6b58de21cfda895bec05bbb8" translate="yes" xml:space="preserve">
          <source>What happens when a server becomes unreachable?</source>
          <target state="translated">サーバーにアクセスできなくなるとどうなるのか?</target>
        </trans-unit>
        <trans-unit id="84f1d71d28f72c7bce86041433bf5e9d8269c36b" translate="yes" xml:space="preserve">
          <source>What is RethinkDB?</source>
          <target state="translated">RethinkDBとは?</target>
        </trans-unit>
        <trans-unit id="f33f6cf6befea467b79ff5ee7b18f9685716e026" translate="yes" xml:space="preserve">
          <source>What is vulnerability?</source>
          <target state="translated">脆弱性とは何か?</target>
        </trans-unit>
        <trans-unit id="792fc2e237565f7453ac727b16937607f543048d" translate="yes" xml:space="preserve">
          <source>What sort of performance can I expect from a RethinkDB cluster?</source>
          <target state="translated">RethinkDBクラスタにはどのようなパフォーマンスが期待できますか?</target>
        </trans-unit>
        <trans-unit id="c273c7432071ee60c46a1ad37f5833a8812489f7" translate="yes" xml:space="preserve">
          <source>What to do after a crash</source>
          <target state="translated">クラッシュ後の対処法</target>
        </trans-unit>
        <trans-unit id="e860c67987579ed63e69cb49c8bae21cee8ab0f2" translate="yes" xml:space="preserve">
          <source>What you likely want is the result of using &lt;code&gt;zip&lt;/code&gt; with that. For clarity, we&amp;rsquo;ll use &lt;code&gt;without&lt;/code&gt; to drop the &lt;code&gt;id&lt;/code&gt; field from the games table (it conflicts with the &lt;code&gt;id&lt;/code&gt; field for the players and it&amp;rsquo;s redundant anyway), and we&amp;rsquo;ll order it by the games.</source>
          <target state="translated">あなたがおそらく望んでいるのは、 &lt;code&gt;zip&lt;/code&gt; を使った結果です。わかりやすくするために、ゲームテーブルから &lt;code&gt;id&lt;/code&gt; フィールドを削除 &lt;code&gt;without&lt;/code&gt; に使用し（プレーヤーの &lt;code&gt;id&lt;/code&gt; フィールドと競合し、いずれにしても冗長です）、ゲームごとに順序付けします。</target>
        </trans-unit>
        <trans-unit id="b2412f7ca4f8b6170188b11c9ed6cd4be9e075b0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;count&lt;/code&gt; is called on a sequence with a predicate value or function, it returns the number of elements in the sequence equal to that value or where the function returns &lt;code&gt;true&lt;/code&gt;. On a &lt;a href=&quot;../binary/index&quot;&gt;binary&lt;/a&gt; object, &lt;code&gt;count&lt;/code&gt; returns the size of the object in bytes; on strings, &lt;code&gt;count&lt;/code&gt; returns the string&amp;rsquo;s length. This is determined by counting the number of Unicode codepoints in the string, counting combining codepoints separately.</source>
          <target state="translated">場合 &lt;code&gt;count&lt;/code&gt; 述語値または機能を有するシーケンスで呼び出され、それが配列の要素の数を返す値に等しいまたは機能が戻り、 &lt;code&gt;true&lt;/code&gt; 。上で&lt;a href=&quot;../binary/index&quot;&gt;バイナリ&lt;/a&gt;オブジェクト、 &lt;code&gt;count&lt;/code&gt; バイト単位でオブジェクトのサイズを返します。文字列では、 &lt;code&gt;count&lt;/code&gt; は文字列の長さを返します。これは、文字列内のUnicodeコードポイントの数を数え、結合コードポイントを個別に数えることによって決定されます。</target>
        </trans-unit>
        <trans-unit id="4a943aaea897090869701fc63a61450e4a044356" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;includeTypes&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, there will be three fields:</source>
          <target state="translated">とき &lt;code&gt;includeTypes&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; 、三つのフィールドが存在します。</target>
        </trans-unit>
        <trans-unit id="db59537e91adcaeb56b2666cc25c2ed2d6fefa3a" translate="yes" xml:space="preserve">
          <source>When a RethinkDB node starts, it will broadcast its &amp;ldquo;canonical&amp;rdquo; IP address, the address other nodes should use to connect to it. By default, the canonical address is the server&amp;rsquo;s primary IP address. However, if this address is an internal IP address that isn&amp;rsquo;t reachable by other nodes (for example, the nodes are on different networks), the nodes will not be able to reach one another. You may receive an error message such as:</source>
          <target state="translated">RethinkDBノードが起動すると、その「正規」IPアドレスをブロードキャストします。これは、他のノードが接続するために使用する必要があるアドレスです。デフォルトでは、正規アドレスはサーバーのプライマリIPアドレスです。ただし、このアドレスが他のノードから到達できない内部IPアドレスである場合（たとえば、ノードが異なるネットワーク上にある場合）、ノードは互いに到達できません。次のようなエラーメッセージが表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="bbdb94ecb03dbf42358c1312dbd7d67d5be3564f" translate="yes" xml:space="preserve">
          <source>When a document is deleted, &lt;code&gt;new_val&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;; when a document is inserted, &lt;code&gt;old_val&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">ドキュメントが削除されると、 &lt;code&gt;new_val&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; になります。ドキュメントが挿入されると、 &lt;code&gt;old_val&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="703065bb49bf10d98540e55348b4199e4bf90f6b" translate="yes" xml:space="preserve">
          <source>When a node in the cluster receives a query from the client, it evaluates the query in the following way.</source>
          <target state="translated">クラスタ内のノードがクライアントからクエリを受信すると、次のようにしてクエリを評価します。</target>
        </trans-unit>
        <trans-unit id="7895cfeb7489d6ebc6349cdf88d440ab9cae0b6b" translate="yes" xml:space="preserve">
          <source>When a server connects or disconnects, its log entries will be added to or removed from the &lt;code&gt;logs&lt;/code&gt; table. The action of connecting or disconnecting will not generate changefeed events for those log entries.</source>
          <target state="translated">サーバーが接続または切断すると、そのログエントリが &lt;code&gt;logs&lt;/code&gt; テーブルに追加またはログテーブルから削除されます。接続または切断のアクションでは、これらのログエントリのchangefeedイベントは生成されません。</target>
        </trans-unit>
        <trans-unit id="734fd0f99a381fd084bb9daae0c46a98286a6f99" translate="yes" xml:space="preserve">
          <source>When a server fails, it may be because of a network availability issue or something more serious, such as system failure. In a multi-server configuration, where tables have multiple replicas distributed among multiple physical machines, RethinkDB will be able to maintain availability automatically in many cases.</source>
          <target state="translated">サーバに障害が発生した場合、ネットワークの可用性の問題か、システム障害のようなもっと深刻なものが原因である可能性があります。テーブルが複数の物理マシン間に複数のレプリカを分散しているマルチサーバ構成では、RethinkDBは多くの場合、自動的に可用性を維持することができます。</target>
        </trans-unit>
        <trans-unit id="ff4dc39866df867c372286f6ac82dbbab1db65cb" translate="yes" xml:space="preserve">
          <source>When applied to a single object, &lt;code&gt;hasFields&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the object has the fields and &lt;code&gt;false&lt;/code&gt; if it does not. When applied to a sequence, it will return a new sequence (an array or stream) containing the elements that have the specified fields.</source>
          <target state="translated">単一のオブジェクトに適用すると、 &lt;code&gt;hasFields&lt;/code&gt; は返し &lt;code&gt;true&lt;/code&gt; オブジェクトはフィールドと持っている場合 &lt;code&gt;false&lt;/code&gt; そうでない場合。シーケンスに適用すると、指定されたフィールドを持つ要素を含む新しいシーケンス（配列またはストリーム）を返します。</target>
        </trans-unit>
        <trans-unit id="b45a355356ae32e6ce951e83aa32fd7dafeeac3c" translate="yes" xml:space="preserve">
          <source>When called with values, returns &lt;code&gt;true&lt;/code&gt; if a sequence contains all the specified values. When called with predicate functions, returns &lt;code&gt;true&lt;/code&gt; if for each predicate there exists at least one element of the stream where that predicate returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">値を指定して呼び出すと、シーケンスに指定されたすべての値が含まれている場合に &lt;code&gt;true&lt;/code&gt; を返します。述語関数で呼び出されたときに、戻り &lt;code&gt;true&lt;/code&gt; 各述語のためにここでその述語戻りストリームの少なくとも一つの元素が存在する場合 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f48292c69cb277e3b22337ed22c98c2ced2902a" translate="yes" xml:space="preserve">
          <source>When creating a table you can specify the following options:</source>
          <target state="translated">テーブルを作成する際には、以下のオプションを指定することができます。</target>
        </trans-unit>
        <trans-unit id="95ca91852d7312c3e3e0989f96be0729d530f742" translate="yes" xml:space="preserve">
          <source>When grouped data are returned to the client, they are transformed into a client-specific native type. (Something similar is done with &lt;a href=&quot;../../../docs/dates-and-times/javascript/index&quot;&gt;times&lt;/a&gt;.) In JavaScript, grouped data are transformed into an &lt;code&gt;Array&lt;/code&gt;. If you instead want to receive the raw pseudotype from the server, you can specify &lt;code&gt;groupFormat: 'raw'&lt;/code&gt; as an optional argument to &lt;code&gt;run&lt;/code&gt;:</source>
          <target state="translated">グループ化されたデータがクライアントに返されると、それらはクライアント固有のネイティブタイプに変換されます。（同様の処理が&lt;a href=&quot;../../../docs/dates-and-times/javascript/index&quot;&gt;時間&lt;/a&gt;で行われます。）JavaScriptでは、グループ化されたデータが &lt;code&gt;Array&lt;/code&gt; 変換されます。代わりにサーバーから &lt;code&gt;groupFormat: 'raw'&lt;/code&gt; を受け取りたい場合は、 &lt;code&gt;run&lt;/code&gt; するオプションの引数としてgroupFormat： 'raw'を指定できます。</target>
        </trans-unit>
        <trans-unit id="733c238b3057fb40dff28896edf33c02a6ec4626" translate="yes" xml:space="preserve">
          <source>When new servers (including proxies) join an existing cluster, it will synchronize with all the user account information, including passwords, from that cluster. This includes the &lt;code&gt;admin&lt;/code&gt; account. However, a server with no admin password set cannot join an existing cluster that &lt;em&gt;does&lt;/em&gt; have a password set. Otherwise, it would technically be possible for an attacker to connect to that server as an admin and run arbitrary queries in the time between that server starting and the accounts synchronizing from the rest of the cluster.</source>
          <target state="translated">新しいサーバー（プロキシを含む）が既存のクラスターに参加すると、そのクラスターからのパスワードを含むすべてのユーザーアカウント情報と同期します。これには &lt;code&gt;admin&lt;/code&gt; アカウントが含まれます。しかし、無管理者パスワードが設定されているサーバーは、既存のクラスタに参加できない&lt;em&gt;ん&lt;/em&gt;パスワードが設定されています。そうしないと、技術的には攻撃者がそのサーバーに管理者として接続し、そのサーバーが起動してからクラスターの残りの部分と同期するアカウントまでの間に任意のクエリを実行する可能性があります。</target>
        </trans-unit>
        <trans-unit id="70996fc328904b8735fa939766f433c28f27f4a7" translate="yes" xml:space="preserve">
          <source>When paging occurs on RethinkDB&amp;rsquo;s process, performance will be adversely affected, and the more paging occurs the worse performance will be. You may be able to address it by ensuring other applications are not using physical memory on the server, tuning the paging cache, adjusting the &lt;code&gt;swappiness&lt;/code&gt; kernel parameter (see &lt;a href=&quot;../troubleshooting/index&quot;&gt;Troubleshooting&lt;/a&gt; for details), or adding more RAM to the server.</source>
          <target state="translated">RethinkDBのプロセスでページングが発生すると、パフォーマンスに悪影響が及び、ページングが多く発生するとパフォーマンスが低下します。他のアプリケーションがサーバー上の物理メモリを使用していないことを確認するか、ページングキャッシュを調整するか、 &lt;code&gt;swappiness&lt;/code&gt; カーネルパラメーターを調整するか（詳細は&lt;a href=&quot;../troubleshooting/index&quot;&gt;トラブルシューティング&lt;/a&gt;を参照）、サーバーにRAMを追加することで対処できる場合があります。</target>
        </trans-unit>
        <trans-unit id="39499a0cd2439f58a90448079631a689bc240bd5" translate="yes" xml:space="preserve">
          <source>When paging occurs on RethinkDB&amp;rsquo;s process, performance will be adversely affected, and the more paging occurs the worse performance will be. You may be able to address it by ensuring other applications are not using physical memory on the server, tuning the paging cache, or adding more RAM to the server.</source>
          <target state="translated">RethinkDBのプロセスでページングが発生すると、パフォーマンスに悪影響が及び、ページングが多く発生するとパフォーマンスが低下します。他のアプリケーションがサーバーの物理メモリを使用していないことを確認したり、ページングキャッシュを調整したり、サーバーにRAMを追加したりすることで、この問題に対処できる場合があります。</target>
        </trans-unit>
        <trans-unit id="e0ee88af11d3830bf42ab1d4973a89c0606e33c7" translate="yes" xml:space="preserve">
          <source>When posting a message to a topic, first repubsub attempts to overwrite a document with the exact same topic. If the exact topic isn&amp;rsquo;t found, it creates a new document with the topic.</source>
          <target state="translated">メッセージをトピックに投稿するとき、最初にrepubsubはまったく同じトピックでドキュメントを上書きしようとします。正確なトピックが見つからない場合は、トピックを含む新しいドキュメントが作成されます。</target>
        </trans-unit>
        <trans-unit id="39c16909e8c88df0ea5a422f64978472b8724466" translate="yes" xml:space="preserve">
          <source>When servers are tagged, you can use the tags in the &lt;a href=&quot;https://rethinkdb.com/api/python/reconfigure&quot;&gt;reconfigure&lt;/a&gt; command. To assign 3 replicas of the &lt;code&gt;users&lt;/code&gt; table to &lt;code&gt;us_west&lt;/code&gt; and 2 to &lt;code&gt;us_east&lt;/code&gt;:</source>
          <target state="translated">サーバーがタグ付けされている場合、タグを&lt;a href=&quot;https://rethinkdb.com/api/python/reconfigure&quot;&gt;reconfigure&lt;/a&gt;コマンドで使用できます。 &lt;code&gt;users&lt;/code&gt; テーブルの3つのレプリカを &lt;code&gt;us_west&lt;/code&gt; に割り当て、2つを &lt;code&gt;us_east&lt;/code&gt; に割り当てるには：</target>
        </trans-unit>
        <trans-unit id="786f7d315c87c4bca4d9c2b6ce53eda3ca9303b5" translate="yes" xml:space="preserve">
          <source>When starting RethinkDB from the command line, the cache size limit is set through the &lt;code&gt;--cache-size &amp;lt;limit in MB&amp;gt;&lt;/code&gt; argument:</source>
          <target state="translated">コマンドラインからRethinkDBを起動する場合、キャッシュサイズの制限は &lt;code&gt;--cache-size &amp;lt;limit in MB&amp;gt;&lt;/code&gt; 引数によって設定されます。</target>
        </trans-unit>
        <trans-unit id="79c7ae19c81131fd14f6580c4d04a2dee10e9f6b" translate="yes" xml:space="preserve">
          <source>When the RethinkDB instance is ready, click on its &lt;strong&gt;Access Software&lt;/strong&gt; link.</source>
          <target state="translated">RethinkDBインスタンスの準備ができたら、その&lt;strong&gt;Access Software&lt;/strong&gt;リンクをクリックします。</target>
        </trans-unit>
        <trans-unit id="01a54f9b1d8b2e5e569294b706e164e9b5699c16" translate="yes" xml:space="preserve">
          <source>When the driver finds an anonymous function, it returns a query object like this one:</source>
          <target state="translated">ドライバが匿名関数を見つけると、このようなクエリオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="46d0359667f7a0c929b209d338b0f9a3993f1d7d" translate="yes" xml:space="preserve">
          <source>When the option is available, you should choose the JSON file format. If you&amp;rsquo;re exporting from a SQL database this might not be possible, but you might be able to write a separate script to transform CSV output into JSON, or use the &lt;code&gt;mysql2json&lt;/code&gt; script available as part of &lt;a href=&quot;https://github.com/seamusabshere/mysql2xxxx&quot;&gt;mysql2xxxx&lt;/a&gt;.</source>
          <target state="translated">オプションが利用可能な場合は、JSONファイル形式を選択する必要があります。あなたがSQLデータベースからエクスポートしている場合、この威力は可能ではないが、あなたはJSONにCSV出力を変換し、または使用するために別のスクリプトを書くことができるかもしれません &lt;code&gt;mysql2json&lt;/code&gt; のの一部として利用できるスクリプトを&lt;a href=&quot;https://github.com/seamusabshere/mysql2xxxx&quot;&gt;mysql2xxxx&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d5717a00ca57bc298ae32605ce5314580ad4d3f3" translate="yes" xml:space="preserve">
          <source>When the user creates a table, they have the option of specifying the attribute that will serve as the primary key (if the primary key attribute isn&amp;rsquo;t specified, it defaults to &amp;lsquo;id&amp;rsquo;). When the user inserts a document into the table, if the document contains the primary key attribute, its value is used to index the document. Otherwise, a random unique ID is generated for the index automatically.</source>
          <target state="translated">ユーザーがテーブルを作成するときに、主キーとして機能する属性を指定するオプションがあります（主キー属性が指定されていない場合は、デフォルトで「id」になります）。ユーザーがテーブルにドキュメントを挿入するときに、ドキュメントに主キー属性が含まれている場合、その値を使用してドキュメントにインデックスが付けられます。それ以外の場合、ランダムな一意のIDがインデックスに対して自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="f13c50073789e73f7832addb638ad24cfe0cc700" translate="yes" xml:space="preserve">
          <source>When using the web UI, simply specify the number of shards you want, and based on the data available RethinkDB will determine the best split points to maintain balanced shards. To shard your data:</source>
          <target state="translated">Web UI を使用する場合は、必要なシャードの数を指定するだけで、利用可能なデータに基づいて RethinkDB がバランスのとれたシャードを維持するための最適なスプリットポイントを決定します。データをシャードするには</target>
        </trans-unit>
        <trans-unit id="085a0570038dfb7cf2cfd3cbed19548b2d1f7c9c" translate="yes" xml:space="preserve">
          <source>When you first start RethinkDB, the server opens a port for the client drivers (&lt;code&gt;28015&lt;/code&gt; by default). Let&amp;rsquo;s open a connection:</source>
          <target state="translated">RethinkDBを初めて起動すると、サーバーはクライアントドライバー用のポート（デフォルトでは &lt;code&gt;28015&lt;/code&gt; ）を開きます。接続を開きましょう：</target>
        </trans-unit>
        <trans-unit id="35057656e095ebe83647859420615be9709172fb" translate="yes" xml:space="preserve">
          <source>When you issue a write query (&lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, or &lt;code&gt;replace&lt;/code&gt;), RethinkDB returns a summary object that looks like this:</source>
          <target state="translated">書き込みクエリを発行すると（ &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;update&lt;/code&gt; 、または &lt;code&gt;replace&lt;/code&gt; ）、RethinkDBは次のようなサマリーオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="9adc3f762a66ce024127380f3784d16c509e1f05" translate="yes" xml:space="preserve">
          <source>When you parse the response string as JSON, you get the object:</source>
          <target state="translated">レスポンス文字列をJSONとしてパースすると、オブジェクトが得られます。</target>
        </trans-unit>
        <trans-unit id="715d798b7e9cd5985d005f0aed4eba85867d2b96" translate="yes" xml:space="preserve">
          <source>When you pass functions to ReQL, your language&amp;rsquo;s driver serializes those functions into ReQL lambda functions that are run on the server, not in your client language. (See &lt;a href=&quot;https://rethinkdb.com/blog/lambda-functions/&quot;&gt;All about lambda functions in RethinkDB queries&lt;/a&gt; for more details.) A consequence of this is that native language constructs like &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; will not produce the expected result when their conditions involve ReQL commands. While they may not cause errors, they will be executed on the client side before the function is compiled for ReQL, and thus give an incorrect result. Instead, you must use equivalent ReQL control functions such as &lt;a href=&quot;../../api/javascript/branch/index&quot;&gt;branch&lt;/a&gt; and &lt;a href=&quot;../../api/javascript/for_each/index&quot;&gt;forEach&lt;/a&gt;. Here&amp;rsquo;s an example in Python from the &lt;a href=&quot;../introduction-to-reql/index&quot;&gt;Introduction to ReQL&lt;/a&gt; document:</source>
          <target state="translated">関数をReQLに渡すと、言語のドライバーがそれらの関数を、クライアント言語ではなくサーバーで実行されるReQLラムダ関数にシリアル化します。（詳細&lt;a href=&quot;https://rethinkdb.com/blog/lambda-functions/&quot;&gt;については、RethinkDBクエリのラムダ関数に関するすべてを&lt;/a&gt;参照してください。）その結果、 &lt;code&gt;if&lt;/code&gt; や &lt;code&gt;for&lt;/code&gt; などのネイティブ言語構成は、条件にReQLコマンドが含まれる場合に期待どおりの結果を生成しません。エラーの原因にはなりませんが、ReQL用に関数がコンパイルされる前にクライアント側で実行されるため、誤った結果が返されます。代わりに、&lt;a href=&quot;../../api/javascript/branch/index&quot;&gt;branch&lt;/a&gt;や&lt;a href=&quot;../../api/javascript/for_each/index&quot;&gt;forEach&lt;/a&gt;などの同等のReQL制御関数を使用する必要があります。これは、&lt;a href=&quot;../introduction-to-reql/index&quot;&gt;ReQL&lt;/a&gt;の概要から Pythonでの例です。 資料：</target>
        </trans-unit>
        <trans-unit id="3b0d34296f9afa1b34c187838548381f1a1a9da2" translate="yes" xml:space="preserve">
          <source>When you turn on pagination in &lt;code&gt;r.http&lt;/code&gt;, instead of returning an array of documents, RethinkDB returns a stream which you can access in the driver via the usual cursor API. This is significant because pagination happens lazily &amp;mdash; RethinkDB will request new pages as you iterate through the cursor to minimize the number of API calls.</source>
          <target state="translated">&lt;code&gt;r.http&lt;/code&gt; でページ付けをオンにすると、ドキュメントの配列を返す代わりに、RethinkDBは通常のカーソルAPIを介してドライバーでアクセスできるストリームを返します。ページ付けが遅延して発生するため、これは重要です。API呼び出しの数を最小限に抑えるために、カーソルを反復するときにRethinkDBは新しいページを要求します。</target>
        </trans-unit>
        <trans-unit id="910523961609d1635340d9fd8646a5044eb8223b" translate="yes" xml:space="preserve">
          <source>When you upgrade a major release (i.e., 2.1 to 2.2), you should rebuild outdated secondary indexes manually. This can be done easily from the command line:</source>
          <target state="translated">メジャーリリース (2.1 から 2.2 など)をアップグレードする場合は、古いセカンダリインデックスを手動で再構築しなければなりません。これはコマンドラインから簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="4303a7fd5ef0ac43d7dd3077c3709d0402bdc880" translate="yes" xml:space="preserve">
          <source>Whenever a write operation on the table inserts, deletes or modifies a given document, the write hook function will be called with the context parameter, the old value of the document (or &lt;code&gt;null&lt;/code&gt; on inserts) and the new value of the document (or &lt;code&gt;null&lt;/code&gt; on deletes). It then returns the value that should actually be inserted and/or replaced instead of &lt;code&gt;newVal&lt;/code&gt;. It can also return &lt;code&gt;r.error(...)&lt;/code&gt; to abort the write.</source>
          <target state="translated">テーブルに対する書き込み操作が特定のドキュメントを挿入、削除、または変更するたびに、書き込みフック関数が、コンテキストパラメータ、ドキュメントの古い値（または挿入の場合は &lt;code&gt;null&lt;/code&gt; ）、およびドキュメントの新しい値（またはnull）を使用して呼び出され &lt;code&gt;null&lt;/code&gt; 削除時）。次に、 &lt;code&gt;newVal&lt;/code&gt; の代わりに実際に挿入または置換する必要がある値を返します。また、 &lt;code&gt;r.error(...)&lt;/code&gt; を返して書き込みを中止することもできます。</target>
        </trans-unit>
        <trans-unit id="e01352645abcc16780dde4407c35c5e8f103dc1c" translate="yes" xml:space="preserve">
          <source>Whenever possible, the client drivers use operator overloading to support expressions such as &lt;code&gt;user['age'] &amp;gt; 30&lt;/code&gt;.</source>
          <target state="translated">可能な限り、クライアントドライバーは演算子のオーバーロードを使用して、 &lt;code&gt;user['age'] &amp;gt; 30&lt;/code&gt; などの式をサポートします。</target>
        </trans-unit>
        <trans-unit id="d9a1774318fd30b2eb43097c891e57357be23711" translate="yes" xml:space="preserve">
          <source>Whenever possible, you should use native ReQL commands rather than &lt;code&gt;r.js&lt;/code&gt; for better performance.</source>
          <target state="translated">可能な限り、あなたはネイティブReQLコマンドではなく、使用する必要があります &lt;code&gt;r.js&lt;/code&gt; をパフォーマンス向上のために。</target>
        </trans-unit>
        <trans-unit id="d1a090ba50026546708baf541642a566aa524853" translate="yes" xml:space="preserve">
          <source>Where &amp;ldquo;newpass&amp;rdquo; is the new password you want to use.</source>
          <target state="translated">ここで、「newpass」は使用する新しいパスワードです。</target>
        </trans-unit>
        <trans-unit id="ecf978f6caa66726e06b1ef68ccd9f19f9ba5466" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;eq_join&lt;/code&gt; produces a table-like result (the rough equivalent of SQL&amp;rsquo;s &lt;code&gt;SELECT * FROM companies, employees WHERE companies.id = employees.company_id&lt;/code&gt;), using a subquery produces a nested document, where the employee objects are returned in a list in the &lt;code&gt;employees&lt;/code&gt; field.</source>
          <target state="translated">どこ &lt;code&gt;eq_join&lt;/code&gt; は、表のような結果（SQLののラフ同等の生産 &lt;code&gt;SELECT * FROM companies, employees WHERE companies.id = employees.company_id&lt;/code&gt; 、サブクエリを使用して、ネストされた文書を生成）、従業員オブジェクトは、リストで返され &lt;code&gt;employees&lt;/code&gt; フィールド。</target>
        </trans-unit>
        <trans-unit id="963cb49ae920f88d504d16b3b7083da4270506f8" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;t:1&lt;/code&gt; means that the response is a value, and &lt;code&gt;r: [&quot;foo&quot;]&lt;/code&gt; the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;t:1&lt;/code&gt; は応答が値であることを意味し、 &lt;code&gt;r: [&quot;foo&quot;]&lt;/code&gt; は文字列 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dc16abd937d119881d1511a82b749c85ae5b0c88" translate="yes" xml:space="preserve">
          <source>Where&amp;rsquo;s &lt;code&gt;r.binary&lt;/code&gt;? You don&amp;rsquo;t need it in this case, because &lt;code&gt;r.http&lt;/code&gt; will return a binary object with the &lt;code&gt;{resultFormat: 'binary'}&lt;/code&gt; option. (If the MIME type on the sending server is set correctly, you can even leave that off, and &lt;code&gt;r.http&lt;/code&gt; will figure out the correct type.)</source>
          <target state="translated">&lt;code&gt;r.binary&lt;/code&gt; はどこにありますか？この場合、 &lt;code&gt;r.http&lt;/code&gt; は &lt;code&gt;{resultFormat: 'binary'}&lt;/code&gt; オプションを使用してバイナリオブジェクトを返すため、これは必要ありません。（送信サーバーのMIMEタイプが正しく設定されている場合は、それをオフのままにしておくこともできます &lt;code&gt;r.http&lt;/code&gt; が正しいタイプを判別します。）</target>
        </trans-unit>
        <trans-unit id="ffd6f0444e5d149aef2022bdf6d34990e15630b1" translate="yes" xml:space="preserve">
          <source>Where&amp;rsquo;s &lt;code&gt;r.binary&lt;/code&gt;? You don&amp;rsquo;t need it in this case, because &lt;code&gt;r.http&lt;/code&gt; will return a binary object with the &lt;code&gt;{resultFormat:'binary'}&lt;/code&gt; option. (If the MIME type on the sending server is set correctly, you can even leave that off, and &lt;code&gt;r.http&lt;/code&gt; will figure out the correct type.)</source>
          <target state="translated">&lt;code&gt;r.binary&lt;/code&gt; はどこにありますか？この場合、 &lt;code&gt;r.http&lt;/code&gt; は &lt;code&gt;{resultFormat:'binary'}&lt;/code&gt; オプションを使用してバイナリオブジェクトを返すため、これは必要ありません。（送信サーバーのMIMEタイプが正しく設定されている場合は、それをオフにして &lt;code&gt;r.http&lt;/code&gt; ば、r.httpが正しいタイプを判別します。）</target>
        </trans-unit>
        <trans-unit id="85ff01499d11ce21062a9b96027ab58ee226aad3" translate="yes" xml:space="preserve">
          <source>Where,</source>
          <target state="translated">Where,</target>
        </trans-unit>
        <trans-unit id="74ef3c384631337c470ed9830ea2e775e4e4fa26" translate="yes" xml:space="preserve">
          <source>Whereas &lt;code&gt;concatMap&lt;/code&gt; with the same mapping function would merge those sequences into one:</source>
          <target state="translated">一方 &lt;code&gt;concatMap&lt;/code&gt; 1に、これらの配列をマージするのと同じマッピング機能を持ちます：</target>
        </trans-unit>
        <trans-unit id="9706b03598cd799740fc976a790f149a55ccc852" translate="yes" xml:space="preserve">
          <source>Whether you database is an Oracle SQL Server or RethinkDB, connecting to your database directly from a mobile device is a bad idea and should be discouraged. In general, there&amp;rsquo;s a number of issues doing it:</source>
          <target state="translated">データベースがOracleSQL ServerであろうとRethinkDBであろうと、モバイルデバイスからデータベースに直接接続することは悪い考えであり、お勧めできません。一般に、それを行うにはいくつかの問題があります。</target>
        </trans-unit>
        <trans-unit id="7c3802c9a75c102c56d33838d3085aeced2d4be5" translate="yes" xml:space="preserve">
          <source>Which file systems are supported?</source>
          <target state="translated">どのファイルシステムがサポートされていますか?</target>
        </trans-unit>
        <trans-unit id="c2d903bd400a10130121c28b48937e8649984629" translate="yes" xml:space="preserve">
          <source>Which versions of Node.js are supported?</source>
          <target state="translated">Node.jsのどのバージョンがサポートされていますか?</target>
        </trans-unit>
        <trans-unit id="75c7b24c0d75f53a78e5d965405062d03b3aa767" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;distinct&lt;/code&gt; can be called on a table without an index, the only effect will be to convert the table into a stream; the content of the stream will not be affected.</source>
          <target state="translated">ながら、 &lt;code&gt;distinct&lt;/code&gt; インデックスなしテーブルに呼び出すことができる、唯一の効果は、ストリームにテーブルを変換するであろう。ストリームのコンテンツは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="eda1f1902e0534da8b4f0914078aa6c1b6b382f8" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;import&lt;/code&gt; has the ability to import a directory full of files, those files are expected to be in the format and directory structure created by the &lt;code&gt;export&lt;/code&gt; command.</source>
          <target state="translated">一方で &lt;code&gt;import&lt;/code&gt; ファイルの完全なディレクトリをインポートする機能があり、それらのファイルはによって作成された形式とディレクトリ構造であることが予想される &lt;code&gt;export&lt;/code&gt; コマンド。</target>
        </trans-unit>
        <trans-unit id="e15bffa8e190edcd775e600e8f345fc990c8b319" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;outdated&lt;/code&gt; reads are faster, they are the least consistent. For more information on this option, read &amp;ldquo;Balancing safety and performance&amp;rdquo; in the &lt;a href=&quot;../consistency/index#balancing-safety-and-performance&quot;&gt;Consistency guarantees&lt;/a&gt; documentation.</source>
          <target state="translated">一方で &lt;code&gt;outdated&lt;/code&gt; 読み込みが高速化され、彼らは最も一貫しています。このオプションの詳細については、&lt;a href=&quot;../consistency/index#balancing-safety-and-performance&quot;&gt;整合性保証の&lt;/a&gt;ドキュメントの「安全性とパフォーマンスのバランス」をご覧ください。</target>
        </trans-unit>
        <trans-unit id="cbe5b9c83c28270a91a6119308ebb3167601ae92" translate="yes" xml:space="preserve">
          <source>While RethinkDB doesn&amp;rsquo;t currently have a fully-featured query optimizer, ReQL is designed with one in mind. For example, the server has enough information to reorder the chain for efficiency, or to use alternative implementation plans to improve performance. This feature will be introduced into future versions of RethinkDB.</source>
          <target state="translated">RethinkDBには現在、フル機能のクエリオプティマイザーがありませんが、ReQLは1つを念頭に置いて設計されています。たとえば、サーバーには、効率を上げるためにチェーンを並べ替えたり、別の実装計画を使用してパフォーマンスを改善したりするのに十分な情報があります。この機能は、RethinkDBの将来のバージョンに導入される予定です。</target>
        </trans-unit>
        <trans-unit id="e87f1d7f7e013b05d15b906401df3c72981e5795" translate="yes" xml:space="preserve">
          <source>While it&amp;rsquo;s not strictly necessary to back up your data before upgrading, it&amp;rsquo;s always a good idea. You should make a backup by using the &lt;code&gt;dump&lt;/code&gt; command &lt;em&gt;before&lt;/em&gt; updating RethinkDB to its new version! Databases that have been automatically upgraded are not backward-compatible (that is, a database from version 1.14 cannot be used with version 1.13).</source>
          <target state="translated">アップグレード前にデータを厳密にバックアップする必要はありませんが、常に良い方法です。RethinkDBを新しいバージョン&lt;em&gt;に&lt;/em&gt;更新する&lt;em&gt;前に&lt;/em&gt;、 &lt;code&gt;dump&lt;/code&gt; コマンドを使用してバックアップを作成してください。自動的にアップグレードされたデータベースには下位互換性がありません（つまり、バージョン1.14のデータベースはバージョン1.13では使用できません）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c508518c472ea549e545c7cc3c1828474cbd1b66" translate="yes" xml:space="preserve">
          <source>While queries are built up on the client, they&amp;rsquo;re only sent to the server once you call the &lt;code&gt;run&lt;/code&gt; command. All processing happens on the server&amp;mdash;the queries don&amp;rsquo;t run on the client, and don&amp;rsquo;t require intermediary network round trips between the client and the server. For example, you can store queries in variables, and send them to the server later:</source>
          <target state="translated">クエリはクライアントで作成されますが、 &lt;code&gt;run&lt;/code&gt; コマンドを呼び出すと、サーバーにのみ送信されます。すべての処理はサーバー上で行われます。クエリはクライアント上で実行されず、クライアントとサーバー間の中間ネットワークラウンドトリップを必要としません。たとえば、クエリを変数に格納し、後でサーバーに送信できます。</target>
        </trans-unit>
        <trans-unit id="0c5b09514d00b6ab4c988fd2046f1b881599653b" translate="yes" xml:space="preserve">
          <source>While running, a server&amp;rsquo;s configuration can be changed by writing to the &lt;code&gt;rethinkdb.server_config&lt;/code&gt;&lt;a href=&quot;../system-tables/index&quot;&gt;system table&lt;/a&gt;.</source>
          <target state="translated">実行中に、 &lt;code&gt;rethinkdb.server_config&lt;/code&gt; &lt;a href=&quot;../system-tables/index&quot;&gt;システムテーブルに&lt;/a&gt;書き込むことで、サーバーの構成を変更できます。</target>
        </trans-unit>
        <trans-unit id="196bc69045bb039c922d7d34e6348aba06827f91" translate="yes" xml:space="preserve">
          <source>While system tables support changefeeds, they do not support all of the chaining that real tables do. For instance, aggregation (&lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt;) and &lt;code&gt;limit&lt;/code&gt; commands will not work with system tables.</source>
          <target state="translated">システムテーブルは変更フィードをサポートしますが、実際のテーブルが行うチェーンのすべてをサポートするわけではありません。たとえば、集計（ &lt;code&gt;max&lt;/code&gt; および &lt;code&gt;min&lt;/code&gt; ）および &lt;code&gt;limit&lt;/code&gt; コマンドは、システムテーブルでは機能しません。</target>
        </trans-unit>
        <trans-unit id="9616590cafde87ddb91627dc1bbe044c0347761b" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;{field: value}&lt;/code&gt; style of predicate is useful for exact matches, a more general way to write a predicate is to use the &lt;a href=&quot;../row/index&quot;&gt;row&lt;/a&gt; command with a comparison operator such as &lt;a href=&quot;../eq/index&quot;&gt;eq&lt;/a&gt; or &lt;a href=&quot;../gt/index&quot;&gt;gt&lt;/a&gt;, or to use an anonymous function that returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">述語の &lt;code&gt;{field: value}&lt;/code&gt; スタイルは完全一致に役立ちますが、述語を記述するより一般的な方法は、&lt;a href=&quot;../eq/index&quot;&gt;eq&lt;/a&gt;や&lt;a href=&quot;../gt/index&quot;&gt;gt&lt;/a&gt;などの比較演算子を使用して&lt;a href=&quot;../row/index&quot;&gt;row&lt;/a&gt;コマンドを使用するか、 &lt;code&gt;true&lt;/code&gt; またはを返す無名関数を使用することです。 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5e1db1780061897d624e2492fa72c8d8a9c49dd8" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;{field:value}&lt;/code&gt; style of predicate is useful for exact matches, a more general way to write a predicate is to use the &lt;a href=&quot;../row/index&quot;&gt;row&lt;/a&gt; command with a comparison operator such as &lt;a href=&quot;../eq/index&quot;&gt;eq&lt;/a&gt; or &lt;a href=&quot;../gt/index&quot;&gt;gt&lt;/a&gt;, or to use an anonymous function that returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">述語の &lt;code&gt;{field:value}&lt;/code&gt; スタイルは完全一致に役立ちますが、述語を作成するより一般的な方法は、&lt;a href=&quot;../row/index&quot;&gt;行&lt;/a&gt;コマンドを&lt;a href=&quot;../eq/index&quot;&gt;eq&lt;/a&gt;や&lt;a href=&quot;../gt/index&quot;&gt;gt&lt;/a&gt;などの比較演算子と共に使用するか、 &lt;code&gt;true&lt;/code&gt; またはfalseを返す無名関数を使用することです &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb232e8e16f07d7f64a5545b6cc6855a0b706386" translate="yes" xml:space="preserve">
          <source>While there &lt;em&gt;is&lt;/em&gt; a [circle] command, it approximates a circle by defining either a line or a polygon. There is no true circular data type.</source>
          <target state="translated">そこつつ&lt;em&gt;ある&lt;/em&gt; [円]コマンドは、それがラインまたはポリゴンのいずれかを定義することによって、円を近似します。真の循環データ型はありません。</target>
        </trans-unit>
        <trans-unit id="8880d3ba6f9209b576363cabe9ca016a317fd7a2" translate="yes" xml:space="preserve">
          <source>While we strive to give you perfect uptime, like other complex applications RethinkDB is not immune to crashing. Here are some tips on how to recover from a crash, how to submit a bug report, and how to maximize availability.</source>
          <target state="translated">私たちは、他の複雑なアプリケーションのように完璧なアップタイムを提供するよう努力していますが、RethinkDBはクラッシュに免疫があるわけではありません。ここでは、クラッシュから回復する方法、バグレポートの提出方法、可用性を最大化する方法について、いくつかのヒントを紹介します。</target>
        </trans-unit>
        <trans-unit id="a9c9f8d79908203bf616bc5ec24c72cd56e7ec7f" translate="yes" xml:space="preserve">
          <source>While you may be able to leave many options at their defaults, you&amp;rsquo;ll definitely need to change the &lt;code&gt;directory=&lt;/code&gt; line in the configuration file to point to your RethinkDB data directory.</source>
          <target state="translated">多くのオプションをデフォルトのままにしておくこともできますが、RethinkDBデータディレクトリを指すように、構成ファイルの &lt;code&gt;directory=&lt;/code&gt; 行を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="d70b857aa26bf55f4755a8a354b5a0cf782812e2" translate="yes" xml:space="preserve">
          <source>Whitespace-separated JSON rows.</source>
          <target state="translated">空白で区切られたJSON行。</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="6d570c5e9f86881e4ad56d0504e0546ae6ac2e1e" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;one&lt;/strong&gt; argument &lt;em&gt;x,&lt;/em&gt; the result will be in the range &lt;code&gt;[0,x)&lt;/code&gt;, and will be integer unless &lt;code&gt;{float: true}&lt;/code&gt; is given as an option. Specifying a floating point number without the &lt;code&gt;float&lt;/code&gt; option will raise an error.</source>
          <target state="translated">で&lt;strong&gt;1&lt;/strong&gt;引数&lt;em&gt;X、&lt;/em&gt;結果が範囲内であろう &lt;code&gt;[0,x)&lt;/code&gt; 、としない限り、整数になり &lt;code&gt;{float: true}&lt;/code&gt; オプションとして与えられます。 &lt;code&gt;float&lt;/code&gt; オプションなしで浮動小数点数を指定すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="d110c7983aa12b9b68c9e762bd72396013153dbb" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;one&lt;/strong&gt; argument &lt;em&gt;x,&lt;/em&gt; the result will be in the range &lt;code&gt;[0,x)&lt;/code&gt;, and will be integer unless &lt;code&gt;{float:true}&lt;/code&gt; is given as an option. Specifying a floating point number without the &lt;code&gt;float&lt;/code&gt; option will raise an error.</source>
          <target state="translated">で&lt;strong&gt;1&lt;/strong&gt;引数&lt;em&gt;X、&lt;/em&gt;結果が範囲内であろう &lt;code&gt;[0,x)&lt;/code&gt; 、としない限り、整数になり &lt;code&gt;{float:true}&lt;/code&gt; オプションとして与えられます。 &lt;code&gt;float&lt;/code&gt; オプションなしで浮動小数点数を指定すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="0ef6eff77c62b05f80e5c8fb95b05ea8fbfcaa6b" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;two&lt;/strong&gt; arguments &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y,&lt;/em&gt; the result will be in the range &lt;code&gt;[x,y)&lt;/code&gt;, and will be integer unless &lt;code&gt;{float: true}&lt;/code&gt; is given as an option. If &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; are equal an error will occur, unless the floating-point option has been specified, in which case &lt;em&gt;x&lt;/em&gt; will be returned. Specifying a floating point number without the &lt;code&gt;float&lt;/code&gt; option will raise an error.</source>
          <target state="translated">で&lt;strong&gt;2つの&lt;/strong&gt;引数&lt;em&gt;のx&lt;/em&gt;と&lt;em&gt;yの、&lt;/em&gt;結果が範囲内であろう &lt;code&gt;[x,y)&lt;/code&gt; 、としない限り、整数になり &lt;code&gt;{float: true}&lt;/code&gt; オプションとして与えられます。場合&lt;em&gt;のx&lt;/em&gt;と&lt;em&gt;yが&lt;/em&gt;ある浮動小数点オプションがケースする、指定されていない限り、エラーが発生します等しく&lt;em&gt;、xが&lt;/em&gt;返されます。 &lt;code&gt;float&lt;/code&gt; オプションなしで浮動小数点数を指定すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="b7043f8490538934638889f8014fabd627f4ae9b" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;two&lt;/strong&gt; arguments &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y,&lt;/em&gt; the result will be in the range &lt;code&gt;[x,y)&lt;/code&gt;, and will be integer unless &lt;code&gt;{float:true}&lt;/code&gt; is given as an option. If &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; are equal an error will occur, unless the floating-point option has been specified, in which case &lt;em&gt;x&lt;/em&gt; will be returned. Specifying a floating point number without the &lt;code&gt;float&lt;/code&gt; option will raise an error.</source>
          <target state="translated">で&lt;strong&gt;2つの&lt;/strong&gt;引数&lt;em&gt;のx&lt;/em&gt;と&lt;em&gt;yの、&lt;/em&gt;結果が範囲内であろう &lt;code&gt;[x,y)&lt;/code&gt; 、としない限り、整数になり &lt;code&gt;{float:true}&lt;/code&gt; オプションとして与えられます。場合&lt;em&gt;のx&lt;/em&gt;と&lt;em&gt;yが&lt;/em&gt;ある浮動小数点オプションがケースする、指定されていない限り、エラーが発生します等しく&lt;em&gt;、xが&lt;/em&gt;返されます。 &lt;code&gt;float&lt;/code&gt; オプションなしで浮動小数点数を指定すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="ed3cfa588bab7867e4924f429e5db144b0535192" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;zero&lt;/strong&gt; arguments, the result will be a floating-point number in the range &lt;code&gt;[0,1)&lt;/code&gt; (from 0 up to but not including 1).</source>
          <target state="translated">で&lt;strong&gt;ゼロ&lt;/strong&gt;引数、結果は、浮動小数点の範囲内の数字であろう &lt;code&gt;[0,1)&lt;/code&gt; 0から最大まで（ただし、1）を含みません。</target>
        </trans-unit>
        <trans-unit id="3e699cf78c6c70afc59571e065ee6662df7ae4ed" translate="yes" xml:space="preserve">
          <source>With a single server, our query takes 59 seconds to complete. The automatic query parallelization in RethinkDB results in practically linear scalability, as the same query is executed in just above 4 seconds on 16 servers. The graph, shown in the results overview section, demonstrates the inverse execution time (queries per second) of the query.</source>
          <target state="translated">1台のサーバでは、このクエリは59秒で完了します。RethinkDBの自動クエリ並列化により、16台のサーバで同じクエリが4秒強で実行されるため、実質的にリニアなスケーラビリティが実現しています。結果概要のセクションに示されているグラフは、クエリの逆実行時間(1秒あたりのクエリ)を示しています。</target>
        </trans-unit>
        <trans-unit id="d8a5b7f3faeb9e33f62bb627c2b2a563e64920b5" translate="yes" xml:space="preserve">
          <source>With a string, &lt;code&gt;slice&lt;/code&gt; behaves similarly, with the indexes referring to Unicode codepoints. String indexes start at &lt;code&gt;0&lt;/code&gt;. (Note that &lt;a href=&quot;https://en.wikipedia.org/wiki/Combining_character&quot;&gt;combining codepoints&lt;/a&gt; are counted separately.)</source>
          <target state="translated">文字列の場合、 &lt;code&gt;slice&lt;/code&gt; も同様に動作し、インデックスはUnicodeコードポイントを参照します。文字列インデックスは &lt;code&gt;0&lt;/code&gt; から始まります。（&lt;a href=&quot;https://en.wikipedia.org/wiki/Combining_character&quot;&gt;コードポイントの組み合わせ&lt;/a&gt;は個別にカウントされます。）</target>
        </trans-unit>
        <trans-unit id="f4fd536709cd6838a47751145de8bc8d075d4ebd" translate="yes" xml:space="preserve">
          <source>With most commands that take a field name string or the &lt;code&gt;() &lt;/code&gt; syntax above, you can also use a JSON-style nested syntax:</source>
          <target state="translated">上記のフィールド名文字列または &lt;code&gt;() &lt;/code&gt; 構文を使用するほとんどのコマンドでは、JSONスタイルのネストされた構文を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f765a154bf9b7d7db33d2b68b71884f46493323f" translate="yes" xml:space="preserve">
          <source>With no arguments, &lt;code&gt;range&lt;/code&gt; returns an &amp;ldquo;infinite&amp;rdquo; stream from 0 up to and including the maximum integer value;</source>
          <target state="translated">引数がない場合、 &lt;code&gt;range&lt;/code&gt; は0から最大整数値までの「無限」ストリームを返します。</target>
        </trans-unit>
        <trans-unit id="1be6d08d4038949893064ebde481b01100a94fa1" translate="yes" xml:space="preserve">
          <source>With one argument, &lt;code&gt;range&lt;/code&gt; returns a stream from 0 up to but not including the end value;</source>
          <target state="translated">引数が1つの場合、 &lt;code&gt;range&lt;/code&gt; は0から終了値を含まないストリームを返します。</target>
        </trans-unit>
        <trans-unit id="e28fd958eebbcb33351a1302bb1eea36388fb720" translate="yes" xml:space="preserve">
          <source>With simple and compound indexes, a document will be indexed using at most one index key: a single value for a simple index and a set of values for a compound index. Multiple documents may have the same index key. With a &lt;em&gt;multi index&lt;/em&gt;, a document can be indexed using more than one key in the same index. For instance, a blog post might have multiple tags, and each tag might refer to multiple blog posts.</source>
          <target state="translated">シンプルインデックスと複合インデックスを使用すると、ドキュメントは最大で1つのインデックスキー（シンプルインデックスの単一の値と複合インデックスの値のセット）を使用してインデックスが作成されます。複数のドキュメントが同じインデックスキーを持つ場合があります。&lt;em&gt;マルチインデックス&lt;/em&gt;、文書は同じインデックスに複数のキーを使用してインデックスを作成することができます。たとえば、ブログ投稿に複数のタグがあり、各タグが複数のブログ投稿を参照している場合があります。</target>
        </trans-unit>
        <trans-unit id="561955fb8ca5f5782474961bc600ce7a0b051525" translate="yes" xml:space="preserve">
          <source>With system tables only, the &lt;code&gt;table&lt;/code&gt; command takes a new argument, &lt;code&gt;identifier_format&lt;/code&gt;. Legal values are &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;uuid&lt;/code&gt;. When it&amp;rsquo;s set to &lt;code&gt;uuid&lt;/code&gt;, references in system tables to databases or other tables will be UUIDs rather than database/table names. This is useful for writing scripts and administration tasks, as UUIDs remain consistent even if object names change. The default is &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">システムテーブルのみの場合、 &lt;code&gt;table&lt;/code&gt; コマンドは新しい引数 &lt;code&gt;identifier_format&lt;/code&gt; を取ります。有効な値は &lt;code&gt;name&lt;/code&gt; および &lt;code&gt;uuid&lt;/code&gt; です。 &lt;code&gt;uuid&lt;/code&gt; に設定すると、システムテーブルでのデータベースまたは他のテーブルへの参照は、データベース/テーブル名ではなくUUIDになります。オブジェクト名が変更されてもUUIDは一貫しているため、これはスクリプトや管理タスクの作成に役立ちます。デフォルトは &lt;code&gt;name&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8ecebde599b9bd6e7b61ea5841eb82f0b8ce413a" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;multi&lt;/code&gt; flag single documents can be assigned to multiple groups, similar to the behavior of &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;multi-indexes&lt;/a&gt;. When &lt;code&gt;multi&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and the grouping value is an array, documents will be placed in each group that corresponds to the elements of the array. If the array is empty the row will be ignored.</source>
          <target state="translated">&lt;code&gt;multi&lt;/code&gt; フラグを使用すると、マルチ&lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;インデックスの&lt;/a&gt;動作と同様に、単一のドキュメントを複数のグループに割り当てることができます。場合 &lt;code&gt;multi&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; とグルーピング値が配列され、ドキュメントは、配列の要素に対応することを各グループに配置されます。配列が空の場合、行は無視されます。</target>
        </trans-unit>
        <trans-unit id="c1c2a4ec9b5fe6dd2c2a1f09763272a5046fc80b" translate="yes" xml:space="preserve">
          <source>With the appropriate &lt;a href=&quot;../install-drivers/index&quot;&gt;client driver&lt;/a&gt; installed you can use a supported language to perform all administration tasks, either from the language&amp;rsquo;s REPL or as a script. There are ReQL commands for &lt;a href=&quot;https://rethinkdb.com/api/python/reconfigure&quot;&gt;configuring sharding and replication&lt;/a&gt;, &lt;a href=&quot;https://rethinkdb.com/api/python/rebalance&quot;&gt;rebalancing shards&lt;/a&gt; and more. In addition, you can query &lt;a href=&quot;../system-tables/index&quot;&gt;system tables&lt;/a&gt; to get information about your cluster and to change many of its operational characteristics.</source>
          <target state="translated">適切な&lt;a href=&quot;../install-drivers/index&quot;&gt;クライアントドライバーを&lt;/a&gt;インストールすると、サポートされている言語を使用して、言語のREPLから、またはスクリプトとして、すべての管理タスクを実行できます。&lt;a href=&quot;https://rethinkdb.com/api/python/reconfigure&quot;&gt;シャーディングとレプリケーションの構成&lt;/a&gt;、&lt;a href=&quot;https://rethinkdb.com/api/python/rebalance&quot;&gt;シャードのリバランス&lt;/a&gt;などのためのReQLコマンドがあります。さらに、&lt;a href=&quot;../system-tables/index&quot;&gt;システムテーブル&lt;/a&gt;にクエリを実行して、クラスターに関する情報を取得したり、クラスターの操作特性の多くを変更したりできます。</target>
        </trans-unit>
        <trans-unit id="88ce626689bbb3d87a8121372f5b3f4b42db58eb" translate="yes" xml:space="preserve">
          <source>With the following settings, RethinkDB guarantees linearizability of individual atomic operations on individual documents:</source>
          <target state="translated">以下の設定で、RethinkDBは、個々のドキュメントに対する個々のアトミック操作の線形化可能性を保証します。</target>
        </trans-unit>
        <trans-unit id="f2d4c9e7aabba038136ff518e49156fb80b1960b" translate="yes" xml:space="preserve">
          <source>With this approach you cannot atomically update both the author data and and the posts data.</source>
          <target state="translated">この方法では、著者データと投稿データの両方をアトミックに更新することはできません。</target>
        </trans-unit>
        <trans-unit id="ba6fe95bad3a725892faad549aaa59aa8614d012" translate="yes" xml:space="preserve">
          <source>With this approach you cannot atomically update both the author data and the posts data.</source>
          <target state="translated">この方法では、著者データと投稿データの両方をアトミックに更新することはできません。</target>
        </trans-unit>
        <trans-unit id="c9c5da5a74f1e53423101b6b6a642e055eee3483" translate="yes" xml:space="preserve">
          <source>With two arguments, &lt;code&gt;range&lt;/code&gt; returns a stream from the start value up to but not including the end value.</source>
          <target state="translated">2つの引数を指定すると、 &lt;code&gt;range&lt;/code&gt; は開始値から終了値までのストリームを返します。</target>
        </trans-unit>
        <trans-unit id="706a9fb9c60fd738be99224175848f1837d058a5" translate="yes" xml:space="preserve">
          <source>With version &lt;code&gt;V1_0&lt;/code&gt; of the protocol, the handshake protocol has changed from previous versions.</source>
          <target state="translated">プロトコルのバージョン &lt;code&gt;V1_0&lt;/code&gt; では、ハンドシェイクプロトコルが以前のバージョンから変更されています。</target>
        </trans-unit>
        <trans-unit id="03c726aadd8ac092e0447f9f7e0fbd7bbf6e227c" translate="yes" xml:space="preserve">
          <source>Working with streams</source>
          <target state="translated">ストリームでの作業</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
