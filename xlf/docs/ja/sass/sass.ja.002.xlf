<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="sass">
    <body>
      <group id="sass">
        <trans-unit id="851a2a27867c5ea0d06fb7ad6ca3007c1728423a" translate="yes" xml:space="preserve">
          <source>Makes a color darker. Takes a color and a number between 0% and 100%, and returns a color with the lightness decreased by that amount.</source>
          <target state="translated">色を暗くします。色と0%から100%の間の数値を取り、その分だけ明度を下げた色を返します。</target>
        </trans-unit>
        <trans-unit id="77ee8f07a8c8bad26149c6d0da1b59832f988738" translate="yes" xml:space="preserve">
          <source>Makes a color less saturated. Takes a color and a number between 0% and 100%, and returns a color with the saturation decreased by that value.</source>
          <target state="translated">色の彩度を下げます。色と0%から100%の間の数値を取り、その値だけ彩度を下げた色を返します。</target>
        </trans-unit>
        <trans-unit id="647de436b4025a40c3c05b643dfe7af49febeb1d" translate="yes" xml:space="preserve">
          <source>Makes a color lighter. Takes a color and a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;, and returns a color with the lightness increased by that amount.</source>
          <target state="translated">色を薄くします。色と &lt;code&gt;0%&lt;/code&gt; から &lt;code&gt;100%&lt;/code&gt; の間の数値を取り、明度をその量だけ増やした色を返します。</target>
        </trans-unit>
        <trans-unit id="1202144871a6d134734e77e6f3d6ff43dcdf0d0b" translate="yes" xml:space="preserve">
          <source>Makes a color more opaque. Takes a color and a number between 0 and 1, and returns a color with the opacity increased by that amount.</source>
          <target state="translated">色をより不透明にします。色と0から1の間の数値を取り、その分だけ不透明度を上げた色を返します。</target>
        </trans-unit>
        <trans-unit id="908e36df6b3e3510d087b869b3ee05a7946f3ab4" translate="yes" xml:space="preserve">
          <source>Makes a color more saturated. Takes a color and a number between 0% and 100%, and returns a color with the saturation increased by that amount.</source>
          <target state="translated">色をより彩度の高いものにします。色と0%から100%の間の数値を取り、その分だけ彩度を上げた色を返します。</target>
        </trans-unit>
        <trans-unit id="10e046f0668046295e6f040e6154687feaedeac3" translate="yes" xml:space="preserve">
          <source>Makes a color more transparent. Takes a color and a number between 0 and 1, and returns a color with the opacity decreased by that amount.</source>
          <target state="translated">色をより透明にします。色と0から1までの数値を取り、その分だけ不透明度を下げた色を返します。</target>
        </trans-unit>
        <trans-unit id="04a4606724a73e5ff1ba9485b82d41dc451cb728" translate="yes" xml:space="preserve">
          <source>Mandatory and Optional Extends</source>
          <target state="translated">必須とオプションの拡張</target>
        </trans-unit>
        <trans-unit id="6c492e19352987aad4627ca16fec2584efdd4af1" translate="yes" xml:space="preserve">
          <source>Many &lt;a href=&quot;sass/script/functions&quot;&gt;useful functions&lt;/a&gt; for manipulating colors and other values</source>
          <target state="translated">色やその他の値を操作&lt;a href=&quot;sass/script/functions&quot;&gt;する&lt;/a&gt;ための多くの便利な関数</target>
        </trans-unit>
        <trans-unit id="99d42d39d47641e2c830f19e5708bbe88e43bf4a" translate="yes" xml:space="preserve">
          <source>Many CSS properties start with the same prefix that acts as a kind of namespace. For example, &lt;code&gt;font-family&lt;/code&gt;, &lt;code&gt;font-size&lt;/code&gt;, and &lt;code&gt;font-weight&lt;/code&gt; all start with &lt;code&gt;font-&lt;/code&gt;. Sass makes this easier and less redundant by allowing property declarations to be nested. The outer property names are added to the inner, separated by a hyphen.</source>
          <target state="translated">多くのCSSプロパティは、一種の名前空間として機能する同じプレフィックスで始まります。たとえば、 &lt;code&gt;font-family&lt;/code&gt; 、 &lt;code&gt;font-size&lt;/code&gt; 、および &lt;code&gt;font-weight&lt;/code&gt; はすべて &lt;code&gt;font-&lt;/code&gt; で始まります。Sassは、プロパティ宣言をネストできるようにすることで、これを簡単かつ冗長性を減らします。外側のプロパティ名は、ハイフンで区切られて内側に追加されます。</target>
        </trans-unit>
        <trans-unit id="0e45c14832666db8154c98279d7b4ef0f7fdfc0e" translate="yes" xml:space="preserve">
          <source>Many of these functions take or return numbers, called &lt;em&gt;indexes&lt;/em&gt;, that refer to the elements in a list. The index 1 indicates the first element of the list. Note that this is different than many programming languages where indexes start at 0! Sass also makes it easy to refer to the end of a list. The index -1 refers to the last element in a list, -2 refers to the second-to-last, and so on.</source>
          <target state="translated">これらの関数の多くは、リスト内の要素を参照する&lt;em&gt;インデックス&lt;/em&gt;と呼ばれる数値を取得または返します。インデックス1は、リストの最初の要素を示します。これは、インデックスが0から始まる多くのプログラミング言語とは異なることに注意してください。 Sassを使用すると、リストの最後を簡単に参照できます。インデックス-1はリストの最後の要素を参照し、-2は最後から2番目の要素を参照します。</target>
        </trans-unit>
        <trans-unit id="087ea5ef70a667c3f4a3b6d1d5862a41c81236d1" translate="yes" xml:space="preserve">
          <source>Many-to-Many Mode</source>
          <target state="translated">多対多モード</target>
        </trans-unit>
        <trans-unit id="366296dc9a88f7a8f38a18287666cfd9d309343d" translate="yes" xml:space="preserve">
          <source>Many-to-many Mode</source>
          <target state="translated">多対多モード</target>
        </trans-unit>
        <trans-unit id="f7bb1487586dc664a1a3a3e010343aeb82600e81" translate="yes" xml:space="preserve">
          <source>Many-to-many mode compiles one or more input files to one or more output files. The inputs are separated from the outputs with colons. It can also compile all Sass files in a directory to CSS files with the same names in another directory.</source>
          <target state="translated">多対多モードでは、1つ以上の入力ファイルを1つ以上の出力ファイルにコンパイルします。入力ファイルと出力ファイルはコロンで区切られます。また、ディレクトリ内のすべての Sass ファイルを別のディレクトリにある同名の CSS ファイルにコンパイルすることもできます。</target>
        </trans-unit>
        <trans-unit id="c003d0031df8db1646d141722584209580bad863" translate="yes" xml:space="preserve">
          <source>Many-to-many mode compiles one or more input files to one or more output files. The inputs are separated from the outputs with colons. It can also compile all Sass files in a directory to CSS files with the same names in another directory. Many-to-many mode is enabled when any argument contains a colon, &lt;em&gt;or&lt;/em&gt; when the &lt;a href=&quot;#update&quot;&gt;&lt;code&gt;--update&lt;/code&gt; flag&lt;/a&gt; or the &lt;a href=&quot;#watch&quot;&gt;&lt;code&gt;--watch&lt;/code&gt; flag&lt;/a&gt; is passed.</source>
          <target state="translated">多対多モードは、1つ以上の入力ファイルを1つ以上の出力ファイルにコンパイルします。入力はコロンで出力から分離されます。また、ディレクトリ内のすべてのSassファイルを別のディレクトリ内の同じ名前のCSSファイルにコンパイルすることもできます。多対多モードは、引数にコロンが含まれている場合、&lt;em&gt;または&lt;/em&gt;&lt;a href=&quot;#update&quot;&gt; &lt;code&gt;--update&lt;/code&gt; フラグ&lt;/a&gt;または&lt;a href=&quot;#watch&quot;&gt; &lt;code&gt;--watch&lt;/code&gt; フラグ&lt;/a&gt;が渡された場合に有効になります。</target>
        </trans-unit>
        <trans-unit id="80b0a029997a082113570a2bb733b56c05b12359" translate="yes" xml:space="preserve">
          <source>Many-to-many mode will only compile stylesheets whose dependencies have been modified more recently than the corresponding CSS file was generated. It will also print status messages when updating stylesheets.</source>
          <target state="translated">Many-to-many モードは、対応する CSS ファイルが生成された時よりも最近に依存関係が変更されたスタイルシートのみをコンパイルします。また、スタイルシートを更新する際にステータスメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="80071cd75107cd5c4afdb2571725ea6733631038" translate="yes" xml:space="preserve">
          <source>Maps</source>
          <target state="translated">Maps</target>
        </trans-unit>
        <trans-unit id="b262d9ae1e64d70be3bbb65675f5b105183f3e1e" translate="yes" xml:space="preserve">
          <source>Maps allow any Sass values to be used as their keys. The &lt;a href=&quot;../operators/equality&quot;&gt;&lt;code&gt;==&lt;/code&gt; operator&lt;/a&gt; is used to determine whether two keys are the same.</source>
          <target state="translated">マップでは、任意のSass値をキーとして使用できます。&lt;a href=&quot;../operators/equality&quot;&gt; &lt;code&gt;==&lt;/code&gt; 演算子は、&lt;/a&gt; 2つのキーが同じであるかどうかを決定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="cce96232fc4038e65cda3f21c77a761f06c9cc13" translate="yes" xml:space="preserve">
          <source>Maps are all about associating keys and values, so naturally there&amp;rsquo;s a way to get the value associated with a key: the &lt;a href=&quot;../modules/map#get&quot;&gt;&lt;code&gt;map.get($map, $key)&lt;/code&gt; function&lt;/a&gt;! This function returns the value in the map associated with the given key. It returns &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; if the map doesn&amp;rsquo;t contain the key.</source>
          <target state="translated">マップはすべてキーと値を関連付けることを目的としているため、当然、キーに関連付けられた値を取得する方法があります&lt;a href=&quot;../modules/map#get&quot;&gt; &lt;code&gt;map.get($map, $key)&lt;/code&gt; 関数&lt;/a&gt;です。この関数は、指定されたキーに関連付けられたマップ内の値を返します。マップにキーが含まれていない場合は&lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="7908a2bbd7a8ad31b242280b31b2c7d491579a76" translate="yes" xml:space="preserve">
          <source>Maps can also be used anywhere lists can. When used by a list function, a map is treated as a list of pairs. For example, &lt;code&gt;(key1: value1, key2: value2)&lt;/code&gt; would be treated as the nested list &lt;code&gt;key1 value1, key2 value2&lt;/code&gt; by list functions. Lists cannot be treated as maps, though, with the exception of the empty list. &lt;code&gt;()&lt;/code&gt; represents both a map with no key/value pairs and a list with no elements.</source>
          <target state="translated">マップは、リストができる場所ならどこでも使用できます。リスト関数で使用すると、マップはペアのリストとして扱われます。たとえば、 &lt;code&gt;(key1: value1, key2: value2)&lt;/code&gt; は、リスト関数によってネストされたリスト &lt;code&gt;key1 value1, key2 value2&lt;/code&gt; として扱われます。空のリストを除いて、リストをマップとして扱うことはできません。 &lt;code&gt;()&lt;/code&gt; は、キーと値のペアのないマップと、要素のないリストの両方を表します。</target>
        </trans-unit>
        <trans-unit id="89e949ab7dcea4e2be5a81f1c90709f5ee38dbbd" translate="yes" xml:space="preserve">
          <source>Maps cannot be converted to plain CSS. Using one as the value of a variable or an argument to a CSS function will cause an error. Use the &lt;code&gt;inspect($value)&lt;/code&gt; function to produce an output string useful for debugging maps.</source>
          <target state="translated">マップはプレーンCSSに変換できません。1つを変数の値またはCSS関数の引数として使用すると、エラーが発生します。 &lt;code&gt;inspect($value)&lt;/code&gt; 関数を使用して、マップのデバッグに役立つ出力文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="ed2d94a1db9fc5b83f3a946bfb51b010f8a1984d" translate="yes" xml:space="preserve">
          <source>Maps created through this API are still forbidden from having duplicate keys.</source>
          <target state="translated">このAPIを介して作成されたマップは、重複したキーを持つことはまだ禁止されています。</target>
        </trans-unit>
        <trans-unit id="73855d8f1e07ea5cf14e0b18c6224668001cc571" translate="yes" xml:space="preserve">
          <source>Maps in Sass are &lt;em&gt;immutable&lt;/em&gt;, which means that the contents of a map value never changes. Sass&amp;rsquo;s map functions all return new maps rather than modifying the originals. Immutability helps avoid lots of sneaky bugs that can creep in when the same map is shared across different parts of the stylesheet.</source>
          <target state="translated">Sassのマップは&lt;em&gt;不変&lt;/em&gt;です。つまり、マップ値の内容は変更されません。Sassのマップ関数はすべて、元のマップを変更するのではなく、新しいマップを返します。不変性は、同じマップがスタイルシートの異なる部分で共有されているときに忍び寄る可能性のある多くの卑劣なバグを回避するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="dd7d356183b77929938ce65e1b5ffc1230ed4bc0" translate="yes" xml:space="preserve">
          <source>Maps in Sass hold pairs of keys and values, and make it easy to look up a value by its corresponding key. They&amp;rsquo;re written &lt;code&gt;(&amp;lt;expression&amp;gt;: &amp;lt;expression&amp;gt;, &amp;lt;expression&amp;gt;: &amp;lt;expression&amp;gt;)&lt;/code&gt;. The &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; before the &lt;code&gt;:&lt;/code&gt; is the key, and the expression after is the value associated with that key. The keys must be unique, but the values may be duplicated. Unlike &lt;a href=&quot;lists&quot;&gt;lists&lt;/a&gt;, maps &lt;em&gt;must&lt;/em&gt; be written with parentheses around them. A map with no pairs is written &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">Sassのマップはキーと値のペアを保持し、対応するキーで値を簡単に検索できるようにします。それらは &lt;code&gt;(&amp;lt;expression&amp;gt;: &amp;lt;expression&amp;gt;, &amp;lt;expression&amp;gt;: &amp;lt;expression&amp;gt;)&lt;/code&gt; 書かれています。 &lt;code&gt;:&lt;/code&gt; の前の&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;式&lt;/a&gt;はキーであり、後の式はそのキーに関連付けられた値です。キーは一意である必要がありますが、値が重複している可能性があります。&lt;a href=&quot;lists&quot;&gt;リスト&lt;/a&gt;とは異なり、マップ&lt;em&gt;は&lt;/em&gt;括弧で囲む&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。ペアのないマップが書き​​込まれます &lt;code&gt;()&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="18460ede0e77cbca4b62b2e50b96144bebae56ee" translate="yes" xml:space="preserve">
          <source>Maps represent an association between keys and values, where keys are used to look up values. They make it easy to collect values into named groups and access those groups dynamically. They have no direct parallel in CSS, although they're syntactically similar to media query expressions:</source>
          <target state="translated">マップはキーと値の関連付けを表し、キーは値を検索するために使用されます。これにより、値を名前付きのグループに集めたり、それらのグループに動的にアクセスしたりすることが容易になります。CSS には直接の並列性はありませんが、構文的にはメディア クエリ式に似ています。</target>
        </trans-unit>
        <trans-unit id="6651c921f3e6878f503603068099966453a6ba18" translate="yes" xml:space="preserve">
          <source>Members (variables, functions, and mixins) loaded with &lt;code&gt;@use&lt;/code&gt; are only visible in the stylesheet that loads them. Other stylesheets will need to write their own &lt;code&gt;@use&lt;/code&gt; rules if they also want to access them. This helps make it easy to figure out exactly where each member is coming from. If you want to load members from many files at once, you can use the &lt;a href=&quot;forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rule&lt;/a&gt; to forward them all from one shared file.</source>
          <target state="translated">&lt;code&gt;@use&lt;/code&gt; でロードされたメンバー（変数、関数、およびミックスイン）は、それらをロードするスタイルシートにのみ表示されます。他のスタイルシートにもアクセスしたい場合は、独自の &lt;code&gt;@use&lt;/code&gt; ルールを作成する必要があります。これにより、各メンバーがどこから来ているのかを簡単に把握できます。一度に多数のファイルからメンバーをロードする場合は、&lt;a href=&quot;forward&quot;&gt; &lt;code&gt;@forward&lt;/code&gt; ルール&lt;/a&gt;を使用して、1つの共有ファイルからすべてのメンバーを転送できます。</target>
        </trans-unit>
        <trans-unit id="266e0db2e6092e7da33438bebb8386fdab1f84e9" translate="yes" xml:space="preserve">
          <source>Merges two maps together into a new map. Keys in &lt;code&gt;$map2&lt;/code&gt; will take precedence over keys in &lt;code&gt;$map1&lt;/code&gt;.</source>
          <target state="translated">2つのマップを新しいマップにマージします。内のキー &lt;code&gt;$map2&lt;/code&gt; 内のキーよりも優先されます &lt;code&gt;$map1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51a9c2b299ed6b9e7a2c1942c4f2f202f049e8e3" translate="yes" xml:space="preserve">
          <source>Merging Selector Sequences</source>
          <target state="translated">セレクタシーケンスのマージ</target>
        </trans-unit>
        <trans-unit id="dca984afd74a0089c1d5a5816e4de2e8d46a60b5" translate="yes" xml:space="preserve">
          <source>Migrations</source>
          <target state="translated">Migrations</target>
        </trans-unit>
        <trans-unit id="e0c1c8591cf6a520cc156585232fdfa4562258f3" translate="yes" xml:space="preserve">
          <source>Migrator</source>
          <target state="translated">Migrator</target>
        </trans-unit>
        <trans-unit id="1a5d17590464c69e30696f59e46e452b8da18b54" translate="yes" xml:space="preserve">
          <source>Mixes two colors together. Specifically, takes the average of each of the RGB components, optionally weighted by the given percentage. The opacity of the colors is also considered when weighting the components.</source>
          <target state="translated">2 つの色を混ぜ合わせます。具体的には、 RGB 成分のそれぞれの平均をとり、 任意で与えられたパーセンテージで加重します。色の不透明度も成分の重み付けの際に考慮されます。</target>
        </trans-unit>
        <trans-unit id="3e03964482bfe1b1c6309d26cc15ab431a314d03" translate="yes" xml:space="preserve">
          <source>Mixin Directives #mixins</source>
          <target state="translated">ミキシングディレクティブ #mixins</target>
        </trans-unit>
        <trans-unit id="12f1da765fb7717db8da107e51c52eb9c8a76e44" translate="yes" xml:space="preserve">
          <source>Mixin definitions can also include other mixins. For example:</source>
          <target state="translated">ミキシンの定義には、他のミックスインを含めることもできます。例えば、以下のようなものです。</target>
        </trans-unit>
        <trans-unit id="6cec7617bbb6d9892fc290c647e0a6b541abeb1d" translate="yes" xml:space="preserve">
          <source>Mixin names, like all Sass identifiers, treat hyphens and underscores as identical. This means that &lt;code&gt;reset-list&lt;/code&gt; and &lt;code&gt;reset_list&lt;/code&gt; both refer to the same mixin. This is a historical holdover from the very early days of Sass, when it &lt;em&gt;only&lt;/em&gt; allowed underscores in identifier names. Once Sass added support for hyphens to match CSS&amp;rsquo;s syntax, the two were made equivalent to make migration easier.</source>
          <target state="translated">ミックスイン名は、すべてのSass識別子と同様に、ハイフンとアンダースコアを同一として扱います。これは、 &lt;code&gt;reset-list&lt;/code&gt; と &lt;code&gt;reset_list&lt;/code&gt; の両方が同じミックスインを参照していることを意味します。これは、識別子名にアンダースコア&lt;em&gt;しか&lt;/em&gt;許可されてい&lt;em&gt;なかった&lt;/em&gt;Sassのごく初期の時代からの歴史的な遺物です。SassがCSSの構文に一致するハイフンのサポートを追加すると、移行を容易にするために2つが同等になりました。</target>
        </trans-unit>
        <trans-unit id="d634308003ff858f289d2833f637dfc9bee3fc78" translate="yes" xml:space="preserve">
          <source>Mixins</source>
          <target state="translated">Mixins</target>
        </trans-unit>
        <trans-unit id="e55eee6e21d1bac315ca1a356e8d30a8a5b61967" translate="yes" xml:space="preserve">
          <source>Mixins allow you to define styles that can be re-used throughout the stylesheet without needing to resort to non-semantic classes like &lt;code&gt;.float-left&lt;/code&gt;. Mixins can also contain full CSS rules, and anything else allowed elsewhere in a Sass document. They can even take &lt;a href=&quot;#mixin-arguments&quot;&gt;arguments&lt;/a&gt; which allows you to produce a wide variety of styles with very few mixins.</source>
          <target state="translated">ミックスインを使用すると、 &lt;code&gt;.float-left&lt;/code&gt; などの非セマンティッククラスに頼ることなく、スタイルシート全体で再利用できるスタイルを定義できます。ミックスインには、完全なCSSルールや、Sassドキュメントの他の場所で許可されているその他のルールを含めることもできます。それらは&lt;a href=&quot;#mixin-arguments&quot;&gt;引数&lt;/a&gt;を取ることもでき、ミックスインが非常に少ない幅広いスタイルを作成できます。</target>
        </trans-unit>
        <trans-unit id="a14ae4a02552d5310b5b307c5a6669df8e7abf30" translate="yes" xml:space="preserve">
          <source>Mixins allow you to define styles that can be re-used throughout your stylesheet. They make it easy to avoid using non-semantic classes like &lt;code&gt;.float-left&lt;/code&gt;, and to distribute collections of styles in libraries.</source>
          <target state="translated">ミックスインを使用すると、スタイルシート全体で再利用できるスタイルを定義できます。これらにより、 &lt;code&gt;.float-left&lt;/code&gt; のような非セマンティッククラスの使用を回避し、ライブラリでスタイルのコレクションを配布することが容易になります。</target>
        </trans-unit>
        <trans-unit id="3a0ecb07e9c0f451b790fb7125d9f99ec780ec5d" translate="yes" xml:space="preserve">
          <source>Mixins are defined using the &lt;code&gt;@mixin&lt;/code&gt; at-rule, which is written &lt;code&gt;@mixin &amp;lt;name&amp;gt; { ... }&lt;/code&gt; or &lt;code&gt;@mixin name(&amp;lt;arguments...&amp;gt;) { ... }&lt;/code&gt;. A mixin&amp;rsquo;s name can be any Sass identifier, and it can contain any &lt;a href=&quot;../syntax/structure#statements&quot;&gt;statement&lt;/a&gt; other than &lt;a href=&quot;../syntax/structure#top-level-statements&quot;&gt;top-level statements&lt;/a&gt;. They can be used to encapsulate styles that can be dropped into a single &lt;a href=&quot;../style-rules&quot;&gt;style rule&lt;/a&gt;; they can contain style rules of their own that can be nested in other rules or included at the top level of the stylesheet; or they can just serve to modify variables.</source>
          <target state="translated">ミックスインは、 &lt;code&gt;@mixin&lt;/code&gt; &lt;code&gt;@mixin &amp;lt;name&amp;gt; { ... }&lt;/code&gt; または &lt;code&gt;@mixin name(&amp;lt;arguments...&amp;gt;) { ... }&lt;/code&gt; と記述された@ mixinat -ruleを使用して定義されます。ミックスインの名前は任意のSass識別子にすることができ、&lt;a href=&quot;../syntax/structure#top-level-statements&quot;&gt;トップレベルのステートメント&lt;/a&gt;以外の任意の&lt;a href=&quot;../syntax/structure#statements&quot;&gt;ステートメント&lt;/a&gt;を含めることができます。これらは、単一の&lt;a href=&quot;../style-rules&quot;&gt;スタイルルールに&lt;/a&gt;ドロップできるスタイルをカプセル化するために使用できます。それらには、他のルールにネストしたり、スタイルシートの最上位に含めることができる独自のスタイルルールを含めることができます。または、変数を変更するためだけに使用することもできます。</target>
        </trans-unit>
        <trans-unit id="644fdc872f40164f56f1c53cce947da35dec5fbf" translate="yes" xml:space="preserve">
          <source>Mixins are defined with the &lt;code&gt;@mixin&lt;/code&gt; directive. It's followed by the name of the mixin and optionally the &lt;a href=&quot;#mixin-arguments&quot;&gt;arguments&lt;/a&gt;, and a block containing the contents of the mixin. For example, the &lt;code&gt;large-text&lt;/code&gt; mixin is defined as follows:</source>
          <target state="translated">ミックスインは &lt;code&gt;@mixin&lt;/code&gt; ディレクティブで定義されます。その後に、ミックスインの名前とオプションの&lt;a href=&quot;#mixin-arguments&quot;&gt;引数&lt;/a&gt;、およびミックスインのコンテンツを含むブロックが続きます。たとえば、 &lt;code&gt;large-text&lt;/code&gt; ミックスインは次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="8abeb939278636d23f3812346051fac3995b1507" translate="yes" xml:space="preserve">
          <source>Mixins are included in the document with the &lt;code&gt;@include&lt;/code&gt; directive. This takes the name of a mixin and optionally &lt;a href=&quot;#mixin-arguments&quot;&gt;arguments to pass to it&lt;/a&gt;, and includes the styles defined by that mixin into the current rule. For example:</source>
          <target state="translated">ミックスインは &lt;code&gt;@include&lt;/code&gt; ディレクティブを使用してドキュメントに含まれます。これは、ミックスインの名前とオプションで&lt;a href=&quot;#mixin-arguments&quot;&gt;それに渡す引数を&lt;/a&gt;受け取り、そのミックスインによって定義されたスタイルを現在のルールに含めます。例えば：</target>
        </trans-unit>
        <trans-unit id="0abd91185955b760fd8e194eea9c215e7514a33c" translate="yes" xml:space="preserve">
          <source>Mixins are included into the current context using the &lt;code&gt;@include&lt;/code&gt; at-rule, which is written &lt;code&gt;@include &amp;lt;name&amp;gt;&lt;/code&gt; or &lt;code&gt;@include &amp;lt;name&amp;gt;(&amp;lt;arguments...&amp;gt;)&lt;/code&gt;, with the name of the mixin being included.</source>
          <target state="translated">ミックスインは、 &lt;code&gt;@include&lt;/code&gt; &lt;code&gt;@include &amp;lt;name&amp;gt;&lt;/code&gt; または &lt;code&gt;@include &amp;lt;name&amp;gt;(&amp;lt;arguments...&amp;gt;)&lt;/code&gt; と記述された@include at-ruleを使用して現在のコンテキストに含まれ、ミックスインの名前が​​含まれます。</target>
        </trans-unit>
        <trans-unit id="aa625b8e1fe09d8119662f87727f1fd539968fe6" translate="yes" xml:space="preserve">
          <source>Mixins can also be included using explicit keyword arguments. For instance, the above example could be written as:</source>
          <target state="translated">ミキシンは、明示的なキーワード引数を使用して含めることもできます。例えば、上の例は次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="a5c96c9da9afb1e3ab9aeab4756923db18e85058" translate="yes" xml:space="preserve">
          <source>Mixins can also specify default values for their arguments using the normal variable-setting syntax. Then when the mixin is included, if it doesn't pass in that argument, the default value will be used instead. For example:</source>
          <target state="translated">ミキシンは、通常の変数設定構文を使って引数にデフォルト値を指定することもできます。ミキシンがインクルードされたときに、その引数を渡さなかった場合は、代わりにデフォルト値が使用されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="cee9487bef7a98638f1813c34014ac1e4a7ef631" translate="yes" xml:space="preserve">
          <source>Mixins can also take arguments, which allows their behavior to be customized each time they&amp;rsquo;re called. The arguments are specified in the &lt;code&gt;@mixin&lt;/code&gt; rule after the mixin&amp;rsquo;s name, as a list of variable names surrounded by parentheses. The mixin must then be included with the same number of arguments in the form of &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expressions&lt;/a&gt;. The values of these expression are available within the mixin&amp;rsquo;s body as the corresponding variables.</source>
          <target state="translated">Mixinは引数を取ることもできます。これにより、呼び出されるたびに動作をカスタマイズできます。引数は、 &lt;code&gt;@mixin&lt;/code&gt; mixinルールで、かっこで囲まれた変数名のリストとして、ミックスインの名前の後に指定されます。ミックスインは、&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript式の&lt;/a&gt;形式で同じ数の引数に含める必要があります。これらの式の値は、対応する変数としてミックスインの本体内で利用できます。</target>
        </trans-unit>
        <trans-unit id="a89f1e192461e5943e97df4ea266b05de3cfe71b" translate="yes" xml:space="preserve">
          <source>Mixins can take SassScript values as arguments, which are given when the mixin is included and made available within the mixin as variables.</source>
          <target state="translated">ミキシンはSassScriptの値を引数として取ることができ、これはミキシンがインクルードされたときに与えられ、ミキシン内で変数として利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="2071f293bfe403300472d64fe85c7676303d0010" translate="yes" xml:space="preserve">
          <source>Mixins may also be included outside of any rule (that is, at the root of the document) as long as they don't directly define any properties or use any parent references. For example:</source>
          <target state="translated">ミキシンは、プロパティを直接定義したり、親参照を使用したりしない限り、ルールの外側(つまり文書のルート)に含めることもできます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1b75de159e94ab7dfa1b34d271e0ee2373620128" translate="yes" xml:space="preserve">
          <source>Mixins may also contain selectors, possibly mixed with properties. The selectors can even contain &lt;a href=&quot;#referencing_parent_selectors_&quot;&gt;parent references&lt;/a&gt;. For example:</source>
          <target state="translated">Mixinsにはセレクターが含まれる場合があり、プロパティと混合される可能性があります。セレクタには&lt;a href=&quot;#referencing_parent_selectors_&quot;&gt;親参照を&lt;/a&gt;含めることもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="2e0ba38fcb196c03060e6db7ef49eab994c721b6" translate="yes" xml:space="preserve">
          <source>Mixins may include themselves. This is different than the behavior of Sass versions prior to 3.3, where mixin recursion was forbidden.</source>
          <target state="translated">ミキシンは自分自身を含むことができます。これは、3.3以前のSassバージョンではmixinの再帰が禁止されていた動作とは異なります。</target>
        </trans-unit>
        <trans-unit id="11ace01bca95506e406ba754b7248182fab3d1d8" translate="yes" xml:space="preserve">
          <source>Mixins that only define descendent selectors can be safely mixed into the top most level of a document.</source>
          <target state="translated">子孫セレクタのみを定義したミキシンは、文書の最上位レベルに安全に混在させることができます。</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="03ee36e7d4d406da6169a9a269a027aeecb4cec4" translate="yes" xml:space="preserve">
          <source>Modules are only loaded once, so if you change the configuration after you &lt;code&gt;@import&lt;/code&gt; a module for the first time (even indirectly), the change will be ignored if you &lt;code&gt;@import&lt;/code&gt; the module again.</source>
          <target state="translated">モジュールは一度だけロードされるため、モジュールを初めて &lt;code&gt;@import&lt;/code&gt; した後に（間接的にも）構成を変更した場合、モジュールを再度 &lt;code&gt;@import&lt;/code&gt; しても、変更は無視されます。</target>
        </trans-unit>
        <trans-unit id="b7eac0786d726187f2fd764b601f5ededf17daa6" translate="yes" xml:space="preserve">
          <source>Modules will always be loaded relative to the current file first, though. Load paths will only be used if no relative file exists that matches the module&amp;rsquo;s URL. This ensures that you can&amp;rsquo;t accidentally mess up your relative imports when you add a new library.</source>
          <target state="translated">ただし、モジュールは常に現在のファイルを基準にして最初にロードされます。ロードパスは、モジュールのURLに一致する相対ファイルが存在しない場合にのみ使用されます。これにより、新しいライブラリを追加するときに、相対的なインポートを誤って台無しにすることがなくなります。</target>
        </trans-unit>
        <trans-unit id="e212feca960df74d558bb69cf520167281ac39e5" translate="yes" xml:space="preserve">
          <source>Most of the time, it&amp;rsquo;s a good idea to use &lt;a href=&quot;strings#quoted&quot;&gt;quoted strings&lt;/a&gt; rather than &lt;a href=&quot;strings#unquoted&quot;&gt;unquoted strings&lt;/a&gt; for map keys. This is because some values, such as color names, may &lt;em&gt;look&lt;/em&gt; like unquoted strings but actually be other types. To avoid confusing problems down the line, just use quotes!</source>
          <target state="translated">ほとんどの場合、マップキーには、&lt;a href=&quot;strings#unquoted&quot;&gt;引用符で囲ま&lt;/a&gt;&lt;a href=&quot;strings#quoted&quot;&gt;れていない文字列&lt;/a&gt;ではなく、引用符で囲まれた文字列を使用することをお勧めします。これは、色名などの一部の値が引用符で囲まれていない文字列のように&lt;em&gt;見えて&lt;/em&gt;も、実際には他のタイプであるためです。混乱を招く問題を回避するには、引用符を使用してください。</target>
        </trans-unit>
        <trans-unit id="6caa57f1b284ddb2fbcb690abae7336beef21a73" translate="yes" xml:space="preserve">
          <source>Most popular Node.js build systems have integrations available for the JSAPI:</source>
          <target state="translated">ほとんどの人気のあるNode.jsビルドシステムでは、JSAPIに対応した統合機能が利用可能です。</target>
        </trans-unit>
        <trans-unit id="4ecffc55002b5b51a6ea33821a9ca1648bf908e4" translate="yes" xml:space="preserve">
          <source>Most web servers compress the CSS they serve using an algorithm that&amp;rsquo;s very good at handling repeated chunks of identical text. This means that, although mixins may produce more CSS than extends, they probably won&amp;rsquo;t substantially increase the amount your users need to download. So choose the feature that makes the most sense for your use-case, not the one that generates the least CSS!</source>
          <target state="translated">ほとんどのWebサーバーは、同じテキストの繰り返しチャンクを処理するのに非常に優れたアルゴリズムを使用して、提供するCSSを圧縮します。つまり、ミックスインは拡張よりも多くのCSSを生成する可能性がありますが、ユーザーがダウンロードする必要のある量を大幅に増やすことはおそらくないでしょう。したがって、CSSの生成が最も少ない機能ではなく、ユースケースに最も適した機能を選択してください。</target>
        </trans-unit>
        <trans-unit id="4d5c195b3ec1480b097649cc98e70b7c7295f4d9" translate="yes" xml:space="preserve">
          <source>Much of Sass&amp;rsquo;s extra functionality comes in the form of new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule&quot;&gt;at-rules&lt;/a&gt; it adds on top of CSS:</source>
          <target state="translated">Sassの追加機能の多くは、CSSに追加される新しい&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule&quot;&gt;at-rulesの&lt;/a&gt;形で提供されます。</target>
        </trans-unit>
        <trans-unit id="d16a27d69c336f36f8b8c3be089eb20a3976fee1" translate="yes" xml:space="preserve">
          <source>Multiple Assignment #each-multi-assign</source>
          <target state="translated">複数の課題 #each-multi-assignment</target>
        </trans-unit>
        <trans-unit id="e6f913e5657c2f46bca6d86b0b282bdb4e92d9bf" translate="yes" xml:space="preserve">
          <source>Multiple Extends</source>
          <target state="translated">複数の拡張</target>
        </trans-unit>
        <trans-unit id="6b9c3fd36c58a4b311728f37c3faf47f2b86cda9" translate="yes" xml:space="preserve">
          <source>Multiple extends can also be written using a comma-separated list of selectors. For example, &lt;code&gt;@extend .error, .attention&lt;/code&gt; is the same as &lt;code&gt;@extend .error; @extend .attention&lt;/code&gt;.</source>
          <target state="translated">複数の拡張は、セレクターのコンマ区切りリストを使用して記述することもできます。たとえば、 &lt;code&gt;@extend .error, .attention&lt;/code&gt; は &lt;code&gt;@extend .error; @extend .attention&lt;/code&gt; と同じです。@extend .attention。</target>
        </trans-unit>
        <trans-unit id="ba6f5c598a8196a3ad3093fcbf81e9ebc9a9bbaa" translate="yes" xml:space="preserve">
          <source>Named arguments can be passed in any order, and arguments with default values can be omitted. Since the named arguments are variable names, underscores and dashes can be used interchangeably.</source>
          <target state="translated">名前付き引数は任意の順序で渡すことができ、デフォルト値を持つ引数は省略することができます。名前付き引数は変数名なので、アンダースコアとダッシュは互換性があります。</target>
        </trans-unit>
        <trans-unit id="d1f60bbdf9d3e6d11e707a834a9fa47911129fbc" translate="yes" xml:space="preserve">
          <source>Negative index values address elements in reverse order, starting with the last element in the list.</source>
          <target state="translated">負のインデックス値は、リストの最後の要素から順に逆順に要素を指定します。</target>
        </trans-unit>
        <trans-unit id="2e21957ba8ac2ad32ca0fe1899ea29dd3dc4d523" translate="yes" xml:space="preserve">
          <source>Nested &lt;code&gt;@import&lt;/code&gt; #nested-import</source>
          <target state="translated">ネストされた &lt;code&gt;@import&lt;/code&gt; import＃nested-import</target>
        </trans-unit>
        <trans-unit id="ea53187d0b8860192e4cc973b4edf4179ca436b1" translate="yes" xml:space="preserve">
          <source>Nested Properties</source>
          <target state="translated">ネストされたプロパティ</target>
        </trans-unit>
        <trans-unit id="ecf40457f10c33b29daa2a84e20b485cd1d251d0" translate="yes" xml:space="preserve">
          <source>Nested Rules</source>
          <target state="translated">入れ子になったルール</target>
        </trans-unit>
        <trans-unit id="ded4993ce5217af403db83036f4428e8476a2e11" translate="yes" xml:space="preserve">
          <source>Nested imports are very useful for scoping third-party stylesheets, but if you&amp;rsquo;re the author of the stylesheet you&amp;rsquo;re importing, it&amp;rsquo;s usually a better idea to write your styles in a &lt;a href=&quot;mixin&quot;&gt;mixin&lt;/a&gt; and include that mixin in the nested context. A mixin can be used in more flexible ways, and it&amp;rsquo;s clearer when looking at the imported stylesheet how it&amp;rsquo;s intended to be used.</source>
          <target state="translated">ネストされたインポートは、サードパーティのスタイルシートのスコープに非常に役立ちますが、インポートするスタイルシートの作成者である場合は、通常、スタイルを&lt;a href=&quot;mixin&quot;&gt;ミックスイン&lt;/a&gt;に記述し、そのミックスインをネストされたコンテキストに含めることをお勧めします。ミックスインはより柔軟な方法で使用でき、インポートされたスタイルシートを見ると、どのように使用されるのかが明確になります。</target>
        </trans-unit>
        <trans-unit id="029abc8fcd094e12c6bd6cb1af59a9ff787923a7" translate="yes" xml:space="preserve">
          <source>Nested properties</source>
          <target state="translated">入れ子になったプロパティ</target>
        </trans-unit>
        <trans-unit id="f0b610f173b363c6d397168ae6e235e8c6ca1741" translate="yes" xml:space="preserve">
          <source>Nested rules</source>
          <target state="translated">入れ子になったルール</target>
        </trans-unit>
        <trans-unit id="898fb9c1d3df88b05af2c35f92fa9855403317fd" translate="yes" xml:space="preserve">
          <source>Nested rules are clever about handling selector lists (that is, comma-separated selectors). Each complex selector (the ones between the commas) is nested separately, and then they&amp;rsquo;re combined back into a selector list.</source>
          <target state="translated">ネストされたルールは、セレクターリスト（つまり、コンマ区切りのセレクター）の処理に関して巧妙です。各複雑なセレクター（コンマの間にあるもの）は個別にネストされ、次にそれらが結合されてセレクターリストに戻ります。</target>
        </trans-unit>
        <trans-unit id="8ba546c34feebcc571b499703908b859182411c0" translate="yes" xml:space="preserve">
          <source>Nested rules are super helpful, but they can also make it hard to visualize how much CSS you&amp;rsquo;re actually generating. The deeper you nest, the more bandwidth it takes to serve your CSS and the more work it takes the browser to render it. Keep those selectors shallow!</source>
          <target state="translated">ネストされたルールは非常に役立ちますが、実際に生成しているCSSの量を視覚化するのが難しくなる可能性もあります。ネストが深くなるほど、CSSを提供するために必要な帯域幅が増え、ブラウザーがCSSをレンダリングするために必要な作業が増えます。それらのセレクターを浅くしてください！</target>
        </trans-unit>
        <trans-unit id="829996697cf657d3999063e276100b291e8b02d6" translate="yes" xml:space="preserve">
          <source>Nested style is the default Sass style, because it reflects the structure of the CSS styles and the HTML document they're styling. Each property has its own line, but the indentation isn't constant. Each rule is indented based on how deeply it's nested. For example:</source>
          <target state="translated">Nested styleは、CSSスタイルの構造とそれらがスタイリングしているHTMLドキュメントを反映しているため、Sassのデフォルトスタイルです。各プロパティはそれぞれ独自の行を持ちますが、インデントは一定ではありません。各ルールはネストされた深さに応じてインデントされます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="500e991d7263822a1c7bc95c88315929abd16088" translate="yes" xml:space="preserve">
          <source>Nested style is very useful when looking at large CSS files: it allows you to easily grasp the structure of the file without actually reading anything.</source>
          <target state="translated">ネストされたスタイルは、大きなCSSファイルを見るときに非常に便利で、実際に何も読まなくてもファイルの構造を簡単に把握することができます。</target>
        </trans-unit>
        <trans-unit id="f06563daf6842a8e082fd4615e320fc869bb69d9" translate="yes" xml:space="preserve">
          <source>Nesting</source>
          <target state="translated">Nesting</target>
        </trans-unit>
        <trans-unit id="bf84d228c3d06053863c78671c4f2260ed4d3b10" translate="yes" xml:space="preserve">
          <source>New possible values may be added in the future. It may return either &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;map&lt;/code&gt; for &lt;code&gt;()&lt;/code&gt;, depending on whether or not it was returned by a &lt;a href=&quot;map&quot;&gt;map function&lt;/a&gt;.</source>
          <target state="translated">将来、新しい可能な値が追加される可能性があります。これは、どちらかを返すことがあり &lt;code&gt;list&lt;/code&gt; や &lt;code&gt;map&lt;/code&gt; のために &lt;code&gt;()&lt;/code&gt; を、それが返されたかどうかに応じて、&lt;a href=&quot;map&quot;&gt;マップ機能&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="42c9a5ee2dab1779e68f9b7a64ca2d27ba2ceeb6" translate="yes" xml:space="preserve">
          <source>No matter how a Sass color is originally written, it can be used with both HSL-based and RGB-based functions!</source>
          <target state="translated">Sassカラーが元々どのように書かれていても、HSLベースでもRGBベースでも使用できます!</target>
        </trans-unit>
        <trans-unit id="ea89deb3b3ac3462ef826d2e89bb608cba87394f" translate="yes" xml:space="preserve">
          <source>Node Sass</source>
          <target state="translated">ノードサッス</target>
        </trans-unit>
        <trans-unit id="033bb91d5d01ceb3484df5688dfd173443293f8f" translate="yes" xml:space="preserve">
          <source>Node Sass and older versions of Dart Sass support loading files with the extension &lt;code&gt;.css&lt;/code&gt;, but contrary to the specification they&amp;rsquo;re treated as SCSS files rather than being parsed as CSS. This behavior has been deprecated in Node Sass, and an update is in the works to load them as plain CSS instead.</source>
          <target state="translated">NodeSassおよび古いバージョンのDartSassは、拡張子が &lt;code&gt;.css&lt;/code&gt; のファイルの読み込みをサポートしていますが、仕様に反して、CSSとして解析されるのではなく、SCSSファイルとして扱われます。この動作はNodeSassで非推奨になり、代わりにプレーンCSSとしてロードするための更新が進行中です。</target>
        </trans-unit>
        <trans-unit id="72afbf7761abcd7a500b7e8851fd9c6a7a3b749e" translate="yes" xml:space="preserve">
          <source>Normally when you assign a value to a variable, if that variable already had a value, its old value is overwritten. But if you&amp;rsquo;re writing a Sass library, you might want to allow your users to configure your library&amp;rsquo;s variables before you use them to generate CSS.</source>
          <target state="translated">通常、変数に値を割り当てるときに、その変数にすでに値がある場合、その古い値は上書きされます。ただし、Sassライブラリを作成している場合は、CSSを生成するために使用する前に、ユーザーがライブラリの変数を構成できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="f8b80d909c92f046f3dca9e5eef78526694d5082" translate="yes" xml:space="preserve">
          <source>Normally when you extend a selector, it's an error if that &lt;code&gt;@extend&lt;/code&gt; doesn't work. For example, if you write &lt;code&gt;a.important {@extend .notice}&lt;/code&gt;, it's an error if there are no selectors that contain &lt;code&gt;.notice&lt;/code&gt;. It's also an error if the only selector containing &lt;code&gt;.notice&lt;/code&gt; is &lt;code&gt;h1.notice&lt;/code&gt;, since &lt;code&gt;h1&lt;/code&gt; conflicts with &lt;code&gt;a&lt;/code&gt; and so no new selector would be generated.</source>
          <target state="translated">通常、セレクターを拡張するときに、その &lt;code&gt;@extend&lt;/code&gt; が機能しない場合はエラーになります。たとえば、 &lt;code&gt;a.important {@extend .notice}&lt;/code&gt; と記述した場合、 &lt;code&gt;.notice&lt;/code&gt; を含むセレクターがないとエラーになります。のみを含むセレクタ場合にもエラーだ &lt;code&gt;.notice&lt;/code&gt; がある &lt;code&gt;h1.notice&lt;/code&gt; ことから、 &lt;code&gt;h1&lt;/code&gt; と競合し、新しいセレクタが生成されないことになるので。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="123af529f72c6cde57409cdfddfd0d2f87ec972b" translate="yes" xml:space="preserve">
          <source>Normally, every argument a function declares must be passed when that function is included. However, you can make an argument optional by defining a &lt;em&gt;default value&lt;/em&gt; which will be used if that arguments isn&amp;rsquo;t passed. Default values use the same syntax as &lt;a href=&quot;../variables&quot;&gt;variable declarations&lt;/a&gt;: the variable name, followed by a colon and a &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expression&lt;/a&gt;. This makes it easy to define flexible function APIs that can be used in simple or complex ways.</source>
          <target state="translated">通常、関数が宣言するすべての引数は、その関数が含まれているときに渡される必要があります。ただし、引数が渡されない場合に使用される&lt;em&gt;デフォルト値&lt;/em&gt;を定義することにより、引数をオプションにすることができ&lt;em&gt;ます&lt;/em&gt;。デフォルト値は、&lt;a href=&quot;../variables&quot;&gt;変数宣言&lt;/a&gt;と同じ構文を使用します。変数名の後にコロンと&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript式が&lt;/a&gt;続きます。これにより、単純または複雑な方法で使用できる柔軟な関数APIを簡単に定義できます。</target>
        </trans-unit>
        <trans-unit id="0cdb53eefbdfee3b12bbcd04afce357361a5861c" translate="yes" xml:space="preserve">
          <source>Normally, every argument a mixin declares must be passed when that mixin is included. However, you can make an argument optional by defining a &lt;em&gt;default value&lt;/em&gt; which will be used if that arguments isn&amp;rsquo;t passed. Default values use the same syntax as &lt;a href=&quot;../variables&quot;&gt;variable declarations&lt;/a&gt;: the variable name, followed by a colon and a &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expression&lt;/a&gt;. This makes it easy to define flexible mixin APIs that can be used in simple or complex ways.</source>
          <target state="translated">通常、ミックスインが含まれている場合、ミックスインが宣言するすべての引数を渡す必要があります。ただし、引数が渡されない場合に使用される&lt;em&gt;デフォルト値&lt;/em&gt;を定義することにより、引数をオプションにすることができ&lt;em&gt;ます&lt;/em&gt;。デフォルト値は、&lt;a href=&quot;../variables&quot;&gt;変数宣言&lt;/a&gt;と同じ構文を使用します。変数名の後にコロンと&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript式が&lt;/a&gt;続きます。これにより、単純または複雑な方法で使用できる柔軟なミックスインAPIを簡単に定義できます。</target>
        </trans-unit>
        <trans-unit id="36600b2266d9bc4bf738096ec98ade6b06055762" translate="yes" xml:space="preserve">
          <source>Normally, if an &lt;code&gt;@extend&lt;/code&gt; doesn&amp;rsquo;t match any selectors in the stylesheet, Sass will produce an error. This helps protect from typos or from renaming a selector without renaming the selectors that inherit from it. Extends that require that the extended selector exists are &lt;em&gt;mandatory&lt;/em&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;@extend&lt;/code&gt; がスタイルシートのどのセレクターとも一致しない場合、Sassはエラーを生成します。これにより、タイプミスや、セレクターを継承するセレクターの名前を変更せずに、セレクターの名前を変更することから保護できます。拡張セレクターが存在する必要がある拡張は&lt;em&gt;必須&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="8d5e7d2febd1afc13a90b92a80b1aeafd1143806" translate="yes" xml:space="preserve">
          <source>Not all identifiers are parsed as unquoted strings:</source>
          <target state="translated">すべての識別子が引用符なしの文字列として解析されるわけではありません。</target>
        </trans-unit>
        <trans-unit id="8a8ffe4eac13c64877326301c06fafbcccc8ae5e" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;$selector&lt;/code&gt;&lt;strong&gt;must be&lt;/strong&gt; a &lt;a href=&quot;http://dev.w3.org/csswg/selectors4/#compound&quot;&gt;compound selector&lt;/a&gt;. That means it cannot contain commas or spaces. It also means that unlike other selector functions, this takes only strings, not lists.</source>
          <target state="translated">ことを注意 &lt;code&gt;$selector&lt;/code&gt; &lt;strong&gt;でなければならない&lt;/strong&gt;&lt;a href=&quot;http://dev.w3.org/csswg/selectors4/#compound&quot;&gt;化合物セレクタ&lt;/a&gt;。つまり、コンマやスペースを含めることはできません。また、他のセレクター関数とは異なり、これはリストではなく文字列のみを取ることを意味します。</target>
        </trans-unit>
        <trans-unit id="080f6eb3b348145b6c90e2a7243299a34e1dd466" translate="yes" xml:space="preserve">
          <source>Note that because Sass maps are &lt;a href=&quot;#immutability&quot;&gt;immutable&lt;/a&gt;, &lt;code&gt;map.set()&lt;/code&gt; and &lt;code&gt;map.merge()&lt;/code&gt; do not modify the original list.</source>
          <target state="translated">Sassマップは&lt;a href=&quot;#immutability&quot;&gt;不変&lt;/a&gt;であるため、 &lt;code&gt;map.set()&lt;/code&gt; と &lt;code&gt;map.merge()&lt;/code&gt; は元のリストを変更しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="693df4e52e4ff8d7b0244ad166c78c841dadae76" translate="yes" xml:space="preserve">
          <source>Note that colors with an alpha channel (those created with the &lt;a href=&quot;sass/script/functions#rgba-instance_method&quot;&gt;rgba&lt;/a&gt; or &lt;a href=&quot;sass/script/functions#hsla-instance_method&quot;&gt;hsla&lt;/a&gt; functions) must have the same alpha value in order for color arithmetic to be done with them. The arithmetic doesn't affect the alpha value. For example:</source>
          <target state="translated">アルファチャンネル（で作成されたものと色ことに留意されたい&lt;a href=&quot;sass/script/functions#rgba-instance_method&quot;&gt;RGBA&lt;/a&gt;または&lt;a href=&quot;sass/script/functions#hsla-instance_method&quot;&gt;HSLA&lt;/a&gt;関数）算術色ために同一のアルファ値を持つ必要があり、それらを用いて行われます。算術はアルファ値に影響を与えません。例えば：</target>
        </trans-unit>
        <trans-unit id="ac74dad262169f45fae2cdcb5fd6e40b4714ec50" translate="yes" xml:space="preserve">
          <source>Note that for these implementations, the &lt;code&gt;$alpha&lt;/code&gt; argument is &lt;em&gt;required&lt;/em&gt; if the function name &lt;code&gt;hsla()&lt;/code&gt; is used, and &lt;em&gt;forbidden&lt;/em&gt; if the function name &lt;code&gt;hsl()&lt;/code&gt; is used.</source>
          <target state="translated">これらの実装のために、という注意 &lt;code&gt;$alpha&lt;/code&gt; 引数がされて&lt;em&gt;必要な&lt;/em&gt;場合は、関数名の &lt;code&gt;hsla()&lt;/code&gt; 使用され、&lt;em&gt;禁じられた&lt;/em&gt;関数名の場合 &lt;code&gt;hsl()&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="0a444c8d85a7c0b8c797f36d3a2b3e89f3c45b43" translate="yes" xml:space="preserve">
          <source>Note that for these implementations, the &lt;code&gt;$alpha&lt;/code&gt; argument is &lt;em&gt;required&lt;/em&gt; if the function name &lt;code&gt;rgba()&lt;/code&gt; is used, and &lt;em&gt;forbidden&lt;/em&gt; if the function name &lt;code&gt;rgb()&lt;/code&gt; is used.</source>
          <target state="translated">これらの実装では、関数名 &lt;code&gt;rgba()&lt;/code&gt; が使用されている場合は &lt;code&gt;$alpha&lt;/code&gt; 引数が&lt;em&gt;必要&lt;/em&gt;であり、関数名 &lt;code&gt;rgb()&lt;/code&gt; が使用されて&lt;em&gt;いる&lt;/em&gt;場合は&lt;em&gt;禁止&lt;/em&gt;されていることに注意してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0de89687514028e280bf5b669d5f5d71ff81cee1" translate="yes" xml:space="preserve">
          <source>Note that if a quoted string is added to an unquoted string (that is, the quoted string is to the left of the &lt;code&gt;+&lt;/code&gt;), the result is a quoted string. Likewise, if an unquoted string is added to a quoted string (the unquoted string is to the left of the &lt;code&gt;+&lt;/code&gt;), the result is an unquoted string. For example:</source>
          <target state="translated">引用符付き文字列が引用符なし文字列に追加された場合（つまり、引用符付き文字列が &lt;code&gt;+&lt;/code&gt; の左側にある場合）、結果は引用符付き文字列になります。同様に、引用符で囲まれていない文字列が引用符で囲まれた文字列に追加された場合（引用符で囲まれていない文字列は &lt;code&gt;+&lt;/code&gt; の左側にあります）、結果は引用符で囲まれていない文字列になります。例えば：</target>
        </trans-unit>
        <trans-unit id="4a7263acabd39aa1aeb77388ab202b8bd00638a1" translate="yes" xml:space="preserve">
          <source>Note that map keys can be any Sass data type (even another map) and the syntax for declaring a map allows arbitrary SassScript expressions that will be evaluated to determine the key.</source>
          <target state="translated">マップキーは任意のSassデータ型(別のマップであっても)にすることができ、マップを宣言するための構文では、キーを決定するために評価される任意のSassScript式が可能であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="cbe4b8b6895d926247872a4e26c38d5715d96998" translate="yes" xml:space="preserve">
          <source>Note that this command does &lt;em&gt;not&lt;/em&gt; generate CSS files. For that, use the &lt;code&gt;sass&lt;/code&gt; command described elsewhere.</source>
          <target state="translated">このコマンドはCSSファイルを生成し&lt;em&gt;ない&lt;/em&gt;ことに注意してください。そのためには、他の場所で説明されている &lt;code&gt;sass&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="6f4a910276bcd8ea1488e67ca3bd4f98c83aad73" translate="yes" xml:space="preserve">
          <source>Note that this is different than CSS, which specifies how to recover from most errors rather than failing immediately. This is one of the few cases where SCSS isn&amp;rsquo;t &lt;em&gt;strictly&lt;/em&gt; a superset of CSS. However, it&amp;rsquo;s much more useful to Sass users to see errors immediately, rather than having them passed through to the CSS output.</source>
          <target state="translated">これは、すぐに失敗するのではなく、ほとんどのエラーから回復する方法を指定するCSSとは異なることに注意してください。これは、SCSSが&lt;em&gt;厳密&lt;/em&gt;にCSSのスーパーセットではない数少ないケースの1つです。ただし、Sassユーザーにとっては、エラーをCSS出力に渡すよりも、すぐにエラーを確認する方がはるかに便利です。</target>
        </trans-unit>
        <trans-unit id="798ca29359409d2bb8b40c00921c5354ce6bb1c2" translate="yes" xml:space="preserve">
          <source>Note that unlike &lt;a href=&quot;#join&quot;&gt;&lt;code&gt;list.join()&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;$val&lt;/code&gt; is a list it&amp;rsquo;s nested within the returned list rather than having all its elements added to the returned list.</source>
          <target state="translated">&lt;a href=&quot;#join&quot;&gt; &lt;code&gt;list.join()&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;$val&lt;/code&gt; がリストの場合、返されるリストにすべての要素が追加されるのではなく、返されるリスト内にネストされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="183963367a5b456c3047b44221867d6cef4d1e24" translate="yes" xml:space="preserve">
          <source>Note that unlike some languages, the first character in a Sass string is number 1, the second number 2, and so forth.</source>
          <target state="translated">いくつかの言語とは異なり、Sass の文字列の最初の文字は 1 番目、2 番目は 2 番目、というように番号が付けられていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="68ca367d5eae7afa2e54d9286cb52633f444a09d" translate="yes" xml:space="preserve">
          <source>Note that unlike some languages, the first item in a Sass list is number 1, the second number 2, and so forth.</source>
          <target state="translated">いくつかの言語とは異なり、Sass のリストの最初の項目は 1 番目、2 番目は 2 番目などであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e7d5e88030367084f32b1e63e394a792c554cdc8" translate="yes" xml:space="preserve">
          <source>Note that you may not include a partial and a non-partial with the same name in the same directory. For example, &lt;code&gt;_colors.scss&lt;/code&gt; may not exist alongside &lt;code&gt;colors.scss&lt;/code&gt;.</source>
          <target state="translated">同じディレクトリに同じ名前の部分的部分と非部分的部分を含めることはできません。例えば、 &lt;code&gt;_colors.scss&lt;/code&gt; は一緒に存在しない可能性があり &lt;code&gt;colors.scss&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8e5b80cd153ea290fe80ec507174a87bc55c594" translate="yes" xml:space="preserve">
          <source>Now everything with class &lt;code&gt;.seriousError&lt;/code&gt; also has class &lt;code&gt;.error&lt;/code&gt;, and everything with class &lt;code&gt;.criticalError&lt;/code&gt; has class &lt;code&gt;.seriousError&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; class &lt;code&gt;.error&lt;/code&gt;. It's compiled to:</source>
          <target state="translated">現在、クラス &lt;code&gt;.seriousError&lt;/code&gt; を持つものはすべてクラス &lt;code&gt;.error&lt;/code&gt; を持ち、クラス &lt;code&gt;.criticalError&lt;/code&gt; を持つものはすべてクラス &lt;code&gt;.seriousError&lt;/code&gt; &lt;em&gt;と&lt;/em&gt;クラス &lt;code&gt;.error&lt;/code&gt; を持っています。次のようにコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="ab0e1a3421b3343f3824ef813b9855587c7d9d08" translate="yes" xml:space="preserve">
          <source>Null values are treated as empty strings for string interpolation:</source>
          <target state="translated">ヌル値は、文字列補間のために空の文字列として扱われます。</target>
        </trans-unit>
        <trans-unit id="e399d7ce3aaf6001026fc3298df535b4d6c80f77" translate="yes" xml:space="preserve">
          <source>Number Operations</source>
          <target state="translated">数の演算</target>
        </trans-unit>
        <trans-unit id="c0c3b5ef095430d85fb2cd85d4948d220c3f5146" translate="yes" xml:space="preserve">
          <source>Number operations</source>
          <target state="translated">数の演算</target>
        </trans-unit>
        <trans-unit id="7e53821f70ae16079c4a6a64c52a91fae645bc5f" translate="yes" xml:space="preserve">
          <source>Numbers</source>
          <target state="translated">Numbers</target>
        </trans-unit>
        <trans-unit id="c663fdca24c7159c6bd1b244fb7e89d6041729f0" translate="yes" xml:space="preserve">
          <source>Numbers are rounded to 10 digits of precision &lt;em&gt;lazily&lt;/em&gt; when they&amp;rsquo;re used in a place where precision is relevant. This means that math functions will work with the full number value internally to avoid accumulating extra rounding errors.</source>
          <target state="translated">数値は精度の10桁に丸められ&lt;em&gt;なまけ&lt;/em&gt;彼らは精度が関連している場所で使用しています。これは、数学関数が内部で完全な数値を処理して、余分な丸め誤差の蓄積を回避することを意味します。</target>
        </trans-unit>
        <trans-unit id="7add39ef0137375d64b6e0da1f8af3370308cddd" translate="yes" xml:space="preserve">
          <source>Numbers can&amp;rsquo;t be used as the left-hand value, because they have &lt;a href=&quot;numeric&quot;&gt;their own operators&lt;/a&gt;.</source>
          <target state="translated">数値には&lt;a href=&quot;numeric&quot;&gt;独自の演算子&lt;/a&gt;があるため、左側の値として使用することはできません。</target>
        </trans-unit>
        <trans-unit id="4458336f995ee954ae912a60445e848b6d7e2ba1" translate="yes" xml:space="preserve">
          <source>Numbers in Sass have two components: the number itself, and its units. For example, in &lt;code&gt;16px&lt;/code&gt; the number is &lt;code&gt;16&lt;/code&gt; and the unit is &lt;code&gt;px&lt;/code&gt;. Numbers can have no units, and they can have complex units. See &lt;a href=&quot;#units&quot;&gt;Units&lt;/a&gt; below for more details.</source>
          <target state="translated">Sassの数値には、数値自体とその単位の2つの要素があります。たとえば、 &lt;code&gt;16px&lt;/code&gt; では、数値は &lt;code&gt;16&lt;/code&gt; で、単位は &lt;code&gt;px&lt;/code&gt; です。数値には単位を含めることはできず、複雑な単位を含めることもできます。詳細については、以下の&lt;a href=&quot;#units&quot;&gt;単位を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0d864be7003009ab9323673cc5aa11aa6064e96d" translate="yes" xml:space="preserve">
          <source>Numbers with incompatible units can&amp;rsquo;t be compared.</source>
          <target state="translated">互換性のない単位を持つ番号は比較できません。</target>
        </trans-unit>
        <trans-unit id="c56a326279c48d05e1b61788ac9e9d3dedacabac" translate="yes" xml:space="preserve">
          <source>Numbers with incompatible units can&amp;rsquo;t be used with addition, subtraction, or modulo.</source>
          <target state="translated">互換性のない単位を持つ数値は、加算、減算、またはモジュロで使用できません。</target>
        </trans-unit>
        <trans-unit id="2d95b983f6c9e56b561073c45b8366ac693fc7cf" translate="yes" xml:space="preserve">
          <source>Numeric Operators</source>
          <target state="translated">数値演算子</target>
        </trans-unit>
        <trans-unit id="b54293c92bcdf1550000796fb4b3f602c64581d8" translate="yes" xml:space="preserve">
          <source>Of course, selectors aren&amp;rsquo;t just used on their own in style rules. Sass knows to extend &lt;em&gt;everywhere&lt;/em&gt; the selector is used. This ensures that your elements are styled exactly as if they matched the extended selector.</source>
          <target state="translated">もちろん、セレクターはスタイルルールで単独で使用されるだけではありません。Sassは、セレクターが使用される&lt;em&gt;すべての場所&lt;/em&gt;に拡張することを知っています。これにより、要素が拡張セレクターと一致するかのように正確にスタイル設定されます。</target>
        </trans-unit>
        <trans-unit id="9d8672fb5aad66a7b49f343531639b5bd3fc9fb1" translate="yes" xml:space="preserve">
          <source>Often it's more useful to use &lt;a href=&quot;sass/script/functions&quot;&gt;color functions&lt;/a&gt; than to try to use color arithmetic to achieve the same effect.</source>
          <target state="translated">多くの場合、カラー演算を使用して同じ効果を達成するよりも、&lt;a href=&quot;sass/script/functions&quot;&gt;カラー関数&lt;/a&gt;を使用する方が便利です。</target>
        </trans-unit>
        <trans-unit id="40deaf425eb79f678e7bbcc711dbc6c75a76f1bc" translate="yes" xml:space="preserve">
          <source>Older Sass versions allowed &lt;code&gt;!global&lt;/code&gt; to be used for a variable that doesn&amp;rsquo;t exist yet. This behavior was deprecated to make sure each stylesheet declares the same variables no matter how it&amp;rsquo;s executed.</source>
          <target state="translated">古いバージョンのSassでは、まだ存在しない変数に &lt;code&gt;!global&lt;/code&gt; を使用できました。この動作は、各スタイルシートがどのように実行されても同じ変数を宣言するようにするために非推奨になりました。</target>
        </trans-unit>
        <trans-unit id="2d649544f98508586062c569381e1cc2845d8025" translate="yes" xml:space="preserve">
          <source>Older implementations of LibSass and Ruby Sass didn&amp;rsquo;t support lists with square brackets.</source>
          <target state="translated">LibSassとRubySassの古い実装は、角括弧付きのリストをサポートしていませんでした。</target>
        </trans-unit>
        <trans-unit id="7e37838a29deb996fb1aefeb35e62fe2dfe97a80" translate="yes" xml:space="preserve">
          <source>Older versions of LibSass and Ruby Sass parsed custom property declarations just like any other property declaration, allowing the full range of SassScript expressions as values. Even when using these versions, it&amp;rsquo;s recommended that you use interpolation to inject SassScript values for forwards-compatibility.</source>
          <target state="translated">古いバージョンのLibSassとRubySassは、他のプロパティ宣言と同じようにカスタムプロパティ宣言を解析し、S​​assScript式の全範囲を値として使用できるようにしました。これらのバージョンを使用する場合でも、上位互換性のために補間を使用してSassScript値を挿入することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b50d95bcb356944982379a6144f75e2538ea60b4" translate="yes" xml:space="preserve">
          <source>On its own, &lt;code&gt;@at-root&lt;/code&gt; only gets rid of &lt;a href=&quot;../style-rules&quot;&gt;style rules&lt;/a&gt;. Any at-rules like &lt;a href=&quot;css#media&quot;&gt;&lt;code&gt;@media&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;css#supports&quot;&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/a&gt; will be left in. If this isn&amp;rsquo;t what you want, though, you can control exactly what it includes or includes using syntax like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Targeting_media_features&quot;&gt;media query features&lt;/a&gt;, written &lt;code&gt;@at-root (with: &amp;lt;rules...&amp;gt;) { ... }&lt;/code&gt; or &lt;code&gt;@at-root (without: &amp;lt;rules...&amp;gt;) { ... }&lt;/code&gt;. The &lt;code&gt;(without: ...)&lt;/code&gt; query tells Sass which rules should be excluded; the &lt;code&gt;(with: ...)&lt;/code&gt; query excludes all rules &lt;em&gt;except&lt;/em&gt; those that are listed.</source>
          <target state="translated">&lt;code&gt;@at-root&lt;/code&gt; 、それ自体で&lt;a href=&quot;../style-rules&quot;&gt;スタイルルール&lt;/a&gt;のみを削除します。&lt;a href=&quot;css#media&quot;&gt; &lt;code&gt;@media&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;css#supports&quot;&gt; &lt;code&gt;@supports&lt;/code&gt; &lt;/a&gt;などのat-rulesはそのまま残されます。ただし、これが必要ない場合&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Targeting_media_features&quot;&gt;は&lt;/a&gt;、 &lt;code&gt;@at-root (with: &amp;lt;rules...&amp;gt;) { ... }&lt;/code&gt; または &lt;code&gt;@at-root (without: &amp;lt;rules...&amp;gt;) { ... }&lt;/code&gt; 。 &lt;code&gt;(without: ...)&lt;/code&gt; クエリはルールが除外されるべきサスを伝えます。 &lt;code&gt;(with: ...)&lt;/code&gt; クエリ除外すべてのルール&lt;em&gt;を除いて&lt;/em&gt;記載されていたもの。</target>
        </trans-unit>
        <trans-unit id="c1bb7de4e712a1102afa787f557e76b7b4a19cb6" translate="yes" xml:space="preserve">
          <source>On their own, lists don't do much, but the &lt;a href=&quot;sass/script/functions#list-functions&quot;&gt;SassScript list functions&lt;/a&gt; make them useful. The &lt;a href=&quot;sass/script/functions#nth-instance_method&quot;&gt;&lt;code&gt;nth&lt;/code&gt; function&lt;/a&gt; can access items in a list, the &lt;a href=&quot;sass/script/functions#join-instance_method&quot;&gt;&lt;code&gt;join&lt;/code&gt; function&lt;/a&gt; can join multiple lists together, and the &lt;a href=&quot;sass/script/functions#append-instance_method&quot;&gt;&lt;code&gt;append&lt;/code&gt; function&lt;/a&gt; can add items to lists. The &lt;a href=&quot;#each-directive&quot;&gt;&lt;code&gt;@each&lt;/code&gt; directive&lt;/a&gt; can also add styles for each item in a list.</source>
          <target state="translated">リスト自体はそれほど&lt;a href=&quot;sass/script/functions#list-functions&quot;&gt;機能&lt;/a&gt;しませんが、SassScriptのリスト関数を使用すると便利です。&lt;a href=&quot;sass/script/functions#nth-instance_method&quot;&gt; &lt;code&gt;nth&lt;/code&gt; 関数は&lt;/a&gt;、リスト内のアイテムにアクセスすることができます&lt;a href=&quot;sass/script/functions#join-instance_method&quot;&gt; &lt;code&gt;join&lt;/code&gt; 機能が&lt;/a&gt;一緒に複数のリストを結合することができ、かつ&lt;a href=&quot;sass/script/functions#append-instance_method&quot;&gt; &lt;code&gt;append&lt;/code&gt; 機能が&lt;/a&gt;リストに項目を追加することができます。&lt;a href=&quot;#each-directive&quot;&gt; &lt;code&gt;@each&lt;/code&gt; のディレクティブは&lt;/a&gt;、リストの各項目のスタイルを追加することができます。</target>
        </trans-unit>
        <trans-unit id="70b57e7b3d16bab3bdd24991cb5e543ffb1d4d18" translate="yes" xml:space="preserve">
          <source>On their own, without any use of &lt;code&gt;@extend&lt;/code&gt;, rulesets that use placeholder selectors will not be rendered to CSS.</source>
          <target state="translated">&lt;code&gt;@extend&lt;/code&gt; を使用しない場合、それ自体では、プレースホルダーセレクターを使用するルールセットはCSSにレンダリングされません。</target>
        </trans-unit>
        <trans-unit id="7f5c31ad520a711b13920ae472c88c9a76daa966" translate="yes" xml:space="preserve">
          <source>One-to-One Mode</source>
          <target state="translated">ワン・ツー・ワンモード</target>
        </trans-unit>
        <trans-unit id="24571e3b4baecae7440bbeb4a2255d252ac930d0" translate="yes" xml:space="preserve">
          <source>One-to-one mode compiles a single input file (&lt;code&gt;input.scss&lt;/code&gt;) to a single output location (&lt;code&gt;output.css&lt;/code&gt;). If no output location is passed, the compiled CSS is printed to the terminal.</source>
          <target state="translated">1対1モードでは、単一の入力ファイル（ &lt;code&gt;input.scss&lt;/code&gt; ）を単一の出力場所（ &lt;code&gt;output.css&lt;/code&gt; ）にコンパイルします。出力場所が渡されない場合、コンパイルされたCSSが端末に出力されます。</target>
        </trans-unit>
        <trans-unit id="edb159cbb61b421bbd771c449269f563dafce1a0" translate="yes" xml:space="preserve">
          <source>One-to-one mode compiles a single input file (&lt;code&gt;input.scss&lt;/code&gt;) to a single output location (&lt;code&gt;output.css&lt;/code&gt;). If no output location is passed, the compiled CSS is printed to the terminal. If no input &lt;em&gt;or&lt;/em&gt; output is passed, the CSS is read from &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt; and printed to the terminal.</source>
          <target state="translated">1対1モードでは、単一の入力ファイル（ &lt;code&gt;input.scss&lt;/code&gt; ）を単一の出力場所（ &lt;code&gt;output.css&lt;/code&gt; ）にコンパイルします。出力場所が渡されない場合、コンパイルされたCSSが端末に出力されます。入力&lt;em&gt;または&lt;/em&gt;出力が渡されない場合、CSSは&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;標準入力&lt;/a&gt;から読み取られ、端末に出力されます。</target>
        </trans-unit>
        <trans-unit id="cf10f4fc5f8c1b96d8d45a350d364f2fb15e1585" translate="yes" xml:space="preserve">
          <source>Only &lt;em&gt;simple selectors&lt;/em&gt;&amp;mdash;individual selectors like &lt;code&gt;.info&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt;&amp;mdash;can be extended. If &lt;code&gt;.message.info&lt;/code&gt; could be extended, the definition of &lt;code&gt;@extend&lt;/code&gt; says that elements matching the extender would be styled as though they matched &lt;code&gt;.message.info&lt;/code&gt;. That&amp;rsquo;s just the same as matching both &lt;code&gt;.message&lt;/code&gt; and &lt;code&gt;.info&lt;/code&gt;, so there wouldn&amp;rsquo;t be any benefit in writing that instead of &lt;code&gt;@extend .message, .info&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;単純なセレクター（&lt;/em&gt; &lt;code&gt;.info&lt;/code&gt; や &lt;code&gt;a&lt;/code&gt; などの個別のセレクター）のみを拡張できます。 &lt;code&gt;.message.info&lt;/code&gt; を拡張できる場合、@ extendsの定義は、エクステンダーに一致する要素が &lt;code&gt;@extend&lt;/code&gt; 一致するかのようにスタイル設定されることを &lt;code&gt;.message.info&lt;/code&gt; ます。これは、 &lt;code&gt;.message&lt;/code&gt; と &lt;code&gt;.info&lt;/code&gt; の両方を照合することとまったく同じであるため、 &lt;code&gt;@extend .message, .info&lt;/code&gt; 代わりにそれを記述してもメリットはありません。</target>
        </trans-unit>
        <trans-unit id="2a082a950bb023fe1441646f549c479c4653830f" translate="yes" xml:space="preserve">
          <source>Only Dart Sass currently supports &lt;code&gt;@use&lt;/code&gt;. Users of other implementations must use the &lt;a href=&quot;at-rules/import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; instead.</source>
          <target state="translated">現在、 &lt;code&gt;@use&lt;/code&gt; のみが@useをサポートしています。他の実装のユーザーは、代わりに&lt;a href=&quot;at-rules/import&quot;&gt; &lt;code&gt;@import&lt;/code&gt; ルールを&lt;/a&gt;使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2a6ca7c41d0c8d1f014f27078da3ddbc2740ad16" translate="yes" xml:space="preserve">
          <source>Only Dart Sass currently supports &lt;code&gt;@use&lt;/code&gt;. Users of other implementations must use the &lt;a href=&quot;import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; instead.</source>
          <target state="translated">現在、 &lt;code&gt;@use&lt;/code&gt; のみが@useをサポートしています。他の実装のユーザーは、代わりに&lt;a href=&quot;import&quot;&gt; &lt;code&gt;@import&lt;/code&gt; ルールを&lt;/a&gt;使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="910233028133b5559bedec3464f28101d7700c64" translate="yes" xml:space="preserve">
          <source>Only Dart Sass currently supports loading built-in modules with &lt;code&gt;@use&lt;/code&gt;. Users of other implementations must call functions using their global names instead.</source>
          <target state="translated">現在、 &lt;code&gt;@use&lt;/code&gt; した組み込みモジュールのロードをサポートしているのはDartSassのみです。他の実装のユーザーは、代わりにグローバル名を使用して関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="ea513e19214391d7fd937c9ac0305b2259c66810" translate="yes" xml:space="preserve">
          <source>Only Dart Sass currently supports this function.</source>
          <target state="translated">現在対応しているのはDart Sassのみです。</target>
        </trans-unit>
        <trans-unit id="90eec0f0afd2a96532c59e2797cf4fc9dbbaecaa" translate="yes" xml:space="preserve">
          <source>Only Dart Sass currently supports this mixin.</source>
          <target state="translated">現在、Dart Sassのみがこのミキサーをサポートしています。</target>
        </trans-unit>
        <trans-unit id="a970adf23a6034dda28b3b855d26e02bf91c5d5a" translate="yes" xml:space="preserve">
          <source>Only Dart Sass supports calling &lt;code&gt;map.get()&lt;/code&gt; with more than two arguments.</source>
          <target state="translated">Dart Sassのみが、3つ以上の引数を使用した &lt;code&gt;map.get()&lt;/code&gt; の呼び出しをサポートしています。</target>
        </trans-unit>
        <trans-unit id="71d07d036bdc525bdaaeee2d72cecd917c927d73" translate="yes" xml:space="preserve">
          <source>Only Dart Sass supports calling &lt;code&gt;map.has-key()&lt;/code&gt; with more than two arguments.</source>
          <target state="translated">Dart Sassのみが、3つ以上の引数を使用した &lt;code&gt;map.has-key()&lt;/code&gt; の呼び出しをサポートしています。</target>
        </trans-unit>
        <trans-unit id="2e8fe6ecdb955bb280deb608924c91a08f3dbc21" translate="yes" xml:space="preserve">
          <source>Only Dart Sass supports calling &lt;code&gt;map.merge()&lt;/code&gt; with more than two arguments.</source>
          <target state="translated">Dart Sassのみが、3つ以上の引数を使用した &lt;code&gt;map.merge()&lt;/code&gt; の呼び出しをサポートしています。</target>
        </trans-unit>
        <trans-unit id="702b3281eb7a66baba422cd8e40b47d38304ec7a" translate="yes" xml:space="preserve">
          <source>Only Dart Sass supports calling &lt;code&gt;map.set()&lt;/code&gt; with more than three arguments.</source>
          <target state="translated">Dart Sassのみが、3つ以上の引数を使用した &lt;code&gt;map.set()&lt;/code&gt; の呼び出しをサポートしています。</target>
        </trans-unit>
        <trans-unit id="27eecb4694b35a30f383992bf0ccc2c715666339" translate="yes" xml:space="preserve">
          <source>Only the first ten digits of a number after the decimal point will be included in the generated CSS.</source>
          <target state="translated">小数点以下の数字の最初の10桁だけが、生成されたCSSに含まれます。</target>
        </trans-unit>
        <trans-unit id="a1fdaa6b2a846c8fcf18d414bf8c61db610eda6a" translate="yes" xml:space="preserve">
          <source>Operations</source>
          <target state="translated">Operations</target>
        </trans-unit>
        <trans-unit id="ee8ffe5145f760b95344b6c4011186301159b8f2" translate="yes" xml:space="preserve">
          <source>Operations like &lt;a href=&quot;../operators/equality&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../operators/relational&quot;&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/a&gt; will consider two numbers equivalent if they&amp;rsquo;re the same up to the tenth digit after the decimal point.</source>
          <target state="translated">&lt;a href=&quot;../operators/equality&quot;&gt; &lt;code&gt;==&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../operators/relational&quot;&gt; &lt;code&gt;&amp;gt;=&lt;/code&gt; の&lt;/a&gt;ような演算では、小数点以下10桁まで同じである場合、2つの数値は同等であると見なされます。</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="d691ad463ac25297b3313f781ce7492928f99d06" translate="yes" xml:space="preserve">
          <source>Optional Arguments</source>
          <target state="translated">オプションの引数</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="9d722ae6ba6a2a258f254b324106a2e548339c2b" translate="yes" xml:space="preserve">
          <source>Options can be set by setting the &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Plugin/Configuration.html#options-instance_method&quot;&gt;Sass::Plugin#options&lt;/a&gt; hash in &lt;code&gt;environment.rb&lt;/code&gt; in Rails or &lt;code&gt;config.ru&lt;/code&gt; in Rack...</source>
          <target state="translated">オプションを設定するには、&lt;a href=&quot;http://sass-lang.com/documentation/Sass/Plugin/Configuration.html#options-instance_method&quot;&gt;Sass :: Plugin＃options&lt;/a&gt;ハッシュをRailsの &lt;code&gt;environment.rb&lt;/code&gt; に設定するか、Rackの &lt;code&gt;config.ru&lt;/code&gt; を設定します...</target>
        </trans-unit>
        <trans-unit id="6f526dde77cafc7928204d8dac6318bed6f35f64" translate="yes" xml:space="preserve">
          <source>Or it can be used with a block containing multiple selectors:</source>
          <target state="translated">または、複数のセレクタを含むブロックで使用することができます。</target>
        </trans-unit>
        <trans-unit id="991e00c3f59f6acfcfc8e5941ba49ff4fa5a9c11" translate="yes" xml:space="preserve">
          <source>Or the &lt;a href=&quot;https://pub.dartlang.org/documentation/sass/latest/sass/sass-library.html&quot;&gt;Dart API documentation&lt;/a&gt; if you&amp;rsquo;re calling it from Dart.</source>
          <target state="translated">または、&lt;a href=&quot;https://pub.dartlang.org/documentation/sass/latest/sass/sass-library.html&quot;&gt;Dart&lt;/a&gt;から呼び出す場合は、DartAPIドキュメント。</target>
        </trans-unit>
        <trans-unit id="9f1762b33b20d79d93b528934ab2323b45f0b56c" translate="yes" xml:space="preserve">
          <source>Order of Operations</source>
          <target state="translated">業務の順序</target>
        </trans-unit>
        <trans-unit id="aac9354f153ca67ac7552c458c3f44c1c1e84690" translate="yes" xml:space="preserve">
          <source>Other Expressions</source>
          <target state="translated">その他の表現</target>
        </trans-unit>
        <trans-unit id="551852c7028ddd04d28686d5a46f202fe2ad7cb7" translate="yes" xml:space="preserve">
          <source>Other Functions</source>
          <target state="translated">その他の機能</target>
        </trans-unit>
        <trans-unit id="9cb6f2fb01dfa81e12bc1e11f0e7b676e54669fd" translate="yes" xml:space="preserve">
          <source>Other Options</source>
          <target state="translated">その他のオプション</target>
        </trans-unit>
        <trans-unit id="202290c40aa058f54ae62f34c03332e3c0bc905d" translate="yes" xml:space="preserve">
          <source>Other Statements</source>
          <target state="translated">その他の記載事項</target>
        </trans-unit>
        <trans-unit id="d4f2619ee691b00d4f190fa8da9ca100f4cc10ea" translate="yes" xml:space="preserve">
          <source>Other rules that use &lt;code&gt;.error&lt;/code&gt; will work for &lt;code&gt;.seriousError&lt;/code&gt; as well. For example, if we have special styles for errors caused by hackers:</source>
          <target state="translated">&lt;code&gt;.error&lt;/code&gt; を使用する他のルールは、 &lt;code&gt;.seriousError&lt;/code&gt; でも機能します。たとえば、ハッカーによるエラーの特別なスタイルがある場合：</target>
        </trans-unit>
        <trans-unit id="40613b5d36cb20b7a8b3a1d9a6d819b039917ec9" translate="yes" xml:space="preserve">
          <source>Otherwise, UTF-8 is used.</source>
          <target state="translated">それ以外の場合はUTF-8を使用します。</target>
        </trans-unit>
        <trans-unit id="8452d751fd66064e8d7e9ffc8192f29e849a7c39" translate="yes" xml:space="preserve">
          <source>Otherwise, the lowercase Unicode escape is included with a trailing space. For example, &lt;code&gt;\7Fx&lt;/code&gt; returns the unquoted string &lt;code&gt;\7f x&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合は、小文字のUnicodeエスケープが末尾のスペースに含まれます。たとえば、 &lt;code&gt;\7Fx&lt;/code&gt; 引用符で囲まれていない文字列を返します &lt;code&gt;\7f x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d66c03870df0ff9473afa65ef1992159ba004acc" translate="yes" xml:space="preserve">
          <source>Otherwise, use the table of contents for the language reference!</source>
          <target state="translated">それ以外の場合は、言語参照のために目次を使用してください</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="3aef76f8ba6fd4806d49ff4edaf1a4218d4bfc97" translate="yes" xml:space="preserve">
          <source>Output Style</source>
          <target state="translated">出力スタイル</target>
        </trans-unit>
        <trans-unit id="a2aaba6b325189ed96937a41610eb44a978a20f8" translate="yes" xml:space="preserve">
          <source>Output Styles</source>
          <target state="translated">出力スタイル</target>
        </trans-unit>
        <trans-unit id="2df118b905265e6c5d11e3b228c057a3b6eccb04" translate="yes" xml:space="preserve">
          <source>Overloads:</source>
          <target state="translated">Overloads:</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="2802c22f4a72970e1d5045219159766660c1f721" translate="yes" xml:space="preserve">
          <source>Page Sections</source>
          <target state="translated">ページセクション</target>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="e5755d5078efbd7029e3f77b63cab946bb4a078c" translate="yes" xml:space="preserve">
          <source>Parent Selector</source>
          <target state="translated">親セレクタ</target>
        </trans-unit>
        <trans-unit id="f9627107a88876f4aaf6d7e0b0c19984c3a631ae" translate="yes" xml:space="preserve">
          <source>Parentheses</source>
          <target state="translated">Parentheses</target>
        </trans-unit>
        <trans-unit id="5a5d3ecaebab08de9a057833d6989aba76a6656a" translate="yes" xml:space="preserve">
          <source>Parentheses can be used to affect the order of operations:</source>
          <target state="translated">括弧は、操作の順序に影響を与えるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="f107d199b440ddc83cfe6fc9c01e968a85b4fc6e" translate="yes" xml:space="preserve">
          <source>Parse Errors</source>
          <target state="translated">構文解析エラー</target>
        </trans-unit>
        <trans-unit id="475223ba441a6a2cbde2eba855bcbcf7b222ffeb" translate="yes" xml:space="preserve">
          <source>Parses a user-provided selector into a list of lists of strings as returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">で返される文字列のリストのリストにユーザー提供のセレクタを解析 &lt;code&gt;&amp;amp;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="937e56ec95ac76ea5d4634fb284a0618006151c7" translate="yes" xml:space="preserve">
          <source>Parsing a Stylesheet</source>
          <target state="translated">スタイルシートのパース</target>
        </trans-unit>
        <trans-unit id="e1aae818953eb8ca4053c4ff30bde9bc13d7517f" translate="yes" xml:space="preserve">
          <source>Partials</source>
          <target state="translated">Partials</target>
        </trans-unit>
        <trans-unit id="382fe0b44eb7a4d065589fd8df9dba7c7e579df1" translate="yes" xml:space="preserve">
          <source>Partials #partials</source>
          <target state="translated">パルティール #パルティール</target>
        </trans-unit>
        <trans-unit id="1cf4a0797da5ae4515cb354c7e3d2506d5c0da4d" translate="yes" xml:space="preserve">
          <source>Passing Arbitrary Arguments</source>
          <target state="translated">任意の引数を渡す</target>
        </trans-unit>
        <trans-unit id="10b517a0c326f7cdb5514a5c17c1c8f9ba90f4ac" translate="yes" xml:space="preserve">
          <source>Passing Arguments to Content Blocks</source>
          <target state="translated">コンテンツブロックへの引数の渡し方</target>
        </trans-unit>
        <trans-unit id="174507f368602cb47eca3dcf6a7c4744ce9c47f3" translate="yes" xml:space="preserve">
          <source>Passing Content Blocks to a Mixin #mixin-content</source>
          <target state="translated">ミキシンにコンテンツブロックを渡す #mixin-content</target>
        </trans-unit>
        <trans-unit id="5e004b68598c82268398e8120c7b803ce3195f47" translate="yes" xml:space="preserve">
          <source>Passing a string to &lt;code&gt;call()&lt;/code&gt; still works in all implementations, but it&amp;rsquo;s deprecated and will be disallowed in future versions.</source>
          <target state="translated">文字列を &lt;code&gt;call()&lt;/code&gt; に渡すことは、すべての実装で引き続き機能しますが、非推奨であり、将来のバージョンでは許可されなくなります。</target>
        </trans-unit>
        <trans-unit id="4f12f6ea0eb6ec50433a4ceb50c8f15be1cde0e3" translate="yes" xml:space="preserve">
          <source>Percentages in Sass work just like every other unit. They are &lt;em&gt;not&lt;/em&gt; interchangeable with decimals, because in CSS decimals and percentages mean different things. For example, &lt;code&gt;50%&lt;/code&gt; is a number with &lt;code&gt;%&lt;/code&gt; as its unit, and Sass considers it different than the number &lt;code&gt;0.5&lt;/code&gt;.</source>
          <target state="translated">Sassのパーセンテージは、他のすべてのユニットと同じように機能します。CSSでは小数とパーセンテージは異なる意味を持つため、これらは小数と互換性があり&lt;em&gt;ません&lt;/em&gt;。たとえば、 &lt;code&gt;50%&lt;/code&gt; は &lt;code&gt;%&lt;/code&gt; を単位とする数値であり、Sassはそれを数値 &lt;code&gt;0.5&lt;/code&gt; とは異なると見なします。</target>
        </trans-unit>
        <trans-unit id="12caa4cc15915e649a7170042a5b32c438105b72" translate="yes" xml:space="preserve">
          <source>Placeholder Selectors</source>
          <target state="translated">プレースホルダセレクタ</target>
        </trans-unit>
        <trans-unit id="b8dbc970b1740db190bc80080356a5c06b33e85a" translate="yes" xml:space="preserve">
          <source>Placeholder Selectors: &lt;code&gt;%foo&lt;/code&gt;</source>
          <target state="translated">プレースホルダーセレクター： &lt;code&gt;%foo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a1807298fe43d85bf2f7dc3cf4646e2cb1464c0" translate="yes" xml:space="preserve">
          <source>Placeholder selectors are useful when writing a Sass library where each style rule may or may not be used. As a rule of thumb, if you&amp;rsquo;re writing a stylesheet just for your own app, it&amp;rsquo;s often better to just extend a class selector if one is available.</source>
          <target state="translated">プレースホルダーセレクターは、各スタイルルールが使用される場合と使用されない場合があるSassライブラリを作成するときに役立ちます。経験則として、独自のアプリ専用のスタイルシートを作成している場合は、クラスセレクターが利用可能な場合はそれを拡張する方がよい場合がよくあります。</target>
        </trans-unit>
        <trans-unit id="b0f1e4410b7c54d63bca94a5b0237017928759bd" translate="yes" xml:space="preserve">
          <source>Placeholder selectors look like class and id selectors, except the &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; is replaced by &lt;code&gt;%&lt;/code&gt;. They can be used anywhere a class or id could, and on their own they prevent rulesets from being rendered to CSS. For example:</source>
          <target state="translated">プレースホルダーセレクターは、 &lt;code&gt;#&lt;/code&gt; またはを除いて、クラスおよびIDセレクターのように見えます &lt;code&gt;.&lt;/code&gt; &lt;code&gt;%&lt;/code&gt; に置き換えられます。これらはクラスまたはIDが使用できる場所ならどこでも使用でき、それ自体でルールセットがCSSにレンダリングされないようにします。例えば：</target>
        </trans-unit>
        <trans-unit id="7a175e693b374d4493d7b0e3d217567c76d1d2ae" translate="yes" xml:space="preserve">
          <source>Plain CSS &lt;code&gt;@import&lt;/code&gt;s</source>
          <target state="translated">プレーンCSS &lt;code&gt;@import&lt;/code&gt; s</target>
        </trans-unit>
        <trans-unit id="e95f4c628e1950df7e58d812c64c34abd443548d" translate="yes" xml:space="preserve">
          <source>Plain CSS Functions</source>
          <target state="translated">プレーンなCSS関数</target>
        </trans-unit>
        <trans-unit id="c69c7edce2e30c07d4d24840b8b06debd3d19b52" translate="yes" xml:space="preserve">
          <source>Plain CSS function names</source>
          <target state="translated">プレーンな CSS 関数名</target>
        </trans-unit>
        <trans-unit id="a327806ce6bc8e41e7a15559687d221d323ede6f" translate="yes" xml:space="preserve">
          <source>Plain CSS&lt;code&gt;@import&lt;/code&gt;s</source>
          <target state="translated">プレーンCSS &lt;code&gt;@import&lt;/code&gt; s</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="3dd4db5ce7ea626f59e720f0c27096a22aa1ecd0" translate="yes" xml:space="preserve">
          <source>Precision</source>
          <target state="translated">Precision</target>
        </trans-unit>
        <trans-unit id="17cf3dabf6bc7dc21b9d1a5d6c5ffd7fbfeb0605" translate="yes" xml:space="preserve">
          <source>Private Members</source>
          <target state="translated">個人会員</target>
        </trans-unit>
        <trans-unit id="b531a743226fd315cba3a568c4d2adb5df8bdde7" translate="yes" xml:space="preserve">
          <source>Private Placeholders</source>
          <target state="translated">プライベートプレースホルダ</target>
        </trans-unit>
        <trans-unit id="8026192ae46c8d75559c9211d8ad7ffaa4f4585a" translate="yes" xml:space="preserve">
          <source>Property Declarations</source>
          <target state="translated">財産宣言</target>
        </trans-unit>
        <trans-unit id="bd13ea8b9b871dd6b38cca8e0f1184b0535d90e7" translate="yes" xml:space="preserve">
          <source>Property names in declarations</source>
          <target state="translated">宣言におけるプロパティ名</target>
        </trans-unit>
        <trans-unit id="8e06ee91ee276aa5597f240bfdf862c7bbaaf1af" translate="yes" xml:space="preserve">
          <source>Quoted</source>
          <target state="translated">Quoted</target>
        </trans-unit>
        <trans-unit id="e555ca00e12644d44994f87d0f5b40e67a4fe054" translate="yes" xml:space="preserve">
          <source>Quoted Strings</source>
          <target state="translated">引用された弦</target>
        </trans-unit>
        <trans-unit id="433e8cd6ceba6fbb5365d4cbc4c77708250468d1" translate="yes" xml:space="preserve">
          <source>Quoted or unquoted strings</source>
          <target state="translated">引用符で囲まれた文字列または引用符で囲まれていない文字列</target>
        </trans-unit>
        <trans-unit id="2a9325146b5d935a8e4b2b7fa3f8c22c67f62d01" translate="yes" xml:space="preserve">
          <source>Quoted strings are guaranteed to be compiled to CSS strings that have the same contents as the original Sass strings. The exact format may vary based on the implementation or configuration&amp;mdash;a string containing a double quote may be compiled to &lt;code&gt;&quot;\&quot;&quot;&lt;/code&gt; or &lt;code&gt;'&quot;'&lt;/code&gt;, and a non-&lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; character may or may not be escaped. But that should be parsed the same in any standards-compliant CSS implementation, including all browsers.</source>
          <target state="translated">引用符で囲まれた文字列は、元のSass文字列と同じ内容のCSS文字列にコンパイルされることが保証されています。正確な形式は、実装または構成によって異なる場合があります。二重引用符を含む文字列は、 &lt;code&gt;&quot;\&quot;&quot;&lt;/code&gt; または &lt;code&gt;'&quot;'&lt;/code&gt; にコンパイルされ、&lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII以外の&lt;/a&gt;文字はエスケープされる場合とされない場合があります。ただし、これは、すべてのブラウザーを含む、標準に準拠したCSS実装でも同じように解析する必要があります。</target>
        </trans-unit>
        <trans-unit id="e82ae9017bba7215709a258269319fec1393b498" translate="yes" xml:space="preserve">
          <source>Quoted strings are written between either single or double quotes, as in &lt;code&gt;&quot;Helvetica Neue&quot;&lt;/code&gt;. They can contain &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt;, as well as any unescaped character except for:</source>
          <target state="translated">引用符で囲まれた文字列は、 &lt;code&gt;&quot;Helvetica Neue&quot;&lt;/code&gt; ように、一重引用符または二重引用符の間に書き込まれます。これらには、&lt;a href=&quot;../interpolation&quot;&gt;補間&lt;/a&gt;、および以下を除くエスケープされていない文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="919c02f72c8dc766a3ec88ccb258a30d50b18ab4" translate="yes" xml:space="preserve">
          <source>Rack/Rails/Merb Plugin</source>
          <target state="translated">ラック/レール/マーブプラグイン</target>
        </trans-unit>
        <trans-unit id="cbab26157fbc3b0526dc0021d74676f7ac742b77" translate="yes" xml:space="preserve">
          <source>Railroad diagram copyright &amp;copy; 2018 W3C&lt;sup&gt;&amp;reg;&lt;/sup&gt; (MIT, ERCIM, Keio, Beihang). W3C&lt;a href=&quot;http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer&quot;&gt;liability&lt;/a&gt;, &lt;a href=&quot;http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks&quot;&gt;trademark&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document&quot;&gt;permissive document license&lt;/a&gt; rules apply.</source>
          <target state="translated">鉄道図の著作権&amp;copy;2018 W3C &lt;sup&gt;&amp;reg;&lt;/sup&gt;（MIT、ERCIM、慶應義塾、北京航空航天）。W3Cの&lt;a href=&quot;http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer&quot;&gt;責任&lt;/a&gt;、&lt;a href=&quot;http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks&quot;&gt;商標&lt;/a&gt;、および&lt;a href=&quot;http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document&quot;&gt;許容文書のライセンス&lt;/a&gt;規則が適用されます。</target>
        </trans-unit>
        <trans-unit id="79395baf2e1c527bae4141a75235a0eefb3f634b" translate="yes" xml:space="preserve">
          <source>Raises &lt;code&gt;$base&lt;/code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Exponentiation&quot;&gt;to the power of&lt;/a&gt;&lt;code&gt;$exponent&lt;/code&gt;.</source>
          <target state="translated">発生させます &lt;code&gt;$base&lt;/code&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Exponentiation&quot;&gt;のパワーに&lt;/a&gt; &lt;code&gt;$exponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e0eb5268f437200e3ca42ec2d178bdfb80e8e252" translate="yes" xml:space="preserve">
          <source>Raises:</source>
          <target state="translated">Raises:</target>
        </trans-unit>
        <trans-unit id="c07be06a9d0942a578db072018d18f8a662503c6" translate="yes" xml:space="preserve">
          <source>Referencing Parent Selectors: &lt;code&gt;&amp;amp;&lt;/code&gt; #parent-selector</source>
          <target state="translated">親セレクターの参照： &lt;code&gt;&amp;amp;&lt;/code&gt; ＃parent-selector</target>
        </trans-unit>
        <trans-unit id="354032ada697719ccb58ca87cd221831508c42b3" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
          <target state="translated">関係演算子</target>
        </trans-unit>
        <trans-unit id="300d986e9c634e87b8a5acab34b704dc9f08b5e3" translate="yes" xml:space="preserve">
          <source>Relational operators (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;) are also supported for numbers, and equality operators (&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;) are supported for all types.</source>
          <target state="translated">関係演算子（ &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;=&lt;/code&gt; ）も数値でサポートされ、等価演算子（ &lt;code&gt;==&lt;/code&gt; 、 &lt;code&gt;!=&lt;/code&gt; ）はすべての型でサポートされます。</target>
        </trans-unit>
        <trans-unit id="94ea463c80df7da62ba5fb4fca637b727cbb79df" translate="yes" xml:space="preserve">
          <source>Relational operators determine whether &lt;a href=&quot;../values/numbers&quot;&gt;numbers&lt;/a&gt; are larger or smaller than one another. They automatically convert between compatible units.</source>
          <target state="translated">関係演算子は、&lt;a href=&quot;../values/numbers&quot;&gt;数値&lt;/a&gt;が互いに大きいか小さいかを判別します。互換性のあるユニット間で自動的に変換されます。</target>
        </trans-unit>
        <trans-unit id="670a1246f19c95ceec3dc72fea9216deb3b1e8e8" translate="yes" xml:space="preserve">
          <source>Removes quotes from a string. If the string is already unquoted, this will return it unmodified.</source>
          <target state="translated">文字列から引用符を削除します。文字列が既に引用符で囲まれていない場合、これは変更されていない文字列を返します。</target>
        </trans-unit>
        <trans-unit id="1607356e597f16ff04732753955c924b6ac2187c" translate="yes" xml:space="preserve">
          <source>Replaces all instances of &lt;code&gt;$original&lt;/code&gt; with &lt;code&gt;$replacement&lt;/code&gt; in &lt;code&gt;$selector&lt;/code&gt;</source>
          <target state="translated">すべてのインスタンスに置き換え &lt;code&gt;$original&lt;/code&gt; と &lt;code&gt;$replacement&lt;/code&gt; で &lt;code&gt;$selector&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cfa5e2d887f8850689969682acba8e894f56eb38" translate="yes" xml:space="preserve">
          <source>Restricts &lt;code&gt;$number&lt;/code&gt; to the range between &lt;code&gt;$min&lt;/code&gt; and &lt;code&gt;$max&lt;/code&gt;. If &lt;code&gt;$number&lt;/code&gt; is less than &lt;code&gt;$min&lt;/code&gt; this returns &lt;code&gt;$min&lt;/code&gt;, and if it&amp;rsquo;s greater than &lt;code&gt;$max&lt;/code&gt; this returns &lt;code&gt;$max&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$number&lt;/code&gt; を &lt;code&gt;$min&lt;/code&gt; から &lt;code&gt;$max&lt;/code&gt; 範囲に制限します。場合は &lt;code&gt;$number&lt;/code&gt; ある未満 &lt;code&gt;$min&lt;/code&gt; このリターン &lt;code&gt;$min&lt;/code&gt; 、そしてよりそれの大きい場合 &lt;code&gt;$max&lt;/code&gt; この戻り &lt;code&gt;$max&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92b958d353c51af8e3a7d9c86b9846f96f7b31d5" translate="yes" xml:space="preserve">
          <source>Result Object</source>
          <target state="translated">結果オブジェクト</target>
        </trans-unit>
        <trans-unit id="0a098796ce9c4464f246388db35938a4fb8e9e25" translate="yes" xml:space="preserve">
          <source>Return a decimal between 0 and 1, inclusive of 0 but not 1.</source>
          <target state="translated">0から1までの10進数を返します。</target>
        </trans-unit>
        <trans-unit id="ca697c9676025d695d9bb3bdfe66da3ae3200550" translate="yes" xml:space="preserve">
          <source>Return a new list, based on the list provided, but with the nth element changed to the value given.</source>
          <target state="translated">与えられたリストに基づいて、n 番目の要素を与えられた値に変更した新しいリストを返します。</target>
        </trans-unit>
        <trans-unit id="f6a62674270588e7988262fa17987874416e5829" translate="yes" xml:space="preserve">
          <source>Return a new selector with all selectors in &lt;code&gt;$selectors&lt;/code&gt; appended one another as though they had been nested in the stylesheet as &lt;code&gt;$selector1 { &amp;amp;$selector2 { ... } }&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$selector1 { &amp;amp;$selector2 { ... } }&lt;/code&gt; としてスタイルシートにネストされているかのように、 &lt;code&gt;$selectors&lt;/code&gt; selectors内のすべてのセレクターを互いに追加した新しいセレクターを返します。</target>
        </trans-unit>
        <trans-unit id="d786c6c7ee742054a909f7c1b81b3ba1b0385868" translate="yes" xml:space="preserve">
          <source>Return a new selector with all selectors in &lt;code&gt;$selectors&lt;/code&gt; nested beneath one another as though they had been nested in the stylesheet as &lt;code&gt;$selector1 { $selector2 { ... } }&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$selector1 { $selector2 { ... } }&lt;/code&gt; としてスタイルシートにネストされているかのように、 &lt;code&gt;$selectors&lt;/code&gt; selectors内のすべてのセレクターが互いにネストされた新しいセレクターを返します。</target>
        </trans-unit>
        <trans-unit id="fecae0aae65cbb793f8b56a5e7bd50520734109b" translate="yes" xml:space="preserve">
          <source>Return a string containing the value as its Sass representation.</source>
          <target state="translated">値をSass表現として含む文字列を返します。</target>
        </trans-unit>
        <trans-unit id="90e91a4bbe1cfd7eb6a7673ffd79bad43d456339" translate="yes" xml:space="preserve">
          <source>Return an integer between 1 and &lt;code&gt;$limit&lt;/code&gt;, inclusive of both 1 and &lt;code&gt;$limit&lt;/code&gt;.</source>
          <target state="translated">1から &lt;code&gt;$limit&lt;/code&gt; 整数を返します。1と$ limitの両方を含み &lt;code&gt;$limit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c07470b33157e00d0801cb59275e075b771c1ccb" translate="yes" xml:space="preserve">
          <source>Return the length of a list.</source>
          <target state="translated">リストの長さを返します。</target>
        </trans-unit>
        <trans-unit id="fb057ce72403b54191be4a09c94e8f9300c7aced" translate="yes" xml:space="preserve">
          <source>Returns &lt;a href=&quot;../values/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; if the map does not have a value associated with the key, or if any key in &lt;code&gt;$keys&lt;/code&gt; is missing from a map or references a value that is not a map.</source>
          <target state="translated">マップにキーに関連付けられた値がない場合、または &lt;code&gt;$keys&lt;/code&gt; いずれかのキーがマップから欠落しているか、マップではない値を参照している場合は、&lt;a href=&quot;../values/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="e4cdf5d42c0671647d2b7bb0968806799a4eb199" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;$if-true&lt;/code&gt; if &lt;code&gt;$condition&lt;/code&gt; is &lt;a href=&quot;at-rules/control/if#truthiness-and-falsiness&quot;&gt;truthy&lt;/a&gt;, and &lt;code&gt;$if-false&lt;/code&gt; otherwise.</source>
          <target state="translated">戻り値 &lt;code&gt;$if-true&lt;/code&gt; ならば &lt;code&gt;$condition&lt;/code&gt; ある&lt;a href=&quot;at-rules/control/if#truthiness-and-falsiness&quot;&gt;truthy&lt;/a&gt;、および &lt;code&gt;$if-false&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="9c3297b36141174e06a6196507a7b94b480afdf1" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;$selector&lt;/code&gt; in the &lt;a href=&quot;#selector-values&quot;&gt;selector value&lt;/a&gt; format.</source>
          <target state="translated">&lt;a href=&quot;#selector-values&quot;&gt;セレクター値の&lt;/a&gt;形式で &lt;code&gt;$selector&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="249ffe23331434e32c564f1a4689c2eaac25ee4a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;$string&lt;/code&gt; as a quoted string.</source>
          <target state="translated">&lt;code&gt;$string&lt;/code&gt; を引用符で囲まれた文字列として返します。</target>
        </trans-unit>
        <trans-unit id="32ff0d023ae7d1a21de339c4dbe7f0ad73b60841" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;$string&lt;/code&gt; as an unquoted string. This can produce strings that aren&amp;rsquo;t valid CSS, so use with caution.</source>
          <target state="translated">&lt;code&gt;$string&lt;/code&gt; を引用符で囲まれていない文字列として返します。これにより、有効なCSSではない文字列が生成される可能性があるため、注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="c0906bcfe3179993cff5b2ec089cc5ae3a58639f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;false&lt;/code&gt; for any unrecognized &lt;code&gt;$feature&lt;/code&gt;.</source>
          <target state="translated">認識されない &lt;code&gt;$feature&lt;/code&gt; に対して &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="eb5215354c106af2212e9f9c422fc9ba94c22cc4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;$selector1&lt;/code&gt; and &lt;code&gt;$selector2&lt;/code&gt; don&amp;rsquo;t match any of the same elements, or if there&amp;rsquo;s no selector that can express their overlap.</source>
          <target state="translated">戻り値は &lt;code&gt;null&lt;/code&gt; ならば &lt;code&gt;$selector1&lt;/code&gt; と &lt;code&gt;$selector2&lt;/code&gt; 同じ要素のいずれにも一致していない、または自分の重なりを表現することができます何のセレクタはありません場合。</target>
        </trans-unit>
        <trans-unit id="898a6b17935b803e11e9f1af1939dd597811f399" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the boolean is the Sass value &lt;code&gt;true&lt;/code&gt;, and false if it&amp;rsquo;s the Sass value &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">返し &lt;code&gt;true&lt;/code&gt; ブール値は、Sassの値である場合は &lt;code&gt;true&lt;/code&gt; 、それはSassの値だ場合、偽 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e9088f434b0b978079a78739bbc1126fd623b13" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the list is comma-separated, and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">リストがコンマ区切りの場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8f6a052d8f52ede9829ca353baf2ad1fe25aef91" translate="yes" xml:space="preserve">
          <source>Returns A list of lists of strings representing &lt;code&gt;$selector&lt;/code&gt;. This is in the same format as a selector returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$selector&lt;/code&gt; 表す文字列のリストのリスト。これは、 &lt;code&gt;&amp;amp;&lt;/code&gt; によって返されるセレクタと同じ形式です。</target>
        </trans-unit>
        <trans-unit id="c8b878ae579da9409cf7d7baa8ef1f74d25be570" translate="yes" xml:space="preserve">
          <source>Returns A list of lists of strings representing the result of appending &lt;code&gt;$selectors&lt;/code&gt;. This is in the same format as a selector returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$selectors&lt;/code&gt; を追加した結果を表す文字列のリストのリスト。これは、 &lt;code&gt;&amp;amp;&lt;/code&gt; によって返されるセレクタと同じ形式です。</target>
        </trans-unit>
        <trans-unit id="681bf66491ff841a9a3ecda1364da535f5efc671" translate="yes" xml:space="preserve">
          <source>Returns A list of lists of strings representing the result of nesting &lt;code&gt;$selectors&lt;/code&gt;. This is in the same format as a selector returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$selectors&lt;/code&gt; をネストした結果を表す文字列のリストのリスト。これは、 &lt;code&gt;&amp;amp;&lt;/code&gt; によって返されるセレクタと同じ形式です。</target>
        </trans-unit>
        <trans-unit id="cafdbbccfa855d711958927868096ff911afe9f8" translate="yes" xml:space="preserve">
          <source>Returns A list of lists of strings representing the result of the extension. This is in the same format as a selector returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">戻り値拡張の結果を表す文字列のリストのリスト。これは、 &lt;code&gt;&amp;amp;&lt;/code&gt; によって返されるセレクタと同じ形式です。</target>
        </trans-unit>
        <trans-unit id="cb3112dd58bcce2f656ec836bc0870940f3b7cb6" translate="yes" xml:space="preserve">
          <source>Returns A list of lists of strings representing the result of the unification, or null if no unification exists. This is in the same format as a selector returned by &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">戻り値統合の結果を表す文字列のリストのリスト、または統合が存在しない場合はnull。これは、 &lt;code&gt;&amp;amp;&lt;/code&gt; によって返されるセレクタと同じ形式です。</target>
        </trans-unit>
        <trans-unit id="7fff605b99df76ab731c698f7cedf9a3671871f0" translate="yes" xml:space="preserve">
          <source>Returns A list of simple selectors in the compound selector.</source>
          <target state="translated">戻り値 複合セレクタ内の単純セレクタのリスト。</target>
        </trans-unit>
        <trans-unit id="7810bbd9c0fa87887e06262e239afdf0537d4582" translate="yes" xml:space="preserve">
          <source>Returns The substring. This will be quoted if and only if &lt;code&gt;$string&lt;/code&gt; was quoted</source>
          <target state="translated">戻り値部分文字列。 &lt;code&gt;$string&lt;/code&gt; が引用された場合にのみ引用されます</target>
        </trans-unit>
        <trans-unit id="45122d96ce3cff3b4f36a0787a2f17262c4946d7" translate="yes" xml:space="preserve">
          <source>Returns Whether &lt;code&gt;$selector1&lt;/code&gt; is a superselector of &lt;code&gt;$selector2&lt;/code&gt;.</source>
          <target state="translated">かどうかを返します &lt;code&gt;$selector1&lt;/code&gt; のsuperselectorある &lt;code&gt;$selector2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb4dbde3c3c8c57700438662f9506d8ae071fbad" translate="yes" xml:space="preserve">
          <source>Returns a color with the given &lt;a href=&quot;https://en.wikipedia.org/wiki/HSL_and_HSV&quot;&gt;hue, saturation, and lightness&lt;/a&gt; and the given alpha channel.</source>
          <target state="translated">指定された&lt;a href=&quot;https://en.wikipedia.org/wiki/HSL_and_HSV&quot;&gt;色相、彩度、明度&lt;/a&gt;、および指定されたアルファチャネルの色を返します。</target>
        </trans-unit>
        <trans-unit id="0a771f31e003265d47ff5059f6063e4fc6c60309" translate="yes" xml:space="preserve">
          <source>Returns a color with the given &lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;hue, whiteness, and blackness&lt;/a&gt; and the given alpha channel.</source>
          <target state="translated">指定された&lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;色相、白さ、黒さ、および指定さ&lt;/a&gt;れたアルファチャネルの色を返します。</target>
        </trans-unit>
        <trans-unit id="6bf7dc97931e2c724e27a45cddb7b9661e795fc9" translate="yes" xml:space="preserve">
          <source>Returns a comma-separated list of all the keys in &lt;code&gt;$map&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$map&lt;/code&gt; 内のすべてのキーのコンマ区切りのリストを返します。</target>
        </trans-unit>
        <trans-unit id="d91484bd86a0364328a9c0b93244c9110296ab27" translate="yes" xml:space="preserve">
          <source>Returns a comma-separated list of all the values in &lt;code&gt;$map&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$map&lt;/code&gt; 内のすべての値のコンマ区切りのリストを返します。</target>
        </trans-unit>
        <trans-unit id="34c050842516f7ed7ff369ad29af1a56ecd1f223" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$list&lt;/code&gt; with &lt;code&gt;$val&lt;/code&gt; added to the end.</source>
          <target state="translated">戻り値のコピー &lt;code&gt;$list&lt;/code&gt; 持つ &lt;code&gt;$val&lt;/code&gt; 最後に追加しました。</target>
        </trans-unit>
        <trans-unit id="574d67fd095aa48e4721721aa10937adce3804cc" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$list&lt;/code&gt; with the element at &lt;a href=&quot;../values/lists#indexes&quot;&gt;index&lt;/a&gt;&lt;code&gt;$n&lt;/code&gt; replaced with &lt;code&gt;$value&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../values/lists#indexes&quot;&gt;インデックス&lt;/a&gt; &lt;code&gt;$n&lt;/code&gt; 要素が &lt;code&gt;$value&lt;/code&gt; 置き換えられた &lt;code&gt;$list&lt;/code&gt; コピーを返します。</target>
        </trans-unit>
        <trans-unit id="f241867340b7c15856db35eed80a96f8aea1d893" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$map1&lt;/code&gt; where the targeted map is replaced by a new map that contains all the keys and values from both the targeted map and &lt;code&gt;$map2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$map1&lt;/code&gt; コピーを返します。ここで、ターゲットマップは、ターゲットマップと &lt;code&gt;$map2&lt;/code&gt; 両方からのすべてのキーと値を含む新しいマップに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="be8bee096f60104df2d8fd1d8c1c4eb80b03713c" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$map&lt;/code&gt; where the targeted map does not have a value associated with the last key in &lt;code&gt;$keys&lt;/code&gt;.</source>
          <target state="translated">ターゲットマップに &lt;code&gt;$keys&lt;/code&gt; 最後のキーに関連付けられた値がない &lt;code&gt;$map&lt;/code&gt; コピーを返します。</target>
        </trans-unit>
        <trans-unit id="6c894af178358e70ca8e2d2d9e86041f354a12f9" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$map&lt;/code&gt; with the targeted map&amp;rsquo;s value at &lt;code&gt;$key&lt;/code&gt; set to &lt;code&gt;$value&lt;/code&gt;.</source>
          <target state="translated">戻り値のコピー &lt;code&gt;$map&lt;/code&gt; をターゲットにマップの値を持つ &lt;code&gt;$key&lt;/code&gt; に設定 &lt;code&gt;$value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c60794a6f9628dd3dda1513f7c6114c4478a2bfe" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$map&lt;/code&gt; without any values associated with &lt;code&gt;$keys&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$keys&lt;/code&gt; 関連付けられた値なしで &lt;code&gt;$map&lt;/code&gt; コピーを返します。</target>
        </trans-unit>
        <trans-unit id="8a61ba0a1e026ee99909219dc83cdb6658860c89" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$selector&lt;/code&gt; modified with the following &lt;code&gt;@extend&lt;/code&gt; rule:</source>
          <target state="translated">次の &lt;code&gt;@extend&lt;/code&gt; ルールで変更された &lt;code&gt;$selector&lt;/code&gt; コピーを返します。</target>
        </trans-unit>
        <trans-unit id="561de92c8c64c2ef01cb3a98b778ed6c436ea936" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$selector&lt;/code&gt; with all instances of &lt;code&gt;$original&lt;/code&gt; replaced by &lt;code&gt;$replacement&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$original&lt;/code&gt; すべてのインスタンスが &lt;code&gt;$replacement&lt;/code&gt; 置き換えられた$ &lt;code&gt;$selector&lt;/code&gt; コピーを返します。</target>
        </trans-unit>
        <trans-unit id="54c79e29002621547c98326d51f8a1b588a64144" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$string&lt;/code&gt; with &lt;code&gt;$insert&lt;/code&gt; inserted at &lt;a href=&quot;../values/strings#string-indexes&quot;&gt;&lt;code&gt;$index&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値のコピー &lt;code&gt;$string&lt;/code&gt; と &lt;code&gt;$insert&lt;/code&gt; に挿入&lt;a href=&quot;../values/strings#string-indexes&quot;&gt; &lt;code&gt;$index&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3dee6dc39f9d5b855dd2a4b9732b7dc5b322965e" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$string&lt;/code&gt; with the &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; letters converted to lower case.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt;文字を小文字に変換した &lt;code&gt;$string&lt;/code&gt; コピーを返します。</target>
        </trans-unit>
        <trans-unit id="c841eb151c8f746dc1d40708bfcfe8a0711ab217" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;$string&lt;/code&gt; with the &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; letters converted to upper case.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt;文字を大文字に変換した &lt;code&gt;$string&lt;/code&gt; コピーを返します。</target>
        </trans-unit>
        <trans-unit id="998630824c12877f4b98b871bfb29c286be6f247" translate="yes" xml:space="preserve">
          <source>Returns a gray color with the same lightness as &lt;code&gt;$color&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; と同じ明度の灰色を返します。</target>
        </trans-unit>
        <trans-unit id="f45056679ba8933cc8f58a15e532480b82589e48" translate="yes" xml:space="preserve">
          <source>Returns a list of all keys in a map.</source>
          <target state="translated">マップ内のすべてのキーのリストを返します。</target>
        </trans-unit>
        <trans-unit id="468e70b240f8d38fce4be5ca4f56db2f415dfc22" translate="yes" xml:space="preserve">
          <source>Returns a list of all values in a map. This list may include duplicate values, if multiple keys have the same value.</source>
          <target state="translated">マップ内のすべての値のリストを返します。複数のキーが同じ値を持つ場合、このリストには重複した値が含まれることがあります。</target>
        </trans-unit>
        <trans-unit id="731483297ad07944a7979ff17ba55a9526f7a6a4" translate="yes" xml:space="preserve">
          <source>Returns a list of simple selectors in &lt;code&gt;$selector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$selector&lt;/code&gt; 内の単純なセレクターのリストを返します。</target>
        </trans-unit>
        <trans-unit id="d46d68e2902846fb9c9a2fbc4818a68607ba48cc" translate="yes" xml:space="preserve">
          <source>Returns a new list containing the elements of &lt;code&gt;$list1&lt;/code&gt; followed by the elements of &lt;code&gt;$list2&lt;/code&gt;.</source>
          <target state="translated">戻り値の要素を含む新しいリスト &lt;code&gt;$list1&lt;/code&gt; の要素に続く &lt;code&gt;$list2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6d643e2176a2ae6ca49ca4e54fd08bc70807b73" translate="yes" xml:space="preserve">
          <source>Returns a new map with keys removed.</source>
          <target state="translated">キーを削除した新しいマップを返します。</target>
        </trans-unit>
        <trans-unit id="aa71fec219d9e6da99bbca84041bb4d3e6acaaca" translate="yes" xml:space="preserve">
          <source>Returns a new version of &lt;code&gt;$selector&lt;/code&gt; with &lt;code&gt;$extendee&lt;/code&gt; extended with &lt;code&gt;$extender&lt;/code&gt;. This works just like the result of</source>
          <target state="translated">戻り値の新しいバージョン &lt;code&gt;$selector&lt;/code&gt; で &lt;code&gt;$extendee&lt;/code&gt; で拡張 &lt;code&gt;$extender&lt;/code&gt; 。これは次の結果と同じように機能します</target>
        </trans-unit>
        <trans-unit id="f7debff9e64a5e5c07bf9f9de9a936a9ddb28823" translate="yes" xml:space="preserve">
          <source>Returns a number that&amp;rsquo;s a mixture of &lt;code&gt;$color1&lt;/code&gt; and &lt;code&gt;$color2&lt;/code&gt;.</source>
          <target state="translated">戻り値の混合物だ数 &lt;code&gt;$color1&lt;/code&gt; と &lt;code&gt;$color2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a269eb48227cbf36d12e9a515e49e1d887b7b9e2" translate="yes" xml:space="preserve">
          <source>Returns a randomly-generated unquoted string that&amp;rsquo;s guaranteed to be a valid CSS identifier and to be unique within the current Sass compilation.</source>
          <target state="translated">ランダムに生成された引用符で囲まれていない文字列を返します。これは、有効なCSS識別子であり、現在のSassコンパイル内で一意であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="79db0f86648abae15ff2e887d2f8b783c7aca591" translate="yes" xml:space="preserve">
          <source>Returns a reference to a function for later invocation with the &lt;code&gt;call()&lt;/code&gt; function.</source>
          <target state="translated">後で &lt;code&gt;call()&lt;/code&gt; 関数を使用して呼び出すための関数への参照を返します。</target>
        </trans-unit>
        <trans-unit id="fb890b6d723e63def5ce0abf7a2a0288c8371f79" translate="yes" xml:space="preserve">
          <source>Returns a representation of &lt;em&gt;any&lt;/em&gt; Sass value, not just those that can be represented in CSS. As such, its return value is not guaranteed to be valid CSS.</source>
          <target state="translated">CSSで表現できる値だけでなく、&lt;em&gt;任意の&lt;/em&gt;Sass値の表現を返します。そのため、その戻り値は有効なCSSであることが保証されていません。</target>
        </trans-unit>
        <trans-unit id="55957dece7996a4bb4c9e933d3ef17428ea6ccc2" translate="yes" xml:space="preserve">
          <source>Returns a selector that matches only elements matched by &lt;em&gt;both&lt;/em&gt;&lt;code&gt;$selector1&lt;/code&gt; and &lt;code&gt;$selector2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$selector1&lt;/code&gt; と &lt;code&gt;$selector2&lt;/code&gt; &lt;em&gt;両方に&lt;/em&gt;一致する要素のみに一致するセレクターを返します。</target>
        </trans-unit>
        <trans-unit id="bf02f500fc1bb9a15c95b64ce230fe9e60ebab27" translate="yes" xml:space="preserve">
          <source>Returns a string representation of &lt;code&gt;$number&lt;/code&gt;&amp;rsquo;s units.</source>
          <target state="translated">&lt;code&gt;$number&lt;/code&gt; の単位の文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="7b483cc27e0b71d6a9790908fd380625bd214385" translate="yes" xml:space="preserve">
          <source>Returns a string representation of &lt;code&gt;$value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$value&lt;/code&gt; 文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="dd453ac892432e3a43f7f4574d7f4c8c32a37a86" translate="yes" xml:space="preserve">
          <source>Returns a unique CSS identifier. The identifier is returned as an unquoted string. The identifier returned is only guaranteed to be unique within the scope of a single Sass run.</source>
          <target state="translated">一意の CSS 識別子を返す。識別子は引用符で囲まれていない文字列として返されます。返される識別子は、単一の Sass の実行範囲内でのみ一意であることが保証されます。</target>
        </trans-unit>
        <trans-unit id="d4e88c3f2a49533d48f659fa7d55bbeea7e08df4" translate="yes" xml:space="preserve">
          <source>Returns all the functions defined in a module, as a map from function names to &lt;a href=&quot;../values/functions&quot;&gt;function values&lt;/a&gt;.</source>
          <target state="translated">モジュールで定義されているすべての関数を、関数名から&lt;a href=&quot;../values/functions&quot;&gt;関数値&lt;/a&gt;へのマップとして返​​します。</target>
        </trans-unit>
        <trans-unit id="e1a867f177933e46962d4756bbe2151595608646" translate="yes" xml:space="preserve">
          <source>Returns all the variables defined in a module, as a map from variable names (without &lt;code&gt;$&lt;/code&gt;) to the values of those variables.</source>
          <target state="translated">モジュールで定義されたすべての変数を、変数名（ &lt;code&gt;$&lt;/code&gt; なし）からそれらの変数の値へのマップとして返​​します。</target>
        </trans-unit>
        <trans-unit id="cf954a08b11faca5408ee01bc1ffa94e703030e4" translate="yes" xml:space="preserve">
          <source>Returns an unquoted string that represents &lt;code&gt;$color&lt;/code&gt; in the &lt;code&gt;#AARRGGBB&lt;/code&gt; format expected by Internet Explorer&amp;rsquo;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter&quot;&gt;&lt;code&gt;-ms-filter&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">InternetExplorerの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter&quot;&gt; &lt;code&gt;-ms-filter&lt;/code&gt; &lt;/a&gt;プロパティで期待される &lt;code&gt;#AARRGGBB&lt;/code&gt; 形式で &lt;code&gt;$color&lt;/code&gt; を表す引用符で囲まれていない文字列を返します。</target>
        </trans-unit>
        <trans-unit id="9785c9f859f3c8c15e02ae07fa4b5f4713dda054" translate="yes" xml:space="preserve">
          <source>Returns false if it does not, or if any key in &lt;code&gt;$keys&lt;/code&gt; is missing from a map or references a value that is not a map.</source>
          <target state="translated">そうでない場合、または &lt;code&gt;$keys&lt;/code&gt; いずれかのキーがマップから欠落しているか、マップではない値を参照している場合は、falseを返します。</target>
        </trans-unit>
        <trans-unit id="ebd04b66d30293595136a62cc8fac8b316642c0c" translate="yes" xml:space="preserve">
          <source>Returns one of two values, depending on whether or not &lt;code&gt;$condition&lt;/code&gt; is true. Just like in &lt;code&gt;@if&lt;/code&gt;, all values other than &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are considered to be true.</source>
          <target state="translated">&lt;code&gt;$condition&lt;/code&gt; がtrue かどうかに応じて、2つの値のいずれかを返します。 &lt;code&gt;@if&lt;/code&gt; と同様に、 &lt;code&gt;false&lt;/code&gt; と &lt;code&gt;null&lt;/code&gt; 以外のすべての値はtrueと見なされます。</target>
        </trans-unit>
        <trans-unit id="fd33c97a0ae0e81976060eb166d228e16c63a6ab" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;../values/functions&quot;&gt;function&lt;/a&gt; named &lt;code&gt;$name&lt;/code&gt;.</source>
          <target state="translated">戻り値&lt;a href=&quot;../values/functions&quot;&gt;関数&lt;/a&gt;の名前 &lt;code&gt;$name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c491a40c3cd07f70c78be29b35baeb2a15115dd" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;../values/lists#indexes&quot;&gt;index&lt;/a&gt; of &lt;code&gt;$value&lt;/code&gt; in &lt;code&gt;$list&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$list&lt;/code&gt; 内の &lt;code&gt;$value&lt;/code&gt; の&lt;a href=&quot;../values/lists#indexes&quot;&gt;インデックス&lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="64badb95bd6e180f7ab47ec8541c943a1790de67" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;http://dev.w3.org/csswg/selectors4/#simple&quot;&gt;simple selectors&lt;/a&gt; that comprise the compound selector &lt;code&gt;$selector&lt;/code&gt;.</source>
          <target state="translated">複合セレクター &lt;code&gt;$selector&lt;/code&gt; を構成する&lt;a href=&quot;http://dev.w3.org/csswg/selectors4/#simple&quot;&gt;単純なセレクター&lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="b5ab43ce15abec778e6e5e697d298143d6e24c17" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Absolute_value&quot;&gt;absolute value&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt;. If &lt;code&gt;$number&lt;/code&gt; is negative, this returns &lt;code&gt;-$number&lt;/code&gt;, and if &lt;code&gt;$number&lt;/code&gt; is positive, it returns &lt;code&gt;$number&lt;/code&gt; as-is.</source>
          <target state="translated">&lt;code&gt;$number&lt;/code&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Absolute_value&quot;&gt;絶対値&lt;/a&gt;を返します。場合は &lt;code&gt;$number&lt;/code&gt; 負で、このリターン &lt;code&gt;-$number&lt;/code&gt; 、および場合 &lt;code&gt;$number&lt;/code&gt; 正である、それは返す &lt;code&gt;$number&lt;/code&gt; そのままです。</target>
        </trans-unit>
        <trans-unit id="558ce99a8774f76eafa5c1514b499da914a2dfb5" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Atan2&quot;&gt;2-argument arctangent&lt;/a&gt; of &lt;code&gt;$y&lt;/code&gt; and &lt;code&gt;$x&lt;/code&gt; in &lt;code&gt;deg&lt;/code&gt;.</source>
          <target state="translated">戻り値&lt;a href=&quot;https://en.wikipedia.org/wiki/Atan2&quot;&gt;2引数の逆正接&lt;/a&gt;の &lt;code&gt;$y&lt;/code&gt; し、 &lt;code&gt;$x&lt;/code&gt; における &lt;code&gt;deg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c70101d5df99f9e098c9e7c88a88dd4badd69367" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;HWB&lt;/a&gt; blackness of &lt;code&gt;$color&lt;/code&gt; as a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;HWBの&lt;/a&gt;黒さを &lt;code&gt;0%&lt;/code&gt; から &lt;code&gt;100%&lt;/code&gt; までの数値として返します。</target>
        </trans-unit>
        <trans-unit id="8bacb56dcfcd02485fbd390f20c91cf95cdda760" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;HWB&lt;/a&gt; whiteness of &lt;code&gt;$color&lt;/code&gt; as a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;HWB&lt;/a&gt;白色度を &lt;code&gt;0%&lt;/code&gt; から &lt;code&gt;100%&lt;/code&gt; までの数値として返します。</target>
        </trans-unit>
        <trans-unit id="3f01cdcee0c0e2dd3375ed15b23a43fa6ef8910e" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties&quot;&gt;arccosine&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt; in &lt;code&gt;deg&lt;/code&gt;.</source>
          <target state="translated">返し&lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties&quot;&gt;アークコサイン&lt;/a&gt;の &lt;code&gt;$number&lt;/code&gt; で &lt;code&gt;deg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="93cf297beeb3f84b4cae229e1ca66f125974efeb" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties&quot;&gt;arcsine&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt; in &lt;code&gt;deg&lt;/code&gt;.</source>
          <target state="translated">返し&lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties&quot;&gt;アークサイン&lt;/a&gt;の &lt;code&gt;$number&lt;/code&gt; で &lt;code&gt;deg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a91ea40690f109e18f38fc8f66e6d95c3627242d" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties&quot;&gt;arctangent&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt; in &lt;code&gt;deg&lt;/code&gt;.</source>
          <target state="translated">返し&lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties&quot;&gt;アークタンジェント&lt;/a&gt;の &lt;code&gt;$number&lt;/code&gt; で &lt;code&gt;deg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed6c6850ab46fba9e8b74a80ec7c6335232e0bd1" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Logarithm&quot;&gt;logarithm&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt; with respect to &lt;code&gt;$base&lt;/code&gt;. If &lt;code&gt;$base&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_logarithm&quot;&gt;natural log&lt;/a&gt; is calculated.</source>
          <target state="translated">&lt;code&gt;$base&lt;/code&gt; に関する &lt;code&gt;$number&lt;/code&gt; の&lt;a href=&quot;https://en.wikipedia.org/wiki/Logarithm&quot;&gt;対数&lt;/a&gt;を返します。場合は &lt;code&gt;$base&lt;/code&gt; ある &lt;code&gt;null&lt;/code&gt; 、&lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_logarithm&quot;&gt;自然対数が&lt;/a&gt;計算されます。</target>
        </trans-unit>
        <trans-unit id="6262ac1c1d312314eb42212de183e8ae6b51a80c" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Square_root&quot;&gt;square root&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$number&lt;/code&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Square_root&quot;&gt;平方根&lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="c2a7865ad59bcc46083a11d427a7148df32a1ff2" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions&quot;&gt;cosine&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$number&lt;/code&gt; の&lt;a href=&quot;https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions&quot;&gt;コサイン&lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="f5f2398f9908d92e8a4027a8ceb29865872bf251" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions&quot;&gt;sine&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$number&lt;/code&gt; の&lt;a href=&quot;https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions&quot;&gt;サイン&lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="f5b40a38c3b8c0c8a07cedae85b79d928e58c774" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions&quot;&gt;tangent&lt;/a&gt; of &lt;code&gt;$number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$number&lt;/code&gt; の&lt;a href=&quot;https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions&quot;&gt;タンジェント&lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="e54230321a0a2c8b8d60eef72dfa778df95011c8" translate="yes" xml:space="preserve">
          <source>Returns the HSL lightness of &lt;code&gt;$color&lt;/code&gt; as a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; HSL明度を &lt;code&gt;0%&lt;/code&gt; から &lt;code&gt;100%&lt;/code&gt; までの数値として返します。</target>
        </trans-unit>
        <trans-unit id="440282d3eb2159266a78c63eba26932b43e9fe9b" translate="yes" xml:space="preserve">
          <source>Returns the HSL saturation of &lt;code&gt;$color&lt;/code&gt; as a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; HSL彩度を &lt;code&gt;0%&lt;/code&gt; から &lt;code&gt;100%&lt;/code&gt; までの数値として返します。</target>
        </trans-unit>
        <trans-unit id="351daf3fdcec5b30d7b691b8d6ce6d28025f7a0d" translate="yes" xml:space="preserve">
          <source>Returns the RGB&lt;a href=&quot;https://en.wikipedia.org/wiki/Complementary_colors&quot;&gt;complement&lt;/a&gt; of &lt;code&gt;$color&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; RGB&lt;a href=&quot;https://en.wikipedia.org/wiki/Complementary_colors&quot;&gt;補数&lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="92873924a9d3752bf60b47c8caa32746f6f19e6a" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of a number.</source>
          <target state="translated">数値の絶対値を返します。</target>
        </trans-unit>
        <trans-unit id="956a5fd04c6f7591ec3594c61af0bdc05c2a2649" translate="yes" xml:space="preserve">
          <source>Returns the alpha channel of &lt;code&gt;$color&lt;/code&gt; as a number between 0 and 1.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; アルファチャネルを0から1までの数値として返します。</target>
        </trans-unit>
        <trans-unit id="4ce4198b9b1a07a40932a8b70d57cf084905cd80" translate="yes" xml:space="preserve">
          <source>Returns the alpha channel of the color as a number from 0 to 1.</source>
          <target state="translated">色のアルファチャンネルを 0 から 1 までの数値で返します。</target>
        </trans-unit>
        <trans-unit id="f46b179b300313527135804bce4ea7f6a9606098" translate="yes" xml:space="preserve">
          <source>Returns the alpha component (opacity) of a color. This is 1 unless otherwise specified.</source>
          <target state="translated">色のアルファ成分(不透明度)を返します。特に指定がない限り、これは1です。</target>
        </trans-unit>
        <trans-unit id="c6b9b75b9e0756005c7ef91bf83d5c4cef80546d" translate="yes" xml:space="preserve">
          <source>Returns the blue channel of &lt;code&gt;$color&lt;/code&gt; as a number between 0 and 255.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; 青チャンネルを0〜255の数値として返します。</target>
        </trans-unit>
        <trans-unit id="01c52e317dd7839c6bbed0b61dbb192bc0073172" translate="yes" xml:space="preserve">
          <source>Returns the blue channel of the color as an integer from 0 to 255.</source>
          <target state="translated">色の青チャンネルを 0 から 255 までの整数で返します。</target>
        </trans-unit>
        <trans-unit id="12c86362af22b819d23c565553dc7874f1a4f890" translate="yes" xml:space="preserve">
          <source>Returns the complement of a color. This is identical to &lt;code&gt;adjust-hue(color, 180deg)&lt;/code&gt;.</source>
          <target state="translated">色の補数を返します。これは &lt;code&gt;adjust-hue(color, 180deg)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="abba6e7eda85ec1fe3c99331052256f271640d4b" translate="yes" xml:space="preserve">
          <source>Returns the contents of the string. If the string contains escapes, those escapes are included literally if it&amp;rsquo;s &lt;a href=&quot;values/strings#unquoted&quot;&gt;unquoted&lt;/a&gt;, while the values of the escapes are included if it&amp;rsquo;s &lt;a href=&quot;values/strings#quoted&quot;&gt;quoted&lt;/a&gt;.</source>
          <target state="translated">文字列の内容を返します。文字列にエスケープが含まれている場合、&lt;a href=&quot;values/strings#unquoted&quot;&gt;引用符で囲ま&lt;/a&gt;れていない場合はそれらのエスケープが文字通り含まれ、引用符で囲まれている場合はエスケープの値が含ま&lt;a href=&quot;values/strings#quoted&quot;&gt;れ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="43ab8abdd40ea0b2633b9ceaea3dfd1b3a66a221" translate="yes" xml:space="preserve">
          <source>Returns the element at the given (0-based) index in the list.</source>
          <target state="translated">リスト内の指定された(0ベースの)インデックスの要素を返します。</target>
        </trans-unit>
        <trans-unit id="a12aa5b6c1355eecf90b931c05fa6d696da596ce" translate="yes" xml:space="preserve">
          <source>Returns the element of &lt;code&gt;$list&lt;/code&gt; at &lt;a href=&quot;../values/lists#indexes&quot;&gt;index&lt;/a&gt;&lt;code&gt;$n&lt;/code&gt;.</source>
          <target state="translated">戻り値の要素 &lt;code&gt;$list&lt;/code&gt; の&lt;a href=&quot;../values/lists#indexes&quot;&gt;インデックス&lt;/a&gt; &lt;code&gt;$n&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c6084dcf14c02906372d609bce7a8bdb6cad0766" translate="yes" xml:space="preserve">
          <source>Returns the first &lt;a href=&quot;../values/strings#string-indexes&quot;&gt;index&lt;/a&gt; of &lt;code&gt;$substring&lt;/code&gt; in &lt;code&gt;$string&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;$string&lt;/code&gt; doesn&amp;rsquo;t contain &lt;code&gt;$substring&lt;/code&gt;.</source>
          <target state="translated">戻り値は、最初&lt;a href=&quot;../values/strings#string-indexes&quot;&gt;のインデックス&lt;/a&gt;の &lt;code&gt;$substring&lt;/code&gt; に &lt;code&gt;$string&lt;/code&gt; 、または &lt;code&gt;null&lt;/code&gt; の場合は &lt;code&gt;$string&lt;/code&gt; 含まれていません &lt;code&gt;$substring&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b934a9f264610fff88b26d4c9b93d2188230bcee" translate="yes" xml:space="preserve">
          <source>Returns the green channel of &lt;code&gt;$color&lt;/code&gt; as a number between 0 and 255.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; 緑のチャネルを0〜255の数値として返します。</target>
        </trans-unit>
        <trans-unit id="b53925e9fbb42def142fe0330b3f102d4ea3eadc" translate="yes" xml:space="preserve">
          <source>Returns the green channel of the color as an integer from 0 to 255.</source>
          <target state="translated">色の緑のチャンネルを 0 から 255 までの整数で返します。</target>
        </trans-unit>
        <trans-unit id="637627cc357ce99db5f9d4f43522fea396a41893" translate="yes" xml:space="preserve">
          <source>Returns the highest of one or more numbers.</source>
          <target state="translated">1つ以上の数値のうち、最も高い数値を返します。</target>
        </trans-unit>
        <trans-unit id="b714880704f4221e7c84d524db3b93d8c1914511" translate="yes" xml:space="preserve">
          <source>Returns the hue component of a color. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;the CSS3 HSL specification&lt;/a&gt;. Calculated from RGB where necessary via &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;this algorithm&lt;/a&gt;.</source>
          <target state="translated">色の色相コンポーネントを返します。&lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;CSS3 HSL仕様を&lt;/a&gt;参照してください。&lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;このアルゴリズム&lt;/a&gt;を介して、必要に応じてRGBから計算されます。</target>
        </trans-unit>
        <trans-unit id="0c6f24c55d46fbda2dbcac4c7fb4c63b6f2a96d4" translate="yes" xml:space="preserve">
          <source>Returns the hue of &lt;code&gt;$color&lt;/code&gt; as a number between &lt;code&gt;0deg&lt;/code&gt; and &lt;code&gt;360deg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; の色相を &lt;code&gt;0deg&lt;/code&gt; から &lt;code&gt;360deg&lt;/code&gt; までの数値として返します。</target>
        </trans-unit>
        <trans-unit id="6a86d40dc31663716b8dd230ca848ea8debb7627" translate="yes" xml:space="preserve">
          <source>Returns the index of the first occurrence of &lt;code&gt;$substring&lt;/code&gt; in &lt;code&gt;$string&lt;/code&gt;. If there is no such occurrence, returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$string&lt;/code&gt; 内で最初に出現する &lt;code&gt;$substring&lt;/code&gt; のインデックスを返します。そのような発生がない場合は、 &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b0f1c6f93d5d7d41e6d57ca82b7380bcf1c5f875" translate="yes" xml:space="preserve">
          <source>Returns the inverse (negative) of a color. The red, green, and blue values are inverted, while the opacity is left alone.</source>
          <target state="translated">色の逆(負)を返します。赤、緑、青の値は反転され、不透明度はそのままになります。</target>
        </trans-unit>
        <trans-unit id="bd690716c4a4140be5acd243c710dcc4bb56637a" translate="yes" xml:space="preserve">
          <source>Returns the inverse or &lt;a href=&quot;https://en.wikipedia.org/wiki/Negative_(photography)&quot;&gt;negative&lt;/a&gt; of &lt;code&gt;$color&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; 逆または&lt;a href=&quot;https://en.wikipedia.org/wiki/Negative_(photography)&quot;&gt;負&lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="ff6a7dd87898c815b9e29f8214afef311ee2101b" translate="yes" xml:space="preserve">
          <source>Returns the key in the key/value pair at the given (0-based) index in the map.</source>
          <target state="translated">マップ内の指定された(0 を基準とした)インデックスのキーと値のペアのキーを返します。</target>
        </trans-unit>
        <trans-unit id="d9169bbcb044591bf447c18062ef83cbf3620a1f" translate="yes" xml:space="preserve">
          <source>Returns the keywords passed to a mixin or function that takes &lt;a href=&quot;../at-rules/mixin#taking-arbitrary-arguments&quot;&gt;arbitrary arguments&lt;/a&gt;. The &lt;code&gt;$args&lt;/code&gt; argument must be an &lt;a href=&quot;../values/lists#argument-lists&quot;&gt;argument list&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../at-rules/mixin#taking-arbitrary-arguments&quot;&gt;任意の引数&lt;/a&gt;を取るミックスインまたは関数に渡されたキーワードを返します。 &lt;code&gt;$args&lt;/code&gt; 引数がなければなりません&lt;a href=&quot;../values/lists#argument-lists&quot;&gt;引数リスト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="733925db6e2ff87b4f177c099159873161eb9c27" translate="yes" xml:space="preserve">
          <source>Returns the length of &lt;code&gt;$list&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$list&lt;/code&gt; の長さを返します。</target>
        </trans-unit>
        <trans-unit id="866a84054beb8465535cfab0aaa1fcfc423fd75f" translate="yes" xml:space="preserve">
          <source>Returns the length of the &lt;em&gt;n&lt;/em&gt;-dimensional &lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_vector&quot;&gt;vector&lt;/a&gt; that has components equal to each &lt;code&gt;$number&lt;/code&gt;. For example, for three numbers &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, and &lt;em&gt;c&lt;/em&gt;, this returns the square root of &lt;em&gt;a&amp;sup2; + b&amp;sup2; + c&amp;sup2;&lt;/em&gt;.</source>
          <target state="translated">各 &lt;code&gt;$number&lt;/code&gt; 等しいコンポーネントを持つ&lt;em&gt;n&lt;/em&gt;次元&lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_vector&quot;&gt;ベクトルの&lt;/a&gt;長さを返します。たとえば、3つの数値&lt;em&gt;a&lt;/em&gt;、&lt;em&gt;b&lt;/em&gt;、および&lt;em&gt;cの&lt;/em&gt;場合、これは&lt;em&gt;a&amp;sup2;+b&amp;sup2;+c&amp;sup2;の&lt;/em&gt;平方根を返します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dda555fb62111de0a6fb209830d06dd85ab5571c" translate="yes" xml:space="preserve">
          <source>Returns the lightness component of a color. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;the CSS3 HSL specification&lt;/a&gt;. Calculated from RGB where necessary via &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;this algorithm&lt;/a&gt;.</source>
          <target state="translated">色の明度コンポーネントを返します。&lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;CSS3 HSL仕様を&lt;/a&gt;参照してください。&lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;このアルゴリズム&lt;/a&gt;を介して、必要に応じてRGBから計算されます。</target>
        </trans-unit>
        <trans-unit id="6ce506f9fdd9de2be99bce839024cd6d51ed9912" translate="yes" xml:space="preserve">
          <source>Returns the lowest of one or more numbers.</source>
          <target state="translated">1つ以上の数値のうち、最も低い数値を返します。</target>
        </trans-unit>
        <trans-unit id="a4c72c1f0ec9a89d8e1d0dd82e563fd74978d2df" translate="yes" xml:space="preserve">
          <source>Returns the map of named arguments passed to a function or mixin that takes a variable argument list. The argument names are strings, and they do not contain the leading &lt;code&gt;$&lt;/code&gt;.</source>
          <target state="translated">可変引数リストを取る関数またはミックスインに渡される名前付き引数のマップを返します。引数名は文字列であり、先頭に &lt;code&gt;$&lt;/code&gt; が含まれていません。</target>
        </trans-unit>
        <trans-unit id="f9042791358dd3eff5509186d46759b1f27e9a95" translate="yes" xml:space="preserve">
          <source>Returns the name of the separator used by &lt;code&gt;$list&lt;/code&gt;, either &lt;code&gt;space&lt;/code&gt; or &lt;code&gt;comma&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$list&lt;/code&gt; で使用される区切り文字の名前（ &lt;code&gt;space&lt;/code&gt; または &lt;code&gt;comma&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="d3ba9d6f63d0849882d5f1a33c39e21b9152e562" translate="yes" xml:space="preserve">
          <source>Returns the number of characters in &lt;code&gt;$string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$string&lt;/code&gt; 文字数を返します。</target>
        </trans-unit>
        <trans-unit id="e9d66a090772cb1ac29a4a909fc75131e66ec53a" translate="yes" xml:space="preserve">
          <source>Returns the number of characters in a string.</source>
          <target state="translated">文字列の文字数を返します。</target>
        </trans-unit>
        <trans-unit id="dc72d5b2c1136fe75f094ce06d69250ac6ba9b2b" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the list.</source>
          <target state="translated">リストの要素数を返します。</target>
        </trans-unit>
        <trans-unit id="79d40f0dec271e7c8bdd2623e057c540e17422af" translate="yes" xml:space="preserve">
          <source>Returns the number of key/value pairs in the map.</source>
          <target state="translated">マップ内のキーと値のペアの数を返します。</target>
        </trans-unit>
        <trans-unit id="51adfc85d1372e7351711e3637b7302b4685ad67" translate="yes" xml:space="preserve">
          <source>Returns the position of a value within a list. If the value isn't found, returns &lt;code&gt;null&lt;/code&gt; instead.</source>
          <target state="translated">リスト内の値の位置を返します。値が見つからない場合は、代わりに &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c3a7650066d93652567ae1b3ba371000626bd904" translate="yes" xml:space="preserve">
          <source>Returns the red channel of &lt;code&gt;$color&lt;/code&gt; as a number between 0 and 255.</source>
          <target state="translated">&lt;code&gt;$color&lt;/code&gt; 赤チャネルを0〜255の数値として返します。</target>
        </trans-unit>
        <trans-unit id="05824c8214f50acefd75c7369451c94d4559c1e4" translate="yes" xml:space="preserve">
          <source>Returns the red channel of the color as an integer from 0 to 255.</source>
          <target state="translated">色の赤チャンネルを 0 から 255 までの整数で返します。</target>
        </trans-unit>
        <trans-unit id="a6cdad8aaddc6f132e2bab59fdb694bb44740b3e" translate="yes" xml:space="preserve">
          <source>Returns the saturation component of a color. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;the CSS3 HSL specification&lt;/a&gt;. Calculated from RGB where necessary via &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;this algorithm&lt;/a&gt;.</source>
          <target state="translated">色の彩度成分を返します。&lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;CSS3 HSL仕様を&lt;/a&gt;参照してください。&lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV&quot;&gt;このアルゴリズム&lt;/a&gt;を介して、必要に応じてRGBから計算されます。</target>
        </trans-unit>
        <trans-unit id="4f998c8bd6e3f467c292b5f896cdc1bfbad1e118" translate="yes" xml:space="preserve">
          <source>Returns the separator of a list. If the list doesn't have a separator due to having fewer than two elements, returns &lt;code&gt;space&lt;/code&gt;.</source>
          <target state="translated">リストのセパレータを返します。要素が2つより少ないためにリストにセパレータがない場合は、 &lt;code&gt;space&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8a65e32f8c02df40961f91c148db4db09835cb3d" translate="yes" xml:space="preserve">
          <source>Returns the slice of &lt;code&gt;$string&lt;/code&gt; starting at &lt;a href=&quot;../values/strings#string-indexes&quot;&gt;index&lt;/a&gt;&lt;code&gt;$start-at&lt;/code&gt; and ending at index &lt;code&gt;$end-at&lt;/code&gt; (both inclusive).</source>
          <target state="translated">戻り値のスライス &lt;code&gt;$string&lt;/code&gt; から始まる&lt;a href=&quot;../values/strings#string-indexes&quot;&gt;インデックス&lt;/a&gt; &lt;code&gt;$start-at&lt;/code&gt; とインデックスで終わる &lt;code&gt;$end-at&lt;/code&gt; （両方を含みます）。</target>
        </trans-unit>
        <trans-unit id="6d8ce8ca6fbc77475cd2ce1a8bc0f94445877b40" translate="yes" xml:space="preserve">
          <source>Returns the type of &lt;code&gt;$value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$value&lt;/code&gt; のタイプを返します。</target>
        </trans-unit>
        <trans-unit id="e4dd2b713f992a8bd714d2b748a64683b9489dc1" translate="yes" xml:space="preserve">
          <source>Returns the type of a value.</source>
          <target state="translated">値の型を返します。</target>
        </trans-unit>
        <trans-unit id="52c8bae0dde8ae72c66d9780a9be60588342bc2f" translate="yes" xml:space="preserve">
          <source>Returns the unit(s) associated with a number. Complex units are sorted in alphabetical order by numerator and denominator.</source>
          <target state="translated">数値に関連付けられた単位を返します。複素数の単位は、分子と分母のアルファベット順に並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="7342bc67328744667620916e07e0fe0d8094ce2a" translate="yes" xml:space="preserve">
          <source>Returns the units of the number as a string. Complex units are returned in the same format that &lt;a href=&quot;#new-types-number-value-unit-39-39&quot;&gt;the constructor&lt;/a&gt; accepts them.</source>
          <target state="translated">数値の単位を文字列として返します。複雑なユニットは&lt;a href=&quot;#new-types-number-value-unit-39-39&quot;&gt;、コンストラクターが&lt;/a&gt;受け入れるのと同じ形式で返されます。</target>
        </trans-unit>
        <trans-unit id="01c83de52a2dca912d609d97b917f8b85561d97e" translate="yes" xml:space="preserve">
          <source>Returns the value in a map associated with the given key. If the map doesn't have such a key, returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">指定されたキーに関連付けられたマップの値を返します。マップにそのようなキーがない場合は、 &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b7dcd0fde1ea1271c2e4e394fc0e76520a8b73a1" translate="yes" xml:space="preserve">
          <source>Returns the value in the key/value pair at the given (0-based) index in the map.</source>
          <target state="translated">キーと値のペアの値を、マップ内の指定された(0 を基準とした)インデックスで返します。</target>
        </trans-unit>
        <trans-unit id="6ba96e8a2cacf3edcfdf78e551c810331039247f" translate="yes" xml:space="preserve">
          <source>Returns the value in the targeted map associated with the last key in &lt;code&gt;$keys&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$keys&lt;/code&gt; 最後のキーに関連付けられたターゲットマップの値を返します。</target>
        </trans-unit>
        <trans-unit id="b99b1d620bd47818bd025c5f2aec49ec31e3d15e" translate="yes" xml:space="preserve">
          <source>Returns the value of the number, ignoring units.</source>
          <target state="translated">単位を無視して、数値の値を返します。</target>
        </trans-unit>
        <trans-unit id="839fe7fa12d4083ad1ec2e51a91dcfad578997d6" translate="yes" xml:space="preserve">
          <source>Returns true if the targeted map contains a value associated with the last key in &lt;code&gt;$keys&lt;/code&gt;.</source>
          <target state="translated">ターゲットマップに &lt;code&gt;$keys&lt;/code&gt; 最後のキーに関連付けられた値が含まれている場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="fe7cddced15d06b3d5c223fb2136c8fade2dd322" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;$list&lt;/code&gt; has square brackets.</source>
          <target state="translated">&lt;code&gt;$list&lt;/code&gt; に角かっこがあるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="7d29acfc6bc8d53a72d17f8bcfcd995c9a16cd9b" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;$number1&lt;/code&gt; and &lt;code&gt;$number2&lt;/code&gt; have compatible units.</source>
          <target state="translated">かどうかを返します &lt;code&gt;$number1&lt;/code&gt; と &lt;code&gt;$number2&lt;/code&gt; 互換性の単位を持っています。</target>
        </trans-unit>
        <trans-unit id="16105bd9d6359d5c603aca235a69b56edbc68880" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;$number&lt;/code&gt; has no units.</source>
          <target state="translated">&lt;code&gt;$number&lt;/code&gt; に単位がないかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="6a53ebaa01a91a951006e99359c0e5fcf7bd6b1c" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;$super&lt;/code&gt; is a superselector of &lt;code&gt;$sub&lt;/code&gt;. This means that &lt;code&gt;$super&lt;/code&gt; matches all the elements that &lt;code&gt;$sub&lt;/code&gt; matches, as well as possibly additional elements. In general, simpler selectors tend to be superselectors of more complex oned.</source>
          <target state="translated">&lt;code&gt;$super&lt;/code&gt; が &lt;code&gt;$sub&lt;/code&gt; スーパーセレクターかどうかを返します。これは、 &lt;code&gt;$super&lt;/code&gt; が &lt;code&gt;$sub&lt;/code&gt; 一致するすべての要素と、場合によっては追加の要素と一致することを意味します。一般に、よりシンプルなセレクターは、より複雑なスーパーセレクターになる傾向があります。</target>
        </trans-unit>
        <trans-unit id="c5a461f81dc964c8ffe655fbe4cf442722eaefef" translate="yes" xml:space="preserve">
          <source>Returns whether a &lt;a href=&quot;../at-rules/mixin&quot;&gt;mixin&lt;/a&gt; named &lt;code&gt;$name&lt;/code&gt; exists.</source>
          <target state="translated">かどうかを返し&lt;a href=&quot;../at-rules/mixin&quot;&gt;ミックスイン&lt;/a&gt;という名前の &lt;code&gt;$name&lt;/code&gt; 存在します。</target>
        </trans-unit>
        <trans-unit id="b08538c9fc216ee1a181b365f5fae070a1be06c8" translate="yes" xml:space="preserve">
          <source>Returns whether a &lt;a href=&quot;../variables#scope&quot;&gt;global variable&lt;/a&gt; named &lt;code&gt;$name&lt;/code&gt; (without the &lt;code&gt;$&lt;/code&gt;) exists.</source>
          <target state="translated">かどうかを返し&lt;a href=&quot;../variables#scope&quot;&gt;グローバル変数&lt;/a&gt;の名前 &lt;code&gt;$name&lt;/code&gt; （なし &lt;code&gt;$&lt;/code&gt; が）存在します。</target>
        </trans-unit>
        <trans-unit id="002cc08698af3245841b56580f4802889b222e9b" translate="yes" xml:space="preserve">
          <source>Returns whether a feature exists in the current Sass runtime.</source>
          <target state="translated">現在のSassランタイムに機能が存在するかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="f392e55228a2fdd8a56fd4308ff7cf31d1eb488e" translate="yes" xml:space="preserve">
          <source>Returns whether a function named &lt;code&gt;$name&lt;/code&gt; is defined, either as a built-in function or a user-defined function.</source>
          <target state="translated">&lt;code&gt;$name&lt;/code&gt; 関数が、組み込み関数として定義されているか、ユーザー定義関数として定義されているかを返します。</target>
        </trans-unit>
        <trans-unit id="9e1c1081c33d4ac1921a8fcefbe4187e66d4fcc4" translate="yes" xml:space="preserve">
          <source>Returns whether a list uses square brackets.</source>
          <target state="translated">リストが角括弧を使用するかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="b00d68d5169484005d39afdd83116fbb95e55a30" translate="yes" xml:space="preserve">
          <source>Returns whether a map has a value associated with a given key.</source>
          <target state="translated">マップが、指定されたキーに関連付けられた値を持っているかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="ede60bc210641adae890fb0f1eb3bd4419854021" translate="yes" xml:space="preserve">
          <source>Returns whether a number has units.</source>
          <target state="translated">数値に単位があるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="4a00004e2b1935c2c2bb553d7222c71479652921" translate="yes" xml:space="preserve">
          <source>Returns whether a variable named &lt;code&gt;$name&lt;/code&gt; (without the &lt;code&gt;$&lt;/code&gt;) exists in the current &lt;a href=&quot;../variables#scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$name&lt;/code&gt; 変数（ &lt;code&gt;$&lt;/code&gt; なし）が現在の&lt;a href=&quot;../variables#scope&quot;&gt;スコープに&lt;/a&gt;存在するかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="e7d91f0199ba497c7b277def80c45a510f116eb5" translate="yes" xml:space="preserve">
          <source>Returns whether the current Sass implementation supports &lt;code&gt;$feature&lt;/code&gt;.</source>
          <target state="translated">現在のSass実装が &lt;code&gt;$feature&lt;/code&gt; サポートしているかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="6f11efcfe4fdc93eb0599f90fd09d155adadc82d" translate="yes" xml:space="preserve">
          <source>Returns whether the current mixin was passed a &lt;a href=&quot;../at-rules/mixin#content-blocks&quot;&gt;&lt;code&gt;@content&lt;/code&gt; block&lt;/a&gt;.</source>
          <target state="translated">現在のミックスインに&lt;a href=&quot;../at-rules/mixin#content-blocks&quot;&gt; &lt;code&gt;@content&lt;/code&gt; ブロック&lt;/a&gt;が渡されたかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="ab4234ef8368f2204ca85546406db77877de7567" translate="yes" xml:space="preserve">
          <source>Returns whether the selector &lt;code&gt;$super&lt;/code&gt; matches all the elements that the selector &lt;code&gt;$sub&lt;/code&gt; matches.</source>
          <target state="translated">セレクター &lt;code&gt;$super&lt;/code&gt; がセレクター &lt;code&gt;$sub&lt;/code&gt; 一致するすべての要素と一致するかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="513e5d1980899cec88f10b5fa101612d18128fb5" translate="yes" xml:space="preserve">
          <source>Returns whether two numbers can added, subtracted, or compared.</source>
          <target state="translated">2つの数値が足し算、引き算、または比較できるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="468c97f783f63508d1c9aa234bf9b14d8b85daa7" translate="yes" xml:space="preserve">
          <source>Rounds &lt;code&gt;$number&lt;/code&gt; down to the next lowest whole number.</source>
          <target state="translated">ラウンド &lt;code&gt;$number&lt;/code&gt; 次に低い整数にダウン。</target>
        </trans-unit>
        <trans-unit id="b3b88df508b4bd76b987a32f554d7fe62a550de7" translate="yes" xml:space="preserve">
          <source>Rounds &lt;code&gt;$number&lt;/code&gt; to the nearest whole number.</source>
          <target state="translated">四捨五入 &lt;code&gt;$number&lt;/code&gt; 最も近い整数にします。</target>
        </trans-unit>
        <trans-unit id="27f2ccfb483d701c47177c4c8dc3ce3be55a77f8" translate="yes" xml:space="preserve">
          <source>Rounds &lt;code&gt;$number&lt;/code&gt; up to the next highest whole number.</source>
          <target state="translated">ラウンド &lt;code&gt;$number&lt;/code&gt; 次に高い整数まで。</target>
        </trans-unit>
        <trans-unit id="ceac41cf1a3ce44c31141786b8378b18726d6760" translate="yes" xml:space="preserve">
          <source>Rounds a number down to the previous whole number.</source>
          <target state="translated">前の整数に丸めます。</target>
        </trans-unit>
        <trans-unit id="76c0fc06f4f913113e6238495ff0b6e9310e1e71" translate="yes" xml:space="preserve">
          <source>Rounds a number to the nearest whole number.</source>
          <target state="translated">数値を最小の整数に丸めます。</target>
        </trans-unit>
        <trans-unit id="ec103be4593a89ce5a25e929fcd41f443602c66e" translate="yes" xml:space="preserve">
          <source>Rounds a number up to the next whole number.</source>
          <target state="translated">数字を次の整数まで丸めます。</target>
        </trans-unit>
        <trans-unit id="d109063cf01f9c37fecefd29123037ad01772828" translate="yes" xml:space="preserve">
          <source>Ruby Sass</source>
          <target state="translated">ルビーサッス</target>
        </trans-unit>
        <trans-unit id="f277e1a9f789f12942dd174d6519f1cab0e2c4de" translate="yes" xml:space="preserve">
          <source>Ruby Sass Command-Line Interface</source>
          <target state="translated">Ruby Sass コマンドラインインタフェース</target>
        </trans-unit>
        <trans-unit id="0e5024456419e499b005f0de7645e6e670bd9ae6" translate="yes" xml:space="preserve">
          <source>SCSS</source>
          <target state="translated">SCSS</target>
        </trans-unit>
        <trans-unit id="abfed73ccc2166edcf9c63923b94efcd1a7b8d04" translate="yes" xml:space="preserve">
          <source>SCSS looks like this:</source>
          <target state="translated">SCSSはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="b6eeeb3abd2a7bc179a6b6d5c56488b5f8c903a7" translate="yes" xml:space="preserve">
          <source>Sass</source>
          <target state="translated">Sass</target>
        </trans-unit>
        <trans-unit id="10f303be29e42d399e1affaea1a02b6e87b23864" translate="yes" xml:space="preserve">
          <source>Sass (Syntactically Awesome StyleSheets)</source>
          <target state="translated">Sass (Syntactically Awesome StyleSheets)</target>
        </trans-unit>
        <trans-unit id="341d3556acd434f0488bd651ce9f2aa58ae8059e" translate="yes" xml:space="preserve">
          <source>Sass Functions</source>
          <target state="translated">Sass の機能</target>
        </trans-unit>
        <trans-unit id="3b3252d26bb63e6d23bdbd217a16bb9101e80665" translate="yes" xml:space="preserve">
          <source>Sass allows &lt;em&gt;any text&lt;/em&gt; in these function calls, including nested parentheses. Nothing is interpreted as a SassScript expression, with the exception that &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt; can be used to inject dynamic values.</source>
          <target state="translated">Sassは、ネストされた括弧を含め、これらの関数呼び出しで&lt;em&gt;すべてのテキスト&lt;/em&gt;を許可&lt;em&gt;します&lt;/em&gt;。&lt;a href=&quot;../interpolation&quot;&gt;補間&lt;/a&gt;を使用して動的な値を挿入できることを除いて、SassScript式として解釈されるものはありません。</target>
        </trans-unit>
        <trans-unit id="12104abfe0a714244e52948eb45c8539279c98f2" translate="yes" xml:space="preserve">
          <source>Sass allows CSS rules to be nested within one another. The inner rule then only applies within the outer rule's selector. For example:</source>
          <target state="translated">Sass では、CSS のルールを互いに入れ子にすることができます。その場合、内側のルールは外側のルールのセレクタ内でのみ適用されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="4c4356380b68b4f78ea663bc4f71a4efe353604b" translate="yes" xml:space="preserve">
          <source>Sass allows you to choose between four different output styles by setting the &lt;a href=&quot;#style-option&quot;&gt;&lt;code&gt;:style&lt;/code&gt; option&lt;/a&gt; or using the &lt;code&gt;--style&lt;/code&gt; command-line flag.</source>
          <target state="translated">Sassでは、&lt;a href=&quot;#style-option&quot;&gt; &lt;code&gt;:style&lt;/code&gt; オプションを&lt;/a&gt;設定するか、 &lt;code&gt;--style&lt;/code&gt; コマンドラインフラグを使用して、4つの異なる出力スタイルから選択できます。</target>
        </trans-unit>
        <trans-unit id="bea2380d4aa23d0747a343c92acdacbbb84e0d8d" translate="yes" xml:space="preserve">
          <source>Sass also has some special behavior for &lt;a href=&quot;at-rules/css&quot;&gt;plain CSS at-rules&lt;/a&gt;: they can contain &lt;a href=&quot;interpolation&quot;&gt;interpolation&lt;/a&gt;, and they can be nested in style rules. Some of them, like &lt;a href=&quot;at-rules/css#media&quot;&gt;&lt;code&gt;@media&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;at-rules/css#supports&quot;&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/a&gt;, also allow SassScript to be used directly in the rule itself without interpolation.</source>
          <target state="translated">Sassには、&lt;a href=&quot;at-rules/css&quot;&gt;プレーンなCSS atルール&lt;/a&gt;に対していくつかの特別な動作もあります。&lt;a href=&quot;interpolation&quot;&gt;補間&lt;/a&gt;を含めることができ、スタイルルールにネストすることができます。&lt;a href=&quot;at-rules/css#media&quot;&gt; &lt;code&gt;@media&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;at-rules/css#supports&quot;&gt; &lt;code&gt;@supports&lt;/code&gt; &lt;/a&gt;などの一部では、補間せずにSassScriptをルール自体で直接使用することもできます。</target>
        </trans-unit>
        <trans-unit id="1fcecb417df186591f20e0217f21fc1287957cb4" translate="yes" xml:space="preserve">
          <source>Sass caches parsed documents so that they can be reused without parsing them again unless they have changed. By default, Sass will write these cache files to a location on the filesystem indicated by &lt;a href=&quot;#cache_location-option&quot;&gt;&lt;code&gt;:cache_location&lt;/code&gt;&lt;/a&gt;. If you cannot write to the filesystem or need to share cache across ruby processes or machines, then you can define your own cache store and set the&lt;a href=&quot;#cache_store-option&quot;&gt;&lt;code&gt;:cache_store&lt;/code&gt; option&lt;/a&gt;. For details on creating your own cache store, please see the &lt;a href=&quot;http://sass-lang.com/documentation/Sass/CacheStores/Base.html&quot;&gt;source documentation&lt;/a&gt;.</source>
          <target state="translated">Sassは解析されたドキュメントをキャッシュに保存するため、変更されない限り、再度解析することなく再利用できます。デフォルトでは、Sassはこれらのキャッシュファイルを&lt;a href=&quot;#cache_location-option&quot;&gt; &lt;code&gt;:cache_location&lt;/code&gt; で&lt;/a&gt;指定されたファイルシステム上の場所に書き込みます。ファイルシステムに書き込むことができない場合、またはrubyプロセスまたはマシン間でキャッシュを共有する必要がある場合は、独自のキャッシュストアを定義して、&lt;a href=&quot;#cache_store-option&quot;&gt; &lt;code&gt;:cache_store&lt;/code&gt; オプション&lt;/a&gt;を設定できます。独自のキャッシュストアの作成の詳細については、&lt;a href=&quot;http://sass-lang.com/documentation/Sass/CacheStores/Base.html&quot;&gt;ソースドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="bfd8d49434b5dc18b7647e61d36eb01f1ddf972c" translate="yes" xml:space="preserve">
          <source>Sass can be used in three ways: as a command-line tool, as a standalone Ruby module, and as a plugin for any Rack-enabled framework, including Ruby on Rails and Merb. The first step for all of these is to install the Sass gem:</source>
          <target state="translated">Sassは、コマンドラインツールとして、スタンドアロンのRubyモジュールとして、そしてRuby on RailsやMerbを含むあらゆるRack対応フレームワークのプラグインとして、3つの方法で使用することができます。いずれも最初のステップはSass gemをインストールすることです。</target>
        </trans-unit>
        <trans-unit id="d2d315da5236e9452c305d3574bf77c578942e42" translate="yes" xml:space="preserve">
          <source>Sass defines syntax for a number of operations:</source>
          <target state="translated">Sassは多くの操作のための構文を定義しています。</target>
        </trans-unit>
        <trans-unit id="92dff0f242d6fcdad22301185abdc13bbad14028" translate="yes" xml:space="preserve">
          <source>Sass doesn&amp;rsquo;t distinguish between whole numbers and decimals, so for example &lt;code&gt;5
/ 2&lt;/code&gt; returns &lt;code&gt;2.5&lt;/code&gt; rather than &lt;code&gt;2&lt;/code&gt;. This is the same behavior as JavaScript, but different than many other programming languages.</source>
          <target state="translated">サスので、例えば、整数及び小数を区別しない &lt;code&gt;5 / 2&lt;/code&gt; 戻る &lt;code&gt;2.5&lt;/code&gt; よりもむしろ &lt;code&gt;2&lt;/code&gt; 。これはJavaScriptと同じ動作ですが、他の多くのプログラミング言語とは異なります。</target>
        </trans-unit>
        <trans-unit id="337bc0dd2cba2d8a74fcc3d911ca1ad24d782a82" translate="yes" xml:space="preserve">
          <source>Sass extends CSS's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; with the ability to import Sass and CSS stylesheets, providing access to &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt;, and &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt; and combining multiple stylesheets' CSS together. Unlike plain CSS imports, which require the browser to make multiple HTTP requests as it renders your page, Sass imports are handled entirely during compilation.</source>
          <target state="translated">Sassは、CSSの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@import&quot;&gt; &lt;code&gt;@import&lt;/code&gt; ルール&lt;/a&gt;を拡張して、SassおよびCSSスタイルシートをインポートし、&lt;a href=&quot;mixin&quot;&gt;ミックスイン&lt;/a&gt;、&lt;a href=&quot;function&quot;&gt;関数&lt;/a&gt;、および&lt;a href=&quot;../variables&quot;&gt;変数&lt;/a&gt;へのアクセスを提供し、複数のスタイルシートのCSSを組み合わせます。ブラウザがページをレンダリングするときに複数のHTTPリクエストを行う必要があるプレーンなCSSインポートとは異なり、Sassインポートはコンパイル中に完全に処理されます。</target>
        </trans-unit>
        <trans-unit id="9785c4245593a2393e5e7772e6bebb5a19179df5" translate="yes" xml:space="preserve">
          <source>Sass extends the CSS &lt;code&gt;@import&lt;/code&gt; rule to allow it to import SCSS and Sass files. All imported SCSS and Sass files will be merged together into a single CSS output file. In addition, any variables or &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt; defined in imported files can be used in the main file.</source>
          <target state="translated">SassはCSS &lt;code&gt;@import&lt;/code&gt; ルールを拡張して、SCSSおよびSassファイルをインポートできるようにします。インポートされたすべてのSCSSファイルとSassファイルは、1つのCSS出力ファイルにマージされます。さらに、インポートされたファイルで定義された変数または&lt;a href=&quot;#mixins&quot;&gt;ミックスイン&lt;/a&gt;は、メインファイルで使用できます。</target>
        </trans-unit>
        <trans-unit id="5f61b7c2b219adb088c062ff92b89a8fd236d7b6" translate="yes" xml:space="preserve">
          <source>Sass functions can also be called using explicit keyword arguments. The above example can also be written as:</source>
          <target state="translated">Sass関数は、明示的なキーワード引数を使って呼び出すこともできます。上記の例では、次のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="ff550501230dff58e1d23dbb2ecaaabad4f2a87d" translate="yes" xml:space="preserve">
          <source>Sass has a number of &lt;a href=&quot;../modules/string&quot;&gt;string functions&lt;/a&gt; that take or return numbers, called &lt;em&gt;indexes&lt;/em&gt;, that refer to the characters in a string. The index 1 indicates the first character of the string. Note that this is different than many programming languages where indexes start at 0! Sass also makes it easy to refer to the end of a string. The index -1 refers to the last character in a string, -2 refers to the second-to-last, and so on.</source>
          <target state="translated">Sassには、&lt;a href=&quot;../modules/string&quot;&gt;文字列内の文字&lt;/a&gt;を参照する&lt;em&gt;インデックス&lt;/em&gt;と呼ばれる数値を取得または返す文字列関数がいくつかあります。インデックス1は、文字列の最初の文字を示します。これは、インデックスが0から始まる多くのプログラミング言語とは異なることに注意してください。Sassを使用すると、文字列の終わりを簡単に参照できます。インデックス-1は文字列の最後の文字を示し、-2は最後から2番目の文字を示します。</target>
        </trans-unit>
        <trans-unit id="8f30d9a097206202b2e27bc2923ae98f1086693c" translate="yes" xml:space="preserve">
          <source>Sass has a pretty standard &lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations#Programming_languages&quot;&gt;order of operations&lt;/a&gt;, from tightest to loosest:</source>
          <target state="translated">Sassには、最も厳しいものから最も緩いものまで、かなり標準的な&lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations#Programming_languages&quot;&gt;操作の順序があります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="11f0a2ddd6b73783822a7ce23cfd75f0585a6384" translate="yes" xml:space="preserve">
          <source>Sass has a special kind of selector known as a &amp;ldquo;placeholder&amp;rdquo;. It looks and acts a lot like a class selector, but it starts with a &lt;code&gt;%&lt;/code&gt; and it's not included in the CSS output. In fact, any complex selector (the ones between the commas) that even &lt;em&gt;contains&lt;/em&gt; a placeholder selector isn't included in the CSS, nor is any style rule whose selectors all contain placeholders,</source>
          <target state="translated">Sassには、「プレースホルダー」と呼ばれる特別な種類のセレクターがあります。見た目も動作もクラスセレクターによく似ていますが、 &lt;code&gt;%&lt;/code&gt; で始まり、CSS出力には含まれていません。実際、プレースホルダーセレクターを&lt;em&gt;含む&lt;/em&gt;複雑なセレクター（コンマの間にあるもの）はCSSに含まれていません。また、セレクターがすべてプレースホルダーを含むスタイルルールも含まれていません。</target>
        </trans-unit>
        <trans-unit id="ce2b28d788b61de8fde6c17d043022ab46d4d693" translate="yes" xml:space="preserve">
          <source>Sass has built-in support for color values. Just like CSS colors, they represent points in the &lt;a href=&quot;https://en.wikipedia.org/wiki/SRGB&quot;&gt;sRGB color space&lt;/a&gt;, although many Sass &lt;a href=&quot;../modules/color&quot;&gt;color functions&lt;/a&gt; operate using &lt;a href=&quot;https://en.wikipedia.org/wiki/HSL_and_HSV&quot;&gt;HSL coordinates&lt;/a&gt; (which are just another way of expressing sRGB colors). Sass colors can be written as hex codes (&lt;code&gt;#f2ece4&lt;/code&gt; or &lt;code&gt;#b37399aa&lt;/code&gt;), &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords&quot;&gt;CSS color names&lt;/a&gt; (&lt;code&gt;midnightblue&lt;/code&gt;, &lt;code&gt;transparent&lt;/code&gt;), or the functions &lt;a href=&quot;../modules#rgb&quot;&gt;&lt;code&gt;rgb()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../modules#rgba&quot;&gt;&lt;code&gt;rgba()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../modules#hsl&quot;&gt;&lt;code&gt;hsl()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../modules#hsla&quot;&gt;&lt;code&gt;hsla()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Sassには、色の値のサポートが組み込まれています。 CSSカラーと同様に、これらは&lt;a href=&quot;https://en.wikipedia.org/wiki/SRGB&quot;&gt;sRGB色空間&lt;/a&gt;内のポイントを表しますが、多くのSass&lt;a href=&quot;../modules/color&quot;&gt;カラー関数&lt;/a&gt;は&lt;a href=&quot;https://en.wikipedia.org/wiki/HSL_and_HSV&quot;&gt;HSL座標&lt;/a&gt;（sRGBカラーを表現する別の方法）を使用して動作します。 Sassカラーは、16進コード（ &lt;code&gt;#f2ece4&lt;/code&gt; または &lt;code&gt;#b37399aa&lt;/code&gt; ）、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords&quot;&gt;CSSカラー名&lt;/a&gt;（ &lt;code&gt;midnightblue&lt;/code&gt; 、 &lt;code&gt;transparent&lt;/code&gt; ）、または関数&lt;a href=&quot;../modules#rgb&quot;&gt; &lt;code&gt;rgb()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../modules#rgba&quot;&gt; &lt;code&gt;rgba()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../modules#hsl&quot;&gt; &lt;code&gt;hsl()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../modules#hsla&quot;&gt; &lt;code&gt;hsla()&lt;/code&gt; として記述でき&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="0cc09a0fb175527dc21d3ed9c5a3f39cbe698f37" translate="yes" xml:space="preserve">
          <source>Sass has powerful &lt;a href=&quot;values/numbers#units&quot;&gt;unit arithmetic&lt;/a&gt; that you can use instead. For example, instead of writing &lt;code&gt;#{$width}px&lt;/code&gt;, write &lt;code&gt;$width * 1px&lt;/code&gt;&amp;mdash;or better yet, declare the &lt;code&gt;$width&lt;/code&gt; variable in terms of &lt;code&gt;px&lt;/code&gt; to begin with. That way if &lt;code&gt;$width&lt;/code&gt; already has units, you&amp;rsquo;ll get a nice error message instead of compiling bogus CSS.</source>
          <target state="translated">Sassには、代わりに使用できる強力な&lt;a href=&quot;values/numbers#units&quot;&gt;単位演算&lt;/a&gt;があります。たとえば、 &lt;code&gt;#{$width}px&lt;/code&gt; と書く代わりに、 &lt;code&gt;$width * 1px&lt;/code&gt; と書くか、さらに良いことに、最初に &lt;code&gt;px&lt;/code&gt; に関して &lt;code&gt;$width&lt;/code&gt; 変数を宣言します。そうすれば、 &lt;code&gt;$width&lt;/code&gt; すでに単位がある場合、偽のCSSをコンパイルする代わりに、すばらしいエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="3b0401d0f31b23c64c98d17c0dd08346bbdbb842" translate="yes" xml:space="preserve">
          <source>Sass has powerful support for manipulating units based on how &lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_of_measurement#Calculations_with_units_of_measurement&quot;&gt;real-world unit calculations&lt;/a&gt; work. When two numbers are multiplied, their units are multiplied as well. When one number is divided by another, the result takes its numerator units from the first number and its denominator units from the second. A number can have any number of units in the numerator and/or denominator.</source>
          <target state="translated">Sassは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_of_measurement#Calculations_with_units_of_measurement&quot;&gt;実際の単位計算の&lt;/a&gt;仕組みに基づいて単位を操作するための強力なサポートを備えています。2つの数値を乗算すると、それらの単位も乗算されます。ある数値を別の数値で割ると、結果は最初の数値から分子単位を取り、2番目の数値から分母単位を取ります。数値には、分子や分母に任意の数の単位を含めることができます。</target>
        </trans-unit>
        <trans-unit id="cfa9fc50eb1a1d181640003689cbe25d33fc0977" translate="yes" xml:space="preserve">
          <source>Sass importers are in charge of taking paths passed to &lt;code&gt;@import&lt;/code&gt; and finding the appropriate Sass code for those paths. By default, this code is loaded from the &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Importers/Filesystem.html&quot;&gt;filesystem&lt;/a&gt;, but importers could be added to load from a database, over HTTP, or use a different file naming scheme than what Sass expects.</source>
          <target state="translated">Sassインポーターは、 &lt;code&gt;@import&lt;/code&gt; 渡されたパスを取得し、それらのパスに適切なSassコードを見つける責任があります。デフォルトでは、このコードは&lt;a href=&quot;http://sass-lang.com/documentation/Sass/Importers/Filesystem.html&quot;&gt;ファイルシステム&lt;/a&gt;から読み込まれますが、インポーターを追加して、HTTPを介してデータベースから読み込むか、Sassが期待するものとは異なるファイル命名スキームを使用できます。</target>
        </trans-unit>
        <trans-unit id="c23b0c647f0aa1cdb3a101c61a06d56093b805e0" translate="yes" xml:space="preserve">
          <source>Sass imports have the same syntax as CSS imports, except that they allow multiple imports to be separated by commas rather than requiring each one to have its own &lt;code&gt;@import&lt;/code&gt;. Also, in the &lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt;, imported URLs aren&amp;rsquo;t required to have quotes.</source>
          <target state="translated">Sassインポートの構文はCSSインポートと同じですが、複数のインポートをコンマで区切ることができ、それぞれに独自の &lt;code&gt;@import&lt;/code&gt; が必要になる点が異なります。また、&lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;インデントされた構文では&lt;/a&gt;、インポートされたURLに引用符を付ける必要はありません。</target>
        </trans-unit>
        <trans-unit id="71828edc965d80bf34fc48b3e8c5143a963e50da" translate="yes" xml:space="preserve">
          <source>Sass is a stylesheet language that&amp;rsquo;s compiled to CSS. It allows you to use &lt;a href=&quot;variables&quot;&gt;variables&lt;/a&gt;, &lt;a href=&quot;style-rules#nesting&quot;&gt;nested rules&lt;/a&gt;, &lt;a href=&quot;at-rules/mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;modules&quot;&gt;functions&lt;/a&gt;, and more, all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well-organized and makes it easy to share design within and across projects.</source>
          <target state="translated">Sassは、CSSにコンパイルされたスタイルシート言語です。それはあなたが使用することができます&lt;a href=&quot;variables&quot;&gt;変数&lt;/a&gt;、&lt;a href=&quot;style-rules#nesting&quot;&gt;ネストされたルール&lt;/a&gt;、&lt;a href=&quot;at-rules/mixin&quot;&gt;ミックスイン&lt;/a&gt;、&lt;a href=&quot;modules&quot;&gt;機能&lt;/a&gt;、およびより、完全にCSS互換構文ですべてを。Sassは、大きなスタイルシートを適切に整理し、プロジェクト内およびプロジェクト間でデザインを簡単に共有できるようにします。</target>
        </trans-unit>
        <trans-unit id="55fbe07c7def3c112a3dd15dcf43d50ee3a3c5a8" translate="yes" xml:space="preserve">
          <source>Sass is an extension of CSS that adds power and elegance to the basic language. It allows you to use &lt;a href=&quot;#variables_&quot;&gt;variables&lt;/a&gt;, &lt;a href=&quot;#nested_rules&quot;&gt;nested rules&lt;/a&gt;, &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;#import&quot;&gt;inline imports&lt;/a&gt;, and more, all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well-organized, and get small stylesheets up and running quickly, particularly with the help of &lt;a href=&quot;http://compass-style.org&quot;&gt;the Compass style library&lt;/a&gt;.</source>
          <target state="translated">SassはCSSを拡張したもので、基本言語に力と優雅さを追加します。それはあなたが使用することができます&lt;a href=&quot;#variables_&quot;&gt;変数&lt;/a&gt;、&lt;a href=&quot;#nested_rules&quot;&gt;ネストされたルール&lt;/a&gt;、&lt;a href=&quot;#mixins&quot;&gt;ミックスイン&lt;/a&gt;、&lt;a href=&quot;#import&quot;&gt;インライン輸入&lt;/a&gt;、およびより、完全にCSS互換構文ですべてを。Sassは、特に&lt;a href=&quot;http://compass-style.org&quot;&gt;Compassスタイルライブラリの&lt;/a&gt;助けを借りて、大きなスタイルシートを適切に整理し、小さなスタイルシートをすばやく実行できるようにします。</target>
        </trans-unit>
        <trans-unit id="ddcdbf1cd9ff7a1977259d98743c6fafd982298a" translate="yes" xml:space="preserve">
          <source>Sass libraries and design systems tend to share and override configurations that are represented as nested maps (maps that contain maps that contain maps).</source>
          <target state="translated">Sassのライブラリやデザインシステムは、ネストされたマップ(マップを含むマップを含むマップ)として表現される構成を共有したり、上書きしたりする傾向があります。</target>
        </trans-unit>
        <trans-unit id="f326907522a69fe4d59a051e191ed4e4cf75ebdf" translate="yes" xml:space="preserve">
          <source>Sass lists can contain one or even zero elements. A single-element list can be written either &lt;code&gt;(&amp;lt;expression&amp;gt;,)&lt;/code&gt; or &lt;code&gt;[&amp;lt;expression&amp;gt;]&lt;/code&gt;, and a zero-element list can be written either &lt;code&gt;()&lt;/code&gt; or &lt;code&gt;[]&lt;/code&gt;. Also, all &lt;a href=&quot;../modules/list&quot;&gt;list functions&lt;/a&gt; will treat individual values that aren&amp;rsquo;t in lists as though they&amp;rsquo;re lists containing that value, which means you rarely need to explicitly create single-element lists.</source>
          <target state="translated">Sassリストには、1つまたは0の要素を含めることができます。単一要素リストは &lt;code&gt;(&amp;lt;expression&amp;gt;,)&lt;/code&gt; または &lt;code&gt;[&amp;lt;expression&amp;gt;]&lt;/code&gt; いずれかで記述でき、ゼロ要素リストは &lt;code&gt;()&lt;/code&gt; または &lt;code&gt;[]&lt;/code&gt; のいずれかで記述できます。また、すべての&lt;a href=&quot;../modules/list&quot;&gt;リスト関数&lt;/a&gt;は、リストにない個々の値を、その値を含むリストであるかのように扱います。つまり、単一要素のリストを明示的に作成する必要はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="6a69154c2b4acc4e55d312e10bb9b932ccfca243" translate="yes" xml:space="preserve">
          <source>Sass looks for other Sass files in the current directory, and the Sass file directory under Rack, Rails, or Merb. Additional search directories may be specified using the &lt;a href=&quot;#load_paths-option&quot;&gt;&lt;code&gt;:load_paths&lt;/code&gt;&lt;/a&gt; option, or the &lt;code&gt;--load-path&lt;/code&gt; option on the command line.</source>
          <target state="translated">Sassは、現在のディレクトリ、およびRack、Rails、またはMerbの下のSassファイルディレクトリで他のSassファイルを検索します。コマンドラインで&lt;a href=&quot;#load_paths-option&quot;&gt; &lt;code&gt;:load_paths&lt;/code&gt; &lt;/a&gt;オプションまたは &lt;code&gt;--load-path&lt;/code&gt; オプションを使用して、追加の検索ディレクトリを指定できます。</target>
        </trans-unit>
        <trans-unit id="cb312b8bd38832476537b6a48f7e3156e89b7ab3" translate="yes" xml:space="preserve">
          <source>Sass makes this easy with the &lt;code&gt;@error&lt;/code&gt; rule, which is written &lt;code&gt;@error &amp;lt;expression&amp;gt;&lt;/code&gt;. It prints the value of the &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; (usually a string) along with a stack trace indicating how the current mixin or function was called. Once the error is printed, Sass stops compiling the stylesheet and tells whatever system is running it that an error occurred.</source>
          <target state="translated">Sassは、 &lt;code&gt;@error&lt;/code&gt; &lt;code&gt;@error &amp;lt;expression&amp;gt;&lt;/code&gt; と記述された@errorルールを使用してこれを簡単にします。&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;式&lt;/a&gt;の値（通常は文字列）を、現在のミックスインまたは関数がどのように呼び出されたかを示すスタックトレースとともに出力します。エラーが出力されると、Sassはスタイルシートのコンパイルを停止し、実行中のシステムにエラーが発生したことを通知します。</target>
        </trans-unit>
        <trans-unit id="f3c25609caf02ddbba8fecd7b0288531ed8f4254" translate="yes" xml:space="preserve">
          <source>Sass numbers support the same formats as CSS numbers, including &lt;a href=&quot;https://en.wikipedia.org/wiki/Scientific_notation&quot;&gt;scientific notation&lt;/a&gt;, which is written with an &lt;code&gt;e&lt;/code&gt; between the number and its power of 10. Because support for scientific notation in browsers has historically been spotty, Sass always compiles it to fully expanded numbers.</source>
          <target state="translated">サス番号を含むCSS番号、同じフォーマットをサポートして&lt;a href=&quot;https://en.wikipedia.org/wiki/Scientific_notation&quot;&gt;科学表記法&lt;/a&gt;で書かれている、 &lt;code&gt;e&lt;/code&gt; のブラウザで科学的表記法のサポートは歴史的にむらされているため、数と10のそのパワーとの間に、サスは、常に完全に拡張された番号にそれをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="0642b9446f0b3a3e84ed89b56af8007af3e74738" translate="yes" xml:space="preserve">
          <source>Sass numbers support up to 10 digits of precision after the decimal point. This means a few different things:</source>
          <target state="translated">Sass数は小数点以下の10桁までの精度をサポートしています。これはいくつかの異なる意味を持っています。</target>
        </trans-unit>
        <trans-unit id="f686501493359aaeb6e8334dfbf749c38492e851" translate="yes" xml:space="preserve">
          <source>Sass only parses selectors &lt;em&gt;after&lt;/em&gt; interpolation is resolved. This means you can safely use interpolation to generate any part of the selector without worrying that it won&amp;rsquo;t parse.</source>
          <target state="translated">Sassは&lt;em&gt;、&lt;/em&gt;補間が解決された&lt;em&gt;後に&lt;/em&gt;のみセレクター&lt;em&gt;を&lt;/em&gt;解析します。これは、補間を安全に使用して、解析されないことを心配せずにセレクターの任意の部分を生成できることを意味します。</target>
        </trans-unit>
        <trans-unit id="3de1e726ce1dc0c72b1e4f870bd0f36653583003" translate="yes" xml:space="preserve">
          <source>Sass provides a handful of &lt;a href=&quot;../modules/list&quot;&gt;functions&lt;/a&gt; that make it possible to use lists to write powerful style libraries, or to make your app&amp;rsquo;s stylesheet cleaner and more maintainable.</source>
          <target state="translated">Sassは、リストを使用して強力なスタイルライブラリを記述したり、アプリのスタイルシートをよりクリーンで保守しやすくしたりできるようにするいくつかの&lt;a href=&quot;../modules/list&quot;&gt;関数&lt;/a&gt;を提供します。</target>
        </trans-unit>
        <trans-unit id="b0009ffe7a96796da80e21fa04676bad52a846b6" translate="yes" xml:space="preserve">
          <source>Sass provides a number of advanced customizations for users with unique requirements. Using these features requires a strong understanding of Ruby.</source>
          <target state="translated">Sassは、ユニークな要件を持つユーザーのために、多くの高度なカスタマイズを提供します。これらの機能を使用するには、Rubyを十分に理解している必要があります。</target>
        </trans-unit>
        <trans-unit id="33c553d9dc71a86be474f4c5f11876d63d15791a" translate="yes" xml:space="preserve">
          <source>Sass provides a number of at-rules that make it possible to control whether styles get emitted, or to emit them multiple times with small variations. They can also be used in &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt; and &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt; to write small algorithms to make writing your Sass easier. Sass supports four flow control rules:</source>
          <target state="translated">Sassには、スタイルを発行するかどうかを制御したり、小さなバリエーションで複数回発行したりすることを可能にする多数のルールが用意されています。また、&lt;a href=&quot;mixin&quot;&gt;ミックスイン&lt;/a&gt;や&lt;a href=&quot;function&quot;&gt;関数&lt;/a&gt;で使用して、Sassの作成を容易にする小さなアルゴリズムを作成することもできます。Sassは4つのフロー制御ルールをサポートしています。</target>
        </trans-unit>
        <trans-unit id="49527978dd2cf7878bba69f22d0f51b489af35ee" translate="yes" xml:space="preserve">
          <source>Sass provides many built-in modules which contain useful functions (and the occasional mixin). These modules can be loaded with the &lt;a href=&quot;at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; like any user-defined stylesheet, and their functions can be called &lt;a href=&quot;at-rules/use#loading-members&quot;&gt;like any other module member&lt;/a&gt;. All built-in module URLs begin with &lt;code&gt;sass:&lt;/code&gt; to indicate that they're part of Sass itself.</source>
          <target state="translated">Sassは、便利な機能（および時折ミックスイン）を含む多くの組み込みモジュールを提供します。これらのモジュールは、他のユーザー定義スタイルシートと同様に&lt;a href=&quot;at-rules/use&quot;&gt; &lt;code&gt;@use&lt;/code&gt; ルールを&lt;/a&gt;使用してロードでき、それらの関数は&lt;a href=&quot;at-rules/use#loading-members&quot;&gt;他のモジュールメンバー&lt;/a&gt;と同様に呼び出すことができます。すべての組み込みモジュールのURLは &lt;code&gt;sass:&lt;/code&gt; で始まり、Sass自体の一部であることを示します。</target>
        </trans-unit>
        <trans-unit id="4ab8d4eb5816ea54277da228d107eca369d01633" translate="yes" xml:space="preserve">
          <source>Sass provides the following built-in modules:</source>
          <target state="translated">Sassは以下の組み込みモジュールを提供しています。</target>
        </trans-unit>
        <trans-unit id="4025d3f80e1fb8425ab404ceb4a3d8a1c0ee9b9f" translate="yes" xml:space="preserve">
          <source>Sass stylesheets don't work the same as views. They don't contain dynamic content, so the CSS only needs to be generated when the Sass file has been updated. By default, &lt;code&gt;.sass&lt;/code&gt; and &lt;code&gt;.scss&lt;/code&gt; files are placed in public/stylesheets/sass (this can be customized with the &lt;a href=&quot;#template_location-option&quot;&gt;&lt;code&gt;:template_location&lt;/code&gt;&lt;/a&gt; option). Then, whenever necessary, they're compiled into corresponding CSS files in public/stylesheets. For instance, public/stylesheets/sass/main.scss would be compiled to public/stylesheets/main.css.</source>
          <target state="translated">Sassスタイルシートはビューと同じようには機能しません。動的コンテンツが含まれていないため、CSSは、Sassファイルが更新されたときにのみ生成する必要があります。デフォルトでは、 &lt;code&gt;.sass&lt;/code&gt; および &lt;code&gt;.scss&lt;/code&gt; ファイルはpublic / stylesheets / sassに配置されます（これは&lt;a href=&quot;#template_location-option&quot;&gt; &lt;code&gt;:template_location&lt;/code&gt; &lt;/a&gt;オプションでカスタマイズできます）。その後、必要に応じて、public / stylesheetsの対応するCSSファイルにコンパイルされます。たとえば、public / stylesheets / sass / main.scssはpublic / stylesheets / main.cssにコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="c61e231625156d893ed8fe4d22fab81c39ec0d02" translate="yes" xml:space="preserve">
          <source>Sass supports a few operators that generate &lt;a href=&quot;../values/strings&quot;&gt;strings&lt;/a&gt;:</source>
          <target state="translated">Sassは、&lt;a href=&quot;../values/strings&quot;&gt;文字列&lt;/a&gt;を生成するいくつかの演算子をサポートしています。</target>
        </trans-unit>
        <trans-unit id="960801c5484134bb382dec9eafb1a76226deb27a" translate="yes" xml:space="preserve">
          <source>Sass supports a handful of useful &lt;code&gt;operators&lt;/code&gt; for working with different values. These include the standard mathematical operators like &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;, as well as operators for various other types:</source>
          <target state="translated">Sassは、さまざまな値を &lt;code&gt;operators&lt;/code&gt; ための便利な演算子をいくつかサポートしています。これらには、 &lt;code&gt;+&lt;/code&gt; や &lt;code&gt;*&lt;/code&gt; などの標準的な数学演算子、およびその他のさまざまなタイプの演算子が含まれます。</target>
        </trans-unit>
        <trans-unit id="434a0ae241ff4bb8417d3c68ada1d1863e788791" translate="yes" xml:space="preserve">
          <source>Sass supports a number of value types, most of which come straight from CSS. Every &lt;a href=&quot;syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; produces a value, &lt;a href=&quot;variables&quot;&gt;variables&lt;/a&gt; hold values. Most value types come straight from CSS:</source>
          <target state="translated">Sassは多くの値型をサポートしており、そのほとんどはCSSから直接取得されます。すべての&lt;a href=&quot;syntax/structure#expressions&quot;&gt;式&lt;/a&gt;は値を生成し、&lt;a href=&quot;variables&quot;&gt;変数&lt;/a&gt;は値を保持します。ほとんどの値型はCSSから直接取得されます。</target>
        </trans-unit>
        <trans-unit id="dcbfa369bee1ee5f03dba6ad8ae4403b6fb0b310" translate="yes" xml:space="preserve">
          <source>Sass supports a special &lt;code&gt;=&lt;/code&gt; operator that&amp;rsquo;s only allowed in function arguments, which just creates an &lt;a href=&quot;values/strings#unquoted&quot;&gt;unquoted string&lt;/a&gt; with its two operands separated by &lt;code&gt;=&lt;/code&gt;. This exists for backwards-compatibility with very old IE-only syntax.</source>
          <target state="translated">Sassは、関数の引数でのみ許可される特別な &lt;code&gt;=&lt;/code&gt; 演算子をサポートします。これは、2つのオペランドが &lt;code&gt;=&lt;/code&gt; で区切られた&lt;a href=&quot;values/strings#unquoted&quot;&gt;引用符で囲まれていない文字列&lt;/a&gt;を作成するだけです。これは、非常に古いIEのみの構文との下位互換性のために存在します。</target>
        </trans-unit>
        <trans-unit id="a1d70054db4e1dfd0e0b67c3e7e01b1d3bfc6c9a" translate="yes" xml:space="preserve">
          <source>Sass supports a special type of selector called a &quot;placeholder selector&quot;. These look like class and id selectors, except the &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; is replaced by &lt;code&gt;%&lt;/code&gt;. They're meant to be used with the &lt;a href=&quot;#extend&quot;&gt;&lt;code&gt;@extend&lt;/code&gt; directive&lt;/a&gt;; for more information see &lt;a href=&quot;#placeholders&quot;&gt;&lt;code&gt;@extend&lt;/code&gt;-Only Selectors&lt;/a&gt;.</source>
          <target state="translated">Sassは、「プレースホルダーセレクター」と呼ばれる特殊なタイプのセレクターをサポートしています。これらは &lt;code&gt;#&lt;/code&gt; やを除いて、クラスおよびIDセレクターのように見えます &lt;code&gt;.&lt;/code&gt; &lt;code&gt;%&lt;/code&gt; に置き換えられます。&lt;a href=&quot;#extend&quot;&gt; &lt;code&gt;@extend&lt;/code&gt; ディレクティブで&lt;/a&gt;使用するためのものです。詳細については、&lt;a href=&quot;#placeholders&quot;&gt; &lt;code&gt;@extend&lt;/code&gt; -Only Selectorsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2109347200ea29f2dbcac97a7a1a0cbae14f6ebb" translate="yes" xml:space="preserve">
          <source>Sass supports all CSS3 &lt;code&gt;@&lt;/code&gt;-rules, as well as some additional Sass-specific ones known as &quot;directives.&quot; These have various effects in Sass, detailed below. See also &lt;a href=&quot;#control_directives&quot;&gt;control directives&lt;/a&gt; and &lt;a href=&quot;#mixins&quot;&gt;mixin directives&lt;/a&gt;.</source>
          <target state="translated">Sassは、すべてのCSS3 &lt;code&gt;@&lt;/code&gt; ルールと、「ディレクティブ」と呼ばれるSass固有の追加ルールをサポートしています。これらはSassでさまざまな効果があります。&lt;a href=&quot;#control_directives&quot;&gt;制御ディレクティブ&lt;/a&gt;と&lt;a href=&quot;#mixins&quot;&gt;ミックスインディレクティブ&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="efff7bc7d11d2d156e403b4d0c736e7d9c2a72aa" translate="yes" xml:space="preserve">
          <source>Sass supports all the at-rules that are part of CSS proper. To stay flexible and forwards-compatible with future versions of CSS, Sass has general support that covers almost all at-rules by default. A CSS at-rule is written &lt;code&gt;@&amp;lt;name&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;, &lt;code&gt;@&amp;lt;name&amp;gt; { ... }&lt;/code&gt;, or &lt;code&gt;@&amp;lt;name&amp;gt; &amp;lt;value&amp;gt; { ... }&lt;/code&gt;. The name must be an identifier, and the value (if one exists) can be pretty much anything. Both the name and the value can contain &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt;.</source>
          <target state="translated">Sassは、CSS固有の一部であるすべてのat-rulesをサポートします。柔軟性を維持し、CSSの将来のバージョンとの上位互換性を維持するために、Sassは、デフォルトでほぼすべてのat-rulesをカバーする一般的なサポートを提供しています。CSS at-ruleは、 &lt;code&gt;@&amp;lt;name&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt; 、 &lt;code&gt;@&amp;lt;name&amp;gt; { ... }&lt;/code&gt; 、または &lt;code&gt;@&amp;lt;name&amp;gt; &amp;lt;value&amp;gt; { ... }&lt;/code&gt; と記述されます。名前は識別子である必要があり、値（存在する場合）はほとんど何でもかまいません。名前と値の両方に&lt;a href=&quot;../interpolation&quot;&gt;補間&lt;/a&gt;を含めることができます。</target>
        </trans-unit>
        <trans-unit id="0edbace979a3c6494ad08643df2a24269d903d3e" translate="yes" xml:space="preserve">
          <source>Sass supports many useful &lt;a href=&quot;../modules/color&quot;&gt;color functions&lt;/a&gt; that can be used to create new colors based on existing ones by &lt;a href=&quot;../modules/color#mix&quot;&gt;mixing colors together&lt;/a&gt; or &lt;a href=&quot;../modules/color#scale&quot;&gt;scaling their hue, saturation, or lightness&lt;/a&gt;.</source>
          <target state="translated">Sassは、色を&lt;a href=&quot;../modules/color#mix&quot;&gt;混ぜ合わせ&lt;/a&gt;たり&lt;a href=&quot;../modules/color#scale&quot;&gt;、色相、彩度、明度をスケーリングし&lt;/a&gt;たりすることで、既存の色に基づいて新しい色を作成するために使用できる多くの便利な&lt;a href=&quot;../modules/color&quot;&gt;色関数&lt;/a&gt;をサポートしています。</target>
        </trans-unit>
        <trans-unit id="9215ecc9de12de338c73b85746fafdaaf6b06e16" translate="yes" xml:space="preserve">
          <source>Sass supports standard multiline CSS comments with &lt;code&gt;/* */&lt;/code&gt;, as well as single-line comments with &lt;code&gt;//&lt;/code&gt;. The multiline comments are preserved in the CSS output where possible, while the single-line comments are removed. For example:</source>
          <target state="translated">Sassは &lt;code&gt;/* */&lt;/code&gt; で標準の複数行のCSSコメントをサポートし、 &lt;code&gt;//&lt;/code&gt; で単一行のコメントをサポートします。複数行のコメントは可能な限りCSS出力に保持されますが、1行のコメントは削除されます。例えば：</target>
        </trans-unit>
        <trans-unit id="ad387609919992a7464bd532cbb72109ece70665" translate="yes" xml:space="preserve">
          <source>Sass supports the standard set of mathematical operators for &lt;a href=&quot;../values/numbers&quot;&gt;numbers&lt;/a&gt;. They automatically convert between compatible units.</source>
          <target state="translated">Sassは、&lt;a href=&quot;../values/numbers&quot;&gt;数値&lt;/a&gt;の標準的な数学演算子のセットをサポートしています。互換性のあるユニット間で自動的に変換されます。</target>
        </trans-unit>
        <trans-unit id="e55bf6412b58a50f76ff43db8dc64446bdfa78d4" translate="yes" xml:space="preserve">
          <source>Sass supports two different syntaxes. Each one can load the other, so it's up to you and your team which one to choose.</source>
          <target state="translated">Sassは2つの異なる構文をサポートしています。それぞれが他のものを読み込むことができるので、どちらを選ぶかはあなたとあなたのチーム次第です。</target>
        </trans-unit>
        <trans-unit id="8d8f3ecedc8edcdcd2ba7a7cf536fa8406d7ccdf" translate="yes" xml:space="preserve">
          <source>Sass variables are &lt;em&gt;imperative&lt;/em&gt;, which means if you use a variable and then change its value, the earlier use will stay the same. CSS variables are &lt;em&gt;declarative&lt;/em&gt;, which means if you change the value, it&amp;rsquo;ll affect both earlier uses and later uses.</source>
          <target state="translated">Sass変数は&lt;em&gt;必須&lt;/em&gt;です。つまり、変数を使用してからその値を変更しても、以前の使用は同じままです。CSS変数は&lt;em&gt;宣言型&lt;/em&gt;です。つまり、値を変更すると、以前の使用と後の使用の両方に影響します。</target>
        </trans-unit>
        <trans-unit id="b52ce5915995653ac969d0c85917aef9719a1096" translate="yes" xml:space="preserve">
          <source>Sass variables are all compiled away by Sass. CSS variables are included in the CSS output.</source>
          <target state="translated">Sass変数はすべてSassによってコンパイルされて離れています。CSS変数はCSS出力に含まれます。</target>
        </trans-unit>
        <trans-unit id="9af20c986ec9da33a8716c1d52ee89798428472d" translate="yes" xml:space="preserve">
          <source>Sass variables are simple: you assign a value to a name that begins with &lt;code&gt;$&lt;/code&gt;, and then you can refer to that name instead of the value itself. But despite their simplicity, they're one of the most useful tools Sass brings to the table. Variables make it possible to reduce repetition, do complex math, configure libraries, and much more.</source>
          <target state="translated">Sass変数は単純です。 &lt;code&gt;$&lt;/code&gt; で始まる名前に値を割り当てると、値自体の代わりにその名前を参照できます。しかし、それらの単純さにもかかわらず、それらはSassがテーブルにもたらす最も便利なツールの1つです。変数を使用すると、繰り返しを減らしたり、複雑な計算を行ったり、ライブラリを構成したりすることができます。</target>
        </trans-unit>
        <trans-unit id="005fc56aea0ad08689769aa5d4e9066a2c9fa4e5" translate="yes" xml:space="preserve">
          <source>Sass variables, like all Sass identifiers, treat hyphens and underscores as identical. This means that &lt;code&gt;$font-size&lt;/code&gt; and &lt;code&gt;$font_size&lt;/code&gt; both refer to the same variable. This is a historical holdover from the very early days of Sass, when it &lt;em&gt;only&lt;/em&gt; allowed underscores in identifier names. Once Sass added support for hyphens to match CSS&amp;rsquo;s syntax, the two were made equivalent to make migration easier.</source>
          <target state="translated">Sass変数は、すべてのSass識別子と同様に、ハイフンとアンダースコアを同一として扱います。これは、 &lt;code&gt;$font-size&lt;/code&gt; と &lt;code&gt;$font_size&lt;/code&gt; 両方が同じ変数を参照していることを意味します。これは、識別子名にアンダースコア&lt;em&gt;しか&lt;/em&gt;許可されてい&lt;em&gt;なかった&lt;/em&gt;Sassのごく初期の時代からの歴史的な遺物です。SassがCSSの構文に一致するハイフンのサポートを追加すると、移行を容易にするために2つが同等になりました。</target>
        </trans-unit>
        <trans-unit id="86fc2e831482914e7d296b365a94c163b569e70a" translate="yes" xml:space="preserve">
          <source>Sass will always encode its output as UTF-8. It will include a &lt;code&gt;@charset&lt;/code&gt; declaration if and only if the output file contains non-ASCII characters. In compressed mode, a UTF-8 byte order mark is used in place of a &lt;code&gt;@charset&lt;/code&gt; declaration.</source>
          <target state="translated">Sassは常にその出力をUTF-8としてエンコードします。出力ファイルに非ASCII文字が含まれている場合にのみ、 &lt;code&gt;@charset&lt;/code&gt; 宣言が含まれます。圧縮モードでは、 &lt;code&gt;@charset&lt;/code&gt; 宣言の代わりにUTF-8バイトオーダーマークが使用されます。</target>
        </trans-unit>
        <trans-unit id="1ad32e6ce5a92b0d94044a1ca6fda1872af3807e" translate="yes" xml:space="preserve">
          <source>Sass will automatically convert between compatible units, although which unit it will choose for the result depends on which implementation of Sass you&amp;rsquo;re using.If you try to combine incompatible units, like &lt;code&gt;1in + 1em&lt;/code&gt;, Sass will throw an error.</source>
          <target state="translated">Sassは互換性のある単位間で自動的に変換しますが、結果にどの単位を選択するかは、使用しているSassの実装によって異なります &lt;code&gt;1in + 1em&lt;/code&gt; などの互換性のない単位を組み合わせようとすると、Sassはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="8cd620b61343aa6fe6e3e1e3a184d2f9a181519d" translate="yes" xml:space="preserve">
          <source>Sass&amp;rsquo;s &lt;a href=&quot;../operators/numeric#slash-separated-values&quot;&gt;special parsing rules&lt;/a&gt; for slash-separated values make it difficult to pass variables for &lt;code&gt;$blackness&lt;/code&gt; or &lt;code&gt;$alpha&lt;/code&gt; when using the &lt;code&gt;color.hwb($hue $whiteness $blackness / $alpha)&lt;/code&gt; signature. Consider using &lt;code&gt;color.hwb($hue, $whiteness, $blackness, $alpha)&lt;/code&gt; instead.</source>
          <target state="translated">サスの&lt;a href=&quot;../operators/numeric#slash-separated-values&quot;&gt;特別な解析規則&lt;/a&gt;スラッシュで区切られた値については、それが難しいの変数を渡すために作る &lt;code&gt;$blackness&lt;/code&gt; または &lt;code&gt;$alpha&lt;/code&gt; 使用時 &lt;code&gt;color.hwb($hue $whiteness $blackness / $alpha)&lt;/code&gt; 署名を。 &lt;code&gt;color.hwb($hue, $whiteness, $blackness, $alpha)&lt;/code&gt; を使用することを検討してください。</target>
        </trans-unit>
        <trans-unit id="1fe37750469e345e571d1fb1921fe49b388c53c7" translate="yes" xml:space="preserve">
          <source>Sass&amp;rsquo;s &lt;a href=&quot;operators/numeric#slash-separated-values&quot;&gt;special parsing rules&lt;/a&gt; for slash-separated values make it difficult to pass variables for &lt;code&gt;$blue&lt;/code&gt; or &lt;code&gt;$alpha&lt;/code&gt; when using the &lt;code&gt;rgb($red $green $blue / $alpha)&lt;/code&gt; signature. Consider using &lt;code&gt;rgb($red, $green, $blue, $alpha)&lt;/code&gt; instead.</source>
          <target state="translated">スラッシュで区切られた値に対するSassの&lt;a href=&quot;operators/numeric#slash-separated-values&quot;&gt;特別な解析ルール&lt;/a&gt;により、 &lt;code&gt;rgb($red $green $blue / $alpha)&lt;/code&gt; 署名を使用するときに &lt;code&gt;$blue&lt;/code&gt; または &lt;code&gt;$alpha&lt;/code&gt; 変数を渡すことが困難になります。代わりに &lt;code&gt;rgb($red, $green, $blue, $alpha)&lt;/code&gt; 使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="4a04fb2da5e9764122c9c7d75ec45d105af5287b" translate="yes" xml:space="preserve">
          <source>Sass&amp;rsquo;s &lt;a href=&quot;operators/numeric#slash-separated-values&quot;&gt;special parsing rules&lt;/a&gt; for slash-separated values make it difficult to pass variables for &lt;code&gt;$lightness&lt;/code&gt; or &lt;code&gt;$alpha&lt;/code&gt; when using the &lt;code&gt;hsl($hue $saturation $lightness / $alpha)&lt;/code&gt; signature. Consider using &lt;code&gt;hsl($hue, $saturation, $lightness, $alpha)&lt;/code&gt; instead.</source>
          <target state="translated">サスの&lt;a href=&quot;operators/numeric#slash-separated-values&quot;&gt;特別な解析規則&lt;/a&gt;スラッシュで区切られた値については、それが難しいの変数を渡すために作る &lt;code&gt;$lightness&lt;/code&gt; 又は &lt;code&gt;$alpha&lt;/code&gt; 使用時 &lt;code&gt;hsl($hue $saturation $lightness / $alpha)&lt;/code&gt; 署名を。 &lt;code&gt;hsl($hue, $saturation, $lightness, $alpha)&lt;/code&gt; 使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="ce844da4e80d92bf1eb0bc6278bf298072b631c5" translate="yes" xml:space="preserve">
          <source>Sass&amp;rsquo;s &lt;a href=&quot;use&quot;&gt;module system&lt;/a&gt; integrates seamlessly with &lt;code&gt;@import&lt;/code&gt;, whether you&amp;rsquo;re importing a file that contains &lt;code&gt;@use&lt;/code&gt; rules or loading a file that contains imports as a module. We want to make the transition from &lt;code&gt;@import&lt;/code&gt; to &lt;code&gt;@use&lt;/code&gt; as smooth as possible.</source>
          <target state="translated">Sassの&lt;a href=&quot;use&quot;&gt;モジュールシステムは&lt;/a&gt;、 &lt;code&gt;@import&lt;/code&gt; &lt;code&gt;@use&lt;/code&gt; ルールを含むファイルをインポートする場合でも、インポートを含むファイルをモジュールとしてロードする場合でも、@ importとシームレスに統合されます。 &lt;code&gt;@import&lt;/code&gt; から &lt;code&gt;@use&lt;/code&gt; への移行をできるだけスムーズにしたいと考えています。</target>
        </trans-unit>
        <trans-unit id="6babd285fe65d953ef5ca31abc267f057579bc8e" translate="yes" xml:space="preserve">
          <source>Sass&amp;rsquo;s &lt;code&gt;@extend&lt;/code&gt; rule solves this. It&amp;rsquo;s written &lt;code&gt;@extend &amp;lt;selector&amp;gt;&lt;/code&gt;, and it tells Sass that one selector should inherit the styles of another.</source>
          <target state="translated">Sassの &lt;code&gt;@extend&lt;/code&gt; ルールはこれを解決します。 &lt;code&gt;@extend &amp;lt;selector&amp;gt;&lt;/code&gt; と記述されており、あるセレクターが別のセレクターのスタイルを継承する必要があることをSassに通知します。</target>
        </trans-unit>
        <trans-unit id="9a029dc1ee662d27c405277aa39c5baecc4c4ef5" translate="yes" xml:space="preserve">
          <source>SassScript</source>
          <target state="translated">SassScript</target>
        </trans-unit>
        <trans-unit id="1e9e5f520b46482b7d78207fd2f87587cbd9101f" translate="yes" xml:space="preserve">
          <source>SassScript #sassscript</source>
          <target state="translated">SassScript #sassscript</target>
        </trans-unit>
        <trans-unit id="eddf0c34ceef208253270813e40998133922216a" translate="yes" xml:space="preserve">
          <source>SassScript also supports all other types of CSS property value, such as Unicode ranges and &lt;code&gt;!important&lt;/code&gt; declarations. However, it has no special handling for these types. They're treated just like unquoted strings.</source>
          <target state="translated">SassScriptは、Unicode範囲や &lt;code&gt;!important&lt;/code&gt; 宣言など、他のすべてのタイプのCSSプロパティ値もサポートしています。ただし、これらのタイプには特別な処理はありません。それらは引用符で囲まれていない文字列と同じように扱われます。</target>
        </trans-unit>
        <trans-unit id="30070efcd26bcdfe4438c8cf2d17f83b0465a179" translate="yes" xml:space="preserve">
          <source>SassScript can also be used to generate selectors and property names, which is useful when writing &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt;. This is done via &lt;a href=&quot;#interpolation_&quot;&gt;interpolation&lt;/a&gt;.</source>
          <target state="translated">SassScriptを使用してセレクターとプロパティ名を生成することもできます。これは、&lt;a href=&quot;#mixins&quot;&gt;ミックスインを&lt;/a&gt;作成するときに役立ちます。これは&lt;a href=&quot;#interpolation_&quot;&gt;補間&lt;/a&gt;によって行われます。</target>
        </trans-unit>
        <trans-unit id="596d9a884cf209787a0dc4c00e05192356951ab7" translate="yes" xml:space="preserve">
          <source>SassScript defines some useful functions that are called using the normal CSS function syntax:</source>
          <target state="translated">SassScript は、通常の CSS 関数構文を使用して呼び出されるいくつかの便利な関数を定義しています。</target>
        </trans-unit>
        <trans-unit id="6a72866c8b59f464530dbfd219c2c0c494590ba2" translate="yes" xml:space="preserve">
          <source>SassScript supports &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;not&lt;/code&gt; operators for boolean values.</source>
          <target state="translated">SassScriptは &lt;code&gt;and&lt;/code&gt; ブール値のand、 &lt;code&gt;or&lt;/code&gt; 、 &lt;code&gt;not&lt;/code&gt; 演算子をサポートしています。</target>
        </trans-unit>
        <trans-unit id="c989ac7fb0836232ff868fa3ef818e56620ba887" translate="yes" xml:space="preserve">
          <source>SassScript supports basic control directives and expressions for including styles only under some conditions or including the same style several times with variations.</source>
          <target state="translated">SassScriptは、いくつかの条件の下でのみスタイルを含めたり、同じスタイルをバリエーションで何度か含めたりするための基本的な制御ディレクティブや式をサポートしています。</target>
        </trans-unit>
        <trans-unit id="8bc453bdb705d2d310a2a0bf56ccd55390ab99d1" translate="yes" xml:space="preserve">
          <source>SassScript supports eight data types:</source>
          <target state="translated">SassScriptは8つのデータ型をサポートしています。</target>
        </trans-unit>
        <trans-unit id="5719e48057100bfd7e91627b5815247b4ef02f26" translate="yes" xml:space="preserve">
          <source>SassScript supports the standard arithmetic operations on numbers (addition &lt;code&gt;+&lt;/code&gt;, subtraction &lt;code&gt;-&lt;/code&gt;, multiplication &lt;code&gt;*&lt;/code&gt;, division &lt;code&gt;/&lt;/code&gt;, and modulo &lt;code&gt;%&lt;/code&gt;). Sass math functions preserve units during arithmetic operations. This means that, just like in real life, you cannot work on numbers with incompatible units (such as adding a number with &lt;code&gt;px&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt;) and two numbers with the same unit that are multiplied together will produce square units (&lt;code&gt;10px * 10px == 100px * px&lt;/code&gt;). &lt;strong&gt;Be Aware&lt;/strong&gt; that &lt;code&gt;px * px&lt;/code&gt; is an invalid CSS unit and you will get an error from Sass for attempting to use invalid units in CSS.</source>
          <target state="translated">SassScriptは、数値の標準算術演算（加算 &lt;code&gt;+&lt;/code&gt; 、減算 &lt;code&gt;-&lt;/code&gt; 、乗算 &lt;code&gt;*&lt;/code&gt; 、除算 &lt;code&gt;/&lt;/code&gt; 、およびモジュロ &lt;code&gt;%&lt;/code&gt; ）をサポートしています。 Sass数学関数は、算術演算中に単位を保持します。つまり、実生活と同様に、互換性のない単位（ &lt;code&gt;px&lt;/code&gt; と &lt;code&gt;em&lt;/code&gt; を使用して数値を追加するなど）を使用して数値を処理することはできず、同じ単位を乗算した2つの数値は平方単位（ &lt;code&gt;10px * 10px == 100px * px&lt;/code&gt; ）。&lt;strong&gt;注意して&lt;/strong&gt;いることを &lt;code&gt;px * px&lt;/code&gt; 無効なCSS単位であり、あなたがCSSに無効な単位を使用しようとするためにサスからエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">Scope</target>
        </trans-unit>
        <trans-unit id="fdce4e45667836eb9d8dd8e9ca3ec97d8b2e1359" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://sass-lang.com/documentation/breaking-changes/css-vars&quot;&gt;the breaking change page&lt;/a&gt; for more details.</source>
          <target state="translated">詳細について&lt;a href=&quot;https://sass-lang.com/documentation/breaking-changes/css-vars&quot;&gt;は、重大な変更のページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1d2a2a03777527a2a4ffd15581a1e95ce8b0c1bd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://sass-lang.com/documentation/breaking-changes/extend-compound&quot;&gt;the breaking change page&lt;/a&gt; for more details.</source>
          <target state="translated">詳細について&lt;a href=&quot;https://sass-lang.com/documentation/breaking-changes/extend-compound&quot;&gt;は、重大な変更のページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bd4881bdb25c2fafab7ffd312ea4c42d08299488" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sass/script/functions&quot;&gt;Sass::Script::Functions&lt;/a&gt; for a full listing of Sass functions and their argument names, as well as instructions on defining your own in Ruby.</source>
          <target state="translated">Sass関数とその引数名の完全なリスト、およびRubyで独自の関数を定義する手順については、&lt;a href=&quot;sass/script/functions&quot;&gt;Sass :: Script :: Functions&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b3f9123bc3816ae829779a66a9e07ec9052ed653" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sass/script/functions&quot;&gt;this page&lt;/a&gt; for a full list of available functions.</source>
          <target state="translated">使用可能な関数の完全なリストについては、&lt;a href=&quot;sass/script/functions&quot;&gt;このページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0da0a68ff9c18e145ed1ed1a7381ab7f293f8a59" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#adjust&quot;&gt;&lt;code&gt;color.adjust()&lt;/code&gt;&lt;/a&gt;, which can adjust any property of a color.</source>
          <target state="translated">&lt;a href=&quot;#adjust&quot;&gt; &lt;code&gt;color.adjust()&lt;/code&gt; &lt;/a&gt;も参照してください。これは、色の任意のプロパティを調整できます。</target>
        </trans-unit>
        <trans-unit id="679cd26786cb638c2927566e24f8fc70fa1dc8fb" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#append&quot;&gt;&lt;code&gt;selector.append()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#append&quot;&gt; &lt;code&gt;selector.append()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="3df27adbbcfb9c31baf1c2529d72651e352386fd" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#extend&quot;&gt;&lt;code&gt;selector.extend()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#extend&quot;&gt; &lt;code&gt;selector.extend()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="3cb4f1c630458ad1e373eb58ccdd19f455e76f9c" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#global-variable-exists&quot;&gt;&lt;code&gt;meta.global-variable-exists()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#global-variable-exists&quot;&gt; &lt;code&gt;meta.global-variable-exists()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="e089753345cfe250442e9879e62c37578a29bb28" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#nest&quot;&gt;&lt;code&gt;selector.nest()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#nest&quot;&gt; &lt;code&gt;selector.nest()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="43f93bf24749e90a4432789b5a135b28bdffc679" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#replace&quot;&gt;&lt;code&gt;selector.replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#replace&quot;&gt; &lt;code&gt;selector.replace()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="6004a2fc2bea20b2200359dfa598d09d55491c91" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#variable-exists&quot;&gt;&lt;code&gt;meta.variable-exists()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#variable-exists&quot;&gt; &lt;code&gt;meta.variable-exists()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="ef7c4e67c26ce55409670b54814f736a8e82f373" translate="yes" xml:space="preserve">
          <source>Selector Combinators</source>
          <target state="translated">セレクタ・コンビネータ</target>
        </trans-unit>
        <trans-unit id="9b1a3a5f7fb5e0d301d5ae1e7fbf8ed1b7dd7b4d" translate="yes" xml:space="preserve">
          <source>Selector Lists</source>
          <target state="translated">セレクタリスト</target>
        </trans-unit>
        <trans-unit id="011a99b67cb875077910ef37dc00f4c9e77d86ba" translate="yes" xml:space="preserve">
          <source>Selector Sequences</source>
          <target state="translated">セレクタシーケンス</target>
        </trans-unit>
        <trans-unit id="6c23fedd19e084993aa1db6f749810cb7556b88b" translate="yes" xml:space="preserve">
          <source>Selector Values</source>
          <target state="translated">セレクタ値</target>
        </trans-unit>
        <trans-unit id="39877f1ff80fe84908056627a6a3288f55e0cb06" translate="yes" xml:space="preserve">
          <source>Selector arguments to these functions may be in the same format, but they can also just be normal strings (quoted or unquoted), or a combination. For example, &lt;code&gt;&quot;.main aside:hover, .sidebar p&quot;&lt;/code&gt; is a valid selector argument.</source>
          <target state="translated">これらの関数のセレクター引数は同じ形式にすることができますが、通常の文字列（引用符で囲まれた文字または引用符で囲まれていない文字列）または組み合わせにすることもできます。たとえば、 &lt;code&gt;&quot;.main aside:hover, .sidebar p&quot;&lt;/code&gt; は、有効なセレクター引数です。</target>
        </trans-unit>
        <trans-unit id="f0c6b6a8a3a0d2a9f1359a91eb7e3caf91f383a3" translate="yes" xml:space="preserve">
          <source>Selector sequences, such as &lt;code&gt;.foo .bar&lt;/code&gt; or &lt;code&gt;.foo + .bar&lt;/code&gt;, currently can't be extended. However, it is possible for nested selectors themselves to use &lt;code&gt;@extend&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;.foo .bar&lt;/code&gt; や &lt;code&gt;.foo + .bar&lt;/code&gt; などのセレクターシーケンスは、現在拡張できません。ただし、ネストされたセレクター自体が &lt;code&gt;@extend&lt;/code&gt; を使用することは可能です。例えば：</target>
        </trans-unit>
        <trans-unit id="7faab062482c099de7813c7ea8e22561e5d6c502" translate="yes" xml:space="preserve">
          <source>Selectors in style rules</source>
          <target state="translated">スタイルルールのセレクタ</target>
        </trans-unit>
        <trans-unit id="a69ae3b958e7fe99a574b24124ac812c6522e4bb" translate="yes" xml:space="preserve">
          <source>Sets one or more properties of a color to new values.</source>
          <target state="translated">色の1つ以上のプロパティを新しい値に設定します。</target>
        </trans-unit>
        <trans-unit id="d83074a15945b9150660fab7a66aca419880e86c" translate="yes" xml:space="preserve">
          <source>Sets the alpha channel of the color. The value must be a number between 0 and 1 (inclusive).</source>
          <target state="translated">色のアルファチャンネルを設定します。値は0から1の間の数値でなければなりません(この値を含む)。</target>
        </trans-unit>
        <trans-unit id="7437e748303fdad54500657645d4f95bf3ac84fa" translate="yes" xml:space="preserve">
          <source>Sets the blue channel of the color. The value must be an integer between 0 and 255 (inclusive).</source>
          <target state="translated">色の青チャンネルを設定します。値は 0 から 255 までの整数でなければなりません (この値を含む)。</target>
        </trans-unit>
        <trans-unit id="cc5a7bf9585c7fd476dab4da07edc8dace4f58b8" translate="yes" xml:space="preserve">
          <source>Sets the contents of the string.</source>
          <target state="translated">文字列の内容を設定します。</target>
        </trans-unit>
        <trans-unit id="b55d5b21d0404d4e0507ed2a5caa69669328c36f" translate="yes" xml:space="preserve">
          <source>Sets the element at the given (0-based) index in the list to the given value.</source>
          <target state="translated">リスト内の指定された(0ベースの)インデックスの要素を指定された値に設定します。</target>
        </trans-unit>
        <trans-unit id="c31b9d3c5fafd3f68a502e5e4c266afc4f4028bb" translate="yes" xml:space="preserve">
          <source>Sets the green channel of the color. The value must be an integer between 0 and 255 (inclusive).</source>
          <target state="translated">カラーのグリーンチャンネルを設定します。値は 0 から 255 までの整数でなければなりません(この値を含む)。</target>
        </trans-unit>
        <trans-unit id="21d0b7c11fbb51189adb544dcb538f4e1d782c1e" translate="yes" xml:space="preserve">
          <source>Sets the key of the key/value pair at the given (0-based) index in the map to the given value.</source>
          <target state="translated">マップ内の指定された(0ベースの)インデックスのキー/値のペアのキーを、指定された値に設定します。</target>
        </trans-unit>
        <trans-unit id="161391ae0530d71d60db033d508408f8310295b7" translate="yes" xml:space="preserve">
          <source>Sets the opacity of an existing color.</source>
          <target state="translated">既存の色の不透明度を設定します。</target>
        </trans-unit>
        <trans-unit id="e1e8d33426f0769fa417a2b16357eebf5a72c77a" translate="yes" xml:space="preserve">
          <source>Sets the red channel of the color. The value must be an integer between 0 and 255 (inclusive).</source>
          <target state="translated">カラーの赤チャンネルを設定します。値は 0 から 255 までの整数でなければなりません (この値を含む)。</target>
        </trans-unit>
        <trans-unit id="26b90f3e3030a5386b9db65e2a5772ec9bc0acf0" translate="yes" xml:space="preserve">
          <source>Sets the units of the number, independent of its numeric value. Complex units are specified in the same format as for &lt;a href=&quot;#new-types-number-value-unit-39-39&quot;&gt;the constructor&lt;/a&gt;.</source>
          <target state="translated">数値に関係なく、数値の単位を設定します。複素数の単位は&lt;a href=&quot;#new-types-number-value-unit-39-39&quot;&gt;、コンストラクターの&lt;/a&gt;場合と同じ形式で指定されます。</target>
        </trans-unit>
        <trans-unit id="f5c27baf89870000789311c5c322d343e54cf2cd" translate="yes" xml:space="preserve">
          <source>Sets the value of the key/value pair at the given (0-based) index in the map to the given value.</source>
          <target state="translated">マップ内の指定された (0 ベースの)インデックスのキー/値のペアの値を、指定された値に設定します。</target>
        </trans-unit>
        <trans-unit id="3aff50d684bdec6d813485557cf666de2f96600a" translate="yes" xml:space="preserve">
          <source>Sets the value of the number, independent of its units.</source>
          <target state="translated">単位に依存しない数値の値を設定します。</target>
        </trans-unit>
        <trans-unit id="ba13de59430e2d1224a010aedf6f89003b2bc3eb" translate="yes" xml:space="preserve">
          <source>Sets whether the list is comma-separated.</source>
          <target state="translated">リストをカンマ区切りにするかどうかを設定します。</target>
        </trans-unit>
        <trans-unit id="7331278fb5718617e233df649e90ba9b72bfb49e" translate="yes" xml:space="preserve">
          <source>Shadowing</source>
          <target state="translated">Shadowing</target>
        </trans-unit>
        <trans-unit id="263c53971890113309f9896944379e4ddf6823bc" translate="yes" xml:space="preserve">
          <source>Similarly, if &lt;code&gt;.main .info&lt;/code&gt; could be extended, it would do (almost) the same thing as extending &lt;code&gt;.info&lt;/code&gt; on its own. The subtle differences aren&amp;rsquo;t worth the confusion of looking like it&amp;rsquo;s doing something substantially different, so this isn&amp;rsquo;t allowed either.</source>
          <target state="translated">同様に、もし &lt;code&gt;.main .info&lt;/code&gt; 拡張することができ、それが拡張として（ほぼ）同じことをするだろう &lt;code&gt;.info&lt;/code&gt; 自分自身で。微妙な違いは、それが実質的に異なることをしているように見えるという混乱の価値がないので、これも許可されていません。</target>
        </trans-unit>
        <trans-unit id="594ff1d40a265dff076fc1b134721daddcc676ed" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;#maps&quot;&gt;maps&lt;/a&gt; are treated as lists of pairs, multiple assignment works with them as well. For example:</source>
          <target state="translated">&lt;a href=&quot;#maps&quot;&gt;マップ&lt;/a&gt;はペアのリストとして扱われるため、複数の割り当てもそれらと一緒に機能します。例えば：</target>
        </trans-unit>
        <trans-unit id="7200d8e0523e5177b5aeb63ebb9805abf7e11f71" translate="yes" xml:space="preserve">
          <source>Since maps aren&amp;rsquo;t valid CSS values, they don&amp;rsquo;t do much of anything on their own. That&amp;rsquo;s why Sass provides a bunch of &lt;a href=&quot;../modules/map&quot;&gt;functions&lt;/a&gt; to create maps and access the values they contain.</source>
          <target state="translated">マップは有効なCSS値ではないため、マップ自体ではほとんど何もしません。そのため、Sassには、マップを作成し、マップに含まれる値にアクセスするための一連の&lt;a href=&quot;../modules/map&quot;&gt;関数&lt;/a&gt;が用意されています。</target>
        </trans-unit>
        <trans-unit id="ae3ed84c656302ff446453d77e6e47fa6b24d100" translate="yes" xml:space="preserve">
          <source>Since multiline comments become part of the resulting CSS, interpolation within them is resolved. For example:</source>
          <target state="translated">複数行コメントは結果のCSSの一部となるので、その中での補間は解決されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="243ff2986e1cbe1a398f0a477a1de767e1fc9147" translate="yes" xml:space="preserve">
          <source>Single Equals</source>
          <target state="translated">シングルイコール</target>
        </trans-unit>
        <trans-unit id="be1899ccc3c28b0b29b93f473affed2193d2d07d" translate="yes" xml:space="preserve">
          <source>Slash-Separated Values</source>
          <target state="translated">スラッシュで区切られた値</target>
        </trans-unit>
        <trans-unit id="b0265b93f57e530525fb4bd6540dfd8865202988" translate="yes" xml:space="preserve">
          <source>Some CSS functions, like &lt;code&gt;calc()&lt;/code&gt; and &lt;code&gt;element()&lt;/code&gt; have unusual syntax. Sass &lt;a href=&quot;../syntax/special-functions&quot;&gt;parses these functions specially&lt;/a&gt; as &lt;a href=&quot;../values/strings#unquoted&quot;&gt;unquoted strings&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;calc()&lt;/code&gt; や &lt;code&gt;element()&lt;/code&gt; などの一部のCSS関数には、通常とは異なる構文があります。Sass&lt;a href=&quot;../syntax/special-functions&quot;&gt;は、これらの関数&lt;/a&gt;を&lt;a href=&quot;../values/strings#unquoted&quot;&gt;引用符で囲まれていない文字列&lt;/a&gt;として特別に解析します。</target>
        </trans-unit>
        <trans-unit id="c8e12ba4011b926975609b7327dbec9b181996fb" translate="yes" xml:space="preserve">
          <source>Some languages consider more values falsey than just &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;. Sass isn&amp;rsquo;t one of those languages! Empty strings, empty lists, and the number &lt;code&gt;0&lt;/code&gt; are all truthy in Sass.</source>
          <target state="translated">一部の言語では、 &lt;code&gt;false&lt;/code&gt; や &lt;code&gt;null&lt;/code&gt; だけでなく、より多くの値をfalseと見なします。Sassはそれらの言語の1つではありません！Sassでは、空の文字列、空のリスト、および数値 &lt;code&gt;0&lt;/code&gt; はすべて真実です。</target>
        </trans-unit>
        <trans-unit id="08e4ee6af9721071a87baaed7a28bb29fafa67c5" translate="yes" xml:space="preserve">
          <source>Some mixins may require a passed content block or may have different behavior depending on whether a content block was passed. The &lt;a href=&quot;sass/script/functions#content_exists-instance_method&quot;&gt;&lt;code&gt;content-exists()&lt;/code&gt; function&lt;/a&gt; will return true when a content block is passed to the current mixin and can be used to implement such behaviors.</source>
          <target state="translated">一部のミックスインは、渡されたコンテンツブロックを必要とする場合や、コンテンツブロックが渡されたかどうかによって異なる動作をする場合があります。&lt;a href=&quot;sass/script/functions#content_exists-instance_method&quot;&gt; &lt;code&gt;content-exists()&lt;/code&gt; 関数は、&lt;/a&gt;コンテンツブロックが現在のミックスインに渡され、そのような動作を実装するために使用することができる場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="2fbaedc36a96d170cb5fde555c76e912ae92d5f1" translate="yes" xml:space="preserve">
          <source>Some of these CSS properties have shorthand versions that use the namespace as the property name. For these, you can write both the shorthand value &lt;em&gt;and&lt;/em&gt; the more explicit nested versions.</source>
          <target state="translated">これらのCSSプロパティの一部には、名前空間をプロパティ名として使用する短縮バージョンがあります。これらの場合、省略形の値&lt;em&gt;と&lt;/em&gt;より明示的なネストされたバージョンの両方を記述できます。</target>
        </trans-unit>
        <trans-unit id="a6a2a3f264e74ed32785ea446916a7a5ec1a6004" translate="yes" xml:space="preserve">
          <source>Someday we hope to have &lt;code&gt;@extend&lt;/code&gt; supported natively in the browser, which will allow it to be used within &lt;code&gt;@media&lt;/code&gt; and other directives.</source>
          <target state="translated">いつかは私たちが持っていると思ってい &lt;code&gt;@extend&lt;/code&gt; それは内で使用できるようになりますブラウザでネイティブにサポートされ、 &lt;code&gt;@media&lt;/code&gt; や他のディレクティブを。</target>
        </trans-unit>
        <trans-unit id="2360319b1a3c1bfdc51f2c01b1bb2ac6b9bb4efd" translate="yes" xml:space="preserve">
          <source>Sometimes a selector sequence extends another selector that appears in another sequence. In this case, the two sequences need to be merged. For example:</source>
          <target state="translated">セレクタシーケンスが、別のシーケンスに含まれる別のセレクタを拡張していることがあります。この場合、2 つのシーケンスをマージする必要があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="5f95e9286fc3d862bc7f1f917870ab369becd35a" translate="yes" xml:space="preserve">
          <source>Sometimes it makes sense for a mixin or function to take an unknown number of arguments. For example, a mixin for creating box shadows might take any number of shadows as arguments. For these situations, Sass supports &quot;variable arguments,&quot; which are arguments at the end of a mixin or function declaration that take all leftover arguments and package them up as a &lt;a href=&quot;#lists&quot;&gt;list&lt;/a&gt;. These arguments look just like normal arguments, but are followed by &lt;code&gt;...&lt;/code&gt;. For example:</source>
          <target state="translated">時には、ミックスインまたは関数が未知の数の引数を取ることが理にかなっています。たとえば、ボックスシャドウを作成するためのミックスインは、任意の数のシャドウを引数として取る可能性があります。これらの状況では、Sassは「変数引数」をサポートしています。これは、残っているすべての引数を取り、それらを&lt;a href=&quot;#lists&quot;&gt;リスト&lt;/a&gt;としてパッケージ化する、ミックスインまたは関数宣言の最後の引数です。これらの引数は通常の引数と同じように見えますが、その後に &lt;code&gt;...&lt;/code&gt; が続きます。例えば：</target>
        </trans-unit>
        <trans-unit id="5a9047975f81c7beb3b1d0835b88132f5ea1d02d" translate="yes" xml:space="preserve">
          <source>Sometimes it&amp;rsquo;s useful for a function to be able to take any number of arguments. If the last argument in a &lt;code&gt;@function&lt;/code&gt; declaration ends in &lt;code&gt;...&lt;/code&gt;, then all extra arguments to that function are passed to that argument as a &lt;a href=&quot;../values/lists&quot;&gt;list&lt;/a&gt;. This argument is known as an &lt;a href=&quot;../values/lists#argument-lists&quot;&gt;argument list&lt;/a&gt;.</source>
          <target state="translated">関数が任意の数の引数をとることができると便利な場合があります。 &lt;code&gt;@function&lt;/code&gt; 宣言の最後の引数が &lt;code&gt;...&lt;/code&gt; で終わる場合、その関数へのすべての追加の引数は、&lt;a href=&quot;../values/lists&quot;&gt;リスト&lt;/a&gt;としてその引数に渡されます。この引数は、&lt;a href=&quot;../values/lists#argument-lists&quot;&gt;引数リスト&lt;/a&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="1235e537acae969a32efd55393d8d9d439d84bcf" translate="yes" xml:space="preserve">
          <source>Sometimes it&amp;rsquo;s useful for a mixin to be able to take any number of arguments. If the last argument in a &lt;code&gt;@mixin&lt;/code&gt; declaration ends in &lt;code&gt;...&lt;/code&gt;, then all extra arguments to that mixin are passed to that argument as a &lt;a href=&quot;../values/lists&quot;&gt;list&lt;/a&gt;. This argument is known as an &lt;a href=&quot;../values/lists#argument-lists&quot;&gt;argument list&lt;/a&gt;.</source>
          <target state="translated">ミックスインが任意の数の引数を取ることができると便利な場合があります。 &lt;code&gt;@mixin&lt;/code&gt; 宣言の最後の引数が &lt;code&gt;...&lt;/code&gt; で終わる場合、そのミックスインへのすべての追加の引数は、&lt;a href=&quot;../values/lists&quot;&gt;リスト&lt;/a&gt;としてその引数に渡されます。この引数は、&lt;a href=&quot;../values/lists#argument-lists&quot;&gt;引数リスト&lt;/a&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="638691b864cb05325bd7992b94b7474184591d49" translate="yes" xml:space="preserve">
          <source>Sometimes it&amp;rsquo;s useful to see the value of a &lt;a href=&quot;../variables&quot;&gt;variable&lt;/a&gt; or &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; while you&amp;rsquo;re developing your stylesheet. That&amp;rsquo;s what the &lt;code&gt;@debug&lt;/code&gt; rule is for: it&amp;rsquo;s written &lt;code&gt;@debug &amp;lt;expression&amp;gt;&lt;/code&gt;, and it prints the value of that expression, along with the filename and line number.</source>
          <target state="translated">スタイルシートを開発しているときに、&lt;a href=&quot;../variables&quot;&gt;変数&lt;/a&gt;または&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;式の&lt;/a&gt;値を確認すると便利な場合があります。これが &lt;code&gt;@debug&lt;/code&gt; ルールの目的です。 &lt;code&gt;@debug &amp;lt;expression&amp;gt;&lt;/code&gt; と記述され、その式の値がファイル名と行番号とともに出力されます。</target>
        </trans-unit>
        <trans-unit id="de837228c307548c576c781e6e2aace1352e73cd" translate="yes" xml:space="preserve">
          <source>Sometimes it's useful to use a nested rule's parent selector in other ways than the default. For instance, you might want to have special styles for when that selector is hovered over or for when the body element has a certain class. In these cases, you can explicitly specify where the parent selector should be inserted using the &lt;code&gt;&amp;amp;&lt;/code&gt; character. For example:</source>
          <target state="translated">ネストされたルールの親セレクターをデフォルト以外の方法で使用すると便利な場合があります。たとえば、そのセレクターがホバーされたとき、またはbody要素に特定のクラスがあるときのために、特別なスタイルが必要になる場合があります。これらの場合、 &lt;code&gt;&amp;amp;&lt;/code&gt; 文字を使用して親セレクターを挿入する場所を明示的に指定できます。例えば：</target>
        </trans-unit>
        <trans-unit id="15075cef17f614335551b6872537859d19cd0f37" translate="yes" xml:space="preserve">
          <source>Sometimes you only want a property declaration to show up some of the time. If a declaration&amp;rsquo;s value is &lt;a href=&quot;../values/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or an empty &lt;a href=&quot;../values/strings#unquoted&quot;&gt;unquoted string&lt;/a&gt;, Sass won&amp;rsquo;t compile that declaration to CSS at all.</source>
          <target state="translated">プロパティ宣言だけを表示したい場合があります。宣言の値が&lt;a href=&quot;../values/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../values/strings#unquoted&quot;&gt;引用符で囲まれ&lt;/a&gt;ていない空の文字列の場合、Sassはその宣言をCSSにコンパイルしません。</target>
        </trans-unit>
        <trans-unit id="7253019e67572cdd9cb7df95fe8f2fec09a73e0d" translate="yes" xml:space="preserve">
          <source>Sometimes you want to write a style rule that&amp;rsquo;s &lt;em&gt;only&lt;/em&gt; intended to be extended. In that case, you can use &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;, which look like class selectors that start with &lt;code&gt;%&lt;/code&gt; instead of &lt;code&gt;.&lt;/code&gt;. Any selectors that include placeholders aren&amp;rsquo;t included in the CSS output, but selectors that extend them are.</source>
          <target state="translated">拡張&lt;em&gt;のみを&lt;/em&gt;目的としたスタイルルールを作成したい場合があります。その場合、&lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;プレースホルダーセレクター&lt;/a&gt;を使用できます。プレースホルダーセレクターは、の代わりに &lt;code&gt;%&lt;/code&gt; で始まるクラスセレクターのように見えます &lt;code&gt;.&lt;/code&gt; 。プレースホルダーを含むセレクターはCSS出力に含まれませんが、プレースホルダーを拡張するセレクターは含まれます。</target>
        </trans-unit>
        <trans-unit id="ea0845a8f1f700d1c042600138ed83f134ce0b65" translate="yes" xml:space="preserve">
          <source>Sometimes you'll write styles for a class that you only ever want to &lt;code&gt;@extend&lt;/code&gt;, and never want to use directly in your HTML. This is especially true when writing a Sass library, where you may provide styles for users to &lt;code&gt;@extend&lt;/code&gt; if they need and ignore if they don't.</source>
          <target state="translated">&lt;code&gt;@extend&lt;/code&gt; だけを使用し、HTMLで直接使用したくないクラスのスタイルを作成する場合があります。これは、Sassライブラリを作成するときに特に当てはまります。ユーザーが必要に応じて &lt;code&gt;@extend&lt;/code&gt; にスタイルを提供し、不要な場合は無視することができます。</target>
        </trans-unit>
        <trans-unit id="043702c4e4501889e7730a9fb7aa95851a7a377c" translate="yes" xml:space="preserve">
          <source>Sometimes, though, you want to allow an &lt;code&gt;@extend&lt;/code&gt; not to produce any new selectors. To do so, just add the &lt;code&gt;!optional&lt;/code&gt; flag after the selector. For example:</source>
          <target state="translated">ただし、 &lt;code&gt;@extend&lt;/code&gt; 新しいセレクターを生成しないようにしたい場合があります。これを行うには、セレクターの後に &lt;code&gt;!optional&lt;/code&gt; フラグを追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="c8fb5d37f19dc5afc9bd658c4a0cfdc8b9c40414" translate="yes" xml:space="preserve">
          <source>Sometimes, you don&amp;rsquo;t want to forward &lt;em&gt;every&lt;/em&gt; member from a module. You may want to keep some members private so that only your package can use them, or you may want to require your users to load some members a different way. You can control exactly which members get forwarded by writing &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot; hide &amp;lt;members...&amp;gt;&lt;/code&gt; or &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot; show &amp;lt;members...&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">モジュールから&lt;em&gt;すべての&lt;/em&gt;メンバーを転送したくない場合があります。一部のメンバーを非公開にして、パッケージのみがそれらを使用できるようにすることも、ユーザーに一部のメンバーを別の方法でロードするように要求することもできます。 &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot; hide &amp;lt;members...&amp;gt;&lt;/code&gt; または &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot; show &amp;lt;members...&amp;gt;&lt;/code&gt; 書くことで、どのメンバーが転送されるかを正確に制御できます。</target>
        </trans-unit>
        <trans-unit id="5774da7b802f7af9150c4273aaf57f7387c8eb1d" translate="yes" xml:space="preserve">
          <source>Source Maps</source>
          <target state="translated">ソースマップ</target>
        </trans-unit>
        <trans-unit id="65399d0ea1cef2d124f5e222cb41a41015dc0477" translate="yes" xml:space="preserve">
          <source>Source maps are files that tell browsers or other tools that consume CSS how that CSS corresponds to the Sass files from which it was generated. They make it possible to see and even edit your Sass files in browsers. See instructions for using source maps in &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps&quot;&gt;Chrome&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Style_Editor#Source_map_support&quot;&gt;Firefox&lt;/a&gt;.</source>
          <target state="translated">ソースマップは、CSSを使用するブラウザーまたはその他のツールに、CSSが生成元のSassファイルにどのように対応するかを伝えるファイルです。彼らはあなたのSassファイルをブラウザで見たり編集したりすることさえ可能にします。&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps&quot;&gt;Chrome&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Style_Editor#Source_map_support&quot;&gt;Firefox&lt;/a&gt;でソースマップを使用する手順を参照してください。</target>
        </trans-unit>
        <trans-unit id="2ca36f19363605580ce8ff8c0b8ba94b1548e941" translate="yes" xml:space="preserve">
          <source>Special Functions</source>
          <target state="translated">特殊機能</target>
        </trans-unit>
        <trans-unit id="cb5cdb4d83d13dcb9044f5371c6dcdabd5610f8d" translate="yes" xml:space="preserve">
          <source>Special functions</source>
          <target state="translated">特殊機能</target>
        </trans-unit>
        <trans-unit id="1d10323c27ec5f9982ad73377fd582ff949840f8" translate="yes" xml:space="preserve">
          <source>Standalone</source>
          <target state="translated">Standalone</target>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="translated">Statements</target>
        </trans-unit>
        <trans-unit id="781a867e9de4908f79fe38c77c92d50f5d889295" translate="yes" xml:space="preserve">
          <source>Still returns true even if &lt;code&gt;$super&lt;/code&gt; matches &lt;em&gt;more&lt;/em&gt; elements than &lt;code&gt;$sub&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$super&lt;/code&gt; が &lt;code&gt;$sub&lt;/code&gt; &lt;em&gt;より多くの&lt;/em&gt;要素に一致する場合でも、trueを返します。</target>
        </trans-unit>
        <trans-unit id="9af895dea7d1df874079777fbd39a8b66ee1f435" translate="yes" xml:space="preserve">
          <source>String Indexes</source>
          <target state="translated">文字列インデックス</target>
        </trans-unit>
        <trans-unit id="905138067416afbda69a807c2dbf96fa6f2ae8dd" translate="yes" xml:space="preserve">
          <source>String Operations</source>
          <target state="translated">文字列操作</target>
        </trans-unit>
        <trans-unit id="27b5731f3ec14f393ba8332d57e541a658e0f241" translate="yes" xml:space="preserve">
          <source>String Operators</source>
          <target state="translated">文字列演算子</target>
        </trans-unit>
        <trans-unit id="766f45c1227c8c7d13e31b3c8218c7c441dc99b1" translate="yes" xml:space="preserve">
          <source>String operations</source>
          <target state="translated">文字列操作</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="b36b4bf7e1749dda82b6b7f07a772067f3f1d4c8" translate="yes" xml:space="preserve">
          <source>Strings #sass-script-strings</source>
          <target state="translated">文字列 #sass-script-strings</target>
        </trans-unit>
        <trans-unit id="f7cc4cbb7491950861a99a5d073ec4ccae816299" translate="yes" xml:space="preserve">
          <source>Strings are sequences of characters (specifically &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;Unicode code points&lt;/a&gt;). Sass supports two kinds of strings whose internal structure is the same but which are rendered differently: &lt;a href=&quot;#quoted&quot;&gt;quoted strings&lt;/a&gt;, like &lt;code&gt;&quot;Helvetica Neue&quot;&lt;/code&gt;, and &lt;a href=&quot;#unquoted&quot;&gt;unquoted strings&lt;/a&gt; (also known as &lt;em&gt;identifiers&lt;/em&gt;), like &lt;code&gt;bold&lt;/code&gt;. Together, these cover the different kinds of text that appear in CSS.</source>
          <target state="translated">文字列は文字のシーケンスです（具体的には&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;Unicodeコードポイント&lt;/a&gt;）。：サスは内部構造と同じですが、異なるレンダリングされた文字列の2種類のサポート&lt;a href=&quot;#quoted&quot;&gt;引用符で囲まれた文字列を&lt;/a&gt;同じように、 &lt;code&gt;&quot;Helvetica Neue&quot;&lt;/code&gt; 、および&lt;a href=&quot;#unquoted&quot;&gt;引用符で囲まれていない文字列&lt;/a&gt;（としても知られている&lt;em&gt;識別子&lt;/em&gt;のような）、 &lt;code&gt;bold&lt;/code&gt; 。これらは一緒になって、CSSに表示されるさまざまな種類のテキストをカバーします。</target>
        </trans-unit>
        <trans-unit id="c8b7bcfcaa8b48cf4e7f414a5fda711253e9e86e" translate="yes" xml:space="preserve">
          <source>Structure of a Stylesheet</source>
          <target state="translated">スタイルシートの構造</target>
        </trans-unit>
        <trans-unit id="54d18fc7c92dafab4d4826d2656548e1f06e5d63" translate="yes" xml:space="preserve">
          <source>Style Rules</source>
          <target state="translated">スタイルルール</target>
        </trans-unit>
        <trans-unit id="6c50a97969161ac3123602bb3cb47e1e89a746ba" translate="yes" xml:space="preserve">
          <source>Style rules are the foundation of Sass, just like they are for CSS. And they work the same way: you choose which elements to style with a selector, and &lt;a href=&quot;style-rules/declarations&quot;&gt;declare properties&lt;/a&gt; that affect how those elements look.</source>
          <target state="translated">スタイルルールは、CSSの場合と同様に、Sassの基盤です。また、同じように機能します。セレクターを使用してスタイルを設定する要素を選択し、それらの要素の外観に影響を与える&lt;a href=&quot;style-rules/declarations&quot;&gt;プロパティ&lt;/a&gt;を宣言します。</target>
        </trans-unit>
        <trans-unit id="391aa759e0f627e3cb08a330a5127ac56b6fa86a" translate="yes" xml:space="preserve">
          <source>Subtraction, Negative Numbers, and &lt;code&gt;-&lt;/code&gt;</source>
          <target state="translated">減算、負の数、および &lt;code&gt;-&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="f58a1a1b995bb6193210ff877811ca67724e98f1" translate="yes" xml:space="preserve">
          <source>Syntax Selection</source>
          <target state="translated">構文選択</target>
        </trans-unit>
        <trans-unit id="06bda05a8b16ee488a4324d815b666ba4c8fb984" translate="yes" xml:space="preserve">
          <source>Taking Arbitrary Arguments</source>
          <target state="translated">任意の引数を取る</target>
        </trans-unit>
        <trans-unit id="935c2523e729956822e96e5ae256d27cdd1bee57" translate="yes" xml:space="preserve">
          <source>Taking Arbitrary Keyword Arguments</source>
          <target state="translated">任意のキーワード引数を取る</target>
        </trans-unit>
        <trans-unit id="1df350cc36b8067fbef394752946ccef525865c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module&quot;&gt;module migrator&lt;/a&gt; assumes that any stylesheet that is depended on using a &lt;a href=&quot;../at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; or a &lt;a href=&quot;../at-rules/forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rule&lt;/a&gt; has already been migrated to the module system, so it won&amp;rsquo;t attempt to migrate them, even when the &lt;code&gt;--migrate-deps&lt;/code&gt; option is passed.</source>
          <target state="translated">&lt;a href=&quot;#module&quot;&gt;モジュールの移行で&lt;/a&gt;使用するに依存しているすべてのスタイルシートと仮定し&lt;a href=&quot;../at-rules/use&quot;&gt; &lt;code&gt;@use&lt;/code&gt; のルール&lt;/a&gt;や&lt;a href=&quot;../at-rules/forward&quot;&gt; &lt;code&gt;@forward&lt;/code&gt; ルールが&lt;/a&gt;場合でも、それはそれらを移行しようとしませんので、既に、モジュールシステムに移行されている &lt;code&gt;--migrate-deps&lt;/code&gt; オプションをされます合格しました。</target>
        </trans-unit>
        <trans-unit id="a35dc086e1aba5e6f5680ea344f3541b4641a187" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#single-equals&quot;&gt;&lt;code&gt;=&lt;/code&gt; operator&lt;/a&gt;, when it&amp;rsquo;s available.</source>
          <target state="translated">&lt;a href=&quot;#single-equals&quot;&gt; &lt;code&gt;=&lt;/code&gt; 演算子&lt;/a&gt;が使用可能です。</target>
        </trans-unit>
        <trans-unit id="a6fb1156c24130389f0a5c30c31228891820b439" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../at-rules/at-root&quot;&gt;&lt;code&gt;@at-root&lt;/code&gt; rule&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../at-rules/at-root&quot;&gt; &lt;code&gt;@at-root&lt;/code&gt; ルール&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7af532e60d3ebbaf37412d839134df1e45749782" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../at-rules/error&quot;&gt;&lt;code&gt;@error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../at-rules/warn&quot;&gt;&lt;code&gt;@warn&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../at-rules/debug&quot;&gt;&lt;code&gt;@debug&lt;/code&gt;&lt;/a&gt; rules.</source>
          <target state="translated">&lt;a href=&quot;../at-rules/error&quot;&gt; &lt;code&gt;@error&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../at-rules/warn&quot;&gt; &lt;code&gt;@warn&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../at-rules/debug&quot;&gt; &lt;code&gt;@debug&lt;/code&gt; の&lt;/a&gt;ルール。</target>
        </trans-unit>
        <trans-unit id="e279da5dc12be931a6b03f93cccc63f265420ed7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../at-rules/extend&quot;&gt;&lt;code&gt;@extend&lt;/code&gt; rule&lt;/a&gt; may only be used within style rules.</source>
          <target state="translated">&lt;a href=&quot;../at-rules/extend&quot;&gt; &lt;code&gt;@extend&lt;/code&gt; のルールは&lt;/a&gt;唯一のスタイルのルール内で使用することができます。</target>
        </trans-unit>
        <trans-unit id="e764626fb8b6b9c1761d43c7e39c8dbac88e0256" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../at-rules/import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; put all top-level members in one global scope, so when it was the standard way of loading stylesheets, everyone was incentivized to add prefixes to all their member names to avoid accidentally redefining some other stylesheet&amp;rsquo;s. The module system solves this problem, so it&amp;rsquo;s useful to automatically strip those old prefixes now that they&amp;rsquo;re unnecessary.</source>
          <target state="translated">&lt;a href=&quot;../at-rules/import&quot;&gt; &lt;code&gt;@import&lt;/code&gt; のルールは&lt;/a&gt;、それがロードスタイルシートの標準的な方法だったので、誰もが誤って他のいくつかのスタイルシートの再定義を避けるために、すべての彼らのメンバー名に接頭辞を追加するために奨励して、一つのグローバルスコープ内のすべてのトップレベルのメンバーを入れました。モジュールシステムはこの問題を解決するので、不要になった古いプレフィックスを自動的に削除すると便利です。</target>
        </trans-unit>
        <trans-unit id="07acd81e46c0a7ab120f6274a1e06d58df71e026" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../modules#if&quot;&gt;&lt;code&gt;if()&lt;/code&gt; function&lt;/a&gt; returns one value if its argument is &lt;code&gt;true&lt;/code&gt; and another if its argument is &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../modules#if&quot;&gt; &lt;code&gt;if()&lt;/code&gt; 関数は、&lt;/a&gt;引数がある場合は、1つの値を返し &lt;code&gt;true&lt;/code&gt; 引数がある場合、別の &lt;code&gt;false&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9816be82754bef9a251b615fcd56acfd706e26c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt; has a special syntax for defining and using mixins, in addition to the standard &lt;code&gt;@mixin&lt;/code&gt; and &lt;code&gt;@include&lt;/code&gt;. Mixins are defined using the character &lt;code&gt;=&lt;/code&gt;, and they&amp;rsquo;re included using &lt;code&gt;+&lt;/code&gt;. Although this syntax is terser, it&amp;rsquo;s also harder to understand at a glance and users are encouraged to avoid it.</source>
          <target state="translated">&lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;インデント構文は&lt;/a&gt;標準に加えて、ミックスインを定義して使用するための特別な構文がある &lt;code&gt;@mixin&lt;/code&gt; と &lt;code&gt;@include&lt;/code&gt; を。ミックスインは文字 &lt;code&gt;=&lt;/code&gt; を使用して定義され、 &lt;code&gt;+&lt;/code&gt; を使用して含まれます。この構文は簡潔ですが、一目で理解するのも難しく、ユーザーはそれを避けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="546e68a86c3bae99e2cda1604fb5f3b73ff303c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../values/booleans&quot;&gt;boolean&lt;/a&gt; literals &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../values/booleans&quot;&gt;ブール&lt;/a&gt;リテラル &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43966c7793685352c760e920ff46480362a4ce1d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt; rule&lt;/a&gt; works just like a general at-rule, except that its child rules must be valid keyframe rules (&lt;code&gt;&amp;lt;number&amp;gt;%&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt;, or &lt;code&gt;to&lt;/code&gt;) rather than normal selectors.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes&quot;&gt; &lt;code&gt;@keyframes&lt;/code&gt; は、ルール&lt;/a&gt;その子ルールは（有効なキーフレームルールでなければならないことを除いてちょうどで、ルールの一般的なような作品、 &lt;code&gt;&amp;lt;number&amp;gt;%&lt;/code&gt; 、 &lt;code&gt;from&lt;/code&gt; 、または &lt;code&gt;to&lt;/code&gt; ）ではなく、通常よりもセレクタを。</target>
        </trans-unit>
        <trans-unit id="c3c7db39bce25a15f11f3de9502b2243b480cd04" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@supports&quot;&gt;&lt;code&gt;@supports&lt;/code&gt; rule&lt;/a&gt; also allows &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expressions&lt;/a&gt; to be used in the declaration queries.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@supports&quot;&gt; &lt;code&gt;@supports&lt;/code&gt; はルール&lt;/a&gt;もできます&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript式が&lt;/a&gt;宣言クエリで使用されます。</target>
        </trans-unit>
        <trans-unit id="4d9a8ca1113531c6caee68650fcde23a31203429" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries&quot;&gt;&lt;code&gt;@media&lt;/code&gt; rule&lt;/a&gt; does all of the above and more. In addition to allowing interpolation, it allows &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expressions&lt;/a&gt; to be used directly in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Targeting_media_features&quot;&gt;feature queries&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries&quot;&gt; &lt;code&gt;@media&lt;/code&gt; のルールは、&lt;/a&gt;上記とより多くののすべてを行います。補間を許可することに加えて、&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript式&lt;/a&gt;を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Targeting_media_features&quot;&gt;機能クエリで&lt;/a&gt;直接使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="32b754ca442416d6b24fdf2b658f5e4777f3dafb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/calc&quot;&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/element&quot;&gt;&lt;code&gt;element()&lt;/code&gt;&lt;/a&gt; functions are defined in the CSS spec. Because &lt;code&gt;calc()&lt;/code&gt;&amp;rsquo;s mathematical expressions conflict with Sass&amp;rsquo;s arithmetic, and &lt;code&gt;element()&lt;/code&gt;&amp;rsquo;s IDs could be parsed as colors, they need special parsing.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/calc&quot;&gt; &lt;code&gt;calc()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/element&quot;&gt; &lt;code&gt;element()&lt;/code&gt; &lt;/a&gt;関数は、CSS仕様で定義されています。ので &lt;code&gt;calc()&lt;/code&gt; の数式のサスの算術との競合、および &lt;code&gt;element()&lt;/code&gt; のIDが色として解析することができ、彼らは特別な解析を必要とします。</target>
        </trans-unit>
        <trans-unit id="b3644104902986cb6220a6dbc81e265a8112f51c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/url&quot;&gt;&lt;code&gt;url()&lt;/code&gt; function&lt;/a&gt; is commonly used in CSS, but its syntax is different than other functions: it can take either a quoted &lt;em&gt;or&lt;/em&gt; unquoted URL. Because an unquoted URL isn&amp;rsquo;t a valid SassScript expression, Sass needs special logic to parse it.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/url&quot;&gt; &lt;code&gt;url()&lt;/code&gt; 関数は&lt;/a&gt;、一般的にCSSで使用されているが、その構文は、他の機能とは異なっている：それはどちらか引用された取ることができます&lt;em&gt;または&lt;/em&gt;引用符で囲まれていないURLを。引用符で囲まれていないURLは有効なSassScript式ではないため、Sassはそれを解析するために特別なロジックを必要とします。</target>
        </trans-unit>
        <trans-unit id="504c598702deb5ae9c07c5b795fd6eea9ac69750" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Exit_status&quot;&gt;exit status&lt;/a&gt; that should be used if this error causes the enclosing program to exit.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Exit_status&quot;&gt;終了ステータス&lt;/a&gt;このエラーが出るに囲まれたプログラムの原因となる場合に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="90a7c84d55aa25b6f5ccfeaf9b8e39ab88891aa5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/color&quot;&gt;&lt;code&gt;sass:color&lt;/code&gt; module&lt;/a&gt; generates new &lt;a href=&quot;values/colors&quot;&gt;colors&lt;/a&gt; based on existing ones, making it easy to build color themes.</source>
          <target state="translated">&lt;a href=&quot;modules/color&quot;&gt; &lt;code&gt;sass:color&lt;/code&gt; モジュールは&lt;/a&gt;、新たな生成&lt;a href=&quot;values/colors&quot;&gt;色&lt;/a&gt;のカラーテーマを構築するために簡単にそれを作る、既存のものに基づいています。</target>
        </trans-unit>
        <trans-unit id="86c32d20d922c8144b235390be507cfe7a7bcfdc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/list&quot;&gt;&lt;code&gt;sass:list&lt;/code&gt; module&lt;/a&gt; lets you access and modify values in &lt;a href=&quot;values/lists&quot;&gt;lists&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;modules/list&quot;&gt; &lt;code&gt;sass:list&lt;/code&gt; モジュールは&lt;/a&gt;、あなたがアクセスしての値を変更することができます&lt;a href=&quot;values/lists&quot;&gt;リスト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0a3348385f1cc4573040876c2576083f07e6df79" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/map&quot;&gt;&lt;code&gt;sass:map&lt;/code&gt; module&lt;/a&gt; makes it possible to look up the value associated with a key in a &lt;a href=&quot;values/maps&quot;&gt;map&lt;/a&gt;, and much more.</source>
          <target state="translated">&lt;a href=&quot;modules/map&quot;&gt; &lt;code&gt;sass:map&lt;/code&gt; モジュールは、&lt;/a&gt;内のキーに関連付けられた値ルックアップすることが可能となる&lt;a href=&quot;values/maps&quot;&gt;マップ&lt;/a&gt;、および大いに多くを。</target>
        </trans-unit>
        <trans-unit id="cb8865eb3b8e8ce060456ad6e1ba1c735fc530d3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/math&quot;&gt;&lt;code&gt;sass:math&lt;/code&gt; module&lt;/a&gt; provides functions that operate on &lt;a href=&quot;values/numbers&quot;&gt;numbers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;modules/math&quot;&gt; &lt;code&gt;sass:math&lt;/code&gt; モジュールは、&lt;/a&gt;上で操作する機能を提供&lt;a href=&quot;values/numbers&quot;&gt;数字を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="90c727a3c07ed26c23654ef3b56ebfba2c2d06c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/meta&quot;&gt;&lt;code&gt;sass:meta&lt;/code&gt; module&lt;/a&gt; exposes the details of Sass&amp;rsquo;s inner workings.</source>
          <target state="translated">&lt;a href=&quot;modules/meta&quot;&gt; &lt;code&gt;sass:meta&lt;/code&gt; モジュールは、&lt;/a&gt;サスの内部の仕組みの詳細を公開しています。</target>
        </trans-unit>
        <trans-unit id="110e0cd56b20ddb998588a804d44d1ea832def3f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/selector&quot;&gt;&lt;code&gt;sass:selector&lt;/code&gt; module&lt;/a&gt; provides access to Sass&amp;rsquo;s powerful selector engine.</source>
          <target state="translated">&lt;a href=&quot;modules/selector&quot;&gt; &lt;code&gt;sass:selector&lt;/code&gt; モジュールは、&lt;/a&gt;サスの強力なセレクタエンジンへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="54dfcea8115cb33be27886c112e9c90f72682507" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules/string&quot;&gt;&lt;code&gt;sass:string&lt;/code&gt; module&lt;/a&gt; makes it easy to combine, search, or split apart &lt;a href=&quot;values/strings&quot;&gt;strings&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;modules/string&quot;&gt; &lt;code&gt;sass:string&lt;/code&gt; モジュールは、&lt;/a&gt;それが簡単に、組み合わせ検索、または離れて分割することができます&lt;a href=&quot;values/strings&quot;&gt;文字列を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="89e281de7fe71f9d7e978e0dcc7f0c975ef7cc4f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/boolean&quot;&gt;&lt;code&gt;and&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;operators/boolean&quot;&gt; &lt;code&gt;and&lt;/code&gt; オペレータ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ea7bd2e4f24204137c741038b95fe2e8c73c0b40" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/boolean&quot;&gt;&lt;code&gt;or&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;operators/boolean&quot;&gt; &lt;code&gt;or&lt;/code&gt; オペレータ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2c5b6172d556d839b7898b61eaa922d25bd4d4cf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/equality&quot;&gt;&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;operators/equality&quot;&gt; &lt;code&gt;==&lt;/code&gt; と &lt;code&gt;!=&lt;/code&gt; 演算子&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6ae555915d9d54310df43b693be8ea1864d4d676" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/numeric&quot;&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;%&lt;/code&gt; operators&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;operators/numeric&quot;&gt; &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、及び &lt;code&gt;%&lt;/code&gt; の事業者&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="59563c809c27268f326e609b737862755c99a72f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/numeric&quot;&gt;&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; operators&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;operators/numeric&quot;&gt; &lt;code&gt;+&lt;/code&gt; と &lt;code&gt;-&lt;/code&gt; 演算子&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="618c79b16e0882a5777cca82b8bf498f8d9fe33e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;operators/relational&quot;&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt; operators&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;operators/relational&quot;&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;=&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;=&lt;/code&gt; 演算子&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9fa9ba7d7d8e02a7b1a43b44f6f7cc825694f46c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;values/booleans&quot;&gt;boolean&lt;/a&gt; values &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;values/booleans&quot;&gt;ブール&lt;/a&gt;値 &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d27406385a4e5687c92af81ead0967b4f6262d2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!global&lt;/code&gt; flag may only be used to set a variable that has already been declared at the top level of a file. It &lt;em&gt;may not&lt;/em&gt; be used to declare a new variable.</source>
          <target state="translated">&lt;code&gt;!global&lt;/code&gt; フラグは、すでにファイルのトップレベルで宣言された変数を設定するために使用することができます。新しい変数を宣言するために使用すること&lt;em&gt;はできません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3f97e42d9d5b69a774e97737b80e7f4c2688e12c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!optional&lt;/code&gt; Flag</source>
          <target state="translated">&lt;code&gt;!optional&lt;/code&gt; 旗</target>
        </trans-unit>
        <trans-unit id="c03f67f369a61677f5c02cee6e2182a58640cf23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). Decreases the HSL lightness of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="translated">&lt;code&gt;$amount&lt;/code&gt; 間の数でなければなりません &lt;code&gt;0%&lt;/code&gt; と &lt;code&gt;100%&lt;/code&gt; （包括的）。 &lt;code&gt;$color&lt;/code&gt; HSL明度をその量だけ減らします。</target>
        </trans-unit>
        <trans-unit id="b120dd6580b4c5c0e4798be85af712083941d6b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). Decreases the HSL saturation of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="translated">&lt;code&gt;$amount&lt;/code&gt; 間の数でなければなりません &lt;code&gt;0%&lt;/code&gt; と &lt;code&gt;100%&lt;/code&gt; （包括的）。 &lt;code&gt;$color&lt;/code&gt; HSL彩度をその量だけ減らします。</target>
        </trans-unit>
        <trans-unit id="4783522ab9ae33f630fd170459e21adcb50e4681" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). Increases the HSL lightness of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="translated">&lt;code&gt;$amount&lt;/code&gt; 間の数でなければなりません &lt;code&gt;0%&lt;/code&gt; と &lt;code&gt;100%&lt;/code&gt; （包括的）。 &lt;code&gt;$color&lt;/code&gt; HSL明度をその量だけ増やします。</target>
        </trans-unit>
        <trans-unit id="bd3b5d2ada6b2cb60ba3837b90e51002801935ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). Increases the HSL saturation of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="translated">&lt;code&gt;$amount&lt;/code&gt; 間の数でなければなりません &lt;code&gt;0%&lt;/code&gt; と &lt;code&gt;100%&lt;/code&gt; （包括的）。 &lt;code&gt;$color&lt;/code&gt; HSL彩度をその量だけ増やします。</target>
        </trans-unit>
        <trans-unit id="96994319d0eea47efaf2c2a413bfc6b197f92c8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; (inclusive). Decreases the alpha channel of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="translated">&lt;code&gt;$amount&lt;/code&gt; 間の数でなければなりません &lt;code&gt;0&lt;/code&gt; と &lt;code&gt;1&lt;/code&gt; （包括的）。 &lt;code&gt;$color&lt;/code&gt; アルファチャネルをその量だけ減らします。</target>
        </trans-unit>
        <trans-unit id="7a720d48c684b3afc6f3e93caf13808a416c260f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$amount&lt;/code&gt; must be a number between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; (inclusive). Increases the alpha channel of &lt;code&gt;$color&lt;/code&gt; by that amount.</source>
          <target state="translated">&lt;code&gt;$amount&lt;/code&gt; 間の数でなければなりません &lt;code&gt;0&lt;/code&gt; と &lt;code&gt;1&lt;/code&gt; （包括的）。 &lt;code&gt;$color&lt;/code&gt; アルファチャンネルをその量だけ増やします。</target>
        </trans-unit>
        <trans-unit id="ba4101ab4f45dcc288c144bb1dfb9e8553917722" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$feature&lt;/code&gt; must be a string. The currently recognized features are:</source>
          <target state="translated">&lt;code&gt;$feature&lt;/code&gt; 文字列でなければなりません。現在認識されている機能は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ac782584e5608fef03b3c8ec321127fef4a8c4f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$function&lt;/code&gt; should be a &lt;a href=&quot;../values/functions&quot;&gt;function&lt;/a&gt; returned by &lt;a href=&quot;#get-function&quot;&gt;&lt;code&gt;meta.get-function()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$function&lt;/code&gt; あるべき&lt;a href=&quot;../values/functions&quot;&gt;機能&lt;/a&gt;によって返さ&lt;a href=&quot;#get-function&quot;&gt; &lt;code&gt;meta.get-function()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7211fa6409e40acd2c882d6480c1c5b61f6af84b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$hue&lt;/code&gt; must be a number between &lt;code&gt;-360deg&lt;/code&gt; and &lt;code&gt;360deg&lt;/code&gt; (inclusive) to add to &lt;code&gt;$color&lt;/code&gt;&amp;rsquo;s hue. It may be &lt;a href=&quot;../values/numbers#units&quot;&gt;unitless&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$hue&lt;/code&gt; 間の数でなければなりません &lt;code&gt;-360deg&lt;/code&gt; と &lt;code&gt;360deg&lt;/code&gt; に追加する（包括的） &lt;code&gt;$color&lt;/code&gt; の色相。&lt;a href=&quot;../values/numbers#units&quot;&gt;ユニットレス&lt;/a&gt;かもしれません。</target>
        </trans-unit>
        <trans-unit id="4b40d85f830bf5953f725bc895e473ddd4a7dc3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$module&lt;/code&gt; parameter must be a string matching the namespace of a &lt;a href=&quot;../at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; in the current file.</source>
          <target state="translated">&lt;code&gt;$module&lt;/code&gt; パラメータは、名前空間の一致文字列でなければなりません&lt;a href=&quot;../at-rules/use&quot;&gt; &lt;code&gt;@use&lt;/code&gt; のルール&lt;/a&gt;現在のファイルのを。</target>
        </trans-unit>
        <trans-unit id="9dc3b8b704898c3d531f3c842fb6eedd2bfc28bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$selector&lt;/code&gt; must be a single string that contains a compound selector. This means it may not contains combinators (including spaces) or commas.</source>
          <target state="translated">&lt;code&gt;$selector&lt;/code&gt; 化合物セレクタを含む単一の文字列でなければなりません。これは、コンビネータ（スペースを含む）またはコンマが含まれていない可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="7658cf7eadbd403e669ddf2edbac3c571d5fef04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$selector&lt;/code&gt;, &lt;code&gt;$extendee&lt;/code&gt;, and &lt;code&gt;$extender&lt;/code&gt; selectors may contain &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;, but not &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$selector&lt;/code&gt; 、 &lt;code&gt;$extendee&lt;/code&gt; 、および &lt;code&gt;$extender&lt;/code&gt; セレクタが含まれていてもよい&lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;プレースホルダセレクタ&lt;/a&gt;ではなく、&lt;a href=&quot;../style-rules/parent-selector&quot;&gt;親セレクタを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8718d6667f1564575e7b546a27af7454cbde19ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$selector&lt;/code&gt;, &lt;code&gt;$original&lt;/code&gt;, and &lt;code&gt;$replacement&lt;/code&gt; selectors may contain &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;, but not &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$selector&lt;/code&gt; 、 &lt;code&gt;$original&lt;/code&gt; 、および &lt;code&gt;$replacement&lt;/code&gt; セレクタが含まれていてもよい&lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;プレースホルダセレクタ&lt;/a&gt;ではなく、&lt;a href=&quot;../style-rules/parent-selector&quot;&gt;親セレクタを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75c3eb689436931e9df15f8b6398ac7260b7905b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$selectors&lt;/code&gt; may contain &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;, but not &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$selectors&lt;/code&gt; 含まれていてもよい&lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;プレースホルダセレクタ&lt;/a&gt;ではなく、&lt;a href=&quot;../style-rules/parent-selector&quot;&gt;親セレクタを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="99c3b1aeb37bcaae820907bf62915cfbd3f2307f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$selectors&lt;/code&gt; may contain &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;. Unlike other selector functions, all of them except the first may also contain &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$selectors&lt;/code&gt; 含まれていてもよい&lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;プレースホルダセレクタを&lt;/a&gt;。他のセレクター関数とは異なり、最初の関数を除くすべての関数に&lt;a href=&quot;../style-rules/parent-selector&quot;&gt;親セレクター&lt;/a&gt;が含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="f27e43e203c7e00de5997156048f34462d3a1542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$super&lt;/code&gt; and &lt;code&gt;$sub&lt;/code&gt; selectors may contain &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt;, but not &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$super&lt;/code&gt; や &lt;code&gt;$sub&lt;/code&gt; セレクタが含まれていてもよい&lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;プレースホルダセレクタを&lt;/a&gt;ではなく、&lt;a href=&quot;../style-rules/parent-selector&quot;&gt;親のセレクタ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd3aff068e048b533a1aaff4551bf95e22adb6e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$url&lt;/code&gt; parameter should be a string containing a URL like you&amp;rsquo;d pass to the &lt;code&gt;@use&lt;/code&gt; rule. It shouldn&amp;rsquo;t be a CSS&lt;code&gt;url()&lt;/code&gt;!</source>
          <target state="translated">&lt;code&gt;$url&lt;/code&gt; あなたに渡したいようパラメータは、URLを含む文字列でなければなりません &lt;code&gt;@use&lt;/code&gt; のルール。CSS &lt;code&gt;url()&lt;/code&gt; であってはなりません！</target>
        </trans-unit>
        <trans-unit id="b770a67f5aa20b7b21c52621dfdd1dd135413c4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$weight&lt;/code&gt; must be a number between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). A higher weight means the result will be closer to the negative, and a lower weight means it will be closer to &lt;code&gt;$color&lt;/code&gt;. Weight &lt;code&gt;50%&lt;/code&gt; will always produce &lt;code&gt;#808080&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$weight&lt;/code&gt; 間の数でなければなりません &lt;code&gt;0%&lt;/code&gt; と &lt;code&gt;100%&lt;/code&gt; （包括的）。重みが大きいほど結果がネガに近くなり、重みが小さいほど &lt;code&gt;$color&lt;/code&gt; 近くなります。重量 &lt;code&gt;50%&lt;/code&gt; は常に &lt;code&gt;#808080&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="8d311629ed69e85e7c92883aa048934bd395d0f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; operation can be used to concatenate strings:</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; の操作は、CONCATENATE文字列に使用することができます。</target>
        </trans-unit>
        <trans-unit id="021246515a78b57d10e8e4773809aa7f4e269719" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--force&lt;/code&gt; flag may not be passed alongside the &lt;a href=&quot;#watch&quot;&gt;&lt;code&gt;--watch&lt;/code&gt; flag&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--force&lt;/code&gt; フラグが一緒に渡すことはできません&lt;a href=&quot;#watch&quot;&gt; &lt;code&gt;--watch&lt;/code&gt; フラグ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="381872e396a2d6ecaafd47dffb57cd1bfbac87be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--indented&lt;/code&gt; flag is mostly useful when the input file is coming from &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt;, so its syntax can&amp;rsquo;t be automatically determined.</source>
          <target state="translated">&lt;code&gt;--indented&lt;/code&gt; 入力ファイルから来ている場合、フラグは主に有用である&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;標準入力&lt;/a&gt;ので、その構文を自動的に決定することができません。</target>
        </trans-unit>
        <trans-unit id="6c6dc667716faa84c747765a410c6ba35f078cbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--stdin&lt;/code&gt; flag may not be used with &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--stdin&lt;/code&gt; フラグと一緒に使用されないことが&lt;a href=&quot;#many-to-many-mode&quot;&gt;多対多モード&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1c26608f553246175e669b6188f4f161a429a8ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@at-root&lt;/code&gt; directive causes one or more rules to be emitted at the root of the document, rather than being nested beneath their parent selectors. It can either be used with a single inline selector:</source>
          <target state="translated">&lt;code&gt;@at-root&lt;/code&gt; ディレクティブではなく、その親セレクターの下にネストされているよりも、文書のルートに放出される1つまたは複数のルールを引き起こします。これは、単一のインラインセレクターとともに使用できます。</target>
        </trans-unit>
        <trans-unit id="f04f5bafe73a7ff06650944de798f295db701f68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@at-root&lt;/code&gt; rule can also be written &lt;code&gt;@at-root { ... }&lt;/code&gt; to put multiple style rules at the root of the document. In fact, &lt;code&gt;@at-root &amp;lt;selector&amp;gt; { ... }&lt;/code&gt; is just a shorthand for &lt;code&gt;@at-root { &amp;lt;selector&amp;gt; { ... } }&lt;/code&gt;!</source>
          <target state="translated">&lt;code&gt;@at-root&lt;/code&gt; ルールも書き込むことができる &lt;code&gt;@at-root { ... }&lt;/code&gt; 文書のルートに複数のスタイル規則を置くこと。実際、 &lt;code&gt;@at-root &amp;lt;selector&amp;gt; { ... }&lt;/code&gt; は、 &lt;code&gt;@at-root { &amp;lt;selector&amp;gt; { ... } }&lt;/code&gt; 省略形にすぎません。</target>
        </trans-unit>
        <trans-unit id="d10060bbe79ec42d8b08aac9649783f8377b2880" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@at-root&lt;/code&gt; rule is necessary here because Sass doesn&amp;rsquo;t know what interpolation was used to generate a selector when it&amp;rsquo;s performing selector nesting. This means it will automatically add the outer selector to the inner selector &lt;em&gt;even if&lt;/em&gt; you used &lt;code&gt;&amp;amp;&lt;/code&gt; as a SassScript expression. The &lt;code&gt;@at-root&lt;/code&gt; explicitly tells Sass not to include the outer selector.</source>
          <target state="translated">&lt;code&gt;@at-root&lt;/code&gt; Sassのは、それがセレクターのネストを行っていますとき、セレクタを生成するために使用されたものを補間知らないので、ルールはここでは必要です。つまり、 &lt;code&gt;&amp;amp;&lt;/code&gt; をSassScript式として使用した&lt;em&gt;場合でも&lt;/em&gt;、外部セレクターが内部セレクターに自動的に追加されます。 &lt;code&gt;@at-root&lt;/code&gt; 明示的に外側のセレクタを含まないサスを伝えます。</target>
        </trans-unit>
        <trans-unit id="ce63364621e44c979ffebfe98601536e79b7cbb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@at-root&lt;/code&gt; rule is usually written &lt;code&gt;@at-root &amp;lt;selector&amp;gt; { ... }&lt;/code&gt; and causes everything within it to be emitted at the root of the document instead of using the normal nesting. It's most often used when doing &lt;a href=&quot;../style-rules/parent-selector#advanced-nesting&quot;&gt;advanced nesting&lt;/a&gt; with the &lt;a href=&quot;../style-rules/parent-selector#in-sassscript&quot;&gt;SassScript parent selector&lt;/a&gt; and &lt;a href=&quot;../modules/selector&quot;&gt;selector functions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@at-root&lt;/code&gt; ルールが通常書き込まれる &lt;code&gt;@at-root &amp;lt;selector&amp;gt; { ... }&lt;/code&gt; 、それが通常のネストを使用する代わりに、ドキュメントのルートに放出される範囲内のすべての原因となります。これは、&lt;a href=&quot;../style-rules/parent-selector#in-sassscript&quot;&gt;SassScriptの親セレクター&lt;/a&gt;および&lt;a href=&quot;../modules/selector&quot;&gt;セレクター関数を&lt;/a&gt;使用して&lt;a href=&quot;../style-rules/parent-selector#advanced-nesting&quot;&gt;高度なネスト&lt;/a&gt;を行うときに最もよく使用されます。</target>
        </trans-unit>
        <trans-unit id="ac97b233f713059167f62c0586b91e0e4ff02b52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@debug&lt;/code&gt; directive prints the value of a SassScript expression to the standard error output stream. It's useful for debugging Sass files that have complicated SassScript going on. For example:</source>
          <target state="translated">&lt;code&gt;@debug&lt;/code&gt; のディレクティブは、標準エラー出力ストリームにSassScript式の値を出力します。複雑なSassScriptが実行されているSassファイルのデバッグに役立ちます。例えば：</target>
        </trans-unit>
        <trans-unit id="6a8de215b1d2afff58e3e0991266e337bff2243e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@each&lt;/code&gt; directive can also use multiple variables, as in &lt;code&gt;@each $var1, $var2, ... in &amp;lt;list&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt; is a list of lists, each element of the sub-lists is assigned to the respective variable. For example:</source>
          <target state="translated">&lt;code&gt;@each&lt;/code&gt; のディレクティブも同様に、複数の変数を使用することができます &lt;code&gt;@each $var1, $var2, ... in &amp;lt;list&amp;gt;&lt;/code&gt; 。 &lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt; がリストのリストである場合、サブリストの各要素はそれぞれの変数に割り当てられます。例えば：</target>
        </trans-unit>
        <trans-unit id="77189bcd5e4b0bc4e721a8a2a8712e0b92a9d123" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@each&lt;/code&gt; directive usually has the form &lt;code&gt;@each $var in &amp;lt;list or map&amp;gt;&lt;/code&gt;. &lt;code&gt;$var&lt;/code&gt; can be any variable name, like &lt;code&gt;$length&lt;/code&gt; or &lt;code&gt;$name&lt;/code&gt;, and &lt;code&gt;&amp;lt;list or map&amp;gt;&lt;/code&gt; is a SassScript expression that returns a list or a map.</source>
          <target state="translated">&lt;code&gt;@each&lt;/code&gt; のディレクティブは、通常のフォームがある &lt;code&gt;@each $var in &amp;lt;list or map&amp;gt;&lt;/code&gt; 。 &lt;code&gt;$var&lt;/code&gt; 同じように、任意の変数名にすることができます &lt;code&gt;$length&lt;/code&gt; または &lt;code&gt;$name&lt;/code&gt; 、および &lt;code&gt;&amp;lt;list or map&amp;gt;&lt;/code&gt; 戻りリストやマップというSassScript式です。</target>
        </trans-unit>
        <trans-unit id="0225182baa7696b2fea683be8aa23850c2e7b5b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@each&lt;/code&gt; rule makes it easy to emit styles or evaluate code for each element of a &lt;a href=&quot;../../values/lists&quot;&gt;list&lt;/a&gt; or each pair in a &lt;a href=&quot;../../values/maps&quot;&gt;map&lt;/a&gt;. It&amp;rsquo;s great for repetitive styles that only have a few variations between them. It&amp;rsquo;s usually written &lt;code&gt;@each &amp;lt;variable&amp;gt; in &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;, where the &lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; returns a list. The block is evaluated for each element of the list in turn, which is assigned to the given variable name.</source>
          <target state="translated">&lt;code&gt;@each&lt;/code&gt; のルールは、それが簡単にスタイルを放出するか、の各要素のコードを評価することができる&lt;a href=&quot;../../values/lists&quot;&gt;リスト&lt;/a&gt;または内の各ペア&lt;a href=&quot;../../values/maps&quot;&gt;のマップ&lt;/a&gt;。バリエーションが少ない反復的なスタイルに最適です。これは通常 &lt;code&gt;@each &amp;lt;variable&amp;gt; in &amp;lt;expression&amp;gt; { ... }&lt;/code&gt; 記述され、&lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;式&lt;/a&gt;はリストを返します。ブロックは、リストの各要素に対して順番に評価され、指定された変数名に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="a5d3e0da53895d6c2ca9b6d7ddf835e8c137ddc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@each&lt;/code&gt; rule sets &lt;code&gt;$var&lt;/code&gt; to each item in the list or map, then outputs the styles it contains using that value of &lt;code&gt;$var&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;@each&lt;/code&gt; のルールを設定します &lt;code&gt;$var&lt;/code&gt; 、それはの値が使用して含まれているスタイルを出力し、リストやマップ内の各項目に &lt;code&gt;$var&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="b8e8db811f079dead4aec85b222dc1cd538b7717" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@error&lt;/code&gt; directive throws the value of a SassScript expression as a fatal error, including a nice stack trace. It's useful for validating arguments to mixins and functions. For example:</source>
          <target state="translated">&lt;code&gt;@error&lt;/code&gt; のディレクティブは、素敵なスタックトレースを含む致命的なエラー、などSassScript式の値をスローします。Mixinや関数の引数を検証するのに便利です。例えば：</target>
        </trans-unit>
        <trans-unit id="53f2c089e6de93b3ee7b8e635ec337c2a031aa8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@extend&lt;/code&gt; directive avoids these problems by telling Sass that one selector should inherit the styles of another selector. For example:</source>
          <target state="translated">&lt;code&gt;@extend&lt;/code&gt; のディレクティブは、1つのセレクタが他のセレクタのスタイルを継承する必要があることサスを伝えることで、これらの問題を回避することができます。例えば：</target>
        </trans-unit>
        <trans-unit id="dd24d6037176ab3406afa46dabd5e8fd0a66b44a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@for&lt;/code&gt; directive repeatedly outputs a set of styles. For each repetition, a counter variable is used to adjust the output. The directive has two forms: &lt;code&gt;@for $var from &amp;lt;start&amp;gt; through &amp;lt;end&amp;gt;&lt;/code&gt; and &lt;code&gt;@for $var from &amp;lt;start&amp;gt; to &amp;lt;end&amp;gt;&lt;/code&gt;. Note the difference in the keywords &lt;code&gt;through&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;. &lt;code&gt;$var&lt;/code&gt; can be any variable name, like &lt;code&gt;$i&lt;/code&gt;; &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; are SassScript expressions that should return integers. When &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; is greater than &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; the counter will decrement instead of increment.</source>
          <target state="translated">&lt;code&gt;@for&lt;/code&gt; ディレクティブは、繰り返しスタイルのセットを出力します。繰り返しごとに、カウンター変数を使用して出力を調整します。ディレクティブには2つの形式があります。 &lt;code&gt;@for $var from &amp;lt;start&amp;gt; through &amp;lt;end&amp;gt;&lt;/code&gt; および &lt;code&gt;@for $var from &amp;lt;start&amp;gt; to &amp;lt;end&amp;gt;&lt;/code&gt; です。キーワードの違いに注意し &lt;code&gt;through&lt;/code&gt; と &lt;code&gt;to&lt;/code&gt; 。 &lt;code&gt;$var&lt;/code&gt; は、 &lt;code&gt;$i&lt;/code&gt; などの任意の変数名にすることができます。 &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; は整数を返すSassScript式です。とき &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; 以上である &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; カウンタがインクリメントするのではなく、デクリメントされます。</target>
        </trans-unit>
        <trans-unit id="d5d494b6f3937f7b3c60dc32eb0f3aaa113c3dc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@for&lt;/code&gt; rule, written &lt;code&gt;@for &amp;lt;variable&amp;gt; from &amp;lt;expression&amp;gt; to &amp;lt;expression&amp;gt; { ... }&lt;/code&gt; or &lt;code&gt;@for &amp;lt;variable&amp;gt; from &amp;lt;expression&amp;gt; through &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;, counts up or down from one number (the result of the first &lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt;) to another (the result of the second) and evaluates a block for each number in between. Each number along the way is assigned to the given variable name. If &lt;code&gt;to&lt;/code&gt; is used, the final number is excluded; if &lt;code&gt;through&lt;/code&gt; is used, it's included.</source>
          <target state="translated">&lt;code&gt;@for&lt;/code&gt; ルールは、書かれた &lt;code&gt;@for &amp;lt;variable&amp;gt; from &amp;lt;expression&amp;gt; to &amp;lt;expression&amp;gt; { ... }&lt;/code&gt; または &lt;code&gt;@for &amp;lt;variable&amp;gt; from &amp;lt;expression&amp;gt; through &amp;lt;expression&amp;gt; { ... }&lt;/code&gt; 、カウントアップ又はダウンいずれかから数値（最初の&lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;式の&lt;/a&gt;結果）を別の式（2番目の式の結果）に変換し、その間の各数値のブロックを評価します。途中の各番号は、指定された変数名に割り当てられます。場合 &lt;code&gt;to&lt;/code&gt; 使用され、最終的に数が除外されています。 &lt;code&gt;through&lt;/code&gt; が使用されている場合は、含まれています。</target>
        </trans-unit>
        <trans-unit id="6a6cc80ba19e8e34770568d4790b64ef08713b73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@for&lt;/code&gt; statement sets &lt;code&gt;$var&lt;/code&gt; to each successive number in the specified range and each time outputs the nested styles using that value of &lt;code&gt;$var&lt;/code&gt;. For the form &lt;code&gt;from ... through&lt;/code&gt;, the range &lt;em&gt;includes&lt;/em&gt; the values of &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt;, but the form &lt;code&gt;from ... to&lt;/code&gt; runs up to &lt;em&gt;but not including&lt;/em&gt; the value of &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt;. Using the &lt;code&gt;through&lt;/code&gt; syntax,</source>
          <target state="translated">&lt;code&gt;@for&lt;/code&gt; 文はセット &lt;code&gt;$var&lt;/code&gt; 指定した範囲内の各連続した番号に、それぞれの時間は、その値使用して、ネストされたスタイルを出力 &lt;code&gt;$var&lt;/code&gt; 。フォーム &lt;code&gt;from ... through&lt;/code&gt; 場合、範囲に&lt;em&gt;は&lt;/em&gt; &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; の値が&lt;em&gt;含まれ&lt;/em&gt;ますが、フォーム &lt;code&gt;from ... to&lt;/code&gt; は &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; の値まで含まれ&lt;em&gt;ません&lt;/em&gt;。 &lt;code&gt;through&lt;/code&gt; 構文を使用して、</target>
        </trans-unit>
        <trans-unit id="d73c45d52c35f506c461be84582c5b2c7b61e21e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@forward&lt;/code&gt; rule acts just like &lt;code&gt;@use&lt;/code&gt; when it comes to a module&amp;rsquo;s CSS. Styles from a forwarded module will be included in the compiled CSS output, and the module with the &lt;code&gt;@forward&lt;/code&gt; can &lt;a href=&quot;extend&quot;&gt;extend&lt;/a&gt; it, even if it isn&amp;rsquo;t also &lt;code&gt;@use&lt;/code&gt;d.</source>
          <target state="translated">&lt;code&gt;@forward&lt;/code&gt; ルールは同じように動作する &lt;code&gt;@use&lt;/code&gt; それはモジュールのCSSに来るとき。転送されたモジュールのスタイルはコンパイルされたCSS出力に含まれ、 &lt;code&gt;@forward&lt;/code&gt; 使用したモジュールは、@ &lt;code&gt;@use&lt;/code&gt; dでなくても、それを&lt;a href=&quot;extend&quot;&gt;拡張&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="9eba786d5218457f5f5148db81062de63448cdf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@forward&lt;/code&gt; rule can also load a module with &lt;a href=&quot;use#configuration&quot;&gt;configuration&lt;/a&gt;. This mostly works the same as it does for &lt;code&gt;@use&lt;/code&gt;, with one addition: a &lt;code&gt;@forward&lt;/code&gt; rule&amp;rsquo;s configuration can use the &lt;code&gt;!default&lt;/code&gt; flag in its configuration. This allows a module to change the defaults of an upstream stylesheet while still allowing downstream stylesheets to override them.</source>
          <target state="translated">&lt;code&gt;@forward&lt;/code&gt; のルールもしてモジュールをロードすることができます&lt;a href=&quot;use#configuration&quot;&gt;設定&lt;/a&gt;。これは、 &lt;code&gt;@use&lt;/code&gt; 場合とほとんど同じように機能しますが、1つ追加されます。 &lt;code&gt;@forward&lt;/code&gt; ルールの構成では、構成で &lt;code&gt;!default&lt;/code&gt; フラグを使用できます。これにより、モジュールはアップストリームスタイルシートのデフォルトを変更しながら、ダウンストリームスタイルシートがそれらをオーバーライドできるようになります。</target>
        </trans-unit>
        <trans-unit id="8a48f18648f8f823009940af90f7a3398299a276" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@forward&lt;/code&gt; rule loads a Sass stylesheet and makes its &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt;, and &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt; available when your stylesheet is loaded with the &lt;a href=&quot;use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt;. It makes it possible to organize Sass libraries across many files, while allowing their users to load a single entrypoint file.</source>
          <target state="translated">&lt;code&gt;@forward&lt;/code&gt; ルールをロードサススタイルシートとその可能&lt;a href=&quot;mixin&quot;&gt;ミックスイン&lt;/a&gt;、&lt;a href=&quot;function&quot;&gt;機能&lt;/a&gt;、および&lt;a href=&quot;../variables&quot;&gt;変数は&lt;/a&gt;、あなたのスタイルシートががロードされたときに利用できる&lt;a href=&quot;use&quot;&gt; &lt;code&gt;@use&lt;/code&gt; のルール&lt;/a&gt;。これにより、ユーザーが単一のエントリポイントファイルをロードできるようにしながら、Sassライブラリを多くのファイルにまたがって整理することができます。</target>
        </trans-unit>
        <trans-unit id="edae6f073c38434d3e207e7a5dafb837955a0007" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@if&lt;/code&gt; directive takes a SassScript expression and uses the styles nested beneath it if the expression returns anything other than &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;@if&lt;/code&gt; ディレクティブはSassScript式を取り、以外の表現を返しますどちらかといえば、その下にネストされたスタイルを使用して &lt;code&gt;false&lt;/code&gt; か &lt;code&gt;null&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="97751d4897d5c8ad3677b64fd0bdc183e62db874" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@if&lt;/code&gt; rule is written &lt;code&gt;@if &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;, and it controls whether or not its block gets evaluated (including emitting any styles as CSS). The &lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; usually returns either &lt;a href=&quot;../../values/booleans&quot;&gt;&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/a&gt;&amp;mdash;if the expression returns &lt;code&gt;true&lt;/code&gt;, the block is evaluated, and if the expression returns &lt;code&gt;false&lt;/code&gt; it&amp;rsquo;s not.</source>
          <target state="translated">&lt;code&gt;@if&lt;/code&gt; ルールが書かれている &lt;code&gt;@if &amp;lt;expression&amp;gt; { ... }&lt;/code&gt; 、それは（CSSのような任意のスタイルを発するなど）、そのブロックが評価されますかどうかを制御します。&lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;式は&lt;/a&gt;通常のいずれかを返します&lt;a href=&quot;../../values/booleans&quot;&gt; &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; &lt;/a&gt;表現を返します-if &lt;code&gt;true&lt;/code&gt; ブロックが評価され、そして発現を返す場合 &lt;code&gt;false&lt;/code&gt; そうではありません。</target>
        </trans-unit>
        <trans-unit id="7b1bac589cac69a197e403f499df3a9993010d02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@if&lt;/code&gt; statement can be followed by several &lt;code&gt;@else if&lt;/code&gt; statements and one &lt;code&gt;@else&lt;/code&gt; statement. If the &lt;code&gt;@if&lt;/code&gt; statement fails, the &lt;code&gt;@else if&lt;/code&gt; statements are tried in order until one succeeds or the &lt;code&gt;@else&lt;/code&gt; is reached. For example:</source>
          <target state="translated">&lt;code&gt;@if&lt;/code&gt; 文は、いくつか続くことができる &lt;code&gt;@else if&lt;/code&gt; 文と1つの &lt;code&gt;@else&lt;/code&gt; 声明。場合 &lt;code&gt;@if&lt;/code&gt; 文が失敗し、 &lt;code&gt;@else if&lt;/code&gt; 文は1まで順に試されるが成功するか &lt;code&gt;@else&lt;/code&gt; が到達しています。例えば：</target>
        </trans-unit>
        <trans-unit id="87ed2b45b30496b3ac781e14bbec2d833422c474" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@import&lt;/code&gt; rule has a number of serious issues:</source>
          <target state="translated">&lt;code&gt;@import&lt;/code&gt; のルールは、深刻な問題がいくつかあります：</target>
        </trans-unit>
        <trans-unit id="6f889f3526a88c98f27cf8326bcc19306272b7ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@return&lt;/code&gt; at-rule indicates the value to use as the result of calling a function. It&amp;rsquo;s only allowed within a &lt;code&gt;@function&lt;/code&gt; body, and each &lt;code&gt;@function&lt;/code&gt; must end with a &lt;code&gt;@return&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@return&lt;/code&gt; におけるルールは、関数呼び出しの結果として使用する値を示しています。それが唯一の内で許可されています &lt;code&gt;@function&lt;/code&gt; 体、及び各 &lt;code&gt;@function&lt;/code&gt; で終わらなければなりません &lt;code&gt;@return&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8103b04685af8b03bffdc2e4a7d93a3cd56d4a2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@use&lt;/code&gt; or &lt;code&gt;@import&lt;/code&gt; rule&amp;rsquo;s URL as a string, exactly as it appears in the stylesheet.</source>
          <target state="translated">&lt;code&gt;@use&lt;/code&gt; または &lt;code&gt;@import&lt;/code&gt; 文字列としてルールのURLは、それがスタイルシートに表示されているとおり。</target>
        </trans-unit>
        <trans-unit id="53379d29c03ea52485bc34dcc7e79b10efe878cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@use&lt;/code&gt; rule loads &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt;, and &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt; from other Sass stylesheets, and combines CSS from multiple stylesheets together. Stylesheets loaded by &lt;code&gt;@use&lt;/code&gt; are called &quot;modules&quot;. Sass also provides &lt;a href=&quot;../modules&quot;&gt;built-in modules&lt;/a&gt; full of useful functions.</source>
          <target state="translated">&lt;code&gt;@use&lt;/code&gt; のルールをロードする&lt;a href=&quot;mixin&quot;&gt;ミックスイン&lt;/a&gt;、&lt;a href=&quot;function&quot;&gt;機能&lt;/a&gt;、および&lt;a href=&quot;../variables&quot;&gt;変数&lt;/a&gt;他のサススタイルシートから、と一緒に複数のスタイルシートからCSSを兼ね備えています。 &lt;code&gt;@use&lt;/code&gt; によってロードされたスタイルシートは「モジュール」と呼ばれます。Sassは、便利な機能が満載の&lt;a href=&quot;../modules&quot;&gt;組み込みモジュール&lt;/a&gt;も提供します。</target>
        </trans-unit>
        <trans-unit id="cb66e645f955007af31d85000b8a746fec7c41a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@warn&lt;/code&gt; directive prints the value of a SassScript expression to the standard error output stream. It's useful for libraries that need to warn users of deprecations or recovering from minor mixin usage mistakes. There are two major distinctions between &lt;code&gt;@warn&lt;/code&gt; and &lt;code&gt;@debug&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;@warn&lt;/code&gt; のディレクティブは、標準エラー出力ストリームにSassScript式の値を出力します。これは、ユーザーに非推奨の警告や、軽度のミックスインの使用ミスからの回復を必要とするライブラリーに役立ちます。 &lt;code&gt;@warn&lt;/code&gt; と &lt;code&gt;@debug&lt;/code&gt; には2つの大きな違いがあります。</target>
        </trans-unit>
        <trans-unit id="842f0db216c7751e5b0d64bb0ced32af40468fb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@warn&lt;/code&gt; rule is designed just for that. It&amp;rsquo;s written &lt;code&gt;@warn &amp;lt;expression&amp;gt;&lt;/code&gt; and it prints the value of the &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; (usually a string) for the user, along with a stack trace indicating how the current mixin or function was called. Unlike the &lt;a href=&quot;error&quot;&gt;&lt;code&gt;@error&lt;/code&gt; rule&lt;/a&gt;, though, it doesn&amp;rsquo;t stop Sass entirely.</source>
          <target state="translated">&lt;code&gt;@warn&lt;/code&gt; のルールは、まさにそのために設計されています。 &lt;code&gt;@warn &amp;lt;expression&amp;gt;&lt;/code&gt; と記述され、現在のミックスインまたは関数がどのように呼び出されたかを示すスタックトレースとともに、ユーザーの&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;式&lt;/a&gt;の値（通常は文字列）を出力します。ただし、&lt;a href=&quot;error&quot;&gt; &lt;code&gt;@error&lt;/code&gt; ルール&lt;/a&gt;とは異なり、Sassを完全に停止するわけではありません。</target>
        </trans-unit>
        <trans-unit id="036d9853511ea7f8a9eed6ee63043a942bfb4426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@while&lt;/code&gt; directive takes a SassScript expression and repeatedly outputs the nested styles until the statement evaluates to &lt;code&gt;false&lt;/code&gt;. This can be used to achieve more complex looping than the &lt;code&gt;@for&lt;/code&gt; statement is capable of, although this is rarely necessary. For example:</source>
          <target state="translated">&lt;code&gt;@while&lt;/code&gt; ディレクティブはSassScript式を取り、繰り返しの文評価されるまで、ネストされたスタイルを出力し &lt;code&gt;false&lt;/code&gt; 。これは、 &lt;code&gt;@for&lt;/code&gt; ステートメントで可能なループよりも複雑なループを実現するために使用できますが、これが必要になることはほとんどありません。例えば：</target>
        </trans-unit>
        <trans-unit id="b1eed5d1b65fbddfb1ff1766c10939e5ff18aba3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@while&lt;/code&gt; rule, written &lt;code&gt;@while &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;, evaluates its block if its &lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;expression&lt;/a&gt; returns &lt;code&gt;true&lt;/code&gt;. Then, if its expression still returns &lt;code&gt;true&lt;/code&gt;, it evaluates its block again. This continues until the expression finally returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@while&lt;/code&gt; ルール、書き込ま &lt;code&gt;@while &amp;lt;expression&amp;gt; { ... }&lt;/code&gt; の場合、そのブロックを評価&lt;a href=&quot;../../syntax/structure#expressions&quot;&gt;する発現&lt;/a&gt;戻り &lt;code&gt;true&lt;/code&gt; 。次に、その式がまだ &lt;code&gt;true&lt;/code&gt; を返す場合、そのブロックを再度評価します。これは、式が最終的に &lt;code&gt;false&lt;/code&gt; を返すまで続きます。</target>
        </trans-unit>
        <trans-unit id="6df43083b5d905e4f6e4599386fbd9b21782a3aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;darken()&lt;/code&gt; function decreases lightness by a fixed amount, which is often not the desired effect. To make a color a certain percentage darker than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;color.scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;darken()&lt;/code&gt; 関数は、多くの場合、所望の効果ではない固定量により明るさを減少させます。以前よりも一定の割合で色を暗くするには、代わりに&lt;a href=&quot;#scale&quot;&gt; &lt;code&gt;color.scale()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="f15eab2ee580d26be0dc39d5d78797282d2640b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;desaturate()&lt;/code&gt; function decreases saturation by a fixed amount, which is often not the desired effect. To make a color a certain percentage less saturated than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;color.scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;desaturate()&lt;/code&gt; 関数は、多くの場合、所望の効果ではない固定量により彩度を低下させます。以前よりも一定の割合で色の&lt;a href=&quot;#scale&quot;&gt; &lt;code&gt;color.scale()&lt;/code&gt; &lt;/a&gt;には、代わりにcolor.scale（）を使用します。</target>
        </trans-unit>
        <trans-unit id="3865c4ef8bb9e296ed155f02c937738292eba0d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hide&lt;/code&gt; form means that the listed members shouldn&amp;rsquo;t be forwarded, but everything else should. The &lt;code&gt;show&lt;/code&gt; form means that &lt;em&gt;only&lt;/em&gt; the named members should be forwarded. In both forms, you list the names of mixins, functions, or variables (including the &lt;code&gt;$&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;hide&lt;/code&gt; フォームの手段記載されているメンバーが転送されないはずですが、他のすべてがなければならないこと。 &lt;code&gt;show&lt;/code&gt; フォーム手段&lt;em&gt;のみ&lt;/em&gt;という名前のメンバーを転送する必要があります。どちらの形式でも、ミックスイン、関数、または変数（ &lt;code&gt;$&lt;/code&gt; を含む）の名前をリストします。</target>
        </trans-unit>
        <trans-unit id="2653cd871e8a970f8c3859e972619b3b4b753f85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;info&lt;/code&gt; property contains a string that includes tab-separated information about the Sass implementation. For Dart Sass, this is the version of Dart Sass and the version of the &lt;a href=&quot;https://webdev.dartlang.org/tools/dart2js&quot;&gt;dart2js&lt;/a&gt; compiler used to compile it to JavaScript; for LibSass, it&amp;rsquo;s the version of LibSass and the version of &lt;a href=&quot;https://www.npmjs.com/package/node-sass&quot;&gt;Node Sass&lt;/a&gt; that wraps it.</source>
          <target state="translated">&lt;code&gt;info&lt;/code&gt; プロパティは、サスの実装についてタブ区切りの情報が含まれた文字列が含まれています。Dart Sassの場合、これはDart Sassのバージョンであり、JavaScriptにコンパイルするために使用される&lt;a href=&quot;https://webdev.dartlang.org/tools/dart2js&quot;&gt;dart2js&lt;/a&gt;コンパイラのバージョンです。LibSassのために、それはLibSassのバージョンとのバージョンだ&lt;a href=&quot;https://www.npmjs.com/package/node-sass&quot;&gt;ノードサス&lt;/a&gt;それをラップします。</target>
        </trans-unit>
        <trans-unit id="3be55fd27d6d1ab938ce65274a35e09cfe42e00e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lighten()&lt;/code&gt; function increases lightness by a fixed amount, which is often not the desired effect. To make a color a certain percentage lighter than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;lighten()&lt;/code&gt; 関数は、多くの場合、所望の効果ではない固定量により明るさを増加させます。以前よりも一定の割合で色を明るくするには、代わりに&lt;a href=&quot;#scale&quot;&gt; &lt;code&gt;scale()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="a0a82c740138100094d9ee76c788128f778853e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opacify()&lt;/code&gt; function increases the alpha channel by a fixed amount, which is often not the desired effect. To make a color a certain percentage more opaque than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;opacify()&lt;/code&gt; 関数は、多くの場合、所望の効果ではない一定量でアルファチャンネルを増加させます。色を以前よりも一定の割合で不透明にするには、代わりに&lt;a href=&quot;#scale&quot;&gt; &lt;code&gt;scale()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="f40efbde0e63d7b92586646b70aa859773ed959b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;saturate()&lt;/code&gt; function increases saturation by a fixed amount, which is often not the desired effect. To make a color a certain percentage more saturated than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;saturate()&lt;/code&gt; 関数は、多くの場合、所望の効果ではない固定量だけ彩度を増加させます。以前よりも一定の割合で色を飽和させるには、代わりに&lt;a href=&quot;#scale&quot;&gt; &lt;code&gt;scale()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="28bcccc07982bc5e35fca76e43cb56f152b6b2fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transparentize()&lt;/code&gt; function decreases the alpha channel by a fixed amount, which is often not the desired effect. To make a color a certain percentage more transparent than it was before, use &lt;a href=&quot;#scale&quot;&gt;&lt;code&gt;color.scale()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;transparentize()&lt;/code&gt; 関数は、多くの場合、所望の効果ではない一定量でアルファチャンネルを減少させます。以前よりも一定の割合で色を透明にするには、代わりに&lt;a href=&quot;#scale&quot;&gt; &lt;code&gt;color.scale()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="f599890a4f44b440fdb51059955b49736633394d" translate="yes" xml:space="preserve">
          <source>The CSS in nested imports is evaluated like a mixin, which means that any &lt;a href=&quot;../style-rules/parent-selector&quot;&gt;parent selectors&lt;/a&gt; will refer to the selector in which the stylesheet is nested.</source>
          <target state="translated">ネストされたインポートのCSSはミックスインのように評価されます。つまり、&lt;a href=&quot;../style-rules/parent-selector&quot;&gt;親セレクター&lt;/a&gt;は、スタイルシートがネストされているセレクターを参照します。</target>
        </trans-unit>
        <trans-unit id="2bccc239d00eaf8f1c0f5a285a794c300a62c09a" translate="yes" xml:space="preserve">
          <source>The Dart Sass executable can be invoked in one of two modes.</source>
          <target state="translated">Dart Sass実行ファイルは、2つのモードのいずれかで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="9823180853274c3ed3c798208454cbc6cdd7343f" translate="yes" xml:space="preserve">
          <source>The Indented Syntax</source>
          <target state="translated">インデント構文</target>
        </trans-unit>
        <trans-unit id="a79922841f2b9904dc1ccf8c993b6a2a89f4cee3" translate="yes" xml:space="preserve">
          <source>The Ruby Sass executable can be invoked in one of two modes.</source>
          <target state="translated">Ruby Sass実行ファイルは、2つのモードのいずれかで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b2855bfaa1d17b7d3ed0e26fa30a8df99f684a0a" translate="yes" xml:space="preserve">
          <source>The SCSS syntax uses the file extension &lt;code&gt;.scss&lt;/code&gt;. With a few small exceptions, it&amp;rsquo;s a superset of CSS, which means essentially &lt;strong&gt;all valid CSS is valid SCSS as well&lt;/strong&gt;. Because of its similarity to CSS, it&amp;rsquo;s the easiest syntax to get used to and the most popular.</source>
          <target state="translated">SCSS構文は、ファイル拡張子 &lt;code&gt;.scss&lt;/code&gt; を使用します。いくつかの小さな例外を除いて、これはCSSのスーパーセット&lt;strong&gt;です。&lt;/strong&gt;つまり、基本的に&lt;strong&gt;すべての有効なCSSも有効なSCSSです&lt;/strong&gt;。CSSと類似しているため、これは最も慣れやすく、最も人気のある構文です。</target>
        </trans-unit>
        <trans-unit id="40cd0e11b0583d27d0d7156f2bf116a792340ddc" translate="yes" xml:space="preserve">
          <source>The Sass JSAPI makes source maps available using the &lt;a href=&quot;#result-map&quot;&gt;&lt;code&gt;result.map&lt;/code&gt; field&lt;/a&gt;.</source>
          <target state="translated">Sass JSAPIは、&lt;a href=&quot;#result-map&quot;&gt; &lt;code&gt;result.map&lt;/code&gt; フィールド&lt;/a&gt;を使用してソースマップを利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="7dbd956ef12d159ddf033d9c2ae5230695500357" translate="yes" xml:space="preserve">
          <source>The Sass command-line tool will use the file extension to determine which syntax you are using, but there's not always a filename. The &lt;code&gt;sass&lt;/code&gt; command-line program defaults to the indented syntax but you can pass the &lt;code&gt;--scss&lt;/code&gt; option to it if the input should be interpreted as SCSS syntax. Alternatively, you can use the &lt;code&gt;scss&lt;/code&gt; command-line program which is exactly like the &lt;code&gt;sass&lt;/code&gt; program but it defaults to assuming the syntax is SCSS.</source>
          <target state="translated">Sassコマンドラインツールは、ファイル拡張子を使用して、使用している構文を判別しますが、常にファイル名があるとは限りません。 &lt;code&gt;sass&lt;/code&gt; コマンドラインプログラムのデフォルトのインデント構文がありますが、渡すことができ &lt;code&gt;--scss&lt;/code&gt; 入力はSCSS構文として解釈されるべきであるならば、それにオプションを選択します。または、 &lt;code&gt;sass&lt;/code&gt; プログラムとまったく同じである &lt;code&gt;scss&lt;/code&gt; コマンドラインプログラムを使用することもできますが、デフォルトでは構文がSCSSであると想定しています。</target>
        </trans-unit>
        <trans-unit id="49cc07728709e0752a5bd9c9ca000ab89c40539a" translate="yes" xml:space="preserve">
          <source>The Sass core library provides a couple advanced functions for working with variables. The &lt;a href=&quot;modules/meta#variable-exists&quot;&gt;&lt;code&gt;meta.variable-exists()&lt;/code&gt; function&lt;/a&gt; returns whether a variable with the given name exists in the current scope, and the &lt;a href=&quot;modules/meta#global-variable-exists&quot;&gt;&lt;code&gt;meta.global-variable-exists()&lt;/code&gt; function&lt;/a&gt; does the same but only for the global scope.</source>
          <target state="translated">Sassコアライブラリは、変数を操作するためのいくつかの高度な関数を提供します。&lt;a href=&quot;modules/meta#variable-exists&quot;&gt; &lt;code&gt;meta.variable-exists()&lt;/code&gt; 関数の&lt;/a&gt;指定された名前の変数が現在のスコープに存在するかどうか戻り、&lt;a href=&quot;modules/meta#global-variable-exists&quot;&gt; &lt;code&gt;meta.global-variable-exists()&lt;/code&gt; 関数は、&lt;/a&gt;唯一のグローバルスコープの同じを行います。</target>
        </trans-unit>
        <trans-unit id="e97c8a0fe445977b0b6a657b28d30949285d2895" translate="yes" xml:space="preserve">
          <source>The Sass migrator automatically updates your Sass files to help you move on to the latest and greatest version of the language. Each of its commands migrates a single feature, to give you as much control as possible over what you update and when.</source>
          <target state="translated">Sass migrator は、あなたの Sass ファイルを自動的に更新し、最新かつ最高のバージョンの言語への移行を支援します。それぞれのコマンドは単一の機能を移行し、いつ、何を更新するかを可能な限りコントロールすることができます。</target>
        </trans-unit>
        <trans-unit id="d20e8542d5b0783516e2e0e242a1e43d12c5a8ad" translate="yes" xml:space="preserve">
          <source>The Sass module provides two functions with similar APIs.</source>
          <target state="translated">Sassモジュールは、類似のAPIを持つ2つの関数を提供します。</target>
        </trans-unit>
        <trans-unit id="5e7a80e2ce0603f294bc4436485a59be5b53a3b8" translate="yes" xml:space="preserve">
          <source>The Sass team discourages the continued use of the &lt;code&gt;@import&lt;/code&gt; rule. Sass will &lt;a href=&quot;https://github.com/sass/sass/blob/master/accepted/module-system.md#timeline&quot;&gt;gradually phase it out&lt;/a&gt; over the next few years, and eventually remove it from the language entirely. Prefer the &lt;a href=&quot;use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; instead. (Note that only Dart Sass currently supports &lt;code&gt;@use&lt;/code&gt;. Users of other implementations must use the &lt;code&gt;@import&lt;/code&gt; rule instead.)</source>
          <target state="translated">Sassチームは、 &lt;code&gt;@import&lt;/code&gt; ルールの継続的な使用を推奨していません。Sassは、今後数年間で&lt;a href=&quot;https://github.com/sass/sass/blob/master/accepted/module-system.md#timeline&quot;&gt;徐々に段階&lt;/a&gt;的に廃止し、最終的には言語から完全に削除します。優先&lt;a href=&quot;use&quot;&gt; &lt;code&gt;@use&lt;/code&gt; のルールを&lt;/a&gt;代わりに。（現在、Dart Sassのみが &lt;code&gt;@use&lt;/code&gt; をサポートしていることに注意してください。他の実装のユーザーは、代わりに &lt;code&gt;@import&lt;/code&gt; ルールを使用する必要があります。）</target>
        </trans-unit>
        <trans-unit id="5ad5ee8442b7be18229c8032bdbe771af8814c90" translate="yes" xml:space="preserve">
          <source>The Sass value &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Sass値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="249cb1c95e1a126a7b34c1bcc56fae2dea8359d9" translate="yes" xml:space="preserve">
          <source>The Sass value &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Sass値は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9b4397f4896d98b65aec6ed8c3c675b6f5aa9a50" translate="yes" xml:space="preserve">
          <source>The Sass value &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">Sass値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="36ec8433431c6f31089da9aad58c0b8ed355cd19" translate="yes" xml:space="preserve">
          <source>The absolute path of the input file passed as the &lt;a href=&quot;#file&quot;&gt;&lt;code&gt;file&lt;/code&gt; option&lt;/a&gt;, or &lt;code&gt;&quot;data&quot;&lt;/code&gt; if the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt; was passed instead.</source>
          <target state="translated">&lt;a href=&quot;#file&quot;&gt; &lt;code&gt;file&lt;/code&gt; オプション&lt;/a&gt;として渡された入力ファイルの絶対パス、または&lt;a href=&quot;#data&quot;&gt; &lt;code&gt;data&lt;/code&gt; &lt;/a&gt;オプションが代わりに渡された場合は &lt;code&gt;&quot;data&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="629ffa2442fc4371dc88961319dce02104a6b90d" translate="yes" xml:space="preserve">
          <source>The alpha channel of a color can be adjusted using the &lt;a href=&quot;sass/script/functions#opacify-instance_method&quot;&gt;opacify&lt;/a&gt; and &lt;a href=&quot;sass/script/functions#transparentize-instance_method&quot;&gt;transparentize&lt;/a&gt; functions. For example:</source>
          <target state="translated">色のアルファチャネルは、&lt;a href=&quot;sass/script/functions#opacify-instance_method&quot;&gt;不透明化&lt;/a&gt;および&lt;a href=&quot;sass/script/functions#transparentize-instance_method&quot;&gt;透明化&lt;/a&gt;機能を使用して調整できます。例えば：</target>
        </trans-unit>
        <trans-unit id="9f0c9af133a56cf709eabce5c6b2068a2f64a4ff" translate="yes" xml:space="preserve">
          <source>The block of content passed to a mixin are evaluated in the scope where the block is defined, not in the scope of the mixin. This means that variables local to the mixin &lt;strong&gt;cannot&lt;/strong&gt; be used within the passed style block and variables will resolve to the global value:</source>
          <target state="translated">ミックスインに渡されたコンテンツのブロックは、ミックスインのスコープではなく、ブロックが定義されているスコープで評価されます。つまり、ミックスインにローカルな変数は、渡されたスタイルブロック内では使用&lt;strong&gt;できず&lt;/strong&gt;、変数はグローバル値に解決されます。</target>
        </trans-unit>
        <trans-unit id="1bcb97b641d09ebb9846d4a65721d499bc5f2c78" translate="yes" xml:space="preserve">
          <source>The built-in &lt;code&gt;if()&lt;/code&gt; function allows you to branch on a condition and returns only one of two possible outcomes. It can be used in any script context. The &lt;code&gt;if&lt;/code&gt; function only evaluates the argument corresponding to the one that it will return -- this allows you to refer to variables that may not be defined or to have calculations that would otherwise cause an error (E.g. divide by zero).</source>
          <target state="translated">組み込みの &lt;code&gt;if()&lt;/code&gt; 関数を使用すると、条件に基づいて分岐し、2つの可能な結果のうち1つだけを返すことができます。任意のスクリプトコンテキストで使用できます。 &lt;code&gt;if&lt;/code&gt; 関数は唯一それが返されることを1に対応する引数を評価します-これはあなたが定義されていない可能性変数を参照するか、そうでない場合（ゼロによる除算たとえば）エラーの原因となる計算を持つことができます。</target>
        </trans-unit>
        <trans-unit id="ab48b414878c480f8c51b965b64c4b9a5d4944bb" translate="yes" xml:space="preserve">
          <source>The column of &lt;a href=&quot;#error-line&quot;&gt;&lt;code&gt;error.line&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;#error-file&quot;&gt;&lt;code&gt;error.file&lt;/code&gt;&lt;/a&gt; on which the error occurred.</source>
          <target state="translated">エラーが発生した&lt;a href=&quot;#error-file&quot;&gt; &lt;code&gt;error.file&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;#error-line&quot;&gt; &lt;code&gt;error.line&lt;/code&gt; &lt;/a&gt;の列。</target>
        </trans-unit>
        <trans-unit id="a7fd5041403501eaa3a3142efda256c050688b7b" translate="yes" xml:space="preserve">
          <source>The compiled CSS, as a &lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;Buffer&lt;/a&gt;. This can be converted to a string by calling &lt;a href=&quot;https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end&quot;&gt;&lt;code&gt;Buffer.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コンパイルされたCSSを&lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;バッファ&lt;/a&gt;として。これは、&lt;a href=&quot;https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end&quot;&gt; &lt;code&gt;Buffer.toString()&lt;/code&gt; を&lt;/a&gt;呼び出すことで文字列に変換できます。</target>
        </trans-unit>
        <trans-unit id="5911b098efb0f894cf7becb1324dc18dcf7724c3" translate="yes" xml:space="preserve">
          <source>The different meanings of &lt;code&gt;-&lt;/code&gt; in Sass take precedence in the following order:</source>
          <target state="translated">Sassでの &lt;code&gt;-&lt;/code&gt; のさまざまな意味は、次の順序で優先されます。</target>
        </trans-unit>
        <trans-unit id="bd67186bd98e8190eb31017e67db7ed517d63d54" translate="yes" xml:space="preserve">
          <source>The different meanings of &lt;code&gt;-&lt;/code&gt; take precedence in the following order:</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; のさまざまな意味は、次の順序で優先されます。</target>
        </trans-unit>
        <trans-unit id="411aca0656eb98a728ef767976eddacbf1ed4c24" translate="yes" xml:space="preserve">
          <source>The equality operators return whether or not two values are the same. They&amp;rsquo;re written &lt;code&gt;&amp;lt;expression&amp;gt; == &amp;lt;expression&amp;gt;&lt;/code&gt;, which returns whether two &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;expressions&lt;/a&gt; are equal, and &lt;code&gt;&amp;lt;expression&amp;gt; != &amp;lt;expression&amp;gt;&lt;/code&gt;, which returns whether two expressions are &lt;em&gt;not&lt;/em&gt; equal. Two values are considered equal if they&amp;rsquo;re the same type &lt;em&gt;and&lt;/em&gt; the same value, which means different things for different types:</source>
          <target state="translated">等式演算子は、2つの値が同じであるかどうかを返します。彼らが書かれている &lt;code&gt;&amp;lt;expression&amp;gt; == &amp;lt;expression&amp;gt;&lt;/code&gt; 、2かどうかを返す&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;式が&lt;/a&gt;等しく、 &lt;code&gt;&amp;lt;expression&amp;gt; != &amp;lt;expression&amp;gt;&lt;/code&gt; 、そのリターン2つの式があるかどうか&lt;em&gt;ではない&lt;/em&gt;に等しいが。 2つの値が同じタイプ&lt;em&gt;で&lt;/em&gt;同じ値である場合、2つの値は等しいと見なされます。つまり、タイプごとに異なることを意味します。</target>
        </trans-unit>
        <trans-unit id="91bc219ab8ac1aec885b10df0e7b5efb82c47f13" translate="yes" xml:space="preserve">
          <source>The exact format of the debug message varies from implementation to implementation. This is what it looks like in Dart Sass:</source>
          <target state="translated">デバッグメッセージの正確な形式は実装によって異なります。Dart Sassではこのようになっています。</target>
        </trans-unit>
        <trans-unit id="2f6d331e3a47aaaeb0efa6e128428c63dad27747" translate="yes" xml:space="preserve">
          <source>The exact format of the error and stack trace varies from implementation to implementation, and can also depend on your build system. This is what it looks like in Dart Sass when run from the command line:</source>
          <target state="translated">エラーとスタックトレースの正確な形式は実装によって異なり、また、ビルドシステムにも依存します。コマンドラインからDart Sassを実行すると、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3f11145521151b80c5c3bc7f7d5d9191835bdf80" translate="yes" xml:space="preserve">
          <source>The exact format of the warning and stack trace varies from implementation to implementation. This is what it looks like in Dart Sass:</source>
          <target state="translated">警告やスタックトレースの正確な形式は実装によって異なります。Dart Sassではこのようになっています。</target>
        </trans-unit>
        <trans-unit id="9b92a4c7223dc172f932e908e2fd37b99a3b5469" translate="yes" xml:space="preserve">
          <source>The following features are supported:</source>
          <target state="translated">以下の機能に対応しています。</target>
        </trans-unit>
        <trans-unit id="19fea2b888e49ae8a6f6f13465e6dc849402cf66" translate="yes" xml:space="preserve">
          <source>The functions in this module inspect and manipulate selectors. Whenever they return a selector, it&amp;rsquo;s always a comma-separated &lt;a href=&quot;../values/lists&quot;&gt;list&lt;/a&gt; (the selector list) that contains space-separated lists (the complex selectors) that contain &lt;a href=&quot;../values/strings#unquoted&quot;&gt;unquoted strings&lt;/a&gt; (the compound selectors). For example, the selector &lt;code&gt;.main aside:hover, .sidebar p&lt;/code&gt; would be returned as:</source>
          <target state="translated">このモジュールの関数は、セレクターを検査および操作します。セレクターを返す場合は常に、&lt;a href=&quot;../values/strings#unquoted&quot;&gt;引用符で囲まれていない文字列&lt;/a&gt;（複合セレクター）を含むスペース区切りのリスト（複合セレクター）を含むコンマ区切りの&lt;a href=&quot;../values/lists&quot;&gt;リスト&lt;/a&gt;（セレクターリスト）です。たとえば、セレクター &lt;code&gt;.main aside:hover, .sidebar p&lt;/code&gt; は次のように返されます。</target>
        </trans-unit>
        <trans-unit id="f917e97c3a12a6186a7ac26d1e2c5bea57b4a97d" translate="yes" xml:space="preserve">
          <source>The global name of this function is &lt;code&gt;compa&lt;strong&gt;ra&lt;/strong&gt;ble&lt;/code&gt;, but when it was added to the &lt;code&gt;sass:math&lt;/code&gt; module the name was changed to &lt;code&gt;compa&lt;strong&gt;ti&lt;/strong&gt;ble&lt;/code&gt; to more clearly convey what the function does.</source>
          <target state="translated">この機能のグローバル名は &lt;code&gt;compa&lt;strong&gt;ra&lt;/strong&gt;ble&lt;/code&gt; 、それが追加されたときに &lt;code&gt;sass:math&lt;/code&gt; モジュール名に変更された &lt;code&gt;compa&lt;strong&gt;ti&lt;/strong&gt;ble&lt;/code&gt; より明確に機能が何を伝えるために。</target>
        </trans-unit>
        <trans-unit id="c07ae330d5f2e56007474c07d2b2acf32e6179cc" translate="yes" xml:space="preserve">
          <source>The hue is a number between &lt;code&gt;0deg&lt;/code&gt; and &lt;code&gt;360deg&lt;/code&gt; (inclusive). The saturation and lightness are numbers between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). All these numbers may be &lt;a href=&quot;values/numbers#units&quot;&gt;unitless&lt;/a&gt;. The alpha channel can be specified as either a unitless number between 0 and 1 (inclusive), or a percentage between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive).</source>
          <target state="translated">色相は、 &lt;code&gt;0deg&lt;/code&gt; から &lt;code&gt;360deg&lt;/code&gt; までの数値です。彩度と明度は、 &lt;code&gt;0%&lt;/code&gt; から &lt;code&gt;100%&lt;/code&gt; までの数値です。これらの数値はすべて&lt;a href=&quot;values/numbers#units&quot;&gt;単位&lt;/a&gt;がない場合があります。アルファチャンネルは、0と1（含む）の間の単位のない数、又は間のパーセンテージのいずれかとして指定することができ &lt;code&gt;0%&lt;/code&gt; と &lt;code&gt;100%&lt;/code&gt; （包括的）。</target>
        </trans-unit>
        <trans-unit id="35bfd02780d11ebf66e10972c6d36c9b4995652b" translate="yes" xml:space="preserve">
          <source>The hue is a number between &lt;code&gt;0deg&lt;/code&gt; and &lt;code&gt;360deg&lt;/code&gt; (inclusive). The whiteness and blackness are numbers between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive). The hue may be &lt;a href=&quot;../values/numbers#units&quot;&gt;unitless&lt;/a&gt;, but the whiteness and blackness must have unit &lt;code&gt;%&lt;/code&gt;. The alpha channel can be specified as either a unitless number between 0 and 1 (inclusive), or a percentage between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; (inclusive).</source>
          <target state="translated">色相は、 &lt;code&gt;0deg&lt;/code&gt; から &lt;code&gt;360deg&lt;/code&gt; までの数値です。白さと黒さは &lt;code&gt;0%&lt;/code&gt; から &lt;code&gt;100%&lt;/code&gt; までの数値です。色相は&lt;a href=&quot;../values/numbers#units&quot;&gt;単位&lt;/a&gt;がない場合がありますが、白さと黒の単位は &lt;code&gt;%&lt;/code&gt; でなければなりません。アルファチャンネルは、0と1（含む）の間の単位のない数、又は間のパーセンテージのいずれかとして指定することができ &lt;code&gt;0%&lt;/code&gt; と &lt;code&gt;100%&lt;/code&gt; （包括的）。</target>
        </trans-unit>
        <trans-unit id="46c43ea532f48970a41f84360de25891f628d9cb" translate="yes" xml:space="preserve">
          <source>The indented syntax looks like this:</source>
          <target state="translated">インデントされた構文は次のようになります。</target>
        </trans-unit>
        <trans-unit id="21ec2f9027347a7f5f44a91224336d28cb8d15a0" translate="yes" xml:space="preserve">
          <source>The indented syntax was Sass&amp;rsquo;s original syntax, and so it uses the file extension &lt;code&gt;.sass&lt;/code&gt;. Because of this extension, it&amp;rsquo;s sometimes just called &amp;ldquo;Sass&amp;rdquo;. The indented syntax supports all the same features as SCSS, but it uses indentation instead of curly braces and semicolons to describe the format of the document.</source>
          <target state="translated">インデントされた構文はSassの元の構文であるため、ファイル拡張子 &lt;code&gt;.sass&lt;/code&gt; を使用します。この拡張機能のため、単に「Sass」と呼ばれることもあります。インデントされた構文はSCSSと同じ機能をすべてサポートしますが、中括弧やセミコロンの代わりにインデントを使用してドキュメントの形式を記述します。</target>
        </trans-unit>
        <trans-unit id="c4902488b96afeba8e351c58307203dd93e55c48" translate="yes" xml:space="preserve">
          <source>The initial keys and values of the map are undefined. They must be set using the &lt;a href=&quot;#map-setkey-index-key&quot;&gt;&lt;code&gt;setKey()&lt;/code&gt; method&lt;/a&gt; and the &lt;a href=&quot;#map-setvalue-index-value&quot;&gt;&lt;code&gt;setValue()&lt;/code&gt; method&lt;/a&gt; before accessing them or passing the map back to Sass.</source>
          <target state="translated">マップの初期キーと値は未定義です。それらにアクセスしたり、マップをSassに戻したりする前に、&lt;a href=&quot;#map-setkey-index-key&quot;&gt; &lt;code&gt;setKey()&lt;/code&gt; メソッド&lt;/a&gt;と&lt;a href=&quot;#map-setvalue-index-value&quot;&gt; &lt;code&gt;setValue()&lt;/code&gt; メソッド&lt;/a&gt;を使用して設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="cc75b255410e0f231915e9a6ce5657dd664328ac" translate="yes" xml:space="preserve">
          <source>The initial values of the list elements are undefined. These elements must be set using the &lt;a href=&quot;#list-setvalue-index-value&quot;&gt;&lt;code&gt;setValue()&lt;/code&gt; method&lt;/a&gt; before accessing them or passing the list back to Sass.</source>
          <target state="translated">リスト要素の初期値は未定義です。これらの要素は、それらにアクセスする前、またはリストをSassに戻す前に、&lt;a href=&quot;#list-setvalue-index-value&quot;&gt; &lt;code&gt;setValue()&lt;/code&gt; メソッド&lt;/a&gt;を使用して設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2163b399ef4c7e2507a390b0834022d2945f43c7" translate="yes" xml:space="preserve">
          <source>The input file is parsed as &lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt; if its extension is &lt;code&gt;.scss&lt;/code&gt; or as the &lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt; if its extension is &lt;code&gt;.sass&lt;/code&gt;. If it doesn&amp;rsquo;t have one of these two extensions, or if it comes from standard input, it&amp;rsquo;s parsed as the indented syntax by default. This can be controlled with the &lt;a href=&quot;#scss&quot;&gt;&lt;code&gt;--scss&lt;/code&gt; flag&lt;/a&gt;.</source>
          <target state="translated">入力ファイルは次のように解析され&lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt;その拡張子がある場合 &lt;code&gt;.scss&lt;/code&gt; かのように&lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;インデント構文&lt;/a&gt;の拡張機能がある場合 &lt;code&gt;.sass&lt;/code&gt; 。これらの2つの拡張機能のいずれかがない場合、または標準入力からのものである場合、デフォルトではインデントされた構文として解析されます。これは&lt;a href=&quot;#scss&quot;&gt; &lt;code&gt;--scss&lt;/code&gt; フラグで&lt;/a&gt;制御できます。</target>
        </trans-unit>
        <trans-unit id="65f157d77ebfafa2731f0aa177168b912acaa0cb" translate="yes" xml:space="preserve">
          <source>The input file is parsed as &lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt; if its extension is &lt;code&gt;.scss&lt;/code&gt;, as the &lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt; if its extension is &lt;code&gt;.sass&lt;/code&gt;, or as &lt;a href=&quot;../at-rules/import#importing-css&quot;&gt;plain CSS&lt;/a&gt; if its extension is &lt;code&gt;.css&lt;/code&gt;. If it doesn&amp;rsquo;t have one of these three extensions, or if it comes from standard input, it&amp;rsquo;s parsed as SCSS by default. This can be controlled with the &lt;a href=&quot;#indented&quot;&gt;&lt;code&gt;--indented&lt;/code&gt; flag&lt;/a&gt;.</source>
          <target state="translated">入力ファイルは、拡張子が &lt;code&gt;.scss&lt;/code&gt; の場合は&lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt;として、拡張子が &lt;code&gt;.sass&lt;/code&gt; の場合は&lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;インデントされた構文&lt;/a&gt;として、拡張子が &lt;code&gt;.css&lt;/code&gt; の場合は&lt;a href=&quot;../at-rules/import#importing-css&quot;&gt;プレーンCSS&lt;/a&gt;として解析されます。これらの3つの拡張機能のいずれかがない場合、または標準入力からのものである場合、デフォルトでSCSSとして解析されます。これは、&lt;a href=&quot;#indented&quot;&gt; &lt;code&gt;--indented&lt;/code&gt; &lt;/a&gt;フラグで制御できます。</target>
        </trans-unit>
        <trans-unit id="abc67cfb01cacb557f8249bd4fd0217570606bf9" translate="yes" xml:space="preserve">
          <source>The keywords are returned as a map from argument names as unquoted strings (not including &lt;code&gt;$&lt;/code&gt;) to the values of those arguments.</source>
          <target state="translated">キーワードは、引用符で囲まれていない文字列（ &lt;code&gt;$&lt;/code&gt; を含まない）としての引数名からそれらの引数の値へのマップとして返​​されます。</target>
        </trans-unit>
        <trans-unit id="258da41117a38a10268ce6458531112c24def106" translate="yes" xml:space="preserve">
          <source>The length of the resulting list is the length of the shortest list.</source>
          <target state="translated">結果として得られるリストの長さは、最短のリストの長さです。</target>
        </trans-unit>
        <trans-unit id="b4b40069f33bd6ccd0979468cea7082518ea2c50" translate="yes" xml:space="preserve">
          <source>The line in &lt;a href=&quot;#error-file&quot;&gt;&lt;code&gt;error.file&lt;/code&gt;&lt;/a&gt; on which the error occurred.</source>
          <target state="translated">エラーが発生した&lt;a href=&quot;#error-file&quot;&gt; &lt;code&gt;error.file&lt;/code&gt; &lt;/a&gt;の行。</target>
        </trans-unit>
        <trans-unit id="f99bafff4bc0c23462183c18f83b139c5bb10044" translate="yes" xml:space="preserve">
          <source>The location of parse errors can be accessed through implementation-specific APIs. For example, in Dart Sass you can access &lt;a href=&quot;https://pub.dartlang.org/documentation/sass/latest/sass/SassException/span.html&quot;&gt;&lt;code&gt;SassException.span&lt;/code&gt;&lt;/a&gt;, and in Node Sass&amp;rsquo;s and Dart Sass&amp;rsquo;s JSAPI you can access the &lt;a href=&quot;https://github.com/sass/node-sass#error-object&quot;&gt;&lt;code&gt;file&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, and &lt;code&gt;column&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="translated">解析エラーの場所には、実装固有のAPIを介してアクセスできます。たとえば、Dart Sassでは&lt;a href=&quot;https://pub.dartlang.org/documentation/sass/latest/sass/SassException/span.html&quot;&gt; &lt;code&gt;SassException.span&lt;/code&gt; &lt;/a&gt;にアクセスでき、NodeSassとDartSassのJSAPIでは、&lt;a href=&quot;https://github.com/sass/node-sass#error-object&quot;&gt; &lt;code&gt;file&lt;/code&gt; 、 &lt;code&gt;line&lt;/code&gt; 、および &lt;code&gt;column&lt;/code&gt; &lt;/a&gt;プロパティにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="b5ecca3ec18dfc00e101be629990aabccaac98c6" translate="yes" xml:space="preserve">
          <source>The migrator currently supports only one migration, but expect more to come as the Sass language continues to evolve!</source>
          <target state="translated">マイグレータは現在1つのマイグレーションしかサポートしていませんが、Sass言語が進化し続ける中で、さらに多くのマイグレータが登場することを期待しています!</target>
        </trans-unit>
        <trans-unit id="4df49a4caa7694bdcf35284bcfc20924016482ef" translate="yes" xml:space="preserve">
          <source>The module URL being loaded can come from a variable and include &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt;.</source>
          <target state="translated">ロードされるモジュールURLは変数から取得でき、&lt;a href=&quot;../interpolation&quot;&gt;補間&lt;/a&gt;を含めることができます。</target>
        </trans-unit>
        <trans-unit id="4178ed4ddf29fe6ada191630e63ef84f219db6c1" translate="yes" xml:space="preserve">
          <source>The module migrator needs to be able to read all of the stylesheets depended on by the ones it&amp;rsquo;s migrating, even if the &lt;a href=&quot;#migrate-deps&quot;&gt;&lt;code&gt;--migrate-deps&lt;/code&gt; option&lt;/a&gt; is not passed. If the migrator fails to find a dependency, you&amp;rsquo;ll get an error.</source>
          <target state="translated">モジュール移行者は、&lt;a href=&quot;#migrate-deps&quot;&gt; &lt;code&gt;--migrate-deps&lt;/code&gt; オプション&lt;/a&gt;が渡されていない場合でも、移行するスタイルシートに依存するすべてのスタイルシートを読み取ることができる必要があります。移行者が依存関係を見つけられなかった場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="06f9c260a7ec62319c981e555fd7eba4596789bb" translate="yes" xml:space="preserve">
          <source>The most straightforward way to use SassScript is to use variables. Variables begin with dollar signs, and are set like CSS properties:</source>
          <target state="translated">SassScript を使用する最も簡単な方法は、変数を使用することです。変数はドル記号で始まり、CSSのプロパティのように設定されます。</target>
        </trans-unit>
        <trans-unit id="6152fec5717bae0e93b4246533a89841d2d271fe" translate="yes" xml:space="preserve">
          <source>The new module system and the &lt;code&gt;@use&lt;/code&gt; rule address all these problems.</source>
          <target state="translated">新しいモジュールシステムと &lt;code&gt;@use&lt;/code&gt; ルールは、これらすべての問題に対処します。</target>
        </trans-unit>
        <trans-unit id="59fae2fe3c85c45f8ff213c1fc19e8efe071e614" translate="yes" xml:space="preserve">
          <source>The number of milliseconds between 1 January 1970 at 00:00:00 UTC and the time at which Sass compilation began.</source>
          <target state="translated">1970年1月1日00:00:00 UTCからSassのコンパイルが開始された時刻までのミリ秒数。</target>
        </trans-unit>
        <trans-unit id="550de4953924f4bca43ab5446ec8ed787baf3146" translate="yes" xml:space="preserve">
          <source>The number of milliseconds between 1 January 1970 at 00:00:00 UTC and the time at which Sass compilation ended.</source>
          <target state="translated">1970年1月1日00:00:00 UTCからSassのコンパイルが終了した時刻までのミリ秒数。</target>
        </trans-unit>
        <trans-unit id="9fa1487d1587c995f0bcb697c890b6c891f95903" translate="yes" xml:space="preserve">
          <source>The number of milliseconds it took to compile the Sass file. This is always equal to &lt;a href=&quot;#result-stats-start&quot;&gt;&lt;code&gt;result.stats.start&lt;/code&gt;&lt;/a&gt; minus &lt;a href=&quot;#result-stats-end&quot;&gt;&lt;code&gt;result.stats.end&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Sassファイルのコンパイルにかかったミリ秒数。これは常に&lt;a href=&quot;#result-stats-start&quot;&gt; &lt;code&gt;result.stats.start&lt;/code&gt; &lt;/a&gt;からresult.stats.endを引いたものに&lt;a href=&quot;#result-stats-end&quot;&gt; &lt;code&gt;result.stats.end&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ef7abbbaf1e251eee094649d42d65fbbe127a68f" translate="yes" xml:space="preserve">
          <source>The numbers must either all have compatible units, or all be unitless. And since the numbers&amp;rsquo; units may differ, the output takes the unit of the first number.</source>
          <target state="translated">数値はすべて互換性のある単位を持っているか、すべて単位がない必要があります。また、数値の単位が異なる場合があるため、出力は最初の数値の単位を取ります。</target>
        </trans-unit>
        <trans-unit id="5f8e696f26ae38f53863611394de68aa0bb01f4f" translate="yes" xml:space="preserve">
          <source>The operation is surrounded by parentheses, unless those parentheses are outside a list that contains the operation.</source>
          <target state="translated">その操作は、その操作を含むリストの外側に括弧がない限り、括弧で囲まれています。</target>
        </trans-unit>
        <trans-unit id="e01dbf707a09e349e25aa75b85c419e95881e1bf" translate="yes" xml:space="preserve">
          <source>The parent selector can also be used within SassScript. It&amp;rsquo;s a special expression that returns the current parent selector in the same format used by &lt;a href=&quot;../modules/selector#selector-values&quot;&gt;selector functions&lt;/a&gt;: a comma-separated list (the selector list) that contains space-separated lists (the complex selectors) that contain unquoted strings (the compound selectors).</source>
          <target state="translated">親セレクターは、SassScript内でも使用できます。これは、&lt;a href=&quot;../modules/selector#selector-values&quot;&gt;セレクター関数で&lt;/a&gt;使用されるのと同じ形式で現在の親セレクターを返す特別な式です。引用符で囲まれていない文字列（複合セレクター）を含むスペース区切りリスト（複合セレクター）を含むコンマ区切りリスト（セレクターリスト）です。</target>
        </trans-unit>
        <trans-unit id="33cf53c06757f4836b577423ea6b3e12913ce928" translate="yes" xml:space="preserve">
          <source>The parent selector, &lt;code&gt;&amp;amp;&lt;/code&gt;, is a special selector invented by Sass that&amp;rsquo;s used in &lt;a href=&quot;../style-rules#nesting&quot;&gt;nested selectors&lt;/a&gt; to refer to the outer selector. It makes it possible to re-use the outer selector in more complex ways, like adding a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes&quot;&gt;pseudo-class&lt;/a&gt; or adding a selector &lt;em&gt;before&lt;/em&gt; the parent.</source>
          <target state="translated">親セレクター &lt;code&gt;&amp;amp;&lt;/code&gt; は、Sassによって発明された特別なセレクターであり、&lt;a href=&quot;../style-rules#nesting&quot;&gt;ネスト&lt;/a&gt;されたセレクターで外部セレクターを参照するために使用されます。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes&quot;&gt;疑似クラスを&lt;/a&gt;追加したり、親の&lt;em&gt;前&lt;/em&gt;にセレクターを追加したりするなど、より複雑な方法で外部セレクターを再利用することができます。</target>
        </trans-unit>
        <trans-unit id="6045ebfa783a9c7f7a09d4adea3c9f23c023f23d" translate="yes" xml:space="preserve">
          <source>The property namespace itself can also have a value. For example:</source>
          <target state="translated">プロパティ名空間自体も値を持つことができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9faf02a5d158700112a121804e3476e1e235849f" translate="yes" xml:space="preserve">
          <source>The result is stored in a variable or returned by a function.</source>
          <target state="translated">結果は変数に格納されるか、関数によって返されます。</target>
        </trans-unit>
        <trans-unit id="b68e2b075df984e14d6bb9bdb6c77aed78be95b7" translate="yes" xml:space="preserve">
          <source>The result is used as part of another operation (other than &lt;code&gt;/&lt;/code&gt;).</source>
          <target state="translated">結果は、別の操作（ &lt;code&gt;/&lt;/code&gt; 以外）の一部として使用されます。</target>
        </trans-unit>
        <trans-unit id="f3cf804d759af28028f8dc65268ebce4d85fc673" translate="yes" xml:space="preserve">
          <source>The returned function can be called using &lt;a href=&quot;#call&quot;&gt;&lt;code&gt;meta.call()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返された関数は、&lt;a href=&quot;#call&quot;&gt; &lt;code&gt;meta.call()&lt;/code&gt; &lt;/a&gt;を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="9ad79e11fc27ef9189366d5666deab3f58929d61" translate="yes" xml:space="preserve">
          <source>The returned list is always comma-separated and the sub-lists are always space-separated.</source>
          <target state="translated">返されるリストは常にカンマで区切られ、サブリストは常にスペースで区切られます。</target>
        </trans-unit>
        <trans-unit id="1fb24797caa0933903bba73e0a6f76e56dd41773" translate="yes" xml:space="preserve">
          <source>The returned list is comma-separated, and the simple selectors are unquoted strings.</source>
          <target state="translated">返されるリストはカンマ区切りで、単純なセレクタは引用符で囲まれていない文字列です。</target>
        </trans-unit>
        <trans-unit id="757025ff75dab36d072fa990d532475fa92d86c9" translate="yes" xml:space="preserve">
          <source>The rule is written &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot;&lt;/code&gt;. It loads the module at the given URL just like &lt;code&gt;@use&lt;/code&gt;, but it makes the &lt;a href=&quot;use#private-members&quot;&gt;public&lt;/a&gt; members of the loaded module available to users of your module as though they were defined directly in your module. Those members aren&amp;rsquo;t available in your module, though&amp;mdash;if you want that, you&amp;rsquo;ll need to write a &lt;code&gt;@use&lt;/code&gt; rule as well. Don&amp;rsquo;t worry, it&amp;rsquo;ll only load the module once!</source>
          <target state="translated">ルールは &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot;&lt;/code&gt; で記述されています。 &lt;code&gt;@use&lt;/code&gt; と同じように、指定されたURLでモジュールをロードしますが、ロードされたモジュールの&lt;a href=&quot;use#private-members&quot;&gt;パブリック&lt;/a&gt;メンバーは、モジュールで直接定義されているかのように、モジュールのユーザーが利用できるようになります。ただし、これらのメンバーはモジュールでは使用できません。必要に応じて、 &lt;code&gt;@use&lt;/code&gt; ルールも作成する必要があります。心配しないでください、それはモジュールを一度だけロードします！</target>
        </trans-unit>
        <trans-unit id="d4b2d6f15b257b97df1f0f2487bd98118e3ddbbe" translate="yes" xml:space="preserve">
          <source>The same mixins can be done in the &lt;code&gt;.sass&lt;/code&gt; shorthand syntax:</source>
          <target state="translated">同じミックスインを &lt;code&gt;.sass&lt;/code&gt; 省略構文で実行できます。</target>
        </trans-unit>
        <trans-unit id="1e43b849eba22e5bd20a341f09cad9fb44cd8782" translate="yes" xml:space="preserve">
          <source>The second and older syntax, known as the indented syntax (or sometimes just &quot;Sass&quot;), provides a more concise way of writing CSS. It uses indentation rather than brackets to indicate nesting of selectors, and newlines rather than semicolons to separate properties. Some people find this to be easier to read and quicker to write than SCSS. The indented syntax has all the same features, although some of them have slightly different syntax; this is described in &lt;a href=&quot;http://sass-lang.com/documentation/file.INDENTED_SYNTAX.html&quot;&gt;the indented syntax reference&lt;/a&gt;. Files using this syntax have the &lt;code&gt;.sass&lt;/code&gt; extension.</source>
          <target state="translated">インデントされた構文（または単に &quot;Sass&quot;と呼ばれることもある）として知られる2番目以降の構文は、CSSをより簡潔に記述する方法を提供します。括弧の代わりにインデントを使用してセレクターのネストを示し、セミコロンではなく改行を使用してプロパティを区切ります。これは、SCSSよりも読みやすく、書きやすいと考える人もいます。インデントされた構文はすべて同じ機能を備えていますが、構文がわずかに異なるものもあります。これは&lt;a href=&quot;http://sass-lang.com/documentation/file.INDENTED_SYNTAX.html&quot;&gt;インデントされた構文リファレンスで&lt;/a&gt;説明されています。この構文を使用するファイルの拡張子は &lt;code&gt;.sass&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="36a43cc0355a475c3a5d17b8d4af8d46efc2ad81" translate="yes" xml:space="preserve">
          <source>The simplest &lt;code&gt;@use&lt;/code&gt; rule is written &lt;code&gt;@use &quot;&amp;lt;url&amp;gt;&quot;&lt;/code&gt;, which loads the module at the given URL. Any styles loaded this way will be included exactly once in the compiled CSS output, no matter how many times those styles are loaded.</source>
          <target state="translated">最も単純な &lt;code&gt;@use&lt;/code&gt; ルールは &lt;code&gt;@use &quot;&amp;lt;url&amp;gt;&quot;&lt;/code&gt; と記述され、指定されたURLでモジュールをロードします。この方法でロードされたスタイルは、それらのスタイルが何度ロードされても、コンパイルされたCSS出力に1回だけ含まれます。</target>
        </trans-unit>
        <trans-unit id="f1b582fe54adc0be359d0bf8ca9baee65d6ece85" translate="yes" xml:space="preserve">
          <source>The simplest expressions just represent static values:</source>
          <target state="translated">最も単純な式は静的な値を表現しているだけです。</target>
        </trans-unit>
        <trans-unit id="9cb763b215fc2725feaff8287b961843109bd5dc" translate="yes" xml:space="preserve">
          <source>The singleton &lt;a href=&quot;../values/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">シングルトン&lt;a href=&quot;../values/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="de66954bc00010aadd593163369a10f26534482a" translate="yes" xml:space="preserve">
          <source>The singleton &lt;a href=&quot;values/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">シングルトン&lt;a href=&quot;values/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;値。</target>
        </trans-unit>
        <trans-unit id="5d900ce8f41e3928d18e3297e89e7fb17b931b22" translate="yes" xml:space="preserve">
          <source>The source map that maps the compiled CSS to the source files from which it was generated, as a &lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;Buffer&lt;/a&gt;. This can be converted to a string by calling &lt;a href=&quot;https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end&quot;&gt;&lt;code&gt;Buffer.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コンパイルされたCSSを、それが生成されたソースファイルに&lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;Buffer&lt;/a&gt;としてマップするソースマップ。これは、&lt;a href=&quot;https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end&quot;&gt; &lt;code&gt;Buffer.toString()&lt;/code&gt; を&lt;/a&gt;呼び出すことで文字列に変換できます。</target>
        </trans-unit>
        <trans-unit id="436159b068f42295d043bea8e8ff93d4d6028a14" translate="yes" xml:space="preserve">
          <source>The source map uses absolute &lt;a href=&quot;https://en.wikipedia.org/wiki/File_URI_scheme&quot;&gt;&lt;code&gt;file:&lt;/code&gt; URLs&lt;/a&gt; to link to the Sass source files, except if the source file comes from the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt; in which case it lists its URL as &lt;code&gt;stdin&lt;/code&gt;.</source>
          <target state="translated">ソースマップは絶対&lt;a href=&quot;https://en.wikipedia.org/wiki/File_URI_scheme&quot;&gt; &lt;code&gt;file:&lt;/code&gt; &lt;/a&gt;使用します。URLはSassソースファイルにリンクします。ただし、ソースファイルが&lt;a href=&quot;#data&quot;&gt; &lt;code&gt;data&lt;/code&gt; オプション&lt;/a&gt;からのものである場合は、そのURLが &lt;code&gt;stdin&lt;/code&gt; としてリストされます。</target>
        </trans-unit>
        <trans-unit id="e3954505b46420b22fa34aefdf8731c17376b09c" translate="yes" xml:space="preserve">
          <source>The special string &lt;code&gt;-&lt;/code&gt; can be passed in place of the input file to tell Sass to read the input file from &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt;. Sass will default to parsing it as SCSS unless the &lt;a href=&quot;#indented&quot;&gt;&lt;code&gt;--indented&lt;/code&gt; flag&lt;/a&gt; is passed.</source>
          <target state="translated">特別な文字列 &lt;code&gt;-&lt;/code&gt; を入力ファイルの代わりに渡して、Sassに&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;標準入力&lt;/a&gt;から入力ファイルを読み取るように指示できます。&lt;a href=&quot;#indented&quot;&gt; &lt;code&gt;--indented&lt;/code&gt; フラグ&lt;/a&gt;が渡されない限り、SassはデフォルトでSCSSとして解析します。</target>
        </trans-unit>
        <trans-unit id="b03fb84cc6c300d7b847ab2fd90d935f166ef691" translate="yes" xml:space="preserve">
          <source>The stylesheet where the error occurred. If the error occurred in a stylesheet loaded from disk, this is the absolute path of that stylesheet. If the error occurred in a stylesheet that was loaded from an &lt;a href=&quot;#importer&quot;&gt;importer&lt;/a&gt; which returned the stylesheet&amp;rsquo;s contents, this is the raw string of the &lt;code&gt;@use&lt;/code&gt; or &lt;code&gt;@import&lt;/code&gt; that loaded that stylesheet. If it occurred in the contents of the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt;, this is the string &lt;code&gt;&quot;stdin&quot;&lt;/code&gt;.</source>
          <target state="translated">エラーが発生したスタイルシート。ディスクからロードされたスタイルシートでエラーが発生した場合、これはそのスタイルシートの絶対パスです。スタイルシートの内容を返す&lt;a href=&quot;#importer&quot;&gt;インポーター&lt;/a&gt;からロードされたスタイルシートでエラーが発生した場合、これはそのスタイルシートをロードした &lt;code&gt;@use&lt;/code&gt; または &lt;code&gt;@import&lt;/code&gt; の生の文字列です。&lt;a href=&quot;#data&quot;&gt; &lt;code&gt;data&lt;/code&gt; オプションの&lt;/a&gt;内容で発生した場合、これは文字列 &lt;code&gt;&quot;stdin&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8cee4b3810dd190702d457b5ef9a574057431cd1" translate="yes" xml:space="preserve">
          <source>The unary operators &lt;a href=&quot;operators/boolean&quot;&gt;&lt;code&gt;not&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;operators/numeric#unary-operators&quot;&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;operators/string#unary-operators&quot;&gt;&lt;code&gt;/&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">単項演算子&lt;a href=&quot;operators/boolean&quot;&gt; &lt;code&gt;not&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;operators/numeric#unary-operators&quot;&gt; &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;operators/string#unary-operators&quot;&gt; &lt;code&gt;/&lt;/code&gt; &lt;/a&gt;ではありません。</target>
        </trans-unit>
        <trans-unit id="4f820cb74662ee617b7748c4280229a892155029" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;!important&lt;/code&gt;, which is parsed as an unquoted string.</source>
          <target state="translated">引用符で囲まれていない文字列として解析される値 &lt;code&gt;!important&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="796e8e6715b0c6ac314131eb3bc93601c66c2752" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;null&lt;/code&gt; is the only value of its type. It represents the absence of a value, and is often returned by &lt;a href=&quot;../at-rules/function&quot;&gt;functions&lt;/a&gt; to indicate the lack of a result.</source>
          <target state="translated">値 &lt;code&gt;null&lt;/code&gt; は、そのタイプの唯一の値です。これは値がないことを表し、結果がないことを示すために&lt;a href=&quot;../at-rules/function&quot;&gt;関数&lt;/a&gt;によって返されることがよくあります。</target>
        </trans-unit>
        <trans-unit id="d4369cb10498fe9fea655a2a3987028bc59e3d23" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;$selector&lt;/code&gt; is now &lt;code&gt;((&quot;.foo.bar&quot; &quot;.baz.bang&quot;), &quot;.bip.qux&quot;)&lt;/code&gt;. The compound selectors are quoted here to indicate that they're strings, but in reality they would be unquoted. Even if the parent selector doesn't contain a comma or a space, &lt;code&gt;&amp;amp;&lt;/code&gt; will always have two levels of nesting, so it can be accessed consistently.</source>
          <target state="translated">値は &lt;code&gt;$selector&lt;/code&gt; 、今ある &lt;code&gt;((&quot;.foo.bar&quot; &quot;.baz.bang&quot;), &quot;.bip.qux&quot;)&lt;/code&gt; 。複合セレクターは文字列であることを示すためにここで引用されていますが、実際には引用符で囲まれていません。親セレクターにコンマまたはスペースが含まれていない場合でも、 &lt;code&gt;&amp;amp;&lt;/code&gt; には常に2レベルのネストがあるため、一貫してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="6a4948c64a83be42d30b89a53e4d8614912e979e" translate="yes" xml:space="preserve">
          <source>The way Sass comments work differs substantially between SCSS and the indented syntax. Both syntaxes support two types of comments: comments defined using &lt;code&gt;/* */&lt;/code&gt; that are (usually) compiled to CSS, and comments defined using &lt;code&gt;//&lt;/code&gt; that are not.</source>
          <target state="translated">Sassコメントの動作方法は、SCSSとインデントされた構文の間で大幅に異なります。どちらの構文も、（通常は）CSSにコンパイルされる &lt;code&gt;/* */&lt;/code&gt; を使用して定義されたコメントと、 &lt;code&gt;//&lt;/code&gt; を使用して定義されていないコメントの2種類のコメントをサポートします。</target>
        </trans-unit>
        <trans-unit id="7b8a877b8636d49ac3f65f0bacf33bcb5a47ce42" translate="yes" xml:space="preserve">
          <source>The weight specifies the amount of the first color that should be included in the returned color. The default, &lt;code&gt;50%&lt;/code&gt;, means that half the first color and half the second color should be used. &lt;code&gt;25%&lt;/code&gt; means that a quarter of the first color and three quarters of the second color should be used.</source>
          <target state="translated">ウェイトは、返される色に含まれる最初の色の量を指定します。デフォルトの &lt;code&gt;50%&lt;/code&gt; は、最初の色の半分と2番目の色の半分を使用する必要があることを意味します。 &lt;code&gt;25%&lt;/code&gt; は、最初の色の4分の1と2番目の色の4分の3を使用する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="177252848a5ac086129dcafe1bbac98faf2b4389" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;&amp;lt;div class=&quot;seriousError intrusion&quot;&amp;gt;&lt;/code&gt; will have the &lt;code&gt;hacked.png&lt;/code&gt; background image as well.</source>
          <target state="translated">次に、 &lt;code&gt;&amp;lt;div class=&quot;seriousError intrusion&quot;&amp;gt;&lt;/code&gt; にも &lt;code&gt;hacked.png&lt;/code&gt; 背景画像が含まれます。</target>
        </trans-unit>
        <trans-unit id="b6ab2aea6319171b326eb82c34f0565c2dbb0f73" translate="yes" xml:space="preserve">
          <source>There are a number of different things &lt;code&gt;-&lt;/code&gt; can mean in CSS and in Sass. It can be a subtraction operator (as in &lt;code&gt;5px - 3px&lt;/code&gt;), the beginning of a negative number (as in &lt;code&gt;-3px&lt;/code&gt;), a unary negation operator (as in &lt;code&gt;-$var&lt;/code&gt;), or part of an identifier (as in &lt;code&gt;font-weight&lt;/code&gt;). Most of the time, it's clear which is which, but there are some tricky cases. As a general rule, you're safest if:</source>
          <target state="translated">異なるものがいくつかあります &lt;code&gt;-&lt;/code&gt; CSSにし、サスに意味することができます。減算演算子（ &lt;code&gt;5px - 3px&lt;/code&gt; ）、負の数値の始まり（ &lt;code&gt;-3px&lt;/code&gt; など）、単項否定演算子（ &lt;code&gt;-$var&lt;/code&gt; ）、または識別子の一部（ &lt;code&gt;font-weight&lt;/code&gt; など)を使用できます）。ほとんどの場合、どちらがどちらであるかは明らかですが、いくつかのトリッキーなケースがあります。原則として、次の場合に安全です。</target>
        </trans-unit>
        <trans-unit id="8f0ec852d33f9ad4e0e7df6cbcabfcee4d9009eb" translate="yes" xml:space="preserve">
          <source>There are often cases when designing a page when one class should have all the styles of another class, as well as its own specific styles. For example, the &lt;a href=&quot;http://getbem.com/naming/&quot;&gt;BEM methodology&lt;/a&gt; encourages modifier classes that go on the same elements as block or element classes. But this can create cluttered HTML, it's prone to errors from forgetting to include both classes, and it can bring non-semantic style concerns into your markup.</source>
          <target state="translated">ページをデザインするときに、あるクラスが別のクラスのすべてのスタイルと、それ自体の特定のスタイルを持つ必要がある場合がよくあります。たとえば、&lt;a href=&quot;http://getbem.com/naming/&quot;&gt;BEM方法論&lt;/a&gt;は、ブロックまたは要素クラスと同じ要素に属する修飾子クラスを推奨します。ただし、これによりHTMLが乱雑になる可能性があり、両方のクラスを含めるのを忘れるとエラーが発生しやすくなり、マークアップに非セマンティックスタイルの懸念が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f7ab8877161595d185108311821356f071bb55a2" translate="yes" xml:space="preserve">
          <source>There are often cases when designing a page when one class should have all the styles of another class, as well as its own specific styles. The most common way of handling this is to use both the more general class and the more specific class in the HTML. For example, suppose we have a design for a normal error and also for a serious error. We might write our markup like so:</source>
          <target state="translated">ページをデザインする際に、あるクラスが他のクラスのスタイルを全て持っていて、独自のスタイルを持っている必要がある場合がよくあります。これを処理する最も一般的な方法は、HTMLの中でより一般的なクラスとより特定のクラスの両方を使用することです。例えば、通常のエラーのためのデザインと、深刻なエラーのためのデザインがあるとします。このようなマークアップを書くかもしれません。</target>
        </trans-unit>
        <trans-unit id="5462dc7a171bbf438178cd731b27497ccb08cbce" translate="yes" xml:space="preserve">
          <source>There are some restrictions on the use of &lt;code&gt;@extend&lt;/code&gt; within directives such as &lt;code&gt;@media&lt;/code&gt;. Sass is unable to make CSS rules outside of the &lt;code&gt;@media&lt;/code&gt; block apply to selectors inside it without creating a huge amount of stylesheet bloat by copying styles all over the place. This means that if you use &lt;code&gt;@extend&lt;/code&gt; within &lt;code&gt;@media&lt;/code&gt; (or other CSS directives), you may only extend selectors that appear within the same directive block.</source>
          <target state="translated">&lt;code&gt;@media&lt;/code&gt; などのディレクティブ内での &lt;code&gt;@extend&lt;/code&gt; の使用にはいくつかの制限があります。 Sassは、 &lt;code&gt;@media&lt;/code&gt; ブロックの外側のCSSルールをその内部のセレクターに適用することはできません。スタイルをあらゆる場所にコピーして大量のスタイルシートの膨張を作成する必要があります。あなたが使用している場合、この手段があること &lt;code&gt;@extend&lt;/code&gt; 内の &lt;code&gt;@media&lt;/code&gt; （または他のCSSのディレクティブを）、あなただけの同じディレクティブブロック内に現れるセレクタを延長することができます。</target>
        </trans-unit>
        <trans-unit id="937ed733728f67555d53882c99fae9ce9823cc28" translate="yes" xml:space="preserve">
          <source>There are two special values you can pass to &lt;code&gt;@at-root&lt;/code&gt;. &quot;rule&quot; refers to normal CSS rules; &lt;code&gt;@at-root (without: rule)&lt;/code&gt; is the same as &lt;code&gt;@at-root&lt;/code&gt; with no query. &lt;code&gt;@at-root (without: all)&lt;/code&gt; means that the styles should be moved outside of &lt;em&gt;all&lt;/em&gt; directives and CSS rules.</source>
          <target state="translated">&lt;code&gt;@at-root&lt;/code&gt; 渡すことができる2つの特別な値があります。 「ルール」は通常のCSSルールを指します。 &lt;code&gt;@at-root (without: rule)&lt;/code&gt; は、 &lt;code&gt;@at-root&lt;/code&gt; と同じで、クエリはありません。 &lt;code&gt;@at-root (without: all)&lt;/code&gt; は、スタイルを&lt;em&gt;すべての&lt;/em&gt;ディレクティブとCSSルールの外に移動する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="b519ebe4607dfda6aeda062897ebaecfe93b3483" translate="yes" xml:space="preserve">
          <source>There are two syntaxes available for Sass. The first, known as SCSS (Sassy CSS) and used throughout this reference, is an extension of the syntax of CSS. This means that every valid CSS stylesheet is a valid SCSS file with the same meaning. In addition, SCSS understands most CSS hacks and vendor-specific syntax, such as &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms530752.aspx&quot;&gt;IE's old &lt;code&gt;filter&lt;/code&gt; syntax&lt;/a&gt;. This syntax is enhanced with the Sass features described below. Files using this syntax have the &lt;code&gt;.scss&lt;/code&gt; extension.</source>
          <target state="translated">Sassで使用できる構文は2つあります。1つはSCSS（Sassy CSS）として知られ、このリファレンス全体で使用され、CSSの構文の拡張です。つまり、すべての有効なCSSスタイルシートは、同じ意味を持つ有効なSCSSファイルです。さらに、SCSSは、ほとんどのCSSハックと、&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms530752.aspx&quot;&gt;IEの古い &lt;code&gt;filter&lt;/code&gt; 構文&lt;/a&gt;などのベンダー固有の構文を理解します。この構文は、以下で説明するSass機能で強化されています。この構文を使用するファイルの拡張子は &lt;code&gt;.scss&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8a26deaf0a9439c6e86ec39bb3fa8607ec5746ff" translate="yes" xml:space="preserve">
          <source>There is currently no way to catch errors.</source>
          <target state="translated">現在のところ、エラーをキャッチする方法はありません。</target>
        </trans-unit>
        <trans-unit id="35e08781e208d3af3549928c34bda4ca6736f556" translate="yes" xml:space="preserve">
          <source>There is one exception to this, though: when using &lt;a href=&quot;#interpolation_&quot;&gt;&lt;code&gt;#{}&lt;/code&gt; interpolation&lt;/a&gt;, quoted strings are unquoted. This makes it easier to use e.g. selector names in &lt;a href=&quot;#mixins&quot;&gt;mixins&lt;/a&gt;. For example:</source>
          <target state="translated">ただし、これには1つの例外があります。&lt;a href=&quot;#interpolation_&quot;&gt; &lt;code&gt;#{}&lt;/code&gt; 補間&lt;/a&gt;を使用する場合、引用符で囲まれた文字列は引用符で囲まれません。これにより、たとえば&lt;a href=&quot;#mixins&quot;&gt;ミックスインで&lt;/a&gt;セレクター名を使用しやすくなります。例えば：</target>
        </trans-unit>
        <trans-unit id="20dbaee7ae0e6049cad0173a88c1ba4a30c40de1" translate="yes" xml:space="preserve">
          <source>There was no way to define private members or placeholder selectors that were inaccessible to downstream stylesheets.</source>
          <target state="translated">下流のスタイルシートにアクセスできないプライベートメンバーやプレースホルダセレクタを定義する方法がありませんでした。</target>
        </trans-unit>
        <trans-unit id="82eb3717df0020ad61d2402a572d1d55730be5fa" translate="yes" xml:space="preserve">
          <source>These operators don&amp;rsquo;t just work for strings! They can be used with any values that can be written to CSS, with a few exceptions:</source>
          <target state="translated">これらの演算子は、文字列に対してのみ機能するわけではありません。これらは、いくつかの例外を除いて、CSSに書き込むことができる任意の値で使用できます。</target>
        </trans-unit>
        <trans-unit id="3b097c3dab72faa37e38ebf74cdf858cfe6fb45c" translate="yes" xml:space="preserve">
          <source>These options affect &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;.</source>
          <target state="translated">これらのオプションは、&lt;a href=&quot;#many-to-many-mode&quot;&gt;多対多モードに&lt;/a&gt;影響します。</target>
        </trans-unit>
        <trans-unit id="c05227572a6357ec4b3012292934e49cb3804f64" translate="yes" xml:space="preserve">
          <source>These options are available for all migrators.</source>
          <target state="translated">これらのオプションは、すべてのマイグレータで利用可能です。</target>
        </trans-unit>
        <trans-unit id="0dd355594db8f1eb5026bc040673b5d51f4bbe6d" translate="yes" xml:space="preserve">
          <source>These options control how Sass loads it input files.</source>
          <target state="translated">これらのオプションは、Sass が入力ファイルをロードする方法を制御します。</target>
        </trans-unit>
        <trans-unit id="ef7ae2a9372ce8271bb3541f0d94e91316325eb9" translate="yes" xml:space="preserve">
          <source>These options control how Sass loads its input files and how it produces output files.</source>
          <target state="translated">これらのオプションは、Sass が入力ファイルをどのようにロードし、どのように出力ファイルを生成するかを制御します。</target>
        </trans-unit>
        <trans-unit id="10dd9f6d527c692240ebf4989eeba62d38c61af6" translate="yes" xml:space="preserve">
          <source>These options control how Sass produces output files.</source>
          <target state="translated">これらのオプションは、Sass が出力ファイルを生成する方法を制御します。</target>
        </trans-unit>
        <trans-unit id="b66c047e9e9ad78bc0a2546bbc62740889bf561f" translate="yes" xml:space="preserve">
          <source>These options use JavaScript callbacks to expand the functionality of Sass compilation.</source>
          <target state="translated">これらのオプションはJavaScriptのコールバックを使用してSassコンパイルの機能を拡張します。</target>
        </trans-unit>
        <trans-unit id="7ea9aa39dc5c3bedef3d7efd5836c2b8e43f3d9b" translate="yes" xml:space="preserve">
          <source>These statements can only be used at the top level of a stylesheet, or nested within a CSS statement at the top level:</source>
          <target state="translated">これらのステートメントは、スタイルシートのトップレベルでのみ使用することができ、トップレベルのCSSステートメントの中に入れ子にすることもできます。</target>
        </trans-unit>
        <trans-unit id="fea27c3dc02e951c57770c285fb9fd953594e4c9" translate="yes" xml:space="preserve">
          <source>These statements produce CSS. They can be used anywhere except within a &lt;code&gt;@function&lt;/code&gt;:</source>
          <target state="translated">これらのステートメントはCSSを生成します。 &lt;code&gt;@function&lt;/code&gt; 内を除いてどこでも使用できます：</target>
        </trans-unit>
        <trans-unit id="8d950e2ea927a1928b9ee8e793a562a1b5b5b427" translate="yes" xml:space="preserve">
          <source>These types of statements can be used anywhere in a Sass stylesheet:</source>
          <target state="translated">これらのタイプのステートメントは、Sass スタイルシートのどこでも使うことができます。</target>
        </trans-unit>
        <trans-unit id="1a58582d7e3c0936698ed9917e60005f1e3ac96e" translate="yes" xml:space="preserve">
          <source>This API currently provides no way of creating a &lt;a href=&quot;values/strings#quoted&quot;&gt;quoted&lt;/a&gt; string.</source>
          <target state="translated">このAPIは現在、&lt;a href=&quot;values/strings#quoted&quot;&gt;引用符で囲まれた&lt;/a&gt;文字列を作成する方法を提供していません。</target>
        </trans-unit>
        <trans-unit id="62f2e41a71d691060ac046f08fee96ede20d16ff" translate="yes" xml:space="preserve">
          <source>This API currently provides no way of distinguishing between a &lt;a href=&quot;values/strings#quoted&quot;&gt;quoted&lt;/a&gt; and &lt;a href=&quot;values/strings#unquoted&quot;&gt;unquoted&lt;/a&gt; string.</source>
          <target state="translated">このAPIは現在、&lt;a href=&quot;values/strings#quoted&quot;&gt;引用&lt;/a&gt;&lt;a href=&quot;values/strings#unquoted&quot;&gt;符で囲まれた&lt;/a&gt;文字列と引用符で囲まれていない文字列を区別する方法を提供していません。</target>
        </trans-unit>
        <trans-unit id="1a041603c99f20b135e1d025e99e27e8081832ea" translate="yes" xml:space="preserve">
          <source>This array of strings option provides &lt;a href=&quot;at-rules/import#load-paths&quot;&gt;load paths&lt;/a&gt; for Sass to look for imports. Earlier load paths will take precedence over later ones.</source>
          <target state="translated">この文字列の配列オプションは、Sassがインポートを探すための&lt;a href=&quot;at-rules/import#load-paths&quot;&gt;ロードパス&lt;/a&gt;を提供します。以前のロードパスが後のロードパスよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="f824a5f4c71aaf76fa508508688408b5e1e19520" translate="yes" xml:space="preserve">
          <source>This behavior wasn&amp;rsquo;t very useful, since it channel-by-channel RGB arithmetic didn&amp;rsquo;t correspond well to how humans perceive color. &lt;a href=&quot;modules/color&quot;&gt;Color functions&lt;/a&gt; were added which are much more useful, and color operations were deprecated. They&amp;rsquo;re still supported in LibSass and Ruby Sass, but they&amp;rsquo;ll produce warnings and users are strongly encouraged to avoid them.</source>
          <target state="translated">この動作は、チャネルごとのRGB演算が人間の色の知覚方法にうまく対応していなかったため、あまり役に立ちませんでした。はるかに便利な&lt;a href=&quot;modules/color&quot;&gt;カラー関数&lt;/a&gt;が追加され、カラー操作は非推奨になりました。これらはLibSassとRubySassで引き続きサポートされていますが、警告が表示されるため、ユーザーはこれらを回避することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="393062f3a86260cfd89e3908eb5da02d6428b041" translate="yes" xml:space="preserve">
          <source>This can also return the number of pairs in a map.</source>
          <target state="translated">これは、マップ内のペアの数を返すこともできます。</target>
        </trans-unit>
        <trans-unit id="a7c69a73969e7d7990817c39402f17797d2d227a" translate="yes" xml:space="preserve">
          <source>This can be used anywhere in a stylesheet. It can even be nested within style rules to create nested styles!</source>
          <target state="translated">これはスタイルシートのどこでも使用できます。スタイルルールの中に入れ子にして、入れ子になったスタイルを作成することもできます!</target>
        </trans-unit>
        <trans-unit id="cdb80bd6c90ed216da3aefd940259e454d1d891f" translate="yes" xml:space="preserve">
          <source>This can change the red, green, blue, saturation, value, and alpha properties. The properties are specified as keyword arguments. All arguments should be percentages between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;.</source>
          <target state="translated">これにより、赤、緑、青、彩度、値、アルファプロパティを変更できます。プロパティはキーワード引数として指定されます。すべての引数は &lt;code&gt;0%&lt;/code&gt; から &lt;code&gt;100%&lt;/code&gt; の間のパーセンテージでなければなりません。</target>
        </trans-unit>
        <trans-unit id="6eaf8514edecd38eceb75d33a0b8c207db8941fb" translate="yes" xml:space="preserve">
          <source>This can return the following values:</source>
          <target state="translated">これは以下の値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="9e2c17d4304cc87c1fc694bbfd2c75778c87cdc6" translate="yes" xml:space="preserve">
          <source>This can return the nth pair in a map as well.</source>
          <target state="translated">これは、マップのn番目のペアを返すこともできます。</target>
        </trans-unit>
        <trans-unit id="7d5d8211da10fe571fd182677e98f081c6280cc4" translate="yes" xml:space="preserve">
          <source>This can return the number of pairs in a map as well.</source>
          <target state="translated">これは、マップ内のペアの数を返すこともできます。</target>
        </trans-unit>
        <trans-unit id="a8071308e261c0171947c455efd036ab5b392e9a" translate="yes" xml:space="preserve">
          <source>This can return the position of a pair in a map as well.</source>
          <target state="translated">これは、マップ内のペアの位置を返すこともできます。</target>
        </trans-unit>
        <trans-unit id="448ab533cf42f63c3d93b37aaf75e3db827f3221" translate="yes" xml:space="preserve">
          <source>This cannot provide configuration to a module that&amp;rsquo;s already been loaded, whether or not it was already loaded with configuration.</source>
          <target state="translated">これは、すでに構成がロードされているかどうかに関係なく、すでにロードされているモジュールに構成を提供することはできません。</target>
        </trans-unit>
        <trans-unit id="2470ec1e576bd8bfdffd93d37a0c8c8ffb1bcadf" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/booleans&quot;&gt;Sass boolean&lt;/a&gt;.</source>
          <target state="translated">このクラスは&lt;a href=&quot;values/booleans&quot;&gt;Sassブール値を&lt;/a&gt;表します。</target>
        </trans-unit>
        <trans-unit id="ec35d9eaaecbd91ad5d3c671be2f701bc9ef78f6" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/colors&quot;&gt;Sass color&lt;/a&gt;.</source>
          <target state="translated">このクラスは&lt;a href=&quot;values/colors&quot;&gt;Sassカラーを&lt;/a&gt;表します。</target>
        </trans-unit>
        <trans-unit id="d09011ebcd78969c2878a36e8ce4bc298d76f554" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/lists&quot;&gt;Sass list&lt;/a&gt;.</source>
          <target state="translated">このクラスは&lt;a href=&quot;values/lists&quot;&gt;Sassリストを&lt;/a&gt;表します。</target>
        </trans-unit>
        <trans-unit id="6c4afb0aabba5307b0ecddc274c63299172dc9e5" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/maps&quot;&gt;Sass map&lt;/a&gt;.</source>
          <target state="translated">このクラスは&lt;a href=&quot;values/maps&quot;&gt;Sassマップを&lt;/a&gt;表します。</target>
        </trans-unit>
        <trans-unit id="1967f3e1349722685a8352787230c4240b7e0e19" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/numbers&quot;&gt;Sass number&lt;/a&gt;.</source>
          <target state="translated">このクラスは&lt;a href=&quot;values/numbers&quot;&gt;Sass番号を&lt;/a&gt;表します。</target>
        </trans-unit>
        <trans-unit id="ca7d84bac27fa6d9dff8ed90618e050e58854643" translate="yes" xml:space="preserve">
          <source>This class represents a &lt;a href=&quot;values/strings&quot;&gt;Sass string&lt;/a&gt;.</source>
          <target state="translated">このクラスは&lt;a href=&quot;values/strings&quot;&gt;Sass文字列を&lt;/a&gt;表します。</target>
        </trans-unit>
        <trans-unit id="e789b7f43d1e4e8d8e1d9b1ec84f49058bbdf636" translate="yes" xml:space="preserve">
          <source>This class represents the &lt;a href=&quot;values/null&quot;&gt;Sass &lt;code&gt;null&lt;/code&gt; value&lt;/a&gt;.</source>
          <target state="translated">このクラスは表し&lt;a href=&quot;values/null&quot;&gt;サスの &lt;code&gt;null&lt;/code&gt; 値を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9ecaa4da7a11bff49a6a10777103a7831874c43a" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t actually use a function, but it&amp;rsquo;s still one of the most common ways to use lists. The &lt;a href=&quot;../at-rules/control/each&quot;&gt;&lt;code&gt;@each&lt;/code&gt; rule&lt;/a&gt; evaluates a block of styles for each element in a list, and assigns that element to a variable.</source>
          <target state="translated">これは実際には関数を使用しませんが、それでもリストを使用する最も一般的な方法の1つです。&lt;a href=&quot;../at-rules/control/each&quot;&gt; &lt;code&gt;@each&lt;/code&gt; のルールは、&lt;/a&gt;リスト内の各要素のスタイルのブロックを評価し、割り当てる変数に要素。</target>
        </trans-unit>
        <trans-unit id="8644e33918a2fb396c4458617394ab090c44dffe" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t actually use a function, but it&amp;rsquo;s still one of the most common ways to use maps. The &lt;a href=&quot;../at-rules/control/each&quot;&gt;&lt;code&gt;@each&lt;/code&gt; rule&lt;/a&gt; evaluates a block of styles for each key/value pair in a map. The key and the value are assigned to variables so they can easily be accessed in the block.</source>
          <target state="translated">これは実際には関数を使用しませんが、それでもマップを使用する最も一般的な方法の1つです。&lt;a href=&quot;../at-rules/control/each&quot;&gt; &lt;code&gt;@each&lt;/code&gt; のルールは、&lt;/a&gt;マップ内の各キー/値ペアのスタイルのブロックを評価します。キーと値は変数に割り当てられるため、ブロック内で簡単にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="76d2e1e886dbf0b292e84944953c3b291a0fa41e" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t make any members from the loaded module available in the current module.</source>
          <target state="translated">これにより、ロードされたモジュールのメンバーが現在のモジュールで使用可能になることはありません。</target>
        </trans-unit>
        <trans-unit id="3145a9fe89c45897693d218f34c1456c6f180d14" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-C&lt;/code&gt;) tells Sass not to cache parsed files at all.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-C&lt;/code&gt; ）は、解析されたファイルをまったくキャッシュしないようにSassに指示します。</target>
        </trans-unit>
        <trans-unit id="cba58e5da7cf96a522bb540b339ad57565167faf" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-c&lt;/code&gt;) tells Sass to emit &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code#Colors&quot;&gt;terminal colors&lt;/a&gt;, and the inverse &lt;code&gt;--no-color&lt;/code&gt; tells it not to emit colors. By default, it will emit colors if it looks like it&amp;rsquo;s being run on a terminal that supports them.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-c&lt;/code&gt; ）はSassに&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code#Colors&quot;&gt;端末の色&lt;/a&gt;を放出するように指示し、逆の &lt;code&gt;--no-color&lt;/code&gt; は色を放出しないように指示します。デフォルトでは、色をサポートする端末で実行されているように見える場合、色を発します。</target>
        </trans-unit>
        <trans-unit id="59b8db0c6f851879c91baf0a6e97c2614e836de5" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-c&lt;/code&gt;) tells Sass to verify that the syntax of its input file is valid without executing that file. If the syntax is valid, it exits with &lt;a href=&quot;https://en.wikipedia.org/wiki/Exit_status&quot;&gt;status&lt;/a&gt; 0. It can&amp;rsquo;t be used in &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-c&lt;/code&gt; ）は、入力ファイルの構文がそのファイルを実行せずに有効であることを確認するようにSassに指示します。構文が有効な場合は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Exit_status&quot;&gt;ステータス&lt;/a&gt;0で終了し&lt;a href=&quot;#many-to-many-mode&quot;&gt;ます&lt;/a&gt;。多対多モードでは使用できません。</target>
        </trans-unit>
        <trans-unit id="ba94eb2765b012d717e240bf9fc4ef42327807a7" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-f&lt;/code&gt;) may only be passed in &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;. It causes Sass files to &lt;em&gt;always&lt;/em&gt; be compiled to CSS files, instead of only being compiled when the source files are more up-to-date than the output.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-f&lt;/code&gt; ）は、&lt;a href=&quot;#many-to-many-mode&quot;&gt;多対多モード&lt;/a&gt;でのみ渡すことができます。これにより、Sassファイルは、ソースファイルが出力よりも最新の場合にのみコンパイルされるのではなく、&lt;em&gt;常に&lt;/em&gt;CSSファイルにコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="0bb018de0f2666a606d2352ee84304116a8530b2" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-g&lt;/code&gt;) causes Sass to emit dummy &lt;code&gt;@media&lt;/code&gt; queries that indicate where each style rule was defined in the source stylehseet.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-g&lt;/code&gt; ）により、Sassは各スタイルルールがソースstylehseetのどこで定義されたかを示すダミーの &lt;code&gt;@media&lt;/code&gt; クエリを発行します。</target>
        </trans-unit>
        <trans-unit id="ca1572ca86d7ca4546485ffae2c95c2feb7d3cd9" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;-?&lt;/code&gt;) prints a summary of this documentation.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-h&lt;/code&gt; および &lt;code&gt;-?&lt;/code&gt; ）は、このドキュメントの要約を出力します。</target>
        </trans-unit>
        <trans-unit id="026a755beccf80cc347b2cc858639f7f26bde58f" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-h&lt;/code&gt;) prints a summary of this documentation.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-h&lt;/code&gt; ）は、このドキュメントの要約を出力します。</target>
        </trans-unit>
        <trans-unit id="b985fb7aea9074824137eee30bd5515e66afcfea" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-i&lt;/code&gt;) tells Sass to run in interactive mode, where you can write &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expressions&lt;/a&gt; and see their results. Interactive mode also supports &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt; and &lt;a href=&quot;../at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rules&lt;/a&gt;.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-i&lt;/code&gt; ）は、Sassにインタラクティブモードで実行するように指示します。インタラクティブモードでは、&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript式&lt;/a&gt;を記述してその結果を確認できます。インタラクティブモードは、&lt;a href=&quot;../variables&quot;&gt;変数&lt;/a&gt;と&lt;a href=&quot;../at-rules/use&quot;&gt; &lt;code&gt;@use&lt;/code&gt; ルール&lt;/a&gt;もサポートします。</target>
        </trans-unit>
        <trans-unit id="d7c211daef8f069d5b4f6c3ebf373af28aae5593" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-i&lt;/code&gt;) tells Sass to run in interactive mode, where you can write &lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript expressions&lt;/a&gt; and see their results. Interactive mode also supports &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt;.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-i&lt;/code&gt; ）は、Sassにインタラクティブモードで実行するように指示します。インタラクティブモードでは、&lt;a href=&quot;../syntax/structure#expressions&quot;&gt;SassScript式&lt;/a&gt;を記述してその結果を確認できます。インタラクティブモードは&lt;a href=&quot;../variables&quot;&gt;変数&lt;/a&gt;もサポートします。</target>
        </trans-unit>
        <trans-unit id="20b50e46535fbc3d6b2e5cd25f77b9d77592dc82" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-n&lt;/code&gt;) tells the migrator not to save any changes to disk. It instead prints the list of files that it would have changed. This is commonly paired with the &lt;a href=&quot;#verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt; option&lt;/a&gt; to print the contents of the changes that would have been made as well.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-n&lt;/code&gt; ）は、変更をディスクに保存しないように移行者に指示します。代わりに、変更されたはずのファイルのリストを出力します。これは通常、&lt;a href=&quot;#verbose&quot;&gt; &lt;code&gt;--verbose&lt;/code&gt; オプション&lt;/a&gt;と組み合わせて、同様に行われた変更の内容を出力します。</target>
        </trans-unit>
        <trans-unit id="4083b415c480872d9a15ce7ea5d8ccf78b7ada07" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-q&lt;/code&gt;) tells Sass not to emit any warnings when compiling. By default, Sass emits warnings when deprecated features are used or when the &lt;a href=&quot;../at-rules/warn&quot;&gt;&lt;code&gt;@warn&lt;/code&gt; rule&lt;/a&gt; is encountered. It also silences the &lt;a href=&quot;../at-rules/debug&quot;&gt;&lt;code&gt;@debug&lt;/code&gt; rule&lt;/a&gt;.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-q&lt;/code&gt; ）は、コンパイル時に警告を発行しないようにSassに指示します。デフォルトでは、非推奨の機能が使用されたとき、または&lt;a href=&quot;../at-rules/warn&quot;&gt; &lt;code&gt;@warn&lt;/code&gt; ルール&lt;/a&gt;が検出されたときに、Sassは警告を発します。また、&lt;a href=&quot;../at-rules/debug&quot;&gt; &lt;code&gt;@debug&lt;/code&gt; ルールを&lt;/a&gt;無音にします。</target>
        </trans-unit>
        <trans-unit id="481e3113fa63399f20eae70eaf8d42a21d099ac4" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-s&lt;/code&gt;) is tells Sass to read its input file from &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt;. When it&amp;rsquo;s passed, no input file may be passed.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-s&lt;/code&gt; ）は、Sassに&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;標準入力&lt;/a&gt;から入力ファイルを読み取るように指示します。渡されると、入力ファイルは渡されません。</target>
        </trans-unit>
        <trans-unit id="938d6dfc32bd09fc6ce49b539a9b090948a44c7a" translate="yes" xml:space="preserve">
          <source>This flag (abbreviated &lt;code&gt;-v&lt;/code&gt;) tells the migrator to print extra information to the console. By default, it just prints the name of files that are changed, but when combined with the &lt;a href=&quot;#dry-run&quot;&gt;&lt;code&gt;--dry-run&lt;/code&gt; option&lt;/a&gt; it also prints those files&amp;rsquo; new contents.</source>
          <target state="translated">このフラグ（省略形 &lt;code&gt;-v&lt;/code&gt; ）は、追加情報をコンソールに出力するように移行者に指示します。デフォルトでは、変更されたファイルの名前を出力するだけですが、&lt;a href=&quot;#dry-run&quot;&gt; &lt;code&gt;--dry-run&lt;/code&gt; オプション&lt;/a&gt;と組み合わせると、それらのファイルの新しい内容も出力されます。</target>
        </trans-unit>
        <trans-unit id="1b283a36217d300f6fcb0ec4098971332e3ad019" translate="yes" xml:space="preserve">
          <source>This flag (also available as &lt;code&gt;--line-numbers&lt;/code&gt;, abbreviated as &lt;code&gt;-l&lt;/code&gt;) causes Sass to emit comments for every style rule that indicate where each style rule was defined in the source stylesheet.</source>
          <target state="translated">このフラグ（ &lt;code&gt;--line-numbers&lt;/code&gt; とも呼ばれ、 &lt;code&gt;-l&lt;/code&gt; と省略されます）により、Sassは、各スタイルルールがソーススタイルシートのどこで定義されたかを示すコメントをすべてのスタイルルールに対して発行します。</target>
        </trans-unit>
        <trans-unit id="cce3e0d7d2eab228413af73d4c1139ff0a33906f" translate="yes" xml:space="preserve">
          <source>This flag acts like the &lt;a href=&quot;#update&quot;&gt;&lt;code&gt;--update&lt;/code&gt; flag&lt;/a&gt;, but after the first round compilation is done Sass stays open and continues compiling stylesheets whenever they or their dependencies change.</source>
          <target state="translated">このフラグは&lt;a href=&quot;#update&quot;&gt; &lt;code&gt;--update&lt;/code&gt; フラグの&lt;/a&gt;ように機能しますが、最初のラウンドのコンパイルが完了した後、Sassは開いたままで、スタイルシートまたはその依存関係が変更されるたびにスタイルシートのコンパイルを続行します。</target>
        </trans-unit>
        <trans-unit id="008f036652ed82163e6fdef4c42e5d167a8929e6" translate="yes" xml:space="preserve">
          <source>This flag causes Sass not to link from the generated CSS to the source map.</source>
          <target state="translated">このフラグにより、Sass は生成された CSS からソースマップへのリンクを行いません。</target>
        </trans-unit>
        <trans-unit id="520dda4365b641fb8f3fd0b1ef7af7bad4b10820" translate="yes" xml:space="preserve">
          <source>This flag causes Sass to emit comments for every style rule that indicate where each style rule was defined in the source stylesheet. It defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このフラグにより​​、Sassは、各スタイルルールがソーススタイルシートのどこで定義されたかを示すコメントをすべてのスタイルルールに対して発行します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="770f83dc55da77ed6bbfbab6c47b0b88f83fb5ea" translate="yes" xml:space="preserve">
          <source>This flag controls whether source maps are generated.</source>
          <target state="translated">このフラグは、ソースマップが生成されるかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="a66efbc5e880a51bb21527cb2546a1532014bf38" translate="yes" xml:space="preserve">
          <source>This flag controls whether the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt; is parsed as the &lt;a href=&quot;syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt; or not. It defaults to &lt;code&gt;false&lt;/code&gt;. It has no effect on stylesheets loaded using the &lt;a href=&quot;#file&quot;&gt;&lt;code&gt;file&lt;/code&gt; option&lt;/a&gt;.</source>
          <target state="translated">このフラグは、&lt;a href=&quot;#data&quot;&gt; &lt;code&gt;data&lt;/code&gt; オプション&lt;/a&gt;が&lt;a href=&quot;syntax#the-indented-syntax&quot;&gt;インデントされた構文&lt;/a&gt;として解析されるかどうかを制御します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。&lt;a href=&quot;#file&quot;&gt; &lt;code&gt;file&lt;/code&gt; オプション&lt;/a&gt;を使用してロードされたスタイルシートには影響しません。</target>
        </trans-unit>
        <trans-unit id="cdb9919ff824d6b4c8732edc39c48653df2eb814" translate="yes" xml:space="preserve">
          <source>This flag enables &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;, even if none of the arguments are colon-separated pairs.</source>
          <target state="translated">このフラグは、どの引数もコロンで区切られたペアでない場合でも、&lt;a href=&quot;#many-to-many-mode&quot;&gt;多対多モードを&lt;/a&gt;有効にします。</target>
        </trans-unit>
        <trans-unit id="4bbc13d561d74375e00461d0d2fcb0403a4c7259" translate="yes" xml:space="preserve">
          <source>This flag is an alternative way of telling Sass that it should read its input file from &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt;. When it&amp;rsquo;s passed, no input file may be passed.</source>
          <target state="translated">このフラグは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;標準入力&lt;/a&gt;から入力ファイルを読み取る必要があることをSassに通知する別の方法です。渡されると、入力ファイルは渡されません。</target>
        </trans-unit>
        <trans-unit id="0cb1434afea68c3907e4b83e9245b440f2f0a6d1" translate="yes" xml:space="preserve">
          <source>This flag loads the &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass framework&lt;/a&gt; and makes its mixins and functions available for use in Sass.</source>
          <target state="translated">このフラグは&lt;a href=&quot;http://compass-style.org/&quot;&gt;Compassフレームワーク&lt;/a&gt;をロードし、そのミックスインと関数をSassで使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="65b7022d96f92316215554a90b1c4a5f92a5aa93" translate="yes" xml:space="preserve">
          <source>This flag may only be passed in &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;. It tells Sass to stop compiling immediately when an error is detected, rather than trying to compile other Sass files that may not contain errors.</source>
          <target state="translated">このフラグは、&lt;a href=&quot;#many-to-many-mode&quot;&gt;多対多モード&lt;/a&gt;でのみ渡すことができます。エラーが含まれていない可能性のある他のSassファイルをコンパイルしようとするのではなく、エラーが検出されたらすぐにコンパイルを停止するようにSassに指示します。</target>
        </trans-unit>
        <trans-unit id="9f4221e93b16540bae9c482931cf0a247062f047" translate="yes" xml:space="preserve">
          <source>This flag only exists for backwards-compatibility. Source maps are now the recommended way of mapping CSS back to the Sass that generated it.</source>
          <target state="translated">このフラグは後方互換性のためにのみ存在します。ソースマップは、CSS を生成した Sass に戻す際に推奨される方法になりました。</target>
        </trans-unit>
        <trans-unit id="c81c4dd7d61d0e75b5a0eacbf2ef77cde55ae4ab" translate="yes" xml:space="preserve">
          <source>This flag prints the current version of Sass.</source>
          <target state="translated">このフラグは現在のSassのバージョンを表示します。</target>
        </trans-unit>
        <trans-unit id="489139386d874cbededf45319050a1bc0b332829" translate="yes" xml:space="preserve">
          <source>This flag tells Sass never to emit a &lt;code&gt;@charset&lt;/code&gt; declaration or a UTF-8 &lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8&quot;&gt;byte-order mark&lt;/a&gt;. By default, or if &lt;code&gt;--charset&lt;/code&gt; is passed, Sass will insert either a &lt;code&gt;@charset&lt;/code&gt; declaration (in expanded output mode) or a byte-order mark (in compressed output mode) if the stylesheet contains any non-ASCII characters.</source>
          <target state="translated">このフラグは、Sassに &lt;code&gt;@charset&lt;/code&gt; 宣言またはUTF-8&lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8&quot;&gt;バイト順マークを&lt;/a&gt;発行しないように指示します。デフォルトで、または &lt;code&gt;--charset&lt;/code&gt; が渡された場合、スタイルシートに非ASCII文字が含まれている場合、Sassは &lt;code&gt;@charset&lt;/code&gt; 宣言（拡張出力モードの場合）またはバイト順マーク（圧縮出力モードの場合）のいずれかを挿入します。</target>
        </trans-unit>
        <trans-unit id="ed118a706d7f6858b3e8cd19e01f4bbe7a9b58c1" translate="yes" xml:space="preserve">
          <source>This flag tells Sass only to emit ASCII characters to the terminal as part of error messages. By default, or if &lt;code&gt;--unicode&lt;/code&gt; is passed, Sass will emit non-ASCII characters for these messages. This flag does not affect the CSS output.</source>
          <target state="translated">このフラグは、エラーメッセージの一部としてASCII文字を端末に送信するようにSassに指示します。デフォルトで、または &lt;code&gt;--unicode&lt;/code&gt; が渡された場合、Sassはこれらのメッセージに対して非ASCII文字を出力します。このフラグはCSS出力には影響しません。</target>
        </trans-unit>
        <trans-unit id="fff230b7eba99f6e2555a7fdafd47c24716ee72b" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to embed the contents of the source map file in the generated CSS, rather than creating a separate file and linking to it from the CSS.</source>
          <target state="translated">このフラグは、別のファイルを作成してCSSからリンクするのではなく、生成されたCSSにソースマップファイルの内容を埋め込むようにSassに指示します。</target>
        </trans-unit>
        <trans-unit id="1e970be72cae8099bef28e91ebc3def905419fce" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to embed the entire contents of the Sass files that contributed to the generated CSS in the source map. This may produce very large source maps, but it guarantees that the source will be available on any computer no matter how the CSS is served.</source>
          <target state="translated">このフラグは、生成された CSS に貢献した Sass ファイルの内容全体をソース マップに埋め込むように Sass に指示します。これにより、非常に大きなソースマップが生成されるかもしれませんが、CSSがどのように提供されているかに関わらず、どのコンピュータでもソースが利用可能であることが保証されます。</target>
        </trans-unit>
        <trans-unit id="16b114f75a5d2bf10deeb92482b12e858d673044" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to generate output files with whose lines are separated with the U+000ALINEFEED character, as opposed to the operating system default (on Windows, this is U+000DCARRIAGERETURN followed by U+000ALINEFEED). It&amp;rsquo;s always true on systems that default to Unix-style newlines.</source>
          <target state="translated">このフラグは、オペレーティングシステムのデフォルトとは対照的に、行がU + 000ALINEFEED文字で区切られた出力ファイルを生成するようにSassに指示します（Windowsでは、これはU + 000DCARRIAGERETURNの後にU + 000ALINEFEEDが続きます）。これは、デフォルトでUnixスタイルの改行に設定されているシステムでは常に当てはまります。</target>
        </trans-unit>
        <trans-unit id="41d18c271e854a0f47cde32ba292a5b1181ce9ce" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to parse &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt; as &lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt;.</source>
          <target state="translated">このフラグは、Sassに&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;標準入力&lt;/a&gt;を&lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt;として解析するように指示します。</target>
        </trans-unit>
        <trans-unit id="69ea66bcb32f2bbb25fb4e03965a2ea55967763d" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to parse the input file as the &lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt;. If it&amp;rsquo;s used in &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;, all input files are parsed as the indented syntax, although files they &lt;a href=&quot;../at-rules/use&quot;&gt;use&lt;/a&gt; will have their syntax determined as usual. The inverse, &lt;code&gt;--no-indented&lt;/code&gt;, can be used to force all input files to be parsed as &lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt; instead.</source>
          <target state="translated">このフラグは、入力ファイルを&lt;a href=&quot;../syntax#the-indented-syntax&quot;&gt;インデントされた構文&lt;/a&gt;として解析するようにSassに指示します。&lt;a href=&quot;#many-to-many-mode&quot;&gt;多対多モード&lt;/a&gt;で使用される場合、すべての入力ファイルはインデントされた構文として解析されますが、&lt;a href=&quot;../at-rules/use&quot;&gt;使用&lt;/a&gt;するファイルの構文は通常どおりに決定されます。逆の &lt;code&gt;--no-indented&lt;/code&gt; を使用すると、代わりにすべての入力ファイルを強制的に&lt;a href=&quot;../syntax#scss&quot;&gt;SCSS&lt;/a&gt;として解析できます。</target>
        </trans-unit>
        <trans-unit id="261932def279e4e25bcafb9ee69ba68de17fc2cd" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to print the full Dart or JavaScript stack trace when an error is encountered. It&amp;rsquo;s used by the Sass team for debugging errors.</source>
          <target state="translated">このフラグは、エラーが発生したときに完全なDartまたはJavaScriptスタックトレースを出力するようにSassに指示します。これは、エラーをデバッグするためにSassチームによって使用されます。</target>
        </trans-unit>
        <trans-unit id="6aee8e8f9b6873df9a0c3b6f1037565470cd184c" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to print the full Ruby stack trace when an error is encountered. It&amp;rsquo;s used by the Sass team for debugging errors.</source>
          <target state="translated">このフラグは、エラーが発生したときに完全なRubyスタックトレースを出力するようにSassに指示します。これは、エラーをデバッグするためにSassチームによって使用されます。</target>
        </trans-unit>
        <trans-unit id="f30b97d7c89a086eb4184dcce6ad5907604121a6" translate="yes" xml:space="preserve">
          <source>This flag tells Sass to stop compiling immediately when an error is detected, rather than trying to compile other Sass files that may not contain errors. It&amp;rsquo;s mostly useful in &lt;a href=&quot;#many-to-many-mode&quot;&gt;many-to-many mode&lt;/a&gt;.</source>
          <target state="translated">このフラグは、エラーが含まれていない可能性のある他のSassファイルをコンパイルしようとするのではなく、エラーが検出されるとすぐにコンパイルを停止するようにSassに指示します。これは主に&lt;a href=&quot;#many-to-many-mode&quot;&gt;多対多モードで&lt;/a&gt;役立ちます。</target>
        </trans-unit>
        <trans-unit id="0e551d22518856816c9007c1610e52677c03122e" translate="yes" xml:space="preserve">
          <source>This flag tells Sass whether to emit a CSS file when an error occurs during compilation. This CSS file describes the error in a comment &lt;em&gt;and&lt;/em&gt; in the &lt;code&gt;content&lt;/code&gt; property of &lt;code&gt;body::before&lt;/code&gt;, so that you can see the error message in the browser without needing to switch back to the terminal.</source>
          <target state="translated">このフラグは、コンパイル中にエラーが発生したときにCSSファイルを発行するかどうかをSassに指示します。このCSSファイルには、コメントにエラーを説明&lt;em&gt;し、&lt;/em&gt;中に &lt;code&gt;content&lt;/code&gt; の性質 &lt;code&gt;body::before&lt;/code&gt; 、あなたが戻って端末への切り替えを必要とせずに、ブラウザにエラーメッセージを見ることができるようにということ。</target>
        </trans-unit>
        <trans-unit id="74bd5c3c493f219a5698982ea1762d9530b723f1" translate="yes" xml:space="preserve">
          <source>This flag tells the Sass migrator only to emit ASCII characters to the terminal as part of error messages. By default, or if &lt;code&gt;--unicode&lt;/code&gt; is passed, the migrator will emit non-ASCII characters for these messages. This flag does not affect the CSS output.</source>
          <target state="translated">このフラグは、エラーメッセージの一部としてASCII文字を端末に送信するようにSass移行者に指示します。デフォルトで、または &lt;code&gt;--unicode&lt;/code&gt; が渡された場合、移行プログラムはこれらのメッセージに対して非ASCII文字を出力します。このフラグはCSS出力には影響しません。</target>
        </trans-unit>
        <trans-unit id="092a47804096f16727719ec2d51cd484592182a2" translate="yes" xml:space="preserve">
          <source>This flag, which may only be passed along with &lt;code&gt;--watch&lt;/code&gt;, tells Sass to manually check for changes to the source files every so often instead of relying on the operating system to notify it when something changes. This may be necessary if you&amp;rsquo;re editing Sass on a remote drive where the operating system&amp;rsquo;s notification system doesn&amp;rsquo;t work.</source>
          <target state="translated">このフラグは &lt;code&gt;--watch&lt;/code&gt; と一緒にのみ渡される可能性があり、何かが変更されたときにオペレーティングシステムに通知するのではなく、ソースファイルへの変更を手動で頻繁にチェックするようにSassに指示します。これは、オペレーティングシステムの通知システムが機能しないリモートドライブでSassを編集している場合に必要になることがあります。</target>
        </trans-unit>
        <trans-unit id="dcba487e25a70112a116129dc10ffe7263d66e13" translate="yes" xml:space="preserve">
          <source>This function also supports the proprietary Microsoft &lt;code&gt;alpha(opacity=20)&lt;/code&gt; syntax as a special case.</source>
          <target state="translated">この関数は、特殊なケースとして、独自仕様のMicrosoft &lt;code&gt;alpha(opacity=20)&lt;/code&gt; 構文もサポートしています。</target>
        </trans-unit>
        <trans-unit id="8ab88bf70f783e7fcd01b6b5416b77e42a5ce5f6" translate="yes" xml:space="preserve">
          <source>This function asynchronously compiles a Sass file to CSS, and calls a standard Node callback with the &lt;a href=&quot;#result-object&quot;&gt;result&lt;/a&gt; or an &lt;a href=&quot;#error-object&quot;&gt;error&lt;/a&gt; when the rendering is complete. It takes an &lt;a href=&quot;#options&quot;&gt;options object&lt;/a&gt;, which must have either the &lt;a href=&quot;#file&quot;&gt;&lt;code&gt;file&lt;/code&gt; option&lt;/a&gt; or the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt; set.</source>
          <target state="translated">この関数は、SassファイルをCSSに非同期的にコンパイルし、レンダリングが完了すると、&lt;a href=&quot;#result-object&quot;&gt;結果&lt;/a&gt;または&lt;a href=&quot;#error-object&quot;&gt;エラーを使用&lt;/a&gt;して標準のノードコールバックを呼び出します。これは、&lt;a href=&quot;#file&quot;&gt; &lt;code&gt;file&lt;/code&gt; &lt;/a&gt;オプションまたは&lt;a href=&quot;#data&quot;&gt; &lt;code&gt;data&lt;/code&gt; &lt;/a&gt;オプションセットのいずれかが必要な&lt;a href=&quot;#options&quot;&gt;オプションオブジェクトを&lt;/a&gt;取ります。</target>
        </trans-unit>
        <trans-unit id="a3ec67208ac7bb6eabc68a4fc13211dcca66ecda" translate="yes" xml:space="preserve">
          <source>This function is identical to &lt;code&gt;$number * 100%&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;$number * 100%&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="c91f2265d2fb6814a1f9c51ca956dd838028dd10" translate="yes" xml:space="preserve">
          <source>This function is intended for debugging; its output format is not guaranteed to be consistent across Sass versions or implementations.</source>
          <target state="translated">この関数はデバッグを目的としたもので、出力形式が Sass のバージョンや実装間で一貫していることは保証されていません。</target>
        </trans-unit>
        <trans-unit id="edd6c3ec260853e8165e9d5f02880f2100e03896" translate="yes" xml:space="preserve">
          <source>This function is special in that it doesn&amp;rsquo;t even evaluate the argument that isn&amp;rsquo;t returned, so it&amp;rsquo;s safe to call even if the unused argument would throw an error.</source>
          <target state="translated">この関数は、返されない引数も評価しないという点で特別なので、未使用の引数がエラーをスローした場合でも安全に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="6a3573a179a37f564a66c0924cf072b52d52b1fb" translate="yes" xml:space="preserve">
          <source>This function only exists as a workaround for IE7's &lt;a href=&quot;http://jes.st/2013/ie7s-css-breaking-content-counter-bug/&quot;&gt;&lt;code&gt;content: counter&lt;/code&gt; bug&lt;/a&gt;. It works identically to any other plain-CSS function, except it avoids adding spaces between the argument commas.</source>
          <target state="translated">この関数は、IE7の&lt;a href=&quot;http://jes.st/2013/ie7s-css-breaking-content-counter-bug/&quot;&gt; &lt;code&gt;content: counter&lt;/code&gt; &lt;/a&gt;回避策としてのみ存在します：カウンターバグ。引数のコンマの間にスペースを追加しないことを除いて、他のプレーンなCSS関数と同じように機能します。</target>
        </trans-unit>
        <trans-unit id="daf2b443b96645b11ed97e65e9593d416da219dd" translate="yes" xml:space="preserve">
          <source>This function synchronously compiles a Sass file to CSS. If it succeeds, it returns the &lt;a href=&quot;#result-object&quot;&gt;result&lt;/a&gt;, and if it fails it throws an &lt;a href=&quot;#error-object&quot;&gt;error&lt;/a&gt;. It takes an &lt;a href=&quot;#options&quot;&gt;options object&lt;/a&gt;, which must have either the &lt;a href=&quot;#file&quot;&gt;&lt;code&gt;file&lt;/code&gt; option&lt;/a&gt; or the &lt;a href=&quot;#data&quot;&gt;&lt;code&gt;data&lt;/code&gt; option&lt;/a&gt; set.</source>
          <target state="translated">この関数は、SassファイルをCSSに同期的にコンパイルします。成功した場合は&lt;a href=&quot;#result-object&quot;&gt;結果を&lt;/a&gt;返し、失敗した場合は&lt;a href=&quot;#error-object&quot;&gt;エラーを&lt;/a&gt;スローします。これは、&lt;a href=&quot;#file&quot;&gt; &lt;code&gt;file&lt;/code&gt; &lt;/a&gt;オプションまたは&lt;a href=&quot;#data&quot;&gt; &lt;code&gt;data&lt;/code&gt; &lt;/a&gt;オプションセットのいずれかが必要な&lt;a href=&quot;#options&quot;&gt;オプションオブジェクトを&lt;/a&gt;取ります。</target>
        </trans-unit>
        <trans-unit id="becb36fdda822271a471a4076796d5427550c1dd" translate="yes" xml:space="preserve">
          <source>This helps avoid repetition of parent selectors, and makes complex CSS layouts with lots of nested selectors much simpler. For example:</source>
          <target state="translated">これにより、親セレクタの繰り返しを避けることができ、多くのネストされたセレクタを持つ複雑な CSS レイアウトをより簡単にすることができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f7c27d5f2519a24dc7dea8213d4df671fe7bff26" translate="yes" xml:space="preserve">
          <source>This integer option controls how many spaces or tabs (depending on the &lt;a href=&quot;#indenttype&quot;&gt;&lt;code&gt;indentType&lt;/code&gt; option&lt;/a&gt;) should be used per indentation level in the generated CSS. It defaults to 2, and must be between 0 and 10 (inclusive).</source>
          <target state="translated">この整数オプションは、生成されたCSSのインデントレベルごとに使用するスペースまたはタブの数（&lt;a href=&quot;#indenttype&quot;&gt; &lt;code&gt;indentType&lt;/code&gt; オプション&lt;/a&gt;によって異なります）を制御します。デフォルトは2で、0から10（両端を含む）でなければなりません。</target>
        </trans-unit>
        <trans-unit id="34f22156c5f9aff9552abf02f175ab3d68f6556b" translate="yes" xml:space="preserve">
          <source>This integer option determines the &lt;a href=&quot;values/numbers#precision&quot;&gt;precision&lt;/a&gt; that will be used when generating CSS that includes numbers. It defaults to 5 for Node Sass.</source>
          <target state="translated">この整数オプションは、数値を含むCSSを生成するときに使用される&lt;a href=&quot;values/numbers#precision&quot;&gt;精度&lt;/a&gt;を決定します。NodeSassのデフォルトは5です。</target>
        </trans-unit>
        <trans-unit id="82958030813dcf4173ba17af6911b53aafc8dc87" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; unless either</source>
          <target state="translated">どちらかで &lt;code&gt;undefined&lt;/code&gt; 限り、これは &lt;code&gt;null&lt;/code&gt; または未定義です</target>
        </trans-unit>
        <trans-unit id="354efb4bef49ea8ecc4d2b7e5de75478212615f4" translate="yes" xml:space="preserve">
          <source>This is compiled to:</source>
          <target state="translated">にコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="bd2971968cb63bb3ba3336da8300f448d320db3b" translate="yes" xml:space="preserve">
          <source>This is identical to &lt;a href=&quot;#adjust&quot;&gt;&lt;code&gt;color.adjust($color, $hue: 180deg)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;#adjust&quot;&gt; &lt;code&gt;color.adjust($color, $hue: 180deg)&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="8d6c74d7d93db471f4634ad59a89ec9a51e20945" translate="yes" xml:space="preserve">
          <source>This is identical to &lt;a href=&quot;#change&quot;&gt;&lt;code&gt;color.change($color, $saturation: 0%)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;#change&quot;&gt; &lt;code&gt;color.change($color, $saturation: 0%)&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="b35482a13bdb28379dcfca04aa43ea21461d0dd9" translate="yes" xml:space="preserve">
          <source>This is the best way to add new values to a map.</source>
          <target state="translated">これは、マップに新しい値を追加するのに最適な方法です。</target>
        </trans-unit>
        <trans-unit id="98104c1defbcfa22163c726d1c7b5a22484fe2f7" translate="yes" xml:space="preserve">
          <source>This is written &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot; as &amp;lt;prefix&amp;gt;-*&lt;/code&gt;, and it adds the given prefix to the beginning of every mixin, function, and variable name forwarded by the module. For example, if the module defines a member named &lt;code&gt;reset&lt;/code&gt; and it&amp;rsquo;s forwarded &lt;code&gt;as list-*&lt;/code&gt;, downstream stylesheets will refer to it as &lt;code&gt;list-reset&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;@forward &quot;&amp;lt;url&amp;gt;&quot; as &amp;lt;prefix&amp;gt;-*&lt;/code&gt; と記述され、モジュールによって転送されるすべてのミックスイン、関数、および変数名の先頭に指定されたプレフィックスを追加します。たとえば、モジュールが &lt;code&gt;reset&lt;/code&gt; という名前のメンバーを定義し、それが &lt;code&gt;as list-*&lt;/code&gt; 転送される場合、ダウンストリームスタイルシートはそれを &lt;code&gt;list-reset&lt;/code&gt; として参照します。</target>
        </trans-unit>
        <trans-unit id="66cc39014e692b9c2ec58982e284851ffb243362" translate="yes" xml:space="preserve">
          <source>This list type&amp;rsquo;s methods use 0-based indexing, even though within Sass lists use 1-based indexing. These methods also don&amp;rsquo;t support using negative numbers to index backwards from the end of the list.</source>
          <target state="translated">このリストタイプのメソッドは、Sassリスト内で1ベースのインデックスを使用している場合でも、0ベースのインデックスを使用します。これらのメソッドは、リストの最後から逆方向にインデックスを付けるために負の数を使用することもサポートしていません。</target>
        </trans-unit>
        <trans-unit id="3fdbea09d23c3600fc8d38d90c5625833f167bb0" translate="yes" xml:space="preserve">
          <source>This makes it easy to convert start using &lt;code&gt;@use&lt;/code&gt; in a stylesheet even before all the libraries you depend on have converted to the new module system. Be aware, though, that if they do convert their APIs may well change!</source>
          <target state="translated">これにより、依存するすべてのライブラリが新しいモジュールシステムに変換される前でも、スタイルシートで &lt;code&gt;@use&lt;/code&gt; を使用して開始を簡単に変換できます。ただし、変換するとAPIが変わる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3e221cb98e8206a7921fde60e73a3967e13fd2b1" translate="yes" xml:space="preserve">
          <source>This map type is represented as a list of key-value pairs rather than a mapping from keys to values. The only way to find the value associated with a given key is to iterate through the map checking for that key.</source>
          <target state="translated">このマップ・タイプは、キーから値へのマッピングではなく、キーと値のペアのリストとして表現されます。与えられたキーに関連付けられた値を見つける唯一の方法は、そのキーをチェックするマップを繰り返し実行することです。</target>
        </trans-unit>
        <trans-unit id="d4b5297fc6c26f52ee02451883faebe1c0d4eed2" translate="yes" xml:space="preserve">
          <source>This may not always be what you want, though. If you want the &lt;code&gt;@extend&lt;/code&gt; to do nothing if the extended selector doesn&amp;rsquo;t exist, just add &lt;code&gt;!optional&lt;/code&gt; to the end.</source>
          <target state="translated">ただし、これは必ずしも希望どおりではない場合があります。あなたがしたい場合 &lt;code&gt;@extend&lt;/code&gt; は何もしないように拡張されたセレクタが存在しない場合は、単に追加 &lt;code&gt;!optional&lt;/code&gt; 終わりに。</target>
        </trans-unit>
        <trans-unit id="bbb320de60e960922ca4332b4c5c60f6e3d77221" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;96px&lt;/code&gt; and &lt;code&gt;1in&lt;/code&gt; will return different values, even though they represent the same length.</source>
          <target state="translated">この手段があること &lt;code&gt;96px&lt;/code&gt; と &lt;code&gt;1in&lt;/code&gt; 、彼らが同じ長さを表していても、異なる値を返します。</target>
        </trans-unit>
        <trans-unit id="c81188216579c60386c9bf463658b27afd3b16a4" translate="yes" xml:space="preserve">
          <source>This means that all styles defined for &lt;code&gt;.error&lt;/code&gt; are also applied to &lt;code&gt;.seriousError&lt;/code&gt;, in addition to the styles specific to &lt;code&gt;.seriousError&lt;/code&gt;. In effect, every element with class &lt;code&gt;.seriousError&lt;/code&gt; also has class &lt;code&gt;.error&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;.seriousError&lt;/code&gt; に固有のスタイルに加えて、 &lt;code&gt;.error&lt;/code&gt; に定義されたすべてのスタイルが.seriousErrorにも適用されることを &lt;code&gt;.seriousError&lt;/code&gt; ます。実際には、クラス &lt;code&gt;.seriousError&lt;/code&gt; を持つすべての要素にもクラス &lt;code&gt;.error&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="7f06057a82e5b41504f1fcfaaaa0944e7b90136e" translate="yes" xml:space="preserve">
          <source>This migration converts stylesheets that use the old &lt;a href=&quot;../at-rules/import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; to load dependencies so that they use the Sass module system via the &lt;a href=&quot;../at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; instead. It doesn&amp;rsquo;t just na&amp;iuml;vely change &lt;code&gt;@import&lt;/code&gt;s to &lt;code&gt;@use&lt;/code&gt;s&amp;mdash;it updates stylesheets intelligently so that they keep working the same way they did before, including:</source>
          <target state="translated">この移行では、古い&lt;a href=&quot;../at-rules/import&quot;&gt; &lt;code&gt;@import&lt;/code&gt; ルール&lt;/a&gt;を使用するスタイルシートを変換して依存関係をロードし、代わりに&lt;a href=&quot;../at-rules/use&quot;&gt; &lt;code&gt;@use&lt;/code&gt; ルールを&lt;/a&gt;介してSassモジュールシステムを使用するようにします。それだけで単純に変更はありません &lt;code&gt;@import&lt;/code&gt; 秒 &lt;code&gt;@use&lt;/code&gt; sが、それは、彼らが以前と同じように、などの作業に保つようにインテリジェントにスタイルシートを更新します。</target>
        </trans-unit>
        <trans-unit id="d2cc90c66d823a4240b48018c1fbef57a01492db" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-E&lt;/code&gt;) controls the default &lt;a href=&quot;https://en.wikipedia.org/wiki/Character_encoding&quot;&gt;character encoding&lt;/a&gt; that Sass will use to load source files that don&amp;rsquo;t &lt;a href=&quot;../syntax/parsing#input-encoding&quot;&gt;explicitly specify&lt;/a&gt; a character encoding. It defaults to the operating system&amp;rsquo;s default encoding.</source>
          <target state="translated">このオプション（省略形 &lt;code&gt;-E&lt;/code&gt; ）は、Sassが&lt;a href=&quot;https://en.wikipedia.org/wiki/Character_encoding&quot;&gt;文字エンコード&lt;/a&gt;を&lt;a href=&quot;../syntax/parsing#input-encoding&quot;&gt;明示的に指定&lt;/a&gt;しないソースファイルをロードするために使用するデフォルトの文字エンコードを制御します。デフォルトでは、オペレーティングシステムのデフォルトのエンコーディングになります。</target>
        </trans-unit>
        <trans-unit id="68c01aa4a878cbdaf03b04a511a81fd78f16f841" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-I&lt;/code&gt;) adds an additional &lt;a href=&quot;../at-rules/use#load-paths&quot;&gt;load path&lt;/a&gt; for Sass to look for stylesheets. It can be passed multiple times to provide multiple load paths. Earlier load paths will take precedence over later ones.</source>
          <target state="translated">このオプション（省略形 &lt;code&gt;-I&lt;/code&gt; ）は、Sassがスタイルシートを検索するための追加の&lt;a href=&quot;../at-rules/use#load-paths&quot;&gt;ロードパス&lt;/a&gt;を追加します。複数回渡すことで、複数のロードパスを提供できます。以前のロードパスが後のロードパスよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="40df9e52efc93c154e3c66293c74a56a82b46a41" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-I&lt;/code&gt;) tells the migrator a &lt;a href=&quot;../at-rules/use#load-paths&quot;&gt;load path&lt;/a&gt; where it should look for stylesheets. It can be passed multiple times to provide multiple load paths. Earlier load paths will take precedence over later ones.</source>
          <target state="translated">このオプション（省略形 &lt;code&gt;-I&lt;/code&gt; ）は、スタイルシートを検索する&lt;a href=&quot;../at-rules/use#load-paths&quot;&gt;ロードパスを&lt;/a&gt;移行者に指示します。複数回渡すことで、複数のロードパスを提供できます。以前のロードパスが後のロードパスよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="1eb6566934c4d48b5b2e54badec7e20e5a08cdfc" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-d&lt;/code&gt;) tells the migrator to change not just the stylesheets that are explicitly passed on the command line, but also any stylesheets that they depend on using the &lt;a href=&quot;../at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt;, &lt;a href=&quot;../at-rules/forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rule&lt;/a&gt;, or &lt;a href=&quot;../at-rules/import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt;.</source>
          <target state="translated">このオプション（省略 &lt;code&gt;-d&lt;/code&gt; は）だけでなく、コマンドラインで明示的に渡されたスタイルシートだけでなく、彼らが使用していることに依存して任意のスタイルシートに変更する移行ツールを告げる&lt;a href=&quot;../at-rules/use&quot;&gt; &lt;code&gt;@use&lt;/code&gt; のルール&lt;/a&gt;、&lt;a href=&quot;../at-rules/forward&quot;&gt; &lt;code&gt;@forward&lt;/code&gt; ルール&lt;/a&gt;、または&lt;a href=&quot;../at-rules/import&quot;&gt; &lt;code&gt;@import&lt;/code&gt; のルールを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a30ca8a9fed1c579edd78e22f1aa5fa313051f20" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-p&lt;/code&gt;) takes an identifier prefix to remove from the beginning of all variable, mixin, and function names when they&amp;rsquo;re migrated. Members that don&amp;rsquo;t start with this prefix will remain unchanged.</source>
          <target state="translated">このオプション（省略形 &lt;code&gt;-p&lt;/code&gt; ）は、移行時にすべての変数、ミックスイン、および関数名の先頭から削除する識別子プレフィックスを取ります。このプレフィックスで始まらないメンバーは変更されません。</target>
        </trans-unit>
        <trans-unit id="351b9ff8d5b293705fd9f9b352bcec3be172918d" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-r&lt;/code&gt;) loads a &lt;a href=&quot;https://rubygems.org/&quot;&gt;Ruby gem&lt;/a&gt; before running Sass. It can be used to load functions defined in Ruby into your Sass environment.</source>
          <target state="translated">このオプションは、（略し &lt;code&gt;-r&lt;/code&gt; ）ロード&lt;a href=&quot;https://rubygems.org/&quot;&gt;Rubyの宝石を&lt;/a&gt;サスを実行する前に。Rubyで定義された関数をSass環境にロードするために使用できます。</target>
        </trans-unit>
        <trans-unit id="c31966521c62023c72dfe6e82e1289f60ffd7794" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-s&lt;/code&gt;) controls the output style of the resulting CSS. Dart Sass supports two output styles:</source>
          <target state="translated">このオプション（省略形 &lt;code&gt;-s&lt;/code&gt; ）は、結果のCSSの出力スタイルを制御します。Dart Sassは、次の2つの出力スタイルをサポートしています。</target>
        </trans-unit>
        <trans-unit id="e933d89a8c2346341280fafa03084c4579c2c4bd" translate="yes" xml:space="preserve">
          <source>This option (abbreviated &lt;code&gt;-t&lt;/code&gt;) controls the output style of the resulting CSS. Ruby Sass supports four output styles:</source>
          <target state="translated">このオプション（省略形 &lt;code&gt;-t&lt;/code&gt; ）は、結果のCSSの出力スタイルを制御します。Ruby Sassは、次の4つの出力スタイルをサポートしています。</target>
        </trans-unit>
        <trans-unit id="aa47431b1a0a7c2b08d798b7e2cd93cf6145e46f" translate="yes" xml:space="preserve">
          <source>This option controls how Sass generates source maps, which are files that tell browsers or other tools that consume CSS how that CSS corresponds to the Sass files from which it was generated. They make it possible to see and even edit your Sass files in browsers. See instructions for using source maps in &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps&quot;&gt;Chrome&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Style_Editor#Source_map_support&quot;&gt;Firefox&lt;/a&gt;. It has four possible values:</source>
          <target state="translated">このオプションは、Sassがソースマップを生成する方法を制御します。ソースマップは、CSSを使用するブラウザーまたはその他のツールにCSSが生成元のSassファイルにどのように対応するかを通知するファイルです。彼らはあなたのSassファイルをブラウザで見たり編集したりすることさえ可能にします。&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps&quot;&gt;Chrome&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Style_Editor#Source_map_support&quot;&gt;Firefox&lt;/a&gt;でソースマップを使用する手順を参照してください。4つの可能な値があります。</target>
        </trans-unit>
        <trans-unit id="f705d47660fd87b5e100093f85edbb0055e3715b" translate="yes" xml:space="preserve">
          <source>This option controls how the source maps that Sass generates link back to the Sass files that contributed to the generated CSS. Dart Sass supports two types of URLs:</source>
          <target state="translated">このオプションは、Sass が生成するソースマップが、生成された CSS に貢献した Sass ファイルにどのようにリンクバックするかを制御します。Dart Sass は 2 種類の URL をサポートしています。</target>
        </trans-unit>
        <trans-unit id="98a6d64e316376be8102c627ffed4c42e5800314" translate="yes" xml:space="preserve">
          <source>This option defines additional built-in Sass functions that are available in all stylesheets. It&amp;rsquo;s an object whose keys are Sass function signatures and whose values are JavaScript functions. Each function should take the same arguments as its signature. If the signature takes &lt;a href=&quot;at-rules/function#taking-arbitrary-arguments&quot;&gt;arbitrary arguments&lt;/a&gt;, the JavaScript function should take a single argument.</source>
          <target state="translated">このオプションは、すべてのスタイルシートで使用できる追加の組み込みSass関数を定義します。これは、キーがSass関数シグネチャであり、値がJavaScript関数であるオブジェクトです。各関数は、そのシグネチャと同じ引数を取る必要があります。シグニチャが&lt;a href=&quot;at-rules/function#taking-arbitrary-arguments&quot;&gt;任意の引数を&lt;/a&gt;取る場合、JavaScript関数は単一の引数を取る必要があります。</target>
        </trans-unit>
        <trans-unit id="c44c0b48314a6840f72e6d98c7a87086a22e1110" translate="yes" xml:space="preserve">
          <source>This option defines one or more additional handlers for loading files when a &lt;a href=&quot;at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; or an &lt;a href=&quot;at-rules/import&quot;&gt;&lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; is encountered. It can either be a single JavaScript function, or an array of functions. These functions are always passed two arguments:</source>
          <target state="translated">このオプションは、&lt;a href=&quot;at-rules/import&quot;&gt; &lt;code&gt;@import&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;at-rules/use&quot;&gt; &lt;code&gt;@use&lt;/code&gt; ルール&lt;/a&gt;または@importルールが検出されたときにファイルをロードするための1つ以上の追加ハンドラーを定義します。単一のJavaScript関数、または関数の配列のいずれかです。これらの関数には、常に2つの引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="9ef78e8ebc3e7bdba4cad7cfb89eb248d4c3ddb9" translate="yes" xml:space="preserve">
          <source>This option is allowed, but will have no effect, when using Node Sass or when using the &lt;code&gt;renderSync()&lt;/code&gt; function.</source>
          <target state="translated">このオプションは許可されていますが、Node Sassを使用している場合、または &lt;code&gt;renderSync()&lt;/code&gt; 関数を使用している場合は効果がありません。</target>
        </trans-unit>
        <trans-unit id="8acd15d7d66acae93362e5789441c0092a2d064b" translate="yes" xml:space="preserve">
          <source>This option isn&amp;rsquo;t supported by Dart Sass, because source maps are recommended as the best way of determining where a style rule is defined.</source>
          <target state="translated">スタイルルールが定義されている場所を決定する最良の方法としてソースマップが推奨されるため、このオプションはDartSassではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="53ef4f19a4cd9dd3d9ed890bf9aa51ee7a491b09" translate="yes" xml:space="preserve">
          <source>This option may be passed multiple times, or with multiple values separated by commas. Each prefix will be removed from any members that have it. If a member matches multiple prefixes, the longest matching prefix will be removed.</source>
          <target state="translated">このオプションは、複数回、あるいはカンマで区切って複数の値を渡すことができます。各プレフィックスは、それを持つメンバーから削除されます。あるメンバーが複数の接頭辞にマッチした場合、マッチした接頭辞の中で最も長い接頭辞が削除されます。</target>
        </trans-unit>
        <trans-unit id="1a73d0b6760b165e6ce4434e66962afbfab91869" translate="yes" xml:space="preserve">
          <source>This option tells Sass how many digits of &lt;a href=&quot;../values/numbers#precision&quot;&gt;precision&lt;/a&gt; to use when emitting decimal numbers.</source>
          <target state="translated">このオプションは、10進数を出力するときに使用する&lt;a href=&quot;../values/numbers#precision&quot;&gt;精度の&lt;/a&gt;桁数をSassに指示します。</target>
        </trans-unit>
        <trans-unit id="fa81c495129da0136ccaa79b312184373578f890" translate="yes" xml:space="preserve">
          <source>This option tells Sass where to store its cache of parsed files, so it can run faster in future invocations. It defaults to &lt;code&gt;.sass-cache&lt;/code&gt;.</source>
          <target state="translated">このオプションは、解析されたファイルのキャッシュを保存する場所をSassに指示するため、将来の呼び出しでより高速に実行できます。デフォルトは &lt;code&gt;.sass-cache&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4c6bd2913b8cf5c4b140be8024cfc59d5c863d38" translate="yes" xml:space="preserve">
          <source>This option tells the migrator which members to forward using the &lt;a href=&quot;../at-rules/forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rule&lt;/a&gt;. It supports the following settings:</source>
          <target state="translated">このオプションは、&lt;a href=&quot;../at-rules/forward&quot;&gt; &lt;code&gt;@forward&lt;/code&gt; ルール&lt;/a&gt;を使用して転送するメンバーを移行者に指示します。次の設定をサポートします。</target>
        </trans-unit>
        <trans-unit id="8509229a012c8bd7dc34ab68217fc98fbefbea4c" translate="yes" xml:space="preserve">
          <source>This string option controls the output style of the resulting CSS. There are four possible output styles:</source>
          <target state="translated">この文字列オプションは、結果として得られるCSSの出力スタイルを制御します。出力スタイルには4つの可能性があります。</target>
        </trans-unit>
        <trans-unit id="f58fc9cbc010789c328210a7c6cdc61a5c02463c" translate="yes" xml:space="preserve">
          <source>This string option controls what character sequence is used at the end of each line in the generated CSS. It can have the following values:</source>
          <target state="translated">この文字列オプションは、生成された CSS の各行の最後に使用される文字列を制御します。以下の値を持つことができます。</target>
        </trans-unit>
        <trans-unit id="1b459312d3b18bd16169ce05d7c25272833f4e31" translate="yes" xml:space="preserve">
          <source>This string option determines whether the generated CSS should use spaces (with the value &lt;code&gt;&quot;space&quot;&lt;/code&gt;) or tabs (with the value &lt;code&gt;&quot;tab&quot;&lt;/code&gt;) for indentation. It defaults to &lt;code&gt;&quot;space&quot;&lt;/code&gt;.</source>
          <target state="translated">この文字列オプションは、生成されたCSSがインデントにスペース（値 &lt;code&gt;&quot;space&quot;&lt;/code&gt; ）またはタブ（値 &lt;code&gt;&quot;tab&quot;&lt;/code&gt; ）のどちらを使用するかを決定します。デフォルトは &lt;code&gt;&quot;space&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="81d6d6fc32e183a1183288282bf71d1854c3d3b6" translate="yes" xml:space="preserve">
          <source>This string option is prepended to all the links from the source map to the Sass source files.</source>
          <target state="translated">この文字列オプションは、ソースマップからSassソースファイルへのすべてのリンクの前に付加されます。</target>
        </trans-unit>
        <trans-unit id="2c96e029983830e06b1455d34eecdbc80371b397" translate="yes" xml:space="preserve">
          <source>This string option is the location that Sass expects the generated CSS to be saved to. It&amp;rsquo;s used to determine the URL used to link from the generated CSS to the source map, and &lt;em&gt;from&lt;/em&gt; the source map to the Sass source files.</source>
          <target state="translated">この文字列オプションは、生成されたCSSが保存されることをSassが期待する場所です。ソースマップへ、および生成されたCSSのリンクに使用するURLを決定するために使われている&lt;em&gt;から、&lt;/em&gt;ソースマップサスのソースファイルに。</target>
        </trans-unit>
        <trans-unit id="45028baa6be17d2a72664c3a38a4df0af9b7562d" translate="yes" xml:space="preserve">
          <source>This string option is the path to the file for Sass to load and compile. If the file&amp;rsquo;s extension is &lt;code&gt;.scss&lt;/code&gt;, it will be parsed as &lt;a href=&quot;syntax#scss&quot;&gt;SCSS&lt;/a&gt;; if it&amp;rsquo;s &lt;code&gt;.sass&lt;/code&gt;, it will be parsed as the &lt;a href=&quot;syntax#the-indented-syntax&quot;&gt;indented syntax&lt;/a&gt;; and if it&amp;rsquo;s &lt;code&gt;.css&lt;/code&gt;, it will be parsed as &lt;a href=&quot;at-rules/import#importing-css&quot;&gt;plain CSS&lt;/a&gt;. If it has no extension, it will be parsed as SCSS.</source>
          <target state="translated">この文字列オプションは、Sassがロードしてコンパイルするファイルへのパスです。ファイルの拡張子が &lt;code&gt;.scss&lt;/code&gt; の場合、&lt;a href=&quot;syntax#scss&quot;&gt;SCSS&lt;/a&gt;として解析されます。 &lt;code&gt;.sass&lt;/code&gt; の場合、&lt;a href=&quot;syntax#the-indented-syntax&quot;&gt;インデントされた構文&lt;/a&gt;として解析されます。 &lt;code&gt;.css&lt;/code&gt; の場合は、&lt;a href=&quot;at-rules/import#importing-css&quot;&gt;プレーンCSS&lt;/a&gt;として解析されます。拡張子がない場合は、SCSSとして解析されます。</target>
        </trans-unit>
        <trans-unit id="d219e3904d30ed2ba0b59639aaa6c8472d320ff6" translate="yes" xml:space="preserve">
          <source>This string option provides the contents of the stylesheet to compile. Unless the &lt;a href=&quot;#file&quot;&gt;&lt;code&gt;file&lt;/code&gt; option&lt;/a&gt; is passed as well, the stylesheet&amp;rsquo;s URL is set to &lt;code&gt;&quot;stdin&quot;&lt;/code&gt;.</source>
          <target state="translated">この文字列オプションは、コンパイルするスタイルシートの内容を提供します。&lt;a href=&quot;#file&quot;&gt; &lt;code&gt;file&lt;/code&gt; オプション&lt;/a&gt;も渡されない限り、スタイルシートのURLは &lt;code&gt;&quot;stdin&quot;&lt;/code&gt; 設定されます。</target>
        </trans-unit>
        <trans-unit id="2d08f0562a4fe34e5c5501a0c25d0bb8dbdba77d" translate="yes" xml:space="preserve">
          <source>This uses the &lt;a href=&quot;../at-rules/extend&quot;&gt;&lt;code&gt;@extend&lt;/code&gt; rule&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;../at-rules/extend#how-it-works&quot;&gt;intelligent unification&lt;/a&gt; to make sure &lt;code&gt;$replacement&lt;/code&gt; is seamlessly integrated into &lt;code&gt;$selector&lt;/code&gt;. If &lt;code&gt;$selector&lt;/code&gt; doesn&amp;rsquo;t contain &lt;code&gt;$original&lt;/code&gt;, returns it as-is.</source>
          <target state="translated">これは、&lt;a href=&quot;../at-rules/extend&quot;&gt; &lt;code&gt;@extend&lt;/code&gt; ルール&lt;/a&gt;の&lt;a href=&quot;../at-rules/extend#how-it-works&quot;&gt;インテリジェントな統合&lt;/a&gt;を使用して &lt;code&gt;$replacement&lt;/code&gt; が &lt;code&gt;$selector&lt;/code&gt; シームレスに統合されるようにします。 &lt;code&gt;$selector&lt;/code&gt; &lt;code&gt;$original&lt;/code&gt; が含まれていない場合は、そのまま返します。</target>
        </trans-unit>
        <trans-unit id="545791d74954d8abe66caac2fc59ede691f8aa64" translate="yes" xml:space="preserve">
          <source>This will only evaluate the given module once, even if it&amp;rsquo;s loaded multiple times in different ways.</source>
          <target state="translated">これは、異なる方法で複数回ロードされた場合でも、指定されたモジュールを1回だけ評価します。</target>
        </trans-unit>
        <trans-unit id="b1a72864e0bd50d769e6dea5e5ce673bba1458c1" translate="yes" xml:space="preserve">
          <source>This works by using &lt;code&gt;@extend&lt;/code&gt; and throwing away the original selector. This means that it can be used to do very advanced replacements; see the examples below.</source>
          <target state="translated">これは、 &lt;code&gt;@extend&lt;/code&gt; を使用して元のセレクターを破棄することで機能します。これは、非常に高度な置換を行うために使用できることを意味します。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="fde2343337cbb8bf9b90da7e0ff1431427016760" translate="yes" xml:space="preserve">
          <source>Throws an error if called outside of a mixin.</source>
          <target state="translated">ミキシンの外部から呼び出された場合にエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="e5cbb065759288edecad2c65efb1b31b56a60f88" translate="yes" xml:space="preserve">
          <source>To enable Sass in Merb, add the following line to &lt;code&gt;config/dependencies.rb&lt;/code&gt;:</source>
          <target state="translated">MerbでSassを有効にするには、 &lt;code&gt;config/dependencies.rb&lt;/code&gt; に次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="5d0729184767803da147daf282f65d916eb3027e" translate="yes" xml:space="preserve">
          <source>To enable Sass in Rails versions before Rails 3, add the following line to &lt;code&gt;environment.rb&lt;/code&gt;:</source>
          <target state="translated">Rails 3より前のバージョンのRailsでSassを有効にするには、以下の行を &lt;code&gt;environment.rb&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="16af8bdd69375a45a6eaabb6d2429473b658ecb7" translate="yes" xml:space="preserve">
          <source>To enable Sass in a Rack application, add the following lines to &lt;code&gt;config.ru&lt;/code&gt;.</source>
          <target state="translated">RackアプリケーションでSassを有効にするには、次の行を &lt;code&gt;config.ru&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="2d48f9832eda1e4b352dca419f4d8b94e22a5ed7" translate="yes" xml:space="preserve">
          <source>To ensure that stylesheets work on every operating system, Sass imports files by &lt;em&gt;URL&lt;/em&gt;, not by &lt;em&gt;file path&lt;/em&gt;. This means you need to use forward slashes, not backslashes, even when you&amp;rsquo;re on Windows.</source>
          <target state="translated">スタイルシートがすべてのオペレーティングシステムで確実に機能するように、Sassは&lt;em&gt;ファイルパス&lt;/em&gt;ではなく&lt;em&gt;URL&lt;/em&gt;でファイルをインポートします。つまり、Windowsを使用している場合でも、円記号ではなくスラッシュを使用する必要があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f8d5853cb0db6b839240fc7067de4871071f153d" translate="yes" xml:space="preserve">
          <source>To ensure that stylesheets work on every operating system, Sass loads files by &lt;em&gt;URL&lt;/em&gt;, not by &lt;em&gt;file path&lt;/em&gt;. This means you need to use forward slashes, not backslashes, even on Windows.</source>
          <target state="translated">スタイルシートがすべてのオペレーティングシステムで確実に機能するように、Sassは&lt;em&gt;ファイルパス&lt;/em&gt;ではなく&lt;em&gt;URL&lt;/em&gt;でファイルをロードします。これは、Windowsでも、バックスラッシュではなくスラッシュを使用する必要があることを意味します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="24104d743ce156119c7b4c8d0844608f2e0d9ad9" translate="yes" xml:space="preserve">
          <source>To explicitly specify the encoding of your stylesheet, use a &lt;code&gt;@charset&lt;/code&gt; declaration just like in CSS. Add &lt;code&gt;@charset &quot;encoding-name&quot;;&lt;/code&gt; at the beginning of the stylesheet (before any whitespace or comments) and Sass will interpret it as the given encoding. Note that whatever encoding you use, it must be convertible to Unicode.</source>
          <target state="translated">スタイルシートのエンコーディングを明示的に指定するには、CSSと同様に &lt;code&gt;@charset&lt;/code&gt; 宣言を使用します。 &lt;code&gt;@charset &quot;encoding-name&quot;;&lt;/code&gt; を追加します。スタイルシートの先頭（空白またはコメントの前）にあり、Sassはそれを指定されたエンコーディングとして解釈します。使用するエンコーディングが何であれ、Unicodeに変換できる必要があります。</target>
        </trans-unit>
        <trans-unit id="708a54b9a1991506dc324585e8d8c1e2bf6ad675" translate="yes" xml:space="preserve">
          <source>To help you work with nested maps, some map functions support deep operations. For example, if you pass multiple keys to &lt;code&gt;map.get()&lt;/code&gt;, it will follow those keys to find the desired nested map:</source>
          <target state="translated">ネストされたマップでの作業を支援するために、一部のマップ関数は深い操作をサポートしています。たとえば、 &lt;code&gt;map.get()&lt;/code&gt; に複数のキーを渡すと、それらのキーに従って、目的のネストされたマップが検索されます。</target>
        </trans-unit>
        <trans-unit id="56703fbca11248f0b2bdf6c377b490bcccf84fef" translate="yes" xml:space="preserve">
          <source>To load a module with configuration, write &lt;code&gt;@use &amp;lt;url&amp;gt; with (&amp;lt;variable&amp;gt;: &amp;lt;value&amp;gt;, &amp;lt;variable&amp;gt;: &amp;lt;value&amp;gt;)&lt;/code&gt;. The configured values will override the variables&amp;rsquo; default values. Only variables written at the top level of the stylesheet with a &lt;code&gt;!default&lt;/code&gt; flag can be configured.</source>
          <target state="translated">構成を使用してモジュールをロードするには、 &lt;code&gt;@use &amp;lt;url&amp;gt; with (&amp;lt;variable&amp;gt;: &amp;lt;value&amp;gt;, &amp;lt;variable&amp;gt;: &amp;lt;value&amp;gt;)&lt;/code&gt; と記述します。構成された値は、変数のデフォルト値をオーバーライドします。 &lt;code&gt;!default&lt;/code&gt; フラグを使用してスタイルシートの最上位に記述された変数のみを構成できます。</target>
        </trans-unit>
        <trans-unit id="4700448ab20b7b5bddd738a4a176c18a266ac776" translate="yes" xml:space="preserve">
          <source>To make this easier, Sass also supports &lt;em&gt;import-only files&lt;/em&gt;. If you name a file &lt;code&gt;&amp;lt;name&amp;gt;.import.scss&lt;/code&gt;, it will only be loaded for imports, not for &lt;code&gt;@use&lt;/code&gt;s. This way, you can retain compatibility for &lt;code&gt;@import&lt;/code&gt; users while still providing a nice API for users of the new module system.</source>
          <target state="translated">これを簡単にするために、Sassは&lt;em&gt;インポート専用ファイル&lt;/em&gt;もサポートしてい&lt;em&gt;ます&lt;/em&gt;。ファイルに &lt;code&gt;&amp;lt;name&amp;gt;.import.scss&lt;/code&gt; という名前を付けると、 &lt;code&gt;@use&lt;/code&gt; ではなく、インポート用にのみロードされます。このようにして、新しいモジュールシステムのユーザーに優れたAPIを提供しながら、 &lt;code&gt;@import&lt;/code&gt; ユーザーの互換性を維持できます。</target>
        </trans-unit>
        <trans-unit id="2a73d12abde4b58b4eaa56bb3215149ea76d6023" translate="yes" xml:space="preserve">
          <source>To make this possible, Sass provides the &lt;code&gt;!default&lt;/code&gt; flag. This assigns a value to a variable &lt;em&gt;only if&lt;/em&gt; that variable isn&amp;rsquo;t defined or its value is &lt;a href=&quot;values/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. Otherwise, the existing value will be used.</source>
          <target state="translated">これを可能にするために、Sassは &lt;code&gt;!default&lt;/code&gt; フラグを提供します。これは、変数が定義されていないか、その値が&lt;a href=&quot;values/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; の&lt;/a&gt;&lt;em&gt;場合にのみ&lt;/em&gt;、変数に値を割り当てます。それ以外の場合は、既存の値が使用されます。</target>
        </trans-unit>
        <trans-unit id="de06f9c502e4b3a7ffd0a3aad024b2ec4db54a94" translate="yes" xml:space="preserve">
          <source>To run Sass from the command line, just use</source>
          <target state="translated">コマンドラインからSassを実行するには</target>
        </trans-unit>
        <trans-unit id="72fe2963a498fec5325682da190f5643827f2e5c" translate="yes" xml:space="preserve">
          <source>To use the Sass migrator, tell it &lt;a href=&quot;#migrations&quot;&gt;which migration&lt;/a&gt; you want to run and what Sass files you want to migrate:</source>
          <target state="translated">サス移行ツールを使用するには、それを伝える&lt;a href=&quot;#migrations&quot;&gt;移行され&lt;/a&gt;、あなたが実行したいとSassのは、あなたが移行するどのファイル：</target>
        </trans-unit>
        <trans-unit id="d123a8228b0a744cf53e7a8a514533230368d6dd" translate="yes" xml:space="preserve">
          <source>Top-Level Statements</source>
          <target state="translated">トップレベルのステートメント</target>
        </trans-unit>
        <trans-unit id="7012e685210c7d03883f55753c7a5d74cf85f50a" translate="yes" xml:space="preserve">
          <source>Trailing Commas</source>
          <target state="translated">トレイリングコンマ</target>
        </trans-unit>
        <trans-unit id="4dc570712796d1d30cb56fc1e8aa44450bbca7cc" translate="yes" xml:space="preserve">
          <source>Trigonometric Functions</source>
          <target state="translated">三角関数</target>
        </trans-unit>
        <trans-unit id="caed6e0171f434a95e774f963eaf8636e990320e" translate="yes" xml:space="preserve">
          <source>Truthiness and Falsiness</source>
          <target state="translated">真偽偽</target>
        </trans-unit>
        <trans-unit id="be4c6f650182af9a4487d0aef4c894ed7255e95f" translate="yes" xml:space="preserve">
          <source>Unary Operators</source>
          <target state="translated">単項演算子</target>
        </trans-unit>
        <trans-unit id="7b7d44c14475d66e338dbc16f27abd28b9cd8e9c" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt; removes quotes from strings, which makes it difficult to use quoted strings as values for custom properties when they come from Sass variables. As a workaround, you can use the &lt;a href=&quot;../modules/meta#inspect&quot;&gt;&lt;code&gt;meta.inspect()&lt;/code&gt; function&lt;/a&gt; to preserve the quotes.</source>
          <target state="translated">残念ながら、&lt;a href=&quot;../interpolation&quot;&gt;補間&lt;/a&gt;によって文字列から引用符が削除されるため、引用符で囲まれた文字列をSass変数から取得した場合にカスタムプロパティの値として使用することは困難です。回避策として、&lt;a href=&quot;../modules/meta#inspect&quot;&gt; &lt;code&gt;meta.inspect()&lt;/code&gt; 関数&lt;/a&gt;を使用して引用符を保持できます。</target>
        </trans-unit>
        <trans-unit id="1ad44dbaa4831c5a7c1830010ae4c038f6307e75" translate="yes" xml:space="preserve">
          <source>Unfortunately, the migrator does not support custom importers, but it does have built-in support for resolving URLs starting with &lt;code&gt;~&lt;/code&gt; by searching in &lt;code&gt;node_modules&lt;/code&gt;, similar to &lt;a href=&quot;https://github.com/webpack-contrib/sass-loader#resolving-import-at-rules&quot;&gt;what Webpack supports&lt;/a&gt;.</source>
          <target state="translated">残念ながら、移行 &lt;code&gt;node_modules&lt;/code&gt; はカスタムインポーターをサポートしていませんが、&lt;a href=&quot;https://github.com/webpack-contrib/sass-loader#resolving-import-at-rules&quot;&gt;Webpackがサポートし&lt;/a&gt;ているのと同様に、node_modulesを検索して &lt;code&gt;~&lt;/code&gt; 始まるURLを解決するための組み込みサポートがあります。</target>
        </trans-unit>
        <trans-unit id="800433e4e83820c982f054958922fa1bc7ca5d6b" translate="yes" xml:space="preserve">
          <source>Unfortunately, this means that we have to always remember to use &lt;code&gt;.error&lt;/code&gt; with &lt;code&gt;.seriousError&lt;/code&gt;. This is a maintenance burden, leads to tricky bugs, and can bring non-semantic style concerns into the markup.</source>
          <target state="translated">残念ながら、私たちは常に覚えているのはこの手段が使用する &lt;code&gt;.error&lt;/code&gt; と &lt;code&gt;.seriousError&lt;/code&gt; 。これはメンテナンスの負担であり、トリッキーなバグにつながり、非セマンティックスタイルの懸念をマークアップにもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="f9bcf9e83d2a79206f3f81d3f7ee3a998e877475" translate="yes" xml:space="preserve">
          <source>Unifies two selectors into a single selector that matches only elements matched by both input selectors. Returns &lt;code&gt;null&lt;/code&gt; if there is no such selector.</source>
          <target state="translated">2つのセレクターを単一のセレクターに統合し、両方の入力セレクターが一致する要素のみを一致させます。そのようなセレクタがない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="145ca07decf4a005fc7b4223bf113eafd0c159a5" translate="yes" xml:space="preserve">
          <source>Unit Functions</source>
          <target state="translated">ユニット機能</target>
        </trans-unit>
        <trans-unit id="a20f2c0123b9a570feed93bcf0287608c8fcd4ab" translate="yes" xml:space="preserve">
          <source>Unitless numbers can be compared with any number. They&amp;rsquo;re automatically converted to that number&amp;rsquo;s unit.</source>
          <target state="translated">無次元数は任意の数と比較できます。それらは自動的にその数の単位に変換されます。</target>
        </trans-unit>
        <trans-unit id="ff92b0795ba3b810a6fc98a6cbdc208467bfe06b" translate="yes" xml:space="preserve">
          <source>Unitless numbers can be used with numbers of any unit.</source>
          <target state="translated">単位のない数字は、任意の単位の数字を使用することができます。</target>
        </trans-unit>
        <trans-unit id="12748281e0f02357f2a2f65c1c6a7d01ee122506" translate="yes" xml:space="preserve">
          <source>Units</source>
          <target state="translated">Units</target>
        </trans-unit>
        <trans-unit id="674a459914b321a7319cdedafb8ad0a73245d853" translate="yes" xml:space="preserve">
          <source>Universal Statements</source>
          <target state="translated">ユニバーサルステートメント</target>
        </trans-unit>
        <trans-unit id="872ca4c8eab59b0dd849420e210e766c26422591" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;$bracketed&lt;/code&gt; is passed, the resulting list is bracketed if the first parameter is.</source>
          <target state="translated">&lt;code&gt;$bracketed&lt;/code&gt; が渡されない限り、最初のパラメーターがブラケットされている場合、結果のリストはブラケットされます。</target>
        </trans-unit>
        <trans-unit id="56dd328feb200abd01d0a7e6a97e6981481b2fe3" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;$separator&lt;/code&gt; is passed, if one list is comma-separated and one is space-separated, the first parameter's separator is used for the resulting list. If both lists have fewer than two items, spaces are used for the resulting list.</source>
          <target state="translated">&lt;code&gt;$separator&lt;/code&gt; が渡されない限り、1つのリストがコンマで区切られ、1つがスペースで区切られている場合、最初のパラメーターのセパレーターが結果のリストに使用されます。両方のリストのアイテムが2つ未満の場合、結果のリストにはスペースが使用されます。</target>
        </trans-unit>
        <trans-unit id="1363117536b31421047d80acd67a6865cb2a2442" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;content-exists()&lt;/code&gt; is called directly from a mixin, an error will be raised.</source>
          <target state="translated">&lt;code&gt;content-exists()&lt;/code&gt; がミックスインから直接呼び出されない限り、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="76ff0ed4ac7d80876eaa702113778227c4cc8f99" translate="yes" xml:space="preserve">
          <source>Unless the &lt;code&gt;$separator&lt;/code&gt; argument is passed, if the list had only one item, the resulting list will be space-separated.</source>
          <target state="translated">&lt;code&gt;$separator&lt;/code&gt; 引数が渡されない限り、リストに項目が1つしかない場合、結果のリストはスペースで区切られます。</target>
        </trans-unit>
        <trans-unit id="03700045476b208aa94420bb227309caff53b89c" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt;, which copy styles into the current style rule, &lt;code&gt;@extend&lt;/code&gt; updates style rules that contain the extended selector so that they contain the extending selector as well. When extending selectors, Sass does &lt;em&gt;intelligent unification&lt;/em&gt;:</source>
          <target state="translated">スタイルを現在のスタイルルールにコピーする&lt;a href=&quot;mixin&quot;&gt;ミックスイン&lt;/a&gt;とは異なり、 &lt;code&gt;@extend&lt;/code&gt; は拡張セレクターを含むスタイルルールを更新して拡張セレクターも含むようにします。セレクターを拡張するとき、Sassは&lt;em&gt;インテリジェントな統合を行い&lt;/em&gt;ます：</target>
        </trans-unit>
        <trans-unit id="dd99d83979ddae906c6089d467e3a623d0862a94" translate="yes" xml:space="preserve">
          <source>Unlike languages like JavaScript, Sass uses words rather than symbols for its &lt;a href=&quot;../values/booleans&quot;&gt;boolean&lt;/a&gt; operators.</source>
          <target state="translated">JavaScriptのような言語とは異なり、Sassは&lt;a href=&quot;../values/booleans&quot;&gt;ブール&lt;/a&gt;演算子に記号ではなく単語を使用します。</target>
        </trans-unit>
        <trans-unit id="0a6bc63d843eef7902dbce3c20323a9013b9c162" translate="yes" xml:space="preserve">
          <source>Unlike lists, maps must always be surrounded by parentheses and must always be comma-separated. Both the keys and values in maps can be any SassScript object. A map may only have one value associated with a given key (although that value may be a list). A given value may be associated with many keys, though.</source>
          <target state="translated">リストとは異なり、マップは常に括弧で囲まれ、常にカンマで区切られている必要があります。マップのキーと値は、いずれも任意の SassScript オブジェクトにすることができます。マップは、与えられたキーに関連付けられた値を 1 つだけ持つことができます (その値はリストであってもかまいません)。ただし、与えられた値は多くのキーに関連付けられることがあります。</target>
        </trans-unit>
        <trans-unit id="28201693f03d1e9150ecab32994e775dd9a12c3d" translate="yes" xml:space="preserve">
          <source>Unlike most selector functions, &lt;code&gt;selector-nest&lt;/code&gt; allows the parent selector &lt;code&gt;&amp;amp;&lt;/code&gt; to be used in any selector but the first.</source>
          <target state="translated">ほとんどのセレクター関数とは異なり、 &lt;code&gt;selector-nest&lt;/code&gt; を使用すると、親セレクター &lt;code&gt;&amp;amp;&lt;/code&gt; を最初以外のセレクターで使用できます。</target>
        </trans-unit>
        <trans-unit id="551837b66646048d4b86ccfc46a3d42e1edc7d86" translate="yes" xml:space="preserve">
          <source>Unlike some other languages, Sass doesn&amp;rsquo;t require that you use &lt;code&gt;./&lt;/code&gt; for relative imports. Relative imports are always available.</source>
          <target state="translated">他のいくつかの言語とは異なり、Sassでは相対インポートに &lt;code&gt;./&lt;/code&gt; を使用する必要はありません。相対インポートは常に利用可能です。</target>
        </trans-unit>
        <trans-unit id="f744b797c0dc9fec0ca998b0a785f44273c6e256" translate="yes" xml:space="preserve">
          <source>Unquoted</source>
          <target state="translated">Unquoted</target>
        </trans-unit>
        <trans-unit id="47e6566a6faff9be13195d1e7518a595fbf5e3dd" translate="yes" xml:space="preserve">
          <source>Unquoted strings are written as CSS&lt;a href=&quot;https://drafts.csswg.org/css-syntax-3/#ident-token-diagram&quot;&gt;identifiers&lt;/a&gt;, following the syntax diagram below. They may include &lt;a href=&quot;../interpolation&quot;&gt;interpolation&lt;/a&gt; anywhere.</source>
          <target state="translated">引用符で囲まれていない文字列は、以下の構文図に従って、CSS&lt;a href=&quot;https://drafts.csswg.org/css-syntax-3/#ident-token-diagram&quot;&gt;識別子&lt;/a&gt;として記述されます。それらはどこにでも&lt;a href=&quot;../interpolation&quot;&gt;補間を&lt;/a&gt;含むかもしれません。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="9629fc5be7eebf84f66a1a4fe14d7eee29fbc498" translate="yes" xml:space="preserve">
          <source>Usage Example:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="5253f44b019d85657e950f8f9ef36c011d7df44a" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#append&quot;&gt;&lt;code&gt;list.append()&lt;/code&gt;&lt;/a&gt; instead to add a single value to a list. Only use &lt;code&gt;list.join()&lt;/code&gt; to combine two lists together into one.</source>
          <target state="translated">代わりに&lt;a href=&quot;#append&quot;&gt; &lt;code&gt;list.append()&lt;/code&gt; を&lt;/a&gt;使用して、リストに単一の値を追加します。 &lt;code&gt;list.join()&lt;/code&gt; を使用して、2つのリストを1つに結合するだけです。</target>
        </trans-unit>
        <trans-unit id="936edae5d2de4429a13dfc88fb76048edb5d8873" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;sass --help&lt;/code&gt; for full documentation.</source>
          <target state="translated">完全なドキュメントについては、 &lt;code&gt;sass --help&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="72a3ab63eb244754d6a277a8c18c9d671df5562a" translate="yes" xml:space="preserve">
          <source>User-created importers must inherit from &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Importers/Base.html&quot;&gt;Sass::Importers::Base&lt;/a&gt;.</source>
          <target state="translated">ユーザーが作成したインポーターは&lt;a href=&quot;http://sass-lang.com/documentation/Sass/Importers/Base.html&quot;&gt;Sass :: Importers :: Base&lt;/a&gt;から継承する必要があります。</target>
        </trans-unit>
        <trans-unit id="f68d8b77e8f10448a25ffec622ba4c62ca6e4441" translate="yes" xml:space="preserve">
          <source>User-defined functions also support &lt;a href=&quot;#variable_arguments&quot;&gt;variable arguments&lt;/a&gt; in the same way as mixins.</source>
          <target state="translated">ユーザー定義関数も、ミックスインと同じ方法で&lt;a href=&quot;#variable_arguments&quot;&gt;可変引数&lt;/a&gt;をサポートします。</target>
        </trans-unit>
        <trans-unit id="f829b8497ac4cecc133647d21b9e7ab12512cc02" translate="yes" xml:space="preserve">
          <source>Users can define their own Sass functions using the Ruby API. For more information, see the &lt;a href=&quot;sass/script/functions#adding_custom_functions&quot;&gt;source documentation&lt;/a&gt;.</source>
          <target state="translated">ユーザーは、Ruby APIを使用して独自のSass関数を定義できます。詳細については、&lt;a href=&quot;sass/script/functions#adding_custom_functions&quot;&gt;ソースドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8d723d10f9bd0508705580ce55ade8956c38bbce" translate="yes" xml:space="preserve">
          <source>Users occasionally want to use interpolation to define a variable name based on another variable. Sass doesn&amp;rsquo;t allow this, because it makes it much harder to tell at a glance which variables are defined where. What you &lt;em&gt;can&lt;/em&gt; do, though, is define a &lt;a href=&quot;values/maps&quot;&gt;map&lt;/a&gt; from names to values that you can then access using variables.</source>
          <target state="translated">ユーザーは、補間を使用して、別の変数に基づいて変数名を定義したい場合があります。Sassはこれを許可していません。これは、どの変数がどこで定義されているかを一目で判断するのがはるかに困難になるためです。あなたが何を&lt;em&gt;することができ&lt;/em&gt;ません、しかし、定義している&lt;a href=&quot;values/maps&quot;&gt;マップを&lt;/a&gt;使用すると、その後、変数を使用してアクセスできるような値に名前から。</target>
        </trans-unit>
        <trans-unit id="0657ce5b13a9064f9e46d1f3e7526bfff9804ecf" translate="yes" xml:space="preserve">
          <source>Uses the value passed for each keyword argument in place of the corresponding property of the color, and returns the changed color. It&amp;rsquo;s an error to specify an RGB property (&lt;code&gt;$red&lt;/code&gt;, &lt;code&gt;$green&lt;/code&gt;, and/or &lt;code&gt;$blue&lt;/code&gt;) at the same time as an HSL property (&lt;code&gt;$hue&lt;/code&gt;, &lt;code&gt;$saturation&lt;/code&gt;, and/or &lt;code&gt;$lightness&lt;/code&gt;), or either of those at the same time as an &lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;HWB&lt;/a&gt; property (&lt;code&gt;$hue&lt;/code&gt;, &lt;code&gt;$whiteness&lt;/code&gt;, and/or &lt;code&gt;$blackness&lt;/code&gt;).</source>
          <target state="translated">色の対応するプロパティの代わりに、各キーワード引数に渡された値を使用し、変更された色を返します。 RGBプロパティ（ &lt;code&gt;$red&lt;/code&gt; 、 &lt;code&gt;$green&lt;/code&gt; 、および/または &lt;code&gt;$blue&lt;/code&gt; ）をHSLプロパティ（ &lt;code&gt;$hue&lt;/code&gt; 、 &lt;code&gt;$saturation&lt;/code&gt; 、および/または &lt;code&gt;$lightness&lt;/code&gt; ）と同時に指定するか、それらのいずれかを同時に指定するのはエラーです。&lt;a href=&quot;https://en.wikipedia.org/wiki/HWB_color_model&quot;&gt;HWB&lt;/a&gt;プロパティとしての時間（ &lt;code&gt;$hue&lt;/code&gt; 、 &lt;code&gt;$whiteness&lt;/code&gt; 、および/または &lt;code&gt;$blackness&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bb771266dd60384fa6e5f8ca9918cefcb5350d48" translate="yes" xml:space="preserve">
          <source>Using Booleans</source>
          <target state="translated">ブーリアンの使用</target>
        </trans-unit>
        <trans-unit id="5bd2ddfea3ed5ca85c4c809297e5606f9b9fb7fe" translate="yes" xml:space="preserve">
          <source>Using Lists</source>
          <target state="translated">リストの使用</target>
        </trans-unit>
        <trans-unit id="0b5599b18b26956af6df0d8513851d1358a34b31" translate="yes" xml:space="preserve">
          <source>Using Maps</source>
          <target state="translated">マップの使用</target>
        </trans-unit>
        <trans-unit id="a0ed3c8ffbb485bdcff1600b6b717d9db053867b" translate="yes" xml:space="preserve">
          <source>Using Sass</source>
          <target state="translated">Sassの使用</target>
        </trans-unit>
        <trans-unit id="6c9f5242fbc04bc1bf0061d659bc4abf5c91fc15" translate="yes" xml:space="preserve">
          <source>Using Sass in Ruby code is very simple. After installing the Sass gem, you can use it by running &lt;code&gt;require &quot;sass&quot;&lt;/code&gt; and using &lt;a href=&quot;http://sass-lang.com/documentation/Sass/Engine.html&quot;&gt;Sass::Engine&lt;/a&gt; like so:</source>
          <target state="translated">RubyコードでSassを使用するのは非常に簡単です。Sass gemをインストールしたら、 &lt;code&gt;require &quot;sass&quot;&lt;/code&gt; を実行し、&lt;a href=&quot;http://sass-lang.com/documentation/Sass/Engine.html&quot;&gt;Sass :: Engineを次の&lt;/a&gt;ように使用して使用できます。</target>
        </trans-unit>
        <trans-unit id="0701d51e2238471096af133360d47b98e784ca3c" translate="yes" xml:space="preserve">
          <source>Value Types</source>
          <target state="translated">値の種類</target>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="52941da9a3b3b2fc5e211993b41384faa81f65d4" translate="yes" xml:space="preserve">
          <source>Variable Arguments</source>
          <target state="translated">変数引数</target>
        </trans-unit>
        <trans-unit id="ca4cab7a39afeea82a57b9d1ddd82f67a9f0f9d8" translate="yes" xml:space="preserve">
          <source>Variable Defaults: &lt;code&gt;!default&lt;/code&gt;</source>
          <target state="translated">変数のデフォルト： &lt;code&gt;!default&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a993f0ecb978e6d4f6c3f1eca6b0e43b6692410" translate="yes" xml:space="preserve">
          <source>Variable Scope and Content Blocks</source>
          <target state="translated">可変スコープとコンテンツブロック</target>
        </trans-unit>
        <trans-unit id="34762da26e1639d54b003cb20434ff57de97fb21" translate="yes" xml:space="preserve">
          <source>Variable arguments also contain any keyword arguments passed to the mixin or function. These can be accessed using the &lt;a href=&quot;sass/script/functions#keywords-instance_method&quot;&gt;&lt;code&gt;keywords($args)&lt;/code&gt; function&lt;/a&gt;, which returns them as a map from strings (without &lt;code&gt;$&lt;/code&gt;) to values.</source>
          <target state="translated">可変引数には、ミックスインまたは関数に渡されるキーワード引数も含まれます。これらには、&lt;a href=&quot;sass/script/functions#keywords-instance_method&quot;&gt; &lt;code&gt;keywords($args)&lt;/code&gt; 関数&lt;/a&gt;を使用してアクセスできます。この関数は、文字列（ &lt;code&gt;$&lt;/code&gt; なし）から値へのマップとして返​​します。</target>
        </trans-unit>
        <trans-unit id="12bec1e6f5c7b6f13ec79c6d010470c778844034" translate="yes" xml:space="preserve">
          <source>Variable arguments can also be used when calling a mixin. Using the same syntax, you can expand a list of values so that each value is passed as a separate argument, or expand a map of values so that each pair is treated as a keyword argument. For example:</source>
          <target state="translated">ミキシンを呼び出す際には、変数引数を使用することもできます。同じ構文を使用して、値のリストを展開して各値を別の引数として渡したり、値のマップを展開して各ペアをキーワード引数として扱うことができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="d8f6a1442eaa82ed2ef7bd36ce68687125894980" translate="yes" xml:space="preserve">
          <source>Variables are only available within the level of nested selectors where they're defined. If they're defined outside of any nested selectors, they're available everywhere. They can also be defined with the &lt;code&gt;!global&lt;/code&gt; flag, in which case they're also available everywhere. For example:</source>
          <target state="translated">変数は、それらが定義されているネストされたセレクターのレベル内でのみ使用できます。ネストされたセレクターの外側で定義されている場合、どこでも使用できます。また、 &lt;code&gt;!global&lt;/code&gt; フラグで定義することもできます。その場合、どこでも使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="e62bc3146d23cb11c46abb4734d92fcb2f16ae85" translate="yes" xml:space="preserve">
          <source>Variables declared at the top level of a stylesheet are &lt;em&gt;global&lt;/em&gt;. This means that they can be accessed anywhere in their module after they&amp;rsquo;ve been declared. But that&amp;rsquo;s not true for all variables. Those declared in blocks (curly braces in SCSS or indented code in Sass) are usually &lt;em&gt;local&lt;/em&gt;, and can only be accessed within the block they were declared.</source>
          <target state="translated">スタイルシートのトップレベルで宣言された変数は&lt;em&gt;グローバル&lt;/em&gt;です。これは、宣言された後、モジュール内のどこからでもアクセスできることを意味します。しかし、それはすべての変数に当てはまるわけではありません。ブロックで宣言されたもの（SCSSでは中括弧またはSassではインデントされたコード）は通常&lt;em&gt;ローカル&lt;/em&gt;であり、宣言されたブロック内でのみアクセスできます。</target>
        </trans-unit>
        <trans-unit id="ba8994031832487676846ac77fa7f0b8dec3b112" translate="yes" xml:space="preserve">
          <source>Variables declared in &lt;a href=&quot;at-rules/control&quot;&gt;flow control rules&lt;/a&gt; have special scoping rules: they don&amp;rsquo;t shadow variables at the same level as the flow control rule. Instead, they just assign to those variables. This makes it much easier to conditionally assign a value to a variable, or build up a value as part of a loop.</source>
          <target state="translated">&lt;a href=&quot;at-rules/control&quot;&gt;フロー制御ルールで&lt;/a&gt;宣言された変数には、特別なスコープルールがあります。フロー制御ルールと同じレベルで変数をシャドウイングしません。代わりに、それらはそれらの変数に割り当てるだけです。これにより、条件付きで変数に値を割り当てたり、ループの一部として値を作成したりすることがはるかに簡単になります。</target>
        </trans-unit>
        <trans-unit id="904235a134bb733bf81ca62491f8d250cf2ee574" translate="yes" xml:space="preserve">
          <source>Variables defined with &lt;code&gt;!default&lt;/code&gt; can be configured when loading a module with the &lt;a href=&quot;at-rules/use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt;. Sass libraries often use &lt;code&gt;!default&lt;/code&gt; variables to allow their users to configure the library&amp;rsquo;s CSS.</source>
          <target state="translated">&lt;code&gt;!default&lt;/code&gt; で定義された変数は、&lt;a href=&quot;at-rules/use&quot;&gt; &lt;code&gt;@use&lt;/code&gt; ルールを使用&lt;/a&gt;してモジュールをロードするときに構成できます。Sassライブラリは、多くの場合、 &lt;code&gt;!default&lt;/code&gt; 変数を使用して、ユーザーがライブラリのCSSを構成できるようにします。</target>
        </trans-unit>
        <trans-unit id="65d06d898537d012a091ac8922afb3d1b05a0f0f" translate="yes" xml:space="preserve">
          <source>Variables in flow control scope can assign to existing variables in the outer scope, but they can&amp;rsquo;t declare new variables there. Make sure the variable is already declared before you assign to it, even if you need to declare it as &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">フロー制御スコープ内の変数は、外部スコープ内の既存の変数に割り当てることができますが、そこで新しい変数を宣言することはできません。 &lt;code&gt;null&lt;/code&gt; として宣言する必要がある場合でも、変数を割り当てる前に、変数がすでに宣言されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="b030b4bb1d6b81c859be99cb4803003e9fe720b8" translate="yes" xml:space="preserve">
          <source>Variables that are defined by a &lt;a href=&quot;modules&quot;&gt;built-in module&lt;/a&gt; cannot be modified.</source>
          <target state="translated">&lt;a href=&quot;modules&quot;&gt;組み込みモジュールで&lt;/a&gt;定義されている変数は変更できません。</target>
        </trans-unit>
        <trans-unit id="1cb19cba9d55dde6587abe0c14c4d12a21eb6bd0" translate="yes" xml:space="preserve">
          <source>Variables with &lt;code&gt;null&lt;/code&gt; values are treated as unassigned by !default:</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 値を持つ変数は、！defaultによって未割り当てとして扱われます。</target>
        </trans-unit>
        <trans-unit id="a26c9a48ab460ac1ce8cae1c7f4d0ff504a10df3" translate="yes" xml:space="preserve">
          <source>Variables: &lt;code&gt;$&lt;/code&gt; #variables_</source>
          <target state="translated">変数： &lt;code&gt;$&lt;/code&gt; #variables_</target>
        </trans-unit>
        <trans-unit id="cb1d3dd192599c5c0c675baaf111eab2ce9bde05" translate="yes" xml:space="preserve">
          <source>Versions of Dart Sass before 1.20.2 preferred resolving imports using load paths (&lt;a href=&quot;#includepaths&quot;&gt;includePaths&lt;/a&gt;) before resolving them using custom importers.</source>
          <target state="translated">1.20.2より前のバージョンのDartSassは、カスタムインポーターを使用してインポートを解決する前に、ロードパス（&lt;a href=&quot;#includepaths&quot;&gt;includePaths&lt;/a&gt;）を使用してインポートを解決することを推奨していました。</target>
        </trans-unit>
        <trans-unit id="b64307469adf2f5aedbcf95bfc09230b12d1624f" translate="yes" xml:space="preserve">
          <source>Versions of Node Sass before 2.0.0 don&amp;rsquo;t support the &lt;code&gt;importer&lt;/code&gt; option at all.</source>
          <target state="translated">2.0.0より前のバージョンのNodeSassは、 &lt;code&gt;importer&lt;/code&gt; オプションをまったくサポートしていません。</target>
        </trans-unit>
        <trans-unit id="f07d3145f49f291089821be2da8032e39ecd35c0" translate="yes" xml:space="preserve">
          <source>Versions of Node Sass before 3.0.0 don&amp;rsquo;t support arrays of importers, nor do they support importers that return &lt;code&gt;Error&lt;/code&gt; objects.</source>
          <target state="translated">3.0.0より前のバージョンのNodeSassは、インポーターの配列をサポートしていません。また、 &lt;code&gt;Error&lt;/code&gt; オブジェクトを返すインポーターもサポートしていません。</target>
        </trans-unit>
        <trans-unit id="1d1f601ec35589e15e62cc3f14a2ecf6ef02dcd9" translate="yes" xml:space="preserve">
          <source>Watching and Updating</source>
          <target state="translated">視聴と更新</target>
        </trans-unit>
        <trans-unit id="5296e040e5951a011bab7d361744570cafde9edc" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re looking into loosening this restriction, though. If you&amp;rsquo;d like to help make that happen, check out &lt;a href=&quot;https://github.com/sass/sass/issues/1425&quot;&gt;this GitHub issue&lt;/a&gt;.</source>
          <target state="translated">ただし、この制限を緩和することを検討しています。それを実現するために支援したい場合は、&lt;a href=&quot;https://github.com/sass/sass/issues/1425&quot;&gt;このGitHubの問題を&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="81c072eafeee9ba2f1af1475d9e85b857253f7a2" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve written a &lt;a href=&quot;../cli/migrator&quot;&gt;migration tool&lt;/a&gt; that automatically converts most &lt;code&gt;@import&lt;/code&gt;-based code to &lt;code&gt;@use&lt;/code&gt;-based code in a flash. Just point it at your entrypoints and let it run!</source>
          <target state="translated">ほとんどの &lt;code&gt;@import&lt;/code&gt; ベースのコードを &lt;code&gt;@use&lt;/code&gt; ベースのコードに瞬時に自動的に変換する&lt;a href=&quot;../cli/migrator&quot;&gt;移行ツール&lt;/a&gt;を作成しました。エントリポイントに向けて実行するだけです。</target>
        </trans-unit>
        <trans-unit id="00fe09362c5a1e8e9fe77fdafdd64aed2b63ed92" translate="yes" xml:space="preserve">
          <source>Webpack uses the &lt;a href=&quot;https://www.npmjs.com/package/sass-loader&quot;&gt;&lt;code&gt;sass-loader&lt;/code&gt; package&lt;/a&gt;.</source>
          <target state="translated">Webpackは&lt;a href=&quot;https://www.npmjs.com/package/sass-loader&quot;&gt; &lt;code&gt;sass-loader&lt;/code&gt; パッケージを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="fc476ae6c1bd15ef6c5cb340c03e844433c803d7" translate="yes" xml:space="preserve">
          <source>Well-formatted, customizable output</source>
          <target state="translated">整形された、カスタマイズ可能な出力</target>
        </trans-unit>
        <trans-unit id="ae320f9f01d8ff3bba28de4f9a328eab4f9428a3" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s Wrong With &lt;code&gt;@import&lt;/code&gt;?</source>
          <target state="translated">何が問題になってい &lt;code&gt;@import&lt;/code&gt; は？</target>
        </trans-unit>
        <trans-unit id="dcb5c2e8b90de931f4b2425c9053cf7885cb9b69" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s the use of a selector that isn&amp;rsquo;t emitted? It can still be &lt;a href=&quot;../at-rules/extend&quot;&gt;extended&lt;/a&gt;! Unlike class selectors, placeholders don&amp;rsquo;t clutter up the CSS if they aren&amp;rsquo;t extended and they don&amp;rsquo;t mandate that users of a library use specific class names for their HTML.</source>
          <target state="translated">放出されないセレクターの使用は何ですか？それでも&lt;a href=&quot;../at-rules/extend&quot;&gt;拡張&lt;/a&gt;できます！クラスセレクターとは異なり、プレースホルダーは拡張されていない場合でもCSSを乱雑にすることはなく、ライブラリのユーザーがHTMLに特定のクラス名を使用することを義務付けていません。</target>
        </trans-unit>
        <trans-unit id="3b28b040c3f84f76a7a3baeacd11bc2968574350" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#rendersync&quot;&gt;&lt;code&gt;renderSync()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; fail, they provide an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error&quot;&gt;&lt;code&gt;Error&lt;/code&gt; object&lt;/a&gt; that contains information about the compilation. This object has the following properties, in addition to the standard &lt;code&gt;Error&lt;/code&gt; properties:</source>
          <target state="translated">とき&lt;a href=&quot;#rendersync&quot;&gt; &lt;code&gt;renderSync()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;失敗し、彼らが提供&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; オブジェクト&lt;/a&gt;のコンパイルに関する情報が含まれています。このオブジェクトには、標準の &lt;code&gt;Error&lt;/code&gt; プロパティに加えて、次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="2646c7df6f3b6ff686cf14096cfe715089548d29" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#rendersync&quot;&gt;&lt;code&gt;renderSync()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; succeed, they provide a result object that contains information about the compilation. This object has the following properties:</source>
          <target state="translated">とき&lt;a href=&quot;#rendersync&quot;&gt; &lt;code&gt;renderSync()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;成功し、彼らはコンパイルに関する情報が含まれて結果オブジェクトを提供します。このオブジェクトには次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="67751b65818c9029a2c762b1022f6376b14b4cce" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;@extend&lt;/code&gt;&lt;a href=&quot;#how-it-works&quot;&gt;interleaves complex selectors&lt;/a&gt;, it doesn&amp;rsquo;t generate all possible combinations of ancestor selectors. Many of the selectors it could generate are unlikely to actually match real HTML, and generating them all would make stylesheets way too big for very little real value. Instead, it uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Heuristic&quot;&gt;heuristic&lt;/a&gt;: it assumes that each selector&amp;rsquo;s ancestors will be self-contained, without being interleaved with any other selector&amp;rsquo;s ancestors.</source>
          <target state="translated">&lt;code&gt;@extend&lt;/code&gt; が&lt;a href=&quot;#how-it-works&quot;&gt;複雑なセレクターをインターリーブ&lt;/a&gt;する場合、祖先セレクターのすべての可能な組み合わせが生成されるわけではありません。生成される可能性のあるセレクターの多くは、実際に実際のHTMLと一致する可能性は低く、それらをすべて生成すると、スタイルシートが大きくなりすぎて、実際の価値がほとんどなくなります。代わりに、&lt;a href=&quot;https://en.wikipedia.org/wiki/Heuristic&quot;&gt;ヒューリスティックを&lt;/a&gt;使用します。各セレクターの祖先は、他のセレクターの祖先とインターリーブされることなく、自己完結型であると想定しています。</target>
        </trans-unit>
        <trans-unit id="109b6826f0b0eb1e61d89ae5125c5e7c1f41166b" translate="yes" xml:space="preserve">
          <source>When Sass encounters invalid syntax in a stylesheet, parsing will fail and an error will be presented to the user with information about the location of the invalid syntax and the reason it was invalid.</source>
          <target state="translated">Sass がスタイルシートで無効な構文に遭遇した場合、解析に失敗し、無効な構文の場所と無効な理由に関する情報を含むエラーがユーザーに表示されます。</target>
        </trans-unit>
        <trans-unit id="7384966515f04b8c7cc1bf90292a115d6c470017" translate="yes" xml:space="preserve">
          <source>When Sass imports a file, that file is evaluated as though its contents appeared directly in place of the &lt;code&gt;@import&lt;/code&gt;. Any &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt;, and &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt; from the imported file are made available, and all its CSS is included at the exact point where the &lt;code&gt;@import&lt;/code&gt; was written. What&amp;rsquo;s more, any mixins, functions, or variables that were defined before the &lt;code&gt;@import&lt;/code&gt; (including from other &lt;code&gt;@import&lt;/code&gt;s) are available in the imported stylesheet.</source>
          <target state="translated">Sassがファイルをインポートすると、そのファイルは、その内容が &lt;code&gt;@import&lt;/code&gt; の代わりに直接表示されているかのように評価されます。任意の&lt;a href=&quot;mixin&quot;&gt;ミックスイン&lt;/a&gt;、&lt;a href=&quot;function&quot;&gt;機能&lt;/a&gt;、および&lt;a href=&quot;../variables&quot;&gt;変数&lt;/a&gt;インポートされたファイルからは利用できるようになり、そしてそのすべてのCSSは、正確なポイントに含まれている &lt;code&gt;@import&lt;/code&gt; が書かれていました。さらに、 &lt;code&gt;@import&lt;/code&gt; 前に定義されたミックスイン、関数、または変数（他の &lt;code&gt;@import&lt;/code&gt; からのものを含む）は、インポートされたスタイルシートで使用できます。</target>
        </trans-unit>
        <trans-unit id="ae1804a6635a94c5a2eab113966e0084f8548ecb" translate="yes" xml:space="preserve">
          <source>When Sass is nesting selectors, it doesn&amp;rsquo;t know what interpolation was used to generate them. This means it will automatically add the outer selector to the inner selector &lt;em&gt;even if&lt;/em&gt; you used &lt;code&gt;&amp;amp;&lt;/code&gt; as a SassScript expression. That&amp;rsquo;s why you need to explicitly use the &lt;a href=&quot;../at-rules/at-root&quot;&gt;&lt;code&gt;@at-root&lt;/code&gt; rule&lt;/a&gt; to tell Sass not to include the outer selector.</source>
          <target state="translated">Sassがセレクターをネストしているとき、それらを生成するためにどの補間が使用されたかはわかりません。つまり、 &lt;code&gt;&amp;amp;&lt;/code&gt; をSassScript式として使用した&lt;em&gt;場合でも&lt;/em&gt;、外部セレクターが内部セレクターに自動的に追加されます。そのため、&lt;a href=&quot;../at-rules/at-root&quot;&gt; &lt;code&gt;@at-root&lt;/code&gt; &lt;/a&gt;ルールを明示的に使用して、外部セレクターを含めないようにSassに指示する必要があります。</target>
        </trans-unit>
        <trans-unit id="5edf8a38ebf65fb3df157cbcf947cdaeedd25f7d" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;@return&lt;/code&gt; is encountered, it immediately ends the function and returns its result. Returning early can be useful for handling edge-cases or cases where a more efficient algorithm is available without wrapping the entire function in an &lt;a href=&quot;control/if#else&quot;&gt;&lt;code&gt;@else&lt;/code&gt; block&lt;/a&gt;.</source>
          <target state="translated">とき &lt;code&gt;@return&lt;/code&gt; が検出され、それがすぐに機能を終了し、その結果を返します。早期に戻ることは、エッジケースや、関数全体を&lt;a href=&quot;control/if#else&quot;&gt; &lt;code&gt;@else&lt;/code&gt; ブロック&lt;/a&gt;でラップせずに、より効率的なアルゴリズムを使用できる場合を処理するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a0a609947d51b2b71ada8e9fe7b263350a5becc1" translate="yes" xml:space="preserve">
          <source>When a file with &lt;code&gt;@use&lt;/code&gt; rules is imported, all the CSS transitively loaded by those is included in the resulting stylesheet, even if it&amp;rsquo;s already been included by another import. If you&amp;rsquo;re not careful, this can result in bloated CSS output!</source>
          <target state="translated">&lt;code&gt;@use&lt;/code&gt; ルールを含むファイルがインポートされると、それらによって推移的にロードされたすべてのCSSは、別のインポートによってすでに含まれている場合でも、結果のスタイルシートに含まれます。注意しないと、CSS出力が肥大化する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7c4504b06fe4f2d0632fed935fffecb31c8dbe15" translate="yes" xml:space="preserve">
          <source>When a function is called, arguments can be passed by name in addition to passing them by their position in the argument list. This is especially useful for functions with multiple optional arguments, or with &lt;a href=&quot;../values/booleans&quot;&gt;boolean&lt;/a&gt; arguments whose meanings aren&amp;rsquo;t obvious without a name to go with them. Keyword arguments use the same syntax as &lt;a href=&quot;../variables&quot;&gt;variable declarations&lt;/a&gt; and &lt;a href=&quot;#optional-arguments&quot;&gt;optional arguments&lt;/a&gt;.</source>
          <target state="translated">関数が呼び出されると、引数は引数リスト内の位置で渡すだけでなく、名前で渡すこともできます。これは、複数のオプションの引数を持つ関数、または名前がないと意味が明確でない&lt;a href=&quot;../values/booleans&quot;&gt;ブール&lt;/a&gt;引数を持つ関数で特に役立ちます。キーワード引数は、&lt;a href=&quot;../variables&quot;&gt;変数宣言&lt;/a&gt;および&lt;a href=&quot;#optional-arguments&quot;&gt;オプションの引数&lt;/a&gt;と同じ構文を使用します。</target>
        </trans-unit>
        <trans-unit id="bb06b4bcfec9f4720b7452a192e8cd3abfaf6ad8" translate="yes" xml:space="preserve">
          <source>When a mixin is included, arguments can be passed by name in addition to passing them by their position in the argument list. This is especially useful for mixins with multiple optional arguments, or with &lt;a href=&quot;../values/booleans&quot;&gt;boolean&lt;/a&gt; arguments whose meanings aren&amp;rsquo;t obvious without a name to go with them. Keyword arguments use the same syntax as &lt;a href=&quot;../variables&quot;&gt;variable declarations&lt;/a&gt; and &lt;a href=&quot;#optional-arguments&quot;&gt;optional arguments&lt;/a&gt;.</source>
          <target state="translated">ミックスインが含まれている場合、引数は、引数リスト内の位置で渡すだけでなく、名前で渡すこともできます。これは、複数のオプションの引数を使用するミックスインや、名前を付けないと意味が明確でない&lt;a href=&quot;../values/booleans&quot;&gt;ブール&lt;/a&gt;引数を使用する場合に特に便利です。キーワード引数は、&lt;a href=&quot;../variables&quot;&gt;変数宣言&lt;/a&gt;および&lt;a href=&quot;#optional-arguments&quot;&gt;オプションの引数&lt;/a&gt;と同じ構文を使用します。</target>
        </trans-unit>
        <trans-unit id="b7f513c450831f05e82ae2122380c6269d3cf6a8" translate="yes" xml:space="preserve">
          <source>When a parent selector is used in an inner selector, it&amp;rsquo;s replaced with the corresponding outer selector. This happens instead of the normal nesting behavior.</source>
          <target state="translated">親セレクターが内部セレクターで使用される場合、対応する外部セレクターに置き換えられます。これは、通常のネスト動作の代わりに発生します。</target>
        </trans-unit>
        <trans-unit id="81668018632d182ee958edee74e2e2162a380c23" translate="yes" xml:space="preserve">
          <source>When a quoted string is injected into another value via interpolation, &lt;a href=&quot;../interpolation#quoted-strings&quot;&gt;its quotes are removed&lt;/a&gt;! This makes it easy to write strings containing selectors, for example, that can be injected into style rules without adding quotes.</source>
          <target state="translated">引用符で囲まれた文字列が補間によって別の値に挿入されると、&lt;a href=&quot;../interpolation#quoted-strings&quot;&gt;その引用符は削除され&lt;/a&gt;ます。これにより、たとえば、引用符を追加せずにスタイルルールに挿入できるセレクターを含む文字列を簡単に記述できます。</target>
        </trans-unit>
        <trans-unit id="8ad9a9930b743e6ec09722d7d13ac805fe155c4d" translate="yes" xml:space="preserve">
          <source>When an unquoted string is parsed, the literal text of escapes are parsed as part of the string. For example, &lt;code&gt;\a&lt;/code&gt; is parsed as the characters &lt;code&gt;\&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, and space. In order to ensure that unquoted strings that have the same meanings in CSS are parsed the same way, though, these escapes are &lt;em&gt;normalized&lt;/em&gt;. For each code point, whether it&amp;rsquo;s escaped or unescaped:</source>
          <target state="translated">引用符で囲まれていない文字列が解析されると、エスケープのリテラルテキストが文字列の一部として解析されます。たとえば、 &lt;code&gt;\a&lt;/code&gt; は文字 &lt;code&gt;\&lt;/code&gt; 、 &lt;code&gt;a&lt;/code&gt; 、およびスペースとして解析されます。ただし、CSSで同じ意味を持つ引用符で囲まれていない文字列が同じ方法で解析されるようにするために、これらのエスケープは&lt;em&gt;正規化され&lt;/em&gt;ます。コードポイントごとに、エスケープされているかどうかに関係なく、次のようになります。</target>
        </trans-unit>
        <trans-unit id="218ab28d5f752f9a20108380952ae476cd785f73" translate="yes" xml:space="preserve">
          <source>When compiling whole directories, Sass will ignore &lt;a href=&quot;../at-rules/import#partials&quot;&gt;partial files&lt;/a&gt; whose names begin with &lt;code&gt;_&lt;/code&gt;. You can use partials to separate out your stylesheets without creating a bunch of unnecessary output files.</source>
          <target state="translated">ディレクトリ全体をコンパイルする場合、Sassは名前が &lt;code&gt;_&lt;/code&gt; で始まる&lt;a href=&quot;../at-rules/import#partials&quot;&gt;部分的なファイル&lt;/a&gt;を無視します。パーシャルを使用すると、不要な出力ファイルを大量に作成することなく、スタイルシートを分離できます。</target>
        </trans-unit>
        <trans-unit id="31bb94d366bd70bae726f8d286d66a9019433b73" translate="yes" xml:space="preserve">
          <source>When compiling whole directories, Sass will ignore &lt;a href=&quot;../at-rules/use#partials&quot;&gt;partial files&lt;/a&gt; whose names begin with &lt;code&gt;_&lt;/code&gt;. You can use partials to separate out your stylesheets without creating a bunch of unnecessary output files.</source>
          <target state="translated">ディレクトリ全体をコンパイルする場合、Sassは名前が &lt;code&gt;_&lt;/code&gt; で始まる&lt;a href=&quot;../at-rules/use#partials&quot;&gt;部分的なファイル&lt;/a&gt;を無視します。パーシャルを使用すると、不要な出力ファイルを大量に作成することなく、スタイルシートを分離できます。</target>
        </trans-unit>
        <trans-unit id="45cf9995f3f3b0a0c2fc12ee09c79fc32d152015" translate="yes" xml:space="preserve">
          <source>When defining a mixin, the arguments are written as variable names separated by commas, all in parentheses after the name. Then when including the mixin, values can be passed in in the same manner. For example:</source>
          <target state="translated">ミキシングを定義する際には、引数はカンマで区切った変数名で書かれ、名前の後はすべて括弧で囲まれています。ミキシンを含める際には、同じように値を渡すことができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8eaf0650b12f4b6e13c45da64d3aefa7b846ec82" translate="yes" xml:space="preserve">
          <source>When lists are turned into plain CSS, Sass doesn't add any parentheses, since CSS doesn't understand them. That means that &lt;code&gt;(1px 2px) (5px 6px)&lt;/code&gt; and &lt;code&gt;1px 2px 5px 6px&lt;/code&gt; will look the same when they become CSS. However, they aren't the same when they're Sass: the first is a list containing two lists, while the second is a list containing four numbers.</source>
          <target state="translated">リストがプレーンCSSに変換されると、CSSは括弧を認識しないため、Sassは括弧を追加しません。つまり、 &lt;code&gt;(1px 2px) (5px 6px)&lt;/code&gt; と &lt;code&gt;1px 2px 5px 6px&lt;/code&gt; は、CSSになると同じように見えます。ただし、Sassの場合は同じではありません。1つ目は2つのリストを含むリストで、2つ目は4つの数値を含むリストです。</target>
        </trans-unit>
        <trans-unit id="5aad5437d7dfdab5e62318eefd2c6cfb001cf4fa" translate="yes" xml:space="preserve">
          <source>When merging selectors, &lt;code&gt;@extend&lt;/code&gt; is smart enough to avoid unnecessary duplication, so something like &lt;code&gt;.seriousError.seriousError&lt;/code&gt; gets translated to &lt;code&gt;.seriousError&lt;/code&gt;. In addition, it won't produce selectors that can't match anything, like &lt;code&gt;#main#footer&lt;/code&gt;.</source>
          <target state="translated">セレクターをマージするとき、 &lt;code&gt;@extend&lt;/code&gt; は不必要な重複を回避するのに十分スマートなので、 &lt;code&gt;.seriousError.seriousError&lt;/code&gt; のようなものは.seriousErrorに変換され &lt;code&gt;.seriousError&lt;/code&gt; 。さらに、 &lt;code&gt;#main#footer&lt;/code&gt; のように、何にも一致しないセレクターは生成されません。</target>
        </trans-unit>
        <trans-unit id="8f354f1d9b0a162ef05bffc01d340d5b14007482" translate="yes" xml:space="preserve">
          <source>When one class extends another, Sass styles all elements that match the extender as though they also match the class being extended. When one class selector extends another, it works exactly as though you added the extended class to every element in your HTML that already had the extending class. You can just write &lt;code&gt;class=&quot;error--serious&quot;&lt;/code&gt;, and Sass will make sure it&amp;rsquo;s styled as though it had &lt;code&gt;class=&quot;error&quot;&lt;/code&gt; as well.</source>
          <target state="translated">あるクラスが別のクラスを拡張すると、Sassは、拡張されているクラスにも一致するかのように、エクステンダーに一致するすべての要素のスタイルを設定します。あるクラスセレクターが別のクラスセレクターを拡張する場合、拡張クラスが既に存在するHTML内のすべての要素に拡張クラスを追加した場合とまったく同じように機能します。 &lt;code&gt;class=&quot;error--serious&quot;&lt;/code&gt; と書くだけで、Sassは &lt;code&gt;class=&quot;error&quot;&lt;/code&gt; もあるかのようにスタイル設定されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="0fbff872cee0dbfc7c89c0c1981c0ec2426c6d70" translate="yes" xml:space="preserve">
          <source>When one stylesheet extends a selector, that extension will only affect style rules written in &lt;em&gt;upstream&lt;/em&gt; modules&amp;mdash;that is, modules that are loaded by that stylesheet using the &lt;a href=&quot;use&quot;&gt;&lt;code&gt;@use&lt;/code&gt; rule&lt;/a&gt; or the &lt;a href=&quot;forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rule&lt;/a&gt;, modules loaded by &lt;em&gt;those&lt;/em&gt; modules, and so on. This helps make your &lt;code&gt;@extend&lt;/code&gt; rules more predictable, ensuring that they affect only the styles you were aware of when you wrote them.</source>
          <target state="translated">1つのスタイルシートセレクタを拡張する場合、その拡張子のみで書かれたスタイルルール影響する&lt;em&gt;上流&lt;/em&gt;モジュール-使用して、そのスタイルシートによってロードされるモジュールである&lt;a href=&quot;use&quot;&gt; &lt;code&gt;@use&lt;/code&gt; のルール&lt;/a&gt;または&lt;a href=&quot;forward&quot;&gt; &lt;code&gt;@forward&lt;/code&gt; ルールは&lt;/a&gt;、モジュールにより読み込まれ&lt;em&gt;たもの&lt;/em&gt;モジュールなどを。これにより、 &lt;code&gt;@extend&lt;/code&gt; ルールがより予測可能になり、作成時に認識していたスタイルにのみ影響するようになります。</target>
        </trans-unit>
        <trans-unit id="4d1e8800cde7c69cb821d81f06588373485353f5" translate="yes" xml:space="preserve">
          <source>When possible, Sass will also merge media queries that are nested within one another to make it easier to support browsers that don&amp;rsquo;t yet natively support nested &lt;code&gt;@media&lt;/code&gt; rules.</source>
          <target state="translated">可能であれば、Sassは相互にネストされたメディアクエリもマージして、ネストされた &lt;code&gt;@media&lt;/code&gt; ルールをまだネイティブにサポートしていないブラウザのサポートを容易にします。</target>
        </trans-unit>
        <trans-unit id="7ff3c92336d6818ffe06769d17b564b4cd912585" translate="yes" xml:space="preserve">
          <source>When resolving an &lt;code&gt;@import&lt;/code&gt;, Sass will go through the load paths looking for an importer that successfully imports the path. Once one is found, the imported file is used.</source>
          <target state="translated">&lt;code&gt;@import&lt;/code&gt; を解決するとき、Sassはロードパスを調べて、パスを正常にインポートするインポーターを探します。ファイルが見つかると、インポートされたファイルが使用されます。</target>
        </trans-unit>
        <trans-unit id="7c5f3ede65042880a9261966a2c4d5c41201709d" translate="yes" xml:space="preserve">
          <source>When running on Ruby 1.9 and later, Sass is aware of the character encoding of documents. Sass follows the &lt;a href=&quot;http://www.w3.org/TR/2013/WD-css-syntax-3-20130919/#determine-the-fallback-encoding&quot;&gt;CSS spec&lt;/a&gt; to determine the encoding of a stylesheet, and falls back to the Ruby string encoding. This means that it first checks the Unicode byte order mark, then the &lt;code&gt;@charset&lt;/code&gt; declaration, then the Ruby string encoding. If none of these are set, it will assume the document is in UTF-8.</source>
          <target state="translated">Ruby 1.9以降で実行する場合、Sassはドキュメントの文字エンコーディングを認識します。Sassは&lt;a href=&quot;http://www.w3.org/TR/2013/WD-css-syntax-3-20130919/#determine-the-fallback-encoding&quot;&gt;CSS仕様&lt;/a&gt;に従ってスタイルシートのエンコーディングを決定し、Ruby文字列エンコーディングにフォールバックします。つまり、最初にUnicodeバイトオーダーマーク、次に &lt;code&gt;@charset&lt;/code&gt; 宣言、次にRuby文字列エンコーディングをチェックします。これらのいずれも設定されていない場合、ドキュメントはUTF-8であると想定されます。</target>
        </trans-unit>
        <trans-unit id="197dd69b8b83c74b1b436711b01fa575cee90c61" translate="yes" xml:space="preserve">
          <source>When the first letter of a multiline comment is &lt;code&gt;!&lt;/code&gt;, the comment will always rendered into css output even in compressed output modes. This is useful for adding Copyright notices to your generated CSS.</source>
          <target state="translated">複数行コメントの最初の文字が &lt;code&gt;!&lt;/code&gt; 、コメントは常に圧縮出力モードでもcss出力にレンダリングされます。これは、生成されたCSSに著作権表示を追加するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5e4fd8404dc61ca660bd2f2f308dbfe931e2758a" translate="yes" xml:space="preserve">
          <source>When the last argument to a mixin or function is a positional or keyword-style argument, that argument can be followed by a trailing comma. Some prefer this coding style as it can lead to more concise diffs and fewer syntax errors when refactoring.</source>
          <target state="translated">ミキシンや関数の最後の引数が位置引数やキーワード形式の引数の場合、その引数の後には最後にカンマを付けることができます。このコーディングスタイルを好む人もいますが、より簡潔な diff が得られ、リファクタリング時の構文エラーも少なくなります。</target>
        </trans-unit>
        <trans-unit id="cb17805af33bc17e9ee429b94eb2209b9ed1cc08" translate="yes" xml:space="preserve">
          <source>When the two sequences being merged have no selectors in common, then two new selectors are generated: one with the first sequence before the second, and one with the second sequence before the first. For example:</source>
          <target state="translated">マージされる2つのシーケンスに共通のセレクタがない場合、2つの新しいセレクタが生成されます:1つは2番目のシーケンスの前にある1つのシーケンス、もう1つは1番目のシーケンスの前にある2つのシーケンスです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="af89e96670072f7489d5ea4d5b9921c482b4a965" translate="yes" xml:space="preserve">
          <source>When using Dart Sass, &lt;strong&gt;&lt;a href=&quot;#rendersync&quot;&gt;&lt;code&gt;renderSync()&lt;/code&gt;&lt;/a&gt; is almost twice as fast as &lt;code&gt;render()&lt;/code&gt;&lt;/strong&gt; by default, due to the overhead of making the entire evaluation process asynchronous. To avoid this performance hit, you can pass the &lt;a href=&quot;#fiber&quot;&gt;&lt;code&gt;fiber&lt;/code&gt; option&lt;/a&gt; to &lt;code&gt;render()&lt;/code&gt;.</source>
          <target state="translated">Dart Sassを使用する場合、評価プロセス全体を非同期にするオーバーヘッドがあるため、&lt;strong&gt;&lt;a href=&quot;#rendersync&quot;&gt; &lt;code&gt;renderSync()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;render()&lt;/code&gt; &lt;/strong&gt;デフォルトで&lt;strong&gt;render（）の&lt;/strong&gt;&lt;strong&gt;ほぼ2倍の速度&lt;/strong&gt;になります。このパフォーマンスへの影響を回避するために、 &lt;code&gt;render()&lt;/code&gt; に&lt;a href=&quot;#fiber&quot;&gt; &lt;code&gt;fiber&lt;/code&gt; オプション&lt;/a&gt;を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8b7a13914940166518300fa33331c64f13803b7e" translate="yes" xml:space="preserve">
          <source>When using Dart Sass, &lt;strong&gt;&lt;code&gt;renderSync()&lt;/code&gt; is more than twice as fast as &lt;code&gt;render()&lt;/code&gt;&lt;/strong&gt;, due to the overhead of asynchronous callbacks. To avoid this performance hit, &lt;code&gt;render()&lt;/code&gt; can use the &lt;a href=&quot;https://www.npmjs.com/package/fibers&quot;&gt;&lt;code&gt;fibers&lt;/code&gt;&lt;/a&gt; package to call asynchronous importers from the synchronous code path. To enable this, pass the &lt;code&gt;Fiber&lt;/code&gt; class to the &lt;code&gt;fiber&lt;/code&gt; option:</source>
          <target state="translated">Dart Sassを使用する場合、非同期コールバックのオーバーヘッドのため、&lt;strong&gt; &lt;code&gt;renderSync()&lt;/code&gt; は &lt;code&gt;render()&lt;/code&gt; の&lt;/strong&gt;&lt;strong&gt;2倍以上高速&lt;/strong&gt;です。このパフォーマンスへの影響を回避するために、 &lt;code&gt;render()&lt;/code&gt; は&lt;a href=&quot;https://www.npmjs.com/package/fibers&quot;&gt; &lt;code&gt;fibers&lt;/code&gt; &lt;/a&gt;パッケージを使用して、同期コードパスから非同期インポーターを呼び出すことができます。これを有効にするには、 &lt;code&gt;Fiber&lt;/code&gt; クラスを &lt;code&gt;fiber&lt;/code&gt; オプションに渡します。</target>
        </trans-unit>
        <trans-unit id="b5bb132e14d6ab3a9f1a50fa2dc201c2d576155a" translate="yes" xml:space="preserve">
          <source>When writing &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt; and &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt; that take arguments, you usually want to ensure that those arguments have the types and formats your API expects. If they aren't, the user needs to be notified and your mixin/function needs to stop running.</source>
          <target state="translated">引数を取る&lt;a href=&quot;mixin&quot;&gt;ミックスイン&lt;/a&gt;と&lt;a href=&quot;function&quot;&gt;関数&lt;/a&gt;を作成するときは、通常、それらの引数がAPIで期待されるタイプと形式であることを確認する必要があります。そうでない場合は、ユーザーに通知する必要があり、ミックスイン/関数の実行を停止する必要があります。</target>
        </trans-unit>
        <trans-unit id="622c01719e46c66c1777b18d05a1f9e6d2a3930c" translate="yes" xml:space="preserve">
          <source>When writing &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt; and &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt;, you may want to discourage users from passing certain arguments or certain values. They may be passing legacy arguments that are now deprecated, or they may be calling your API in a way that&amp;rsquo;s not quite optimal.</source>
          <target state="translated">&lt;a href=&quot;mixin&quot;&gt;ミックスイン&lt;/a&gt;や&lt;a href=&quot;function&quot;&gt;関数を&lt;/a&gt;作成するときは、ユーザーが特定の引数や特定の値を渡さないようにすることができます。現在非推奨になっているレガシー引数を渡しているか、最適ではない方法でAPIを呼び出している可能性があります。</target>
        </trans-unit>
        <trans-unit id="263a2faa1ca3886c162feed06c743e2a35949aab" translate="yes" xml:space="preserve">
          <source>When writing custom functions, it&amp;rsquo;s important to ensure that all the arguments are the types you expect. Otherwise, users&amp;rsquo; stylesheets could crash in hard-to-debug ways or, worse, compile to meaningless CSS.</source>
          <target state="translated">カスタム関数を作成するときは、すべての引数が期待する型であることを確認することが重要です。そうしないと、ユーザーのスタイルシートがデバッグが困難な方法でクラッシュしたり、さらに悪いことに、意味のないCSSにコンパイルされたりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="027bfd284e7508b4792085aecf46844ff4f38f1b" translate="yes" xml:space="preserve">
          <source>When writing style libraries using Sass, you can use comments to document the &lt;a href=&quot;../at-rules/mixin&quot;&gt;mixins&lt;/a&gt;, &lt;a href=&quot;../at-rules/function&quot;&gt;functions&lt;/a&gt;, &lt;a href=&quot;../variables&quot;&gt;variables&lt;/a&gt;, and &lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;placeholder selectors&lt;/a&gt; that your library provides, as well as the library itself. These are comments are read by the &lt;a href=&quot;http://sassdoc.com&quot;&gt;SassDoc&lt;/a&gt; tool, which uses them to generate beautiful documentation. Check out &lt;a href=&quot;http://oddbird.net/susy/docs/index.html&quot;&gt;the Susy grid engine&lt;/a&gt;&amp;rsquo;s documentation to see it in action!</source>
          <target state="translated">Sassを使用してスタイルライブラリを作成する場合、コメントを使用して、ライブラリが提供する&lt;a href=&quot;../at-rules/mixin&quot;&gt;ミックスイン&lt;/a&gt;、&lt;a href=&quot;../at-rules/function&quot;&gt;関数&lt;/a&gt;、&lt;a href=&quot;../variables&quot;&gt;変数&lt;/a&gt;、&lt;a href=&quot;../style-rules/placeholder-selectors&quot;&gt;プレースホルダーセレクター&lt;/a&gt;、およびライブラリ自体を文書化できます。これらのコメントは、&lt;a href=&quot;http://sassdoc.com&quot;&gt;SassDoc&lt;/a&gt;ツールによって読み取られます。SassDocツールは、コメントを使用して美しいドキュメントを生成します。&lt;a href=&quot;http://oddbird.net/susy/docs/index.html&quot;&gt;Susyグリッドエンジン&lt;/a&gt;のドキュメントをチェックして、実際の動作を確認してください。</target>
        </trans-unit>
        <trans-unit id="482a4bbcee8e0f624a30032248fb70b16d73f815" translate="yes" xml:space="preserve">
          <source>When you declare a mixin or function that takes &lt;a href=&quot;../at-rules/mixin#taking-arbitrary-arguments&quot;&gt;arbitrary arguments&lt;/a&gt;, the value you get is a special list known as an &lt;em&gt;argument list&lt;/em&gt;. It acts just like a list that contains all the arguments passed to the mixin or function, with one extra feature: if the user passed keyword arguments, they can be accessed as a map by passing the argument list to the &lt;a href=&quot;../modules/meta#keywords&quot;&gt;&lt;code&gt;meta.keywords()&lt;/code&gt; function&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../at-rules/mixin#taking-arbitrary-arguments&quot;&gt;任意の引数&lt;/a&gt;を取るミックスインまたは関数を宣言すると、取得する値は&lt;em&gt;引数リストと&lt;/em&gt;呼ばれる特別なリストになり&lt;em&gt;ます&lt;/em&gt;。これは、ミックスインまたは関数に渡されたすべての引数を含むリストのように機能しますが、1つの追加機能があります。ユーザーがキーワード引数を渡した場合、引数リストを&lt;a href=&quot;../modules/meta#keywords&quot;&gt; &lt;code&gt;meta.keywords()&lt;/code&gt; 関数に&lt;/a&gt;渡すことでマップとしてアクセスできます。。</target>
        </trans-unit>
        <trans-unit id="35b3433b081aebda0f31291c47558d163be8f0e7" translate="yes" xml:space="preserve">
          <source>When you import a file that contains &lt;code&gt;@use&lt;/code&gt; rules, the importing file has access to all members (even private members) defined directly in that file, but &lt;em&gt;not&lt;/em&gt; any members from modules that file has loaded. However, if that file contains &lt;a href=&quot;forward&quot;&gt;&lt;code&gt;@forward&lt;/code&gt; rules&lt;/a&gt;, the importing file will have access to forwarded members. This means that you can import a library that was written to be used with the module system.</source>
          <target state="translated">&lt;code&gt;@use&lt;/code&gt; ルールを含むファイルをインポートすると、インポートするファイルは、そのファイルで直接定義されているすべてのメンバー（プライベートメンバーも含む）にアクセスできますが、そのファイルがロードされたモジュールのメンバーにはアクセスでき&lt;em&gt;ません&lt;/em&gt;。ただし、そのファイルに&lt;a href=&quot;forward&quot;&gt; &lt;code&gt;@forward&lt;/code&gt; ルール&lt;/a&gt;が含まれている場合、インポートファイルは転送されたメンバーにアクセスできます。これは、モジュールシステムで使用するために作成されたライブラリをインポートできることを意味します。</target>
        </trans-unit>
        <trans-unit id="f7a75b711040d4798987157314d10ebb07704327" translate="yes" xml:space="preserve">
          <source>When you pass this option, the migrator will also generate an &lt;a href=&quot;../at-rules/import#import-only-files&quot;&gt;import-only stylesheet&lt;/a&gt; that &lt;a href=&quot;../at-rules/forward&quot;&gt;forwards&lt;/a&gt; all the members with the prefix added back, to preserve backwards-compatibility for users who were importing the library.</source>
          <target state="translated">このオプションを渡すと、移行でも発生します&lt;a href=&quot;../at-rules/import#import-only-files&quot;&gt;インポート専用のスタイルシート&lt;/a&gt;&lt;a href=&quot;../at-rules/forward&quot;&gt;を転送&lt;/a&gt;接頭辞を持つすべてのメンバーは、ライブラリをインポートされたユーザーのための後方互換性を維持するために、再び追加します。</target>
        </trans-unit>
        <trans-unit id="7a75a804b614be27309836388101bf18c03f7792" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;@use&lt;/code&gt; (or &lt;code&gt;@forward&lt;/code&gt;) load a module that uses &lt;code&gt;@import&lt;/code&gt;, that module will contain all the public members defined by the stylesheet you load &lt;em&gt;and&lt;/em&gt; everything that stylesheet transitively imports. In other words, everything that&amp;rsquo;s imported is treated as though it were written in one big stylesheet.</source>
          <target state="translated">あなたが使用している場合 &lt;code&gt;@use&lt;/code&gt; （または &lt;code&gt;@forward&lt;/code&gt; が）用途はそのモジュールのロード &lt;code&gt;@import&lt;/code&gt; を、そのモジュールは、ロードスタイルシートで定義されたすべてのパブリックメンバーが含まれます&lt;em&gt;と&lt;/em&gt;、すべてそのスタイルシート推移輸入を。つまり、インポートされたものはすべて、1つの大きなスタイルシートに記述されているかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="6a96355c77e9fc9e8cf8a12bb300b15d130381c5" translate="yes" xml:space="preserve">
          <source>Which would output the following:</source>
          <target state="translated">どちらが出力するかというと、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="4456171cd4cc8074d8af762f53b44a9a7090c527" translate="yes" xml:space="preserve">
          <source>Which would produce:</source>
          <target state="translated">どっちが産むんだ?</target>
        </trans-unit>
        <trans-unit id="423708f9fef7104955a2e6081d74527cb46a6604" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;@extend&lt;/code&gt; is allowed within &lt;a href=&quot;css&quot;&gt;&lt;code&gt;@media&lt;/code&gt; and other CSS at-rules&lt;/a&gt;, it&amp;rsquo;s not allowed to extend selectors that appear outside its at-rule. This is because the extending selector only applies within the given media context, and there&amp;rsquo;s no way to make sure that restriction is preserved in the generated selector without duplicating the entire style rule.</source>
          <target state="translated">一方で &lt;code&gt;@extend&lt;/code&gt; が内で許可され&lt;a href=&quot;css&quot;&gt; &lt;code&gt;@media&lt;/code&gt; で、ルールやその他のCSS&lt;/a&gt;、その時、ルール外に現れるセレクタを拡張するために許可されていません。これは、拡張セレクターが特定のメディアコンテキスト内でのみ適用され、スタイルルール全体を複製せずに、生成されたセレクターで制限が保持されることを確認する方法がないためです。</target>
        </trans-unit>
        <trans-unit id="2275e024f14cc0973d14e354edc2110a6fa18663" translate="yes" xml:space="preserve">
          <source>While it would technically be possible to generate all selectors that could possibly match either sequence, this would make the stylesheet far too large. The simple example above, for instance, would require ten selectors. Instead, Sass generates only selectors that are likely to be useful.</source>
          <target state="translated">技術的にはどちらかのシーケンスにマッチする可能性のある全てのセレクタを生成することは可能ですが、これではスタイルシートが大きくなりすぎます。例えば、上の単純な例では、10個のセレクタが必要になります。その代わりに、Sass は有用と思われるセレクタのみを生成します。</target>
        </trans-unit>
        <trans-unit id="3f3dbc007f7d47bfa51fca54bae8df73cbad2b6f" translate="yes" xml:space="preserve">
          <source>While it&amp;rsquo;s technically possible for functions to have side-effects like setting &lt;a href=&quot;../variables#scope&quot;&gt;global variables&lt;/a&gt;, this is strongly discouraged. Use &lt;a href=&quot;mixin&quot;&gt;mixins&lt;/a&gt; for side-effects, and use functions just to compute values.</source>
          <target state="translated">関数が&lt;a href=&quot;../variables#scope&quot;&gt;グローバル変数の&lt;/a&gt;設定などの副作用を持つことは技術的には可能ですが、これは強くお勧めしません。副作用には&lt;a href=&quot;mixin&quot;&gt;ミックスイン&lt;/a&gt;を使用し、値を計算するためだけに関数を使用します。</target>
        </trans-unit>
        <trans-unit id="bb585dbae3a6f883c795f956780d12f4deb3d861" translate="yes" xml:space="preserve">
          <source>While it&amp;rsquo;s tempting to use this feature to convert quoted strings to unquoted strings, it&amp;rsquo;s a lot clearer to use the &lt;a href=&quot;modules/string#unquote&quot;&gt;&lt;code&gt;string.unquote()&lt;/code&gt; function&lt;/a&gt;. Instead of &lt;code&gt;#{$string}&lt;/code&gt;, write &lt;code&gt;string.unquote($string)&lt;/code&gt;!</source>
          <target state="translated">この機能を使用して引用符で囲まれた文字列を引用符で囲まれていない文字列に変換することは魅力的ですが、&lt;a href=&quot;modules/string#unquote&quot;&gt; &lt;code&gt;string.unquote()&lt;/code&gt; 関数&lt;/a&gt;を使用する方がはるかに明確です。 &lt;code&gt;#{$string}&lt;/code&gt; 代わりに、 &lt;code&gt;string.unquote($string)&lt;/code&gt; と記述してください。</target>
        </trans-unit>
        <trans-unit id="b04bfd229cc5abb3ff13094b511bec694aad932a" translate="yes" xml:space="preserve">
          <source>While this is less concise, it can make the stylesheet easier to read. It also allows functions to present more flexible interfaces, providing many arguments without becoming difficult to call.</source>
          <target state="translated">これは簡潔ではありませんが、スタイルシートを読みやすくすることができます。また、関数がより柔軟なインターフェイスを提示できるようになり、呼び出しが難しくなることなく多くの引数を提供できるようになります。</target>
        </trans-unit>
        <trans-unit id="4524b79210c6ea867e61f067f30b30c4e1fa6433" translate="yes" xml:space="preserve">
          <source>With Maps</source>
          <target state="translated">マップを使って</target>
        </trans-unit>
        <trans-unit id="2cc5600d98ace8d12a6fc5821568226d0593507c" translate="yes" xml:space="preserve">
          <source>With Mixins</source>
          <target state="translated">ミックスインと</target>
        </trans-unit>
        <trans-unit id="f5e3d812af01ef111586dd7e7cd455fe9cd8f748" translate="yes" xml:space="preserve">
          <source>Within a string of text, #{} style interpolation can be used to place dynamic values within the string:</source>
          <target state="translated">テキス ト の文字列内では、 #{}スタイルの補間を用いて、文字列内に動的な値を配置することができます。</target>
        </trans-unit>
        <trans-unit id="5d86af3b87d3bc635839ced821182161d6b68ee4" translate="yes" xml:space="preserve">
          <source>Without a framework, Sass puts the cached templates in the &lt;code&gt;.sass-cache&lt;/code&gt; directory. In Rails and Merb, they go in &lt;code&gt;tmp/sass-cache&lt;/code&gt;. The directory can be customized with the &lt;a href=&quot;#cache_location-option&quot;&gt;&lt;code&gt;:cache_location&lt;/code&gt;&lt;/a&gt; option. If you don't want Sass to use caching at all, set the &lt;a href=&quot;#cache-option&quot;&gt;&lt;code&gt;:cache&lt;/code&gt;&lt;/a&gt; option to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">フレームワークがない場合、Sassはキャッシュされたテンプレートを &lt;code&gt;.sass-cache&lt;/code&gt; ディレクトリに配置します。RailsとMerbでは、これらは &lt;code&gt;tmp/sass-cache&lt;/code&gt; にあります。ディレクトリは&lt;a href=&quot;#cache_location-option&quot;&gt; &lt;code&gt;:cache_location&lt;/code&gt; &lt;/a&gt;オプションでカスタマイズできます。Sassでキャッシュをまったく使用しない場合は、&lt;a href=&quot;#cache-option&quot;&gt; &lt;code&gt;:cache&lt;/code&gt; &lt;/a&gt;オプションを &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="b35c9196af84591c97165ecba0b974655c1c2024" translate="yes" xml:space="preserve">
          <source>Wrap unary negation in parentheses if it&amp;rsquo;s in a space-separated list.</source>
          <target state="translated">スペースで区切られたリストにある場合は、単項否定を括弧で囲みます。</target>
        </trans-unit>
        <trans-unit id="ced6547ebc9d97b74ce12d1a6de550438ee2144e" translate="yes" xml:space="preserve">
          <source>Write a space before &lt;code&gt;-&lt;/code&gt; but not after for a negative number or a unary negation.</source>
          <target state="translated">前にスペースを書く &lt;code&gt;-&lt;/code&gt; ではなく、負の数や単項否定のために後。</target>
        </trans-unit>
        <trans-unit id="f56b7d1c084ebe4783cdd34797281e416c05826e" translate="yes" xml:space="preserve">
          <source>You always include spaces on both sides of &lt;code&gt;-&lt;/code&gt; when subtracting.</source>
          <target state="translated">減算するときは、常に &lt;code&gt;-&lt;/code&gt; の両側にスペースを含めます。</target>
        </trans-unit>
        <trans-unit id="ec01032607173783a4fc4360a977b515e63fb44d" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;use#configuration&quot;&gt;configure modules&lt;/a&gt; that are loaded through an &lt;code&gt;@import&lt;/code&gt; by defining global variables prior the &lt;code&gt;@import&lt;/code&gt; that first loads that module.</source>
          <target state="translated">あなたはできる&lt;a href=&quot;use#configuration&quot;&gt;のモジュールの構成&lt;/a&gt;によってロードされる &lt;code&gt;@import&lt;/code&gt; 前にグローバル変数を定義することで &lt;code&gt;@import&lt;/code&gt; をそのモジュールが最初にロードすることを。</target>
        </trans-unit>
        <trans-unit id="47075dea023ce95f6054d9c81b74824443951572" translate="yes" xml:space="preserve">
          <source>You can access variables, functions, and mixins from another module by writing &lt;code&gt;&amp;lt;namespace&amp;gt;.&amp;lt;variable&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;namespace&amp;gt;.&amp;lt;function&amp;gt;()&lt;/code&gt;, or &lt;code&gt;@include &amp;lt;namespace&amp;gt;.&amp;lt;mixin&amp;gt;()&lt;/code&gt;. By default, the namespace is just the last component of the module&amp;rsquo;s URL.</source>
          <target state="translated">&lt;code&gt;&amp;lt;namespace&amp;gt;.&amp;lt;variable&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;namespace&amp;gt;.&amp;lt;function&amp;gt;()&lt;/code&gt; 、または &lt;code&gt;@include &amp;lt;namespace&amp;gt;.&amp;lt;mixin&amp;gt;()&lt;/code&gt; 記述することにより、別のモジュールから変数、関数、およびミックスインにアクセスできます。デフォルトでは、名前空間はモジュールのURLの最後のコンポーネントにすぎません。</target>
        </trans-unit>
        <trans-unit id="83572d7d18ba6a271f88ec6054ccb9dbc7eecc65" translate="yes" xml:space="preserve">
          <source>You can also choose whether to evaluate an &lt;code&gt;@else&lt;/code&gt; rule&amp;rsquo;s block by writing it &lt;code&gt;@else if &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;. If you do, the block is evaluated only if the preceding &lt;code&gt;@if&lt;/code&gt;&amp;rsquo;s expression returns &lt;code&gt;false&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; the &lt;code&gt;@else if&lt;/code&gt;&amp;rsquo;s expression returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@else&lt;/code&gt; ルールのブロックを &lt;code&gt;@else if &amp;lt;expression&amp;gt; { ... }&lt;/code&gt; 記述して、評価するかどうかを選択することもできます。そうした場合、ブロックは、先行する &lt;code&gt;@if&lt;/code&gt; の式が &lt;code&gt;false&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;返し、 &lt;code&gt;@else if&lt;/code&gt; の式が &lt;code&gt;true&lt;/code&gt; を返す場合にのみ評価されます。</target>
        </trans-unit>
        <trans-unit id="81147456a5c44d6acef05640c6850187a2831f7b" translate="yes" xml:space="preserve">
          <source>You can also tell Sass to watch the file and update the CSS every time the Sass file changes:</source>
          <target state="translated">また、Sassファイルが変更されるたびに、Sassにファイルを見てCSSを更新するように指示することもできます。</target>
        </trans-unit>
        <trans-unit id="d11ff44ce37f6004626be58674ebbb98268453b1" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;@each&lt;/code&gt; to iterate over every key/value pair in a map by writing it &lt;code&gt;@each &amp;lt;variable&amp;gt;, &amp;lt;variable&amp;gt; in &amp;lt;expression&amp;gt; { ... }&lt;/code&gt;. The key is assigned to the first variable name, and the element is assigned to the second.</source>
          <target state="translated">&lt;code&gt;@each&lt;/code&gt; を使用して &lt;code&gt;@each &amp;lt;variable&amp;gt;, &amp;lt;variable&amp;gt; in &amp;lt;expression&amp;gt; { ... }&lt;/code&gt; に@each &amp;lt;variable&amp;gt;、&amp;lt;variable&amp;gt;と記述することにより、マップ内のすべてのキーと値のペアを反復処理することもできます。キーは最初の変数名に割り当てられ、要素は2番目の変数名に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="c122ca56a2a3ed525462e2c06d796aee0409cb52" translate="yes" xml:space="preserve">
          <source>You can also use SassScript variables in selectors and property names using &lt;code&gt;#{}&lt;/code&gt; interpolation syntax:</source>
          <target state="translated">&lt;code&gt;#{}&lt;/code&gt; 補間構文を使用して、セレクターとプロパティ名でSassScript変数を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="cbd0a04e3e99fb4e6c7c0365e57a28f8db7f75e2" translate="yes" xml:space="preserve">
          <source>You can also use the parent selector to add extra suffixes to the outer selector. This is particularly useful when using a methodology like &lt;a href=&quot;http://getbem.com/&quot;&gt;BEM&lt;/a&gt; that uses highly structured class names. As long as the outer selector ends with an alphanumeric name (like class, ID, and element selectors), you can use the parent selector to append additional text.</source>
          <target state="translated">親セレクターを使用して、外部セレクターにサフィックスを追加することもできます。これは、高度に構造化されたクラス名を使用する&lt;a href=&quot;http://getbem.com/&quot;&gt;BEMの&lt;/a&gt;ような方法を使用する場合に特に役立ちます。外側のセレクターが英数字の名前（クラス、ID、要素セレクターなど）で終わっている限り、親セレクターを使用して追加のテキストを追加できます。</target>
        </trans-unit>
        <trans-unit id="4ca9e78f4c3203621d63dc19b76b34f23aeb598e" translate="yes" xml:space="preserve">
          <source>You can also write &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; as unary operators, which take only one value:</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; と &lt;code&gt;-&lt;/code&gt; を単項演算子として記述することもできます。単項演算子は次の1つの値のみを取ります。</target>
        </trans-unit>
        <trans-unit id="13d13633a9f0660c0009224931f186514fc691b4" translate="yes" xml:space="preserve">
          <source>You can assign to variables if they aren't already assigned by adding the &lt;code&gt;!default&lt;/code&gt; flag to the end of the value. This means that if the variable has already been assigned to, it won't be re-assigned, but if it doesn't have a value yet, it will be given one.</source>
          <target state="translated">値の最後に &lt;code&gt;!default&lt;/code&gt; フラグを追加することで、まだ割り当てられていない変数に割り当てることができます。これは、変数がすでに割り当てられている場合は、再割り当てされないことを意味しますが、まだ値がない場合は、値が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="6367902cbbdd55926eaa7d9f403389bfe9ec844a" translate="yes" xml:space="preserve">
          <source>You can combine interpolation with the parent selector &lt;code&gt;&amp;amp;&lt;/code&gt;, the &lt;a href=&quot;at-rules/at-root&quot;&gt;&lt;code&gt;@at-root&lt;/code&gt; rule&lt;/a&gt;, and &lt;a href=&quot;modules/selector&quot;&gt;selector functions&lt;/a&gt; to wield some serious power when dynamically generating selectors. For more information, see the &lt;a href=&quot;style-rules/parent-selector&quot;&gt;parent selector documentation&lt;/a&gt;.</source>
          <target state="translated">補間を親セレクター &lt;code&gt;&amp;amp;&lt;/code&gt; 、&lt;a href=&quot;at-rules/at-root&quot;&gt; &lt;code&gt;@at-root&lt;/code&gt; ルール&lt;/a&gt;、および&lt;a href=&quot;modules/selector&quot;&gt;セレクター関数&lt;/a&gt;と組み合わせて、セレクターを動的に生成するときにかなりの力を発揮することができます。詳細については、&lt;a href=&quot;style-rules/parent-selector&quot;&gt;親セレクタのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="889ad2c16e3f33d771b36be949dc75fcd418df43" translate="yes" xml:space="preserve">
          <source>You can convert a quoted string to an unquoted string using the &lt;a href=&quot;../modules/string#unquote&quot;&gt;&lt;code&gt;string.unquote()&lt;/code&gt; function&lt;/a&gt;, and you can convert an unquoted string to a quoted string using the &lt;a href=&quot;../modules/string#quote&quot;&gt;&lt;code&gt;string.quote()&lt;/code&gt; function&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../modules/string#unquote&quot;&gt; &lt;code&gt;string.unquote()&lt;/code&gt; 関数&lt;/a&gt;を使用して、引用符で囲まれた文字列を引用符で囲まれていない文字列に変換でき&lt;a href=&quot;../modules/string#quote&quot;&gt;ます&lt;/a&gt;。また、 &lt;code&gt;string.quote()&lt;/code&gt; 関数を使用して、引用符で囲まれていない文字列を引用符で囲まれた文字列に変換できます。</target>
        </trans-unit>
        <trans-unit id="64155bf8c629e795596b89f0d86392caee9adb84" translate="yes" xml:space="preserve">
          <source>You can convert between decimals and percentages using unit arithmetic. &lt;code&gt;$percentage / 100%&lt;/code&gt; will return the corresponding decimal, and &lt;code&gt;$decimal *
100%&lt;/code&gt; will return the corresponding percentage. You can also use the &lt;a href=&quot;../modules/math#percentage&quot;&gt;&lt;code&gt;math.percentage()&lt;/code&gt; function&lt;/a&gt; as a more explicit way of writing &lt;code&gt;$decimal *
100%&lt;/code&gt;.</source>
          <target state="translated">単位演算を使用して、小数とパーセンテージの間で変換できます。 &lt;code&gt;$percentage / 100%&lt;/code&gt; は対応する小数を返し、 &lt;code&gt;$decimal * 100%&lt;/code&gt; は対応するパーセンテージを返します。 &lt;code&gt;$decimal * 100%&lt;/code&gt; を記述するより明示的な方法として、&lt;a href=&quot;../modules/math#percentage&quot;&gt; &lt;code&gt;math.percentage()&lt;/code&gt; 関数&lt;/a&gt;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="e7257ebd10c09e050b2a0304e02e88ca5f9fe4ed" translate="yes" xml:space="preserve">
          <source>You can directly access Sass&amp;rsquo;s intelligent unification using &lt;a href=&quot;../modules/selector&quot;&gt;selector functions&lt;/a&gt;! The &lt;a href=&quot;../modules/selector#unify&quot;&gt;&lt;code&gt;selector.unify()&lt;/code&gt; function&lt;/a&gt; returns a selector that matches the intersection of two selectors, while the &lt;a href=&quot;../modules/selector#extend&quot;&gt;&lt;code&gt;selector.extend()&lt;/code&gt; function&lt;/a&gt; works just like &lt;code&gt;@extend&lt;/code&gt;, but on a single selector.</source>
          <target state="translated">&lt;a href=&quot;../modules/selector&quot;&gt;セレクター機能&lt;/a&gt;を使用して、Sassのインテリジェントな統合に直接アクセスできます！&lt;a href=&quot;../modules/selector#unify&quot;&gt; &lt;code&gt;selector.unify()&lt;/code&gt; 関数は&lt;/a&gt;ながら、2つのセレクタの交点に一致するセレクタ返し&lt;a href=&quot;../modules/selector#extend&quot;&gt; &lt;code&gt;selector.extend()&lt;/code&gt; 関数は&lt;/a&gt;同じように動作 &lt;code&gt;@extend&lt;/code&gt; が、単一のセレクタです。</target>
        </trans-unit>
        <trans-unit id="9a523a74baa4d7c69d2164b235f4424055c471bb" translate="yes" xml:space="preserve">
          <source>You can easily experiment with SassScript using the interactive shell. To launch the shell run the sass command-line with the &lt;code&gt;-i&lt;/code&gt; option. At the prompt, enter any legal SassScript expression to have it evaluated and the result printed out for you:</source>
          <target state="translated">対話型シェルを使用して、SassScriptを簡単に試すことができます。シェルを起動するには、 &lt;code&gt;-i&lt;/code&gt; オプションを指定してsassコマンドラインを実行します。プロンプトで、有効なSassScript式を入力して評価し、結果を出力します。</target>
        </trans-unit>
        <trans-unit id="e8204e426cb1d70f7c8c54a53034f402d2bb85e6" translate="yes" xml:space="preserve">
          <source>You can even load a module &lt;em&gt;without&lt;/em&gt; a namespace by writing &lt;code&gt;@use &quot;&amp;lt;url&amp;gt;&quot; as *&lt;/code&gt;. We recommend you only do this for stylesheets written by you, though; otherwise, they may introduce new members that cause name conflicts!</source>
          <target state="translated">&lt;code&gt;@use &quot;&amp;lt;url&amp;gt;&quot; as *&lt;/code&gt; 書く&lt;em&gt;ことで&lt;/em&gt;、名前空間&lt;em&gt;なしで&lt;/em&gt;モジュール&lt;em&gt;を&lt;/em&gt;ロードすることもできます。ただし、これは自分で作成したスタイルシートに対してのみ行うことをお勧めします。そうしないと、名前の競合を引き起こす新しいメンバーが導入される可能性があります。</target>
        </trans-unit>
        <trans-unit id="372eddcbe9b5747f09ae847a3212b0fce70894c6" translate="yes" xml:space="preserve">
          <source>You can explicitly control the order of operations using parentheses. An operation inside parentheses is always evaluated before any operations outside of them. Parentheses can even be nested, in which case the innermost parentheses will be evaluated first.</source>
          <target state="translated">括弧を使用して、操作の順序を明示的に制御することができます。括弧内の操作は、常に括弧外の操作の前に評価されます。括弧は入れ子にすることもでき、その場合は一番内側の括弧が最初に評価されます。</target>
        </trans-unit>
        <trans-unit id="a6efbecc96c755932cef7a5a3a542ce06278b05c" translate="yes" xml:space="preserve">
          <source>You can explicitly test for &lt;code&gt;$var == false&lt;/code&gt; or &lt;code&gt;$var == null&lt;/code&gt; if you want to distinguish between these.</source>
          <target state="translated">これらを区別したい場合は、 &lt;code&gt;$var == false&lt;/code&gt; または &lt;code&gt;$var == null&lt;/code&gt; を明示的にテストできます。</target>
        </trans-unit>
        <trans-unit id="e6b7313195eca45da747eaf1431f9bea7a2775b5" translate="yes" xml:space="preserve">
          <source>You can install the Sass migrator from most of the same places that you can install &lt;a href=&quot;https://sass-lang.com/dart-sass&quot;&gt;Dart Sass&lt;/a&gt;:</source>
          <target state="translated">あなたがインストールできることを同じ場所のほとんどからサス移行ツールをインストールすることができ&lt;a href=&quot;https://sass-lang.com/dart-sass&quot;&gt;ダートサスを&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="b7d48bb0fe58549aa7d40409a08f52a1f1b549d8" translate="yes" xml:space="preserve">
          <source>You can install the Sass migrator on Windows, Mac, or Linux by downloading the package for your operating system &lt;a href=&quot;https://github.com/sass/migrator/releases&quot;&gt;from GitHub&lt;/a&gt; and &lt;a href=&quot;https://katiek2.github.io/path-doc/&quot;&gt;adding it to your &lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">あなたは、ご使用のオペレーティング・システム用のパッケージをダウンロードしてWindows版、Mac、またはLinux上のサス移行ツールをインストールすることができます&lt;a href=&quot;https://github.com/sass/migrator/releases&quot;&gt;GitHubのから&lt;/a&gt;して&lt;a href=&quot;https://katiek2.github.io/path-doc/&quot;&gt;、あなたにそれを追加すること &lt;code&gt;PATH&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aab828f202d59063ddc8d72971b50f5ef9487eb2" translate="yes" xml:space="preserve">
          <source>You can nest selectors that use combinators as well. You can put the combinator at the end of the outer selector, at the beginning of the inner selector, or even all on its own in between the two.</source>
          <target state="translated">コンビネータを使うセレクタを入れ子にすることもできます。コンビネータを外側のセレクタの末尾や内側のセレクタの先頭に置くこともできますし、2 つのセレクタの間に単独で配置することもできます。</target>
        </trans-unit>
        <trans-unit id="7623674f7f8c329d2e8140dfe81ffdabe697bfb0" translate="yes" xml:space="preserve">
          <source>You can pass &lt;a href=&quot;syntax/special-functions&quot;&gt;special functions&lt;/a&gt; like &lt;code&gt;calc()&lt;/code&gt; or &lt;code&gt;var()&lt;/code&gt; in place of any argument to &lt;code&gt;hsl()&lt;/code&gt;. You can even use &lt;code&gt;var()&lt;/code&gt; in place of multiple arguments, since it might be replaced by multiple values! When a color function is called this way, it returns an unquoted string using the same signature it was called with.</source>
          <target state="translated">&lt;code&gt;hsl()&lt;/code&gt; の引数の代わりに、 &lt;code&gt;calc()&lt;/code&gt; や &lt;code&gt;var()&lt;/code&gt; などの&lt;a href=&quot;syntax/special-functions&quot;&gt;特殊関数&lt;/a&gt;を渡すことができます。複数の値に置き換えられる可能性があるため、複数の引数の代わりに &lt;code&gt;var()&lt;/code&gt; を使用することもできます。この方法でカラー関数を呼び出すと、呼び出されたときと同じ署名を使用して、引用符で囲まれていない文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="f5c00667667e5e6c3b209c2643ea04586de832bf" translate="yes" xml:space="preserve">
          <source>You can pass &lt;a href=&quot;syntax/special-functions&quot;&gt;special functions&lt;/a&gt; like &lt;code&gt;calc()&lt;/code&gt; or &lt;code&gt;var()&lt;/code&gt; in place of any argument to &lt;code&gt;rgb()&lt;/code&gt;. You can even use &lt;code&gt;var()&lt;/code&gt; in place of multiple arguments, since it might be replaced by multiple values! When a color function is called this way, it returns an unquoted string using the same signature it was called with.</source>
          <target state="translated">引数の代わりに &lt;code&gt;calc()&lt;/code&gt; や &lt;code&gt;var()&lt;/code&gt; などの&lt;a href=&quot;syntax/special-functions&quot;&gt;特殊関数&lt;/a&gt;を &lt;code&gt;rgb()&lt;/code&gt; に渡すことができます。複数の値に置き換えられる可能性があるため、複数の引数の代わりに &lt;code&gt;var()&lt;/code&gt; を使用することもできます。この方法でカラー関数を呼び出すと、呼び出されたときと同じ署名を使用して、引用符で囲まれていない文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="84f8f84f93c9060c537bf98a935e0372c6634707" translate="yes" xml:space="preserve">
          <source>You can pass any value to &lt;code&gt;@debug&lt;/code&gt;, not just a string! It prints the same representation of that value as the &lt;a href=&quot;../modules/meta#inspect&quot;&gt;&lt;code&gt;meta.inspect()&lt;/code&gt; function&lt;/a&gt;.</source>
          <target state="translated">文字列だけでなく、任意の値を &lt;code&gt;@debug&lt;/code&gt; に渡すことができます。&lt;a href=&quot;../modules/meta#inspect&quot;&gt; &lt;code&gt;meta.inspect()&lt;/code&gt; 関数&lt;/a&gt;と同じ値の表現を出力します。</target>
        </trans-unit>
        <trans-unit id="ba20eeb17ed1540c5890209e0bc6ad635fd905c9" translate="yes" xml:space="preserve">
          <source>You can pass both an argument list and a map as long as the list comes before the map, as in &lt;code&gt;@include colors($values..., $map...)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@include colors($values..., $map...)&lt;/code&gt; ように、リストがマップの前にある限り、引数リストとマップの両方を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="50bfb5f7fd5447b502e26a027c8983b8010ce664" translate="yes" xml:space="preserve">
          <source>You can still update your state over time by assigning new lists to the same variable, though. This is often used in functions and mixins to collect a bunch of values into one list.</source>
          <target state="translated">しかし、新しいリストを同じ変数に代入することで、時間の経過とともに状態を更新することができます。これは関数やミックスインでよく使われます。</target>
        </trans-unit>
        <trans-unit id="4429feea85ca7d3118cb1e706111975f06894199" translate="yes" xml:space="preserve">
          <source>You can still update your state over time by assigning new maps to the same variable, though. This is often used in functions and mixins to track configuration in a map.</source>
          <target state="translated">しかし、新しいマップを同じ変数に代入することで、時間の経過とともに状態を更新することができます。これは、マップの設定を追跡するために、関数やミックスインでよく使用されます。</target>
        </trans-unit>
        <trans-unit id="76d731fd27bb0a6fc509aa34683c1c6e1d903eaa" translate="yes" xml:space="preserve">
          <source>You can then refer to them in properties:</source>
          <target state="translated">そして、プロパティで参照することができます。</target>
        </trans-unit>
        <trans-unit id="cf503cec47c517b787ea526c054cc2eb87d4090d" translate="yes" xml:space="preserve">
          <source>You can turn warnings off with the &lt;code&gt;--quiet&lt;/code&gt; command-line option or the &lt;code&gt;:quiet&lt;/code&gt; Sass option.</source>
          <target state="translated">&lt;code&gt;--quiet&lt;/code&gt; コマンドラインオプションまたは &lt;code&gt;:quiet&lt;/code&gt; Sassオプションを使用して警告をオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="414495accfc2ae8635088a2c927fc5861609acd6" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;interpolation&quot;&gt;interpolation&lt;/a&gt; to inject values from &lt;a href=&quot;syntax/structure#expressions&quot;&gt;expressions&lt;/a&gt; like variables and function calls into your selectors. This is particularly useful when you&amp;rsquo;re writing &lt;a href=&quot;at-rules/mixin&quot;&gt;mixins&lt;/a&gt;, since it allows you to create selectors from parameters your users pass in.</source>
          <target state="translated">&lt;a href=&quot;interpolation&quot;&gt;補間&lt;/a&gt;を使用して、変数や関数呼び出しなどの&lt;a href=&quot;syntax/structure#expressions&quot;&gt;式&lt;/a&gt;からセレクターに値を挿入できます。これは、ユーザーが渡したパラメーターからセレクターを作成できるため、&lt;a href=&quot;at-rules/mixin&quot;&gt;ミックスイン&lt;/a&gt;を作成するときに特に便利です。</target>
        </trans-unit>
        <trans-unit id="84d5a8e1c75c160f58428bf6ef0ad93b66725dbc" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;&amp;amp;&lt;/code&gt; as a normal SassScript expression, which means you can pass it to functions or include it in interpolation&amp;mdash;even in other selectors! Using it in combination with &lt;a href=&quot;../modules/selector#selector-values&quot;&gt;selector functions&lt;/a&gt; and the &lt;a href=&quot;../at-rules/at-root&quot;&gt;&lt;code&gt;@at-root&lt;/code&gt; rule&lt;/a&gt; allows you to nest selectors in very powerful ways.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; は通常のSassScript式として使用できます。つまり、他のセレクターでも、関数に渡したり、補間に含めることができます。&lt;a href=&quot;../modules/selector#selector-values&quot;&gt;セレクター関数&lt;/a&gt;および&lt;a href=&quot;../at-rules/at-root&quot;&gt; &lt;code&gt;@at-root&lt;/code&gt; ルール&lt;/a&gt;と組み合わせて使用​​すると、非常に強力な方法でセレクターをネストできます。</target>
        </trans-unit>
        <trans-unit id="49feb5899497bef208a42fb48189e577100fd7aa" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;@at-root (without: ...)&lt;/code&gt; to move outside of any directive. You can also do it with multiple directives separated by a space: &lt;code&gt;@at-root (without: media supports)&lt;/code&gt; moves outside of both &lt;code&gt;@media&lt;/code&gt; and &lt;code&gt;@supports&lt;/code&gt; queries.</source>
          <target state="translated">&lt;code&gt;@at-root (without: ...)&lt;/code&gt; を使用して、ディレクティブの外に移動できます。複数のディレクティブは、スペースで区切って、あなたもそれを行うことができます： &lt;code&gt;@at-root (without: media supports)&lt;/code&gt; 内外の移動 &lt;code&gt;@media&lt;/code&gt; と &lt;code&gt;@supports&lt;/code&gt; クエリ。</target>
        </trans-unit>
        <trans-unit id="b7dd01fe2a1bce2b0b3372e74bedff54a62e8e9a" translate="yes" xml:space="preserve">
          <source>You can use booleans to choose whether or not to do various things in Sass. The &lt;a href=&quot;../at-rules/control/if&quot;&gt;&lt;code&gt;@if&lt;/code&gt; rule&lt;/a&gt; evaluates a block of styles if its argument is &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">ブール値を使用して、Sassでさまざまなことを行うかどうかを選択できます。&lt;a href=&quot;../at-rules/control/if&quot;&gt; &lt;code&gt;@if&lt;/code&gt; ルールは、&lt;/a&gt;その引数がある場合にスタイルのブロックを評価し &lt;code&gt;true&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="da2b2af53c24dbda3080a6658d2d65594b29bdb2" translate="yes" xml:space="preserve">
          <source>You can use variable arguments to wrap a mixin and add additional styles without changing the argument signature of the mixin. If you do, keyword arguments will get directly passed through to the wrapped mixin. For example:</source>
          <target state="translated">ミキシンの引数シグネチャを変更することなく、変数引数を使って ミキシンをラップしてスタイルを追加することができます。この場合、キーワード引数はラップされたミックスインに直接渡されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d5cb4f8236e896fc97272ee5b42d8d1d6ffcc3b0" translate="yes" xml:space="preserve">
          <source>You can work with booleans using &lt;a href=&quot;../operators/boolean&quot;&gt;boolean operators&lt;/a&gt;. The &lt;code&gt;and&lt;/code&gt; operator returns &lt;code&gt;true&lt;/code&gt; if &lt;em&gt;both&lt;/em&gt; sides are &lt;code&gt;true&lt;/code&gt;, and the &lt;code&gt;or&lt;/code&gt; operator returns &lt;code&gt;true&lt;/code&gt; if &lt;em&gt;either&lt;/em&gt; side is &lt;code&gt;true&lt;/code&gt;. The &lt;code&gt;not&lt;/code&gt; operator returns the opposite of a single boolean value.</source>
          <target state="translated">&lt;a href=&quot;../operators/boolean&quot;&gt;ブール演算子&lt;/a&gt;を使用してブールを操作できます。 &lt;code&gt;and&lt;/code&gt; オペレータ復帰 &lt;code&gt;true&lt;/code&gt; ならば&lt;em&gt;、両方の&lt;/em&gt;側面があり &lt;code&gt;true&lt;/code&gt; 、及び &lt;code&gt;or&lt;/code&gt; オペレータが返さ &lt;code&gt;true&lt;/code&gt; ならば&lt;em&gt;どちらかの&lt;/em&gt;側にある &lt;code&gt;true&lt;/code&gt; 。 &lt;code&gt;not&lt;/code&gt; オペレータは、単一のブール値の反対を返します。</target>
        </trans-unit>
        <trans-unit id="214186f8652a0a9f83377311430be290c09851ce" translate="yes" xml:space="preserve">
          <source>You include a space before &lt;code&gt;-&lt;/code&gt; but not after for a negative number or a unary negation.</source>
          <target state="translated">あなたは前にスペースを含める &lt;code&gt;-&lt;/code&gt; はなく、負の数や単項否定のために後。</target>
        </trans-unit>
        <trans-unit id="5577cb020efc3f3b98bd17cf8b1830fc6309b83a" translate="yes" xml:space="preserve">
          <source>You should especially avoid using interpolation like &lt;code&gt;#{$number}px&lt;/code&gt;. This doesn&amp;rsquo;t actually create a number! It creates an &lt;a href=&quot;../values/strings#unquoted&quot;&gt;unquoted string&lt;/a&gt; that &lt;em&gt;looks&lt;/em&gt; like a number, but won&amp;rsquo;t work with any &lt;a href=&quot;numeric&quot;&gt;number operations&lt;/a&gt; or &lt;a href=&quot;../modules/math&quot;&gt;functions&lt;/a&gt;. Try to make your math unit-clean so that &lt;code&gt;$number&lt;/code&gt; already has the unit &lt;code&gt;px&lt;/code&gt;, or write &lt;code&gt;$number * 1px&lt;/code&gt;.</source>
          <target state="translated">特に &lt;code&gt;#{$number}px&lt;/code&gt; ような補間の使用は避けてください。これは実際には数を作成しません！数値のように&lt;em&gt;見える&lt;/em&gt;&lt;a href=&quot;../values/strings#unquoted&quot;&gt;引用符で囲まれていない文字列&lt;/a&gt;を作成しますが、&lt;a href=&quot;numeric&quot;&gt;数値の演算&lt;/a&gt;や&lt;a href=&quot;../modules/math&quot;&gt;関数では機能&lt;/a&gt;しません。 &lt;code&gt;$number&lt;/code&gt; すでに単位 &lt;code&gt;px&lt;/code&gt; が含まれるように、数学の単位をクリーンにするか、 &lt;code&gt;$number * 1px&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e2d14c022cbcc35de98b95b1362930e308663a4d" translate="yes" xml:space="preserve">
          <source>You should especially avoid using interpolation like &lt;code&gt;#{$number}px&lt;/code&gt;. This doesn&amp;rsquo;t actually create a number! It creates an &lt;a href=&quot;strings#unquoted&quot;&gt;unquoted string&lt;/a&gt; that &lt;em&gt;looks&lt;/em&gt; like a number, but won&amp;rsquo;t work with any &lt;a href=&quot;../operators/numeric&quot;&gt;number operations&lt;/a&gt; or &lt;a href=&quot;../modules/math&quot;&gt;functions&lt;/a&gt;. Try to make your math unit-clean so that &lt;code&gt;$number&lt;/code&gt; already has the unit &lt;code&gt;px&lt;/code&gt;, or write &lt;code&gt;$number * 1px&lt;/code&gt;.</source>
          <target state="translated">特に &lt;code&gt;#{$number}px&lt;/code&gt; ような補間の使用は避けてください。これは実際には数を作成しません！数値のように&lt;em&gt;見える&lt;/em&gt;&lt;a href=&quot;strings#unquoted&quot;&gt;引用符で囲まれていない文字列&lt;/a&gt;を作成しますが、&lt;a href=&quot;../operators/numeric&quot;&gt;数値の演算&lt;/a&gt;や&lt;a href=&quot;../modules/math&quot;&gt;関数では機能&lt;/a&gt;しません。 &lt;code&gt;$number&lt;/code&gt; すでに単位 &lt;code&gt;px&lt;/code&gt; が含まれるように、数学の単位をクリーンにするか、 &lt;code&gt;$number * 1px&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8816308f546f36ba1f2eb84b1922ab74be659ff1" translate="yes" xml:space="preserve">
          <source>You wrap a unary negation in parentheses if it's in a space-separated list, as in &lt;code&gt;10px (-$var)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;10px (-$var)&lt;/code&gt; のように、スペースで区切られたリストにある場合は、単項否定を括弧で囲みます。</target>
        </trans-unit>
        <trans-unit id="82451b41fd7878180b6aa2b54e369cbec4e8032c" translate="yes" xml:space="preserve">
          <source>abs</source>
          <target state="translated">abs</target>
        </trans-unit>
        <trans-unit id="41314a88f904c4689277b5eb551576181f8b03de" translate="yes" xml:space="preserve">
          <source>abs($number)</source>
          <target state="translated">abs($number)</target>
        </trans-unit>
        <trans-unit id="13fb83ffcf44c21e90625b65560d2cb3b38b1c37" translate="yes" xml:space="preserve">
          <source>adjust_color</source>
          <target state="translated">adjust_color</target>
        </trans-unit>
        <trans-unit id="fcde6841d6d75d592f338b4773bb5cc3d554e840" translate="yes" xml:space="preserve">
          <source>adjust_color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])</source>
          <target state="translated">adjust_color($color,[$red],[$green],[$blue],[$hue],[$saturation],[$lightness],[$alpha])</target>
        </trans-unit>
        <trans-unit id="9a48bad57d6bbbfcf761441534d9305586456562" translate="yes" xml:space="preserve">
          <source>adjust_hue</source>
          <target state="translated">adjust_hue</target>
        </trans-unit>
        <trans-unit id="a70422b686b9a2e20129773f335a21da1541c763" translate="yes" xml:space="preserve">
          <source>adjust_hue($color, $degrees)</source>
          <target state="translated">adjust_hue($color,$degrees)</target>
        </trans-unit>
        <trans-unit id="be76331b95dfc399cd776d2fc68021e0db03cc4f" translate="yes" xml:space="preserve">
          <source>alpha</source>
          <target state="translated">alpha</target>
        </trans-unit>
        <trans-unit id="97fe9c0e1b5011367b9777a98fe408db58713477" translate="yes" xml:space="preserve">
          <source>alpha($color)</source>
          <target state="translated">alpha($color)</target>
        </trans-unit>
        <trans-unit id="515f232e78ae2bf61209d0acf67620a08cf72b8f" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;_colors.scss&lt;/code&gt; would be imported.</source>
          <target state="translated">そして &lt;code&gt;_colors.scss&lt;/code&gt; がインポートされます。</target>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="translated">append</target>
        </trans-unit>
        <trans-unit id="1f95e54ad17da9f7ddab05727617ccee32ba9d8b" translate="yes" xml:space="preserve">
          <source>append($list, $val, $separator:auto)</source>
          <target state="translated">append($list,$val,$separator:auto)</target>
        </trans-unit>
        <trans-unit id="4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9" translate="yes" xml:space="preserve">
          <source>blue</source>
          <target state="translated">blue</target>
        </trans-unit>
        <trans-unit id="ab64ebf7ba79b4e2d077bfab54e1b739d4950074" translate="yes" xml:space="preserve">
          <source>blue($color)</source>
          <target state="translated">blue($color)</target>
        </trans-unit>
        <trans-unit id="e8f8fe62a522cc962a3179c2ef2f3161ee811ac5" translate="yes" xml:space="preserve">
          <source>booleans (e.g. &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;)</source>
          <target state="translated">ブール値（例： &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bc8d8647b02deea0ab3e715c220d041ee78cc19d" translate="yes" xml:space="preserve">
          <source>call</source>
          <target state="translated">call</target>
        </trans-unit>
        <trans-unit id="20dd91e57ed7bf204330eea88147ed9b194a7d8b" translate="yes" xml:space="preserve">
          <source>call($function, $args...)</source>
          <target state="translated">コール($function,$args...)</target>
        </trans-unit>
        <trans-unit id="613af80c25dfbc9ef75ce605280571b9a518d632" translate="yes" xml:space="preserve">
          <source>ceil</source>
          <target state="translated">ceil</target>
        </trans-unit>
        <trans-unit id="780c60bd62c3b814b33370607671c80f0537384f" translate="yes" xml:space="preserve">
          <source>ceil($number)</source>
          <target state="translated">ceil($number)</target>
        </trans-unit>
        <trans-unit id="dc1b619e02e6d7ccbf209c87d6a683b6d399163a" translate="yes" xml:space="preserve">
          <source>change_color</source>
          <target state="translated">change_color</target>
        </trans-unit>
        <trans-unit id="38518de32ec42f346b3d323f9e208875a46949c1" translate="yes" xml:space="preserve">
          <source>change_color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])</source>
          <target state="translated">change_color($color,[$red],[$green],[$blue],[$hue],[$saturation],[$lightness],[$alpha])</target>
        </trans-unit>
        <trans-unit id="1c04e58b4f0ee405df5a6e58ecfc03f4bb77f299" translate="yes" xml:space="preserve">
          <source>colors (e.g. &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;#04a3f9&lt;/code&gt;, &lt;code&gt;rgba(255, 0, 0, 0.5)&lt;/code&gt;)</source>
          <target state="translated">色（例： &lt;code&gt;blue&lt;/code&gt; 、 &lt;code&gt;#04a3f9&lt;/code&gt; 、 &lt;code&gt;rgba(255, 0, 0, 0.5)&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="41dfc188a657086391d84f0d7d61638c451f41b5" translate="yes" xml:space="preserve">
          <source>comparable</source>
          <target state="translated">comparable</target>
        </trans-unit>
        <trans-unit id="a17ecb8b3662485fab6e4862ac7b6bb4a854fe32" translate="yes" xml:space="preserve">
          <source>comparable($number1, $number2)</source>
          <target state="translated">比較可能($number1,$number2)</target>
        </trans-unit>
        <trans-unit id="6d5c9dab960e525ed112945029e61215d50dbc52" translate="yes" xml:space="preserve">
          <source>complement</source>
          <target state="translated">complement</target>
        </trans-unit>
        <trans-unit id="b589ca7a7c989e0d901f5953e557459e953b843c" translate="yes" xml:space="preserve">
          <source>complement($color)</source>
          <target state="translated">complement($color)</target>
        </trans-unit>
        <trans-unit id="48f7116d514a7e1a200742892a25afba9684b2c2" translate="yes" xml:space="preserve">
          <source>computes &lt;code&gt;01 * 2 = 02&lt;/code&gt;, &lt;code&gt;02 * 2 = 04&lt;/code&gt;, and &lt;code&gt;03 * 2 = 06&lt;/code&gt;, and is compiled to:</source>
          <target state="translated">計算 &lt;code&gt;01 * 2 = 02&lt;/code&gt; 、 &lt;code&gt;02 * 2 = 04&lt;/code&gt; 、および &lt;code&gt;03 * 2 = 06&lt;/code&gt; 、およびにコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="5d144fff406c46e1c643e6341d2218f55a50f5ab" translate="yes" xml:space="preserve">
          <source>computes &lt;code&gt;01 + 04 = 05&lt;/code&gt;, &lt;code&gt;02 + 05 = 07&lt;/code&gt;, and &lt;code&gt;03 + 06 = 09&lt;/code&gt;, and is compiled to:</source>
          <target state="translated">計算する &lt;code&gt;01 + 04 = 05&lt;/code&gt; 、 &lt;code&gt;02 + 05 = 07&lt;/code&gt; 、および &lt;code&gt;03 + 06 = 09&lt;/code&gt; とにコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="f18c929905ac2ff3971ff803fb0536e1135f7bd0" translate="yes" xml:space="preserve">
          <source>content_exists</source>
          <target state="translated">content_exists</target>
        </trans-unit>
        <trans-unit id="458796e4e963a163322319ba62d683315a930a09" translate="yes" xml:space="preserve">
          <source>counter</source>
          <target state="translated">counter</target>
        </trans-unit>
        <trans-unit id="823683510d4f10536d4a492b82ca2b1bc24f5fcb" translate="yes" xml:space="preserve">
          <source>counter($args...)</source>
          <target state="translated">counter($args...)</target>
        </trans-unit>
        <trans-unit id="9ef65378b90a121f4afd568ccf6ba8211b70ec73" translate="yes" xml:space="preserve">
          <source>counters</source>
          <target state="translated">counters</target>
        </trans-unit>
        <trans-unit id="9eaea663fc86510b9de7edd46ad9ca14dad1f321" translate="yes" xml:space="preserve">
          <source>counters($args...)</source>
          <target state="translated">counters($args...)</target>
        </trans-unit>
        <trans-unit id="e52f1f026347e253ce2eed323018bd1b14329d74" translate="yes" xml:space="preserve">
          <source>css(Bool) &amp;mdash; Whether to get a plain CSS function.</source>
          <target state="translated">css（Bool）&amp;mdash;単純なCSS関数を取得するかどうか。</target>
        </trans-unit>
        <trans-unit id="9d434f61af343dbcd39c63e84bbeee6944187977" translate="yes" xml:space="preserve">
          <source>darken</source>
          <target state="translated">darken</target>
        </trans-unit>
        <trans-unit id="8286568ef2f919cb3a12a1b2bfe6e62463c6f81b" translate="yes" xml:space="preserve">
          <source>darken($color, $amount)</source>
          <target state="translated">暗くする($color,$amount)</target>
        </trans-unit>
        <trans-unit id="6d5b4b9af4cabbe1e4882083c53be8a7f7344c86" translate="yes" xml:space="preserve">
          <source>desaturate</source>
          <target state="translated">desaturate</target>
        </trans-unit>
        <trans-unit id="c0827bd704098219bedc6b15f2fd5c64a9846b8d" translate="yes" xml:space="preserve">
          <source>desaturate($color, $amount)</source>
          <target state="translated">脱色($color,$amount)</target>
        </trans-unit>
        <trans-unit id="4addec3932ac055130662ca9b3b2926fcde4d2b1" translate="yes" xml:space="preserve">
          <source>feature_exists</source>
          <target state="translated">feature_exists</target>
        </trans-unit>
        <trans-unit id="84729169c70a4fa6f86b34577ef113554c52b4e8" translate="yes" xml:space="preserve">
          <source>feature_exists($feature)</source>
          <target state="translated">feature_exists($feature)</target>
        </trans-unit>
        <trans-unit id="3684c9d3c05e7bee19e2728c6a5b2bbccf0cd9c7" translate="yes" xml:space="preserve">
          <source>floor</source>
          <target state="translated">floor</target>
        </trans-unit>
        <trans-unit id="00dff11ab1e2ad6add8f49c93694d595233d86a8" translate="yes" xml:space="preserve">
          <source>floor($number)</source>
          <target state="translated">floor($number)</target>
        </trans-unit>
        <trans-unit id="cd5cb66563a5f1dd282896b4bd49e68528a39782" translate="yes" xml:space="preserve">
          <source>function references</source>
          <target state="translated">関数参照</target>
        </trans-unit>
        <trans-unit id="8b93d084be74d48f58fef2ec03bee143b1bd2e7e" translate="yes" xml:space="preserve">
          <source>function_exists</source>
          <target state="translated">function_exists</target>
        </trans-unit>
        <trans-unit id="73efae2687075416b181ef3fbdb71a8be3fb8c1d" translate="yes" xml:space="preserve">
          <source>function_exists($name)</source>
          <target state="translated">function_exists($name)</target>
        </trans-unit>
        <trans-unit id="9a810897a9090fd61a907f05d62146e8d95779e0" translate="yes" xml:space="preserve">
          <source>get_function</source>
          <target state="translated">get_function</target>
        </trans-unit>
        <trans-unit id="73a94d5898a6c4c7ff69ab7a3f58d514f0f4ea66" translate="yes" xml:space="preserve">
          <source>get_function($name, $css:false)</source>
          <target state="translated">get_function($name,$css:false)</target>
        </trans-unit>
        <trans-unit id="53db0bb67179b9cf1b228159b12f80aa5b9543fc" translate="yes" xml:space="preserve">
          <source>global_variable_exists</source>
          <target state="translated">global_variable_exists</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
