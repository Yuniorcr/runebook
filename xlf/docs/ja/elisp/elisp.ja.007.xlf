<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="5301648dcf6b53cefc9ed52999aaa92d4603cae0" translate="yes" xml:space="preserve">
          <source>Edit</source>
          <target state="translated">Edit</target>
        </trans-unit>
        <trans-unit id="26e19fa6a6a51a98d665a3d92cdd6e86ab35a512" translate="yes" xml:space="preserve">
          <source>Edit the replacement for this question in the minibuffer.</source>
          <target state="translated">ミニバッファでこの質問の置換を編集します。</target>
        </trans-unit>
        <trans-unit id="acd754eaa0be450083a7a0239c06b5b27192bf9c" translate="yes" xml:space="preserve">
          <source>Editing Types</source>
          <target state="translated">編集タイプ</target>
        </trans-unit>
        <trans-unit id="7599687cce12a98db349160bf1999a82904d7cae" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;nil&lt;/code&gt;, which means the click occurred on buffer text, or a cons cell of the form (&lt;var&gt;string&lt;/var&gt; . &lt;var&gt;string-pos&lt;/var&gt;) if there is a string from a text property or an overlay at the click position.</source>
          <target state="translated">いずれかの &lt;code&gt;nil&lt;/code&gt; クリックを意味し、バッファのテキスト、またはフォーム（のコンス・セルで発生した &lt;var&gt;string&lt;/var&gt; 。 &lt;var&gt;string-pos&lt;/var&gt; テキストプロパティまたはクリック位置でオーバーレイから文字列がある場合）。</target>
        </trans-unit>
        <trans-unit id="d7baec04849ab97493d5ac11cfad3d5209b1d2ba" translate="yes" xml:space="preserve">
          <source>Either a list of the form &lt;code&gt;(&lt;var&gt;key-file&lt;/var&gt; &lt;var&gt;cert-file&lt;/var&gt;)&lt;/code&gt;, naming the certificate key file and certificate file itself, or &lt;code&gt;t&lt;/code&gt;, meaning to query &lt;code&gt;auth-source&lt;/code&gt; for this information (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/auth/Help-for-users.html#Help-for-users&quot;&gt;auth-source&lt;/a&gt; in</source>
          <target state="translated">フォームのリスト &lt;code&gt;(&lt;var&gt;key-file&lt;/var&gt; &lt;var&gt;cert-file&lt;/var&gt;)&lt;/code&gt; 、証明書キーファイルと証明書ファイル自体の名前、または &lt;code&gt;t&lt;/code&gt; 、この情報について&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/auth/Help-for-users.html#Help-for-users&quot;&gt;auth-source&lt;/a&gt;にクエリを実行することを意味します（の &lt;code&gt;auth-source&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="865508465ca5b2bcd7d2f81973321df89ed12307" translate="yes" xml:space="preserve">
          <source>Elements 1, 2, and 6 are ignored in a state which you pass as an argument to &lt;code&gt;parse-partial-sexp&lt;/code&gt; to continue parsing. Elements 9 and 10 are mainly used internally by the parser code.</source>
          <target state="translated">要素1、2、および6は、 &lt;code&gt;parse-partial-sexp&lt;/code&gt; を続行するためにparse-partial-sexpに引数として渡す状態では無視されます。要素9と10は、主にパーサーコードによって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="78699cbfd109ddf450b59043223813a8b7eeccec" translate="yes" xml:space="preserve">
          <source>Elements read from this list are normally recorded by the record-keeping features (see &lt;a href=&quot;recording-input#Recording-Input&quot;&gt;Recording Input&lt;/a&gt;) and while defining a keyboard macro (see &lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;Keyboard Macros&lt;/a&gt;). However, an element of the form &lt;code&gt;(no-record&amp;nbsp;.&amp;nbsp;&lt;var&gt;event&lt;/var&gt;)&lt;/code&gt; causes &lt;var&gt;event&lt;/var&gt; to be processed normally without recording it.</source>
          <target state="translated">このリストから読み取られた要素は、通常、記録保持機能（「&lt;a href=&quot;recording-input#Recording-Input&quot;&gt;入力の記録&lt;/a&gt;」を参照）およびキーボードマクロの定義（「&lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;キーボードマクロ&lt;/a&gt;」を参照）によって記録されます。ただし、フォームの要素 &lt;code&gt;(no-record&amp;nbsp;.&amp;nbsp;&lt;var&gt;event&lt;/var&gt;)&lt;/code&gt; により、 &lt;var&gt;event&lt;/var&gt; は記録されずに正常に処理されます。</target>
        </trans-unit>
        <trans-unit id="545b0cb131beb226cbb616788142dc984df9548a" translate="yes" xml:space="preserve">
          <source>Eliminating an asynchronous subprocess.</source>
          <target state="translated">非同期サブプロセスを削除します。</target>
        </trans-unit>
        <trans-unit id="b99aea41be1dd6682aef77fdd05c13425b490b64" translate="yes" xml:space="preserve">
          <source>Eliminating symbolic links from a file name.</source>
          <target state="translated">ファイル名からシンボリックリンクを削除します。</target>
        </trans-unit>
        <trans-unit id="e75efa6670a36f5ce5a2c336a74d40c2b84e641a" translate="yes" xml:space="preserve">
          <source>Elisp</source>
          <target state="translated">Elisp</target>
        </trans-unit>
        <trans-unit id="11961af86ac0a289f5a8c470c62e5aff16dc0f5c" translate="yes" xml:space="preserve">
          <source>Emacs Display</source>
          <target state="translated">エマックスディスプレイ</target>
        </trans-unit>
        <trans-unit id="1d24b3a1a3bb63bf22f3f35dd8bdc416f585ca87" translate="yes" xml:space="preserve">
          <source>Emacs Dynamic Modules</source>
          <target state="translated">Emacs ダイナミックモジュール</target>
        </trans-unit>
        <trans-unit id="9ef54a3413b4b5d1c94937992e5a38fa19928278" translate="yes" xml:space="preserve">
          <source>Emacs EasyPG Assistant Manual</source>
          <target state="translated">Emacs EasyPGアシスタントマニュアル</target>
        </trans-unit>
        <trans-unit id="7d69c84368b765ad9cf1f68ed28726d76d0a1f4f" translate="yes" xml:space="preserve">
          <source>Emacs Lisp</source>
          <target state="translated">エマックスリスプ</target>
        </trans-unit>
        <trans-unit id="f364876c0176165f21f9725c4e1f6ba2004826f7" translate="yes" xml:space="preserve">
          <source>Emacs Lisp has a &lt;em&gt;compiler&lt;/em&gt; that translates functions written in Lisp into a special representation called &lt;em&gt;byte-code&lt;/em&gt; that can be executed more efficiently. The compiler replaces Lisp function definitions with byte-code. When a byte-code function is called, its definition is evaluated by the &lt;em&gt;byte-code interpreter&lt;/em&gt;.</source>
          <target state="translated">Emacs Lispには、Lispで記述された関数を、より効率的に実行できる&lt;em&gt;バイトコード&lt;/em&gt;と呼ばれる特別な表現に変換する&lt;em&gt;コンパイラ&lt;/em&gt;があります。コンパイラはLisp関数定義をバイトコードに置き換えます。バイトコード関数が呼び出されると、その定義は&lt;em&gt;バイトコードインタープリター&lt;/em&gt;によって評価され&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="15dbc9ab10d150d57c606c833f2449026acec815" translate="yes" xml:space="preserve">
          <source>Emacs Lisp has several interfaces for loading. For example, &lt;code&gt;autoload&lt;/code&gt; creates a placeholder object for a function defined in a file; trying to call the autoloading function loads the file to get the function&amp;rsquo;s real definition (see &lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt;). &lt;code&gt;require&lt;/code&gt; loads a file if it isn&amp;rsquo;t already loaded (see &lt;a href=&quot;named-features#Named-Features&quot;&gt;Named Features&lt;/a&gt;). Ultimately, all these facilities call the &lt;code&gt;load&lt;/code&gt; function to do the work.</source>
          <target state="translated">Emacs Lispには、ロードするためのいくつかのインターフェースがあります。たとえば、 &lt;code&gt;autoload&lt;/code&gt; は、ファイルで定義された関数のプレースホルダーオブジェクトを作成します。オートローディング機能を呼び出そうとすると、（参照関数の実際の定義を取得するには、ファイルをロード&lt;a href=&quot;autoload#Autoload&quot;&gt;自動ロードを&lt;/a&gt;）。ファイルがまだロードされていない場合、 &lt;code&gt;require&lt;/code&gt; はファイルをロードします（&lt;a href=&quot;named-features#Named-Features&quot;&gt;名前付き機能を&lt;/a&gt;参照）。最終的に、これらの機能はすべて、 &lt;code&gt;load&lt;/code&gt; 関数を呼び出して作業を行います。</target>
        </trans-unit>
        <trans-unit id="53311aa3b6248b8318ac6ffa867ca69521b615e7" translate="yes" xml:space="preserve">
          <source>Emacs Lisp is not at all influenced by Scheme; but the GNU project has an implementation of Scheme, called Guile. We use it in all new GNU software that calls for extensibility.</source>
          <target state="translated">Emacs LispはSchemeの影響を全く受けていませんが、GNUプロジェクトには Schemeの実装であるGuileがあります。私たちはこれを、拡張性を求めるすべての新しいGNUソフトウェアに使っています。</target>
        </trans-unit>
        <trans-unit id="5eb9e6bbd184c8e8d87bab48605f13c2f0e69a4c" translate="yes" xml:space="preserve">
          <source>Emacs Lisp mutexes are of a type called &lt;em&gt;recursive&lt;/em&gt;, which means that a thread can re-acquire a mutex it owns any number of times. A mutex keeps a count of how many times it has been acquired, and each acquisition of a mutex must be paired with a release. The last release by a thread of a mutex reverts it to the unowned state, potentially allowing another thread to acquire the mutex.</source>
          <target state="translated">Emacs Lispミューテックスは&lt;em&gt;再帰的&lt;/em&gt;と呼ばれるタイプです。これは、スレッドが所有するミューテックスを何度でも再取得できることを意味します。ミューテックスは、それが取得された回数のカウントを保持し、ミューテックスの各取得は、リリースとペアにする必要があります。ミューテックスのスレッドによる最後のリリースは、それを所有されていない状態に戻し、別のスレッドがミューテックスを取得できるようにする可能性があります。</target>
        </trans-unit>
        <trans-unit id="5dacb820cefb1440695d68c57f34587912fb0410" translate="yes" xml:space="preserve">
          <source>Emacs Lisp programs can open stream (TCP) and datagram (UDP) network connections (see &lt;a href=&quot;datagrams#Datagrams&quot;&gt;Datagrams&lt;/a&gt;) to other processes on the same machine or other machines. A network connection is handled by Lisp much like a subprocess, and is represented by a process object. However, the process you are communicating with is not a child of the Emacs process, has no process</source>
          <target state="translated">Emacs Lispプログラムは、同じマシンまたは他のマシン上の他のプロセスへのストリーム（TCP）およびデータグラム（UDP）ネットワーク接続（&lt;a href=&quot;datagrams#Datagrams&quot;&gt;データグラムを&lt;/a&gt;参照）を開くことができます。ネットワーク接続は、サブプロセスのようにLispによって処理され、プロセスオブジェクトによって表されます。ただし、通信しているプロセスはEmacsプロセスの子ではなく、プロセスがありません</target>
        </trans-unit>
        <trans-unit id="7228b1f4138d429db1308081a4746c06528fb743" translate="yes" xml:space="preserve">
          <source>Emacs Lisp provides a general-purpose hash table data type, along with a series of functions for operating on them. Hash tables have a special printed representation, which consists of &amp;lsquo;</source>
          <target state="translated">Emacs Lispは、それらを操作するための一連の関数とともに、汎用ハッシュテーブルデータ型を提供します。ハッシュテーブルには、 'で構成される特別な印刷表現があります。</target>
        </trans-unit>
        <trans-unit id="ffe36d47af16b167f8af8d65f4621660e0a3fa30" translate="yes" xml:space="preserve">
          <source>Emacs Lisp provides a limited form of concurrency, called &lt;em&gt;threads&lt;/em&gt;. All the threads in a given instance of Emacs share the same memory. Concurrency in Emacs Lisp is &amp;ldquo;mostly cooperative&amp;rdquo;, meaning that Emacs will only switch execution between threads at well-defined times. However, the Emacs thread support has been designed in a way to later allow more fine-grained concurrency, and correct programs should not rely on cooperative threading.</source>
          <target state="translated">Emacs Lispは、&lt;em&gt;スレッド&lt;/em&gt;と呼ばれる限定された形式の並行性を提供します。Emacsの特定のインスタンス内のすべてのスレッドは同じメモリを共有します。Emacs Lispの並行性は「ほとんど協調的」です。つまり、Emacsは明確に定義された時間にのみスレッド間で実行を切り替えます。ただし、Emacsスレッドのサポートは、後でよりきめ細かい同時実行を可能にするように設計されており、正しいプログラムは協調スレッドに依存すべきではありません。</target>
        </trans-unit>
        <trans-unit id="3523135daa3b21509914424f92d7c0654029826d" translate="yes" xml:space="preserve">
          <source>Emacs Lisp provides a rich set of the data types. Some of them, like cons cells, integers and strings, are common to nearly all Lisp dialects. Some others, like markers and buffers, are quite special and needed to provide the basic support to write editor commands in Lisp. To implement such a variety of object types and provide an efficient way to pass objects between the subsystems of an interpreter, there is a set of C data structures and a special type to represent the pointers to all of them, which is known as &lt;em&gt;tagged pointer&lt;/em&gt;.</source>
          <target state="translated">Emacs Lispは、豊富なデータ型のセットを提供します。 consセル、整数、文字列など、それらのいくつかは、ほぼすべてのLisp方言に共通しています。マーカーやバッファーのような他のいくつかは非常に特別であり、Lispでエディターコマンドを書くための基本的なサポートを提供するために必要です。このようなさまざまなオブジェクトタイプを実装し、インタープリターのサブシステム間でオブジェクトを渡す効率的な方法を提供するために、Cデータ構造のセットと、それらすべてへのポインターを表す特別なタイプがあります。これは&lt;em&gt;タグ付きポインター&lt;/em&gt;と呼ばれ&lt;em&gt;ます。&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a0792e8235851678da162077315383848bc5c350" translate="yes" xml:space="preserve">
          <source>Emacs Lisp provides primitives to create and control threads, and also to create and control mutexes and condition variables, useful for thread synchronization.</source>
          <target state="translated">Emacs Lispには、スレッドを作成して制御するためのプリミティブのほか、スレッド同期に便利なミューテックスや条件変数を作成して制御するためのプリミティブが用意されています。</target>
        </trans-unit>
        <trans-unit id="07838ca0f24b0415a3b2a5ec64b19ae909fd062f" translate="yes" xml:space="preserve">
          <source>Emacs Lisp provides several kinds of control structure, including other varieties of sequencing, conditionals, iteration, and (controlled) jumps&amp;mdash;all discussed below. The built-in control structures are special forms since their subforms are not necessarily evaluated or not evaluated sequentially. You can use macros to define your own control structure constructs (see &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;).</source>
          <target state="translated">Emacs Lispは、他の種類のシーケンス、条件、反復、および（制御された）ジャンプを含む、いくつかの種類の制御構造を提供します。これらはすべて以下で説明します。組み込みの制御構造は、サブフォームが必ずしも評価されない、または順次評価されないため、特殊なフォームです。あなたは（参照、独自の制御構造の構文を定義するためにマクロを使用することができます&lt;a href=&quot;macros#Macros&quot;&gt;マクロ&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5eced44d6f227b201299c5badcb9e4e4043498ff" translate="yes" xml:space="preserve">
          <source>Emacs Lisp provides the traditional four arithmetic operations (addition, subtraction, multiplication, and division), as well as remainder and modulus functions, and functions to add or subtract 1. Except for &lt;code&gt;%&lt;/code&gt;, each of these functions accepts both integer and floating-point arguments, and returns a floating-point number if any argument is floating point.</source>
          <target state="translated">Emacs Lispは、従来の4つの算術演算（加算、減算、乗算、除算）、剰余関数、係数関数、および1を加算または減算する関数を提供します。 &lt;code&gt;%&lt;/code&gt; を除いて、これらの関数はそれぞれ整数と浮動小数点の両方を受け入れます。引数。いずれかの引数が浮動小数点である場合は、浮動小数点数を返します。</target>
        </trans-unit>
        <trans-unit id="c75c0672f1103474c697e0414e0d81f059ae0283" translate="yes" xml:space="preserve">
          <source>Emacs Lisp represents many special objects and constructs via special hash notations.</source>
          <target state="translated">Emacs Lisp は、多くの特殊なオブジェクトや構造体を特殊なハッシュ記法で表現します。</target>
        </trans-unit>
        <trans-unit id="c4181f7e2dd76cd593dd2b4c56244fb6dc36cf72" translate="yes" xml:space="preserve">
          <source>Emacs Lisp supports nonlocal exits, whereby program control is transfered from one point in a program to another remote point. See &lt;a href=&quot;nonlocal-exits#Nonlocal-Exits&quot;&gt;Nonlocal Exits&lt;/a&gt;. Thus, Lisp functions called by your module might exit nonlocally by calling &lt;code&gt;signal&lt;/code&gt; or &lt;code&gt;throw&lt;/code&gt;, and your module functions must handle such nonlocal exits properly. Such handling is needed because C programs will not automatically release resources and perform other cleanups in these cases; your module code must itself do it. The module</source>
          <target state="translated">Emacs Lisp supports nonlocal exits, whereby program control is transfered from one point in a program to another remote point. See &lt;a href=&quot;nonlocal-exits#Nonlocal-Exits&quot;&gt;Nonlocal Exits&lt;/a&gt;. Thus, Lisp functions called by your module might exit nonlocally by calling &lt;code&gt;signal&lt;/code&gt; or &lt;code&gt;throw&lt;/code&gt; , and your module functions must handle such nonlocal exits properly. Such handling is needed because C programs will not automatically release resources and perform other cleanups in these cases; your module code must itself do it. The module</target>
        </trans-unit>
        <trans-unit id="8984f14f223609c734113eaabdefa7eec293526d" translate="yes" xml:space="preserve">
          <source>Emacs Lisp treats &lt;code&gt;-0.0&lt;/code&gt; as numerically equal to ordinary zero with respect to numeric comparisons like &lt;code&gt;=&lt;/code&gt;. This follows the</source>
          <target state="translated">Emacs Lisp treats &lt;code&gt;-0.0&lt;/code&gt; as numerically equal to ordinary zero with respect to numeric comparisons like &lt;code&gt;=&lt;/code&gt; . This follows the</target>
        </trans-unit>
        <trans-unit id="b22e8745733f1044e0e8e778b087514ab35866de" translate="yes" xml:space="preserve">
          <source>Emacs Lisp uses two kinds of storage for user-created Lisp objects: &lt;em&gt;normal storage&lt;/em&gt; and &lt;em&gt;pure storage&lt;/em&gt;. Normal storage is where all the new data created during an Emacs session are kept (see &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;Garbage Collection&lt;/a&gt;). Pure storage is used for certain data in the preloaded standard Lisp files&amp;mdash;data that should never change during actual use of Emacs.</source>
          <target state="translated">Emacs Lisp uses two kinds of storage for user-created Lisp objects: &lt;em&gt;normal storage&lt;/em&gt; and &lt;em&gt;pure storage&lt;/em&gt;. Normal storage is where all the new data created during an Emacs session are kept (see &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;Garbage Collection&lt;/a&gt;). Pure storage is used for certain data in the preloaded standard Lisp files&amp;mdash;data that should never change during actual use of Emacs.</target>
        </trans-unit>
        <trans-unit id="9930d40258feb9fa1a5853262c7e1ecbe82780b6" translate="yes" xml:space="preserve">
          <source>Emacs also attempts to load a second init file, called the &lt;em&gt;early init file&lt;/em&gt;, if it exists. This is a file named</source>
          <target state="translated">Emacs also attempts to load a second init file, called the &lt;em&gt;early init file&lt;/em&gt;, if it exists. This is a file named</target>
        </trans-unit>
        <trans-unit id="f438beb0b54269588c167da980a7fc150f86a60f" translate="yes" xml:space="preserve">
          <source>Emacs also defines &lt;em&gt;raw syntax descriptors&lt;/em&gt;, which are used to describe syntax classes at a lower level. See &lt;a href=&quot;syntax-table-internals#Syntax-Table-Internals&quot;&gt;Syntax Table Internals&lt;/a&gt;.</source>
          <target state="translated">Emacs also defines &lt;em&gt;raw syntax descriptors&lt;/em&gt;, which are used to describe syntax classes at a lower level. See &lt;a href=&quot;syntax-table-internals#Syntax-Table-Internals&quot;&gt;Syntax Table Internals&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b081e88746f63937ab843405b000899eb6e7ac41" translate="yes" xml:space="preserve">
          <source>Emacs also provides explicit intervals as a presentation feature; see &lt;a href=&quot;overlays#Overlays&quot;&gt;Overlays&lt;/a&gt;.</source>
          <target state="translated">Emacs also provides explicit intervals as a presentation feature; see &lt;a href=&quot;overlays#Overlays&quot;&gt;Overlays&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d6037f3bcf19731d59e4737efeb909a4477fe1f5" translate="yes" xml:space="preserve">
          <source>Emacs also runs the hook &lt;code&gt;window-selection-change-functions&lt;/code&gt; whenever the redisplay routine detects that another window has been selected since last redisplay. See &lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;, for a detailed explanation. &lt;code&gt;window-state-change-functions&lt;/code&gt; (described in the same section) is another abnormal hook run after a different window has been selected but is triggered by other window changes as well.</source>
          <target state="translated">Emacs also runs the hook &lt;code&gt;window-selection-change-functions&lt;/code&gt; whenever the redisplay routine detects that another window has been selected since last redisplay. See &lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;, for a detailed explanation. &lt;code&gt;window-state-change-functions&lt;/code&gt; (described in the same section) is another abnormal hook run after a different window has been selected but is triggered by other window changes as well.</target>
        </trans-unit>
        <trans-unit id="4fa081728575b5af47f34cfa1d0d81f4cfadd8e1" translate="yes" xml:space="preserve">
          <source>Emacs applications have the same sort of race-condition issues that other applications do. For example, even when &lt;code&gt;(file-readable-p &quot;foo.txt&quot;)&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt;, it could be that</source>
          <target state="translated">Emacs applications have the same sort of race-condition issues that other applications do. For example, even when &lt;code&gt;(file-readable-p &quot;foo.txt&quot;)&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt; , it could be that</target>
        </trans-unit>
        <trans-unit id="7834c231794da13a4ac8440585e75335487d24af" translate="yes" xml:space="preserve">
          <source>Emacs attempts to infer the coding systems of the files and network connections it accesses. See &lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;Coding Systems&lt;/a&gt;. If Emacs infers incorrectly, or if the other parties to the network connection disagree with Emacs&amp;rsquo;s inferences, the resulting system could be unreliable. Also, even when it infers correctly, Emacs often can use bytes that other programs cannot. For example, although to Emacs the null byte is just a character like any other, many other applications treat it as a string terminator and mishandle strings or files containing null bytes.</source>
          <target state="translated">Emacs attempts to infer the coding systems of the files and network connections it accesses. See &lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;Coding Systems&lt;/a&gt;. If Emacs infers incorrectly, or if the other parties to the network connection disagree with Emacs&amp;rsquo;s inferences, the resulting system could be unreliable. Also, even when it infers correctly, Emacs often can use bytes that other programs cannot. For example, although to Emacs the null byte is just a character like any other, many other applications treat it as a string terminator and mishandle strings or files containing null bytes.</target>
        </trans-unit>
        <trans-unit id="c00bcea23c0da23f92989ded99bb44ac6e6e81dc" translate="yes" xml:space="preserve">
          <source>Emacs auth-source Library</source>
          <target state="translated">Emacs auth-source ライブラリ</target>
        </trans-unit>
        <trans-unit id="9f846cfde8ec0bbf0a7662f71e026a3be4a6b612" translate="yes" xml:space="preserve">
          <source>Emacs automatically saves and restores the match data when it runs process filter functions (see &lt;a href=&quot;filter-functions#Filter-Functions&quot;&gt;Filter Functions&lt;/a&gt;) and process sentinels (see &lt;a href=&quot;sentinels#Sentinels&quot;&gt;Sentinels&lt;/a&gt;).</source>
          <target state="translated">Emacs automatically saves and restores the match data when it runs process filter functions (see &lt;a href=&quot;filter-functions#Filter-Functions&quot;&gt;Filter Functions&lt;/a&gt;) and process sentinels (see &lt;a href=&quot;sentinels#Sentinels&quot;&gt;Sentinels&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="67baa3b59c5cfd5117efdc499dc974b7501e0ed6" translate="yes" xml:space="preserve">
          <source>Emacs becomes &lt;em&gt;idle&lt;/em&gt; when it starts waiting for user input, and it remains idle until the user provides some input. If a timer is set for five seconds of idleness, it runs approximately five seconds after Emacs first becomes idle. Even if &lt;var&gt;repeat&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, this timer will not run again as long as Emacs remains idle, because the duration of idleness will continue to increase and will not go down to five seconds again.</source>
          <target state="translated">Emacs becomes &lt;em&gt;idle&lt;/em&gt; when it starts waiting for user input, and it remains idle until the user provides some input. If a timer is set for five seconds of idleness, it runs approximately five seconds after Emacs first becomes idle. Even if &lt;var&gt;repeat&lt;/var&gt; is non- &lt;code&gt;nil&lt;/code&gt; , this timer will not run again as long as Emacs remains idle, because the duration of idleness will continue to increase and will not go down to five seconds again.</target>
        </trans-unit>
        <trans-unit id="b099356ce36c80ba26fa8fbfb26af1e5b452e4c1" translate="yes" xml:space="preserve">
          <source>Emacs binds &lt;code&gt;inhibit-quit&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; before calling the timer function, because quitting out of many timer functions can leave things in an inconsistent state. This is normally unproblematical because most timer functions don&amp;rsquo;t do a lot of work. Indeed, for a timer to call a function that takes substantial time to run is likely to be annoying. If a timer function needs to allow quitting, it should use &lt;code&gt;with-local-quit&lt;/code&gt; (see &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;). For example, if a timer function calls &lt;code&gt;accept-process-output&lt;/code&gt; to receive output from an external process, that call should be wrapped inside &lt;code&gt;with-local-quit&lt;/code&gt;, to ensure that</source>
          <target state="translated">Emacs binds &lt;code&gt;inhibit-quit&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; before calling the timer function, because quitting out of many timer functions can leave things in an inconsistent state. This is normally unproblematical because most timer functions don&amp;rsquo;t do a lot of work. Indeed, for a timer to call a function that takes substantial time to run is likely to be annoying. If a timer function needs to allow quitting, it should use &lt;code&gt;with-local-quit&lt;/code&gt; (see &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;). For example, if a timer function calls &lt;code&gt;accept-process-output&lt;/code&gt; to receive output from an external process, that call should be wrapped inside &lt;code&gt;with-local-quit&lt;/code&gt; , to ensure that</target>
        </trans-unit>
        <trans-unit id="8f454504a503845ea061d18fe9395a3a052cad4b" translate="yes" xml:space="preserve">
          <source>Emacs buffers and strings support a large repertoire of characters from many different scripts, allowing users to type and display text in almost any known written language.</source>
          <target state="translated">Emacs のバッファと文字列は、多くの異なるスクリプトの文字の大規模なレパートリーをサポートしているため、ユーザはほとんどの既知の言語でテキストを入力したり表示したりすることができます。</target>
        </trans-unit>
        <trans-unit id="cba03acb1e83d7835328c3a29d040dd5bf043a93" translate="yes" xml:space="preserve">
          <source>Emacs buffers are implemented using an invisible &lt;em&gt;gap&lt;/em&gt; to make insertion and deletion faster. Insertion works by filling in part of the gap, and deletion adds to the gap. Of course, this means that the gap must first be moved to the locus of the insertion or deletion. Emacs moves the gap only when you try to insert or delete. This is why your first editing command in one part of a large buffer, after previously editing in another far-away part, sometimes involves a noticeable delay.</source>
          <target state="translated">Emacs buffers are implemented using an invisible &lt;em&gt;gap&lt;/em&gt; to make insertion and deletion faster. Insertion works by filling in part of the gap, and deletion adds to the gap. Of course, this means that the gap must first be moved to the locus of the insertion or deletion. Emacs moves the gap only when you try to insert or delete. This is why your first editing command in one part of a large buffer, after previously editing in another far-away part, sometimes involves a noticeable delay.</target>
        </trans-unit>
        <trans-unit id="c8540d4172ad8a5276f664cef2b5ef4bc08d72c8" translate="yes" xml:space="preserve">
          <source>Emacs caches images so that it can display them again more efficiently. When Emacs displays an image, it searches the image cache for an existing image specification &lt;code&gt;equal&lt;/code&gt; to the desired specification. If a match is found, the image is displayed from the cache. Otherwise, Emacs loads the image normally.</source>
          <target state="translated">Emacs caches images so that it can display them again more efficiently. When Emacs displays an image, it searches the image cache for an existing image specification &lt;code&gt;equal&lt;/code&gt; to the desired specification. If a match is found, the image is displayed from the cache. Otherwise, Emacs loads the image normally.</target>
        </trans-unit>
        <trans-unit id="ac8f11976d61b957a0c5a1b9f2a8f7cf546ad3fc" translate="yes" xml:space="preserve">
          <source>Emacs calls this function when it loads a module. If a module does not export a function named &lt;code&gt;emacs_module_init&lt;/code&gt;, trying to load the module will signal an error. The initialization function should return zero if the initialization succeeds, non-zero otherwise. In the latter case, Emacs will signal an error, and the loading of the module will fail. If the user presses</source>
          <target state="translated">Emacs calls this function when it loads a module. If a module does not export a function named &lt;code&gt;emacs_module_init&lt;/code&gt; , trying to load the module will signal an error. The initialization function should return zero if the initialization succeeds, non-zero otherwise. In the latter case, Emacs will signal an error, and the loading of the module will fail. If the user presses</target>
        </trans-unit>
        <trans-unit id="d051a4f7d40fc5ccdbaf1d90ed27d0d62480fbe8" translate="yes" xml:space="preserve">
          <source>Emacs calls this hook immediately after it finishes applying file-local variables stored in &lt;code&gt;file-local-variables-alist&lt;/code&gt;.</source>
          <target state="translated">Emacs calls this hook immediately after it finishes applying file-local variables stored in &lt;code&gt;file-local-variables-alist&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="56083beaeb39428f247633ac12153adf7d4a8c85" translate="yes" xml:space="preserve">
          <source>Emacs calls this hook immediately before applying file-local variables stored in &lt;code&gt;file-local-variables-alist&lt;/code&gt;.</source>
          <target state="translated">Emacs calls this hook immediately before applying file-local variables stored in &lt;code&gt;file-local-variables-alist&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="994084f8ffd608b58932604d3ee3fde3154ef225" translate="yes" xml:space="preserve">
          <source>Emacs calls this low-level primitive to load a module from the specified &lt;var&gt;file&lt;/var&gt; and perform the necessary initialization of the module. This is the primitive which makes sure the module exports the &lt;code&gt;plugin_is_GPL_compatible&lt;/code&gt; symbol, calls the module&amp;rsquo;s &lt;code&gt;emacs_module_init&lt;/code&gt; function, and signals an error if that function returns an error indication, or if the use typed</source>
          <target state="translated">Emacs calls this low-level primitive to load a module from the specified &lt;var&gt;file&lt;/var&gt; and perform the necessary initialization of the module. This is the primitive which makes sure the module exports the &lt;code&gt;plugin_is_GPL_compatible&lt;/code&gt; symbol, calls the module&amp;rsquo;s &lt;code&gt;emacs_module_init&lt;/code&gt; function, and signals an error if that function returns an error indication, or if the use typed</target>
        </trans-unit>
        <trans-unit id="2fe40b51a3b73298470a39c542e0813062a24338" translate="yes" xml:space="preserve">
          <source>Emacs can also load compiled dynamic modules: shared libraries that provide additional functionality for use in Emacs Lisp programs, just like a package written in Emacs Lisp would. When a dynamic module is loaded, Emacs calls a specially-named initialization function which the module needs to implement, and which exposes the additional functions and variables to Emacs Lisp programs.</source>
          <target state="translated">Emacs では、コンパイル済みのダイナミックモジュールをロードすることもできます。これは、 Emacs Lisp で書かれたパッケージと同様に、Emacs Lisp プログラムで使用するための追加機能を提供する共有ライブラリです。ダイナミックモジュールがロードされると、Emacs はモジュールが実装する必要のある特別な名前の初期化関数を呼び出し、追加の関数や変数を Emacs Lisp プログラムに公開します。</target>
        </trans-unit>
        <trans-unit id="3d190adff472803f8e07de877cbb7a54e73c7af8" translate="yes" xml:space="preserve">
          <source>Emacs can be compiled with built-in libxml2 support.</source>
          <target state="translated">Emacsは組み込みのlibxml2をサポートしています。</target>
        </trans-unit>
        <trans-unit id="0d7e97dad016edbcfcb35167d07ce396bac6195d" translate="yes" xml:space="preserve">
          <source>Emacs can call this function at any time that it does redisplay or operates on menu data structures, so you should write it so it can safely be called at any time.</source>
          <target state="translated">Emacsでは再表示をしたり、メニューのデータ構造を操作したりするといつでもこの関数を呼び出すことができるので、いつでも安全に呼び出すことができるように書いておくと良いでしょう。</target>
        </trans-unit>
        <trans-unit id="da4487959604530250a24a92c5028e4b5764b43d" translate="yes" xml:space="preserve">
          <source>Emacs can communicate with serial ports. For interactive use,</source>
          <target state="translated">Emacsはシリアルポートで通信することができます。対話的に使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="40194130dc989f8e2573473aabb240f1bb557d6d" translate="yes" xml:space="preserve">
          <source>Emacs can convert between its internal representation of a character and the character&amp;rsquo;s codepoint in a specific charset. The following two functions support these conversions.</source>
          <target state="translated">Emacs can convert between its internal representation of a character and the character&amp;rsquo;s codepoint in a specific charset. The following two functions support these conversions.</target>
        </trans-unit>
        <trans-unit id="1317571357b6546c95aaab3bc497c2a51ff101b2" translate="yes" xml:space="preserve">
          <source>Emacs can convert unibyte text to multibyte; it can also convert multibyte text to unibyte, provided that the multibyte text contains only</source>
          <target state="translated">Emacs は unibyte テキストを multibyte に変換することができます。</target>
        </trans-unit>
        <trans-unit id="560e70e6f372c6b3af7521a52ce8cab0bbbfe965" translate="yes" xml:space="preserve">
          <source>Emacs can copy the original file into a backup file, and then overwrite the original file with new contents. After this procedure, any other names (i.e., hard links) of the original file continue to refer to the current (updated) version of the file. The file&amp;rsquo;s owner and group will be unchanged.</source>
          <target state="translated">Emacs can copy the original file into a backup file, and then overwrite the original file with new contents. After this procedure, any other names (i.e., hard links) of the original file continue to refer to the current (updated) version of the file. The file&amp;rsquo;s owner and group will be unchanged.</target>
        </trans-unit>
        <trans-unit id="0f833cba56a479063ae8f2626b69d0324b51cffa" translate="yes" xml:space="preserve">
          <source>Emacs can create encrypted network connections, using either built-in or external support. The built-in support uses the GnuTLS Transport Layer Security Library; see &lt;a href=&quot;https://www.gnu.org/software/gnutls/&quot;&gt;the GnuTLS project page&lt;/a&gt;. If your Emacs was compiled with GnuTLS support, the function &lt;code&gt;gnutls-available-p&lt;/code&gt; is defined and returns non-&lt;code&gt;nil&lt;/code&gt;. For more details, see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs-gnutls/index.html#Top&quot;&gt;Overview&lt;/a&gt; in</source>
          <target state="translated">Emacs can create encrypted network connections, using either built-in or external support. The built-in support uses the GnuTLS Transport Layer Security Library; see &lt;a href=&quot;https://www.gnu.org/software/gnutls/&quot;&gt;the GnuTLS project page&lt;/a&gt;. If your Emacs was compiled with GnuTLS support, the function &lt;code&gt;gnutls-available-p&lt;/code&gt; is defined and returns non- &lt;code&gt;nil&lt;/code&gt; . For more details, see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs-gnutls/index.html#Top&quot;&gt;Overview&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="6be55ca6ff3d86e43d75b0ff1dc1e469e9a9cf2b" translate="yes" xml:space="preserve">
          <source>Emacs can display a number of different image formats. Some of these image formats are supported only if particular support libraries are installed. On some platforms, Emacs can load support libraries on demand; if so, the variable &lt;code&gt;dynamic-library-alist&lt;/code&gt; can be used to modify the set of known names for these dynamic libraries. See &lt;a href=&quot;dynamic-libraries#Dynamic-Libraries&quot;&gt;Dynamic Libraries&lt;/a&gt;.</source>
          <target state="translated">Emacs can display a number of different image formats. Some of these image formats are supported only if particular support libraries are installed. On some platforms, Emacs can load support libraries on demand; if so, the variable &lt;code&gt;dynamic-library-alist&lt;/code&gt; can be used to modify the set of known names for these dynamic libraries. See &lt;a href=&quot;dynamic-libraries#Dynamic-Libraries&quot;&gt;Dynamic Libraries&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="78c99b060b46e1017b43612a4ede9c782ecfe198" translate="yes" xml:space="preserve">
          <source>Emacs can display text written in scripts, such as Arabic, Farsi, and Hebrew, whose natural ordering for horizontal text display runs from right to left. Furthermore, segments of Latin script and digits embedded in right-to-left text are displayed left-to-right, while segments of right-to-left script embedded in left-to-right text (e.g., Arabic or Hebrew text in comments or strings in a program source file) are appropriately displayed right-to-left. We call such mixtures of left-to-right and right-to-left text &lt;em&gt;bidirectional text&lt;/em&gt;. This section describes the facilities and options for editing and displaying bidirectional text.</source>
          <target state="translated">Emacs can display text written in scripts, such as Arabic, Farsi, and Hebrew, whose natural ordering for horizontal text display runs from right to left. Furthermore, segments of Latin script and digits embedded in right-to-left text are displayed left-to-right, while segments of right-to-left script embedded in left-to-right text (e.g., Arabic or Hebrew text in comments or strings in a program source file) are appropriately displayed right-to-left. We call such mixtures of left-to-right and right-to-left text &lt;em&gt;bidirectional text&lt;/em&gt;. This section describes the facilities and options for editing and displaying bidirectional text.</target>
        </trans-unit>
        <trans-unit id="d60d2c50a0da2b1a3348170ffd2cb951a2fa1252" translate="yes" xml:space="preserve">
          <source>Emacs can do various things while idle: garbage collect, autosave or handle data from a subprocess. But these interludes during idleness do not interfere with idle timers, because they do not reset the clock of idleness to zero. An idle timer set for 600 seconds will run when ten minutes have elapsed since the last user command was finished, even if subprocess output has been accepted thousands of times within those ten minutes, and even if there have been garbage collections and autosaves.</source>
          <target state="translated">Emacs はアイドル時に様々なことを行うことができます:ガベージコレクト、自動保存、サブプロセスからのデータ処理などです。しかし、これらのアイドル時の間奏はアイドルタイマーの邪魔にはなりません。600秒に設定されたアイドルタイマーは、最後のユーザコマンドが終了してから10分が経過したときに実行されます。たとえサブプロセスの出力がその10分以内に何千回も受け入れられていたとしても、また、ガベージコレクションやオートセーブがあったとしてもです。</target>
        </trans-unit>
        <trans-unit id="e9d06e075d964cd9d7cd802340a86c56af0e03e1" translate="yes" xml:space="preserve">
          <source>Emacs can indicate the buffer boundaries&amp;mdash;that is, the first and last line in the buffer&amp;mdash;with angle icons when they appear on the screen. In addition, Emacs can display an up-arrow in the fringe to show that there is text above the screen, and a down-arrow to show there is text below the screen.</source>
          <target state="translated">Emacs can indicate the buffer boundaries&amp;mdash;that is, the first and last line in the buffer&amp;mdash;with angle icons when they appear on the screen. In addition, Emacs can display an up-arrow in the fringe to show that there is text above the screen, and a down-arrow to show there is text below the screen.</target>
        </trans-unit>
        <trans-unit id="ee1ad9463e5b5996bde82c33ca18ac71261e7508" translate="yes" xml:space="preserve">
          <source>Emacs can list the names of the files in a directory as a Lisp list, or display the names in a buffer using the &lt;code&gt;ls&lt;/code&gt; shell command. In the latter case, it can optionally display information about each file, depending on the options passed to the &lt;code&gt;ls&lt;/code&gt; command.</source>
          <target state="translated">Emacs can list the names of the files in a directory as a Lisp list, or display the names in a buffer using the &lt;code&gt;ls&lt;/code&gt; shell command. In the latter case, it can optionally display information about each file, depending on the options passed to the &lt;code&gt;ls&lt;/code&gt; command.</target>
        </trans-unit>
        <trans-unit id="f742b9d1b7ebfbe69cdd55b7429ce465962460bb" translate="yes" xml:space="preserve">
          <source>Emacs can make use of scalable fonts, but by default it does not use them.</source>
          <target state="translated">Emacsはスケーラブルフォントを利用することができますが、デフォルトではスケーラブルフォントを利用しません。</target>
        </trans-unit>
        <trans-unit id="acd5f593fd50d61539d462200b38d12727a40b86" translate="yes" xml:space="preserve">
          <source>Emacs can optionally create &lt;em&gt;lexical bindings&lt;/em&gt;. A lexical binding has &lt;em&gt;lexical scope&lt;/em&gt;, meaning that any reference to the variable must be located textually within the binding construct&lt;a href=&quot;#FOOT9&quot; name=&quot;DOCF9&quot;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;. It also has &lt;em&gt;indefinite extent&lt;/em&gt;, meaning that under some circumstances the binding can live on even after the binding construct has finished executing, by means of special objects called &lt;em&gt;closures&lt;/em&gt;.</source>
          <target state="translated">Emacs can optionally create &lt;em&gt;lexical bindings&lt;/em&gt;. A lexical binding has &lt;em&gt;lexical scope&lt;/em&gt;, meaning that any reference to the variable must be located textually within the binding construct&lt;a href=&quot;#FOOT9&quot; name=&quot;DOCF9&quot;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;. It also has &lt;em&gt;indefinite extent&lt;/em&gt;, meaning that under some circumstances the binding can live on even after the binding construct has finished executing, by means of special objects called &lt;em&gt;closures&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="da39689f87fe15efb9007a8a526db9cb76639bf0" translate="yes" xml:space="preserve">
          <source>Emacs can rename the original file so that it becomes a backup file, and then write the buffer being saved into a new file. After this procedure, any other names (i.e., hard links) of the original file now refer to the backup file. The new file is owned by the user doing the editing, and its group is the default for new files written by the user in that directory.</source>
          <target state="translated">Emacs は、元のファイルをバックアップファイルになるように名前を変更し、保存されているバッファを新しいファイルに書き込むことができます。この手順の後、元のファイルの他の名前(ハードリンクなど)はバックアップファイルを参照するようになります。新しいファイルは編集を行っているユーザーが所有しており、そのディレクトリ内のユーザーが書き込んだ新しいファイルのデフォルトはそのグループになります。</target>
        </trans-unit>
        <trans-unit id="92347b1446515a39aef2cc0d76e15aad335abd34" translate="yes" xml:space="preserve">
          <source>Emacs can revert buffers automatically. It does that by default for buffers visiting files. The following describes how to add support for auto-reverting new types of buffers.</source>
          <target state="translated">Emacs はバッファを自動的に戻すことができます。これは、ファイルを訪問するバッファに対してデフォルトで行われます。以下では、新しいタイプのバッファの自動復帰のサポートを追加する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="71141f928dc729ca46b6a67b62e6c7f381518108" translate="yes" xml:space="preserve">
          <source>Emacs can send commands to many other applications, and applications should take care that strings sent as operands of these commands are not misinterpreted as directives. For example, when using a shell command to rename a file &lt;var&gt;a&lt;/var&gt; to &lt;var&gt;b&lt;/var&gt;, do not simply use the string &lt;code&gt;mv &lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt;&lt;/code&gt;, because either file name might start with &amp;lsquo;</source>
          <target state="translated">Emacs can send commands to many other applications, and applications should take care that strings sent as operands of these commands are not misinterpreted as directives. For example, when using a shell command to rename a file &lt;var&gt;a&lt;/var&gt; to &lt;var&gt;b&lt;/var&gt; , do not simply use the string &lt;code&gt;mv &lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; , because either file name might start with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="218f4eed23a4dbb836c096575e0773d62ff23a72" translate="yes" xml:space="preserve">
          <source>Emacs can use coding systems to decode keyboard input and encode terminal output. This is useful for terminals that transmit or display text using a particular encoding, such as Latin-1. Emacs does not set &lt;code&gt;last-coding-system-used&lt;/code&gt; when encoding or decoding terminal I/O.</source>
          <target state="translated">Emacs can use coding systems to decode keyboard input and encode terminal output. This is useful for terminals that transmit or display text using a particular encoding, such as Latin-1. Emacs does not set &lt;code&gt;last-coding-system-used&lt;/code&gt; when encoding or decoding terminal I/O.</target>
        </trans-unit>
        <trans-unit id="1bb61c2a56d75a77f080b03fed07e83ed98821b1" translate="yes" xml:space="preserve">
          <source>Emacs cannot display the cursor when point is in the middle of a sequence of text that has the &lt;code&gt;display&lt;/code&gt; or &lt;code&gt;composition&lt;/code&gt; property, or is invisible. Therefore, after a command finishes and returns to the command loop, if point is within such a sequence, the command loop normally moves point to the edge of the sequence, making this sequence effectively intangible.</source>
          <target state="translated">Emacs cannot display the cursor when point is in the middle of a sequence of text that has the &lt;code&gt;display&lt;/code&gt; or &lt;code&gt;composition&lt;/code&gt; property, or is invisible. Therefore, after a command finishes and returns to the command loop, if point is within such a sequence, the command loop normally moves point to the edge of the sequence, making this sequence effectively intangible.</target>
        </trans-unit>
        <trans-unit id="d95b6dc098f282945ce76e8834176a488e9fb089" translate="yes" xml:space="preserve">
          <source>Emacs cannot run timers at any arbitrary point in a Lisp program; it can run them only when Emacs could accept output from a subprocess: namely, while waiting or inside certain primitive functions such as &lt;code&gt;sit-for&lt;/code&gt; or &lt;code&gt;read-event&lt;/code&gt; which &lt;em&gt;can&lt;/em&gt; wait. Therefore, a timer&amp;rsquo;s execution may be delayed if Emacs is busy. However, the time of execution is very precise if Emacs is idle.</source>
          <target state="translated">Emacs cannot run timers at any arbitrary point in a Lisp program; it can run them only when Emacs could accept output from a subprocess: namely, while waiting or inside certain primitive functions such as &lt;code&gt;sit-for&lt;/code&gt; or &lt;code&gt;read-event&lt;/code&gt; which &lt;em&gt;can&lt;/em&gt; wait. Therefore, a timer&amp;rsquo;s execution may be delayed if Emacs is busy. However, the time of execution is very precise if Emacs is idle.</target>
        </trans-unit>
        <trans-unit id="4eff4458427c41b7747ae4a55172d7cdb18689c2" translate="yes" xml:space="preserve">
          <source>Emacs character codes are a superset of the Unicode standard. Values 0 through &lt;code&gt;#x10FFFF&lt;/code&gt; (1114111) correspond to Unicode characters of the same codepoint; values &lt;code&gt;#x110000&lt;/code&gt; (1114112) through &lt;code&gt;#x3FFF7F&lt;/code&gt; (4194175) represent characters that are not unified with Unicode; and values &lt;code&gt;#x3FFF80&lt;/code&gt; (4194176) through &lt;code&gt;#x3FFFFF&lt;/code&gt; (4194303) represent eight-bit raw bytes.</source>
          <target state="translated">Emacs character codes are a superset of the Unicode standard. Values 0 through &lt;code&gt;#x10FFFF&lt;/code&gt; (1114111) correspond to Unicode characters of the same codepoint; values &lt;code&gt;#x110000&lt;/code&gt; (1114112) through &lt;code&gt;#x3FFF7F&lt;/code&gt; (4194175) represent characters that are not unified with Unicode; and values &lt;code&gt;#x3FFF80&lt;/code&gt; (4194176) through &lt;code&gt;#x3FFFFF&lt;/code&gt; (4194303) represent eight-bit raw bytes.</target>
        </trans-unit>
        <trans-unit id="0831640b8122043518cd95fedf37a5e6306aceac" translate="yes" xml:space="preserve">
          <source>Emacs chooses the representation for a string based on the text from which it is constructed. The general rule is to convert unibyte text to multibyte text when combining it with other multibyte text, because the multibyte representation is more general and can hold whatever characters the unibyte text has.</source>
          <target state="translated">Emacs は、文字列を構成するテキストに基づいて、文字列の表現を選択します。一般的なルールは、ユニバイトテキストを他のマルチバイトテキストと組み合わせる場合には、ユニバイトテキストをマルチバイトテキストに変換することです。</target>
        </trans-unit>
        <trans-unit id="f5ad25f8a992cb50da24bbff67e7ee574b817186" translate="yes" xml:space="preserve">
          <source>Emacs contains many keymaps, but at any time only a few keymaps are &lt;em&gt;active&lt;/em&gt;. When Emacs receives user input, it translates the input event (see &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps&lt;/a&gt;), and looks for a key binding in the active keymaps.</source>
          <target state="translated">Emacs contains many keymaps, but at any time only a few keymaps are &lt;em&gt;active&lt;/em&gt;. When Emacs receives user input, it translates the input event (see &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps&lt;/a&gt;), and looks for a key binding in the active keymaps.</target>
        </trans-unit>
        <trans-unit id="0b3d328f50bd5f37c94e899d7045b2092adf4eb5" translate="yes" xml:space="preserve">
          <source>Emacs cooperates with the window system by arranging to select frames as the server and window manager request. When a window system informs Emacs that one of its frames has been selected, Emacs internally generates a &lt;em&gt;focus-in&lt;/em&gt; event. When an Emacs frame is displayed on a text-terminal emulator, such as &lt;code&gt;xterm&lt;/code&gt;, which supports reporting of focus-change notification, the focus-in and focus-out events are available even for text-mode frames. Focus events are normally handled by &lt;code&gt;handle-focus-in&lt;/code&gt;.</source>
          <target state="translated">Emacs cooperates with the window system by arranging to select frames as the server and window manager request. When a window system informs Emacs that one of its frames has been selected, Emacs internally generates a &lt;em&gt;focus-in&lt;/em&gt; event. When an Emacs frame is displayed on a text-terminal emulator, such as &lt;code&gt;xterm&lt;/code&gt; , which supports reporting of focus-change notification, the focus-in and focus-out events are available even for text-mode frames. Focus events are normally handled by &lt;code&gt;handle-focus-in&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="decb92d5658870e3309626c9af67cdd848bae26b" translate="yes" xml:space="preserve">
          <source>Emacs creates the initial frame before it reads your init file. After reading that file, Emacs checks &lt;code&gt;initial-frame-alist&lt;/code&gt;, and applies the parameter settings in the altered value to the already created initial frame.</source>
          <target state="translated">Emacs creates the initial frame before it reads your init file. After reading that file, Emacs checks &lt;code&gt;initial-frame-alist&lt;/code&gt; , and applies the parameter settings in the altered value to the already created initial frame.</target>
        </trans-unit>
        <trans-unit id="23a93d1bd02e3ce484932a878d36df2e6d418cc6" translate="yes" xml:space="preserve">
          <source>Emacs defines four types of array, all one-dimensional: &lt;em&gt;strings&lt;/em&gt; (see &lt;a href=&quot;string-type#String-Type&quot;&gt;String Type&lt;/a&gt;), &lt;em&gt;vectors&lt;/em&gt; (see &lt;a href=&quot;vector-type#Vector-Type&quot;&gt;Vector Type&lt;/a&gt;), &lt;em&gt;bool-vectors&lt;/em&gt; (see &lt;a href=&quot;bool_002dvector-type#Bool_002dVector-Type&quot;&gt;Bool-Vector Type&lt;/a&gt;), and &lt;em&gt;char-tables&lt;/em&gt; (see &lt;a href=&quot;char_002dtable-type#Char_002dTable-Type&quot;&gt;Char-Table Type&lt;/a&gt;). Vectors and char-tables can hold elements of any type, but strings can only hold characters, and bool-vectors can only hold &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Emacs defines four types of array, all one-dimensional: &lt;em&gt;strings&lt;/em&gt; (see &lt;a href=&quot;string-type#String-Type&quot;&gt;String Type&lt;/a&gt;), &lt;em&gt;vectors&lt;/em&gt; (see &lt;a href=&quot;vector-type#Vector-Type&quot;&gt;Vector Type&lt;/a&gt;), &lt;em&gt;bool-vectors&lt;/em&gt; (see &lt;a href=&quot;bool_002dvector-type#Bool_002dVector-Type&quot;&gt;Bool-Vector Type&lt;/a&gt;), and &lt;em&gt;char-tables&lt;/em&gt; (see &lt;a href=&quot;char_002dtable-type#Char_002dTable-Type&quot;&gt;Char-Table Type&lt;/a&gt;). Vectors and char-tables can hold elements of any type, but strings can only hold characters, and bool-vectors can only hold &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3fb6415278ac71d7c8b8f161cc54b4109a3c312b" translate="yes" xml:space="preserve">
          <source>Emacs defines four types of array: strings, vectors, bool-vectors, and char-tables.</source>
          <target state="translated">Emacsでは、文字列、ベクトル、bool-vector、char-tableの4種類の配列を定義しています。</target>
        </trans-unit>
        <trans-unit id="69b92bb4de9ad4e6aed0127a5eb28f648d0f341c" translate="yes" xml:space="preserve">
          <source>Emacs defines several special character sets. The character set &lt;code&gt;unicode&lt;/code&gt; includes all the characters whose Emacs code points are in the range &lt;code&gt;0..#x10FFFF&lt;/code&gt;. The character set &lt;code&gt;emacs&lt;/code&gt; includes all</source>
          <target state="translated">Emacs defines several special character sets. The character set &lt;code&gt;unicode&lt;/code&gt; includes all the characters whose Emacs code points are in the range &lt;code&gt;0..#x10FFFF&lt;/code&gt; . The character set &lt;code&gt;emacs&lt;/code&gt; includes all</target>
        </trans-unit>
        <trans-unit id="e38592f3457c7cc383975bc89f28f869224040ae" translate="yes" xml:space="preserve">
          <source>Emacs displays each slice as a separate image, and allows more intuitive scrolling up/down, instead of jumping up/down the entire image when paging through a buffer that displays (large) images.</source>
          <target state="translated">Emacsでは、各スライスを個別の画像として表示し、(大きな)画像を表示するバッファをページングしているときに画像全体をジャンプして上下にスクロールするのではなく、より直感的に上下にスクロールすることができるようになりました。</target>
        </trans-unit>
        <trans-unit id="7dd49b156766b4330d659f8045f63c75d768b611" translate="yes" xml:space="preserve">
          <source>Emacs displays the cursor, by default as a rectangular block, in each window at the position of that window&amp;rsquo;s point. When the user switches to another buffer in a window, Emacs moves that window&amp;rsquo;s cursor to where point is in that buffer. If the exact position of point is hidden behind some display element, such as a display string or an image, Emacs displays the cursor immediately before or after that display element.</source>
          <target state="translated">Emacs displays the cursor, by default as a rectangular block, in each window at the position of that window&amp;rsquo;s point. When the user switches to another buffer in a window, Emacs moves that window&amp;rsquo;s cursor to where point is in that buffer. If the exact position of point is hidden behind some display element, such as a display string or an image, Emacs displays the cursor immediately before or after that display element.</target>
        </trans-unit>
        <trans-unit id="90854d4c059273c80e35dfc3fee7ae76a16735a5" translate="yes" xml:space="preserve">
          <source>Emacs displays the keyboard menu with the map&amp;rsquo;s overall prompt string, followed by the alternatives (the item strings of the map&amp;rsquo;s bindings), in the echo area. If the bindings don&amp;rsquo;t all fit at once, the user can type</source>
          <target state="translated">Emacs displays the keyboard menu with the map&amp;rsquo;s overall prompt string, followed by the alternatives (the item strings of the map&amp;rsquo;s bindings), in the echo area. If the bindings don&amp;rsquo;t all fit at once, the user can type</target>
        </trans-unit>
        <trans-unit id="8ee3e83e047b26f1bb5a4d367cc4242225a8e766" translate="yes" xml:space="preserve">
          <source>Emacs does not keep a queue of multiple reasons to call the sentinel of one process; it records just the current status and the fact that there has been a change. Therefore two changes in status, coming in quick succession, can call the sentinel just once. However, process termination will always run the sentinel exactly once. This is because the process status can&amp;rsquo;t change again after termination.</source>
          <target state="translated">Emacs does not keep a queue of multiple reasons to call the sentinel of one process; it records just the current status and the fact that there has been a change. Therefore two changes in status, coming in quick succession, can call the sentinel just once. However, process termination will always run the sentinel exactly once. This is because the process status can&amp;rsquo;t change again after termination.</target>
        </trans-unit>
        <trans-unit id="dc4de755cdb7678344be0c9f2ef7ced9da16c291" translate="yes" xml:space="preserve">
          <source>Emacs explicitly checks for an expression as shown above in your init file; your login name must appear in the expression as a Lisp string constant. You can also use the Customize interface. Other methods of setting &lt;code&gt;inhibit-startup-echo-area-message&lt;/code&gt; to the same value do not inhibit the startup message. This way, you can easily inhibit the message for yourself if you wish, but thoughtless copying of your init file will not inhibit the message for someone else.</source>
          <target state="translated">Emacs explicitly checks for an expression as shown above in your init file; your login name must appear in the expression as a Lisp string constant. You can also use the Customize interface. Other methods of setting &lt;code&gt;inhibit-startup-echo-area-message&lt;/code&gt; to the same value do not inhibit the startup message. This way, you can easily inhibit the message for yourself if you wish, but thoughtless copying of your init file will not inhibit the message for someone else.</target>
        </trans-unit>
        <trans-unit id="42f3639833a767a937f1dcec0ae3d27fe7d4f78c" translate="yes" xml:space="preserve">
          <source>Emacs explicitly checks for output from the process before running the process sentinel. Once the sentinel runs due to process termination, no further output can arrive from the process.</source>
          <target state="translated">Emacsは、プロセスセンチネルを実行する前に、プロセスからの出力を明示的にチェックします。プロセスの終了によりセンチネルが実行されると、それ以上の出力は得られません。</target>
        </trans-unit>
        <trans-unit id="a4e4a4a8604d8c5f44f50b7eaee3b67be7cc2ae6" translate="yes" xml:space="preserve">
          <source>Emacs functions that add a new element to a history list can also delete old elements if the list gets too long. The variable &lt;code&gt;history-length&lt;/code&gt; specifies the maximum length for most history lists. To specify a different maximum length for a particular history list, put the length in the &lt;code&gt;history-length&lt;/code&gt; property of the history list symbol. The variable &lt;code&gt;history-delete-duplicates&lt;/code&gt; specifies whether to delete duplicates in history.</source>
          <target state="translated">Emacs functions that add a new element to a history list can also delete old elements if the list gets too long. The variable &lt;code&gt;history-length&lt;/code&gt; specifies the maximum length for most history lists. To specify a different maximum length for a particular history list, put the length in the &lt;code&gt;history-length&lt;/code&gt; property of the history list symbol. The variable &lt;code&gt;history-delete-duplicates&lt;/code&gt; specifies whether to delete duplicates in history.</target>
        </trans-unit>
        <trans-unit id="4716416f00dd279f5dd607a085f5d6d79ec84a0c" translate="yes" xml:space="preserve">
          <source>Emacs guarantees that the maximum required value of &lt;code&gt;*count&lt;/code&gt; never exceeds &lt;code&gt;min (PTRDIFF_MAX, SIZE_MAX) / sizeof
(emacs_limb_t)&lt;/code&gt;, so you can use &lt;code&gt;malloc (*count * sizeof *magnitude)&lt;/code&gt; to allocate the &lt;code&gt;magnitude&lt;/code&gt; array without worrying about integer overflow in the size calculation.</source>
          <target state="translated">Emacs guarantees that the maximum required value of &lt;code&gt;*count&lt;/code&gt; never exceeds &lt;code&gt;min (PTRDIFF_MAX, SIZE_MAX) / sizeof (emacs_limb_t)&lt;/code&gt; , so you can use &lt;code&gt;malloc (*count * sizeof *magnitude)&lt;/code&gt; to allocate the &lt;code&gt;magnitude&lt;/code&gt; array without worrying about integer overflow in the size calculation.</target>
        </trans-unit>
        <trans-unit id="6b7b23ca683cca53cbcc351dc973d57c5ba2c383" translate="yes" xml:space="preserve">
          <source>Emacs has built-in support for computing &lt;em&gt;cryptographic hashes&lt;/em&gt;. A cryptographic hash, or &lt;em&gt;checksum&lt;/em&gt;, is a digital fingerprint of a piece of data (e.g., a block of text) which can be used to check that you have an unaltered copy of that data.</source>
          <target state="translated">Emacs has built-in support for computing &lt;em&gt;cryptographic hashes&lt;/em&gt;. A cryptographic hash, or &lt;em&gt;checksum&lt;/em&gt;, is a digital fingerprint of a piece of data (e.g., a block of text) which can be used to check that you have an unaltered copy of that data.</target>
        </trans-unit>
        <trans-unit id="eca0f5332e43d15251cecdd9558e33fbb26dcd5c" translate="yes" xml:space="preserve">
          <source>Emacs has built-in support for this. To begin profiling, type</source>
          <target state="translated">Emacsにはこのサポートが組み込まれています。プロファイリングを開始するには、次のようにタイプします。</target>
        </trans-unit>
        <trans-unit id="e59efddf97737e44b038590b93e7af92d497ee8e" translate="yes" xml:space="preserve">
          <source>Emacs has customization and other variables with similar considerations. For example, if the variable &lt;code&gt;shell-file-name&lt;/code&gt; specifies a shell with nonstandard behavior, an Emacs-based application may misbehave.</source>
          <target state="translated">Emacs has customization and other variables with similar considerations. For example, if the variable &lt;code&gt;shell-file-name&lt;/code&gt; specifies a shell with nonstandard behavior, an Emacs-based application may misbehave.</target>
        </trans-unit>
        <trans-unit id="d0db7329b8249a3f26dde80ed9599e46ebd35d35" translate="yes" xml:space="preserve">
          <source>Emacs has several functions that deal with passwords, e.g., &lt;code&gt;read-passwd&lt;/code&gt;. See &lt;a href=&quot;reading-a-password#Reading-a-Password&quot;&gt;Reading a Password&lt;/a&gt;. Although these functions do not attempt to broadcast passwords to the world, their implementations are not proof against determined attackers with access to Emacs internals. For example, even if Elisp code uses &lt;code&gt;clear-string&lt;/code&gt; to scrub a password from its memory after using it, remnants of the password may still reside in the garbage-collected free list. See &lt;a href=&quot;modifying-strings#Modifying-Strings&quot;&gt;Modifying Strings&lt;/a&gt;.</source>
          <target state="translated">Emacs has several functions that deal with passwords, e.g., &lt;code&gt;read-passwd&lt;/code&gt; . See &lt;a href=&quot;reading-a-password#Reading-a-Password&quot;&gt;Reading a Password&lt;/a&gt;. Although these functions do not attempt to broadcast passwords to the world, their implementations are not proof against determined attackers with access to Emacs internals. For example, even if Elisp code uses &lt;code&gt;clear-string&lt;/code&gt; to scrub a password from its memory after using it, remnants of the password may still reside in the garbage-collected free list. See &lt;a href=&quot;modifying-strings#Modifying-Strings&quot;&gt;Modifying Strings&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2d4202fc4d0303db75d85aad9409b4fc14f3d791" translate="yes" xml:space="preserve">
          <source>Emacs ignores all face attributes from the &lt;code&gt;mouse-face&lt;/code&gt; property that alter the text size (e.g., &lt;code&gt;:height&lt;/code&gt;, &lt;code&gt;:weight&lt;/code&gt;, and &lt;code&gt;:slant&lt;/code&gt;). Those attributes are always the same as for the unhighlighted text.</source>
          <target state="translated">Emacs ignores all face attributes from the &lt;code&gt;mouse-face&lt;/code&gt; property that alter the text size (e.g., &lt;code&gt;:height&lt;/code&gt; , &lt;code&gt;:weight&lt;/code&gt; , and &lt;code&gt;:slant&lt;/code&gt; ). Those attributes are always the same as for the unhighlighted text.</target>
        </trans-unit>
        <trans-unit id="5faa39e22b5b9e6b70fa340f3f937b1c558d41df" translate="yes" xml:space="preserve">
          <source>Emacs includes a standard macro called &lt;code&gt;with-temp-buffer&lt;/code&gt; which expands into more or less the code shown above (see &lt;a href=&quot;current-buffer#Definition-of-with_002dtemp_002dbuffer&quot;&gt;Current Buffer&lt;/a&gt;). Several of the macros defined in this manual use &lt;code&gt;unwind-protect&lt;/code&gt; in this way.</source>
          <target state="translated">Emacs includes a standard macro called &lt;code&gt;with-temp-buffer&lt;/code&gt; which expands into more or less the code shown above (see &lt;a href=&quot;current-buffer#Definition-of-with_002dtemp_002dbuffer&quot;&gt;Current Buffer&lt;/a&gt;). Several of the macros defined in this manual use &lt;code&gt;unwind-protect&lt;/code&gt; in this way.</target>
        </trans-unit>
        <trans-unit id="3be04959a4a73f5846094512fe21b66b28793a3e" translate="yes" xml:space="preserve">
          <source>Emacs is able to display native widgets, such as GTK+ WebKit widgets, in Emacs buffers when it was built with the necessary support libraries and is running on a graphical terminal. To test whether Emacs supports display of embedded widgets, check that the &lt;code&gt;xwidget-internal&lt;/code&gt; feature is available (see &lt;a href=&quot;named-features#Named-Features&quot;&gt;Named Features&lt;/a&gt;).</source>
          <target state="translated">Emacs is able to display native widgets, such as GTK+ WebKit widgets, in Emacs buffers when it was built with the necessary support libraries and is running on a graphical terminal. To test whether Emacs supports display of embedded widgets, check that the &lt;code&gt;xwidget-internal&lt;/code&gt; feature is available (see &lt;a href=&quot;named-features#Named-Features&quot;&gt;Named Features&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="7fb6e43305b1bbb4090ee8b7af8d46e47a9b6d11" translate="yes" xml:space="preserve">
          <source>Emacs is able to send &lt;em&gt;notifications&lt;/em&gt; on systems that support the freedesktop.org Desktop Notifications Specification and on MS-Windows. In order to use this functionality on POSIX hosts, Emacs must have been compiled with D-Bus support, and the &lt;code&gt;notifications&lt;/code&gt; library must be loaded. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/dbus/index.html#Top&quot;&gt;D-Bus&lt;/a&gt; in</source>
          <target state="translated">Emacs is able to send &lt;em&gt;notifications&lt;/em&gt; on systems that support the freedesktop.org Desktop Notifications Specification and on MS-Windows. In order to use this functionality on POSIX hosts, Emacs must have been compiled with D-Bus support, and the &lt;code&gt;notifications&lt;/code&gt; library must be loaded. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/dbus/index.html#Top&quot;&gt;D-Bus&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="6c82d7724892492c38f9593a41f14fcca5af203f" translate="yes" xml:space="preserve">
          <source>Emacs is displaying the frame on a character-based terminal.</source>
          <target state="translated">Emacsは文字ベースの端末でフレームを表示しています。</target>
        </trans-unit>
        <trans-unit id="b2182126d9b9ddba21c09d5684ccb269a6e78276" translate="yes" xml:space="preserve">
          <source>Emacs is displaying the frame using MS-DOS direct screen writes.</source>
          <target state="translated">EmacsはMS-DOSのダイレクト画面書き込みを利用してフレームを表示しています。</target>
        </trans-unit>
        <trans-unit id="44765627efc8f89010449c0a9f3da8feaa76db08" translate="yes" xml:space="preserve">
          <source>Emacs is displaying the frame using X.</source>
          <target state="translated">EmacsではXを使ってフレームを表示しています。</target>
        </trans-unit>
        <trans-unit id="a8e2a9a4a27495372ade66bfe4b5f63886de526b" translate="yes" xml:space="preserve">
          <source>Emacs is displaying the frame using native MS-Windows GUI.</source>
          <target state="translated">EmacsはMS-WindowsのネイティブGUIを使ってフレームを表示しています。</target>
        </trans-unit>
        <trans-unit id="b071b69063db39e82ec151d3de36f4c8c4a353c8" translate="yes" xml:space="preserve">
          <source>Emacs is displaying the frame using the Nextstep interface (used on GNUstep and macOS).</source>
          <target state="translated">EmacsはNextstepインターフェースを使ってフレームを表示しています(GNUstepやmacOSで使用)。</target>
        </trans-unit>
        <trans-unit id="5afc383039e5d768bd41d71e6c4706685d7421aa" translate="yes" xml:space="preserve">
          <source>Emacs is usually able to display images when it is run on a graphical terminal. Images cannot be displayed in a text terminal, on certain graphical terminals that lack the support for this, or if Emacs is compiled without image support. You can use the function &lt;code&gt;display-images-p&lt;/code&gt; to determine if images can in principle be displayed (see &lt;a href=&quot;display-feature-testing#Display-Feature-Testing&quot;&gt;Display Feature Testing&lt;/a&gt;).</source>
          <target state="translated">Emacs is usually able to display images when it is run on a graphical terminal. Images cannot be displayed in a text terminal, on certain graphical terminals that lack the support for this, or if Emacs is compiled without image support. You can use the function &lt;code&gt;display-images-p&lt;/code&gt; to determine if images can in principle be displayed (see &lt;a href=&quot;display-feature-testing#Display-Feature-Testing&quot;&gt;Display Feature Testing&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="20d5a3e06646c394cc0872c5421edf765dc41006" translate="yes" xml:space="preserve">
          <source>Emacs keeps a flag called the &lt;em&gt;modified flag&lt;/em&gt; for each buffer, to record whether you have changed the text of the buffer. This flag is set to &lt;code&gt;t&lt;/code&gt; whenever you alter the contents of the buffer, and cleared to &lt;code&gt;nil&lt;/code&gt; when you save it. Thus, the flag shows whether there are unsaved changes. The flag value is normally shown in the mode line (see &lt;a href=&quot;mode-line-variables#Mode-Line-Variables&quot;&gt;Mode Line Variables&lt;/a&gt;), and controls saving (see &lt;a href=&quot;saving-buffers#Saving-Buffers&quot;&gt;Saving Buffers&lt;/a&gt;) and auto-saving (see &lt;a href=&quot;auto_002dsaving#Auto_002dSaving&quot;&gt;Auto-Saving&lt;/a&gt;).</source>
          <target state="translated">Emacs keeps a flag called the &lt;em&gt;modified flag&lt;/em&gt; for each buffer, to record whether you have changed the text of the buffer. This flag is set to &lt;code&gt;t&lt;/code&gt; whenever you alter the contents of the buffer, and cleared to &lt;code&gt;nil&lt;/code&gt; when you save it. Thus, the flag shows whether there are unsaved changes. The flag value is normally shown in the mode line (see &lt;a href=&quot;mode-line-variables#Mode-Line-Variables&quot;&gt;Mode Line Variables&lt;/a&gt;), and controls saving (see &lt;a href=&quot;saving-buffers#Saving-Buffers&quot;&gt;Saving Buffers&lt;/a&gt;) and auto-saving (see &lt;a href=&quot;auto_002dsaving#Auto_002dSaving&quot;&gt;Auto-Saving&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="1f6508afe4f7364bb84162c55aa6ec1f7edc81cf" translate="yes" xml:space="preserve">
          <source>Emacs keeps track of the start and end positions of the segments of text found during a search; this is called the &lt;em&gt;match data&lt;/em&gt;. Thanks to the match data, you can search for a complex pattern, such as a date in a mail message, and then extract parts of the match under control of the pattern.</source>
          <target state="translated">Emacs keeps track of the start and end positions of the segments of text found during a search; this is called the &lt;em&gt;match data&lt;/em&gt;. Thanks to the match data, you can search for a complex pattern, such as a date in a mail message, and then extract parts of the match under control of the pattern.</target>
        </trans-unit>
        <trans-unit id="0c6690bad1ceee8d9ed2098cbf0d23d2306a9b37" translate="yes" xml:space="preserve">
          <source>Emacs modifies every event it reads according to &lt;code&gt;extra-keyboard-modifiers&lt;/code&gt;, then translates it through &lt;code&gt;keyboard-translate-table&lt;/code&gt; (if applicable), before returning it from &lt;code&gt;read-event&lt;/code&gt;.</source>
          <target state="translated">Emacs modifies every event it reads according to &lt;code&gt;extra-keyboard-modifiers&lt;/code&gt; , then translates it through &lt;code&gt;keyboard-translate-table&lt;/code&gt; (if applicable), before returning it from &lt;code&gt;read-event&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="33e146ce39af7a489cb361dbc1e37c600789da32" translate="yes" xml:space="preserve">
          <source>Emacs never auto-adjusts the margins of any window after splitting or resizing it. It is the sole responsibility of any application setting this parameter to adjust the margins of this window as well as those of any new window that inherits this window&amp;rsquo;s margins due to a split. Both &lt;code&gt;window-configuration-change-hook&lt;/code&gt; and &lt;code&gt;window-size-change-functions&lt;/code&gt; (see &lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;) should be employed for this purpose.</source>
          <target state="translated">Emacs never auto-adjusts the margins of any window after splitting or resizing it. It is the sole responsibility of any application setting this parameter to adjust the margins of this window as well as those of any new window that inherits this window&amp;rsquo;s margins due to a split. Both &lt;code&gt;window-configuration-change-hook&lt;/code&gt; and &lt;code&gt;window-size-change-functions&lt;/code&gt; (see &lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;) should be employed for this purpose.</target>
        </trans-unit>
        <trans-unit id="731a5ccd4e119c3981a91156e4befc06a7253914" translate="yes" xml:space="preserve">
          <source>Emacs never reorders the text of a unibyte buffer, even if &lt;code&gt;bidi-display-reordering&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt; in the buffer. This is because unibyte buffers contain raw bytes, not characters, and thus lack the directionality properties required for reordering. Therefore, to test whether text in a buffer will be reordered for display, it is not enough to test the value of &lt;code&gt;bidi-display-reordering&lt;/code&gt; alone. The correct test is this:</source>
          <target state="translated">Emacs never reorders the text of a unibyte buffer, even if &lt;code&gt;bidi-display-reordering&lt;/code&gt; is non- &lt;code&gt;nil&lt;/code&gt; in the buffer. This is because unibyte buffers contain raw bytes, not characters, and thus lack the directionality properties required for reordering. Therefore, to test whether text in a buffer will be reordered for display, it is not enough to test the value of &lt;code&gt;bidi-display-reordering&lt;/code&gt; alone. The correct test is this:</target>
        </trans-unit>
        <trans-unit id="4d8a849bf06a7f6bc35485cd61775d653a4c2cd3" translate="yes" xml:space="preserve">
          <source>Emacs normally displays an error message when an error is signaled and not handled with &lt;code&gt;condition-case&lt;/code&gt;. While Edebug is active and executing instrumented code, it normally responds to all unhandled errors. You can customize this with the options &lt;code&gt;edebug-on-error&lt;/code&gt; and &lt;code&gt;edebug-on-quit&lt;/code&gt;; see &lt;a href=&quot;edebug-options#Edebug-Options&quot;&gt;Edebug Options&lt;/a&gt;.</source>
          <target state="translated">Emacs normally displays an error message when an error is signaled and not handled with &lt;code&gt;condition-case&lt;/code&gt; . While Edebug is active and executing instrumented code, it normally responds to all unhandled errors. You can customize this with the options &lt;code&gt;edebug-on-error&lt;/code&gt; and &lt;code&gt;edebug-on-quit&lt;/code&gt; ; see &lt;a href=&quot;edebug-options#Edebug-Options&quot;&gt;Edebug Options&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b6da4556a5726903beca496cf1774233562b267a" translate="yes" xml:space="preserve">
          <source>Emacs normally tries to redisplay the screen whenever it waits for input. With the following function, you can request an immediate attempt to redisplay, in the middle of Lisp code, without actually waiting for input.</source>
          <target state="translated">Emacsは通常、入力を待つと画面の再表示を試みます。以下の関数を使えば、Lispコードの途中で、実際に入力を待つことなく、即座に再表示の試みを要求することができます。</target>
        </trans-unit>
        <trans-unit id="b3b77106c4f5fd19224cba19e42352426a30909e" translate="yes" xml:space="preserve">
          <source>Emacs notification</source>
          <target state="translated">エマックス通知</target>
        </trans-unit>
        <trans-unit id="0d1349dea05c4f3f5117321a3ea3fe785f781605" translate="yes" xml:space="preserve">
          <source>Emacs often accesses the network, and you may want to configure it to avoid network accesses that it would normally do. For example, unless you set &lt;code&gt;tramp-mode&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, file names using a certain syntax are interpreted as being network files, and are retrieved across the network. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/tramp/index.html#Top&quot;&gt;The Tramp Manual&lt;/a&gt; in</source>
          <target state="translated">Emacs often accesses the network, and you may want to configure it to avoid network accesses that it would normally do. For example, unless you set &lt;code&gt;tramp-mode&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; , file names using a certain syntax are interpreted as being network files, and are retrieved across the network. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/tramp/index.html#Top&quot;&gt;The Tramp Manual&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="581d858cf52872c9ad790c13ebef480b2798de3d" translate="yes" xml:space="preserve">
          <source>Emacs performs several steps to convert the data in a buffer (text, text properties, and possibly other information) to and from a representation suitable for storing into a file. This section describes the fundamental functions that perform this &lt;em&gt;format conversion&lt;/em&gt;, namely &lt;code&gt;insert-file-contents&lt;/code&gt; for reading a file into a buffer, and &lt;code&gt;write-region&lt;/code&gt; for writing a buffer into a file.</source>
          <target state="translated">Emacs performs several steps to convert the data in a buffer (text, text properties, and possibly other information) to and from a representation suitable for storing into a file. This section describes the fundamental functions that perform this &lt;em&gt;format conversion&lt;/em&gt;, namely &lt;code&gt;insert-file-contents&lt;/code&gt; for reading a file into a buffer, and &lt;code&gt;write-region&lt;/code&gt; for writing a buffer into a file.</target>
        </trans-unit>
        <trans-unit id="7ea6c4b1c250da2cff334a5b4482f568269fcc53" translate="yes" xml:space="preserve">
          <source>Emacs periodically saves all files that you are visiting; this is called &lt;em&gt;auto-saving&lt;/em&gt;. Auto-saving prevents you from losing more than a limited amount of work if the system crashes. By default, auto-saves happen every 300 keystrokes, or after around 30 seconds of idle time. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save.html#Auto-Save&quot;&gt;Auto-Saving: Protection Against Disasters&lt;/a&gt; in</source>
          <target state="translated">Emacs periodically saves all files that you are visiting; this is called &lt;em&gt;auto-saving&lt;/em&gt;. Auto-saving prevents you from losing more than a limited amount of work if the system crashes. By default, auto-saves happen every 300 keystrokes, or after around 30 seconds of idle time. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save.html#Auto-Save&quot;&gt;Auto-Saving: Protection Against Disasters&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="df11fc994e2c3039bdad35c40cb0169c3b1f9d1d" translate="yes" xml:space="preserve">
          <source>Emacs provides a primitive that applications can use to detect instances of text whose bidirectional properties were overridden so as to make a left-to-right character display as if it were a right-to-left character, or vise versa.</source>
          <target state="translated">Emacs は、アプリケーションが、左から右への文字があたかも右から左への文字であるかのように表示されるように双方向プロパティがオーバーライドされたテキストのインスタンスを検出するために使用できるプリミティブを提供しています。</target>
        </trans-unit>
        <trans-unit id="61baf7ab83dc2d8df21e9d0bdf661236de4fd609" translate="yes" xml:space="preserve">
          <source>Emacs provides a standard way to distribute Emacs Lisp code to users. A &lt;em&gt;package&lt;/em&gt; is a collection of one or more files, formatted and bundled in such a way that users can easily download, install, uninstall, and upgrade it.</source>
          <target state="translated">Emacs provides a standard way to distribute Emacs Lisp code to users. A &lt;em&gt;package&lt;/em&gt; is a collection of one or more files, formatted and bundled in such a way that users can easily download, install, uninstall, and upgrade it.</target>
        </trans-unit>
        <trans-unit id="8ada8068790b12baa9e1062244390495c315ecb6" translate="yes" xml:space="preserve">
          <source>Emacs provides a variety of built-in help functions, all accessible to the user as subcommands of the prefix</source>
          <target state="translated">Emacs にはさまざまなヘルプ機能が組み込まれています。</target>
        </trans-unit>
        <trans-unit id="43fb2f0b6d17066c5bd67b780eb98dc2c0cc5b60" translate="yes" xml:space="preserve">
          <source>Emacs provides access to variables in the operating system environment through various functions. These variables include the name of the system, the user&amp;rsquo;s</source>
          <target state="translated">Emacs provides access to variables in the operating system environment through various functions. These variables include the name of the system, the user&amp;rsquo;s</target>
        </trans-unit>
        <trans-unit id="1d40bc6da91c5927b0dc8f18ad6ea9527ed5df47" translate="yes" xml:space="preserve">
          <source>Emacs provides another facility for such modes: you can quickly swap buffer text between two buffers with &lt;code&gt;buffer-swap-text&lt;/code&gt;. This function is very fast because it doesn&amp;rsquo;t move any text, it only changes the internal data structures of the buffer object to point to a different chunk of text. Using it, you can pretend that a group of two or more buffers are actually a single virtual buffer that holds the contents of all the individual buffers together.</source>
          <target state="translated">Emacs provides another facility for such modes: you can quickly swap buffer text between two buffers with &lt;code&gt;buffer-swap-text&lt;/code&gt; . This function is very fast because it doesn&amp;rsquo;t move any text, it only changes the internal data structures of the buffer object to point to a different chunk of text. Using it, you can pretend that a group of two or more buffers are actually a single virtual buffer that holds the contents of all the individual buffers together.</target>
        </trans-unit>
        <trans-unit id="e9aaccb8205c4eac21637c315bcf99abffe5c37c" translate="yes" xml:space="preserve">
          <source>Emacs provides miscellaneous functions for finding the height and width of a window. The return value of many of these functions can be specified either in units of pixels or in units of lines and columns. On a graphical display, the latter actually correspond to the height and width of a default character specified by the frame&amp;rsquo;s default font as returned by &lt;code&gt;frame-char-height&lt;/code&gt; and &lt;code&gt;frame-char-width&lt;/code&gt; (see &lt;a href=&quot;frame-font#Frame-Font&quot;&gt;Frame Font&lt;/a&gt;). Thus, if a window is displaying text with a different font or size, the reported line height and column width for that window may differ from the actual number of text lines or columns displayed within it.</source>
          <target state="translated">Emacs provides miscellaneous functions for finding the height and width of a window. The return value of many of these functions can be specified either in units of pixels or in units of lines and columns. On a graphical display, the latter actually correspond to the height and width of a default character specified by the frame&amp;rsquo;s default font as returned by &lt;code&gt;frame-char-height&lt;/code&gt; and &lt;code&gt;frame-char-width&lt;/code&gt; (see &lt;a href=&quot;frame-font#Frame-Font&quot;&gt;Frame Font&lt;/a&gt;). Thus, if a window is displaying text with a different font or size, the reported line height and column width for that window may differ from the actual number of text lines or columns displayed within it.</target>
        </trans-unit>
        <trans-unit id="b1632c6565185e45338eacdf43142cda2977a1ea" translate="yes" xml:space="preserve">
          <source>Emacs provides several functions and primitives that return time, both elapsed and processor time, used by the Emacs process.</source>
          <target state="translated">Emacs は、Emacs プロセスで使用される経過時間とプロセッサ時間を返す関数やプリミティブをいくつか提供しています。</target>
        </trans-unit>
        <trans-unit id="d46d6363e5a83deb2eb9ea6abf1be5990c469397" translate="yes" xml:space="preserve">
          <source>Emacs provides several primitives for accessing system processes. Not all platforms support these primitives; on those which don&amp;rsquo;t, these primitives return &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Emacs provides several primitives for accessing system processes. Not all platforms support these primitives; on those which don&amp;rsquo;t, these primitives return &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5dd098d236b6bd1b23e380080511f9e6289ec9ef" translate="yes" xml:space="preserve">
          <source>Emacs provides support for polymorphism. Like other Lisp environments, notably Common Lisp and its Common Lisp Object System (</source>
          <target state="translated">Emacs はポリモーフィズムをサポートしています。他の Lisp 環境、特に Common Lisp とその Common Lisp Object System (</target>
        </trans-unit>
        <trans-unit id="7e45b2565d3c6a45ec4a8ebbbda4c0e8bb3d845c" translate="yes" xml:space="preserve">
          <source>Emacs reads the file &lt;var&gt;filename&lt;/var&gt; from the</source>
          <target state="translated">Emacs reads the file &lt;var&gt;filename&lt;/var&gt; from the</target>
        </trans-unit>
        <trans-unit id="fa5f4104a9e9a2467fbc95628bbe7588c1e30307" translate="yes" xml:space="preserve">
          <source>Emacs redisplays only when it pauses. Usually, when you continue execution, the program re-enters Edebug at a breakpoint or after stepping, without pausing or reading input in between. In such cases, Emacs never gets a chance to redisplay the outside configuration. Consequently, what you see is the same window configuration as the last time Edebug was active, with no interruption.</source>
          <target state="translated">Emacsは一時停止したときだけ再表示します。通常、実行を続けると、プログラムはブレークポイントやステップの後、一時停止やその間の入力の読み込みを行わずにEdebugに再突入します。このような場合、Emacs は外部設定を再表示する機会がありません。その結果、表示されるのは、前回 Edebug がアクティブだったときと同じウィンドウ構成で、中断はありません。</target>
        </trans-unit>
        <trans-unit id="f46dd8612b39986c03b492b88b8edc942b92aa81" translate="yes" xml:space="preserve">
          <source>Emacs represents each terminal as a &lt;em&gt;terminal object&lt;/em&gt; data type (see &lt;a href=&quot;terminal-type#Terminal-Type&quot;&gt;Terminal Type&lt;/a&gt;). On GNU and Unix systems, Emacs can use multiple terminals simultaneously in each session. On other systems, it can only use a single terminal. Each terminal object has the following attributes:</source>
          <target state="translated">Emacs represents each terminal as a &lt;em&gt;terminal object&lt;/em&gt; data type (see &lt;a href=&quot;terminal-type#Terminal-Type&quot;&gt;Terminal Type&lt;/a&gt;). On GNU and Unix systems, Emacs can use multiple terminals simultaneously in each session. On other systems, it can only use a single terminal. Each terminal object has the following attributes:</target>
        </trans-unit>
        <trans-unit id="aa45d2f9f0d5f594df92c4785fdb9ba7d0be0018" translate="yes" xml:space="preserve">
          <source>Emacs signals an error if &lt;var&gt;key&lt;/var&gt; is not a string or a vector.</source>
          <target state="translated">Emacs signals an error if &lt;var&gt;key&lt;/var&gt; is not a string or a vector.</target>
        </trans-unit>
        <trans-unit id="5a189e87eddfeb2b6f9c9a05136525e5f7f54d44" translate="yes" xml:space="preserve">
          <source>Emacs sometimes generates &lt;em&gt;mouse motion&lt;/em&gt; events to describe motion of the mouse without any button activity. Mouse motion events are represented by lists that look like this:</source>
          <target state="translated">Emacs sometimes generates &lt;em&gt;mouse motion&lt;/em&gt; events to describe motion of the mouse without any button activity. Mouse motion events are represented by lists that look like this:</target>
        </trans-unit>
        <trans-unit id="8cea986d9dde8997ae558d2415d06c4c0c311a90" translate="yes" xml:space="preserve">
          <source>Emacs stores the overlays of each buffer in two lists, divided around an arbitrary center position. One list extends backwards through the buffer from that center position, and the other extends forwards from that center position. The center position can be anywhere in the buffer.</source>
          <target state="translated">Emacs は各バッファのオーバーレイを、任意の中心位置を中心として分割された 2 つのリストに格納します。1 つのリストはその中心位置からバッファ内を後方に延び、もう 1 つはその中心位置から前方に延びています。中心位置はバッファ内の任意の位置にすることができます。</target>
        </trans-unit>
        <trans-unit id="ad62c31e598a9d1f29a369781541a612009842a4" translate="yes" xml:space="preserve">
          <source>Emacs supplies two predefined values for this variable: &lt;code&gt;window-adjust-process-window-size-smallest&lt;/code&gt;, which returns the smallest of all the dimensions of the windows that display a process&amp;rsquo;s buffer; and &lt;code&gt;window-adjust-process-window-size-largest&lt;/code&gt;, which returns the largest dimensions. For more complex strategies, write your own function.</source>
          <target state="translated">Emacs supplies two predefined values for this variable: &lt;code&gt;window-adjust-process-window-size-smallest&lt;/code&gt; , which returns the smallest of all the dimensions of the windows that display a process&amp;rsquo;s buffer; and &lt;code&gt;window-adjust-process-window-size-largest&lt;/code&gt; , which returns the largest dimensions. For more complex strategies, write your own function.</target>
        </trans-unit>
        <trans-unit id="61355fb31d5f838a8163a1a0717a06fbd8117c67" translate="yes" xml:space="preserve">
          <source>Emacs supports four kinds of mouse events: click events, drag events, button-down events, and motion events. All mouse events are represented as lists. The &lt;small&gt;CAR&lt;/small&gt; of the list is the event type; this says which mouse button was involved, and which modifier keys were used with it. The event type can also distinguish double or triple button presses (see &lt;a href=&quot;repeat-events#Repeat-Events&quot;&gt;Repeat Events&lt;/a&gt;). The rest of the list elements give position and time information.</source>
          <target state="translated">Emacs supports four kinds of mouse events: click events, drag events, button-down events, and motion events. All mouse events are represented as lists. The &lt;small&gt;CAR&lt;/small&gt; of the list is the event type; this says which mouse button was involved, and which modifier keys were used with it. The event type can also distinguish double or triple button presses (see &lt;a href=&quot;repeat-events#Repeat-Events&quot;&gt;Repeat Events&lt;/a&gt;). The rest of the list elements give position and time information.</target>
        </trans-unit>
        <trans-unit id="6218bcff746da87fbb66fbec9ddb8a018bc5f549" translate="yes" xml:space="preserve">
          <source>Emacs supports saving state via a hook called &lt;code&gt;emacs-save-session-functions&lt;/code&gt;. Emacs runs this hook when the session manager tells it that the window system is shutting down. The functions are called with no arguments, and with the current buffer set to a temporary buffer. Each function can use &lt;code&gt;insert&lt;/code&gt; to add Lisp code to this buffer. At the end, Emacs saves the buffer in a file, called the &lt;em&gt;session file&lt;/em&gt;.</source>
          <target state="translated">Emacsは、 &lt;code&gt;emacs-save-session-functions&lt;/code&gt; と呼ばれるフックを介した状態の保存をサポートしています。Emacsは、セッションマネージャーがウィンドウシステムがシャットダウンしていることを通知すると、このフックを実行します。関数は引数なしで呼び出され、現在のバッファーは一時バッファーに設定されます。各関数は &lt;code&gt;insert&lt;/code&gt; を使用して、このバッファにLispコードを追加できます。最後に、Emacsはバッファを&lt;em&gt;セッションファイル&lt;/em&gt;と呼ばれる&lt;em&gt;ファイルに保存します&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1ffa17ed9364f5575c0082d461c8f0e3489ecac2" translate="yes" xml:space="preserve">
          <source>Emacs supports several comment styles simultaneously in any one syntax table. A comment style is a set of flags &amp;lsquo;</source>
          <target state="translated">Emacsは、1つの構文テーブルで同時に複数のコメントスタイルをサポートします。コメントスタイルはフラグのセットです '</target>
        </trans-unit>
        <trans-unit id="374f9fc9c7b543e09273805eabd95e1a26d66453" translate="yes" xml:space="preserve">
          <source>Emacs supports several common cryptographic hash algorithms: MD5, SHA-1, SHA-2, SHA-224, SHA-256, SHA-384 and SHA-512. MD5 is the oldest of these algorithms, and is commonly used in &lt;em&gt;message digests&lt;/em&gt; to check the integrity of messages transmitted over a network. MD5 and SHA-1 are not collision resistant (i.e., it is possible to deliberately design different pieces of data which have the same MD5 or SHA-1 hash), so you should not use them for anything security-related. For security-related applications you should use the other hash types, such as SHA-2 (e.g. &lt;code&gt;sha256&lt;/code&gt; or &lt;code&gt;sha512&lt;/code&gt;).</source>
          <target state="translated">Emacsは、MD5、SHA-1、SHA-2、SHA-224、SHA-256、SHA-384、SHA-512などの一般的な暗号化ハッシュアルゴリズムをサポートしています。 MD5はこれらのアルゴリズムの中で最も古いものであり、ネットワークを介して送信されるメッセージの整合性をチェックするために&lt;em&gt;メッセージダイジェストで&lt;/em&gt;一般的に使用され&lt;em&gt;ます&lt;/em&gt;。 MD5とSHA-1は衝突耐性がないため（つまり、同じMD5またはSHA-1ハッシュを持つ異なるデータを意図的に設計することが可能です）、セキュリティ関連の目的で使用しないでください。セキュリティ関連のアプリケーションの場合は、SHA-2（ &lt;code&gt;sha256&lt;/code&gt; や &lt;code&gt;sha512&lt;/code&gt; など）などの他のハッシュタイプを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b7e49d60042c70b0537fcee92a3c84a52f433f6c" translate="yes" xml:space="preserve">
          <source>Emacs supports the X Session Management Protocol, which is used to suspend and restart applications. In the X Window System, a program called the &lt;em&gt;session manager&lt;/em&gt; is responsible for keeping track of the applications that are running. When the X server shuts down, the session manager asks applications to save their state, and delays the actual shutdown until they respond. An application can also cancel the shutdown.</source>
          <target state="translated">Emacsは、アプリケーションの一時停止と再起動に使用されるXセッション管理プロトコルをサポートしています。X Window Systemでは、&lt;em&gt;セッションマネージャ&lt;/em&gt;と呼ばれるプログラムが、実行中のアプリケーションを追跡する役割を果たします。Xサーバーがシャットダウンすると、セッションマネージャーはアプリケーションに状態を保存するように要求し、応答するまで実際のシャットダウンを遅らせます。アプリケーションはシャットダウンをキャンセルすることもできます。</target>
        </trans-unit>
        <trans-unit id="89f5a42afa1af03f9d3097e4024bf58ff39a6001" translate="yes" xml:space="preserve">
          <source>Emacs then searches every Lisp file in the content directory for autoload magic comments (see &lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt;). These autoload definitions are saved to a file named</source>
          <target state="translated">Emacsはその後、自動ロードマジックコメント（参照のためのコンテンツのディレクトリ内のすべてのLispファイルを検索し、&lt;a href=&quot;autoload#Autoload&quot;&gt;自動ロードを&lt;/a&gt;）。これらの自動ロード定義は、という名前のファイルに保存されます</target>
        </trans-unit>
        <trans-unit id="642da26f6d818f57222aa0ba6201c9a5f8e43253" translate="yes" xml:space="preserve">
          <source>Emacs tries to load the library from the files in the order they appear in the list; if none is found, the Emacs session won&amp;rsquo;t have access to that library, and the features it provides will be unavailable.</source>
          <target state="translated">Emacsは、リストに表示されている順序でファイルからライブラリをロードしようとします。何も見つからない場合、Emacsセッションはそのライブラリにアクセスできず、Emacsが提供する機能は利用できなくなります。</target>
        </trans-unit>
        <trans-unit id="6ec424687522d88149cabb8e9ff0c17e4a8a1445" translate="yes" xml:space="preserve">
          <source>Emacs uses the word &amp;ldquo;window&amp;rdquo; with a different meaning than in graphical desktop environments and window systems, such as the X Window System. When Emacs is run on X, each of its graphical X windows is an Emacs frame (containing one or more Emacs windows). When Emacs is run on a text terminal, the frame fills the entire terminal screen.</source>
          <target state="translated">Emacsは「ウィンドウ」という言葉を、グラフィカルデスクトップ環境やXウィンドウシステムなどのウィンドウシステムとは異なる意味で使用しています。EmacsがXで実行される場合、そのグラフィカルXウィンドウはそれぞれEmacsフレーム（1つ以上のEmacsウィンドウを含む）です。Emacsをテキスト端末で実行すると、フレームが端末画面全体に表示されます。</target>
        </trans-unit>
        <trans-unit id="6739d8fc92b7ea45c67f23811c8b9230bc3d4cae" translate="yes" xml:space="preserve">
          <source>Emacs uses this function internally when it loads directory variables from a &lt;code&gt;.dir-locals.el&lt;/code&gt; file. In that case, the optional argument &lt;var&gt;mtime&lt;/var&gt; holds the file modification time (as returned by &lt;code&gt;file-attributes&lt;/code&gt;). Emacs uses this time to check stored local variables are still valid. If you are assigning a class directly, not via a file, this argument should be &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Emacsは、 &lt;code&gt;.dir-locals.el&lt;/code&gt; ファイルからディレクトリ変数をロードするときにこの関数を内部的に使用します。その場合、オプションの引数 &lt;var&gt;mtime&lt;/var&gt; は、ファイルの変更時刻を保持します（ &lt;code&gt;file-attributes&lt;/code&gt; によって返されます）。Emacsはこの時間を使用して、保存されているローカル変数がまだ有効であることを確認します。ファイルを &lt;code&gt;nil&lt;/code&gt; ずにクラスを直接割り当てる場合、この引数はnilにする必要があります。</target>
        </trans-unit>
        <trans-unit id="8a5eb29ea0683f15f88a024cecd03f16a4045817" translate="yes" xml:space="preserve">
          <source>Emacs uses two variables to store the prefix argument: &lt;code&gt;prefix-arg&lt;/code&gt; and &lt;code&gt;current-prefix-arg&lt;/code&gt;. Commands such as &lt;code&gt;universal-argument&lt;/code&gt; that set up prefix arguments for other commands store them in &lt;code&gt;prefix-arg&lt;/code&gt;. In contrast, &lt;code&gt;current-prefix-arg&lt;/code&gt; conveys the prefix argument to the current command, so setting it has no effect on the prefix arguments for future commands.</source>
          <target state="translated">Emacsは2つの変数を使用してプレフィックス引数を格納します： &lt;code&gt;prefix-arg&lt;/code&gt; と &lt;code&gt;current-prefix-arg&lt;/code&gt; 。他のコマンドのプレフィックス引数を設定する &lt;code&gt;universal-argument&lt;/code&gt; などのコマンドは、それらを &lt;code&gt;prefix-arg&lt;/code&gt; に格納します。対照的に、 &lt;code&gt;current-prefix-arg&lt;/code&gt; はプレフィックス引数を現在のコマンドに伝達するため、これを設定しても、将来のコマンドのプレフィックス引数には影響しません。</target>
        </trans-unit>
        <trans-unit id="8322177991ff5a69ef8d70459eeede0c94874d69" translate="yes" xml:space="preserve">
          <source>Emacs usually shows a &lt;em&gt;menu bar&lt;/em&gt; at the top of each frame. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Menu-Bars.html#Menu-Bars&quot;&gt;Menu Bars&lt;/a&gt; in</source>
          <target state="translated">Emacsは通常、各フレームの上部に&lt;em&gt;メニューバー&lt;/em&gt;を表示し&lt;em&gt;ます&lt;/em&gt;。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Menu-Bars.html#Menu-Bars&quot;&gt;メニューバー&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="0558f3f8ca5ebcf9982d4420378522febddf9f12" translate="yes" xml:space="preserve">
          <source>Emacs versions before Emacs 22 did not have &lt;code&gt;delay-mode-hooks&lt;/code&gt;. Versions before 24 did not have &lt;code&gt;change-major-mode-after-body-hook&lt;/code&gt;. When user-implemented major modes do not use &lt;code&gt;run-mode-hooks&lt;/code&gt; and have not been updated to use these newer features, they won&amp;rsquo;t entirely follow these conventions: they may run the parent&amp;rsquo;s mode hook too early, or fail to run &lt;code&gt;after-change-major-mode-hook&lt;/code&gt;. If you encounter such a major mode, please correct it to follow these conventions.</source>
          <target state="translated">Emacs 22より前のEmacsバージョンには、 &lt;code&gt;delay-mode-hooks&lt;/code&gt; がありませんでした。24より前のバージョンには、 &lt;code&gt;change-major-mode-after-body-hook&lt;/code&gt; がありませんでした。ユーザーが実装したメジャーモードが &lt;code&gt;run-mode-hooks&lt;/code&gt; を使用せず、これらの新しい機能を使用するように更新されていない場合、これらの規則に完全には従いません。親のモードフックの実行が早すぎるか、 &lt;code&gt;after-change-major-mode-hook&lt;/code&gt; 実行できない可能性があります。 change-major-mode-hook。このようなメジャーモードに遭遇した場合は、これらの規則に従うように修正してください。</target>
        </trans-unit>
        <trans-unit id="2175b4ca0a4ab5a7e1e6f75b7a977f193cc85367" translate="yes" xml:space="preserve">
          <source>Emacs will fail to decode</source>
          <target state="translated">Emacs はデコードに失敗します。</target>
        </trans-unit>
        <trans-unit id="d4d48520a4e7157f1ff4ee50b46e94eaf663e2aa" translate="yes" xml:space="preserve">
          <source>Emacs will try to keep the position ratios of a child frame unaltered if that frame has a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;keep-ratio&lt;/code&gt; parameter (see &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;) and its parent frame is resized.</source>
          <target state="translated">Emacsは、子フレームの位置比を変更せずに維持しようとします。その&lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;フレームに&lt;/a&gt; &lt;code&gt;nil&lt;/code&gt; 以外の &lt;code&gt;keep-ratio&lt;/code&gt; パラメーターがあり（フレーム相互作用パラメーターを参照）、その親フレームのサイズが変更されている場合です。</target>
        </trans-unit>
        <trans-unit id="b154a9be9b6bdf586b186816066bb36a405e4a4a" translate="yes" xml:space="preserve">
          <source>Emacs will try to keep the width and height ratio of a child frame unaltered if that frame has a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;keep-ratio&lt;/code&gt; parameter (see &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;) and its parent frame is resized.</source>
          <target state="translated">Emacsは、子フレームの幅と高さの比率が変更されないようにしようとします。その&lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;フレームに&lt;/a&gt; &lt;code&gt;nil&lt;/code&gt; 以外の &lt;code&gt;keep-ratio&lt;/code&gt; パラメーターがあり（フレーム相互作用パラメーターを参照）、その親フレームのサイズが変更されている場合です。</target>
        </trans-unit>
        <trans-unit id="8f2ef7c37339106b409b42bf4c03ccef1510f3a8" translate="yes" xml:space="preserve">
          <source>Emacs works with several window systems, most notably the X Window System. Both Emacs and X use the term &amp;ldquo;window&amp;rdquo;, but use it differently. An Emacs frame is a single window as far as X is concerned; the individual Emacs windows are not known to X at all.</source>
          <target state="translated">Emacsはいくつかのウィンドウシステム、特にXウィンドウシステムで動作します。EmacsとXはどちらも「ウィンドウ」という用語を使用していますが、使用方法は異なります。Xに関する限り、Emacsフレームは単一のウィンドウです。個々のEmacsウィンドウはXにはまったく知られていません。</target>
        </trans-unit>
        <trans-unit id="3e023f4f3837dfad4265ed79f1fcd67f57a3591f" translate="yes" xml:space="preserve">
          <source>Emacs&amp;rsquo;s Widget for Object Collections.</source>
          <target state="translated">オブジェクトコレクション用のEmacsのウィジェット。</target>
        </trans-unit>
        <trans-unit id="259a61bf42871d8fc1aec61faab84f39ed26f1e8" translate="yes" xml:space="preserve">
          <source>Emacs&amp;rsquo;s advice system provides two sets of primitives for that: the core set, for function values held in variables and object fields (with the corresponding primitives being &lt;code&gt;add-function&lt;/code&gt; and &lt;code&gt;remove-function&lt;/code&gt;) and another set layered on top of it for named functions (with the main primitives being &lt;code&gt;advice-add&lt;/code&gt; and &lt;code&gt;advice-remove&lt;/code&gt;).</source>
          <target state="translated">Emacsのアドバイスシステムは、そのための2つのプリミティブセットを提供します。変数とオブジェクトフィールドに保持される関数値用のコアセット（対応するプリミティブは &lt;code&gt;add-function&lt;/code&gt; と &lt;code&gt;remove-function&lt;/code&gt; ）と、その上に階層化された名前付き関数用の別のセット（主なプリミティブは &lt;code&gt;advice-add&lt;/code&gt; と &lt;code&gt;advice-remove&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="7eb4cad6bae56a3671fe38d9c59df33108242d4f" translate="yes" xml:space="preserve">
          <source>Emacs.&lt;var&gt;class&lt;/var&gt;</source>
          <target state="translated">Emacs.&lt;var&gt;class&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="772ce1b98bdf9ba1f907e4ebaefb6456ad036e1b" translate="yes" xml:space="preserve">
          <source>Emacs.&lt;var&gt;class&lt;/var&gt;.&lt;var&gt;subclass&lt;/var&gt;</source>
          <target state="translated">Emacs.&lt;var&gt;class&lt;/var&gt;.&lt;var&gt;subclass&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="14cd681004a41ed10438de0371e7e1d227d03f61" translate="yes" xml:space="preserve">
          <source>Embedded Native Widgets</source>
          <target state="translated">組み込みネイティブウィジェット</target>
        </trans-unit>
        <trans-unit id="9a7852d05e7baac38409e4f91c01b6dd940846da" translate="yes" xml:space="preserve">
          <source>Embedding breakpoints in source code.</source>
          <target state="translated">ソースコードにブレークポイントを埋め込む</target>
        </trans-unit>
        <trans-unit id="54cf6d6905ae6cd8bd43fbae70d64742d978021f" translate="yes" xml:space="preserve">
          <source>Emboss edge-detection uses a matrix of</source>
          <target state="translated">エンボスエッジ検出には</target>
        </trans-unit>
        <trans-unit id="db0b559f4d5ae5e124f4899b893fbf4e32a596af" translate="yes" xml:space="preserve">
          <source>Empty matches do count, except that &lt;code&gt;split-string&lt;/code&gt; will not look for a final empty match when it already reached the end of the string using a non-empty match or when &lt;var&gt;string&lt;/var&gt; is empty:</source>
          <target state="translated">空の一致はカウントされますが、 &lt;code&gt;split-string&lt;/code&gt; は、空でない一致を使用して文字列の最後にすでに到達している場合、または &lt;var&gt;string&lt;/var&gt; が空の場合、最後の空の一致を検索しません。</target>
        </trans-unit>
        <trans-unit id="9d433804d09a2b55eeb29add415a821fb9c7f1c0" translate="yes" xml:space="preserve">
          <source>Emulating Mode Line Formatting</source>
          <target state="translated">エミュレートモード行の書式設定</target>
        </trans-unit>
        <trans-unit id="16f497122ec781967c9cd6bac0e6090a9d12ada1" translate="yes" xml:space="preserve">
          <source>Enabling Auto Compression mode appends the suffixes in &lt;code&gt;jka-compr-load-suffixes&lt;/code&gt; to this list and disabling Auto Compression mode removes them again. The standard value of &lt;code&gt;load-file-rep-suffixes&lt;/code&gt; if Auto Compression mode is disabled is &lt;code&gt;(&quot;&quot;)&lt;/code&gt;. Given that the standard value of &lt;code&gt;jka-compr-load-suffixes&lt;/code&gt; is &lt;code&gt;(&quot;.gz&quot;)&lt;/code&gt;, the standard value of &lt;code&gt;load-file-rep-suffixes&lt;/code&gt; if Auto Compression mode is enabled is &lt;code&gt;(&quot;&quot; &quot;.gz&quot;)&lt;/code&gt;.</source>
          <target state="translated">自動圧縮モードを有効にすると、 &lt;code&gt;jka-compr-load-suffixes&lt;/code&gt; のサフィックスがこのリストに追加され、自動圧縮モードを無効にすると、それらが再び削除されます。自動圧縮モードが無効になっている場合の &lt;code&gt;load-file-rep-suffixes&lt;/code&gt; の標準値は &lt;code&gt;(&quot;&quot;)&lt;/code&gt; です。 &lt;code&gt;jka-compr-load-suffixes&lt;/code&gt; の標準値が &lt;code&gt;(&quot;.gz&quot;)&lt;/code&gt; であるとすると、自動圧縮モードが有効になっている場合の &lt;code&gt;load-file-rep-suffixes&lt;/code&gt; -suffixesの標準値は &lt;code&gt;(&quot;&quot; &quot;.gz&quot;)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="97ea443a6ca1abd46f75c2ad8f1c051cf1f2375b" translate="yes" xml:space="preserve">
          <source>Enabling or disabling a minor mode twice in direct succession should not fail and should do the same thing as enabling or disabling it only once. In other words, the minor mode command should be idempotent.</source>
          <target state="translated">マイナーモードを2回連続して有効にしたり無効にしたりすることは失敗してはならず、1回だけ有効にしたり無効にしたりするのと同じことをしなければなりません。言い換えれば、マイナーモードのコマンドは無意味でなければなりません。</target>
        </trans-unit>
        <trans-unit id="a3b1c1ae369f1075ad679993e89089772fd41d3c" translate="yes" xml:space="preserve">
          <source>Encoded text is not really text, as far as Emacs is concerned, but rather a sequence of raw 8-bit bytes. We call buffers and strings that hold encoded text &lt;em&gt;unibyte&lt;/em&gt; buffers and strings, because Emacs treats them as a sequence of individual bytes. Usually, Emacs displays unibyte buffers and strings as octal codes such as &lt;code&gt;\237&lt;/code&gt;. We recommend that you never use unibyte buffers and strings except for manipulating encoded text or binary non-text data.</source>
          <target state="translated">エンコードされたテキストは、Emacsに関する限り、実際にはテキストではなく、生の8ビットバイトのシーケンスです。Emacsはそれらを個々のバイトのシーケンスとして扱うため、エンコードされたテキストを保持するバッファーと文字列を&lt;em&gt;ユニバイト&lt;/em&gt;バッファーと文字列と呼びます。通常、Emacsはユニバイトのバッファと文字列を &lt;code&gt;\237&lt;/code&gt; などの8進コードとして表示します。エンコードされたテキストまたはバイナリの非テキストデータを操作する場合を除いて、ユニバイトのバッファと文字列を使用しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="bd7313ce1d017669659ef7e4ce9d21c10a5d020c" translate="yes" xml:space="preserve">
          <source>Encoding and I/O</source>
          <target state="translated">エンコーディングとI/O</target>
        </trans-unit>
        <trans-unit id="02f30c7d0f91b7195ed0ae6309a8ca548b2049c4" translate="yes" xml:space="preserve">
          <source>Encoding buffer text and then decoding the result can also fail to reproduce the original text. For instance, if you encode a character with a coding system which does not support that character, the result is unpredictable, and thus decoding it using the same coding system may produce a different text. Currently, Emacs can&amp;rsquo;t report errors that result from encoding unsupported characters.</source>
          <target state="translated">バッファテキストをエンコードしてから結果をデコードすると、元のテキストの再現に失敗する可能性もあります。たとえば、その文字をサポートしていないコーディングシステムで文字をエンコードすると、結果が予測できないため、同じコーディングシステムを使用してデコードすると、異なるテキストが生成される可能性があります。現在、Emacsはサポートされていない文字のエンコードに起因するエラーを報告できません。</target>
        </trans-unit>
        <trans-unit id="0d4bbb47556074532bed047220c876c7fbf6d672" translate="yes" xml:space="preserve">
          <source>Encoding or decoding text without doing I/O.</source>
          <target state="translated">I/O を行わずにテキストをエンコードまたはデコードすること。</target>
        </trans-unit>
        <trans-unit id="c49dfe38fa95a2d94187448bdd45b6ceb51fea26" translate="yes" xml:space="preserve">
          <source>End of buffer</source>
          <target state="translated">バッファの終了</target>
        </trans-unit>
        <trans-unit id="22ed4aff93c21533cf773a985fc18a0a9d6075db" translate="yes" xml:space="preserve">
          <source>End of file during parsing</source>
          <target state="translated">解析中のファイルの終了</target>
        </trans-unit>
        <trans-unit id="51a24f40f1dfdda0623dab9d3238f372be53712c" translate="yes" xml:space="preserve">
          <source>End the current subpath by connecting it back to its initial point. A line is drawn along the connection.</source>
          <target state="translated">現在のサブパスを初期点に戻して終了させます。接続に沿って線が引かれます。</target>
        </trans-unit>
        <trans-unit id="d83d52673aa258dada627130abd13b94143274cf" translate="yes" xml:space="preserve">
          <source>Ensuring you have tested all branches in your code.</source>
          <target state="translated">コード内のすべてのブランチがテストされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="766315a2e77f28f51bb4338a661aed5831816a7e" translate="yes" xml:space="preserve">
          <source>Enter a recursive edit to deal with this question&amp;mdash;instead of any other action that would normally be taken.</source>
          <target state="translated">通常実行される他のアクションの代わりに、この質問に対処するために再帰的な編集を入力します。</target>
        </trans-unit>
        <trans-unit id="596cbfc7aa5284414bc7f90512c8bc54b1c78c11" translate="yes" xml:space="preserve">
          <source>Entering a recursive edit, and why you usually shouldn&amp;rsquo;t.</source>
          <target state="translated">再帰的な編集を入力し、通常は入力しない理由。</target>
        </trans-unit>
        <trans-unit id="93c491ff8b6ed99eb7d8c488249b40da813b3e66" translate="yes" xml:space="preserve">
          <source>Entering it at a certain point in the program.</source>
          <target state="translated">プログラムのある時点で入力します。</target>
        </trans-unit>
        <trans-unit id="d14d5f3e4385e31fcb77f0c423677755e926fcc3" translate="yes" xml:space="preserve">
          <source>Entering it when a certain function is called.</source>
          <target state="translated">特定の関数が呼び出されたときに入力する。</target>
        </trans-unit>
        <trans-unit id="ec57cd29307aa24142772c0c32253ccfca258554" translate="yes" xml:space="preserve">
          <source>Entering it when a variable is modified.</source>
          <target state="translated">変数が変更されたときに入力します。</target>
        </trans-unit>
        <trans-unit id="b4fb292744685eab3a4922e2a5ddda019c43db2a" translate="yes" xml:space="preserve">
          <source>Entering the Debugger on a Function Call</source>
          <target state="translated">関数呼び出しでデバッガに入る</target>
        </trans-unit>
        <trans-unit id="281d5c4d3f2ee8f959289903ff6d4cf7b9296934" translate="yes" xml:space="preserve">
          <source>Entering the Debugger on an Error</source>
          <target state="translated">エラー時のデバッガの入力</target>
        </trans-unit>
        <trans-unit id="844887075a6009589b0868071d101e40cc28f3a9" translate="yes" xml:space="preserve">
          <source>Entering the debugger when a variable is modified</source>
          <target state="translated">変数が変更されたときにデバッガに入る</target>
        </trans-unit>
        <trans-unit id="9a16ed8e32b37737effa3241044834a8eb948bb3" translate="yes" xml:space="preserve">
          <source>Entering the debugger when an error happens.</source>
          <target state="translated">エラーが発生したときにデバッガに入る。</target>
        </trans-unit>
        <trans-unit id="09d7bf61bea73a703c7ae9aa3e0658c116885966" translate="yes" xml:space="preserve">
          <source>Entries in &lt;code&gt;local-function-key-map&lt;/code&gt; are ignored if they conflict with bindings made in the minor mode, local, or global keymaps. I.e., the remapping only applies if the original key sequence would otherwise not have any binding.</source>
          <target state="translated">&lt;code&gt;local-function-key-map&lt;/code&gt; のエントリは、マイナーモード、ローカル、またはグローバルキーマップで作成されたバインディングと競合する場合は無視されます。つまり、再マッピングは、元のキーシーケンスにバインディングがない場合にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="8254ab2eb5612dc4ce1c103171c6b702da77f34a" translate="yes" xml:space="preserve">
          <source>Entry to Edebug for displaying something also saves and restores the following data (though some of them are deliberately not restored if an error or quit signal occurs).</source>
          <target state="translated">何かを表示するための Edebug へのエントリは、以下のデータも保存・復元します(エラーや終了信号が発生した場合には、意図的に復元しないものもありますが)。</target>
        </trans-unit>
        <trans-unit id="79b3814747436fa5e36b284727f17f4584b2be36" translate="yes" xml:space="preserve">
          <source>Entry to the minibuffer binds this variable to the value of &lt;code&gt;minibuffer-help-form&lt;/code&gt; (see &lt;a href=&quot;minibuffer-misc#Definition-of-minibuffer_002dhelp_002dform&quot;&gt;Definition of minibuffer-help-form&lt;/a&gt;).</source>
          <target state="translated">ミニバッファへのエントリは、この変数を &lt;code&gt;minibuffer-help-form&lt;/code&gt; の値にバインドします（minibuffer-help-formの&lt;a href=&quot;minibuffer-misc#Definition-of-minibuffer_002dhelp_002dform&quot;&gt;定義を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8403ba2a4a5aa9baffc30d3d46a39f555141e42f" translate="yes" xml:space="preserve">
          <source>Environment and configuration variables</source>
          <target state="translated">環境変数と設定変数</target>
        </trans-unit>
        <trans-unit id="c4de2199d0374144093362250edf386e9f468abf" translate="yes" xml:space="preserve">
          <source>Equality Predicates</source>
          <target state="translated">平等な述語</target>
        </trans-unit>
        <trans-unit id="834c979ef344d5fe417d910f8b66468831446066" translate="yes" xml:space="preserve">
          <source>Equality and inequality predicates.</source>
          <target state="translated">平等と不等式の述語。</target>
        </trans-unit>
        <trans-unit id="c8d0f04136312386813886250977d18ad026a2f1" translate="yes" xml:space="preserve">
          <source>Equivalent to &amp;lsquo;</source>
          <target state="translated">に相当 '</target>
        </trans-unit>
        <trans-unit id="fa647c1ab7e45907989ea68b5acf3879755d28ca" translate="yes" xml:space="preserve">
          <source>Error Messages</source>
          <target state="translated">エラーメッセージ</target>
        </trans-unit>
        <trans-unit id="5a760c7fc538e175f1cfc5267b17003886b1f1cb" translate="yes" xml:space="preserve">
          <source>Error Symbols and Condition Names</source>
          <target state="translated">エラーシンボルと条件名</target>
        </trans-unit>
        <trans-unit id="1f7f4fdf201c7b5f16e21bf03e3078b9a1c7771e" translate="yes" xml:space="preserve">
          <source>Error and warning messages from byte compilation are printed in a buffer named</source>
          <target state="translated">バイトコンパイルからのエラーと警告メッセージは、以下の名前のバッファに表示されます。</target>
        </trans-unit>
        <trans-unit id="dfccb975dbeae0442fb778b970540719d3134c8b" translate="yes" xml:space="preserve">
          <source>Error signaling and handling have some resemblance to &lt;code&gt;throw&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; (see &lt;a href=&quot;catch-and-throw#Catch-and-Throw&quot;&gt;Catch and Throw&lt;/a&gt;), but they are entirely separate facilities. An error cannot be caught by a &lt;code&gt;catch&lt;/code&gt;, and a &lt;code&gt;throw&lt;/code&gt; cannot be handled by an error handler (though using &lt;code&gt;throw&lt;/code&gt; when there is no suitable &lt;code&gt;catch&lt;/code&gt; signals an error that can be handled).</source>
          <target state="translated">エラーのシグナリングと処理は、 &lt;code&gt;throw&lt;/code&gt; と &lt;code&gt;catch&lt;/code&gt; 似ていますが（&lt;a href=&quot;catch-and-throw#Catch-and-Throw&quot;&gt;キャッチとスローを&lt;/a&gt;参照）、完全に別個の機能です。エラーは &lt;code&gt;catch&lt;/code&gt; でキャッチできず、 &lt;code&gt;throw&lt;/code&gt; はエラーハンドラーで処理できません（ただし、適切な &lt;code&gt;catch&lt;/code&gt; がないときに &lt;code&gt;throw&lt;/code&gt; を使用すると、処理可能なエラーが通知されます）。</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="9d0a10c2c2e113d5312e59894e38cc94f35e4f65" translate="yes" xml:space="preserve">
          <source>Errors in finalizers are printed to &lt;code&gt;*Messages*&lt;/code&gt;. Emacs runs a given finalizer object&amp;rsquo;s associated function exactly once, even if that function fails.</source>
          <target state="translated">ファイナライザーのエラーは &lt;code&gt;*Messages*&lt;/code&gt; ます。Emacsは、特定のファイナライザーオブジェクトに関連付けられた関数を、その関数が失敗した場合でも1回だけ実行します。</target>
        </trans-unit>
        <trans-unit id="4db567f1da446be4a0e532bab664141df98a3c4f" translate="yes" xml:space="preserve">
          <source>Escape-syntax characters: &amp;lsquo;</source>
          <target state="translated">エスケープ構文文字： '</target>
        </trans-unit>
        <trans-unit id="cf82113fd70beadf20192ff3e6d4d74b99c817ff" translate="yes" xml:space="preserve">
          <source>Establishing a local binding saves away the variable&amp;rsquo;s previous value (or lack of one). We say that the previous value is &lt;em&gt;shadowed&lt;/em&gt;. Both global and local values may be shadowed. If a local binding is in effect, using &lt;code&gt;setq&lt;/code&gt; on the local variable stores the specified value in the local binding. When that local binding is no longer in effect, the previously shadowed value (or lack of one) comes back.</source>
          <target state="translated">ローカルバインディングを確立すると、変数の以前の値（または値の欠如）が保存されます。前の値は&lt;em&gt;シャドウされ&lt;/em&gt;ていると言います。グローバル値とローカル値の両方がシャドウされる可能性があります。ローカルバインディングが有効な場合、ローカル変数で &lt;code&gt;setq&lt;/code&gt; を使用すると、指定した値がローカルバインディングに格納されます。そのローカルバインディングが有効でなくなると、以前にシャドウされた値（または値の欠如）が元に戻ります。</target>
        </trans-unit>
        <trans-unit id="e7b08833a45efab519f57833aec45127debfcb2b" translate="yes" xml:space="preserve">
          <source>Eval</source>
          <target state="translated">Eval</target>
        </trans-unit>
        <trans-unit id="51e8465ca0546c95a84fea0ae32a522b14322458" translate="yes" xml:space="preserve">
          <source>Eval:</source>
          <target state="translated">Eval:</target>
        </trans-unit>
        <trans-unit id="017bb101654ddccd6af97e1fb1a4a04d0dd0c6b5" translate="yes" xml:space="preserve">
          <source>Evaluate &lt;var&gt;bindings&lt;/var&gt; to a list of bindings as in &lt;code&gt;rx-let&lt;/code&gt;, and evaluate &lt;var&gt;body&lt;/var&gt; with those bindings in effect for calls to &lt;code&gt;rx-to-string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rx-let&lt;/code&gt; のようにバインディングのリストへの &lt;var&gt;bindings&lt;/var&gt; を評価し、 &lt;code&gt;rx-to-string&lt;/code&gt; への呼び出しに対して有効なバインディングを使用して &lt;var&gt;body&lt;/var&gt; を評価します。</target>
        </trans-unit>
        <trans-unit id="f1b9783654f5c1c6a7ce0d518a3c7753257a3b28" translate="yes" xml:space="preserve">
          <source>Evaluate &lt;var&gt;expression&lt;/var&gt; to determine its value, &lt;var&gt;expval&lt;/var&gt;. Find the first clause in &lt;var&gt;clauses&lt;/var&gt; whose &lt;var&gt;pattern&lt;/var&gt; matches &lt;var&gt;expval&lt;/var&gt; and pass control to that clause&amp;rsquo;s &lt;var&gt;body-forms&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;expression&lt;/var&gt; を評価して、その値 &lt;var&gt;expval&lt;/var&gt; を決定します。最初の句の検索 &lt;var&gt;clauses&lt;/var&gt; &lt;var&gt;pattern&lt;/var&gt; と一致する &lt;var&gt;expval&lt;/var&gt; その句のへとパス制御 &lt;var&gt;body-forms&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="7acc8ce084889c04ea391fe80485a1141d6aba72" translate="yes" xml:space="preserve">
          <source>Evaluate &lt;var&gt;form&lt;/var&gt; and return its value, but inform coverage testing that &lt;var&gt;form&lt;/var&gt;&amp;rsquo;s value should always be the same.</source>
          <target state="translated">&lt;var&gt;form&lt;/var&gt; を評価してその値を返しますが、 &lt;var&gt;form&lt;/var&gt; の値は常に同じである必要があることをカバレッジテストに通知します。</target>
        </trans-unit>
        <trans-unit id="a7a2ac4cbdbdccec325f508d425bb5f51d47991d" translate="yes" xml:space="preserve">
          <source>Evaluate &lt;var&gt;form&lt;/var&gt;, a Lisp expression, find the first &lt;var&gt;tag&lt;/var&gt; that matches it, and process its associated data layout specification &lt;var&gt;spec&lt;/var&gt;. Matching can occur in one of three ways:</source>
          <target state="translated">&lt;var&gt;form&lt;/var&gt; 、Lisp式を評価し、それに一致する最初の &lt;var&gt;tag&lt;/var&gt; を見つけて、関連するデータレイアウト仕様 &lt;var&gt;spec&lt;/var&gt; 処理します。マッチングは、次の3つの方法のいずれかで発生します。</target>
        </trans-unit>
        <trans-unit id="0a7f623e6b41e2cb816551108409e841a3217f90" translate="yes" xml:space="preserve">
          <source>Evaluate &lt;var&gt;form&lt;/var&gt;, a Lisp expression, for side-effect only. If the field name is specified, the value is bound to that field name.</source>
          <target state="translated">副作用についてのみ、 &lt;var&gt;form&lt;/var&gt; 、Lisp式を評価します。フィールド名が指定されている場合、値はそのフィールド名にバインドされます。</target>
        </trans-unit>
        <trans-unit id="580ad2e14e2540c83fc1feadb6dbd64861f6a26e" translate="yes" xml:space="preserve">
          <source>Evaluate &lt;var&gt;form&lt;/var&gt;, informing coverage testing that &lt;var&gt;form&lt;/var&gt; should never return. If it ever does return, you get a run-time error.</source>
          <target state="translated">&lt;var&gt;form&lt;/var&gt; 評価し、 &lt;var&gt;form&lt;/var&gt; が二度と戻らないことをカバレッジテストに通知します。戻ってきた場合は、実行時エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="bba9f3f9dd3f430bb8581d609be73110636f4819" translate="yes" xml:space="preserve">
          <source>Evaluate expression &lt;var&gt;exp&lt;/var&gt; in the context of Edebug itself (&lt;code&gt;eval-expression&lt;/code&gt;).</source>
          <target state="translated">Edebug自体のコンテキストで式 &lt;var&gt;exp&lt;/var&gt; を評価します（ &lt;code&gt;eval-expression&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="853e1525137800a049ad2ae06d42889f8357df2d" translate="yes" xml:space="preserve">
          <source>Evaluate expression &lt;var&gt;exp&lt;/var&gt; in the context outside of Edebug (&lt;code&gt;edebug-eval-expression&lt;/code&gt;). That is, Edebug tries to minimize its interference with the evaluation.</source>
          <target state="translated">Edebugの外部のコンテキスト（ &lt;code&gt;edebug-eval-expression&lt;/code&gt; ）で式 &lt;var&gt;exp&lt;/var&gt; を評価します。つまり、Edebugは評価への干渉を最小限に抑えようとします。</target>
        </trans-unit>
        <trans-unit id="948bb7c2498b0b3612f9c4b4ad2d6630a5510c14" translate="yes" xml:space="preserve">
          <source>Evaluate the expression before point, in the context outside of Edebug (&lt;code&gt;edebug-eval-last-sexp&lt;/code&gt;).</source>
          <target state="translated">Edebug（ &lt;code&gt;edebug-eval-last-sexp&lt;/code&gt; ）の外部のコンテキストで、ポイントの前の式を評価します。</target>
        </trans-unit>
        <trans-unit id="f35818f832835c32b6fe2916269847d4edffa88c" translate="yes" xml:space="preserve">
          <source>Evaluate the expression before point, in the context outside of Edebug (&lt;code&gt;edebug-eval-last-sexp&lt;/code&gt;). With the prefix argument of zero (</source>
          <target state="translated">Edebug（ &lt;code&gt;edebug-eval-last-sexp&lt;/code&gt; ）の外部のコンテキストで、ポイントの前の式を評価します。プレフィックス引数がゼロの場合（</target>
        </trans-unit>
        <trans-unit id="231434026214c54f3d660e740912041c85fdfd39" translate="yes" xml:space="preserve">
          <source>Evaluate the expression before point, in the outside context, and insert the value in the buffer (&lt;code&gt;edebug-eval-print-last-sexp&lt;/code&gt;). With prefix argument of zero (</source>
          <target state="translated">外部コンテキストでポイントの前の式を評価し、値をバッファーに挿入します（ &lt;code&gt;edebug-eval-print-last-sexp&lt;/code&gt; ）。プレフィックス引数がゼロの場合（</target>
        </trans-unit>
        <trans-unit id="78278047bd4e3ea382ac8201e93db09cc8442bfd" translate="yes" xml:space="preserve">
          <source>Evaluate the interactive &lt;var&gt;spec&lt;/var&gt; just like an interactive call to a function with such a spec would, and then return the corresponding list of arguments that was built. E.g., &lt;code&gt;(advice-eval-interactive-spec &quot;r\nP&quot;)&lt;/code&gt; will return a list of three elements, containing the boundaries of the region and the current prefix argument.</source>
          <target state="translated">そのような &lt;var&gt;spec&lt;/var&gt; を持つ関数への対話型呼び出しと同じように対話型仕様を評価してから、作成された対応する引数のリストを返します。たとえば、 &lt;code&gt;(advice-eval-interactive-spec &quot;r\nP&quot;)&lt;/code&gt; は、領域の境界と現在のプレフィックス引数を含む3つの要素のリストを返します。</target>
        </trans-unit>
        <trans-unit id="c6f78c01d4848979b5b7c68ca6a35ed06ed99671" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;var&gt;expr&lt;/var&gt; to get &lt;var&gt;exprval&lt;/var&gt; and matches if &lt;var&gt;exprval&lt;/var&gt; matches &lt;var&gt;pattern&lt;/var&gt;. (It is called &lt;code&gt;let&lt;/code&gt; because &lt;var&gt;pattern&lt;/var&gt; can bind symbols to values using &lt;var&gt;symbol&lt;/var&gt;.)</source>
          <target state="translated">評価は、 &lt;var&gt;expr&lt;/var&gt; を取得するために &lt;var&gt;exprval&lt;/var&gt; と一致した場合 &lt;var&gt;exprval&lt;/var&gt; 試合の &lt;var&gt;pattern&lt;/var&gt; 。（ &lt;var&gt;pattern&lt;/var&gt; はシンボルを使用して &lt;var&gt;symbol&lt;/var&gt; を値にバインドできるため、 &lt;code&gt;let&lt;/code&gt; と呼ばれます。）</target>
        </trans-unit>
        <trans-unit id="87d131c3ebb6c4f0c9cfdfe39480aa9ad4b173d6" translate="yes" xml:space="preserve">
          <source>Evaluating Macro Arguments Repeatedly</source>
          <target state="translated">マクロ引数を繰り返し評価する</target>
        </trans-unit>
        <trans-unit id="24421971dc29c855ec4d191995ceb56afdbc89a7" translate="yes" xml:space="preserve">
          <source>Evaluating Macro Arguments in Expansion</source>
          <target state="translated">拡張におけるマクロ引数の評価</target>
        </trans-unit>
        <trans-unit id="2f1f505e20fcaf20af4daf55e87911ae35f25363" translate="yes" xml:space="preserve">
          <source>Evaluating a form may also make changes that persist; these changes are called &lt;em&gt;side effects&lt;/em&gt;. An example of a form that produces a side effect is &lt;code&gt;(setq foo 1)&lt;/code&gt;.</source>
          <target state="translated">フォームを評価すると、変更が持続する場合もあります。これらの変更は&lt;em&gt;副作用&lt;/em&gt;と呼ばれます。副作用を生成するフォームの例は &lt;code&gt;(setq foo 1)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2d61c182c806f0223ae98daf21330e85c522ce20" translate="yes" xml:space="preserve">
          <source>Evaluating body form &lt;code&gt;(list&amp;nbsp;e-num&amp;nbsp;o-num)&lt;/code&gt; signals error. To distinguish between sub-patterns, you can use another symbol, identical in name in all sub-patterns but differing in value. Reworking the above example:</source>
          <target state="translated">ボディフォーム &lt;code&gt;(list&amp;nbsp;e-num&amp;nbsp;o-num)&lt;/code&gt; すると、エラーが発生します。サブパターンを区別するために、すべてのサブパターンで名前が同じであるが値が異なる別のシンボルを使用できます。上記の例を作り直します。</target>
        </trans-unit>
        <trans-unit id="3ae5bcbdd398a604619aaaeb51aa862b049a9d28" translate="yes" xml:space="preserve">
          <source>Evaluating expressions within Edebug.</source>
          <target state="translated">Edebug内での表現の評価</target>
        </trans-unit>
        <trans-unit id="b918e0a59fc48b390462dde69196db2b275b9e40" translate="yes" xml:space="preserve">
          <source>Evaluating forms in the order they appear is the most common way control passes from one form to another. In some contexts, such as in a function body, this happens automatically. Elsewhere you must use a control structure construct to do this: &lt;code&gt;progn&lt;/code&gt;, the simplest control construct of Lisp.</source>
          <target state="translated">表示される順序でフォームを評価することは、制御が1つのフォームから別のフォームに渡される最も一般的な方法です。関数本体などの一部のコンテキストでは、これは自動的に行われます。他の場所では、これを行うために制御構造構造を使用する必要があります： &lt;code&gt;progn&lt;/code&gt; 、Lispの最も単純な制御構造。</target>
        </trans-unit>
        <trans-unit id="1f02356dc5a053f01ce62f7ea573a8acd290011b" translate="yes" xml:space="preserve">
          <source>Evaluating the preceding forms and typing, in any order,</source>
          <target state="translated">先行するフォームやタイピングを順不同で評価する。</target>
        </trans-unit>
        <trans-unit id="98fece8fcee58d0d1df092488c54d0e087d2e152" translate="yes" xml:space="preserve">
          <source>Evaluating this form in the buffer</source>
          <target state="translated">バッファ内でこのフォームを評価する</target>
        </trans-unit>
        <trans-unit id="dcb390f68e265f8b977b81b6d105d4c08a08a6cb" translate="yes" xml:space="preserve">
          <source>Evaluating this form will usually display</source>
          <target state="translated">このフォームを評価すると、通常は</target>
        </trans-unit>
        <trans-unit id="ff7513853508e7c6e3aa07908df2a450a026eb88" translate="yes" xml:space="preserve">
          <source>Evaluation</source>
          <target state="translated">Evaluation</target>
        </trans-unit>
        <trans-unit id="8ffcdfee5e7d21cf68ca5efead83afea63f2d8a0" translate="yes" xml:space="preserve">
          <source>Evaluation During Compilation</source>
          <target state="translated">コンパイル中の評価</target>
        </trans-unit>
        <trans-unit id="799e512ae5e7e3f329c10fa852a14d221c737ffd" translate="yes" xml:space="preserve">
          <source>Evaluation List Buffer</source>
          <target state="translated">評価リスト バッファ</target>
        </trans-unit>
        <trans-unit id="bb51b95ce0002371cb5ea49458cb059c57d93de5" translate="yes" xml:space="preserve">
          <source>Evaluation Notation</source>
          <target state="translated">評価表記法</target>
        </trans-unit>
        <trans-unit id="9f0ba46ba13ef1f25d98af8b19fda50c29d37fe0" translate="yes" xml:space="preserve">
          <source>Evaluation in textual order.</source>
          <target state="translated">テキスト順での評価。</target>
        </trans-unit>
        <trans-unit id="29381319eaf57dc01242c3c13cbf345a9abbd540" translate="yes" xml:space="preserve">
          <source>Evaluation in the scheme of things.</source>
          <target state="translated">物事の仕組みの中での評価。</target>
        </trans-unit>
        <trans-unit id="9a643d0c7814edf34f1de3bc48ce98cb63357e3a" translate="yes" xml:space="preserve">
          <source>Evaluation is a recursive process, and evaluating a form often involves evaluating parts within that form. For instance, when you evaluate a &lt;em&gt;function call&lt;/em&gt; form such as &lt;code&gt;(car x)&lt;/code&gt;, Emacs first evaluates the argument (the subform &lt;code&gt;x&lt;/code&gt;). After evaluating the argument, Emacs &lt;em&gt;executes&lt;/em&gt; the function (&lt;code&gt;car&lt;/code&gt;), and if the function is written in Lisp, execution works by evaluating the &lt;em&gt;body&lt;/em&gt; of the function (in this example, however, &lt;code&gt;car&lt;/code&gt; is not a Lisp function; it is a primitive function implemented in C). See &lt;a href=&quot;functions#Functions&quot;&gt;Functions&lt;/a&gt;, for more information about functions and function calls.</source>
          <target state="translated">評価は再帰的なプロセスであり、フォームの評価には、多くの場合、そのフォーム内のパーツの評価が含まれます。たとえば、 &lt;code&gt;(car x)&lt;/code&gt; などの&lt;em&gt;関数呼び出し&lt;/em&gt;フォームを評価する場合、Emacsは最初に引数（サブフォーム &lt;code&gt;x&lt;/code&gt; ）を評価します。引数を評価した後、Emacs&lt;em&gt;は&lt;/em&gt;関数（ &lt;code&gt;car&lt;/code&gt; ）を&lt;em&gt;実行し&lt;/em&gt;、関数がLispで記述されている場合、実行は関数の&lt;em&gt;本体&lt;/em&gt;を評価する&lt;em&gt;こと&lt;/em&gt;によって機能します（ただし、この例では、 &lt;code&gt;car&lt;/code&gt; はLisp関数ではなく、プリミティブ関数です。 Cで実装）。参照&lt;a href=&quot;functions#Functions&quot;&gt;関数を&lt;/a&gt;関数や関数呼び出しの詳細については、。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d705973d35f23ad5de4704455dc325a9d4eb170b" translate="yes" xml:space="preserve">
          <source>Evaluation of Function Forms</source>
          <target state="translated">機能形態の評価</target>
        </trans-unit>
        <trans-unit id="5ce5fe6e895057f002660fd14290d646f73a8b54" translate="yes" xml:space="preserve">
          <source>Evaluation of the expression &lt;code&gt;(indent-relative nil)&lt;/code&gt; produces the following:</source>
          <target state="translated">式 &lt;code&gt;(indent-relative nil)&lt;/code&gt; を評価すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="7438669b48311d2f5b2747b9726e0fd9a708feb9" translate="yes" xml:space="preserve">
          <source>Evaluation of the macro call begins like evaluation of a function call except for one crucial difference: the macro arguments are the actual expressions appearing in the macro call. They are not evaluated before they are given to the macro definition. By contrast, the arguments of a function are results of evaluating the elements of the function call list.</source>
          <target state="translated">マクロ呼び出しの評価は、関数呼び出しの評価と同じように開始されますが、1 つの決定的な違いがあることを除けば、マクロ引数は、マクロ呼び出しに現れる実際の式です。マクロ定義に与えられる前に評価されることはありません。対照的に、関数の引数は、関数呼び出しリストの要素を評価した結果です。</target>
        </trans-unit>
        <trans-unit id="90d64dd1d645e502be2e3c08d30a8451f928949d" translate="yes" xml:space="preserve">
          <source>Evaluation takes place in a context called the &lt;em&gt;environment&lt;/em&gt;, which consists of the current values and bindings of all Lisp variables (see &lt;a href=&quot;variables#Variables&quot;&gt;Variables&lt;/a&gt;).&lt;a href=&quot;#FOOT7&quot; name=&quot;DOCF7&quot;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; Whenever a form refers to a variable without creating a new binding for it, the variable evaluates to the value given by the current environment. Evaluating a form may also temporarily alter the environment by binding variables (see &lt;a href=&quot;local-variables#Local-Variables&quot;&gt;Local Variables&lt;/a&gt;).</source>
          <target state="translated">評価と呼ばれるコンテキスト内で行われる&lt;em&gt;環境&lt;/em&gt;のすべてのLisp変数の現在の値とのバインディングで構成され、（参照&lt;a href=&quot;variables#Variables&quot;&gt;変数&lt;/a&gt;）。&lt;a href=&quot;#FOOT7&quot; name=&quot;DOCF7&quot;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;フォームが新しいバインディングを作成せずに変数を参照する場合は常に、変数は現在の環境で指定された値に評価されます。フォームを評価すると、変数をバインドすることによって環境が一時的に変更される場合もあります（&lt;a href=&quot;local-variables#Local-Variables&quot;&gt;ローカル変数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="89441f5a56c1206182a2982f8b08988bca88d4b7" translate="yes" xml:space="preserve">
          <source>Even after a window is deleted, it continues to exist as a Lisp object, until there are no more references to it. Window deletion can be reversed, by restoring a saved window configuration (see &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;).</source>
          <target state="translated">ウィンドウが削除された後でも、ウィンドウへの参照がなくなるまで、ウィンドウはLispオブジェクトとして存在し続けます。ウィンドウの削除が保存されたウィンドウ構成を復元することによって、逆にすることができる（参照&lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;ウィンドウ構成を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="7f71e452bdad7f804fdef6528245b229c6279394" translate="yes" xml:space="preserve">
          <source>Even if &lt;var&gt;update&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;window-end&lt;/code&gt; does not attempt to scroll the display if point has moved off the screen, the way real redisplay would do. It does not alter the &lt;code&gt;window-start&lt;/code&gt; value. In effect, it reports where the displayed text will end if scrolling is not required. Note that the position it returns might be only partially visible.</source>
          <target state="translated">&lt;var&gt;update&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合でも、ポイントが画面から移動した場合、 &lt;code&gt;window-end&lt;/code&gt; は表示をスクロールしようとしません。これは、実際の再表示と同じ方法です。 &lt;code&gt;window-start&lt;/code&gt; 値は変更されません。実際には、スクロールが不要な場合、表示されたテキストがどこで終了するかを報告します。返される位置は部分的にしか表示されない場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="85d0a91348426929c95737dda6bb8f3081e1106c" translate="yes" xml:space="preserve">
          <source>Even if you do not use &lt;code&gt;make-temp-file&lt;/code&gt; to create the temporary file, you should still use this variable to decide which directory to put the file in. However, if you expect the file to be small, you should use &lt;code&gt;small-temporary-file-directory&lt;/code&gt; first if that is non-&lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make-temp-file&lt;/code&gt; を使用して一時ファイルを作成しない場合でも、この変数を使用してファイルを配置するディレクトリを決定する必要があります。ただし、ファイルが小さいと予想される場合は、 &lt;code&gt;small-temporary-file-directory&lt;/code&gt; を使用する必要があります。-file-ディレクトリ最初のものは、非の場合 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="029e5f7d89c36acc32829e229969b89a54ce98c6" translate="yes" xml:space="preserve">
          <source>Even more powerful is &lt;code&gt;redraw-display&lt;/code&gt;:</source>
          <target state="translated">さらに強力なのは &lt;code&gt;redraw-display&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="432fa854d420fdda2cde68b3678fc84324738837" translate="yes" xml:space="preserve">
          <source>Even though the code letter doesn&amp;rsquo;t use a prompt string, you must follow it with a newline if it is not the last code character in the string.</source>
          <target state="translated">コード文字はプロンプト文字列を使用していませんが、文字列の最後のコード文字でない場合は、改行を続ける必要があります。</target>
        </trans-unit>
        <trans-unit id="85560a7fc3cf7e747fea690e0afc513f6846e642" translate="yes" xml:space="preserve">
          <source>Even though this is not a normal hook, you can use &lt;code&gt;add-hook&lt;/code&gt; and &lt;code&gt;remove-hook&lt;/code&gt; to manipulate the list. See &lt;a href=&quot;hooks#Hooks&quot;&gt;Hooks&lt;/a&gt;.</source>
          <target state="translated">これは通常のフックではありませんが、 &lt;code&gt;add-hook&lt;/code&gt; と &lt;code&gt;remove-hook&lt;/code&gt; を使用してリストを操作できます。&lt;a href=&quot;hooks#Hooks&quot;&gt;フックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="37dfaec8f5a98d8e1a6fff0d00abd7c86770b663" translate="yes" xml:space="preserve">
          <source>Even when lexical binding is enabled, certain variables will continue to be dynamically bound. These are called &lt;em&gt;special variables&lt;/em&gt;. Every variable that has been defined with &lt;code&gt;defvar&lt;/code&gt;, &lt;code&gt;defcustom&lt;/code&gt; or &lt;code&gt;defconst&lt;/code&gt; is a special variable (see &lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;Defining Variables&lt;/a&gt;). All other variables are subject to lexical binding.</source>
          <target state="translated">字句バインディングが有効になっている場合でも、特定の変数は引き続き動的にバインドされます。これらは&lt;em&gt;特殊変数&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;defvar&lt;/code&gt; 、 &lt;code&gt;defcustom&lt;/code&gt; 、または &lt;code&gt;defconst&lt;/code&gt; で定義されたすべての変数は、特別な変数です（変数の&lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;定義を&lt;/a&gt;参照）。他のすべての変数は、字句バインディングの対象となります。</target>
        </trans-unit>
        <trans-unit id="1a444451a6bf3653aee29ba02a88a7a4286cfd3c" translate="yes" xml:space="preserve">
          <source>Event Examples</source>
          <target state="translated">イベントの例</target>
        </trans-unit>
        <trans-unit id="04a0457b5051e01d35a084a34427af2e0f933cb3" translate="yes" xml:space="preserve">
          <source>Events processed immediately and individually.</source>
          <target state="translated">イベントはすぐに個別に処理されます。</target>
        </trans-unit>
        <trans-unit id="dfd77cb42dcfdf913a9b2993fc51c80aff807ab1" translate="yes" xml:space="preserve">
          <source>Events read from this list are not normally added to the current command&amp;rsquo;s key sequence (as returned by, e.g., &lt;code&gt;this-command-keys&lt;/code&gt;), as the events will already have been added once as they were read for the first time. An element of the form &lt;code&gt;(t&amp;nbsp;.&amp;nbsp;&lt;var&gt;event&lt;/var&gt;)&lt;/code&gt; forces &lt;var&gt;event&lt;/var&gt; to be added to the current command&amp;rsquo;s key sequence.</source>
          <target state="translated">このリストから読み取られたイベントは、通常、現在のコマンドのキーシーケンスに追加されません（たとえば、 &lt;code&gt;this-command-keys&lt;/code&gt; によって返されます）。これは、イベントが最初に読み取られたときにすでに追加されているためです。フォーム &lt;code&gt;(t&amp;nbsp;.&amp;nbsp;&lt;var&gt;event&lt;/var&gt;)&lt;/code&gt; の要素は、 &lt;var&gt;event&lt;/var&gt; を現在のコマンドのキーシーケンスに強制的に追加します。</target>
        </trans-unit>
        <trans-unit id="a4137474199ffe7887e4815646c84fc0febba656" translate="yes" xml:space="preserve">
          <source>Every button has a &lt;em&gt;button type&lt;/em&gt;, which defines default values for the button&amp;rsquo;s properties. Button types are arranged in a hierarchy, with specialized types inheriting from more general types, so that it&amp;rsquo;s easy to define special-purpose types of buttons for specific tasks.</source>
          <target state="translated">すべてのボタンには&lt;em&gt;ボタンタイプ&lt;/em&gt;があり、ボタンのプロパティのデフォルト値を定義します。ボタンタイプは階層に配置されており、特殊なタイプはより一般的なタイプから継承されているため、特定のタスク用の専用のボタンタイプを簡単に定義できます。</target>
        </trans-unit>
        <trans-unit id="dd5e71774a4e19fa74784e55cff6c970e9e3dc4c" translate="yes" xml:space="preserve">
          <source>Every coding system specifies a particular set of character code conversions, but the coding system &lt;code&gt;undecided&lt;/code&gt; is special: it leaves the choice unspecified, to be chosen heuristically for each file, based on the file&amp;rsquo;s data. The coding system &lt;code&gt;prefer-utf-8&lt;/code&gt; is like &lt;code&gt;undecided&lt;/code&gt;, but it prefers to choose &lt;code&gt;utf-8&lt;/code&gt; when possible.</source>
          <target state="translated">すべてのコーディングシステムは特定の文字コード変換のセットを指定しますが、 &lt;code&gt;undecided&lt;/code&gt; のコーディングシステムは特別です。ファイルのデータに基づいてファイルごとにヒューリスティックに選択されるように、選択は指定されません。コーディングシステム &lt;code&gt;prefer-utf-8&lt;/code&gt; は &lt;code&gt;undecided&lt;/code&gt; ようなものですが、可能な場合は &lt;code&gt;utf-8&lt;/code&gt; を選択することを好みます。</target>
        </trans-unit>
        <trans-unit id="bc949dcffe18c4c6f376934cb6d379922c86061f" translate="yes" xml:space="preserve">
          <source>Every dynamic module should export a C-callable function named &lt;code&gt;emacs_module_init&lt;/code&gt;, which Emacs will call as part of the call to &lt;code&gt;load&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; which loads the module. It should also export a symbol named &lt;code&gt;plugin_is_GPL_compatible&lt;/code&gt; to indicate that its code is released under the GPL or compatible license; Emacs will signal an error if your program tries to load modules that don&amp;rsquo;t export such a symbol.</source>
          <target state="translated">すべての動的モジュールは、指定されたC-呼び出し可能な関数でエクスポートする必要があり &lt;code&gt;emacs_module_init&lt;/code&gt; Emacsがへの呼び出しの一部として呼び出されます、 &lt;code&gt;load&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; モジュールをロードするに。また、 &lt;code&gt;plugin_is_GPL_compatible&lt;/code&gt; という名前のシンボルをエクスポートして、そのコードがGPLまたは互換性のあるライセンスの下でリリースされていることを示す必要があります。プログラムがそのようなシンボルをエクスポートしないモジュールをロードしようとすると、Emacsはエラーを通知します。</target>
        </trans-unit>
        <trans-unit id="5f7cc4e86bc2ba0c7806f0619e98d104b5a79730" translate="yes" xml:space="preserve">
          <source>Every error specifies an error message, one way or another. The message should state what is wrong (&amp;ldquo;File does not exist&amp;rdquo;), not how things ought to be (&amp;ldquo;File must exist&amp;rdquo;). The convention in Emacs Lisp is that error messages should start with a capital letter, but should not end with any sort of punctuation.</source>
          <target state="translated">すべてのエラーは、何らかの方法でエラーメッセージを指定します。メッセージには、問題の内容（「ファイルが存在する必要がある」）ではなく、何が問題であるか（「ファイルが存在しない」）が記載されている必要があります。Emacs Lispの慣例では、エラーメッセージは大文字で始める必要がありますが、句読点で終わることはできません。</target>
        </trans-unit>
        <trans-unit id="79a80a71bc9146d2a7362b5b3df1e59c55f3d35d" translate="yes" xml:space="preserve">
          <source>Every event has an &lt;em&gt;event type&lt;/em&gt;, which classifies the event for key binding purposes. For a keyboard event, the event type equals the event value; thus, the event type for a character is the character, and the event type for a function key symbol is the symbol itself. For events that are lists, the event type is the symbol in the &lt;small&gt;CAR&lt;/small&gt; of the list. Thus, the event type is always a symbol or a character.</source>
          <target state="translated">すべてのイベントには&lt;em&gt;イベントタイプ&lt;/em&gt;があり、キーバインディングの目的でイベントを分類します。キーボードイベントの場合、イベントタイプはイベント値と同じです。したがって、文字のイベントタイプは文字であり、ファンクションキーシンボルのイベントタイプはシンボル自体です。リストであるイベントの場合、イベントタイプはリストの&lt;small&gt;CAR&lt;/small&gt;内のシンボルです。したがって、イベントタイプは常にシンボルまたは文字です。</target>
        </trans-unit>
        <trans-unit id="2c51bf37d933cb478063153751844a975d4a56fa" translate="yes" xml:space="preserve">
          <source>Every frame has a &lt;code&gt;name&lt;/code&gt; parameter; this serves as the default for the frame title which window systems typically display at the top of the frame. You can specify a name explicitly by setting the &lt;code&gt;name&lt;/code&gt; frame property.</source>
          <target state="translated">すべてのフレームには &lt;code&gt;name&lt;/code&gt; パラメーターがあります。これは、ウィンドウシステムが通常フレームの上部に表示するフレームタイトルのデフォルトとして機能します。 &lt;code&gt;name&lt;/code&gt; frameプロパティを設定することにより、名前を明示的に指定できます。</target>
        </trans-unit>
        <trans-unit id="be6e27f4ca0ea0fc906e0595ff83ffbfacac687a" translate="yes" xml:space="preserve">
          <source>Every function added with &lt;code&gt;add-function&lt;/code&gt; can be accompanied by an association list of properties &lt;var&gt;props&lt;/var&gt;. Currently only two of those properties have a special meaning:</source>
          <target state="translated">追加されるすべての機能を &lt;code&gt;add-function&lt;/code&gt; プロパティの連想リストを伴うことができる &lt;var&gt;props&lt;/var&gt; 。現在、これらのプロパティのうち特別な意味を持つのは2つだけです。</target>
        </trans-unit>
        <trans-unit id="17f75ba86886ee6d09b995da57d98781626b332d" translate="yes" xml:space="preserve">
          <source>Every major mode command begins by calling this function, which has the effect of switching to Fundamental mode and erasing most of the effects of the previous major mode. To ensure that this does its job, the variables that major modes set should not be marked permanent.</source>
          <target state="translated">すべてのメジャーモードコマンドは、この関数を呼び出すことで始まります。この関数は、ファンダメンタルモードに切り替わり、前のメジャーモードの効果のほとんどを消去します。この機能を確実に実行するために、メジャーモードが設定する変数は永久的なものにしてはいけません。</target>
        </trans-unit>
        <trans-unit id="55faf3a67a23e694ebebf47d4073204f615bb078" translate="yes" xml:space="preserve">
          <source>Every major mode command is supposed to run a normal hook called the &lt;em&gt;mode hook&lt;/em&gt; as one of the last steps of initialization. This makes it easy for a user to customize the behavior of the mode, by overriding the buffer-local variable assignments already made by the mode. Most minor mode functions also run a mode hook at the end. But hooks are used in other contexts too. For example, the hook &lt;code&gt;suspend-hook&lt;/code&gt; runs just before Emacs suspends itself (see &lt;a href=&quot;suspending-emacs#Suspending-Emacs&quot;&gt;Suspending Emacs&lt;/a&gt;).</source>
          <target state="translated">すべてのメジャーモードコマンドは、初期化の最後のステップの1つとして、&lt;em&gt;モードフック&lt;/em&gt;と呼ばれる通常のフックを実行することになっています。これにより、ユーザーは、モードによって既に行われたバッファーローカル変数の割り当てをオーバーライドすることにより、モードの動作を簡単にカスタマイズできます。ほとんどのマイナーモード関数は、最後にモードフックも実行します。しかし、フックは他のコンテキストでも使用されます。例えば、フックは &lt;code&gt;suspend-hook&lt;/code&gt; Emacsが自身を一時停止する直前に（参照の実行を&lt;a href=&quot;suspending-emacs#Suspending-Emacs&quot;&gt;一時停止にEmacsを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="672f6ad74690ed9ca85e43781c95747abb81b4ff" translate="yes" xml:space="preserve">
          <source>Every major mode command should finish by running the mode-independent normal hook &lt;code&gt;change-major-mode-after-body-hook&lt;/code&gt;, its mode hook, and the normal hook &lt;code&gt;after-change-major-mode-hook&lt;/code&gt;. It does this by calling &lt;code&gt;run-mode-hooks&lt;/code&gt;. If the major mode is a derived mode, that is if it calls another major mode (the parent mode) in its body, it should do this inside &lt;code&gt;delay-mode-hooks&lt;/code&gt; so that the parent won&amp;rsquo;t run these hooks itself. Instead, the derived mode&amp;rsquo;s call to &lt;code&gt;run-mode-hooks&lt;/code&gt; runs the parent&amp;rsquo;s mode hook too. See &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;Major Mode Conventions&lt;/a&gt;.</source>
          <target state="translated">すべてのメジャーモードコマンドは、モードに依存しない通常のフック &lt;code&gt;change-major-mode-after-body-hook&lt;/code&gt; 、そのモードフック、および通常のフック &lt;code&gt;after-change-major-mode-hook&lt;/code&gt; を実行して終了する必要があります。これは、 &lt;code&gt;run-mode-hooks&lt;/code&gt; を呼び出すことによって行われます。メジャーモードが派生モードである場合、つまり本体で別のメジャーモード（親モード）を呼び出す場合は、 &lt;code&gt;delay-mode-hooks&lt;/code&gt; 内でこれを実行して、親がこれらのフック自体を実行しないようにする必要があります。代わりに、派生モードの &lt;code&gt;run-mode-hooks&lt;/code&gt; の呼び出しは、親のモードフックも実行します。&lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;メジャーモードの規則を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1c9653498e3b20cbe78e73bc0fdc2179df100df9" translate="yes" xml:space="preserve">
          <source>Every object belongs to at least one type. Objects of the same type have similar structures and may usually be used in the same contexts. Types can overlap, and objects can belong to two or more types. Consequently, we can ask whether an object belongs to a particular type, but not for &lt;em&gt;the&lt;/em&gt; type of an object.</source>
          <target state="translated">すべてのオブジェクトは、少なくとも1つのタイプに属しています。同じタイプのオブジェクトは同様の構造を持ち、通常は同じコンテキストで使用できます。タイプは重複する可能性があり、オブジェクトは2つ以上のタイプに属することができます。その結果、我々はなく、ため、オブジェクトが特定の型に属しているかどうかを尋ねることができるオブジェクトのタイプ。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="741e3f11f682581bbfa9d4ff31815dc0fd76e81e" translate="yes" xml:space="preserve">
          <source>Every prefix of &lt;var&gt;key&lt;/var&gt; must be a prefix key (i.e., bound to a keymap) or undefined; otherwise an error is signaled. If some prefix of &lt;var&gt;key&lt;/var&gt; is undefined, then &lt;code&gt;define-key&lt;/code&gt; defines it as a prefix key so that the rest of &lt;var&gt;key&lt;/var&gt; can be defined as specified.</source>
          <target state="translated">&lt;var&gt;key&lt;/var&gt; すべてのプレフィックスは、プレフィックスキー（つまり、キーマップにバインドされている）または未定義である必要があります。それ以外の場合は、エラーが通知されます。 &lt;var&gt;key&lt;/var&gt; 一部のプレフィックスが未定義の場合、 &lt;code&gt;define-key&lt;/code&gt; はそれをプレフィックスキーとして定義し、残りの &lt;var&gt;key&lt;/var&gt; を指定どおりに定義できるようにします。</target>
        </trans-unit>
        <trans-unit id="15e2f567ff3384e03f5cd1704a548718ea84af68" translate="yes" xml:space="preserve">
          <source>Every process also has a property list that you can use to store miscellaneous values associated with the process.</source>
          <target state="translated">すべてのプロセスは、プロセスに関連付けられた雑多な値を保存するために使用できるプロパティ・リストも持っています。</target>
        </trans-unit>
        <trans-unit id="9348b58eef15df85250fac36cefc612c81471e8c" translate="yes" xml:space="preserve">
          <source>Every successful search sets the match data. Therefore, you should query the match data immediately after searching, before calling any other function that might perform another search. Alternatively, you may save and restore the match data (see &lt;a href=&quot;saving-match-data#Saving-Match-Data&quot;&gt;Saving Match Data&lt;/a&gt;) around the call to functions that could perform another search. Or use the functions that explicitly do not modify the match data; e.g., &lt;code&gt;string-match-p&lt;/code&gt;.</source>
          <target state="translated">検索が成功するたびに、一致データが設定されます。したがって、別の検索を実行する可能性のある他の関数を呼び出す前に、検索直後に一致データをクエリする必要があります。または、別の検索を実行できる関数の呼び出しの前後で、一致データを保存および復元することもできます（一致データの&lt;a href=&quot;saving-match-data#Saving-Match-Data&quot;&gt;保存を&lt;/a&gt;参照）。または、一致データを明示的に変更しない関数を使用します。例： &lt;code&gt;string-match-p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf2a849c7b6f42e5bfdaf89a7b78d380bfa41cce" translate="yes" xml:space="preserve">
          <source>Every warning has a textual message, which explains the problem for the user, and a &lt;em&gt;severity level&lt;/em&gt; which is a symbol. Here are the possible severity levels, in order of decreasing severity, and their meanings:</source>
          <target state="translated">すべての警告には、ユーザーの問題を説明するテキストメッセージと、記号である&lt;em&gt;重大度レベル&lt;/em&gt;があります。重大度の高い順に、可能な重大度レベルとその意味を次に示します。</target>
        </trans-unit>
        <trans-unit id="b06efe9605d2c90f007fc010872332a9b840961c" translate="yes" xml:space="preserve">
          <source>Examining Buffer Contents</source>
          <target state="translated">バッファの内容を調べる</target>
        </trans-unit>
        <trans-unit id="45de05e58932916bd458b107b6343320f7d62237" translate="yes" xml:space="preserve">
          <source>Examining Text Near Point</source>
          <target state="translated">ポイント付近のテキストを調べる</target>
        </trans-unit>
        <trans-unit id="0ef602781fba6e74f50b4c878856bf68c5243da7" translate="yes" xml:space="preserve">
          <source>Examining Text Properties</source>
          <target state="translated">テキストのプロパティを調べる</target>
        </trans-unit>
        <trans-unit id="ffc4525aba86e7e1e32a1dab1de11593e19e93f5" translate="yes" xml:space="preserve">
          <source>Examining and changing text in buffers.</source>
          <target state="translated">バッファ内のテキストを調べたり、変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="56da633be7707f1febca2c7cdb6540149025c566" translate="yes" xml:space="preserve">
          <source>Examining text in a general fashion.</source>
          <target state="translated">テキストを一般的に吟味すること。</target>
        </trans-unit>
        <trans-unit id="7fcc7cce4f2ee556e73fd69281d3f8ec3d660954" translate="yes" xml:space="preserve">
          <source>Examining text in the vicinity of point.</source>
          <target state="translated">ポイント付近のテキストを吟味する。</target>
        </trans-unit>
        <trans-unit id="1810f73a9a2cf8433323cb7d681a9b461da5f4b3" translate="yes" xml:space="preserve">
          <source>Examining values of variables whose names are known only at run time.</source>
          <target state="translated">実行時にしか名前が分からない変数の値を調べます。</target>
        </trans-unit>
        <trans-unit id="000637ace4c7e7e66d920473418818b732694e21" translate="yes" xml:space="preserve">
          <source>Example of using Ewoc.</source>
          <target state="translated">Ewocの使用例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="42589f3ebaf21a748c64768b7db98352cce25abd" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;(= 42)&lt;/code&gt; In this example, the function is &lt;code&gt;=&lt;/code&gt;, &lt;var&gt;n&lt;/var&gt; is one, and the actual function call becomes: &lt;code&gt;(=&amp;nbsp;42&amp;nbsp;&lt;var&gt;expval&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;(= 42)&lt;/code&gt; この例では、関数は &lt;code&gt;=&lt;/code&gt; 、 &lt;var&gt;n&lt;/var&gt; は1であり、実際の関数呼び出しは次のようになります： &lt;code&gt;(=&amp;nbsp;42&amp;nbsp;&lt;var&gt;expval&lt;/var&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c88d90029667f9c1b344d2029b2e93ff4a4a6be8" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;(lambda (n) (= 42 n))&lt;/code&gt;</source>
          <target state="translated">例:( &lt;code&gt;(lambda (n) (= 42 n))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ad16a009e86ef75fd3de8e2ad5f092a5fca883d" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;integerp&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;integerp&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24b7ed5ddb195050534d0fab31090b455e27e26a" translate="yes" xml:space="preserve">
          <source>Example: Advantage Over &lt;code&gt;cl-case&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;cl-case&lt;/code&gt; に対する利点</target>
        </trans-unit>
        <trans-unit id="3ad7525bc727bae6ac350fa4ed968eaf0ca64284" translate="yes" xml:space="preserve">
          <source>Example: Reformulation with &lt;code&gt;pcase&lt;/code&gt;</source>
          <target state="translated">例：pcaseによる &lt;code&gt;pcase&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e097d720176885bcac5b1b5a1c82a40e2515d3c" translate="yes" xml:space="preserve">
          <source>Example: Using &lt;code&gt;and&lt;/code&gt;</source>
          <target state="translated">例：使用する &lt;code&gt;and&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08d2dd1f8c7a3d92fa37946a0f154ebb3d4070aa" translate="yes" xml:space="preserve">
          <source>Examples in this manual indicate printed text with &amp;lsquo;</source>
          <target state="translated">このマニュアルの例は、 'で印刷されたテキストを示しています</target>
        </trans-unit>
        <trans-unit id="03eb4cb803b87579b4c90d6f201fca238d7fda68" translate="yes" xml:space="preserve">
          <source>Examples of Lisp code are formatted like this: &lt;code&gt;(list 1 2 3)&lt;/code&gt;. Names that represent metasyntactic variables, or arguments to a function being described, are formatted like this: &lt;var&gt;first-number&lt;/var&gt;.</source>
          <target state="translated">Lispコードの例は次のようにフォーマットされています:( &lt;code&gt;(list 1 2 3)&lt;/code&gt; 。メタ構文変数を表す名前、または記述されている関数の引数は、 &lt;var&gt;first-number&lt;/var&gt; ようにフォーマットされます：first-number。</target>
        </trans-unit>
        <trans-unit id="9994e088a00d8a86302cb44924d52af48350bbaf" translate="yes" xml:space="preserve">
          <source>Examples of Using interactive</source>
          <target state="translated">対話型の使用例</target>
        </trans-unit>
        <trans-unit id="94acd1dafcec67a5c71f53fbacda5ace7493adce" translate="yes" xml:space="preserve">
          <source>Examples of catch and throw</source>
          <target state="translated">キャッチ&amp;スローの例</target>
        </trans-unit>
        <trans-unit id="924f7fb06848c12124360cb9472532a6fc0fd107" translate="yes" xml:space="preserve">
          <source>Examples of how to read interactive arguments.</source>
          <target state="translated">対話型引数の読み方の例。</target>
        </trans-unit>
        <trans-unit id="0bf2185579aee4ae51b375504b158484ef051f7f" translate="yes" xml:space="preserve">
          <source>Examples of the lists for mouse events.</source>
          <target state="translated">マウスイベント用のリストの例です。</target>
        </trans-unit>
        <trans-unit id="0856690c7b7cf58d003b7c079a6b26fd94d77bca" translate="yes" xml:space="preserve">
          <source>Examples to explain the precedence of action functions.</source>
          <target state="translated">行動機能の優先順位を説明する例</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="ea83b89ce972bd83b6987e662353810d2585216a" translate="yes" xml:space="preserve">
          <source>Except where noted, these functions also accept internal windows as arguments. Resizing an internal window causes its child windows to be resized to fit the same space.</source>
          <target state="translated">特に断りのない限り、これらの関数は内部ウィンドウを引数として受け取ることもできます。内部ウィンドウのサイズを変更すると、その子ウィンドウは同じスペースに収まるようにサイズ変更されます。</target>
        </trans-unit>
        <trans-unit id="514c2777c3336bd01dec12407d7149cf0ec4b13b" translate="yes" xml:space="preserve">
          <source>Excess Close Parentheses</source>
          <target state="translated">過剰な閉じ括弧</target>
        </trans-unit>
        <trans-unit id="4329f0811884f882f9183865d3de5482e9905a4d" translate="yes" xml:space="preserve">
          <source>Excess Open Parentheses</source>
          <target state="translated">余ったオープンカッコ</target>
        </trans-unit>
        <trans-unit id="6996ee18eb4fe50e65e1865f16079fb735e17b31" translate="yes" xml:space="preserve">
          <source>Exclude minibuffer-only frames.</source>
          <target state="translated">ミニバッファのみのフレームを除外します。</target>
        </trans-unit>
        <trans-unit id="102dbcf894945a5c748834e8214903c96d894d18" translate="yes" xml:space="preserve">
          <source>Excursions</source>
          <target state="translated">Excursions</target>
        </trans-unit>
        <trans-unit id="a4832fdf2fe9ae09bb2f1073e96b0875872b2167" translate="yes" xml:space="preserve">
          <source>Execute &lt;code&gt;(require '&lt;var&gt;feature&lt;/var&gt;)&lt;/code&gt; when your saved customizations set the value of this item. &lt;var&gt;feature&lt;/var&gt; should be a symbol.</source>
          <target state="translated">保存したカスタマイズでこのアイテムの値が設定されたら、実行 &lt;code&gt;(require '&lt;var&gt;feature&lt;/var&gt;)&lt;/code&gt; します。 &lt;var&gt;feature&lt;/var&gt; はシンボルである必要があります。</target>
        </trans-unit>
        <trans-unit id="e05b25ea5b95dc62329004b221749a289d2253d2" translate="yes" xml:space="preserve">
          <source>Execute &lt;var&gt;body&lt;/var&gt; once for each element of &lt;var&gt;list&lt;/var&gt;, on each iteration performing a destructuring binding of variables in &lt;var&gt;pattern&lt;/var&gt; to the values of the corresponding subfields of the element of &lt;var&gt;list&lt;/var&gt;. The bindings are performed as if by &lt;code&gt;pcase-let&lt;/code&gt;. When &lt;var&gt;pattern&lt;/var&gt; is a simple variable, this ends up being equivalent to &lt;code&gt;dolist&lt;/code&gt; (see &lt;a href=&quot;iteration#Iteration&quot;&gt;Iteration&lt;/a&gt;).</source>
          <target state="translated">実行 &lt;var&gt;body&lt;/var&gt; 一度の各要素の &lt;var&gt;list&lt;/var&gt; 内の変数のバインディング非構造行う各反復で、 &lt;var&gt;pattern&lt;/var&gt; の要素の対応するサブフィールドの値に &lt;var&gt;list&lt;/var&gt; 。バインディングは、 &lt;code&gt;pcase-let&lt;/code&gt; のように実行されます。ときに &lt;var&gt;pattern&lt;/var&gt; 単純な変数である、と等価である最大この端 &lt;code&gt;dolist&lt;/code&gt; は（参照&lt;a href=&quot;iteration#Iteration&quot;&gt;反復を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="f5bd2d24d188437ee6eefc900e5ffaee2dccd4a0" translate="yes" xml:space="preserve">
          <source>Execute &lt;var&gt;body&lt;/var&gt; pretending it does not modify the buffer. This includes checking whether the buffer&amp;rsquo;s file is locked (see &lt;a href=&quot;file-locks#File-Locks&quot;&gt;File Locks&lt;/a&gt;), running buffer modification hooks (see &lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;Change Hooks&lt;/a&gt;), etc. Note that if &lt;var&gt;body&lt;/var&gt; actually modifies the buffer text, its undo data may become corrupted.</source>
          <target state="translated">バッファを変更しないふりをして &lt;var&gt;body&lt;/var&gt; を実行します。これは、バッファのファイルがロックされているかどうかチェックも含まれます（&lt;a href=&quot;file-locks#File-Locks&quot;&gt;ファイルロックを&lt;/a&gt;（参照バッファ修正のフックを実行している、）&lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;変更フック&lt;/a&gt;など）場合は、その注意 &lt;var&gt;body&lt;/var&gt; 、実際にバッファのテキストを変更し、そのアンドゥのデータが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="cde77cd352d5005fa89463ae64af4ea589ac7e5d" translate="yes" xml:space="preserve">
          <source>Execute &lt;var&gt;body&lt;/var&gt;, but give up after &lt;var&gt;seconds&lt;/var&gt; seconds. If &lt;var&gt;body&lt;/var&gt; finishes before the time is up, &lt;code&gt;with-timeout&lt;/code&gt; returns the value of the last form in &lt;var&gt;body&lt;/var&gt;. If, however, the execution of &lt;var&gt;body&lt;/var&gt; is cut short by the timeout, then &lt;code&gt;with-timeout&lt;/code&gt; executes all the &lt;var&gt;timeout-forms&lt;/var&gt; and returns the value of the last of them.</source>
          <target state="translated">&lt;var&gt;body&lt;/var&gt; 実行しますが、 &lt;var&gt;seconds&lt;/var&gt; 秒後にあきらめます。時間が経過する前に &lt;var&gt;body&lt;/var&gt; が終了した場合、 &lt;code&gt;with-timeout&lt;/code&gt; は &lt;var&gt;body&lt;/var&gt; の最後のフォームの値を返します。ただし、 &lt;var&gt;body&lt;/var&gt; の実行がタイムアウトによって短縮された場合、 &lt;code&gt;with-timeout&lt;/code&gt; はすべての &lt;var&gt;timeout-forms&lt;/var&gt; を実行し、最後のフォームの値を返します。</target>
        </trans-unit>
        <trans-unit id="fd13bad071682649e8d24fe41b2c2501dc4dc2ba" translate="yes" xml:space="preserve">
          <source>Executing &lt;code&gt;throw&lt;/code&gt; exits all Lisp constructs up to the matching &lt;code&gt;catch&lt;/code&gt;, including function calls. When binding constructs such as &lt;code&gt;let&lt;/code&gt; or function calls are exited in this way, the bindings are unbound, just as they are when these constructs exit normally (see &lt;a href=&quot;local-variables#Local-Variables&quot;&gt;Local Variables&lt;/a&gt;). Likewise, &lt;code&gt;throw&lt;/code&gt; restores the buffer and position saved by &lt;code&gt;save-excursion&lt;/code&gt; (see &lt;a href=&quot;excursions#Excursions&quot;&gt;Excursions&lt;/a&gt;), and the narrowing status saved by &lt;code&gt;save-restriction&lt;/code&gt;. It also runs any cleanups established with the &lt;code&gt;unwind-protect&lt;/code&gt; special form when it exits that form (see &lt;a href=&quot;cleanups#Cleanups&quot;&gt;Cleanups&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; を実行すると、関数呼び出しを含め、一致する &lt;code&gt;catch&lt;/code&gt; までのすべてのLisp構造が終了します。 &lt;code&gt;let&lt;/code&gt; やfunction呼び出しなどのバインディング構造がこのように終了すると、これらの構造が正常に終了するときと同じように、バインディングはバインド解除されます（&lt;a href=&quot;local-variables#Local-Variables&quot;&gt;ローカル変数を&lt;/a&gt;参照）。同様に、 &lt;code&gt;throw&lt;/code&gt; は、 &lt;code&gt;save-excursion&lt;/code&gt; （&lt;a href=&quot;excursions#Excursions&quot;&gt;Excursionsを&lt;/a&gt;参照）によって保存されたバッファーと位置、および &lt;code&gt;save-restriction&lt;/code&gt; によって保存されたナローイングステータスを復元します。それはまたで確立任意のクリーンアップ実行さ &lt;code&gt;unwind-protect&lt;/code&gt; は、それがその形（参照出たときに、特別なフォームを&lt;a href=&quot;cleanups#Cleanups&quot;&gt;クリーンアップ&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d74bb2e60e4d3fb084ead764f7b15124485c059e" translate="yes" xml:space="preserve">
          <source>Executing a program can also try adding suffixes to the specified name:</source>
          <target state="translated">プログラムを実行すると、指定した名前にサフィックスを付けてみることもできます。</target>
        </trans-unit>
        <trans-unit id="ebee3b642b4f0ebb9781d2c0a16802f1c2e57b30" translate="yes" xml:space="preserve">
          <source>Executing commands within Edebug can change the key sequence that would be returned by &lt;code&gt;this-command-keys&lt;/code&gt;, and there is no way to reset the key sequence from Lisp.</source>
          <target state="translated">Edebug内でコマンドを実行すると、 &lt;code&gt;this-command-keys&lt;/code&gt; によって返されるキーシーケンスが変更される可能性があり、Lispからキーシーケンスをリセットする方法はありません。</target>
        </trans-unit>
        <trans-unit id="1e481e9e93ff9fde3c47da4e2f9bd0a8821d11ef" translate="yes" xml:space="preserve">
          <source>Executing the function itself evaluates its body; this does involve symbol function indirection when calling &lt;code&gt;erste&lt;/code&gt;.</source>
          <target state="translated">関数自体を実行すると、その本体が評価されます。これには、 &lt;code&gt;erste&lt;/code&gt; を呼び出すときにシンボル関数の間接参照が含まれます。</target>
        </trans-unit>
        <trans-unit id="14e5e55e3c46fc56ef37e001f4826a1009a88b69" translate="yes" xml:space="preserve">
          <source>Execution modes, stopping more or less often.</source>
          <target state="translated">実行モード、多かれ少なかれ停止します。</target>
        </trans-unit>
        <trans-unit id="97b908e56c8affb6f198ab184ff139df70822588" translate="yes" xml:space="preserve">
          <source>Exit the debugger and continue execution. This resumes execution of the program as if the debugger had never been entered (aside from any side-effects that you caused by changing variable values or data structures while inside the debugger).</source>
          <target state="translated">デバッガを終了して実行を続行します。これは、デバッガが入力されていないかのようにプログラムの実行を再開します (デバッガ内部で変数値やデータ構造を変更したことによる副作用は別として)。</target>
        </trans-unit>
        <trans-unit id="4da4762e60930fee76bfddad9df8fddb66bc010b" translate="yes" xml:space="preserve">
          <source>Exited</source>
          <target state="translated">Exited</target>
        </trans-unit>
        <trans-unit id="8999a6a28c3f6fde180e5adb92439670504be038" translate="yes" xml:space="preserve">
          <source>Exiting Emacs irreversibly.</source>
          <target state="translated">不可逆的にEmacsを終了する。</target>
        </trans-unit>
        <trans-unit id="e40779f9dbf7b9155821dddbd56974aefa46b434" translate="yes" xml:space="preserve">
          <source>Exiting Emacs reversibly.</source>
          <target state="translated">Emacsを可逆的に終了する。</target>
        </trans-unit>
        <trans-unit id="2a714eb1094cc86f04db1a930bf20e2cc4723b6e" translate="yes" xml:space="preserve">
          <source>Expand all the forms abbreviated with &amp;ldquo;...&amp;rdquo; in the frame at point.</source>
          <target state="translated">フレーム内の「...」で省略されたすべてのフォームをポイントで展開します。</target>
        </trans-unit>
        <trans-unit id="c39165889ae82de3f3543cbdf660f6e4a5da6438" translate="yes" xml:space="preserve">
          <source>Expanding</source>
          <target state="translated">Expanding</target>
        </trans-unit>
        <trans-unit id="4c742e3f2d52d838216750f0562eaf969f0a39f0" translate="yes" xml:space="preserve">
          <source>Expansion of a Macro Call</source>
          <target state="translated">マクロ呼び出しの拡張</target>
        </trans-unit>
        <trans-unit id="6ca590c42a4d990c1e2fa2ffaa567f1164a66dcf" translate="yes" xml:space="preserve">
          <source>Explanation of terms we use in this manual.</source>
          <target state="translated">本マニュアルで使用している用語の説明</target>
        </trans-unit>
        <trans-unit id="5fdf6d25bdf76c29c879fee3e893bfe3162da24c" translate="yes" xml:space="preserve">
          <source>Explicit Encoding and Decoding</source>
          <target state="translated">明示的な符号化と復号化</target>
        </trans-unit>
        <trans-unit id="2bdf1bdb932b1c4ad868d411e4ded7400f765e63" translate="yes" xml:space="preserve">
          <source>Explicit Entry to the Debugger</source>
          <target state="translated">デバッガへの明示的な入力</target>
        </trans-unit>
        <trans-unit id="9a007c1d995b6d8073a9bc77022ebe07a3a0f5f8" translate="yes" xml:space="preserve">
          <source>Explicit Nonlocal Exits: catch and throw</source>
          <target state="translated">明示的な非局所的出口:キャッチ&amp;スロー</target>
        </trans-unit>
        <trans-unit id="1ad1ce0b3e7833459b128fbf4ce571d7a46890bd" translate="yes" xml:space="preserve">
          <source>Explicit control structures make possible an order of execution other than sequential.</source>
          <target state="translated">明示的な制御構造は、シーケンシャル以外の実行順序を可能にします。</target>
        </trans-unit>
        <trans-unit id="088345198c12c42185dc050f609431188d5e2c78" translate="yes" xml:space="preserve">
          <source>Explicitly displaying text in the echo area.</source>
          <target state="translated">エコー領域に明示的にテキストを表示します。</target>
        </trans-unit>
        <trans-unit id="a689623f299989df674feba29e4f28665efe9319" translate="yes" xml:space="preserve">
          <source>Explicitly rounding floating-point numbers.</source>
          <target state="translated">明示的に浮動小数点数を丸めます。</target>
        </trans-unit>
        <trans-unit id="6efc43ab25f6f82b115afa6cd6647daff5d515b8" translate="yes" xml:space="preserve">
          <source>Expression prefixes: &amp;lsquo;</source>
          <target state="translated">式のプレフィックス： '</target>
        </trans-unit>
        <trans-unit id="3ded6265cc857e0826a7951dc567e485d9688f10" translate="yes" xml:space="preserve">
          <source>Expressions whose values are displayed each time you enter Edebug.</source>
          <target state="translated">Edebugに入るたびに値が表示される式。</target>
        </trans-unit>
        <trans-unit id="828741415e596cc1348b75ea71ac729d3cf9801c" translate="yes" xml:space="preserve">
          <source>Extended File Attributes</source>
          <target state="translated">拡張ファイル属性</target>
        </trans-unit>
        <trans-unit id="faef1b43d6020947447489d47a97113bf052f09e" translate="yes" xml:space="preserve">
          <source>Extended Menu Items</source>
          <target state="translated">拡張メニュー項目</target>
        </trans-unit>
        <trans-unit id="79403e6568f432fc5806885c7a96d9f746bf269e" translate="yes" xml:space="preserve">
          <source>Extended file attributes for access control.</source>
          <target state="translated">アクセス制御のための拡張ファイル属性。</target>
        </trans-unit>
        <trans-unit id="c69f5fcd1e924179660b0f849a1edfca16c76ff3" translate="yes" xml:space="preserve">
          <source>Extending pcase</source>
          <target state="translated">拡張ケース</target>
        </trans-unit>
        <trans-unit id="dcbd361d67335f13d72aa72e80e9b5074251cb85" translate="yes" xml:space="preserve">
          <source>Extending the concept of variables.</source>
          <target state="translated">変数の概念を拡張する。</target>
        </trans-unit>
        <trans-unit id="f26cbcbfd3a60f50e69a2203bf39a117b6f7edba" translate="yes" xml:space="preserve">
          <source>External Border</source>
          <target state="translated">外部ボーダー</target>
        </trans-unit>
        <trans-unit id="559369521d2b02178eca19a89ab3af270c529587" translate="yes" xml:space="preserve">
          <source>External borders don&amp;rsquo;t exist on text terminal frames. For graphical frames, their display can be suppressed by setting the &lt;code&gt;override-redirect&lt;/code&gt; or &lt;code&gt;undecorated&lt;/code&gt; frame parameter (see &lt;a href=&quot;management-parameters#Management-Parameters&quot;&gt;Management Parameters&lt;/a&gt;).</source>
          <target state="translated">テキスト端末フレームには外部境界線はありません。グラフィカルフレームの場合、 &lt;code&gt;override-redirect&lt;/code&gt; または &lt;code&gt;undecorated&lt;/code&gt; フレームパラメータを設定することにより、それらの表示を抑制することができます（&lt;a href=&quot;management-parameters#Management-Parameters&quot;&gt;管理パラメータを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c0b99104aa13dc6a254700daf612011b95c664e0" translate="yes" xml:space="preserve">
          <source>Extra characters used in variable and command names along with word constituents. Examples include the characters &amp;lsquo;</source>
          <target state="translated">変数名とコマンド名で使用される追加の文字と単語の構成要素。例には文字が含まれます '</target>
        </trans-unit>
        <trans-unit id="11971c4e6df4236f6e2a88fa65abcd7f3fc95e4e" translate="yes" xml:space="preserve">
          <source>Extra options affecting how buffers are displayed.</source>
          <target state="translated">バッファの表示方法に影響を与える追加オプション。</target>
        </trans-unit>
        <trans-unit id="62794c2ea3b2113cb2c52f416844469a23bd3da4" translate="yes" xml:space="preserve">
          <source>Extracting the pieces of a list.</source>
          <target state="translated">リストの断片を抽出します。</target>
        </trans-unit>
        <trans-unit id="e1a1e9d545fa6732404318124fd97eb48df0b89c" translate="yes" xml:space="preserve">
          <source>Extraction of multiple values stored in an object is known as &lt;em&gt;destructuring&lt;/em&gt;. Using &lt;code&gt;pcase&lt;/code&gt; patterns allows to perform &lt;em&gt;destructuring binding&lt;/em&gt;, which is similar to a local binding (see &lt;a href=&quot;local-variables#Local-Variables&quot;&gt;Local Variables&lt;/a&gt;), but gives values to multiple elements of a variable by extracting those values from an object of compatible structure.</source>
          <target state="translated">オブジェクトに格納されている複数の値の抽出は、&lt;em&gt;破棄&lt;/em&gt;と呼ばれます。使用 &lt;code&gt;pcase&lt;/code&gt; のパターンは実行することができ&lt;em&gt;、結合非構造&lt;/em&gt;（参照結合ローカルに類似して、&lt;a href=&quot;local-variables#Local-Variables&quot;&gt;ローカル変数&lt;/a&gt;）が、互換性のある構造のオブジェクトからそれらの値を抽出することにより、変数の複数の要素に値を与えます。</target>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="88bfad9cfffeafd299a44d4daf979d57419a2621" translate="yes" xml:space="preserve">
          <source>F1</source>
          <target state="translated">F1</target>
        </trans-unit>
        <trans-unit id="b9c7614215c5bf3f22e0dd38d8c9a197b4432459" translate="yes" xml:space="preserve">
          <source>F11</source>
          <target state="translated">F11</target>
        </trans-unit>
        <trans-unit id="be3d820f356c0030f50fa290b419eb634ad7d08d" translate="yes" xml:space="preserve">
          <source>F3</source>
          <target state="translated">F3</target>
        </trans-unit>
        <trans-unit id="0b240bd1aef549aae787777e72c514ed278b4c9e" translate="yes" xml:space="preserve">
          <source>FIXME</source>
          <target state="translated">FIXME</target>
        </trans-unit>
        <trans-unit id="feab40e1fca77c7360ccca1481bb8ba5f919ce3a" translate="yes" xml:space="preserve">
          <source>FOO</source>
          <target state="translated">FOO</target>
        </trans-unit>
        <trans-unit id="d6cb99b2aaf9660672f786dca68ea38e17d6e0b1" translate="yes" xml:space="preserve">
          <source>FOO:</source>
          <target state="translated">FOO:</target>
        </trans-unit>
        <trans-unit id="e106961d692013d7e77bf986ab4ba215e15a1efd" translate="yes" xml:space="preserve">
          <source>Face Attribute Functions</source>
          <target state="translated">顔属性関数</target>
        </trans-unit>
        <trans-unit id="654864cf31f7692b390d6c92e9df53f991dd3be1" translate="yes" xml:space="preserve">
          <source>Face Attributes</source>
          <target state="translated">顔の属性</target>
        </trans-unit>
        <trans-unit id="d5e1cfea3023a6e8aa7a2742fbea8b8f08c0752f" translate="yes" xml:space="preserve">
          <source>Face Remapping</source>
          <target state="translated">フェイスリマッピング</target>
        </trans-unit>
        <trans-unit id="fdbb8fef1941523eb44ab9acd11a20e97debad36" translate="yes" xml:space="preserve">
          <source>Faces</source>
          <target state="translated">Faces</target>
        </trans-unit>
        <trans-unit id="819ff0ee4f320c1983239b6c9cbfadace5356c75" translate="yes" xml:space="preserve">
          <source>Faces for Font Lock</source>
          <target state="translated">フォントロックのための顔</target>
        </trans-unit>
        <trans-unit id="f16ad3d9b8a81e142c7177a85f1722ea3c8ecb24" translate="yes" xml:space="preserve">
          <source>Faces that are defined by default.</source>
          <target state="translated">デフォルトで定義されている顔。</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="b332d3834aba40f3287a2b6bec41f4773cb1f1e7" translate="yes" xml:space="preserve">
          <source>Features for controlling the screen display.</source>
          <target state="translated">画面表示を制御するための機能</target>
        </trans-unit>
        <trans-unit id="b9ae81895850ce8ada8529e0f5da57ea2c7986e1" translate="yes" xml:space="preserve">
          <source>Fields are added in a most to least significant order, so if the adjustment described above happens, it happens before adding days, hours, minutes or seconds.</source>
          <target state="translated">フィールドは最も大きい順から最も小さい順に追加されるので、上記の調整が発生した場合は、日、時間、分、秒を追加する前に発生します。</target>
        </trans-unit>
        <trans-unit id="84a27191b9d9fa3be49740ecbafdc1df51bea9cb" translate="yes" xml:space="preserve">
          <source>File Attributes</source>
          <target state="translated">ファイル属性</target>
        </trans-unit>
        <trans-unit id="634af05bec00faebb5b301b9d511d8f08119591f" translate="yes" xml:space="preserve">
          <source>File Format Conversion</source>
          <target state="translated">ファイルフォーマット変換</target>
        </trans-unit>
        <trans-unit id="394286763d09a40da21d7cdc6d10dc5ed278d4c0" translate="yes" xml:space="preserve">
          <source>File Local Variables</source>
          <target state="translated">ファイルローカル変数</target>
        </trans-unit>
        <trans-unit id="6945b1782b048888e914cc457381bec7925fce8d" translate="yes" xml:space="preserve">
          <source>File Locks</source>
          <target state="translated">ファイルロック</target>
        </trans-unit>
        <trans-unit id="8b6acea7a6a01e7f88e54a9260ec2af3a5357533" translate="yes" xml:space="preserve">
          <source>File Name Completion</source>
          <target state="translated">ファイル名の完成度</target>
        </trans-unit>
        <trans-unit id="7451ac3d98ad2761e27cb7d7298ba6cd2cd31381" translate="yes" xml:space="preserve">
          <source>File Name Components</source>
          <target state="translated">ファイル名 コンポーネント</target>
        </trans-unit>
        <trans-unit id="6e75764f6be72d64faaa7cd05889744083a1ffec" translate="yes" xml:space="preserve">
          <source>File Names</source>
          <target state="translated">ファイル名</target>
        </trans-unit>
        <trans-unit id="30fb1a4fd7f24b635466fa19633b5ffc1d1351f4" translate="yes" xml:space="preserve">
          <source>File local variables</source>
          <target state="translated">ファイルのローカル変数</target>
        </trans-unit>
        <trans-unit id="142ecb52f059b39536000c672c2af8e5e50fb47f" translate="yes" xml:space="preserve">
          <source>File mode specification error</source>
          <target state="translated">ファイルモード指定エラー</target>
        </trans-unit>
        <trans-unit id="41c49533612d0c04bef768e396e0a06eacbe8ed3" translate="yes" xml:space="preserve">
          <source>File notifications.</source>
          <target state="translated">ファイルの通知。</target>
        </trans-unit>
        <trans-unit id="abef62b2302277610c559dcbd2657a6f25e0cf68" translate="yes" xml:space="preserve">
          <source>File passwd is write-protected; try to save anyway? (yes or no)</source>
          <target state="translated">ファイルのパスワードは書き込み保護されています。(イエスかノーか)</target>
        </trans-unit>
        <trans-unit id="0fa423ea7a3de0b12d21f012b22a7141624872d0" translate="yes" xml:space="preserve">
          <source>File sizes, modification times, etc.</source>
          <target state="translated">ファイルサイズ、変更時間など</target>
        </trans-unit>
        <trans-unit id="33af16411a6a89fe3e0022fccba0ce8d9a48c5c8" translate="yes" xml:space="preserve">
          <source>Filenames containing &amp;lsquo;</source>
          <target state="translated">'を含むファイル名</target>
        </trans-unit>
        <trans-unit id="6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b" translate="yes" xml:space="preserve">
          <source>Files</source>
          <target state="translated">Files</target>
        </trans-unit>
        <trans-unit id="b82fb55310cb97d45bdeb83d3caf9294bba6b7ec" translate="yes" xml:space="preserve">
          <source>Files and Secondary Storage</source>
          <target state="translated">ファイルとセカンダリストレージ</target>
        </trans-unit>
        <trans-unit id="2b3e8a94ab0ab81e327337eb1fcbbfd8f921ecea" translate="yes" xml:space="preserve">
          <source>Files are generally referred to by their names, in Emacs as elsewhere. File names in Emacs are represented as strings. The functions that operate on a file all expect a file name argument.</source>
          <target state="translated">Emacsでも他の場所でも、ファイルは一般的に名前で呼ばれます。Emacsではファイル名は文字列で表現されます。ファイルを操作する関数はすべて、ファイル名の引数を期待しています。</target>
        </trans-unit>
        <trans-unit id="98325be45e57b01ea42841fb2dc63e31875877c1" translate="yes" xml:space="preserve">
          <source>Filling</source>
          <target state="translated">Filling</target>
        </trans-unit>
        <trans-unit id="8bfde07209f239be1569e3c825b6748d05c9a119" translate="yes" xml:space="preserve">
          <source>Filter functions accept output from the process.</source>
          <target state="translated">フィルタ機能は、プロセスからの出力を受け付ける。</target>
        </trans-unit>
        <trans-unit id="9f75d8a170ee3ebac199d6e0e7cd5fd77da7cf96" translate="yes" xml:space="preserve">
          <source>Filters can get unibyte or multibyte strings.</source>
          <target state="translated">フィルタは、ユニバイトまたはマルチバイトの文字列を取得することができます。</target>
        </trans-unit>
        <trans-unit id="aba4d2683351badc888e236a277c1fd78263060b" translate="yes" xml:space="preserve">
          <source>Finalizer Type</source>
          <target state="translated">ファイナライザの種類</target>
        </trans-unit>
        <trans-unit id="a8947680fe3863262f3ab5559d9bd7d760ac2651" translate="yes" xml:space="preserve">
          <source>Finally you can toggle the display of scroll bars on all frames by customizing the variables &lt;code&gt;scroll-bar-mode&lt;/code&gt; and &lt;code&gt;horizontal-scroll-bar-mode&lt;/code&gt;.</source>
          <target state="translated">最後に、変数 &lt;code&gt;scroll-bar-mode&lt;/code&gt; と &lt;code&gt;horizontal-scroll-bar-mode&lt;/code&gt; カスタマイズすることにより、すべてのフレームでスクロールバーの表示を切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="74d402c732ad516d11a21de33899809c80cdeff8" translate="yes" xml:space="preserve">
          <source>Finally, &lt;var&gt;function-list&lt;/var&gt; is a list of functions for the mode command to call for additional setup. It calls these functions just before it runs the mode hook variable &lt;code&gt;&lt;var&gt;mode&lt;/var&gt;-hook&lt;/code&gt;.</source>
          <target state="translated">最後に、 &lt;var&gt;function-list&lt;/var&gt; は、modeコマンドが追加のセットアップを呼び出すための関数のリストです。モードフック変数 &lt;code&gt;&lt;var&gt;mode&lt;/var&gt;-hook&lt;/code&gt; hookを実行する直前にこれらの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="c55ab6d71a9ad314809822d8b9060ed2f5013cf1" translate="yes" xml:space="preserve">
          <source>Finally, Emacs runs a normal hook that generalizes the behavior of &lt;code&gt;window-state-change-functions&lt;/code&gt;.</source>
          <target state="translated">最後に、Emacsは &lt;code&gt;window-state-change-functions&lt;/code&gt; の動作を一般化する通常のフックを実行します。</target>
        </trans-unit>
        <trans-unit id="408f1373e50d76e430a57c26aa76f5dbd3e9c977" translate="yes" xml:space="preserve">
          <source>Finally, a newline can have a &lt;code&gt;line-spacing&lt;/code&gt; text or overlay property that can enlarge the default frame line spacing and the buffer local &lt;code&gt;line-spacing&lt;/code&gt; variable: if its value is larger than the buffer or frame defaults, that larger value is used instead, for the display line ending in that newline.</source>
          <target state="translated">最後に、改行には、デフォルトのフレーム行間隔とバッファローカル &lt;code&gt;line-spacing&lt;/code&gt; 変数を拡大できる &lt;code&gt;line-spacing&lt;/code&gt; テキストまたはオーバーレイプロパティを含めることができます。その値がバッファまたはフレームのデフォルトよりも大きい場合は、代わりにその大きい値が使用されます。その改行で終わる表示行の場合。</target>
        </trans-unit>
        <trans-unit id="0a8ca0bbf8ca5c11ee4c822e14ac4b1cc54e98f6" translate="yes" xml:space="preserve">
          <source>Finally, and optionally, the &lt;code&gt;jsonrpc-connection&lt;/code&gt; subclass should implement the &lt;code&gt;jsonrpc-shutdown&lt;/code&gt; and &lt;code&gt;jsonrpc-running-p&lt;/code&gt; methods if these concepts apply to the transport. If they do, then any system resources (e.g. processes, timers, etc.) used to listen for messages on the wire should be released in &lt;code&gt;jsonrpc-shutdown&lt;/code&gt;, i.e. they should only be needed while &lt;code&gt;jsonrpc-running-p&lt;/code&gt; is non-nil.</source>
          <target state="translated">最後に、オプションで、 &lt;code&gt;jsonrpc-connection&lt;/code&gt; サブクラスは、これらの概念がトランスポートに適用される場合、 &lt;code&gt;jsonrpc-shutdown&lt;/code&gt; メソッドと &lt;code&gt;jsonrpc-running-p&lt;/code&gt; メソッドを実装する必要があります。その場合、 &lt;code&gt;jsonrpc-shutdown&lt;/code&gt; 上のメッセージをリッスンするために使用されるシステムリソース（プロセス、タイマーなど）は、jsonrpc-shutdownで解放する必要があります。つまり、 &lt;code&gt;jsonrpc-running-p&lt;/code&gt; がnil以外の場合にのみ必要になります。</target>
        </trans-unit>
        <trans-unit id="88b4ea5530a97f6f8fc1e3e4b10461e76b40fcec" translate="yes" xml:space="preserve">
          <source>Finally, here is an example of a stream that is a function, named &lt;code&gt;useless-stream&lt;/code&gt;. Before we use the stream, we initialize the variable &lt;code&gt;useless-list&lt;/code&gt; to a list of characters. Then each call to the function &lt;code&gt;useless-stream&lt;/code&gt; obtains the next character in the list or unreads a character by adding it to the front of the list.</source>
          <target state="translated">最後に、 &lt;code&gt;useless-stream&lt;/code&gt; という名前の関数であるストリームの例を次に示します。ストリームを使用する前に、変数 &lt;code&gt;useless-list&lt;/code&gt; を文字のリストに初期化します。次に、関数 &lt;code&gt;useless-stream&lt;/code&gt; を呼び出すたびに、リスト内の次の文字を取得するか、リストの先頭に追加して文字を読み取り解除します。</target>
        </trans-unit>
        <trans-unit id="e17f52480988f71b0601586b82009b1463b6a040" translate="yes" xml:space="preserve">
          <source>Finally, here is the major mode command for Lisp mode:</source>
          <target state="translated">最後に、Lispモードのメジャーモードコマンドです。</target>
        </trans-unit>
        <trans-unit id="860e5e3571f2ad47db3311a1348d075142701f7d" translate="yes" xml:space="preserve">
          <source>Finally, in many cases some conflicts will remain despite all efforts to restructure the grammar. Do not despair: while the parser cannot be made more clever, you can make the lexer as smart as you want. So, the solution is then to look at the tokens involved in the conflict and to split one of those tokens into 2 (or more) different tokens. E.g., if the grammar needs to distinguish between two incompatible uses of the token &lt;code&gt;&quot;begin&quot;&lt;/code&gt;, make the lexer return different tokens (say &lt;code&gt;&quot;begin-fun&quot;&lt;/code&gt; and &lt;code&gt;&quot;begin-plain&quot;&lt;/code&gt;) depending on which kind of &lt;code&gt;&quot;begin&quot;&lt;/code&gt; it finds. This pushes the work of distinguishing the different cases to the lexer, which will thus have to look at the surrounding text to find ad-hoc clues.</source>
          <target state="translated">最後に、多くの場合、文法を再構築するためのあらゆる努力にもかかわらず、いくつかの矛盾が残ります。絶望しないでください。パーサーをこれ以上賢くすることはできませんが、レクサーを必要なだけスマートにすることができます。したがって、解決策は、競合に関係するトークンを調べ、それらのトークンの1つを2つ（またはそれ以上）の異なるトークンに分割することです。たとえば、文法がトークン &lt;code&gt;&quot;begin&quot;&lt;/code&gt; 2つの互換性のない使用法を区別する必要がある場合、字句解析器が検出した &lt;code&gt;&quot;begin&quot;&lt;/code&gt; 種類に応じて異なるトークン（ &lt;code&gt;&quot;begin-fun&quot;&lt;/code&gt; と &lt;code&gt;&quot;begin-plain&quot;&lt;/code&gt; ）を返すようにします。これにより、さまざまなケースを区別する作業がレクサーにプッシュされます。レクサーは、周囲のテキストを調べてアドホックな手がかりを見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="9a2f5d53696c836d007bdbba2afcc8145ab8a69a" translate="yes" xml:space="preserve">
          <source>Finally, in the following example, only two of the three possible matches pass the predicate &lt;code&gt;test&lt;/code&gt; (the string &amp;lsquo;</source>
          <target state="translated">最後に、次の例では、3つの可能な一致のうち2つだけが述語 &lt;code&gt;test&lt;/code&gt; （文字列 '</target>
        </trans-unit>
        <trans-unit id="85ffc0c0143744d4e2b8094b05c47afef3598d23" translate="yes" xml:space="preserve">
          <source>Finally, the &lt;code&gt;svg-image&lt;/code&gt; takes an SVG object as its argument and returns an image object suitable for use in functions like &lt;code&gt;insert-image&lt;/code&gt;.</source>
          <target state="translated">最後に、 &lt;code&gt;svg-image&lt;/code&gt; は引数としてSVGオブジェクトを取り、 &lt;code&gt;insert-image&lt;/code&gt; などの関数での使用に適した画像オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="324c545c922d562bc07d2165d05858f4c2204358" translate="yes" xml:space="preserve">
          <source>Finally, the &lt;em&gt;global keymap&lt;/em&gt; contains key bindings that are defined regardless of the current buffer, such as</source>
          <target state="translated">最後に、&lt;em&gt;グローバルキーマップ&lt;/em&gt;には、現在のバッファに関係なく定義されるキーバインディングが含まれています。</target>
        </trans-unit>
        <trans-unit id="d5747d76af22cde76df111b9171bbfe1ef0d9121" translate="yes" xml:space="preserve">
          <source>Finally, the last part of the pattern matches any additional whitespace beyond the minimum needed to end a sentence.</source>
          <target state="translated">最後に、パターンの最後の部分は、文の最後に必要な最小値を超えて追加された空白にマッチします。</target>
        </trans-unit>
        <trans-unit id="51d9683535aae8eb5ee805c7c7cb6e34929d338c" translate="yes" xml:space="preserve">
          <source>Finally, this function passes the string through &lt;code&gt;substitute-command-keys&lt;/code&gt; to substitute key bindings (see &lt;a href=&quot;keys-in-documentation#Keys-in-Documentation&quot;&gt;Keys in Documentation&lt;/a&gt;). It skips this step if &lt;var&gt;verbatim&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">最後に、この関数は文字列を &lt;code&gt;substitute-command-keys&lt;/code&gt; に渡して、キーバインディングを置き換えます（&lt;a href=&quot;keys-in-documentation#Keys-in-Documentation&quot;&gt;ドキュメントのキーを&lt;/a&gt;参照）。場合は、このステップをスキップして &lt;var&gt;verbatim&lt;/var&gt; 非で &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ca4154f841daffd43e50a5f7de86f96c33aadc3" translate="yes" xml:space="preserve">
          <source>Finally, unless &lt;var&gt;verbatim&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, this function calls &lt;code&gt;substitute-command-keys&lt;/code&gt;. The result is the documentation string to return.</source>
          <target state="translated">しない限り、最後に、 &lt;var&gt;verbatim&lt;/var&gt; 非である &lt;code&gt;nil&lt;/code&gt; のは、この関数を呼び出し &lt;code&gt;substitute-command-keys&lt;/code&gt; 。結果は、返されるドキュメント文字列です。</target>
        </trans-unit>
        <trans-unit id="62487a369295a12ce9fd6f501b0a5a07e8d954e7" translate="yes" xml:space="preserve">
          <source>Finally, we evaluate the following:</source>
          <target state="translated">最後に、以下のように評価します。</target>
        </trans-unit>
        <trans-unit id="c9414bf74a898debd0d63dd3bc6a719232ad7a25" translate="yes" xml:space="preserve">
          <source>Finally, we show the use of a function as an output stream. The function &lt;code&gt;eat-output&lt;/code&gt; takes each character that it is given and conses it onto the front of the list &lt;code&gt;last-output&lt;/code&gt; (see &lt;a href=&quot;building-lists#Building-Lists&quot;&gt;Building Lists&lt;/a&gt;). At the end, the list contains all the characters output, but in reverse order.</source>
          <target state="translated">最後に、出力ストリームとしての関数の使用法を示します。関数 &lt;code&gt;eat-output&lt;/code&gt; は、与えられた各文字を受け取り、それをリストの &lt;code&gt;last-output&lt;/code&gt; 先頭に置きます（&lt;a href=&quot;building-lists#Building-Lists&quot;&gt;リストの作成を&lt;/a&gt;参照）。最後に、リストには出力されたすべての文字が含まれていますが、順序は逆です。</target>
        </trans-unit>
        <trans-unit id="647199d379e204b551bb8caf6eee952a5a23099d" translate="yes" xml:space="preserve">
          <source>Finally, you can write a module that will work with older versions of Emacs, by comparing the size of the environment passed by Emacs with known sizes, like this:</source>
          <target state="translated">最後に、Emacsで渡された環境のサイズと既知のサイズを比較することで、古いバージョンのEmacsでも動作するようなモジュールを書くことができます。</target>
        </trans-unit>
        <trans-unit id="7e2eb9516a141724f8015ce1c62ea5bd295c5971" translate="yes" xml:space="preserve">
          <source>Finally, you may want to change how the key is presented. By default, the key is simply shown as a &lt;code&gt;const&lt;/code&gt;, since the user cannot change the special keys specified with the &lt;code&gt;:options&lt;/code&gt; keyword. However, you may want to use a more specialized type for presenting the key, like &lt;code&gt;function-item&lt;/code&gt; if you know it is a symbol with a function binding. This is done by using a customization type specification instead of a symbol for the key.</source>
          <target state="translated">最後に、キーの表示方法を変更することもできます。デフォルトでは、ユーザーは &lt;code&gt;:options&lt;/code&gt; キーワードで指定された特殊キーを変更できないため、キーは単に &lt;code&gt;const&lt;/code&gt; として表示されます。ただし、キーが関数バインディングを持つシンボルであることがわかっている場合は、 &lt;code&gt;function-item&lt;/code&gt; のように、より特殊なタイプを使用してキーを表示することをお勧めします。これは、キーの記号の代わりにカスタマイズタイプの指定を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="6139bc12e79d6ddfa470ee70765f39ffc7d5d3f7" translate="yes" xml:space="preserve">
          <source>Finally, you should bind the Lisp function to a symbol, so that Lisp code could call your function by name. For that, use the module</source>
          <target state="translated">最後に、Lisp関数をシンボルにバインドして、Lispコードが関数を名前で呼び出せるようにします。そのためには、モジュール</target>
        </trans-unit>
        <trans-unit id="f12091ef2518a74b62d963c79a01a261eecf14dd" translate="yes" xml:space="preserve">
          <source>Find text by calling &lt;var&gt;function&lt;/var&gt;, and highlight the matches it finds using &lt;code&gt;font-lock-keyword-face&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;function&lt;/var&gt; を呼び出してテキストを検索し、 &lt;code&gt;font-lock-keyword-face&lt;/code&gt; を使用して見つかった一致を強調表示します。</target>
        </trans-unit>
        <trans-unit id="d8cb62b760103f3a5ef30dca2a1575326a388a92" translate="yes" xml:space="preserve">
          <source>Finding All Frames</source>
          <target state="translated">すべてのフレームを見つける</target>
        </trans-unit>
        <trans-unit id="a8cd235836e49a75690240ec59ef6b0111bd200d" translate="yes" xml:space="preserve">
          <source>Finding a key&amp;rsquo;s binding in one keymap.</source>
          <target state="translated">1つのキーマップでキーのバインディングを検索します。</target>
        </trans-unit>
        <trans-unit id="a67031d1c0586751352731157ea673a33fc1c359" translate="yes" xml:space="preserve">
          <source>Finding a library to load.</source>
          <target state="translated">ロードするライブラリを探す</target>
        </trans-unit>
        <trans-unit id="ab6f2de981c47e18ec86a3accd270c86a07d11d8" translate="yes" xml:space="preserve">
          <source>Finding out how to use a mode.</source>
          <target state="translated">モードの使い方を知る</target>
        </trans-unit>
        <trans-unit id="0d0744b64ec0a329edc14df06db4976aa9a1b6db" translate="yes" xml:space="preserve">
          <source>Finding out which part of the text matched, after a string or regexp search.</source>
          <target state="translated">文字列検索や正規表現検索の後に、テキストのどの部分が一致したかを調べる。</target>
        </trans-unit>
        <trans-unit id="27eab570847d4819c36162c48efadc0e3c73b621" translate="yes" xml:space="preserve">
          <source>Finding the Parse State for a Position</source>
          <target state="translated">ポジションのパース状態を見つける</target>
        </trans-unit>
        <trans-unit id="3195ca9dd575bda2ce1d7ab996bdec288335a881" translate="yes" xml:space="preserve">
          <source>Finding the best available font for a face.</source>
          <target state="translated">顔に最適な利用可能なフォントを探す</target>
        </trans-unit>
        <trans-unit id="75464c6f702ec7d0a0ab3508c4d05f31a92e0c06" translate="yes" xml:space="preserve">
          <source>Finding the completions for a given file name.</source>
          <target state="translated">指定されたファイル名の補完を検索します。</target>
        </trans-unit>
        <trans-unit id="7e13eb28305d03d9b543ab78212d5a631cf6470c" translate="yes" xml:space="preserve">
          <source>Finding the marker&amp;rsquo;s buffer or character position.</source>
          <target state="translated">マーカーのバッファーまたは文字位置を見つける。</target>
        </trans-unit>
        <trans-unit id="23b8f2102b2b397aff77e6066d02a87e98e53ab4" translate="yes" xml:space="preserve">
          <source>Finding the modifier keys in an event symbol. Event types.</source>
          <target state="translated">イベントシンボル内の修飾キーを見つける。イベントの種類。</target>
        </trans-unit>
        <trans-unit id="b33cfe3f2c7699c5039e1b04ea03cad84c95d16c" translate="yes" xml:space="preserve">
          <source>Finding the name and user id of the user.</source>
          <target state="translated">ユーザーの名前とユーザーIDを検索します。</target>
        </trans-unit>
        <trans-unit id="bf7ab483bdaaa051136602ca4b6d78f94660a87a" translate="yes" xml:space="preserve">
          <source>Finding which file defined a certain symbol.</source>
          <target state="translated">どのファイルが特定のシンボルを定義しているかを探す</target>
        </trans-unit>
        <trans-unit id="5a96053867634128a72855dbe818f35bd9b03414" translate="yes" xml:space="preserve">
          <source>First, &lt;code&gt;let&lt;/code&gt; evaluates &lt;code&gt;(list&amp;nbsp;&quot;149&quot;&amp;nbsp;'default)&lt;/code&gt; to get &lt;code&gt;(&quot;149&quot;&amp;nbsp;default)&lt;/code&gt;, the &lt;var&gt;exprval&lt;/var&gt;, and then tries to match &lt;var&gt;exprval&lt;/var&gt; against pattern &lt;code&gt;val&lt;/code&gt;. Since that is a &lt;var&gt;symbol&lt;/var&gt; pattern, it matches unconditionally and additionally binds &lt;code&gt;val&lt;/code&gt; to &lt;var&gt;exprval&lt;/var&gt;. Now that &lt;code&gt;let&lt;/code&gt; has matched, &lt;code&gt;or&lt;/code&gt; matches.</source>
          <target state="translated">まず、 &lt;code&gt;let&lt;/code&gt; 評価する &lt;code&gt;(list&amp;nbsp;&quot;149&quot;&amp;nbsp;'default)&lt;/code&gt; 取得する &lt;code&gt;(&quot;149&quot;&amp;nbsp;default)&lt;/code&gt; 、 &lt;var&gt;exprval&lt;/var&gt; をして、一致させようと &lt;var&gt;exprval&lt;/var&gt; パターンに対して &lt;code&gt;val&lt;/code&gt; 。これは &lt;var&gt;symbol&lt;/var&gt; パターンであるため、無条件に一致し、さらに &lt;code&gt;val&lt;/code&gt; を &lt;var&gt;exprval&lt;/var&gt; にバインドします。これで &lt;code&gt;let&lt;/code&gt; 一致した、 &lt;code&gt;or&lt;/code&gt; 一致しました。</target>
        </trans-unit>
        <trans-unit id="1a5d8cc1e281a98d0c6c309e36c19d33c4d11f54" translate="yes" xml:space="preserve">
          <source>First, &lt;code&gt;pred&lt;/code&gt; matches if &lt;code&gt;(integerp&amp;nbsp;&lt;var&gt;expval&lt;/var&gt;)&lt;/code&gt; evaluates to non-&lt;code&gt;nil&lt;/code&gt;. Next, &lt;code&gt;n&lt;/code&gt; is a &lt;var&gt;symbol&lt;/var&gt; pattern that matches anything and binds &lt;code&gt;n&lt;/code&gt; to &lt;var&gt;expval&lt;/var&gt;. Lastly, &lt;code&gt;guard&lt;/code&gt; matches if the boolean expression &lt;code&gt;(&amp;lt;=&amp;nbsp;-9&amp;nbsp;n&amp;nbsp;9)&lt;/code&gt; (note the reference to &lt;code&gt;n&lt;/code&gt;) evaluates to non-&lt;code&gt;nil&lt;/code&gt;. If all these sub-patterns match, &lt;code&gt;and&lt;/code&gt; matches.</source>
          <target state="translated">まず、 &lt;code&gt;(integerp&amp;nbsp;&lt;var&gt;expval&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;expval&lt;/var&gt; ）がnon&amp;nbsp; - &lt;code&gt;nil&lt;/code&gt; と評価された場合、 &lt;code&gt;pred&lt;/code&gt; は一致します。次に、 &lt;code&gt;n&lt;/code&gt; は何にでも一致し、 &lt;code&gt;n&lt;/code&gt; を &lt;var&gt;expval&lt;/var&gt; にバインドする &lt;var&gt;symbol&lt;/var&gt; パターンです。最後に、ブール式 &lt;code&gt;(&amp;lt;=&amp;nbsp;-9&amp;nbsp;n&amp;nbsp;9)&lt;/code&gt; （ &lt;code&gt;n&lt;/code&gt; への参照に注意）がnon- &lt;code&gt;nil&lt;/code&gt; と評価された場合、 &lt;code&gt;guard&lt;/code&gt; 一致します。これらすべてのサブパターンが一致する場合、 &lt;code&gt;and&lt;/code&gt; 一致します。</target>
        </trans-unit>
        <trans-unit id="5602cfe37b2d2e8488d61df67b252418140d07f1" translate="yes" xml:space="preserve">
          <source>First, it checks whether Transient Mark mode is enabled and the region is active. If so, it calls &lt;code&gt;indent-region&lt;/code&gt; to indent all the text in the region (see &lt;a href=&quot;region-indent#Region-Indent&quot;&gt;Region Indent&lt;/a&gt;).</source>
          <target state="translated">まず、トランジェントマークモードが有効で、リージョンがアクティブかどうかを確認します。その場合、 &lt;code&gt;indent-region&lt;/code&gt; を呼び出して、リージョン内のすべてのテキストをインデントします（&lt;a href=&quot;region-indent#Region-Indent&quot;&gt;Region Indentを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="5cc90ac529a1a596c4f7b306925e3c27b2eadc5e" translate="yes" xml:space="preserve">
          <source>First, such buffers must have a suitable &lt;code&gt;revert-buffer-function&lt;/code&gt; and &lt;code&gt;buffer-stale-function&lt;/code&gt; defined.</source>
          <target state="translated">まず、このようなバッファーには、適切な &lt;code&gt;revert-buffer-function&lt;/code&gt; と &lt;code&gt;buffer-stale-function&lt;/code&gt; が定義されている必要があります。</target>
        </trans-unit>
        <trans-unit id="0fc3309066ed5f2ff1aa4525ffedf257cd1d0f93" translate="yes" xml:space="preserve">
          <source>First, this command expands any abbrev before point, unless &lt;var&gt;arg&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;. (Interactively, &lt;var&gt;arg&lt;/var&gt; is the prefix argument.) Then it inserts a hyphen before point, to indicate the start of the next abbrev to be expanded. The actual expansion removes the hyphen.</source>
          <target state="translated">まず、このコマンドは、 &lt;var&gt;arg&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外でない限り、pointの前の略語を展開します。（対話的には、 &lt;var&gt;arg&lt;/var&gt; はプレフィックス引数です。）次に、ポイントの前にハイフンを挿入して、展開される次の略語の開始を示します。実際の展開では、ハイフンが削除されます。</target>
        </trans-unit>
        <trans-unit id="a774409a00c21de377cf8ed5c6a56b8547973042" translate="yes" xml:space="preserve">
          <source>Flag</source>
          <target state="translated">Flag</target>
        </trans-unit>
        <trans-unit id="668fcf1810b2ce389d0b1a207b70b01210d0ace2" translate="yes" xml:space="preserve">
          <source>Flag the current frame like</source>
          <target state="translated">のように現在のフレームにフラグを付けます。</target>
        </trans-unit>
        <trans-unit id="6a56cfecdba7ea96836380ed1e69b4a44f61a462" translate="yes" xml:space="preserve">
          <source>Flag the current frame so that the debugger will be entered when the frame is exited. Frames flagged in this way are marked with stars in the backtrace buffer.</source>
          <target state="translated">現在のフレームにフラグを立て、フレームが終了したときにデバッガが入力されるようにします。この方法でフラグを立てられたフレームは、バックトレースバッファに星印が付けられます。</target>
        </trans-unit>
        <trans-unit id="8493365622f8f23a430a6e553cd0fa55fbb91b58" translate="yes" xml:space="preserve">
          <source>Flag to set &lt;code&gt;coding-system&lt;/code&gt; of the process buffer from the coding system used to decode process output.</source>
          <target state="translated">プロセス出力のデコードに使用されるコーディングシステムからプロセスバッファのコーディングシステムを設定 &lt;code&gt;coding-system&lt;/code&gt; ためのフラグ。</target>
        </trans-unit>
        <trans-unit id="d15cd35cc1267b2e5feff273e3273e81715a547f" translate="yes" xml:space="preserve">
          <source>Floating-Point Basics</source>
          <target state="translated">浮動小数点の基本</target>
        </trans-unit>
        <trans-unit id="bdb039dcc477ba3def70845b9d2585d93f962bc6" translate="yes" xml:space="preserve">
          <source>Floating-Point Type</source>
          <target state="translated">浮動小数点型</target>
        </trans-unit>
        <trans-unit id="438bbb63180abb99b9a1a681f77aa34c104b3d49" translate="yes" xml:space="preserve">
          <source>Floating-point numbers are the computer equivalent of scientific notation; you can think of a floating-point number as a fraction together with a power of ten. The precise number of significant figures and the range of possible exponents is machine-specific; Emacs uses the C data type &lt;code&gt;double&lt;/code&gt; to store the value, and internally this records a power of 2 rather than a power of 10.</source>
          <target state="translated">浮動小数点数は、コンピューターで科学的記数法に相当します。浮動小数点数は、10の累乗の分数と考えることができます。有効数字の正確な数と可能な指数の範囲は、マシンによって異なります。EmacsはCデータ型 &lt;code&gt;double&lt;/code&gt; を使用して値を格納し、内部的には10の累乗ではなく2の累乗を記録します。</target>
        </trans-unit>
        <trans-unit id="bab4f9b32cf539639489e8df679cc5fcd42c2607" translate="yes" xml:space="preserve">
          <source>Floating-point numbers are useful for representing numbers that are not integral. The range of floating-point numbers is the same as the range of the C data type &lt;code&gt;double&lt;/code&gt; on the machine you are using. On all computers supported by Emacs, this is</source>
          <target state="translated">浮動小数点数は、整数ではない数を表すのに役立ちます。浮動小数点数の範囲は、使用しているマシンのCデータ型 &lt;code&gt;double&lt;/code&gt; の範囲と同じです。Emacsでサポートされているすべてのコンピューターで、これは</target>
        </trans-unit>
        <trans-unit id="6fb0f1fe4e017c28f8eea1d36230c9eb45418e19" translate="yes" xml:space="preserve">
          <source>Floating-point value.</source>
          <target state="translated">浮動小数点値。</target>
        </trans-unit>
        <trans-unit id="81c6e47ced4689fc9b50ffb6c5d899c6c3458d6a" translate="yes" xml:space="preserve">
          <source>Focus Events</source>
          <target state="translated">フォーカスイベント</target>
        </trans-unit>
        <trans-unit id="1e645b972bad2a1f5548e11a059f25456c18a168" translate="yes" xml:space="preserve">
          <source>Focus events are represented in Lisp as lists that look like this:</source>
          <target state="translated">フォーカスイベントはLispでは以下のようなリストで表現されます。</target>
        </trans-unit>
        <trans-unit id="17682d88592b02229ac424a4f95bc51968287272" translate="yes" xml:space="preserve">
          <source>Folding or wrapping long text lines.</source>
          <target state="translated">長い文字列を折り返したり、折り返したりすること。</target>
        </trans-unit>
        <trans-unit id="16be6fc4be7857cb1d203506b203e9ae71dbe2e1" translate="yes" xml:space="preserve">
          <source>Font Lock Basics</source>
          <target state="translated">フォントロックの基本</target>
        </trans-unit>
        <trans-unit id="efe3d0b886a6e6756ec774cf390598b0e5ff9f14" translate="yes" xml:space="preserve">
          <source>Font Lock Mode</source>
          <target state="translated">フォントロックモード</target>
        </trans-unit>
        <trans-unit id="8bf72cf6fee44ae0e97096fd69d4ebe9361c9ec8" translate="yes" xml:space="preserve">
          <source>Font Lock Multiline</source>
          <target state="translated">フォントロックマルチライン</target>
        </trans-unit>
        <trans-unit id="ab0acf1261e924742450fde03462e9eccf261b91" translate="yes" xml:space="preserve">
          <source>Font Lock mode (see &lt;a href=&quot;font-lock-mode#Font-Lock-Mode&quot;&gt;Font Lock Mode&lt;/a&gt;) works in most buffers by dynamically updating the &lt;code&gt;face&lt;/code&gt; property of characters based on the context.</source>
          <target state="translated">フォントロックモードは、（参照&lt;a href=&quot;font-lock-mode#Font-Lock-Mode&quot;&gt;フォントロックモード&lt;/a&gt;）動的に更新することにより、ほとんどのバッファに働く &lt;code&gt;face&lt;/code&gt; コンテキストに基づいて、文字のプロパティを。</target>
        </trans-unit>
        <trans-unit id="c6ae546df279ab14850a00208c2542e4e12f0d10" translate="yes" xml:space="preserve">
          <source>Font Lock mode can highlight using any face, but Emacs defines several faces specifically for Font Lock to use to highlight text. These &lt;em&gt;Font Lock faces&lt;/em&gt; are listed below. They can also be used by major modes for syntactic highlighting outside of Font Lock mode (see &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;Major Mode Conventions&lt;/a&gt;).</source>
          <target state="translated">フォントロックモードは任意の面を使用して強調表示できますが、Emacsはテキストを強調表示するために使用するフォントロック専用のいくつかの面を定義しています。これらの&lt;em&gt;フォントロック面&lt;/em&gt;を以下に示します。また、フォントロックモード以外の構文の強調表示のためにメジャーモードで使用することもできます（&lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;メジャーモードの規則を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d3a49e72d5752fd0a1f1609dc66d91f9adac11be" translate="yes" xml:space="preserve">
          <source>Font Lock mode finds text to highlight in two ways: through syntactic parsing based on the syntax table, and through searching (usually for regular expressions). Syntactic fontification happens first; it finds comments and string constants and highlights them. Search-based fontification happens second.</source>
          <target state="translated">フォントロックモードでは、ハイライトするテキストを 2 つの方法で見つけます:構文テーブルに基づく構文解析と、検索(通常は正規表現)です。構文的なフォント化は最初に行われ、コメントや文字列定数を見つけてそれらをハイライトします。検索ベースのフォント化は2番目に行われます。</target>
        </trans-unit>
        <trans-unit id="f2a4b0d06bd26c4094acc6d06be6c29713210fab" translate="yes" xml:space="preserve">
          <source>Font Selection</source>
          <target state="translated">フォントの選択</target>
        </trans-unit>
        <trans-unit id="1870afcff000c92cc31bceeb4d9b4496c9271455" translate="yes" xml:space="preserve">
          <source>Font Type</source>
          <target state="translated">フォントの種類</target>
        </trans-unit>
        <trans-unit id="97f6e4b3b5283deebf4eb8440ae1032cce6d2c82" translate="yes" xml:space="preserve">
          <source>Font and Color Parameters</source>
          <target state="translated">フォントと色のパラメータ</target>
        </trans-unit>
        <trans-unit id="617a7feac03d690c7d634c9921443adedf9077eb" translate="yes" xml:space="preserve">
          <source>Font family name (a string). See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts&quot;&gt;Fonts&lt;/a&gt; in</source>
          <target state="translated">フォントファミリー名（文字列）。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts&quot;&gt;フォント&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="b6b554a056e5bc46e18cdfad97f7433899edd323" translate="yes" xml:space="preserve">
          <source>Font selection first finds the best available matches for the first attribute in the list; then, among the fonts which are best in that way, it searches for the best matches in the second attribute, and so on.</source>
          <target state="translated">フ ォ ン ト 選択はまず、 リ ス ト 内の最初の属性に対 し て利用可能な最良の一致を見つけ、次に、そのようにして最良のフォントの中から、2 番目の属性に対 し て最良の一致を探します。</target>
        </trans-unit>
        <trans-unit id="a89193453fac12819a631009c0355f965f7d396b" translate="yes" xml:space="preserve">
          <source>Font slant&amp;mdash;one of the symbols &lt;code&gt;italic&lt;/code&gt;, &lt;code&gt;oblique&lt;/code&gt;, &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;reverse-italic&lt;/code&gt;, or &lt;code&gt;reverse-oblique&lt;/code&gt;. On text terminals that support variable-brightness text, slanted text is displayed as half-bright.</source>
          <target state="translated">フォントの傾斜- &lt;code&gt;italic&lt;/code&gt; 、 &lt;code&gt;oblique&lt;/code&gt; 、 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;reverse-italic&lt;/code&gt; 、または &lt;code&gt;reverse-oblique&lt;/code&gt; いずれかの記号。可変輝度テキストをサポートするテキスト端末では、傾斜したテキストは半輝度として表示されます。</target>
        </trans-unit>
        <trans-unit id="121db6402441bd0541f0b53862701a0d2fbef923" translate="yes" xml:space="preserve">
          <source>Font weight&amp;mdash;one of the symbols (from densest to faintest) &lt;code&gt;ultra-bold&lt;/code&gt;, &lt;code&gt;extra-bold&lt;/code&gt;, &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;semi-bold&lt;/code&gt;, &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;semi-light&lt;/code&gt;, &lt;code&gt;light&lt;/code&gt;, &lt;code&gt;extra-light&lt;/code&gt;, or &lt;code&gt;ultra-light&lt;/code&gt;. On text terminals which support variable-brightness text, any weight greater than normal is displayed as extra bright, and any weight less than normal is displayed as half-bright.</source>
          <target state="translated">フォントの太さ-記号の1つ（最も濃いものから最も薄いものまで） &lt;code&gt;ultra-bold&lt;/code&gt; 、超 &lt;code&gt;extra-bold&lt;/code&gt; 、 &lt;code&gt;bold&lt;/code&gt; 、 &lt;code&gt;semi-bold&lt;/code&gt; 、 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;semi-light&lt;/code&gt; 、 &lt;code&gt;light&lt;/code&gt; 、 &lt;code&gt;ultra-light&lt;/code&gt; &lt;code&gt;extra-light&lt;/code&gt; 、または超光。可変輝度テキストをサポートするテキスト端末では、通常よりも大きい重みは非常に明るいものとして表示され、通常よりも小さい重みは半分の明るさとして表示されます。</target>
        </trans-unit>
        <trans-unit id="8c2ebf48420ae343561df753e43b69aad019c4ec" translate="yes" xml:space="preserve">
          <source>Fontification based on regexps.</source>
          <target state="translated">正規表現に基づくフォント化。</target>
        </trans-unit>
        <trans-unit id="0a19191afa15ace9553b653b0ab1817384edcea4" translate="yes" xml:space="preserve">
          <source>Fontification based on syntax tables.</source>
          <target state="translated">構文表に基づくフォント化。</target>
        </trans-unit>
        <trans-unit id="d990de39c1d8401b13a944ac86e95f418f2b1274" translate="yes" xml:space="preserve">
          <source>Fontification will call &lt;var&gt;function&lt;/var&gt; repeatedly with the same limit, and with point where the previous invocation left it, until &lt;var&gt;function&lt;/var&gt; fails. On failure, &lt;var&gt;function&lt;/var&gt; need not reset point in any particular way.</source>
          <target state="translated">フォント化は、 &lt;var&gt;function&lt;/var&gt; が失敗するまで、同じ制限で、前の呼び出しがそれを残したポイントで &lt;var&gt;function&lt;/var&gt; 繰り返し呼び出します。障害が発生した場合、 &lt;var&gt;function&lt;/var&gt; は特定の方法でポイントをリセットする必要はありません。</target>
        </trans-unit>
        <trans-unit id="f6a9f42468c4ad6da6bdd3029c4061af9efedf85" translate="yes" xml:space="preserve">
          <source>Fonts and colors for the frame text.</source>
          <target state="translated">フレームテキストのフォントと色。</target>
        </trans-unit>
        <trans-unit id="370c5f43426613481fdfffd5afd2ec8451dd4bee" translate="yes" xml:space="preserve">
          <source>Fonts for displaying text.</source>
          <target state="translated">テキストを表示するためのフォントです。</target>
        </trans-unit>
        <trans-unit id="6b4cad525641bf7699e6ab0211542150965ffbb4" translate="yes" xml:space="preserve">
          <source>Fontset-&lt;var&gt;n&lt;/var&gt;</source>
          <target state="translated">Fontset-&lt;var&gt;n&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="4a83fc4223f6f835230963f891f5894b226b7af2" translate="yes" xml:space="preserve">
          <source>Fontsets</source>
          <target state="translated">Fontsets</target>
        </trans-unit>
        <trans-unit id="0c6aa77e19ef0b153d085a45f431eea8c9bf5723" translate="yes" xml:space="preserve">
          <source>Fontsets can specify a font on a per-character basis; when the fontset does that, this function&amp;rsquo;s value may not be accurate.</source>
          <target state="translated">フォントセットは、文字ごとにフォントを指定できます。フォントセットがそれを行う場合、この関数の値は正確でない可能性があります。</target>
        </trans-unit>
        <trans-unit id="201a6b3053cc1422d2c3670b62616221d2290929" translate="yes" xml:space="preserve">
          <source>Foo</source>
          <target state="translated">Foo</target>
        </trans-unit>
        <trans-unit id="222782d2ff4c7cc6cf5c4bdeffe7941e2dd46d68" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;:before&lt;/code&gt; advice, being outermost means that this advice will be run first, before any other advice, whereas being innermost means that it will run right before the original function, with no other advice run between itself and the original function. Similarly, for &lt;code&gt;:after&lt;/code&gt; advice innermost means that it will run right after the original function, with no other advice run in between, whereas outermost means that it will be run right at the end after all other advice. An innermost &lt;code&gt;:override&lt;/code&gt; piece of advice will only override the original function and other pieces of advice will apply to it, whereas an outermost &lt;code&gt;:override&lt;/code&gt; piece of advice will override not only the original function but all other advice applied to it as well.</source>
          <target state="translated">以下のために &lt;code&gt;:before&lt;/code&gt; 、アドバイスこのアドバイスは、それ自体と、元の関数の間には、他のアドバイスの実行で、右元の関数の前に実行されることを最も内側の手段であることに対し、他のアドバイスの前に、最初に実行されることを意味し、最も外側のこと。同様に、 &lt;code&gt;:after&lt;/code&gt; Adviceの場合、最も内側とは、元の関数の直後に実行され、間に他のアドバイスが実行されないことを意味します。一方、最も外側とは、他のすべてのアドバイスの直後に実行されることを意味します。最も内側の &lt;code&gt;:override&lt;/code&gt; のアドバイスは元の関数のみをオーバーライドし、他のアドバイスはそれに適用され &lt;code&gt;:override&lt;/code&gt; が、最も外側の：overrideのアドバイスは、元の関数だけでなく、それに適用される他のすべてのアドバイスもオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="780a29736b25c508c29c6a3dedd3caa74f5f9492" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;equal&lt;/code&gt;, equality is defined recursively; for example, given two cons cells &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;, &lt;code&gt;(equal &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt; if and only if both the expressions below return &lt;code&gt;t&lt;/code&gt;:</source>
          <target state="translated">以下のために &lt;code&gt;equal&lt;/code&gt; 、平等が再帰的に定義されています。例えば、2つのコンスセル所与 &lt;var&gt;x&lt;/var&gt; と &lt;var&gt;y&lt;/var&gt; の、 &lt;code&gt;(equal &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; を返し &lt;code&gt;t&lt;/code&gt; リターン下記式場合にのみ、両方の場合に &lt;code&gt;t&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8361c92b5f57d869af5b95ec47c3be590e320ff7" translate="yes" xml:space="preserve">
          <source>For A, because symbol &lt;code&gt;st&lt;/code&gt; is mentioned twice, the second mention becomes an equality test using &lt;code&gt;eq&lt;/code&gt;. On the other hand, B uses two separate symbols, &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;, both of which become independent bindings.</source>
          <target state="translated">Aの場合、記号 &lt;code&gt;st&lt;/code&gt; が2回言及されているため、2番目の言及は &lt;code&gt;eq&lt;/code&gt; を使用した等式テストになります。一方、Bは2つの別個のシンボル &lt;code&gt;s1&lt;/code&gt; と &lt;code&gt;s2&lt;/code&gt; を使用し、どちらも独立したバインディングになります。</target>
        </trans-unit>
        <trans-unit id="b11610eb910bc3e09bb05d152b90cc4ed3de8e14" translate="yes" xml:space="preserve">
          <source>For Emacs Lisp mode, &lt;code&gt;imenu-generic-expression&lt;/code&gt; could look like this:</source>
          <target state="translated">Emacs Lispモードの場合、 &lt;code&gt;imenu-generic-expression&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="4afc5c50d3365855eb6afc17378478bbb50beccb" translate="yes" xml:space="preserve">
          <source>For PBM images, specify image type &lt;code&gt;pbm&lt;/code&gt;. Color, gray-scale and monochromatic images are supported. For mono PBM images, two additional image properties are supported.</source>
          <target state="translated">PBMイメージの場合、イメージタイプ &lt;code&gt;pbm&lt;/code&gt; を指定します。カラー、グレースケール、および単色の画像がサポートされています。モノラルPBM画像の場合、2つの追加の画像プロパティがサポートされます。</target>
        </trans-unit>
        <trans-unit id="e4029ea038ac2bc1533dfd42dca15945911a6e65" translate="yes" xml:space="preserve">
          <source>For a connection, &lt;var&gt;remote-address&lt;/var&gt; is the address to connect to. It overrides &lt;var&gt;family&lt;/var&gt;, &lt;var&gt;host&lt;/var&gt; and &lt;var&gt;service&lt;/var&gt;, so you might as well not specify them.</source>
          <target state="translated">接続の場合、 &lt;var&gt;remote-address&lt;/var&gt; は接続するアドレスです。 &lt;var&gt;family&lt;/var&gt; 、 &lt;var&gt;host&lt;/var&gt; 、および &lt;var&gt;service&lt;/var&gt; 上書きするため、指定しない方がよいでしょう。</target>
        </trans-unit>
        <trans-unit id="8dd44b177320bc6af9a166a79a69645b4af9478f" translate="yes" xml:space="preserve">
          <source>For a datagram server, &lt;var&gt;remote-address&lt;/var&gt; specifies the initial setting of the remote datagram address.</source>
          <target state="translated">データグラムサーバーの場合、 &lt;var&gt;remote-address&lt;/var&gt; はリモートデータグラムアドレスの初期設定を指定します。</target>
        </trans-unit>
        <trans-unit id="1ec8cb627d21e3d182615eec57f529138243db39" translate="yes" xml:space="preserve">
          <source>For a drag event, the name of the symbol &lt;var&gt;event-type&lt;/var&gt; contains the prefix &amp;lsquo;</source>
          <target state="translated">ドラッグイベントの場合、シンボル &lt;var&gt;event-type&lt;/var&gt; の名前には接頭辞 'が含まれます</target>
        </trans-unit>
        <trans-unit id="c1a7557f2039cefe1324f701825e904b7b74f01b" translate="yes" xml:space="preserve">
          <source>For a few commands, these properties are present by default (you can remove them in your init file if you wish).</source>
          <target state="translated">いくつかのコマンドでは、これらのプロパティはデフォルトで存在しています (必要であれば init ファイルで削除することができます)。</target>
        </trans-unit>
        <trans-unit id="f158e15a661272a4f668cbe2ebc4100e6331ea32" translate="yes" xml:space="preserve">
          <source>For a fixed-size field, the length &lt;var&gt;len&lt;/var&gt; is given as an integer specifying the number of bytes in the field.</source>
          <target state="translated">固定サイズのフィールドの場合、長さ &lt;var&gt;len&lt;/var&gt; は、フィールドのバイト数を指定する整数として指定されます。</target>
        </trans-unit>
        <trans-unit id="94bf6db303e72a344c395d7b32f9f6b6c3a5e4f2" translate="yes" xml:space="preserve">
          <source>For a frame on a graphical terminal the following function returns the sizes of the areas described above:</source>
          <target state="translated">グラフィカル端末上のフレームに対して、以下の関数は上記の領域のサイズを返します。</target>
        </trans-unit>
        <trans-unit id="f9a4455cc0875a8bb40f0c436c07d787c88d64b1" translate="yes" xml:space="preserve">
          <source>For a leaf window and windows showing a tooltip, this is the buffer, as a Lisp object, that the window is displaying. For an internal (&amp;ldquo;parent&amp;rdquo;) window, this is its first child window. For a pseudo window showing a menu or tool bar this is &lt;code&gt;nil&lt;/code&gt;. It is also &lt;code&gt;nil&lt;/code&gt; for a window that has been deleted.</source>
          <target state="translated">リーフウィンドウとツールチップを表示するウィンドウの場合、これはウィンドウが表示しているLispオブジェクトとしてのバッファです。内部（「親」）ウィンドウの場合、これが最初の子ウィンドウです。メニューまたはツールバーを表示する疑似ウィンドウの場合、これは &lt;code&gt;nil&lt;/code&gt; です。削除されたウィンドウの場合も &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e541a81b69fdfc92f78d919c17ef443858ce2a88" translate="yes" xml:space="preserve">
          <source>For a more complete list of contributors, please see the relevant change log entries in the Emacs source repository.</source>
          <target state="translated">貢献者の詳細なリストは、Emacs ソースリポジトリの関連する変更ログエントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="da33f8ed197d7dcafe1f10cf24364a3e44b8c16e" translate="yes" xml:space="preserve">
          <source>For a more elaborate example of using &lt;code&gt;defvar&lt;/code&gt; without a value, see &lt;a href=&quot;using-lexical-binding#Local-defvar-example&quot;&gt;Local defvar example&lt;/a&gt;.</source>
          <target state="translated">値なしで &lt;code&gt;defvar&lt;/code&gt; を使用するより複雑な例については、&lt;a href=&quot;using-lexical-binding#Local-defvar-example&quot;&gt;ローカルdefvarの例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1fba15c59889a0f613ee7b6254fb4cdcc2bf5070" translate="yes" xml:space="preserve">
          <source>For a more realistic example where you might use this, consider that you have a buffer where certain sections represent URLs, and these are tagged with &lt;code&gt;shr-url&lt;/code&gt;.</source>
          <target state="translated">これを使用する可能性のあるより現実的な例として、特定のセクションがURLを表し、これらが &lt;code&gt;shr-url&lt;/code&gt; でタグ付けされているバッファーがあることを考慮してください。</target>
        </trans-unit>
        <trans-unit id="874be1ffef73392c67ae3ceb4571855edc9b38ac" translate="yes" xml:space="preserve">
          <source>For a more strict function (that will error out upon invalid input), this function can be used instead. It can parse all variants of the ISO 8601 standard, so in addition to the formats mentioned above, it also parses things like &amp;ldquo;1998W45-3&amp;rdquo; (week number) and &amp;ldquo;1998-245&amp;rdquo; (ordinal day number). To parse durations, there&amp;rsquo;s &lt;code&gt;iso8601-parse-duration&lt;/code&gt;, and to parse intervals, there&amp;rsquo;s &lt;code&gt;iso8601-parse-interval&lt;/code&gt;. All these functions return decoded time structures, except the final one, which returns three of them (the start, the end, and the duration).</source>
          <target state="translated">より厳密な関数（無効な入力でエラーが発生する）の場合は、代わりにこの関数を使用できます。ISO 8601標準のすべてのバリアントを解析できるため、上記の形式に加えて、「1998W45-3」（週番号）や「1998-245」（通常の日番号）なども解析します。期間を解析するには、 &lt;code&gt;iso8601-parse-duration&lt;/code&gt; があり、間隔を解析するには、 &lt;code&gt;iso8601-parse-interval&lt;/code&gt; があります。これらの関数はすべて、デコードされた時間構造を返します。ただし、最後の関数は3つ（開始、終了、および期間）を返します。</target>
        </trans-unit>
        <trans-unit id="b1f0f2adf942c9d2dc3309bacacd2243cf7604e2" translate="yes" xml:space="preserve">
          <source>For a network process, the values include (see &lt;code&gt;make-network-process&lt;/code&gt; for a complete list):</source>
          <target state="translated">ネットワークプロセスの場合、値には次のものが含まれます（完全なリストについては、 &lt;code&gt;make-network-process&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="f153e1c5645a5e23d096b21d21ce109610d96b4d" translate="yes" xml:space="preserve">
          <source>For a network, serial, or pipe connection, &lt;code&gt;process-status&lt;/code&gt; returns one of the symbols &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;, or &lt;code&gt;closed&lt;/code&gt;. The latter means that the other side closed the connection, or Emacs did &lt;code&gt;delete-process&lt;/code&gt;. The value &lt;code&gt;stop&lt;/code&gt; means that &lt;code&gt;stop-process&lt;/code&gt; was called on the connection.</source>
          <target state="translated">ネットワーク、シリアル、またはパイプ接続の場合、 &lt;code&gt;process-status&lt;/code&gt; は、 &lt;code&gt;open&lt;/code&gt; 、 &lt;code&gt;stop&lt;/code&gt; 、または &lt;code&gt;closed&lt;/code&gt; のいずれかの記号を返します。後者は、反対側が接続を閉じたか、Emacsが &lt;code&gt;delete-process&lt;/code&gt; を実行したことを意味します。値 &lt;code&gt;stop&lt;/code&gt; は、接続で &lt;code&gt;stop-process&lt;/code&gt; が呼び出されたことを意味します。</target>
        </trans-unit>
        <trans-unit id="6d196b666ddfa5e2c84615cae0e329a107522c93" translate="yes" xml:space="preserve">
          <source>For a normal hook, hook functions should be designed so that the order in which they are executed does not matter. Any dependence on the order is asking for trouble. However, the order is predictable: normally, &lt;var&gt;function&lt;/var&gt; goes at the front of the hook list, so it is executed first (barring another &lt;code&gt;add-hook&lt;/code&gt; call).</source>
          <target state="translated">通常のフックの場合、フック関数は、実行される順序が重要にならないように設計する必要があります。注文に依存することは問題を引き起こします。ただし、順序は予測可能です。通常、 &lt;var&gt;function&lt;/var&gt; はフックリストの先頭に配置されるため、最初に実行されます（別の &lt;code&gt;add-hook&lt;/code&gt; 呼び出しを除く）。</target>
        </trans-unit>
        <trans-unit id="07239215f7db505c2e2bbfc3f9963a1fb0a6ddbd" translate="yes" xml:space="preserve">
          <source>For a normal, non-child frame this function returns a cons of the pixel coordinates of its outer position (see &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;Frame Layout&lt;/a&gt;) with respect to the origin &lt;code&gt;(0, 0)&lt;/code&gt; of its display. For a child frame (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;) this function returns the pixel coordinates of its outer position with respect to an origin &lt;code&gt;(0, 0)&lt;/code&gt; at the native position of &lt;var&gt;frame&lt;/var&gt;&amp;rsquo;s parent.</source>
          <target state="translated">通常の子以外のフレームの場合、この関数は、表示の原点 &lt;code&gt;(0, 0)&lt;/code&gt; ）を基準にした外側の位置（&lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;フレームレイアウトを&lt;/a&gt;参照）のピクセル座標の短所を返します。子フレームについて（参照&lt;a href=&quot;child-frames#Child-Frames&quot;&gt;子フレームを&lt;/a&gt;この関数は原点に対してその外側位置の画素座標を返す） &lt;code&gt;(0, 0)&lt;/code&gt; の天然の位置に &lt;var&gt;frame&lt;/var&gt; の親。</target>
        </trans-unit>
        <trans-unit id="7555a3f0929878def60a2a8b52d9653acbc69538" translate="yes" xml:space="preserve">
          <source>For a particular frame, the value specified here may be overridden by that frame&amp;rsquo;s &lt;code&gt;auto-hide-function&lt;/code&gt; frame parameter (see &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;).</source>
          <target state="translated">特定のフレームの場合、ここで指定された値は、そのフレームの &lt;code&gt;auto-hide-function&lt;/code&gt; フレームパラメーターによってオーバーライドされる場合があります（&lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;フレーム相互作用パラメーターを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e684da989eacfd97b2925e7be52fae8c01f15e86" translate="yes" xml:space="preserve">
          <source>For a related feature, see &lt;a href=&quot;init-file#Init-File&quot;&gt;window-setup-hook&lt;/a&gt;.</source>
          <target state="translated">関連する機能については、&lt;a href=&quot;init-file#Init-File&quot;&gt;window-setup-hookを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f64cde43e52e64458ff57aaae7a20c71fc92b47a" translate="yes" xml:space="preserve">
          <source>For a remote &lt;var&gt;filename&lt;/var&gt;, this function returns a file name which could be used directly as an argument of a remote process (see &lt;a href=&quot;asynchronous-processes#Asynchronous-Processes&quot;&gt;Asynchronous Processes&lt;/a&gt;, and see &lt;a href=&quot;synchronous-processes#Synchronous-Processes&quot;&gt;Synchronous Processes&lt;/a&gt;), and as the program to run on the remote host. If &lt;var&gt;filename&lt;/var&gt; is local, this function returns it unchanged.</source>
          <target state="translated">リモート &lt;var&gt;filename&lt;/var&gt; 場合、この関数は、リモートプロセスの引数（&lt;a href=&quot;asynchronous-processes#Asynchronous-Processes&quot;&gt;非同期プロセス&lt;/a&gt;および&lt;a href=&quot;synchronous-processes#Synchronous-Processes&quot;&gt;同期プロセス&lt;/a&gt;を参照）として、およびリモートホストで実行するプログラムとして直接使用できるファイル名を返します。 &lt;var&gt;filename&lt;/var&gt; がローカルの場合、この関数はそれを変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="2e2af02388fcb473348e3e1783b1223ba2413713" translate="yes" xml:space="preserve">
          <source>For a serial connection, see &lt;code&gt;make-serial-process&lt;/code&gt; and &lt;code&gt;serial-process-configure&lt;/code&gt; for the list of keys. For a pipe connection, see &lt;code&gt;make-pipe-process&lt;/code&gt; for the list of keys.</source>
          <target state="translated">シリアル接続については、キーのリストについて &lt;code&gt;make-serial-process&lt;/code&gt; および &lt;code&gt;serial-process-configure&lt;/code&gt; を参照してください。パイプ接続については、キーのリストについて &lt;code&gt;make-pipe-process&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="506e52ccaad624a03a5a25b690b4ec879ceb8066" translate="yes" xml:space="preserve">
          <source>For a server process, &lt;var&gt;local-address&lt;/var&gt; is the address to listen on. It overrides &lt;var&gt;family&lt;/var&gt;, &lt;var&gt;host&lt;/var&gt; and &lt;var&gt;service&lt;/var&gt;, so you might as well not specify them.</source>
          <target state="translated">サーバープロセスの場合、 &lt;var&gt;local-address&lt;/var&gt; はリッスンするアドレスです。 &lt;var&gt;family&lt;/var&gt; 、 &lt;var&gt;host&lt;/var&gt; 、および &lt;var&gt;service&lt;/var&gt; 上書きするため、指定しない方がよいでしょう。</target>
        </trans-unit>
        <trans-unit id="063ae54c86a72f6dd2b6ef0b2c53785caaf880ca" translate="yes" xml:space="preserve">
          <source>For a server process, the options specified with &lt;code&gt;make-network-process&lt;/code&gt; are not inherited by the client connections, so you will need to set the necessary options for each child connection as it is created.</source>
          <target state="translated">サーバープロセスの場合、 &lt;code&gt;make-network-process&lt;/code&gt; で指定されたオプションはクライアント接続に継承されないため、作成時に子接続ごとに必要なオプションを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ab0e9166dd05d405f2aa575ede5d0ec4d4aa5de5" translate="yes" xml:space="preserve">
          <source>For a single-file package, &lt;var&gt;file&lt;/var&gt; is the package Lisp file; for a multi-file package, it is the package tar file. You can also sign the archive&amp;rsquo;s contents file in the same way. Make the</source>
          <target state="translated">単一ファイルパッケージの場合、 &lt;var&gt;file&lt;/var&gt; はパッケージLispファイルです。マルチファイルパッケージの場合、これはパッケージtarファイルです。同じ方法でアーカイブのコンテンツファイルに署名することもできます。を作る</target>
        </trans-unit>
        <trans-unit id="cddac283c6fbad067cde2e91d582a0863ab1f67d" translate="yes" xml:space="preserve">
          <source>For additional safety, &lt;code&gt;read-circle&lt;/code&gt; is temporarily bound to &lt;code&gt;nil&lt;/code&gt; when Emacs reads file-local variables (see &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;Input Functions&lt;/a&gt;). This prevents the Lisp reader from recognizing circular and shared Lisp structures (see &lt;a href=&quot;circular-objects#Circular-Objects&quot;&gt;Circular Objects&lt;/a&gt;).</source>
          <target state="translated">安全性を &lt;code&gt;nil&lt;/code&gt; 、Emacsがファイルローカル変数を読み取るときに &lt;code&gt;read-circle&lt;/code&gt; は一時的にnilにバインドされます（&lt;a href=&quot;input-functions#Input-Functions&quot;&gt;入力関数を&lt;/a&gt;参照）。これにより、Lispリーダーが循環および共有Lisp構造を認識できなくなります（&lt;a href=&quot;circular-objects#Circular-Objects&quot;&gt;Circular Objectsを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ef6f908916c2213a58292c4ccfef487ba3e9d216" translate="yes" xml:space="preserve">
          <source>For an alternative facility for destructuring binding, see &lt;a href=&quot;sequence-functions#seq_002dlet&quot;&gt;seq-let&lt;/a&gt;.</source>
          <target state="translated">バインディングを破棄するための代替機能については、&lt;a href=&quot;sequence-functions#seq_002dlet&quot;&gt;seq-letを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c326acf6241c7c0809b501cb8dd76fd10d776f0d" translate="yes" xml:space="preserve">
          <source>For an example of an application using this transport scheme on top of JSONRPC, see the &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/specification&quot;&gt;Language Server Protocol&lt;/a&gt;.</source>
          <target state="translated">JSONRPC上でこのトランスポートスキームを使用するアプリケーションの例については、&lt;a href=&quot;https://microsoft.github.io/language-server-protocol/specification&quot;&gt;Language&lt;/a&gt; ServerProtocolを参照してください。</target>
        </trans-unit>
        <trans-unit id="6412f08014b3c59973f751a0a41329ada671054a" translate="yes" xml:space="preserve">
          <source>For an interesting example of using &lt;code&gt;apply&lt;/code&gt;, see &lt;a href=&quot;mapping-functions#Definition-of-mapcar&quot;&gt;Definition of mapcar&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; の使用の興味深い例については&lt;a href=&quot;mapping-functions#Definition-of-mapcar&quot;&gt;、mapcarの定義を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2ac62ffb11b1205cd2ec0e3eeb9745d1fcc6ad4f" translate="yes" xml:space="preserve">
          <source>For any other non-&lt;code&gt;nil&lt;/code&gt; action code, the</source>
          <target state="translated">その他の &lt;code&gt;nil&lt;/code&gt; 以外のアクションコードの場合、</target>
        </trans-unit>
        <trans-unit id="f5267fdc1484269b536d70f99bea2db606a9c39b" translate="yes" xml:space="preserve">
          <source>For any two integers &lt;var&gt;dividend&lt;/var&gt; and &lt;var&gt;divisor&lt;/var&gt;,</source>
          <target state="translated">任意の2つの整数の &lt;var&gt;dividend&lt;/var&gt; と &lt;var&gt;divisor&lt;/var&gt; 、</target>
        </trans-unit>
        <trans-unit id="a72da2a1bc658d9b10287fe8776144e018a0887d" translate="yes" xml:space="preserve">
          <source>For any two numbers &lt;var&gt;dividend&lt;/var&gt; and &lt;var&gt;divisor&lt;/var&gt;,</source>
          <target state="translated">任意の2つの数値の &lt;var&gt;dividend&lt;/var&gt; と &lt;var&gt;divisor&lt;/var&gt; 、</target>
        </trans-unit>
        <trans-unit id="5efb7641f20d02b2baa5f784be6822d9efd593f5" translate="yes" xml:space="preserve">
          <source>For background, See &lt;a href=&quot;pattern_002dmatching-conditional#Pattern_002dMatching-Conditional&quot;&gt;Pattern-Matching Conditional&lt;/a&gt;.</source>
          <target state="translated">背景については、「&lt;a href=&quot;pattern_002dmatching-conditional#Pattern_002dMatching-Conditional&quot;&gt;パターンマッチング条件付き&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="c3502c2bb302e63d8fdc434b18b9e68b88f911a8" translate="yes" xml:space="preserve">
          <source>For backward compatibility, if &lt;var&gt;code-point&lt;/var&gt; doesn&amp;rsquo;t fit in a Lisp fixnum (see &lt;a href=&quot;integer-basics#Integer-Basics&quot;&gt;most-positive-fixnum&lt;/a&gt;), it can be specified as a cons cell &lt;code&gt;(&lt;var&gt;high&lt;/var&gt; . &lt;var&gt;low&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;low&lt;/var&gt; are the lower 16 bits of the value and &lt;var&gt;high&lt;/var&gt; are the high 16 bits. This usage is obsolescent.</source>
          <target state="translated">場合は、下位互換性のために、 &lt;var&gt;code-point&lt;/var&gt; （参照LispのFIXNUMに収まらない&lt;a href=&quot;integer-basics#Integer-Basics&quot;&gt;最も正FIXNUMに&lt;/a&gt;）、それはコンス・セルとして指定することができる &lt;code&gt;(&lt;var&gt;high&lt;/var&gt; . &lt;var&gt;low&lt;/var&gt;)&lt;/code&gt; 、 &lt;var&gt;low&lt;/var&gt; 値の下位16ビットであると &lt;var&gt;high&lt;/var&gt; は上位16ビットです。この使用法は廃止されています。</target>
        </trans-unit>
        <trans-unit id="47a69e571816bd3e5633261d32fa1543fdceb651" translate="yes" xml:space="preserve">
          <source>For backward compatibility, there are obsolete aliases &lt;code&gt;x-get-selection&lt;/code&gt; and &lt;code&gt;x-set-selection&lt;/code&gt;, which were the names of &lt;code&gt;gui-get-selection&lt;/code&gt; and &lt;code&gt;gui-set-selection&lt;/code&gt; before Emacs 25.1.</source>
          <target state="translated">下位互換性のために、廃止されたエイリアス &lt;code&gt;x-get-selection&lt;/code&gt; および &lt;code&gt;x-set-selection&lt;/code&gt; があります。これらは、 &lt;code&gt;gui-get-selection&lt;/code&gt; 以前のgui-get-selectionおよび &lt;code&gt;gui-set-selection&lt;/code&gt; の名前でした。</target>
        </trans-unit>
        <trans-unit id="121e05938fd78cea0604b54505c7ff8a45f6a892" translate="yes" xml:space="preserve">
          <source>For best results, make this variable buffer-local, so that it will disappear after doing its job and will not interfere with the subsequent major mode. See &lt;a href=&quot;hooks#Hooks&quot;&gt;Hooks&lt;/a&gt;.</source>
          <target state="translated">最良の結果を得るには、この変数をbuffer-localにして、ジョブの実行後に消え、後続のメジャーモードに干渉しないようにします。&lt;a href=&quot;hooks#Hooks&quot;&gt;フックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6ce34402ffe1794374d65dd17b0aaf42c8292bb4" translate="yes" xml:space="preserve">
          <source>For buffers not visiting a file to be restored, the major mode must define a function to do the job, and that function must be listed in the alist &lt;code&gt;desktop-buffer-mode-handlers&lt;/code&gt;.</source>
          <target state="translated">復元するファイルにアクセスしないバッファーの場合、メジャーモードでジョブを実行する関数を定義し、その関数をalistdesktop &lt;code&gt;desktop-buffer-mode-handlers&lt;/code&gt; リストする必要があります。</target>
        </trans-unit>
        <trans-unit id="e1e2d59e0ba5fd511d731e5a3da89d45abb82eca" translate="yes" xml:space="preserve">
          <source>For buffers not visiting a file to have their state saved, the major mode must bind the buffer local variable &lt;code&gt;desktop-save-buffer&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value.</source>
          <target state="translated">バッファがファイルにアクセスして状態を保存しない場合、メジャーモードはバッファローカル変数 &lt;code&gt;desktop-save-buffer&lt;/code&gt; を &lt;code&gt;nil&lt;/code&gt; 以外の値にバインドする必要があります。</target>
        </trans-unit>
        <trans-unit id="b39dd696e09f4d3cfe391ed2d07e39f2ea51797c" translate="yes" xml:space="preserve">
          <source>For clickable text buttons that send the user to a different buffer or location.</source>
          <target state="translated">ユーザーを別のバッファや場所に送るクリック可能なテキストボタンの場合。</target>
        </trans-unit>
        <trans-unit id="9783294e746a5ee573ba95bc5e33919cf41c465b" translate="yes" xml:space="preserve">
          <source>For clicks on a marginal area or on a fringe, this is the buffer position of the first visible character in the corresponding line in the window. For clicks on the mode line, the header line or the tab line, this is &lt;code&gt;nil&lt;/code&gt;. For other events, it is the buffer position closest to the click.</source>
          <target state="translated">マージン領域またはフリンジをクリックした場合、これはウィンドウの対応する行の最初に表示される文字のバッファ位置です。モード行、ヘッダー行、またはタブ行をクリックした場合、これは &lt;code&gt;nil&lt;/code&gt; です。その他のイベントの場合は、クリックに最も近いバッファ位置です。</target>
        </trans-unit>
        <trans-unit id="fb91260615c03a6f98320ec1431d1a615f829940" translate="yes" xml:space="preserve">
          <source>For clicks on a scroll bar, &lt;var&gt;position&lt;/var&gt; has this form:</source>
          <target state="translated">For clicks on a scroll bar, &lt;var&gt;position&lt;/var&gt; has this form:</target>
        </trans-unit>
        <trans-unit id="91f14921ea0887e603038510bd522b9f359946e5" translate="yes" xml:space="preserve">
          <source>For commands to display documentation strings, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Help.html#Help&quot;&gt;Help&lt;/a&gt; in</source>
          <target state="translated">For commands to display documentation strings, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Help.html#Help&quot;&gt;Help&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="f041697205704c9b82f5ea10802566a0ac769ba2" translate="yes" xml:space="preserve">
          <source>For compatibility with previous versions of Emacs, &lt;code&gt;window-height&lt;/code&gt; is an alias for &lt;code&gt;window-total-height&lt;/code&gt;, and &lt;code&gt;window-width&lt;/code&gt; is an alias for &lt;code&gt;window-body-width&lt;/code&gt;. These aliases are considered obsolete and will be removed in the future.</source>
          <target state="translated">For compatibility with previous versions of Emacs, &lt;code&gt;window-height&lt;/code&gt; is an alias for &lt;code&gt;window-total-height&lt;/code&gt; , and &lt;code&gt;window-width&lt;/code&gt; is an alias for &lt;code&gt;window-body-width&lt;/code&gt; . These aliases are considered obsolete and will be removed in the future.</target>
        </trans-unit>
        <trans-unit id="6aeb0736165542de00797d9e9036075c849b9f1d" translate="yes" xml:space="preserve">
          <source>For compatibility, &lt;var&gt;predicate&lt;/var&gt; can also be one of the symbols &lt;code&gt;executable&lt;/code&gt;, &lt;code&gt;readable&lt;/code&gt;, &lt;code&gt;writable&lt;/code&gt;, &lt;code&gt;exists&lt;/code&gt;, or a list of one or more of these symbols.</source>
          <target state="translated">For compatibility, &lt;var&gt;predicate&lt;/var&gt; can also be one of the symbols &lt;code&gt;executable&lt;/code&gt; , &lt;code&gt;readable&lt;/code&gt; , &lt;code&gt;writable&lt;/code&gt; , &lt;code&gt;exists&lt;/code&gt; , or a list of one or more of these symbols.</target>
        </trans-unit>
        <trans-unit id="66900f3ecb19bc7a744771fb6d1b592b9c854053" translate="yes" xml:space="preserve">
          <source>For consistency, you should also specify that element of the history as the initial minibuffer contents, using the &lt;var&gt;initial&lt;/var&gt; argument to the minibuffer input function (see &lt;a href=&quot;initial-input#Initial-Input&quot;&gt;Initial Input&lt;/a&gt;).</source>
          <target state="translated">For consistency, you should also specify that element of the history as the initial minibuffer contents, using the &lt;var&gt;initial&lt;/var&gt; argument to the minibuffer input function (see &lt;a href=&quot;initial-input#Initial-Input&quot;&gt;Initial Input&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="74c62700c6d87541270a5795bc335f128345e975" translate="yes" xml:space="preserve">
          <source>For convenience, the &lt;code&gt;jsonrpc&lt;/code&gt; library comes with a built-in &lt;code&gt;jsonrpc-process-connection&lt;/code&gt; transport implementation that can talk to local subprocesses (using the standard input and standard output); or TCP hosts (using sockets); or any other remote endpoint that Emacs&amp;rsquo;s process object can represent (see &lt;a href=&quot;processes#Processes&quot;&gt;Processes&lt;/a&gt;).</source>
          <target state="translated">For convenience, the &lt;code&gt;jsonrpc&lt;/code&gt; library comes with a built-in &lt;code&gt;jsonrpc-process-connection&lt;/code&gt; transport implementation that can talk to local subprocesses (using the standard input and standard output); or TCP hosts (using sockets); or any other remote endpoint that Emacs&amp;rsquo;s process object can represent (see &lt;a href=&quot;processes#Processes&quot;&gt;Processes&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="043b52ca73b98f1cccd797380f813644ed89dd0c" translate="yes" xml:space="preserve">
          <source>For convenience, there are two sorts of button-creation functions, those that add button properties to an existing region of a buffer, called &lt;code&gt;make-...button&lt;/code&gt;, and those that also insert the button text, called &lt;code&gt;insert-...button&lt;/code&gt;.</source>
          <target state="translated">For convenience, there are two sorts of button-creation functions, those that add button properties to an existing region of a buffer, called &lt;code&gt;make-...button&lt;/code&gt; , and those that also insert the button text, called &lt;code&gt;insert-...button&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="54dc6f12eb601168a1ac37613145f57827189341" translate="yes" xml:space="preserve">
          <source>For details, see &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;Syntax Class Table&lt;/a&gt;. Please note that &lt;code&gt;(syntax punctuation)&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent to the character class &lt;code&gt;punctuation&lt;/code&gt;. Corresponding string regexp: &amp;lsquo;</source>
          <target state="translated">For details, see &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;Syntax Class Table&lt;/a&gt;. Please note that &lt;code&gt;(syntax punctuation)&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent to the character class &lt;code&gt;punctuation&lt;/code&gt; . Corresponding string regexp: &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="734002e9a587e32b29f5a860c41732ff384a5177" translate="yes" xml:space="preserve">
          <source>For difficult cases, you can add do-nothing macros to your code to give advice to the test coverage tool.</source>
          <target state="translated">困難なケースについては、コードに do-nothing マクロを追加して、テストカバレッジツールにアドバイスを与えることができます。</target>
        </trans-unit>
        <trans-unit id="11e3a73ca5000b7c31eb2b1c1d6daf9a7ff26858" translate="yes" xml:space="preserve">
          <source>For dimmed-out text. For example, it is used for the ignored part of a filename in the minibuffer (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Minibuffer-File.html#Minibuffer-File&quot;&gt;Minibuffers for File Names&lt;/a&gt; in</source>
          <target state="translated">For dimmed-out text. For example, it is used for the ignored part of a filename in the minibuffer (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Minibuffer-File.html#Minibuffer-File&quot;&gt;Minibuffers for File Names&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="5592d06734e01b56669b7b1caf8a3c141e8d7c72" translate="yes" xml:space="preserve">
          <source>For each &lt;var&gt;package&lt;/var&gt;, which is a symbol, there are one or more elements that contain a package version &lt;var&gt;pversion&lt;/var&gt; with an associated Emacs version &lt;var&gt;eversion&lt;/var&gt;. These versions are strings. For example, the MH-E package updates this alist with the following:</source>
          <target state="translated">For each &lt;var&gt;package&lt;/var&gt; , which is a symbol, there are one or more elements that contain a package version &lt;var&gt;pversion&lt;/var&gt; with an associated Emacs version &lt;var&gt;eversion&lt;/var&gt; . These versions are strings. For example, the MH-E package updates this alist with the following:</target>
        </trans-unit>
        <trans-unit id="585b81ea7d737603e85999c64cc945eb2153ae26" translate="yes" xml:space="preserve">
          <source>For each directory in &lt;code&gt;load-path&lt;/code&gt;, Emacs then checks to see if it contains a file</source>
          <target state="translated">For each directory in &lt;code&gt;load-path&lt;/code&gt; , Emacs then checks to see if it contains a file</target>
        </trans-unit>
        <trans-unit id="d779a4ebd64888b38cfe346c6e444aa365dc3c8d" translate="yes" xml:space="preserve">
          <source>For each internal window, the screen areas of the immediate children are arranged either vertically or horizontally (never both). If the child windows are arranged one above the other, they are said to form a &lt;em&gt;vertical combination&lt;/em&gt;; if they are arranged side by side, they are said to form a &lt;em&gt;horizontal combination&lt;/em&gt;. Consider the following example:</source>
          <target state="translated">For each internal window, the screen areas of the immediate children are arranged either vertically or horizontally (never both). If the child windows are arranged one above the other, they are said to form a &lt;em&gt;vertical combination&lt;/em&gt;; if they are arranged side by side, they are said to form a &lt;em&gt;horizontal combination&lt;/em&gt;. Consider the following example:</target>
        </trans-unit>
        <trans-unit id="743c690cc98b53d8a1c6cfd4427025d5e238101a" translate="yes" xml:space="preserve">
          <source>For efficiency this function might return a value that is &lt;code&gt;eq&lt;/code&gt; to &lt;var&gt;time&lt;/var&gt;, or that otherwise shares structure with &lt;var&gt;time&lt;/var&gt;.</source>
          <target state="translated">For efficiency this function might return a value that is &lt;code&gt;eq&lt;/code&gt; to &lt;var&gt;time&lt;/var&gt; , or that otherwise shares structure with &lt;var&gt;time&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="c8a1f0205dc400cc4bfe8517f02f340b224dbb0d" translate="yes" xml:space="preserve">
          <source>For efficiency, Emacs does not continuously recompute each window&amp;rsquo;s mode line and header line. It does so when circumstances appear to call for it&amp;mdash;for instance, if you change the window configuration, switch buffers, narrow or widen the buffer, scroll, or modify the buffer. If you alter any of the variables referenced by &lt;code&gt;mode-line-format&lt;/code&gt; or &lt;code&gt;header-line-format&lt;/code&gt; (see &lt;a href=&quot;mode-line-variables#Mode-Line-Variables&quot;&gt;Mode Line Variables&lt;/a&gt;), or any other data structures that affect how text is displayed (see &lt;a href=&quot;display#Display&quot;&gt;Display&lt;/a&gt;), you should use the function &lt;code&gt;force-mode-line-update&lt;/code&gt; to update the display.</source>
          <target state="translated">For efficiency, Emacs does not continuously recompute each window&amp;rsquo;s mode line and header line. It does so when circumstances appear to call for it&amp;mdash;for instance, if you change the window configuration, switch buffers, narrow or widen the buffer, scroll, or modify the buffer. If you alter any of the variables referenced by &lt;code&gt;mode-line-format&lt;/code&gt; or &lt;code&gt;header-line-format&lt;/code&gt; (see &lt;a href=&quot;mode-line-variables#Mode-Line-Variables&quot;&gt;Mode Line Variables&lt;/a&gt;), or any other data structures that affect how text is displayed (see &lt;a href=&quot;display#Display&quot;&gt;Display&lt;/a&gt;), you should use the function &lt;code&gt;force-mode-line-update&lt;/code&gt; to update the display.</target>
        </trans-unit>
        <trans-unit id="f6f082c77d40eec0a94cd546026872b5e62ed240" translate="yes" xml:space="preserve">
          <source>For efficiency, we recommend writing these functions so that they usually assign faces to around 400 to 600 characters at each call.</source>
          <target state="translated">効率化のために、これらの関数は、通常、呼び出しごとに400~600文字程度の文字に顔を割り当てるように書くことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b45b099ef44308af9850ef419b10729db525c224" translate="yes" xml:space="preserve">
          <source>For elements whose &lt;var&gt;matcher&lt;/var&gt; is a function, the function should ensure that submatch 0 covers the whole relevant multiline construct, even if only a small subpart will be highlighted. It is often just as easy to add the &lt;code&gt;font-lock-multiline&lt;/code&gt; property by hand.</source>
          <target state="translated">For elements whose &lt;var&gt;matcher&lt;/var&gt; is a function, the function should ensure that submatch 0 covers the whole relevant multiline construct, even if only a small subpart will be highlighted. It is often just as easy to add the &lt;code&gt;font-lock-multiline&lt;/code&gt; property by hand.</target>
        </trans-unit>
        <trans-unit id="dc3c09a115b4ee611eb7505826a4fa0c2a8495d8" translate="yes" xml:space="preserve">
          <source>For example</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="1da55473e7e0bd5ddce679a996ae1f4bc172ce33" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;(168 . mute-acute)&lt;/code&gt; defines a system-specific key (used by HP X servers) whose numeric code is -2**28 + 168.</source>
          <target state="translated">For example &lt;code&gt;(168 . mute-acute)&lt;/code&gt; defines a system-specific key (used by HP X servers) whose numeric code is -2**28 + 168.</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="67c7bfe6911146baef42ccf95311646fa6de1225" translate="yes" xml:space="preserve">
          <source>For example, &amp;lsquo;</source>
          <target state="translated">例えば、 '</target>
        </trans-unit>
        <trans-unit id="744b687fbce69d0c70cd3e18220f9dacadd484ee" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;((top . left) (t . right))&lt;/code&gt; places the top angle bitmap in left fringe, and the bottom angle bitmap as well as both arrow bitmaps in right fringe. To show the angle bitmaps in the left fringe, and no arrow bitmaps, use &lt;code&gt;((top .  left) (bottom . left))&lt;/code&gt;.</source>
          <target state="translated">For example, &lt;code&gt;((top . left) (t . right))&lt;/code&gt; places the top angle bitmap in left fringe, and the bottom angle bitmap as well as both arrow bitmaps in right fringe. To show the angle bitmaps in the left fringe, and no arrow bitmaps, use &lt;code&gt;((top . left) (bottom . left))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f964fb57ecfe5d927e9308065e31b4bf29558753" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;(format-mode-line header-line-format)&lt;/code&gt; returns the text that would appear in the selected window&amp;rsquo;s header line (&lt;code&gt;&quot;&quot;&lt;/code&gt; if it has no header line). &lt;code&gt;(format-mode-line header-line-format
'header-line)&lt;/code&gt; returns the same text, with each character carrying the face that it will have in the header line itself, and also redraws the header line.</source>
          <target state="translated">For example, &lt;code&gt;(format-mode-line header-line-format)&lt;/code&gt; returns the text that would appear in the selected window&amp;rsquo;s header line ( &lt;code&gt;&quot;&quot;&lt;/code&gt; if it has no header line). &lt;code&gt;(format-mode-line header-line-format 'header-line)&lt;/code&gt; returns the same text, with each character carrying the face that it will have in the header line itself, and also redraws the header line.</target>
        </trans-unit>
        <trans-unit id="efc83ffc3386e01c1e8ade2e8cd7e012a462a074" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;(list integer string function)&lt;/code&gt; describes a list of three elements; the first element must be an integer, the second a string, and the third a function.</source>
          <target state="translated">For example, &lt;code&gt;(list integer string function)&lt;/code&gt; describes a list of three elements; the first element must be an integer, the second a string, and the third a function.</target>
        </trans-unit>
        <trans-unit id="3ef44bbdb2e48aa8186cb898c6acf5f8c9242879" translate="yes" xml:space="preserve">
          <source>For example, VT100 terminals send</source>
          <target state="translated">例えば、VT100端子は</target>
        </trans-unit>
        <trans-unit id="23ba4f1aaf8956b33e5b48d8206686c31ca1190c" translate="yes" xml:space="preserve">
          <source>For example, after evaluating &lt;code&gt;(fac 5)&lt;/code&gt; with a source breakpoint, and setting &lt;code&gt;edebug-test-coverage&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;, when the breakpoint is reached, the frequency data looks like this:</source>
          <target state="translated">For example, after evaluating &lt;code&gt;(fac 5)&lt;/code&gt; with a source breakpoint, and setting &lt;code&gt;edebug-test-coverage&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; , when the breakpoint is reached, the frequency data looks like this:</target>
        </trans-unit>
        <trans-unit id="a05e8356c63b07a3e3fc9b2fa536ac0bcc4967b7" translate="yes" xml:space="preserve">
          <source>For example, an argument list that looks like this:</source>
          <target state="translated">例えば、こんな感じの引数リスト。</target>
        </trans-unit>
        <trans-unit id="05d69093edb129241b3a840cf6b1b328b6242dcb" translate="yes" xml:space="preserve">
          <source>For example, characters with different coding points but the same meaning might be considered as equal, like different grave accent Unicode characters:</source>
          <target state="translated">例えば、異なる符号化点を持つ文字であっても同じ意味を持つ文字は、異なるグレイブアクセントのユニコード文字のように、等しいと考えられるかもしれません。</target>
        </trans-unit>
        <trans-unit id="27adeb48c032951b6d20992076af3c8afa49c305" translate="yes" xml:space="preserve">
          <source>For example, from the following we deduce that any attempt to read a file in</source>
          <target state="translated">例えば、次のようなことから、以下のように</target>
        </trans-unit>
        <trans-unit id="0273d690dd99e985b0b2971241e85b32b497db6a" translate="yes" xml:space="preserve">
          <source>For example, given a macro defined as follows:</source>
          <target state="translated">例えば、以下のように定義されたマクロがあるとします。</target>
        </trans-unit>
        <trans-unit id="db74331eb04a1de8dbcacf0c70f3b3441856bf28" translate="yes" xml:space="preserve">
          <source>For example, here are the file attributes for</source>
          <target state="translated">例えば、次のようなファイル属性があります。</target>
        </trans-unit>
        <trans-unit id="005c7abc213860be7f588f0de309060be8ddf15b" translate="yes" xml:space="preserve">
          <source>For example, here is how Emacs sets the parent of &lt;code&gt;help-mode-map&lt;/code&gt;, such that it inherits from both &lt;code&gt;button-buffer-map&lt;/code&gt; and &lt;code&gt;special-mode-map&lt;/code&gt;:</source>
          <target state="translated">For example, here is how Emacs sets the parent of &lt;code&gt;help-mode-map&lt;/code&gt; , such that it inherits from both &lt;code&gt;button-buffer-map&lt;/code&gt; and &lt;code&gt;special-mode-map&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8b9b4bb05ac508d1f9ca72c94fdcaa4c15ce5531" translate="yes" xml:space="preserve">
          <source>For example, here is how Info mode handles</source>
          <target state="translated">例えば、以下のように Info モードでは</target>
        </trans-unit>
        <trans-unit id="965efa71bb0bbcfbc42c969ae3abf4c71959d610" translate="yes" xml:space="preserve">
          <source>For example, here is how pcvs enables</source>
          <target state="translated">例えば、以下のように pcvs が</target>
        </trans-unit>
        <trans-unit id="ef5d21db3ba65b99f498854b10fea91677ea3a8d" translate="yes" xml:space="preserve">
          <source>For example, here is how to construct a display table that mimics the effect of setting &lt;code&gt;ctl-arrow&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value (see &lt;a href=&quot;glyphs#Glyphs&quot;&gt;Glyphs&lt;/a&gt;, for the function &lt;code&gt;make-glyph-code&lt;/code&gt;):</source>
          <target state="translated">For example, here is how to construct a display table that mimics the effect of setting &lt;code&gt;ctl-arrow&lt;/code&gt; to a non- &lt;code&gt;nil&lt;/code&gt; value (see &lt;a href=&quot;glyphs#Glyphs&quot;&gt;Glyphs&lt;/a&gt;, for the function &lt;code&gt;make-glyph-code&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="595d53d45350a65aafc72a30d20894f7a9984264" translate="yes" xml:space="preserve">
          <source>For example, here is how to set the &lt;code&gt;comment&lt;/code&gt; and &lt;code&gt;face&lt;/code&gt; properties of a range of text:</source>
          <target state="translated">For example, here is how to set the &lt;code&gt;comment&lt;/code&gt; and &lt;code&gt;face&lt;/code&gt; properties of a range of text:</target>
        </trans-unit>
        <trans-unit id="74a09f53a928afdb5314957c2f2bf981977e0431" translate="yes" xml:space="preserve">
          <source>For example, here we make an invisible buffer for temporary use, and make sure to kill it before finishing:</source>
          <target state="translated">例えば、ここでは一時的に使用するための見えないバッファを作り、終了する前に必ずキルするようにしています。</target>
        </trans-unit>
        <trans-unit id="c5f653d685daad8272ec011f525c34b0738959db" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s the definition of the standard face &lt;code&gt;highlight&lt;/code&gt;:</source>
          <target state="translated">For example, here&amp;rsquo;s the definition of the standard face &lt;code&gt;highlight&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="395ba922e8b33bcf9d38dae422d749535c7b11b4" translate="yes" xml:space="preserve">
          <source>For example, if &lt;var&gt;name&lt;/var&gt; is &lt;code&gt;(a b 2 c)&lt;/code&gt;, that means to find field &lt;code&gt;c&lt;/code&gt; in the third element of subfield &lt;code&gt;b&lt;/code&gt; of field &lt;code&gt;a&lt;/code&gt;. (This corresponds to &lt;code&gt;struct.a.b[2].c&lt;/code&gt; in C.)</source>
          <target state="translated">For example, if &lt;var&gt;name&lt;/var&gt; is &lt;code&gt;(a b 2 c)&lt;/code&gt; , that means to find field &lt;code&gt;c&lt;/code&gt; in the third element of subfield &lt;code&gt;b&lt;/code&gt; of field &lt;code&gt;a&lt;/code&gt; . (This corresponds to &lt;code&gt;struct.a.b[2].c&lt;/code&gt; in C.)</target>
        </trans-unit>
        <trans-unit id="0ff800dd3253158d07e32e80e98d75b35fc7a3ef" translate="yes" xml:space="preserve">
          <source>For example, if Font-Lock mode is enabled, you might get results like these:</source>
          <target state="translated">例えば、フォントロックモードを有効にすると、以下のような結果が得られるかもしれません。</target>
        </trans-unit>
        <trans-unit id="df6fc5dabfc94afe09280ab88b14c7122922b50e" translate="yes" xml:space="preserve">
          <source>For example, if point is 1 and you set the start of the window to 37, the start of the next line, point will be above the top of the window. The display routines will automatically move point if it is still 1 when redisplay occurs. Here is an example:</source>
          <target state="translated">例えば、ポイントが1で、次の行の始点であるウィンドウの始点を37とした場合、ポイントはウィンドウの上部よりも上になります。表示ルーチンは、再表示が発生したときにポイントが1のままであれば自動的にポイントを移動させます。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="bb0699bd8f47a3e8cccd5e7fd0f027e76b217cb4" translate="yes" xml:space="preserve">
          <source>For example, if the current buffer name is &amp;lsquo;</source>
          <target state="translated">For example, if the current buffer name is &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="adb2b1888f6b5b7287616e1bc0062845ce891f7f" translate="yes" xml:space="preserve">
          <source>For example, if we distribute version 1.3 of the superfrobnicator as a multi-file package, the tar file would be</source>
          <target state="translated">例えば、superfrobnicator のバージョン 1.3 をマルチファイルパッケージとして配布する場合、tar ファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="129a058c7280c246533530a1fd820643df60b883" translate="yes" xml:space="preserve">
          <source>For example, if you call &lt;code&gt;read-key-sequence&lt;/code&gt; and then click the mouse on the window&amp;rsquo;s mode line, you get two events, like this:</source>
          <target state="translated">For example, if you call &lt;code&gt;read-key-sequence&lt;/code&gt; and then click the mouse on the window&amp;rsquo;s mode line, you get two events, like this:</target>
        </trans-unit>
        <trans-unit id="d09e7149c4c55ac025b6b60f987664076f98cc22" translate="yes" xml:space="preserve">
          <source>For example, if you plan to sort all the lines in the region by the first word on each line starting with the letter &amp;lsquo;</source>
          <target state="translated">For example, if you plan to sort all the lines in the region by the first word on each line starting with the letter &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="485357f2c908b453f13370041021bdb6b189d1b3" translate="yes" xml:space="preserve">
          <source>For example, in</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="68c35d1e3bb1c66f44569c82c8af6a96b625a484" translate="yes" xml:space="preserve">
          <source>For example, in the standard syntax table, the entry for &amp;lsquo;</source>
          <target state="translated">For example, in the standard syntax table, the entry for &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="49538d0b2708caa4cbfe7507522436cff4c2aa9b" translate="yes" xml:space="preserve">
          <source>For example, punctuation and whitespace characters might be ignored for sorting (see &lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;Sequence Functions&lt;/a&gt;):</source>
          <target state="translated">For example, punctuation and whitespace characters might be ignored for sorting (see &lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;Sequence Functions&lt;/a&gt;):</target>
        </trans-unit>
        <trans-unit id="2166ab4db5dbdc8250f642388719feb57292d22d" translate="yes" xml:space="preserve">
          <source>For example, setting this variable is useful to get a backtrace from code evaluated by emacsclient&amp;rsquo;s</source>
          <target state="translated">For example, setting this variable is useful to get a backtrace from code evaluated by emacsclient&amp;rsquo;s</target>
        </trans-unit>
        <trans-unit id="5420205529242dca31bafacc450a37a00adac6c1" translate="yes" xml:space="preserve">
          <source>For example, suppose My mode provides a special command &lt;code&gt;my-kill-line&lt;/code&gt;, which should be invoked instead of &lt;code&gt;kill-line&lt;/code&gt;. To establish this, its mode keymap should contain the following remapping:</source>
          <target state="translated">For example, suppose My mode provides a special command &lt;code&gt;my-kill-line&lt;/code&gt; , which should be invoked instead of &lt;code&gt;kill-line&lt;/code&gt; . To establish this, its mode keymap should contain the following remapping:</target>
        </trans-unit>
        <trans-unit id="6735e17f34be2237ed73b289e8fd1588a3f7c8b3" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;shell-command-on-region&lt;/code&gt; command uses &lt;code&gt;call-shell-region&lt;/code&gt; in a manner similar to this:</source>
          <target state="translated">For example, the &lt;code&gt;shell-command-on-region&lt;/code&gt; command uses &lt;code&gt;call-shell-region&lt;/code&gt; in a manner similar to this:</target>
        </trans-unit>
        <trans-unit id="27ee27aae03dd0ad802396582186884cc3bbd399" translate="yes" xml:space="preserve">
          <source>For example, the following code adds two fontification patterns for C mode: one to fontify the word &amp;lsquo;</source>
          <target state="translated">For example, the following code adds two fontification patterns for C mode: one to fontify the word &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="175738e16217893190fe59a465d2f0cbf4a51eae" translate="yes" xml:space="preserve">
          <source>For example, the following code would assign an italicized green face to the text between &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt;:</source>
          <target state="translated">For example, the following code would assign an italicized green face to the text between &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; :</target>
        </trans-unit>
        <trans-unit id="fe4398851e7138b4cfe9a97b657ef55520230c8a" translate="yes" xml:space="preserve">
          <source>For example, the function that implements numeric prefix arguments reads any number of digits. When it finds a non-digit event, it must unread the event so that it can be read normally by the command loop. Likewise, incremental search uses this feature to unread events with no special meaning in a search, because these events should exit the search and then execute normally.</source>
          <target state="translated">例えば、数字のプレフィックス引数を実装した関数は、任意の数の数字を読み込みます。数字以外のイベントを見つけたときは、コマンドループで正常に読み込めるように、イベントの読み取りを解除しなければなりません。同様に、インクリメンタル検索では、特別な意味を持たないイベントは検索を終了してから正常に実行されるべきなので、この機能を使用して、検索中に特別な意味を持たないイベントを読み解かなければなりません。</target>
        </trans-unit>
        <trans-unit id="384f2d22a8a927ed244f80bc1dc93234f2018dcb" translate="yes" xml:space="preserve">
          <source>For example, the regular expression &amp;lsquo;</source>
          <target state="translated">For example, the regular expression &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="b2ef5659cb8be7a6b60ecf6bbc0af64c87f3fe3c" translate="yes" xml:space="preserve">
          <source>For example, the syntax descriptor for the character &amp;lsquo;</source>
          <target state="translated">For example, the syntax descriptor for the character &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="4585c648d09853d23b2922efeb34fb0dcfabedb0" translate="yes" xml:space="preserve">
          <source>For example, the usual way to show what percentage of a buffer is above the top of the window is to use a list like this: &lt;code&gt;(-3 &quot;%p&quot;)&lt;/code&gt;.</source>
          <target state="translated">For example, the usual way to show what percentage of a buffer is above the top of the window is to use a list like this: &lt;code&gt;(-3 &quot;%p&quot;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bbd366bf7da22ebc87b5581744b6af4853c2f8fd" translate="yes" xml:space="preserve">
          <source>For example, this expression tests whether &lt;code&gt;x&lt;/code&gt; is either &lt;code&gt;nil&lt;/code&gt; or the integer zero:</source>
          <target state="translated">For example, this expression tests whether &lt;code&gt;x&lt;/code&gt; is either &lt;code&gt;nil&lt;/code&gt; or the integer zero:</target>
        </trans-unit>
        <trans-unit id="2c848e5dda222b3589fe7c48d05f8bcd6f0e6905" translate="yes" xml:space="preserve">
          <source>For example, this redefines</source>
          <target state="translated">例えば、これは</target>
        </trans-unit>
        <trans-unit id="8b0e6046e3d16467ee010606573cdfcbd88b269c" translate="yes" xml:space="preserve">
          <source>For example, to find the buffer position of column &lt;var&gt;col&lt;/var&gt; of screen line &lt;var&gt;line&lt;/var&gt; of a certain window, pass the window&amp;rsquo;s display start location as &lt;var&gt;from&lt;/var&gt; and the window&amp;rsquo;s upper-left coordinates as &lt;var&gt;frompos&lt;/var&gt;. Pass the buffer&amp;rsquo;s &lt;code&gt;(point-max)&lt;/code&gt; as &lt;var&gt;to&lt;/var&gt;, to limit the scan to the end of the accessible portion of the buffer, and pass &lt;var&gt;line&lt;/var&gt; and &lt;var&gt;col&lt;/var&gt; as &lt;var&gt;topos&lt;/var&gt;. Here&amp;rsquo;s a function that does this:</source>
          <target state="translated">For example, to find the buffer position of column &lt;var&gt;col&lt;/var&gt; of screen line &lt;var&gt;line&lt;/var&gt; of a certain window, pass the window&amp;rsquo;s display start location as &lt;var&gt;from&lt;/var&gt; and the window&amp;rsquo;s upper-left coordinates as &lt;var&gt;frompos&lt;/var&gt; . Pass the buffer&amp;rsquo;s &lt;code&gt;(point-max)&lt;/code&gt; as &lt;var&gt;to&lt;/var&gt; , to limit the scan to the end of the accessible portion of the buffer, and pass &lt;var&gt;line&lt;/var&gt; and &lt;var&gt;col&lt;/var&gt; as &lt;var&gt;topos&lt;/var&gt; . Here&amp;rsquo;s a function that does this:</target>
        </trans-unit>
        <trans-unit id="9e942398938b535914ef7e95735c0d1f57c8343d" translate="yes" xml:space="preserve">
          <source>For example, to match &lt;var&gt;expval&lt;/var&gt; that must be a list of two elements whose first element is a specific string and the second element is any value, you can write a core pattern:</source>
          <target state="translated">For example, to match &lt;var&gt;expval&lt;/var&gt; that must be a list of two elements whose first element is a specific string and the second element is any value, you can write a core pattern:</target>
        </trans-unit>
        <trans-unit id="8647d2af0d56d8b4d684ccdc41d0e7ef012c977f" translate="yes" xml:space="preserve">
          <source>For example, to specify a list whose first element must be &lt;code&gt;baz&lt;/code&gt; and whose remaining arguments should be zero or more of &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;, use this customization type:</source>
          <target state="translated">For example, to specify a list whose first element must be &lt;code&gt;baz&lt;/code&gt; and whose remaining arguments should be zero or more of &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; , use this customization type:</target>
        </trans-unit>
        <trans-unit id="3fced1f25af160096cf3380284c60e8f0069d9a0" translate="yes" xml:space="preserve">
          <source>For example, using 4-bit binary numbers, the bitwise AND of 13 and 12 is 12: 1101 combined with 1100 produces 1100. In both the binary numbers, the leftmost two bits are both 1 so the leftmost two bits of the returned value are both 1. However, for the rightmost two bits, each is 0 in at least one of the arguments, so the rightmost two bits of the returned value are both 0.</source>
          <target state="translated">例えば、4ビットの2進数を使うと、13と12のビット単位のANDは12となり、1101と1100を組み合わせると1100が得られます。どちらの2進数も、左端の2ビットは両方とも1なので、返される値の左端の2ビットは両方とも1ですが、右端の2ビットは、引数の少なくとも1つでそれぞれ0なので、返される値の右端の2ビットは両方とも0になります。</target>
        </trans-unit>
        <trans-unit id="a991b30b321a789877e152611b03f5b1bbf24c9c" translate="yes" xml:space="preserve">
          <source>For example, when a function is called, its argument variables receive local values, which are the actual arguments supplied to the function call; these local bindings take effect within the body of the function. To take another example, the &lt;code&gt;let&lt;/code&gt; special form explicitly establishes local bindings for specific variables, which take effect only within the body of the &lt;code&gt;let&lt;/code&gt; form.</source>
          <target state="translated">For example, when a function is called, its argument variables receive local values, which are the actual arguments supplied to the function call; these local bindings take effect within the body of the function. To take another example, the &lt;code&gt;let&lt;/code&gt; special form explicitly establishes local bindings for specific variables, which take effect only within the body of the &lt;code&gt;let&lt;/code&gt; form.</target>
        </trans-unit>
        <trans-unit id="302d045a398db08075b269c868fcbd268402b1ec" translate="yes" xml:space="preserve">
          <source>For example, you could define &lt;code&gt;name&lt;/code&gt; to mean &lt;code&gt;(one-or-more letter)&lt;/code&gt;, and &lt;code&gt;(quoted &lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; to mean &lt;code&gt;(seq ?' &lt;var&gt;x&lt;/var&gt; ?')&lt;/code&gt; for any &lt;var&gt;x&lt;/var&gt;. These forms could then be used in &lt;code&gt;rx&lt;/code&gt; expressions like any other: &lt;code&gt;(rx (quoted name))&lt;/code&gt; would match a nonempty sequence of letters inside single quotes.</source>
          <target state="translated">For example, you could define &lt;code&gt;name&lt;/code&gt; to mean &lt;code&gt;(one-or-more letter)&lt;/code&gt; , and &lt;code&gt;(quoted &lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; to mean &lt;code&gt;(seq ?' &lt;var&gt;x&lt;/var&gt; ?')&lt;/code&gt; for any &lt;var&gt;x&lt;/var&gt; . These forms could then be used in &lt;code&gt;rx&lt;/code&gt; expressions like any other: &lt;code&gt;(rx (quoted name))&lt;/code&gt; would match a nonempty sequence of letters inside single quotes.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="14b38a77b4f2c99de9b60a13e177bd689dcadc7c" translate="yes" xml:space="preserve">
          <source>For examples of key sequences written in string and vector representations, &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html#Init-Rebinding&quot;&gt;Init Rebinding&lt;/a&gt; in</source>
          <target state="translated">For examples of key sequences written in string and vector representations, &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html#Init-Rebinding&quot;&gt;Init Rebinding&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="756ed62664ef2f85085fafd6014de3a11655e566" translate="yes" xml:space="preserve">
          <source>For flexibility, the</source>
          <target state="translated">柔軟性のためには</target>
        </trans-unit>
        <trans-unit id="885fd45c866065f1ec4b303a41cc5a28f9d59115" translate="yes" xml:space="preserve">
          <source>For frames with an internal menu or tool bar, the frame&amp;rsquo;s native height cannot be told exactly before the frame has been actually drawn. This means that in general you cannot use the native size to specify the initial size of a frame. As soon as you know the native size of a visible frame, you can calculate its outer size (see &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;Frame Layout&lt;/a&gt;) by adding in the remaining components from the return value of &lt;code&gt;frame-geometry&lt;/code&gt;. For invisible frames or for frames that have yet to be created, however, the outer size can only be estimated. This also means that calculating an exact initial position of a frame specified via offsets from the right or bottom edge of the screen (see &lt;a href=&quot;frame-position#Frame-Position&quot;&gt;Frame Position&lt;/a&gt;) is impossible.</source>
          <target state="translated">For frames with an internal menu or tool bar, the frame&amp;rsquo;s native height cannot be told exactly before the frame has been actually drawn. This means that in general you cannot use the native size to specify the initial size of a frame. As soon as you know the native size of a visible frame, you can calculate its outer size (see &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;Frame Layout&lt;/a&gt;) by adding in the remaining components from the return value of &lt;code&gt;frame-geometry&lt;/code&gt; . For invisible frames or for frames that have yet to be created, however, the outer size can only be estimated. This also means that calculating an exact initial position of a frame specified via offsets from the right or bottom edge of the screen (see &lt;a href=&quot;frame-position#Frame-Position&quot;&gt;Frame Position&lt;/a&gt;) is impossible.</target>
        </trans-unit>
        <trans-unit id="2f94eeb4c257732d5e9d9e2db099193ac251cd9c" translate="yes" xml:space="preserve">
          <source>For functions and variables related to visiting files in buffers, see &lt;a href=&quot;visiting-files#Visiting-Files&quot;&gt;Visiting Files&lt;/a&gt; and &lt;a href=&quot;saving-buffers#Saving-Buffers&quot;&gt;Saving Buffers&lt;/a&gt;. For functions and variables related to the display of buffers in windows, see &lt;a href=&quot;buffers-and-windows#Buffers-and-Windows&quot;&gt;Buffers and Windows&lt;/a&gt;.</source>
          <target state="translated">For functions and variables related to visiting files in buffers, see &lt;a href=&quot;visiting-files#Visiting-Files&quot;&gt;Visiting Files&lt;/a&gt; and &lt;a href=&quot;saving-buffers#Saving-Buffers&quot;&gt;Saving Buffers&lt;/a&gt;. For functions and variables related to the display of buffers in windows, see &lt;a href=&quot;buffers-and-windows#Buffers-and-Windows&quot;&gt;Buffers and Windows&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="096e441f5d07c9aeca48a8c3b6c68d8259beb478" translate="yes" xml:space="preserve">
          <source>For good performance, it&amp;rsquo;s very important to use the &lt;var&gt;limit&lt;/var&gt; argument to these functions, especially the ones that search for a single property&amp;mdash;otherwise, they may spend a long time scanning to the end of the buffer, if the property you are interested in does not change.</source>
          <target state="translated">For good performance, it&amp;rsquo;s very important to use the &lt;var&gt;limit&lt;/var&gt; argument to these functions, especially the ones that search for a single property&amp;mdash;otherwise, they may spend a long time scanning to the end of the buffer, if the property you are interested in does not change.</target>
        </trans-unit>
        <trans-unit id="c636758eb9f2ccf22d584f3ccf22195b5beb19a7" translate="yes" xml:space="preserve">
          <source>For graphical terminals, note that on multi-monitor setups this refers to the height for all physical monitors associated with &lt;var&gt;display&lt;/var&gt;. See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;.</source>
          <target state="translated">For graphical terminals, note that on multi-monitor setups this refers to the height for all physical monitors associated with &lt;var&gt;display&lt;/var&gt; . See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4b8896e43509c656a91f644b662d9fd3b6c48f29" translate="yes" xml:space="preserve">
          <source>For graphical terminals, note that on multi-monitor setups this refers to the pixel height for all physical monitors associated with &lt;var&gt;display&lt;/var&gt;. See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;.</source>
          <target state="translated">For graphical terminals, note that on multi-monitor setups this refers to the pixel height for all physical monitors associated with &lt;var&gt;display&lt;/var&gt; . See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d5ab03b3e614eac3a7bbaa567f279a4f1f9d057d" translate="yes" xml:space="preserve">
          <source>For graphical terminals, note that on multi-monitor setups this refers to the pixel width for all physical monitors associated with &lt;var&gt;display&lt;/var&gt;. See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;.</source>
          <target state="translated">For graphical terminals, note that on multi-monitor setups this refers to the pixel width for all physical monitors associated with &lt;var&gt;display&lt;/var&gt; . See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9af87cec8b479351a811ac8aa5c236492c607087" translate="yes" xml:space="preserve">
          <source>For graphical terminals, note that on multi-monitor setups this refers to the width for all physical monitors associated with &lt;var&gt;display&lt;/var&gt;. See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;.</source>
          <target state="translated">For graphical terminals, note that on multi-monitor setups this refers to the width for all physical monitors associated with &lt;var&gt;display&lt;/var&gt; . See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="632f51d2e3c1de25d6cd1469e9b63dd75f33b29f" translate="yes" xml:space="preserve">
          <source>For higher-level input facilities, see &lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;Minibuffers&lt;/a&gt;.</source>
          <target state="translated">For higher-level input facilities, see &lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;Minibuffers&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9da377bf3a4e5ee235e3f1dc396f7d2833196cf1" translate="yes" xml:space="preserve">
          <source>For historical compatibility reasons, &amp;lsquo;</source>
          <target state="translated">For historical compatibility reasons, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="65628619bb4b16082341e795ef37116997318974" translate="yes" xml:space="preserve">
          <source>For historical reasons, Emacs does not run a separate hook whenever a window gets selected. Applications and internal routines often temporarily select a window to perform a few actions on it. They do that either to simplify coding&amp;mdash;because many functions by default operate on the selected window when no &lt;var&gt;window&lt;/var&gt; argument is specified&amp;mdash;or because some functions did not (and still do not) take a window as argument and always operate(d) on the selected window instead. Running a hook every time a window gets selected for a short time and once more when the previously selected window gets restored is not useful.</source>
          <target state="translated">For historical reasons, Emacs does not run a separate hook whenever a window gets selected. Applications and internal routines often temporarily select a window to perform a few actions on it. They do that either to simplify coding&amp;mdash;because many functions by default operate on the selected window when no &lt;var&gt;window&lt;/var&gt; argument is specified&amp;mdash;or because some functions did not (and still do not) take a window as argument and always operate(d) on the selected window instead. Running a hook every time a window gets selected for a short time and once more when the previously selected window gets restored is not useful.</target>
        </trans-unit>
        <trans-unit id="00ffbca2eef06914871b856c4d2841fd46e63245" translate="yes" xml:space="preserve">
          <source>For historical reasons, Emacs treats the</source>
          <target state="translated">歴史的な理由から、Emacsでは</target>
        </trans-unit>
        <trans-unit id="046929ea68cbb73ffed966af9cb9c86855132a7b" translate="yes" xml:space="preserve">
          <source>For image types whose support libraries are statically linked, this function always returns &lt;code&gt;t&lt;/code&gt;. For image types whose support libraries are dynamically loaded, it returns &lt;code&gt;t&lt;/code&gt; if the library could be loaded and &lt;code&gt;nil&lt;/code&gt; otherwise.</source>
          <target state="translated">For image types whose support libraries are statically linked, this function always returns &lt;code&gt;t&lt;/code&gt; . For image types whose support libraries are dynamically loaded, it returns &lt;code&gt;t&lt;/code&gt; if the library could be loaded and &lt;code&gt;nil&lt;/code&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="d115e12f0efdfbb2d9aaf8b6529a43e7a2fbef42" translate="yes" xml:space="preserve">
          <source>For information about how &lt;code&gt;load&lt;/code&gt; is used in building Emacs, see &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;Building Emacs&lt;/a&gt;.</source>
          <target state="translated">For information about how &lt;code&gt;load&lt;/code&gt; is used in building Emacs, see &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;Building Emacs&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fb864d046c9d6a21427cb9289d67ab5c533404eb" translate="yes" xml:space="preserve">
          <source>For information about other concatenation functions, see the description of &lt;code&gt;mapconcat&lt;/code&gt; in &lt;a href=&quot;mapping-functions#Mapping-Functions&quot;&gt;Mapping Functions&lt;/a&gt;, &lt;code&gt;vconcat&lt;/code&gt; in &lt;a href=&quot;vector-functions#Vector-Functions&quot;&gt;Vector Functions&lt;/a&gt;, and &lt;code&gt;append&lt;/code&gt; in &lt;a href=&quot;building-lists#Building-Lists&quot;&gt;Building Lists&lt;/a&gt;. For concatenating individual command-line arguments into a string to be used as a shell command, see &lt;a href=&quot;shell-arguments#Shell-Arguments&quot;&gt;combine-and-quote-strings&lt;/a&gt;.</source>
          <target state="translated">For information about other concatenation functions, see the description of &lt;code&gt;mapconcat&lt;/code&gt; in &lt;a href=&quot;mapping-functions#Mapping-Functions&quot;&gt;Mapping Functions&lt;/a&gt;, &lt;code&gt;vconcat&lt;/code&gt; in &lt;a href=&quot;vector-functions#Vector-Functions&quot;&gt;Vector Functions&lt;/a&gt;, and &lt;code&gt;append&lt;/code&gt; in &lt;a href=&quot;building-lists#Building-Lists&quot;&gt;Building Lists&lt;/a&gt;. For concatenating individual command-line arguments into a string to be used as a shell command, see &lt;a href=&quot;shell-arguments#Shell-Arguments&quot;&gt;combine-and-quote-strings&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="562de7ef6e5c5372cd8038579b0b5fa9de52b85c" translate="yes" xml:space="preserve">
          <source>For instance, here&amp;rsquo;s a closure that removes itself from a hook after being run once:</source>
          <target state="translated">For instance, here&amp;rsquo;s a closure that removes itself from a hook after being run once:</target>
        </trans-unit>
        <trans-unit id="44d3371577866cddaf4db74fddddccf76614f5ae" translate="yes" xml:space="preserve">
          <source>For instance, if you want &amp;ldquo;same time next month&amp;rdquo;, you could say:</source>
          <target state="translated">For instance, if you want &amp;ldquo;same time next month&amp;rdquo;, you could say:</target>
        </trans-unit>
        <trans-unit id="3865a9fa40f6a3d2713ffd26e08118fa4e6f6eac" translate="yes" xml:space="preserve">
          <source>For instance, if you want to make the</source>
          <target state="translated">例えば、「このようにしたい」と思った場合は</target>
        </trans-unit>
        <trans-unit id="e191e46f09a5a6a356d408b941943f636d82eff7" translate="yes" xml:space="preserve">
          <source>For instance, in old versions of Emacs the &lt;code&gt;sit-for&lt;/code&gt; function accepted three arguments, like this</source>
          <target state="translated">For instance, in old versions of Emacs the &lt;code&gt;sit-for&lt;/code&gt; function accepted three arguments, like this</target>
        </trans-unit>
        <trans-unit id="30920d93fa04181e77388625fe59f18dfff55497" translate="yes" xml:space="preserve">
          <source>For instance, suppose &lt;code&gt;load-path&lt;/code&gt; is set to</source>
          <target state="translated">For instance, suppose &lt;code&gt;load-path&lt;/code&gt; is set to</target>
        </trans-unit>
        <trans-unit id="128598d10cceac7cba1f49e0a7362870b28df10f" translate="yes" xml:space="preserve">
          <source>For instance, this changes the default fontset to use a font of which family name is &amp;lsquo;</source>
          <target state="translated">For instance, this changes the default fontset to use a font of which family name is &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="c0e75d5266c7e5f456b09b17569d8f50669d4c79" translate="yes" xml:space="preserve">
          <source>For instance, to display an arrow in the left fringe, using the &lt;code&gt;warning&lt;/code&gt; face, you could say something like:</source>
          <target state="translated">For instance, to display an arrow in the left fringe, using the &lt;code&gt;warning&lt;/code&gt; face, you could say something like:</target>
        </trans-unit>
        <trans-unit id="2cec329c05b78c603818950c0fa31246f51373c3" translate="yes" xml:space="preserve">
          <source>For instance, to increase the year in a decoded time, you could say:</source>
          <target state="translated">例えば、デコードされた時間の中で年を増やすには</target>
        </trans-unit>
        <trans-unit id="a4eb2b60c2dd5ee8e2d11c45799591a9a142fb00" translate="yes" xml:space="preserve">
          <source>For interactive development of regular expressions, you can use the</source>
          <target state="translated">正規表現をインタラクティブに開発するには</target>
        </trans-unit>
        <trans-unit id="1227c8ac2d428a960d30b6659ad99b5189b10660" translate="yes" xml:space="preserve">
          <source>For interactive use, Emacs provides two commands which always split the selected window. These call &lt;code&gt;split-window&lt;/code&gt; internally.</source>
          <target state="translated">For interactive use, Emacs provides two commands which always split the selected window. These call &lt;code&gt;split-window&lt;/code&gt; internally.</target>
        </trans-unit>
        <trans-unit id="4fd869c535f12482bfdf3b13eeadecad9584228d" translate="yes" xml:space="preserve">
          <source>For its working, &lt;code&gt;replace-buffer-contents&lt;/code&gt; needs to compare the contents of the original buffer with that of &lt;var&gt;source&lt;/var&gt; which is a costly operation if the buffers are huge and there is a high number of differences between them. In order to keep &lt;code&gt;replace-buffer-contents&lt;/code&gt;&amp;rsquo;s runtime in bounds, it has two optional arguments.</source>
          <target state="translated">For its working, &lt;code&gt;replace-buffer-contents&lt;/code&gt; needs to compare the contents of the original buffer with that of &lt;var&gt;source&lt;/var&gt; which is a costly operation if the buffers are huge and there is a high number of differences between them. In order to keep &lt;code&gt;replace-buffer-contents&lt;/code&gt; &amp;rsquo;s runtime in bounds, it has two optional arguments.</target>
        </trans-unit>
        <trans-unit id="a5ea8f4d1afb6f7f3e89cf1a3d588341e3fb83bf" translate="yes" xml:space="preserve">
          <source>For key lookup, only the event type matters: two events of the same type necessarily run the same command. The command can access the full values of these events using the &amp;lsquo;</source>
          <target state="translated">For key lookup, only the event type matters: two events of the same type necessarily run the same command. The command can access the full values of these events using the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="edcd252dab164457f78c494eb745e585735056e9" translate="yes" xml:space="preserve">
          <source>For letters, the basic code itself indicates upper versus lower case; for digits and punctuation, the shift key selects an entirely different character with a different basic code. In order to keep within the</source>
          <target state="translated">文字の場合は、基本コード自体が大文字と小文字を示しますが、数字と句読点の場合は、シフトキーを押すと、基本コードが異なる全く異なる文字が選択されます。文字の場合は、基本コードの範囲内に収まるようにするために、シフトキーを押します。</target>
        </trans-unit>
        <trans-unit id="d761f0e8822448b6dc970fbe8b9a8dc3b66c9b19" translate="yes" xml:space="preserve">
          <source>For mechanisms to add user-defined extensions to the &lt;code&gt;rx&lt;/code&gt; notation, see &lt;a href=&quot;extending-rx#Extending-Rx&quot;&gt;Extending Rx&lt;/a&gt;.</source>
          <target state="translated">For mechanisms to add user-defined extensions to the &lt;code&gt;rx&lt;/code&gt; notation, see &lt;a href=&quot;extending-rx#Extending-Rx&quot;&gt;Extending Rx&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a396e4435f09e1fcfcd85ad1599a0c2f4e045ad7" translate="yes" xml:space="preserve">
          <source>For more coarse-grained suppression of compiler warnings, you can use the &lt;code&gt;with-no-warnings&lt;/code&gt; construct:</source>
          <target state="translated">For more coarse-grained suppression of compiler warnings, you can use the &lt;code&gt;with-no-warnings&lt;/code&gt; construct:</target>
        </trans-unit>
        <trans-unit id="51d6ec0ae56211f45b2f4f741eaeaa54ee2c5ff1" translate="yes" xml:space="preserve">
          <source>For more control over the expansion, the &lt;code&gt;gv-define-expander&lt;/code&gt; macro can be used. For instance, a settable &lt;code&gt;substring&lt;/code&gt; could be implemented this way:</source>
          <target state="translated">For more control over the expansion, the &lt;code&gt;gv-define-expander&lt;/code&gt; macro can be used. For instance, a settable &lt;code&gt;substring&lt;/code&gt; could be implemented this way:</target>
        </trans-unit>
        <trans-unit id="524ad0277d25c2a67f3998052801445b5918661a" translate="yes" xml:space="preserve">
          <source>For more information about currently defined categories, run the command</source>
          <target state="translated">現在定義されているカテゴリの詳細については、コマンド</target>
        </trans-unit>
        <trans-unit id="b5c46c52685405cf067e15388e386b840ba65dc7" translate="yes" xml:space="preserve">
          <source>For more information about general sequence and array predicates, see &lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;Sequences Arrays Vectors&lt;/a&gt;, and &lt;a href=&quot;arrays#Arrays&quot;&gt;Arrays&lt;/a&gt;.</source>
          <target state="translated">For more information about general sequence and array predicates, see &lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;Sequences Arrays Vectors&lt;/a&gt;, and &lt;a href=&quot;arrays#Arrays&quot;&gt;Arrays&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="db111e5010118b2c0af6eaa6bee37a4412fe7c17" translate="yes" xml:space="preserve">
          <source>For most image types, the value of a &lt;code&gt;:data&lt;/code&gt; property should be a string containing the image data. Some image types do not support &lt;code&gt;:data&lt;/code&gt;; for some others, &lt;code&gt;:data&lt;/code&gt; alone is not enough, so you need to use other image properties along with &lt;code&gt;:data&lt;/code&gt;. See the following subsections for details.</source>
          <target state="translated">For most image types, the value of a &lt;code&gt;:data&lt;/code&gt; property should be a string containing the image data. Some image types do not support &lt;code&gt;:data&lt;/code&gt; ; for some others, &lt;code&gt;:data&lt;/code&gt; alone is not enough, so you need to use other image properties along with &lt;code&gt;:data&lt;/code&gt; . See the following subsections for details.</target>
        </trans-unit>
        <trans-unit id="1ef84bfa8f9cff2af4cd7df121bd6682024ceda1" translate="yes" xml:space="preserve">
          <source>For most purposes, you can think of the current binding as the innermost local binding, or the global binding if there is no local binding. To be more precise, a rule called the &lt;em&gt;scoping rule&lt;/em&gt; determines where in a program a local binding takes effect. The default scoping rule in Emacs Lisp is called &lt;em&gt;dynamic scoping&lt;/em&gt;, which simply states that the current binding at any given point in the execution of a program is the most recently-created binding for that variable that still exists. For details about dynamic scoping, and an alternative scoping rule called &lt;em&gt;lexical scoping&lt;/em&gt;, See &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Variable Scoping&lt;/a&gt;.</source>
          <target state="translated">For most purposes, you can think of the current binding as the innermost local binding, or the global binding if there is no local binding. To be more precise, a rule called the &lt;em&gt;scoping rule&lt;/em&gt; determines where in a program a local binding takes effect. The default scoping rule in Emacs Lisp is called &lt;em&gt;dynamic scoping&lt;/em&gt;, which simply states that the current binding at any given point in the execution of a program is the most recently-created binding for that variable that still exists. For details about dynamic scoping, and an alternative scoping rule called &lt;em&gt;lexical scoping&lt;/em&gt;, See &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Variable Scoping&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="89f804faf672e4d150387c9abaf8964a26ecd02a" translate="yes" xml:space="preserve">
          <source>For on-demand loading of external libraries which are known in advance to be required by certain Emacs primitives, see &lt;a href=&quot;dynamic-libraries#Dynamic-Libraries&quot;&gt;Dynamic Libraries&lt;/a&gt;.</source>
          <target state="translated">For on-demand loading of external libraries which are known in advance to be required by certain Emacs primitives, see &lt;a href=&quot;dynamic-libraries#Dynamic-Libraries&quot;&gt;Dynamic Libraries&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b86b2bc573dc8ed225848ddb470b4ae1aa78a403" translate="yes" xml:space="preserve">
          <source>For other concatenation functions, see &lt;code&gt;mapconcat&lt;/code&gt; in &lt;a href=&quot;mapping-functions#Mapping-Functions&quot;&gt;Mapping Functions&lt;/a&gt;, &lt;code&gt;concat&lt;/code&gt; in &lt;a href=&quot;creating-strings#Creating-Strings&quot;&gt;Creating Strings&lt;/a&gt;, and &lt;code&gt;append&lt;/code&gt; in &lt;a href=&quot;building-lists#Building-Lists&quot;&gt;Building Lists&lt;/a&gt;.</source>
          <target state="translated">For other concatenation functions, see &lt;code&gt;mapconcat&lt;/code&gt; in &lt;a href=&quot;mapping-functions#Mapping-Functions&quot;&gt;Mapping Functions&lt;/a&gt;, &lt;code&gt;concat&lt;/code&gt; in &lt;a href=&quot;creating-strings#Creating-Strings&quot;&gt;Creating Strings&lt;/a&gt;, and &lt;code&gt;append&lt;/code&gt; in &lt;a href=&quot;building-lists#Building-Lists&quot;&gt;Building Lists&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a6cbbd948804398001fb9ec5cd695738cd21d0f5" translate="yes" xml:space="preserve">
          <source>For performance reasons, stack-allocated strings are limited to</source>
          <target state="translated">性能上の理由から、スタック割り当て文字列は</target>
        </trans-unit>
        <trans-unit id="a60122d601392756258517760482e4ba7a25429e" translate="yes" xml:space="preserve">
          <source>For performance, the operating system may cache or alias changes made by these functions instead of writing them immediately to secondary storage. See &lt;a href=&quot;files-and-storage#Files-and-Storage&quot;&gt;Files and Storage&lt;/a&gt;.</source>
          <target state="translated">パフォーマンスのために、オペレーティングシステムは、これらの関数によって行われた変更をすぐにセカンダリストレージに書き込むのではなく、キャッシュまたはエイリアス化する場合があります。&lt;a href=&quot;files-and-storage#Files-and-Storage&quot;&gt;ファイルとストレージを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="faf441b6a95cda64d0224c1f65fb2e965874dda2" translate="yes" xml:space="preserve">
          <source>For performance, the operating system may not write the backup file&amp;rsquo;s contents to secondary storage immediately, or may alias the backup data with the original until one or the other is later modified. See &lt;a href=&quot;files-and-storage#Files-and-Storage&quot;&gt;Files and Storage&lt;/a&gt;.</source>
          <target state="translated">パフォーマンスのために、オペレーティングシステムは、バックアップファイルの内容をすぐにセカンダリストレージに書き込まない場合や、どちらかが後で変更されるまでバックアップデータを元のデータでエイリアスする場合があります。&lt;a href=&quot;files-and-storage#Files-and-Storage&quot;&gt;ファイルとストレージを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="da6be8c7db7588c481d6d3eeb3044b3834dbeafd" translate="yes" xml:space="preserve">
          <source>For programming languages, an important feature of a major mode is to provide automatic indentation. There are two parts: one is to decide what is the right indentation of a line, and the other is to decide when to reindent a line. By default, Emacs reindents a line whenever you type a character in &lt;code&gt;electric-indent-chars&lt;/code&gt;, which by default only includes Newline. Major modes can add chars to &lt;code&gt;electric-indent-chars&lt;/code&gt; according to the syntax of the language.</source>
          <target state="translated">プログラミング言語の場合、メジャーモードの重要な機能は、自動インデントを提供することです。2つの部分があります。1つは線の正しいインデントを決定することであり、もう1つは線をいつ再インデントするかを決定することです。デフォルトでは、Emacsは &lt;code&gt;electric-indent-chars&lt;/code&gt; に文字を入力するたびに行を再インデントします。これには、デフォルトでは改行のみが含まれます。メジャーモードでは、言語の構文に従って、 &lt;code&gt;electric-indent-chars&lt;/code&gt; 文字に文字を追加できます。</target>
        </trans-unit>
        <trans-unit id="ddab071833859a06b07541c99492d90ddd4fc900" translate="yes" xml:space="preserve">
          <source>For purposes of evaluation, the array is a constant&amp;mdash;i.e., it evaluates to itself.</source>
          <target state="translated">評価の目的で、配列は定数です。つまり、配列はそれ自体に評価されます。</target>
        </trans-unit>
        <trans-unit id="8d5a0c7b7da7f4d2d585a62d2acde8ed3120c9fb" translate="yes" xml:space="preserve">
          <source>For relative time values, Emacs considers a month to be exactly thirty days, and a year to be exactly 365.25 days.</source>
          <target state="translated">時間の相対的な値については、Emacsでは1ヶ月をちょうど30日、1年をちょうど365.25日と考えています。</target>
        </trans-unit>
        <trans-unit id="90054c0c3e1da561a0a9026341ea698f8915bbc4" translate="yes" xml:space="preserve">
          <source>For replacing display specifications, &lt;em&gt;the text that has the property&lt;/em&gt; means all the consecutive characters that have the same Lisp object as their &lt;code&gt;display&lt;/code&gt; property; these characters are replaced as a single unit. If two characters have different Lisp objects as their &lt;code&gt;display&lt;/code&gt; properties (i.e., objects which are not &lt;code&gt;eq&lt;/code&gt;), they are handled separately.</source>
          <target state="translated">表示仕様を置き換える場合&lt;em&gt;、プロパティを持つテキストは、&lt;/em&gt; &lt;code&gt;display&lt;/code&gt; プロパティと同じLispオブジェクトを持つすべての連続する文字を意味します。これらの文字は単一のユニットとして置き換えられます。2つの文字の &lt;code&gt;display&lt;/code&gt; プロパティとして異なるLispオブジェクト（つまり、 &lt;code&gt;eq&lt;/code&gt; ではないオブジェクト）がある場合、それらは別々に処理されます。</target>
        </trans-unit>
        <trans-unit id="e2f9af1a35a2660fd8409da9cb1f927de77abafd" translate="yes" xml:space="preserve">
          <source>For representing control characters to be found in files or strings, we recommend the &amp;lsquo;</source>
          <target state="translated">ファイルまたは文字列に含まれる制御文字を表すには、「」をお勧めします。</target>
        </trans-unit>
        <trans-unit id="8fe2d9b8dc77be3c74c45be6d83fd5245b7aadc8" translate="yes" xml:space="preserve">
          <source>For some languages, upper and lower case letters are not in one-to-one correspondence. There may be two different lower case letters with the same upper case equivalent. In these cases, you need to specify the maps for both lower case and upper case.</source>
          <target state="translated">言語によっては、大文字と小文字が一対一に対応していない場合があります。2 つの異なる小文字が存在し、同じ大文字に相当する大文字が存在する場合があります。このような場合は、小文字と大文字の両方のマップを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="c71d3f2b7e58f202f82ff156034a0110342e4f42" translate="yes" xml:space="preserve">
          <source>For some purposes, it does not matter whether a list is proper, circular or dotted. If a program doesn&amp;rsquo;t look far enough down the list to see the &lt;small&gt;CDR&lt;/small&gt; of the final cons cell, it won&amp;rsquo;t care. However, some functions that operate on lists demand proper lists and signal errors if given a dotted list. Most functions that try to find the end of a list enter infinite loops if given a circular list.</source>
          <target state="translated">目的によっては、リストが適切か、円形か点線かは関係ありません。プログラムがリストを十分に下に見て、最終的なconsセルの&lt;small&gt;CDR&lt;/small&gt;を確認できない場合、プログラムは気にしません。ただし、リストを操作する一部の関数は、適切なリストを要求し、点線のリストが指定されている場合はエラーを通知します。リストの終わりを見つけようとするほとんどの関数は、循環リストが与えられた場合、無限ループに入ります。</target>
        </trans-unit>
        <trans-unit id="d500549849bc15bef76128691a5baf2432335f7d" translate="yes" xml:space="preserve">
          <source>For some purposes, the nondirectory part is further subdivided into the name proper and the &lt;em&gt;version number&lt;/em&gt;. On most systems, only backup files have version numbers in their names.</source>
          <target state="translated">いくつかの目的のために、非ディレクトリ部分はさらに適切な名前と&lt;em&gt;バージョン番号に&lt;/em&gt;細分されます。ほとんどのシステムでは、名前にバージョン番号が含まれているのはバックアップファイルのみです。</target>
        </trans-unit>
        <trans-unit id="112d87a662d1681332b9049c4a51e3d53eb7aa11" translate="yes" xml:space="preserve">
          <source>For stretches of text that should temporarily stand out. For example, it is commonly assigned to the &lt;code&gt;mouse-face&lt;/code&gt; property for cursor highlighting (see &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;).</source>
          <target state="translated">一時的に目立つはずのテキストのストレッチ用。たとえば、カーソルを強調表示するために、通常、 &lt;code&gt;mouse-face&lt;/code&gt; プロパティに割り当てられます（&lt;a href=&quot;special-properties#Special-Properties&quot;&gt;特別なプロパティを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="42c65b3d7d99521ed4092ae00fce87c47ab3b0ba" translate="yes" xml:space="preserve">
          <source>For symbols in special obarrays, which are not used for ordinary purposes, it may make sense to use the property list cell in a nonstandard fashion; in fact, the abbrev mechanism does so (see &lt;a href=&quot;abbrevs#Abbrevs&quot;&gt;Abbrevs&lt;/a&gt;).</source>
          <target state="translated">通常の目的には使用されない特別なオブジェクトのシンボルの場合、プロパティリストセルを非標準の方法で使用することが理にかなっている場合があります。実際には、略語機構（参照そう&lt;a href=&quot;abbrevs#Abbrevs&quot;&gt;略語を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a852800d4f26ade1bdda0b79a03c7fc24d024ed5" translate="yes" xml:space="preserve">
          <source>For syntactic analysis, such as in indentation, often the useful thing is to compute the syntactic state corresponding to a given buffer position. This function does that conveniently.</source>
          <target state="translated">インデントのような構文解析のためには、多くの場合、与えられたバッファの位置に対応する構文状態を計算するのが便利です。この関数はそれを便利に行う。</target>
        </trans-unit>
        <trans-unit id="0ca28c3cc32b5a56a828f789e939bb88d8e4bc04" translate="yes" xml:space="preserve">
          <source>For technical reasons, a unibyte and a multibyte string are &lt;code&gt;equal&lt;/code&gt; if and only if they contain the same sequence of character codes and all these codes are either in the range 0 through 127 (</source>
          <target state="translated">技術的な理由から、ユニバイト文字列とマルチバイト文字列は、同じ文字コードのシーケンスが含まれ、これらのコードがすべて0〜127の範囲にある場合にのみ &lt;code&gt;equal&lt;/code&gt; なります（</target>
        </trans-unit>
        <trans-unit id="45642cd47dfa6bf8d29ea83a9bea3bad88b8f0bd" translate="yes" xml:space="preserve">
          <source>For text concerning errors, warnings, or successes. For example, these are used for messages in</source>
          <target state="translated">エラー、警告、または成功に関するテキスト。例えば、これらは</target>
        </trans-unit>
        <trans-unit id="6e07008dae896457b72d081a4580cd31c5207a4e" translate="yes" xml:space="preserve">
          <source>For text matching (respectively) permanent search matches, interactive search matches, and lazy highlighting other matches than the current interactive one.</source>
          <target state="translated">テキストマッチ (それぞれ)の恒久的な検索マッチ、インタラクティブな検索マッチ、および現在のインタラクティブなマッチ以外の他のマッチの遅延強調表示のために。</target>
        </trans-unit>
        <trans-unit id="199754d5171ec2cef7de10ed893154f11d501bd8" translate="yes" xml:space="preserve">
          <source>For that reason, it is better to avoid binding commands to key sequences where the end of the key sequence is a prefix of a key translation. The main such problematic suffixes/prefixes are</source>
          <target state="translated">そのため、キー配列の末尾がキー変換の接頭辞になっているようなキー配列にコマンドをバインドするのは避けた方が良いでしょう。このような問題のある主な接尾辞/接頭辞は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f10e2ee38beb0efc1d5476196bbcfc128749e76f" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;(eval &lt;var&gt;form&lt;/var&gt;)&lt;/code&gt; forms used in a bindat specification, the &lt;var&gt;form&lt;/var&gt; can access and update these dynamically bound variables during evaluation:</source>
          <target state="translated">以下のために &lt;code&gt;(eval &lt;var&gt;form&lt;/var&gt;)&lt;/code&gt; bindat明細書中で使用されるフォーム、 &lt;var&gt;form&lt;/var&gt; 評価の際にこれらの動的にバインドされた変数にアクセスして更新することができます。</target>
        </trans-unit>
        <trans-unit id="ea753a8ffd58775e7c0c7c0606c76821fe2cfcae" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;pop&lt;/code&gt; macro, which removes the first element from a list, See &lt;a href=&quot;list-elements#List-Elements&quot;&gt;List Elements&lt;/a&gt;.</source>
          <target state="translated">リストから最初の要素を削除する &lt;code&gt;pop&lt;/code&gt; マクロについては、「&lt;a href=&quot;list-elements#List-Elements&quot;&gt;リスト要素&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="ef8376493cc4d066a996040b4337c10b4a0cd3a5" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;push&lt;/code&gt; macro, which adds an element to a list, See &lt;a href=&quot;list-variables#List-Variables&quot;&gt;List Variables&lt;/a&gt;.</source>
          <target state="translated">リストに要素を追加する &lt;code&gt;push&lt;/code&gt; マクロについては、「&lt;a href=&quot;list-variables#List-Variables&quot;&gt;リスト変数&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="0f3fe319bd30de7f1551c3b872e3e4bba5b856b1" translate="yes" xml:space="preserve">
          <source>For the better understanding of what stable sort is, consider the following vector example. After sorting, all items whose &lt;code&gt;car&lt;/code&gt; is 8 are grouped at the beginning of &lt;code&gt;vector&lt;/code&gt;, but their relative order is preserved. All items whose &lt;code&gt;car&lt;/code&gt; is 9 are grouped at the end of &lt;code&gt;vector&lt;/code&gt;, but their relative order is also preserved:</source>
          <target state="translated">安定ソートとは何かをよりよく理解するために、次のベクトルの例を検討してください。ソート後、 &lt;code&gt;car&lt;/code&gt; が8であるすべてのアイテムは、 &lt;code&gt;vector&lt;/code&gt; の先頭でグループ化されますが、それらの相対的な順序は保持されます。 &lt;code&gt;car&lt;/code&gt; が9であるすべてのアイテムは、 &lt;code&gt;vector&lt;/code&gt; の最後にグループ化されますが、それらの相対的な順序も保持されます。</target>
        </trans-unit>
        <trans-unit id="87d8274e9315f6d205c44c909122fe4b2bcd2515" translate="yes" xml:space="preserve">
          <source>For the common case of all backups going into one directory, the alist should contain a single element pairing &amp;lsquo;</source>
          <target state="translated">すべてのバックアップが1つのディレクトリに入る一般的なケースでは、リストに単一の要素のペアが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="397056acd2602b1eb8236b9ebdd8ab76eec096da" translate="yes" xml:space="preserve">
          <source>For the customization option &lt;var&gt;symbol&lt;/var&gt;, add &lt;var&gt;value&lt;/var&gt; to the list of reasonable values.</source>
          <target state="translated">カスタマイズオプション &lt;var&gt;symbol&lt;/var&gt; については、妥当な値のリストに &lt;var&gt;value&lt;/var&gt; を追加してください。</target>
        </trans-unit>
        <trans-unit id="4a38dedbdf3df9cf3e1410eb6cee8a459e8d9366" translate="yes" xml:space="preserve">
          <source>For the following functions, X and Y coordinates are reported in integer character units, i.e., numbers of lines and columns respectively. On a graphical display, each &amp;ldquo;line&amp;rdquo; and &amp;ldquo;column&amp;rdquo; corresponds to the height and width of the default character specified by the frame&amp;rsquo;s default font (see &lt;a href=&quot;frame-font#Frame-Font&quot;&gt;Frame Font&lt;/a&gt;).</source>
          <target state="translated">以下の関数の場合、X座標とY座標は整数文字単位、つまりそれぞれ行数と列数で報告されます。グラフィック表示では、各「行」と「列」は、フレームのデフォルトフォントで指定されたデフォルト文字の高さと幅に対応します（&lt;a href=&quot;frame-font#Frame-Font&quot;&gt;フレームフォントを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="25a6d2221bff01069101fec57cebeb42f17550b9" translate="yes" xml:space="preserve">
          <source>For the full list of the possible states, see the manual page of the &lt;code&gt;ps&lt;/code&gt; command.</source>
          <target state="translated">可能な状態の完全なリストについては、 &lt;code&gt;ps&lt;/code&gt; コマンドのマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="e75de6ea26daa8fe7f4c02ce82f35f330195a3b1" translate="yes" xml:space="preserve">
          <source>For the most part, &amp;lsquo;</source>
          <target state="translated">ほとんどの場合、 '</target>
        </trans-unit>
        <trans-unit id="8f083f87437f8af6d0e911df4fe787b5367ecfff" translate="yes" xml:space="preserve">
          <source>For the next three functions, the optional argument &lt;var&gt;table&lt;/var&gt; defaults to the current buffer&amp;rsquo;s category table.</source>
          <target state="translated">次の3つの関数では、オプションの引数 &lt;var&gt;table&lt;/var&gt; デフォルトで現在のバッファのカテゴリテーブルになります。</target>
        </trans-unit>
        <trans-unit id="0de287c6c6b45bac437b1271e755cca625f2d489" translate="yes" xml:space="preserve">
          <source>For the remaining character sets, those that you don&amp;rsquo;t specify explicitly, Emacs chooses a font based on &lt;var&gt;fontpattern&lt;/var&gt;: it replaces &amp;lsquo;</source>
          <target state="translated">明示的に指定しない残りの文字セットについては、Emacsは &lt;var&gt;fontpattern&lt;/var&gt; に基づいてフォントを選択します：それは 'を置き換えます</target>
        </trans-unit>
        <trans-unit id="a906a8f725709d4b0de4a96ab4461367a34e3920" translate="yes" xml:space="preserve">
          <source>For the size parameters, the value must be an integer. The position parameter names &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; are not totally accurate, because some values indicate the position of the right or bottom edges instead. The &lt;var&gt;value&lt;/var&gt; possibilities for the position parameters are: an integer, a list &lt;code&gt;(+ &lt;var&gt;pos&lt;/var&gt;)&lt;/code&gt;, or a list &lt;code&gt;(- &lt;var&gt;pos&lt;/var&gt;)&lt;/code&gt;; as previously described (see &lt;a href=&quot;position-parameters#Position-Parameters&quot;&gt;Position Parameters&lt;/a&gt;).</source>
          <target state="translated">サイズパラメータの場合、値は整数である必要があります。一部の値は代わりに右エッジまたは下端の位置を示すため、位置パラメータ名の &lt;code&gt;left&lt;/code&gt; と &lt;code&gt;top&lt;/code&gt; は完全に正確ではありません。位置パラメーターの &lt;var&gt;value&lt;/var&gt; 可能性は次のとおりです。整数、リスト &lt;code&gt;(+ &lt;var&gt;pos&lt;/var&gt;)&lt;/code&gt; 、またはリスト &lt;code&gt;(- &lt;var&gt;pos&lt;/var&gt;)&lt;/code&gt; ; 前に説明したように（&lt;a href=&quot;position-parameters#Position-Parameters&quot;&gt;位置パラメータを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="bd63f6190989b582ea9c376026bf123ee7491af3" translate="yes" xml:space="preserve">
          <source>For the vector, it is even simpler because you don&amp;rsquo;t need setq:</source>
          <target state="translated">ベクトルの場合、setqが必要ないため、さらに簡単です。</target>
        </trans-unit>
        <trans-unit id="2ffffe0d3dd28ebd8002e469cb5d2dfd42923c8e" translate="yes" xml:space="preserve">
          <source>For these reasons, advice should be reserved for the cases where you cannot modify a function&amp;rsquo;s behavior in any other way. If it is possible to do the same thing via a hook, that is preferable (see &lt;a href=&quot;hooks#Hooks&quot;&gt;Hooks&lt;/a&gt;). If you simply want to change what a particular key does, it may be better to write a new command, and remap the old command&amp;rsquo;s key bindings to the new one (see &lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;Remapping Commands&lt;/a&gt;).</source>
          <target state="translated">これらの理由から、他の方法で関数の動作を変更できない場合に備えて、アドバイスを予約する必要があります。フックを介して同じことを行うことが可能な場合は、それが望ましいです（&lt;a href=&quot;hooks#Hooks&quot;&gt;フックを&lt;/a&gt;参照）。あなたは、単に特定のキーが何を変更したい場合は、新しいコマンドを作成し、そして新しいもの（参照に、古いコマンドのキーバインディングをリマップする方が良いかもしれ&lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;再マップコマンド&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9b52907f69d9a50e4ec7ab8929f4201bc2b2e2e4" translate="yes" xml:space="preserve">
          <source>For this function to work, point must be somewhere between &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt;.</source>
          <target state="translated">この関数が機能するには、ポイントが &lt;var&gt;start&lt;/var&gt; と &lt;var&gt;end&lt;/var&gt; 間のどこかにある必要があります。</target>
        </trans-unit>
        <trans-unit id="b964418f003633de4c03a4cd9b1087f166bf72e2" translate="yes" xml:space="preserve">
          <source>For this reason, this function is seldom useful if you need to determine more than just the fact that a file is or isn&amp;rsquo;t a symbolic link. If you actually need the file name of the link target, use &lt;code&gt;file-chase-links&lt;/code&gt; or &lt;code&gt;file-truename&lt;/code&gt;, described in &lt;a href=&quot;truenames#Truenames&quot;&gt;Truenames&lt;/a&gt;.</source>
          <target state="translated">このため、ファイルがシンボリックリンクであるかどうかだけでなく、それ以上のことを判断する必要がある場合、この関数はほとんど役に立ちません。あなたは、実際には、リンク先のファイル名が必要な場合は、使用 &lt;code&gt;file-chase-links&lt;/code&gt; や &lt;code&gt;file-truename&lt;/code&gt; で説明&lt;a href=&quot;truenames#Truenames&quot;&gt;Truenames&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="19381c88cff85e8267de9ed9e5513028e6adebad" translate="yes" xml:space="preserve">
          <source>For yanking, one entry in the kill ring is designated the front of the ring. Some yank commands rotate the ring by designating a different element as the front. But this virtual rotation doesn&amp;rsquo;t change the list itself&amp;mdash;the most recent entry always comes first in the list.</source>
          <target state="translated">ヤンクの場合、キルリングの1つのエントリがリングの前面に指定されます。一部のヤンクコマンドは、フロントとして別の要素を指定することによってリングを回転させます。ただし、この仮想ローテーションによってリスト自体が変更されることはありません。常に最新のエントリがリストの最初に表示されます。</target>
        </trans-unit>
        <trans-unit id="fa1a0f8f3b130a55ce024bebdfbd50a7e2e42d15" translate="yes" xml:space="preserve">
          <source>Force &lt;var&gt;thunk&lt;/var&gt; to perform the evaluation of the forms specified in the &lt;code&gt;thunk-delay&lt;/code&gt; that created the thunk. The result of the evaluation of the last form is returned. The &lt;var&gt;thunk&lt;/var&gt; also &amp;ldquo;remembers&amp;rdquo; that it has been forced: Any further calls of &lt;code&gt;thunk-force&lt;/code&gt; with the same &lt;var&gt;thunk&lt;/var&gt; will just return the same result without evaluating the forms again.</source>
          <target state="translated">&lt;var&gt;thunk&lt;/var&gt; を作成したサンク &lt;code&gt;thunk-delay&lt;/code&gt; で指定されたフォームの評価を実行するようにサンクに強制します。最後のフォームの評価結果が返されます。 &lt;var&gt;thunk&lt;/var&gt; 任意のさらなる呼び出し：また、強制されたことを「記憶」し &lt;code&gt;thunk-force&lt;/code&gt; 同じで &lt;var&gt;thunk&lt;/var&gt; もう一度フォームを評価せずに同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="d8311d282a06bf7c13df916c21ae0692e8509152" translate="yes" xml:space="preserve">
          <source>Forcing Redisplay</source>
          <target state="translated">強制的な再表示</target>
        </trans-unit>
        <trans-unit id="50fe9b523b09e3d4f5eb9578dd9aa2cded42eb5b" translate="yes" xml:space="preserve">
          <source>Forcing redisplay.</source>
          <target state="translated">強制的に再表示します。</target>
        </trans-unit>
        <trans-unit id="54e5928d6cbe4200cfedd66bfae0116254371dd3" translate="yes" xml:space="preserve">
          <source>Foreground color, a string. The value can be a system-defined color name, or a hexadecimal color specification. See &lt;a href=&quot;color-names#Color-Names&quot;&gt;Color Names&lt;/a&gt;. On black-and-white displays, certain shades of gray are implemented by stipple patterns.</source>
          <target state="translated">前景色、文字列。値は、システム定義の色名、または16進数の色指定にすることができます。&lt;a href=&quot;color-names#Color-Names&quot;&gt;色名を&lt;/a&gt;参照してください。白黒ディスプレイでは、特定のグレーの色合いが点描パターンによって実装されます。</target>
        </trans-unit>
        <trans-unit id="d9151cf0df95ff2f005ffb2dbfff11e476773720" translate="yes" xml:space="preserve">
          <source>Format of Descriptions</source>
          <target state="translated">説明書のフォーマット</target>
        </trans-unit>
        <trans-unit id="690ff78b94f5f2ab90ba941868039323171c46a4" translate="yes" xml:space="preserve">
          <source>Format of GnuTLS Cryptography Inputs</source>
          <target state="translated">GnuTLS 暗号入力のフォーマット</target>
        </trans-unit>
        <trans-unit id="3b30bd7322a19ebf11a0420fbb9d0d2e2a952c4c" translate="yes" xml:space="preserve">
          <source>Format of Keymaps</source>
          <target state="translated">キーマップのフォーマット</target>
        </trans-unit>
        <trans-unit id="ffba191c046f0f3d86eca0356dcfa6c942799127" translate="yes" xml:space="preserve">
          <source>Formatted Text Properties</source>
          <target state="translated">書式付きテキストのプロパティ</target>
        </trans-unit>
        <trans-unit id="46ced2475097f609a37fcad0f6e2c12ef6e35700" translate="yes" xml:space="preserve">
          <source>Formatting Strings</source>
          <target state="translated">文字列の書式設定</target>
        </trans-unit>
        <trans-unit id="08ddf2db0601ff64b5999d791aceb04902f2ab24" translate="yes" xml:space="preserve">
          <source>Formatting custom &lt;code&gt;format&lt;/code&gt; specifications.</source>
          <target state="translated">カスタム &lt;code&gt;format&lt;/code&gt; 仕様のフォーマット。</target>
        </trans-unit>
        <trans-unit id="85e179fd2599024e08f48eaf746a1effe699c9af" translate="yes" xml:space="preserve">
          <source>Formatting is often useful for computing messages to be displayed. In fact, the functions &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; provide the same formatting feature described here; they differ from &lt;code&gt;format-message&lt;/code&gt; only in how they use the result of formatting.</source>
          <target state="translated">書式設定は、表示されるメッセージを計算するのに役立つことがよくあります。実際、関数 &lt;code&gt;message&lt;/code&gt; と &lt;code&gt;error&lt;/code&gt; は、ここで説明したものと同じフォーマット機能を提供します。これらは、フォーマットの結果をどのように使用するかという点でのみ &lt;code&gt;format-message&lt;/code&gt; と異なります。</target>
        </trans-unit>
        <trans-unit id="1e169267238c8a26c2ddbb83e054dfbd79640e6b" translate="yes" xml:space="preserve">
          <source>Formatting text as the mode line would.</source>
          <target state="translated">モードラインのようにテキストをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="3c6860ed0688d49392f43c31b5e487af200d8da8" translate="yes" xml:space="preserve">
          <source>Forms that call functions.</source>
          <target state="translated">関数を呼び出すフォーム。</target>
        </trans-unit>
        <trans-unit id="a61c89f45d054dc7a27512e0b0970e65fadc39de" translate="yes" xml:space="preserve">
          <source>Forms that call macros.</source>
          <target state="translated">マクロを呼び出すフォーム。</target>
        </trans-unit>
        <trans-unit id="99a2a5d26385032afad4033277b91f1c2729bb11" translate="yes" xml:space="preserve">
          <source>Forms that evaluate to themselves.</source>
          <target state="translated">自分自身を評価するフォーム。</target>
        </trans-unit>
        <trans-unit id="ba4e72261283258434788542ba397135c10f39d8" translate="yes" xml:space="preserve">
          <source>Forward</source>
          <target state="translated">Forward</target>
        </trans-unit>
        <trans-unit id="03ff98c7185813598af4b44b2a4f969fae61d671" translate="yes" xml:space="preserve">
          <source>Four special values for &lt;code&gt;direction&lt;/code&gt; entries allow to implicitly specify the selected frame&amp;rsquo;s main window as the reference window: &lt;code&gt;leftmost&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;rightmost&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt;. This means that instead of, for example, &lt;code&gt;(direction&amp;nbsp;.&amp;nbsp;left)&amp;nbsp;(window&amp;nbsp;.&amp;nbsp;main)&lt;/code&gt; one can just specify &lt;code&gt;(direction&amp;nbsp;.&amp;nbsp;leftmost)&lt;/code&gt;. An existing &lt;code&gt;window&lt;/code&gt;&lt;var&gt;alist&lt;/var&gt; entry is ignored in such cases.</source>
          <target state="translated">&lt;code&gt;direction&lt;/code&gt; エントリの4つの特別な値により、選択したフレームのメインウィンドウを参照ウィンドウとして暗黙的に指定できます： &lt;code&gt;leftmost&lt;/code&gt; 、 &lt;code&gt;top&lt;/code&gt; 、 &lt;code&gt;rightmost&lt;/code&gt; 、 &lt;code&gt;bottom&lt;/code&gt; 。これは、たとえば &lt;code&gt;(direction&amp;nbsp;.&amp;nbsp;left)&amp;nbsp;(window&amp;nbsp;.&amp;nbsp;main)&lt;/code&gt; &lt;code&gt;(direction&amp;nbsp;.&amp;nbsp;leftmost)&lt;/code&gt; 代わりに、（direction .leftmost）を指定できることを意味します。このような場合、既存の &lt;code&gt;window&lt;/code&gt; &lt;var&gt;alist&lt;/var&gt; エントリは無視されます。</target>
        </trans-unit>
        <trans-unit id="f8be388d8709a99dab45a803379f214da551553c" translate="yes" xml:space="preserve">
          <source>Four-byte vector representing an Internet address. For example: &lt;code&gt;[127 0 0 1]&lt;/code&gt; for localhost.</source>
          <target state="translated">インターネットアドレスを表す4バイトのベクトル。例：ローカルホストの場合は &lt;code&gt;[127 0 0 1]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b64b0ae712554037fe6db96671213dc347089595" translate="yes" xml:space="preserve">
          <source>Fractional seconds as a number of nanoseconds. For timestamps returned by &lt;code&gt;extract_time&lt;/code&gt;, this is always nonnegative and less than one billion. (Although POSIX requires the type of &lt;code&gt;tv_nsec&lt;/code&gt; to be &lt;code&gt;long&lt;/code&gt;, the type is &lt;code&gt;long long&lt;/code&gt; on some nonstandard platforms.)</source>
          <target state="translated">ナノ秒数としての小数秒。 &lt;code&gt;extract_time&lt;/code&gt; によって返されるタイムスタンプの場合、これは常に負ではなく、10億未満です。 （POSIXにはの種類が必要ですが &lt;code&gt;tv_nsec&lt;/code&gt; をする &lt;code&gt;long&lt;/code&gt; 、タイプがあり &lt;code&gt;long long&lt;/code&gt; いくつかの非標準のプラットフォーム上で。）</target>
        </trans-unit>
        <trans-unit id="7635f609fc39a6b2309200df6c13ba7f981e6e93" translate="yes" xml:space="preserve">
          <source>Frame Configuration Type</source>
          <target state="translated">フレーム構成タイプ</target>
        </trans-unit>
        <trans-unit id="b3375a4b79b653dfb166deb920a1a8a07454332b" translate="yes" xml:space="preserve">
          <source>Frame Configurations</source>
          <target state="translated">フレーム構成</target>
        </trans-unit>
        <trans-unit id="2628654f3592f30e3e183e8fe28ea0baef770932" translate="yes" xml:space="preserve">
          <source>Frame Font</source>
          <target state="translated">フレームフォント</target>
        </trans-unit>
        <trans-unit id="48a4e1fb6a458c2e798e7f81d3081543b9b437d1" translate="yes" xml:space="preserve">
          <source>Frame Geometry</source>
          <target state="translated">フレーム形状</target>
        </trans-unit>
        <trans-unit id="3f455212bef49865fcc51892b83fce71911f1680" translate="yes" xml:space="preserve">
          <source>Frame Interaction Parameters</source>
          <target state="translated">フレーム相互作用パラメータ</target>
        </trans-unit>
        <trans-unit id="b00c42c9c273b5bc922c8b715a7c39b737a31f0e" translate="yes" xml:space="preserve">
          <source>Frame Layout</source>
          <target state="translated">フレームレイアウト</target>
        </trans-unit>
        <trans-unit id="ee5af9328eadec13e19d54784546362006d1c6a2" translate="yes" xml:space="preserve">
          <source>Frame Layouts with Side Windows</source>
          <target state="translated">サイドウィンドウのあるフレームレイアウト</target>
        </trans-unit>
        <trans-unit id="2def4ca016ae808f491d5589a4d3596db373a3bd" translate="yes" xml:space="preserve">
          <source>Frame Parameters</source>
          <target state="translated">フレームパラメータ</target>
        </trans-unit>
        <trans-unit id="3795259ac55a38a9c80dc78cb37d9173d40c7749" translate="yes" xml:space="preserve">
          <source>Frame Position</source>
          <target state="translated">フレーム位置</target>
        </trans-unit>
        <trans-unit id="8b0227b2f358f622998d1841dc8551f0359eac0d" translate="yes" xml:space="preserve">
          <source>Frame Size</source>
          <target state="translated">フレームサイズ</target>
        </trans-unit>
        <trans-unit id="b7ac3c8ffea3811343eb8213490bb38d98fb19f5" translate="yes" xml:space="preserve">
          <source>Frame Titles</source>
          <target state="translated">フレームタイトル</target>
        </trans-unit>
        <trans-unit id="9c5749558dd4c5bf4399310cd20ad88f7947524b" translate="yes" xml:space="preserve">
          <source>Frame Type</source>
          <target state="translated">フレームのタイプ</target>
        </trans-unit>
        <trans-unit id="e7c9cb1f7a76750767299beca11d5593148f6bbd" translate="yes" xml:space="preserve">
          <source>Frame parameters exist mostly for the sake of graphical displays. Most frame parameters have no effect when applied to a frame on a text terminal; only the &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;menu-bar-lines&lt;/code&gt;, &lt;code&gt;buffer-list&lt;/code&gt; and &lt;code&gt;buffer-predicate&lt;/code&gt; parameters do something special. If the terminal supports colors, the parameters &lt;code&gt;foreground-color&lt;/code&gt;, &lt;code&gt;background-color&lt;/code&gt;, &lt;code&gt;background-mode&lt;/code&gt; and &lt;code&gt;display-type&lt;/code&gt; are also meaningful. If the terminal supports frame transparency, the parameter &lt;code&gt;alpha&lt;/code&gt; is also meaningful.</source>
          <target state="translated">フレームパラメータは、主にグラフィック表示のために存在します。ほとんどのフレームパラメータは、テキスト端末のフレームに適用しても効果がありません。唯一の &lt;code&gt;height&lt;/code&gt; 、 &lt;code&gt;width&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;title&lt;/code&gt; 、 &lt;code&gt;menu-bar-lines&lt;/code&gt; 、 &lt;code&gt;buffer-list&lt;/code&gt; し、 &lt;code&gt;buffer-predicate&lt;/code&gt; のパラメータは、何か特別な操作を行います。端末が色をサポートしている場合、パラメータ &lt;code&gt;foreground-color&lt;/code&gt; 、 &lt;code&gt;background-color&lt;/code&gt; 、 &lt;code&gt;background-mode&lt;/code&gt; 、 &lt;code&gt;display-type&lt;/code&gt; も意味があります。端末がフレームの透過性をサポートしている場合、パラメータ &lt;code&gt;alpha&lt;/code&gt; も意味があります。</target>
        </trans-unit>
        <trans-unit id="0eaf8dac44f190c3faaf3c94ff99cbda42392375" translate="yes" xml:space="preserve">
          <source>Frame parameters usually specify frame sizes in character units. On graphical displays, the &lt;code&gt;default&lt;/code&gt; face determines the actual pixel sizes of these character units (see &lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;Face Attributes&lt;/a&gt;).</source>
          <target state="translated">フレームパラメータは通常、文字単位でフレームサイズを指定します。グラフィックディスプレイでは、 &lt;code&gt;default&lt;/code&gt; 面によってこれらの文字単位の実際のピクセルサイズが決まります（&lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;面の属性を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e93788474e90074ae4a2304390f95b4eaa4aa995" translate="yes" xml:space="preserve">
          <source>Frame&amp;rsquo;s size.</source>
          <target state="translated">フレームのサイズ。</target>
        </trans-unit>
        <trans-unit id="e3e7a3833d19706ebf33b2c3baf8e05deeed7bca" translate="yes" xml:space="preserve">
          <source>Frames</source>
          <target state="translated">Frames</target>
        </trans-unit>
        <trans-unit id="1016cca46904e2542be02bd1ee40819628cf410e" translate="yes" xml:space="preserve">
          <source>Frames are listed from topmost (first) to bottommost (last). As a special case, if &lt;var&gt;display&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt; and specifies a live frame, it returns the child frames of that frame in Z (stacking) order.</source>
          <target state="translated">フレームは一番上（最初）から一番下（最後）までリストされます。特別な場合として、 &lt;var&gt;display&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外で、ライブフレームを指定している場合、そのフレームの子フレームをZ（スタッキング）順に返します。</target>
        </trans-unit>
        <trans-unit id="e869c0a12c0ebdcb83032af0ab6e9b29aa99d134" translate="yes" xml:space="preserve">
          <source>Frames have no read syntax. They print in hash notation, giving the frame&amp;rsquo;s title, plus its address in core (useful to identify the frame uniquely).</source>
          <target state="translated">フレームには読み取り構文がありません。それらはハッシュ表記で印刷され、フレームのタイトルとコア内のアドレス（フレームを一意に識別するのに役立ちます）を示します。</target>
        </trans-unit>
        <trans-unit id="e8c12e749eac8bfa8e0b8a6b5ce728ac241d622d" translate="yes" xml:space="preserve">
          <source>Frames last until explicitly deleted.</source>
          <target state="translated">フレームは明示的に削除されるまで続きます。</target>
        </trans-unit>
        <trans-unit id="aa0f21fa248066fad343c13774776ce1ec7db69f" translate="yes" xml:space="preserve">
          <source>Frames may be visible or invisible, or icons.</source>
          <target state="translated">フレームは見えている場合と見えていない場合がありますし、アイコンである場合もあります。</target>
        </trans-unit>
        <trans-unit id="0a7705c02c88885a265e66e6bb596b4a0e5c62bd" translate="yes" xml:space="preserve">
          <source>Fringe Bitmaps</source>
          <target state="translated">フリンジビットマップ</target>
        </trans-unit>
        <trans-unit id="1aceb2d056e100bb87ff7213c426cc3f95936843" translate="yes" xml:space="preserve">
          <source>Fringe Cursors</source>
          <target state="translated">フリンジ・カーズ</target>
        </trans-unit>
        <trans-unit id="0416d0190cff216cfabfea78b591f9bda7805597" translate="yes" xml:space="preserve">
          <source>Fringe Indicators</source>
          <target state="translated">フリンジ指標</target>
        </trans-unit>
        <trans-unit id="5fd5c0c63bf89cdc3cf251efbc18952a6efcce45" translate="yes" xml:space="preserve">
          <source>Fringe Size and Position</source>
          <target state="translated">フリンジのサイズと位置</target>
        </trans-unit>
        <trans-unit id="60d9defe1a472be58d3446f380572d057a4539e8" translate="yes" xml:space="preserve">
          <source>Fringes</source>
          <target state="translated">Fringes</target>
        </trans-unit>
        <trans-unit id="a6c57f8a9bfb2be0237a1ce84804479a5b55ef2a" translate="yes" xml:space="preserve">
          <source>Frobnicate and bifurcate flanges</source>
          <target state="translated">フロブニケートフランジと分岐フランジ</target>
        </trans-unit>
        <trans-unit id="7d7a9a3b073942c9c4a39433167a05cedca55794" translate="yes" xml:space="preserve">
          <source>Frobnicate buffer:</source>
          <target state="translated">フロブニケイトバッファ。</target>
        </trans-unit>
        <trans-unit id="ae12ce3903efdf6296129a3285e0ae497ae13b29" translate="yes" xml:space="preserve">
          <source>From the past subsections we already know that &lt;code&gt;display-buffer&lt;/code&gt; must be supplied with a number of display actions (see &lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;Choosing Window&lt;/a&gt;) in order to display a buffer. In a completely uncustomized Emacs, these actions are specified by &lt;code&gt;display-buffer-fallback-action&lt;/code&gt; in the following order of precedence: Reuse a window, pop up a new window on the same frame, use a window previously showing the buffer, use some window and pop up a new frame. (Note that the remaining actions named by &lt;code&gt;display-buffer-fallback-action&lt;/code&gt; are void in an uncustomized Emacs).</source>
          <target state="translated">過去のサブセクションから、 &lt;code&gt;display-buffer&lt;/code&gt; を表示するには、display-bufferにいくつかの表示アクション（&lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;ウィンドウの選択を&lt;/a&gt;参照）を指定する必要があることがすでにわかっています。完全にカスタマイズされていないEmacsでは、これらのアクションは &lt;code&gt;display-buffer-fallback-action&lt;/code&gt; によって次の優先順位で指定されます：ウィンドウを再利用する、同じフレームに新しいウィンドウをポップアップする、以前にバッファーを表示していたウィンドウを使用する、ウィンドウを使用する新しいフレームをポップアップします。 （ &lt;code&gt;display-buffer-fallback-action&lt;/code&gt; で指定された残りのアクションは、カスタマイズされていないEmacsでは無効であることに注意してください）。</target>
        </trans-unit>
        <trans-unit id="c4d63e4c56f1d2b74aaf3de1c3943ce348748d84" translate="yes" xml:space="preserve">
          <source>From:</source>
          <target state="translated">From:</target>
        </trans-unit>
        <trans-unit id="0ebe3e47a285e380363401a28eb7f3dddc4e9c33" translate="yes" xml:space="preserve">
          <source>Full-height and full-width frames are more similar to maximized frames in this regard. However, these typically display an external border which might be absent with maximized frames. Hence the heights of maximized and full-height frames and the widths of maximized and full-width frames often differ by a few pixels.</source>
          <target state="translated">フルハイトフレームとフルワイドフレームは、この点で最大化フレームに似ています。しかし、これらのフレームは通常、最大化フレームには存在しないかもしれない外部ボーダーを表示します。そのため、最大化フレームと全高フレームの高さ、および最大化フレームと全幅フレームの幅は、しばしば数ピクセルの違いがあります。</target>
        </trans-unit>
        <trans-unit id="0227794e334ddbac1cacd5653be8fdf6837f6bbe" translate="yes" xml:space="preserve">
          <source>Full-screen on macOS hides both the tool-bar and the menu-bar, however both will be displayed if the mouse pointer is moved to the top of the screen.</source>
          <target state="translated">macOSのフルスクリーンはツールバーとメニューバーの両方を非表示にしますが、マウスポインタを画面上部に移動させると両方が表示されます。</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="a3593edc88e17616adbb4037346eb999d6ceb735" translate="yes" xml:space="preserve">
          <source>Function Keys</source>
          <target state="translated">ファンクションキー</target>
        </trans-unit>
        <trans-unit id="760cf6a6d209c21ac6c4fd1b396c72c47be7d5a6" translate="yes" xml:space="preserve">
          <source>Function Type</source>
          <target state="translated">機能の種類</target>
        </trans-unit>
        <trans-unit id="edb917120f9cb05f9cf4013067ef2c91be5076f9" translate="yes" xml:space="preserve">
          <source>Function arguments, e.g., the &lt;var&gt;time&lt;/var&gt; argument to &lt;code&gt;current-time-string&lt;/code&gt;, accept a more-general &lt;em&gt;time value&lt;/em&gt; format, which can be a Lisp timestamp, &lt;code&gt;nil&lt;/code&gt; for the current time, a single floating-point number for seconds, or a list &lt;code&gt;(&lt;var&gt;high&lt;/var&gt; &lt;var&gt;low&lt;/var&gt; &lt;var&gt;micro&lt;/var&gt;)&lt;/code&gt; or &lt;code&gt;(&lt;var&gt;high&lt;/var&gt;
&lt;var&gt;low&lt;/var&gt;)&lt;/code&gt; that is a truncated list timestamp with missing elements taken to be zero.</source>
          <target state="translated">関数の引数、たとえば &lt;code&gt;current-time-string&lt;/code&gt; への &lt;var&gt;time&lt;/var&gt; 引数は、より一般的な&lt;em&gt;時間値の&lt;/em&gt;形式を受け入れます。これは、Lispタイムスタンプ、現在の時刻の &lt;code&gt;nil&lt;/code&gt; 、秒の単一の浮動小数点数、またはリスト &lt;code&gt;(&lt;var&gt;high&lt;/var&gt; &lt;var&gt;low&lt;/var&gt; &lt;var&gt;micro&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;high&lt;/var&gt; &lt;var&gt;low&lt;/var&gt; &lt;var&gt;micro&lt;/var&gt; ）または &lt;code&gt;(&lt;var&gt;high&lt;/var&gt; &lt;var&gt;low&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;high&lt;/var&gt; &lt;var&gt;low&lt;/var&gt; ）は、欠落している要素がゼロと見なされる切り捨てられたリストのタイムスタンプです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b933407dd477578aff5c3408d8b3e8fdaf706985" translate="yes" xml:space="preserve">
          <source>Function calls (see &lt;a href=&quot;functions#Functions&quot;&gt;Functions&lt;/a&gt;).</source>
          <target state="translated">関数呼び出し（&lt;a href=&quot;functions#Functions&quot;&gt;関数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1af483dbbd3691ff179fefeb552423fd10c4d63c" translate="yes" xml:space="preserve">
          <source>Function keys &amp;ndash; keys with names, not symbols.</source>
          <target state="translated">ファンクションキー&amp;ndash;記号ではなく名前の付いたキー。</target>
        </trans-unit>
        <trans-unit id="c28f90844ff41af6464401dafa16370f6a7ddc41" translate="yes" xml:space="preserve">
          <source>Function of one argument (the response to &lt;var&gt;capability-command&lt;/var&gt;), which returns either &lt;code&gt;nil&lt;/code&gt;, or the command to activate</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; またはアクティブ化するコマンドのいずれかを返す1つの引数の関数（ &lt;var&gt;capability-command&lt;/var&gt; への応答）</target>
        </trans-unit>
        <trans-unit id="2599b4160212dbdafa79551462c78d2a10591f78" translate="yes" xml:space="preserve">
          <source>Function to call to quit the current buffer.</source>
          <target state="translated">現在のバッファを終了するために呼び出す関数です。</target>
        </trans-unit>
        <trans-unit id="2692d9c0a34514bfbf97445668a3984d5bef3f10" translate="yes" xml:space="preserve">
          <source>Function to call when an action is invoked. The notification &lt;var&gt;id&lt;/var&gt; and the &lt;var&gt;key&lt;/var&gt; of the action are passed as arguments to the function.</source>
          <target state="translated">アクションが呼び出されたときに呼び出す関数。通知 &lt;var&gt;id&lt;/var&gt; とアクションの &lt;var&gt;key&lt;/var&gt; は、引数として関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="665a4b2f050f5cc458f3cc402b354ab096def6f3" translate="yes" xml:space="preserve">
          <source>Function to call when the notification has been closed by timeout or by the user. The function receive the notification &lt;var&gt;id&lt;/var&gt; and the closing &lt;var&gt;reason&lt;/var&gt; as arguments:</source>
          <target state="translated">通知がタイムアウトまたはユーザーによって閉じられたときに呼び出す関数。関数は、通知 &lt;var&gt;id&lt;/var&gt; と終了 &lt;var&gt;reason&lt;/var&gt; を引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="ab32b13d036c7de39a76ff893bf8bd1e2f72feca" translate="yes" xml:space="preserve">
          <source>Function to use for declaring that a region&amp;rsquo;s fontification is out of date. It takes two arguments, the beginning and end of the region. The default value of this variable is &lt;code&gt;font-lock-after-change-function&lt;/code&gt;.</source>
          <target state="translated">リージョンのフォント化が古くなっていることを宣言するために使用する関数。領域の始まりと終わりの2つの引数を取ります。この変数のデフォルト値は &lt;code&gt;font-lock-after-change-function&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="45c03975934a7989defa092bb01160d6a6d14561" translate="yes" xml:space="preserve">
          <source>Function to use for fontifying a region. It should take two arguments, the beginning and end of the region, and an optional third argument &lt;var&gt;verbose&lt;/var&gt;. If &lt;var&gt;verbose&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the function should print status messages. The default value is &lt;code&gt;font-lock-default-fontify-region&lt;/code&gt;.</source>
          <target state="translated">領域をフォント化するために使用する関数。領域の開始と終了の2つの引数と、オプションの3番目の引数 &lt;var&gt;verbose&lt;/var&gt; を使用する必要があります。場合は &lt;var&gt;verbose&lt;/var&gt; 非で &lt;code&gt;nil&lt;/code&gt; に、関数はステータスメッセージを印刷する必要があります。デフォルト値は &lt;code&gt;font-lock-default-fontify-region&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8989f04b34b16d9a2aa0d821237abfc63224442a" translate="yes" xml:space="preserve">
          <source>Function to use for fontifying the buffer. The default value is &lt;code&gt;font-lock-default-fontify-buffer&lt;/code&gt;.</source>
          <target state="translated">バッファをフォント化するために使用する関数。デフォルト値は &lt;code&gt;font-lock-default-fontify-buffer&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f0d73e2fdb1863b97c8fd3e0f73627aa524fcd58" translate="yes" xml:space="preserve">
          <source>Function to use for making sure a region of the current buffer has been fontified. It is called with two arguments, the beginning and end of the region. The default value of this variable is a function that calls &lt;code&gt;font-lock-default-fontify-buffer&lt;/code&gt; if the buffer is not fontified; the effect is to make sure the entire accessible portion of the buffer is fontified.</source>
          <target state="translated">現在のバッファの領域がフォント化されていることを確認するために使用する関数。リージョンの開始と終了の2つの引数で呼び出されます。この変数のデフォルト値は、バッファーが &lt;code&gt;font-lock-default-fontify-buffer&lt;/code&gt; いない場合にfont-lock-default-fontify-bufferを呼び出す関数です。その効果は、バッファのアクセス可能な部分全体がフォント化されていることを確認することです。</target>
        </trans-unit>
        <trans-unit id="0ef6fffab83d22c64fb8b7e968c6d90ca33655e7" translate="yes" xml:space="preserve">
          <source>Function to use for unfontifying a region. It should take two arguments, the beginning and end of the region. The default value is &lt;code&gt;font-lock-default-unfontify-region&lt;/code&gt;.</source>
          <target state="translated">リージョンのフォント化を解除するために使用する関数。リージョンの始まりと終わりの2つの引数を取る必要があります。デフォルト値は &lt;code&gt;font-lock-default-unfontify-region&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="13e180d67a77c305f9559009ded2e991db88b38d" translate="yes" xml:space="preserve">
          <source>Function to use for unfontifying the buffer. This is used when turning off Font Lock mode. The default value is &lt;code&gt;font-lock-default-unfontify-buffer&lt;/code&gt;.</source>
          <target state="translated">バッファのフォント化を解除するために使用する関数。これは、フォントロックモードをオフにするときに使用されます。デフォルト値は &lt;code&gt;font-lock-default-unfontify-buffer&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="29ac7b1b85bc7c68994dfadb32cfe581e050f9d7" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;bool&lt;/em&gt;&lt;strong&gt;copy_string_contents&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;arg&lt;/var&gt;, char *&lt;var&gt;buf&lt;/var&gt;, ptrdiff_t *&lt;var&gt;len&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">機能：&lt;em&gt;ブール&lt;/em&gt;&lt;strong&gt;copy_string_contents &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; を、emacs_value &lt;var&gt;arg&lt;/var&gt; 、CHAR * &lt;var&gt;buf&lt;/var&gt; は、ptrdiff_tの* &lt;var&gt;len&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="43209e42da44d5222b0c0bfa936fe69a5420310a" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;bool&lt;/em&gt;&lt;strong&gt;eq&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;val1&lt;/var&gt;, emacs_value &lt;var&gt;val2&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;bool &lt;/em&gt;&lt;strong&gt;eq &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;val1&lt;/var&gt; 、emacs_value &lt;var&gt;val2&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0a083631728d88f085771468c6029fc24c1f37a8" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;bool&lt;/em&gt;&lt;strong&gt;extract_big_integer&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;arg&lt;/var&gt;, int *&lt;var&gt;sign&lt;/var&gt;, ptrdiff_t *&lt;var&gt;count&lt;/var&gt;, emacs_limb_t *&lt;var&gt;magnitude&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">機能：&lt;em&gt;ブール&lt;/em&gt;&lt;strong&gt;extract_big_integer &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; を、emacs_value &lt;var&gt;arg&lt;/var&gt; 、int型* &lt;var&gt;sign&lt;/var&gt; 、ptrdiff_tの* &lt;var&gt;count&lt;/var&gt; 、emacs_limb_t * &lt;var&gt;magnitude&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f4ddf8e81ae981c10ee9c4e6dee208d399cff2e9" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;bool&lt;/em&gt;&lt;strong&gt;is_not_nil&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;val&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;bool &lt;/em&gt;&lt;strong&gt;is_not_nil &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;val&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="105efe21e95eddae77100b88bc0691a1b98616da" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;bool&lt;/em&gt;&lt;strong&gt;should_quit&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;bool &lt;/em&gt;&lt;strong&gt;should_quit &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="46496808f25e805ece88233ae0979c6b0e67bbb9" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;double&lt;/em&gt;&lt;strong&gt;extract_float&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;arg&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;double &lt;/em&gt;&lt;strong&gt;extract_float &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;arg&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="806aa18554b1b3b36361414dc4393f02345f2b77" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_finalizer&lt;/em&gt;&lt;strong&gt;get_user_finalizer&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value val)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_finalizer &lt;/em&gt;&lt;strong&gt;get_user_finalizer &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value val）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f92f9adbb019f4be1ff6bccd71fa37a1e9f0752d" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;funcall&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;func&lt;/var&gt;, ptrdiff_t &lt;var&gt;nargs&lt;/var&gt;, emacs_value *&lt;var&gt;args&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;funcall &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;func&lt;/var&gt; 、ptrdiff_t &lt;var&gt;nargs&lt;/var&gt; 、emacs_value * &lt;var&gt;args&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5fe746a0b8a5af7907e36602dcb7cce31e68cffe" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;intern&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, const char *name)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;インターン&lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、const char * name）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="69366add43b68eb7557dd679115032d775dfbad4" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;make_big_integer&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, int sign, ptrdiff_t count, const emacs_limb_t *magnitude)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;make_big_integer &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、int sign、ptrdiff_t count、const emacs_limb_t * Magnitude）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="86c526521a5e403b8f09c2f18f99a105ccb08944" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;make_float&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, double &lt;var&gt;d&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;make_float &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、double &lt;var&gt;d&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bc9949f3e2b70023f22e3482180edb77f785724c" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;make_function&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, ptrdiff_t &lt;var&gt;min_arity&lt;/var&gt;, ptrdiff_t &lt;var&gt;max_arity&lt;/var&gt;, subr &lt;var&gt;func&lt;/var&gt;, const char *&lt;var&gt;docstring&lt;/var&gt;, void *&lt;var&gt;data&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;make_function &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、ptrdiff_t &lt;var&gt;min_arity&lt;/var&gt; 、ptrdiff_t &lt;var&gt;max_arity&lt;/var&gt; 、subr &lt;var&gt;func&lt;/var&gt; 、const char * &lt;var&gt;docstring&lt;/var&gt; 、void * &lt;var&gt;data&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8f238a989184ce744dc0dae5aa6c965a18a3a354" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;make_global_ref&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;value&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;make_global_ref &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;value&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d34b56badd48e7a7cf5498a40e61664a4221c33b" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;make_integer&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, intmax_t &lt;var&gt;n&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;make_integer &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、intmax_t &lt;var&gt;n&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="efccd097e1691267c5cfc08bc051b9cf98d81271" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;make_string&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, const char *&lt;var&gt;str&lt;/var&gt;, ptrdiff_t &lt;var&gt;strlen&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;make_string &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、const char * &lt;var&gt;str&lt;/var&gt; 、ptrdiff_t &lt;var&gt;strlen&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf62b723d8f9b3fb90335a5aa55f3134e61cc766" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;make_time&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, struct timespec &lt;var&gt;time&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;make_time &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、struct timespec &lt;var&gt;time&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="31a94d5c82e3002103ed7286a113a6d5cd089bb8" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;make_user_ptr&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_finalizer &lt;var&gt;fin&lt;/var&gt;, void *&lt;var&gt;ptr&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;make_user_ptr &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_finalizer &lt;var&gt;fin&lt;/var&gt; 、void * &lt;var&gt;ptr&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1652df41489e8d88823b9838de59907c2468860b" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;module_func&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, ptrdiff_t &lt;var&gt;nargs&lt;/var&gt;, emacs_value *&lt;var&gt;args&lt;/var&gt;, void *&lt;var&gt;data&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;module_func &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、ptrdiff_t &lt;var&gt;nargs&lt;/var&gt; 、emacs_value * &lt;var&gt;args&lt;/var&gt; 、void * &lt;var&gt;data&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ce19e0806cf91f917cda3b2a89173ee7dc9a6b19" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;type_of&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;code&gt;object&lt;/code&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;type_of &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;code&gt;object&lt;/code&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3280286f69bb3ae9c426a405ae63213dd06d0a85" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;emacs_value&lt;/em&gt;&lt;strong&gt;vec_get&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;vector&lt;/var&gt;, ptrdiff_t &lt;var&gt;index&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;emacs_value &lt;/em&gt;&lt;strong&gt;vec_get &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;vector&lt;/var&gt; 、ptrdiff_t &lt;var&gt;index&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c2496c321ce0a12883501e61880954b51415ef01" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;enum&lt;/em&gt;&lt;strong&gt;emacs_funcall_exit&lt;/strong&gt;&lt;em&gt;non_local_exit_check (emacs_env *&lt;var&gt;env&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;enum &lt;/em&gt;&lt;strong&gt;emacs_funcall_exit &lt;/strong&gt;&lt;em&gt;non_local_exit_check（emacs_env * &lt;var&gt;env&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="250199de739b457ef5e93610db2ca9333416587c" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;enum&lt;/em&gt;&lt;strong&gt;emacs_funcall_exit&lt;/strong&gt;&lt;em&gt;non_local_exit_get (emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value *&lt;var&gt;symbol&lt;/var&gt;, emacs_value *&lt;var&gt;data&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;enum &lt;/em&gt;&lt;strong&gt;emacs_funcall_exit &lt;/strong&gt;&lt;em&gt;non_local_exit_get（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value * &lt;var&gt;symbol&lt;/var&gt; 、emacs_value * &lt;var&gt;data&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f3c781b29789dfa749cbb1d1693af71aa8277c2" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;enum&lt;/em&gt;&lt;strong&gt;emacs_process_input_result&lt;/strong&gt;&lt;em&gt;process_input (emacs_env *&lt;var&gt;env&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;列挙型&lt;/em&gt;&lt;strong&gt;emacs_process_input_result &lt;/strong&gt;&lt;em&gt;process_input（emacs_env * &lt;var&gt;env&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="15caa6ab5c37f9ed8c30fc5192ab79385790c989" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;int&lt;/em&gt;&lt;strong&gt;emacs_module_init&lt;/strong&gt;&lt;em&gt;(struct emacs_runtime *&lt;var&gt;runtime&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;int &lt;/em&gt;&lt;strong&gt;emacs_module_init&lt;/strong&gt;&lt;em&gt;（struct emacs_runtime * &lt;var&gt;runtime&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ea173b2b82b3bd673c8e85458c9503487035efe6" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;intmax_t&lt;/em&gt;&lt;strong&gt;extract_integer&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;arg&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;intmax_t &lt;/em&gt;&lt;strong&gt;extract_integer &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;arg&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4a5a11128abdaf3c29ce5252b15b3e9c9a7f9fbb" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;ptrdiff_t&lt;/em&gt;&lt;strong&gt;vec_size&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;vector&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;ptrdiff_t &lt;/em&gt;&lt;strong&gt;vec_size &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;vector&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5795593173edce0d076b2301ab601e1a95b34ab3" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;struct&lt;/em&gt;&lt;strong&gt;timespec&lt;/strong&gt;&lt;em&gt;extract_time (emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;time&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;struct &lt;/em&gt;&lt;strong&gt;timespec &lt;/strong&gt;&lt;em&gt;extract_time（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;time&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a04e17cbd62c2f9d6a93b6044fd6de96f73193a6" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;void&lt;/em&gt;&lt;strong&gt;*get_user_ptr&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value val)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;void &lt;/em&gt;&lt;strong&gt;* get_user_ptr&lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value val）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5cb40a95e6fdb40bbfdcb3f14ef923602f71cad3" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;void&lt;/em&gt;&lt;strong&gt;free_global_ref&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;global_value&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;void &lt;/em&gt;&lt;strong&gt;free_global_ref &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;global_value&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4460a463b7a8fa974d526e5f4101013d6894d26f" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;void&lt;/em&gt;&lt;strong&gt;non_local_exit_clear&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;void &lt;/em&gt;&lt;strong&gt;non_local_exit_clear &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="123e5abbfa3ddcfb3452326c55c6fea0835adde4" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;void&lt;/em&gt;&lt;strong&gt;non_local_exit_signal&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;error&lt;/var&gt;, emacs_value &lt;var&gt;data&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;void &lt;/em&gt;&lt;strong&gt;non_local_exit_signal &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;error&lt;/var&gt; 、emacs_value &lt;var&gt;data&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2998af0b6fdbee388b2efab4a316d0972913ffa0" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;void&lt;/em&gt;&lt;strong&gt;non_local_exit_throw&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;tag&lt;/var&gt;, emacs_value &lt;var&gt;value&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;void &lt;/em&gt;&lt;strong&gt;non_local_exit_throw &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;tag&lt;/var&gt; 、emacs_value &lt;var&gt;value&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0a6378174934b410fac15b7e06748ff0c46e5b8a" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;void&lt;/em&gt;&lt;strong&gt;set_user_finalizer&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;val&lt;/var&gt;, emacs_finalizer &lt;var&gt;fin&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;void &lt;/em&gt;&lt;strong&gt;set_user_finalizer &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;val&lt;/var&gt; 、emacs_finalizer &lt;var&gt;fin&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="848f2eb81bc2abc617b2bdd0e787737a3c29494b" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;void&lt;/em&gt;&lt;strong&gt;set_user_ptr&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;value&lt;/var&gt;, void *&lt;var&gt;ptr&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;void &lt;/em&gt;&lt;strong&gt;set_user_ptr &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;value&lt;/var&gt; 、void * &lt;var&gt;ptr&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d5f89a3e79a0b41ba6e1b673b9e5def02dde99dc" translate="yes" xml:space="preserve">
          <source>Function: &lt;em&gt;void&lt;/em&gt;&lt;strong&gt;vec_set&lt;/strong&gt;&lt;em&gt;(emacs_env *&lt;var&gt;env&lt;/var&gt;, emacs_value &lt;var&gt;vector&lt;/var&gt;, ptrdiff_t &lt;var&gt;index&lt;/var&gt;, emacs_value &lt;var&gt;value&lt;/var&gt;)&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;void &lt;/em&gt;&lt;strong&gt;vec_set &lt;/strong&gt;&lt;em&gt;（emacs_env * &lt;var&gt;env&lt;/var&gt; 、emacs_value &lt;var&gt;vector&lt;/var&gt; 、ptrdiff_t &lt;var&gt;index&lt;/var&gt; 、emacs_value &lt;var&gt;value&lt;/var&gt; ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c1d791c892cb854a1ab849fac40b8468ef31039b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;%&lt;/strong&gt;&lt;em&gt;dividend divisor&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;％&lt;/strong&gt;&lt;em&gt;被除数&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c5b18f8fd8b0717a513da835a9bab575062081b0" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;em&gt;number-or-marker &amp;amp;rest number-or-markers&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;em&gt;数値またはマーカーと残りの数値またはマーカー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f54f4af95eb930cb5a4378a94ca2e92e5c0c6ce2" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;&amp;gt;=&lt;/strong&gt;&lt;em&gt;number-or-marker &amp;amp;rest number-or-markers&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;&amp;gt; =&lt;/strong&gt;&lt;em&gt;数値またはマーカー＆残りの数値またはマーカー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cb3fb7d841b16b297ea22eae4c2b7494c003c3ad" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;em&gt;number-or-marker &amp;amp;rest number-or-markers&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;em&gt;番号またはマーカーと残りの番号またはマーカー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3dd193607cabcb8340d5c70c2fb735a092f7a886" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;&amp;lt;=&lt;/strong&gt;&lt;em&gt;number-or-marker &amp;amp;rest number-or-markers&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;&amp;lt;=&lt;/strong&gt;&lt;em&gt;数値またはマーカーと残りの数値またはマーカー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="12612370492685d7458881bae8ab851336e5f836" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;*&lt;/strong&gt;&lt;em&gt;&amp;amp;rest numbers-or-markers&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;*&lt;/strong&gt;&lt;em&gt;＆rest番号またはマーカー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9f84436671ab7cbd9448b03e2fe260eb3839c121" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;+&lt;/strong&gt;&lt;em&gt;&amp;amp;rest numbers-or-markers&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;+&lt;/strong&gt;&lt;em&gt;＆rest番号またはマーカー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b4622f3cebc989e3592888396fca10a463f08e83" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;-&lt;/strong&gt;&lt;em&gt;&amp;amp;optional number-or-marker &amp;amp;rest more-numbers-or-markers&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;-&lt;/strong&gt;&lt;em&gt;＆optional number-or-marker＆restmore-numbers-or-markers&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6eb4aa1563e7358026ec57258beb186f2b9b212b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;/&lt;/strong&gt;&lt;em&gt;number &amp;amp;rest divisors&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;/&lt;/strong&gt;&lt;em&gt;数と残りの除数&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="076c46093eb01acd7ee61ea40851f41483a1e2cc" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;/=&lt;/strong&gt;&lt;em&gt;number-or-marker1 number-or-marker2&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;/ = &lt;/strong&gt;&lt;em&gt;number-or-marker1 number-or-marker2&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9fda0e26f46e9f40e25b97f61dfc989122b0b0e9" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;1+&lt;/strong&gt;&lt;em&gt;number-or-marker&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;1&lt;/strong&gt;&lt;em&gt;つ以上の数字またはマーカー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ca4668dd4a486043993458ff7027542eca00f1b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;1-&lt;/strong&gt;&lt;em&gt;number-or-marker&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;1-&lt;/strong&gt;&lt;em&gt;数値またはマーカー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="673f310a5e054265dee2baa2faefdc1daea9d19d" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;=&lt;/strong&gt;&lt;em&gt;number-or-marker &amp;amp;rest number-or-markers&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;=&lt;/strong&gt;&lt;em&gt;数値またはマーカーと残りの数値またはマーカー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="15660b1074ccfbafe711667eb02f31ce70c45534" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;Snarf-documentation&lt;/strong&gt;&lt;em&gt;filename&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;Snarf-ドキュメント&lt;/strong&gt;&lt;em&gt;ファイル名&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="77a46a42adbb10113fb1b6acea2a498bc9117402" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;abbrev-expansion&lt;/strong&gt;&lt;em&gt;abbrev &amp;amp;optional table&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;略語-拡張&lt;/strong&gt;&lt;em&gt;略語＆オプションのテーブル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ca0e02a5a5ae7bb3eeae0906eed53ed1bbc088a9" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;abbrev-get&lt;/strong&gt;&lt;em&gt;abbrev prop&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;abbrev-get&lt;/strong&gt;&lt;em&gt;略語propを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fbe9898616465dfd7eee5e3befdff9b1b7fc4f78" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;abbrev-insert&lt;/strong&gt;&lt;em&gt;abbrev &amp;amp;optional name start end&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;略語-挿入&lt;/strong&gt;&lt;em&gt;略語とオプションの名前を開始終了&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="05dd83f623c276f330db0a2b68227f250e2c8fc1" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;abbrev-put&lt;/strong&gt;&lt;em&gt;abbrev prop val&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;略語-put&lt;/strong&gt;&lt;em&gt;略語小道具ヴァル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="41adef79f28e09e25f992373945fe1334afed74c" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;abbrev-symbol&lt;/strong&gt;&lt;em&gt;abbrev &amp;amp;optional table&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;略語-記号&lt;/strong&gt;&lt;em&gt;略語＆オプションの表&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="add9f8e7576e279a97bce948454dd529fa92734d" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;abbrev-table-get&lt;/strong&gt;&lt;em&gt;table prop&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;abbrev-table-get&lt;/strong&gt;&lt;em&gt; table prop&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="274d77f3e845519adec06a38928af2a5861c1467" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;abbrev-table-p&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;abbrev-table-p&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="509039c0b8ae1626f5c308473f97d52640dcffea" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;abbrev-table-put&lt;/strong&gt;&lt;em&gt;table prop val&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;abbrev-table-put&lt;/strong&gt;&lt;em&gt; table prop val&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2e88c141f0cee16cb883616ac8c23e605a46c157" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;abbreviate-file-name&lt;/strong&gt;&lt;em&gt;filename&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;省略ファイル名&lt;/strong&gt;&lt;em&gt;ファイル名&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53988ea2de9bf1e2000f9f490c4e287009eb9563" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;abs&lt;/strong&gt;&lt;em&gt;number&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;腹筋&lt;/strong&gt;&lt;em&gt;番号&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4ef7e8af7f2674eed6c9add53bec94c999e16cc3" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;accept-change-group&lt;/strong&gt;&lt;em&gt;handle&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;accept-change-group&lt;/strong&gt;&lt;em&gt;ハンドル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b61fe4be9450b4478d86aa7f2c8d6666ca4c335a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;accept-process-output&lt;/strong&gt;&lt;em&gt;&amp;amp;optional process seconds millisec just-this-one&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;accept-process-output&lt;/strong&gt;&lt;em&gt;＆optional processsecondsミリ秒just-this-one&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="77bfba268562aeedbcc567d0156de532e93cc598" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;access-file&lt;/strong&gt;&lt;em&gt;filename string&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;アクセスファイルファイル&lt;/strong&gt;&lt;em&gt;名文字列&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="94a7443266e7f0cd0769b54d0a023e51908e48c5" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;accessible-keymaps&lt;/strong&gt;&lt;em&gt;keymap &amp;amp;optional prefix&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;アクセス可能-&lt;/strong&gt;&lt;em&gt;キーマップキーマップとオプションのプレフィックス&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="99d1773492edc65a1e4d4101e9af52d0e4ebcac9" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;acos&lt;/strong&gt;&lt;em&gt;arg&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;acos&lt;/strong&gt;&lt;em&gt; arg&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="359c3af0b85dce98d26212a265804a71f3b327ed" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;activate-change-group&lt;/strong&gt;&lt;em&gt;handle&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;activate-change-group&lt;/strong&gt;&lt;em&gt;ハンドル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d8e06cd3ec808ed952ab178271d7443dcf4a538a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;active-minibuffer-window&lt;/strong&gt;</source>
          <target state="translated">関数： &lt;strong&gt; active-minibuffer-window&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="953f6635af7d1642eb26aa42cdf537faa7b40e50" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;add-face-text-property&lt;/strong&gt;&lt;em&gt;start end face &amp;amp;optional appendp object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;add-face-text-property&lt;/strong&gt;&lt;em&gt;開始終了面＆オプションのappendpオブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dd381e5c98bd7eb6505076a8d913a11a30730429" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;add-hook&lt;/strong&gt;&lt;em&gt;hook function &amp;amp;optional depth local&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;add-hook&lt;/strong&gt;&lt;em&gt;フック機能のとオプションの深さローカル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b68f9a3c00473be99f1930ec81233e79a5b81661" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;add-text-properties&lt;/strong&gt;&lt;em&gt;start end props &amp;amp;optional object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;add-text-properties&lt;/strong&gt;&lt;em&gt; start end props＆optional object&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e86f0e066f0c0211d38fc23f7fa3b65e0f45b80a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;add-to-history&lt;/strong&gt;&lt;em&gt;history-var newelt &amp;amp;optional maxelt keep-all&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;履歴に追加&lt;/strong&gt;&lt;em&gt;-var newelt＆optional maxelt keep-all&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d4565f852f8c5f0f3662f27084d667f63990815a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;add-to-invisibility-spec&lt;/strong&gt;&lt;em&gt;element&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;add-to-invisibility-spec&lt;/strong&gt;&lt;em&gt;要素&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b0136fcb21e768536bf154e06b83fbc26ea0c436" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;add-to-list&lt;/strong&gt;&lt;em&gt;symbol element &amp;amp;optional append compare-fn&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;リストに&lt;/strong&gt;&lt;em&gt;追加するシンボル要素とオプションの追加比較-fn&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2e68e013c38485c87a82c737f9a93fb3766d2e4f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;add-to-ordered-list&lt;/strong&gt;&lt;em&gt;symbol element &amp;amp;optional order&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;順序付きリストへの追加&lt;/strong&gt;&lt;em&gt;シンボル要素とオプションの順序&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f2f73c558244dab072ebd4a857a53e530a675420" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;add-variable-watcher&lt;/strong&gt;&lt;em&gt;symbol watch-function&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;add-variable-watcher&lt;/strong&gt;&lt;em&gt;シンボルwatch-function&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2e737df9537a502421509e0b982d4e8a69e9ae25" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;adjust-window-trailing-edge&lt;/strong&gt;&lt;em&gt;window delta &amp;amp;optional horizontal pixelwise&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;adjust-window-trailing-edge &lt;/strong&gt;&lt;em&gt;window delta＆オプションの水平ピクセル単位&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0a03a2d3067c2c487ad56571c539c8c18dd6aa93" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;advice-add&lt;/strong&gt;&lt;em&gt;symbol where function &amp;amp;optional props&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;アドバイス-&lt;/strong&gt;&lt;em&gt;関数とオプションの小道具に記号を&lt;/em&gt;&lt;strong&gt;追加&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="34a24f2b4e69600effe8558ce547e4c14aae67f5" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;advice-eval-interactive-spec&lt;/strong&gt;&lt;em&gt;spec&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;advice-eval-interactive-spec&lt;/strong&gt;&lt;em&gt;仕様&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0977ae87353d9e8482219dadc924900c613027d7" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;advice-function-mapc&lt;/strong&gt;&lt;em&gt;f function-def&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;advice-function-mapc &lt;/strong&gt;&lt;em&gt;f function-def&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7afbb1c06dc6b32625b8a429e078205b952c57c4" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;advice-function-member-p&lt;/strong&gt;&lt;em&gt;advice function-def&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;advice-function-member-p&lt;/strong&gt;&lt;em&gt;アドバイスfunction-def&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c174211b70406fcf10d6edf2032714767f01569c" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;advice-mapc&lt;/strong&gt;&lt;em&gt;function symbol&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;アドバイス-mapc&lt;/strong&gt;&lt;em&gt;関数シンボル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3a160119c6132fd2ae34cb3730cd450afdd4eb3a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;advice-member-p&lt;/strong&gt;&lt;em&gt;function symbol&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;advice-member-p&lt;/strong&gt;&lt;em&gt;関数記号&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9d843324b80794950f554af4867420fd0b491f22" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;advice-remove&lt;/strong&gt;&lt;em&gt;symbol function&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;アドバイス-&lt;/strong&gt;&lt;em&gt;シンボル機能の&lt;/em&gt;&lt;strong&gt;削除&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d1c39005211e777d3c66ade79300389ba19534a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;after-find-file&lt;/strong&gt;&lt;em&gt;&amp;amp;optional error warn noauto after-find-file-from-revert-buffer nomodes&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;after-find-file &lt;/strong&gt;&lt;em&gt;＆optional error warn noauto after-find-file-from-revert-buffernomodes&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6e850b484835785042b4a33b36759b6bb9948943" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;alist-get&lt;/strong&gt;&lt;em&gt;key alist &amp;amp;optional default remove testfn&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;alist-キーリストを&lt;/em&gt;&lt;strong&gt;取得&lt;/strong&gt;&lt;em&gt;＆オプションのデフォルトでtestfnを削除&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0806197d3cc28021277a6f7a9b0d18bb6915cba4" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;all-completions&lt;/strong&gt;&lt;em&gt;string collection &amp;amp;optional predicate&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;すべての補完&lt;/strong&gt;&lt;em&gt;文字列コレクションとオプションの述語&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a7c8c2289593bd666923f67da5649b016add8893" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;all-threads&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;全スレッド&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="62b811abbd0e6fd55453507578a60daf3efdd5e2" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;append&lt;/strong&gt;&lt;em&gt;&amp;amp;rest sequences&lt;/em&gt;</source>
          <target state="translated">機能：&lt;em&gt;＆restシーケンスを&lt;/em&gt;&lt;strong&gt;追加&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="685848e651a9b657fe399dc2ee123889410b06e3" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;apply-partially&lt;/strong&gt;&lt;em&gt;func &amp;amp;rest args&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;適用-部分的に&lt;/strong&gt;&lt;em&gt;func＆rest args&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8cb3e9dea1c22f6f264810319e6ad738a5d69971" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;apply&lt;/strong&gt;&lt;em&gt;function &amp;amp;rest arguments&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;関数とrest引数を&lt;/em&gt;&lt;strong&gt;適用し&lt;/strong&gt;&lt;em&gt;ます&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ae394c13f973ed82b3e262c675db73972a06adde" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;aref&lt;/strong&gt;&lt;em&gt;arr index&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;aref&lt;/strong&gt;&lt;em&gt;インデックス&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e64eea934ac20aa0d2ccf8e7fed61fc45f32ae3" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;arrayp&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;arrayp&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d7f7340f1861f47fbcf07c149610ed64d854cccc" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;aset&lt;/strong&gt;&lt;em&gt;array index object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;aset&lt;/strong&gt;&lt;em&gt;配列インデックスオブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2a07af217548ae5263016b27748ad1c755d9e42a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;ash&lt;/strong&gt;&lt;em&gt;integer1 count&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;ash &lt;/strong&gt;&lt;em&gt;integer1 count&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f5cfc164b82bdd3b33d533b5a21347b3d74cd612" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;asin&lt;/strong&gt;&lt;em&gt;arg&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;asin &lt;/strong&gt;&lt;em&gt;arg&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d2d6f8925f184501ac2514c7caeabe2d2447422a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;ask-user-about-lock&lt;/strong&gt;&lt;em&gt;file other-user&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;ask-user-about-lock&lt;/strong&gt;&lt;em&gt;ファイルother-user&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2de941f15f7b2e0bba2d2f2477b93871730dfe28" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;ask-user-about-supersession-threat&lt;/strong&gt;&lt;em&gt;filename&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;ask-user-about-supersession-threat&lt;/strong&gt;&lt;em&gt;ファイル名&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3e3dddf98e0c8ce1a2c7a522d4602f077c4817ab" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;assoc-default&lt;/strong&gt;&lt;em&gt;key alist &amp;amp;optional test default&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;assoc-デフォルトの&lt;/strong&gt;&lt;em&gt;キーリストとオプションのテストのデフォルト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cd41237ac600d80d3785527bbf6f7165f06fc135" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;assoc-delete-all&lt;/strong&gt;&lt;em&gt;key alist &amp;amp;optional test&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;assoc-delete-all &lt;/strong&gt;&lt;em&gt;key alist＆optional test&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5eea2cb7c500f44d8ed58b7535d3d2c849fcb72d" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;assoc-string&lt;/strong&gt;&lt;em&gt;key alist &amp;amp;optional case-fold&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;assoc-string &lt;/strong&gt;&lt;em&gt;key alist＆optional case-fold&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e444cc49745e6039bac4ea7bb00b8760dbc7de85" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;assoc&lt;/strong&gt;&lt;em&gt;key alist &amp;amp;optional testfn&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;assoc &lt;/strong&gt;&lt;em&gt;key alist＆optional testfn&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="239ea4015b314d56fb63ccbab0f4fc2de49a168f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;assq-delete-all&lt;/strong&gt;&lt;em&gt;key alist&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;assq-delete-all &lt;/strong&gt;&lt;em&gt;key alist&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b3e2ab89d97305342a57961b5d864853ced83e28" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;assq&lt;/strong&gt;&lt;em&gt;key alist&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;assq&lt;/strong&gt;&lt;em&gt;キー&lt;/em&gt;&lt;strong&gt;リスト&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b2aea059a0d7f8476141fd937bf1aaf5702451cc" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;atan&lt;/strong&gt;&lt;em&gt;y &amp;amp;optional x&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;atan &lt;/strong&gt;&lt;em&gt;y＆optional x&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e3c17221dde759a5e3575970a605d2a3e2ecb322" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;atom&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;Atom&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c4a5318e6dd8e86460d3287e020d65f08d56761f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;auto-save-file-name-p&lt;/strong&gt;&lt;em&gt;filename&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;auto-save-file-name-p&lt;/strong&gt;&lt;em&gt;ファイル名&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a45e65f2ad7e289d0f2e7b052dc7033ab56a9488" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;autoload-do-load&lt;/strong&gt;&lt;em&gt;autoload &amp;amp;optional name macro-only&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;autoload-do-load &lt;/strong&gt;&lt;em&gt;autoload＆optionalnameマクロのみ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9bcc17624d066bb39ec0a10b6ee8cb0b717df9fe" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;autoload&lt;/strong&gt;&lt;em&gt;function filename &amp;amp;optional docstring interactive type&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;自動ロード&lt;/strong&gt;&lt;em&gt;関数のファイル名とオプションのdocstringインタラクティブタイプ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2dd6ebdf8c4bbd24dc0b202900e686bd4ef0b934" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;autoloadp&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;autoloadp&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="25871f854fbeddc919a99cee9f1478060b5227db" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;backtrace-debug&lt;/strong&gt;&lt;em&gt;level flag&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バックトレース-デバッグ&lt;/strong&gt;&lt;em&gt;レベルフラグ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f1bfcee75f6be560f58743876efc19d7b1084c19" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;backtrace-frame&lt;/strong&gt;&lt;em&gt;frame-number &amp;amp;optional base&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バックトレース-フレーム&lt;/strong&gt;&lt;em&gt;フレーム番号とオプションのベース&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53daa33b72ee12831288c7dac28606cb0327e76e" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;backtrace&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バックトレース&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="131b40239bc16fc9212d7f437e20b6c20068addf" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;backup-buffer&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バックアップバッファ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1c5efaea3e860c5ebd7129d05cde63e7c0bda96" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;backup-file-name-p&lt;/strong&gt;&lt;em&gt;filename&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;backup-file-name-p&lt;/strong&gt;&lt;em&gt;ファイル名&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9d4115caf626a72b2e5c2e0648d93a81ed356cd7" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;backward-prefix-chars&lt;/strong&gt;</source>
          <target state="translated">関数：&lt;strong&gt;backward-prefix-chars&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b88b5bfff69b86626c1c3a70a20ee3a792e06aa5" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;backward-word-strictly&lt;/strong&gt;&lt;em&gt;&amp;amp;optional count&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;後方ワード-厳密に&lt;/strong&gt;&lt;em&gt;＆オプションのカウント&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="16ea05dcad961cd644a66c3eac32113074a9c690" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;barf-if-buffer-read-only&lt;/strong&gt;&lt;em&gt;&amp;amp;optional position&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;barf-if-buffer-read-only &lt;/strong&gt;&lt;em&gt;＆optional position&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="69729dae5c8ac8b858b65ceb0bb2c48aab9a8e39" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;base64-decode-string&lt;/strong&gt;&lt;em&gt;string &amp;amp;optional base64url&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;base64-&lt;/em&gt;&lt;strong&gt;デコード-文字&lt;/strong&gt;&lt;em&gt;列&lt;/em&gt;&lt;strong&gt;文字&lt;/strong&gt;&lt;em&gt;列＆オプションのbase64url&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b00edb6416a8bab975c2b26f9fdb30ae0d15525c" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;base64-encode-string&lt;/strong&gt;&lt;em&gt;string &amp;amp;optional no-line-break&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;base64-encode-string &lt;/strong&gt;&lt;em&gt;string＆optional no-line-break&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e3e143ea36d12eaa70b2fca8d8067c4c57e5bcb7" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;base64url-encode-string&lt;/strong&gt;&lt;em&gt;string &amp;amp;optional no-pad&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;base64url-エンコード文字&lt;/strong&gt;&lt;em&gt;列&lt;/em&gt;&lt;strong&gt;文字&lt;/strong&gt;&lt;em&gt;列とオプションのパッドなし&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="502c313c6cc48b783b00781dea93cd5cd8433d20" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;batch-byte-compile&lt;/strong&gt;&lt;em&gt;&amp;amp;optional noforce&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;batch-byte-compile &lt;/strong&gt;&lt;em&gt;＆optional noforce&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ab89670592e1d6b6b9440f7820bb8fb26632f386" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;beep&lt;/strong&gt;&lt;em&gt;&amp;amp;optional do-not-terminate&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;ビープ音&lt;/strong&gt;&lt;em&gt;とオプションの終了しない&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6273a498025b29bd7d9a8184945cc88fd76b1c8b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bidi-find-overridden-directionality&lt;/strong&gt;&lt;em&gt;from to &amp;amp;optional object&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;bidi-find-overridden-directionity &lt;/strong&gt;&lt;em&gt;from to＆optional object&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="174beea5b65772f0c690611ea4c86a51786f110b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bidi-string-mark-left-to-right&lt;/strong&gt;&lt;em&gt;string&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;bidi-string-mark-left-to-right&lt;/strong&gt;&lt;em&gt;文字列&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="56774e34cb951af8612601ccda8e628c07085c80" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bignump&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bignump&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aee0ddae4c2d01b37c319b39675454a74c5e3756" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bindat-get-field&lt;/strong&gt;&lt;em&gt;struct &amp;amp;rest name&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bindat-get-field &lt;/strong&gt;&lt;em&gt;struct＆rest name&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8661379acb672e89fc6786773783f4035a5e2d7a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bindat-ip-to-string&lt;/strong&gt;&lt;em&gt;ip&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;bindat-ip-to-string &lt;/strong&gt;&lt;em&gt;ip&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="313d20a7f51e0c756d97d20c79e0fab2e0062c5b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bindat-length&lt;/strong&gt;&lt;em&gt;spec struct&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;bindat-length &lt;/strong&gt;&lt;em&gt;spec struct&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bcfa80aa0cd096410642a04ebd9d63dcf821c98e" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bindat-pack&lt;/strong&gt;&lt;em&gt;spec struct &amp;amp;optional bindat-raw bindat-idx&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;bindat-pack &lt;/strong&gt;&lt;em&gt;spec struct＆optional bindat-raw bindat-idx&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9c39da3f53b4c7c9fada690b5290ce87496af432" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bindat-unpack&lt;/strong&gt;&lt;em&gt;spec bindat-raw &amp;amp;optional bindat-idx&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bindat-&lt;/strong&gt;&lt;em&gt;スペックを&lt;/em&gt;&lt;strong&gt;アンパック&lt;/strong&gt;&lt;em&gt;bindat-raw＆optional bindat-idx&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="14d6231efdd46c46683ca9fd42ac584c6eab262f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bitmap-spec-p&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bitmap-spec-p&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="33f6df1d1f12a61e4f5c9fb7e353e63cb1b7303c" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bobp&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;bobp&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f95a13f4f7713a06dfeb5b616fe25d005531f18b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bolp&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;bolp&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf11ebf627ce9b13fbaebc9f63f13cd2ead96088" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bool-vector-count-consecutive&lt;/strong&gt;&lt;em&gt;a b i&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bool-vector-count-consecutive &lt;/strong&gt;&lt;em&gt;a bi&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="109f1f4a3a6504eb7b376d51a67171e8e8eecd06" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bool-vector-count-population&lt;/strong&gt;&lt;em&gt;a&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bool-vector-count-population &lt;/strong&gt;&lt;em&gt;a&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2ebd08cb45eb4d3110ca15806108143f8e950460" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bool-vector-exclusive-or&lt;/strong&gt;&lt;em&gt;a b &amp;amp;optional c&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bool-vector-exclusive-または&lt;/strong&gt;&lt;em&gt;a b＆optional c&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="246d1b242787c8af9c656851739d05d1cffa4ebd" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bool-vector-intersection&lt;/strong&gt;&lt;em&gt;a b &amp;amp;optional c&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bool-vector-intersection &lt;/strong&gt;&lt;em&gt;a b＆optional c&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d0e3fce4270209a102734690cfa709018fab0f98" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bool-vector-not&lt;/strong&gt;&lt;em&gt;a &amp;amp;optional b&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bool-vector- &lt;/strong&gt;&lt;em&gt;＆optionalbで&lt;/em&gt;&lt;strong&gt;はありません&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6732e4b0a85990ee32be720e711cd64ea2e8bdb3" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bool-vector-p&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bool-vector-p&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="55168ada494c82e0b7f718e23d9e830dee8557ac" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bool-vector-set-difference&lt;/strong&gt;&lt;em&gt;a b &amp;amp;optional c&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bool-vector-set-difference &lt;/strong&gt;&lt;em&gt;a b＆optional c&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="12f9e56dbe8024c15162eb83a99abfd3fbb34e88" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bool-vector-subsetp&lt;/strong&gt;&lt;em&gt;a b&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bool-vector-subsetp &lt;/strong&gt;&lt;em&gt;a b&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4e465262a9d0edb9a4325997854ecbe635d203b4" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bool-vector-union&lt;/strong&gt;&lt;em&gt;a b &amp;amp;optional c&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bool-vector-union &lt;/strong&gt;&lt;em&gt;a b＆optional c&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c9d36db9eb4751a9be4d3d13f0d92487c020ca0a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bool-vector&lt;/strong&gt;&lt;em&gt;&amp;amp;rest objects&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bool-vector &lt;/strong&gt;&lt;em&gt;＆restオブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="14b6580f1de56e0b35115e844658bf51519c7195" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;booleanp&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;booleanp&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="015300599d04983874d9fbd2d64cac46d359c4df" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;boundp&lt;/strong&gt;&lt;em&gt;variable&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;boundp&lt;/strong&gt;&lt;em&gt;変数&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fa96a4d675e94c373ad136e7914966a49dbddc40" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-base-buffer&lt;/strong&gt;&lt;em&gt;&amp;amp;optional buffer&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;buffer-base-buffer &lt;/strong&gt;&lt;em&gt;＆optional buffer&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="30b0cd18a017c9c767c4f91441b4d5f80dbb27cb" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-chars-modified-tick&lt;/strong&gt;&lt;em&gt;&amp;amp;optional buffer&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;buffer-chars-modified-tick &lt;/strong&gt;&lt;em&gt;＆optional buffer&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0443bfd1aafd5fb44360b0fa616a0c3d7abe7a3a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-end&lt;/strong&gt;&lt;em&gt;flag&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バッファ終了&lt;/strong&gt;&lt;em&gt;フラグ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a305c9472a806f5d996a6a4e3196954831ec9f0b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-file-name&lt;/strong&gt;&lt;em&gt;&amp;amp;optional buffer&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バッファ-ファイル名&lt;/strong&gt;&lt;em&gt;＆オプションのバッファ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4a588ee8706783f01d6774d66e016ce1907ee5c5" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-hash&lt;/strong&gt;&lt;em&gt;&amp;amp;optional buffer-or-name&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;buffer-hash &lt;/strong&gt;&lt;em&gt;＆optionalbuffer-or-name&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3c8cbfa11b12c59b8fb8db20cea27dbec8dddf58" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-list&lt;/strong&gt;&lt;em&gt;&amp;amp;optional frame&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バッファリスト&lt;/strong&gt;&lt;em&gt;＆オプションフレーム&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5ca67bf70826116169e721edc84594fe5147bad1" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-live-p&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;buffer-live-p&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f8dd2e9588a43afbb497aa44486ef9ff4765e112" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-local-value&lt;/strong&gt;&lt;em&gt;variable buffer&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;buffer-local-value&lt;/strong&gt;&lt;em&gt;変数buffer&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ce7a0d5828c58d2679728d56b544ac143e00c13f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-local-variables&lt;/strong&gt;&lt;em&gt;&amp;amp;optional buffer&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;buffer-local-variables &lt;/strong&gt;&lt;em&gt;＆optional buffer&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2361533430ee22ffd5fbaa9060b081d67c613fa1" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-modified-p&lt;/strong&gt;&lt;em&gt;&amp;amp;optional buffer&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;buffer-modified-p &lt;/strong&gt;&lt;em&gt;＆optional buffer&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b440756221715880ae125e3e0875f94aa1b5b441" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-modified-tick&lt;/strong&gt;&lt;em&gt;&amp;amp;optional buffer&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;buffer-modified-tick &lt;/strong&gt;&lt;em&gt;＆optional buffer&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6f13793e7de251b0b3f7b9fb488f0b93db11bbdf" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-name&lt;/strong&gt;&lt;em&gt;&amp;amp;optional buffer&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バッファ名&lt;/strong&gt;&lt;em&gt;とオプションのバッファ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="051f9f2ce3fe25bda59e56824b2cf327bad985d3" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-narrowed-p&lt;/strong&gt;</source>
          <target state="translated">関数：&lt;strong&gt;buffer-narrowed-p&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be9a6e1469db9cd48289d3ee62ea1a4a9ae1a14a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-size&lt;/strong&gt;&lt;em&gt;&amp;amp;optional buffer&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バッファサイズ&lt;/strong&gt;&lt;em&gt;とオプションのバッファ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="82509c27cdfb038cedd2cdf951cc2734d4c980c1" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-string&lt;/strong&gt;</source>
          <target state="translated">関数：&lt;strong&gt;バッファ文字列&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17016db07a116a15ab5e40bf753899eff9d5a069" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-substring-no-properties&lt;/strong&gt;&lt;em&gt;start end&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;buffer-substring-no-properties &lt;/strong&gt;&lt;em&gt;start end&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="31d80d0da447e850d905aa6c5c7387be81590fcf" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-substring-with-bidi-context&lt;/strong&gt;&lt;em&gt;start end &amp;amp;optional no-properties&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;buffer-substring-with-bidi-context &lt;/strong&gt;&lt;em&gt;start end＆optionalno-properties&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="46a5fbf3089f710234647453da78389ad538460e" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-substring&lt;/strong&gt;&lt;em&gt;start end&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;buffer-substring &lt;/strong&gt;&lt;em&gt;start end&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4ab8f55221eb9ae34e31fcedba33c52146cc259f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;buffer-swap-text&lt;/strong&gt;&lt;em&gt;buffer&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バッファスワップテキスト&lt;/strong&gt;&lt;em&gt;バッファ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2a873b81a04afe17fdd2452b1ef8f1481328d86a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bufferp&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;bufferp&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e61da70f8396c27b6ea9303ac9a498891355c382" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;bufferpos-to-filepos&lt;/strong&gt;&lt;em&gt;position &amp;amp;optional quality coding-system&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;bufferposからfileposへの&lt;/strong&gt;&lt;em&gt;位置とオプションの品質コーディングシステム&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1aae739e73cab112d9cb7859964cb6e80d307bbe" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;butlast&lt;/strong&gt;&lt;em&gt;x &amp;amp;optional n&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;butlast &lt;/strong&gt;&lt;em&gt;x＆optional n&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0f6fcb0726c12ad91cb45f3e4fbeccbd519826a9" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-activate&lt;/strong&gt;&lt;em&gt;button &amp;amp;optional use-mouse-action&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;ボタン-ボタンをアクティブにする&lt;/strong&gt;&lt;em&gt;＆オプションの使用-マウス-アクション&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ca9452480ff3f1e9d2a339fac689785df2396af9" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-at&lt;/strong&gt;&lt;em&gt;pos&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;ボタンの&lt;/strong&gt;&lt;em&gt;POS&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f51a047ff418564c15fbb3a5aa5a3e6452a1bdd4" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-end&lt;/strong&gt;&lt;em&gt;button&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;ボタンエンド&lt;/strong&gt;&lt;em&gt;ボタン&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6e52df647fabf94c621851bd41ba7de3686f04e5" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-get&lt;/strong&gt;&lt;em&gt;button prop&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;ボタン-&lt;/strong&gt;&lt;em&gt;ボタン支柱を&lt;/em&gt;&lt;strong&gt;取得&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7403216f1bac8fb74966974ca1e2a03d1ab0ca52" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-has-type-p&lt;/strong&gt;&lt;em&gt;button type&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;button-has-type-p&lt;/strong&gt;&lt;em&gt;ボタンタイプ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f23376ac82096363c6d97867068ad30f6a9beaeb" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-label&lt;/strong&gt;&lt;em&gt;button&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;ボタン-ラベル&lt;/strong&gt;&lt;em&gt;ボタン&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="93158304b6700c969fbb97bdc3d2059b07b38479" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-put&lt;/strong&gt;&lt;em&gt;button prop val&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;ボタン-ボタンを置く&lt;/strong&gt;&lt;em&gt;prop val&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8e51aa27bd72f552fea52cdaf01c0e2a99eafce4" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-start&lt;/strong&gt;&lt;em&gt;button&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;ボタンスタート&lt;/strong&gt;&lt;em&gt;ボタン&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb745763f947d23f7f02548b039b9b0b06a5ed1b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-type-get&lt;/strong&gt;&lt;em&gt;type prop&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;button-type-get &lt;/strong&gt;&lt;em&gt;type prop&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b86a8e6f9f1ed2d38223af842fedd8a8a772e814" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-type-put&lt;/strong&gt;&lt;em&gt;type prop val&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;ボタンタイプ-プット&lt;/strong&gt;&lt;em&gt;タイプprop val&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e2da9a762553d3872d08ca4fa6edd1143809040" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-type-subtype-p&lt;/strong&gt;&lt;em&gt;type supertype&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;button-type-subtype-p&lt;/strong&gt;&lt;em&gt;タイプのスーパータイプ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="afa4c3b3d69c1615a40e9eda6618bf16b1f9fa7a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;button-type&lt;/strong&gt;&lt;em&gt;button&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;ボタン式&lt;/strong&gt;&lt;em&gt;ボタン&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="33d5ca8cef956ebbd0376b69d71c1018242bf98d" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;byte-code-function-p&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;byte-code-function-p&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f7ccd7da8afeba0ab4a2651f17fb68ce02186f44" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;byte-compile&lt;/strong&gt;&lt;em&gt;symbol&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バイトコンパイル&lt;/strong&gt;&lt;em&gt;シンボル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4c97893403e189c5afc92eb46dcb634eeca63eba" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;byte-to-position&lt;/strong&gt;&lt;em&gt;byte-position&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バイトツーポジション&lt;/strong&gt;&lt;em&gt;バイトポジション&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b0ee476c873d1696c33d9137e7b4d7fbafc86a64" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;byte-to-string&lt;/strong&gt;&lt;em&gt;byte&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;バイトツーストリング&lt;/strong&gt;&lt;em&gt;バイト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="34aee39d08024d3c82e4a99ab8586244c3453c5c" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;caar&lt;/strong&gt;&lt;em&gt;cons-cell&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;caar &lt;/strong&gt;&lt;em&gt;cons-cell&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1c1be267e9d9904b4842e45fac881df3ea9ee781" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cadr&lt;/strong&gt;&lt;em&gt;cons-cell&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;cadr &lt;/strong&gt;&lt;em&gt;cons-cell&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dd0cf7d1ef7edafb7f4d58c7fb2c4dfa8e40249f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;call-interactively&lt;/strong&gt;&lt;em&gt;command &amp;amp;optional record-flag keys&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;call-interactively&lt;/strong&gt;&lt;em&gt;コマンドとオプションのレコードフラグキー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="70eb9ec601554f2c6a1eae0d4237acc70e23f4ff" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;call-process-region&lt;/strong&gt;&lt;em&gt;start end program &amp;amp;optional delete destination display &amp;amp;rest args&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;call-process-region &lt;/strong&gt;&lt;em&gt;start end program＆optional delete destination display＆rest args&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9365262957294c1bcc5562ff05953f8f9a75af4e" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;call-process-shell-command&lt;/strong&gt;&lt;em&gt;command &amp;amp;optional infile destination display&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;call-process-shell-command&lt;/strong&gt;&lt;em&gt;コマンド＆オプションのファイル内宛先表示&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="234a7c69afb454fee73bf056731bbba0e1b8ad62" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;call-process&lt;/strong&gt;&lt;em&gt;program &amp;amp;optional infile destination display &amp;amp;rest args&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;呼び出しプロセス&lt;/strong&gt;&lt;em&gt;プログラム＆オプションのファイル内宛先表示＆レスト引数&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9631a8956c2209172b946e088f1d4d19888300ab" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;call-shell-region&lt;/strong&gt;&lt;em&gt;start end command &amp;amp;optional delete destination&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;call-shell-region &lt;/strong&gt;&lt;em&gt;start endコマンド＆オプションの削除先&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="550062a7c1554f6b94d87fd8f85f7e5b078c83c9" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;called-interactively-p&lt;/strong&gt;&lt;em&gt;kind&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;呼び出された-インタラクティブに-p&lt;/strong&gt;&lt;em&gt;種類&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="66277dfa7cb1220ff14e4fd9e8eb5c5d3f96849b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cancel-change-group&lt;/strong&gt;&lt;em&gt;handle&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;キャンセル-変更-グループ&lt;/strong&gt;&lt;em&gt;ハンドル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2775faf1bf3f7c4a57b1cdfa7bced6f68da5f8dd" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cancel-timer&lt;/strong&gt;&lt;em&gt;timer&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;キャンセルタイマー&lt;/strong&gt;&lt;em&gt;タイマー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="852307446d52147294fb5e73102228a3c74dd7e6" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;capitalize&lt;/strong&gt;&lt;em&gt;string-or-char&lt;/em&gt;</source>
          <target state="translated">関数：&lt;em&gt;string-or-charを&lt;/em&gt;&lt;strong&gt;大文字にし&lt;/strong&gt;&lt;em&gt;ます&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6c004eb4846b6c84e18ba1845f08f5c7b43ef391" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;car-safe&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;カーセーフ&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d70f4229ec1ac5395ecaca935a9eb158d493d596" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;car&lt;/strong&gt;&lt;em&gt;cons-cell&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;車の&lt;/strong&gt;&lt;em&gt;短所-セル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3936a03b2f6902b4e1b3f9cdb1531ba75c7fdc9f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;case-table-p&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;case-table-p&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f6c80d2bde519e96a1579fa2e654beeb480a019c" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;category-docstring&lt;/strong&gt;&lt;em&gt;category &amp;amp;optional table&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;category-docstring&lt;/strong&gt;&lt;em&gt;カテゴリとオプションのテーブル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="070e8c8e7664306ae6871b597ba1e1ec5a2d9f45" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;category-set-mnemonics&lt;/strong&gt;&lt;em&gt;category-set&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;category-set-mnemonicscategory &lt;/strong&gt;&lt;em&gt;-set&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7c698443236912bb108079102c13ea723d947934" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;category-table-p&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;category-table-p&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5e92b685cd7c3a22a24f78e6056be4628b96bd9e" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;category-table&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;カテゴリテーブル&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a7e66dc454d4d853a9310418f8a332bb82a23437" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cdar&lt;/strong&gt;&lt;em&gt;cons-cell&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;cdar &lt;/strong&gt;&lt;em&gt;cons-cell&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="16622ba509a2c267ee58ef2ea832f27fa9c15608" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cddr&lt;/strong&gt;&lt;em&gt;cons-cell&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;cddr &lt;/strong&gt;&lt;em&gt;cons-cell&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f10afae7b007b51a030ab5fc705e6bac1ef7a5df" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cdr-safe&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;cdr-safe&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="047f4689447b96857a8947da4cba0269e448a6d0" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cdr&lt;/strong&gt;&lt;em&gt;cons-cell&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;cdr &lt;/strong&gt;&lt;em&gt;cons-cell&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="60c77f25bf6184d810695988dec19771d2976e6f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;ceiling&lt;/strong&gt;&lt;em&gt;number &amp;amp;optional divisor&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;上限&lt;/strong&gt;&lt;em&gt;数とオプションの除数&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="852ffa748551d3f9377a2bef50e6bd61d6f777d2" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-after&lt;/strong&gt;&lt;em&gt;&amp;amp;optional position&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;char-after &lt;/strong&gt;&lt;em&gt;＆optional position&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dea239d2c680d7781cdc8ab2943bd00f710fb846" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-before&lt;/strong&gt;&lt;em&gt;&amp;amp;optional position&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;char-before &lt;/strong&gt;&lt;em&gt;＆optional position&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0a206b520bc6631f48b86177f0a53d3b646edf28" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-category-set&lt;/strong&gt;&lt;em&gt;char&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-category-set &lt;/strong&gt;&lt;em&gt;char&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="630a918840f55a66b9568d9e9c4feaa333dde02a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-charset&lt;/strong&gt;&lt;em&gt;character &amp;amp;optional restriction&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;char-charset&lt;/strong&gt;&lt;em&gt;文字とオプションの制限&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2753b71977cc335c4845e0c8ca9a11e22dfdc6f7" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-code-property-description&lt;/strong&gt;&lt;em&gt;prop value&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-code-property-descriptionprop&lt;/strong&gt;&lt;em&gt;値&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c5cc1d800868abd6aabd731dcd6bd832791c3d1a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-displayable-p&lt;/strong&gt;&lt;em&gt;char&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-displayable-p &lt;/strong&gt;&lt;em&gt;char&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e60536f10c7d06039df977083bcf87c9234e96ee" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-equal&lt;/strong&gt;&lt;em&gt;character1 character2&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-equal &lt;/strong&gt;&lt;em&gt;character1 character2&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7d95d1f5b01d5c8b438cd5fecf47d85bbbb1ec36" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-from-name&lt;/strong&gt;&lt;em&gt;string &amp;amp;optional ignore-case&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-from-name&lt;/strong&gt;&lt;em&gt;文字列とオプションのignore-case&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4c40d317b8cc626c35194e60bd40385ac0639016" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-or-string-p&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-or-string-p&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c897d63f806af28afb4cd60c3b96ad98b8eec58b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-syntax&lt;/strong&gt;&lt;em&gt;character&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;char-構文&lt;/strong&gt;&lt;em&gt;文字&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bd4c50fa276c601b56559c709ed5079269d00f03" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-table-extra-slot&lt;/strong&gt;&lt;em&gt;char-table n&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-table-extra-slot &lt;/strong&gt;&lt;em&gt;char-table n&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7dcb199fd0da9d3bcb0a1bdc4287df214f46b2b8" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-table-p&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-table-p&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="42c7484134ef84c8e29ffb12bec1f7670d494138" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-table-parent&lt;/strong&gt;&lt;em&gt;char-table&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-table-親&lt;/strong&gt;&lt;em&gt;char-table&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="785b5330bbfc8af5f6a6b5d277eace49d768b8c7" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-table-range&lt;/strong&gt;&lt;em&gt;char-table range&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-table-range &lt;/strong&gt;&lt;em&gt;char-table range&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1d30fab06f4240d0098779781b5cc71828316051" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-table-subtype&lt;/strong&gt;&lt;em&gt;char-table&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-table-subtype &lt;/strong&gt;&lt;em&gt;char-table&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f64a2fc8b8fcc9100bba6396e9e3af39c89be4f2" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-to-string&lt;/strong&gt;&lt;em&gt;character&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;文字から文字列への&lt;/strong&gt;&lt;em&gt;文字&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dc564b1d5ffdddfb9ab7d2ebef9e0a5b1aa1ccf9" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;char-width&lt;/strong&gt;&lt;em&gt;char&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;char-width &lt;/strong&gt;&lt;em&gt;char&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e9823c73fc58ec1b90bc60c496b9503895558b9b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;characterp&lt;/strong&gt;&lt;em&gt;charcode&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;characterp &lt;/strong&gt;&lt;em&gt;charcode&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6d5a77b0c220e9a44df58e66ac5918c3c26f19d7" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;charset-after&lt;/strong&gt;&lt;em&gt;&amp;amp;optional pos&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;charset- &lt;/strong&gt;&lt;em&gt;＆optionalposの&lt;/em&gt;&lt;strong&gt;後&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d6ec702c076c38a6163e8c24e48449e2eb5b3be3" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;charset-plist&lt;/strong&gt;&lt;em&gt;charset&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;charset-plist &lt;/strong&gt;&lt;em&gt;charset&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fc570a269b2d36d3ed29317490ff3bbf1fa9c48b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;charset-priority-list&lt;/strong&gt;&lt;em&gt;&amp;amp;optional highestp&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;charset-priority-list &lt;/strong&gt;&lt;em&gt;＆optionalhighestp&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0de4a58f17ffccd5bbb338fcb332677631602c64" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;charsetp&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;charsetp&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ac3f930abaa34eee0d80761a890cc69ec044a1ec" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;check-coding-system&lt;/strong&gt;&lt;em&gt;coding-system&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;チェックコーディングシステム&lt;/strong&gt;&lt;em&gt;コーディングシステム&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="206b61972e1cd69d6fd67557025bbeeed96cac1f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;check-coding-systems-region&lt;/strong&gt;&lt;em&gt;start end coding-system-list&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;check-coding-systems-region &lt;/strong&gt;&lt;em&gt;start endcoding-system-list&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="91b99c57992a4a4782e83da9223b3d24a7d89b60" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cl-call-next-method&lt;/strong&gt;&lt;em&gt;&amp;amp;rest args&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;cl-call-next-method &lt;/strong&gt;&lt;em&gt;＆rest args&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="df2781c0e34245e14e02e966b85cb332d6a423df" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cl-next-method-p&lt;/strong&gt;</source>
          <target state="translated">関数：&lt;strong&gt;cl-next-method-p&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c1adb23327f964787a36bf908dab545d3b70dfe7" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cl-old-struct-compat-mode&lt;/strong&gt;&lt;em&gt;arg&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;cl-old-struct-compat-mode &lt;/strong&gt;&lt;em&gt;arg&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d16ddc1de231afc2e9248a4e1ea784ce180f3c02" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;clear-abbrev-table&lt;/strong&gt;&lt;em&gt;abbrev-table&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;clear-abbrev-table &lt;/strong&gt;&lt;em&gt;abbrev-table&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="510e0d836cb736fdfbc94a7120108dbed5ba2f91" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;clear-image-cache&lt;/strong&gt;&lt;em&gt;&amp;amp;optional filter&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;clear-image-cache &lt;/strong&gt;&lt;em&gt;＆optional filter&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1c77b6351969085039d88c7fc4d46a5178c1dd2d" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;clear-string&lt;/strong&gt;&lt;em&gt;string&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;クリアストリング&lt;/strong&gt;&lt;em&gt;文字列&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6a92634f360f3680b8fb3e5393f46f344d5d52d1" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;clear-this-command-keys&lt;/strong&gt;&lt;em&gt;&amp;amp;optional keep-record&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;clear-this-command-keys &lt;/strong&gt;&lt;em&gt;＆optional keep-record&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4e9dd1050590e6addc4705a9bd7eb9df90342c18" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;clear-visited-file-modtime&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;clear-visited-file-modtime&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f70e48348e40392e9abcb306f0be5781c3e11576" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;clrhash&lt;/strong&gt;&lt;em&gt;table&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;clrhash&lt;/strong&gt;&lt;em&gt;テーブル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8804c3c324daeb306700917ab50868f5b465a046" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;coding-system-aliases&lt;/strong&gt;&lt;em&gt;coding-system&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コーディングシステムエイリアス&lt;/strong&gt;&lt;em&gt;コーディングシステム&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c1a39a870eddcfc28d4942774e92efc8b4a10bea" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;coding-system-change-eol-conversion&lt;/strong&gt;&lt;em&gt;coding-system eol-type&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コーディングシステム変更eol変換&lt;/strong&gt;&lt;em&gt;コーディングシステムeolタイプ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="82f31a8a0f8e7e788d29de18dc980e769f83d18a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;coding-system-change-text-conversion&lt;/strong&gt;&lt;em&gt;eol-coding text-coding&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;coding-system-change-text-conversion &lt;/strong&gt;&lt;em&gt;eol-coding text-coding&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6b7654eafa6d18c7d1ecfe3e4a54f1930473562c" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;coding-system-charset-list&lt;/strong&gt;&lt;em&gt;coding-system&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;coding-system-charset-listcoding &lt;/strong&gt;&lt;em&gt;-system&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="39050a32add1c2bac04d9ec861e401892c6703af" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;coding-system-eol-type&lt;/strong&gt;&lt;em&gt;coding-system&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コーディングシステム-eolタイプの&lt;/strong&gt;&lt;em&gt;コーディングシステム&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3af6b192767b0133fa9fcaf65e7308889037e7d9" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;coding-system-get&lt;/strong&gt;&lt;em&gt;coding-system property&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;coding-system- &lt;/strong&gt;&lt;em&gt;getcoding-systemプロパティ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f21feb8d79eee772fbe4876d618a8d135c32ff28" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;coding-system-list&lt;/strong&gt;&lt;em&gt;&amp;amp;optional base-only&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コーディングシステムリスト&lt;/strong&gt;&lt;em&gt;とオプションのベースのみ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="007f2122b415f91848394d123fd820fddb095d69" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;coding-system-p&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;coding-system-p&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c77afd26a17ef925845d1adee2cb7c1b2a72aa0f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;coding-system-priority-list&lt;/strong&gt;&lt;em&gt;&amp;amp;optional highestp&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;coding-system-priority-list &lt;/strong&gt;&lt;em&gt;＆optionalhighestp&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7fa31a6eb99f0ec5fca182026aec3ed0183b02dd" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;color-defined-p&lt;/strong&gt;&lt;em&gt;color &amp;amp;optional frame&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;color-defined-p&lt;/strong&gt;&lt;em&gt;カラー＆オプションフレーム&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2c41a0d861ac96e508b0e6dd027c853ac61af998" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;color-gray-p&lt;/strong&gt;&lt;em&gt;color &amp;amp;optional frame&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;color-gray-p&lt;/strong&gt;&lt;em&gt;カラー＆オプションフレーム&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="383d8f151d9c6e2fdf4eb766e8bf0af363ed57de" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;color-supported-p&lt;/strong&gt;&lt;em&gt;color &amp;amp;optional frame background-p&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;color-supported-p &lt;/strong&gt;&lt;em&gt;color＆optional frame background-p&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="eb8619c981a9f5fe568c8c16410b4fb8ad906fc5" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;color-values&lt;/strong&gt;&lt;em&gt;color &amp;amp;optional frame&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;色-値の&lt;/strong&gt;&lt;em&gt;色とオプションのフレーム&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="93c8d5283a0ea48b5baf4802cc68ce67657d777b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;combine-and-quote-strings&lt;/strong&gt;&lt;em&gt;list-of-strings &amp;amp;optional separator&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;文字列の結合と引用符の&lt;/strong&gt;&lt;em&gt;リストとオプションの区切り文字&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d009ccf2578d55b4e4b3e24acab3b674978014c6" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;command-execute&lt;/strong&gt;&lt;em&gt;command &amp;amp;optional record-flag keys special&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コマンド実行&lt;/strong&gt;&lt;em&gt;コマンドとオプションのレコードフラグキー特殊&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5bcf8a07b4ff2a897699c39c949a6409512702a9" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;command-line&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コマンドライン&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ff87fadb9c25755ba3d36c9e1016fe1e035d12d" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;command-remapping&lt;/strong&gt;&lt;em&gt;command &amp;amp;optional position keymaps&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コマンド再マッピング&lt;/strong&gt;&lt;em&gt;コマンドとオプションの位置キーマップ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="63b31f007940028bcce0a08f659253a5120fffec" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;commandp&lt;/strong&gt;&lt;em&gt;object &amp;amp;optional for-call-interactively&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;commandp&lt;/strong&gt;&lt;em&gt;オブジェクト＆オプションのfor-call-interactively&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="510d7d51a6e89a973dc14422468e094eaedf968c" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;compare-buffer-substrings&lt;/strong&gt;&lt;em&gt;buffer1 start1 end1 buffer2 start2 end2&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;compare-buffer-substrings &lt;/strong&gt;&lt;em&gt;buffer1 start1 end1 buffer2 start2 end2&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1b6173f21800b523f55448aebe48b82d8b22cbf0" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;compare-strings&lt;/strong&gt;&lt;em&gt;string1 start1 end1 string2 start2 end2 &amp;amp;optional ignore-case&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;compare-strings &lt;/strong&gt;&lt;em&gt;string1 start1 end1 string2 start2 end2＆optional ignore-case&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6dc4c1c1c5f1cf83d3b13d266d00d135565de254" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;compare-window-configurations&lt;/strong&gt;&lt;em&gt;config1 config2&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;compare-window-configurations &lt;/strong&gt;&lt;em&gt;config1 config2&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a0cf9fedd16b4129623a54b829a6c002f5980549" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;completing-read&lt;/strong&gt;&lt;em&gt;prompt collection &amp;amp;optional predicate require-match initial history default inherit-input-method&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;完了-&lt;/strong&gt;&lt;em&gt;プロンプトコレクションの&lt;/em&gt;&lt;strong&gt;読み取り&lt;/strong&gt;&lt;em&gt;とオプションの述語require-match初期履歴デフォルトinherit-input-method&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2129decdf67dc031053e8a71f391381ee473af4f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;completion-boundaries&lt;/strong&gt;&lt;em&gt;string collection predicate suffix&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;completion-boundaries&lt;/strong&gt;&lt;em&gt;文字列コレクション述語サフィックス&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="08d5e7d770839a0dbe79925dde4a6a49b953f67b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;completion-in-region&lt;/strong&gt;&lt;em&gt;start end collection &amp;amp;optional predicate&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;領域内完了&lt;/strong&gt;&lt;em&gt;開始終了コレクション＆オプションの述語&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6b8ba41f6e31c78bbe14e0cfabbcb1c0ebaa5e77" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;completion-table-dynamic&lt;/strong&gt;&lt;em&gt;function &amp;amp;optional switch-buffer&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;completion-table-dynamic&lt;/strong&gt;&lt;em&gt;関数とオプションのスイッチバッファ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="39c868ffddcf76664f7de7242111e1918eeb3e6f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;completion-table-with-cache&lt;/strong&gt;&lt;em&gt;function &amp;amp;optional ignore-case&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;completion-table-with-cache&lt;/strong&gt;&lt;em&gt;関数＆オプションのignore-case&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="41d3ad27e6f106d353942d0bbbbafdd2a1729570" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;compute-motion&lt;/strong&gt;&lt;em&gt;from frompos to topos width offsets window&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;計算&lt;/strong&gt;&lt;em&gt;-fromposからtopos幅オフセットウィンドウへの&lt;/em&gt;&lt;strong&gt;モーション&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d0ec4c3c3b5dd9a931c901db0c0de27c54c88e95" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;concat&lt;/strong&gt;&lt;em&gt;&amp;amp;rest sequences&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;連結&lt;/strong&gt;&lt;em&gt;＆レストシーケンス&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5e7ece7c729afe9c73fcc33c835a6b92ac7f07ab" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;condition-mutex&lt;/strong&gt;&lt;em&gt;cond&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;条件ミューテックス&lt;/strong&gt;&lt;em&gt;のcond&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d89d8512d16f66078415a3a4cb543c3e4decbe6" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;condition-name&lt;/strong&gt;&lt;em&gt;cond&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;条件名&lt;/strong&gt;&lt;em&gt;指揮&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fe44c0c8569659d65c34234b7970cd329b801130" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;condition-notify&lt;/strong&gt;&lt;em&gt;cond &amp;amp;optional all&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;条件&lt;/strong&gt;&lt;em&gt;-cond＆optionalallに&lt;/em&gt;&lt;strong&gt;通知&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ce35400508b6409e9e8108d55d433fe59956735a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;condition-variable-p&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;condition-variable-p&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d0d19927b8e21c4cb7947dc4bda9a62c92a00600" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;condition-wait&lt;/strong&gt;&lt;em&gt;cond&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;条件待ち&lt;/strong&gt;&lt;em&gt;のcond&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="36512be769d3f34ad0369d23681de343c600f8c8" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;connection-local-set-profile-variables&lt;/strong&gt;&lt;em&gt;profile variables&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;connection-local-set-profile-variables&lt;/strong&gt;&lt;em&gt;プロファイル変数&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fd5a0a1ac941b2c02354964ff7671be4ad8b7c62" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;connection-local-set-profiles&lt;/strong&gt;&lt;em&gt;criteria &amp;amp;rest profiles&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;connection-local-set-profiles&lt;/strong&gt;&lt;em&gt;基準とrestプロファイル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="827ee66319f0fc56426e64a3250cf202da4da54f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cons&lt;/strong&gt;&lt;em&gt;object1 object2&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;cons &lt;/strong&gt;&lt;em&gt;object1 object2&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9bd4149ba1de415f88c7767745a65ccd544a8142" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;consp&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;consp&lt;/strong&gt;&lt;em&gt;オブジェクト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dc978d1967d4905ba71e5d7faedb79b0ca5010f0" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;constrain-to-field&lt;/strong&gt;&lt;em&gt;new-pos old-pos &amp;amp;optional escape-from-edge only-in-line inhibit-capture-property&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;フィールドへの制約&lt;/strong&gt;&lt;em&gt;new-pos old-pos＆オプションのエッジからのエスケープのみインラインinhibit-capture-property&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5161e78605a25c810f76bba1161723d912d1f341" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;continue-process&lt;/strong&gt;&lt;em&gt;&amp;amp;optional process current-group&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;continue-process &lt;/strong&gt;&lt;em&gt;＆optional process current-group&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="66beb41618980a6b6bb7cffb5ee53d36cc1aa64c" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;controlling-tty-p&lt;/strong&gt;&lt;em&gt;&amp;amp;optional tty&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;controlling-tty-p &lt;/strong&gt;&lt;em&gt;＆optional tty&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d35524ae2027978f244f886ccdc5de018541aa96" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;convert-standard-filename&lt;/strong&gt;&lt;em&gt;filename&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;convert-standard-filename&lt;/strong&gt;&lt;em&gt;ファイル名&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1b6f1526053f78c7107eb0eb92cab40b1cc36642" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;coordinates-in-window-p&lt;/strong&gt;&lt;em&gt;coordinates window&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;coordinates-in-window-p&lt;/strong&gt;&lt;em&gt;座標ウィンドウ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cefaccbae868c7b4902703cfb7943bddff778496" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;copy-abbrev-table&lt;/strong&gt;&lt;em&gt;abbrev-table&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;copy-abbrev-table &lt;/strong&gt;&lt;em&gt;abbrev-table&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="05477ed7ac608fd8b3e3272550ecb46f322d185b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;copy-alist&lt;/strong&gt;&lt;em&gt;alist&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コピーアリスト&lt;/strong&gt;&lt;em&gt;リスト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1a15a724ebaaec34f4c9d9314cd2c2e3e5ccd2b9" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;copy-category-table&lt;/strong&gt;&lt;em&gt;&amp;amp;optional table&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;copy-category-table &lt;/strong&gt;&lt;em&gt;＆optional table&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="eefae7c8beed1b0b5b6da5dfcb01edcda5a7ee1d" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;copy-hash-table&lt;/strong&gt;&lt;em&gt;table&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コピーハッシュテーブル&lt;/strong&gt;&lt;em&gt;テーブル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a6bd9658c877a488b620d17ec2643e31ba90140f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;copy-keymap&lt;/strong&gt;&lt;em&gt;keymap&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コピーキー&lt;/strong&gt;&lt;em&gt;マップ&lt;/em&gt;&lt;strong&gt;キー&lt;/strong&gt;&lt;em&gt;マップ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7d2499496f24cd89b73ddffe65102a0299f97591" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;copy-marker&lt;/strong&gt;&lt;em&gt;&amp;amp;optional marker-or-integer insertion-type&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コピーマーカー&lt;/strong&gt;&lt;em&gt;＆オプションのマーカーまたは整数挿入タイプ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5e587634cca442e020f0c706118f989a2ff86ec2" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;copy-overlay&lt;/strong&gt;&lt;em&gt;overlay&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コピーオーバーレイ&lt;/strong&gt;&lt;em&gt;オーバーレイ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53faf02f535314cb065662fb2911191f1a62e79d" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;copy-sequence&lt;/strong&gt;&lt;em&gt;seqr&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コピーシーケンス&lt;/strong&gt;&lt;em&gt;seqr&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ea4b63ab9828ef6a325c422fb0fc5479d3d1248b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;copy-syntax-table&lt;/strong&gt;&lt;em&gt;&amp;amp;optional table&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;copy-syntax-table &lt;/strong&gt;&lt;em&gt;＆optional table&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="012ccb3b31dbdea963965c5a092a7de3239ef4ae" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;copy-tree&lt;/strong&gt;&lt;em&gt;tree &amp;amp;optional vecp&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;コピーツリー&lt;/strong&gt;&lt;em&gt;ツリーとオプションのvecp&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1a64d8b4bdbb296e2bd884a50f5ca8917d27a969" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;copysign&lt;/strong&gt;&lt;em&gt;x1 x2&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;copysign &lt;/strong&gt;&lt;em&gt;x1 x2&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="00249cd438ae637a9193f772746f08624599a84e" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;cos&lt;/strong&gt;&lt;em&gt;arg&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;cos &lt;/strong&gt;&lt;em&gt;arg&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b10f8933f829ac2ae6182565a31951b992476d7e" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;count-lines&lt;/strong&gt;&lt;em&gt;start end&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;カウントライン&lt;/strong&gt;&lt;em&gt;開始終了&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0db727da0c0cf2b9f178d26982c330eb4566f48f" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;count-screen-lines&lt;/strong&gt;&lt;em&gt;&amp;amp;optional beg end count-final-newline window&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;count-screen-lines &lt;/strong&gt;&lt;em&gt;＆optional beg end count-final-newline window&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="44eec9e3e05ae753cf36f56eabf7c7c6659ae969" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;create-file-buffer&lt;/strong&gt;&lt;em&gt;filename&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;create-file-buffer&lt;/strong&gt;&lt;em&gt;ファイル名&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5c9a8b4bd1c989283fa71a8b3742c2424b13acd8" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;create-fontset-from-fontset-spec&lt;/strong&gt;&lt;em&gt;fontset-spec &amp;amp;optional style-variant-p noerror&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;create-fontset-from-fontset-spec &lt;/strong&gt;&lt;em&gt;fontset-spec＆optional style-variant-p noerror&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d2fe7eef6fcf329fc855839317173d10eba630ab" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;create-image&lt;/strong&gt;&lt;em&gt;file-or-data &amp;amp;optional type data-p &amp;amp;rest props&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;create-image &lt;/strong&gt;&lt;em&gt;file-or-data＆optional type data-p＆rest props&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="660981832c6218180483c4a6ef25877bd207688e" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-active-maps&lt;/strong&gt;&lt;em&gt;&amp;amp;optional olp position&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;current-active-maps &lt;/strong&gt;&lt;em&gt;＆optional olp position&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="11214f9ef43c85fe30324daad0fc3deb86a88fc8" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-bidi-paragraph-direction&lt;/strong&gt;&lt;em&gt;&amp;amp;optional buffer&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;current-bidi-paragraph-direction &lt;/strong&gt;&lt;em&gt;＆optional buffer&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="556128c73143425022666edf49ecda8787770cad" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-buffer&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;電流バッファ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8a621669234aeb06017d08570f9c88910e2ef433" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-case-table&lt;/strong&gt;</source>
          <target state="translated">関数：&lt;strong&gt;current-case-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="72ccc875ed3393a062ec6c42af86febb297247a7" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-column&lt;/strong&gt;</source>
          <target state="translated">関数：&lt;strong&gt;current-column&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="efad6a5521a462260375afabd1f46e0896275aa2" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-fill-column&lt;/strong&gt;</source>
          <target state="translated">関数：&lt;strong&gt;current-fill-column&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3e08aae6c3f5fb84482cd1fdee5a3ff86dd9d609" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-frame-configuration&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;current-frame-configuration&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="214122a2379842dbf6f994ac76e5f33e9ab89dba" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-global-map&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;current-global-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b728e5d59f33844ab177958faee0309a195309a" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-idle-time&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;現在のアイドル時間&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fcc172966466e6d9e002402c1c64f320574c4a1c" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-indentation&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;現在のインデント&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0e1b5a3993c6aa4f9c1d83fd427920d7cd0eebd7" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-input-mode&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;電流入力モード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc8d4dc63fcbb706a3a66c47681df773dd90b201" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-justification&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;現在の正当化&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac691e5b54dcc143baff7162b1fb7f83686836f0" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-kill&lt;/strong&gt;&lt;em&gt;n &amp;amp;optional do-not-move&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;current-kill &lt;/strong&gt;&lt;em&gt;n＆optional do-not-move&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b3beddcb49a344fa4ace3c82b7910816d574a4a3" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-left-margin&lt;/strong&gt;</source>
          <target state="translated">関数：&lt;strong&gt;current-left-margin&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d2b6fe61677b1dec3bd975d2ebb7c36b4aca4cb" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-local-map&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;current-local-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="42d07126cc661fa102b8ce909b588cce54070ce2" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-message&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;現在のメッセージ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dde1a3d923b5063f1380d9de5e4b6442b18a9156" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-minor-mode-maps&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;current-minor-mode-maps&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ef8678b2df3915f2b379a0ec7f8fb5c2e5b3a3f2" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-thread&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;現在のスレッド&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11976434038367e6a68ac1e0243ebbacd0534c37" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-time-string&lt;/strong&gt;&lt;em&gt;&amp;amp;optional time zone&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;current-time-string &lt;/strong&gt;&lt;em&gt;＆optional time zone&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="df7533e3a0aa14dc9507bb37a8e4f7f0cb687385" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-time-zone&lt;/strong&gt;&lt;em&gt;&amp;amp;optional time zone&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;現在のタイムゾーン&lt;/strong&gt;&lt;em&gt;とオプションのタイムゾーン&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="74313ce752f2367cd10ef5f91b12861dd204e3ae" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-time&lt;/strong&gt;</source>
          <target state="translated">機能：&lt;strong&gt;現在時刻&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba1e5ad1423f3eb168d02b922afe7cd72fbda7ef" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-window-configuration&lt;/strong&gt;&lt;em&gt;&amp;amp;optional frame&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;current-window-configuration &lt;/strong&gt;&lt;em&gt;＆optional frame&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="67f5b4de860d9518e6ed3f601d2ce085857da18d" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;current-word&lt;/strong&gt;&lt;em&gt;&amp;amp;optional strict really-word&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;現在の単語&lt;/strong&gt;&lt;em&gt;とオプションの厳密な実際の単語&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="87fce282a2019f75cb7a1291c024717b353c64af" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;custom-add-frequent-value&lt;/strong&gt;&lt;em&gt;symbol value&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;custom-add-frequent-value&lt;/strong&gt;&lt;em&gt;シンボル値&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="01fb8f1efc7e2b3b17ad52cb843d0e09d95a1d89" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;custom-initialize-delay&lt;/strong&gt;&lt;em&gt;symbol value&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;custom-initialize-delay&lt;/strong&gt;&lt;em&gt;シンボル値&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="99d989f8b0e4176227f576dc447ba1d6ac496d49" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;custom-reevaluate-setting&lt;/strong&gt;&lt;em&gt;symbol&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;カスタム再評価設定&lt;/strong&gt;&lt;em&gt;記号&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5ca0a6935f2f3d83e1f5afe22e2bac24298717af" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;custom-set-faces&lt;/strong&gt;&lt;em&gt;&amp;amp;rest args&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;custom-set-faces &lt;/strong&gt;&lt;em&gt;＆rest args&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6937b78e3915f54d855c8d17aeaf5a562b03efb1" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;custom-set-variables&lt;/strong&gt;&lt;em&gt;&amp;amp;rest args&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;custom-set-variables &lt;/strong&gt;&lt;em&gt;＆rest args&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="98d6129186f78a1f23c5968353592ab14b8b13a8" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;custom-theme-p&lt;/strong&gt;&lt;em&gt;theme&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;custom-theme-p&lt;/strong&gt;&lt;em&gt;テーマ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f94d6ab2a2887067121b6aecc79edab898a0ffe" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;custom-theme-set-faces&lt;/strong&gt;&lt;em&gt;theme &amp;amp;rest args&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;custom-theme-set-faces &lt;/strong&gt;&lt;em&gt;theme＆rest args&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="85c9d6d1211568b37cdabbb0e5690d98ea100101" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;custom-theme-set-variables&lt;/strong&gt;&lt;em&gt;theme &amp;amp;rest args&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;custom-theme-set-variables &lt;/strong&gt;&lt;em&gt;theme＆rest args&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ddd4a7fcbc0c8ecccdc6d00926b6958c8809e408" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;custom-variable-p&lt;/strong&gt;&lt;em&gt;arg&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;custom-variable-p &lt;/strong&gt;&lt;em&gt;arg&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a97707418c413b67d8aa832a32a9b10b6aa462f5" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;date-days-in-month&lt;/strong&gt;&lt;em&gt;year month&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;日付-日-月&lt;/strong&gt;&lt;em&gt;年年月&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4f7e037d1c9f9fe81b425b4a93ae9eb8c67c0be2" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;date-leap-year-p&lt;/strong&gt;&lt;em&gt;year&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;日付-うるう年-p&lt;/strong&gt;&lt;em&gt;年&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="63fb9e7c34324882d35a3eaead9d9be4095a0379" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;date-ordinal-to-time&lt;/strong&gt;&lt;em&gt;year ordinal&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;日付-順序から時間への&lt;/strong&gt;&lt;em&gt;年の順序&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c4f62d3a9be72010e6ccdad3094d5b006978f2a6" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;date-to-time&lt;/strong&gt;&lt;em&gt;string&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;日付と時刻の&lt;/strong&gt;&lt;em&gt;文字列&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="daab4f53f1d3f3a6bf7ec701e94ee76caef97741" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;deactivate-mark&lt;/strong&gt;&lt;em&gt;&amp;amp;optional force&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;非アクティブ化-マーク&lt;/strong&gt;&lt;em&gt;とオプションの力&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f86c6640921e08a593e1edaeadd758515651e63b" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;decode-char&lt;/strong&gt;&lt;em&gt;charset code-point&lt;/em&gt;</source>
          <target state="translated">関数：&lt;strong&gt;decode-char&lt;/strong&gt;&lt;em&gt;文字セットコードポイント&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1df51b14f0afa91d56ea637dd9b82513469ebb45" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;decode-coding-inserted-region&lt;/strong&gt;&lt;em&gt;from to filename &amp;amp;optional visit beg end replace&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;decode-coding-inserted-region &lt;/strong&gt;&lt;em&gt;from to filename＆optional visit beg end replace&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="28aadf1391eacff34460b4859a64af1ee3fd0143" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;decode-coding-string&lt;/strong&gt;&lt;em&gt;string coding-system &amp;amp;optional nocopy buffer&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;デコード-コーディング-文字&lt;/strong&gt;&lt;em&gt;列&lt;/em&gt;&lt;strong&gt;文字&lt;/strong&gt;&lt;em&gt;列コーディング-システム＆オプションのnocopyバッファ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="66c969ac3b6b89c958d86555d38342b084c79fa7" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;decode-time&lt;/strong&gt;&lt;em&gt;&amp;amp;optional time zone form&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;デコード時間&lt;/strong&gt;&lt;em&gt;とオプションのタイムゾーンフォーム&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a7fd4069166bd37898dfff41f21dc205f1003266" translate="yes" xml:space="preserve">
          <source>Function: &lt;strong&gt;decoded-time-add&lt;/strong&gt;&lt;em&gt;time delta&lt;/em&gt;</source>
          <target state="translated">機能：&lt;strong&gt;デコードされた時間-&lt;/strong&gt;&lt;em&gt;時間デルタを&lt;/em&gt;&lt;strong&gt;追加&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
